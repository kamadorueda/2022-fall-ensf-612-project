{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5479",
  "author": "DarwinJS",
  "body": "It appears that Custom Script Extensions in Azure don't particularly like the call [System.IO.Path]::GetTempFileName() for getting a temporary file name.  It could be because it defaults to a path that does not exist for system account or that the path ends up under windows ('C:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\Temp\\') \r\n\r\nOriginally I was getting complaints about this on my own code which adds special permissions to the SSHD account.\r\n\r\nI solved that by creating my own temporary file name in the windows temp folder: https://github.com/DarwinJS/ChocoPackages/blob/master/openssh/tools/AddAccountToLogonAsAService.ps1#L33\r\n\r\nHere is a user contributed Chocolatey log that shows the process choking on the temporary file section done by adding or using the class AdjPriv\r\n\r\nhttps://gist.github.com/kha7/4fd139c4653e55f1ba5575e6851b4015#file-chocolatey-txt-L4078-L4130\r\n\r\nThe very end of this line shows the error \"Could not find a part of the path 'C:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\Temp\\ygcvgcvt.tmp'\"\r\n\r\nhttps://gist.github.com/kha7/4fd139c4653e55f1ba5575e6851b4015#file-chocolatey-txt-L4129\r\n\r\nI am tracking this issue here: https://github.com/DarwinJS/ChocoPackages/issues/41\r\n\r\nDoes anyone know how to confirm that the Azure Development team is tracking this as a bug - seems like not being able to work with this fundamental .NET call could create a problem for a lot of installers.",
  "closed_at": null,
  "comments": [
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT or @joeyaiello - any way to find out where to get this issue filed with whomever supports Azure Custom Script Extensions?",
      "created_at": "2017-11-16T18:10:24Z",
      "updated_at": "2017-11-16T18:10:24Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@DarwinJS I think this should be an issue in https://github.com/dotnet/corefx as from what you wrote it appears they are just making assumption about the home path and appending what would exist for a normal user account, but not correct for a system account.",
      "created_at": "2017-11-16T22:35:10Z",
      "updated_at": "2017-11-16T22:35:10Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT - that is the path generated by the .NET api [System.IO.Path]::GetTempFileName() - but I've only had complaints when running under Azure Custom Script Extensions.  So I'm wondering if the Custom Script Extensions do additional sandboxing?",
      "created_at": "2017-11-16T22:50:04Z",
      "updated_at": "2017-11-16T22:50:04Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@DarwinJS that I don't know, but I thought you said that the generated path doesn't actually exist?  I would expect that API to provide valid paths.",
      "created_at": "2017-11-16T23:30:37Z",
      "updated_at": "2017-11-16T23:30:37Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "@stevel-msft - the error says \"part of the path can't be *located*\"  - but if there is some type of process level sandboxing going on it could result in such an error.  The API only returns a temporary file name that it checks does not exist - I suspect it is the first attempt to use the file that causes the problem.  I would expect  proper operations as  well, however, the fact the temp file name API only checks for non existence combined with possible sandboxing specific to Azure Custom Script Extensions could feasibly produce this outcome. I had to remove this same call from my code for the same issue and now it is happening in opensshutils.psm1 - but only under Azure Custom Script Extensions.  I have two reports of it under Azure Custom Script Extensions.\r\n\r\nSo I think it would be the team responsible for the Azure part that should look into it as they would be knowledgeable about any process level sandboxing that might be in play.",
      "created_at": "2017-11-17T01:49:06Z",
      "updated_at": "2017-11-17T01:49:06Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "cc @joeyaiello if he can find the PM who owns Azure Custom Script Extensions",
      "created_at": "2017-11-17T02:19:31Z",
      "updated_at": "2017-11-17T02:19:31Z"
    }
  ],
  "created_at": "2017-11-16T13:27:59Z",
  "number": 5479,
  "state": "open",
  "title": "OpenSSHUtils.psm1 Not Compatible with Deploying by \"Custom Script Extension in Azure\"",
  "updated_at": "2017-11-17T02:19:32Z"
}