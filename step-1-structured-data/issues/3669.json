{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3669",
  "author": "SteveL-MSFT",
  "body": "One concern I've heard from several people is that they are surprised that anything emitted (generally accidentally because they didn't set or pipe to $null) within the function shows up in the pipeline.  Although is can be a powerful construct, it can also cause confusion to developers familiar with other language semantics for `return`.  PowerShell classes does support `return` to explicit return objects, but we should consider perhaps adding a property to the `CmdletBinding` attribute so that objects not `returned` are swallowed and only emitted if explicitly `returned`.",
  "closed_at": null,
  "comments": [
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "I think that will prevent a lot of bugs",
      "created_at": "2017-05-01T17:30:34Z",
      "updated_at": "2017-05-01T17:30:34Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "One proposal I had was to add something like:\r\n```\r\nusing strict return\r\n```\r\nAt the top of the script. We could also enable lexical scoping in a similar manner.",
      "created_at": "2017-05-01T21:56:12Z",
      "updated_at": "2017-05-01T21:56:12Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "Makes sense but only if a function with this new attribute does not prevent Windows PowerShell from being able to parse/use such a function.\r\nBeing able to enforce the return type and prevent PowerShell from casting the type of returned object would be great as well",
      "created_at": "2018-05-25T15:00:15Z",
      "updated_at": "2018-05-25T15:00:15Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I like the idea of adding an option to make this possible. But, I also fear this will result in some really bad code for PowerShell. It will encourage users to ball things up and return them all at once instead of releasing them to the pipeline as created. That is the issue I see more commonly coupled with users who mistakenly think that `return` is the only place objects are emitted.\r\n\r\nOne design consideration would be to include the ability to return multiple objects explicitly to without the flow control aspect of `return`. for the sake of demonstration I will use `emit` as a keyword for this:\r\n\r\n```powershell\r\nfunction Get-Stuff {\r\n    [CmdletBinding(ExplicitReturn)]\r\n    param ()\r\n    process {\r\n        # Not emitted\r\n        Get-ChildItem c:\\\r\n        # emitted without flow control\r\n        emit 1\r\n        emit 2\r\n        # emitted and flow control sent\r\n        return 3\r\n        # Not executed\r\n        Get-Date\r\n    }\r\n}\r\nGet-Stuff\r\n```\r\n\r\nResult:\r\n\r\n```none\r\n1\r\n2\r\n3\r\n```\r\n",
      "created_at": "2018-05-26T13:00:44Z",
      "updated_at": "2018-05-26T13:00:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Breaking change.",
      "created_at": "2018-05-26T17:33:52Z",
      "updated_at": "2018-05-26T17:33:52Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov How would this be a breaking change? So far everything discussed here is additive. instead of `emit` we could change `return` to accept a switch `return -Continue $value` or something.",
      "created_at": "2018-05-26T17:49:33Z",
      "updated_at": "2018-05-26T17:49:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Dot-sourcing can be break.",
      "created_at": "2018-05-26T18:15:23Z",
      "updated_at": "2018-05-26T18:15:23Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov I'm not sure I follow how that would break dot sourcing. Can you elaborate?",
      "created_at": "2018-05-26T18:32:53Z",
      "updated_at": "2018-05-26T18:32:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "```powershell\r\nusing strict return\r\n\r\n. .\\function.ps1\r\n```\r\nSeems `function.ps1` may not work as expected.",
      "created_at": "2018-05-26T18:45:28Z",
      "updated_at": "2018-05-26T18:45:28Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Maybe. The original proposal from @SteveL-MSFT  was to add a property to `CmdletBinding`. ",
      "created_at": "2018-05-26T19:05:13Z",
      "updated_at": "2018-05-26T19:05:13Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "`using` is this context should be lexical - applying only to the **file** it appears in. If `using` affected something dot sourced, that should be considered a bug.\r\n\r\nAnd even if it doesn't, one could say it's not a breaking change - you had to opt-in with new syntax.",
      "created_at": "2018-05-29T16:40:58Z",
      "updated_at": "2018-05-29T16:40:58Z"
    },
    {
      "author": "jez9999",
      "author_association": "NONE",
      "body": "Can I ask a dumb question?  It seems like the design goal of PowerShell was \"output stuff to the pipeline and then stop processing\".  So why does `return $someValue` even exist as valid syntax?  It makes it look an AWFUL lot like you are just returning `$someValue`.  Wouldn't it make more sense to say, if you want to just output anything emitted to the pipeline, say `return`.  If you want to swallow that and just output a certain value, say `return $someValue`?  Right now it seems like some weird hybrid where it outputs everything that was emitted previously AND `$someValue`.  I'd be interested to know the thinking that went into that decision.",
      "created_at": "2018-07-04T10:24:41Z",
      "updated_at": "2018-07-04T10:24:41Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "`return` allows you to return early from a function/scriptblock.  It's a way to alter the normal flow of control like `break` and `continue` do inside a loop.  \r\n\r\nAs a \"convenience\", `return` also allows a value to be output.  Essentially `return $someValue` is the equivalent of:\r\n```\r\n$someValue\r\nreturn\r\n```",
      "created_at": "2018-07-04T15:25:46Z",
      "updated_at": "2018-07-04T15:26:04Z"
    },
    {
      "author": "jez9999",
      "author_association": "NONE",
      "body": "Quite.  It's a convenience that saves no bytes at all, and looks misleading.",
      "created_at": "2018-07-04T19:43:14Z",
      "updated_at": "2018-07-04T19:43:14Z"
    },
    {
      "author": "jantari",
      "author_association": "NONE",
      "body": "> I like the idea of adding an option to make this possible. But, I also fear this will result in some really bad code for PowerShell. It will encourage users to ball things up and return them all at once instead of releasing them to the pipeline as created. That is the issue I see more commonly coupled with users who mistakenly think that `return` is the only place objects are emitted.\r\n> \r\n> One design consideration would be to include the ability to return multiple objects explicitly to without the flow control aspect of `return`. for the sake of demonstration I will use `emit` as a keyword for this:\r\n\r\nI feel like PowerShell could just reuse the C# syntax `yield return` for explicitly passing an object to the pipeline without exiting the function like a bare `return` would.\r\n\r\nI would still love to see this feature: `[CmdletBinding(ExplicitReturn)]` on functions and then only pass objects on to the pipeline with `yield return` or `return` keywords. As @SteveL-MSFT said it's been a long standing source of frustration for new and old PowerShell users, could this be looked at again and evaluated for the roadmap for this year or so?",
      "created_at": "2022-01-17T00:41:31Z",
      "updated_at": "2022-01-17T00:41:31Z"
    }
  ],
  "created_at": "2017-05-01T16:19:27Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Language"
  ],
  "number": 3669,
  "state": "open",
  "title": "Allow advanced functions to only return objects to the pipeline explicitly",
  "updated_at": "2022-01-17T00:41:32Z"
}