{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13277",
  "author": "xtqqczze",
  "body": "# PR Summary\r\n\r\n* `-replace '== null', 'is null'`\r\n* revert changes where type is not reference type (related PR: #13285)\r\n\r\n## PR Context\r\n\r\n<https://github.com/PowerShell/PowerShell/pull/13090#issuecomment-662995062>\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\n\n<!-- Reviewable:start -->\n---\nThis change is\u2002[<img src=\"https://reviewable.io/review_button.svg\" height=\"34\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/powershell/powershell/13277)\n<!-- Reviewable:end -->\n",
  "closed_at": "2020-07-30T13:04:04Z",
  "comments": [
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Can you review?",
      "created_at": "2020-07-27T10:07:57Z",
      "updated_at": "2020-07-27T10:07:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@xtqqczze The PR contains very many files. Please re-pack to 20-30-40 commits by 20-30 files. This will very seed up the code review.  Thanks!",
      "created_at": "2020-07-27T11:45:59Z",
      "updated_at": "2020-07-27T11:45:59Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Could you use the Reviewable link instead?",
      "created_at": "2020-07-27T11:58:20Z",
      "updated_at": "2020-07-27T11:58:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@xtqqczze Please resolve merge conflicts",
      "created_at": "2020-07-29T17:15:22Z",
      "updated_at": "2020-07-29T17:15:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Could you please help to resolve the merge conflict? ",
      "created_at": "2020-07-29T17:16:53Z",
      "updated_at": "2020-07-29T17:16:53Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov I will resolve conflicts now",
      "created_at": "2020-07-29T18:38:38Z",
      "updated_at": "2020-07-29T18:38:38Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Merge conflicts are resolved.",
      "created_at": "2020-07-29T19:56:37Z",
      "updated_at": "2020-07-29T19:56:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@xtqqczze Please rebase to pass CIs",
      "created_at": "2020-07-30T07:50:14Z",
      "updated_at": "2020-07-30T07:50:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Since there is high risk to catch merge conflicts I will merge.",
      "created_at": "2020-07-30T13:02:28Z",
      "updated_at": "2020-07-30T13:02:28Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "This one too. I don't understand why we do this. `== null` is conventional and clear, there is simply no readability issue at all.\r\nWe won't prevent future code changes to use `== null` and it will just be inconsistent in the end.\r\n\r\nI think we should revert this PR as soon as possible. /cc @TravisEz13 @adityapatwardhan @anmenaga @rjmholt ",
      "created_at": "2020-07-30T21:17:37Z",
      "updated_at": "2020-07-30T21:17:37Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov and @xtqqczze First, I want to thank both of you for continuously driving the code clean-up efforts and it's really appreciated!\r\n\r\nAs for this PR, the rest of maintainers discussed about it offline, and we all agree that we shouldn't force `is null` over `== null`. We think they clearly are appropriate in different scenarios. Changes in this PR will not only result in conflicts in other existing PRs, but also raise disputes in future contributions because people will continue to use `== null` and argue for it. So we decided to revert this PR.\r\n\r\nTo make it work better in future, @TravisEz13 submitted https://github.com/PowerShell/PowerShell/pull/13321 to add an action to label the size of a PR. Large size PRs would require a vote of the maintainers to accept.\r\n\r\nAlso, @iSazonov it would be great if you can join our maintainer meetings, which happens every two weeks. @adityapatwardhan will chat with you about it and decide the time that works for all of us.",
      "created_at": "2020-07-30T22:16:01Z",
      "updated_at": "2020-07-30T22:16:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> We think they clearly are appropriate in different scenarios.\r\n\r\nDifferent? [It is clearly documented](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/is#constant-pattern) for constants.\r\nWe can see that [IL code is the same](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxASwDYB8ACAmARgFgAoHAZgAJ9KBhSgb1IuoBZKAVOWACgHtgAKzgBjGJT4BKUkxKV5lNADNK/SgF51lAHYBXDBknUCATh4AiCOckBuUgspwMUOMbPng1uyQC+pewosOOxcsHj8QqLiUjIB8sqqfIpQOvqGbhZWtnGOzq44phae2b7+vkA) for both patterns in .Net 5.0 (until Equals() is not overloaded) \r\n\r\nAfter Mads Torgersen announced this on .Net Conf 2019 it has become a favorite feature for many developers. I'd expect they will be amazed if we do not modernized PowerShell code.\r\n\r\n> Changes in this PR will not only result in conflicts in other existing PRs, but also raise disputes in future contributions because people will continue to use == null and argue for it.\r\n\r\nWe already have great experience in the area. We had many such PRs. After we fixed most of CodeFactor issues and all code base is in the same style we no longer have style discussions with contributors (and no new CodeFactor issues) - (1) they follow code style, (2) they follow standard and expected style rules, (3) they see CodeFactor warnings.\r\nThe only thing that we haven\u2019t done yet is we haven\u2019t forced on Roslyn analyzers for base rules.\r\n\r\nI understand that MSFT team follows the traditional conservatism that is well characteristic of closed source projects, but open source projects work differently, which has already been clearly demonstrated many times in this project - they require polishing and modernizing OSS code.\r\nI hope MSFT team will find many benefits from this for their day-to-day work on this and other projects.\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2020-08-02T03:38:49Z",
      "updated_at": "2020-08-02T03:38:49Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I'm still for keeping this PR personally. Yes, it's resulted in merge conflicts that I've fixed (twice now, guess I should have been slower on the uptake hehe) but the merge conflicts it tends to create are relatively small and simple to resolve, so I don't see it as being a big deal.\r\n\r\nHowever, if we're concerned about merge conflicts, it's the order of merging PRs that matters, so we'd be better off focusing on improvements to the triage process than the exact nature of a given PR and how that affects it being accepted or not.",
      "created_at": "2020-08-02T03:59:28Z",
      "updated_at": "2020-08-02T03:59:28Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> This one too. I don't understand why we do this. `== null` is conventional and clear\r\n\r\nTbh it's really not that clear that when you're doing a simple null check you need to worry about a type having a wonky `op_Equality` implementation.  Or that `obj == null ? new() : obj` and `obj ?? new()` would result in different code if a `op_Equality` is defined. ([SharpLab demo](https://sharplab.io/#v2:C4LglgNgPgAgTARgLACgYGYAE9MGFMDeqmJ2WMALHgIYQQDOAogI4CutYwAngBQBC1ACYB5AEYArAKYBjYJgD2EgJSFipdYvGYAvAok7dAO1Z1MAfkyHJAd0wCREmcB4qQe8QG41JAL7fM/hjYVAAKrABOkgByJhC4ABYyANb8QmJSsu4qRCjqGvq6muYWVrb26U4uXrmkfih1qEE45Y6yqDnqTQgAbJii8vIQCgAOkuHUwPLhBqkOGXIQ8fQANHZprXLhS0r+HXkkYABmmDyL9Jhg58amUFCYW+eXlrE7Nft7++rA8eHytqWYRgAD2kkmGwDA8kMVX86jqn1hpBgAHZMMBwqxJNU4f5AuQen0BkN5KNxpNpgBCbSzCqZM6rFrze7bXaIg7HU5LC5XWKYW7Mx48uivT6qN6itE/P6WGyAkFgiFQmHinEqkhs7Cow60ehY/x1HxAA))\r\n\r\n> there is simply no readability issue at all.\r\n\r\nI don't really disagree here, but keep in mind that readability is subjective.  Less definitive language would probably be advisable.\r\n\r\n> We think they clearly are appropriate in different scenarios.\r\n\r\nYeah I agree with that.  `== null` is still useful if you want to explicitly opt into an `op_Equality` implementation.  Ideally with a comment explaining that.",
      "created_at": "2020-08-02T04:43:26Z",
      "updated_at": "2020-08-02T04:43:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "_Only after C# 8.0_ the different scenarios is possible. And I am very curious why anyone could implement such an unusual `op_Equality` implementation that looks like a tricky bug. \r\n",
      "created_at": "2020-08-02T17:49:42Z",
      "updated_at": "2020-08-02T17:49:42Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> _Only after C# 8.0_ the different scenarios is possible. And I am very curious why anyone could implement such an unusual `op_Equality` implementation that looks like a tricky bug.\r\n\r\nI've absolutely seen `op_Equality` implementations that didn't handle `null` correctly.  Note that I'm arguing *for* `is null` syntax.  Using the existing `== null` syntax instead opens you up to these types of bugs without much benefit. There's almost never a reason to opt into `op_Equality` when you're null checking.",
      "created_at": "2020-08-02T18:04:11Z",
      "updated_at": "2020-08-02T18:04:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "This is exactly the reason why this PR should be adopted as quickly as possible. (re-reverted :-) )\r\n",
      "created_at": "2020-08-02T18:21:29Z",
      "updated_at": "2020-08-02T18:22:10Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "This is exactly the discussion that I tried to avoid getting into \ud83d\ude04\r\n\r\n> We already have great experience in the area. We had many such PRs. After we fixed most of CodeFactor issues and all code base is in the same style we no longer have style discussions with contributors (and no new CodeFactor issues)\r\n\r\nI don't think it's the same for this case. A contributor shouldn't be forced to choose the pattern matching over the conventional `!=/==` when comparing to null. I don't think this is a style that we should forcefully enforce in this code base. Has dotnet/runtime repo changed all `!=/== null` to the `is/is not null` pattern matching style?\r\n\r\nAs for the `op_Equality` implementations that didn't handle `null` correctly, I would personally argue `!=/==` is better in terms of revealing those bugs :) So, you can see that this is pretty subjective, and I don't think we should enforce a rule on a case like this.",
      "created_at": "2020-08-03T17:53:14Z",
      "updated_at": "2020-08-03T17:53:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Has dotnet/runtime repo changed all !=/== null to the is/is not null pattern matching style?\r\n\r\n~25% files. They usually force after creating a Roslyn analyzer.\r\n",
      "created_at": "2020-08-03T18:45:11Z",
      "updated_at": "2020-08-03T18:45:11Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw I'd be surprised that PowerShell is expected to find bugs in someone else's utilization of an `op_Equals` overload?\r\n\r\nSurely it's preferable to use the more robust implementation that avoids treading on the proverbial broken glass here? \ud83d\ude15 ",
      "created_at": "2020-08-03T20:54:35Z",
      "updated_at": "2020-08-03T20:54:35Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "How do you know for sure that's a bug then? The type could be purposefully considered as a null, something like the `AutomationNull` :) Besides, we have been using `==/!= null` for more than a decade, so I doubt the `op_Equality` implementation concern is practically a problem to PowerShell.",
      "created_at": "2020-08-03T21:10:41Z",
      "updated_at": "2020-08-03T21:10:41Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "It depends on the purpose, perhaps, but in general just because the author of a type decided that their type is equivalent to null doesn't mean that for all cases in the internals of another library / PowerShell it should be considered equivalent.\r\n\r\nAdditionally, while I don't really know a great way to phrase this (but I do think it needs to be raised nonetheless), I don't think the argument of \"we've always done it this way\" holds literally any water, frankly. If we wait for a bug to show up even when there's a clear way to avoid it ever becoming a concern, I think that's cause for concern. Reactive solutions are often rushed; proactive solutions give us the opportunity to consider more robust solutions and avoid problems in the first place, fix coding practices and set in stone less error-prone practices.\r\n\r\nAre there places you might want to use `==` null and permit odd behaviour? Potentially, sure. But _everywhere_ in a code base? I really hope not.\r\n\r\nJust because a tool is new and it would be some amount of work to move to it doesn't mean it's not worth using.\r\n\r\nAdditional food for thought:\r\n\r\n- [`is null` provides compile-time type safety against value type comparisons](https://stackoverflow.com/questions/40676426/what-is-the-difference-between-x-is-null-and-x-null#:~:text=There%20is%20in%20fact%20a,%3D%3D%20operator%20if%20it%20exists.)\r\n- [Blogpost by Jaxx](https://www.gullberg.tk/blog/is-null-versus-null-in-c/) - it's frankly annoying to debug such issues, and `is null` never needs to call potentially expensive methods to do the comparison.\r\n- [Some direct comparisons](https://intellitect.com/check-for-null-not-null/)\r\n",
      "created_at": "2020-08-03T23:00:26Z",
      "updated_at": "2020-08-03T23:00:35Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> How do you know for sure that's a bug then?\r\n\r\nI'd say it is always bug if we see comparison with `null` but this works differently.\r\nIf an engine calls a virtual `op_Equality` and then dereference it will throw if the `op_Equality` pass null \"by design\" because the engine know nothing about the \"design\". `is null` was introduced to explicitly protect a base code from such things.\r\n\r\n_All nullability support in Roslyn follow this too._\r\n\r\nI understand if somebody has some branches in backlog and have to rebase and resolve merge conflicts occasionally it is annoying. Also I understand MSFT team has to spend a time on minor commit reviews.\r\nBut MSFT team has already opened this door for several years, concluding that we want to use _new features_. This spawned style discussions that ended _as soon as_ we fixed over 60,000 style issues.\r\nNow the situation is similar - we can postpone this change, but all this time questions will arise until this change occurs.\r\n.Net team also does a similar job from time to time.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2020-08-04T05:35:56Z",
      "updated_at": "2020-08-04T05:35:56Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "What I tried to say is that your argument goes both way.\r\n\r\nWith the current use of `==/!= null` being in the code base for over a decade, we can say the current behavior of PowerShell is that it respects the `op_Equality` implementation of a custom type. Blindly changing all `==/!= null` to `is/is not null` is essentially a breaking change -- in order to tolerate a hypothetical custom type whose `op_Equality` handles `null` incorrectly, _which by the way doesn't work correctly with any existing version of PowerShell so far_, you choose to break another hypothetical custom type whose `op_Equality` intentionally handles `null` in the way that works with existing versions of PowerShell.\r\n\r\nIf a custom type doesn't handle `==/!= null` correctly, then it's a bug of that type/library and it should be fixed in that library. I don't think we should instead ask a tool to tolerate the bug of that library. And if you want that custom type to really work with PowerShell properly, then it has to fix the `null` handling anyway because otherwise it won't work in PS 7.0 and PS 5.1.",
      "created_at": "2020-08-04T05:42:38Z",
      "updated_at": "2020-08-04T05:42:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> With the current use of ==/!= null being in the code base for over a decade, we can say the current behavior of PowerShell is that it respects the op_Equality implementation of a custom type.\r\n\r\nIf I understand correctly a root of your concern is that PowerShell may call third-party `op_Equality` (not from .Net Runtime). \r\nCan you please point such place in Engine? Sorry for the ask to spend your time.\r\nI can think only about custom providers (completers is not so critical). Is the Engine provider code really sensitive to custom `op_Equality` in the null context?",
      "created_at": "2020-08-04T06:06:38Z",
      "updated_at": "2020-08-04T06:06:38Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "My comment is completely based on the behavior difference between `is/is not` and `==/!=` around the `op_Equality` implementation, which is the main argument you guys have. If you can point to me one place where changing to `is/is not null` would allow a buggy custom type that handles `null` incorrectly to work with PowerShell, then that's a place where you are potentially breaking a currently working custom type.\r\n\r\nAll I want to say is that I don't think the `op_Equality` implementation thing is practically a concern to PowerShell. Especially, if you choose to favor a buggy custom type, you will potentially break another custom type that is working fine with PowerShell today.\r\n\r\nLet's be aware of the subtle differences between those 2 syntax, and choose what to use based on the problem you are solving, instead of just preferring one over another universally.",
      "created_at": "2020-08-04T16:10:23Z",
      "updated_at": "2020-08-04T16:10:23Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Sure, absolutely. But I think the vast majority of the cases where we currently use `== null` in the codebase we're better off with `is null`.",
      "created_at": "2020-08-04T16:12:47Z",
      "updated_at": "2020-08-04T16:12:47Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> My comment is completely based on the behavior difference between `is/is not` and `==/!=` around the `op_Equality` implementation, which is the main argument you guys have.\r\n\r\nThe *best* case scenario for that is less efficient code gen (even if inlined probably).  I have a really hard time thinking of a situation where it would be genuinely useful to return `true` when the LHS is a concrete object.  We don't even do that with `AutomationNull` because you still need to tell the difference between `null` and `autonull`, hell `PSObject` doesn't even implement `op_Equality`.\r\n\r\nIs there a big risk of a bad `op_Equality` implementation in a type this repo directly references? Nah, not really.  Risk is pretty small all things considered.  That said it is still a pretty clear benefit (no matter how small) over `== null`.  If your argument was \"I understand the benefits but they're too small to outweigh the comfort level I have with `== null`\" then I probably wouldn't have popped into this thread.  I wouldn't agree but \ud83e\udd37 it's low enough impact that that's not an outrageous statement.\r\n",
      "created_at": "2020-08-04T16:59:51Z",
      "updated_at": "2020-08-04T16:59:51Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov @daxian-dbw Too many merge conflicts to re-revert this PR now. I think this should be revisited once dotnet/runtime has made started widespread  '== null' -> 'is null' changes.",
      "created_at": "2020-08-10T23:59:13Z",
      "updated_at": "2020-08-10T23:59:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Too many merge conflicts to re-revert this PR now.\r\n\r\nIt already was reverted.\r\n\r\n>  I think this should be revisited once dotnet/runtime has made started widespread '== null' -> 'is null' changes.\r\n\r\nI'd expect they will do this after fork to .Net 6.0.",
      "created_at": "2020-08-11T07:59:45Z",
      "updated_at": "2020-08-11T07:59:45Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "> @iSazonov @daxian-dbw Too many merge conflicts to re-revert this PR now. I think this should be revisited once dotnet/runtime has made started widespread '== null' -> 'is null' changes.\r\n\r\nThese changes are now being made: https://github.com/dotnet/runtime/pull/42692\r\n",
      "created_at": "2020-10-22T14:48:07Z",
      "updated_at": "2020-10-22T14:48:07Z"
    }
  ],
  "created_at": "2020-07-25T17:40:28Z",
  "number": 13277,
  "state": "closed",
  "title": "Use `is null` syntax",
  "updated_at": "2020-10-22T14:48:07Z"
}