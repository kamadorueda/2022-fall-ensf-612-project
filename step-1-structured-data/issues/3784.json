{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3784",
  "author": "iSazonov",
  "body": "Close #3744 \r\n\r\nCurrently `ValidateSetAttribute` accepts only explicit constants as valid values. This is a significant limitation. Sometimes we need to get valid values dynamically, ex., Azure VMs, logged-on users and so on. The PR add follow possibilities:\r\n- pass a _custom type_ (a valid values generator) implementing `IValidateSetValuesGenerator` interface to get valid values dynamically.\r\n- pass a _custom type_ (a valid values generator) derived  from `CachedValidValuesGeneratorBase` abstract class to get valid values dynamically and _cache_ the list to share with other ValidateSetAttribute attributes.\r\n\r\nWe support valid values generators on PowerShell and C#.\r\n\r\n\r\n",
  "closed_at": "2017-07-14T04:28:33Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">Still thinking out loud - the cache maybe belongs in the generator, but maybe we provide some helpers to manage it - perhaps as an abstract base class.\r\n\r\nWouldn't that be too intrusive? `IValidateSetValuesGenerator` looks very powerful.\r\nIf we want such cache in the generator it seems we should migrate from `IValidateSetValuesGenerator` interface to `ValidateSetValuesGenerator` class and force users to inherite from the class. Maybe we stop on `IValidateSetValuesGenerator`? Now we have 'generic' caching internally in `ValidateSet` so maybe we'll leave the users full freedom in `IValidateSetValuesGenerator`?",
      "created_at": "2017-05-22T15:34:35Z",
      "updated_at": "2017-05-22T15:34:35Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I had feedback in the form of a [PR to TabExpansionPlusPlus](https://github.com/lzybkr/TabExpansionPlusPlus/commit/b1d99d34aac92b07fa76aae3c5aa5a426e75993c)  that caching should be built-in.",
      "created_at": "2017-05-23T17:58:43Z",
      "updated_at": "2017-05-23T17:58:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Do you mean that the cache has to work between different `ValidateSet` instances? With `validValuesGeneratorType` key?",
      "created_at": "2017-05-23T18:53:21Z",
      "updated_at": "2017-05-23T18:53:21Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Many cmdlets have parameters that are common, e.g. there are 72 commands in AzureRM.Compute that accept `-ResourceGroupName`.\r\n\r\nOn my machine, it takes >1s to query the resource group names\r\n\r\nSo I think a cache that works across `ValidateSet` instances would be very helpful.",
      "created_at": "2017-05-23T20:07:02Z",
      "updated_at": "2017-05-23T20:07:02Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr \r\n> I had feedback in the form of a PR to TabExpansionPlusPlus that caching should be built-in.\r\n\r\nIt feels almost more often than not that I implement some sort of custom completion caching. But often with less than stellar aging/expiration.\r\n",
      "created_at": "2017-05-23T20:32:41Z",
      "updated_at": "2017-05-23T20:32:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I had to rebase to get autoloading of helper modules.\r\n\r\nGlobal valid values cache was added. The only question is. I clean up this cache never. Should we add clean-up and where? Although it seems superfluous.",
      "created_at": "2017-05-24T15:18:25Z",
      "updated_at": "2017-05-24T15:18:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr Could you please continue the code review?",
      "created_at": "2017-05-26T15:06:47Z",
      "updated_at": "2017-05-26T15:06:47Z"
    },
    {
      "author": "lfshr",
      "author_association": "NONE",
      "body": "Is this definitely limited to 'binary' cmdlets? Has anyone tested this using a PS declared class?",
      "created_at": "2017-06-01T16:11:46Z",
      "updated_at": "2017-06-01T16:11:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@lfshr Scripts is supported - see tests in the PR. We will edit the PR description after completing this work.",
      "created_at": "2017-06-02T02:55:58Z",
      "updated_at": "2017-06-02T02:55:58Z"
    },
    {
      "author": "lfshr",
      "author_association": "NONE",
      "body": "@iSazonov absolutely brilliant, v good work! Well done @lzybkr for the solution. (I take full credit for the moan that instigated it \ud83d\ude1b)",
      "created_at": "2017-06-02T08:37:19Z",
      "updated_at": "2017-06-02T08:37:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr Could you please continue the code review?",
      "created_at": "2017-06-27T18:44:56Z",
      "updated_at": "2017-06-27T18:44:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I have a feeling that this will make many folks happy, but it will fall short for others, mostly around wanting access to some context, e.g. the cmdlet or some of the already bound parameters.\r\n\r\n@lzybkr Shall we continue with the \"some context\"?",
      "created_at": "2017-06-30T04:01:45Z",
      "updated_at": "2017-06-30T04:01:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems we catch a race condition on slow OSX. \ud83d\ude15 ",
      "created_at": "2017-06-30T05:12:12Z",
      "updated_at": "2017-06-30T05:12:12Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Wasn't there a CLR bug we were hitting on Mac related to defining classes? Maybe @daxian-dbw remembers.",
      "created_at": "2017-07-01T04:18:15Z",
      "updated_at": "2017-07-01T04:18:15Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "If you want to investigate options for providing more information to the generator - I could imagine wanting to know the command, maybe the command ast, the actual parameter the attribute is applied to, and maybe the already bound parameters.",
      "created_at": "2017-07-01T04:21:32Z",
      "updated_at": "2017-07-01T04:21:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I tried to think about it. If we cache and share the generator, we can't store the context in it and should pass it as a parameter.  Even if we send `engineIntrinsics` from `Validate()` to `ValidateElement()` we cannot send it to a generator - we get valid values with the `ValidValues` _property_, and we use the property in Intellisense completers. Although `engineIntrinsics` contains current cmdlet info it does not contain current binding parameter info.\r\nThat way requires too much effort. \ud83d\ude15 Is there another way?",
      "created_at": "2017-07-10T14:11:00Z",
      "updated_at": "2017-07-10T14:16:04Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "We can add an interface:\r\n\r\n```c#\r\npublic interface IExtendedValidateArguments\r\n{\r\n    void Validate(object arguments, EngineIntrinsics engineIntrinsics, /* extra args*/);\r\n}\r\n```\r\n\r\nThen:\r\n```C#\r\n    public abstract class ValidateArgumentsAttribute : CmdletMetadataAttribute\r\n    {\r\n        //...\r\n\r\n        internal void InternalValidate(object o, EngineIntrinsics engineIntrinsics, /* extra args */)\r\n        {\r\n            if (var extended = this as IExtendedValidateArguments) {\r\n                extended.Validate(o, engineIntrinsics, /* extra args */ );\r\n            } else {\r\n                Validate(o, engineIntrinsics);\r\n            }\r\n        }\r\n```\r\n\r\nAnd lastly implement that interface for ValidateSetAttribute.\r\n\r\nAlternatively, we can move the type test to the parameter binder to avoid passing extra arguments if that is expensive somehow.",
      "created_at": "2017-07-10T15:24:38Z",
      "updated_at": "2017-07-10T15:24:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Thanks! I still don't see how fix the `ValidValues`  property for completers. It seems we need a new method in the interface?",
      "created_at": "2017-07-10T17:38:22Z",
      "updated_at": "2017-07-10T17:38:22Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "After thinking a bit more about this, what I would want is `[ValidateCompleterSet]`\r\n\r\nIt would combine two features: `IArgumentCompleter` for getting values, and `ValidateSet` for limiting what can be passed to the function/cmdlet.\r\n\r\nThat way we could also get the tooltips etc, and have the validation based on the `CompletionText` of the `CompletionResult`.\r\n\r\nI understand I'm a bit late to this party...\r\n",
      "created_at": "2017-07-12T14:49:40Z",
      "updated_at": "2017-07-12T14:49:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr I believe we should stop and merge because here we cannot resolve the problem with ValidValues public property while we share valid values generators.\r\nIt seems the @powercode's idea (thanks!) opens alternative way.",
      "created_at": "2017-07-12T16:05:35Z",
      "updated_at": "2017-07-12T16:05:35Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I'm fine with merging soon - but the test failure needs to be worked out.\r\n\r\nI'll be very busy for the next 1.5 weeks, much of the time offline, so don't be too concerned if you don't see any response from me.",
      "created_at": "2017-07-12T16:22:17Z",
      "updated_at": "2017-07-12T16:22:17Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I think this is almost ready to be merged -- 2 more comments to be addressed.\r\n> I believe we should stop and merge because here we cannot resolve the problem with ValidValues public property while we share valid values generators.\r\n\r\nI don't have the context of the `'the problem with ValidValues'`, can you please elaborate it a bit? But no matter what, it should not block this PR and the further discussion should be captured in an issue.",
      "created_at": "2017-07-13T00:52:44Z",
      "updated_at": "2017-07-13T00:52:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw\r\nFrom lzybkr optional idea:\r\n> I could imagine wanting to know the command, maybe the command ast, the actual parameter the attribute is applied to, and maybe the already bound parameters.\r\n...\r\nWe can add an interface:\r\npublic interface IExtendedValidateArguments\r\n\r\nThe idea is to pass a context to a valid value generator. \r\nUsing the new interface we can pass the context to `Validate()` but we have public property ValidValues - I don`t see how we can pass the context to the property. The root of the problem is that we cache and share the generator. If we add \"context\" to the cache, the effectiveness of the cache will decrease to 0.\r\n",
      "created_at": "2017-07-13T07:48:47Z",
      "updated_at": "2017-07-13T07:48:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @joeyaiello  We are near a Milstone - 996 repo forks :-)",
      "created_at": "2017-07-13T11:13:06Z",
      "updated_at": "2017-07-13T11:13:06Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I will merge this PR soon. I assume #3744 is fixed by this PR, so for further enhancement discussion, please open a new issue to continue.\r\n\r\n@iSazonov now that the design and implementation are complete, could you please update the PR description with a summary of the design and new functionalities? We need that information for the documentation.",
      "created_at": "2017-07-13T16:34:33Z",
      "updated_at": "2017-07-13T16:34:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw I added the PR description - please review.",
      "created_at": "2017-07-14T03:59:48Z",
      "updated_at": "2017-07-14T03:59:48Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov Perfect! Thank you for the great work!",
      "created_at": "2017-07-14T04:27:00Z",
      "updated_at": "2017-07-14T04:27:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Many thanks @lzybkr for ideas and helps!",
      "created_at": "2017-07-14T05:05:33Z",
      "updated_at": "2017-07-14T05:05:33Z"
    },
    {
      "author": "Menelion",
      "author_association": "NONE",
      "body": "Hi everyone,  \r\nI found this PR when searching for exactly the same solution: how to implement `validateSet` from a dynamically generated array of subfolders in a PS script. I see that this is merged, but is there any documentation about this? If not, could you please either point me to the test where I can see it in action or just drop a couple lines to illustrate it? And one more question: if I run Windows 10 1709, do I need to update PowerShell to have this working?  \r\nThanks!",
      "created_at": "2018-03-29T16:08:10Z",
      "updated_at": "2018-03-29T16:08:10Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@Menelion Generally you should open a new issue for this kind of thing rather than comment on a closed PR you can reference a PR in an issue by doing `#3784` and it will appear like this: #3784 \r\n\r\nYou can find some documentation of the API here https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.ivalidatesetvaluesgenerator?view=pscore-6.0.0\r\n\r\nThis features was added in PowerShell Core 6.0.0. To use, your PowerShell code must run in PowerShell Core 6.0.0 or newer. \r\n\r\nYou can find example usage here in this PR or at https://github.com/PowerShell/PowerShell/blob/master/test/powershell/Language/Classes/Scripting.Classes.Attributes.Tests.ps1",
      "created_at": "2018-03-29T18:38:20Z",
      "updated_at": "2018-03-29T18:38:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">  where I can see it in action or just drop a couple lines to illustrate it?\r\n\r\n@Menelion You could look our tests which was added in the PR.",
      "created_at": "2018-03-30T06:07:15Z",
      "updated_at": "2018-03-30T06:07:33Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "I am trying to use this, but I always get `The type or namespace name 'IValidateSetValuesGenerator' could not be found (are you missing a using directive or an assembly reference?)`\r\n\r\nI am using the latest `PowerShellStandard.Library` (`5.1.0-preview-06`). How can I reference this interface?",
      "created_at": "2018-08-19T14:40:57Z",
      "updated_at": "2018-08-19T14:40:57Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "That interface was introduced in `6.0.0`, so you would need to reference to https://powershell.myget.org/feed/powershell-core/package/nuget/System.Management.Automation",
      "created_at": "2018-08-19T20:56:05Z",
      "updated_at": "2018-08-19T20:56:05Z"
    }
  ],
  "created_at": "2017-05-15T08:18:41Z",
  "number": 3784,
  "state": "closed",
  "title": "ValidateSetAttribute enhancement: support set values to be dynamically generated from a custom ValidateSetValueGenerator",
  "updated_at": "2018-10-15T21:56:04Z"
}