{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7450",
  "author": "MSAdministrator",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\nI am seeing an issue with setting a custom Type on a `PSCustomObject`.  To reproduce, I have a function that takes input and returns a custom object\r\n```powershell\r\nfunction New-CustomObject{\r\n[CmdletBinding(DefaultParameterSetName = 'Parameter Set 1',\r\n        PositionalBinding = $false,\r\n        HelpUri = '',\r\n        ConfirmImpact = 'Medium')]\r\n    param (\r\n        [Parameter(Mandatory = $true,\r\n            Position = 0,\r\n            ValueFromPipelineByPropertyName = $true,\r\n            ParameterSetName = 'Parameter Set 1')]\r\n        [ValidateNotNull()]\r\n        [ValidateNotNullOrEmpty()]\r\n        [String]$SomeString\r\n)\r\n\r\n$CustomObject = @()\r\n\r\n$CustomObject = $SomeString\r\n$CustomObject.PsObject.TypeNames.Add('Example.Custom.Type')\r\n$CustomObject.PSObject.TypeNames.Insert(0, 'Example.Custom.Type')\r\n\r\nreturn $CustomObject\r\n# I have also tried to call Write-Output and still the same result.\r\n}\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nThe expected behavior is that when an object has a custom type set, it should retain this custom type when returned from a function in PowerShell core.\r\n```none\r\n\r\n```\r\n\r\nActual behavior\r\n---------------\r\nWhen getting the returned object it does not have the PSTypeName and it cannot be used in an additional function with a specified custom type name.  For example, in a Advanced Function I have a parameter with a custom type and it will not accept this object:\r\n\r\n```powershell\r\n[PSTypeName('Example.Custom.Type')][object[]]$SomeCustomType,\r\n```\r\n\r\nCalling the function I provided above has the following results:\r\n```powershell\r\n$CustomTypeObject = New-CustomObject -SomeString 'Here is some string'\r\n$CustomTypeObject.GetType()\r\n```\r\n\r\n```output\r\n#Returned results\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     True     String                                   System.Object\r\n```\r\n\r\n```powershell\r\n# Calling the pstypenames property I get the following\r\n$CustomTypeObject.pstypenames\r\n```\r\n\r\n```output\r\nSystem.String\r\nSystem.Object\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.2\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.2\r\nOS                             Darwin 17.7.0 Darwin Kernel Version 17.7.0: Thu Jun 21 22:53:14 PDT 2018; root:xnu-4570.71.2~1/RELEASE_X86_64\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
  "closed_at": "2018-08-06T14:42:50Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What about\r\n```powershell\r\n$b = [pscustomobject]@{v = \"tst\"}\r\n$b\r\n$b.psobject\r\n$b.psobject.TypeNames.add(\"TestType\")\r\n$b.psobject\r\n```",
      "created_at": "2018-08-05T13:29:00Z",
      "updated_at": "2018-08-05T13:29:00Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "This actually has nothing to do with functions. It appears that you cannot add custom types to strings. In your example code, you are essentially assigning a custom type name to the `$SomeString` string. \r\n\r\nYou can repro this problem more succinctly with:\r\n\r\n```powershell\r\n$a = 'a'\r\n$a.PSObject.TypeNames.Insert(0,'Example.Custom.Type')\r\n$a.PSOBject.TypeNames\r\n```\r\n\r\nYou can see that the `'Example.Custom.Type'` PSTypeName is not added to the TypeNames collection. I get the same result in 5.1 as  do in 6.0.0+",
      "created_at": "2018-08-05T17:27:55Z",
      "updated_at": "2018-08-05T17:27:55Z"
    },
    {
      "author": "dragonwolf83",
      "author_association": "NONE",
      "body": "The code is not producing a `PSCustomObject`. You are setting an array and then overwriting it with a string, so the type is `String`. Using `Write-Output` or `return` does not change or set the type to be a `PSCustomObject`. \r\n\r\nYou either need to use `New-Object` and `Add-Member` or more simply\r\n```PowerShell\r\n$CustomObject = [PSCustomObject] @{ SomeString = $SomeString }\r\n```\r\n\r\nYou can also simplify it down even further by setting `PSTypeName` with the object and let it output directly to the Pipeline. See the code below:\r\n```PowerShell\r\nfunction New-CustomObject{\r\n[CmdletBinding(DefaultParameterSetName = 'Parameter Set 1',\r\n        PositionalBinding = $false,\r\n        HelpUri = '',\r\n        ConfirmImpact = 'Medium')]\r\n    param (\r\n        [Parameter(Mandatory = $true,\r\n            Position = 0,\r\n            ValueFromPipelineByPropertyName = $true,\r\n            ParameterSetName = 'Parameter Set 1')]\r\n        [ValidateNotNull()]\r\n        [ValidateNotNullOrEmpty()]\r\n        [String]$SomeString\r\n)\r\n\r\n    [PSCustomObject] @{ \r\n        PSTypeName = \"Example.Custom.Type\"\r\n        SomeString = $SomeString\r\n    }\r\n}\r\n\r\n$CustomTypeObject = New-CustomObject -SomeString 'Here is some string'\r\n$CustomTypeObject | Get-Member \r\n```\r\n\r\nNotice, I do not have `Write-Output` or `return`. Anything that generates output defaults to writing to the `Output Stream` of the Pipeline which is what is returned, no matter where or how many times it is written in the function. If I set the object to a variable, I can just output with `$customVariable` and will do the same thing as `Write-Output $customVariable`.",
      "created_at": "2018-08-05T19:05:37Z",
      "updated_at": "2018-08-05T19:05:37Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@dragonwolf83 You can manipulate TypeNames on just about any object type, not just `PSCustomObject`s. However, it appears that Strings are an exception to the rule.\r\n\r\nTak Int for example:\r\n\r\n```powershell\r\n[int]$One = 1\r\n$One.PSObject.TypeNames.Insert(0,\"Example.Custom.Type\")\r\n$One.PSObject.TypeNames\r\n```\r\n\r\nResult\r\n\r\n```none\r\nExample.Custom.Type\r\nTest.Type\r\nSystem.Int32\r\nSystem.ValueType\r\nSystem.Object\r\n```\r\n\r\nBut String does not:\r\n\r\n```powershell\r\n$a = 'a'\r\n$a.PSObject.TypeNames.Insert(0,'Example.Custom.Type')\r\n$a.PSOBject.TypeNames\r\n```\r\n\r\nResult:\r\n\r\n```none\r\nSystem.String\r\nSystem.Object\r\n```",
      "created_at": "2018-08-05T19:58:55Z",
      "updated_at": "2018-08-05T19:58:55Z"
    },
    {
      "author": "dragonwolf83",
      "author_association": "NONE",
      "body": "Interesting... That is good to know. I only added a comment because @MSAdministrator refers to setting a PSTypeName on a  `PSCustomObject` and I didn't see it get set anywhere.\r\n\r\nIf Strings are expected to allow a custom PSTypeName, then I think a new issue needs to be created or this issue and description updated to ask for it. \r\n",
      "created_at": "2018-08-05T20:53:00Z",
      "updated_at": "2018-08-05T20:53:00Z"
    },
    {
      "author": "MSAdministrator",
      "author_association": "NONE",
      "body": "I will go ahead and close this issue out and create a separate issue for being able to set a custom type on a `system.string`.  Thanks all for the clarification!",
      "created_at": "2018-08-06T14:42:14Z",
      "updated_at": "2018-08-06T14:42:14Z"
    }
  ],
  "created_at": "2018-08-05T05:01:27Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 7450,
  "state": "closed",
  "title": "PowerShell Core: Unable to return custom pstypename added to object",
  "updated_at": "2018-08-07T04:36:15Z"
}