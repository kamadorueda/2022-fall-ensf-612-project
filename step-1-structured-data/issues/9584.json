{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9584",
  "author": "read-0nly",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n\r\n```This was tested on Powershell 5.1 - I realize .net core 2.2 now includes the bitmap class. I suspect the overarching behavior likely still reproduces but am not in a position to confirm with Powershell 6 at the moment\r\n\r\n```To test with Powershell 5.1, create any powershell script that references System.Drawing.Bitmap\r\n\r\n```Run in ISE and watch it succeed\r\n\r\n```Run in console and it fails because System.Drawing.Bitmap isn't part of .net core per https://github.com/PowerShell/PowerShell/issues/5704\r\n\r\n```\r\n\r\n# Expected behavior\r\n```For the behavior to be consistent between IDE and Console\r\n\r\n```\r\n\r\n# Actual behavior\r\n\r\n```Some classes seem to be available to the ISE that aren't exposed to the vanilla console\r\n\r\n```As far as I can tell, this is because the ISE exposes the full .net library whereas the console loads only .net core as expected. I suspect the inline console in the ISE inherits the libraries loaded by the ISE and the ISE was built for the full .net library, not just core.\r\n\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```WMF 5.1, .net core 2. Not at home, will provide full output later.\r\n\r\n```\r\n",
  "closed_at": "2019-05-13T11:26:22Z",
  "comments": [
    {
      "author": "read-0nly",
      "author_association": "NONE",
      "body": "I can't figure out how I broke the template, closing and will reopen once I've tested with the latest version of WMF. This isn't so much a glaring issue as unexpected behavior, and you have to be doing weird things powershell wasn't really meant for to run into it.\r\n\r\nFor an example of this behavior, https://github.com/read-0nly/PowerDMM",
      "created_at": "2019-05-13T11:26:22Z",
      "updated_at": "2019-05-13T11:26:22Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@read-0nly This repository is for PowerShell Core and your issue is for Windows PowerShell.\r\nMove your issue to your repository, i will have a look",
      "created_at": "2019-05-13T13:43:32Z",
      "updated_at": "2019-05-13T13:43:32Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "In Windows PowerShell, you can `Add-Type -AssemblyName System.Drawing` to load the assembly.\r\nIn PowerShell 6+, you can `Add-Type -AssemblyName System.Drawing.Common` to load the correct assembly.\r\n\r\nFor modules that need to work with both, I commonly use something like this when working with System.Drawing:\r\n\r\n```powershell\r\nusing namespace System.Drawing\r\n\r\nif ($PSVersionTable.PSVersion.Major -le 5) {\r\n    Add-Type -AssemblyName System.Drawing\r\n}\r\nelse {\r\n    Add-Type -AssemblyName System.Drawing.Common\r\n}\r\n```\r\n\r\nThis assembly would be loaded by default in the ISE presumably because it uses a lot of WinForms or WPF assemblies, which I'm sure depend on items in System.Drawing. The regular console has no need to load those normally, so they remain unloaded to reduce load times (I would assume). \ud83d\ude04 ",
      "created_at": "2019-05-13T15:03:20Z",
      "updated_at": "2019-05-13T15:03:20Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I believe that System.Drawing will work via System.Drawing.Common on unix systems as it runs via Mono assemblies.\r\n\r\n_However_, System.Drawing is highly **unstable** on unix. @TylerLeonhardt can attest to that as I had him test PSWordCloud on Mac and Linux while it was still using System.Drawing assemblies. We had very poor results, a whole lot of errors. Some minor use cases work, but it appears when you try to instantiate true graphical surfaces a lot can come crashing down very quickly.\r\n\r\nThat was what pushed me to rewrite PSWordCloud with SkiaSharp instead, really.",
      "created_at": "2019-05-13T19:32:11Z",
      "updated_at": "2019-05-13T19:32:32Z"
    },
    {
      "author": "read-0nly",
      "author_association": "NONE",
      "body": "Oh man I am so many levels of stupid. Yep, this is powershell core and I'm in the wrong place. Yep, if I add-type first it works. I had tried add-type, but was trying to add system.drawing.bitmap. When I found the issue page and compared the .net core versions it seemed to hold up with what I was seeing, and tunnel-visioned on that. So much time wasted trying to figure this out.\r\n\r\nWell, I've seen it said that the best way to get help with debugging is to be wrong loudly and with confidence and let people tell you why you're wrong. I guess it holds water. Thanks for helping this idiot along lol",
      "created_at": "2019-05-14T14:24:41Z",
      "updated_at": "2019-05-14T14:24:41Z"
    }
  ],
  "created_at": "2019-05-13T11:22:30Z",
  "number": 9584,
  "state": "closed",
  "title": "Powershell ISE exposes the full .net to the console session?",
  "updated_at": "2019-05-27T08:58:23Z"
}