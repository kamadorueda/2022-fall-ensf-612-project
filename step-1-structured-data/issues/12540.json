{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12540",
  "author": "TylerLeonhardt",
  "body": "# Summary of the new feature/enhancement\r\n\r\nThe Function Definition AST has a few properties:\r\n\r\n* `ast.Extent.StartColumnNumber`: tells you where the definition starts (aka where `function`, or `filter` keywords begin)\r\n* `ast.Name`: tells you the name of the function or filter (`Get-Foo`)\r\n* `ast.Extent.Text`: tells you the full text: `function foo { ... }`\r\n\r\nThere is no property that says \"this is where the name begins (or ends for that matter)\". This means that document highlighting in PSES (this is the feature that lets you click on a reference and it will highlight the definition in the file) involves computing this... like so:\r\n\r\nhttps://github.com/PowerShell/PowerShellEditorServices/pull/1279\r\n\r\nIt's silly that we have to do this when we have the AST at our finger tips.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nIf the AST has the tokens in it, that would be ideal... but if not, just having something that says \"this is the location of the name\" would be incredibly helpful.",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I don't see any reason _not_ to have the function name itself in that AST member. It's kinda weird that it doesn't tbh. \ud83d\ude01 ",
      "created_at": "2020-04-30T20:56:41Z",
      "updated_at": "2020-04-30T20:56:41Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Wait, it is an AST member:\r\n\r\n```\r\n> { function x {} }.Ast.EndBlock.Statements[0]\r\n\r\nIsFilter   : False\r\nIsWorkflow : False\r\nName       : x\r\nParameters :\r\nBody       : {}\r\nExtent     : function x {}\r\nParent     : function x {}\r\n\r\n```\r\n\r\nThe problem I think is a more general one: every time you need to deal with tokens within an AST that aren't themselves ASTs, you're forced to reinvent basic token processing... So `ast.Name` has no extent, meaning you're forced to scan through the tokens looking for it. It would be nice if ASTs came with something like their first token index in the array or something, to allow fast random access.",
      "created_at": "2020-04-30T20:59:03Z",
      "updated_at": "2020-04-30T20:59:03Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Ideally I'd like ASTs to come with their own token list, but I suspect that wouldn't be nice for allocation/garbage collection",
      "created_at": "2020-04-30T21:00:51Z",
      "updated_at": "2020-04-30T21:00:51Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "A list of tokens is probably overkill for most things, but something like `Name` could store the actual token there instead. If that ship has sailed, we could add a `NameToken` member for it.",
      "created_at": "2020-04-30T21:01:50Z",
      "updated_at": "2020-04-30T21:01:50Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": " @rjmholt `{ function x {} }.Ast.EndBlock.Statements[0]` this doesn't seem to give you the startColumnNumber.",
      "created_at": "2020-04-30T21:03:10Z",
      "updated_at": "2020-04-30T21:03:10Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Try\r\n\r\n```\r\n{ function x {} }.Ast.EndBlock.Statements[0].Extent\r\n```",
      "created_at": "2020-04-30T21:03:34Z",
      "updated_at": "2020-04-30T21:03:34Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "@rjmholt \r\n\r\n```\r\n{ function x {} }.Ast.EndBlock.Statements[0].Extent.StartColumnNumber\r\n3\r\n```\r\n\r\nThat's not the value I'm looking for :( ",
      "created_at": "2020-04-30T21:04:25Z",
      "updated_at": "2020-04-30T21:04:25Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Oh sorry, I was responding to this:\r\n\r\n> I don't see any reason not to have the function name itself in that AST member",
      "created_at": "2020-04-30T23:02:50Z",
      "updated_at": "2020-04-30T23:02:50Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "It seems to me that ASTs would ideally have tokens for their properties rather than strings, but that ship has sailed",
      "created_at": "2020-04-30T23:04:07Z",
      "updated_at": "2020-04-30T23:04:07Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Yeah I've been burned by this a few times as well.  It's especially annoying because of how forgiving the parser is here:\r\n\r\n```\r\nfunction\r\n\r\n\r\ntest\r\n\r\n\r\n{}\r\n```\r\n\r\nI always wished the name was a `StringConstantExpressionAst` of some sort.  Though, the name isn't exactly parsed like most bare word strings so that might be misleading. While not impactful in this exact use case, part of the problem is that the extent text doesn't always match up to the function name. Take this example:\r\n\r\n```powershell\r\n{ function t'est' {} }.Ast.EndBlock.Statements[0]\r\n# IsFilter   : False\r\n# IsWorkflow : False\r\n# Name       : test\r\n# Parameters :\r\n# Body       : {}\r\n# Extent     : function t'est' {}\r\n# Parent     : function t'est' {}\r\n```",
      "created_at": "2020-05-01T02:35:53Z",
      "updated_at": "2020-05-01T02:36:19Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Yeah I've been worrying about the extent text too for precisely this reason.\r\n\r\nAn AST seems more appropriate than a token in this case, although it would be nice to have a way to link ASTs and tokens easily...",
      "created_at": "2020-05-01T03:20:05Z",
      "updated_at": "2020-05-01T03:20:05Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "> Yeah I've been burned by this a few times as well.  It's especially annoying because of how forgiving the parser is here:\n> \n> ```\n> function\n> \n> \n> test\n> \n> \n> {}\n> ```\n\nDang... Does this means I have to fix my PR in PSES to take into account newlines? \ud83d\ude22",
      "created_at": "2020-05-01T04:04:12Z",
      "updated_at": "2020-05-01T04:04:12Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> An AST seems more appropriate than a token in this case, although it would be nice to have a way to link ASTs and tokens easily...\r\n\r\nYeah if I had a nickle every time that would have come in handy...\r\n\r\nIn EditorServicesCommandSuite I started *sort of* linking these together.  Everything gets passed an object that has:\r\n\r\n1. The AST closest to the cursor\r\n1. A `LinkedList<Token>` node of the token closest to the cursor\r\n\r\nThen a bunch of extension methods to make linking them and searching within an extent easier.  It works, but it's super hacky.  I don't know how much extra GC pressure linking them properly would add, but I'm tempted to say it would be worth it.\r\n\r\n> Dang... Does this means I have to fix my PR in PSES to take into account newlines? \ud83d\ude22\r\n\r\n[Well...](https://media.giphy.com/media/gZGlQX3wWAV1u/giphy.gif)",
      "created_at": "2020-05-01T11:19:03Z",
      "updated_at": "2020-05-01T11:19:03Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "Putting this code here for anyone else who stumbles upon this issue but also wants the start column and line of the _actual_ function name:\r\n\r\n```csharp\r\n        private static (int, int) GetStartColumnAndLineNumbersFromAst(FunctionDefinitionAst ast)\r\n        {\r\n            int startColumnNumber = ast.Extent.StartColumnNumber;\r\n            int startLineNumber = ast.Extent.StartLineNumber;\r\n            int astOffset = 0;\r\n\r\n            if (ast.IsFilter)\r\n            {\r\n                astOffset = \"filter\".Length;\r\n            }\r\n            else if (ast.IsWorkflow)\r\n            {\r\n                astOffset = \"workflow\".Length;\r\n            }\r\n            else\r\n            {\r\n                astOffset = \"function\".Length;\r\n            }\r\n\r\n            string astText = ast.Extent.Text;\r\n            // The line offset represents the offset on the line that we're on where as\r\n            // astOffset is the offset on the entire text of the AST.\r\n            int lineOffset = astOffset;\r\n            for (; astOffset < astText.Length; astOffset++, lineOffset++)\r\n            {\r\n                if (astText[astOffset] == '\\n')\r\n                {\r\n                    // reset numbers since we are operating on a different line and increment the line number.\r\n                    startColumnNumber = 0;\r\n                    startLineNumber++;\r\n                    lineOffset = 0;\r\n                }\r\n                else if (astText[astOffset] == '\\r')\r\n                {\r\n                    // Do nothing with carriage returns... we only look for line feeds since those\r\n                    // are used on every platform.\r\n                }\r\n                else if (!char.IsWhiteSpace(astText[astOffset]))\r\n                {\r\n                    // This is the start of the function name so we've found our start column and line number.\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return (startColumnNumber + lineOffset, startLineNumber);\r\n        }",
      "created_at": "2020-05-01T20:01:21Z",
      "updated_at": "2020-05-01T20:01:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If we enhanced AST with the name extent what about backward compatibility? No problems?\r\n",
      "created_at": "2020-05-05T07:27:31Z",
      "updated_at": "2020-05-05T07:27:31Z"
    }
  ],
  "created_at": "2020-04-30T20:54:24Z",
  "labels": [
    "Issue-Enhancement"
  ],
  "number": 12540,
  "state": "open",
  "title": "Function Definition AST doesn't say where the name of the function actually starts",
  "updated_at": "2020-05-05T07:27:31Z"
}