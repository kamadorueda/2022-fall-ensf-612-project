{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12557",
  "author": "mmorak",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\nWhen using a parameter with a ValidateScript attribute, this throws an exception if the parameter is explicitly set to $null, which is unexpected. I didn't find it documented anywhere, so I guess it's a bug. Minimal working example below.\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\nfunction testfunc {\r\n    param(\r\n        [ValidateScript({ $true })]\r\n        [psobject]\r\n        $Arg\r\n    ) \r\n\r\n    'Arg is null: {0}' -f ($null -eq $Arg)\r\n}\r\n```\r\n\r\n# Expected behavior\r\n\r\n```powershell\r\ntestfunc -Arg $null\r\n```\r\nOutput:\r\n```none\r\nArg is null: True\r\n```\r\n\r\n# Actual behavior\r\n\r\n```powershell\r\ntestfunc -Arg $null\r\n```\r\nOutput:\r\n```none\r\nCannot validate argument on parameter 'Arg'. The argument is null, empty, or \r\nan element of the argument collection contains a null value. Supply a collection \r\nthat does not contain any null values and then try the command again.\r\n\r\n+ CategoryInfo          : InvalidData: (:) [testfunc], ParameterBindingValidationException\r\n```\r\n------\r\n\r\nBut without parameters:\r\n```powershell\r\ntestfunc\r\n```\r\nOutput:\r\n```none\r\nArg is null: True\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.17763.1007\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.17763.1007\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "This is _probably_ due to inherited behaviour for the ValidateScript attribute, but either we should document this or fix it. Not sure which is more appropriate here.",
      "created_at": "2020-05-02T22:41:28Z",
      "updated_at": "2020-05-02T22:41:28Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Since ValidateScript is inherited from ValidateEnumeratedArgumentsAttribute it is by-design. ",
      "created_at": "2020-05-03T06:41:58Z",
      "updated_at": "2020-05-03T06:41:58Z"
    },
    {
      "author": "mmorak",
      "author_association": "NONE",
      "body": "Ok, thanks for letting me know. I think this by-design behaviour should still be documented somewhere, since it is somewhat unexpected. It implies that, as soon as you use a Validate* attribute (Script, Range, Set, Pattern, etc.), this implies ValidateNotNull, and AllowNull becomes impossible, and the use of these two attributes therefore has no effect.",
      "created_at": "2020-05-03T08:38:04Z",
      "updated_at": "2020-05-03T08:38:04Z"
    },
    {
      "author": "mmorak",
      "author_association": "NONE",
      "body": "And, thinking of my usecase now, it means that when null values are allowed, parameter validation has to be done using an if-statement (or similar), and throwing an exception, inside the main function code. Is that correct?",
      "created_at": "2020-05-03T08:41:32Z",
      "updated_at": "2020-05-03T08:41:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The cmdlet can have a history for the design. Perhaps somebody could add an information about this.\r\n\r\n> Is that correct?\r\n\r\nYou can implement custom attribute for your needs.",
      "created_at": "2020-05-03T10:43:42Z",
      "updated_at": "2020-05-03T10:43:42Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "/cc @SteveL-MSFT @sdwheeler can/should this be moved to the docs repo?",
      "created_at": "2020-05-03T15:49:08Z",
      "updated_at": "2020-05-03T15:49:08Z"
    }
  ],
  "created_at": "2020-05-02T22:17:21Z",
  "number": 12557,
  "state": "open",
  "title": "ValidateScript attribute throws exception when argument is explicitly set to $null",
  "updated_at": "2021-01-16T11:02:47Z"
}