{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13094",
  "author": "jborean93",
  "body": "## Steps to reproduce\r\n\r\n```powershell\r\nStart-Process powershell.exe\r\n\r\n# or\r\n\r\nStart-Process pwsh.exe\r\n```\r\n\r\nIn the new window run the following\r\n\r\n```powershell\r\nAdd-Type -Namespace Kernel32 -Name NativeMethods -MemberDefinition @'\r\n[DllImport(\"Kernel32.dll\", CharSet = CharSet.Unicode)]\r\npublic static extern IntPtr GetCommandLineW();\r\n'@\r\n\r\n$linePtr = [Kernel32.NativeMethods]::GetCommandLinew()\r\n$cmdLine = [System.Runtime.InteropServices.Marshal]::PtrToStringUni($linePtr)\r\n\r\n\"'{0}'\" -f $cmdLine\r\n```\r\n\r\n## Expected behavior\r\n\r\n```text\r\n'\"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\"'\r\n\r\n# or\r\n\r\n'\"C:\\Program Files\\PowerShell\\7\\pwsh.exe\"'\r\n```\r\n\r\n_Note: the path is dependent on where powershell is installed, this also affects v7_\r\n\r\n## Actual behavior\r\n\r\n```none\r\n'\"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" '\r\n\r\n# or\r\n\r\n'\"C:\\Program Files\\PowerShell\\7\\pwsh.exe\" '\r\n```\r\n\r\nThe actual command line contains a trailing space. If you were to start the process with arguments the trailing space comes after the arguments. This is not a problem when using `System.Diagnostics.Process` directly or the call operator.\r\n\r\n## Environment data\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.17763.1007\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.17763.1007\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n\r\n# or\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.1\r\nPSEdition                      Core\r\nGitCommitId                    7.0.1\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-07-06T06:18:12Z",
  "comments": [
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "After further testing, pwsh only has an issue when no arguments are supplied. WinPS has an issue even with the arguments but that's not really covered by this repo here. This is probably due to https://github.com/PowerShell/PowerShell/blob/58c371ca31d9e1b72da5d94821f2d670da5b4dfa/src/Microsoft.PowerShell.Commands.Management/commands/management/Process.cs#L2003 which has a format string of `\"{0} {1}\"`.",
      "created_at": "2020-07-04T01:53:58Z",
      "updated_at": "2020-07-04T01:55:18Z"
    },
    {
      "author": "kvprasoon",
      "author_association": "CONTRIBUTOR",
      "body": "something to do with formatting, this happens only when wrapped in quotes \"'$cmdLine'\" just `$cmdLine` works as expected.",
      "created_at": "2020-07-04T07:24:15Z",
      "updated_at": "2020-07-04T07:30:02Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "That\u2019s because you can\u2019t see the space without the single quotes around it. I only did that format string to easily demonstrate what is happening.",
      "created_at": "2020-07-04T07:29:31Z",
      "updated_at": "2020-07-04T07:29:31Z"
    },
    {
      "author": "kvprasoon",
      "author_association": "CONTRIBUTOR",
      "body": "yep correct.\r\n\r\nand it wont be from https://github.com/PowerShell/PowerShell/blob/58c371ca31d9e1b72da5d94821f2d670da5b4dfa/src/Microsoft.PowerShell.Commands.Management/commands/management/Process.cs#L2003\r\n\r\n`targetMessage` is displayed only when `-WhatIf` is used. This is from somewhere else.",
      "created_at": "2020-07-04T21:29:37Z",
      "updated_at": "2020-07-04T21:30:00Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Ah fair enough.\r\n\r\nYou may want to close https://github.com/PowerShell/PowerShell/issues/13097 as that\u2019s a duplicate of this.",
      "created_at": "2020-07-04T21:50:07Z",
      "updated_at": "2020-07-04T21:50:07Z"
    },
    {
      "author": "kvprasoon",
      "author_association": "CONTRIBUTOR",
      "body": "I believe the issue is in `System.Diagnostics.Process` as I see the same behavior that way and happens only if  new windows is spawned.",
      "created_at": "2020-07-05T21:22:35Z",
      "updated_at": "2020-07-05T21:22:35Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "I don't think so, when looking at the code PowerShell is actually calling [CreateProcess](https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessw) [here](https://github.com/PowerShell/PowerShell/blob/58c371ca31d9e1b72da5d94821f2d670da5b4dfa/src/Microsoft.PowerShell.Commands.Management/commands/management/Process.cs#L2540) or [CreateProcessWithLogon](https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createprocesswithlogonw) (if credentials were specified) [here](https://github.com/PowerShell/PowerShell/blob/58c371ca31d9e1b72da5d94821f2d670da5b4dfa/src/Microsoft.PowerShell.Commands.Management/commands/management/Process.cs#L2484) instead of using `System.Diagnostics.Process` to spawn the new process.\r\n\r\nMy guess as to what is happening is that [the check for ArgumentList](https://github.com/PowerShell/PowerShell/blob/58c371ca31d9e1b72da5d94821f2d670da5b4dfa/src/Microsoft.PowerShell.Commands.Management/commands/management/Process.cs#L1877-L1880) is true because while the ArgumentList is empty it is not null and the join operation is pretty much the same as `' ' -eq [string]::Join([String[]]@(), ' ')`. When the actual command line is being built it has a check on the argumentlist [here](https://github.com/PowerShell/PowerShell/blob/58c371ca31d9e1b72da5d94821f2d670da5b4dfa/src/Microsoft.PowerShell.Commands.Management/commands/management/Process.cs#L2313-L2317). At this particular point in time `arguments` is equals to `' '` which is neither null or an empty string so it is appended to the command line to run. What I don't understand is why there's only 1 space, there should be 2 based on the assumption above. I don't have access to my dev environment so I can't step into the code to 100% check this but I don't think the issue lies in .NET but rather in PowerShell.\r\n\r\n",
      "created_at": "2020-07-05T23:49:15Z",
      "updated_at": "2020-07-05T23:50:18Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Sorry for the false alarm, just stepped through the code and I was wrong. By default `Start-Process` will use `System.Diagnostics.Process` unless other parameters are set which in this case it is not.\r\n\r\nWhen running the code\r\n\r\n```powershell\r\n$psi = [System.Diagnostics.ProcessStartInfo]@{\r\n    FileName = 'pwsh'\r\n    UseShellExecute = $true\r\n}\r\n[System.Diagnostics.Process]::Start($psi)\r\n```\r\n\r\nI see the same behaviour that `Start-Process` shows which indicates the problem is there and not in PowerShell. Even when forcing the code path to use the powershell call to `CreateProcess` by added `-LoadUserProfile` the command line args are fine.",
      "created_at": "2020-07-06T06:18:12Z",
      "updated_at": "2020-07-06T06:18:12Z"
    },
    {
      "author": "kvprasoon",
      "author_association": "CONTRIBUTOR",
      "body": "> My guess as to what is happening is that [the check for ArgumentList](https://github.com/PowerShell/PowerShell/blob/58c371ca31d9e1b72da5d94821f2d670da5b4dfa/src/Microsoft.PowerShell.Commands.Management/commands/management/Process.cs#L1877-L1880) is true because while the ArgumentList is empty it is not null and the join operation is pretty much the same as `' ' -eq [string]::Join([String[]]@(), ' ')`.\r\n\r\n:-) Actually I was around this for hours with no luck and finally confirmed its in `System.Diagnostics.Process` by testing in that way...",
      "created_at": "2020-07-06T06:50:22Z",
      "updated_at": "2020-07-06T06:50:46Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Yea I should have listened to the experts :) thanks for your help.",
      "created_at": "2020-07-06T07:45:27Z",
      "updated_at": "2020-07-06T07:45:27Z"
    }
  ],
  "created_at": "2020-07-04T01:10:18Z",
  "labels": [
    "Issue-Bug",
    "Up-for-Grabs"
  ],
  "number": 13094,
  "state": "closed",
  "title": "Start-Process adds extra space to command line",
  "updated_at": "2020-07-06T07:45:27Z"
}