{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6293",
  "author": "ephos",
  "body": "Steps to reproduce\r\n------------------\r\n\r\nCurrently when classes are defined within a module it seems the best way to access them us with the following.\r\n\r\n```powershell\r\nusing module ModuleName\r\n[Foo]::new()\r\nGet-Module ModuleName\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nLike other module members (functions, cmdlets, variables, aliases, etc) it would be helpful to be able to declare classes and export them as module members.  Module manifests could have a section for this.\r\n\r\n```powershell\r\nClassesToExport = @()\r\n```\r\n\r\nUsing them would feel more in line with how the rest of the language works.  With the current implementation I find myself creating C# classes and importing the _.cs_ file with `Add-Type`.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.1\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.1\r\nOS                             Microsoft Windows 10.0.15063\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.15063.909\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.15063.909\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Dup #4112",
      "created_at": "2018-03-02T16:28:51Z",
      "updated_at": "2018-03-02T16:28:51Z"
    },
    {
      "author": "rockarruda",
      "author_association": "NONE",
      "body": "@iSazonov This reads more of a feature request to me rather than a bug report.",
      "created_at": "2018-03-02T16:55:13Z",
      "updated_at": "2018-03-02T16:55:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It related with how we plan to design class visibility (public/private).",
      "created_at": "2018-03-02T17:34:03Z",
      "updated_at": "2018-03-02T17:34:03Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "In PowerShell today, **all** public types are global. For example, when you import a binary module all of the public types defined in that assembly are globally visible in their declared namespaces. PowerShell classes work the same way. All types (classes) defined in a module are global, namespace qualified by the module name. (Side note: using `Add-Type` without namespace qualification is bad idea when creating reusable code as the types will be created in the top level namespace so your [foo] and my [foo] will collide.)\r\n\r\nThere is a plan to support type name aliases with the `using` statement to simplify some scenarios. That said, making PowerShell types work differently from the rest of .NET seems undesirable. (I supposed Export-Type could just export type name aliases into the context where the module is being imported.)\r\n\r\nWRT the private type comment, remember how the debugger works - it's just PowerShell. If a type is not accessible from PowerShell, it's not accessible from the debugger either (which is why we have hidden rather than private members).\r\n",
      "created_at": "2018-03-13T18:34:19Z",
      "updated_at": "2018-03-13T18:34:19Z"
    },
    {
      "author": "adrian-andersson",
      "author_association": "NONE",
      "body": "Bumping this issue\r\nCan we also have the same for ENUMS, and REQUIREDRUNTIMES\r\n\r\n",
      "created_at": "2019-05-10T04:36:20Z",
      "updated_at": "2019-05-10T04:36:20Z"
    }
  ],
  "created_at": "2018-03-02T15:35:12Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Language"
  ],
  "number": 6293,
  "state": "open",
  "title": "Make PowerShell Classes Exportable Module Members",
  "updated_at": "2019-05-10T04:36:20Z"
}