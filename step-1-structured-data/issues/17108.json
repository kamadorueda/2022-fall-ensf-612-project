{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17108",
  "author": "aelsantex",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nThis is good:\r\nPS> $test=@{ 'A' = @( @(\"Text 1\", \"Text 2\"), @(\"Check 1\", \"Check 2\") ) }\r\nPS> foreach ($key in $test.Keys) { foreach ($item in ($test[$key])) { \"Test $($key) with item: $($item[0]) $($item[1])\" } }\r\nTest A with item: Text 1 Text 2\r\nTest A with item: Check 1 Check 2\r\n\r\nBut with only one element into the first level array:\r\nPS> $test=@{ 'A' = @( @(\"Text 1\", \"Text 2\") ) }\r\nPS> foreach ($key in $test.Keys) { foreach ($item in ($test[$key])) { \"Test $($key) with item: $($item[0]) $($item[1])\" } }\r\nTest A with item: T e\r\nTest A with item: T e\r\n\n\n### Expected behavior\n\n```console\nPS> $test=@{ 'A' = @( @(\"Text 1\", \"Text 2\") ) }\r\nPS> foreach ($key in $test.Keys) { foreach ($item in ($test[$key])) { \"Test $($key) with item: $($item[0]) $($item[1])\" } }\r\nTest A with item: Text 1 Text 2\n```\n\n\n### Actual behavior\n\n```console\nPS> $test=@{ 'A' = @( @(\"Text 1\", \"Text 2\") ) }\r\nPS> foreach ($key in $test.Keys) { foreach ($item in ($test[$key])) { \"Test $($key) with item: $($item[0]) $($item[1])\" } }\r\nTest A with item: T e\r\nTest A with item: T e\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.1\r\nPSEdition                      Core\r\nGitCommitId                    7.2.1\r\nOS                             Microsoft Windows 10.0.22000\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2022-04-07T00:00:40Z",
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "The `@()` syntax only ensures that it's contents are in an array. If it's contents are already in an array, it will do nothing.\r\n\r\nIn this scenario you want a unary comma:\r\n\r\n```powershell\r\n$test=@{ 'A' = ,@(\"Text 1\", \"Text 2\") }\r\nforeach ($key in $test.Keys) {\r\n    foreach ($item in ($test[$key])) {\r\n        \"Test $($key) with item: $($item[0]) $($item[1])\"\r\n    }\r\n}\r\n```",
      "created_at": "2022-04-05T12:22:11Z",
      "updated_at": "2022-04-05T12:22:11Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-04-07T00:00:39Z",
      "updated_at": "2022-04-07T00:00:39Z"
    }
  ],
  "created_at": "2022-04-05T08:59:01Z",
  "number": 17108,
  "state": "closed",
  "title": "Issue with multidimensional array",
  "updated_at": "2022-04-07T00:00:40Z"
}