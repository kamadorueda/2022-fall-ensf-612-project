{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9462",
  "author": "krystian-wojtas",
  "body": "# How many threads powershell needs to print 'hello world' message?\r\n\r\n## Strace\r\n\r\nAmount of system calls in powershell 'hello world' program is huge. It is run on linux under strace\r\n```\r\n% strace -yyf pwsh -Command \"echo hello world\" >powershell-hello-strace.log 2>&1 \r\n```\r\n[powershell-hello-strace.log](https://github.com/PowerShell/PowerShell/files/3115766/powershell-hello-strace.log)\r\n\r\nResult log file size is huge, nearly 6 Megabytes !\r\n```\r\n% stat -c %s powershell-hello-strace.log\r\n6043570\r\n```\r\n\r\nIt makes huge ammount of system calls\r\n```\r\n% wc -l < powershell-hello-strace.log\r\n119964\r\n```\r\n\r\nIf it is run second time, then number of system calls it makes is different\r\n```\r\n% strace -yyf pwsh -Command \"echo hello world\" >powershell-hello-strace-2.log 2>&1\r\n% wc -l powershell-hello-strace*\r\n  106146 powershell-hello-strace-2.log\r\n  119964 powershell-hello-strace.log\r\n  226110 total\r\n```\r\n\r\n## Another languages\r\nHere is how many call is it needed to print 'hello world' message in some another languagues\r\n* perl\r\n```\r\n% strace -yyf perl -E 'say \"Hello world\"' |& wc -l\r\n202\r\n% strace -yyf perl -E 'say \"Hello world\"' |& wc -l\r\n202\r\n% strace -yyf perl -E 'say \"Hello world\"' |& wc -l\r\n202\r\n% strace -yyf perl -E 'say \"Hello world\"' |& wc -l\r\n202\r\n```\r\n* python\r\n```\r\n% strace -yyf python -e 'print(\"Hello, World!\")' |& wc -l\r\n85\r\n% strace -yyf python -e 'print(\"Hello, World!\")' |& wc -l\r\n85\r\n% strace -yyf python -e 'print(\"Hello, World!\")' |& wc -l\r\n85\r\n% strace -yyf python -e 'print(\"Hello, World!\")' |& wc -l\r\n85\r\n% strace -yyf python -e 'print(\"Hello, World!\")' |& wc -l\r\n85\r\n```\r\n* shell\r\n```\r\n% strace -yyf sh -c 'echo hello world' |& wc -l\r\n45\r\n% strace -yyf sh -c 'echo hello world' |& wc -l\r\n45\r\n% strace -yyf sh -c 'echo hello world' |& wc -l\r\n45\r\n% strace -yyf sh -c 'echo hello world' |& wc -l\r\n45\r\n```\r\n\r\nIn all these cases amount of system calls is reasonably small and constant. These behaviours are always the same and they are reproducible. Then they are easy to debug using strace.\r\n\r\nUnfortunately powershell is different than that.\r\n\r\n## Threads\r\n\r\nPowershell does not execute any subprocess. There is only one execve system call made by parent shell.\r\n```\r\n% grep execve powershell-hello-strace.log\r\nexecve(\"/usr/bin/pwsh\", [\"pwsh\", \"-Command\", \"echo hello world\"], 0x7fff8bcd9ca8 /* 29 vars */) = 0\r\n```\r\n\r\nBut it creates lots of threads and pids.\r\n```\r\n% grep '^\\[pid' powershell-hello-strace.log | tr -s ' ' | cut -d' ' -f 2 | sort -u | wc -l\r\n16\r\n```\r\n\r\nAll this unnecessary threads are yielding cpu as they have nothing to do\r\n```\r\n% grep sched_yield powershell-hello-strace.log| wc -l\r\n99529\r\n```\r\n\r\nHow many lines of system call there are in total\r\n```\r\n% wc -l < powershell-hello-strace.log\r\n119964\r\n```\r\n\r\nSome calculation\r\n```\r\n% echo $(( 100 * 99529 / 119964 ))\r\n82\r\n```\r\n82 % of system calls are yielding cpu!\r\n\r\n## Documentation\r\nAs explained in manual page\r\nhttp://man7.org/linux/man-pages/man2/sched_yield.2.html\r\n\r\n\r\n> If the calling thread is the only thread in the highest priority list\r\nat that time, it will continue to run after a call to sched_yield().\r\n\r\nThen sched_yield does not have any effect.\r\n\r\n## Logic\r\n\r\nMy understanding is that logic inside Powershell Virtual Machine extra threads is like this\r\n```\r\nwhile ( true ) {\r\n  job = get_first (work_que)\r\n \r\n  # Process job it there is any taken from work que\r\n  if( defined( job ) ) {\r\n    process( job )\r\n  }\r\n  else {\r\n    sched_yield()\r\n  }\r\n}\r\n```\r\n\r\nAs in simple hello world example no other job is going to be pending, then effective  code  is like this on all extra threads (thanks to branch prediction x86 processor feature)\r\n```\r\nwhile( true ) {\r\n  sched_yield()\r\n}\r\n```\r\n\r\nPowershell virtual machine continues to loop sched_yield system call in all unnecessary threads until main thread finish to print 'hello world' message.\r\n\r\n# System\r\nI run it on ubuntu in VirtualBox virtual machine. Native system is Windows 10.\r\n```\r\n% lsb_release -a\r\nNo LSB modules are available.\r\nDistributor ID: Ubuntu\r\nDescription:    Ubuntu 18.04.2 LTS\r\nRelease:        18.04\r\nCodename:       bionic\r\n```\r\n```\r\n% uname -a\r\nLinux hp-zbook 4.15.0-47-generic #50-Ubuntu SMP Wed Mar 13 10:44:52 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux\r\n```\r\n```\r\n% pwsh --version\r\nPowerShell 6.2.0\r\n```\r\n```\r\n% lscpu | grep 'Model name'\r\nModel name:          Intel(R) Core(TM) i7-8850H CPU @ 2.60GHz\r\n```\r\n```\r\n% nproc\r\n1\r\n```\r\n\r\n# Questions\r\n\r\nIs my understanding of logic in powershell virtual machine regarding threads correct?\r\n\r\nWhy it is like that? Is there something smart in powershell virtual machine that it utilizes all of these extra threads in automatic way and runs as much script code as possible in parallel? If yes, where can I read about it? Is there some documentation about it? Does it have some race conditions? How to synchronize?\r\n\r\nIs it possible to run powershell code only on one signle thread? It is important for my debugging purposes. Should I configure my system somehow? Or maybe does powershell support some command line option? Environment variable? Special function in script code to change it behaviour? Compilation flag? Configuration file? Or there is nothing to do about it and it is just how it is designed? If yes, is it considered broken?\r\n",
  "closed_at": "2019-05-06T14:16:50Z",
  "comments": [
    {
      "author": "krystian-wojtas",
      "author_association": "NONE",
      "body": "How does powershell behave on Windows? Is there any tool like strace for Windows?",
      "created_at": "2019-04-25T08:05:31Z",
      "updated_at": "2019-04-25T08:05:31Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@krystian-wojtas PowerShell Core is a C# project that use DotNet Core VM.",
      "created_at": "2019-04-25T18:44:16Z",
      "updated_at": "2019-04-25T18:44:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "PowerShell is based on managed code that requires more resources to initialize than native code.\r\nPowerShell works with _objects_ that requires more resources.\r\nYou could use `-NoInteractive` and -`NoProfile` switches in your tests.\r\n\r\n> How does powershell behave on Windows?\r\n\r\nIt is the same code on 99%.\r\n\r\n> Is there any tool like strace for Windows?\r\n\r\nWe use portable PerfView.\r\n\r\nOf course, we are all interested in having the best performance. We are constantly improving something. \r\nThe best way is to improve specific scenarios and not \"all at once\". ",
      "created_at": "2019-04-26T07:01:15Z",
      "updated_at": "2019-04-26T07:01:15Z"
    },
    {
      "author": "krystian-wojtas",
      "author_association": "NONE",
      "body": "@iSazonov  thank you for your answer.\r\n\r\nWith both these flags there is NOT any improvement.\r\n```\r\n% strace -yyf pwsh -NonInteractive -NoProfile -Command \"echo hello world\" 2>&1 | wc -l\r\n118766\r\n% strace -yyf pwsh -NonInteractive -NoProfile -Command \"echo hello world\" 2>&1 | wc -l\r\n118670\r\n% strace -yyf pwsh -NonInteractive -NoProfile -Command \"echo hello world\" 2>&1 | wc -l\r\n118524\r\n```\r\n\r\nStill number of system calls varies, still it is huge amount of them. And there are still 16 extra threads\r\n```\r\n% strace -yyf pwsh -NonInteractive -NoProfile -Command \"echo hello world\" 2>&1 | grep '^\\[pid' powershell-hello-strace.log | tr -s ' ' | cut -d' ' -f 2 | sort -u | wc -l\r\n16\r\n```\r\n\r\nI see there is not any possible option to configure how many threads powershell creates and even for \"hello world\" example program it needs around 16. Then strace output is not reproducible. Amount of system calls it makes is huge which makes it much harder to debug on this level.",
      "created_at": "2019-04-26T07:43:22Z",
      "updated_at": "2019-04-26T07:43:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> makes it much harder to debug on this level\r\n\r\nAs I mentioned above - The best way is to improve _specific_ scenarios and not \"all at once\".\r\nIt is possible that there are problems, but they can only be identified in the measurements of specific scenarios.\r\n\r\nPowerShell is thread-based application vs bash is process-based.\r\nPowerShell does all script processing in threads - \"runspaces\" and has some temporary treads (ex. for cmdlet name cache).",
      "created_at": "2019-04-26T07:58:27Z",
      "updated_at": "2019-04-26T07:58:27Z"
    },
    {
      "author": "krystian-wojtas",
      "author_association": "NONE",
      "body": "## Java\r\n\r\n@iSazonov thank you for your reply.\r\n\r\n> PowerShell is thread-based application vs bash is process-based.\r\n\r\nI made one more check how java looks like in this comparison. Java is also thread based, so it is much more similar virtual machine. There are dedicated threads about garbage collector, just in time compilation and some others.\r\n\r\nIt is run on the same system as before. Java which I'm using is\r\n```\r\n% java --version\r\nopenjdk 11.0.2 2019-01-15\r\nOpenJDK Runtime Environment (build 11.0.2+9-Ubuntu-3ubuntu118.04.3)\r\nOpenJDK 64-Bit Server VM (build 11.0.2+9-Ubuntu-3ubuntu118.04.3, mixed mode, sharing)\r\n```\r\n\r\nSource code for hello world is this one\r\nhttps://introcs.cs.princeton.edu/java/11hello/HelloWorld.java.html\r\n\r\nAmount of system calls is also big and it varies. But still it is 35-50 times less then powershell.\r\n```\r\n% strace -yyf java HelloWorld |& wc -l\r\n2904\r\n% strace -yyf java HelloWorld |& wc -l\r\n2931\r\n% strace -yyf java HelloWorld |& wc -l\r\n2934\r\n```\r\n\r\nLog from strace session\r\n```\r\n% strace -yyf java HelloWorld |& cat > java-hello-strace.log\r\n```\r\n[java-hello-strace.log](https://github.com/PowerShell/PowerShell/files/3147271/java-hello-strace.log)\r\n\r\nThere is also lots of threads\r\n```\r\n% cat java-hello-strace.log | grep '^\\[pid' | tr -s ' ' | cut -d' ' -f 2 | sort -u | wc -l\r\n12\r\n```\r\n\r\nThere is also some sched_yield system call invocations\r\n```\r\n% cat java-hello-strace.log | grep sched_yield | wc -l\r\n281\r\n```\r\n\r\nBut there is less of them and it is only 9% of all of them.\r\n```\r\n% echo $(( 100 * 281 / 2878 ))\r\n9\r\n```\r\n",
      "created_at": "2019-05-06T09:17:41Z",
      "updated_at": "2019-05-06T09:57:16Z"
    },
    {
      "author": "krystian-wojtas",
      "author_association": "NONE",
      "body": "# Native linux\r\nIt is run also under another computer with native linux.\r\n```\r\n% lsb_release -a\r\nNo LSB modules are available.\r\nDistributor ID: Ubuntu\r\nDescription:    Ubuntu 18.04.2 LTS\r\nRelease:        18.04\r\nCodename:       bionic\r\n```\r\n\r\n```\r\n% uname -a\r\nLinux k-HP-Z620 4.15.0-48-generic #51-Ubuntu SMP Wed Apr 3 08:28:49 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux\r\n```\r\n\r\n```\r\n% pwsh --version\r\nPowerShell 6.2.0\r\n```\r\n\r\n```\r\n% java --version\r\nopenjdk 11.0.2 2019-01-15\r\nOpenJDK Runtime Environment (build 11.0.2+9-Ubuntu-3ubuntu118.04.3)\r\nOpenJDK 64-Bit Server VM (build 11.0.2+9-Ubuntu-3ubuntu118.04.3, mixed mode, sharing)\r\n```\r\n\r\n```\r\n% lscpu | grep -i 'model name'\r\nModel name:          Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz\r\n```\r\n\r\n```\r\n% nproc\r\n12\r\n```\r\n\r\n## Strace\r\n\r\n### Java\r\n\r\nCollect strace log\r\n```\r\n% strace -yyf java HelloWorld |& > java-hello-strace-native.log\r\n```\r\n[java-hello-strace-native.log](https://github.com/PowerShell/PowerShell/files/3147486/java-hello-strace-native.log)\r\n\r\nHow many threads?\r\n```\r\n% cat java-hello-strace-native.log | grep '^\\[pid' | tr -s ' ' | cut -d' ' -f 2 | sort -u | wc -l\r\n17\r\n```\r\n\r\nHow many sched_yield invocations?\r\n```\r\n% cat java-hello-strace-native.log | grep sched_yield | wc -l\r\n6\r\n```\r\n\r\nHow many system calls in total?\r\n```\r\n% cat java-hello-strace-native.log | wc -l\r\n3904\r\n```\r\n\r\n### Powershell\r\n\r\nCollect strace log\r\n```\r\n% strace -yyf pwsh -Command \"echo 'hello world'\" |& > pwsh-hello-strace-native.log\r\n```\r\n[pwsh-hello-strace-native.log](https://github.com/PowerShell/PowerShell/files/3147501/pwsh-hello-strace-native.log)\r\n\r\nHow many threads?\r\n```\r\n% cat pwsh-hello-strace-native.log | grep '^\\[pid' | tr -s ' ' | cut -d' ' -f 2 | sort -u | wc -l\r\n26\r\n```\r\n\r\nHow many sched_yield invocations?\r\n```\r\n% cat pwsh-hello-strace-native.log | grep sched_yield | wc -l\r\n5301\r\n```\r\n\r\nHow many system calls in total?\r\n```\r\n% cat pwsh-hello-strace-native.log | wc -l\r\n33924\r\n```\r\n\r\n## Performance\r\n\r\n### Java\r\n\r\nJava first run\r\n```\r\n% sudo perf stat java HelloWorld\r\nHello, World\r\n\r\n Performance counter stats for 'java HelloWorld':\r\n\r\n        218,575135      task-clock (msec)         #    0,163 CPUs utilized\r\n             1\u202f860      context-switches          #    0,009 M/sec\r\n                25      cpu-migrations            #    0,114 K/sec\r\n             3\u202f414      page-faults               #    0,016 M/sec\r\n       311\u202f361\u202f354      cycles                    #    1,425 GHz\r\n       220\u202f172\u202f909      stalled-cycles-frontend   #   70,71% frontend cycles idle\r\n       191\u202f641\u202f901      instructions              #    0,62  insn per cycle\r\n                                                  #    1,15  stalled cycles per insn\r\n        35\u202f991\u202f275      branches                  #  164,663 M/sec\r\n         2\u202f547\u202f576      branch-misses             #    7,08% of all branches\r\n\r\n       1,341223409 seconds time elapsed\r\n```\r\n\r\nFew next runs when files are in system cache\r\n```\r\n% sudo perf stat java HelloWorld\r\nHello, World\r\n\r\n Performance counter stats for 'java HelloWorld':\r\n\r\n        109,256992      task-clock (msec)         #    1,527 CPUs utilized\r\n               317      context-switches          #    0,003 M/sec\r\n                 7      cpu-migrations            #    0,064 K/sec\r\n             3\u202f283      page-faults               #    0,030 M/sec\r\n       266\u202f656\u202f743      cycles                    #    2,441 GHz\r\n       190\u202f988\u202f605      stalled-cycles-frontend   #   71,62% frontend cycles idle\r\n       166\u202f592\u202f657      instructions              #    0,62  insn per cycle\r\n                                                  #    1,15  stalled cycles per insn\r\n        31\u202f431\u202f579      branches                  #  287,685 M/sec\r\n         1\u202f725\u202f313      branch-misses             #    5,49% of all branches\r\n\r\n       0,071549034 seconds time elapsed\r\n```\r\n\r\n```\r\n% sudo perf stat java HelloWorld\r\nHello, World\r\n\r\n Performance counter stats for 'java HelloWorld':\r\n\r\n         82,728425      task-clock (msec)         #    1,494 CPUs utilized\r\n               281      context-switches          #    0,003 M/sec\r\n                 6      cpu-migrations            #    0,073 K/sec\r\n             3\u202f274      page-faults               #    0,040 M/sec\r\n       209\u202f482\u202f850      cycles                    #    2,532 GHz\r\n       131\u202f410\u202f418      stalled-cycles-frontend   #   62,73% frontend cycles idle\r\n       163\u202f661\u202f668      instructions              #    0,78  insn per cycle\r\n                                                  #    0,80  stalled cycles per insn\r\n        31\u202f014\u202f649      branches                  #  374,897 M/sec\r\n         1\u202f608\u202f323      branch-misses             #    5,19% of all branches\r\n\r\n       0,055380206 seconds time elapsed\r\n```\r\n\r\n### Powershell\r\n\r\nPowershell first run\r\n```\r\n% sudo perf stat pwsh -Command \"echo 'hello world'\"\r\nhello world\r\n\r\n Performance counter stats for 'pwsh -Command echo 'hello world'':\r\n\r\n       1293,223998      task-clock (msec)         #    0,247 CPUs utilized\r\n             1\u202f591      context-switches          #    0,001 M/sec\r\n                23      cpu-migrations            #    0,018 K/sec\r\n            20\u202f793      page-faults               #    0,016 M/sec\r\n     2\u202f440\u202f703\u202f392      cycles                    #    1,887 GHz\r\n     1\u202f451\u202f945\u202f321      stalled-cycles-frontend   #   59,49% frontend cycles idle\r\n     2\u202f340\u202f749\u202f195      instructions              #    0,96  insn per cycle\r\n                                                  #    0,62  stalled cycles per insn\r\n       474\u202f724\u202f523      branches                  #  367,086 M/sec\r\n        17\u202f476\u202f292      branch-misses             #    3,68% of all branches\r\n\r\n       5,242548280 seconds time elapsed\r\n```\r\n\r\nFew next runs when files are in system cache\r\n```\r\n% sudo perf stat pwsh -Command \"echo 'hello world'\"\r\nhello world\r\n\r\n Performance counter stats for 'pwsh -Command echo 'hello world'':\r\n\r\n        742,991858      task-clock (msec)         #    1,183 CPUs utilized\r\n             1\u202f273      context-switches          #    0,002 M/sec\r\n                42      cpu-migrations            #    0,057 K/sec\r\n            14\u202f976      page-faults               #    0,020 M/sec\r\n     1\u202f866\u202f315\u202f732      cycles                    #    2,512 GHz\r\n     1\u202f096\u202f937\u202f268      stalled-cycles-frontend   #   58,78% frontend cycles idle\r\n     1\u202f851\u202f600\u202f765      instructions              #    0,99  insn per cycle\r\n                                                  #    0,59  stalled cycles per insn\r\n       378\u202f474\u202f349      branches                  #  509,392 M/sec\r\n        11\u202f117\u202f425      branch-misses             #    2,94% of all branches\r\n\r\n       0,628091604 seconds time elapsed\r\n```\r\n\r\n```\r\n% sudo perf stat pwsh -Command \"echo 'hello world'\"\r\nhello world\r\n\r\n Performance counter stats for 'pwsh -Command echo 'hello world'':\r\n\r\n        692,912917      task-clock (msec)         #    1,133 CPUs utilized\r\n             1\u202f228      context-switches          #    0,002 M/sec\r\n                21      cpu-migrations            #    0,030 K/sec\r\n            14\u202f229      page-faults               #    0,021 M/sec\r\n     1\u202f751\u202f912\u202f695      cycles                    #    2,528 GHz\r\n     1\u202f012\u202f754\u202f466      stalled-cycles-frontend   #   57,81% frontend cycles idle\r\n     1\u202f784\u202f514\u202f675      instructions              #    1,02  insn per cycle\r\n                                                  #    0,57  stalled cycles per insn\r\n       365\u202f886\u202f615      branches                  #  528,041 M/sec\r\n        10\u202f458\u202f089      branch-misses             #    2,86% of all branches\r\n\r\n       0,611509978 seconds time elapsed\r\n```\r\n\r\n```\r\n% sudo perf stat pwsh -Command \"echo 'hello world'\"\r\nhello world\r\n\r\n Performance counter stats for 'pwsh -Command echo 'hello world'':\r\n\r\n        677,662891      task-clock (msec)         #    1,107 CPUs utilized\r\n             1\u202f019      context-switches          #    0,002 M/sec\r\n                29      cpu-migrations            #    0,043 K/sec\r\n            13\u202f454      page-faults               #    0,020 M/sec\r\n     1\u202f704\u202f233\u202f733      cycles                    #    2,515 GHz\r\n       968\u202f482\u202f404      stalled-cycles-frontend   #   56,83% frontend cycles idle\r\n     1\u202f777\u202f828\u202f115      instructions              #    1,04  insn per cycle\r\n                                                  #    0,54  stalled cycles per insn\r\n       364\u202f512\u202f040      branches                  #  537,896 M/sec\r\n        10\u202f355\u202f171      branch-misses             #    2,84% of all branches\r\n\r\n       0,612216334 seconds time elapsed\r\n```\r\n\r\n### Results\r\nThere is some performance penalty using so many sched_yield invocations.\r\n\r\nPowershell needs about 10 times more instructions and 5 times more context switches. Then it is about 10 times slower then java.\r\n\r\nI believe that this is quite important issue in powershell virtual machine. Could it be somehow fixed?",
      "created_at": "2019-05-06T10:33:47Z",
      "updated_at": "2019-05-06T10:33:47Z"
    },
    {
      "author": "krystian-wojtas",
      "author_association": "NONE",
      "body": "Previously I ommited compilation time of java program. Sorry for that.\r\n\r\n# Performance\r\n\r\n## Java with compilation\r\n\r\nFirst run\r\n```\r\n% sudo perf stat sh -c 'javac HelloWorld.java && java HelloWorld'\r\nHello, World\r\n\r\n Performance counter stats for 'sh -c javac HelloWorld.java && java HelloWorld':\r\n\r\n       1934,083252      task-clock (msec)         #    0,720 CPUs utilized\r\n             3\u202f754      context-switches          #    0,002 M/sec\r\n                40      cpu-migrations            #    0,021 K/sec\r\n            15\u202f421      page-faults               #    0,008 M/sec\r\n     4\u202f295\u202f935\u202f619      cycles                    #    2,221 GHz\r\n     2\u202f340\u202f140\u202f912      stalled-cycles-frontend   #   54,47% frontend cycles idle\r\n     4\u202f371\u202f066\u202f081      instructions              #    1,02  insn per cycle\r\n                                                  #    0,54  stalled cycles per insn\r\n       831\u202f213\u202f214      branches                  #  429,771 M/sec\r\n        41\u202f530\u202f640      branch-misses             #    5,00% of all branches\r\n\r\n       2,686253163 seconds time elapsed\r\n```\r\n\r\nFew next runs when files are in system cache\r\n```\r\n% sudo perf stat sh -c 'javac HelloWorld.java && java HelloWorld'\r\nHello, World\r\n\r\n Performance counter stats for 'sh -c javac HelloWorld.java && java HelloWorld':\r\n\r\n       1662,112922      task-clock (msec)         #    2,328 CPUs utilized\r\n             1\u202f825      context-switches          #    0,001 M/sec\r\n                23      cpu-migrations            #    0,014 K/sec\r\n            16\u202f382      page-faults               #    0,010 M/sec\r\n     4\u202f222\u202f391\u202f572      cycles                    #    2,540 GHz\r\n     2\u202f257\u202f009\u202f042      stalled-cycles-frontend   #   53,45% frontend cycles idle\r\n     4\u202f371\u202f405\u202f238      instructions              #    1,04  insn per cycle\r\n                                                  #    0,52  stalled cycles per insn\r\n       830\u202f870\u202f728      branches                  #  499,888 M/sec\r\n        41\u202f293\u202f497      branch-misses             #    4,97% of all branches\r\n\r\n       0,713925635 seconds time elapsed\r\n```\r\n\r\n```\r\n% sudo perf stat sh -c 'javac HelloWorld.java && java HelloWorld'\r\nHello, World\r\n\r\n Performance counter stats for 'sh -c javac HelloWorld.java && java HelloWorld':\r\n\r\n       1697,702963      task-clock (msec)         #    2,263 CPUs utilized\r\n             2\u202f096      context-switches          #    0,001 M/sec\r\n                31      cpu-migrations            #    0,018 K/sec\r\n            16\u202f087      page-faults               #    0,009 M/sec\r\n     4\u202f314\u202f269\u202f417      cycles                    #    2,541 GHz\r\n     2\u202f456\u202f668\u202f682      stalled-cycles-frontend   #   56,94% frontend cycles idle\r\n     4\u202f149\u202f860\u202f073      instructions              #    0,96  insn per cycle\r\n                                                  #    0,59  stalled cycles per insn\r\n       792\u202f818\u202f277      branches                  #  466,995 M/sec\r\n        39\u202f967\u202f113      branch-misses             #    5,04% of all branches\r\n\r\n       0,750193753 seconds time elapsed\r\n```\r\n\r\nNow java executes much more instructions. Around 2 times more. And it is slower.\r\n\r\n# Strace\r\n\r\nCollect strace log\r\n```\r\n% strace -yyf sh -c 'javac HelloWorld.java && java HelloWorld' |& > java-hello-strace-native-full.log\r\n```\r\n[java-hello-strace-native-full.log](https://github.com/PowerShell/PowerShell/files/3147841/java-hello-strace-native-full.log)\r\n\r\nThere are much more threads. But there are collected system call logs from 3 processes in total: javac, java and sh.\r\n```\r\n% cat java-hello-strace-native-full.log | grep '^\\[pid' | tr -s ' ' | cut -d' ' -f 2 | sort -u | wc -l\r\n40\r\n```\r\n\r\nHow many sched_yield invocations?\r\n```\r\n% cat java-hello-strace-native-full.log | grep sched_yield | wc -l\r\n84\r\n```\r\n\r\nPoint is still valid that powershell uses so many sched_yield system calls and java proved that there are not needed so many of them.",
      "created_at": "2019-05-06T12:28:17Z",
      "updated_at": "2019-05-06T12:28:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@krystian-wojtas PowerShell is an application based on .Net Core and C#. Your comparison is incorrect. You should compare C# and Java (\"Hello World\") or PowerShell and an similar application on Java.",
      "created_at": "2019-05-06T13:53:40Z",
      "updated_at": "2019-05-06T13:53:40Z"
    },
    {
      "author": "krystian-wojtas",
      "author_association": "NONE",
      "body": "@iSazonov my investigation is finished in this point :) Thank you for your answers.",
      "created_at": "2019-05-06T14:16:50Z",
      "updated_at": "2019-05-06T14:16:50Z"
    }
  ],
  "created_at": "2019-04-25T07:51:37Z",
  "number": 9462,
  "state": "closed",
  "title": "Feature Request: single thread to do simple job",
  "updated_at": "2019-05-06T14:16:50Z"
}