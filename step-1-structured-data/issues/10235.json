{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10235",
  "author": "darkoperator",
  "body": "\r\n\r\n# Steps to reproduce\r\nGenerate and query using filter hashtable and use the XPATH filter shown in verbose output and use that same one in FilterXML parameter. Tested filter in Eventviewer with no issues. \r\n\r\n```powershell\r\nPS C:\\Users\\admin\\Desktop> $filter = @{'Path'='C:\\Users\\admin\\Desktop\\Security.evtx'; 'data'='ptinto1'; 'providername'='Microsoft-Windows-Security-Auditing'; 'id'=4624 }\r\nPS C:\\Users\\admin\\Desktop> Get-WinEvent -FilterHashtable $filter -Verbose | select -First 0\r\nVERBOSE: Found matching provider: Microsoft-Windows-Security-Auditing\r\nVERBOSE: The Microsoft-Windows-Security-Auditing provider writes events to the Security log.\r\nVERBOSE: Constructed structured query:\r\n<QueryList><Query Id=\"0\" Path=\"file://c:\\users\\admin\\desktop\\security.evtx\"><Select Path=\"file://c:\\users\\admin\\desktop\\security.evtx\">*[System/Provider[@Name='microsoft-windows-security-auditing'] and (EventData/Data='ptinto1') and\r\n(System/EventID=4624)]</Select></Query></QueryList>.\r\nPS C:\\Users\\admin\\Desktop> $xmlfilter = '<QueryList><Query Id=\"0\" Path=\"file://c:\\users\\admin\\desktop\\security.evtx\"><Select Path=\"file://c:\\users\\admin\\desktop\\security.evtx\">*[System/Provider[@Name=\"microsoft-windows-security-auditing\"] and (EventData/D\r\nata=\"ptinto1\") and\r\n>> (System/EventID=4624)]</Select></Query></QueryList>'\r\nPS C:\\Users\\admin\\Desktop> Get-WinEvent -Filterxml $xmlfilter -Verbose | select -First 0\r\nGet-WinEvent : Could not retrieve information about the file://c:\\users\\admin\\desktop\\security.evtx log. Error: The specified channel path is invalid.\r\nAt line:1 char:1\r\n+ Get-WinEvent -Filterxml $xmlfilter -Verbose | select -First 0\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Get-WinEvent], Exception\r\n    + FullyQualifiedErrorId : LogInfoUnavailable,Microsoft.PowerShell.Commands.GetWinEventCommand\r\n\r\n```\r\n\r\n# Expected behavior\r\nThat the query would run and not generate a nonterminating error on the path.\r\n```none\r\n\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\n\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nPS C:\\Users\\admin\\Desktop> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.17134.858\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.17134.858\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Can you confirm the issue for PowerShell Core?",
      "created_at": "2019-07-29T07:47:58Z",
      "updated_at": "2019-07-29T07:47:58Z"
    },
    {
      "author": "darkoperator",
      "author_association": "NONE",
      "body": "Yes it also happens in Powershell core \n\n\n> On Jul 29, 2019, at 12:48 AM, Ilya <notifications@github.com> wrote:\n> \n> Can you confirm the issue for PowerShell Core?\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub <https://github.com/PowerShell/PowerShell/issues/10235?email_source=notifications&email_token=AAD7IHSUSFLBKLGKVURIMD3QB2OGDA5CNFSM4IHGMYJKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD274HMY#issuecomment-515883955>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AAD7IHSAY3RRTO2WEY3RABDQB2OGDANCNFSM4IHGMYJA>.\n> \n\n",
      "created_at": "2019-08-05T18:41:16Z",
      "updated_at": "2019-08-05T18:41:16Z"
    },
    {
      "author": "Robo210",
      "author_association": "CONTRIBUTOR",
      "body": "The error is coming from an (unexpected, perhaps unnecessary) call to EvtOpenChannelConfig before the query is run. \r\n- When using the hash table, get-winevent is calling EvtOpenChannelConfig for channel \"Security\".\r\n  - It's presumably pulling this information out of the local registry or archived log metadata via a call to EvtOpenPublisherMetadata, using the providername from the query.\r\n- When using the XML, get-winevent is calling EvtOpenChannelConfig for channel \"file:///...\", which is not a valid channel.\r\n  - There is no matching call to EvtOpenPublisherMetadata here, it just passes the file path as a the channel name straight to EvtOpenChannelConfig.\r\n  - It is almost certainly not parsing the XML to locate a provider name, nor should it try.\r\n\r\nAs far as I can tell, even though it prints an error message, it still proceeds to call EvtQuery, and still returns the matching events.",
      "created_at": "2019-08-26T20:45:36Z",
      "updated_at": "2019-08-26T20:45:36Z"
    }
  ],
  "created_at": "2019-07-26T18:59:44Z",
  "labels": [
    "Issue-Bug",
    "WG-Cmdlets"
  ],
  "number": 10235,
  "state": "open",
  "title": "Get-WinEvent handling of XPath Filter with Path to EVTX file",
  "updated_at": "2019-08-26T20:45:36Z"
}