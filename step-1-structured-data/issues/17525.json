{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17525",
  "author": "mklement0",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nNote: This is an edge case, given that \"number string\" property names such as `101` are rare, but the bug is quite insidious in its subtlety.\r\n\r\nCredit goes to @jhoneill for discovering the bug, including [how to reproduce it](https://github.com/PowerShell/PowerShell/issues/17520#issuecomment-1154527363)\r\n\r\nIn short: If a given integer, say `.101`, is used to access a _property_ of a custom object in a session _before_ using `.101` on a _hashtable_ that has an entry with such an `[int]`-typed key, the latter access fails _for the remainder of the session_ (only _index syntax_ (`[101]`) works consistently). If the order is reversed (hashtable access first in the session), everything works as expected.\r\n\r\n```powershell\r\n# Define hashtable with numeric key..,\r\n$h = [hashtable]@{ 101 = 'foo' }\r\n# ...and an equivalent [pscustomobject], \r\n#    where the number implicitly becomes a property-name *string*.\r\n#    Note that the numbers must be the *same* to surface the bug.\r\n$o = [pscustomobject]@{ 101 = 'foo' }\r\n\r\n# === These always works as expected: property access on the object, index access on the hastable.\r\n# !! If you comment out the next line and re-run the code *in a new session*, the symptom goes away.\r\n[pscustomobject] @{ object = 'pscustomobject'; access='.101'; value = $o.101 }\r\n[pscustomobject] @{ object = 'hashtable'; access='[101]'; value = $null -eq $h[101] ? '$null' : $h[101] }\r\n\r\n# === !! These *normally* work, but stop working for the remainder of the session, regardless of scope,\r\n#     !! if `$o.101` was executed *first* in the session.\r\n[pscustomobject] @{ object = 'hashtable'; access='.101'; value = $null -eq $h.101 ? '$null' : $h.101 }\r\n[pscustomobject] @{ object = 'hashtable'; access='.([int] 101)'; value = $null -eq $h.([int] 101) ? '$null' : $h.([int] 101) }\r\n```\r\n\n\n### Expected behavior\n\n```console\nobject         access       value\r\n------         ------       -----\r\npscustomobject .101         foo\r\nhashtable      [101]        foo\r\nhashtable      .101         foo\r\nhashtable      .([int] 101) foo\n```\n\n\n### Actual behavior\n\n```console\nobject         access       value\r\n------         ------       -----\r\npscustomobject .101         foo\r\nhashtable      [101]        foo\r\nhashtable      .101         $null  # !!\r\nhashtable      .([int] 101) $null  # !!\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nPowerShell Core 7.3.0-preview.4\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "@PowerShell/wg-powershell-engine We will revisit this in 6 months to see if there's any interest in providing a PR, if not we will likely resolve as won't fix",
      "created_at": "2022-07-07T21:13:42Z",
      "updated_at": "2022-07-07T21:13:42Z"
    }
  ],
  "created_at": "2022-06-14T15:01:25Z",
  "labels": [
    "Issue-Bug",
    "WG-Engine",
    "Up-for-Grabs"
  ],
  "number": 17525,
  "state": "open",
  "title": "Member access bug: Using a given integer first for property access in a session breaks hashtable access with dot notation for that number",
  "updated_at": "2022-07-07T21:13:42Z"
}