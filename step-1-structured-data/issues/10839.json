{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10839",
  "author": "daxian-dbw",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nThere are 2 changes included here:\r\n1. Change how configuration file is accessed to make it faster and memory efficient.\r\n2. Change `TypeCatalogGen` to generate slightly faster dictionary initialization code.\r\n\r\nThe `TypeCatalogGen` is more of a cleanup change, to use the collection initializer, which is slightly faster than the `dict[xxx] = \"...\"` operation.\r\n\r\n### Benchmark results for the `PSConfiguration` change\r\n\r\nFor the `PSConfiguration` change, I ran a benchmark. The benchmark code and results can be found below.\r\nThe new implementation is a lot faster than the current, but overall it won't affect much the startup of `pwsh`, because we spent very little time in `PSConfiguraiton`.\r\nThe new implementation has a lot less allocation (`88.63KB` vs. `1.69KB`). This is the more interesting part.\r\n\r\n```c#\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var summary = BenchmarkRunner.Run<Benchmark_ReadConfigData>();\r\n        }\r\n    }\r\n\r\n    [DisassemblyDiagnoser(printAsm: true, printSource: true, recursiveDepth: 2)]\r\n    [MemoryDiagnoser]\r\n    public class Benchmark_ReadConfigData\r\n    {\r\n        [Benchmark(Baseline = true)]\r\n        public void ReadConfigUsingCurrentImpl()\r\n        {\r\n            // Those methods are called during the startup of 'pwsh', so using them as the operations for the benchmark.\r\n            PowerShellConfig.Instance.GetExperimentalFeatures();\r\n            PowerShellConfig.Instance.GetModulePath(ConfigScope.AllUsers);\r\n            PowerShellConfig.Instance.GetModulePath(ConfigScope.CurrentUser);\r\n            PowerShellConfig.Instance.GetPowerShellPolicies(ConfigScope.CurrentUser);\r\n            PowerShellConfig.Instance.GetPowerShellPolicies(ConfigScope.AllUsers);\r\n            PowerShellConfig.Instance.GetExecutionPolicy(ConfigScope.CurrentUser, \"Microsoft.PowerShell\");\r\n            PowerShellConfig.Instance.GetExecutionPolicy(ConfigScope.AllUsers, \"Microsoft.PowerShell\");\r\n        }\r\n\r\n        [Benchmark]\r\n        public void ReadConfigUsingNewImpl()\r\n        {\r\n            // Those methods are called during the startup of 'pwsh', so using them as the operations for the benchmark.\r\n            NewPowerShellConfig.Instance.GetExperimentalFeatures();\r\n            NewPowerShellConfig.Instance.GetModulePath(ConfigScope.AllUsers);\r\n            NewPowerShellConfig.Instance.GetModulePath(ConfigScope.CurrentUser);\r\n            NewPowerShellConfig.Instance.GetPowerShellPolicies(ConfigScope.CurrentUser);\r\n            NewPowerShellConfig.Instance.GetPowerShellPolicies(ConfigScope.AllUsers);\r\n            NewPowerShellConfig.Instance.GetExecutionPolicy(ConfigScope.CurrentUser, \"Microsoft.PowerShell\");\r\n            NewPowerShellConfig.Instance.GetExecutionPolicy(ConfigScope.AllUsers, \"Microsoft.PowerShell\");\r\n        }\r\n    }\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/127450/67133473-cc4b9b80-f1c1-11e9-8c60-295b94c22820.png)\r\n\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2019-10-30T21:44:35Z",
  "comments": [
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.0.0-preview.6` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.6)\n",
      "created_at": "2019-11-21T22:35:49Z",
      "updated_at": "2019-11-21T22:35:49Z"
    }
  ],
  "created_at": "2019-10-18T23:36:21Z",
  "number": 10839,
  "state": "closed",
  "title": "Update `PSConfiguration.ReadValueFromFile` to make it faster and more memory efficient",
  "updated_at": "2019-11-21T22:35:49Z"
}