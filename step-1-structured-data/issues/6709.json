{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6709",
  "author": "rjmholt",
  "body": "ModuleCmdletBase.cs goes to [some effort](https://github.com/PowerShell/PowerShell/blob/942c68e796c2ff8c40ed31faffe9527e15c8339c/src/System.Management.Automation/engine/Modules/ModuleCmdletBase.cs#L5808) currently to run and cache analysis on binary modules. However, in .NET Core, we [don't actually do any analysis](https://github.com/PowerShell/PowerShell/blob/942c68e796c2ff8c40ed31faffe9527e15c8339c/src/System.Management.Automation/CoreCLR/CorePsStub.cs#L641). And we no longer support FullCLR.\r\n\r\nSo we should consider removing binary module analysis for now, and reinstate it when we have a way to analyse a module without loading it. /cc @daxian-dbw.",
  "closed_at": "2018-05-01T05:41:43Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "We have the guideline that module manifest should not use the wildcard \"*\" for entries like `FunctionsToExport`, `CmdletsToExport` and etc. Currently, with PowerShell Core, we solely rely on the module manifest when it comes to module analysis for a binary module, and it seems working well enough. So maybe we can remove the remaining DLL inspection analysis code (_not working_) completely for now, and if we have a strong request at a later time, we can implement it in PowerShell Core.\r\n\r\n@BrucePay please let us know if this is OK.",
      "created_at": "2018-04-24T01:02:14Z",
      "updated_at": "2018-04-24T01:03:25Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Although we have a _guideline_ not to use \"*\", we still allow it so not analyzing binary modules could be a problem. Now I was thinking that the work for #6653 would give us the way to do binary module analysis. Is that not the case?",
      "created_at": "2018-04-24T01:23:23Z",
      "updated_at": "2018-04-24T01:23:23Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@BrucePay The work for #6653 only requires reading the available public types from a given assembly, while binary module analysis would require more (_attribute, base type, and possibly need to follow the base type chain to another assembly, which would require assembly resolution_). So the work for #6653 would be a subset of the things we need for binary module analysis.\r\n\r\nGiven your comment, I think we should keep the existing binary module analysis code untouched. The code can be refactored when we get to the implementation.",
      "created_at": "2018-04-25T00:16:14Z",
      "updated_at": "2018-04-25T00:16:14Z"
    }
  ],
  "created_at": "2018-04-23T23:29:46Z",
  "labels": [
    "WG-Engine",
    "Issue-Discussion",
    "Resolution-Answered"
  ],
  "number": 6709,
  "state": "closed",
  "title": "Remove binary module analysis caching in ModuleCmdletBase.cs",
  "updated_at": "2018-05-01T05:41:43Z"
}