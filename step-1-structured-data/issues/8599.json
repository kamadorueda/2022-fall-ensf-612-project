{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8599",
  "author": "mklement0",
  "body": "Note: By _deprecation_ I mean \"soft\" deprecation, i.e., deprecation _without (eventual) removal_, in the interest of backward compatibility.\r\n\r\n# Summary of the new feature/enhancement\r\n\r\nThe `-exact` option is _never needed_ and was presumably only ever implemented for symmetry with `-wildcard` and `-regex`, as a way to explicitly opt into the _default_ behavior, which is essentially: implied `-eq` comparison, which with strings means case-insensitive comparison in full (though you can opt into case-sensitivity by adding `-casesensitive`).\r\n\r\nGiven that I think most users expect this behavior by default anyway, `-exact` only raises unnecessary questions, not least due to its name, given that it can be combined with `-casesensitive` (as an aside: to contrast it with `-wildcard` and `-regex`, `-literal` would have made more sense as a name).\r\n\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\n* Remove `-exact` from tab completion, if possible.\r\n\r\n* Mention `-exact` in the docs as never being necessary and existing primarily for backward compatibility.\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 \r\n>The -exact option is never needed and was presumably only ever implemented for symmetry with -wildcard and -regex, as a way to *explicitly opt into the default behavior*,\r\n\r\nExplicitly indicating intent is a useful thing.\r\n",
      "created_at": "2019-01-07T22:17:38Z",
      "updated_at": "2019-01-07T22:17:38Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@BrucePay:\r\n\r\n> Explicitly indicating intent is a useful thing.\r\n\r\nSometimes, yes, but not categorically:\r\n\r\nGiven that:\r\n\r\n* the option's name is confusing, as explained.\r\n* that the _default_ behavior is sensible and is what users are likely to expect, along with the need to _opt into_ variant behaviors (`-wildcard`, `-regex`, `-casesensitive`).\r\n\r\nI'd say we're better off without `-exact` overall.\r\n\r\nNote that there's no `-caseINsensitive` either, for instance, and I don't think anyone wishes there were.\r\n\r\n",
      "created_at": "2019-01-08T11:43:38Z",
      "updated_at": "2019-01-08T11:43:38Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Aye, the default behaviour is essentially what users coming from other languages will more or less expect.\r\n\r\nHaving a switch named -Exact makes it sound like it's more specific than the default, which it isn't.",
      "created_at": "2019-01-08T11:45:47Z",
      "updated_at": "2019-01-08T11:45:47Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 \r\n> the option's name is confusing, as explained.\r\n\r\nI supposed we could have named them `-ExactMatch`, `-WildCardMatch`, `-RegularExpressionMatch`. That's pretty clear. On the other hand, since _matching_ is the whole point of the switch statement, it seems a bit redundant. \r\n\r\n> into variant behaviors (-wildcard, -regex, -casesensitive).\r\n\r\n-CaseSensitive is not, in itself, a variant behaviour. It's a modifier for wildcard/regex/exact e.g.\r\n```powershell\r\n    switch -CaseSensitive -Exact(Match) {\r\n```\r\n\r\nIn general, _allowing_ script authors to strongly express intent is a pervasive theme in the design of PowerShell: long options, noun-verb command names, even language operators like `-ieq`, `-ceq`, `-eq`, etc. support this. And while the need for elastic syntax means that this can not be _required_ , it is absolutely encouraged for production scripting.\r\n",
      "created_at": "2019-01-08T20:38:13Z",
      "updated_at": "2019-01-08T20:38:13Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> I supposed we could have named them `-ExactMatch`\r\n\r\nThe problem is the word _exact_ (a case-insensitive match is not an exact one); _literal_ would have been better, but I still think there's no need for this option altogether (see below).\r\n\r\n> `-CaseSensitive` is not, in itself, a variant behaviour\r\n\r\nSwitching from case-insensitive to case-sensitive matching is a variant behavior too, just along a different dimension.\r\n\r\n> even language operators like -ieq, -ceq, -eq, etc. support this. \r\n\r\nA `switch` statement without options can - and is likely to - be conceived of as a generalized `-eq` statement, with `-eq` being used to match the branch conditions.\r\n\r\nAs such, `-exact` would be akin to complementing the `-eq` operator with an `-exacteq` operator, which is both unnecessary and confusing.\r\n\r\nTo mirror `-ceq` / `-ieq`, you could make the case that `switch` should support `-caseinsensitive` too, after all; while I personally think that's not necessary, I wouldn't consider it problematic.",
      "created_at": "2019-01-09T01:05:56Z",
      "updated_at": "2019-01-09T01:08:46Z"
    }
  ],
  "created_at": "2019-01-07T15:55:06Z",
  "labels": [
    "WG-Language"
  ],
  "number": 8599,
  "state": "open",
  "title": "`switch` statement: deprecate the -exact option",
  "updated_at": "2019-01-09T01:08:46Z"
}