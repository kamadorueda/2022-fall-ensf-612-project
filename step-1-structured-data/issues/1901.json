{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1901",
  "author": "bagder",
  "body": "They block use of the commonly used command line tools without providing\neven an attempt to offer the same functionality. They serve no purpose\nfor PowerShell users but cause confusion and problems to existing curl\nand wget users.\n\n**Update:** Stay polite and to the point when commenting here. This pull-request is not an excuse to be rude or off-topic.\n",
  "closed_at": "2016-08-18T20:08:29Z",
  "comments": [
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "Hi **@bagder**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    <span>\n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    </span>\n\nTTYL, MSBOT;\n",
      "created_at": "2016-08-18T19:34:17Z",
      "updated_at": "2016-08-18T19:34:17Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Your change would only affect Windows PowerShell (the version of PowerShell that ships in Windows).  Those aliases have existed for multiple releases, so removing them would be a breaking change.\n\nWe are rejecting this PR as it introduces \"Unacceptable Changes\", see our [breaking change contract](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md).\n\nIf you disagree with this resolution, you will need to start an [RFC](https://github.com/PowerShell/PowerShell-RFC)\n\nNote that our RFC process currently states only team members may create a new RFC.  Our intent is to open this up to the community at large, we'll be updating that repo very soon to clarify.\n",
      "created_at": "2016-08-18T20:08:29Z",
      "updated_at": "2016-08-18T20:08:29Z"
    },
    {
      "author": "bagder",
      "author_association": "NONE",
      "body": "> Your change would only affect Windows PowerShell\n\nWell of course, because that's where they were added!\n\n> removing them would be a breaking change\n\nYou **adding** them was \"a breaking change\" to people who were used to using curl and wget from their command lines. No sane person would use those alises anyway since your replacements for curl and wget aren't working anywhere near like the original curl and wget command line tools. These aliases are only making the life harder of the users who actually want the real tools and they don't do anything good for those who don't care for the real tools.\n",
      "created_at": "2016-08-18T20:14:15Z",
      "updated_at": "2016-08-18T20:14:15Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "We're not saying here that this isn't a change we can investigate, but per [our governance model](https://github.com/PowerShell/PowerShell/blob/master/docs/community/governance.md) we need to have a conversation around it. The impact of this change would be far-reaching, and it's not one we can make lightly. \n",
      "created_at": "2016-08-18T20:21:59Z",
      "updated_at": "2016-08-18T20:21:59Z"
    },
    {
      "author": "jpsnover",
      "author_association": "CONTRIBUTOR",
      "body": "@bagder You bring up a great point. We added a number of aliases for Unix commands but if someone has installed those commands on WIndows, those aliases screw them up.\n\nWe need to fix this.\n\nThe only Q is what is the best way to do so?  As Joey points out - having shipped these, removing them is a breaking change. \n\nWe had a vigorous internal discussion about aliases on Linux and had a couple of proposals but decided to start a discussion with the community about what the right solution is (both on Windows and on Linux).  \n\nTHIS IS NOT A FIX - but if you want to get rid of them for now, you can just add the following to your profile:\nRemove-Item Alias:Curl\nRemove-Item Alias:WGet\n",
      "created_at": "2016-08-18T20:30:46Z",
      "updated_at": "2016-08-18T20:30:46Z"
    },
    {
      "author": "jpsnover",
      "author_association": "CONTRIBUTOR",
      "body": "@joeyaiello \nDo we already have an RFC for aliases in the queue?\nIf not - can we start one?\n",
      "created_at": "2016-08-18T20:50:33Z",
      "updated_at": "2016-08-18T20:50:33Z"
    },
    {
      "author": "gevaerts",
      "author_association": "NONE",
      "body": "Given that (as far as I can see) your curl and wget \"aliases\" basically don't implement any of the curl or wget options, I'd disagree with your claim that they are \"aliases for Unix commands\".\n",
      "created_at": "2016-08-18T21:59:25Z",
      "updated_at": "2016-08-18T21:59:25Z"
    },
    {
      "author": "jpsnover",
      "author_association": "CONTRIBUTOR",
      "body": "@gevaerts  Are you confused about what I was saying or are you suggesting that there is a more precise/constructive way of saying it?\n",
      "created_at": "2016-08-18T22:20:21Z",
      "updated_at": "2016-08-18T22:20:21Z"
    },
    {
      "author": "gevaerts",
      "author_association": "NONE",
      "body": "@jpsnover no, I'm not confused. I'm saying it's dishonest to claim that powershell has aliases for \"curl\" and \"wget\", as the things that happen when one types a curl or wget in no way resemble what actual curl or wget would do.\n\nYou can fix that in two ways: (a) implement both curl and wget functionality completely, or (b) remove those aliases that should never have existed in the first place and make you look bad.\n",
      "created_at": "2016-08-18T22:25:32Z",
      "updated_at": "2016-08-18T22:26:32Z"
    },
    {
      "author": "jpsnover",
      "author_association": "CONTRIBUTOR",
      "body": "fine.\n",
      "created_at": "2016-08-18T22:33:51Z",
      "updated_at": "2016-08-18T22:33:51Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Nobody is claiming the aliases replace the curl/wget. It may have been misguided to add those aliases in the first place, but the design decision was consistent with other Unix commands, e.g. the Windows PowerShell aliases `ps` or `ls` certainly don't work like the native tools.\n\nThat doesn't change the fact that we need to weigh the pros and cons of removing them. We also look bad when we break people's scripts that work as they expect today. That's why we have an RFC process to do the right thing for all of our users.\n\nAfter going through an RFC - we may learn that removing _all_ of our Unix aliases is the right thing to do. Or maybe just removing `curl` and `wget`.\n\nIt's also possible we end up with getting the best of both worlds - we find a way to invoke the native commands if they exist, but fall back to the aliases otherwise. This certainly has it's own set of problems.  For example, if the native command exists, but the script really did want the alias, can we detect that?\n\nThe bottom line here is that we really want to do the right thing for _all_ of our customers, starting with where we are today.\n",
      "created_at": "2016-08-18T22:49:09Z",
      "updated_at": "2016-08-18T22:49:09Z"
    },
    {
      "author": "tomer",
      "author_association": "NONE",
      "body": "Since right now users can have Bash running on Windows, I'd suppose that the **all the UNIX utilities** should run native on Windows even when running though Windows PowerShell. Having aliases to _incompatible_ commands make users wonder why things break, and if users use the command `ls` on Windows instead of `dir`, for example, I guess they would like to use the same command flags they got used to on their Linux and UNIX (as well as MacOS) machines. \n",
      "created_at": "2016-08-18T23:01:46Z",
      "updated_at": "2016-08-18T23:01:46Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "It is important to take into consideration that neither 'curl' or 'wget' are \"UNIX utilities\", and it's deceiving to call them UNIX utilities. I don't know who decided that they were to be considered UNIX utilities, but both curl and wget have been available for native Windows users since at the very latest 2011. Both work natively on Windows without things like cygwin or the new GNU/Linux emulator.\n\nI will go so far as to say that there is no point in worrying about this being a \"breaking change\" because nobody uses \"curl\" or \"wget\" to mean Invoke-WebRequest, which doesn't support any of the command line options of either utility. If anything, the current implementation break scripts, removing these \"aliases\" would not break anything, but more likely than not would fix scripts.\n\nBy current \"governance\", this would fall under \"Changes that don't require an RFC\"\n",
      "created_at": "2016-08-18T23:27:17Z",
      "updated_at": "2016-08-18T23:41:51Z"
    },
    {
      "author": "joshka",
      "author_association": "NONE",
      "body": "@JohnMHarrisJr your assertion that nobody uses the curl or wget aliases to the PowerShell commands has quite a few counterpoints some of which can be seen at https://github.com/search?l=&q=curl++language%3APowerShell&ref=advsearch&type=Code&utf8=%E2%9C%93\n",
      "created_at": "2016-08-19T00:11:33Z",
      "updated_at": "2016-08-19T00:11:33Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "@joshka I think you might want to look at those results\u2026 They prove my point?\n",
      "created_at": "2016-08-19T00:12:15Z",
      "updated_at": "2016-08-19T00:12:19Z"
    },
    {
      "author": "jpsnover",
      "author_association": "CONTRIBUTOR",
      "body": "@JohnMHarrisJr \n\n> nobody uses \"curl\" or \"wget\" to mean Invoke-WebRequest\n> It is important to be precise.\n> I _suspect_ that you are correct.\n> I _know_ that I don't know that.\n> We just don't have telemetry that tells us that.\n> PowerShell is installed on many many hundreds of millions of machines and potentially over a billion so I can almost guarantee you that \"nobody uses ...\" is an incorrect assertion.\n\nContinuing to be precise - we should do something here.  We just need to think it through.\n",
      "created_at": "2016-08-19T00:12:22Z",
      "updated_at": "2016-08-19T00:12:22Z"
    },
    {
      "author": "jpsnover",
      "author_association": "CONTRIBUTOR",
      "body": "Here is a query that illustrates @joshka  point:\nhttps://github.com/search?utf8=%E2%9C%93&q=curl++language%3APowerShell+Invoke-JsonRequest&type=Code&ref=searchresults\n",
      "created_at": "2016-08-19T00:15:23Z",
      "updated_at": "2016-08-19T00:15:23Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "@jpsnover Yes, I saw that on the first page as I went through the first six pages. That's one in six pages that's using it in a way that it works with the current \"alias\", and even so it would work without the alias, so my case still stands.\n",
      "created_at": "2016-08-19T00:16:50Z",
      "updated_at": "2016-08-19T00:16:50Z"
    },
    {
      "author": "jpsnover",
      "author_association": "CONTRIBUTOR",
      "body": "@JohnMHarrisJr  \nYup.  We hear you.\nAs I said - we'll open up a RFC on this.\nThanks for the feedback!  \n",
      "created_at": "2016-08-19T00:31:50Z",
      "updated_at": "2016-08-19T00:31:50Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@JohnMHarrisJr The example that @jpsnover references would not work with `curl.exe` - the object assigned would be a string, so [this line](https://github.com/MasashiTeruya/poweretcd/blob/72279750c366e08353cdd20114cfb8b49cf94e7d/Invoke-JsonRequest.psm1#L4) would fail because `System.String` does not have a `Content` property.\n",
      "created_at": "2016-08-19T00:32:18Z",
      "updated_at": "2016-08-19T00:32:18Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "@lzybkr Does setting a variable to the output of a program not make it a `System.String`?\n\nEdit: Actually, I don't see a `Content` property in either `System.String` or the undocumented response of `Invoke-WebRequest`?\n\nEdit 2: Actually, I do see a `Content` property, I just had to look on a different website to find the actual type 'HtmlWebResponseObject' since it's not on TechNet like Invoke-WebRequest.\n",
      "created_at": "2016-08-19T00:42:29Z",
      "updated_at": "2016-08-19T00:51:31Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@JohnMHarrisJr \n\nThe output of `Invoke-WebRequest` is a [Microsoft.PowerShell.Commands.HtmlWebResponseObject](https://msdn.microsoft.com/en-us/library/microsoft.powershell.commands.htmlwebresponseobject%28v=vs.85%29.aspx).\n\nThe output of `curl.exe` (and every other exe or other command external to PowerShell) is [System.String](https://msdn.microsoft.com/en-us/library/system.string%28v=vs.110%29.aspx).\n\nSo changing `curl` to run `curl.exe instead of`Invoke-WebRequest` would break this script because the output type would change.\n",
      "created_at": "2016-08-19T00:57:25Z",
      "updated_at": "2016-08-19T00:57:25Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "@lzybkr Yes, I got that. This is still one script out of six pages at least of results, and the majority of scripts using curl in PowerShell, that show up in the results, are either working around this \"alias\" or are mistakenly using the \"alias\".\n",
      "created_at": "2016-08-19T00:59:50Z",
      "updated_at": "2016-08-19T00:59:50Z"
    },
    {
      "author": "jay",
      "author_association": "NONE",
      "body": "While I agree with Daniel is a compromise maybe allow it both ways to preserve backwards compatibility? Have powershell detect at runtime what the user intends based on the option casing, for example `curl -UpperCamelCase asdf` is Invoke-WebRequest\n",
      "created_at": "2016-08-19T01:18:08Z",
      "updated_at": "2016-08-19T01:18:08Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "There's no sense in that, and that doesn't solve even the example case we found earlier.\n",
      "created_at": "2016-08-19T01:19:40Z",
      "updated_at": "2016-08-19T01:19:40Z"
    },
    {
      "author": "jay",
      "author_association": "NONE",
      "body": "Thanks, I see that example and basically the idea I'm proposing is have some way in PowerShell to auto-detect for backwards compatibility when someone is using curl in a way that it is apparent they mean Invoke-WebRequest. Is it not detectable in that script that they want Invoke-WebRequest? And if there's no sense in that, ok, I don't use PowerShell much so I don't know.\n",
      "created_at": "2016-08-19T01:58:55Z",
      "updated_at": "2016-08-19T01:58:55Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "In the context of the `curl` command, there is no way to detect that they want Invoke-WebRequest, but when a user users `curl` or `wget`, they want `curl` or `wget`.\n",
      "created_at": "2016-08-19T02:00:51Z",
      "updated_at": "2016-08-19T02:00:51Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "> You adding them was \"a breaking change\" to people who were used to using curl and wget from their command lines.\n\nAs much as I can see how to some the curl and wget aliases can be seem as a \"breaking\" change the but the decision to implement them was as a gateway for those that had not picked up PowerShell back in 2009 (7 years ago now) when it was released in PowerShell version 3 along with the aliases that are also used as standard from psv1 days aka from 2006.\n\nHowever we have these aliases and others and we will need to collectively make the right decision on how these get dealt with which IMO going through the RFC process is the right way to do it.\n\nFrom experience in dealing with Windows SysAdmins there are many less that out there that actually share their scripts so relying on a google search to get examples is not something that I would say gives that much credibility to the argument being made.\n\nThat said however I do agree that the aliases for curl and wget should be removed from PowerShell completely but that's because I don't agree with aliases being able to be used other than interactively.\n\nGenerally however it is recommended in scripts **not** to use aliases at all and this is why the PowerShell ScriptAnalyzer (which everyone should start to use if not already being used see https://github.com/PowerShell/PSScriptAnalyzer ) has a rule that picks up on the use of aliases and warns the user not to use them. When I present and teach I **Always** warn about the use of aliases even for .exe applications because of issues like this and only suggest use of them in interactive sessions.\n",
      "created_at": "2016-08-19T03:40:45Z",
      "updated_at": "2016-08-19T03:40:45Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "While I don't agree with you about aliases being used non interactively (see bash's handling of aliases), I do agree that completely removing them would be beneficial to everyone. The inclusion of these \"aliases\" is confusing to users who mean to use `curl` or `wget`.\n\nOn August 18, 2016 11:40:56 PM EDT, Ryan Yates notifications@github.com wrote:\n\n> > You adding them was \"a breaking change\" to people who were used to\n> > using curl and wget from their command lines.\n> \n> As much as I can see how to some the curl and wget aliases can be seem\n> as a \"breaking\" change the but the decision to implement them was as a\n> gateway for those that had not picked up PowerShell back in 2009 (7\n> years ago now) when it was released in PowerShell version 3 along with\n> the aliases that are also used as standard from psv1 days aka from\n> 2006.\n> \n> However we have these aliases and others and we will need to\n> collectively make the right decision on how these get dealt with which\n> IMO going through the RFC process is the right way to do it.\n> \n> From experience in dealing with Windows SysAdmins there are many less\n> that out there that actually share their scripts so relying on a google\n> search to get examples is not something that I would say gives that\n> much credibility to the argument being made.\n> \n> That said however I do agree that the aliases for curl and wget should\n> be removed from PowerShell completely but that's because I don't agree\n> with aliases being able to be used other than interactively.\n> \n> Generally however it is recommended in scripts **not** to use aliases\n> at all and this is why the PowerShell ScriptAnalyzer (which everyone\n> should start to use if not already being used see\n> https://github.com/PowerShell/PSScriptAnalyzer ) has a rule that picks\n> up on the use of aliases and warns the user not to use them. When I\n> present and teach I **Always** warn about the use of aliases even for\n> .exe applications because of issues like this and only suggest use of\n> them in interactive sessions.\n\n## \n\nJohn M. Harris, Jr.\nPGP Key: f2ea233509f192f98464c2e94f8f03c64bb38ffd\n\nSent from my Android device. Please excuse my brevity.\n",
      "created_at": "2016-08-19T03:45:34Z",
      "updated_at": "2016-08-19T03:45:34Z"
    },
    {
      "author": "joshka",
      "author_association": "NONE",
      "body": "@JohnMHarrisJr I agree with you 100%, the aliases are wrong. That said removing them will break a bunch of scripts. I've shown you one public shared script, but there's likely significantly more that are not shared on github. I know I've written at least one script that's sitting on a client's machine somewhere over the years. Removing this code per the PR will break those scripts. Something like removing that code but adding it to a default profile script might be a better fix (but that likely comes with its own problems). An RFC is appropriate here. Being that it's been broken for 7 odd years, taking the time to fix it properly is unlikely to cause anyone any significant damage wouldn't you say?\n",
      "created_at": "2016-08-19T03:49:06Z",
      "updated_at": "2016-08-19T03:49:06Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "From the sheer number of workarounds and misuses of the `curl` command in Powershell scripts on GitHub alone, I'd say that more scripts are broken now than would otherwise be \"broken\" by removing these aliases.\n\nI can't speak for Windows sysadmins, but on GNU/Linux systems (I've had a lot of experience with Red Hat Enterprise Linux and CentOS machines personally, managed mostly with Ansible now) when an update comes out that changes options in a command to the point that something breaks two things happen:\n\n1) Things break, obviously. When things stop working we look at the output of Cron jobs and do a full triage of our code that's supposed to be working, that's a sysadmin's job.\n\n2) There's an option to not update if we know it'll break stuff and we're too lazy to fix it.\n\nIf somebody is actively updating machines, then somebody can definitely see error logs on the machines they're updating, especially in the case of Windows machines, where updates are such a pain.\n\nOn August 18, 2016 11:49:17 PM EDT, Joshua McKinney notifications@github.com wrote:\n\n> @JohnMHarrisJr I agree with you 100%, the aliases are wrong. That said\n> removing them will break a bunch of scripts. I've shown you one public\n> shared script, but there's likely significantly more that are not\n> shared on github. I know I've written at least one script that's\n> sitting on a client's machine somewhere over the years. Removing this\n> code per the PR will break those scripts. Something like removing that\n> code but adding it to a default profile script might be a better fix\n> (but that likely comes with its own problems). An RFC is appropriate\n> here. Being that it's been broken for 7 odd years, taking the time to\n> fix it properly is unlikely to cause anyone any significant damage\n> wouldn't you say?\n\n## \n\nJohn M. Harris, Jr.\nPGP Key: f2ea233509f192f98464c2e94f8f03c64bb38ffd\n\nSent from my Android device. Please excuse my brevity.\n",
      "created_at": "2016-08-19T03:55:55Z",
      "updated_at": "2016-08-19T03:55:55Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "Some of the painful history with PowerShell however is due to it having been coupled into the OS but not a product that really received \"Updates\" like we get for other OS components (at least that I can remember) other than the WMF updates that would install a newer version of WMF (and inherently PowerShell too)\n\nSo this issue _could_ have potentially been mitigated by there being actual updates for powershell shipped in a manner other than via WMF major versions however that ship has long been sunk so we have to deal with the fallout.\n\nHowever now that the Release cadence has been decoupled from Windows OS (or will be in future) which can only be a good thing right?\n",
      "created_at": "2016-08-19T04:56:01Z",
      "updated_at": "2016-08-19T04:56:01Z"
    },
    {
      "author": "small1",
      "author_association": "NONE",
      "body": "Well. Aliases like these if you come from the unix world would never have been built in.\n\nThey break stuff and creates an amount of weirdness and forces many users to use workarounds like this: http://superuser.com/questions/883914/how-do-i-permanently-remove-a-default-powershell-alias\n\nI use that on a couple of machines but that also means that my scripts wont work on others unless they do the same.  And stuff like this also creates guides like this: http://www.powertheshell.com/bp_script_alias/  that says dont use aliases in scripts.  And that is what i prefer myself. That way a script always works regardless of what machine i use it on. \n",
      "created_at": "2016-08-19T07:45:51Z",
      "updated_at": "2016-08-19T07:45:51Z"
    },
    {
      "author": "gevaerts",
      "author_association": "NONE",
      "body": "To be honest, I don't see how this dscussion about how many people might depend on these aliases is relevant. The story as I see it is that a few years ago you decided to usurp the names of some well known tools, in the full knowledge that doing so would break those tools. You have then ignored bug reports about this for _years_. You really can't deny that you knew a long time ago that what you did amounted to hostile behaviour towards other people.\n\nIf removing these aliases (retroactively, if you want to clean up your act you have to remove this from _all_ versions in which this was ever released) breaks things for some people, then you can go and send people out to help them fix their issues. You _knew_ it was a hostile action, _you_ broke things, _you_ fix them.\n",
      "created_at": "2016-08-19T13:07:29Z",
      "updated_at": "2016-08-19T13:07:29Z"
    },
    {
      "author": "kylecordes",
      "author_association": "NONE",
      "body": "Looking back near the start of this thread, I'm reminded of one of the big challenges and unintended side effects of otherwise responsible project governance. The default result, and the case here, is that governance processes lock in early ill-considered decisions made in isolation, and strongly privilege the input of the people who made them over the input of people who come along later in a project with potentially much better quality input. I don't have a solution to this problem, acknowledging that it exists.\n",
      "created_at": "2016-08-19T13:12:13Z",
      "updated_at": "2016-08-19T13:12:13Z"
    },
    {
      "author": "codeape2",
      "author_association": "NONE",
      "body": "How about implementing a \"Remove-All-Aliases-That-Are-Linux-Commands\" command that would do Remove-Item alias:curl alias:wget alias:ls alias:ps etc?\n\nWhen starting powershell, the presence or absence of a command line switch could invoke this command automatically.\n",
      "created_at": "2016-08-19T13:24:57Z",
      "updated_at": "2016-08-19T13:44:05Z"
    },
    {
      "author": "omgbox",
      "author_association": "NONE",
      "body": "i uninstalled windows and deleted my life \n",
      "created_at": "2016-08-19T13:26:31Z",
      "updated_at": "2016-08-19T13:26:31Z"
    },
    {
      "author": "nitin88",
      "author_association": "NONE",
      "body": "It would be much better to keep consistency across platforms.\nBy continuing with this, the powershell adoption goes for toss in *nix\n",
      "created_at": "2016-08-19T13:26:44Z",
      "updated_at": "2016-08-19T13:29:49Z"
    },
    {
      "author": "senthilnayagam",
      "author_association": "NONE",
      "body": "either microsoft users who use powershell alias for curl and wget are dumb or microsoft is dishonest \n",
      "created_at": "2016-08-19T13:27:47Z",
      "updated_at": "2016-08-19T13:27:47Z"
    },
    {
      "author": "Citillara",
      "author_association": "NONE",
      "body": "Could those alias be disabled (not removed) by default ?\nThey could be enabled by either one of those\n- Typing a command like \"Enable-Linux-Aliases\"\n- Switch on starting up PowerShell\n- OS Environment flag\n",
      "created_at": "2016-08-19T13:33:51Z",
      "updated_at": "2016-08-19T13:33:51Z"
    },
    {
      "author": "jaboutboul",
      "author_association": "NONE",
      "body": "Guys, they are trying to do the right thing here, why don't we cut them some slack and work with them to arrive a solution that is sane and solves the problem instead of getting all vicious?\n\nHow these were implemented arose out of a culture that was totally averse to our community  principles, which they are now clearly coming around to embracing after years of fighting it. Let's put our heads together and figure this out. This is also a learning exercise for Microsoft in governance of these types of projects. Both sides should be listening and mutually supportive.\n",
      "created_at": "2016-08-19T13:36:48Z",
      "updated_at": "2016-08-19T13:36:48Z"
    },
    {
      "author": "alekratz",
      "author_association": "NONE",
      "body": "Before you start bashing Microsoft for making these decisions, remember that Powershell was never originally intended to be released for Linux. If you said Microsoft was going open source when Powershell was first released, you'd have been laughed out of the room.\n\nNow, that being said, I like the idea of having an \"Enable-Linux-Aliases\" like @Citillara mentioned, to keep compatibility but still allowing Linux users to do their thing.\n",
      "created_at": "2016-08-19T13:39:04Z",
      "updated_at": "2016-08-19T13:39:04Z"
    },
    {
      "author": "charlieman",
      "author_association": "NONE",
      "body": "Showing a warning to use Invoke-WebRequest or Remove-Item Alias:Curl could be a first step. Then you could remove or disable them in the next major version.\n",
      "created_at": "2016-08-19T13:42:27Z",
      "updated_at": "2016-08-19T13:42:27Z"
    },
    {
      "author": "kshmelkov",
      "author_association": "NONE",
      "body": "> remember that Powershell was never originally intended to be released for Linux.\n\nSo what? Is it a valid reason to shadow well-known software, windows versions of which are available for decades?\n",
      "created_at": "2016-08-19T13:43:52Z",
      "updated_at": "2016-08-19T13:44:14Z"
    },
    {
      "author": "bagder",
      "author_association": "NONE",
      "body": "> Powershell was never originally intended to be released for Linux\n\nThis was a problem already from the day they added these aliases. On Windows. Many years ago. This was just the first opportunity I had to actually try to do something about it.\n\ncurl has always worked fine on windows and did so many years before PowerShell even existed.\n",
      "created_at": "2016-08-19T13:45:03Z",
      "updated_at": "2016-08-19T13:45:03Z"
    },
    {
      "author": "simbalion",
      "author_association": "NONE",
      "body": "This thread shows that Microsoft is dysfunctional.\n\nWhether Powershell was intended to be released for Linux is irrelevant, you do not create programs which intentionally have the same names as well known programs, especially when your programs do not provide exactly the same functionality as the originals. There is no way to view that sort of behavior in a positive light.\n\nFurther, the bureaucracy that makes this a lengthy conversation instead of a simple \"oops, you're right, let us fix that today\" is laughable. \"corporate governance\" and whatever, good sense has gone out the window. \n\nThat is the reason the Microsoft product empire is suffering. The competition does not suffer from these dysfunctions.\n",
      "created_at": "2016-08-19T13:45:16Z",
      "updated_at": "2016-08-19T13:45:16Z"
    },
    {
      "author": "alekratz",
      "author_association": "NONE",
      "body": "@traverseda I don't think the \"embrace, extend, extinguish\" doctrine is a fair assessment of this situation. Those were the business practices of Microsoft 10+ years ago, to take over entire corporations. Are they doing it here? Possibly, but unlikely. But they have not embraced, extended, nor extinguished in a _long_ time. I implore you to find an example of this behavior in the past ten years. I'm not trying to make this about computer company politics, and it would be foolish for anyone so deeply involved in open source to welcome Microsoft with open, trusting arms. They have been known to bite, and open source has (and still is) been bitten before. But bringing up company politics does not address the technical issue at hand.\n\nThere's been a lot of unproductive Microsoft bashing in this thread. Sorry to call you out specifically, but I'm really more interested in reading about solutions to this problem rather than getting angry at the original developer.\n",
      "created_at": "2016-08-19T13:45:40Z",
      "updated_at": "2016-08-19T13:45:40Z"
    },
    {
      "author": "small1",
      "author_association": "NONE",
      "body": "@alekratz this is not a Linux problem. This is a problem on Windows at the moment and will be on all the others is the aliases is not removed.  I did battle this on Windows machines. If you are used to curl on other platforms and you start using it on windows. Ending up with invoke-webrequest is very confusing. \n",
      "created_at": "2016-08-19T13:45:42Z",
      "updated_at": "2016-08-19T13:45:42Z"
    },
    {
      "author": "alekratz",
      "author_association": "NONE",
      "body": "@small1 thanks for clearing that up. I still think it's a _relatively_ good solution to preserve functionality; albeit broken functionality.\n",
      "created_at": "2016-08-19T13:48:54Z",
      "updated_at": "2016-08-19T13:48:54Z"
    },
    {
      "author": "traverseda",
      "author_association": "NONE",
      "body": "@alekratz \n\nFair enough. I was trying to explain where some of this hostility was coming from, as someone who participates in the open source community.\n\nBut it definitely wasn't making things _less_ hostile in here. I've retracted the comment.\n\nI still think that this is, at least in curls case, a bit potential trademark issue.\n",
      "created_at": "2016-08-19T13:49:45Z",
      "updated_at": "2016-08-19T14:02:52Z"
    },
    {
      "author": "agilob",
      "author_association": "NONE",
      "body": "@alekratz Completely agree, but I'm sure they didn't make the decision on open-sourcing it in one day, they took a lot of preparations and it's just strange that such **fundamental** programs like curl and wget were not tested. And as @bagder says, if that's old issue with PowerShell, I'm sure @jpsnover or others at MS were aware of it.\n",
      "created_at": "2016-08-19T13:50:50Z",
      "updated_at": "2016-08-19T13:54:00Z"
    },
    {
      "author": "waynebloss",
      "author_association": "NONE",
      "body": "Half the people here are just haters and you're stinking up the place. Go away. You're not here to use PowerShell, so what do you care?\n",
      "created_at": "2016-08-19T13:51:43Z",
      "updated_at": "2016-08-19T13:51:43Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "We can't change what decisions were made in the past - no matter how much we want to and bring good reasons to the table about how ill conceived a thought it has now become to have done it - If I had been involved back then  (though was blissfully unaware of PowerShell, curl and a considerable amount of IT at the time) and as a lot of you guys have mentioned as well i would have opposed it as it makes for a now poor UX for anyone used to curl & the *nix aliases\n\nThough if your writing a script to be used on someone elses machine you can place any code like\n\n``` powershell\ncd Alias:\\ ; Remove-item curl,wget\n```\n\nRight at the beginning of the script which stops the issue.\n\nThat said the team have put the governance in place for the right reasons and this is still only the first 24 hours of this repo being public so there will be things like this that The PowerShell Team will need to evaluate in bigger depth for the wider perspective other than this seemingly small change.\n\nAlso remember this is very new territory for Microsoft full stop so there are going to be inherent bumps in the initial weeks & months whilst there is adaptation to it.\n\nThings like this from the older releases will also be easily missed whilst newer stuff is fresher in the memory.\n\nI for one though am really excited to see all the enthusiasm even with the difference in opinions and hope that continues beyond this change.\n",
      "created_at": "2016-08-19T13:53:52Z",
      "updated_at": "2016-08-19T13:53:52Z"
    },
    {
      "author": "Secretmapper",
      "author_association": "NONE",
      "body": "@trumbitta Where did they say they won't play ball? What their saying is a discussion should be started around it, which should happen anyway in any sort of breaking change. It sort of confuses me that **developers** are bashing microsoft for this, you'd think developers would be the ones that would understand most of this.\n\nCan we please keep the discussion civil and move forward with discussing **solutions**? The suggestion of having a \"Remove-All-Aliases-That-Are-Linux-Commands\" command seems to be the easiest and straightforward solution to this (with the aliased linux commands later being deprecated)\n",
      "created_at": "2016-08-19T13:54:22Z",
      "updated_at": "2016-08-19T13:54:22Z"
    },
    {
      "author": "rafa2000",
      "author_association": "NONE",
      "body": "This is how embracing and extinguishing Linux/Unix works. Just hijack all command names accumulated for more than 40 years in the body and soul of the Unix system. What should be next, what would do most damage to users that are for the first time looking to use Windows as another quasi Unix machine. How about cut, grep, diff, find? The solution using 'Remove Item-Alias:curl' and 'Remove Item-Alias:wget' are the most appropiate to fix it temporarily, but it should be the other way around, like: 'Add Item-Alias:wget:microsoft-wget' if we need to add commands replaced, in a honest way, by Microsoft. Thanks and please disregard any words that seem harsh.\n",
      "created_at": "2016-08-19T13:54:44Z",
      "updated_at": "2016-08-19T13:55:09Z"
    },
    {
      "author": "11mariom",
      "author_association": "NONE",
      "body": "Wait, what - aliases are available also in scripts? Who the hell did it this way?\n\nWhat happens if I realias existing command to something else and launch script? Think of (do not know how in powershell syntax it is):\n\n``` bash\nalias ls = 'rm -rf /'\n```\n\nOr something less dangerous - just add some default options, and script could break up\u2026\nAliases should not affect scripts. Never.\n",
      "created_at": "2016-08-19T13:56:58Z",
      "updated_at": "2016-08-19T14:00:05Z"
    },
    {
      "author": "BillBarnhill",
      "author_association": "NONE",
      "body": "On one hand the Microsoft reps on here seem to be trying to work with the community to open up a dialogue on how to best address this issue.\n\nOn the other hand, as pointed out by other commenters, PowerShell is using a name that is not theirs.\n\nI will point out the copyright...\n\"COPYRIGHT AND PERMISSION NOTICE\n\nCopyright (c) 1996 - 2016, Daniel Stenberg, daniel@haxx.se, and many contributors, see the THANKS file.\n\nAll rights reserved.\n\nPermission to use, copy, modify, and distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.\"\n\nI am not a lawyer, but it seems to me in my opinion that in using the software's name without attribution would constitute a copyright violation. Even adding the attribution now might not negate the violation (any lawyers feel free to weigh in), so I would think a reasonable approach would be deprecating them with a warning and apology in a new PowerShell release and update now, then removing them in a subsequent update in 6 months.\n",
      "created_at": "2016-08-19T13:57:40Z",
      "updated_at": "2016-08-19T13:57:40Z"
    },
    {
      "author": "trumbitta",
      "author_association": "NONE",
      "body": "@Secretmapper to me \"play ball\" means \"Yes sir, you're right. And because I agree you're right, I'm on it.\"\n\nNot: \"Yeah, well, we'll talk about talking about it...\"\n\nBut english is not my native language, so I may be confusing the meaning of some words I read in this topic.\n",
      "created_at": "2016-08-19T14:00:24Z",
      "updated_at": "2016-08-19T14:00:24Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "Also for clarity there is a discussion on aliases #929 already so if we could all direct chatter about aliases to that open issue it would be good\n",
      "created_at": "2016-08-19T14:00:30Z",
      "updated_at": "2016-08-19T14:00:30Z"
    },
    {
      "author": "traverseda",
      "author_association": "NONE",
      "body": "I'll be a lot happier when I see an RFC.\n",
      "created_at": "2016-08-19T14:05:01Z",
      "updated_at": "2016-08-19T14:05:01Z"
    },
    {
      "author": "kgrossjo",
      "author_association": "NONE",
      "body": "Just for the record, I use \"ls\" (the alias) very regularly in PowerShell, because I have a Unix background and typing \"ls\" seems more natural to me.  It trips me up from time to time that \"ls\" in PowerShell has different functionality than \"ls\" on Unix.  But it turned out to be convenient.\n\nSo I don't agree with those commenters who say that providing these aliases has been a bad thing across the board.  I agree with respect to wget and curl, but not with respect to all aliases.\n",
      "created_at": "2016-08-19T14:08:34Z",
      "updated_at": "2016-08-19T14:08:34Z"
    },
    {
      "author": "raincoats",
      "author_association": "NONE",
      "body": "On this topic, and on the broader PowerShell community, I have a few issues with the RFC System. You see, I recetly tried registering the domain name \"dads.webcam\", however, it was already taken.\n",
      "created_at": "2016-08-19T14:10:12Z",
      "updated_at": "2016-08-19T14:10:12Z"
    },
    {
      "author": "georgestephanis",
      "author_association": "NONE",
      "body": "Well, the HackerNews crew is here in full effect, it seems.\n\nHonestly, my preferred resolution would be to keep the aliases, but ... sort of as an 'alias of last resort' -- if there is anything else that can handle a `wget` or a `curl` command or whatever -- use that.  Please!  But if nothing else can handle the command, fall back to the alias, to provide at least some utility instead of a 'command not available'.\n",
      "created_at": "2016-08-19T14:10:19Z",
      "updated_at": "2016-08-19T14:10:19Z"
    },
    {
      "author": "Chaz6",
      "author_association": "NONE",
      "body": "As an end-user of Powershell I support this pull request. These aliases should never have existed in the first place.\n",
      "created_at": "2016-08-19T14:10:19Z",
      "updated_at": "2016-08-19T14:10:19Z"
    },
    {
      "author": "okket",
      "author_association": "NONE",
      "body": "Please don't call it 'shell' on *nix when you alias standard commands to internal functionality.\n",
      "created_at": "2016-08-19T14:10:19Z",
      "updated_at": "2016-08-19T14:11:38Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "Why not have two config files; one that aliases the unix commands; but are not included in unix builds?\n",
      "created_at": "2016-08-19T14:11:06Z",
      "updated_at": "2016-08-19T14:11:06Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "Again - can we move discussions about Aliases to #929 (an open issue for Aliases)\n",
      "created_at": "2016-08-19T14:12:30Z",
      "updated_at": "2016-08-19T14:12:30Z"
    },
    {
      "author": "alekratz",
      "author_association": "NONE",
      "body": "@georgestephanis for clarity, are you suggesting that if a 'curl' or 'wget' executable exists somewhere in the path, to use those first, and to fall back to aliases when they don't exist? If that's what you're saying, I support that solution.\n",
      "created_at": "2016-08-19T14:13:08Z",
      "updated_at": "2016-08-19T14:13:08Z"
    },
    {
      "author": "DrPizza",
      "author_association": "NONE",
      "body": "This is a long-standing PowerShell issue. I complain that it has no command comparable to cmd's `dir` or even to `ls`. The response, every single time, is \"but there's an alias!\".\n\nAliases are not and have never been a solution to this problem. The `dir` and `ls` aliases do not provide the functionality that `dir` and `ls` provide. The same is true for the `wget` and `curl` aliases.\n\nThe entire approach to the aliases needs to be rethought, and that will mean breaking changes.\n",
      "created_at": "2016-08-19T14:15:16Z",
      "updated_at": "2016-08-19T14:15:16Z"
    },
    {
      "author": "ummahusla",
      "author_association": "NONE",
      "body": "![200_s](https://cloud.githubusercontent.com/assets/2536096/17812614/ba657976-661f-11e6-9f2e-32afe51a4224.gif)\n",
      "created_at": "2016-08-19T14:15:19Z",
      "updated_at": "2016-08-19T14:15:19Z"
    },
    {
      "author": "ygra",
      "author_association": "NONE",
      "body": "@alekratz That would make scripts behave strangely on systems that have native programs on the PATH that conflict with PowerShell's aliases. Scripts should usually not use aliases, but let's face it, no one follows that rule.\n",
      "created_at": "2016-08-19T14:17:12Z",
      "updated_at": "2016-08-19T14:17:12Z"
    },
    {
      "author": "godeater",
      "author_association": "NONE",
      "body": "As a long time user of Powershell, I also support @bagder 's pull request for this issue. Having these aliases baked into powershell is annoying, and I have to remember to remove them from the environment on every new machine I come to. \n\nIt's possible that this would be a breaking change to a percentage of scripts already used out there - but that's what user comms are for. When you release a change that removes them - put a note to that effect in the release notes - that's what they're for.\n",
      "created_at": "2016-08-19T14:22:07Z",
      "updated_at": "2016-08-19T14:22:07Z"
    },
    {
      "author": "alekratz",
      "author_association": "NONE",
      "body": "@ygra I see, thanks for pointing that out. And I'm going to do as @kilasuit requested and move this discussion to the Alias issue :)\n",
      "created_at": "2016-08-19T14:22:10Z",
      "updated_at": "2016-08-19T14:22:10Z"
    },
    {
      "author": "kgrossjo",
      "author_association": "NONE",
      "body": "Just for the record, I use \"ls\" (the alias) very regularly in PowerShell, because I have a Unix background and typing \"ls\" seems more natural to me.  It trips me up from time to time that \"ls\" in PowerShell has different functionality than \"ls\" on Unix.  But it turned out to be convenient.\n\nSo I don't agree with those commenters who say that providing these aliases has been a bad thing across the board.  I agree with respect to wget and curl, but not with respect to all aliases.\n",
      "created_at": "2016-08-19T14:33:52Z",
      "updated_at": "2016-08-19T14:33:52Z"
    },
    {
      "author": "rafa2000",
      "author_association": "NONE",
      "body": "@trumbita The system does not allow me to thumb up your comment. There are a couple more good comments that have the thumb up option blocked. Do you know why is this happening?\n\n---\n\nFixed: It seems it was a glitch that comes and go. Maybe the connection becomes slow or something. Thanks @naeemsarfraz.\n",
      "created_at": "2016-08-19T14:35:27Z",
      "updated_at": "2016-08-19T15:37:38Z"
    },
    {
      "author": "naeemsarfraz",
      "author_association": "NONE",
      "body": "@rafa2000 use the \"add your reaction\" option located at the top right hand side of your comment\n",
      "created_at": "2016-08-19T14:37:47Z",
      "updated_at": "2016-08-19T14:37:47Z"
    },
    {
      "author": "kmatt",
      "author_association": "NONE",
      "body": "@lzybkr > Those aliases have existed for multiple releases, so removing them would be a breaking change.\n\nThis would be a reason not to adopt PS across multiple platforms, with the release of PS for Linux. \n",
      "created_at": "2016-08-19T14:37:57Z",
      "updated_at": "2016-08-19T14:37:57Z"
    },
    {
      "author": "rafa2000",
      "author_association": "NONE",
      "body": "@alekratz: Can you just link to this thread in the 'Alias' section. Just think that when people look up about reasons why 'wget' and 'curl' don't work in Powershell, this is where they will follow, and not a parent 'Alias' discussion. This is not an 'Alias' discussion, it is about why the 'wget' and 'curl' names are hijacked.\n",
      "created_at": "2016-08-19T14:38:24Z",
      "updated_at": "2016-08-19T14:41:57Z"
    },
    {
      "author": "J0s3f",
      "author_association": "NONE",
      "body": "The proper solution is to remove all aliases in the next build but provide a script that restores the aliases and can be enabled globally on systems with broken scripts. \n\nAdditionally for current versions on Windows I'd suggest pushing updates that emit warnings on all aliases used in scripts. \n",
      "created_at": "2016-08-19T14:38:55Z",
      "updated_at": "2016-08-19T14:38:55Z"
    },
    {
      "author": "m13253",
      "author_association": "NONE",
      "body": "Reference @11mariom :\n\n> Wait, what - aliases are available also in scripts? Who the hell did it this way?\n\nMany users set `alias rm='rm -i -v'` and `alias ls='ls -l -h'`.\nIf aliases are also available in scripts, then every script using `rm` or `ls` will not work as intended.\nThe same script may generate different results on different machines. Developers and users may be confused about this behavior.\n",
      "created_at": "2016-08-19T14:44:16Z",
      "updated_at": "2016-08-19T14:44:16Z"
    },
    {
      "author": "induane",
      "author_association": "NONE",
      "body": "This is a reasonable case for deprecation work.\n\nStep 1. Insert deprecation warning messages anytime a *nix alias is accessed.\nStep 2. Stable Release (A) Version with deprecation warnings. Include information on what to use in place of the aliases.\nStep 3. Stable Release (B) Version - includes deprecation warnings and optional flag to disable *nix aliases (option on powershell binary? Env Variable? ) \nStep 4. Stable Release (C) Version where *nix aliases are no longer default. Included option to enable legacy behavior (option on powershell binary? Env Variable? )\n\nThis can continue for several releases until the legacy behavior is finally removed as optional at a date that is planned and well publicized thus giving persons ample time to adjust their scripts to compensate.\n",
      "created_at": "2016-08-19T14:45:55Z",
      "updated_at": "2016-08-19T14:45:55Z"
    },
    {
      "author": "DrakonKyrios",
      "author_association": "NONE",
      "body": "Using a depreciation -> remove would be  a sound approach also, it seems these alias were added for sysAdmins that work with both environments to be comfortable, but if you use any of the aliases once, you know they aren't the same, it's obvious and shouldn't be confusing.  \n",
      "created_at": "2016-08-19T14:46:53Z",
      "updated_at": "2016-08-19T14:49:11Z"
    },
    {
      "author": "ahmgeek",
      "author_association": "NONE",
      "body": "haters will hate. \nGood job Microsoft for the openness initiation. and sorry MS folks, i's' just sad to see you being hated just because MS haters.\nhumanity will never change. \n",
      "created_at": "2016-08-19T14:52:04Z",
      "updated_at": "2016-08-19T14:52:04Z"
    },
    {
      "author": "moshev",
      "author_association": "NONE",
      "body": "@induane There's also the way CMake and Perl do feature opt-in - by specifying against which release the script was written. So you'd put \"Use PowerShell-1.whatever;\" at the top and that would turn on/off defaults for that release.\n",
      "created_at": "2016-08-19T14:52:43Z",
      "updated_at": "2016-08-19T14:52:43Z"
    },
    {
      "author": "m13253",
      "author_association": "NONE",
      "body": "`Invoke-WebRequest` does not support resuming and consumes too much memory so it can not be used to download large files. Therefore people intend to install \"real\" `curl` on a Windows machine (See the [Win32/Win64 section](https://curl.haxx.se/download.html))\n\nI think there are (at least) 3 solutions:\n\n1) Remove `curl` and rewrite `wget` (no more RAM-eating). Because people use `curl` not only to download files, but also to perform other types of network requests. `wget` is always used as a download tool. If Microsoft could provide a fully functional `wget`, we are happy to use it.\n\n2) Remove `curl` and remove `wget`. Linux users have better ones, Windows users can't rely on them (too much RAM, to little features). Why not remove them?\n\n3) Rewrite `curl` and `wget` as two functions, that will try to search for a `curl` in `%PATH%` first, then fallback to `Invoke-WebRequest`.\n",
      "created_at": "2016-08-19T14:54:16Z",
      "updated_at": "2016-08-19T14:54:16Z"
    },
    {
      "author": "ForNeVeR",
      "author_association": "NONE",
      "body": "@moshev slightly offtopic, but there's already this mechanism: https://technet.microsoft.com/en-us/library/hh847765.aspx\n",
      "created_at": "2016-08-19T14:54:57Z",
      "updated_at": "2016-08-19T14:54:57Z"
    },
    {
      "author": "agjs",
      "author_association": "NONE",
      "body": "Not sure why at least geek community can't get along. Now when we have native Ubuntu shell in Windows, you could either remove all of these features all together or optionally include a flag to completely exclude them. Becoming super hard to have an adult discussion with people who are not taking all the crap too personally. \n",
      "created_at": "2016-08-19T14:59:13Z",
      "updated_at": "2016-08-19T14:59:59Z"
    },
    {
      "author": "bmercernccer",
      "author_association": "NONE",
      "body": "This would not be a copyright issue, but a trademark one, and the curl command is not trademarked.\nThere's a trademark on Curl by an unrelated software company. \n\nMicrosoft's original intentions were good, but based on the flawed assumption that curl and wget are Linux commands. In fact they are actually cross-platform tools which happen to be widely used and commonly available on Linux distros. \n\nCurl is probably one of the most cross-platform packages there is, it's available for pretty much any OS you can name, including VMS, Irix, and DOS. \n\nIt's unfortunate that this happened, but Microsoft is an oil tanker, not a speedboat. It's impossible for them to do anything quickly, due to simple inertia. \n\nI'm irritated by this problem too, but we need to stay civil and focus on the situation, not the people trying to solve it.\n",
      "created_at": "2016-08-19T15:02:12Z",
      "updated_at": "2016-08-19T15:02:12Z"
    },
    {
      "author": "justjanne",
      "author_association": "NONE",
      "body": "One option would be to make the aliases only enabled if a specific Registry Key is set, and to present an option if the user wants to set that key the next time they start powershell (with a default of aliases being unavailable)\n",
      "created_at": "2016-08-19T15:03:58Z",
      "updated_at": "2016-08-19T15:03:58Z"
    },
    {
      "author": "AldoMX",
      "author_association": "NONE",
      "body": "Too many people are not getting the big picture here, this is not your typical Linux project where an upgrade breaks many of your existing code, this is a project from the userland of Windows, where backwards compatibility is taken seriously and people expect legacy code to remain consistent and run without many changes.\n\nActing like a rude brat won't achieve anything but to close this discussion, there is a process to follow whether you like it or not, complaining about the process just adds noise and makes it harder to cherry-pick the good suggestions.\n\nThis is not the place to complain, this is the place to collaborate and contribute, if you want to complain go back to Reddit or Hacker News.\n\nA workaround was provided, if you really use PowerShell, add these to your profile:\n\n```\nRemove-Item Alias:Curl\nRemove-Item Alias:WGet\n```\n\nIf you don't like what you see, come back a year later, it is likely that most of the issues that add friction to Linux users will be addressed.\n",
      "created_at": "2016-08-19T15:05:22Z",
      "updated_at": "2016-08-19T15:05:22Z"
    },
    {
      "author": "ketsuban",
      "author_association": "NONE",
      "body": "There's an awful lot of discussion in this issue considering the very first non-robot reply was a reasonable response that this is too large a change to go through as a simple pull request and indicated the RFC repository as the correct way to go about championing this cause. I wonder if people would be so indignant if this was the Rust project rather than Powershell, considering their procedures appear at this point to be much the same.\n",
      "created_at": "2016-08-19T15:08:34Z",
      "updated_at": "2016-08-19T15:08:34Z"
    },
    {
      "author": "bklebe",
      "author_association": "NONE",
      "body": "As I understand it, the issues with Linux have already been addressed? As discussed on the other thread? That being said, this whole thing is very Microsoft from beginning to end, not in the EEE sense but in the sense that there are people in this thread who seem to misunderstand the basic premise of why this is wrong.\n\n> If you don't like what you see, come back a year later, it is likely that most of the issues that add friction to Linux users will be addressed.\n\nI've been doing this with Windows as an ecosystem for ~10 years now? Given that AFAICT this is already fixed on other platforms and backwards compatibility is the lifeblood of Microsoft I'm doubtful that this will be fixed meaningfully in the near future. The thread up to this point does little to change that suspicion.\n",
      "created_at": "2016-08-19T15:10:57Z",
      "updated_at": "2016-08-19T15:10:57Z"
    },
    {
      "author": "1RedOne",
      "author_association": "CONTRIBUTOR",
      "body": "MS likely can't redeploy binaries like curl. They're on record saying that they investigated this in the early days of PowerShell and being unable to track down the original writers of some nix tools lead to them writing their own. \n",
      "created_at": "2016-08-19T15:13:50Z",
      "updated_at": "2016-08-19T15:13:50Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Wow, great discussion!\n\nSorry didn't read all the comments, but skimmed thru most of them. \nOne thing I noticed is that not everybody on the same page about scope of the proposed changes.\n\nJust to recap: on linux, on the latest pre-release build (6.0.0-alpha.9) **there is no collision between any unix tools and PS aliases**. The right thing on linux is **already done**. This change is windows-only.\n",
      "created_at": "2016-08-19T15:16:54Z",
      "updated_at": "2016-08-19T15:16:54Z"
    },
    {
      "author": "balefrost",
      "author_association": "NONE",
      "body": "@tomer I believe that the Linux subsystem on Win10 is siloed from the regular Windows system. So, AFAIK, you can't just run ELF binaries directly from cmd, nor can you start Windows processes from Bash. And certainly, PowerShell aliases are going to be limited to PowerShell sessions. \n\nI don't think these PowerShell aliases are going to cause any problems for people using WSL. And I could be wrong, but I don't think the ELF binaries will be available directly from PowerShell. \n",
      "created_at": "2016-08-19T15:17:44Z",
      "updated_at": "2016-08-19T15:17:44Z"
    },
    {
      "author": "theRealDrumBum",
      "author_association": "NONE",
      "body": "I think that attitude demonstrates how microsoft will miserably fail at open source / mulitplatform. This is the epoch of changing that approach, it will mean some backwards incompatibility to move forward.\n",
      "created_at": "2016-08-19T15:32:11Z",
      "updated_at": "2016-08-19T15:32:11Z"
    },
    {
      "author": "KexyBiscuit",
      "author_association": "NONE",
      "body": "Specifically, this Pull Request is about **Windows PowerShell**.\n\nI'm against this, because wget or curl on **Windows PowerShell** is object oriented, which means it works totally differently from UNIX ones. In **PowerShell** (on Windows/Linux/OS X...), no default alias like this is provided, so it won't affect Linux users. Change the alias in **Windows PowerShell** will change users' lifestyle. (PowerShell cmdlets' names are really long!)\n\n`wget bing.com | select StatusCode`\n\nImpressive on **Windows PowerShell**.\n\nAny doubt? Check the terminology list out. https://blogs.msdn.microsoft.com/powershell/2016/08/18/powershell-on-linux-and-open-source-2/\n\n**PowerShell**, which runs on Windows, Linux and OS X, is based on CoreCLR, not suitable for this pull request.\n**Windows PowerShell**, which is a Windows built-in component, is based on .NET Framework, suitable for this pull request.\n",
      "created_at": "2016-08-19T15:32:37Z",
      "updated_at": "2016-08-19T15:32:37Z"
    },
    {
      "author": "induane",
      "author_association": "NONE",
      "body": "@moshev that's actually an interesting way of handling things. I usually personally prefer to go the route of careful and planned deprecation then removal. There is certainly a case to be made for backwards compatibility and maybe that's the route to go for powershell.\n\nWhat you're basically proposing is akin to api versioning. An interesting idea. I personally favour deprecation in part because I like deleting code, and over time it lessens the burden of maintenance. Microsoft not being me probably has the resources to handle a lot of that maintenance so maybe for them it wouldn't be a big deal.\n\nStill, no API should have to live with it's mistakes eternally. There are responsible ways for Microsoft to remove the aliases that aren't going to cause horrifying harm to their user base; this thread really should be about the options for fixing this problem. There is an awful lot of anger and suspicion here which seems kind of pointless. Also sometimes I think people just don't like having their ideas shot down. Learn the important parts of being a developer:\n1. Learn from others ideas \n2. Your needs and/or ideas are not paramount\n3. You don't speak for everyone\n4. You're not the best (unless you really somehow are)\n5. Don't get attached to your code\n",
      "created_at": "2016-08-19T15:33:27Z",
      "updated_at": "2016-08-19T15:33:27Z"
    },
    {
      "author": "hemanth",
      "author_association": "NONE",
      "body": "![image](https://cloud.githubusercontent.com/assets/18315/17815104/7841d34c-6650-11e6-9939-3ed5de414970.png)\n",
      "created_at": "2016-08-19T15:34:21Z",
      "updated_at": "2016-08-19T15:34:21Z"
    },
    {
      "author": "winningallthetime",
      "author_association": "NONE",
      "body": "What baffles me here is that most people here think they're better than Microsoft. _Microsoft._ They basically defined the modern OS - I think if anyone knows how to run an open source project, it's them.\n",
      "created_at": "2016-08-19T15:36:09Z",
      "updated_at": "2016-08-19T15:36:09Z"
    },
    {
      "author": "omgbox",
      "author_association": "NONE",
      "body": "those PowerShell tools are useless against a hardcore UNIX basement dweller . They need Holy water, Metal Cross and Wooden stakes\n",
      "created_at": "2016-08-19T15:40:05Z",
      "updated_at": "2016-08-19T15:40:05Z"
    },
    {
      "author": "theRealDrumBum",
      "author_association": "NONE",
      "body": "@winningallthetime Maybe a generational thing... I've never really thought of Microsoft as being a technical powerhouse... then again I entered my tech career in the early 2000's; the weren't really relevant. I guess my exposure was ME, XP, and chronic blue screens, bloated OS, horrible registry issues. \n",
      "created_at": "2016-08-19T15:46:30Z",
      "updated_at": "2016-08-19T15:46:30Z"
    },
    {
      "author": "jozefizso",
      "author_association": "NONE",
      "body": "As Windows administrator using PowerShell for managing I would really like to not have those alias available by default. Having wanna-be PS commands aliased this way cause huge frustration for maintaining scripts as people tend to use them in good faith it will behave like UNIX utils. It's even worse when somebody actually has those tools installed as native EXEs on Windows.\n",
      "created_at": "2016-08-19T15:51:25Z",
      "updated_at": "2016-08-19T15:51:25Z"
    },
    {
      "author": "m13253",
      "author_association": "NONE",
      "body": "I support the alias of `wget` but not `curl`.\n`Wget` is purely a download \"utility program\", while `curl` is an \"application program\".\n\n`Curl` is the command-line interface (CLI) of a library `libcurl`. Therefore you can use the command \"curl\" to invoke all the features and functions of `libcurl`. (Not only downloads!)\n\nThe same things apply to `FFmpeg` and `libavformat/libavcodec`. The former is the CLI of the latter library.\n\nWindows PowerShell will never `alias FFmpeg=\"Windows Media Player\"`. (Although they can both play MP3s and MP4s)\n\nSo why `alias curl=\"Invoke-WebRequest\"`?\n",
      "created_at": "2016-08-19T15:57:05Z",
      "updated_at": "2016-08-19T16:01:22Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "@KexyBiscuit I think you missed the point entirely. This pull request (and you can check the code) _is_ for Powershell, and not \"Windows Powershell\".\n",
      "created_at": "2016-08-19T15:58:11Z",
      "updated_at": "2016-08-19T15:58:11Z"
    },
    {
      "author": "jpsnover",
      "author_association": "CONTRIBUTOR",
      "body": "> @KexyBiscuit I think you missed the point entirely. This pull request (and you can check the code) is for Powershell, and not \"Windows Powershell\".\n\nThanks for pointing that out.  I had missed that.\njps [MSFT]\n",
      "created_at": "2016-08-19T16:07:22Z",
      "updated_at": "2016-08-19T16:07:22Z"
    },
    {
      "author": "omrsafetyo",
      "author_association": "NONE",
      "body": "@jpsnover \n\nFirstly, thank you for your contribution in this thread, you're handling this quite well. \n\nIt seems like it should be fairly trivial to fix this in a fairly consistent manner.\n\nPS > get-command ls -All\n\n```\nCommandType     Name                                               ModuleName\n-----------     ----                                               ----------\nAlias           ls -> Get-ChildItem\nApplication     ls.exe\n```\n\nSo Powershell already has a means of identifying if there are multiple commands/functions/aliases of the same name present on the system.\n\nI should think one possible solution would be that in the begin block of a Commandlet where a commonly used alias has been provided, that the system run a check using get-command to see if another variation of that command is present.  \n\nAs another possibility or extension, you could add a ParameterSet for the commands that includes the native parameters for the original application. Curl being a rather decent example, there really isn't a lot of collisions between the actual Curl command, and the PS Invoke-WebRequest, even including command aliases.  \n\n```\n    PS > (get-command invoke-webrequest).Parameters.Keys | % {\n    >>  [PSCustomObject] @{\n    >>     Name = $_\n    >>     Aliases = (get-command invoke-webrequest).Parameters[$_].Aliases\n    >>  }\n    >> }\n    >>\n\n    Name                                                                       Aliases\n    ----                                                                       -------\n    UseBasicParsing                                                            {}\n    Uri                                                                        {}\n    WebSession                                                                 {}\n    SessionVariable                                                            {SV}\n    Credential                                                                 {}\n    UseDefaultCredentials                                                      {}\n    CertificateThumbprint                                                      {}\n    Certificate                                                                {}\n    UserAgent                                                                  {}\n    DisableKeepAlive                                                           {}\n    TimeoutSec                                                                 {}\n    Headers                                                                    {}\n    MaximumRedirection                                                         {}\n    Method                                                                     {}\n    Proxy                                                                      {}\n    ProxyCredential                                                            {}\n    ProxyUseDefaultCredentials                                                 {}\n    Body                                                                       {}\n    ContentType                                                                {}\n    TransferEncoding                                                           {}\n    InFile                                                                     {}\n    OutFile                                                                    {}\n    PassThru                                                                   {}\n    Verbose                                                                    {vb}\n    Debug                                                                      {db}\n    ErrorAction                                                                {ea}\n    WarningAction                                                              {wa}\n    ErrorVariable                                                              {ev}\n    WarningVariable                                                            {wv}\n    OutVariable                                                                {ov}\n    OutBuffer                                                                  {ob}\n    PipelineVariable                                                           {pv}\n\n```\n\nIt seems you could add a parameterset that includes all of the Curl parameters, and since those parameters are currently not even valid for the command, you could simply check $PSCmdlet.ParameterSetName to see if they are passing parameters for the real command, then run the Get-Command -all to resolve it.  \n",
      "created_at": "2016-08-19T16:26:14Z",
      "updated_at": "2016-08-19T16:26:14Z"
    },
    {
      "author": "jpsnover",
      "author_association": "CONTRIBUTOR",
      "body": "@omrsafetyo \nwow - I was actually chewing on both of those as possibilities.\nThe third one I'm thinking about (my current favorite) is something along the lines of @codeape2 comment about \"Remove-All-Aliases-That-Are-Linux-Commands\" that you could put into your profile.\n\nHaving agreed to do something to address this - I don't feel that this is time critical and we have some time to weight the pros/cons of alternatives to get it right.\n\njps[MSFT]\n",
      "created_at": "2016-08-19T16:38:20Z",
      "updated_at": "2016-08-19T16:38:20Z"
    },
    {
      "author": "senthilnayagam",
      "author_association": "NONE",
      "body": "Dear Microsoft, bundle curl and wget in the next patch / major release. Your Historical blunder can be forgiven and you can make new friends in open source\n",
      "created_at": "2016-08-19T16:38:40Z",
      "updated_at": "2016-08-19T16:38:40Z"
    },
    {
      "author": "warrenrumak",
      "author_association": "NONE",
      "body": "Lots of people around here are promoting ideas of /actually/ breaking backward compatibility, for the sake of /theoretically/ improving cross-platform compatibility.\n\nHow about no.  \n\nPowershell was /never/ designed to behave like a Bourne shell derivative with a GNU toolset underneath, and anyone who expects it to start behaving like one 10 years on is being unrealistic.  Aliases preempt disk files.  That's the design.\n\nIt isn't just curl and wget, either.  There's also diff, start, kill, ps, cat, tee, and some others.  These Powershell cmdlets all offer similar functionality to Unixy commands of the same name, but the inputs and outputs are completely different.  Command names are a starting point for humans to understand what a function does, not an iron-clad contract with perfect fidelity across all platforms.\n\nIf at some point in the future, Microsoft were to release an update to Server 2016 that disables Powershell aliases by default, I'm going to have hundreds of broken servers to contend with.  Microsoft's long-standing averseness to changing the behaviour of existing commands and APIs is exactly why so much software written 10, 20, 30 years ago continues to work in Windows 10.  It's also why Powershell hasn't replaced cmd.exe.  People depend on this ongoing commitment to backwards compatibility for business continuance.  For all we know, removing aliases could cause random pieces of Exchange Server or some other critical business software to stop running or quietly behave incorrectly!\n\nAnd yet there are people here who are demanding that I accept that risk **because they want to type 'curl' instead of 'curl.exe'**?  Madness.  Madness.\n\nWith that said, I believe adding a \"-NoAliases\" parameter to powershell.exe would be a good way to provide an alias-free environment for those who do not like this feature of Powershell.\n",
      "created_at": "2016-08-19T16:42:48Z",
      "updated_at": "2016-08-19T17:06:45Z"
    },
    {
      "author": "guitarrapc",
      "author_association": "NONE",
      "body": "Please point it out if I'm wrong, this issue is for \"PowerShell\" not \"Windows PowerShell\" right?\n\n> @KexyBiscuit I think you missed the point entirely. This pull request (and you can check the code) is for Powershell, and not \"Windows Powershell\".\n\nhttps://github.com/PowerShell/PowerShell/pull/1901#issuecomment-241058231\n\n> Just to recap: on linux, on the latest pre-release build (6.0.0-alpha.9) there is no collision between any unix tools and PS aliases. The right thing on linux is already done. This change is windows-only.\n\nhttps://github.com/PowerShell/PowerShell/pull/1901#issuecomment-241046950\n\n> Your change would only affect Windows PowerShell (the version of PowerShell that ships in Windows). > Those aliases have existed for multiple releases, so removing them would be a breaking change.\n> \n> We are rejecting this PR as it introduces \"Unacceptable Changes\", see our breaking change contract.\n> \n> If you disagree with this resolution, you will need to start an RFC\n> \n> Note that our RFC process currently states only team members may create a new RFC. Our intent is to open this up to the community at large, we'll be updating that repo very soon to clarify.\n\nhttps://github.com/PowerShell/PowerShell/pull/1901#issuecomment-240840910\n\nIf it is PowerShell,\n1. It's just released and already removed alias for ls or other Linux tools. \n2. [Reason declined this proposal](https://github.com/PowerShell/PowerShell/pull/1901#issuecomment-240894298) will not make sense for just released product.\n\n> @JohnMHarrisJr\n> \n> nobody uses \"curl\" or \"wget\" to mean Invoke-WebRequest\n> It is important to be precise.\n> I suspect that you are correct.\n> I know that I don't know that.\n> We just don't have telemetry that tells us that.\n> PowerShell is installed on many many hundreds of millions of machines and potentially over a billion so I can almost guarantee you that \"nobody uses ...\" is an incorrect assertion.\n> Continuing to be precise - we should do something here. We just need to think it through.\n\nIs my understanding wrong?\n",
      "created_at": "2016-08-19T16:56:32Z",
      "updated_at": "2016-08-19T17:00:15Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "@warrenrumak there is no `curl.exe` on Linux.  It is just `curl` which makes it a bit tougher to get to the native executable.  BTW PowerShell Core is already a massive breaking change.  Many of the commands that exist in PowerShell today are not in PowerShell Core because either A) the underlying .NET Core doesn't support them or B) the alternative platforms don't support them. \n\nFrankly, I think PowerShell Core is an opportunity to fix a number of PowerShell issues - one of which is the removal of \"transition\" aliases defined by default e.g. remove curl, wget but leave in iwr, irm.  For the PowerShell faithful - the team could always provide a way to easily re-enable these aliases via profile tricks.  And we (the community and tools like PowerShell Script Analyzer) have been telling you - do NOT use aliases in your scripts!  Aliases are an interactive use tool to help folks be more productive at the CLI and reduce RSI issues.\n\nMany folks on Windows, who have large sets of scripts that need to not break, can continue to run the PowerShell \"desktop\" edition.  That edition should strive to remain backwards compatible. \n\nThis does leave us with a diverging desktop vs core edition issue.  I don't think the changes discussed here (removal of some built-in aliases) are any more insurmountable then the inherent breaking changes between desktop and core.  If you're a PowerShell scripter who wants to write scripts that can target desktop _and_ core, you have a bit more work to do.  And hopefully, tools will be able to help spot issues.\n",
      "created_at": "2016-08-19T16:58:53Z",
      "updated_at": "2016-08-20T00:13:40Z"
    },
    {
      "author": "daveloyall",
      "author_association": "NONE",
      "body": "At least the PS team gets to drink at work today.\n",
      "created_at": "2016-08-19T17:07:40Z",
      "updated_at": "2016-08-19T17:07:40Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "What I don't understand is the constant idea that `wget` and `curl` are \"UNIX tools\". Both `wget` and `curl` have native on even Windows for a very long time now (longer than Powershell has been a thing, if I'm not mistaken).\n",
      "created_at": "2016-08-19T17:13:18Z",
      "updated_at": "2016-08-19T17:13:18Z"
    },
    {
      "author": "omrsafetyo",
      "author_association": "NONE",
      "body": "@jpsnover \nI'm actually not a fan of the Remove-All-Aliases-That-Are-Linux-Commands idea.  There are a few reasons for this, but most importantly is that this would inherently lead to less-portable scripting practices.\n\nAs of right now if you choose to use wget.exe or curl.exe on a Windows system, you're forced to use explicitly call those.  If I'm allowed to turn off Unix aliases in my profile, and then write my scripts with the assumption that it will be run on a system with a similar setup, that would lead to less-explicit coding, and when I publish my code to github for sharing, someone can download a copy and run into errors, because unless they read the README, they won't realize that they need to also turn off Unix aliases.\n\nWe would then have to rely on the developer to ensure that the Remove-All-Unix-Aliases function is called in the top of the script (and ensure it only works for the duration of the script) where we intend to have those aliases replaced.  And if that is the preference on how to do this, using Remove-Alias explicitly for the commands you intend to use at the top of the script is IMHO a better solution than a blanket script to remove everything to begin with.\n\nRemove-Item Alias:Curl\nRemove-Item Alias:WGet\n\nInsert that at the top of my script, and we've worked around the issue as elegantly as we can, aside from explicitly calling the command with the .exe extension.\n\nEither way you look at it, I agree with anyone saying that we should be using best practices in scripts, such that removing an alias like wget or curl would not be a breaking-change, but just a learning curve for those who are actually at the command line.  That's obviously not the case, so the best solution is to modify the search order when a learning curve alias is being utilized to evaluate it more closely. \n",
      "created_at": "2016-08-19T17:28:50Z",
      "updated_at": "2016-08-19T17:28:50Z"
    },
    {
      "author": "knyzorg",
      "author_association": "NONE",
      "body": "Why weren't the real functions built-in in the first place?\n",
      "created_at": "2016-08-19T17:55:02Z",
      "updated_at": "2016-08-19T17:55:02Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for all the discussion so far, everyone. I'm still going through it, but I'm definitely in the \"let's solve this problem generally\" camp. As in, make some cmdlet, environment variable, or preprocessor definition that will allow scripts to run in one \"mode\" or the other. But we do want to do want to be thoughtful before make any changes that might break our Windows customers who may/may not have been relying on this for the past 10 odd years. (And, as a clarification, this PR _is_ targeting _Windows PowerShell_, as in the one using the non-Core .NET Framework.)\n\nAlso, as a quick reminder, we will be enforcing the [Microsoft Open Source Code of Conduct](http://opensource.microsoft.com/codeofconduct/). This thread has been mostly civil and on-topic, and we appreciate the healthy discussion so far. :) \n",
      "created_at": "2016-08-19T18:03:13Z",
      "updated_at": "2016-08-19T18:03:13Z"
    },
    {
      "author": "drysart",
      "author_association": "NONE",
      "body": "@jpsnover\nSeems like an approach like \"Remove-All-Aliases-That-Are-Linux-Commands\" makes sense, but I feel it needs to be larger in scope than the working name would suggest.  This issue is symptomatic of a larger concern about being able to make improvements to PowerShell without breaking backward compatibility _in general_, not just limited to aliases or per-platform issues.\n\nI'd suggest that a script should be able to declare for which version of PowerShell it was intended.  That a `Use-Version 4` command or metadata declaration at the top of a script would opt you into a runtime environment tailored for that version, and that runtime environment then need not necessarily be backward compatible; and that this could impact more than just aliases but even extending to parsing changes or other behavioral changes, similar to how Perl's `use v5.10;` statement is used to opt into possibly breaking features.\n",
      "created_at": "2016-08-19T18:04:51Z",
      "updated_at": "2016-08-19T18:04:51Z"
    },
    {
      "author": "omrsafetyo",
      "author_association": "NONE",
      "body": "@drysart I'm not sure if you realize be there is already a \"requires\"  functionality available:\nhttps://technet.microsoft.com/en-us/library/hh847765.aspx\n\nIt's certainly a little different than what you've described, in that if you require version 5 for instance, the script simply won't run on v4 or below.\n",
      "created_at": "2016-08-19T18:12:06Z",
      "updated_at": "2016-08-19T18:12:06Z"
    },
    {
      "author": "drysart",
      "author_association": "NONE",
      "body": "@omrsafetyo  `#Requires` only prevents script execution if prerequisites aren't met, it doesn't alter the runtime environment the script executes in.  Perhaps extending it to do that for new requirement specifications and higher versions makes more sense than adding a separate declaration for it.\n",
      "created_at": "2016-08-19T18:14:21Z",
      "updated_at": "2016-08-19T18:14:21Z"
    },
    {
      "author": "memiux",
      "author_association": "NONE",
      "body": "If you need to use PowerShell (or anything from Microsoft for that matter) you're screwed anyway. :kissing:\n",
      "created_at": "2016-08-19T18:35:06Z",
      "updated_at": "2016-08-19T18:35:06Z"
    },
    {
      "author": "spdustin",
      "author_association": "NONE",
      "body": "@drysart, it sounds like you're suggesting the Powershell equivalent of _Quirks Mode_ - I don't know that we could expect that _future_ major releases of Powershell would be installed (or would be allowed to install) side-by-side with older versions, and so it would mean bundling an interpreter for the \"Version 4\" environment expected by the script that has `Use-Version 4` as its prolog.\n\nIf that approach was taken (i.e. the _idea_ of `Use-Version`), I'd rather see an approach like that used by Python's `from future import [new functionality]`.\n\nIt could be used for all deprecated aspects in the next major version that **_will be removed or made breaking**_ in a following version. Something like: `Import-Module Future.RemoveAliases.Net.Http` where **`Future`** contains exported module members (sub-modules, I'll call them) for opting in to _future_ breaking changes **_now**_, **`RemoveAliases`** includes sub-modules for removing various sets of previously defined \"helper\" aliases, **`Net`** includes sub-modules for removing network-related aliases, and **`Http`** removes the `curl` and `wget`aliases.\n\nThat's my $0.02, anyway. That would let you combine the best of all worlds. @jpsnover's current favorite idea would just get a different syntax, and we could add `Import-Module Future.RemoveAliases` to a profile to remove all aliases, others can use `Import-Module Future.RemoveAliases.Net.Http` to remove the `curl` and `wget` aliases, and _you_ could add `Import-Module Future` into yours, and live life always on the bleeding edge! \ud83d\ude00\n",
      "created_at": "2016-08-19T18:40:02Z",
      "updated_at": "2016-08-19T18:43:36Z"
    },
    {
      "author": "spdustin",
      "author_association": "NONE",
      "body": "> `Import-Module Future.RemoveAliases.Net.Http`\n\nAs an addendum, I suggested `Import-Module Future` here because using `Import-Module` already has the baked-in functionality to import all the exported member modules when you use a top-level module.\n",
      "created_at": "2016-08-19T19:01:25Z",
      "updated_at": "2016-08-19T19:02:00Z"
    },
    {
      "author": "drysart",
      "author_association": "NONE",
      "body": "That's a reasonable approach as well; I suppose it would depend how comfortable the concept of a deprecate-remove cycle for removing functionality is.  I think I'd probably tend to lean away from that myself since so many scripts run in non-interactive contexts where deprecation warnings would get overlooked until suddenly a few versions down the line your cron jobs stop working.\n\nSupporting old runtime profiles via something like `Use-Version 4` in perpetuity probably doesn't scale indefinitely either, but at least it puts the burden of figuring out the problems associated with maintaining it in one centralized place where active development is taking place rather than splitting it across every sysadmin on the planet.\n",
      "created_at": "2016-08-19T19:22:05Z",
      "updated_at": "2016-08-19T19:22:05Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "> {remove aliases} ... this would inherently lead to less-portable scripting practices.\n\n@omrsafetyo [Don't use aliases](https://github.com/PowerShell/PSScriptAnalyzer/blob/development/Rules/AvoidAlias.cs) in your scripts.  You're just asking for trouble.  People do change or remove the default aliases and that will mess up your scripts.\n",
      "created_at": "2016-08-19T19:48:20Z",
      "updated_at": "2016-08-19T19:48:53Z"
    },
    {
      "author": "omrsafetyo",
      "author_association": "NONE",
      "body": "@rkeithhill \n\n> Either way you look at it, I agree with anyone saying that we should be using best practices in scripts, such that removing an alias like wget or curl would not be a breaking-change, but just a learning curve for those who are actually at the command line. That's obviously not the case, so the best solution is to modify the search order when a learning curve alias is being utilized to evaluate it more closely.\n\nAs you can see, I agree :)\n\nI was just saying that people are obviously using aliases, and that will never change for everyone across the board (hence why this becomes a breaking change).  I have just recently ran my first script through PSScriptAnalyzer (800 lines of code) and removed all errors/warnings.  Honestly, just doing this once is a learning experience everyone should do, even if they don't intend to use it in all their scripts.  You learn a lot.  But personally, I'm doing my best to start running all of my scripts through PSScriptAnalyzer, and use best practices as often as possible.\n",
      "created_at": "2016-08-19T20:47:34Z",
      "updated_at": "2016-08-19T20:47:34Z"
    },
    {
      "author": "jrmoserbaltimore",
      "author_association": "NONE",
      "body": "All, I'll have to side with @omrsafetyo on this one.  Simply improving Windows Powershell's curl and wget built-ins should provide an immediate improvement for most users.\n\nEven Busybox has a terrible wget implementation; intersecting Busybox wget with GNU wget gets us these:\n- --spider\n- -c, --continue\n- -q, --quiet\n- -P\n- -O\n- -U, --user-agent\n\nNote that wget and busybox disagree on other options (-s for spider, --output-document or --output-file for -O).\n\nMight I suggest the following changes to the wget alias, perhaps adding it as an extension of Invoke-WebRequest rather than an alias:\n- -O accepted as a synonym for -OutFile\n- -U and --user-agent accepted as a synonym for -UserAgent\n- -c and --continue implemented as in wget\n- -q, --quiet for quiet operation\n\nThis would retain 100% compatibility with wget as an alias for Invoke-WebRequest, and immediately implement the above four options to extend PowerShell wget into something resembling the most-common options used in GNU Wget.  It would at least be no more of an offense than Busybox, least of all if you somehow added --spider (-s) later.\n\nWhen invoked as curl, you could attempt a similar strategy.\n\nThis change _will not break things_, and will give an immediate improvement in compatibility.  In the future, Microsoft may declare that these commands will wrap Invoke-WebRequest with a compatibility profile to implement the wget and curl interfaces, and that they are deprecated as an Invoke-WebRequest alias; if not, then these changes still allow writing for a common intersection.\n\nIn a more slightly-off-topic direction...\n\n@bagder I know you're not trying to be rude, and your behavior is more familiar and frank than all that; I'd like to point out that @joeyaiello and @jpsnover had a better opening, by simple virtue of being calm and, mostly, just by framing from a sympathetic point-of-view (this is a common and well-documented technique).\n\nNo doubt it's more fun to read level-headed, polite, but frank discussions than it is to read the sterile, diplomatic mumbo-jumbo that represents universally-effective technique.  As much as this pleases me, I feel you'd be served well by Dale Carnegie's famous book, _How to Win Friends and Influence People_; the audiobook is even a fantastic performance (ignore the \"In the Digital Age\" version), and the material is well-presented and highly effective.  It appears to me you're interested in keeping things civil, and so I thought I'd share.\n",
      "created_at": "2016-08-19T21:06:45Z",
      "updated_at": "2016-08-19T21:06:45Z"
    },
    {
      "author": "Chaz6",
      "author_association": "NONE",
      "body": "It is amusing to see people defending backwards compatibility, when on the other hand Microsoft just broke millions of higher end webcams with the latest Windows 10 Anniversary update. https://www.thurrott.com/windows/windows-10/76719/microsoft-broken-millions-webcams-windows-10-anniversary-update\n",
      "created_at": "2016-08-19T21:25:58Z",
      "updated_at": "2016-08-19T21:25:58Z"
    },
    {
      "author": "easuter",
      "author_association": "NONE",
      "body": "@gevaerts said:\n\n> If removing these aliases (retroactively, if you want to clean up your act you have to remove this from all versions in which this was ever released) breaks things for some people, **then you can go and send people out to help them fix their issues**. You knew it was a hostile action, you broke things, you fix them.\n\nThis is so unrealistic I cringed just reading it. I'm not sure what planet you live on, but you need to return to earth, this isn't how the world works.\n\nBreaking changes aren't something to be taken lightly, and it is laughably ridiculous to suggest that MS should send out an army of engineers to fix broken PS scripts all over the world.\n",
      "created_at": "2016-08-19T21:33:08Z",
      "updated_at": "2016-08-19T21:33:08Z"
    },
    {
      "author": "saladproblems",
      "author_association": "NONE",
      "body": "I really think the addition of a -NoAliases parameter on PowerShell.exe is the most reasonable short-term fix, assuming this isn't a show stopper. Let these people work without aliases without having to depend on the presence of a profile or a preamble on every script, and leave the rest of our scripts untouched.\n\nI'm really pleased with how reasonable Mr. Snover and MS have been on this topic.\n",
      "created_at": "2016-08-19T21:33:28Z",
      "updated_at": "2016-08-19T21:33:28Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@bluefoxicy - great feedback on how to make Invoke-WebRequest more useful. Would you like to open an issue? If not, I'm happy to.\n",
      "created_at": "2016-08-19T21:46:25Z",
      "updated_at": "2016-08-19T21:46:25Z"
    },
    {
      "author": "coreh",
      "author_association": "NONE",
      "body": "I really like the idea of a parameter to provide a fix to the issue on the short/medium term, and to give time for existing code to adapt to the change. \n\nHowever, won't the name `-NoAliases` be potentially misleading? (Since it doesn't entirely disable support for aliases, only disables some of the default ones?) Maybe something like `-NoDefaultAliases` or `-NoCompatibilityAliases`?\n\nFurthermore, could PowerShell follow the git approach when there are breaking changes, and provide deprecation/configuration warnings on interactive terminals? Like when the behavior for `git add` changed for removed files, we got a warning asking you to configure your environment, and telling the default behavior would change in a future release.\n\nOverall kudos to Microsoft for OpenSourcing and porting this over, and providing a good path to integration/compatibility on *NIX environments moving forward\n",
      "created_at": "2016-08-19T22:11:45Z",
      "updated_at": "2016-08-19T22:11:45Z"
    },
    {
      "author": "saladproblems",
      "author_association": "NONE",
      "body": "Oh, I'm sure they'd iterate on it and come up with a better solution, I just liked the concept of it.\n\nI've certainly seen the deprecation warnings in the VMWare modules. I don't now how elegantly those are written, so maybe that's not a practice MS would want to mimic, but I do think it could one part of an implementation solution.\n\n---\n\nFrom: Marco Aur\u00e9lio notifications@github.com\nSent: Friday, August 19, 2016 5:12 PM\nTo: PowerShell/PowerShell\nCc: saladproblems; Comment\nSubject: Re: [PowerShell/PowerShell] initialsession: remove curl and wget aliases (#1901)\n\nI really like the idea of a parameter to provide a fix to the issue on the short/medium term, and to give time for existing code to adapt to the change.\n\nHowever, won't the name -NoAliases be potentially misleading? (Since it doesn't entirely disable support for aliases, only disables some of the default ones?) Maybe something like -NoDefaultAliases or -NoCompatibilityAliases?\n\nFurthermore, could PowerShell follow the git approach when there are breaking changes, and provide deprecation/configuration warnings on interactive terminals? Like when the behavior for git add changed for removed files, we got a warning asking you to configure your environment, and telling the default behavior would change in a future release.\n\nOverall kudos to Microsoft for OpenSourcing and porting this over, and providing a good path to integration/compatibility on *NIX environments moving forward\n\n## \n\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHubhttps://github.com/PowerShell/PowerShell/pull/1901#issuecomment-241148341, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ARh-S45zUSRtHLrUo5VDYL34FTDSXSUvks5qhiozgaJpZM4Jn1fs.\n",
      "created_at": "2016-08-19T23:02:29Z",
      "updated_at": "2016-08-19T23:02:29Z"
    },
    {
      "author": "kuldeepdhaka",
      "author_association": "NONE",
      "body": "I have another idea that can keep backward compatibility + fix the problem.\ndo something that \"intelligently\" check if the user is trying to run the wget/curl(.exe) OR Microsft version of \"incomatible alias wget/curl\".\n\nThis can be done via testing argument. (easy since Microsoft didnt made the alias compatible)\n\n**Rough code:**\n\n```\nalias curl=\"intelligent-fix-curl\"\n\n# to keep track of what the user is interested in\nwebrequest-was-invoked-last-time = false\n\ndef intelligent-fix-curl() {\n    invoke-webrequest = false\n\n    if (user-provided-no-argument) {\n        invoke-webrequest = webrequest-was-invoked-last-time\n    } else if (user-probebly-providing-webrequest-style-argument) {\n        invoke-webrequest = true\n    }\n\n    webrequest-was-invoked-last-time = invoke-webrequest\n\n    if (invoke-webrequest) {\n        PRINT \"WARNING: alias curl=Invoke-WebRequest has been depriciated\"\n        CALL Invoke-WebRequest with ARGUMENTS\n    } else {\n        CALL curl.exe with ARGUMENT\n    }\n}\n```\n\n**IMO**,\nIf something else exists before (in the case curl/wget), assume that user want the existing one.\ndesiging something that don't play cool (incomatible) with the exisiting community is seen frowning.\nbe it project name, be it utility name, be it anything. Please dont try to create confusion.\n\nAlso,\nInstead some global option should have been provided (in the first place) if user explicitly allow such confusing alias.\nWe expect the user to take the final decision. \n\nEdit1: (code) Added warning for using WebRequest\n",
      "created_at": "2016-08-19T23:09:15Z",
      "updated_at": "2016-08-20T04:12:08Z"
    },
    {
      "author": "LogoiLab",
      "author_association": "NONE",
      "body": "The proper thing to do is to implement the aliases to match the original software exactly.\n",
      "created_at": "2016-08-19T23:48:46Z",
      "updated_at": "2016-08-19T23:48:46Z"
    },
    {
      "author": "kuldeepdhaka",
      "author_association": "NONE",
      "body": "@LogoiLab Yes, one can take that path too...\n",
      "created_at": "2016-08-19T23:51:26Z",
      "updated_at": "2016-08-19T23:51:26Z"
    },
    {
      "author": "peter-dolkens",
      "author_association": "NONE",
      "body": "@BillBarnhill - you're confusing copyright and trademark infringement.\n\nUnless there is a trademark on those names, there is no case.\n\nAdditionally, Microsoft is NOT publishing software with these names, so again, there is no case.\n\n@bluefoxicy - some great ideas, which I'm sure the team will take into consideration, along with some of the others here.\n\n@Chaz6 - what does this have to do with the issue being discussed - if you're just here to troll, go away.\n\nI'd suggest any script that executes these commands in an interactive session be prompted for default behavior that lasts the duration of the session, along with instructions on how to manually bind or unbind the aliases, which would prevent the warnings.\n\nBackground services would continue functioning as they are now for at least one release, but would log a message in the event log.\n\nThe default behavior can then be switched after an appropriate amount of time.\n",
      "created_at": "2016-08-20T03:53:03Z",
      "updated_at": "2016-08-20T03:53:03Z"
    },
    {
      "author": "zaxebo1",
      "author_association": "NONE",
      "body": "solution\nstep1) enhance curl, wget implementation of powershell as featurefull as native wget,curl\n\nstep2)  most important:\n provide one **alternative syntax in powershell to forcefully call the native**  executable. just as an example:\nwget  .......                                               #this should call the alias, as earlier\n**native.wget   ........                                #this should call the OS native wget always**\n",
      "created_at": "2016-08-20T03:59:47Z",
      "updated_at": "2016-08-20T04:01:54Z"
    },
    {
      "author": "peter-dolkens",
      "author_association": "NONE",
      "body": "@jpsnover What if the \"Remove-Unix-Aliases\" command was more of a sandbox function - so any code in the executing script would be affected, but no child scripts would be affected, and behavior would revert once the script had finished executing...\n\nAdd a similar method for \"Add-Unix-Aliases\" and a warning (not an error or interrupt) to any call to these aliases  while NOT in one of these special contexts.\n\nEventually, all scripts _should_ start with either an add, or a remove command, and powershell can progress with switching to native unix commands.\n",
      "created_at": "2016-08-20T04:03:24Z",
      "updated_at": "2016-08-20T04:03:24Z"
    },
    {
      "author": "KexyBiscuit",
      "author_association": "NONE",
      "body": "@JohnMHarrisJr Check out the code, line 5205. It's under `#if !CORECLR`, which means Windows PowerShell, even not PowerShell on Windows. And @lzybkr also pointed out that it would only affect Windows PowerShell. Feel free to prove me wrong.\n",
      "created_at": "2016-08-20T04:40:27Z",
      "updated_at": "2016-08-20T04:40:27Z"
    },
    {
      "author": "m13253",
      "author_association": "NONE",
      "body": "> @JohnMHarrisJr Check out the code, line 5205. It's under #if !CORECLR, which means Windows PowerShell, even not PowerShell on Windows. And @lzybkr also pointed out that it would only affect Windows PowerShell. Feel free to prove me wrong.\n\nNo one is talking about PowerShell on Linux. We are just talking about Windows PowerShell (or PowerShell on all platforms).\nThe issue was opened by the original author of curl.\nJust imagine you made a famous app, and then Microsoft made another app, using the same name, but with less functionality and more RAM consuming, with an excuse of \"providing a familiar shortcut\", but just to prevent users from using the real, full-featured app.\n",
      "created_at": "2016-08-20T04:45:24Z",
      "updated_at": "2016-08-20T04:47:21Z"
    },
    {
      "author": "KexyBiscuit",
      "author_association": "NONE",
      "body": "> > @JohnMHarrisJr Check out the code, line 5205. It's under #if !CORECLR, which means Windows PowerShell, even not PowerShell on Windows. And @lzybkr also pointed out that it would only affect Windows PowerShell. Feel free to prove me wrong.\n> \n> No one is talking about PowerShell on Linux. We are just talking about Windows PowerShell.\n> The issue was opened by the original author of curl.\n> Just image you made a famous app, and then Microsoft made another app, using the same name, but less functionality and more RAM consuming, with an excuse of \"providing a familiar shortcut\", but just to prevent users from using the real, full-featured app.\n\nJust copy a reply.\n\n> @ BillBarnhill - you're confusing copyright and trademark infringement.\n> Unless there is a trademark on those names, there is no case.\n> Additionally, Microsoft is NOT publishing software with these names, so again, there is no case.\n",
      "created_at": "2016-08-20T04:48:20Z",
      "updated_at": "2016-08-20T04:49:50Z"
    },
    {
      "author": "m13253",
      "author_association": "NONE",
      "body": "> Unless there is a trademark on those names, there is no case.\n\nExcept as contained in this notice, the name of a copyright holder shall not\nbe used in advertising or otherwise to promote the sale, use or other dealings\nin this Software without prior written authorization of the copyright holder.\n\n-- BSD License\n\nMS used the name of \"curl\" to promote its PowerShell.\n\n> Additionally, Microsoft is NOT publishing software with these names, so again, there is no case.\n\nCmdLet is also a kind of software.\n",
      "created_at": "2016-08-20T04:49:42Z",
      "updated_at": "2016-08-20T04:54:26Z"
    },
    {
      "author": "be5invis",
      "author_association": "NONE",
      "body": "@zaxebo1 #1975 \nPerhaps the best solution is that... PowerShell implements `curl` command as an alias to a function that uses libcurl.net (or @masroore\u2019s [CurlSharp](https://github.com/masroore/CurlSharp)) and supports BOTH PS and `curl.exe`-ish parameters, and provides a strongly-typed result...\n",
      "created_at": "2016-08-20T04:53:31Z",
      "updated_at": "2016-08-20T05:04:39Z"
    },
    {
      "author": "KexyBiscuit",
      "author_association": "NONE",
      "body": "> > Unless there is a trademark on those names, there is no case.\n> \n> Except as contained in this notice, the name of a copyright holder shall not\n> be used in advertising or otherwise to promote the sale, use or other dealings\n> in this Software without prior written authorization of the copyright holder.\n> -- BSD License\n\nIt's MIT License.\n\nUsing curl in PowerShell as an alias is promoting PowerShell? As far as Microsoft do not advertise curl as a feature of PowerShell, it's OK then. Maybe we need to pass this pull request to legal department.\n\nI'm not going to discuss about the name, trademark or copyright things any more. It's fuzzy.\n",
      "created_at": "2016-08-20T05:07:11Z",
      "updated_at": "2016-08-20T05:08:25Z"
    },
    {
      "author": "alahijani",
      "author_association": "NONE",
      "body": "Checking to see if an external program is installed sounds like a good idea... until you realize some of its implications. For example `sc` now means `sc.exe`, not `Set-Content`. Even `where` would now refer to `where.exe` instead of `Where-Object`!\n\nI like the idea of having an unambiguous synatx for this. And I think the best candidate is to extend the \"drive\" mechanism already built in to Powershell. We already have a drive named `Alias:`. Adding a `Path:` drive would allow us to say `Alias:curl` to mean the internal version and `Path:curl` to mean an executable named `curl` found on the system `$Env:Path`.\n",
      "created_at": "2016-08-20T07:28:34Z",
      "updated_at": "2016-08-20T07:29:39Z"
    },
    {
      "author": "antony",
      "author_association": "NONE",
      "body": "There is a very poignant issue here that seems to get a lot of mentions but deserves is own issue. \n\nThat issue is that scripts should not observe aliases. Ever! It introduces mutable state to every script! \n\nI've never used powershell, and I don't intend to, for many reasons, but I appreciate the value of it, so definitely break backwards compatibility to progress forward, here. \n",
      "created_at": "2016-08-20T08:49:58Z",
      "updated_at": "2016-08-20T08:49:58Z"
    },
    {
      "author": "ygra",
      "author_association": "NONE",
      "body": "@antony _Every_ part of the environment introduces mutable state into every script. Starting from slightly incompatible implementations of default commands in Unix shell scripts (e.g. GNU vs. BSD), environment variables, current directory, etc.\n\nWhat would your course of action be here? Don't observe aliases in scripts, okay. But continuing from there?\n- Do the same for modules? Because in the past Pscx introduced an own, incompatible version of `Get-Random` which took precedence. You can work around that by fully-qualifying every single cmdlet you use, but that's quite a step further than just replacing aliases with their actual cmdlets.\n- Do the same for functions? Well, bummer, mkdir is no longer available, you have to use `New-Item -ItemType Directory` in that case. Or something as benign as `C:` in Windows PowerShell.\n- Don't observe `$Env:Path`. Because native commands could be different depending on which one is called depending on search order in `$Env:Path`.\n\nAll those things introduce failure points into a script based on the outside environment. At some point you have to concede and allow some of them because otherwise scripts would be utterly unusable.\n\n(Also I'd hate to no longer being able to do code golf in PowerShell. But that's a rather minor issue.)\n",
      "created_at": "2016-08-20T09:04:09Z",
      "updated_at": "2016-08-20T09:04:22Z"
    },
    {
      "author": "zaxebo1",
      "author_association": "NONE",
      "body": "@alahijani : I also proposed the same solution in my comment at https://github.com/PowerShell/PowerShell/pull/1901#issuecomment-241177205    (see step2 of my comment)\n\nbut you explained/put it forward in really better way in your comment at: https://github.com/PowerShell/PowerShell/pull/1901#issuecomment-241184943\n\nthumbs up  for your comment. That is the way ,the solution should be in this issue.\n",
      "created_at": "2016-08-20T09:20:51Z",
      "updated_at": "2016-08-20T09:21:24Z"
    },
    {
      "author": "ShinNoNoir",
      "author_association": "NONE",
      "body": "> They block use of the commonly used command line tools without providing even an attempt to offer the same functionality.\n\nBut is that really the case? You can still access programs like `wget`, albeit in a somewhat clunky way:\n\n```\nPS C:\\> & (gcm -CommandType App wget)\nwget: missing URL\nUsage: wget [OPTION]... [URL]...\n\nTry `wget --help' for more options.\n```\n",
      "created_at": "2016-08-20T09:41:55Z",
      "updated_at": "2016-08-20T09:41:55Z"
    },
    {
      "author": "zaxebo1",
      "author_association": "NONE",
      "body": "@ShinNoNoir :  \njust curious how to give \"commandline arguments to the app\" in your suggestion\nbash$ wget --help\nexecutes successfully\n\nPS C:\\> & (gcm -CommandType App wget )\nexecutes succesfully and as expected\n\n**BUT**\n**PS C:\\> & (gcm -CommandType App wget --help )**\n**gives ERROR on powershell layer**\n\n```\ngcm : The command could not be retrieved because the ArgumentList parameter \ncan be specified only when retrieving a single cmdlet or script.\nAt line:1 char:5\n+ & ( gcm -CommandType App wget --help  )\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : InvalidArgument: (wget:ApplicationInfo) [Get-Com \n   mand], PSArgumentException\n    + FullyQualifiedErrorId : CommandArgsOnlyForSingleCmdlet,Microsoft.PowerShell.Commands.GetCommandCommand\n```\n\n**So what to do for passing \"--help\" argument to the wget executable via the gcm ????**\n",
      "created_at": "2016-08-20T11:02:51Z",
      "updated_at": "2016-08-20T11:05:15Z"
    },
    {
      "author": "ShinNoNoir",
      "author_association": "NONE",
      "body": "@zaxebo1 \n\nYou pass the arguments right after it, like so:\n\n```\nPS C:\\tmp>  & (gcm -CommandType App wget) http://google.com -O \"google.html\"\n--13:08:53--  http://google.com/\n           => `google.html'\nResolving google.com... done.\nConnecting to google.com[82.94.228.159]:80... connected.\nHTTP request sent, awaiting response... 302 Found\nLocation: http://www.google.nl/?gfe_rd=cr&ei=Qzq4V-XHIK3H8AfuiIHgBw [following]\n--13:08:53--  http://www.google.nl/?gfe_rd=cr&ei=Qzq4V-XHIK3H8AfuiIHgBw\n           => `google.html'\nResolving www.google.nl... done.\nConnecting to www.google.nl[74.125.136.94]:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: unspecified [text/html]\n\n    [ <=>                                 ] 11,137        10.62M/s\n\n13:08:53 (10.62 MB/s) - `google.html' saved [11137]\n\n```\n",
      "created_at": "2016-08-20T11:09:56Z",
      "updated_at": "2016-08-20T11:09:56Z"
    },
    {
      "author": "KexyBiscuit",
      "author_association": "NONE",
      "body": "@ShinNoNoir @zaxebo1 Just use `wget.exe`. It will work fine.\n",
      "created_at": "2016-08-20T13:10:19Z",
      "updated_at": "2016-08-20T13:10:19Z"
    },
    {
      "author": "taojoannes",
      "author_association": "NONE",
      "body": "Embrace. Extend. Extinguish. \n",
      "created_at": "2016-08-20T13:18:32Z",
      "updated_at": "2016-08-20T13:18:32Z"
    },
    {
      "author": "zaxebo1",
      "author_association": "NONE",
      "body": "@KexyBiscuit : in linux, there is no \"wget.exe\" , it is only \"wget\"   . I will like to write cross platform code code only.\n\n@ShinNoNoir : thanks a lot.  Your suggestion is a good cross-platform workaround for now.\n:-) For easiness in future , i will pray to God  that Powershell team accepts the suggestion of @alahijani  at https://github.com/PowerShell/PowerShell/pull/1901#issuecomment-241184943\n",
      "created_at": "2016-08-20T13:36:14Z",
      "updated_at": "2016-08-20T13:41:30Z"
    },
    {
      "author": "small1",
      "author_association": "NONE",
      "body": "How many times do we need to repeat that this is only aliases in Windows we \nare talking about.\n\nAnd it is only wget and curl.\n\nMost of the suggestions has been sad to say unrealistic or utterly complex \nand based on a fact that this commit will break stuff horribly.\n1. It will only break 2 aliases that should not ever have been implemented\n2. Thou shall not uses aliases within scripts EVER.\n\nThe only things that will break are scripts that are poorly written in the \nfirst place.\n\n/Johan\n\nOn August 20, 2016 15:36:41 zaxebo1 notifications@github.com wrote:\n\n> @KexyBiscuit : in linux, there is no \"wget.exe\" , it is only \"wget\"    :-(\n> \n> ## \n> \n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub:\n> https://github.com/PowerShell/PowerShell/pull/1901#issuecomment-241200515\n",
      "created_at": "2016-08-20T13:46:41Z",
      "updated_at": "2016-08-20T13:46:41Z"
    },
    {
      "author": "kuldeepdhaka",
      "author_association": "NONE",
      "body": "@taojoannes i feel **Embrace. Extend. Extinguish**. too **(atleast the original intent was)**.\nNow just the code is public.\nLets see how this sort out. \n",
      "created_at": "2016-08-20T13:59:52Z",
      "updated_at": "2016-08-20T13:59:52Z"
    },
    {
      "author": "yarons",
      "author_association": "NONE",
      "body": "What about adding a `builtin` equivalent command for PowerShell?\n",
      "created_at": "2016-08-20T14:11:52Z",
      "updated_at": "2016-08-20T14:11:52Z"
    },
    {
      "author": "small1",
      "author_association": "NONE",
      "body": "There is one that can do the same ... That is what the aliases curl and \nwget calls .. it is called invoke-webrequest ....\n\nAnd why rebuild the wheel when curl and wget can be installed natively on \nWindows? Or you can use invoke-webrequest if you don't need all that curl \nand wget provides.\n\nOn August 20, 2016 16:12:16 Yaron Shahrabani notifications@github.com wrote:\n\n> What about adding a `builtin` equivalent command for PowerShell?\n> \n> ## \n> \n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub:\n> https://github.com/PowerShell/PowerShell/pull/1901#issuecomment-241202253\n",
      "created_at": "2016-08-20T14:16:49Z",
      "updated_at": "2016-08-20T14:16:49Z"
    },
    {
      "author": "taojoannes",
      "author_association": "NONE",
      "body": "@kuldeepdhaka exactly, it's the legacy of that strategy lingering \n",
      "created_at": "2016-08-20T14:29:57Z",
      "updated_at": "2016-08-20T14:29:57Z"
    },
    {
      "author": "brabo",
      "author_association": "NONE",
      "body": "@kuldeepdhaka yeah, they are just trying to fuck with everyone. They do not suddenly \"love\" linux.\nThey did every effort to kill it and could not. Now they try to usurp to then kill it.\n",
      "created_at": "2016-08-20T14:31:11Z",
      "updated_at": "2016-08-20T14:31:11Z"
    },
    {
      "author": "Tarmean",
      "author_association": "NONE",
      "body": "Feels like this has blown up way more than it ought to.\n\nI actually have used wget as alias for invoke-webrequest before and can understand the original logic behind including it but definitely agree that it should not be default.\n\nUntil it is fixed it is possible to either remove the alias's or just use the freaking extension. curl.exe and wget.exe are longer but it is guranteed to work until this is fixed.\n\nThis will only break scripts on windows that use alias's which shouldn't be done anyway but it is still a breaking change. Adding an extra warning in case of missing executables might help.\n",
      "created_at": "2016-08-20T15:37:34Z",
      "updated_at": "2016-08-20T15:37:34Z"
    },
    {
      "author": "kuldeepdhaka",
      "author_association": "NONE",
      "body": "> Those were the business practices of Microsoft 10+ years ago, to take over entire corporations.\n\n@alekratz How **shamelessly** you are justifying the ill practises of Microsoft on public forum!!!\nBe it corporation or anything, monopoly is bad!\n",
      "created_at": "2016-08-20T15:48:55Z",
      "updated_at": "2016-08-20T15:49:13Z"
    },
    {
      "author": "coreh",
      "author_association": "NONE",
      "body": "I find this attitude not really conductive of anything. Yeah, Microsoft tried to outcompete Linux and mantain its dominance. That worked for some time and then the market and developer mindset shifted. It became clear that Open Source is a positive sum game, and developers were favoring open tools over proprietary ones. So Microsoft shifted its strategy accordingly. Corporations (like any large group) are not individuals and cannot be analyzed like that: leaderships change, the entire workforce changes and there are always dissenting voices and ideas.\n\nWhat does it even mean to \"usurp\" Linux? The MIT/BSD license gives us the ultimate control over what goes in our systems, if in the future Microsoft decided to make decisions that would not be beneficial to the ecosystem we could just fork the repo, and move on. \n\nFurthermore how is this issue even related to Linux directly? It could be argued that the original addition of the aliases was bad, but I genuinely can't see it as an \"embrace, extend, extinguish\" thing. I think they only wanted to provide convenience and familiarity to devs making the switch from *NIX environments.\n\nPowerShell has some great ideas on it, has received countless man hours of work and polish, and Microsoft is giving us all of that for free both as in beer and as in speech. Not being this hostile is the least we can do.\n",
      "created_at": "2016-08-20T15:49:01Z",
      "updated_at": "2016-08-20T15:49:01Z"
    },
    {
      "author": "jkinz",
      "author_association": "NONE",
      "body": "This is a common problem in software. Its an ordinary namespace collision.\n\nOpen sourcing powershell  moved it from a smaller namespace scope into a much larger one.  The global multi-platform command namespace.  \nUNIX, Linux and all the other platforms that use *NIX-clone commands, including  MS platforms, have been using these command for decades.  \n\nInevitably the resolution of collisions that result from a move from a smaller scope namespace into  larger one have the same solution:  The smaller namespace makes the changes needed to no longer conflict with the larger, more global namespace.  \n\nPro-tip, on *NIX and every other platform, using aliases in scripts has ALWAYS been discouraged in part because of naming collisions but also _because of the inherent security issues!_  Commands should be invoked by pathname. \n",
      "created_at": "2016-08-20T15:49:18Z",
      "updated_at": "2016-08-20T19:03:27Z"
    },
    {
      "author": "kuldeepdhaka",
      "author_association": "NONE",
      "body": "@coreh Atleast the _original_ intent was to `embrace, extend, extinguish`.\n\nMicrosoft could have provide configuration file or global option (and disabled by default). \n\nAlso, as you said\n\n> PowerShell has some great ideas on it, has received countless man hours of work and polish\n\nMicrosoft have alot of manpower, why didnt they provided such a configuration?!\n\nBTW, i dont want the **PowersHell** program, im happy with more capable ones.\n\n[though will never happen] What if bash does the same (hard wire it internally). will community accept that?\n\nIn Mono project case, it didn't let .NET do monopoly.\nProbebly, Microsoft release _PowersHell_ because of same reason.\nProbably, the intent is, since more functionally capable project are already there,  Microsoft can try to look good to public eye by releasing this and that would give more option to `embrace, extend, extinguish` since it will run on more platform.\n\n[BUT these are some possible reason, not reality - we don't know Microsoft intention]\n",
      "created_at": "2016-08-20T16:09:29Z",
      "updated_at": "2016-08-20T16:10:26Z"
    },
    {
      "author": "anderssonjohan",
      "author_association": "NONE",
      "body": "In others shells that are targeting cross-plat I have to carefully handle different versions of the same _externa_ command.\nJust take GNU date vs BSD date for example:\n\n```\nif [[ `uname` == \"Darwin\" ]]; then\n        filepattern=`date -v-1d +%y%m%d`\n    else\n        # GNU date\n        filepattern=`date -d '-1 day' +%y%m%d`\n    fi\n```\n\nBut this has nothing to do with the shell and so shouldn't PS alias be either. \nI would welcome a structure where I easily could use published \"dotfiles repos\" to import the aliases I need. I mean, in *sh worlds we have dotfiles that set up aliases, not removing aliases that were added by the shell. Please make Powershell less opioniated regarding default aliases.\n",
      "created_at": "2016-08-20T17:50:15Z",
      "updated_at": "2016-08-20T17:50:15Z"
    },
    {
      "author": "wbsdty331",
      "author_association": "NONE",
      "body": "Just Because PowerShell is Microsoft Open Source Project?\n",
      "created_at": "2016-08-20T18:56:06Z",
      "updated_at": "2016-08-20T18:56:06Z"
    },
    {
      "author": "Marqin",
      "author_association": "NONE",
      "body": "In unix bash if you don't want to use alias you can prefix the command with `\\`. Many sites that show some curl command to download their software lread show it with that `\\` (eg. `\\curl -sSL https://get.rvm.io`).\n\nThat way there is a way for script programmers to not use aliases and it doesn not break backwards compability.\n",
      "created_at": "2016-08-20T19:10:34Z",
      "updated_at": "2016-08-20T19:10:34Z"
    },
    {
      "author": "jrmoserbaltimore",
      "author_association": "NONE",
      "body": "This is still going?\n\nPeople, it's Powershell.  If you write a Powershell script, you can expect Powershell to behave as Powershell behaves.  It's not Bash.\n\nFurther, everyone is talking like wget and curl are Linux/Unix commands.  **They're not.**  Just installed Ubuntu?  Great.  Guess what?  The script you tried to run _failed_, because it called wget or curl--neither of which comes installed by default, _unlike with Powershell on Windows_.\n\nUsing wget or curl in your scripts is non-portable and unpredictable.  If you're on Alpine or in any initrd or other Busybox-based system, curl doesn't exist; wget has a restricted syntax; and there's a possibility wget isn't even compiled into Busybox.  If you're on a desktop or server system, wget and curl might not actually be installed.  If you're on Windows, wget or curl probably isn't there anyway.\n\nWhen you write a Powershell script to use wget or curl, **that script is non-portable** specifically because Powershell doesn't provide the wget or curl aliases on any platform other than Windows.  That's right:  Your script is more likely to work on Windows than Linux, unless you did something really bad like writing your script to target a utility _almost nobody has installed on Windows_--except, wait, it's available by default in Windows Powershell, and not in Linux unless specifically installed!\n\nI would say to _maximize_ cross-platform portability, Powershell on _Linux_ should check if wget is installed when you call wget and, if not, substitute the wget alias.  Currently, Powershell is broken cross-platform because it fails to provide wget and curl on non-Windows platforms, not because it provides them on Windows.\n",
      "created_at": "2016-08-20T19:20:14Z",
      "updated_at": "2016-08-20T19:20:14Z"
    },
    {
      "author": "small1",
      "author_association": "NONE",
      "body": "@bluefoxicy and you should not use curl and wget aliases in scripts anyway \nbecause they are not portable even between Windows installations because \nsomeone might have altered the aliases........\n\nWhen writing a script in any shell thou shall not use aliases.\n\n You should use invoke-webrequest that is portable in PowerShell.\n\nErgo. These two can be removed :) So bitching about that Linux don't have \nthem   installed by default and that the aliases should be on all platforms \nIs a bit stupid. ;)\n\nOn August 20, 2016 21:20:36 bluefoxicy notifications@github.com wrote:\n\n> This is still going?\n> \n> People, it's Powershell.  If you write a Powershell script, you can expect \n> Powershell to behave as Powershell behaves.  It's not Bash.\n> \n> Further, everyone is talking like wget and curl are Linux/Unix commands.  \n> **They're not.**  Just installed Ubuntu?  Great.  Guess what?  The script \n> you tried to run _failed_, because it called wget or curl--neither of which \n> comes installed by default, _unlike with Powershell on Windows_.\n> \n> Using wget or curl in your scripts is non-portable and unpredictable.  If \n> you're on Alpine or in any initrd or other Busybox-based system, curl \n> doesn't exist; wget has a restricted syntax; and there's a possibility wget \n> isn't even compiled into Busybox.  If you're on a desktop or server system, \n> wget and curl might not actually be installed.  If you're on Windows, wget \n> or curl probably isn't there anyway.\n> \n> When you write a Powershell script to use wget or curl, **that script is \n> non-portable** specifically because Powershell doesn't provide the wget or \n> curl aliases on any platform other than Windows.  That's right:  Your \n> script is more likely to work on Windows than Linux, unless you did \n> something really bad like writing your script to target a utility _almost \n> nobody has installed on Windows_--except, wait, it's available by default \n> in Windows Powershell, and not in Linux unless specifically installed!\n> \n> I would say to _maximize_ cross-platform portability, Powershell on _Linux_ \n> should check if wget is installed when you call wget and, if not, \n> substitute the wget alias.  Currently, Powershell is broken cross-platform \n> because it fails to provide wget and curl on non-Windows platforms, not \n> because it provides them on Windows.\n> \n> ## \n> \n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub:\n> https://github.com/PowerShell/PowerShell/pull/1901#issuecomment-241218587\n",
      "created_at": "2016-08-20T19:50:17Z",
      "updated_at": "2016-08-20T19:50:17Z"
    },
    {
      "author": "jrmoserbaltimore",
      "author_association": "NONE",
      "body": "@small1 Yes, and that may have more merit than what I said; in the same way, what I said has more merit than the entirety of this discussion.\n",
      "created_at": "2016-08-20T20:00:34Z",
      "updated_at": "2016-08-20T20:00:34Z"
    },
    {
      "author": "adbre",
      "author_association": "NONE",
      "body": "May I point out that many widely used programs introduce breaking changes from time to time.\nIn most cases they are avoided to begin with. But in some cases they simply makes sense.\nIn some cases it's easy to switch between a old and new behavior.\n\nGit is a great example. Well ahead of the next major release a warning is produced when using a given feature, informing the user that the default behavior of the given command will change in the next release and instructions how to stick to the old behavior or enable the new behavior immediately.\nSure, Git is open source and released \"as is\" and does not provide support like Microsoft does.\n\nBut there are reasonable limits for how long backward compability can be enforced.\nLessons should be learned to not repeat things like [why ASP.NET in 2016 has restricted filenames because of decisions made in the 1970s.](https://bitquabit.com/post/zombie-operating-systems-and-aspnet-mvc/).\n",
      "created_at": "2016-08-20T20:27:09Z",
      "updated_at": "2016-08-20T20:27:40Z"
    },
    {
      "author": "maxpoulin64",
      "author_association": "NONE",
      "body": "Obligatory relevant xkcd: https://xkcd.com/1172/\n",
      "created_at": "2016-08-20T20:37:35Z",
      "updated_at": "2016-08-20T20:37:35Z"
    },
    {
      "author": "shooshx",
      "author_association": "NONE",
      "body": "@adbre you are assuming that the output of the script goes to some console or is stored somewhere and that someone is going to read it. That may not be the case in many many scenarios.\n",
      "created_at": "2016-08-20T20:53:58Z",
      "updated_at": "2016-08-20T20:53:58Z"
    },
    {
      "author": "adbre",
      "author_association": "NONE",
      "body": "@shooshx I'm just saying that it's not unheard of to make breaking changes, and there are ways to ease in the change rather than doing it overnight.\n",
      "created_at": "2016-08-20T21:15:50Z",
      "updated_at": "2016-08-20T21:15:50Z"
    },
    {
      "author": "Meligy",
      "author_association": "NONE",
      "body": "I think it's good to remove the wget and curl tools. I was bitten by them before.\n\nHowever, this brings more questions. Should PS remove things like `ls` in particular?\n\nI don't have an answer to this one, but for removing curl and wget, I think the best way is to have another machine-wide install, like \"PowerShell Legacy Tools Compatibility Support\" (would ideally be better named maybe), which includes these tools back.by including them in default profile etc.\n\nThis way those who want to upgrade can have the 2 installs and their usual PowerShell. Eventually those tools can go through a deprecation cycle and then complete removal (or availability as 3rd party modules with manual install script). That could take years.\n\nOf course this adds a lot more work on the team, which may or may not be acceptable for the outcome, and there are definitely competing priorities as well, but it's a mere suggestion.\n\nThanks for opening the PowerShell source and support more OSes.\n",
      "created_at": "2016-08-20T23:19:58Z",
      "updated_at": "2016-08-20T23:19:58Z"
    },
    {
      "author": "kuldeepdhaka",
      "author_association": "NONE",
      "body": "@BiIIGates LOL, your account has no connection with Microsoft and \"Joined on 21 Aug 2016 \".\nFollowers 0, Starred 0, Following 0\nNice trick :P\n\nEDIT: in username \"BiIIGates\"   the two \"ll\" are actually I's as in Inkpot.\n",
      "created_at": "2016-08-21T04:13:49Z",
      "updated_at": "2016-08-21T04:16:54Z"
    },
    {
      "author": "jkinz",
      "author_association": "NONE",
      "body": "@winningallthetime\n\n> \"What baffles me here is that most people here think they're better than Microsoft. Microsoft. They basically defined the modern OS - I think if anyone knows how to run an open source project, it's them.\"\n\nThis comment demonstrates a lack of awareness about both the history of Computer Science:Operating  system development  and Open Source culture. \n\nMS products were known for decades as being the worst on the market.  They had only two marketable features: They were blessed as a standard by IBM and they were cheap.  This led to widespread adoption by businesses that were otherwise intimidated by technology. \n\nBill Gates openly claimed that both he and Steve Job's stole all their ideas for their respective GUI systems from Xerox.  \n\nGate's original DOS was purchased/licensed from another small company and he re-licensed it to IBM (in a very shrewd and lucrative deal. :-)  )  \n\nMS' \"NT\" OS was substantially (but not completely), a clone/re-write of VMS done by actual VMS engineers with the Windows GUI added on top.\n\nThe only things MS defined about modern OS was the race to the bottom for software quality,  how to steal intellectual property from other companies and how to violate anti-trust laws so grossly that the Federal government actually had to prosecute them for it. \n\nMicrosoft neither invented nor defined anything new about operating systems.   You have mistaken one business winning the race to the bottom for engineering prowess. \n\nPeople who actually know what they are talking about know that MS created almost nothing substantive except how to market insecure, buggy software. (They are excellent at copying and selling )\n\nIt is no wonder then why a free version of UNIX has almost completely replaced them in every new market and is slowly pushing them out of the markets they currently populate.   \n\nAccording to Gartner, the following is the worldwide device shipments (referring to wholesale) by operating system, which includes smartphones, tablets, laptops and PCs together.\n\n```\nAndroid     1.3 Billion  (54%)\nOthers      520 million  (21.6% ) \niOS         297 Mill(12.3%)\nWindows     283 Million  (11.7%)    \nOS X       21 million\n```\n\n(New markets - cell computing, dominated by the Android-Linux: 80-85%, IOS:10-15% \n\nTablets:   Andoid-Linux 68%, I-Pad 28%\n\nTop 500 Super computers: June 2016 - Linux; 497 out of 500,\n\n Cloud services - virtually all based on Linux , except, of course, the misbegotten MS cloud service which is failing in the market.\n\nGoogle, Amazon, Facebook, New York Stock Exchange, American Stock exchange, Yahoo, Most Fortune 500 Companies - all using Linux servers, some exclusively.\n\nRegarding MS and open source;     For the past 25 years MS has worked as hard as it can to oppose Open Standards and has actively denounced and disparaged Open Source.  And you think they are best suited to lead an Open Source Project?\n\nIts clear from the moribund orientation of the \"RFC\" process that MS has absolutely no idea at all how to do Open Source. \n\nWorse, the fact that they don't understand how to resolve a trivial namespace collision (fix it in the smaller scope) means they aren't that up on interoperability engineering.  Sadly, that is a a fatal flaw in Open Source. \n",
      "created_at": "2016-08-21T15:24:15Z",
      "updated_at": "2016-08-21T16:46:52Z"
    },
    {
      "author": "akalongman",
      "author_association": "NONE",
      "body": "@jkinz +1000\n",
      "created_at": "2016-08-21T16:21:25Z",
      "updated_at": "2016-08-21T16:21:25Z"
    },
    {
      "author": "ShinNoNoir",
      "author_association": "NONE",
      "body": "@jkinz \n\n> Its clear from the moribund orientation of the \"RFC\" process that MS has absolutely no idea at all how to do Open Source. \n\nThen tell us, \"how to do Open Source\" and forward your knowledge to other open source projects that encourage the practice of writing proposal documents.\n",
      "created_at": "2016-08-21T16:43:25Z",
      "updated_at": "2016-08-21T16:43:25Z"
    },
    {
      "author": "jkinz",
      "author_association": "NONE",
      "body": "@ShinNoNoir \n\nApparently you didn't read the post; \n\n> Worse, the fact that they don't understand how to resolve a trivial namespace collision (fix it in the smaller scope) means they aren't that up on interoperability engineering. Sadly, that is a a fatal flaw in Open Source. \n> As I said, this is trivial and the solution is well known to experienced engineers.  \n\nIt does not need an RFC. It simply needs to be done. \n\nIf you need an RFC procedure to decide if the obvious and \"well known for decades\" solution needs to be implemented, then you do not understand Open Source. \n\nWriting proposal documents is great for things that are not clearly obvious and have already been solved for decades. \n\nBut not everything needs one.   Leadership needs to lead. That means making appropriate engineering decisions quickly and without the friction that saps the community of energy and momentum.\n",
      "created_at": "2016-08-21T16:51:16Z",
      "updated_at": "2016-08-21T16:57:03Z"
    },
    {
      "author": "ShinNoNoir",
      "author_association": "NONE",
      "body": "@jkinz\n\nThen quoting you from an earlier post:\n\n> Commands should be invoked by pathname. \n\nNothing needs to be fixed then? If you want to use `wget` or `curl`, invoke it by their full path, since, hey, this is the obvious way to do it?\n",
      "created_at": "2016-08-21T17:01:41Z",
      "updated_at": "2016-08-21T17:01:41Z"
    },
    {
      "author": "jpsnover",
      "author_association": "CONTRIBUTOR",
      "body": "What is the commonly accepted open source practice for introducing a breaking change on a billion machines?\n\nI understand the frustration but realize this: the official release will not ship for a while so I feel no need to rush a fix before thinking it through. \n\nWe'll fix it and we'll be respectful of our customers as we do so. \n\nJPS - MSFT\n",
      "created_at": "2016-08-21T17:05:05Z",
      "updated_at": "2016-08-21T17:05:05Z"
    },
    {
      "author": "jpsnover",
      "author_association": "CONTRIBUTOR",
      "body": "And.... If/ When you become a user, you'll come to appreciate the fact that we put a lot of energy into not randomizing you with breaking changes.  \n\nJPS- MSFT\n",
      "created_at": "2016-08-21T17:07:18Z",
      "updated_at": "2016-08-21T17:07:18Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "Not at all, that's something that only helps businesses with lazy developers or a handful of sysadmins who don't know how to debug anything. It's a good thing to break ABI, and you're not a C library so even that isn't being done.\n\nInstead of breaking people's scripts with `curl` being an alias to something weird, it calls `curl`. This is expected behavior.\n\nOn August 21, 2016 1:07:35 PM EDT, Jeffrey Snover notifications@github.com wrote:\n\n> And.... If/ When you become a user, you'll come to appreciate the fact\n> that we put a lot of energy into not randomizing you with breaking\n> changes.  \n> \n> JPS- MSFT\n\n## \n\nJohn M. Harris, Jr.\nPGP Key: f2ea233509f192f98464c2e94f8f03c64bb38ffd\n\nSent from my Android device. Please excuse my brevity.\n",
      "created_at": "2016-08-21T17:10:27Z",
      "updated_at": "2016-08-21T17:10:27Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "The entire mindset of customers rather than just users is the issue here, I believe. One of the driving factors of open source is quality, and one of the driving factors of free software is what's best for the end user. Is it not a good idea to merge these two ideologies to create a fantastic project, rather than going about this from the simple business oriented mindset? Yes, it's great to cater to customers, but not when that hurts other users. This is one of those cases.\n\nOn August 21, 2016 1:05:22 PM EDT, Jeffrey Snover notifications@github.com wrote:\n\n> What is the commonly accepted open source practice for introducing a\n> breaking change on a billion machines?\n> \n> I understand the frustration but realize this: the official release\n> will not ship for a while so I feel no need to rush a fix before\n> thinking it through. \n> \n> We'll fix it and we'll be respectful of our customers as we do so. \n> \n> JPS - MSFT\n\n## \n\nJohn M. Harris, Jr.\nPGP Key: f2ea233509f192f98464c2e94f8f03c64bb38ffd\n\nSent from my Android device. Please excuse my brevity.\n",
      "created_at": "2016-08-21T17:13:35Z",
      "updated_at": "2016-08-21T17:13:35Z"
    },
    {
      "author": "kuldeepdhaka",
      "author_association": "NONE",
      "body": "@jpsnover Alot of solution have been proposed in the comments. (readed them?)\nOR maybe Microsoft can release Powershell**2** without `embrace, extend, extinguish` features. :)\n",
      "created_at": "2016-08-21T17:14:25Z",
      "updated_at": "2016-08-21T17:15:04Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "Sure, but what, on Windows, is the always-consistent path to curl? And why does one have to write the full path, anyway? Isn't that why the PATH variable exists, to make looking for software easier?\n\nOn August 21, 2016 1:01:57 PM EDT, Raynor Vliegendhart notifications@github.com wrote:\n\n> @jkinz\n> \n> Then quoting you from an earlier post:\n> \n> > Commands should be invoked by pathname. \n> \n> Nothing needs to be fixed then? If you want to use `wget` or `curl`,\n> invoke it by their full path, since, hey, this is the obvious way to do\n> it?\n\n## \n\nJohn M. Harris, Jr.\nPGP Key: f2ea233509f192f98464c2e94f8f03c64bb38ffd\n\nSent from my Android device. Please excuse my brevity.\n",
      "created_at": "2016-08-21T17:14:50Z",
      "updated_at": "2016-08-21T17:14:50Z"
    },
    {
      "author": "jpsnover",
      "author_association": "CONTRIBUTOR",
      "body": "@kuldeepdhaka of course we are. And listening to the community and evaluating the pros and cons of different choices is exactly what we are doing.  \n\nWe appreciate the input. \n\nAs I've said before - I had a lot of freedom when I had no customers. :-)\n",
      "created_at": "2016-08-21T17:23:07Z",
      "updated_at": "2016-08-21T17:23:07Z"
    },
    {
      "author": "jrmoserbaltimore",
      "author_association": "NONE",
      "body": "@JohnMHarrisJr The driving factor of free software is not \"what is best for the end user\"; that is a romantic view.  The driving factor of free software is \"what is best for the developers.\"\n\nOpen source software developers do not study and compare the state-of-the-art processes with the software they write ostensibly to provide that state-of-the-art; they do not engage in focus groups; they do not do requirements analysis.  They write what seems like a good idea in their little world, picking out some of the things users say (often from feature requests) and molding them to fit what they think would be nice.\n\nThis is, in most cases, not an issue because most user interfaces are standard (based on mimicry) and most software provides standard features.  Wars between desktop environments might have some merit, because you can approach them scientifically; and even they are mostly preferential and artistic.\n\nThe things that most stand out are things like project management software, which you _can_ back up with empirical evidence, and which consistently shows a complete lack of understanding of how modern processes dramatically improve the effectiveness of planning and executing large projects; however, that's only my view, and I've seen chemists and EEs freak out about some jibber-jabber about open-source chemistry and EE programs not providing a useful interface for nuclear bonding or complex field tunneling operations or whatever it is they do--this is possibly because I understand PM, they understand Chem and EE, and the open source developers have faulty understanding of these things and so implement broken ideas.\n\nIn the end, it's not about open source or commercial software; it's about your programming team and its management style.  If your team has become governed by a proper management philosophy--whether it's self-governed as in open source or dictated as in business--it will provide better products.  If your team has no idea how to manage itself, it will just produce something impressive to non-professionals, and continuously fail to understand how completely riddled with idiotic design decisions the product truly is.\n\nGriping about a fantasy view of open source vs proprietary is unuseful.\n",
      "created_at": "2016-08-21T17:42:38Z",
      "updated_at": "2016-08-21T17:42:38Z"
    },
    {
      "author": "kuldeepdhaka",
      "author_association": "NONE",
      "body": "@jpsnover \"listening\" ? lol. \n\nAll what was told is \n\n> We are rejecting this PR as it introduces \"Unacceptable Changes\", see our breaking change contract.\n> If you disagree with this resolution, you will need to start an RFC\n> Note that our RFC process currently states only team members may create a new RFC\n\nAnd the PR was closed (a sign of no interest?)\n\nand 3 days ago _you_ said,\n\n> Yup. We hear you.\n> As I said - we'll open up a RFC on this.\n> Thanks for the feedback! \n\nAND **No** RFC is still there! (3 days!)\n",
      "created_at": "2016-08-21T17:42:48Z",
      "updated_at": "2016-08-21T17:42:48Z"
    },
    {
      "author": "jpsnover",
      "author_association": "CONTRIBUTOR",
      "body": "@lfckop. Let's be honest - that's an opinion not a data-based assertion.  It would be wonderful if we did but we just don't have the telemetry.\n",
      "created_at": "2016-08-21T17:44:59Z",
      "updated_at": "2016-08-21T17:44:59Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "@bluefoxicy If that is your view of the free software movement, you have an extremely \ndelusional view. For example, the GNU GPL exists to protect the user, not the \ndeveloper.\n",
      "created_at": "2016-08-21T17:49:00Z",
      "updated_at": "2016-08-21T17:49:00Z"
    },
    {
      "author": "jpsnover",
      "author_association": "CONTRIBUTOR",
      "body": "@kuldeepdhaka I've said that we'll have an RFC and we will.  It is not going to be random or rushed.  We are listening the to community and when we think we have a good approach, we publish it. \n",
      "created_at": "2016-08-21T17:49:04Z",
      "updated_at": "2016-08-21T17:49:04Z"
    },
    {
      "author": "jrmoserbaltimore",
      "author_association": "NONE",
      "body": "@JohnMHarrisJr and the first clause of the GNU GPL is, \"Thou shalt be enslavethed by the user, and the user shall dictate what is good\"?\n\nThe user isn't the developer; the developer makes the application, and the application responds to the desires of the developer.  Do you think that Gnome was written by its millions of users, or by the Gnome development team?  Why do you think KDE doesn't look like Gnome at all?\n\nI used KDE and I argued heavily that KDE should ditch Qt in favor of GTK+.  Why did this never happen?\n\nAnswer:  The developers liked Qt better than GTK+, and don't want any of their useful applications to install on a GTK+-driven desktop without bringing along 200-400MB of additional Qt libraries that aren't needed for literally anything else.  This is bad for the user, who then must either select an inferior GTK+ application over a Qt application; ditch all GTK+ applications for inferior Qt counterparts; or install both toolkits and use hundreds of additional megabytes of space and extra RAM, as well as deal with applications with completely-different look-and-feel, creating the most horrible user experience imaginable.\n\nThe GPL didn't force the developers to make the software the best software for me, the user.  The GPL is a legal document, not a _design_ document.\n\nThis thread is about a design decision, not a legal decision.\n",
      "created_at": "2016-08-21T17:55:27Z",
      "updated_at": "2016-08-21T17:56:09Z"
    },
    {
      "author": "kuldeepdhaka",
      "author_association": "NONE",
      "body": "@bluefoxicy I think **your view is biased. (ALOT LOT!)**\n\n> The driving factor of free software is not \"what is best for the end user\"; that is a romantic view. The driving factor of free software is \"what is best for the developers.\"\n\nNO! We write/design software that fit the community need!!!\nThis is not about a developer(s), it is about community!!!\n\n> Open source software developers do not study and compare the state-of-the-art processes with the software they write ostensibly to provide that state-of-the-art; they do not engage in focus groups; they do not do requirements analysis. They write what seems like a good idea in their little world, picking out some of the things users say (often from feature requests) and molding them to fit what they think would be nice.\n\nI'm sorry, but what you are saying is grossly incorrect.\nRequirement analysis is a two way process.\nDesigner think what user need and user tell designer what it need.\nFree/Open source give much more flexibility to user because it allow bidirectional communication.\nWhat you are describing is more of One way (only: designer think what user need).\n\n`They write what seems like a good idea in their little world` _LOL!_\nThis is why \nThe Linux kernel is being used everywhere,\nInnovation is more happening with Free/Open source software, and\nFree/Open software allow everyone to contribute and help the community as a whole.\n\n> I've seen chemists and EEs freak out about some jibber-jabber about open-source chemistry and EE programs not providing a useful interface for nuclear bonding or complex field tunneling operations or whatever it is they do--this is possibly because I understand PM, they understand Chem and EE, and the open source developers have faulty understanding of these things and so implement broken ideas.\n\nYOU ARE WRONG!\nWhy then, we have RF level design in Kicad (EE software)?!\nScientist are more likely to use Free/Open software because of reproducability and availability to everyone.\nPython & Numpy is used by alot of Scientist!\n`I understand PM` NO, you understand how to make money out of them, right or wrong way!\n",
      "created_at": "2016-08-21T18:01:49Z",
      "updated_at": "2016-08-21T18:08:17Z"
    },
    {
      "author": "0xMF",
      "author_association": "NONE",
      "body": "> What is the commonly accepted open source practice for introducing a breaking change on a billion machines?\n\n@jpsnover AFAIK there has not been a happy ending keeping same name when breaking changes were introduced: Python 2/3 and Perl 5/6.  \n\nAs for ways out: git style aliasing for local/global configurations and .gitignore or shell-style detection for scripts running in non-interactive modes might offer hope under the same name that may be in keeping with older PS practices/scripts/expected behaviours. Having system-wide /etc settings on some of these settings allows individual distros and flavours choose how they configure PS (just like is it /bin/{bash,grep} or /usr/bin/{bash,grep}).\n\nFWIW loving PowerShell on Debian sid.\n",
      "created_at": "2016-08-21T18:05:23Z",
      "updated_at": "2016-08-21T18:05:23Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "@bluefoxicy I think that you misunderstand the idea of the free software movement. The point is that the user has the right to change software installed on their machine to do whatever they want. If you want to go through the trouble of porting KDE to GTK+3, you're more than welcome to. The issue with Qt vs GTK+3 is a personal opinion issue that we don't have a solution for and is not relevant in any way to this thread.\n\nThat aside, many software projects use Qt and many use GTK+3, to the point that you always end up having both installed anyway. This is true on Windows as well, with common applications like HexChat using GTK and many things using Qt.\n",
      "created_at": "2016-08-21T18:06:18Z",
      "updated_at": "2016-08-21T18:06:18Z"
    },
    {
      "author": "jrmoserbaltimore",
      "author_association": "NONE",
      "body": "@kuldeepdhaka Your argument is essentially that the Linux Kernel was specially-designed to be the best kernel for everyone.\n\nIf that's true, then Windows is even better, because it was select-taylored to the needs of thousands of times the users.\n\nThe truth is people use open source software because it's cheap (free) and it works for them.  That's incidental.  It's like picking up a rock, smashing something open with it, and declaring God formed that rock especially for you, to fit perfectly in your hand, to smash open the thing you needed opened.\n\nYou insult the user.  You insult the user because the situation you describe is that users are by-and-large too stupid to make use of tools to fit their need; instead, these stupid invalids must have said tools carefully-crafted to meet their needs, else they wouldn't be able to use those tools at all.  That is your claim when you claim that a tool is used by people because it was designed to _best_ suit their needs, rather than because it was **designed to fit the whims of the developer, and incidentally can be made to produce a viable--perhaps not optimal--result for the user**.\n\n@JohnMHarrisJr Why don't you port KDE to GTK+ for me?  It's trivial, right?  If I could do it myself, I'm sure you could go ahead and get that out of the way for me instead.  It'd be easy, right?\n\nWhile we're at it, any user has the ability to make their own smartphone by smelting silicon, iron, and oil into semiconductors and plastics.  Good thing we can all alter our own electronics.\n",
      "created_at": "2016-08-21T18:08:19Z",
      "updated_at": "2016-08-21T18:08:19Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "@bluefoxicy I don't think you understand your own argument, and I don't have time to sit here and feed trolls. This is not relevant to the pull request, and honestly I don't know how it came to KDE and GTK+.\n\nIf you want KDE ported to GTK+, go ask on one of their mailing lists, I'm sure somebody else wants to do that too.\n\nThere are many open source projects that aren't \"cheap\" or \"free\" (gratis), and we certainly don't choose software because it's available at little or no cost. Windows 10 is gratis, you don't see me hopping over there.\n\nGood bye troll, I hope you enjoyed the responses thus far.\n",
      "created_at": "2016-08-21T18:13:50Z",
      "updated_at": "2016-08-21T18:13:50Z"
    },
    {
      "author": "halr9000",
      "author_association": "CONTRIBUTOR",
      "body": "PowerShell already has concepts of multiple profile / rc files. A breaking\nchange could be introduced at a machine level, and overridden at the user\nlevel, or vice versa.\n\nOn Sun, Aug 21, 2016, 2:08 PM bluefoxicy notifications@github.com wrote:\n\n> @kuldeepdhaka https://github.com/kuldeepdhaka Your argument is\n> essentially that the Linux Kernel was specially-designed to be the best\n> kernel for everyone.\n> \n> If that's true, then Windows is even better, because it was\n> select-taylored to the needs of thousands of times the users.\n> \n> The truth is people use open source software because it's cheap (free) and\n> it works for them. That's incidental. It's like picking up a rock, smashing\n> something open with it, and declaring God formed that rock especially for\n> you, to fit perfectly in your hand, to smash open the thing you needed\n> opened.\n> \n> You insult the user. You insult the user because the situation you\n> describe is that users are by-and-large too stupid to make use of tools to\n> fit their need; instead, these stupid invalids must have said tools\n> carefully-crafted to meet their needs, else they wouldn't be able to use\n> those tools at all. That is your claim when you claim that a tool is used\n> by people because it was designed to _best_ suit their needs, rather than\n> because it was _designed to fit the whims of the developer, and\n> incidentally can be made to produce a viable--perhaps not optimal--result\n> for the user_.\n> \n> @JohnMHarrisJr https://github.com/JohnMHarrisJr Why don't you port KDE\n> to GTK+ for me? It's trivial, right? If I could do it myself, I'm sure you\n> could go ahead and get that out of the way for me instead. It'd be easy,\n> right?\n> \n> While we're at it, any user has the ability to make their own smartphone\n> by smelting silicon, iron, and oil into semiconductors and plastics. Good\n> thing we can all alter our own electronics.\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/PowerShell/PowerShell/pull/1901#issuecomment-241272230,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AABIMkr0l1XcKD0yIGfqRPLncC4BGin8ks5qiJQUgaJpZM4Jn1fs\n> .\n",
      "created_at": "2016-08-21T18:17:38Z",
      "updated_at": "2016-08-21T18:17:38Z"
    },
    {
      "author": "jrmoserbaltimore",
      "author_association": "NONE",
      "body": "@JohnMHarrisJr Well if we're going to name-calling, you're a politician:  you're either lying or incompetent.\n\n> One of the driving factors of open source is quality, and one of the driving factors of free software is what's best for the end user.\n\nYou're trying to assert that open source means \"tailored specially for the user\", except that it isn't.\n\nWhen challenged, you fell back to the GPL, and a nebulous ideal that the end user is allowed to change things--never mind the immense labor involve both in acquiring and applying the skill needed to do so.  That argument is essentially, \"It's good enough for me; if it isn't good enough for you, that's my problem.  Fix it yourself.  Oh, you can't?  So sad.  Maybe you shouldn't criticize 'free' when someone gives it to you!\"\n\nThat's the exact opposite of your original argument:  The Open Source philosophy is we put it out there so you can bother fixing it if it's not good enough, provided you have that capability.\n\nYou've moved goalposts and completely changed arguments, and finally fell back to well-poisoning and personal attacks.  I'm going to call ignorance over malice here:  you're not evil; you actually believe your own delusion, thus you're insane.\n\n> This is not relevant to the pull request\n\nThe original argument was yours, as a way to attack Microsoft for not following your religion.\n",
      "created_at": "2016-08-21T18:19:21Z",
      "updated_at": "2016-08-21T18:19:21Z"
    },
    {
      "author": "kuldeepdhaka",
      "author_association": "NONE",
      "body": "@bluefoxicy What?\n\n> The truth is people use open source software because it's cheap (free) and it works for them\n\nNO! People use them because it is available for everyone and the community as a whole have developed it.\n\nNo single person/organisation control the software.\nUser can modify it to fit their need\nUser can share it with their neighbour.\nUser can can learn how it work.\nUser can do anything what it want to do with it.\nUser have Freedom to run anywhere.\nUser don't have to live on other mercy.\nUser have a say\nUser can participate in make it better\n\n> If that's true, then Windows is even better, because it was select-taylored to the needs of thousands of times the users.\n\nIt is just crappily written peice of software.\nThis is why every other day Microsfot Windows is infected with Virus/Malware!\n\n> and it works for them\n\nIt work because we as a community have build it for our requirement.\nIf it don't work (bug), we fix it.\n",
      "created_at": "2016-08-21T18:21:28Z",
      "updated_at": "2016-08-21T18:23:55Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "Oh, so this was a misunderstanding on your part. I said free software, not open source. The two are not one in the same.\n",
      "created_at": "2016-08-21T18:21:40Z",
      "updated_at": "2016-08-21T18:21:40Z"
    },
    {
      "author": "jrmoserbaltimore",
      "author_association": "NONE",
      "body": "\"One of the driving factors of open source is quality\" -- @JohnMHarrisJr \n\n\"I said free software, not open source\" -- @JohnMHarrisJr \n\nI could also point out that Free and Open Source Software and the FOSS movement consider \"Free Software\" to be \"Open Source\".  \"Free Software\" is often explained as \"Free as in Freedom\" to contrast with \"Free as in Beer\".\n\nUsing equivocation fallacies to outright lie is familiar to me as well; you can't get away with that with me.\n",
      "created_at": "2016-08-21T18:24:32Z",
      "updated_at": "2016-08-21T18:24:32Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "@bluefoxicy You missed this, it seems: \"one of the driving factors of free software is what's best for the end user.\"\n",
      "created_at": "2016-08-21T18:25:37Z",
      "updated_at": "2016-08-21T18:25:37Z"
    },
    {
      "author": "uplime",
      "author_association": "NONE",
      "body": "Actually those two movements are fairly seperate, @bluefoxicy \n",
      "created_at": "2016-08-21T18:26:32Z",
      "updated_at": "2016-08-21T18:26:32Z"
    },
    {
      "author": "kuldeepdhaka",
      "author_association": "NONE",
      "body": "@bluefoxicy You are just trying to diverge from the main focus **user**.\n**Free/Open source** software always did **better** for the User and it will **continue to do** so.\n",
      "created_at": "2016-08-21T18:29:13Z",
      "updated_at": "2016-08-21T18:29:13Z"
    },
    {
      "author": "jrmoserbaltimore",
      "author_association": "NONE",
      "body": "@ntchambers He drifted between \"free\" and \"open source\" in casual use, as do many people.  He also cited the GPL.\n\nAs well, \"what's best for the end user\" is \"quality\".  Quality is the degree to which a deliverable satisfies requirements; requirements are the requirements of the stakeholders--including the end user.\n\nIt appears I got into a religious argument with @JohnMHarrisJr and @kuldeepdhaka, anyway.  They're on their knees clutching their holy books, and won't be swayed; I may as well try to bring the glory of Vishnu to the alter of a Catholic Bishop.  I like to argue, but arguing with fools such as these is foolish.\n",
      "created_at": "2016-08-21T18:32:34Z",
      "updated_at": "2016-08-21T18:32:34Z"
    },
    {
      "author": "kuldeepdhaka",
      "author_association": "NONE",
      "body": "@bluefoxicy What i said are all logical points.\nIt enumerate benifits of a user (and community) when they use Free/Open source software.\nAnd when you could not withstand against logic, you are declaring the arguments as \"religious argument\".\n",
      "created_at": "2016-08-21T18:35:58Z",
      "updated_at": "2016-08-21T18:35:58Z"
    },
    {
      "author": "kuldeepdhaka",
      "author_association": "NONE",
      "body": "So actually i (and @JohnMHarrisJr)  should say such a statement: `I like to argue, but arguing with fools such as these is foolish.`\n",
      "created_at": "2016-08-21T18:37:53Z",
      "updated_at": "2016-08-21T18:37:53Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "@bluefoxicy Actually, what I suggested was the use of the main driving factors of both ideologies to better this project. I definitely did not \"drift\" between the two, and I did not mention FLOSS at all.\n",
      "created_at": "2016-08-21T18:39:10Z",
      "updated_at": "2016-08-21T18:39:10Z"
    },
    {
      "author": "jrmoserbaltimore",
      "author_association": "NONE",
      "body": "@kuldeepdhaka You enumerated a load of benefits fitting the ethics of an ideal.\n\n> No single person/organisation control the software.\n\nIn practice, it's controlled by a group.  Fragmentation creates various versions of software with varying effect, ranging from following one group to actually harming the user.  LibreOffice is what's left after three forks of OpenOffice.org, and is maintained by Novel Software; CinePaint and Gimp-Photoshop are hardly-used, poorly-maintained novelties which never made a difference to upstream nor gained user traction; and libav not only shares or re-implements fixes with ffmpeg (creating two similar projects with alternate problems), but also breaks compatibility while replacing ffmpeg in some distributions, creating all kinds of headaches and decisions for the end user where a unified project would have been much more beneficial to everyone.\n\n> User can modify it to fit their need\n\nMost users don't have such skill; and even when they do, this takes a large amount of time.  At best, skilled individuals can work for the project without pay **to further their own needs, but not the needs of other users, unless those other users have similar needs**; in almost all cases (all but a few hundred out of three **billion**, or on the order of literally 99.999999997%), this is just a fluff line\n\n> User can share it with their neighbour.\n\nWe do that with freeware that doesn't have an open-source license.\n\n> User can can learn how it work.\n\nOnly if they have the time and a huge amount of domain knowledge backing it.  I've learned a lot about how Windows works without looking into it anyway; the same is true of many people who are more skilled than me and work on ReactOS.\n\nThis is, again, an ideal that doesn't reflect reality, except for a few elite people with tons of time and a high degree of existing specialized skill.\n\n> User can do anything what it want to do with it.\n\nThis is ambiguous.  The user can use the software for any purpose the software can achieve; this is approximately a property of all software.\n\n> User have Freedom to run anywhere.\n\nThis is a pricing and licensing consideration, and is valid.\n\n> User don't have to live on other mercy.\n\nThis is a meaningless statement.\n\n> User have a say\n\nThis is a meaningless statement.  I can say anything I want to Microsoft, but they don't have to listen; and most open source softwares don't listen.  Tell me why this one hasn't been taken up as an important feature for the next release:  https://gitlab.com/gitlab-org/gitlab-ce/issues/19624\n\n> User can participate in make it better\n\nWith an extremely high level of skill **and the blessing of the upstream developers**, yes; otherwise you are a voice just like you are a voice to Sun, Microsoft, or Apple.  Users who have participated in FreeBSD or ffmpeg have been banned from those projects for disagreeing with the handful of core developers, and have gone on to live in obscurity with their meaningless pet projects.\n",
      "created_at": "2016-08-21T18:49:41Z",
      "updated_at": "2016-08-21T18:49:41Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "@bluefoxicy No, if you don't like the way a project is going, and the developers already working on it are adamant not to allow your changes, you can just fork it and have your own version which other people are free to use.\n",
      "created_at": "2016-08-21T18:52:09Z",
      "updated_at": "2016-08-21T18:52:09Z"
    },
    {
      "author": "jrmoserbaltimore",
      "author_association": "NONE",
      "body": "@JohnMHarrisJr then just fork Powershell and get off this thread.  Your version won't be used at all by anyone, and this version will ship with Windows and Linux.  It'll be just like you did nothing, except you'll have less free time to do things that are interesting to you, because you'll have to sink your time and effort into maintaining a Powershell fork nobody uses.\n\nSound like a plan?\n",
      "created_at": "2016-08-21T18:53:59Z",
      "updated_at": "2016-08-21T18:53:59Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "@bluefoxicy Well, no. No software other than the Linux kernel itself ships with Linux.\n",
      "created_at": "2016-08-21T18:55:18Z",
      "updated_at": "2016-08-21T18:55:18Z"
    },
    {
      "author": "jrmoserbaltimore",
      "author_association": "NONE",
      "body": "Oh my god you're one of those complete loons who argues Linux isn't an operating system, it's only the kernel.\n\nDo you also correct everyone for not calling Debian and RHEL GNU/Linux?  How often do you try to argue from pedantry?\n",
      "created_at": "2016-08-21T18:58:09Z",
      "updated_at": "2016-08-21T18:58:09Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "@bluefoxicy The point of such a fork would, of course, be for your own use, although others would also be free to use it. I have no use for PowerShell, because I have `bash` installed on my system. I have no reason to fork PowerShell, and I definitely don't want to use my time in that way. That's also not necessary for something like this, they've said that they will look into this.\n",
      "created_at": "2016-08-21T18:58:21Z",
      "updated_at": "2016-08-21T18:58:21Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "@bluefoxicy Linux.. is only a kernel. See https://www.kernel.org/linux.html The Linux kernel is a kernel, nobody claims otherwise. If you were referring to the OS, you should have mentioned that you meant GNU/Linux, in which case you would still be wrong. PowerShell is in no way a core component of a complete operating system, and so won't be in the default install on any distribution of the complete system of the Linux kernel and GNU userland, or other userland.\n",
      "created_at": "2016-08-21T18:59:01Z",
      "updated_at": "2016-08-21T19:00:46Z"
    },
    {
      "author": "jrmoserbaltimore",
      "author_association": "NONE",
      "body": "@JohnMHarrisJr You're dodging the point.  Open Source Software, Free Software, and the GPL don't give the user any of those capabilities people talk about; the user gets those capabilities from:\n- Years of study in computer science and software engineering\n- Years of experience creating and maintaining complex computer programs\n- Hours of personal time sunk into understanding the code base in front of them\n- Many more hours of personal time spent modifying that code base\n\nThe community benefits are contingent on:\n- A user's ability to convince the developers to do things\n- Developer's understanding of what the users want\n- Developer's interest in an alternative that maximally-benefits the user, as opposed to a different alternative (which may be more-interesting to them personally)\n- Developer's willingness to accept provided code (e.g. pull requests)\n\nFor a fork, the benefits further depend on the maintenance of the fork--which means other people are now relying on either the forking developer to keep up with the main branch, the forked branch to draw developers off mainline (outcompete), or their own skill and effort in providing the leg work after the fork has been abandoned.\n\nThat's more philosophy than substance, and it has nothing to do with producing a product of quality.  It at best reduces one specific risk in a specific circumstance.\n\n> we use the term \u201cLinux\u201d to refer to the Linux kernel, but also the set of programs, tools, and services that are typically bundled together with the Linux kernel to provide all of the necessary components of a fully functional operating system. Some people, particularly members of the Free Software Foundation, refer to this collection as GNU/Linux, because many of the tools included are GNU components. However, not all Linux installations use GNU components as a part of their operating system.\n\n\"Linux is only a kernel\" vs \"Debian Linux\", \"Redhat Enterprise Linux\", and so forth.  Curl up in a little ball and whisper to yourself that the way **everyone in the world** says \"Linux\" is wrong, they're wrong, and you're the only one who isn't wrong.\n\nSo yes, we ship Gnome with Linux.\n",
      "created_at": "2016-08-21T19:06:38Z",
      "updated_at": "2016-08-21T19:06:38Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "GNOME is not shipped with Linux, and no distribution other than Fedora and Red Hat Enterprise Linux ship GNOME as the default. Debian GNU/Linux (https://www.debian.org/releases/jessie/amd64/ch01s03.html.en) does not ship anything other than the GNU operating system, kernel and Debian specific tools (dpkg, apt, apt-get).\n\nAgain, this is off topic to this pull request.\n",
      "created_at": "2016-08-21T19:11:31Z",
      "updated_at": "2016-08-21T19:11:31Z"
    },
    {
      "author": "kuldeepdhaka",
      "author_association": "NONE",
      "body": "@bluefoxicy \n\n> In practice, it's controlled by a group. Fragmentation creates various versions of software with varying effect, ranging from following one group to actually harming the user. LibreOffice is what's left after three forks of OpenOffice.org\n\nYes, the beauty is that, if someone (or group) do not agree with other view, they can fork and do the way they want to do.\n\n> Most users don't have such skill; \n\nYes, they can pay someone else with reasonable charge.\nIt remove monopoly and at the end the changes can be contribute to community.\n\n> We do that with freeware that doesn't have an open-source license.\n\nBUT freeware don't have any provide freedom and can die anytime (alot of them).\nYou are just talking of price, not freedom.\n\n> Only if they have the time and a huge amount of domain knowledge backing\n\nAtleast Free/Open source allow someone to learn.\nThey may not have the knowledge at the present but with time they can keep learning.\n\n> > User don't have to live on other mercy.\n> \n> This is a meaningless statement.\n\nIt has meaning, open your mind.\nEven the author (of free/open source software) cannot revoke the licence even if they wish (till the licence is followed)\nWhere as in other, the author can revoke the licence at their whim, so you are at their mercy!!!\n\n> > User have a say\n> \n> This is a meaningless statement\n\nNot it isnt, because the community is made of everyone, everyone have their say!\n\n> > User can participate in make it better\n> \n> With an extremely high level of skill\n\nWith translation, teaching, distributing...\nparticipating by code is one thing only.\n",
      "created_at": "2016-08-21T19:11:53Z",
      "updated_at": "2016-08-21T19:12:14Z"
    },
    {
      "author": "ShinNoNoir",
      "author_association": "NONE",
      "body": "Not sure if this is useful, but here's a variation on using the call operator, but packaged more nicely:\n\n```\nfunction Run-Application() {\n    $app, $params = $args\n    & (Get-Command -CommandType Application $app) $params\n}\n\nSet-Alias run Run-Application\n```\n\n```\nPS C:\\tmp> run wget http://google.com -O google.html\n--21:09:12--  http://google.com/\n           => `google.html'\nResolving google.com... done.\nConnecting to google.com[82.94.228.159]:80... connected.\nHTTP request sent, awaiting response... 302 Found\nLocation: http://www.google.nl/?gfe_rd=cr&ei=V_y5V-3QMa3H8AfuiIHgBw [following]\n--21:09:12--  http://www.google.nl/?gfe_rd=cr&ei=V_y5V-3QMa3H8AfuiIHgBw\n           => `google.html'\nResolving www.google.nl... done.\nConnecting to www.google.nl[74.125.136.94]:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: unspecified [text/html]\n\n    [ <=>                                 ] 11,221        10.70M/s\n\n21:09:12 (10.70 MB/s) - `google.html' saved [11221]\n```\n",
      "created_at": "2016-08-21T19:12:29Z",
      "updated_at": "2016-08-21T19:12:29Z"
    },
    {
      "author": "jrmoserbaltimore",
      "author_association": "NONE",
      "body": "@kuldeepdhaka Well I had my say, and you just stonewalled me and claim I'm wrong.  I want my say _stamps foot_ I'm right I'm right stop saying I'm wrong!!!!\n\n.... no?\n\nClosed WONTFIX reason USERISANIDIOT.\n\nSo much for having a say.\n\nWe blog about people we don't like.  We all have a say because we get online and we cry to the world that some closed-source, proprietary company isn't listening to our desires.  We're all part of a community there, too.\n\n> Yes, they can pay someone else with reasonable charge.\n\nCan minimum-wage workers pay someone else to customize software to their needs?  They make $14,000/year and spend most of it on survival, and beg food off people to live.\n",
      "created_at": "2016-08-21T19:15:39Z",
      "updated_at": "2016-08-21T19:15:39Z"
    },
    {
      "author": "kuldeepdhaka",
      "author_association": "NONE",
      "body": "@bluefoxicy \n\n> Can minimum-wage workers pay someone else to customize software to their needs? They make $14,000/year and spend most of it on survival, and beg food off people to live.\n\nSomeone else who has money can pay for the changes that fixes some minimum-wage worker.\nAnd contribute it back to community. that way everyone get the benifit.\nNow, **ALL** minimum wage worker with the same problem get the problem solved.\n\nAlso, the **poor and rich divide is majorly due explotation than \"being-innovative\"**.\n\nAlso if practicality is considered,\nminimum wage worker first need to fullfill their primary requirement before going to secondary/terniary.\n",
      "created_at": "2016-08-21T19:24:15Z",
      "updated_at": "2016-08-21T19:24:37Z"
    },
    {
      "author": "bwatts",
      "author_association": "NONE",
      "body": "@JohnMHarrisJr \n\n> I have no use for PowerShell, because I have bash installed on my system.\n\nThis is a lot of drama from someone with no investment. Where does that energy come from?\n",
      "created_at": "2016-08-21T19:27:29Z",
      "updated_at": "2016-08-21T19:27:29Z"
    },
    {
      "author": "kuldeepdhaka",
      "author_association": "NONE",
      "body": "> you just stonewalled me\n\n@bluefoxicy  You want me to see from your (imagination) window, i will NOT!\nI just pointed out the loop-holes/wrongs in your thinking/thoughts from my POV.\n",
      "created_at": "2016-08-21T19:32:09Z",
      "updated_at": "2016-08-21T19:32:54Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "@bwatts I don't understand what you mean by \"no investment\". You don't have to use software to contribute to its betterment.\n",
      "created_at": "2016-08-21T20:00:43Z",
      "updated_at": "2016-08-21T20:00:43Z"
    },
    {
      "author": "bwatts",
      "author_association": "NONE",
      "body": "@JohnMHarrisJr I suppose it means, \"why do you care beyond the tautology of caring?\" The decisions made here will have zero impact on your life, aside from the thrill of the chase.\n",
      "created_at": "2016-08-21T20:19:38Z",
      "updated_at": "2016-08-21T20:19:38Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "@bwatts The decisions made here don't directly impact me, but I have to work with people who use PowerShell and I would appreciate it if they didn't get confused when they try to use `curl` from PowerShell. I'm in it for the end users, not myself.\n",
      "created_at": "2016-08-21T20:21:44Z",
      "updated_at": "2016-08-21T20:22:09Z"
    },
    {
      "author": "bwatts",
      "author_association": "NONE",
      "body": "Cool beans. Altruism and cause-junkie-ism suffer from Poe's Law so I'll have to assume your intentions are rooted in the experiences of others and not in a desire to be right on the Internet.\n",
      "created_at": "2016-08-21T20:29:48Z",
      "updated_at": "2016-08-21T20:29:48Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "@bwatts Would it help to add or remove \"winkie faces and random emoji\"?\n",
      "created_at": "2016-08-21T20:31:10Z",
      "updated_at": "2016-08-21T20:31:10Z"
    },
    {
      "author": "jkinz",
      "author_association": "NONE",
      "body": "@ShinNoNoir \n\n> > @jkinz\n> \n> Then quoting you from an earlier post:\n> \n> >  Commands should be invoked by pathname.\n> \n> Nothing needs to be fixed then? If you want to use wget or curl, invoke it by their full path, since, hey, this is the obvious way to do it? \n\nIn a script?  yes, that is the best practice.  Otherwise there is a security vulnerability that someone can place a same-named executable on the $PATH and that false executable will be executed instead of the one you intended. (But you knew that already... )   \n\nSome people (OK many people) save keystrokes by placing the full path in a variable and invoking it indirectly.\n\nWGET=\"/usr/bin/wget\"\n\nThis is another best practice.   If your scripts are being used by other people in a production environment, you should consider these precautions mandatory. \n",
      "created_at": "2016-08-21T23:08:30Z",
      "updated_at": "2016-08-21T23:08:30Z"
    },
    {
      "author": "jkinz",
      "author_association": "NONE",
      "body": "@jpsnover\n\n> What is the commonly accepted open source practice for introducing a breaking change on a billion machines?\n\nThe first accepted practice is to not design it so it breaks when you start distributing it to a global, or more global user population. \n\nSince PS was never originally intended to be that widely used it's somewhat understandable that no one was concerned about the namespace collision. \n\nBut given that the collision has happened, the resolution is clear, and common: correct the issue in the smaller scope, that is - remove the alias from PS and then  Ship a convert script to fix all the scripts that use the aliases. \n\nLike this:\n\nfor f in $( find . -name *.ps ); do sed -i -e 's/wget/ web object request string/g'  $f; done\n\nAnd do the same for the other alias.  (Note - this example uses GNU sed.  )\n\n(authors note - I suspect really fixing the scripts may require handling additional details, but this is the core of it. ) \n",
      "created_at": "2016-08-21T23:26:41Z",
      "updated_at": "2016-08-21T23:28:10Z"
    },
    {
      "author": "ShinNoNoir",
      "author_association": "NONE",
      "body": "@jkinz \n\n> Like this:\n> for f in $( find . -name *.ps ); do sed -i -e 's/wget/ web object request string/g' $f; done\n> And do the same for the other alias. (Note - this example uses GNU sed. )\n\nYou're proposing a \"fix\" that does a blind search&replace, no matter where the string \"wget\" appears in the file? Any idea what your fix does to a hypothetical script like the one below?\n\n```\n$SRC = \"http://downloads.sourceforge.net/project/gnuwin32/wget/1.11.4-1/wget-1.11.4-1-bin.zip?r=&ts=1471838991&use_mirror=netcologne\"\n$DST = \"$env:temp/wget-bin.zip\"\n\nInvoke-WebRequest $SRC -OutFile $DST\n\n```\n",
      "created_at": "2016-08-22T04:11:34Z",
      "updated_at": "2016-08-22T04:11:34Z"
    },
    {
      "author": "GeeLaw",
      "author_association": "NONE",
      "body": "@Citillara \n\n> Could those alias be disabled (not removed) by default ? They could be enabled by either one of those\n> - Typing a command like \"Enable-Linux-Aliases\"\n> - Switch on starting up PowerShell\n> - OS Environment flag\n\nThese aliases does **not** exist when you're not using **Windows** PowerShell, so when you use PowerShell for Unix/Linux the problem does not exist. For backward compatibility, Windows user should opt OUT of Unix/Linux aliases. Therefore we should really introduce `Disable-UnixAliases`.\n",
      "created_at": "2016-08-22T04:49:12Z",
      "updated_at": "2016-08-22T04:49:12Z"
    },
    {
      "author": "GeeLaw",
      "author_association": "NONE",
      "body": "In reply to @JohnMHarrisJr \n\n> Sure, but what, on Windows, is the always-consistent path to curl? And why does one have to write the full path, anyway? Isn't that why the PATH variable exists, to make looking for software easier?\n\nSince `curl.exe` should not be used in PowerShell pipes (as it is a native tool, which outputs `string` in PowerShell, and suffer from encoding issues), the best practice is to\n\n``` PowerShell\nStart-Process curl -Arguments @(...) -RedirectStandardInput ... -RedirectStandardOutput ... -Wait -NoNewWindow;\n# Use `start` if you are in an interactive session.\n```\n\nAnd then use the output file with custom encoding/format. It is also a best practice not to use aliases in scripts, but this is not generally followed.\n",
      "created_at": "2016-08-22T04:58:41Z",
      "updated_at": "2016-08-22T04:58:41Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "@jkinz No need to attempt this search/replace operation with regex.   PowerShell supplies a parser for PowerShell script which returns an AST that you can then work with.  Then you know when you're replacing commands instead of comments or terms in a string.  I don't claim the following PowerShell script is bug free but it will give you an idea of what's possible:\n\n``` powershell\n$script = @'\n\n    $webReq = wget http://foo.com\n\n    $SRC = \"http://downloads.sourceforge.net/project/gnuwin32/wget/1.11.4-1/wget-1.11.4-1-bin.zip?r=&ts=1471838991&use_mirror=netcologne\"\n    $DST = \"$env:temp/wget-bin.zip\"\n\n    Invoke-WebRequest $SRC -OutFile $DST\n\n    $webReq = wget https://github.com\n    $webReq.Content[0..100]\n}\n'@\n\n# Parse the script\n$errs = $tokens = $null\n$ast = [System.Management.Automation.Language.Parser]::ParseInput($script, [ref]$tokens, [ref]$errs)\n\n# Look in the AST for all commands\n$commands = $ast.FindAll({\n    param($Ast)\n    if ($Ast -isnot [System.Management.Automation.Language.CommandAst]) {\n        return $false\n    }\n    if ($Ast.DefiningKeyword) {\n        return $false\n    }\n\n    return ($null -ne $Ast.GetCommandName())\n}, $true)\n\n\"*\" * 80\n\"Script before: \" + $script\n\n$scriptText = [System.Text.StringBuilder]::new($script)\n\n# Replace each alias with its resolved command name\nfor ($i = $commands.Count - 1; $i -ge 0 ; $i--) {\n    $command = $commands[$i]\n    $commandName = $command.GetCommandName()\n    $aliasInfo = Get-Alias | Where-Object {$_.Name -eq $commandName}\n    if ($null -ne $aliasInfo) {\n        $commandElement = $command.CommandElements | Where-Object Value -eq $commandName\n        $extent = $commandElement.Extent\n        $length = $extent.EndOffset - $extent.StartOffset\n\n        $scriptText.Remove($extent.StartOffset, $length) > $null\n        $scriptText.Insert($extent.StartOffset, $aliasInfo.ResolvedCommand.Name) > $null\n    }\n}\n\n\"*\" * 80\n\"Script after: \" + $scriptText.ToString()\n```\n\nThis will change the original script to:\n\n```\n********************************************************************************\nScript after: \n    $webReq = Invoke-WebRequest http://foo.com\n\n    $SRC = \"http://downloads.sourceforge.net/project/gnuwin32/wget/1.11.4-1/wget-1.11.4-1-bin.zip?r=&ts=1471838991&use_mirror=netcologne\"\n    $DST = \"$env:temp/wget-bin.zip\"\n\n    Invoke-WebRequest $SRC -OutFile $DST\n\n    $webReq = Invoke-WebRequest https://github.com\n    $webReq.Content[0..100]\n}\n```\n",
      "created_at": "2016-08-22T06:32:16Z",
      "updated_at": "2016-08-22T06:32:16Z"
    },
    {
      "author": "ShinNoNoir",
      "author_association": "NONE",
      "body": "@rkeithhill \nThat is definitely a better solution.\n\n(It would break though if a script would heavily rely on evaluating strings to do some computation, like in the example below, but that's such a corner case and an example of really, really bad coding practices.)\n\n```\n$evil = \"wget\"\n$webReq = & $evil https://github.com\n\nfunction moreEvil() { \"wget\" }\n$webReq = & (iex moreEvil) https://github.com\n```\n",
      "created_at": "2016-08-22T06:55:51Z",
      "updated_at": "2016-08-22T06:55:51Z"
    },
    {
      "author": "michael-o",
      "author_association": "NONE",
      "body": "Business as usual, Microsoft broke other people's stuff and now they are rejecting to fix that. History repeats.\n",
      "created_at": "2016-08-22T08:41:04Z",
      "updated_at": "2016-08-22T08:41:04Z"
    },
    {
      "author": "torgro",
      "author_association": "NONE",
      "body": "@Michael-o Business as usual, Linux users still regret that they did not come up with objects in the pipeline and are still struggling with bash-ing text. That being said, you are really good at it! \ud83d\udc4d \n\nThey are starting a RFC and they have \"rejected\" the PR for the time being. If you had a billion potential users relying on your product, you should take great care before introducing breaking changes. I am confident that @jpsnover will find a solution and share it with the community.\n\n@BiIIGates What a lovely trick \ud83d\udc4d\n\nNow, do some good, start fixing Powershell bugs (if you can find them) and create PR!\n",
      "created_at": "2016-08-22T09:05:52Z",
      "updated_at": "2016-08-22T09:05:52Z"
    },
    {
      "author": "lfckop",
      "author_association": "NONE",
      "body": "@jpsnover, I'm very sorry, and I deleted the comment.\n",
      "created_at": "2016-08-22T12:19:31Z",
      "updated_at": "2016-08-22T12:19:31Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "This \"precaution\" is ridiculous. If somebody has the ability to change your PATH, they can also do many other things and you've already, as the saying goes, screwed the pooch.\n\nIt doesn't matter, I suppose. The better question is this: What exactly is the exact path to curl on Windows? I've never seen anything installed in a predictable location.\n\nOn August 21, 2016 7:08:47 PM EDT, jkinz notifications@github.com wrote:\n\n> @ShinNoNoir \n> \n> > > @jkinz\n> > \n> > Then quoting you from an earlier post:\n> > \n> > >  Commands should be invoked by pathname.\n> > \n> > Nothing needs to be fixed then? If you want to use wget or curl,\n> > invoke it by their full path, since, hey, this is the obvious way to do\n> > it? \n> \n> In a script?  yes, that is the best practice.  Otherwise there is a\n> security vulnerability that someone can place a same-named executable\n> on the $PATH and that false executable will be executed instead of the\n> one you intended. (But you knew that already... )   \n> \n> Some people (OK many people) save keystrokes by placing the full path\n> in a variable and invoking it indirectly.\n> \n> WGET=\"/usr/bin/wget\"\n> \n> This is another best practice.   If your scripts are being used by\n> other people in a production environment, you should consider these\n> precautions mandatory. \n\n## \n\nJohn M. Harris, Jr.\nPGP Key: f2ea233509f192f98464c2e94f8f03c64bb38ffd\n\nSent from my Android device. Please excuse my brevity.\n",
      "created_at": "2016-08-22T14:38:24Z",
      "updated_at": "2016-08-22T14:38:24Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "Wait, it's a string and therefore suffers encoding issues? How did that happen?.. Perhaps something should be learned from every modern shell dating back to bash..\n\nOn August 22, 2016 12:58:59 AM EDT, Gee Law notifications@github.com wrote:\n\n> In reply to @JohnMHarrisJr \n> \n> > Sure, but what, on Windows, is the always-consistent path to curl?\n> > And why does one have to write the full path, anyway? Isn't that why\n> > the PATH variable exists, to make looking for software easier?\n> \n> Since `curl.exe` should not be used in PowerShell pipes (as it is a\n> native tool, which outputs `string` in PowerShell, and suffer from\n> encoding issues), the best practice is to\n> \n> ``` PowerShell\n> Start-Process curl -Arguments @(...) -RedirectStandardInput ...\n> -RedirectStandardOutput ... -Wait -NoNewWindow;\n> # Use `start` if you are in an interactive session.\n> ```\n> \n> And then use the output file with custom encoding/format. It is also a\n> best practice not to use aliases in scripts, but this is not generally\n> followed.\n\n## \n\nJohn M. Harris, Jr.\nPGP Key: f2ea233509f192f98464c2e94f8f03c64bb38ffd\n\nSent from my Android device. Please excuse my brevity.\n",
      "created_at": "2016-08-22T14:41:14Z",
      "updated_at": "2016-08-22T14:41:14Z"
    },
    {
      "author": "jpsnover",
      "author_association": "CONTRIBUTOR",
      "body": "@johnMHarrisJr quick Q - what is your level of PowerShell usage/expertise and what do you use it for?\n",
      "created_at": "2016-08-22T14:45:26Z",
      "updated_at": "2016-08-22T14:45:26Z"
    },
    {
      "author": "GeeLaw",
      "author_association": "NONE",
      "body": "In reply to @JohnMHarrisJr \n\n> Wait, it's a string and therefore suffers encoding issues? How did that happen?.. Perhaps something should be learned from every modern shell dating back to bash..\n\nAFAIK bash doesn't do anything to the pipeline stream. It's up to each utility to understand the encoding etc (i.e., the pipe is binary). In PowerShell (till 5.0) there is not a \"raw binary\" pipeline and anything from/to a native utility is a `string`. In my experience, PowerShell does not work well with UTF8 w/o BOM.\n",
      "created_at": "2016-08-22T14:50:44Z",
      "updated_at": "2016-08-22T14:50:44Z"
    },
    {
      "author": "jpsnover",
      "author_association": "CONTRIBUTOR",
      "body": "@lfckop np.  I suspect you are correct but we just don't have the data and experience shows that when you have a billion users, a very large group of people use all the edge cases. :-(\n",
      "created_at": "2016-08-22T14:53:45Z",
      "updated_at": "2016-08-22T14:53:45Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "I have never used PowerShell, but I understand the concept. I do not use PowerShell now nor do I plan to any time soon.\n\nOn August 22, 2016 10:45:45 AM EDT, Jeffrey Snover notifications@github.com wrote:\n\n> @johnMHarrisJr quick Q - what is your level of PowerShell\n> usage/expertise and what do you use it for?\n\n## \n\nJohn M. Harris, Jr.\nPGP Key: f2ea233509f192f98464c2e94f8f03c64bb38ffd\n\nSent from my Android device. Please excuse my brevity.\n",
      "created_at": "2016-08-22T15:05:02Z",
      "updated_at": "2016-08-22T15:05:02Z"
    },
    {
      "author": "jpsnover",
      "author_association": "CONTRIBUTOR",
      "body": "@johnMHarrisJr. Np. That helps calibrate the input. Thanks for providing input to make PowerShell great  \n",
      "created_at": "2016-08-22T15:10:06Z",
      "updated_at": "2016-08-22T15:10:06Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "I don't think that is enough to understand my background. I don't use PowerShell, but I understand it to the point that I can help others with simple things and I do work with people who do use it. I don't have any Windows machines, so I haven't had a use for PowerShell.\n\nOn August 22, 2016 11:10:24 AM EDT, Jeffrey Snover notifications@github.com wrote:\n\n> @johnMHarrisJr. Np. That helps calibrate the input. Thanks for\n> providing input to make PowerShell great  \n\n## \n\nJohn M. Harris, Jr.\nPGP Key: f2ea233509f192f98464c2e94f8f03c64bb38ffd\n\nSent from my Android device. Please excuse my brevity.\n",
      "created_at": "2016-08-22T15:15:11Z",
      "updated_at": "2016-08-22T15:15:11Z"
    },
    {
      "author": "jpsnover",
      "author_association": "CONTRIBUTOR",
      "body": "@johnMHarrisJr. Well there's nothing holding you back now that we're on Linux.  :-). Give it a try.  You might like it.  \n\nCheers!\n",
      "created_at": "2016-08-22T15:18:57Z",
      "updated_at": "2016-08-22T15:18:57Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "@jpsnover I don't like the object-oriented approach when it comes to shells, and bash is the de facto standard on GNU/Linux, so I don't see a reason to switch to another shell. I am also against builtins, in bash terminology, cmdlets in PowerShell. There seem to be a lot of cmdlets in PowerShell by default. One of the major issues I have is that PowerShell doesn't support Readline, so many common key combinations will not work, not that I have tested to see that they were not implemented in another way, such as C-w killing the previous word, C-a taking you to the start of a line and C-k cutting the line past the cursor. Personal projects and personal use aside, the majority of the systems I manage are running FreeBSD. Has there been any effort to test PowerShell on FreeBSD?\n",
      "created_at": "2016-08-22T15:30:03Z",
      "updated_at": "2016-08-22T15:30:03Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@JohnMHarrisJr - PSReadline implements Windows, Emacs, and Vi mode key bindings, and defaults to Emacs bindings on Linux.  You'll find it very familiar if you're coming from GNU readline.\n",
      "created_at": "2016-08-22T15:35:19Z",
      "updated_at": "2016-08-22T15:35:19Z"
    },
    {
      "author": "omrsafetyo",
      "author_association": "NONE",
      "body": "@JohnMHarrisJr I hate to be that guy, but you really are missing out.  Prior to migrating to a Windows environment, I was scripting in ksh and bash on SCO, AIX, and various flavors of Linux.  It seemed really great, and I was definitely a person that thought Windows was awful, simply because of its lack of a functional shell.\n\nBut then @jpsnover came along and really did the best thing that has happened to Windows in its entire history, and created (hands down) the most powerful shell to date on any OS.  PSv1 was a little clunky, and left a lot to be desired, but once v2 came out, PS became the best scripting language/shell that there has ever been.  And really it has only become better with each iteration.\n\nNow, I totally agree if you want to tell me that there should be some plugin that allows vi style editing at the commandline, as that was definitely pretty awesome - but honestly I don't even really miss that anymore, as it is no longer muscle-memory.  But being able to pass objects through a pipeline at the command prompt, or in a script is absolutely amazing.  I administer over 700 VMs, and I can do the same actions on all of them in minutes.  I don't have to write a complex LDAP query, or regex expression to find all those computers - I just filter them based on properties of the ADComputer object sitting right there in the pipeline.  Neat!   I have thousands of databases across 100s of SQL Servers, and again, in minutes I can query all of those databases for statistics or etc., filtering again on properties of the databases themselves.  I can tell you the growth settings, sizes, number of users connected - in just a few lines of code.  I can do this across the enterprise with less key strokes than I could on one single server using T-SQL alone.  I can manage my entire VMWare environment right from Powershell.  AWS - all from Powershell.  Pretty near any vendor I have has a Powershell module of some form - and if it doesn't, it has an API - which I can either use directly in Powershell, or write a Powershell module for.  It's extensible, it's powerful, it's portable.  \n\nToday, I have about 65,000 lines of powershell code across 650 scripts.  And because it does have a lot of built-ins, I don't typically have to worry about the state of the machines I run it on.  For the most part, they have Powershell so they will run.  Now, there may be some modules like SQL server, or Active Directory that aren't always available - and for those I can create a constrained endpoint on a machine that does have those dependencies, and I can invoke those modules remotely and still get the objects back to the pipeline on my calling machine.  \n\nAnyway, off my soap box.  The fact of the matter is, it was a mistake to use curl and wget initially as aliases for a command that does not do exactly the same things with exactly the same parameters. @jpsnover has acknowledged that.  But the fact is, it happened.  And because it happened, there will be at least 1 _paying customer_ out there that has utilized those aliases in a critical script, where the author has not been with the company for 5 years, and nobody knows what the script is, what it does, or where it's running.  And if they simply remove the alias, that script will break when that customer updates, and no one will know what to do or how to fix it, all they will know is some critical thing broke.  Microsoft isn't Linux.  Its admins aren't quite as up on the DevOps movement, and so Windows admins are not purposely breaking things to see how fast they can recover, or identify the issue, etc.  A lot of admins have dinosaur applications, dinosaur scripts, and when things break they really break, and the admins are not flexible enough to identify and fix the problem.  So, MS has at least some duty to try to prevent breaking that customer, regardless of how other businesses or development teams/collaborations do it.  So they will use due diligence, come up with a plan, and it will hopefully be far better than just removing the alias and breaking things.\n",
      "created_at": "2016-08-22T16:05:37Z",
      "updated_at": "2016-08-22T16:05:37Z"
    },
    {
      "author": "MickyBalladelli",
      "author_association": "NONE",
      "body": "@omrsafetyo awesome post\n",
      "created_at": "2016-08-22T16:32:13Z",
      "updated_at": "2016-08-22T16:32:13Z"
    },
    {
      "author": "michael-o",
      "author_association": "NONE",
      "body": "@JohnMHarrisJr Fully agree, I do not consider any Linux distro, except maybe Gentoo, to be a usable Unix-like OS. Hence, I see no reason to use a tool which isn't available on FreeBSD as well.\n",
      "created_at": "2016-08-22T16:46:28Z",
      "updated_at": "2016-08-22T16:50:57Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@omrsafetyo - if you want vi mode, then add this to your profile: `Set-PSReadlineOption -EditMode vi`\n",
      "created_at": "2016-08-22T17:18:30Z",
      "updated_at": "2016-08-22T17:18:30Z"
    },
    {
      "author": "jkinz",
      "author_association": "NONE",
      "body": "@ ShinNoNoir \n\nYou're proposing a \"fix\" that does a blind search&replace, no matter where the string \"wget\" appears in the file? Any idea what your fix does to a hypothetical script like the one below?\n\nYou missed the appended note: \n\n> > (authors note - I suspect really fixing the scripts may require handling additional details, but this is the core of it. ) \n\nReally son, I've been coding since 1976, and I've done huge automated code changes. \n\nIf your code requires a confirmation for each change on a call to a function like wget, then you have very sad coding practices. \n",
      "created_at": "2016-08-22T18:21:24Z",
      "updated_at": "2016-08-22T18:21:24Z"
    },
    {
      "author": "jkinz",
      "author_association": "NONE",
      "body": "@ rkeithhill \n\nVery nice.   :-) \n",
      "created_at": "2016-08-22T18:23:33Z",
      "updated_at": "2016-08-22T18:23:33Z"
    },
    {
      "author": "ShinNoNoir",
      "author_association": "NONE",
      "body": "@jkinz\nThat note was not there, initially.\n\n> Really son, I've been coding since 1976, and I've done huge automated code changes.\n\nThen you ought to have learnt what regular languages are.\n\n> If your code requires a confirmation for each change on a call to a function like wget, then you have very sad coding practices.\n\nTell that to a customer whose code you're breaking with your auto-fix script. Such a script is fine if you're applying it to your own codebase and you know what you're doing (because you have additional knowledge about the code), but don't propose it as a _general_ fix for everyone.\n",
      "created_at": "2016-08-22T18:44:30Z",
      "updated_at": "2016-08-22T18:44:30Z"
    },
    {
      "author": "jkinz",
      "author_association": "NONE",
      "body": "@ ShinNoNoir \n\n> but don't propose it as a general fix for everyone.\n\nIt is a general fix. And as I said before, thats the core of the idea and that additional details will be needed. \n\nYou can stop looking for things to correct now. You don't get any points for pointing out things that had no attempt or intent to address. This is not a discussion about the color of the bikeshed.   Note again that this was not offered as a specific solution, but the core of an idea. \n\nSince I've worked on projects that automatically edited and ported millions of lines of code, I have no fear that writing tools or scripts that perform such a change on these scripts can be done pretty easily.  \n\nHave an excellent day. \n",
      "created_at": "2016-08-22T21:37:27Z",
      "updated_at": "2016-08-22T21:38:18Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Automated fixing is sometimes possible, but it's not foolproof and not as straightforward as we'd like.\n\nThere are cases where the use of `curl` is completely ambiguous - we could not be 100% certain if `curl.exe` or `Invoke-WebRequest` was the intended command.\n\nAs pointed out previously, it's also possible to call commands in an obscure or obfuscated manner, e.g.\n\n``` powershell\n$cmd = \"curl\"\n& $cmd\n```\n\nFurthermore - PowerShell is frequently called from compiled code - most often C# but occasionally other languages.  Again, it's certainly possible to analyze binaries or C# or F# or whatever language, but that just increases the complexity of this approach.  And as @jpsnover mentioned earlier - with enough users, we tend to see pretty much everything you can imagine.\n",
      "created_at": "2016-08-22T21:49:50Z",
      "updated_at": "2016-08-22T21:49:50Z"
    },
    {
      "author": "giuliov",
      "author_association": "NONE",
      "body": "I would propose to add something like this\n\n```\n#Requires -NoDefaultAlias\n```\n\nto Powershell. It should work this way: any use of alias not defined within the script itself generates an error.\n\nUsing a directive is common in scripts to specify the minimal version and will be beneficial in the general case.\n",
      "created_at": "2016-08-23T08:47:27Z",
      "updated_at": "2016-08-23T08:59:59Z"
    },
    {
      "author": "JohnMH",
      "author_association": "NONE",
      "body": "@lzybkr One of the major issues is that many users on Windows don't know that they should be typing '.exe' because it doesn't show 'exe' in Explorer. I have found this to be a major issue with my colleagues as well as with scripts by people on GitHub that we pointed out earlier in this thread. \n",
      "created_at": "2016-08-23T15:20:17Z",
      "updated_at": "2016-08-23T15:20:17Z"
    },
    {
      "author": "luisfarzati",
      "author_association": "NONE",
      "body": "You made a very bad decision when implementing the aliases. Now it's done. There's no point in discussing how bad did you do or how this was yet another case of MS doing what it wants (and doing it wrong in the process).\n\nThe point here is there's no solution that will make both sides happy.\n- If you remove the aliases you'll be breaking production scripts out there.\n- If you keep the aliases, let's forget about the whole Bash on Windows flares, because it's not really serious.\n\nI think the most sane decision is to remove the aliases and take proper responsibility:\n\n1- review all the aliases (not only `wget` or `curl`), understand potential conflicts;\n2- deprecate the aliases immediately; print warnings when used;\n3- implement something like @giuliov mentioned above;\n4- build tooling that people can use to translate their scripts (or make them running in a transient environment where the aliases still exist) in case they want to keep relying on this behavior;\n5- send newsletters to all the subscribed developers;\n6- make communication on all developer community forums, chats, workspaces;\n7- you want to further help the community? build a bot that queries GitHub, Bitbucket and other popular source code repositories in a way similar to what @joshka wrote, and automatically create an issue there telling what's going on;\n8- prepare your Support Center to deal with the issues from the paying customers;\n9- release the changes X months from now.\n",
      "created_at": "2016-08-24T13:46:49Z",
      "updated_at": "2016-08-24T13:46:49Z"
    },
    {
      "author": "Atomosk",
      "author_association": "NONE",
      "body": "@bagder Well, \"If the mountain won't come to Muhammad then Muhammad must go to the mountain\".\nMaybe you can rename curl.\n",
      "created_at": "2016-08-24T15:33:50Z",
      "updated_at": "2016-08-24T15:33:50Z"
    },
    {
      "author": "AlManja",
      "author_association": "NONE",
      "body": "Probably off topic a little bit, but I will just keep stay away from windows as I'm already doing it and be happy :-)\n",
      "created_at": "2016-08-24T15:36:07Z",
      "updated_at": "2016-08-24T15:36:07Z"
    },
    {
      "author": "infowolfe",
      "author_association": "NONE",
      "body": "@luisfarzati I don't really have a dog in this fight as I personally find PowerShell to be just short of abhorrent...  but your recommendations are the most sensible. I was going to actually recommend your suggestion 2 as well, as it's most sensible. Throw errors when people are doing stupid things. If they're using `wget` or `curl` within the wrong context, they should be redirected to the _proper_ command that they're aliases of and told to immediately update their scripts via a descriptive error message.\n",
      "created_at": "2016-08-24T17:42:39Z",
      "updated_at": "2016-08-24T17:42:39Z"
    },
    {
      "author": "luisfarzati",
      "author_association": "NONE",
      "body": "After thinking it again, #4 on my post above would be really easy and simple to understand. Maybe not quite elegant, but hey... we can't ask for fanciness when we have a wrong implementation of `wget`. :)\n\nWhat if you just provide a simple runner that lets you run the script in a way that any call to those aliases keep working as expected?\n\nNo changes to your scripts, just call them with a separate command, or maybe not even a command, just an argument modifier like `--legacy-aliases` or something.\n",
      "created_at": "2016-08-24T18:18:35Z",
      "updated_at": "2016-08-24T18:19:04Z"
    },
    {
      "author": "ShinNoNoir",
      "author_association": "NONE",
      "body": "@luisfarzati \n\n> No changes to your scripts, just call them with a separate command, or maybe not even a command, just an argument modifier like `--legacy-aliases` or something.\n\nWhich means that if a script is scheduled to run somewhere, and PowerShell has been updated on that machine, it could potentially break because people forgot to add the new command flag?\n",
      "created_at": "2016-08-24T18:39:31Z",
      "updated_at": "2016-08-24T18:39:31Z"
    },
    {
      "author": "luisfarzati",
      "author_association": "NONE",
      "body": "@ShinNoNoir Yes, that's why my point #2 above is about PS complaining for some reasonable long time, which gives you enough time to review and fix. As with any other service, you don't upgrade PowerShell just because. Specially in production environments. Would you upgrade mysql, redis, Node, nginx, etc without reading implications, changelog, potential drawbacks? Don't think so.\n\nIf you are involved in Windows and specifically PowerShell development, there's a good chance you found out about this over the 2, 3, 4?-month span since deprecation notice. #5, #6 and #7 should help you get the news somewhere.\n\nBut, if you want to be more conservative, maybe the switch to the \"new PowerShell behavior\" could be configured at upgrade time. Simple Yes/No dialog which can be reconfigured again later via command line, registry, whatever Windows developers like. PS should then also include a way for a script to determine if it's running in legacy aliases mode or not.\n\nOn Wed, Aug 24, 2016 at 3:39 PM, Raynor Vliegendhart <\nnotifications@github.com> wrote:\n\n> @luisfarzati https://github.com/luisfarzati\n> \n> No changes to your scripts, just call them with a separate command, or\n> maybe not even a command, just an argument modifier like --legacy-aliases\n> or something.\n> \n> Which means that if a script is scheduled to run somewhere, and PowerShell\n> has been updated on that machine, it could potentially break because people\n> forgot to add the new command flag?\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/PowerShell/PowerShell/pull/1901#issuecomment-242167062,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AAGj9S8em4Sq1-i6A3mTBxgTWimRTTsJks5qjI_0gaJpZM4Jn1fs\n> .\n",
      "created_at": "2016-08-24T18:55:30Z",
      "updated_at": "2016-08-24T18:57:08Z"
    },
    {
      "author": "omrsafetyo",
      "author_association": "NONE",
      "body": "> Which means that if a script is scheduled to run somewhere, and PowerShell has been updated on that machine, it could potentially break because people forgot to add the new command flag?\n\n@ShinNoNoir this is exactly why I don't like the idea of the \"Remove-All-Aliases-That-Are-Linux-Commands\" function that can be inserted into a profile or at the top of scripts - again this would require knowing what scripts are using aliases, and which aren't, and a massive community effort to determine which scripts/profiles need updating before upgrading - essentially the same effort that would be required to simply go through and convert any instances of those aliases to the proper fully-fledged commandlet names.\n",
      "created_at": "2016-08-24T19:04:15Z",
      "updated_at": "2016-08-24T19:04:15Z"
    },
    {
      "author": "luisfarzati",
      "author_association": "NONE",
      "body": "@omrsafetyo But Nathan, you see, the problem is this:\n\nI use my Linux notebook and use `wget` and it behaves as expected.\nI use my Macbook and use `wget` and it behaves as expected.\nI use my Windows desktop and use `wget` (which I previously downloaded) and it behaves as expected.\nI login to some Amazon EC2 instance and use `wget` and it behaves as expected.\nI configure some Jenkins job and make it use `wget` and it behaves as expected.\n\nBut -- in PowerShell, `wget` is a completely different beast. You have something that is practically as universal as `echo`, that responds differently in just **one** specific case: PowerShell.\n\nThat doesn't make any sense. Not just for *nix users, or OSS developers. It shouldn't make sense for anyone, including Windows/PS developers.\n\nThere was a time when MS did things like this all the time, remember the web?\n\nIn recent years they have shown a change of convictions and a solid commitment to the OSS community. This is one of the challenges they need to face. The right answer, not because I say so, but because they are the ones trying to amend things, is to make `wget` respond as `wget`. We all should be asking for this, hopefully _after having learned a few painful lessons in the past decade of the web_.\n\nCome on, this is not the first time a breaking change is introduced in a tool or a system and won't be the last. Breaking changes, although not frequent, are part of our challenges as developers. Mass-consumed APIs suffer from breaking changes from time to time and it's not the end of the world, specially with proper notice, feedback and community support.\n",
      "created_at": "2016-08-24T21:47:52Z",
      "updated_at": "2016-08-24T21:47:52Z"
    },
    {
      "author": "luisfarzati",
      "author_association": "NONE",
      "body": "The good thing about being part of the OSS universe, is that you are now part of a community larger than whatever you may have know before. You know what? If you decide to deprecate the aliases and schedule the definitive removal at some point in the future, you'll probably find out you don't even have to do half of the things I enumerated before: the community itself will provide help and guidance, even build the tools. That's how this works! :)\n",
      "created_at": "2016-08-24T21:59:36Z",
      "updated_at": "2016-08-24T22:21:24Z"
    },
    {
      "author": "thedaveking",
      "author_association": "NONE",
      "body": "What if millions of Linux systems were deployed with powershell as an alias to bash?\n",
      "created_at": "2016-08-24T23:33:47Z",
      "updated_at": "2016-08-24T23:33:47Z"
    },
    {
      "author": "justjanne",
      "author_association": "NONE",
      "body": "@thedaveking Good idea! Let's deploy a version of Firefox that auto-redirects all microsoft.com links to mozilla.com instead. (Only microsoft.com. URLs will stay without the redirect).\n\nLet's see how fast Microsoft starts suing the shit out of the people responsible. That should be the standard held up here, too.\n\nEDIT: Obvious exaggerated example is obvious, but quick action is necessary before people start hard-coding these workarounds to get wget into their scripts.\n",
      "created_at": "2016-08-25T00:41:25Z",
      "updated_at": "2016-08-25T00:45:34Z"
    },
    {
      "author": "luisfarzati",
      "author_association": "NONE",
      "body": "This is not helping. Not only the OP asked to \"stay polite and to the point when commenting here\", but also sadly half of this thread is worthless and doesn't bring any ideas or value to the discussion. \n",
      "created_at": "2016-08-25T01:41:13Z",
      "updated_at": "2016-08-25T01:41:13Z"
    },
    {
      "author": "GeeLaw",
      "author_association": "NONE",
      "body": "@luisfarzati I don't want to spend much time talking the history of Web but basically the fact is that the web standards were created by Microsoft haters and were dedicatedly incompatible with what had been implemented by Microsoft before the standards came out. Of course Microsoft was not responding fast to the changing Web. So the Web should be a lesson for us, but in a different way/sense.\n\nNot all users of PowerShell are part of community and you can't expect them to respond to such changes. And not to mention no one here suggesting the removal really cares about \"the serious commitment to backward compatibility.\"\n\nThe removal is possible, only if you keep these things there for all old scripts. For that, there are many ways, excluding trying to notify everyone before something breaks.\n",
      "created_at": "2016-08-25T02:54:28Z",
      "updated_at": "2016-08-25T02:54:28Z"
    },
    {
      "author": "jpsnover",
      "author_association": "CONTRIBUTOR",
      "body": "![1127](https://cloud.githubusercontent.com/assets/6188114/17955137/da776db4-6a34-11e6-9301-e7dece9bbaca.gif)\n\nLet's stick to the topic and take the other discussions to a different forum so people that care about the issue don't have to struggle with a low signal-to-noise ratio.\n",
      "created_at": "2016-08-25T02:58:32Z",
      "updated_at": "2016-08-25T02:58:32Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Thanks for all the feedback. I'm locking this thread as we've gotten sufficient feedback and the conversation is bordering on being not useful.\n\nThe team has published an [RFC](https://github.com/PowerShell/PowerShell-RFC/blob/master/1-Draft/RFC0007-Weak-Aliases.md) and you can discuss the RFC [here](https://github.com/PowerShell/PowerShell-RFC/issues/16).\n",
      "created_at": "2016-08-25T17:01:09Z",
      "updated_at": "2016-08-25T17:01:09Z"
    }
  ],
  "created_at": "2016-08-18T19:34:14Z",
  "number": 1901,
  "state": "closed",
  "title": "initialsession: remove curl and wget aliases",
  "updated_at": "2016-08-25T17:01:20Z"
}