{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13996",
  "author": "KristiyanGK",
  "body": "When used to invoke multiple DSC Resource the Invoke-DscResource cmdlet works really slow. This is caused by a lot of repeating operations (especially with Test and Set methods).\r\n\r\nThe performance can potentially be increased with any of the following:\r\n- Having a $Method input that accepts a parameter for executing both Test and Set methods (similar to DSC standard). This way the internal Dsc object can be reused and does need to be found or created twice.\r\n- Creating the Dsc object not in a separate runspace but instead creating it in a a scriptblock and then dot sourcing it.\r\n```powershell\r\n$block = @\"\r\nusing module '$ModuleName'\r\n\r\n[$($invokeSplatParams['Name'])]::new()\r\n\"@\r\n\r\n$dscObj = . ([ScriptBlock]::create($block))\r\n\r\nforeach ($key in $invokeSplatParams.Property.Keys) {\r\n   $dscObj.$key = $invokeSplatParams.Property[$key]\r\n}\r\n```\r\n- Having an optional flag for skipping DSC Resource validation and letting the user validate prior to it.\r\n\r\nSteps to reproduce\r\n\r\nInvoke a big quantity of DSC Resources with Invoke-DscResource. The examples are made using DSC Resources from VMware.vSphereDSC.\r\n\r\nExample used for measuring Invoke-DscResource performance\r\n```\r\n$dataCenterFolderInvokeSplat = @{\r\n    Name = 'DatacenterFolder'\r\n    ModuleName = 'VMware.vSphereDSC'\r\n    Property = @{\r\n        Server = '<Server here>'\r\n        Credential = '<Credentials here>'\r\n        Name = \"MyDatacentersFolder\"\r\n        Location = ''\r\n        Ensure = 'Present'\r\n    }\r\n}\r\n\r\nImport-Module 'PSDesiredStateConfiguration'\r\n\r\nMeasure-Command {\r\n    $state = Invoke-DscResource @dataCenterFolderInvokeSplat -Method Test\r\n\r\n    if (-not $state.InDesiredState) {\r\n        Invoke-DscResource @dataCenterFolderInvokeSplat -Method Set\r\n    }\r\n}\r\n```\r\n\r\nExample used for measuring LCM performance\r\n\r\n```powershell\r\nConfiguration Test {\r\n    Import-DscResource -ModuleName VMware.vSphereDSC\r\n\r\n    Node $AllNodes.NodeName {\r\n        foreach ($vCenter in $AllNodes.VCenters) {\r\n            $Server = $vCenter.Server\r\n            $User = $vCenter.User\r\n            $Password = $vCenter.Password | ConvertTo-SecureString -asPlainText -Force\r\n            $Credential = New-Object System.Management.Automation.PSCredential($User, $Password)\r\n\r\n            DatacenterFolder \"MyDatacentersFolder_$($Server)\" {\r\n                Server = $Server\r\n                Credential = $Credential\r\n                Name = \"MyDatacentersFolder\"\r\n                Location = ''\r\n                Ensure = 'Present'\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n$configurationData = @{\r\n    AllNodes = @(\r\n        @{\r\n            NodeName = 'localhost'\r\n            PSDscAllowPlainTextPassword = $true\r\n            VCenters = @(\r\n                @{\r\n                    Server = '<Server here>'\r\n                    User = '<User here>'\r\n                    Password = '<Password here>'\r\n                }\r\n            )\r\n        }\r\n    )\r\n}\r\n\r\nTest -ConfigurationData $configurationData\r\n\r\nMeasure-Command {\r\n    Start-Configuration -Path '.\\Test\\' -Wait -Force\r\n}\r\n```\r\n\r\n## Actual behavior\r\n\r\nThe following table shows measurements made by using 1 and 10 DSC Resources with Invoke-DscResource and Configurations with that many Resources for use with Start-DscConfiguration.\r\n\r\nThe measured time is the average result from 3 runs each and the measuring unit is in seconds. The measurement is calculated from the Measure-Command cmdlet result. \r\n\r\n| Resources Count/Execution type  | LCM | Invoke-DscResource  |\r\n| ------------------------------------ | ------|------------------------|\r\n| 1                                                   | 4s      | 8s                               |\r\n| 10 | 32s  | 61s |\r\n\r\n## Environment data\r\n|Name                      |     Value\r\n|--------------------  |-----------------------\r\n|PSVersion                |      7.0.3\r\n|PSEdition                 |     Core \r\n|GitCommitId            |        7.0.3\r\n|OS                             |Microsoft Windows 10.0.18363\r\n|Platform                     |  Win32NT\r\n|PSCompatibleVersions|           {1.0, 2.0, 3.0, 4.0\u2026}\r\n|PSRemotingProtocolVersion|      2.3\r\n|SerializationVersion           |1.1.0.1\r\n|WSManStackVersion          |    3.0\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "gaelcolas",
      "author_association": "NONE",
      "body": "My guess is that most of this slowness comes from `Get-DscResource` that's called when  running `Invoke-DscResource`, because it's ran every time, it lists all resources available in all `$Env:PSmodulePath`, and does it recursively through the paths...\r\n@KristiyanGK if you try to change your `$Env:PSModulePath` just before you run the `Invoke-DscResource` to only contain the folder that has your resource, it might get a little bit faster.\r\n\r\nAn potential way to optimise this could be to better support the pipeline in the `Invoke-DscResource` cmdlet, so that the listing of all available resources is done once and cached in the begin block, then the process block does the invocations.\r\nFor that the Parameters `Method` and `Property` should implement `ValueFromPipelineByPropertyName`.",
      "created_at": "2021-05-21T20:40:26Z",
      "updated_at": "2021-05-21T20:40:26Z"
    }
  ],
  "created_at": "2020-11-06T12:01:30Z",
  "number": 13996,
  "state": "open",
  "title": "Performance issues with Invoke-DscResource for multiple DSC resources",
  "updated_at": "2021-05-21T20:40:27Z"
}