{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11033",
  "author": "janegilring",
  "body": "# Steps to reproduce\r\n\r\n```powershell\r\nNew-PSDrive -Name git -PSProvider FileSystem -Root ~\\Git\r\ncd Git:\r\n1..5 | ForEach-Object -Parallel { \"Hello $_\"; sleep 1; } -ThrottleLimit 5\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nHello 1\r\nHello 2\r\nHello 3\r\nHello 4\r\nHello 5\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nForEach-Object: An unexpected error has occurred while processing ForEach-Object -Parallel input. This may mean that some \r\nof the piped input did not get processed. Error: System.Management.Automation.DriveNotFoundException: Cannot find drive. A drive with the name 'Git' does not exist.\r\n```\r\n\r\n# Environment data\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-preview.5\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-preview.5\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "/cc @PaulHigin \r\n\r\nMost likely an issue with scoping; perhaps we need to make sure to copy PSDrives to the new runspace?",
      "created_at": "2019-11-11T13:41:42Z",
      "updated_at": "2019-11-11T13:41:42Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "For Windows platform this can be mitigated by creating the PSDirve as persistent, but I see this isn't supported on non-Windows platforms.  I hesitate to transfer all drives from calling session to parallel sessions by default since performance is already an issue with most users.  But maybe it could be opt-in via a switch.  The workaround is to create the drive manually in the parallel script block.",
      "created_at": "2019-11-11T16:10:41Z",
      "updated_at": "2019-11-11T16:10:41Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "All drives might be a bad idea / not worth it, but I think it makes sense to check that the drive used for the \"current directory\" is available in the new session and create it if it's missing. \ud83d\ude42 ",
      "created_at": "2019-11-11T16:42:11Z",
      "updated_at": "2019-11-11T16:42:11Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "There are other things that a user might expect to be set up in the parallel running script, as was discussed in the RFC.  Currently the \"by design\" behavior is to run each parallel script in new runspace sessions with default initialization.  But I am wondering if we should have a `-UseExistingSessionState` parameter switch that initializes each parallel session from the current running sessions: imported modules, function definitions, PSDrives, type definitions.  Variables would be a problem because of threading issues, but maybe readonly variables can be transferred.  But the default behavior would be performant with standard session intialization.",
      "created_at": "2019-11-11T17:26:08Z",
      "updated_at": "2019-11-11T17:26:08Z"
    },
    {
      "author": "janegilring",
      "author_association": "NONE",
      "body": "Some additional information:\r\nMy need is not to bring the current location into the parallel sessions.\r\nI have a custom PSDrive defined in my PowerShell profile, and the location is set to this drive.\r\nWhen the current location is set to this drive, calling ForEach-Object -Parallel fails. My desire is to have it not fail when current location is set to the custom drive.\r\nOf course I can change current location to a different drive such as C: manually, but shouldn't ForEach-Object -Parallel work regardless of what the current location is? Custom drive or a generic FileSystemProvider such as C:",
      "created_at": "2019-12-04T07:29:50Z",
      "updated_at": "2019-12-04T07:29:50Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "ForEach-Object -Parallel now works with a PSDrive, but only if you make it persistent:\r\n\r\n```powershell\r\nNew-PSDrive -Name Z -PSProvider FileSystem -Root \\\\scratch\\temp -Persist\r\nPS Z:\\> dir -r *.txt | foreach -Parallel { $_.Name }\r\n```\r\nOtherwise we need something like `-UseExistingSessionState` that I mention above, to initialize each parallel session to be the same as the current session, and would include custom PSDrives.",
      "created_at": "2019-12-04T16:37:39Z",
      "updated_at": "2019-12-04T16:37:39Z"
    },
    {
      "author": "joshuahipple",
      "author_association": "NONE",
      "body": "I agree that something like \"- UseExistingSessionState\" parameter is going to be needed to work with ConfigurationManager via PowerShell.\r\n\r\nThe \"-Persist\" open is only valid for Filesystems.  I am attempting to work with user objects in parallel in my CM environment and it fails.\r\n\r\nPS C:\\> New-PSDrive -Name $SiteCode -PSProvider CMSite -Root $ProviderMachineName -Persist\r\n\r\n_New-PSDrive: When you use the Persist parameter, the root must be a file system location on a remote computer._\r\n\r\n",
      "created_at": "2020-01-16T20:23:47Z",
      "updated_at": "2020-01-16T20:24:34Z"
    }
  ],
  "created_at": "2019-11-11T13:18:20Z",
  "labels": [
    "WG-Engine",
    "Issue-Discussion"
  ],
  "number": 11033,
  "state": "open",
  "title": "ForEach-Object -Parallel fails when current location is a custom PSDrive",
  "updated_at": "2020-01-31T14:49:27Z"
}