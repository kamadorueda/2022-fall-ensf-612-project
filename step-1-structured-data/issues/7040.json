{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7040",
  "author": "cspotcode",
  "body": "When writing a PowerShell module with internal functions, how do I prevent those functions from being overridden by user aliases with the same name?\r\n\r\n```powershell\r\n# my-module.psm1\r\n\r\n# An internal, helper function.\r\n# Private to this module.\r\n# Should not be visible to, nor affected by, outside factors.\r\nfunction e {\r\n    echo 'doing internal stuff'\r\n}\r\n\r\n# Exported function\r\nfunction mymoduleaction {\r\n    e\r\n}\r\nExport-ModuleMember -Function mymoduleaction\r\n```\r\n\r\nIf the user has created an `e` alias, for example in their $profile, my module will break because it will invoke the user-defined alias.  This is never desirable.\r\n\r\nHow do I ensure my module's internal functions are unaffected by aliases?\r\n\r\nThe user cannot be expected to know and avoid the names of all their module's non-exported functions, nor can a module or script be expected to detect and avoid all user-created aliases.  What is the solution to this situation?\r\n\r\nRelated: https://windowsserver.uservoice.com/forums/301869-powershell/suggestions/11088882-scripts-need-better-isolation-from-the-user-s-glob",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@cspotcode While this is theoretically an issue, in practice, if you use reasonable naming for your module members it won't be a problem e.g. don't give members 1 or 2 letter names. But if you really want to guarantee no collisions, then you could use module-qualified names\r\n```powershell\r\nmymodule\\e args...\r\n```\r\nOf course, someone could have created an alias that matched this name (however unlikely that might be) so if you want to be even more specific, for functions you could do: \r\n```powershell\r\n& $function:e  args...\r\n```\r\nand for cmdlets\r\n```powershell\r\n& (get-command -type cmdlet foo) args...\r\n```\r\nAnd finally, if you're _really_ concerned about getting exactly the right cmdlet, you could use the name of the cmdlet's implementing type to do the invocation\r\n```powershell\r\n& $executioncontext.InvokeCommand.GetCmdletByTypeName(\"My.Cmdlet.TypeName\") args...\r\n```\r\n",
      "created_at": "2018-06-13T14:26:53Z",
      "updated_at": "2018-06-13T14:26:53Z"
    }
  ],
  "created_at": "2018-06-11T05:35:37Z",
  "number": 7040,
  "state": "open",
  "title": "module and script functions shadowed by user-specified aliases; how to avoid this?",
  "updated_at": "2018-06-13T18:56:43Z"
}