{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13468",
  "author": "Jaykul",
  "body": "There really should not be any commands with [a switch like `-Paged`](https://github.com/PowerShell/PowerShell/blob/485ec44005bdc4b4d4c410e8ae2ca2010b79b0fe/src/System.Management.Automation/help/HelpCommands.cs#L227) or `-Paging` except `Out-Host`\r\n\r\nGranted, the `-Paging` switch on `Out-Host` needs improvement, but we _definitely_ do not want that better implementation to come on some other command! That would just be confusing!\r\n\r\nSome thoughts regarding `Get-Help -Paged` that seem obvious, but which don't appear to have been address. (I'll admit I've been off in la-la land for awhile, but I'm reasonably sure there's no RFC, and I can't find anywhere else this has been discussed).\r\n\r\n1. To help new users (by making the help more usable), we should do so in a manner that's _consistent with how the rest of PowerShell works_, rather than breaking the PowerShell output model by having a `Get` command swap to another output buffer instead of streaming output. Maybe you meant to write a `Show-Help` command?\r\n2. To improve paging in PowerShell, _we should improve `Out-Host -Paging`_. It's terribly minimal right now, and I doubt anyone uses it in lieu of `more` or `most` or `less` except in very locked-down environments.\r\n3. To avoid needing to write ` | oh -pa` (or `| Out-Host -Paging`) we should create _a way to provide hints to the default host output_ that we want paging, rather than build a whole new pager into the Help command. Perhaps a magic property on the object, or an ANSI sequence (or something) that `Out-Host` could pick up on -- something that **any** command could set to trigger the behavior. If we did that, maybe we could even make `-Paged` a common parameter...\r\n",
  "closed_at": "2020-08-20T05:00:30Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "cc @adityapatwardhan @theJasonHelmick ",
      "created_at": "2020-08-18T04:42:25Z",
      "updated_at": "2020-08-18T04:42:25Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Fully agreed. Though IMO a separate Out-Pager command is _fine_ if we want an easier/more discoverable way to expose more advanced features / customisation options of the pager.",
      "created_at": "2020-08-18T10:11:49Z",
      "updated_at": "2020-08-18T11:46:21Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "TLDR  **YES** to what @Jaykul  said.  There's a working standardized way already, a new way would only add novelty, is no more convenient and in some cases makes things worse. \r\n\r\nIn Detail:\r\n\r\n1.  Pagination using `| more` was set as the norm in the 1970s, it was incorporated in the first versions of MS-DOS and has carried through to the present day.  Better paginators have been created (e.g. `less`). Some commands will always want `| paginator` \r\n\r\n2.  Adding `  -Paged` to the end of command _does not save anything_ over typing `|more`.  To pre-empt \"Golf\" practitioners, where -`-p` is unique that can be used, but it won't always be valid, however  one can make `p` and alias for one's  preferred paginator and `|p ` _will_ always be valid\r\n\r\n3.  I can see some superficial attraction, to adding `-Paged` as a _common parameter_ handled _outside_ a cmdlet or function. We do it for error action, variables etc, so why not? Because it blurs a distinction that goes right back to the monad manifesto: **Output** and **Printing to the console** are not the same thing: it's a founding principle that _getting_ stuff, _processing_ stuff, and printing stuff nicely (for some arbitrary value of 'nice') are distinct activities.     \r\nThe reason there isn't and shouldn't be a pagination switch for  _getting_ or _processing_  commands is the same reason there aren't  `-List `or `-Table`  parameters : things to shift from outputting objects into the pipeline , towards printing strings on a terminal  (including marking up data for display in colour) should be in their own commands at the end of a pipeline or in the default formatting data used when the object has nowhere to go _but_ the console.     \r\n\r\n4. It's quite common for a command to evolve    \r\n`dir -Recurse  -Pat~\\Pictures\\ -include o*`   \r\nthen    \r\n`dir -Recurse  -Pa ~\\Pictures\\ -include o* | sort extension`  \r\nthen    \r\n`dir -Recurse  -Pa ~\\Pictures\\ -include o* | where length -gt 10mb | sort extension`   \r\nIgnoring page  breaking the short form of path, would this work correctly, or would he page switch be walked down the pipeline as it grows?        \r\n`dir -Recurse  -Page -Path ~\\Pictures\\ -include o* | sort extension`    \r\n\r\n\r\n",
      "created_at": "2020-08-18T10:16:59Z",
      "updated_at": "2020-08-18T10:16:59Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "All the feedback here is highly appreciated! I have already started a issue to collect feedback for Pager here: https://github.com/PowerShell/PowerShell/issues/13405\r\n\r\nI have linked these two issues. The idea was to be a conversation starter and  `Get-Help -Paged` is not set in stone. ",
      "created_at": "2020-08-18T17:45:35Z",
      "updated_at": "2020-08-18T17:45:35Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Let's discuss only in #13405 ",
      "created_at": "2020-08-19T04:28:00Z",
      "updated_at": "2020-08-19T04:28:00Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as duplicate and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-08-20T05:00:26Z",
      "updated_at": "2020-08-20T05:00:26Z"
    }
  ],
  "created_at": "2020-08-18T04:36:02Z",
  "number": 13468,
  "state": "closed",
  "title": "Please leave paging in the pager",
  "updated_at": "2020-08-20T05:00:30Z"
}