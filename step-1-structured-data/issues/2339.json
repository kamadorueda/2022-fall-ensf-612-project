{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2339",
  "author": "ed-ilyin",
  "body": "<!--\n\nIf it is a bug report:\n- make sure you are able to repro it on the latest released version. \nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\n- Search the existing issues.\n- Refer to the [FAQ](../docs/FAQ.md).\n- Refer to the [known issues](../docs/KNOWNISSUES.md).\n- Fill out the following repro template\n\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\n-->\n## Steps to reproduce\n\n1) on the ubuntu 16.04 put the following string to the test.ps1 file\n\n``` powershell\n@{aaa=111;bbb=$false;ccc='\u0430\u0431\u0431\u0430'} | ConvertTo-Json\n```\n\n2) run following command from terminal (urxvt + zsh in my case):\n\n``` zsh\npowershell ./test.ps1\n```\n## Expected behavior\n\nOutput should show \"\u0430\u0431\u0431\u0430\"\n\n``` zsh\n{\n    \"bbb\":  false,\n    \"aaa\":  111,\n    \"ccc\":  \"\u0430\u0431\u0431\u0430\"\n}\n```\n## Actual behavior\n\n``` powershell\n{\n    \"ccc\":  \"\u00d0\u00b0\u00d0\u00b1\u00d0\u00b1\u00d0\u00b0\",\n    \"bbb\":  false,\n    \"aaa\":  111\n}\n```\n## Environment data\n\n<!-- provide the output of $PSVersionTable -->\n\n``` powershell\n> $PSVersionTable\nName                           Value                                                                      \n----                           -----                                                                      \nPSVersion                      6.0.0-alpha                                                                \nPSEdition                      Core                                                                       \nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                    \nBuildVersion                   3.0.0.0                                                                    \nGitCommitId                    v6.0.0-alpha.10                                                            \nCLRVersion                                                                                                \nWSManStackVersion              3.0                                                                        \nPSRemotingProtocolVersion      2.3                                                                        \nSerializationVersion           1.1.0.1\n```\n\n---\n\nBTW: If in terminal I run following command, I get correct output:\n\n``` powershell\n\ue0b0 powershell '@{aaa=111;bbb=$false;ccc=\"\u0430\u0431\u0431\u0430\"} | ConvertTo-Json'                                                             \n{\n    \"bbb\":  false,\n    \"aaa\":  111,\n    \"ccc\":  \"\u0430\u0431\u0431\u0430\"\n}\n```\n",
  "closed_at": "2017-05-25T18:34:41Z",
  "comments": [
    {
      "author": "juergenhoetzel",
      "author_association": "NONE",
      "body": "I can confirm.\n\nA simpler example to reproduce the issue:\n\n`write-host \u00e4`\n\n`powershell ./test.ps1` results in:\n`\u00c3\u00a4`\n\nSeems like somehow the _Powershell_  trys to convert the output from _latin1_  to _UTF8_, i.e. assumes the script is in _latin1_ encoding. Because converting back (via external iconv)  fixes the output again:\n\n```\npowershell  ./test.ps1|iconv -f utf8 -t latin1\n\u00e4\n\n```\n",
      "created_at": "2016-09-24T14:44:44Z",
      "updated_at": "2016-09-24T14:44:44Z"
    },
    {
      "author": "juergenhoetzel",
      "author_association": "NONE",
      "body": "Update: Adding an  UTF-8 [Byte Order Mark](https://en.wikipedia.org/wiki/Byte_order_mark) to the script:\n\n`sed -i '1s/^/\\xef\\xbb\\xbf/' test.ps1`\n\nfixes the issue. I wonder why _Powershell_ expects _latin1_ by default.\n",
      "created_at": "2016-09-24T14:54:51Z",
      "updated_at": "2016-09-24T14:54:51Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Thanks @juergenhoetzel for the investigation. I think it's closely related to #707\n",
      "created_at": "2016-09-29T03:27:33Z",
      "updated_at": "2016-09-29T03:27:33Z"
    },
    {
      "author": "juergenhoetzel",
      "author_association": "NONE",
      "body": "> Thanks @juergenhoetzel for the investigation. I think it's closely related to #707\n\nYes, both tasks are about the fact that [BOM](https://en.wikipedia.org/wiki/Byte_order_mark) headers are not commonly used on GNU/Linux systems. \n\nThis issue is about a better default encoding for reading PS1 files when the  [BOM](https://en.wikipedia.org/wiki/Byte_order_mark) header is missing (latin1 is assumed by default). IMO a better default would be using the _locale_ settings:\n\n```\n[juergen@pidsley test]$ localectl\n   System Locale: LANG=de_DE.UTF-8\n\n\n```\n\nWhereas #707 is about using a better default for Output encoding, because Unix tools like _cat_ doesn't utilize the BOM header and just display garbage. \n",
      "created_at": "2016-09-29T18:49:23Z",
      "updated_at": "2016-09-29T18:49:23Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "This has been fixed in `6.0.0-beta.1`. ",
      "created_at": "2017-05-25T18:34:41Z",
      "updated_at": "2017-05-25T18:34:41Z"
    }
  ],
  "created_at": "2016-09-22T13:58:35Z",
  "number": 2339,
  "state": "closed",
  "title": "PowerShell script output encoding is messed up on linux",
  "updated_at": "2017-05-25T18:34:41Z"
}