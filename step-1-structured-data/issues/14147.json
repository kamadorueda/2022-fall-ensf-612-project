{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14147",
  "author": "mklement0",
  "body": "The default tab-completion (command-completion) behavior for command arguments is to complete based on the names of _items_ in the current location (typically, _files and directories_ present in the current file-system directory).\r\n\r\nHowever, this completion is currently also performed for arguments that will bind to parameters _other_ than _untyped_ or `[string]`-typed  (or perhaps also `System.IO.FileInfo` / `System.IO.DirectoryInfo`) parameters, e.g. `[int]`, in which case such completions make no sense.\r\n\r\n(By contrast, custom completions, validation attributes, and `enum`-derived types are handled correctly.)\r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\n$line = 'function foo { param([int] $bar) $bar }; foo '\r\n\r\n(TabExpansion2 $line $line.Length).CompletionMatches.Count | Should -Be 0\r\n```\r\n\r\n## Expected behavior\r\n\r\nThe test should succeed.\r\nThat is, no completion should occur, because tab-completing an `[int]` value (without validation attributes / custom completions) makes no sense.\r\n\r\n## Actual behavior\r\n\r\nThe test fails, because completion based on the item names (files and directories) in the current directory was performed:\r\n\r\n```none\r\nExpected 0, but got 526.\r\n```\r\n\r\n## Environment data\r\n\r\n\r\n```none\r\nPowerShell Core 7.2.0-preview.1\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The last resort was always in PowerShell for non-implemented branches of the IntelliSense. So a request should be specific and positive - \"to add support for IntelliSense for ... case\". I suspect there are many such cases out there.\r\n\r\n",
      "created_at": "2020-11-22T19:07:40Z",
      "updated_at": "2020-11-22T19:07:40Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: This proposal  _is_ properly framed negatively: it is about _generically excluding_ tab-completion behavior that is self-evidently _never helpful_.\r\n\r\nTo put it differently: it is specific about when _not_ to apply the fallback behavior.",
      "created_at": "2020-11-22T19:11:32Z",
      "updated_at": "2020-11-22T19:14:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> This proposal _is_ properly framed negatively:\r\n\r\nI believe all current branches in implementation is positive and this is more _positive_ :-) than adding negative conditions.",
      "created_at": "2020-11-22T19:35:59Z",
      "updated_at": "2020-11-22T19:35:59Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "The proposal is about adding an _exclusion_ (negative) to the _fallback condition/branch_ (positive, in a sense).\r\n\r\nIt means that when the \"last resort\" is reached that the fallback behavior should only be applied when it is at least _potentially_ helpful; or, conversely, it shouldn't be applied when it is unequivocally unhelpful.\r\n",
      "created_at": "2020-11-22T19:42:21Z",
      "updated_at": "2021-04-20T13:09:32Z"
    }
  ],
  "created_at": "2020-11-19T20:51:38Z",
  "labels": [
    "Issue-Question",
    "WG-Interactive-IntelliSense"
  ],
  "number": 14147,
  "state": "open",
  "title": "Tab completion: do not tab-complete filenames when binding to non-string parameters",
  "updated_at": "2021-04-20T13:09:32Z"
}