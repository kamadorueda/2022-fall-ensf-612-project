{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6606",
  "author": "mklement0",
  "body": "It is not uncommon to want to extract _multiple_ components from a given path, such as both the parent path and its leaf component (directory / file _name_).\r\n\r\nThis currently requires separate `Split-Path [-Parent]` and `Split-Path -Leaf` calls, for instance, which is cumbersome (and inefficient).\r\n\r\nInstead of:\r\n\r\n```powershell\r\n$parentPath = Split-Path -Parent $path\r\n$leaf = Split-Path -Leaf $path\r\n```\r\n\r\nit would be nice to be able to use a new `-All` switch as follows, which could return an _object_ whose properties reflect all path components that `Split-Path` is capable of extracting with its other switches (`-Qualifier`, `-Leaf`, ...):\r\n\r\n```powershell\r\n$pathComponents = Split-Path -All $path  # wishful thinking \r\n$pathComponents.Parent  # parent path\r\n$pathComponents.Leaf # leaf component (mere name)\r\n# ...\r\n```\r\n\r\n```powershell\r\n> Split-Path -All 'C:\\Program Files\\Application Verifier\\foo.txt'  # wishful thinking \r\n\r\nQualifier  : C:\r\nParent     : C:\\Program Files\\Application Verifier\r\nLeaf       : foo.txt\r\nLeafBase   : foo\r\nExtension  : .txt\r\nIsAbsolute : True\r\n```\r\n\r\n\r\n\r\nHere's a quick (inefficient) proof-of-concept  implementation of `-All`:\r\n\r\n```powershell\r\nfunction Split-Path {\r\n  param([string] $path, [switch] $All)\r\n  if ($All) {\r\n    [pscustomobject] @{\r\n      Qualifier = Microsoft.PowerShell.Management\\Split-Path -Qualifier -ErrorAction Ignore $path\r\n      Parent = Microsoft.PowerShell.Management\\Split-Path -Parent $path\r\n      Leaf = Microsoft.PowerShell.Management\\Split-Path -Leaf $path\r\n      LeafBase = Microsoft.PowerShell.Management\\Split-Path -LeafBase $path\r\n      Extension = Microsoft.PowerShell.Management\\Split-Path -Extension $path\r\n      IsAbsolute = Microsoft.PowerShell.Management\\Split-Path -IsAbsolute $path\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\nWritten as of:\r\n\r\n```powershell\r\nPowerShell Core v6.0.2\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "LaurentDardenne",
      "author_association": "NONE",
      "body": "A class dedicated and specific to providers Powershell, according to the principle of [System.IO.FileInfo], would it not be more appropriate?\r\n\r\nSomething like that :\r\n```Powershell\r\nNew-PSPathInfo -path  'C:\\Program Files\\Application Verifier\\foo.txt'\r\n\r\nisProviderQualified         : False\r\nProvider                    : FileSystem\r\nisWildcard                  : False\r\nWin32PathName               : C:\\Program Files\\Application Verifier\\foo.txt\r\nisItemExist                 : False\r\nisPSValid                   : True\r\nLastError                   :\r\nisCurrentLocationFileSystem : True\r\nResolvedPSPath              : C:\\Program Files\\Application Verifier\\foo.txt\r\nisUNC                       : False\r\nisParentItemExist           : False\r\nisAbsolute                  : True\r\nResolvedPSFiles             : {}\r\nisProviderExist             : True\r\nisDriveExist                : True\r\nName                        : C:\\Program Files\\Application Verifier\\foo.txt\r\nCurrentDriveName            : C\r\nisFileSystemProvider        : True\r\nDriveName                   : C\r\nasLiteral                   : False\r\n# +\r\nQualifier  : C:\r\nParent     : C:\\Program Files\\Application Verifier\r\nLeaf       : foo.txt\r\nLeafBase   : foo\r\nExtension  : .txt\r\n```",
      "created_at": "2018-04-10T08:16:56Z",
      "updated_at": "2018-04-10T08:16:56Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@LaurentDardenne:\r\n\r\nThanks for the feedback.\r\n\r\nI do like the idea of providing additional information like you suggest, especially whether the path refers to an existing item, whether it is wildcard-based, what the underlying provider is, and perhaps also a symlink's target (chain), if applicable.\r\n\r\nAs for the _form_ of the command:\r\n\r\nThe focus of the functionality is _splitting / parsing_, not _construction_, so I think that using a `New-*` cmdlet would be confusing.\r\n\r\nBy contrast, integration with `Split-Path`, whose purpose already _is_ splitting / parasing, seems natural and doesn't require introducing a new cmdlet.\r\n\r\nNote that `Split-Path` already exceeds its titular mandate somewhat with the `-IsAbsolute` switch, which doesn't _split_ the path and only _returns information_ about it.\r\n(This could be considered unfortunate, but it's here to stay.)\r\n\r\nMy preference is to have switch counterparts to _all_ properties of the object to be returned with `-All` (e.g., `-Leaf` corresponding to the `.Leaf` property), though proliferation of switches is a concern there.\r\n\r\nLet's see what others think.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-04-10T13:25:11Z",
      "updated_at": "2018-04-10T13:25:11Z"
    },
    {
      "author": "LaurentDardenne",
      "author_association": "NONE",
      "body": "@mklement0  \r\nThe use of new is not mandatory, I thought more to a public provider API because existing ones are difficult to use for a beginner:\r\n```Powershell\r\n[S.M.A.PSPathInfo]::New($path)\r\n```\r\nThe need may not be directly related to this issue.",
      "created_at": "2018-04-10T18:53:41Z",
      "updated_at": "2018-04-10T18:53:41Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@LaurentDardenne Having a `PSParsedPath` object and a `New-PSParsedPath` command is certainly interesting. It makes the call to the command simpler - no switches, just calculate all of the values. (I've never figured out why `Measure-Object` doesn't just do this - compute all the values in the object.)\r\n\r\n@mklement0 Yeah - our path commands kinda suck :-( `-IsAbsolute` should have been a parameter on `Test-Path`.\r\n\r\nFinally, another approach to consider is using multiple assignment\r\n```\r\n$parent, $leaf= Split-Path -Parent -Leaf # other flags as desired\r\n$newFIleName = join-path $parent \"Prefix$Leaf\"\r\n```\r\nIt's easy to use but I don't know that the comfort level with multiple assignments is there in the community.\r\n",
      "created_at": "2018-04-11T22:56:16Z",
      "updated_at": "2018-04-11T22:56:16Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@BrucePay:\r\n\r\n>  I don't know that the comfort level with multiple assignments is there in the community.\r\n\r\nThat's a concern, but I think it could be addressed with proper documentation.\r\n\r\nThat said, there's something problematic about assigning _positional_ semantics to switches: deriving the _order of output values_ from the _order in which switches were specified_ would be a first, as far as I know, and thus unexpected.\r\n\r\nI thought about _combined_ switches such as `-ParentAndLeaf`, but that would obviously get out of hand soon, so I landed on `-All`, with a single output object containing all information as properties.\r\n\r\n\r\n",
      "created_at": "2018-04-12T01:49:51Z",
      "updated_at": "2018-04-12T01:49:51Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@LaurentDardenne, in the context of #14745 I've essentially landed on the marriage of our proposals:\r\n\r\n* Introduce a `PSPathInfo` class, as you suggest; specifically:\r\n  *  Derive it from `System.Management.Automation.PathInfo` (which would have to be unsealed, but that shouldn't break anyone), as returned by `Resolve-Path`\r\n  * Define type accelerator `[PSPathInfo]` and a single-parameter public constructor that accepts a path that may or may not point to an _existing_ item; this implicitly enables _casts_ such as `[PSPathInfo] 'foo'.txt'`\r\n  * make it stringify to the full _provider_ path, which means that you can pass even not-yet-extant paths as full, native file-system paths to .NET methods (which is necessary to guard against the usually differing working directories)\r\n\r\nThis class could then be used:\r\n\r\n* as the output type of `Split-Path -All` (or, perhaps better: `Split-Path -AsPSPathInfo`, with `-AsPSPathInfo` aliased to `-pi`)\r\n* directly, such as for calling .NET methods to ensure full, native paths are passed, as described\r\n* via an _opt-in_ (so as not to break backward compatibility) as the output type of `Resolve-Path` - or, perhaps outputting a _derived_ class is an acceptable change.\r\n\r\nMore details about the proposed class at https://github.com/PowerShell/PowerShell/issues/14745#issuecomment-776282779",
      "created_at": "2021-02-10T13:48:45Z",
      "updated_at": "2021-02-10T21:43:08Z"
    }
  ],
  "created_at": "2018-04-09T17:07:07Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets-Management",
    "Area-FileSystem-Provider"
  ],
  "number": 6606,
  "state": "open",
  "title": "Introduce Split-Path -All to facilitate splitting paths into all component types with a single operation, such as both parent path and leaf (file name)",
  "updated_at": "2021-12-03T18:50:28Z"
}