{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17241",
  "author": "FSharpCSharp",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nTake the following [sample project](https://github.com/FSharpCSharp/PowerShellHost) and open it in Visual Studio 2022, run it there, and notice that no runtime error occurs in both debug and release.\r\n\r\nThen we publish the Visual Studio project. To do this, right-click on the project in the Solution Explorer and click publish. There you use the publish profile \"FolderProfile.pubxml\" and click on publish. After the publishing was successful click on \"Open Folder\" in the Publish dialog of Visual Studio. There you will find the MyApp.exe again and execute it. Then the error mentioned under \"Actual behavior\" occurs. Under \"Expected behavior\" you can see the output if you run the project directly from Visual Studio via Debug / Release.\n\n### Expected behavior\n\n```console\nStart Execution\r\n<PathToSampleApplication>\\bin\\Debug\\net6.0-windows\n```\n\n\n### Actual behavior\n\n```console\n.\\MyApp.exe\r\nStart Execution\r\nUnhandled exception. System.Management.Automation.PSSecurityException: AuthorizationManager check failed.\r\n ---> System.IO.FileNotFoundException: <PathToSampleApplication>\\bin\\Release\\net6.0-windows\\publish\\win10-x64\\Modules\\PSDiagnostics\\PSDiagnostics.psm1\r\n   at System.Management.Automation.Internal.SecuritySupport.CheckIfFileExists(String filePath)\r\n   at System.Management.Automation.SignatureHelper.GetSignatureFromCatalog(String filename)\r\n   at System.Management.Automation.SignatureHelper.GetSignatureFromCatalog(String filename)\r\n   at System.Management.Automation.SignatureHelper.GetSignature(String fileName, String fileContent)\r\n   at System.Management.Automation.Internal.SecuritySupport.IsProductBinary(String file)\r\n   at Microsoft.PowerShell.PSAuthorizationManager.CheckPolicy(ExternalScriptInfo script, PSHost host, Exception& reason)\r\n   at Microsoft.PowerShell.PSAuthorizationManager.ShouldRun(CommandInfo commandInfo, CommandOrigin origin, PSHost host, Exception& reason)\r\n   at System.Management.Automation.AuthorizationManager.ShouldRunInternal(CommandInfo commandInfo, CommandOrigin origin, PSHost host)\r\n   --- End of inner exception stack trace ---\r\n   at System.Management.Automation.Runspaces.PipelineBase.Invoke(IEnumerable input)\r\n   at System.Management.Automation.Runspaces.Pipeline.Invoke()\r\n   at System.Management.Automation.PowerShell.Worker.ConstructPipelineAndDoWork(Runspace rs, Boolean performSyncInvoke)\r\n   at System.Management.Automation.PowerShell.Worker.CreateRunspaceIfNeededAndDoWork(Runspace rsToUse, Boolean isSync)\r\n   at System.Management.Automation.PowerShell.CoreInvokeHelper[TInput,TOutput](PSDataCollection`1 input, PSDataCollection`1 output, PSInvocationSettings settings)\r\n   at System.Management.Automation.PowerShell.CoreInvoke[TInput,TOutput](PSDataCollection`1 input, PSDataCollection`1 output, PSInvocationSettings settings)\r\n   at Application.Test.Program.Main(String[] args) in <PathToSampleApplication>\\Program.cs:line 43\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nPSVersion                      7.2.3\r\nPSEdition                      Core\r\nGitCommitId                    7.2.3\r\nOS                             Microsoft Windows 10.0.19044\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2022-05-05T06:06:03Z",
  "comments": [
    {
      "author": "ALIENQuake",
      "author_association": "NONE",
      "body": "@FSharpCSharp Hi,\r\n\r\nTo fix the problem inside your [sample project](https://github.com/FSharpCSharp/PowerShellHost) change:\r\n`iss.ExecutionPolicy = ExecutionPolicy.Unrestricted;`\r\nto\r\n`iss.ExecutionPolicy = ExecutionPolicy.Bypass;`\r\n\r\nHope that helps.",
      "created_at": "2022-05-04T19:39:18Z",
      "updated_at": "2022-05-04T19:39:18Z"
    },
    {
      "author": "FSharpCSharp",
      "author_association": "NONE",
      "body": "@ALIENQuake \r\nThanks for the quick reply! Just tried it and it really works. I would not have thought in life that it could be due to something so banal.\r\n\r\nBut then I still do not understand, and maybe you can also say something about it, why this occurs exclusively with publish. If I, as described above, compiled the project normally within Visual Studio, then I could execute it without further ado. I would just be interested to know why this always worked then.\r\n\r\nThanks for all the help on this!",
      "created_at": "2022-05-05T06:05:45Z",
      "updated_at": "2022-05-05T06:05:45Z"
    }
  ],
  "created_at": "2022-05-02T08:42:45Z",
  "number": 17241,
  "state": "closed",
  "title": "FileNotFoundException occurs exclusively after publish Visual Studio project",
  "updated_at": "2022-05-05T06:06:03Z"
}