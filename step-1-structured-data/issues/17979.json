{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17979",
  "author": "scriptingstudio",
  "body": "### Summary of the new feature / enhancement\n\nTaking advantage of the fact that Windows 10 now ships with SQLite support built-in (as winsqlite3.dll), it is good idea to implement basic commands to work with SQLite databases.\r\nOne can say, there are many modules by community. But native support is better, IMHO.\n\n### Proposed technical implementation details (optional)\n\n_No response_",
  "closed_at": "2022-08-31T12:01:21Z",
  "comments": [
    {
      "author": "kasini3000",
      "author_association": "NONE",
      "body": "> indows 10 now ships with SQLite support built-in (as winsqlite3.dll)\r\n\r\nthanks for share news , i don't know this ",
      "created_at": "2022-08-28T03:23:25Z",
      "updated_at": "2022-08-28T03:23:33Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "Couple technical questions:\r\n\r\n1. What about non-Windows platforms? We would need to find good alternatives on Mac and Linux to ensure feature parity. It may turn out that the Windows dll means nothing if we have to reimplement it on other platforms anyways. Better to just grab any other sqlite nuget with right license and support. \r\n2. Do you want to implement it as `ConvertFrom-Sqlite` to take advantage of existing cmdlets which pretty much have SQL syntax like `Select-Object`, `Where-Object`, etc? Or build the selectors inside the cmdlet to take advantage of internal optimizations? Basically:\r\n    ```pwsh\r\n    Get-Content db.sqlite | ConvertFrom-Sqlite | Select-Object Name, Title | Where-Object { $_.Title -match 'Engineer' }\r\n    # or\r\n    Select-Sqlite -Select Name, Title -Where { $_.Title -match 'Engineer' }\r\n    ```\r\n3. As I mentioned, many cmdlets already provide SQL-like experience. The only one I found missing is `Join` which is provided by excellent [`Join-Object`](https://www.powershellgallery.com/packages/Join/3.7.2). Perhaps we would like to speak to the author about making it standard? No idea how it would proceed, but there is probably some precedence for it, in C++ world fmtlib became part of stdlib in C++20.",
      "created_at": "2022-08-28T11:46:14Z",
      "updated_at": "2022-08-28T11:46:14Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "I wrote one of those community modules https://www.powershellgallery.com/packages/GetSQL/1.3.0.4  , which is sql for ODBC, SQLite or SQL server, there are others which are more sqlite focused which have many more downloads. \r\n\r\n@scriptingstudio  the PowerShell team's response to this is pretty standard. Roughly speaking it goes \"There are many, many things which people think could usefully be part of the PowerShell distribution, but are in practice served through the gallery.  If all those were included it would turn PowerShell into a bloated monster. We think people should view adding modules as the norm.\"   Certainly  with chromium-based edge being part of Windows now, and SQLite being integral to chromium (see the gist below), Window has SQLite, but there have been .NET SQLite implementations which are available cross platform which have community support in PowerShell.\r\n\r\n@dkaszews  There are multiple tables in a SQLite DB. See https://gist.github.com/jhoneill/e585bae781f3efa7ac1992b79e037713 - for some examples. TBH it needs to be able to run any SQL including inserts / deletes.   \r\n\r\n\r\n\r\n\r\n\n\n<blockquote><img src=\"https://powershellgallery.com/Content/Images/Branding/PackageDefaultIcon.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://powershellgallery.com/packages/GetSQL/\">GetSQL 1.3.0.4</a></strong></div><div>Support for querying SQL Server, SQlite and ODBC sources.</div></blockquote>\n<blockquote><img src=\"https://github.githubassets.com/images/modules/gists/gist-og-image.png\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> Gist</div><div><strong><a href=\"https://gist.github.com/jhoneill/e585bae781f3efa7ac1992b79e037713\">Exploring data saved by Chrome/Edge/Any Chromium (passwords done in another Gist) </a></strong></div><div>Exploring data saved by Chrome/Edge/Any Chromium (passwords done in another Gist)  - Chrome Databases.ipynb</div></blockquote>",
      "created_at": "2022-08-28T14:26:23Z",
      "updated_at": "2022-08-28T14:26:25Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "@jhoneill That is a very good point. While useful for many people, I don't see SQLite as a must have builtin, as opposed to JSON and CSV. I would argue that YAML is a more common format that should be integrated into core PowerShell, but there is a decent Gallery module for it so I cannot really complain. Even for people who use SQLite on daily basis, I cannot see them being able to hold ground arguing \"I cannot believe it's not built in!\" as it's also not builtin into C# or Python, to name a few.\r\n\r\nWith so many SQLite modules already on Gallery, why bother writing a new one? And why even bother integrating one into core, if all you have to do is run `Install-Module`? Maybe the better way would be for PowerShell team to create a curated list of recommended modules, so you can run `Install-Module -Recommended SQLite` and it will pick the \"best\".",
      "created_at": "2022-08-28T14:57:32Z",
      "updated_at": "2022-08-28T14:57:32Z"
    },
    {
      "author": "kasini3000",
      "author_association": "NONE",
      "body": "I have a question that I would like to ask by the way:\r\ni use system.data.sqlite.dll now,\r\nWhere can I find the official version, the latest file?  ---> SQLite.Interop.dll\r\nI already have for win-x86-64, linux-x86-64, cpu architecture.\r\n**Now required for linux-arm-64, osx-arm-64.**",
      "created_at": "2022-08-29T02:00:20Z",
      "updated_at": "2022-08-29T02:02:26Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-08-31T12:01:19Z",
      "updated_at": "2022-08-31T12:01:19Z"
    }
  ],
  "created_at": "2022-08-27T19:16:15Z",
  "labels": [
    "Issue-Enhancement",
    "Resolution-Answered"
  ],
  "number": 17979,
  "state": "closed",
  "title": "Native SQLite support",
  "updated_at": "2022-08-31T12:01:21Z"
}