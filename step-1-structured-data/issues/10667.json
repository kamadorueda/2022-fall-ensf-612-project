{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10667",
  "author": "kilasuit",
  "body": "This issue was diagnosed in the PowerShell Slack off of the back of this message from @TheMusicMeister\r\n\r\n![image](https://user-images.githubusercontent.com/6355225/65984917-ad869e80-e478-11e9-846b-e395d802bff2.png)\r\n\r\nWhilst this issue was found on Windows in PowerShell v5.1.18362.145,  I've tested and confirmed this is still an issue in v5.1.18990.1, v6.2.3 & v7.0.0.preview.4 & we have managed to track down the issue to being an issue with there being a case of cyclic recursion on trying to find all modules in a PSModulePath due to a Symbolic Link being nested within one of the paths in `PSModulePath` and it pointing to a directory nested within one of the paths listed in the PSModulePath\r\n\r\n# Steps to reproduce\r\n\r\nThis is a simplified reproduction but achieves the same issues as reported.\r\n\r\nCreate a symbolic link at `C:\\Tools\\Modules\\Subpath\\` that links to `C:\\Tools\\Modules` & then add `C:\\Tools\\` as a path in the PSModulePath\r\nOnce created remove your Module Analysis Cache (simple rename works) then run `Get-Module -ListAvailable -All -Refresh` to completely recreate the cache, optionally running `Trace-Command -PSHost -Name Modules -Expression { Get-Module -ListAvailable -All -Refresh } ` to see progress of the recreation of the Module Analysis Cache\r\n\r\nEventually (with enough folders to traverse thorough) this will hang the console which has the\r\n\r\n# Expected behavior\r\n\r\nPowerShell ideally should intelligently realise that it's in a directory that contains a symbolic link that links to a parent directory that is already contained in the PSModulePath and skip it entirely. However to do so would require changes to the current behaviour and this is a relatively niche error that I wouldn't expect to see all that often.\r\n\r\n# Actual behavior\r\n\r\nPowerShell will consume memory whilst trying to recursively search all entries in the PSModulePath and will then eventually throw the below error in (v6.2.3 & v.7.0.0.preview4 unsure on v5.1) \r\n**\r\n![image](https://user-images.githubusercontent.com/6355225/65983782-3e0faf80-e476-11e9-87c8-05fc5f692a47.png)\r\n**\r\n# Environment data\r\n\r\n`v7.0.0.preview.4`\r\n`v6.2.3`\r\n`v5.1.18990.1`\r\n`v5.1.18362.145`\r\nWindows 10",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I guess the issue is for native command discovery too. Also completers can have another code paths to process PSModulePath. User's code also can be affected.\r\nSo we would have to check PSModulePath at every read time of the env variable. It is very perf expensive fix.\r\n\r\nDefault PSModulePath has not broken links and only user himself can add suck links. So it looks like an edge case and I'd do not fix anything as \"won't fix\".\r\n",
      "created_at": "2020-01-31T07:26:31Z",
      "updated_at": "2020-01-31T07:26:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We could add Depth check in the file enumeration.",
      "created_at": "2021-01-15T15:59:42Z",
      "updated_at": "2021-01-15T15:59:42Z"
    }
  ],
  "created_at": "2019-10-01T17:34:31Z",
  "number": 10667,
  "state": "open",
  "title": "Cyclic rescursion with a Symbolic link in a PSModulePath will hang the creation of ModuleAnalysisCache & hang TabCompletion",
  "updated_at": "2021-01-15T15:59:59Z"
}