{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4813",
  "author": "tyteen4a03",
  "body": "Right now I have this C# code, which compiles to a Cmdlet:\r\n```\r\n    [Cmdlet(VerbsCommon.Get, \"Numbers\")]\r\n    public class GetNumbersCmdlet: Cmdlet\r\n    {\r\n        protected override void BeginProcessing()\r\n        {\r\n            var list = new List<string>();\r\n            list.Add(\"1\");\r\n            list.Add(\"2\");\r\n            list.Add(\"3\");\r\n            list.Add(\"4\");\r\n            list.Add(\"5\");\r\n            WriteObject(results.ToArray());\r\n        }\r\n    }\r\n```\r\nAnd this PowerShell script:\r\n```\r\n    foreach ($number in Get-Numbers) {\r\n    \tWrite-Output \"Output is $number\"\r\n    }\r\n```\r\nInstead of:\r\n\r\n```\r\n    Output is 1\r\n    Output is 2\r\n    Output is 3\r\n    Output is 4\r\n    Output is 5\r\n```\r\nI would get:\r\n```\r\n    Output is 1 2 3 4 5\r\n```\r\nHowever if I switch to \r\n```\r\n    $numbers = Get-Numbers\r\n    foreach ($number in $numbers) {\r\n    \tWrite-Output \"Output is $number\"\r\n    }\r\n````\r\n\r\nI get the intended results.\r\n\r\n$PSVersionTable:\r\n\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.15063.0\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.15063.0\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```",
  "closed_at": "2017-11-03T13:28:30Z",
  "comments": [
    {
      "author": "tyteen4a03",
      "author_association": "NONE",
      "body": "Just realised that PS doesn't enumerate values by default (I had to change `enumerateCollection` to true in `WriteObject`). Why is that?",
      "created_at": "2017-09-12T12:36:01Z",
      "updated_at": "2017-09-12T12:36:01Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Sometimes you want to send collections _as a single object_ to the pipeline, so it is helpful not to _invariably_ have output collections enumerated.\r\n\r\nMy guess as to why applying enumeration is _opt-in_ is that you don't always build up an entire _collection_ in C# code up front and then use a _single_ `WriteObject()` call to produce output; you may send scalar objects one by one, using multiple calls.\r\n\r\nOn the PowerShell side, by contrast, the logic is reversed: `Write-Output -NoEnumerate` must be used to _opt out of_ implicit enumeration.",
      "created_at": "2017-09-12T14:40:06Z",
      "updated_at": "2017-09-12T14:40:06Z"
    }
  ],
  "created_at": "2017-09-12T10:56:41Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 4813,
  "state": "closed",
  "title": "Weird behaviour when passing function results directly to a foreach loop",
  "updated_at": "2017-11-03T13:58:55Z"
}