{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3719",
  "author": "powercode",
  "body": "Fixes #2864\r\nUnderpinnings to make calling of Extension methods /Linq\r\neasier from PowerShell.\r\n\r\nEnables the following that previously had to be done via\r\nreflection.\r\n\r\nclass M {\r\n  [int] Twice([int] $value) { return 2 * $value }\r\n\r\n  [int] DoubleSum([int[]] $values) {\r\n     return [Linq.Enumerable]::Sum($values, [M]::Twice)\r\n  }\r\n\r\n}\r\n\r\n<!--\r\n\r\nIf you are a PowerShell Team member, please make sure you choose the Reviewer(s) and Assignee for your PR.\r\nIf you are not from the PowerShell Team, you can leave the fields blank and the Maintainers will choose them for you. If you are familiar with the team, feel free to mention some Reviewers yourself.\r\n\r\nFor more information about the roles of Reviewer and Assignee, refer to CONTRIBUTING.md.\r\n\r\n-->\r\n",
  "closed_at": "2017-10-25T17:58:42Z",
  "comments": [
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Is the approach I took valid at all? Or is there a better way to approach this?\r\n\r\nThe problem I ran into was that `PSMethod` is a generic container for all signatures, and it seems like a mismatch to conversion of types in general.",
      "created_at": "2017-05-08T08:27:27Z",
      "updated_at": "2017-05-08T08:27:27Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Your approach is mostly valid but not great performance wise.\r\n\r\nYou can't add the instance parameter to FigureConversion as that makes it too easy to introduce bugs.",
      "created_at": "2017-05-08T14:17:09Z",
      "updated_at": "2017-05-08T14:17:09Z"
    },
    {
      "author": "oising",
      "author_association": "CONTRIBUTOR",
      "body": "Is this dead?",
      "created_at": "2017-09-06T15:22:19Z",
      "updated_at": "2017-09-06T15:22:19Z"
    },
    {
      "author": "oising",
      "author_association": "CONTRIBUTOR",
      "body": "With respect to overload resolution and binding to any delegate type for any given `PSMethod`, I prototyped something a while ago that seems to cover a majority of the use cases. Perhaps you might be able to take something out of it to help with some of @lzybkr 's review requests, @powercode ? ",
      "created_at": "2017-09-06T16:59:27Z",
      "updated_at": "2017-09-06T16:59:27Z"
    },
    {
      "author": "oising",
      "author_association": "CONTRIBUTOR",
      "body": "```\r\nPS> [string]::format | Get-Delegate\r\nWARNING: Could not find matching signature for Format with 0 parameter(s).\r\n\r\nPS> [string]::format | Get-Delegate -ParameterType string,object\r\n\r\nMethod                                             Target\r\n------                                             ------\r\nSystem.String Format(System.String, System.Object)\r\n\r\nPS> ([string]::format | Get-Delegate -ParameterType string,object).invoke(\"hello, {0}\", \"world\")\r\nhello, world\r\n\r\nPS> class Foo { [void] OnFoo([object]$sender, [eventargs]$eargs) {} }\r\nPS> $f = new-object foo\r\nPS> $f.OnFoo\r\n\r\nOverloadDefinitions\r\n-------------------\r\nvoid OnFoo(System.Object sender, System.EventArgs eargs)\r\n\r\nPS> $f.onfoo | Get-Delegate -DelegateType System.EventHandler\r\n\r\nMethod                                      Target\r\n------                                      ------\r\nVoid OnFoo(System.Object, System.EventArgs) Foo\r\n\r\nPS> ($f.onfoo | Get-Delegate -DelegateType System.EventHandler).invoke($null,$null)\r\n```\r\nThe script is part of the Poke module on psgallery, and you can see it here: https://github.com/oising/poke/blob/master/delegate.ps1\r\n\r\nKey tricks I learned was (ab)using `Type.GetMethodImpl` to do the heavy lifting of overload selection, so it's not just a plain type-for-type comparison in the parameter list, and it is guaranteed to match runtime behaviour. Yes, powershell has wider type coercion options but it doesn't use this for .net method invocation for the most part.  The default delegate types are Action, Action<> and Func<> - whatever is best fit. And you can override the delegate type desired to any `MulticastDelegate` derived type, but it doesn't support generic handlers beyond Func and Action, but this would be trivial to add since it already does it for Func<> and Action<>",
      "created_at": "2017-09-06T17:06:56Z",
      "updated_at": "2017-09-06T17:12:15Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Not dead, it is only resting :)\r\n\r\nPressure at work will ease up in a few months, and then I'll have more time to work at this.\r\n",
      "created_at": "2017-09-08T08:45:06Z",
      "updated_at": "2017-09-08T08:45:06Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Did you do a rebase in the wrong direction?",
      "created_at": "2017-10-19T17:48:33Z",
      "updated_at": "2017-10-19T17:48:33Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Have to check. Rebased upstream/master. Not sure what happened here.",
      "created_at": "2017-10-20T07:17:18Z",
      "updated_at": "2017-10-20T07:17:18Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@powercode I have no clue what happened there, but I believe you can fix it with this (assuming your upstream for this repo is named `PowerShell`):\r\n\r\n```bash\r\ngit fetch\r\ngit checkout -b 20171020fix PowerShell/master\r\ngit cherry-pick 2fb0dee149929d6f94c4e7a7e4906118dbeedef\r\n```\r\nThere are some conflicts here, you will need to resolve those first and then continue\r\n\r\n```bash\r\ngit cherry-pick --continue\r\ngit cherry-pick 87ba09b624d77804bdff5b4265f28e52e23253d2\r\ngit checkout -b 20171020backup psmethod-func\r\ngit checkout psmethod-func\r\ngit reset --hard 20171020fix\r\ngit push --force\r\n```\r\n\r\nI could only find the 2 commits in the history. It possible I missed some. This will at least backup your current branch to `20171020backup` so you can always go back if needed.",
      "created_at": "2017-10-20T10:41:07Z",
      "updated_at": "2017-10-20T10:41:07Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@powercode Something is wrong with your branch.  @markekraus  has been very good at giving instructions to fix this in the past.",
      "created_at": "2017-10-23T17:30:59Z",
      "updated_at": "2017-10-23T17:30:59Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@markekraus Thx for the support! \r\nI think I will close this pull request, and be able to work on it and push changes without triggering review. I have some feedback from @lzybkr about the approach to take that I want to incorporate, and then I will create a new pull request. \r\n\r\nAny objections? \r\n",
      "created_at": "2017-10-23T21:37:18Z",
      "updated_at": "2017-10-23T21:37:18Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@powercode No objections.  FYI, I've seen times if you rebase, you cannot re-open the review.",
      "created_at": "2017-10-25T15:48:25Z",
      "updated_at": "2017-10-25T15:48:25Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Then I just open a new PR",
      "created_at": "2017-10-25T17:58:39Z",
      "updated_at": "2017-10-25T17:58:39Z"
    }
  ],
  "created_at": "2017-05-07T08:49:24Z",
  "number": 3719,
  "state": "closed",
  "title": "Convertions from PSMethod to Func/Action",
  "updated_at": "2017-10-25T17:58:42Z"
}