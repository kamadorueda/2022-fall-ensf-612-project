{
  "_url": "https://github.com/PowerShell/PowerShell/issues/18195",
  "author": "daxian-dbw",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n## PR Summary\r\n\r\nImprove startup time by triggering initialization of additional types on background thread.\r\nThere are 2 changes:\r\n1. Trigger the type initializers of `Compiler`, `CachedReflectionInfo`, and `ExpressionCache`, which involves lots of reflection operations.\r\n2. Reverse the order of `LanguagePrimitives` and `TypeAccelerators`, because the former is needed earlier in the startup process.\r\n\r\n## PR Context\r\n\r\nThe change improves the startup time of `pwsh.exe` by about `30%` on my dev machine.\r\nThe benchmark result below is from comparing \"_a release build with the change (V73Wip)_\" with \"_a release build without the change (V730)_\" (both has R2R images).\r\n\r\n```\r\n## Warm startup -- with module analysis cache pre-populated\r\n## PowerShell is built with 'Release' configuration and R2R images.\r\nTest scenario: pwsh.exe -noprofile -c echo 1\r\n\r\n\r\nBenchmarkDotNet=v0.13.2, OS=Windows 11 (10.0.22621.521)\r\nIntel Xeon W-2235 CPU 3.80GHz, 1 CPU, 12 logical and 6 physical cores\r\n.NET SDK=7.0.100-rc.1.22431.12\r\n  [Host]     : .NET 7.0.0 (7.0.22.42610), X64 RyuJIT AVX2\r\n  DefaultJob : .NET 7.0.0 (7.0.22.42610), X64 RyuJIT AVX2\r\n\r\n\r\n|            Method |     Mean |    Error |   StdDev | Ratio | Code Size |\r\n|------------------ |---------:|---------:|---------:|------:|----------:|\r\n|   V730StartupTime | 557.2 ms | 10.83 ms | 10.64 ms |  1.00 |      41 B |\r\n| V73WipStartupTime | 386.3 ms |  6.81 ms |  6.03 ms |  0.69 |      41 B |\r\n\r\n\r\nBenchmark_pwsh_startup.V730StartupTime: DefaultJob\r\n-------------------- Histogram --------------------\r\n[539.780 ms ; 552.371 ms) | @@@@\r\n[552.371 ms ; 572.428 ms) | @@@@@@@@@@\r\n[572.428 ms ; 584.997 ms) | @@\r\n---------------------------------------------------\r\n\r\nBenchmark_pwsh_startup.V73WipStartupTime: DefaultJob\r\n-------------------- Histogram --------------------\r\n[374.236 ms ; 387.432 ms) | @@@@@@@@@\r\n[387.432 ms ; 401.417 ms) | @@@@@\r\n---------------------------------------------------\r\n```\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/main/reference/7.3/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n",
  "closed_at": "2022-10-04T17:17:10Z",
  "comments": [
    {
      "author": "pull-request-quantifier[bot]",
      "author_association": "NONE",
      "body": "### ![](https://img.shields.io/static/v1?label=Quantified&message=Extra%20Small&color=green)\r\n\r\nThis PR has `5` quantified lines of changes. In general, a change size of upto `200` lines is ideal for the best PR experience!\r\n\r\n------\r\n\r\n<details >\r\n    <summary display=\"inline\"> <strong>Quantification details</strong></summary>\r\n    <p />\r\n\r\n```\r\nLabel      : Extra Small\r\nSize       : +3 -2\r\nPercentile : 2%\r\n\r\nTotal files changed: 1\r\n\r\nChange summary by file extension:\r\n.cs : +3 -2\r\n```\r\n> Change counts above are quantified counts, based on the [PullRequestQuantifier customizations](https://github.com/microsoft/PullRequestQuantifier/blob/main/docs/prquantifier-yaml.md).\r\n    \r\n</details>\r\n\r\n\r\n<details>\r\n    <summary display=\"inline\"> <strong>Why proper sizing of changes matters</strong> </summary>\r\n    <p/>\r\n    <p/>\r\n\r\nOptimal pull request sizes drive a better predictable PR flow as they strike a\r\nbalance between between PR complexity and PR review overhead. PRs within the\r\noptimal size (typical small, or medium sized PRs) mean:\r\n\r\n- Fast and predictable releases to production:\r\n  - Optimal size changes are more likely to be reviewed faster with fewer\r\niterations.\r\n  - Similarity in low PR complexity drives similar review times.\r\n- Review quality is likely higher as complexity is lower:\r\n  - Bugs are more likely to be detected.\r\n  - Code inconsistencies are more likely to be detected.\r\n- Knowledge sharing is improved within the participants:\r\n  - Small portions can be assimilated better.\r\n- Better engineering practices are exercised:\r\n  - Solving big problems by dividing them in well contained, smaller problems.\r\n  - Exercising separation of concerns within the code changes.\r\n\r\n#### What can I do to optimize my changes\r\n\r\n- Use the PullRequestQuantifier to quantify your PR accurately\r\n  - Create a context profile for your repo using the [context generator](https://github.com/microsoft/PullRequestQuantifier/releases)\r\n  - Exclude files that are not necessary to be reviewed or do not increase the review complexity. Example: Autogenerated code, docs, project IDE setting files, binaries, etc. Check out the `Excluded` section from your `prquantifier.yaml` context profile. \r\n  - Understand your typical change complexity, drive towards the desired complexity by adjusting the label mapping in your `prquantifier.yaml` context profile.\r\n  - Only use the labels that matter to you, [see context specification](./docs/prquantifier-yaml.md) to customize your `prquantifier.yaml` context profile.\r\n- Change your engineering behaviors\r\n  - For PRs that fall outside of the desired spectrum, review the details and check if:\r\n    - Your PR could be split in smaller, self-contained PRs instead\r\n    - Your PR only solves one particular issue. (For example, don't refactor and code new features in the same PR).\r\n\r\n#### How to interpret the change counts in git diff output\r\n\r\n- One line was added: `+1 -0`\r\n- One line was deleted: `+0 -1`\r\n- One line was modified: `+1 -1` (git diff doesn't know about modified, it will\r\ninterpret that line like one addition plus one deletion)\r\n- Change percentiles: Change characteristics (addition, deletion, modification)\r\nof this PR in relation to all other PRs within the repository.\r\n\r\n</details>\r\n\r\n<p />\r\n\r\n------\r\n\r\nWas this comment helpful? <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiZGF4aWFuLWRidyIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xODE5NSIsIkV2ZW50VHlwZSI6IlRodW1ic1VwIn0=&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs up\"><strong>:thumbsup:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiZGF4aWFuLWRidyIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xODE5NSIsIkV2ZW50VHlwZSI6Ik5ldXRyYWwifQ==&amp;anonymous=True\" target=\"_blank\" title=\"Neutral\"><strong>&nbsp;:ok_hand:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiZGF4aWFuLWRidyIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xODE5NSIsIkV2ZW50VHlwZSI6IlRodW1ic0Rvd24ifQ==&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs down\"><strong>&nbsp;:thumbsdown:</strong></a> (<a href=\"MAILTO:prquantifier@microsoft.com\" title=\"Mail to prquantifier@microsoft.com\">Email</a>)\r\n[Customize PullRequestQuantifier](https://github.com/PowerShell/PowerShell/blob/master/.github/prquantifier.yaml) for this repository.\r\n\r\n",
      "created_at": "2022-09-30T23:33:13Z",
      "updated_at": "2022-09-30T23:33:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "On my notebook:\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.13.2, OS=Windows 10 (10.0.19044.2006/21H2/November2021Update)\r\nIntel Core i5-2410M CPU 2.30GHz (Sandy Bridge), 1 CPU, 4 logical and 2 physical cores\r\n.NET SDK=7.0.100-rc.1.22431.12\r\n  [Host]     : .NET 7.0.0 (7.0.22.42610), X64 RyuJIT AVX\r\n  DefaultJob : .NET 7.0.0 (7.0.22.42610), X64 RyuJIT AVX\r\n\r\n\r\n```\r\n| Method |     Mean | Ratio | Code Size | Allocated | Alloc Ratio |\r\n|------- |---------:|------:|----------:|----------:|------------:|\r\n| Before | 654.5 ms |  1.00 |   1,836 B |   1.01 KB |        1.00 |\r\n|  After | 638.2 ms |  0.97 |      41 B |   1.01 KB |        1.00 |\r\n\r\n---\r\n\r\n>Intel Xeon W-2235 CPU 3.80GHz, 1 CPU, 12 logical and 6 physical cores\r\n\r\nObviously server CPU with 12 Core win \ud83d\ude04 ",
      "created_at": "2022-10-01T06:57:57Z",
      "updated_at": "2022-10-01T06:57:57Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks @daxian-dbw  for continuing to add improvements to the startup time, a 30% improvements is awesome and almost unbelievable.\r\nUnrelated to that may I add something to think about when testing startup time: The times when slow startup time is a pain the most is when the CPU is busy already with load on other processes and therefore restricts the resources on the PowerShell process. I wonder if it's possible to create a test scenario for that to measure impact in that case or consider optimisations for that case. Because although it usually helps putting things into background threads, it can sometimes make the strain on the CPU worse in such scenarios due to the increased context switching overhead of having too many things happening in the background.",
      "created_at": "2022-10-03T09:03:48Z",
      "updated_at": "2022-10-03T17:45:13Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> ```\r\n>| Method |     Mean |\r\n>|------- |---------:|\r\n>| Before | 654.5 ms |\r\n>|  After | 638.2 ms |\r\n> ```\r\n\r\n@iSazonov It's also a win for your 4 logical core CPU, even though not a big win :) This is great to know!",
      "created_at": "2022-10-03T16:39:17Z",
      "updated_at": "2022-10-03T16:41:25Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@bergmeister The `30%` improvement is measured on my dev box, and it's of course not an absolute value given that users will be on a wide range of physical devices. It's a low hanging fruit that is very suitable for offloading to a background thread because:\r\n1. It's computation heavy -- the initialization of `CachedReflectionInfo` and `ExpressionCache` involves lots of reflection operations. It takes `40-50 ms` on my dev machine.\r\n2. It's free from race condition -- type initializer is guaranteed to run once.\r\n3. It doesn't block the startup process until opening the Runspace (creating the top-level session state) -- so there is good chance that the initialization will be done when the startup process gets here.\r\n4. It doesn't interfere with the other early init operations -- the initialization of compiler related code doesn't trigger the initialization of `LanguagePrimitive`, `TypeAccelerators`, or `AMSI`, and vice versa.\r\n\r\nHowever, just like the scenario you described, offloading to background thread is not a magic cure that will solve the startup perf issue once for all, and it certainly shouldn't be overused, or used without analyzing why it's beneficial to do so.\r\n\r\nMaking the existing startup code run faster is always a more fundamental solution. Here is the tracking issue from @iSazonov https://github.com/PowerShell/PowerShell/issues/14268 -- most of them were done or proven to be unrelated. There are still a couple open issues, and we may need to measure the startup again since it's been 2 years.",
      "created_at": "2022-10-03T18:18:23Z",
      "updated_at": "2022-10-03T18:18:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> The `30%` improvement is measured on my dev box,\r\n\r\nPlease include your Xeon-s in PowerShell distribution packages \ud83d\ude04 ",
      "created_at": "2022-10-04T06:28:49Z",
      "updated_at": "2022-10-04T06:28:49Z"
    }
  ],
  "created_at": "2022-09-30T22:40:25Z",
  "number": 18195,
  "state": "closed",
  "title": "Improve startup time by triggering initialization of additional types on background thread.",
  "updated_at": "2022-10-04T17:17:12Z"
}