{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15153",
  "author": "p0W3RH311",
  "body": "in PS there are many operator collections: like `-contains, -join, where, foreach`.... every operator performs one specific task very well (except where and foreach _GPO \"General Purpose Operator\"_). it's great but \r\nsince ps does not yet implement **linq** it lacks other important operators like: `.map() `\r\n\r\n`$collection.map( {code} , arg1, arg2, $collection2 )`\r\n\r\n`.map()`  traverses two lists in parallel, applying a scriptblock to the corresponding items from each list. If one list is longer, the extra elements are ignored. \r\n\r\n```\r\narg1 = name of first variable in first collection\r\narg2 = name of second variable in second collection\r\n```\r\n\r\nproof of concept:\r\n```\r\n\r\nPS> (3,5,6).map( {  $a + $b } , a, b, (1,2,4) )\r\n4\r\n7\r\n10\r\n```\r\n",
  "closed_at": "2021-05-06T18:19:12Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I like the idea in principle, but to me a more PowerShell-idiomatic implementation would be the `foreach` statement extension I've proposed in #14732 (not limited to 2 collections):\r\n\r\n```powershell\r\n# WISHFUL THINKING\r\nPS> foreach ($a, $b in (3, 5, 6), (1, 2, 4)) { $a + $b }\r\n4\r\n7\r\n10\r\n```",
      "created_at": "2021-04-04T14:38:23Z",
      "updated_at": "2021-04-04T14:38:23Z"
    },
    {
      "author": "p0W3RH311",
      "author_association": "NONE",
      "body": "@mklement0 \r\n\r\nthanks, +1 for your idea i like and i like more if also implement variable indexer. \r\nBut other programmers who are used other scripting/programming languages like python/scala/haskell...etc  \u200b\u200buse  traditonally statement like `map() zip() zipwith() zipwithindex()` ...etc. its awesome if PS implement statement/operators like this.  \r\n",
      "created_at": "2021-04-04T17:26:52Z",
      "updated_at": "2021-04-04T17:27:34Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @p0W3RH311, and, yes, supporting an automatically maintained index variable, as you've proposed in #14724, is also a good idea (though in my mind it calls for an explicit opt-in with a self-chosen index variable).\r\n\r\nAs for `map() zip() zipwith() zipwithindex()`: To me (I know not everyone agrees), PowerShell-idiomatic solutions should be limited to cmdlets, operators, and language statements (such as `foreach`): _methods_ are an awkward fit, primarily due to the potential for syntax confusion (argument vs. expression mode).\r\n\r\nHowever, given that LINQ methods _are_ already accessible - as something that PowerShell _provides access to_ rather than as a native part of its language -  the more promising approach would be to allow LINQ methods to be called more naturally, which would require PowerShell to support _extension methods_.\r\n\r\nCurrently, using `Linq.Zip()` is awkward:\r\n\r\n```powershell\r\nPS> [System.Linq.Enumerable]::Zip([int[]] (3, 5, 6), [int[]] (1, 2, 4), [Func[int, int, int]] { $args[0] + $args[1] })\r\n4\r\n7\r\n10\r\n```\r\n\r\nI think improving this experience is the more promising approach to pursue - see #2226.\r\n\r\n---\r\n\r\nAs for `zipwithindex()`, specifically: my thinking behind  #14732 was to allow it to be _combined_ with #14724.\r\n\r\n```powershell\r\n# WISHFUL THINKING\r\nPS> foreach ($a, $b in (3, 5, 6), (1, 2, 4); $ndx) { \"$ndx`: \" + ($a + $b) }\r\n0: 4\r\n1: 7\r\n2: 10\r\n```\r\n",
      "created_at": "2021-04-04T17:42:13Z",
      "updated_at": "2021-04-04T18:21:10Z"
    },
    {
      "author": "p0W3RH311",
      "author_association": "NONE",
      "body": "with native supporting `Linq ` language PS will become `PS++` :) ... all scripting/programming languagesis moving to  functional paradigm or functional features and i believe its the time to PS to to follow this path...the best solution is `Linq` ",
      "created_at": "2021-04-04T18:25:27Z",
      "updated_at": "2021-04-04T18:27:40Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "Looking to some recent proposals and requests for parallel lists and a iterator index, there is clearly a need to join objects side-by-side. Therefore, I did a propose to [**add a `Join-Object` cmdlet to the standard PowerShell equipment `#14994`**](https://github.com/PowerShell/PowerShell/issues/14994).\r\nIn this idea (and existing example), the [`Join-Object`](https://www.powershellgallery.com/packages/Join) cmdlet has a brought scale of join features from **joining powershell objects based a related property** (similar to sql) to **side-by-side joining (traversing) scalars** (as primitives and strings):\r\n\r\n\r\n#### Example 1\r\n```PowerShell\r\n# traverse two lists\r\n3, 5, 6 |Join 1, 2, 4 |% { \"$_\" }\r\n3 1\r\n5 2\r\n6 4\r\n```\r\n\r\n#### Example 2\r\n```PowerShell\r\n# Sum each item in two parallel lists\r\n3, 5, 6 |Join 1, 2, 4 |% { $_[0] + $_[1] }\r\n4\r\n7\r\n10\r\n```\r\n\r\n#### Example 3\r\n```PowerShell\r\n# Sum each item in multiple parallel lists\r\n3, 5, 6 |Join 1, 2, 4 |Join 7, 8, 9 |% { ($_ |Measure-Object -sum).sum }\r\n11\r\n15\r\n19\r\n```\r\n\r\n#### Example 4\r\n```PowerShell\r\n# Index and sum each item in the additional parallel lists\r\n0..9 |Join 3, 5, 6 |Join 1, 2, 4 |% { \"$($_[0]): \" + ($_[1] + $_[2]) }\r\n0: 4\r\n1: 7\r\n2: 10\r\n```\r\n\r\n#### Example 5\r\n```PowerShell\r\n# Same as above, but with named properties\r\n0..9 |Join 3, 5, 6 |Join 1, 2, 4 -Name Index, a, b |% { \"$($_.Index): \" + ($_.a + $_.b) }\r\n0: 4\r\n1: 7\r\n2: 10\r\n```",
      "created_at": "2021-04-11T08:56:05Z",
      "updated_at": "2021-04-11T09:13:41Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Language working group:\r\nThis issue is a duplicate of #2226.",
      "created_at": "2021-05-06T18:19:11Z",
      "updated_at": "2021-05-06T18:19:11Z"
    }
  ],
  "created_at": "2021-04-04T10:37:55Z",
  "labels": [
    "Resolution-Duplicate",
    "Issue-Enhancement",
    "WG-Language"
  ],
  "number": 15153,
  "state": "closed",
  "title": "new GPO operator .map",
  "updated_at": "2021-05-06T18:19:22Z"
}