{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13865",
  "author": "mklement0",
  "body": "## Summary of the new feature/enhancement\r\n\r\nAs a user in general, but especially as a script author,  I want to be able to:\r\n\r\n* (a) given a concrete instance or type, **inspect the .NET interfaces it implements...**\r\n  * ... **including what members implement these interfaces** (thereby implicitly indicating the members that make up the interface), with an indication as to whether the interface implementation is implicit or explicit.\r\n  * making the existing `-View` parameter accept a new `Interface` value could provide this, optionally combined with the `-Name` parameter for filtering by interface type name:\r\n\r\n```powershell\r\n# WISHFUL THINKING\r\n# Note that *explicit* interface implementations should be recognizable as such, as in Get-Member's normal output.\r\nPS> @{} | Get-Member -View Interface -Name *dictionary*  # without -Name, *all* interfaces and their members would be listed.\r\n\r\n   TypeName: System.Collections.IDictionary\r\n\r\nName              MemberType            Definition\r\n----              ----------            ----------\r\nAdd               Method                void Add(System.Object key, System.Object value), void IDictionary.Add(System.Object key, \r\n# ...\r\nIsFixedSize       Method                bool IsFixedSize {get;}\r\n# ...\r\n```\r\n\r\n* (b) **given an interface type (name) directly, inspect its members**.\r\n\r\n  * If the suggestion in #6382 is implemented, we would get this for free (and it would also support\r\n`Get-Member -InputType System.Collections.Hashtable -View Interface -Name *dictionary*`); e.g.\r\n\r\n```powershell\r\n# WISHFUL THINKING\r\n# Note the -Input*Type* parameter name.\r\nPS> Get-Member -InputType System.Collections.IDictionary\r\n\r\n   TypeName: System.Collections.IDictionary\r\n\r\n# Analogous to the above (with only ever one, non-type-name-prefixed entry in the Definition column)\r\n```\r\n\r\n* (c) given a concrete instance or type, **list just the interface _types_, not also their members**, via `-View InterfaceType`\r\n\r\n```powershell\r\n# WISHFUL THINKING: List [TypeInfo] instances for all interfaces implemented by the given instance / type:\r\nPS> @{} | Get-Member -View InterfaceType\r\n\r\nIsPublic IsSerial NameSpace                                Name                 Location                                                               BaseType\r\n-------- -------- ---------                                ----                 --------                                                               --------\r\nTrue     False    System.Collections                       IDictionary          /Users/mklement/.powershell-PREVIEW/System.Private.CoreLib.dll         \r\nTrue     False    System.Collections                       ICollection          /Users/mklement/.powershell-PREVIEW/System.Private.CoreLib.dll         \r\nTrue     False    System.Collections                       IEnumerable          /Users/mklement/.powershell-PREVIEW/System.Private.CoreLib.dll         \r\nTrue     False    System.Runtime.Serialization             ISerializable        /Users/mklement/.powershell-PREVIEW/System.Private.CoreLib.dll         \r\nTrue     False    System.Runtime.Serialization             IDeserializationCal\u2026 /Users/mklement/.powershell-PREVIEW/System.Private.CoreLib.dll         \r\nTrue     False    System                                   ICloneable           /Users/mklement/.powershell-PREVIEW/System.Private.CoreLib.dll         \r\n\r\n```\r\n\r\n\r\n**Motivation:**\r\n\r\n* Inspecting an interface's members helps especially script authors that define interface-typed parameters (see #13852), so they know what members they can rely upon when operating on a parameter value (though Intellisense in Visual Studio Code can also be a great help there).\r\n\r\n* Even outside of script authoring this feature can be a benefit, namely to users that use PowerShell's as a convenient playground for .NET types, including its convenient reflection features.\r\n\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2020-10-24T20:43:20Z",
  "number": 13865,
  "state": "open",
  "title": "Make Get-Member support inspecting a type / instance's .NET interfaces and their members",
  "updated_at": "2021-07-12T20:52:02Z"
}