{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16548",
  "author": "springcomp",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nWhen using Windows PowerShell 5.1, one can use the `ConvertFrom-Json` CmdLet to parse JSON strings.\r\nEmpty arrays are correctly parsed and return an object that can be piped into the `ForEach-Object` CmdLet and behaves accordingly.\r\n\r\nHowever, from PowerShell Core 7.x, `ConvertFrom-Json` now returns a null value when parsing the string `\"[]\"`.\r\n\r\nThe [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md) page does not help.\r\n\r\nI have not been able to track if [that is a desired change](https://docs.microsoft.com/fr-fr/powershell/scripting/whats-new/differences-from-windows-powershell?view=powershell-7.2) from Windows PowerShell 5.1.\r\n\r\nI have tested this behavior with:\r\n- PSCore 7.1.5 stable release.\r\n- PSCore 7.2.1 stable release.\r\n- PSCore 7.2.0-daily20211124.2 (daily build)\r\n\r\n\r\n### Expected behavior\r\n\r\n```console\r\nPS> (ConvertFrom-JSON \"[]\").GetType()\r\n\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     True     Object[]                                 System.Array\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nPS> (ConvertFrom-JSON \"[]\").GetType()\r\nInvalidOperation: You cannot call a method on a null-valued expression.\r\n```\r\n\r\n\r\n### Error details\r\n\r\n```console\r\nPS> Get-Error\r\nException             :\r\n    Type        : System.Management.Automation.RuntimeException\r\n    ErrorRecord :\r\n        Exception             :\r\n            Type    : System.Management.Automation.ParentContainsErrorRecordException\r\n            Message : You cannot call a method on a null-valued expression.\r\n            HResult : -2146233087\r\n        CategoryInfo          : InvalidOperation: (:) [], ParentContainsErrorRecordException\r\n        FullyQualifiedErrorId : InvokeMethodOnNull\r\n        InvocationInfo        :\r\n            ScriptLineNumber : 1\r\n            OffsetInLine     : 1\r\n            HistoryId        : -1\r\n            Line             : (ConvertFrom-JSON \"[]\").GetType()\r\n            PositionMessage  : At line:1 char:1\r\n                               + (ConvertFrom-JSON \"[]\").GetType()\r\n                               + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n            CommandOrigin    : Internal\r\n        ScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\n    TargetSite  : System.Object CallSite.Target(System.Runtime.CompilerServices.Closure, System.Runtime.CompilerServices.CallSite, System.Object)\r\n    Message     : You cannot call a method on a null-valued expression.\r\n    Data        : System.Collections.ListDictionaryInternal\r\n    Source      : Anonymously Hosted DynamicMethods Assembly\r\n    HResult     : -2146233087\r\n    StackTrace  :\r\n   at CallSite.Target(Closure , CallSite , Object )\r\n   at System.Dynamic.UpdateDelegates.UpdateAndExecute1[T0,TRet](CallSite site, T0 arg0)\r\n   at System.Management.Automation.Interpreter.DynamicInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\nCategoryInfo          : InvalidOperation: (:) [], RuntimeException\r\nFullyQualifiedErrorId : InvokeMethodOnNull\r\nInvocationInfo        :\r\n    ScriptLineNumber : 1\r\n    OffsetInLine     : 1\r\n    HistoryId        : -1\r\n    Line             : (ConvertFrom-JSON \"[]\").GetType()\r\n    PositionMessage  : At line:1 char:1\r\n                       + (ConvertFrom-JSON \"[]\").GetType()\r\n                       + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\n```\r\n\r\n\r\n### Environment data\r\n\r\n```powershell\r\nPS> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0-daily20211124.2\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0-daily20211124.2\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": "2021-12-03T12:26:25Z",
  "comments": [
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "I believe this is because objects are just enumerated as they appear, because there are no objects (just an empty array) there's nothing to output. You can add `-NoEnumerate` to have it output objects exactly as they are, similar to how `Write-Output -NoEnumerate` works.\r\n\r\nSee https://github.com/PowerShell/PowerShell/pull/10861 for the PR that implemented the change the issue linked in it.",
      "created_at": "2021-12-03T09:15:49Z",
      "updated_at": "2021-12-03T09:15:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@jborean93 No pipeline is in the issue. Expectations here is `\"[]\"` -> @().",
      "created_at": "2021-12-03T09:54:52Z",
      "updated_at": "2021-12-03T09:55:02Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Yep I understand that but the PR I linked change the behaviour to be what it is today. It acts like outputting an empty array in a function, e.g.\r\n\r\n```powershell\r\nFunction My-Function {\r\n    @()\r\n}\r\n\r\n$obj = My-Function\r\n$null -eq $obj\r\n```\r\n\r\nTo output the value as is you need to add the `-NoEnumerate` option, just like you do with `Write-Output -NoEnumerate`\r\n\r\n```powershell\r\nFunction My-Function {\r\n    # Same as , @() (see the unary comma)\r\n    Write-Output -InputObject @() -NoEnumerate\r\n}\r\n\r\n$obj = My-Function\r\n$null -ne $ob\r\n$obj.Count -eq 0\r\n```",
      "created_at": "2021-12-03T10:00:03Z",
      "updated_at": "2021-12-03T10:00:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@jborean93 Thanks for clarify!",
      "created_at": "2021-12-03T10:06:01Z",
      "updated_at": "2021-12-03T10:06:01Z"
    },
    {
      "author": "springcomp",
      "author_association": "NONE",
      "body": "Indeed, @jborean93  thanks for the clarification.",
      "created_at": "2021-12-03T12:26:25Z",
      "updated_at": "2021-12-03T12:26:25Z"
    }
  ],
  "created_at": "2021-12-03T08:12:51Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered",
    "WG-Cmdlets-Utility"
  ],
  "number": 16548,
  "state": "closed",
  "title": "ConvertFrom-Json returns $null when parsing empty array",
  "updated_at": "2021-12-03T12:26:28Z"
}