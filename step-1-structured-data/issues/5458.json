{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5458",
  "author": "SteveL-MSFT",
  "body": "We originally decided to ship Pester inbox in Windows to help bootstrap the ecosystem with a common test framework.  I believe we\u2019ve achieved that goal.  We should stop shipping Pester with PSCore6 and rely on users installing it from PSGallery.  Long term we should move other modules we ship/own to be available on PSGallery and compatible with a range of PSCore6 versions.  This should happen after we update our tests to work on latest Pester\r\n<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://github.com/PowerShell/PowerShell/blob/master/docs/KNOWNISSUES.md).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\n\r\n",
  "closed_at": "2017-12-05T01:16:54Z",
  "comments": [
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I agree with this with the exception of `PackageManagement` and `PowerShellGet`.  \r\n\r\nOn various PowerShell module open source projects (like posh-git), it is very convenient to tell folks that all they need to do is run `Install-Module posh-git -Scope CurrentUser` to install the module.  That simplicity is watered down a lot if you have to put a bunch of verbiage around bootstrapping the package management system first.",
      "created_at": "2017-11-15T05:03:36Z",
      "updated_at": "2017-11-15T05:18:14Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "PackageManagement and PSGet are needed to install from PSGallery so they will, of course, be bundled :)",
      "created_at": "2017-11-15T05:27:18Z",
      "updated_at": "2017-11-15T05:27:18Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "There was a suggestion somewhere that we also split the web cmdlets and JSON cmdltes out. I somewhat agree with that one on the basis that the web cmdlets are browser-ish and may need a more rapid iteration cycle to keep up with the ever changing threat dynamics of the interwebs and increasing feature support in CoreFX for non-windows platforms. But I wouldn't want to have PowerShell Core completely void of a download mechanism, though. So would a very simple `Invoke-WebDownload` cmdlet that only has a very very basic feature set with only the ability to save to file (no content processing) with separation of some (or all) of the utility cmdltes make sense?",
      "created_at": "2017-11-15T10:10:14Z",
      "updated_at": "2017-11-15T10:10:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What will be the service model for PowerShell Core? \r\nIf something like VS Code - we'll publish new stable release every month - the need for multiple packets disappears.\r\nVS Code has a manager for extentions I guess it's overkill for PowerShell..\r\n\r\nFor example, the [Exchange Server team](https://blogs.technet.microsoft.com/exchange/2013/02/08/servicing-exchange-2013/) releases new version every 3 months (quarter) and the build expires 6 months later. Also security patches can be released for previous non-expired builds.",
      "created_at": "2017-11-15T13:42:51Z",
      "updated_at": "2017-11-15T13:42:51Z"
    },
    {
      "author": "dragonwolf83",
      "author_association": "NONE",
      "body": "Unbundling from PowerShell Core doesn't have to mean not including as a post-install script. After install, a separate command could be run to install key packages straight from PowerShell Gallery. There is precedence for updating built-in via the web with `Update-Help`. For those requiring offline installations, an alternate method may need to be figured out.\r\n\r\nAnother option is to have first-run experience with recommended packages and package collections to install. Maybe a readme on launch with changelog and recommendations. \r\n\r\n@iSazonov there is a Chocolatey GUI that someone created to manage choco packages. That might be a good community project to create if there is demand for it. \r\n\r\n@markekraus I'm uneasy about breaking out JSON and Web cmdlets unless a post-install script sets it up as a standard install. I get the concern about the agile development, but I think we will see faster releases going forward. If not, then maybe breaking it out will be required. They are just such core experiences that I hate to see it not be there by default. ",
      "created_at": "2017-11-16T01:47:01Z",
      "updated_at": "2017-11-16T01:54:40Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov PSCore6.0.0 will be what we call `modern lifecycle` which effectively means `fix forward only`.  Barring any critical security issue, customers are expected to install the latest release version (currently planned at 6 month intervals).  I think the meta discussion on unbundling other modules and even splitting out cmdlets from monolithic modules should be discussed in different issues.  No immediate plans for any of that.",
      "created_at": "2017-11-16T01:53:10Z",
      "updated_at": "2017-11-16T01:53:10Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This issue is simply removing Pester from being packaged.  The longer item to update our tests to run with latest Pester and removing this fork is not necessary for 6.0.0 release.",
      "created_at": "2017-12-01T23:54:11Z",
      "updated_at": "2017-12-01T23:54:11Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "/cc @TravisEz13 ",
      "created_at": "2017-12-02T02:32:59Z",
      "updated_at": "2017-12-02T02:32:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> We originally decided to ship Pester inbox in _Windows_ to help bootstrap the ecosystem with a common test framework.  I believe we\u2019ve _achieved_ that goal. \r\n\r\nWhat about Unix? Achieved?",
      "created_at": "2017-12-02T11:50:29Z",
      "updated_at": "2017-12-02T11:50:29Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Considering that Pester is well ingrained with PowerShell at this point, anyone already using PowerShell and moving to Linux will take pester with them. Anyone new to the language will run into pester rather quickly. IMO, The platform doesn't matter so much as as the PowerShell/Pester relationship, which is very strong at this point. ",
      "created_at": "2017-12-02T11:57:56Z",
      "updated_at": "2017-12-02T11:57:56Z"
    }
  ],
  "created_at": "2017-11-15T04:57:27Z",
  "labels": [
    "Area-Maintainers-Build",
    "Resolution-Fixed",
    "Breaking-Change"
  ],
  "number": 5458,
  "state": "closed",
  "title": "Unbundle Pester from PSCore pkg",
  "updated_at": "2018-10-15T21:50:54Z"
}