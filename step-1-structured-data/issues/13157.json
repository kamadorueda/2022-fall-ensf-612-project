{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13157",
  "author": "Fs00",
  "body": "I've encountered an issue using PowerShell **v7.0.1 or higher** in a .NET Windows application.\r\nThis bug causes a hang when PS fails to import a module through WinCompat in these two scenarios:\r\n1. the application depends only on System.Management.Automation and Microsoft.PowerShell.Security (the latter is needed because of #14095) but **not on the entire PowerShell SDK**\r\n2. the application depends on the entire PowerShell SDK, but only in self-contained published builds\r\n\r\nPS: I know that applications using PowerShell should depend on the entire SDK and not just on System.Management.Automation, but in my case I have an application that only needs to run some commands on the machine and then operate on their output. The full SDK contains 20MB+ of dependencies that my application never uses and significantly bloat the distributable EXE.\r\n\r\n## Steps to reproduce\r\n\r\nThe simplest code that triggers the bug is the following:\r\n```csharp\r\nInitialSessionState sessionState = InitialSessionState.CreateDefault2();\r\nsessionState.ExecutionPolicy = ExecutionPolicy.Unrestricted;  // needed to make import work\r\nusing PowerShell pwsh = PowerShell.Create(sessionState);\r\npwsh.AddScript(\"Import-Module Dism -UseWindowsPowerShell\");\r\npwsh.Invoke();\r\nConsole.WriteLine(\"Script executed\");\r\n```\r\nI have a created a VS project (which can be [downloaded here](https://drive.google.com/file/d/118wAPM5LGOyI3RAdUAxrBN9E_KLjXIpL/view?usp=sharing)) that contains this code and a PublishProfile that can be used to reproduce the bug in the second scenario described above.\r\n\r\n**Important:** when removing the project dependency on Microsoft.PowerShell.SDK remember to remove the `bin` directory inside the project folder! Otherwise you'll get inconsistent results.\r\n\r\n## Expected behavior\r\n\r\n```\r\nScript executed\r\n```\r\nis printed to the standard output and then the application exits gracefully. (in scenario 1 `Import-Module` command will fail anyway, since we don't have `Microsoft.PowerShell.Utility` module that is required for WinCompat)\r\n\r\n## Actual behavior\r\n\r\nThe application hangs indefinitely before printing the `Script executed` message when:\r\n- it depends only on System.Management.Automation and Microsoft.PowerShell.Security v7.0.1+ regardless of the build type\r\n- it depends on Microsoft.PowerShell.SDK v7.0.1+, but **only in Published builds**\r\n\r\n### Possible cause\r\nLooking at the [stack trace of the pipeline execution thread](https://pastebin.com/uvQkdxZ0) while the application hangs in scenario 1, the thread appears to be stuck in an infinite loop when trying to import the `Microsoft.PowerShell.Utility` module.\r\nThis bug was introduced by #12269. (see my analysis below: https://github.com/PowerShell/PowerShell/issues/13157#issuecomment-741975648)",
  "closed_at": "2022-01-12T18:02:04Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "/cc @SteveL-MSFT  @adityapatwardhan ",
      "created_at": "2020-07-11T19:46:02Z",
      "updated_at": "2020-07-11T19:46:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I guess the issue could be already fixed in latest builds but you need to replace Appx module in your repro steps with another module because Appx module is not compatible with latest PowerShell 7.1 Preview builds.",
      "created_at": "2020-07-13T10:58:03Z",
      "updated_at": "2020-07-13T10:58:03Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@Fs00 The repro project runs correctly for me on Windows 10 1909, where Appx is made compatible with PS 7.0+ (`CompatiblePSEditions = @('Desktop','Core')` in `Appx.psd1`).\r\n\r\nWhat version of Windows are you using? I presume it's not the latest Windows 10 but a downlevel OS, right?\r\nIf you are using a downlevel machine, then `Appx` module there may not be compatible with PS 7, and thus the loading of it would go through the [Windows module compatibility feature](https://docs.microsoft.com/en-us/powershell/scripting/whats-new/module-compatibility?view=powershell-7), and it's possible that caused a hang.\r\n\r\nLoop in @anmenaga to take a look.",
      "created_at": "2020-07-13T16:43:05Z",
      "updated_at": "2020-07-13T16:43:05Z"
    },
    {
      "author": "Fs00",
      "author_association": "CONTRIBUTOR",
      "body": "@daxian-dbw I'm using Windows 10 1909 (not the latest cumulative update though, I'm not at home so I cannot check my `Appx.psd1` atm). Did you try it in both the scenarios I listed above?\n\nAnyway, I'm almost sure that on my end my application used WinCompat feature because I happened to see the spawned PowerShell child process in the Task Manager (and now I know why it was there).",
      "created_at": "2020-07-13T18:26:35Z",
      "updated_at": "2020-07-13T18:26:35Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> Did you try it in both the scenarios I listed above?\r\n\r\nYes, I was able to run both scenarios successfully.\r\n\r\n> Anyway, I'm almost sure that on my end my application used WinCompat feature because I happened to see the spawned PowerShell child process in the Task Manager (and now I know why it was there).\r\n\r\nGood to know, so the Appx module might not have the `CompatiblePSEditions = @('Desktop','Core')` in it. @anmenaga is our SME for the WinCompat module feature, and he will be able to help.",
      "created_at": "2020-07-13T19:33:16Z",
      "updated_at": "2020-07-13T19:33:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Appx does not work with latest PowerShell 7.1 Preview. See #13138.",
      "created_at": "2020-07-14T04:30:59Z",
      "updated_at": "2020-07-14T04:30:59Z"
    },
    {
      "author": "Fs00",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Thanks, that's good to know.",
      "created_at": "2020-07-14T08:29:22Z",
      "updated_at": "2020-07-14T08:29:22Z"
    },
    {
      "author": "Fs00",
      "author_association": "CONTRIBUTOR",
      "body": "@daxian-dbw @anmenaga I've done some more testing and discovered that the bug happens only when importing WinCompat modules.\r\nI have updated the repro project and the issue description to be more accurate. The project now targets PowerShell 7.1 and .NET 5.\r\nI'm confident that you'll now be able to reproduce the issue and have enough information to investigate it. Let me know if there are any problems.",
      "created_at": "2020-11-16T16:39:06Z",
      "updated_at": "2020-11-16T16:39:06Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "The `Release.pubxml` has 32-bit `<RuntimeIdentifier>win-x86</RuntimeIdentifier>`. Is this intentional?",
      "created_at": "2020-11-25T01:29:30Z",
      "updated_at": "2020-11-25T01:29:30Z"
    },
    {
      "author": "Fs00",
      "author_association": "CONTRIBUTOR",
      "body": "That's intentional, although I don't know if that has an impact on the bug (I haven't tested with x64).",
      "created_at": "2020-11-25T08:02:14Z",
      "updated_at": "2020-11-25T08:02:14Z"
    },
    {
      "author": "Fs00",
      "author_association": "CONTRIBUTOR",
      "body": "Any news on this? Did the latest repro project work?",
      "created_at": "2020-12-06T10:15:40Z",
      "updated_at": "2020-12-06T10:15:40Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "The latest repro project did work (when using attached publish profile (`Release.pubxml`), without it it runs fine).\r\nI've looked through WinCompat code and it seems to be behaving as expected, but problems start when it calls PS Remoting code. I assume this has something to do with app running as WoW64 (I vaguely recall remoting bugs with WoW64 from long time ago). This needs more investigation time.\r\n",
      "created_at": "2020-12-08T04:41:41Z",
      "updated_at": "2020-12-08T04:41:41Z"
    },
    {
      "author": "Fs00",
      "author_association": "CONTRIBUTOR",
      "body": "Good to know.\r\nI tried publishing the executable with `<RuntimeIdentifier>win-x64</RuntimeIdentifier>` but it didn't fix the issue, so I don't think the difference in architecture plays a role in this bug.",
      "created_at": "2020-12-09T17:30:09Z",
      "updated_at": "2020-12-09T18:50:29Z"
    },
    {
      "author": "Fs00",
      "author_association": "CONTRIBUTOR",
      "body": "Ok @anmenaga, after some research in the codebase I think I got a decent understanding of the issue.\r\nIn the stack trace I linked in the first comment you can see that the hang occurs when PowerShell tries to import `Microsoft.PowerShell.Utility` module in order to execute `Export-PSSession` to perform a WinCompat import.\r\nThen I saw that PR #12269 introduced a special behavior when importing an engine module via WinCompat:\r\n> If a module falls into one of these buckets, then PS-Core version of the module is imported first **(for engine modules from $PSHOME\\Modules)**\r\n\r\nThe point is, when an application uses only System.Management.Automation (the scenario 1 I mentioned above), the other PS Core engine modules cannot be found in $PSHOME\\Modules, because that folder simply does not exist. It seems likely that the hang is caused by this edge case not being handled correctly.\r\n\r\n_But what about the scenario 2 (Published build with full SDK), in which all PS Core modules should be there?_\r\nThe key to understand this is that **`ModuleIntrinsics.GetPSHomeModulePath()`** ([used here](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/Modules/ImportModuleCommand.cs#L1990)) **returns the path to System.Management.Automation.dll** (returned by Utils.DefaultPowerShellAppBase) **+ '/Modules'** .\r\nThe assumption here is that the 'Modules' folder is next to SMA.dll, which is true for Debug builds (`[repro_project_folder]\\bin\\Debug\\net5.0\\runtimes\\win\\lib\\net5.0`) but not for Published builds (SMA.dll is near the published EXE, but 'Modules' folder is still inside `runtimes\\win\\lib\\net5.0`).\r\n",
      "created_at": "2020-12-09T18:50:20Z",
      "updated_at": "2021-07-03T14:27:48Z"
    },
    {
      "author": "Fs00",
      "author_association": "CONTRIBUTOR",
      "body": "Hello @anmenaga, is my analysis enough for you to be able to tackle this issue and solve it once and for all?\r\nThanks in advance!",
      "created_at": "2021-02-24T18:29:28Z",
      "updated_at": "2021-07-03T14:29:41Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #16628, which has now been successfully released as `v7.3.0-preview.2`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.3.0-preview.2)\n",
      "created_at": "2022-02-24T23:34:16Z",
      "updated_at": "2022-02-24T23:34:16Z"
    }
  ],
  "created_at": "2020-07-11T14:09:02Z",
  "labels": [
    "Issue-Question",
    "Resolution-Fixed",
    "WG-Engine-Module"
  ],
  "number": 13157,
  "state": "closed",
  "title": "PowerShell hangs when a WinCompat module import fails due to Core engine modules not being found in $PSHOME\\Modules",
  "updated_at": "2022-02-24T23:34:16Z"
}