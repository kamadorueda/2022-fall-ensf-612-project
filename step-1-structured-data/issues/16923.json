{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16923",
  "author": "PaulHigin",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nThis PR implements the Custom Remote Connections RFC:\r\nhttps://github.com/PowerShell/PowerShell-RFC/blob/master/Archive/Draft/RFC0063-Custom-Remote-Connections.md\r\n\r\n## PR Context\r\n\r\nThese changes open up the internal PowerShell remoting API so that custom connections can be created as PowerShell modules. This PR does not introduce any new functions, and instead selectively makes some previously internal APIs public so that third parties can create custom remote connections without modifying PowerShell core engine code. See the above RFC for more details.\r\n\r\nA new module repo has been created to serve as an example custom connection, by using the newly public API to create a named pipe custom remote connection.  The module is also built in PowerShell CI to allow for testing.\r\n\r\nThis module will be transferred to the `PowerShell` repo at some point.\r\nhttps://github.com/PaulHigin/NamedPipeConnection\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and opened an issue in the relevant tool repository. This may include:\r\n        - [ ] Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode\r\n        (which runs in a different PS Host).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n",
  "closed_at": "2022-03-16T23:08:32Z",
  "comments": [
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "Open PRs should not be assigned to milestone, so they are not assigned to the wrong milestone after they are merged.  For backport consideration, use a `backport` label. ",
      "created_at": "2022-02-25T17:46:52Z",
      "updated_at": "2022-02-25T17:46:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I still have doubts that this is needed or that this is the right direction, as I don't see the analytics.\r\n- Do we really have persistent requests for this?\r\n- Who are these people?\r\n- What do they really want to implement and when?\r\n\r\nIs it worth taking any steps without understanding this? Perhaps they all want the same thing and we could join forces?\r\n\r\nI may be wrong, but I feel and what first comes to mind is that (1) gRPC is starting to dominate on both Unix and Windows, (2) it's time for some PSRP extensions.\r\nSorry to repeat myself but this is happening because I don't see an analysis and arguments.\r\n\r\n",
      "created_at": "2022-02-26T07:22:46Z",
      "updated_at": "2022-02-26T07:22:46Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@JamesWTruher  No new functionality was added so there is no need for new functional tests.  Currently the only way I validate the new public APIs is via the example module I created (https://github.com/PaulHigin/SSHRemotingConnection).  We could create new tests that takes a dependency on this module, but I feel it would not be that valuable for CI.  I feel the best way to validate the new APIs is to have community members create their own custom connections and provide feedback.\n\n<blockquote><img src=\"https://opengraph.githubassets.com/8c51cc8513a9e6943946d47e379e56b9451f3e446270697e48b97e1893761144/PaulHigin/SSHRemotingConnection\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PaulHigin/SSHRemotingConnection\">GitHub - PaulHigin/SSHRemotingConnection: Custom PowerShell custom remoting connection</a></strong></div><div>Custom PowerShell custom remoting connection . Contribute to PaulHigin/SSHRemotingConnection development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2022-02-28T18:20:25Z",
      "updated_at": "2022-02-28T18:20:27Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov  I agree that it is time to take a critical look at PowerShell's current remoting system.  But this change is a very narrow scope to allow third parties to create custom connections with the current remoting system.  Granted, not very many customers will take advantage of this, but it is still important for some scenarios.  Specifically, this will allow third parties to create a custom Linux/Mac -> Windows (WinRM) solution, without having to modify internal PowerShell engine code.  And this is something that many customers have asked for, and which we don't currently support.",
      "created_at": "2022-02-28T18:43:21Z",
      "updated_at": "2022-02-28T18:43:21Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "> @JamesWTruher No new functionality was added so there is no need for new functional tests. Currently the only way I validate the new public APIs is via the example module I created (https://github.com/PaulHigin/SSHRemotingConnection). We could create new tests that takes a dependency on this module, but I feel it would not be that valuable for CI. I feel the best way to validate the new APIs is to have community members create their own custom connections and provide feedback.\r\n> \r\n> > <img alt=\"\" width=\"48\" src=\"https://camo.githubusercontent.com/b46c9190c7b9b06d713ffc83980bf6862fec470794bb7381549de4f1355f7f6b/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f386335316363383531336139653639343339343664343765333739653536623934353166336534343632373036393765343862393765313839333736313134342f5061756c486967696e2f53534852656d6f74696e67436f6e6e656374696f6e\"><img alt=\"\" height=\"14\" src=\"https://camo.githubusercontent.com/b6a12909f1e31185a69a73d59208c507a992236d3230f9fc18e85058ae3d19e7/68747470733a2f2f6769746875622e6769746875626173736574732e636f6d2f66617669636f6e732f66617669636f6e2e737667\"> GitHub**[GitHub - PaulHigin/SSHRemotingConnection: Custom PowerShell custom remoting connection](https://github.com/PaulHigin/SSHRemotingConnection)**Custom PowerShell custom remoting connection . Contribute to PaulHigin/SSHRemotingConnection development by creating an account on GitHub.\r\n\r\none of the things that i've done are tests like:\r\n\r\n```powershell\r\nit \"the type 'new.public.newexcitingtype' should be public\" {\r\n(\"new.public.newexcitingtype\" -as [type]).Name | Should -Be newexcitingtype\r\n}\r\n```\n\n<blockquote><img src=\"https://opengraph.githubassets.com/72b8c058671e1e39a2006f524aaf070175977ec93a0a168659a0bd118e649647/PaulHigin/SSHRemotingConnection\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PaulHigin/SSHRemotingConnection\">GitHub - PaulHigin/SSHRemotingConnection: Custom PowerShell custom remoting connection</a></strong></div><div>Custom PowerShell custom remoting connection . Contribute to PaulHigin/SSHRemotingConnection development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2022-03-01T20:58:24Z",
      "updated_at": "2022-03-01T20:58:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I agree that it is time to take a critical look at PowerShell's current remoting system.\r\n\r\n@PaulHigin Thanks for clarify! I hope we open new discussion to collect ideas and prepare experiments.",
      "created_at": "2022-03-02T09:44:18Z",
      "updated_at": "2022-03-02T09:44:18Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@JamesWTruher   That is an interesting idea but I don't see a lot of value in it.  But I am thinking of creating a simpler named pipe custom module for testing.  We already have support in our build for building test (module) binaries.",
      "created_at": "2022-03-03T00:07:31Z",
      "updated_at": "2022-03-03T00:07:31Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "I'm hoping to test this out at some point in the next few days, excited to see it's here.\r\n\r\nFor testing it sounds like just replicating the `NamedPipeConnectionInfo` with your own custom pipe to ensure both the client and server can correctly transfer the data as expected would be a good test case.",
      "created_at": "2022-03-03T00:10:09Z",
      "updated_at": "2022-03-03T00:10:09Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "/cc @awakecoding I believe this also clears up a blocker for something you were working on",
      "created_at": "2022-03-09T19:29:25Z",
      "updated_at": "2022-03-09T19:29:25Z"
    },
    {
      "author": "awakecoding",
      "author_association": "CONTRIBUTOR",
      "body": "> /cc @awakecoding I believe this also clears up a blocker for something you were working on\r\n\r\nthanks, it is indeed very interesting, [but for my **current**  blocker](https://twitter.com/awakecoding/status/1501198026790121472), the best approach is unfortunately still to swap the ssh.exe executable used by PowerShell. I appear doomed to always end up in situations where it is by far the simplest approach to solve the problems I faced, even if a custom transport interface is more flexible.\r\n\r\nhttps://user-images.githubusercontent.com/295841/157523905-a99d530b-fb11-4e70-9847-8a28fa74a7b8.mp4\r\n\r\nIn the current case, I need to support in-memory credential injection (password or private key file) from Remote Desktop Manager, and patching the OpenSSH client to accept those parameters over named pipes would take a lot less effort for the simple reason that a custom transport would still require wrapping an SSH client (OpenSSH or other SSH implementation) in which I can inject credentials.\r\n\r\nhttps://user-images.githubusercontent.com/295841/157523516-16187b00-490c-412a-8c72-b6afc2cb97f3.mp4\r\n\r\nThis being said, @jborean93 is toying with the idea of building a replacement SSH transport using SSH.NET, so if that works, it could be an interesting option to consider. Until then, patching OpenSSH and shipping a copy of ssh.exe with Remote Desktop Manager is the shortest path to getting something that works.\r\n\r\nIn all cases, if it's a blocker for me, I really don't see why it's not a blocker for everybody else. The way the built-in PowerShell SSH transport is currently done will always lack the ability to inject credentials, unless we patch OpenSSH to accept those parameters non-interactively in a secure manner. I intend to patch OpenSSH so it can accept passwords and private keys over temporary named pipe transport, and I would be open to cleaning it up for a possible upstream contribution.\r\n",
      "created_at": "2022-03-09T20:01:50Z",
      "updated_at": "2022-03-09T20:01:50Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "@awakecoding\r\n\r\nFor your particular case I do see the functionality implemented here as a way to enable what you are looking for. It may not be as simple as what was proposed in the past but it is still now possible to do publicly. The injection of passwords is not really related to this particular PR and the limitation mostly lives in OpenSSH itself. In saying that a custom transport could work around such things and do things like use `SSH_ASKPASS` for explicit username/password or use a completely different `ssh` binary that has been asked for in the past.\r\n\r\nUnfortunately my experiment with [SSH.NET](https://github.com/sshnet/SSH.NET) didn't lead to anywhere. There is no current public way to create a subsystem, or spawn a new process and send data to it's stdin pipe. This could potentially be implemented in that library as the subsystem stuff is there for things like SFTP or Netconf but currently it's not in a usable state for PowerShell to use.",
      "created_at": "2022-03-10T00:24:49Z",
      "updated_at": "2022-03-10T00:24:49Z"
    },
    {
      "author": "awakecoding",
      "author_association": "CONTRIBUTOR",
      "body": "> @awakecoding\n> \n> For your particular case I do see the functionality implemented here as a way to enable what you are looking for. It may not be as simple as what was proposed in the past but it is still now possible to do publicly. The injection of passwords is not really related to this particular PR and the limitation mostly lives in OpenSSH itself. In saying that a custom transport could work around such things and do things like use `SSH_ASKPASS` for explicit username/password or use a completely different `ssh` binary that has been asked for in the past.\n> \n> Unfortunately my experiment with [SSH.NET](https://github.com/sshnet/SSH.NET) didn't lead to anywhere. There is no current public way to create a subsystem, or spawn a new process and send data to it's stdin pipe. This could potentially be implemented in that library as the subsystem stuff is there for things like SFTP or Netconf but currently it's not in a usable state for PowerShell to use.\n\nPlease don't mind my previous post as it is indeed completely out-of-scope for the current discussion. It was just to put some context over why it turns out that the custom transport interface is still not the simplest solution path to my problem. 100% of my issues have been solvable just with a custom SSH executable or a replacement executable, but that is again not really the point of this pull request.\n\nGetting a replacement implementation in pure C# would be great but it's not a quick and dirty thing you can do in a day, unfortunately. I would still be interested if someone can manage to get it done ",
      "created_at": "2022-03-10T00:28:53Z",
      "updated_at": "2022-03-10T00:28:53Z"
    },
    {
      "author": "pull-request-quantifier[bot]",
      "author_association": "NONE",
      "body": "### ![](https://img.shields.io/static/v1?label=Quantified&message=Extra%20Large&color=red)\r\n\r\nThis PR has `1429` quantified lines of changes. In general, a change size of upto `200` lines is ideal for the best PR experience!\r\n\r\n------\r\n\r\n<details >\r\n    <summary display=\"inline\"> <strong>Quantification details</strong></summary>\r\n    <p />\r\n\r\n```\r\nLabel      : Extra Large\r\nSize       : +1103 -326\r\nPercentile : 100%\r\n\r\nTotal files changed: 45\r\n\r\nChange summary by file extension:\r\n.yml : +2 -2\r\n.psm1 : +33 -0\r\n.cs : +640 -286\r\n.resx : +4 -1\r\n.ps1 : +343 -37\r\n.config : +10 -0\r\n.psd1 : +51 -0\r\n.csproj : +20 -0\r\n```\r\n> Change counts above are quantified counts, based on the [PullRequestQuantifier customizations](https://github.com/microsoft/PullRequestQuantifier/blob/main/docs/prquantifier-yaml.md).\r\n    \r\n</details>\r\n\r\n\r\n<details>\r\n    <summary display=\"inline\"> <strong>Why proper sizing of changes matters</strong> </summary>\r\n    <p/>\r\n    <p/>\r\n\r\nOptimal pull request sizes drive a better predictable PR flow as they strike a\r\nbalance between between PR complexity and PR review overhead. PRs within the\r\noptimal size (typical small, or medium sized PRs) mean:\r\n\r\n- Fast and predictable releases to production:\r\n  - Optimal size changes are more likely to be reviewed faster with fewer\r\niterations.\r\n  - Similarity in low PR complexity drives similar review times.\r\n- Review quality is likely higher as complexity is lower:\r\n  - Bugs are more likely to be detected.\r\n  - Code inconsistencies are more likely to be detetcted.\r\n- Knowledge sharing is improved within the participants:\r\n  - Small portions can be assimilated better.\r\n- Better engineering practices are exercised:\r\n  - Solving big problems by dividing them in well contained, smaller problems.\r\n  - Exercising separation of concerns within the code changes.\r\n\r\n#### What can I do to optimize my changes\r\n\r\n- Use the PullRequestQuantifier to quantify your PR accurately\r\n  - Create a context profile for your repo using the [context generator](https://github.com/microsoft/PullRequestQuantifier/releases)\r\n  - Exclude files that are not necessary to be reviewed or do not increase the review complexity. Example: Autogenerated code, docs, project IDE setting files, binaries, etc. Check out the `Excluded` section from your `prquantifier.yaml` context profile. \r\n  - Understand your typical change complexity, drive towards the desired complexity by adjusting the label mapping in your `prquantifier.yaml` context profile.\r\n  - Only use the labels that matter to you, [see context specification](./docs/prquantifier-yaml.md) to customize your `prquantifier.yaml` context profile.\r\n- Change your engineering behaviors\r\n  - For PRs that fall outside of the desired spectrum, review the details and check if:\r\n    - Your PR could be split in smaller, self-contained PRs instead\r\n    - Your PR only solves one particular issue. (For example, don't refactor and code new features in the same PR).\r\n\r\n#### How to interpret the change counts in git diff output\r\n\r\n- One line was added: `+1 -0`\r\n- One line was deleted: `+0 -1`\r\n- One line was modified: `+1 -1` (git diff doesn't know about modified, it will\r\ninterpret that line like one addition plus one deletion)\r\n- Change percentiles: Change characteristics (addition, deletion, modification)\r\nof this PR in relation to all other PRs within the repository.\r\n\r\n</details>\r\n\r\n<p />\r\n\r\n------\r\n\r\nWas this comment helpful? <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiUGF1bEhpZ2luIiwiUmVwb3NpdG9yeUxpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsIiwiUHVsbFJlcXVlc3RMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbC9wdWxsLzE2OTIzIiwiRXZlbnRUeXBlIjoiVGh1bWJzVXAifQ==&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs up\"><strong>:thumbsup:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiUGF1bEhpZ2luIiwiUmVwb3NpdG9yeUxpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsIiwiUHVsbFJlcXVlc3RMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbC9wdWxsLzE2OTIzIiwiRXZlbnRUeXBlIjoiTmV1dHJhbCJ9&amp;anonymous=True\" target=\"_blank\" title=\"Neutral\"><strong>&nbsp;:ok_hand:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiUGF1bEhpZ2luIiwiUmVwb3NpdG9yeUxpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsIiwiUHVsbFJlcXVlc3RMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbC9wdWxsLzE2OTIzIiwiRXZlbnRUeXBlIjoiVGh1bWJzRG93biJ9&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs down\"><strong>&nbsp;:thumbsdown:</strong></a> (<a href=\"MAILTO:prquantifier@microsoft.com\" title=\"Mail to prquantifier@microsoft.com\">Email</a>)\r\n[Customize PullRequestQuantifier](https://github.com/PowerShell/PowerShell/blob/master/.github/prquantifier.yaml) for this repository.\r\n\r\n",
      "created_at": "2022-03-16T21:09:51Z",
      "updated_at": "2022-03-16T21:09:51Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Closing this PR after adding new one with clean changes.\r\n\r\nhttps://github.com/PowerShell/PowerShell/pull/17011",
      "created_at": "2022-03-16T23:08:31Z",
      "updated_at": "2022-03-16T23:08:31Z"
    }
  ],
  "created_at": "2022-02-25T17:45:46Z",
  "number": 16923,
  "state": "closed",
  "title": "Add changes for custom remote connections",
  "updated_at": "2022-03-16T23:08:32Z"
}