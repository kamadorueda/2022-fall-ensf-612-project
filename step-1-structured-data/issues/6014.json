{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6014",
  "author": "jpsnover",
  "body": "Set-PSBreakPoint should have a new parameterset to allow you to break when a terminatingerror is encountered.\r\n\r\nSet-PSBreakPoint -TerminatingError -Action {\r\n   Write-Host \"Here is where the error occured: $(Get-PSCALLSTACK)\"\r\n   continue\r\n}\r\n\r\nSet-PSBreakPoint -TerminatingError -Action {\r\n   Write-Host \"Here is where the error occured: $(Get-PSCALLSTACK). Entering the Debugger\"\r\n   break\r\n}\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I assume the above would break on an \"uncaught\" terminating error. This would be very useful and something we would want to surface via the debug UI in VSCode.  \r\n\r\nAnother option might be to add a `-FirstThrown` switch.  Sometimes in our zeal to squash errors, a terminating error would never be considered \"uncaught\" because we'd have a `catch {}` buried in our code somewhere that swallows the terminating error.  In this case, it is quite handy to be able to trigger a breakpoint where the terminating error is initially thrown.  It would also be handy to have a filter parameter to eliminate false triggers e.g. `-FirstThrownFilter {$exception -is [Management.Automation.ItemNotFoundException]` or `-FirstThrownFilter {(Get-PSCallStack)[0].Command -eq 'SuspectedFunc'}`",
      "created_at": "2018-01-24T19:24:46Z",
      "updated_at": "2018-01-30T18:40:37Z"
    },
    {
      "author": "jpsnover",
      "author_association": "CONTRIBUTOR",
      "body": "Nice point.  We should be able to break on both ANY terminating error OR any UNCAUGHT terminating error.\r\n",
      "created_at": "2018-01-25T17:41:36Z",
      "updated_at": "2018-01-25T17:41:36Z"
    }
  ],
  "created_at": "2018-01-24T18:40:07Z",
  "number": 6014,
  "state": "open",
  "title": "Set-PSBreakpoint -TerminatingError ",
  "updated_at": "2018-01-30T18:40:37Z"
}