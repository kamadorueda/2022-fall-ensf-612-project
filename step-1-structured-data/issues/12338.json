{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12338",
  "author": "mosullivan-wyse",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n$tmr_OnTick = {\r\n    param([System.Object] $sender, [System.Timers.ElapsedEventArgs] $eventArgs)\r\n    \"The Elapsed event was raised at {0:HH:mm:ss.fff}\" -f $eventArgs.SignalTime | Write-Host;\r\n}\r\n\r\n$tmr = New-Object System.Timers.Timer\r\n$tmr.Interval = 1000;\r\n$tmr.Enabled = $true;\r\nRegister-ObjectEvent -InputObject $tmr -EventName Elapsed -Action $tmr_OnTick\r\n\r\n$psStartInfo = New-Object System.Diagnostics.ProcessStartInfo -ArgumentList @((Get-Command -Name 'powershell').Path);\r\n$psStartInfo.Arguments = '-Command \"Start-Sleep 5; &whoami; exit\"';\r\n$psStartInfo.CreateNoWindow = $true;\r\n$psStartInfo.UseShellExecute = $false;\r\n$psStartInfo.RedirectStandardOutput = $true;\r\n$psStartInfo.StandardOutputEncoding = [System.Text.Encoding]::ASCII\r\n$posh = New-Object System.Diagnostics.Process\r\n$posh.StartInfo = $psStartInfo;\r\n\r\n$oStdOutBuilder = New-Object System.Text.StringBuilder;\r\n$oStdOutEvent = {\r\n    param([System.Object] $sender, [System.Diagnostics.DataReceivedEventArgs] $eventArgs)\r\n    ($global:oStdOutBuilder).Append($eventArgs.Data);\r\n}\r\n\r\n# This works:\r\n#Register-ObjectEvent -InputObject $posh -EventName 'OutputDataReceived' -Action $oStdOutEvent\r\n# This doesn't:\r\n$posh.Add_OutputDataReceived($oStdOutEvent);\r\n\r\n\"Everything is still working for now...\" | Write-Host\r\nfor($i = 0; $i -lt 3; $i++) {\r\n    Start-Sleep 1\r\n}\r\n\"But after the child process spawns, it writes to stdout after 5 seconds...\" | Write-Host\r\n\r\n[void] $posh.Start();\r\n$posh.BeginOutputReadLine();\r\n\"Let's just watch the events...\" | Write-Host\r\nfor($i = 0; $i -lt 10; $i++) {\r\n    Start-Sleep 1\r\n}\r\n[void] $posh.WaitForExit();\r\n\r\n\"Output Stream:`n$($oStdOutBuilder.ToString())\" | Write-Host\r\n$tmr.Dispose();\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nmypcname\\myusername\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nAn error has occurred that was not properly handled. Additional information is shown below. The PowerShell process will exit.\r\nUnhandled exception. System.Management.Automation.PSInvalidOperationException: There is no Runspace available to run scripts in this thread. You can provide one in the DefaultRunspace property of the System.Management.Automation.Runspaces.Runspace type. The script block you attempted to invoke was:\r\n    param([System..($eventArgs.Data);\r\n\r\n   at System.Management.Automation.ScriptBlock.GetContextFromTLS()\r\n   at System.Management.Automation.ScriptBlock.InvokeAsDelegateHelper(Object dollarUnder, Object dollarThis, Object[] args)\r\n   at lambda_method(Closure , Object , DataReceivedEventArgs )\r\n   at System.Diagnostics.Process.OutputReadNotifyUser(String data)\r\n   at System.Diagnostics.AsyncStreamReader.FlushMessageQueue(Boolean rethrowInNewThread)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Diagnostics.AsyncStreamReader.<>c.<FlushMessageQueue>b__18_0(Object edi)\r\n   at System.Threading.QueueUserWorkItemCallback.<>c.<.cctor>b__6_0(QueueUserWorkItemCallback quwi)\r\n   at System.Threading.ExecutionContext.RunForThreadPoolUnsafe[TState](ExecutionContext executionContext, Action`1 callback, TState& state)\r\n   at System.Threading.QueueUserWorkItemCallback.Execute()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\nThis occurs on all versions of PowerShell I have tried, I initially thought it was limited to 5.1 but it also happens all the way through to the latest. I originally reported the error here:\r\nhttps://social.technet.microsoft.com/Forums/scriptcenter/en-US/e7e2ce89-79aa-4854-837b-9ff939c5c636/powershell-bug-report-addoutputdatareceived-events-causing-crashes\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.18362.752\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.18362.752\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0\r\nOS                             Microsoft Windows 10.0.18362\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nPlease let the 5.1 team(s) know, too. I expect my workplace will be more likely to run Windows Update than to install PS Core.",
  "closed_at": "2020-04-16T16:05:46Z",
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "If an event is raised on a thread other than the default runspace thread then that's expected.  That is (I assume) a large part of why `Register-ObjectEvent` exists.  Is there an issue you're running into that you believe using the add accessor directly would resolve?",
      "created_at": "2020-04-16T12:47:03Z",
      "updated_at": "2020-04-16T12:47:03Z"
    },
    {
      "author": "mosullivan-wyse",
      "author_association": "NONE",
      "body": "I am surprised that this would fail when other Add_EventName methods work for objects like buttons and other controls for forms. If I understand your explanation, this is specifically related to the fact that the event source is derived from a child process, right?\r\n\r\nAt a glance there is no functional difference for me to use Register-ObjectEvent for my use case. It is purely stylistic preference.",
      "created_at": "2020-04-16T14:26:46Z",
      "updated_at": "2020-04-16T14:27:57Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> If I understand your explanation, this is specifically related to the fact that the event source is derived from a child process, right?\r\n\r\nIt's dependent on what thread the event is raised on. For example take this class:\r\n\r\n```powershell\r\nAdd-Type -TypeDefinition '\r\n    using System;\r\n    using System.Threading;\r\n\r\n    public class Test\r\n    {\r\n        public event EventHandler ThingHappened;\r\n\r\n        public void TriggerThingHappened()\r\n        {\r\n            new Thread(() => this.ThingHappened?.Invoke(this, null)).Start();\r\n        }\r\n    }'\r\n\r\n$test = [test]::new()\r\n$test.add_ThingHappened({})\r\n$test.TriggerThingHappened()\r\n```\r\n\r\nThere's significantly more logic that goes into `Register-ObjectEvent` that makes it possible to reroute the raised event to the right thread.  When you're using the add accessor directly, you're just creating a very thin wrapper around a script block that C# code knows how to invoke.  It doesn't know anything about what context to invoke it in though, so sometimes it will work sometimes it won't depending on the implementation of the class you're utilizing.",
      "created_at": "2020-04-16T14:41:40Z",
      "updated_at": "2020-04-16T14:41:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Please let the 5.1 team(s) know, too. \r\n\r\nWindows PowerShell is frozen and get only critical and security fixes. All new work is only for PowerShell 7+.\r\n\r\nPlease repeat your tests with latest PowerShell 7.1 preview build.",
      "created_at": "2020-04-16T14:54:20Z",
      "updated_at": "2020-04-16T14:54:20Z"
    },
    {
      "author": "mosullivan-wyse",
      "author_association": "NONE",
      "body": "Thanks @SeeminglyScience, your example makes it more clear where the behaviour originates.\r\n\r\n@iSazonov I have tested both my example & the one given by @SeeminglyScience on the latest preview build and it behaves the same. Register-ObjectEvent is robust enough for my situation, however.\r\n\r\nApologies for the confusion. Had I tried it in >PS5.1 I would have found better keywords. I will close this ticket as I believe this to be related to the below items and is understood:\r\nhttps://github.com/PowerShell/PowerShell/issues/11658\r\nhttps://github.com/dotnet/runtime/issues/2024",
      "created_at": "2020-04-16T16:05:46Z",
      "updated_at": "2020-04-16T16:05:46Z"
    },
    {
      "author": "ilatypov",
      "author_association": "NONE",
      "body": "How do I get a reliably ordered stdout or stderr from a spawned process that I want to monitor in real time?  Is there a work-around for Powershell 5.1?  Or was the issue rooted in .Net Core? (Then why did the issue manifest in Powershell 5.1 and 7?)\r\n\r\nI switched to pwsh 7.3.0-preview.4 but still got the stdout of a monitored process in a wrong order (even after using a synchronized queue in the event handler to store the output and dequeue-ing in the main loop waiting on the application to exit).\r\n",
      "created_at": "2022-06-18T06:36:57Z",
      "updated_at": "2022-06-20T02:49:17Z"
    }
  ],
  "created_at": "2020-04-16T10:38:35Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 12338,
  "state": "closed",
  "title": "Add_OutputDataReceived Event Causes Unhandled Error in PowerShell Process",
  "updated_at": "2022-06-20T02:49:17Z"
}