{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2087",
  "author": "SteveL-MSFT",
  "body": "<!--\n\nIf it is a bug report:\n- make sure you are able to repro it on the latest released version. \nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\n- Search the existing issues.\n- Refer to the [FAQ](../docs/FAQ.md).\n- Refer to the [known issues](../docs/KNOWNISSUES.md).\n- Fill out the following repro template\n\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\n-->\n## Steps to reproduce\n\nget-content <large file bigger than ram> | set-content foo.txt\nget-content <large file bigger than ram> > bar.txt\n## Expected behavior\n\nboth succeed with similar performance\n## Actual behavior\n\nfirst one fails due to memory usage\n\nReported from:\nhttps://twitter.com/troyhunt/status/769108300973563904\n\nI think the meta issue is discovery for end users.  This may be a common obvious operation for many.\n",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "At least conceptually, `Set-Content` should always be faster, because it needn't involve the default output formatter.\r\nA quick, informal test on my macOS 10.12.6 machine shows that `Set-Content` is indeed about twice as fast as `>` (though note that as of beta.6 `>` still produces UTF16-LE, while `Set-Content` produces UTF-8).\r\n\r\nWith output from an external utility - which is invariably _text_ - `Set-Content` is arguably the better tool, though `>` / `Out-File` work fine _functionally_ too (encoding differences in Windows PowerShell aside, `Set-Content` / `Out-File` produce the same output with _string_ input).\r\n\r\nThat `Set-Content` would involve array allocation is somewhat baffling (haven't looked at the source yet).\r\n\r\nThe error aside, it's fair to say that PowerShell has a performance problem here.\r\n\r\nLet's compare commands that write a 1-million-element array to a file (sample timings from my machine):\r\n\r\nPowerShell:\r\n\r\n```powershell\r\n> $a = 1..1000000; Measure-Command { $a > t.txt } | % TotalSeconds \r\n83.074664  # as stated, with Set-Content this would roughly be halved on my machine\r\n```\r\n\r\nBash:\r\n\r\n```sh\r\n$ a=( {1..1000000} ); time printf '%s\\n' \"${a[@]}\" > t.txt\r\nreal\t0m6.342s\r\n...\r\n```\r\n\r\nThat's a factor of 13.\r\n\r\n",
      "created_at": "2017-09-12T13:59:54Z",
      "updated_at": "2017-09-12T13:59:54Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Is this issue still relevant?",
      "created_at": "2021-08-26T03:39:50Z",
      "updated_at": "2021-08-26T03:39:50Z"
    }
  ],
  "created_at": "2016-08-26T22:24:07Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine-Performance",
    "Up-for-Grabs"
  ],
  "number": 2087,
  "state": "open",
  "title": "set-content needs to perform more like > for simple redirection scenarios",
  "updated_at": "2021-08-26T03:39:50Z"
}