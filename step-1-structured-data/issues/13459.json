{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13459",
  "author": "daxian-dbw",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nxUnit tests fail when running with `Debug` configuration after #11482. The failed tests are those related to `WindowsStyle_With_Right_Value` because `ConsoleControl.SetConsoleMode` actually gets called during testing but there is [no console window](https://github.com/PowerShell/PowerShell/blob/master/src/Microsoft.PowerShell.ConsoleHost/host/msh/ConsoleControl.cs#L459), so the assert fails.\r\n\r\nThis PR moves the call to `ConsoleControl.SetConsoleMode` out of the argument parser.\r\n\r\n## PR Context\r\n\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-08-21T18:59:31Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "My idea is to make the parser self-contained as much as possible -- its properties shouldn't be changed from outside the parser except for test hooks.\r\n\r\nSpecifically, `ConfigurationName` should be properly set within the parser, so after calling `_parser.Parse(args)`, `_parser` should have the correct `ConfigurationName` value without needing to do the following:\r\n```c#\r\n_parser.ConfigurationName = CommandLineParameterParser.GetConfigurationNameFromGroupPolicy();\r\n```",
      "created_at": "2020-08-17T16:58:36Z",
      "updated_at": "2020-08-17T17:01:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "ConsoleHost is owner of the parser (s_cpp), it defines how use results of command line parsing so I believe all logic should be in ConsoleHost, not in the parser.\r\nIt would be surprising if the PowerShell parser started compiling or interpreting or making WMI queries.\r\n",
      "created_at": "2020-08-17T18:16:04Z",
      "updated_at": "2020-08-17T18:16:04Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I don't think it really matters to make `CommandLineParser` a pure argument parser that doesn't do anything else, and I can imagine that future changes to it for additional flags may likely add simple side effect operations to it. I don't see that's a problem, as long as the new flags are testable with test-hook properties.",
      "created_at": "2020-08-17T19:09:35Z",
      "updated_at": "2020-08-17T19:14:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I don't see that's a problem\r\n\r\nOh, I spent many time to debug new tests because the parser has side effects. If you catch the issue again it confirms that the design is not so good and the worst thing is that this again provokes the addition of workarounds not only in tests but also in the main code. This is what I tried to avoid in my PR. Sorry for long discussion.\r\n\r\n",
      "created_at": "2020-08-18T03:47:00Z",
      "updated_at": "2020-08-18T03:47:00Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> I spent many time to debug new tests because the parser has side effects.\r\n\r\nIt reveals the fact that the code was not written in a testable way, and hence I added the constructor for testing purpose and the `_isForTesting` field.\r\n\r\nAgain, I personally don't care that much to make the argument parser a pure parser without side effect, and it's likely we cannot hold that true in future changes, unless you can catch and review all subsequent changes to the argument parser :).\r\n\r\nFor now, I care more about fixing the test failure in debug build, so I will just go with your approach for this PR :)",
      "created_at": "2020-08-18T17:31:53Z",
      "updated_at": "2020-08-18T18:59:02Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> It reveals the fact that the code was not written in a testable way, and hence I added the constructor for testing purpose and the _isForTesting field.\r\n>\r\n> Again, I personally don't care that much to make the argument parser a pure parser without side effect, and it's likely we cannot hold that true in future changes, unless you can catch and review all subsequent changes to the argument parser :).\r\n\r\nTo express a personal preference, I think:\r\n\r\n- Testability and purity are closely related, and both also help code quality and robustness\r\n- Using flags to change side-effects into testable state means testing code paths and production code paths aren't the same\r\n- My ideal would be for the argument parser to process the `string[] args` input and spit out an object that we could either test or send to the consuming ConsoleHost component. Similar to [this .NET library](https://github.com/commandlineparser/commandline#quick-start-examples) or [the prevailing Rust library](https://github.com/clap-rs/clap#quick-example). (System.CommandLine operates at a different level, so doesn't really compare here)\r\n\r\nWith that said, I know we ultimately want to minimise code churn and maximise performance, so an \"ideal\" design may not be the right move here",
      "created_at": "2020-08-18T20:33:35Z",
      "updated_at": "2020-08-18T20:33:35Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I know we ultimately want to minimise code churn and maximise performance\r\n\r\nAs side value, after decoupling the parser we can easy measure its performances with `dotnet test`. \r\n\r\nAs side thought, we do xUnit tests based exclusively on SMA and we could test decoupling (independent from SMA) code in separate xUnit tests to check the algorithms used.\r\n",
      "created_at": "2020-08-19T03:23:55Z",
      "updated_at": "2020-08-19T03:23:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The Windows test fails\r\n```\r\n[-] Pre-Requisistes link for 'WMF 4.0' is reachable: https://www.microsoft.com/download/details.aspx?id=40855\r\n```\r\nThe link does not work https://www.microsoft.com/download/details.aspx?id=40855\r\n\r\nI think it is important for Windows Installer.\r\n\r\n/cc @TravisEz13 @adityapatwardhan  @SteveL-MSFT \n\n<blockquote><img src=\"//www.microsoft.com/favicon.ico?v2\" width=\"48\" align=\"right\"><div><strong><a href=\"https://www.microsoft.com/download/details.aspx?id=40855\">Error 404 - Not Found</a></strong></div></blockquote>",
      "created_at": "2020-08-19T03:27:46Z",
      "updated_at": "2020-08-19T03:27:48Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> The Windows test fails\r\n\r\nWe're working on this. Unclear why it's failing",
      "created_at": "2020-08-19T03:46:55Z",
      "updated_at": "2020-08-19T03:46:55Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "That test was disabled by https://github.com/PowerShell/PowerShell/pull/13479. The failure was tracked by #13478",
      "created_at": "2020-08-19T16:16:48Z",
      "updated_at": "2020-08-19T16:16:48Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@rjmholt I think this one is ready to merge.",
      "created_at": "2020-08-21T17:35:47Z",
      "updated_at": "2020-08-21T17:35:47Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.1.0-preview.7` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.7)\n",
      "created_at": "2020-09-08T22:50:25Z",
      "updated_at": "2020-09-08T22:50:25Z"
    }
  ],
  "created_at": "2020-08-16T22:15:39Z",
  "number": 13459,
  "state": "closed",
  "title": "Fix test hooks for `CommandLineParameterParser`",
  "updated_at": "2020-09-08T22:50:25Z"
}