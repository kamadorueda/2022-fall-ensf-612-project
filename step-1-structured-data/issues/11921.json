{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11921",
  "author": "mklement0",
  "body": "Note: The following discusses the issue with respect to the `-is` operator, but the same applies to the \r\n`-as` operator (which is currently broken even when using the _full_ type name - see #4343).\r\n\r\n`-is [pscustomobject]` (and analogously `-as [pscustomobject]`) should work meaningfully as follows:\r\n\r\n```powershell\r\n# -is [pscustomobject] should only be true for true \r\n# [System.Management.Automation.PSCustomObject] instances\r\n# (PSObject instances without a .NET base object)\r\n\r\n[pscustomobject] @{} -is [pscustomobject] | Should -BeTrue # OK\r\n42 -is [pscustomobject] | Should -BeFalse  # OK\r\n(Get-Item /) -is [pscustomobject] | Should -BeFalse  # BROKEN\r\n(Write-Output 42) -is [pscustomobject] | Should -BeFalse # BROKEN\r\n```\r\n\r\n----\r\n\r\n### Background Information\r\n\r\nCurrently, the only way to test meaningfully for whether a given value is a custom object is to do the use the _full_ type name:\r\n\r\n```powershell\r\n# Works, but only with the *full* type name.\r\n[pscustomobject] @{} -is [System.Management.Automation.PSCustomObject] | Should -BeTrue\r\n(Get-Item /) -is [System.Management.Automation.PSCustomObject] | Should -BeFalse\r\n```\r\n\r\nSurprisingly, `[pscustomobject]` does _not_ work meaningfully:\r\n\r\n```powershell\r\n# !! Returns $true, because [pscustomobject] is really [psobject]\r\n(Get-Item /) -is [pscustomobject] \r\n```\r\n\r\nThe reason is that `[pscustomobject]` is unexpectedly the same as `[psobject]` (!), i.e., it is type accelerator for `System.Management.Automation.PSObject` rather than for `System.Management.Automation.PSCustomObject`, for historical reasons (see #4344). \r\nTherefore, _any_ `[psobject]`-wrapped .NET object returns `$true` for `-is [pscustomobject]`, which is both confusing and virtually useless.\r\n\r\nNote that there already _is_ precedent for _situationally_ distinguishing between `[pscustomobject]` and `[psobject]`, namely in the context of custom-object _literals_ via _syntactic sugar_ `[pscustomobject] @{ ... }` (constructs a custom object), which doesn't work with `[psobject] @{ ... }` (constructs a hashtable and uselessly wraps it in `[psobject]`).\r\n\r\nSee also:\r\n\r\n* #9997, where meaningful use of `-is [AutomationNull]`  is proposed to allow distinguishing `[System.Management.Automation.Internal.AutomationNull]::Value` values from true `$null` values.\r\n\r\n* Pending PR #10704, which implements the ability to use`-is $null ` to test for `$null` values.",
  "closed_at": null,
  "comments": [],
  "created_at": "2020-02-21T19:58:48Z",
  "labels": [
    "Issue-Enhancement"
  ],
  "number": 11921,
  "state": "open",
  "title": "Make -is [pscustomobject] and -as [pscustomobject] work meaningfully",
  "updated_at": "2020-02-23T16:57:02Z"
}