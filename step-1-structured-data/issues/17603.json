{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17603",
  "author": "MatejKafka",
  "body": "### Summary of the new feature / enhancement\r\n\r\nWhen running a PowerShell script in a new Runspace, I want to set the working directory. Currently, I cannot set it using `InitialSessionState`, and instead have to first `.Open()` the Runspace and then set it by calling `runspace.SessionStateProxy.Path.SetLocation(...);`.\r\n\r\nThis is\r\n 1. cumbersome \u2013 almost everything else can be set declaratively using `initialSessionState`, but not the working directory, even through the working directory setup is handled there (in `.Bind` and `.SetSessionStateDrive`),\r\n 2. wrong \u2013 any modules imported during `.Open()` (configured using `initialSessionState.ImportPSModules(...)`) will see the process-wide .NET working directory, especially script modules with top-level statements.\r\n\r\nTo avoid issue 2., I believe this ugly hack is currently required (which could have side-effects for other running threads):\r\n```c#\r\nvar originalWorkingDirectory = Environment.CurrentDirectory;\r\ntry {\r\n    Environment.CurrentDirectory = ...;\r\n    runspace.Open();\r\n} finally {\r\n    Environment.CurrentDirectory = originalWorkingDirectory;\r\n}\r\n```\r\n\r\n### Proposed technical implementation details (optional)\r\n\r\nAdd an `initialSessionState.WorkingDirectory` string property, initially set to `null`, which can be overwritten with a custom working directory. If unchanged, the current behavior is kept, so it should be a backwards compatible change. If the directory does not exist, throw an exception.\r\n\r\nIf we agree on this solution, I could try implementing a PR.",
  "closed_at": null,
  "comments": [],
  "created_at": "2022-06-28T21:58:20Z",
  "number": 17603,
  "state": "open",
  "title": "Allow configuring working directory for a new Runspace in InitialSessionState",
  "updated_at": "2022-06-29T18:04:51Z"
}