{
  "_url": "https://github.com/PowerShell/PowerShell/issues/18524",
  "author": "alexbuckgit",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nBecause the return type of `ConvertFrom-Json -AsHashTable` changed from `[HashTable]` to `[OrderedHashtable]`, any code explicitly checking that the return type equals `[Hashtable]` using `-eq` (rather than `-is`) will likely break.\r\n\r\nTo avoid breaking existing code, consider reverting `-AsHashtable` functionality to return a `[Hashtable]` and adding a separate switch for `-AsOrderedHashtable`.\r\n\r\n\r\n### Expected behavior\r\n\r\n```console\r\n> ('{ \"name\": \"Id\", \"value\": 1 }' | ConvertFrom-Json -AsHashTable).GetType() -eq [Hashtable]\r\nTrue\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\n> ('{ \"name\": \"Id\", \"value\": 1 }' | ConvertFrom-Json -AsHashTable).GetType() -eq [Hashtable]\r\nFalse\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.3.0\r\nPSEdition                      Core\r\nGitCommitId                    7.3.0\r\nOS                             Microsoft Windows 10.0.22000\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "While I can't comment as to whether this should be reverted, a workaround for code checking to see if it's a dict like object is to do `-is [System.Collections.IDictionary]`.",
      "created_at": "2022-11-10T23:43:35Z",
      "updated_at": "2022-11-10T23:43:35Z"
    },
    {
      "author": "alexbuckgit",
      "author_association": "NONE",
      "body": "Hi @jborean93 -\r\n\r\nI'm using `-is` in nearly all cases, but I'm concerned about existing production code that will stop working abruptly upon upgrade due to the change.",
      "created_at": "2022-11-11T00:17:27Z",
      "updated_at": "2022-11-11T00:17:27Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Sure that's always a concern and something that the pwsh team will have to weigh up when it comes to stuff like this. An ordered dict was used to fix a bug where people wanted the preserved order but unfortunately had a side effect of this. It's up to the Cmdlets Utility Working Group to figure whether this was an acceptible breakage for what it fixed or whether to revert it.\r\n\r\nMy suggestion is mostly just a way you can check if it's a dictionary type by using `[System.Collections.IDictionary]` vs `[Hashtable]` or `[OrderedDict]`. This way you can update your scripts to be compatible for both 7.3 and pre 7.3 regardless of whether the change is backed out or kept.",
      "created_at": "2022-11-11T01:03:29Z",
      "updated_at": "2022-11-11T01:03:55Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "From the coulda-woulda-shoulda department: \r\n\r\nIn an ideal world, PowerShell would _consistently_ default to _ordered_ hash tables  (dictionaries) (`[System.Collections.Specialized.OrderedDictionary]`), both with respect to `@{ ... }` literals and with what cmdlets return, both those that have an `-AsHashTable` switch as well as those that return hash tables by default, such as `ConvertFrom-StringData` and `Import-PowerShellDataFile`.\r\n\r\nMaintaining entry-definition order is almost always helpful and adds little processing overhead, whereas the inherently unordered entries of `[hashtable]`  instances frequently lead to confusion / undesired behavior.\r\n\r\nPerhaps needless to say, making such a fundamental change could break even more existing production code.\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2022-11-11T03:40:37Z",
      "updated_at": "2022-11-11T03:40:58Z"
    }
  ],
  "created_at": "2022-11-10T20:44:36Z",
  "labels": [
    "WG-Cmdlets-Utility",
    "Needs-Triage"
  ],
  "number": 18524,
  "state": "open",
  "title": "Breaking change in PS 7.3.0: ConvertFrom-Json -AsHashTable",
  "updated_at": "2022-11-11T03:40:58Z"
}