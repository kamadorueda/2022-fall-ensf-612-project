{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12304",
  "author": "p0W3RH311",
  "body": "its possible to add this feature because is powerful technique for example...\r\n\r\n```\r\n$user = @{name='mee'; access='guest'}\r\n\r\nfunction make-secure {   \r\n      if($user.access -eq 'admin') {\r\n         return $\\.value  \r\n       }\r\n      else {\r\n        return \"try again :)\"\r\n       }\r\n}\r\n\r\nfunction  Get-Admin  : make-secure {\r\n     return 'pass' \r\n}\r\n\r\nPS >> Get-admin\r\ntry again :)\r\n\r\nPS >> $user.access = 'admin'  \r\nPS >> Get-Admin \r\npass\r\n```\r\n\r\n$\\  is a hashtable and contains the name of the caller function and the data returned by caller function\r\n\r\n\r\n```\r\nNAME        VALUE\r\n----       ------\r\nGet-Admin   'pass'\r\n```\r\n\r\nin this  example function  'make-secure' change the bahaviour to the function Get-Admin without modifyng get-admin\r\n\r\n```\r\nfunction Get-Admin : make-secure {\r\n   .....\r\n........\r\n}\r\n```\r\n\r\ninside make-secure  function i use new variable $\\  its contains metadata of caller function ex: name, value returned,...etc ",
  "closed_at": "2020-04-17T00:00:12Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think it is an area for PowerShell classes.\r\n/cc @rjmholt for conclusion.",
      "created_at": "2020-04-14T07:09:37Z",
      "updated_at": "2020-04-14T07:09:37Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> I think it is an area for PowerShell classes.\r\n\r\nActually this wouldn't involve classes at all. [Python has an established decorator concept](https://wiki.python.org/moin/PythonDecorators), but an important note is that they rely on closures. PowerShell uses dynamic scope and therefore doesn't naturally have closures (it's possible to make one, but it's really not normal language semantics for us). That might not be an issue, but the motivating example assumes closure-like semantics, which don't apply to PowerShell. It could be made to work as intended (where the user table is private to the end caller) with script/module scope though.\r\n\r\nI think the proposed syntax is too conflated with the class inheritance syntax, and we'd be better off using an attribute or similar (that's what Python's `@<name>` syntax is).\r\n\r\nBut my experience with Python decorators is that while they look cool, they don't get all that much use in practice, mainly because they're complex and there are plenty of good alternatives. I think if we can find a strong motivator for decorators we should definitely consider them, but we need a strong case before we build a new language syntax or feature like this.",
      "created_at": "2020-04-15T16:42:58Z",
      "updated_at": "2020-04-15T16:42:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I close this until we get important business scenario for the feature.",
      "created_at": "2020-04-15T16:58:06Z",
      "updated_at": "2020-04-15T16:58:06Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-04-17T00:00:11Z",
      "updated_at": "2020-04-17T00:00:11Z"
    }
  ],
  "created_at": "2020-04-12T15:23:52Z",
  "number": 12304,
  "state": "closed",
  "title": "New feature: decorate  function with function",
  "updated_at": "2020-04-17T00:00:12Z"
}