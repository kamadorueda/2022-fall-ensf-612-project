{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14528",
  "author": "whitequill",
  "body": "## Summary of the new feature/enhancement\r\n\r\nHow to reproduce the problem:\r\n`Get-ChildItem -Filter \"*.py\",\"*.bat\"` or `Get-ChildItem -Filter @(\"*.py\",\"*.bat\")`\r\nCommand used to do this:\r\n`ForEach-Object -Process {Get-ChildItem \"*.py\",\"*.bat\"}`\r\n\r\nThis is simply annoying. The need to use `ForEach-Object` to `-Filter` multiple things.\r\n## Proposed technical implementation details (optional)\r\n\r\nI'm not sure if this is a **technical** _implimetaion_, but it will be an example of how I feel the `-Filter` perimeter could work.\r\n ```Powershell\r\n$filter = @('*.exe','*.dll','*.pyd','*.lib')\r\nGet-ChildItem -Filter $filter[0..3]\r\n```\r\n\r\n**The result is just what you get from this command:**\r\n`ForEach-Object -Process {Get-ChildItem '*.exe','*.dll','*.pyd','*.lib'}`\r\n\r\nThe exception being it makes more sense to the layman cause you're not stringing seemingly disparate command-lets together that would have the same result as if you used `-Filter` and could pass it more the one argument.\r\n\r\nThis does work right now as Get-ChildItem currently works, as an example:\r\n`Get-ChildItem -Filter Get-ChildItem -Filter $filter[3]`\r\n",
  "closed_at": "2021-01-02T09:16:36Z",
  "comments": [],
  "created_at": "2021-01-02T08:52:26Z",
  "number": 14528,
  "state": "closed",
  "title": "make Get-ChildItem -Filter take more then one argument",
  "updated_at": "2021-01-02T09:16:36Z"
}