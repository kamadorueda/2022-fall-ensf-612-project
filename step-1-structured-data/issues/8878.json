{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8878",
  "author": "rjmholt",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\nI get command suggestions for commands that just failed, presumably because a compatibility check isn't done.\r\n\r\nLooks related to https://github.com/PowerShell/PowerShell/issues/8207.\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n> Set-Clipboard\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nSet-Clipboard : The term 'Set-Clipboard' is not recognized as the name of a cmdlet, function, script file, or operable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\nAt line:1 char:1\r\n+ Set-Clipboard\r\n+ ~~~~~~~~~~~~~\r\n+ CategoryInfo          : ObjectNotFound: (Set-Clipboard:String) [], CommandNotFoundException\r\n+ FullyQualifiedErrorId : CommandNotFoundException\r\n\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nSet-Clipboard : The term 'Set-Clipboard' is not recognized as the name of a cmdlet, function, script file, or operable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\nAt line:1 char:1\r\n+ Set-Clipboard\r\n+ ~~~~~~~~~~~~~\r\n+ CategoryInfo          : ObjectNotFound: (Set-Clipboard:String) [], CommandNotFoundException\r\n+ FullyQualifiedErrorId : CommandNotFoundException\r\n\r\n\r\nSuggestion [4,General]: The most similar commands are: Set-Clipboard, Get-Clipboard.\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.0-preview.4\r\nPSEdition                      Core\r\nGitCommitId                    6.2.0-preview.4\r\nOS                             Microsoft Windows 10.0.18334\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@rjmholt  This does not seem to be related to your linked issue because `gcm set-clipboard` does not return anything.\r\nThe real issue and solution is https://github.com/PowerShell/PowerShell/issues/4307#issuecomment-391121584 whereby .Net Core 2.x does not have those APIs, therefore the cmdlet is not available on Windows and users should use the [ClipboardText](https://www.powershellgallery.com/packages/ClipboardText/0.1.7) module instead atm.\r\nHowever, should we maybe reopen #4307 once .Net Core 3 is there that would add the ClipBoard APIs @SteveL-MSFT  ?",
      "created_at": "2019-02-25T11:52:01Z",
      "updated_at": "2019-02-25T11:52:12Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@bergmeister that's a good point about `gcm Set-Clipboard` not finding anything.",
      "created_at": "2019-02-25T18:13:28Z",
      "updated_at": "2019-02-25T18:13:28Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Also @SteveL-MSFT, this now happens with the suggestions addition:\r\n\r\n```\r\n> Set-Clipboard\r\nSet-Clipboard : The term 'Set-Clipboard' is not recognized as the name of a cmdlet, function, script file, or operable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\nAt line:1 char:1\r\n+ Set-Clipboard\r\n+ ~~~~~~~~~~~~~\r\n+ CategoryInfo          : ObjectNotFound: (Set-Clipboard:String) [], CommandNotFoundException\r\n+ FullyQualifiedErrorId : CommandNotFoundException\r\n\r\n\r\nSuggestion [4,General]: The most similar commands are: Set-Clipboard, Get-Clipboard.\r\n```",
      "created_at": "2019-02-25T18:13:53Z",
      "updated_at": "2019-02-25T18:13:53Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The suggestion relies on `Get-Command` so those cmdlets are being found.  The question is whether we can/should do a compat check before showing it.  I suppose we can enhance the suggestion script that calls `Get-Command` to get the module of the command and check `CompatiblePSEditions` to filter out commands we think are not compatible.",
      "created_at": "2019-02-28T21:37:50Z",
      "updated_at": "2019-02-28T21:37:50Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Why is `Get-Command` even able to find incompatible cmdlets in the first place? ",
      "created_at": "2019-02-28T21:42:37Z",
      "updated_at": "2019-02-28T21:42:37Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Ah, so the suggestion is coming from https://github.com/PowerShell/PowerShell/issues/8207.\r\n\r\n> Why is `Get-Command` even able to find incompatible cmdlets in the first place?\r\n\r\nBecause they're right there next to all the compatible modules, but it hasn't been enhanced with the manifest-property reading thing that skips it if `CompatiblePSEditions` doesn't contain `\"Core\"`.",
      "created_at": "2019-03-01T02:00:16Z",
      "updated_at": "2019-03-01T02:01:29Z"
    }
  ],
  "created_at": "2019-02-12T22:41:52Z",
  "labels": [
    "Issue-Bug"
  ],
  "number": 8878,
  "state": "open",
  "title": "Suggestions suggest commands that are incompatible",
  "updated_at": "2019-03-01T02:01:29Z"
}