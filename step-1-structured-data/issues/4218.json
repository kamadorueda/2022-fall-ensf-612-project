{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4218",
  "author": "hmmwhatsthisdo",
  "body": "<!--\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](../docs/FAQ.md).\r\n- Refer to the [known issues](../docs/KNOWNISSUES.md).\r\n- Fill out the following repro template\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nScriptBlock objects are deserialized as strings when run through Import-CliXml.\r\n\r\n@nightroman has [a more detailed test case](https://github.com/nightroman/PowerShellTraps/tree/master/Clixml/ScriptBlock-becomes-String) on his PowerShellTraps repo, including a link to [a Microsoft Connect issue](https://connect.microsoft.com/PowerShell/feedback/details/1202386) from March of 2015. This appears to have been [migrated](https://windowsserver.uservoice.com/forums/301869-powershell/suggestions/11088468-clixml-system-management-automation-psserialize) to the Windows Server UserVoice, but the issue still exists in v6.0.0-beta.3.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n\r\n{Get-Process} | Export-Clixml .\\Test.clixml\r\n\r\nImport-Clixml .\\Test.Clixml | % GetType\r\n\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\n\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     True     ScriptBlock                              System.Object\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\n\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     True     String                                   System.Object\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-beta\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-beta.3\r\nOS                             Microsoft Windows 10.0.15063\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Historically this is by design. Serializing scriptblocks with fidelity resulted in too many places where there was automatic code execution so to facilitate secure restricted runspaces, scriptblocks are always deserialized to strings.",
      "created_at": "2017-07-12T18:11:19Z",
      "updated_at": "2017-07-12T18:11:19Z"
    },
    {
      "author": "hmmwhatsthisdo",
      "author_association": "NONE",
      "body": "Would it be feasible to implement this using a switch parameter on Import-CliXml, in that case? I can see how rehydrating scriptblocks could have a potential for unsafe code execution, but by the same token storing blocks of code alongside other object properties could prove useful in certain situations.\r\n\r\nAn approach similar to ConvertTo-SecureString - where specifying -AsPlainText throws an exception detailing the security risks unless -Force is also specified - could perhaps be applied here.",
      "created_at": "2017-07-12T20:55:04Z",
      "updated_at": "2017-07-12T20:55:04Z"
    }
  ],
  "created_at": "2017-07-11T02:53:47Z",
  "number": 4218,
  "state": "open",
  "title": "Scriptblocks serialized to Clixml are deserialized as strings",
  "updated_at": "2017-07-13T21:46:15Z"
}