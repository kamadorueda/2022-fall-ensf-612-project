{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5829",
  "author": "iSazonov",
  "body": "## PR Summary\r\nRelated #5725.\r\n\r\nIt's part of the big PR I'm trying to break into smaller pieces.\r\nSubsequent PRs will focus on enhancements.\r\n\r\n- Remove CSharp language versions and JScript from Language enum. Later we can use Roslyn parse option if we need set a language version. JScript is not in Roslyn. It is a breaking change (Approved by @SteveL-MSFT in #5725).\r\n- Correct comments.\r\n- Remove IgnoreWarnings parameter.  It is not implemented and no plans do that. We could use the standard parameter `WarningAction` if we'll need.\r\n\r\n## PR Checklist\r\n\r\nNote: Please mark anything not applicable to this PR `NA`.\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - [x] Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [NA] User facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - [NA] Issue filed - Issue link:\r\n- [ ] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n    - [NA] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n",
  "closed_at": "2018-02-01T17:25:20Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT We need an approve from PowerShell Committee.",
      "created_at": "2018-01-09T08:39:37Z",
      "updated_at": "2018-01-09T08:39:37Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this:\r\n- ok with removing jscript since it's not supported by Roslyn\r\n- ask is to investigate if passing the different versions of csharp are supported today with current implementation; prefer to not break existing users who may be passing the csharp version even though we agree that most users are likely not caring about specific version of csharp\r\n\r\nSo pending outcome of second bullet, we can decide if it's appropriate to remove the csharp versions from the enum.  Leaving as `Review - Committee` pending investigation.",
      "created_at": "2018-01-17T23:08:00Z",
      "updated_at": "2018-01-17T23:08:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "\r\n1. GitHub search results (without repetitions and `Add-Type clones`):\r\n\r\n| Version | Script | C#\r\n|- | - | -\r\n|`CSharpVersion3` | 118 | 0\r\n|`CSharpVersion2` | 1 | 0\r\n|`CSharpVersion1` | 1 | 0\r\n\r\n`CSharpVersion4`, `CSharpVersion5`, `CSharpVersion6`, `CSharpVersion7`, `CSharpVersion7` was added in \r\nPowerShell Core 6.0. Nobody still use it.\r\n\r\nNote that this cmdlet is rarely used in compilation mode, and with these exact language settings it is much less.\r\n\r\n2. I don't know scenarios where users should use lower C# version with Roslyn. Why would anyone want to block new versions or features in his _own_ code? \r\n I rather expect that users will request to add support to latest Roslyn and C# versions. Currently we have to change the cmdlet to add new version explicitly but if we'll use native Roslyn types we get this automatically. (With .Net Core hosting model even more automatically).\r\n\r\n3. @SteveL-MSFT suggested using dynamic parameters because Roslyn exposes different types for different languages. This allow us to expose exact language version strings in a parameter in any cases. I don't investigate but I guess we could to try emulate current `-Language` behavior if we could give up current `Language` enum type.\r\n",
      "created_at": "2018-01-18T05:32:33Z",
      "updated_at": "2018-01-18T05:32:33Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "More information for the committee:\r\n### In Windows PowerShell 5.1\r\nthe enum `Microsoft.PowerShell.Commands.Language` has the following members: `CSharp`, `CSharpVersion3`, `CSharpVersion2`, `VisualBasic`, `JScript`.\r\nAmong them, `CSharpVersion2` requires Microsoft .NET Framework 2 to be installed and `CSharpVersion3` requires Microsoft .NET Framework 3.5 to be installed. Therefore, on PSv5.1 these 2 options don't work unless the user manually installs .NET 2 and .NET 3.5. See examples below:\r\n```\r\nPS:2> Add-Type -TypeDefinition $source -Language CSharpVersion2\r\nAdd-Type : Cannot add type due to the following exception: Compiler executable file csc.exe cannot be found.. Verify\r\nthat Microsoft .NET Framework 2  is installed. On x64-based versions of Windows, you must also install the WOW64\r\nfeature.\r\nAt line:1 char:1\r\n+ Add-Type -TypeDefinition $source -Language CSharpVersion2\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Add-Type], InvalidOperationException\r\n    + FullyQualifiedErrorId : System.InvalidOperationException,Microsoft.PowerShell.Commands.AddTypeCommand\r\n\r\nPS:3> Add-Type -TypeDefinition $source -Language CSharpVersion3\r\nAdd-Type : Cannot add type due to the following exception: Compiler executable file csc.exe cannot be found.. Verify\r\nthat Microsoft .NET Framework 3.5  is installed. On x64-based versions of Windows, you must also install the WOW64\r\nfeature.\r\nAt line:1 char:1\r\n+ Add-Type -TypeDefinition $source -Language CSharpVersion3\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Add-Type], InvalidOperationException\r\n    + FullyQualifiedErrorId : System.InvalidOperationException,Microsoft.PowerShell.Commands.AddTypeCommand\r\n```\r\n\r\n### In PowerShell Core\r\nThe following members were added to the enum `Language` when refactoring the code with Roslyn: `CSharpVersion1`, `CSharpVersion4`, `CSharpVersion5`, `CSharpVersion6`, `CSharpVersion7`.\r\nBased on the search results from GitHub, none of them are used in any PowerShell scripts except in our tests.\r\n\r\n### Summary\r\n\r\nGiven that `CSharpVersion2` and `CSharpVersion3` by default don't work in PSv5.1 (maybe PSv5 too), maybe it's not a too bad breaking change to remove them from `Language`. As for the other `CSharpVersionN` members, none of them are used anywhere.",
      "created_at": "2018-01-20T06:53:06Z",
      "updated_at": "2018-01-20T06:53:06Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT I'm really looking forward \ud83d\ude04 ",
      "created_at": "2018-01-27T17:16:50Z",
      "updated_at": "2018-01-27T17:16:50Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this and would be fine with removing the specific versions of csharp from the enum; we do not believe there is utility to having the different versions of the csharp language specified and for users that have specified a version they will get an error indicating to just use `csharp`.  \r\n\r\nWe will be reviewing the `Breaking Change Contract` and updating as necessary to reflect how we came to this decision.",
      "created_at": "2018-01-31T23:27:49Z",
      "updated_at": "2018-01-31T23:27:49Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The `-IgnoreWarnings` parameter shouldn't be removed yet. It's implemented in Windows PowerShell by setting [`CompilerParameters.TreatWarningsAsErrors = !((bool)ignoreWarnings)`](https://github.com/PowerShell/PowerShell/blob/v6.0.0-beta.1/src/Microsoft.PowerShell.Commands.Utility/commands/utility/AddType.cs#L1723).\r\n\r\nThe parameter was not implemented when porting to Roslyn in PowerShell Core, but that doesn't mean it should be removed from PowerShell Core. I think it makes sense to support it in PowerShell Core.\r\n\r\nI pushed a commit to add this parameter back. Work can be done in future to actually support it in PowerShell Core.",
      "created_at": "2018-02-01T02:05:07Z",
      "updated_at": "2018-02-01T02:05:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw I agree with `-IgnoreWarnings`. I removed it because the name does not reflect the meaning - treat warnings as errors. I plan to add new parameter with name like `-WarnAsErrors` - we could add `IgnoreWarnings` as alias. \r\nAlso I plan add support for preprocessor constants. The rest does not look so useful - if you have other considerations please let me know.",
      "created_at": "2018-02-01T11:40:39Z",
      "updated_at": "2018-02-01T11:40:39Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> I plan to add new parameter with name like -WarnAsErrors - we could add IgnoreWarnings as alias.\r\n\r\nThat idea would work too :) The bottom line is that we need to continue to support this parameter in PowerShell Core. @iSazonov, thanks for initiating the rework of `Add-Type`!",
      "created_at": "2018-02-01T17:21:19Z",
      "updated_at": "2018-02-01T17:21:19Z"
    }
  ],
  "created_at": "2018-01-09T08:37:24Z",
  "number": 5829,
  "state": "closed",
  "title": "Cleanup Add-Type",
  "updated_at": "2018-09-28T12:46:10Z"
}