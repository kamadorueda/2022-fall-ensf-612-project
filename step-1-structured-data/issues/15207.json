{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15207",
  "author": "erenturkm",
  "body": "I am using Powershell 7.1.3 to WinRM to a remote Windows Server 2019 and do a WUAScan. I am using elevated prompts, using  new-pssession to open the session, and checking that powershell is running as elevated. However  below code is giving me access denied. The script runs fine on local machine as elevated (Windows 10 1909, Powershell 7.1.3) and on Remote (Windows Server 2019, Powershell 5) through RDS. \r\n-->\r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\n    $UpdateSession = New-Object -ComObject Microsoft.Update.Session\r\n    $UpdateServiceManager  = New-Object -ComObject Microsoft.Update.ServiceManager \r\n    $UpdateService = $UpdateServiceManager.AddScanPackageService(\"Offline Sync Service\", $file, 1) \r\n```\r\n\r\n## Expected behavior\r\nFunctioning $UpdateService object\r\n\r\n## Actual behavior\r\n\r\n```\r\nAccess is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\nAt C:\\store\\WUAScan\\WUAScan.ps1:13 char:5\r\n+     $UpdateService = $UpdateServiceManager.AddScanPackageService(\"Off ...\r\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : OperationStopped: (:) [], UnauthorizedAccessException\r\n    + FullyQualifiedErrorId : System.UnauthorizedAccessException\r\n\r\n```\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```\r\nLocal machine:\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\nRemote Server:\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.17763.592\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.17763.592\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n\r\n```\r\n",
  "closed_at": "2021-04-13T05:18:32Z",
  "comments": [
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "The Windows Update API is one of those APIs that restrict being called from a `Network` logon. There is nothing PowerShell can do about this as it is working \"by design\". It's a frustrating restriction that I have no idea why the WUA team implemented it this way but it is what it is.\r\n\r\nEssentially the only way you can get this working is to change the logon type from `Network` to something else. You can do this in many ways\r\n\r\n* Create a scheduled task to run the code\r\n  * The [PSScheduledJob](https://docs.microsoft.com/en-us/powershell/module/psscheduledjob/?view=powershell-5.1) module is a nice way to easily integrate this in PowerShell\r\n  * Otherwise the standard [ScheduledTasks](https://docs.microsoft.com/en-us/powershell/module/scheduledtasks/?view=windowsserver2019-ps) module can help you create the scheduled task and call the PowerShell code needed but this is more low level\r\n* Use psexec to start a new process as `SYSTEM` or another account with explicit credentials\r\n  * Fairly simple but requires a non-builtin tool\r\n* Implement your own PInvoke code to do the above\r\n  * You can either duplicate an existing `SYSTEM` token or\r\n  * Call [LogonUser](https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-logonuserw) to get a non Network logon token\r\n  * With these token you can call [CreateProcessWithToken](https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createprocesswithtokenw) to run your new process\r\n\r\nObviously the scheduled task way is the easiest route and is how 3rd party modules like `PSWindowsUpdate` working when run remotely.",
      "created_at": "2021-04-12T19:45:24Z",
      "updated_at": "2021-04-12T19:45:24Z"
    }
  ],
  "created_at": "2021-04-12T12:25:13Z",
  "labels": [
    "Needs-Triage"
  ],
  "number": 15207,
  "state": "closed",
  "title": "Access Denied for call over WinRM",
  "updated_at": "2021-04-13T05:18:32Z"
}