{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16941",
  "author": "nbros",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://www.powershellgallery.com/packages/PSReadLine)\n- [X] Search the existing issues, especially the pinned issues.\n\n### Exception report\n\n```console\nN/A\n```\n\n\n### Screenshot\n\n\r\n\r\n![image](https://user-images.githubusercontent.com/141089/156128492-903addd4-dcb4-47e5-bbd7-30ca68228254.png)\r\n\n\n### Environment data\n\n```console\nPS Version: 7.2.1\r\nPS HostName: ConsoleHost (Windows Terminal)\r\nPSReadLine Version: 2.2.2\r\nPSReadLine EditMode: Windows\r\nOS: 10.0.19041.1 (WinBuild.160101.0800)\r\nBufferWidth: 245\r\nBufferHeight: 67\n```\n\n\n### Steps to reproduce\n\n```\r\n> Write-Error \"an error\"\r\n> $Error[0]. <-- type <tab> or Ctrl+Space to try to complete Properties of System.Management.Automation.ErrorRecord\r\n```\n\n### Expected behavior\n\nPowershell should return completions of `System.Management.Automation.ErrorRecord`\n\n### Actual behavior\n\nPowershell apparently returns completions of `Array` instead of `ErrorRecord`.",
  "closed_at": null,
  "comments": [
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "If you unload PSReadline and try tab completing or invoke TabExpansion2 manually you get the expected results. I think the issue is that PowerShell looks at the current scope, and I guess $error exists but is empty in the PSReadline module scope.",
      "created_at": "2022-03-02T02:25:59Z",
      "updated_at": "2022-03-02T02:25:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "See #3568 for no success history.",
      "created_at": "2022-03-02T08:09:03Z",
      "updated_at": "2022-03-02T08:09:03Z"
    },
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "He said:\r\n> The original fix I made had a bad assumption as there is a valid $script:error variable.\r\n\r\nIf that's true then I don't see how this can be fixed without some sort of hack, PowerShell is correctly finding the $Error variable in the PSReadline scope.  \r\nSo the question becomes, how should the hack be implemented? Should the completion code have a special case for $Error if no results are found? Should the Safe Expression Value code have a special case for $Error within the PSReadline scope? Should PSReadline provide its own completions for $Error?",
      "created_at": "2022-03-02T22:30:40Z",
      "updated_at": "2022-03-02T22:30:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If I understand correctly current status is that the issue presents **only** if PSReadline is loaded. If so maybe @daxian-dbw advice.",
      "created_at": "2022-03-03T05:59:37Z",
      "updated_at": "2022-03-03T05:59:37Z"
    }
  ],
  "created_at": "2022-03-01T08:09:01Z",
  "number": 16941,
  "state": "open",
  "title": "No completion for Properties of $Error[n]",
  "updated_at": "2022-05-23T18:40:32Z"
}