{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2901",
  "author": "alx9r",
  "body": "My work is very much benefiting from Microsoft's responsiveness to PowerShell issues that this repository seems to have brought.  Thank you very much for that.\r\n\r\nThere are a few [painful](https://github.com/PowerShell/PowerShell/issues/2578) [bugs](https://github.com/PowerShell/PowerShell/issues/2505) that are dear to me that seem to be fixed (or are on their way) in the 6.0-alpha releases.  It seems that sometimes those bugs are released to production. [2578](https://github.com/PowerShell/PowerShell/issues/2578#issuecomment-262100658) is apparently such an example.  @SteveL-MSFT wrote that \"the change...was accepted into servicing already\".  I _think_ he meant that the change would be distributed through Windows Update/WSUS, but I haven't found any evidence of that (on my systems `powershell.exe` has modified dates of 2016-02-13 and 2016-07-19 for WMF 5.0 and 5.1, respectively).\r\n\r\nThis all leads me to these questions:\r\n\r\n1. Is there a publicly accessible way for me to determine which issues resolved in this repository are now available in which production versions of WMF and/or PowerShell?\r\n2. If not, what is the best method of determining whether an apparent fix to an issue in the repository is, in fact, included in a particular patch level of WMF and/or PowerShell?\r\n\r\nThanks for your help,\r\n\r\nAlex",
  "closed_at": "2017-01-12T00:37:20Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@alx9r I understand your frustration.  The situation is that although PowerShell is OSS, Windows certainly is not.  Windows servicing (which is what I was referring to) is a long process because app-compat is a top priority for Windows so each servicing fix goes through rigorous validation across all of Windows (which is a pretty big organization and product).  At this time, the expectation is that only critical fixes go back to PowerShell 5.x (this means security issues and any approved fixes that have gone through Microsft customer support channels).  Our team's focus is on PowerShell Core 6.0.\r\n\r\nThe release notes of [WMF5.1](https://blogs.msdn.microsoft.com/powershell/2016/12/06/wmf-5-1-releasing-january-2017/) should include all notable fixes.  Unfortunately, I can't be more specific about Windows servicing releases.",
      "created_at": "2016-12-19T17:00:12Z",
      "updated_at": "2016-12-19T17:00:12Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "@SteveL-MSFT Thank you for the clear statement.  Understanding what to expect helps a great deal to make good decisions at my end.\r\n\r\n#2505 affects the development pace of PowerShell modules containing classes.  It looks like #2505 is improved (at least partly) in 6.0-alpha.14, but that release is affected by #2902 which seems to preclude its use for the development of DSC resources.  I'm hoping for a release where DSC and the reloading of modules containing classes both work.  I understand that this might be asking too much, but can you provide any guidance on when I could expect such a release?",
      "created_at": "2016-12-19T19:58:36Z",
      "updated_at": "2016-12-19T19:59:02Z"
    }
  ],
  "created_at": "2016-12-18T16:49:00Z",
  "labels": [
    "Issue-Discussion",
    "Resolution-External"
  ],
  "number": 2901,
  "state": "closed",
  "title": "Is there a publicly accessible way to determine which fixes have been included in production WMF/PowerShell?",
  "updated_at": "2017-01-12T00:37:20Z"
}