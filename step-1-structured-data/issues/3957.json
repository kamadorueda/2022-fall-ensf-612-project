{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3957",
  "author": "SteveL-MSFT",
  "body": "As people are going back to the console for management (instead of primarily GUI), we should support curses to enable console based GUIs.\r\n\r\n- [ ] out-gridview implementation\r\n- [ ] get-member interactive navigation\r\n- [ ] get-help -showwindow (for this, my suggestion is to not literally implement `showwindow`, but to improve console rendering of help with interactive navigation)\r\n- [ ] show-command",
  "closed_at": "2020-03-14T14:44:25Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Show-Command?",
      "created_at": "2017-06-07T10:32:09Z",
      "updated_at": "2017-06-07T10:32:09Z"
    },
    {
      "author": "Bartolomeus-649",
      "author_association": "NONE",
      "body": "People are not \"going back\" to consoles for management!  They are forced to use it as there is no real alternatives!",
      "created_at": "2017-06-22T11:37:09Z",
      "updated_at": "2017-06-22T11:37:09Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "In one of the posted issues: https://github.com/PowerShell/PowerShell/issues/1808 \r\n\r\nI mention about using Python Tk with PowerShell.  I think Python would be a BIG candidate to help overcoming the missing GUI component in PowerShell.\r\n\r\n![myazuredemo_02_2017-06-11_12-03-51](https://user-images.githubusercontent.com/19892435/27436077-19fc682e-572c-11e7-9a8c-e616f5884e6c.jpg)\r\n\r\n:)\r\n\r\n",
      "created_at": "2017-06-22T13:22:16Z",
      "updated_at": "2017-06-22T13:22:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I guess Microsoft love Xamarin \ud83d\ude04 ",
      "created_at": "2017-06-22T14:42:31Z",
      "updated_at": "2017-06-22T14:42:31Z"
    },
    {
      "author": "SQLDBAWithABeard",
      "author_association": "NONE",
      "body": "Yes to enabling a seperate searchable help window a la -showwindow. That's a useful capability",
      "created_at": "2017-10-06T20:53:32Z",
      "updated_at": "2017-10-06T20:53:32Z"
    },
    {
      "author": "megamorf",
      "author_association": "CONTRIBUTOR",
      "body": "Even though I already \ud83d\udc4d this months ago, I wanted to let you guys know that Out-Gridview is a command that lots of people use to quickly preview and filter datasets. It's become a great asset in the typical admin toolbelt :-)\r\n\r\nOne of my typical use cases is to use [Select-FromGridView]( https://gallery.technet.microsoft.com/scriptcenter/Select-FromGridView-521a56d8) (which is based on ogv but keeps the objects intact)  to manually pick desired items from a collection of VMware Snapshots that I want to delete.",
      "created_at": "2018-01-11T08:22:23Z",
      "updated_at": "2018-01-11T08:25:56Z"
    },
    {
      "author": "essentialexch",
      "author_association": "NONE",
      "body": "I view curses as only a stop-gap measure. OGV based on curses is going to be quite weak in comparison to OGV on FullCLR (and yes, I'm another person that uses OGV extensively when developing solutions to examine result data-sets, even though OGV may not end up in my published solution). Whether it's tk or something else, I believe you will need to pick a true xplat gui solution.",
      "created_at": "2018-01-11T13:17:23Z",
      "updated_at": "2018-01-11T13:17:23Z"
    },
    {
      "author": "JanMulkens",
      "author_association": "NONE",
      "body": "Haven't used PS6 yet, but this is going to be missed when i do migrate",
      "created_at": "2018-01-11T14:58:15Z",
      "updated_at": "2018-01-11T14:58:15Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "I hope ogv can be implemented in some way. It is really convenient sometimes",
      "created_at": "2018-01-11T18:53:50Z",
      "updated_at": "2018-01-11T18:53:50Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@swngdnz for \"true xplat gui\", there's really only two viable solutions: vt100 and html.  With vt100, it'll work across SSH, locally, as well as in CloudShell.  Html is more limited as it'll only work locally, but it also simpler to implement.  I encourage someone from the community to build such a module.\r\n\r\nWith a curses-type solution, it isn't as limited as you may think.  Mouse navigation is supported in addition to keyboard.  Yes, the graphics won't be as rich as WPF based, but OGV isn't a graphics intense app.",
      "created_at": "2018-01-12T03:55:40Z",
      "updated_at": "2018-01-12T03:56:33Z"
    },
    {
      "author": "Tiberriver256",
      "author_association": "NONE",
      "body": "Possible alternative to curses https://github.com/chjj/blessed",
      "created_at": "2018-01-12T03:57:49Z",
      "updated_at": "2018-01-12T03:57:49Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Note that @JamesWTruher has already started some work here and we aren't actually using curses but a higher level framework that works on Linux/Mac/Windows.  Hopefully we'll have something to show in the next few months.",
      "created_at": "2018-01-12T04:04:30Z",
      "updated_at": "2018-01-12T04:04:30Z"
    },
    {
      "author": "Tiberriver256",
      "author_association": "NONE",
      "body": "Cool! Reusable console GUI framework would be awesome! Especially if it supported WPF (XAML) to easily port old GUIs or HTML to make it easy to use.",
      "created_at": "2018-01-12T04:18:56Z",
      "updated_at": "2018-01-13T14:28:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT  If \"I encourage someone from the community to build such a module.\" is actual I suggest open new Issue with  specifications and \"Up-for-Grabs\".",
      "created_at": "2018-01-12T05:00:48Z",
      "updated_at": "2018-01-12T05:00:48Z"
    },
    {
      "author": "stefanstranger",
      "author_association": "NONE",
      "body": "Was not the idea that [Phosphor](https://github.com/PowerShell/Phosphor) would offer something like this? ",
      "created_at": "2018-01-12T09:40:31Z",
      "updated_at": "2018-01-12T09:40:31Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@stefanstranger yes for non-console.  Not sure if @daviwil is still working on it, though since it was his side project.",
      "created_at": "2018-01-12T20:25:58Z",
      "updated_at": "2018-01-12T20:25:58Z"
    },
    {
      "author": "daviwil",
      "author_association": "CONTRIBUTOR",
      "body": "Nah, unfortunately I haven't had the time.  It's possible I could get around to it later this year but maybe someone else will step up and take over before then :)",
      "created_at": "2018-01-12T21:33:46Z",
      "updated_at": "2018-01-12T21:33:46Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@SteveL-MSFT  @JamesWTruher \r\n\r\n> we aren't actually using curses but a higher level framework that works on Linux/Mac/Windows\r\n\r\nDo you develop a new lib or use an old one ?\r\nA lot of existing ncurses library used GPL3.0 licence ( CursesSharp for example )\r\n\r\nWe need a robust VT100 library for PowerShell project and for community module.\r\n\r\nI would like something like this for community : \r\nA sort of ShowUI for Text UI\r\nhttps://github.com/fmichaleczek/PSClrCli/blob/master/Samples/Sample3.ps1\r\n",
      "created_at": "2018-01-12T22:55:29Z",
      "updated_at": "2018-01-12T22:55:46Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "@oising and I started down this path starting with Jexer - https://github.com/klamonte/jexer. Well, @oising did the heavy lifting by converting the java to c#, I got it working on Linux/Mac pretty nicely. I had started with curses but that seemed way, *way* harder because _none_ of the _useful_ primitives are available and it's all native library interface which just adds more code. I haven't had time to look at it for a couple months.\r\n\r\nI pretty much looked at everything (include CursesSharp), jexer is the moral descendant of Borland's tvision (which I remember pretty well). It seemed furthest along\r\n ",
      "created_at": "2018-01-13T01:13:54Z",
      "updated_at": "2018-01-13T01:13:54Z"
    },
    {
      "author": "daviwil",
      "author_association": "CONTRIBUTOR",
      "body": "Sounds exciting Jim, can't wait to see it!",
      "created_at": "2018-01-13T01:16:52Z",
      "updated_at": "2018-01-13T01:16:52Z"
    },
    {
      "author": "mattmcnabb",
      "author_association": "NONE",
      "body": "@fmichaleczek funny, I was just looking into CLRCLI to implement a POC of `Out-Gridview` for x-plat. It seems to be pretty well developed already and works in .NET core.",
      "created_at": "2018-01-14T16:28:50Z",
      "updated_at": "2018-01-14T16:28:50Z"
    },
    {
      "author": "oising",
      "author_association": "CONTRIBUTOR",
      "body": "@mattmcnabb It's not a bad looking library. Sadly it won't work over stream oriented connections such as ssh, raw sockets, telnet, x11/xterm etc. And the console APIs are dog slow :( Jexer (now Nexer) generates everything with ansi x3.64/ecma48 sequences, and does it with native C# - no external libraries. It's looking pretty promising so far.",
      "created_at": "2018-01-15T20:51:41Z",
      "updated_at": "2018-01-15T20:51:41Z"
    },
    {
      "author": "it-praktyk",
      "author_association": "CONTRIBUTOR",
      "body": "[CRCLI](https://github.com/PhonicUK/CLRCLI) looks good.",
      "created_at": "2018-01-15T21:03:21Z",
      "updated_at": "2018-01-15T21:03:21Z"
    },
    {
      "author": "gulshan",
      "author_association": "NONE",
      "body": "@migueldeicaza has [gui.cs](https://github.com/migueldeicaza/gui.cs) targeting .net core.",
      "created_at": "2018-10-19T06:23:36Z",
      "updated_at": "2018-10-19T06:23:36Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@gulshan yes, we've explicitly been looking at gui.cs, but it doesn't currently have all the controls needed to port `out-gridview` (for example), but as a general library, I don't see any reason why someone wouldn't start using it today in their module",
      "created_at": "2018-10-19T08:22:48Z",
      "updated_at": "2018-10-19T08:22:48Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Hum!! @SteveL-MSFT ... does this count as a \"Experimental Flag\" feature.  \r\nI'm up for it!",
      "created_at": "2018-10-19T13:38:59Z",
      "updated_at": "2018-10-19T13:38:59Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@MaximoTrinidad in this case, you can write a module that uses gui.cs for rendering and it would not need to be behind an `Experimental Flag` because it should be a new cmdlet (call it something other than `Out-GridView`, maybe `Show-GridView`?) without any PowerShell engine changes.",
      "created_at": "2018-10-20T02:23:25Z",
      "updated_at": "2018-10-20T02:23:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "New name will difficult to discover. Perhaps it should be proxy to add new parameter `-gui`.",
      "created_at": "2018-10-20T16:53:29Z",
      "updated_at": "2018-10-20T16:53:29Z"
    },
    {
      "author": "1RedOne",
      "author_association": "CONTRIBUTOR",
      "body": "With dotnet core 3 preview 5 out now and shipping working WPF on dotnet core, is this something that should work now?\r\n\r\nI can import PresentationFramework.dll but I get errors when trying to run XamlReader::Load\r\n\r\n````powershell\r\n[Windows.Markup.XamlReader]::Load\r\nThe following exception occurred while retrieving member \"Load\": \"Could not load type 'MS.Internal.SecurityCriticalDataForSet`1' from assembly 'WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.\"\r\n````",
      "created_at": "2019-05-09T20:31:56Z",
      "updated_at": "2019-05-09T20:31:56Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@1RedOne you would need to use the feature-netcore30 working branch which has .NET Core 3.0 but isn't ready to be merged.  Also .NET Core 3.0 doesn't have a complete implementation of WPF yet.",
      "created_at": "2019-05-10T04:18:24Z",
      "updated_at": "2019-05-10T04:18:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Could you please update the issue description with current status and intentions?",
      "created_at": "2019-07-12T13:53:26Z",
      "updated_at": "2019-07-12T13:53:26Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov this is post PS7, no work (from my team) is currently happening for this",
      "created_at": "2019-07-12T22:26:54Z",
      "updated_at": "2019-07-12T22:26:54Z"
    },
    {
      "author": "agowa338",
      "author_association": "NONE",
      "body": "For console ui's, I'd like to point you to this: https://appliedgo.net/tui/\r\nIt shows what we can get out of it and how it could look like.\r\n\r\nThis could also help resolving #12113\r\n\r\n<blockquote><div><img src=\"/favicon.png\" height=\"14\"> Applied Go</div><div><strong><a href=\"https://appliedgo.net/tui/\">Text-Based User Interfaces - Applied Go</a></strong></div><div>Beef up your Go console application with a Text-Based UI</div></blockquote>",
      "created_at": "2020-03-12T23:55:11Z",
      "updated_at": "2020-03-12T23:55:38Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Closing as work is happening here https://github.com/PowerShell/GraphicalTools/tree/master/src/Microsoft.PowerShell.ConsoleGuiTools\n\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/11524380?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/GraphicalTools\">PowerShell/GraphicalTools</a></strong></div><div>A module that mixes PowerShell and GUIs! - built on Avalonia and gui.cs - PowerShell/GraphicalTools</div></blockquote>",
      "created_at": "2020-03-14T14:44:25Z",
      "updated_at": "2020-03-14T14:44:28Z"
    }
  ],
  "created_at": "2017-06-06T20:18:30Z",
  "number": 3957,
  "state": "closed",
  "title": "Enable console GUIs with PowerShell",
  "updated_at": "2020-03-14T14:44:40Z"
}