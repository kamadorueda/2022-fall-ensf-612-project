{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10907",
  "author": "mklement0",
  "body": "Note: #10824  fixed the issue for _stdout_ (standard _output_).\r\n\r\nWhen invoking external programs, the encoding of their standard input stream should match that of the hosting console, as reflected in `[Console]::InputEncoding` - just like the standard _output_ encoding is set to `[Console]::OutputEncoding` (which was always the case in Windows PowerShell, but for PS Core was only recently fixed in #10824).\r\n\r\nNote: \r\n\r\n* This is for the case where stdin is _not_ redirected, where the external program reads input _interactively typed by the user_; by contrast, when PowerShell pipes input to an external program, the encoding specified in preference variable `$OutputEncoding` is used.\r\n\r\n* The problem also exists in Windows PowerShell.\r\n\r\n# Steps to reproduce\r\n\r\nRun the following on _Windows_, where `[Console]::InputEncoding` is (still) the OEM code page's encoding by default. \r\n\r\nInstall [dotnet-script]() for dynamic execution of C# code via an external program.\r\n\r\nRun the following and type or paste character `\u00fc` when prompted:\r\n\r\n```powershell\r\n# Make (BOM-less) UTF8 the input encoding.\r\n[Console]::InputEncoding = [Text.Utf8Encoding]::new($false)\r\n\r\n# Execute dotnet-script with ad hoc code that reads bytes\r\n# from stdin.\r\ndotnet-script eval ((@'\r\n  Console.WriteLine(\"Enter single character '\u00fc' and press ENTER\"); \r\n  byte[] buf = new byte[2];\r\n  using (Stream inStream = Console.OpenStandardInput())\r\n  {\r\n    inStream.Read(buf, 0, buf.Length);\r\n  }\r\n  Console.WriteLine(\"First 2 bytes read (should be 0xC3 0xBC for '\u00fc'):\");\r\n  foreach (byte b in buf) { \r\n    Console.WriteLine(\"0x\" + b.ToString(\"X\"));\r\n  }\r\n'@\r\n) -replace '\"', '\\\"') | Tee-Object -Variable output\r\n\r\n$output[-2..-1] | Should -Be '0xC3', '0xBC'\r\n```\r\n\r\n# Expected behavior\r\n\r\nThe test should pass.\r\n\r\nThat is, the raw bytes read from stdin should reflect the UTF-8 encoding assigned to `[Console]::InputEncoding`, which is byte sequence `0xC3 0xBC` for `\u00fc` ([LATIN SMALL LETTER U WITH DIAERESIS, `U+00FC`](http://www.fileformat.info/info/unicode/char/fc))\r\n\r\n# Actual behavior\r\n\r\nThe test fails: \r\n\r\n```\r\nExpected @('0xC3', '0xBC'), but got @('0x0', '0xD').\r\n```\r\n\r\nCuriously, a NUL byte was read instead of the typed character (`0xD` is just the CR char).\r\n\r\nThis shows that changing `[Console]::InputEncoding` had _some_ effect, but not the desired one.\r\n\r\nOn macOS, changing `[Console]::InputEncoding` is effectively _ignored_.\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core 7.0.0-preview.5\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @JamesWTruher @SteveL-MSFT\r\nhttps://github.com/PowerShell/PowerShell/pull/10824#issuecomment-544101250",
      "created_at": "2019-10-27T05:17:23Z",
      "updated_at": "2019-10-28T05:49:09Z"
    }
  ],
  "created_at": "2019-10-26T21:19:09Z",
  "number": 10907,
  "state": "open",
  "title": "Stdin (standard input) for interactive external console programs is not set to the console's character encoding in the console/terminal host",
  "updated_at": "2019-11-18T16:23:43Z"
}