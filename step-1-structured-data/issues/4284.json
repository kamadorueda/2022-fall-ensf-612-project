{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4284",
  "author": "mklement0",
  "body": "Bash has a delightfully expressive feature named [process substitution (`<(...)`)](http://mywiki.wooledge.org/ProcessSubstitution).\r\n\r\nIn a nutshell (and loosely speaking), **a process substitution allows you to present _command output_ as if it were a - temporary, self-removing - _file_** for consumption by an external utility, which is handy for utilities that require _filename arguments_ for certain operations (i.e., where the input must come from a file whose path is passed as an argument).\r\n\r\nIn PowerShell terms, the following:\r\n\r\n```powershell\r\n# An in-memory  XSLT stylesheet.\r\n$styleSheet = '<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n...</xsl:stylesheet>'\r\n\r\n# Save it to a temporary file, because `xsltproc` requires a filename argument.\r\n$tempFile = New-TemporaryFile\r\n$styleSheet > $tempFile  # I'm assuming BOM-less UTF-8 as the default encoding here.\r\n\r\n# Invoke `xsltproc` with the temporary file.\r\nxlstproc $tempFile $xmlFile\r\n\r\n# Clean up the temporary file.\r\nRemove-Item $tempFile\r\n```\r\n\r\ncould be replaced with the much more concise:\r\n\r\n```powershell\r\n$styleSheet = '<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n...</xsl:stylesheet>'\r\n\r\n# Wishful thinking:\r\n# Use a process substitution to present the in-memory stylesheet as a \r\n# temporary, self-deleting file to xsltproc.\r\nxsltproc <($styleSheet) $xmlFile\r\n```\r\n\r\nGiven that `<` is reserved for future use, adopting the same syntax as  in Bash is an option here.\r\n\r\nNote: \r\n\r\n* The default character encoding should be used, which defaults to BOM-less UTF-8 in PS Core.\r\n\r\n* `bash` doesn't use _temporary files_ to implement the feature; it uses either a FIFO (a temporary named pipe) or a named file descriptor (in `/dev/fd`)\r\n\r\n---\r\n\r\nAdditionally, there are **_output_ process substitutions (`>(...)`)**, where a target command _receives_ input - though these are much rarer in practice.\r\n\r\nA (rare) PowerShell command that can _only_ output to a _file_ is `Start-BitsTransfer`.\r\nIn the event that there's no need for an intermediate output file, because the transferred file content should be processed directly, an output process substitution would simplify things.\r\n(Note that such scenarios are more likely with external utilities).\r\n\r\n```powershell\r\n# Wishful thinking:\r\n# Use a process substitution to make the `Select-String` command for processing the \r\n# transferred file content pose as a the path of an output file that `Start-BitsTransfer` \r\n# can write to.\r\nStart-BitsTransfer -Source https://www.remoteserver/file.html `\r\n                   -Destination >(Select-String '(http.*pdf)')\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta.4\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "masaeedu",
      "author_association": "NONE",
      "body": "I really love this idea. However it is important that the semantics be similar to Linux; a process substitution should produce a *blocking* stream with no underlying disk representation, i.e. a file that behaves like a FIFO. For this purpose perhaps the created file could be a named pipe, and the returned filename `\\\\\\\\.\\pipe\\something`.",
      "created_at": "2018-02-26T22:53:44Z",
      "updated_at": "2018-02-26T22:53:44Z"
    },
    {
      "author": "masaeedu",
      "author_association": "NONE",
      "body": "I tried out a [.NET console application](https://github.com/masaeedu/psub) to see if this was possible, and it more or less works; although the implementation is really awkward. Looks like this right now:\r\n\r\n![image](https://user-images.githubusercontent.com/3674056/36861327-9072b30a-1d51-11e8-9bf4-080e2c481387.png)\r\n\r\nI still need to figure out whether it is possible to block the child process' output stream, so that the `wget` hangs until someone is ready to read the output. Right now it all gets collected in an unbounded buffer in memory until someone asks for it.",
      "created_at": "2018-03-01T18:08:13Z",
      "updated_at": "2018-03-01T18:12:05Z"
    }
  ],
  "created_at": "2017-07-18T17:42:32Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Language"
  ],
  "number": 4284,
  "state": "open",
  "title": "Suggestion: support Bash-style process substitutions",
  "updated_at": "2018-11-12T15:46:01Z"
}