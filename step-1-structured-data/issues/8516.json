{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8516",
  "author": "ili101",
  "body": "# Steps to reproduce\r\n```PowerShell\r\nfunction Export-Excel {\r\n    [CmdletBinding(DefaultParameterSetName = 'Default')]\r\n    Param(\r\n        [Parameter(ParameterSetName = \"Default\")]\r\n        [Parameter(ParameterSetName = \"AutoFilter\")]\r\n        [String]$Path,\r\n\r\n        [Parameter(Mandatory = $true, ParameterSetName = \"PackageDefault\")]\r\n        [Parameter(Mandatory = $true, ParameterSetName = \"PackageAutoFilter\")]\r\n        $ExcelPackage,\r\n\r\n        [Parameter(ValueFromPipeline = $true)]\r\n        $TargetData,\r\n\r\n        [Parameter(Mandatory = $true, ParameterSetName = 'AutoFilter')]\r\n        [Parameter(Mandatory = $true, ParameterSetName = 'PackageAutoFilter')]\r\n        $AutoFilter,\r\n\r\n        [Parameter(ParameterSetName = 'Default')]#, ValueFromPipelineByPropertyName)]\r\n        [Parameter(ParameterSetName = 'PackageDefault')]#, ValueFromPipelineByPropertyName)]\r\n        [String]$TableName,\r\n        [Parameter(ParameterSetName = 'Default')]\r\n        [Parameter(ParameterSetName = 'PackageDefault')]\r\n        [Switch]$Table,\r\n        [Parameter(ParameterSetName = 'Default')]\r\n        [Parameter(ParameterSetName = 'PackageDefault')]\r\n        $TableStyle = 'Medium6'\r\n    )\r\n    \"ParameterSet: \" + $PSCmdlet.ParameterSetName\r\n}\r\n# Works\r\nExport-Excel -ExcelPackage 5 -TargetData 5\r\nExport-Excel -ExcelPackage 5\r\n# Prompt for \"AutoFilter:\"\r\n5 | Export-Excel -ExcelPackage 5\r\n```\r\n\r\n# Expected behavior\r\n```none\r\nParameterSet: PackageDefault\r\nParameterSet: PackageDefault\r\nParameterSet: PackageDefault\r\n```\r\n\r\n# Actual behavior\r\n```none\r\nParameterSet: PackageDefault\r\nParameterSet: PackageDefault\r\n\r\ncmdlet Export-Excel at command pipeline position 1\r\nSupply values for the following parameters:\r\nAutoFilter:\r\n```\r\n\r\nWhen not passing $ExcelPackage or passing it as a parameter ParameterSet PackageDefault is selected, but when providing it from Pipeline it asks for $AutoFilter from the wrong ParameterSet.\r\n\r\nTested on 5.1 and 6.2.0-preview.3\r\n\r\nI also tried to workaround this by providing multiple DefaultParameterSetName hoping it will evaluate them in order but looks like it's not a thing, Feature request?\r\n```PowerShell\r\n[CmdletBinding(DefaultParameterSetName = 'Default,', 'PackageDefault')]\r\n```\r\n`Cannot find an overload for \".ctor\" and the argument count: \"1\".`",
  "closed_at": null,
  "comments": [
    {
      "author": "ili101",
      "author_association": "NONE",
      "body": "Apparently adding `ValueFromPipelineByPropertyName` to `$AutoFilter` workaround this problem (I have no idea why though, It doesn't make sense)\r\n``` PowerShell\r\n[Parameter(Mandatory = $true, ParameterSetName = 'AutoFilter', ValueFromPipelineByPropertyName)]\r\n[Parameter(Mandatory = $true, ParameterSetName = 'PackageAutoFilter', ValueFromPipelineByPropertyName)]\r\n$AutoFilter,\r\n```",
      "created_at": "2018-12-22T23:11:03Z",
      "updated_at": "2018-12-22T23:11:03Z"
    },
    {
      "author": "ili101",
      "author_association": "NONE",
      "body": "Any update on this problem?\r\nAlso the `ValueFromPipelineByPropertyName` workaround I described above is problematic as it preventing the `$PSCmdlet.ParameterSetName` from being set in the `begin{}` part:\r\n\r\n``` PowerShell\r\nfunction Export-Excel\r\n{\r\n    [CmdletBinding(DefaultParameterSetName = 'Default')]\r\n    Param(\r\n        [Parameter(ParameterSetName = \"Default\")]\r\n        [Parameter(ParameterSetName = \"AutoFilter\")]\r\n        [String]$Path,\r\n\r\n        [Parameter(Mandatory = $true, ParameterSetName = \"PackageDefault\")]\r\n        [Parameter(Mandatory = $true, ParameterSetName = \"PackageAutoFilter\")]\r\n        $ExcelPackage,\r\n\r\n        [Parameter(ValueFromPipeline = $true)]\r\n        $TargetData,\r\n\r\n        [Parameter(Mandatory = $true, ParameterSetName = 'AutoFilter', ValueFromPipelineByPropertyName)]\r\n        [Parameter(Mandatory = $true, ParameterSetName = 'PackageAutoFilter', ValueFromPipelineByPropertyName)]\r\n        $AutoFilter,\r\n\r\n        [Parameter(ParameterSetName = 'Default')]#, ValueFromPipelineByPropertyName)]\r\n        [Parameter(ParameterSetName = 'PackageDefault')]#, ValueFromPipelineByPropertyName)]\r\n        [String]$TableName,\r\n        [Parameter(ParameterSetName = 'Default')]\r\n        [Parameter(ParameterSetName = 'PackageDefault')]\r\n        [Switch]$Table,\r\n        [Parameter(ParameterSetName = 'Default')]\r\n        [Parameter(ParameterSetName = 'PackageDefault')]\r\n        $TableStyle = 'Medium6'\r\n    )\r\n    begin {\"ParameterSet begin: \" + $PSCmdlet.ParameterSetName}\r\n    process {\"ParameterSet process: \" + $PSCmdlet.ParameterSetName}\r\n    end {\"ParameterSet end: \" + $PSCmdlet.ParameterSetName}\r\n}\r\n# Works\r\nExport-Excel -ExcelPackage 5 -TargetData 5\r\nExport-Excel -ExcelPackage 5\r\n# With ValueFromPipelineByPropertyName workaround no ParameterSetName in begin:\r\n5 | Export-Excel -ExcelPackage 5\r\n```\r\nOutput:\r\n```\r\nParameterSet begin: PackageDefault\r\nParameterSet process: PackageDefault\r\nParameterSet end: PackageDefault\r\nParameterSet begin: PackageDefault\r\nParameterSet process: PackageDefault\r\nParameterSet end: PackageDefault\r\nParameterSet begin:\r\nParameterSet process: PackageDefault\r\nParameterSet end: PackageDefault\r\n```",
      "created_at": "2019-04-11T20:10:08Z",
      "updated_at": "2019-04-11T20:10:08Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I've created a new issue focused on the core symptom of your code, which I think is a bug: #11235\r\n\r\nThe workaround with `ValueFromPipelineByPropertyName` can have unexpected side effects (pipeline input may suddenly start binding to your `$AutoFilter` parameter, which is undesired).\r\n\r\n> as it is preventing the `$PSCmdlet.ParameterSetName` from being set in the `begin{}` part:\r\n\r\nWhile I have no explanation for why `$PSCmdlet.ParameterSetName` is the _empty string_ in the `begin` block with your workaround (smells like another bug), it is worth noting that in functions that have  pipeline-binding parameters, `$PSCmdlet.ParameterSetName` generally only has a meaningful value in the `process` block, because it is possible for _each input object_ to select a _different_ parameter set and the value in `begin` seems to only (unhelpfully) reflect the set that _would have been chosen had there been no pipeline input_.\r\n\r\nIn short: To be safe, check `$PSCmdlet.ParameterSetName`  only in the `process` block.\r\n\r\n\r\n\r\n",
      "created_at": "2019-12-02T18:40:08Z",
      "updated_at": "2019-12-02T22:57:20Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Additionally, #11237 proposes fundamental - but breaking - improvements to how parameter sets are handled.\r\n\r\nIf you agree that #11235 and #11237 cover all aspects of this issue, I encourage you to close this issue.",
      "created_at": "2019-12-02T22:56:52Z",
      "updated_at": "2019-12-02T22:56:52Z"
    }
  ],
  "created_at": "2018-12-21T23:09:59Z",
  "number": 8516,
  "state": "open",
  "title": "PowerShell ValueFromPipeline parameter breaks ParameterSet selection",
  "updated_at": "2019-12-02T22:57:20Z"
}