{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2717",
  "author": "WernerMairl",
  "body": "Hi\r\nWorking with Register-PSRepository i have found some behavior that was really unexpected.\r\nProbably we are not talking about bugs but about usability....\r\n\r\n1. Repository uniqueness\r\nAll the functions around PSRepository (Get, Register, Unregister) are using the Name Property/Argument to identify a Repo.\r\n \r\nSeeing this API-Surface i'm assuming that the property Name is the one that implements the \"unique\" Key for Repos => expected behavior at the first look....\r\n\r\nafter playing a few hours with the api, i find out that internally NOT the Name must be unique but the property \"SourceLocation\" enforces uinqueness.\r\n\r\n- That means i'm not be able to register the same package Source with different Names\r\n- Means in different Powershell-Codebases that should run on the same server i must synchronize Repository NAMES....\r\n\r\nTo solve problems like that must select/filter my Repos by SourceLocation BUT the Get-PSRepo function doesn't implement filter for SourceLocation.... usability Issue, a property that is used as primary key should have some easy access....(yes i can do that with pure Powershell, but we are talking about API-Usability)\r\n\r\n2. ErrorActionPreference is ignored!\r\nIf i call \"Register-PSRepository\" with a unique/random Name but a SourceLocation that is used in another Repo then the Function writes Error output.\r\n\r\n_**PackageManagement\\Register-PackageSource : The repository could not be registered because there exists a registered repository with Name 'XXXXX' and SourceLocation 'http://xxxxxxx.y.z.a:8080/api/odata'. To register \r\nanother repository with Name 'XXXXX', please unregister the existing repository using the Unregister-PSRepository cmdlet**_\r\n\r\n\r\n\r\nI found the following unexpected behavior here:\r\n\r\n$ErrorctionPreference value is \"Stop\" in the calling script => assuming that a exception can be catched with try catch\r\nRegister-PSRepository writes the error record but it does not FOLLOWS the STOP behavior.. it IGNORES!\r\n\r\nTo enforce the \"expected\" behavior i must expplicitely use\r\nRegister-PSRepository ......-ErrorAction Stop\r\n\r\nI'm not a expert in all the coding and behavior rules for PS but \r\nin 99% of my PS-Code i'm able to catch exceptions by using $ErrorActionPrefence on the global level\r\nso i think that can be behavior issue inside Register-PSRepository\r\n\r\n\r\nregards\r\nWerner\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
  "closed_at": "2016-11-18T08:31:10Z",
  "comments": [
    {
      "author": "HemantMahawar",
      "author_association": "CONTRIBUTOR",
      "body": "This issue was moved to PowerShell/PowerShellGet#61\n",
      "created_at": "2016-11-18T08:31:10Z",
      "updated_at": "2016-11-18T08:31:10Z"
    }
  ],
  "created_at": "2016-11-18T08:27:49Z",
  "number": 2717,
  "state": "closed",
  "title": "Unexpected behavior (usability) in Register-PSRepository",
  "updated_at": "2016-11-29T20:49:54Z"
}