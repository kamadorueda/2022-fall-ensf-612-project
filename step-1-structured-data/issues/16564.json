{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16564",
  "author": "PaulHigin",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nThis change fixes #16445, where using variables were not being evaluated correctly when the -Parallel script block is passed in as a variable.\r\n\r\n## PR Context\r\n\r\nForeEach-Object -Parallel using variable processing walks the script block AST to determine if the using variable was defined in the current scope, and does this by tracking the number of 'ForEach-Object -Parallel' commands in the call chain.\r\nHowever, the provided script block is different, depending on whether it is passed in as a variable or via parameter binding.\r\n\r\n```powershell\r\n$myScript = '\"Hello!\"'\r\n1 | ForEach-Object -Parallel ([scriptblock]::Create($myScript))\r\n# Script block Ast does not contain the 'ForEach-Object' command in the call chain\r\n\r\n1 | ForEach-Object -Parallel { \"Hello!\" }\r\n# Script block Ast does contain the 'ForEach-Object' command in the call chain\r\n```\r\n\r\nThis change takes into account the two forms of script blocks\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and opened an issue in the relevant tool repository. This may include:\r\n        - [ ] Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode\r\n        (which runs in a different PS Host).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n",
  "closed_at": "2021-12-14T03:11:20Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Could you please clarify why do we need to support `$using` if Foreach-Object execute the script block in _current_ scope.",
      "created_at": "2021-12-08T05:21:30Z",
      "updated_at": "2021-12-08T05:21:30Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov  The `$using` keyword is only supported for `ForEach-Object` and the `-Parallel` parameter set, in which case the script block is executed in multiple runspaces in parallel.  Since runspaces are isolation units, the `$using` keyword is needed to pass in variables from the current session to each parallel runspace sessions, similar to how it is used for remoting.  Otherwise they would need to be passed in via the argument list.",
      "created_at": "2021-12-08T16:53:37Z",
      "updated_at": "2021-12-08T16:53:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Do you mean `Foreach-Object` execute the scriptblock in current scope and `Foreach-Object` execute the scriptblock in another scope?\r\n![image](https://user-images.githubusercontent.com/22290914/145256321-3cd532e3-5513-43ff-8091-ea9954a67dae.png)\r\n\r\n\r\nIf so, we got a very confusing UX. :-( \r\nEx.: an user has large scriptblock, add -Parallel switch and now the scriptblock doesn't work.\r\n",
      "created_at": "2021-12-08T17:37:15Z",
      "updated_at": "2021-12-08T17:37:15Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "?? This is all discussed in the RFC created for this feature.\r\n\r\nhttps://github.com/PowerShell/PowerShell-RFC/pull/194",
      "created_at": "2021-12-08T17:52:18Z",
      "updated_at": "2021-12-08T17:52:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> ?? This is all discussed in the RFC created for this feature.\r\n> \r\n> [PowerShell/PowerShell-RFC#194](https://github.com/PowerShell/PowerShell-RFC/pull/194)\r\n\r\n:-) Yes, and I objected to this `$using` support. I believe that the feedback now clearly shows the UX and performance issues. We should consider designing a new cmdlet to address these requests. ",
      "created_at": "2021-12-08T18:03:03Z",
      "updated_at": "2021-12-08T18:03:03Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw  Please review.",
      "created_at": "2021-12-10T16:44:14Z",
      "updated_at": "2021-12-10T16:44:14Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov `ForEach-Object -Parallel` runs the given script block in a separate Runspsace, so of course the script block will not run in the current scope.",
      "created_at": "2021-12-10T18:50:16Z",
      "updated_at": "2021-12-10T18:50:16Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@PaulHigin Can you please also review #12378 and see if that can be closed after your fix.",
      "created_at": "2021-12-10T18:51:17Z",
      "updated_at": "2021-12-10T18:51:17Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw   #12378 is a different issue.",
      "created_at": "2021-12-10T20:06:59Z",
      "updated_at": "2021-12-10T20:06:59Z"
    },
    {
      "author": "pull-request-quantifier[bot]",
      "author_association": "NONE",
      "body": "### ![](https://img.shields.io/static/v1?label=Quantified&message=Medium&color=yellow)\r\n\r\nThis PR has `194` quantified lines of changes. In general, a change size of upto `200` lines is ideal for the best PR experience!\r\n\r\n------\r\n\r\n<details >\r\n    <summary display=\"inline\"> <strong>Quantification details</strong></summary>\r\n    <p />\r\n\r\n```\r\nLabel      : Medium\r\nSize       : +164 -30\r\nPercentile : 58.8%\r\n\r\nTotal files changed: 4\r\n\r\nChange summary by file extension:\r\n.json : +1 -1\r\n.cs : +27 -29\r\n.ps1 : +136 -0\r\n```\r\n> Change counts above are quantified counts, based on the [PullRequestQuantifier customizations](https://github.com/microsoft/PullRequestQuantifier/blob/main/docs/prquantifier-yaml.md).\r\n    \r\n</details>\r\n\r\n\r\n<details>\r\n    <summary display=\"inline\"> <strong>Why proper sizing of changes matters</strong> </summary>\r\n    <p/>\r\n    <p/>\r\n\r\nOptimal pull request sizes drive a better predictable PR flow as they strike a\r\nbalance between between PR complexity and PR review overhead. PRs within the\r\noptimal size (typical small, or medium sized PRs) mean:\r\n\r\n- Fast and predictable releases to production:\r\n  - Optimal size changes are more likely to be reviewed faster with fewer\r\niterations.\r\n  - Similarity in low PR complexity drives similar review times.\r\n- Review quality is likely higher as complexity is lower:\r\n  - Bugs are more likely to be detected.\r\n  - Code inconsistencies are more likely to be detetcted.\r\n- Knowledge sharing is improved within the participants:\r\n  - Small portions can be assimilated better.\r\n- Better engineering practices are exercised:\r\n  - Solving big problems by dividing them in well contained, smaller problems.\r\n  - Exercising separation of concerns within the code changes.\r\n\r\n#### What can I do to optimize my changes\r\n\r\n- Use the PullRequestQuantifier to quantify your PR accurately\r\n  - Create a context profile for your repo using the [context generator](https://github.com/microsoft/PullRequestQuantifier/releases)\r\n  - Exclude files that are not necessary to be reviewed or do not increase the review complexity. Example: Autogenerated code, docs, project IDE setting files, binaries, etc. Check out the `Excluded` section from your `prquantifier.yaml` context profile. \r\n  - Understand your typical change complexity, drive towards the desired complexity by adjusting the label mapping in your `prquantifier.yaml` context profile.\r\n  - Only use the labels that matter to you, [see context specification](./docs/prquantifier-yaml.md) to customize your `prquantifier.yaml` context profile.\r\n- Change your engineering behaviors\r\n  - For PRs that fall outside of the desired spectrum, review the details and check if:\r\n    - Your PR could be split in smaller, self-contained PRs instead\r\n    - Your PR only solves one particular issue. (For example, don't refactor and code new features in the same PR).\r\n\r\n#### How to interpret the change counts in git diff output\r\n\r\n- One line was added: `+1 -0`\r\n- One line was deleted: `+0 -1`\r\n- One line was modified: `+1 -1` (git diff doesn't know about modified, it will\r\ninterpret that line like one addition plus one deletion)\r\n- Change percentiles: Change characteristics (addition, deletion, modification)\r\nof this PR in relation to all other PRs within the repository.\r\n\r\n</details>\r\n\r\n<p />\r\n\r\n------\r\n\r\nWas this comment helpful? <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiUGF1bEhpZ2luIiwiUmVwb3NpdG9yeUxpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsIiwiUHVsbFJlcXVlc3RMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbC9wdWxsLzE2NTY0IiwiRXZlbnRUeXBlIjoiVGh1bWJzVXAifQ==&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs up\"><strong>:thumbsup:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiUGF1bEhpZ2luIiwiUmVwb3NpdG9yeUxpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsIiwiUHVsbFJlcXVlc3RMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbC9wdWxsLzE2NTY0IiwiRXZlbnRUeXBlIjoiTmV1dHJhbCJ9&amp;anonymous=True\" target=\"_blank\" title=\"Neutral\"><strong>&nbsp;:ok_hand:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiUGF1bEhpZ2luIiwiUmVwb3NpdG9yeUxpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsIiwiUHVsbFJlcXVlc3RMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbC9wdWxsLzE2NTY0IiwiRXZlbnRUeXBlIjoiVGh1bWJzRG93biJ9&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs down\"><strong>&nbsp;:thumbsdown:</strong></a> (<a href=\"MAILTO:prquantifier@microsoft.com\" title=\"Mail to prquantifier@microsoft.com\">Email</a>)\r\n[Customize PullRequestQuantifier](https://github.com/PowerShell/PowerShell/blob/master/.github/prquantifier.yaml) for this repository.\r\n\r\n",
      "created_at": "2021-12-10T23:02:40Z",
      "updated_at": "2021-12-10T23:02:40Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw  ping...",
      "created_at": "2021-12-13T20:59:52Z",
      "updated_at": "2021-12-13T20:59:52Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw  Thanks for the review!",
      "created_at": "2021-12-14T00:33:38Z",
      "updated_at": "2021-12-14T00:33:38Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.3.0-preview.2` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.3.0-preview.2)\n",
      "created_at": "2022-02-24T23:32:58Z",
      "updated_at": "2022-02-24T23:32:58Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-maintainers \r\nWe only take security fixes and regression to LTS.  This is appropriate for 7.3.  Rejecting back-port.\r\n\r\nAllow some bake time and reconsider to verify that this is stable.",
      "created_at": "2022-03-02T19:44:14Z",
      "updated_at": "2022-03-02T19:44:14Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13 Just to clarify this one was actually a regression (worked in 7.1.5, broke in 7.2, thank you @jborean93). Unsure if that was discussed in the meeting but if not, it may be worth another pass.",
      "created_at": "2022-03-14T23:31:07Z",
      "updated_at": "2022-03-14T23:31:07Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "The progressive changes include not only the regression, but also new behavior.  So I feel backporting this to LTS branches is risky, and that we should at least wait for it to bake longer in preview versions.",
      "created_at": "2022-03-29T19:57:35Z",
      "updated_at": "2022-03-29T19:57:35Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "We should reconsider backporting this as it appears to be affecting users of 7.2.x.  \r\n\r\nhttps://github.com/PowerShell/PowerShell/issues/17571",
      "created_at": "2022-06-23T21:25:59Z",
      "updated_at": "2022-06-23T21:25:59Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "/backport to release/v7.2.6",
      "created_at": "2022-08-02T19:52:28Z",
      "updated_at": "2022-08-02T19:52:28Z"
    },
    {
      "author": "github-actions[bot]",
      "author_association": "CONTRIBUTOR",
      "body": "Started backporting to release/v7.2.6: https://github.com/PowerShell/PowerShell/actions/runs/2784832290\n\n<blockquote><img src=\"https://repository-images.githubusercontent.com/49609581/aad0ad80-cdec-11ea-8248-a37bc0571bfd\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell\">Fix ForEach-Object -Parallel when passing in script block variable \u00b7 PowerShell/PowerShell@0e4d2e4</a></strong></div><div>PowerShell for every system! Contribute to PowerShell/PowerShell development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2022-08-02T19:52:44Z",
      "updated_at": "2022-08-02T19:52:46Z"
    },
    {
      "author": "github-actions[bot]",
      "author_association": "CONTRIBUTOR",
      "body": "@adityapatwardhan backporting to release/v7.2.6 failed, the patch most likely resulted in conflicts:\n\n```shell\n$ git am --3way --ignore-whitespace --keep-non-patch changes.patch\n\nApplying: First try at fix\nApplying: Fix scope function to correctly account for provided script block type.\nApplying: Fix tests\nApplying: Update src/System.Management.Automation/engine/runtime/ScriptBlockToPowerShell.cs\nApplying: PR comments\n.git/rebase-apply/patch:26: trailing whitespace.\n            \nwarning: 1 line adds whitespace errors.\nUsing index info to reconstruct a base tree...\nM\tsrc/System.Management.Automation/engine/runtime/ScriptBlockToPowerShell.cs\nFalling back to patching base and 3-way merge...\nAuto-merging src/System.Management.Automation/engine/runtime/ScriptBlockToPowerShell.cs\nCONFLICT (content): Merge conflict in src/System.Management.Automation/engine/runtime/ScriptBlockToPowerShell.cs\nerror: Failed to merge in the changes.\nhint: Use 'git am --show-current-patch=diff' to see the failed patch\nPatch failed at 0005 PR comments\nWhen you have resolved this problem, run \"git am --continue\".\nIf you prefer to skip this patch, run \"git am --skip\" instead.\nTo restore the original branch and stop patching, run \"git am --abort\".\nError: The process '/usr/bin/git' failed with exit code 128\n```\n\nPlease backport manually!",
      "created_at": "2022-08-02T19:52:59Z",
      "updated_at": "2022-08-02T19:52:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@adityapatwardhan Friendly ping!",
      "created_at": "2022-08-05T02:57:01Z",
      "updated_at": "2022-08-05T02:57:30Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "This is in the backlog.. Currently working on fixing the build break in 7.2.6 ",
      "created_at": "2022-08-05T04:46:30Z",
      "updated_at": "2022-08-05T04:46:30Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "/backport to release/v7.2.6",
      "created_at": "2022-08-08T19:30:19Z",
      "updated_at": "2022-08-08T19:30:19Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "/backport to release/v7.2.6",
      "created_at": "2022-08-08T19:31:16Z",
      "updated_at": "2022-08-08T19:31:16Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.2.6` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.6)\n",
      "created_at": "2022-08-11T22:19:13Z",
      "updated_at": "2022-08-11T22:19:13Z"
    }
  ],
  "created_at": "2021-12-07T01:04:04Z",
  "number": 16564,
  "state": "closed",
  "title": "Fix ForEach-Object -Parallel when passing in script block variable",
  "updated_at": "2022-08-11T22:19:13Z"
}