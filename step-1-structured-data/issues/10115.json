{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10115",
  "author": "TylerLeonhardt",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nAn experiment at adding an `IsTerminating` property to `ErrorRecord`:\r\n\r\n```\r\nPS /Users/tyler/Code/PowerShell/PowerShell> throw \"I'm terminating\"\r\n\r\nI'm terminating\r\nAt line:1 char:1\r\n+ throw \"I'm terminating\"\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : OperationStopped: (I'm terminating:String) [], RuntimeException\r\n+ FullyQualifiedErrorId : I'm terminating\r\n\r\nPS /Users/tyler/Code/PowerShell/PowerShell> $Error[0].IsTerminating\r\nTrue\r\n\r\nPS /Users/tyler/Code/PowerShell/PowerShell> Write-Error \"I'm not terminating\"\r\n\r\nWrite-Error \"I'm not terminating\" : I'm not terminating\r\n+ CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\r\n+ FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException\r\n\r\nPS /Users/tyler/Code/PowerShell/PowerShell> $Error[0].IsTerminating\r\nFalse\r\n```\r\n\r\n## PR Context\r\n\r\nAs a user, I want a clean and simple way to differentiate between terminating and non-terminating errors.\r\n\r\nThis PR helps bootstrap that effort by adding an `IsTerminating` property to `ErrorRecord` and setting where it makes sense.\r\n\r\nThis does _not_ change the formatting of an ErrorRecord. That is out of scope and requires a PM to approve what that will look like so in the meantime, this will provide the property that we can take advantage of later.\r\n\r\ncc @vexx32 \r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n",
  "closed_at": "2020-06-11T21:50:38Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Much time has passed since that moment when I viewed the enhancement and as far as I remember there were a lot of unpredictable places where these terminating errors could appear from. I assume that this change covers too little of them for it to become a public property.",
      "created_at": "2019-07-15T05:17:24Z",
      "updated_at": "2019-07-15T05:17:24Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "In theory, every terminating error should still become an ErrorRecord before it reaches the user. If that is correct, it appears as though this should cover all of them.\r\n\r\nThere are some edge cases where the user is handed direct exceptions, but these are rare and should probably be fixed instead of being a blocker to something like this.",
      "created_at": "2019-07-15T05:29:11Z",
      "updated_at": "2019-07-15T05:29:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "There is obvious case - ThrowTerminatingError() - see Add-Type cmdlet. \r\nIf I remember correctly there is a lot of non-obvious cases.",
      "created_at": "2019-07-15T06:57:18Z",
      "updated_at": "2019-07-15T06:57:18Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "@iSazonov, I fail to see why `ThrowTerminatingError` is an example. The default value on ErrorRecord is `IsTerminating` is `true` so that would be set as expected. ",
      "created_at": "2019-07-15T14:36:20Z",
      "updated_at": "2019-07-15T14:36:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I fail to see why ThrowTerminatingError is an example.\r\n\r\n@TylerLeonhardt I mean follow although this is really not the case:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/a4e397697c3dbed414466398c4c695df712a5c7a/src/Microsoft.PowerShell.Commands.Utility/commands/utility/AddType.cs#L1043-L1072\r\n\r\nI reviewed code and my main concern is about patterns like `throw new someexception(errorRecord)`. Maybe there is something else but I can not remember.\r\nYou can find samples by \"throw new .+error\" pattern.\r\nOne is:\r\nhttps://github.com/PowerShell/PowerShell/blob/a4e397697c3dbed414466398c4c695df712a5c7a/src/System.Management.Automation/engine/DefaultCommandRuntime.cs#L47-L53\r\n\r\nAlso there is something related to terminating errors in Job code.",
      "created_at": "2019-07-16T05:22:08Z",
      "updated_at": "2019-07-16T05:23:25Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "@iSazonov I agree that all cmdlets should use `ThrowTerminatingError` instead of `throw` but I don\u2019t think that really applies to my PR.\r\n\r\nThose that just throw will be terminating errors and since `IsTerminating` defaults to `true` then there\u2019s not really a problem here.\r\n\r\nI might be misunderstanding you. Please let me know.",
      "created_at": "2019-07-18T01:07:54Z",
      "updated_at": "2019-07-18T01:07:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@TylerLeonhardt Thanks for clarify! It is encouraging. \r\n\r\nI think we need to update all our tests with \"Should -Throw\" to check IsTerminating property and to ensure that we don't skip something important.\r\n\r\nI fast (not accurately) review (all) ErrorRecord uses (there is over 2200 references!) and now my optimism has gone down.\r\nBelow list where we could catch issues.\r\n\r\n- StreamError Pipeline.Writer()\r\n- private bool ProcessOutOfBand(PSObject so, bool isProcessingError) ???\r\n- PSInvalidCastException -> ErrorRecord ??? As minimum it is best practice to explicitly set IsTerminating \r\n- commandRuntime._WriteErrorSkipAllowCheck ???\r\n- internal RemoteException -> ErrorRecord ???\r\n- CmdletProviderContext.WriteError - can throw, writeError and accumulate - 3 cases!\r\n- Utils.TryRunAsImplicitBatch() - ps.AddCommand(\"Write-Error\").AddParameter(\"InputObject\", errorRecord).Invoke();  ??? - it is very interesting case in common - that Write-Error send - terminating or non-terminating? How resolve?\r\n- DebuggerCommandProcessor.WriteErrorLine()  ???\r\n- RunspaceOpenModuleLoadException - PSDataCollection<ErrorRecord> _errors;   ???\r\n- PowerShell.cs - this.Streams.Error.Add(new ErrorRecord ... ???\r\n- internal class ClientMethodExecutor - some methods like internal void Execute(Action<ErrorRecord> writeErrorAction)   ???\r\n- Job.WriteError() and FailureErrorRecord property - not internally in the methods but how it is used in common   ???\r\n- Job.ProcessJobFailure() - terminating or no?\r\n- Job.cs and Job2.cs files ??? - need review how jobs work with terminating and non-terminating\r\n- EncodeAndDecode.cs RemoteHostEncoder.cs ???\r\n- ServerPowerShellDriver.cs private void HandleErrorDataAdded(object sender, DataAddedEventArgs e)  ???\r\n- ServerRemotingProtocol2.cs internal void SendErrorRecordToClient(ErrorRecord errorRecord)  ???\r\n- MiscOps.cs - need review all because:\r\n  terminating?\r\n```c#\r\n                var errorRecord = new ErrorRecord(current.ErrorRecordToPass, current.ExceptionToPass);\r\n                tuple.SetAutomaticVariable(AutomaticVariable.Underbar, errorRecord, context);\r\n```\r\n- HelpProvider.cs  internal void ReportHelpFileError(Exception exception, string target, string helpFile)  ??? Collect ErrorRecords - always terminating? HelpSystem has a lot of place where ErrorRecord is accumulated\r\n- PSSnapInException - CreateErrorRecord() and ErrorRecord ???\r\n- CommandNotFoundException - ErrorRecord ???\r\n- CmdletInvocationException, ScriptCallDepthException, PipelineDepthException, ActionPreferenceStopException, PSArgumentException, PSArgumentNullException, PSArgumentOutOfRangeException, PSObjectDisposedException, ProviderInvocationException, SessionStateException, RuntimeException,  - ErrorRecord ???\r\n\r\n",
      "created_at": "2019-07-18T07:01:22Z",
      "updated_at": "2019-07-18T07:01:22Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@TylerLeonhardt \r\nI disagree with the other PR comments that say the code comments should be reduced or removed, I feel they should remain.\r\n\r\nHowever, I have concerns about whether this is a good and maintainable solution.  I feel it is too easy to miss places where ErrorRecords are written or collected.  For example do you cover the case where PowerShell collects error data when executing a pipeline?  Also whenever a new writer/collector is created, it needs to include the logic to set the 'IsTerminating' property.\r\n\r\nI think it would be better to set the 'IsTerminating' property at the point where 'ErrorAction Stop' is processed, or where exceptions are processed so that the resulting ErrorRecord can be marked as terminating when it is created.  Can you look into this and see if it is possible to do?",
      "created_at": "2019-07-18T15:36:34Z",
      "updated_at": "2019-07-18T15:36:34Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "There is over 2200 points where ErrorRecord is referenced but ~1077 for constructor. So we could add `IsTerminating` in the constructor parameters so that sets the value explicitly. Although there can be still a something specific in error streams/collectors.",
      "created_at": "2019-07-19T03:44:11Z",
      "updated_at": "2019-07-19T03:44:11Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee to discuss whether we can/should take an iterative approach to this",
      "created_at": "2019-07-19T19:43:04Z",
      "updated_at": "2019-07-19T19:43:04Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "@PaulHigin good point. I probably need to use a `bool?` for this to handle remoting to downlevel versions. I\u2019ll test this scenario and adjust accordingly.",
      "created_at": "2019-07-19T19:50:37Z",
      "updated_at": "2019-07-19T19:50:37Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, we are ok with taking an iterative approach and fixing issues for completeness as they come up.  This requires that this be an experimental feature and not be out of experimental until we are confident the breadth of cases is covered.  We need to validate that addition to ErrorRecord type doesn't cause problem with remoting across PowerShell versions.",
      "created_at": "2019-07-24T22:40:57Z",
      "updated_at": "2019-07-24T22:40:57Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "@PaulHigin and I had a chat offline on this PR and we agreed that this implementation is probably the right way to go. I investigated having the property be Non-Terminating by default and it doesn\u2019t seem to be as straightforward as making it Terminating by default.\r\n\r\n@SteveL-MSFT this change can\u2019t be an experimental feature because it changes the type definition of the ErrorRecord class. `ExperimentalFeature` does not have the ability to expose/hide properties on types.",
      "created_at": "2019-07-25T23:58:00Z",
      "updated_at": "2019-07-25T23:58:00Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "Also, I tested the remoting scenario for downlevel\u2026 My findings:\r\n\r\n* With `Invoke-Command -Session $s`,  error handling is handled on the client side so remarkably, `IsTerminating` is set properly even if `Invoke-Command` is targeting a version of PowerShell without my change (my session targeted a pwsh 6.2 linux vm).\r\n* Today, ErrorRecord is not deserialized when you do:\r\n```pwsh\r\nInvoke-Command -Session $s -ScriptBlock { Write-Error \u201cfoo\u201d 2>&1 }\r\n```\r\nYou get back a `PSCustomObject` so me adding `IsTerminating` should have no effect on deserializing.",
      "created_at": "2019-07-26T00:01:44Z",
      "updated_at": "2019-07-26T00:01:44Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "I meant to comment on this PR a while back but then got distracted, so my apologies if this is helpful and I'm surfacing it late in the discussion.\r\n\r\nIn my `HistoryPx` module, I identify any historical command as having encountered a terminating error simply by checking if the `ExecutionStatus` associated with the `HistoryInfo` record is equal to `System.Management.Automation.Runspaces.PipelineState.Failed`.\r\n\r\nWith that information, I find myself wondering if it is possible to set the `IsTerminating` flag on an `ErrorRecord` based on when that value would get set for a given command, rather than trying to cover the variety of scenarios where terminating errors can occur. I haven't looked into this possibility at all (I have my hands full with other tasks at the moment), but I wanted to toss the idea out there in case it helps.",
      "created_at": "2019-07-26T00:34:07Z",
      "updated_at": "2019-07-26T00:34:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@KirkMunro Perhaps we have the information in `public sealed class PipelineStateInfo`.",
      "created_at": "2019-07-26T04:36:27Z",
      "updated_at": "2019-07-26T04:36:27Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as stale because it has been marked as requiring author feedback but has not had any activity for **30 days**. It will be closed if no further activity occurs **within 10 days of this comment**.",
      "created_at": "2019-09-13T00:00:37Z",
      "updated_at": "2019-09-13T00:00:37Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT this is waiting on committee to re-evaluate what the feature should do",
      "created_at": "2019-09-13T00:45:09Z",
      "updated_at": "2019-09-13T00:45:09Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@TylerLeonhardt can you summarize what the @PowerShell/powershell-committee needs to review?",
      "created_at": "2019-09-16T16:05:33Z",
      "updated_at": "2019-09-16T16:05:33Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT  When a Non-Terminating error causes a script to stop (via `-ErrorAction Stop`) what should the behavior be.",
      "created_at": "2019-09-16T18:58:00Z",
      "updated_at": "2019-09-16T18:58:00Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "Current implementation treats `ErrorAction` and `Termination` as two separate ideologies. I'm partial to the implementation.",
      "created_at": "2019-09-16T18:58:59Z",
      "updated_at": "2019-09-16T18:58:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 Perhaps you have that say on @SteveL-MSFT request https://github.com/PowerShell/PowerShell/pull/10115#issuecomment-531844822",
      "created_at": "2019-09-17T04:49:03Z",
      "updated_at": "2019-09-17T04:49:03Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as stale because it has been marked as requiring author feedback but has not had any activity for **30 days**. It will be closed if no further activity occurs **within 10 days of this comment**.",
      "created_at": "2019-12-23T12:00:11Z",
      "updated_at": "2019-12-23T12:00:11Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "Still waiting on committee.",
      "created_at": "2019-12-23T19:20:51Z",
      "updated_at": "2019-12-23T19:20:51Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, we believe the value would be to have both the initial terminating state as well as the resulting terminating state.  Suggestion is to add a member and every code path that can change the state (where `$?` could get set) should update that member.  ErrorRecord formatting can leverage this member to represent non-terminating errors as a different visual cue than terminating ones.",
      "created_at": "2020-01-08T23:34:49Z",
      "updated_at": "2020-01-08T23:34:49Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMainainer, Please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-05-27T02:03:38Z",
      "updated_at": "2020-05-27T02:03:38Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as stale because it has been marked as requiring author feedback but has not had any activity for **15 days**. It will be closed if no further activity occurs **within 10 days of this comment**.",
      "created_at": "2020-06-11T20:00:25Z",
      "updated_at": "2020-06-11T20:00:25Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "I'm just gonna close this. I don't have time to work on it anymore.",
      "created_at": "2020-06-11T21:50:38Z",
      "updated_at": "2020-06-11T21:50:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 @mklement0 Have we a tracking issue for this? Could you please add a reference to the issue?",
      "created_at": "2020-06-13T06:26:01Z",
      "updated_at": "2020-06-13T06:26:01Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Looks like it's #4781 I think?",
      "created_at": "2020-06-13T06:34:50Z",
      "updated_at": "2020-06-13T06:34:50Z"
    }
  ],
  "created_at": "2019-07-11T18:46:33Z",
  "number": 10115,
  "state": "closed",
  "title": "Add IsTerminating property to ErrorRecord with tests",
  "updated_at": "2020-06-13T06:34:50Z"
}