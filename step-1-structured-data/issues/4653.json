{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4653",
  "author": "SteveDesmond-ca",
  "body": "This PR adds cross-compile options to the Linux build script `build.sh`. See #2463.\r\n\r\nBy calling `./build.sh --arch=arm --rid=linux-arm`, both the native and managed components are built for Linux on ARM. Other architectures and RIDs can easily be added as they are brought up.\r\n\r\nCalling `./build.sh` without args should continue to work identically. The argument parsing is done in the same style as [all](https://github.com/dotnet/coreclr/blob/master/build.sh) [the](https://github.com/dotnet/corefx/blob/master/src/Native/build-native.sh) [dotnet](https://github.com/dotnet/core-setup/blob/master/src/corehost/build.sh) [build](https://github.com/dotnet/sdk/blob/master/build.sh) [scripts](https://github.com/dotnet/cli/blob/master/build.sh).\r\n\r\n3 things of note, any/all of which can be done as part of this PR if desired, or a separate PR, or not at all:\r\n1. `psl-native-test` is currently skipped for cross-compiled ARM builds because a QEMU ARM chroot/rootfs is not available to run the tests. [At first glance](https://www.tomaz.me/2013/12/02/running-travis-ci-tests-on-arm.html) it looks like Travis can handle it fine.\r\n\r\n2. While the build currently succeeds, running Powershell on an ARM device currently segfaults. I can look into this either on this PR or a separate one -- let me know which is preferred.\r\n\r\n3. Should I add documentation, similar to [CoreCLR's](https://github.com/dotnet/coreclr/blob/master/Documentation/building/cross-building.md)? Not sure how \"supported\" we want this to be at this time.",
  "closed_at": "2017-09-07T19:08:52Z",
  "comments": [
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "\r\n@__stevedesmond-ca__,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla.microsoft.com.\n\nIt will cover your contributions to all Microsoft-managed open source projects.\n_Thanks,\nMicrosoft Pull Request Bot_",
      "created_at": "2017-08-23T16:38:25Z",
      "updated_at": "2017-08-23T16:38:25Z"
    },
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "__@stevedesmond-ca__, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\r\n<br />_Thanks, Microsoft Pull Request Bot_",
      "created_at": "2017-08-23T17:59:41Z",
      "updated_at": "2017-08-23T17:59:41Z"
    },
    {
      "author": "SteveDesmond-ca",
      "author_association": "NONE",
      "body": "cc @SteveL-MSFT ",
      "created_at": "2017-08-23T18:00:06Z",
      "updated_at": "2017-08-23T18:00:06Z"
    },
    {
      "author": "SteveDesmond-ca",
      "author_association": "NONE",
      "body": "Just ran gdb on it, segfault dump:\r\n```\r\n0xb674aecc in VirtualCallStubManager::predictStubKind(unsigned int) () from /home/vtsv/powershell/libcoreclr.so\r\n(gdb) bt\r\n#0  0xb674aecc in VirtualCallStubManager::predictStubKind(unsigned int) () from /home/vtsv/powershell/libcoreclr.so\r\n#1  0xb67501d6 in VirtualCallStubManager::getStubKind(unsigned int) () from /home/vtsv/powershell/libcoreclr.so\r\n#2  0xb674d1b4 in VirtualCallStubManager::FindStubManager(unsigned int, VirtualCallStubManager::StubKind*) ()\r\n   from /home/vtsv/powershell/libcoreclr.so\r\n#3  0xb674e98e in VSD_ResolveWorker () from /home/vtsv/powershell/libcoreclr.so\r\n#4  0xb67f4b30 in ResolveWorkerAsmStub () from /home/vtsv/powershell/libcoreclr.so\r\n#5  0xaa205a6e in ?? ()\r\n```\r\nSorry, things this deep are beyond my pay grade ;)",
      "created_at": "2017-08-23T18:18:57Z",
      "updated_at": "2017-08-23T18:18:57Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@stevedesmond-ca very cool!  I'll try to work on this tomorrow or Friday",
      "created_at": "2017-08-24T03:29:16Z",
      "updated_at": "2017-08-24T03:29:16Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "I'm not sure if this script is being kept up to date.  It might be better to update build.psm1 and get rid of this.",
      "created_at": "2017-08-25T17:59:15Z",
      "updated_at": "2017-08-25T17:59:15Z"
    },
    {
      "author": "SteveDesmond-ca",
      "author_association": "NONE",
      "body": "Segfault issue is being tracked at dotnet/coreclr#13667",
      "created_at": "2017-09-01T13:39:46Z",
      "updated_at": "2017-09-01T13:39:46Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@TravisEz13 I have changes to build.psm1 to enable cross-compile in my fork however it's pending the coreclr issue.  If we don't depend on build.sh, perhaps we should consider getting rid of it since it's not up to date with build.psm1",
      "created_at": "2017-09-01T15:59:51Z",
      "updated_at": "2017-09-01T15:59:51Z"
    },
    {
      "author": "SteveDesmond-ca",
      "author_association": "NONE",
      "body": "My only hesitance with removing the bash script is the old chicken and egg problem: how do you build Powershell on a system that can't already run Powershell? And maybe that's fine / not a supported use case.",
      "created_at": "2017-09-01T16:05:30Z",
      "updated_at": "2017-09-01T16:05:30Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "You can cross-compile in the build.psm1.  You cannot cross-package currently, but I usually just manually copy the files to the target platform and get packaging working there.  I agree with steve that the `build.sh` should be removed.",
      "created_at": "2017-09-05T18:15:28Z",
      "updated_at": "2017-09-05T18:15:56Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@TravisEz13 perhaps the @PowerShell/powershell-maintainers should own the decision on whether we still want build.sh?",
      "created_at": "2017-09-05T18:45:31Z",
      "updated_at": "2017-09-05T18:45:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Who last run the build.sh and why?",
      "created_at": "2017-09-06T04:31:22Z",
      "updated_at": "2017-09-06T04:31:22Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "It looks like @stevedesmond-ca has run it and he says why.   I don't use it because it's not been maintained and building properly take more/different steps than what is in build.sh.",
      "created_at": "2017-09-06T22:46:11Z",
      "updated_at": "2017-09-06T22:46:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "So if we add the cross-compile scenario in our installation guide we can safely remove `build.sh`?",
      "created_at": "2017-09-07T03:20:56Z",
      "updated_at": "2017-09-07T03:20:56Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "I think so.",
      "created_at": "2017-09-07T17:35:15Z",
      "updated_at": "2017-09-07T17:35:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@stevedesmond-ca Could you please check that the cross-compile scenario works for you (for arm)?",
      "created_at": "2017-09-07T18:09:46Z",
      "updated_at": "2017-09-07T18:09:46Z"
    },
    {
      "author": "SteveDesmond-ca",
      "author_association": "NONE",
      "body": "Just took a look at @SteveL-MSFT's [branch](https://github.com/SteveL-MSFT/PowerShell/tree/raspberry-pi), and I think it's a much better implementation. Since there is an Ubuntu release for Powershell 6b6, we can rely on being able to use Powershell to build Powershell on Ubuntu, and it's made clear in the updated `build.psm1` that Ubuntu is the only supported distro for cross-compiling.\r\n\r\nI made [one quick amendment](https://github.com/PowerShell/PowerShell/pull/4653/commits/b9ee4acc46cff6652cebcb92237222c3dc65c062) to Steve's branch  to ensure that the ARM toolchain file is getting called correctly when `Start-PSBuild $Runtime linux-arm` is run, and pulled that all into this PR. Hopefully that's OK, Steve! Otherwise, feel free to cherry-pick [that single commit](https://github.com/PowerShell/PowerShell/pull/4653/commits/b9ee4acc46cff6652cebcb92237222c3dc65c062) into your branch and create a new PR that way.",
      "created_at": "2017-09-07T19:01:03Z",
      "updated_at": "2017-09-07T19:02:01Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@stevedesmond-ca I've incorporated your change into my PR (which incidentally will remove build.sh since it's not being maintained).  You can close this PR.",
      "created_at": "2017-09-07T19:07:18Z",
      "updated_at": "2017-09-07T19:07:18Z"
    },
    {
      "author": "SteveDesmond-ca",
      "author_association": "NONE",
      "body": "Sounds good, thanks!",
      "created_at": "2017-09-07T19:08:52Z",
      "updated_at": "2017-09-07T19:08:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@stevedesmond-ca Thanks! Come back with new contributions!",
      "created_at": "2017-09-08T03:35:43Z",
      "updated_at": "2017-09-08T03:35:43Z"
    }
  ],
  "created_at": "2017-08-23T16:38:21Z",
  "number": 4653,
  "state": "closed",
  "title": "add cross-compile options to build script",
  "updated_at": "2017-09-08T03:35:43Z"
}