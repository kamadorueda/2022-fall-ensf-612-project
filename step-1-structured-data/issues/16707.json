{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16707",
  "author": "rkitover",
  "body": "### Summary of the new feature / enhancement\n\nI would like to be able to do:\r\n\r\n```powershell\r\n1,2,3,4,5,6 | % -contains 3\r\n\r\n# instead of\r\n\r\n(1,2,3,4,5,6) -contains 3\r\n```\r\n\r\nthis would be different from the already proposed single value operation of `Where-Object` in that, it would operate on the entire collection instead of each single value, e.g.:\r\n\r\n```powershell\r\n'foobarbaz','quux' | ? -match 'bar'\r\n# 'foobarbaz'\r\n\r\n'foo','bar','baz' | % -contains 'bar'\r\n# True\r\n```\n\n### Proposed technical implementation details (optional)\n\n_No response_",
  "closed_at": "2022-01-09T22:00:47Z",
  "comments": [
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "What's wrong with just the following?\r\n\r\n```powershell\r\n1,2,3,4,5,6 -contains 3\r\n```\r\n\r\nNot sure if I'm missing something but this works and will output `$true` because it is operating on the collection itself rather than each member as requested. If you wish to pipe in an array as an actual object rather than each individual members you need to use the unary comma operator https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_operators?view=powershell-7.2#comma-operator-. This is essentially the same as `Write-Object .. -NoEnumerate` where it tells PowerShell not to output each IEnumerable members as distinct objects but rather output the IEnumerable object as 1 individual value.\r\n\r\nNot sure if I'm missing something with the request?\n\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_operators\">about Operators - PowerShell</a></strong></div><div>Describes the operators that are supported by PowerShell.</div></blockquote>",
      "created_at": "2022-01-06T07:09:54Z",
      "updated_at": "2022-01-06T07:09:56Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "My example did not demonstrate this, but the issue is that this won't work with longer pipelines, e.g.:\r\n\r\n```powershell\r\n'foo','bar','baz' | %{ $_.toupper() } -contains 'BAR'\r\n\r\n# will not work, I have to do:\r\n\r\n('foo','bar','baz' | %{ $_.toupper() }) -contains 'BAR'\r\n```\r\n\r\nso this feature would allow not parenthesizing a potentially large command with many pipelines.",
      "created_at": "2022-01-06T07:20:52Z",
      "updated_at": "2022-01-06T07:20:52Z"
    },
    {
      "author": "scriptingstudio",
      "author_association": "NONE",
      "body": "why do you need piping?\r\n```powershell\r\n('foo','bar','baz').toupper() -contains 'BAR'\r\nTrue\r\n```",
      "created_at": "2022-01-06T07:26:15Z",
      "updated_at": "2022-01-06T07:26:15Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "That was just an example, I meant any arbitrary pipeline chain.",
      "created_at": "2022-01-06T07:27:46Z",
      "updated_at": "2022-01-06T07:27:46Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "This is what I mean:\r\n\r\n```powershell\r\nfunction contains($what) { $input -contains $what }\r\n\r\n1,2,3,4 | contains 3\r\n# True\r\n```\r\n\r\nthe operation is on the pipeline input, as opposed to a collection object.",
      "created_at": "2022-01-06T07:33:14Z",
      "updated_at": "2022-01-06T07:33:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The  Where-Object already support many operation including `-Contains`. Only limitation is `Property` is mandatory.\r\n\r\n> Where-Object [-Property] <string> [[-Value] <Object>] -Contains [-InputObject <psobject>] [<CommonParameters>]",
      "created_at": "2022-01-06T07:39:34Z",
      "updated_at": "2022-01-06T07:41:02Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "> The Where-Object already support many operation including -Contains. Only limitation is Property is mandatory.\r\n\r\nThe difference is that `Where-Object` operates on each element in the collection represented by the pipeline input rather than the collection as a whole.",
      "created_at": "2022-01-06T07:45:37Z",
      "updated_at": "2022-01-06T07:45:37Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "> The difference is that Where-Object operates on each element in the collection represented by the pipeline input rather than the collection as a whole.\r\n\r\nThat's not something specific to `Where-Object`. PowerShell always enumerates the value when creating pipeline output which is why it operates on each member. By using the comma operator you output the object without enumeration.\r\n\r\n```powershell\r\n# Each array member is output individually\r\n@(1, 2, 3) | ForEach-Object { \"Entry - $_\" }\r\n\r\nWrite-Output @(1, 2, 3)  | ForEach-Object { \"Entry - $_\" }\r\n\r\n# The array is output as a single object\r\n,@(1, 2, 3) | ForEach-Object { \"Entry - $_\" }\r\n\r\nWrite-Output @(1, 2, 3) -NoEnumerate | ForEach-Object { \"Entry - $_\" }\r\n```\r\n\r\n@iSazonov point still stands in that `Where-Object` must have a property name specified to use `-Contains`",
      "created_at": "2022-01-06T08:01:13Z",
      "updated_at": "2022-01-06T08:01:13Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "I didn't know that, but that doesn't help with not having to parenthesize the command, that is actually even worse.\r\n\r\nAlso, now that I think about, it should also have `-join`, to do e.g.:\r\n\r\n```powershell\r\nsome | long | pipe | line | % -join ','\r\n# 1,2,3,4,5\r\n```",
      "created_at": "2022-01-06T08:09:05Z",
      "updated_at": "2022-01-06T08:09:05Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "Also, and I brought this up before on the discord, if we have a syntax to *NOT* enumerate collections that are enumerated in a pipeline, why do we not have the inverse, to *DO* enumerate collections that are not enumerated in a pipeline, such as strings and hashes.",
      "created_at": "2022-01-06T08:11:21Z",
      "updated_at": "2022-01-06T08:11:21Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "> Also, now that I think about, it should also have -join, to do e.g.:\r\n\r\nIMO what you want is already achievable with the grouping syntax\r\n\r\n```powershell\r\n(some | long | pipe | line) -join ','\r\n```\r\n\r\nI see no benefits of somehow adding support for this in a normal pipeline as it goes against the grain of how things typically work. You could even argue that it adds another way of achieving the same thing making things complicated for newcomers learning PowerShell. If you really want something like this then just define your own `join`, `contain`, etc function that behaves as you wish.\r\n\r\n> Also, and I brought this up before on the discord, if we have a syntax to NOT enumerate collections that are enumerated in a pipeline, why do we not have the inverse, to DO enumerate collections that are not enumerated in a pipeline, such as strings and hashes.\r\n\r\nBecause things always do that by default with the sole exception of `String` and `IDictionary` objects. There's no reason why there isn't AFAIK except that it hasn't been implemented and I don't really see a complelling reason for that over just a simple `.GetEnumerator()` call for those 2 exceptions.\r\n\r\nOn a final note, these are just my personal thoughts and not a reflection of the pwsh team themselves.",
      "created_at": "2022-01-06T09:26:52Z",
      "updated_at": "2022-01-06T09:27:59Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "\r\n```\r\nfunction contains  {\r\nparam ($value)\r\n$Input -contains $value\r\n}\r\n\r\nps > 1,2,3,4,5,6 |  contains 3\r\nTrue\r\n\r\nps > 1,2,3,4,5,6 | contains 7\r\nFalse\r\n```\r\n\r\nDoes what you want and saves you 3 keystrokes into the bargain. \r\n\r\n\r\nDo `where -?`  and have a look at how horrible the parameter sets have become to understand why people won't want to lash this onto `ForEach-Object`. \r\n\r\n",
      "created_at": "2022-01-06T10:52:34Z",
      "updated_at": "2022-01-06T10:52:34Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "Having these functions or something like this would solve the problem of not having to parenthesize long pipelines. I was just thinking it would be a nice thing to have in the core language, regardless of the method. If not, it could be a gallery module.",
      "created_at": "2022-01-06T22:49:14Z",
      "updated_at": "2022-01-06T22:49:14Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "Now that I think about it more, `ForEach-Object` would be the wrong place to do this.\r\n\r\nWhat would really be nice is a function or some kind of syntax to group a pipeline into the collection object to do arbitrary operations on. This is already possible with a scriptblock, e.g.:\r\n\r\n```powershell\r\n1,2,3,4,5,6,7 | &{ $input -contains 3 }\r\n# True\r\n```\r\n\r\nBut it may be worthwhile to have a nicer way to do this for interactive one-liner use etc..\r\n\r\nSomethjing like this maybe:\r\n\r\n```powershell\r\n1,2,3,4,5,6,7 >@ -contains 3\r\n# True\r\n1,2,3,4,5,6,7 >@ -join ','\r\n# 1,2,3,4,5,6,7\r\n```\r\n\r\nit would be fairly obvious what happens here.",
      "created_at": "2022-01-08T16:18:25Z",
      "updated_at": "2022-01-08T16:18:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Don't forget about `@(1,2,3,4,5,6,7).Where({$_ -eq 3})` and `@(1,2,3,4,5,6,7).ForEach({$_ -eq 3})`",
      "created_at": "2022-01-08T17:09:07Z",
      "updated_at": "2022-01-08T17:09:07Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as declined and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-01-09T22:00:46Z",
      "updated_at": "2022-01-09T22:00:46Z"
    }
  ],
  "created_at": "2022-01-06T06:54:24Z",
  "number": 16707,
  "state": "closed",
  "title": "Support for -contains and -notcontaints for ForEach-Object for pipelines",
  "updated_at": "2022-01-09T22:00:47Z"
}