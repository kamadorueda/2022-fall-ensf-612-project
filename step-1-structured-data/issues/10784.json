{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10784",
  "author": "ChrisLGardner",
  "body": "# PR Summary\r\n\r\nAdd an additional check into the `IsCommandMatch` method to return the syntax of an aliased command rather than just the name of the aliased command.\r\n\r\nPrevious behaviour:\r\n![image](https://user-images.githubusercontent.com/16837142/66720667-d7847d00-edf7-11e9-944a-cae5e83f0d55.png)\r\n\r\nNew behaviour:\r\n![image](https://user-images.githubusercontent.com/16837142/66720653-b4f26400-edf7-11e9-889a-c2624305f4df.png)\r\n\r\n\r\n## PR Context\r\n\r\n#5963 asked for this functionality as currently `Get-Command del -syntax` doesn't give you anything useful, especially not beyond what `Get-Command del` does. The Issue does suggest that instead of the original command it shows the alias in the syntax but the `Syntax` property is read-only and I didn't want to mess around with the base CommandInfo or AliasInfo object for something like this, not doing that also somewhat enables @KirkMunro's request that it shows the `alias -> real command` as part of the output since it'll now show the resolved command name in the syntax'\r\n\r\nI don't think this is a breaking change because the likelihood of anyone actually using `Get-Command -Name <alias> -Syntax` for anything outside the command line is very minimal. I'm also not sure if there needs to be a docs change for it but it might be useful just so users are aware that it'll do this now.\r\n\r\n## PR Checklist\r\n\r\n- [X] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [X] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [X] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [X] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [X] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [X] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-04-13T18:01:09Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw It seems there is a problem with TestAppDomainProcessExitEvenHandlerNotLeaking test. Could you please look?\r\nhttps://powershell.visualstudio.com/PowerShell/_build/results?buildId=35043&view=logs&jobId=3057ddcd-9849-50b7-e99e-f5fc6d303bb4&taskId=ff5d329a-0734-5136-788e-29ee918190af&lineStart=9&lineEnd=24&colStart=1&colEnd=27\r\n\r\n```c#\r\nDescription: PSTests.Sequential.RunspaceTests PSTests.Sequential.RunspaceTests PSTests.Sequential.RunspaceTests PSTests.Sequential.RunspaceTests\r\nName:        TestAppDomainProcessExitEvenHandlerNotLeaking TestRunspaceWithPowerShellAndInitialSessionState TestRunspaceWithPipeline TestRunspaceWithPowerShell\r\nmessage:\r\nTest-XUnitTestResults : Cannot validate argument on parameter 'message'. The argument is null or empty. Provide an \r\nargument that is not null or empty, and then try the command again.\r\nAt D:\\a\\_temp\\85b7acd9-47dd-489a-a2cb-ec41b0000555.ps1:5 char:1\r\n+ Test-XUnitTestResults -TestResultsFile $xUnitTestResultsFile\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidData: (:) [Test-XUnitTestResults], ParameterBindingValidationException\r\n    + FullyQualifiedErrorId : ParameterArgumentValidationError,Test-XUnitTestResults\r\n```",
      "created_at": "2019-10-14T14:09:46Z",
      "updated_at": "2019-10-14T14:09:46Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "> The Issue does suggest that instead of the original command it shows the alias in the syntax but the `Syntax` property is read-only and I didn't want to mess around with the base CommandInfo or AliasInfo object for something like this, not doing that also somewhat enables @KirkMunro's request that it shows the `alias -> real command` as part of the output since it'll now show the resolved command name in the syntax'.\r\n\r\nYou don't need to change the `Syntax` property for this. `Get-Command ... -Syntax` returns a single string. All you need to do to show a more meaningful (and technically more correct) output is to modify the syntax strings you retrieve from the command associated with that alias, by replacing the leading command name with the name of the alias.\r\n\r\ni.e. When you discover that it is an alias, store the alias name, and then later when you retrieve the command syntax, replace the command name with the alias name in the output, while also pre-pending that output with a comment showing the alias to command relationship.\r\n\r\nThis will be very helpful when an alias references a script path, because you'll see the alias in the output syntax (which is the command you requested syntax for), while also seeing that the command you're requesting syntax for is actually an alias for another command (good for awareness/educational purposes).\r\n\r\nI'd really like to see the output from this match something more along these lines:\r\n\r\n```powershell\r\n# First, create a script file\r\n@'\r\n[CmdletBinding()]\r\nparam(\r\n    [Parameter(Position=0, Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName)]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    $Name\r\n)\r\nprocess {\r\n    \"Processing ${Name}\"\r\n}\r\n'@ | out-File ${env:USERPROFILE}\\Test-GcmSyntax.ps1\r\n\r\n# Now set up an alias for that file\r\nnew-alias tgs ${env:USERPROFILE}\\Test-GcmSyntax.ps1\r\n\r\n# Get the command syntax using the alias\r\ngcm -syntax tgs\r\n```\r\n\r\nDesired output:\r\n\r\n```none\r\ntgs is an alias for C:\\Users\\kirka\\Test-GcmSyntax.ps1\r\n\r\ntgs [-Name] <string[]> [<CommonParameters>]\r\n\r\n```\r\n\r\nTo make that work, you can inject the alias definition at the top (wrapping a script path in quotes if it has spaces), and then use regex to replace `\"^Test-GcmSyntax.ps1\"` (or an actual command name if it was an alias for a command instead of for a script) with `\"tgs\"`.\r\n\r\nIf we don't agree on showing the alias definition at the top, at a minimum I would expect the syntax to show the alias name instead of the command/script it points to.\r\n\r\nAs an alternative, we could leave the syntax as-is, and just show the alias note at the top so that users see first that they asked for syntax for an alias, and then they see the syntax for the command that is being aliased.\r\n\r\nAs another alternative, we could show the alias details in verbose output instead, so that users only see it when invoking the command with `-Verbose`. I don't love that though because people should realize when they are looking at an alias, so we really need to show them that detail. They see that when they invoke `Get-Command` without `-Syntax`, but they should really see it when they invoke it with `-Syntax` as well.\r\n",
      "created_at": "2019-10-14T15:06:14Z",
      "updated_at": "2019-10-14T15:09:42Z"
    },
    {
      "author": "ChrisLGardner",
      "author_association": "CONTRIBUTOR",
      "body": "I've been digging into doing that a bit and I've managed to get this so far:\r\n\r\n```\r\n[547.63 ms]github\\powershell [get-command-alias \u2261 +0 ~1 -0 !]>  gcm del -syn\r\nNote: del is an alias for Remove-Item\r\n\r\ndel [-Path] <string[]> [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Recurse] [-Force] [-Credential <pscredential>] \r\n[-WhatIf] [-Confirm] [-Stream <string[]>] [<CommonParameters>]\r\n\r\ndel -LiteralPath <string[]> [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Recurse] [-Force] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-Stream <string[]>] [<CommonParameters>]\r\n```\r\n\r\nIt doesn't bring back the full path for a script but I'll see what I can do about that.  I do like the extra information that shows what the alias is for in a more clear way than just replacing the name in the syntax output.",
      "created_at": "2019-10-14T15:25:24Z",
      "updated_at": "2019-10-14T15:25:24Z"
    },
    {
      "author": "ChrisLGardner",
      "author_association": "CONTRIBUTOR",
      "body": "After a bit more fiddling around I've got it working with external scripts, I need to add some test cases for this and need to play around with it and native commands to see how that comes out. \r\n```\r\nPS>  gcm -syntax tgs\r\nNote: tgs is an alias for C:\\Users\\Chris\\Test-GcmSyntax.ps1\r\ntgs [-Name] <string[]> [<CommonParameters>]\r\n```",
      "created_at": "2019-10-14T15:51:19Z",
      "updated_at": "2019-10-14T15:51:19Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "You can probably relay the information that it's an alias a bit more succinctly, similarly to how `Get-Alias` shows it; `tgs -> C:\\Users\\Chris\\Test-GcmSyntax.ps1` or `gci -> Get-ChildItem`\r\n\r\nI do think having a line break after the \"hey this is an alias\" line is a good idea too, it helps clarify that the information being given is in two parts. \ud83d\ude42 ",
      "created_at": "2019-10-14T16:36:13Z",
      "updated_at": "2019-10-14T16:36:13Z"
    },
    {
      "author": "ChrisLGardner",
      "author_association": "CONTRIBUTOR",
      "body": "> I do think having a line break after the \"hey this is an alias\" line is a good idea too, it helps clarify that the information being given is in two parts. \ud83d\ude42\r\n\r\nThat's what I'm thinking, it'll take a bit more conditional formatting as the syntax for a command already includes the leading line breaks but I can add that in easily enough.\r\n",
      "created_at": "2019-10-14T16:40:38Z",
      "updated_at": "2019-10-14T16:40:38Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "> You can probably relay the information that it's an alias a bit more succinctly, similarly to how `Get-Alias` shows it; `tgs -> C:\\Users\\Chris\\Test-GcmSyntax.ps1` or `gci -> Get-ChildItem`\r\n\r\nExcept with `Get-Alias`, you know what you're getting, so seeing the shorthand such as `gci -> Get-ChildItem` makes more sense. You have context in that scenario to work with the information that is presented to you.\r\n\r\nWith `Get-Command`, you don't have the type of the command in the output, so `gci -> Get-ChildItem` by itself may not make as much sense unless you're familiar with that output already.",
      "created_at": "2019-10-14T17:04:36Z",
      "updated_at": "2019-10-14T17:04:36Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Something shorter would be good though, especially if it doesn't need to be localized. Maybe something like this:\r\n\r\n`gci (alias) -> Get-ChildItem`\r\n\r\n`tgs (alias) -> C:\\Users\\Chris\\Test-GcmSyntax.ps1`\r\n\r\nYou wouldn't need to quote the right-hand side of the `->` if the path contained spaces with that syntax.",
      "created_at": "2019-10-14T17:22:51Z",
      "updated_at": "2019-10-14T17:22:51Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "In practice `Get-Command` is also taught as a learning tool, and it is used interactively with `-Syntax` very, very frequently as a way to simply get the syntax of a command. It also just returns a `string`.\r\n\r\nThat said, this part of the discussion makes me wonder if `Get-Help` should have a `-Syntax` parameter. The challenge there is muscle memory for users who have been using `gcm -syntax` for quick command inspection for years...\r\n\r\n",
      "created_at": "2019-10-15T11:46:38Z",
      "updated_at": "2019-10-15T11:47:20Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "> that said, this part of the discussion makes me wonder if Get-Help should have a -Syntax parameter. \r\n\r\nI think maybe but thats a separate issue than this and whilst get-command already has syntax  (and is in muscle memory) let's get improvements made to it ",
      "created_at": "2019-10-15T22:44:54Z",
      "updated_at": "2019-10-15T22:44:54Z"
    },
    {
      "author": "ChrisLGardner",
      "author_association": "CONTRIBUTOR",
      "body": "I've added support for wildcards, with the correct alias for each command found replacing it's use in the syntax. If a command doesn't have an alias but is found with the wildcard then the extra notation isn't shown (see Split-Path example below)\r\n\r\n```\r\nPS>  gcm sp* -syn\r\nsp (alias) -> Set-ItemProperty\r\n\r\nsp [-Path] <string[]> [-Name] <string> [-Value] <Object> [-PassThru] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]\r\n\r\nsp [-Path] <string[]> -InputObject <psobject> [-PassThru] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]\r\n\r\nsp [-Name] <string> [-Value] <Object> -LiteralPath <string[]> [-PassThru] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]\r\n\r\nsp -LiteralPath <string[]> -InputObject <psobject> [-PassThru] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] \r\n[-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]\r\n\r\n\r\nSplit-Path [-Path] <string[]> [-Parent] [-Resolve] [-Credential <pscredential>] [<CommonParameters>]  \r\n\r\nSplit-Path [-Path] <string[]> [-Leaf] [-Resolve] [-Credential <pscredential>] [<CommonParameters>]  \r\n```\r\n\r\nThere is one odd case that I'm not sure what to do about, if an alias and the command it's for both match a wildcard then what should the output look like. An example is `write` and `Write-Output`, currently with this implementation it'll produce output like this when you run `gcm wri* -syn`:\r\n\r\n```\r\nwrite (alias) -> Write-Output\r\n\r\nwrite [-InputObject] <psobject> [-NoEnumerate] [<CommonParameters>]\r\n```\r\n\r\nBut I don't think it should, it should either produce the old output of just the `Write-Output` or it should output both. There is duplicate detection in place to prevent outputting multiple of the same command so I'm thinking we probably want to just output the actual `Write-Output` syntax without the extra alias information.",
      "created_at": "2019-10-17T10:47:55Z",
      "updated_at": "2019-10-17T10:47:55Z"
    },
    {
      "author": "ChrisLGardner",
      "author_association": "CONTRIBUTOR",
      "body": "I've discovered another issue this will have, if you do something like `gcm get-help, sls -syntax` then it'll replace all the mentions of sls with Get-Help:\r\n\r\n```\r\nget-help (alias) -> Select-String\r\n\r\nget-help [-Pattern] <string[]> [-Path] <string[]> [-SimpleMatch] [-CaseSensitive] [-Quiet] [-List] [-NoEmphasis] [-Include <string[]>] \r\n[-Exclude <string[]>] [-NotMatch] [-AllMatches] [-Encoding <Encoding>] [-Context <int[]>] [<CommonParameters>]\r\n\r\nget-help [-Pattern] <string[]> -InputObject <psobject> [-SimpleMatch] [-CaseSensitive] [-Quiet] [-List] [-NoEmphasis] [-Include <string[]>] [-Exclude <string[]>] [-NotMatch] [-AllMatches] [-Encoding <Encoding>] [-Context <int[]>] [<CommonParameters>]\r\n```\r\n\r\nSo I need to figure out a way to handle that but I know what's causing it so that's a start.",
      "created_at": "2019-10-17T11:42:07Z",
      "updated_at": "2019-10-17T11:42:07Z"
    },
    {
      "author": "ChrisLGardner",
      "author_association": "CONTRIBUTOR",
      "body": "I think I've fixed all the edge cases I can, the only one that's outstanding is if someone does `gcm del, sp* -syntax` then they'll get back the right output but instead of `del` being used for the alias in the `Remove-Item` output it'll actually be `ri` due to the order they are in the alias table. This only happens on commands with multiple aliases and when using a wildcard as well. I can't imagine people are often going to look for syntax on multiple aliases and a wildcard at the same time so I didn't put much effort into figuring out how to fix that.\r\n\r\nThis is now ready for a review since I refactored it into a new method. ",
      "created_at": "2019-10-18T10:24:00Z",
      "updated_at": "2019-10-18T10:24:00Z"
    },
    {
      "author": "ChrisLGardner",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT or @adityapatwardhan Can I get one of you to review this PR when you get a chance please?",
      "created_at": "2019-11-01T12:45:17Z",
      "updated_at": "2019-11-01T12:45:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT We need a conclusion about the change. I have a strong concern. I am sure that Get-Command cmdlet is for script scenarios and should return typed output for aliases and syntax. For human scenarios there is Get-Help cmdlet.",
      "created_at": "2019-11-01T18:35:32Z",
      "updated_at": "2019-11-01T18:35:32Z"
    },
    {
      "author": "ChrisLGardner",
      "author_association": "CONTRIBUTOR",
      "body": "Get-Command currently outputs typed objects except with -Syntax. I don't\nsee a time where you'd use that switch in a script and would be a breaking\nchange if it did return something other than a string as it does currently.\n\nOn Fri, Nov 1, 2019, 18:36 Ilya <notifications@github.com> wrote:\n\n> @SteveL-MSFT <https://github.com/SteveL-MSFT> We need a conclusion about\n> the change. I have a strong concern. I am sure that Get-Command cmdlet is\n> for script scenarios and should return typed output for aliases and syntax.\n> For human scenarios there is Get-Help cmdlet.\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/PowerShell/PowerShell/pull/10784?email_source=notifications&email_token=AEAOUFQSYY3CO7VFQR443WTQRRZKRA5CNFSM4JAIKSR2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEC3ZP7A#issuecomment-548902908>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AEAOUFQMHJVPDVVPCB56N5LQRRZKRANCNFSM4JAIKSRQ>\n> .\n>\n",
      "created_at": "2019-11-01T21:33:49Z",
      "updated_at": "2019-11-01T21:33:49Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov `Get-Command <x> -Syntax` returns string today as @ChrisLGardner says unless I'm misunderstanding your concern",
      "created_at": "2019-11-02T05:00:25Z",
      "updated_at": "2019-11-02T05:00:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT If we look other parameters Get-Command returns __typed__ output like:\r\n```powershell\r\n (gcm -verb Update)[0].GetType()\r\n\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     False    FunctionInfo                             System.Management.Automation.CommandInfo\r\n```\r\nI am sure that this was and is a design intention for this cmdlet. Improvements for Syntax parameter must be in the direction too - return a typed object. To get user friendly output we could add new elements in formatting system for the typed object or improve Get-Help cmdlet.",
      "created_at": "2019-11-02T06:39:06Z",
      "updated_at": "2019-11-02T06:39:06Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov @SteveL-MSFT  there may well be a useful advantage in having the cmdlet return typed output.\r\n\r\nBe that as it may, I don't think it is a good idea to do it in this PR. That work, if we want it, should be in another PR. To be particularly useful, I would imagine such an object would likely output objects that contain information about each cmdlet's name, parameter sets, and mandatory and optional parameters for each set, as well as position information (if relevant), type information, and possibly validation / transformation attributes for each parameter.\r\n\r\nThis kind of change should be its own work item and may warrant discussion in an issue to help determine what users would find useful. I don't think we will be gaining anything by attempting to do that work in this PR.\r\n\r\nAs it stands, this PR is an improvement, and we can build upon it further after this PR if we feel that typed output should be our goal.",
      "created_at": "2019-11-02T12:14:06Z",
      "updated_at": "2019-11-02T12:14:06Z"
    },
    {
      "author": "ChrisLGardner",
      "author_association": "CONTRIBUTOR",
      "body": "> @iSazonov @SteveL-MSFT there may well be a useful advantage in having the cmdlet return typed output.\r\n> \r\n> Be that as it may, I don't think it is a good idea to do it in this PR. That work, if we want it, should be in another PR. To be particularly useful, I would imagine such an object would likely output objects that contain information about each cmdlet's name, parameter sets, and mandatory and optional parameters for each set, as well as position information (if relevant), type information, and possibly validation / transformation attributes for each parameter.\r\n> \r\n> This kind of change should be its own work item and may warrant discussion in an issue to help determine what users would find useful. I don't think we will be gaining anything by attempting to do that work in this PR.\r\n> \r\n> As it stands, this PR is an improvement, and we can build upon it further after this PR if we feel that typed output should be our goal.\r\n\r\nMy issue with that is that it is still a breaking change. Get-Command already returns all of that information when you don't specify the `-Syntax` switch, even when specifying an alias or wildcard. If you're wanting to work with the syntax of a command in a programmatic way then you're going to ignore the `-Syntax` switch and work directly with the Parameters attribute (or write regex to parse the `-Syntax` output but that seems like a mistake given Parameters exists).",
      "created_at": "2019-11-02T12:42:03Z",
      "updated_at": "2019-11-02T12:42:03Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "> @SteveL-MSFT We need a conclusion about the change. I have a strong concern. I am sure that Get-Command cmdlet is for script scenarios and should return typed output for aliases and syntax. For human scenarios there is Get-Help cmdlet.\r\n\r\n@iSazonov i think this concern and the other comments made as to what we should change and why are based on an incorrect assumption as to how people use Get-Command today not how they could use it in the future\r\n\r\nThis change makes sense for those that use Get-Command interactively with the Syntax parameter today and not for future changes.\r\n\r\n> If we look other parameters Get-Command returns typed output\r\n\r\nWhilst that's true there's no binding contract that states there must be similar outputs when differing parameters are provided to a command and therefore we should not look to change this behaviour\r\n\r\n> Improvements for Syntax parameter must be in the direction too - return a typed object.\r\n\r\nDisagree as genuinely there's no benefit within this PR to do so, not without breaking the current experience. We should get a change like this in and then look to iterate on new additional functionality around this area via additional switches for differing output types in future.\r\n",
      "created_at": "2019-11-06T13:05:17Z",
      "updated_at": "2019-11-06T13:05:17Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov I think we all can agree that an object should be returned, but is outside the scope of this PR since returning a string is the existing behavior",
      "created_at": "2019-11-08T21:07:06Z",
      "updated_at": "2019-11-08T21:07:06Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@PoshChan please retry windows",
      "created_at": "2019-11-08T21:11:41Z",
      "updated_at": "2019-11-08T21:11:41Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@vexx32, successfully started retry of `PowerShell-CI-Windows`",
      "created_at": "2019-11-08T21:12:13Z",
      "updated_at": "2019-11-08T21:12:13Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@ChrisLGardner I tried building your branch and am seeing some issues. This happens when a new pwsh.exe is started and the first command is `Get-Command del -Syntax`. Please have a look:\r\n\r\n```PowerShell\r\nPS> Get-Command del -Syntax\r\nGet-Command: The term 'del' is not recognized as the name of a cmdlet, function, script file, or operable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n\r\nSuggestion [4,General]: The most similar commands are: del, dir, dbp, fl, gal, gl, iex, nal, sal, sl.\r\nPS> Get-Command del -Syntax\r\nGet-Command: The term 'del' is not recognized as the name of a cmdlet, function, script file, or operable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n\r\nSuggestion [4,General]: The most similar commands are: del, dir, dbp, fl, gal, gl, iex, nal, sal, sl.\r\nPS> Get-Command del -Syntax\r\nGet-Command: The term 'del' is not recognized as the name of a cmdlet, function, script file, or operable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n\r\nSuggestion [4,General]: The most similar commands are: del, dir, dbp, fl, gal, gl, iex, nal, sal, sl.\r\nPS> Get-Command del -Syntax\r\nGet-Command: The term 'del' is not recognized as the name of a cmdlet, function, script file, or operable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n\r\nSuggestion [4,General]: The most similar commands are: del, dir, dbp, fl, gal, gl, iex, nal, sal, sl.\r\nPS> Get-Command del\r\n\r\nCommandType     Name                                               Version    Source\r\n-----------     ----                                               -------    ------\r\nAlias           del -> Remove-Item\r\n\r\nPS> Get-Command del -Syntax\r\ndel (alias) -> Remove-Item\r\n\r\ndel [-Path] <string[]> [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Recurse] [-Force] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-Stream <string[]>] [<CommonParameters>]\r\n\r\ndel -LiteralPath <string[]> [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Recurse] [-Force] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-Stream <string[]>] [<CommonParameters>]\r\n```",
      "created_at": "2019-12-02T20:09:31Z",
      "updated_at": "2019-12-02T20:09:31Z"
    },
    {
      "author": "ChrisLGardner",
      "author_association": "CONTRIBUTOR",
      "body": "That's really weird, I'd not seen it before because it was auto loading my profile and that must be doing something to get around that. \r\n\r\nI'll have a look into it over the next day or two and see if I can figure out what's going on there.",
      "created_at": "2019-12-02T20:59:41Z",
      "updated_at": "2019-12-02T20:59:41Z"
    },
    {
      "author": "ChrisLGardner",
      "author_association": "CONTRIBUTOR",
      "body": "@adityapatwardhan It looks like an issue in the session state and is in Preview 5 too. It looks like not all aliases are having their ResolvedCommand and other properties populated properly until after at least one command is successfully ran first. If you do `Get-Alias gci | Format-List *` you'll see ResolveCommand and a bunch of others are empty and that's what's causing this to fail.\r\n\r\nI'll log a separate issue about this as it's outside the scope of this PR and way out of my knowledge area.",
      "created_at": "2019-12-08T21:10:02Z",
      "updated_at": "2019-12-08T21:10:02Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@ChrisLGardner I took a quick look at this, and the issue is module auto-loading.\r\n\r\nIn a new session loaded without a profile, if I invoke `gcm -syntax saps`, I get information about `saps` being an alias for `Start-Process`, but the `Microsoft.PowerShell.Management` module does not auto-load.\r\n\r\nIf in that same session I invoke `gcm -syntax Start-Process`, then I get the module is auto-loaded and I get the command syntax.\r\n\r\nThis makes me think it might be in scope for this PR. Whatever `Get-Command` does when you pass it a command name that results in the module auto-loading should happen when you pass it an alias name, with it auto-loading the module that contains that command before it pulls information about that command so that it can show the proper information.\r\n\r\nNote that I say all of this without looking at the code, so this is theoretical, but I think that this work is related enough to this PR and shouldn't be too difficult to figure out since `gcm` already worked for cmdlets in modules that were not loaded yet.",
      "created_at": "2019-12-08T22:47:14Z",
      "updated_at": "2019-12-08T22:47:14Z"
    },
    {
      "author": "ChrisLGardner",
      "author_association": "CONTRIBUTOR",
      "body": "@KirkMunro thanks for the pointer there, I managed to find the method in CommandDiscovery that was already being used for command resolution and added an extra check in to call that if it hasn't resolved the alias to a CommandInfo.\r\n\r\n@adityapatwardhan looks like I've resolved that bug if you get a chance to look at this again at some point.",
      "created_at": "2019-12-14T15:19:40Z",
      "updated_at": "2019-12-14T15:19:40Z"
    },
    {
      "author": "ChrisLGardner",
      "author_association": "CONTRIBUTOR",
      "body": "Looks like the last failing build is related to Test-Connection so not impact by the change I've made. though I'm certainly well behind master now but I can rebase if required.",
      "created_at": "2020-03-27T17:06:10Z",
      "updated_at": "2020-03-27T17:06:10Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@PoshChan please retry macos",
      "created_at": "2020-03-27T17:21:34Z",
      "updated_at": "2020-03-27T17:21:34Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@vexx32, successfully started retry of `PowerShell-CI-macOS`",
      "created_at": "2020-03-27T17:21:57Z",
      "updated_at": "2020-03-27T17:21:57Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.1.0-preview.2` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.2)\n",
      "created_at": "2020-04-23T18:02:53Z",
      "updated_at": "2020-04-23T18:02:53Z"
    }
  ],
  "created_at": "2019-10-13T19:37:07Z",
  "number": 10784,
  "state": "closed",
  "title": "Get-Command: Specifying an alias and -Syntax returns the aliased commands syntax",
  "updated_at": "2020-04-23T18:02:53Z"
}