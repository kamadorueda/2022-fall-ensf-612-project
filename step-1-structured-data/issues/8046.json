{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8046",
  "author": "grongrilla",
  "body": "Preface\r\n-------\r\n\r\nNot sure if this is the right place or if my problem is an issue or by design. We are currently looking alternatives for a self developed scripting engine.\r\n\r\n Our partners know Powershell, however one of our requirements is independence on any \"installed\" software, so Windows Powershell, even though it should be available on every Windows 7+, can not be considered.\r\n\r\nWe are looking at Powershell Core because as far as we understand we should be able to provide everything that is necessary to run a script by simple copy-deployement. \r\n\r\nFurthermore, we want to have control over which Cmdlets can be executed (\"sandboxing\"), so we want to use runspaces and host the powershell scripts ourselves.\r\n\r\nI was tryint to setup a simple powershell core host with a runspace using these two examples:\r\n\r\nhttps://github.com/PowerShell/PowerShell/tree/master/docs/host-powershell/sample-dotnet2.0-powershell.beta.3\r\n\r\nhttps://docs.microsoft.com/en-us/powershell/developer/hosting/creating-a-constrained-runspace\r\n\r\nIn the second link, a runspace is created and the \"Get-Process\" Cmdlet should be made available by using\r\n\r\n```\r\nSessionStateCmdletEntry ssce1 = new SessionStateCmdletEntry(\r\n                                                            \"get-process\",\r\n                                                            typeof(GetProcessCommand),\r\n                                                            null);\r\n```\r\n\r\nHowever, when I use the first link as base, getting the powershell core sdk using nuget, `GetProcessCommand` is not known. The reasons seems to be that `GetProcessCommand` is available in Micrososft.Powershell.Commands.Management, however the nutget Package has a \"ref\" dll (System.Management.Automation) that does not expose `GetProcessCommand`.\r\n\r\nIs this an oversight or by design, maybe because `Get-Process` is not available on all platforms? Can we work around this problem by refering to Microsoft.Powershell.Commands.Managment assembly directly or are we going down a dangerous path? If this behaviour is intentional, is there a list on which cmdlets implementatios are platform dependant or not immediately available in the Powershell Core SDK? \r\n\r\nWe are currently not intending to target anything else but Windows.\r\n\r\nSteps to reproduce\r\n------------------\r\n1) Use https://github.com/PowerShell/PowerShell/tree/master/docs/host-powershell/sample-dotnet2.0-powershell.beta.3 as base\r\n2) Try to do\r\n```\r\nSessionStateCmdletEntry ssce1 = new SessionStateCmdletEntry(\r\n                                                            \"get-process\",\r\n                                                            typeof(GetProcessCommand),\r\n                                                            null);\r\n\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\ncompiles\r\n\r\nActual behavior\r\n---------------\r\n\r\ndoes not compile\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0\r\nOS                             Microsoft Windows 10.0.16299\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0```\r\n",
  "closed_at": "2020-05-07T16:37:34Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@adityapatwardhan Could you please answer or ping anybody?",
      "created_at": "2018-10-16T15:42:28Z",
      "updated_at": "2018-10-16T15:42:28Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@PaulHigin Can you help with creating the constrained runspace? `Get-Process` cmdlet should be available through the SDK. ",
      "created_at": "2018-10-16T18:43:14Z",
      "updated_at": "2018-10-16T18:43:14Z"
    },
    {
      "author": "grongrilla",
      "author_association": "NONE",
      "body": "I accidently closed the issue... sorry",
      "created_at": "2018-10-17T06:25:52Z",
      "updated_at": "2018-10-17T06:25:52Z"
    },
    {
      "author": "grongrilla",
      "author_association": "NONE",
      "body": "For clarification @adityapatwardhan, @PaulHigin:\r\nThe cmdlet is available in pwsh.exe. I can host PSCore and run `(Get-Command Get-Process).DLL` and get `Microsoft.Powershell.Commands.Managment.dll` as output. So, thats working.\r\nIf I want to create a constrained runspace I need the cmdlets implementation `GetCommandCommand` which is implemented in `\\src\\Microsoft.PowerShell.Commands.Management\\commands\\management\\Process.cs` and gets put in the assembly `Microsoft.PowerShell.Commands.Management.dll`. When I use and configure the project as suggested in https://github.com/PowerShell/PowerShell/tree/master/docs/host-powershell/sample-dotnet2.0-powershell.beta.3 you do not \"link\" (? sorry, I'm a C++ guy...) against `Microsoft.PowerShell.Commands.Management.dll`, but against `System.Managment.Automation.dll`, which is in the `ref` folder inside the nuget package. In that assembly, GetCommandCommand is not made available, so I would have to \"link\" against `Microsoft.PowerShell.Commands.Management.dll` manually.\r\n\r\nIs this intentional and is it actually Ok to do that, as long as I know which OS I am targeting and take care to \"link\" the correct version. Or should I expect issues because stuff might get (re)moved and I therefore should I only use what is made available in the `ref` DLLs?",
      "created_at": "2018-10-17T06:33:15Z",
      "updated_at": "2018-10-17T06:33:15Z"
    },
    {
      "author": "grongrilla",
      "author_association": "NONE",
      "body": "Can't edit my comment. This is how I run the above mentioned `Get-Command`-Thingy:\r\n```\r\nusing (PowerShell ps = PowerShell.Create())\r\n{ \r\n  var results = ps.AddScript(\"(Get-Command Get-Process). DLL\").Invoke();\r\n  foreach (dynamic result in results)\r\n  {\r\n    Console.WriteLine(result.ToString());\r\n  }\r\n}\r\n```",
      "created_at": "2018-10-17T06:37:40Z",
      "updated_at": "2018-10-17T06:37:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Can't edit my comment. \r\n\r\nOld browser :-)",
      "created_at": "2018-10-17T06:47:59Z",
      "updated_at": "2018-10-17T06:47:59Z"
    },
    {
      "author": "grongrilla",
      "author_association": "NONE",
      "body": "Found another example, maybe my selection of Cmdlets is just... \"wrong\"\r\n\r\n`Microsoft.PowerShell.Commands.Utility` exposes the implementation of `Write-Host` as `WriteHostCommand` in the `Microsoft.PowerShell.Commands` namepsace. It is not available in via `System.Management.Automation`, which is again the DLL that is referenced when a dependency on `Microsoft.PowerShell.Commands.Utility` is added via nuget.\r\n\r\nAm I doing something wrong? :(",
      "created_at": "2018-10-17T13:31:27Z",
      "updated_at": "2018-10-17T13:31:27Z"
    },
    {
      "author": "grongrilla",
      "author_association": "NONE",
      "body": "... another one:\r\n\r\n`Out-File`, available in `Microsoft.PowerShell.Commands.Utility`, not available via `System.Management.Automation`. `Out-Host`, on the other hand, is available via `System.Management.Automation`",
      "created_at": "2018-10-17T13:38:14Z",
      "updated_at": "2018-10-17T13:38:14Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Taking a look now ...",
      "created_at": "2018-10-17T16:45:29Z",
      "updated_at": "2018-10-17T16:45:29Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@bergersn The SDK has changed a lot from version beta3. Can you try it with `Microsoft.PowerShell.SDK` version `6.1.0`?\r\n\r\nAlso you might need reference assemblies. Try using package: 'https://www.nuget.org/packages/PowerShellStandard.Library/5.1.0-RC1' ",
      "created_at": "2018-10-17T17:53:35Z",
      "updated_at": "2018-10-17T17:53:35Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "I haven't experimented with hosting PSCore6 and @daxian-dbw is your best source for that.\r\nHowever, instead of using SessionStateCmdletEntry for creating a sand boxed runspace, I recommend using the PSSession configuration file instead.  This is normally used for remote session configuration, but can be used for local runspaces as well.  \r\n\r\nThe configuration file is used to determine how the runspace is configured what cmdlets, functions, aliases, provides, etc are visible.\r\n\r\nYou can start by looking at a configuration file that contains all configuration options:\r\n```powershell\r\nNew-PSSessionConfigurationFile -Full -Path .\\full.pssc\r\nnotepad .\\full.pssc\r\n```\r\nYou have to ignore the remoting session configuration parts since they do not apply to a local runspace.  Here is an example of a text file, TestGP.pssc\r\n```powershell\r\n@{\r\n\r\n# Version number of the schema used for this document\r\nSchemaVersion = '2.0.0.0'\r\n\r\n# ID used to uniquely identify this document\r\nGUID = '498aab26-ac10-40fe-9493-380835fa1e43'\r\n\r\n# Author of this document\r\nAuthor = 'paul'\r\n\r\n# Language mode to apply when applied to a session. Can be 'NoLanguage' (recommended), 'RestrictedLanguage', 'ConstrainedLanguage', or 'FullLanguage'\r\nLanguageMode = 'FullLanguage'\r\n\r\n# Session type defaults to apply for this session configuration. Can be 'RestrictedRemoteServer' (recommended), 'Empty', or 'Default'\r\nSessionType = 'RestrictedRemoteServer'\r\n\r\n# Cmdlets to make visible when applied to a session\r\n# VisibleCmdlets = 'Invoke-Cmdlet1', @{ Name = 'Invoke-Cmdlet2'; Parameters = @{ Name = 'Parameter1'; ValidateSet = 'Item1', 'Item2' }, @{ Name = 'Parameter2'; ValidatePattern = 'L*' } }\r\nVisibleCmdlets = 'Get-Process'\r\n\r\n# Functions to make visible when applied to a session\r\n# VisibleFunctions = 'Invoke-Function1', @{ Name = 'Invoke-Function2'; Parameters = @{ Name = 'Parameter1'; ValidateSet = 'Item1', 'Item2' }, @{ Name = 'Parameter2'; ValidatePattern = 'L*' } }\r\n\r\n# External commands (scripts and applications) to make visible when applied to a session\r\n# VisibleExternalCommands = 'Item1', 'Item2'\r\n\r\n# Providers to make visible when applied to a session\r\nVisibleProviders = '*'\r\n\r\n}\r\n```\r\nThe `SessionType = 'RestrictedRemoteServer'` creates a runspace with everything hidden except for 5 basic cmdlets such as Get-Command, Out-Default, Format-Table, etc.  Then you have to selectively add what you want to expose in the runspace.  I have added a single 'Get-Process' command, but also allow all providers (file, registry, etc.).\r\nYou can then create a PowerShell object to invoke commands on (the runspace is created implicitly) as follows (I am using PowerShell here in this example to call the APIs here):\r\n```powershell\r\n$iss = [initialsessionstate]::CreateFromSessionConfigurationFile('C:\\testGP.pssc')\r\n$ps = [powershell]::Create($iss)\r\n$ps.AddCommand('Get-Process').AddParameter('Name', @('pwsh','powershell'))\r\n$ps.Invoke()\r\nNPM(K)    PM(M)      WS(M)     CPU(s)      Id  SI ProcessName\r\n ------    -----      -----     ------      --  -- -----------\r\n     35    70.31      89.36     103.80    7124   1 powershell\r\n     27    74.00      85.36      80.77   14796   1 powershell\r\n     32   105.64     125.87      92.20   17320   1 powershell\r\n    108   146.61     184.38      15.75   20568   1 pwsh\r\n\r\n$ps.Commands.Clear()\r\n$ps.AddCommand('Get-Service').Invoke()\r\nException calling \"Invoke\" with \"0\" argument(s): \"The term 'Get-Service' is not recognized as the name of a cmdlet, function, script file, or operable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\"\r\nAt line:1 char:1\r\n+ $ps.AddCommand('Get-Service').Invoke()\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\r\n+ FullyQualifiedErrorId : CommandNotFoundException\r\n```",
      "created_at": "2018-10-17T18:00:16Z",
      "updated_at": "2018-10-17T18:00:16Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "To see what commands you have available in your sand boxed runspace/powershell you can run the Get-Command command:\r\n```powershell\r\n$ps.Commands.Clear()\r\n$ps.AddCommand('Get-Command').Invoke()\r\n\r\nCommandType     Name                                               Version    Source\r\n-----------     ----                                               -------    ------\r\nFunction        Clear-Host\r\nFunction        Exit-PSSession\r\nFunction        Get-Command\r\nFunction        Get-FormatData\r\nFunction        Get-Help\r\nFunction        Measure-Object\r\nFunction        Out-Default\r\nFunction        Select-Object\r\nCmdlet          Get-Process                                        6.1.0.0    Microsoft.PowerShell.Management\r\n```",
      "created_at": "2018-10-17T18:03:00Z",
      "updated_at": "2018-10-17T18:03:00Z"
    },
    {
      "author": "grongrilla",
      "author_association": "NONE",
      "body": "Thank you @PaulHigin, it seems using a configuration file is a good workaround! I will try that.\r\n\r\nI still feel that this is some oversight. Why is, from my point of view, a \"basic\" command like `GetCommandCommand` not made available through the `System.Management.Automation` ref-Assembly? \r\n\r\n@adityapatwardhan I am using 6.1.0. The link I provided was just how I gut my initial project. \r\n\r\nI will try using the PowerShell Standard package, but... why would I need to do that if I know I am using PowerShell Core and do not need some sort of compatibilty between Windows PowerShell and PowerShell Core",
      "created_at": "2018-10-18T06:29:23Z",
      "updated_at": "2018-10-18T06:29:23Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "I think @daxian-dbw  can help answer the type availability question.  Unfortunately he is OOF this week but hopefully can contribute next week.",
      "created_at": "2018-10-18T15:59:51Z",
      "updated_at": "2018-10-18T15:59:51Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@bergersn The SDK package only has the reference assembly for System.Management.Automation.dll. By adding the PowerShellStandard.Library package, you should be able to get the type `GetProcessCommand' at compile time. This would prove my hypothesis about the compile time dependency. \r\n\r\nIf adding PowerShellStandard.Library package works for you, that can be used as a workaround. We might have to add reference assemblies of all DLLs to the SDK package as a real solution.",
      "created_at": "2018-10-18T17:41:46Z",
      "updated_at": "2018-10-18T17:41:46Z"
    },
    {
      "author": "grongrilla",
      "author_association": "NONE",
      "body": "Thanks again to @PaulHigin @adityapatwardhan !\r\n\r\nI wasn't able to try PowerShellStandard.Library. I am behind a very restrictive nuget proxy and I can't download the nuget package :( I'll try to get it some other way and report back :)\r\n\r\nI'd be really interested in @daxian-dbw take on this :) I'd keep the issue open until then",
      "created_at": "2018-10-19T06:45:15Z",
      "updated_at": "2018-10-19T06:45:15Z"
    },
    {
      "author": "grongrilla",
      "author_association": "NONE",
      "body": "@adityapatwardhan\r\n`System.Management.Automation.dll` from PowerShellStandard.Library nuget package also does not expose `GetProcessCommand`, `WriteHostCommand`, `OutFileCommand`...",
      "created_at": "2018-10-19T09:10:56Z",
      "updated_at": "2018-10-19T09:10:56Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "cc @JamesWTruher ",
      "created_at": "2018-10-19T09:16:51Z",
      "updated_at": "2018-10-19T09:16:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Is the issue still actual in 7.0 milestone or we can close?",
      "created_at": "2020-01-30T12:51:42Z",
      "updated_at": "2020-01-30T12:51:42Z"
    }
  ],
  "created_at": "2018-10-16T13:54:07Z",
  "labels": [
    "Issue-Question",
    "WG-DevEx-SDK"
  ],
  "number": 8046,
  "state": "closed",
  "title": "GetProcessCommand not available when trying to Host Powershell Core",
  "updated_at": "2020-05-07T16:37:34Z"
}