{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5269",
  "author": "LaurentDardenne",
  "body": "\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n$Path='C:\\temp'\r\n#remove-item \"$Path\\TestPS\"  -recurse\r\nmd \"$Path\\TestPS\"\r\nget-childitem -path \"$Path\\TestPS\\F*.txt\" -File -Recurse #OK no file\r\n\r\nmd \"$Path\\TestPS\\D1\"\r\nget-childitem -path \"$Path\\TestPS\" -Directory -Recurse #Ok one directory\r\nget-childitem -path \"$Path\\TestPS\\*\" -Directory -Recurse #NOK no result\r\n\r\n\"Test\" > \"$Path\\TestPS\\D1\\File1.txt\"\r\nget-childitem -path \"$Path\\TestPS\\F*.txt\" -File -Recurse #OK one file\r\nget-childitem -path \"$Path\\TestPS\" -File -Recurse #OK one file\r\n\r\nget-childitem -path \"$Path\\TestPS\\*\" -File -Recurse #NOK no result\r\n\r\n#Add a file into the 'root' of the search \r\n\"Test\" > \"$Path\\TestPS\\File2.txt\"\r\nget-childitem -path \"$Path\\TestPS\\*\" -File -Recurse #OK two files !!! Different !!!\r\nget-childitem -path \"$Path\\TestPS\\*\" -Directory -Recurse #OK one directory !!! Different !!! \r\n\r\n\r\nremove-item \"$Path\\TestPS\\File2.txt\"\r\n#The 'root' of the search is empty \r\nget-childitem -path \"$Path\\TestPS\\*\" -File -Recurse #NOK no result\r\nget-childitem -path \"$Path\\TestPS\\*\" -Directory -Recurse #NOK no result\r\n\r\n#original path\r\n#Get-ChildItem -Path 'C:\\Users\\laurent\\AppData\\Local\\Mozilla\\Firefox\\Profiles\\*.default*' -File -Rec\r\n\r\n#it works\r\n#Get-ChildItem -Path 'C:\\Users\\laurent\\AppData\\Local\\Mozilla\\Firefox\\Profiles\\*.default*' -Rec|Where-Object {-not $_.PSIsContainer}\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nThe following calls must return existing files or directories :\r\n```Powershell\r\nget-childitem -path 'C:\\Temp\\TestPS\\*\" -File -Recurse\r\nget-childitem -path 'C:\\Temp\\TestPS\\*\" -Directoyr -Recurse\r\n```\r\n\r\nActual behavior\r\n---------------\r\nWhen the 'root' of the search ('C:\\Temp\\TestPS') is empty, the search do not return all entries :\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-beta.9\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-beta.9\r\nOS                             Microsoft Windows 6.1.7601 S\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0, 5.0, 5.1.10032.0, 6.0.0}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```\r\nSame problem with For Windows PowerShell v 5.1.14409.1012 :\r\n```powershell\r\n> $PSVersionTable \r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.14409.1012\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0, 5.0, 5.1.14409.1012}\r\nBuildVersion                   10.0.14409.1012\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```",
  "closed_at": "2018-02-08T00:30:15Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "It seems that the behavior is that if you have a wildcard, then the recursion is applied to the results of that wildcard expansion.  Assume a folder structure like:\r\n\r\n```none\r\ntestPS\r\n  d1\r\n    d2\r\n```\r\n\r\n`gci testPS\\*` returns `d1` as expected\r\nnow, if you use `gci testPS\\* -recurse`, the `-recurse` is applied to `d1`, not `testPS` due to the wildcard and `d2` is returned.\r\n\r\nI agree that the behavior may not seem intuitive, but it does seem (somewhat) logical.  I'd be concerned that a change here would not be a breaking change worth making.  Perhaps we should just update the documentation?",
      "created_at": "2017-10-31T19:33:50Z",
      "updated_at": "2017-10-31T19:33:50Z"
    },
    {
      "author": "LaurentDardenne",
      "author_association": "NONE",
      "body": ">>Perhaps we should just update the documentation?\r\n\r\nYes.\r\n\r\n1) According to the help file 'about_Wildcards' :\r\n```\r\n\r\n  Wildcard Description        Example  Match             No match\r\n  -------- ------------------ -------- ----------------- --------\r\n  *        Matches zero or    a*       A, ag, Apple      banana\r\n           more characters\r\n```\r\nAre these statements equivalent (with my first exemple) ?\r\n```Powershell\r\n$Path='C:\\temp'\r\nget-childitem -path \"$Path\\TestPS\\*\" -Recurse \r\nget-childitem -path \"$Path\\TestPS\" -Recurse \r\n```\r\n\r\n2) According to the help file 'FileSytem' (DYNAMIC PARAMETERS) :\r\n```\r\n   -File <System.Management.Automation.SwitchParameter>\r\n       Gets files.\r\n\r\n       The File parameter was introduced in Windows PowerShell 3.0.\r\n\r\n       To get only files, use the File parameter and omit the Directory parameter. To exclude files, use the\r\n       Directory parameter and omit the File parameter, or use the Attributes parameter.\r\n\r\n```\r\nAre these statements equivalent (with my first exemple) ?\r\n```Powershell\r\n$Path='C:\\temp'\r\nget-childitem -path \"$Path\\TestPS\\*\" -File  -Recurse \r\nget-childitem -path \"$Path\\TestPS\\*\"  -Recurse |Where {-not $_.PSisContainer} \r\n```\r\nIf for this last example these statements are equivalent, in my case the resultat is different.",
      "created_at": "2017-11-02T10:28:02Z",
      "updated_at": "2017-11-02T10:28:02Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I missed the details about `File` and agree that it's broken.",
      "created_at": "2017-11-03T06:17:28Z",
      "updated_at": "2017-11-03T06:17:28Z"
    },
    {
      "author": "LaurentDardenne",
      "author_association": "NONE",
      "body": "@SteveL-MSFT this fix do not should be backported to Windows PowerShell 5.1 ?\r\n",
      "created_at": "2018-02-08T18:33:41Z",
      "updated_at": "2018-02-08T18:34:14Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@LaurentDardenne the concern would be that this is a breaking change so at this time not considered to be ported to 5.1",
      "created_at": "2018-02-08T18:37:06Z",
      "updated_at": "2018-02-08T18:37:06Z"
    },
    {
      "author": "LaurentDardenne",
      "author_association": "NONE",
      "body": "OK, thanks.\r\nHow to find the list of these bugs / difference ?\r\nCan the addition of a label be considered here or should we duplicate this issue on Uservoice?",
      "created_at": "2018-02-09T17:57:55Z",
      "updated_at": "2018-02-09T17:57:55Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@LaurentDardenne the label indicates we're considering backporting it to Windows PowerShell 5.1.  At the time of actual port, we'll determine if it's too risky to port due to risk of regression (since the PSCore6 code base has now deviated quite a bit from the Windows PowerShell code base).  Perhaps I'll create a new label `Ported-WindowsPowerShell51` to indicate PRs that have been ported.",
      "created_at": "2018-02-09T21:11:48Z",
      "updated_at": "2018-02-09T21:11:48Z"
    },
    {
      "author": "LaurentDardenne",
      "author_association": "NONE",
      "body": "@SteveL-MSFT \r\nThere is the label '_Breaking-Chang_e' which is very useful when porting code v5.n to v6.n\r\nA '_Ported-WindowsPowerShell51_' label can be useful information.\r\n\r\nThis fix does not have the 'Breaking-Change' label, but in the case of a 6.n code port, (based on this corrected behavior) to-> 5.n, how do I find these cases?\r\nA '_NotPorted-WindowsPowerShell51_' label ? :-)\r\nOr a note inside the Changelog.md file ?\r\n\r\nIt is information intended for the users and not for the monitoring of the project.",
      "created_at": "2018-02-10T08:48:53Z",
      "updated_at": "2018-02-10T08:48:53Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@LaurentDardenne this issue should have had the `Breaking-Change` label, was just missed.  We usually have the `Breaking changes` at the top of the ChangeLog.  We have a work item to have better documentation on porting scripts/modules from 5.1 to 6.",
      "created_at": "2018-02-12T18:23:58Z",
      "updated_at": "2018-02-12T18:23:58Z"
    }
  ],
  "created_at": "2017-10-29T09:34:02Z",
  "labels": [
    "Issue-Question",
    "Resolution-Fixed",
    "Breaking-Change",
    "WG-Engine-Providers"
  ],
  "number": 5269,
  "state": "closed",
  "title": "Strange behavior with Get-ChildItem",
  "updated_at": "2018-02-12T18:23:58Z"
}