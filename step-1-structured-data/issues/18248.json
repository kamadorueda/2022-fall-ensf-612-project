{
  "_url": "https://github.com/PowerShell/PowerShell/issues/18248",
  "author": "User1785604260",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nI have a thread safe class method (it's static and empty) that is hanging when called inside of a ```System.Lazy``` initializer inside of a ```System.Collections.Concurrent.ConcurrentDictionary``` when used with ```ForEach-Object -Parallel```. Calling a normal dotnet method works fine (e.g. ```[System.Convert]::ToString(132456, 2)```), but my ```[Dead]::Lock()``` method call hangs.\r\n\r\nThis is as far as I was able to strip my repro code down while still causing the hang:\r\n````Powershell\r\n#Requires -Version 7\r\n\r\nWrite-Host \"Starting job`n\"\r\n\r\n$dict = [System.Collections.Concurrent.ConcurrentDictionary[string, System.Lazy[string]]]::new()\r\n\r\n$job = 1..16 | ForEach-Object -AsJob -ThrottleLimit 16 -Parallel {\r\n    $threadNum = $_\r\n    $dict = $using:dict\r\n\r\n    class Dead {\r\n        # This method should be thread safe(?)\r\n        static [void] Lock() {\r\n        }\r\n    }\r\n\r\n    [System.Console]::WriteLine(\"Starting thread #$threadNum\")\r\n\r\n    $lazy = $dict.GetOrAdd(\"same key\", [System.Lazy[string]]::new(\r\n        {\r\n            # Calling this method causes the script to hang, even though it should(?) be thread safe\r\n            [Dead]::Lock()\r\n\r\n            $okToCall = [System.Convert]::ToString(132456, 2)\r\n            return \"\"\r\n        },\r\n        [System.Threading.LazyThreadSafetyMode]::ExecutionAndPublication))\r\n\r\n    [void]$lazy.Value\r\n\r\n    [System.Console]::WriteLine(\"Completed thread #$threadNum\")\r\n}\r\ntry {\r\n    while (!$job.Finished.WaitOne(1000)) {\r\n        Write-Host \"$(Get-Date): Waiting\"\r\n    }\r\n    $job | Receive-Job\r\n\r\n    Write-Host \"`nFinished job`n\"\r\n} finally {\r\n    $job | Stop-Job\r\n}\r\n````\r\n\r\nNote: you may need to run this a bunch of times to actually see the hang. I'm also running this without my profile to ensure that's not interfering: ```pwsh.exe -NoProfile -File $Home\\OneDrive\\Scripts\\bug.ps1```\r\n\r\nI've had independent verification of the hang from at least one other user.\r\n\r\n### Expected behavior\r\n\r\n```console\r\nPS C:\\> pwsh.exe -NoProfile -File $Home\\OneDrive\\Scripts\\bug.ps1\r\nStarting job\r\n\r\nStarting thread #1\r\nStarting thread #2\r\nStarting thread #3\r\nStarting thread #4\r\nStarting thread #5\r\nStarting thread #6\r\nStarting thread #7\r\nStarting thread #8\r\nStarting thread #9\r\nStarting thread #10\r\nStarting thread #11\r\nStarting thread #12\r\nStarting thread #13\r\nStarting thread #14\r\nStarting thread #15\r\nStarting thread #16\r\nCompleted thread #2\r\nCompleted thread #6\r\nCompleted thread #9\r\nCompleted thread #13\r\nCompleted thread #3\r\nCompleted thread #1\r\nCompleted thread #4\r\nCompleted thread #5\r\nCompleted thread #7\r\nCompleted thread #8\r\nCompleted thread #10\r\nCompleted thread #11\r\nCompleted thread #12\r\nCompleted thread #14\r\nCompleted thread #15\r\nCompleted thread #16\r\n\r\nFinished job\r\n\r\nPS C:\\>\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nPS C:\\> pwsh.exe -NoProfile -File $Home\\OneDrive\\Scripts\\bug.ps1\r\nStarting job\r\n\r\nStarting thread #2\r\nStarting thread #1\r\nStarting thread #3\r\nStarting thread #4\r\nStarting thread #5\r\nStarting thread #6\r\nStarting thread #7\r\nStarting thread #8\r\nStarting thread #9\r\nStarting thread #10\r\nStarting thread #11\r\nStarting thread #12\r\nStarting thread #13\r\nStarting thread #14\r\nStarting thread #15\r\nStarting thread #16\r\n10/10/2022 11:52:52: Waiting\r\n10/10/2022 11:52:53: Waiting\r\n10/10/2022 11:52:54: Waiting\r\n10/10/2022 11:52:55: Waiting\r\n10/10/2022 11:52:56: Waiting\r\n10/10/2022 11:52:57: Waiting\r\n10/10/2022 11:52:58: Waiting\r\n10/10/2022 11:52:59: Waiting\r\n10/10/2022 11:53:00: Waiting\r\n10/10/2022 11:53:01: Waiting\r\n10/10/2022 11:53:02: Waiting\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.6\r\nPSEdition                      Core\r\nGitCommitId                    7.2.6\r\nOS                             Microsoft Windows 10.0.22621\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": "2022-10-10T19:42:44Z",
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Duplicate of #12801\r\n",
      "created_at": "2022-10-10T19:36:38Z",
      "updated_at": "2022-10-10T19:36:38Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "\r\nThis is a known issue (and somewhat by design) for static methods. Very recently a PR was merged [adding a way to strip runspace affinity for a class](https://github.com/PowerShell/PowerShell/pull/18138). Once that makes it to a preview, that will be the recommended way of handling it.\r\n\r\nIn earlier versions you can move to instance methods and use the work around described in https://github.com/PowerShell/PowerShell/issues/3651#issuecomment-306968528",
      "created_at": "2022-10-10T19:36:42Z",
      "updated_at": "2022-10-10T19:36:42Z"
    },
    {
      "author": "User1785604260",
      "author_association": "NONE",
      "body": "Thanks! I don't think I ever would have found that existing issue. :) Looks like I hit the bug just in time for the NoRunspaceAffinity fix too. In my real code I just worked around this for now by copying in the body of the method I'm interested in. I'll stick to that for now as it's a tiny method and the workaround you linked doesn't looks like it's worth it for my case.\r\n\r\nI'll double check my real code is fixed by NoRunspaceAffinity once it's available.",
      "created_at": "2022-10-10T19:42:44Z",
      "updated_at": "2022-10-10T19:42:44Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Thanks! I don't think I ever would have found that existing issue. :)\r\n\r\nOh yeah, you're good, we just mark it for tracking purposes :) We would always much prefer duplicates over issues going unreported \u2764\ufe0f\r\n\r\nEspecially with issues as impossible to search for as this \ud83d\ude01 ",
      "created_at": "2022-10-10T19:55:20Z",
      "updated_at": "2022-10-10T19:55:20Z"
    },
    {
      "author": "User1785604260",
      "author_association": "NONE",
      "body": "~Do you happen to know if ```Start-ThreadJob``` would exhibit this issue? I can't seem to reproduce the issue when using that. Thread jobs actually match what I'm really trying to do better anyway, the only reason I'm not using them currently is because with ```For-EachObject -Parallel``` I have a single job that I can ```.Finished.WaitOne``` on. But that's just a convenience thing. :) If ```Start-ThreadJob``` won't ever do this then I'll just refactor to use that.~\r\n\r\nNevermind. \ud83d\ude0a While I couldn't get ```Start-ThreadJob``` to repro the issue with my stripped down code, it definitely still hangs everything in the real deal.",
      "created_at": "2022-10-11T03:10:44Z",
      "updated_at": "2022-10-11T03:41:08Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "You can avoid the thread-safe issue with `Start-ThreadJob`. This is because `Start-ThreadJob` doesn't directly run a script block, but first convert the script block to a string, and then start a new Runspace to execute the string script, so the class will be redefined in the new Runspace, but it will be a different class per every Runspace created by `Start-ThreadJob` -- that may not be what you expect, and possibly the reason for the hang.",
      "created_at": "2022-10-11T03:43:50Z",
      "updated_at": "2022-10-11T03:43:50Z"
    },
    {
      "author": "User1785604260",
      "author_association": "NONE",
      "body": "Oh, that's weird that it was still hanging for me, I'll have to take another crack at it in the morning. I wonder if it's because in my real code I'm not directly defining the class, but bringing it in via ```. $using:Profile```?\r\n\r\nHaving a separate instance of the class is totally fine for my case, I'm just trying to call a static utility method.\r\n````Powershell\r\nstatic [string] GetFileHash([string]$Path) {\r\ntry {\r\n    $stream = [System.IO.File]::Open($Path, [System.IO.FileMode]::Open, [System.IO.FileAccess]::Read, [System.IO.FileShare]::ReadWrite)\r\n    try {\r\n        return [System.Convert]::ToHexString([System.Security.Cryptography.SHA256]::Create().ComputeHash($stream))\r\n    } finally {\r\n        $stream.Dispose()\r\n    }\r\n} catch { throw }\r\n}\r\n````\r\n\r\nThe only reason I'm not using ```Get-FileHash``` here is because the cmdlet overhead piles up and slows things down when you're looking at tens of thousands of files.",
      "created_at": "2022-10-11T03:47:56Z",
      "updated_at": "2022-10-11T03:48:36Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Oh, referencing via `$using` will get you the same race condition. It's again running the not-thread-safe method in multiple Runspace's.",
      "created_at": "2022-10-11T03:57:09Z",
      "updated_at": "2022-10-11T03:57:09Z"
    },
    {
      "author": "User1785604260",
      "author_association": "NONE",
      "body": "Ahh, kk. Well it was worth a shot anyway. \ud83d\ude0a At least in this case the method I want to use is tiny and just pasting a copy in is perfectly fine.\r\n\r\nI only have one script file left with ```. $using:Profile``` inside of a ```Start-ThreadJob```, but it's calling utility methods that would be way too large to duplicate in place. I seem to be getting away with it there for now though, so I just left a comment and I'll revisit once that new NoRunspaceAffinity attribute is available.",
      "created_at": "2022-10-11T04:03:48Z",
      "updated_at": "2022-10-12T19:41:47Z"
    }
  ],
  "created_at": "2022-10-10T14:53:34Z",
  "number": 18248,
  "state": "closed",
  "title": "Thread safe class method defined in Powershell hangs inside a Lazy inside a ConcurrentDictionary",
  "updated_at": "2022-10-12T19:41:47Z"
}