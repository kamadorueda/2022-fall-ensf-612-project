{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3903",
  "author": "daxian-dbw",
  "body": "Partially fix #3649\r\n\r\nIssue Summary\r\n----------------\r\nThe API `AppDomain.GetAssemblies` is brought back in .NET Core 2.0 which returns the loaded assemblies from the default loader. Therefore it's possible now for powershell to just depend on the default CoreCLR loader without having our own assembly load context getting in the picture. This would greatly simplify the scenario of hosting powershell in applications.\r\n\r\nFix\r\n---\r\nRemove the code that spins up our own assembly load context. Keep the code that registers our `Resolve` method to the default loader's `Resolving` event, so that we can continue to do special assembly resolution as needed (such as the GAC probing logic needed for consuming FullCLR PS modules).\r\n\r\nEssentially, the assembly `Microsoft.PowerShell.CoreCLR.AssemblyLoadContext.dll` is not needed anymore, the remaining code should be moved to S.M.A.dll. However, that will break DSC and other native hosts that are hosting powershell. So this assembly is kept for now.\r\n\r\nCoreFX Fixes needed\r\n-----------------------\r\nhttps://github.com/dotnet/corefx/issues/18989\r\nhttps://github.com/dotnet/corefx/issues/18877\r\nhttps://github.com/dotnet/corefx/issues/18791\r\n\r\nThis PR is not blocked by those CoreFX issues, but it's incomplete until we have the fixes. Those issues have already been addressed, and #3887 will get those fixes for us.\r\nNote that this PR is NOT blocked by #3887.\r\n\r\nFollow-up work\r\n-----------------\r\nThis PR addresses the first task listed in #3649. Three tasks are remaining.",
  "closed_at": "2017-06-06T03:59:30Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Minor update to add back `Microsoft.PowerShell.CoreCLR.AssemblyExtensions.LoadFrom(string assemblyPath)` for the short term. This is because PackageManagement depends on this API and thus removing this API will instantly break PackageManagement.\r\n\r\nSince the `LoadFrom` functionality has been removed from our assembly load context, we just call `Assembly.LoadFrom(string)` in the above API. I also added `ObsoleteAttribute` to this API to prevent new code from using it. @brywang-msft is working on migrating PackageManagement to .NET Core 2.0. Once that work is done, the above API will be permanently removed from PowerShell Core. This is added to the follow-up tasks in the issue.\r\n\r\nI have verified that PackageManagement works with this update.\r\nI also verified that host powershell in an application is the same as in FullCLR after this change.",
      "created_at": "2017-06-06T01:02:32Z",
      "updated_at": "2017-06-06T03:50:01Z"
    }
  ],
  "created_at": "2017-06-01T00:59:33Z",
  "number": 3903,
  "state": "closed",
  "title": "Refactor PowerShell Core to use the default CoreCLR loader instead",
  "updated_at": "2017-06-06T04:00:44Z"
}