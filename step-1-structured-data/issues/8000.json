{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8000",
  "author": "danielniccoli",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nRegister-EngineEvent -SourceIdentifier Powershell.Exiting -Action { Set-Content -Value \"Hello there.\" -Path \"$env:TEMP\\General Kenobi.txt\" }\r\nexit\r\n```\r\n\r\nInstead of exit, the user may also close the Powershell with the x-Button.\r\n\r\nExpected behavior\r\n-----------------\r\nI expect that Powershell executes every command in the `-Action` parameter before it exits. In this case, I expected that a file `General Kenobi.txt` would have been written to `$env:TEMP`.\r\n\r\nActual behavior\r\n---------------\r\n\r\nPowershell does not execute the action in any case. Not when exiting via `exit` command and not when exiting by pressing the x-button of the powershell console window.\r\n\r\nThis not only happens in PS6 but also in PS5.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "This may be related to #6862, perhaps?",
      "created_at": "2018-10-11T18:54:14Z",
      "updated_at": "2018-10-11T18:54:14Z"
    },
    {
      "author": "danielniccoli",
      "author_association": "NONE",
      "body": "Any news on this? I am still experiencing this issue with the current preview.\r\n\r\n```\r\n> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.0-preview.3\r\nPSEdition                      Core\r\nGitCommitId                    6.2.0-preview.3\r\nOS                             Microsoft Windows 10.0.15063\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
      "created_at": "2018-12-11T09:26:37Z",
      "updated_at": "2018-12-11T09:27:05Z"
    },
    {
      "author": "danielniccoli",
      "author_association": "NONE",
      "body": "Oddly enough, the following code works. But only if PS is exited via `exit` command. Closing by pressing the x-button does not trigger the event.\r\n\r\n```powershell\r\nRegister-EngineEvent -SourceIdentifier PowerShell.Exiting -Action {\r\n    \"PowerShell exited at {0}\" -f (Get-Date) | \r\n        Out-File -FilePath \"$env:TEMP\\powershell.log\" -Append\r\n}\r\n```",
      "created_at": "2019-03-14T21:09:02Z",
      "updated_at": "2019-03-14T21:09:50Z"
    },
    {
      "author": "danielniccoli",
      "author_association": "NONE",
      "body": "@vexx32 #6862 was fixed and merged. I just built from source (master) and the issue still exists.",
      "created_at": "2019-03-14T23:06:40Z",
      "updated_at": "2019-03-14T23:06:40Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "There are several factors at play here:\r\n\r\n* The event _never_ kicks in if PowerShell is not in control of its own termination: Thus, closing the window / quitting the terminal emulator will _not_ run the event handler. \r\n\r\n   * This may be a fundamental limitation that is here to stay, but perhaps someone more knowledgeable in this area can tell us.\r\n\r\n* When PowerShell does exit by itself (whether normally or via a script-terminating error generated with `throw`), the handler does run, but attempts to use of much of PowerShell's regular functionality _fail quietly_, which is what you saw:\r\n\r\n   * When your code is run _in-process in a PowerShell session_, it does work for me on `exit`-ing that session.\r\n\r\n   * By contrast, if I run it _via the CLI_ (`pwsh -c ...`) - whether from PowerShell or `cmd.exe` / Bash - it fails (see test command below). What _seems_ to happen (I'm speculating) is that at the time the script block executes, all modules except `Microsoft.PowerShell.Utility` have already been unloaded, and attempts to use their commands fail silently and abort execution of the script block instantly.\r\n     * `Set-Content` is part of module `Microsoft.PowerShell.Management`, and therefore unavailable; if I substitute `Out-File` in your command, which comes with `Microsoft.PowerShell.Utility`, the script block works as expected.\r\n\r\n    * In either invocation scenario you also cannot use `Write-Output` or implicit output to send output to the _display_ (redirection to a file works, though) - only `Write-Host` is effective.\r\n\r\nAt the very least, the documentation needs to be improved to clarify the constraints: I've asked for that in https://github.com/MicrosoftDocs/PowerShell-Docs/issues/4061.\r\n\r\nHere's a test command via the CLI that demonstrates that the handler _is_ invoked, but fails when `Set-Content` is called:\r\n\r\n```powershell\r\n# Call from PowerShell itself or Bash.\r\npwsh -nop -c '$null = Register-EngineEvent -SourceIdentifier Powershell.Exiting -Action { write-host before; try { Set-Content -ErrorAction stop -Value (Get-Date) -Path ~/t.txt } catch { write-host $_.ToString() }; write-host after }'\r\n\r\n# Call from cmd.exe.\r\npwsh -nop -c \"$null = Register-EngineEvent -SourceIdentifier Powershell.Exiting -Action { write-host before; try { Set-Content -ErrorAction stop -Value (Get-Date) -Path ~/t.txt } catch { write-host $_.ToString() }; write-host after }\"\r\n```\r\n\r\nThe above yields:\r\n\r\n```none\r\nbefore\r\nThe 'Set-Content' command was found in the module 'Microsoft.PowerShell.Management', but the module could not be loaded. For more information, run 'Import-Module Microsoft.PowerShell.Management'.\r\nafter\r\n```",
      "created_at": "2019-03-26T22:21:01Z",
      "updated_at": "2019-04-05T20:21:31Z"
    },
    {
      "author": "danielniccoli",
      "author_association": "NONE",
      "body": "@mklement0 Michael, thanks for addressing this. Your explanations make sense. I'm not sure what to do with this issue, though.\r\n\r\nOn one hand, this is actually by design and I probably should close my ticket.\r\n\r\nOn the other hand, the design should be improved in my opinion. The exiting Register-EngineEvent should be fired before anything is unloaded. The PowerShell would greatly benefit from that. The use-case where I actually found out about this event was to disconnect from all open Office 365 sessions when you forgot to explicitly disconnect before closing the Window. So you don't end up being locked out until the stale sessions expire. Which doesn't work when the modules are already unloaded when the event fires. \r\n\r\nAnother improvement would be to pass the close-event from the window to the Powershell, so it fires when you close by ALT-F4 or pressing the X. Most PowerShell users are using it on Windows and not on Linux, where you would actually have to run the `exit` command explicitly. Should I open another issue for that, or is it better to discuss this here? The context is already there.",
      "created_at": "2019-04-05T20:15:20Z",
      "updated_at": "2019-04-05T20:42:42Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "All good points, @Borkason. \r\n\r\nI suggest we get started _here_ by asking for feedback from a subject-matter expert about the original design intent, what could be improved, and what cannot be changed for technical reasons.\r\n\r\n@SteveL-MSFT, can you help?\r\n",
      "created_at": "2019-04-05T20:32:45Z",
      "updated_at": "2019-04-05T20:32:45Z"
    },
    {
      "author": "fakcan",
      "author_association": "NONE",
      "body": "I'm having the same issue, and looking forward to see any progress on enhancement.",
      "created_at": "2019-04-19T08:24:50Z",
      "updated_at": "2019-04-19T08:24:50Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "The Win32 Console api supports notifying a console application that it is closing and PowerShell is supposed to receive that notifcation [here](https://github.com/PowerShell/PowerShell/blob/1c4d88cb64b879eb3dc2e76755e7bb017159874d/src/Microsoft.PowerShell.ConsoleHost/host/msh/ConsoleHost.cs#L337).\r\n\r\nI know this mechanism works because `PSReadLine` uses it to avoid a ~6s delay when you click the X to exit.  It's possible `PSReadLine` is getting in the way of PowerShell receiving the notification and hence not firing the event - so I'd test without PSReadLine loaded.",
      "created_at": "2019-04-19T17:20:27Z",
      "updated_at": "2019-04-19T17:20:27Z"
    },
    {
      "author": "alexbuzzbee",
      "author_association": "NONE",
      "body": "I tested with `Register-EngineEvent -SourceIdentifier PowerShell.Exiting -Action {Set-Content $env:TEMP/test.txt \"PowerShell died.\"}` (deleting the file when it appeared) in PowerShell `5.1.18362.145` and PowerShell `6.2.1` on Windows and a variety of exit types, and I put together a table to summarize the results.\r\n\r\nVersion|`exit`|End of `-Command`|`throw 'fatal'` (via `-Command`)|Close button\r\n-|-|-|-|-\r\n5.1|**Works**|**Works**|**Works**|Broken\r\n6.2.1|Broken|Broken|Broken|Broken\r\n\r\n`Remove-Module PSReadLine` seemed to have no effect.",
      "created_at": "2019-07-17T17:10:45Z",
      "updated_at": "2019-07-25T00:09:15Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I tried this (explicit `exit` command) on Windows and macOS and both the exit event triggers the scriptblock and the file is created.  Used 6.2.1 and 7-Preview.2.",
      "created_at": "2019-07-24T17:02:06Z",
      "updated_at": "2019-07-24T17:02:06Z"
    },
    {
      "author": "alexbuzzbee",
      "author_association": "NONE",
      "body": "That's strange. What code did you use? Edited my previous comment to note that it was only on Windows.",
      "created_at": "2019-07-25T00:10:26Z",
      "updated_at": "2019-07-25T00:10:26Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I used your example above: Register-EngineEvent -SourceIdentifier PowerShell.Exiting -Action {Set-Content $env:TEMP/test.txt \"PowerShell died.\"}\r\n\r\nI only checked with explicit `exit`, but the file was created with that content consistently.",
      "created_at": "2019-07-25T00:42:44Z",
      "updated_at": "2019-07-25T00:42:44Z"
    },
    {
      "author": "danielniccoli",
      "author_association": "NONE",
      "body": "I can confirm that with PowerShell 7-Preview.2 the issue is fixed, when using `exit`.  \r\n\u26a0\ufe0f But not when using the close button.\r\n\r\nI even tried a command that takes considerably more time.\r\n\r\n```PowerShell\r\nRegister-EngineEvent -SourceIdentifier Powershell.Exiting -Action { Set-Content -Value (get-module -ListAvailable -All) -Path \"$env:TEMP\\General Kenobi.txt\" }\r\nexit\r\n```\r\n\r\n",
      "created_at": "2019-07-31T15:52:37Z",
      "updated_at": "2019-07-31T15:52:37Z"
    },
    {
      "author": "danielniccoli",
      "author_association": "NONE",
      "body": "@SteveL-MSFT any update on this? It would be great if we would see this working when PowerShell 7 is released. This would be a great benefit for automatically gracefully terminating any forgotten open PSSession before the window is closed. Especially helpful when working with Exchange Online or other Office 365 services that block you out if you forgot to close the sessions.\r\n\r\nPs, happy belated birthday to this issue! \ud83c\udf82 \ud83c\udf81 ",
      "created_at": "2019-10-15T20:24:19Z",
      "updated_at": "2019-10-15T20:53:38Z"
    },
    {
      "author": "danielniccoli",
      "author_association": "NONE",
      "body": "I also just noticed that this is labeled as a discussion, but shouldn't it be a bug if the Exiting event does not trigger when closing the PowerShell with the X button?",
      "created_at": "2019-10-15T20:57:17Z",
      "updated_at": "2019-10-15T20:57:17Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "Looks like a bug to me; the code that is supposed to handle this scenario is there but it is not working.\r\nFor console `close button` scenario - in debugger i see that `ConsoleBreakSignal.Close` event is received by `ConsoleHost`, but (unlike `exit` scenario) the action in `EventManager` is not invoked. This needs more investigation.\r\n`PSReadLine` does not seem to have any effect; I've tried the scenario with and without it - result is the same for `close button` scenario.",
      "created_at": "2019-10-15T21:26:52Z",
      "updated_at": "2019-10-15T21:26:52Z"
    },
    {
      "author": "isxaker",
      "author_association": "NONE",
      "body": "Any updates so far ?",
      "created_at": "2020-05-25T14:29:50Z",
      "updated_at": "2020-05-25T14:29:50Z"
    },
    {
      "author": "Firetop",
      "author_association": "NONE",
      "body": "Just an FYI. Subbing to this thread as well. Found this while currently working on a script with the same issue. Compiled to a .exe it works but PowerShell ISE throws exceptions. The app being designed is without GUI and is designed to work in the background as an Tasktray icon. If you right click the Tasktray the icon scripted and select the manual exit from the generated forms submenu, it works. If you open the \"addition info\" prompt from the submenu and close with the X instead of a graceful exit it throws exceptions... Would be nice if we could handle the closure event with the X.",
      "created_at": "2022-02-11T05:09:50Z",
      "updated_at": "2022-02-11T08:15:06Z"
    },
    {
      "author": "shuffle2",
      "author_association": "NONE",
      "body": "In my scenario, I tried to use `Powershell.Exiting` in a script which gets called by Task Scheduler. I discovered that powershell does not invoke the `Action` if Task Scheduler kills the task (for example, because it ran too long).",
      "created_at": "2022-03-15T06:08:12Z",
      "updated_at": "2022-03-15T06:08:12Z"
    }
  ],
  "created_at": "2018-10-11T18:48:55Z",
  "number": 8000,
  "state": "open",
  "title": "Register-EngineEvent Powershell.Exiting does not work.",
  "updated_at": "2022-03-15T06:08:12Z"
}