{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9097",
  "author": "msftrncs",
  "body": "# Steps to reproduce\r\n\r\n```powershell\r\n#requires-modules psworkflow\r\n#requiresCrazyThings -psed desktop\r\n```\r\n\r\nThe `#Requires` directive doesn't seem to require some kind of separation from its keyword to the next token, but not providing that separation causes an error anyway.\r\n\r\n```none\r\nPS C:\\> #requiresCrazyThings -psed desktop\r\nAt line:1 char:2\r\n+ #requiresCrazyThings -psed desktop\r\n+  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nCannot process the #requires statement because it is not in the correct format.\r\nThe #requires statement must be in one of the following formats:\r\n \"#requires -shellid <shellID>\"\r\n \"#requires -version <major.minor>\"\r\n \"#requires -psedition <edition>\"\r\n \"#requires -pssnapin <psSnapInName> [-version <major.minor>]\"\r\n \"#requires -modules <ModuleSpecification>\"\r\n \"#requires -runasadministrator\"\r\n+ CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException\r\n+ FullyQualifiedErrorId : ScriptRequiresInvalidFormat\r\n\r\nPS C:\\>\r\n```\r\n\r\nI am just not sure this is right.  A inexperienced user could stumble across this by accident thinking he's just entering a comment.   I have seen plenty of reports already of new users who are confused when the editor starts highlighting items in a comment, turning them in as bug reports.",
  "closed_at": null,
  "comments": [
    {
      "author": "kvprasoon",
      "author_association": "CONTRIBUTOR",
      "body": "Isn't the error message helpful ?",
      "created_at": "2019-03-09T14:18:43Z",
      "updated_at": "2019-03-09T14:18:43Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "More fundamentally, the issue is that it is problematic that the syntactic form of a _comment_ was chosen to implement \"preprocessor directives\" (statements evaluated at script/module parse time), which invites confusion.\r\n\r\nI suggest either reframing this issue accordingly or creating a new issue to suggest a distinct syntax form.",
      "created_at": "2019-03-10T22:50:20Z",
      "updated_at": "2019-03-10T22:50:20Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "I just think that `#requires` should be held to the same standard as any other keyword, it must adhere to delimiter standards to be acknowledged.  `#requiresCrazyThings` does not meet the delimiter requires anywhere else in PowerShell for a keyword of `#requires`.  Everywhere else, the token would be `#requiresCrazyThings` and that is not the same as `#requires`.  Because it doesn't match the required special preprocessor directive keyword, the line should be ignored, not produce an error for an 'almost' attempt.\r\n\r\nI do realize that this is a case of error one way or the other, but I think because its based on a comment marker, the error should be in the direction of ignoring anything that isn't exactly right.   Its a comment, and instead let the user figure out why his very badly malformed `#requires` directive isn't working.  If the keyword token has met the standard delimiter and the rest of the syntax is in error, then display an error.\r\n\r\nBackground, I am working on a PR over at PowerShell/EditorSyntax, https://github.com/PowerShell/EditorSyntax/pull/156, and trying to make sure it mostly matches what PowerShell really expects.",
      "created_at": "2019-03-11T02:10:29Z",
      "updated_at": "2019-03-11T02:10:29Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> I do realize that this is a case of error one way or the other, but I think because its based on a comment marker, the error should be in the direction of ignoring anything that isn't exactly right.\r\n\r\nOn purely _technical_ grounds I'd agree: if something isn't a syntactically valid `#requires` directive, it shouldn't be treated as one.\r\n\r\nHowever, falling back to the _other_ construct that shares the `#`-prefixed syntax - a comment - means that what the user _may_ have intended to be a `#requires` directive will be _quietly ignored_.\r\n\r\nMy sense is that this quiet ignoring would be worse than the current behavior, as a script author may not notice that a directive they meant to put in place wasn't.\r\n\r\nIf they _didn't_ mean to create a `#requires` directive and `#requiresCrazyThings` was actually meant to be a comment, then at least the error message will alert them to how their comment is  being interpreted as _something else_ - and working around the problem - should it ever arise - is trivial: simply put a space between `#` and `requires`.\r\n\r\nAs simple as that workaround is - and if we stick with the current behavior the error message should be amended to suggest it - it highlights the fundamental problem:\r\n\r\nComment syntax should never have been overloaded to serve as directive syntax too, and a proper solution requires a distinct syntax form for directives.\r\n",
      "created_at": "2019-03-11T02:31:26Z",
      "updated_at": "2019-03-11T02:31:26Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "In general I tend to lean towards always having a leading space on my comments following the `#` symbol, so I guess I've never run into this as an issue. I agree, though, that using the standard comment syntax as a directive is probably not the best. \r\n\r\nI'm sure it was intended to reflect back on C#'s preprocessor-directive syntax, but that might have been a bad idea.\r\n\r\nNot sure if it can really be changed now, though? I guess it wouldn't be the end of the world, as changing it would essentially mean that all current `#Requires` statements are just... comments. I guess it'd be OK?\r\n\r\nNot sure what we could really use instead. Any thoughts on viable alternatives @mklement0? \ud83e\udd14 ",
      "created_at": "2019-03-11T02:57:44Z",
      "updated_at": "2019-03-11T02:57:44Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "The `using` directives already are bona fide statements (though, unlike the `#requires` directives, they must be at the top of the script).\r\n\r\n`using module` even more or less does the same thing as `#requires -module` (the former additionally loads PS classes).\r\n\r\n`using` isn't really the right name for the other `#requires` directives (`using runasadministrator`?), however, so perhaps a separate `requires` keyword is called for.\r\n\r\nI'm pretty sure that an RFC is needed to propose something of that magnitude.\r\n\r\nIn the current situation, my recommendation is to merely amend the error message so that if someone writes `#requiresCrazyThings` or even `#requires time to process` (where `#requires` is technically a valid keyword), they'll see something along the lines of \"If you meant to write a comment instead, put a space between '#' and the word 'requires'\" after the current message.",
      "created_at": "2019-03-11T04:49:08Z",
      "updated_at": "2019-03-11T04:49:08Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "A couple thoughts:\r\n- The reasoning for using a comment for a directive was probably because of the low usage of the keyword.  In most languages, a keyword must be reserved in its entirety, and in this case, to only one purpose.  Using a comment marker eliminates that need to reserve the word from any other use.\r\n- A second reason, is that, new concepts can be added without breaking backwards compatibility when they serve minor value.  Not saying that's what is going on here, but another valid reason they exist.  Thinking of it that way, comment based directives should really only be considered minor, which is not really what `requires` does, except that if the `requires` directive is skipped, eventually an error will occur.   Its just that by then, the damage might already have been done.  A properly written program would have damage control.  In this case, `requires` could be just a easy way out of writing damage control.\r\n- My main concern, is that there is a lack of a requirement for a delimiter between the keyword and its arguments, and further agitated that the example of a seemingly valid construct for an argument is not accepted without a delimiter, when in fact one is not required for the keyword itself. ie `#requires-modules psworkflow` still returns an error, while anywhere else in PowerShell, the token would been decoded as  `requires-modules` and that wouldn't match `requires`.  I unfortunately do not have enough experience with other languages that do this (commented directives) to know how they behave, but the behavior seems odd.\r\n- `using`s requirement to be the first line(s) is solution to the reservation of a keyword, albeit with its own restrictions.  `using namespace` could just as well as been a comment directive, as its not critical (it just makes the writer type longer name spaces).\r\n\r\nIn actuality, most of the work of `using` or `#requires` can be accomplished directly in the scripting language, where more specific error messages could be crafted, or even the issue worked around, maybe with the exception of importing classes from a module.\r\n\r\nI can implement the current syntax in the tmlanguage grammar, it will just be the odd one out, in all the rules, and is why I bring this up.  I think its better to have a good understanding of the grammar than to just assume it works a certain way, hence my investigation in to it in the first place.",
      "created_at": "2019-03-11T06:20:02Z",
      "updated_at": "2019-03-11T06:20:02Z"
    }
  ],
  "created_at": "2019-03-09T03:00:13Z",
  "labels": [
    "Issue-Question",
    "WG-Engine"
  ],
  "number": 9097,
  "state": "open",
  "title": "#Requires doesn't require separation",
  "updated_at": "2021-01-15T08:45:59Z"
}