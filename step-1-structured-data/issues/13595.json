{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13595",
  "author": "chrisfcarroll",
  "body": "## Steps to reproduce & Expected results & Actual results\r\n\r\n```powershell\r\n(ConvertFrom-Json \"[]\") -eq @()\r\n#return False should return True\r\n\r\n(ConvertFrom-Json \"[]\") -eq $null\r\n# => returns True, should return False\r\n```\r\n\r\n_Comment_\r\n`ConvertFrom-Json` on Windows `PSVersion = 5.1.18362.752` returns the correct value\r\n\r\n## Environment data\r\n\r\n```none\r\n$PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.0-preview.6\r\nPSEdition                      Core\r\nGitCommitId                    7.1.0-preview.6\r\nOS                             Darwin 19.6.0 Darwin Kernel Version 19.6.0: Thu Jun 18 20:49:00 PDT 2020; root:xnu-6153.14\u2026\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
  "closed_at": "2020-09-08T19:40:07Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "/cc @iSazonov \r\n\r\nThis is probably down to Newtonsoft.Json's handling of this input, I'd imagine... \ud83e\udd14 ",
      "created_at": "2020-09-08T16:03:04Z",
      "updated_at": "2020-09-08T16:03:04Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "The `ConvertFrom-Json` default behavior was changed in v7 to exhibit the typical PowerShell behavior of _enumerating_ arrays in the pipeline; thus, an empty array sends _nothing_ through the pipeline (see #3424).\r\n\r\nIf you want to preserve a parsed-from-JSON array, use the `-NoEnumerate` switch:\r\n\r\n```powershell\r\n# Output is, loosely speaking, $null\r\n# (technically,  [System.Management.Automation.Internal.AutomationNull]::Value)\r\nPS> (ConvertFrom-Json \"[]\") -is [array]  \r\nFalse\r\n\r\n# -NoEnumerate sends the (empty) array as-is, as whole to the pipeline.\r\nPS> (ConvertFrom-Json \"[]\" -NoEnumerate) -is [array]\r\nTrue\r\n```\r\n\r\n",
      "created_at": "2020-09-08T19:00:21Z",
      "updated_at": "2020-09-08T19:00:21Z"
    },
    {
      "author": "chrisfcarroll",
      "author_association": "NONE",
      "body": "@mklement0  -- I see your point. If I use `-NoEnumerate` that also resolves the unexpected unboxing of e.g. `[\"singleton\"]`.\r\n\r\nHmm. okay. So this is by design because returning `$null` rather than empty `@()` is the idiomatic thing for empty lists in powershell?",
      "created_at": "2020-09-08T19:11:08Z",
      "updated_at": "2020-09-08T19:11:08Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Technically it's `[System.Management.Automation.Internal.AutomationNull]::Value` but yeah PowerShell will (almost) always treat that the same as `$null` (@mklement0 has a list of issues somewhere about the cases it does not \ud83d\ude02); it's the \"nothing\" value in a sense.\r\n",
      "created_at": "2020-09-08T19:15:35Z",
      "updated_at": "2020-09-08T19:15:35Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@chrisfcarroll, to add to @vexx32's comment:\r\n\r\n>  also resolves the unexpected unboxing of e.g. [\"singleton\"].\r\n\r\nIndeed (I assume you mean unwrapping rather than unboxing). \r\nIt is the same behavior you get with `Write-Output -NoEnumerate`, for instance: instead of the default pipeline behavior of _enumerating_ collections - sending their  elements one by one - `-NoEnumerate` requests sending the collection _as a whole, as a single object_.\r\n\r\nSending an _empty_ collection to the pipeline therefore sends _nothing_, which you can verify with \r\n`@() | ForEach-Object { \"hi\" }` (no output).\r\n\r\n_Saving_ non-output from a command is technically represented as `[System.Management.Automation.Internal.AutomationNull]::Value`, as @vexx32 states. While this value _typically_ behaves like `$null`, it behaves differently _in the pipeline_ (cf. `$null | ForEach-Object { 'hi' }`, which _does_ produce output) and in other _enumeration_ contexts; #13465 is trying to make this difference more discoverable.\r\n\r\n---\r\n\r\nAlso: `-eq @()` doesn't work as you might expect, because with an array LHS `-eq` acts as a filter that returns _matching LHS elements_ rather than a Boolean, whereas an array-valued RHS is always _stringified_:\r\n\r\n```powershell\r\nPS> @() -eq @()  # RHS is effectively treated as '' (empty string).\r\n # !! No visible output; but the output is actually again @() (empty array)\r\n```\r\n\r\nThat is, no elements in the empty-array LHS was equal to `''`, so the result is an empty array (the sub-array of matching LHS elements).\r\n\r\nTo test an array for being empty, the simplest test is `.Count -eq 0`, but note that you may have to separately test if the operands is indeed an array (if that distinction is important), because `$null.Count` and `'foo'.Count` work too (caveat: only if `Set-StrictMode` is off or at most `-Version 1` - see #2798), and return `0` and `1`, respectively.\r\n\r\n",
      "created_at": "2020-09-08T19:24:46Z",
      "updated_at": "2020-09-08T19:25:33Z"
    },
    {
      "author": "chrisfcarroll",
      "author_association": "NONE",
      "body": "Having read #3424 I can see that keeping this open as a bug would be 2\u00bd years you don't want to rewind \u2026\r\n\r\n",
      "created_at": "2020-09-08T19:40:07Z",
      "updated_at": "2020-09-08T19:40:07Z"
    },
    {
      "author": "ElvenSpellmaker",
      "author_association": "NONE",
      "body": "This is the most unexpected behaviour I think I've seen so far in Powershell...\r\n\r\nWhen converting from an empty array you'd always expect an empty array... \ud83e\udd14 ",
      "created_at": "2021-03-28T20:51:32Z",
      "updated_at": "2021-03-28T20:51:32Z"
    }
  ],
  "created_at": "2020-09-08T15:34:23Z",
  "number": 13595,
  "state": "closed",
  "title": "ConvertFrom-Json \"[]\" incorrectly returns $null instead of an empty array",
  "updated_at": "2021-03-28T20:51:32Z"
}