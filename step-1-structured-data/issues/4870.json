{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4870",
  "author": "chrisfcarroll",
  "body": "Steps to reproduce\r\n------------------\r\n\r\n```powershell\r\n \"OK\" | grep -E \"[^:]\"\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nShould output\r\n```none\r\nOK\r\n```\r\n\r\nActual behavior\r\n---------------\r\nOn macOs outputs an error:\r\n```none\r\nCannot find drive. A drive with the name '[^' does not exist.\r\nAt line:1 char:1\r\n+ \"OK\" |  grep -E '[^:]+'\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : ObjectNotFound: ([^:String) [], DriveNotFoundException\r\n    + FullyQualifiedErrorId : DriveNotFound\r\n\r\n```\r\nOn Windows (with grep) outputs the expected OK.\r\n\r\n\r\nComment\r\n--------------\r\nCompare with \r\n\r\n```powershell\r\n \"OK\" | Tee-Object \"[^:]\"\r\n```\r\non windows which returns the identical error message.\r\n\r\n```powershell\r\n \"OK\" | Select-String -pattern \"[^:]\"\r\n```\r\nworks correctly on both platforms.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value                                                                                   \r\n----                           -----                                                                                   \r\nPSVersion                      6.0.0-beta                                                                              \r\nPSEdition                      Core                                                                                    \r\nGitCommitId                    v6.0.0-beta.7                                                                           \r\nOS                             Darwin 16.7.0 Darwin Kernel Version 16.7.0: Thu Jun 15 17:36:27 PDT 2017; root:xnu-37...\r\nPlatform                       Unix                                                                                    \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                 \r\nPSRemotingProtocolVersion      2.3                                                                                     \r\nSerializationVersion           1.1.0.1                                                                                 \r\nWSManStackVersion              3.0      \r\n```\r\n",
  "closed_at": "2017-09-24T03:04:23Z",
  "comments": [
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "It appears to happen with any string that fits the pattern \r\n\r\n```regex \r\n.+:[^ `]*[*?\\[\\]].*\r\n```\r\n\r\nI can repro this on \r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-beta\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-beta.7\r\nOS                             Linux 4.4.0-93-generic #116-Ubuntu SMP Fri Au...\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nOther examples:\r\n\r\n```powershell\r\n/bin/echo 'a:]'\r\n/bin/echo \"a:]\"\r\n/bin/echo \"a:[\"\r\n/bin/echo \"a:*\"\r\n/bin/echo \"a:?\"\r\n\r\n$string = 'a:]'\r\n/bin/echo $string\r\n/bin/echo \"$string\"\r\n/bin/echo $($string)\r\n/bin/echo ($string)\r\n/bin/echo @($string)\r\n\r\n/bin/echo 'a:llllllll]llll'\r\n/bin/echo 'a:lllllllllllllllll]'\r\n```\r\n\r\nThese all produce the same results.\r\n\r\n```none\r\n$Error[0] | Fl *  -force\r\n\r\nPSMessageDetails      :\r\nException             : System.Management.Automation.DriveNotFoundException: Cannot find drive. A drive with the name 'a' does not exist.\r\n                           at System.Management.Automation.SessionStateInternal.GetDrive(String name, Boolean automount)\r\n                           at System.Management.Automation.SessionStateInternal.AutomountBuiltInDrive(String name)\r\n                           at System.Management.Automation.SessionStateInternal.GetDrive(String name, Boolean automount)\r\n                           at System.Management.Automation.SessionStateInternal.GetDrive(String name)\r\n                           at System.Management.Automation.DriveManagementIntrinsics.Get(String driveName)\r\n                           at System.Management.Automation.LocationGlobber.GetDriveRootRelativePathFromPSPath(String path, CmdletProviderContext context, Boolean\r\n                        escapeCurrentLocation, PSDriveInfo& workingDriveForPath, CmdletProvider& providerInstance)\r\n                           at System.Management.Automation.LocationGlobber.GetProviderPath(String path, CmdletProviderContext context, Boolean isTrusted, ProviderInfo&\r\n                        provider, PSDriveInfo& drive)\r\n                           at System.Management.Automation.LocationGlobber.GetProviderPath(String path, CmdletProviderContext context, ProviderInfo& provider, PSDriveInfo&\r\n                        drive)\r\n                           at System.Management.Automation.LocationGlobber.GetGlobbedProviderPathsFromMonadPath(String path, Boolean allowNonexistingPaths,\r\n                        CmdletProviderContext context, ProviderInfo& provider, CmdletProvider& providerInstance)\r\n                           at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n                           at System.Management.Automation.SessionStateInternal.GetChildItems(String[] paths, Boolean recurse, UInt32 depth, Boolean force, Boolean\r\n                        literalPath)\r\n                           at System.Management.Automation.ChildItemCmdletProviderIntrinsics.Get(String path, Boolean recurse)\r\n                           at System.Management.Automation.NativeCommandParameterBinder.appendOneNativeArgument(ExecutionContext context, Object obj, Char separator, Boolean\r\n                        sawVerbatimArgumentMarker)\r\n                           at System.Management.Automation.NativeCommandParameterBinder.BindParameters(Collection`1 parameters)\r\n                           at System.Management.Automation.NativeCommandParameterBinderController.BindParameters(Collection`1 parameters)\r\n                           at System.Management.Automation.NativeCommandProcessor.Prepare(IDictionary psDefaultParameterValues)\r\n                           at System.Management.Automation.CommandProcessorBase.DoPrepare(IDictionary psDefaultParameterValues)\r\n                           at System.Management.Automation.Internal.PipelineProcessor.Start(Boolean incomingStream)\r\n                           at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n                        --- End of stack trace from previous location where exception was thrown ---\r\n                           at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n                           at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n                           at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal[][] pipeElements,\r\n                        CommandBaseAst[] pipeElementAsts, CommandRedirection[][] commandRedirections, FunctionContext funcContext)\r\n                           at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)\r\n                           at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\nTargetObject          : a\r\nCategoryInfo          : ObjectNotFound: (a:String) [], DriveNotFoundException\r\nFullyQualifiedErrorId : DriveNotFound\r\nErrorDetails          :\r\nInvocationInfo        : System.Management.Automation.InvocationInfo\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\nPipelineIterationInfo : {}\r\n```\r\n\r\nThese all work fine though:\r\n\r\n```powershell\r\n/bin/echo \":]\"\r\n/bin/echo 'a]'\r\n/bin/echo 'a:'\r\n/bin/echo 'a:a'\r\n/bin/echo 'aa]'\r\n/bin/echo 'aa]a'\r\n/bin/echo 'a:aa'\r\nStart-Process -FilePath /bin/echo -ArgumentList 'a:]'\r\n```\r\n\r\nand \r\n\r\n```powershell\r\n/bin/echo 'a:`]'\r\n\r\n```\r\n\r\nPrints\r\n\r\n```none\r\na:`]\r\n```",
      "created_at": "2017-09-20T09:22:55Z",
      "updated_at": "2017-09-20T09:40:28Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "This is caused by #3931 which should be fixed in the next beta.",
      "created_at": "2017-09-20T17:53:52Z",
      "updated_at": "2017-09-20T17:53:52Z"
    }
  ],
  "created_at": "2017-09-19T22:27:08Z",
  "number": 4870,
  "state": "closed",
  "title": "The content of a quoted string is being parsed when it shouldn't be.",
  "updated_at": "2017-09-24T03:04:23Z"
}