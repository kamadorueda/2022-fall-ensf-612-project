{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11488",
  "author": "p0W3RH311",
  "body": "its possible to have a scriptblock to conditionally break script\r\n```\r\n\r\n$ErroractionPreference = {\r\n   # $_ is instance of $error[0]\r\n   if($_.exception -is [ItemNotFoundException] -and $_.Exception.ItemName.Contains('system')) {\r\n      break \r\n   }\r\n}\r\n\r\n\r\n# some code here\r\ngi k:\\system\\foo\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You could use ErrorAction Stop and try-catch.",
      "created_at": "2020-01-04T17:35:18Z",
      "updated_at": "2020-01-04T17:35:18Z"
    },
    {
      "author": "p0W3RH311",
      "author_association": "NONE",
      "body": "yes i know but $erroractionpreference in top of script reduce the case of use try/catch and the effect is global",
      "created_at": "2020-01-04T17:39:48Z",
      "updated_at": "2020-01-04T17:39:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We have RFC https://github.com/PowerShell/PowerShell-RFC/blob/9d0b313c76144e9af7b84294bba470da710810e8/1-Draft/RFCNNNN-ScriptBlock-Action-Preference.md#add--verboseaction--debugaction-and--progressaction-common-parameters\r\n/cc @KirkMunro \n\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/11524380?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell-RFC\">PowerShell/PowerShell-RFC</a></strong></div><div>RFC (Request for Comments) documents for community feedback on design changes and improvements to PowerShell ecosystem - PowerShell/PowerShell-RFC</div></blockquote>",
      "created_at": "2020-01-04T17:53:16Z",
      "updated_at": "2020-01-04T17:53:18Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "You can also use the `trap` statement to install a single error handler for a script:\r\n```\r\n& {\r\n    $ErrorActionPreference = 'Stop'\r\n    trap {\r\n        if ($_.Exception -is [System.Management.Automation.ItemNotFoundException] -and\r\n            $_.Exception.ItemName.Contains('system')) {\r\n            \"Couldn't find item with 'system' in the path\"\r\n            break\r\n        }\r\n        else {\r\n            \"Could not find $($_.Exception.ItemName) but hey, it's OK. Let's keep going.\"\r\n            continue\r\n        }\r\n    }\r\n\r\n    Get-Item k:\\foo\r\n\r\n    Get-Item k:\\system\\foo\r\n}\r\n```",
      "created_at": "2020-01-04T20:37:38Z",
      "updated_at": "2020-01-04T20:41:19Z"
    },
    {
      "author": "p0W3RH311",
      "author_association": "NONE",
      "body": "> \r\n> \r\n> You can also use the `trap` statement to install a single error handler for a script:\r\n> \r\n> ```\r\n> & {\r\n>     $ErrorActionPreference = 'Stop'\r\n>     trap {\r\n>         if ($_.Exception -is [System.Management.Automation.ItemNotFoundException] -and\r\n>             $_.Exception.ItemName.Contains('system')) {\r\n>             \"Couldn't find item with 'system' in the path\"\r\n>             break\r\n>         }\r\n>         else {\r\n>             \"Could not find $($_.Exception.ItemName) but hey, it's OK. Let's keep going.\"\r\n>             continue\r\n>         }\r\n>     }\r\n> \r\n>     Get-Item k:\\foo\r\n> \r\n>     Get-Item k:\\system\\foo\r\n> }\r\n> ```\r\n\r\nbut this code not break in specifik error\r\n\r\n\r\n```\r\nPS > $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-rc.1\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-rc.1\r\nOS                             Microsoft Windows 6.3.9600\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\nPS > cat .\\n.ps1\r\n& {\r\n    $ErrorActionPreference = 'Stop'\r\n    trap {\r\n        if ($_.Exception -is [System.Management.Automation.ItemNotFoundException\r\n] -and\r\n            $_.Exception.ItemName.Contains('system')) {\r\n            \"Couldn't find item with 'system' in the path\"\r\n            break\r\n        }\r\n        else {\r\n            \"Could not find $($_.Exception.ItemName) but hey, it's OK. Let's kee\r\np going.\"\r\n            continue\r\n        }\r\n    }\r\n\r\n    Get-Item k:\\foo\r\n\r\n    Get-Item k:\\system\\foo\r\n}\r\nPS > .\\n.ps1\r\nCould not find k but hey, it's OK. Let's keep going.\r\nCould not find k but hey, it's OK. Let's keep going.\r\nPS >\r\n```",
      "created_at": "2020-01-05T04:17:10Z",
      "updated_at": "2020-01-05T04:17:10Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "You are getting the same error for both because apparently you have no `K` drive.\r\n```\r\nError is Cannot find drive. A drive with the name 'k' does not exist.\r\n```\r\nChange `Get-Item k:\\system\\foo` to `Get-Item c:\\system\\foo` (ditto for k:\\foo) and try again.  With that change to the script I get:\r\n```\r\n12> .\\n.ps1\r\nCould not find k:\\foo but hey, it's OK. Let's keep going.\r\nCouldn't find item with 'system' in the path\r\nGet-Item: C:\\Users\\Keith\\n.ps1\r\nLine |\r\n  17 |     Get-Item c:\\system\\foo\r\n     |     ^ Cannot find path 'C:\\system\\foo' because it does not exist.\r\n```",
      "created_at": "2020-01-09T02:43:54Z",
      "updated_at": "2020-01-09T02:45:44Z"
    }
  ],
  "created_at": "2020-01-04T16:58:12Z",
  "number": 11488,
  "state": "open",
  "title": "$ErroractionPreference with scriptblock",
  "updated_at": "2020-01-09T02:45:44Z"
}