{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17113",
  "author": "MatejKafka",
  "body": "### Exception report\r\n\r\n```console\r\n### Environment\r\nPSReadLine: 2.2.2\r\nPowerShell: 7.3.0-preview.2\r\nOS: Microsoft Windows 10.0.19044\r\nBufferWidth: 208\r\nBufferHeight: 46\r\n\r\nLast 5 Keys:\r\n\r\n UpArrow UpArrow Enter\r\n [ e\r\n\r\n### Exception\r\n\r\nSystem.Management.Automation.PSArgumentException: Cannot process argument because the value of argument \"name\" is not valid. Change the value of the \"name\" argument and run the operation again.\r\n   at System.Management.Automation.Language.TypeName..ctor(IScriptExtent extent, String name)\r\n   at System.Management.Automation.Language.TypeResolver.ResolveTypeNameWithContext(TypeName typeName, Exception& exception, Assembly[] assemblies, TypeResolutionState typeResolutionState)\r\n   at System.Management.Automation.Language.SymbolResolver.VisitTypeName(TypeName typeName, Int32 genericArgumentCount, Boolean isAttribute)\r\n   at System.Management.Automation.Language.SymbolResolver.DispatchTypeName(ITypeName type, Int32 genericArgumentCount, Boolean isAttribute)\r\n   at System.Management.Automation.Language.SymbolResolver.VisitTypeExpression(TypeExpressionAst typeExpressionAst)\r\n   at System.Management.Automation.Language.TypeExpressionAst.InternalVisit(AstVisitor visitor)\r\n   at System.Management.Automation.Language.CommandExpressionAst.InternalVisit(AstVisitor visitor)\r\n   at System.Management.Automation.Language.PipelineAst.InternalVisit(AstVisitor visitor)\r\n   at System.Management.Automation.Language.StatementBlockAst.InternalVisit(AstVisitor visitor, ReadOnlyCollection`1 traps, ReadOnlyCollection`1 statements, AstVisitAction action)\r\n   at System.Management.Automation.Language.NamedBlockAst.InternalVisit(AstVisitor visitor)\r\n   at System.Management.Automation.Language.ScriptBlockAst.InternalVisit(AstVisitor visitor)\r\n   at System.Management.Automation.Language.Ast.Visit(AstVisitor astVisitor)\r\n   at System.Management.Automation.Language.SymbolResolver.ResolveSymbols(Parser parser, ScriptBlockAst scriptBlockAst)\r\n   at System.Management.Automation.Language.ScriptBlockAst.PerformPostParseChecks(Parser parser)\r\n   at System.Management.Automation.Language.Parser.ParseTask(String fileName, String input, List`1 tokenList, Boolean recursed, ParseMode parseMode)\r\n   at System.Management.Automation.Language.Parser.Parse(String fileName, String input, List`1 tokenList, ParseError[]& errors, ParseMode parseMode)\r\n   at System.Management.Automation.Language.Parser.ParseInput(String input, String fileName, Token[]& tokens, ParseError[]& errors)\r\n```\r\n\r\n\r\n### Screenshot\r\n\r\n![image](https://user-images.githubusercontent.com/6414091/161742397-0588ee77-53fc-41b2-b49d-2965ce92325f.png)\r\n\r\n\r\n### Steps to reproduce\r\n\r\n```\r\n$> using namespace [NameSpace]\r\n$> [A ...\r\n```\r\nThe namespace doesn't have to exist, just make up anything. The important part are the brackets around the namespace \u2013 they shouldn't be there, but apparently it is syntactically valid (not sure about semantics) and causes PSReadLine to crash.\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "This is a parsing issue. The specified namespace name is invalid but there is no syntactical error, which results in an invalid argument exception later when resolving a type name.\r\n\r\nIn C#, a legit namespace is `identifier ('.' identifier)*` (see https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/namespaces#133-namespace-declarations), and the identifier is defined in https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/identifier-names#naming-rules\r\n\r\nFor this issue, there are 2 potential fixes:\r\n1. make `using namespace` to error on invalid namespace names\r\n2. make the constructor of `TypeName` to tolerate invalid namespace names\r\n\r\nIt feels to me option 1 is the right one to go with, but it's not trivial to validate if the namespace name is legitimate using the C# identifier definition.",
      "created_at": "2022-04-05T20:34:13Z",
      "updated_at": "2022-04-05T20:36:28Z"
    }
  ],
  "created_at": "2022-04-05T11:14:12Z",
  "labels": [
    "Issue-Bug",
    "WG-Engine"
  ],
  "number": 17113,
  "state": "open",
  "title": "PSReadLine throws an exception when typing a type name after `using namespace [NameSpace]`",
  "updated_at": "2022-05-13T19:08:24Z"
}