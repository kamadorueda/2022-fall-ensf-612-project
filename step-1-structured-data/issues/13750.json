{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13750",
  "author": "SteveL-MSFT",
  "body": "# PR Summary\r\n\r\nChange https://github.com/PowerShell/PowerShell/pull/13481 modified some logic on how console apps are detected.  The problem in this situation is:\r\n\r\n1. user starts `diskmgmt.msc`\r\n2. check if exe, this is not an exe so set `_isWindowsApplication = false`\r\n3. check if associated with an exe\r\n4. finds `mmc.exe`\r\n5. check if exe, this is an exe, so launch this with previous \"command\" as the argument\r\n6. check `_isWindowsApplication` to determine if we block waiting for exe to finish, since this value was cached and not updated on step 5, it treats as console exe and waits\r\n\r\nFix is to change `CheckIfConsoleApplication()` to be non-static so that the second time it's called it updates `_isWindowsApplication` to point to the new exe and not the previous file.\r\n\r\nTested manually.  Since CI won't have a Windows app associated with a file, can't create a test case.\r\n\r\n## PR Context\r\n\r\nFix https://github.com/PowerShell/PowerShell/issues/13744\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-10-07T07:58:25Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT I think we should simply revert a change in line 557\r\nfrom\r\n`_isRunningInBackground = IsWindowsApplication;`\r\nto\r\n`_isRunningInBackground = IsWindowsApplication(_nativeProcess.StartInfo.FileName);`\r\n\r\nAs for test, you could see last test in Invoke-Item.Tests,ps1 file:\r\n`Describe \"Invoke-Item tests on Windows\" -Tags \"CI\",\"RequireAdminOnWindows\" {`\r\n",
      "created_at": "2020-10-06T03:49:14Z",
      "updated_at": "2020-10-06T03:49:14Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov the problem is if anyone updates the code and uses `CheckIfConsoleApplication()` it will have a similar problem as `IsWindowsApplication` doesn't get updated if we just do the change you are suggesting.\r\n\r\nAs for the test, it appears the hang only occurs if the associated process explicitly supports elevation like mmc.exe.  I can add a test that runs if `diskmgmt.msc` and `mmc.exe` are on the system, otherwise it'll be skipped.  At least it can work locally.",
      "created_at": "2020-10-06T13:18:15Z",
      "updated_at": "2020-10-06T13:18:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">  the problem is if anyone updates the code and uses CheckIfConsoleApplication() it will have a similar problem as IsWindowsApplication doesn't get updated if we just do the change you are suggesting.\r\n\r\nMy thoughts is that switching to mmc.exe is temporary and we should follow diskmgmt.msc. Otherwise it will very tricky code - input is diskmgmt.msc but result is for mmc.exe.\r\nAnd I'd remove IsWindowsApplication and IsConsoleApplication because they is used once.",
      "created_at": "2020-10-06T13:34:48Z",
      "updated_at": "2020-10-06T13:34:48Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov but `diskmgmt.msc` is not the process so following it doesn't make sense unless I'm misunderstanding.  Removing `IsWindowsApplication` and `IsConsoleApplication` makes sense.",
      "created_at": "2020-10-06T13:40:46Z",
      "updated_at": "2020-10-06T13:40:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If we remove IsWindowsApplication we remove _isWindowsApplication and this resolves our discussion (til we will want to make IsWindowsApplication public :-) )",
      "created_at": "2020-10-06T14:10:09Z",
      "updated_at": "2020-10-06T14:10:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "As unrelated notice. The code fallback to default shell (cmd.exe/bash) to invoke an item. But what if we assign PowerShell as default shell? Infinite cycle? \r\nIt seems we need to review all places where we fallback to default shell to understand the consequences.\r\n",
      "created_at": "2020-10-06T14:52:20Z",
      "updated_at": "2020-10-06T14:52:20Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov can you point me to what code you are referring to?",
      "created_at": "2020-10-06T15:20:45Z",
      "updated_at": "2020-10-06T15:20:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "In the context - line 488. If UseShellExecute is true we call PowerShell again?",
      "created_at": "2020-10-06T15:36:28Z",
      "updated_at": "2020-10-06T15:36:28Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov that line with UseShellExecute only starts a new process if the previous attempt fails because it's not an executable and isn't associated with an executable so it tries to let the Shell try to start it.  I don't see the problem.",
      "created_at": "2020-10-06T15:45:45Z",
      "updated_at": "2020-10-06T15:45:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I mean the code\r\nhttps://github.com/PowerShell/PowerShell/blob/f2a37164bfb321f5218cea25ed1d1cf8b284961c/src/System.Management.Automation/engine/NativeCommandProcessor.cs#L478-L490\r\n\r\nIf PowerShell is default shell the code will run PowerShell again and again.",
      "created_at": "2020-10-06T15:58:13Z",
      "updated_at": "2020-10-06T16:00:23Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov ok, now I see what you mean.  However, on my macBook I can see that Process.Start() doesn't start a new shell to run the exe.",
      "created_at": "2020-10-06T16:04:15Z",
      "updated_at": "2020-10-06T16:04:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I'd expect the cycle with:\r\n1. Set PowerShell as default shell\r\n2. Run PowerShell unelevated\r\n3. Run diskmgmt.msc\r\n\r\nIn line 534 we will have UseShellExecute = true and run PowerShell again.",
      "created_at": "2020-10-06T18:06:22Z",
      "updated_at": "2020-10-06T18:06:22Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov perhaps you can open a new issue to discuss that specific concern, I don't see additional pwsh processes, however",
      "created_at": "2020-10-06T20:23:11Z",
      "updated_at": "2020-10-06T20:23:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT I looked at the UseShellExecute implementation. It does not use a call to default shell. On Windows it uses ShellExecuteEx P/Invoke, on Unix it uses x-bit. So the cycle would be only if PowerShell associated with the extension or file.\r\nOn Windows this is an incredible scenario. On Unix the code path is blocked in line 494.\r\nOn Unix I still had a concern because in line 488 UseShellExecute is false and Process.Start will just fork and execute - if the file has `#!pwsh` in header the pwsh would run again but I tried on WSL without problems. So the question is closed.\r\n\r\n",
      "created_at": "2020-10-07T07:57:33Z",
      "updated_at": "2020-10-07T07:57:33Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.1.0-rc.2` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-rc.2)\n",
      "created_at": "2020-10-21T19:08:29Z",
      "updated_at": "2020-10-21T19:08:29Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.2.0-preview.1` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0-preview.1)\n",
      "created_at": "2020-11-17T23:02:06Z",
      "updated_at": "2020-11-17T23:02:06Z"
    },
    {
      "author": "ImportTaste",
      "author_association": "NONE",
      "body": "Is this in 7.1 stable? I don't see a revert to this commit in the diff log between 7.1 and 7.1-rc2, but it's re-incorporated in 7.2 preview 1.",
      "created_at": "2020-12-12T05:18:57Z",
      "updated_at": "2020-12-12T05:18:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It was included in v7.2.0-preview.1. You can check that 7.1 works well in the scenario.",
      "created_at": "2020-12-12T06:39:02Z",
      "updated_at": "2020-12-12T06:39:02Z"
    },
    {
      "author": "ImportTaste",
      "author_association": "NONE",
      "body": "> It was included in v7.2.0-preview.1. You can check that 7.1 works well in the scenario.\r\n\r\nSo... both versions have it?",
      "created_at": "2020-12-12T07:35:36Z",
      "updated_at": "2020-12-12T07:35:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Yes, both.",
      "created_at": "2020-12-12T08:02:11Z",
      "updated_at": "2020-12-12T08:02:11Z"
    }
  ],
  "created_at": "2020-10-06T02:00:04Z",
  "number": 13750,
  "state": "closed",
  "title": "Fix blocking wait when starting file associated with a Windows application",
  "updated_at": "2020-12-12T08:02:11Z"
}