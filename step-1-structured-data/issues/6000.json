{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6000",
  "author": "qt3m45su0najc7",
  "body": "I'm not able to load the PowerShell SQL Server module in PowerShell 6x. I've included a transcript. I've run SQL Server 2017 repair just to be sure there are no install related issues with SQL Server 2017. SSMS seems to be ok with basic querying.\r\n\r\nThe module 'sqlserver' supercedes, is the official Microsoft provided PowerShell snapin, and deprecates 'sqlps'. There is an older unanswered question with a different version (this one is Version=6.0.0.0).\r\n\r\nI did report this in stackoverflow and received a comment that pssnapins were deprecated. \r\n[https://stackoverflow.com/questions/48388451/installing-powershell-sql-server-module-fails-in-6-0-could-not-load-type-system](https://stackoverflow.com/questions/48388451/installing-powershell-sql-server-module-fails-in-6-0-could-not-load-type-system)\r\n`\r\n`**********************\r\nPowerShell transcript start\r\nStart time: 20180122124038\r\nUsername: bakery\\sunshine\r\nRunAs User: bakery\\sunshine\r\nConfiguration Name: \r\nMachine: BAKERY (Microsoft Windows NT 6.2.9200.0)\r\nHost Application: C:\\Program Files\\PowerShell\\6.0.0\\pwsh.dll\r\nProcess ID: 9272\r\n**PSVersion: 6.0.0**\r\nPSEdition: Core\r\nGitCommitId: v6.0.0\r\nOS: Microsoft Windows 10.0.16299 \r\nPlatform: Win32NT\r\nPSCompatibleVersions: 1.0, 2.0, 3.0, 4.0, 5.0, 5.1.10032.0, 6.0.0\r\nPSRemotingProtocolVersion: 2.3\r\nSerializationVersion: 1.1.0.1\r\nWSManStackVersion: 3.0\r\n**********************\r\nTranscript started, output file is trans1.txt\r\nPS C:\\Users\\sunshine\\desktop> $psversiontable\r\n\r\n    Name                           Value\r\n    ----                           -----\r\n    PSVersion                      6.0.0\r\n    PSEdition                      Core\r\n    GitCommitId                    v6.0.0\r\n    OS                             Microsoft Windows 10.0.16299\r\n    Platform                       Win32NT\r\n    PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\n    PSRemotingProtocolVersion      2.3\r\n    SerializationVersion           1.1.0.1\r\n    WSManStackVersion              3.0\r\n\r\n\r\nPS C:\\Users\\sunshine\\desktop> install-module sqlserver -verbose\r\n    VERBOSE: Acquiring providers for assembly: C:\\program files\\powershell\\6.0.0\\Modules\\PackageManagement\\1.1.7.0\\coreclr\\netcoreapp2.0\\Microsoft.PackageManagement.NuGetProvider.dll\r\n    VERBOSE: Acquiring providers for assembly: C:\\program files\\powershell\\6.0.0\\Modules\\PackageManagement\\1.1.7.0\\coreclr\\netcoreapp2.0\\Microsoft.PackageManagement.CoreProviders.dll\r\n    VERBOSE: Acquiring providers for assembly: C:\\program files\\powershell\\6.0.0\\Modules\\PackageManagement\\1.1.7.0\\coreclr\\netcoreapp2.0\\Microsoft.PackageManagement.MetaProvider.PowerShell.dll\r\n    VERBOSE: Acquiring providers for assembly: C:\\program files\\powershell\\6.0.0\\Modules\\PackageManagement\\1.1.7.0\\coreclr\\netcoreapp2.0\\Microsoft.PackageManagement.ArchiverProviders.dll\r\n    VERBOSE: Using the provider 'PowerShellGet' for searching packages.\r\n    VERBOSE: The -Repository parameter was not specified.  PowerShellGet will use all of the registered repositories.\r\n    VERBOSE: Getting the provider object for the PackageManagement Provider 'NuGet'.\r\n    VERBOSE: The specified Location is 'https://www.powershellgallery.com/api/v2/' and PackageManagementProvider is 'NuGet'.\r\n    VERBOSE: Searching repository 'https://www.powershellgallery.com/api/v2/FindPackagesById()?id='sqlserver'' for ''.\r\n    VERBOSE: Total package yield:'1' for the specified package 'sqlserver'.\r\n    VERBOSE: Skipping installed module SqlServer 21.0.17199.\r\n\r\n\r\nPS C:\\Users\\sunshine\\desktop> import-module sqlserver -verbose\r\n    VERBOSE: Loading module from path 'C:\\Program Files\\PowerShell\\Modules\\sqlserver\\21.0.17199\\sqlserver.psd1'.\r\n    VERBOSE: Loading 'TypesToProcess' from path 'C:\\Program Files\\PowerShell\\Modules\\sqlserver\\21.0.17199\\sqlprovider.types.ps1xml'.\r\n    VERBOSE: Loading 'FormatsToProcess' from path 'C:\\Program Files\\PowerShell\\Modules\\sqlserver\\21.0.17199\\sqlprovider.format.ps1xml'.\r\n    VERBOSE: Populating RepositorySourceLocation property for module sqlserver.\r\n    VERBOSE: Loading module from path 'C:\\Program Files\\PowerShell\\Modules\\sqlserver\\21.0.17199\\Microsoft.SqlServer.Management.PSSnapins.dll'.\r\n    VERBOSE: Importing cmdlet 'Add-SqlColumnEncryptionKeyValue'.\r\n    VERBOSE: Importing cmdlet 'Complete-SqlColumnMasterKeyRotation'.\r\n    VERBOSE: Importing cmdlet 'Get-SqlColumnEncryptionKey'.\r\n    VERBOSE: Importing cmdlet 'Get-SqlColumnMasterKey'.\r\n    VERBOSE: Importing cmdlet 'Add-SqlAzureAuthenticationContext'.\r\n    VERBOSE: Importing cmdlet 'New-SqlColumnEncryptionKeyEncryptedValue'.\r\n    VERBOSE: Importing cmdlet 'New-SqlColumnEncryptionSettings'.\r\n    VERBOSE: Importing cmdlet 'New-SqlColumnMasterKeySettings'.\r\n    VERBOSE: Importing cmdlet 'New-SqlCspColumnMasterKeySettings'.\r\n    VERBOSE: Importing cmdlet 'New-SqlCngColumnMasterKeySettings'.\r\n    VERBOSE: Importing cmdlet 'Remove-SqlColumnEncryptionKey'.\r\n    VERBOSE: Importing cmdlet 'Remove-SqlColumnEncryptionKeyValue'.\r\n    VERBOSE: Importing cmdlet 'Remove-SqlColumnMasterKey'.\r\n    VERBOSE: Importing cmdlet 'Invoke-SqlColumnMasterKeyRotation'.\r\n    VERBOSE: Importing cmdlet 'Set-SqlColumnEncryption'.\r\n    VERBOSE: Importing cmdlet 'New-SqlAzureKeyVaultColumnMasterKeySettings'.\r\n    VERBOSE: Importing cmdlet 'New-SqlColumnEncryptionKey'.\r\n    VERBOSE: Importing cmdlet 'New-SqlColumnMasterKey'.\r\n    VERBOSE: Importing cmdlet 'New-SqlCertificateStoreColumnMasterKeySettings'.\r\n    VERBOSE: Importing cmdlet 'Backup-SqlDatabase'.\r\n    VERBOSE: Importing cmdlet 'Get-SqlErrorLog'.\r\n    VERBOSE: Importing cmdlet 'Set-SqlErrorLog'.\r\n    VERBOSE: Importing cmdlet 'Add-SqlAvailabilityDatabase'.\r\n    VERBOSE: Importing cmdlet 'Add-SqlAvailabilityGroupListenerStaticIp'.\r\n    VERBOSE: Importing cmdlet 'Disable-SqlAlwaysOn'.\r\n    VERBOSE: Importing cmdlet 'Enable-SqlAlwaysOn'.\r\n    VERBOSE: Importing cmdlet 'Switch-SqlAvailabilityGroup'.\r\n    VERBOSE: Importing cmdlet 'Revoke-SqlAvailabilityGroupCreateAnyDatabase'.\r\n    VERBOSE: Importing cmdlet 'Set-SqlAvailabilityReplicaRoleToSecondary'.\r\n    VERBOSE: Importing cmdlet 'Grant-SqlAvailabilityGroupCreateAnyDatabase'.\r\n    VERBOSE: Importing cmdlet 'Join-SqlAvailabilityGroup'.\r\n    VERBOSE: Importing cmdlet 'New-SqlAvailabilityGroup'.\r\n    VERBOSE: Importing cmdlet 'New-SqlAvailabilityGroupListener'.\r\n    VERBOSE: Importing cmdlet 'New-SqlAvailabilityReplica'.\r\n    VERBOSE: Importing cmdlet 'New-SqlHADREndpoint'.\r\n    VERBOSE: Importing cmdlet 'Remove-SqlAvailabilityGroup'.\r\n    VERBOSE: Importing cmdlet 'Remove-SqlAvailabilityDatabase'.\r\n    VERBOSE: Importing cmdlet 'Remove-SqlAvailabilityReplica'.\r\n    VERBOSE: Importing cmdlet 'Resume-SqlAvailabilityDatabase'.\r\n    VERBOSE: Importing cmdlet 'Set-SqlAvailabilityGroup'.\r\n    VERBOSE: Importing cmdlet 'Set-SqlAvailabilityGroupListener'.\r\n    VERBOSE: Importing cmdlet 'Set-SqlAvailabilityReplica'.\r\n    VERBOSE: Importing cmdlet 'Set-SqlHADREndpoint'.\r\n    VERBOSE: Importing cmdlet 'Suspend-SqlAvailabilityDatabase'.\r\n    VERBOSE: Importing cmdlet 'Test-SqlAvailabilityGroup'.\r\n    VERBOSE: Importing cmdlet 'Test-SqlAvailabilityReplica'.\r\n    VERBOSE: Importing cmdlet 'Test-SqlDatabaseReplicaState'.\r\n    VERBOSE: Importing cmdlet 'Add-SqlFirewallRule'.\r\n    VERBOSE: Importing cmdlet 'Get-SqlDatabase'.\r\n    VERBOSE: Importing cmdlet 'Get-SqlInstance'.\r\n    VERBOSE: Importing cmdlet 'Remove-SqlFirewallRule'.\r\n    VERBOSE: Importing cmdlet 'Set-SqlAuthenticationMode'.\r\n    VERBOSE: Importing cmdlet 'Set-SqlNetworkConfiguration'.\r\n    VERBOSE: Importing cmdlet 'Start-SqlInstance'.\r\n    VERBOSE: Importing cmdlet 'Stop-SqlInstance'.\r\n    VERBOSE: Importing cmdlet 'Invoke-PolicyEvaluation'.\r\n    VERBOSE: Importing cmdlet 'Get-SqlAgent'.\r\n    VERBOSE: Importing cmdlet 'Get-SqlAgentJob'.\r\n    VERBOSE: Importing cmdlet 'Get-SqlAgentJobHistory'.\r\n    VERBOSE: Importing cmdlet 'Get-SqlAgentJobStep'.\r\n    VERBOSE: Importing cmdlet 'Get-SqlAgentJobSchedule'.\r\n    VERBOSE: Importing cmdlet 'Get-SqlAgentSchedule'.\r\n    VERBOSE: Importing cmdlet 'Save-SqlMigrationReport'.\r\n    VERBOSE: Importing cmdlet 'Read-SqlTableData'.\r\n    VERBOSE: Importing cmdlet 'Read-SqlViewData'.\r\n    VERBOSE: Importing cmdlet 'Write-SqlTableData'.\r\n    VERBOSE: Importing cmdlet 'Restore-SqlDatabase'.\r\n    VERBOSE: Importing cmdlet 'Invoke-Sqlcmd'.\r\n    VERBOSE: Importing cmdlet 'Add-SqlLogin'.\r\n    VERBOSE: Importing cmdlet 'Get-SqlLogin'.\r\n    VERBOSE: Importing cmdlet 'Remove-SqlLogin'.\r\n    VERBOSE: Importing cmdlet 'Get-SqlSmartAdmin'.\r\n    VERBOSE: Importing cmdlet 'Set-SqlSmartAdmin'.\r\n    VERBOSE: Importing cmdlet 'Test-SqlSmartAdmin'.\r\n    VERBOSE: Importing cmdlet 'Get-SqlCredential'.\r\n    VERBOSE: Importing cmdlet 'New-SqlBackupEncryptionOption'.\r\n    VERBOSE: Importing cmdlet 'New-SqlCredential'.\r\n    VERBOSE: Importing cmdlet 'Remove-SqlCredential'.\r\n    VERBOSE: Importing cmdlet 'Set-SqlCredential'.\r\n    VERBOSE: Loading module from path 'C:\\Program Files\\PowerShell\\Modules\\sqlserver\\21.0.17199\\Microsoft.SqlServer.Management.PSProvider.dll'.\r\n    VERBOSE: Importing cmdlet 'Convert-UrnToPath'.\r\n    VERBOSE: Importing cmdlet 'ConvertTo-EncodedSqlName'.\r\n    VERBOSE: Importing cmdlet 'ConvertFrom-EncodedSqlName'.\r\n    VERBOSE: Loading module from path 'C:\\Program Files\\PowerShell\\Modules\\sqlserver\\21.0.17199\\Microsoft.AnalysisServices.PowerShell.Cmdlets.dll'.\r\n    >> TerminatingError(Import-Module): \"Could not load type 'System.Management.Automation.PSSnapIn' from assembly 'System.Management.Automation, Version=6.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.\"\r\n    **import-module : Could not load type 'System.Management.Automation.PSSnapIn' from assembly 'System.Management.Automation, Version=6.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.**\r\n    At line:1 char:1\r\n    + import-module sqlserver -verbose\r\n    + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Import-Module], TypeLoadException\r\n    + FullyQualifiedErrorId : System.TypeLoadException,Microsoft.PowerShell.Commands.ImportModuleCommand\r\n    import-module : Could not load type 'System.Management.Automation.PSSnapIn' from assembly 'System.Management.Automation, Version=6.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.\r\n    At line:1 char:1\r\n    + import-module sqlserver -verbose\r\n    + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Import-Module], TypeLoadException\r\n    + FullyQualifiedErrorId : System.TypeLoadException,Microsoft.PowerShell.Commands.ImportModuleCommand\r\n\r\nPS C:\\Users\\sunshine\\desktop> stop-transcript\r\n**********************\r\nPowerShell transcript end\r\nEnd time: 20180122124153\r\n**********************",
  "closed_at": "2018-05-26T17:55:47Z",
  "comments": [
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Yes! PowerShell Gallery SQLServer module is only intended for Windows PowerShell and not PSCore.  This is  one hurdle to overcome as there might be the need to make the module compatible to PSCore. But, this will take some time, to possibly migrate the module.\r\n\r\nFor now, you can install the SMO Package (Microsoft.SqlServer.SqlManagementObjects) from Nuget in PSCore which uses .NETCore2.0. \r\n```\r\nPS C:\\Program Files\\PowerShell\\6.0.0> Install-Package Microsoft.SqlServer.SqlManagementObjects -Version 140.17218.0\r\n```\r\nYou will be able to create PSCore SMO scripts for SQL Server.\r\n:)",
      "created_at": "2018-01-24T00:35:02Z",
      "updated_at": "2018-01-24T00:35:02Z"
    },
    {
      "author": "qt3m45su0najc7",
      "author_association": "NONE",
      "body": "Maximo, Your solution did not resolve.  Here is the transcript.   The verb version was not recognized with & without.\r\n**********************\r\nPowerShell transcript start\r\nStart time: 20180124092935\r\nUsername: bakery\\sunshine\r\nRunAs User: bakery\\sunshine\r\nConfiguration Name: \r\nMachine: BAKERY (Microsoft Windows NT 6.2.9200.0)\r\nHost Application: C:\\Program Files\\PowerShell\\6.0.0\\pwsh.dll\r\nProcess ID: 13888\r\nPSVersion: 6.0.0\r\nPSEdition: Core\r\nGitCommitId: v6.0.0\r\nOS: Microsoft Windows 10.0.16299 \r\nPlatform: Win32NT\r\nPSCompatibleVersions: 1.0, 2.0, 3.0, 4.0, 5.0, 5.1.10032.0, 6.0.0\r\nPSRemotingProtocolVersion: 2.3\r\nSerializationVersion: 1.1.0.1\r\nWSManStackVersion: 3.0\r\n**********************\r\nTranscript started, output file is p2.txt\r\nPS C:\\Users\\sunshine\\desktop>  Install-Package Microsoft.SqlServer.SqlManagementObjects -Version 140.17218.0 -verbose\r\n\t>> TerminatingError(Install-Package): \"A parameter cannot be found that matches parameter name 'Version'.\"\r\n\tInstall-Package : A parameter cannot be found that matches parameter name 'Version'.\r\n\tAt line:1 char:59\r\n\t+ ... all-Package Microsoft.SqlServer.SqlManagementObjects -Version 140.172 ...\r\n\t+                                                          ~~~~~~~~\r\n\t+ CategoryInfo          : InvalidArgument: (:) [Install-Package], ParameterBindingException\r\n\t+ FullyQualifiedErrorId : NamedParameterNotFound,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage\r\n\tInstall-Package : A parameter cannot be found that matches parameter name 'Version'.\r\n\tAt line:1 char:59\r\n\t+ ... all-Package Microsoft.SqlServer.SqlManagementObjects -Version 140.172 ...\r\n\t+                                                          ~~~~~~~~\r\n\t+ CategoryInfo          : InvalidArgument: (:) [Install-Package], ParameterBindingException\r\n\t+ FullyQualifiedErrorId : NamedParameterNotFound,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage\r\n\r\nPS C:\\Users\\sunshine\\desktop>  Install-Package Microsoft.SqlServer.SqlManagementObjects  -verbose\r\n\tVERBOSE: Using the provider 'NuGet' for searching packages.\r\n\tVERBOSE: Using the provider 'PowerShellGet' for searching packages.\r\n\tVERBOSE: Searching repository 'https://api.nuget.org/v3/index.json/FindPackagesById()?id='Microsoft.SqlServer.SqlManagementObjects'' for ''.\r\n\tVERBOSE: The -Repository parameter was not specified.  PowerShellGet will use all of the registered repositories.\r\n\tVERBOSE: Getting the provider object for the PackageManagement Provider 'NuGet'.\r\n\tVERBOSE: The specified Location is 'https://www.powershellgallery.com/api/v2/' and PackageManagementProvider is 'NuGet'.\r\n\tVERBOSE: Searching repository 'https://www.powershellgallery.com/api/v2/FindPackagesById()?id='Microsoft.SqlServer.SqlManagementObjects'' for ''.\r\n\tVERBOSE: Total package yield:'0' for the specified package 'Microsoft.SqlServer.SqlManagementObjects'.\r\n\tInstall-Package : No match was found for the specified search criteria and package name 'Microsoft.SqlServer.SqlManagementObjects'. Try Get-PackageSource to see all available registered package sources.\r\n\tAt line:1 char:2\r\n\t+  Install-Package Microsoft.SqlServer.SqlManagementObjects  -verbose\r\n\t+  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\t+ CategoryInfo          : ObjectNotFound: (Microsoft.Power....InstallPackage:InstallPackage) [Install-Package], Exception\r\n\t+ FullyQualifiedErrorId : NoMatchFoundForCriteria,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage\r\n\tInstall-Package : No match was found for the specified search criteria and package name 'Microsoft.SqlServer.SqlManagementObjects'. Try Get-PackageSource to see all available registered package sources.\r\n\tAt line:1 char:2\r\n\t+  Install-Package Microsoft.SqlServer.SqlManagementObjects  -verbose\r\n\t+  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\t+ CategoryInfo          : ObjectNotFound: (Microsoft.Power....InstallPackage:InstallPackage) [Install-Package], Exception\r\n\t+ FullyQualifiedErrorId : NoMatchFoundForCriteria,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage\r\n\r\n\r\nPS C:\\Users\\sunshine\\desktop> get-packagesource\r\n\r\n\tName                             ProviderName     IsTrusted  Location\r\n\t----                             ------------     ---------  --------\r\n\tnuget.org                        NuGet            False      https://api.nug...\r\n\tPSGallery                        PowerShellGet    False      https://www.pow...\r\n\r\n\r\nPS C:\\Users\\sunshine\\desktop> stop-transcript\r\n**********************\r\nPowerShell transcript end\r\nEnd time: 20180124093214\r\n**********************\r\n\r\n\r\n\r\n",
      "created_at": "2018-01-24T15:34:51Z",
      "updated_at": "2018-01-24T15:34:51Z"
    },
    {
      "author": "qt3m45su0najc7",
      "author_association": "NONE",
      "body": "Posted transcript of Maximo's workaround.  It did not work.",
      "created_at": "2018-01-24T15:38:43Z",
      "updated_at": "2018-01-24T15:38:43Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "OK! I was following the Nuget page instructions, as I already have it installed in PSCore6.\r\nhttps://www.nuget.org/packages/Microsoft.SqlServer.SqlManagementObjects/140.17218.0\r\n\r\nSo, their instructions are wrong.\r\n\r\n![smo_netcore_01_bug_2018-01-24_10-59-40](https://user-images.githubusercontent.com/19892435/35343021-939c0b1a-00f7-11e8-896f-3e69ba98a607.jpg)\r\n\r\nThe correct cmdline is:\r\n```\r\nInstall-Package Microsoft.SqlServer.SqlManagementObjects -RequiredVersion '140.17199.0'\r\n```\r\n![smo_netcore_01_bug_2018-01-24_10-59-40](https://user-images.githubusercontent.com/19892435/35343814-8e4be17e-00f9-11e8-8944-88510dd38276.jpg)\r\n\r\nNotice I gave you a previous version as I just discovered the latest one won't connect to either Linux or Windows SQLServer. \r\n\r\nBelow is an example image of connecting to SQLServer (Linux) from PSCore6 using SMO v.'140.17199.0':\r\n![smo_netcore_02_bug_2018-01-24_10-59-40](https://user-images.githubusercontent.com/19892435/35343942-de325dda-00f9-11e8-988d-2d9d09bb1dad.jpg)\r\n\r\nThe newer version (v140.17218.0) will show the following results:\r\n![smo_netcore_03_bug_2018-01-24_10-59-40](https://user-images.githubusercontent.com/19892435/35344068-310781fc-00fa-11e8-9365-0deca35a8690.jpg)\r\n\r\nI will be reporting it soon!\r\n\r\n",
      "created_at": "2018-01-24T16:34:01Z",
      "updated_at": "2018-01-24T16:34:01Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "I just reported the Microsoft.SqlServer.SqlManagementObjects v140.17218.0 bug to Nuget.\r\n\r\nThe working version is v140.17199.0\r\nI'm sharing the code for testing:\r\n```\r\n## - Help find and save the location of the SMO dll's in a PowerShell variable:\r\n$smopath = Join-Path ((Get-Package Microsoft.SqlServer.SqlManagementObjects).Source `\r\n\t| Split-Path) (Join-Path lib netcoreapp2.0)\r\n\r\n# Add types to load SMO Assemblies only:\r\nAdd-Type -Path (Join-Path $smopath Microsoft.SqlServer.Smo.dll)\r\nAdd-Type -Path (Join-Path $smopath Microsoft.SqlServer.ConnectionInfo.dll)\r\n\r\n## - Prepare connection and credential strings for SQL Server:\r\n## - (Connection to Windows SQL Server multi-instance sample)\r\n$SQLServerInstanceName = 'System01,1451'; $SQLUserName = 'sa'; $sqlPwd = '$Mypwd01!';\r\n\r\n## - Turn ON below for Linux:\r\n## - (Connection to Linux SQL Server multi-instance sample)\r\n# $SQLServerInstanceName = 'LinuxSystem02'; $SQLUserName = 'sa'; $sqlPwd = '$Mypwd01!';\r\n\r\n## - Prepare connection passing credentials to SQL Server:\r\n$SQLSrvConn = New-Object Microsoft.SqlServer.Management.Common.SqlConnectionInfo($SQLServerInstanceName, $SQLUserName, $SqlPwd);\r\n$SQLSrvObj = new-object Microsoft.SqlServer.Management.Smo.Server($SQLSrvConn);\r\n\r\n## - SMO Get SQL Server Info:\r\n\r\n$SQLSrvObj.Information `\r\n| Select-Object parent, platform, product, productlevel, `\r\n\t\t\t\tOSVersion, Edition, version, HostPlatform, HostDistribution `\r\n| Format-List;\r\n```\r\nSame code working on Linux:\r\n![smo_netcore_04_bug_2018-01-24_10-59-40](https://user-images.githubusercontent.com/19892435/35345336-60a1f07a-00fd-11e8-9d4a-67140d7153d6.jpg)\r\n\r\n:)\r\n",
      "created_at": "2018-01-24T16:55:02Z",
      "updated_at": "2018-01-24T16:55:02Z"
    },
    {
      "author": "qt3m45su0najc7",
      "author_association": "NONE",
      "body": "Transcript of error using your new command & version.  I forget to add in the verbose to your commands and re-run them.\r\n\r\n`**********************\r\nPowerShell transcript start\r\nStart time: 20180124110125\r\nUsername: bakery\\sunshine\r\nRunAs User: bakery\\sunshine\r\nConfiguration Name: \r\nMachine: BAKERY (Microsoft Windows NT 6.2.9200.0)\r\nHost Application: C:\\Program Files\\PowerShell\\6.0.0\\pwsh.dll\r\nProcess ID: 11284\r\nPSVersion: 6.0.0\r\nPSEdition: Core\r\nGitCommitId: v6.0.0\r\nOS: Microsoft Windows 10.0.16299 \r\nPlatform: Win32NT\r\nPSCompatibleVersions: 1.0, 2.0, 3.0, 4.0, 5.0, 5.1.10032.0, 6.0.0\r\nPSRemotingProtocolVersion: 2.3\r\nSerializationVersion: 1.1.0.1\r\nWSManStackVersion: 3.0\r\n**********************\r\nTranscript started, output file is x1.txt\r\n\r\nPS C:\\Users\\sunshine\\desktop> Install-Package Microsoft.SqlServer.SqlManagementObjects -RequiredVersion '140.17199.0' -verbose\r\n\tVERBOSE: Using the provider 'NuGet' for searching packages.\r\n\tVERBOSE: Using the provider 'PowerShellGet' for searching packages.\r\n\tVERBOSE: Searching repository 'https://api.nuget.org/v3/index.json/FindPackagesById()?id='Microsoft.SqlServer.SqlManagementObjects'' for ''.\r\n\tVERBOSE: The -Repository parameter was not specified.  PowerShellGet will use all of the registered repositories.\r\n\tVERBOSE: Getting the provider object for the PackageManagement Provider 'NuGet'.\r\n\tVERBOSE: The specified Location is 'https://www.powershellgallery.com/api/v2/' and PackageManagementProvider is 'NuGet'.\r\n\tVERBOSE: Searching repository 'https://www.powershellgallery.com/api/v2/FindPackagesById()?id='Microsoft.SqlServer.SqlManagementObjects'' for ''.\r\n\tVERBOSE: Total package yield:'0' for the specified package 'Microsoft.SqlServer.SqlManagementObjects'.\r\n\tInstall-Package : No match was found for the specified search criteria and package name 'Microsoft.SqlServer.SqlManagementObjects'. Try Get-PackageSource to see all available registered package sources.\r\n\tAt line:1 char:1\r\n\t+ Install-Package Microsoft.SqlServer.SqlManagementObjects -RequiredVer ...\r\n\t+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\t+ CategoryInfo          : ObjectNotFound: (Microsoft.Power....InstallPackage:InstallPackage) [Install-Package], Exception\r\n\t+ FullyQualifiedErrorId : NoMatchFoundForCriteria,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage\r\n\tInstall-Package : No match was found for the specified search criteria and package name 'Microsoft.SqlServer.SqlManagementObjects'. Try Get-PackageSource to see all available registered package sources.\r\n\tAt line:1 char:1\r\n\t+ Install-Package Microsoft.SqlServer.SqlManagementObjects -RequiredVer ...\r\n\t+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\t+ CategoryInfo          : ObjectNotFound: (Microsoft.Power....InstallPackage:InstallPackage) [Install-Package], Exception\r\n\t+ FullyQualifiedErrorId : NoMatchFoundForCriteria,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage\r\n\r\nPS C:\\Users\\sunshine\\desktop> stop-transcript\r\n**********************\r\nPowerShell transcript end\r\nEnd time: 20180124110212\r\n**********************\r\n`",
      "created_at": "2018-01-24T17:05:14Z",
      "updated_at": "2018-01-24T17:05:14Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@qt3m45su0najc7,  Ha!  Lucky for you I got a fresh newly installed Windows 10 VM.\r\n\r\nYes! I'm getting the same error you are getting... and guess what??   You don't have Nuget installed in PSCore6.\r\n\r\nThe following code block will verify if is installed, and if it not, then it will install NuGet.\r\n```\r\n# Register NuGet package source, if needed\r\n# The package source may not be available on some systems (e.g. Linux)\r\nif (-not (Get-PackageSource | Where-Object{$_.Name -eq 'Nuget'}))\r\n{\r\nRegister-PackageSource -Name Nuget -ProviderName NuGet -Location https://www.nuget.org/api/v2\r\n}else{\r\nWrite-Host \"NuGet Already Exist! No Need to install.\"\r\n}\r\n```\r\nThen, you can proceed with installing the SMO package:\r\n```\r\nInstall-Package Microsoft.SqlServer.SqlManagementObjects -RequiredVersion '140.17199.0'\r\n```\r\nSee images\r\n![smo_netcore_07_bug_2018-01-24_10-59-40](https://user-images.githubusercontent.com/19892435/35347611-a216a7a2-0103-11e8-9e96-5dd45afcbf2a.jpg)\r\n![smo_netcore_08_bug_2018-01-24_10-59-40](https://user-images.githubusercontent.com/19892435/35347620-a73e53c4-0103-11e8-93a3-26585dbc524e.jpg)\r\n\r\nPlease let me know if it works this time.\r\n:)\r\n\r\n",
      "created_at": "2018-01-24T17:40:33Z",
      "updated_at": "2018-01-24T17:40:33Z"
    },
    {
      "author": "qt3m45su0najc7",
      "author_association": "NONE",
      "body": "Error.  Still does not seem to find it.\r\nVERBOSE: Total package yield:'0' for the specified package 'Microsoft.SqlServer.SqlManagementObjects'.\r\nInstall-Package : No match was found for the specified search criteria and package name 'Microsoft.SqlServer.SqlManagementObjects'. Try Get-PackageSource to see all available registered package sources.\r\n\r\nBe aware the nuget installation is **not** trusted (see output, also attached the transcript and added some tabbing to make it easier to read).\r\n\r\nUsed 'Install-Package Microsoft.SqlServer.SqlManagementObjects -RequiredVersion '140.17199.0' -verbose\r\n' adding the verbose verb.\r\n[transcript1.txt](https://github.com/PowerShell/PowerShell/files/1661114/transcript1.txt)\r\n\r\n\r\n`**********************\r\nPowerShell transcript start\r\nStart time: 20180124120916\r\nUsername: bakery\\albert\r\nRunAs User: bakery\\albert\r\nConfiguration Name: \r\nMachine: BAKERY (Microsoft Windows NT 6.2.9200.0)\r\nHost Application: C:\\Program Files\\PowerShell\\6.0.0\\pwsh.dll\r\nProcess ID: 8048\r\nPSVersion: 6.0.0\r\nPSEdition: Core\r\nGitCommitId: v6.0.0\r\nOS: Microsoft Windows 10.0.16299 \r\nPlatform: Win32NT\r\nPSCompatibleVersions: 1.0, 2.0, 3.0, 4.0, 5.0, 5.1.10032.0, 6.0.0\r\nPSRemotingProtocolVersion: 2.3\r\nSerializationVersion: 1.1.0.1\r\nWSManStackVersion: 3.0\r\n**********************\r\nTranscript started, output file is k1.txt\r\nPS C:\\Users\\sunshine\\desktop> # Register NuGet package source, if needed\r\nPS C:\\Users\\sunshine\\desktop> # The package source may not be available on some systems (e.g. Linux)\r\nPS C:\\Users\\sunshine\\desktop> if (-not (Get-PackageSource | Where-Object{$_.Name -eq 'Nuget'}))\r\n{\r\nRegister-PackageSource -Name Nuget -ProviderName NuGet -Location https://www.nuget.org/api/v2\r\n}else{\r\nWrite-Host \"NuGet Already Exist! No Need to install.\"\r\n}\r\n\r\nName                             ProviderName     IsTrusted  Location\r\n----                             ------------     ---------  --------\r\nNuget                            NuGet            False      https://www.nug...\r\n\r\n\r\nPS C:\\Users\\sunshine\\desktop> Install-Package Microsoft.SqlServer.SqlManagementObjects -RequiredVersion '140.17199.0' -verbose\r\nVERBOSE: Using the provider 'NuGet' for searching packages.\r\nVERBOSE: Using the provider 'PowerShellGet' for searching packages.\r\nVERBOSE: The -Repository parameter was not specified.  PowerShellGet will use all of the registered repositories.\r\nVERBOSE: Getting the provider object for the PackageManagement Provider 'NuGet'.\r\nVERBOSE: The specified Location is 'https://www.powershellgallery.com/api/v2/' and PackageManagementProvider is 'NuGet'.\r\nVERBOSE: Searching repository 'https://api.nuget.org/v3/index.json/FindPackagesById()?id='Microsoft.SqlServer.SqlManagementObjects'' for ''.\r\nVERBOSE: Searching repository 'https://www.nuget.org/api/v2/FindPackagesById()?id='Microsoft.SqlServer.SqlManagementObjects'' for ''.\r\nVERBOSE: Searching repository 'https://www.powershellgallery.com/api/v2/FindPackagesById()?id='Microsoft.SqlServer.SqlManagementObjects'' for ''.\r\nVERBOSE: Total package yield:'0' for the specified package 'Microsoft.SqlServer.SqlManagementObjects'.\r\nInstall-Package : No match was found for the specified search criteria and package name 'Microsoft.SqlServer.SqlManagementObjects'. Try Get-PackageSource to see all available registered package sources.\r\nAt line:1 char:1\r\n+ Install-Package Microsoft.SqlServer.SqlManagementObjects -RequiredVer ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : ObjectNotFound: (Microsoft.Power....InstallPackage:InstallPackage) [Install-Package], Exception\r\n+ FullyQualifiedErrorId : NoMatchFoundForCriteria,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage\r\nInstall-Package : No match was found for the specified search criteria and package name 'Microsoft.SqlServer.SqlManagementObjects'. Try Get-PackageSource to see all available registered package sources.\r\nAt line:1 char:1\r\n+ Install-Package Microsoft.SqlServer.SqlManagementObjects -RequiredVer ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : ObjectNotFound: (Microsoft.Power....InstallPackage:InstallPackage) [Install-Package], Exception\r\n+ FullyQualifiedErrorId : NoMatchFoundForCriteria,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage\r\n\r\nPS C:\\Users\\sunshine\\desktop> stop-transcript\r\n**********************\r\nPowerShell transcript end\r\nEnd time: 20180124121101\r\n**********************\r\n`",
      "created_at": "2018-01-24T18:15:47Z",
      "updated_at": "2018-01-24T18:15:47Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@qt3m45su0najc7,\r\n\r\nOne thing I've forgot to ask... Are you opening the PSCore console as an Administrator?  This is only thing I can duplicate the error close to what you're getting.\r\n\r\n![smo_netcore_09_bug_2018-01-24_10-59-40](https://user-images.githubusercontent.com/19892435/35350219-44ebc9d8-010b-11e8-8fd1-4e79e84415c9.jpg)\r\n\r\nBoth NuGet/PSGallery Module and Packages need to be installed as an Admin.\r\n\r\nI'm on:\r\n```\r\nPS C:\\Program Files\\PowerShell\\6.0.0> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0\r\nOS                             Microsoft Windows 10.0.16299\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n\r\nPS C:\\Program Files\\PowerShell\\6.0.0>\r\n\r\n```\r\n",
      "created_at": "2018-01-24T18:37:19Z",
      "updated_at": "2018-01-24T18:37:19Z"
    },
    {
      "author": "qt3m45su0najc7",
      "author_association": "NONE",
      "body": "Yes, I am opening as admin. Non admin generates privilege folder errors.  The transcript identifies the pscore version at the beginning. See following\r\n`Process ID: 8048\r\nPSVersion: 6.0.0\r\nPSEdition: Core\r\nGitCommitId: v6.0.0\r\nOS: Microsoft Windows 10.0.16299 \r\nPlatform: Win32NT\r\nPSCompatibleVersions: 1.0, 2.0, 3.0, 4.0, 5.0, 5.1.10032.0, 6.0.0\r\nPSRemotingProtocolVersion: 2.3\r\nSerializationVersion: 1.1.0.1\r\nWSManStackVersion: 3.0`\r\n\r\nhere is a replay for you:\r\n**********************\r\nPowerShell transcript start\r\nStart time: 20180124125231\r\nUsername: bakery\\sunshine\r\nRunAs User: bakery\\sunshine\r\nConfiguration Name: \r\nMachine: BAKERY (Microsoft Windows NT 6.2.9200.0)\r\nHost Application: C:\\Program Files\\PowerShell\\6.0.0\\pwsh.dll\r\nProcess ID: 3992\r\n**PSVersion: 6.0.0\r\nPSEdition: Core\r\nGitCommitId: v6.0.0\r\nOS: Microsoft Windows 10.0.16299 \r\nPlatform: Win32NT**\r\nPSCompatibleVersions: 1.0, 2.0, 3.0, 4.0, 5.0, 5.1.10032.0, 6.0.0\r\nPSRemotingProtocolVersion: 2.3\r\nSerializationVersion: 1.1.0.1\r\nWSManStackVersion: 3.0\r\n**********************\r\nTranscript started, output file is tr2.txt\r\nPS C:\\Users\\sunshine\\desktop> **Get-Packageprovider**\r\n\r\nName                     Version          DynamicOptions\r\n----                     -------          --------------\r\nNuGet                    2.8.5.210        Destination, ExcludeVersion, Scope...\r\nPowerShellGet            1.6.0.0          PackageManagementProvider, Type, S...\r\n\r\n\r\nPS C:\\Users\\sunshine\\desktop> **$psversiontable**\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0\r\nOS                             Microsoft Windows 10.0.16299\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n\r\nPS C:\\Users\\sunshine\\desktop> stop-transcript\r\n**********************\r\nPowerShell transcript end\r\nEnd time: 20180124125247\r\n**********************\r\n\r\nThank you for your assistance in troubleshooting.",
      "created_at": "2018-01-24T18:56:55Z",
      "updated_at": "2018-01-24T18:56:55Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@qt3m45su0najc7, No worries! This is one of my area of interest.\r\n\r\nI don't see how to trap the same condition you're experiencing.  The only difference might be,  I'm on a Workgroup environment, and maybe it's a Domain causing some security restrictions.\r\n\r\nSorry! I wanted to give you the SMO side experience.\r\n\r\nSo, everyone from the Microsoft PowerShell team side may want to help trapping this one.\r\nFor now, I ran out of options.  I got it all working on a fresh new VM.\r\n\r\n:)",
      "created_at": "2018-01-24T19:42:11Z",
      "updated_at": "2018-01-24T19:42:11Z"
    },
    {
      "author": "qt3m45su0najc7",
      "author_association": "NONE",
      "body": "I'm on a standalone machine. No domain. Only 'residential' network of wifi router and my little win10x machine.",
      "created_at": "2018-01-24T20:41:14Z",
      "updated_at": "2018-01-24T20:41:14Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Strange! I have tested on both Ubuntu, Windows 10 RTM and Insider versions. \r\nI got it working, and It sill bugs me!\r\n\r\nCan you attached a print-screen of the console with the main message displayed?  No transcript.txt.\r\nI need something visual.\r\n\r\nBy the way, what's the result of Get-ExecutionPolicy?\r\n:)",
      "created_at": "2018-01-24T20:55:14Z",
      "updated_at": "2018-01-24T20:55:14Z"
    },
    {
      "author": "qt3m45su0najc7",
      "author_association": "NONE",
      "body": "![admin-window](https://user-images.githubusercontent.com/465722/35357226-868d073c-0118-11e8-897d-02c5a769f257.png)\r\n \r\n\r\n\r\n\r\n\r\n\r\n<#\r\nAdministrator privilege test\r\n# from [here ](https://stackoverflow.com/questions/7690994/powershell-running-a-command-as-administrator)\r\n#>\r\n\r\n`([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]`'\"Administrator\")\r\n**returns True**\r\nget-executionpolicy \r\n**returns RemoteSigned**\r\n\r\n",
      "created_at": "2018-01-24T21:12:06Z",
      "updated_at": "2018-01-24T21:12:06Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "I can see that the Console shows Administrator, Get-ExecutionPolicy set to RemoteSigned, PSversion 6.0.0 good.  \r\n\r\nNotice the Get-Packageprovider results match what I got.  Have you close and reopen console? I'm guessing you have but want to make sure.\r\n\r\nBy the way, is this machine a US version. Just to make sure is not something to do with encoding.\r\n\r\nThe only thing missing..  the screen-shot of running:\r\n```\r\nInstall-Package Microsoft.SqlServer.SqlManagementObjects -RequiredVersion '140.17199.0'\r\n```\r\nIt seems that is should work. Unless, something is blocking Nuget site on your end.\r\n",
      "created_at": "2018-01-24T21:50:29Z",
      "updated_at": "2018-01-24T21:50:29Z"
    },
    {
      "author": "qt3m45su0najc7",
      "author_association": "NONE",
      "body": "US language.\r\nThe install-package was documented in an earlier response. See transcript with start time 20180124110125.\r\n",
      "created_at": "2018-01-24T21:58:16Z",
      "updated_at": "2018-01-24T21:58:16Z"
    },
    {
      "author": "qt3m45su0najc7",
      "author_association": "NONE",
      "body": "Please update this issue to unanswered.  I'm not online 24/7, so anticipate a delay in response (especially today).",
      "created_at": "2018-01-25T14:16:49Z",
      "updated_at": "2018-01-25T14:16:49Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Nice! This is not my primary work neither, and I'm also not online 24/7.  \r\n\r\nAs I mention before, I ran out of option.  Also, the main issue was already answered:\r\nSQLServer Module is meant for Windows PowerShell.\r\n\r\nIn all my scenarios to help installing SMO for PSCore, I was able to get errors and get them cleared.\r\nAnd, this is outside the main issue you reported.\r\n\r\nPlease any PowerShell Team member can jump in.  \r\n\r\nBy the way, any issues that remains open, and someone in the community (including the PowerShell Team) will take a look at it.\r\n\r\nPatience is the Key!\r\n\r\n",
      "created_at": "2018-01-25T15:12:38Z",
      "updated_at": "2018-01-25T15:12:38Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "I Agree!\r\n\r\nThis is not PSCore issue but a Windows Module not compatible.\r\n\r\nThinks this has been mention before and there a particular issue out there to address the Windows Modules not working on PSCore.  Honestly, I haven't search for it yet.\r\n\r\nNow, in this user scenario, he's on a standalone Windows 10 build 16299 and is very reversed in giving extra information.\r\n\r\nWhat can I suggest? Where should this issue been addressed to?\r\n\r\n\ud83d\ude0a\r\n\r\nMaximo Trinidad\r\nTechnology Evangelist\r\n[1504793705126_SAPIEN]\r\n\r\nMicrosoft MVP - Cloud and Datacenter Management (PowerShell)\r\nMVP Link: https://mvp.microsoft.com/en-us/PublicProfile/4024451?fullName=Maximo%20%20Trinidad\r\nSAPIEN Technologies MVP 2017: https://www.sapien.com/blog/2016/12/21/sapien-mvp-2017-award-winners/\r\nIDERA ACE member 2017: http://community.idera.com/blog/b/community_blog/posts/meet-your-2017-idera-aces\r\nBlog: http://www.maxtblog.com/\r\n\r\n________________________________\r\nFrom: Mark Kraus <notifications@github.com>\r\nSent: Thursday, January 25, 2018 10:33 AM\r\nTo: PowerShell/PowerShell\r\nCc: Maximo Trinidad; Mention\r\nSubject: Re: [PowerShell/PowerShell] Installing PowerShell SQL Server module fails in 6.0 Could not load type 'System.Management.Automation.PSSnapIn' (#6000)\r\n\r\n\r\n@MaximoTrinidad<https://github.com/maximotrinidad> @qt3m45su0najc7<https://github.com/qt3m45su0najc7> what is the PowerShell Core issue in this? I will re-open the issue if it is something wrong in PS Core, but reading through the thread it looks like nothing related to this project is the cause. It appears a module that is not yet made compatible with PSCore is trying to be used in PSCore or an undocumented workaround is trying to be used to emulate similar functionality. If it's not a PSCore issue, the problem should be worked out in another more appropriate repo or forum.\r\n\r\n\u2014\r\nYou are receiving this because you were mentioned.\r\nReply to this email directly, view it on GitHub<https://github.com/PowerShell/PowerShell/issues/6000#issuecomment-360501935>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AS-I03c8Bkg3bk3sAuVVg3uWiZTVF-JHks5tOJ6vgaJpZM4Rqe3b>.\r\n",
      "created_at": "2018-01-25T15:40:48Z",
      "updated_at": "2018-01-25T15:40:48Z"
    },
    {
      "author": "qt3m45su0najc7",
      "author_association": "NONE",
      "body": "Maximo, I'**m puzzled by your comment that I am averse to giving extra information**. I've provided transcripts and ran all the commands you requested.  What additional information that I have not already provided, including a screenshot that you requested to see the title on the window says 'Administrator', have I objected to providing?\r\n",
      "created_at": "2018-01-25T18:33:39Z",
      "updated_at": "2018-01-25T18:33:39Z"
    },
    {
      "author": "qt3m45su0najc7",
      "author_association": "NONE",
      "body": "Mark, I can't answer your question myself.  Powershell pre6 was able to\nperform sql operations with invoke-sqlcmd, but I'm not able to get it to\nwork on my installation.  I've provided transcripts of every remedy Maximo\nproposed, but they do not resolve the issue.  Maximo left a comment that I\nwas 'reversed in giving extra information' (sic), but I've either executed\nthe commands or pointed to previous transcripts where I executed the\ncommands he suggested.  I can't see if this is an appropriate forum, but\nthat would push it to SQL Server or Windows.  My SQL Server installation\nworks and Windows works. I'm fully patched. What would you conclude?\n\nOn Thu, Jan 25, 2018 at 9:33 AM, Mark Kraus <notifications@github.com>\nwrote:\n\n> @MaximoTrinidad <https://github.com/maximotrinidad> @qt3m45su0najc7\n> <https://github.com/qt3m45su0najc7> what is the PowerShell Core issue in\n> this? I will re-open the issue if it is something wrong in PS Core, but\n> reading through the thread it looks like nothing related to this project is\n> the cause. It appears a module that is not yet made compatible with PSCore\n> is trying to be used in PSCore or an undocumented workaround is trying to\n> be used to emulate similar functionality. If it's not a PSCore issue, the\n> problem should be worked out in another more appropriate repo or forum.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/PowerShell/PowerShell/issues/6000#issuecomment-360501935>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAcbOs07KptJKh44Np2KedcEWxQ_4Jyzks5tOJ6ygaJpZM4Rqe3b>\n> .\n>\n",
      "created_at": "2018-01-25T18:42:29Z",
      "updated_at": "2018-01-25T18:42:29Z"
    },
    {
      "author": "qt3m45su0najc7",
      "author_association": "NONE",
      "body": "Looks like this issue isn't going to be addressed by someone with expertise to solve it.",
      "created_at": "2018-01-30T23:02:14Z",
      "updated_at": "2018-01-30T23:02:14Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Unfortunately, this is not going to be solved any time soon.  The SQLServer module issue is known as it has been already addressed for some time.  It only works in Windows PowerShelI. \r\n\r\nI have exhausted all my resource to troubleshoot the SMO package issue which I still don't understand why is not working in your system.\r\n\r\nNow, leaving this issue open, it still has visibility and it will not be ignored nor deleled (it hasn't been mark closed yet).\r\n\r\nBut, I'm sure this module is on the list to be considered for fix but will be done by the SQLServer team outside of Github (it will take time).\r\n\r\nThat's all I can say for now!\r\n:(\r\n\r\n\r\n\r\n",
      "created_at": "2018-01-30T23:52:31Z",
      "updated_at": "2018-01-31T00:24:22Z"
    },
    {
      "author": "arahja",
      "author_association": "NONE",
      "body": "I ran into the same issues in a similar situation when attempting to install the package using nuget. I am running powershell 6.0.1 as admin as well. To work around the error (\"PackageManagement\\Install-Package : No match was found for the specified search criteria and module name 'Microsoft.SqlServer.SqlManagementObjects'\") when attempting to install the package, I was able to use [this thread](https://github.com/OneGet/oneget/issues/172) which provided me with these commands as a work around:\r\n\r\n\\## Search for the \"Microsoft.SqlServer.SqlManagementObjects\" on nuget\r\n`Find-Package Microsoft.SqlServer.SqlManagementObjects -Source https://www.nuget.org/api/v2/ -provider nuget`\r\n\r\n\\## This is how you can install the \"Microsoft.SqlServer.SqlManagementObjects\" package on powershell core\r\n\\## \"-Source https://www.nuget.org/api/v2/ -provider nuget\" is the most important part here\r\n`Install-Package Microsoft.SqlServer.SqlManagementObjects -RequiredVersion '140.17199.0' -Source https://www.nuget.org/api/v2/ -provider nuget`\r\n\r\nBe aware this will install quite a few packages as dependencies.\r\n\r\nHopefully this is helpful to others",
      "created_at": "2018-03-20T15:11:41Z",
      "updated_at": "2018-03-20T15:28:39Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@arahja,\r\n\r\nCheck my blog post on \"Streamlining SQL Server Management Objects (SMO) in PowerShell Core\": http://www.maxtblog.com/2017/11/streamlining-sql-server-management-objects-smo-in-powershell-core/ \r\n\r\nThis new SMO version for PSCore is: Microsoft.SqlServer.SqlManagementObjects.140.17224.0\r\n```\r\n## - Help find and save the location of the SMO dll's in a PowerShell variable:\r\n$smopath = Join-Path ((Get-Package Microsoft.SqlServer.SqlManagementObjects).Source `\r\n\t| Split-Path) (Join-Path lib netstandard2.0)\r\n\r\n# Add types to load SMO Assemblies only:\r\nAdd-Type -Path (Join-Path $smopath Microsoft.SqlServer.Smo.dll)\r\nAdd-Type -Path (Join-Path $smopath Microsoft.SqlServer.ConnectionInfo.dll)\r\n\r\n## - (Connection to Linux SQL Server multi-instance sample)\r\n$SQLServerInstanceName = 'mars'; $SQLUserName = 'sa'; $sqlPwd = '$SqlPasswrd01!';\r\n\r\n## - Prepare connection passing credentials to SQL Server:\r\n$SQLSrvConn = New-Object Microsoft.SqlServer.Management.Common.SqlConnectionInfo($SQLServerInstanceName, $SQLUserName, $SqlPwd);\r\n$SQLSrvObj = new-object Microsoft.SqlServer.Management.Smo.Server($SQLSrvConn);\r\n\r\n## - SMO Get SQL Server Info:\r\n$SQLSrvObj.Information `\r\n| Select-Object parent, platform, product, productlevel, `\r\n\t\t\t\tOSVersion, Edition, version, HostPlatform, HostDistribution `\r\n| Format-List;\r\n```\r\n:)",
      "created_at": "2018-03-21T03:03:21Z",
      "updated_at": "2018-03-21T03:03:21Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Just an FYI for those who been following this issue.\r\n\r\nRecently the newer version of SQLServer Module, from the PowerShell Gallery, can be installed and use cross-platform on: Windows, Linux Distro, and MacOS.\r\n\r\nAlso, by importing this module, you can script with SMO too.\r\n\r\nCheck my latest blog post: http://www.maxtblog.com/2018/05/pscore6-sqlserver-module-expanding-the-barrier-cross-platform/\r\n\r\n![sqlservermod_xplat_05_2018-05-26_10-51-20](https://user-images.githubusercontent.com/19892435/40611801-c81709e4-6245-11e8-9cb3-910bdaa4f027.jpg)\r\n\r\n![sqlfunc_02_2018-05-26_12-05-02](https://user-images.githubusercontent.com/19892435/40611810-cf85191e-6245-11e8-9b26-ff824da30d1c.jpg)\r\n\r\n:)\r\n\r\n\r\n",
      "created_at": "2018-05-28T11:07:50Z",
      "updated_at": "2018-05-28T11:07:50Z"
    },
    {
      "author": "swasheck",
      "author_association": "NONE",
      "body": "https://github.com/PowerShell/PowerShell/issues/6000#issuecomment-374634305\r\nthis worked but downloaded a bunch of other things that i just honestly don't need. not only that, but i still can't even USE the module. using linked comment, i'm able to at least download it. following the NuGet instructions (https://www.nuget.org/packages/Microsoft.SqlServer.SqlManagementObjects/140.17283.0) leaves me with this \r\n![image](https://user-images.githubusercontent.com/264587/49398635-379c9400-f6fc-11e8-93d9-e2844c1e6130.png)\r\n\r\nThis isn't even PS Core. It's WIndows 10 build 17763.134. SQL Server tools are installed. \r\n",
      "created_at": "2018-12-03T20:11:14Z",
      "updated_at": "2018-12-03T20:11:14Z"
    },
    {
      "author": "arahja",
      "author_association": "NONE",
      "body": "Since you said that you have installed SQL Server Tools, I would run `Get-Module -ListAvailable` and see if you have the \"SqlServer\" module installed. I'm not sure what you are attempting to accomplish by loading the assemblies over the module. For most tasks the \"SqlServer\" module should have the cmdlets you need.",
      "created_at": "2018-12-03T21:41:09Z",
      "updated_at": "2018-12-03T21:41:09Z"
    },
    {
      "author": "swasheck",
      "author_association": "NONE",
      "body": "@arahja I'm attempting to use the SqlManagementObjects ... specifically the Microsoft.SqlServer.XE.Core.dll ... via powershell. \r\n",
      "created_at": "2018-12-03T22:00:49Z",
      "updated_at": "2018-12-03T22:00:49Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@swasheck,\r\n\r\nJust an FYI\r\n\r\nMicrosoft.SqlServer.SqlManagementObjects is not a module, is a package.  If you're looking to use the PowerShell Module for SQL Server, you do the \"Install-Module -name SqlServer\".  The latest version has the Invoke-SqlCmd working again.\r\n\r\nYou can download the latest preview also by typing:\r\n```\r\nInstall-Module -name SqlServer -AllowPrerelease\r\n```\r\nAnd, this module is already converted to use .NET Core.  So, you can installed it in both Windows PowerShell and/or PowerShell Core.  It works!\r\n\r\n:)",
      "created_at": "2018-12-05T04:43:42Z",
      "updated_at": "2018-12-05T04:43:42Z"
    }
  ],
  "created_at": "2018-01-23T23:26:14Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 6000,
  "state": "closed",
  "title": "Installing PowerShell SQL Server module fails in 6.0 Could not load type 'System.Management.Automation.PSSnapIn'",
  "updated_at": "2018-12-05T04:43:42Z"
}