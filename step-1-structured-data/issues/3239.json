{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3239",
  "author": "mklement0",
  "body": "C-style ternary conditionals would be a handy addition to the language.\r\n\r\nFor instance, instead of writing:\r\n\r\n```powershell\r\nif ((get-date).tostring(\"ss\") % 2) { 'odd'  } else  { 'even' }\r\n```\r\n\r\none could write:\r\n\r\n```powershell\r\n(get-date).tostring(\"ss\") % 2   ?   'odd'   :    'even'\r\n```\r\n\r\nIt would also relieve a long-standing disappointment:\r\n\r\n> At Microsoft, \u201cto ship is to choose\u201d.  One of the things we were very disappointed in not being able to ship in V1.0 is a ternary operator.\r\n\r\nFrom a [PowerShell Team blog post](https://blogs.msdn.microsoft.com/powershell/2006/12/29/diy-ternary-operator/) dated 29 December 2006.\r\n\r\n---\r\n\r\nRelated: [implement null-coalescence and null-soaking and null-conditional assignments](https://github.com/PowerShell/PowerShell/issues/3240)",
  "closed_at": "2019-09-14T00:24:24Z",
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Note that with the change to allow assignments from statements, the need for a ternary operator is reduced. You can simply do\r\n`$var = if ($x) { $x } else { $y }`\r\nIt's not as concise as the ternary operator but is arguably more readable.",
      "created_at": "2017-03-02T21:23:24Z",
      "updated_at": "2017-03-02T21:23:24Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Yes, though you still have to use `$(...)` _in addition_ if the conditional is part of a larger expression:\r\n\r\n```powershell\r\n'The current sec. is ' + $(if ((get-date).tostring(\"ss\") % 2) { 'odd'  } else  { 'even' })\r\n```\r\n\r\nvs.\r\n\r\n ```powershell\r\n'The current sec. is ' + ((get-date).tostring(\"ss\") % 2   ?   'odd'   :    'even')\r\n```\r\n\r\nI know that readability is in the eye of the ... uh ... reader, but I personally find the latter visually easier to parse, and having to type less is always a bonus.\r\n\r\nWith such a frequently used feature, I think remembering the more abstract ternary syntax wouldn't be a problem (and, of course, people can continue to use `if`, if they prefer).\r\n\r\n\r\n\r\n",
      "created_at": "2017-03-02T21:38:55Z",
      "updated_at": "2017-03-02T21:38:55Z"
    },
    {
      "author": "thezim",
      "author_association": "CONTRIBUTOR",
      "body": "@mklement0 I have to agree later has less cognitive load.",
      "created_at": "2017-03-02T22:10:11Z",
      "updated_at": "2017-03-02T22:10:11Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "This is definitely on my top list to. \r\n@BrucePay, are there any reasons that this would be a bad idea? Or is it just about 'to ship is to choose' ?",
      "created_at": "2018-02-05T13:58:33Z",
      "updated_at": "2018-02-05T13:58:33Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "In the past, this feature request was turned down as being harder for less experienced scripters to understand, and that the expression form of the if statement was a clearer, though more verbose alternative.\r\n\r\nMy personal perspective: if the language was just for me, I'd probably have added it a long time ago. But ... I find many **developers** don't use it, which actually suggests there is some truth to the hypothesis that less experienced folks will have trouble with the ternary operator.",
      "created_at": "2018-02-05T20:46:33Z",
      "updated_at": "2018-02-05T20:46:33Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr: \r\n\r\nIt's worth distinguishing between _active use_ of a feature vs. the ability to _recognize_ and understand it.\r\n\r\nClearly, everyone gets to choose whether to use such a feature, but are you saying that \"have trouble with\" means that less experienced folks won't _understand_ it when they see it in the code of others?\r\n\r\n\r\n",
      "created_at": "2018-02-11T04:10:33Z",
      "updated_at": "2018-02-11T04:10:33Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@mklement0 - we introduced `$psitem` as an alias for `$_` because of sufficient feedback that `$_` was cryptic and confusing, so I do believe the ternary operator would be difficult for some less experienced people to understand.",
      "created_at": "2018-02-12T16:45:51Z",
      "updated_at": "2018-02-12T16:45:51Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "On the other hand, there are many elements in PowerShell that are confusing to beginners, or even to quite experienced developers. \r\n\r\nAs with any other language, it takes some effort to learn the syntax and meaning of language constructs.\r\nI don't know if I think the ternary operator is especially difficult to grasp. \r\n\r\nDo you have data suggesting that it is?\r\n",
      "created_at": "2018-02-12T17:39:00Z",
      "updated_at": "2018-02-12T17:39:00Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I believe the only data is anecdotal, but the criticism applies to any cryptic language - bash, perl, etc.\r\n\r\nAnd to be clear, I was providing the historical context. Maybe PowerShell is ubiquitous enough now that more cryptic syntax won't affect adoption.\r\n\r\nAlso keep in mind - some terse languages still use if/then as the ternary operator, e.g. F#.\r\n\r\nThat said, maybe it's possible to use fewer characters and not be too cryptic:\r\n\r\n```\r\nif ($x) { $y } else { $z }\r\n$x -then $y -else $z\r\n$x ? $y : $z\r\n```\r\n\r\n`-then/-else` fits well with PowerShell syntax - but, an operator (or operators if it's too confusing to think of as a single operator), you gain the benefit of not needing parens and braces.\r\n\r\nThen again, this is asking for trouble similar to `foreach` vs. `foreach-object`. but maybe it's not as bad, I don't know.",
      "created_at": "2018-02-12T21:43:59Z",
      "updated_at": "2018-02-12T21:43:59Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr:\r\n\r\nCryptic in homeopathic doses is healthy: \r\n\r\nPowerShell is commendably not cryptic overall, but in some cases offers cryptic syntax as a concise _alternative_ (you still can be verbose if desired) for _frequently used_ constructs, notably `?` for `Where-Object` and `%` for `ForEach-Object`.\r\n\r\nProviding `$x ? $y : $z` as a concise alternative to `if ($x) then { $y } else { $z }` to me is in the same spirit.\r\n\r\nThe cryptic aspect is ameliorated by `?` being reminiscent of a _question_ and therefore suggesting a conditional (albeit one _preceding_ the `?` in this case), and - more importantly - being _a potentially familiar construct from several other languages_, with the same fundamental semantics.\r\n\r\nYou don't get the same benefit with `$x -then $y -else $z`: it is not familiar.\r\n\r\nAlso, while many PS operators do have symbolic names, many do not: `* / + % ...`\r\nThese are inherently cryptic too, we just don't perceive them that way anymore, because they are so familiar and ubiquitous.\r\n\r\nMy sense is that  `$x ? $y : $z` too is already familiar to many, and will become even more so once introduced into the language, given the frequent need for concise conditionals.\r\n\r\n\r\n",
      "created_at": "2018-02-19T20:20:00Z",
      "updated_at": "2018-10-21T21:38:54Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Note that you'll be pretty limited in what you can specify with this operator. In particular you won't be able to use commands unless you wrap them in parenthesis:\r\n```\r\n(test-path foo.txt) ? (get-content foo.txt) : (get-content bar.txt)\r\n```\r\ncompared with\r\n```\r\nif (test-path foo.txt) {get-content foo.txt} else {get-content bar.txt}\r\n```\r\nor\r\n```\r\nget-content ((test-path foo.txt) ? \"foo.txt\" : \"bar.txt\")\r\n```\r\nvs\r\n```\r\nget-content $(if (test-path foo.txt) {\"foo.txt\"} else {\"bar.txt\"})\r\n```\r\nTo my mind, there is little advantage in terms of brevity and a distinct disadvantage in readability. The ternary operator is far less interesting when you have an expression oriented language. When I started on the language 16 years ago, adding the ternary operator seemed obvious coming from a C background. Now I'm glad we never added it. It just feels like clutter.",
      "created_at": "2018-04-24T01:45:02Z",
      "updated_at": "2018-04-24T01:45:02Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> In particular you won't be able to use commands unless you wrap them in parentheses:\r\n\r\nThat applies to _any_ PowerShell operator.\r\n\r\nNot all PowerShell statements involve commands, and when they do, users already know that `(...)` is the price of admission for commands (in most cases).\r\n\r\nIn your own example, to me `((test-path foo.txt) ? \"foo.txt\" : \"bar.txt\")` beats `$(if (test-path foo.txt) {\"foo.txt\"} else {\"bar.txt\"})`, both for the obscurity of needing `$(...)` and the noise introduced by the curly braces.\r\n",
      "created_at": "2018-04-24T01:59:12Z",
      "updated_at": "2018-04-24T01:59:12Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Maybe it's just me but I find this:\r\n```\r\nget-content ((test-path foo.txt) ? \"foo.txt\" : \"bar.txt\")\r\n```\r\n**way easier** to visually scan/parse than this:\r\n```\r\nget-content $(if (test-path foo.txt) {\"foo.txt\"} else {\"bar.txt\"})\r\n```\r\nMy only complaint about this issue is that if you're going to do ternary `?:` then you should also do null-coalescing `??`:\r\n```\r\n$logDir = $env:LogDir ?? \"$PSScriptRoot\\Log\"\r\n```\r\nI've seen a number of Invoke-Ternary and Invoke-NullCoalescing implementations in the wild (e.g. https://github.com/dahlbyk/posh-git/blob/master/src/Utils.ps1#L12).  That kind of indicates there is a general desire for such a feature baked into the language.",
      "created_at": "2018-04-24T02:47:23Z",
      "updated_at": "2018-04-26T00:47:03Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@rkeithhill: I agree; re null-coalescing: there is an issue already, which also covers null-soaking: #3240",
      "created_at": "2018-04-24T02:50:01Z",
      "updated_at": "2018-04-24T02:50:01Z"
    },
    {
      "author": "tibmeister",
      "author_association": "NONE",
      "body": "So the argument of less experienced coders wouldn't be able to easily use a null-coalescing or ternary code statement I think is a little short-sighted.  There's no requirement to use these \"advanced\" features and if a programmer can't read the code because they lack the experience, then personally that's my cue that I need to learn something new really quick.  \r\nWhen I first saw a ternary in C# I was like WTF is this fresh hell MS has introduced, until I took a few minutes to read up on this, which then I was hooked.\r\n\r\nPractical example in POSH, I have this line:\r\n`$mc_object = ($Message.fields | where Name -Match appname).Content`\r\nwhich is fine and dandy except when the $Message object does not have a filed property that has a name of \"app name\", and since I don't control the JSON formatted data this comes from, I have to determine what to do.\r\n\r\nSo with a null-coalesce operations all I have to do is add `?? \"\"` at the end to make sure that the $mc_object always was a valid string, even if the original setter was null.  Otherwise, I would have to do some different techniques to accomplish what 4 keystrokes can do, such as \r\n`$mc_object = if(-not ($Message.fields | where Name -Match appname).Content)){\"\"}else{($Message.fields | where Name -Match appname).Content}`\r\nThat to me is very unreadable, but then I can clean this up a little bit by doing something like this, which is what I am doing.\r\n`$mc_object = ($Message.fields | where Name -Match appname).Content\r\nif(-not $mc_object){$mc_object = \"\"}`\r\n\r\nWhile not terrible, it's a heck of a lot more than 4 keys being pressed to null-coelasce.\r\n\r\nAnyhow, I definitely vote for ternary and null-coelasce in Powershell, it adds some very advanced features and just makes Powershell more compelling to use in the \"core\" form on any system.",
      "created_at": "2018-07-14T04:17:50Z",
      "updated_at": "2018-07-14T04:17:50Z"
    },
    {
      "author": "Halkcyon",
      "author_association": "NONE",
      "body": "@lzybkr I have yet to see anyone actually adopt `$PSItem`.  I work on a decently large team of people who write scripts and they still all use `$_`, even the less-experienced PowerShell users.\r\n\r\n@tibmeister or....\r\n\r\n    if (-not ($mc_object = $Message.fields.where{$_.Name -match 'appname'}.Content)) {\r\n        $mc_object = ''\r\n    }\r\n\r\nAssignments as expressions will passthru, but are incredibly unreadable.",
      "created_at": "2018-07-24T23:47:44Z",
      "updated_at": "2018-07-24T23:51:15Z"
    },
    {
      "author": "RichardSiddaway",
      "author_association": "NONE",
      "body": "I regularly use $psitem\r\n\r\nOver a number of years of judging Scripting Games $psitem was used a lot in the answers",
      "created_at": "2018-07-25T08:01:18Z",
      "updated_at": "2018-07-25T08:01:18Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@RichardSiddaway: If we look on Stack Overflow at PowerShell-tagged questions _asked since 2014_, we get (as of this writing):\r\n* ca. 106,000 [posts tagged `powershell`](https://stackoverflow.com/search?q=%5Bpowershell%5D+created%3A2014..2018) (this includes answers too; if you limit the query to questions, you get about 46,000)\r\n* of these, 71 [contain the word `PSItem`](https://stackoverflow.com/search?q=%5Bpowershell%5D+created%3A2014..2018+PSItem) (13 of them are questions), i.e., less than 1%\r\n\r\n`$PSItem` was introduced in v3 in September 2012, so to be safe I chose 2014 as the start date for the query.\r\n\r\nWhile this is not an exact metric, - the site doesn't allow you to search for `$_` or `_`, unfortunately, and I'm sure there are questions that contain _neither_ `$_` nor `$PSItem`, and  pre-v3 questions are still being asked - I still think it's safe to conclude that `$_` is used far more frequently than `$PSItem`.\r\n\r\nHowever, the larger point is that there's no need to _choose_:\r\n\r\nJust as `$PSItem` and `$_` happily coexist, so do `ForEach-Object` and `%`, `Where-Object` and `?`, ...:\r\n\r\n `$a ? $b : $c` can coexist with `if ($a) { $b } else { $c }` / `$(if ($a) { $b } else { $c })`\r\n\r\nAs for recapping the _positive_ reasons to introduce `$a ? $b : $c`\r\n\r\n* more concise, less visually cluttered, using syntax familiar to most programmers.\r\n\r\n* more efficient, because there is no need for `$(...)`, which `if` statements need in order to allow their use as part of a larger expression (which is noisier, less efficient, and can have unintended side effects)\r\n\r\nAs for the obscurity concern:\r\n\r\nSomeone writing _expressions_ (as opposed to merely _invoking commands_ with (simple) arguments) can be assumed to have some developer experience, and my (anecdotal) sense is that most developers at least _recognize_ `$a ? $b : $c` as a condensed `if` statement, whether or not they actively use it.\r\n\r\nEven if they don't, however, it's easily explained, and aside from the use of non-obvious _symbols_, the conceptual complexity is the same as that of an `if ($a) { $b } else { $c }`, and even less than \r\n`$(if ($a) { $b } else { $c })`\r\n\r\nAssuming that it catches on once introduced - certainly, this discussion shows that there's demand for it - encountering it frequently will make it a familiar and easily recognizable idiom (that is more concise, easier to type and, at least to me and a few others here, more readable)  - just like most people seem to prefer `$_` over `$PSItem`.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-07-25T16:01:05Z",
      "updated_at": "2018-07-25T16:01:05Z"
    },
    {
      "author": "tibmeister",
      "author_association": "NONE",
      "body": "mklement0, you have a very awesome example and I think demonstrates the point clearly, thank you.",
      "created_at": "2018-07-26T04:15:34Z",
      "updated_at": "2018-07-26T04:15:34Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Rereading and revisiting this and looking at some of the questions, I find myself leaning more towards the slightly more verbose syntaxes suggested:\r\n```powershell\r\n$value = $a -eq $b -then $trueVal -else $falseval\r\n```\r\nor, for a more semantically readable syntax:\r\n```powershell\r\n$value = $trueVal -if $a -eq $b -else $falseVal\r\n```",
      "created_at": "2018-10-24T17:52:26Z",
      "updated_at": "2018-10-24T17:52:26Z"
    },
    {
      "author": "Halkcyon",
      "author_association": "NONE",
      "body": "@vexx32 While I don't mind your first example, I find the condition in the middle of an expression extremely heavy.",
      "created_at": "2018-10-24T18:57:48Z",
      "updated_at": "2018-10-24T18:57:48Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, I think I tend to agree, but it *does* read slightly more... smoothly. But I'd still tend to go to the first.",
      "created_at": "2018-10-24T19:13:19Z",
      "updated_at": "2018-10-24T19:13:19Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Given that PowerShell is intended to be an \"on ramp\" language to C#, I think using `? :` is the way to go.  Even JavaScript uses this syntax and it is one of the most popular languages these days.  :-)",
      "created_at": "2018-10-24T22:02:43Z",
      "updated_at": "2018-10-24T22:02:43Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Agreed, @rkeithhill, both for the familiarity of the construct from several other languages _and_ the desire to also have [null-coalescing, null-soaking, and null-conditional assignments](https://github.com/PowerShell/PowerShell/issues/3240), which in C# are based on `?` too.\r\n\r\nThe latter two - e.g. `$foo?.bar` and `$var ?= 'default val'` - aren't really possible without a symbol-based representation, and even for null-coalescing `$a ?? 'value-if-null'` seems preferable to something like `$a -elseifnull 'value-if-null'`.\r\n\r\nRemember that `?`, as a frequently used alias for `Where-Object`, is already firmly entrenched as representing a _conditional_, so transferring that knowledge to variations of its use seems logical.\r\n\r\n",
      "created_at": "2018-10-25T02:39:40Z",
      "updated_at": "2018-10-25T02:44:02Z"
    },
    {
      "author": "RichardSiddaway",
      "author_association": "NONE",
      "body": "Is PowerShell really an on-ramp to C# ?   i know that was a stated intent 10-12 years ago but is it really happening?  My suspicion is that for the majority of PowerShell users C# isn't somewhere they want to go.\r\n\r\nif ternary conditionals are going to happen I'd prefer to see something like \r\n$value = $trueVal -if $a -eq $b -else $falseVal\r\n\r\nas mentioned by @vexx32 \r\n\r\nIt makes more sense for the average PowerShell user.\r\n\r\n@mklement0 My comments about $psitem were based on my personal experience. If you've had a different experience it doesn't invalidate my experience\r\n",
      "created_at": "2018-10-25T10:21:47Z",
      "updated_at": "2018-10-25T10:21:47Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "> i know that was a stated intent 10-12 years ago\r\n\r\nYup, at the early MVP summits among other places by Jeffrey.  I haven't heard any different since then.\r\n\r\nAlso, nearly all of the conditional/loop constructs take from C# (and the C lineage), `if {}`, `while {}`, `do {} while`, switch {}`, `for {}`, `foreach {}`, `try {} catch {} finally {}`.  It makes sense to me that this conditional construct would too.",
      "created_at": "2018-10-25T13:13:50Z",
      "updated_at": "2019-07-17T01:01:16Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Those are language keywords, though, @rkeithhill. Operators are entirely different.\n\nI think you'll find that the *vast majority* of operators used in PowerShell to be quite different from their C# equivalents. The PS team have very clearly opted for a more descriptive syntax for the majority of the operators.\n\nI would consider that ternary behaviour should *also* take after the more verbose syntax options available. PowerShell may have been conceived as an 'on-ramp' to C#, but that does not mean it should inherit its more symbolic syntaxes. Indeed, there are many places where that has been painstakingly *avoided*.\n\nConsider, if you would, that your arguments for the symbolic syntax are rooted in *how other common programming languages* represent this concept. PowerShell has *not* been one to go that route in the post, instead preferring to work with as descriptive a syntax as can be made sensible. Merely because those of use who already have experience in C# are familiar with such syntax is *assuredly not* a reason to use it.\n\nIf PowerShell is an 'on-ramp' language to C# or any other language (which, I feel, it does fairly well at this far) then we *need* to consider the lowest common denominator here and think about what the most inexperienced persons would find *sensible* and *intuitive*.\n\nI'm not saying my proffered solutions are *it*, but I think they're possibly headed in a more sensible direction from this perspective.",
      "created_at": "2018-10-25T13:34:19Z",
      "updated_at": "2018-10-25T13:34:19Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32 \r\nHow about these operators?\r\n\r\n```none\r\n.\r\n=\r\n[]\r\n,\r\n+ - * / %\r\n++ --\r\n+=\u00a0 -=\u00a0 *=\u00a0 /=\u00a0%=\r\n```\r\n\r\nGenerally, I agree that following C#'s lead is not always appropriate, and that preserving the spirit of PowerShell should take precedence.\r\n\r\nConversely, I'd advise against deviating from C# in cases where the same syntax does seem like a plausible fit, and to me the proposal at hand - along with #3240 - is an instance of that.\r\n\r\nIf we leave other languages aside:\r\n\r\n* The current semantics of `?` plausibly extend to the proposed operators.\r\n\r\n* If you see value in the _related_ operators being proposed - null-soaking (`?.`), null-coalescing (`??`) and null-conditional assignment (`?=`) - then opting for a verbose ternary form such as `-then / -else` is not an option, if you want all these related operators to reflect a commonality (which they obviously conceptually have).\r\n\r\nThe more exotic a feature is, the more verbosity is important.\r\n\r\nThe more frequently used a feature is, the more concision is important. And the abstractness of a symbol-based representation ceases to be a problem through sheer repeated exposure to the syntax - just as with `*`, for instance.\r\n\r\nAll of the operators being discussed to me fall into the latter category.\r\n\r\n---\r\n\r\n@RichardSiddaway: \r\n\r\n> My comments about $psitem were based on my personal experience. If you've had a different experience it doesn't invalidate my experience\r\n\r\nYes, your comments were based on _personal_ experience.\r\nMine were based on _analyzing data_ from popular Q & A site Stack Overflow, to infer _general_ usage patterns (within the constraints stated) - which is unrelated to my personal experience.\r\n\r\nThe only reason you could perceive my comments as invalidating yours if you believe your personal observations to reflect a \"transpersonal\" truth - a claim you didn't make as such in your comments. Did you mean to make it? If so, we need to discuss _that_.\r\n",
      "created_at": "2018-10-25T14:00:18Z",
      "updated_at": "2018-10-25T14:00:18Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Almost all those operators are mathematical operators with relatively clearly-understood meaning, @mklement0 \ud83d\ude04 \r\n\r\nA ternary operator is a **conditional** operator, and _all_ of PS's Boolean/conditional operators are of the more verbose form: `-and`, `-or`, `-eq`, `-ne`, `-contains`, etc.\r\n\r\nI agree that this shorthand may make sense due to the need for the surrounding features and related operators, however. But I do think that the \"standard\" ternary syntax is not particularly intuitive to those of us who have *not* been repeatedly exposed to it already. ",
      "created_at": "2018-10-25T14:16:53Z",
      "updated_at": "2018-10-25T14:16:53Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> operators are mathematical operators\r\n\r\nAmong those listed, only `+ - * / %` have (purely) mathematical meaning, but the clearly-understood aspect applies to the others too (with the exception of `=`, given that it is often confused with equality testing).\r\n\r\nThe better construct to compare `<condition> ? <if-true> : <else>` to is the `if` _statement_, not other operators. While `if` is definitely more verbose, it is precisely that aspect that the ternary operation is meant to address (in addition to being a true, composable expression, unlike `if`).\r\n\r\nThere is a spectrum of concision, for sure, but, as you say, to accommodate all related operators being proposed in a consistent fashion, a symbol-based syntax makes sense.\r\n\r\n> to those of us who have not been repeatedly exposed to it already.\r\n\r\nWell, that will hopefully change soon. \ud83d\ude01\r\nPoint taken, but (a) the syntax is easily explained and has the same conceptual complexity as an `if` statement, and (b) repeated exposure should help with memory retention.",
      "created_at": "2018-10-25T14:43:42Z",
      "updated_at": "2018-10-25T14:43:42Z"
    },
    {
      "author": "Halkcyon",
      "author_association": "NONE",
      "body": "@mklement0 How do you suggest addressing `?` being a valid name character?  Breaking change?  I consider people on powershell core to be well-versed in powershell as it is and that additional syntax (that has existed in other languages for nearing 50 years) will not be a hindrance.  They can always use `if/else` if they want more verbosity.",
      "created_at": "2018-10-25T15:38:03Z",
      "updated_at": "2018-10-25T15:42:25Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "`?` is only a valid alias in *command* mode; in all variants of *expression* mode it's simply an invalid character at present. There is no collision.\r\n\r\nIf you attempt to enter this code, it will simply error out:\r\n```powershell\r\n$Value = $true\r\n$Value ? \"Hello!\" : \"Goodbye!\"\r\n```\r\nResult:\r\n```diff\r\nAt line:1 char:8\r\n+ $Value ? \"Hello!\" : \"Goodbye!\"\r\n+        ~\r\nUnexpected token '?' in expression or statement.\r\n+ CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException\r\n+ FullyQualifiedErrorId : UnexpectedToken\r\n```",
      "created_at": "2018-10-25T15:53:25Z",
      "updated_at": "2018-10-25T15:55:35Z"
    },
    {
      "author": "Halkcyon",
      "author_association": "NONE",
      "body": "@vexx32\r\n\r\n    $what? # <- example of a valid variable name\r\n\r\nIn his null-soaking example: `$var?.maybenull()` doesn't care that there's a question mark there and if someone is trying to be overly condense, their ternary will break.",
      "created_at": "2018-10-25T15:55:32Z",
      "updated_at": "2018-10-25T15:55:32Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Sorry, that was mainly being discussed in the other issue on that so I didn't think you were referring to that.\r\n\r\nWhether or not we can preclude that from being a valid variable name character is up to the PS team, but I am inclined to be of the opinion that preventing it being considered a variable name character by default would not break much. I don't think I've ever seen anyone actually use `?` as part of a variable name.",
      "created_at": "2018-10-25T15:57:27Z",
      "updated_at": "2018-10-25T15:57:27Z"
    },
    {
      "author": "Halkcyon",
      "author_association": "NONE",
      "body": "@vexx32 Yeah, I should bring that up over there.  This could have additional impacts if not careful with scoping as well (although this is already seen in string expansions so people should be somewhat familiar with it):\r\n\r\n    $var = $test?$thing1:$thing2\r\n\r\nbut I may be splitting hairs too much on edge-cases for those of us who live in the shell.\r\n\r\nCorrected:\r\n\r\n    $var = ${test}?${thing1}:$thing2",
      "created_at": "2018-10-25T16:00:37Z",
      "updated_at": "2018-10-25T16:02:07Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@mklement0 - I don't necessarily agree with:\r\n\r\n> The better construct to compare <condition> ? <if-true> : <else> to is the if statement, not other operators. While if is definitely more verbose, it is precisely that aspect that the ternary operation is meant to address (in addition to being a true, composable expression, unlike if).\r\n\r\nSpecifically, the ternary operator exists because C/C# are statement oriented languages but needed conditional expressions.\r\n\r\nIn expression oriented languages (e.g. F# or Rust), there is no terse syntax as it's considered unnecessary. I think this old [discussion](https://github.com/rust-lang/rust/issues/1698) on Rust *removing* the ternary operator is interesting.\r\n\r\nOne thing I really like in Rust is the use of the `?` operator for error handling. I don't have a concrete proposal to use `?` in PowerShell, but it feels like `?` could be better used for error handling than for a conditional expression.",
      "created_at": "2018-10-25T16:59:26Z",
      "updated_at": "2018-10-25T16:59:26Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@TheIncorrigible1, @vexx32: Yes, [null-soaking would technically be a breaking change, but hopefully of type bucket 3](https://github.com/PowerShell/PowerShell/issues/3240#issuecomment-414827220) (indeed, let's continue the discussion there); for the ternary operation, the suggested use of `{...}` / whitespace before `?` for disambiguation seems to solve that problem.\r\n",
      "created_at": "2018-10-27T18:02:26Z",
      "updated_at": "2018-10-27T18:02:26Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr:\r\n\r\n> Specifically, the ternary operator exists because C/C# are statement oriented languages but needed conditional expressions.\r\n\r\nWell, in PowerShell flow-control statements such as `if` are _half_-expressions; in _simple_ expressions, the proposed ternary operation would be equivalent; in _nested_ ones, it wouldn't:\r\n\r\n```powershell\r\n$foo = $True  ?     1   :      0    # proposed ternary\r\n$foo = if ($True) { 1 } else { 0 }  # equivalent `if` statement\r\n```\r\n\r\n```powershell\r\n$foo = 1 + ($True  ?     1   :      0)   # nesting OK; note that + would have higher precedence\r\n$foo = 1 + if ($True) { 1 } else { 0 }  # !! doesn't work\r\n$foo = 1 + (if ($True) { 1 } else { 0 })  # !! doesn't work, even with parentheses\r\n$foo = 1 + $(if ($True) { 1 } else { 0 })  # only $(...) (and situationally @(...)) work\r\n```\r\n\r\nThe need for `$()` / `@()` is more than just a syntax inconvenience: it has behavioral and performance implications.\r\n\r\nThat said, I _wish_ that statements such as `if` and `foreach` were bona fide expressions (two more examples of things currently failing: `foreach ($i in 1..5) { $i } | Write-Output` or `foreach ($i in 1..5) { $i } > out.txt`).\r\nI don't know enough to judge whether they _cannot be_, however and/or if there's a backward-compatibility concern.\r\nSee also: #6817\r\n\r\n---\r\n\r\nIf `if` were to become a full expression in PowerShell, then you could make the argument that led to the removal of the ternary conditional from Rust: it is then no longer _necessary_.\r\n\r\nHowever, my motivation for this proposal was never _necessity_ - it's about concision, convenience, and readability (visual clutter).\r\n\r\n---\r\n\r\n>  I don't have a concrete proposal to use ? in PowerShell, but it feels like ? could be better used for error handling than for a conditional expression.\r\n\r\nI think that introducing `?` with fundamentally different semantics than in C# would be a source of everlasting confusion.\r\n\r\nSeparately, improvements in PowerShell's error handling are well worth discussing.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-10-27T18:24:53Z",
      "updated_at": "2019-03-13T03:18:09Z"
    },
    {
      "author": "TimCurwick",
      "author_association": "CONTRIBUTOR",
      "body": "If we are looking for a concise but unintuitive alternative to If/Then/Else, we already have one.\r\n```powershell\r\n( 'False', 'True' )[( Test-Condition )]\r\n```\r\nAnd it works in expressions.\r\n```powershell\r\n\"This statement is \" + ( 'False', 'True' )[( Test-Condition )]\r\n```",
      "created_at": "2019-01-09T23:34:10Z",
      "updated_at": "2019-01-09T23:34:10Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@TimCurwick: That's concise (and more obscure), but not equivalent: the proposed ternary conditional would be _short-circuiting_ (just like an `if` statement), whereas your syntax invariably evaluates _both_ alternatives.\r\n\r\nThat said, your syntax is certainly the next best thing available currently, assuming one is aware of the stated limitation.\r\n\r\n",
      "created_at": "2019-01-10T00:53:36Z",
      "updated_at": "2019-03-13T03:14:41Z"
    },
    {
      "author": "Taoquitok",
      "author_association": "NONE",
      "body": "Regarding the discussion of how to display ternary choices in PowerShell, has anyone considered an option in the same format as used by `-replace / .replace()`?  \r\n\r\n    $a -eq $b -ternary $a,$c\r\n    $true -ternary 1,0\r\n    \r\nor  \r\n    \r\n    ($a -eq $b).ternary($a,$c)\r\n    ($true).ternary(1,0)\r\n    \r\nThis would make it a clear that the operator is performing a ternary action by literally calling it **ternary**. It's verbose, but still short to write, and it makes use of the existing common behaviour of ` -operator $first,$second`, so it should feel familiar for powershell users across all ranges of experience\r\n\r\n",
      "created_at": "2019-07-17T11:31:54Z",
      "updated_at": "2019-07-17T11:38:10Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "\ud83e\udd14 it might work, but it would be more awkward than any of the proposed alternatives. `-replace` works that way because it just accepts an actual array of arguments. `.Replace()` is not managed by the PS team -- it's a method on the .NET `System.String` class.\r\n\r\nIf we were to try to use either of those syntaxes it'd mean either an ETS method (which is OK, but tends to add a bit of performance overhead to creation of objects it needs to be attached to) or, with the operator version you propose, we wouldn't be able to easily have an array as an argument.\r\n\r\nWithout special-casing such an operator in the parser, we wouldn't be able to short-circuit. Ternary syntaxes in other languages generally exist because you _don't want_ to actually evaluate both options; the compute time is quicker if only the correct branch needs to be evaluated, rather than having to full evaluate both options (which might come with some significant side effects).\r\n\r\nAnd since that would already require special-casing, it would be more effective to introduce new syntax for it, to minimise confusion (it would be a bit misleading to have something that looks like an array but can't be used like one; it wouldn't support creating the \"array\" ahead of time and passing that as a variable, for example). The fact that method arguments already conflict a bit with array syntax is often already misleading. I don't think I'd want to add a _third_ variant behaviour for commas to the mix.",
      "created_at": "2019-07-17T12:32:28Z",
      "updated_at": "2019-07-17T12:32:53Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee discussed this at length, we don't all agree, but a majority agree that there is value in having this operator and to align with C# syntax keeping `?:` as expectation is that most usage will be from C# developers.  This feature will be Experimental pending real usage feedback.",
      "created_at": "2019-07-31T22:36:51Z",
      "updated_at": "2019-07-31T22:36:51Z"
    },
    {
      "author": "Halkcyon",
      "author_association": "NONE",
      "body": "@SteveL-MSFT So that means the feature is moving forward for 7.0?  Will it break compatibility on variables being able to use `?` in their symbol?",
      "created_at": "2019-08-03T14:27:07Z",
      "updated_at": "2019-08-03T14:27:07Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@TheIncorrigible1 yes, this feature is moving forward in PS7.  It should not break compatibility with use of `?` alias.  There is a concern about the visual acuity of `?` when glancing at a script trying to differentiate `Where-Object` and `ternary`, but we'll see what the user feedback is on this.  In general, we don't expect most users to use this operator but that should not prevent it from moving forward.",
      "created_at": "2019-08-04T15:58:52Z",
      "updated_at": "2019-08-04T15:58:52Z"
    },
    {
      "author": "Halkcyon",
      "author_association": "NONE",
      "body": "@SteveL-MSFT I mean variables with a name of `$isValid?` or similar.  These are valid tokens in the current iteration of PS.",
      "created_at": "2019-08-05T01:30:06Z",
      "updated_at": "2019-08-05T01:30:06Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@TheIncorrigible1: \r\n\r\nRequiring whitespace between the first operand and the `?` solves that problem, as previously suggested, and to me it is a perfectly reasonable solution:\r\n\r\n* The `:` _also_ requires whitespace around it, because something like `$true ? $number:42` wouldn't work, given that `$number:42` would _as a whole_ be interpreted as a single variable reference.\r\n\r\n* While C# _does_ allow `true?number:42`, I don't think we need to - or, indeed, can - worry about compatibility at that level. I personally value concision, but not at the expense of readability; even if I _could_ write `$true?$number:42`, I wouldn't.\r\n\r\n(Backward compatibility will indeed be a problem when (hint, hint) we implement [null-conditional access](https://github.com/PowerShell/PowerShell/issues/3240). PowerShell's permissiveness with respect to identifier names is generally problematic, as @KirkMunro  has recently argued, but [that ship has sailed](https://github.com/PowerShell/PowerShell/issues/10165))",
      "created_at": "2019-08-05T13:29:57Z",
      "updated_at": "2019-08-05T13:33:27Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, I think leaving the whitespace requirement is sensible. It's terse enough as it is, after all. \ud83d\ude01 ",
      "created_at": "2019-08-05T13:59:23Z",
      "updated_at": "2019-08-05T13:59:39Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The prototype tried pretty hard to parse numbers with `?` and `:` in them differently in the context of ternary operator (where we know we are expecting an expression). So you can write things like `${isWindows}?12:47`.\r\nNumbers like `123?` or `1:23` are tokenized as a generic token today, which is not useful at all in the case where we know we are expecting an expression.\r\n\r\nFor variables, no change at all to how `?` or `:` can be used for the variable name, since variable is an expression.",
      "created_at": "2019-08-05T18:21:13Z",
      "updated_at": "2019-08-14T19:46:28Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Good point, @daxian-dbw; I forgot that `{...}` can be used to resolve any variable-name boundary ambiguity, so I guess code golfers could use something like `${isWindows}?${number}:47`",
      "created_at": "2019-08-06T15:26:57Z",
      "updated_at": "2019-08-06T15:26:57Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "Can we close this now? ",
      "created_at": "2019-09-14T00:13:56Z",
      "updated_at": "2019-09-14T00:13:56Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Close via #10367",
      "created_at": "2019-09-14T00:24:24Z",
      "updated_at": "2019-09-14T00:24:24Z"
    }
  ],
  "created_at": "2017-03-02T20:06:34Z",
  "number": 3239,
  "state": "closed",
  "title": "Suggestion: implement ternary conditionals",
  "updated_at": "2019-09-14T00:24:24Z"
}