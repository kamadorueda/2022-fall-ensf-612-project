{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16699",
  "author": "SetTrend",
  "body": "### Summary of the new feature / enhancement\r\n\r\nI'd like to be able to write an extension for Powershell that is able to read the current REPL input line and history in order to provide further user-friendly drop-downs or other code suggestions while the user is editing the line.\r\n\r\nThe reason for such API is that a future extension should **not** require the user to launch a separate piece of software terminal application but should be available right away whenever the user opens any kind of PowerShell terminal (native, Core, VSCode etc.).\r\n\r\nFor example, I'd like to be able to provide parameter suggestions for the `dotnet` CLI command.\r\n\r\n### Proposed technical implementation details (optional)\r\n\r\nAfter the proposed API has been created and established for PowerShell, in order for an extension author to write an extension, the extension author should be required to create a library project in .NET (Core) and implement a `PowerShellReplExtension` interface (to be established).\r\n\r\nThen, after the extension has been compiled, the resulting .NET (Core) `.dll` file should be deployed by just writing the resulting .NET (Core) `.dll` file (and its dependency files) to a sub folder of a common PowerShell extension container folder, like `~\\AppData\\Local\\PowerShell\\Extensions\\REPL\\`.\r\n\r\nWhenever a PowerShell session is started, PowerShell should browse the `~\\AppData\\Local\\PowerShell\\Extensions\\REPL\\` folder for any existing extension (i.e. classes that implement the proposed `PowerShellReplExtension` interface) and trigger those extensions with every user keyboard input. The extensions are then supposed to update the console as required.\r\n\r\nProbably a manifest file may be required to be stored in `~\\AppData\\Local\\PowerShell\\Extensions\\REPL\\` for determining the sequence of extensions called. And there may be a `handled` flag, supposed to be initially set to `false` with every user key stroke and then passed along the extensions which may set this flag to `true` once the first extension has updated the console accordingly.",
  "closed_at": "2022-01-04T20:24:37Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "What you are asking is pretty vague and broad.\r\n- If you intend to handle the user input in a customized way, you can implement the `PSConsoleHostReadLine` function, which is a hook in PowerShell console host for implementing custom read-line functionality. `PSReadLine` leverages it to provide a rich read-line experience, so you can absolutely do something similar.\r\n- If you intend to do things based on user keystrokes, then take a look at `Set-PSReadLineKeyHandler` from `PSReadLine`, which allows you to map keybindings to actions.\r\n- If you want to implement completion for native commands, try `Register-ArgumentCompleter`. It has an example using `dotnet`, which you can find [here](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/register-argumentcompleter?view=powershell-7.2#example-3--register-a-custom-native-argument-completer).",
      "created_at": "2022-01-04T18:48:30Z",
      "updated_at": "2022-01-04T18:48:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "For native apps we could consider wrappers as proposed in #13428.",
      "created_at": "2022-01-04T19:05:09Z",
      "updated_at": "2022-01-04T19:05:09Z"
    },
    {
      "author": "SetTrend",
      "author_association": "NONE",
      "body": "Oh, I didn't know these already existed. `Register-ArgumentComplete` most probably is what I've been looking for.\r\n\r\nThank you for enlightening me!",
      "created_at": "2022-01-04T20:24:37Z",
      "updated_at": "2022-01-04T20:24:37Z"
    }
  ],
  "created_at": "2022-01-04T18:01:45Z",
  "number": 16699,
  "state": "closed",
  "title": "Add extension API for PowerShell REPL",
  "updated_at": "2022-01-04T20:24:38Z"
}