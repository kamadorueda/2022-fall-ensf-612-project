{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2819",
  "author": "rkeithhill",
  "body": "Line continuation in PowerShell suffers from at least two problems:\r\n\r\n1. The backtick char is hard to see in PowerShell script:\r\n```\r\nGet-Module pester ` \r\n| Foreach { Get-ChildItem $_.ModuleBase -recurse about_*.txt} `  \r\n| Foreach {$_.BaseName -replace '\\.help',''} | Select-Object -Unique | Sort-Object\r\n```\r\nEscaping a char like `_` makes the line continuation more obvious:\r\n```\r\nGet-Module pester `_ \r\n| Foreach { Get-ChildItem $_.ModuleBase -recurse about_*.txt} `_  \r\n| Foreach {$_.BaseName -replace '\\.help',''} | Select-Object -Unique | Sort-Object\r\n```\r\n2. The current line continuation mechanism is an escape of a newline (invisible) character.   As a result, line continuation is broken if the user has any sort of whitespace (space or tabs) after the backtick since `<backtick><space>|<tab>` does **not** signify line continuation.  \r\n\r\nThe second issue is impossible to see via casual inspection of script and is common when you copy/paste script from a website. By using an escaped char like `<backtick>_` there is no longer any issue with whitespace after this line continuation char.  That whitespace can safely be ignored by the parser.  For an example of this problem, copy the first script sample above and paste into a PowerShell console.  It will fail to run because there are spaces after the backticks.  :-)\r\n\r\nFWIW I'm not sure escaping `_` is the best choice but I do think escaping a \"visible\" character has the benefit of being more obvious.  I would love to ditch the escaping and just use a dedicated continuation character like `_` (which VB uses) but that is tough with PowerShell where I can have a function named `_`.  \r\n\r\nAnother option might be to use a double escape:\r\n```\r\nGet-Module pester `` \r\n| Foreach { Get-ChildItem $_.ModuleBase -recurse about_*.txt} ``  \r\n| Foreach {$_.BaseName -replace '\\.help',''} | Select-Object -Unique | Sort-Object\r\n```\r\nI believe such a change would not interfere with the existing line continuation mechanism so existing scripts would continue to work.\r\n\r\nMigrated from #2751",
  "closed_at": "2019-06-06T01:46:17Z",
  "comments": [
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Why?  I like the used of the backtick. I've been doing this for a long time and I like it. So, why change something that works?\r\n\r\nBy the way,  a script with code having backtick copy/paste to a console work. I use it all the time.\r\n\r\n:)\r\n\r\n",
      "created_at": "2016-12-01T02:39:43Z",
      "updated_at": "2016-12-01T02:43:35Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "If you read the proposal all the way through, it mentions that this would **not** change the existing mechanism.  You can't because that would break too many scripts. \r\n\r\nThis issue is meant to discuss if it is worth adding another mechanism for line continuation.  I know, right?  Having more than **one** way to do something in PowerShell is SHOCKING I tell you.  Completely unheard of.   ;-)",
      "created_at": "2016-12-01T03:25:19Z",
      "updated_at": "2016-12-01T03:25:19Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "How about adding `...` as an optional continuation token? \ud83e\udd14\r\n\r\nSure, there could be a function with that name, but it would kinda make sense...\r\n(pun intended)\r\n\r\n\r\n\r\n",
      "created_at": "2016-12-01T05:41:00Z",
      "updated_at": "2016-12-01T05:41:00Z"
    },
    {
      "author": "KevinMarquette",
      "author_association": "CONTRIBUTOR",
      "body": "The general best practice is to not use the backtick for line continuation. Some times you can just restructure your command like this:\r\n\r\n    Get-Module pester | \r\n        Foreach-Object { Get-ChildItem $_.ModuleBase -recurse about_*.txt} | \r\n        Foreach-Object {$_.BaseName -replace '\\.help',''} | \r\n        Select-Object -Unique | \r\n        Sort-Object\r\n\r\nThis is also where Here-Strings and Splatting come in handy. I tend to teach people these alternate approaches instead of introducing the backtick.",
      "created_at": "2016-12-01T05:42:02Z",
      "updated_at": "2016-12-01T05:42:02Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "@KevinMarquette Keep in mind that neither breaking on | or using splatting is an option when invoking a native executable with a lot of lengthy parameters.  That said, when I can avoid backtick I too try to avoid it.  ",
      "created_at": "2016-12-01T05:47:52Z",
      "updated_at": "2016-12-01T05:49:08Z"
    },
    {
      "author": "KevinMarquette",
      "author_association": "CONTRIBUTOR",
      "body": "There are options for that too. \r\n\r\n    $MSIArguments = @(\r\n        \"/i\"\r\n        ('\"{0}\"' -f $file.fullname)\r\n        \"/qn\"\r\n        \"/norestart\"\r\n        \"/L*v\"\r\n        $logFile\r\n    )               \r\n    Start-Process \"msiexec.exe\" -ArgumentList $MSIArguments",
      "created_at": "2016-12-01T05:51:42Z",
      "updated_at": "2016-12-01T05:51:42Z"
    },
    {
      "author": "KevinMarquette",
      "author_association": "CONTRIBUTOR",
      "body": "I should clarify that I am not opposed to having a much better way to express line continuation. ",
      "created_at": "2016-12-01T05:53:45Z",
      "updated_at": "2016-12-01T05:53:45Z"
    },
    {
      "author": "stej",
      "author_association": "NONE",
      "body": "I personally don't feel it's necessary to add a new language construct. Instead of that first what came on my mind was better text editors support.\r\n\r\nA lot of tokens is highlighted in editors, so why not backtick (with Cyan, Salmon, or any other nice color)? And the rest of the line behind the backtick might be in other color with meaning \"warning, this might be wrong\".",
      "created_at": "2016-12-01T06:44:40Z",
      "updated_at": "2016-12-01T06:44:40Z"
    },
    {
      "author": "djgrijalva",
      "author_association": "NONE",
      "body": "Backticks are the devil. We all have widescreen monitors nowadays and know how to use the horizontal scroll bar :). Joking aside, I have found long running lines could be broken into separate lines entirely and often run faster since they are avoiding the pipeline. Multiple pipes just equal slow and lazy IMO. ",
      "created_at": "2016-12-01T14:08:03Z",
      "updated_at": "2016-12-01T14:08:03Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "@stej there is help for this in Visual Studio Code.  I put this setting in my user settings file:\r\n```json\r\n \"files.trimTrailingWhitespace\": true,\r\n```\r\nAnd PSScriptAnalyzer has a rule `PSMisleadingBacktick` that will catch these.  But not everyone uses VSCode or PSScriptAnalyzer.",
      "created_at": "2016-12-01T15:51:38Z",
      "updated_at": "2016-12-01T15:51:38Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Nice one @rkeithhill! \r\n\r\nI'm using VS Code for lightweight coding and I like it.  Thanks for sharing the \"files.trimTrailingWhitespace\": true setting. \r\n\r\n:)",
      "created_at": "2016-12-01T17:02:54Z",
      "updated_at": "2016-12-01T17:02:54Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "You most certainly *can* splat to native commands. \r\nThe catch is that native _switch_ commands don't accept \"true\" values ;-)\r\n\r\nE.g.\r\n```posh\r\ntf vc status /format:detailed\r\n```\r\n\r\nCould just as easily be:\r\n```\r\n$fmt = @{\"format\"=\"detailed\"}\r\n$cmd = \"vc\",\"status\"\r\ntf @cmd @fmt\r\n```\r\n\r\nI don't like line continuation characters. I wish we didn't have the one we have (Yay C# -- Boo VB).\r\n\r\nOne problem with line continuation characters is that the only reason for them to exist is to enable people to stay within some arbitrary line width. Next thing you know you've got people trying to make a 249 character file path somehow fit on 80 character lines by splitting it into many strings and appending them together -- as if that actually _improved_ readability.",
      "created_at": "2016-12-01T17:14:42Z",
      "updated_at": "2016-12-01T17:14:42Z"
    },
    {
      "author": "DWSR",
      "author_association": "NONE",
      "body": "The reason that I like staying within some \"arbitrary line width\" is because a lot of devs run portrait monitors. Having a 100 or 120 character limit means that my code fits in the width of the window.\r\n\r\nI would love to have a switch to enable a line terminator as opposed to implementing yet another continuation character.",
      "created_at": "2016-12-01T19:05:54Z",
      "updated_at": "2016-12-01T19:06:04Z"
    },
    {
      "author": "LarryWeiss",
      "author_association": "NONE",
      "body": "Is there any language that has the concept of \"line continuation\" that has done it in a way that is better?\r\n\r\nPowerShell's \"line continuation\" at first implied to me that the line was simply spliced together with the next one (as if the line ending was ignored).  But that's not turned out to be the way it works.  Try\r\n'Power`\r\nShell'",
      "created_at": "2016-12-01T19:07:32Z",
      "updated_at": "2016-12-01T19:07:32Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "It's pretty hard to create a good shell that doesn't have some way to split command lines because they can get pretty long. I chose backtick because it was _similar_ to `\\` (and I couldn't choose `\\` for obvious reasons). Comparing PS to C# is a bit disingenuous they target different usage patterns - C# has a single statement end operator - requiring `;` at the end of every command would be a pretty rotten interactive shell experience.\r\nBruce and I did think *a lot* about this in the early days, and _tried_ to be faithful to Unix shell traditions and concepts, even if we weren't always faithful to their _implementation_, given all the platform considerations.",
      "created_at": "2016-12-01T19:20:41Z",
      "updated_at": "2016-12-01T19:23:25Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "@LarryWeiss \r\n> Is there any language that has the concept of \"line continuation\" that has done it in a way that is better?\r\n\r\nOn the visibility front yes.  Bash and Python use `\\` for line continuation.  But neither tolerates whitespace after `\\`.  VB, which uses `_`, does tolerate whitespace after `_`.",
      "created_at": "2016-12-01T19:48:39Z",
      "updated_at": "2016-12-01T19:48:39Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "some of those characters still have trouble in a windows environment where you're executing a command. `_` is an allowed character for a filename - would I need to escape `_` in this context?\r\n`get-content _`\r\n",
      "created_at": "2016-12-01T20:12:23Z",
      "updated_at": "2016-12-01T20:12:23Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Agreed. That's where an escaped character would be better.",
      "created_at": "2016-12-01T20:16:43Z",
      "updated_at": "2016-12-01T20:16:43Z"
    },
    {
      "author": "spaghettidba",
      "author_association": "NONE",
      "body": "FWIW, a number of international keyboards don't even have the backtick key. In the Italian keyboard it's ALT+TN96 or nothing. FWIW again, many laptops don't have TN at all, so there is NO way to type a backtick",
      "created_at": "2016-12-04T15:19:45Z",
      "updated_at": "2016-12-04T15:19:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What about `##` ?\r\n",
      "created_at": "2016-12-06T18:12:01Z",
      "updated_at": "2016-12-06T18:12:01Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "``` `` ``` is promising - the only existing code it would break is commands (argument-mode statements) that:\r\n\r\n* print a _single_ `` ` ``, _individually_ escaped, \r\n* as the _last_ argument\r\n\r\nE.g., ```Write-Host You should not end a sentence with a `` ```. Existing code doing that strikes me as not too likely.\r\n\r\n@spaghettidba brings up a good point, but it is outweighed by the long tradition of ignoring other languages and keyboard layouts in computing :) (e.g., `\\`, `@`)\r\n\r\n@iSazonov: It's quite likely that `##` is used in existing code for comments, and even if you limited recognition to `##<newline>` sequences, the potential for confusion with a comment is great.\r\n\r\n[Tangent alert]\r\n\r\n@LarryWeiss: Re line continuation in other languages (to add to @rkeithhill's comment):\r\n\r\nGood point; to elaborate on the fundamental difference between POSIX-compatible shells such as Bash and PowerShell with respect to line continuation:\r\n\r\n* In Bash, `\\<newline>` is _removed_ from the lines of a command  / inside a double-quoted string; this allows splitting command lines at arbitrary points and composing single-line strings spread across several lines inside double quotes.\r\n\r\n* In PowerShell, `` `<newline> `` _preserves_ the newline; this requires splitting to occur _between_ arguments and makes use inside a (double-quoted) _string_ pointless, because a `<newline>` by itself will do; to get line continuation with a string in a POSIX sense, you must use the workaround of an _array_ of substrings with unary `-join`.\r\n\r\nNote that in both environments there is _no_ line continuation in _single_-quoted strings, where all content is treated _literally_ (with the exception of `''` in PS) - so, strictly speaking, your example doesn't apply (inside `'...'`, both the `` ` `` and the `<newline>` are retained, and, as with double-quoted strings, just `<newline>` will do).\r\n",
      "created_at": "2017-05-14T02:08:24Z",
      "updated_at": "2017-05-14T15:40:21Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Two years later, I think I'm going to close this.  The current situation is \"somewhat\" sub-optimal but I'm thinking the line-terminator sequence is not worth changing at this point.",
      "created_at": "2019-06-06T01:46:17Z",
      "updated_at": "2019-06-06T01:46:17Z"
    }
  ],
  "created_at": "2016-12-01T00:59:43Z",
  "labels": [
    "WG-Language",
    "Issue-Discussion",
    "Resolution-Answered"
  ],
  "number": 2819,
  "state": "closed",
  "title": "Is it worth adding an additional line continuation mechanism?",
  "updated_at": "2019-06-06T03:43:48Z"
}