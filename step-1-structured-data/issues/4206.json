{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4206",
  "author": "darrenstarr",
  "body": "<!--\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](../docs/FAQ.md).\r\n- Refer to the [known issues](../docs/KNOWNISSUES.md).\r\n- Fill out the following repro template\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\nSee [my respository for tests for reproduction](https://github.com/darrenstarr/cDayZeroDeploy/tree/master/PowershellVerification)\r\n\r\nI have written four tests (with documentation in the README.md which describe the issues with using optional parameters within Configuration. \r\n\r\nExpected behavior\r\n-----------------\r\n\r\nIt should be possible to support $null as a value for parameters on Configurations. So for example :\r\n```\r\nConfiguration Bob {\r\n  Param(\r\n    [Parameter(Mandatory)]\r\n    [string]$Kevin,\r\n    [Parameter()]\r\n    [string]$Stuart = $null\r\n  )\r\n\r\n  cMyFancyResource Minions {\r\n    Name = $Kevin\r\n    FriendsName = $Stuart\r\n  }\r\n}\r\n```\r\n\r\nshould pass the value of $Kevin to $Name on cMyFancyResource and should pass $null to $FriendsName on cMyFancyResource\r\n\r\nActual behavior\r\n---------------\r\n$Stuart (if type[string])is initialized to a zero-length string causing optional parameters on cMyFancyResource to fail\r\n\r\n$Stuart (if type [int]) is initialized to a Zero value integer causing optional parameters on cMyFancyResource to fail\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```\r\nName                           Value                                                                                                                                                              \r\n----                           -----                                                                                                                                                              \r\nPSVersion                      5.1.14393.1358                                                                                                                                                     \r\nPSEdition                      Desktop                                                                                                                                                            \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                                                                                            \r\nBuildVersion                   10.0.14393.1358                                                                                                                                                    \r\nCLRVersion                     4.0.30319.42000                                                                                                                                                    \r\nWSManStackVersion              3.0                                                                                                                                                                \r\nPSRemotingProtocolVersion      2.3                                                                                                                                                                \r\nSerializationVersion           1.1.0.1    \r\n```\r\n\r\nP.S. - I have put a few hours of effort into making series of tests. Please reference the link provided above to clarify as there's a possibility that I haven't done this problem justice in my wording above. The code on that repository is thorough",
  "closed_at": "2017-07-10T21:41:30Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "PowerShell generally won't let you store `$null` in a `[string]`-typed parameter/variable (unlike in C#).\r\n\r\nAn unbound `[string]` parameter defaults to the _empty string_ (`''`).   \r\nSimilarly, on assigning `$null` to a `[string]`-typed variable, the empty string is stored instead.\r\n\r\n`[string]` appears to be special in this regard, because other reference types (as opposed to value types) do default to a genuine `$null`.\r\n\r\nYou can work around the problem by not specifying a type (or using `[psobject]` instead).\r\nIf you want to enforce that if a value is passed that it be of type `[string]` use a  `[ValidateScript()]` parameter attribute as follows:\r\n\r\n```powershell\r\n[ValidateScript({ $_ -is [string] }, ErrorMessage='A -Stuart value must be a string.')]\r\n$Stuart = $null\r\n```\r\nNote that you need PS _Core_ for the `ErrorMessage` attribute to be honored (Windows PowerShell as of v5.1 will ignore it).\r\n",
      "created_at": "2017-07-10T16:06:35Z",
      "updated_at": "2017-07-10T16:06:35Z"
    },
    {
      "author": "darrenstarr",
      "author_association": "NONE",
      "body": "Thanks for the quick feedback and I appreciate the clarification. I'm doing a lot of coding on Powershell these days and am trying to be a \"Powershell purest\" which of course is easier when your competent in a language but as most Powershell code out there is scripting code as opposed to programming, it is often difficult to find good role models to follow.\r\n\r\nSince I'd like to know whe a variable was set or not as well as knowing the value set, I tend to like having $null as an option. Since this seems to not be the case, is there something like a [string?] where I can do something like :\r\n\r\n  Param (\r\n    [string?] $bob\r\n  )\r\n\r\n  if($bob.HasValue) {\r\n    Write-Verbose -Message ($bob.Value + ' rocks the minion world')\r\n  }\r\n\r\nThen when passing a [string?] to another function with a [string?] function, the value and presence would carry?",
      "created_at": "2017-07-10T18:29:33Z",
      "updated_at": "2017-07-10T18:29:33Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "You can use the automatic `$PSBoundParameters` variable to check whether a value was explicitly passed for a given parameter:\r\n\r\n```powershell\r\n> & { param($bob) $PSBoundParameters.ContainsKey('bob') }\r\nFalse\r\n\r\n> & { param($bob) $PSBoundParameters.ContainsKey('bob') } 1\r\nTrue\r\n```\r\n\r\nHowever, typing your parameter `[string]` is not an option, because its implicit default value will be `''`, not `$null`, as discussed.\r\n\r\nYou can use _splatting_ (passing parameters via a hashtable/array variable prefixed with `@`) to pass the bound parameters on to another function (note, however, that `$PSBoundParameters` only contains _explicitly_ bound values, not those stemming from _default values_ - see #3285).\r\n\r\n```powershell\r\n# Pass all explicitly bound parameters through to Foo2 using splatting\r\nFunction Foo { param($bob, $alice) Foo2 @PSBoundParameters }\r\nFunction Foo2 { param($bob, $alice) $PSBoundParameters }\r\n```\r\n\r\nWith the above, you get:\r\n\r\n```powershell\r\n> Foo -alice 1\r\n\r\nKey   Value\r\n---   -----\r\nalice     1\r\n```\r\n\r\nNote how `$bob` was not bound in `Foo2` either.\r\n\r\n",
      "created_at": "2017-07-10T18:53:48Z",
      "updated_at": "2017-07-10T18:54:22Z"
    },
    {
      "author": "darrenstarr",
      "author_association": "NONE",
      "body": "I see... food for thought. Again, thanks a lot for the follow up. \r\n\r\nI've moved to using [string]::IsNullOrEmpty($bob) as opposed to ($null -eq $bob). I've managed to write a composite resource which I think should work for me. I'm still 100% dependent on integration tests as I haven't figured out how to mock class module functions yet. So, I think it should be ok for now.",
      "created_at": "2017-07-10T21:41:30Z",
      "updated_at": "2017-07-10T21:41:30Z"
    }
  ],
  "created_at": "2017-07-10T10:19:47Z",
  "number": 4206,
  "state": "closed",
  "title": "DSC Support for $null optional parameters on configurations (Composite Resources)",
  "updated_at": "2017-08-03T06:30:24Z"
}