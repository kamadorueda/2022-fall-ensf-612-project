{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5993",
  "author": "logg-sar",
  "body": "Hi there\r\n\r\nI have here an file, lets call it sel.txt with no attributes:\r\n**Get-Item .\\sel.txt**\r\n**Directory: D:\\aaa**\r\n**Mode                LastWriteTime         Length Name**\r\n**----                -------------         ------ ----**\r\n**------       19.01.2018     12:02         228747 sel.txt**\r\n\r\nAfter copying the File Copy-Item .\\sel.txt D:\\111\\\r\n\r\n**Get-Item D:\\111\\sel.txt**\r\n**Directory: D:\\111**\r\n**Mode                LastWriteTime         Length Name**\r\n**----                -------------         ------ ----**\r\n**- a----       19.01.2018     12:02         228747 sel.txt**\r\n\r\nWe are using the archive-bit for some purposes, but independently the copy operation shouldn't alter neither a file nor the attributes. IMHO\r\n\r\nEnvironment data\r\n----------------\r\n\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.14393.0\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.14393.0\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n",
  "closed_at": "2020-01-30T11:34:49Z",
  "comments": [
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "`copy` in `cmd` does the exact same thing. I believe this is expected behavior as a \"copy\" is an \"archive\" of the original. If you need to clear the archive bit after a copy you could do:\r\n\r\n```powershell\r\n$archive = [System.IO.FileAttributes]::Archive\r\n\r\n$Item = Copy-Item .\\sel.txt D:\\111\\ -PassThru\r\n$Item  | Set-ItemProperty -Name attributes -Value  ($Item.Attributes -bxor $archive)\r\nGet-Item $Item\r\n```",
      "created_at": "2018-01-23T13:28:50Z",
      "updated_at": "2018-01-23T13:28:50Z"
    },
    {
      "author": "logg-sar",
      "author_association": "NONE",
      "body": "Hi\r\n\r\nyes, your\u00b4e right. Copying with the commandline also changes the attribute.\r\n\r\nHowever - I don\u00b4t understand the sense!\r\nA copied file should be an 100% copy. That he creation date is changed is understandable, but changing of attributes....\r\n\r\nIMHO is he archive-attribute a marker for backup/archiving. If every copied/moved file haves this attribute it would mean that every file will be backed up - or I have double work to remove the attribute.\r\n\r\nWell - if its so I have to live with it. \r\nBut IMHO it doesn't make any sense.",
      "created_at": "2018-01-24T08:32:33Z",
      "updated_at": "2018-01-24T08:32:33Z"
    },
    {
      "author": "PatrickJD",
      "author_association": "NONE",
      "body": "I believe this is more accurately defined as operating system behavior, rather than PowerShell behavior.  The copied file is a new file to the operating system, so the archive bit is set due to this.\r\n\r\n> IMHO is he archive-attribute a marker for backup/archiving. If every copied/moved file haves this attribute it would mean that every file will be backed up - or I have double work to remove the attribute.\r\n\r\nThis is exactly what the archive bit is used for, for backup systems that are archive bit aware.  If you copy a new file in, save a file, move a file, etc, this is set to ensure the file is backed up and makes perfect sense as a default behavior, and I believe your situation where you want the archive bit clear is less common.\r\n\r\nIf anything, I think the best solution to this problem if any changes were to be made to the copy-item cmdlet, it would be to have an argument that clears the archive bit on copy.  Something like Copy-Item -ClearArchiveBit or something like that. ",
      "created_at": "2018-01-24T16:56:22Z",
      "updated_at": "2018-01-24T16:56:22Z"
    },
    {
      "author": "logg-sar",
      "author_association": "NONE",
      "body": ">  I think the best solution to this problem if any changes were to be made to the copy-item cmdlet, it would be to have an argument that clears the archive bit on copy. Something like Copy-Item -ClearArchiveBit or something like that.\r\n\r\nAgree!",
      "created_at": "2018-01-26T08:11:16Z",
      "updated_at": "2018-01-26T08:11:16Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "IMO, this doesn't warrant a change to Copy-Item. You can already perform the action with Set-Item. if ease of use was added anywhere, it would be set-item. then you could do `copy-item @params -PassThru | Set-Item -ClearArchiveBit` ",
      "created_at": "2018-01-26T10:18:11Z",
      "updated_at": "2018-01-26T10:18:11Z"
    }
  ],
  "created_at": "2018-01-23T10:54:50Z",
  "number": 5993,
  "state": "closed",
  "title": "Copy-Item sets the Archive-Bit",
  "updated_at": "2020-01-30T11:34:49Z"
}