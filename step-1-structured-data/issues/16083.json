{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16083",
  "author": "daxian-dbw",
  "body": "# PR Summary\r\n\r\nAdd benchmark to test compiler performance.\r\nThe benchmark uses the `compiler.test.ps1` file in our repo, and try compiling it for every call of `CompileFunction`.\r\n\r\nInstead of compile the `compiler.test.ps1` as a whole, the benchmark extracts all top-level functions from the file and compile those functions individually. This is because:\r\n1. when compiling the whole file, all script in functions or scripts blocks are not really compiled because they only get compiled when they get to run.\r\n2. compiling individual functions from the file make it easy to update the benchmarks. For example, adding functions that targets a specific compiler scenario.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.",
  "closed_at": "2021-09-14T20:51:19Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Instead of compiling the `compiler.test.ps1` as a whole, the benchmark extracts all top-level functions from the file and compile those functions individually. This is because:\r\n1. when compiling the whole file, all script in nested functions or scripts blocks are not really compiled because they only get compiled when they get to run.\r\n2. compiling individual functions from the file make it easy to update the benchmarks. For example, adding functions that targets a specific compiler scenario.",
      "created_at": "2021-09-13T22:53:38Z",
      "updated_at": "2021-09-14T00:13:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I don't see value from one large synthetic perf test (exclusion is startup scenario). \r\nI believe it is more useful to create many tests for simple specific blocks (which can also be used for parser measurements). This way we can check all language constructs and all code paths in the compiler, and easily find bottlenecks and regressions.",
      "created_at": "2021-09-14T03:23:09Z",
      "updated_at": "2021-09-14T03:23:09Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> I believe it is more useful to create many tests for simple specific blocks (which can also be used for parser measurements). This way we can check all language constructs and all code paths in the compiler, and easily find bottlenecks and regressions.\r\n\r\nMy last change made exact that possible. All you need is to add or replace a function in the `compiler.test.ps1`. The test will read all functions from the test file and run benchmark using each individual function (see the results below). The `Use-PSClass` is one example that is sort of targeting PowerShell classes.\r\n\r\nI'd love to have functions that target specific constructs that we are especially interested in, but I also think having some large-size real-world scripts to track the compilation perf as a whole is helpful.\r\n\r\nI'm sure there are better testing script than some of the functions I kept in `compiler.test.ps1`. I simply chose some big-size functions from `build.psm1` and `packaging.psm1`. You are very welcome to replace some of them and add new ones.\r\n\r\n```\r\nBenchmarkDotNet=v0.13.1, OS=Windows 10.0.19043.1165 (21H1/May2021Update)\r\nIntel Core i7-1065G7 CPU 1.30GHz, 1 CPU, 8 logical and 4 physical cores\r\n.NET SDK=6.0.100-preview.6.21355.2\r\n  [Host]     : .NET 6.0.0 (6.0.21.35212), X64 RyuJIT\r\n  Job-NSAOMR : .NET 6.0.0 (6.0.21.43011), X64 RyuJIT\r\n\r\nEnvironmentVariables=POWERSHELL_TELEMETRY_OPTOUT=1  PowerPlanMode=00000000-0000-0000-0000-000000000000  Arguments=/p:DebugType=portable\r\nIterationTime=250.0000 ms  MaxIterationCount=20  MinIterationCount=15\r\nWarmupCount=1\r\n\r\n|          Method | FunctionsToCompile |     Mean |    Error |   StdDev |   Median |      Min |      Max |    Gen 0 |   Gen 1 | Allocated |\r\n|---------------- |------------------- |---------:|---------:|---------:|---------:|---------:|---------:|---------:|--------:|----------:|\r\n| CompileFunction | Get-EnvInformation | 15.20 ms | 0.646 ms | 0.744 ms | 15.16 ms | 14.15 ms | 16.87 ms |  66.6667 |       - |    547 KB |\r\n| CompileFunction |     Install-Dotnet | 14.96 ms | 0.694 ms | 0.799 ms | 15.19 ms | 13.43 ms | 16.33 ms |  62.5000 |       - |    270 KB |\r\n| CompileFunction |      New-PSOptions | 14.70 ms | 0.828 ms | 0.953 ms | 14.55 ms | 13.32 ms | 16.62 ms |  62.5000 |       - |    315 KB |\r\n| CompileFunction |    New-UnixPackage | 16.11 ms | 1.239 ms | 1.427 ms | 15.71 ms | 14.49 ms | 19.38 ms | 166.6667 |       - |    918 KB |\r\n| CompileFunction |     Start-CrossGen | 13.84 ms | 1.377 ms | 1.586 ms | 13.20 ms | 12.37 ms | 17.49 ms |  66.6667 |       - |    349 KB |\r\n| CompileFunction |  Start-PSBootstrap | 14.82 ms | 0.741 ms | 0.823 ms | 14.85 ms | 13.13 ms | 16.66 ms |  62.5000 |       - |    557 KB |\r\n| CompileFunction |      Start-PSBuild | 18.11 ms | 0.766 ms | 0.820 ms | 18.02 ms | 16.91 ms | 20.17 ms | 166.6667 |       - |  1,165 KB |\r\n| CompileFunction |    Start-PSPackage | 19.52 ms | 0.916 ms | 1.055 ms | 19.73 ms | 17.96 ms | 22.02 ms | 272.7273 | 90.9091 |  1,580 KB |\r\n| CompileFunction |     Start-PSPester | 16.55 ms | 0.978 ms | 1.126 ms | 16.41 ms | 14.81 ms | 19.12 ms | 142.8571 | 71.4286 |    835 KB |\r\n| CompileFunction |        Use-PSClass | 13.59 ms | 0.744 ms | 0.857 ms | 13.39 ms | 12.70 ms | 15.53 ms |  62.5000 |       - |    296 KB |\r\n```",
      "created_at": "2021-09-14T16:36:34Z",
      "updated_at": "2021-09-14T21:51:36Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.3.0-preview.1` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.3.0-preview.1)\n",
      "created_at": "2021-12-16T19:57:51Z",
      "updated_at": "2021-12-16T19:57:51Z"
    }
  ],
  "created_at": "2021-09-10T23:43:00Z",
  "number": 16083,
  "state": "closed",
  "title": "Add benchmark to test compiler performance",
  "updated_at": "2021-12-16T19:57:51Z"
}