{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15699",
  "author": "Veverke",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\n\n### Steps to reproduce\n\nIssues [5244](https://github.com/PowerShell/PowerShell/issues/5244) & [7204 ](https://github.com/PowerShell/PowerShell/issues/7204)seem related.\r\n\r\nThis was [originally reported at Unix StackExchange on April 12th.](https://unix.stackexchange.com/q/644673/433212)\r\n\r\n**Description**: I have a multi containerized app orchestrated via docker-compose, where one of these containers performs powershell remote connections to windows machines, periodically.\r\n\r\nIn order to reproduce, I prepared the following code snippet that simulates the work the container mentioned above performs: \r\n\r\n```\r\n$password = \"myPass\"\r\n$domainAndUser = \"myDomainAndUser\"\r\n$computerName = \"myComputerIpAddress\"\r\n\r\nFor ($i = 0; $i -lt 2000; $i++) {\r\n\t$pwSession = convertto-securestring -AsPlainText -Force $password\r\n\t$cred = new-object -typename System.Management.Automation.PSCredential -argumentlist $domainAndUser,$pwSession\r\n\t$session = new-pssession -computername $computerName -credential $cred -Authentication Negotiate #-SessionOption $pso \r\n    \r\n\tInvoke-Command -Session $session -ScriptBlock { 1..1 | foreach { \"$using:i\" + ' completed' ; Start-Sleep 0.5 } } \r\n    Start-Sleep 1\r\n    Remove-pssession $session.Id\r\n}\r\n```\r\n\r\n1. Run the code above in a powershell session (`pwsh`) inside a docker container. \r\n2. Open a new linux terminal and run `docker stats [container name]`\r\n\r\nYou should notice that MEM % column increases over time. In this case, by 0.01 in average, in a matter of dozens of seconds.\r\nOver a couple of hours we confirm that memory consumption had increased above 10%.\r\n\r\n\n\n### Expected behavior\n\n```console\nMemory consumption would not increase over time or at least not all the time, forever.\n```\n\n\n### Actual behavior\n\n```console\nMy remote connection code uses: \r\n1. New-PsSession to open a session\r\n2. Invoke-Command on that session\r\n3. Remove-PsSession on that session\n```\n\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Linux 5.4.0-77-generic #86-Ubuntu SMP Thu Jun 17 02:35:03 UTC 2021\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@WG-Remoting:\r\nTo get a good idea of memory use, there should be periodic CLR garbage collections.\r\nThe script block changes for each loop iteration, and so the memory increase may be due to script block caching.  Each unique script block is cached per PowerShell session.  But the cache size is limited (though large), so the memory increase should eventually end in the this case.",
      "created_at": "2021-07-12T21:31:00Z",
      "updated_at": "2021-07-13T16:33:40Z"
    },
    {
      "author": "Veverke",
      "author_association": "NONE",
      "body": "1. Can I control script block caching here? Could not find how in a preliminary search. If possible, should I assume that setting it to a relatively low value would reduce the memory consumption of the app ?\r\n2. Using `dotnet-gcdump` would help me in analyzing whether memory allocation constantly increases over GC \"rounds\" ?",
      "created_at": "2021-07-12T22:19:50Z",
      "updated_at": "2021-07-12T22:20:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Really PowerShell uses some caches to increase performance. The caches is internal and you can not manage its. Also PowerShell can compile script block and PowerShell classes, load modules - all this consumes memory over time and can not be unloaded.",
      "created_at": "2021-07-13T04:09:01Z",
      "updated_at": "2021-07-13T04:09:01Z"
    },
    {
      "author": "Veverke",
      "author_association": "NONE",
      "body": "Thank you both. @iSazonov, what do you mean by cannot be unloaded ? My scenario is: there is a loop that goes on forever, with a delay of a couple of seconds, connects to computers to check if there are tasks to perform. Within the loop PowerShell objects are created - session, invoke command, etc. Should one assume, from what you stated in the end, that **it is an expected** behavior that memory consumption will keep increasing, over and over ? ",
      "created_at": "2021-07-13T06:59:21Z",
      "updated_at": "2021-07-13T07:04:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@Veverke PowerShell can not unload compiled resources like assemblies. \r\nInternally PowerShell has some caches. Most of them are of limited size. So if you run something in cycle you will see increasing memory consumption but not indefinitely. Also GC in .Net Core is too lazy and in some scenarios you can see huge memory consumption but as soon as you stop the script the memory will be freed in a few minutes.",
      "created_at": "2021-07-13T07:19:49Z",
      "updated_at": "2021-07-13T07:20:21Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "With the CLR garbage collector, 'memory consumption' is difficult to determine.  As @iSazonov points out, the CLR uses different heuristics for garbage collection depending on which heap generation an object is placed.\r\nhttps://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals\r\n\r\nOver the years we have done quite a bit of testing of the remote system to ensure resources (managed and unmanaged) are properly cleaned up.  Of course that doesn't mean a leak hasn't creeped in at some point.  The only current issue I am aware of is with implicit remoting that generates large unique script blocks that get cached and use up a lot of memory on the client.  However, the memory usage is ultimately limited since the cache has an fixed size limit",
      "created_at": "2021-07-13T16:47:32Z",
      "updated_at": "2021-07-13T16:47:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> implicit remoting that generates large unique script blocks that get cached and use up a lot of memory on the client\r\n\r\nCan you please point the code? Perhaps we could skip the caching if it makes sense.",
      "created_at": "2021-07-13T17:12:59Z",
      "updated_at": "2021-07-13T17:12:59Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Script block caching is performed at a low level and is not easily skipped from within implicit remoting.  The fix I was thinking of was more along the line of not using unique GUIDs for implicit remoting module names for the same imported modules.",
      "created_at": "2021-07-13T18:08:28Z",
      "updated_at": "2021-07-13T18:08:28Z"
    }
  ],
  "created_at": "2021-06-30T12:11:42Z",
  "number": 15699,
  "state": "open",
  "title": "Periodically remote connecting via New-PsSession from docker container to windows machines seems to leak memory",
  "updated_at": "2021-07-13T18:08:28Z"
}