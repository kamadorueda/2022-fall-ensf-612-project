{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6046",
  "author": "lwsrbrts",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://github.com/PowerShell/PowerShell/blob/master/docs/KNOWNISSUES.md).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\nWindows only. Attempting to start \"pwsh.exe\" (without the path included) using Task Scheduler results in a file not found error. The same with \"Powershell.exe\" works as expected. \r\n\r\n\r\nExpected behavior\r\n-----------------\r\nFor pwsh.exe to run and perform the activities in the arguments, be that a file or whatever.\r\n\r\nActual behavior\r\n---------------\r\nSee #5919 \r\n#5226 is also vaguely related.\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.1\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.1\r\nOS                             Microsoft Windows 10.0.16299\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\nChoosing to define the entire path isn't a solution, only a temporary workaround until the next release of PowerShell Core, then the folder name changes... 6.0.0 to 6.0.1 for example.\r\n\r\nAs per #5919, the resolution would seem to be to create an App Path entry for \"pwsh.exe\" as is in place for \"Powershell.exe\" already - presumably updated/maintained by the Windows installers.",
  "closed_at": "2018-02-07T03:07:40Z",
  "comments": [
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "How are we going to handle side by side installation of 6.0 and 6.1 in the future? I guess the installer needs to have a checkbox to make adding to any sort of PATH or app path optional.\r\nMy proposal would be to have a global `pwsh.exe` similar to `dotnet.exe` that then decided into which specific version to call into, which gets decided using e.g. a `/version` parameter and/or something similar to a `global.json` that contains the major and minor version to be used.",
      "created_at": "2018-01-27T10:42:06Z",
      "updated_at": "2018-01-27T10:43:03Z"
    },
    {
      "author": "lwsrbrts",
      "author_association": "NONE",
      "body": "Ooh, tough one but I guess that also applies to the question \"How would you handle that from the command line anyway?\" - what is the approach for SxS when a user goes in to cmd.exe first and enters pwsh.exe but they have 6.0.x and 6.1.x installed?\r\n\r\nI believe the default \"App Path\" version should always be the latest version to avoid confusion and frustration. If an older version overwrites the PATH or \"App Path\" just because it was installed afterward, there'll be mutiny.\r\n\r\nChoice is the best option so a default checked \"Set as default PowerShell Core version?\" with a \"What does this mean?\" link or something to some documentation may be the best initial choice. In the documentation, it's spelled out that if they wish to schedule tasks using a specific version, they must specify the full path to the binary they want...however it results in the same problem I've had; if an SxS version of say 6.0.1 is upgraded to 6.0.2 and the \"App Path\" entry remains as pointing to 6.1.0, their scheduled tasks with the path to the 6.0.1 version break, as per #5919.\r\n\r\nOne for the community to give an opinion on as something tells me the cost of having a main entry \"exe\" which decides the version to use will cause other compatibility problems and have a cost. I like the idea of a switch in the binary but I've no idea how that would be handled in terms of dealing with looping, runtime, elevation.",
      "created_at": "2018-01-27T11:40:44Z",
      "updated_at": "2018-01-27T11:40:44Z"
    },
    {
      "author": "robsonsobral",
      "author_association": "NONE",
      "body": "The [documentation says](https://docs.microsoft.com/en-us/powershell/scripting/setup/Installing-PowerShell-Core-on-Windows?view=powershell-6) that:\r\n\r\n> You can launch PowerShell via the Start Menu or `$env:ProgramFiles\\PowerShell\\pwsh.exe`\r\n\r\nBut this is impossible with the installation path having version numbers. I just installed [version 6.0.1](https://github.com/PowerShell/PowerShell/releases/tag/v6.0.1) and broke my VSCode configuration.",
      "created_at": "2018-01-27T11:58:36Z",
      "updated_at": "2018-01-27T11:58:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I like idea about AppPath. ~~I think we should _move_ from %PATH% to AppPath. AppPath is for the quick launch of applications while %PATH% is intended to specify the directories in which to perform the search - we do not have to search anything, we have only one executable file.~~ See my [comment below](https://github.com/PowerShell/PowerShell/issues/6046#issuecomment-362521030).\r\n\r\nThe AppPath should be `%ProgramFiles%\\PowerShell\\pwsh.exe`.\r\nSince we put PowerShell in a folder with the version number we need to make a hard link `%ProgramFiles%\\PowerShell -> %ProgramFiles%\\PowerShell-6.0.1`",
      "created_at": "2018-01-27T16:31:53Z",
      "updated_at": "2018-02-02T08:39:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "#6027 the same for Linux",
      "created_at": "2018-01-29T06:26:20Z",
      "updated_at": "2018-01-29T06:26:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We already have [\"App Paths\"](https://github.com/PowerShell/PowerShell/blob/master/assets/Product.wxs#L133) in PowerShell Core msi installer. A problem was that we used HKCU registry. This was fixed in #5915 and now we use HKLM - system wide \"App Paths\".",
      "created_at": "2018-02-02T08:37:54Z",
      "updated_at": "2018-02-02T08:40:51Z"
    },
    {
      "author": "saschanaz",
      "author_association": "NONE",
      "body": "I got 6.0.1 and it unfortunately still uses HKCU. Should I wait for 6.1.x?",
      "created_at": "2018-02-03T10:19:29Z",
      "updated_at": "2018-02-03T10:19:29Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You could use current daily preview builds if you don't need official support from MSFT.",
      "created_at": "2018-02-03T10:25:49Z",
      "updated_at": "2018-02-03T10:25:49Z"
    },
    {
      "author": "saschanaz",
      "author_association": "NONE",
      "body": "I'm waiting for this to be in an official release to implement https://github.com/desktop/desktop/issues/3791.",
      "created_at": "2018-02-03T10:30:10Z",
      "updated_at": "2018-02-03T10:30:34Z"
    }
  ],
  "created_at": "2018-01-27T10:33:29Z",
  "number": 6046,
  "state": "closed",
  "title": "Update installer to add \"App Path\" location for pwsh.exe",
  "updated_at": "2018-02-07T03:07:40Z"
}