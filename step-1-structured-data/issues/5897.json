{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5897",
  "author": "LaurentDardenne",
  "body": "Is it possible to use this class with Powershell core ?\r\nToday I get a System.InvalidProgramException : Common Language Runtime detected an invalid program.\r\n```Powershell \r\n[System.Span[byte]]\r\n# \r\n# IsPublic IsSerial Name                                     BaseType\r\n# -------- -------- ----                                     --------\r\n# True     False    Span`1                                   System.ValueType\r\n\r\n\r\n[System.ReadOnlySpan[char]]\r\n# \r\n# IsPublic IsSerial Name                                     BaseType\r\n# -------- -------- ----                                     --------\r\n# True     False    ReadOnlySpan`1                           System.ValueType\r\n\r\n[byte[]]$Tb=1..5\r\n$Result=[System.Span[byte]]::new($Tb)\r\n# Common Language Runtime detected an invalid program.\r\n# At line:1 char:1\r\n# + $Result=[System.Span[byte]]::new($Tb)\r\n# + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n# + CategoryInfo          : OperationStopped: (:) [], InvalidProgramException\r\n# + FullyQualifiedErrorId : System.InvalidProgramException\r\n\r\n[char[]]$T=@('a','b','c','d')\r\n[System.ReadOnlySpan[char]]::new($T)\r\n# Common Language Runtime detected an invalid program.\r\n# At line:1 char:1\r\n# + [System.ReadOnlySpan[char]]::new($T)\r\n# + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n# + CategoryInfo          : OperationStopped: (:) [], InvalidProgramException\r\n# + FullyQualifiedErrorId : System.InvalidProgramException\r\n\r\n$psversiontable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0\r\nOS                             Microsoft Windows 6.1.7601 S\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0, 5.0, 5.1.10032.0, 6.0.0}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
  "closed_at": "2018-01-16T20:47:58Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If System.Span is stack only based we can not use it in PowerShell Core scripts.",
      "created_at": "2018-01-13T11:23:48Z",
      "updated_at": "2018-01-13T11:23:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Perhaps we should generate a more friendly message instead \"Common Language Runtime detected an invalid program.\"\r\n\r\n/cc @lzybkr @SteveL-MSFT ",
      "created_at": "2018-01-15T06:36:57Z",
      "updated_at": "2018-01-15T06:37:06Z"
    },
    {
      "author": "LaurentDardenne",
      "author_association": "NONE",
      "body": "According the [documentation](https://msdn.microsoft.com/en-us/library/system.invalidprogramexception(v=vs.110).aspx)\r\n>The exception that is thrown when a program contains invalid Microsoft intermediate language (MSIL) or metadata. Generally this indicates a bug in the compiler that generated the program.\r\n\r\nAccording to your answer this seems to be an impossibility under Powersehll core and not a bug.",
      "created_at": "2018-01-15T08:40:13Z",
      "updated_at": "2018-01-15T08:40:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "My thought was that Span<T> is stack-only type and can not be allocated in Heap - in script we haven't a stack.http://adamsitnik.com/Span/#no-heap\r\nThe Issue can be seen as PowerShell Core bug in the sense that we can not support Span<T> in scripts and have to write a good error message.\r\n",
      "created_at": "2018-01-15T10:10:22Z",
      "updated_at": "2018-01-15T10:12:37Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "`Span` is not usable from a PowerShell script. It is possible to support in some limited scenarios, but some things like `Get-Variable` couldn't work on a variable holding a `Span`.\r\n\r\nThat said, there is little advantage to using `Span` in PowerShell other than experimenting with it - if you care about performance (which is implied if you're using `Span`), then you should stick with C#.\r\n\r\nAs for a diagnostic - it's certainly possible to improve, but I might not bother.\r\n\r\nI wouldn't want to disallow any use of `Span`, e.g. `[Span[Byte]].GetMembers()` or `[Span[Byte]] | Get-Member -Static` might still be useful to folks, and a nuanced error would be much harder to implement.\r\n\r\nI suppose we could catch the `Invalid Program` exception and look for the use of `Span` - maybe that's not so bad.",
      "created_at": "2018-01-16T17:36:25Z",
      "updated_at": "2018-01-16T17:36:25Z"
    },
    {
      "author": "LaurentDardenne",
      "author_association": "NONE",
      "body": "Thanks.",
      "created_at": "2018-01-16T20:47:58Z",
      "updated_at": "2018-01-16T20:47:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think this question will arise again and again - we could make the Jason's comment in the documentation.",
      "created_at": "2018-01-17T03:08:07Z",
      "updated_at": "2018-01-17T03:08:07Z"
    }
  ],
  "created_at": "2018-01-13T10:14:03Z",
  "number": 5897,
  "state": "closed",
  "title": "Question about System.Span",
  "updated_at": "2018-10-15T21:44:19Z"
}