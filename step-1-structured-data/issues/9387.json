{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9387",
  "author": "msftrncs",
  "body": "# Steps to reproduce\r\n\r\n```powershell\r\nfunction \\hello {echo hello}\r\nget-content function:\\hello\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\necho hello\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nget-content : Cannot find path 'Function:\\hello' because it does not exist.\r\nAt line:1 char:1\r\n+ get-content function:\\hello\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : ObjectNotFound: (Function:\\hello:String) [Get-Content], ItemNotFoundException\r\n+ FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.GetContentCommand\r\n```\r\n\r\nThis seems to affect all provider path constructs, where the provider doesn't actually have a navigable hierarchy, (`function:`, and `variable:`) and that the '\\\\' character is a valid character.  I also tested using a `/` and on Windows I got the same behavior.  It only seems to affect if that character is used in the first position of the objects name.  (`hello\\` works as expected)\r\n\r\nI couldn't seem to locate a means to escape the leading slash, such as can be done with wildcard operators. (EDIT: while it seems to depend on the exact application, either `\\\\` or `\\\\\\` has been found to work as an escape, but its not consistent, and doesn't work with wildcards)",
  "closed_at": null,
  "comments": [
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "This also fails to work:\r\n\r\n```PowerShell\r\ndir function:?h*\r\n```\r\nIt will find other variations, but not items to which the `?` could match either `\\` or `/`.",
      "created_at": "2019-04-17T20:49:50Z",
      "updated_at": "2019-04-17T20:49:50Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Try `get-content function:\\\\hello` and `${function:\\\\hello}`.\r\n\r\nIndeed, `Get-Childitem` and `Get-Item` apparently cannot find such a function name with wildcards, though `Get-Item -Path function:\\\\hello` works - though, curiously, `Get-item -LiteralPath function:\\\\hello` doesn't and fails quietly.",
      "created_at": "2019-04-17T20:55:07Z",
      "updated_at": "2019-04-17T20:56:26Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "> Try `get-content function:\\\\hello` and `${function:\\\\hello}`.\r\n\r\nNeither work.\r\n\r\nDoubling of `:` is needed, but doesn't work for `\\` or `/`.\r\n\r\nI cannot get the `Get-Item -Path function:\\\\hello` to work either.  It errors that the path does not exist.   just `dir function:` shows that its there, but any attempt to match it fails.",
      "created_at": "2019-04-17T21:07:52Z",
      "updated_at": "2019-04-17T21:08:09Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "@mklement0 did you mean get-childitem works \u2026   just tried `dir function:\\\\hello` and that worked.  Pretty sure dir is get-childitem.",
      "created_at": "2019-04-17T21:09:39Z",
      "updated_at": "2019-04-17T21:09:39Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Yes, `dir` is `Get-ChildItem` - best to call cmdlets by their real name here.\r\n\r\nI assumed that `Get-Item` and `Get-ChildItem` behave the same in this case, which is generally true with non-container items - though I now see that  with `Get-ChildItem -LiteralPath function:\\\\hello` _does_ work (on macOS and Linux - see next point).\r\n\r\nI just realized that my previous examples work on macOS and Linux only; on Windows you need to throw in an additional `\\`; e.g., `Get-Item function:\\\\\\hello` - except with `Get-ChildItem -LiteralPath`.\r\n\r\nI think it's fair to conclude we have a mess on our hands.\r\n",
      "created_at": "2019-04-17T21:23:38Z",
      "updated_at": "2019-04-17T21:23:38Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "I can confirm that on Windows, `${function:\\\\\\hello}` does work.  The first one gets 'root' and the next two form an escape?  Get-Item works the same way.  Get-ChildItem only needs two `\\`.   I can get Get-Content to work only if I pipe the result from Get-Item to it. (`gi function:\\\\\\hello | gc`)\r\n\r\nOne would expect the `provider:` notation to work fairly consistently, in particular where in each situation they are an 'argument' (to almost identical commands).  I don't even remember how I stumbled upon this in the first place.  I am sure it had to do with testing what were acceptable first characters.",
      "created_at": "2019-04-18T00:20:09Z",
      "updated_at": "2019-04-18T17:48:30Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> One would expect the provider: notation to work fairly consistently\r\n\r\nHear, hear.\r\n\r\nTaking a step back:\r\n\r\n* You could argue that non-hierarchical providers should never need a path separator at all.\r\n\r\n* You could argue that `\\` should never have been allowed as a legal char. in function names (and other identifiers) - flexibility is nice, but such permissiveness can lead to conceptual confusion and - clearly - technical problems too.\r\n",
      "created_at": "2019-04-18T13:25:20Z",
      "updated_at": "2019-04-18T13:25:20Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "I just stumbled upon something I failed to look at earlier.\r\n\r\nthe path `function::\\hello` works in all invocations so far.  It is consistent.\r\n\r\nI realized this because that's what `PSPATH` results in when other variations worked in get-childitem and get-item.\r\n\r\nIs this a lack in documentation, that the `:` is supposed to be intentionally doubled?",
      "created_at": "2019-04-18T18:07:31Z",
      "updated_at": "2019-04-18T18:07:31Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Good find, @msftrncs. I personally have never seen the `::` in this context.\r\n\r\nNote that `Get-Item function::\\hell*` (wildcards) still doesn't work, however; ditto with `Get-ChildItem`.\r\n",
      "created_at": "2019-04-18T18:20:11Z",
      "updated_at": "2019-04-18T18:20:11Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "Wildcards work, if the offending character is wildcard'd, ie `get-childitem function::?hel*`.",
      "created_at": "2019-04-18T18:23:09Z",
      "updated_at": "2019-04-18T18:23:09Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "recap:\r\n- `function::` is a provider notation.\r\n- `function:` is a drive notation\r\n- The `function::` provider implements the `function:` drive.\r\n- PowerShell translates drive paths to provider paths with logic that doesn't work for providers that don't actually support hierarchy.  And this translation seems to be implemented with some inconsistency by different commands.\r\n- the 'function::' provider notation still has some issues resolving wildcards, probably because the wildcard provider is still expecting paths with hierarchy separators.",
      "created_at": "2019-04-18T18:29:31Z",
      "updated_at": "2019-04-18T18:30:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Perhaps we could resolve this by limiting chars which can be used in names. It seems we discussed this previously.",
      "created_at": "2019-04-23T10:05:27Z",
      "updated_at": "2019-04-23T10:05:27Z"
    }
  ],
  "created_at": "2019-04-17T20:38:19Z",
  "labels": [
    "Issue-Question",
    "WG-Engine-Providers"
  ],
  "number": 9387,
  "state": "open",
  "title": "provider path notation cannot access objects who's names start with the path separator",
  "updated_at": "2021-12-01T11:29:23Z"
}