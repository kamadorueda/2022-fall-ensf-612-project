{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8235",
  "author": "AlexBillon07",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nclass TestClass {\r\n    [string] hidden $prop\r\n\r\n    [string]Prop() {\r\n        return $this.prop\r\n    }\r\n}\r\n\r\n$obj = [TestClass]::new()\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nGet an error saying you can't have a property and a method with the same name\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```powershell\r\nPS C:\\EDICore> $obj | Get-Member\r\n\r\n\r\n   TypeName: TestClass\r\n\r\nName        MemberType Definition\r\n----        ---------- ----------\r\nEquals      Method     bool Equals(System.Object obj)\r\nGetHashCode Method     int GetHashCode()\r\nGetType     Method     type GetType()\r\nProp        Method     string Prop()\r\nToString    Method     string ToString()\r\n\r\n\r\nPS C:\\EDICore> $obj.Prop()\r\nMethod invocation failed because [TestClass] does not contain a method named 'Prop'.\r\nAt line:1 char:1\r\n+ $obj.Prop()\r\n+ ~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidOperation: (:) [], RuntimeException\r\n+ FullyQualifiedErrorId : MethodNotFound\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0\r\nOS                             Microsoft Windows 6.1.7601 S\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @rjmholt For your collection.",
      "created_at": "2018-11-13T05:14:15Z",
      "updated_at": "2018-11-13T05:14:15Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "[C# disallows this](https://stackoverflow.com/questions/15522242/can-a-property-name-and-a-method-name-be-same-in-c); try compiling the following:\r\n\r\n```csharp\r\n    class Program\r\n    {\r\n        static string Main { get; } = \"Hi\";\r\n        \r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine($\"{Main} World!\");\r\n        }\r\n    }\r\n```\r\n\r\nFrom [The C# Language Specification - ECMA 334](https://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-334%201st%20edition%20December%202001.pdf):\r\n> ### 17.2 Class members\r\n> The name of a constant, field, property, event, or type must differ from the names of all other members declared in the same class.\r\n\r\nThat doesn't necessarily mean PowerShell must also, although I think it's indicative.\r\n\r\n[The Common Language Infrastructure Specification - ECMA 335](https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-335.pdf) has the following to say:\r\n\r\n> ### I.10.2 Overloading\r\n> ...\r\n> Following the rules of the CTS, it is possible for duplicate names to be defined in the same scope \r\nas long as they differ in either kind (field, method, etc.) or signature.\r\n> ...\r\n\r\n> ### CLS Rule 5\r\n> All names introduced in a CLS-compliant scope shall be distinct independent of \r\nkind, except where the names are identical and resolved via overloading.  That is, while the CTS \r\nallows a single type to use the same name for a method and a field, the CLS does not.\r\n\r\nI think it's fair to say that CLS compliance is no longer a consideration. But, given that C# doesn't allow this, I strongly suspect that the current behaviour is by design. Maybe @BrucePay or @lzybkr can shed some light there?",
      "created_at": "2018-11-13T06:04:10Z",
      "updated_at": "2018-11-13T06:04:51Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "The fact that the method `Prop()` is actually registered looks like a bug though -- we should probably fix that and turn this into a specific parse-time error (e.g. `Multiple class members with the same name are not allowed \u261d\ufe0f`).",
      "created_at": "2018-11-13T06:08:58Z",
      "updated_at": "2018-11-13T06:09:24Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "/cc @PowerShell/powershell-committee for discussion",
      "created_at": "2018-11-13T06:11:54Z",
      "updated_at": "2018-11-13T06:11:54Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@rjmholt: +1 on the parse-time error. \r\n\r\nAllowing members of different types to have the same name is asking for trouble with no obvious benefit (and wer're not breaking anything, given that the method cannot be called).\r\n\r\nNote that C# does allow names that differ in _casing_, which we should disallow as well, given PowerShell's case-insensitive nature.",
      "created_at": "2018-11-13T16:15:11Z",
      "updated_at": "2018-11-13T16:15:11Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 @rjmholt looks like this is fairly straightforward to catch at parse-time: https://github.com/IISResetMe/PowerShell/commit/bfd4be766246bdf33a0ffbb027ba66723fe06b49\r\n\r\n![image](https://user-images.githubusercontent.com/7413755/48972584-cbe86600-f02d-11e8-8f73-3aa61ee45f93.png)\r\n",
      "created_at": "2018-11-24T20:14:17Z",
      "updated_at": "2018-11-24T20:14:17Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Cool, @IISResetMe, thanks for taking this on. \r\n\r\nSounds like @lzybkr is already advising you on the implementation (which I'd be ill-equipped to do anyway).\r\n\r\nOne suggestion re the user-facing part: How about mimicking the wording of the C# error message, so as to include the type name too?\r\n\r\n    The type 'myclass' already contains a definition for 'A'\r\n\r\nThough spelling out `method or property` can't hurt:\r\n\r\n    The type 'myclass' already contains a definition for method or property 'A'\r\n",
      "created_at": "2018-11-25T18:26:15Z",
      "updated_at": "2018-11-25T18:27:50Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 moving the mutual check back to `TypeDefiner` (`DefineProperty()` and `DefineMethod()` respectively) makes it way faster and avoids attempts at generating invalid/unusable types should someone pass in an AST generated by a different parser (or by hand)\r\n\r\nhttps://github.com/IISResetMe/PowerShell/commit/5404f94f74af52afbf9630dbfb4a3132ff59c610#diff-640a7359770582f83b945ef2a276d2de",
      "created_at": "2018-11-27T11:18:10Z",
      "updated_at": "2018-11-27T11:18:10Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The PR was already reviewed by @PowerShell/powershell-committee so updating label https://github.com/PowerShell/PowerShell/pull/8372#issuecomment-454982008",
      "created_at": "2019-01-23T17:44:42Z",
      "updated_at": "2019-01-23T17:44:42Z"
    }
  ],
  "created_at": "2018-11-12T13:41:31Z",
  "labels": [
    "Issue-Bug",
    "WG-Engine",
    "Committee-Reviewed"
  ],
  "number": 8235,
  "state": "open",
  "title": "Class : Methods and properties can't have the same name",
  "updated_at": "2019-01-23T17:44:47Z"
}