{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9345",
  "author": "Liturgist",
  "body": "# Summary of the new feature/enhancement\r\n\r\nIt would be helpful to have an -EndOfLine character parameter in order to read files which use a character to indicate the start of comments.\r\n\r\nI want to read a file containing a list of computernames grouped by department. I want to be able to have comment lines to name the groups as well as omit some servers which are known to be unavailable.\r\n\r\n```\r\n# sales\r\nserver1\r\nserver2  #owned by Bill Smith\r\n# shipping\r\n#server3  #down for hardware failure\r\nserver4\r\n```\r\nUsing this list, the following does not work well.\r\n\r\n`Test-Connection -Computername (Get-Content -Path './hosts.txt') -Count 1\r\n`\r\n\r\nI realize that I could filter them explicitly.\r\n\r\n`Test-Connection -Computername (Get-Content -Path '.\\hosts.txt' | ForEach-Object { if (($_ -ne '') -and ($_[0] -ne '#')) { $_ }})\r\n`\r\n\r\nI would like to use:\r\n\r\n`Test-Connection -Computername (Get-Content -Path '.\\hosts.txt' -EndOfLine '#' -DiscardBlankLines)\r\n`",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Dup #3855",
      "created_at": "2019-04-12T10:45:42Z",
      "updated_at": "2019-04-12T10:45:42Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "The #3855 issue is about \"delimiters\" between lines. That is not what this is about.",
      "created_at": "2019-04-12T12:49:36Z",
      "updated_at": "2019-04-12T12:49:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "`EndOfLine` assumes \"delimiter\". If you want \"line filter\" please correct the PR header and description.",
      "created_at": "2019-04-12T13:25:03Z",
      "updated_at": "2019-04-12T13:25:03Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "`EndOfLine` does not assume \"delimiter.\" \"Delimiter,\" for the reasons mklement0 has noted in #3855, is problematic. It is probably a terminology choice that is regretted. But, it was made, so there you are.\r\n\r\nUsing `LineFilter` would not imply the desired result here.\r\n\r\nPerhaps there is a better terminology than `EndOfLine`, but this matches up and would produce the same result as the `eol` setting in cmd.exe FOR statements.",
      "created_at": "2019-04-12T13:45:44Z",
      "updated_at": "2019-04-12T13:45:44Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I definitely like the feature, but I agree that \"end of line\" would cause confusion with \"newline\" , `cmd.exe`'s `for` terminology notwithstanding.\r\n\r\nOmitting the word _comment_ is not an option, I think, but it's tricky to come up with the right name.\r\n\r\n---\r\n\r\nLet's look at `cmd.exe`'s `for /f` behavior first - note that I'm assuming `\"delims=\"` to read each line in full, as `Get-Content` does:\r\n\r\n* `for /f` always, invariably ignores _empty_ lines, but never _blank_ lines (at least 1 char., but all-whitespace)\r\n \r\n* If you add `eol=<char>`:\r\n\r\n  * A line is omitted if and only if it _immediately starts with_ `<char>`\r\n      * Note, however, that _without_ `delims=` and with either the default behavior or with `tokens=...`, `<char>` lines _preceded by whitespace only_ would be ignored.\r\n\r\n  * Therefore, any other occurrence of `<char>` is not special, so that with `eol=#` `server2  #owned by Bill Smith` would be read as-is, for instance, as would `\u00a0\u00a0# no mas`.\r\n\r\nIn short: `eol=<char>` in the context of `for /f` essentially means \"ignore lines that start with [comment character] &lt;char&gt;\".\r\n\r\n---\r\n\r\nGiven that  _single-character_ comment sigils virtually _always_ have _consider-everything-through-the-end-of-the-current-line-a-comment_ semantics, I think we can actually _omit_ that aspect in the naming, and use something like `-CommentChar` instead.\r\n\r\n* To simplify matters, with `-CommentChar` present, we could _invariably_ skip lines that _start with_ the specified character (optionally preceded by whitespace).\r\n\r\n  * That said, separately, a switch for omitting empty and blank lines could be useful, but I'd more simply call it `-NoBlankLines` (mutually exclusive with `-Raw`).\r\n\r\n* However, the bigger question is whether to strip suffixes from lines that contain the comment characters _inside_ a line (that doesn't start with the comment char.); that is, should a line such as  `server2  #owned by Bill Smith` with `-CommentChar '#'` be read as just `server2`?\r\n\r\n  * The problematic aspect is that unconditional stripping assumes that a comment char. _always, unequivocally_ represents the start of a comment, which cannot generally assumed, without knowing a given file's specific format; e.g., with a line such as `foo = \"bar#none\"  # true comment`, the result may be undesired.\r\n\r\n \r\n\r\n\r\n\r\n\r\n",
      "created_at": "2019-04-14T22:54:41Z",
      "updated_at": "2019-04-14T22:54:41Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "Excellent analysis @mklement0. I would be good with both `-CommentChar` and `-NoBlankLines`.\r\n\r\nCould there be a switch `-CommentForce` that would strip from the CommentChar on? Perhaps there is a better name. Yes, the format of the file must be known and not subject to change. We should not violate the \"know your data\" maxim.\r\n\r\n",
      "created_at": "2019-04-17T13:04:00Z",
      "updated_at": "2019-04-17T13:04:00Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "Does this merit further work? What is the process to make such a change?",
      "created_at": "2019-05-15T15:30:55Z",
      "updated_at": "2019-05-15T15:30:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@Liturgist Example in your initial post is not common enough (I mean a standards like csv or tabular data). @mklement0 also pointed out this problem. So I don't see how we could go forward.\r\nI think the best thing we could do is Tabular data\r\nhttps://github.com/PowerShell/PowerShell/issues/3692#issuecomment-299393554\r\nFrom this point of view, Get-Content is not the most suitable place for parsing and filtering.",
      "created_at": "2019-05-16T04:13:20Z",
      "updated_at": "2019-05-16T04:13:20Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "@iSazonov, perhaps it would be good if this were uncommon. There are many files in the world that are process in this way by cmd.exe FOR loops.\r\n\r\nWRT @mklement0's comment about unconditional striping from a -CommentChar, that could be a limitation of the mechanism. I am not sure as to the difficulty of parsing quoted text since I would not call myself a language guy. I would think that it is well-known.\r\n\r\nWhat would doing \"tablular data\" mean? Are you saying that only tab-delimited files could be used?",
      "created_at": "2019-05-16T16:33:56Z",
      "updated_at": "2019-05-16T16:33:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> What would doing \"tablular data\" mean? Are you saying that only tab-delimited files could be used?\r\n\r\nIn short mentioned above standard generalizes CSV format so that you can use any delimiters for \"fields\" and \"lines\". I believe it solves part of what you ask.",
      "created_at": "2019-05-16T17:32:42Z",
      "updated_at": "2019-05-16T17:32:42Z"
    }
  ],
  "created_at": "2019-04-11T22:28:37Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets-Management"
  ],
  "number": 9345,
  "state": "open",
  "title": "Add -EndOfLine character and -DiscardBlankLines parameters to Get-Content",
  "updated_at": "2021-12-01T11:29:59Z"
}