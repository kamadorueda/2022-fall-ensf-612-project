{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2217",
  "author": "vors",
  "body": "This should work:\n\n``` powershell\nclass MyClass {     \n    [object] Filter() {\n        return $null\n    }\n}\n```\n\nCopied from TFS task 1358992\n\nReminder to close this Connect bug if this work gets done: https://connect.microsoft.com/PowerShell/Feedback/Details/1709557\n",
  "closed_at": "2019-06-25T18:04:01Z",
  "comments": [
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "C# has that handy `@class` way to use a keyword as an identifier.  I wonder if there is any punctuation left that PowerShell could use for this? \n",
      "created_at": "2016-09-09T23:04:02Z",
      "updated_at": "2016-09-09T23:04:02Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "I wouldn't think PowerShell needs a special character.  I think PowerShell's general concept of context serves better.   Pretty much all the useful keywords have no other use in `class { }`.  Only `hidden` and `static` would truly be reserved.  Even `base` only has a very specific context it can be used in.",
      "created_at": "2019-03-10T22:07:36Z",
      "updated_at": "2019-03-10T22:07:36Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #9812, which has now been successfully released as `v7.0.0-preview.2`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.2)\n",
      "created_at": "2019-07-17T20:56:33Z",
      "updated_at": "2019-07-17T20:56:33Z"
    }
  ],
  "created_at": "2016-09-09T20:57:26Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Language",
    "Up-for-Grabs",
    "Resolution-Fixed",
    "Hacktoberfest"
  ],
  "number": 2217,
  "state": "closed",
  "title": "Allow (some) method names that happen to be keywords",
  "updated_at": "2019-07-17T20:56:34Z"
}