{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12900",
  "author": "gekidoslair",
  "body": "## Steps to reproduce\r\n\r\n```powershell\r\n\r\nOpen powershell, type cd C:\\Program Files\\\r\n\r\nPress enter. Fails. \r\n\r\n## Expected behavior\r\n\r\nI expect that a command line tool can actually do simple operations like changing a directory without exploding. \r\n\r\n## Actual behavior\r\n\r\nThrows 'invalid argument exception' \r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\nWindows 10\r\n\r\n\r\n<img width=\"864\" alt=\"2020-06-04 09_37_41-Windows PowerShell\" src=\"https://user-images.githubusercontent.com/4552687/83786076-139a7580-a647-11ea-818b-436e03be61d6.png\">\r\n",
  "closed_at": "2020-06-06T02:27:49Z",
  "comments": [
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "this works if you do \r\n\r\n`cd C:\\pr` then hit tab (to tab complete - a feature that I believe came in one of the more recent versions of PowerShell) where it will wrap this to the correct path which is `'C:\\Program Files\\'` in PowerShell and has been the case since v1",
      "created_at": "2020-06-04T17:13:04Z",
      "updated_at": "2020-06-04T17:14:30Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Specifying an argument to a command that has spaces in it can be accomplished in two ways.  First, you can quote the arg e.g.:\r\n```\r\ncd 'C:\\Program Files\\'\r\n```\r\nIn fact, if you type `C:\\Prog<tab>`, PowerShell will tab-complete the path and add the quotes for you.  You can also escape the path e.g.:\r\n```\r\ncd C:\\Program` Files\r\n```\r\nNow you could argue that this one command could be made a wee bit smarter and not require either quoting or escaping.  This can be done.  In the PSCX extension, we supply a `Set-LocationEx` that works the way you expect. Here's the [impl of that function](https://github.com/Pscx/Pscx/blob/81b76cfdb1343f84880e0e2cd647db5c56cf354b/Src/Pscx/Modules/CD/Pscx.CD.psm1#L78) - it uses `$UnboundArguments` to construct the space-separated path.  It also allows you to cd to a file path - it cd's to the file's dir.  ",
      "created_at": "2020-06-04T17:13:17Z",
      "updated_at": "2020-06-04T17:36:53Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "Bash gives \"too many arguments\" if the name has a space and no quotes. Most shells need quotes around most parameters with spaces in. However CMD is odd because `cd program files`  doesn't need quotes , but `Dir program files` won't work unless quotes are added.  I'd take a guess that hasn't changed since OS/2 (and then NT3.1) allowed spaces in file names. It's odd that works anywhere. \r\n\r\n",
      "created_at": "2020-06-04T20:29:49Z",
      "updated_at": "2020-06-04T20:30:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I guess we could implement the magic for Set-Location. This will block adding new positional parameters but it will work with great UX if user pastes such path. Cons - users will expect such behavior for other cmdlet too which is not always possible.\r\nAnother thought is to make PowerShell so smart to understand current paste context and if it is a path than quote inserted string.",
      "created_at": "2020-06-05T03:56:56Z",
      "updated_at": "2020-06-05T03:56:56Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@iSazonov  is there any need?\r\n If you type rather than tab complete a path with a space in, then CMD knows that cd takes only 1 parameter and everything after `\"cd[space]\"` is the directory to change to. dir takes parameters and CMD can't pull the same trick. Running `notepad C:\\program files\\foo\\foo.ini` won't join the two parts of the path together. CD only works because cmd, inherited (via command.com) the cp/m trick of doing some actions inside the command line handler, PSReadline could do it, but \"quote things with spaces in\" is pretty widely understood and quickly learned whereas creating an exception which applies to a single command sets bad expectations.  ",
      "created_at": "2020-06-05T14:44:18Z",
      "updated_at": "2020-06-05T14:44:18Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah I don't really see a need to fix this. It behaves according to all expectations from existing commands. The one exception that was created over 20 years ago isn't a good enough reason to kludge things into working IMO.",
      "created_at": "2020-06-05T14:53:58Z",
      "updated_at": "2020-06-05T14:53:58Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I agree that this doesn't need to be \"fixed\" in PowerShell.  If someone really wants this, there are ways **they** can implement the functionality.",
      "created_at": "2020-06-05T15:23:47Z",
      "updated_at": "2020-06-05T15:23:47Z"
    },
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "> it uses `$UnboundArguments` to construct the space-separated path.\r\n\r\nI see, it uses `[Parameter(ValueFromRemainingArguments=$true)] [string[]] $UnboundArguments` and then `$UnboundArguments -join ' '`.  But this collapses consecutive spaces, unlike `CD` in cmd.exe.\r\n\r\n```\r\nC:\\temp>MKDIR \"hey  there\"\r\n\r\nC:\\temp>CD hey  there\r\n\r\nC:\\temp\\hey  there>\r\n```\r\n\r\nHow would one implement a PowerShell `CD` command that preserves the number of spaces?",
      "created_at": "2020-06-05T17:20:10Z",
      "updated_at": "2020-06-05T17:20:10Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Alternatively, you could pick out the path from `$MyInvocation.Line`. Beware though that the `Line` can have other command before and/or after your cd command e.g. `get-date; mycd C:\\Foo  Bar; get-uptime`",
      "created_at": "2020-06-05T17:46:47Z",
      "updated_at": "2020-06-05T17:48:34Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Alternatively, you could pick out the path from `$MyInvocation.Line`. Beware though that the `Line` can have other command before and/or after your cd command e.g. `get-date; mycd C:\\Foo Bar; get-uptime`\r\n\r\nYeah here's a really basic and flimsy version (partially because it's not carefully written and partially because it uses a non-public API)\r\n\r\n<details>\r\n\r\n<summary>Set-LocationProxy (click to expand)</summary>\r\n\r\n```powershell\r\nusing namespace System.Management.Automation\r\nusing namespace System.Management.Automation.Language\r\n\r\nfunction Set-LocationProxy {\r\n    [CmdletBinding()]\r\n    param(\r\n        [Parameter(ValueFromRemainingArguments)]\r\n        [string[]] $UnboundArgs\r\n    )\r\n    process {\r\n        $extent = [InvocationInfo].\r\n            GetProperty('ScriptPosition', [System.Reflection.BindingFlags]'NonPublic, Instance').\r\n            GetValue($MyInvocation)\r\n\r\n        $ast = [Parser]::ParseInput(\r\n            $extent.StartScriptPosition.GetFullScript(),\r\n            $extent.File,\r\n            [ref] $null,\r\n            [ref] $null)\r\n\r\n        $commandAst = $ast.Find(\r\n            {\r\n                param($a) end {\r\n                    return $a -is [CommandAst] -and\r\n                        $a.Extent.StartOffset -eq $extent.StartOffset -and\r\n                        $a.Extent.EndOffset -eq $extent.EndOffset\r\n                }\r\n            },\r\n            <# searchNestedScriptBlocks: #> $true)\r\n\r\n        $binding = [StaticParameterBinder]::BindCommand($commandAst)\r\n        $elements = $binding.BoundParameters['UnboundArgs'].Value.Elements\r\n        $spacesBefore = [int[]]::new($elements.Count)\r\n        for ($i = 1; $i -lt $spacesBefore.Length; $i++) {\r\n            $prev = $elements[$i - 1]\r\n            $current = $elements[$i]\r\n\r\n            # Doesn't account for comments and probably other things that would skew this.\r\n            $spacesBefore[$i] = $current.Extent.StartOffset - $prev.Extent.EndOffset\r\n        }\r\n\r\n        $sb = [System.Text.StringBuilder]::new()\r\n        for ($i = 0; $i -lt $UnboundArgs.Length; $i++) {\r\n            $spacesToAdd = $spacesBefore[$i]\r\n            if ($spacesToAdd) {\r\n                $null = $sb.Append(' '[0], $spacesToAdd)\r\n            }\r\n\r\n            $null = $sb.Append($UnboundArgs[$i])\r\n        }\r\n\r\n        return $sb.ToString()\r\n    }\r\n}\r\n```\r\n\r\n</details>",
      "created_at": "2020-06-05T18:43:32Z",
      "updated_at": "2020-06-05T18:43:32Z"
    },
    {
      "author": "gekidoslair",
      "author_association": "NONE",
      "body": "gotta say that I find it hilarious that I'd need to use that giant script, figure out how to run it etc just so that I can copy and paste a directory path properly into a command line tool. \r\n\r\nit's 2020, tools should do stuff for people, not the opposite. ",
      "created_at": "2020-06-06T02:27:49Z",
      "updated_at": "2020-06-06T02:27:49Z"
    },
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "Too bad that this does not work:\r\n\r\n```PowerShell\r\nNew-Alias -Name cd -Force -Option AllScope -Value \"Set-Location --%\"\r\n```\r\n\r\nAlthough I suppose such a feature would make PowerShell scripts even harder to parse without running them, as any command might then turn out to be an alias that changes how the rest of the line has to be parsed.\r\n\r\nIf the exceptional `cd` syntax is only for interactive use, then perhaps it would be best implemented in PSReadLine as a transformation that happens before PowerShell proper parses the command. If I understand correctly, PowerShell calls `PSConsoleHostReadLine` only to read commands, not to read parameters nor in `Read-Host`.",
      "created_at": "2020-06-06T17:03:02Z",
      "updated_at": "2020-06-07T08:24:56Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "> gotta say that I find it hilarious that I'd need to use that giant script, figure out how to run it etc just so that I can copy and paste a directory path properly into a command line tool.\r\n\r\nWhere are you copying the path from? \r\nAlso whilst this may not be a current feature it is something that I do think should be included in the wider PowerShell experience, but it should not be added in here, it should be added within PSReadLine Module (which is shipped with PowerShell anyway)\r\n\r\n> it's 2020, tools should do stuff for people, not the opposite.\r\nYes, but the right tool needs to be where the changes get made, and directly in PowerShell is not IMO the right place for this.\r\n\r\n> Too bad that this does not work:\r\n> \r\n> ```powershell\r\n> New-Alias -Name cd -Force -Option AllScope -Value \"Set-Location --%\"\r\n> ```\r\n> \r\n> Although I suppose such a feature would make PowerShell scripts even harder to parse without running them, as any command might then turn out to be an alias that changes how the rest of the line has to be parsed.\r\n> \r\n> If the exceptional `cd` syntax is only for interactive use, then perhaps it would be best implemented in PSReadLine as a transformation that happens before PowerShell proper parses the command. If I understand correctly, PowerShell calls `PSConsoleHostReadLine` only to read commands, not to read parameters.\r\n\r\nTotally agree and I started to comment something similar, but then rebooted and can't find the recovered tab with that comment. But I have raised this over in PSReadline module in https://github.com/PowerShell/PSReadLine/issues/1593 to be continued to be tracked as a UX improvement, which I do believe to be better lived in PSReadline than within the PowerShell Engine",
      "created_at": "2020-06-07T05:28:29Z",
      "updated_at": "2020-06-07T05:28:29Z"
    },
    {
      "author": "eugenesvk",
      "author_association": "NONE",
      "body": "> This will block adding new positional parameters\r\n\r\nnot really, you can still add a special logic if they're added at the beggining, e.g.\r\n`cd -P C:\\path\\with space`, where `-P` is a parameter (and there can't be a path that starts with a `-P`, so it can only be a parameter)\r\n\r\nBut otherwise I'd just want to add my voice to support the special case of `cd` being able to treat everything after it as a raw string path also ignoring all the `[]` and stuff, so that this would work when copy&pasted from an explorer\r\n`cd C:\\path\\with space\\and [brackets]`\r\n\r\nI believe `cd` is so special that it can behave in such an exceptional way! :)",
      "created_at": "2021-02-19T19:58:18Z",
      "updated_at": "2021-02-19T20:02:51Z"
    },
    {
      "author": "eugenesvk",
      "author_association": "NONE",
      "body": "> The one exception that was created over 20 years ago isn't a good enough reason to kludge things into working IMO.\r\n\r\nThe reason is not this old exception, but rather the fact that `cd` is unique and frequently used enough to warrant such an exception even today",
      "created_at": "2021-02-19T20:02:39Z",
      "updated_at": "2021-02-19T20:02:39Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@eugenesvk  \r\nYes, CD in cmd.exe works differently from copy or any other command or from cd in unix shells. Exceptions are (generally) bad. _Make a command less like the same command on linux, AND less like other PowerShell commands to make it more like MS-DOS_ is likely to fall on deaf ears.   \r\nBTW if you are copying from explorer use \"copy as path\" and it puts double quotes round the path in the clipboard.   \r\n\r\nCD is an _alias_ and since V1 I've been changing the default to \"Push-Location\" instead of \"Set-Location\", I now use a function which I've shared https://gist.github.com/jhoneill/47f5151b22a1dabb4ddc79c083162f77 \r\nIf you _want_ to make CD different you can add `ValueFromRemainingArguments=$true` to the Path parameter and add `$path = $path -join ' '` - which will work for most cases like `program files` but not for multiple spaces. Whether you want to take my additions to make \"cd ....\"  into `cd ..\\..\\..` make `cd ~` tab complete make `cd =` tab through your directory stack etc is your choice :-) \r\n\r\n\r\n\r\n\n\n<blockquote><img src=\"https://github.githubassets.com/images/modules/gists/gist-og-image.png\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> Gist</div><div><strong><a href=\"https://gist.github.com/jhoneill/47f5151b22a1dabb4ddc79c083162f77\">PowerShell to make a nicer CD.. Just add to profile. </a></strong></div><div>PowerShell to make a nicer CD.. Just add to profile.  - Profile-cd.ps1</div></blockquote>",
      "created_at": "2021-02-20T10:42:20Z",
      "updated_at": "2021-02-20T10:42:22Z"
    },
    {
      "author": "eugenesvk",
      "author_association": "NONE",
      "body": "> Exceptions are (generally) bad.\r\n\r\nExcept when they are awesome! And then we have to go back to the specific case of `cd` and discuss where it belongs\r\n\r\n> _Make a command less like the same command on linux, AND less like other PowerShell commands to make it more like MS-DOS_ is likely to fall on deaf ears.\r\n\r\nYeah, let's not invoke the spirit of that awful old shell to make it easier on our ears! :) But otherwise this has been a pain point in all the other systems as copy&paste of a path to a cd is system-agnostic ;)\r\n\r\n> BTW if you are copying from explorer use \"copy as path\" and it puts double quotes round the path in the clipboard.\r\n\r\nThanks, but it's a) a bit inconvenient and b) a bit \"dumb\" (e.g. it doesn't escape square brackets, which is needed in pwsh, though a custom cd alias fixes this one)\r\n\r\n> CD is an _alias_ and since V1 I've been changing the default to \"Push-Location\" instead of \"Set-Location\", I now use a function which I've shared https://gist.github.com/jhoneill/47f5151b22a1dabb4ddc79c083162f77\r\n> ...\r\n\r\nThanks for the suggestion, but I'm already using `cd` as an alias to a simple command `Set-Location -LiteralPath ($args -join ' ' | Out-String -NoNewline)`, which solves most of my issues by allowing me to simply paste my paths to get there, but as you correctly mentioned, two spaces would break it and then I'd have to quote\r\n(also, I'm using `..` to go up, which is more convenient than `cd ..`)\r\n\r\nAnyway, there seems to be two general avenues to achieve the desired behavior: \r\n- with support from a shell: I've recently encountered [xonsh](https://xon.sh) shell and it does seem to have the ideal solution \u2014 the `cd! ` macro that treats all input as a  raw string, allowing you to paste arbitrary path without any quoting or other escaping (and it's possible with a simple, but not yet available addon, to convert all `cd ` calls into `cd! ` ones, making this the default)!\r\n\r\n- with support from a terminal: autoescaping on paste. That'd be similar to what is already possible with e.g. WSL in Conemu with some bridge magic, where all paths are converted to linux format and escaped on copy&paste. So strangely enough using a \"foreign environment\" on Windows is more convenient than using the native one!\n\n<blockquote><img src=\"https://github.githubassets.com/images/modules/gists/gist-og-image.png\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> Gist</div><div><strong><a href=\"https://gist.github.com/jhoneill/47f5151b22a1dabb4ddc79c083162f77\">PowerShell to make a nicer CD.. Just add to profile. </a></strong></div><div>PowerShell to make a nicer CD.. Just add to profile.  - Profile-cd.ps1</div></blockquote>",
      "created_at": "2021-02-20T12:10:15Z",
      "updated_at": "2021-02-20T12:10:16Z"
    }
  ],
  "created_at": "2020-06-04T16:38:04Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 12900,
  "state": "closed",
  "title": "Can't do a simple cd to a folder? ",
  "updated_at": "2021-02-20T12:10:16Z"
}