{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4068",
  "author": "mklement0",
  "body": "Note: A _mandatory_ `[switch]` parameter is an edge case, given that switches are usually _optional_. However, mandatory `[bool]` parameters are affected as well, as are `[hashtable]`-and `[scriptblock]`-typed ones.\r\n\r\nThe value entered by the user is invariably considered a _string_, which means:\r\n\r\n* for a mandatory `[bool]` parameter, _any nonempty input_ - including literal `$False` - is coerced to `$True`.\r\n\r\n* for a mandatory `[switch]` parameter, it is currently impossible to provide input that is accepted.\r\n\r\n* for a mandatory `[hashtable]` or `[scriptblock]` parameter, it too is impossible to provide input that is accepted.\r\n\r\nAlso, for a parameter that has the `[AllowNull()]` attribute you cannot interactively specify `$null` (it will be treated as _string literal_ `'$null'`).\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n# Define a function with mandatory [bool] parameter and invoke it without a value.\r\nPS> function Foo { param( [Parameter(Mandatory)] [bool] $Bar) $Bar }; Foo\r\n\r\ncmdlet Foo at command pipeline position 1\r\nSupply values for the following parameters:\r\nBar: $False   # '$False' is the typed-in input; '0' yields the same result - any nonempty input results in $True\r\n\r\n# Ditto for [switch] parameter\r\nPS> function Foo { param( [Parameter(Mandatory)] [switch] $Bar) $Bar }; Foo\r\nSupply values for the following parameters:.\r\nBar: $False   # '$False' is the typed-in input; *any* input is rejected\r\n\r\n# Ditto for [hashtable]\r\nPS> function Foo { param( [Parameter(Mandatory)] [hashtable] $Bar) $Bar }; Foo\r\nSupply values for the following parameters:\r\nBar: @{ hi = 'there' }   # '@{ hi = 'there' }' is the typed-in input; *any* input is rejected.\r\n\r\n# Ditto for [scriptblock]\r\nPS> function Foo { param( [Parameter(Mandatory)] [scriptblock] & $Bar) $Bar }; Foo\r\nSupply values for the following parameters:\r\nBar: { 1 + 2 }   # '{ 1 + 2 }' is the typed-in input; *any* input is rejected.\r\n\r\n# Ditto for $null\r\nPS> Function Foo { param( [Parameter(Mandatory)][AllowNull()]$Bar) $null -eq $Bar }; Foo\r\nSupply values for the following parameters:\r\nBar: $null  # '$null' is the typed-in input; `$null` is invariably interpreted as *string* '$null'\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nFalse\r\n\r\nIsPresent\r\n---------\r\n    False\r\n\r\n\r\nName                           Value\r\n----                           -----\r\nhi                             there\r\n\r\n3\r\n\r\nTrue\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nTrue\r\n\r\nFoo : Cannot process argument transformation on parameter 'Bar'. Cannot convert value \"System.String\" to type \"System.Management.Automation.SwitchParameter\".\r\nBoolean parameters accept only Boolean values and numbers, such as $True, $False, 1 or 0.\r\n\r\nFoo : Cannot process argument transformation on parameter 'Bar'. Cannot convert the \"@{ hi = 'there' }\" value of type \"System.String\" to type \"System.Collections.Hashtable\".\r\n\r\nFoo : Cannot process argument transformation on parameter 'Bar'. Cannot convert the \"{ 1 + 2 }\" value of type \"System.String\" to type \"System.Management.Automation.ScriptBlock\".\r\n\r\nFalse\r\n```\r\n\r\nFor the `[bool]` parameter, the non-empty string literal `$False` was coerced to `$True`.\r\nNote that the same would have happened with input `0`.\r\n\r\nBy contrast, if you pass a value _on the command line_, things work as expected:\r\n\r\n```powershell\r\n# $False, $True and numbers are recognized:\r\nPS> function Foo { param( [Parameter(Mandatory)] [bool] $Bar) $Bar }; Foo -Bar $False\r\nFalse\r\n\r\n# Any other value for [bool] is rejected.\r\nPS> function Foo { param( [Parameter(Mandatory)] [bool] $Bar) $Bar }; Foo -Bar none\r\nFoo : Cannot process argument transformation on parameter 'Bar'. Cannot convert value \"System.String\" to type \"System.Boolean\". Boolean parameters accept only Boolean values and \r\nnumbers, such as $True, $False, 1 or 0.\r\n\r\n# [switch] parameter currently ONLY accept $True or $False\r\nPS> function Foo { param( [Parameter(Mandatory)] [switch] $Bar) $Bar }; Foo -Bar:$False\r\nIsPresent\r\n---------\r\n    False\r\n\r\nPS> function Foo { param( [Parameter(Mandatory)] [hashtable] $Bar) $Bar }; Foo @{ hi = 'there' }\r\n\r\nName                           Value\r\n----                           -----\r\nhi                             there\r\n\r\nPS> function Foo { param( [Parameter(Mandatory)] [scriptblock] $Bar) & $Bar }; Foo { 1 + 2}\r\n3\r\n\r\nPS> function Foo { param( [Parameter(Mandatory)] [AllowNull()] $Bar) $null -eq $Bar }; Foo $null\r\nTrue\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta (v6.0.0-beta.2) on macOS 10.12.5\r\nPowerShell Core v6.0.0-beta (v6.0.0-beta.2) on Ubuntu 16.04.1 LTS\r\nPowerShell Core v6.0.0-beta (v6.0.0-beta.2) on Microsoft Windows 10 Pro (64-bit; v10.0.14393)\r\nWindows PowerShell v5.1.15063.413 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Prompting is by design **not** interpreted as PowerShell - the justification being security. From the prompt, it doesn't *feel* like you're being asked for valid PowerShell (and indeed you aren't, e.g. you can enter a string with spaces and not need quotes), so you might input something that would have unfortunate consequences if it were interpreted as PowerShell.\r\n\r\nAlso - if this were to change, care would be needed to ensure it doesn't create a way around restricted language mode.\r\n\r\nThere was some discussion about special casing true/false and variants, I don't recall any conclusions.",
      "created_at": "2018-06-09T01:07:50Z",
      "updated_at": "2018-06-09T01:07:50Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr:\r\n\r\nIndeed, you shouldn't be able to enter  just _any_ expression.\r\n\r\nWhat you should be able to enter, though, is tokens that successfully - and meaningfully - bind to the parameter triggering the prompt.\r\n\r\nIf that condition cannot be met, even putting up the prompt is a waste of the user's time and frustration is very likely to ensue.\r\n",
      "created_at": "2018-06-09T01:22:18Z",
      "updated_at": "2018-06-09T01:23:15Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "P.S.: \r\n\r\nIn the case of a mandatory `[bool]` parameter (granted, probably rare), it goes beyond frustration:\r\n\r\nIf you mean to input `$False`, the command will happily proceed with the _opposite_ of your intent.\r\n\r\nThe larger issue is that the prompting feature in its present form is both _incomplete_ (see this issue and the inability to enter `!`-prefixed values) and _inconvenient_ (no tab completion, no re-prompting on invalid input), and therefore currently of little use.\r\n",
      "created_at": "2018-06-09T01:50:40Z",
      "updated_at": "2018-06-09T01:50:40Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "On second thought:\r\n\r\n> it doesn't feel like you're being asked for valid PowerShell (and indeed you aren't, e.g. you can enter a string with spaces and not need quotes\r\n\r\nArguably, the very same rules as in argument mode should apply (even though the user supplying _literals_ is the far likelier scenario). \r\n\r\nYes, values with spaces being implicitly considered a single argument is unique to prompting, however.\r\n\r\nFrom a security perspective, however, there's no good reason to accept less than what could be passed directly as arguments.\r\nIf users are allowed to pass expressions / entire command sequences inside `$(...)` as _arguments_, there's no reason not to allow them to do that _interactively_.\r\n\r\nSomeone who wanted to be more restrictive should implement custom prompting.\r\n\r\nThat said, the following is, of course, a valid concern that needs to be addressed, as you state:\r\n\r\n> if this were to change, care would be needed to ensure it doesn't create a way around restricted language mode.\r\n",
      "created_at": "2018-06-09T01:59:39Z",
      "updated_at": "2018-06-09T02:07:36Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr: Sorry for the revision frenzy around my previous comment - I initially hadn't considered all implications of your comments.\r\n\r\nI get that this is a tricky issue that requires serious thought, but whatever the outcome is, for the user to trust and use the feature it is important that the rules and limitations are clear, documented, and not too complex to remember.\r\n\r\nFor instance, one way of resolving the issue, if allowing arbitrary expressions turns out to be infeasible, is to restrict input to:\r\n\r\n* literals, including hashtable literals composed of only literals and the variables noted below\r\n\r\n* variables (constants) `$Null`, `$False`, and `$True`\r\n   * with literals  `0` and `1`  mapping to `$False` and `True` for `[bool]` params\r\n\r\n\r\n",
      "created_at": "2018-06-09T02:24:42Z",
      "updated_at": "2018-06-09T02:24:42Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr: \r\n\r\nI've added `[scriptblock]` to the list of parameter types that aren't supported by the prompts, as well as the inability to enter `$null`.\r\n\r\nI think that covers all literal syntax forms now (including quasi-literals `$True`, `$False`, and `$null`), but I may still be missing some.\r\n\r\nAs for a quick and safe way (though not user-friendly) to resolve this issue:\r\n\r\nGiven that it makes no sense to display a prompt in these cases - you won't be able to enter any / the intended value - a terminating error should be thrown instead.\r\n",
      "created_at": "2018-06-09T12:57:07Z",
      "updated_at": "2018-06-09T12:57:07Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Let me attempt a pragmatic summary:\r\n\r\n* The automatic prompting mechanism for mandatory parameters that weren't bound by a command-line argument  is currently broken with respect to several parameter data types:\r\n   * For parameters typed `[hashtable]`, `[scriptblock]`, `[bool]`, `[switch]` (and others?), the automatic prompting:\r\n     * either fundamentally prevents entering values successfully \r\n     * or prevents meaningful input (`[bool]`, `[switch]` invariably bind `$True`, whatever the user inputs).\r\n\r\n* The **minimum we should do** is to _document_ this limitation - @SteveL-MSFT, can I ask you to add the `documentation-needed` label?\r\n   * In addition to the data-type limitation, it should also be made clear that only _literal_  input is supported (no support for variable references, expressions).\r\n\r\n* A **simple fix** that would spare users frustration and unexpected behavior is to simply _disable_ automatic prompting for said types - report a statement-terminating error instead.\r\n  * This fix too would require documenting.\r\n\r\n* A proper fix would be nontrivial and would require addressing the conceptual issues @lzybkr raises, but it would also be an opportunity to address other existing quirks (inability to enter `!`-prefixed values, lack of tab completion, no re-prompting on invalid input).\r\n\r\n\r\n\r\n",
      "created_at": "2018-06-13T15:02:49Z",
      "updated_at": "2018-06-13T15:02:49Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Before adding the `Documentation-Needed` label, I think we should agree on the behavior.  At a minimum, it seems that erroring and not prompting for these types may be a good enough solution and better than the current experience.\r\n\r\nIf we wanted to prompt for [bool] and [switch], the prompt should just be a Y/N type of prompt.  Given the security and complexity concerns, it doesn't make sense to try to prompt for [hashtable] and [scriptblock].",
      "created_at": "2018-06-15T04:57:59Z",
      "updated_at": "2018-06-15T04:57:59Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @SteveL-MSFT - makes sense.\r\n\r\n> If we wanted to prompt for [bool] and [switch], the prompt should just be a Y/N type of prompt.\r\n\r\nThat's a great idea and bypasses the problem of not being able to use expressions (variables `$True` and `$False`) in the input.\r\n\r\nSo my vote is for an amended version of the simple fix proposed above:\r\n\r\n* modify `[bool]` and `[switch]` prompts to present a Y/N choice.\r\n\r\n* do not prompt for `[scriptblock]` and `[hashtable]` and throw a statement-terminating error instead.\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-06-16T17:20:18Z",
      "updated_at": "2018-06-16T17:20:18Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT:\r\n\r\nOn a related noted, I've created #7093 to improve the experience with the `!`-prefixed prompt commands, which also require documenting.\r\n\r\nIn short: if we eliminate them as proposed, we get a fix for #4066 for free.",
      "created_at": "2018-06-17T15:18:44Z",
      "updated_at": "2018-06-17T15:18:44Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 I think we can do this in stages.  I would think it's relatively simple to throw a statement-terminating error for `[bool]`, `[switch]`, `[scriptblock]`, and `[hashtable]` now and consider more targeted prompting in the future.",
      "created_at": "2018-06-20T02:52:51Z",
      "updated_at": "2018-06-20T02:52:51Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this and agree that throwing an error is a better experience than the current prompt that fails with an error implying it should work.  To support an improved experience, we should have a RFC.",
      "created_at": "2018-06-20T22:13:31Z",
      "updated_at": "2018-06-20T22:13:31Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "> If users are allowed to pass expressions / entire command sequences inside `$(...)` as _arguments_, there's no reason not to allow them to do that _interactively_.\r\n\r\nUsers need not be able to pass any parameters, since the script at hand may abuse this misfeature to read parameters to internal commands.  Also, PowerShell should have a non-interactive mode.  I am not happy when my scripts wait forever for my input.",
      "created_at": "2020-06-18T15:48:21Z",
      "updated_at": "2020-06-18T15:48:41Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "> PowerShell should have a non-interactive mode\r\n\r\n```pwsh -NonInteractive```",
      "created_at": "2020-06-18T16:05:27Z",
      "updated_at": "2020-06-18T16:05:35Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> Users need not be able to pass any parameters\r\n\r\nThe point was that user _can_ already pass the _output_ (result) of any expression as a _command-line argument_ (assuming the language mode in effect allows it) and that that expression is evaluated _before_ the target command sees it, which has no bearing on the the command (script, function, cmdlet)  being called (this is _not_ the type of security concern as with, say, SQL injection).\r\n\r\nThe same applies in principle to _interactive_ input of an argument value - though additional constraints there definitely makes sense:\r\n\r\nTo recap my earlier statement:\r\n\r\n> Indeed, you shouldn't be able to enter just _any_ expression.\r\n> What you should be able to enter, though, is tokens that successfully - and meaningfully - bind to the parameter triggering the prompt.\r\n\r\n----\r\n\r\nThat said, if I understand the committee decision correctly, the upshot is:\r\n\r\n* For now, at least spare users the frustration of a prompt that can't be answered, by reporting a statement-terminating _error_ instead - anyone can submit a PR.\r\n\r\n  * Personally, given the inconsistent experience, I think it would make sense to also provide a (preference-variable-based?) _opt-in_ to disabling mandatory-parameter prompts altogether.\r\n\r\n  * `pwsh -NonInteractive` definitely disables these prompts too, but it disables _all_ interactive prompts, notably including `Read-Host`.\r\n\r\n* Longer-term, someone should author an RFC for an improved prompting experience.\r\n",
      "created_at": "2020-06-18T16:18:46Z",
      "updated_at": "2020-06-18T16:40:59Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "> > Users need not be able to pass any parameters\r\n> \r\n> The point was that user _can_ already pass the _output_ (result) of any expression as a _command-line argument_ (assuming the language mode in effect allows it) \r\n\r\nMany enterprise desktop users can only run applications and scripts that are pre-approved by IT.  Such users would not be allowed to start PowerShell as such, or to edit any scripts, even if they were smart enough to do that, which most of them are not.\r\nAlso, especially when you are a power user, you do not want to do the equivalent of ``rm -rf $UNSET/*`` _inadvertently_.  That could happen if expressions were interpreted.",
      "created_at": "2020-06-18T16:24:48Z",
      "updated_at": "2020-06-18T16:30:29Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Again: no one has asked for the ability to enter arbitrary commands (expressions, variable references) into an interactive mandatory-parameter prompt.\r\n\r\nPerhaps I should have been clearer in saying that you should be able to enter (quasi-)_literals_ of the target parameter's type, such as `$true`, `$false`, and `{ ... }` (for script blocks - though you could debate there whether the enclosing braces should be required), and, if the parameter allows it, maybe `$null`.\r\nWith `@{ ... }` literals (hash tables), the line gets blurry, given that entry values can be expressions.\r\n\r\nTherefore - _if_ we want to improve the experience - it makes sense to author an RFC to come up with a user experience that is (a) predictable and (b) flexible enough while avoiding inadvertent evaluation, which are non-trivial problems to solve.\r\n\r\nThen again, pragmatically speaking, reporting an error in lieu of prompting for unsupported types may be good enough (I've removed the word \"stopgap\" from my previous comment.)\r\nYou could argue that especially `[hashtable]` and `[scriptblock]` parameters are inherently ill-suited to interactive input - especially by less experienced users.\r\n\r\nThe only thing I personally think is missing is the previously suggested opt-in to disable the mandatory-parameter prompts altogether (independently of the `-NonInteractive` CLI switch).\r\n\r\nI think we could even consider _reversing_ the logic: requiring an opt-in if you _want_ these prompts; this technically breaking change would only affect scripts that were explicitly designed to have the _user_ answer such prompts triggered by incomplete calls inside the script - which strikes me as unlikely.\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2020-06-18T16:45:31Z",
      "updated_at": "2020-06-18T16:49:16Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "> Perhaps I should have been clearer in saying that you should be able to enter (quasi-)_literals_ of the target parameter's type, such as `$true`, `$false`, and `{ ... }` (for script blocks - though you could debate there whether the enclosing braces should be required), and, if the parameter allows it, maybe `$null`.\r\n\r\n`$true` is not a quasi-literal, it is a variable reference, so requiring this `$` would only cause confusion.  The shell\u2019s representation on output is just `True`\u2014but interactive logical valuation should be interpreted according to the current culture.  The calling function should not be able to `&` a user\u00ad\u2011provided script block (script blocks for DSL would be OK, although it would be highly impractical to interactively enter rescue values for them).",
      "created_at": "2020-06-18T17:00:02Z",
      "updated_at": "2020-06-18T17:00:02Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Taking a step back, regarding disabling the prompts altogether: \r\n\r\nIf technically feasible, a simpler solution would be to restrict the mandatory-parameter prompts solely to commands submitted at the command prompt of an interactive session.\r\n\r\nE.g., Submitting just `Get-Content` _at the command prompt_ would prompt for a `-Path` argument, but calling `Get-Content` from _inside a script or function_ or _via the CLI_  wouldn't.\r\n\r\nThat way, without the need for a new preference variable, we could retain the prompts in the context of the command-prompt experience while taking away the pain of having scripts that mistakenly lack mandatory arguments hang in automation contexts where `-NonInteractive` wasn't explicitly used.",
      "created_at": "2020-06-18T17:02:49Z",
      "updated_at": "2020-06-18T17:02:49Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "> Taking a step back, regarding disabling the prompts altogether:\r\n> \r\n> If technically feasible, a simpler solution would be to restrict the mandatory-parameter prompts solely to commands submitted at the command prompt of an interactive session.\r\n> \r\n> E.g., Submitting just `Get-Content` _at the command prompt_ would prompt for a `-Path` argument, but calling `Get-Content` from _inside a script or function_ or _via the CLI_ wouldn't.\r\n> \r\n> That way, without the need for a new preference variable, we could retain the prompts in the context of the command-prompt experience while taking away the pain of having scripts that mistakenly lack mandatory arguments hang in automation contexts where `-NonInteractive` wasn't explicitly used.\r\n\r\nA preference variable would still be necessary because it is a breaking change\u2014they may be scripts in the wild that abuse this feature to ask users in the middle of something..",
      "created_at": "2020-06-18T17:07:01Z",
      "updated_at": "2020-06-18T17:07:01Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> so requiring this `$` would only cause confusion.\r\n> interactive logical valuation should be interpreted according to the current culture. \r\n\r\nFair enough, but such questions need to be resolved in the yet-to-be-if-ever written RFC.\r\n\r\n> The calling function should not be able to `&` a user\u00ad\u2011provided script block\r\n\r\nAssuming you mean the _called_ function: It should, and it can - if the language mode allows it; to put it differently: you need to use the language mode to control this ability.\r\n\r\n> A preference variable would still be necessary because it is a breaking change\u2014they may be scripts in the wild that abuse this feature to ask users in the middle of something..\r\n\r\nYes, it is technically breaking, as stated (in the context of the earlier suggestion of reversing the opt-in logic), but there's also the concept of a [Bucket 3: Unlikely Grey Area](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md#bucket-3-unlikely-grey-area) breaking change, where users are _unlikely_ to depend on the old behavior, in which case the benefits of the breaking change may outweigh the risk of breaking existing code. Personally, this strikes me as such a change.\r\n\r\n(And a preference variable could still be introduced, separately, to enable users to _never_ present these prompts.)",
      "created_at": "2020-06-18T17:12:29Z",
      "updated_at": "2020-06-18T17:16:59Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "P.S.: Irrespective of whether the currently unsupported types will ever be supported by the prompts following a RFC, I want to reiterate that the current UX with these prompts is generally poor: no tab completion, no re-prompting on invalid input (and `!`-prefixed values invariably getting interpreted as prompt-related commands). These aspects are worth improving independently of the question what types should be supported and how.\r\n\r\n",
      "created_at": "2020-06-18T18:08:01Z",
      "updated_at": "2020-06-18T18:08:01Z"
    }
  ],
  "created_at": "2017-06-21T20:26:35Z",
  "number": 4068,
  "state": "open",
  "title": "Prompting for mandatory parameters mishandles [bool], [switch], [hashtable], and [scriptblock] parameters",
  "updated_at": "2020-06-18T18:08:01Z"
}