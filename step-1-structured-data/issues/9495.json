{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9495",
  "author": "towerbe",
  "body": "# Steps to reproduce\r\nPowerShell 6.2.0 does not appear to see or recognize any system proxy settings on Windows 10 that are not hard coded.  My employer uses a non-authenticated proxy server and delivers the configuration to client machines via DHCP (in Internet Options, this is the \"Automatically Detect Settings\" check box).  When using this Proxy Option, the proxy is not recognized and no http-based request will go through, such as install-module, update-help, etc.  The same experience occurs when choosing the \"Use Automatic configuration script\" option and properly configuring the endpoint.\r\n\r\nProxied connections only appear to work when hard-coding the proxy via the \"Use a proxy server for your LAN\" option.\r\n\r\n# Expected behavior\r\nPowerShell 6.x should recognize automatic proxy settings in the same manner that Windows PowerShell 5.1 does.\r\n\r\n# Actual behavior\r\nProxied connections in PowerShell 6.2.0 only work when the proxy is hard coded.  Also, PowerShell 6.2.0 does not appear to recognize proxy settings made via netsh winhttp settings either.  Only way to get proxy to work is to hard code it via Internet Options.\r\n\r\n# Environment data\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.0\r\nPSEdition                      Core\r\nGitCommitId                    6.2.0\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n",
  "closed_at": "2019-08-26T20:23:24Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Please add repo steps.",
      "created_at": "2019-04-30T06:20:17Z",
      "updated_at": "2019-04-30T06:20:17Z"
    },
    {
      "author": "towerbe",
      "author_association": "NONE",
      "body": "Steps to reproduce:\r\nWindows 10 client\r\nHave a network that uses a non-authenticated proxy.\r\nHave a network that provides Proxy settings either via DHCP or a configuration script.\r\nConfigure \"Internet Options\" to use either the \"Automatically detect settings\" or \"Use automatic configuration script\".\r\nOpen a PowerShell Prompt.\r\nRun any cmdlet that should pick up the proxy this way and watch it fail (example: update-help, Install-Module, find-module, etc.)\r\n",
      "created_at": "2019-04-30T13:24:36Z",
      "updated_at": "2019-04-30T13:24:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I can confirm for Invoke-WebRequest that it works only with explicit proxy settings in command line.\r\n\r\n@markekraus Could you please look the issue?",
      "created_at": "2019-04-30T14:28:35Z",
      "updated_at": "2019-04-30T14:28:35Z"
    },
    {
      "author": "towerbe",
      "author_association": "NONE",
      "body": "Thank you @iSazonov.  FYI, this is a change in behavior from Windows PowerShell.",
      "created_at": "2019-04-30T14:37:49Z",
      "updated_at": "2019-04-30T14:37:49Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov this issue appears to not be about the webcmdlets which uses a proxy by default unless `-NoProxy` is specified.  PowerShellGet not respecting a proxy should be opened in that repo, found a similar issue there: https://github.com/PowerShell/PowerShellGet/issues/336\r\n\r\nFor `Update-Help`, it seems it needs to be extended to support proxies",
      "created_at": "2019-05-04T03:53:20Z",
      "updated_at": "2019-05-04T03:53:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">  this issue appears to not be about the webcmdlets which uses a proxy by default unless -NoProxy is specified.\r\n\r\nIt seems webcmdlets do not use a proxy by default as expected :-( Should we create new tracking issue?",
      "created_at": "2019-05-04T04:10:31Z",
      "updated_at": "2019-05-04T04:10:31Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov yes, we should have a separate issue for that, however, it might just be an issue with `HttpClient`",
      "created_at": "2019-05-04T13:39:57Z",
      "updated_at": "2019-05-04T13:39:57Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@SteveL-MSFT The technology behind is [WPAD](https://en.wikipedia.org/wiki/Web_Proxy_Auto-Discovery_Protocol). \r\n\r\nI found the same issue on Asp.Net Core [#32135](https://github.com/dotnet/corefx/issues/32135)\r\nOn coreFx, i found this one relative : [#26494](https://github.com/dotnet/corefx/issues/26494)",
      "created_at": "2019-05-04T14:42:09Z",
      "updated_at": "2019-05-04T14:52:44Z"
    },
    {
      "author": "towerbe",
      "author_association": "NONE",
      "body": "Any updates on the fix for this issue or an ETA?",
      "created_at": "2019-06-21T14:31:01Z",
      "updated_at": "2019-06-21T14:31:01Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@anmenaga can you take a look at this?",
      "created_at": "2019-06-22T01:28:02Z",
      "updated_at": "2019-06-22T01:28:02Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@SteveL-MSFT Do you plan to provide support back for proxy.pac ?\r\n![](https://user-images.githubusercontent.com/7684835/41114198-922f5dcc-6a38-11e8-81c8-307e090f5800.png).\r\n I have a lot of customers with cloud proxy. \r\n ",
      "created_at": "2019-06-22T12:09:05Z",
      "updated_at": "2019-06-22T12:09:05Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "\"Use Automatic configuration script\" seems to be working when I try it on Win10 Server and PS Core 6.2.1 and 7.0.0-preview.1:\r\n\r\n![Capture6](https://user-images.githubusercontent.com/11860095/60627959-9fa37d80-9da4-11e9-8d06-5af9fbb13d67.png)\r\n\r\nProxy log:\r\n> Wed 03 Jul 2019 14:57:23 : ACCESS    : Instance:'Internet' Protocol:'HTTP-Proxy' Access:'Default  ' Client IP:'x.x.x.x' Resource Type:'HTTP Proxy Service' Resource:'Service'\r\n> Wed 03 Jul 2019 14:57:23 : ACCESS    : Instance:'Internet' Protocol:'HTTP-Proxy' Access:'Default  ' Client IP:'x.x.x.x' Resource Type:'Full URI/Path' Resource:'www.verizon.com/'\r\n> Wed 03 Jul 2019 14:57:46 : ACCESS    : Instance:'Internet' Protocol:'HTTP-Proxy' Access:'Default  ' Client IP:'x.x.x.x' Resource Type:'HTTP Proxy Service' Resource:'Service'\r\n> Wed 03 Jul 2019 14:57:46 : ACCESS    : Instance:'Internet' Protocol:'HTTP-Proxy' Access:'Default  ' Client IP:'x.x.x.x' Resource Type:'Full URI/Path' Resource:'www.youtube.com/'\r\n\r\nI also confirmed with debugger that WebCmdlet's code on PS Core code internally creates `SocketsHttpHandler` [which by default is supposed to handle WPAD/PAC correctly, according to .NET code owner](https://github.com/dotnet/corefx/issues/26494#issuecomment-505641745).\r\n\r\n@fMichaleczek , @iSazonov : on what $psversiontable and OS (might be useful: `Get-ItemPropertyValue \"HKLM:\\\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" -name BuildLabEx`) do you see the repro?",
      "created_at": "2019-07-03T22:25:09Z",
      "updated_at": "2019-07-03T22:31:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "~I can not repo the issue with latest build (after 7.0-Preview1).~",
      "created_at": "2019-07-04T12:23:23Z",
      "updated_at": "2019-07-05T03:25:39Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "This is a duplicate of #9533 and from what I can tell it may be related to DHCP configured proxy settings in Windows 10, but I do not have the infra to reproduce.",
      "created_at": "2019-07-04T21:05:19Z",
      "updated_at": "2019-07-04T21:05:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I forget disable TMG client. After I disabled it I see the issue - Automatic proxy settings and Manual proxy settings do not work.\r\n\r\n```powershell\r\n Get-ItemPropertyValue \"HKLM:\\\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" -name BuildLabEx\r\n17763.1.amd64fre.rs5_release.180914-1434\r\n\r\n$PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-preview.1\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-preview.1-85-gc27314be0628ef940df5389ad40030e355dded06\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
      "created_at": "2019-07-05T03:31:19Z",
      "updated_at": "2019-07-05T03:31:19Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "I did a test with 2 VMs on a Private virtual switch ('Proxy' VM also was connected to an external network) and configured WPAD on the private network through DHCP Option 252.\r\nBoth PS Core 6.2.1 and 7.0.0-preview.1 were able to successfully access the web using the Proxy VM.\r\n\r\nVM with Proxy app, DHCP Server and IIS that hosts `wpad.dat`:\r\n![Capture8](https://user-images.githubusercontent.com/11860095/60923884-b8a0a880-a254-11e9-9f38-33df4f4fca43.png)\r\n\r\nVM that uses proxy and has No direct access to the web:\r\n![Capture9](https://user-images.githubusercontent.com/11860095/60923858-b0486d80-a254-11e9-8b6d-9106ed244f8f.png)\r\n\r\nLog from the Proxy software:\r\n```\r\nTue 09 Jul 2019 13:58:22 : ACCESS    : Instance:'Internet' Protocol:'HTTP-Proxy' Access:'Default  ' Client IP:'192.168.1.5' User:'DefaultUser/FPDOMAIN' Resource Type:'Full URI/Path' Resource:'www.github.com/'\r\nTue 09 Jul 2019 13:59:58 : ACCESS    : Instance:'Internet' Protocol:'HTTP-Proxy' Access:'Default  ' Client IP:'192.168.1.5' User:'DefaultUser/FPDOMAIN' Resource Type:'Full URI/Path' Resource:'www.microsoft.com/'\r\n```",
      "created_at": "2019-07-09T21:36:21Z",
      "updated_at": "2019-07-09T21:36:21Z"
    },
    {
      "author": "towerbe",
      "author_association": "NONE",
      "body": "I see a lot of chatter here about things working, but I can tell you definitively that even after installing the latest production release automatic proxy settings as delivered via DHCP in our enterprise environment are not being picked up by PowerShell Core.  \r\n\r\n**To add a bit of evidence....**\r\n\r\nHere's a shot of my Internet Options\r\n![image](https://user-images.githubusercontent.com/17556410/61159265-12a5a600-a4c1-11e9-88a4-63346733e294.png)\r\n\r\nHere is a screen shot of me trying to hit a very local webpage from PSCore 6.2.1\r\n![image](https://user-images.githubusercontent.com/17556410/61159302-37018280-a4c1-11e9-928b-2bff3db31004.png)\r\n\r\nHere is the proxy configuration in Core 6.2.1 session\r\n![image](https://user-images.githubusercontent.com/17556410/61159342-526c8d80-a4c1-11e9-82a5-22e0e0fc8779.png)\r\n\r\nScreen shot of me hitting the same web page (successfully) with a browser on the same PC\r\n![image](https://user-images.githubusercontent.com/17556410/61159396-821b9580-a4c1-11e9-90c3-adbe17d6826b.png)\r\n\r\nI have checked with our proxy and firewall people.  When I run the invoke-webrequest from PSCore, they see nothing on the proxy server, but do indeed see my session on the firewall and being dropped because we're not allowed to go to the Internet directly.  That is, it's working as it should.\r\n\r\nSo, with all of that, I feel very confident in saying a problem still exists in PSCore 6.2.1.  I cannot go to 7 as it is still beta and this is a production environment.  Would really appreciate a fix to this issue.\r\n\r\n\r\n\r\n",
      "created_at": "2019-07-12T21:09:38Z",
      "updated_at": "2019-07-12T21:27:56Z"
    },
    {
      "author": "scalablecory",
      "author_association": "NONE",
      "body": "What happens if the PAC URL is added explicitly under Internet Options? Lets try to isolate if this is a WPAD issue or something else.",
      "created_at": "2019-07-22T17:51:07Z",
      "updated_at": "2019-07-22T17:51:07Z"
    },
    {
      "author": "towerbe",
      "author_association": "NONE",
      "body": "Hi @scalablecory.  I tried what you suggested, and no change.  Long story short, nothing short of hard coding the proxy server and \"bypass for local\" work in PowerShell Core 6.x.  \r\n\r\nI tried setting the configuration script option to point directly at the URL for our PAC file.  I also tried pointing it directly at our WPAD.DAT file.  In both scenarios, PowerShell Core commands that require traffic over ports 80 or 443 failed (and fail to ever go to the proxy, via trace), but in both cases Windows PowerShell 5.x continued to function normally.  This issue appears to be isolated to PowerShell Core (and therefore .NET Core) only.\r\n\r\nFYI, I have a ticket open with Microsoft .NET Core Support via my enterprise account. ",
      "created_at": "2019-07-23T18:37:06Z",
      "updated_at": "2019-07-23T18:37:06Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> FYI, I have a ticket open with Microsoft .NET Core Support via my enterprise account.\r\n\r\nCould you please share the ticket number? Perhaps PowerShell team could look the ticket.",
      "created_at": "2019-07-24T03:06:10Z",
      "updated_at": "2019-07-24T03:06:10Z"
    },
    {
      "author": "towerbe",
      "author_association": "NONE",
      "body": "The PowerShell team directed me, through my TAM, to open the ticket with the NET team. They have been in contact with both my TAM and CSA, so I am sure they are aware of the ticket already. ",
      "created_at": "2019-07-24T13:34:20Z",
      "updated_at": "2019-07-24T13:34:20Z"
    },
    {
      "author": "towerbe",
      "author_association": "NONE",
      "body": "Well, this is interesting.  Working with my CSA from Microsoft, we found that the \"solution\" proffered at the end of https://github.com/PowerShell/PowerShell/issues/7827 appears to be a work around for my exact issue.  I'm not willing to say this is a solution, but a work around or a band-aid.  \r\n\r\nHopefully this information will help point to an actual solution.",
      "created_at": "2019-07-26T19:12:42Z",
      "updated_at": "2019-07-26T19:12:42Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": ".NET Team is looking to see why .NET Core is not respecting proxy in some cases.  The workaround is to set:\r\n\r\n[System.AppContext]::SetSwitch(\"System.Net.Http.UseSocketsHttpHandler\", $false)\r\n\r\nor\r\n\r\nCreate $env:DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER = 0",
      "created_at": "2019-07-26T20:40:44Z",
      "updated_at": "2019-07-26T20:40:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Is there a tracking issue in CoreFX repo?",
      "created_at": "2019-07-29T05:32:43Z",
      "updated_at": "2019-07-29T05:32:43Z"
    },
    {
      "author": "davidsh",
      "author_association": "NONE",
      "body": "@towerbe \r\n\r\nI'm from the CoreFx team. We're investigating this proxy issue with .NET Core 2.x regarding WPAD and/or PAC file processing.\r\n\r\nCan you clarify something about the PAC files being used in your company? Do they return multiple proxies in the FindProxyForUrl() function in the PAC file?\r\n\r\nFor example, this snippet from a PAC script returns a single proxy:\r\n\r\n```js\r\n// Proxy\r\nreturn \"PROXY proxy.domain.local:8080\";\r\n```\r\n\r\nBut this one returns multiple proxies separated by semicolons:\r\n\r\n```js\r\n// Failover\r\nreturn \"PROXY proxy1.domain.local:8080; PROXY proxy2.domain.local:8080\";\r\n```\r\n\r\nWe had a bug in .NET Core 2.x where we could not handle getting multiple proxies returned from a PAC file. The end result was we ignored all of them.  We fixed that bug in .NET Core 3.0 so that we would at least use the first one returned.  See: https://github.com/dotnet/corefx/issues/39104\r\n\r\nGiven that @anmenaga reported in https://github.com/powershell/powershell/issues/9495#issuecomment-509818975 that \"Automatically detect settings\" was working fine in his tests, perhaps your problem is that the PAC file is returning multiple proxies and hitting bug https://github.com/dotnet/corefx/issues/39104.",
      "created_at": "2019-08-02T02:19:27Z",
      "updated_at": "2019-08-02T02:19:27Z"
    },
    {
      "author": "towerbe",
      "author_association": "NONE",
      "body": "Yes, our PAC returns multiple proxies.",
      "created_at": "2019-08-02T02:24:28Z",
      "updated_at": "2019-08-02T02:24:28Z"
    },
    {
      "author": "davidsh",
      "author_association": "NONE",
      "body": ">Yes, our PAC returns multiple proxies.\r\n\r\nThanks for confirming that.",
      "created_at": "2019-08-02T02:34:07Z",
      "updated_at": "2019-08-02T02:34:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Can you clarify something about the PAC files being used in your company? Do they return multiple proxies in the FindProxyForUrl() function in the PAC file?\r\n\r\nWe use MS TMG two servers in \"cluster\" - wpad returns both.",
      "created_at": "2019-08-02T03:45:36Z",
      "updated_at": "2019-08-02T03:45:36Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This has been verified to be working in PS7 Preview.3 where the issue appears to have been fixed by .NET Core 3.0 Preview.8.  Closing this issue.  Continue to reply if you still have an issue with PS7 Preview.3 or newer.",
      "created_at": "2019-08-26T20:23:24Z",
      "updated_at": "2019-08-26T20:23:24Z"
    },
    {
      "author": "larssb",
      "author_association": "NONE",
      "body": "I write a comment after the case has been closed as I still experience this issue. And as @SteveL-MSFT writes. We can continue to reply if the issue is experienced.\r\n\r\n**SYS INFO**\r\n- Windows 10 v1809 (x64)\r\n- PowerShell v7.1.0 preview2\r\n- Proxy is configured via PAC script (WPAD). Company enforced. No direct access to the Internet.\r\n- The part of the pac script that derives a proxy address to use, looks like this:\r\n\r\n    ```\r\n    ....\r\n    var clientIP = myIpAddress();\r\n    // #NSCLIENTIP#\r\n    host = host.toLowerCase();    // Make our shExpMatch checks case insensitive.\r\n    // Redundant proxy combinations are defined here.\r\n    var _proxyList = [\r\n      \"PROXY 10.90.100.23:8080;PROXY 10.90.100.24:8080;DIRECT\",\r\n      \"PROXY 10.90.100.24:8080;PROXY 10.90.100.23:8080;DIRECT\"\r\n    ];\r\n    var noProxy = \"DIRECT\";\r\n    // Select a primary candidate proxy, based on the clients IP address.\r\n    var _octets = clientIP.split(\".\");\r\n    var _lastOctet = parseInt(_octets[3]);    // Get the last octet og the clients IP address.\r\n    var _proxyIndex = _lastOctet % _proxyList.length;  // Determine the proxy sequence.\r\n    var proxyString = _proxyList[_proxyIndex];      // Assign the return value.\r\n    ....\r\n    ```\r\n\r\n- Internet Explorer 11 has been removed (maybe it is relevant, not sure). Edge is installed\r\n\r\n**Resolution steps tried**\r\n\r\nTo get `Install-Module -name invokebuild -Verbose -Scope CurrentUser -Repository PSGallery -Force` to work, I've tried the following.\r\n\r\n- Exexcuted `[System.AppContext]::SetSwitch(\"System.Net.Http.UseSocketsHttpHandler\", $false)`\r\n    - Did not work\r\n- Same PS session. Executed: `[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12`\r\n    - Did not work\r\n- Same PS session. Executed:\r\n    ```\r\n    [system.net.webrequest]::defaultwebproxy = new-object   system.net.webproxy('http://10.90.100.24:8080')\r\n    [system.net.webrequest]::defaultwebproxy.credentials =                                                                              [System.Net.CredentialCache]::DefaultNetworkCredentials\r\n    [system.net.webrequest]::defaultwebproxy.BypassProxyOnLocal = $true\r\n    ``` \r\n\r\n    - Did not work\r\n- Tried using the `-Proxy` & `-ProxyCredential` parameters to the `Install-Module` cmdlet.\r\n    - No change\r\n\r\nI can get the `Invoke-WebRequest` cmdlet to work with the `-Proxy` and `-UseDefaultCredentials` parameters.\r\n\r\n**Reproduction steps**\r\n\r\n- Run Win10 1809 or higher\r\n- Run PS7.1 preview 2 or higher\r\n    - thereby I should have the .NET core that should work\r\n- Execute: `Install-Module -name invokebuild -Verbose -Scope CurrentUser -Repository PSGallery -Force` \r\n- Run through a proxy, configured via a PAC script\r\n\r\n**Acceptance criteria**\r\n\r\nWhen I can execute `Install-Module -name invokebuild -Verbose -Scope CurrentUser -Repository PSGallery -Force` in a PS7.1 preview 2 or higher session and the module installs.\r\n\r\nThank you.",
      "created_at": "2020-05-12T08:54:50Z",
      "updated_at": "2020-05-12T08:54:50Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@larssb If you could create a simple C# app you could open issue in .Net Runtime.\r\nThe app could be as simple as:\r\n```c#\r\nvar a = system.net.webrequest.Create(\"https://ya.ru\");\r\nvar b = a.GetResponse();\r\n```",
      "created_at": "2020-05-12T09:16:29Z",
      "updated_at": "2020-05-12T09:16:29Z"
    },
    {
      "author": "larssb",
      "author_association": "NONE",
      "body": "Created the app and now the [issue](https://github.com/dotnet/runtime/issues/36274). As the .NET throws an error.\r\n\r\nThank you @iSazonov ... I hope they will be able to find something. Really a bummer that `Install-Module` does not work for me on Win10 PS 7.1",
      "created_at": "2020-05-12T10:38:25Z",
      "updated_at": "2020-05-12T10:38:25Z"
    },
    {
      "author": "larssb",
      "author_association": "NONE",
      "body": "The following:\r\n\r\n```\r\n# For PowerShell to use the Proxy system settings. The bewlow is PS 6 core + compatible\r\n# $true to the System.Net.WebProxy constructor is to indicate that the proxy should be bypassed for local addresses\r\n[System.Net.Http.HttpClient]::DefaultProxy = New-Object System.Net.WebProxy('http://PROXY_IP:PROXY_PORT', $true)\r\n[System.Net.Http.HttpClient]::DefaultProxy.Credentials = [System.Net.CredentialCache]::DefaultCredentials\r\n```\r\n\r\nis the solution for the HTTP407 status code thrown, which in a PowerShell session where `Install-Module .... -Verbose` is executed could show itself as: `WARNING: Unable to resolve package source 'https://www.powershellgallery.com/api/v2'.`",
      "created_at": "2020-05-13T08:40:04Z",
      "updated_at": "2020-05-13T08:40:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If proxy detection works follow works too:\r\n```c#\r\n[System.Net.Http.HttpClient]::DefaultProxy.Credentials = System.Net.CredentialCache]::DefaultCredentials\r\n```",
      "created_at": "2020-05-13T11:46:23Z",
      "updated_at": "2020-05-13T11:46:23Z"
    },
    {
      "author": "ferenczy",
      "author_association": "NONE",
      "body": ">```\r\n> [System.Net.Http.HttpClient]::DefaultProxy = New-Object System.Net.WebProxy('http://PROXY_IP:PROXY_PORT', $true)\r\n> [System.Net.Http.HttpClient]::DefaultProxy.Credentials = [System.Net.CredentialCache]::DefaultCredentials\r\n> ```\r\n\r\nI have been trying to set the default web proxy for Powershell Core (7.1) for several hours without success. I usually found suggestions to set `[System.Net.WebRequest]::DefaultWebProxy` which didn't have any effect.\r\n\r\nThen I finally came to [@larssb's comment](https://github.com/PowerShell/PowerShell/issues/9495#issuecomment-627839596) and it has fixed everything \u2013 `Invoke-WebRequest`, PowerShellGet's `Find-Module`, `Install-Module`, etc.\r\n\r\nI would just add that to bypass the proxy (use the direct connection), you can set the proxy to null:\r\n\r\n    [System.Net.Http.HttpClient]::DefaultProxy = New-Object System.Net.WebProxy($null)\r\n\r\nThanks a lot, @larssb!",
      "created_at": "2021-05-18T00:21:18Z",
      "updated_at": "2021-05-18T00:21:18Z"
    }
  ],
  "created_at": "2019-04-29T12:32:38Z",
  "number": 9495,
  "state": "closed",
  "title": "Automatic proxy settings not seen by PowerShell 6.2.0 on Windows 10",
  "updated_at": "2021-05-18T00:21:18Z"
}