{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10389",
  "author": "iSazonov",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\n- Remove extra cast to PSObject in ToStringEnumerable() method\r\n- Remove extra Remove() call\r\n\r\nPerfView screenshot: left - before the change, right - after the fix.\r\n![image](https://user-images.githubusercontent.com/22290914/63333357-c0269780-c352-11e9-898f-2a8cf6a22d62.png)\r\n\r\n\r\n## PR Context\r\n\r\nFix #10377\r\n\r\nFor the scenario:\r\n```powershell\r\n$w2=${C:\\tmp\\source2.csv}\r\nfor ($i=1; $i -le 100; $i++) { $tmp = $w2 -join \"`r`n\" }\r\n```\r\nin `$w2` we have an array of strings (_not PSObjects!_) and join the strings. Before the fix in ToStringEnumerable() we did extra cast every string from $w2 to PSObject which caused unnecessary memory allocations and slow down the scenario because of skipping fast code path for value types.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2019-10-29T13:04:17Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> Before the fix in ToStringEnumerable() we did extra cast every string from $w2 to PSObject which caused unnecessary memory allocations and slow down the scenario because of skipping fast code path for value types.\r\n\r\nYou will need to update this PR description since casting to `PSObject` is intentional. Also, please list the execution time before/after your changes.\r\nIt would be great if you can add a test to cover the case where a `ToString` method is defined in a type `.ps1xml` file for a type, and see if `-join` honors that method.",
      "created_at": "2019-08-21T19:27:22Z",
      "updated_at": "2019-08-21T19:27:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I will add perf results after we get a consensus about that the fix should be.",
      "created_at": "2019-08-22T06:50:27Z",
      "updated_at": "2019-08-22T06:50:27Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Tests should be added to verify that both `ToStringEnumerator` and `ToStringEnumerable` honor the custom definition of `ToString` in ETS except for primitive types and the `string` type.",
      "created_at": "2019-08-23T18:15:02Z",
      "updated_at": "2019-08-23T18:15:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I did not find how make a test for ToStringEnumerator().",
      "created_at": "2019-08-28T17:02:57Z",
      "updated_at": "2019-08-28T17:02:57Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "The thing I'm most concerned about is the breaking nature of this change (and not being labeled initially as such). I think that we need to be very careful about addressing performance issues which result in behavioral change. And in this case, I'm not sure it's needed. I hope that we can query for type extensions (and specifically a `ToString`), without wrapping something in a psobject. If there's no extension for the type, then I totally agree we shouldn't wrap. But if there is, we need to use it.\r\n\r\nI think there's far too much utility in ETS to turn our back on them. It doesn't matter if I can't see why anyone would do that, I'm sure our customers would be able to provide a number of reasons. That's the nature of a platform - it will be used in ways we can't imagine.",
      "created_at": "2019-08-30T21:41:26Z",
      "updated_at": "2019-08-30T21:41:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@JamesWTruher Thanks! I see your point about ETS and a breaking change.\r\nIt looks very general for the PR - we only bypass ETS  for primitive types and strings. The repo docs classifiers this as \"unlikely breaking change\". (Notice that there already is TryFastTrackPrimitiveTypes() for some code paths.)\r\n\r\nPlease see the follow example:\r\n```powershell\r\nAdd-Type -TypeDefinition @\"\r\nnamespace TestNS\r\n{\r\n   public class TestClass\r\n   {\r\n       public override string ToString()\r\n       {\r\n           return \"1\";\r\n       }\r\n   }\r\n}\r\n\"@\r\n\r\n$a1=[TestNS.TestClass]::new()\r\n\r\n$a1\r\n# Output is \"1\"\r\n\r\n$a1 -join \";\"\r\n# Output is \"1\"\r\n\r\nUpdate-TypeData -TypeName \"TestNS.TestClass\" -MemberType ScriptMethod -MemberName \"ToString\" -Value { return \"test\"}\r\n\r\n$a1\r\n# Output is \"test\"\r\n\r\n$a1 -join \";\"\r\n# Output is \"1\" - unexpected?\r\n\r\n$a1 -like \"1\"\r\n# Output is \"True\" - unexpected?\r\n\r\n$a1,$a1 -like \"1\"\r\n# Output is - unexpected?\r\n# \"1\"\r\n# \"1\"\r\n```\r\nThe example demonstrates two inconsistency (possible fix will be a breaking change):\r\n- `-join` with one argument works another - it calls PSObject.ToStringParser() without wrapping to psobject and ignores ETS\r\n- `-like` (and other string operators) also uses PSObject.ToStringParser() and ignores ETS\r\n\r\nNow question is - should we have a consistency here and accept a breaking change, \r\nin other words, must `-join` work as other operators and ignore ETS too? Or do we should review and fix all string operators (-join, -like, -match,...) to honor ETS?",
      "created_at": "2019-09-02T14:46:32Z",
      "updated_at": "2019-09-02T14:46:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw It seems we have gathered the opinions of all who wanted to speak out. Common conclusion is a concern about ETS and that only string type could be fixed. Based on my previous comment I thing the string type case is also subject to the concern and I think close the PR and related issue as \"By-design\" with workaround to use `[string]::join()` (Also we could consider a switch to bypass ETS in `-join`). \r\n",
      "created_at": "2019-10-28T09:02:49Z",
      "updated_at": "2019-10-28T09:04:17Z"
    }
  ],
  "created_at": "2019-08-20T08:59:53Z",
  "number": 10389,
  "state": "closed",
  "title": "Remove extra cast to PSObject in ToStringEnumerable() method",
  "updated_at": "2020-05-15T13:17:45Z"
}