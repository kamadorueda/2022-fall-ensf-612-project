{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3398",
  "author": "daxian-dbw",
  "body": "Fix #3140 \r\n\r\n- FullCLR build is disabled in this change.\r\n- FullCLR build related functionalities in `build.psm1` and `AppVeyor.psm1` are disabled. They are not cleaned up from `build.psm1` and `AppVeyor.psm1` yet. We need to adopt .NET Core 2.0 to verify the portable module concept, and if that works well, we will remove the Windows PowerShell source code and clean up our scripts.\r\n- `dnxcore50` and `portable-net5+win8` target framework monikers are removed.\r\n- Dependency on `Microsoft.NETCore.Portable.Compatibility` is removed. It's not necessary, but it may come back when we work on supporting the `portable module`. Its necessity can be reviewed at that time.\r\n- I didn't spend the time to try building powershell in Visual Studio 2017. We should have a separate issue for that. It's tracked by #3400\r\n\r\nThe `TypeCatalogParser` project is replaced by a MSBuild target to gather the dependency information.\r\nDue to .NET Core SDK issue [#1021](https://github.com/dotnet/sdk/issues/1021), our meta-package project `Microsoft.PowerShell.SDK` starts to generate an empty assembly during the build and that results in an empty assembly `Microsoft.PowerShell.SDK.dll` appear in `publish` folder and in `.deps.json` file. We cannot simply remove the assembly because it's now part of the TPA, and removing it will cause powershell to crash at startup. We have to live with this empty assembly until that .NET Core SDK issue is fixed.  It's tracked by #3401\r\n\r\n/cc: @PowerShell/area-build ",
  "closed_at": "2017-03-23T20:04:53Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> We'll want to move many of the commonly set properties into a shared .props and include it\r\n\r\nTrack it by #3406",
      "created_at": "2017-03-23T18:18:35Z",
      "updated_at": "2017-03-23T18:18:35Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Talked to @TravisEz13 offline and he has verified that the MSBuild change works on OpenSUSE.\r\nI will merge this PR as Travis is in a meeting and cannot get back to this until late this afternoon.",
      "created_at": "2017-03-23T20:03:46Z",
      "updated_at": "2017-03-23T20:03:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems CorePsTypeCatalog.cs don't updated by TypeCatalogGen.exe . Is it well?",
      "created_at": "2017-03-24T14:03:11Z",
      "updated_at": "2017-03-24T14:03:11Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov `TypeCatalogGen.exe` still generates `CorePsTypeCatalog.cs`. If you mean the content is not changed, then that's expected, because we are still depending on the same set of .NET Core packages.",
      "created_at": "2017-03-24T16:58:53Z",
      "updated_at": "2017-03-24T16:58:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "After `Start-PSBuild -restore` my ` CorePsTypeCatalog.cs ` has still old date (17 jan) and contains links on \"4.0.0.1\" packages. Is it Ok?",
      "created_at": "2017-03-24T17:45:35Z",
      "updated_at": "2017-03-24T17:45:35Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "You need `Start-PSBuild -TypeGen -Publish` or `Start-PSBuild -Clean -Publish`.\r\n`-Restore` doesn't refresh the `CorePsTypeCatalog.cs`.",
      "created_at": "2017-03-24T18:25:09Z",
      "updated_at": "2017-03-24T18:25:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "`-Clean` is key \ud83d\udc4d Thanks!\r\nIt seems it is not documented well. \ud83d\ude15 \r\nWhat problems I can catch if my  `CorePsTypeCatalog.cs` is out of date?",
      "created_at": "2017-03-24T18:39:01Z",
      "updated_at": "2017-03-24T18:39:01Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Say we move to .NET Core 2.0 and you are still using `CorePsTypeCatalog.cs` from .NET Core 1.1, then it may appear that some type resolution would stop working.",
      "created_at": "2017-03-24T19:07:07Z",
      "updated_at": "2017-03-24T19:07:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Thanks for clarify! It looks that we should add this (`-Clean`) in our docs for well moving to MSBuild (and .Net Core 2.0): you mentioned in comments that we need only `dotnet restore`.",
      "created_at": "2017-03-24T19:17:31Z",
      "updated_at": "2017-03-24T19:17:31Z"
    }
  ],
  "created_at": "2017-03-22T21:17:38Z",
  "number": 3398,
  "state": "closed",
  "title": "Migrate from project.json to MSBuild",
  "updated_at": "2017-03-27T05:44:38Z"
}