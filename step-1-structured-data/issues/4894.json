{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4894",
  "author": "rkeithhill",
  "body": "Steps to reproduce\r\n------------------\r\nDownload and install the .NET Core 2.0 SDK.\r\n```powershell\r\ndotnet new classlib --name psmodule\r\ncd psmodule\r\ndotnet add package PowerShellStandard.Library --version 3.0.0-preview-01\r\nRemove-Item .\\Class1.cs\r\n@'\r\nusing System.Management.Automation;\r\n\r\nnamespace PSCmdlet3\r\n{\r\n    [Cmdlet(\"Get\", \"Foo\")]\r\n    public class GetFooCommand : PSCmdlet\r\n    {\r\n        [Parameter]\r\n        public string Name { get; set; } = string.Empty;\r\n\r\n        protected override void EndProcessing()\r\n        {\r\n            this.WriteObject(\"Foo is \" + this.Name);\r\n            base.EndProcessing();\r\n        }\r\n    }\r\n}\r\n'@ | Out-File GetFooCommand.cs -Encoding UTF8\r\ndotnet build\r\ncd .\\bin\\Debug\\netstandard2.0\\\r\nipmo .\\psmodule.dll\r\nget-foo\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nThis should work in PowerShell Core *and* in Windows PowerShell 5.1.\r\n\r\nActual behavior\r\n---------------\r\nThe binary module loads into Windows PowerShell but fails when executed with this error:\r\n```none\r\nget-foo : Could not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral,\r\nPublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified.\r\nAt line:1 char:1\r\n+ get-foo\r\n+ ~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [], FileNotFoundException\r\n    + FullyQualifiedErrorId : System.IO.FileNotFoundException\r\n```\r\n\r\nI guess I missing a shim assembly.  Could this be packaged with PSStandard.Lib?  If not, we need to make sure we document any other **required** pkgs.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.15063.608\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.15063.608\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n\r\nPSRemotingProtocolVersion      2.3\r\n```",
  "closed_at": "2017-10-20T19:02:10Z",
  "comments": [
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "If I execute the following, the error goes away:\r\n```\r\nAdd-Type -Path \"c:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0\\ref\\netcoreapp2.0\\net\r\nstandard.dll\"\r\n```",
      "created_at": "2017-09-22T02:57:58Z",
      "updated_at": "2017-09-22T02:57:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems related https://github.com/dotnet/standard/issues/328",
      "created_at": "2017-09-22T05:39:31Z",
      "updated_at": "2017-09-22T05:39:31Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Yeah, but the solution mentioned in that issue is that the **.NET Framework app** i.e. Windows PowerShell 5.1, has to be compiled with the package NETStandard.Library.  That's a problem.  :-(",
      "created_at": "2017-09-22T05:54:41Z",
      "updated_at": "2017-09-22T05:54:41Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I believe dotnet 4.7.1 will fix this https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/",
      "created_at": "2017-09-30T03:10:48Z",
      "updated_at": "2017-09-30T03:10:59Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@rkeithhill looks like you're right about needing a reference to NETStandard.Library in your .NET Framework project. For now, we need to doc this scenario end-to-end (including the need for that reference), and talk to @terrajobst about the best we should handle this more generally (whether that's shipping a module to the Gallery wrapping those DLLs for folks to depend on, or something else). ",
      "created_at": "2017-10-03T22:22:41Z",
      "updated_at": "2017-10-03T22:22:41Z"
    },
    {
      "author": "terrajobst",
      "author_association": "NONE",
      "body": "The host process should probably deploy the necessary facades and binding redirects for .NET Framework 4.6.1, 4.6.2, and 4.7. Starting with .NET 4.7.1 you no longer need that many files but due to a bug on our end it seems there are still two files necessary (System.Net.Http and System.IO.Compression). Let me know if you need more details for any of this.",
      "created_at": "2017-10-11T22:05:58Z",
      "updated_at": "2017-10-11T23:13:13Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "So PowerShell, as the host process, should be updated to deploy the appropriate facades and binding redirects.  This doesn't sound like a \"recompile\" of PowerShell is required.  I wonder if an update pkg can be created to add these to an existing Windows PowerShell 5.1 installation?  \r\n\r\nI'm guessing recompiling and shipping an updated Windows PowerShell (5.2) would be a much bigger deal given the team is focused primarily on PowerShell Core atm.\r\n",
      "created_at": "2017-10-11T22:30:36Z",
      "updated_at": "2017-10-11T22:30:36Z"
    },
    {
      "author": "terrajobst",
      "author_association": "NONE",
      "body": "> So PowerShell, as the host process, should be updated to deploy the appropriate facades and binding redirects. This doesn't sound like a \"recompile\" of PowerShell is required. I wonder if an update pkg can be created to add these to an existing Windows PowerShell 5.1 installation?\r\n\r\nTechnically yes. Practically, I wouldn't mess with the program files directory as this is owned by the application (and its setup).",
      "created_at": "2017-10-11T23:14:14Z",
      "updated_at": "2017-10-13T21:53:12Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "@terrajobst Agreed.  I wasn't suggesting that folks outside of Microsof attempt this.  I was just hoping that it would be easier (and therefore much more likely to get done) if Microsoft could issue a Windows PowerShell 5.1 **patch** to add this stuff.  I figured if Microsoft had to recompile and issue a new WMF 5.2, that would take a long time to happen.  :-)",
      "created_at": "2017-10-11T23:20:36Z",
      "updated_at": "2017-10-11T23:20:36Z"
    },
    {
      "author": "terrajobst",
      "author_association": "NONE",
      "body": "Maybe :-) That's for @joeyaiello's team to decide. I just had to share my two cents ;-)",
      "created_at": "2017-10-11T23:32:26Z",
      "updated_at": "2017-10-11T23:32:26Z"
    },
    {
      "author": "jherby2k",
      "author_association": "NONE",
      "body": "> The host process should probably deploy the necessary facades and binding redirects for .NET Framework 4.6.1, 4.6.2, and 4.7. Starting with .NET 4.7.1 you no longer need that many files but due to a bug on our end it seems there are still two files necessary (System.Net.Http and System.IO.Compression). Let me know if you need more details for any of this.\r\n\r\nBy a bug on your end, do you mean that this can be fixed in PowerShellStandard.Library and/or PowerShell Core 6 before RTM? \r\n\r\nI'm wondering if i'll be able to ship my cmdlet library on Windows with .NET 4.7.1 and have it work with PowerShell 5.1, or if i'm going to need to ship .NET Core and PowerShell 6 with it as well. I was under the impression this would be more seamless...",
      "created_at": "2017-10-13T15:11:38Z",
      "updated_at": "2017-10-13T15:11:38Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Good news.  I just tried this experiment on the Windows 10 FCU 16299.15 build which I think has 4.7.1 on it.  The Release reg val is 461308 which is higher than the one for 4.7.  Anyway, the above scenario works without having to run `Add-Type -Path <path>\\netstandard.dll`.  \r\n\r\nI'll be submitting a PR tonight for a doc page on a command-line version of creating a simple, portable binary module.  Of course, the proviso is that you have to have .NET 4.7.1 installed or be on Windows 10 FCU or higher.  I think this can live side-by-side with the PR for a version that uses Visual Studio. Certainly folks that are on Linux, won't be able to use Visual Studio.  Later we can put up a page that shows how to do this with Visual Studio Code on Linux/macOS.",
      "created_at": "2017-10-13T19:07:32Z",
      "updated_at": "2017-10-13T22:58:27Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "@terrajobst re:\r\n> deploy the necessary facades and binding redirects for .NET Framework 4.6.1, 4.6.2, and 4.7.\r\n\r\nDo you have a link to a resource that describes this process in depth?\r\n\r\nNevermind.  Found this - \r\nhttps://www.youtube.com/watch?v=vg6nR7hS2lI&index=4&list=PLRAdsfhKI4OWx321A_pr-7HhRNk7wOLLY",
      "created_at": "2017-10-14T01:31:38Z",
      "updated_at": "2017-10-14T05:27:01Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "OK, got the PR submitted for creating a simple, portable binary module using the dotnet CLI - #5117  ",
      "created_at": "2017-10-14T06:36:45Z",
      "updated_at": "2017-10-14T06:36:45Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "> I'm wondering if i'll be able to ship my cmdlet library on Windows with .NET 4.7.1 and have it work with PowerShell 5.1\r\n\r\nFYI, this scenario appears to work in my limited testing.  Plus that is one of the issues 4.7.1 was designed to rectify.",
      "created_at": "2017-10-14T22:15:54Z",
      "updated_at": "2017-10-14T22:15:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Can we close the Issue?",
      "created_at": "2017-10-20T07:19:24Z",
      "updated_at": "2017-10-20T07:19:24Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I think we can close this and any new issues should be new issues.",
      "created_at": "2017-10-20T19:02:09Z",
      "updated_at": "2017-10-20T19:02:09Z"
    }
  ],
  "created_at": "2017-09-22T02:50:44Z",
  "number": 4894,
  "state": "closed",
  "title": "Binary module compiled with PowerShellStandard.Library 3.0.0-preview-01 fails to run in Windows PowerShell",
  "updated_at": "2017-10-20T19:02:10Z"
}