{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13906",
  "author": "iRon7",
  "body": "Not sure if `-UnifyProperties` is the correct name for the parameter purpose described below.\r\nAnyways, it would be nice to have an easy and _standard_ way to resolve the (common) issue were properties aren't displayed or taken by the next cmdlet because the first object in the pipeline doesn't contain all the properties of the following objects.\r\n\r\nSee e.g.: [Not all properties displayed](https://stackoverflow.com/q/44428189/1701026) and I believe just a new StackOverflow question came in with the same cause: [Trying to get all Teams with their owners, members and guest in a CSV using Powershell](https://stackoverflow.com/q/64550092/1701026).\r\n\r\n## Proposed technical implementation details\r\n`Select-Object -UnifyProperties` should behave similar to the purposed `Union-Object` function (v0.2.1) described in the [Not all properties displayed answer](https://stackoverflow.com/a/44429084/1701026). Meaning that it is expected to stall the pipeline to collect *all* properties names of all objects in the pipeline and use them as a property selection\r\n\r\n### Related\r\nWith the purpose in place, the properties of the issues below could be obtained by simply piping the object to `| Select-Object -UnifyProperties`:\r\n* **format-table should at least warn when it doesn't display properties** #7871\r\n```PowerShell\r\n[pscustomobject]@{name='joe';address='home'}, [pscustomobject]@{phone='1'} | Select-Object -UnifyProperties\r\n```\r\n\r\n```\r\nname address phone\r\n---- ------- -----\r\njoe  home\r\n             1\r\n```\r\n\r\n* **Cannot display two or more variables successively when \"Select-Object\" used** #12825\r\n```PowerSehll\r\n$Adapters, $IPAddress | Select-Object -UnifyProperties\r\n```\r\n```PowerSehll\r\n$printers, $process | Select-Object -UnifyProperties\r\n```\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "`-Union` seems to imply objects are joined / data is added or shared in some fashion, when in reality you're not really adding data to any objects, just padding out extra properties so the display format is clear. \r\n\r\nI do agree it would be helpful for Select-Object to have this kind of functionality, but I don't think the parameter name communicates the intent very well. \ud83e\udd14 ",
      "created_at": "2020-10-27T12:53:29Z",
      "updated_at": "2020-10-27T12:53:44Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "Agree, I am not native English, and I have no clue what should be a correct name, any suggestions? `-UniteProperties` ? `AlignObjects` ?\r\n(I will change the title and content of this issue accordingly)",
      "created_at": "2020-10-27T12:56:26Z",
      "updated_at": "2020-10-27T14:34:26Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I'm not sure myself really. `-StandardizeProperties` would _maybe_ be ok but it feels like there should be a simpler term for it that I can't find at the moment. \ud83d\ude05 ",
      "created_at": "2020-10-27T13:13:43Z",
      "updated_at": "2020-10-27T13:13:43Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "I have changed the title/content using ` -UniteProperties` for now as `-Union` is definitely wrong and confusing.",
      "created_at": "2020-10-27T13:24:54Z",
      "updated_at": "2020-10-27T13:24:54Z"
    },
    {
      "author": "scriptingstudio",
      "author_association": "NONE",
      "body": "It is all about `join-object`, is it not it?",
      "created_at": "2020-10-27T13:45:01Z",
      "updated_at": "2020-10-27T13:45:01Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Typically I see Join-Object mentioned where you have two discrete sets of objects that you want to combine together based on a shared property/properties. My understanding of this suggestion (correct me if I'm wrong, please, @iRon7 \ud83d\ude42) is that we're mainly concerned with ensuring all the objects have the same property names, rather than merging related objects?",
      "created_at": "2020-10-27T14:03:38Z",
      "updated_at": "2020-10-27T14:03:38Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "Correct, it is **_not_** something like [`Join-Object`](https://github.com/iRon7/Join-Object), it is what @vexx32 describes: **ensuring all the objects have the same property names**",
      "created_at": "2020-10-27T14:12:14Z",
      "updated_at": "2020-10-27T14:12:14Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "It might also be considered to give this purposed feature to a specific (bogus) wildcard property (e.g. a double asterisk: `-Property **`):\r\n```PowerShell\r\n# Wishful thinking...\r\n[pscustomobject]@{name='joe';address='home'}, [pscustomobject]@{phone='1'} | Select-Object **\r\n\r\nname address phone\r\n---- ------- -----\r\njoe  home\r\n             1\r\n```\r\n",
      "created_at": "2020-10-27T15:25:42Z",
      "updated_at": "2020-10-27T15:56:16Z"
    },
    {
      "author": "scriptingstudio",
      "author_association": "NONE",
      "body": "@iRon7 your example is exactly what any implementation of `join-object` does including my own. So I vote for a new native cmdlet `join-object`.",
      "created_at": "2020-10-27T17:29:18Z",
      "updated_at": "2020-10-27T17:29:18Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Does it? Most Join-Object implementations I've seen would result in a single object. @iRon7's example is still two objects.",
      "created_at": "2020-10-27T17:42:49Z",
      "updated_at": "2020-10-27T17:42:49Z"
    },
    {
      "author": "scriptingstudio",
      "author_association": "NONE",
      "body": "Single object is a result of merge. Join just adds object to another one. That is my understanding.",
      "created_at": "2020-10-27T17:46:37Z",
      "updated_at": "2020-10-27T17:46:37Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That's not what's happening here, either? Neither object is being added to the other. Just ensuring that all the objects have the same set of property names.",
      "created_at": "2020-10-27T18:31:47Z",
      "updated_at": "2020-10-27T18:31:47Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I like the idea in general, but we need to distinguish between whether this is for _display formatting_ or really about _creating objects_ that have the union of all properties across all input objects.\r\n\r\nIf this is about display formatting, then `Select-Object` isn't the right cmdlet to extend - `Format-Table` would be, perhaps with an `-AllProperties` switch:\r\n\r\nHere's a quick prototype: \r\n\r\n```powershell\r\nfunction Format-TableAllProperties {\r\n  [System.Collections.Generic.List[string]] $propNames = @()\r\n  [System.Collections.Generic.HashSet[string]] $hashSet = @()\r\n  $inputCollected = @($input)\r\n  $inputCollected.ForEach({ \r\n    foreach ($name in $_.psobject.Properties.Name) {\r\n      if ($hashSet.Add($name)) { $propNames.Add($name) }\r\n    }\r\n  })\r\n  $inputCollected | Format-Table $propNames\r\n}\r\n```\r\n\r\n```powershell\r\nPS> [pscustomobject] @{ one = 1; two = 2; three = 3 }, [pscustomobject] @{ one = 10; three = 30; four = 4 } | \r\n      Format-TableAllProperties\r\n\r\none two three four\r\n--- --- ----- ----\r\n  1   2     3 \r\n 10        30 4\r\n```",
      "created_at": "2020-10-27T18:35:52Z",
      "updated_at": "2020-10-27T18:36:28Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@dfinke had to put `Update-FirstObjectProperties` [into ImportExcel](https://github.com/dfinke/ImportExcel/blob/master/Public/Update-FirstObjectProperties.ps1)  for exactly this reason.  There must be a stack of places which need it.  \r\n\r\nWhether adding it to `Select-object` is better than having a self contained command can be argued both ways. \r\nWhat that function could be implemented in a proxy command wrapping `Select-Object` but I've grown to expect it to be in its own command, so that's my bias, but I'm also thinking `Select-Object `is one of those widely used cmdlets that people might prefer to leave alone. ",
      "created_at": "2020-10-27T19:00:31Z",
      "updated_at": "2020-10-27T19:00:31Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "So it sounds like _both_ a for-display and an extend-actual-objects solution may be desirable.\r\n\r\n(I suspect you're aware of it , @jhoneill, and the function name suggests it, but just to make it explicit: the linked function uses only the _first_ input object as the source for the set of properties whose presence should be ensured on all subsequent ones).\r\n\r\n@iRon7, can we get clarity on which one you were looking for - the examples in the OP suggest the former - and perhaps create a _separate_ issue for the respective other, or at least clearly distinguish  these use cases.\r\n\r\n\r\n\r\n",
      "created_at": "2020-10-27T19:18:39Z",
      "updated_at": "2020-10-27T19:19:36Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "@mklement0,\r\n\r\n> for _display formatting_ or really about _creating objects_\r\n\r\nIt is about *creating objects* (at least from my view), I had more something in mind like:\r\n\r\n```PowerShell\r\nfunction UniteProperties {                               # Select-Object -UniteProperties\r\n  [System.Collections.Generic.List[string]] $propNames = @()\r\n  [System.Collections.Generic.HashSet[string]] $hashSet = @()\r\n  $inputCollected = @($input)\r\n  $inputCollected.ForEach({ \r\n    foreach ($name in $_.psobject.Properties.Name) {\r\n      if ($hashSet.Add($name)) { $propNames.Add($name) }\r\n    }\r\n  })\r\n  $inputCollected | Select-Object $propNames\r\n}\r\n```\r\n\r\nCurrent situation:\r\n```PowerShell\r\n[pscustomobject] @{ one = 1; two = 2; three = 3 },\r\n[pscustomobject] @{ one = 10; three = 30; four = 4 } |\r\n    ConvertTo-Csv\r\n\r\n\"one\",\"two\",\"three\"\r\n\"1\",\"2\",\"3\"\r\n\"10\",,\"30\"\r\n```\r\n\r\nFuture situation\r\n```\r\n[pscustomobject] @{ one = 1; two = 2; three = 3 },\r\n[pscustomobject] @{ one = 10; three = 30; four = 4 } |\r\n    UniteProperties | ConvertTo-Csv              # Select-Object -UniteProperties | ConvertTo-Csv\r\n\r\n\"one\",\"two\",\"three\",\"four\"\r\n\"1\",\"2\",\"3\",\r\n\"10\",,\"30\",\"4\"\r\n```",
      "created_at": "2020-10-27T19:22:40Z",
      "updated_at": "2020-10-27T19:22:40Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "> (I suspect you're aware of it , @jhoneill, and the function name suggests it, but just to make it explicit: the linked function uses only the _first_ input object as the source for the set of properties whose presence should be ensured on all subsequent ones).\r\n\r\nYes, it should be on all subsequent objects, because if you correct only the first object and then `... | Sort-Object | ...`, it might lose some properties again (see the description in the [Not all properties displayed answer](https://stackoverflow.com/q/64550092/1701026)).",
      "created_at": "2020-10-27T19:29:37Z",
      "updated_at": "2020-10-27T19:33:20Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for clarifying, @iRon7.\r\n\r\nAs for the parameter name, maybe `-UnifyProperties` is better?\r\n\r\nAs for a potential separate cmdlet instead: I struggle to even think of a good name, because there is no fitting approved verb that I see (there's some conceptual similarity to `Add-Member`, but adding it to that is worse, I think).\r\n\r\nI think adding this to `Select-Object` is a good fit in terms of user expectations, even though the collect-all-input-up-front behavior is a departure, but addressing that through the help should suffice.\r\n\r\nHowever, I don't know if there are implementation challenges and we would need to decide whether want to allow combining the new switch with any of the existing sub-selection functionality (`-First`, `-Skip`, `-Unique` ...) ",
      "created_at": "2020-10-27T20:04:56Z",
      "updated_at": "2020-10-27T20:04:56Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "\r\n> (I suspect you're aware of it , @jhoneill, and the function name suggests it, but just to make it explicit: the linked function uses only the _first_ input object as the source for the set of properties whose presence should be ensured on all subsequent ones).\r\n\r\nThere are two situations, one is where the first object determines what will be displayed / exported and the other objects can safely be left with a subset of the fields.  \r\nSomeone wedded to strict mode might hit problems with properties missing, so I wouldn't rule out ensuring presence, but\r\n* adding many properties is slow compared to checking for their presence.\r\n*  A piece of code which assumes properties are present is also likely to assume that one is a string, one is an integer, on is a Boolean etc, so the properties must be typed correctly\r\n* If the type is bool or in and not  the nullable version one can't expect the receiving software to accept null.\r\n* Giving fields a value (zero, false, empty string) changes the data from \"Not known\" to \"known and zero/false/empty\" which can have unpredictable consequences. \r\nLike I say I wouldn't argue there's no need, but this a dangerous thing to do. When you want to ensure a _known_ set of properties are all present on all objects, you just run through Select -property a,b,.y,z . \r\nThe use case is (surely?) that the properties can't be known in advance, but you want to see all of them where they exist. Not that you want to fill in missing columns in each row with fictional values. \r\n\r\n\r\n \r\n\r\n\r\n   ",
      "created_at": "2020-10-27T21:43:47Z",
      "updated_at": "2020-10-27T21:43:47Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> It is about _creating objects_ (at least from my view), I had more something in mind like:\r\n> \r\n> ```powershell\r\n> function UniteProperties {                               # Select-Object -UniteProperties\r\n>   [System.Collections.Generic.List[string]] $propNames = @()\r\n>   [System.Collections.Generic.HashSet[string]] $hashSet = @()\r\n>   $inputCollected = @($input)\r\n>   $inputCollected.ForEach({ \r\n>     foreach ($name in $_.psobject.Properties.Name) {\r\n>       if ($hashSet.Add($name)) { $propNames.Add($name) }\r\n>     }\r\n>   })\r\n>   $inputCollected | Select-Object $propNames\r\n> }\r\n> ```\r\n\r\nOr more simply, and more powershell-styled. \r\n```powershell\r\nfunction UniteProperties {\r\n    $hash =@{}\r\n    $i = @($input)\r\n    foreach ($obj in $i) {foreach ($p in $obj.psobject.properties) {$hash[$p.name] = $true} }\r\n    $i | Select-Object ($hash.keys | ForEach-Object tostring)\r\n}\r\n```\r\nAnd test with\r\n```\r\n$y [pscustomobject] @{ one = 1; two = 2; three = 3 },\r\n[pscustomobject] @{ one = 10; three = 30; four = 4 } |\r\n    UniteProperties \r\n\r\n$y | convertto-csv\r\n\r\n$y[1].four.gettype()\r\n\r\ngm -in $y[0] \r\n\r\n$y[0].four.gettype()\r\n```\r\n\r\nHave a look at what the last three lines do. That's part of what I was trying to explain to @mklement0  and probably didn't make sense.  That maybe what you want ...\r\n\r\n",
      "created_at": "2020-10-27T22:33:33Z",
      "updated_at": "2020-10-27T22:34:14Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "@jhoneill,\r\nI guess you meant: `$y = [pscustomobject] ...`\r\nIn that case, all the examples behave as I would expect:\r\n\r\n**`$y | convertto-csv `**\r\nAll objects are converted to a csv format. Where every property (independent of its type) is wrapped in double quotes, except for `$Null` with is left empty:\r\n```PowerShell\r\n\"one\",\"two\",\"three\",\"four\"\r\n\"1\",\"2\",\"3\",\r\n\"10\",,\"30\",\"4\"\r\n```\r\n\r\n**`$y[1].four.gettype()`**\r\nThe property of the second object (`[1]`) is set to an integer (`four = 4`):\r\n```\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     True     Int32                                    System.ValueType\r\n```\r\n\r\n**`gm -in $y[0]`**\r\nI am not familiar with this syntax, but assume it is similar to `$y[0] | gm`.\r\nThe properties `One`, `Two`, and `Three` are set to an integer (as above) and the property `four` is `null` (where `Get-Member` shows a general `Object` for the MemberType which unrelated to this purpose)\r\n```\r\nName        MemberType   Definition\r\n----        ----------   ----------\r\nEquals      Method       bool Equals(System.Object obj)\r\nGetHashCode Method       int GetHashCode()\r\nGetType     Method       type GetType()\r\nToString    Method       string ToString()\r\nfour        NoteProperty object four=null\r\none         NoteProperty int one=1\r\nthree       NoteProperty int three=3\r\ntwo         NoteProperty int two=2\r\n```\r\n\r\n**`$y[0].four.gettype()`**\r\nIs resulting in an error as the value is not supplied (`$Null`), similar to: `$Null.GetType()`\r\n```\r\nInvalidOperation: You cannot call a method on a null-valued expression.\r\n```\r\nThe result will be exactly the same if you manually define the properties for `Select-Object`:\r\n```PowerShell\r\n$y = [pscustomobject] @{ one = 1; two = 2; three = 3 },\r\n[pscustomobject] @{ one = 10; three = 30; four = 4 } |\r\n    UniteProperties | Select-Object one, two, three, four\r\n```\r\nAnd still similar to just:\r\n```PowerShell\r\n$z = [pscustomobject] @{ one = 1; two = 2; three = 3 },\r\n[pscustomobject] @{ one = 10; three = 30; four = 4 }\r\n```\r\nWhere the _expected_ difference is:\r\n```\r\n$y[0] | gm                                                        | $z[0] | gm\r\n                                                                  | \r\n   TypeName: Selected.System.Management.Automation.PSCustomObject |    TypeName: System.Management.Automation.PSCustomObject\r\n                                                                  | \r\nName        MemberType   Definition                               | Name        MemberType   Definition\r\n----        ----------   ----------                               | ----        ----------   ----------\r\nEquals      Method       bool Equals(System.Object obj)           | Equals      Method       bool Equals(System.Object obj)\r\nGetHashCode Method       int GetHashCode()                        | GetHashCode Method       int GetHashCode()\r\nGetType     Method       type GetType()                           | GetType     Method       type GetType()\r\nToString    Method       string ToString()                        | ToString    Method       string ToString()\r\nfour        NoteProperty object four=null                         | one         NoteProperty int one=1\r\none         NoteProperty int one=1                                | three       NoteProperty int three=3\r\nthree       NoteProperty int three=3                              | two         NoteProperty int two=2\r\ntwo         NoteProperty int two=2                                | \r\n```\r\nIn the currect situation (`$z[0]`), the property `Four` is missing, where using `... | Select-Object -UnifyProperties` (`$y[0]`), the property `four` is set to `$Null`.\r\n\r\nBy default the result will be the same, both `$z[0].four` and `$y[0].four` eventually result in a `$Null`.\r\nThere will be a difference when setting the [`Set-StrictMode -Version latest`](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/set-strictmode?view=powershell-7), where `$y[0].four` will convinently return a `$Null` and `$z[0].four` will return an error:\r\n```\r\nPropertyNotFoundException: The property 'four' cannot be found on this object. Verify that the property exists.\r\n```\r\nThis is yet another reason to apply the unification to *all* object properties and not just the first one.\r\n```PowerShell\r\n$y = [pscustomobject] @{ one = 1; two = 2; three = 3 },\r\n     [pscustomobject] @{ one = 4; two = 5; three = 6 },\r\n     [pscustomobject] @{ one = 10; three = 30; four = 4 } |\r\n         UniteProperties | ConvertTo-Csv\r\n```\r\n(It will be inconsistent if `$y[0].four` and `$y[1].four` behave differently in certain StrictModes)",
      "created_at": "2020-10-28T10:23:52Z",
      "updated_at": "2020-11-02T18:14:44Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "@mklement0,\r\n\r\n> As for the parameter name, maybe -UnifyProperties is better?\r\n\r\nI am fine with this, although I did have some more thoughts about this: Rather than choosing a _verb_ for a parameters, rely on the the cmdlet's verb, which results in something like this: `... | Select -EveryProperty` or simply  `... | Select -AllProperties`\r\n\r\nWhich also shows why I think it should be a feature of `Select-Object`. Besides, `Select-Object` has already a similar output if you define the properties yourself, like `...  | Select-Object one, two, three, four` (this is also supported by the fact that the prototype already uses the `Select-Object` cmdlet) , it just needs to automatically figure out what properties are used.\r\n\r\n> even though the collect-all-input-up-front behavior is a departure\r\n\r\nSome of the existing parameters of the `Select-Object` cmdlet already doing this like `-Last <int>` (e.g. `-Last 1000` for less objects) and (unexpected, see: #11221) `-Unique`",
      "created_at": "2020-10-28T10:24:04Z",
      "updated_at": "2020-10-28T10:28:21Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iRon7:\r\n\r\nMy concern about `-AllProperties` and `-EveryProperty` is that it sounds like `Select-Object *` and doesn't express the aspect of _unifying_ (making _uniform_) the set of properties across all objects. In general, it is not uncommon for parameter names to use verbs (`-Wait`, `-Skip`, `-Force`, ...), if that is your concern.\r\n\r\nAnd to be clear: I'm fine with adding this to `Select-Object`, and the collect-all-input-first is just a matter of documenting it properly. \r\n\r\nIf `-Last` really currently collects all input up front, it amounts to an inefficient implementation that should be changed in favor of a queue of the specified length, so that only the most recent N input objects are retained on an ongoing basis. \r\n\r\nSimilarly, `-Unique` only needs to retain the _unique_ input objects - though, _depending on the input_, that may be all of them.\r\n\r\nTo put it differently: cmdlets that for conceptual reasons must defer pipeline output until their `end` block is processed may need to _look_ at all input objects first, but they don't have to necessarily _collect_ them _all_, whereas the feature we're discussing here does.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2020-10-28T13:11:46Z",
      "updated_at": "2020-10-28T13:12:16Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "Caveat on the prototype:\r\n* An error occurs in case the property names are equal but differ in casing.\r\n\r\nBased on [this StackOverflow answer](https://stackoverflow.com/a/41578530/1701026) and some testing, I think it is safe presume that a `HashSet` stays ordered for this application.\r\n\r\n**Updated prototype version:**\r\n```PowerShell\r\nfunction UnifyProperties {\r\n  $Names = [System.Collections.Generic.HashSet[string]]::new([StringComparer]::OrdinalIgnoreCase)\r\n  $InputCollected = @($Input)\r\n  $InputCollected.ForEach({ \r\n    foreach ($Name in $_.psobject.Properties.Name) { $Null = $Names.Add($Name) }\r\n  })\r\n  $inputCollected | Select-Object @($Names)\r\n}\r\n\r\n[pscustomobject] @{ one = 1; two = 2; three = 3 },\r\n[pscustomobject] @{ ONE = 10; THREE = 30; FOUR = 4 } |\r\n    UnifyProperties\r\n\r\none two three FOUR\r\n--- --- ----- ----\r\n  1   2     3\r\n 10        30 4\r\n```",
      "created_at": "2021-08-25T16:40:07Z",
      "updated_at": "2021-08-26T09:02:05Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "Maybe I should open a new issue for this idea as this view is towards the PowerShell engine rather than the (`Select-Object`) cmdlet.\r\n\r\nGoing back to the actual problem I am trying to (easily) resolve here, the question ***why*** the issue \"[Not all properties displayed](https://stackoverflow.com/q/44428189/1701026)\" exists should be asked. Which I think I might define as follows:\r\n\r\n*The cause of the issue is adherent to a pipeline (streaming) design where you can't see which objects will follow. Therefore it can only be assumed that the following objects have the same properties as the first object...*\r\n\r\nWhich lead to a counter question:\r\n*So, if I don't use the pipeline, I won't have this issue?*\r\n\r\nIndeed, if you don't stream you shouldn't have this issue. Yet in PowerShell, if I do load the whole stream in memory, I actually still have the issue.\r\n\r\nBringing this back to a PowerShell expectation:\r\n\r\nIf I use the pipeline (stream) and do e.g. this:\r\n```PowerShell\r\n[pscustomobject]@{name='joe';address='home'}, [pscustomobject]@{phone='1'} \r\n```\r\nI might expect to lose some properties.\r\nBut if I choke the pipeline and load everything in memory by using the [grouping operator `( )`](https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_operators#grouping-operator--):\r\n```PowerShell\r\n([pscustomobject]@{name='joe';address='home'}, [pscustomobject]@{phone='1'})\r\n```\r\nor assign the complete array to a variable:\r\n```PowerShell\r\n$Array = [pscustomobject]@{name='joe';address='home'}, [pscustomobject]@{phone='1'}\r\n$Array\r\n```\r\nI might actually expect that PowerShell has enough information available to unify all the properties automatically for me.\r\n\r\nTechnically, I assume this could be implemented as a \"syntactic sugar\" similar to the `UnifyProperties` prototype purpose but from performance point of view it probably better to build a list of unique PSObject names during the construction of the native PowerShell (PSObject) array.",
      "created_at": "2022-03-11T10:30:03Z",
      "updated_at": "2022-03-11T11:13:03Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "\r\nThe \"why does PowerShell output the first object before waiting to see ALL the objects and their properties\" question sort of answers itself. It Outputs the first and writes headers and then assumes anything that follows will be same, so you don't need to wait for all he data to come out of a long running process.   \r\n One of the interesting questions is would we want something like `format-table -property * -autosize ` which _does_ wait until it has all the objects to do this kind of unification ?  That might be a better place to make the change than in Select-Object (but the cmdlet isn't the only thing that uses the table formatter so that might be more of an engine thing) \r\nI can see an argument for doing it in `Select-object` -  that it is a common enough requirement that it should be in the core product, and I can see the arguments against: (a) it isn't hard to solve , and (b) it changes how select object works (storing objects rather and emitting them all at the end). (c) It's a formatting thing so any work should really be in the formatting engine. \r\n \r\n> But if I choke the pipeline and load everything in memory by using the [grouping operator `( )`]> \r\n> ```powershell\r\n> ([pscustomobject]@{name='joe';address='home'}, [pscustomobject]@{phone='1'})\r\n> ```\r\n> \r\n> or assign the complete array to a variable:\r\n\r\nThose things _still_ send a set of objects down the pipeline with no destination so they go through the formatter and plop out on the console.  Anything which sends multiple dissimilar objects in one command will do the same thing - output objects as they arrive, using the first to set the format for the others. \r\n\r\n",
      "created_at": "2022-03-11T12:20:57Z",
      "updated_at": "2022-03-11T12:20:57Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "@jhoneill,\r\n\r\n> Those things still send a set of objects down the pipeline with no destination so they go through the formatter and plop out on the console\r\n\r\nIt is not just console cmdlets but any (destination) cmdlet in the pipeline. Take e.g. `Export-Csv` or `ConvertTo-Csv`:\r\n```PowerShell\r\n[pscustomobject]@{name='joe';address='home'}, [pscustomobject]@{phone='1'} |ConvertTo-Csv\r\n\"name\",\"address\"\r\n\"joe\",\"home\"\r\n,\r\n```\r\nWishful thinking to resolve this:\r\n```PowerShell\r\n([pscustomobject]@{name='joe';address='home'}, [pscustomobject]@{phone='1'}) |ConvertTo-Csv\r\n\"name\",\"address\",\"phone\"\r\n\"joe\",\"home\",\r\n,,\"1\"\r\n```\r\n",
      "created_at": "2022-03-11T14:24:17Z",
      "updated_at": "2022-03-11T14:30:56Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@iRon7  strictly it isn't any command. And I was responding to some sloppy wording: all output goes down the PowerShell pipeline.  You can write to host or verbose or error but that's not output. \r\n\r\nMany commands assume that all objects the receive will be of the same type Something like ConvertTO-Csv does it. Export-Excel (which I worked on) does it - and Doug Finke wrote something to do this job there too.  If you want to write a header with property types (excel, csv, but not JSON for example), then you have two options, either assume identical objects, write the header based on the first and carry on from there, which is typically faster and can move items on to the next step as they are ready. \r\nor wait until you have the last object, look at all the properties of all the objects to see if there are any new ones, and then output all the columns.  I don't think you're going to get everything to work this way by default. So you're back to putting a unify command in before the one which makes the assumptions  ",
      "created_at": "2022-03-11T17:06:35Z",
      "updated_at": "2022-03-11T17:06:35Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "Sorry to be persistent on this...\r\n\r\n> ...or wait until you have the last object\r\n\r\nif I use the [grouping operator `( )`](https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_operators#grouping-operator--) or assign the object array (pipeline) to a variable, I do already have all the objects _up till last object_: `( ... )[-1]`.\r\n\r\nUnfortunately I wasn't able to write a class (in PowerShell) that completely does what I have in mind, where I would like to align (unify) the object properties when they are being unrolled in the pipeline rather than at the construction. Nevertheless, they prototype I created appears to work quiet well the way I imaging it to work by default:\r\n\r\n```PowerShell\r\nclass Unify : System.Collections.Generic.List[PSObject] {\r\n    Unify([Object[]]$Objects) {\r\n        ForEach($Object in $Objects) {\r\n            $This.Add($Object)\r\n            if ($Object -isnot [String]) {\r\n                $Object.PSObject.Properties.Name.ForEach{ \r\n                    $This |Add-Member -MemberType ScriptProperty -Name $_ -Value {} -ErrorAction SilentlyContinue\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n[Unify]([pscustomobject]@{name='joe';address='home'}, [pscustomobject]@{phone='1'}) |% { $_ }\r\n\r\nname address phone\r\n---- ------- -----\r\njoe  home\r\n             1\r\n```\r\n\r\nIt would be nice if PowerShell would be able to align (unify) the properties of each object by default at moment it unrolls an (in-memory) array into a pipeline similar what the above class does (at construction).\r\nNote that the individual items should still have only their own properties, e.g.:\r\n```PowerShell \r\n([Unify]([pscustomobject]@{name='joe';address='home'}, [pscustomobject]@{phone='1'}))[1]\r\n\r\nphone\r\n-----\r\n1\r\n\r\n([Unify]([pscustomobject]@{name='joe';address='home'}, [pscustomobject]@{phone='1'}))[0..1]\r\n\r\nname address phone\r\n---- ------- -----\r\njoe  home\r\n             1\r\n```\r\n\r\n\r\n\r\n",
      "created_at": "2022-03-17T11:25:24Z",
      "updated_at": "2022-03-17T15:06:27Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "Grouping (per that link) doesn't mean what you think it means. \r\n`1 + 2 * 3 `    gives 7    \r\n`(1 + 2) * 3` gives 9.   It _groups operations_ \r\n`1, 2 * 3`  Gives 1,2,1,2,1,2  (it repeats the array 3 times) \r\n`1, (2 * 3)`  Gives 1 , 6  (2* 3 is _grouped_ before making the array) \r\n`(1, 2) * 3`  is the default (make the array a _group_ - which was the default anyway - and then make 3 of those)\r\n\r\nThere is an _array operator_ so `(1)` is just the int 1 , but `@(1)`  is a single member array with int 1 as the sole member\r\n\r\nIf  PowerShell sees `1,2,3 | thing`   or `@(1,2,3) | thing`   or `(1,2,3) | thing`  it says \"oh an array of objects, I'll enumerate its members and send them down the pipeline one by one... \r\n`$x | convertTo-csv`  does the the same as `($x) | convertTo-csv`   but `($x + $y) | convert-toCsv` is _grouped_ differently from `$x + ($y | convert-toCsv)` \r\n\r\nI see where you're going with that class, but you'll be quicker making an array, doing a pass through it to find the full list of properties. The do a second pass through it to add the missing ones. What you have there will get very slow with a big array.  Just pondering if what you actually want is a special type of array/collection which does that when items are enumerated or even as they are added.  \r\n",
      "created_at": "2022-03-18T09:01:14Z",
      "updated_at": "2022-03-18T09:01:14Z"
    }
  ],
  "created_at": "2020-10-27T12:43:30Z",
  "number": 13906,
  "state": "open",
  "title": "Add  -UnifyProperties parameter to Select-Object",
  "updated_at": "2022-03-18T09:01:14Z"
}