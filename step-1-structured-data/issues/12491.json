{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12491",
  "author": "rkeithhill",
  "body": "# Summary of the new feature/enhancement\r\n\r\nThis might be a stretch but this is another one of those unfortunate gotchas when a dev is trying to use PowerShell to invoke commands that have been documented.  Here's the problem:\r\n\r\n```powershell\r\n04-25 14:54:57 84> g++ timer.cpp @conanbuildinfo.args -o timer --std=c++11\r\nParserError:\r\nLine |\r\n   1 |  g++ timer.cpp @conanbuildinfo.args -o timer --std=c++11\r\n     |                ~~~~~~~~~~~~~~~\r\n     | The splatting operator '@' cannot be used to reference variables in an expression.\r\n     | '@conanbuildinfo' can be used only as an argument to a command. To reference variables\r\n     | in an expression use '$conanbuildinfo'.\r\n\r\n[master \u2261 +13 ~9 -0 !] /mnt/c/Users/hillr/GitHub/Conan-IO/training/consumer_gcc\r\n04-25 14:55:28 85> g++ timer.cpp '@conanbuildinfo.args' -o timer --std=c++11\r\n```\r\nIn this case, `conanbuildinfo.args` is a file, specifically a response file that contains a bunch of arguments to `g++`.  It is not that uncommon for exes to use a response file specified with `@response_filename`.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nI'm not entirely sure what the solution is but maybe in this case before erroring when the variable is not found (`conanbuildinfo` in the example above), consider passing the arg **as-is** to the native binary assuming it will handle the `@`.  This might be worth emitting a warning.  Something like: `Could not find splatted variable 'conanbuildinfo', passing argument as-is to the application.  To avoid this warning, put single quotes around the argument.`.  Also, if strict mode is set, maybe this should go ahead and error?\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "@rkeithhill I assume quoting the argument is all that's needed to make it work - correct? We could update the error message to say that \"blah, blah ... quote arguments starting with '@' blah blah ...\".  As far as \"fixing\" this, I just worry that, given how complex parameter binding already is, adding more special cases could ultimately make things worse, not better. How much of an issue do think this is?",
      "created_at": "2020-04-26T19:42:28Z",
      "updated_at": "2020-04-26T19:42:28Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "> I assume quoting the argument is all that's needed to make it work\r\n\r\nThat is correct.  It is a fair point to ask if the increased parameter binding complexity is worth it.  As for the question of how much of an issue this is ... that is hard to say but I expect it is more of an issue now that new (Linux/macOS) users are kicking the tires on PowerShell.  The problem is sort of a \"first impression\" issue.  For most folks, their first impression is how well PowerShell does at executing commands from the console.  The command line I listed above was from a training class on Conan.  The first attempt in PowerShell was a failure - not a good first impression.  \r\n\r\nThat said, there are so many of these issues - `;` as a statement sep, `$` for variables `()` for expressions, quoting issues, etc.  Maybe there should be a more holistic approach to all these native app arg issues?  Yes, **I** know about the stop parsing operator but anybody kicking the tires on PowerShell will not.  And there is nothing in the error message that gives the user any help or clue as to how to rectify the situation.  That is not a good user experience.  At the very least, if we detected certain types of parameter errors for a native app, we should offer some suggestions on how to rectify the situation - use `--%` or quote args, etc.  Ideally, in an interactive situation, PowerShell would offer to re-execute the command in a dumb parsing mode.  There are likely a number of other ways to address this to varying degrees.  Most of them are probably better than what we have now.  ",
      "created_at": "2020-04-26T21:19:19Z",
      "updated_at": "2020-05-05T04:20:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Most of them are probably better than what we have now.\r\n\r\nAnd all will be a huge breaking change. Do we really want this if `--%` was introduced many years ago?",
      "created_at": "2020-04-28T07:13:58Z",
      "updated_at": "2020-04-28T07:13:58Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Adding some \"mitigation tips\" to error messages wouldn't be breaking.  Right now we leave new folks with nothing really to go on.  Look at the original post's error message.  That error message IN NO WAY helps the user in this case.  \r\n\r\nI think we could be smarter about parameter errors when they are for native applications and provide some tips in the error message like using `--%` or show how to invoke a help topic on parameter issues when invoking native applications.",
      "created_at": "2020-04-29T02:31:16Z",
      "updated_at": "2020-04-29T02:31:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Another thought is that if we say about interactive user session we could introduce \"native command mode\" - in the mode first execute input string \"as-is\" without parsing arguments and use \"&\" to force parsing.",
      "created_at": "2020-04-29T03:23:29Z",
      "updated_at": "2020-04-29T03:23:29Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "> introduce \"native command mode\"\r\n\r\nIf we could do that in a non-breaking way that would be cool.  That might also be able to address another issue where you'd like to invoke a native app and bypass any aliases or functions that happen to have the same name.  I remember this issue was discussed quite a while back but nothing ever came of it.  Well, except that certain aliases like `ls` and `sort` were removed on Linux/macOS.\r\n\r\n",
      "created_at": "2020-04-29T18:14:53Z",
      "updated_at": "2020-04-29T18:15:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> If we could do that in a non-breaking way that would be cool. \r\n\r\nIt is a breaking change I think. I like it.\r\n```powershell\r\nPS >& <Enter>           # We could use '&' to switch mode\r\nPS &>                   # Now we are in native command mode\r\nPS &>& <enter>          # Switch back in PowerShell command mode\r\nPS >                    # Now we are in PowerShell command mode\r\n```\r\n\r\nPerhaps @JamesWTruher @daxian-dbw and @TylerLeonhardt could share thoughts.",
      "created_at": "2020-04-30T04:01:20Z",
      "updated_at": "2020-04-30T04:01:20Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "For the splatting sigil, we could always treat that as literal for native commands since you can't splat to native commands.  However, the other characters that match to pwsh syntax is problematic.  One possible solution is to have a suggestion based on a non-zero exit code that could check if any of those characters were used and suggest quoting them or using `--%' (which makes that switch more discoverable as I'm sure most users aren't familiar with it)",
      "created_at": "2020-06-10T14:18:18Z",
      "updated_at": "2020-06-10T14:18:18Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Native commands can have arrays splatted to them, so we can't assume `@` is always a literal:\r\n\r\n```ps1\r\n$params = @(\r\n    '/c'\r\n    'ping 1.1.1.1'\r\n)\r\n\r\ncmd @params\r\n```\r\n\r\nAlso, to provide such a suggestion... we should probably fix up the suggestions feature first, so that we don't end up increasing the necessary work for that in future (assuming that's still something we want to do sooner or later).",
      "created_at": "2020-06-10T14:55:53Z",
      "updated_at": "2020-06-10T14:55:53Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@vexx32 yeah, forgot about that was only thinking about hashtables.  Agree we need to fix up the suggestion feature first for other reasons :)",
      "created_at": "2020-06-10T14:57:09Z",
      "updated_at": "2020-06-10T14:57:09Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "> One possible solution is to have a suggestion based on a non-zero exit code that could check if any of those characters were used and suggest quoting them or using `--%' (which makes that switch more discoverable as I'm sure most users aren't familiar with it)\r\n\r\nMe like.  :-)",
      "created_at": "2020-06-10T16:53:21Z",
      "updated_at": "2020-06-10T16:53:21Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Food for thought - maybe it's possible to work like people expect most of the time.\r\n\r\n* In `VariableOps.GetVariableValue` - after the check for a failed lookup, defer the strict mode check when `varAst.Splatted` is true.\r\n* In this case, return an instance of a new type `SplattedUndefinedVariable`  whose `ToString()` implementation renders the variable name with the `@` before so the native command parameter binder \"just works\" on the value.\r\n* In PipelineOps.AddCommand - where splatting is expanded, if the value's type is `SplattedUndefinedVariable` **and** the command is **not** a native command, perform the strict mode check, and if that doesn't throw, replace the value with $null.\r\n",
      "created_at": "2020-06-11T00:56:12Z",
      "updated_at": "2020-06-11T00:56:12Z"
    }
  ],
  "created_at": "2020-04-25T21:54:00Z",
  "number": 12491,
  "state": "open",
  "title": "Do not error on native binary that handles @ to expand response file contents as args",
  "updated_at": "2020-08-20T18:15:10Z"
}