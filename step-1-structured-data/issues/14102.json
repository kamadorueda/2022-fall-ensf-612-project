{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14102",
  "author": "anthony-geoghegan",
  "body": "Now that I\u2019m using a Windows 10 laptop for working from home, I decided to try using PowerShell Core and discovered the following error when attempting to run the `Get-WinUserLanguageList` cmdlet. I\u2019m not a programmer (mostly a GNU/Linux sysadmin) and I was never particularly proficient at PowerShell but this looks like C#/.NET error.\r\n\r\nThe `Get-WinUserLanguageList` cmdlet is provided by the `International` module which is listed as being compatible with `Core, Desktop`. The cmdlet works in Windows PowerShell 5.1 and not in PowerShell Core 7.1 so I hope I\u2019m reporting this bug to the right place. If not, let me know where I should report this and if so, I hope I've provided enough relevant information.\r\n\r\n## Steps to reproduce\r\n\r\nInvoke the following cmdlet:\r\n\r\n```powershell\r\nGet-WinUserLanguageList\r\n```\r\n\r\n## Expected behaviour\r\n\r\nWindows PowerShell 5.1 on the same machine returns details of the language list for the current user account:\r\n\r\n```none\r\n> Get-WinUserLanguageList -Verbose\r\n\r\nLanguageTag     : en-IE\r\nAutonym         : English (Ireland)\r\nEnglishName     : English\r\nLocalizedName   : English (Ireland)\r\nScriptName      : Latin\r\nInputMethodTips : {1809:00000809, 1809:00001809}\r\nSpellchecking   : True\r\nHandwriting     : False\r\n```\r\n\r\n## Actual behaviour\r\n\r\n```none\r\n> Get-WinUserLanguageList -Debug\r\nGet-WinUserLanguageList: Cannot marshal 'parameter #2': Invalid managed/unmanaged type combination.\r\n```\r\n\r\n## Environment data\r\n\r\n```none\r\n> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.0-rc.2\r\nPSEdition                      Core\r\nGitCommitId                    7.1.0-rc.2\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n\r\n> Get-Command Get-WinUserLanguageList\r\n\r\nCommandType     Name                                               Version    Source\r\n-----------     ----                                               -------    ------\r\nCmdlet          Get-WinUserLanguageList                            2.0.0.0    International\r\n\r\n\r\n> (Get-Command Get-WinUserLanguageList).Source | Get-Module | Format-List -Property *\r\n\r\nLogPipelineExecutionDetails : False\r\nName                        : International\r\nPath                        : C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\International\\International.psd1\r\nImplementingAssembly        :\r\nDefinition                  :\r\nDescription                 :\r\nGuid                        : 561544e6-3a83-4d24-b140-78ad771eaf10\r\nHelpInfoUri                 : https://go.microsoft.com/fwlink/?linkid=285548\r\nModuleBase                  : C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\International\r\nPrivateData                 :\r\nExperimentalFeatures        : {}\r\nTags                        : {}\r\nProjectUri                  :\r\nIconUri                     :\r\nLicenseUri                  :\r\nReleaseNotes                :\r\nRepositorySourceLocation    :\r\nVersion                     : 2.0.0.0\r\nModuleType                  : Manifest\r\nAuthor                      : Microsoft Corporation\r\nAccessMode                  : ReadWrite\r\nClrVersion                  : 4.0\r\nCompanyName                 : Microsoft Corporation\r\nCopyright                   : \u00a9 Microsoft Corporation. All rights reserved.\r\nDotNetFrameworkVersion      :\r\nExportedFunctions           : {}\r\nPrefix                      :\r\nExportedCmdlets             : {[Get-WinAcceptLanguageFromLanguageListOptOut, Get-WinAcceptLanguageFromLanguageListOptOut], [Get-WinCultureFromLanguageListOptOut, Get-WinCultureFromLanguageListOptOut],\r\n                              [Get-WinDefaultInputMethodOverride, Get-WinDefaultInputMethodOverride], [Get-WinHomeLocation, Get-WinHomeLocation]\u2026}\r\nExportedCommands            : {[Get-WinAcceptLanguageFromLanguageListOptOut, Get-WinAcceptLanguageFromLanguageListOptOut], [Get-WinCultureFromLanguageListOptOut, Get-WinCultureFromLanguageListOptOut],\r\n                              [Get-WinDefaultInputMethodOverride, Get-WinDefaultInputMethodOverride], [Get-WinHomeLocation, Get-WinHomeLocation]\u2026}\r\nFileList                    : {}\r\nCompatiblePSEditions        : {Core, Desktop}\r\nModuleList                  : {}\r\nNestedModules               : {Microsoft.InternationalSettings.Commands}\r\nPowerShellHostName          :\r\nPowerShellHostVersion       :\r\nPowerShellVersion           : 5.1\r\nProcessorArchitecture       : None\r\nScripts                     : {}\r\nRequiredAssemblies          : {}\r\nRequiredModules             : {}\r\nRootModule                  :\r\nExportedVariables           : {}\r\nExportedAliases             : {}\r\nExportedDscResources        : {}\r\nSessionState                : System.Management.Automation.SessionState\r\nOnRemove                    :\r\nExportedFormatFiles         : {}\r\nExportedTypeFiles           : {}\r\n\r\n```",
  "closed_at": "2020-11-17T16:00:06Z",
  "comments": [
    {
      "author": "kvprasoon",
      "author_association": "CONTRIBUTOR",
      "body": "You can import Windows PowerShell module in `WindowsPowerShell` mode which is available as a parameter for `Import-Module` cmdlet.\r\n\r\n```\r\nImport-Module -Name International -UseWindowsPowerShell -Verbose\r\n```",
      "created_at": "2020-11-16T09:47:36Z",
      "updated_at": "2020-11-16T09:47:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@anthony-geoghegan The module is not in the repository. We could use Windows Feedback tool to report the issue.\r\n\r\n/cc @anmenaga for information.",
      "created_at": "2020-11-16T10:39:37Z",
      "updated_at": "2020-11-16T10:39:37Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "WHY doesn't PowerShell 7.1 recognise this module as not working natively?  While I get that the team behind the module hasn't bothered to port to 7.x, shouldn't PowerShell force this module to use the compatibility solution.\r\n\r\nIt feels like compatibility is not a top issue going forward.",
      "created_at": "2020-11-16T10:55:15Z",
      "updated_at": "2020-11-16T10:55:15Z"
    },
    {
      "author": "Samuli3682",
      "author_association": "NONE",
      "body": "I really don't understand....sorry...i just would like to get twrp to my mate 10 pro (bla-l29). I don't know how this TomTom get here",
      "created_at": "2020-11-16T11:43:15Z",
      "updated_at": "2020-11-16T11:43:15Z"
    },
    {
      "author": "anthony-geoghegan",
      "author_association": "NONE",
      "body": "Thanks, @kvprasoon I wasn't aware of the `-UseWindowsPowerShell` option or [Windows PowerShell Compatibility](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_windows_powershell_compatibility?view=powershell-7.1)\r\n\r\n@iSazonov I\u2019ve used the Feedback Hub (that comes with Windows 10) to report this problem, under the *Input and Language* category, including a link to this GitHub issue.",
      "created_at": "2020-11-16T14:52:16Z",
      "updated_at": "2020-11-16T14:52:16Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as external and has not had any activity for **1 day**. It has been be closed for housekeeping purposes.",
      "created_at": "2020-11-17T16:00:04Z",
      "updated_at": "2020-11-17T16:00:04Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "> WHY doesn't PowerShell 7.1 recognise this module as not working natively? While I get that the team behind the module hasn't bothered to port to 7.x, shouldn't PowerShell force this module to use the compatibility solution.\r\n\r\nPowerShell 7.1 has no way of knowing that the error is because of incompatibility. It very well may be a valid error coming out of business logic of cmdlet/module that is (mistakenly) marked as compatible with `Core`.\r\nModule owners should fix compatibility declaration on the module.",
      "created_at": "2020-11-25T00:35:55Z",
      "updated_at": "2020-11-25T00:35:55Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "Maybe I was unclear. The cmdlet in question is in the International module, which is in System32. As such, I would have expected this to be loaded into PSWInCompat session like so many other modules.  If you manually import the module using ```-UseWindowsPowerShell```, the cmdlet works fine, via the implicit remoting.  In this case, Pwsh 7.1 is seeing this as Core compatible so loads it natively where it, of course, does not work and gives the observed error message. \r\n\r\nI do not know why Pwsh 7.1 is not recognizing this as a module that needs to be loaded using the compatibility solution.  ",
      "created_at": "2020-11-25T17:04:16Z",
      "updated_at": "2020-11-25T17:04:16Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "Pwsh 7 is seeing this as Core compatible (i.e. it is Not using compatibility solution to load it) because the module is **incorrectly** declares itself as Core-compatible.\r\nIt has `CompatiblePSEditions=@(\"Core\",\"Desktop\")` in `psd1` file. It is wrong. It should be `CompatiblePSEditions=@(\"Desktop\")` if the module is known to be Not working in PS Core.\r\nPlease note `Unless the module manifest indicates that module is compatible with PowerShell Core...` in this quote from [About Windows PowerShell compatibility](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_windows_powershell_compatibility?view=powershell-7.1):\r\n```\r\nLONG DESCRIPTION\r\nUnless the module manifest indicates that module is compatible with PowerShell Core,\r\nmodules in the %windir%\\system32\\WindowsPowerShell\\v1.0\\Modules folder\r\nare loaded in a background Windows PowerShell 5.1 process\r\nby Windows PowerShell Compatibility feature.\r\n```\r\n\r\nSo at high level the process is:\r\nWhen `-UseWindowsPowerShell` parameter is used - user's intent is perfectly clear, so compatibility solution is used immediately to load the module (regardless of what module manifest says about module compatibility).\r\nWhen `-UseWindowsPowerShell` parameter is Not specified, PS will first check module manifest. If it finds `Core` value in `CompatiblePSEditions` then PS will load the module directly, if the value is not there - it will use compatibility solution to load it.\r\n",
      "created_at": "2020-11-26T02:12:16Z",
      "updated_at": "2020-11-26T02:12:16Z"
    },
    {
      "author": "fgimian",
      "author_association": "NONE",
      "body": "Still broken on the very latest beta:\r\n\r\n```powershell\r\nPowerShell 7.2.0-preview.8\r\nCopyright (c) Microsoft Corporation.\r\n\r\nhttps://aka.ms/powershell\r\nType 'help' to get help.\r\n\r\nPS C:\\Program Files\\PowerShell\\7-preview> Get-WinUserLanguageList\r\nGet-WinUserLanguageList: Cannot marshal 'parameter #2': Invalid managed/unmanaged type combination.\r\n```\r\n\r\n@iSazonov While this is external, it is affecting PowerShell and has resulted in broken functionality that was working on the 7.0.x releases.  Can we reopen this to track the fix?\r\n\r\nWe're at almost a year since the issue was opened and I suspect it has gone off the radar because it is closed.\r\n\r\nIssues like this really should be considered the highest priority should they not?  Because anyone upgrading to 7.1.x+ will literally have scripts stop working.\r\n\r\nThanks heaps\r\nFotis",
      "created_at": "2021-07-30T23:51:55Z",
      "updated_at": "2021-07-30T23:51:55Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "It works here, both in Preview.8, and the build of the day (from last wed).\r\n\r\n```powershell\r\nPS C:\\Foo> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0-preview.8\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0-preview.8\r\nOS                             Microsoft Windows 10.0.22000\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0, 5.0, 5.1.10032.0, 6.0.0, 6.1.0, 6.2.0, 7.0.0, 7.1.0, 7.2.0-preview\u2026\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\nPS C:\\Foo> Get-WinUserLanguageList\r\n\r\nLanguageTag     : en-GB\r\nAutonym         : English (United Kingdom)\r\nEnglishName     : English\r\nLocalizedName   : English (United Kingdom)\r\nScriptName      : Latin\r\nInputMethodTips : {0809:00000809}\r\nSpellchecking   : True\r\nHandwriting     : False\r\n```",
      "created_at": "2021-07-31T10:35:23Z",
      "updated_at": "2021-07-31T10:38:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> @iSazonov While this is external, it is affecting PowerShell and has resulted in broken functionality that was working on the 7.0.x releases. Can we reopen this to track the fix?\r\n\r\nThe module (International) is not in the repository and we can do nothing here.\r\nThe module is not compatible with PowerShell Core (see International.psd1).\r\nThe module is a component of Windows.\r\n\r\nPlease use Windows feedback tool to report the issue.",
      "created_at": "2021-07-31T12:10:50Z",
      "updated_at": "2021-07-31T12:10:50Z"
    }
  ],
  "created_at": "2020-11-16T02:54:02Z",
  "labels": [
    "Issue-Question",
    "Resolution-External"
  ],
  "number": 14102,
  "state": "closed",
  "title": "Get-WinUserLanguageList cmdlet fails",
  "updated_at": "2021-07-31T12:10:50Z"
}