{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11074",
  "author": "TravisEz13",
  "body": "## Background\r\n\r\nhttps://github.com/PowerShell/PowerShell/issues/10983\r\n\r\nAppLocker doesn't have an API to see if it is on or not, so we have to call it every startup which causes significant delays.\r\nIn the cited case, the system was air gapped, and this lead to a 9-14 second delay in my testing.\r\n\r\n## Possibile Mitigations\r\n\r\n1. Add a PowerShell policy that is required to be enable, before PowerShell checks AppLocked\r\n   * We would not back port this to Windows PowerShell to avoid breaking that large user-base.\r\n   * I propose that this would only happen in vNext and not be back-ported to any PowerShell Core version either.\r\n   * Add telemetry to see how many people are using this\r\n   * Pros\r\n     * This would solve the lack of API in AppLocker to see if AppLocker in enabled.\r\n        Only, system that explicitly say they want PowerShell to use AppLocker would see any significant delay.\r\n     * We can measure the problem this way with telemetry\r\n   * Cons\r\n     * This would be a breaking change and AppLocker user would have to know they need to do this.\r\n2. Add a message when we see more that a 10 second delay in the API, that points to a document, for troubleshooting.\r\n   * Pros:\r\n     * This would not be a breaking change\r\n   * Cons:\r\n     * This does not improve the actual performance, only tells users how to improve performance in the **worst** case.\r\n     * Because the problem occurs in air gapped system, this solution does not help provide telemetry\r\n3. Remove AppLocker support\r\n   * AppLocker is a Defense in Depth feature which has numerous bypasses and users should move to WDAC.\r\n   * Pros:\r\n     * Completely solves the problem\r\n     * Simplifies the code base\r\n   * Cons\r\n     * This would be a **big** breaking and change and AppLocker users would need to learn to use WDAC.  \r\n\r\n## Poll\r\nPlease vote for the solution that you think works the best\r\n[![](https://api.gh-polls.com/poll/01DSRHK80E3RPYH722N7V09GP9/Add%20a%20PowerShell%20policy%20that%20is%20required%20to%20be%20enable...)](https://api.gh-polls.com/poll/01DSRHK80E3RPYH722N7V09GP9/Add%20a%20PowerShell%20policy%20that%20is%20required%20to%20be%20enable.../vote)\r\n[![](https://api.gh-polls.com/poll/01DSRHK80E3RPYH722N7V09GP9/Add%20a%20message%20when%20we%20see%20more%20that%20a%2010%20second%20delay...)](https://api.gh-polls.com/poll/01DSRHK80E3RPYH722N7V09GP9/Add%20a%20message%20when%20we%20see%20more%20that%20a%2010%20second%20delay.../vote)\r\n[![](https://api.gh-polls.com/poll/01DSRHK80E3RPYH722N7V09GP9/Remove%20AppLocker%20Support)](https://api.gh-polls.com/poll/01DSRHK80E3RPYH722N7V09GP9/Remove%20AppLocker%20Support/vote)\r\n\r\n## Other solutions\r\n\r\n1. Checking for internet connectivity and disable AppLocker\r\n   * This is basically the what the Windows Certificate verification code is doing and we would be duplicating their code.\r\n   * That is a very complex solution. We don't know what host they will want to connect to and there could be a firewall with access rules that allow Microsoft hosts, but not the host where your CRL is hosted.\r\n   * This could introduce a **very** easy security bypass if we cache the result\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "We should probably do the first and second mitigations where the message in the second one points to a aka.ms link describing what is happening and shows how to enable the first",
      "created_at": "2019-11-14T23:51:00Z",
      "updated_at": "2019-11-14T23:51:00Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT If the first was enabled, the message for 2 would never show up.",
      "created_at": "2019-11-14T23:53:23Z",
      "updated_at": "2019-11-14T23:53:23Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@TravisEz13 yes, I was thinking it was opt-out, not opt-in",
      "created_at": "2019-11-15T01:06:10Z",
      "updated_at": "2019-11-15T01:06:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> AppLocker doesn't have an API to see if it is on or not, so we have to call it every startup which causes significant delays.\r\n\r\nIf AppLocaker is turned off no delay is in the call and so we have no need in the API to see if AppLocker on or off.\r\n\r\n> In the cited case, the system was air gapped, and this lead to a 9-14 second delay in my testing.\r\n\r\nIn the referenced case the environment was broken and as result AppLocker is delayed. In broken environment any service may not work properly including WDAC. Also there are many alternative AV in world.\r\n\r\n> Remove AppLocker support\r\n\r\nWe actively use AppLocker in our environment. It very helps us. \r\nRemoving AppLocker support violates a principle that PowerShell is secure OOB.\r\nWe can not disable PowerShell at whole but we can control what scripts to enable to run and it is great feature.\r\n\r\n> Add a message \r\n\r\nBefore 7.0 GA I suggest:\r\n1. Add a telemetry to see how common is the problem.\r\n2. Add log or trace message to make it easier for users to find the problem\r\n3. Fix #10309 - double (!) check with using the same GetSaferPolicy() \r\n\r\nAlso we could add special trust for PSReadline dll to address startup scenario.\r\n ",
      "created_at": "2019-11-15T07:26:04Z",
      "updated_at": "2019-11-15T07:26:04Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "> If AppLocaker is turned off no delay is in the call and so we have no need in the API to see if AppLocker on or off.\r\n\r\nThis is not true, I have verified",
      "created_at": "2019-11-15T18:51:04Z",
      "updated_at": "2019-11-15T18:51:14Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": ">  In the referenced case the environment was broken and as result AppLocker is delayed. In broken environment any service may not work properly including WDAC. Also there are many alternative AV in world.\r\n\r\nHow was the reference environment broken?\r\n",
      "created_at": "2019-11-15T18:51:58Z",
      "updated_at": "2019-11-15T18:52:28Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "> Removing AppLocker support violates a principle that PowerShell is secure OOB.\r\n\r\nAppLocker is a defense in depth feature with known bypassed that require WDAC to mitigate.",
      "created_at": "2019-11-15T18:53:18Z",
      "updated_at": "2019-11-15T18:53:18Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "> Add a telemetry to see how common is the problem.\r\n\r\nTelemetry would not work, because the problem occurs in an air gapped system.\r\n\r\nUpdated: Updated pros and cons",
      "created_at": "2019-11-15T18:53:58Z",
      "updated_at": "2019-11-15T18:57:25Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "> Add log or trace message to make it easier for users to find the problem\r\n\r\nThis is essentially the same as proposed solution 2",
      "created_at": "2019-11-15T18:54:55Z",
      "updated_at": "2019-11-15T18:55:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> How was the reference environment broken?\r\n\r\nFrom the issue:\r\n> when I disable recursion support on the DNS server, only the first name is queried (ctldl.windowsupdate.com), then, when the DNS server refuses to resolve it, pwsh immediately displays a working cursor/prompt, no delay. When recursion support is enabled on the DNS server again, ctldl.windowsupdate.com is queried repeatedly until lookup failure, and then pwsh displays a working cursor/prompt.\r\n\r\nBad DNS config can kill any service. DNS timeout is 2-3 seconds per request and 3 attempts = 6-9 seconds delay.\r\n\r\n> This is not true, I have verified\r\n\r\nI saw AppLocker delays in my environment and removing rules or disabling AppLocker removes the delays. Notice,after GPO update it is necessary to wait (or reboot) 5-20 minutes while AppLocker update its cache.\r\n\r\n> Telemetry would not work, because the problem occurs in an air gapped system.\r\n\r\nThis is a special case in the original issue. We don\u2019t even know all the options when a problem may arise and telemetry will show the scale of the disaster.\r\n",
      "created_at": "2019-11-15T19:50:42Z",
      "updated_at": "2019-11-15T19:51:11Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "> reference environment broken DNS\r\n\r\nI would not call a delay when it cannot find a record broken, but just slow.\r\n\r\n> I saw AppLocker delays in my environment and removing rules or disabling AppLocker removes the delays. Notice,after GPO update it is necessary to wait (or reboot) 5-20 minutes while AppLocker update its cache.\r\n\r\nThe system I repro'ed on never had any AppLocker rules enabled\r\n\r\n> This is a special case in the original issue. We don\u2019t even know all the options when a problem may arise and telemetry will show the scale of the disaster.\r\n\r\nSince **all** cases reported to the PowerShell team have been in air gapped systems.  This is flatly false",
      "created_at": "2019-11-15T20:05:56Z",
      "updated_at": "2019-11-15T20:05:56Z"
    },
    {
      "author": "dragonwolf83",
      "author_association": "NONE",
      "body": "Is there a quick way to check that the internet is not connected at startup? That would be ideal for disabling telemetry, updater checks, and AppLocker since they can't function without internet anyway.",
      "created_at": "2019-11-15T21:03:29Z",
      "updated_at": "2019-11-15T21:03:29Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "> Is there a quick way to check that the internet is not connected at startup? That would be ideal for disabling telemetry, updater checks, and AppLocker since they can't function without internet anyway.\r\n\r\nThat is a very complex solution.  We don't know what host they will want to connect to and there could be a firewall with access rules that allow Microsoft hosts, but not the host where your CRL is hosted.\r\n\r\nI added an other solutions section with additional reasons why this is not a viable solution.",
      "created_at": "2019-11-15T22:04:29Z",
      "updated_at": "2019-11-15T22:10:42Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> The system I repro'ed on never had any AppLocker rules enabled\r\n\r\nIf no rules what does AppLocker? Trying load CRL? This looks like bug.",
      "created_at": "2019-11-16T10:32:46Z",
      "updated_at": "2019-11-16T10:32:46Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "> If no rules what does AppLocker? Trying load CRL? This looks like bug.\r\n\r\nEven if this is a bug, there is no intent to service AppLocker, see\r\nhttps://www.microsoft.com/en-us/msrc/windows-security-servicing-criteria\r\n\r\nAlthough, I have already reported this issue to the AppLocker team (we have in previous years as well.)  I'll update this issue if we get another answer from AppLocker this time. \r\n\r\nThe advice from AppLocker is to apply the policy in https://github.com/PowerShell/PowerShell/issues/10983.\r\n\r\n<blockquote><img src=\"https://c.s-microsoft.com/favicon.ico?v2\" width=\"48\" align=\"right\"><div><strong><a href=\"https://www.microsoft.com/en-us/msrc/windows-security-servicing-criteria\">Microsoft Security Servicing Criteria for Windows</a></strong></div></blockquote>",
      "created_at": "2019-11-16T21:15:11Z",
      "updated_at": "2019-11-16T21:16:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "From @bergmeister and @Jaykul https://twitter.com/CBergmeister/status/1197430391264571392\r\n\r\nI measured psdbatools module loading and AppLocker (SaferIdentifyLevel) is again on top - ~22%.\r\n![image](https://user-images.githubusercontent.com/22290914/69802409-547a8300-11fb-11ea-908a-c8f85f258bf8.png)\r\n\n\n<blockquote><img src=\"https://pbs.twimg.com/profile_images/1110452694341304320/pkfeWkyU_400x400.jpg\" width=\"48\" align=\"right\"><div>Twitter</div><div><strong><a href=\"https://twitter.com/CBergmeister/status/1197430391264571392\">Chris Bergmeister on Twitter</a></strong></div><div>\u201c@Steve_MSFT @Jaykul @psdbatools Has it ever been discussed if 'compiling' (parsing and generating IL) a PowerShell script to say a psx1 file that only PowerShell would understand @Steve_MSFT is possible? I imagine this would drastically improve PowerShell's performance and CPU usage in general\u201d</div></blockquote>",
      "created_at": "2019-11-28T11:27:04Z",
      "updated_at": "2019-12-02T19:42:13Z"
    },
    {
      "author": "JasonFossen",
      "author_association": "NONE",
      "body": "So we're just a few days from GA now and the 9-second startup delay remains in the latest release candidate.  Is it accurate to summarize the situation like this?  \r\n\r\n\"The AppLocker people don't intend to update AppLocker anymore, we're not willing to refactor this part of PowerShell Core to be like Windows PowerShell (which doesn't suffer this problem), but we want you to switch to PowerShell 7 anyway despite the 9-second startup delay.  If this is not acceptable, please make a system-wide change to how Windows checks CRLs, or disable recursion on your DNS servers, or don't use air gaps for security, testing or training purposes when you also need to run PowerShell.\"\r\n\r\nIs this an accurate summary?",
      "created_at": "2020-02-08T12:55:09Z",
      "updated_at": "2020-02-08T12:55:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@JasonFossen Your comment add nothing new. You could share your experience with AppLocker, maybe business cases as requested in the issue.",
      "created_at": "2020-02-08T17:14:12Z",
      "updated_at": "2020-02-08T17:14:12Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "> Is this an accurate summary?\r\n\r\n@JasonFossen As @iSazonov said, this is a topic that has been asked and answered in this thread.  You can see a public statement that AppLocker has no intent to service from \r\nhttps://www.microsoft.com/en-us/msrc/windows-security-servicing-criteria  which was mention in a previous comment (https://github.com/PowerShell/PowerShell/issues/11074#issuecomment-554675026)\r\n\r\nHere is a screenshot:\r\n![image](https://user-images.githubusercontent.com/10873629/74193166-bdbf3f00-4c0b-11ea-8443-3705f54f6e8d.png)\r\n\r\n\r\n<blockquote><img src=\"https://c.s-microsoft.com/favicon.ico?v2\" width=\"48\" align=\"right\"><div><strong><a href=\"https://www.microsoft.com/en-us/msrc/windows-security-servicing-criteria\">Microsoft Security Servicing Criteria for Windows</a></strong></div></blockquote>",
      "created_at": "2020-02-10T21:50:11Z",
      "updated_at": "2020-02-10T21:50:51Z"
    }
  ],
  "created_at": "2019-11-14T19:36:02Z",
  "labels": [
    "WG-Engine-Performance"
  ],
  "number": 11074,
  "state": "open",
  "title": "Discussion: AppLocker Startup Performance Impact Mitigations",
  "updated_at": "2020-08-20T18:45:48Z"
}