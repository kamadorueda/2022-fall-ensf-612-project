{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9086",
  "author": "cawoodm",
  "body": "# Make Working with Objects Easier\r\nObjects are at the heart of PowerShell and yet there is little or no native support for object literals and no elegant/terse way to add a property or query if an object has a property.\r\n\r\n# Situation Today\r\n```powershell\r\n# Make a new object\r\n$o = New-Object PSObject               # Ugly\r\n# Check a non-existant property\r\n$o.other                               # Will crash in Strict Mode\r\n# Add a property\r\n$o | Add-Member \"foo\" \"bar\"            # Ugly\r\n```\r\n\r\n# Desired Situation\r\n```powershell\r\n# Make a new object\r\n$o = {\r\n  foo: bar\r\n};\r\n# Check a non-existant property\r\n$o.other                            # won't crash, just returns null\r\n$o.other -eq $null                  # true\r\n# Add a property\r\n$o.something = \"new\"                # won't crash, adds member\r\n```\r\n\r\n# Workarounds Today\r\nGenerally we work with custom functions to do the lifting like checking if an object has a property:\r\n```powershell\r\nfunction HasProp($object, $property, $default) {\r\n    if ($object.PSObject.Properties.Item($property)) {\r\n        return $object.\"$property\"\r\n    } else {\r\n        return $default\r\n    }\r\n}\r\n```\r\n\r\nIf PowerShell is to become widely used it needs to up it's game in this regard. Native JSON support is one of the winning factors of JavaScript IMHO.",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Most of these already exist, actually.\r\n\r\n```powerhsell\r\n# Make new object\r\n$Object = [PSCustomObject]@{\r\n    Foo = \"Bar\"\r\n}\r\n\r\n$Object.NonexistentProperty # returns $null\r\n$Object.NonexistentProperty -eq $null # -> true\r\n```\r\n\r\nThe only thing \"missing\" is adding nonexistent properties. But in a lot of cases, that would be detrimental if it was too easy. You _can_ do it with `Add-Member`, and you can also do it with `$Object.PSObject.Properties.Add()`\r\n\r\nHowever, in a lot of cases if you want to play fast and loose with object \"properties\" like that you more often need a _hashtable_ or other dictionary type:\r\n\r\n```powershell\r\n# Create hashtable\r\n$Table = @{ Foo = \"Bar\" }\r\n$Table.What # -> $null\r\n\r\n$Table.What = 12\r\n$Table.What # -> 12\r\n\r\n# Remove key\r\n$Table.Remove(\"What\")\r\n```\r\n\r\nObjects in most languages are _very_ much a fixed item, with properties you can't change after compilation, and PS largely follows this object model. If you want a more mutable collection of named values, a dictionary or hashtable is generally much more effective, fast, and appropriate to the purpose. \ud83d\ude42 \r\n\r\nN.B.: You'll notice creating a custom object is very similar to creating a hashtable -- it _is_ very similar, just transmuting the hashtable to a \"property bag\" to improve display formatting and ease of handling with cmdlets.\r\n\r\nFor a more in-depth dive into these features of PS, and a lot of others that might be of interest to you, I'd recommend checking out [PSKoans](https://aka.ms/pskoans).\r\n\r\n---\r\n\r\nThere is one caveat here also, which is that accessing nonexistent properties is _disabled by design_ when working in Strict Mode.",
      "created_at": "2019-03-08T13:30:23Z",
      "updated_at": "2019-03-08T13:33:55Z"
    },
    {
      "author": "cawoodm",
      "author_association": "NONE",
      "body": "Thanks for your feedback - I learned a thing or two and I do use HashTables extensively but we're still not terse/elegant enough with Objects proper.\r\n\r\nLook at how easy it is to create a HashTable in PowerShell - why can't the ubiquitous PSObject be as easy? Just using colons `:` instead of `=` would delineate that this is a PSObject.\r\n\r\nAs you know, in Strict mode `$obj.NonExistantProperty` is not null but throws an error. Should people therefore avoid Strict mode so they can easily query an object's property existence?\r\n\r\nIf you work with JavaScript much you'll see the beauty of \"fast and loose\" with properties. As an example: it's common for a function to take an object as a parameter (instead of lots of parameters). This makes the function extensible later without changing it's signature. However, as the developer you have no control over how that object is passed and if users know all the parameters. With JS you can easily default the parameters sensibly as follows:\r\n\r\n```JavaScript\r\nfunction DoSomething(opt) {\r\n   opt.p1 = opt.p1 || \"Hello\";\r\n   opt.p2 = opt.p1 || \"world\";\r\n  return opt.p1 + ' ' + opt.p2;\r\n}\r\nDoSomething({p1: \"Hello\"}); // \"Hello world\"\r\n```\r\nSo if someone using your function doesn't pass in an object with p1 or p2 it won't crash but will use sensible defaults - a robust function.\r\n\r\nIn PowerShell Strict today:\r\n```PowerShell\r\nfunction DoSomething($opt) {\r\n  if ($opt.PSObject.Properties.Item(\"p1\") -eq $null) {$opt | Add-Member \"p1\" \"Hello\"\r\n  if ($opt.PSObject.Properties.Item(\"p2\") -eq $null) {$opt | Add-Member \"p1\" \"world\"\r\n  return $opt.p1 + ' ' + $opt.p2;\r\n}\r\n$opt = New-Object PSObject\r\nDoSomething $opt\r\n```\r\n\r\nWe can do better.",
      "created_at": "2019-03-09T15:32:44Z",
      "updated_at": "2019-03-09T15:33:15Z"
    },
    {
      "author": "HumanEquivalentUnit",
      "author_association": "CONTRIBUTOR",
      "body": "@cawoodm you can have default parameter values in PowerShell, e.g. your code becomes:\r\n\r\n```powershell\r\nfunction DoSomething {\r\n  Param(\r\n    $P1=\"Hello\",\r\n    $P2=\"World\"\r\n  )\r\n  \r\n  $P1 + ' ' + $P2\r\n}\r\n```\r\n\r\nThen you can call it with P1, P2, both, or neither. If you call it with one, then it takes the value you passed in, otherwise it uses the default value from the Param() block.\r\n\r\n\r\n```powershell\r\nPS> DoSomething\r\nHello World\r\nPS> DoSomething -P2 \"Everyone\"\r\nHello Everyone\r\n```\r\n\r\nAnd if you have a hashtable, you can splat it into the function and its keys match to the parameter names:\r\n\r\n```powershell\r\nPS> $someHashtable = @{ P1 = 'Greetings' }\r\nPS> DoSomething @someHashtable\r\nGreetings World\r\n```\r\n\r\nif the hashtable has a key `P1` that will be used for the parameter `P1` and if it doesn't have that, then the default value from the param() block will be used instead. So you can auto-generate code which calls functions, without having to write a long `DoSomething -P1 foo -P2 blah` string anywhere, and treat it a bit as-if it took one object.\r\n\r\n> This makes the function extensible later without changing it's signature. However, as the developer you have no control over how that object is passed and if users know all the parameters. With JS you can easily default the parameters sensibly as follows:\r\n\r\nIn PS you can change the function signature to have a `P3` without breaking previous callers, everything from before still works, and new code which wants to use `P3` also works.\r\n\r\nYou can check whether something was passed as a parameter (vs using a default value) by checking `if ($PSBoundParameters.ContainsKey('P3')) {..}`, or you can use ParameterSets so that passing `P1, P2` does the original thing, and passing `P1, P2, P3` changes the way all of them behave (some design and care needed - it's not magic, but it is flexible).\r\n\r\nIf you go with the approach of using one object as the entire parameter interface, it would break Powershell's autocompletion of parameters on the shell prompt - no hints what parameters are available, no tab completion of them, no auto-completion of values for them, no implicit type-casting (e.g. int to string) for them, no autogenerated help, it would make pipeline input difficult because there's only one parameter - you couldn't feed some data in through the pipeline and specify other parameters on the command line very easily, e.g. write this code and in ISE autocompletion you get these options:\r\n\r\nThe available parameters are shown, and their types:\r\n\r\n![image](https://user-images.githubusercontent.com/187787/54395128-cd09d580-46a6-11e9-9152-d2c9b23d5a34.png)\r\n\r\nThe acceptable values for P2 are picked out of the code, and offered to the user:\r\n\r\n![image](https://user-images.githubusercontent.com/187787/54395147-dbf08800-46a6-11e9-86e1-c172d2baa081.png)\r\n\r\n`help DoSomething` shows autogenerated text in the same way:\r\n\r\n```powershell\r\nPS C:\\> help DoSomething\r\n\r\nNAME\r\n    DoSomething\r\n    \r\nSYNTAX\r\n    DoSomething [[-P1] <string>] [[-P2] {Everyone | World | People}]  \r\n```\r\n\r\nIf you hide the parameters in one opaque blobject, you lose all that introspection and programmer-shell-user-help.\r\n\r\nI think that doesn't address \"ease of adding things to an object\", but it does seem to cover the use cases you have for doing so, and that PS approaches some of these things in a different way because of its nature as an interactive shell as well as a programming language.\r\n\r\nYou can put almost anything into a Hashtable, even scriptblocks, but once you make a PSObject everything gets kind of fixed in place. It feels like you're saying \"I don't want to keep everything in flexible Hashtables, I want to fix them into PSObject .. but objects are too fixed, why can't they be more flexible like hashtables?\".\r\n\r\nAnd if that's still not convincing enough,  you can drop the check and change:\r\n\r\n```powershell\r\nif ($opt.PSObject.Properties.Item(\"p1\") -eq $null) {$opt | Add-Member \"p1\" \"Hello\" }\r\n#to\r\n$opt | Add-Member \"p1\" \"Hello\" -ErrorAction SilentlyContinue\r\n#or\r\n$opt | Add-Member \"p1\" \"Hello\" -EA 0\r\n```\r\n",
      "created_at": "2019-03-14T22:37:58Z",
      "updated_at": "2019-03-14T22:39:17Z"
    },
    {
      "author": "cawoodm",
      "author_association": "NONE",
      "body": "Everything you say is valid but at the end of the day I stare at this and wish I was coding JS:\r\n![image](https://user-images.githubusercontent.com/498834/54478696-68b95400-4815-11e9-9729-41662a7758bf.png)\r\n\r\nPowerShell:\r\n```PowerShell\r\n\"description\" = (&{if ($_.PSObject.Properties.Item(\"description\") -and $_.description.length) {$_.description[0].text} else {\"\"}})\r\n```\r\n\r\nJavaScript:\r\n```JavaScript\r\ndescription: $_.description && $_.description.length ? $_.description[0].text : \"\"\r\n```",
      "created_at": "2019-03-16T17:03:37Z",
      "updated_at": "2019-03-16T17:03:37Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "There's no need for the double wrapper there. A bare if statement is valid in a key/value declaration:\r\n\r\n```\r\n$hash = @{\r\n    Description = if ($condition) { $expression } else { $other }\r\n}\r\n```",
      "created_at": "2019-03-16T17:40:33Z",
      "updated_at": "2019-03-16T17:40:42Z"
    },
    {
      "author": "HumanEquivalentUnit",
      "author_association": "CONTRIBUTOR",
      "body": "Javascript:\r\n\r\n```javascript\r\ndescription: $_.description && $_.description.length ? $_.description[0].text : \"\"\r\n```\r\n\r\nPowerShell:\r\n\r\n```powershell\r\ndescription = try { $_.description[0].text } catch { \"\" }\r\n```\r\n\r\n(You don't need `\"\"` around the hashtable key names, or semi-colons on the ends)",
      "created_at": "2019-03-16T20:58:18Z",
      "updated_at": "2019-03-16T20:58:55Z"
    },
    {
      "author": "cawoodm",
      "author_association": "NONE",
      "body": "> ```powershell\r\n> description = try { $_.description[0].text } catch { \"\" }\r\n> ```\r\nI do this in fact - I assume it's muuuch slower than  `?:` (at scale) because exception objects have to be generated instead of a `jne`.",
      "created_at": "2019-03-20T12:25:05Z",
      "updated_at": "2019-03-20T12:25:05Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, I'd be inclined to avoid `try/catch` for this when possible. \r\n\r\nThere are some open issues suggesting null-coalescing operators and similar, which are basically up for grabs for anyone wanting to try to implement them.",
      "created_at": "2019-03-20T12:33:58Z",
      "updated_at": "2019-03-20T12:33:58Z"
    },
    {
      "author": "HumanEquivalentUnit",
      "author_association": "CONTRIBUTOR",
      "body": "> I do this in fact - I assume it's muuuch slower than ?: (at scale) because exception objects have to be generated instead of a jne.\r\n\r\nI imagine it will be. If you are optimizing for speed, your use of `+=` to add your new object to an array is a particularly slow operation, especially if it's inside a loop. Try an approach like:\r\n\r\n```\r\n$list = foreach ($u in $users) {\r\n    [pscustomobject]@{\r\n    ..\r\n    }\r\n}\r\n```\r\n\r\nor\r\n\r\n```\r\n$List = [System.Collections.Generic.List[pscustomobject]]::new()\r\n\r\n$thing = [pscustomobject]@{...}\r\n$List.Add($thing)\r\n```\r\n\r\nto work around that and get a lot of speedup. Much of this kind of thing is PowerShell being aimed at being a convenient admin scripting language, rather than a fast programming language, although it tries to balance both, but if you want speed in PS, you often have to write more code to get it.\r\n\r\nIt's frustrating me that I can't find a cleaner member-test than you have, which is also error-free in strictmode, except:\r\n\r\n```\r\ndescription = if ($_ | get-member -name description) { $_.description[0].Text }\r\n# or\r\ndescription = if (get-member -InputObject $_ -name description) { $_.description[0].Text }\r\n```\r\n\r\nbut if you don't want the overhead of exception handling, you won't want the overhead of a pipeline and cmdlet invocation either.\r\n\r\n> Generally we work with custom functions to do the lifting like checking if an object has a property:\r\n> function HasProp($object, $property, $default) {\r\n\r\nBut this code *is* basically the same overhead as the Get-Member; if performance is your concern, you might reconsider using `hasprop` as well. Because of all the parameter binding stuff described in my previous comment up there ^, [calling functions has a high overhead in PowerShell](https://github.com/PowerShell/PowerShell/issues/8482).\r\n\r\nWhich is normally fine, because PS is a convenience shell scripting language, before it's a performance language, but if performance is a concern with the exception handling, a back of the envelope test shows me that I can call `hasprop` 1000 times in 200ms, or try{}catch{} 1000 times with no exceptions in 5 ms. It rises to 250ms for 1000 exceptions, so if `description` is present more than 50% of the time, try/catch is probably faster.\r\n\r\nIf PS had `?.` as an operator, as requested in issue #3240, that's likely the way forward.. but it's bothering me that the original thing you requested `$x.thing` to just return $null is exactly what PowerShell does, but then you ask PowerShell to enable strict mode, and are then unhappy that strictness need more code - when what you want to do is to casually ignore the $null and not be strict about it. Is it that you want all the checks StrictMode does - except this one? Or you don't want to code for StrictMode but still want your code to work in StrictMode so that it will work if someone else enables it? Or that you want StrictMode code to be shorter? (Which is a fine request, but it does make me wonder *why* StrictMode enforces this).",
      "created_at": "2019-03-21T08:06:01Z",
      "updated_at": "2019-03-21T08:24:07Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> Look at how easy it is to create a HashTable in PowerShell - why can't the ubiquitous PSObject be as easy?\r\n\r\nI personally agree that `[pscustomobject] @{ ... }` is a lot of ceremony, but I don't know what the right alternative would be; substituting `:` for `=` seems a little obscure; a different sigil (in lieu of `@`) might be better, but introducing an entirely new char. would be very problematic; something _starting_ with `@` that currently is a syntax error may be an option; \r\nnote that something like `@@` is being considered in the [RFC about generalized (variable-free) splatting](https://github.com/PowerShell/PowerShell-RFC/blob/master/2-Draft-Accepted/RFC0002-Generalized-Splatting.md)\r\n\r\nRe member test without breaking in strict mode:\r\n\r\nThe best-performing - yet somewhat obscure and verbose - approach at the moment is:\r\n\r\n```powershell\r\nSet-StrictMode -Version Latest\r\n$o = [pscustomobject] @{ one = 1; two = 2; three = 3 }\r\n[bool] $o.psobject.properties['one']  # -> $true\r\n[bool] $o.psobject.properties['nosuch'] # -> $false\r\n```\r\n\r\nNote that there's also `.psobject.methods` and the member type-agnostic `.psobject.members`.\r\n\r\nIf we implemented the aforementioned #3240 as well as #3239 (ternary conditionals):\r\n\r\n```powershell\r\n# Still WISHFUL THINKING:\r\n# This JS code:\r\n#    description: $_.description && $_.description.length ? $_.description[0].text : \"\"\r\n# could be implemented as:\r\n@ {\r\n  description = $_?.description -and $_?.description.Length ? $_.description[0].text : ''\r\n}\r\n```\r\n\r\nWhat #3240 doesn't cover is null-conditional _index_ access - something that C# does _not_ offer, by the way - which would enable safe access to _nonexistent array elements_ in strict mode.\r\n\r\nIf we had a syntax for that - and I'm struggling to come up with the right one - the above could be more concise; \r\n\r\n```powershell\r\n# WISHFUL THINKING, but awkward syntax\r\n  description = $_?.description[0?].text ?? ''\r\n```\r\n\r\nNote that placing `?` _after_ `[...]` (`[...]?`) is not an option, because it introduces ambiguity. E.g., in `$_?.description[0]?.text ?? ''`, does the `?` after `[0]` allow use of index `0` even if there is no such element, or does it ignore an attempt to access non-existent property `text` on the existing `0` element? A similar ambiguity would apply to `?[...]`\r\n\r\n",
      "created_at": "2019-03-21T16:09:34Z",
      "updated_at": "2019-03-21T16:31:00Z"
    },
    {
      "author": "cawoodm",
      "author_association": "NONE",
      "body": "Continuing my \"PowerShell is Cool...but weird\" series - can anyone say if this is a bug, by design or me being stupid:\r\n```powershell\r\n[CmdletBinding()]\r\nparam(\r\n    [string]$P1=$null\r\n)\r\nif ($P1) {Write-Host \"Truthy\"} else {Write-Host \"Falsy\"}\r\nif ($null -eq $P1) {Write-Host \"P1 is NULL\"} else {Write-Host \"P1 is NOT NULL\"}\r\nif (\"\" -eq $P1) {Write-Host \"P1 is an EMPTY STRING\"} else {Write-Host \"P1 is NOT an EMPTY STRING\"}\r\nif ($P1.length -eq 0) {Write-Host \"P1 has no length\"} else {Write-Host \"P1 has length $($P1.length)\"}\r\n```\r\n\r\nResult:\r\n```\r\nFalsy\r\nP1 is NOT NULL\r\nP1 is an EMPTY STRING\r\nP1 has no length\r\n```\r\n\r\nWhy is $P1 not null??",
      "created_at": "2019-05-17T07:07:25Z",
      "updated_at": "2019-05-17T07:07:25Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "You cast to string. I think PS tries to convert that and comes back with an empty string, but I could be wrong.\r\n\r\nEmpty string and null are two different things, but when you apply the type cast PS enforces the conversion and makes sure it's a string value; for null, you get an empty string back, but not null itself.",
      "created_at": "2019-05-17T14:45:00Z",
      "updated_at": "2019-05-17T14:45:11Z"
    },
    {
      "author": "cawoodm",
      "author_association": "NONE",
      "body": "I'm actually not casting, I'm declaring it to be a string. Can a string object not be null? I prefer to work with `$null` for undefined/not set/not known instead of `\"\"`.",
      "created_at": "2019-05-17T16:04:41Z",
      "updated_at": "2019-05-17T16:04:41Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Declaring a parameter to be string is the same in powershell as applying a cast. There's no difference. \r\n\r\nWhatever value you try to set will either be converted to the specified type, or it will throw an error if it can't be converted. PS generally doesn't like to handle truly null strings, it doesn't consider that to be a valid string value, so it converts it.\r\n\r\nIn c#, string properties can be null, but PowerShell has some of its own ideas.",
      "created_at": "2019-05-17T16:09:38Z",
      "updated_at": "2019-05-17T16:10:05Z"
    },
    {
      "author": "cawoodm",
      "author_association": "NONE",
      "body": "Is there a consistent way to query if a parameter has not been supplied? I assumed parameters not passed would always be either `$null` or the default value specified. This seems not to be the case so I have to query `if ($stringParam -ne \"\")` for strings and `if ($intParam ne 0)` for ints etc...",
      "created_at": "2019-05-17T16:14:12Z",
      "updated_at": "2019-05-17T16:14:12Z"
    },
    {
      "author": "cawoodm",
      "author_association": "NONE",
      "body": "Just to get back to my original post: I try to use strict mode wherever possible. For my particular case where I am querying objects (deserialized from JSON) which may or may not have properties I am interested in I have found that simply disabling strict mode for that code section or function gets me what I want.\r\n\r\nIt just seems a pity to mark my whole code block as \"potentially crappy code, don't check it too strictly\" when I really want clean code with just some foreign objects that I want to query without crashing. Hopefully there is no big performance drop switching strict on and off all the time.",
      "created_at": "2019-05-17T16:17:54Z",
      "updated_at": "2019-05-17T16:17:54Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "The best way to go for an unambiguous and guaranteed check for if a parameter has been supplied is `if ($PSBoundParamaters.ContainsKey('ParamName'))` \ud83d\ude42 ",
      "created_at": "2019-05-17T16:25:06Z",
      "updated_at": "2019-05-18T02:36:49Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "For background information on the inability store `$null` in `[string]`-typed variables, see [this Stack Overflow answer](https://stackoverflow.com/a/51354791/45375).",
      "created_at": "2019-05-18T01:25:59Z",
      "updated_at": "2019-05-18T01:25:59Z"
    }
  ],
  "created_at": "2019-03-08T13:05:08Z",
  "number": 9086,
  "state": "open",
  "title": "Improved PS Object and Object Literal Support",
  "updated_at": "2019-05-18T02:36:49Z"
}