{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3137",
  "author": "cgranade",
  "body": "<!--\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](../docs/FAQ.md).\r\n- Refer to the [known issues](../docs/KNOWNISSUES.md).\r\n- Fill out the following repro template\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nCall a method which accepts an argument of either type ``int`` or an enumeration type, passing an integer literal for the argument. For example, in the call ``\"a:b\".Split(\":\", 2)`` below, the ``System.String.Split`` method is overloaded on the type of its second argument, which accepts either ``Int32`` or ``System.StringSplitOptions``.\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nThe integer literal is passed to the method as an integer rather than an enumeration.\r\n\r\nActual behavior\r\n---------------\r\n\r\n```powershell\r\nPS> \"a:b\".Split(\":\", 2)                                             \r\nCannot convert argument \"options\", with value: \"2\", for \"Split\" to type \r\n\"System.StringSplitOptions\": \"Cannot convert value \"2\" to type \r\n\"System.StringSplitOptions\" due to enumeration values that are not valid. \r\nSpecify one of the following enumeration values and try again. The possible \r\nenumeration values are \"None,RemoveEmptyEntries\".\"\r\nAt line:1 char:1\r\n+ \"a:b\".Split(\":\", 2)\r\n+ ~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [], MethodException\r\n    + FullyQualifiedErrorId : MethodArgumentConversionInvalidCastArgument\r\n \r\nPS> \"a:b\".Split(\":\", [int](2))                                      \r\na\r\nb\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nPS> $PSVersionTable                                                 \r\n\r\nName                           Value                                           \r\n----                           -----                                           \r\nPSVersion                      6.0.0-alpha                                     \r\nPSEdition                      Core                                            \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                         \r\nBuildVersion                   3.0.0.0                                         \r\nGitCommitId                    v6.0.0-alpha.15                                 \r\nCLRVersion                                                                     \r\nWSManStackVersion              3.0                                             \r\nPSRemotingProtocolVersion      2.3                                             \r\nSerializationVersion           1.1.0.1                                         \r\n\r\nPS> uname -rmo                                                      \r\n4.8.0-32-generic x86_64 GNU/Linux\r\n```",
  "closed_at": "2017-10-08T09:54:13Z",
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Note that this works properly in full powershell:\r\n    PS[1] (2) > \"a:b\".Split(\":\", 2)\r\n    a\r\n    b",
      "created_at": "2017-02-17T20:57:23Z",
      "updated_at": "2017-02-17T20:57:23Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "It works in Windows PowerShell because there are different overloads.  In `net461`:\r\n\r\n```\r\nstring[] Split(Params char[] separator)\r\nstring[] Split(char[] separator, int count)\r\nstring[] Split(char[] separator, System.StringSplitOptions options)\r\nstring[] Split(char[] separator, int count, System.StringSplitOptions options)\r\nstring[] Split(string[] separator, System.StringSplitOptions options)\r\nstring[] Split(string[] separator, int count, System.StringSplitOptions options)\r\n```\r\n\r\nIn `netcore1.0`\r\n\r\n```\r\nstring[] Split(char separator)\r\nstring[] Split(char separator, System.StringSplitOptions options)\r\nstring[] Split(char separator, int count, System.StringSplitOptions options)\r\nstring[] Split(Params char[] separator)\r\nstring[] Split(char[] separator, int count)\r\nstring[] Split(char[] separator, System.StringSplitOptions options)\r\nstring[] Split(char[] separator, int count, System.StringSplitOptions options)\r\nstring[] Split(string separator)\r\nstring[] Split(string separator, System.StringSplitOptions options)\r\nstring[] Split(string separator, int count, System.StringSplitOptions options)\r\nstring[] Split(string[] separator, System.StringSplitOptions options)\r\nstring[] Split(string[] separator, int count, System.StringSplitOptions options)\r\n```\r\n\r\nIn full, you'd see the same error if you wrote:\r\n\r\n```PowerShell\r\n\"a:b\".Split([string[]]';', 2)\r\n```\r\n\r\nI believe the overload causing trouble is:\r\n\r\n```\r\nstring[] Split(char separator, System.StringSplitOptions options)\r\n```\r\n\r\nWe see the conversion of `[string]` of length 1 to `[char]` as better than a conversion to array, so we pick this overload as it only has two arguments, and we do allow conversions of int to an enum.\r\n\r\nDuring overload resolution, we don't consider values, just the types, So int=>enum is OK, but in the case of the value 2, that is not a valid value for StringSplitOptions, so the conversion fails after picking the overload.\r\n\r\nYou'll notice that:\r\n\r\n```PowerShell\r\n\"a:b\".Split(':', 1)\r\n```\r\n\r\nworks just fine, but produces 2 values, not 1 - because we've converted 1 to `StringSplitOptions.RemoveEmptyEntries`.\r\n\r\nSo after this long winded explanation, I think everything is working as designed. There are some unfortunate effects with such permissive conversions when there are many similar overloads, but permissive conversions are important to PowerShell, so I don't see a way to fix this beyond asking for even more overloads added on `Split`.",
      "created_at": "2017-02-19T23:38:05Z",
      "updated_at": "2017-02-19T23:38:05Z"
    }
  ],
  "created_at": "2017-02-13T11:28:49Z",
  "labels": [
    "WG-Language",
    "Resolution-By Design",
    "Issue-Discussion"
  ],
  "number": 3137,
  "state": "closed",
  "title": "Integer arguments to methods interpreted as enumerations",
  "updated_at": "2017-10-08T09:54:13Z"
}