{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15413",
  "author": "fflaten",
  "body": "After importing a custom format.ps1xml using common custom control inside a view `Get-FormatData` breaks. The viewdefinition itself works, but `Get-FormatData` doesn't like the new viewdefinition.\r\n\r\nThis only affects the scenario when you reference a custom control in the view-body. Using a custom control in GroupBy or included it directly in the view works as expected.\r\n\r\nErrors after importing the custom formatting data.\r\n\r\n**Get all formatdata fails**\r\n![image](https://user-images.githubusercontent.com/3436158/118531250-ec4c9380-b745-11eb-9ef7-ef37557cc9e6.png)\r\n\r\n**... because getting formatdata for custom class fails**\r\n![image](https://user-images.githubusercontent.com/3436158/118531298-f8d0ec00-b745-11eb-891f-e9af05173f7a.png)\r\n\r\n**but getting pre-existing formatting data works**\r\n![image](https://user-images.githubusercontent.com/3436158/118531279-f4a4ce80-b745-11eb-9dd1-7c8e07dbd21f.png)\r\n\r\n## Steps to reproduce\r\n\r\nExecute the three repro-scripts below in separate powershell-sessions.\r\n\r\n<details>\r\n<summary>fails-with-common-control.ps1</summary>\r\n\r\n```powershell\r\nWrite-Host 'Get-FormatData BEFORE = WORKS' -ForegroundColor Green\r\n$before = Get-FormatData\r\n\r\n$tempPath = \"$([System.IO.Path]::GetTempFileName()).ps1xml\"\r\n\r\n# Repro is basically MamlCommandExamples-view + simplified ExamplesControlcontrol from Help.format.ps1xml in PS5.1 (as PS7 formats are built-in now)\r\n@'\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Configuration>\r\n  <ViewDefinitions>\r\n    <View>\r\n      <Name>Demo</Name>\r\n      <ViewSelectedBy>\r\n        <TypeName>DemoClass</TypeName>\r\n      </ViewSelectedBy>\r\n      <CustomControl>\r\n        <CustomEntries>\r\n          <CustomEntry>\r\n            <CustomItem>\r\n              <ExpressionBinding>\r\n                <ScriptBlock>$_</ScriptBlock>\r\n                <CustomControlName>DemoControl</CustomControlName>\r\n              </ExpressionBinding>\r\n            </CustomItem>\r\n          </CustomEntry>\r\n        </CustomEntries>\r\n      </CustomControl>\r\n    </View>\r\n  </ViewDefinitions>\r\n  <Controls>\r\n    <Control>\r\n      <Name>DemoControl</Name>\r\n      <CustomControl>\r\n        <CustomEntries>\r\n          <CustomEntry>\r\n            <CustomItem>\r\n              <Text>Demo time!</Text>\r\n            </CustomItem>\r\n          </CustomEntry>\r\n        </CustomEntries>\r\n      </CustomControl>\r\n    </Control>\r\n  </Controls>\r\n</Configuration>\r\n'@ | Set-Content -Path $tempPath -Verbose\r\nUpdate-FormatData -PrependPath $tempPath -Verbose\r\n\r\nWrite-Host 'Get-FormatData AFTER importing custom format using common control = FAILS' -ForegroundColor Red\r\n$after = Get-FormatData\r\n\r\n# Should throw exception. Get-FormatData is broken.\r\n\r\nWrite-Host 'Testing custom viewdefinition = WORKS (shows \"Demo Time!\")' -ForegroundColor Green\r\n[pscustomobject]@{PSTypeName='DemoClass'; Some='value'}\r\n\r\n# ViewDefinition works as expected. Just Get-FormatData that breaks.\r\n\r\nRemove-Item -Path $tempPath -Verbose\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>works-with-included-control.ps1</summary>\r\n\r\n```powershell\r\nWrite-Host 'Get-FormatData BEFORE = WORKS' -ForegroundColor Green\r\n$before = Get-FormatData\r\n\r\n$tempPath = \"$([System.IO.Path]::GetTempFileName()).ps1xml\"\r\n\r\n# Repro is basically MamlCommandExamples-view + simplified ExamplesControlcontrol from Help.format.ps1xml in PS5.1 (as PS7 formats are built-in now)\r\n@'\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Configuration>\r\n  <ViewDefinitions>\r\n    <View>\r\n      <Name>Demo</Name>\r\n      <ViewSelectedBy>\r\n        <TypeName>DemoClass</TypeName>\r\n      </ViewSelectedBy>\r\n      <CustomControl>\r\n        <CustomEntries>\r\n          <CustomEntry>\r\n            <CustomItem>\r\n              <ExpressionBinding>\r\n                <ScriptBlock>$_</ScriptBlock>\r\n                <CustomControl>\r\n                  <CustomEntries>\r\n                    <CustomEntry>\r\n                      <CustomItem>\r\n                        <Text>Demo time!</Text>\r\n                      </CustomItem>\r\n                    </CustomEntry>\r\n                  </CustomEntries>\r\n                </CustomControl>\r\n              </ExpressionBinding>\r\n            </CustomItem>\r\n          </CustomEntry>\r\n        </CustomEntries>\r\n      </CustomControl>\r\n    </View>\r\n  </ViewDefinitions>\r\n</Configuration>\r\n'@ | Set-Content -Path $tempPath -Verbose\r\nUpdate-FormatData -PrependPath $tempPath -Verbose\r\n\r\nWrite-Host 'Get-FormatData AFTER importing custom format with built-in/included custom control = WORKS' -ForegroundColor Green\r\n$after = Get-FormatData\r\n\r\nWrite-Host 'Testing custom viewdefinition = WORKS (shows \"Demo Time!\")' -ForegroundColor Green\r\n[pscustomobject]@{PSTypeName='DemoClass'; Some='value'}\r\n\r\n# ViewDefinition works as expected. Just Get-FormatData that breaks.\r\n\r\nRemove-Item -Path $tempPath -Verbose\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>works-when-used-in-groupby.ps1</summary>\r\n\r\n```powershell\r\nWrite-Host 'Get-FormatData BEFORE = WORKS' -ForegroundColor Green\r\n$before = Get-FormatData\r\n\r\n$tempPath = \"$([System.IO.Path]::GetTempFileName()).ps1xml\"\r\n\r\n# Repro is basically MamlCommandExamples-view + simplified ExamplesControlcontrol from Help.format.ps1xml in PS5.1 (as PS7 formats are built-in now)\r\n@'\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Configuration>\r\n  <ViewDefinitions>\r\n    <View>\r\n      <Name>Demo</Name>\r\n      <ViewSelectedBy>\r\n        <TypeName>DemoClass</TypeName>\r\n      </ViewSelectedBy>\r\n      <GroupBy>\r\n        <PropertyName>Some</PropertyName>\r\n        <CustomControlName>DemoControl</CustomControlName>\r\n      </GroupBy>\r\n      <CustomControl>\r\n        <CustomEntries>\r\n          <CustomEntry>\r\n            <CustomItem>\r\n              <Text>Hello world!</Text>\r\n            </CustomItem>\r\n          </CustomEntry>\r\n        </CustomEntries>\r\n      </CustomControl>\r\n    </View>\r\n  </ViewDefinitions>\r\n  <Controls>\r\n    <Control>\r\n      <Name>DemoControl</Name>\r\n      <CustomControl>\r\n        <CustomEntries>\r\n          <CustomEntry>\r\n            <CustomItem>\r\n              <Text>GROUPED BY: Demo</Text>\r\n            </CustomItem>\r\n          </CustomEntry>\r\n        </CustomEntries>\r\n      </CustomControl>\r\n    </Control>\r\n  </Controls>\r\n</Configuration>\r\n'@ | Set-Content -Path $tempPath -Verbose\r\nUpdate-FormatData -PrependPath $tempPath -Verbose\r\n\r\nWrite-Host 'Get-FormatData AFTER importing custom format using common custom control in groupby = WORKS' -ForegroundColor Green\r\n$after = Get-FormatData\r\n\r\nWrite-Host 'Testing custom viewdefinition = WORKS (shows \"GROUPED BY: Demo\" and \"Hello world!\")' -ForegroundColor Green\r\n[pscustomobject]@{PSTypeName='DemoClass'; Some='value'}\r\n\r\n# ViewDefinition works as expected. Just Get-FormatData that breaks.\r\n\r\nRemove-Item -Path $tempPath -Verbose\r\n```\r\n</details>\r\n\r\nThis isn't because of `Update-FormatData`. Same issue when loading formatdata using `FormatsToProcess = @('test.Format.ps1xml')` in module manifest.\r\n\r\n## Expected behavior\r\n\r\n`Get-FormatData` should never throw error and always return registered formatting data as expected.\r\n\r\n## Actual behavior\r\n\r\nWorks as expected when common control is used in GroupBy, but `Get-FormatData` breaks when using common control in view body.\r\n\r\n#### FAILS with common control in body\r\n![image](https://user-images.githubusercontent.com/3436158/118530856-6deff180-b745-11eb-81b2-b09deb32a53c.png)\r\n\r\n#### Works with builtin custom control\r\n![image](https://user-images.githubusercontent.com/3436158/118530897-7ba57700-b745-11eb-9ff7-9f2ae5c1c747.png)\r\n\r\n#### Works with common custom control in groupby:\r\n![image](https://user-images.githubusercontent.com/3436158/118530931-85c77580-b745-11eb-8dd9-eb483d7cb2e2.png)\r\n\r\n## Environment data\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nSame issue with Windows PowerShell 5.1",
  "closed_at": null,
  "comments": [
    {
      "author": "fflaten",
      "author_association": "CONTRIBUTOR",
      "body": "I'd say this is related to #11202, #12427 and maybe more issues. It seems the focus has been too much on WinPSCompat in those issues while ignoring the fact that `Get-FormatData` might have been broken for years when using third-party custom controls - even in Windows PowerShell as shown in https://github.com/PowerShell/PowerShell/issues/11202#issuecomment-558830772 also",
      "created_at": "2021-05-17T17:45:54Z",
      "updated_at": "2021-05-17T20:01:01Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Full stack trace (from `Get-Error`):\r\n\r\n```\r\nException             :\r\n    Type       : System.InvalidCastException\r\n    TargetSite :\r\n        Name          : ChkCast_Helper\r\n        DeclaringType : System.Runtime.CompilerServices.CastHelpers, System.Private.CoreLib,\r\nVersion=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\r\n        MemberType    : Method\r\n        Module        : System.Private.CoreLib.dll\r\n    StackTrace :\r\n   at System.Management.Automation.CustomItemBase.Create(FormatToken token)\r\n   at System.Management.Automation.CustomControlEntry..ctor(ComplexControlEntryDefinition entry)\r\n   at System.Management.Automation.CustomControl..ctor(ComplexControlBody body, ViewDefinition\r\nviewDefinition)\r\n   at Microsoft.PowerShell.Commands.GetFormatDataCommand.ProcessRecord()\r\n   at System.Management.Automation.Cmdlet.DoProcessRecord()\r\n   at System.Management.Automation.CommandProcessor.ProcessRecord()\r\n    Message    : Unable to cast object of type\r\n'Microsoft.PowerShell.Commands.Internal.Format.ControlReference' to type\r\n'Microsoft.PowerShell.Commands.Internal.Format.ComplexControlBody'.\r\n    Source     : System.Private.CoreLib\r\n    HResult    : -2147467262\r\nCategoryInfo          : NotSpecified: (:) [Get-FormatData], InvalidCastException\r\nFullyQualifiedErrorId :\r\nSystem.InvalidCastException,Microsoft.PowerShell.Commands.GetFormatDataCommand\r\nInvocationInfo        :\r\n    MyCommand        : Get-FormatData\r\n    ScriptLineNumber : 1\r\n    OffsetInLine     : 10\r\n    HistoryId        : 8\r\n    Line             : $after = Get-FormatData\r\n    PositionMessage  : At line:1 char:10\r\n                       + $after = Get-FormatData\r\n                       +          ~~~~~~~~~~~~~~\r\n    InvocationName   : Get-FormatData\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\n```\r\n\r\nThat's this method:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/658837323599ab1c7a81fe66fcd43f7420e4402b/src/System.Management.Automation/FormatAndOutput/common/DisplayDatabase/displayDescriptionData_Complex.cs#L175-L246\r\n\r\nSpecifically, when debugging it, we hit this line:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/658837323599ab1c7a81fe66fcd43f7420e4402b/src/System.Management.Automation/FormatAndOutput/common/DisplayDatabase/displayDescriptionData_Complex.cs#L231\r\n\r\nOn that line in this instance, `cpt.control` is of type `Microsoft.PowerShell.Commands.Internal.Format.ControlReference`, which has no cast to `Microsoft.PowerShell.Commands.Internal.Format.ControlBody`. Instead it looks like it might want to use this method:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/658837323599ab1c7a81fe66fcd43f7420e4402b/src/System.Management.Automation/FormatAndOutput/common/DisplayDatabase/typeDataQuery.cs#L643-L654\r\n\r\nI have no experience with that code unfortunately, so I'm not sure to what extent those changes would fix things. Certainly it seems that the `ResolveControlReference()` method requires more context than we currently have where the code fails.",
      "created_at": "2021-05-25T20:34:42Z",
      "updated_at": "2021-05-25T20:36:03Z"
    },
    {
      "author": "fflaten",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the triage and acknowledgement of the bug :)\r\n\r\nI can add that formatdata using CustomControl are often never shown by `Get-FormatData`, even when embedding the customcontrols. Views using the other PSControl-classes behaves as they should.\r\n\r\nNot sure if this is caused by the same part or if it should be a different issue.",
      "created_at": "2021-05-30T22:24:05Z",
      "updated_at": "2021-06-12T23:38:35Z"
    }
  ],
  "created_at": "2021-05-17T17:35:28Z",
  "number": 15413,
  "state": "open",
  "title": "Get-FormatData breaks after importing view using common customcontrol",
  "updated_at": "2021-06-12T23:38:35Z"
}