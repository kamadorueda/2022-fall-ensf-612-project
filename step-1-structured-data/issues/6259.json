{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6259",
  "author": "LaurentDardenne",
  "body": "```powershell\r\ncd c:\\Temp\r\n@'\r\nfunction Demo {\r\n 'Demo'\r\n }\r\n'@ > .\\script.ps1\r\nipmo .\\script.ps1 -verbose\r\n# VERBOSE: Loading module from path 'C:\\Temp\\script.ps1'.\r\n# VERBOSE: Dot-sourcing the script file 'C:\\Temp\\script.ps1'.\r\nget-module -name script\r\n# \r\n# ModuleType Version    Name                                ExportedCommands\r\n# ---------- -------    ----                                ----------------\r\n# Script     0.0        script\r\n```\r\nI found this [note](https://github.com/PowerShell/PowerShell/blob/c1c5344a8897262433141ecbc13bb06ac2c4bbef/src/System.Management.Automation/engine/Modules/ModuleCmdletBase.cs#L5874), but not sure if the created module is really a module. \r\n",
  "closed_at": "2018-03-14T22:49:05Z",
  "comments": [
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "Why not? You can also import a DLL and then call it's .net methods or PowerShell cmdlets (that's actually how I attach the debugger to PSSA).",
      "created_at": "2018-02-27T19:14:40Z",
      "updated_at": "2018-02-27T19:15:18Z"
    },
    {
      "author": "LaurentDardenne",
      "author_association": "NONE",
      "body": "In this case, the functions are not exported and are not related to the module :\r\n```powershell\r\ndir function:\\demo|select mo*\r\n# ModuleName Module\r\n# ---------- ------\r\n```\r\nWhen I remove the module the functions are not deleted :\r\n```powershell \r\nremove-module script\r\ndemo\r\n#Demo\r\n```\r\nand when I add export-modulemember the script can not be imported anymore because it is not a module:\r\n```powershell \r\ncd c:\\Temp\r\n@'\r\nfunction Demo {\r\n 'Demo'\r\n}\r\nExport-modulemember -function Demo\r\n'@ > .\\script.ps1\r\nipmo .\\script.ps1\r\n#export-modulemember : The Export-ModuleMember cmdlet can only be called from inside a module.\r\n```\r\nA curious behavior for a module.",
      "created_at": "2018-02-28T08:52:49Z",
      "updated_at": "2018-02-28T08:52:49Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Hi @LaurentDardenne  Some background: module manifests have a `ScriptsToProcess` field. The thing to know about `ScriptsToProcess` is that these scripts are executed (dot-sourced) _before_ the module proper is loaded i.e. they are invoked in the module context of the caller of `Import-Module`. This was done as a way to have a kind of \"pre-action\" mechanism in case anything needed to be prepared in the caller's module context. (In practise, I don't believe this was ever used much). \r\n\r\nAnyway, IIIRC paths passed to `Import-Module` are processed in a way that corresponds to their entries in the module manifest. Assemblies and .psm1 scripts get loaded as modules and .ps1 scripts are simply dot-sourced. Note that in all cases a module gets created, but it's empty for scripts. Because the script is executed outside of the module context, removing the module will have no impact on anything defined in those scripts which accounts for the behaviour you're seeing.",
      "created_at": "2018-03-14T20:14:44Z",
      "updated_at": "2018-03-14T20:14:44Z"
    },
    {
      "author": "LaurentDardenne",
      "author_association": "NONE",
      "body": "Thank you.",
      "created_at": "2018-03-14T22:49:05Z",
      "updated_at": "2018-03-14T22:49:05Z"
    }
  ],
  "created_at": "2018-02-27T15:19:50Z",
  "number": 6259,
  "state": "closed",
  "title": "[Question] why import-module can load a .ps1 file ?",
  "updated_at": "2018-03-24T17:33:14Z"
}