{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15762",
  "author": "IlyaFinkelshteyn",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nWith `foreach-object`, `continue` completely exists the loop, not just current iteration, not like with normal `foreach`. I see it in both old PowerShell 5 and latest version of PowerShell Core.\r\n\r\n### Expected behavior\r\n\r\n```console\r\nPS C:\\WINDOWS\\system32> @(1,2,3,4,5) | % {\r\n>> if ($_ -eq 3) {continue}\r\n>> $_\r\n>> }\r\n1\r\n2\r\n4\r\n5\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nPS C:\\WINDOWS\\system32> @(1,2,3,4,5) | % {\r\n>> if ($_ -eq 3) {continue}\r\n>> $_\r\n>> }\r\n1\r\n2\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.19041.1023\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.19041.1023\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": "2021-07-13T17:00:51Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Both `continue` and `break` only function correctly with the language-level loops (`while`, `do`, `for`, `foreach ($a in $b) {...}`). `ForEach-Object` isn't one of those, so just like if you call `continue` or `break` anywhere else in a script, they will terminate all execution until either they find an enclosing loop to continue/break or all execution is halted.\r\n\r\n`return` functions like `continue` for the purposes of ForEach-Object, but the only way to `break` is to throw an exception. There is no other method to terminate a pipeline early, with the exception of `Select-Object -First $x`, which basically just throws an exception inside the engine that the user never sees in order to terminate the pipeline early.",
      "created_at": "2021-07-12T20:59:51Z",
      "updated_at": "2021-07-12T21:00:36Z"
    },
    {
      "author": "IlyaFinkelshteyn",
      "author_association": "NONE",
      "body": "Ah, OK, thanks for the clarification!",
      "created_at": "2021-07-13T17:00:51Z",
      "updated_at": "2021-07-13T17:00:51Z"
    }
  ],
  "created_at": "2021-07-12T20:42:03Z",
  "number": 15762,
  "state": "closed",
  "title": "continue behaves like break with foreach-object",
  "updated_at": "2021-07-13T17:00:54Z"
}