{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11899",
  "author": "NoMoreFood",
  "body": "# PR Summary\r\n\r\nFix #11830\r\nAddresses a comparison failure that causes UTF-8 detection to fail which in turn causes Get-Content -Tail to resort to forward lookups given encoding type cannot be detected. Possible this misdetection is due to the incoming encoding object as being of type System.Text.UTF8Encoding where as the comparison uses the object Encoding.UTF8 which is derived from System.Text.UTF8Encoding+UTF8EncodingSealed.\r\n\r\n## PR Context\r\n\r\nProblem was discovered when investigating performance issues for Get-Content -Tail, in general.  The problem was narrowed to the fact that -Tail will read the entire file when using Get-Content on a UTF-8 file.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed:\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-03-14T04:57:05Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@NoMoreFood Please add a test.",
      "created_at": "2020-02-20T15:00:29Z",
      "updated_at": "2020-02-20T15:00:29Z"
    },
    {
      "author": "NoMoreFood",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Since this addresses an internal performance issue, did you just want a textual output posted here with before/after performance tests for a variety of text encodings?",
      "created_at": "2020-02-20T21:46:39Z",
      "updated_at": "2020-02-20T21:46:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@NoMoreFood I do not look the issue in depths but I feel that if UTF-8 detection wrong the cmdlet can return wrong results. In the case we should add tests.",
      "created_at": "2020-02-21T03:18:32Z",
      "updated_at": "2020-02-21T03:18:32Z"
    },
    {
      "author": "NoMoreFood",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Alright, I'll take a look into creating a general, functional test. I will say though that this was not an issue on Windows PowerShell. And notably, Windows PowerShell was not failing the _currentEncoding.Equals(Encoding.UTF8) comparison that resulted in this problem.",
      "created_at": "2020-02-21T06:10:07Z",
      "updated_at": "2020-02-21T06:10:07Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I imagine there may have been a change in the .NET Core API at some point that resulted in that failing. It seems on the surface like a relatively innocuous change until you start doing reference equality comparisons against it for things like this. \ud83d\ude01 ",
      "created_at": "2020-02-21T06:11:26Z",
      "updated_at": "2020-02-21T06:11:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@NoMoreFood Please check that your new tests fail on current version and do not fail after your fix. Thanks!",
      "created_at": "2020-02-21T06:14:06Z",
      "updated_at": "2020-02-21T06:14:06Z"
    },
    {
      "author": "NoMoreFood",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov It appears there are already functional tests for various encodings within the test suite.  However, I added a few additional explicit encodings that were not in the enumeration and committed that change to this pull.  Given this pull addresses a performance issue, I do not see how a reliable pass/fail test can be written given performance can vary drastically between systems and, to a lesser extent, between executions on the same system given other operating system activity.   The only reasonable way to provide a test for something like this would be to add debug/tracing code to the code base to verify the desired code branch is hit/not hit; I do not see any precedent for this type of testing in other tests.\r\n\r\nIn absence of that, I have provided a before and after demonstration that clearly shows the performance change on my system. \r\n\r\nTest Code:\r\n```\r\n$Encodings = @('String','OEM','Unicode','BigEndianUnicode',\r\n    'UTF8','UTF8BOM','UTF8NoBOM','UTF7','UTF32','Ascii')\r\n$TempFile = (New-TemporaryFile).FullName\r\n$Results = @()\r\nForEach ($Encoding in $Encodings)\r\n{\r\n    (1..2e6) | Set-Content -Encoding $Encoding -LiteralPath $TempFile -Force\r\n    $Time = Measure-Command { $Capture = Get-Content -Tail 1 -LiteralPath $TempFile }\r\n    $Results += New-Object PSObject -Property @{'Encoding'=$Encoding;'Time'=$Time.TotalMilliSeconds}\r\n    Remove-Item -LiteralPath $TempFile -Force\r\n}\r\n$Results | Format-Table -AutoSize\r\n```\r\n\r\nBefore Changes:\r\n```\r\nEncoding             Time\r\n--------             ----\r\nString            12.3904\r\nOEM              585.5496\r\nUnicode            1.2809\r\nBigEndianUnicode   1.1258\r\nUTF8             555.5736\r\nUTF8BOM            0.9639\r\nUTF8NoBOM        647.7248\r\nUTF7             560.4215\r\nUTF32              1.1847\r\nAscii            562.1341\r\n```\r\n\r\nAfter Changes:\r\n```\r\nEncoding           Time\r\n--------           ----\r\nString           2.8139\r\nOEM              0.8078\r\nUnicode          0.8523\r\nBigEndianUnicode 0.9938\r\nUTF8             0.7483\r\nUTF8BOM          0.7559\r\nUTF8NoBOM        0.7721\r\nUTF7             0.8044\r\nUTF32            1.1415\r\nAscii            0.9463\r\n```\r\n\r\nNotice the difference the timings for the code that will be detected as UTF-8 (given the current character set used in the demonstration).  The \"after\" results are similar to what you would see with Windows PowerShell.",
      "created_at": "2020-02-21T08:50:38Z",
      "updated_at": "2020-02-21T08:50:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@NoMoreFood I guess the updated test does not fail on current version. Can you check? If so I suggest replace the test text (really it is one byte ASCII)\r\n```c#\r\n        $content = @\"\r\none\r\ntwo\r\nfoo\r\nbar\r\nbaz\r\n\"@\r\n```\r\nwith a text having _multi byte Unicode_, ex.:\r\n```c#\r\n        $content = @\"\r\n\u043e\u0434\u0438\u043d\r\n\u0434\u0432\u0430\r\n\u0444\u0443\u0443\r\n\u0431\u0430\u0440\r\n\u0431\u0430\u0437\u0430\r\n\"@\r\n```\r\n",
      "created_at": "2020-02-21T09:25:57Z",
      "updated_at": "2020-02-21T09:25:57Z"
    },
    {
      "author": "NoMoreFood",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Other parts of that test case will need to change as well to support multi-byte Unicode validation. It'll beef it up later today and submit an update. On the surface after a quick mod, it does not appear to behave any differently before or after these changes (except for the fact it's faster). More to come...",
      "created_at": "2020-02-21T12:13:16Z",
      "updated_at": "2020-02-21T12:13:16Z"
    },
    {
      "author": "NoMoreFood",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Enhanced Get-Content / Get-Content -Tail tests have been added.",
      "created_at": "2020-02-21T13:09:28Z",
      "updated_at": "2020-02-21T13:09:28Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@NoMoreFood Is there an issue filed for this fix? If not, can you please open an issue that describes the problem with repro steps?",
      "created_at": "2020-03-13T06:39:21Z",
      "updated_at": "2020-03-13T06:39:21Z"
    },
    {
      "author": "NoMoreFood",
      "author_association": "CONTRIBUTOR",
      "body": "@daxian-dbw Yes, it's in the PR description: https://github.com/PowerShell/PowerShell/issues/11830",
      "created_at": "2020-03-13T08:16:17Z",
      "updated_at": "2020-03-13T08:16:17Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Oh, I see. Maybe that part of the template is not clear enough :) That's for the doc issue if a documentation change is needed\r\n![image](https://user-images.githubusercontent.com/127450/76639221-fc962c80-650a-11ea-8603-04ff0e6ea3d4.png)\r\n\r\n-----------\r\n\r\nThe issue which the PR is addressing should be put in the PR description, like `Fix #xxxx`. I added it to your PR description.",
      "created_at": "2020-03-13T16:15:38Z",
      "updated_at": "2020-03-13T16:15:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@NoMoreFood Thanks for your contribution!",
      "created_at": "2020-03-14T04:57:21Z",
      "updated_at": "2020-03-14T04:57:21Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.1.0-preview.1` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.1)\n",
      "created_at": "2020-03-26T17:48:21Z",
      "updated_at": "2020-03-26T17:48:21Z"
    }
  ],
  "created_at": "2020-02-20T01:03:29Z",
  "number": 11899,
  "state": "closed",
  "title": "Address UTF-8 Detection In Get-Content -Tail",
  "updated_at": "2020-03-26T17:48:21Z"
}