{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16593",
  "author": "jhoneill",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nThere are lots of different issues around date formats, and it's well understood that \r\n\r\n1. Some date format needs to be picked as the \"invariant\" one . Because much of IT is US-based, US format is used for this\r\n2. Local customs for how dates are written vary.\r\n3. As a result one needs to understand whether translation happens between text and date objects (and vice versa) is done using local or invariant format .   \r\n\r\nSome oddness may be down to .NET but the following seem to be PowerShell quirks which make it harder to understand which way the translation occurs. To see this you need to ensure you're not on US format \r\n```\r\n> Get-Culture                        \r\n\r\nLCID             Name             DisplayName\r\n----             ----             -----------\r\n2057             en-GB            English (United Kingdom)\r\n\r\n> [datetime]::now -as [String]                         \r\n10/12/2021 15:18:51\r\n\r\n> [string][datetime]::now \r\n12/10/2021 15:18:17\r\n```\r\n\r\n`-as type` converts using invariant.    \r\n`[type]` converts as local. \r\n\r\nIt works the other way \r\n```\r\n> ([string][datetime]::now) -as [datetime]\r\n\r\n12 October 2021 15:21:14        \r\n\r\n>[datetime]([string][datetime]::now)     \r\n10 December 2021 15:33:40\r\n\r\n> $x =  [datetime]::now\r\n> \"It's \" + $x \r\nIt's 12/10/2021 15:36:50\r\n\r\n> \"It's \" + $x.ToString()  \r\nIt's 10/12/2021 15:36:50\r\n```\r\n\r\nYes, I know that **there are loads of things depending on the current behaviour so making things consistent would be a massive breaking change**. But I'd love someone who knows to explain how we ended up in this mess.\r\n\n\n### Expected behavior\n\n```console\n$x -as [string] -eq [string]$x\r\ntrue\n```\n\n\n### Actual behavior\n\n```console\n$x -as [string] -eq [string]$x\r\n\r\nReturns false when $x is a date time object and the culture is not US.\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u0393\u00c7\u00aa}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n\r\nIt's the same on PowerShell 5.1\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> But I'd love someone who knows to explain how we ended up in this mess.\r\n\r\nSo the big difference is that `-as [string]` is compiled as:\r\n\r\n```ps1\r\nTypeOps.AsOperator(DateTime.Now, Fake.Const<Type>(typeof(string)));\r\n```\r\n\r\nand `[string][datetime]::Now` is compiled as:\r\n\r\n```ps1\r\nFake.Dynamic<Func<CallSite, DateTime, string>>(PSConvertBinder.Get(typeof(string)))(DateTime.Now);\r\n```\r\n\r\nNow both `AsOperator` and `PSConvertBinder` end up calling `LanguagePrimitivies.FigureConversion`, they both receive the same `IConversionData` and invoke it. The difference is the `IFormatProvider` specified. `-as` will use `NumberFormatInfo.InvariantInfo` and an explicit conversion will specify `null` (I stopped following around here, but I'm guessing somewhere down the line the `null` is replaced with `CultureInfo.InvariantInfo`).\r\n\r\nNow why is it different? \ud83e\udd37 probably an oversight. Would be easy to make. Ideally they'd both just call the binder and the binder would just have an option for \"defaultOnError\" or something like that.",
      "created_at": "2021-12-12T16:36:25Z",
      "updated_at": "2021-12-12T16:46:13Z"
    }
  ],
  "created_at": "2021-12-10T16:26:03Z",
  "labels": [
    "Issue-Question",
    "WG-Engine",
    "Breaking-Change"
  ],
  "number": 16593,
  "state": "open",
  "title": "[type]$x  and $x -as [type] aren't identical",
  "updated_at": "2022-01-07T00:03:13Z"
}