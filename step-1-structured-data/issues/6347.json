{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6347",
  "author": "thebtm",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://github.com/PowerShell/PowerShell/blob/master/docs/KNOWNISSUES.md).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\nOn Linux:\r\n```\r\npwsh\r\nPS /home/thebtm/Downloads> echo $Env:os                                                                                                                                                                                                        \r\nPS /home/thebtm/Downloads> echo $Env::os                                                                                                                                                                                                       \r\nPS /home/thebtm/Downloads> echo $Env:os\r\n\r\nPS /home/brad/Downloads> get-childitem Env: \r\n##OS is missing\r\n\r\n```\r\nOn Windows:\r\n```\r\nPS E:\\tmp> echo $env:os\r\nWindows_NT\r\n\r\nPS /home/brad/Downloads> get-childitem Env:\r\n...\r\nOS                             Windows_NT\r\n...\r\n```\r\n\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```\r\nPS /home/thebtm/Downloads> echo $Env:os\r\nRHEL/CentOS/Ubuntu/Debian/OS_X/Etc\r\n\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```\r\nIts not set for the linux version\r\n\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nPS /home/brad/Downloads> $psversiontable                                                                                                                                                                                                     \r\n\r\nName                           Value                                                                                                                                                                                                        \r\n----                           -----                                                                                                                                                                                                        \r\nPSVersion                      6.0.1                                                                                                                                                                                                        \r\nPSEdition                      Core                                                                                                                                                                                                         \r\nGitCommitId                    v6.0.1                                                                                                                                                                                                       \r\nOS                             Linux 3.10.0-693.17.1.el7.x86_64 #1 SMP Thu Jan 25 20:13:58 UTC 2018                                                                                                                                         \r\nPlatform                       Unix                                                                                                                                                                                                         \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                                                                                                                                      \r\nPSRemotingProtocolVersion      2.3                                                                                                                                                                                                          \r\nSerializationVersion           1.1.0.1                                                                                                                                                                                                      \r\nWSManStackVersion              3.0  \r\n\r\n\r\nPS E:\\tmp> $psversiontable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.14393.2068\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.14393.2068\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n\r\n\r\n```\r\n",
  "closed_at": "2018-03-10T22:38:02Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "`$env:OS` is a Windows-specific _system_ environment variable - it has nothing to do with PowerShell per se. \r\n\r\nLetting PowerShell define its own environment variables - which can affect any processes launched from a PowerShell session - should be avoided.\r\n\r\nInstead, PowerShell Core already offers the _PowerShell-internal_ automatic `$IsWindows`, `$IsLinux` and `$IsMacOS` variables.\r\n\r\nThe only problematic aspect is that `$IsWindows` is not defined in _Windows PowerShell_.\r\n(By contrast, given that undefined variables are \"falsy\", something like `if ($IsLinux)` and `if ($IsMacOS)` will work as expected in older versions - _unless_ `Set-StrictMode -Version 2` or higher is in effect).\r\n\r\nThus, you can use one of the following methods to detect running on _Windows_ in a backward-compatible fashion (both approaches work even with `Set-StrictMode -Version 2` or higher in effect:\r\n\r\n```powershell\r\n# Backward-compatible way to detect if code is running on Windows.\r\n$runningOnWindows = $env:OS -eq 'Windows_NT'\r\n\r\n# Alternative:\r\n$runningOnWindows = -not (Test-Path variable:IsWindows) -or $IsWindows\r\n```\r\n\r\nAlso note that - in PowerShell _Core_ only -  `$PSVersionTable` now has  a `[string]`-valued `.OS` property, though its value is _version-specific_ (and in the case of macOS you need to look for `Darwin`); for instance:\r\n\r\n```powershell\r\n# macOS\r\n> $PSVersionTable.OS\r\nDarwin 17.4.0 Darwin Kernel Version 17.4.0: Sun Dec 17 09:19:54 PST 2017; root:xnu-4570.41.2~1/RELEASE_X86_64\r\n\r\n# Windows (PS Core)\r\n> $PSVersionTable.OS\r\nMicrosoft Windows 10.0.15063\r\n\r\n# Linux (Ubuntu 16.04)\r\n> $PSVersionTable.OS\r\nLinux 4.4.0-116-generic #140-Ubuntu SMP Mon Feb 12 21:23:04 UTC 2018\r\n```",
      "created_at": "2018-03-10T22:26:59Z",
      "updated_at": "2018-10-20T21:05:23Z"
    },
    {
      "author": "thebtm",
      "author_association": "NONE",
      "body": "Thank you for the information then I will work with what I can. ",
      "created_at": "2018-03-10T22:38:02Z",
      "updated_at": "2018-03-10T22:38:02Z"
    }
  ],
  "created_at": "2018-03-08T22:57:34Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 6347,
  "state": "closed",
  "title": "The $Env:OS Variable Should Be Set for both Windows and Linux versions of powershell",
  "updated_at": "2018-10-20T21:05:23Z"
}