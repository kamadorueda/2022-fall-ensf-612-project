{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6831",
  "author": "mlocati",
  "body": "Steps to reproduce\r\n------------------\r\n\r\n```powershell\r\nClass BaseClass : System.IComparable\r\n{\r\n    [int] $Value\r\n    BaseClass([int] $v)\r\n    {\r\n        $this.Value = $v\r\n    }\r\n    [int] CompareTo($that)\r\n    {\r\n        If (-Not($that -is [BaseClass])) {\r\n            Throw \"Not comparable!!\"\r\n        }\r\n        return $this.Value - $that.Value\r\n    }\r\n}\r\nClass SubClassA : BaseClass\r\n{\r\n    SubClassA([int] $v) : base($v)\r\n    {\r\n    }\r\n}\r\nClass SubClassB : BaseClass\r\n{\r\n    SubClassB([int] $v) : base($v)\r\n    {\r\n    }\r\n}\r\n$base1 = [BaseClass]::new(1)\r\n$base2 = [BaseClass]::new(2)\r\n$subA1 = [SubClassA]::new(1)\r\n$subB2 = [SubClassB]::new(2)\r\nWrite-Output ('$base1 -lt $base2 -> ' + ($base1 -lt $base2))\r\nWrite-Output ('$subA1 -lt $subB2 -> ' + (([BaseClass]$subA1) -lt ([BaseClass]$subB2)))\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\n$base1 -lt $base2 -> True\r\n$subA1 -lt $subB2 -> True\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\n$base1 -lt $base2 -> True\r\nCould not compare \"SubClassA\" to \"SubClassB\". Error: \"Cannot convert the \"SubClassB\" value of type \"SubClassB\" to type \"SubClassA\".\"\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.2\r\nPSEdition                      Core\r\nGitCommitId                    v6.1.0-preview.2\r\nOS                             Microsoft Windows 10.0.17134\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @rjmholt @daxian-dbw \r\nSeems we could fix this. Maybe even have to be faster.",
      "created_at": "2018-05-07T09:38:17Z",
      "updated_at": "2018-05-07T09:38:17Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Without having looked at the implementation:\r\n\r\nWhat seems to be happening here is that PowerShell blindly tries to convert the RHS to the type of the LHS without considering their shared base class.\r\n\r\nThe problem does not arise if the RHS type directly derives from the LHS type (but not the other way around); e.g.:\r\n\r\n```powershell\r\n$base1 -lt $subA1  # OK: SubClassA (RHS) derives from BaseClass (LHS) \r\n\r\n$subA1 -lt $base1  # !! BREAKS: BaseClass (RHS) does NOT derive from SubClassA (LHS)\r\n```",
      "created_at": "2018-05-07T18:59:03Z",
      "updated_at": "2018-05-07T18:59:03Z"
    }
  ],
  "created_at": "2018-05-07T08:17:08Z",
  "labels": [
    "WG-Engine"
  ],
  "number": 6831,
  "state": "open",
  "title": "PowerShell IComparable with subclasses",
  "updated_at": "2018-05-07T18:59:03Z"
}