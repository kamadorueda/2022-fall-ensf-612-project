{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10458",
  "author": "JoeSalmeri",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n\r\nIssue\r\n    Copy-Item behavior is inconsistent and produces unexpected results\r\n    In some cases rerunning the same command produces different results\r\n    The results are different than what cmd copy, xcopy, and robocopy would produce\r\n\r\nSetUp\r\n    For each example the following setup is to start with a clean slate\r\n    Before EACH of the tests in EACH example the environment is reset\r\n    (so before each Copy-Item, cmd copy tests, xcopy, or robocopy test)\r\n\r\n    SetUp-PSCopyTest.ps1\r\n\r\n        rm -r -force \\test\r\n        rm -r -force \\test2\r\n\r\n        md \\test\r\n\r\n        echo 'a' > \\test\\a.txt\r\n        echo 'b' > \\test\\b.txt\r\n        echo 'c' > \\test\\c.txt\r\n        echo 'd' > \\test\\d.txt\r\n\r\n        md \\test\\1\r\n\r\n        echo '1d' > \\test\\1\\d.txt\r\n\r\n    Which produces the following folders and files\r\n\r\n        \\test\\a.txt\r\n        \\test\\b.txt\r\n        \\test\\c.txt\r\n        \\test\\d.txt\r\n        \\test\\1\r\n        \\test\\1\\d.txt\r\n\r\nExample 1  - Destination does not exist and recurse not specified\r\n    Setup\r\n        SetUp-PSCopyTest.ps1\r\n\r\n    Test\r\n        Copy-Item test test2\r\n\r\n    Expected Result\r\n        \\test2          directory created\r\n        \\test2\\a.txt    file copied\r\n        \\test2\\b.txt    file copied\r\n        \\test2\\c.txt    file copied\r\n        \\test2\\d.txt    file copied\r\n\r\n    Copy-Item Result (UnExpected)\r\n        \\test2          directory created but is empty\r\n        No files in \\test were copied\r\n\r\n    Copy-Item ReRun Result (UnExpected AND different)\r\n        \\test2\\test     directory created\r\n        No files in \\test were copied and no files exist in test2 or test2\\test\r\n\r\n    cmd copy test test2 Result (Not desired but expected)\r\n        \\test2 FILE created which contains the contents of\r\n            \\test\\a.txt\r\n            \\test\\b.txt\r\n            \\test\\c.txt\r\n            \\test\\d.txt\r\n\r\n        Not the desired result but expected since \\test2 directory did not exist\r\n\r\n    xcopy test test2 Result (Expected)\r\n        The expected results occur if you respond D for directory to the prompt\r\n        asking if test2 is File or Directory\r\n\r\n    robocopy test test2 Result (Expected)\r\n        The expected results occur\r\n\r\nExample 2  - Destination does not exist and recurse was specified\r\n    Setup\r\n        SetUp-PSCopyTest.ps1\r\n\r\n    Test\r\n        Copy-Item test test2 -r\r\n\r\n    Expected Result\r\n        \\test2                  directory created\r\n        \\test2\\a.txt            file copied\r\n        \\test2\\b.txt            file copied\r\n        \\test2\\c.txt            file copied\r\n        \\test2\\d.txt            file copied\r\n        \\test\\1                 directory created\r\n        \\test\\1\\d.txt           file copied\r\n\r\n    Copy-Item Result (Expected)\r\n        The expected results occur\r\n\r\n    Copy-Item ReRun Result (UnExpected AND different)\r\n        Note when rerun the results are different since the \\test2 directory exists\r\n        This makes Copy-Item difficult to use in a script that is scheduled to run\r\n        on a reoccurring basis\r\n\r\n        \\test2\\test             directory created\r\n        \\test2\\test\\a.txt       file copied\r\n        \\test2\\test\\b.txt       file copied\r\n        \\test2\\test\\c.txt       file copied\r\n        \\test2\\test\\d.txt       file copied\r\n\r\n        \\test2\\test\\1           directory created\r\n        \\test2\\test\\1\\d.txt     file copied\r\n\r\n    Copy-Item 2nd Rerun Result (UnExpected AND different again from previous 2 runs)\r\n        Error: CopyItem : An item with the specified name \\test2\\test already exists\r\n\r\n        If -Force is specified then the results are the same as the Copy-Item ReRun results,\r\n        however, that demonstrates how Copy-Item cannot be used to produce the same results\r\n        for a rerun command. It also only seems to care when a destination directory\r\n        exists and as other tests show does not care if it would overwrite a file.\r\n\r\n    cmd copy Result (Not Supported)\r\n        cmd copy does not support recursion so test not applicable\r\n\r\n    xcopy test test2 /s /e Result (Expected)\r\n        The expected results occur if you respond D for directory to the prompt\r\n        asking if test2 is File or Directory\r\n\r\n    robocopy test test2 /s /e Result (Expected)\r\n        The expected results occur\r\n\r\nExample 3  - Destination exists but is empty and recurse not specified\r\n    Setup\r\n        SetUp-PSCopyTest.ps1\r\n        md \\test2\r\n\r\n    Test\r\n        Copy-Item test test2\r\n\r\n    Expected Result\r\n        \\test2\\a.txt            file copied\r\n        \\test2\\b.txt            file copied\r\n        \\test2\\c.txt            file copied\r\n        \\test2\\d.txt            file copied\r\n\r\n    Copy-Item Result (UnExpected)\r\n        \\test2\\test             directory created\r\n        No files in \\test were copied\r\n\r\n    Copy-Item ReRun Result (UnExpected and different)\r\n        Error: copy-item : An item with the specified name \\test2\\test already exists.\r\n\r\n        If -Force is specified then the results are the same as the Copy-Item results\r\n\r\n    cmd copy test test2 Result (Expected)\r\n        The expected results occur\r\n\r\n    xcopy test test2 Result (Expected)\r\n        The expected results occur\r\n\r\n    robocopy test test2 Result (Expected)\r\n        The expected results occur\r\n\r\nExample 4  - Destination exists but is empty and recurse was specified\r\n    Setup\r\n        SetUp-PSCopyTest.ps1\r\n        md \\test2\r\n\r\n    Test\r\n        Copy-Item test test2 -r\r\n\r\n    Expected Result\r\n        \\test2\\a.txt            file copied\r\n        \\test2\\b.txt            file copied\r\n        \\test2\\c.txt            file copied\r\n        \\test2\\d.txt            file copied\r\n        \\test2\\1                directory created\r\n        \\test2\\1\\d.txt          file copied\r\n\r\n    Copy-Item Result (UnExpected)\r\n        \\test2\\test\\a.txt       file copied\r\n        \\test2\\test\\b.txt       file copied\r\n        \\test2\\test\\c.txt       file copied\r\n        \\test2\\test\\d.txt       file copied\r\n        \\test2\\test\\1           directory created\r\n        \\test2\\test\\1\\d.txt     file copied\r\n\r\n    Copy-Item ReRun Result (UnExpected)\r\n        Error: Copy-Item : An item with the specified name \\test2\\test already exists.\r\n\r\n        If -Force is specified then the results are the same as the Copy-Item results, but\r\n        those are not the expected or desired results\r\n\r\n    cmd copy Result (Not Supported)\r\n        cmd copy does not support recursion so test not applicable\r\n\r\n    xcopy test test2 /s /e Result (Expected)\r\n        The expected results occur\r\n\r\n    robocopy test test2 /s /e Result (Expected)\r\n        The expected results occur\r\n\r\nExample 5  - Destination does not exist, using * with the source and recurse not specified\r\n    Setup\r\n        SetUp-PSCopyTest.ps1\r\n\r\n    Test\r\n        Copy-Item test\\* test2\r\n\r\n    Expected Result\r\n        \\test2                  directory created\r\n        \\test2\\a.txt            file copied\r\n        \\test2\\b.txt            file copied\r\n        \\test2\\c.txt            file copied\r\n        \\test2\\d.txt            file copied\r\n\r\n    Copy-Item Result (Expected)\r\n        The expected results occur\r\n\r\n    Copy-Item ReRun Result (UnExpected and different)\r\n        \\test2\\1                directory created and empty\r\n\r\n        No confirmation for overwriting files occur\r\n\r\n    Copy-Item 2nd ReRun Result (UnExpected and different)\r\n        Error: Copy-Item : An item with the specified name \\test2\\1 already exists.\r\n\r\n        Interesting no issue with overwritting the files\r\n\r\n        If -Force is specified then the results are the same as the Copy-Item rerun results, but\r\n        those are not the expected or desired results\r\n\r\n    cmd copy test\\* test2 Result (Not desired but expected)\r\n        \\test2 FILE created which contains the contents of\r\n            \\test\\a.txt\r\n            \\test\\b.txt\r\n            \\test\\c.txt\r\n            \\test\\d.txt\r\n\r\n        Not the desired result but expected since \\test2 directory did not exist\r\n\r\n    xcopy test\\* test2 Result (Expected)\r\n        The expected results occur if you respond D for directory to the prompt\r\n        asking if test2 is File or Directory\r\n\r\n    robocopy test\\* test2 Result (Not supported - but alternative available)\r\n        Robocopy works with directories so this syntax is not valid\r\n        This is not really an issue since robocopy test test2 produces the expected results\r\n\r\nExample 6  - Destination does not exist, using * with the source and recurse was specified\r\n    Setup\r\n        SetUp-PSCopyTest.ps1\r\n\r\n    Test\r\n        Copy-Item test\\* test2 -r\r\n\r\n    Expected Result\r\n        \\test2                  directory created\r\n        \\test2\\a.txt            file copied\r\n        \\test2\\b.txt            file copied\r\n        \\test2\\c.txt            file copied\r\n        \\test2\\d.txt            file copied\r\n        \\test2\\1                directory created\r\n        \\test2\\1\\d.txt          file copied\r\n\r\n    Copy-Item Result (UnExpected)\r\n        \\test2                  directory created\r\n        \\test2\\a.txt            file copied\r\n        \\test2\\b.txt            file copied\r\n        \\test2\\c.txt            file copied\r\n        \\test2\\d.txt            file copied\r\n\r\n        Despite specifying recurse the following were not created\r\n            \\test2\\1            directory not created\r\n            \\test2\\1\\d.txt      file not copied\r\n\r\n    Copy-Item ReRun Result (Expected BUT different)\r\n        The expected results occur but this differs from the initial run which shows that\r\n        you cannot run the same command and get the same results.\r\n\r\n    cmd copy Result (Not Supported)\r\n        cmd copy does not support recursion so test not applicable\r\n\r\n    xcopy test\\* test2 /s /e Result (Expected)\r\n        The expected results occur if you respond D for directory to the prompt\r\n        asking if test2 is File or Directory\r\n\r\n    robocopy test\\* test2 /s /e Result (Not supported - but alternative available)\r\n        Robocopy works with directories so this syntax is not valid\r\n        This is not really an issue since robocopy test test2 /s /e produces the expected results\r\n\r\nExample 7  - Destination exists, using * with the source and recurse not specified\r\n    Setup\r\n        SetUp-PSCopyTest.ps1\r\n        md \\test2\r\n\r\n    Test\r\n        Copy-Item test\\* test2\r\n\r\n    Expected Result\r\n        \\test2\\a.txt            file copied\r\n        \\test2\\b.txt            file copied\r\n        \\test2\\c.txt            file copied\r\n        \\test2\\d.txt            file copied\r\n\r\n    Copy-Item Result (UnExpected)\r\n        \\test2\\a.txt            file copied\r\n        \\test2\\b.txt            file copied\r\n        \\test2\\c.txt            file copied\r\n        \\test2\\d.txt            file copied\r\n        \\test2\\1                directory created but empty\r\n\r\n    Copy-Item ReRun Result (UnExpected and different)\r\n        Error: Copy-Item : An item with the specified name \\test2\\1 already exists.\r\n\r\n        Interesting no issue with overwriting the files\r\n\r\n        If -Force is specified then the results are the same as the Copy-Item  results, but\r\n        those are not the expected or desired results\r\n\r\n    cmd copy test\\* test2 Result (Expected)\r\n        The expected results occur\r\n\r\n    xcopy test\\* test2 Result (Expected)\r\n        The expected results occur\r\n\r\n    robocopy test\\* test2 Result (Not supported - but alternative available)\r\n        Robocopy works with directories so this syntax is not valid\r\n        This is not really an issue since robocopy test test2 produces the expected results\r\n\r\nExample 8  - Destination exists, using * with the source and recurse was specified\r\n    Setup\r\n        SetUp-PSCopyTest.ps1\r\n        md \\test2\r\n\r\n    Test\r\n        Copy-Item test\\* test2 -r\r\n\r\n    Expected Result\r\n     \\test2\\a.txt               file copied\r\n     \\test2\\b.txt               file copied\r\n     \\test2\\c.txt               file copied\r\n     \\test2\\d.txt               file copied\r\n     \\test2\\1                   directory created\r\n     \\test2\\1\\d.txt             file copied\r\n\r\n    Copy-Item Result (Expected)\r\n        The expected results occur\r\n\r\n    Copy-Item ReRun Result (Expected If -Force is also used)\r\n        Error: Copy-Item : An item with the specified name \\test2\\1 already exists.\r\n\r\n        If -Force is specifed then the expected results occur\r\n\r\n    cmd copy Result (Not Supported)\r\n        cmd copy does not support recursion so test not applicable\r\n\r\n    xcopy test\\* test2 /s /e Result (Expected)\r\n        The expected results occur\r\n\r\n    robocopy test\\* test2 /s /e Result (Not supported - but alternative available)\r\n        Robocopy works with directories so this syntax is not valid\r\n        This is not really an issue since robocopy test test2 /s /e produces the expected results\r\n\r\nExample 9  - Destination does not exist, using *.* with the source and recurse not specified\r\n    Setup\r\n        SetUp-PSCopyTest.ps1\r\n\r\n    Test\r\n        Copy-Item test\\*.* test2\r\n\r\n    Expected Result\r\n     \\test2                     directory created\r\n     \\test2\\a.txt               file copied\r\n     \\test2\\b.txt               file copied\r\n     \\test2\\c.txt               file copied\r\n     \\test2\\d.txt               file copied\r\n\r\n    Copy-Item Result (UnExpected but similar to what cmd copy did in prior test)\r\n        test2 FILE created with the contents of \\test\\d.txt only\r\n\r\n    Copy-Item ReRun Result (UnExpected)\r\n        Same results as Copy-Item Result, however, interesting that no confirmation prompt\r\n        displayed to overwrite the file\r\n\r\n    cmd copy test\\*.* test2 Result (Not desired but expected)\r\n        \\test2 FILE created which contains the contents of\r\n            \\test\\a.txt\r\n            \\test\\b.txt\r\n            \\test\\c.txt\r\n            \\test\\d.txt\r\n\r\n    xcopy test\\*.* test2 Result (Expected)\r\n        The expected results occur if you respond D for directory to the prompt\r\n        asking if test2 is File or Directory\r\n\r\n    robocopy test\\*.* test2 Result (Not supported - but alternative available)\r\n        Robocopy works with directories so this syntax is not valid\r\n        This is not really an issue since robocopy test test2 produces the expected results\r\n\r\nExample 10 - Destination does not exist, using *.* with the source and recurse was specified\r\n    Setup\r\n        SetUp-PSCopyTest.ps1\r\n\r\n    Test\r\n        Copy-Item test\\*.* test2 -r\r\n\r\n    Expected Result\r\n        \\test2                  directory created\r\n        \\test2\\a.txt            file copied\r\n        \\test2\\b.txt            file copied\r\n        \\test2\\c.txt            file copied\r\n        \\test2\\d.txt            file copied\r\n        \\test2\\1                directory created\r\n        \\test2\\1\\d.txt          file copied\r\n\r\n    Copy-Item Result (UnExpected but similar to what cmd copy did in prior test)\r\n        \\test2 FILE created which contains the contents of \\test\\d.txt\r\n\r\n    Copy-Item ReRun Result (UnExpected)\r\n        Same as Copy-Item Result but no overwrite prompt\r\n\r\n    cmd copy Result (Not Supported)\r\n        cmd copy does not support recursion so test not applicable\r\n\r\n    xcopy test\\*.* test2 /s /e Result (Expected)\r\n        The expected results occur if you respond D for directory to the prompt\r\n        asking if test2 is File or Directory\r\n\r\n    robocopy test\\*.* test2 /s /e Result (Not supported - but alternative available)\r\n        Robocopy works with directories so this syntax is not valid\r\n        This is not really an issue since robocopy test test2 /s /e produces the expected results\r\n\r\nExample 11 - Destination exists, using *.* with the source and recurse not specified\r\n    Setup\r\n        SetUp-PSCopyTest.ps1\r\n        md \\test2\r\n\r\n    Test\r\n        Copy-Item test\\*.* test2\r\n\r\n    Expected Result\r\n        \\test2\\a.txt            file copied\r\n        \\test2\\b.txt            file copied\r\n        \\test2\\c.txt            file copied\r\n        \\test2\\d.txt            file copied\r\n\r\n    Copy-Item Result (Expected)\r\n        The expected results occur\r\n\r\n    Copy-Item ReRun Result (Expected)\r\n        The expected results occur, however, there is no warning about overwritting files\r\n\r\n    cmd copy test\\*.* test2 Result (Expected)\r\n        The expected results occur\r\n\r\n    xcopy test\\*.* test2 Result (Expected)\r\n        The expected results occur\r\n\r\n    robocopy test\\*.* test2 Result (Not supported - but alternative available)\r\n        Robocopy works with directories so this syntax is not valid\r\n        This is not really an issue since robocopy test test2 produces the expected results\r\n\r\nExample 12 - Destination exists, using *.* with the source and recurse was specified\r\n    Setup\r\n        SetUp-PSCopyTest.ps1\r\n        md \\test2\r\n\r\n    Test\r\n        Copy-Item test\\*.* test2 -r\r\n\r\n    Expected Result\r\n    \\test2\\a.txt                file copied\r\n    \\test2\\b.txt                file copied\r\n    \\test2\\c.txt                file copied\r\n    \\test2\\d.txt                file copied\r\n    \\test2\\1                    directory created\r\n    \\test2\\1\\d.txt              file copied\r\n\r\n    Copy-Item Result (UnExpected)\r\n        \\test2\\a.txt            file copied\r\n        \\test2\\b.txt            file copied\r\n        \\test2\\c.txt            file copied\r\n        \\test2\\d.txt            file copied\r\n\r\n        Despite specifying recurse the following were not created\r\n            \\test2\\1            directory not created\r\n            \\test2\\1\\d.txt      file not copied\r\n\r\n    Copy-Item ReRun Result (UnExpected)\r\n        Same results as Copy-Item, however, there is no warning about overwritting files\r\n\r\n        Despite specifying recurse the following were not created\r\n            \\test2\\1            directory not created\r\n            \\test2\\1\\d.txt      file not copied\r\n\r\n    cmd copy Result (Not Supported)\r\n        cmd copy does not support recursion so test not applicable\r\n\r\n    xcopy test\\*.* test2 /s /e Result (Expected)\r\n        The expected results occur\r\n\r\n    robocopy test\\*.* test2 /s /e Result (Not supported - but alternative available)\r\n        Robocopy works with directories so this syntax is not valid\r\n        This is not really an issue since robocopy test test2 /s /e produces the expected results\r\n\r\n--\r\n-- Comparison of copy method results\r\n--\r\n\r\n    Copy-Item\r\n        1   UnExpected result and different results when rerun\r\n        2   Expected result   but different results when rerun\r\n        3   UnExpected result and different results when rerun\r\n        4   UnExpected result and different results when rerun\r\n        5   Expected result   but different results when rerun\r\n        6   UnExpected result initially and Expected Result when rerun\r\n        7   UnExpected result and different results when rerun\r\n        8   Expected result   and same result when rerun if -Force used\r\n        9   UnExpected result and same result when rerun\r\n        10  UnExpected result and same result when rerun\r\n        11  Expected result   and same result when rerun\r\n        12  UnExpected result and same result when rerun\r\n\r\n    cmd copy\r\n        1   Not desired but expected result\r\n        2   Does not support recursion\r\n        3   Expected result\r\n        4   Does not support recursion\r\n        5   Not desired but expected result\r\n        6   Does not support recursion\r\n        7   Expected result\r\n        8   Does not support recursion\r\n        9   Not desired but expected result\r\n        10  Does not support recursion\r\n        11  Expected result\r\n        12  Does not support recursion\r\n\r\n    xcopy\r\n        1   Expected result\r\n        2   Expected result\r\n        3   Expected result\r\n        4   Expected result\r\n        5   Expected result\r\n        6   Expected result\r\n        7   Expected result\r\n        8   Expected result\r\n        9   Expected result\r\n        10  Expected result\r\n        11  Expected result\r\n        12  Expected result\r\n\r\n    robocopy\r\n        1   Expected result\r\n        2   Expected result\r\n        3   Expected result\r\n        4   Expected result\r\n        5   Not Supported but alternative syntax works\r\n        6   Not Supported but alternative syntax works\r\n        7   Not Supported but alternative syntax works\r\n        8   Not Supported but alternative syntax works\r\n        9   Not Supported but alternative syntax works\r\n        10  Not Supported but alternative syntax works\r\n        11  Not Supported but alternative syntax works\r\n        12  Not Supported but alternative syntax works\r\n\r\n--\r\n-- Conclusion\r\n--\r\n\r\nWhen I first started using PowerShell back in the 2.0 days I noticed these and similar issues\r\nbut figured they would be addressed as the product matured, therefore I reverted  to using\r\ncmd copy, xcopy, and robocopy, however, I wanted to use Copy-Item since in theory it provided\r\nthe capabilites of cmd copy and xcopy all in one.\r\n\r\nIt is disappointing to see that we have version 7.0 out now in beta and they still have not been\r\naddressed basic functionality.\r\n\r\nCopy-Item produces the expected results only 33% of the time and if rerun then it only produces\r\nthe same results 16% of the time.\r\n\r\nIf it was just a matter of learning a different syntax that would be one thing, however,\r\nwhen considering common use cases (destination exists, destination does not exist, recurse\r\nthe source directory tree, don't recurse the source directory tree), there does not appear\r\nto be a syntax which handles all of those cases AND can produce the same results when rerun.\r\n\r\nThis makes Copy-Item pretty much unusable excpet for all but the most simple types\r\nof copy operations.\r\n\r\nComparing Copy-Item to the other options, cmd copy generally works (with the exception of the\r\nnot supporting recursive and a few other cases), xcopy always works, and robocopy always\r\nworks OR works with a tweak to the syntax.\r\n\r\nBack in the PS 2.0 days I considered writing my own Copy-Item replacement but wanted to use\r\nbuilt in functionality as much as possible so I did not do that.\r\n\r\nAre there any plans to address these issues?\r\n\r\nThere seem to be several key issues:\r\n\r\n1)  When the destination does not exist and you are copying more than one item it should\r\n    prompt to ask if the destination should or not the destination should be a container.\r\n    That covers both use cases where you want to copy multiple items to a single item or\r\n    where you want to copy multiple items to a container.\r\n\r\n2)  Recurse needs to be fixed so that when you specify recurse it recurses and when you\r\n    don't specify recurse it does not create empty containers/folders.\r\n\r\n3)  Why does it produce an error if a destination directory exists but not when a destination\r\n    file exists?  Based on PowerShell guidelines since overwritting a file is a destructive\r\n    operation there should be a confirmation before doing so.  Having the user change their\r\n    $ConfirmationPreference from the default of 'High' is not the solution here because\r\n    that would cause all sorts of other confirmations that do not currently occur.  Since\r\n    this constitutes destructive behavior the cmdlet should be changed to confirm.\r\n\r\nI'm sure there are other examples, but those seem to be the key areas causing the problems.\r\n\r\nThis basic functionality in the product really needs to be fixed so that we do not have\r\nto restore to using external tools to accomplish these basic tasks.\r\n\r\nAll the above was reproduced on PS 7 Preview 3 \r\n\r\n# Expected behavior\r\n\r\n```Documented with each example\r\n\r\n```\r\n\r\n# Actual behavior\r\n\r\n```Documented with each example\r\n\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-preview.3\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-preview.3\r\nOS                             Microsoft Windows 10.0.18362\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```none\r\n\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@JoeSalmeri Thanks for the in-depth report!\r\nIt would be easier for us to move forward if you converted your examples into _Pester tests_ with comments and questions so that we could discuss each one and draw a conclusion. Perhaps we'll need to split this topic into several to facilitate the creation of fixes.\r\nAlso remember that we should consider all providers, not only FileSystem, and avoid breaking changes.",
      "created_at": "2019-08-29T04:55:23Z",
      "updated_at": "2019-08-29T04:56:56Z"
    },
    {
      "author": "JoeSalmeri",
      "author_association": "NONE",
      "body": "@iSazonov \r\n\r\nThanks for getting back to me, I know that was a lot to digest.\r\nI have heard of Pester but I am not familiar with it and therefore have not used it before.\r\n\r\nI understand the importance of preparing a good bug report which is why I spent so much time (way more than I expected) detailing and comparing everything in my original report and why I detailed the expected and actual outcomes in each case.\r\n\r\nI also agree that you are correct that my bug report is only dealing with FileSystem provider and I have wondered if the \"other\" providers might be part of the reason that this problem exists in the first place.   If that turns out to be the case then maybe that means we need Copy-File and/or Copy-Directory cmdlets to provide the basic functionality that exists in cmd.exe / xcopy / robocopy.\r\n\r\nWhile there may be additional items, I think my 3 summary points at the end summarize the key areas that contribute to the problems.\r\n\r\nWhen you consider the following use cases:\r\n\r\nCopy-Item dir1 dir2\r\nCopy-Item dir1 dir2 -Recurse\r\n\r\nPretty much every command line environment I have ever worked with (over the last 30+ years) or any of the external tools like xcopy, robocopy, or the many others that have existed over the years all understand and produce the correct results for those command regardless of whether the target directory exists or not and regardless of what layout of files and folders exists under dir1 and dir2 and regardless of whether you want to recurse or not.\r\n\r\nThe only exception is Copy-Item.  Although I provided 12 different examples, the additional examples that added '*' and '*.*' to the commands were attempts by me to try to find a syntax for Copy-Item that would produce the results for the above 2 use cases which was the real goal.  I included them so that you could see all the different examples that I tried to accomplish the goal and that would produce results that were repeatable.\r\n\r\nIn the PowerShell environment, I expect to have to use -Force for a repeat run, but I also expect to get the same results when I rerun, however, Copy-Item pretty much fails in all cases which is why I said that it is unusable in all but the most simple cases.   \r\n\r\nBecause of these issues I have replaced Copy-Item and cp with pointers to cmd.exe copy in my profile because I needed something that worked but I incorrect expected that they would have been addressed long before we reached PS 7 since copy is considered core/basic functionality.\r\n\r\nWhen you also consider that Copy-Item will overwrite files with no warning, I consider it a pretty serious issue and would have expected the cmlet to be using ShouldProcess (which it may be) and have a confirmation level such that destructive actions could not occur without confirmation.\r\n\r\nIn my opinion, those destructive issues should raise the priority level on these bugs.\r\n\r\nMaybe you can get the peopled that wrote xcopy or robocopy involved as they have a handle on exactly what the use cases are and the expected results?\r\n\r\nI hope you can move forward with what I provided as my plate is pretty full right now and I'm not sure I have time install, setup, and learn pester and then recreate everything that I already provided.\r\n\r\nIs it possible for you to move forward with the details I have provided as I have already documented the use cases, expected results, and also provided a script and the commands that you can use to recreate each of the examples demonstrated?\r\n\r\nThanks!\r\n\r\n",
      "created_at": "2019-08-29T15:59:37Z",
      "updated_at": "2019-08-29T15:59:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@JoeSalmeri  Thanks again for your investigations!\r\n\r\n> Is it possible for you to move forward with the details I have provided\r\n\r\nOh, the provider code is very large, complex and sensitive. Over the past two years no one dared to do this work, although we already have many such issues.\r\nWe are close to 7.0 release and I don't expect that something will be fixed in the area. :-(\r\nI have plans to improve globbing and then the provider code but we already have over 60 opened PRs and MSFT team does not manage to process this flow of requests.\r\n",
      "created_at": "2019-08-30T06:48:31Z",
      "updated_at": "2019-08-30T06:48:31Z"
    },
    {
      "author": "JoeSalmeri",
      "author_association": "NONE",
      "body": "@iSazonov \r\n\r\nYeah, I didn't expect it would make the 7.0 release, however, I hope that after that occurs it is given some priority since we are talking about core functionality and also considering that the confirmation levels are not correct for destructive actions and files are overwritten without warning.\r\n\r\nHaving code that is so large and complex, which has serious issues and that no one wants to touch does not really seem like a great way to move forward.... :-)\r\n\r\nIf the provider code is that large and complex, possibly that indicates that all the different providers code should be split out into something that is more manageable and also provides the ability to add future enhancements?\r\n\r\nSome of the issues discussed also exist with other cmdlets.   They also existed years ago for Get-ChildItem but those for the most part seem to be addressed now.\r\n\r\nI really hope that MS spends time to address core functionality issues more instead of just adding more features and enhancements.\r\n\r\nThanks!\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2019-09-04T16:17:20Z",
      "updated_at": "2019-09-04T16:17:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I really hope that MS spends time to address core functionality issues more instead of just adding more features and enhancements.\r\n\r\n@joeyaiello @SteveL-MSFT Perhaps it will surprise you as well as me. :-) \r\nI know that MSFT team is very conservative in changing the engine, but still there is an community expectation that we need to move in this direction too.\r\n\r\n",
      "created_at": "2019-09-05T07:52:05Z",
      "updated_at": "2019-09-05T07:52:05Z"
    },
    {
      "author": "JoeSalmeri",
      "author_association": "NONE",
      "body": "@iSazonov \r\n\r\nI appreciate your response and it would make sense if I was requesting some new features, but I am not talking about new features, I'm talking about bugs in existing features.   \r\n\r\nIt's one thing if a developer has to use a non-PowerShell solution when no PowerShell feature exists and another when the PowerShell feature exists but cannot be used because of the bugs.\r\n\r\nSurely no one would argue that a command that does not produce the same results or one that has destructive behavior with no warning would not be working as it was designed or intended too?\r\n\r\n\r\n\r\n",
      "created_at": "2019-09-05T12:48:31Z",
      "updated_at": "2019-09-05T12:48:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@JoeSalmeri I see your point and agree that features \"must works right\". Really developers (specially MSFT team) split resources and balance between new features, bug fixes and performance improvements. Every day I see how little they do, but when I look at how many PRs have been merged per month, I see a huge amount of work they done!\r\n ",
      "created_at": "2019-09-05T13:18:40Z",
      "updated_at": "2019-09-05T13:18:40Z"
    },
    {
      "author": "JoeSalmeri",
      "author_association": "NONE",
      "body": "@iSazonov \r\n\r\nSounds like we are on the same page.  I appreciate all the hard work of the developers, I just want to seem more emphasis on the core / basics over additional features.\r\n",
      "created_at": "2019-09-05T13:26:10Z",
      "updated_at": "2019-09-05T13:26:10Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "First, we have fixed a large number of bugs and not just focused on features.  They are all listed in the Release Notes and you can see them yourself.\r\n\r\nSecond, the behaviors you're describing have existed since the FileSystemProvider existed and the challenge here is to not break somebody by making a change in behavior.  I agree that the results are not what you expect, but they are consistent with how the provider works.\r\n\r\nIf https://github.com/PowerShell/PowerShell/issues/5785 ever gets done (which is a feature), we can make breaking changes with that.",
      "created_at": "2019-10-22T02:06:35Z",
      "updated_at": "2019-10-22T02:06:35Z"
    },
    {
      "author": "JoeSalmeri",
      "author_association": "NONE",
      "body": "@SteveL-MSFT \r\n\r\nI don't dispute that the team has fixed a lot of bugs and I certainly appreciate that; I just stated my preference of wanting to see more emphasis on the core features over additional features.   Especially since these bugs have existed since the beginning.\r\n\r\nYour second statement seems to say, \"Since this behavior has existed since the beginning of time we don't want to change it and break existing code\".   \r\n\r\nSo a bug (or even a bad design decision) that has existed since the beginning of time will never be fixed because it would break existing code?   IMHO, that does not seem like a very good business decision to me.\r\n\r\nThe issue is not a matter of getting results different than would be expected (expectations can be changed) or different than the behavior of pretty much every other copy type utility out there, the issue is that it does not produce consistent results as demonstrated by my examples.\r\n\r\nAs a developer, you are well aware that intermittent bugs which produce inconsistent results are some of the most challenging ones to debug and fix.   \r\n\r\nWhy would anyone want to write important production quality code which uses functionality which does not produce consistent results?   \r\n\r\nWe both know the answer to that.....They wouldn't.\r\n\r\nWhen PS was first released I immediately found those bugs (and reported them to MS) and figured that they'd be fixed quickly so I delayed using the PS for anything important to wait for it to mature some more.   \r\n\r\nWhen they were not fixed in subsequent releases and I wanted to start using PS, I did what probably many others have done.  I used PS but avoided using those built in features that did not work properly or in a reliable way and instead used external functionality which worked properly, however, I certainly did not expect that 7 major versions later this situation would not have been addressed.\r\n\r\nWhen there are cracks in the foundation or the core building blocks it seems prudent to focus on those areas to strength the product so that users are not forced to look for external solutions that should be covered by internal functionality.\r\n\r\nIt is troubling to see this not being treated as the serious bug that it is",
      "created_at": "2019-10-22T14:07:08Z",
      "updated_at": "2019-10-22T14:07:08Z"
    },
    {
      "author": "jvierrajrv",
      "author_association": "NONE",
      "body": "Something to consider -\r\n\r\nI don't think this is  abug.  The Copy-Item has some behaviors that have to be digested due to the way folders are seen especially when the trailing backslash is used or not used.  Also the current folder needs to be explicit as well as the target aggregator.  These variations seem to be expected and seem to inherit from the behavior for the old Windows CMD.EXE \"copy\" command.  \r\n\r\nIs it possible that the behavior of Core on different platforms also inherits some aspects from the OS it is running on?\r\n",
      "created_at": "2019-10-22T15:01:47Z",
      "updated_at": "2019-10-22T15:01:47Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The filesystemprovider was written way before I was on the PowerShell team.  It's possible at that time it's working as designed (I can see how current behavior could be designed that way).  I would also agree as a user that it's a bit unexpected.  However, @JoeSalmeri we have to take breaking changes seriously.  We can't simply change the behavior and have years of scripts break because they expected some behavior to work a certain way.  This is the reason I opened the issue on FileSystemProvider v2 as there are other changes I'd like to see and this would allow a breaking change (where users can still opt into v1 for current behavior).  ",
      "created_at": "2019-10-22T16:16:29Z",
      "updated_at": "2019-10-22T16:16:29Z"
    },
    {
      "author": "JoeSalmeri",
      "author_association": "NONE",
      "body": "@SteveL-MSFT \r\n\r\nSorry, I did not mean to imply that the problem was your doing or something you created and I\r\ncertainly do appreciate all you have done since joining the team!\r\n\r\nMy issue is with the answers provided regarding the problem.\r\n\r\nI have been in the field for 32 years and have programmed in at least 25 different programming\r\nlanguages during my career.\r\n\r\nIn all cases there is one common theme and answer to the question, \"Why do we write programs?\"\r\n\r\nWe program so that we can automate processes and produce reliable, consistent, and repeatable results.\r\n\r\nThere are very few cases or reason why we would want to write code which produced results which were not repeatable or consistent (a random number generator comes to mind) as that would defeat the purpose of automating tasks.\r\n\r\nIf we were discussing what the expected behavior was versus what the actual behavior was that\r\nis something that could be addressed (but maybe not desired) by changing your/my expectations\r\nto match the actual behavior.\r\n\r\nThat is NOT the case here.  The same code run multiple times does not produce the same results.\r\n\r\nBefore taking the time to write up that bug and all the various situations, I spent CONSIDERABLE\r\ntime trying various syntax (trailing slashes, *, *.*, and others) to try and find a single syntax\r\nthat would produce a consistent result and did not find any for the uses cases described.\r\n\r\nA good developer is not going to write new code using existing code which does not produce repeatable results because then their code also becomes unreliable.\r\n\r\nI'll bet that most PS developers have taken the route that I have which is to use external tools to\r\nperform that functionality in their code so that they can get consistent repeatable results.\r\n\r\nI take breaking code issues quite seriously too, however, when the original code is broke in the first\r\nplace, it makes sense to fix it regardless of whether it would break \"other\" code.\r\n\r\nImagine if the existing Copy-Item had a bug where it deleted the file after it copied it.  Using the\r\nanswer you provided, that would not be addressed because it might break existing code that depended on that bug.  I cannot imagine anyone considering that a good reason or answer.\r\n\r\nIt's been a while since I wrote all that up and reviewed it, however, there were also examples where\r\ndata loss occurs because there was no warning or confirmation.   That certainly goes against the\r\nbasic PS design principles of not doing harm without a warning.\r\n\r\nWhile I appreciate that you opened the issue for FileSystemProvider V2, I am quite skeptical that it will ever occur based on your response here, your comment about \"if #5785 ever gets done\", and the fact that these issues have gone unaddressed pretty much since the beginning of PS.\r\n\r\nRegardless of whether the existing code is fixed or whether a V2 is created, there should still\r\nbe a desire to provide this basic functionality in the product, especially one that is marketed\r\nas the replacement for all of the other shells.\r\n\r\nI really hope that someone take up the task of addressing this.\r\n\r\n",
      "created_at": "2019-10-22T23:17:12Z",
      "updated_at": "2019-10-22T23:17:12Z"
    },
    {
      "author": "JoeSalmeri",
      "author_association": "NONE",
      "body": "@iSazonov @SteveL-MSFT \r\n\r\nAny progress on FileSystem V2?   Was hoping to hear some news as it's been 3 years.\r\n\r\nIf FileSystem V2 ever going to happen?\r\n",
      "created_at": "2022-06-03T14:38:39Z",
      "updated_at": "2022-06-03T14:38:39Z"
    }
  ],
  "created_at": "2019-08-28T20:20:38Z",
  "labels": [
    "Issue-Question",
    "Issue-Meta",
    "WG-Cmdlets-Management",
    "WG-Engine-Providers"
  ],
  "number": 10458,
  "state": "open",
  "title": "Copy-Item incorrect behavior and also inconsistent results when rerun",
  "updated_at": "2022-06-03T14:38:39Z"
}