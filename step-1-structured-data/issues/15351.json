{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15351",
  "author": "nashiooka",
  "body": "## Add a Max/Count Argument to -replace, similar to -split\r\n\r\nReferencing this [StackOverflow question](https://stackoverflow.com/q/67375702/4749264) and [answer](https://stackoverflow.com/a/67375915/4749264).\r\n\r\nType `[System.Text.RegularExpressions.Regex]` has a `.Replace(...)` method several overloads of which accept a \"Count\" argument as the maximum number of replacements.\r\n\r\nExample:\r\n```\r\n$Pattern = [RegEx]\"One\"\r\n$String  = \"One One One\"\r\n$String  = $Pattern.Replace($String, \"Two\", 1)\r\n```\r\n**Output:**\r\n\r\n`\"Two One One\"`\r\n\r\nBecause the Count argument was only 1 only one instance of the pattern was replaced.  I'm not sure if this could be easily accomplished natively in PowerShell without more complicated and/or lengthy code.\r\n\r\nI'm suggesting similar functionality be added to the `-replace` operator so this could be done natively in PowerShell without resorting to .Net.\r\n\r\n`$String -replace $Pattern, \"Two\", 1`\r\n\r\nThis syntax would be similar to `-split` \\<Max-substrings\\> parameter. Moreover, it shouldn't be a breaking change. Since the new optional argument would tail after the existing 2 arguments, existing scripts shouldn't be affected.\r\n\r\nAlso similar to \\<Max-substrings\\> a negative argument can instruct to replace the last X occurrences rather than the first.\r\n\r\n`$String -replace $Pattern, \"Two\", -1`\r\n\r\n**Output:**\r\n\r\n`\"One, One, Two\"`\r\n\r\n\r\n\r\n\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2021-05-05T00:29:06Z",
  "number": 15351,
  "state": "open",
  "title": "Add a Max/Count Argument to -replace, similar to -split",
  "updated_at": "2021-05-06T16:41:58Z"
}