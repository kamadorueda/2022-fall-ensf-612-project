{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11997",
  "author": "leonardder",
  "body": "This is related to https://github.com/PowerShell/PowerShell/issues/11989 and initially reported in https://github.com/PowerShell/PowerShell/issues/11989#issuecomment-593859909. As it looks like this issue is different, I figured opening a new issue is more sufficient.\r\n\r\n# Steps to reproduce\r\n1. Get the following project: \r\n[PowerShellTest impersonated compatibility.zip](https://github.com/PowerShell/PowerShell/files/4285883/PowerShellTest.impersonated.compatibility.zip)\r\n2. In program.cs, enter proper username, domain and password\r\n3. Execute the program\r\n\r\n# Expected behavior\r\n$PSVersionTable is outputted within Windows Powershell\r\n\r\n# Actual behavior\r\nError: The background process reported an error with the following message: Internal Windows PowerShell error. Loading managed Windows PowerShell failed with error 80070005.\r\n\r\n# Environment data\r\n```\r\nPSVersion                      7.0.0-rc.3\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-rc.3\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
  "closed_at": "2022-07-14T13:25:42Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @anmenaga for information.",
      "created_at": "2020-03-04T17:14:14Z",
      "updated_at": "2020-03-04T17:14:14Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "This is a hosted scenario with impersonation. Even without WinCompat in the picture I can see problems with normal module operations under impersonation.",
      "created_at": "2020-03-04T18:44:51Z",
      "updated_at": "2020-03-04T18:44:51Z"
    },
    {
      "author": "leonardder",
      "author_association": "NONE",
      "body": "@anmenaga If I understand you correctly, you discourage this approach? We're using it with PowerShell 5.1 in production and there it works as it should.\r\n\r\nI've investigated the use of an out of process runspace, but we're exchanging several variables (nested hashtables) between our C# code and powershell session using the session state proxy, and when running out of process, we need to manually unwrap them from their PSObject wrappers.",
      "created_at": "2020-03-05T07:19:19Z",
      "updated_at": "2020-03-05T07:19:19Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "`a hosted scenario with impersonation` is a relatively rare scenario; and rare scenarios tend to have more bugs that are fixed slower than those on heavily used code paths. To get things working in your situation it might be useful to think about alternative ways to achieve the desired result.\r\n> I've investigated the use of an out of process runspace\r\n> ...\r\n> and when running out of process, we need to manually unwrap them from their PSObject wrappers\r\n\r\nCan you please tell more about this? I didn't quite get the problem with unwraping...",
      "created_at": "2020-03-05T22:41:09Z",
      "updated_at": "2020-03-05T22:41:09Z"
    },
    {
      "author": "leonardder",
      "author_association": "NONE",
      "body": "> Can you please tell more about this? I didn't quite get the problem with unwraping...\r\n\r\nHere is an example code snippet, not checked, but you'll get the point:\r\n\r\n```\r\nHastable myTable = new Hashtable{ Data = new Hashtable()};\r\nrunspace.SessionStateProxy.SetVariable(\"myTable\", myTable);\r\n```\r\n\r\nIn powershell\r\n\r\n```\r\n$myTable.Data.Test = 42\r\n```\r\n\r\nIn c# again:\r\n\r\n```\r\nHashtable newTable = runspace.SessionStateProxy.GetVariable(\"myTable\") as Hashtable;\r\nvar test1 = myTable[\"Data\"][\"Test\"];\r\nvar test2 = newTable[\"Data\"][\"Test\"];\r\n```\r\n\r\nBoth test1 and test2 should contain 42 as I\"m correct, as the inner hash-table was passed by reference.\r\n\r\nNow, if I run out of process, I need to recursively check my hashtable for PSObject instances when getting myTable from the session state proxy.",
      "created_at": "2020-03-06T07:23:12Z",
      "updated_at": "2020-03-06T07:23:12Z"
    },
    {
      "author": "leonardder",
      "author_association": "NONE",
      "body": "In the end, we decided to go out of process. This is still an issue in PowerShell 7.0.1 though.",
      "created_at": "2020-05-18T06:25:16Z",
      "updated_at": "2020-05-18T06:25:16Z"
    },
    {
      "author": "leonardder",
      "author_association": "NONE",
      "body": "This issue is stale and as the process is discouraged, closing this.",
      "created_at": "2022-07-14T13:25:42Z",
      "updated_at": "2022-07-14T13:25:42Z"
    }
  ],
  "created_at": "2020-03-04T07:50:27Z",
  "number": 11997,
  "state": "closed",
  "title": "Windows PowerShell compatibility doesn't work when running impersonated",
  "updated_at": "2022-07-14T13:25:42Z"
}