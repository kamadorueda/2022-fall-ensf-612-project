{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8280",
  "author": "mklement0",
  "body": "<sup>Related: #6989, #8129, #3831</sup>\r\n\r\nNote: \r\n* This issue probably has little real-world impact, and probably comes down to just _documenting_ the current behavior, but before I create a docs issue, I'd like to understand the backstory.\r\n\r\nThanks to sleuthing by @PetSerAl, two aspects of hashtable behavior came to light:\r\n\r\n* Key lookups are culture-_sensitive_, i.e., use the _current_ culture, as opposed to the _invariant_ culture that is used in most other contexts.\r\n\r\n* The culture used for lookups (as specified during hashtable construction) is _locked in at session startup-time_, because _cached_ culture information is used.\r\n\r\nSee: https://github.com/PowerShell/PowerShell/blob/877b9a9fbf0bed3876de3c00ff34525aba96c749/src/System.Management.Automation/engine/parser/Compiler.cs#L5694-L5696\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nFrom a session in which culture `tr-TR` (Turkey) was in effect _at session startup time_  - e.g., on Unix, start the session with `bash -c 'LANG=tr-TR pwsh'`, run the following:\r\n\r\n```powershell\r\n@{ i = 'yes' }.I; 'i' -eq 'I'\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nyes\r\nTrue\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nTrue\r\n```\r\n\r\nThat is, the hashtable lookup didn't succeed, because in the Turkish culture `I` is _not_ the uppercase equivalent of `i`.\r\n\r\nBy contrast, `-eq`, due to being culture-_invariant_, reported `$True`.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core 6.2.0-preview.1\r\n```\r\n",
  "closed_at": "2020-02-15T22:53:53Z",
  "comments": [
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "This is related to https://github.com/PowerShell/PowerShell/issues/7761.\r\n\r\nI think there is desire for culture invariant or even just ordinal case-insensitive comparison, but it needs to not break cultures like tr-TR.\r\n\r\nAnother discussion thread: https://github.com/dotnet/roslyn/issues/29938.",
      "created_at": "2018-11-15T19:15:06Z",
      "updated_at": "2018-11-15T19:15:06Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @rjmholt - interesting stuff. \r\n\r\nThe larger question here is why hashtables were chosen to exhibit _any_ culture-sensitivity, given that in many contexts it is the invariant culture that is applied (I've tried to provide an overview in [this SO answer](https://stackoverflow.com/a/37603732/45375)).\r\n\r\n>  it needs to not break cultures like tr-TR.\r\n\r\nNote that `-eq` already \"breaks\" tr-TR (as shown above), and always has, due to its culture-invariant behavior.\r\nGiven that `-eq` is conceptually closely related to determining key equality in hashtable lookups, you'd expect the latter to work the same.\r\n",
      "created_at": "2018-11-15T19:56:16Z",
      "updated_at": "2018-11-15T19:56:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 It seems the issue was fixed.",
      "created_at": "2020-02-15T20:01:57Z",
      "updated_at": "2020-02-15T20:01:57Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @iSazonov; it was fixed by switching to _ordinal_  string comparisons for lookup:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/1e5655b48cdad707ee3678435c4b587c0856a35c/src/System.Management.Automation/engine/parser/Compiler.cs#L6442-L6444",
      "created_at": "2020-02-15T22:53:53Z",
      "updated_at": "2020-02-15T22:53:53Z"
    }
  ],
  "created_at": "2018-11-15T19:04:48Z",
  "labels": [
    "Issue-Discussion",
    "Resolution-Fixed"
  ],
  "number": 8280,
  "state": "closed",
  "title": "Hashtable key lookups are unexpectedly culture-sensitive, don't recognize in-session culture changes",
  "updated_at": "2020-02-16T07:42:00Z"
}