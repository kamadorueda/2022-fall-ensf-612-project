{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10712",
  "author": "felixfbecker",
  "body": "# Summary of the new feature/enhancement\r\n\r\n<!-- \r\nA clear and concise description of what the problem is that the new feature would solve.\r\nTry formulating it in user story style (if applicable):\r\n'As a user I want X so that Y.' with X being the being the action and Y being the value of the action.\r\n-->\r\nTimeSpans have all arithmetic operators defined on them (addition, subtraction, division, multiplication, equality, greater/less than). However, `Measure-Object` only works on numbers. If you pipe a `TimeSpan` to it, it will error with\r\n\r\n```\r\nmeasure-object : Input object \"00:00:00\" is not numeric.\r\n```\r\n\r\nIt would be very useful if `Measure-Object` could work on `TimeSpan` objects too.\r\nExample use case: Measure the time spent in meetings today and their average duration:\r\n\r\n```powershell\r\nGet-GSCalendarEvent -TimeMin (Get-Date).Date -TimeMax (Get-Date).Date.AddDays(1) -SingleEvents |\r\n  ForEach-Object { $_.End.DateTime - $_.Start.DateTime } |\r\n  Measure-Object -AllStats\r\n\r\nCount             : 3\r\nAverage           : 1:00:00\r\nSum               : 3:00:00\r\nMaximum           : 2:00:00\r\nMinimum           : 0:30:00\r\nStandardDeviation : 0:30:00\r\nProperty          :\r\n```\r\n\r\nCurrently, this is more cumbersome:\r\n\r\n```powershell\r\nGet-GSCalendarEvent -TimeMin (Get-Date).Date -TimeMax (Get-Date).Date.AddDays(1) -SingleEvents |\r\n  ForEach-Object { $_.End.DateTime - $_.Start.DateTime } |\r\n  ForEach-Object { $s = New-TimeSpan } { $s += $_ } { $s }\r\n```\r\n\r\nAnd this only gets you the sum. All the other stats require way more code.\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Possible ways:\r\n1. Implement specific code path for TimeSpan. But there would be other types with full arithmetic operations which we would want support. Also it duplicates code.\r\n2. Use `dynamic` type. This can noticeably slow down the code.\r\n3. Use Expression.Lambda. It seems not so easy to implement.",
      "created_at": "2019-10-07T10:52:18Z",
      "updated_at": "2019-10-07T10:52:18Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> 3. Use Expression.Lambda. It seems not so easy to implement.\r\n\r\nThat might not be that bad actually.  Most of the logic for that is already in [Where-Object](https://github.com/PowerShell/PowerShell/blob/c08c7e4714e6822029f8741c3121bb9e1c4fd2b3/src/System.Management.Automation/engine/InternalCommands.cs#L1963-L1967). All that should be needed to do is replace the expression type parameter with a hard coded `ExpressionType.Add` value and use that delegate when totaling.",
      "created_at": "2019-10-08T13:20:07Z",
      "updated_at": "2019-10-08T13:20:07Z"
    }
  ],
  "created_at": "2019-10-05T11:09:10Z",
  "labels": [
    "Issue-Enhancement",
    "Up-for-Grabs",
    "Hacktoberfest",
    "WG-Cmdlets-Utility"
  ],
  "number": 10712,
  "state": "open",
  "title": "Measure-Object should support TimeSpan",
  "updated_at": "2019-10-08T13:20:07Z"
}