{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3561",
  "author": "kellypleahy",
  "body": "<!--\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](../docs/FAQ.md).\r\n- Refer to the [known issues](../docs/KNOWNISSUES.md).\r\n- Fill out the following repro template\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\n1. create a custom prompt function in your profile.  A good choice is the one at the end of here:\r\nhttps://msdn.microsoft.com/powershell/reference/5.1/Microsoft.PowerShell.Core/about/about_Prompts\r\n2. run powershell\r\n3. you should see the prompt get written twice on the command line.  This is problematic for prompts that do \"interesting\" things like those on poshgit, etc.  (my real function is given below at the end of this issue).\r\n\r\nExpected behavior\r\n-----------------\r\nPrompt function should only run once, otherwise functions that do \"Write-Host\" will do bad things.\r\n\r\nActual behavior\r\n---------------\r\nPrompt function appears to run twice.  Once it seems the output is kept, the other time it seems to be ignored.\r\n\r\nBy the way... the reason I say this is \"on linux\" is that running the same version of PS on my desktop machine in windows gave different (expected) results.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value                                                                                                                                                          \r\n----                           -----                                                                                                                                                          \r\nPSVersion                      6.0.0-alpha                                                                                                                                                    \r\nPSEdition                      Core                                                                                                                                                           \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                                                                                        \r\nBuildVersion                   3.0.0.0                                                                                                                                                        \r\nGitCommitId                    v6.0.0-alpha.18                                                                                                                                                \r\nCLRVersion                                                                                                                                                                                    \r\nWSManStackVersion              3.0                                                                                                                                                            \r\nPSRemotingProtocolVersion      2.3                                                                                                                                                            \r\nSerializationVersion           1.1.0.1                                                                                                                                                        \r\n```\r\n\r\n\r\nMy Custom Prompt\r\n-----------------------\r\n```powershell\r\nfunction prompt\r\n{\r\n  $realLASTEXITCODE = $LASTEXITCODE\r\n  $Host.UI.RawUI.ForegroundColor = \"White\"\r\n\r\n  Write-Host \"\"\r\n  $status_string = \"\"\r\n  $branch_distance = \"\"\r\n  # check to see if this is a directory containing a symbolic reference,\r\n  # fails (gracefully) on non-git repos.\r\n  $git_folder = _find_folder_above (get-item -force .) \".git\"\r\n  $git_color = \"yellow\"\r\n  if($git_folder -ne $null)\r\n  {\r\n    $g = $git_folder.fullname\r\n    $symbolicref = git symbolic-ref HEAD\r\n    $current_hash = git log HEAD -n 1 --format='%h'\r\n    $branch_name = \"no branch\"\r\n    if($current_hash -ne $null)\r\n    {\r\n        $current_hash = \"[\" + $current_hash.substring(0, 7) + \"]\"\r\n    }\r\n    if($symbolicref -ne $null)\r\n    {\r\n      $branch_name = $symbolicref.substring($symbolicref.LastIndexOf(\"heads/\") + 6)\r\n      $branch_distance = _git_branch_vs_remote $branch_name\r\n      if($branch_distance.length -gt 0) {\r\n        $branch_distance = \" (\" + $branch_distance + \")\"\r\n      } else {\r\n        $branch_distance = \" (up to date)\"\r\n      }\r\n    }\r\n    elseif(test-path \"$g\\rebase-merge\\interactive\")\r\n    {\r\n      $branch_name = split-path -leaf (get-content \"$g\\rebase-merge\\head-name\")\r\n      $branch_name += \"|REBASE-i\"\r\n      $git_color = \"red\"\r\n    }\r\n    elseif(test-path \"$g\\rebase-merge\")\r\n    {\r\n      $branch_name = split-path -leaf (get-content \"$g\\rebase-merge\\head-name\")\r\n      $branch_name += \"|REBASE-m\"\r\n      $git_color = \"red\"\r\n    }\r\n    \r\n    # if a symbolic reference exists, snag the last bit as our\r\n    # branch name. eg \"[master]\"\r\n    $status_string += \"GIT $current_hash for [$(git config user.name)] on [$branch_name]\"\r\n    \r\n    if($env:SHOW_GIT_DIFFERENCES -ne \"0\")\r\n    {\r\n      # grab the differences in this branch   \r\n      $differences = (git status --porcelain) \r\n      \r\n      $git_update_count = _count_lines_with_matches \"M\" $differences\r\n      $git_create_count = _count_lines_with_matches \"A\" $differences\r\n      $git_create_count += _count_lines_with_matches \"C\" $differences # treat copy as create (never seen this from git, but git-status(1) indicates it's possible)\r\n      $git_delete_count = _count_lines_with_matches \"D\" $differences\r\n      $git_rename_count = _count_lines_with_matches \"R\" $differences\r\n      $git_unknown_count = _count_lines_with_matches \"?\" $differences\r\n      $git_unknown_count += _count_lines_with_matches \"U\" $differences\r\n      $git_change_count = $git_update_count + $git_create_count + $git_delete_count + $git_unknown_count + $git_rename_count\r\n      \r\n      # place those variables into our string.\r\n      if($git_change_count -eq 0)\r\n      { \r\n        $status_string += \" (clean)\" \r\n      }\r\n      else \r\n      { \r\n        $status_string += \" r:$git_rename_count a:$git_create_count u:$git_update_count d:$git_delete_count ?:$git_unknown_count\" \r\n      }\r\n    }\r\n  }\r\n  else\r\n  {\r\n    # Not in a Git environment, must be PowerShell!\r\n    $status_string = 'PS '\r\n  }\r\n  # write out the status_string with the approprate color.\r\n  # prompt is done!\r\n  if ($status_string.StartsWith('GIT'))\r\n  {\r\n    Write-Host $status_string -foreground $git_color -nonewline\r\n    Write-Host $branch_distance -foreground white -nonewline\r\n    Write-Host ' | '  -foreground $git_color -nonewline\r\n  }\r\n  else\r\n  {\r\n    Write-Host $status_string -foreground Cyan -nonewline\r\n  }\r\n  Write-Host $pwd.ProviderPath -NoNewLine -ForegroundColor Green\r\n  Write-Host \"`n\u03bb \" -NoNewLine -ForegroundColor Green\r\n\r\n  reset-color\r\n  $global:LASTEXITCODE = $realLASTEXITCODE\r\n  return ' '\r\n}\r\n```",
  "closed_at": "2017-04-14T22:15:14Z",
  "comments": [
    {
      "author": "kellypleahy",
      "author_association": "NONE",
      "body": "This seems like it could be the problem ;)\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/master/src/Microsoft.PowerShell.PSReadLine/ReadLine.cs#L562",
      "created_at": "2017-04-14T09:01:48Z",
      "updated_at": "2017-04-14T09:01:48Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Duplicate of https://github.com/lzybkr/PSReadLine/issues/468",
      "created_at": "2017-04-14T22:15:14Z",
      "updated_at": "2017-04-14T22:15:14Z"
    }
  ],
  "created_at": "2017-04-14T08:40:03Z",
  "number": 3561,
  "state": "closed",
  "title": "Prompt runs twice on linux",
  "updated_at": "2017-04-14T22:15:19Z"
}