{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4194",
  "author": "SteveL-MSFT",
  "body": "On Windows, `$env:Path` has Windows PowerShell in the path before `$PSHOME` which means that if you're in PowerShell Core 6 and type `powershell`, it starts Windows PowerShell 5.1 instead of a nested instance of PowerShell Core 6.  This may be unexpected for end users as it seems that one would expect `powershell` to refer to the currently running version of PowerShell.\r\n\r\nThe immediate impact is that partner teams running existing PowerShell script tests in PowerShell Core 6 that spawn `powershell` will get incorrect results as that process is running Windows PowerShell.\r\n\r\ncc @joeyaiello @HemantMahawar \r\n\r\n<!--\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](../docs/FAQ.md).\r\n- Refer to the [known issues](../docs/KNOWNISSUES.md).\r\n- Fill out the following repro template\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n# within PowerShell Core 6\r\npowershell\r\n$psversiontable\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nPowerShell Core 6\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nWindows PowerShell 5.1\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-beta\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-beta.3\r\nOS                             Microsoft Windows 10.0.16225\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2017-08-04T16:23:16Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Maybe Area-SideBySide?",
      "created_at": "2017-07-06T17:53:03Z",
      "updated_at": "2017-07-06T17:53:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If we have some PowerShell versions on system we should think about \"default PowerShell\" and a way to run specific PowerShell version by `-Version` parameter.\r\nA rule may be \"By default Windows PowerShell run Windows PowerShell, PowerShell Core run PowerShell Core\".",
      "created_at": "2017-07-06T17:57:08Z",
      "updated_at": "2017-07-06T17:59:33Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Based on some internal discussions, I think we agree that on Windows, we should put $PSHOME first in $env:PATH rather than at the end.",
      "created_at": "2017-07-06T22:20:09Z",
      "updated_at": "2017-07-06T22:20:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What about to enhance `-Version`?\r\n```powershell\r\npowershell -Version 5.1\r\npowershell -Version 6.0.0\r\npowershell -Version 6.0.0-Beta.4\r\npowershell -Version UserDefault\r\npowershell -Version SystemDefault\r\n```",
      "created_at": "2017-07-07T04:35:23Z",
      "updated_at": "2017-07-07T04:35:23Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov I think you should open a separate issue to discuss that",
      "created_at": "2017-07-07T17:19:25Z",
      "updated_at": "2017-07-07T17:19:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Done #4199 ",
      "created_at": "2017-07-07T18:12:21Z",
      "updated_at": "2017-07-07T18:12:21Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT: other implications of this worry me. E.g. it might mean that anyone who can write to $PSHome can now squat over system binaries from within PowerShell. Let's talk offline. ",
      "created_at": "2017-07-10T18:13:11Z",
      "updated_at": "2017-07-10T18:13:11Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "In my own opinion, we should kept then separately.  As soon the PowerShell Core installation overrides any of the existing Windows variables over the Windows PowerShell it could open issues across the board. \r\n\r\n:)\r\n",
      "created_at": "2017-07-10T18:59:38Z",
      "updated_at": "2017-07-10T18:59:38Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@joeyaiello PSCore6 implicitly trusts binaries in $PSHome so that folder needs to be secure regardless.  The only change being proposed here is to move $PSHome to front of $env:Path (at the process level, not system or user setting) instead of the end so that it takes precedence over Windows PowerShell path. ",
      "created_at": "2017-07-13T17:56:58Z",
      "updated_at": "2017-07-13T17:56:58Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "If we decide to do https://github.com/PowerShell/PowerShell/issues/4214, we don't need to address this one",
      "created_at": "2017-07-13T21:15:10Z",
      "updated_at": "2017-07-13T21:15:10Z"
    }
  ],
  "created_at": "2017-07-06T17:00:10Z",
  "labels": [
    "OS-Windows",
    "Area-SideBySide",
    "Resolution-Fixed"
  ],
  "number": 4194,
  "state": "closed",
  "title": "Calling powershell.exe in PSCore6 on Windows starts Windows PowerShell",
  "updated_at": "2017-08-06T17:02:27Z"
}