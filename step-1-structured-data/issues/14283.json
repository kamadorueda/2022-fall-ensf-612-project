{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14283",
  "author": "iSazonov",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nAt startup we create a temp file with name based on `Datetime.Now.ToString()`.\r\nIt is very slow - ~14ms.\r\nWe have no need to use human date format for the temp file.\r\n\r\nThe fix is to use ~~Datetime.UtcNow().Ticks.ToString()~~ `Environment.TickCount64`:\r\n- `Environment.TickCount64` is significantly faster Datetime.Now() - it is intrinsic and no need to evaluate _local_ time.\r\n- Ticks is long type and Environment.TickCount64.ToString() is very fast. Datetime.ToString() is slow because it involves Calendar.\r\n\r\nPerf win is ~10-30 ms.\r\n\r\nBefore\r\n![image](https://user-images.githubusercontent.com/22290914/100525286-4762ec00-31e1-11eb-8b64-7bde95efd6b1.png)\r\n\r\nAfter\r\n![image](https://user-images.githubusercontent.com/22290914/100525299-63668d80-31e1-11eb-863b-90bd886763ca.png)\r\n\r\n## PR Context\r\n\r\nTracking issue #14268\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-12-04T17:24:43Z",
  "comments": [
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "> It is very slow - ~14ms.\r\n\r\nIs this a release build?\r\n\r\nRunning a microbenchmark, `Datetime.Now.ToString()` takes ~1us!",
      "created_at": "2020-11-29T17:03:03Z",
      "updated_at": "2020-11-29T17:03:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> > It is very slow - ~14ms.\r\n> \r\n> Is this a release build?\r\n> \r\n> Running a microbenchmark, `Datetime.Now.ToString()` takes ~1us!\r\n\r\nYes, it is release build. And it is startup scenario - **cold** start (.Net runtime loads Calendar data from OS and initializes internal structures - you can see this in attached trace file.). If you run BenchmarkDotNet it is **warm** start.",
      "created_at": "2020-11-29T17:37:39Z",
      "updated_at": "2020-11-29T17:37:39Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.2.0-preview.2` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0-preview.2)\n",
      "created_at": "2020-12-15T21:38:26Z",
      "updated_at": "2020-12-15T21:38:26Z"
    }
  ],
  "created_at": "2020-11-28T20:23:14Z",
  "number": 14283,
  "state": "closed",
  "title": "Speedup InitialSessionState..cctor()",
  "updated_at": "2020-12-15T21:38:26Z"
}