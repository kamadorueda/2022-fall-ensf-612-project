{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10179",
  "author": "asrosent",
  "body": "hey guys,\r\n\r\nas par with #8121 , it seems like the Microsoft.Powershell.SDK nuget is missing the \"Microsoft.Powershell.ConsoleHost.dll\"reference assembly\r\n\r\nIs this intended or should be fixed?\r\n\r\nThanks!",
  "closed_at": "2019-07-21T00:00:22Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @adityapatwardhan ",
      "created_at": "2019-07-18T07:27:33Z",
      "updated_at": "2019-07-18T07:27:33Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@asrosent The console host was never intended to be part of the API. It was expected that host implementers would implement _all_ of the host classes. That said, there are two aspects to the console host - the host itself and the set of services provided to the running script through `$PSHost`. The latter is definitely useful/reuseable by _other_ console hosts even if the former is not. (We never really expected anyone would write another console host. Clearly we were wrong :-)  Interestingly, there are Win32 things that work in the console host that do not work in the PowerShell API:\r\n```powershell\r\n [powershell]::create().AddCommand(\"notepad\").Invoke()\r\n```\r\nhangs where\r\n```powershell\r\nnotepad\r\n```\r\ndoes not. In practice there is a complex bit of logic (I know it's complex because i wrote it.) that the console host uses on Windows to detect when a GUI process should automatically go into the background. It would be nice if that logic was projected into the API.",
      "created_at": "2019-07-19T05:01:20Z",
      "updated_at": "2019-07-19T05:01:20Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> @asrosent The console host was never intended to be part of the API.\r\n\r\nWhat about `ConsoleShell`, `StartTranscriptCommand` and `StopTranscriptCommand`?",
      "created_at": "2019-07-19T12:11:55Z",
      "updated_at": "2019-07-19T12:11:55Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@SeeminglyScience \r\n\r\nBack at the BOT (beginning of time), the console host implementation was not intended to be part of the API. In fact `StartTranscriptCommand` and `StopTranscriptCommand` are officially not APIs as they derive from `PSCmdlet` not `Cmdlet`.  But things evolve. For myself, I would love to see more of the console functionality exposed through the APIs. Now wrt the Std API. I believe it only contains things that are universal. But i don't really remember all that clearly. @JamesWTruher should be able to answer more authoritatively. ",
      "created_at": "2019-07-19T17:46:44Z",
      "updated_at": "2019-07-19T17:46:44Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2019-07-21T00:00:21Z",
      "updated_at": "2019-07-21T00:00:21Z"
    }
  ],
  "created_at": "2019-07-18T05:53:41Z",
  "labels": [
    "Issue-Question",
    "Area-Maintainers-Build",
    "Resolution-Answered"
  ],
  "number": 10179,
  "state": "closed",
  "title": "Microsoft.Powershell.SDK does not include \"Microsoft.Powershell.ConsoleHost.dll\" reference assembly",
  "updated_at": "2019-07-21T00:00:22Z"
}