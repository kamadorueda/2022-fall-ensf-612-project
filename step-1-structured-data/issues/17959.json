{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17959",
  "author": "dkaszews",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nContinued discussion from https://github.com/PowerShell/PowerShell/issues/17911\r\n\r\nCompound assignment operators (e.g. `+=`, `-=`, `*=`) behave weirdly when operating on non-existent variables in dynamic scope, e.g. functions. This is even when using `Set-StrictMode -Version 3.0` which does protect against most other undefined variable uses:\r\n\r\n```pwsh\r\n> Set-StrictMode -Version 3.0\r\n> function Test-Increment { $x++; $x }\r\n> Test-Increment\r\nInvalidOperation: The variable '$x' cannot be retrieved because it has not been set.\r\nInvalidOperation: The variable '$x' cannot be retrieved because it has not been set.\r\n\r\n> function Test-Assign { $x = $x + 1; $x }\r\n> Test-Assign\r\nInvalidOperation: The variable '$x' cannot be retrieved because it has not been set.\r\n\r\n> function Test-CompoundAssign { $x += 1; $x }\r\n> Test-CompoundAssign\r\n1\r\n```\r\n\r\nDo note that it only happens in dynamic scope, as in regular prompt all of those statements are caught:\r\n```pwsh\r\n> $x++; $x\r\nInvalidOperation: The variable '$x' cannot be retrieved because it has not been set.\r\nInvalidOperation: The variable '$x' cannot be retrieved because it has not been set.\r\ndkaszews@Cuddles-Berry:~/Downloads\r\n\r\n> $x = $x + 1; $x\r\nInvalidOperation: The variable '$x' cannot be retrieved because it has not been set.\r\nInvalidOperation: The variable '$x' cannot be retrieved because it has not been set.\r\n\r\n> $x += 1; $x\r\nInvalidOperation: The variable '$x' cannot be retrieved because it has not been set.\r\nInvalidOperation: The variable '$x' cannot be retrieved because it has not been set.\r\n```\n\n### Expected behavior\n\n```console\n> function Test-CompoundAssign { $x += 1; $x }\r\n> Test-CompoundAssign\r\nInvalidOperation: The variable '$x' cannot be retrieved because it has not been set.\n```\n\n\n### Actual behavior\n\n```console\n> function Test-CompoundAssign { $x += 1; $x }\r\n> Test-CompoundAssign\r\n1\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.3.0-preview.3\r\nPSEdition                      Core\r\nGitCommitId                    7.3.0-preview.3-304-gd02c59addc24e13da3b8ee5e1a8e7aa27e00c745\r\nOS                             Linux 5.15.0-1013-raspi #15-Ubuntu SMP PREEMPT Mon Aug 8 06:33:06 UTC 2022\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "Proposed solution is to create a new `Set-StrictMode -Version 4.0` to avoid any breaking changes.",
      "created_at": "2022-08-24T16:19:31Z",
      "updated_at": "2022-08-24T16:19:31Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "I have 6 test cases:\r\n```pwsh\r\n$notexist = $notexist + 1       # Global =+\r\n$notexist++                     # Global ++\r\n$notexist += 1                  # Global +=\r\n&{ $notexist = $notexist + 1 }  # Dynamic =+\r\n&{ $notexist++ }                # Dynamic ++\r\n&{ $notexist += 1 }             # Dynamic +=\r\n```\r\n\r\nI found a location where the 5 of 6 cases check strict mode: `sessionState.GetVariableItem(variablePath, out scope, origin);` in `VariableOps. GetVariableValue(VariablePath variablePath, ExecutionContext executionContext, VariableExpressionAst varAst)` return null, which triggers `ThrowStrictModeUndefinedVariable(executionContext, varAst)`. All global cases have identical callstack, the two working dynamic cases are also identical to each other and share top 9 functions of the global case.\r\n\r\nBut the failing dynamic += has completely different callstack, and does not even look for `$notexist` but for `$lastError`, probably completely unrelated but instead part of regular cleanup - confirmed by running `$x = 0; $x += 1` and still seeing `$lastError` lookup. So dynamic `+=` uses completely different codepath, that I am having trouble tracking down.",
      "created_at": "2022-09-02T15:40:44Z",
      "updated_at": "2022-09-02T15:40:44Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "Can someone please point me where are dynamic scope variables set? The global ones use `SessionStateInternal` but I can't find where dynamic ones are - `&{ $var = 1 }` does not trigger any of my breakpoints.",
      "created_at": "2022-09-02T16:20:43Z",
      "updated_at": "2022-09-02T16:20:43Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Can someone please point me where are dynamic scope variables set? The global ones use `SessionStateInternal` but I can't find where dynamic ones are - `&{ $var = 1 }` does not trigger any of my breakpoints.\r\n\r\nYeah in \"optimized\" (not dot sourced and a few other things) code, a local is simply a property on an internal mutable tuple class. Probably won't hit any breakpoints period. Here's an example of what that code gen looks like (scroll until you see the comment):\r\n\r\n\r\n```csharp\r\n// ScriptBlock.EndBlock\r\n(FunctionContext funcContext) =>\r\n{\r\n    try\r\n    {\r\n        ExecutionContext context = funcContext._executionContext;\r\n        MutableTuple<object, object[], object, object, PSScriptCmdlet, PSBoundParametersDictionary, InvocationInfo, string, string, object, LanguagePrimitives.Null, LanguagePrimitives.Null, LanguagePrimitives.Null, LanguagePrimitives.Null, LanguagePrimitives.Null, LanguagePrimitives.Null> locals = (MutableTuple<object, object[], object, object, PSScriptCmdlet, PSBoundParametersDictionary, InvocationInfo, string, string, object, LanguagePrimitives.Null, LanguagePrimitives.Null, LanguagePrimitives.Null, LanguagePrimitives.Null, LanguagePrimitives.Null, LanguagePrimitives.Null>)funcContext._localsTuple;\r\n        funcContext._functionName = \"<ScriptBlock>\";\r\n        funcContext._currentSequencePointIndex = 0;\r\n        context._debugger.EnterScriptFunction(funcContext);\r\n        try\r\n        {\r\n            funcContext._currentSequencePointIndex = 1;\r\n\r\n            if (context._debuggingMode > 0)\r\n            {\r\n                context._debugger.OnSequencePointHit(funcContext);\r\n            }\r\n\r\n            // !! - This is the assignment\r\n            locals.Item009 = 1;\r\n            // !! - Back to boiler plate\r\n            context.QuestionMarkVariableValue = true;\r\n        }\r\n        catch (FlowControlException)\r\n        {\r\n            throw;\r\n        }\r\n        catch (Exception exception)\r\n        {\r\n            ExceptionHandlingOps.CheckActionPreference(funcContext, exception);\r\n        }\r\n        funcContext._currentSequencePointIndex = 2;\r\n\r\n        if (context._debuggingMode > 0)\r\n        {\r\n            context._debugger.OnSequencePointHit(funcContext);\r\n        }\r\n    }\r\n    finally\r\n    {\r\n        context._debugger.ExitScriptFunction();\r\n    }\r\n}\r\n```",
      "created_at": "2022-10-17T17:15:20Z",
      "updated_at": "2022-10-17T17:15:20Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "@SeeminglyScience I don't get it, why is it generated code? Are PowerShell functions precompiled to .NET functions instead of interpreted on the fly? Does it mean that the fix needs to deal with the generator code? ",
      "created_at": "2022-10-17T17:54:32Z",
      "updated_at": "2022-10-17T17:54:32Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> @SeeminglyScience I don't get it, why is it generated code? Are PowerShell functions precompiled to .NET functions instead of interpreted on the fly? Does it mean that the fix needs to deal with the generator code?\r\n\r\nNot precompiled no, but they are \"just-in-time\" compiled. It would be a change in the compiler that would need to happen, but I'd recommend letting the Engine WG discuss it before working on it as it has the same potential breaks as #17911 ",
      "created_at": "2022-10-17T18:25:55Z",
      "updated_at": "2022-10-17T18:25:55Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "@SeeminglyScience Thanks for explanation, differences between JIT and precompilation are not really relevant here. It's really interesting that the exact same expression can be either interpreted or JIT compiled depending on context, resulting in completely different code flow. Is there some good place to start reading (code, tests, docs, anything) how PowerShell JIT works? I'd like to learn it regardless of how this issue goes. ",
      "created_at": "2022-10-17T18:33:01Z",
      "updated_at": "2022-10-17T18:33:01Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "So interpretation vs jitted isn't actually the difference here. The difference is whether the compiler is marked as \"optimized\". In unoptimized mode (dot sourced, debugging, a few other things) the compiler generates different expressions for variable accesses. The easiest way to see the difference is by grabbing [`ScriptBlockDisassembler`](https://github.com/SeeminglyScience/ScriptBlockDisassembler).\r\n\r\n<details>\r\n\r\n<summary>(Click to see disassembly)\r\n\r\n```powershell\r\n{ $var = 10 } | Get-ScriptBlockDisassembly -Unoptimized -Minimal\r\n```\r\n\r\n</summary>\r\n\r\n```csharp\r\n// ScriptBlock.UnoptimizedEndBlock\r\ntry\r\n{\r\n    VariableOps.SetVariableValue(\r\n        Fake.Const<VariablePath>(\"var\"),\r\n        10,\r\n        context,\r\n        (AttributeAst[])null);\r\n}\r\ncatch (FlowControlException)\r\n{\r\n    throw;\r\n}\r\ncatch (Exception exception)\r\n{\r\n    ExceptionHandlingOps.CheckActionPreference(funcContext, exception);\r\n}\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n\r\n<summary>(Click to see disassembly)\r\n\r\n```powershell\r\n# Optimized is the default\r\n{ $var = 10 } | Get-ScriptBlockDisassembly -Minimal\r\n```\r\n\r\n</summary>\r\n\r\n```csharp\r\n// ScriptBlock.EndBlock\r\ntry\r\n{\r\n    locals.Item009 = 10;\r\n}\r\ncatch (FlowControlException)\r\n{\r\n    throw;\r\n}\r\ncatch (Exception exception)\r\n{\r\n    ExceptionHandlingOps.CheckActionPreference(funcContext, exception);\r\n}\r\n```\r\n\r\n</details>\r\n\r\nThis happens both when interpreted and when jitted. afaik there are zero behavioral differences between the two other than speed.",
      "created_at": "2022-10-17T18:46:08Z",
      "updated_at": "2022-10-17T18:46:08Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Proposed solution is to create a new `Set-StrictMode -Version 4.0` to avoid any breaking changes.\r\n\r\nI do also want to note that this isn't exactly the easy solution it seems to be off the bat. Every time a new version is added, it splinters into a new dialect which needs to be tested separately. It's a high maintenance burden that needs significant value-add to be considered.",
      "created_at": "2022-10-17T18:50:56Z",
      "updated_at": "2022-10-17T18:50:56Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "I run the test cases through disassembler, here's what I got:\r\n\r\n1. `$notexist = $notexist + 1`\r\n    ```csharp\r\n    locals.Item009 = Fake.Dynamic<Func<CallSite, object, object>>(PSVariableAssignmentBinder.Get())(\r\n        Fake.Dynamic<Func<CallSite, object, int, object>>(PSBinaryOperationBinder.Get(ExpressionType.Add, ignoreCase: true,scalarCompare: false))(\r\n            VariableOps.GetVariableValue(\r\n                Fake.Const<VariablePath>(\"notexists\"),\r\n                context,\r\n                Fake.Const<VariableExpressionAst>(\"$notexists\")),\r\n            1));\r\n    ```\r\n1. `$notexist++`\r\n    ```csharp\r\n    object @object = VariableOps.GetVariableValue(\r\n        Fake.Const<VariablePath>(\"notexists\"),\r\n        context,\r\n        Fake.Const<VariableExpressionAst>(\"$notexists\"));\r\n    VariableOps.SetVariableValue(\r\n        Fake.Const<VariablePath>(\"notexists\"),\r\n        Fake.Dynamic<Func<CallSite, object, object>>(PSUnaryOperationBinder.Get(ExpressionType.Increment))(@object),\r\n        context,\r\n        (AttributeAst[])null);\r\n\r\n    return (@object == null) ? 0 : @object;\r\n    ```\r\n\r\n1. `$notexist += 1`\r\n    ```csharp\r\n    locals.Item009 = Fake.Dynamic<Func<CallSite, object, object>>(\r\n        PSVariableAssignmentBinder.Get())(\r\n        Fake.Dynamic<Func<CallSite, object, int, object>>(\r\n            PSBinaryOperationBinder.Get(\r\n                ExpressionType.Add,\r\n                ignoreCase: true,\r\n                scalarCompare: false))(\r\n            locals.Item009,\r\n            1));\r\n    ```\r\n\r\nFor `-Unoptimized`, all three generate roughly the same disassembly (only difference that `++` has some extra preamble and return, probably because it's an expression with a return value):\r\n\r\n```csharp\r\nVariableOps.SetVariableValue(\r\n    Fake.Const<VariablePath>(\"notexists\"),\r\n    Fake.Dynamic<Func<CallSite, object, int, object>>(PSBinaryOperationBinder.Get(ExpressionType.Add, ignoreCase: true,scalarCompare: false))(\r\n        VariableOps.GetVariableValue(\r\n            Fake.Const<VariablePath>(\"notexists\"),\r\n            context,\r\n            Fake.Const<VariableExpressionAst>(\"$notexists\")),\r\n        1),\r\n    context,\r\n    (AttributeAst[])null);\r\n```\r\n\r\nThis clearly shows that optimized `+=` is the only case which skips getting the variable altogether, instead using `PSBinaryOperationBinder` and passing uninitialized (default initialized?) `local.Item009` to it.",
      "created_at": "2022-10-17T19:38:35Z",
      "updated_at": "2022-10-17T19:39:53Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> This clearly shows that optimized `+=` is the only case which skips getting the variable altogether, instead using `PSBinaryOperationBinder` and passing uninitialized (default initialized?) `local.Item009` to it.\r\n\r\nIt does still use the binder, it doesn't use `VariableOps.GetVariableValue`. Basically `notexist` is incorrectly marked as a local too soon and therefore it does not look for it in other scopes. That's the difference that was previously deemed too likely to break to be fixed :/",
      "created_at": "2022-10-17T19:48:53Z",
      "updated_at": "2022-10-17T19:48:53Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "@SeeminglyScience You're confusing this issue with https://github.com/PowerShell/PowerShell/issues/17911 . The problem this issue is trying to resolve is not the scope of the variable, but the fact that it is not checked for existence at all.",
      "created_at": "2022-10-17T20:08:54Z",
      "updated_at": "2022-10-17T20:08:54Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> @SeeminglyScience You're confusing this issue with #17911 . The problem this issue is trying to resolve is not the scope of the variable, but the fact that it is not checked for existence at all.\r\n\r\nThe root of the issue is the same though. It's not checked if it exists because it's marked as a local variable that is assigned in the current code block prior to usage. Same bug, manifested differently.",
      "created_at": "2022-10-17T21:02:12Z",
      "updated_at": "2022-10-17T21:02:37Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> Proposed solution is to create a new `Set-StrictMode -Version 4.0` to avoid any breaking changes.\r\n\r\nThis won't prevent the breaking change, because most of time, a user will use `Set-StrictMode -Version latest`.",
      "created_at": "2022-10-17T22:35:12Z",
      "updated_at": "2022-10-17T22:35:12Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "@daxian-dbw Strongly disagree. First, do you have any data to back up that claim? Second of all, documentation clearly states that `Latest` is not recommended for any production code, as you are explicitly opting into breaking changes.",
      "created_at": "2022-10-18T07:06:44Z",
      "updated_at": "2022-10-18T07:06:44Z"
    }
  ],
  "created_at": "2022-08-24T16:17:06Z",
  "number": 17959,
  "state": "open",
  "title": "Compound assignment operators don't obey StrictMode in dynamic scope",
  "updated_at": "2022-10-18T07:06:44Z"
}