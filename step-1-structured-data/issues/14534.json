{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14534",
  "author": "mklement0",
  "body": "Note: I'm writing this bug report from the perspective of the green-lit proposal to interpret `-Target` arguments as _literal_ (verbatim) paths - see #13136. Perhaps these two issues can be tackled together.\r\n\r\nBy contrast, in _Windows PowerShell_ you must _escape_ paths that _look like_ wildcard patterns, i.e. paths that contain `[` and `]`.\r\nUsing this escaping as of PowerShell _Core_ in 7.2.0-preview.2 doesn't work either, however, because the _escaped_ path, while recognized as an existing item, is them mistakenly used _verbatim_ as the link's target, resulting in a broken link.\r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\nPush-Location ($tempDir = New-Item -Type Directory -Force \"temp:/$PID\")\r\n\r\ntry\r\n{\r\n\r\n  # Use a file name with '[' and ']' - without that, the test would succeed.\r\n  $target = Join-Path $pwd.ProviderPath '[1] file.txt'\r\n\r\n  # Create the file.\r\n  $null = New-Item -Path $target -Value hi -Force\r\n\r\n  # Try to create a symlink named 'lnk' in subdir. 'sub' (to be created on demand\r\n  # with -Force) pointing to the newly created file.\r\n  # Note:\r\n  #  If ([WildcardPattern]::Escape($target)) is used to escape the path,\r\n  #  the command *seemingly* succeeds, but the *escaped* path is mistakenly\r\n  #  used *verbatim* as the target, quietly resulting in a *broken link*.\r\n  { New-Item -ErrorAction Stop -Path sub/lnk -Type SymbolicLink -Force -Target $target } |\r\n    Should -Not -Throw\r\n\r\n} finally {\r\n\r\n  Pop-Location\r\n  Remove-Item -ErrorAction Ignore -LiteralPath $tempDir -Recurse -Force\r\n\r\n}\r\n```\r\n\r\n## Expected behavior\r\n\r\nThe test should succeed.\r\n\r\n## Actual behavior\r\n\r\nThe test fails, because (by design _unescaped_) `$target` isn't recognized as an existing item, even though the error message correctly lists the path:\r\n\r\n```none\r\n...\r\nCannot find path '.../[1] file.txt' because it does not exist.\r\n...\r\n```\r\n\r\n## Environment data\r\n\r\n```none\r\nPowerShell Core 7.2.0-preview.2\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "abaumgaertner",
      "author_association": "NONE",
      "body": "workaround: New-Item -Type Directory -Target [WildcardPattern]::Escape('abcd [bla]')\r\nsimilar issues: #6232",
      "created_at": "2021-04-05T18:29:23Z",
      "updated_at": "2021-04-05T18:29:23Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @abaumgaertner, you probably meant\r\n`New-Item -Type SymbolicLink foo -Target ([WildcardPattern]::Escape('abcd [bla]'))` (wrong type, missing (`(...)`), but, as stated in the initial post, this doesn't actually work:\r\n\r\n* The command _seemingly_ succeeds,\r\n* but the resulting symlink is _broken_, because the _escaped_ name is used _verbatim_  as the target path.\r\n\r\n\r\n",
      "created_at": "2021-04-05T18:49:35Z",
      "updated_at": "2021-04-05T18:49:35Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@OctaneTwisted found that escaping twice(!) is an effective workaround: https://github.com/PowerShell/PowerShell/issues/6232#issuecomment-813860059",
      "created_at": "2021-04-06T07:21:53Z",
      "updated_at": "2021-04-06T07:25:51Z"
    }
  ],
  "created_at": "2021-01-03T17:28:43Z",
  "number": 14534,
  "state": "open",
  "title": "New-Item -Target parameter mishandles paths that look like wildcard patterns when creating symbolic links / reparse points",
  "updated_at": "2021-12-01T07:18:50Z"
}