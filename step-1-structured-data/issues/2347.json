{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2347",
  "author": "jianyunt",
  "body": "# Problem\n\nIt is observed that PowerShell core is loading assembles from its installed folder first (e.g. PowerShell\\6.0.0.10) if exists, even if ipmo with a full path.  For most cases, this behavior seems to be ok.  However for the PackageManagement, we need to allow users to update the PackageManagement via install-module.  The updated binaries will be installed under PowerShell\\6.0.0.10\\Modules\\PackageManagement.  But these updated assemblies won't get loaded because PowerShell loads the built-in PackageManagement assemblies first. \n# Proposed Solution\n\nWhen packaging the next alpha release, PackageManagment binaries should be installed under  PowerShell\\6.0.0.10\\Modules\\PackageManagement\\ folder instead of root  PowerShell\\6.0.0.10\\ folder.\n\nFYI:\nOneGet  assemblies including .dlls/.ni.dlls:\n\nMicrosoft.PackageManagement.ArchiverProviders\nMicrosoft.PackageManagement.CoreProviders\nMicrosoft.PackageManagement\nMicrosoft.PackageManagement.MetaProvider.PowerShell\nMicrosoft.PackageManagement.NuGetProvider\nMicrosoft.PowerShell.PackageManagement\n## Steps to reproduce\n1. Install https://github.com/PowerShell/PowerShell/releases/download/v6.0.0-alpha.10/PowerShell_6.0.0.10-alpha.10-win10-x64.msi\n2. copy any binary , In my case, Microsoft.PackageManagement.dll, to C:\\Program Files\\PowerShell\\6.0.0.10\\Modules\\PackageManagement\n   or any folder such as C:\\Program Files\\PowerShell\\6.0.0.10\\Temp. \n3. ipmo \"C:\\Program Files\\PowerShell\\6.0.0.10\\Modules\\PackageManagement\\Microsoft.PackageManagement.dll\"\n4. You will see the C:\\Program Files\\PowerShell\\6.0.0.10\\Microsoft.PackageManagement.dll is imported.\n## Expected behavior\n\nThe assembly under C:\\Program Files\\PowerShell\\6.0.0.10\\Modules\\PackageManagement\\ should be loaded.\n## Actual behavior\n\nAny assembly if exists under C:\\Program Files\\PowerShell\\6.0.0.10\\, will get loaded first.\n## Environment data\n\n``` powershell\nPS C:\\Program Files\\PowerShell\\6.0.0.10> $PSVersionTable\n\nName                           Value\n----                           -----\nPSVersion                      6.0.0-alpha\nWSManStackVersion              3.0\nGitCommitId                    v6.0.0-alpha.10\nCLRVersion\nPSRemotingProtocolVersion      2.3\nSerializationVersion           1.1.0.1\nBuildVersion                   3.0.0.0\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\nPSEdition                      Core\n\n\n```\n",
  "closed_at": "2016-12-06T18:47:02Z",
  "comments": [
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "This looks like it is the same for the other modules that are installed with v6.0.0.10 too so would need to be resolved for them as well.\n",
      "created_at": "2016-09-23T00:55:34Z",
      "updated_at": "2016-09-23T00:55:34Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "This happens because when running `Import-Module <path-to-foo.dll>`, powershell first tries to load the assembly using its short name `foo` via `Assembly.Load`, and if that fails, it turns to `LoadFrom` with the file path (https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/ExecutionContext.cs#L1376).\n\nTherefore, for FullCLR powershell, `Import-Module <path-to-foo.dll>` would load the GAC'ed `foo.dll` if there is one:\n\n```\nPS:1> Import-Module F:\\temp\\Microsoft.PowerShell.Commands.Diagnostics.dll\nPS:2> $m = Get-Module \"Microsoft.PowerShell.Commands.Diagnostics\"\nPS:3> $m.ImplementingAssembly.Location\nC:\\windows\\Microsoft.Net\\assembly\\GAC_MSIL\\Microsoft.PowerShell.Commands.Diagnostics\\v4.0_3.0.0.0__31bf3856ad364e35\\Microsoft.PowerShell.Commands.Diagnostics.dll\n```\n\nFor CoreCLR powershell, `Import-Module <path-to-foo.dll>` would load the `foo.dll` from `$PSHome` if there is one there, which is the described symptom in this issue.\n",
      "created_at": "2016-09-23T19:15:29Z",
      "updated_at": "2016-09-23T19:15:29Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "At any rate, if we want any in-box module to be update-able, then it should not leave the original set of assemblies around after it's updated. So `PackageManagement` assemblies should be placed within the module folder, at least when we package and release powershell core.\n",
      "created_at": "2016-09-23T19:21:26Z",
      "updated_at": "2016-09-23T19:21:26Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "see #2350 which also has this similar issue and would correct this too \n\n> At any rate, if we want any in-box module to be update-able, then it should not leave the original set of assemblies around after it's updated.\n",
      "created_at": "2016-09-24T13:45:13Z",
      "updated_at": "2016-09-24T13:45:13Z"
    },
    {
      "author": "HemantMahawar",
      "author_association": "CONTRIBUTOR",
      "body": "This issue was moved to PowerShell/PowerShellGet#41\n",
      "created_at": "2016-10-28T20:38:21Z",
      "updated_at": "2016-10-28T20:38:21Z"
    },
    {
      "author": "jianyunt",
      "author_association": "CONTRIBUTOR",
      "body": "can you help me understand why this is OneGet issue?   If PowerShellCore can not change the behavior by  loading the binaries from root, even if a user explicitly ask from other folder, \"ipmo C:\\Program Files\\PowerShell\\6.0.0.10\\Modules\\PackageManagement\\Microsoft.PackageManagement.dll\" for example,  then at least should package them to Modules folder so modules are updatable. In this case, put them under \\Modules\\PackageManagement folder. Reopen it. \n",
      "created_at": "2016-10-28T22:00:08Z",
      "updated_at": "2016-10-28T22:35:47Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "This seems to have been resolved in 6.0.0.13 with the binaries for PackageManagement being located correctly in `C:\\Program Files\\PowerShell\\6.0.0.13\\Modules\\PackageManagement\\1.1.1.0\\coreclr`",
      "created_at": "2016-12-01T03:10:32Z",
      "updated_at": "2016-12-01T03:10:32Z"
    },
    {
      "author": "HemantMahawar",
      "author_association": "CONTRIBUTOR",
      "body": "@kilasuit Thanks for the confirmation.",
      "created_at": "2016-12-06T18:47:02Z",
      "updated_at": "2016-12-06T18:47:02Z"
    }
  ],
  "created_at": "2016-09-22T23:49:18Z",
  "number": 2347,
  "state": "closed",
  "title": "PackageManagment binaries should be installed under  \\Modules\\PackageManagement\\ folder ",
  "updated_at": "2016-12-06T18:47:02Z"
}