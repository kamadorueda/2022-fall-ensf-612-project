{
  "_url": "https://github.com/PowerShell/PowerShell/issues/18225",
  "author": "peter-sidebotham",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nFor Microsoft.PowerShell.SDK version 7.2.6 running on Windows 11 and Windows Server 2016:\r\nIf you publish a .NET 6 console application (or any other exe type) with target framework win-x64 (instead of e.g. win7-x64)\r\nThere is an exception with an empty string message when you call: `RunspaceFactory.CreateRunspace(InitialSessionState.CreateDefault())`\r\n\r\nThe issue occurs with published binaries, when the output runtime is set to win-x64.\r\n\r\nThe error has no message or inner exception, but has the following stack trace:\r\n`System.Reflection.RuntimeAssembly.GetExportedTypes(QCallAssembly assembly, ObjectHandleOnStack retTypes) at System.Reflection.RuntimeAssembly.GetExportedTypes() at System.Management.Automation.Runspaces.PSSnapInHelpers.GetAssemblyTypes(Assembly assembly, String name) at System.Management.Automation.Runspaces.PSSnapInHelpers.AnalyzeModuleAssemblyWithReflection(Assembly assembly, String name, PSSnapInInfo psSnapInInfo, PSModuleInfo moduleInfo, String helpFile, Dictionary`2& cmdlets, Dictionary`2& aliases, Dictionary`2& providers) at System.Management.Automation.Runspaces.PSSnapInHelpers.AnalyzePSSnapInAssembly(Assembly assembly, String name, PSSnapInInfo psSnapInInfo, PSModuleInfo moduleInfo, Dictionary`2& cmdlets, Dictionary`2& aliases, Dictionary`2& providers, String& helpFile) at System.Management.Automation.Runspaces.InitialSessionState.ImportPSSnapIn(PSSnapInInfo psSnapInInfo, PSSnapInException& warning) at System.Management.Automation.Runspaces.InitialSessionState.CreateDefault()`\r\n\r\nThe following is a minimal project to reproduce the issue.\r\n\r\n**Project file:**\r\n`<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net6.0-windows</TargetFramework>\r\n    <AssemblyName>PowerShellTest</AssemblyName>\r\n    <PackageId>PowerShellTest</PackageId>\r\n    <PublishSingleFile>true</PublishSingleFile>\r\n    <SelfContained>true</SelfContained>\r\n    <IncludeNativeLibrariesForSelfExtract>true</IncludeNativeLibrariesForSelfExtract>\r\n    <IncludeAllContentForSelfExtract>true</IncludeAllContentForSelfExtract>\r\n    <RuntimeIdentifier>win-x64</RuntimeIdentifier>\r\n    <PublishReadyToRun>true</PublishReadyToRun>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|AnyCPU'\">\r\n    <DebugType>embedded</DebugType>\r\n    <DebugSymbols>True</DebugSymbols>\r\n    <PlatformTarget>x64</PlatformTarget>\r\n    <OutputPath>bin\\Debug</OutputPath>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|AnyCPU'\">\r\n    <DebugType>embedded</DebugType>\r\n    <DebugSymbols>True</DebugSymbols>\r\n    <PlatformTarget>x64</PlatformTarget>\r\n    <OutputPath>bin\\Release</OutputPath>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.PowerShell.SDK\" Version=\"7.2.6\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n`\r\n\r\n**Publish File:**\r\n`<Project>\r\n  <PropertyGroup>\r\n    <Configuration>Release</Configuration>\r\n    <Platform>x64</Platform>\r\n    <PublishDir>publish\\</PublishDir>\r\n    <PublishProtocol>FileSystem</PublishProtocol>\r\n    <_TargetId>Folder</_TargetId>\r\n    <TargetFramework>net6.0-windows</TargetFramework>\r\n    <RuntimeIdentifier>win-x64</RuntimeIdentifier>\r\n    <SelfContained>true</SelfContained>\r\n  </PropertyGroup>\r\n</Project>`\r\n\r\n**Program.cs File:**\r\n`using System;\r\nusing System.Management.Automation.Runspaces;\r\n\r\nnamespace PowerShellTest\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            try\r\n            {\r\n                var runspace = RunspaceFactory.CreateRunspace(InitialSessionState.CreateDefault());\r\n                runspace.Open();\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Console.WriteLine($\"Error: {e.Message}\\r\\n{e.StackTrace}\");\r\n            }\r\n        }\r\n    }\r\n\r\n}`\n\n### Expected behavior\n\n```console\nProgram runs without printing output\n```\n\n\n### Actual behavior\n\n```console\nProgram prints:\r\nError:\r\n--stack trace--\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nN/A see SDK setup information in issue text\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "ALIENQuake",
      "author_association": "NONE",
      "body": "@peter-sidebotham \r\nI will try to summarize what I already know about the problem of setting RuntimeIdentifier to the portable ones, without specifying the windows version.\r\n\r\n- Despite the error, you will face another one: `Could not load file or assembly 'Microsoft.Management.Infrastructure, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'` because the file \"Microsoft.Management.Infrastructure.dll\" is not published into the \"Publish\" output.\r\n- the reason for that is: \r\n\r\n> Microsoft.Management.Infrastructure.dll depends on mi.dll which is the native implementation. mi.dll depends on various Windows APIs. There is a difference between those APIs / native binaries which makes us use runtime folders for each supported OS https://github.com/PowerShell/MMI/issues/45#issuecomment-651241560\r\n- mi.dll is written using managed-c which is not supported by NET 5+\r\n- in order to fix this it would require rewriting mi.dll into c# but there are no plans for it: https://github.com/PowerShell/PowerShell/issues/4562#issuecomment-398881699\r\n\r\nSo you need to provide non-portable RIDs if you want a self-contained app.",
      "created_at": "2022-10-08T13:01:12Z",
      "updated_at": "2022-10-08T13:01:12Z"
    },
    {
      "author": "peter-sidebotham",
      "author_association": "NONE",
      "body": "Thank you @ALIENQuake, that makes a lot of sense. If nothing else, this issue could probably be solved by adding a note to the SDK documentation (unless there's a way to generate a self-contained portable target compile-time warning which would be even better). More than the limitation itself, the problem is that there doesn't appear to be a way to discover it until it crops up at runtime in application testing.",
      "created_at": "2022-10-08T16:09:22Z",
      "updated_at": "2022-10-08T16:09:22Z"
    }
  ],
  "created_at": "2022-10-05T20:12:23Z",
  "labels": [
    "WG-DevEx-SDK",
    "Needs-Triage"
  ],
  "number": 18225,
  "state": "open",
  "title": "Microsoft.PowerShell.SDK Runspace Creation Exception with empty error message in .NET 6 with publish target win-x64",
  "updated_at": "2022-10-08T16:09:22Z"
}