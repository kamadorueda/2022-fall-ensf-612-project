{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11865",
  "author": "chillum",
  "body": "# Summary of the new feature/enhancement\r\n\r\n<!-- \r\nA clear and concise description of what the problem is that the new feature would solve.\r\nTry formulating it in user story style (if applicable):\r\n'As a user I want X so that Y.' with X being the being the action and Y being the value of the action.\r\n-->\r\nAs a user, I need an option to compare binary files. This is possible with using `cmp(1)` on Unix and `fc.exe` on Windows. This is not very convenient as:\r\n\r\n1. those commands are not cross-platform, i.e. not possible to use this functionality in cross-platform scripts\r\n2. PowerShell overrides `fc`, so typing `fc` on Windows is not enough and it's needed to use `fc.exe`\r\n\r\nYeah, there is a way to do `diff (cat file1) (cat file2)`, but it loads both files to RAM before comparing, this works very poor with very big files. Today I had to verify the DVD iso file and `diff` just didn't work, `fc.exe` did and was quick.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\n<!-- \r\nA clear and concise description of what you want to happen.\r\nConsider providing an example PowerShell experience with expected result.\r\n-->\r\n\r\nI suggest adding a command that compares binary files byte-by-byte, and warns is the file contents differ. We could name it `Compare-File` and alias to `cmp`, providing a familiar name for Unix folks. This would make scripting and daily usage easier.\r\n\r\nI'm sure, lots of scripts now use `diff (cat files)` approach without realizing it's an in-memory, not block-by-block comparison. New command for comparing files byte-by-byte would be very nice.",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Generally speaking we try to avoid overriding native Unix utilities with PowerShell aliases; it's been a sore point for Unix folks in the past.\r\n\r\nI'm also not clear on how you're proposing this would work, but I have little familiarity with how the existing tools you mention work anyway. Would you be able to explain exactly what kind of output you'd expect from such a cmdlet in PowerShell? How it would display diffs, etc., especially if the diffs are very large.\r\n\r\nActually writing such a comparer in PS shouldn't pose a great difficulty, I wouldn't think; .NET provides pretty easy to work with APIs for interacting with files on a byte by byte basis which we can use for this.\r\n\r\nJust looking for some clarity on what exactly you're looking for. \ud83d\ude42 ",
      "created_at": "2020-02-16T23:46:10Z",
      "updated_at": "2020-02-16T23:46:10Z"
    },
    {
      "author": "chillum",
      "author_association": "NONE",
      "body": "1. I agree that aliasing this to `cmp` is not mandatory, as user can define an alias for `fc` or `cmp`.\r\n\r\n2. binary compare utility doesn't need to display diffs. the main point for it is to say: 'files are identical' or 'files are not identical'.  the `cmp` utility exits after first mismatch and reports a byte number/line where it occurred. I was thinking just about this.\r\n\r\n   `fc.exe /b` though displays a diff like: `00000C74: ED 10` (address of byte, what's in file1 at this address, what's in file2), but I personally like `cmp`'s behavior better. I think, `cmp`'s behavior is a good starting point, if anyone will actually need a diff, it's possible to implement something like a `-Diff` flag later. but if not -- even without diffs this command will be good.",
      "created_at": "2020-02-17T00:00:20Z",
      "updated_at": "2020-02-17T00:02:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "In most cases adding new cmdlet makes sense only if it addresses an advanced scenario and exposes some magic features. We can find many utilities (console and GUI) which do a comparison of files very well. So it is not clear why we need the new cmdlet. ",
      "created_at": "2020-02-17T03:49:47Z",
      "updated_at": "2020-02-17T03:49:47Z"
    },
    {
      "author": "vasily-codefresh",
      "author_association": "NONE",
      "body": "@iSazonov let me repeat my point. we need it because:\r\n1. this functionality is useful in cross-platform PS scripts\r\n2. to improve user experience on Windows (it has `fc.exe`, but it's shadowed by ps' alias and not really easy to use because of this)\r\n\r\nI would also appreciate a list of many console utilities that are good for this use case and cross-platform, I googled and uhm, I know nothing but `cmp` (which is kinda cross-platform, but relies on CygWin).",
      "created_at": "2020-02-17T10:06:20Z",
      "updated_at": "2020-02-17T10:06:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vasily-codefresh PowerShell is \"automation management\". What is scenarios you want to automate in cross-platform environment?  It makes no sense to reimplement every binary utility. \r\n`Compare-File` means to return an object. What is the object? Or do you want only check file equality? In the case it should be Test-* cmdlet.",
      "created_at": "2020-02-17T10:54:52Z",
      "updated_at": "2020-02-17T10:54:52Z"
    },
    {
      "author": "vasily-codefresh",
      "author_association": "NONE",
      "body": "good point, maybe something like `Test-FileContentsMatch` will be better.\r\n\r\nmost useful scenario I can think of is verifying backups. let's say I backup a huge file to DVD or network location and after copying but before deleting local copy I'd like to verify it copied perfect.",
      "created_at": "2020-02-17T11:02:29Z",
      "updated_at": "2020-02-17T11:02:29Z"
    },
    {
      "author": "mrboring",
      "author_association": "NONE",
      "body": "@chillum Not sure on it's RAM usage, but would the existing `Get-FileHash` be suitable?\r\n\r\n[Get-FileHash](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/get-filehash?view=powershell-7)",
      "created_at": "2020-02-18T15:59:03Z",
      "updated_at": "2020-02-18T15:59:03Z"
    },
    {
      "author": "vasily-codefresh",
      "author_association": "NONE",
      "body": "@mrboring thanks for the suggestion, but this is actually slower than bit-for-bit comparison.\r\nit doesn't seem to be putting all file contents to RAM, but it puts a load on CPU and takes longer time.\r\n\r\nbesides, direct file comparison can be considered more reliable. I understand that having a SHA256 collision is highly unlikely, but why rely on 'highly unlikely' when you can just compare files bit-by-bit. even DOS 3.3 had byte-for-byte comparison (before even MD5 existed), so it's a useful functionality and should not be really hard to implement.",
      "created_at": "2020-02-18T17:04:06Z",
      "updated_at": "2020-02-18T17:04:06Z"
    }
  ],
  "created_at": "2020-02-16T20:54:57Z",
  "labels": [
    "Issue-Enhancement"
  ],
  "number": 11865,
  "state": "open",
  "title": "`Compare-File` (`cmp`) command to compare binary files without loading them to RAM would be nice",
  "updated_at": "2020-02-18T17:04:06Z"
}