{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2219",
  "author": "vors",
  "body": "Copied from TFS 3231229\n\nWe should be able to do something along these lines\n\n``` powershell\nclass foo\n{\n  [string]$bar {\n    get { \n      #getter code\n    }\n    set {\n      # setter code\n    }  \n  }\n}\n```\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vors  This is interesting. Could you clarify: this requires not only changes in the parser?",
      "created_at": "2016-11-21T05:58:10Z",
      "updated_at": "2016-11-21T05:58:10Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "It will be at least these places:\r\n- Parser\r\n- ASTs\r\n- PSType.cs",
      "created_at": "2016-11-21T06:38:24Z",
      "updated_at": "2016-11-21T06:38:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vors Thanks! I went thinking :-)",
      "created_at": "2016-11-21T06:51:30Z",
      "updated_at": "2016-11-21T06:51:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@PowerShellTeam Please assign me.",
      "created_at": "2016-11-23T12:48:05Z",
      "updated_at": "2016-11-23T12:48:05Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Are we sure this is the syntax we want?\r\nHow does it interact with existing syntax?\r\nWhat about the following:\r\n``` \r\n# readonly property\r\nclass A {\r\n   [int]$i {get;} # ??? explicit backing property\r\n   A($i){\r\n      $this.i = $i\r\n   }\r\n}\r\n# getter setter: do we have a private backing field?\r\nclass A {\r\n   [int]$i {\r\n        get {\r\n           # what here?\r\n        } \r\n        set {\r\n            if ($value -lt 0) {throw 'x'}\r\n            $i_ = $value #field derived from propname ?  or 'private [int] $i_'?\r\n         }\r\n   } = 4 # default value \r\n}\r\n```\r\n\r\nThere's been a lot of work done i C# to handle a lot of these cases, and I think it is worth to take some time to think through what we want to achieve here. And I think there is a lot to learn from other languages here.\r\n\r\nLet us list and discuss the scenarios before jumping to implementation.",
      "created_at": "2016-11-25T23:48:41Z",
      "updated_at": "2016-11-25T23:49:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@powercode I am full agree.\r\nNow I am preparing the **base** for these enhancements. I am on parser step and completed a parser for `get/set {...}` (Parser error recovery takes a long time).\r\nI can inform you that the original code already does implicit get/set and backing field, and attribute processing.\r\nNow I plan to do as soon as possible a PR with the parser and get feedback. Then do next step and make AST and compile for  `get/set {...}`. If this discussion will adopt new features, then I can always add them immediately or in subsequent PRs because the base will be ready.",
      "created_at": "2016-11-26T10:22:49Z",
      "updated_at": "2016-11-26T10:22:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems the code is ready for testing.\r\nI remember that @lzybkr  spoke about the specifics of these tests.\r\nWhere will we locate these tests? In Scripting.Classes.BasicParsing.Tests.ps1?\r\nAny advise before I begin?\r\nDo it makes sense to make PR now and add tests later?",
      "created_at": "2017-01-11T12:50:55Z",
      "updated_at": "2017-01-11T12:50:55Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Sorry, I missed commenting on this. I don't have a strong preference on tests.  BasicParsing.Tests.ps1 is probably not the place for anything that tests semantics.\r\n\r\nYou can submit a PR whenever you like - but if there aren't any tests, of course you'll be asked to add them.",
      "created_at": "2017-01-20T06:43:01Z",
      "updated_at": "2017-01-20T06:43:01Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "I have this mostly done.  Implementation needs some cleaning up, may need some design changes, and still needs tests and semantic checks, but it all works.  Aiming to get a PR up this weekend or next.\r\n\r\nProgress in [this branch](https://github.com/SeeminglyScience/PowerShell/tree/custom-property-accessors).",
      "created_at": "2019-05-15T23:50:47Z",
      "updated_at": "2019-05-15T23:50:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SeeminglyScience I have very old (2 year) implementation (90%) in the branch https://github.com/iSazonov/PowerShell/tree/classgetset-4\r\nYou can (must :smile:) grab tests from the branch. \r\nAlso I quickly look your implementation and think you could find useful ideas in my branch too.",
      "created_at": "2019-05-16T04:46:01Z",
      "updated_at": "2019-05-16T04:46:01Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov Hmm looking at your branch now, I don't think these tests have a ton of overlap.  Your design is very clever, though I was looking for a more traditional implementation.",
      "created_at": "2019-05-17T01:01:19Z",
      "updated_at": "2019-05-17T01:01:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Re design. I tried to cover all the options that users can type that is very user-friendly. I hope I achieved it. \r\nI also tried to cover it all with tests which can save you a lot of time.\r\n\r\nRe implementation. It was my first exercise. I did not know C# at all, do not know PowerShell insides, and haven't programmed for more than twenty years. So your implementation is in more right direction. Using a tokenizer is exactly the right way. \r\n\r\nRe details. \r\n- I explicitly used $PSItem/$_ as parameter in setter (analogue of \"value\" keyword in C#).\r\n- I explicitly used method like return in getter ",
      "created_at": "2019-05-17T04:22:45Z",
      "updated_at": "2019-05-17T04:22:45Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Re implementation. It was my first exercise. I did not know C# at all, do not know PowerShell insides, and haven't programmed for more than twenty years.\r\n\r\nVery impressive! Bravo \ud83d\ude42 \r\n\r\n> I explicitly used $PSItem/$_ as parameter in setter (analogue of \"value\" keyword in C#).\r\n\r\nYeah I went with `$value` but I'll definitely change that to dollar under.  `$value` feels very out of place.  I'm sort of inclined to go for all three, but that's almost definitely overkill.\r\n\r\nI really like the design but I think it's conceptually more difficult than you might think.  It took me a solid minute or so looking at the tests to understand that it's basically just altering the input/output of an auto backing field.  I'm not sure if it's possible to use a lot of the patterns I want accessors for with that design.\r\n\r\nI basically implemented a clone of C#'s accessor declarations. We can't define fields but hidden properties work just as well (mostly).  It would be awesome if there was a way to do both though, maybe a keyword or attribute?  It's hard to think of a pattern where that's easily understood.\r\n\r\n> I explicitly used method like return in getter\r\n\r\n\ud83d\udc4d",
      "created_at": "2019-05-17T11:57:15Z",
      "updated_at": "2019-05-17T11:57:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I'm sort of inclined to go for all three, but that's almost definitely overkill.\r\n\r\nI considered \"$value\" too and rejected because we all expect $_ in PowerShell and that's enough.\r\n\r\n> I really like the design but I think it's conceptually more difficult than you might think.\r\n\r\nSorry, I don't understand that you mean. Could you share more information and samples?\r\n\r\n> It would be awesome if there was a way to do both though, maybe a keyword or attribute? It's hard to think of a pattern where that's easily understood.\r\n\r\nI stopped on this (and did not even bother to support \"private\"). \r\nIt is fascinating, but it is not clear how necessary. Therefore, I stopped at the simplest case. For the same reason, I rejected parametric properties and indexers, although I initially implemented them.",
      "created_at": "2019-05-17T12:35:19Z",
      "updated_at": "2019-05-17T12:35:19Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Sorry, I don't understand that you mean. Could you share more information and samples?\r\n\r\nFrom the tests:\r\n\r\n```powershell\r\nclass foo\r\n{\r\n    [string]$bar {\r\n        set { return \"---$PSItem---\" }\r\n        get { return \"+++$PSItem+++\" }\r\n    }\r\n}\r\n```\r\n\r\nI think that's a lot harder to understand what's going on versus this:\r\n\r\n```powershell\r\nclass foo\r\n{\r\n    hidden [string] $_bar\r\n\r\n    [string] $bar {\r\n        get { return '+++' + $this._bar + '+++' }\r\n        set { $this._bar = \"---$PSItem---\" }\r\n    }\r\n}\r\n```",
      "created_at": "2019-05-17T12:51:46Z",
      "updated_at": "2019-05-17T12:51:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Thanks for clarify. I see you point. Your option is easier to implement. I tried it and refused for the same reasons (harder to understand :-) ). In my opinion, this requires more user training and makes more mistakes. Also your option gives users too much freedom and provokes side effects. \r\nIn general, I believe that this backfield should appear in an explicit form only when it is really impossible to do without it - but we can.\r\n\r\n@SeeminglyScience Have you other thoughts to share? I think we need to get a community feedback.\r\n\r\n/cc @vors @lzybkr @mklement0 @rjmholt @daxian-dbw @SteveL-MSFT ",
      "created_at": "2019-05-17T14:39:03Z",
      "updated_at": "2019-05-17T14:39:03Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Seeing a setter that returns feels off.  It took me a little bit to get what was happening, and I imagine it would be harder for other folks who aren't as familiar with the behind the scenes. Speculation of course, could just be me.\r\n\r\n> Also your option gives users too much freedom and provokes side effects.\r\n\r\nI think that type of freedom fits well in PowerShell.  Even so, I don't think we need to be more strict than C#.\r\n\r\n> In general, I believe that this backfield should appear in an explicit form only when it is really impossible to do without it - but we can.\r\n\r\nI can't think of many instances where I would implement an accessor that fits neatly into that mold.  If it's not generated per call (where I wouldn't need backing field) or lazy init then I'm not likely to need accessors.  I think your design is a really cool idea, and would be nice to have as an option, though it wouldn't be what I'd default to.",
      "created_at": "2019-05-17T15:26:45Z",
      "updated_at": "2019-05-17T15:27:47Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Wow! Really amazing you guys have tackled this. Feel like I'm quite late to this discussion.\r\n\r\nI personally found the usage of `$PSItem` took me a while to understand in the setter example above. The `get`/`set` syntax being basically C# I think creates the expectation of C#-like semantics where you have to explicitly create your own backing property if you want something more than just assignment and dereference of a backing field.\r\n\r\nThe thing is that PowerShell classes don't really have fields &mdash; PS class properties with no `get` or `set` are equivalent to C# class properties with `{ get; set; }` &mdash; so explicit `get` and `set` in PowerShell classes only really make sense with non-trivial bodies. But not all getters and setters need backing fields (they might be what EF calls a \"computed property\"), so `$PSItem` doesn't apply in all cases (not really a big problem -- this is true in other usages of $PSItem in PowerShell).\r\n\r\nI think part of the issue is that having syntax so close to C#'s creates an expectation of everything being like C#, but because .NET has getters and setters baked into it I think the syntax proposed is the most sensible (`get { ... }` is not unlike `begin { ... }`). Which basically means I think we should go with @SeeminglyScience's version where `$PSItem` only applies as the value in a setter.",
      "created_at": "2019-05-17T15:28:08Z",
      "updated_at": "2019-05-17T15:31:58Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "@SeeminglyScience / @iSazonov good work on this. I've been wanting this feature for a while. Do either of you have any updates on the progress of this feature?",
      "created_at": "2020-01-12T03:54:54Z",
      "updated_at": "2020-01-12T03:54:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I feel we don't get a progress until we design in-depth. Minor enhancements do not look so useful.",
      "created_at": "2020-01-12T14:02:41Z",
      "updated_at": "2020-01-12T14:02:41Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@ThomasNieto I stopped working on this awhile ago.  The actual code [is mostly done](https://github.com/SeeminglyScience/PowerShell/tree/custom-property-accessors) if anyone else wants to build off of it.  I'm not going to have the spare time for the design debates/probably RFC, so anyone else who wants to take this on is welcome to.",
      "created_at": "2020-01-12T14:16:08Z",
      "updated_at": "2020-01-12T14:16:08Z"
    },
    {
      "author": "JohnFAsh",
      "author_association": "NONE",
      "body": "Forgive my ignorance of Powershell internals, but on the face of it could we not make use of the facts that (a) (hidden) get_ and set_<property> methods are automatically created for each property; (b) it is syntactically allowed to user-define the same methods, but (c) this seems to have no effect - the user definition does not override the system-generated one. If it did, that would allow as much flexibility as we could want; but I don't know what other consequences might flow from this.",
      "created_at": "2021-09-13T20:10:09Z",
      "updated_at": "2021-09-13T20:10:09Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> but I don't know what other consequences might flow from this.\r\n\r\nSome change would still need to be made to enable that. The biggest consequence is just having to support that forever. Plus you would need some way to annotate that it's for a property, otherwise it would be a breaking change (imagine someone using a snake_case naming convention, while not particularly popular in pwsh it's not unheard of). At that point you might as well add proper language support.",
      "created_at": "2021-09-14T14:19:04Z",
      "updated_at": "2021-09-14T14:19:04Z"
    },
    {
      "author": "JohnFAsh",
      "author_association": "NONE",
      "body": "@ SeeminglyScience Thanks for the feedback. \r\n\"... otherwise it would be a breaking change...\": I agree it's theoretically a breaking change, but in order for it to have any actual impact, someone would need to have written a get_/set_ method and left it there even though it hasn't ever worked (it's been masked by the system version) - not a likely occurrence, I would suggest.\r\n\"...having to support that forever...\": surely there are lots of instances where a system default can be over-ridden by writing something with the same name; in fact that's more common than the reverse situation. What is different here?\r\nThanks for your patience.",
      "created_at": "2021-09-14T20:51:44Z",
      "updated_at": "2021-09-14T20:51:44Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> @ SeeminglyScience Thanks for the feedback.\r\n> \"... otherwise it would be a breaking change...\": I agree it's theoretically a breaking change, but in order for it to have any actual impact, someone would need to have written a get_/set_ method and left it there even though it hasn't ever worked (it's been masked by the system version) - not a likely occurrence, I would suggest.\r\n\r\nI'm thinking it's not too unlikely that some folks *happened* to name a method `get_something` in the same way one might name a method `invoke_the_thing`.\r\n\r\n> \"...having to support that forever...\": surely there are lots of instances where a system default can be over-ridden by writing something with the same name; in fact that's more common than the reverse situation. What is different here?\r\n\r\nSo ideally it would be implemented inline, so you don't have to define a property and then separately define it's getters and setters as individual methods. If the proposed workaround were implemented then it would need to continue to be supported even after the ideal solution is also implemented.\r\n\r\n",
      "created_at": "2021-09-15T02:44:51Z",
      "updated_at": "2021-09-15T02:44:51Z"
    },
    {
      "author": "JohnFAsh",
      "author_association": "NONE",
      "body": "@SeeminglyScience Thanks  again.\r\n\r\n> ...not too unlikely that some folks happened to name a method get_something...\r\n\r\nSo you're suggesting (are you?) that this might happen when there isn't a property called 'something'; and later the 'something' property gets added, and attempting to access it behaves oddly. That might be puzzling, but it doesn't actually break anything that worked before. Incidentally, I suppose I'm assuming that accessing a property via dot notation gets translated to a get_/set_ method call (because that's probably how I would do it, and the two behave the same at the moment); but I don't know whether that is true.\r\n\r\n> ...ideally it would be implemented inline...\r\n\r\nAgreed; and I take the point that there might be strange consequences if a user used both techniques on the same property. If necessary this could either be prevented as invalid syntax, dealt with on a 'defined priority' basis (like function definitions in different scopes), or just treated like other duplicate function definitions, i.e. \"last one wins\".\r\nIncidentally, I made the suggestion simply because the good work you did seems to be in limbo for want of someone to take it forward, and I thought this might be related to the perceived complexity of your solution; so it seemed sensible to ask \"what is the simplest thing that might work?\" - and that is what came to mind.",
      "created_at": "2021-09-15T20:22:50Z",
      "updated_at": "2021-09-15T20:22:50Z"
    }
  ],
  "created_at": "2016-09-09T21:22:50Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Language",
    "Up-for-Grabs"
  ],
  "number": 2219,
  "state": "open",
  "title": "Properties with accessor and mutator methods",
  "updated_at": "2021-09-15T20:22:51Z"
}