{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6677",
  "author": "rjmholt",
  "body": "## PR Summary\r\n\r\n<!-- summarize your PR between here and the checklist -->\r\nFixes #2505.\r\n\r\nThis PR:\r\n- Makes `Import-Module -Force` recursively unload nested modules (like `Remove-Module -Force` does)\r\n- Causes a script module cache refresh when the `LastWriteTime` does not match\r\n- Updates the module caches to use a `ConcurrentDictionary` rather than a `Dictionary` in a `lock` block\r\n- Adds tests for `Import-Module`, which I want to expand on in a later PR to drive up coverage of all the module cmdlets so that we can refactor them safely and improve performance and consistency.\r\n\r\nThis fixes the scenarios where:\r\n- A class or function is in a submodule and exposed in the top-level module, but updating the submodule definition and calling `Import-Module -Force` gives back the old definition results\r\n- A class is defined in a module, loaded in with `Import-Module` and then the class definition is changed. Subsequent calls to `Import-Module` or `using module` then do not use the updated class definition because the cache is not improperly invalidated.\r\n\r\nNote that, as discussed in #2505, making `Import-Module -Force` recursively reload nested modules is a **breaking change**. I can open an RFC for this if desired, but feel that it has been discussed in #2505 and that not reloading nested modules is not necessarily expected by users. However, I know that @BrucePay has indicated that leaving the nested modules is by design.\r\n\r\nAlso, I know that both @powercode and @alx9r have written tests for this (@powercode's [here](https://github.com/PowerShell/PowerShell/files/544410/Modrepo.Tests.ps1.txt) and @alx9r's [here](https://gist.github.com/alx9r/7d3c220163bf55daca6fcc544c07ee27)). I think I've essentially included functionality like that in @powercode's, but @alx9r's tests were considerably more complicated. I think it would be good to rewrite them to some extent and include them in this PR (the only problem being that they are a bit too self-referential for me to pick apart currently).\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed - Issue link:\r\n- **Testing - New and feature**\r\n    - [ ] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [x] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2018-04-23T23:43:34Z",
  "comments": [
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "I've found a heisenbug in the `\"Uses updated class definitions in force-reloaded submodules\"` test (second last) in `ModuleCmdlet.Tests.ps1`.\r\n\r\n(If you want to reproduce: ` for ($i=0;$i-lt20;$i++) { Start-PSPester -Path .\\test\\powershell\\engine\\Module\\ModuleCmdlet.Tests.ps1 }`. I'm picking it up about 14% of the time.)",
      "created_at": "2018-04-19T01:31:36Z",
      "updated_at": "2018-04-19T01:32:40Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "I've caught the heisenbug with a `Wait-Debugger` when `Test-SubClassMain` returns `\"FIRST\"` instead of `\"SECOND\"`.\r\n\r\nThe interesting part is:\r\n```powershell\r\n[DBG]: PS C:\\Users\\roholt\\Documents\\Dev\\PowerShell>> $mod = Get-Module subClassMod\r\n[DBG]: PS C:\\Users\\roholt\\Documents\\Dev\\PowerShell>> $mod.NestedModules[0].GetExportedTypeDefinitions().SubObj\r\n\r\n\r\nName           : SubObj\r\nAttributes     : {}\r\nBaseTypes      : {}\r\nMembers        : {Id, SubObj}\r\nTypeAttributes : Class\r\nIsEnum         : False\r\nIsClass        : True\r\nIsInterface    : False\r\nExtent         : class SubObj\r\n                 {\r\n                     [string]$Id\r\n\r\n                     SubObj()\r\n                     {\r\n                         $this.Id = \"SECOND\"\r\n                     }\r\n                 }\r\nParent         : class SubObj\r\n                 {\r\n                     [string]$Id\r\n\r\n                     SubObj()\r\n                     {\r\n                         $this.Id = \"SECOND\"\r\n                     }\r\n                 }\r\n```",
      "created_at": "2018-04-19T01:48:40Z",
      "updated_at": "2018-04-19T01:48:40Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Did a bit more digging to look at `s_scriptModuleAnalysisCache` from `ModuleCmdletBase`:\r\n```powershell\r\n[DBG]: PS C:\\Users\\roholt\\Documents\\Dev\\PowerShell>> $smCache = $fieldInfo.GetValue($null)\r\n[DBG]: PS C:\\Users\\roholt\\Documents\\Dev\\PowerShell>> $smCache.Count\r\n0\r\n```",
      "created_at": "2018-04-19T02:25:30Z",
      "updated_at": "2018-04-19T02:25:30Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": ">...but @alx9r's tests were considerably more complicated. I think it would be good to rewrite them to some extent and include them in this PR (the only problem being that they are a bit too self-referential for me to pick apart currently).\r\n\r\nIIRC, that test code emerged organically when I was prospecting for a repro of unexpectedly stale modules.  I apologize it's not more readable.  \r\n\r\nWhat would be important to me (as a PowerShell user) is that there be regression tests in place for the full matrix of relevant permutations.  I _think_ all of the following are relevant for testing module reloading:\r\n\r\n| Thing I _think_ is Relevant | Important Test Cases (cases are semi-colon separated) | Notes |\r\n|----------------------|------------------------|--------|\r\n| class or not | module contains PowerShell class; module does not contain PowerShell class |\r\n| module dot-sources or not | module is a single `.psm1`; module is a `.psm1` file that dot-sources  `.ps1` files |  (1) |\r\n| nested module import location | `Import-Module` in `.psm1`; `Import-Module` in dot-sourced `.ps1`; `NestedModule=` in `.psd1` |\r\n| module reload method | `Import-Module -Force`; `Remove-Module; Import-Module`; `Remove-Module -Force; Import-Module` |\r\n| reloaded module kind | dynamic; script-file backed | (2) |\r\n| file cache invalidation method | touch file; append line to file |\r\n| files checked during cache validation | `.psm1`; `.psd1`; `.ps1` dot-sourced from `.psm1` |\r\n| module arguments | second import of module with different arguments from first |\r\n\r\n1. #6117 is an example of unexpected results when dot-sourcing files from a `.psm1` file.\r\n2.  #4713 is an example of unexpected differences between dynamic and file-backed modules.\r\n\r\nI _think_ the combinatorics for such a matrix would work out to somewhere between single-digit hundreds and single-digit thousands of test cases.  My knowledge of the module reloading implementation is very limited.  I suspect someone with more knowledge of the internals could collapse that matrix down a bit.\r\n\r\nNote that [my prospecting tests](https://gist.github.com/alx9r/7d3c220163bf55daca6fcc544c07ee27) do not include many of these permutations.  One example of a missing permutation is that there is no test for cache invalidation of dot-sourced `.ps1` files.  I understand that that is a distinct equivalence partition for cache invalidation when such a `.ps1` contains a class, is edited, and the module that dot-sources it is reloaded.",
      "created_at": "2018-04-19T15:56:15Z",
      "updated_at": "2018-04-20T14:42:50Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov Thanks so much for your feedback. Really helpful reacquainting me with Pester idioms.",
      "created_at": "2018-04-19T17:29:06Z",
      "updated_at": "2018-04-19T17:29:29Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@alx9r Sorry, didn't mean at all to slight your code. Thank you for that table, it's really helpful. I think we are very much on the same wavelength about identifying equivalence classes for `Import-Module` cases and really pinning its behaviour down with regression tests.\r\n\r\nI'd like to build on this PR (or just submit a separate one) soon to really build out the testing for `Import-Module`. Reading through the code it looks like there are a bunch of naive cases:\r\n- `Import-Module` from `.psm1`\r\n- `Import-Module` from `.psd1` (there's a [single method](https://github.com/PowerShell/PowerShell/blob/5a326135ec2598cb430d4a1c8cf1533631161361/src/System.Management.Automation/engine/Modules/ModuleCmdletBase.cs#L1425) that does this, and its about 2000 lines long)\r\n- `Import-Module` from path (where it tries all the extensions in a particular order)\r\n- `Import-Module` from a `PSModuleInfo` object\r\n- `Import-Module` with a binary module\r\n- `Import-Module` on the other [strange PowerShell extensions](https://github.com/PowerShell/PowerShell/blob/5a326135ec2598cb430d4a1c8cf1533631161361/src/System.Management.Automation/engine/Modules/ModuleIntrinsics.cs#L486)\r\n- `Import-Module` [over PSRP](https://github.com/PowerShell/PowerShell/blob/5a326135ec2598cb430d4a1c8cf1533631161361/src/System.Management.Automation/engine/Modules/ImportModuleCommand.cs#L768)\r\n- And a couple of CIM remoting cases",
      "created_at": "2018-04-19T17:47:13Z",
      "updated_at": "2018-04-19T17:47:13Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": ">I think we are very much on the same wavelength about identifying equivalence classes for Import-Module cases and really pinning its behaviour down with regression tests.\r\n>\r\n>I'd like to build on this PR (or just submit a separate one) soon to really build out the testing for Import-Module. \r\n\r\nThis is really great news for PowerShell.  Thank you @rjmholt.",
      "created_at": "2018-04-19T20:33:31Z",
      "updated_at": "2018-04-19T20:33:31Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Well my thinking is that there are a number of core functionalities in PowerShell that are heavily relied on, but over the years have become large enough that we don't have a good grasp on their semantics or API contracts. For us to extend them, make them more consistent with each other or make them more performant, we're going to need to refactor them. But without extensive regression tests in place that can't be done safely.",
      "created_at": "2018-04-19T23:05:11Z",
      "updated_at": "2018-04-20T02:50:17Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov I've refactored my tests a bit after the advice you gave me. Please let me know if there's anything else I can improve.\r\n\r\nAlso, I've marked two tests as skipped because I thought they should be passing but they look like bugs in `Import-Module`. Worth taking a look.",
      "created_at": "2018-04-21T00:05:27Z",
      "updated_at": "2018-04-21T00:05:27Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Closing in favour of #6710.",
      "created_at": "2018-04-23T23:43:34Z",
      "updated_at": "2018-04-23T23:43:34Z"
    }
  ],
  "created_at": "2018-04-19T00:31:10Z",
  "number": 6677,
  "state": "closed",
  "title": "WIP: Make Import-Module -Force unload nested modules and make changing files invalidate the analysis cache",
  "updated_at": "2018-04-23T23:43:34Z"
}