{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15027",
  "author": "Dennis-Petrov",
  "body": "## Summary of the new feature/enhancement\r\n\r\nWe have a small cmdlet, which is mostly independent from Powershell features, so technically it can run using PS from 6.x to 7.x.\r\nIn fact, PS just loads it and parses arguments to run cmdlet commands.\r\n\r\nThis cmdlet depends on `System.Management.Automation` package, which, in turn. differs from PS version to PS version.\r\nCmdlet is a part of large product,. Its lifecycle contains package update procedure, and ultimately we have V1, where cmdlet depends on `S.M.A` v 6, then V2, where cmdlet depends on `S.M.A` v 7, and so on.\r\n\r\nThis means, that when end-user updates our product, he must update PS as well, otherwise attempt to run cmdlet will end with this error:\r\n```\r\nCould not load file or assembly 'System.Management.Automation, Version=7.1.2.0, Culture=neutral,\r\n     | PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n```\r\nI understand *why* this happens.  \r\nI don't understand, *how to* ignore this error and use `S.M.A` which already has been loaded by PS.\r\n\r\n## Proposed technical implementation details (optional)\r\n\r\nLet cmdlets use already loaded ``System.Management.Automation`` version.  Probably, this should be turned on via `Import-Module` flag.",
  "closed_at": "2021-03-15T12:01:09Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Please read the blog post https://devblogs.microsoft.com/powershell/depending-on-the-right-powershell-nuget-package-in-your-net-project/ to select right reference package.\n\n<blockquote><img src=\"https://devblogs.microsoft.com/powershell/wp-content/uploads/sites/30/2018/09/Powershell_256.png\" width=\"48\" align=\"right\"><div><img src=\"https://devblogs.microsoft.com/powershell/wp-content/uploads/sites/30/2019/02/Powershell_2561.png\" height=\"14\"> PowerShell Team</div><div><strong><a href=\"https://devblogs.microsoft.com/powershell/depending-on-the-right-powershell-nuget-package-in-your-net-project/\">Depending on the right PowerShell NuGet package in your .NET project | PowerShell Team</a></strong></div><div>Alongside the pwsh executable packages published with each PowerShell release, the PowerShell team also maintain several NuGet packages that are available on NuGet to allow targeting PowerShell as an API platform in .NET. As a .NET application that both provides APIs and expects to load .NET libraries implementing its own (binary modules),</div></blockquote>",
      "created_at": "2021-03-15T11:48:02Z",
      "updated_at": "2021-03-15T11:48:05Z"
    },
    {
      "author": "Dennis-Petrov",
      "author_association": "NONE",
      "body": "Thanks. As far as I understand, we must not refer `System.Management.Automation`.\r\nWill read more attentively, closing as for now.",
      "created_at": "2021-03-15T12:01:09Z",
      "updated_at": "2021-03-15T12:06:43Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "You can definitely refer to `S.M.A`, you are just meant to use the PowerShellStandard.Library as referenced by that blog post.",
      "created_at": "2021-03-16T03:50:19Z",
      "updated_at": "2021-03-16T03:50:29Z"
    },
    {
      "author": "Dennis-Petrov",
      "author_association": "NONE",
      "body": "@jborean93 , I meant nuget package, not an assembly itself. Changing `PackageReference` for project from `System.Management.Automation` to `PowerShellStandard.Library` solves the task.",
      "created_at": "2021-03-16T05:23:42Z",
      "updated_at": "2021-03-16T05:23:42Z"
    }
  ],
  "created_at": "2021-03-15T11:33:00Z",
  "number": 15027,
  "state": "closed",
  "title": "Powershell version-agnostic cmdlets",
  "updated_at": "2021-03-16T05:23:42Z"
}