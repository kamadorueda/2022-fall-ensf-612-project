{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3668",
  "author": "mklement0",
  "body": "Note: It may be too late to change this behavior, or it may fall into [Bucket 3: Unlikely Grey Area](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md#bucket-3-unlikely-grey-area). \r\nIf the former, the pitfall discussed is at least worth documenting.\r\n\r\n[about_Switch](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_Switch)  states about the syntax of individual `switch` branches:\r\n\r\n>      \"string\"|number|variable|{ expression } { statementlist }  \r\n\r\nThe above suggests that an expression can only be used _inside script blocks_, but in practice you can also use `(...)`- and `$(...)`-enclosed expressions directly (e.g., `(1 + 2)`) and even method calls (e.g., `$PSVersionTable.PSVersion.ToString()`).\r\n\r\nSurprisingly, however, a non-numeric unquoted token that doesn't start with `(` or `$` (and doesn't break parsing) is unexpectedly treated like an _(expandable) string_ rather than as an expression:\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n0 -eq [uint32]::MinValue\r\n\r\nswitch (0) {\r\n ([uint32]::MinValue) { $true }  # OK - (...) ensures use as expression\r\n default { $false }\r\n}\r\n\r\nswitch (0) {\r\n [uint32]::MinValue { $true }  # !! condition treated as *string*\r\n default { $false }\r\n}\r\n\r\nswitch ('[uint32]::MinValue') {\r\n [uint32]::MinValue { $true }\r\n default { $false }\r\n}\r\n```\r\n\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```\r\nTrue\r\nTrue\r\nTrue\r\nFalse\r\n```\r\n\r\n\r\nActual behavior\r\n---------------\r\n\r\n```\r\nTrue\r\nTrue\r\nFalse\r\nTrue\r\n```\r\n\r\nThat is, unquoted `[uint32]::MinValue` is interpreted the same way as `'[uint32]::MinValue'` in this case.\r\n\r\nThis is unexpected, given that it is reasonable to conceive of the branch conditions of a `switch` statement as the RHS of an _expression_ along the lines of `<switch-value> -eq <branch-condition>`, and given that any unquoted token on the RHS of `-eq` is interpreted as an _expression_.\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-alpha (v6.0.0-alpha.18) on Darwin Kernel Version 16.5.0: Fri Mar  3 16:52:33 PST 2017; root:xnu-3789.51.2~3/RELEASE_X86_64\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "PowerShell ISE makes this pretty easy to see what is going on, and I have implemented this in https://github.com/PowerShell/EditorSyntax/pull/156.  The condition is treated as an argument, not an expression.  I think the documentation for this needs to be clarified, though not sure how.\r\n\r\n![image](https://user-images.githubusercontent.com/26179051/54176820-4662b780-445e-11e9-89b3-d3524d2a8038.png)\r\n\r\nSource: https://github.com/msftrncs/PwshReadXmlPList/blob/master/PList%20Reader.ps1\r\n",
      "created_at": "2019-03-12T05:35:40Z",
      "updated_at": "2019-03-12T05:35:40Z"
    }
  ],
  "created_at": "2017-05-01T02:51:08Z",
  "number": 3668,
  "state": "open",
  "title": "`switch` statement unexpectedly treats barewords as expandable strings",
  "updated_at": "2022-03-30T22:40:25Z"
}