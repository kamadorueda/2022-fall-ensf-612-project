{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5676",
  "author": "markekraus",
  "body": "Currently, `Get-Date` returns a `PSObject` wrapped `DateTime`.  \r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/4dc5512c8361f2acc1363093d7bb3b9ae6e841d1/src/Microsoft.PowerShell.Commands.Utility/commands/utility/GetDateCommand.cs#L315-L323\r\n\r\nThis is usually not an issue, but in some instances it causes confusion or unexpected results. Take for example the following 2 pieces of code:\r\n\r\n```powershell\r\n$d = Get-Date; \r\n(ConvertFrom-Json (ConvertTo-Json $d)).ToLocalTime()\r\n```\r\n\r\nvs\r\n\r\n```powershell\r\n(ConvertFrom-Json (ConvertTo-Json (get-date))).ToLocalTime()\r\n```\r\n\r\nThe first will correctly reserailize the `DateTime`, but the second will result in the `Method invocation failed because [System.Management.Automation.PSCustomObject] does not contain a method named 'ToLocalTime'.` error.\r\n\r\nThis is due to PSObject black magic and `Get-Date` applying the `DisplayHint` `PSNoteProperty`. the JSON serializers in both Windows PowerShell and PowerShell Core serialize the outer `PSObject` and not the `BaseObject`. While that may or may not be an issue in the JSON cmdlets, this issue could pop its head up any other cmdlet where the outer `PSObject` would be evaluated instead of the inner `DateTime`.\r\n\r\nI believe adding a `None` option to the `-DisplayHint` parameter would be sufficient to allow users to work around this where needed/desired. I haven't looked too deeply into the logic, but the idea would be that if this is present it would just send the raw `DateTime` object without wrapping it in a `PSObject` and applying the `PSNoteProperty`.",
  "closed_at": "2021-06-24T22:52:18Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "In the case of `ConvertTo-Json`, the presence of NoteProperty / ScriptProperty members should not make a difference, as I (now) argue in #5797, which requires fixing `ConvertTo-Json`.\r\n \r\nAs a workaround in the meantime, you can use `(Get-Date).psobject.BaseObject` or direct construction via `[datetime]`, but note that this only works if you pass this value via `-InputObject` to `ConvertTo-Json`, not via the _pipeline_:\r\n\r\n```powershell\r\n# OK - via -InputObject\r\nConvertTo-Json (get-date).psobject.baseobject \r\nConvertTo-Json ([datetime]::now)\r\n\r\n# !! BROKEN - via pipelin\r\n(get-date).psobject.baseobject | ConvertTo-Json\r\n[datetime]::now | ConvertTo-Json\r\n```\r\n\r\nIn summary:\r\n\r\n* I see the need to fix `ConvertTo-Json`, as described in #5797.\r\n* I see the need to address the inconsistencies around intermediate variable use / pipeline-vs.-parameter use, likely related to generic issue #5579.\r\n* I do _not_ see the need to modify `Get-Date`.\r\n\r\n\r\n  ",
      "created_at": "2018-01-07T05:44:14Z",
      "updated_at": "2018-01-07T05:46:49Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@mklement0 The goal of this PR is NOT to interop with JSON serialization. It was only the example I used. There are other areas where this pops up. so it _does_ need to be applied to `get-date`.",
      "created_at": "2018-01-07T13:22:17Z",
      "updated_at": "2018-01-07T13:22:17Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@markekraus \r\n\r\nIt seems to me that the real issue is that we sometimes want to get the unadorned-by-PS version of an object for _any_ type.\r\n\r\n`(...).psobject.BaseObject` _should_ give you that for _any_ type, but currently:\r\n\r\n(a) it doesn't _fully_, because ETS properties are apparently still present (the `DateTime` ScriptProperty member, in the case of `[datetime]` instances) - I don't know whether that's by design, but I can certainly imagine scenarios where you don't even want the ETS properties.\r\n\r\n(b) such ETS properties may surface again when an unadorned instance is sent through the _pipeline_; contrast `ctj ([datetime]::now)` with `[datetime]::now | ctj`; I've only seen it with `ConvertTo-Json` at this point, but, as you state, it may affect others too.\r\n\r\nIf these two aspects are clarified / fixed, there is no need for `-DisplayHint None`, the generalization of which would require the highly impractical approach of adding analogous, but specific parameters to _all_ cmdlets, along the lines of `Get-Content -NoProviderProperties` to get unadorned string instances.\r\n",
      "created_at": "2018-01-08T08:59:12Z",
      "updated_at": "2018-01-08T08:59:12Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Closing this in favor of #5797",
      "created_at": "2021-06-24T22:52:18Z",
      "updated_at": "2021-06-24T22:52:25Z"
    }
  ],
  "created_at": "2017-12-12T17:38:20Z",
  "number": 5676,
  "state": "closed",
  "title": "Add \"None\" option to Get-Date -DisplayHint",
  "updated_at": "2021-06-24T22:52:25Z"
}