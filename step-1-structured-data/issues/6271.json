{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6271",
  "author": "EliteLoser",
  "body": "You don't want 5.1 issues here on GitHub? You could argue it's a bug, or unwanted behavior, maybe? Posting..\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nPS C:\\temp> [PSCustomObject] @{ Key = \"Value\" } |\r\n    Select-Object @{ Name = \"Key\"; Expression = { $_.Key -replace ')brokenregex' } },\r\n    @{ Name = \"EAP\"; Expression = { $ErrorActionPreference } }\r\n\r\nKey       EAP\r\n---       ---\r\n     Continue\r\n\r\n\r\n# STDERR output is suppressed? The regex is broken.\r\n\r\n# Here it is on the command line, where you see an error:\r\n\r\nPS C:\\temp> \"value\" -replace ')brokenRegex'\r\nThe regular expression pattern )brokenRegex is not valid.\r\nAt line:1 char:1\r\n+ \"value\" -replace ')brokenRegex'\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: ()brokenRegex:String) [], RuntimeException\r\n    + FullyQualifiedErrorId : InvalidRegularExpression\r\n\r\n\r\n# Write-Verbose (stream 4) is printed and a script-level exception(?) is\r\n# raised since try kicks in? Why not stream 2, STDERR, then?\r\n# Reproduced on multiple computers with the latest released 5.1 version of PowerShell\r\n# as of 2018-02-28.\r\n\r\nPS C:\\temp> [PSCustomObject] @{ Key = \"Value\" } |\r\n    Select-Object @{ Name = \"Key\"; Expression = { try { $_.Key -replace ')brokenregex' } catch {\r\nWrite-Verbose -Verbose \"Caught!\" } } },\r\n@{ Name = \"EAP\"; Expression = { $ErrorActionPreference } }\r\n\r\nVERBOSE: Caught!\r\n\r\nKey       EAP\r\n---       ---\r\n     Continue\r\n\r\n# Warnings (stream 3) are also printed:\r\n\r\n\r\n> [PSCustomObject] @{ Key = \"Value\" } |\r\n    Select-Object @{ Name = \"Key\"; Expression = { Write-Warning \"test\" } },\r\n    @{ Name = \"EAP\"; Expression = { $ErrorActionPreference } }\r\n\r\nWARNING: test\r\n\r\nKey      EAP\r\n---      ---\r\n    Continue\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\n> $PSVersionTable\r\nPS C:\\temp> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.16299.248\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.16299.248\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n\r\n\r\nPS C:\\temp>\r\n```\r\n\r\nThe reason I discovered this was because I had precisely a broken regex within a calculated property and kept getting $null - or no output - if you like, without understanding why, since I couldn't manually spot the error in the regex at that time, and this left me troubleshooting for quite a while in wrong directions.\r\n\r\nIt's not just regex errors, as this demonstrates:\r\n\r\n```powershell\r\nPS C:\\temp> [PSCustomObject] @{ Key = \"Value\" } |\r\n    Select-Object @{ Name = \"Key\"; Expression = {\r\nWrite-Error \"test\" } },\r\n @{ Name = \"EAP\"; Expression = { $ErrorActionPreference } }\r\n\r\nKey       EAP\r\n---       ---\r\n     Continue\r\n```\r\n\r\nThis demonstrates that streams 1, 3, 4 and 6 are output, but not 2 (STDERR):\r\n\r\n```powershell\r\nPS C:\\temp> [PSCustomObject] @{ Key = \"Value\" } |\r\n Select-Object @{ Name = \"Key\"; Expression = {\r\n Write-Error \"Write-Error test\"\r\n Write-Warning \"Write-Warning test\"\r\n Write-Verbose \"Write-Verbose test\" -Verbose\r\n Write-Host \"Write-Host test\" } }\r\n\r\nWARNING: Write-Warning test\r\nVERBOSE: Write-Verbose test\r\nWrite-Host test\r\n\r\nKey\r\n---\r\n\r\n```\r\n\r\nBy design?",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@EliteLoser Thanks for your report! Could you please repo with latest PowerShell Core build?",
      "created_at": "2018-02-28T18:47:38Z",
      "updated_at": "2018-02-28T18:47:38Z"
    },
    {
      "author": "EliteLoser",
      "author_association": "NONE",
      "body": "Hi. You mean like this?\r\n\r\n```powershell\r\n\r\nPS C:\\temp> .\\pwsh.ps1\r\nPowerShell v6.0.1\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\n\r\nhttps://aka.ms/pscore6-docs\r\nType 'help' to get help.\r\n\r\nPS C:\\temp> [PSCustomObject] @{ Key = \"Value\" } |\r\n>> Select-Object @{ Name = \"Key\"; Expression = {\r\n>> Write-Error \"Write-Error test\"\r\n>> Write-Warning \"Write-Warning test\"\r\n>> Write-Verbose \"Write-Verbose test\" -Verbose\r\n>> Write-Host \"Write-Host test\" } }\r\nWARNING: Write-Warning test\r\nVERBOSE: Write-Verbose test\r\nWrite-Host test\r\n\r\nKey\r\n---\r\n\r\n\r\n\r\nPS C:\\temp>\r\n```\r\n\r\nSeemingly identical behavior in PowerShell Core 6.0.1 installed from the MSI downloaded on 2018-03-01 around 2:45 PM UTC/GMT. Tested on Windows 10 now.",
      "created_at": "2018-03-01T14:57:59Z",
      "updated_at": "2018-03-01T14:57:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@EliteLoser Yes, thanks for repo in PowerShell Core.",
      "created_at": "2018-03-01T15:41:18Z",
      "updated_at": "2018-03-01T15:41:18Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Quibble: PowerShell has its own system of streams and its _error [output] stream_ is not the same as _stderr_.\r\n\r\nJust to provide some historical context (I can't speak to the design intent):\r\n\r\nThe current behavior has been effect in since at least v2.\r\n\r\n_Update_: I originally claimed different v2 behavior, but that incorrect conclusion was derived from flawed tests.\r\n\r\nYou can use the following code to test:\r\n\r\n```powershell\r\n# Non-terminating error\r\nNew-Object PSCustomObject -Property @{ foo = 'val' } | Select-Object @{ n='bar'; e={ Get-Item /NoSuchFile } }, foo\r\n\r\n# Statement-terminating error\r\nNew-Object PSCustomObject -Property @{ foo = 'val' } | Select-Object @{ n='bar'; e={ Get-Item -NoSuchParam } }, foo\r\n\r\n# Script-terminating error\r\nNew-Object PSCustomObject -Property @{ foo = 'val' } | Select-Object @{ n='bar'; e={ Throw \"a fit\"} }, foo\r\n\r\n'done'\r\n```\r\n\r\nAll statements succeed (with an empty `bar` column), because all types of errors are quietly ignored (but still recorded in `$Error`).\r\n\r\nThe behavior is not limited to `Select-Object`, it seems to be built into the class that provides calculated properties across all cmdlets, so you can observe it in `Format-Table` and `Format-List` too, for instance.",
      "created_at": "2018-10-18T01:55:25Z",
      "updated_at": "2018-10-18T02:22:21Z"
    }
  ],
  "created_at": "2018-02-28T16:43:17Z",
  "number": 6271,
  "state": "open",
  "title": "STDERR output suppressed within calculated properties in Select-Object",
  "updated_at": "2018-10-18T02:22:21Z"
}