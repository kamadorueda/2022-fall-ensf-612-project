{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10418",
  "author": "Halkcyon",
  "body": "# Summary of the new feature/enhancement\r\n\r\nFollowing the release of v7.preview3, there was a blog post showcasing the support of COM objects displaying their method argument names now.\r\n\r\nhttps://devblogs.microsoft.com/powershell/powershell-7-preview-3/\r\n\r\nGoing further, it would be fantastic if the `New-Object` cmdlet had intellisense for its COM parameter set like what exists for the `TypeName` parameter set instead of completing from the PWD.  It is a common scenario that I have to run registry queries to see which COM classes are available.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\n```powershell\r\nNew-Object -ComObject Shell.App<TAB>\r\n```\r\n\r\nAlso `<C-SPACE>` for all options.",
  "closed_at": null,
  "comments": [
    {
      "author": "HumanEquivalentUnit",
      "author_association": "CONTRIBUTOR",
      "body": "As a user-side / workaround, it's possible to add them with `Register-ArgumentCompleter` as in [this profile script](https://github.com/jcotton42/Profile/blob/master/AllHosts.ps1); line 13 collects and stores them in a cache file, line 74 adds completion for `New-Object -ComObject` parameter.",
      "created_at": "2019-08-22T15:29:15Z",
      "updated_at": "2019-08-22T15:29:15Z"
    },
    {
      "author": "Halkcyon",
      "author_association": "NONE",
      "body": "Posting that here shortened as a form of documentation:\r\n\r\n```powershell\r\nif (-not (Test-Path $PSScriptRoot\\Cache\\CompletionCache.ps1xml)) {\r\n    [void](New-Item -Path $PSScriptRoot\\Cache -ItemType Directory)\r\n\r\n    Get-CimInstance -ClassName Win32_ClassicCOMClassSetting -Filter 'VersionIndependentProgId IS NOT NULL' |\r\n        Select-Object -Property @(\r\n            @{L='ProgId'; E={ $_.VersionIndependentProgId }}\r\n            @{L='Caption'; E={ ($_.VersionIndependentProgId, $_.Caption)[!!$_.Caption] }}\r\n        ) | Export-CliXml $PSScriptRoot\\Cache\\CompletionCache.ps1xml\r\n}\r\n\r\n$script:completionCache = Import-CliXml $PSScriptRoot\\Cache\\CompletionCache.ps1xml\r\n\r\nRegister-ArgumentCompleter -CommandName New-Object -ParameterName ComObject -ScriptBlock {\r\n    param(\r\n        [string]\r\n        $CommandName,\r\n\r\n        [string]\r\n        $ParameterName,\r\n\r\n        [string]\r\n        $WordToComplete,\r\n\r\n        [System.Management.Automation.Language.CommandAst]\r\n        $CommandAst,\r\n\r\n        [System.Collections.IDictionary]\r\n        $FakeBoundParameters\r\n    )\r\n\r\n    $script:completionCache.Where{ $_.ProgId -like \"$WordToComplete*\" }.ForEach{\r\n        [Management.Automation.CompletionResult]::new($_.ProgId, $_.ProgId, 'Type', $_.Caption)\r\n    }\r\n}\r\n```",
      "created_at": "2019-08-22T15:52:21Z",
      "updated_at": "2019-08-23T14:34:08Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "`TabExpansionPlusPlus` also implements this completion, see this [file](https://github.com/lzybkr/TabExpansionPlusPlus/blob/master/Microsoft.PowerShell.Utility.ArgumentCompleters.ps1). Note that many of the other completers in that file should be added to PowerShell.\r\n\r\nIt's also worth mentioning that having a generic caching mechanism for completions like you'd want for `-ComObject` would be a valuable addition.",
      "created_at": "2019-08-23T16:48:41Z",
      "updated_at": "2019-08-23T16:48:41Z"
    }
  ],
  "created_at": "2019-08-22T15:19:56Z",
  "number": 10418,
  "state": "open",
  "title": "Intellisense for `New-Object`'s `ComObject` parameterset",
  "updated_at": "2019-08-23T16:48:41Z"
}