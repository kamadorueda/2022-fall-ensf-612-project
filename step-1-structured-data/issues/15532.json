{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15532",
  "author": "rjmholt",
  "body": "## Summary of the new feature/enhancement\r\n\r\nRelated to https://github.com/PowerShell/PowerShell/issues/15105.\r\n\r\nPSArm accomplishes some DSL functionality by [using](https://github.com/PowerShell/PSArm/blob/e22c29dfea6b2f489964d427cf0ec09270dd7d8b/src/Commands/Template/NewPSArmResourceCommand.cs#L91-L99) the [`ScriptBlock.InvokeWithContext()` API](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.scriptblock.invokewithcontext) to allow the definition of keywords within a user-supplied scriptblock.\r\n\r\nHowever, this is awkward to use, especially from C#, because:\r\n\r\n- The supplied context must be a dictionary of scriptblocks, which makes sense when written in PowerShell as a hashtable but is not as simple in C# (compared to being able to contextually define cmdlets, for example)\r\n- The thread where the scriptblock is executed and where the supplied context has affinity is implicitly defined, so needs to be managed carefully\r\n- Creating variables to supply in the list is not straightforward compared to doing something like providing another dictionary\r\n- No other inputs (like parameters or arguments) can be supplied\r\n\r\nWhen defining DSLs in PowerShell, it's useful to be able to provide commands in a contextual way to be executed in user-provided scriptblocks, and the `ScriptBlock.InvokeWithContext()` API is probably the best way to do this today, but still requires a fair amount of work to use well.\r\n\r\nWe should:\r\n\r\n- Review the API and see if anything can be added to make it easier to use from PowerShell (like better overloads or a cmdlet API)\r\n- See if we can also come up with a more C#/.NET-oriented API/overload that provides some finer grain control over things implicitly taken care of in PowerShell (like the execution thread), while also doing more of the work to make calling the API from C# less of a chore (like using more generalised inputs for variable and command contexts)\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> * The thread where the scriptblock is executed and where the supplied context has affinity is implicitly defined, so needs to be managed carefully\r\n\r\nThis seems to be a stumbling block.\r\nThe API looks like a _local_ closure while we need a _global_ one.\r\nSo that other hosts or applications can use PowerShell flexibly and safely, we either need to get rid of this dependency or create a more appropriate API.",
      "created_at": "2021-06-08T03:40:21Z",
      "updated_at": "2021-06-08T03:40:21Z"
    }
  ],
  "created_at": "2021-06-07T18:04:23Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Language",
    "Needs-Triage"
  ],
  "number": 15532,
  "state": "open",
  "title": "[DSL support] Improve user and module scope interleaving for DSL keywords",
  "updated_at": "2021-06-08T03:40:48Z"
}