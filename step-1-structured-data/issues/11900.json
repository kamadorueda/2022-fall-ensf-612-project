{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11900",
  "author": "metablaster",
  "body": "# Steps to reproduce\r\n\r\n```powershell\r\nfunction Test-Warning\r\n{\r\n\t[CmdletBinding()]\r\n\tparam ()\r\n\r\n\tWrite-Warning -Message \"Test-Warning\"\r\n}\r\n\r\nTest-Warning -WarningVariable SS -WarningAction \"SilentlyContinue\"\r\n$SS\r\n```\r\n\r\n# Expected behavior\r\n\r\nExpected is yellow warning with the WARNING label\r\n```none\r\nWARNING: Test-Warning\r\n```\r\n\r\n# Actual behavior\r\n\r\nActual behavior is just the plain white text, as if we used plain `Write-Host`\r\n```none\r\nTest-Warning\r\n```\r\n\r\n# Environment data\r\n\r\n```powershell\r\n$PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-rc.2\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-rc.2\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n# Why is expected behavior Yellow text with WARNING label?\r\n\r\nBecause if we repeat exactly the same code with `Write-Error` we will get the expected behavior,\r\nwhich is both red and formatted text:\r\n\r\n```powershell\r\nfunction Test-Error\r\n{\r\n\t[CmdletBinding()]\r\n\tparam ()\r\n\r\n\tWrite-Error -Message \"cmdlet error\"\r\n}\r\nTest-Error -ErrorVariable SS -ErrorAction \"SilentlyContinue\"\r\n$SS\r\n```\r\n\r\n# Actual and expected behavior\r\n\r\n```\r\nWrite-Error: C:\\Users\\haxor\\GitHub\\whatever.ps1:84:1\r\nLine |\r\n  84 |  Test-Error -ErrorVariable SS -ErrorAction \"SilentlyContinue\"\r\n\r\n     |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     | cmdlet error\r\n```\r\n\r\n# Note\r\n\r\nIf you run Get-Member on  `SS` variable the result is normal:\r\n\r\n```\r\nSystem.Management.Automation.ErrorRecord\r\nSystem.Management.Automation.WarningRecord\r\n```\r\n\r\nI didn't test this with `Write-Debug`, `Write-Verbose` etc. ie. by using preference variables.\r\n\r\nAlso for example `Write-Information` is not affected by this since there is no INFO label and text is not colored anyway, but it would be great if informational messages get some formatting too.",
  "closed_at": "2020-02-21T19:35:09Z",
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Hi @metablaster \r\nThe coloring for all types of data records is done by the host (console host) so if you use the appropriate `Write-*` you get the appropriate coloring. You can see this by instantiating a WarningRecord\r\n```powershell\r\n{master} PSCore (1:34) >  [System.Management.Automation.WarningRecord]::new(\"Hello\")\r\nHello\r\n{master} PSCore (1:35) >  Write-Warning ([System.Management.Automation.WarningRecord]::new(\"Hello\")) ; write the warning record\r\nWARNING: Hello\r\n```\r\nSo the color & prefix does not generally depend on the _type_ of object, it depends on the _disposition_ of the object.\r\n\r\nExcept for error records that is :-) Because of the way the Console Host muxes and demuxes error and output records, things of type `ErrorRecord` are always printed in red even when displayed through stdout.\r\n\r\n```powershell\r\n{master}PSCore (1:42) >  $ev =  [System.Management.Automation.ErrorRecord]::new([exception]::New(\"exception yo!\"), \"123\", \"NotImplemented\", $null)\r\n{master}PSCore (1:43) >  $ev\r\n\r\nNotImplemented: exception yo! #<-- this shows up in read.\r\n{master}PSCore (1:44) >\r\n```\r\n\r\nPart of the reason things work the way they do is because the non-error information streams were originally simple strings, not instances of a particular type. Over the years, they turned into rich objects but the color-handling code hasn't changed (much).\r\n\r\nSo you can argue that not automagically coloring the various data record is wrong. But you can also argue that the behaviour for ErrorRecord is wrong. IMHO either behaviour is probably fine as is the current mixed behaviour.\r\n\r\n",
      "created_at": "2020-02-20T18:55:24Z",
      "updated_at": "2020-02-20T18:55:24Z"
    },
    {
      "author": "metablaster",
      "author_association": "NONE",
      "body": "@BrucePay Thank you for detailed explanation!\r\nSo basically we need to `Write-Warning` again to format the output.\r\n\r\nI understand that the additional reason (to one you explained) why `Write-Error` is an exception is because if we would be required to `Write-Error` again just to get formatted output then the `$Error` automatic variable would contain duplicate data.\r\n\r\nSince other streams do not have associated automatic variables this is not a problem.\r\n",
      "created_at": "2020-02-21T19:35:09Z",
      "updated_at": "2020-02-21T19:35:09Z"
    }
  ],
  "created_at": "2020-02-20T03:09:28Z",
  "number": 11900,
  "state": "closed",
  "title": "WarningVariable incorrect output",
  "updated_at": "2020-02-21T19:35:09Z"
}