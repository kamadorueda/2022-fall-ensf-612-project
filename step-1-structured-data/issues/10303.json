{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10303",
  "author": "SeeminglyScience",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\nAdd-Type -TypeDefinition 'public enum Testing { Yes, yes }'\r\n[Testing] | Get-Member -Static\r\n```\r\n\r\n# Expected behavior\r\n\r\nEither get both \"Yes\" members, or just the last one processed. Mainly I'd expect it not to throw.\r\n\r\n# Actual behavior\r\n\r\n```none\r\nGet-Member : The field or property: \"yes\" for type: \"Testing\" differs only in letter casing from the field or property: \"Yes\". The type must be Common Language Specification (CLS) compliant.\r\nAt line:1 char:13\r\n+ [Testing] | Get-Member -Static\r\n+             ~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : NotSpecified: (:) [Get-Member], ExtendedTypeSystemException\r\n+ FullyQualifiedErrorId : NotACLSComplaintField,Microsoft.PowerShell.Commands.GetMemberCommand\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-preview.2\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-preview.2\r\nOS                             Microsoft Windows 10.0.18362\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n# Other\r\n\r\nHere's where it throws in [DotNetAdapter](https://github.com/PowerShell/PowerShell/blob/7af38294dbe3ad1a73b6b72c64eb36915f1cac87/src/System.Management.Automation/engine/CoreAdapter.cs#L3286-L3298).\r\n\r\nI ran into this while writing something that uses [dnlib](https://github.com/0xd4d/dnlib).  Their [MethodAttributes](https://github.com/0xd4d/dnlib/blob/6043d9133fccf1073b2b5efed5fa4eed5a7c05fd/src/DotNet/MethodAttributes.cs#L53-L56) enum has two values for `PInvokeImpl` (~I'd guess they had the one with the incorrect casing originally and just added one with the right casing as to not break anyone.  That's just a guess though~ Actually looking at the rest, I think it's because they're using both the `System.Reflection` names as well as the EMCA spec names.)",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems we discussed this earlier. PowerShell is case-insensitive. Even if we get these values, we won\u2019t be able to use them. There is not such problematic types in .Net Core. The error message says/assumes that it is \"by design\" - \"The type must be Common Language Specification (CLS) compliant.\"",
      "created_at": "2019-08-06T10:43:49Z",
      "updated_at": "2019-08-06T10:43:49Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@isazonov given we seemingly can't guarantee that for every third party library we might need to work with at times, maybe we should have the cmdlet emit warnings rather than hard failing?",
      "created_at": "2019-08-06T10:48:23Z",
      "updated_at": "2019-08-06T10:48:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 I don't remember where we discussed this previously but a conclusion was that is bad practice and we should follow .Net Core best practice.",
      "created_at": "2019-08-06T11:02:28Z",
      "updated_at": "2019-08-06T11:02:28Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Of course. But even if it's bad practice I don't know that it makes sense to completely prevent users from interacting with a third-party library that is designed with that flaw built in. We can't go around telling people they can't use this library **at all** because it breaks a naming rule?\r\n\r\nPowerShell's general principle is that it doesn't stop you from shooting yourself in the foot, if you really want to do it. This seems an unwise safeguard given we can't guarantee the convention is followed everywhere. It renders an entire library unusable for what might be one or two instances where the rule is broken.\r\n\r\n/cc @SteveL-MSFT @BrucePay ",
      "created_at": "2019-08-06T11:07:42Z",
      "updated_at": "2019-08-06T11:08:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 We could think about the fix if there was a popular library with similar types but the funny thing is that it would never become popular with such a terrible design.\r\nIf you look at the implementation of classes, then we also do not distinguish between methods with different cases in names like ToString() vs tostring().",
      "created_at": "2019-08-06T11:16:18Z",
      "updated_at": "2019-08-06T11:18:15Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "I agree that it makes sense to throw when *declaring* a class like that.  I don't see how we gain anything from throwing here though.\r\n\r\n> The error message says/assumes that it is \"by design\" - \"The type must be Common Language Specification (CLS) compliant.\"\r\n\r\nSorta.  It seems more like a \"this will probably never happen so I'm gonna just throw\" exception.  Especially since that seems to be the only place we care about CLS compliance.  We don't throw when there's a member with an unmanaged pointer or *any unsigned integer other than byte*.\r\n\r\nIf it was a big lift I'd be more inclined to agree, but it looks like it's just removing the throw and replacing whatever member is already there.  That's what PowerShell does with most member binding anyway.",
      "created_at": "2019-08-06T11:57:43Z",
      "updated_at": "2019-08-06T11:58:00Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov see the bottom portion of the issue description - it is already present in a widely used third party library, unfortunately.",
      "created_at": "2019-08-06T12:22:21Z",
      "updated_at": "2019-08-06T12:22:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> it is already present in a widely used third party library\r\n\r\nCould you point a code of the lib where such type is defined? Or is there anything more tricky?",
      "created_at": "2019-08-06T13:43:25Z",
      "updated_at": "2019-08-06T13:43:25Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> > it is already present in a widely used third party library\r\n> \r\n> Could you point a code of the lib where such type is defined? Or is there anything more tricky?\r\n\r\nYeah it's [here](https://github.com/0xd4d/dnlib/blob/6043d9133fccf1073b2b5efed5fa4eed5a7c05fd/src/DotNet/MethodAttributes.cs#L53-L56).",
      "created_at": "2019-08-06T14:05:33Z",
      "updated_at": "2019-08-06T14:05:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Oh, I think they used the bad pattern to disguise a breaking change because of typo. The commit name [\"Add MethodAttributes.PInvokeImpl for compat\"](https://github.com/0xd4d/dnlib/commit/29aa9ab4aec5f1505079d80a504d83ae0d90ccf3)",
      "created_at": "2019-08-06T14:33:20Z",
      "updated_at": "2019-08-06T14:33:20Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Yeah that makes sense.  I wouldn't argue that it was a great idea on their part, but it is what it is \ud83e\udd37\u200d\u2642 ",
      "created_at": "2019-08-06T15:11:40Z",
      "updated_at": "2019-08-06T15:11:40Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Elaborating on @SeeminglyScience's suggestion, the following distinction makes senses to me:\r\n\r\n* Prevent enum values that are case variations of each other when _declaring_ `enum`'s _in PowerShell code_.\r\n\r\n* Quietly accept such variations when _using_ such enums (that by definition must then have been implemented elsewhere).\r\n\r\nIn the case at hand, where the case variations have the _same_ numeric value, that is mostly unproblematic - except that calls such as `[enum]::GetNames()` and `[enum]::GetValues()` would show _all_ variations / duplicate entries.\r\n\r\nIf they have _distinct_ numeric values, things get complicated, given that casting from strings is case-_sensitive_, if an exact case match is used. The following example demonstrates that and also shows that there already _are_ situations where you can use such types - with casts and implicit conversions (whereas you cannot use them with `Get-Member` and static member access (e.g., `[Tst]::foo`)):\r\n\r\n```powershell\r\n# Define a rogue enum \r\nAdd-Type @'\r\npublic enum Tst {\r\n  Foo = 5,\r\n  foo = 1   // !! case variation with a distinct value\r\n}\r\n'@\r\n\r\n# Note: The `* -1` is just a quick way to show the numeric value.\r\n[Tst] 'foo' * -1 # -> -1 !! case-exact match found specific value\r\n[Tst] 'Foo' * -1 # -> -5 !! case-exact match found specific value\r\n[Tst] 'fOo' * -1 # -> -1 - case-inexact match defaults to *numerically lowest* entry.\r\n```\r\n\r\nDoes that ever happen in the wild? It certainly sounds ill-advised.\r\n\r\nThe question is whether retaining an explicit check and exception for this particular corner case is worth it / is feasible performance-wise.",
      "created_at": "2019-08-06T15:15:08Z",
      "updated_at": "2019-09-06T13:30:51Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@PowerShell/powershell-committee discussed this at length, and we're highly concerned with the performance and implementation implications of doing disambiguation in the property binder, DotNetAdapter, other adapters, etc. \r\n\r\nGiven all that, our current stance is that we only support CLS-compliant assemblies (which, interestingly, is also the case for VB.NET). ",
      "created_at": "2019-09-04T22:35:24Z",
      "updated_at": "2019-09-04T22:35:24Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> we're highly concerned with the performance and implementation implications of doing disambiguation in the property binder, DotNetAdapter, other adapters, etc.\r\n\r\nYou don't need to disambiguate, you just need to not throw.\r\n\r\nHere's the code now:\r\n\r\n```csharp\r\nvar previousMember = (PropertyCacheEntry)typeProperties[fieldName];\r\nif (previousMember == null)\r\n{\r\n    typeProperties.Add(fieldName, new PropertyCacheEntry(field));\r\n}\r\nelse\r\n{\r\n    // A property/field declared with new in a derived class might appear twice\r\n    if (!string.Equals(previousMember.member.Name, fieldName))\r\n    {\r\n        throw new ExtendedTypeSystemException(\"NotACLSComplaintField\", null,\r\n            ExtendedTypeSystem.NotAClsCompliantFieldProperty, fieldName, type.FullName, previousMember.member.Name);\r\n    }\r\n}\r\n```\r\n\r\nThe else clause can just be changed to\r\n\r\n```csharp\r\ntypeProperties[fieldName] = new PropertyCacheEntry(field);\r\n```\r\n\r\nOr even just `continue`.  I'm having a really hard time seeing what's gained by throwing there instead of just ignoring the property.\r\n\r\n> Given all that, our current stance is that we only support CLS-compliant assemblies (which, interestingly, is also the case for VB.NET).\r\n\r\nThis is the only instance where PowerShell checks for CLS compliance.  I think it made for a convenient error message at the time, but it's not a reason to throw, nor is it something PowerShell actually strives for. ",
      "created_at": "2019-09-05T03:26:18Z",
      "updated_at": "2019-09-05T03:26:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> we only support CLS-compliant assemblies\r\n\r\n I think we could document this.\r\n@joeyaiello Thoughts?\r\n",
      "created_at": "2019-09-05T07:39:47Z",
      "updated_at": "2019-09-05T07:39:47Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Since it can be a pain to find all of the rules, I took out the list of from EMCA-335 and put it in [this gist](https://gist.github.com/SeeminglyScience/ef3b01c17c4bba0f89129e7656424ef7).  Most of those, if PowerShell follows them at all, it's incidentally.  Others aren't checked at all.\r\n\r\nThere are also some additional guidelines in the [Common Language Specification](https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/12a7a7h3(v=vs.100)) docs page.  At a glance, one that stands out is this:\r\n\r\n> The .NET Framework class library includes types that correspond to the primitive data types that compilers use.\r\n>\r\n> Of these types, the following are CLSCompliant: Byte,\u00a0Int16,\u00a0Int32,Int64,\u00a0Single, Double, Boolean, Char,\u00a0Decimal,\u00a0IntPtr, and\u00a0String. For more information about these types, see the table of types in the\u00a0.NET Framework Class Library.\r\n\r\nThere are even classes in SMA that violate this rule.  Here's some classes that have either public properties or parameters of type `uint`.\r\n\r\n```raw\r\nMicrosoft.PowerShell.DeserializingTypeConverter\r\nSystem.Management.Automation.InformationRecord\r\nSystem.Management.Automation.CustomItemFrame\r\nSystem.Management.Automation.WideControl\r\nSystem.Management.Automation.Runspaces.TypeData\r\nSystem.Management.Automation.Runspaces.RemotingInformationRecord\r\nSystem.Management.Automation.ChildItemCmdletProviderIntrinsics\r\nSystem.Management.Automation.PSPrimitiveDictionary\r\nSystem.Management.Automation.CustomEntryBuilder\r\n```\r\n\r\nCLS compliance is **not** a reason to throw here.",
      "created_at": "2019-09-05T13:36:45Z",
      "updated_at": "2019-09-05T13:36:45Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Given _this_ rule is a thing for CLS compliance, PowerShell is by its very nature not at all CLS compliant. \ud83d\ude04 \r\n\r\n> Boxed value types are not CLS-compliant. ([\u00a7I.8.2.4](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-335.pdf#page=47&zoom=100,0,656))",
      "created_at": "2019-09-05T13:46:26Z",
      "updated_at": "2019-09-05T13:46:26Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 \r\n\r\n> Given this rule is a thing for CLS compliance, PowerShell is by its very nature not at all CLS compliant. \ud83d\ude04\r\n> \r\n> Boxed value types are not CLS-compliant. (\u00a7I.8.2.4)\r\n\r\nActually that one is kind of complicated.  Every value type has a specific type that represents a boxed reference version of it,  but you can't refer to that type by name. This one is in the category of \"PowerShell following incidentally\".\r\n\r\nHere's the guidance on that rule from [\u00a7I.8.2.4](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-335.pdf#page=47&zoom=100,0,656).\r\n\r\n> CLS Rule 3: Boxed value types are not CLS-compliant.\r\n[Note:\r\nIn lieu of boxed types, use `System.Object`, `System.ValueType`, or `System.Enum`, as appropriate.\r\nCLS (consumer): Need not import boxed value types.\r\nCLS (extender): Need not provide syntax for defining or using boxed value types.\r\nCLS (framework): Shall not use boxed value types in its publicly exported aspects. end note] ",
      "created_at": "2019-09-05T14:03:54Z",
      "updated_at": "2019-09-05T14:03:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems you rise another topic then original issue. Original issue was \"allow type names with different cases\" and answer was that \"we only support CLS-compliant\" that is we ignore case in type names and it is a huge work to change this.\r\nIf this doesn't work we should throw to inform users.",
      "created_at": "2019-09-05T14:07:45Z",
      "updated_at": "2019-09-05T14:07:45Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "I don't agree that this is a new topic.  PowerShell does *not* only support CLS compliant types.  This *happens* to be a CLS rule, and the rule *happened* to pop into the writers mind when writing the exception.  But that's it, in no other way does PowerShell require CLS compliance.  I also disagree that it is difficult to change this.\r\n\r\nI think the topic discussed by the committee was if it's possible/feasible to disambiguate the two members based on case.  While that would be kinda neat, the discussion should have been about silently ignoring the second member or some other path that isn't throwing.",
      "created_at": "2019-09-05T14:37:34Z",
      "updated_at": "2019-09-05T14:37:34Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I marked this issue for committee review for the new ask:\r\n> the discussion should have been about silently ignoring the second member or some other path that isn't throwing.",
      "created_at": "2019-09-05T19:30:06Z",
      "updated_at": "2019-09-05T19:30:06Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If we remove the throw would this not mislead users that this should work?\r\n",
      "created_at": "2019-09-06T03:50:36Z",
      "updated_at": "2019-09-06T03:50:36Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> If we remove the throw would this not mislead users that this should work?\r\n\r\nIt would work, it just wouldn't process the second member.",
      "created_at": "2019-09-06T12:02:13Z",
      "updated_at": "2019-09-06T12:02:13Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> It would work, it just wouldn't process the second member.\r\n\r\nThe thing is that the reflection APIs don't guarantee the order of the returned members. That means it's undefined which member you will get.",
      "created_at": "2019-09-06T16:53:02Z",
      "updated_at": "2019-09-06T16:53:02Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Good point, @daxian-dbw.\r\n\r\nLet me **summarize the current - inconsistent - behavior** (as of v7.0.0-preview.3), which may inform the way forward:\r\n\r\n* **_Methods_** that are case variations of each other (e.g, `method` and `Method`) are **quietly accepted and only ONE variation takes effect**.\r\n    * Since the order of member enumeration is not guaranteed by the reflection APIs, **it is undefined which method \"wins\".**\r\n* **_Properties_** and **_fields_** cause an explicit error message, making the **type unusable**.\r\n    * The **only - limited - exception** are **`System.Enum`-derived types**, where case variations _can_ be used, but **ONLY IF**: \r\n        * You **use only _casts_** to access the values; e.g., `[MyEnum] 'foo'` rather than static property access `[MyEnum]::foo` - however, the instance `.value__` property can be accessed on a cast value (e.g., `([MyEnum] 'foo').value__`)\r\n        * Unlike with methods:\r\n            * **ALL case variations are accessible by cast _if specified case-exactly_.**\r\n            * **Otherwise**, it is **seemingly the _numerically lowest_ value** among the case variants that is returned.\r\n\r\n---\r\n\r\nI see three ways forward:\r\n\r\n* (a) To avoid the problem altogether, _categorically_ prevent types with members whose names differ only by case; that is, also prevent those cases where such types can currently be used. (Of course, this could be a backward-compatibility concern.)\r\n\r\n* (b) Use the \"you're on your own\" philosophy already being employed  by _method_ case variations also for properties and fields:\r\n     * _One_ definition will win, but it's undefined which one that is.\r\n     * If you need predictable, case-exact access, use reflection (e.g., `$obj.GetType().GetMethod('method').Invoke($obj, @())`)\r\n\r\n* (c) Do extra work and impose _case-sensitive lexical_ ordering when PowerShell caches the members, and _predictably_ choose the one that comes first based on that order (irrespective of what case variation the user specifies _at runtime_).\r\n  * Again, users can use reflection for access to the \"eclipsed\" case variations.\r\n\r\nOnly (b) and (c) would allow use of such \"rogue\" types, and making them usable - even with _documented_ limitations - seems preferable to me.\r\n\r\n(c) is the most user-friendly option; the extra work incurred shouldn't generally impact performance, as needing to deal with case variations - hidden behind already extant conditionals - will be the exception, not the rule.\r\n\r\n\r\n\r\n",
      "created_at": "2019-09-06T19:36:09Z",
      "updated_at": "2019-09-06T19:54:05Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "P.S.: Choosing (b) or (c) would also allow us to get rid of this publicly visible typo (visible via `ErrorRecord.FullyQualifiedErrorId`): \r\n\r\n```\r\nthrow new ExtendedTypeSystemException( >>> \"NotACLSComplaintField\" <<<, ..\r\n```\r\n\r\nNot that I'm complianing (just kidding).",
      "created_at": "2019-09-06T19:58:37Z",
      "updated_at": "2019-09-06T19:58:50Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "As for test code and a possible implementation of (b) - though note that the difference in behavior between casts and property access is _not_ addressed:\r\n\r\n```powershell\r\n# Define a rogue enum and class\r\nAdd-Type @'\r\n  public enum TstE {\r\n    foo = 9,\r\n    Foo = 1\r\n  }\r\n  public class TstC {\r\n    public string field = \"field\" ;\r\n    public string Field = \"Field\";\r\n    //\r\n    public string prop { get; } = \"prop\" ;\r\n    public string Prop { get; } = \"Prop\";\r\n    //\r\n    public string method() { return \"method\"; }\r\n    public string Method() { return \"Method\"; }\r\n  }\r\n'@\r\n\r\n# Access by *cast* already works with enums, but case-SENSITIVELY:\r\n([TstE] 'FOO').value__ # -> 1 - case-inexact match defaults to *numerically lowest* entry.\r\n([TstE] 'foo').value__ # -> 9 !! case-exact match found specific value\r\n([TstE] 'Foo').value__ # -> 1 !! case-exact match found specific value\r\n\r\n'---'\r\n\r\n# Access by static property:\r\n# If the explicit checks in place as of PowerShell Core 7.0.0-preview.3 are\r\n# deactivated in favor of the approach already used for *methods*:\r\n# All return  the *first* definition in this simple case, though that is not *generally*\r\n# guaranteed, because the reflection API's don't guarantee enumeration order.\r\n([TstE]::FOO).value__\r\n([TstE]::foo).value__\r\n([TstE]::Foo).value__\r\n\r\n$o = [TstC]::new()\r\n\r\n# If the explicit checks in place as of PowerShell Core 7.0.0-preview.3 are\r\n# deactivated in favor of the approach already used for *methods*:\r\n# All return the *1st* definition in this simple case, though that is not *generally*\r\n# guaranteed, because the reflection API's don't guarantee enumeration order.\r\n$o.FIELD\r\n$o.Field\r\n$o.field\r\n\r\n'---'\r\n\r\n# If the explicit checks in place as of PowerShell Core 7.0.0-preview.3 are\r\n# deactivated in favor of the approach already used for *methods*:\r\n# All return the *1st* definition in this simple case, though that is not *generally*\r\n# guaranteed, because the reflection API's don't guarantee enumeration order.\r\n$o.PROP\r\n$o.Prop\r\n$o.prop\r\n\r\n'---'\r\n\r\n# All return the *first* definition in this simple case, though that is not *generally*\r\n# guaranteed, because the reflection API's don't guarantee enumeration order.\r\n$o.METHOD()\r\n$o.Method()\r\n$o.method()\r\n'---'\r\n\r\n# All return the *first* definition in this simple case, though that is not *generally*\r\n# guaranteed, because the reflection API's don't guarantee enumeration order.\r\n$o.METHOD()\r\n$o.Method()\r\n$o.method()\r\n```\r\n\r\nTo make the above work as described, consistent with how methods are already handled (the code currently only works if you comment out the _property_ and _field_ definitions), _two_ locations would have to be touched, and the member enumerated _first_ should win (not sure I've covered all bases):\r\n\r\n* In [`PopulatePropertyReflectionTable()`](https://github.com/PowerShell/PowerShell/blob/5a66306c715ddb809318bfd19de33c4470ee6975/src/System.Management.Automation/engine/CoreAdapter.cs#L3293), remove the `if (!string.Equals(property.Name, firstProperty.Name, StringComparison.Ordinal)) ... { throw new ExtendedTypeSystemException(\"NotACLSComplaintProperty\", ... }` statement:\r\n\r\n```csharp\r\n                    if (previousMember == null)\r\n                    {\r\n                        typeProperties.Add(fieldName, new PropertyCacheEntry(field));\r\n                    }\r\n                    else\r\n                    {\r\n                        // A property/field declared with new in a derived class might appear twice\r\n                        // Also, there may be case variations in non-CLS-compliant types; we ignore subsequent ones.\r\n                       // <remove `if` statement>\r\n                    }\r\n```\r\n\r\n* Ditto in [`PopulateSingleProperty()`](https://github.com/PowerShell/PowerShell/blob/5a66306c715ddb809318bfd19de33c4470ee6975/src/System.Management.Automation/engine/CoreAdapter.cs#L3314)\r\n\r\n```csharp\r\n            else\r\n            {\r\n                var firstProperty = previousPropertyEntry[0];\r\n               \r\n                // <remove `if` statement>\r\n\r\n                if (PropertyAlreadyPresent(previousPropertyEntry, property))\r\n                {\r\n                    return;\r\n                }\r\n\r\n                previousPropertyEntry.Add(property);\r\n            }\r\n```",
      "created_at": "2019-09-06T20:38:01Z",
      "updated_at": "2019-09-06T21:20:33Z"
    },
    {
      "author": "0xd4d",
      "author_association": "NONE",
      "body": "@SeeminglyScience I've fixed this in dnlib, should be available in the next version (or you can compile the source code yourself)",
      "created_at": "2019-10-21T16:07:50Z",
      "updated_at": "2019-10-21T16:07:50Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Thanks @0xd4d! Big fan of your projects btw, immensely helpful \u2764\ufe0f ",
      "created_at": "2019-10-21T17:23:36Z",
      "updated_at": "2019-10-21T17:23:36Z"
    },
    {
      "author": "0xd4d",
      "author_association": "NONE",
      "body": "I think most .NET libraries are not CLS compliant and the reason is simple, most people use C#.\r\n\r\nPowerShell shouldn't throw in this case, it's fine to say this is undefined behavior as long as it doesn't throw.",
      "created_at": "2019-10-21T19:34:29Z",
      "updated_at": "2019-10-21T19:35:15Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2019-10-23T00:00:44Z",
      "updated_at": "2019-10-23T00:00:44Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, we propose the following behavior:\r\n\r\n- if there is a single member, the casing you provide doesn't matter and we will continue to match on that member\r\n- if there are two members differing by casing, and you provide casing that matches one of them exactly, we will return that member\r\n- if there are two members differing by casing, and you provide casing that doesn't match any, then we will return an new error indicating such (nothing about CLS compliance)\r\n",
      "created_at": "2019-10-28T19:54:20Z",
      "updated_at": "2019-10-28T19:54:20Z"
    }
  ],
  "created_at": "2019-08-05T18:41:51Z",
  "number": 10303,
  "state": "open",
  "title": "REQ: Don't throw for a class with member names differing by only by casing",
  "updated_at": "2019-10-28T19:54:41Z"
}