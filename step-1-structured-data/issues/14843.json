{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14843",
  "author": "hoppi1804",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\nIt seems the SDK will not raise any events from Debug/Verbose/Warning Streams, when called remotely by \"Invoke-Command\". Events for Error and Information streams are raised without any issues.\r\n\r\nPlease see the repro. Maybe I am overlooking something obvious?\r\n\r\n## Steps to reproduce\r\n\r\n```c#\r\nusing System;\r\nusing System.Management.Automation;\r\nusing System.Management.Automation.Runspaces;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.PowerShell;\r\n\r\nnamespace PowerShellRepro\r\n{\r\n    public class PowerShellService\r\n    {\r\n        private void General_DataAdding(object sender, DataAddingEventArgs e)\r\n        {\r\n            switch (e.ItemAdded)\r\n            {\r\n                case VerboseRecord verboseRecord:\r\n                    Console.WriteLine($\"Verbose: {verboseRecord.Message}\");\r\n                    break;\r\n                case DebugRecord debugRecord:\r\n                    Console.WriteLine($\"Debug:   {debugRecord.Message}\");\r\n                    break;\r\n                case ErrorRecord errorRecord:\r\n                    Console.WriteLine($\"Error:   {errorRecord.Exception.Message}\");\r\n                    break;\r\n                case InformationRecord informationRecord:\r\n                    Console.WriteLine($\"Info:    {informationRecord.MessageData}\");\r\n                    break;\r\n            }\r\n        }\r\n\r\n        public async Task RunTestAsync(string remoteSystem)\r\n        {\r\n            var iss = InitialSessionState.CreateDefault();\r\n            iss.ExecutionPolicy = ExecutionPolicy.Unrestricted;\r\n            using var runspace = RunspaceFactory.CreateRunspace(iss);\r\n\r\n            runspace.Open();\r\n            runspace.SessionStateProxy.SetVariable(\"VerbosePreference\", \"Continue\");\r\n            runspace.SessionStateProxy.SetVariable(\"DebugPreference\", \"Continue\");\r\n\r\n            using var poshSession = System.Management.Automation.PowerShell.Create();\r\n\r\n\r\n            poshSession.Streams.Verbose.DataAdding += General_DataAdding;\r\n            poshSession.Streams.Debug.DataAdding += General_DataAdding;\r\n            poshSession.Streams.Error.DataAdding += General_DataAdding;\r\n            poshSession.Streams.Information.DataAdding += General_DataAdding;\r\n\r\n            poshSession.Runspace = runspace;\r\n\r\n            var psScript = @\"\r\n\r\n[CmdletBinding()]\r\nparam(\r\n    [string] $computerName\r\n)\r\n\r\nWrite-Verbose \"\"[$($env:ComputerName)] Local - Test before - Remote System [$($computerName)]\"\"\r\nWrite-Debug   \"\"[$($env:ComputerName)] Local - Posh Version: $($PsVersionTable.PSVersion)\"\"\r\n\r\nInvoke-Command -ComputerName $computerName -ScriptBlock { \r\n    [CmdletBinding()]\r\n    param() \r\n    \r\n    Write-Information -MessageData \"\"[$env:ComputerName] Remote - Test Informational before\"\";\r\n    $InformationPreference = \"\"Continue\"\";\r\n    Write-Information -MessageData \"\"[$env:ComputerName] Remote - Test Informational after\"\";\r\n    Write-Information \"\"[$($env:ComputerName)] Remote - Posh Version: $($PsVersionTable.PSVersion)\"\";\r\n\r\n    Write-Error \"\"[$($env:ComputerName)] Remote - Test Error\"\";\r\n\r\n    Write-Verbose \"\"[$($env:ComputerName)] Remote - Test Verbose before\"\"; \r\n    $VerbosePreference = \"\"Continue\"\"; \r\n    Write-Verbose \"\"[$($env:ComputerName)] Remote - Test Verbose after\"\";\r\n\r\n    Write-Debug \"\"[$($env:ComputerName)] Remote - Test Debug before\"\"; \r\n    $DebugPreference = \"\"Continue\"\"; \r\n    Write-Debug \"\"[$($env:ComputerName)] Remote - Test Debug after\"\";\r\n};\r\nWrite-Verbose \"\"[$($env:ComputerName)] Local - Test after\"\"\r\n\r\n\";\r\n\r\n            poshSession.Commands.AddScript(psScript);\r\n            poshSession.AddParameter(\"ComputerName\", remoteSystem);\r\n            //poshSession.AddParameter(\"Verbose\", true);\r\n            //poshSession.AddParameter(\"Debug\", true);\r\n\r\n            await poshSession.InvokeAsync().ConfigureAwait(false);\r\n        }\r\n    }\r\n\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var defaultRemoteSystem = \"<somesystemname>\";\r\n\r\n            Console.WriteLine($\"Please enter servername [{defaultRemoteSystem}]\");\r\n\r\n            var remoteSystem = Console.ReadLine();\r\n            if (string.IsNullOrEmpty(remoteSystem))\r\n            {\r\n                remoteSystem = defaultRemoteSystem;\r\n            }\r\n\r\n            var ps = new PowerShellService();\r\n\r\n            ps.RunTestAsync(remoteSystem).Wait();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Expected behavior\r\n\r\n```none\r\nPlease enter servername [<somesystemname>]\r\nshph01\r\nVerbose: [<localSystem>] Local - Test before - Remote System [shph01]\r\nDebug:   [<localSystem>] Local - Posh Version: 7.1.2\r\nInfo:    [<somesystemname>] Remote - Test Informational before\r\nInfo:    [<somesystemname>] Remote - Test Informational after\r\nInfo:    [<somesystemname>] Remote - Posh Version: 5.1.17763.1490\r\nError:   [<somesystemname>] Remote - Test Error\r\nVerbose:   [<somesystemname>] Remote - Test Verbose before\r\nVerbose:   [<somesystemname>] Remote - Test Verbose after\r\nDebug:   [<somesystemname>] Remote - Test Debug before\r\nDebug:   [<somesystemname>] Remote - Test Debug after\r\nVerbose: [<localSystem>] Local - Test after\r\n```\r\n\r\n## Actual behavior\r\n\r\n```none\r\nPlease enter servername [<somesystemname>]\r\nshph01\r\nVerbose: [<localSystem>] Local - Test before - Remote System [shph01]\r\nDebug:   [<localSystem>] Local - Posh Version: 7.1.2\r\nInfo:    [<somesystemname>] Remote - Test Informational before\r\nInfo:    [<somesystemname>] Remote - Test Informational after\r\nInfo:    [<somesystemname>] Remote - Posh Version: 5.1.17763.1490\r\nError:   [<somesystemname>] Remote - Test Error\r\nVerbose: [<localSystem>] Local - Test after\r\n```\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\nlocal System: 7.0.x / 7.1.x\r\nremote System: 5.1.17763\r\n```none\r\n\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@hoppi1804 can you confirm if this worked with Windows PowerShell 5.1?  Would be good to know if this is a regression.  Thanks.",
      "created_at": "2021-03-04T01:18:01Z",
      "updated_at": "2021-03-04T01:18:01Z"
    },
    {
      "author": "hoppi1804",
      "author_association": "NONE",
      "body": "No, with Microsoft.PowerShell.5.1.ReferenceAssemblies v1.0.0 this is not working, either. Using (almost) same code with .NET Framework 4.8.",
      "created_at": "2021-03-04T06:04:44Z",
      "updated_at": "2021-03-04T06:05:16Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This seems to be \"by design\" if it doesn't work in 5.1.  cc @PaulHigin if he has any insights",
      "created_at": "2021-03-05T23:08:32Z",
      "updated_at": "2021-03-05T23:08:32Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "I see this behavior too, and it looks like a bug to me.\r\n```powershell\r\n$ps.AddScript('icm . { write-verbose \"hello\" -verbose }').Invoke()\r\n$ps.Streams\r\n\r\nError       : {}\r\nProgress    : {}\r\nVerbose     : {}\r\nDebug       : {}\r\nWarning     : {}\r\nInformation : {}\r\n```\r\n\r\nIt looks like Invoke-Command is not writing to the verbose, debug streams.  But it is strange that informational data stream works.\r\nMy guess is that Invoke-Command debug verbose/data is going through client remote host method and bypassing the data stream handling.  There was an issue about this years ago but I don't remember the details.",
      "created_at": "2021-03-05T23:57:51Z",
      "updated_at": "2021-03-05T23:58:55Z"
    },
    {
      "author": "PeteBoyRocket",
      "author_association": "NONE",
      "body": "I _think_ I'm seeing the same issue, where my Write-Warning calls seem to ignore ` -WarningAction Continue` when used in a Job in a `ForEach-Object -Parallel` loop - please can someone confirm? If not I'll raise a separate issue:\r\n\r\n```\r\n$InformationPreference = 'Continue'\r\nWrite-Information \"Script start. InformationPreference = $InformationPreference, WarningPreference = $WarningPreference, ErrorActionPreference = $ErrorActionPreference\"\r\n\r\nWrite-Information \"Starting test NOT in parallel loop...\"\r\n\r\n$notInParallelLoopJobScriptBlock = [scriptblock]::Create(\r\n    {\r\n        param($tenant) \r\n        Write-Information \"Started job for $tenant. InformationPreference = $InformationPreference, WarningPreference = $WarningPreference, ErrorActionPreference = $ErrorActionPreference\"\r\n        Start-Sleep -Seconds (Get-Random -Minimum 1 -Maximum 5)\r\n        \r\n        Write-Warning \"Warning here! $tenant\"\r\n        Write-Warning \"Warning here forcing warningAction to continue! $tenant\" -WarningAction Continue\r\n        Write-Information \"Finished job for $tenant\" \r\n    })\r\n\r\n$notInParallelLoopJob = Start-Job $notInParallelLoopJobScriptBlock -ArgumentList 'a'\r\n\r\nWait-Job $notInParallelLoopJob\r\nReceive-Job $notInParallelLoopJob\r\n\r\nWrite-Information \"Finished test NOT in parallel loop.\"\r\nWrite-Information \"Starting test IN parallel loop...\"\r\n\r\n$tenants = 'b'\r\n\r\n$tenants | ForEach-Object -Parallel {\r\n    Write-Information \"Updating $_\"\r\n\r\n    $inParallelLoopJobScriptBlock = [scriptblock]::Create(\r\n        {\r\n            param($tenant) \r\n            Write-Information \"Started job for $tenant. InformationPreference = $InformationPreference, WarningPreference = $WarningPreference, ErrorActionPreference = $ErrorActionPreference\"\r\n            Start-Sleep -Seconds (Get-Random -Minimum 1 -Maximum 5)\r\n            \r\n            Write-Warning \"Warning here! $tenant\"\r\n            Write-Warning \"Warning here! $tenant\" -WarningAction Continue\r\n            Write-Information \"Finished job for $tenant\" \r\n        })\r\n\r\n    $inParallelLoopJob = Start-Job $inParallelLoopJobScriptBlock -ArgumentList $_\r\n    \r\n    Wait-Job $inParallelLoopJob\r\n    Receive-Job $inParallelLoopJob\r\n    \r\n    Write-Information \"Finished $_\"\r\n}\r\n\r\nWrite-Information \"Finished test IN parallel loop.\"\r\nWrite-Information 'Script end'\r\n```\r\n\r\nResults in:\r\n```\r\nScript start. InformationPreference = Continue, WarningPreference = Continue, ErrorActionPreference = Stop\r\nStarting test NOT in parallel loop...\r\n\r\nId     Name            PSJobTypeName   State         HasMoreData     Location             Command\r\n--     ----            -------------   -----         -----------     --------             -------\r\n238    Job238          BackgroundJob   Completed     True            localhost            \u2026\r\nStarted job for a. InformationPreference = SilentlyContinue, WarningPreference = Continue, ErrorActionPreference = Continue\r\nWARNING: Warning here! a\r\nWARNING: Warning here forcing warningAction to continue! a\r\nFinished job for a\r\nFinished test NOT in parallel loop.\r\nStarting test IN parallel loop...\r\nUpdating b\r\n240    Job240          BackgroundJob   Completed     False           localhost            \u2026\r\nStarted job for b. InformationPreference = SilentlyContinue, WarningPreference = Continue, ErrorActionPreference = Continue\r\nFinished job for b\r\nFinished b\r\nFinished test IN parallel loop.\r\nScript end\r\n```\r\n",
      "created_at": "2021-04-03T06:46:28Z",
      "updated_at": "2021-04-03T06:46:28Z"
    }
  ],
  "created_at": "2021-02-18T16:48:06Z",
  "labels": [
    "Issue-Bug",
    "WG-Remoting"
  ],
  "number": 14843,
  "state": "open",
  "title": "Invoke-Command does not raise Verbose/Debug/Warning Stream events from Microsoft.PowerShell.SDK 7.x",
  "updated_at": "2021-04-03T06:46:28Z"
}