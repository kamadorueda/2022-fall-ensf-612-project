{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12817",
  "author": "asklar",
  "body": "# Steps to reproduce\r\n\r\n```powershell\r\n(Measure-Command { dir -Recurse C:\\rnw | Out-File C:\\temp\\1.txt }).TotalSeconds\r\n```\r\ntakes 15.222019 seconds\r\nwhereas CMD:\r\n```txt\r\nC:\\temp\\timecmd.cmd \"dir /s C:\\rnw > C:\\temp\\1.txt\"\r\n```\r\ncommand took 0:0:8.47 (8.47s total)\r\n\r\n# Expected behavior\r\nSame performance as CMD.\r\n\r\n# Actual behavior\r\n2x slower than CMD\r\n\r\n# Environment data\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.1\r\nPSEdition                      Core\r\nGitCommitId                    7.0.1\r\nOS                             Microsoft Windows 10.0.20133\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-05-30T11:00:14Z",
  "comments": [
    {
      "author": "p0W3RH311",
      "author_association": "NONE",
      "body": "1-  in your ps code you use pipeline and pipeline inn PS is not  like pipeline  in UNIX. with PS pipeline is very powerful but slow\r\n2-  every cmdlet is aa object  in your  case every object passed throw pipeline is passed  is an object  (structured object) and not string as cmd\r\n3-  in cmd eveery commaand have here owwn parser in PS is one parser for every command  aand  one formater for all cmdlet",
      "created_at": "2020-05-27T17:58:17Z",
      "updated_at": "2020-05-27T18:03:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It is tracked in #3575",
      "created_at": "2020-05-27T18:27:29Z",
      "updated_at": "2020-05-27T18:27:29Z"
    },
    {
      "author": "asklar",
      "author_association": "NONE",
      "body": "@p0W3RH311 @iSazonov  using redirection instead of pipe, is even worse:\r\n```powershell\r\nPS C:\\rnw> (Measure-Command { dir -Recurse C:\\rnw > C:\\temp\\1.txt }).TotalSeconds\r\n18.5898439\r\n```\r\n\r\nThe fact that everything is an object doesn't matter, that's an implementation detail. If we are pushing people away from CMD and onto PS as a replacement, then its performance must be comparable, and any overhead must be pay-for-play, and not affect the general case where I don't use any of the objects explicitly.",
      "created_at": "2020-05-27T19:53:29Z",
      "updated_at": "2020-05-27T19:53:29Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, redirection to a file in PS is identical to `| Out-File -Path $path` so it incurs the same overhead. If you want to avoid some of the overhead of the formatter, you can just pull off the text properties that you actually need, or use a cmdlet designed to work with text rather than wasting time formatting everything (like `Out-File` does):\r\n\r\n```ps1\r\n# Set-Content coerces the input to string instead of sending it through the formatter\r\nMeasure-Command {\r\n     Get-ChildItem -Recurse C:\\rnw | Set-Content -Path C:\\temp\\1.txt\r\n}\r\n\r\n# Pull off the property you want to store; Out-File vs Set-Content here will be about the same\r\nMeasure-Command {\r\n    Get-ChildItem -Recurse C:\\rnw |\r\n        Select-Object -Property FullName |\r\n        Out-File -Path C:\\temp\\1.txt\r\n}\r\n```\r\n\r\nThe formatter exists for convenience and making the shell experience more user-friendly. If you don't want the overhead it brings, there are plenty of avenues available to you to speed things up. \ud83d\ude42 ",
      "created_at": "2020-05-27T21:13:13Z",
      "updated_at": "2020-05-27T21:14:59Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "```powershell\r\nfunction cmddir($dir){cmd /c dir /S $dir}\r\n```\r\n\r\nSame speed, same functionality.\r\nWe will pay an overhead for using .net objects. That is not just an implementation detail. \r\nThat said, there are many things that can be improved performance-wise. \r\nRuntime-performance was not a primary concern during the initial development of PowerShell, and sometimes it shows. ",
      "created_at": "2020-05-28T07:31:45Z",
      "updated_at": "2020-05-28T07:37:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@asklar What is a result for:\r\n`(Measure-Command { dir -Name -Recurse C:\\rnw > C:\\temp\\1.txt }).TotalSeconds`",
      "created_at": "2020-05-28T09:22:42Z",
      "updated_at": "2020-05-28T09:22:42Z"
    },
    {
      "author": "lukeb1961",
      "author_association": "NONE",
      "body": "PWSH> $PSversiontable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.0-preview.2\r\nPSEdition                      Core\r\nGitCommitId                    7.1.0-preview.2\r\nOS                             Microsoft Windows 10.0.19631\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\nPWSH> (Measure-Command { CMD /c DIR /S      'C:\\Program Files\\PowerShell' > C:\\temp\\1.txt }).TotalSeconds\r\n0.2031207\r\nPWSH> (Measure-Command { GCI -Name -Recurse 'C:\\Program Files\\PowerShell' > C:\\temp\\2.txt }).TotalSeconds\r\n0.8576304\r\nPWSH> (Measure-Command { GCI  -Recurse      'C:\\Program Files\\PowerShell' | Select-Object -Property FullName |  Out-File -Path C:\\temp\\3.txt  }).TotalSeconds\r\n0.2609885\r\n",
      "created_at": "2020-05-29T07:34:39Z",
      "updated_at": "2020-05-29T07:34:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "For `cmd.exe` more correct test is:\r\n```\r\ncmd /v:on /c \"echo !TIME! &  DIR /S \"C:\\Program Files\\PowerShell\" > C:\\tmp\\1.txt & echo !TIME!\"\r\n```",
      "created_at": "2020-05-29T10:04:51Z",
      "updated_at": "2020-05-29T10:04:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "For `Get-ChildItem -Recurce -Name` you can test with artifact from #12834.",
      "created_at": "2020-05-29T10:06:12Z",
      "updated_at": "2020-05-29T10:06:12Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as duplicate and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-05-30T11:00:13Z",
      "updated_at": "2020-05-30T11:00:13Z"
    }
  ],
  "created_at": "2020-05-27T17:44:19Z",
  "number": 12817,
  "state": "closed",
  "title": "Get-ChildItem to a file is 2x slower than CMD",
  "updated_at": "2020-05-30T11:00:14Z"
}