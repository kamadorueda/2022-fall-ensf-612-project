{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4562",
  "author": "jaredcatkinson",
  "body": "I'm writing a ASP.NET Core web app that requires accessing CIM information/methods. Microsoft.Management.Infrastructure v4.0.0, available via NuGet, is not .NET Core compatible, so naturally I was curious how CIM works in PowerShell. I found that you are using a powershell-core ```https://powershell.myget.org/F/powershell-core/api/v3/index.json``` respository to host Microsoft.Management.Infrastructure v1.0.0-alpha06, so I added that to my project and everything seemed fine until I try to use any code from MMI.\r\n\r\nI found a related issue #1204, but that issue was addressed for situations where MMI is used within the context of PowerShell. It looks like the solution was not applied directly to the MMI assembly itself.\r\n\r\nI realize that the intention for the PowerShell Core version of MMI is to be used within the context of PowerShell, but it'd be much appreciated if the library was compatible with other use cases like ASP.NET Web Applications. \r\n\r\nSteps to reproduce\r\n------------------\r\nI've posted a [sample project](https://github.com/jaredcatkinson/MMI_Issue) so you can see how I am attempting to use the library.\r\n\r\nExpected behavior\r\n-----------------\r\ncalc.exe runs on the remote host (localhost in this case). This is the result on Windows, but not Linux.\r\n\r\nActual behavior\r\n---------------\r\nThe application crashes with the following error:\r\n```\r\nUnable to load DLL 'libmi.so': The specified module could not be found.\r\n```\r\n\r\nI found an issue (#2120) that talks about libmi.so being part of OMI, so I installed OMI and borrowed it. This fixed the first issue, but another issue came up with the following error:\r\n```none\r\nCould not find any resources appropriate for the specified culture or the neutral culture.  Make sure \"Microsoft.Management.Infrastructure.Strings.resources\" was correctly embedded or linked into assembly \"Microsoft.Management.Infrastructure\" at compile time, or that all the satellite assemblies required are loadable and fully signed.\r\n```\r\n\r\nEnvironment data\r\n----------------\r\nThe goal is to Dockerize this app, so the test system I am using is Docker's [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/) Image (Debian Jessie).\r\n```\r\nuname -a\r\nLinux ace-app 4.9.36-moby #1 SMP Wed Jul 12 15:29:07 UTC 2017 x86_64 GNU/Linux\r\n```\r\n",
  "closed_at": "2018-06-20T20:14:24Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Could you please comment?",
      "created_at": "2017-08-13T17:45:52Z",
      "updated_at": "2017-08-13T17:45:52Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The history of MMI is a bit complicated.  MMI (aka WMIv2) was originally written in managed C++.  Managed C++ is no longer supported.  There was work started to have a pure C# implementation, but it was only sufficient for PowerShell purposes and not a replacement for the original.  Since the industry has moved away from CIM towards JSON, it hasn't been a priority to complete the port.",
      "created_at": "2017-08-14T00:52:04Z",
      "updated_at": "2017-08-14T00:52:04Z"
    },
    {
      "author": "jaredcatkinson",
      "author_association": "NONE",
      "body": "Interesting. I was hoping there'd be a more straightforward solution, but I think I can probably just call Invoke-CimMethod from my assembly and get the result I'm looking for. I'd be interested in learning more about the JSON implementation you mentioned. Is it built on WMI/CIM? IMO, one of the most beneficial features of WMI/CIM is its ubiquity. I'd be worried if it was going to be killed off in future OS releases.",
      "created_at": "2017-08-14T17:04:30Z",
      "updated_at": "2017-08-14T17:04:30Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "To clarify, WMI/CIM isn't being deprecated from Windows, however, no new development is happening in that area (it's basically considered complete).\r\n\r\nThe JSON mention is about [Redfish](http://redfish.dmtf.org/) which we support via [ODataUtils](https://github.com/powershell/odatautils) already.\r\n\r\nI think calling the CIM cmdlets via code is a fine solution.",
      "created_at": "2017-08-14T22:34:37Z",
      "updated_at": "2017-08-14T22:34:37Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Reusing this issue to track completion of port of MMI to pure managed code.",
      "created_at": "2017-08-30T15:45:22Z",
      "updated_at": "2017-08-30T15:45:22Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "No plans to port MMI to C#",
      "created_at": "2018-06-20T20:14:24Z",
      "updated_at": "2018-06-20T20:14:24Z"
    }
  ],
  "created_at": "2017-08-11T23:17:40Z",
  "labels": [
    "Resolution-Won't Fix",
    "WG-Cmdlets-Management",
    "Issue-Code Cleanup"
  ],
  "number": 4562,
  "state": "closed",
  "title": "Microsoft.Management.Infrastructure NuGet package missing dependencies",
  "updated_at": "2018-06-20T20:14:32Z"
}