{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7596",
  "author": "daxian-dbw",
  "body": "The implicit cast to/from a ByRef-like type, such as `Span` or `ReadOnlySpan` doesn't help regular conversion operations in PowerShell because the target ByRef-like type cannot be boxed.\r\n\r\nBut when calling methods via Expression with jitting, `Expression.Convert` can be used to implicit cast an argument to the `Span` types before passing to the call and no boxing is involved (see an example below).\r\n\r\n```c#\r\nvar arg = @\"e:\\abc\\def\";\r\nvar method = typeof(Path).GetMethod(nameof(Path.IsPathRooted), new Type[] { typeof(ReadOnlySpan<char>) });\r\n\r\nvar body = Expression.Call(method, Expression.Convert(Expression.Constant(arg), typeof(ReadOnlySpan<char>)));\r\nvar func = Expression.Lambda<Func<bool>>(body, null).Compile();\r\nvar rest = func();\r\nConsole.WriteLine(rest);\r\n\r\n> True\r\n```\r\n\r\nPowerShell evaluates an Expression tree with interpretation by default, which basically translating Expression tree to pre-defined C# code, so the `Expression.Convert` might not work like when Expression tree is jitted (haven't looked into it, will investigate that). If it works with the interpreter too (or we can update the interpreter to make it work), we will also need to update the method resolution. We currently use the same \"figuring-out-conversion\" method for regular conversion in PowerShell as well as when resolving the best matching method. The implicit cast for ByRef-like target types should continue to be \"no-conversion\" for regular conversion operation, but theoretically acceptable for method resolution.",
  "closed_at": "2018-09-11T23:57:36Z",
  "comments": [],
  "created_at": "2018-08-22T00:42:07Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine",
    "Resolution-Fixed"
  ],
  "number": 7596,
  "state": "closed",
  "title": "When calling method, we should be theoretically able to pass an argument to a ByRef-like parameter via implicit casting",
  "updated_at": "2018-09-12T03:03:03Z"
}