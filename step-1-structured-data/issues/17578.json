{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17578",
  "author": "draproctor",
  "body": "### Summary of the new feature / enhancement\n\n# Context\r\n\r\nA typical problem that PowerShell beginners encounter is gathering an unknown number of objects into a single collection. The beginner will find an example on StackOverflow where someone initializes an empty array and add some objects to it. This novice may end up writing something like this:\r\n\r\n```powershell\r\n$movies = @()\r\n$shows = @()\r\nforeach ($video in $videos) {\r\n    if ($video -like 'Movie -*') {\r\n        $movies += $video\r\n    } else {\r\n        $shows += $video\r\n    }\r\n}\r\n```\r\n\r\nThis solves their immediate problem, but they don't understand that arrays are statically sized. Similarly, a programmer coming from Python or Ruby may also expect the array subexpression operator to in fact be the syntax used to initialize empty, but dynamically sized collections.\r\n\r\nThese people may encounter a problem down the line where their script is suddenly and inexplicably slow. After some fair googling, they discover that what they're doing is in fact copying and recreating the same collection many times. They may end up doing one of the following to address their problem and scratch their heads as to how they didn't know this sooner.\r\n\r\n```\r\n$results = foreach ($thing in $myThings) {\r\n    $thing.SomeMethod('foo')\r\n}\r\n```\r\n\r\nOther .NET developers will find themselves using generic lists or other collections in this case. However, there is a new problem:\r\n* You can't use `using namespace` inside a script block passed to `ForEach-Object -Parallel`.\r\n```powershell\r\nPS>  1..10 | ForEach-Object -Parallel {\r\n>>   using namespace System.Collections.Generic\r\n>>   [List[object]]::new()\r\n>> }\r\nParserError:\r\nLine |\r\n   2 |    using namespace System.Collections.Generic\r\n     |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     | A 'using' statement must appear before any other statements in a script.\r\n```\r\n* You can't use the shortened type names inside a multithreaded script block.\r\n```powershell\r\nPS> using namespace System.Collections.Generic\r\nPS> 1..5 | ForEach-Object -Parallel { [List[object]]::new() }\r\nInvalidOperation: Unable to find type [List].\r\nInvalidOperation: Unable to find type [List].\r\nInvalidOperation: Unable to find type [List].\r\nInvalidOperation: Unable to find type [List].\r\nInvalidOperation: Unable to find type [List].\r\n```\r\n* If you need to work around this, typing `[System.Collections.Generic.List[object]]` is very long.\r\n\r\n# Proposal\r\n\r\nProvide a \"list subexpression operator\" in the form of `@[]`. \r\n\r\nThis new operator is similar to the existing `@{}` and `@()` operators which provide easy access to collections. The brackets are also similar to how you would define a dynamic collection in both Python and Ruby, which would be friendly to new developers. With four keystrokes, it's now trivial to access a generic List in _any_ context. \n\n### Proposed technical implementation details (optional)\n\nYou would expect the list subexpression operator to be similar to the array subexpression operator, so you could use it to initialize an empty `List<object>` and easily add items to it.\r\n\r\n```powershell\r\nPS> $list = @[]\r\nPS> $list.GetType().Name\r\nList`1\r\nPS> $list.Add('I am a list!')\r\n```\r\n\r\nYou could also use it to gather objects into a single `List<object>`.\r\n\r\n```powershell\r\n$myFiles = @[Get-ChildItem -Path ~/Documents -Filter *.txt]\r\n```\r\n\r\nLike the array subexpression operator, you could add the items of many expressions into a single `List<object>`.\r\n\r\n```powershell\r\n$executables = @[\r\n  Get-ChildItem -Path ~/bin -Filter *.exe\r\n  Get-ChildItem -Path ~/another_dir -Filter *.exe\r\n  Get-ChildItem -Path ~/and_another_one -Filter *.exe\r\n]\r\n```\r\n",
  "closed_at": "2022-06-26T05:01:11Z",
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "$using?\r\n```powershell\r\nusing namespace System.Collections.Generic\r\n$list = [List[object]]::new()\r\n1..5 | foreach-object -Parallel { ($using:list).Add($_) }\r\n$list\r\n```",
      "created_at": "2022-06-24T22:02:55Z",
      "updated_at": "2022-06-24T22:02:55Z"
    },
    {
      "author": "draproctor",
      "author_association": "NONE",
      "body": "What I posted is a scenario where one might try to initialize a List in a multithreaded use case, not reuse a list between threads as `$using:` would provide.\r\n\r\nThis issue is about providing simple syntax for initializing a generic List, not about multithreading woes. ",
      "created_at": "2022-06-24T23:34:14Z",
      "updated_at": "2022-06-24T23:37:02Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> You can't use `using namespace` inside a script block passed to `ForEach-Object -Parallel`\r\n\r\n```powershell\r\n1..5 | foreach-object -Parallel {\r\n\r\n    [ScriptBlock]::Create(\"\r\n    \r\n        using namespace System.Collections.Generic\r\n        [List[object]]::new().GetType()\r\n    \r\n    \").Invoke()\r\n}\r\n```",
      "created_at": "2022-06-25T00:28:14Z",
      "updated_at": "2022-06-25T00:28:14Z"
    },
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "There's an old thread about this here: https://github.com/PowerShell/PowerShell/issues/5643",
      "created_at": "2022-06-25T00:29:21Z",
      "updated_at": "2022-06-25T00:29:21Z"
    },
    {
      "author": "draproctor",
      "author_association": "NONE",
      "body": "Sorry, I missed this! Thanks for the link. ",
      "created_at": "2022-06-25T01:30:13Z",
      "updated_at": "2022-06-25T01:30:13Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as duplicate and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-06-26T05:01:10Z",
      "updated_at": "2022-06-26T05:01:10Z"
    }
  ],
  "created_at": "2022-06-24T19:39:21Z",
  "labels": [
    "Resolution-Duplicate",
    "Issue-Enhancement"
  ],
  "number": 17578,
  "state": "closed",
  "title": "List Subexpression Operator",
  "updated_at": "2022-06-26T05:01:11Z"
}