{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4208",
  "author": "mklement0",
  "body": "Steps to reproduce\r\n------------------\r\n\r\n```powershell\r\n& { param([AllowNull()] $Foo) $null -eq $Foo } $null\r\n& { param([AllowNull()] [ValidateScript({$true})] $Foo) $null -eq $Foo } $null\r\n& { param([AllowNull()] [ValidateLength(0, 10)] $Foo) $null -eq $Foo } $null\r\n& { param([AllowNull()] [ValidateRange(1,2)] $Foo) $null -eq $Foo } $null\r\n& { param([AllowNull()] [ValidatePattern('.*')] $Foo) $null -eq $Foo } $null\r\n& { param([AllowNull()] [ValidateSet(1,2)] $Foo) $null -eq $Foo } $null\r\n& { param([AllowNull()] [ValidateDrive(\"c:\")] $Foo) $null -eq $Foo } $null\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nTrue\r\nTrue\r\nTrue\r\nTrue\r\nTrue\r\nTrue\r\nTrue\r\n```\r\n\r\nTo clarify, I expected the following behavior, which I think is a useful combination of `AllowNull` and other validation attributes:\r\n\r\nIf `[AllowNull()]` is (also) present:\r\n\r\n* If  `$null` is actually being passed, allow the value and ignore any other validation attributes.\r\n* Otherwise, evaluate any other validation attributes as usual.\r\n\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nTrue\r\nparam [...]  : Cannot validate argument on parameter 'Foo'. The argument is null, empty, or an element of the argument. [...]\r\n[...]\r\nparam[...]  : Cannot validate argument on parameter 'Foo'. The argument is null, empty, or an element of the argument. [...]\r\n[...]\r\nparam[...]  : Cannot validate argument on parameter 'Foo'. The argument is null, empty, or an element of the argument. [...]\r\n[...]\r\nparam[...]  : Cannot validate argument on parameter 'Foo'. The argument is null, empty, or an element of the argument. [...] \r\n[...]\r\nparam[...] : Cannot validate argument on parameter 'Foo'. The argument is null, empty, or an element of the argument. [...]\r\n[...]\r\nparam[...] : Cannot validate argument on parameter 'Foo'. The argument is null.\r\n```\r\n\r\nThe `AllowNull` attribute is effectively ignored in the presence of the validation attributes in the snippet; switching the attribute order makes no difference.\r\n\r\nNote how the last error message, triggered by the `ValidateDrive` attribute, differs.\r\n\r\nThe following validation attributes _can_ be combined with `AllowNull`:\r\n* `ValidateCount`\r\n* `AllowEmptyString`\r\n* `AllowEmptyCollection`\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta.3 on macOS 10.12.5\r\nPowerShell Core v6.0.0-beta.3 on Ubuntu 16.04.1 LTS\r\nPowerShell Core v6.0.0-beta.3 on Microsoft Windows 10 Pro (64-bit; v10.0.14393)\r\nWindows PowerShell v5.1.15063.413 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The attributes are checked one after the other (\"and\" not \"or\"). So the Validate attributes would also allow null, but it's not. I believe the behavior is by design.",
      "created_at": "2017-07-10T17:45:48Z",
      "updated_at": "2017-07-10T17:45:48Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: \r\n\r\nPassing `$null` to `param([AllowNull()] [ValidateScript({$true})] $Foo)` satisfies _both_ attributes, for instance, yet it fails as described.\r\n\r\nBy contrast, passing `$null` to `param([AllowNull()] [ValidateCount(0,1)] $Foo)` works.\r\n\r\nTo me it makes sense to allow these combinations, assuming the `AllowNull` attribute is explicitly specified.\r\n\r\n\r\n",
      "created_at": "2017-07-10T19:20:20Z",
      "updated_at": "2017-07-10T19:20:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Please clarify that we meant:\r\n```powershell\r\n& { param( [ValidateScript({$true})] $Foo) $null -eq $Foo } $null\r\n\r\n param([ValidateScript({$true})] $Foo) $null -eq $Foo  : Cannot validate argument on parameter 'Foo'. The argument is null, empty, or an element of the ...\r\n```\r\n\r\n",
      "created_at": "2017-07-11T03:15:57Z",
      "updated_at": "2017-07-11T03:15:57Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: \r\n\r\nI'm not sure I understand.\r\n\r\nYes, you can get the same symptom by omitting the `[AllowNull()]` attribute.\r\n\r\nIn other words: using an attribute such as `[ValidateScript()]` implicitly disallows `$null`, which would otherwise be allowed by default (in the absence of `[Parameter(Mandatory)]`).\r\n\r\nAgain, the point is that I think it makes sense to allow this combination, if `[AllowNull()]` is explicitly specified.",
      "created_at": "2017-07-11T03:28:09Z",
      "updated_at": "2017-07-11T03:28:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0  Thanks for clarify! There is another side - we should have the same behavior for PowerShell scripts and C# codes.",
      "created_at": "2017-07-11T04:12:17Z",
      "updated_at": "2017-07-11T04:12:17Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: \r\n\r\nRe C#: Do you mean when writing compiled cmdlets? Are there existing differences?",
      "created_at": "2017-07-11T08:28:32Z",
      "updated_at": "2017-07-11T08:28:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Sorry, no difference.",
      "created_at": "2017-07-11T08:43:48Z",
      "updated_at": "2017-07-11T08:43:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Do you want the behavior: if ` [AllowNull()]` attribute is passed then stop processing next attributes?",
      "created_at": "2017-07-11T08:55:06Z",
      "updated_at": "2017-07-11T08:55:21Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Yes, but only if `$null` is being passed; in other words:\r\n\r\nIf `[AllowNull()]` is (also) present:\r\n\r\n* If  `$null` is actually being passed, allow the value and ignore any other validation attributes.\r\n* Otherwise, evaluate any other validation attributes as usual.\r\n\r\n",
      "created_at": "2017-07-11T15:07:08Z",
      "updated_at": "2017-07-11T15:07:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Thanks for clarify! Please move the explanation in first post.",
      "created_at": "2017-07-11T15:12:35Z",
      "updated_at": "2017-07-11T15:12:35Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: Done.",
      "created_at": "2017-07-11T15:18:27Z",
      "updated_at": "2017-07-11T15:18:27Z"
    },
    {
      "author": "Shayan-To",
      "author_association": "NONE",
      "body": "Is there any plans on implementing this? I have a parameter with a `ValidateSet` with a values generator, and I can't find a way to be able to also pass a `$null` to it.",
      "created_at": "2022-10-09T07:59:19Z",
      "updated_at": "2022-10-09T07:59:19Z"
    }
  ],
  "created_at": "2017-07-10T17:21:25Z",
  "labels": [
    "WG-Engine",
    "Issue-Discussion"
  ],
  "number": 4208,
  "state": "open",
  "title": "Most validation parameter attribute types cause the AllowNull attribute to be ignored",
  "updated_at": "2022-10-09T07:59:19Z"
}