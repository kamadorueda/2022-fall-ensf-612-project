{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7506",
  "author": "vexx32",
  "body": "Although we have several ways to create cleaner PS code when creating objects, there still isn't support for actually specifying constructor parameter names, or any .NET methods' parameter names. Hashtable object construction only works if the object has an empty *public* constructor as well as public settable properties for the properties you want to set.\r\n\r\nSo, we still can't do this:\r\n\r\n```powershell\r\n[System.Security.AccessControl.FileSystemAccessRule]@{\r\n  IdentityReference = 'User'\r\n  FileSystemRights = 'FullControl'\r\n  Type = 'Allow'\r\n}\r\n```\r\n\r\nSure, three constructor properties? Meh, okay, it's clear enough. But with the *five* that that class sometimes needs (and it's far from alone, in the sea of complex .NET constructors) it gets very messy, no matter how you slice it.\r\n\r\nIn C# you can do something like this instead:\r\n\r\n```csharp\r\naccessRule = new FileSystemAccessRule(\r\n  IdentityReference: 'User',\r\n  FileSystemRights: 'FullControl',\r\n  Type: 'Allow'\r\n);\r\n```\r\n\r\nWhich is unfortunately not made available by the PS parsing logic. This *could* be changed. After all, there is already some _similar_ support available for attributes:\r\n\r\n```powershell\r\n[Parameter(ValueFromPipeline = $true, Position = 1)]\r\n```\r\nThis doesn't seem to be quite the same thing (looks like it borrows the hashtable conversion logic or something?), but there's no reason this *couldn't* be extended into some slightly different syntax for either `New-Object` *or* the exposed `::new()` constructors available for classes:\r\n\r\n```powershell\r\n$AccessRule = [System.Security.AccessControl.FileSystemAccessRule]::new(\r\n  IdentityReference = 'User',\r\n  FileSystemRights = 'FullControl',\r\n  InheritanceFlags = 'ObjectInherit,ContainerInherit',\r\n  PropagationFlags = 'None',\r\n  Type = 'Allow'\r\n)\r\n```\r\n\r\nOr, even *better* would be permitting the hashtable 'construction' option to actually dig into the class constructors in order to apply its key/value pairs to the appropriate constructor parameters! This would allow using the hashtable construction for basically any .NET class that has a public constructor.\r\n\r\nI don't (yet) know enough C# to look at how/where to do this. /u/SeeminglyScience (sorry, don't know your github username off the top of my head!) pointed me here:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/b149e55e47ee658e1cd908571de693cbcafda540/src/System.Management.Automation/engine/parser/Parser.cs#L7161\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/b149e55e47ee658e1cd908571de693cbcafda540/src/System.Management.Automation/engine/parser/Compiler.cs#L5568\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/b149e55e47ee658e1cd908571de693cbcafda540/src/System.Management.Automation/engine/parser/Compiler.cs#L5557\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/b149e55e47ee658e1cd908571de693cbcafda540/src/System.Management.Automation/engine/runtime/Binding/Binders.cs#L1178\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/b149e55e47ee658e1cd908571de693cbcafda540/src/System.Management.Automation/engine/parser/ast.cs#L7598\r\n\r\nSo I have some starting points. If y'all have any pointers, I'd appreciate them. This'll be the first C# project I'll be looking at messing with in a long time.\r\n\r\nOh, and if you think I *shouldn't* do this for some reason... yeah, let me know. I can't think of any reason we wouldn't want to do this. I think there's also no reason not to allow all .NET method calls to provide the explicit parameter names as well; provided the syntax can be constructed in a relatively useful way (e.g., the current ways that attributes are built with named properties) then it should make working with .NET methods from PowerShell considerably cleaner and clearer.",
  "closed_at": "2020-07-31T03:05:19Z",
  "comments": [
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "This is a good candidate for inclusion with changes to classes mentioned in #6418",
      "created_at": "2018-08-12T22:02:26Z",
      "updated_at": "2018-08-12T22:02:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think we should get an approvement from PowerShell Committee before start implementing the enhancement.",
      "created_at": "2018-08-13T12:48:51Z",
      "updated_at": "2018-08-13T12:48:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "\r\n\r\nI'm afraid that there may be a lot of changes in the binder to take into account named parameters.\r\n",
      "created_at": "2018-08-13T13:09:51Z",
      "updated_at": "2018-08-13T13:09:51Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "*shrugs*\r\n\r\nJust because it is difficult is no reason to avoid doing it. I barely even know the codebase, but I'm sure I could figure it out with a bit of help. The linked sections are a solid start, and I can work from there.\r\n\r\nIf anyone is already familiar with some of the code areas, I'm sure it could get done much quicker and cleaner than a first attempt from me, but there's little to really stop this working, in my opinion. ",
      "created_at": "2018-08-13T13:17:28Z",
      "updated_at": "2018-08-13T13:17:28Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I'm not trying to dissuade you :-) - I welcome your desire to develop PowerShell Core. My comment is aimed to help you get a better understanding.",
      "created_at": "2018-08-13T13:21:32Z",
      "updated_at": "2018-08-13T13:21:32Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Believe me, I've been looking at the code trying to figure out a good way to do it. \ud83d\ude04 \r\n\r\nI haven't got there myself yet, but I'm certain it's doable without breaking much. Just gotta figure out how. \ud83d\ude01 ",
      "created_at": "2018-08-13T13:25:34Z",
      "updated_at": "2018-08-13T13:25:34Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this.  Agree that since the parameter binder already has this capability, it makes sense to generalize it as PowerShell users typically are comfortable with hashtables.  Committee approves of this proposal.",
      "created_at": "2018-08-15T22:45:07Z",
      "updated_at": "2018-08-15T22:45:07Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I've been looking into this with @SeeminglyScience in terms of the possible methods of implementation, and we've found a couple possibilities -- but each seems to have their drawbacks.\r\n\r\n### First, in terms of implementing C#-style named method / constructor arguments:\r\n\r\n#### 1. Duplicate or inherit from `NamedAttributeArgumentAst`\r\nThis is somewhat problematic, as it would introduce a new AST class and thus break compatibility with PS Standard.\r\n\r\n#### 2. Re-use or re-name and repurpose `NamedAttributeArgumentAst` for more generic use cases\r\nAgain, kind of problematic for the above reason. I do think that this might end up being the most *tidy* method, however.\r\n\r\n#### 3. Special-case it in the parser\r\nThis would (probably) mean the tokenizer would need to *not* parse the name of the parameter as a generic/command token, and something like a `ReadOnlyCollection<Tuple<int, string>>` would need to be passed around with the `List<ExpressionAst>` for the regular method arguments.\r\n\r\nThis might have the least impact, but requires a fair bit of special casing and would be completely inconsistent with the nearest-comparable syntax PS has currently, i.e., named attribute arguments -- although these aren't really *method arguments* per se.\r\n\r\n### Second, regarding hashtable-casting syntax\r\n\r\nThis is also problematic. C# permits method signatures that differ simply by the *order* of the parameters. As a result, the hashtable construction would need to mimic `[PSCustomObject]`'s handling of retaining the order of parameters, and there are a good many edge cases that would require complex logic to implement.\r\n\r\nAdditionally, it would almost certainly be impossible to set object properties as well, due to the fact that constructor argument names and actual object property names may collide or differ unexpectedly. If it *were* permitted to take constructor arguments it would have to be a solid either that _or_ setting properties as it does currently.\r\n\r\nSo, the latter is *probably* not the best idea to work with.\r\n\r\nI would appreciate any thoughts you guys have on this matter; I *think* these suggestions are all doable, to varying degrees of complexity, but I would appreciate your input on whether there is another possibility that I haven't come across as yet, and/or what the best approach may be here. \ud83d\ude04 ",
      "created_at": "2018-10-14T13:46:25Z",
      "updated_at": "2018-10-14T13:46:25Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "See my proposed syntax which relies on [generalized splatting](https://github.com/PowerShell/PowerShell-RFC/blob/master/1-Draft/RFC0002-Generalized-Splatting.md#splatting-in-method-invocations)\r\n\r\nWith my proposed syntax, you would introduce a new kind of expression, say `SplattedExpressionAst` that has a child expression which can be any expression.\r\n\r\nThe tokenizer would return the `@` token to the parser when the next character is not `{` or a character that can start a variable name. The parser would then treat that token as a unary operator, parsing it's child expression. This helpfully avoids touching the argument parsing code.\r\n\r\nI think what I've described above is straightforward.\r\n\r\nOnce you can parse - the fun begins. Updating the binders to support named arguments will require some pretty deep understanding of how dynamic binding works. I'm happy to mentor whoever takes this on - ping me on Gitter when you're ready.",
      "created_at": "2018-10-15T06:15:05Z",
      "updated_at": "2018-10-15T06:15:05Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "So essentially you `PeekChar()` and if you get anything other than `{`, `(`, or a variable name character you scan for `ExpressionAst` and compile it into a `SplattedExpressionAst`\n\nI... Think I can probably manage that. I'll found out soon. :)",
      "created_at": "2018-10-15T10:29:53Z",
      "updated_at": "2018-10-15T10:30:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Please confirm that we can begin implementing the [generalized splatting](https://github.com/PowerShell/PowerShell-RFC/blob/master/1-Draft/RFC0002-Generalized-Splatting.md#splatting-in-method-invocations) RFC",
      "created_at": "2018-10-15T11:22:54Z",
      "updated_at": "2018-10-15T11:22:54Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov in my opinion, you (or @vexx32, or maybe even @lzybkr) need to move the RFC forward through _the process_ by addressing the comments...",
      "created_at": "2018-10-17T03:01:39Z",
      "updated_at": "2018-10-17T03:01:39Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I'll take a thorough read-through of the full RFC and comments tomorrow. That one's been sitting there long enough; time to either make it work or move it aside.",
      "created_at": "2018-10-17T04:32:07Z",
      "updated_at": "2018-10-17T04:32:07Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "To give an update on this, @PowerShell/powershell-committee discussed the generalized splatting RFC and @joeyaiello submitted updates to the RFC https://github.com/PowerShell/PowerShell-RFC/pull/154/files",
      "created_at": "2019-01-16T17:28:19Z",
      "updated_at": "2019-01-16T17:28:19Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Removing `Review - Committee`.  Further feedback should be in the RFC.",
      "created_at": "2019-01-30T22:55:17Z",
      "updated_at": "2019-01-30T22:55:17Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The powershell committee has decided to withdraw the RFC [Generalized Splatting](https://github.com/PowerShell/PowerShell-RFC/blob/master/2-Draft-Accepted/RFC0002-Generalized-Splatting.md), so I think it's better to close this one in favor of #13307, to make it less confusing.",
      "created_at": "2020-07-30T16:08:47Z",
      "updated_at": "2020-07-30T16:08:47Z"
    }
  ],
  "created_at": "2018-08-12T21:38:36Z",
  "number": 7506,
  "state": "closed",
  "title": "Permit specifying parameter names for constructors / .NET methods",
  "updated_at": "2020-07-31T03:05:19Z"
}