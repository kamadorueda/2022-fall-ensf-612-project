{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13695",
  "author": "panicoenlaxbox",
  "body": "Hello,\r\n\r\nI have written a powershell binary module in C#. If I don't add any nuget package reference, everything works fine in PowerShell and PowerShell Core. On the other side If I add some package (like AutoMapper, RestSharp o anything else) I have to add this in .csproj for copying the dependencies in \\bin folder and avoid the error *\"Test-SampleCmdlet: Could not load file or assembly 'XXXX, Version=10.0.0.0, Culture=neutral, PublicKeyToken=be96cd2c38ef1005'. The system cannot find the file specified.\"*\r\n```\r\n<CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>\r\n```\r\n\r\nHowever, with Microsoft.Data.SqlClient does not work, because it's depends on runtime identifiers (not like AutoMapper or RestSharp that depend only on target framework). Finally, I end with a Microsoft.System.Data.dll in \\bin folder that it's not correct (it's a library only with code plenty of PlatformNotSupported exceptions, more info here https://github.com/dotnet/SqlClient/wiki/Frequently-Asked-Questions#11-why-do-i-get-a-platformnotsupported-exception-when-my-application-hits-a-sqlclient-method)\r\n\r\nMy .csproj is like this:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n\t<PropertyGroup>\r\n\t\t<TargetFramework>netstandard20</TargetFramework>\r\n\t\t<AssemblyName>example</AssemblyName>\r\n\t</PropertyGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<PackageReference Include=\"AutoMapper\" Version=\"10.0.0\" />\r\n                <PackageReference Include=\"Microsoft.Data.SqlClient\" Version=\"2.0.1\" />\r\n\t\t<PackageReference Include=\"PowerShellStandard.Library\" Version=\"5.1.0\">\r\n\t\t\t<PrivateAssets>All</PrivateAssets>\r\n\t\t</PackageReference>\r\n\t\t<PackageReference Include=\"RestSharp\" Version=\"106.11.5\" />\r\n\t</ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nAnd a simple example will be this:\r\n\r\n```\r\n            // With <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies> the following two lines will work\r\n            var config = new MapperConfiguration(cfg => cfg.CreateMap<Foo, Bar>());\r\n            var client = new RestClient();\r\n\r\n            // However, this line only works if you copy the right assembly in output folder\r\n            using (var cnn = new Microsoft.Data.SqlClient.SqlConnection())\r\n            {\r\n            }\r\n```\r\n\r\nI receive the error when I call to the cmdlet, not when I import the module (Import-Module).\r\n\r\nIf I manually copy in \\bin folder the right assembly of Microsoft.Data.SqlClient (extracting content from .nupkg file and choosing the right one by runtime identifier) does work, but I think PowerShell should do this for me, it's the host.\r\n\r\nSo, my final thought is that I can develop a powershell binary module if I don't add nuget packages that had been deployed with runtime identifiers... and this is a very big problem :(\r\n\r\nI have proved this https://docs.microsoft.com/en-us/powershell/scripting/dev-cross-plat/writing-portable-modules?view=powershell-7#dependency-on-native-libraries but I think I am missing something, because I have tried several folder names and structure, but PowerShell Core does not seem to look for in this folders (I am using Process Monitor to see it https://docs.microsoft.com/en-us/sysinternals/downloads/procmon). I think that my issue is related with this other https://github.com/PowerShell/PowerShell/issues/8861 but I have spent a lot of time in last days and I don't find a solution.\r\n\r\nThank you so much.",
  "closed_at": "2020-09-29T20:00:06Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It is dup #2083.",
      "created_at": "2020-09-28T17:15:57Z",
      "updated_at": "2020-09-28T17:15:57Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as duplicate and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-09-29T20:00:05Z",
      "updated_at": "2020-09-29T20:00:05Z"
    }
  ],
  "created_at": "2020-09-25T07:46:29Z",
  "number": 13695,
  "state": "closed",
  "title": "How to properly resolve dependencies that have runtime identifiers?",
  "updated_at": "2020-09-29T20:00:06Z"
}