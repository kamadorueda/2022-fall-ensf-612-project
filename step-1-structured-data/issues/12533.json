{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12533",
  "author": "p0W3RH311",
  "body": "Hi\r\n\r\nits possible to add class property  to import-module  and export-modulemember :\r\n\r\nsteps to reproduce (pseudo code)\r\n```\r\n\r\nPS> cat  test.psm1\r\n\r\nclass  test1 {  $p1 }\r\nclass  test2 {  $p2 }\r\nexport-moduleMember  -class test2\r\n\r\nPS> import-module test.psm1\r\n```\r\n\r\nyes, its possible to use  the pragma **using**\r\n\r\n`using module test.psm1`\r\n\r\n but  with **import-module** its add more granularity \r\n\r\n\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "We would also need to add a `ClassesToExport` key to the module manifest to complete the pattern.\r\n\r\nI think this should be done, but I'm not sure if there are logistical challenges with doing this.",
      "created_at": "2020-04-30T12:44:19Z",
      "updated_at": "2020-04-30T12:44:19Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "We had another discussion about this, and the answer was, you must put your classes directly in the PSM1 file, not . source them in, and you must load with USING module, instead of import module and ... and .. and.. \r\nIt's a mess, it needs cleaning up, it might be difficult but classes in modules should not be like Forest Gump's chocolates, you should ALWAYS know what you're going to get. \r\n\r\nThere is a risk that this breaks existing modules, (i.e. if 7.2 or 8.0 stops exporting classes from the PSM1 with Using) and the ideal would be that the if there is a new manifest entry it adds functionality without taking any away. (Unknown keys in the manifest are ignored, so it shouldn't reduce what is there for down-level users). \r\n\r\nI have no idea of the practicalities but I'd call this highly desirable. \r\n",
      "created_at": "2020-04-30T14:52:21Z",
      "updated_at": "2020-04-30T14:52:21Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "The popularity of [\"how to export a class in powershell v5 module\"](https://stackoverflow.com/q/31051103/1404637) over on stackoverflow suggest that many people would like this functionality.  I have found that [the workarounds](https://stackoverflow.com/a/40441684/1404637) aren't too bad though.  Implementing this wouldn't really enable encapsulating classes in modules as that is already (somewhat awkwardly) possible.  But this feature would make doing so more convenient.",
      "created_at": "2020-05-01T16:46:31Z",
      "updated_at": "2020-05-01T16:46:31Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, I've used the `ScriptsToProcess` approach myself in [PSKoans](https://aka.ms/pskoans). It works, right up until you need to unload and reload the module in the same session; it'll explode because there are already defined classes by those names. To work around that, I have my `ScriptsToProcess` handle it by checking if the type name already exists, and quietly preventing the classes from being re-defined.\r\n\r\nIt's definitely not ideal, and it'd be awesome if this were provided as a feature, especially as many module authors may have some classes they'd like exported, and others kept private to the module.",
      "created_at": "2020-05-01T16:57:59Z",
      "updated_at": "2020-05-01T16:58:25Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": ">It works, right up until you need to unload and reload the module in the same session; it'll explode because there are already defined classes by those names.\r\n\r\nRight.  It sounds like you're describing #2505 (and [stackoverflow 42838107](https://stackoverflow.com/questions/42838107)).  \r\n\r\nI expect PowerShell classes will continue to be expensive to support and painful to develop with.  Because of that I'm reluctant to recommend native PowerShell classes beyond their use with DSC; we already have full-blown C# classes for free.  In my own work I have found few scenarios where PowerShell classes turned out to be the right choice.\r\n\r\nC# classes added during module loading with Add-Type are available everywhere in the PowerShell session via `[Namespace.MyClass]`, so no export feature like this is required.  That strategy puts some strain on your module loading structure, but I have found the benefits of getting that right to be worth the effort.",
      "created_at": "2020-05-01T17:16:20Z",
      "updated_at": "2020-05-01T17:16:20Z"
    }
  ],
  "created_at": "2020-04-30T11:12:21Z",
  "number": 12533,
  "state": "open",
  "title": "add class property to module cmdlet",
  "updated_at": "2022-06-06T20:00:50Z"
}