{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10057",
  "author": "bergmeister",
  "body": "# PR Summary\r\n\r\nFixes #9295 by creating JumpList in STA thread, the CoreClr team said that the CoreClr does not check for this (at the moment), therefore the fatal CLR errors happened. This should prevent those from happening. cc @daxian-dbw @SteveL-MSFT \r\n\r\n## PR Context\r\n\r\nOnce proven successful, we should merge this back to 6.x\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n",
  "closed_at": "2019-07-09T20:14:50Z",
  "comments": [
    {
      "author": "weltkante",
      "author_association": "CONTRIBUTOR",
      "body": "Note that you are running code on an STA thread, creating COM objects, but not cleaning them up. Then the STA thread terminates (calling CoUninitialize) and leaves the COM objects to be collected by the finalizer.\r\n\r\nI don't know how robust the finalizer is when the underlying thread and COM apartment already have been terminated, in native code you get an access violation if you try to release an object whose apartment is already gone. This is not a request to change anything, just a heads-up so you know to identify potential sources of crashes.\r\n\r\nThe only \"alternative\" I know of is to deterministically release the COM references via `Marshal.ReleaseComObject` for every RCW crossing the COM-NET boundary. This is very tedious and error prone and requires exact knowledge of when RCW reference counts are incremented and when they aren't.\r\n\r\nAn ugly workaround, should it come to crashes due to this, is to force GC collection & draining the finalizer queue before terminating the STA thread. This way the RCW finalizer can release the COM object before the apartment is closed.",
      "created_at": "2019-07-03T19:40:53Z",
      "updated_at": "2019-07-03T19:48:25Z"
    },
    {
      "author": "weltkante",
      "author_association": "CONTRIBUTOR",
      "body": "Yeah thats fine, I don't mind it, like I said just giving some heads-up if you should start seeing some new kind of crashes. Switching to WPF will probably be for the better since they seem to be more careful with their cleanup (they are doing the `Marshal.ReleaseComObject` calls I mentioned).",
      "created_at": "2019-07-03T19:58:38Z",
      "updated_at": "2019-07-03T19:58:38Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the review. I am now much happier with it as well. Finger's crossed that this fixes the problems. In the far future, we will replace the implementation with APIs by WPF (this depends on a PR by me to be able to create an elevated JumpList though that might take some times to get merged). We should get this into `7.0-preview2` and get the folks from the issue hooked on re-testing again fort a week and if successful, backport to 6.1/6.2\r\n@AaronRobinsonMSFT Can you give it one final review again please?",
      "created_at": "2019-07-05T23:05:42Z",
      "updated_at": "2019-07-05T23:07:51Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.0.0-preview.2` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.2)\n",
      "created_at": "2019-07-17T20:56:27Z",
      "updated_at": "2019-07-17T20:56:27Z"
    }
  ],
  "created_at": "2019-07-03T19:12:50Z",
  "number": 10057,
  "state": "closed",
  "title": "Create JumpList in STA thread as some COM APIs are strictly STA only to avoid sporadic CLR crashes",
  "updated_at": "2019-07-17T20:56:28Z"
}