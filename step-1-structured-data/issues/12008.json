{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12008",
  "author": "alx9r",
  "body": "Consider the following lines of code:\r\n\r\n```powershell\r\nImport-Module SomeModule\r\nGet-Module SomeModule\r\n```\r\n\r\nMy expectation is that there should be only two possible outcomes as follows:\r\n\r\n1. `SomeModule` exists, `Import-Module` completes without error, and a PSModuleInfo object is output by `Get-Module`.\r\n2. `SomeModule` does not exist, `Import-Module` produces an error and `Get-Module` outputs nothing.\r\n\r\nThe majority of such invocations I have witnessed indeed result in one of those two outcomes.  Occasionally, however, a third outcome (that I thought would be impossible) occurs:\r\n\r\n3. `SomeModule` exists, `Import-Module` completes without error, and `Get-Module` outputs nothing.\r\n\r\nApparently `Import-Module` silently fails for an existing module, at least to the degree that `Get-Module` does not find the module afterward. The scenarios are summarized in the following table:\r\n\r\n| scenario | Module | Import-Module | Get-Module output | notes |\r\n|----------|----------|------------------|------------------------|-------|\r\n| 1           | exists     | succeeds           | PSModuleInfo           |           |\r\n| 2           | missing | errors                |                                   |           |\r\n| 3           | exists    | silently fails       |                                   | shouldn't this <br>be impossible? |\r\n\r\n\r\n This leaves me with the following questions:\r\n\r\n1. Is it by intention and/or design that (3) can occur?  If so, in what conditions should I expect (3) can or cannot occur?\r\n2. Is there an alternate means that reliably obtains its fully-populated PSModuleInfo object after import?\r\n\r\n---\r\n\r\nOther notes:\r\n\r\n* I suspect #7377 is related.\r\n* adding `#Requires -Module $($module.Name)` to the top of the .AddScript() argument doesn't change the result\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\nforeach ( $module in Get-Module -ListAvailable )\r\n{\r\n    \"Testing Module $($module.Name)\"\r\n    $initialSessionState = [initialsessionstate]::CreateDefault()\r\n    $runspace = [runspacefactory]::CreateRunspace($initialSessionState)\r\n    $runspace.Open()\r\n    $powershell = [powershell]::Create().AddScript(@\"\r\n    try {\r\n        Import-Module $($module.Name) -ErrorAction Stop\r\n        if ( -not (Get-Module $($module.Name)) )\r\n        {\r\n            throw 'module not imported'\r\n        }\r\n        'success'\r\n    }\r\n    catch { `$_.Exception.Message }\r\n\r\n\"@\r\n    )\r\n    $powershell.Runspace = $runspace\r\n    $powershell.Invoke()\r\n}\r\n\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nTesting Module Pester\r\nsuccess\r\nTesting Module CimCmdlets\r\nsuccess\r\nTesting Module Microsoft.PowerShell.Archive\r\nsuccess\r\nTesting Module Microsoft.PowerShell.Diagnostics\r\nsuccess\r\nTesting Module Microsoft.PowerShell.Host\r\nsuccess\r\nTesting Module Microsoft.PowerShell.Management\r\nsuccess\r\nTesting Module Microsoft.PowerShell.Security\r\nsuccess\r\nTesting Module Microsoft.PowerShell.Utility\r\nsuccess\r\nTesting Module Microsoft.WSMan.Management\r\nsuccess\r\nTesting Module PackageManagement\r\nsuccess\r\nTesting Module PowerShellGet\r\nsuccess\r\nTesting Module PSDesiredStateConfiguration\r\n...\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nTesting Module Pester\r\nsuccess\r\nTesting Module CimCmdlets\r\nsuccess\r\nTesting Module Microsoft.PowerShell.Archive\r\nsuccess\r\nTesting Module Microsoft.PowerShell.Diagnostics\r\nmodule not imported\r\nTesting Module Microsoft.PowerShell.Host\r\nmodule not imported\r\nTesting Module Microsoft.PowerShell.Management\r\nmodule not imported\r\nTesting Module Microsoft.PowerShell.Security\r\nmodule not imported\r\nTesting Module Microsoft.PowerShell.Utility\r\nmodule not imported\r\nTesting Module Microsoft.WSMan.Management\r\nmodule not imported\r\nTesting Module PackageManagement\r\nsuccess\r\nTesting Module PowerShellGet\r\nsuccess\r\nTesting Module PSDesiredStateConfiguration\r\n...\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-rc.2\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-rc.2\r\nOS                             Microsoft Windows 6.3.9600\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u0393\u00c7\u00aa}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "@alx9r Can you please try this in a fresh PS instance? Thank you.\r\n```\r\n$a = @(\r\n'Pester',\r\n'CimCmdlets',\r\n'Microsoft.PowerShell.Archive',\r\n'Microsoft.PowerShell.Diagnostics',\r\n'Microsoft.PowerShell.Host',\r\n'Microsoft.PowerShell.Management',\r\n'Microsoft.PowerShell.Security',\r\n'Microsoft.PowerShell.Utility',\r\n'Microsoft.WSMan.Management',\r\n'PackageManagement',\r\n'PowerShellGet',\r\n'PSDesiredStateConfiguration')\r\n\r\nforeach ( $moduleName in $a )\r\n{\r\n    \"Testing Module $moduleName\"\r\n    Import-Module $moduleName -ErrorAction Stop\r\n    if ( -not (Get-Module $moduleName) )\r\n    {\r\n         'module not imported'\r\n    }\r\n    else\r\n    {\r\n        'success'\r\n    }\r\n}\r\n```",
      "created_at": "2020-03-04T20:28:15Z",
      "updated_at": "2020-03-04T20:28:15Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "@anmenaga I pasted your code into a file name \"test.ps1\" then ran `pwsh.exe .\\test.ps1`.  This is the output:\r\n\r\n```none\r\nTesting Module Pester\r\nsuccess\r\nTesting Module CimCmdlets\r\nsuccess\r\nTesting Module Microsoft.PowerShell.Archive\r\nsuccess\r\nTesting Module Microsoft.PowerShell.Diagnostics\r\nsuccess\r\nTesting Module Microsoft.PowerShell.Host\r\nsuccess\r\nTesting Module Microsoft.PowerShell.Management\r\nsuccess\r\nTesting Module Microsoft.PowerShell.Security\r\nsuccess\r\nTesting Module Microsoft.PowerShell.Utility\r\nsuccess\r\nTesting Module Microsoft.WSMan.Management\r\nsuccess\r\nTesting Module PackageManagement\r\nsuccess\r\nTesting Module PowerShellGet\r\nsuccess\r\nTesting Module PSDesiredStateConfiguration\r\nsuccess\r\n```",
      "created_at": "2020-03-04T20:35:33Z",
      "updated_at": "2020-03-04T20:35:33Z"
    }
  ],
  "created_at": "2020-03-04T19:33:32Z",
  "number": 12008,
  "state": "open",
  "title": "Import-Module silently fails to import modules",
  "updated_at": "2020-03-05T05:32:11Z"
}