{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15474",
  "author": "vexx32",
  "body": "## Summary of the new feature/enhancement\r\n\r\nCurrently, `Out-File`, `Out-String`, `>`, and `>>` all use the current console width when formatting data. This can cause a lot of truncation and loss of data, especially when logging.\r\n\r\nSee #15404 for additional context.\r\n\r\n## Proposed technical implementation details (optional)\r\n\r\nThe default behaviour when formatting data for a string or when sending data to a file should be to format as though the console width is near-infinite. So, these should all function without truncating the data:\r\n\r\n```powershell\r\nGet-ChildItem | Format-Table -Property * | Out-String\r\nGet-ChildItem | Format-Table -Property * | Out-File -Path $filePath\r\nGet-ChildItem | Format-Table -Property * > $filePath\r\nGet-ChildItem | Format-Table -Property * >> $filePath\r\n```\r\n\r\nUsers could still customize the width in the case of using `Out-String` or `Out-File` specifically, but our default for these cases should be arbitrarily large to avoid unnecessarily truncating data.",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Can we have/use Write-* cmdlets?",
      "created_at": "2021-05-28T05:05:20Z",
      "updated_at": "2021-05-28T05:05:20Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Not entirely sure what you're suggesting @iSazonov; can you elaborate? \ud83d\ude42 ",
      "created_at": "2021-05-28T15:30:17Z",
      "updated_at": "2021-05-28T15:30:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "How Out-* cmdlets works is fundamental PowerShell behavior. If we want switch to another behavior (remove a width edge) we need replace Out-*  cmdlets with other cmdlets like Write-*. (I say not about names but about behaviors, internal implementations)",
      "created_at": "2021-05-28T16:08:31Z",
      "updated_at": "2021-05-28T16:08:53Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "After doing some experiments, I do not think we want to attempt to use a \"near infinite\" width based on impact to performance.  That was my bad for suggesting that.   \r\n\r\n![image](https://user-images.githubusercontent.com/5177512/121062645-94bca900-c782-11eb-9b0e-1695821f4cf4.png)\r\n\r\n",
      "created_at": "2021-06-07T17:22:24Z",
      "updated_at": "2021-06-07T17:22:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Uh! If we set the width to int.MaxValue we will create every output line with the width (with huge spaces in tail)!",
      "created_at": "2021-06-08T04:42:45Z",
      "updated_at": "2021-06-08T04:42:45Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Does it? If so, I'd consider that a bit of a bug tbh. -Width should be an upper bound, not a forced padding imo.",
      "created_at": "2021-06-08T05:59:44Z",
      "updated_at": "2021-06-08T05:59:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The issue is in \r\nhttps://github.com/PowerShell/PowerShell/blob/659dff09e4e1fd15e9f404b4f3460bd9f239ea90/src/System.Management.Automation/FormatAndOutput/common/ColumnWidthManager.cs#L111-L123\r\n\r\nIf we use int.MaxValue for Width the availableWidth will start with ~Int.MaxValue too. Since the availableWidth  is decreased by one this takes a lot of time.\r\nGiven the large width of today's screens, I think it is worth improving this code.",
      "created_at": "2021-06-08T08:46:16Z",
      "updated_at": "2021-06-08T08:46:16Z"
    }
  ],
  "created_at": "2021-05-27T22:56:59Z",
  "number": 15474,
  "state": "open",
  "title": "Formatting data for strings or when redirecting to a file should not be affected by the console width",
  "updated_at": "2021-06-08T08:46:16Z"
}