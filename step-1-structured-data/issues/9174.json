{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9174",
  "author": "mklement0",
  "body": "Related: #12915\r\n\r\nBy design, `class` definitions do not support the automatic `$args` variable for reporting unbound arguments.\r\n\r\nHowever, a reference to `$args` in a method body is currently:\r\n\r\n* quietly accepted\r\n* always evaluates to an _empty_ array\r\n\r\nThis contrasts with references to variables with non-reserved variable names that haven't been initialized, which - sensibly - cause a parse-time error.\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\nclass Foo {  [object] Bar() { return $Args } }; [Foo]::new().Bar().GetType().Name\r\n```\r\n\r\n# Expected behavior\r\n\r\nA parse-time \"Variable is not assigned in the method.\" error.\r\n\r\n# Actual behavior\r\n\r\n```none\r\nObject[]\r\n```\r\n\r\nThat is, the class definition unexpectedly succeeds and calling the method yields an empty `[object[]]` array.\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core 6.2.0-rc.1\r\nWindows PowerShell v5.1 \r\n```\r\n",
  "closed_at": "2020-06-08T18:14:03Z",
  "comments": [
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "This is probably because all reserved name variables exist at all times.  Start a new session and `dir variable:` and $args will be listed as `{}`.  Thus, it is already assigned a value, and no error occurs.",
      "created_at": "2019-03-21T03:07:09Z",
      "updated_at": "2019-03-21T03:07:09Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Note that classes generally don't see variables outside of it, so `$args` is receiving - unwanted - special treatment here:\r\n\r\nE.g., the following attempt to `$PSHOME` - also present in pristine sessions - does _not_ work:\r\n\r\n```powershell\r\nPS> class Foo {  [object] Bar() { return $PSHOME } }; [Foo]::new().Bar() # BREAKS\r\nVariable is not assigned in the method.\r\n...\r\n```\r\n\r\nConversely, trying to use `$args` as a _parameter variable_ is quietly _accepted_, but doesn't work:\r\n\r\n```powershell\r\nPS> class Foo {  [object] Bar([array] $args) { return $args.Count } }; [Foo]::new().Bar(@(1, 2))\r\n0   # !! Arguments were quietly ignored.\r\n```",
      "created_at": "2019-03-21T03:24:32Z",
      "updated_at": "2019-03-21T06:01:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "There is a semantic check step and we could add new check there.",
      "created_at": "2019-03-21T12:12:23Z",
      "updated_at": "2019-03-21T12:12:23Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "My guess for the reasoning is because this is valid:\r\n\r\n```powershell\r\nclass Test {\r\n    static [void] Do() {\r\n        & { $args } 1 2 3\r\n    }\r\n}\r\n```\r\n\r\nIt's sort of hard to tell statically if `$args` is valid there.  Well, I guess it could only throw a parse exception if `$args` is not inside a nested script block, but that's potentially a lot of extra logic going into the semantic check.\r\n\r\nIt's especially difficult for the other, similar variables which would have these requirements not to throw:\r\n\r\n* `$ForEach` - A parent `foreach` statement\r\n* `$switch` - A parent `switch` statement\r\n* `$matches` - Any sequence point before the variable access that used the `-match` operator\r\n* `$PSCmdlet` - In a nested scriptblock decorated with `CmdletBinding` *or* with a parameter decorated with `Parameter` (I think some other triggers as well)\r\n\r\nAs much as I'm all for strict checks in classes, I'm not sure it's worth it in this case.",
      "created_at": "2020-06-08T17:18:16Z",
      "updated_at": "2020-06-08T17:18:16Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Makes sense, @SeeminglyScience, thanks - I'm closing this issue.",
      "created_at": "2020-06-08T18:14:03Z",
      "updated_at": "2020-06-08T18:14:03Z"
    }
  ],
  "created_at": "2019-03-20T16:11:20Z",
  "number": 9174,
  "state": "closed",
  "title": "Custom class methods do not complain about an unassigned $args variable",
  "updated_at": "2020-06-08T18:14:04Z"
}