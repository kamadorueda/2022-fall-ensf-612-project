{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2138",
  "author": "SteveL-MSFT",
  "body": "Repro Steps :\n\nCompare perf of WebClient, BITS and Invoke-WebRequest:\n\n``` powershell\nMeasure-Command { $wc = New-Object System.Net.WebClient; $wc.DownloadFile(\"https://github.com/dotnet/corefx/archive/master.zip\", \"C:\\Users\\crispop\\Desktop\\master.zip\") }\n\n\nDays              : 0\nHours             : 0\nMinutes           : 0\nSeconds           : 3\nMilliseconds      : 992\nTicks             : 39928426\nTotalDays         : 4.62134560185185E-05\nTotalHours        : 0.00110912294444444\nTotalMinutes      : 0.0665473766666667\nTotalSeconds      : 3.9928426\nTotalMilliseconds : 3992.8426\nVs\n\nMeasure-Command { Invoke-WebRequest \"https://github.com/dotnet/corefx/archive/master.zip\" -OutFile \"C:\\Users\\crispop\\Desktop\\master.zip\" }\n\n\nDays              : 0\nHours             : 0\nMinutes           : 0\nSeconds           : 50\nMilliseconds      : 821\nTicks             : 508212825\nTotalDays         : 0.000588209288194444\nTotalHours        : 0.0141170229166667\nTotalMinutes      : 0.847021375\nTotalSeconds      : 50.8212825\nTotalMilliseconds : 50821.2825\n\nVs\n\nMeasure-Command { Start-BitsTransfer -Source \"https://github.com/dotnet/corefx/archive/master.zip\" -Destination \"C:\\Users\\crispop\\Desktop\\masterBits2.zip\" }\n\n\nDays              : 0\nHours             : 0\nMinutes           : 0\nSeconds           : 4\nMilliseconds      : 506\nTicks             : 45062594\nTotalDays         : 5.21557800925926E-05\nTotalHours        : 0.00125173872222222\nTotalMinutes      : 0.0751043233333333\nTotalSeconds      : 4.5062594\nTotalMilliseconds : 4506.2594\n```\n\nExpected: Transfer speeds don't differ too much (maybe Invoke-WebRequest should be a bit faster than BITS which performs the transfer in background.)\n\nActual: 10x slowdown for Invoke-WebRequest\n",
  "closed_at": "2017-03-17T21:14:18Z",
  "comments": [
    {
      "author": "GeeLaw",
      "author_association": "NONE",
      "body": "How can you be sure that it's the progress bar? With `$ProgressPreference = 'SilentlyContinue'`, you can suppress the progress bar UI, which will surely boost `Invoke-WebRequest`. Also, use `-UseBasicParsing` when downloading files with `iwr` (which you shouldn't do since that's not what `iwr` is for...). You cannot suppress parsing, but you can suppress DOM parsing.\n\nMoreover, I did your tests and found that the standard deviation is rather great (poor network here in China).\n\nPlease do observe Task Manager for the network speed and also do more statistics. If the network is perfect (I hosted a file locally and tried to download via `localhost`, all three were superfast even the file is 80MB+, with progress bar suppressed.)\n\nAnd, could you include the `$PSVersionTable`?\n",
      "created_at": "2016-08-31T15:02:59Z",
      "updated_at": "2016-08-31T15:02:59Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "PSEdition                      Core\nCLRVersion\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\nBuildVersion                   3.0.0.0\nGitCommitId                    v6.0.0-alpha.9\nPSRemotingProtocolVersion      2.3\nPSVersion                      6.0.0-alpha\nWSManStackVersion              3.0\nSerializationVersion           1.1.0.1\n",
      "created_at": "2016-08-31T16:09:33Z",
      "updated_at": "2016-08-31T16:09:33Z"
    },
    {
      "author": "jasongin",
      "author_association": "NONE",
      "body": "I also see the progress bar slowing down Invoke-WebRequest by >50X on a fast internet connection. Every time I write a script that uses Invoke-WebRequest I need to include code to temporarily change `$ProgressPreference`, then restore it later (because I do want progress for other things).\n\nHere's my output from using Invoke-WebRequest to download the same file as @SteveL-MSFT, without and then with progress:\n\n```\nPS D:\\> $ProgressPreference = 'SilentlyContinue'\nPS D:\\> Measure-Command { Invoke-WebRequest \"https://github.com/dotnet/corefx/archive/master.zip\" -OutFile \"D:\\temp\\master.zip\" }\n\nDays              : 0\nHours             : 0\nMinutes           : 0\nSeconds           : 6\nMilliseconds      : 72\nTicks             : 60729893\nTotalDays         : 7.02892280092593E-05\nTotalHours        : 0.00168694147222222\nTotalMinutes      : 0.101216488333333\nTotalSeconds      : 6.0729893\nTotalMilliseconds : 6072.9893\n\nPS D:\\> $ProgressPreference = 'Continue'\nPS D:\\> Measure-Command { Invoke-WebRequest \"https://github.com/dotnet/corefx/archive/master.zip\" -OutFile \"D:\\temp\\master2.zip\" }\n\nDays              : 0\nHours             : 0\nMinutes           : 6\nSeconds           : 11\nMilliseconds      : 664\nTicks             : 3716642777\nTotalDays         : 0.00430166988078704\nTotalHours        : 0.103240077138889\nTotalMinutes      : 6.19440462833333\nTotalSeconds      : 371.6642777\nTotalMilliseconds : 371664.2777\n\nPS D:\\> $PSVersionTable\n\nName                           Value\n----                           -----\nPSVersion                      5.1.14931.1000\nPSEdition                      Desktop\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\nBuildVersion                   10.0.14931.1000\nCLRVersion                     4.0.30319.42000\nWSManStackVersion              3.0\nPSRemotingProtocolVersion      2.3\nSerializationVersion           1.1.0.1\n```\n\nIt would be nice to be able to have reasonable progress when downloading a file. Perhaps if there were a way to adjust the progress reporting interval to several KB instead of every byte (!!) then the overhead wouldn't be so bad.\n",
      "created_at": "2016-10-03T17:13:18Z",
      "updated_at": "2016-10-03T17:13:18Z"
    },
    {
      "author": "jasongin",
      "author_association": "NONE",
      "body": "This issue also affects Expand-Archive. For a large archive (10 MB with 3495 files), expanding it takes over 4X long with progress compared to without.\n",
      "created_at": "2016-10-04T00:01:52Z",
      "updated_at": "2016-10-04T00:01:52Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Changed title to be a generic issue with the progress bar.\n",
      "created_at": "2016-10-04T16:00:53Z",
      "updated_at": "2016-10-04T16:00:53Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Yeah, this is pretty bad ...\n\n```\n  Duration CommandLine\n  -------- -----------\n0.0356085s 1..1e3 | % { $null }\n0.7734768s 1..1e3 | % { Write-Host \"...\" }\n4.8700151s 1..1e3 | % { Write-Progress \"...\" }\n0.0040193s $ProgressPreference = \"SilentlyContinue\"\n0.0573198s 1..1e3 | % { Write-Progress \"...\" }\n```\n",
      "created_at": "2016-10-07T16:40:19Z",
      "updated_at": "2016-10-07T16:43:53Z"
    },
    {
      "author": "oising",
      "author_association": "CONTRIBUTOR",
      "body": "I remember noticing how much of a blocker progress writing was when I wrote the PSCX GAC provider back in 2007:\n\n```\n            foreach (AssemblyName name in Fusion.GetAssemblies(_type))\n            {\n                ++i;\n\n                if (i % 5 == 0)\n                {\n                    WriteProgress(name.Name);\n                }\n```\n\nhttps://github.com/Pscx/Pscx/blob/master/Src/Pscx/Providers/AssemblyCache/AssemblyNameCache.cs#L79\n\nWe decided to only write a record on every fifth iteration.\n",
      "created_at": "2016-10-18T13:29:20Z",
      "updated_at": "2016-10-18T13:29:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It's very simple (write a record on every fifth iteration). \ud83d\udc4d  Just seems the compromise is not always the optimal.\nMay be possible to write asynchronously every 3-5 seconds?\n",
      "created_at": "2016-11-02T08:06:30Z",
      "updated_at": "2016-11-02T08:06:30Z"
    },
    {
      "author": "oising",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Yeah. I'm just saying that it's a problem that's been there since the beginning. Skipping records doesn't solve all issues.\n",
      "created_at": "2016-11-02T18:00:46Z",
      "updated_at": "2016-11-02T18:00:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@oising This is not a criticism from me. I just asked your opinion on \"async\" since you have experience with the problem.\n",
      "created_at": "2016-11-03T14:07:53Z",
      "updated_at": "2016-11-03T14:07:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I did some research in codes and found that a partial solution already exists in [Checkpoint-Computer](https://github.com/PowerShell/PowerShell/blob/309bf603f9aff9009dce7e725d42b2d4f99f58c9/src/Microsoft.PowerShell.Commands.Management/commands/management/Computer.cs#L1074)\n\n``` powershell\n            if (recordType == ProgressRecordType.Processing)\n            {\n                TimeSpan timeSinceProgressWasWrittenLast = DateTime.UtcNow - lastTimeProgressWasWritten;\n                if (timeSinceProgressWasWrittenLast < TimeSpan.FromMilliseconds(200))\n                {\n                    return;\n                }\n            }\n            lastTimeProgressWasWritten = DateTime.UtcNow;\n```\n\nI used this for the test. Working call chain for WriteProgress is cmdlet.cs -> MshCommandRuntime.cs -> InternalHostUserInterface.cs -> ConsoleHostUserInterface.cs -> ConsoleHostUserInterfaceProgress.cs\n\nIn[ HandleIncomingProgressRecord ](https://github.com/PowerShell/PowerShell/blob/309bf603f9aff9009dce7e725d42b2d4f99f58c9/src/Microsoft.PowerShell.ConsoleHost/host/msh/ConsoleHostUserInterfaceProgress.cs#L52)(ConsoleHostUserInterfaceProgress.cs) I \"mask\" [_progPane.Show(_pendingProgress);](https://github.com/PowerShell/PowerShell/blob/309bf603f9aff9009dce7e725d42b2d4f99f58c9/src/Microsoft.PowerShell.ConsoleHost/host/msh/ConsoleHostUserInterfaceProgress.cs#L72)\n\n``` powershell\n            TimeSpan timeSinceProgressWasWrittenLast = DateTime.UtcNow - _lastTimeProgressWasWritten;\n            if (timeSinceProgressWasWrittenLast > TimeSpan.FromMilliseconds(200))\n            {\n                _progPane.Show(_pendingProgress);\n                _lastTimeProgressWasWritten = DateTime.UtcNow;\n            }\n```\n\nPerformance tests have shown that after this change, the difference between `SilentlyContinue` and `Continue` is less 3%.\n\nI played with `TimeSpan.FromMilliseconds(200))` and found that this value is optimal.\n`TimeSpan.FromMilliseconds(500))` is not giving a improvement, but the display becomes noticeably discrete.\n\nIf this is the correct place for the patch, I can do PR.\n\n@daxian-dbw @lzybkr Could you comment please?\n",
      "created_at": "2016-11-03T14:58:01Z",
      "updated_at": "2016-11-03T14:58:01Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "That's an interesting idea, I use a similar hack in PSReadline to minimize rendering calls.\n\nThere is one big problem with this approach - if we skip an update and don't see any progress updates for a long time, the current \"hung\" state would be misleading because the last update wasn't rendered.\n\nIf we could render updates on a timer, that might be ideal.\n",
      "created_at": "2016-11-04T23:02:14Z",
      "updated_at": "2016-11-04T23:02:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr Thanks for comment!\nI agree completely, and I will do the patch to call `_progPane.Show(_pendingProgress);` on a timer.\n",
      "created_at": "2016-11-05T07:59:27Z",
      "updated_at": "2016-11-05T07:59:27Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "It turns out the timer fix causes some potential race conditions (see the issue #2800 and discussions in PR #2771). So the timer change was reverted with PR #2806 for now, and we need to different approach to address this problem.\r\n\r\nIt would be very helpful if someone can run a profiler on `Invoke-WebRequest` to get more accurate data for analysis.",
      "created_at": "2016-11-30T00:11:01Z",
      "updated_at": "2016-11-30T00:11:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw\r\n Maybe:\r\n1.The timer set up a new  _progPaneUpdateFlag \r\n2. HandleIncomingProgressRecord  check ``_progPaneUpdateFlag then call _progPane.Show(_pendingProgress) and reset the _progPaneUpdateFlag`\r\n\r\nIt seems that we can simply control the time delta in  HandleIncomingProgressRecord  , but my earlier tests showed that is significantly slower.\r\n",
      "created_at": "2016-11-30T05:21:08Z",
      "updated_at": "2016-11-30T05:21:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "From @daxian-dbw \r\n> @iSazonov That is an interesting proposal -- by doing all the work in the same thread we certainly can avoid all race conditions. However, if  Write-Progress  is not called very frequently, then it's possible that the progress bar will not be updated ( Show  will not be called) for a long time.\r\n Let's move this discussion to the issue, so more people can jump in \ud83d\ude04",
      "created_at": "2016-11-30T05:22:16Z",
      "updated_at": "2016-11-30T05:22:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw\r\n> However, if Write-Progress is not called very frequently, then it's possible that the progress bar will not be updated ( Show will not be called) for a long time.\r\n\r\nThe `hung` problem was not full resolved by my PR too because `Write-Progress is not called very frequently` . The PR solved only a performance problem. I planned to solve this problem in a subsequent PR.\r\n\r\nActually there are three problems in one place, which might require different solutions:\r\n1. Calling `HandleIncomingProgressRecord` too often leads to unnecessary rendering. There is no need to update the pane structures so often and consume unnecessary resources. My above proposal I believe is good enough to protect from this. (We should not simply slow down rendering e.g. when calling `Now()` and checking the time delta because the script should continue to work as quickly as possible.)\r\n2. `Hung` or `Freeze` of a progress pane. If Write-Progress is not called very frequently user sees that the pane freeze. It may be a good solution to display a indicator updated by the same or other timer. It is better for UX to see the changes on the screen for long scripts. \r\n3. If Write-Progress show a progress pane and the script make output to console the user sees that the display shatters. These two processes should be \"merged\"  to form a single buffer for display.",
      "created_at": "2016-11-30T06:00:13Z",
      "updated_at": "2016-11-30T10:42:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Can you confirm that now web cmdlets performance is better with progress bar?",
      "created_at": "2017-03-18T10:22:18Z",
      "updated_at": "2017-03-18T10:22:18Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov using same repro as above\r\n\r\nWith alpha.17:\r\n```powershell\r\nTotalSeconds      : 65.3537138\r\n```\r\n\r\nwith your fix:\r\n```powershell\r\nTotalSeconds      : 10.9945305\r\n```\r\n\r\nLooks good!",
      "created_at": "2017-03-18T21:42:51Z",
      "updated_at": "2017-03-18T21:42:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Great! Many thanks to @daxian-dbw!",
      "created_at": "2017-03-19T06:11:04Z",
      "updated_at": "2017-03-19T06:11:04Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov thank you for pushing the fix through!\r\nThere are 3 minor remaining issues and they are tracked by #3366",
      "created_at": "2017-03-20T16:39:08Z",
      "updated_at": "2017-03-20T16:39:08Z"
    },
    {
      "author": "NiclasLindgren",
      "author_association": "NONE",
      "body": "Not sure if it is of interest still, but the speed when run under ISE instead of console is about the same as running command without progress. So the ISE console does not exhibit the same issue, or different buffering is used",
      "created_at": "2017-07-12T16:00:58Z",
      "updated_at": "2017-07-12T16:00:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@NiclasLindgren  Thanks for your comment! \r\nISE is not in the PowerShell Core repo, it is not ported and no plans is.",
      "created_at": "2017-07-12T16:09:57Z",
      "updated_at": "2017-07-12T16:09:57Z"
    },
    {
      "author": "NiclasLindgren",
      "author_association": "NONE",
      "body": "Yes, my point was, that \"powershell for windows\" (v4.0) has the same problem, When run under ISE the \"console\" does not slow down the performance, I thought it might be interesting for those with access to ISE to check what they do. Either way, the solution discussed here helped and I am happy =)",
      "created_at": "2017-07-12T17:14:42Z",
      "updated_at": "2017-07-12T17:14:42Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@NiclasLindgren Welcome to test PowerShell Core Beta.4! We have some console fixes in last time from @lzybkr so you may be surprised how much the console is faster. Also we wait a feedback for loading and using Windows PowerShell modules in PowerShell Core Beta.4.",
      "created_at": "2017-07-13T03:07:15Z",
      "updated_at": "2017-07-13T03:07:15Z"
    },
    {
      "author": "oising",
      "author_association": "CONTRIBUTOR",
      "body": "@niclaslindgren the long and short of it is that rendering progress bars in WPF is orders of magnitude fast than drawing progress bars in the windows console. It's not about the code path per-se. ",
      "created_at": "2017-07-13T15:53:09Z",
      "updated_at": "2017-07-13T15:53:09Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@NiclasLindgren haven't peeked at the ISE code, but I suspect the progress bar is being rendered on a separate thread while the console uses the same thread",
      "created_at": "2017-07-13T16:39:34Z",
      "updated_at": "2017-07-13T16:39:34Z"
    },
    {
      "author": "max06",
      "author_association": "NONE",
      "body": "Hello folks!\r\nI'm very sorry for digging up this old issue again, but I had to notice it still seem to be unresolved 6 years later.\r\n\r\nI ran my test using `Invoke-WebRequest` to download a bigger file. With no additional flags or settings, the download speed gets limited to 2-3 MBit/s on my machine - compared to 100 MBit/s+ without the progress bar. This was tested in the stock powershell console delivered with the latest Win11 22H2 update (`PSVersion: 5.1.22621.169`).\r\n\r\nAs I read above, there is, or used to be a fix. Is it still there? ",
      "created_at": "2022-09-30T22:19:20Z",
      "updated_at": "2022-09-30T22:19:20Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "@max06 this has already been fixed in PowerShell. Windows PowerShell most likely will never get that fix.\n\nYou can get around it on Windows PowerShell by using setting https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_preference_variables?view=powershell-7.2#progresspreference to SilentlyContinue. ",
      "created_at": "2022-09-30T23:20:33Z",
      "updated_at": "2022-09-30T23:23:47Z"
    },
    {
      "author": "max06",
      "author_association": "NONE",
      "body": "@ThomasNieto Thank you for your quick response!\r\n\r\nSo, Windows Powershell is different from this one? I never knew that \ud83d\ude32 \r\n\r\nI'm also not using PS very often, a colleague reported this issue while setting up a new server - I'll forward your hint to him.\r\n\r\n",
      "created_at": "2022-10-01T21:16:06Z",
      "updated_at": "2022-10-01T21:16:06Z"
    }
  ],
  "created_at": "2016-08-30T23:32:16Z",
  "labels": [
    "Issue-Bug",
    "WG-Cmdlets",
    "WG-Engine-Performance",
    "Resolution-Fixed"
  ],
  "number": 2138,
  "state": "closed",
  "title": "Progress bar can significantly impact cmdlet performance",
  "updated_at": "2022-10-01T21:16:06Z"
}