{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7297",
  "author": "rjmholt",
  "body": "Currently `Get-Module -ListAvailable -All` has a set of hard-to-describe behaviours that don't seem to align well with each other. An example is the following directory structure:\r\n\r\n```\r\nTopModule\r\n  + TopModule.psd1\r\n  + TopModule.psm1\r\n  + TopModule.dll\r\n  + NestedModule\r\n    + NestedModule.psd1\r\n    + NestedModule.psm1\r\n  + Unused\r\n    + AnotherDir\r\n      + UnusedModule.psm1\r\n```\r\n\r\nObserve the following outputs:\r\n\r\n```\r\n> Get-Module -ListAvailable -All .\\TopModule\r\n\r\n\r\n    Directory: C:\\Users\\roholt\\Documents\\Dev\\sandbox\r\n\r\n\r\nModuleType Version    Name                                PSEdition ExportedCommands\r\n---------- -------    ----                                --------- ----------------\r\nBinary     0.0.0.0    TopModule                           Desk\r\n\r\n```\r\n\r\n```\r\n> Get-Module -ListAvailable -All .\\TopModule\\*\r\n\r\n\r\n    Directory: C:\\Users\\roholt\\Documents\\Dev\\sandbox\\TopModule\r\n\r\n\r\nModuleType Version    Name                                PSEdition ExportedCommands\r\n---------- -------    ----                                --------- ----------------\r\nManifest   0.0.1      NestedModule                        Desk\r\n\r\n\r\n    Directory: C:\\Users\\roholt\\Documents\\Dev\\sandbox\r\n\r\n\r\nModuleType Version    Name                                PSEdition ExportedCommands\r\n---------- -------    ----                                --------- ----------------\r\nBinary     0.0.0.0    TopModule                           Desk\r\nManifest   0.0.1      TopModule                           Desk\r\nScript     0.0        TopModule                           Desk\r\n```\r\n\r\n```\r\n> Get-Module -ListAvailable -All ./TopModule/\r\nGet-Module : The specified module 'C:\\Users\\roholt\\Documents\\Dev\\sandbox\\TopModule\\' was not found. Update the Name parameter to point to a valid path, and then try again.\r\nAt line:1 char:1\r\n+ Get-Module -ListAvailable -All ./TopModule/\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : ResourceUnavailable: (C:\\Users\\roholt...dbox\\TopModule\\:String) [Get-Module], FileNotFoundException\r\n+ FullyQualifiedErrorId : Modules_ModuleNotFoundForGetModule,Microsoft.PowerShell.Commands.GetModuleCommand\r\n```\r\n\r\n```\r\n> mv .\\TopModule $PowerShellDevDir\\src\\powershell-win-core\\bin\\debug\\netcoreapp2.1\\win7-x64\\publish\\Mod\r\n    ules\r\n> Get-Module -ListAvailable -All\r\n...\r\n\r\n    Directory: C:\\users\\roholt\\documents\\dev\\powershell\\src\\powershell-win-core\\bin\\debug\\netcoreapp2.1\\win7-x64\\publish\\Mod\r\n    ules\\TopModule\r\n\r\n\r\nModuleType Version    Name                                PSEdition ExportedCommands\r\n---------- -------    ----                                --------- ----------------\r\nManifest   0.0.1      NestedModule                        Desk\r\nScript     0.0        NestedModule                        Desk\r\n\r\n    Directory:\r\n    C:\\users\\roholt\\documents\\dev\\powershell\\src\\powershell-win-core\\bin\\debug\\netcoreapp2.1\\win7-x64\\publish\\Modules\r\n\r\nModuleType Version    Name                                PSEdition ExportedCommands\r\n---------- -------    ----                                --------- ----------------\r\nScript     0.0        PackageProviderFunctions            Desk      {New-Feature, New-PackageSource, Write-Error, New-Req...\r\nScript     4.2.0      Pester                              Desk      {Describe, Context, It, Should...}\r\nScript     4.2.0      Pester                              Desk      {Describe, Context, It, Should...}\r\nScript     1.6.0      PowerShellGet                       Desk      {Install-Module, Find-Module, Save-Module, Update-Mod...\r\nScript     1.6.0      PowerShellGet                       Desk      {Install-Module, Find-Module, Save-Module, Update-Mod...\r\nScript     0.0        PSDesiredStateConfiguration         Desk      {ValidateNodeResourceSource, Test-MofInstanceText, Ge...\r\nScript     6.1.0.0    PSDiagnostics                       Core      {Disable-PSTrace, Disable-PSWSManCombinedTrace, Disab...\r\nScript     0.0        PSDiagnostics                       Desk      {Start-Trace, Enable-PSWSManCombinedTrace, Disable-WS...\r\nManifest   0.0        PSGet.Resource                      Desk\r\nScript     2.0.0      PSReadLine                          Desk      {Get-PSReadLineKeyHandler, Set-PSReadLineKeyHandler, ...\r\nScript     0.0        PSReadLine                          Desk      {Set-PSReadLineKeyHandler, Remove-PSReadLineKeyHandle...\r\nBinary     0.0.0.0    ThreadJob                           Desk\r\nBinary     1.1.1      ThreadJob                           Desk      Start-ThreadJob\r\nManifest   0.0.1      TopModule                           Desk\r\nScript     0.0        TopModule                           Desk\r\n\r\n\r\n    Directory: C:\\users\\roholt\\documents\\dev\\powershell\\src\\powershell-win-core\\bin\\debug\\netcoreapp2.1\\win7-x64\\publish\\Mod\r\n    ules\\TopModule\\Unused\r\n\r\n\r\nModuleType Version    Name                                PSEdition ExportedCommands\r\n---------- -------    ----                                --------- ----------------\r\nScript     0.0        UnusedModule                        Desk\r\n\r\n\r\n```\r\n\r\nSummary:\r\n* `Get-Module -ListAvailable -All` on relative path ending with slash: file not found error\r\n* `Get-Module -ListAvailable -All` on relative path with no slash: only enumerates top level module\r\n* `Get-Module -ListAvailable -All` on all files within module dir (relative path): enumerates only modules to 1 depth\r\n* `Get-Module -ListAvailable -All` with no arguments, enumerates fully any/all modules below a path on the PSModulePath\r\n\r\nThe recent `CompatiblePSEditions` addition makes this behaviour even more complex, since the intent is to hide incompatible modules. For `Get-Module -ListAvailable -All`, since it currently (in some circumstances) enumerates *all* modules (not just nested ones but even unused ones), it has to make a choice about whether to show or hide nested psm1/dll/etc modules underneath compatible psd1 modules (i.e. they have no way to declare compatibility themselves, but `Get-Module -ListAvailable -All` ignores \"nestedness\").\r\n\r\nAll of this, I think, means we should discuss what `Get-Module -ListAvailable -All` *should* do, what it *does* do and what it's *used for*. Ideally we can eventually choose a behaviour (or indeed, set of behaviours) that we can define in an RFC and then implement.\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.3\r\nPSEdition                      Core\r\nGitCommitId                    v6.1.0-preview.3-138-gf8ccb9f84755023afa52815d8dacc924757e61b1\r\nOS                             Microsoft Windows 10.0.17713\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2018-07-16T19:05:38Z",
  "labels": [
    "Issue-Discussion",
    "WG-Cmdlets-Core"
  ],
  "number": 7297,
  "state": "open",
  "title": "Intended behaviour for Get-Module -ListAvailable -All is not clear, especially for edition-incompatible modules",
  "updated_at": "2018-07-16T19:05:38Z"
}