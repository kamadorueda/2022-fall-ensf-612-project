{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8636",
  "author": "mcandre",
  "body": "PowerShell silently inserts a Unicode BOM at the beginning of output streams such as with `echo`, causing downstream processes to fail. For example, if you try to use `echo` to author a pip.ini file, pip will be unable to load the file due to the BOM.",
  "closed_at": "2019-02-26T01:06:09Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I thought PowerShell Core uses largely the BOM-less UTF8 variant for a majority of its standard encodings. :thinking:\r\n\r\nCan you please verify this is happening with PowerShell Core, and not Windows PowerShell?",
      "created_at": "2019-01-14T05:12:16Z",
      "updated_at": "2019-01-14T05:12:16Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "@mcandre can you provide a short sample that reproduces the behavior you describe?",
      "created_at": "2019-01-15T16:35:25Z",
      "updated_at": "2019-01-15T16:35:25Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32 the help for Set-Content says the default encoding is ascii?\r\n\r\n@chuanjiao10 text files don't need a BOM. Byte order is meaningless in UTF-8, and [isn't even recommended](http://www.unicode.org/faq/utf_bom.html#bom5). In fact, if the OP was correct that _streams_ were getting a BOM, this would probably be an egregious error. For instance if `echo` (aka `Write-Output`) was adding a BOM, that would be very bad.\r\n\r\nHowever, I'm pretty sure that's not the case.  Additionally PowerShell has been using utf-8 without a preamble (aka BOM) as the default `$OutputEncoding` since [the 6.0 release candidate](https://github.com/PowerShell/PowerShell/releases/tag/v6.0.0-rc) [PR #5369](https://github.com/PowerShell/PowerShell/pull/5369), so my guess is that @mcandre is dealing with Windows PowerShell 5.x or older.",
      "created_at": "2019-01-15T17:03:50Z",
      "updated_at": "2019-01-15T17:04:47Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "There's a lot of talk of war in here, but I still don't see any code to reproduce the issue originally described - @mcandre can you enlighten us?",
      "created_at": "2019-01-17T10:41:51Z",
      "updated_at": "2019-01-17T10:41:51Z"
    },
    {
      "author": "Amaroq-Clearwater",
      "author_association": "NONE",
      "body": "@chuanjiao10 Listen. UTF-8 is the modern standard for text-encoding. And being a mixed-case encoding format, it does not need a BOM. A lot of programs work just fine using heuristics to correctly identify unicode characters in UTF-8 strings, and UTF-8 is for the most part backwards-compatible with ANSI.\r\n\r\nOn the other hand, a lot of Windows programs mistakenly insert a BOM into UTF-8 text, Notepad included, and other Windows programs such as Command Prompt will actually fail to correctly parse UTF-8 strings because they'd try to parse a BOM as if it were normal text, thus breaking a command.\r\n\r\nPrograms that _rely_ on using a BOM as a \"magic number\" to identify UTF-8 text, to put it simply, are doing it wrong. It is a good thing to develop a program that can correctly identify a BOM inside of a UTF-8 string (and correctly identify a unicode string by the presence of a BOM), but for the most part, it is simply bad practice to rely on that alone, as opposed to going the extra mile and actually using heuristics to reliably detect UTF-8 encoding _with or without_ the presence of a BOM.\r\n\r\nP.S.: Please don't reference controversial political figures in here. Also, nobody here is saying that other languages shouldn't exist, so please don't go comparing removal of the UTF-8 BOM to \"English first\". That's bordering on hate speech.\r\nP.P.S.: The English army is from England, the term you'd be looking for is American army.",
      "created_at": "2019-02-22T01:50:00Z",
      "updated_at": "2019-02-22T01:57:52Z"
    },
    {
      "author": "Amaroq-Clearwater",
      "author_association": "NONE",
      "body": "Do you have a single fact to back that up?\r\n\r\nWith all due respect, you're being arrogant, stubborn, and needlessly hostile. I'm only going to politely ask you one more time to stop your harassment.\r\n\r\nP.S.: And for the last time, STOP BRINGING POLITICS INTO THIS!",
      "created_at": "2019-02-22T12:06:50Z",
      "updated_at": "2019-02-22T12:14:35Z"
    },
    {
      "author": "Amaroq-Clearwater",
      "author_association": "NONE",
      "body": "Back on subject, I agree with the original poster that PowerShell (and Notepad, also) needs to stop inserting a BOM when encoding UTF-8, but PowerShell also needs to be given the ability to ignore a BOM when it encounters one in a UTF-8 string.",
      "created_at": "2019-02-25T19:52:01Z",
      "updated_at": "2019-02-25T19:52:01Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Please respect our [Code of Conduct](https://github.com/PowerShell/PowerShell/blob/master/CODE_OF_CONDUCT.md) and stay on topic.\r\n\r\nAs for this issue, PSCore6 defaults to UTF-8 BOM-less encoding for output, so unless a repro can be produced, this seems to be about Windows PowerShell which is not serviced by this repo.",
      "created_at": "2019-02-26T01:06:09Z",
      "updated_at": "2019-02-26T01:06:09Z"
    }
  ],
  "created_at": "2019-01-14T03:19:21Z",
  "number": 8636,
  "state": "closed",
  "title": "Drop BOM",
  "updated_at": "2019-02-26T01:06:10Z"
}