{
  "_url": "https://github.com/PowerShell/PowerShell/issues/18027",
  "author": "kasini3000",
  "body": "### Summary of the new feature / enhancement\r\n\r\n# Context:\r\nQ:how to limit time for everypipe on ForEach-Object-Parallel?\r\nApparently, -timeoutsecond can't do that.\r\n\r\nIt can be understood like this:\r\nIf there is no \"-ThrottleLimit\" parameter, -TimeoutSeconds is basically as expected.\r\nBut now there is the \"-ThrottleLimit\" parameter, which makes -TimeoutSeconds unable to limit the runtime of each parallel.\r\n**\u201c-ThrottleLimit\u201d and \u201c-timeoutsecond\u201d cause subsequent pipes to time out without starting execution  **\r\n\r\nSo,we need -EverypipeTimeoutSecond.\r\ntime begin: from every parallel start\r\n\r\n@PaulHigin\r\n\r\n----\r\n\r\n> -timeoutsecond can't do that.\r\n\r\n-timeoutsecond can limit total time for all pipes.\r\nIf there are many pipes and the execution time of each pipe is inconsistent, then limit total time does not look so good.\r\nBoth in the manual and in actual tests it is demonstrated that:\r\n\r\n```powershell\r\n1..10 | ForEach-Object -ThrottleLimit 1 -TimeoutSeconds 2 -Parallel {\r\n\tStart-Sleep -Seconds 1\r\n\t$_\r\n}\r\n```\r\n\r\n\r\n\r\n### Proposed technical implementation details (optional)\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "I don't quite get this. If you have 10 jobs taking 1 second each and `-ThrottleLimit` 4, so that each thread takes 2.5s on average, which do you want to limit? Single job or single thread?",
      "created_at": "2022-09-04T17:33:35Z",
      "updated_at": "2022-09-04T17:33:35Z"
    },
    {
      "author": "kasini3000",
      "author_association": "NONE",
      "body": "I don't know if there is a one-to-one correspondence between each pipe and thread, so the name \"thread\" is not used here.\r\n\r\nRegarding how \"threads\" are used inside pipes:\r\nIf there is no \"-ThrottleLimit\" limit, does 100 pipes use 100 threads?\r\nFrom a reasonable point of view:\r\n100 pipes should not be started with 100 threads.\r\nIf it is cpu-intensive, threads with the number of cpu cores (or vcores) should be started.\r\nIf according to the io-intensive, it should start roughly 10 times as many threads as the cpu core.\r\n\r\n----\r\n\r\nForEach-Object-Parallel usage scenarios:\r\n1Invoke-WebRequest You can't expect every pipe site to have the same return time.\r\n\r\nWhen the number of pipes is large,\r\n1 \u201ctotal time\u201d is not as easy to use as \u201caverage time\u201d.\r\n2 When a pipe hangs in front of the pipes, or the time is crowded for a long time, the subsequent pipes have not started, and \u201cthe total time\u201d is up.\r\n\r\nby the way:\r\nIf you use the parameter asjob + PSBeginTime property to calculate the lifetime of each pipe yourself, you will lose the ability to output the write-* command in the foreground.",
      "created_at": "2022-09-05T03:36:36Z",
      "updated_at": "2022-09-05T04:12:45Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@dkaszews  I can see a wish for both. \r\n100 items to process, average time 1 second, 10 threads. > 10 cores to run them on. Whole process should run in 10 seconds. \r\nWe might want to stop a single item that is still running after 10 seconds.\r\nOr we might also want to stop the whole set if has not completed within 2 minutes \r\n\r\nThe second seems like a terminating error \"We stopped without processing everything\". \r\nThe first would be a way to fail _sooner_ but re-using the thread to process another item (maybe with a warning) strikes me as wrong - my instinct says something should process everything or throw an error, it should not silently drop items. But  I can see  someone saying \"My output tells me what has been processed, the commands I'm running in parallel can't change their timeouts so let me set one in the 'command-runner'\" ",
      "created_at": "2022-09-06T16:12:24Z",
      "updated_at": "2022-09-06T16:12:24Z"
    },
    {
      "author": "kasini3000",
      "author_association": "NONE",
      "body": "think:\r\nThe farmer has 10 sheep (pipes) and a trough (ThrottleLimit).\r\nThe farmer wants to average the sheep's food, not that the first sheep eat too much and the remaining 9 sheep starve to death.",
      "created_at": "2022-09-07T02:47:31Z",
      "updated_at": "2022-09-07T02:47:31Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> think: The farmer has 10 sheep (pipes) and a trough (ThrottleLimit). The farmer wants to average the sheep's food, not that the first sheep eat too much and the remaining 9 sheep starve to death.\r\n\r\nThe job is successfully done when no sheep are hungry. If the first sheep is removed from the trough while still hungry, do we say the job has failed ?\r\n\r\n**Ideally** the scriptblock run for each item should limit how long it can run, and raise the right exception. \r\n\r\n**However** Testing this I've found that `throw` (or  `break`  or `exit`) will not stop later items from running,  So removing the \"hungry sheep\" is no worse than what happens already. \r\nFor reasons I don't understand `foreach-object` doesn't allow `-parallel` and `ErrorAction/WarningAction/InformationAction` or `pipelinevariable`   -  but  setting `$ErrorActionPreference`  will cause it to stop for either  `throw` and `Write-Error`  - writing an error for \"hungry sheep\" would allow the other \"sheep\" to get their turns, but could also be transformed into a stop \r\n\r\n\r\n\r\n",
      "created_at": "2022-09-07T09:44:29Z",
      "updated_at": "2022-09-07T09:44:29Z"
    },
    {
      "author": "kasini3000",
      "author_association": "NONE",
      "body": "The farmer said: \"Don't worry about the sheep, the sick sheep will write-host or log themselves\"   ;)",
      "created_at": "2022-09-10T03:35:59Z",
      "updated_at": "2022-09-10T03:35:59Z"
    }
  ],
  "created_at": "2022-09-04T02:56:56Z",
  "number": 18027,
  "state": "open",
  "title": "add EverypipeTimeoutSecond to ForEach-Object-Parallel",
  "updated_at": "2022-09-10T03:35:59Z"
}