{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14953",
  "author": "nohwnd",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\n<!-- Summarize your PR between here and the checklist. -->\r\n\r\n## PR Context\r\n\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\n\r\nIn Pester we use breakpoints in CodeCoverage and can set thousands of them. This makes execution of scripts really slow. This is because on every sequence point, every breakpoint is inspected to see if it should be bound. This PR uses dictionaries to split breakpoints by path, and by sequence point index, to make the lookup fast. \r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [x] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and opened an issue in the relevant tool repository. This may include:\r\n        - [ ] Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode\r\n        (which runs in a different PS Host).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "nohwnd",
      "author_association": "NONE",
      "body": "In my measurements, running all my Pester tests runs ~40s without Code Coverage and ~300s with Code Coverage, which is 7 times more. Code Coverage sets around 7k breakpoints for my codebase.\r\n\r\nWith the fix, it runs ~40s without CC and ~42s with CC, including all the overhead of setting up breakpoints, calculating and printing the coverage report, so the execution is probably <1% slower with 7000 breakpoints enabled.",
      "created_at": "2021-03-07T13:58:58Z",
      "updated_at": "2021-03-07T13:58:58Z"
    },
    {
      "author": "nohwnd",
      "author_association": "NONE",
      "body": "@PaulHigin Polite nudge :) Could I get a review please? This would be a huge step forward for Pester users. Code coverage performance was always a pain point.",
      "created_at": "2021-03-15T09:45:14Z",
      "updated_at": "2021-03-15T09:45:14Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "I'll try and look at this later this week.  The problem with changing debugging code is that it is a interactive activity and our tests don't cover everything.  So I am concerned about introducing regressions.  But I should have time to look later this week.",
      "created_at": "2021-03-15T17:19:59Z",
      "updated_at": "2021-03-15T17:19:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> The problem with changing debugging code is that it is a interactive activity and our tests don't cover everything. So I am concerned about introducing regressions\r\n\r\nCould we add more xUnit tests? for which methods?",
      "created_at": "2021-03-15T17:45:44Z",
      "updated_at": "2021-03-15T17:45:44Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "It looks like I won't be able to get to this this week.  Sorry for the delay, and I'll make it a higher priority for next week.",
      "created_at": "2021-03-19T23:03:40Z",
      "updated_at": "2021-03-19T23:03:40Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@PowerShell/powershell-committee \r\n\r\nMarking this for committee review, as this is a significant change to the debugging code.\r\nThis change is to improve performance when using thousands of breakpoints for script code profiling.\r\nNote that the debugging code was not originally intended for this use, even though a number of third party tools do it.\r\nI thought that Jason added profiling support hooks in V3.0, and created a profiling prototype for community members to pick up, but I don't know what happened after that.\r\n\r\nDebugging is interactive and our tests don't cover many scenarios, and my main concern is regressions.\r\nI feel this should be marked as `experimental` and/or to get the changes in asap so that any regression bugs can be found and fixed.\r\n",
      "created_at": "2021-03-22T18:36:38Z",
      "updated_at": "2021-03-22T18:38:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I thought that Jason added profiling support hooks in V3.0, and created a profiling prototype for community members to pick up, but I don't know what happened after that.\r\n\r\n@PaulHigin This is implemented in #13673",
      "created_at": "2021-03-23T03:25:51Z",
      "updated_at": "2021-03-23T03:25:51Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, we understand that Pester may be depending on using the debugger for compatibility reasons with older PowerShell.  We recommend looking at the profiling work as a means to hook into PowerShell for a future Pester.  For this PR, we ask that it gets wrapped as an ExperimentalFeature and try to get this in early to verify there are no unintended side-effects.",
      "created_at": "2021-03-24T22:17:11Z",
      "updated_at": "2021-03-24T22:17:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I want to get understanding what tests we should add to avoid regressions?",
      "created_at": "2021-03-25T14:31:27Z",
      "updated_at": "2021-03-25T14:31:27Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2021-04-02T02:00:05Z",
      "updated_at": "2021-04-02T02:00:05Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2021-11-10T02:00:52Z",
      "updated_at": "2021-11-10T02:00:52Z"
    }
  ],
  "created_at": "2021-03-07T12:57:59Z",
  "number": 14953,
  "state": "open",
  "title": "Fix slow execution when many breakpoints are used",
  "updated_at": "2021-11-11T22:00:54Z"
}