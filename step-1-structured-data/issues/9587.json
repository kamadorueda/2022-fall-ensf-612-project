{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9587",
  "author": "daxian-dbw",
  "body": "`Add-Type` depends on the reference assemblies shipped with `pwsh`. The reference assemblies are not bundled with PowerShell SDK NuGet packages, so `Add-Type` doesn't work for applications that host PowerShell.",
  "closed_at": "2019-09-25T23:26:20Z",
  "comments": [
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "As ^ declares, Dongbo originally discovered this in Azure Functions - where I think folks will use Add-Type a fair bit at least.",
      "created_at": "2019-05-13T18:34:47Z",
      "updated_at": "2019-05-13T18:34:47Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Admit it, you just want a PSWordCloud Azure function endpoint :joy:",
      "created_at": "2019-05-30T00:10:12Z",
      "updated_at": "2019-05-30T00:10:12Z"
    },
    {
      "author": "invisibleaxm",
      "author_association": "NONE",
      "body": "I can confirm that this issue is there in the latest version of Powershell core 6 / azure functions and is a blocker for us. Is there a known work-around to get this working on azure functions or perhaps an estimated ETA of when we think this may be addressed?\r\n\r\nIn my scenario, I am loading a community module for cosmosdb ( https://www.powershellgallery.com/packages/CosmosDB/3.2.4.376) inside an azure powershell function. This module uses a custom type definition which yields an error when ran in azure functions only:\r\n\r\n[6/18/2019 3:39:54 PM] ERROR: Unable to find type [CosmosDB.ContextToken].\r\n[6/18/2019 3:39:54 PM] Result: ERROR: Unable to find type [CosmosDB.ContextToken].\r\nException: Unable to find type [CosmosDB.ContextToken].\r\nStack:    at System.Management.Automation.TypeOps.ResolveTypeName(ITypeName typeName, IScriptExtent errorPos)\r\n\r\nthis is the custom type definition as per the community module\r\n\r\n```\r\nif (-not ([System.Management.Automation.PSTypeName]'CosmosDB.Context').Type)\r\n{\r\n    $typeDefinition = @'\r\nnamespace CosmosDB {\r\n    public class ContextToken\r\n    {\r\n        public System.String Resource;\r\n        public System.DateTime TimeStamp;\r\n        public System.DateTime Expires;\r\n        public System.Security.SecureString Token;\r\n    }\r\n\r\n    public class BackoffPolicy\r\n    {\r\n        public System.Int32 MaxRetries;\r\n        public System.String Method;\r\n        public System.Int32 Delay;\r\n    }\r\n\r\n    public class Context\r\n    {\r\n        public System.String Account;\r\n        public System.String Database;\r\n        public System.Security.SecureString Key;\r\n        public System.String KeyType;\r\n        public System.String BaseUri;\r\n        public CosmosDB.ContextToken[] Token;\r\n        public CosmosDB.BackoffPolicy BackoffPolicy;\r\n    }\r\n\r\n    namespace IndexingPolicy {\r\n        namespace Path {\r\n            public class Index {\r\n                public System.String dataType;\r\n                public System.String kind;\r\n            }\r\n\r\n            public class IndexRange : CosmosDB.IndexingPolicy.Path.Index {\r\n                public readonly System.Int32 precision = -1;\r\n            }\r\n\r\n            public class IndexHash : CosmosDB.IndexingPolicy.Path.Index {\r\n                public readonly System.Int32 precision = -1;\r\n            }\r\n\r\n            public class IndexSpatial : CosmosDB.IndexingPolicy.Path.Index {\r\n            }\r\n\r\n            public class IncludedPath\r\n            {\r\n                public System.String path;\r\n                public CosmosDB.IndexingPolicy.Path.Index[] indexes;\r\n            }\r\n\r\n            public class ExcludedPath\r\n            {\r\n                public System.String path;\r\n            }\r\n        }\r\n\r\n        public class Policy\r\n        {\r\n            public System.Boolean automatic;\r\n            public System.String indexingMode;\r\n            public CosmosDB.IndexingPolicy.Path.IncludedPath[] includedPaths;\r\n            public CosmosDB.IndexingPolicy.Path.ExcludedPath[] excludedPaths;\r\n        }\r\n    }\r\n\r\n    namespace UniqueKeyPolicy {\r\n        public class UniqueKey {\r\n            public System.String[] paths;\r\n        }\r\n\r\n        public class Policy\r\n        {\r\n            public CosmosDB.UniqueKeyPolicy.UniqueKey[] uniqueKeys;\r\n        }\r\n    }\r\n}\r\n'@\r\n    Add-Type -TypeDefinition $typeDefinition\r\n}\r\n```\r\n\r\n```\r\n$PSVersionTable\r\n----------------------\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.1\r\nPSEdition                      Core\r\nGitCommitId                    6.2.1\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n-------------------------------------------------\r\nfunc --version\r\n2.7.1373\r\n```",
      "created_at": "2019-06-18T16:31:39Z",
      "updated_at": "2019-06-28T23:06:32Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "@invisibleaxm yep... that won't work today. Based on the code you've shown, it'd be very easy to convert those to PowerShell classes and things might just work...\r\n\r\nbut yeah this issue needs some work to be done in PowerShell which is actually quite difficult to solve elegantly.",
      "created_at": "2019-06-18T19:04:47Z",
      "updated_at": "2019-06-18T19:05:03Z"
    },
    {
      "author": "jnevins-gcm",
      "author_association": "NONE",
      "body": "any news on this? kind of a deal killer for using Powershell Core",
      "created_at": "2019-09-01T18:48:02Z",
      "updated_at": "2019-09-01T18:48:02Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #10587, which has now been successfully released as `v7.0.0-preview.5`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.5)\n",
      "created_at": "2019-10-23T19:08:02Z",
      "updated_at": "2019-10-23T19:08:02Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #10587, which has now been successfully released as `v6.2.4`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v6.2.4)\n",
      "created_at": "2020-01-27T22:19:37Z",
      "updated_at": "2020-01-27T22:19:37Z"
    }
  ],
  "created_at": "2019-05-13T15:31:07Z",
  "number": 9587,
  "state": "closed",
  "title": "'Add-Type' doesn't work in applications that host powershell",
  "updated_at": "2020-01-27T22:19:37Z"
}