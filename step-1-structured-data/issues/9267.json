{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9267",
  "author": "SeeminglyScience",
  "body": "# Steps to reproduce\r\n\r\n```powershell\r\nAdd-Type -TypeDefinition '\r\n    public struct MyStruct\r\n    {\r\n        public int X;\r\n\r\n        public MyStruct(int x) => X = x;\r\n\r\n        public static void AlterStructs(ref MyStruct s1, ref MyStruct s2)\r\n        {\r\n            s1.X += 10;\r\n            s2.X += 10;\r\n        }\r\n\r\n        public static int WorkingExample()\r\n        {\r\n            var myStruct = new MyStruct(10);\r\n            AlterStructs(ref myStruct, ref myStruct);\r\n            return myStruct.X;\r\n        }\r\n    }'\r\n\r\n$myStruct = [MyStruct]::new(10)\r\n[MyStruct]::AlterStructs([ref] $myStruct, [ref] $myStruct)\r\n```\r\n\r\n# Expected behavior\r\n\r\n```powershell\r\nPS> $myStruct.X\r\n30\r\nPS> [MyStruct]::WorkingExample()\r\n30\r\n```\r\n\r\n# Actual behavior\r\n\r\n```powershell\r\nPS> $myStruct.X\r\n20\r\nPS> [MyStruct]::WorkingExample()\r\n30\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.0\r\nPSEdition                      Core\r\nGitCommitId                    6.2.0\r\nOS                             Microsoft Windows 10.0.17134\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n# Remarks\r\n\r\nAlso reproduces on Windows PowerShell v5.1.",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "This seems to be a little more akin to how the `ref` function behaves in F#.\r\n\r\nIn f#, when you apply `ref X` it copies the value and then provides a reference to the cell that holds the copied value. It appears PowerShell is doing something similar.\r\n\r\nI suspect you'll need to follow the f# pattern here to do this, by first storing the [ref] value somewhere. For example:\r\n\r\n```\r\n$ref = [ref][MyStruct]::new(10)\r\n[MyStruct]::AlterStructs($ref, $ref)\r\n$ref.Value\r\n```",
      "created_at": "2019-04-01T18:36:09Z",
      "updated_at": "2019-04-01T18:36:09Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> In f#, when you apply ref X it copies the value and then provides a reference to the cell that holds the copied value. It appears PowerShell is doing something similar.\r\n\r\nYeah more or less, though I don't think it's purposeful here.  Here's where it's handled:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/4005f50faaa5d7f37de431aeb9283ac4f144c088/src/System.Management.Automation/engine/runtime/Binding/Binders.cs#L7151-L7156\r\n\r\nPowerShell is creating a temporary variable to use byref so it can call `PSReference.set_Value` after the method invocation. That stops your example syntax from working as well, same result of `20`. A possible solution would be to use the same `ParameterExpression` for any arguments where `PSReference._value` is the same `PSVariable`.\r\n\r\nTbh I'm not really sure this is worth fixing, just wanted it documented somewhere (even if that's as an issue closed as `wontfix`)",
      "created_at": "2019-04-01T18:56:41Z",
      "updated_at": "2019-04-01T18:56:41Z"
    }
  ],
  "created_at": "2019-04-01T18:15:58Z",
  "labels": [
    "Issue-Question",
    "WG-Engine"
  ],
  "number": 9267,
  "state": "open",
  "title": "Multiple byref arguments of the same variable do not reference the same location for ValueTypes",
  "updated_at": "2021-01-15T09:31:51Z"
}