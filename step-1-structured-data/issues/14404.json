{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14404",
  "author": "zett42",
  "body": "## Steps to reproduce\r\n\r\nCreate a XML file with \"ISO-8859-5\" encoding. Make sure there is an element that has some cyrillic letters. Read this file using `Select-Xml`. Output the XML element that contains cyrillic letters.\r\n\r\n```powershell\r\n# Create XML file that will be test input\r\n'<?xml version=\"1.0\" encoding=\"ISO-8859-5\"?><doc><data>\u043f\u043e-\u0440\u0443\u0441\u0441\u043a\u0438</data></doc>' | Out-File test.xml -Encoding ISO-8859-5\r\n\r\n# Read XML file using Select-Xml and output the text content of its 'data' element\r\n(Select-Xml -Path .\\test.xml -XPath '//data').Node.InnerText\r\n\r\n# For comparison, read XML using XmlDocument::load() and output the text content of its 'data' element\r\n$xml = [xml]::new()\r\n$xml.Load('test.xml')\r\n(Select-Xml -Xml $xml -XPath '//data').Node.InnerText\r\n```\r\n\r\n## Expected behavior\r\n\r\nIn both calls to Select-Xml the content of the 'data' element should be output correctly.\r\n```none\r\n\u043f\u043e-\u0440\u0443\u0441\u0441\u043a\u0438\r\n\u043f\u043e-\u0440\u0443\u0441\u0441\u043a\u0438\r\n```\r\n\r\n## Actual behavior\r\n\r\nThe first call to `Select-Xml` outputs the Unicode replacement character instead of the cyrillic letters.\r\nOnly the second call to `Select-Xml`, which takes an already loaded `XmlDocument` as input, outputs correctly.\r\n```none\r\n\ufffd\ufffd-\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\r\n\u043f\u043e-\u0440\u0443\u0441\u0441\u043a\u0438\r\n```\r\n\r\n## Environment data\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0-preview.1\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0-preview.1\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "Tomalak",
      "author_association": "NONE",
      "body": "This also happens for Powershell 5.1.\r\n\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.18362.1171\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.18362.1171\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```",
      "created_at": "2020-12-12T23:10:00Z",
      "updated_at": "2020-12-12T23:10:00Z"
    },
    {
      "author": "Tomalak",
      "author_association": "NONE",
      "body": "The error is in the implementation of `LoadUnsafeXmlDocument()` inside of `System.Management.Automation`, where the incoming `FileStream` is wrapped by a `TextReader` without specifying any encoding.\r\n\r\n```cs\r\n// *** wrong implementation ***\r\ninternal static XmlDocument LoadUnsafeXmlDocument(Stream stream, bool preserveNonElements, int? maxCharactersInDocument)\r\n{\r\n    using (TextReader reader = new StreamReader(stream))\r\n    {\r\n        return LoadUnsafeXmlDocument(reader, preserveNonElements, maxCharactersInDocument);\r\n    }\r\n}\r\n\r\ninternal static XmlDocument LoadUnsafeXmlDocument(TextReader textReader, bool preserveNonElements, int? maxCharactersInDocument)\r\n{\r\n    // ... load XmlDocument from textReader\r\n}\r\n```\r\n\r\nNote that not specifying any encoding is not the bug. Using a `TextReader` at all is. XML has built-in, transparent encoding detection. The downstream `XmlDocument` instance **must not** receive a `TextReader` when the XML source is a file. \r\n\r\nThe proper way to implement this is to skip all of it and pass the `FileStream` directly to [`XmlDocument.Load(Stream)`](https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmldocument.load#System_Xml_XmlDocument_Load_System_IO_Stream_), so it can work out the encoding. \r\n\r\nPassing the file path would also produce the right result.",
      "created_at": "2020-12-13T17:35:34Z",
      "updated_at": "2020-12-13T17:36:18Z"
    },
    {
      "author": "Tomalak",
      "author_association": "NONE",
      "body": "Simple repro using LINQPad\r\n\r\n```cs\r\nusing (var stream = new FileStream(@\"C:\\Users\\Tomalak\\Desktop\\russian.xml\", FileMode.Open))\r\n{\r\n\tvar d1 = new XmlDocument();\r\n\td1.Load(stream);\r\n\td1.Dump();\r\n\t\r\n\tstream.Seek(0, SeekOrigin.Begin);\r\n\r\n\tusing (TextReader reader = new StreamReader(stream))\r\n\t{\r\n\t\tvar d2 = new XmlDocument();\r\n\t\td2.Load(reader);\r\n\t\td2.Dump();\r\n\t}\r\n}\r\n```\r\n\r\nOutput\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"Windows-1251\"?>\r\n<data>\u041f\u0440\u0438\u0432\u0435\u0442, \u043c\u0438\u0440!</data>\r\n\r\n\ufeff<?xml version=\"1.0\" encoding=\"Windows-1251\"?>\r\n<data>\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd, \ufffd\ufffd\ufffd!</data>\r\n```\r\n",
      "created_at": "2020-12-13T17:43:20Z",
      "updated_at": "2020-12-13T17:43:20Z"
    }
  ],
  "created_at": "2020-12-12T18:46:43Z",
  "labels": [
    "Issue-Bug",
    "WG-Cmdlets-Utility"
  ],
  "number": 14404,
  "state": "open",
  "title": "\"Select-Xml -Path\" ignores encoding attribute of XML declaration",
  "updated_at": "2020-12-13T17:43:21Z"
}