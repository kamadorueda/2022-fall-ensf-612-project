{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12358",
  "author": "p0W3RH311",
  "body": "### steps to reproduce\r\nif  i copy or assign variable to other variable the copy is not  complete\r\n\r\n```\r\nPS C:\\> [validateSet('a','b','c')]$abc  = 'a'\r\nPS C:\\> Copy-Item Variable:\\abc  variable:\\abc2\r\nPS C:\\> $abc3 = $abc\r\n```\r\n\r\n### expected behavior\r\n\r\n```\r\nPS C:\\> (Get-Variable abc).Attributes\r\n\r\nErrorMessage IgnoreCase ValidValues TypeId\r\n------------ ---------- ----------- ------\r\n                   True {a, b, c}   System.Management.Automation.ValidateSetAttribute\r\n\r\nPS C:\\> (Get-Variable abc2).Attributes\r\n\r\nErrorMessage IgnoreCase ValidValues TypeId\r\n------------ ---------- ----------- ------\r\n                   True {a, b, c}   System.Management.Automation.ValidateSetAttribute\r\n\r\nPS C:\\> (Get-Variable abc3).Attributes\r\n\r\nErrorMessage IgnoreCase ValidValues TypeId\r\n------------ ---------- ----------- ------\r\n                   True {a, b, c}   System.Management.Automation.ValidateSetAttribute\r\n\r\nPS C:\\>\r\n```\r\n\r\n### actual behavior\r\n```\r\n\r\nPS C:\\> (Get-Variable abc).Attributes\r\n\r\nErrorMessage IgnoreCase ValidValues TypeId\r\n------------ ---------- ----------- ------\r\n                   True {a, b, c}   System.Management.Automation.ValidateSetAttribute\r\n\r\nPS C:\\> (Get-Variable abc2).Attributes\r\nPS C:\\> (Get-Variable abc3).Attributes\r\nPS C:\\>\r\n```\r\n\r\n### envvironmment\r\n\r\n\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0\r\nOS                             Microsoft Windows 6.3.9600\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u00d4\u00c7\u00aa}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "Hi @p0W3RH311 You misunderstand. `Copy-Item` copies the _value_ of the variable, not the variable object itself. Since the associated metadata resides on the variable object not on the value it contains, there is no \"deeper\" to copy. If you really need to manipulate variables, use the `Get-Variable`/`Set-Variable` cmdlets. This is what they were designed for.",
      "created_at": "2020-04-18T20:01:14Z",
      "updated_at": "2020-04-18T20:01:14Z"
    },
    {
      "author": "p0W3RH311",
      "author_association": "NONE",
      "body": "@bpayette \r\n\r\nthanks,\r\n\r\ni tried this but\r\n\r\n```\r\nPS C:\\> [validateSet('a','b','c')]$abc  = 'a'\r\nPS C:\\> New-Variable -Name b -Value $abc\r\nPS C:\\> $b\r\na\r\nPS C:\\> (Get-Variable b).Attributes\r\nPS C:\\> $b\r\na\r\nPS C:\\> (Get-Variable b).Attributes\r\nPS C:\\> (Get-Variable b).Attributes = (Get-Variable -Name abc).Attributes\r\n```\r\n\r\nattributes is read-only.\r\n\r\nits possible to clone the object variable easily for example add another switch to **new-variable** and **set-variable** for example  switch **-clone**\r\n\r\nexample:\r\n`new-variable -name b -clone -value $abc`\r\n\r\nor add another cmdlet **clone-object** or **clone-variable**",
      "created_at": "2020-04-19T16:01:24Z",
      "updated_at": "2020-04-19T16:02:44Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@bpayette The name implies to me that it's copying the *item*.  If it was supposed to be just the value, wouldn't `Copy-Content` have been more appropriate?  Also the FileSystem provider sets some precedent since metadata like last write time, readonly, etc are also copied.\r\n\r\n@p0W3RH311 here's a workaround\r\n\r\n```powershell\r\n[validateSet('a','b','c')]$abc  = 'a'\r\n$source = Get-Variable abc\r\n$newVar = [psvariable]::new(\r\n    'c',\r\n    $source.Value,\r\n    $source.Options,\r\n    $source.Attributes)\r\n\r\n$ExecutionContext.SessionState.PSVariable.Set($newVar)\r\n$c = 'd'\r\n# throws validation error\r\n```",
      "created_at": "2020-04-20T16:47:28Z",
      "updated_at": "2020-04-20T16:51:29Z"
    },
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "@SeeminglyScience It **is** copying the item, because, by design, \"item\" means the `Value` stored in the variable.  Should `$x = $y` copy the `PSVariable` object too? Actually, can you provide a example where 'copy' copies the reference to the value as well as the value. \r\n",
      "created_at": "2020-04-21T03:55:10Z",
      "updated_at": "2020-04-21T03:55:10Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "```powershell\r\nGet-Item Variable:\\ExecutionContext\r\n# Name                           Value\r\n# ----                           -----\r\n# ExecutionContext               System.Management.Automation.EngineIntrinsics\r\n\r\nGet-Content Variable:\\ExecutionContext\r\n# PSPath         : Variable:\\ExecutionContext\r\n# PSDrive        : Variable\r\n# PSProvider     : Microsoft.PowerShell.Core\\Variable\r\n# ReadCount      : 1\r\n# Host           : System.Management.Automation.Internal.Host.InternalHost\r\n# Events         : System.Management.Automation.PSLocalEventManager\r\n# InvokeProvider : System.Management.Automation.ProviderIntrinsics\r\n# SessionState   : System.Management.Automation.SessionState\r\n# InvokeCommand  : System.Management.Automation.CommandInvocationIntrinsics\r\n```\r\n\r\nThe item is the `PSVariable`.  The value is the *content*.\r\n\r\n> Should `$x = $y` copy the `PSVariable` object too?\r\n\r\nNah, *that's* the value.\r\n\r\n> Actually, can you provide a example where 'copy' copies the reference to the value as well as the value.\r\n\r\nNot the reference, it should clone the item.  In the same way that copying a file doesn't copy a reference, it just clones the item.",
      "created_at": "2020-04-21T10:44:01Z",
      "updated_at": "2020-04-21T10:44:01Z"
    },
    {
      "author": "p0W3RH311",
      "author_association": "NONE",
      "body": "> \r\n> \r\n> @bpayette The name implies to me that it's copying the _item_. If it was supposed to be just the value, wouldn't `Copy-Content` have been more appropriate? Also the FileSystem provider sets some precedent since metadata like last write time, readonly, etc are also copied.\r\n> \r\n> @p0W3RH311 here's a workaround\r\n> \r\n> ```powershell\r\n> [validateSet('a','b','c')]$abc  = 'a'\r\n> $source = Get-Variable abc\r\n> $newVar = [psvariable]::new(\r\n>     'c',\r\n>     $source.Value,\r\n>     $source.Options,\r\n>     $source.Attributes)\r\n> \r\n> $ExecutionContext.SessionState.PSVariable.Set($newVar)\r\n> $c = 'd'\r\n> # throws validation error\r\n> ```\r\n\r\n@SeeminglyScience +1\r\n\r\nthanks for your solution ...but i believe is an anti-pattern.  \r\nits more simpler and clean if  we implement this  behavior as cmdlet or parameter for example:  `clone-variable -name a -source b `\r\n\r\nbut in this case we add the verb \"clone\" in get-verb",
      "created_at": "2020-04-21T13:56:07Z",
      "updated_at": "2020-04-21T13:56:07Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "`Clone-Variable` in that case is literally just duplicating `Copy-Item`. That's what `Copy-Item` is supposed to do, and that's what it does for every other provider.\r\n\r\nWe don't generally add verbs that cover the same territory -- `Clone` has the same meaning as `Copy`. If we wanted a specific `Copy-Variable` then maybe, but I don't see a reason for `Copy-Item` to not copy the variable's properties as well as the value.",
      "created_at": "2020-04-21T13:59:20Z",
      "updated_at": "2020-04-21T13:59:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What a business scenario do you want address to justify the change of this long-term design?",
      "created_at": "2020-04-22T14:47:35Z",
      "updated_at": "2020-04-22T14:47:35Z"
    },
    {
      "author": "scriptingstudio",
      "author_association": "NONE",
      "body": "@p0W3RH311 try this\r\n\r\n```\r\nfunction Copy-Object ($inputobject) {\r\n\tif (-not $inputobject) {return}\r\n\t$ms = New-Object System.IO.MemoryStream\r\n\t$bf = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter\r\n\t$bf.Serialize($ms, $inputobject)\r\n\t$ms.Position = 0\r\n\t$bf.Deserialize($ms)\r\n\t$ms.Close()\r\n\t$ms.Dispose()\r\n} # END Copy-Object\r\n```\r\n    ",
      "created_at": "2020-04-22T15:09:06Z",
      "updated_at": "2020-04-22T15:09:06Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@scriptingstudio he's referring to properties of the `PSVariable` object itself.  Like type declaration, attribute decorations, readonly, etc.",
      "created_at": "2020-04-22T15:11:16Z",
      "updated_at": "2020-04-22T15:11:16Z"
    }
  ],
  "created_at": "2020-04-17T14:57:52Z",
  "number": 12358,
  "state": "open",
  "title": "deep copy instead of shallow  copy",
  "updated_at": "2021-12-03T12:49:23Z"
}