{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17875",
  "author": "mmisztal1980",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\n- Obtain a MacOS / nix machine\r\n- Create a `.psm1` module and place it in a subfolder under your home `~` directly\r\n- Create a `.ps1` script and attempt to reference the `.psm1` module using the `using module` statement\r\n- Run the script\r\n\r\n**Example**\r\n```pwsh\r\n#!/usr/local/bin/pwsh\r\nusing module \"~/.nuget/packages/<package-name>/1.0.1/scripts/k8s/module.psm1\"\r\n```\n\n### Expected behavior\n\n```console\nI expected the `using module` statement to successfully load classes from the `.psm1` module\n```\n\n\n### Actual behavior\n\n```console\n- I'm receiving an error stating:\r\n\r\n\r\nThe specified module '/Users/<username>/<calling ps1 path>/~/.nuget/packages/<package-name>/1.0.1/scripts/k8s/module.psm1' was not loaded because no valid module file was found in any module directory.\r\n```\r\n\r\n- I've verified that the file exists under the `~/.nuget/packages/<package-name>/1.0.1/scripts/k8s/module.psm1'` path\r\n- For some reason the calling script's path and the module's path are getting merged\n```\n\n\n### Error details\n\n```console\nException             : \r\n    Type        : System.Management.Automation.RuntimeException\r\n    ErrorRecord : \r\n        Exception             : \r\n            Type    : System.Management.Automation.ParentContainsErrorRecordException\r\n            Message : The specified module '/Users/maciej.misztal/Projects/@devops/ops-k8s-argocd/content/scripts/~/.nuget/packages/allegropay.devops.\r\nk8s.automation/1.0.1/scripts/k8s/HELM.psm1' was not loaded because no valid module file was found in any module directory.\r\n            HResult : -2146233087\r\n        TargetObject          : /Users/maciej.misztal/Projects/@devops/ops-k8s-argocd/content/scripts/ArgoCD.psm1\r\n        CategoryInfo          : InvalidOperation: (/Users/maciej.miszt\u2026scripts/ArgoCD.psm1:String) [], ParentContainsErrorRecordException\r\n        FullyQualifiedErrorId : Modules_ModuleNotFound,Microsoft.PowerShell.Commands.ImportModuleCommand\r\n        InvocationInfo        : \r\n            ScriptLineNumber : 1\r\n            OffsetInLine     : 3\r\n            HistoryId        : 1\r\n            Line             : . \"/Users/maciej.misztal/Projects/@devops/ops-k8s-argocd/content/scripts/Deploy.ArgoCD.ps1\"\r\n            PositionMessage  : At line:1 char:3\r\n                               + . \"/Users/maciej.misztal/Projects/@devops/ops-k8s-argocd/content/scri \u2026\r\n                               +   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n            InvocationName   : .\r\n            CommandOrigin    : Internal\r\n        ScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\n    TargetSite  : \r\n        Name          : LoadModule\r\n        DeclaringType : System.Management.Automation.Language.Compiler, System.Management.Automation, Version=7.1.2.0, Culture=neutral, \r\nPublicKeyToken=31bf3856ad364e35\r\n        MemberType    : Method\r\n        Module        : System.Management.Automation.dll\r\n    StackTrace  : \r\n   at System.Management.Automation.Language.Compiler.LoadModule(PSModuleInfo originalModuleInfo)\r\n   at System.Management.Automation.Language.Compiler.LoadUsingsImpl(IEnumerable`1 usingAsts, Assembly[]& assemblies)\r\n   at System.Management.Automation.Language.Compiler.GenerateLoadUsings(IEnumerable`1 usingStatements, Boolean allUsingsAreNamespaces, List`1 exprs)\r\n   at System.Management.Automation.Language.Compiler.GenerateTypesAndUsings(ScriptBlockAst rootForDefiningTypesAndUsings, List`1 exprs)\r\n   at System.Management.Automation.Language.Compiler.CompileSingleLambda(ReadOnlyCollection`1 statements, ReadOnlyCollection`1 traps, String \r\nfuncName, IScriptExtent entryExtent, IScriptExtent exitExtent, ScriptBlockAst rootForDefiningTypesAndUsings)\r\n   at System.Management.Automation.Language.Compiler.CompileNamedBlock(NamedBlockAst namedBlockAst, String funcName, ScriptBlockAst \r\nrootForDefiningTypes)\r\n   at System.Management.Automation.Language.Compiler.VisitScriptBlock(ScriptBlockAst scriptBlockAst)\r\n   at System.Management.Automation.Language.ScriptBlockAst.Accept(ICustomAstVisitor visitor)\r\n   at System.Management.Automation.Language.Compiler.Compile(CompiledScriptBlockData scriptBlock, Boolean optimize)\r\n   at System.Management.Automation.CompiledScriptBlockData.ReallyCompile(Boolean optimize)\r\n   at System.Management.Automation.CompiledScriptBlockData.CompileUnoptimized()\r\n   at System.Management.Automation.CompiledScriptBlockData.Compile(Boolean optimized)\r\n   at System.Management.Automation.ScriptBlock.Compile(Boolean optimized)\r\n   at System.Management.Automation.PSScriptCmdlet..ctor(ScriptBlock scriptBlock, Boolean useNewScope, Boolean fromScriptFile, ExecutionContext \r\ncontext)\r\n   at System.Management.Automation.CommandProcessor.Init(IScriptCommandInfo scriptCommandInfo)\r\n   at System.Management.Automation.CommandProcessor..ctor(IScriptCommandInfo scriptCommandInfo, ExecutionContext context, Boolean useLocalScope, \r\nBoolean fromScriptFile, SessionStateInternal sessionState)\r\n   at System.Management.Automation.CommandDiscovery.GetScriptAsCmdletProcessor(IScriptCommandInfo scriptCommandInfo, ExecutionContext context, \r\nBoolean useNewScope, Boolean fromScriptFile, SessionStateInternal sessionState)\r\n   at System.Management.Automation.CommandDiscovery.CreateCommandProcessorForScript(ExternalScriptInfo scriptInfo, ExecutionContext context, Boolean \r\nuseNewScope, SessionStateInternal sessionState)\r\n   at System.Management.Automation.CommandDiscovery.CreateScriptProcessorForSingleShell(ExternalScriptInfo scriptInfo, ExecutionContext context, \r\nBoolean useLocalScope, SessionStateInternal sessionState)\r\n   at System.Management.Automation.CommandDiscovery.LookupCommandProcessor(CommandInfo commandInfo, CommandOrigin commandOrigin, Nullable`1 \r\nuseLocalScope, SessionStateInternal sessionState)\r\n   at System.Management.Automation.CommandDiscovery.LookupCommandProcessor(String commandName, CommandOrigin commandOrigin, Nullable`1 useLocalScope)\r\n   at System.Management.Automation.ExecutionContext.CreateCommand(String command, Boolean dotSource)\r\n   at System.Management.Automation.PipelineOps.AddCommand(PipelineProcessor pipe, CommandParameterInternal[] commandElements, CommandBaseAst \r\ncommandBaseAst, CommandRedirection[] redirections, ExecutionContext context)\r\n   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal[][] pipeElements, \r\nCommandBaseAst[] pipeElementAsts, CommandRedirection[][] commandRedirections, FunctionContext funcContext)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n    Message     : The specified module '/Users/maciej.misztal/Projects/@devops/ops-k8s-argocd/content/scripts/~/.nuget/packages/allegropay.devops.k8s.\r\nautomation/1.0.1/scripts/k8s/HELM.psm1' was not loaded because no valid module file was found in any module directory.\r\n    Data        : System.Collections.ListDictionaryInternal\r\n    Source      : System.Management.Automation\r\n    HResult     : -2146233087\r\nTargetObject          : /Users/maciej.misztal/Projects/@devops/ops-k8s-argocd/content/scripts/ArgoCD.psm1\r\nCategoryInfo          : InvalidOperation: (/Users/maciej.miszt\u2026scripts/ArgoCD.psm1:String) [], RuntimeException\r\nFullyQualifiedErrorId : Modules_ModuleNotFound,Microsoft.PowerShell.Commands.ImportModuleCommand\r\nInvocationInfo        : \r\n    ScriptLineNumber : 1\r\n    OffsetInLine     : 3\r\n    HistoryId        : 1\r\n    Line             : . \"/Users/maciej.misztal/Projects/@devops/ops-k8s-argocd/content/scripts/Deploy.ArgoCD.ps1\"\r\n    PositionMessage  : At line:1 char:3\r\n                       + . \"/Users/maciej.misztal/Projects/@devops/ops-k8s-argocd/content/scri \u2026\r\n                       +   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    InvocationName   : .\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\n```\n\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.2\r\nPSEdition                      Core\r\nGitCommitId                    7.1.2\r\nOS                             Darwin 21.4.0 Darwin Kernel Version 21.4.0: Mon Feb 21 20:34:37 PST 2022; root:xnu-8020.101.4~2/RELEASE_X86_64\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "Because `using` is the .Net statement and it does not know about powershell's aliases or variables.",
      "created_at": "2022-08-11T15:24:44Z",
      "updated_at": "2022-08-11T15:24:44Z"
    },
    {
      "author": "mmisztal1980",
      "author_association": "NONE",
      "body": "@237dmitry why does this work then? https://sid-500.com/2017/08/03/powershell-how-to-quickly-switch-to-your-home-directory/\r\n\r\nedit: just noticed it's on windows, but it still resolves the home directory correctly - I'd say the behavior is inconsistent\r\nedit2: using is a pwsh statement: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_using?view=powershell-7.2#module-syntax\r\n\r\n<blockquote><img src=\"https://patrick6649.files.wordpress.com/2017/07/unbenannt19.jpg\" width=\"48\" align=\"right\"><div><img src=\"https://patrick6649.files.wordpress.com/2020/03/cropped-1_patrick_gruenauer_rund.png?w=192\" height=\"14\"> SID-500.COM</div><div><strong><a href=\"https://sid-500.com/2017/08/03/powershell-how-to-quickly-switch-to-your-home-directory/\">PowerShell: How to quickly switch to your home directory</a></strong></div><div>You certainly know the commands cd and Set-Location. It stands for change directory. I hope you also know the commands cd \\ and cd .. But what about cd ~ ?</div></blockquote>",
      "created_at": "2022-08-11T15:30:52Z",
      "updated_at": "2022-08-11T15:32:29Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "`~` is powershell (and other unix shells) alias for the user home directory. It does not exist in file system.\r\n```powershell\r\nPS > $a = [io.directoryinfo]::new('~')\r\nPS > $a.Exists\r\nFalse\r\n\r\nPS > $a = [io.directoryinfo]::new('/home/user')\r\nPS > $a.Exists\r\nTrue\r\n```",
      "created_at": "2022-08-11T15:43:10Z",
      "updated_at": "2022-08-11T15:45:31Z"
    },
    {
      "author": "mmisztal1980",
      "author_association": "NONE",
      "body": "In that case it's not being resolved by the `using module` statement properly",
      "created_at": "2022-08-11T15:44:40Z",
      "updated_at": "2022-08-11T15:44:40Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "I'd like to see this. The biggest potential disconnect is that `~` is configurable, so it's not particularly well suited for a parse time concept:\r\n\r\n```powershell\r\nPS C:\\> (Get-PSProvider FileSystem).Home = 'C:\\Program Files\\'\r\nPS C:\\> Get-Item ~\r\n\r\n    Directory: C:\\\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\nd-r--           7/27/2022 12:18 PM                Program Files \r\n```\r\n\r\nOpening up to the Engine WG for discussion.\r\n\r\n---\r\n\r\nAlso note that `using` in this context is a PowerShell concept. There's already plenty of custom handling in the path resolution.",
      "created_at": "2022-08-11T16:04:50Z",
      "updated_at": "2022-08-11T16:05:46Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "Try to use `using namespace` to define namespace + Add-Type cmdlet to load module.\r\n```\r\nusing namespace Module.Namespace\r\nAdd-Type -assembly \"~/path/to/module.dll\"\r\n```\r\n\r\n![Screenshot 2022-08-11 191421](https://user-images.githubusercontent.com/78153320/184180492-b0af9318-74a2-42da-80a9-0d98102f80e8.png)",
      "created_at": "2022-08-11T16:08:19Z",
      "updated_at": "2022-08-11T16:15:20Z"
    },
    {
      "author": "mmisztal1980",
      "author_association": "NONE",
      "body": "I'm not loading a dll, I'm loading a `.psm1` module",
      "created_at": "2022-08-11T16:12:30Z",
      "updated_at": "2022-08-11T16:12:30Z"
    },
    {
      "author": "mmisztal1980",
      "author_association": "NONE",
      "body": "@SeeminglyScience sure, you can DM me via twitter and I can show you the sample use-case",
      "created_at": "2022-08-11T16:42:13Z",
      "updated_at": "2022-08-11T16:42:13Z"
    },
    {
      "author": "kasini3000",
      "author_association": "NONE",
      "body": "try:\r\n\r\n```\r\n$a = Resolve-Path \"~/.nuget/packages/<package-name>/1.0.1/scripts/k8s/module.psm1\"\r\nusing module $a.path\r\n```",
      "created_at": "2022-08-11T17:06:35Z",
      "updated_at": "2022-08-11T17:07:25Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> Because `using` is the .Net statement and it does not know about powershell's aliases or variables.\r\n\r\nnot at all sure that `using module <path to ps module>` is a .net statement \r\nand even if it were, somewhere between the PowerShell parser and the .net internals the path should be resolved. \r\n\r\n@kasini3000 's  work round  or using `Import-Module` instead should avoid the error, but it does look like a bug to me.  \r\n\r\n",
      "created_at": "2022-08-11T17:47:55Z",
      "updated_at": "2022-08-11T17:47:55Z"
    },
    {
      "author": "mmisztal1980",
      "author_association": "NONE",
      "body": "Won't work. It needs to be a top-level statement.",
      "created_at": "2022-08-11T18:56:39Z",
      "updated_at": "2022-08-11T18:56:39Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> and even if it were, somewhere between the PowerShell parser and the .net internals the path should be resolved.\r\n\r\n.Net syntax is not friendly with ` ~ ` as part of the path\r\n\r\n![ArcoLinux_2022-08-11_21-52-53](https://user-images.githubusercontent.com/78153320/184217874-2f519d8b-974d-4c78-84ed-436e70e26724.png)\r\n",
      "created_at": "2022-08-11T18:57:13Z",
      "updated_at": "2022-08-11T18:57:13Z"
    },
    {
      "author": "mmisztal1980",
      "author_association": "NONE",
      "body": "Import-Module is a no-go. I need to import the classes out of the psm1",
      "created_at": "2022-08-11T18:57:16Z",
      "updated_at": "2022-08-11T18:57:16Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> I need to import the classes out of the psm1\r\n\r\nYou can place module in `$env:PSModulePath`. After that you will be able to load the module by name\r\n```\r\nusing module ModulName\r\n```",
      "created_at": "2022-08-11T19:07:56Z",
      "updated_at": "2022-08-11T19:07:56Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> Import-Module is a no-go. I need to import the classes out of the psm1\r\n\r\nThere is work-round for that too, but it looks like resolving the path before the using statement is easier - especially if it is not your module to modify. \r\n",
      "created_at": "2022-08-11T19:17:40Z",
      "updated_at": "2022-08-11T19:17:40Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> .Net syntax is not friendly with `~` as part of the path\r\n\r\n@237dmitry Our `using` statement is not a dotnet concept. We have full control over how it acts.\r\n\r\nThe question is whether we can consider `~` to be usable in what is a parse time construct, not whether we have the ability to change it.",
      "created_at": "2022-08-11T19:19:49Z",
      "updated_at": "2022-08-11T19:19:49Z"
    },
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "Considering that relative paths work like: `using module ..\\..\\TestModule` I don't see why ~ shouldn't also work.",
      "created_at": "2022-08-11T19:49:06Z",
      "updated_at": "2022-08-11T19:49:35Z"
    },
    {
      "author": "mmisztal1980",
      "author_association": "NONE",
      "body": "> > Import-Module is a no-go. I need to import the classes out of the psm1\r\n> \r\n> There is work-round for that too, but it looks like resolving the path before the using statement is easier - especially if it is not your module to modify.\r\n\r\nCan you elaborate?",
      "created_at": "2022-08-11T20:04:00Z",
      "updated_at": "2022-08-11T20:04:00Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> I don't see why ~ shouldn't also work.\r\n\r\nFrom help `about_using`:\r\n\r\n> When \\<module-name\\> is a path, the path can be fully qualified or relative.\r\n\r\nFull path. Literally.",
      "created_at": "2022-08-11T20:12:17Z",
      "updated_at": "2022-08-11T20:12:17Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Considering that relative paths work like: `using module ..\\..\\TestModule` I don't see why ~ shouldn't also work.\r\n\r\nInterestingly, relative paths work differently in `using` statements. They work relative to the *file* rather than the working directory. Basically the `using` version of `$PSScriptRoot`",
      "created_at": "2022-08-11T20:18:21Z",
      "updated_at": "2022-08-11T20:18:50Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> > > Import-Module is a no-go. I need to import the classes out of the psm1\r\n> > \r\n> > \r\n> > There is work-round for that too, but it looks like resolving the path before the using statement is easier - especially if it is not your module to modify.\r\n> \r\n> Can you elaborate?\r\n\r\nSure.  Because when I write a module for others to use I don't know if they will load it with USING or Import-Module, if I want classes to be available I now put them in their own file. In the PSD1 file I then have   \r\n\r\nScriptsToProcess    = @('Classes.ps1') \r\n\r\nhttps://github.com/jhoneill/OctopusTools  is an example, psm1 loads files from public (exported) and private (not exported). \r\nPSD1 loads the Psm1 file, the classes, the types and the formats. \r\n\r\n. \r\nIf it is your module you can move the classes out of the PSM1 file and change the PSD1 .But that's harder to do with someone else's code - their next update will reverse your change :-) \r\n\r\n\r\n\r\n<blockquote><img src=\"https://opengraph.githubassets.com/eaaa7d67a721a6f3d24ea7fce890b19fc6db8d141d32ff5e3bf2a13d504c0e53/jhoneill/OctopusTools\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/jhoneill/OctopusTools\">GitHub - jhoneill/OctopusTools: Work in progress: PowerShell bits for Octopus deploy</a></strong></div><div>Work in progress: PowerShell bits for Octopus deploy - GitHub - jhoneill/OctopusTools: Work in progress: PowerShell bits for Octopus deploy</div></blockquote>",
      "created_at": "2022-08-11T23:20:23Z",
      "updated_at": "2022-08-11T23:22:03Z"
    },
    {
      "author": "mmisztal1980",
      "author_association": "NONE",
      "body": "@jhoneill sound like a viable alternative. I'll try it out",
      "created_at": "2022-08-11T23:33:39Z",
      "updated_at": "2022-08-11T23:33:39Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@mmisztal1980  excellent.   I'd still like a definitive answer from the team whether this is by design, because **to me** it looks like a bug with a couple of decent work arounds, but there might be good reasons (that I don't know ) for it to be as it is. \r\n",
      "created_at": "2022-08-12T08:35:28Z",
      "updated_at": "2022-08-12T08:35:28Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Let me try to summarize:\r\n\r\n* Currently, `using module` only accepts static, _literal_ paths. \r\n  * If your module contains classes that you want to import, `using module` is your only (direct) option - `Import-Module` (which places no limits on how you can specify the module path) doesn't import classes.\r\n\r\n* `.` is special-cased in that it (sensibly) refers to the location of the _calling script_ rather than the current location.\r\n\r\n* Introducing the ability to express well-known paths _via abstractions_  in `using module` statements is desirable.\r\n\r\n  * However, given that `using module` is a _parse-time_ statement, support for arbitrary variable references and expressions (which wold require _runtime_ processing) is _not_ an option.\r\n\r\n  * What _would_ work, I think, is to allow references to _environment_ variables, such as `$env:HOME`; while `$env:HOME` could take the place of `~` on Unix, it wouldn't make for a cross-platform abstraction, so allowing `~` as a platform-neutral way to refer to the home directory is useful. \r\n\r\n   * As implied by @SeeminglyScience  above, if `~` support is added, it would probably have to be _static_ path of the user's home directory (that is, a customization of `~` via ` (Get-PSProvider FileSystem).Home = '...'` would _not_ be honored). Conceivably, the (always static) `$HOME` could be supported in lieu of `~`, though that could give rise to the misconception that _any_ variable can be used.\r\n\r\n  * On a more general note, this also takes us back to the discussion on whether there should be a platform-agnostic way to express well-known folder paths, such as via a special `$sf:` namespace:\r\n    * #6966\r\n\r\n\r\n",
      "created_at": "2022-08-29T15:54:03Z",
      "updated_at": "2022-08-29T15:54:03Z"
    }
  ],
  "created_at": "2022-08-11T14:23:06Z",
  "labels": [
    "WG-Engine",
    "Needs-Triage"
  ],
  "number": 17875,
  "state": "open",
  "title": "using module does not resolve \"~\" home folder correctly",
  "updated_at": "2022-08-29T15:54:03Z"
}