{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8026",
  "author": "cmichaelingram",
  "body": "Steps to reproduce\r\n------------------\r\n![image](https://user-images.githubusercontent.com/31104435/46920680-9e80b500-cfb7-11e8-92a2-cfa76be9f838.png)\r\n\r\n\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nWrite-EventLog  function (provided by the Microsoft.PowerShell.Management module version 3.1.0) should be available.  As a side note, should i do a get-module on Microsoft.PowerShell.Management version 3.1, and view the exported commands on the module, I can clearly see that Write-EventLog is available.  Once I import the 3.1 version Microsoft.PowerShell.Management module, the exported command is not listed as an exported command.\r\n\r\nThanks!\r\n\r\nActual behavior\r\n---------------\r\n\r\nWrite-EventLog is not available.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\nPS C:\\Users\\test> $psversiontable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n",
  "closed_at": "2019-06-01T00:00:55Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Seems you need to use https://github.com/PowerShell/WindowsCompatibility",
      "created_at": "2018-10-15T04:40:57Z",
      "updated_at": "2018-10-15T04:40:57Z"
    },
    {
      "author": "cmichaelingram",
      "author_association": "NONE",
      "body": "Thanks for the quick response iSazonov.  That's the way we were doing it - at least until PowerShell Core 6.1 was released.  With PS Core 6.1, they rolled the Windows Compatibility pack into the 6.1 release so you *shouldn't* have to add it in - at least that is my understanding and based on what I'm seeing in practice (https://docs.microsoft.com/en-us/powershell/scripting/whats-new/what-s-new-in-powershell-core-61?view=powershell-6).\r\n\r\nI've successfully imported other modules from the 5.1 release without having to import-Module WindowsCompatibility.  For example, the \"Import-Module netadapter\" command will import the netadapter module from 5.1 and I have available all the netadapter commands - i.e. Get-NetAdapter.  Why can I not do this with the older Microsoft.PowerShell.Management module?\r\n\r\n![image](https://user-images.githubusercontent.com/31104435/46949055-b3a42500-d045-11e8-951d-5ecb249a1d5f.png)\r\n\r\n![image](https://user-images.githubusercontent.com/31104435/46949072-bef75080-d045-11e8-82f6-8b428e229751.png)\r\n",
      "created_at": "2018-10-15T11:42:20Z",
      "updated_at": "2018-10-15T11:51:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Windows 10 1809 is released with some Windows PowerShell modules compatible with PowerShell Core 6.1. Such modules have a special flag. Rest of modules should be used by means of proxing.\r\nModules packaged with distributive like Microsoft.PowerShell.Management is core modules and can not be loaded in other PowerShell versions.",
      "created_at": "2018-10-16T03:27:35Z",
      "updated_at": "2018-10-16T03:27:35Z"
    },
    {
      "author": "cmichaelingram",
      "author_association": "NONE",
      "body": "Thank you iSazonov, if that is the case, the import-module command should throw an error/message to the user stating that the conflicting module can not be imported.  As of now, it imports the module without exposing the exported commands (with no message/indication that anything is wrong).",
      "created_at": "2018-10-16T13:01:00Z",
      "updated_at": "2018-10-16T13:01:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Please look the feedback.",
      "created_at": "2018-10-16T13:56:04Z",
      "updated_at": "2018-10-16T13:56:04Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I think there is a bug in that PSCore6 shouldn't look into the Windows PowerShell core modules as it gives confusing output where a command appears to be available, but won't actually work as module analysis finds the cmdlet in the Windows PowerShell module, but module loading looks in the PSCore6 version and doesn't find it.  cc @rjmholt \r\n\r\nHowever, the expected way to get this to work IS with the WindowsCompatibility module (which isn't shipped by default with PSCore6.1).  You need to do:\r\n\r\n> import-winmodule microsoft.powershell.management\r\n\r\nThen the `Write-EventLog` cmdlet will work.",
      "created_at": "2018-10-18T01:11:14Z",
      "updated_at": "2018-10-18T01:11:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I think there is a bug in that PSCore6 shouldn't look into the Windows PowerShell core modules\r\n\r\nRelated PR #7727. Perhaps we need more general fix.\r\n",
      "created_at": "2018-10-18T03:41:29Z",
      "updated_at": "2018-10-18T03:41:29Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@cmichaelingram can you execute the following on your machine and paste the results here:\r\n```powershell\r\nGet-Module Microsoft.PowerShell.Management | Format-List *\r\n```\r\n\r\nOn my machine I'm seeing a few strange things:\r\n- The Windows PowerShell `Microsoft.PowerShell.Management` module has been marked as `Core` compatible (the manifest of the module confirms this)\r\n- `gmo Microsoft.PowerShell.Management | fl *` reports the correct `Path` property (in the Windows PowerShell home dir), but `(gmo -FullyQualifiedName @{ ModuleName = Microsoft.PowerShell.Management; MaximumVersion = '4.0' })[0].ModuleBase` gives me the PSCore `$PSHOME`.\r\n\r\nI think we need to:\r\n- Look into why the Windows PowerShell module is marked as Core-compatible\r\n- Fix whatever the bug is with the `ModuleBase` property there (probably caused by the same thing as the erroneous load)\r\n- Fix autoloading so that if the command could resolve to one that works, it will pick the right one. This is already on my todo list, but it appears there's no explicit issue for it.",
      "created_at": "2018-10-18T16:29:02Z",
      "updated_at": "2018-10-18T17:14:05Z"
    },
    {
      "author": "cmichaelingram",
      "author_association": "NONE",
      "body": "@rjmholt Sure thing!\r\n\r\nI ran a \"Import-Module Microsoft.PowerShell.Management -maximumversion 4.0\" prior to running the Get-Module command you specified - that way you could view the get-module results for both versions of the Microsoft.PowerShell.Management module.\r\n\r\n```\r\nPS C:\\Users\\cingram> get-module Microsoft.PowerShell.Management | Format-List *\r\n\r\n\r\nLogPipelineExecutionDetails : False\r\nName                        : microsoft.powershell.management\r\nPath                        : C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules\\microsoft.powershell.management\\microsoft.powershell.managemen\r\n                              t.psd1\r\nImplementingAssembly        :\r\nDefinition                  :\r\nDescription                 :\r\nGuid                        : eefcb906-b326-4e99-9f54-8b4bb6ef3c6d\r\nHelpInfoUri                 : https://go.microsoft.com/fwlink/?linkid=390785\r\nModuleBase                  : C:\\Program Files\\PowerShell\\6\r\nPrivateData                 :\r\nExperimentalFeatures        : {}\r\nTags                        : {}\r\nProjectUri                  :\r\nIconUri                     :\r\nLicenseUri                  :\r\nReleaseNotes                :\r\nRepositorySourceLocation    :\r\nVersion                     : 3.1.0.0\r\nModuleType                  : Manifest\r\nAuthor                      : Microsoft Corporation\r\nAccessMode                  : ReadWrite\r\nClrVersion                  : 4.0\r\nCompanyName                 : Microsoft Corporation\r\nCopyright                   : \u00a9 Microsoft Corporation. All rights reserved.\r\nDotNetFrameworkVersion      :\r\nExportedFunctions           : {}\r\nPrefix                      :\r\nExportedCmdlets             : {[Add-Content, Add-Content], [Clear-Content, Clear-Content], [Clear-Item, Clear-Item], [Clear-ItemProperty,\r\n                              Clear-ItemProperty]...}\r\nExportedCommands            : {[Add-Content, Add-Content], [Clear-Content, Clear-Content], [Clear-Item, Clear-Item], [Clear-ItemProperty,\r\n                              Clear-ItemProperty]...}\r\nFileList                    : {}\r\nCompatiblePSEditions        : {Desktop, Core}\r\nModuleList                  : {}\r\nNestedModules               : {Microsoft.PowerShell.Commands.Management}\r\nPowerShellHostName          :\r\nPowerShellHostVersion       :\r\nPowerShellVersion           : 5.1\r\nProcessorArchitecture       : None\r\nScripts                     : {}\r\nRequiredAssemblies          : {}\r\nRequiredModules             : {}\r\nRootModule                  :\r\nExportedVariables           : {}\r\nExportedAliases             : {[gin, gin], [gtz, gtz], [stz, stz]}\r\nExportedWorkflows           : {}\r\nExportedDscResources        : {}\r\nSessionState                : System.Management.Automation.SessionState\r\nOnRemove                    :\r\nExportedFormatFiles         : {}\r\nExportedTypeFiles           : {}\r\n\r\nLogPipelineExecutionDetails : False\r\nName                        : Microsoft.PowerShell.Management\r\nPath                        : C:\\program files\\powershell\\6\\Modules\\Microsoft.PowerShell.Management\\Microsoft.PowerShell.Management.psd1\r\nImplementingAssembly        :\r\nDefinition                  :\r\nDescription                 :\r\nGuid                        : eefcb906-b326-4e99-9f54-8b4bb6ef3c6d\r\nHelpInfoUri                 : https://go.microsoft.com/fwlink/?linkid=855958\r\nModuleBase                  : C:\\Program Files\\PowerShell\\6\r\nPrivateData                 :\r\nExperimentalFeatures        : {}\r\nTags                        : {}\r\nProjectUri                  :\r\nIconUri                     :\r\nLicenseUri                  :\r\nReleaseNotes                :\r\nRepositorySourceLocation    :\r\nVersion                     : 6.1.0.0\r\nModuleType                  : Manifest\r\nAuthor                      : PowerShell\r\nAccessMode                  : ReadWrite\r\nClrVersion                  :\r\nCompanyName                 : Microsoft Corporation\r\nCopyright                   : Copyright (c) Microsoft Corporation. All rights reserved.\r\nDotNetFrameworkVersion      :\r\nExportedFunctions           : {}\r\nPrefix                      :\r\nExportedCmdlets             : {[Add-Content, Add-Content], [Clear-Content, Clear-Content], [Clear-Item, Clear-Item], [Clear-ItemProperty,\r\n                              Clear-ItemProperty]...}\r\nExportedCommands            : {[Add-Content, Add-Content], [Clear-Content, Clear-Content], [Clear-Item, Clear-Item], [Clear-ItemProperty,\r\n                              Clear-ItemProperty]...}\r\nFileList                    : {}\r\nCompatiblePSEditions        : {Core}\r\nModuleList                  : {}\r\nNestedModules               : {Microsoft.PowerShell.Commands.Management}\r\nPowerShellHostName          :\r\nPowerShellHostVersion       :\r\nPowerShellVersion           : 3.0\r\nProcessorArchitecture       : None\r\nScripts                     : {}\r\nRequiredAssemblies          : {}\r\nRequiredModules             : {}\r\nRootModule                  :\r\nExportedVariables           : {}\r\nExportedAliases             : {[gin, gin], [gtz, gtz], [stz, stz]}\r\nExportedWorkflows           : {}\r\nExportedDscResources        : {}\r\nSessionState                : System.Management.Automation.SessionState\r\nOnRemove                    :\r\nExportedFormatFiles         : {}\r\nExportedTypeFiles           : {}\r\n\r\n```",
      "created_at": "2018-10-18T17:07:20Z",
      "updated_at": "2018-10-18T17:13:08Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Yes, it appears that we should not have marked that module as `Core` in Windows PowerShell and rely on WindowsCompatibility module to use those cmdlets.  @rjmholt I'll leave it to you to make the fix in Windows.",
      "created_at": "2018-10-19T06:16:05Z",
      "updated_at": "2018-10-19T06:16:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I see no reason to load core modules from other PowerShell version at all. I think we should block this in PowerShell Core.",
      "created_at": "2018-10-19T10:06:01Z",
      "updated_at": "2018-10-19T10:06:01Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2019-06-01T00:00:31Z",
      "updated_at": "2019-06-01T00:00:31Z"
    }
  ],
  "created_at": "2018-10-14T18:45:21Z",
  "number": 8026,
  "state": "closed",
  "title": "Import Microsoft.PowerShell.Management version 3.1 does not allow use of Write-EventLog",
  "updated_at": "2019-06-01T03:04:08Z"
}