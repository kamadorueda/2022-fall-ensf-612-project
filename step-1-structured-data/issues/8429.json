{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8429",
  "author": "mklement0",
  "body": "# Summary of the new feature/enhancement\r\n\r\nPowerShell's elastic syntax (matching by unambiguous name prefix) is great for interactive use, but should be avoided in scripting.\r\n\r\nCalculated properties currently employ elastic syntax:\r\nSpecifying a calculated property with single-letter key names - e.g., `@{ n='prop'; e = { $_.val + 1 } }` - is convenient, but lacks longterm stability, because `n` and `e` only unambiguously resolve to `name` and `expression` as long as no other keys starting with `n` or `e` are supported.\r\n\r\nIf `n` and `e` were officially declared _aliases_ of `name` and `expression` an exact match for which would be considered unambiguous, the stability problem would go away.\r\nSimilarly, aliases should also be defined for all other currently supported keys: `formatstring` (`f`), `label` (`l`); `width` (`w`); `alignment` (`a`);  `ascending` (`asc`); `descending` (`desc`).\r\n\r\nWith these aliases locked in, adding keys in the future would not break existing code.\r\n\r\nThis would be akin to the concept of parameter aliases (e.g., `-ov` for `-OutVariable`, `-lp` for `-LiteralPath`, or `-c` for `-Command` in the CLI).\r\n\r\n# Proposed technical implementation details\r\n\r\nThe internal `HashtableEntryDefinition` used to represent entries in hashtables defining calculated properties already has a `SecondaryNames` property that effectively amounts to aliases (it's already used to make `name` and `label` synonymous).\r\n\r\nHowever, the `IsKeyMatch()` method must be amended to give precedence to (case-insensitive) _full_ key-name matches among `KeyName` and `SecondaryNames`.\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "I am not sure the phrase 'empty elastic syntax' is helpful. Not sure what elastic syntax means. How about the document gets to the meat: \"You can use PowerShell hash tables to create calculated properties for a range of cmdlets (including Select-Object, Format-Table, and Format-LIst).  For calculated properties used with Select-Object, the hash table can only have the following key names: Name and  Expression.  If you use a hash table with Format-List or Format-Table, the hash table can also have the Format, Width, Alignment, Ascending or Descending keys. All key names can be abbreviated to fewer characters (but as least 1 character or the fewest number to enable PowerShell to differentiate between the key names used in the hash table).  Using other hash table key names results in a DictionaryKeyIllegal exception.\r\n\r\nOr something like that.",
      "created_at": "2018-12-08T10:19:07Z",
      "updated_at": "2018-12-08T10:25:01Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@doctordns: I wasn't suggesting using that term in the help topics (see info below); if we did, it would need its own conceptual topic too (which is worth considering, separately).\r\n\r\nI like what you wrote, but - aside from also needing to describe the key sets for the other cmdlets that support calculated properties - I would add advice to only use the _full_ key names in _scripts_.  \r\n\r\nThe need for this advice will go away if and when this proposal gets implemented.\r\n\r\n---\r\n\r\nThe phrase is _elastic syntax_ (no _empty_); it is used in @BrucePay's book [_PowerShell in Action_](https://www.manning.com/books/windows-powershell-in-action-third-edition):\r\n> \"\r\nPowerShell supports an elastic syntax\u2014concise on the command line and complete in scripts. Aliases are used to facilitate elastic syntax.\r\n[...]\r\nThe idea is that PowerShell can be terse when needed and descriptive when appropriate. \r\n[...]\r\nThe syntax is concise for simple cases and can be stretched like an elastic band for larger problems. \r\nThis is important in a language that is both a command-line tool and a scripting language.\r\n",
      "created_at": "2018-12-08T13:34:22Z",
      "updated_at": "2018-12-08T13:34:38Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "O agree with that point! But I'd word it along the lines: Using Full key names in scripts is recommended. Leaving that recommendation unstated for command line purposes. I teach PowerShell and the alias key names, on first sight, is quite confusing.",
      "created_at": "2018-12-08T13:39:18Z",
      "updated_at": "2018-12-08T13:39:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 Are you ready to push a PR? Then we could ask PowerShell Committee. ",
      "created_at": "2018-12-08T13:43:16Z",
      "updated_at": "2018-12-08T13:43:16Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@doctordns: Sounds good to me, but why don't you repost your suggested wording over at https://github.com/PowerShell/PowerShell-Docs/issues/3383?\r\n\r\nAs an aside: Simpler syntax for calculated properties is being proposed -  see #8107",
      "created_at": "2018-12-08T14:13:12Z",
      "updated_at": "2018-12-08T14:13:12Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: Please see #8430, and note the open questions there.",
      "created_at": "2018-12-08T21:10:23Z",
      "updated_at": "2018-12-08T21:10:23Z"
    }
  ],
  "created_at": "2018-12-08T06:12:09Z",
  "number": 8429,
  "state": "open",
  "title": "Consider locking in key aliases for calculated properties",
  "updated_at": "2018-12-08T21:10:23Z"
}