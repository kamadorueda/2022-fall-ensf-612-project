{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5340",
  "author": "rkeithhill",
  "body": "I'm sorry but having to drop down to the .NET Framework to access the characters needed to separate paths and the appropriate slash to use to separate directories in a path needs to be built-in and more accessible to non-programmer scripters (admins). \r\n\r\nI mean sort of the whole point of PS Core is to be cross-platform.  Seems like we should grease the skips for this set of scenarios.\r\n\r\nSteps to reproduce\r\n------------------\r\nYou need to append a path to $env:PATH in a cross platform way.  As an admin scripter, how do you do that?\r\n\r\nExpected behavior\r\n-----------------\r\nAdmin scripter should be able to find a \"built-in\" variable in the about_automatic_variables and then use the variable like so:\r\n```powershell\r\n$env:Path += \"${PSPathSep}${myNewPath}\"\r\n# Or they want a simple string literal join of path segments\r\n$exePath = \"${InstallDir}${PSDirSep}foo.exe\"\r\n```\r\n\r\nActual behavior\r\n---------------\r\nAdmin scripter has to go look up some obtuse \"programmy\" syntax:\r\n```none\r\n$env:Path += \"$([IO.Path]::PathSeparator)${myNewPath}\"\r\n$exePath = \"${InstallDir}$([IO.Path]::DirectorySeparatorChar)foo.exe\"\r\n```\r\nWe can do better than this.\r\n\r\nEnvironment data\r\n----------------\r\nPS Core 6\r\n\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I'm not excited about adding another `$PS` variable because the prefix is ugly, but an obvious variable is likely to collide with a user variable.\r\n\r\n`Join-Path` is what non-developers use for directories - it could take a parameter like uh, well, not `-Path`, but uh, hmm :)  PathSeparator is poorly named I guess.",
      "created_at": "2017-11-04T20:56:34Z",
      "updated_at": "2017-11-04T20:56:34Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Yeah, in retrospect maybe if would have been nicer if this was a bit more \"encapsulated\" e.g. `$PS:PathSep` and `$PS:DirSep`.  So rather than a litter of global variables, there is a single PS variable drive.  For comparison, Python uses `os.pathsep` and `os.sep` for these.",
      "created_at": "2017-11-04T21:02:08Z",
      "updated_at": "2017-11-04T21:17:13Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@rkeithhill: \r\n\r\n> it  would have been nicer if this was a bit more \"encapsulated\" e.g. $PS:PathSep and $PS:DirSep\r\n\r\nIndeed; d\u00e9j\u00e0 vu: https://github.com/PowerShell/PowerShell/issues/4394#issuecomment-321955860\r\n\r\n@lzybkr: `Join-Path` doesn't really need a new parameter, because it already uses the platform-appropriate separator - and extending its purpose to also append to `$env:PATH` seems like a poor fit.\r\n\r\n---\r\n\r\nFor the compose-a-single-filesystem-path scenario, `Join-Path` is therefore sufficient (especially now that it accepts a variable number of components):\r\n\r\n```powershell\r\n$exePath = Join-Path $InstallDir foo.exe\r\n```\r\n\r\nThat said, having something like `$ps:DirSep` too can't hurt.\r\n(Arguably, it should be `$ps:PathSeparator` - you're not just separating _directories_ but _path components_, which can be directories or _files_; it's hard to say whether following .NET's misguided nomenclature is more important than getting it right.)\r\n\r\n---\r\n\r\nAs for the adding-an-entry-to-$env:PATH scenario:\r\n\r\nIndeed, `[IO.Path]::PathSeparator` is poorly named.\r\n\r\nIt's been suggested before (I forget where) that PowerShell provide an _array_-based way of accessing and modifying `$env:PATH`, which would hide the platform-specific _PATH-environment-variable-entry-separator_ (`;` on Windows, `:` on Unix).\r\n\r\n```powershell\r\n# Wishful thinking: treat $env:PATH as an array\r\n$ps:Path += $myNewPath\r\n```\r\n\r\nAgain, also having something like `$ps:PathVarSep` can't hurt.",
      "created_at": "2017-11-05T01:39:14Z",
      "updated_at": "2017-11-05T01:39:14Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I like the idea of supporting `+=` on \"Path\" like variables - that's worth some more thinking.\r\n\r\nToday, an environment variable is a string, but if we could have strongly typed environment variables, we could implement operators like `+` and `[]`.",
      "created_at": "2017-11-05T04:05:49Z",
      "updated_at": "2017-11-05T04:05:49Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "I would discourage using path separator variables because it creates a bad coupling when concatenating paths since one has to know if the path already ends with a path separator or not to avoid having 2 path separators or none. `Join-Path` or `[System.IO.Path]::Combine` takes care of all that. And even if you used the 'wrong' slashes, all .NET core methods are agnostic of it. Should you have some other API that is picky, then just pass your path string to `Get-Item` and PowerShell will correct your slashes.",
      "created_at": "2017-11-05T20:54:01Z",
      "updated_at": "2017-11-05T20:54:01Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "You're referring to the directory separator and yeah Join-Path is a reasonable alternative.  Path separator `;` or `:` is not handled by Join-Path or the other .NET methods you mention - not that an admin should have to resort to using .NET methods for such a simple, common scenario.",
      "created_at": "2017-11-05T20:56:41Z",
      "updated_at": "2017-11-05T20:58:04Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "OK, I see what you mean now in the case of path separators. Sorry about my loose use of vocabulary.",
      "created_at": "2017-11-05T21:04:52Z",
      "updated_at": "2017-11-05T21:04:52Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "No problem.  As some folks have pointed out already, the naming leaves something to be desired.",
      "created_at": "2017-11-05T21:09:25Z",
      "updated_at": "2017-11-05T21:09:25Z"
    },
    {
      "author": "brettcannon",
      "author_association": "NONE",
      "body": "I bumped into this under PowerShell Core for prepending to `$env:PATH`. I ended up using `($binPath, $env:PATH) -join [IO.Path]::PathSeparator` but I only knew that thanks to a friend who knows PowerShell and C#. \ud83d\ude04 ",
      "created_at": "2018-09-14T19:27:42Z",
      "updated_at": "2018-09-14T19:27:42Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Wouldn't it be better to have a function?\r\n\r\nI mean, obviously you don't want to append your path to the string if it's already there (right?), so a function that can join path variables automatically using the right character for the _and_ preventing duplicates with knowledge of the OS case-sensitivity would be really helpful...",
      "created_at": "2018-10-06T20:23:52Z",
      "updated_at": "2018-10-06T20:23:52Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "How about a `-Separator` parameter to `Join-Path` that defaults to `Directory`, but an enum that also has `Path` that maps to `[IO.Path]::PathSeparator`?\r\n\r\n```powershell\r\n$env:PATH = Join-Path $env:PATH $binPath -Separator Path\r\n```\r\n",
      "created_at": "2018-10-06T23:54:55Z",
      "updated_at": "2018-10-06T23:54:55Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I like the idea. I *don't* particularly like the chosen names there... there's not enough semantic distance between the two, I think.\r\n\r\nBesides, this would still require manual handling of duplicate entries in the path -- I think @Jaykul's proposal for a cmdlet/function that handles this stuff consistently in a neat package would be ideal, and would help integrate PowerShell into the different operating systems more smoothly. \ud83d\ude04 ",
      "created_at": "2018-10-07T00:26:59Z",
      "updated_at": "2018-10-07T00:26:59Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I don't think this functionality should be tacked onto `Join-Path`, which is about _composing a (set of) path(s)_ - something quite distinct from _managing the entries of an environment variable containing a list of paths_.\r\n\r\nAs @Jaykul  and @vexx32 suggest, having a dedicated cmdlet to manage such variables makes sense, and if that cmdlet covers all desired modification scenarios to such a variable, the need to expose the platform-specific separator directly goes away.\r\n\r\n_Update_: See https://github.com/PowerShell/PowerShell-RFC/pull/92 for a preexisting discussion on this.\r\n\r\nThat is, the following 3 operations are needed when it comes to environment variables such as `$env:PATH`- but note that the same logic is applicable to similar env. variables such as `$env:CLASSPATH`:\r\n\r\n* Append a new directory path.\r\n\r\n* Prepend a new directory path. \r\n\r\n* Remove  a directory path.\r\n\r\nAs suggested, in the case of appending or prepending, it makes sense to avoid duplicate entries and by default do nothing, if the target directory is already present.\r\nThis can be supplemented with `-Force` to ensure moving an existing entry to the beginning or end.\r\n\r\nHere's what the syntax diagram for such a cmdlet could look like (name negotiable):\r\n\r\n```powershell\r\nUpdate-PathEnvironmentVariable `\r\n  [[-Name]=<string>='PATH'] [-Remove <string[]>] [-Prepend <string[]>] [-Append <string[]>] `\r\n  [-Target = 'Process'|'User'|'Machine'] `\r\n  [-Force]\r\n```\r\n\r\nThe default `-Target` would be `Process`, i.e., updating the variable for the current process only.\r\n\r\nTargeting `User` or `Machine` to effect _persistent_ env.-var. changes would work on _Windows only_, because the underlying .NET method that would be used - [`Environment.SetEnvironmentVariable`](https://docs.microsoft.com/en-us/dotnet/api/system.environment.setenvironmentvariable?view=netcore-2.1#System_Environment_SetEnvironmentVariable_System_String_System_String_System_EnvironmentVariableTarget) - doesn't support this on macOS and Linux.\r\nIn fact, it _quietly ignores_  these values- see https://github.com/dotnet/corefx/issues/32685\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-10-08T02:07:54Z",
      "updated_at": "2018-10-09T01:41:53Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "> having a dedicated cmdlet to manage such variables makes sense\r\n\r\nUm, like this?  https://github.com/PowerShell/PowerShell-RFC/pull/92",
      "created_at": "2018-10-08T06:00:59Z",
      "updated_at": "2018-10-08T06:00:59Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @rkeithhill - I'd lost track of that RFC early on; good to see all the discussion there.\r\n\r\nJust briefly (I'll take the discussion over to the RFC):\r\n\r\n* ~I now think that a single, generic list-string manipulation is called for that doesn't itself set environment variables, but allows manipulation of their _values_, if they're list-based, with an `-AsDirList` switch to use the platform-abstracted `[IO.Path]::PathSeparator` - see #7975~\r\n\r\n* Conversely, that would mean keeping any list-parsing functionality out of any `*-Environment` cmdlets and, more fundamentally, I think there shouldn't even be new `*-Environment` cmdlets - instead, the existing environment-variable drive provider should be enhanced to support persistence.\r\n\r\nEven though with the above the need to surface `[IO.Path]::PathSeparator` explicitly in a PowerShell-friendly manner is diminished, I do still see value in _also_ doing that, and, as stated before, I'm with you on surfacing such variables via a new namespace / drive, as discussed in https://github.com/PowerShell/PowerShell/issues/4394#issuecomment-321955860 - TBD whether with a catch-all drive such as `$ps:...` or - perhaps taking a page out of Python's book - grouped thematically so that `$os:...` could contain `$os.PathVariableSeparator` (`[IO.Path]::PathSeparator`) as well as `$os.DirectorySeparator` (`[IO.Path]::DirectorySeparatorChar`), and possibly more (names negotiable, but I don't think CoreFx's confusing nomenclature is worth keeping in this instance).\r\n\r\n\r\n",
      "created_at": "2018-10-08T20:25:42Z",
      "updated_at": "2018-10-09T01:38:42Z"
    }
  ],
  "created_at": "2017-11-04T19:49:56Z",
  "labels": [
    "Issue-Discussion"
  ],
  "number": 5340,
  "state": "open",
  "title": "PowerShell needs shortcut vars for [IO.Path]::PathSeparator and [IO.Path]::DirectorySeparatorChar",
  "updated_at": "2018-10-09T01:41:53Z"
}