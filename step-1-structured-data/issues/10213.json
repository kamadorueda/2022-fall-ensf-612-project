{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10213",
  "author": "Jaykul",
  "body": "# Steps to reproduce\r\n\r\nIf you use `Get-Command -ErrorAction Ignore` to test for the existence of a command, you get \"Suggestion\" output which is _confusing_ to the end user and seems to indicate an error, when in fact there is no problem.\r\n\r\nFor example, in one script I do this:\r\n```powershell\r\n$Version = if (Get-Command gitversion -ErrorAction SilentlyContinue) { \r\n    gitversion -showvariable semver\r\n} else { \r\n   \"1.0.0-rc\"\r\n}\r\n```\r\n\r\n# Expected behavior\r\n\r\nWhen `Get-Command` is called and the error is explicitly suppressed, there should be no suggestions printed to the console.\r\n\r\nFrankly, it might be better if `Get-Command` doesn't print suggestions at all, or perhaps only when it's being called interactively from the prompt (and the error isn't explicitly suppressed).\r\n\r\n```none\r\n\r\n```\r\n\r\n# Actual behavior\r\n\r\nI get a completely off-the-wall suggestion from the PSDeploy module:\r\n\r\n```none\r\nSuggestion [4,General]: The most similar commands are: WithOptions\r\n```\r\n\r\nFrankly, that command is not at all similar, in my human brain, and it really should not be mentioned at all. I can't understand how that's past the similarity threshold.\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.1\r\nPSEdition                      Core\r\nGitCommitId                    6.2.1\r\nOS                             Microsoft Windows 10.0.18362\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "The suggestions need some tuning. Right now (without looking at the code) it seems to be based on levenshtein edit distance, but the _threshold isn't being tuned based on how short the command_ is, so if you miss-type a _short_ command, you get a **lot** of suggestions, most of which have no similarity except length.\r\n\r\n```posh\r\n> Get-Command abc -ea 0\r\nSuggestion [4,General]: The most similar commands are: ac, clc, dbp, ebp, gbp, gc, rbp, sbp, fc, c.\r\n```\r\n\r\n```posh\r\n> Get-Command zzz -ea 0\r\nSuggestion [4,General]: The most similar commands are: gtz, stz, z, %, ?, cp.\r\n```",
      "created_at": "2019-07-23T15:59:12Z",
      "updated_at": "2019-07-23T15:59:41Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "Yes, I agree that this definitely needs tweaking.\r\nBut I've always also found it annoying that `Get-Command` returns an error if nothing was found (yes, I had to write similar code to yours before as well....). It would be a breaking change but in an ideal world the command should just return nothing and the caller can then write conditional logic.\r\nWhat annoys me about Get-Command as well is that it loads the module into memory by doing a full Import-Module (which makes this check very expensive). For a binary module this means I am stuck with that loaded version since PS cannot unload it (maybe that is possible with recent additions in .Net Core?).\r\n\r\nIn order to avoid breaking changes, what about a more lightweight and user friendly Test-Command cmdlet?",
      "created_at": "2019-07-25T07:33:32Z",
      "updated_at": "2019-07-25T18:22:28Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@Jaykul - Your description mentions using `-ErrorAction Ignore`, but your sample uses `-ErrorAction SilentlyContinue`. That might explain what's going on.\r\n\r\n@bergmeister - You can use a wildcard to both avoid an error and avoid loading the module. It does mean you have to check the result(s) to make sure you didn't pick up unexpected results though.",
      "created_at": "2019-07-25T17:39:39Z",
      "updated_at": "2019-07-25T17:39:39Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr: Your assumption is accurate. `-ErrorAction SilentlyContinue` does not prevent suggestions from happening. That's a problem though because a lot of folks use `SilentlyContinue` instead of `Ignore`, and those folks should not be expected to update their code here. The suggestion feature should not process errors that were silenced, whether that was using `ActionPreference.Ignore` or `ActionPreference.SilentlyContinue`. This will likely require capturing that information so that it can be used internally during processing.",
      "created_at": "2019-08-27T14:50:37Z",
      "updated_at": "2019-08-27T14:50:37Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah we need to redo how suggestions are implemented as a whole, really. Currently suggestions are entirely dependent on and coded within PowerShell's host implementation. Which means they don't carry over to anyone using a non-default host.\r\n\r\nI have a PR #9115  WIP that addresses this, pulls it all out and puts suggestions into a property of the ErrorRecord class with a new data type, which can then be displayed by formatters instead and is accessible to module authors. Got stuck on a few bits and pieces and CI errors that I couldn't make sense of. I'll revisit once I'm done working on Test-Connection and see if I can get it properly up to scratch. \ud83d\ude42 \r\n\r\nOr, if one of you folks wants to take a stab at it, you're more than welcome to check it out, add comments, and/or just grab what you need (if anything) and take over as I may or may not have enough spare time to get it done by PS7 (and I'd _really_ like this to be squared away by PS7, but then there are a lot of things I'd like to get done for PS7 hah!)",
      "created_at": "2019-08-27T15:13:07Z",
      "updated_at": "2019-08-27T15:14:52Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "That could be a different issue, but sometimes (don't know exactly under what conditions) when my `profile.ps1` runs, and executes code such as\r\n\r\n````\r\nif (running_at_home)\r\n{\r\n...\r\n}\r\n````\r\n\r\nwhere `running_at_home` resolves to `s:\\bin\\home\\running_at_home.ps1`\r\n\r\nI get:\r\n\r\n````\r\nSuggestion [4,General]: The most similar commands are: running_at_home.ps1\r\n````\r\n",
      "created_at": "2019-09-29T09:41:44Z",
      "updated_at": "2019-09-29T09:41:44Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "FWIW: the issue is still there with 7.1 preview 3 (which is probably expected since it's still open \ud83d\ude09)",
      "created_at": "2020-06-07T15:48:37Z",
      "updated_at": "2020-06-07T15:48:37Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah. The reality is that the suggestions system needs to be made more robust and only be used when an error record is actually being displayed.\r\n\r\nI have some past work sorting the majority of that out if anyone would like to pick it up. It needs (at minimum) the entirety of the ErrorRecord format code rewritten, since @SteveL-MSFT made significant changes to it as well in order to implement ConciseView, and my original code was also a complete rewrite of the formatter code as well.\r\n\r\nSteve has expressed interest in completing that work, but if anyone else is interested as well, the PR I linked above has the majority of the code sorted out; you'll just need to rewrite my additions errorrecord formatting code (probably from scratch), and I think there were also a couple minor changes needed to the rest of the code to get everything sorted out neatly.",
      "created_at": "2020-06-07T18:09:04Z",
      "updated_at": "2020-06-07T18:09:12Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks @vexx32 for the clarification. Can you point me at the location in the code where all this is handled? I might want to take a look...",
      "created_at": "2020-06-07T19:15:33Z",
      "updated_at": "2020-06-07T19:15:33Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "See my changes for #9115.\n\nBasically the approach I think will be most useful is:\n\n- Completely remove existing suggestion API. It's inaccessible and host-specific so folks using custom hosts cannot get any benefit from it.\n- Add a property to Error record to hold suggestion(s).\n- Modify ErrorRecord formatter to show suggestions (in a different color to the usual error color display).\n\nI think the only complication I ran into was that CommandNotFoundException is a bit weird under the hood and if you're not careful you can potentially end up causing an infinite loop, though I think the code I have in my PR does successfully avoid it.\n\n",
      "created_at": "2020-06-07T19:49:52Z",
      "updated_at": "2020-06-07T19:49:52Z"
    }
  ],
  "created_at": "2019-07-23T15:37:44Z",
  "number": 10213,
  "state": "open",
  "title": "PSCommandNotFoundSuggestion is suggesting commands when it should not",
  "updated_at": "2020-12-07T19:08:14Z"
}