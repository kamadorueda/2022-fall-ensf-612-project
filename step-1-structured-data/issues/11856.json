{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11856",
  "author": "mklement0",
  "body": "In Windows PowerShell, `using assembly System.Windows.Forms` is the parse-time equivalent of `Add-Type -AssemblyName System.Windows.Forms`; that is, `System.Windows.Forms.dll` is being looked for in the GAC.\r\n\r\nWhile `Add-Type -AssemblyName System.Windows.Forms` in PowerShell Core works analogously by looking for the DLL among the ones that ship with PowerShell, `using assembly System.Windows.Forms` _doesn't_ work:\r\n\r\n* Not specifying the `.dll` extension is not supported at all.\r\n  * In WinPS the absence of `.dll` seemingly served as the signal to look in the GAC.\r\n* With `.dll`, but without a full path, the assembly is looked for in / relative to the script's location.\r\n\r\nIs this a regression bug or were there design changes?\r\n\r\nNote: Even a functioning `using assembly` statement is not enough if a script tries to _subclass_ types from that assembly (tries to use such types as the base class of a PS custom class definition). However, this is a separate issue - see https://github.com/PowerShell/PowerShell/issues/3641#issuecomment-297151112.\r\n\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n# WINDOWS ONLY\r\n\r\n# Note: This works in WinPS\r\n{ iex 'using assembly System.Windows.Forms' } | Should -Not -Throw\r\n```\r\n\r\n# Expected behavior\r\n\r\nThe test should pass.\r\n\r\n# Actual behavior\r\n\r\nThe test fails:\r\n\r\n```none\r\nCannot load assembly 'System.Windows.Forms'\r\n```\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core 7.0.0-rc.2\r\n```\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2020-02-14T21:54:11Z",
  "number": 11856,
  "state": "open",
  "title": "`using assembly` statement cannot be used to load well-known assemblies",
  "updated_at": "2020-10-07T03:30:50Z"
}