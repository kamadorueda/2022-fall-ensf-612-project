{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6519",
  "author": "kalgiz",
  "body": "## PR Summary\r\nCreate the default PSSession configuration, not tied to a specific PowerShell version.\r\n\r\nWhen Enable-PSRemoting command is run, it creates 2 sessions configurations:\r\n- first the same as it was before with the name containing the current version expressed as: 'PowerShell.$PSVersionTable.GitCommitId'\r\n- second with the default name 'PowerShell.6' so that administrators wouldn't have to guess which specific version is installed on the target.\r\n\r\nPR addresses the issue: #6470 \r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [x] Issue filed - Issue link: https://github.com/PowerShell/PowerShell-Docs/pull/2252\r\n- **Testing - New and feature**\r\n    - [ ] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [x] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2018-04-10T19:21:45Z",
  "comments": [
    {
      "author": "dantraMSFT",
      "author_association": "CONTRIBUTOR",
      "body": "Does the new configuration need to be documented?",
      "created_at": "2018-03-27T23:36:56Z",
      "updated_at": "2018-03-27T23:36:56Z"
    },
    {
      "author": "kalgiz",
      "author_association": "CONTRIBUTOR",
      "body": "@dantraMSFT I think it should be. Shall I file an issue for documenting the changes?",
      "created_at": "2018-03-28T00:10:22Z",
      "updated_at": "2018-03-28T00:10:22Z"
    },
    {
      "author": "dantraMSFT",
      "author_association": "CONTRIBUTOR",
      "body": "@kalgiz Yes, in the PowerShell/PowerShell-Docs repro.  I typically submit a PR for the doc changes when I submit the PR for the code changes. \r\n\r\nI would think the doc change would be in  reference\\6\\Microsoft.PowerShell.Core\\about, possibly in about_Session_Configurations.md.\r\n\r\nLet me know if you need any assistance.",
      "created_at": "2018-03-28T17:10:04Z",
      "updated_at": "2018-03-28T17:10:04Z"
    },
    {
      "author": "kalgiz",
      "author_association": "CONTRIBUTOR",
      "body": "@dantraMSFT I created a pull request for documentation: https://github.com/PowerShell/PowerShell-Docs/pull/2252",
      "created_at": "2018-03-28T21:41:57Z",
      "updated_at": "2018-03-28T21:41:57Z"
    },
    {
      "author": "kalgiz",
      "author_association": "CONTRIBUTOR",
      "body": "I see that here: https://github.com/kalgiz/PowerShell/blob/67a87729f4e16b223a5f92e9ac2e6bb2a2f5152b/src/System.Management.Automation/engine/remoting/commands/CustomShellCommands.cs#L5000\r\n\r\nWe were changing the pssessions permission for all existing configurations... I am wondering what is the goal of it and if we still want to do so, if we don't want to overwrite the session configurations?",
      "created_at": "2018-03-29T17:45:29Z",
      "updated_at": "2018-03-29T17:45:29Z"
    },
    {
      "author": "kalgiz",
      "author_association": "CONTRIBUTOR",
      "body": "Also what for me is not so easy to understand in the current code is this condition: \r\n[https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/remoting/commands/CustomShellCommands.cs#L4861]\r\n`$pscmdlet.ShouldProcess($qMessage, $captionForRegisterDefault)`\r\nWhat does it mean?",
      "created_at": "2018-03-29T17:50:58Z",
      "updated_at": "2018-03-29T17:50:58Z"
    },
    {
      "author": "kalgiz",
      "author_association": "CONTRIBUTOR",
      "body": "Also the current code of Install-PowerShellRemoting does not check if the given sessions configuration was already registers and just overwrites it. Do we want to change it?",
      "created_at": "2018-03-29T18:10:25Z",
      "updated_at": "2018-03-29T18:10:25Z"
    },
    {
      "author": "mirichmo",
      "author_association": "MEMBER",
      "body": "Regarding Enable-PSRemoting and Install-PowerShellRemoting, one thing to keep in mind (a reason for the overwrite behavior) is that they can be used to repair damaged endpoints if the permissions or configurations become invalid. Enable-PSRemoting will either turn on and configure remoting or it will reset remoting back to its original state.\r\n\r\nYou could tweak the behavior of Install-PowerShellRemoting to support -Force if an endpoint already exists. It would technically be a breaking change, but that could be valuable as it would protect against accidental overwrite.\r\n\r\nSide Note:\r\nI originally wrote Install-PowerShellRemoting.ps1 because I/we had not yet ported Enable-PSRemoting & friends. The only reason we kept it around afterward was the \"Nano Server Scenario.\" We needed a way to register an endpoint for a different instance of PowerShell (not the version that was running). There is a separate issue ( #4528 ) to formalize that scenario into a real cmdlet, but it hasn't been implemented yet.",
      "created_at": "2018-03-29T23:07:22Z",
      "updated_at": "2018-03-29T23:07:22Z"
    },
    {
      "author": "kalgiz",
      "author_association": "CONTRIBUTOR",
      "body": "Maybe it would be better if we reset the sessions configurations to the original state (providing they exist) only if parameter -Force is on? Right now we are overwriting some permission settings...",
      "created_at": "2018-03-30T18:28:22Z",
      "updated_at": "2018-03-30T18:28:22Z"
    },
    {
      "author": "dantraMSFT",
      "author_association": "CONTRIBUTOR",
      "body": "I have a couple of high-level questions:\r\n\r\n1: Shouldn't the scripts be calling Set-StrictMode Latest?\r\n2: Shouldn't ErrorActionPreference be set to Stop?\r\nThere are a number of places where errors can occur (copy-item for example) and ErrorAction is not used.\r\n3: I assume that an elevated process is needed, correct? Should the script(s) explicitly test for it instead relying on an access denied somewhere in the script?\r\n4: Have you considered running the script analyzer against the scripts?",
      "created_at": "2018-03-30T20:28:58Z",
      "updated_at": "2018-03-30T20:28:58Z"
    },
    {
      "author": "kalgiz",
      "author_association": "CONTRIBUTOR",
      "body": "@dantraMSFT \r\n\r\n1. I added call to Set-StrictMode Latest in both scripts: Install-PowerShellRemoting.ps1 and also CustomShellCommands where Enable-PSRemoting is defined as PowerShell script.\r\n2. In both scripts (the same as above) I added \"-ErrorAction Stop\" for command for which it seemed reasonable. \r\n3. It seems currently there is a check in Install-PowerShellRemoting.ps1 script for Administrator rights:\r\n`if (! ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] \"Administrator\"))\r\n{\r\n    Write-Error \"WinRM registration requires Administrator rights. To run this cmdlet, start PowerShell with the `\"Run as administrator`\" option.\"\r\n    return\r\n}`\r\n4. I added the ScriptAnalyzer against the scripts and addressed the issues that it indicated. I left Write-Host in Install-PowerShellRemoting.ps1 though and I am wondering if we should get rid of it as it informs user about steps performed.",
      "created_at": "2018-04-04T23:25:03Z",
      "updated_at": "2018-04-04T23:25:52Z"
    }
  ],
  "created_at": "2018-03-27T23:10:18Z",
  "number": 6519,
  "state": "closed",
  "title": "Create the default PSSession configuration, not tied to a specific PowerShell version.",
  "updated_at": "2018-04-10T19:21:45Z"
}