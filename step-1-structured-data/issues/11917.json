{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11917",
  "author": "alx9r",
  "body": "Beginning sometime after PowerShell 5.1 a class implementing `IConvertible` throws an exception when casting to a string.  \r\n\r\nNote that in the repro below simply removing `: IConvertible` is sufficient to restore the ability to cast to string.\r\n\r\n# Steps to reproduce\r\n\r\n```C#\r\n//type.cs\r\nusing System;\r\npublic class C : IConvertible\r\n{\r\n    public readonly string Value = null;\r\n    public C(string v) { Value = v; }\r\n    override public String ToString() {return Value; }\r\n\r\n    public TypeCode GetTypeCode() { return Value.GetTypeCode(); }\r\n    public object   ToType(Type conversionType, IFormatProvider provider) { return ((IConvertible)Value).ToType(conversionType, provider); }\r\n    public bool     ToBoolean(IFormatProvider provider)  { return ((IConvertible)Value).ToBoolean(provider); }\r\n    public byte     ToByte(IFormatProvider provider)     { return ((IConvertible)Value).ToByte(provider); }\r\n    public char     ToChar(IFormatProvider provider)     { return ((IConvertible)Value).ToChar(provider); }\r\n    public DateTime ToDateTime(IFormatProvider provider) { return ((IConvertible)Value).ToDateTime(provider); }\r\n    public decimal  ToDecimal(IFormatProvider provider)  { return ((IConvertible)Value).ToDecimal(provider); }\r\n    public double   ToDouble(IFormatProvider provider)   { return ((IConvertible)Value).ToDouble(provider); }\r\n    public short    ToInt16(IFormatProvider provider)    { return ((IConvertible)Value).ToInt16(provider); }\r\n    public int      ToInt32(IFormatProvider provider)    { return ((IConvertible)Value).ToInt32(provider); }\r\n    public long     ToInt64(IFormatProvider provider)    { return ((IConvertible)Value).ToInt64(provider); }\r\n    public sbyte    ToSByte(IFormatProvider provider)    { return ((IConvertible)Value).ToSByte(provider); }\r\n    public float    ToSingle(IFormatProvider provider)   { return ((IConvertible)Value).ToSingle(provider); }\r\n    public string   ToString(IFormatProvider provider)   { return Value.ToString(provider); }\r\n    public ushort   ToUInt16(IFormatProvider provider)   { return ((IConvertible)Value).ToUInt16(provider); }\r\n    public uint     ToUInt32(IFormatProvider provider)   { return ((IConvertible)Value).ToUInt32(provider); }\r\n    public ulong    ToUInt64(IFormatProvider provider)   {return ((IConvertible)Value).ToUInt64(provider); }\r\n}\r\n\r\n```\r\n\r\n```powershell\r\nAdd-Type -Path \"$PSScriptRoot\\type.cs\"\r\n\r\n$c = [C]::new('value')\r\n$c.ToString()\r\n[string]$c\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nvalue\r\nvalue\r\n```\r\n\r\n# Actual behavior\r\n\r\n## PowerShell 7\r\n```none\r\nvalue\r\nOperationStopped: C:\\test.ps1:5\r\nLine |\r\n   5 |  [string]$c\r\n     |  ~~~~~~~~~~\r\n     | Unable to cast object of type 'C' to type 'System.String'.\r\n```\r\n\r\n### PowerShell 5.1\r\n\r\n```none\r\nvalue\r\nvalue\r\n```\r\n\r\n# Environment data\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-rc.2\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-rc.2\r\nOS                             Microsoft Windows 6.3.9600\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0.}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think it is .Net Core issue.\r\nIf you can create C# repo please report to .Net Core repo. Otherwise we should investigate in depth before report there. ",
      "created_at": "2020-02-21T19:02:16Z",
      "updated_at": "2020-02-21T19:02:16Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "@iSazonov I thought that might be the case too.  But casting to string in C# like the following doesn't seem to be permitted by either compiler I've tried with [Core 3.1](https://dotnetfiddle.net/feYYsF) or [Framework 4.7.2](https://dotnetfiddle.net/JVskOt) (those links are dotnetfiddle repros):\r\n\r\n```C#\r\npublic class C : IConvertible {...}\r\n\r\npublic class Program\r\n{\r\n\tpublic static void Main()\r\n\t{\r\n\t\tC c = new C(\"value\");\r\n\t\tString s = (String)c; // Compilation error: Cannot convert type 'C' to 'string'\r\n\t}\r\n}\r\n```\r\n\r\nI think that error makes sense in C# since there is no conversion operator defined for C on String.  \r\n\r\nHaving the corresponding restriction in PowerShell, however, seems odd since `[string]$anyObject` seems to succeed for any type other than those for which `IConvertible` is implemented.\r\n\r\n",
      "created_at": "2020-02-21T21:27:42Z",
      "updated_at": "2020-02-21T21:27:42Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I'm... pretty sure this is a PowerShell thing. `IConvertible` has specific conversion methods associated with it, and those methods all assume the input is numeric as far as I recall.. so I think this object is making it to those methods and then failing, or we're missing a specific IConvertible conversion path that doesn't assume the input is a number.\r\n\r\nIf you look through the LanguagePrimitives.cs file for references to `ConvertIConvertible` you should come up with a few good places to start.",
      "created_at": "2020-02-21T21:29:56Z",
      "updated_at": "2020-02-21T21:30:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It works in PowerShell-7.0.0-preview.1 but not later.\r\nI found https://github.com/PowerShell/PowerShell/pull/9893 for the time but I am not sure that this is the cause of the error.\r\n/cc @daxian-dbw ",
      "created_at": "2020-02-22T18:56:43Z",
      "updated_at": "2020-02-22T19:03:15Z"
    },
    {
      "author": "lyuboasenov",
      "author_association": "NONE",
      "body": "Probably this is the issue:\r\n[#9893](https://github.com/PowerShell/PowerShell/commit/c684902fba5b5e63fa750e66270a25b6889b4ec6#diff-73f7c4e22a27a9ce6b552cf10431d1bb)\r\nBefore\r\n`                Type objType = obj.GetType();`\r\n`                TypeCode code = objType.GetTypeCode();`\r\n`                switch (code)...`\r\nAfter\r\n`                switch (Convert.GetTypeCode(obj))...`\r\n\r\nAs you can see the prior behaviour got the TypeCode using [System.Convert](https://github.com/dotnet/runtime/blob/25ea6c44cf3140cc9bfbaaff7f01ad2a27414f8e/src/libraries/System.Private.CoreLib/src/System/Convert.cs#L154)::GetTypeCode while the former is using [System.Type](https://github.com/dotnet/runtime/blob/25ea6c44cf3140cc9bfbaaff7f01ad2a27414f8e/src/libraries/System.Private.CoreLib/src/System/Type.cs#L282)::GetTypeCode and both methods do work differently - System.Convert takes into account if the object implements IConvertable while the System.Type does not.\r\n\r\nHope that helps.\r\n",
      "created_at": "2020-03-23T18:49:31Z",
      "updated_at": "2020-03-23T18:49:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think if a developer defines IConvertible and IFormattable for an class we should follow the design.\r\nThis assumes that we should take into account  IConvertible and IFormattable in TryFastTrackPrimitiveTypes() method.\r\n\r\n@daxian-dbw Thoughts? ",
      "created_at": "2020-03-24T06:31:49Z",
      "updated_at": "2020-03-24T06:31:49Z"
    }
  ],
  "created_at": "2020-02-21T16:06:09Z",
  "labels": [
    "Issue-Bug",
    "WG-Engine"
  ],
  "number": 11917,
  "state": "open",
  "title": "Implementing IConvertible prevents casting to string",
  "updated_at": "2020-03-24T06:31:50Z"
}