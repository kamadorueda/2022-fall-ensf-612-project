{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6360",
  "author": "mklement0",
  "body": "<sup>Related: #6291, #6292, and #4624</sup>\r\n\r\nFollowing up from https://github.com/PowerShell/PowerShell/issues/6292#issuecomment-371344550:\r\n\r\nNote: The tokens in question, such as **`-foo:bar`, _look_ like named PowerShell arguments** (and, behind the scenes, are initially always parsed as such - see @BrucePay's comment below), but **should be passed through as-is (except for possibly expanding the string) when calling external programs.**\r\n\r\nTokens that happen to look like **`-foo.bar`** suffer a similar fate (see #6291).\r\n\r\nThis **already works as expected with _direct_ argument passing** (e.g., \r\n`echoArgs -foo:bar` passes `-foo:bar` as a single argument\r\n), but **not when passing `$Args` / splatting it (`@Args`).**\r\n\r\nNote: The problem is fundamental to the use of `$Args` / `@Args` and, while perhaps less common, also affects its use when calling PowerShell-native commands - see [comment below](https://github.com/PowerShell/PowerShell/issues/6360#issuecomment-375972209).\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nRun on macOS or Linux.\r\n\r\n```powershell\r\nfunction baz {\r\n  bash -c 'for a; do echo $a; done' - $Args   # note: same with @Args\r\n}\r\n\r\nbaz -foo:bar\r\n'---'\r\nbaz -foo.bar\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\n-foo:bar\r\n---\r\n-foo.bar\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\n-foo:\r\nbar\r\n---\r\n-foo\r\n.bar\r\n```\r\n\r\nThe arguments are unexpectedly broken in two. See linked comment for background.\r\n\r\n\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.0.1 on macOS 10.13.3\r\nPowerShell Core v6.0.1 on Ubuntu 16.04.3 LTS\r\nPowerShell Core v6.0.1 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\nWindows PowerShell v5.1.15063.674 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "> Note: The tokens in question, such as -foo:bar look like named PowerShell arguments,\r\n\r\n@mklement0 As i describe in the comments in #6292, these **_are_** named PowerShell arguments. Always. Parameter binding is done long after the compile is complete.  Now in the compiled AST, the token for `-foo:` has a flag indicating that there was no space after it in the source code. The `NativeCommandParameterBinder` looks at this AST element to see if it has the flag is set then concatenates the parameter and argument with no space between them. If it's not set, then a space is inserted. This only works if the arguments  are literal (i.e. the `NativeCommandParameter` was access to the AST for the argument). In the splatting case, the arguments are values, not literal arguments so you get a space. \r\n\r\nOne way to fix this is to propagate the \"NoSpace\" token property into metadata on the corresponding string value. The `NativeCommandParameterBinder` could then check for this metadata when converting it's arg array into a string. It's probably worth thinking about this a bit more to see if there are other cases (especially *nix specific cases) that should be addressed.\r\n",
      "created_at": "2018-03-14T17:27:49Z",
      "updated_at": "2018-03-14T17:27:49Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "#6492 (since closed as a duplicate) shows that splatting `@args` is also broken when calling PowerShell functions (not just external programs):\r\n\r\nSupporting that scenario is presumably even trickier, because the expectation here is that the named parameters are passed through as-is, with their original types.\r\n\r\nHere's a simplified repro:\r\n\r\n```powershell\r\nfunction b {\r\n  Param\r\n  (\r\n      [Switch] $p1,\r\n      [int] $p2,\r\n      $rest\r\n  )\r\n  \"`$p1: [$p1]\"\r\n  \"`$p2: [$p2]\"\r\n  \"`$rest: [$rest]\"\r\n}\r\n\r\n& { b @args } -p1:$false 666\r\n```\r\n\r\n```powershell\r\n$p1: [True]  # `-p1:` was interpreted as just `-p1`\r\n$p2: [0]      # `$false`, as a separate argument, was coerced to [int] 0\r\n$rest: [666] # what was meant to be the 2nd argument was passed as the 3rd\r\n```\r\n\r\nThe workaround - and preferable solution to begin with - is to define the same `param()` block in the relaying function and splat with `@PSBoundParameters`.",
      "created_at": "2018-03-25T13:53:08Z",
      "updated_at": "2019-06-03T22:27:05Z"
    },
    {
      "author": "Jerald",
      "author_association": "NONE",
      "body": "I just spent the past week or so wrestling with this issue. After tracking it down to forced switch parameter values (such as `-foo:$bar`) not getting set after splatting with `@Args`, I thought this must be an obscure scoping issue. Imagine my surprise when I discovered that forcing any switch parameter value this way wouldn't have the expected behavior. I tested it even with the Powershell 7 Preview 1 release and the same issue still arises. I would hope that it would be fixed after more than a year of being a known problem...\r\n\r\nFor reference, this is the test I created to show the bug. Saw it on a Server 2016 machine with Powershell 7 Preview 1, as well as a Server 2012 R2 machine with Powershell 5.1.\r\n\r\n```powershell\r\nfunction foo\r\n{\r\n    param(\r\n        [switch]$testArg = $false\r\n    )\r\n\r\n    write-host \"Test arg value: '$testArg'\"\r\n}\r\n\r\nfunction bar\r\n{\r\n    foo @Args\r\n}\r\n\r\n$testSplat = @{\r\n    testArg = $false\r\n}\r\n\r\nwrite-host \"#### Foo tests ####\"\r\n\r\nfoo\r\nfoo -testArg:$true\r\nfoo -testArg:$false\r\nfoo @testSplat\r\n\r\nwrite-host \"#### Bar tests ####\"\r\n\r\nbar\r\nbar -testArg:$true\r\nbar -testArg:$false\r\nbar @testSplat\r\n```\r\n\r\n",
      "created_at": "2019-06-03T16:18:45Z",
      "updated_at": "2019-06-03T16:18:45Z"
    }
  ],
  "created_at": "2018-03-11T07:52:49Z",
  "labels": [
    "WG-Language",
    "Issue-Discussion"
  ],
  "number": 6360,
  "state": "open",
  "title": "Parameter parsing/passing: unquoted tokens that look like named arguments with colon as the separator are broken in two when passed indirectly via $Args / @Args",
  "updated_at": "2019-06-03T22:27:05Z"
}