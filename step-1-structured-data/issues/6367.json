{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6367",
  "author": "ghost",
  "body": "## PR Summary\r\n\r\n`sys/sysctl` header is not available in musl-libc based systems and system calls are available without any header inclusion. I have ported the cmake test from CoreFX repo (https://github.com/dotnet/corefx/blob/431475b8/src/Native/Unix/configure.cmake#L560).\r\n\r\nProgress towards: #4605\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed - Issue link:\r\n- **Testing - New and feature**\r\n    - [x] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [ ] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2018-03-20T20:34:18Z",
  "comments": [
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "[![CLA assistant check](https://cla.opensource.microsoft.com/pull/badge/signed)](https://cla.opensource.microsoft.com/PowerShell/PowerShell?pullRequest=6367) <br/>All CLA requirements met.",
      "created_at": "2018-03-12T22:59:20Z",
      "updated_at": "2018-03-12T23:03:50Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "cc @SteveL-MSFT \r\n\r\nThis is how i built it:\r\n\r\n```sh\r\ndocker run -it microsoft/dotnet:2.1-sdk-alpine\r\n\r\n# in container\r\napk update\r\napk add cmake clang build-base git bash\r\ngit clone --recursive https://github.com/kasper3/powershell\r\ncd powershell/src/libpsl-native\r\n\r\ncmake -DCMAKE_BUILD_TYPE=Debug .\r\nmake -j\r\n```\r\n\r\nthen, for managed,\r\n\r\n```sh\r\ncd ../..\r\ndotnet restore\r\ntouch DELETE_ME_TO_DISABLE_CONSOLEHOST_TELEMETRY\r\n\r\ncd src/ResGen\r\ndotnet run\r\n\r\ncd ..\r\ntargetFile=\"Microsoft.PowerShell.SDK/obj/Microsoft.PowerShell.SDK.csproj.TypeCatalog.targets\"\r\ncat > $targetFile <<-\"EOF\"\r\n<Project>\r\n  <Target Name=\"_GetDependencies\"\r\n          DependsOnTargets=\"ResolveAssemblyReferencesDesignTime\">\r\n    <ItemGroup>\r\n      <_RefAssemblyPath Include=\"%(_ReferencesFromRAR.ResolvedPath)%3B\" Condition=\" '%(_ReferencesFromRAR.Type)' == 'assembly' And '%(_ReferencesFromRAR.PackageName)' != 'Microsoft.Management.Infrastructure' \" />\r\n    </ItemGroup>\r\n    <WriteLinesToFile File=\"$(_DependencyFile)\" Lines=\"@(_RefAssemblyPath)\" Overwrite=\"true\" />\r\n  </Target>\r\n</Project>\r\nEOF\r\ndotnet msbuild Microsoft.PowerShell.SDK/Microsoft.PowerShell.SDK.csproj /t:_GetDependencies \"/property:DesignTimeBuild=true;_DependencyFile=$(pwd)/TypeCatalogGen/powershell.inc\" /nologo\r\n\r\ncd TypeCatalogGen\r\ndotnet run ../System.Management.Automation/CoreCLR/CorePsTypeCatalog.cs powershell.inc\r\n\r\ncd ../..\r\ndotnet publish --runtime linux-x64\r\n```\r\n",
      "created_at": "2018-03-12T23:03:05Z",
      "updated_at": "2018-03-13T00:02:06Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "Following this guide https://github.com/PowerShell/PowerShell/blob/76526c6f1df08c0a55fbae79a7148a4a58805626/docs/building/internals.md, i made a breakthrough. Now stuck with another error (updated previous comment)",
      "created_at": "2018-03-12T23:22:11Z",
      "updated_at": "2018-03-12T23:22:11Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "Fixed, had to add `touch DELETE_ME_TO_DISABLE_CONSOLEHOST_TELEMETRY` at repo root. Strange requirement \ud83d\ude1d ",
      "created_at": "2018-03-12T23:36:23Z",
      "updated_at": "2018-03-12T23:36:23Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Got it working:\r\n\r\n```powershell\r\nPS /powershell> $psversiontable                                                                                                                                                                                                             \r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.1\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.1-252-g982dbfe552b41ec3cd9b64f649849e8b942643d6\r\nOS                             Linux 4.9.60-linuxkit-aufs #1 SMP Mon Nov 6 16:00:12 UTC 2017\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\nPS /powershell> cat /etc/*-release                                                                                                                                                                                                          \r\n3.6.2\r\nNAME=\"Alpine Linux\"\r\nID=alpine\r\nVERSION_ID=3.6.2\r\nPRETTY_NAME=\"Alpine Linux v3.6\"\r\nHOME_URL=\"http://alpinelinux.org\"\r\nBUG_REPORT_URL=\"http://bugs.alpinelinux.org\"\r\nPS /powershell> \r\n\r\n```\r\n",
      "created_at": "2018-03-13T05:55:54Z",
      "updated_at": "2018-03-13T05:57:31Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "Hey Steve, after `dotnet publish --runtime linux-x64`, what exact command you ran to get into the shell, i am still trying to figure that out \ud83d\ude2e ",
      "created_at": "2018-03-13T06:23:38Z",
      "updated_at": "2018-03-13T06:23:38Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@kasper3 here's the updated instructions from your list above:\r\n\r\n```bash\r\n# remove your last two lines and replace with\r\ncd ../powershell-unix\r\ndotnet publish --configuration Linux --runtime linux-x64\r\nmv libpsl-native.so bin/Linux/netcoreapp2.0\r\ndotnet run -c Linux\r\n```\r\n\r\nPerhaps for now, we can have this as a bash script until we have a build available then we can update `build.psm1` to work correctly on Alpine (it makes assumptions about being on Ubuntu)",
      "created_at": "2018-03-13T16:32:44Z",
      "updated_at": "2018-03-13T16:32:44Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "Thanks, it worked! I will add the build script with instructions in a separate commit today.",
      "created_at": "2018-03-13T16:49:57Z",
      "updated_at": "2018-03-13T16:49:57Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@kasper3 if you can update the PR description above to use the standard PR template, we can take this one just to get libpsl-native building on Alpine",
      "created_at": "2018-03-13T17:18:06Z",
      "updated_at": "2018-03-13T17:18:06Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "@SteveL-MSFT, done.\r\n\r\nPlease note that we are not bound to use that particular docker provided by Microsoft/dotnet, we can use a latest alpine one (or install Alpine 3.7 in VM or even bare-metal) and setup fully functional dotnet sdk like described here: https://github.com/dotnet/cli/issues/8767. There is one additional thing I had to do (create a nuget.config, before creating the first app, since it's depending on preview2 packages, which are not yet available in nuget). Here is the final setup:\r\n\r\n```sh\r\ndocker run -it alpine:latest\r\n```\r\n\r\nthen in container\r\n\r\n```sh\r\napk update\r\napk add curl libstdc++ libunwind libintl icu-libs openssl\r\n\r\ncurl -O https://dotnetcli.blob.core.windows.net/dotnet/Sdk/master/dotnet-sdk-latest-alpine.3.6-x64.tar.gz\r\nmkdir -p /usr/bin/dotnet\r\ntar -xzvf dotnet-sdk-latest-alpine.3.6-x64.tar.gz  -C /usr/bin/dotnet\r\nexport PATH=$PATH:/usr/bin/dotnet\r\nrm dotnet-sdk-latest-alpine.3.6-x64.tar.gz\r\n\r\nnugetConfDir=\"/root/.nuget/NuGet\"\r\nmkdir -p $nugetConfDir\r\ncat > $nugetConfDir/NuGet.Config <<-\"EOF\"\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <packageSources>\r\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\r\n <add key=\"dotnet-core\" value=\"https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\" />\r\n  </packageSources>\r\n</configuration>\r\nEOF\r\n```\r\n\r\nThen we can use `dotnet new console` etc. and continue installing `git` and stuff to compiler powershell.\r\n\r\nShould we have two scripts `obtain-dotnet-alpine.sh` and `build-pwsh-alpine.sh`? Preferably, those scripts could use Bourne Shell shebang `#!/bin/sh` instead of `bash`, because:\r\n\r\n1. there is no `bash`ism in these simple commands\r\n2. as an example, all Unix shell scripts shipped by npm and node.js are `/bin/sh`. .NET Core heavily used bash but now they are slowly converting to sh as well.\r\n3. in latest Ubuntu, default shell is dash, in Alpine default shell is ash, in NetBSD, default shell is csh etc... and all of those require extra installation of `bash`. The only common shell between all kinds of unices is POSIX complaint Bourne Shell.. it gets bit harder to convert existing bash script to bourne shell but we can try not to introduce more `bash`ism than required and stay impartial. We can also try to convert existing .sh files to `bin/sh` at slow pace. \u270c\ufe0f\r\n",
      "created_at": "2018-03-13T18:11:39Z",
      "updated_at": "2018-03-15T12:20:02Z"
    },
    {
      "author": "krytarowski",
      "author_association": "NONE",
      "body": "`#!/bin/sh` would be nice.\r\n\r\nA correction - upstream for tcsh is NetBSD, but the default shell is Almquist Shell (ash / sh). Debian's dash is a fork of NetBSD's ash.",
      "created_at": "2018-03-14T04:04:29Z",
      "updated_at": "2018-03-14T04:04:29Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "dotnet said they fixed `install-dotnet.sh`, but I don't know how long it takes to go into production",
      "created_at": "2018-03-16T23:42:22Z",
      "updated_at": "2018-03-16T23:42:22Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "@TravisEz13, can't `docker run -it microsoft/dotnet:2.1-sdk-alpine` be used? Or does PowerShell repo can't use docker and requires it to be available in a VM or bare-metal?",
      "created_at": "2018-03-16T23:47:03Z",
      "updated_at": "2018-03-16T23:47:03Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@kasper3 I'd have to see a working script.\r\nI would recommend you add any custom script to build this in `tools/releaseBuild/images`   The idea is that the build is described in `tools/releaseBuild/build.json`.  The readme in `tools/releaseBuild` describes how to call a build described in `build.json`\r\nIf you even just add a docker file that does the build in that folder, I'm happy to refactor it into the build.json\r\n\r\nHopefully, we can get something working in `build.psm1` eventually too.",
      "created_at": "2018-03-16T23:51:03Z",
      "updated_at": "2018-03-16T23:51:03Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "@TravisEz13, I have assembled the pieces together and added a naive build script for Alpine. I couldn't quite figure out the Docker build image integration. This script clones the repository and build and run pwsh. Here is one way to run it:\r\n\r\n```sh\r\n# in windows 10 powershell\r\ngit clone https://github.com/kasper3/powershell\r\ncd powershell/tools/releaseBuild/images/microsoft_powershell_alpine3\r\ndocker run -it -v $pwd\\:/host microsoft/dotnet:2.1-sdk-alpine\r\n\r\n# in alpine-dotnet container\r\n/host/build_and_run_pwsh.sh\r\n\r\n# after sometime you will enter powershell\r\n```\r\n",
      "created_at": "2018-03-17T20:54:09Z",
      "updated_at": "2018-03-17T20:54:09Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@kasper3 I think I can work with this.  I have some deadlines.  It may take me some time.  If I don't reply my next month, can you ping me?",
      "created_at": "2018-03-19T19:14:41Z",
      "updated_at": "2018-03-19T19:14:41Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "@TravisEz13, sure thanks! ",
      "created_at": "2018-03-19T19:19:02Z",
      "updated_at": "2018-03-19T19:19:02Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@kasper3 The build command from the root of the repo is `./tools/releaseBuild/vstsbuild.ps1 -Name alpine.3 -ReleaseTag v6.1.0-alpine3`\r\n\r\nThere are still two things to do:\r\n - [ ] the package should have the same format as the other packages (should be `powershell-6.0.2-alpine.3-x64.tar.gz`)\r\n - [ ] the build should be triggered with the release tag ([build.psm1 example](https://github.com/PowerShell/PowerShell/blob/master/build.psm1#L524))",
      "created_at": "2018-03-19T19:57:43Z",
      "updated_at": "2018-03-19T19:57:58Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "This is a great progress! TIL, thanks.\r\n\r\nI was thinking that maybe we could try using a mini rootfs: https://alpinelinux.org/downloads/ in hyperv or vmware (it's 1.9 mbs of gz), and test if it works in non-Docker as well. I heard yesterday from musl-libc core team member (@rofl0r) something in between the lines of \"don't trust that it works on Alpine just because it works on Alpine docker, they have things like `libbacktrace` and `sys/queue` used in docker to make it work with underlying kernel, test on real thing too!\", hence my suggestion-cum-curiosity. :)",
      "created_at": "2018-03-19T20:23:38Z",
      "updated_at": "2018-03-19T20:50:27Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@kasper3 that sound like a great idea to investigate.  I would get this working as is first.  I think if we get those things done since this is an unofficial package, we can merge the PR.\r\n\r\nOnce, we have released a package, we should produce a docker file.",
      "created_at": "2018-03-19T20:39:41Z",
      "updated_at": "2018-03-19T20:39:41Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "@TravisEz13, does the release tag has to be `v6.1.0-alpine3`? Or is it just `v6.1.0`?",
      "created_at": "2018-03-20T16:33:02Z",
      "updated_at": "2018-03-20T16:33:02Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@kasper3   The regex is here: https://github.com/PowerShell/PowerShell/blob/master/tools/packaging/packaging.psm1#L16\r\nbut either will work... mine was just an example.  `v6.1.0-preview.1` will be the next tag then after a series of non-stable releases we will eventually get to `v6.1.0`",
      "created_at": "2018-03-20T17:21:57Z",
      "updated_at": "2018-03-20T17:21:57Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "Thanks. I have made some changes locally and created the tarball with the matching name. The final tarball builds but..\r\n\r\nWe need to build other native components as well, `pwsh` itself, and maybe https://github.com/PowerShell/psl-omi-provider, https://github.com/Microsoft/omi? We cannot rely on prebuild Linux binaries, the tarball being produced is not distributable.\r\n\r\n`libhostfxr.so` and other `.so` files except for the one we built *on Alpine* `libpsl-native.so` are corrupted when we try to consume pwsh from the tarball. `pwsh` itself is corrupted as it was prebuilt against glibc.\r\n\r\nThe main difference in Alpine Linux and other distros is that it uses different libc, i.e. musl-libc. So we need to compile it from ground up. .NET Team is even considering changing the inheritance of Alpine Linux RID from `unixx64->linuxx64->alpinex64` to `unixx54->alpinex64` or `unixx64->linuxmuslx64->alpninex64` etc. so the fallback RID is not a linuxX64 also known as `GLIBC based Linux` (regular one).\r\n\r\nShould we block this PR until then? Is everything that is required to build `pwsh` native executable in the open? It seems like pwshexe project is Windows only in this repo and Linux binaries are coming from somewhere I couldn't figure out.\r\n",
      "created_at": "2018-03-20T17:54:49Z",
      "updated_at": "2018-03-20T17:54:49Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "All the native pieces need to be recompiled on Alpine then package in tarball.",
      "created_at": "2018-03-20T17:59:17Z",
      "updated_at": "2018-03-20T17:59:17Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@kasper3 my thinking is that this bash script is temporary to produce a working pwsh we can use on Alpine until we can update build.psm1 and packaging.psm1 to produce official Alpine builds regularly, so I wouldn't worry about the OMI aspect for now.  Regarding glibc vs musl, I would defer updating build.psm1/packaging.psm1 until dotnetcore resolves that.",
      "created_at": "2018-03-20T18:04:03Z",
      "updated_at": "2018-03-20T18:04:03Z"
    },
    {
      "author": "rofl0r",
      "author_association": "NONE",
      "body": "@kasper3 said:\r\n> yesterday from musl-libc core team member (@rofl0r) something in between the lines of \"don't trust that it works on Alpine just because it works on Alpine docker, they have things like libbacktrace and sys/queue used in docker to make it work with underlying kernel, test on real thing too!\"\r\n\r\ncorrection, what i actually said was conceptually: \r\n> \"don't trust that it works on **musl libc** just because it works on Alpine docker, they have things like libbacktrace and sys/queue <strike>used in docker to make it work with underlying kernel</strike> **to go the path of least resistance instead of identifying offenders and reporting the issue upstream**, test on real thing too!\"",
      "created_at": "2018-03-20T18:13:42Z",
      "updated_at": "2018-03-20T18:13:42Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@kasper3 my thinking is along the same line as @SteveL-MSFT 's this PR as is should get us there.  I think it's okay to add a new distribution as partially working.  Getting it to the point we can build it in the main build system will open it to more people to contribute, but this PR is an important step... I have the PR blocked with the WIP in the title, but I still think we should fix the two issue and proceed to fix the others.",
      "created_at": "2018-03-20T18:25:50Z",
      "updated_at": "2018-03-20T18:25:50Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "@TravisEz13, pushed my changes and opened an issue upstream: https://github.com/Microsoft/omi/issues/497. Will try to patch those separately if i get time. :)\r\n\r\n@rofl0r, thanks for the correction! :)",
      "created_at": "2018-03-20T18:49:29Z",
      "updated_at": "2018-03-20T18:49:29Z"
    }
  ],
  "created_at": "2018-03-12T22:59:10Z",
  "number": 6367,
  "state": "closed",
  "title": "Add Alpine Linux support",
  "updated_at": "2018-03-20T20:34:19Z"
}