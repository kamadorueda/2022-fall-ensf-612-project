{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14112",
  "author": "sharpjs",
  "body": "## Steps to reproduce\r\n\r\n```powershell\r\n\"ABCDEFGH\" -split '(?<=\\G..)(?=..)'\r\n```\r\n\r\n## Expected behavior\r\n\r\nIn PS 7.0.3 and earlier, this is the output:\r\n```none\r\nAB\r\nCD\r\nEF\r\nGH\r\n```\r\n\r\n## Actual behavior\r\n\r\nIn PS 7.1.0, this is the output:\r\n```none\r\nAB\r\nCDEFGH\r\n```\r\n\r\n## Workaround\r\n\r\nThis works in PS 7.1.0:\r\n```powershell\r\n[regex]::Matches(\"ABCDEFGH\", \"..\") | % Value\r\n```\r\n\r\n## Environment data\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.0\r\nPSEdition                      Core\r\nGitCommitId                    7.1.0\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-11-20T15:17:30Z",
  "comments": [
    {
      "author": "sharpjs",
      "author_association": "NONE",
      "body": "Removing `\\G` from the pattern restores multiple splits, which suggests that the `\\G` anchor indeed is the source of the unexpected behaviour.\r\n\r\n```powershell\r\n\"ABCDEFGH\" -split '(?<=..)(?=..)'\r\n#                      ^\r\n#                    No \\G\r\n```\r\n\r\nNOTE: Below is not the desired output; it is shown here only to illustrate the behaviour without `\\G`.\r\n\r\n```none\r\nAB\r\nC\r\nD\r\nE\r\nF\r\nGH\r\n```",
      "created_at": "2020-11-17T19:08:27Z",
      "updated_at": "2020-11-17T19:08:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@sharpjs Thanks for your report!\r\n\r\nThis broke in PowerShell 7.1 Preview1 after we moved to .Net 5.0. PowerShell uses .Net Regex so it is .Net issue.\r\n\r\nI see you have an experience in .Net - please create a simple C# demo, open new issue in .Net Runtime repository and reference the issue for tracking.\r\n",
      "created_at": "2020-11-18T04:57:09Z",
      "updated_at": "2020-11-18T04:57:09Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Just to offer a pragmatic workaround in the meantime: `\"ABCDEFGH\" -split '(..)' -ne ''`",
      "created_at": "2020-11-19T21:01:12Z",
      "updated_at": "2020-11-19T21:01:12Z"
    },
    {
      "author": "sharpjs",
      "author_association": "NONE",
      "body": "Fixes in .NET runtime repo:\r\n`6.0.0`: https://github.com/dotnet/runtime/pull/44975 (merged)\r\n`5.0.x`: https://github.com/dotnet/runtime/pull/44985 (merged)",
      "created_at": "2020-11-20T14:40:29Z",
      "updated_at": "2020-12-08T20:17:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@sharpjs Thanks!",
      "created_at": "2020-11-20T15:17:30Z",
      "updated_at": "2020-11-20T15:17:30Z"
    },
    {
      "author": "sharpjs",
      "author_association": "NONE",
      "body": "The fix is [not documented to be in .NET 5.0.1](https://github.com/dotnet/runtime/issues?q=is%3Aissue+is%3Aclosed+milestone%3A5.0.1+is%3Aclosed+) as of this writing, but my [repro test](https://github.com/sharpjs/Net50RegexSplitBug) went from red to green with the installation of .NET 5.0.1.  So, looks like upstream is fixed.\r\n\r\n![image](https://user-images.githubusercontent.com/708461/101538467-ff1a9b00-3951-11eb-9479-0fd018575e0c.png)\r\n",
      "created_at": "2020-12-08T20:38:39Z",
      "updated_at": "2020-12-08T20:38:39Z"
    }
  ],
  "created_at": "2020-11-17T18:53:42Z",
  "number": 14112,
  "state": "closed",
  "title": "-split With \\G Stops After First Split",
  "updated_at": "2020-12-08T20:38:39Z"
}