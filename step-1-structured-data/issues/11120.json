{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11120",
  "author": "iricigor",
  "body": "PowerShell accepts parameters with numeric-only names in a function definition, but it is ignoring them while processing. It should either:\r\n- throw definition error, or\r\n- treat parameter properly.\r\n\r\n`Get-Help` is also properly parsing syntax for the new function.\r\n\r\nI gave below the example with `switch` parameter, but it is the same also with `int`. This is a valid bug in **PS Core 7.0.0-preview.5**, but I think this is legacy from Windows.\r\n\r\n<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n\r\nDeclare a function with numeric parameter\r\n```powershell\r\nfunction p1([switch]$1) {if ($1) {'Yes'} else {'No'}}\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nPS /home/iiric> p1\r\nNo\r\nPS /home/iiric> p1 -1\r\nYes\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nPS /home/iiric> p1\r\nNo\r\nPS /home/iiric> p1 -1\r\nNo\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-preview.5\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-preview.5\r\nOS                             Linux 4.4.0-18362-Microsoft #10000-Microsoft Fri Jun 21 11:23:00 PST 2019\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n# Screenshot\r\n\r\nPlease see the screenshot with a normal function and normal behaviour and problematic function also.\r\n\r\n![image](https://user-images.githubusercontent.com/15923171/69174135-80ae4980-0b01-11ea-8920-10b86c4f8cda.png)\r\n\r\n\r\n",
  "closed_at": "2019-11-19T20:54:57Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, `-<number>` is interpreted by the parser as a negative number rather than a parameter name in this instance. \r\n\r\nThis isn't the only example; many parameter names can be used which are entirely unusable, especially when using `${variable}` syntax, which allows for many otherwise illegal characters to be used.\r\n\r\ne.g., \r\n\r\n```powershell\r\nfunction test { param([object] ${|UnusableParam}) Write-Output ${|UnusableParam} }\r\n#is interpreted as \"test -\" and then throws a CommandNotFoundException on UnusuableParam that follows the pipe.\r\ntest -|UnusableParam Value\r\n```\r\n\r\nI think the best course of action is probably to create a PSSA rule that warns when such parameters are created, so users are aware ahead of time that they're making parameters that they won't be able to refer to.\r\n\r\nNote that you _can_ refer to them via splatting, so it's not entirely an \"illegal\" parameter per se, just one you can't call directly:\r\n\r\n```powershell\r\n# using the above function as the example\r\n$params = @{ '|UnusableParam' = \"hello\" }\r\nPS> test @params\r\nhello\r\n\r\n# using the original issue function as the example\r\n$params = @{ '1' = $true }\r\nPS> p1 @params\r\nYes\r\n```\r\n\r\nAs a general best-practice recommendation, I'd advise not doing that for several other reasons, chief amongst them being it isn't particularly great for readability. \ud83d\ude04 ",
      "created_at": "2019-11-19T18:30:50Z",
      "updated_at": "2019-11-19T18:34:35Z"
    },
    {
      "author": "iricigor",
      "author_association": "NONE",
      "body": "Thanks Joel. I confirm splatting `p1 @params` works as expected. I will open an issue/new feature request in [PSSA](https://github.com/PowerShell/PSScriptAnalyzer).\r\n\r\nWhat would you suggest about this issue here, close it or leave it and do some corrective action? Could `Get-Help` detect illegal characters? Or function declaration can do it and throw a warning?",
      "created_at": "2019-11-19T19:37:15Z",
      "updated_at": "2019-11-19T19:37:15Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Not sure how feasible it is to throw warnings off function definitions, to be honest. \r\n\r\n/cc @SteveL-MSFT you think that's worth looking into in these cases? \ud83e\udd14 ",
      "created_at": "2019-11-19T19:41:09Z",
      "updated_at": "2019-11-19T19:41:09Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Seems like a bad practice to have switches with names that are just numbers as it's confusing reading such a script whether it is a negative number or a switch or a parameter.  The PSSA rule is a good suggestion.  `Get-Help` is doing the right thing by just looking at the cmdlet signature so I don't think it's worth changing that.  The parameter binder could determine that the cmdlet doesn't accept any ints by position nor remaining args, so it could know that `-1` is a switch, but it seems such an edge case I'd rather not spend time trying to make changes to the parameter binder and introduce some other bug.",
      "created_at": "2019-11-19T20:20:55Z",
      "updated_at": "2019-11-19T20:20:55Z"
    },
    {
      "author": "iricigor",
      "author_association": "NONE",
      "body": "Thanks for responses. [PSSA new feature request created](https://github.com/PowerShell/PSScriptAnalyzer/issues/1375).",
      "created_at": "2019-11-19T20:54:57Z",
      "updated_at": "2019-11-19T20:54:57Z"
    }
  ],
  "created_at": "2019-11-19T18:23:51Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 11120,
  "state": "closed",
  "title": "numeric-only parameter inconsistency",
  "updated_at": "2019-11-20T05:09:45Z"
}