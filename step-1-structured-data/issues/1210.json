{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1210",
  "author": "andschwa",
  "body": "Thus bumps us to the release .NET Core 1.0 packages available on NuGet.org.\n\nAdditionally, @daxian-dbw the type catalog generator was ported to .NET Core and the catalog updated (containing MMI types; open question: should we have those or remove them?).\n\nPlease note that this continues to use the same ALC implementation as provided by Jan, with the explicit load work-arounds. I'm issuing this PR to keep that work separate, but on top of this.\n\nAll NuGet feeds except NuGet.org and AppVeyor have been removed. You can expect far fewer package updates now.\n\nI'll probably clean these commits up once or twice still.\n",
  "closed_at": "2016-06-28T21:37:21Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "We should remove the MMI types from the type catalog. The type catalog should only contains .NET Core libraries.\nIf this gets merged to Master, will the test verification work on NanoServer be affected? @TravisEz13 \n",
      "created_at": "2016-06-27T20:12:00Z",
      "updated_at": "2016-06-27T20:12:00Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@daxian-dbw that's what I thought, but MMI is a weird library in that it's not a PowerShell library nor a .NET Core library, and it is consumed as a package. Nonetheless, I agree; removing.\n\n@TravisEz13 could run builds from before the merge, but yes if he tries post-update builds I could see some problems until you've updated Nano with .NET Core 1.0 as well. When can you do this?\n",
      "created_at": "2016-06-27T20:51:19Z",
      "updated_at": "2016-06-27T20:51:19Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@andschwa  let me check with NanoServer team. I'm working on the new ALC at the meantime.\n",
      "created_at": "2016-06-27T21:31:05Z",
      "updated_at": "2016-06-27T21:31:05Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@daxian-dbw, cool. Did you get a chance to see my implementation? Also, what about JSON.NET, where do we draw the line for the CorePsTypeCatalog? It would seem logical that it includes anything built from a package (and so shipped with PowerShell), but I'm not sure.\n",
      "created_at": "2016-06-27T21:36:44Z",
      "updated_at": "2016-06-27T21:36:44Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I took a look at it at https://github.com/PowerShell/PowerShell/blob/andschwa/alc-wip/src/Microsoft.PowerShell.CoreCLR.AssemblyLoadContext/CoreCLR/CorePsAssemblyLoadContext.cs, but it's a little hard for me to see what has been changed and what not.\n\nI think CorePsTypeCatalog should contain only .NET Core libraries, so that the type catalog can be used targeting the Nano .NET Core deployment without problem, and then PowerShell binaries can be put on Nano and work fine.\n",
      "created_at": "2016-06-27T22:02:36Z",
      "updated_at": "2016-08-17T06:55:35Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "JSON.NET is a tricky one. It's not in the .NET drop deployed in NanoServer, so nano powershell has to ship its own version of it. Is JSON.NET used anywhere else other than in Json cmdlets?\n",
      "created_at": "2016-06-27T22:07:32Z",
      "updated_at": "2016-06-27T22:07:32Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@daxian-dbw Do a `git diff master` of my `andschwa/alc-wip` branch to see what changed.\n\nI have failing tests right now because we have `Json.Tests.ps1` that expect to be able to use the `Newtsonsoft.Json.dll` types. That puts it in a bucket very similar to .NET Core for us, and we might just have to keep them in the catalog until we've resolved the rest of the ALC stuff.\n",
      "created_at": "2016-06-27T22:09:50Z",
      "updated_at": "2016-06-27T22:09:50Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "OK, then keep JSON.NET in the type catalog. We will see if it's possible to get Nano CoreCLR include JSON.NET.\n",
      "created_at": "2016-06-27T22:18:34Z",
      "updated_at": "2016-06-27T22:18:34Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@TravisEz13 are you okay with us merging this now, or wait for Nano to take on RTM? How soon can that happen? This is going to be blocking stuff in the pipeline I think.\n",
      "created_at": "2016-06-27T23:24:15Z",
      "updated_at": "2016-06-27T23:24:15Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "On the one hand it's desirable to upgrade about the same time as Nano server to allow continuous testing. On the other hand, if it's like another 2 weeks, it could be too long and I don't think we should wait that much. I believe @TravisEz13 captured most of the regressions in the issues already. Plus, we can create a branch before update, so we are able to reproduce this Nano test pass results. @daxian-dbw we need a Nano CoreCLR update timeline to make a right call.\n",
      "created_at": "2016-06-28T06:21:54Z",
      "updated_at": "2016-06-28T06:21:54Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Got sign-offs from @daxian-dbw, @mirichmo, and @TravisEz13.\n",
      "created_at": "2016-06-28T21:37:18Z",
      "updated_at": "2016-06-28T21:37:18Z"
    }
  ],
  "created_at": "2016-06-27T17:31:24Z",
  "number": 1210,
  "state": "closed",
  "title": "Update PowerShell to use .NET Core 1.0",
  "updated_at": "2016-08-17T06:55:35Z"
}