{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13869",
  "author": "DEberhardt",
  "body": "Invoking Pester (v5.1.0-beta 2) on Pwsh 7.1.0-rc.2 leads to different behaviour regarding Execution Policy RemoteSigned and Unblock-File\r\n\r\nReading [about_execution_policies](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7) RemoteSigned should allow files to run that have been unblocked, yet exeucting the same files (which are located on my local home server) yields two different results:\r\n![image](https://user-images.githubusercontent.com/44290340/97107948-30048080-16c2-11eb-99df-7a037a6308c0.png)\r\n\r\n\r\n\r\n## Steps to reproduce\r\n\r\nExecuting Invoke-Pester with files that are not digitally signed, not on a _this_ machine but also not downloaded (i.E. I have written these in the same environment with VSCode...\r\n\r\n```powershell\r\ninvoke-pester #errors\r\nunblock-file \\\\Server\\Share\\File.ps1 #no output, i.E. OK\r\ninvoke-pester #still errors\r\n\r\n```\r\nI have had also tried a `Get-ChildItem *.ps1 -Recurse | Unblock-File` which did the same (nothing)\r\n\r\n## Expected behavior\r\n\r\nSame environment, when my code base is on my local machine. Works.\r\nSame environment in PowerShell 5.1. Works.\r\n\r\n```powershell\r\ninvoke-pester\r\n\r\nStarting discovery in 4 files.\r\nDiscovery finished in 469ms.\r\nTesting 'TeamsFunctions' in path '\\\\SERVERNAME\\Share\\Code\\Personal\\TeamsFunctions'\r\n[ASSERT ] ERROR: You must call the Connect-SkypeOnline cmdlet before calling any other cmdlets.\r\n[ASSERT ] INFO:  Connect-Me can be used to disconnect, then connect to SkypeOnline, AzureAD & MicrosoftTeams in one step!\r\n[ASSERT ] ERROR: You must call the Connect-SkypeOnline cmdlet before calling any other cmdlets.\r\n[ASSERT ] INFO:  Connect-Me can be used to disconnect, then connect to SkypeOnline, AzureAD & MicrosoftTeams in one step!\r\n[+] Enable-TeamsUserForEnterpriseVoice.Tests.ps1 89ms (11ms|59ms)\r\n[+] Show-FunctionStatus.Tests.ps1 89ms (2ms|68ms)\r\n[+] Format-StringForUse.Tests.ps1 173ms (84ms|65ms)\r\nTests completed in 12.66s\r\nTests Passed: 779, Failed: 0, Skipped: 0 NotRun: 0\r\n```\r\n\r\n## Actual behavior\r\n\r\n```powershell\r\ninvoke-pester\r\n\r\nStarting discovery in 4 files.\r\nSystem.Management.Automation.PSSecurityException: File \\\\SERVERNAME\\Share\\Code\\Personal\\TeamsFunctions\\Private\\Tests\\Enable-TeamsUserForEnterpriseVoice.Tests.ps1 cannot be loaded. The file \\\\SERVERNAME\\Share\\Code\\Personal\\TeamsFunctions\\Private\\Tests\\Enable-TeamsUserForEnterpriseVoice.Tests.ps1 is not digitally signed. You cannot run this script on the current system. For more information about running scripts and setting execution policy, see about_Execution_Policies at https://go.microsoft.com/fwlink/?LinkID=135170.\r\n ---> System.UnauthorizedAccessException: File \\\\SERVERNAME\\Share\\Code\\Personal\\TeamsFunctions\\Private\\Tests\\Enable-TeamsUserForEnterpriseVoice.Tests.ps1 cannot be loaded. The file \\\\SERVERNAME\\Share\\Code\\Personal\\TeamsFunctions\\Private\\Tests\\Enable-TeamsUserForEnterpriseVoice.Tests.ps1 is not digitally signed. You cannot run this script on the current system. For more information about running scripts and setting execution policy, see about_Execution_Policies at https://go.microsoft.com/fwlink/?LinkID=135170.\r\n   --- End of inner exception stack trace ---\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.Interpreter.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.LightLambda.RunVoid1[T0](T0 arg0)\r\n   at System.Management.Automation.PSScriptCmdlet.RunClause(Action`1 clause, Object dollarUnderbar, Object inputToProcess)\r\n   at System.Management.Automation.PSScriptCmdlet.DoEndProcessing()\r\n   at System.Management.Automation.CommandProcessorBase.Complete()\r\nat <ScriptBlock>, C:\\Program Files\\WindowsPowerShell\\Modules\\Pester\\5.1.0\\Pester.psm1: line 2899\r\nat Invoke-File, C:\\Program Files\\WindowsPowerShell\\Modules\\Pester\\5.1.0\\Pester.psm1: line 2908\r\nat Invoke-BlockContainer, C:\\Program Files\\WindowsPowerShell\\Modules\\Pester\\5.1.0\\Pester.psm1: line 2833\r\nat Discover-Test, C:\\Program Files\\WindowsPowerShell\\Modules\\Pester\\5.1.0\\Pester.psm1: line 1407\r\nat Invoke-Test, C:\\Program Files\\WindowsPowerShell\\Modules\\Pester\\5.1.0\\Pester.psm1: line 2352\r\nat Invoke-Pester<End>, C:\\Program Files\\WindowsPowerShell\\Modules\\Pester\\5.1.0\\Pester.psm1: line 4753\r\nat <ScriptBlock>, <No file>: line 1\r\n```\r\n\r\n## Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.0-rc.2\r\nPSEdition                      Core\r\nGitCommitId                    7.1.0-rc.2\r\nOS                             Microsoft Windows 10.0.19041\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-10-29T00:00:05Z",
  "comments": [
    {
      "author": "DEberhardt",
      "author_association": "NONE",
      "body": "Also posted this on Pester, for awareness [#1736](https://github.com/pester/Pester/issues/1736)\r\n\r\nIs there a command to verify whether a file is currently blocked? \r\nI have not found any and `Get-Command -Noun File` only yields 2 results. (`Get-ChildItem` also does not have `IsBlocked `or `IsUnblocked `as a parameter either...)\r\n\r\nWas `Block-File` or `Get-File` or `Test-File` never thought of?  ",
      "created_at": "2020-10-25T13:36:12Z",
      "updated_at": "2020-10-25T13:36:12Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "What's the result from the WinPS and pwsh sessions for `Get-ExecutionPolicy -List`?",
      "created_at": "2020-10-25T14:13:34Z",
      "updated_at": "2020-10-25T14:13:34Z"
    },
    {
      "author": "DEberhardt",
      "author_association": "NONE",
      "body": "![image](https://user-images.githubusercontent.com/44290340/97110776-07d14d80-16d3-11eb-9ec3-4a0d6f8edc04.png)\r\n",
      "created_at": "2020-10-25T15:02:34Z",
      "updated_at": "2020-10-25T15:02:34Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "To see if a file is blocked, run this:\r\n```\r\nget-item <path> -Stream Zone.Identifier\r\n```\r\nOr\r\n```\r\nget-item <path> -Stream * | % Stream\r\n```\r\nIf the stream exists, then check the content of that stream:\r\n```\r\nPS> get-content <path> Stream Zone.Identifier\r\n[ZoneTransfer]\r\nZoneId=3\r\n```\r\nIf the ZoneId is 3 (or 4), then the file is blocked.",
      "created_at": "2020-10-25T16:57:23Z",
      "updated_at": "2020-10-25T16:58:11Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "If you want to inspect an entire directory (tree) at once (for a single directory, you can omit the `Get-ChildItem` call and pass `*` to `Get-Item`):\r\n\r\n```powershell\r\nGet-ChildItem -File -Recurse | Get-Item -ea Ignore -Stream Zone.Identifier | select Filename, @{ n='StreamContent'; e={ $_ | Get-Content } }\r\n```",
      "created_at": "2020-10-25T17:34:13Z",
      "updated_at": "2020-10-25T17:34:13Z"
    },
    {
      "author": "DEberhardt",
      "author_association": "NONE",
      "body": "Thank you! This is helpful. However, Ran it, came back empty (nothing blocked?) and still fails with `System.Management.Automation.PSSecurityException`",
      "created_at": "2020-10-25T17:39:35Z",
      "updated_at": "2020-10-25T17:39:35Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Try starting PowerShell 7 like so from the `Windows + R` run dialog:\r\n```\r\npwsh-preview -executionPolicy bypass\r\n```\r\nThen try Pester. Does it still fail the same way?  \r\n\r\nAnother experiment to try - if your test files are not on a share (copy them to a  local folder), does Pester still fail when run **without** the bypass used above?",
      "created_at": "2020-10-25T18:01:59Z",
      "updated_at": "2020-10-25T18:01:59Z"
    },
    {
      "author": "DEberhardt",
      "author_association": "NONE",
      "body": "With Bypass, it works normally.\r\nRunning it from a local source, also is successful.\r\nThe combination of RemoteSigned and local share results in the error (despite no files being blocked...)",
      "created_at": "2020-10-25T20:10:01Z",
      "updated_at": "2020-10-25T20:10:01Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Is it possible your network share is defined to be in the internet security zone?",
      "created_at": "2020-10-25T22:59:38Z",
      "updated_at": "2020-10-25T22:59:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It is by-design because now we can not use IE API https://github.com/PowerShell/PowerShell/issues/7458#issuecomment-613618200\r\n\r\nWorkaround is to set ByPass policy.",
      "created_at": "2020-10-26T06:00:04Z",
      "updated_at": "2020-10-26T06:00:45Z"
    },
    {
      "author": "DEberhardt",
      "author_association": "NONE",
      "body": "If I read this correctly, the IE zones will determine the trust PowerShell extends for RemoteSigned?\r\nI would want to avoid Workarounds or Bypass. Integrated Security by design is good \ud83d\udc4d \r\nWill evaluate the Zones, most likely I have not listed my server there (it is not a domain environment).\r\nReporting back in the next few days.\r\nCheers.",
      "created_at": "2020-10-26T10:23:31Z",
      "updated_at": "2020-10-26T10:23:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@DEberhardt PowerShell 7 can not use IE API. It uses simple heuristic. It is a security area and it is very sensitive area. It's incredible that something would be changed there without research by security experts.\r\n\r\n> it is not a domain environment\r\n\r\nSince it is not a managed environment the best you can do is use ByPass policy.",
      "created_at": "2020-10-26T11:08:38Z",
      "updated_at": "2020-10-26T11:08:38Z"
    },
    {
      "author": "DEberhardt",
      "author_association": "NONE",
      "body": "ok. Thank you for that background info.\r\nFollow-up question. Should Unblocking the files not do the trick?\r\nor is the RemoteSigned really working differently in PS7?\r\n\r\nReading further in the linked issues, has the plan to cover this with the Settings file been progressed or is it still to-do? \r\n\r\nThanks,\r\nDavid",
      "created_at": "2020-10-26T11:40:59Z",
      "updated_at": "2020-10-26T11:40:59Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Since the script is stored on a non-local path, powershell does treat that as remote, aye.\r\n\r\nI do believe the behaviour for UNC paths was changed slightly fairly early on in 6.0 or 6.1 for pwsh, but hasn't changed since then to my knowledge.",
      "created_at": "2020-10-26T12:15:45Z",
      "updated_at": "2020-10-26T12:15:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Follow-up question. Should Unblocking the files not do the trick?\r\nor is the RemoteSigned really working differently in PS7?\r\n\r\nYes, it works differently. The policy is a policy, the cmdlet cleans only an alternative data stream of the file and can not change a policy.",
      "created_at": "2020-10-26T13:12:08Z",
      "updated_at": "2020-10-26T13:12:08Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Associated issue #12336",
      "created_at": "2020-10-26T16:03:13Z",
      "updated_at": "2020-10-26T16:03:13Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Just to briefly mention the workaround in the interim: _if possible_, use the _short_ version of the target server's name (e.g, `server1`, rather than the FQDN, e.g. `server1.example.org`), because any `.` in it triggers the problem) in your UNC paths / drive mappings.",
      "created_at": "2020-10-26T16:21:36Z",
      "updated_at": "2020-10-26T21:56:55Z"
    },
    {
      "author": "DEberhardt",
      "author_association": "NONE",
      "body": "In my case, I am only using the Servername, not the FQDN",
      "created_at": "2020-10-26T21:52:40Z",
      "updated_at": "2020-10-26T21:52:40Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "That is curious, @DEberhardt - on my non-domain-joined machine the presence of a `.` made the difference. Perhaps someone else can formulate a _generally_ effective workaround.",
      "created_at": "2020-10-26T22:00:13Z",
      "updated_at": "2020-10-26T22:00:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You can look the code:\r\nhttps://github.com/PowerShell/PowerShell/blob/b0daa1e724cbba5e00f118001f1105bb44d91952/src/System.Management.Automation/utils/ClrFacade.cs#L181-L220",
      "created_at": "2020-10-27T04:59:58Z",
      "updated_at": "2020-10-27T04:59:58Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @iSazonov. I conclude the following (I've conducted limited experiments - do tell me if I got something wrong; it still leaves the mystery of @DEberhardt seeing different behavior):\r\n\r\n**Workarounds for _intranet_ paths being treated as _internet_ paths in terms of security, causing refusal to run (policy `RemoteSigned`) / unwanted security prompts (`Unrestricted`):**\r\n\r\n* Note: **If a valid `Zone.Identifier` stream is present in the file targeted, its security zone information takes precedence**; the subsequent bullet points at the same level therefore only apply to files whose `Zone.Identifier` stream is either invalid, set to `-1`, or missing altogether.\r\n\r\n  * `Zone.Identifier` values `3` (`Internet`) and `4` (`Untrusted`), which correspond to the values of the [`SecurityZone` enumeration](https://docs.microsoft.com/en-US/dotnet/api/System.Security.SecurityZone), are what make a given file a _blocked_ one, but note that this stream information is only added  if a download tool _explicitly, by convention_, adds it, which mostly seems limited to _browsers_ (which set the value to `3`). Notably, neither `Invoke-WebRequest -OutFile` nor `Invoke-RestMethod -OutFile` (nor `curl -o`) add this stream, so you will get no warning when executing scripts downloaded this way - it is then only the form of the UNC path that matters, as described below.\r\n\r\n\r\n  * Note that  it is even **possible to use the `Zone.Identifier` value to explicitly mark a file as _safe_, even if it is accessed via a UNC path that would otherwise be considered unsafe**, as described below; that is, if the `Zone.Identifier` is set to `0`, `1`, or `2`, the file is always considered safe.\r\n\r\n* **When using UNC paths, if possible, refer to the server by its short name** (no domain suffix; e.g., `server1`)  instead of a FQDN (e..g, `server1.example.com`). Only then is the path considered to be in the Intranet zone, where files needn't be signed to be executable with either `RemoteSigned` or `Unrestricted` in effect.\r\n\r\n  * Do not use IPv4 or IPv6 addresses or host names with periods (`.`); the only exception is if the IP address refers tot the _local machine_ (loopback address).\r\n\r\n* **Alternatively, map a network drive and use a drive-letter-based path** - any path accessed via a mapped network drive is considered to be in the Intranet zone.\r\n\r\n* **Risky last resort**: Set the execution policy to `Bypass`, if you control it.\r\n\r\nNote that these workarounds aren't always feasible, notably in an organization where `$PROFILE` points to a UNC path based on a FQDN and setting the policy to `Bypass` isn't acceptable - see #7458.\r\n\r\nA **proposed enhancement**, #12336, may bring the ability to whitelist servers as belonging to the intranet zone via `powershell.config.json`.\r\n\r\n",
      "created_at": "2020-10-27T17:08:05Z",
      "updated_at": "2020-11-11T02:57:24Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-10-29T00:00:04Z",
      "updated_at": "2020-10-29T00:00:04Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "This issue has not been answered AFAICT.  There are some workarounds but based on what folks have said here, the workarounds should not be necessary.",
      "created_at": "2020-10-29T00:07:25Z",
      "updated_at": "2020-10-29T00:07:25Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@rkeithhill , but won't implementing the proposal in #12336, which you linked to, resolve the issue?",
      "created_at": "2020-10-29T00:09:24Z",
      "updated_at": "2020-10-29T00:09:24Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "That is yet another workaround.  Based on the algorithm, a UNC path containing `<server-name-with-no-periods>` should cause PowerShell to view the script as coming from the intranet zone.  So a policy of `RemoteSigned` should allow an unsigned script to execute and that is not what the OP sees.\r\n\r\nHmm, now I wonder if PS is seeing the server name as `Microsoft.PowerShell.Core\\Filesystem::\\\\<server-none-fdq-name>`?  ",
      "created_at": "2020-10-29T00:16:40Z",
      "updated_at": "2020-10-29T00:17:07Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "That's an interesting lead - it would explain @DEberhardt's experience, judging by the screen shots.",
      "created_at": "2020-10-29T00:18:31Z",
      "updated_at": "2020-10-29T00:57:39Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Sorry - got myself confused: There must have been a regression between 7.0.3 and 7.1.0-rc.2:\r\n\r\nIn 7.0.3, both `Set-Location \\\\<server-no-fdq-name>\\share; .\\script.ps1` and \r\n`\\\\<server-no-fdq-name>\\share\\script.ps1` work as expected.\r\n\r\nIn 7.1.0-rc.2, neither works.\r\n\r\n",
      "created_at": "2020-10-29T00:38:52Z",
      "updated_at": "2020-10-29T00:48:21Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Looks like a simple logic bug was introduced that accidentally reversed the logic:\r\n\r\nThe line that @iSazonov  linked to:\r\n\r\n```powershell\r\nreturn hostName.IndexOf('.') == -1 ? SecurityZone.Intranet : SecurityZone.Internet;\r\n```\r\n\r\nwas incorrectly simplified to:\r\n\r\n```powershell\r\nreturn hostName.Contains('.') ? SecurityZone.Intranet : SecurityZone.Internet;\r\n```\r\n\r\nwhereas it should be the inverse:\r\n\r\n```powershell\r\nreturn hostName.Contains('.') ? SecurityZone.Internet : SecurityZone.Intranet;\r\n```\r\n\r\n\r\n",
      "created_at": "2020-10-29T02:14:53Z",
      "updated_at": "2020-10-29T02:15:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@rkeithhill A question in the issue was about Unblock-File and answer - user should use policy. Common problem we will continue to discuss in #12336.",
      "created_at": "2020-10-29T03:42:58Z",
      "updated_at": "2020-10-29T03:42:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Looks like a simple logic bug was introduced that accidentally reversed the logic\r\n\r\nThanks! It was typo in cleanup commit.",
      "created_at": "2020-10-29T03:43:42Z",
      "updated_at": "2020-10-29T03:43:42Z"
    },
    {
      "author": "DEberhardt",
      "author_association": "NONE",
      "body": "Woohoo, we found a bug and quashed it :)\r\nInteresting. Haven\u2019t seen the ternary operator in action yet\r\nThanks, this is very educational.\r\n\r\nTo summarise:\r\n- Unblock file works (actually I have not verified the change but prior of running the command, but as we found a bug elsewhere, should I test it still?)\r\n- effect of Unblock file can be verified (will add to my toolbox :))\r\n- Servername with Fqdn (I.e. containing \u2018.\u2019) should now be classed as *Internet zone* and should be flagged with the exception if the file is not unblocked first.\r\n- Servernames without a dot should be identified as *Intranet zone* and work with RemoteSigned without needing to unblock (cheers)\r\n- Set-Location (what I used) should also work now.\r\n\r\nWill this make it i to 7.1-rc3 ?\r\n\r\nThanks,\r\nDavid\r\n\r\n\r\n\r\nBest regards,\r\nDavid\r\n\r\nApologies for the brief nature of this email as it has been sent from my phone.",
      "created_at": "2020-10-29T09:41:13Z",
      "updated_at": "2020-10-30T11:43:20Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@DEberhardt \r\n\r\n> Unblock file works (actually I have not verified the change but prior of running the command, but as we found a bug elsewhere, should I test it still?)\r\n> effect of Unblock file can be verified (will add to my toolbox :))\r\n\r\nYes, it works, but if you want to play with it yourself, you can easily simulate blocked files with something like the following:\r\n\r\n```powershell\r\n\"[ZoneTransfer]`nZoneId=3\" | Set-Content script.ps1 -Stream Zone.Identifier\r\n```\r\n\r\nExecution should then be refused / trigger a prompt with `RemoteSigned` / `Unrestricted`.\r\n\r\nCalling `Unblock-File` on that file should implicitly make it safe, _unless_ it is called via a UNC path with `.` in the server name.\r\n\r\nA successful `Unblock-File` call clears the `Zone.Identifier` stream, so that the querying the stream should then fail:\r\n\r\n```\r\nGet-Content: Could not open the alternate data stream 'Zone.Identifier' of the file '...\\script.ps1'.\r\n```\r\n\r\n> - Servername with Fqdn (I.e. containing \u2018.\u2019) should now be classed as *Internet zone* and should be flagged with the exception if the file is not unblocked first.\r\n\r\nYes, re considering them to be the unsafe `Internet` zone, but note that unblocking alone is _not_ enough in this case.\r\nOnly using a mapped drive or a \"non-dotted\" server name will allow you to run an unblocked file from that location.\r\n\r\nConversely, you _could_ use the `Zone.Identifier` stream to explicitly mark a file as _safe_, namely if you set it to `0`, `1`, or `2`, which would then allow the file to run even when accessed with a UNC path based on a \"dotted\" server name, but I'm not sure that's a good approach.\r\n\r\n>  Servernames without a dot should be identified as *Intranet zone* and work with RemoteSigned without needing to unblock \r\n\r\nYou _do_ need to unblock in this case, because the `Zone.Identifier` information always takes precedence (except in the unlikely event that it is set to `-1` (`NoZone`)).\r\n\r\nNote that a file gets only blocked if a download tool explicitly, by convention, adds the `Zone.Identifier` information, which mostly seems limited to _browsers_.\r\n\r\nI've updated the [summary above](https://github.com/PowerShell/PowerShell/issues/13869#issuecomment-717390248) to reflect the latest understanding, let me know if something is still unclear.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2020-10-29T16:23:15Z",
      "updated_at": "2020-10-29T16:23:15Z"
    },
    {
      "author": "DEberhardt",
      "author_association": "NONE",
      "body": "Thank you @mklement0 - I will play around with Security Identifiers, if only to understand them better \ud83d\ude04 \r\nThe confusing bit for me was who decided that the `Zone.Identifier` would be there in the first place (browsers).\r\nWhen reading up on signing of my Module, I learned to only sign the .psm1 file, not all linked .ps1 files (as it would impact performance), so I wondered why they'd still work if not signed. With your explanation I can now deduct that as they were installed through PowerShell with `Install-Module` they are local files and have not been set the identifier. Thank you for clearing that up.\r\n\r\nThis is sufficiently answered for me and the Fix is being progressed; I think we can put this issue to rest \ud83d\ude03 ",
      "created_at": "2020-10-30T11:50:43Z",
      "updated_at": "2020-10-30T11:51:38Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Glad to hear it, @DEberhardt.\r\n\r\nRe `Install-Module`: note that the enclosing module, `PowerShellGet`, has its own, independent security mechanism:\r\n\r\nWhether you get a warning depends on whether the originating repository, as a whole, is considered _trusted_, as reflected in the `InstallationPolicy` column in the output from `Get-PSRepository`, and if and when a download is allowed, the files do _not_ have a `Zone.Identifier` stream, as you've observed.\r\n\r\n",
      "created_at": "2020-10-30T18:12:25Z",
      "updated_at": "2020-10-30T18:12:25Z"
    }
  ],
  "created_at": "2020-10-25T13:14:07Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered",
    "WG-Security"
  ],
  "number": 13869,
  "state": "closed",
  "title": "Execution Policy RemoteSigned interpreted differently in pwsh7.1 / Unblock-File does not work",
  "updated_at": "2020-11-11T02:57:24Z"
}