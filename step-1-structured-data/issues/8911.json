{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8911",
  "author": "mklement0",
  "body": "# Summary of the performance problem\r\n\r\n<sup>Note: [This SO question](https://stackoverflow.com/q/42138296/45375) inspired this suggestion.</sup>\r\n\r\n_Updated based on feedback from @lzybkr  below_.\r\n\r\n```powershell\r\n# REGULAR, direct invocation of an expression (a `foreach` statement \r\n# that loops 1 million (1e6) times, in this case) - implicitly DOT-SOURCED\r\n(Measure-Command { $result = foreach ($n in 1..1e6) { $n } }).TotalSeconds\r\n\r\n# Invocation in CHILD SCOPE, using & { ... }\r\n# 10+ TIMES FASTER.\r\n(Measure-Command { $result = & { foreach ($n in 1..1e6) { $n } } }).TotalSeconds\r\n```\r\n\r\nSample timings (note the ratio) on macOS:\r\n\r\n```powershell\r\n2.5900995  # DIRECT invocation (implicitly DOT-SOURCED)\r\n0.2580877  # in CHILD SCOPE, via & { ... }\r\n```\r\n\r\nThat is, **direct invocation was about _10 times slower_ than invocation via `&`**.\r\n\r\n# Possible implementation\r\n\r\nSee [@lzybkr's comments below](https://github.com/PowerShell/PowerShell/issues/8911#issuecomment-464954324), which also explains the root cause.",
  "closed_at": null,
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "That analysis is incorrect. The difference is dot sourcing.\r\n\r\nTry this for comparison:\r\n\r\n```powershell\r\n$cmdtest = {\r\n    $stream = [System.IO.StreamWriter] $args[0]\r\n    $i = 0\r\n    while ($i -le 1000000) {\r\n        $stream.WriteLine(\"This is the line number: $i\")\r\n        $i++\r\n    }\r\n    $stream.Close()\r\n}\r\n\r\nMeasure-Command {\r\n    & $cmdtest \"$PSScriptRoot\\t_i.txt\"\r\n} # takes ~1 sec\r\n\r\nMeasure-Command {\r\n    . $cmdtest \"$PSScriptRoot\\t_d.txt\"\r\n} # takes ~4 sec\r\n\r\nMeasure-Command {\r\n    Invoke-Command -ScriptBlock $cmdtest -Arg \"$PSScriptRoot\\t_icm.txt\"\r\n} # Takes ~1 second\r\n```\r\n\r\nThe basic problem is doing a dictionary lookup for every variable reference when dot sourcing.\r\n\r\nA fix is possible but a little tricky. You can cache the `PSVariable` that the lookup finds, but:\r\n1. The cache entry should be a weak reference\r\n2. If the weak reference is still alive, you still need to check if the variable was removed (e.g. with `Remove-Variable`).\r\n\r\nThe cache should be indexed by a small integer in the same way that regular (not dot sourced) variables are.",
      "created_at": "2019-02-19T02:28:54Z",
      "updated_at": "2019-02-19T02:28:54Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @lzybkr - I've updated the issue title and OP accordingly.\r\n\r\n",
      "created_at": "2019-02-19T02:51:20Z",
      "updated_at": "2019-02-19T02:51:20Z"
    }
  ],
  "created_at": "2019-02-18T19:43:06Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine",
    "WG-Engine-Performance"
  ],
  "number": 8911,
  "state": "open",
  "title": "Performance problem: (implicitly) dot-sourced code is slowed down by variable lookups",
  "updated_at": "2019-04-03T14:00:55Z"
}