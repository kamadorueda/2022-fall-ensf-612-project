{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2600",
  "author": "SteveL-MSFT",
  "body": "Get-PSPesterFailure will parse the Pester log from start-pspester and extract the failures as objects\r\nFormat-PSPesterFailure will format the failures similar to output from Pester (you can use directly without Get-PSPesterFailure)",
  "closed_at": "2016-11-18T16:46:46Z",
  "comments": [
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "Hi **@SteveL-MSFT**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    <p>\n        It looks like you're a Microsoft contributor (Steve Lee (POWERSHELL)). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    </p>\n\nTTYL, MSBOT;\n",
      "created_at": "2016-11-03T20:41:49Z",
      "updated_at": "2016-11-03T20:41:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "LGTM.\n(Maybe add in docs how to use this?)\n",
      "created_at": "2016-11-08T05:59:16Z",
      "updated_at": "2016-11-08T06:21:26Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov good suggestion, I'll add something to the existing testing guidelines\n",
      "created_at": "2016-11-08T17:34:01Z",
      "updated_at": "2016-11-08T17:34:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "In future, it would be good to use it to reduce logs on appveyor and travis-ci to only display failed tests.\n",
      "created_at": "2016-11-15T06:41:42Z",
      "updated_at": "2016-11-15T06:41:42Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "Only query that I would has is should these functions be added to the PowerShell repo or would it make more sense that they be added directly into Pester?\n\nMy rational behind adding to Pester is that I can see use cases for them being used outside of just testing the PowerShell Code base so to me it would make more sense for these to be added to Pester.\n",
      "created_at": "2016-11-15T07:28:22Z",
      "updated_at": "2016-11-15T07:28:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@kilasuit Your proposal looks very good. I think it would be better to create a Issue in Pester repo and don't block this PR.\n",
      "created_at": "2016-11-16T04:01:14Z",
      "updated_at": "2016-11-16T04:01:14Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov - As much as I agree with your suggestion, I do feel that the onus to do so would lie with @SteveL-MSFT considering that this is his PR & his code etc etc\n",
      "created_at": "2016-11-17T02:01:17Z",
      "updated_at": "2016-11-17T02:01:17Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@kilasuit I created https://github.com/pester/Pester/issues/645 as a feature request to Pester.  I think this could be solved in a number of ways and this PR was specifically to solve a problem I encountered where we have a large number of tests for PowerShell (and growing!) and needed an easy way to just see the failures so I can investigate before pushing my changes\n",
      "created_at": "2016-11-17T16:58:10Z",
      "updated_at": "2016-11-17T16:58:10Z"
    },
    {
      "author": "nohwnd",
      "author_association": "NONE",
      "body": "Is this the best way to do it? \n\nI think you are tapping too late in the pipeline. The pipeline is something like this (pseudo code): \n`Invoke-Pester -PassThrough | Out-NUnitXml | Store-Xml | Parse-NUnitXml | Filter-Failures | Print-Fails` \n\nYou are at the end, looking at the nUnit report in XML. Instead you can tap into the pipeline right after Invoke-Pester. Get the results as a PSObject (`-PassThru`), filter test results to failures with Where, and then either use your print functions, or reuse the internal Pester print functions.\n\n``` powershell\n#store the results in a variable\n$results = invoke-pester -passthru\n\n#get first successful result (you'd do -ne \"Success\")\n$result = $results.TestResult | Where {$_.Result -eq \"Passed\"} | Select -first 1 \n\n#get reference to internal Pester print function\n#(see output.ps1 in Pester, for other output functions)\n$writePesterResult = &(Get-Module Pester) {Get-Command Write-PesterResult}\n\n#print the result \n&$writePesterResult $result\n#outputs:  [+] adds positive numbers 44ms\n```\n\nOr just wait for us to put it directly in Pester. \ud83d\ude03 I just wanted to highlight what is in my opinion a better way to approach this problem.\n",
      "created_at": "2016-11-18T09:26:32Z",
      "updated_at": "2016-11-18T09:32:29Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@nohwnd I think you're right, we can close this PR and wait for pester/Pester#645\n",
      "created_at": "2016-11-18T16:46:46Z",
      "updated_at": "2016-11-18T16:46:46Z"
    }
  ],
  "created_at": "2016-11-03T20:41:44Z",
  "number": 2600,
  "state": "closed",
  "title": "Added cmdlets to get Pester failures",
  "updated_at": "2016-11-18T16:46:46Z"
}