{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12965",
  "author": "IanKemp",
  "body": "## Steps to reproduce\r\n\r\nPaste the following into a PS 7.0.2 window **(line endings must be `\\n` NOT `\\r\\n`**):\r\n\r\n```powershell\r\n    @{\r\n        \"Microsoft.Azure.Functions.JavaWorker\" = \"https://ci.appveyor.com/NuGet/azure-functions-java-worker-fejnnsvmrkqg\";\r\n        \"Microsoft.Azure.Functions.NodeJsWorker\" = \"https://ci.appveyor.com/nuget/azure-functions-nodejs-worker-0fcvx371y52p\";\r\n        \"Microsoft.Azure.Functions.PowerShellWorker\" = \"https://ci.appveyor.com/nuget/azure-functions-powershell-wor-0842fakagqy6\";\r\n        \"Microsoft.Azure.WebJobs.Script.WebHost\" = \"https://ci.appveyor.com/NuGet/azure-webjobs-sdk-script-g6rygw981l9t\";\r\n    } |% getEnumerator | %{\r\n        $result = Invoke-Expression -Command \".\\NuGet list $($_.key) -Source $($_.value) -PreRelease\"\r\n        $latestVersion = $result.Split()[1]\r\n        Write-host \"Adding $($_.key) to project\" -ForegroundColor Green\r\n        #Invoke-Expression -Command \"dotnet add package $($_.key) -v $latestVersion -s $($_.value)\"\r\n    }\r\n```\r\n\r\n## Expected behavior\r\n\r\nScript block is accepted as-is.\r\n\r\n## Actual behavior\r\n\r\nScript block is horribly mangled:\r\n\r\n```powershell\r\nPS C:\\Users\\iank\\source\\repos\\_GitHub\\Azure\\azure-functions-core-tools\\src\\Azure.Functions.Cli>     }                   >>         #Invoke-Expression -Command \"dotnet add package $($_.key) -v $latestVersion -s $($_.value)\"                  >>         Write-host \"Adding $($_.key) to project\" -ForegroundColor Green                                              >>         $latestVersion = $result.Split()[1]                                                                          >>         $result = Invoke-Expression -Command \".\\NuGet list $($_.key) -Source $($_.value) -PreRelease\"                >>     } |% getEnumerator | %{                                                                                          >>         \"Microsoft.Azure.WebJobs.Script.WebHost\" = \"https://ci.appveyor.com/NuGet/azure-webjobs-sdk-script-g6rygw981l9t\";                                                                                                                    >>         \"Microsoft.Azure.Functions.PowerShellWorker\" = \"https://ci.appveyor.com/nuget/azure-functions-powershell-wor-0842fakagqy6\";                                                                                                          >>         \"Microsoft.Azure.Functions.NodeJsWorker\" = \"https://ci.appveyor.com/nuget/azure-functions-nodejs-worker-0fcvx371y52p\";                                                                                                               >>         \"Microsoft.Azure.Functions.JavaWorker\" = \"https://ci.appveyor.com/NuGet/azure-functions-java-worker-fejnnsvmrkqg\";                                                                                                                   >>     @{\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/1726434/84669486-d377a480-af1c-11ea-93ea-8eb297f0eea3.png)\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.2\r\nPSEdition                      Core\r\nGitCommitId                    7.0.2\r\nOS                             Microsoft Windows 10.0.19041\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n## Note\r\n\r\nSame behaviour occurs in PS 5.1.\r\nISE works fine.",
  "closed_at": "2020-06-18T00:00:10Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "This isn't a PowerShell issue; from memory, if you unload PSReadLine it stops appearing. That said, however, it also depends entirely on where you're copying from & how you're pasting. I'm not seeing it currently, having copied the code from the issue body.\r\n\r\nTypically I've seen this be an issue with apps like Floobits and a few other Electron apps. It was happening with Teams as well for a while, I think, but Teams managed to fix it on their end.\r\n\r\nSee https://github.com/PowerShell/PSReadLine/issues/829, https://github.com/PowerShell/PSReadLine/issues/496#issuecomment-338515707 (decent analysis of probable cause), and https://github.com/PowerShell/PSReadLine/issues/579 (proposed as one of the more complete fixes that's been brought up so far).",
      "created_at": "2020-06-15T17:13:13Z",
      "updated_at": "2020-06-15T17:13:13Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "As per the suggestions in https://github.com/PowerShell/PSReadLine/issues/829, using `Ctrl+V` to paste works better.",
      "created_at": "2020-06-15T19:13:10Z",
      "updated_at": "2020-06-15T19:13:10Z"
    },
    {
      "author": "IanKemp",
      "author_association": "NONE",
      "body": "> This isn't a PowerShell issue; from memory, if you unload PSReadLine it stops appearing.\r\n\r\nSaying \"this is an issue with PSReadLine, not PowerShell\" is technically correct, but not helpful. Since PSReadLine is a default PS module since v3, it is de facto part of PowerShell. The fact this issue was reported over 3 years ago (and re-reported multiple times since) in the PSReadLine repo, but is not yet fixed, rather dents my confidence in PowerShell.\r\n\r\nHaving sub-repos for different subsystems is fine. Having those sub-repos be places where bug reports go to die, is not.\r\n\r\n>  That said, however, it also depends entirely on where you're copying from & how you're pasting. I'm not seeing it currently, having copied the code from the issue body.\r\n>\r\n> Typically I've seen this be an issue with apps like Floobits and a few other Electron apps. It was happening with Teams as well for a while, I think, but Teams managed to fix it on their end.\r\n\r\nI'm copying from a .ps1 file in Notepad++, that uses `\\n` for line endings.\r\n\r\n> See [PowerShell/PSReadLine#829](https://github.com/PowerShell/PSReadLine/issues/829), [PowerShell/PSReadLine#496 (comment)](https://github.com/PowerShell/PSReadLine/issues/496#issuecomment-338515707) (decent analysis of probable cause), and [PowerShell/PSReadLine#579](https://github.com/PowerShell/PSReadLine/issues/579) (proposed as one of the more complete fixes that's been brought up so far).\r\n\r\n`Remove-PSReadlineKeyHandler Ctrl+Enter` pastes in the correct order, but eats newlines making the resultant code non-executable anyway, so... not very helpful.\r\n\r\n> As per the suggestions in [PowerShell/PSReadLine#829](https://github.com/PowerShell/PSReadLine/issues/829), using `Ctrl+V` to paste works better.\r\n\r\nThis happens regardless of the method I use to paste (Ctrl+V or mouse right-click).",
      "created_at": "2020-06-16T10:41:13Z",
      "updated_at": "2020-06-16T10:41:13Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "The reason I say it's from PSReadLine and not PowerShell is because PSReadLine is managed from an entirely separate repository, so there's a limited amount of things folks in this repo can do directly, that's all. \ud83d\ude42 \r\n\r\nI'd recommend you copy that information to one of those other threads I linked, especially if you're still seeing it with Ctrl+V to paste. I'd hazard a guess that it might also be related to which terminal you use, so that info could be helpful too. ^^",
      "created_at": "2020-06-16T14:19:23Z",
      "updated_at": "2020-06-16T14:19:23Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-06-18T00:00:09Z",
      "updated_at": "2020-06-18T00:00:09Z"
    }
  ],
  "created_at": "2020-06-15T14:31:44Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 12965,
  "state": "closed",
  "title": "Pasted script block is horribly mangled (appears to be reversed)",
  "updated_at": "2020-06-18T00:00:10Z"
}