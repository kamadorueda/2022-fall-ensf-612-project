{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11642",
  "author": "tats-u",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n \r\nMaybe related: #1908 \r\n\r\nIt's not a good status that there's no way to convert UTF-16 LE (or other variable-length binary encodings) stream of external programs to string with correct encodings or bytes as-is via pipe.\r\n\r\n```\r\n# maybe corrupsed when native locale is not English or ANSI encoding has not been switched to UTF-8\r\n$description = & \"${env:ProgramFiles(x86)}\\Microsoft Visual Studio\\Installer\\vswhere.exe\" -property description -utf8\r\n```\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\ncmd /c \"echo \u6f22\u5b57\"\r\ncmd /u /c \"echo \u6f22\u5b57\"\r\nchcp\r\n$success = cmd /c \"echo \u6f22\u5b57\"\r\necho $success\r\n$fails = cmd /u /c \"echo \u6f22\u5b57\"\r\necho $fails\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\n\u6f22\u5b57\r\n\u6f22\u5b57\r\nActive code page: 65001\r\n\u6f22\u5b57\r\n\u6f22\u5b57\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\n\u6f22\u5b57\r\n\u6f22\u5b57\r\nActive code page: 65001\r\n\u6f22\u5b57\r\n\"oW[\r\n\r\n\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.3\r\nPSEdition                      Core\r\nGitCommitId                    6.2.3\r\nOS                             Microsoft Windows 10.0.19041\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nI hope there will be like:\r\n\r\n```\r\n$description = & \"${env:ProgramFiles(x86)}\\Microsoft Visual Studio\\Installer\\vswhere.exe\" -property description -utf8 | [[[ConvertFrom-RawStream]]] -Encoding UTF8\r\n$kanji = cmd /u /c \"echo \u6f22\u5b57\" | [[[ConvertFrom-RawStream]]] -Encoding Unicode\r\n```\r\n",
  "closed_at": "2020-01-23T15:30:41Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Does setting `[Console]::OutputEncoding` to a Unicode encoding not allow PS to read the incoming text properly? \ud83e\udd14 ",
      "created_at": "2020-01-21T13:47:27Z",
      "updated_at": "2020-01-21T13:47:27Z"
    },
    {
      "author": "tats-u",
      "author_association": "NONE",
      "body": "```\r\nPowerShell 6.2.3\r\n\r\nhttps://aka.ms/pscore6-docs\r\nType 'help' to get help.\r\n\r\nLoading personal and system profiles took 3772ms.\r\n tatsu@TATSU-NB-3RD \ue0b0 \ue606 base \ue0b0 ~ \ue0b0 [Console]::OutputEncoding\r\n\r\nPreamble          :\r\nBodyName          : utf-8\r\nEncodingName      : Unicode (UTF-8)\r\nHeaderName        : utf-8\r\nWebName           : utf-8\r\nWindowsCodePage   : 1200\r\nIsBrowserDisplay  : True\r\nIsBrowserSave     : True\r\nIsMailNewsDisplay : True\r\nIsMailNewsSave    : True\r\nIsSingleByte      : False\r\nDecoderFallback   : System.Text.DecoderReplacementFallback\r\nIsReadOnly        : False\r\nCodePage          : 65001\r\n\r\n\r\n tatsu@TATSU-NB-3RD \ue0b0 \ue606 base \ue0b0 ~ \ue0b0 [System.Text.Encoding]::UTF8\r\n\r\nPreamble          :\r\nBodyName          : utf-8\r\nEncodingName      : Unicode (UTF-8)\r\nHeaderName        : utf-8\r\nWebName           : utf-8\r\nWindowsCodePage   : 1200\r\nIsBrowserDisplay  : True\r\nIsBrowserSave     : True\r\nIsMailNewsDisplay : True\r\nIsMailNewsSave    : True\r\nIsSingleByte      : False\r\nEncoderFallback   : System.Text.EncoderReplacementFallback\r\nDecoderFallback   : System.Text.DecoderReplacementFallback\r\nIsReadOnly        : True\r\nCodePage          : 65001\r\n\r\n\r\n```\r\n\r\nSeems not to have a problem on this.  This also happens on Legacy PowerShell (5.1).",
      "created_at": "2020-01-21T15:57:44Z",
      "updated_at": "2020-01-21T15:57:44Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32  is correct in principle: `[Console]::OutputEncoding` is the encoding PowerShell uses to decode output from external programs such as `cmd`.\r\n\r\nIf you use `cmd /u` (for \"Unicode\", i.e. UTF-16LE output), you'd have to use\r\n `[Console]::OutputEncoding = [Text.Encoding]::Unicode`\r\n\r\nUnfortunately, doing so doesn't work in v6.2.3, due a bug that has since been fixed (since v7.0.0-preview.6): #10789\r\n",
      "created_at": "2020-01-23T02:37:50Z",
      "updated_at": "2020-01-23T02:37:50Z"
    },
    {
      "author": "tats-u",
      "author_association": "NONE",
      "body": "Worked in Legacy 5.1.\r\nI wonder why `[Console]::OutputEncoding` must be changed for pipe in PowerShell even though don't have to for direct output.",
      "created_at": "2020-01-23T05:34:46Z",
      "updated_at": "2020-01-23T05:35:06Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "The _bug_ wasn't there in 5.1, but you still had to change `[Console]::OutputEncoding` to match the command's output encoding; e.g.:\r\n\r\n```powershell\r\n# Does NOT work by default - note the extra \"spaces\" representing NULs\r\nPS> $out = cmd /u /c echo hi; $out\r\nh i\r\n```",
      "created_at": "2020-01-23T13:26:02Z",
      "updated_at": "2020-01-23T13:26:21Z"
    },
    {
      "author": "tats-u",
      "author_association": "NONE",
      "body": "@mklement0 Of course.  What I said means that Legacy PowerShell (and future PowerShell 7) can convert output from `cmd /u` to string correctly **as long as** `[Console]::Output` has been changed , and that I don't know why `cmd /c \"echo \u6f22\u5b57\"; cmd /u /c \"echo \u6f22\u5b57\"` succeeds without doing else  but `$success = cmd /c \"echo \u6f22\u5b57\"; $fails = cmd /u /c \"echo \u6f22\u5b57\"` doesn't without changing `[Console]::OutputEncoding` before `cmd /u`?",
      "created_at": "2020-01-23T15:25:31Z",
      "updated_at": "2020-01-23T15:25:31Z"
    },
    {
      "author": "tats-u",
      "author_association": "NONE",
      "body": "This issue can be divided into a fixed bug (only in development version) and a missing feature, so I'll close this and make one for the latter as a feature request later.",
      "created_at": "2020-01-23T15:30:41Z",
      "updated_at": "2020-01-23T15:30:41Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Yes, the bug is specific to 6.x.\r\n\r\n`cmd /u /c \"echo \u6f22\u5b57\"` works (if you have the right font selected), because it prints _directly to the console_, presumably using the Unicode version of the [`WriteConsole` WinAPI function](https://docs.microsoft.com/en-us/windows/console/writeconsole) - PowerShell passes the output _through_, and performs _no decoding_.\r\n\r\nIn other words: the need to set `[Console]::OutputEncoding`  only arises if you _capture, pipe, or redirect_ the external program's output.",
      "created_at": "2020-01-23T15:33:24Z",
      "updated_at": "2020-01-23T15:38:25Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Given the explanation above, do you still think there is a missing feature?\r\n\r\nIf you want to _interpret_ the output from an external program _as text_, there is no way around telling PowerShell what the source character encoding is - I don't think we should be employing heuristics there.\r\n",
      "created_at": "2020-01-23T15:35:13Z",
      "updated_at": "2020-01-23T15:35:13Z"
    },
    {
      "author": "tats-u",
      "author_association": "NONE",
      "body": "1. Can't PowerShell tell whether external programs output text via `WriteConsoleW` or `WriteConsoleA`?\r\n2. If not, Does PowerShell try to reinterpret UTF-16 LE `wchar_t*` text from `WriteConsoleW` to multibyte `char*` text encoded in `OutputEncoding`, and convert it to UTF-16 LE string (PowerShell native string) according to `OutputEncoding` again?",
      "created_at": "2020-01-24T04:10:36Z",
      "updated_at": "2020-01-24T04:13:51Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "`WriteConsole()` is truly just for writing to the _console_ (from the linked docs):\r\n\r\n> WriteConsole fails if it is used with a standard handle that is redirected to a file. [...]\r\n If the handle is a console handle, call WriteConsole. If the handle is not a console handle, the output is redirected and you should call WriteFile to perform the I/O.\r\n\r\nThat is, it doesn't apply in the capture/redirect/pipe case. \r\n\r\nAlso, more generally, not all console programs can be assumed to use the WinAPI, and there's no telling from the outside how a given console program is implemented.\r\n\r\nGenerally, console programs (when not printing directly to the screen), are expected to use the active code page's encoding, as reflected in the output of `chcp.com` and in `[Console]::OutputEncoding`.\r\n\r\nIf a given program uses a different encoding (as is the case when you use `cmd /u ...`), you need to (temporarily) set  `[Console]::OutputEncoding` to that encoding in order for PowerShell to interpret the output correctly.",
      "created_at": "2020-01-25T03:10:14Z",
      "updated_at": "2020-01-25T03:10:14Z"
    },
    {
      "author": "tats-u",
      "author_association": "NONE",
      "body": "`WriteConsole` is more complex than I thought.  Thank you for detailed explanation.  Anyway, I have to write:\r\n\r\n```powershell\r\n$enc = [Console]::OutputEncoding\r\n[Console]::OutputEncoding = [Text.Encoding]::Unicode\r\n$result = cmd /u /c \"foo bar\"\r\n[Console]::OutputEncoding = $enc\r\n```\r\n\r\nI wish it were just one line.",
      "created_at": "2020-01-25T05:50:31Z",
      "updated_at": "2020-01-25T05:50:31Z"
    }
  ],
  "created_at": "2020-01-21T10:06:31Z",
  "labels": [
    "Issue-Question"
  ],
  "number": 11642,
  "state": "closed",
  "title": "UTF-16 pipe => string (or string[]) variable corrupsed",
  "updated_at": "2020-01-25T05:50:31Z"
}