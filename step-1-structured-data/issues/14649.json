{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14649",
  "author": "daxian-dbw",
  "body": "# PR Summary\r\n\r\nUpdate the `ICommandPredictor` interface APIs to allow a predictor to get feedback about what suggestions from it were displayed to the user, and also make it easier for a predictor to corelate feedback events.\r\n\r\n1. Add `ICommandPredictor.OnSuggestionDisplayed`, to let a predictor know what results were displayed to the user when rendering the results: `void OnSuggestionDisplayed(uint session, int countOrIndex);`\r\n    - The `countOrIndex` parameter can help a predictor to tell if the display was in `ListView` or `InlineView`:\r\n       - When the value is `> 0`, it's the number of displayed suggestions from the list returned in <see cref=\"session\"/>, starting from the index 0. This indicates the `ListView` is in use.\r\n       - When the value is `<= 0`, it means a single suggestion from the list got displayed, and the index is the absolute value. This indicates the `InlineView` is in use.\r\n\r\n2. Add `clientId` and `session` parameters to the existing interface APIs. The `clientId` parameter helps a predictor to know what host client is calling it (`PSReadLine` only today, but it could be the PS VSCode extension some day in future); the `session` parameter helps a predictor to corelate feedback events.\r\n    - `GetSuggestion` and `StartEarlyProcessing` both take a `string` parameter `clientId`, so it knows the client that makes the call\r\n    - `GetSuggestion` returns a `uint` type `session` value, along with the list of suggestion entries it provides.\r\n    - `OnSuggestionDisplayed` and `OnSuggestionAccepted` both take a `uint` parameter `session`, which indicates where the displayed or accepted suggestions were from.\r\n\r\n/cc @kceiw\r\n\r\nThis PR also includes a few changes to the scripts that generate PowerShell SDK NuGet packages, to make it works properly with the other changes from this PR, and also make NuGet packages include the XML document files.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [x] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [x] Experimental feature name(s): `PSSubsystemPluginModel`\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: No need to update PowerShell docs. It affect the XML documentation only.\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2021-02-04T23:34:18Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@rjmholt and @anmenaga this PR is ready, please help review it, thank!\r\n@kceiw I will appreciate it if you can review this PR as well.",
      "created_at": "2021-02-01T19:22:19Z",
      "updated_at": "2021-02-01T19:22:19Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@anmenaga Thanks for the review!\r\nThere is no need to update PowerShell docs. The `PSSubsystemPluginModel` experimental feature is only mentioned here: https://docs.microsoft.com/en-us/powershell/scripting/learn/experimental-features?view=powershell-7.1#pssubsystempluginmodel, and it doesn't talk about specific APIs. We only need to update the XML document for the APIs, which is done by the updates to `packaging.psm1`.\n\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/scripting/learn/experimental-features\">Using Experimental Features in PowerShell - PowerShell</a></strong></div><div>Lists the currently available experimental features and how to use them.</div></blockquote>",
      "created_at": "2021-02-04T18:48:15Z",
      "updated_at": "2021-02-04T18:48:17Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.2.0-preview.3` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0-preview.3)\n",
      "created_at": "2021-02-12T02:07:16Z",
      "updated_at": "2021-02-12T02:07:16Z"
    }
  ],
  "created_at": "2021-01-21T23:18:41Z",
  "number": 14649,
  "state": "closed",
  "title": "Update the `ICommandPredictor` to provide more feedback and also make feedback easier to be corelated",
  "updated_at": "2021-02-12T02:07:16Z"
}