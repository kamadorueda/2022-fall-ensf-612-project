{
  "_url": "https://github.com/PowerShell/PowerShell/issues/953",
  "author": "andschwa",
  "body": "This allows:\n\n``` powershell\n> [Microsoft.PowerShell.CoreCLR.AssemblyExtensions]::GetAssemblies().GetTypes()\n\nIsPublic IsSerial Name                                     BaseType\n-------- -------- ----                                     --------\nTrue     False    PSConsoleReadLine                        System.Object\nTrue     True     TokenClassification                      System.Enum\n...\n\n> [Microsoft.PowerShell.CoreCLR.AssemblyExtensions]::GetAssemblyLoadContext() | Get-Member\n\n   TypeName: System.Management.Automation.PowerShellAssemblyLoadContext\n\nName                       MemberType Definition\n----                       ---------- ----------\nResolving                  Event      System.Func`3[System.Runtime.Loader.AssemblyLoadContext,System.Reflection.AssemblyName,System.Reflection.Assembly] Resolving(S...\nUnloading                  Event      System.Action`1[System.Runtime.Loader.AssemblyLoadContext] Unloading(System.Runtime.Loader.AssemblyLoadContext)\nEquals                     Method     bool Equals(System.Object obj)\nGetHashCode                Method     int GetHashCode()\nGetType                    Method     type GetType()\nLoadFromAssemblyName       Method     System.Reflection.Assembly LoadFromAssemblyName(System.Reflection.AssemblyName assemblyName)\nLoadFromAssemblyPath       Method     System.Reflection.Assembly LoadFromAssemblyPath(string assemblyPath)\nLoadFromNativeImagePath    Method     System.Reflection.Assembly LoadFromNativeImagePath(string nativeImagePath, string assemblyPath)\nLoadFromStream             Method     System.Reflection.Assembly LoadFromStream(System.IO.Stream assembly), System.Reflection.Assembly LoadFromStream(System.IO.Stre...\nSetProfileOptimizationRoot Method     void SetProfileOptimizationRoot(string directoryPath)\nStartProfileOptimization   Method     void StartProfileOptimization(string profile)\nToString                   Method     string ToString()\n\n```\n\nThese are very useful. However, this change is a public API exposure, and so\nshould be documented and go through whatever process is necessary.\n\nThis also needs tests.\n\n/cc @BrucePay @daxian-dbw\n\n<!-- Reviewable:start -->\n\n---\n\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"35\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/powershell/powershell/953)\n\n<!-- Reviewable:end -->\n",
  "closed_at": "2016-05-16T17:47:23Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "There is no need to expose 'GetAssemblyLoadContext' since user can get the current default ALC by [AssemblyLoadContext]::Default.\nGetAssemblies() should not be exposed publicly. This method won't behave as expected since AssemblyLoadContext has made the following loading methods public:\n\"LoadFromAssemblyPath\"\n\"LoadFromNativeImagePath\"\n\"LoadFromStream\"\nThe assemblies loaded by those methods won't go through our resolution logic and won't be recorded in our assembly cache, so \"GetAssemblies\" won't return them, which is against what the user expects.\n\nActually, making those assembly loading methods public without providing \"GetAssemblies\" in .NET Core is a disaster to us. Our design of the \"GetAssemblies\" method is broken.\n",
      "created_at": "2016-05-09T19:08:34Z",
      "updated_at": "2016-05-09T19:08:34Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@daxian-dbw If that's the case, wouldn't we also want to remove `public static Assembly LoadFrom(string assemblyFile)`, as a user could just access `LoadFromAssemblyPath` via `[AssemblyLoadContext]::Default`?\n\nIf we don't expose the `GetAssemblies` facade, how can we make @BrucePay's scenario work?\n",
      "created_at": "2016-05-09T19:36:19Z",
      "updated_at": "2016-05-09T19:36:31Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The \"LoadFrom\" goes through our assembly resolution logic, so whatever assemblies loaded by it will be in our cache, so the types in the assembly can be discovered by powershell.\n\n[AssemblyLoadContext]::Default.LoadFromAssemblyPath used to be \"protected\", so our AssemblyLoadContext completely control the loading of an assembly. Now they make it public, and if user uses it, then powershell won't be able to discover the types in it, and thus the user won't be able to do anything with the assembly, unless he/she uses reflection directly.\n\nChanging from \"protected\" to \"public\" for those methods breaks our design, and we need to discuss this with Gaurav.\n\nAs for Bruce's scenario, I still don't know what it is. Can you elaborate?\n",
      "created_at": "2016-05-09T19:50:19Z",
      "updated_at": "2016-05-09T19:50:19Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "AFAIK he wants to be able to enumerate through the types in the assemblies like in FullCLR PowerShell. @BrucePay can you elaborate?\n",
      "created_at": "2016-05-09T20:31:33Z",
      "updated_at": "2016-05-09T20:31:33Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "We had a conversation with Gaurav offline, and the solution is to override those 4 public methods with \"new\" so that we can make sure the loading via them goes through our logic. In this way, we can continue to have the full control of assembly loading in a powershell process. I will make this change soon in SD.\n",
      "created_at": "2016-05-12T22:33:36Z",
      "updated_at": "2016-05-12T22:33:36Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Pinged @BrucePay externally, closing PR until we know what needs to be done.\n",
      "created_at": "2016-05-16T17:47:23Z",
      "updated_at": "2016-05-16T17:47:23Z"
    }
  ],
  "created_at": "2016-05-05T22:46:06Z",
  "number": 953,
  "state": "closed",
  "title": "Make GetAssemblies and GetAssemblyLoadContext public",
  "updated_at": "2016-05-16T17:47:29Z"
}