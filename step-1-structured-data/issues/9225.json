{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9225",
  "author": "mklement0",
  "body": "<sup>Conceptually related: #4726.</sup>\r\n\r\nNote: Fixing this issue would technically be a breaking change.\r\n\r\nPowerShell treats the following:\r\n\r\n    ${<drive>:<name>}\r\n\r\nas if you had specified:\r\n\r\n    Get-Content -Path <drive>:<name>  # or, with assignment, Set-Content -Path ...\r\n\r\nThis notation - though often used with the `Env:` drive (e.g., `$env:Path`) -  is little-known as a *general paradigm* named **_namespace variable notation_**, which is explained in [this SO answer](https://stackoverflow.com/a/55036515/45375).\r\n\r\n**The problem is the use of `-Path` rather than `-LiteralPath`** (conceptually speaking), because `-Path` **interprets its argument as a _wildcard expression_**.\r\n\r\nBy design, you can only ever target a _single_ item with namespace notation and if you intentionally specify a wildcard that resolves to _multiple_ items, the statement _breaks_.\r\n\r\n**There is no good reason for namespace notation to treat paths as wildcard expressions to begin with**, just as it makes no sense to do so for executable invocations and redirections (see #4726).\r\n\r\nThe fact that they are treated as wildcards causes problems with item names that _happen to look like_ wildcard expressions, in one of two ways:\r\n\r\n* You may not be able to create a new item, such as a new environment variable, at all.\r\n* Perhaps worse, you may inadvertently target a different, preexisting item.\r\n\r\nTaking the example of wanting to assign to / query the value of an environment variable literally named `[foo]` with `${env:[foo]}`, from [this SO question](https://stackoverflow.com/q/55343828/45375):\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n# Try to create env. var. literally named '[foo]'\r\n${env:[foo]} = 'bar'\r\n# Create a seemingly unrelated env. var. whose name happens to match\r\n# [foo] *if interpreted as a wildcard expression*\r\n$env:o = 'no'\r\n# Get the value\r\n${env:[foo]}\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nbar\r\n```\r\n\r\nThat is, implicit creation of the variable via namespace notation should succeed, as should subsequent retrieval.\r\n\r\n# Actual behavior\r\n\r\n```none\r\nCannot find path 'env:[foo]' because it does not exist.\r\nno\r\n```\r\n\r\n* That is, implicit creation of the variable failed, because the wildcard resolution of `[foo]` matched nothing and so there was effectively no variable name to assign to / create.\r\n\r\n* `${env:[foo]}` unexpectedly retrieved the value of `${env:o}`, because `[foo]` interpreted as a wildcard matches `o`.\r\n\r\nThe **workaround** is to use _double_ `` ` ``-escaping: `${env:``[foo``]}`; that the escape char. must be doubled  is an additional quirk - see #7999\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core 6.2.0-rc.1\r\nWindows PowerShell v5.1\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "Isn't the wildcard behavior a function of the provider?  In this case the ENV: provider, but in the case of a drive letter, its the file system provider.   Does PowerShell need to tell the provider to accept it as a 'literal' path?   I have also run in to the wildcard situation using the ENV provider using the namespace convention, but I think I was testing with a `*`.\r\n\r\nThe above example also gives a different error if the wildcard resolved to multiple items.\r\n```\r\nCannot process variable because variable path 'env:[foo]' resolved to multiple items. You can get or set the variable value only one item at a time.\r\nAt line:1 char:1\r\n+ ${env:[foo]}\r\n+ ~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidArgument: (:) [], PSArgumentException\r\n+ FullyQualifiedErrorId : Argument\r\n```\r\n\r\nThe double backticking seems peculiar, as it only seems to be accepted as demonstrated, so it appears to be on purpose.  It seems to be special to just the namespace variable notation.\r\n\r\nAt this point I would be willing to bet somewhere someone had a use for wildcard paths with the namespace variable notation, and so that's why this exists.\r\n\r\nI am thinking about if these notations should be added to the PowerShell/EditorSyntax PR that I have been working on.   I suspect they only apply to certain providers, of which those providers could be redefined or changed so there is probably no consistent way to scope these specific notations.",
      "created_at": "2019-03-30T00:09:05Z",
      "updated_at": "2019-03-30T00:09:05Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Namespace variable notation applies to _all_ providers that have PSDrives available, but isn't **usable** with all of them. In order to be usable with this syntax, the provider has to implement `IContentCmdletProvider` (i.e., `Get-Content` has to be implemented for that provider).\r\n\r\nIt also won't resolve to the provider if the PSDrive name is already taken by an existing scope (e.g., a PSDrive named `global` won't work, because that's a defined scope name).\r\n\r\nI think that this is most likely to be an accidental result of the default providers by default applying globbing unless it's specifically requested to process the path as literal. The fact that a path that does resolve to multiple items fails to do anything other than throw an error would appear to support that, I think. \ud83d\ude04 ",
      "created_at": "2019-03-30T00:41:34Z",
      "updated_at": "2019-03-30T00:41:34Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the clarifications, @vexx32.\r\n\r\n@msftrncs \r\n\r\n> At this point I would be willing to bet somewhere someone had a use for wildcard paths with the namespace variable notation, and so that's why this exists.\r\n\r\nI think it's more likely _accidental_ (I'm speculating), perhaps dating back to a time _before_ the great `-Path` / `-LiteralPath` schism, when _only_ wildcard expressions existed.\r\n\r\nSimilarly unhelpful behavior (accepting a wildcard, but requiring resolution to a single item):\r\n\r\n* has just been corrected in #9202, where it turned out to be a security concern\r\n\r\n* a fix for the related #4726 is pending.\r\n\r\n* a decision was recently made to complement `switch -File` with `switch -LiteralFile` - see #8988\r\n",
      "created_at": "2019-04-15T15:19:33Z",
      "updated_at": "2019-04-15T15:19:33Z"
    }
  ],
  "created_at": "2019-03-25T19:17:08Z",
  "number": 9225,
  "state": "open",
  "title": "Namespace variable notation unexpectedly treats paths as wildcard expressions",
  "updated_at": "2020-01-30T13:33:25Z"
}