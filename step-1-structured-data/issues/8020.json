{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8020",
  "author": "vexx32",
  "body": "## PR Summary\r\n\r\nFix #7828 \r\n\r\n* Adds type inference results to `$_` / `$PSItem` when it is used to refer to the `ErrorRecord` in a catch block.\r\n* Adds test for the type inference.\r\n* Includes type inference for typed `catch [ExceptionType] { $_ }` blocks such that `$_` is inferred as a dummy `ErrorRecord<TException>` which is identical to `ErrorRecord` but with a `TException`-typed `Exception` member.\r\n  * In other words, using typed catch blocks correctly autocompletes the members for `$_.Exception.<tab>`\r\n\r\nExample:\r\n```powershell\r\nPS> try {throw 'ball'} catch {$_.<tab>\r\n# completes to:\r\nPS> try {throw 'ball'} catch {$_.CategoryInfo\r\n```\r\n\r\n(Compare current behaviour, where tab completion is missing due to a lack of type inference on the `$_` / `$PSItem` variable.)\r\n\r\n## PR Checklist\r\n\r\n- [X] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [X] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [X] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [X] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed - Issue link:\r\n- **Testing - New and feature**\r\n    - [ ] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [X] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [ ] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2018-10-18T04:42:17Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Perhaps we need a test that `try {throw 'ball'} catch {$d=Get-Date; $_.CategoryInfo` works.",
      "created_at": "2018-10-15T05:35:54Z",
      "updated_at": "2018-10-15T05:35:54Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Can you expand upon that? As-is, the currently available logic handles this as you'd expect, completing the members for a generic exception object.\r\n\r\nAre there some exceptions with additional members we would want to try to detect from the exception type handed to the catch block itself? I'm not aware of any, but I'm sure there are probably *some* or could have some definitely in the case of custom exception types as well.\r\n\r\n@lzybkr I don't think this would go quite in the same place on this code (would it?), so if you could point out where it would need to be added, I'll give it a whirl.",
      "created_at": "2018-10-15T10:18:50Z",
      "updated_at": "2018-10-15T12:13:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 Please add test to demo that both cases work.",
      "created_at": "2018-10-15T11:20:24Z",
      "updated_at": "2018-10-15T11:20:24Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr @iSazonov \r\n\r\nAdded tests.\r\n\r\nWith @SeeminglyScience's help, *also* added in some type inference for typed catch blocks. He came up with the idea of a dummy generic `ErrorRecord<T>` class that could be used just for type inference in order to get the members of the typed exceptions. \r\n\r\nPretty happy with it! \ud83d\ude04 ",
      "created_at": "2018-10-15T16:51:00Z",
      "updated_at": "2018-10-15T16:51:00Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Clever but simple, perfect. \ud83d\udc4d\ud83d\udc4d\ud83d\udc4d",
      "created_at": "2018-10-15T17:49:25Z",
      "updated_at": "2018-10-15T17:49:25Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Appveyor caught something funky, don't think it was related. Rebased to restart it.\r\n\r\nOther than that... everything looks like it works as it ought. \ud83d\ude04 ",
      "created_at": "2018-10-16T13:52:28Z",
      "updated_at": "2018-10-16T13:52:28Z"
    }
  ],
  "created_at": "2018-10-13T18:49:02Z",
  "number": 8020,
  "state": "closed",
  "title": "Add Type Inference for $_ / $PSItem in catch{ } blocks",
  "updated_at": "2019-02-01T03:44:13Z"
}