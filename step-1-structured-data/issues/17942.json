{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17942",
  "author": "sba923",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\n1. Install `Microsoft.PowerShell.Archive 2.0.1-preview2` in user scope\r\n2. Modify the incorrect (https://twitter.com/Steve_MSFT/status/1561009864784384002?s=20&t=gvVFcVRDXx9-OzGIBPGGPA)  manifest so that it specifies that 7.3 is required\r\n![image](https://user-images.githubusercontent.com/12860484/185787205-098f8182-3a13-4602-9c81-b5c2c041fd71.png)\r\n\r\n3. Launch PowerShell 7.2.6\r\n4. Attempt to run `Compress-Archive`\n\n### Expected behavior\n\n```console\nCompress-Archive from the built-in version 1 of Microsoft.PowerShell.Archive module should run\n```\n\n\n### Actual behavior\n\n```console\nPowerShell attempts to load version `2.0.1-preview2` of `Microsoft.PowerShell.Archive` and fails:\r\n\r\nPS C:\\Program Files\\PowerShell\\7> compress-archive\r\ncompress-archive: The 'compress-archive' command was found in the module 'Microsoft.PowerShell.Archive', but the module could not be loaded. For more information, run 'Import-Module Microsoft.PowerShell.Archive'.\r\nPS C:\\Program Files\\PowerShell\\7> import-module microsoft.powershell.archive\r\nImport-Module: The version of PowerShell on this computer is '7.2.6'. The module 'C:\\Users\\steph\\OneDrive\\Documents\\PowerShell\\Modules\\microsoft.powershell.archive\\2.0.1\\microsoft.powershell.archive.psd1' requires a minimum PowerShell version of '7.3' to run. Verify that you have the minimum required version of PowerShell installed, and then try again.\n```\n\n\n### Error details\n\n```console\nPS C:\\Program Files\\PowerShell\\7> get-error\r\n\r\nException             :\r\n    Type        : System.Management.Automation.CommandNotFoundException\r\n    ErrorRecord :\r\n        Exception             :\r\n            Type    : System.Management.Automation.ParentContainsErrorRecordException\r\n            Message : The 'compress-archive' command was found in the module 'Microsoft.PowerShell.Archive', but the module could not be\r\nloaded. For more information, run 'Import-Module Microsoft.PowerShell.Archive'.\r\n            HResult : -2146233087\r\n        TargetObject          : compress-archive\r\n        CategoryInfo          : ObjectNotFound: (compress-archive:String) [], ParentContainsErrorRecordException\r\n        FullyQualifiedErrorId : CouldNotAutoloadMatchingModule\r\n        InvocationInfo        :\r\n            ScriptLineNumber : 1\r\n            OffsetInLine     : 1\r\n            HistoryId        : 14\r\n            Line             : compress-archive\r\n            PositionMessage  : At line:1 char:1\r\n                               + compress-archive\r\n                               + ~~~~~~~~~~~~~~~~\r\n            InvocationName   : compress-archive\r\n            CommandOrigin    : Internal\r\n        ScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\n    CommandName : compress-archive\r\n    TargetSite  :\r\n        Name          : TryModuleAutoDiscovery\r\n        DeclaringType : System.Management.Automation.CommandDiscovery, System.Management.Automation, Version=7.2.6.500, Culture=neutral,\r\nPublicKeyToken=31bf3856ad364e35\r\n        MemberType    : Method\r\n        Module        : System.Management.Automation.dll\r\n    Message     : The 'compress-archive' command was found in the module 'Microsoft.PowerShell.Archive', but the module could not be\r\nloaded. For more information, run 'Import-Module Microsoft.PowerShell.Archive'.\r\n    Data        : System.Collections.ListDictionaryInternal\r\n    Source      : System.Management.Automation\r\n    HResult     : -2146233087\r\n    StackTrace  :\r\n   at System.Management.Automation.CommandDiscovery.TryModuleAutoDiscovery(String commandName, ExecutionContext context, String\r\noriginalCommandName, CommandOrigin commandOrigin, SearchResolutionOptions searchResolutionOptions, CommandTypes commandTypes, Exception&\r\nlastError)\r\n   at System.Management.Automation.CommandDiscovery.LookupCommandInfo(String commandName, CommandTypes commandTypes,\r\nSearchResolutionOptions searchResolutionOptions, CommandOrigin commandOrigin, ExecutionContext context)\r\n   at System.Management.Automation.ExecutionContext.CreateCommand(String command, Boolean dotSource)\r\n   at System.Management.Automation.PipelineOps.AddCommand(PipelineProcessor pipe, CommandParameterInternal[] commandElements,\r\nCommandBaseAst commandBaseAst, CommandRedirection[] redirections, ExecutionContext context)\r\n   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal[][]\r\npipeElements, CommandBaseAst[] pipeElementAsts, CommandRedirection[][] commandRedirections, FunctionContext funcContext)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\nTargetObject          : compress-archive\r\nCategoryInfo          : ObjectNotFound: (compress-archive:String) [], CommandNotFoundException\r\nFullyQualifiedErrorId : CouldNotAutoloadMatchingModule\r\nInvocationInfo        :\r\n    ScriptLineNumber : 1\r\n    OffsetInLine     : 1\r\n    HistoryId        : 14\r\n    Line             : compress-archive\r\n    PositionMessage  : At line:1 char:1\r\n                       + compress-archive\r\n                       + ~~~~~~~~~~~~~~~~\r\n    InvocationName   : compress-archive\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\n```\n\n\n### Environment data\n\n```powershell\nPS C:\\Program Files\\PowerShell\\7> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.6\r\nPSEdition                      Core\r\nGitCommitId                    7.2.6\r\nOS                             Microsoft Windows 10.0.19044\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\nPS C:\\Program Files\\PowerShell\\7> $env:PSModulePath -split ';' | % { $mp = join-path -path $_ -childpath 'Microsoft.PowerShell.Archive'; if (Test-Path -LiteralPath $mp) { gci -rec $mp -filter 'm*.psd1' } }\r\n\r\n    Directory: C:\\Users\\<REDACTED>\\OneDrive\\Documents\\PowerShell\\Modules\\Microsoft.PowerShell.Archive\\2.0.1\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\nla---          2022-08-20    19:33          16210 Microsoft.PowerShell.Archive.psd1\r\n\r\n    Directory: C:\\Program Files\\PowerShell\\7\\Modules\\Microsoft.PowerShell.Archive\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\n-a---          2020-02-11    19:01          13503 Microsoft.PowerShell.Archive.psd1\r\n\r\n    Directory: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\Modules\\Microsoft.PowerShell.Archive\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\n-a---          2019-12-07    10:10            457 Microsoft.PowerShell.Archive.psd1\r\n\r\nPS C:\\Program Files\\PowerShell\\7> gcm *archive\r\n\r\nCommandType     Name                                               Version    Source\r\n-----------     ----                                               -------    ------\r\nFunction        Compress-Archive                                   1.2.5      Microsoft.PowerShell.Archive\r\nFunction        Compress-Archive                                   1.0.1.0    Microsoft.PowerShell.Archive\r\nFunction        Expand-Archive                                     1.2.5      Microsoft.PowerShell.Archive\r\nFunction        Expand-Archive                                     1.0.1.0    Microsoft.PowerShell.Archive\r\nCmdlet          Compress-Archive                                   2.0.1      Microsoft.PowerShell.Archive\r\nCmdlet          Expand-Archive                                     2.0.1      Microsoft.PowerShell.Archive\n```\n\n\n### Visuals\n\n![image](https://user-images.githubusercontent.com/12860484/185787354-8bdb9349-de26-4022-a7cb-09e3e2f9cb45.png)\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "This is currently by design & has been since PowerShell 5 or perhaps even before. \r\n\r\nThis is due to how we look to import the the latest version of a module that has that command & do not fall back to a prior version automatically.\r\n\r\nCould this be changed, sure. Will it, I don't think so as how are we meant to know all the reasons when or why we should fall back. \r\n\r\nCould we build some form of checking mechanism for things like this, sure, but is it worth the issue, when the workaround is to call `Import-Module` with the `RequiredVersion` parameter or for in scripts make use of the `#requires statement` to force correct module version loading which I detailed in this [twitter thread ](https://twitter.com/ryanyates1990/status/1555257498113802244) and explicitly state why in this [comment in the thread](https://twitter.com/ryanyates1990/status/1555377599949455360?s=20&t=7gIJG_rCSc0msXoKTHickQ) ",
      "created_at": "2022-09-01T22:50:45Z",
      "updated_at": "2022-09-01T22:51:36Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "In this case, the module manifest declares the min version of PowerShell required, so if you are using 7.2 and the module requires 7.3, then module discovery should skip that one and continue looking.  If someone explicitly tries to import a specific module and that isn't compatible, then the error is be design.  ",
      "created_at": "2022-09-02T14:09:20Z",
      "updated_at": "2022-09-02T14:09:20Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks @SteveL-MSFT for your comment. Wasn't my description of the issue clear enough to point at _implicit_ module loading?\r\n",
      "created_at": "2022-09-02T14:43:11Z",
      "updated_at": "2022-09-02T14:43:11Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT - I think this also depends on the ordering of the entries in PSModulePath in which if you say have module version 5 in user path and 6 in the system path, if the user path is first it loads that one and not the latest version. What I don't think works is that it loads \r\n\r\nHaving just tested this  in 7.2.6 with a Test Module requiring PowerShell 8.0 as a minimum in the System path and one in the user path that doesn't specify a version, with user path first the working module will load, however if you switch the ordering and puth user path at the end of PSModulePath and run `Get-Command TestMod -Refresh -All -ListAvailable` to rebuild the Module Analysis Cache, then Get-Command will show the following and any attempt to load doesn't load the module or the one that should work that is in the user path\r\n\r\n![image](https://user-images.githubusercontent.com/6355225/188202241-6d130153-f069-4f93-b9f0-c0353faa73d0.png)\r\n\r\nAlso in testing this on 7.3.0-preview7 when both versions are in the User module path it won't auto load the version that will work if there is a version that won't in the same path\r\nI also get the same behaviour in v5.1 too on Windows 11t\r\n\r\nSo whilst it definitely would be nice for the next version possible to load, i.e. the one that is actually compatible with the current PowerShell environment, whether that be version or required dependencies etc, I 'd like it if there was also a switch that can be used to opt out of next version loading if the most recent version is not loadable. \r\nI think the issue really becomes `How do we ensure we are loading the right module if not in the same path?` as shown in the above screen shot that it doesn't work in the same path right now, and does in different ones either, though that's manageable if we also compare a set of properties in the module manifest which isn't always properly populated so may not be fully reliable but would be a viable way to do this.",
      "created_at": "2022-09-02T17:47:11Z",
      "updated_at": "2022-09-03T21:26:06Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@kilasuit I'm not proposing that we do anything in the case the module indicates it is compatible, but doesn't load for other reason (it's incorrectly marked, dependencies missing, etc...).  As we do have many folks running 5.1, PS7 and PS7-preview simultaneously, it would make sense that if the module manifest declares requiring a newer version, then an older version of PS should skip that module and continue its normal search logic.",
      "created_at": "2022-09-03T14:33:03Z",
      "updated_at": "2022-09-03T14:33:10Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "I agree @SteveL-MSFT and captured the above as test cases as currently we don't load the next working version \r\n1) We can auto load the next working version, which should be a lower version number, regardless of which path in PSModulePaths it is located,\r\n2) We don't break current expectation for those that may not automatically want that to happen - example being in testing/use of preview versions of modules requiring preview versions of PowerShell\r\n\r\nWhilst 1 is a definite need 2 is a nice to have IMO ",
      "created_at": "2022-09-03T21:27:08Z",
      "updated_at": "2022-09-03T21:27:08Z"
    }
  ],
  "created_at": "2022-08-21T10:48:08Z",
  "labels": [
    "Issue-Bug",
    "WG-Engine-Module"
  ],
  "number": 17942,
  "state": "open",
  "title": "PowerShell 7.2.6 doesn't ignore a module that requires 7.3",
  "updated_at": "2022-09-03T21:27:08Z"
}