{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2613",
  "author": "agonzalezm",
  "body": "Add support to run powershell with mono, instead of .net core. Mono can run in a broader set of scenarios and platforms, net core doesnt not allow to run powershell on old systems like Centos6 per example. \r\n\r\nAs mono and .net core has common APIs and both will support netstandard 2.0 it should make powershell independant of running .net core or mono.",
  "closed_at": null,
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "If anyone decides to try this, be aware that I am aware of at least one feature that Mono provides an api for, but it silently does nothing.\n\nPowerShell classes rely on dynamic assemblies that can be garbage collected. When I last investigated, Mono had the appropriate api (so PowerShell could run), but the implementation never collected the assemblies, so using PowerShell classes could result in a permanent memory leak.\n",
      "created_at": "2016-11-04T20:58:28Z",
      "updated_at": "2016-11-04T20:58:28Z"
    },
    {
      "author": "agonzalezm",
      "author_association": "NONE",
      "body": "Thanks @lzybkr! I was talking in the mono gitter channel about this and they told me to open a bug with the APIs that are not correctly implemented and they will review. In the last versions they have have replaced lot of their original code/api by the open-source microsoft .net references code so it is getting better and better.\n\nCould you provide more details about bad implemented APIs and problems to file a bug for mono? or steps on how can I can test/found them?\n",
      "created_at": "2016-11-05T12:49:34Z",
      "updated_at": "2016-11-05T12:50:01Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I believe this [line](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/parser/PSType.cs#L1124) was the problem, and more specifically, RunAndCollect did not enable garbage collection.\n",
      "created_at": "2016-11-07T19:29:24Z",
      "updated_at": "2016-11-07T19:29:24Z"
    },
    {
      "author": "agonzalezm",
      "author_association": "NONE",
      "body": "@lzybkr thanks, i was discussing this on mono channel, and it is right and it can take a them a while to implement but as it is just a memory leak, for tasks like running a script it is not a big problem as running from bash \"mono powershell.exe myscript.ps1\" it will free all memory once the script is finish. I guess this could be more a problem if you open a powershell.exe shell for a long time or script that are running for days.\n\nAre there another issues? If there arent, how could i have a try at this and try run some powershell code on mono? First step could be get it running and then fix memory leaks or other issues.\n\nI have opened the bug for mono here:\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=46569\n",
      "created_at": "2016-11-08T13:51:24Z",
      "updated_at": "2016-11-08T13:57:19Z"
    },
    {
      "author": "agonzalezm",
      "author_association": "NONE",
      "body": "any update on this? can anyone provide a package that i could try to run on mono and find issues/leaks to start opening bugs on mono list?",
      "created_at": "2016-12-21T23:49:58Z",
      "updated_at": "2016-12-21T23:50:22Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I'm not aware of anyone working on this, and the issue is `Up-for-Grabs`, so if you want to see it happen, maybe you can contribute.\r\n\r\nI will say that at some point in the next month or two, I think we'll be moving from `project.json` build files to msbuild now that `dotnet` supports it, so it might be better to wait for that work to finish before starting on mono support.",
      "created_at": "2016-12-21T23:56:04Z",
      "updated_at": "2016-12-21T23:56:04Z"
    },
    {
      "author": "hjc4869",
      "author_association": "NONE",
      "body": "Recently I took a look at the source code, the libraries still compile and work if re-targeted to netstandard2.0 (Modify PowerShell.Common.props while keep powershell program itself netcoreapp2.0)\r\n\r\nOne problem is System.Management.Automation relies heavily on AssemblyLoadContext (mostly in ClrFacade and CorePsAssemblyLoadContext), which is not available in any version of .NET Standard or .NET Framework. System.Runtime.Loader package reference has to be added manually to get System.Management.Automation compiled under netstandard2.0, but this package is just a stub so it will fail at runtime if mono/.net framework tries to load it.\r\n\r\nLuckily there is AppDomain in .NET Standard 2.0 which may provide sufficient API to replace AssemblyLoadContext, but rewriting these classes is certainly required and I don't know if PowerShell Core team will do this or not. (Didn't see any plan to make System.Management.Automation a netstandard2.0 library in https://github.com/PowerShell/PowerShell/issues/3046)",
      "created_at": "2017-11-21T11:24:45Z",
      "updated_at": "2017-11-21T11:25:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I guess it is as simple with .Net 5.0 as creating new package.\r\n\r\n/cc @TravisEz13 @SteveL-MSFT ",
      "created_at": "2020-07-16T10:31:09Z",
      "updated_at": "2020-07-16T10:31:09Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "This should be much easier now Mono now implements the CLR memory model: https://github.com/mono/mono/pull/17136",
      "created_at": "2020-08-11T19:32:09Z",
      "updated_at": "2020-08-11T19:32:09Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "> I guess it is as simple with .NET 5.0 as creating new package.\r\n\r\nLike that is simple. \ud83e\udd23 ",
      "created_at": "2020-08-19T20:10:36Z",
      "updated_at": "2020-08-19T20:10:36Z"
    }
  ],
  "created_at": "2016-11-04T05:31:05Z",
  "labels": [
    "Issue-Enhancement",
    "Area-Maintainers-Build",
    "Up-for-Grabs"
  ],
  "number": 2613,
  "state": "open",
  "title": "Support for running Powershell on top of mono",
  "updated_at": "2020-08-19T20:10:37Z"
}