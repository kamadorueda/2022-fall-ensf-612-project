{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5634",
  "author": "kai-h",
  "body": "In testing a clean install of PowerShell 6.0.0 on macOS 10.12, it turns out that PowerShell is specifically looking for OpenSSL libraries installed by the Homebrew package manager.\r\n\r\nPowerShell should not depend on third party libraries wherever possible, or should include it's dependencies with the installation package.\r\n\r\nUsing otool, part of the Apple Developer Tools, against libmi.dylib shows that it has hard coded dependancies against two OpenSSL libraries in paths that are installed by Homebrew:\r\n/usr/local/opt/openssl/lib/libssl.1.0.0.dylib\r\n/usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib\r\n\r\nHomebrew, whilst it is a convenient to use package manager, is considered to be a security risk in some contexts as it explicitly makes certain system directories group-writable and sets their owner to the current logged in user on the Mac. Two of the directories that are of concern are /usr/local/bin and /usr/local/share.\r\n\r\nOther package managers for macOS, such as MacPorts, leave these directories owned by root:wheel as they should be and requires the use of sudo to install and manage packages. This is more secure and more in keeping with the traditional Unix way of doing things.\r\n\r\nPowerShell however does not look in /opt for it's OpenSSL libraries which is where MacPorts will install them.\r\n\r\nSteps to reproduce\r\n------------------\r\nOn a clean install of macOS 10.12, install PowerShell 6.0.0-rc from the .pkg installer. Do not install it through Homebrew.\r\n\r\nBegin a New-PSSession to Office 365. The New-PSSession will fail either with an exception or with an error that certain libraries are unable to be found.\r\n\r\nExpected behavior\r\n-----------------\r\nIt is expected that if PowerShell is installed via a .pkg installer that this installer contains all dependencies required for PowerShell to correctly run.\r\n\r\nActual behavior\r\n---------------\r\nExecuting something like:\r\n```powershell\r\n$Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $UserCredential -Authentication Basic -AllowRedirection\r\n```\r\neither quits PowerShell completely with an unhandled exception error or it throws an error saying This parameter set requires WSMan, and no supported WSMan client library was found.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nPS /Users/kai> $PSVersionTable                                                  \r\n\r\nName                           Value                                           \r\n----                           -----                                           \r\nPSVersion                      6.0.0-rc                                        \r\nPSEdition                      Core                                            \r\nGitCommitId                    v6.0.0-rc                                       \r\nOS                             Darwin 17.2.0 Darwin Kernel Version 17.2.0: F...\r\nPlatform                       Unix                                            \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                         \r\nPSRemotingProtocolVersion      2.3                                             \r\nSerializationVersion           1.1.0.1                                         \r\nWSManStackVersion              3.0                                             \r\n```\r\n",
  "closed_at": "2020-03-24T05:00:20Z",
  "comments": [
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "This is only required for MI functionality and the built-in libraries don't provide that functionality.  So, changing the reference to that location is not appropriate.  We can write documentation on how to get these libraries and enable it yourself for the `6.0.0` release and consider making a self-contained package in the future.",
      "created_at": "2017-12-13T00:06:29Z",
      "updated_at": "2017-12-13T00:06:29Z"
    },
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "That would be an acceptable solution for the 6.0.0 release. Would it be possible for PowerShell to automatically look in both the location that Homebrew uses as well as the location that MacPorts uses, as they are the two most widely used package managers for macOS. At present the library loading paths seem to be hardcoded for Homebrew only.",
      "created_at": "2017-12-13T00:15:54Z",
      "updated_at": "2017-12-13T00:15:54Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Based on what you're saying, I think the ideal end-state would be that:\r\n* Homebrew package *doesn't* include OpenSSL but pulls in what it needs. Homebrew users are accepting those security risks by using it (i.e. it's essentially by-design for Homebrew)\r\n* Standalone .pkg ships an app-local copy of the OpenSSL needed. That way users installing via .pkg are good to go. That means we're incurring a servicing burden of updating OpenSSL, though. \r\n* PowerShell itself should look for app-local, and then look in both the Homebrew and MacPorts locations\r\n\r\nThoughts? ",
      "created_at": "2017-12-13T01:01:27Z",
      "updated_at": "2017-12-13T01:01:27Z"
    },
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "I think that's ideal.\r\n\r\nIf end users are accepting of the conditions of using Homebrew, and are using brew to install PowerShell, then it's quite acceptable for PowerShell to rely on Homebrew's installed OpenSSL and Libcurl packages.\r\n\r\nIf someone is using MacPorts, it would be great if PowerShell could use the MacPorts versions of OpenSSL and Libcurl when installed from a .pkg. I don't know what is involved in adding a port to MacPorts, however if PowerShell were added to MacPorts, it is trivial to specify these libraries as dependancies and have MacPorts handle installing them (and keeping them up to date)\r\n\r\nIf, on the other hand, someone downloads the installer .pkg from GitHub, it would be good if it had all dependencies packaged with it, although I appreciate that you are then pulling in two third-party packages and will be responsible for keeping them up-to-date.\r\n\r\nFor what it's worth, MacPorts makes it very easy to build a .pkg installer for any of it's packages - e.g:\r\n```\r\nsudo port pkg openssl\r\n```\r\nThis will build an installer pkg for OpenSSL, however AFAIK these packages sometimes are limited to being installed on the same major version of the OS (e.g. if you build on 10.13 some packages may not work on 10.12)\r\n",
      "created_at": "2017-12-13T01:31:10Z",
      "updated_at": "2017-12-13T01:31:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I believe MSFT will have many problems with shared libraries when port different applications on .Net Core. While the process is not stable we could place the shared libraries in PowerShell Core folder. (I don't know CoreFX behavior in the case). I believe it is acceptable with modern servicing model. \r\n\r\nPS: Today I discover that nginks has `-V` parameter to show  OpenSSL versions used and compiled with.  We could do the same and show .Net, OpenSSL, curl versions for troubleshooting. Again question is for CoreFX.",
      "created_at": "2017-12-13T17:57:58Z",
      "updated_at": "2017-12-13T17:57:58Z"
    },
    {
      "author": "PeterResele",
      "author_association": "NONE",
      "body": "I just ran into the same problem: \r\n- looked at Homebrew, saw the warnings, aborted installation. It felt unsafe and when I discovered this thread I felt confirmed about it. (I've never used a \"package manager\" and I'm not going to start now to go back into the past - I like real installer packages or, even better, the App Store.)\r\n\r\nFor me as a user, MSFT should be big enough to deliver this in the Mac App store (like they already do for other things, I just saw even the Azure Storage Explorer). \r\n\r\nAlso acceptable are PKG that include everything and just work. The current PKG installs, but when you click on the icon it just does: Nothing. Not even any error message that could help to solve the problem. Not very professional.\r\n\r\n(but I just realized it wasn't MSFT who develops and maintains this... they linked it from their blogs makeing it look like that. So, thanks anyway for doing this work which will help at least those hard core developers out there.)",
      "created_at": "2018-12-06T12:03:36Z",
      "updated_at": "2018-12-06T12:07:03Z"
    },
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "Try the following to use the MacPorts OpenSSL Libraries for PowerShell\r\nInstall MacPorts\r\nIn Terminal, type:\r\n````\r\nsudo port install openssl\r\nsudo mkdir -p /usr/local/opt/openssl/\r\nsudo ln -s /opt/local/lib /usr/local/opt/openssl/lib\r\n````\r\nPersonally, I'm OK with a command-line tool like PowerShell not coming pre-packaged with all it's dependancies as then the PowerShell maintainers also need to keep on top of keeping the 3rd party libraries up-to-date as well.\r\n\r\nWhat I want is for PowerShell to use the system-installed OpenSSL libraries. I have tested PowerShell with the default Apple-installed OpenSSL libraries in /usr/lib and it works. It also works, as shown above, using the MacPorts OpenSSL libraries.\r\n\r\nWhat breaks it for me is that PowerShell has the full path to the Homebrew OpenSSL libraries hard-coded into it's libraries, instead of using the default library paths on macOS.\r\n\r\nOh, and I believe (and am happy to be corrected if I'm wrong) that the developers of PowerShell here on GitHub are Microsoft employees - I don't think it's a third-party effort.",
      "created_at": "2018-12-06T22:24:17Z",
      "updated_at": "2018-12-06T22:24:17Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Also, this dependency from microsoft/omi.  I filed an issue here: https://github.com/Microsoft/omi/issues/596 \r\nWe don't want to fork from their codebase at least for now.  So the issue needs to be fixed there first.",
      "created_at": "2018-12-07T00:42:24Z",
      "updated_at": "2018-12-07T00:42:24Z"
    },
    {
      "author": "slabber",
      "author_association": "NONE",
      "body": "Powershell 7 released and still there is a dependency in libmi to openssl 1.0\r\n\r\n```\r\notool -L /usr/local/microsoft/powershell/7/libmi.dylib\r\nlibmi.dylib:\r\n        @rpath/libmi.dylib (compatibility version 0.0.0, current version 0.0.0)\r\n        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1238.60.2)\r\n        /usr/lib/libpam.2.dylib (compatibility version 3.0.0, current version 3.0.0)\r\n        /usr/local/opt/openssl/lib/libssl.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0)\r\n        /usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0)\r\n        /usr/lib/libz.1.dylib (compatibility version 1.0.0, current version 1.2.8)\r\n```\r\n\r\nThis needs to be fixed because now that openssl 1.0 has been removed by the homebrew team (https://github.com/Homebrew/homebrew-cask/issues/78085), it leads to a broken experience for Mac users (https://github.com/PowerShell/PowerShell/issues/11188)",
      "created_at": "2020-03-05T08:25:05Z",
      "updated_at": "2020-03-05T08:25:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13 Maybe we could use C# native dll handler to resolve the issue?",
      "created_at": "2020-03-05T14:58:21Z",
      "updated_at": "2020-03-05T14:58:21Z"
    },
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "We need to ensure that PowerShell has no hardcoded dynamic library paths. This is bad practice, leads to fragile configurations and can easily break with minor updates.\r\n\r\nFor example, macOS ships with OpenSSL libraries straight out of the box. Requiring the end user to install Homebrew specifically to have yet another OpenSSL library is problematic for a couple of reasons. One is that it requires the installation of more software than is strictly required. Two is that there is then another version of the OpenSSL library that needs to be kept up-to-date (or not, as the case may be if it breaks PowerShell) and can introduce security vulnerabilities if it's out of date.\r\n\r\nOn my install of macOS Catalina 10.15.3 I have the following SSL libraries in /usr/lib\r\n```\r\n-rwxr-xr-x  1 root  wheel  1482592 24 Jan 00:58 libboringssl.dylib\r\n-rwxr-xr-x  1 root  wheel   212288 24 Jan 00:59 libssl.0.9.7.dylib\r\n-rwxr-xr-x  1 root  wheel   335888 24 Jan 00:59 libssl.0.9.8.dylib\r\n-rwxr-xr-x  1 root  wheel   330592 24 Jan 00:58 libssl.35.dylib\r\n-rwxr-xr-x  1 root  wheel   314032 24 Jan 00:58 libssl.43.dylib\r\n-rwxr-xr-x  1 root  wheel   300512 24 Jan 00:59 libssl.44.dylib\r\n-rwxr-xr-x  1 root  wheel   294048 24 Jan 00:58 libssl.46.dylib\r\n-rwxr-xr-x  1 root  wheel    32976 24 Jan 00:58 libssl.dylib\r\n```\r\nCan PowerShell simply use libraries that are already installed in macOS and only if Apple doesn't provide a suitable library, then fall back to requiring a third-party version?",
      "created_at": "2020-03-05T22:26:57Z",
      "updated_at": "2020-03-05T22:26:57Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@iSazonov This is not in PowerShell code... \r\n\r\nI would recommend removing `libmi` to solve this if it didn't break DSC.",
      "created_at": "2020-03-06T19:37:20Z",
      "updated_at": "2020-03-06T19:37:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13 We have #8397 to track this.",
      "created_at": "2020-03-07T20:06:38Z",
      "updated_at": "2020-03-07T20:06:38Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "This I would call this a duplicate of that issue.",
      "created_at": "2020-03-07T21:08:49Z",
      "updated_at": "2020-03-07T21:08:49Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "I'm leaving both the duplicate and external resolution, because it's a duplicate of an issue to decouple us from an external library.",
      "created_at": "2020-03-07T21:09:56Z",
      "updated_at": "2020-03-07T21:09:56Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as duplicate and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-03-24T05:00:19Z",
      "updated_at": "2020-03-24T05:00:19Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Docs have been updated, but this is a temporary solution.  Please move to SSH based remoting.\r\nhttps://github.com/MicrosoftDocs/PowerShell-Docs/pull/5726",
      "created_at": "2020-04-07T20:28:30Z",
      "updated_at": "2020-04-07T20:28:30Z"
    },
    {
      "author": "daviscyd",
      "author_association": "NONE",
      "body": "> Docs have been updated, but this is a temporary solution. Please move to SSH based remoting.\r\n> [MicrosoftDocs/PowerShell-Docs#5726](https://github.com/MicrosoftDocs/PowerShell-Docs/pull/5726)\r\n\r\nRegarding the above, can SSH-based remoting be used to connect to o365?\r\nI've searched the documentation and can't find anything except for instructions to remote to another server.\r\n",
      "created_at": "2020-04-29T13:46:30Z",
      "updated_at": "2020-04-29T13:46:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daviscyd PowerShell is in a transition phase - WinRM is frozen but ssh does still not dominate. As a result, we are all forced to experience inconvenience.\r\n\r\nYou can open new issue if you have an important scenario and have feedbacks about PowerShell 7.0 remoting.",
      "created_at": "2020-04-29T16:13:29Z",
      "updated_at": "2020-04-29T16:13:29Z"
    }
  ],
  "created_at": "2017-12-06T01:32:43Z",
  "number": 5634,
  "state": "closed",
  "title": "PowerShell on macOS depends on third-party installed libraries",
  "updated_at": "2020-04-29T16:13:29Z"
}