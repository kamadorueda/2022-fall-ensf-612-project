{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10338",
  "author": "KirkMunro",
  "body": "# PR Summary\r\n\r\n- Adds an experimental flag called \"Microsoft.PowerShell.Utility.PSManageBreakpointsInRunspace\". All experimental functionality described below is enabled/disabled using that flag.\r\n- Removes the recently added `New-PSBreakpoint` experimental cmdlet. This functionality is provided via SDK commands for now, and will be provided via a `-Runspace` parameter on `*-PSBreakpoint` commands in a PR once this one is finalized.\r\n- Adds `SetCommandBreakpoint`, `SetVariableBreakpoint`, `SetLineBreakpoint`, `EnableBreakpoint`, `DisableBreakpoint`, and `RemoveBreakpoint` public APIs to the `Debugger` class, plumbs them through the engine, and hooks them up for remote debugger work. Also hooks up the `GetBreakpoint`, `GetBreakpoints`, and `SetBreakpoints` `Debugger` class APIs for remote debugger work.\r\n- Adds a `-NoInitialBreak` experimental parameter to `Debug-Runspace` and `Debug-Job` that allows users to attach the debugger without invoking a `BreakAll`. The corresponding methods for the same have boolean parameters allowing this as well.\r\n- Hooks up `Set-PSBreakpoint` to the new debugger APIs that have superceded the ones it used to use.\r\n\r\n## PR Context\r\n\r\nThis PR is needed for \"attach to process\" debugging in PowerShell Editor Services.\r\n\r\nIt helps because:\r\n- It allows scripters to fully manage breakpoints in a remote runspace without having to use `Debug-*` to attach the debugger to that runspace.\r\n- It allows Tyler to attach a debugger to a runspace without invoking a `BreakAll` in PSES.\r\n\r\nImportant details about this PR:\r\n1. It does not include Pester tests for the `-NoInitialBreak` parameter added to `Debug-Runspace` and `Debug-Job`, nor does it include Pester tests for the corresponding boolean value in the `DebugRunspace` and `DebugJob` APIs. I'm not sure how to automate that test, and believe it should be tested manually. Fortunately, that is an easy manual test to take on.\r\n1. The tests in the new `Breakpoint.Tests.ps1` file sometimes hang. I don't know why this happens. It has to do with working with a remote runspace and using the breakpoint APIs against it. It doesn't happen all the time, but it happens often. After 30 minutes, it will time out and fail. I need help identifying why this happens, by someone who understands the MS-PSRDP better than I do.\r\n\r\ncc: @TylerLeonhardt @PaulHigin @SteveL-MSFT \r\n\r\n## PR Checklist\r\n\r\n- [X] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [X] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [X] None\r\n    - **OR**\r\n    - [ ] Some (experimental features are required if breaking changes are included).\r\n- **Experimental features**\r\n    - [X] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [X] Experimental feature name(s): Microsoft.PowerShell.Utility.PSManageBreakpointsInRunspace\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [X] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [X] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [X] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2019-09-05T18:30:26Z",
  "comments": [
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Looks like there are some Pester test failures that have nothing to do with this PR.",
      "created_at": "2019-08-10T01:10:48Z",
      "updated_at": "2019-08-10T01:10:48Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@PaulHigin: Regarding the intermittent hang, my suspicion is that there is a timing issue with the initial handshake in MS-PSRDP, where the initial outgoing message from the client fires before the server starts actively listening for requests, at which point both client and server are waiting for communication from one another: the client waits for the server to respond, and the server waits for the client to tell it what to do. I believe this is an existing issue, not new, and it can probably be reproduced with the original set of APIs that MS-PSRDP supports.",
      "created_at": "2019-08-10T13:18:05Z",
      "updated_at": "2019-08-10T13:18:05Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@PaulHigin Thinking about this more, and reading through the code this morning, I'm convinced that the scenario I shared above is the root cause, and the issue I tripped on is related to issue #8012.\r\n\r\nNeither `RunspaceState` nor `RunspacePoolState` have a \"Ready\" state. They only have `Opened`, and they both of them do processing after they have entered the `Opened` state, which is the wrong thing to do when it comes to asynchronous processing. The test that hangs intermittently waits for the job to enter the `Running` state before using the new MS-PSRDP APIs, but jobs can enter a `Running` state before the listener is ready to receive requests in the remote runspace. When this happens, remote APIs invoked against the remote runspace will appear hung.\r\n\r\nThis issue is not related to the changes in this PR, but this PR and the original test suite written to validate these changes exposed the issue. That should be handled separately, as an RFC according to [the committee review of #8012](https://github.com/PowerShell/PowerShell/issues/8012#issuecomment-457011612), which should propose a solution for both `Runspace` and `RunspacePool` event handling to ensure that SDK users can build code that can know with confidence that the runspace they are accessing via the SDK is ready for them to use it asynchronously. I've added that RFC to my list of tasks to do, so that we can get that discussion started and resolve this problem for SDK users who do async processing with PowerShell.\r\n\r\nIn the meantime, I just changed the Pester tests that use the new MS-PSRDP APIs such that they won't run until the runspace is truly ready. The easiest workaround I could come up with was to add a breakpoint and wait for the runspace to hit that breakpoint before using the APIs. Making this change allows me to run the tests over and over and over, and it never hangs. I'll commit that change in just a moment.",
      "created_at": "2019-08-12T15:04:27Z",
      "updated_at": "2019-08-12T15:04:27Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "The Pester errors I'm facing seem completely unrelated to this PR.\r\n\r\nIt seems that experimental features are not being enabled by default in the CI builds, and it seems that there are some issues with some of the recent PSModulePath changes (maybe also related to experimental features not being properly enabled by default. Are the failing tests not skipped properly if the experimental features related to them are not enabled?",
      "created_at": "2019-08-14T16:16:18Z",
      "updated_at": "2019-08-14T16:16:18Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "But it is Ok if we get this into the next preview release, no need to rush.",
      "created_at": "2019-08-14T18:01:17Z",
      "updated_at": "2019-08-14T18:01:17Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@PoshChan Please restart CI-windows.",
      "created_at": "2019-08-16T22:41:19Z",
      "updated_at": "2019-08-16T22:41:19Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@KirkMunro, I do not understand: Please restart CI-windows.\n\nCommands available in this repo for you:\n  - `get failures` this will attempt to get the latest failures for all of the target pipelines\n  - `remind me in <value> <units>` this will create a reminder that will be posted after the specified duration\n    \\<value\\> is a number, and \\<units\\> can be `minutes`, `hours`, or `days` (singular or plural)\n",
      "created_at": "2019-08-16T22:42:13Z",
      "updated_at": "2019-08-16T22:42:13Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@PoshChan Please restart PowerShell-CI-Windows.",
      "created_at": "2019-08-19T22:16:01Z",
      "updated_at": "2019-08-19T22:16:01Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@KirkMunro, I do not understand: Please restart PowerShell-CI-Windows.\n\nCommands available in this repo for you:\n  - `get failures` this will attempt to get the latest failures for all of the target pipelines\n  - `remind me in <value> <units>` this will create a reminder that will be posted after the specified duration\n    \\<value\\> is a number, and \\<units\\> can be `minutes`, `hours`, or `days` (singular or plural)\n",
      "created_at": "2019-08-19T22:16:21Z",
      "updated_at": "2019-08-19T22:16:21Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Any chance I can be granted access to ask PoshChan to restart various CI tests for me? Having to do a commit just to get a restart shouldn't be necessary, and I've been fighting a series of issues unrelated to this PR that are getting in the way of it passing the CI tests.\r\n\r\nRight now I'd like to restart the PowerShell-CI-linux and PowerShell-CI-windows tests, because the two issues that just showed up there are new and unrelated to my changes, so if someone who has the required privileges could restart those that would be appreciated.",
      "created_at": "2019-08-19T22:20:53Z",
      "updated_at": "2019-08-19T22:20:53Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@KirkMunro, I'll add you (and @vexx32) to the approved list.  I should probably also allow `restart` as a verb.",
      "created_at": "2019-08-20T20:33:47Z",
      "updated_at": "2019-08-20T20:33:47Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "FYI, the Codacy issue that is being flagged is a false positive.",
      "created_at": "2019-08-23T18:32:30Z",
      "updated_at": "2019-08-23T18:32:30Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Any chance we can get some progress on the pending reviews here? As indicated, the Codacy issue is a false positive. This PR is good to go, just needs reviews finalized so that it can be merged. Other work is pending the merge of this PR.",
      "created_at": "2019-09-04T14:18:16Z",
      "updated_at": "2019-09-04T14:18:16Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@KirkMunro Thank you for your contribution!",
      "created_at": "2019-09-05T18:31:44Z",
      "updated_at": "2019-09-05T18:31:44Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.0.0-preview.4` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.4)\n",
      "created_at": "2019-09-19T17:52:10Z",
      "updated_at": "2019-09-19T17:52:10Z"
    }
  ],
  "created_at": "2019-08-10T00:08:18Z",
  "number": 10338,
  "state": "closed",
  "title": "Add APIs for breakpoint management in runspaces and enable attach to process without BreakAll for PSES",
  "updated_at": "2019-09-19T17:52:10Z"
}