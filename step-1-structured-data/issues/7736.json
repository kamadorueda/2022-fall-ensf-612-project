{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7736",
  "author": "Stephanevg",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nHi,\r\n\r\nWhen I have a powershell class, that has a method with the same name as one of it's properties, then the property disapear, and is not visible on any of the instances. \r\n\r\nSee examples below.\r\n\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n\r\nClass Folder {\r\n    \r\n    $Name\r\n    $Path\r\n    [bool]$IsPresent\r\n\r\n    [string]IsPresent(){\r\n        \r\n        return \"woop\"\r\n    }\r\n}\r\n\r\n\r\n```\r\n\r\nWhen looking using Get-Member, we can see that the property $IsPresent disapeared, but that method is still there:\r\n\r\n```powershell\r\n[Folder]::New() | gm\r\n\r\n\r\n   TypeName: Folder\r\n\r\nName        MemberType Definition                    \r\n----        ---------- ----------                    \r\nEquals      Method     bool Equals(System.Object obj)\r\nGetHashCode Method     int GetHashCode()             \r\nGetType     Method     type GetType()                \r\nIsPresent   Method     string IsPresent()            \r\nToString    Method     string ToString()             \r\nName        Property   System.Object Name {get;set;} \r\nPath        Property   System.Object Path {get;set;\r\n```\r\n\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n\r\n```powershell\r\n\r\n[Folder]::New()\r\n\r\n#Should return\r\n\r\nName Path IsPresent\r\n---- ---- ---------\r\n              False\r\n\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```powershell\r\n\r\n[Folder]::New()\r\n\r\n#Returns\r\n\r\nName Path\r\n---- ----\r\n\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n\r\nI had the same behaviour on:\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.1\r\nPSEdition                      Core\r\nGitCommitId                    v6.1.0-preview.1\r\nOS                             Microsoft Windows 10.0.14393\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\nand\r\n\r\n```powershell\r\n\r\nName                           Value                                                                                            \r\n----                           -----                                                                                            \r\nPSVersion                      5.1.14393.2339                                                                                   \r\nPSEdition                      Desktop                                                                                          \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                          \r\nBuildVersion                   10.0.14393.2339                                                                                  \r\nCLRVersion                     4.0.30319.42000                                                                                  \r\nWSManStackVersion              3.0                                                                                              \r\nPSRemotingProtocolVersion      2.3                                                                                              \r\nSerializationVersion           1.1.0.1                                                                                          \r\n\r\n```\r\n\r\nOn Windows 10 and Windows Server 2012 R2\r\n\r\nWorkaround\r\n---------------\r\n\r\nThe workaround would be to change the name of the method and ensure it is not identical to the property anymore:\r\n\r\n```powershell\r\n\r\nClass Folder {\r\n    \r\n    $Name\r\n    $Path\r\n    [bool]$IsPresent\r\n\r\n    [string]TestIsPresent(){\r\n        \r\n        return \"woop\"\r\n    }\r\n}\r\n\r\n\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That probably shouldn't be allowed... I think? \r\n\r\nBut if this arises, you should be able to access the property with `$Object.PSObject.Properties.Where{$_.Name -eq 'PropertyName'}.Value`\r\n\r\nAlso, any particular reason you're not using `[System.IO.DirectoryInfo]` instead of a custom class, just out of curiosity? \ud83d\ude04 \r\n",
      "created_at": "2018-09-07T16:14:44Z",
      "updated_at": "2018-09-07T16:15:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@Stephanevg I don't see \"Steps to reproduce\".",
      "created_at": "2018-09-10T05:52:48Z",
      "updated_at": "2018-09-10T05:52:48Z"
    },
    {
      "author": "Stephanevg",
      "author_association": "NONE",
      "body": "@iSazonov sorry for that. I updated my original post.\r\nBut, as @vexx32 mentionned, it is perhaps a best practise not to have a method named as a property.\r\n, It could be that it is then kind of a security mechanism, where PS simply removes the property. \r\n\r\nBut if that is the case, we should have at least some guidance somewhere (PSSCRiptAnalyzer?), or simply throw an error perhaps? as without anything, mentioning that it disapears clearly felt strange to me.",
      "created_at": "2018-09-10T16:25:17Z",
      "updated_at": "2018-09-10T16:25:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@Stephanevg Thanks for the update.\r\n\r\nSeems we already have a similar registered Issue. (Please search.)\r\nWe have plans to enhance class support in PowerShell Core and I believe the issue could be fixed too. \r\n",
      "created_at": "2018-09-10T17:53:30Z",
      "updated_at": "2018-09-10T17:53:54Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "FWIW this will also occur with other similar situations. For example, adding a key named `\"keys\"` to a hashtable will prevent listing the keys unless you go into `.PSObject.Base.Keys` or some such.\r\n\r\nIt's a generic issue with the binder, I'd say, honestly; there needs to be a robust method of specifying a *property* in cases like these.",
      "created_at": "2018-09-10T18:00:40Z",
      "updated_at": "2018-09-10T18:00:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@rjmholt I think make sense add the Issue in your check list for classes.",
      "created_at": "2018-09-11T04:49:02Z",
      "updated_at": "2018-09-11T04:49:02Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 That hashtable example sounds not good. I would open a separate issue for that one and tag the @PowerShell/powershell-committee ",
      "created_at": "2018-09-11T15:31:22Z",
      "updated_at": "2018-09-11T15:31:22Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "(The issue may be generic, but fixing it once for everything sounds like a breaking change and I can just imagine needing to twist around it in 9 ways)",
      "created_at": "2018-09-11T15:32:21Z",
      "updated_at": "2018-09-11T15:32:21Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That hashtable example *is* not good, and very difficult to work around! I'll open another one. ",
      "created_at": "2018-09-11T15:37:50Z",
      "updated_at": "2018-09-11T15:37:50Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "C# doesn't allow this, we should error",
      "created_at": "2018-09-11T22:28:57Z",
      "updated_at": "2018-09-11T22:28:57Z"
    },
    {
      "author": "Stephanevg",
      "author_association": "NONE",
      "body": "@vexx32 I am not, this was just for an example case. I faced this issue in a more complex class, and wanted to narrow it down to the essentials of the problem ;)\r\n\r\nI don't think we actually need to allow this behaviour. If this is a bad practice, why allow it? Totally ok with have more strict rules in the naming of the properties / methods of our classes.\r\n \r\nI think that writing an error  + mentioning it in the docs - somehwere - that it isn't allowed, would be sufficent, I guess.\r\nHaving it just disapear like that is just odd.\r\n\r\n",
      "created_at": "2018-09-21T19:12:00Z",
      "updated_at": "2018-09-21T19:12:00Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah this shouldn't be allowed. Not a very good idea, haha!",
      "created_at": "2018-09-21T19:16:24Z",
      "updated_at": "2018-09-21T19:16:24Z"
    }
  ],
  "created_at": "2018-09-07T16:08:44Z",
  "labels": [
    "Issue-Bug",
    "WG-Engine"
  ],
  "number": 7736,
  "state": "open",
  "title": "When powershell class method has same name as property, the property disapear and is not accessible from any instance",
  "updated_at": "2018-09-21T21:22:42Z"
}