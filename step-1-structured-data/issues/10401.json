{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10401",
  "author": "iSazonov",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nAt startup we create initial runspace and set default location to current file system location (path).\r\nFor that we use _generic_ SetLocation() which designed to work with all providers and do many extra checks/operations.\r\nIn the startup scenario we know that the path is _valid_ file system path so we can use more simple and more fast set location.\r\n\r\nOn my system I get win ~10ms or ~1.62% and ~8Mb or ~3%.\r\nThe win comes from removing some extra file operations:\r\n![image](https://user-images.githubusercontent.com/22290914/63431597-a19acc00-c438-11e9-9367-31d51a6e354c.png)\r\n\r\n## PR Context\r\n\r\nRelated #6443\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2019-09-04T22:49:05Z",
  "comments": [
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "> In the startup scenario we know that the path is valid file system path so we can use more simple and more fast set location.\r\n\r\nWhat about the Azure Cloud Shell, which starts by default in the `Azure` drive, which is a `SHiPS` provider for a `PSDrive`?\r\n\r\n```\r\nRequesting a Cloud Shell.Succeeded.\r\nConnecting terminal...\r\nWelcome to Azure Cloud Shell\r\n\r\nType \"az\" to use Azure CLI\r\nType \"help\" to learn about Cloud Shell\r\n\r\nget-locationMOTD: Discover installed Azure modules: Get-Module Az* -ListAvailableVERBOSE: Authenticating to Azure ...VERBOSE: Building your Azure drive ...\r\nAzure:/\r\nPS Azure:\\> Get-Location\r\n\r\nPath\r\n----\r\nAzure:/\r\n\r\nPS Azure:\\> Get-PSDrive\r\n\r\nName           Used (GB)     Free (GB) Provider      Root                                                                                                                                                                    CurrentLocation\r\n----           ---------     --------- --------      ----                                                                                                                                                                    ---------------\r\n/                  19.71         28.70 FileSystem    /                                                                                                                                                                        home/christoph\r\nAlias                                  Alias\r\nAzure                                  SHiPS         AzurePSDrive#Azure\r\nEnv                                    Environment\r\nFunction                               Function\r\nVariable                               Variable\r\n```",
      "created_at": "2019-08-21T12:55:42Z",
      "updated_at": "2019-08-21T12:56:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> What about the Azure Cloud Shell, which starts by default in the Azure drive?\r\n\r\nI guess it is loaded after initial startup and also it is remoting scenario.",
      "created_at": "2019-08-21T13:00:42Z",
      "updated_at": "2019-08-21T13:00:42Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@bergmeister I'm pretty sure CloudShell uses the PowerShell profile to create the Azure drive, logon, and Set-Location so all that is after pwsh startup anyways.",
      "created_at": "2019-08-21T15:41:11Z",
      "updated_at": "2019-08-21T15:41:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Perhaps this code can still be improved, but it also works for Linux where I can\u2019t debug :-(",
      "created_at": "2019-08-22T03:05:55Z",
      "updated_at": "2019-08-22T03:05:55Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@TravisEz13 and @adityapatwardhan Given you two have experiences with FileSystemProvider related code, could you please review this PR when you have time? Thanks!",
      "created_at": "2019-08-29T21:30:57Z",
      "updated_at": "2019-08-29T21:30:57Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@PowerShell/powershell-committee reviewed this one, and unfortunately we think we're going to have to reject it. \r\n\r\n* We're concerned about the risk of unknown behavioral changes. We just don't know enough about what this does to make a statement that this is an okay change to make. For example, as an internal API, other parts of the code could be depending on the non-fast path. \r\n* The performance impact is really too negligible for it to be worth the risk: 1.6% startup time is statistically insignificant, and any RAM savings is going to be gone as soon as PowerShell does anything with the filesystem. ",
      "created_at": "2019-09-04T22:49:05Z",
      "updated_at": "2019-09-04T22:49:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> For example, as an internal API, other parts of the code could be depending on the non-fast path.\r\n\r\nIt is not true. We always call the code with `Directory.GetCurrentDirectory()` or `System.IO.Path.GetDirectoryName(PsUtils.GetMainModule(currentProcess).FileName)` that is always a file system file in predictable form. _No other entry points exist_. So there is no unpredictable risk - we can review all code paths.\r\n\r\n> The performance impact is really too negligible for it to be worth the risk\r\n\r\nMy intention was and remains to go through all startup code and remove delays where possible. I would not be surprised if in the end we would get a 20-30 percent increase in performance. (Is startup scenario important?)\r\nAfter the PR we could optimize the code even more.\r\nWe call SetSessionStateDrive() 4 times at startup. We could call only 2 times.\r\nIn SetSessionStateDrive() we set current drive and then set location that do again set current drive. We could look if we can avoid the duplication.\r\n\r\nIs this enough to continue the work?\r\n",
      "created_at": "2019-09-05T05:56:11Z",
      "updated_at": "2019-09-05T05:56:11Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> No other entry points exist. So there is no unpredictable risk - we can review all code paths.\r\n\r\nAgain, no other entry points exists today doesn't mean it won't in future, because the new API is internal. This is not a good pattern to follow.\r\n\r\n> We call SetSessionStateDrive() 4 times at startup. We could call only 2 times.\r\n\r\nThis was already done by #10416, wasn't it? And that PR has been accepted.",
      "created_at": "2019-09-05T19:01:32Z",
      "updated_at": "2019-09-05T19:01:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I rebased to get #10416 in the branch only now. :-) I see we set a location only once at startup.\r\nI believe that we will not be able to speed up the startup scenario by doing something in one place. I think we will have to review all startup code and make small improvements to many subsystems. The set location code is a place where we can still get perf win in some ms. This will seed up creation of runspaces in all scenarios too.\r\nI added new commit where made the method private and move to SessionStateInternal class with SetLocationStateDrive() method. I hope this addresses your concern about internal API.\r\n\r\nThere is still a comment about AppContainer and I don't still understand how address this after removing globbing code. It seems we need to check that Directory.GetCurrentDirectory() exists?\r\n\r\nThank you for great comments and help!",
      "created_at": "2019-09-06T12:57:43Z",
      "updated_at": "2019-09-06T12:57:43Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> SessionStateInternal class with SetLocationStateDrive() method. I hope this addresses your concern about internal API.\r\n\r\nMy concerns are not just it being internal, but in general that it's risky to change the provider code. We cannot enumerate all possible scenarios that exercise the code path. If I can quickly find one potential problem just by looking at the code (which I'm not familiar with), then that's a signal that there may be more issues with the changes that are unknown yet.\r\n\r\nMy personal principles on performance work are:\r\n1. the work should be well-guided by profiling;\r\n2. it's either low hanging fruits that can be easily reviewed with low risks, or more fundamental algorithm level changes that provide significant perf gain; \r\n3. the most important one -- no behavioral changes should be introduced for a perf changes, unless it's an approved one.",
      "created_at": "2019-09-06T17:04:26Z",
      "updated_at": "2019-09-06T17:04:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Thanks! Sorry if I noisy.\r\n\r\nIn the PR we do not do behavioral changes in the PR. \r\nSetSessionStateDrive() method code and comments say that we use _always_ and _exclusively_ FileSystem provider to set init drive and always set location to Directory.GetCurrentDirectory() if requested.\r\nIt seems the method name is misleading. Perhaps InitSessionStateDriveToFileSystemDrive() would be better.\r\nMoreover, this code is enclosed in try-catch and all exceptions is ignored. Even if something happens in the original code, we probably don\u2019t even see it too. We see only the consequences that is another current location than Directory.GetCurrentDirectory() but we have also another path for AppContainer which implies that no script should depend on this.\r\n\r\nThere are only two scenarios where we set a _folder_ location (that only the PR care).\r\nFirst, runspace creation scenario, we will see wrong prompt in console. Currently it works well.\r\nThen, we will have init file system location not in Directory.GetCurrentDirectory(). I set current drive to Temp:/ and create new runspace - this works well too. We could add the test. \r\nSecond, there is a runspace reset scenario. I can not found how could we test this but at first look it is the same as runspace creation scenario - in the sense that if creation works, then the reset works too.\r\n\r\nLast notice is that single scenario where set location is important is startup one because we want get right prompt. Remaining is not important because we use OS current path for initialization and it is not predictable and reliable source in multi runspace environment which means that nobody should lean on the value and set needed location explicitly in current runspace.\r\n\r\nNow \u043cy only concern is with AppContainer scenario, which is mentioned in the comments. I do not understand how this can happen and how debug it. It looks like Directory.GetCurrentDirectory() returns nonexistent value in AppContainer.\r\nUpdate: I run the PR build in Windows container and pwsh is started with right prompt. Not tested for Linux container. Perhaps there was an issue with .Net Core 1.0?\r\n\r\n\r\n\r\n",
      "created_at": "2019-09-09T08:51:07Z",
      "updated_at": "2019-09-09T13:37:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@joeyaiello @daxian-dbw \r\nI added some commits to make the code more clean and understandable and measure a runspace creation scenario with follow script:\r\n```powershell\r\nmeasure-Command {\r\nfor( $i=0; $i -lt 100; $i++) {\r\n    [runspace] $rs1 = [runspacefactory]::CreateRunspace()\r\n    [runspace] $rs2 = [runspacefactory]::CreateRunspace()\r\n    [runspace] $rs3 = [runspacefactory]::CreateRunspace()\r\n    [runspace] $rs4 = [runspacefactory]::CreateRunspace()\r\n    [runspace] $rs5 = [runspacefactory]::CreateRunspace()\r\n    [runspace] $rs6 = [runspacefactory]::CreateRunspace()\r\n    [runspace] $rs7 = [runspacefactory]::CreateRunspace()\r\n    [runspace] $rs8 = [runspacefactory]::CreateRunspace()\r\n    [runspace] $rs9 = [runspacefactory]::CreateRunspace()\r\n    [runspace] $rs10 = [runspacefactory]::CreateRunspace()\r\n\r\n    $rs1.Open()\r\n    $rs2.Open()\r\n    $rs3.Open()\r\n    $rs4.Open()\r\n    $rs5.Open()\r\n    $rs6.Open()\r\n    $rs7.Open()\r\n    $rs8.Open()\r\n    $rs9.Open()\r\n    $rs10.Open()\r\n\r\n    $rs1.Dispose()\r\n    $rs2.Dispose()\r\n    $rs3.Dispose()\r\n    $rs4.Dispose()\r\n    $rs5.Dispose()\r\n    $rs6.Dispose()\r\n    $rs7.Dispose()\r\n    $rs8.Dispose()\r\n    $rs9.Dispose()\r\n    $rs10.Dispose()\r\n}\r\n\r\n}\r\n```\r\n\r\nBefore the change:\r\n```\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 18\r\nMilliseconds      : 510\r\nTicks             : 185101449\r\nTotalDays         : 0.000214237788194444\r\nTotalHours        : 0.00514170691666667\r\nTotalMinutes      : 0.308502415\r\nTotalSeconds      : 18.5101449\r\nTotalMilliseconds : 18510.1449\r\n```\r\n\r\nAfter the change:\r\n```\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 10\r\nMilliseconds      : 654\r\nTicks             : 106545000\r\nTotalDays         : 0.000123315972222222\r\nTotalHours        : 0.00295958333333333\r\nTotalMinutes      : 0.177575\r\nTotalSeconds      : 10.6545\r\nTotalMilliseconds : 10654.5\r\n```\r\n\r\nThat is 41.5% for the samples (~8 ms per 1 runspace).\r\nPerhaps this is not very much for startup scenario (~2%) but clearly visible for scenarios that actively use runspaces.\r\n",
      "created_at": "2019-09-17T11:04:11Z",
      "updated_at": "2019-09-17T11:04:52Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Interesting. I will take a close look this week. Currently working on driving the preview.4 release.",
      "created_at": "2019-09-17T16:55:00Z",
      "updated_at": "2019-09-17T16:55:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "PerfView screenshot\r\n![image](https://user-images.githubusercontent.com/22290914/65400222-6e9e7c00-ddda-11e9-9502-af70da80267d.png)\r\n\r\nBind takes 26.8% (that is nearly 100% in AutomationEngine constructor) including UpdatesType() - 13.4% and SetSessionDrive() - 12.0.  The both is good candidates for perf investigations.",
      "created_at": "2019-09-23T03:21:01Z",
      "updated_at": "2019-09-23T03:21:01Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> I added some commits to make the code more clean and understandable ...\r\n\r\n@iSazonov I don't see new commits here. Are there new commits in your branch that are not shown here?",
      "created_at": "2019-09-26T00:12:44Z",
      "updated_at": "2019-09-26T00:12:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Closed PR doesn't show new commits. :-)\r\nhttps://github.com/PowerShell/PowerShell/compare/master...iSazonov:perf-startup-setlocationfast\r\nI can pull new PR if you want.",
      "created_at": "2019-09-26T06:42:07Z",
      "updated_at": "2019-09-26T06:47:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw @SteveL-MSFT I'd want to bring back the change. I still believe it is useful for startup and related scenarios.",
      "created_at": "2019-10-17T03:33:28Z",
      "updated_at": "2019-10-17T03:33:28Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@PoshChan Please remind me in 24 hours",
      "created_at": "2020-02-11T17:32:24Z",
      "updated_at": "2020-02-11T17:32:24Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw, this is the reminder you requested 24 hours ago",
      "created_at": "2020-02-12T17:32:49Z",
      "updated_at": "2020-02-12T17:32:49Z"
    }
  ],
  "created_at": "2019-08-21T12:32:51Z",
  "number": 10401,
  "state": "closed",
  "title": "Use fast set location at startup",
  "updated_at": "2020-02-12T17:32:49Z"
}