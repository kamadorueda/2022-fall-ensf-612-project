{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8767",
  "author": "mklement0",
  "body": "If you try to redefine a custom class in the same scope in a script, you get an error that suggests that this is prevented _by design_:\r\n\r\n```powershell\r\nclass Foo { [string] $a = 'a' }\r\n# Redefinition: fails with \"The member 'Foo' is already defined.\"\r\n# Note: Does NOT fail if you submit the definitions one by one at the prompt.\r\nclass Foo { [string] $b = 'b' } \r\n```\r\n\r\nHowever, if \"dot-sourcing\" is involved, it is possible to bypass this check, in a manner that causes unexpected side effects.\r\n\r\nNote that during interactive experimentation you _want_ to be able to redefine classes via dot-sourced scripts:\r\n I often find myself using the following workflow, which currently doesn't work as expected:\r\n\r\n```powershell\r\n# !! [Foo] still has the *previous* definition due to being part of the same script block.\r\n# See repro below.\r\n. <script-with-class-definition-of-Foo>; [Foo]:new()\r\n```\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n. { \r\n  class Foo { [string] $a = 'a' }\r\n  . { class Foo { [string] $b = 'b' } }\r\n  [Foo]::new() | Out-Host\r\n}\r\n[Foo]::new() | Out-Host\r\n```\r\n\r\n# Expected behavior\r\n\r\nThe redefinition of `[Foo]`, given that it effectively happens in the same scope, should be prevented.\r\n\r\nAlternatively, the redefinition should predictably take effect _right away_.\r\nThis would facilitate the testing scenario mentioned above; not sure if a _warning_ is then called for and, if so, how one would suppress it, if needed.\r\n\r\n# Actual behavior\r\n\r\n```none\r\n\r\na\r\n-\r\na\r\n\r\n\r\nb\r\n-\r\nb\r\n\r\n\r\n```\r\n\r\nThat is:\r\n\r\n* The redefinition was quietly accepted, but didn't take effect _inside the block_ being sourced.\r\n\r\n* _After leaving the block_, the redefinition took effect.\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core v6.2.0-preview.3 on macOS 10.14.2\r\nPowerShell Core v6.2.0-preview.3 on Ubuntu 18.04.1 LTS\r\nPowerShell Core v6.2.0-preview.3 on Microsoft Windows 10 Pro (64-bit; Version 1803, OS Build: 17134.471)\r\nWindows PowerShell v5.1.17134.407 on Microsoft Windows 10 Pro (64-bit; Version 1803, OS Build: 17134.471)\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 \r\n> Note: Does NOT fail if you submit the definitions one by one at the prompt.\r\n\r\nAn important aspect of how classes work is the \"compile unit\" i.e. the script text containing the class definition. Each entry at the prompt is its own compile unit which is why you don't see an error when you redefine classes at the prompt.",
      "created_at": "2019-01-28T22:58:50Z",
      "updated_at": "2019-01-28T22:58:50Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "To provide a perhaps a more realistic repro based on a single script; invoking it directly surfaces the problem:\r\n\r\n```powershell\r\n# Define class [Foo] with a specific .Bar() method signature.\r\nclass Foo { [void] Bar($baz) {} }\r\n\r\n# Output the class' GUID and the .Bar() method signature.\r\n[pscustomobject] @{\r\n  'Class GUID' = [Foo].Guid\r\n  'Bar overload' = [Foo]::new().Bar\r\n}\r\n\r\n# Try to redefine the class with a different .Bar() method signature VIA DOT-SOURCING:\r\n# !! THIS REDEFINITION ATTEMPT IS QUIETLY IGNORED,\r\n# !! presumably because the assumption is made that, since the script \r\n# !! runs in the same scope as the caller, [Foo] has already been defined, so it\r\n# !! must be the SAME definition, even though it isn't.\r\n# !! Note that *direct* redefinition of [Foo] in this same script file\r\n# !! would result in an error: \"The member 'Foo' is already defined.\"\r\n'class Foo { [void] Bar() {} }' > tmp.ps1\r\n. ./tmp.ps1; Remove-Item ./tmp.ps1\r\n\r\n# Output the class' GUID and the .Bar() method signature again.\r\n# !! Due to the bug, NO CHANGES WERE MADE - both the GUID and the method signature are unchanged.\r\n# !! If you were to dot-source this whole script itself, the CHANGED definition would be visible AFTERWARDS.\r\n[pscustomobject] @{\r\n  'Class GUID' = [Foo].Guid\r\n  'Bar overload' = [Foo]::new().Bar\r\n}\r\n```\r\n\r\n",
      "created_at": "2021-07-14T03:01:54Z",
      "updated_at": "2021-07-14T03:03:28Z"
    }
  ],
  "created_at": "2019-01-28T18:24:47Z",
  "number": 8767,
  "state": "open",
  "title": "[BUG] Custom classes can be redefined in the same scope, via dot-sourcing, take effect in delayed fashion",
  "updated_at": "2022-02-03T23:49:59Z"
}