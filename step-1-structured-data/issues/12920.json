{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12920",
  "author": "rjmholt",
  "body": ".NET Core 2 introduced the concept of the [AssemblyLoadContext](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.loader.assemblyloadcontext).\r\n\r\nThis offers the possibility of preventing assembly dependency conflicts between modules, and even the possibility of unloading assemblies.\r\n\r\nThis has been successfully [implemented in at least one PowerShell module in the wild](https://github.com/PowerShell/PowerShellEditorServices/blob/master/src/PowerShellEditorServices.Hosting/Internal/PsesLoadContext.cs). There's a blog post detailing how to do this [here](https://devblogs.microsoft.com/powershell/resolving-powershell-module-assembly-dependency-conflicts/).\r\n\r\nHowever, the question remains as to whether PowerShell should attempt to provide this functionality itself.\r\n\r\nWhile it may sound like it definitely should, there are a number of subtle considerations, and it may be that PowerShell won't be able to get them right for all modules, making module loading more complex and error prone.\r\n\r\nSome things to consider:\r\n\r\n- Should PowerShell users be able to choose whether a module is loaded through an ALC?\r\n- Should module authors be able to choose the same?\r\n- Loading through an ALC can create type identity issues if a module exposes its identities' types in its own API. This is a legitimate thing to do (e.g. a YAML-handling module that emits YAML objects defined by its underlying library). How do we handle this? Are we responsible for detecting it ahead of time? (In many cases this will be impossible, since the exposed APIs on an object in PowerShell are determined by reflection at runtime)\r\n- Passing dependency-typed objects between commands from different modules is also a valid scenario. Is there special handling here?\r\n- Is it feasible (both technically and in terms of maintenance) to provide tooling to help module authors analyse and understand how assembly load contexts should work with their module?\r\n- Will using ALCs for modules affect PowerShell classes in terms of how they are currently implemented or how they should work?\r\n\r\n-------------------------------------------\r\n\r\n**Note:** An RFC about this topic that was withdrawn can be found here: https://github.com/PowerShell/PowerShell-RFC/blob/master/X-Withdrawn/RFC0043-Loading-Module-Into-Isolated-AssemblyLoadContext.md\r\nThe biggest challenge is the type identity issue. The module dependency is another challenge -- how to handle a required module? Today, the required module is loaded once and shared by multiple modules that depend on it.\r\n\r\nSome other places where ALCs have been discussed:\r\n\r\n- #2083\r\n- #5504\r\n- https://github.com/PowerShell/PowerShell/issues/12052\r\n- https://github.com/PowerShell/PowerShell/issues/11571\r\n- https://github.com/PowerShell/PowerShell/pull/11088\r\n- https://github.com/PowerShell/PowerShell/issues/10955",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "> Should PowerShell users be able to choose whether a module is loaded through an ALC?\r\n\r\nNope. No way, no how. ALCs are a pretty advanced concept, and I very much doubt you could reliably code a module to work _both_ in an isolated and the shared ALC. Letting users of a module turn that on or off on a whim is pretty much just going to break things, and not much else.\r\n\r\n> Should module authors be able to choose the same?\r\n\r\nYeah, sure, it may not be super useful for _all_ modules, but it definitely could come in handy for some. Authors should be able to pick, 100%.\r\n\r\n> Is it feasible (both technically and in terms of maintenance) to provide tooling to help module authors analyse and understand how assembly load contexts should work with their module?\r\n\r\nFeasible? Potentially. On the assumption that we do make it a feature, though, tooling and documentation will be **necessary**. \r\n\r\nDon't know enough to comment on the other bits, I think, I'll leave that to the cleverer cookies. \ud83d\ude42 ",
      "created_at": "2020-06-09T01:10:26Z",
      "updated_at": "2020-06-09T01:10:26Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> > Should PowerShell users be able to choose whether a module is loaded through an ALC?\n> \n> Nope. No way, no how. ALCs are a pretty advanced concept... Letting users of a module turn that on or off on a whim is pretty much just going to break things, and not much else.\n\nI definitely agree with this point. I just want to raise a counterpoint which is that trying to defuse a module dependency conflict is a user scenario.\n\nIf only module authors get to decide, then they must do the due diligence on what other modules they might conflict with. When a user uses a module and it conflicts with something, there\u2019s no switch they can try to get them out of a bind (like there is with`-SkipEditionCheck`).\n\nOTOH perhaps that\u2019s exactly as it should be. Users find a conflict and circle back to authors ask them to evaluate ALC loading.\n\n",
      "created_at": "2020-06-09T01:35:38Z",
      "updated_at": "2020-06-09T01:35:38Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "I feel like we've already had parts of this discussion elsewhere. Is there an issue I've forgotten about?",
      "created_at": "2020-06-09T02:12:15Z",
      "updated_at": "2020-06-09T02:12:15Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "#2083 was the big one.  #5504 also looks related.\r\n\r\n---\r\n\r\nThis would be a fantastic tool to allow module developers to take on dependencies without worrying about breaking the environment.  One thing I'd really like to see is an easy way to allow public types from the modules assembly to be resolvable by PowerShell, while still \"hiding\" the dependencies.  Maintaining the ability to strongly type variables, use the `-is` operator, read `OutputType` decorations etc.\r\n\r\nPersonally I would only want to see this surfaced as an option for the module author, definitely off by default.",
      "created_at": "2020-06-09T03:25:51Z",
      "updated_at": "2020-06-09T12:18:13Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> #2083 was the big one. #5504 also looks related.\r\n\r\nAh! Thanks!",
      "created_at": "2020-06-09T05:22:12Z",
      "updated_at": "2020-06-09T05:22:12Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> Note: An RFC about this topic that was withdrawn can be found here: https://github.com/PowerShell/PowerShell-RFC/blob/master/X-Withdrawn/RFC0043-Loading-Module-Into-Isolated-AssemblyLoadContext.md\r\nThe biggest challenge is the type identity issue. The module dependency is another challenge -- how to handle a required module? Today, the required module is loaded once and shared by multiple modules that depend on it.\r\n\r\nI updated the issue description with the above content, just to call out that we have an RFC about this that was withdrawn at the time.\r\nWe can potentially revive that RFC as the discussion here progresses.",
      "created_at": "2020-06-12T18:18:45Z",
      "updated_at": "2020-06-12T18:20:29Z"
    },
    {
      "author": "mattpwhite",
      "author_association": "NONE",
      "body": "I'm not sure that I have a specific suggestion here, but wanted to provide some input about how we've hacked around these issues.\r\n\r\n* We have a large set of internally developed modules, with a number of third party modules mixed in.  Many of these have dependencies on .NET libraries.  The types from those libraries are used directly in PS code (including as members of PS classes) as well as within binary modules.  Module A might be a binary module that depends on types in an assembly that is loaded by module B, that kind of thing.\r\n* Our internal modules load their dependencies via a custom loader module.  This module's responsibility is to do things like avoid locking the dependency on disk (either by making a \"shadow copy\" elsewhere or using `Assembly.Load` to load from a byte array).  The loader also registers an `AssemblyResovle` handler that tries to smooth over version conflicts (dicey, but less bad than simply failing).  Finally, the loader is provided with a litmus test type name, if it finds that type in an already loaded assembly, it returns that assembly rather than actually loading anything new.\r\n* At least with the internal modules, we are careful to always have a single module \"own\" the dependency.  For instance, we have our Json.NET wrapper module, if other modules depend on Json.NET (or load assemblies that depend on Json.NET), they declare a dependency on the Json.NET wrapper module and let it take care of loading it first.  Between this and the `AssemblyResolve` handler, things mostly work.\r\n* In cases where we have to deal with third party modules with dependencies on old versions of things, we try to arrange things such that our version gets loaded first (and the `AssemblyResolve` handler with it).  This requires doing dirty things sometimes - patching the third party manifest/psm1 and/or not actually declaring all dependencies in the manifest.  It's gross, but at least in 5.1, there are so many bugs with expressing module dependencies (mostly related to bad dependency graph building) that we're kinda used to it.\r\n\r\nThis is all terrible, and we'd absolutely welcome something better.  On the other hand, we have been able to make it mostly work for our scenarios.  While I agree that asking module authors to engage with and understand ALCs might not be a great idea, I also wouldn't want the PS runtime to impose some \"standard\" behavior that breaks scenarios that can be made to work now (albeit badly).\r\n\r\nI'm not sure how you differentiate the scenario where you're loading some module because you just want access to commands it exports and the scenario where you're loading it because you want the side effect of making types in the assemblies it loads to be made available to you (either directly or to another dependency you're going to load).  At least I can't see how a default behavior would know which of these you're looking for unless you had some way to explicitly indicate that.  That might not mean fully exposing the gory details of ALCs, but you'd need *something*.  Making the 80% case easy and the 20% case impossible is worse than the 100% case being hard.",
      "created_at": "2020-06-14T17:01:48Z",
      "updated_at": "2020-06-14T17:01:48Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "For my most common use cases (Dumb example: I want to use Json 10 and Powershell uses Json 11+), if I could just specify assemblies or nuget packages in the manifest that would load into my module-specific ALC context but the rest of my module stays in the main context, I'd be happy. As long as I follow a couple rules: \r\n\r\n1. I don't leak any of those classes out of the module ALC/scope\r\n2. I only export PSCustomObjects or non-inherited Powershell Class objects\r\n\r\nThen I can make my modules more broadly compatible. A wider ability of Powershell to \"auto-detect\" this so that module authors don't have to even think about it would be great, but to at least get something out the door it's a good place to start.",
      "created_at": "2020-07-02T18:50:06Z",
      "updated_at": "2020-07-02T18:50:42Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> A wider ability of Powershell to \"auto-detect\" this so that module authors don't have to even think about it would be great\r\n\r\nIf you mean autodetection of whether those rules are followed, we could never do it safely because it's unfortunately undecidable given current APIs. Something like `WriteObject` could emit any type of object at runtime and the particular object emitted could depend on any arbitrary program logic, so it can't be known statically.\r\n\r\nI don't mean that as a way of saying everything is impossible or shouldn't be done, more just want to establish that no strong solution exists for some of the problems we face here.",
      "created_at": "2020-07-02T19:21:39Z",
      "updated_at": "2020-07-02T19:21:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I suggest to start at 7.2 milestone with most simple and obvious - add an experimental parameter to Import-Module cmdlet so that PowerShell users can load module dependencies in ALCs. This will open the way for broader experimentation and provide more specific and useful feedback.",
      "created_at": "2020-11-23T06:03:54Z",
      "updated_at": "2020-11-23T06:03:54Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov I'm not sure it makes sense as a `Import-Module` parameter.  This would be something the module *author* would opt into, not the user.  If the module author doesn't design specifically for isolated use, I think it's more likely to break than work.",
      "created_at": "2020-11-23T14:19:30Z",
      "updated_at": "2020-11-23T14:19:30Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "@SeeminglyScience I agree, I think at this point just make some helpful cmdlets to load assemblies into an ALC for the module author without them needing to know C#.\r\n\r\nSomething like `Add-Type -Path MyAssembly -AssemblyContextName MyModuleContext` and show a warning if any of the types imported into the context already exist in the main ALC and that they should not export these types outside the module or they will get weird errors.",
      "created_at": "2020-11-23T16:43:35Z",
      "updated_at": "2020-11-23T16:45:42Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Yeah that's the right direction for sure.  I think even that has it's obstacles though, especially around dependency resolution.  I know PSES had to register some custom assembly resolution handlers, not sure how typical that is.",
      "created_at": "2020-11-23T16:54:41Z",
      "updated_at": "2020-11-23T16:54:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Our goal is to get working modules despite the presence of conflicting assembly versions. Simply loading an assembly using Add-Type, or say it should be the concern of the module author, won't get us a step further.\r\nBefore making any complex decisions, we first need to simply load the module and then its dependencies into ALC.\r\nFor this we need an experimental parameter. In the future, it can be changed or removed as unnecessary if PowerShell is already smart enough.\r\n\r\n",
      "created_at": "2020-11-23T17:17:33Z",
      "updated_at": "2020-11-23T17:17:33Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov agreed, that's the ideal, I'm just saying baby steps to at least get a friendly ALC context for a module developer would be great for 7.2 vs. a more ambitious full module resolution and all the edge cases that would probably push it to 7.3 or more.",
      "created_at": "2020-11-23T17:45:01Z",
      "updated_at": "2020-11-23T17:45:01Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Our goal is to get working modules despite the presence of conflicting assembly versions. Simply loading an assembly using Add-Type, or say it should be the concern of the module author, won't get us a step further.\r\n\r\nTo clarify, I'm not saying it *should* be, I'm saying it *has* to be because of how they work.  It's not the perfect solution it may have seemed like originally, it's incredibly finicky and needs to be actively designed around.",
      "created_at": "2020-11-23T17:54:07Z",
      "updated_at": "2020-11-23T17:54:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> it's incredibly finicky\r\n\r\nThis is why we need the experimental parameter to load two modules and do live testing.\r\n",
      "created_at": "2020-11-23T18:00:11Z",
      "updated_at": "2020-11-23T18:00:11Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "I'm not saying it's unpredictable, I'm saying it needs to be explicitly designed around.",
      "created_at": "2020-11-23T18:05:35Z",
      "updated_at": "2020-11-23T18:05:35Z"
    },
    {
      "author": "Stewartarmbrecht",
      "author_association": "NONE",
      "body": "While this is being worked out, what is the direction to typical PowerShell users who are unable to import two modules into the same session.  In my case I am unable to import powershell-yaml and platyPS into the same session.\r\n\r\n```\r\n=====> PowerShell Integrated Console v2020.6.0 <=====\r\nPS /home/codespace/workspace> Install-Module powershell-yaml\r\nPS /home/codespace/workspace> Install-Module platyPS\r\nPS /home/codespace/workspace> Import-Module powershell-yaml\r\nPS /home/codespace/workspace> Import-Module platyPS\r\nImport-Module: Assembly with same name is already loaded\r\n```\r\n\r\nIs the response simply that you can not use these two modules together?  Or is the expectation that the user should log an issue with one of the module owners?  Is this something that would be reasonable to expect a fix for from the module owner?",
      "created_at": "2021-01-18T15:26:21Z",
      "updated_at": "2021-01-18T15:26:21Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "@Stewartarmbrecht the current workaround I use is to \"`start-job`\" the other module in a new process and do my work with it there, then return the output back to its \"parent\" process. However if you need tight integration between two modules this gets ugly fast.\r\n\r\nThe only other option in terms of module author support would be to expand Powershell Standard to include some of the most common libraries, so that module authors use the same assembly versions and don't conflict. This is fraught with issues however especially if a module author requires a newer version of a module.",
      "created_at": "2021-01-18T16:03:58Z",
      "updated_at": "2021-01-18T16:03:58Z"
    },
    {
      "author": "Stewartarmbrecht",
      "author_association": "NONE",
      "body": "Thanks @JustinGrote I'll work on running PlatyPS using Start-Job.",
      "created_at": "2021-01-18T16:36:43Z",
      "updated_at": "2021-01-18T16:36:43Z"
    },
    {
      "author": "Jeff-Lewis",
      "author_association": "NONE",
      "body": "Besides an impact on memory, what are the drawbacks of having every PS module load its dependencies into it's own ALC by default? This is [how npm works](https://lexi-lambda.github.io/blog/2016/08/24/understanding-the-npm-dependency-model/) and it makes it easy to depend on a lot of external packages.",
      "created_at": "2021-07-23T21:05:54Z",
      "updated_at": "2021-07-23T21:05:54Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "@Jeff-Lewis the biggest one is module owner discipline. If you return an ALC type to the user, and the type is already loaded, you get the very confusing \"cannot cast MyType to type MyType\" error message. There would have to be extensive sanity checking here to make this usable to the \"common\" module author who's not a guru.",
      "created_at": "2021-07-23T21:10:37Z",
      "updated_at": "2021-07-23T21:10:37Z"
    },
    {
      "author": "rmbolger",
      "author_association": "NONE",
      "body": "I don't really have any suggestions. But as a script-based module author, I'd just like to request that whatever solution eventually comes will work with script-based modules in addition to binary modules.\r\n\r\nThere doesn't seem to be any good workarounds at the moment that don't involve getting into esoteric (to me) .NET compilation stuff. My only option seems to be trying to match dependency versions with other modules that my users report conflicts with.",
      "created_at": "2022-09-01T20:40:30Z",
      "updated_at": "2022-09-01T20:40:30Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "@rmbolger Are you basically expecting `Add-Type` to automatically load into an ALC if it is in a module context? That may be extremely difficult.",
      "created_at": "2022-09-01T20:45:52Z",
      "updated_at": "2022-09-01T20:45:52Z"
    },
    {
      "author": "rmbolger",
      "author_association": "NONE",
      "body": "I don't use `Add-Type` today. I use `RequiredAssemblies` in the module manifest and the conflicting module does as well. I think I would expect some sort of additional manifest property that would explicitly tell PS to load the assembly into an ALC. Though I'm still not sure exactly what that means in terms of using it in my code.\r\n\r\nMy module also works on both PS 5.1 and 6+. So I'd hope the manifest changes would remain backwards compatible which probably means they'd have to live in the `PrivateData` section?",
      "created_at": "2022-09-01T20:58:01Z",
      "updated_at": "2022-09-01T20:58:01Z"
    }
  ],
  "created_at": "2020-06-09T00:09:00Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine"
  ],
  "number": 12920,
  "state": "open",
  "title": "Discussion: should PowerShell implement assembly load contexts for module dependencies, and how?",
  "updated_at": "2022-09-01T20:58:01Z"
}