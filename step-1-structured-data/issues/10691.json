{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10691",
  "author": "msoliver",
  "body": "# Support Question\r\n\r\nWith the release of PowerShell Core, how can an application choose which version of Powershell (Powershell 5.x or PowerShell Core) is being called when it using hosting automation library (system.management.automation)? Something about the runspace that should be created? or maybe the connection info?\r\n\r\n## Official support\r\n\r\n[PowerShell Support Lifecycle](https://aka.ms/pslifecycle)\r\n\r\n## Community Resources\r\n\r\n[Slack][powershell-slack] and [Discord][powershell-discord] Community Chat - Interactive chat with other PowerShell enthusiasts. Both Slack and Discord are bridged via a bot and can seamlessly talk to each other.\r\n[PowerShell.org Forum](https://powershell.org/forums/) - Search or post new general PowerShell usage questions\r\n\r\n[powershell-slack]: https://join.slack.com/t/powershell/shared_invite/enQtMzA3MDcxNTM5MTkxLTBmMWIyNzhkYzVjNGRiOTgxZmFlN2E0ZmVmOWU5NDczNTY2NDFhZjFlZTM1MTZiMWIzZDcwMGYzNjQ3YTRkNWM\r\n[powershell-discord]: https://discordapp.com/invite/AtzXnJM\r\n",
  "closed_at": "2019-10-05T00:00:36Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "From what I know (others can correct me if I'm wrong), but if you're hosting PowerShell, I believe you'll be using whatever version matches the version of your NuGet package that you're pulling the libraries in with.\r\n\r\nThe PowerShellStandard.Library reference package, on the other hand, currently only works with 5.1 iirc.",
      "created_at": "2019-10-03T02:14:59Z",
      "updated_at": "2019-10-03T02:14:59Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "If you're hosting PowerShell, it's based on whatever runtime you compile for (sort of).  If you're targeting `netcoreapp`, then you need to reference the PowerShell Core SDK.  If you're compiling for `net4xx` then you need to reference either `PowerShellStandard.Library` (if they've fixed the hosting scenario) or the older reference library package that properly redirects to the GAC assembly.\r\n\r\nBasically, if you're hosting PowerShell, you're starting whatever version you're bringing with you.",
      "created_at": "2019-10-03T02:28:40Z",
      "updated_at": "2019-10-03T02:28:40Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Cross-posting from an answer to [your question on Stack Overflow](https://stackoverflow.com/q/58211358/45375):\r\n\r\n---\r\n\r\nHere's an overview of the **PowerShell SDK-related NuGet packages**:<sup>Adapted from [here](https://github.com/PowerShell/PowerShell/issues/8625#issuecomment-456515037).</sup>\r\n\r\n* [`Microsoft.PowerShell.5.ReferenceAssemblies`](https://www.nuget.org/packages/Microsoft.PowerShell.5.ReferenceAssemblies/) -  for building **Windows PowerShell** applications, based on the **.NET Framework** (Windows-only).\r\n\r\n* [`Microsoft.PowerShell.SDK`](https://www.nuget.org/packages/Microsoft.PowerShell.SDK/) - for building **PowerShell Core** applications, based on **.NET Core** (cross-platform).\r\n\r\n* [`PowerShellStandard.Library`](https://www.nuget.org/packages/PowerShellStandard.Library/) - for building **_modules and hosts_  that are compatible with *both* Windows PowerShell and PowerShell Core** (cross-platform) - but [**note**](https://github.com/PowerShell/PowerShellStandard):\r\n\r\n  * \"PowerShell Standard is a **reference assembly** that has been created to assist developers in **creating modules and PowerShell hosts which will *run on PowerShell***. The reference assembly **contains no actual implementation** but rather will allow you to use only APIs that exist across different versions of PowerShell. This means that **you still need to run within a PowerShell runtime.**\"\r\n\r\n  * For creating *stand-alone* applications, use one of the first two packages.\r\n\r\n\r\n\r\n* <del>`System.Management.Automation`</del> - not recommended for direct use.\r\n\r\n",
      "created_at": "2019-10-03T04:07:06Z",
      "updated_at": "2019-10-03T17:04:38Z"
    },
    {
      "author": "msoliver",
      "author_association": "NONE",
      "body": "Okay thanks - but one last question - what about the scenario in which my app is creating a remote runspace on another server? If that server has both variants of PowerShell - which one will execute?",
      "created_at": "2019-10-03T11:15:54Z",
      "updated_at": "2019-10-03T11:15:54Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@msoliver: I'll respond on StackOverflow. \r\n\r\n",
      "created_at": "2019-10-03T17:09:28Z",
      "updated_at": "2019-10-03T17:09:28Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2019-10-05T00:00:36Z",
      "updated_at": "2019-10-05T00:00:36Z"
    }
  ],
  "created_at": "2019-10-03T01:51:12Z",
  "number": 10691,
  "state": "closed",
  "title": "How to automate either PowerShell or PowerShell Core for same machine",
  "updated_at": "2019-10-05T00:00:36Z"
}