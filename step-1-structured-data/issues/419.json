{
  "_url": "https://github.com/PowerShell/PowerShell/issues/419",
  "author": "andschwa",
  "body": " VSO create date - 12/22/2015 11:04:00    \n",
  "closed_at": "2022-02-16T16:00:40Z",
  "comments": [
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@JamesWTruher perhaps you could help us figure out how to do this properly. The C# code to determine Linux/Windows/OS X is trivial.\n",
      "created_at": "2016-01-28T22:30:47Z",
      "updated_at": "2016-01-28T22:30:47Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "sure - I'll be happy to help with that\n",
      "created_at": "2016-01-29T00:36:32Z",
      "updated_at": "2016-01-29T00:36:32Z"
    },
    {
      "author": "palladia",
      "author_association": "CONTRIBUTOR",
      "body": "Need more requirements on this cmdlet...\n\n$os = Get-OperatingSystem\n$os | format-list *\nName         : Linux\nVersion     :  14.04.1-Ubuntu\n\n???\n",
      "created_at": "2016-02-04T17:02:46Z",
      "updated_at": "2016-02-04T17:02:46Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "That we do. @JamesWTruher how do you think this cmdlet should work?\n",
      "created_at": "2016-02-04T21:11:05Z",
      "updated_at": "2016-02-04T21:11:05Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "Since I doubt that wmi/cim is not available, it should probably reflect uname output (except as an object)\n\nj\n\nFrom: Andy Schwartzmeyer [mailto:notifications@github.com]\nSent: Thursday, February 4, 2016 1:12 PM\nTo: PowerShell/PowerShell-Linux PowerShell-Linux@noreply.github.com\nCc: Jim Truher Jim.Truher@microsoft.com\nSubject: Re: [PowerShell-Linux] Implement a PowerShell cmdlet that returns the OS (#419)\n\nThat we do. @JamesWTruherhttps://github.com/JamesWTruher how do you think this cmdlet should work?\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PowerShell/PowerShell-Linux/issues/419#issuecomment-180051628.\n",
      "created_at": "2016-02-04T22:08:45Z",
      "updated_at": "2016-02-04T22:08:45Z"
    },
    {
      "author": "zach-folwick",
      "author_association": "CONTRIBUTOR",
      "body": "I could have swore we wrote a p/invoke that calls uname in C.  It should be in monad-native\n",
      "created_at": "2016-02-12T18:55:59Z",
      "updated_at": "2016-02-12T19:24:32Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "FWIW, `[System.Runtime.InteropServices.RuntimeInformation]::OSDescription` on my MacBook returns a string very similar to `uname -a`.\n\n``` ps\n> [System.Runtime.InteropServices.RuntimeInformation]::OSDescription       \nDarwin 15.3.0 Darwin Kernel Version 15.3.0: Thu Dec 10 18:40:58 PST 2015; root:xnu-3248.30.4~1/RELEASE_X86_64\n> uname -a        \nDarwin marvin 15.3.0 Darwin Kernel Version 15.3.0: Thu Dec 10 18:40:58 PST 2015; root:xnu-3248.30.4~1/RELEASE_X86_64 x86_64\n```\n",
      "created_at": "2016-02-21T19:52:41Z",
      "updated_at": "2016-02-21T19:52:41Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "Sigh, anything that returns a string is unfortunate. We should try to find out how that string is Created and use the data rather than the result\n\nSent from Outlook Mobilehttps://aka.ms/qtex0l\n\n---\n\nFrom: Andy Schwartzmeyer <notifications@github.com<mailto:notifications@github.com>>\nSent: Sunday, February 21, 2016 11:52 AM\nSubject: Re: [PowerShell] Implement a PowerShell cmdlet that returns the OS (#419)\nTo: PowerShell/PowerShell <powershell@noreply.github.com<mailto:powershell@noreply.github.com>>\nCc: Jim Truher <jim.truher@microsoft.com<mailto:jim.truher@microsoft.com>>\n\nFWIW, [System.Runtime.InteropServices.RuntimeInformation]::OSDescription on my MacBook returns a string very similar to uname -a.\n\n> [System.Runtime.InteropServices.RuntimeInformation]::OSDescription       Darwin 15.3.0 Darwin Kernel Version 15.3.0: Thu Dec 10 18:40:58 PST 2015; root:xnu-3248.30.4~1/RELEASE_X86_64> uname -a        Darwin marvin 15.3.0 Darwin Kernel Version 15.3.0: Thu Dec 10 18:40:58 PST 2015; root:xnu-3248.30.4~1/RELEASE_X86_64 x86_64\n\n## \n\nReply to this email directly or view it on GitHubhttps://github.com/PowerShell/PowerShell/issues/419#issuecomment-186897474.\n",
      "created_at": "2016-02-21T20:07:42Z",
      "updated_at": "2016-02-21T20:07:42Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Agreed. I wish their interface was better. I'm trying to play around with what's available so I can do a simple switch on the current OS. We should probably open an issue with .NET to get a better interface.\n",
      "created_at": "2016-02-21T20:21:42Z",
      "updated_at": "2016-02-21T20:21:42Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "We should just look at the implementation, and see if we can use it\n\nSent from Outlook Mobilehttps://aka.ms/qtex0l\n\nOn Sun, Feb 21, 2016 at 12:21 PM -0800, \"Andy Schwartzmeyer\" <notifications@github.com<mailto:notifications@github.com>> wrote:\n\nAgreed. I wish their interface was better. I'm trying to play around with what's available so I can do a simple switch on the current OS. We should probably open an issue with .NET to get a better interface.\n\n## \n\nReply to this email directly or view it on GitHubhttps://github.com/PowerShell/PowerShell/issues/419#issuecomment-186906437.\n",
      "created_at": "2016-02-21T20:31:28Z",
      "updated_at": "2016-02-21T20:31:28Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "#623 added basic support for this. Further implementation/refinement should be done in the Platform module.\n",
      "created_at": "2016-03-11T20:50:16Z",
      "updated_at": "2016-03-11T20:50:16Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "The platform module has been removed. The variables `$IsWindows`, `$IsLinux`, `$IsOSX`, and `$IsCore` are now an integral part of PowerShell.\n",
      "created_at": "2016-04-20T23:45:26Z",
      "updated_at": "2016-08-18T00:07:34Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "I think this issue should remain open as it covers the ability to have a \"system info\" object that tells you a lot more than which type of OS you're on.\n",
      "created_at": "2016-04-20T23:46:35Z",
      "updated_at": "2016-04-20T23:46:35Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "I'm adding this to the Hacktoberfest issues. It's a feature request that really just needs a design first (so an implementer may want to start with an RFC), or propose a cmdlet/module that can just be imported (rather than built into SMA).\n",
      "created_at": "2016-10-07T17:01:51Z",
      "updated_at": "2016-10-07T17:01:51Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Changed the title to reflect that this issue addresses more detailed OS/environment info (a la `uname -a`) \n\nI would say that #1635 is not a dupe, but rather a slightly different ask to add the very basic OS info as a property to `$PSVersionTable`\n",
      "created_at": "2016-10-28T18:35:12Z",
      "updated_at": "2016-10-28T18:35:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "[Some comment about uname](http://unix.stackexchange.com/questions/136959/where-does-uname-get-its-information-from)\r\n[uname sources](https://launchpad.net/ubuntu/+source/coreutils/8.25-2ubuntu2)\r\n\r\nA brief summary: \r\n1. `uname` use syscall to get values from kernel.\r\n2. some from the values is compile time kernel contants.\r\n3. `uname` returns platform-dependent values (at compile time used `#if`)\r\n\r\nThus, the command may return unpredictable results depending on the platform and linux distrib.\r\nI believe that we should have own `system info` object.\r\n\r\nSo questions:\r\nwhat is the `OS information`?\r\nwhat is the `environment information`?\r\n\r\nWould it be a good start  to pay attention to `get-computerinfo` that returns tons of information about Windows and determine what properties we should port and properties we should add?\r\n\r\n\r\nUpdate: Currently CoreFX parse  a kernel's `uname` (see [here](https://github.com/dotnet/corefx/blob/f0ccd9742065ee2aa296448fe3dd38ef6ff77af9/src/System.Runtime.Extensions/src/System/Environment.Unix.cs#L320) and [here](https://github.com/dotnet/corefx/blob/master/src/Native/Unix/System.Native/pal_runtimeinformation.cpp#L17))\r\n",
      "created_at": "2016-11-18T14:27:42Z",
      "updated_at": "2017-03-08T15:33:38Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Probably a big undertaking, but we should probably modify get-computerinfo to not rely on WMI and use .Net api's where possible to have it portable.\r\n\r\nCC @jeffbi ",
      "created_at": "2017-03-04T19:44:28Z",
      "updated_at": "2017-03-04T19:44:28Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "I also wonder what the delta is between this and bringing `System.Environment.OSVersion` into `$PSVersionTable` with #1635",
      "created_at": "2017-03-06T17:41:08Z",
      "updated_at": "2017-03-06T17:41:08Z"
    },
    {
      "author": "jeffbi",
      "author_association": "CONTRIBUTOR",
      "body": "Currently, Get-ComputerInfo pulls three items from the Registry and uses five PInvoked native functions. Pretty much everything else comes from WMI.",
      "created_at": "2017-03-06T20:21:44Z",
      "updated_at": "2017-03-06T20:21:44Z"
    },
    {
      "author": "paulbailey1979",
      "author_association": "NONE",
      "body": "Is this still up for grabs? What about a cmdlet that returns properties similar to Ansible's setup module - https://github.com/ansible/ansible-modules-core/blob/devel/windows/setup.ps1 . This is the Windows source but a same named module exists for Linux that returns similar properties if possible. I'm not sure what's possible on Mac except it's like unix in some areas.",
      "created_at": "2019-05-30T00:13:33Z",
      "updated_at": "2019-05-30T00:13:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@paulbailey1979 Feel free to grab this. Now we is on .Net Core 3.0 and we should review that it exposes useful for us.",
      "created_at": "2019-05-30T03:03:36Z",
      "updated_at": "2019-05-30T03:03:36Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Just came across this issue.\r\n\r\nI've done some work close to this in the PSScriptAnalyzer repo, [here](https://github.com/PowerShell/PSScriptAnalyzer/blob/development/PSCompatibilityCollector/Microsoft.PowerShell.CrossCompatibility/Collection/PlatformInformationCollector.cs), where we collect platform information.\r\n\r\nA few points:\r\n\r\n- CIM/WMI isn't available on all platforms (even some Windows ones, due to lockdown) and isn't terribly fast. In cases where a Windows SKU ID is wanted, there are one or two alternatives.\r\n- The [`uname` syscall](http://man7.org/linux/man-pages/man2/uname.2.html) is very inconvenient to p/invoke since it requires setting inline C-strings (i.e. char arrays) of platform-dependent size on a struct passed in ([StackOverflow question discussing this](https://stackoverflow.com/questions/55195344/get-uname-release-field-from-c-sharp-in-net-core-on-linux)). On Linux, it's much better to read from `/proc/sys/kernel`. macOS I haven't explored, but hopefully either (1) there's some other reasonable way to access that information, or (2) the size of `struct utsname` is more reliable\r\n- `[System.Runtime.InteropServices.RuntimeInformation]::OSDescription` might be ok to use on macOS. It's a problem on Linux because it doesn't capture the kernel version fully (if you're on an alternative kernel or patchset, there's no info on that).\r\n- The `/etc/*-release` files are also worth capturing on Linux and are readily parseable as CSV/INI. However, they're not well standardised.\r\n    - [This man page](https://www.linux.org/docs/man5/os-release.html) summarises the `os-release` concept. It's surprisingly involved.\r\n    - `lsb-release` is a less formalised standard, but is still widespread. [This gist](https://gist.github.com/natefoo/814c5bf936922dad97ff) captures variants on many distros\r\n- Getting the OS architecture may be harder than it looks because, last time I checked, some of `System.Runtime.InteropServices.RuntimeInformation`'s APIs don't work properly on Win 7 kernels (https://github.com/dotnet/corefx/issues/33885).",
      "created_at": "2019-06-03T18:14:24Z",
      "updated_at": "2019-06-03T18:19:52Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@paulbailey1979 if you want to tackle this, I would suggest starting with a RFC detailing what info will be collected (and how) as I'm sure there will be some debate on what information is most critical to collect",
      "created_at": "2019-06-05T10:44:00Z",
      "updated_at": "2019-06-05T10:44:00Z"
    },
    {
      "author": "lukeb1961",
      "author_association": "NONE",
      "body": "coming up to its fifth birthday...",
      "created_at": "2020-12-20T21:57:17Z",
      "updated_at": "2020-12-20T21:57:17Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "We recommend that this should be released to the gallery as a separate module.",
      "created_at": "2021-02-25T21:49:36Z",
      "updated_at": "2021-02-25T21:49:36Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "FYI, this approach is handy on Linux:\r\n```\r\n$osRelease = Get-Content /etc/os-release | ConvertFrom-StringData\r\n$osRelease\r\n\r\nName                           Value\r\n----                           -----\r\nNAME                           \"Ubuntu\"\r\nVERSION                        \"18.04.4 LTS (Bionic Beaver)\"\r\nID                             ubuntu\r\nID_LIKE                        debian\r\nPRETTY_NAME                    \"Ubuntu 18.04.4 LTS\"\r\nVERSION_ID                     \"18.04\"\r\nHOME_URL                       \"https://www.ubuntu.com/\"\r\nSUPPORT_URL                    \"https://help.ubuntu.com/\"\r\nBUG_REPORT_URL                 \"https://bugs.launchpad.net/ubuntu/\"\r\nPRIVACY_POLICY_URL             \"https://www.ubuntu.com/legal/terms-and-policies/privacy-policy\"\r\nVERSION_CODENAME               bionic\r\nUBUNTU_CODENAME                bionic\r\n```",
      "created_at": "2021-05-19T22:38:52Z",
      "updated_at": "2021-05-19T22:38:52Z"
    },
    {
      "author": "G31st",
      "author_association": "NONE",
      "body": "Any traction on this ? ",
      "created_at": "2021-07-08T10:11:23Z",
      "updated_at": "2021-07-08T10:11:23Z"
    },
    {
      "author": "lukeb1961",
      "author_association": "NONE",
      "body": "I see other people have done interesting things in collating this sort of info.\r\nhttps://github.com/Jinjinov/Hardware.Info \n\n<blockquote><img src=\"https://opengraph.githubassets.com/33ce3d5932b9ab4372467035a99eb3c8ba33887249905f7b16e79115230cd4e7/Jinjinov/Hardware.Info\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/Jinjinov/Hardware.Info\">Jinjinov/Hardware.Info</a></strong></div><div>Battery, BIOS, CPU - processor, storage drive, keyboard, RAM - memory, monitor, motherboard, mouse, NIC - network adapter, printer, sound card - audio card, graphics card - video card. Hardware.Inf...</div></blockquote>",
      "created_at": "2021-07-14T06:46:17Z",
      "updated_at": "2021-07-14T06:46:19Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "The CMDLETS Working Group has reviewed this issue and feels that this is a great candidate for a community module held on the PowerShell Gallery. As such, we are closing this issue as **Will Not Implement**.\r\n\r\nThere are some published modules and scripts that already met this requirement. We urge the original poster and others to collaborate on a community module if the existing scripts/modules are not satisfactory.  \r\n\r\nIf there is adequate interest in such a cmdlet, the working group can review this decision.\r\n\r\n@iSazonov @SteveL-MSFT  - can one of you please close this formally?\r\n",
      "created_at": "2022-02-15T14:59:34Z",
      "updated_at": "2022-02-15T15:02:52Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as external and has not had any activity for **1 day**. It has been be closed for housekeeping purposes.",
      "created_at": "2022-02-16T16:00:39Z",
      "updated_at": "2022-02-16T16:00:39Z"
    }
  ],
  "created_at": "2016-01-22T20:45:08Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets",
    "WG-DevEx-Portability",
    "Resolution-External",
    "Hacktoberfest"
  ],
  "number": 419,
  "state": "closed",
  "title": "Implement a PowerShell cmdlet that returns detailed OS/environment information",
  "updated_at": "2022-02-16T16:00:40Z"
}