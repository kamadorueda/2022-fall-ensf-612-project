{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15387",
  "author": "adamsitnik",
  "body": "# PR Summary\r\n\r\nThis PR adds support for comparing the performance of various .NET Runtimes.\r\n\r\nThe users can specify a single `TargetFramework` using `dotnet run` or `Start-Benchmarking`:\r\n\r\n```cmd\r\nStart-Benchmarking -Filter *using* -TargetFramework net5.0\r\ndotnet run -c Release -f net5.0 --filter *using*\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/6011991/117952343-624f9580-b315-11eb-8840-ce63cc8135a5.png)\r\n\r\nOr multiple target framework monikers using `dotnet run`:\r\n\r\n```cmd\r\ndotnet run -c Release --filter Engine.Parsing.UsingStatement -f netcoreapp2.1 --runtimes netcoreapp2.1 net5.0 net6.0\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/6011991/117952128-24527180-b315-11eb-9b96-76b8e18b0dde.png)\r\n\r\nFor more information please refer to [BenchmarkDotNet docs](https://github.com/dotnet/BenchmarkDotNet/blob/master/docs/articles/configs/toolchains.md#toolchains)\r\n\r\n## PR Context\r\n\r\nhttps://github.com/dotnet/sdk/issues/17013\r\n\r\nTo get it working I had to:\r\n\r\n* clear `TargetFramework`  as  `Test.Common.props` sets `TargetFramework` to `net6.0`. This was mandatory to be able to target multiple TFMs.\r\n* specify all package references in explicit way. It seems to be some kind of SDK/MSBuild limitation. If the project references project `A` which references project `B` and we want to reference their **packages** for different TFMs, we have to explicitly reference package `A` **and** `B`. Referencing just `A` gives errors about missing `B`.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n\r\n@daxian-dbw @adityapatwardhan PTAL",
  "closed_at": "2021-05-14T15:32:36Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@adamsitnik Thanks for submitting a PR!\r\n\r\nI played with your changes, and it seems to break the ability to target a specific version of `Microsoft.PowerShell.SDK`. For example:\r\n```\r\nPS: benchmarks> $env:PERF_TARGET_VERSION = '7.2.0-preview.5'\r\nPS: benchmarks> dotnet run -c release -f net6.0 --filter *using* --keepFiles\r\n\r\nC:\\arena\\source\\PowerShell\\test\\perf\\benchmarks\\powershell-perf.csproj : error NU1202: Package Microsoft.PowerShell.Commands.Diagnostics 7.2.0-preview.5 is not compatible with netcoreapp3.1 (.NETCoreApp,Version=v3.1). Package Microsoft.PowerShell.Commands.Diagnostics 7.2.0-preview.5 supports: net6.0 (.NETCoreApp,Version=v6.0)\r\nC:\\arena\\source\\PowerShell\\test\\perf\\benchmarks\\powershell-perf.csproj : error NU1202: Package Microsoft.PowerShell.Commands.Management 7.2.0-preview.5 is not compatible with netcoreapp3.1 (.NETCoreApp,Version=v3.1). Package Microsoft.PowerShell.Commands.Management 7.2.0-preview.5 supports: net6.0 (.NETCoreApp,Version=v6.0)\r\nC:\\arena\\source\\PowerShell\\test\\perf\\benchmarks\\powershell-perf.csproj : error NU1202: Package Microsoft.PowerShell.Commands.Utility 7.2.0-preview.5 is not compatible with netcoreapp3.1 (.NETCoreApp,Version=v3.1). Package Microsoft.PowerShell.Commands.Utility 7.2.0-preview.5 supports: net6.0 (.NETCoreApp,Version=v6.0)\r\n\r\n...\r\n```\r\nIn this case, `7.2.0-preview.5` is a preview version built against `net6.0`.\r\nI tried to make it work but my efforts didn't go anywhere. Tried `--envVars PERF_TARGET_VERSION:7.2.0-preview.5` but it turned out the environment variable specified this way doesn't affect the build phase of the auto-generated project.\r\n\r\nTo us, the ability to compare against different PowerShell SDK is more important than running benchmarks against different .NET runtimes. To some extent, running benchmarks with different PowerShell SDKs targeting the same `net6.0` runtime help us to eliminate the runtime difference, and only comparing with the changes in PowerShell.\r\n\r\nBTW, the building of the auto-generated project is still biting us because we cannot specify `--no-dependencies` for the first try\r\n> ```\r\n> // start dotnet build -c Release /p:DebugType=portable --no-restore /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 /p:Deterministic=true /p:Optimize=true in C:\\arena\\source\\PowerShell\\test\\perf\\benchmarks\\bin\\release\\net6.0\\Job-DYFHWE\r\n> // command took 58.65s and exited with 1\r\n>```\r\n\r\nI think it makes sense to try `--no-dependencies` first, and fall back to a full build if that failed. I can submit a PR to BenchmarkDotNet to make that change if you agree that's the way to go.",
      "created_at": "2021-05-12T22:30:18Z",
      "updated_at": "2021-05-13T04:32:32Z"
    },
    {
      "author": "adamsitnik",
      "author_association": "CONTRIBUTOR",
      "body": "> I played with your changes, and it seems to break the ability to target a specific version \r\n\r\nGreat catch, I've fixed that.\r\n\r\nIn order to verify which version is being benchmarked I've added a setup method that just prints assembly version:\r\n\r\n```cs\r\n[GlobalSetup]\r\npublic void PrintAssemblyVersion() => Console.WriteLine(typeof(Parser).Assembly.FullName);\r\n```\r\n\r\nAnd run it without env var set:\r\n\r\n```cmd\r\ndotnet run -c release -f net6.0 --filter *using*\r\n```\r\n\r\n```log\r\nSystem.Management.Automation, Version=7.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\r\n```\r\n\r\nWith env var set:\r\n\r\n```cmd\r\n$env:PERF_TARGET_VERSION = '7.2.0-preview.5'\r\ndotnet run -c release -f net6.0 --filter *using*\r\n```\r\n\r\n```log\r\nSystem.Management.Automation, Version=7.2.0.5, Culture=neutral, PublicKeyToken=31bf3856ad364e35\r\n```\r\n\r\nAnd with env var not set, but against multiple TFMs:\r\n\r\n```cmd\r\n$env:PERF_TARGET_VERSION = ''\r\ndotnet run -c release -f net6.0 --filter *using* --runtimes netcoreapp2.1 net5.0 net6.0\r\n```\r\n\r\n```log\r\n// Runtime=.NET 5.0.6 (5.0.621.22011), X64 RyuJIT\r\nSystem.Management.Automation, Version=7.1.3.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\r\n\r\n// Runtime=.NET 6.0.0 (6.0.21.21801), X64 RyuJIT\r\nSystem.Management.Automation, Version=7.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\r\n\r\n// Runtime=.NET Core 2.1.28 (CoreCLR 4.6.30015.01, CoreFX 4.6.30015.01), X64 RyuJIT\r\nSystem.Management.Automation, Version=6.2.7.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\r\n```\r\n",
      "created_at": "2021-05-13T07:48:32Z",
      "updated_at": "2021-05-13T07:48:32Z"
    },
    {
      "author": "adamsitnik",
      "author_association": "CONTRIBUTOR",
      "body": "> the building of the auto-generated project is still biting us\r\n\r\nI've noticed that `dotnet run` was taking a LOT of time to start as well. It turned out that if we build `PowerShell.sln` in **R**elease and then try to build any project in **r**elease (change of the capitalization of the first letter) **MSBuild recognizes this as two different configurations and rebuilds all dependencies**. The fix is to always use the same config name. I've updated the script and README.md for that.\r\n\r\n```log\r\ncd C:\\Projects\\PowerShell\\\r\nStart-PSBuild -Clean -Configuration Release\r\ncd test\\perf\\benchmark\r\ndotnet build -c release -f net6.0\r\n(omitted for brevity)\r\nTime Elapsed 00:00:21.15\r\ncd C:\\Projects\\PowerShell\\\r\nStart-PSBuild -Clean -Configuration Release\r\ncd test\\perf\\benchmark\r\ndotnet build -c Release -f net6.0\r\n(omitted for brevity)\r\nTime Elapsed 00:00:04.49\r\n```\r\n\r\n\r\n\r\n",
      "created_at": "2021-05-13T08:44:30Z",
      "updated_at": "2021-05-13T08:44:30Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Thanks for the quick turnaround. I wasn't aware that the MSBuild is case sensitive :) I will review again today.",
      "created_at": "2021-05-13T16:35:11Z",
      "updated_at": "2021-05-13T16:35:11Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@adamsitnik Your changes look good! `<TargetFramework Condition=\"'$(PerfTargetVersion)' == ''\"></TargetFramework>` is a smart way to solve the \"using specific SDK version\" scenario, and I definitely learnt something new!\r\n\r\nI made some updates to your changes mainly in 3 aspects:\r\n1. use `netcoreapp3.1` and the corresponding `7.0.6` version PS sdk, because the 6.x versions were out of life cycle.\r\n2. add more comments.\r\n3. update the `Start-Benchmarking` function to support `-Runtime` and add validations.\r\n\r\nPlease take a look at my changes and let me know if I did anything wrong. Thanks!",
      "created_at": "2021-05-13T22:40:48Z",
      "updated_at": "2021-05-13T22:41:24Z"
    },
    {
      "author": "adamsitnik",
      "author_association": "CONTRIBUTOR",
      "body": "> Please take a look at my changes and let me know if I did anything wrong\r\n\r\n@daxian-dbw your changes look good to me, I've also tested it locally and everything works as expected :shipit: ",
      "created_at": "2021-05-14T09:46:10Z",
      "updated_at": "2021-05-14T09:46:10Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@adamsitnik Thank you again for the help!",
      "created_at": "2021-05-14T15:33:42Z",
      "updated_at": "2021-05-14T15:33:42Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.2.0-preview.6` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0-preview.6)\n",
      "created_at": "2021-05-27T17:31:59Z",
      "updated_at": "2021-05-27T17:31:59Z"
    }
  ],
  "created_at": "2021-05-12T09:39:46Z",
  "number": 15387,
  "state": "closed",
  "title": "add support for comparing various .NET Runtimes performance",
  "updated_at": "2021-05-27T17:31:59Z"
}