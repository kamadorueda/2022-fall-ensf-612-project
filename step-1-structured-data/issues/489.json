{
  "_url": "https://github.com/PowerShell/PowerShell/issues/489",
  "author": "niroyb",
  "body": "``` shell\nDescribing Json.NET LINQ Parsing\n [-] Error occurred in Describe block 71ms\n   Exception calling \"LoadFrom\" with \"1\" argument(s): \"Could not load file or assembly '/home/powershell/workspace/test-omi-psrp/src/omi/Unix/output/bin/Newtonsoft.Json.dll' or one of its dependencies. The system cannot find the file specified.\"\n   At /home/powershell/workspace/test-omi-psrp/test/powershell/Json.Tests.ps1:13 char:5\n```\n",
  "closed_at": "2016-02-04T21:16:44Z",
  "comments": [
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "This gets even more fun. The test uses `[System.AppContext]::BaseDirectory` to get the location of the DLLs. This _ought_ to be correct, but it turns out that .NET returns the location of the running native executable (which is not necessarily always the same thing). I'll report this to .NET, and in the meanwhile, update the test to check if we've defined `CORE_ROOT`.\n",
      "created_at": "2016-02-04T19:51:37Z",
      "updated_at": "2016-02-04T19:51:37Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "See dotnet/corefx#5903.\n",
      "created_at": "2016-02-04T19:58:16Z",
      "updated_at": "2016-02-04T19:58:16Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Fixed with work-around. See [build](http://win2012-ps-01:8080/job/test-omi-psrp-from-windows/20/console).\n",
      "created_at": "2016-02-04T20:55:04Z",
      "updated_at": "2016-02-04T20:55:04Z"
    }
  ],
  "created_at": "2016-02-04T19:32:30Z",
  "number": 489,
  "state": "closed",
  "title": "Wrong load path for Newtonsoft dll when remoting",
  "updated_at": "2016-08-05T17:42:51Z"
}