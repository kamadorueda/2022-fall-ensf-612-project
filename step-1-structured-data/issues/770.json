{
  "_url": "https://github.com/PowerShell/PowerShell/issues/770",
  "author": "palladia",
  "body": null,
  "closed_at": "2016-04-14T15:46:47Z",
  "comments": [
    {
      "author": "palladia",
      "author_association": "CONTRIBUTOR",
      "body": "If a PowerShell Module lists \"DotNetFrameworkVersion\" as a requirement in its manifest (.psd1) file, importing this module on Linux will crash with an unhelpful NullReferenceException.\n\nWhat's happening is that PowerShell will call IsNetFrameworkVersionSupported() in engine/Utils.cs, which uses Windows Registry to check for the .NET Framework version.  On Linux, this Registry call fails miserably.\n",
      "created_at": "2016-04-05T18:07:57Z",
      "updated_at": "2016-04-05T18:07:57Z"
    },
    {
      "author": "palladia",
      "author_association": "CONTRIBUTOR",
      "body": "To fix this problem, we need to decide if it makes sense to compare .NET Core version with full .NET Framework version.  \n\nFrom what I can gather, our .NET Core is 5.0(?), and it's based off .NET 4.5.1(?).  I haven't figured out how to determine all this programmatically...\n",
      "created_at": "2016-04-05T18:22:38Z",
      "updated_at": "2016-04-05T18:22:38Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Well, they're separate frameworks entirely. There is no correspondence between them. I can go into more detail later.\n",
      "created_at": "2016-04-05T18:24:01Z",
      "updated_at": "2016-04-05T18:24:01Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "I believe that @dhmsgit has already thought about this. Calling him into the discussion\n",
      "created_at": "2016-04-07T21:50:13Z",
      "updated_at": "2016-04-07T21:50:13Z"
    },
    {
      "author": "dhmsgit",
      "author_association": "NONE",
      "body": "As Andy said, DotNetFrameworkVersion was introduced long before .NET Core existed and refers to the full .NET Framework which cannot be compared from a versioning perspective to .NET Core - they are different frameworks with different versioning (.NET Core versioning has been reset to 1.0). DotNetFrameworkVersion is only relevant for full .NET Framework. There is no equivalent for .NET Core. DevDiv is moving away from people taking a dependency on a particular version, so they might not be exposing any reliable / supported way to detect .NET Core version. Modules that are compatible with PowerShell Core / .NET Core should not have DotNetFrameworkVersion in their manifests.\n",
      "created_at": "2016-04-07T22:42:43Z",
      "updated_at": "2016-04-07T22:42:43Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "I think @palladia's approach is probably the most user-friendly. Perhaps we should issue a warning though to let the user know they _should_ remove the `DotNetFrameworkVersion` from their manifest.\n",
      "created_at": "2016-04-14T15:57:08Z",
      "updated_at": "2016-04-14T15:57:08Z"
    }
  ],
  "created_at": "2016-04-05T18:03:40Z",
  "number": 770,
  "state": "closed",
  "title": "How to determine .NET Framework version number in a .NET Core environment",
  "updated_at": "2016-04-14T15:57:08Z"
}