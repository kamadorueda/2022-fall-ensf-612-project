{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9138",
  "author": "iSazonov",
  "body": "# Summary of the new feature/enhancement\r\n\r\nIn critical environment before update to new PowerShell Core version consumers should test their scripts.\r\n\r\nWarnings about breaking changes would help them to locate places where errors is possible.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nWe could use (1) warning stream or (2) trace to write these warnings. It could be done in cmdlet Beginning() methods.\r\nWe will need to have a breaking change database and update it every new release.\r\nWe could have a global config option to set a PowerShell version to compare with.",
  "closed_at": "2019-04-10T12:29:16Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I wonder if this should be done as part of [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) Compatibility rules.  We would still need to keep track of the changes (I believe we've been pretty good at using the `Breaking Change` label.",
      "created_at": "2019-03-14T17:31:30Z",
      "updated_at": "2019-03-14T17:31:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> we've been pretty good at using the Breaking Change label.\r\n\r\nYes, it is very helpful. Only we have some breaking changes before we introduce the label. :-(\r\n\r\n> I wonder if this should be done as part of PSScriptAnalyzer Compatibility rules. \r\n\r\nIt seems we have a tracking issue there for the feature (without progress). \r\nI think it is different things. Both is useful. Injecting in engine could expose more in-depth information. Some things can also be caught only during script execution (at runtime) (and others only in PSScriptAnalyzer).\r\n",
      "created_at": "2019-03-14T17:43:54Z",
      "updated_at": "2019-03-14T17:43:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We could place the database in external module and inject in PowerShell hooks to use the module if it is loaded.",
      "created_at": "2019-03-14T17:47:28Z",
      "updated_at": "2019-03-14T17:47:28Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@bergmeister @rjmholt Have you thoughts how can we make friends with PSSA?",
      "created_at": "2019-03-19T05:00:01Z",
      "updated_at": "2019-03-19T05:00:01Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "I suggest to write a (custom) rule for every upgrade (i.e. 6.1->6.2, 6.2->6.3, etc.). The diagnostic record can not only tell about the breaking change but it can also offer a correction, thereby enabling an auto-fix scenario (I added a `-Fix` switch to PSSA for that). When people upgrade their PowerShell version, then they can run the rule to check for compatibility and/or upgrade their script. To keep things simple, people should upgrade only one minor version at a time or apply the custom rule in this order.",
      "created_at": "2019-03-19T05:30:31Z",
      "updated_at": "2019-03-19T05:32:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "My question is more about what do we can add in PowerShell repo to help users and PSSA?",
      "created_at": "2019-03-19T06:24:57Z",
      "updated_at": "2019-03-19T06:24:57Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "## Warning at runtime in PowerShell\r\n\r\nI think the runtime overhead of checking for breaking change usages on the fly in PowerShell itself is probably not justifiable. By itself it's not huge, but as the expectations of what we do at runtime pile up we get bogged down with all the \"magic\" PowerShell does. And after you've seen the warning, you probably want to suppress it without suppressing other warnings. So we'd then need a new API (like a preference variable) to govern that.\r\n\r\nWe could theoretically do something like add a `BreakingChangeAttribute` to all the APIs that get changed, but I think that would get out of hand quickly and if we changed our minds we'd be left with them strewn throughout the codebase just like all the Microsoft linter exceptions currently in there. Plus a number of breaking changes wouldn't be easily isolated to a single method call or cmdlet.\r\n\r\nSo I think PSScriptAnalyzer is the right place for it -- we already have a lot of infrastructure for this there.\r\n\r\n## Using existing PSScriptAnalyzer rules\r\n\r\nThe [compatibility rule work](https://github.com/PowerShell/PSScriptAnalyzer/blob/development/RuleDocumentation/UseCompatibleCommands.md) should already pick up most cmdlet changes automatically - we just need to generate a profile for each version. And it wouldn't be hard to invest in a little bit more work there over time to pick up other things.\r\n\r\nThe `PSUseCompatibleSyntax` rule can be updated by hand fairly easily for other things like operators that have been introduced later.\r\n\r\n## Getting PSScriptAnalyzer to warn about purely semantic breaking changes\r\n\r\nWhat would remain is calls/uses that look the same but act differently -- semantic rather than syntactic changes. For example, if we were to allow negative indices for splitting, that isn't always statically checkable (you can use a variable there), but no matter what approach we take, we can't capture all breaking changes from an analysis standpoint. The simple solution is to just report on any syntax that *could* be using a semantically breaking change.\r\n\r\nThen with each release, we would just need an AstVisitor that finds each syntax that might represent a breaking change and emits an informational diagnostic record saying \"the way this worked changed in the versions you're targeting\" and possibly a suggested fix if appropriate.\r\n\r\nTracking the breaking changes themselves would be nice to automate in general, but without significant investment I don't think that can be done. Instead we need an architecture like:\r\n\r\n- A single rule (`PSAvoidBreakingChanges` or something)\r\n- Per-version-diff AstVisitor class for breaking changes (e.g. `IBreakingChangeCheckVisitor`)\r\n- Code written by hand for each release\r\n- Logic to compose visitors for multi-version differences (6.0 -> 6.2 => 6.0 -> 6.1 -> 6.2)\r\n\r\nThis is still a lot of work, but avoids the need for some breakable serialisation format to describe:\r\n\r\n- What syntax has changed in meaning due to breaking changes\r\n- What the old and new meaning is\r\n- How to correct it\r\n\r\nAs much as I like declarative formats, imperative is easiest there.\r\n\r\n## Conclusion\r\n\r\nAnyway, I don't know how feasible that is, who's signing up to do that work or how high priority we think it is, but that's how I would approach it:\r\n\r\n- `PSUseCompatibleCommands` for cmdlet availability/parameter/input set changes\r\n- `PSUseCompatibleSyntax` for changes in the language like operators, `using` statements, interfaces\r\n- A new rule like `PSAvoidBreakingChanges` for semantic changes, with a hand-written AstVisitor each release\r\n\r\n> My question is more about what do we can add in PowerShell repo to help users and PSSA?\r\n\r\nNothing in the PowerShell repo. PowerShell has evolved to become a full ecosystem, and we've made the investment in PSSA. The contribution to be made lies in PSSA.",
      "created_at": "2019-03-26T15:56:46Z",
      "updated_at": "2019-03-26T16:14:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Nothing in the PowerShell repo. \r\n\r\nWith current workflow we create new issues in docs repo is needed. It is great for keeping docs being up to date.\r\nFor PSSA we have nothing in our workflow. And I still don't understand how we could keep PSSA rules being up to date with the \"nothing in the PowerShell repo\". So my thoughts is that we could add something like doc tags, attributes and so on.",
      "created_at": "2019-03-26T17:04:22Z",
      "updated_at": "2019-03-26T17:04:22Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Well we already have the breaking change tag. It feels like the next step is to say \"when we do a release, use the breaking change tags to write a new visitor for PSSA\".\r\n\r\nI think we're essentially in agreement -- my proposal is that there's just a new workflow for adding to a checker in PSSA when you make a new breaking change, same as for documenting things. The only real changes I see there for the PowerShell repo though are adding a checkbox in PRs maybe and writing up the new workflow in a doc (since it's a bit complicated)",
      "created_at": "2019-03-26T17:16:54Z",
      "updated_at": "2019-03-26T17:17:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@rjmholt Thanks for great feedback!\r\n@SteveL-MSFT We could add new check box \"write a new breaking change visitor for PSSA\" in our release template.",
      "created_at": "2019-03-26T17:26:29Z",
      "updated_at": "2019-03-26T17:26:29Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> We could add new check box \"write a new breaking change visitor for PSSA\" in our release template.\r\n\r\nIf we decide that's the way to go, we should first do the work to create the rule and make creating a visitor a straightforward, mechanical task. Creating the base stuff in PSSA shouldn't be too difficult but requires some investment.",
      "created_at": "2019-03-26T17:31:26Z",
      "updated_at": "2019-03-26T17:31:26Z"
    }
  ],
  "created_at": "2019-03-14T17:12:04Z",
  "labels": [
    "Issue-Enhancement",
    "Resolution-Answered"
  ],
  "number": 9138,
  "state": "closed",
  "title": "Feature Request: Warnings about breaking changes",
  "updated_at": "2019-04-10T12:29:16Z"
}