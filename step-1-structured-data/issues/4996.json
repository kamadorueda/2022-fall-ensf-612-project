{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4996",
  "author": "amanarneja",
  "body": "Used the following Azure PS commands and discovered that a Nested JObject is just being converted to an Array instead of an Object.\r\nIn the repro steps the type of $result.Outputs.mediaServiceFullInfo.Value is of type Newtonsoft.Json.Linq.JObject as you can see in the final JSON Value doesn't have the Key and Values and has a Square Bracket around it.\r\n$result.Outputs.mediaServiceFullInfo.Value.ToString() does output the Json Snippet under Value correctly. \r\n\r\n\r\nSteps to reproduce\r\n------------------\r\n[Update] : Simplified repro steps in the comments. \r\n```powershell\r\n$resourceGroupName = 'ExampleResourceGroup'\r\nNew-AzureRmResourceGroup -Name $resourceGroupName -Location 'Central US' -Verbose -Force\r\n$result = New-AzureRmResourceGroupDeployment -Name ExampleDeployment -ResourceGroupName $resourceGroupName `\r\n  -TemplateUri https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/media-service-output-primary-key/azuredeploy.json\r\n\r\n$result.Outputs | ConvertTo-Json\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n{\r\n  \"mediaServiceFullInfo\": {\r\n    \"type\": \"Object\",\r\n    \"value\": {\r\n      \"primaryAuthEndpoint\": \"https://wamsprodglobal001acs.accesscontrol.windows.net/\",\r\n      \"secondaryAuthEndpoint\": \"https://wamsprodglobal002acs.accesscontrol.windows.net/\",\r\n      \"scope\": \"urn:windowsazuremediaservices\"\r\n    }\r\n  },\r\n  \"mediaServicePrimaryKey\": {\r\n    \"type\": \"String\",\r\n  }\r\n}\r\n\r\nActual behavior\r\n---------------\r\n\r\n`{\r\n    \"mediaServiceFullInfo\":  {\r\n                                 \"Type\":  \"Object\",\r\n                                 \"Value\":  [\r\n                                               \"https://wamsprodglobal001acs.accesscontrol.windows.net/\",\r\n                                               \"https://wamsprodglobal002acs.accesscontrol.windows.net/\",\r\n                                               \"urn:windowsazuremediaservices\"\r\n                                           ]\r\n                             },\r\n    \"mediaServicePrimaryKey\":  {\r\n                                   \"Type\":  \"String\",\r\n                               }\r\n}\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\nPS C:\\WINDOWS\\system32> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.16299.15\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.16299.15\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n\r\n",
  "closed_at": "2017-11-03T18:35:10Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I had to scrub out keys from your issue.  Is it possible for you to construct a simpler repro?",
      "created_at": "2017-10-03T22:39:56Z",
      "updated_at": "2017-10-03T22:39:56Z"
    },
    {
      "author": "amanarneja",
      "author_association": "NONE",
      "body": "Hey Steve\r\nThe keys were just samples and had been modified, sorry should have mentioned that.\r\n\r\nHere's a simple Repro : \r\n\r\n$EgJObject = New-Object -TypeName Newtonsoft.Json.Linq.JObject\r\n$EgJObject.Add(\"TestValue1\", \"123456\")\r\n$EgJObject.Add(\"TestValue2\", \"78910\")\r\n$EgJObject.Add(\"TestValue3\", \"99999\")\r\n$dict = @{}\r\n$dict.Add('JObject', $EgJObject)\r\n$dict.Add('StrObject', 'This is a string Object')\r\n$properties = @{'DictObject' = $dict;\r\n                           'RandomString' = 'A quick brown fox jumped over the lazy dog'}\r\n$object = New-Object -TypeName psobject -Property $properties\r\n$object | ConvertTo-Json\r\n{\r\n    \"RandomString\":  \"A quick brown fox jumped over the lazy dog\",\r\n    \"DictObject\":  {\r\n                       \"JObject\":  [\r\n                                       \"123456\",\r\n                                       \"78910\",\r\n                                       \"99999\"\r\n                                   ],\r\n                       \"StrObject\":  \"This is a string Object\"\r\n                   }\r\n}\r\n\r\nAs you can see, in this case too Under JObject, we should have gotten \r\n\r\n\"JObject\": {\r\n               \"TestValue1\" : \"123456\"\r\n...\r\n\r\n\r\n",
      "created_at": "2017-10-04T02:20:13Z",
      "updated_at": "2017-10-04T13:55:54Z"
    },
    {
      "author": "leftler",
      "author_association": "NONE",
      "body": "I too am running in to this issue, the biggest time we run in to it is trying to generate compressed json from the output of a `New-AzureRmResourceGroupDeployment` call.",
      "created_at": "2017-10-04T13:51:04Z",
      "updated_at": "2017-10-04T13:51:04Z"
    },
    {
      "author": "leftler",
      "author_association": "NONE",
      "body": "Here is a better formatted version of amanarneja's example\r\n\r\n```\r\n$EgJObject = New-Object -TypeName Newtonsoft.Json.Linq.JObject\r\n$EgJObject.Add(\"TestValue1\", \"123456\")\r\n$EgJObject.Add(\"TestValue2\", \"78910\")\r\n$EgJObject.Add(\"TestValue3\", \"99999\")\r\n$dict = @{}\r\n$dict.Add('JObject', $EgJObject)\r\n$dict.Add('StrObject', 'This is a string Object')\r\n$properties = @{'DictObject' = $dict; 'RandomString' = 'A quick brown fox jumped over the lazy dog'}\r\n$object = New-Object -TypeName psobject -Property $properties\r\n$object | ConvertTo-Json\r\n```\r\nThis outputs\r\n```\r\n{\r\n    \"RandomString\":  \"A quick brown fox jumped over the lazy dog\",\r\n    \"DictObject\":  {\r\n                       \"JObject\":  [\r\n                                       \"123456\",\r\n                                       \"78910\",\r\n                                       \"99999\"\r\n                                   ],\r\n                       \"StrObject\":  \"This is a string Object\"\r\n                   }\r\n}\r\n```\r\nThe expected output is\r\n```\r\n{\r\n    \"RandomString\":  \"A quick brown fox jumped over the lazy dog\",\r\n    \"DictObject\":  {\r\n                       \"JObject\": {\r\n                                       \"TestValue1\" : \"123456\"\r\n                                       \"TestValue2\" : \"78910\",\r\n                                       \"TestValue3\" : \"99999\"\r\n                                   },\r\n                       \"StrObject\":  \"This is a string Object\"\r\n                   }\r\n}\r\n```\r\n\r\nAlso if you change the last line to `$object | ConvertTo-Json -depth 4` you get the even worse output\r\n```\r\n{\r\n    \"RandomString\":  \"A quick brown fox jumped over the lazy dog\",\r\n    \"DictObject\":  {\r\n                       \"JObject\":  [\r\n                                       [\r\n                                           [\r\n\r\n                                           ]\r\n                                       ],\r\n                                       [\r\n                                           [\r\n\r\n                                           ]\r\n                                       ],\r\n                                       [\r\n                                           [\r\n\r\n                                           ]\r\n                                       ]\r\n                                   ],\r\n                       \"StrObject\":  \"This is a string Object\"\r\n                   }\r\n}\r\n```\r\n",
      "created_at": "2017-10-04T14:02:09Z",
      "updated_at": "2017-10-04T14:07:03Z"
    },
    {
      "author": "leftler",
      "author_association": "NONE",
      "body": "As a work around when you import the module `AzureRM.Resources` it also loads Newtonsoft.Json.dll. So instead of using `$result.Outputs | ConvertTo-Json` you can do\r\n```\r\n[Newtonsoft.Json.JsonConvert]::SerializeObject($result.Outputs, [Newtonsoft.Json.Formatting]::Indented)\r\n```\r\nWithout needing to do any additional importing of types because the library is already loaded. This will give you your expected output as a string.",
      "created_at": "2017-10-18T14:57:25Z",
      "updated_at": "2017-10-18T14:58:36Z"
    }
  ],
  "created_at": "2017-10-03T19:53:16Z",
  "labels": [
    "Resolution-Fixed",
    "WG-Cmdlets-Utility"
  ],
  "number": 4996,
  "state": "closed",
  "title": "ConvertTo-JSON: Nested Object of type Newtonsoft.Json.Linq.JObject not converted to Json properly",
  "updated_at": "2017-11-03T18:36:58Z"
}