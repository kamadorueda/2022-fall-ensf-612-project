{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8496",
  "author": "SteveL-MSFT",
  "body": "## PR Summary\r\n\r\nExplicitly remove the old `Open` regkey that enabled the `Open Here` context menu functionality as it was renamed to `OpenPwsh` and MSI didn't automatically remove the old key.\r\n\r\n@bergmeister can you help review as @TravisEz13 is on vacation currently\r\n\r\nFix https://github.com/PowerShell/PowerShell/issues/8290\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed - Issue link:\r\n- **Testing - New and feature**\r\n    - [x] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [ ] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2018-12-27T09:11:00Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@bergmeister thanks for looking into this.  Our plan is to move to MSIX (post 6.2) so I don't think we want to spend a bunch of time trying getting things perfect now.  ",
      "created_at": "2018-12-20T17:15:41Z",
      "updated_at": "2018-12-20T17:15:41Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov I think we're good to merge this one",
      "created_at": "2018-12-27T07:47:43Z",
      "updated_at": "2018-12-27T07:47:43Z"
    },
    {
      "author": "Karl-WE",
      "author_association": "NONE",
      "body": "This issue will still affect users that upgrade to the latest PoSh Core 6.2.x and once had a preview release.\r\nIt will also not be cleared for those that upgrade any PoSh Core Preview.\r\n\r\n**Suggestion** \r\nplease implement a cleanup with the next release of PoSH 6.x or 7.x, no matter if the user checks the explorer integration \r\nThe MSI can check if preview-6 is still installed by wmi check and directory check on\r\nC:\\Program Files\\PowerShell\\6-preview\r\n\r\nif the directory and WMI call results there is no 6 preview installed cleanup should purge the orphaned registry keys.\r\n\r\n![image](https://user-images.githubusercontent.com/45657752/66715604-907d9400-edc5-11e9-828f-057eb5c20cdb.png)\r\n\r\n\r\n",
      "created_at": "2019-10-13T12:28:51Z",
      "updated_at": "2019-10-13T12:28:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@Karl-WE If I remember correctly a conclusion was  to do not fix the old and rare issue. Also taking in account how msi works it is not easy.",
      "created_at": "2019-10-13T16:08:59Z",
      "updated_at": "2019-10-13T16:08:59Z"
    },
    {
      "author": "Karl-WE",
      "author_association": "NONE",
      "body": "I have searched the entire registry for \r\n\"PowerShell 6-preview\" but no finds. \r\n\r\nHow can we remove this manually?",
      "created_at": "2019-10-13T18:04:51Z",
      "updated_at": "2019-10-13T18:04:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Yes, of cause. You need to search \"pwsh.exe\" ",
      "created_at": "2019-10-14T03:16:05Z",
      "updated_at": "2019-10-14T03:16:05Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "The registry keys are here:\r\nhttps://github.com/PowerShell/PowerShell/blob/bf5956193fde80da118446bf92fede0035cf5014/assets/Product.wxs#L186\r\nAlternatively, you can also just install a preview of 6 again with the explorer context menu again and uninstall it explicitly, which will always remove the registry entries, it is just the case of using an upgrade install, which can leave registry entries behind. I agree with @isazonov that we should not need to invest effort for more polished previews, that's just the nature of previews (saving time for the dev team to get early feedback without having to invest time in proper support).",
      "created_at": "2019-10-14T10:28:18Z",
      "updated_at": "2019-10-14T10:28:18Z"
    },
    {
      "author": "Karl-WE",
      "author_association": "NONE",
      "body": "Hi all I've made a script to remove this issue. It worked for me, hope it can help others. \r\n\r\n[Cleanup-PowershellCoreOrphans.zip](https://github.com/PowerShell/PowerShell/files/3731712/Cleanup-PowershellCoreOrphans.zip)\r\n\r\nTried to paste the code here but formatting didn't worked out as I expected so sorry for the zip file.\r\n",
      "created_at": "2019-10-15T22:30:13Z",
      "updated_at": "2019-10-15T22:44:12Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "I wrote something similar that will remove entries for all PowerShell versions that are no longer installed. Hope this helps.\r\n\r\n[Remove-PowerShellOpenWithEntries.zip](https://github.com/PowerShell/PowerShell/files/4643554/Remove-PowerShellOpenWithEntries.zip)\r\n",
      "created_at": "2020-05-18T10:39:42Z",
      "updated_at": "2020-05-18T10:39:42Z"
    },
    {
      "author": "o-l-a-v",
      "author_association": "NONE",
      "body": "I too made a little PowerShell script to clean up right click context menus.\r\nRun with ```-WriteChanges``` to actually remove anything.\r\n\r\n<details>\r\n<summary>Click to expand</summary>\r\n\r\n```powershell\r\n#Requires -RunAsAdministrator\r\n<#\r\n    .SYNOPSIS\r\n        Clean up right click context menu.\r\n\r\n    .NOTES\r\n        Author:   Olav R\u00f8nnestad Birkeland\r\n        Created:  210828\r\n        Modified: 210828\r\n\r\n    .EXAMPLE\r\n        # Git\r\n        & $psISE.'CurrentFile'.'FullPath' -NamesLike 'git*'\r\n        & $psISE.'CurrentFile'.'FullPath' -NamesLike 'git*' -WriteChanges\r\n        # Intel Graphics Settings\r\n        & $psISE.'CurrentFile'.'FullPath' -NamesLike 'igfx*'\r\n        & $psISE.'CurrentFile'.'FullPath' -NamesLike 'igfx*' -WriteChanges\r\n        # MPC-HC\r\n        & $psISE.'CurrentFile'.'FullPath' -NamesLike 'mplayerc64.*'\r\n        & $psISE.'CurrentFile'.'FullPath' -NamesLike 'mplayerc64.*' -WriteChanges\r\n        # nVidia Graphics Settings\r\n        & $psISE.'CurrentFile'.'FullPath' -NamesLike 'NvCplDesktopContext'\r\n        & $psISE.'CurrentFile'.'FullPath' -NamesLike 'NvCplDesktopContext' -WriteChanges\r\n        # PowerShell 7 Preview\r\n        & $psISE.'CurrentFile'.'FullPath' -NamesLike 'PowerShell7-preview*'\r\n        & $psISE.'CurrentFile'.'FullPath' -NamesLike 'PowerShell7-preview*' -WriteChanges\r\n#>\r\n\r\n\r\n# Input parameters\r\n[OutputType($null)]\r\nParam(\r\n    [Parameter(Mandatory, HelpMessage = 'String array of PowerShell -like statements to match with.')]\r\n    [string[]] $NamesLike,\r\n\r\n    [Parameter(HelpMessage = 'Whether to write changes.')]\r\n    [switch] $WriteChanges\r\n)\r\n\r\n\r\n# PowerShell preferences\r\n$ErrorActionPreference = 'Stop'\r\n$InformationPreference = 'Continue'\r\n\r\n\r\n# Assets\r\n$Paths = \r\n\r\n\r\n# Loop through\r\n$(\r\n    [string[]](\r\n        'HKEY_CLASSES_ROOT'\r\n    )\r\n).ForEach{\r\n    [string[]](\r\n        # Directory\r\n        ('Registry::{0}\\Directory\\Background\\shell' -f $_),\r\n        ('Registry::{0}\\Directory\\Background\\shellex\\ContextMenuHandlers' -f $_),\r\n        ('Registry::{0}\\Directory\\ContextMenus' -f $_),\r\n        ('Registry::{0}\\Directory\\shell' -f $_),\r\n        ('Registry::{0}\\Directory\\shellex\\ContextMenuHandlers' -f $_),\r\n        ('Registry::{0}\\Directory\\shellex\\DragDropHandlers' -f $_),\r\n        # Drive\r\n        ('Registry::{0}\\Drive\\shell' -f $_),\r\n        ('Registry::{0}\\Drive\\shellex\\ContextMenuHandlers' -f $_),\r\n        ('Registry::{0}\\Drive\\shellex\\DragDropHandlers' -f $_),\r\n        # Library folder\r\n        ('Registry::{0}\\LibraryFolder\\background\\shell' -f $_),\r\n        ('Registry::{0}\\LibraryFolder\\background\\shellex\\ContextMenuHandlers' -f $_),\r\n        ('Registry::{0}\\LibraryFolder\\ShellEx\\ContextMenuHandlers' -f $_)\r\n    )\r\n}.ForEach{\r\n    Get-ChildItem -Path $_ -Depth 0\r\n}.'PSPath'.Where{\r\n    $(\r\n        foreach ($NameLike in $NamesLike) {\r\n            $_.Split('\\')[-1] -like $NameLike\r\n        }\r\n    ) -contains $true\r\n}.ForEach{\r\n    Write-Information -MessageData $_\r\n    if ($WriteChanges) {\r\n        if (Test-Path -Path $_) {\r\n            $null = Remove-Item -Path $_ -Recurse -Force\r\n            Write-Information -MessageData ('{0}Successfully removed.' -f \"`t\")\r\n            $null = Start-Sleep -Milliseconds 100\r\n        }\r\n        else {\r\n            Write-Information -MessageData ('{0}Already removed.' -f \"`t\")\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n</details>",
      "created_at": "2021-08-28T12:16:15Z",
      "updated_at": "2021-08-29T09:53:35Z"
    },
    {
      "author": "Karl-WE",
      "author_association": "NONE",
      "body": "Hi Steve @SteveL-MSFT do you think one these scripts could be included in the MSI? Not sure about Win11 as so far the integration due Windows Terminal is better and context menu only includes Terminal by default. ",
      "created_at": "2021-08-28T18:34:16Z",
      "updated_at": "2021-08-28T18:34:16Z"
    }
  ],
  "created_at": "2018-12-20T00:56:02Z",
  "number": 8496,
  "state": "closed",
  "title": "Remove duplicate `Open Here` context menu item upgrading to newer Preview release",
  "updated_at": "2021-08-29T09:53:35Z"
}