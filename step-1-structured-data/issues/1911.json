{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1911",
  "author": "agowa338",
  "body": "Currently there is no way to manage devices and drivers from PowerShell (or from any other managed code).\nI want to request implementation of these commands:\nUninstall-DeviceDriver -Force -DeleteDriver -Device <Device>(like you would from Device Manager)\nInstall-DeviceDriver -Device <Device> (installing a driver for e.g. an \"Unknown Device\")\nGet-DeviceDriver -Device <Device> (Returns information about the currently used driver)\nGet-Device (Returns Device Objects)\n",
  "closed_at": "2022-05-05T21:00:55Z",
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Are you looking for cmdlets to manage Windows, or all platforms?\n",
      "created_at": "2016-08-18T21:53:25Z",
      "updated_at": "2016-08-18T21:53:25Z"
    },
    {
      "author": "agowa338",
      "author_association": "NONE",
      "body": "For Windows, but others would be nice too, somehow.\n",
      "created_at": "2016-08-18T21:54:59Z",
      "updated_at": "2016-08-18T21:54:59Z"
    },
    {
      "author": "oising",
      "author_association": "CONTRIBUTOR",
      "body": "query drivers like this:\n\n`driverquery /fo csv /v | convertfrom-csv | sort \"driver type\", \"display name\" | ft \"module name\", \"display name\", state, \"start mode\" -groupby \"driver type\" | more`\n\nAlso you could use `pnptutil.exe` to add/enumerate/delete packages. For full command line driver tinkering, there's also `devcon.exe` (part of the windows SDK) - https://msdn.microsoft.com/en-us/library/windows/hardware/ff544707(v=vs.85).aspx\n",
      "created_at": "2016-08-18T21:55:19Z",
      "updated_at": "2016-08-18T21:55:53Z"
    },
    {
      "author": "oising",
      "author_association": "CONTRIBUTOR",
      "body": "oh, and: https://networchestration.wordpress.com/2016/07/11/how-to-obtain-device-console-utility-devcon-exe-without-downloading-and-installing-the-entire-windows-driver-kit-100-working-method/\n",
      "created_at": "2016-08-18T21:59:22Z",
      "updated_at": "2016-08-18T21:59:22Z"
    },
    {
      "author": "oising",
      "author_association": "CONTRIBUTOR",
      "body": "Oh... @lzybkr -- look what I found :) Source! https://github.com/Microsoft/Windows-driver-samples/tree/master/setup/devcon\n",
      "created_at": "2016-08-18T22:00:45Z",
      "updated_at": "2016-08-18T22:00:45Z"
    },
    {
      "author": "agowa338",
      "author_association": "NONE",
      "body": "@oising Thats true, but pnptutil.exe cannot uninstall the driver, only remove it from the store\nand devcon is a separate download, you cannot assume it to be present on the target machine, and including as base64 and out-fileing it isn't good practice and even that doesn't provide the flexibility of PSRemoting like other cmdlets do...\n\nAlso all of the current ways feel like crude hacks around the core issue.\n",
      "created_at": "2016-08-18T22:06:29Z",
      "updated_at": "2016-08-18T22:06:29Z"
    },
    {
      "author": "oising",
      "author_association": "CONTRIBUTOR",
      "body": "@agowa338 I'm with you -- just trying to fill in some gaps. :)\n",
      "created_at": "2016-08-18T22:19:07Z",
      "updated_at": "2016-08-18T22:19:07Z"
    },
    {
      "author": "agowa338",
      "author_association": "NONE",
      "body": "@oising I'm very pleased to hear that, so do I ;-)\n",
      "created_at": "2016-08-19T19:30:45Z",
      "updated_at": "2016-08-19T19:30:45Z"
    },
    {
      "author": "jdhitsolutions",
      "author_association": "COLLABORATOR",
      "body": "Submitted to the Cmdlet Working Group for consideration and discussion.",
      "created_at": "2022-03-21T16:12:35Z",
      "updated_at": "2022-03-21T16:12:35Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "It's an attractive suggestion - but as ever the devil is in the details.\r\n\r\nOne thought - could someone use Crescendo to wrap driverquery and pnputil to create at least some cmdlets?\r\n\r\nperhaps a Drivers module with such code that also includes drivercon from Github?",
      "created_at": "2022-04-03T11:48:32Z",
      "updated_at": "2022-04-03T11:48:32Z"
    },
    {
      "author": "jdhitsolutions",
      "author_association": "COLLABORATOR",
      "body": "Do commands in the `PnpDevice` module which ships with PowerShell fill in any of these gaps?",
      "created_at": "2022-04-07T19:33:15Z",
      "updated_at": "2022-04-07T19:33:15Z"
    },
    {
      "author": "agowa338",
      "author_association": "NONE",
      "body": "Hi @jdhitsolutions,\r\n\r\nThe PnpDevice module has these Functions:\r\n* Disable - Allows disabling a device\r\n* Enable - Allows enabling a device\r\n* Get - Allows to query devices\r\n* Get Properties - Allows to query properties\r\n\r\n**However, what's missing is**:\r\n* Uninstall - As you would from Device Manager so that the device is no longer available and needs to be rediscovered. As well as to allow deleting an old (may be buggy) driver before reinstalling.\r\n* Install - Installing a driver for e.g. an \"Unknown Device\", same as the \"select from list\" and \"select from file\" within device manager. Also to replace a currently installed driver with another one.\r\n* Set Properties - Update properties of drivers that have options in the driver's menu in the device manager (like Bluetooth, network, serial/parallel-port, ... drivers)\r\n* Handling of non-pnp drivers\r\n* Refresh - Scan for hardware change\r\n* Install non-pnp driver\r\n* Query data from the Events tab of a device driver\r\n* Power Management - Allow configuring the power management settings (e.g. \"Allow the computer to turn this device to save power\" on and off)\r\n* Set write-cache policies of disk drives\r\n",
      "created_at": "2022-04-08T21:27:32Z",
      "updated_at": "2022-04-08T21:27:32Z"
    },
    {
      "author": "TobiasPSP",
      "author_association": "COLLABORATOR",
      "body": "@PowerShell/wg-powershell-cmdlets reviewed this\r\n\r\nA comprehensive device management module would indeed be very useful for many users. The available module \u201cPnPDevice\u201d with its rather limited capabilities was added during the \u201cWindows PowerShell\u201d timeframe. It is no longer actively maintained. \r\nWith the advent of cross-platform \u201cPowerShell\u201d, the PowerShell team focuses on the core automation engine and general features that are platform-independent. Since device management is highly OS specific with no dependencies to the PowerShell engine, this would be a perfect example for the community to invest in a comprehensive modern device management module. \r\nFor the mentioned reasons, the PowerShell team is not able to evolve the PnPModule. Its status is \u201cfrozen\u201dat the current feature level and exists primarily for backwards compatibility, similar to \u201cWindows PowerShell\u201d",
      "created_at": "2022-05-04T16:37:38Z",
      "updated_at": "2022-05-04T16:39:17Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as won't fix and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-05-05T21:00:54Z",
      "updated_at": "2022-05-05T21:00:54Z"
    }
  ],
  "created_at": "2016-08-18T21:31:44Z",
  "labels": [
    "Issue-Enhancement",
    "Resolution-Won't Fix",
    "WG-Cmdlets"
  ],
  "number": 1911,
  "state": "closed",
  "title": "[Feature Request] PowerShell Device and Drivers",
  "updated_at": "2022-05-05T21:00:55Z"
}