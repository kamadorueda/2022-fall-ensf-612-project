{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11826",
  "author": "zzragnar0kzz",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\nI have a function which scans IPv4 addresses for hosts that are listening on a specific port.\r\n\r\n[Code](https://github.com/PowerShell/PowerShell/files/4189649/Show-OnlineHosts.txt)\r\n\r\nIn PowerShell 5.1, running this function against 500+ IP addresses routinely takes less than 10 seconds for the scan to complete, as indicated by the internal stopwatch. However, in PowerShell Core 7.0.0-rc.2, scanning the same 500+ addresses routinely takes nearly 50 seconds to complete. The process's memory usage is also several times higher in the preview version (600+ MB vs ~ 200 MB, as reported by Task Manager). Neither of these seem like desirable behavior.\r\n\r\n# Steps to reproduce\r\n1. Save the function above in a script or module file.\r\n2. Open a classic PowerShell window.\r\n3. Import the saved script or module file.\r\n4. Run the function with the -Verbose and -Force flags and note the elapsed time reported.\r\n5. Open a PowerShell Core window.\r\n6. Import the saved script or module file.\r\n7. Run the function with the -Verbose and -Force flags and note the elapsed time reported.\r\n8. Compare the times reported in Steps 4 and 7 above.\r\n\r\n# Expected behavior\r\n\r\nMemory usage and execution time comparable to PowerShell 5.1:\r\n\r\n`\r\nPS 5.1> soh -Verbose -Force\r\n`\r\n```\r\nVERBOSE: Initializing function . . .\r\nVERBOSE: Total networks detected         : 2\r\nVERBOSE: Addresses to scan per network   : 256\r\nVERBOSE: Total addresses to scan         : 512\r\nVERBOSE: Initialization complete. Continuing . . .\r\nVERBOSE: Proceeding with network scanning.\r\nVERBOSE: Scanning network . . .\r\nVERBOSE: Network scanning complete. Scanned 512 address(es) in 5.6210833 seconds.\r\n```\r\n\r\n# Actual behavior\r\n\r\nLargely inflated memory usage and execution time compared to PowerShell 5.1:\r\n\r\n`\r\nPS 7-preview> soh -Verbose -Force\r\n`\r\n```\r\nVERBOSE: Initializing function . . .\r\nVERBOSE: Total networks detected         : 2\r\nVERBOSE: Addresses to scan per network   : 256\r\nVERBOSE: Total addresses to scan         : 512\r\nVERBOSE: Initialization complete. Continuing . . .\r\nVERBOSE: Proceeding with network scanning.\r\nVERBOSE: Scanning network . . .\r\nVERBOSE: Network scanning complete. Scanned 512 address(es) in 49.7831588 seconds.\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-rc.2\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-rc.2\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@zzragnar0kzz Could you please split the script on parts and measure every part to find where performance degradation occurs?",
      "created_at": "2020-02-11T10:02:18Z",
      "updated_at": "2020-02-11T10:02:18Z"
    },
    {
      "author": "zzragnar0kzz",
      "author_association": "NONE",
      "body": "@iSazonov I've added code to measure the time elapsed during each of the following tasks:\r\n1. Script startup to user prompt\r\n2. Network scanning\r\n  a. Runspace generation\r\n  b. Runspace execution\r\n3. Cleanup to script exit\r\n\r\nDebug messages have also been added at each of these points; these messages display the total elapsed runtime and the current process's PagedMemorySize and PeakPagedMemorySize at each point.\r\n\r\n[Modified code](https://github.com/PowerShell/PowerShell/files/4189412/Show-OnlineHosts.txt)\r\n\r\nSample output:\r\n\r\n`\r\nPS 7-preview> soh -Force -Verbose -Debug\r\n`\r\n```\r\nVERBOSE: Initializing function . . .\r\nVERBOSE: Total networks detected         : 2\r\nVERBOSE: Addresses to scan per network   : 256\r\nVERBOSE: Total addresses to scan         : 512\r\nVERBOSE: Initialization completed in 0.0280024 seconds.\r\nDEBUG: Total runtime : 0.0299236 seconds.\r\nDEBUG: Memory usage : Current 58.1484375 MB / Peak 58.1484375 MB\r\nVERBOSE: Continuing . . .\r\nVERBOSE: Generating runspaces . . .\r\nVERBOSE: Runspace generation complete : 512 runspace(s) in 4.4426279 seconds.\r\nDEBUG: Total runtime : 4.4815925 seconds.\r\nDEBUG: Memory usage : Current 673.9296875 MB / Peak 676.23046875 MB\r\nVERBOSE: Scanning network . . .\r\nVERBOSE: Network scanning complete : 512 address(es) in 43.7567895 seconds.\r\nVERBOSE: Total detected host servers : 1\r\nDEBUG: Total runtime : 48.246157 seconds.\r\nDEBUG: Memory usage : Current 695.94140625 MB / Peak 696.41796875 MB\r\nVERBOSE: Performing runspace pool cleanup . . .\r\nVERBOSE: Runspace pool cleanup completed in 0.0490162 seconds.\r\nDEBUG: Total runtime : 48.2999362 seconds.\r\nDEBUG: Memory usage : Current 647.59375 MB / Peak 696.41796875 MB\r\nVERBOSE: Exiting gracefully. Total runtime : 48.3038236 seconds.\r\n```\r\nI don't know if this is relevant, but as it currently is, running the function with -Debug in 5.1 causes a Confirm prompt to appear after each call to Write-Debug. These prompts must be responded to individually - Yes to All does not answer Yes to All. It also returns some wildly inconsistent memory values. It otherwise appears to function as expected.\r\n\r\nSample output from 5.1 for comparison:\r\n\r\n`\r\nPS 5.1> soh -Force -Verbose -Debug\r\n`\r\n```\r\nVERBOSE: Initializing function . . .\r\nVERBOSE: Total networks detected         : 2\r\nVERBOSE: Addresses to scan per network   : 256\r\nVERBOSE: Total addresses to scan         : 512\r\nVERBOSE: Initialization completed in 0.028382 seconds.\r\nDEBUG: Total runtime : 0.0313089 seconds.\r\n\r\nConfirm\r\nContinue with this operation?\r\n[Y] Yes  [A] Yes to All  [H] Halt Command  [S] Suspend  [?] Help (default is \"Y\"): A\r\nDEBUG: Memory usage : Current 114.59375 MB / Peak 115.234375 MB\r\n\r\nConfirm\r\nContinue with this operation?\r\n[Y] Yes  [A] Yes to All  [H] Halt Command  [S] Suspend  [?] Help (default is \"Y\"): A\r\nVERBOSE: Continuing . . .\r\nVERBOSE: Generating runspaces . . .\r\nVERBOSE: Runspace generation complete : 512 runspace(s) in 1.5926215 seconds.\r\nDEBUG: Total runtime : 3.2710461 seconds.\r\n\r\nConfirm\r\nContinue with this operation?\r\n[Y] Yes  [A] Yes to All  [H] Halt Command  [S] Suspend  [?] Help (default is \"Y\"): A\r\nDEBUG: Memory usage : Current 439.3203125 MB / Peak 439.3203125 MB\r\n\r\nConfirm\r\nContinue with this operation?\r\n[Y] Yes  [A] Yes to All  [H] Halt Command  [S] Suspend  [?] Help (default is \"Y\"): A\r\nVERBOSE: Scanning network . . .\r\nVERBOSE: Network scanning complete : 512 address(es) in 2.3413952 seconds.\r\nVERBOSE: Total detected host servers : 1\r\nDEBUG: Total runtime : 7.2270809 seconds.\r\n\r\nConfirm\r\nContinue with this operation?\r\n[Y] Yes  [A] Yes to All  [H] Halt Command  [S] Suspend  [?] Help (default is \"Y\"): A\r\nDEBUG: Memory usage : Current 444.3828125 MB / Peak 456.91015625 MB\r\n\r\nConfirm\r\nContinue with this operation?\r\n[Y] Yes  [A] Yes to All  [H] Halt Command  [S] Suspend  [?] Help (default is \"Y\"): A\r\nVERBOSE: Performing runspace pool cleanup . . .\r\nVERBOSE: Runspace pool cleanup completed in 0.159363 seconds.\r\nDEBUG: Total runtime : 8.8202681 seconds.\r\n\r\nConfirm\r\nContinue with this operation?\r\n[Y] Yes  [A] Yes to All  [H] Halt Command  [S] Suspend  [?] Help (default is \"Y\"): A\r\nDEBUG: Memory usage : Current 234.125 MB / Peak 456.91015625 MB\r\n\r\nConfirm\r\nContinue with this operation?\r\n[Y] Yes  [A] Yes to All  [H] Halt Command  [S] Suspend  [?] Help (default is \"Y\"): A\r\nVERBOSE: Exiting gracefully. Total runtime : 10.2109238 seconds.\r\n```\r\nIs something like this what you were looking for? Please advise.\r\n\r\nThank you!",
      "created_at": "2020-02-12T02:39:46Z",
      "updated_at": "2020-02-12T02:39:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You can replace Write-Debug with Write-Verbose.\r\nAlso `$socket = New-Object Net.Sockets.TcpClient($ip,$Port)` does connection and you shouldn't do            `$socket.Connect()` - it is bug in the script.\r\nYou could put results in one table to easily review.\r\n\r\n",
      "created_at": "2020-02-12T06:44:07Z",
      "updated_at": "2020-02-12T06:44:07Z"
    },
    {
      "author": "mikeTWC1984",
      "author_association": "CONTRIBUTOR",
      "body": "@zzragnar0kzz the pool size of 500 is definitely  overkill and probably causing this issue. Reduce it to the number of cpu threads of your machine. In your case I wouldn't use runspaces at all though. You can just use connectasync, then just check if task has status RanToCompletion\r\n```powershell\r\n$socket = [Net.Sockets.TcpClient]::new()\r\n$task = $socket.ConnectAsync($ip, $port)\r\n```",
      "created_at": "2020-02-12T21:38:36Z",
      "updated_at": "2020-02-12T21:38:36Z"
    },
    {
      "author": "zzragnar0kzz",
      "author_association": "NONE",
      "body": "@iSazonov @mikeTWC1984 Code has been modified per your suggestions:\r\n\r\n[Modified code](https://github.com/PowerShell/PowerShell/files/4203700/Sample_Show-OnlineHosts.txt)\r\n\r\nObservations:\r\n  1. Removing calls to `Write-Debug` has made troubleshooting this issue easier, but does not explain the discrepancy in behavior between versions. Does this discrepancy warrant further investigation?\r\n  2. `$socket.Connect()` was indeed unnecessary, but removing it had no appreciable impact on runtime or monitored resource usage.\r\n  3. The pool size was set to such an admittedly insane number to facilitate speed with the original code. Reducing this value would lower memory usage, but would greatly increase runtime.\r\n  4. Using `$socket = [Net.Sockets.TcpClient]::new()` and `$task = $socket.ConnectAsync($ip, $port)` reduces runtime and virtually eliminates the difference in runtime between versions, in all stages.\r\n  5. In conjunction with (4) above, reducing the pool size to (threads)x1.25 also greatly reduces memory usage, while maintaining an acceptable level of speed.\r\n  6. Eliminating runspaces reduces memory usage even further, but a brief timeout is required between connection attempts before success can be verified, and even a small timeout (0.1s) severely slows down processing when hundreds of addresses are scanned sequentially. Thus, runspaces have been preserved.\r\n  7. Data points have been stored in `$results` for easier retrieval.\r\n\r\nSample output:\r\n`PS 7-preview> soh -Force -Verbose`\r\n```\r\nVERBOSE: Starting function . . .\r\nVERBOSE: [Startup] : Begin\r\nVERBOSE: Initializing . . . \r\nVERBOSE: Total network(s) detected       : 2\r\nVERBOSE: Address(es) to scan per network : 256\r\nVERBOSE: Generating list of IP address(es) to scan . . . \r\nVERBOSE: List of IP address(es) to scan successfully generated. \r\nVERBOSE: Total address(es) to scan       : 512\r\nVERBOSE: Creating and opening runspace pool with 20 thread(s) . . . \r\nVERBOSE: Runspace pool successfully created and opened. \r\nVERBOSE: [Startup] completed in 0.031 seconds.\r\nVERBOSE: Memory usage : Current 52.281 MB / Peak 52.281 MB\r\nVERBOSE: Total runtime : 0.046 seconds.\r\nVERBOSE: Continuing . . .\r\nVERBOSE: [RunspaceSetup] : Begin\r\nVERBOSE: Generating runspace(s) . . .\r\nVERBOSE: [RunspaceSetup] completed : 512 runspace(s) in 0.174 seconds.\r\nVERBOSE: Memory usage : Current 88.734 MB / Peak 88.734 MB\r\nVERBOSE: Total runtime : 0.233 seconds.\r\nVERBOSE: [Scan] : Begin\r\nVERBOSE: Scanning network(s) . . .\r\nVERBOSE: Total detected host(s) : 1\r\nVERBOSE: [Scan] completed : 512 address(es) in 2.525 seconds.\r\nVERBOSE: Memory usage : Current 101.719 MB / Peak 101.719 MB\r\nVERBOSE: Total runtime : 2.767 seconds.\r\nVERBOSE: [Cleanup] : Begin\r\nVERBOSE: Performing post-processing and cleanup . . .\r\nVERBOSE: [Cleanup] completed in 0.005 seconds.\r\nVERBOSE: Memory usage : Current 100.988 MB / Peak 101.832 MB\r\nVERBOSE: Total runtime : 2.779 seconds.\r\nVERBOSE: Exiting gracefully. Total time to execute : 2.783 seconds.\r\n```\r\n\r\nUnless I'm missing something, it appears that the original's time and memory discrepancies between versions can be explained by some garbage code on my part. Thank you for the advice! Please let me know if I may be of further assistance.",
      "created_at": "2020-02-14T11:24:25Z",
      "updated_at": "2020-02-14T11:36:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If I understand right now your code works well on both versions, yes?",
      "created_at": "2020-02-14T12:15:07Z",
      "updated_at": "2020-02-14T12:15:07Z"
    },
    {
      "author": "mikeTWC1984",
      "author_association": "CONTRIBUTOR",
      "body": "@zzragnar0kzz  I think powershell core just spins up runspaces faster. Each of them  eats about 1-2MB of memory, so  I guess memory usage increase would be be somewhat proportional to the runspaces handled. Running too many threads probably just bloated your cpu.",
      "created_at": "2020-02-14T15:36:44Z",
      "updated_at": "2020-02-14T15:36:44Z"
    },
    {
      "author": "zzragnar0kzz",
      "author_association": "NONE",
      "body": "@iSazonov That is correct. Runtime is now pretty consistent for me across versions, and is faster than ever. Memory usage, both peak and current measured after cleanup, has also been reduced across versions. In fact, peak memory usage in core is now consistently around 1/3 that of v5.1, and core is now using less memory at completion than v5.1. Combined with the reduced runtime, this is a complete reversal of the situation that originally prompted me to submit this issue.\r\n\r\n@mikeTWC1984 On my end at least, generating runspaces is still nearly 2x faster in v5.1 than it is in core. However, with the dramatic reduction in threads, the difference is now only fractions of a second instead of several seconds. Agreed on memory usage per thread. What I still don't really understand is why executing the runspaces initially took ~ 20x longer in core, or why it was initially using much more memory in core.",
      "created_at": "2020-02-15T21:44:30Z",
      "updated_at": "2020-02-15T22:04:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We have some issues for runspaces. Use Area-Performance label filter to discover them.",
      "created_at": "2020-02-16T07:47:10Z",
      "updated_at": "2020-02-16T07:47:10Z"
    }
  ],
  "created_at": "2020-02-11T03:07:25Z",
  "labels": [
    "Issue-Question",
    "WG-Engine-Performance"
  ],
  "number": 11826,
  "state": "open",
  "title": "pwsh 7-rc2 Function with runspaces slow to process, uses large amounts of memory",
  "updated_at": "2020-02-16T07:47:10Z"
}