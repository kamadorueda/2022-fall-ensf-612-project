{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16988",
  "author": "mklement0",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nGenerally, objects of _any_ type are auto-convertible to strings when passed to `string`-typed .NET method parameters.\r\n\r\n`[pscustomobject]` a.k.a `[psobject]` is the curious exception.\r\n\r\nThere is no reason for `[pscustomobject]` instances to act differently than instances of any other type (irrespective of whether implicit stringification makes sense in a given situation); to give a simple (but contrived) example:\r\n\r\nIf `(42).ToString((Get-Item /))` works, \r\nthere's no reason why `(42).ToString(([pscustomobject] @{ foo=1 }))` shouldn't.\r\n\r\nNote: \r\n\r\n* The problem doesn't just affect locally constructed custom objects, but also the `[psobject]` instances that the serialization infrastructure produces on deserialization, for the emulation of types it cannot re-create with type fidelity.\r\n\r\n* Implicit stringification in the context of cmdlets / functions / script is _not_ affected; e.g., `Get-Date -Format ([pscustomobject] @{ foo=1 })` doesn't cause an error.\r\n\r\n* Possibly related:\r\n  * #6163\r\n\r\n### Expected behavior\r\n\r\n```console\r\nPS> (42).ToString(([pscustomobject] @{ foo=1 }))\r\n@{foo=1}  # I.e. the equivalent of (42).tostring('@{foo=1}')\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\nThe method call fails, because the `[pscustomobject]` isn't auto-converted to a string, and method overload resolution fails.\r\n\r\n### Error details\r\n\r\n```console\r\nMethodException: Cannot find an overload for \"ToString\" and the argument count: \"1\".\r\n```\r\n\r\n\r\n### Environment data\r\n\r\n```powershell\r\nPowerShell Core 7.3.0-preview.2\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "The Engine WG discussed this yesterday. Initially we were unsure if this was done purposefully and decided it needed more research.\r\n\r\nAfter looking into it, I'm pretty confident it is a bug. `LanguagePrimitives` internally replaces the `fromType` with `InternalPSObject` if the pso has no base object. The code in core adapter sort of tries to emulate `LanguagePrimitives`' code to fall back to the base object, but it omits the translation from an empty PSO to `InternalPSObject`.\r\n\r\nThe difference in code path is due to this being part of overload *selection* rather than invocation. So it can't call the same code path that actually performs the conversion. Seems like it was just an oversight.\r\n\r\nThe fallback code from `DotNetAdapter`:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/b46ac16e09dce433dbc1ecb19ab949754eef4978/src/System.Management.Automation/engine/CoreAdapter.cs#L860-L868\r\n\r\nAnd from `LanguagePrimitives`:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/b46ac16e09dce433dbc1ecb19ab949754eef4978/src/System.Management.Automation/engine/LanguagePrimitives.cs#L4786-L4812\r\n\r\nMarking up for grabs.",
      "created_at": "2022-03-18T14:53:35Z",
      "updated_at": "2022-03-18T14:55:37Z"
    }
  ],
  "created_at": "2022-03-11T18:41:11Z",
  "number": 16988,
  "state": "open",
  "title": "[pscustomobject] / [psobject] instances aren't auto-converted to strings in .NET method calls",
  "updated_at": "2022-03-18T19:50:08Z"
}