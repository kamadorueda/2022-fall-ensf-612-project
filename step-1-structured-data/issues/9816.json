{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9816",
  "author": "SeeminglyScience",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n$null = [Windows.Devices.Bluetooth.BluetoothDevice, Windows.Devices.Bluetooth, ContentType = WindowsRuntime]\r\n$adapter = [Windows.Devices.Bluetooth.BluetoothAdapter]::GetDefaultAsync()\r\n$adapter\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nCompleted   : \r\nErrorCode   :\r\nId          : 1\r\nStatus      : Completed\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\n# Formatting is an empty string\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-preview.1\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-preview.1\r\nOS                             Microsoft Windows 10.0.18362\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nAlso repros in previous versions of Core as well as Windows PowerShell.\r\n\r\n# More Info\r\n\r\nMost WinRT objects work because they have a concrete type that they are cast as when returned from a method.  Interfaces do not, so it falls back to the COM adapter.  However, WinRT objects do not implement `IDispatch`, so the adapter gives up.  All WinRT objects *do* implement [IInspectable](https://docs.microsoft.com/en-us/windows/desktop/api/inspectable/nn-inspectable-iinspectable) though, which has a method that will give you the full serialized class name:\r\n\r\n```csharp\r\n    [StructLayout(LayoutKind.Sequential)]\r\n    internal struct HSTRING\r\n    {\r\n        public IntPtr handle;\r\n    }\r\n\r\n    [Guid(\"AF86E2E0-B12D-4c6a-9C5A-D7AA65101E90\")]\r\n    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]\r\n    internal unsafe interface IInspectable\r\n    {\r\n        int GetIids(ulong iidCount, Guid* iids);\r\n\r\n        int GetRuntimeClassName(out HSTRING className);\r\n\r\n        int GetTrustLevel(TrustLevel trustLevel);\r\n    }\r\n\r\n    internal static class Utils\r\n    {\r\n        private const string CoreWinRTString = \"api-ms-win-core-winrt-string-l1-1-0.dll\";\r\n\r\n        [DllImport(CoreWinRTString)]\r\n        public static extern unsafe char* WindowsGetStringRawBuffer(void* hstring, uint* plength);\r\n\r\n        [DllImport(CoreWinRTString)]\r\n        public static extern unsafe void WindowsDeleteString(void* hstring);\r\n\r\n        // For the adapter example above, this would return:\r\n        // Windows.Foundation.IAsyncOperation`1<Windows.Devices.Bluetooth.BluetoothAdapter>\r\n        public static unsafe string GetClassName(object obj)\r\n        {\r\n            int hr = ((IInspectable)obj).GetRuntimeClassName(out HSTRING className);\r\n            if (hr < 0) throw Marshal.GetExceptionForHR(hr);\r\n\r\n            try\r\n            {\r\n                uint length = 0;\r\n                char* value = WindowsGetStringRawBuffer(className.handle.ToPointer(), &length);\r\n                return new string(value, 0, (int)length);\r\n            }\r\n            finally\r\n            {\r\n                WindowsDeleteString(className.handle.ToPointer());\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\nAs a workaround you can directly invoke a `MethodInfo` object:\r\n\r\n```powershell\r\n[Windows.Foundation.IAsyncOperation[Windows.Devices.Bluetooth.BluetoothAdapter]].\r\n    GetMethod('GetResults').\r\n    Invoke($adapter, @())\r\n```",
  "closed_at": "2020-08-31T13:01:22Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @daxian-dbw ",
      "created_at": "2019-06-04T17:12:27Z",
      "updated_at": "2019-06-04T17:12:27Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@SeeminglyScience Thanks a lot for the workaround \u2665",
      "created_at": "2019-06-05T20:11:48Z",
      "updated_at": "2019-06-05T20:11:48Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": ".NET 5 doesn't consume Windows metadata file anymore, and thus we cannot load the WinRT type by `[Windows.Devices.Bluetooth.BluetoothDevice, Windows.Devices.Bluetooth, ContentType = WindowsRuntime]`.\r\n@SeeminglyScience, Given that, is this issue still relevant?",
      "created_at": "2020-08-27T21:52:55Z",
      "updated_at": "2020-08-27T21:52:55Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Yeah even if [#13138 (comment)](https://github.com/PowerShell/PowerShell/issues/13138#issuecomment-677977418) is pursued, the new lib doesn't actually use interfaces so this won't be an issue either way.  Closing.",
      "created_at": "2020-08-31T13:01:22Z",
      "updated_at": "2020-08-31T13:01:22Z"
    }
  ],
  "created_at": "2019-06-04T14:10:56Z",
  "number": 9816,
  "state": "closed",
  "title": "COM adapter doesn't work with WinRT objects with no concrete type",
  "updated_at": "2020-08-31T13:16:38Z"
}