{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13402",
  "author": "mkht",
  "body": "## Summary of the new feature/enhancement\r\n\r\nI think one of the obstacles in migrating an existing DSC configuration that relies on Windows LCM to a configuration using `Invoke-DscResource` is the difference in execution context.\r\n\r\nWhile with LCM it runs in the system context by default and can be switched to any user context using the `PsDscRunAsCredential` common parameter, `Invoke-DscResource` runs in the context of the executing user and does not have the ability to switch contexts.\r\n\r\nAre there plans to implement a better way to execute DSC resource in any context, including system account?\r\n",
  "closed_at": "2020-08-12T15:02:51Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "/cc @TravisEz13 for insights.",
      "created_at": "2020-08-11T20:01:22Z",
      "updated_at": "2020-08-11T20:01:22Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@mkht You can run `Invoke-DscResource` in another context like you can run any other command, using Invoke-Command which allows you to run in your specified context.\r\n\r\nOtherwise, I don't think this is part of the current plan.\r\n\r\nUnderstanding, how and why this would be needed and the current available features don't meet your need would be useful.",
      "created_at": "2020-08-11T20:37:01Z",
      "updated_at": "2020-08-11T20:38:41Z"
    },
    {
      "author": "mkht",
      "author_association": "NONE",
      "body": "@TravisEz13 \r\nThanks for the answer.\r\n\r\nI thought it would be useful to add a parameter like `-RunAs` to `Invoke-DscResouce`, but if you mean that it should be wrapped in `Invoke-Command`,  I get it.\r\n\r\nAn additional question: is there a way to use `Invoke-Command` to run commands as a system account?\r\nI know I can use psexec.exe, but I don't think it's easy to use in PowerShell.",
      "created_at": "2020-08-12T10:56:29Z",
      "updated_at": "2020-08-12T10:56:29Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@mkht you can't use the default Invoke-Command to do that. Running as SYSTEM requires some additional hoop-jumping. Once of the more reliable methods is to create a scheduled task that runs as SYSTEM and invoke that.\r\n\r\nThere's a module called `Invoke-CommandAs` on the powershell gallery that will handle all the difficult bits for that if you'd like a pre-built solution, it'll support running as SYSTEM or any other user you can provide credentials for, if I recall correctly. \ud83d\ude42 ",
      "created_at": "2020-08-12T12:21:05Z",
      "updated_at": "2020-08-12T12:21:05Z"
    },
    {
      "author": "mkht",
      "author_association": "NONE",
      "body": "@vexx32 Thanks for telling me about the `Invoke-CommandAs` module. It looks good. I'll try it.\r\n\r\nHonestly, I'm not going to move to `Invoke-DscResource` anytime soon as I have an existing system that relies on LCM-DSC.\r\nBut I'm happy to see the PowerShell team and DSCCommunity continue to invest in DSC and make various improvements to it. \ud83d\udc4d \r\n\r\nMy question is resolved. I will close this issue.",
      "created_at": "2020-08-12T15:02:51Z",
      "updated_at": "2020-08-12T15:07:28Z"
    }
  ],
  "created_at": "2020-08-11T13:47:28Z",
  "labels": [
    "Issue-Enhancement",
    "Area-DSC"
  ],
  "number": 13402,
  "state": "closed",
  "title": "How to run Invoke-DscResource in any context",
  "updated_at": "2020-08-12T15:07:28Z"
}