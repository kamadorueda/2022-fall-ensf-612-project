{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12354",
  "author": "Tyf0x",
  "body": "# Steps to reproduce\r\n\r\n```powershell\r\nRead-Host\r\n```\r\nthen paste:\r\n```powershell\r\n{\"testKey\":\"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"}\r\n```\r\n\r\n# Expected behavior\r\n\r\nThe output should display the full input.\r\n\r\n# Actual behavior\r\n\r\nThe input is truncated at 1022 chars.\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n#NOTE:\r\nThis works in powershell 5.1.18362.752",
  "closed_at": "2020-04-19T00:00:09Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We changed the buffer size to 1024 to be consistent on all systems.\r\nBefore the change Unix-s used 1 Kb buffer, Windows - 16 Kb and we had huge allocations in heap. Now we use 1 Kb buffer in stack.",
      "created_at": "2020-04-17T12:39:29Z",
      "updated_at": "2020-04-17T12:39:29Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-04-19T00:00:08Z",
      "updated_at": "2020-04-19T00:00:08Z"
    },
    {
      "author": "Tyf0x",
      "author_association": "NONE",
      "body": "Thanks @iSazonov for the explanation, it makes sense that the behaviour was standardised across OS.\r\n\r\nIf there a way to go around this restriction?\r\n\r\nWe have scripts that are expecting a JSON input and doing some work with it.\r\nThe JSON contains a lot of sensitive data (creds essentially) so it's encrypted in a vault, only decrypted temporarily and copied into the clipboard to then be pasted into powershell.\r\nWe read this input via Read-Host and stitching it using ```$kvp = (@(While($inputStr=(Read-Host).Trim()){$inputStr}) -join(\"`n\")) | ConvertFrom-Json```\r\nOne of these JSON properties is a private key that is 1676 characters long - too long for the 1Kb buffer.\r\n\r\nCould you please advise of a solution or workaround?\r\n\r\nOn a side note, should this change in buffer size be documented on the [`Read-Host` page](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/read-host?view=powershell-7)?\r\n\r\nThank you",
      "created_at": "2020-04-20T01:09:31Z",
      "updated_at": "2020-04-20T01:09:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> On a side note, should this change in buffer size be documented on the Read-Host page?\r\n\r\nI can open new issue in PowerShell-Docs repo if you think it is useful.\r\n\r\n> The JSON contains a lot of sensitive data (creds essentially) so it's encrypted in a vault, only decrypted temporarily and copied into the clipboard to then be pasted into PowerShell.\r\n\r\nPerhaps you find the new module useful https://devblogs.microsoft.com/powershell/secrets-management-module-vault-extensions/\n\n<blockquote><img src=\"https://devblogs.microsoft.com/powershell/wp-content/uploads/sites/30/2018/09/Powershell_256.png\" width=\"48\" align=\"right\"><div><img src=\"https://devblogs.microsoft.com/powershell/wp-content/uploads/sites/30/2019/02/Powershell_2561.png\" height=\"14\"> PowerShell</div><div><strong><a href=\"https://devblogs.microsoft.com/powershell/secrets-management-module-vault-extensions/\">Secrets Management Module Vault Extensions | PowerShell</a></strong></div><div>Secrets Management Module Vault Extensions\nA new PowerShell Secrets Management module has been published on PowerShell Gallery. It is currently in a pre-release state and still in active development. Even though the module is not complete, we have released it to gather early community feedback.</div></blockquote>",
      "created_at": "2020-04-20T17:25:33Z",
      "updated_at": "2020-04-20T17:25:36Z"
    },
    {
      "author": "StanleyGoldman",
      "author_association": "NONE",
      "body": "Can I override this limit?\r\n\r\nAlso, it would also be very useful to have this documented somewhere. It is way too hard to find this one issue which provides the only documentation of this.",
      "created_at": "2021-02-28T14:49:02Z",
      "updated_at": "2021-02-28T14:51:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The limit is hard-coded. You can open issue in PowerShell-Docs repo to request the doc update.",
      "created_at": "2021-02-28T15:35:26Z",
      "updated_at": "2021-02-28T15:35:26Z"
    },
    {
      "author": "StanleyGoldman",
      "author_association": "NONE",
      "body": "Hi @iSazonov thanks for the quick reply. I created the issue.\r\n\r\nWhat's interesting to me is that the experience is inconsistent between Windows and OSx.\r\nOn Windows v7.1.2 I'm not able to type past the 1022'th character.\r\nOn OSx v7.1.2 I'm able to create a value seemingly well past 1022.\r\n\r\n",
      "created_at": "2021-03-01T20:42:57Z",
      "updated_at": "2021-03-01T20:42:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> On Windows v7.1.2 I'm not able to type past the 1022'th character.\r\n> On OSx v7.1.2 I'm able to create a value seemingly well past 1022.\r\n\r\nI guess it is `\\n` vs `\\r\\n`.",
      "created_at": "2021-03-02T10:41:13Z",
      "updated_at": "2021-03-02T10:41:13Z"
    },
    {
      "author": "StanleyGoldman",
      "author_association": "NONE",
      "body": "Can you point me to this code?",
      "created_at": "2021-03-02T12:07:03Z",
      "updated_at": "2021-03-02T12:07:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "See\r\nhttps://github.com/PowerShell/PowerShell/blob/c5955a5c0de50295e509dbc10928147b33d5cbea/src/Microsoft.PowerShell.ConsoleHost/host/msh/ConsoleHostUserInterface.cs#L1539",
      "created_at": "2021-03-02T12:34:10Z",
      "updated_at": "2021-03-02T12:34:10Z"
    },
    {
      "author": "StanleyGoldman",
      "author_association": "NONE",
      "body": "Thanks for the help",
      "created_at": "2021-03-02T13:36:18Z",
      "updated_at": "2021-03-02T13:36:18Z"
    }
  ],
  "created_at": "2020-04-17T09:05:01Z",
  "number": 12354,
  "state": "closed",
  "title": "Read-Host max imput length cap in pwsh 7",
  "updated_at": "2021-03-02T13:36:18Z"
}