{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17203",
  "author": "Fragmachine",
  "body": "# PR Summary\r\n\r\nPowerShell fail to build even when the correct .NET SDK version is installed.\r\n\r\n## PR Context\r\n\r\nThere are two issues with how the .NET SDK version check works,\r\n\r\n1. The regex parsing fail on certain versions due to unescaped dots. \r\n2. When the supported SDK isn't the last entry in the generated list of installed SDK's it fails.\r\n\r\n## PR Checklist\r\n\r\n- [ ] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [ ] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and opened an issue in the relevant tool repository. This may include:\r\n        - [ ] Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode\r\n        (which runs in a different PS Host).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n",
  "closed_at": "2022-05-10T02:01:04Z",
  "comments": [
    {
      "author": "pull-request-quantifier[bot]",
      "author_association": "NONE",
      "body": "### ![](https://img.shields.io/static/v1?label=Quantified&message=Extra%20Small&color=green)\r\n\r\nThis PR has `26` quantified lines of changes. In general, a change size of upto `200` lines is ideal for the best PR experience!\r\n\r\n------\r\n\r\n<details >\r\n    <summary display=\"inline\"> <strong>Quantification details</strong></summary>\r\n    <p />\r\n\r\n```\r\nLabel      : Extra Small\r\nSize       : +16 -10\r\nPercentile : 10.4%\r\n\r\nTotal files changed: 1\r\n\r\nChange summary by file extension:\r\n.psm1 : +16 -10\r\n```\r\n> Change counts above are quantified counts, based on the [PullRequestQuantifier customizations](https://github.com/microsoft/PullRequestQuantifier/blob/main/docs/prquantifier-yaml.md).\r\n    \r\n</details>\r\n\r\n\r\n<details>\r\n    <summary display=\"inline\"> <strong>Why proper sizing of changes matters</strong> </summary>\r\n    <p/>\r\n    <p/>\r\n\r\nOptimal pull request sizes drive a better predictable PR flow as they strike a\r\nbalance between between PR complexity and PR review overhead. PRs within the\r\noptimal size (typical small, or medium sized PRs) mean:\r\n\r\n- Fast and predictable releases to production:\r\n  - Optimal size changes are more likely to be reviewed faster with fewer\r\niterations.\r\n  - Similarity in low PR complexity drives similar review times.\r\n- Review quality is likely higher as complexity is lower:\r\n  - Bugs are more likely to be detected.\r\n  - Code inconsistencies are more likely to be detetcted.\r\n- Knowledge sharing is improved within the participants:\r\n  - Small portions can be assimilated better.\r\n- Better engineering practices are exercised:\r\n  - Solving big problems by dividing them in well contained, smaller problems.\r\n  - Exercising separation of concerns within the code changes.\r\n\r\n#### What can I do to optimize my changes\r\n\r\n- Use the PullRequestQuantifier to quantify your PR accurately\r\n  - Create a context profile for your repo using the [context generator](https://github.com/microsoft/PullRequestQuantifier/releases)\r\n  - Exclude files that are not necessary to be reviewed or do not increase the review complexity. Example: Autogenerated code, docs, project IDE setting files, binaries, etc. Check out the `Excluded` section from your `prquantifier.yaml` context profile. \r\n  - Understand your typical change complexity, drive towards the desired complexity by adjusting the label mapping in your `prquantifier.yaml` context profile.\r\n  - Only use the labels that matter to you, [see context specification](./docs/prquantifier-yaml.md) to customize your `prquantifier.yaml` context profile.\r\n- Change your engineering behaviors\r\n  - For PRs that fall outside of the desired spectrum, review the details and check if:\r\n    - Your PR could be split in smaller, self-contained PRs instead\r\n    - Your PR only solves one particular issue. (For example, don't refactor and code new features in the same PR).\r\n\r\n#### How to interpret the change counts in git diff output\r\n\r\n- One line was added: `+1 -0`\r\n- One line was deleted: `+0 -1`\r\n- One line was modified: `+1 -1` (git diff doesn't know about modified, it will\r\ninterpret that line like one addition plus one deletion)\r\n- Change percentiles: Change characteristics (addition, deletion, modification)\r\nof this PR in relation to all other PRs within the repository.\r\n\r\n</details>\r\n\r\n<p />\r\n\r\n------\r\n\r\nWas this comment helpful? <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiRnJhZ21hY2hpbmUiLCJSZXBvc2l0b3J5TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwiLCJQdWxsUmVxdWVzdExpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsL3B1bGwvMTcyMDMiLCJFdmVudFR5cGUiOiJUaHVtYnNVcCJ9&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs up\"><strong>:thumbsup:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiRnJhZ21hY2hpbmUiLCJSZXBvc2l0b3J5TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwiLCJQdWxsUmVxdWVzdExpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsL3B1bGwvMTcyMDMiLCJFdmVudFR5cGUiOiJOZXV0cmFsIn0=&amp;anonymous=True\" target=\"_blank\" title=\"Neutral\"><strong>&nbsp;:ok_hand:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiRnJhZ21hY2hpbmUiLCJSZXBvc2l0b3J5TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwiLCJQdWxsUmVxdWVzdExpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsL3B1bGwvMTcyMDMiLCJFdmVudFR5cGUiOiJUaHVtYnNEb3duIn0=&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs down\"><strong>&nbsp;:thumbsdown:</strong></a> (<a href=\"MAILTO:prquantifier@microsoft.com\" title=\"Mail to prquantifier@microsoft.com\">Email</a>)\r\n[Customize PullRequestQuantifier](https://github.com/PowerShell/PowerShell/blob/master/.github/prquantifier.yaml) for this repository.\r\n\r\n",
      "created_at": "2022-04-27T13:16:40Z",
      "updated_at": "2022-04-27T13:16:40Z"
    },
    {
      "author": "microsoft-cla-retired[bot]",
      "author_association": "NONE",
      "body": "[![CLA assistant check](https://cla.opensource.microsoft.com/pull/badge/not_signed)](https://cla.opensource.microsoft.com/PowerShell/PowerShell?pullRequest=17203) <br/>Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our [Contributor License Agreement](https://cla.opensource.microsoft.com/PowerShell/PowerShell?pullRequest=17203) before we can accept your contribution.<br/><br/>:x: Fragmachine [sign now](https://cla.opensource.microsoft.com/PowerShell/PowerShell?pullRequest=17203)<br/><sub>You have signed the CLA already but the status is still pending? Let us [recheck](https://cla.opensource.microsoft.com/check/PowerShell/PowerShell?pullRequest=17203) it.</sub>",
      "created_at": "2022-04-27T13:16:48Z",
      "updated_at": "2022-04-27T13:16:48Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@Fragmachine I guess changes here can be superseded by #17198, right?",
      "created_at": "2022-04-27T22:42:19Z",
      "updated_at": "2022-04-27T22:42:19Z"
    },
    {
      "author": "Fragmachine",
      "author_association": "NONE",
      "body": "@daxian-dbw Yes, I've already talked to @powercode about it (we work at the same company). He solved the first issue I ran into but then I hit this other case with the SDK not being in the order the build script expected.",
      "created_at": "2022-04-28T06:51:04Z",
      "updated_at": "2022-04-28T06:51:04Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@Fragmachine So you mean this PR should supersede @powercode's https://github.com/PowerShell/PowerShell/pull/17198 then?\r\n\r\n> He solved the first issue I ran into but then I hit this other case with the SDK not being in the order the build script expected.\r\n\r\n#17198 fixes the parsing, and also sort the results to get the highest version. I presume that resolves the other issue you ran into, right?",
      "created_at": "2022-04-28T17:28:51Z",
      "updated_at": "2022-04-28T17:32:51Z"
    },
    {
      "author": "Fragmachine",
      "author_association": "NONE",
      "body": "Yes, this supersedes [#17198](https://github.com/PowerShell/PowerShell/pull/17198). The reason being that 'Get-LatestInstalledSDK' indeed returns the latest which doesn't work if you have an SDK installed that's newer than the required. Essentially, there's a time gap between a new SDK version being released and PowerShell being updated to use it (I assume the intention is to stay close to the latest).",
      "created_at": "2022-04-28T19:44:19Z",
      "updated_at": "2022-04-28T19:44:19Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> which doesn't work if you have an SDK installed that's newer than the required.\r\n\r\nI believe that is intentional, because we want to make sure the exact version defined in [global.json](https://github.com/PowerShell/PowerShell/blob/master/global.json) is used for the building.\r\nIt's not uncommon to run into issues when moving to a new .NET SDK, and many of them are regressions that cause PowerShell to malfunction.\r\n\r\nIf you are fine taking the risk for a private build to use a newer SDK, then you should just update the sdk version in `global.json` \r\nin your local build to the version you are using.",
      "created_at": "2022-04-28T23:29:03Z",
      "updated_at": "2022-04-28T23:29:58Z"
    },
    {
      "author": "Fragmachine",
      "author_association": "NONE",
      "body": "You misunderstand, this is not about building against another SDK older or newer. It's about being able to build with the appropriate SDK while having the others installed as well. As long as the correct version has priority i.e. the first one in PATH it works as it should. ",
      "created_at": "2022-04-29T06:45:21Z",
      "updated_at": "2022-04-29T06:45:21Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Understood. Your change is basically to make sure the SDK with desired version can be found first from the path.",
      "created_at": "2022-04-29T16:44:23Z",
      "updated_at": "2022-04-29T16:44:23Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Superseded by #17299",
      "created_at": "2022-05-10T02:01:04Z",
      "updated_at": "2022-05-10T02:01:04Z"
    }
  ],
  "created_at": "2022-04-27T13:16:35Z",
  "number": 17203,
  "state": "closed",
  "title": "Solve .NET SDK version check failure when building PowerShell.",
  "updated_at": "2022-05-10T02:01:05Z"
}