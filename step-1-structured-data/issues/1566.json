{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1566",
  "author": "andschwa",
  "body": "Resolves #1431.\n\nSetting custom key bindings for things like `\"` now works.\n\nThis PR specifically fixes the comparison and display of keys; it _does not_ address the fact that we have some incorrect key definitions for Linux (due to limitations of System.Console), which will need to be addressed in the future.\n\n@lzybkr please review \ud83d\ude04 \n\nWhere `$masterkeys` is `Get-PSReadLineKeyHandler` for the master branch, and `$charkeys` is for this feature branch, here is the diff of the two for the key property (note that the function property diff was empty).\n\n``` powershell\n> Compare-Object $masterkeys $charkeys -Property key                                                                                                                                                                               \nkey                 SideIndicator\n---                 -------------\nCtrl+Shift+D2       =>           \nCtrl+Shift+OemMinus =>           \nCtrl+Oem6           =>           \nCtrl+Alt+Oem6       =>           \nAlt+B               =>           \nAlt+F               =>           \nCtrl+Alt+Shift+Oem2 =>           \nCtrl+              <=           \nCtrl+              <=           \nCtrl+              <=           \nCtrl+Alt+          <=           \nAlt+Shift+B         <=           \nAlt+Shift+F         <=           \nCtrl+Alt+          <=           \n```\n\nThe keys with missing characters following the `+` are from the master branch, where they are not displayed correctly as they are special keys. For instance:\n\n``` powershell\n> $charkeys | where { $_.Key -eq \"Ctrl+Shift+D2\" }                                                      \n\nKey           Function Description                    \n---           -------- -----------                    \nCtrl+Shift+D2 SetMark  Mark the location of the cursor\n\n\n> $masterkeys | where { $_.Function -eq \"SetMark\" }                                                     \n\nKey          Function Description                    \n---          -------- -----------                    \nCtrl+       SetMark  Mark the location of the cursor\nAlt+Spacebar SetMark  Mark the location of the cursor\n```\n\nSo SetMark is bound to `Ctrl+@`. While `Ctrl+@` would be the best thing to display, we currently display `Ctrl+`, and this fixes it to at least show correctly (if not the most clearly) `Ctrl+Shift+D2`.\n\nAnother instance:\n\n``` powershell\n> $charkeys | where { $_.Key -eq \"Ctrl+Shift+OemMinus\" }                                                \n\nKey                 Function Description         \n---                 -------- -----------         \nCtrl+Shift+OemMinus Undo     Undo a previous edit\n\n\n> $masterkeys | where { $_.Function -eq \"Undo\" }                                                        \n\nKey           Function Description         \n---           -------- -----------         \nCtrl+        Undo     Undo a previous edit\nCtrl+X,Ctrl+U Undo     Undo a previous edit\n```\n\nThis brings us to the point of `OemMinus` not being the correct key on Linux (`System.Console`'s Linux implementation will never provide a key with `OemMinus`). However, this is a big enough problem that it merits a separate set of changes to rectify (all the key definitions need to be manually reconciled with the Linux implementation of `System.Console`).\n\nFinally, this fixes the display of the `Alt+B` binding, which was previously being incorrectly displayed as `Alt+Shift+B`.\n",
  "closed_at": "2016-07-29T16:10:10Z",
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": ":shipit:\n",
      "created_at": "2016-07-29T16:09:56Z",
      "updated_at": "2016-07-29T16:09:56Z"
    }
  ],
  "created_at": "2016-07-29T05:49:00Z",
  "number": 1566,
  "state": "closed",
  "title": "Fix PSReadLine custom key binding on Linux",
  "updated_at": "2016-07-29T16:10:15Z"
}