{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2812",
  "author": "ilgrank",
  "body": "**Invoke-WebRequest hangs, 100% of the times, when processing webpages containing specific elements.**\r\n\r\nSeveral bug reports on this same topic have been opened on Microsoft Connect in 2014 and 2015 and Microsoft UserVoice later on, but since they have been filed on different platforms and with different topics, Microsoft failed to notice they were all referring to the same issue, so I am consolidating those reports and filing a bug report here on Github:\r\n\r\nSteps to reproduce\r\n------------------\r\n```\r\n$URL='http://windows.microsoft.com/en-US/windows-8/system-requirements'\r\n(Invoke-WebRequest -Uri $URL).parsedhtml\r\n```\r\n\r\nother URLs to try:\r\n```\r\nhttps://github.com/hluk/CopyQ/releases\r\nhttp://www.heise.de\r\nhttp://www.bloomberg.com/professional/downloads/\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nInvoke-Webrequest should parse the page and populate several properties, like \r\n```\r\nParsedHtml\r\nLinks\r\n```\r\nand others.\r\n\r\nActual behavior\r\n---------------\r\nInvoke-WebRequest hangs, sometimes spitting out the message:\r\n\r\n**`Vector smash protection is enabled`**\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\nVerified on PowerShell4 on Windows 8.1:\r\n```\r\nPSVersion                      4.0\r\nWSManStackVersion              3.0\r\nSerializationVersion           1.1.0.1\r\nCLRVersion                     4.0.30319.34209\r\nBuildVersion                   6.3.9600.16394\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0}\r\nPSRemotingProtocolVersion      2.2\r\n```\r\n\r\nand PowerShell5 on Windows 10 \r\n```\r\nPSVersion                      5.0.10586.494\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.10586.494\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n\r\nFor sake of completeness, the abovementioned bug reports from UserVoice are reported here:\r\n\r\n[https://windowsserver.uservoice.com/forums/301869-powershell/suggestions/13890669--url-http-www-bloomberg-com-professional-down ](url)\r\n[https://windowsserver.uservoice.com/forums/301869-powershell/suggestions/11515881-invoke-webrequest-hangs-freeze-at-many-websites](url)\r\n[https://windowsserver.uservoice.com/forums/301869-powershell/suggestions/15692703-invoke-webrequest-returned-object-hangs-when-acces ](url)\r\n\r\n[](https://windowsserver.uservoice.com/forums/301869-powershell/suggestions/11088744-invoke-webrequest-hangs-in-some-cases-unless-use)",
  "closed_at": "2016-12-09T19:33:13Z",
  "comments": [
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "This incident needs to be submitted to the Windows UserVoice as this is for PowerShell Open Source.  \r\n\r\nBut interesting enough, in PowerShell v6.0.0-alpha.13, in the (Invoke-WebRequest -Uri $URL) the property \".parsedhtml\" doesn't exist.\r\n\r\nOS = Windows 10 Insider Preview 14971\r\nPS C:\\Program Files\\PowerShell\\6.0.0.13> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nCLRVersion\r\nSerializationVersion           1.1.0.1\r\nPSRemotingProtocolVersion      2.3\r\nPSEdition                      Core\r\nWSManStackVersion              3.0\r\nBuildVersion                   3.0.0.0\r\nGitCommitId                    v6.0.0-alpha.13\r\nPSVersion                      6.0.0-alpha\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\n\r\nSee attached images\r\n\r\n![w_webreq_01_2016-11-30_11-21-30](https://cloud.githubusercontent.com/assets/19892435/20760934/57eb97d2-b6ef-11e6-970c-e8d20352dd60.png)\r\n\r\n![w_webreq_02_2016-11-30_11-21-30](https://cloud.githubusercontent.com/assets/19892435/20760938/5d06fd88-b6ef-11e6-9a69-fa10a5554e86.png)\r\n\r\n\r\n\r\n",
      "created_at": "2016-11-30T16:25:03Z",
      "updated_at": "2016-11-30T16:25:03Z"
    },
    {
      "author": "ilgrank",
      "author_association": "NONE",
      "body": "Thanks for the quick reply\r\nI had hope that what MS POSH could not do, PSOS could have accomplished :)\r\nAlas, Microsoft does not listen very actively to bug reports :(\r\n",
      "created_at": "2016-11-30T17:10:15Z",
      "updated_at": "2016-11-30T17:10:15Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Hey @ilgrank , I understand.  The good thing about this is the contribution you provide. There are lots of MVP's looking at this all the time and we can (sort of) redirect the effort to where is needed.  You did Great in providing references to UserVoice posts.  \r\n\r\nDon't give us on us!  We'll do whatever we can to continue helping in improving PowerShell.\r\n:)\r\nMaximo Trinidad",
      "created_at": "2016-11-30T18:27:48Z",
      "updated_at": "2016-11-30T18:27:48Z"
    },
    {
      "author": "ilgrank",
      "author_association": "NONE",
      "body": "Thanks @MaximoTrinidad , I really appreciate the effor of all the people here \ud83d\udc4d \r\nand of course I hope, as you say, that this will gather the interest of enough people for Microsoft to notice.\r\nI also cross-referenced this issue on Uservoice, so that either side will know :)\r\n",
      "created_at": "2016-11-30T18:45:08Z",
      "updated_at": "2016-11-30T18:45:08Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Greatly Appreciated!\r\nMax",
      "created_at": "2016-11-30T18:46:52Z",
      "updated_at": "2016-11-30T18:46:52Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This doesn't repro with PSCore as CoreCLR has a different web client class that doesn't exhibit the same behavior.  ",
      "created_at": "2016-12-08T01:06:22Z",
      "updated_at": "2016-12-08T01:06:22Z"
    },
    {
      "author": "ilgrank",
      "author_association": "NONE",
      "body": "Hi @SteveL-MSFT : As @MaximoTrinidad  suggested some day ago, it seems that PSCore is lacking (among other things) the .AllElements and .ParsedHtml properties.\r\nOne of the greatest (IMHO of course) features of (MS) Invoke-WebRequest is the ability to parse web pages in order to return addressable objects.\r\nIt is a very useful feature, and it is a shame PSCore is missing it :(",
      "created_at": "2016-12-09T07:50:13Z",
      "updated_at": "2016-12-09T07:50:29Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@ilgrank please open a separate issue for .allelements and .parsedhtml properties",
      "created_at": "2016-12-09T16:32:03Z",
      "updated_at": "2016-12-09T16:32:03Z"
    },
    {
      "author": "ilgrank",
      "author_association": "NONE",
      "body": "Thanks @SteveL-MSFT \r\nI opened a new issue here: [https://github.com/PowerShell/PowerShell/issues/2867](https://github.com/PowerShell/PowerShell/issues/2867)",
      "created_at": "2016-12-09T19:33:13Z",
      "updated_at": "2016-12-09T19:33:25Z"
    },
    {
      "author": "TerrorFactor",
      "author_association": "NONE",
      "body": "Are there any updates on this? Possible workaround?",
      "created_at": "2017-05-06T00:41:25Z",
      "updated_at": "2017-05-06T00:41:25Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "-UseBasicParsing to avoid hang, the other issue above is to implement parsedhtml",
      "created_at": "2017-05-06T01:11:10Z",
      "updated_at": "2017-05-06T01:11:10Z"
    },
    {
      "author": "TerrorFactor",
      "author_association": "NONE",
      "body": "Maybe useful for some people, but I found a way to work around the issue and have a useable html element:\r\n```\r\nFunction ConvertTo-NormalHTML {\r\n    param([Parameter(Mandatory = $true, ValueFromPipeline = $true)]$HTML)\r\n\r\n    $NormalHTML = New-Object -Com \"HTMLFile\"\r\n    $NormalHTML.IHTMLDocument2_write($HTML.RawContent)\r\n    return $NormalHTML\r\n}\r\n```\r\n\r\nIt's a bit silly, but at least you can do something with the html.",
      "created_at": "2019-02-27T00:08:05Z",
      "updated_at": "2019-02-27T00:08:05Z"
    },
    {
      "author": "efd7887",
      "author_association": "NONE",
      "body": "> Well, unfortunately, using the \"-usebasicparsing\" parameter removes the \"forms\" property from the returned object, thus making the workaround just that: a temporary non-solution. This problem needs to be fixed. It is shameful that Microsoft has not fixed this in over 2 years. Shameful, microsoft.\r\n\r\nYeah its pretty terrible.  I have a task on a server that runs an XML import file for Cisco Unified Messaging and it only runs once a month.  Looking at the history it has failed 88% over the past 8 months because of this very issue.\r\n\r\n\r\nSometimes it completes quickly, sometimes it hangs for a very long time and then completes and the rest of the time it hangs and gets killed by our monitor (as designed).  People rely on our ability to automate effectively and efficient, but this amongst other issues are really giving PoSh a black eye in my infrastructure\r\n\r\nI actually had to  put in a safe check today to check if there are any Internet Explorer threads running and kill them all (regardless of sessions) just to get it to work.  This is quite frustrating!!  Next on my list is to write my own module in C# to do what I need to do",
      "created_at": "2019-03-01T17:07:32Z",
      "updated_at": "2019-03-01T17:15:45Z"
    }
  ],
  "created_at": "2016-11-30T11:02:50Z",
  "number": 2812,
  "state": "closed",
  "title": "Invoke-WebRequest hangs in some cases, unless -UseBasicParsing is used",
  "updated_at": "2019-03-01T17:15:45Z"
}