{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15603",
  "author": "iSazonov",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nThe custom source generator allows us to exclude reflection and to directly get current PowerShell version from MSBuild.\r\n\r\nPerfView doesn't work well on current .Net Preview. A fix has just been merged in .Net Runtime repo for this. I hope we get it in .Net 6.0 Preview6 or Preview7. So today I can not share reliable result from PerfView to confirm perf win. Obviously using static string is more faster then reflection.\r\n\r\n## PR Context\r\n\r\nContribute to #13540\r\nRelated #14268\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and opened an issue in the relevant tool repository. This may include:\r\n        - [ ] Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode\r\n        (which runs in a different PS Host).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n",
  "closed_at": "2022-10-11T18:50:17Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems test fails are not related to the PR - pwsh.exe has Preview.**8** in product version instead of Preview.**7**.\r\n\r\n@rjmholt @TravisEz13 Could you please look the issue?",
      "created_at": "2021-06-18T15:57:34Z",
      "updated_at": "2021-06-18T15:57:34Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov I opened https://github.com/PowerShell/PowerShell/issues/15607",
      "created_at": "2021-06-18T17:37:56Z",
      "updated_at": "2021-06-18T17:38:06Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@rjmholt I resolved the issue with release tag. It turned out that ci.psm1 always assigns ReleaseTag property directly to dotnet.",
      "created_at": "2021-06-25T09:45:09Z",
      "updated_at": "2021-06-25T09:45:09Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2021-07-02T14:00:39Z",
      "updated_at": "2021-07-02T14:00:39Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2021-11-10T02:00:49Z",
      "updated_at": "2022-10-06T00:21:06Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov  Sorry for the delay.  I am unavailable today but will look at this early next week.",
      "created_at": "2021-11-12T15:44:27Z",
      "updated_at": "2021-11-12T15:44:27Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2021-11-24T02:00:44Z",
      "updated_at": "2022-10-06T00:20:57Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov I really like you trying out the source generator!\r\nI measured the code you removed from `PSVersionInfo.cs` by using the source generator, and it takes about `7ms` on average on my machine for private build (going through the `Contains(\" Commit \")` code path, and hence slower). \r\n\r\n> ```\r\n> Assembly currentAssembly = typeof(PSVersionInfo).Assembly;\r\n> ProductVersion = currentAssembly.GetCustomAttribute<AssemblyInformationalVersionAttribute>().InformationalVersion;\r\n> \r\n> string rawGitCommitId;\r\n> string mainVersion = ProductVersion.Substring(0, ProductVersion.IndexOf(' '));\r\n> \r\n> if (ProductVersion.Contains(\" Commits: \"))\r\n> {\r\n>     rawGitCommitId = ProductVersion.Replace(\" Commits: \", \"-\").Replace(\" SHA: \", \"-g\");\r\n> }\r\n> else\r\n> {\r\n>     rawGitCommitId = mainVersion;\r\n> }\r\n> ```\r\n\r\nThe time it takes for `pwsh -noprofile -c exit` on my machine is about `390ms` on average (ranging from ~380 to ~420), and the time improvement is about `1.7%`. (an estimate only, didn't do end-to-end measurement)\r\n\r\nNot sure if the gain worth the extra complexity though.",
      "created_at": "2022-09-27T00:32:09Z",
      "updated_at": "2022-09-27T05:32:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Not sure if the gain worth the extra complexity though.\r\n\r\nIt's no more complicated than our ResGen or TypeGen. It's just something new to get used to. \ud83d\ude04 \r\n\r\nWe could replace some of our Regex with a standard .Net Regex SG to get benefits in startup scenario and other scenarios.\r\nAnd we could also replace TypeGen with our SG, which of course will not speed up PowerShell itself, but will noticeably speed up the CIs and the generated cache will probably be more correct.",
      "created_at": "2022-09-27T05:17:19Z",
      "updated_at": "2022-09-27T05:17:19Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2022-10-04T14:01:20Z",
      "updated_at": "2022-10-06T00:21:17Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The current type initializer of PSVersionInfo takes `24-30 ms` on my dev machine, and it happens when creating the banner messgae, which is very early in the startup process. It would be good for the startup time if we can reduce the time it takes.\r\n\r\nI will do an end-to-end measurement on the gains using source generator for `PSVersionInfo` plus the changes in https://github.com/PowerShell/PowerShell/pull/18210, and will report back the results.",
      "created_at": "2022-10-04T16:31:25Z",
      "updated_at": "2022-10-04T16:31:25Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@TravisEz13 and @PaulHigin, can you please review the changes again and re-evaluate the \"code injection\" concern?\r\n\r\nHere is the doc (and the sample code) about the source generator: https://learn.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/source-generators-overview\r\n\r\nThe arguments used to format the source template in [PSVersionInfoGenerator.cs](https://github.com/PowerShell/PowerShell/pull/15603/files#diff-4757e7bd4af91fb154f76a6ecbb38da1ca557e1994cebfb674e355a64f6169e1) are from the build properties defined in `PowerShell.Common.props`.\r\n",
      "created_at": "2022-10-06T21:11:33Z",
      "updated_at": "2022-10-06T22:36:36Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@WG-Security\r\nThe security group is Ok with this, because for release builds the generated version comes from a trusted source (releaseTag).",
      "created_at": "2022-10-10T21:06:17Z",
      "updated_at": "2022-10-10T21:06:17Z"
    },
    {
      "author": "pull-request-quantifier[bot]",
      "author_association": "NONE",
      "body": "### ![](https://img.shields.io/static/v1?label=Quantified&message=Medium&color=yellow)\r\n\r\nThis PR has `115` quantified lines of changes. In general, a change size of upto `200` lines is ideal for the best PR experience!\r\n\r\n------\r\n\r\n<details >\r\n    <summary display=\"inline\"> <strong>Quantification details</strong></summary>\r\n    <p />\r\n\r\n```\r\nLabel      : Medium\r\nSize       : +98 -17\r\nPercentile : 43%\r\n\r\nTotal files changed: 5\r\n\r\nChange summary by file extension:\r\n.props : +2 -0\r\n.cs : +62 -16\r\n.csproj : +34 -1\r\n```\r\n> Change counts above are quantified counts, based on the [PullRequestQuantifier customizations](https://github.com/microsoft/PullRequestQuantifier/blob/main/docs/prquantifier-yaml.md).\r\n    \r\n</details>\r\n\r\n\r\n<details>\r\n    <summary display=\"inline\"> <strong>Why proper sizing of changes matters</strong> </summary>\r\n    <p/>\r\n    <p/>\r\n\r\nOptimal pull request sizes drive a better predictable PR flow as they strike a\r\nbalance between between PR complexity and PR review overhead. PRs within the\r\noptimal size (typical small, or medium sized PRs) mean:\r\n\r\n- Fast and predictable releases to production:\r\n  - Optimal size changes are more likely to be reviewed faster with fewer\r\niterations.\r\n  - Similarity in low PR complexity drives similar review times.\r\n- Review quality is likely higher as complexity is lower:\r\n  - Bugs are more likely to be detected.\r\n  - Code inconsistencies are more likely to be detected.\r\n- Knowledge sharing is improved within the participants:\r\n  - Small portions can be assimilated better.\r\n- Better engineering practices are exercised:\r\n  - Solving big problems by dividing them in well contained, smaller problems.\r\n  - Exercising separation of concerns within the code changes.\r\n\r\n#### What can I do to optimize my changes\r\n\r\n- Use the PullRequestQuantifier to quantify your PR accurately\r\n  - Create a context profile for your repo using the [context generator](https://github.com/microsoft/PullRequestQuantifier/releases)\r\n  - Exclude files that are not necessary to be reviewed or do not increase the review complexity. Example: Autogenerated code, docs, project IDE setting files, binaries, etc. Check out the `Excluded` section from your `prquantifier.yaml` context profile. \r\n  - Understand your typical change complexity, drive towards the desired complexity by adjusting the label mapping in your `prquantifier.yaml` context profile.\r\n  - Only use the labels that matter to you, [see context specification](./docs/prquantifier-yaml.md) to customize your `prquantifier.yaml` context profile.\r\n- Change your engineering behaviors\r\n  - For PRs that fall outside of the desired spectrum, review the details and check if:\r\n    - Your PR could be split in smaller, self-contained PRs instead\r\n    - Your PR only solves one particular issue. (For example, don't refactor and code new features in the same PR).\r\n\r\n#### How to interpret the change counts in git diff output\r\n\r\n- One line was added: `+1 -0`\r\n- One line was deleted: `+0 -1`\r\n- One line was modified: `+1 -1` (git diff doesn't know about modified, it will\r\ninterpret that line like one addition plus one deletion)\r\n- Change percentiles: Change characteristics (addition, deletion, modification)\r\nof this PR in relation to all other PRs within the repository.\r\n\r\n</details>\r\n\r\n<p />\r\n\r\n------\r\n\r\nWas this comment helpful? <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiaVNhem9ub3YiLCJSZXBvc2l0b3J5TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwiLCJQdWxsUmVxdWVzdExpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsL3B1bGwvMTU2MDMiLCJFdmVudFR5cGUiOiJUaHVtYnNVcCJ9&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs up\"><strong>:thumbsup:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiaVNhem9ub3YiLCJSZXBvc2l0b3J5TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwiLCJQdWxsUmVxdWVzdExpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsL3B1bGwvMTU2MDMiLCJFdmVudFR5cGUiOiJOZXV0cmFsIn0=&amp;anonymous=True\" target=\"_blank\" title=\"Neutral\"><strong>&nbsp;:ok_hand:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiaVNhem9ub3YiLCJSZXBvc2l0b3J5TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwiLCJQdWxsUmVxdWVzdExpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsL3B1bGwvMTU2MDMiLCJFdmVudFR5cGUiOiJUaHVtYnNEb3duIn0=&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs down\"><strong>&nbsp;:thumbsdown:</strong></a> (<a href=\"MAILTO:prquantifier@microsoft.com\" title=\"Mail to prquantifier@microsoft.com\">Email</a>)\r\n[Customize PullRequestQuantifier](https://github.com/PowerShell/PowerShell/blob/master/.github/prquantifier.yaml) for this repository.\r\n\r\n",
      "created_at": "2022-10-11T18:17:05Z",
      "updated_at": "2022-10-11T18:17:05Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov Just FYI, I re-did the conflict resolution because you accidentally brough back the `PSCompatibleVersions` property, which was deleted in the other PR.",
      "created_at": "2022-10-11T18:27:08Z",
      "updated_at": "2022-10-11T18:27:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Thanks for working on the SG!\r\n\r\nSince you mentioned saving build time I think you could be interesting in SG for TypeGen.",
      "created_at": "2022-10-12T04:57:26Z",
      "updated_at": "2022-10-12T05:01:06Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> @iSazonov Just FYI, I re-did the conflict resolution because you accidentally brough back the `PSCompatibleVersions` property, which was deleted in the other PR.\r\n\r\nGihub did show only one merge conflict for\r\n```\r\n       internal static string ProductVersion { get; }\r\n        internal static string GitCommitId\r\n        {\r\n            get\r\n            {\r\n                return (string)s_psVersionTable[PSGitCommitIdName];\r\n            }\r\n        }\r\n```\r\nbut did not marked  PSCompatibleVersions. I wonder why. \ud83d\ude15 ",
      "created_at": "2022-10-12T05:18:29Z",
      "updated_at": "2022-10-12T05:18:29Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> Since you mentioned saving build time I think you could be interesting in SG for TypeGen.\r\n\r\nI don't know if that would save build time, I doubt it :)\r\nAgain, it's not about saving build time, but more about not doing things that are not needed.",
      "created_at": "2022-10-12T16:25:07Z",
      "updated_at": "2022-10-12T16:26:15Z"
    }
  ],
  "created_at": "2021-06-18T13:12:20Z",
  "number": 15603,
  "state": "closed",
  "title": "Use Source Code Generator for PSVersionInfo class",
  "updated_at": "2022-10-12T16:26:15Z"
}