{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6851",
  "author": "daxian-dbw",
  "body": "## PR Summary\r\n\r\nFix partially #5618\r\nRefactor code to make it easier to maintain and a little faster. Changes are as follows:\r\n1. Support finding a matching signature with [variance](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/covariance-contravariance/variance-in-delegates). But make PowerShell prefer exact match over match with variance.\r\n\r\n```powershell\r\nclass Foo {\r\n    static [string] GetA([System.IO.FileSystemInfo] $fsinfo, [object] $o)\r\n    {\r\n        return \"Varaince Match: GetA-filesysteminfo-object-string\"\r\n    }\r\n\r\n    static [string] GetB([System.IO.FileSystemInfo] $fsinfo, [object] $o)\r\n    {\r\n        return \"Variance Match: GetB-filesysteminfo-object-string\"\r\n    }\r\n    static [object] GetB([System.IO.FileInfo] $finfo, [string] $s)\r\n    {\r\n        return \"Exact Match: GetB-fileinfo-string-object\"\r\n    }\r\n}\r\n\r\n[Func[[System.IO.FileInfo], [string], [object]]] $f = [Foo]::GetA\r\n$f.Invoke([System.IO.FileInfo]::new(\"abc\"), \"string\")\r\n>  Varaince Match: GetA-filesysteminfo-object-string\r\n\r\n$f = [Foo]::GetB\r\n$f.Invoke([System.IO.FileInfo]::new(\"abc\"), \"string\")\r\n>  Exact Match: GetB-fileinfo-string-object\r\n```\r\n2. The metadata signatures in `PSMethod<..>` are generated based on the array of method overloads in `MethodCacheEntry.MethodInformationStructures`, in the exact same order. So in `LanguagePrimitive.ConvertViaParseMethod`, when we try to figure out if there is a match using the metadata signatures in `PSMethod<..>`, we can get the index of the matching signature, and the same index should locate the matching metod in `MethodCacheEntry.MethodInformationStructures`. Therefore, we don't need to compare signatures again in the actual conversion method, and instead, we can just leverage the index we found when figuring out conversion in `ConvertViaParseMethod`.\r\n   - This gets rid of the reflection call `GetMethod(\"Invoke\")` and the subsequent signature comparisons in the final conversion method.\r\n   - Also, when comparing signatures using `PSMethod<..>` in `ConvertViaParseMethod`, we can just use the generaic argument types of each `Func<..>` metadata type, instead of calling `GetMethod(\"Invoke\")` and then `GetParameters()`. This makes the code for comparing signatures simpler (the type `SignatureComparator`).\r\n   - Move `MatchesPSMethodProjectedType` from `PSMemberInfo.cs` to the type `SignatureComparator` in `LanguagePrimitives.cs`, as it's closely related to the signature comparison. Also, renamed it to `ProjectedTypeMatchesTargetType`.\r\n   - These changes make PSMethod-to-Delegate conversion a little faster, but no big improvement, as the true bottleneck probably is in delegate creation(?). Actually, the performance of this conversion is not critical at all at this moment because this feature should rarely be used in any hot script path. So this exercise is mainly for fun. If we support extension methods one day, the conversion performance may be more interesting (LINQ extension method calls with predicate delegate). See the measurements on my machine below (both powershell fresh started with `-nopro` on a warm machine, [`measure.ps1.txt`](https://github.com/PowerShell/PowerShell/files/1993043/measure.ps1.txt) is attached):\r\n\r\n```powershell\r\n### both built with netcoreapp2.1, and crossgen'ed\r\n\r\n####### Before change ######\r\nPS C:\\> C:\\arena\\tmp\\measure.ps1\r\n10000 loops per iteration, 10 iterations\r\nMaximum time: 139\r\nMinimum time: 113\r\nAverage time: 117.3\r\nPS C:\\> C:\\arena\\tmp\\measure.ps1\r\n10000 loops per iteration, 10 iterations\r\nMaximum time: 124\r\nMinimum time: 114\r\nAverage time: 117.5\r\nPS C:\\>\r\nPS C:\\> C:\\arena\\tmp\\measure.ps1\r\n10000 loops per iteration, 10 iterations\r\nMaximum time: 240\r\nMinimum time: 111\r\nAverage time: 125.5\r\n\r\n###### After Change ######\r\nPS C:\\> C:\\arena\\tmp\\measure.ps1\r\n10000 loops per iteration, 10 iterations\r\nMaximum time: 129\r\nMinimum time: 99\r\nAverage time: 102.3\r\nPS C:\\> C:\\arena\\tmp\\measure.ps1\r\n10000 loops per iteration, 10 iterations\r\nMaximum time: 133\r\nMinimum time: 98\r\nAverage time: 105.5\r\nPS C:\\> C:\\arena\\tmp\\measure.ps1\r\n10000 loops per iteration, 10 iterations\r\nMaximum time: 104\r\nMinimum time: 98\r\nAverage time: 99.4\r\n```\r\n3. Remove `PSEnum<T>`. We can directly use enum types when constructing the metadata type `Func<..>`.\r\n4. Remove the code that generate metadata signatures for generic methods (call `MakeGenericMethod` with fake types like `GenericType0`, `GenericType1`). This is because:\r\n   - We don't support convert generic method to delegate today, so may be better not spending time on preparing the metadata signature types for those methods. \r\n   - When the day comes that we need to support it, it's better to use generic argument types directly to construct the `Func<..>` metadata types. I left comments in `GetMethodGroupType` method in `PSMemberInfo.cs` to explain why that approach is better.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [ ] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed - Issue link:\r\n- **Testing - New and feature**\r\n    - [ ] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [x] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2018-05-15T18:45:05Z",
  "comments": [
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Nice!\r\nWill look closer tonight!",
      "created_at": "2018-05-14T15:55:55Z",
      "updated_at": "2018-05-14T15:55:55Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@rjmholt Thanks for your review!\r\n@powercode Please take your time, thanks!",
      "created_at": "2018-05-14T17:50:52Z",
      "updated_at": "2018-05-14T17:50:52Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The reminding CodeFactor issues are from the existing code, not changes from this PR.",
      "created_at": "2018-05-15T07:10:27Z",
      "updated_at": "2018-05-15T07:10:27Z"
    }
  ],
  "created_at": "2018-05-10T19:59:10Z",
  "number": 6851,
  "state": "closed",
  "title": "Further improve PSMethod to Delegate conversion",
  "updated_at": "2018-05-15T18:45:09Z"
}