{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16901",
  "author": "genriquez",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\n- Unzip test project to some folder\r\n- Publish binaries `dotnet publish PwshTest.csproj -o .\\publish --configuration Release --runtime win10-x64`\r\n- Run PwshTest.exe\r\n\r\n### Expected behavior\r\n\r\n```console\r\nApplication exits\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nApplication hangs\r\n```\r\n\r\n\r\n### Error details\r\n\r\nSeems that creating an instance of `WScript.Shell` is causing the PS sdk library to hang (looping, since there is cpu usage going on). This is specific to using the `--runtime` parameter on publish. Publishing without specifying runtime does not hang, and running from sources in Debug and Release does not hang either. Removing creation of `WScript.Shell` from the script file makes it pass without issues.\r\n\r\nTested in SDK 7.1.5, the latest release for Net5 applications.\r\n\r\n\r\n### Environment data\r\n\r\n```powershell\r\n<TargetFramework>net5.0-windows10.0.19041</TargetFramework>\r\n<PackageReference Include=\"Microsoft.PowerShell.SDK\" Version=\"7.1.5\" />\r\n```\r\n\r\n\r\n### Visuals\r\n\r\nTest solution and script: [PwshTest.zip](https://github.com/PowerShell/PowerShell/files/8111031/PwshTest.zip)\r\n",
  "closed_at": "2022-02-24T00:00:43Z",
  "comments": [
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@genriquez change your target framework to net5.0 and use this runtimeidentifier.\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/31c14f2ad3714c262108acf6613ab023bc971012/src/powershell-win-core/powershell-win-core.csproj#L11\r\n\r\nSome native dependencies are not copied to the build (MMI) if you are specifying Windows 10 as a target framework. (Win vs Win7 vs Win10 Runtime folder)",
      "created_at": "2022-02-22T08:08:03Z",
      "updated_at": "2022-02-22T08:08:03Z"
    },
    {
      "author": "genriquez",
      "author_association": "NONE",
      "body": "Some findings with the test project (note that publish folder was deleted for each case, to avoid false positives):\r\n\r\n- Changing to net5.0 target framework and those runtime identifiers still yields hanging binaries if using `--runtime win10-x64`\r\n- Further changing `RuntimeIdentifiers` to `win10-x64` and keeping `--runtime win10-x64` still yields hanging binaries\r\n- Publishing without `--runtime` flag yields working binaries in both previous steps, but that was already working without doing any changes",
      "created_at": "2022-02-22T12:41:46Z",
      "updated_at": "2022-02-22T14:48:04Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@genriquez  win10-x64 is not a supported runtime. only win7-*. If you really need windows 10, you have to copy some missing native dependencies. ",
      "created_at": "2022-02-22T15:15:03Z",
      "updated_at": "2022-02-22T15:16:01Z"
    },
    {
      "author": "genriquez",
      "author_association": "NONE",
      "body": "@fMichaleczek Tested with these settings but still getting hanging binaries:\r\n\r\n```\r\n<TargetFramework>net5.0</TargetFramework>\r\n<RuntimeIdentifiers>win7-x86;win7-x64</RuntimeIdentifiers> \r\n```\r\n\r\n`dotnet publish PwshTest.csproj -o .\\publish --configuration Release --runtime win7-x64`",
      "created_at": "2022-02-22T15:33:58Z",
      "updated_at": "2022-02-22T15:33:58Z"
    },
    {
      "author": "genriquez",
      "author_association": "NONE",
      "body": "Is there anything else I can provide @fMichaleczek? The test project is attached to the original post.\r\n\r\nRemoving the `--runtime` parameter is a valid workaround for us, so we can just leave this open for someone else to take a stab at it.",
      "created_at": "2022-02-22T15:49:01Z",
      "updated_at": "2022-02-22T15:49:01Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@genriquez I will try later on the same version and give you a feedback if I found something.",
      "created_at": "2022-02-22T15:54:34Z",
      "updated_at": "2022-02-22T15:54:34Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-02-24T00:00:42Z",
      "updated_at": "2022-02-24T00:00:42Z"
    },
    {
      "author": "genriquez",
      "author_association": "NONE",
      "body": "@iSazonov the issue was not resolved. Can we get this bug re-opened?",
      "created_at": "2022-03-02T22:56:07Z",
      "updated_at": "2022-03-02T22:56:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@genriquez It is not a problem in PowerShell SDK. It is a problem with your project.\r\n\r\nI modified your project and script, added output and did some experiments\r\n[PwshTest.zip](https://github.com/PowerShell/PowerShell/files/8175258/PwshTest.zip)\r\nAlso I copied _Module_ folder with standard module manifests to `publish` directory.\r\n\r\nCommand line `dotnet publish PwshTest.csproj -o .\\publish --configuration Release --runtime win7-x64 --self-contained`\r\nSee results below. \r\n\r\n![image](https://user-images.githubusercontent.com/22290914/156503307-87599274-e6b9-4143-a156-c7861e5e145a.png)\r\n\r\n\r\n",
      "created_at": "2022-03-03T05:44:52Z",
      "updated_at": "2022-03-03T05:46:41Z"
    },
    {
      "author": "genriquez",
      "author_association": "NONE",
      "body": "@iSazonov Oh, so the net5 version of the package is no longer maintained?",
      "created_at": "2022-03-05T01:08:56Z",
      "updated_at": "2022-03-05T01:08:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Supported. (You must use the same .Net version for you project and PowerShell SDK. I used latest I have on my notebook.)",
      "created_at": "2022-03-05T18:37:11Z",
      "updated_at": "2022-03-05T18:37:11Z"
    },
    {
      "author": "genriquez",
      "author_association": "NONE",
      "body": "If the proposed solution still requires to copy modules folder manually, I would still consider it a work around. Is there a separate nuget we can include to automate this?",
      "created_at": "2022-03-10T13:32:21Z",
      "updated_at": "2022-03-10T13:32:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Could you please answer?",
      "created_at": "2022-03-11T07:56:31Z",
      "updated_at": "2022-03-11T07:56:31Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "See the explanation here: https://github.com/PowerShell/PowerShell/issues/16525#issuecomment-983108982\r\n\r\nAs for the hang, it's because the built-in module folder is not deployed along with your project. It was fixed by https://github.com/PowerShell/PowerShell/pull/16628 to detect that a built-in module is missing.",
      "created_at": "2022-03-11T17:35:43Z",
      "updated_at": "2022-03-11T17:35:43Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@daxian-dbw Have you planned a backport for the LTS? It's a pretty annoying bug and I'm happy with your fix on 7.3. ",
      "created_at": "2022-03-12T08:29:07Z",
      "updated_at": "2022-03-12T08:29:07Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@fMichaleczek Unfortunately, LTS only accepts security and regression fixes, so this fix cannot be ported to 7.2.x.",
      "created_at": "2022-03-14T03:18:46Z",
      "updated_at": "2022-03-14T03:18:46Z"
    },
    {
      "author": "genriquez",
      "author_association": "NONE",
      "body": "@daxian-dbw I guess a port to 7.1.x won't be happening either (we are still running on net5)? Having it error out certainly helps out a lot. As for the missing built-in modules, is there a reason why publishing without specifying a runtime somehow copies them (or the app does not hang for some other reason), but when I specify a win-x64 runtime it doesn't work?",
      "created_at": "2022-03-16T23:07:29Z",
      "updated_at": "2022-03-16T23:07:29Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I think porting to 7.1.x won't happen too. See https://github.com/PowerShell/PowerShell/issues/16525#issuecomment-983108982 for why it works this way. It's an unfortunate tradeoff, because there was no way (at least at the time when doing this) for a NuGet package to choose where to deploy some content files depending on whether or not `-runtime` is specified.",
      "created_at": "2022-03-17T17:17:52Z",
      "updated_at": "2022-03-17T17:17:52Z"
    }
  ],
  "created_at": "2022-02-21T17:17:53Z",
  "number": 16901,
  "state": "closed",
  "title": "Microsoft.Powershell.Sdk - Script hangs when running from runtime-specific published binary",
  "updated_at": "2022-03-17T17:17:53Z"
}