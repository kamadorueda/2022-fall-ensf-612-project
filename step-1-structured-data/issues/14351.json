{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14351",
  "author": "SeeminglyScience",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\nusing namespace System.Management.Automation.Runspaces\r\n\r\n$ps = $res = $null\r\ntry {\r\n    $ps = [powershell]::Create()\r\n    $null = $ps.AddScript(\"Write-Error 'test'\")\r\n    $cmd = [Command]::new(\r\n        'process { Write-Error -ErrorRecord $_ }',\r\n        <# isScript: #> $true)\r\n\r\n    # Works if you uncomment this.\r\n    # $cmd.MergeMyResults('All', 'Output')\r\n\r\n    $cmd.MergeUnclaimedPreviousCommandResults = 'Error, Output'\r\n    $null = $ps.Commands.AddCommand($cmd)\r\n    $res = $ps.Invoke()\r\n} finally {\r\n    ($ps)?.Dispose()\r\n}\r\n\r\n$res\r\n```\r\n\r\n## Expected behavior\r\n\r\nNo output, and does not throw ScriptCallDepthException.\r\n\r\n## Actual behavior\r\n\r\nAfter ~10 minutes it throws ScriptCallDepthException.\r\n\r\n```python\r\nException             :\r\n    Type           : System.Management.Automation.MethodInvocationException\r\n    ErrorRecord    :\r\n        Exception             :\r\n            Type    : System.Management.Automation.ParentContainsErrorRecordException\r\n            Message : Exception calling \"Invoke\" with \"0\" argument(s): \"The script failed due to call depth overflow.\"\r\n            HResult : -2146233087\r\n        CategoryInfo          : NotSpecified: (:) [], ParentContainsErrorRecordException\r\n        FullyQualifiedErrorId : ScriptCallDepthException\r\n        InvocationInfo        :\r\n            ScriptLineNumber : 9\r\n            OffsetInLine     : 5\r\n            HistoryId        : -1\r\n            Line             :     $res = $ps.Invoke()\r\n\r\n            PositionMessage  : At line:9 char:5\r\n                               +     $res = $ps.Invoke()\r\n                               +     ~~~~~~~~~~~~~~~~~~~\r\n            CommandOrigin    : Internal\r\n        ScriptStackTrace      : at <ScriptBlock>, <No file>: line 9\r\n    TargetSite     :\r\n        Name          : CheckActionPreference\r\n        DeclaringType : System.Management.Automation.ExceptionHandlingOps, System.Management.Automation, Version=7.1.0.0, Culture=neutral,\r\nPublicKeyToken=31bf3856ad364e35\r\n        MemberType    : Method\r\n        Module        : System.Management.Automation.dll\r\n    StackTrace     :\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n    Message        : Exception calling \"Invoke\" with \"0\" argument(s): \"The script failed due to call depth overflow.\"\r\n    Data           : System.Collections.ListDictionaryInternal\r\n    InnerException :\r\n        Type        : System.Management.Automation.ScriptCallDepthException\r\n        ErrorRecord :\r\n            Exception             :\r\n                Type    : System.Management.Automation.ParentContainsErrorRecordException\r\n                Message : The script failed due to call depth overflow.\r\n                HResult : -2146233087\r\n            CategoryInfo          : InvalidOperation: (0:Int32) [], ParentContainsErrorRecordException\r\n            FullyQualifiedErrorId : CallDepthOverflow\r\n        TargetSite  :\r\n            Name          : Invoke\r\n            DeclaringType : System.Management.Automation.Runspaces.PipelineBase, System.Management.Automation, Version=7.1.0.0,\r\nCulture=neutral, PublicKeyToken=31bf3856ad364e35\r\n            MemberType    : Method\r\n            Module        : System.Management.Automation.dll\r\n        StackTrace  :\r\n   at System.Management.Automation.Runspaces.PipelineBase.Invoke(IEnumerable input)\r\n   at System.Management.Automation.PowerShell.Worker.ConstructPipelineAndDoWork(Runspace rs, Boolean performSyncInvoke)\r\n   at System.Management.Automation.PowerShell.Worker.CreateRunspaceIfNeededAndDoWork(Runspace rsToUse, Boolean isSync)\r\n   at System.Management.Automation.PowerShell.CoreInvokeHelper[TInput,TOutput](PSDataCollection`1 input, PSDataCollection`1 output,\r\nPSInvocationSettings settings)\r\n   at System.Management.Automation.PowerShell.CoreInvoke[TInput,TOutput](PSDataCollection`1 input, PSDataCollection`1 output,\r\nPSInvocationSettings settings)\r\n   at System.Management.Automation.PowerShell.CoreInvoke[TOutput](IEnumerable input, PSDataCollection`1 output, PSInvocationSettings\r\nsettings)\r\n   at System.Management.Automation.PowerShell.Invoke(IEnumerable input, PSInvocationSettings settings)\r\n   at CallSite.Target(Closure , CallSite , Object )\r\n        Message     : The script failed due to call depth overflow.\r\n        Source      : System.Management.Automation\r\n        HResult     : -2146233087\r\n    Source         : System.Management.Automation\r\n    HResult        : -2146233087\r\nCategoryInfo          : NotSpecified: (:) [], MethodInvocationException\r\nFullyQualifiedErrorId : ScriptCallDepthException\r\nInvocationInfo        :\r\n    ScriptLineNumber : 9\r\n    OffsetInLine     : 5\r\n    HistoryId        : -1\r\n    Line             :     $res = $ps.Invoke()\r\n\r\n    PositionMessage  : At line:9 char:5\r\n                       +     $res = $ps.Invoke()\r\n                       +     ~~~~~~~~~~~~~~~~~~~\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 9\r\n```\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.0\r\nPSEdition                      Core\r\nGitCommitId                    7.1.0\r\nOS                             Microsoft Windows 10.0.18362\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n## Notes\r\n\r\nCredit to @jborean93 for finding this one. Seems like the error pipe is being set to the same pipe as input.",
  "closed_at": null,
  "comments": [
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Also would be great to expand the docs on `MergeUnclaimedPreviousCommandResults`, not very intuitive when trying to understand what it does exactly.",
      "created_at": "2020-12-08T18:59:03Z",
      "updated_at": "2020-12-08T18:59:55Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "i think this boils down to an error in the declaration of the enum. It's marked with flags, but there are no values associated with the enum members, so they're just sequential values.",
      "created_at": "2021-03-01T21:54:58Z",
      "updated_at": "2021-03-01T21:54:58Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "The enum is a weird one. It looks like it was originally written for PowerShell v2 where you could only redirect the error or output pipe so having a flag to indicate `Error | Output` made sense in some situations. When the other streams were added they were added as an enum like value and the methods were updated to treat them as such. There\u2019s a few instances where I found this enum type being used in different ways and it\u2019s ultimately typically because the methods were designed for different PowerShell versions.",
      "created_at": "2021-03-01T22:06:53Z",
      "updated_at": "2021-03-01T22:06:53Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> i think this boils down to an error in the declaration of the enum. It's marked with flags, but there are no values associated with the enum members, so they're just sequential values.\r\n\r\nThat's definitely a problem, though I don't think it's related to this bug.  `Output` and `Error` are low enough to work like bit flags as long as that's all you use, and that API throws if you pass it anything other than `None` or `Output | Error` anyway.\r\n\r\nIt's functionally a `bool` property that some folks presumably meant to expand at some point.  Makes me wonder if they gave up on that once they noticed they declared the enum wrong \ud83e\udd37 ",
      "created_at": "2021-03-02T19:54:49Z",
      "updated_at": "2021-03-02T19:54:49Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "The Engine WG reviewed this today. We agree the bug this is a bug that should be fixed and will mark it as up for grabs.",
      "created_at": "2022-02-18T00:07:16Z",
      "updated_at": "2022-02-18T00:07:16Z"
    }
  ],
  "created_at": "2020-12-08T15:28:10Z",
  "labels": [
    "Issue-Bug",
    "WG-Engine",
    "Up-for-Grabs"
  ],
  "number": 14351,
  "state": "open",
  "title": "Setting `MergeUnclaimedPreviousCommandResults` without `MergeMyResults` throws ScriptCallDepthException",
  "updated_at": "2022-02-18T00:07:33Z"
}