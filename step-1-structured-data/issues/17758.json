{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17758",
  "author": "mklement0",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nIf `[char]` instances were consistently compared case-insensitively to each other and to strings, all of the following commands would output `0`.\r\n\r\n```powershell\r\n# OK: [string] vs. [string]\r\n(Compare-Object ('a') ('A')).Count\r\n# OK: [string] vs. [char]\r\n(Compare-Object ('a') ([char] 'A')).Count\r\n# !! BROKEN: [char] vs. [char]\r\n(Compare-Object ([char] 'a') ([char] 'A')).Count\r\n# !! BROKEN: [char] vs. [string]\r\n(Compare-Object ([char] 'a') ('A')).Count\r\n```\r\n\r\nNote that `[char] 'a' -eq [char] 'A'` is `$true` (even though with `-gt`, `-lt`, `...` it is the _code points_ that get compared, resulting in case-sensitive behavior).\r\n\r\n#12498 is conceptually related, but would not fix this issue, because use of the `IEquatable<T>` interface would also result in case-sensitive behavior.\r\n\r\n### Expected behavior\r\n\r\n```console\r\n0\r\n0\r\n0\r\n0\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\n0\r\n0\r\n2\r\n2\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nPowerShell Core 7.3.0-preview.6\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "How do chars compare, as chars or as strings? `Compare-Object`'s`CaseSensitive` parameter does not affect the result (and this is expected behavior for non strings, IMO). But:\r\n```\r\n[char] 'a' -eq [char] 'A'     # True\r\n[char] 'a' -ceq [char] 'A'    # False\r\n```",
      "created_at": "2022-07-24T17:09:12Z",
      "updated_at": "2022-07-24T20:23:02Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@237dmitry: They're not _technically_ compared as strings with `-eq` (if memory serves, `.ToUpperInvariant()` is called before comparing), but the intent is clearly the same: compare `[char]`s case-INsensitively.\r\n\r\nTherefore, `Compare-Object`, which is also built on _equality_ comparison, should behave the same (with `-CaseSensitive` acting as opt-out).\r\n",
      "created_at": "2022-07-24T23:01:13Z",
      "updated_at": "2022-07-24T23:01:13Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "Thanks for the clarification.",
      "created_at": "2022-07-24T23:16:30Z",
      "updated_at": "2022-07-24T23:16:30Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> How do chars compare, as chars or as strings? `Compare-Object`'s`CaseSensitive` parameter does not affect the result (and this is expected behavior for non strings, IMO). But:\r\n> \r\n> ```\r\n> [char] 'a' -eq [char] 'A'     # True\r\n> [char] 'a' -ceq [char] 'A'    # False\r\n> ```\r\n\r\nI think `-eq` is always `-ieq` The char type itself only does case sensitive comparisons \r\n```\r\nPS>  [char]::Equals(([char]'a'),([char]'A'))\r\nFalse\r\n```\r\nBut string comparisons are case sensitive by default with the option to select culture and case sensitivity. \r\n```\r\nPS>  [string]::Equals(([char]'a'),([char]'A'))\r\nFalse\r\n\r\nPS>  [string]::Equals(([char]'a'),([char]'A'), [System.StringComparison]::CurrentCultureIgnoreCase)\r\nTrue\r\n```\r\n\r\nIEQ might call ToUpper or ToLower on both strings and a chars and compare the result or it might specify the comparison type for strings.    My hunch  is `Compare-Object` is only requesting insensitive for strings and not for chars. \r\nBecause there is only a `-CaseSensitive` option for  `Compare-Object` the natural expectation is chars and strings both use case insensitive comparisons _by default_ and only case sensitive when the switch is specified.   \r\n",
      "created_at": "2022-07-27T13:13:27Z",
      "updated_at": "2022-07-27T13:13:27Z"
    }
  ],
  "created_at": "2022-07-24T13:36:29Z",
  "number": 17758,
  "state": "open",
  "title": "Compare-Object with [char] instances is unexpectedly case-sensitive by default",
  "updated_at": "2022-07-27T13:13:27Z"
}