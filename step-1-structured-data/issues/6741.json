{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6741",
  "author": "kirillkovalenko",
  "body": "PowerShell does not allow binary modules in form of an **.EXE** assembly file.  We have a .NET .exe module that apart from other things contains a few powershell cmdlets. Sometimes I want to load this module into a standard PS host. Currently I cannot. I've tried 2 ways I'm aware of, and both do not work.\r\n\r\nIs far as I know there are not technical reason that should prevent me from using .net .exe assembly as .dll assembly. If I rename the file to .dll it works. \r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nWay 1: Bare module file\r\n```powershell\r\nImport-Module .\\MyModule.exe\r\n```\r\n\r\nWay 2: Manifest file\r\n\r\n```powershell\r\n@{ RootModule = 'MyModule.exe'; ModuleVersion = '2.0' }\r\n```\r\n\r\n```powershell\r\nImport-Module .\\MyModule.psd1\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nIt works\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\nWay 1:\r\n```none\r\nImport-Module : The extension '.exe' is not a valid module extension. The supported module extensions are '.dll', '.ps1', '.psm1', '.psd1', '.cdxml' and '.xaml'. Correct the extension then try adding the\r\nfile 'C:\\Users\\User\\Workplace\\Project1\\Debug\\MyModule.exe' again.\r\nAt line:1 char:1\r\n+ Import-Module .\\MyModule.exe\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : PermissionDenied: (:) [Import-Module], InvalidOperationException\r\n    + FullyQualifiedErrorId : Modules_InvalidModuleExtension,Microsoft.PowerShell.Commands.ImportModuleCommand\r\n```\r\n\r\nWays 2:\r\n```none\r\nImport-Module : Object reference not set to an instance of an object.\r\nAt line:1 char:1\r\n+ Import-Module .\\MyModule.psd1\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Import-Module], NullReferenceException\r\n    + FullyQualifiedErrorId : System.NullReferenceException,Microsoft.PowerShell.Commands.ImportModuleCommand\r\n```\r\nThe call stack:\r\n```none\r\nObject reference not set to an instance of an object.\r\n   at Microsoft.PowerShell.Commands.ModuleCmdletBase.LoadModuleNamedInManifest(PSModuleInfo parentModule, ModuleSpecification moduleSpecification, String moduleBase, Boolean searchModulePath, String prefix, SessionState ss, ImportModuleOptions options, ManifestProcessingFlags manifestProcessingFlags, Boolean loadTypesFiles, Boolean loadFormatFiles, Object privateData, Boolean& found, String shortModuleName)\r\n   at Microsoft.PowerShell.Commands.ModuleCmdletBase.LoadModuleManifest(String moduleManifestPath, ExternalScriptInfo scriptInfo, Hashtable data, Hashtable localizedData, ManifestProcessingFlags manifestProcessingFlags, Version minimumVersion, Version maximumVersion, Version requiredVersion, Nullable`1 requiredModuleGuid, ImportModuleOptions& options, Boolean& containedErrors)\r\n   at Microsoft.PowerShell.Commands.ModuleCmdletBase.LoadModule(PSModuleInfo parentModule, String fileName, String moduleBase, String prefix, SessionState ss, Object privateData, ImportModuleOptions& options, ManifestProcessingFlags manifestProcessingFlags, Boolean& found, Boolean& moduleFileFound)\r\n   at Microsoft.PowerShell.Commands.ImportModuleCommand.ImportModule_LocallyViaName(ImportModuleOptions importModuleOptions, String name)\r\n   at Microsoft.PowerShell.Commands.ImportModuleCommand.ProcessRecord()\r\n   at System.Management.Automation.Cmdlet.DoProcessRecord()\r\n   at System.Management.Automation.CommandProcessor.ProcessRecord()\r\n```\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0\r\nOS                             Microsoft Windows 10.0.15063\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2019-02-08T03:56:39Z",
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Does this module contain cmdlets? If not, then you should really use the `AssembliesToProcess` field. This will be faster since the module loader won't scan all the types in the assembly looking for cmdlets. Alternatively you can use `Add-Type -AssemblyName ...` to directly load the module. Hopefully these alternatives will unblock you.\r\n\r\nOtherwise, the null pointer exception is definitely a bug that should be fixed. Restricting the set of extensions allowed as `RootModule` was deliberated and I vaguely recall that we specifically chose to exclude executables but I can't remember why. @khansen00 - do you remember? ",
      "created_at": "2018-04-26T16:57:29Z",
      "updated_at": "2018-04-26T16:57:29Z"
    },
    {
      "author": "kirillkovalenko",
      "author_association": "NONE",
      "body": "@BrucePay  Yes, this module contains cmdlets.  Below is a minimal module to reproduce this issue\r\n```c#\r\nnamespace Module6741\r\n{\r\n    [Cmdlet(VerbsCommon.Get, \"FooBar\")]\r\n    public class GetFooBarCmdlet : PSCmdlet\r\n    {\r\n        protected override void ProcessRecord()\r\n        {\r\n            WriteObject(\"FooBar\");\r\n        }\r\n    }\r\n\r\n    internal class EntryPoint\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n        }\r\n    }\r\n}\r\n```",
      "created_at": "2018-04-27T06:41:25Z",
      "updated_at": "2018-04-27T06:41:25Z"
    },
    {
      "author": "kirillkovalenko",
      "author_association": "NONE",
      "body": "@BrucePay I see no `AssembliesToProcess` so I assume you meant `RequiredAssemblies` manifest field. If I add `RequiredAssemblies` instead of `RootModule` the import-module does not crash, but no cmdlets get exported either. \r\n```none\r\n> ipmo .\\MyModule.psd1\r\n> Get-Module MyModule\r\n\r\nModuleType Version    Name                                ExportedCommands\r\n---------- -------    ----                                ----------------\r\nManifest   1.0        MyModule\r\n```",
      "created_at": "2018-04-27T07:05:17Z",
      "updated_at": "2018-04-27T07:07:31Z"
    },
    {
      "author": "kirillkovalenko",
      "author_association": "NONE",
      "body": "@BrucePay The `Add-Type -AssemblyName` didn't work for as well.  Am I doing it wrong?\r\n```none\r\n> Add-Type -AssemblyName \"ExeModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\"\r\n> Get-FooBar\r\nGet-FooBar : The term 'Get-FooBar' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is\r\ncorrect and try again.\r\n```",
      "created_at": "2018-04-27T07:16:15Z",
      "updated_at": "2018-04-27T07:16:15Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@kirillkovalenko `Import-Module` has an `Assembly` parameter that takes a `System.Reflection.Assembly` object.  This works for me:\r\n\r\n```powershell\r\n$assembly = [System.Reflection.Assembly]::LoadFrom('Path\\To\\Module.exe')\r\nImport-Module -Assembly $assembly\r\n```",
      "created_at": "2018-05-01T18:19:11Z",
      "updated_at": "2018-05-01T18:19:11Z"
    }
  ],
  "created_at": "2018-04-26T07:15:40Z",
  "number": 6741,
  "state": "closed",
  "title": "Import-Module does not work with .EXE binary modules",
  "updated_at": "2019-02-08T03:56:39Z"
}