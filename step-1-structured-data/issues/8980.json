{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8980",
  "author": "sdwheeler",
  "body": "_From @francesco1119 on February 25, 2019 3:27_\n\n\r\nIt\u00b4s as simple as that Split-Path is removing the last '\"' from every Pathname you query form any service:\r\n\r\n```\r\n$service = get-wmiobject -query 'select * from win32_service where name=\"SQLBrowser\"';\r\nWrite-output $service.pathname \r\nWrite-output $service.pathname | Split-Path\r\n```\r\n\r\n![missing](https://user-images.githubusercontent.com/3397477/53312511-37d2b700-391a-11e9-9bbd-0657a2559bcf.png)\r\n\r\n\r\n---\r\n#### Document Details\r\n\r\n\u26a0 *Do not edit this section. It is required for docs.microsoft.com \u279f GitHub issue linking.*\r\n\r\n* ID: 4fc8b0a5-8130-a6e3-7e95-92495fbcb605\r\n* Version Independent ID: 7871d186-25d2-78eb-9b50-cd04495ad981\r\n* Content: [Split-Path (Microsoft.PowerShell.Management)](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/split-path?view=powershell-6)\r\n* Content Source: [reference/6/Microsoft.PowerShell.Management/Split-Path.md](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Management/Split-Path.md)\r\n* Product: **powershell**\r\n* GitHub Login: @daxian-dbw\r\n* Microsoft Alias: **dongbow**\n\n_Copied from original issue: MicrosoftDocs/PowerShell-Docs#3759_",
  "closed_at": "2019-06-01T00:00:46Z",
  "comments": [
    {
      "author": "sdwheeler",
      "author_association": "COLLABORATOR",
      "body": "This is a bug. Moving this issue to PowerShell/PowerShell/Issue",
      "created_at": "2019-02-25T20:45:13Z",
      "updated_at": "2019-02-25T20:45:13Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "The underlying issue is how `Split-Path` treats paths that have _embedded_ quotation marks (which they shouldn't):\r\n\r\n```powershell\r\nPS> '\"c:\\tmp\\file\"' | split-path\r\n\"c:\\tmp \r\n\r\nPS> \"'c:\\tmp\\file'\" | split-path\r\n'c:/tmp\r\n```\r\n",
      "created_at": "2019-02-25T21:31:11Z",
      "updated_at": "2019-02-25T21:31:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Is the issue related only to Split-Path or to other cmdlets and providers?",
      "created_at": "2019-02-26T18:16:47Z",
      "updated_at": "2019-02-26T18:16:47Z"
    },
    {
      "author": "sdwheeler",
      "author_association": "COLLABORATOR",
      "body": "Based on @mklement0's example, it looks like it is just a problem with Split-Path when the input is a string that contains quotes.",
      "created_at": "2019-02-26T18:19:12Z",
      "updated_at": "2019-02-26T18:19:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems we had such issue for completions (IntelliSense). It was fixed.",
      "created_at": "2019-02-26T18:26:33Z",
      "updated_at": "2019-02-26T18:26:33Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I think this is a fairly exotic problem and I'm not sure we need to do anything about it:\r\n\r\nPassing a path _with embedded quoting_ is arguably user error.\r\n\r\n`Split-Path` blindly splits by the last `\\` or `/` instance, which is normally fine, especially in light of `'/subdir` and `\"/subdir` being technically valid paths (the latter only on Unix-like platforms), however unlikely.\r\n\r\n`\"C:\\...\"` is _not_ a valid path, however, because `\"` cannot be used in paths _on Windows_ (and if it were a legal char., it couldn't be followed by a _drive spec_).\r\n\r\nSo, if we want to do something about this, we could check for the following specific cases _on Windows_ and report an error:\r\n\r\n* if a `\"` is present anywhere in the path\r\n* if a an initial `'` is followed by a drive spec / UNC share\r\n\r\n> It seems we had such issue for completions (IntelliSense). It was fixed.\r\n\r\nIn this case it was a _registry value_ that was defined with embedded quoting, not a user typing such a value.",
      "created_at": "2019-02-26T18:35:40Z",
      "updated_at": "2019-02-26T18:35:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "So use `$service.pathname | Split-Path` instead of `Write-output $service.pathname | Split-Path`.",
      "created_at": "2019-02-26T20:08:14Z",
      "updated_at": "2019-02-26T20:08:14Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: \r\n\r\nYour two commands are equivalent. What's needed is to strip the embedded quotes.\r\n\r\n```powershell\r\n$service = [pscustomobject] @{ pathname = '\"c:\\foo\\bar baz\"' }\r\n\r\n$service.pathname -replace '\"' | Split-Path\r\n```",
      "created_at": "2019-02-26T20:17:11Z",
      "updated_at": "2019-02-26T20:17:11Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> I think this is a fairly exotic problem and I'm not sure we need to do anything about it:\r\nPassing a path _with embedded quoting_ is arguably user error.\r\n\r\nAgreed, not sure what we need to do. Checking if a path is valid (not if it exists) is not a trivial thing as one might think.",
      "created_at": "2019-03-01T06:23:00Z",
      "updated_at": "2019-03-01T06:23:00Z"
    },
    {
      "author": "francesco1119",
      "author_association": "NONE",
      "body": "I now got it: is not `Split-Path` the problem but how `Get-wmiobject win32_service` handles the Pathname.\r\nLook at this: if you run `Get-Process  | Select-Object Name,Path` each path of each process is printed without double quotes: \r\n![get-process](https://user-images.githubusercontent.com/3397477/53660689-5393df80-3cc3-11e9-9286-44377ab6d5fe.png)\r\nBut if I run `get-wmiobject win32_service | select name, pathname` I now realize that all the services that belongs to `C:\\WINDOWS` are listed without double quotes while all the services belonging to `C:\\Program Files` have double quotation:\r\n![program files](https://user-images.githubusercontent.com/3397477/53660812-a53c6a00-3cc3-11e9-857f-b45c21c3a3ac.png)\r\nSo this is a `Get-wmiobject win32_service` bug.\r\n\r\nCan we select the path through Get-Service insted of using `Get-wmiobject win32_service`? I would like to check if the bug persists in Get-Service too or if it's just a win32_service legacy",
      "created_at": "2019-03-01T19:18:56Z",
      "updated_at": "2019-03-01T19:20:03Z"
    },
    {
      "author": "sdwheeler",
      "author_association": "COLLABORATOR",
      "body": "I don't think this is a WMI problem. It is not unreasonable to expect that Split-Path should be able to handled quoted paths.",
      "created_at": "2019-03-01T20:22:03Z",
      "updated_at": "2019-03-01T20:22:03Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@sdwheeler: \r\n\r\nWe're not talking about _quoted paths_ here, we're talking about paths that have _extraneous embedded quotes_.\r\n\r\nIt's the difference between:\r\n\r\n```powershell\r\n$path = \"c:\\foo\\bar\"  # quoted path\r\n$path '\"c:\\foo\\bar\"' # (quoted) path with extraneous embedded quotes\r\n```\r\n\r\nIn the first case the `\"` have _syntactical function_, and are _stripped_ after parsing, in the 2nd case they're _part of the data_.\r\n\r\nAs stated, the best we could do in `Split-Path` is to rule out _unambiguous_ errors with embedded `\"` or `'`-prefixed paths that are followed by a drive spec. / UNC share - on Windows only.\r\n\r\n---\r\n\r\nAs for the WMI / `Get-Service`'s behavior:\r\n\r\nThe problem is primarily one of _poor naming_:\r\n\r\nWhat `.pathname` / `.BinaryPathName` / `ImagePath` (the name of the value in a service's registry definition, which is the ultimate source of the information) actually contain is a _command line_, not  a single binary's file path.\r\n\r\nSuch a command line is designed for parsing by a shell / the Windows API, and of necessity must support _embedded_ quoting.\r\n\r\nWith that in mind, you can use the following code to extract the binary (executable) file path that is _embedded_ in the command line:\r\n\r\n```powershell\r\n    # Sanitize the path:\r\n    # * Some values have encosing \"...\", so we strip them, \r\n    # * others have arguments, so we only take the first token.\r\n    $binaryPath = if ($binaryPath -like '\"*') {\r\n      ($binaryPath -split '\"')[1]\r\n    } else {\r\n      (-split $binaryPath)[0]\r\n    }\r\n```\r\n\r\n\r\n[This SO answer](https://stackoverflow.com/a/54774884/45375) of mine wraps this functionality in a function, `Get-ServiceFileInfo`.\r\n\r\n\r\n",
      "created_at": "2019-03-01T21:45:05Z",
      "updated_at": "2019-03-01T21:45:05Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2019-06-01T00:00:20Z",
      "updated_at": "2019-06-01T00:00:20Z"
    }
  ],
  "created_at": "2019-02-25T20:45:11Z",
  "number": 8980,
  "state": "closed",
  "title": "Split-Path removes \u00a8\u00b4\u00b4 from Service Pathname",
  "updated_at": "2019-06-01T00:00:46Z"
}