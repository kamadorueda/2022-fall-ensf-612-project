{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8898",
  "author": "mklement0",
  "body": "# Steps to reproduce\r\n\r\nOn Windows, run the following Pester tests [_updated based on @iSazonov's feedback_], which trie to pass an unquoted and a double-quoted argument through to a batch file via `Start-Process`' \r\n`-ArgumentList` aka `-Args` parameter, which doesn't work as expected in combination with `-Verb RunAs`.\r\n \r\n```powershell\r\nDescribe \"Start-Process -Verb RunAs bug\"  {\r\n\r\n  BeforeAll {\r\n    # Create a temp. batch file that simply echoes the arguments it receives.\r\n    '@echo %*'  | Set-Content $env:TEMP\\$PID.cmd\r\n    # Arguments to pass to the batch file via Start-Process - note the inclusion of a double-quoted token.\r\n    $batchFileArgs = 'foo \"bar baz\"'\r\n    # Output redirections to capture the outcome.\r\n    $redirections = \" 1>$env:TEMP\\$PID-out.txt 2>$env:TEMP\\$PID-err.txt\"\r\n  }\r\n\r\n  It \"Starting a batch file with NO elevation accepts double-quoted arguments\" {\r\n    Start-Process -Wait $env:TEMP\\$PID.cmd -Args ($batchFileArgs + $redirections)\r\n    Get-Content $env:TEMP\\$PID-Err.txt | Should -BeNullOrEmpty\r\n    Get-Content $env:TEMP\\$PID-out.txt | Should -Be $batchFileArgs\r\n  }\r\n\r\n  # NOTE: This test prompts for elevation (UAC prompt).\r\n  It \"Starting a batch file WITH elevation accepts double-quoted arguments\" {\r\n    Start-Process -Wait -Verb RunAs $env:TEMP\\$PID.cmd -Args ($batchFileArgs + $redirections)\r\n    Get-Content $env:TEMP\\$PID-Err.txt | Should -BeNullOrEmpty\r\n    Get-Content $env:TEMP\\$PID-out.txt | Should -Be $batchFileArgs\r\n  }\r\n\r\n  AfterAll {\r\n    Remove-Item $env:TEMP\\$PID.cmd, $env:TEMP\\$PID-*.txt    \r\n  }\r\n\r\n}\r\n```\r\n\r\nNote that both `Start-Process` commands _open a new window_, but since the new process terminates very quickly, you'll only see a brief flash.\r\n\r\nThe 2nd command, due to running with elevation, shows a UAC prompt.\r\n\r\n# Expected behavior\r\n\r\nBoth tests should succeed, i.e, both `Start-Process` calls should pass the specified arguments through (write them to stdout), without writing anything to stderr.\r\n\r\n# Actual behavior\r\n\r\n```none\r\n  Describing Start-Process -Verb RunAs bug\r\n    [+] Starting a batch file with NO elevation accepts double-quoted arguments 1.19s\r\n    [-] Starting a batch file WITH elevation accepts double-quoted arguments 2.56s\r\n      Expected $null or empty, but got @(''C:\\Users\\jdoe\\AppData\\Local\\Temp\\9612.cmd\" foo \"bar' is not recognized as an internal or external command,', 'operable program or batch file.').\r\n      18:     Get-Content $env:TEMP\\$PID-Err.txt | Should -BeNullOrEmpty\r\n      at <ScriptBlock>, C:\\Users\\jdoe\\Desktop\\pg\\pg.Tests.ps1: line 18\r\nTests completed in 3.75s\r\nTests Passed: 1, Failed: 1, Skipped: 0, Pending: 0, Inconclusive: 0\r\n```\r\n\r\nThat is, the elevated (2nd) invocation failed, complaining about something like `'C:\\Users\\jdoe\\AppData\\Local\\Temp\\9612.cmd\" foo \"bar` - this indicates _broken quoting_; note how the batch-file path starts with `'`(!), not `\"`.\r\n\r\nNote that if the `-Args` value doesn't have embedded `\"...\"` tokens, the problem goes away.\r\n\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core v6.2.0-preview.4 on Microsoft Windows 10 Pro (64-bit; Version 1803, OS Build: 17134.471)\r\nWindows PowerShell v5.1.17134.407 on Microsoft Windows 10 Pro (64-bit; Version 1803, OS Build: 17134.471)\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 Please clarify the second case - does the cmd run or does it get arguments?",
      "created_at": "2019-02-16T16:50:30Z",
      "updated_at": "2019-02-16T16:50:57Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: From the OP: \r\n\r\n> While the _second_ one does open a new window (after confirming the UAC prompt), it is instantly closed, rendering only as brief flashing.\r\n\r\nSo my _guess_ is that the `cmd.exe` process is being created but dies instantly - the commands inside the batch file never get to execute.",
      "created_at": "2019-02-16T17:03:04Z",
      "updated_at": "2019-02-16T17:03:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 Thanks! Please update repo steps so that we can clearly see this (write to file?) and use it in Pester test.",
      "created_at": "2019-02-16T17:21:32Z",
      "updated_at": "2019-02-16T17:21:32Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: Please see my update of the OP.",
      "created_at": "2019-02-16T19:01:48Z",
      "updated_at": "2019-02-16T19:01:48Z"
    },
    {
      "author": "MaynardMiner",
      "author_association": "NONE",
      "body": "The issue has to be within the ``-ArgumentList`` parameter, as it can run a process with ``-Verb runas`` without ``-ArgumentList`` (at least for me).",
      "created_at": "2020-02-28T20:33:38Z",
      "updated_at": "2020-02-28T20:33:38Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@MaynardMiner, yes, this issue is all about argument passing (`-Args`, as used in the tests, is the alias name of `-ArgumentList`) - I've updated the OP to make that clearer.",
      "created_at": "2020-02-29T14:23:56Z",
      "updated_at": "2020-02-29T14:26:32Z"
    }
  ],
  "created_at": "2019-02-15T02:15:48Z",
  "labels": [
    "Issue-Question",
    "WG-Cmdlets-Management"
  ],
  "number": 8898,
  "state": "open",
  "title": "Start-Process -Verb Runas fails with quoted arguments passed to batch files",
  "updated_at": "2021-01-15T07:46:53Z"
}