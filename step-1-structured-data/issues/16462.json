{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16462",
  "author": "SteveL-MSFT",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nSome native unix command will shell out to run something (like `ssh`) and uses the bash built-in `exec` to spawn a new process that replaces the current one.  This fails when PowerShell is the default shell as `exec` is not a valid command.  \r\nThis is affecting some known scripts like `copy-ssh-id` or some subcommands of AzCLI.\r\n\r\nSince `Replace` is not a valid verb, I decided to use `Switch`.  Also, the other \"Process\" cmdlets are in the ManagementModule, but this is not related to those cmdlets and is really a Core cmdlet expected to be part of a Unix shell.\r\n\r\nThis PR adds a new `Switch-Process` cmdlet aliased to `exec` that calls `execv()` function to provide similar behavior as POSIX shells.  This is not intended to have parity with the `exec` built-in function in POSIX shells (like how file descriptors are handled), but should cover most cases.  This cmdlet only shows up for non-Windows systems.\r\n\r\nWe should consider backporting to 7.2 (as LTS release) for this reason, but should wait on sufficient user feedback in 7.3.\r\n\r\nThis may conflict with a user defined function called `exec` on non-Windows systems, but this seems necessary and uncommon.  @PowerShell/powershell-committee  had previously decided this was acceptable.\r\n\r\n## PR Context\r\n\r\nFix https://github.com/PowerShell/PowerShell/issues/4691\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [x] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [x] Experimental feature name(s): `PSExec`\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [x] Issue filed: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/8349\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and opened an issue in the relevant tool repository. This may include:\r\n        - [ ] Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode\r\n        (which runs in a different PS Host).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n",
  "closed_at": "2022-01-04T22:09:28Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I wonder MSFT team denies its own policy of not increasing Engine :-) Why don't put the short function in AzCLI with a helper module to collect a feedback. Then we could put the function in Utility module for 7.3.",
      "created_at": "2021-11-13T05:51:54Z",
      "updated_at": "2021-11-13T05:51:54Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov it's not just AzCLI, that's just the most recent example.  I've hit this myself a few times and it's really hard to figure out what's going on as an end user as the native command doesn't expect `exec` not to work so you get incorrect error messages.  In this case, I think it's a core cmdlet and expected of a shell on Unix systems.",
      "created_at": "2021-11-13T06:12:56Z",
      "updated_at": "2021-11-13T06:12:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">  I think it's a core cmdlet and expected of a shell on Unix systems.\r\n\r\n@SteveL-MSFT I see the point and I approve the intention but I'm afraid we may fall back into a long commit series of adaptations, especially if there is an intention to backport.\r\nI mean it would be nice to see \"we have received positive feedbacks for our helper module from Azure users in a few months\" before we include this in Engine.",
      "created_at": "2021-11-13T06:37:40Z",
      "updated_at": "2021-11-13T06:37:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What do we know popular scripts using the exec which we could test with the solution? I see only two references in the related issue.",
      "created_at": "2021-11-13T06:39:54Z",
      "updated_at": "2021-11-13T06:39:54Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Why not do the real system call `execv` on Unix platforms? We already have some code for that in `src\\PowerShell\\Program.cs`.\r\n\r\n~Also, why making this visible on Windows too?~ I know why you exposed it on Windows after seeing the tests. I doubt its usefulness on Windows \ud83d\ude15",
      "created_at": "2021-11-13T17:44:12Z",
      "updated_at": "2021-11-13T17:58:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Why not do the real system call `execv` on Unix platforms? We already have some code for that in `src\\PowerShell\\Program.cs`.\r\n\r\nWe call `sh  -l -c 'exec pwsh \"$@\"'` there. But we could call an `exec` here.",
      "created_at": "2021-11-13T17:52:04Z",
      "updated_at": "2021-11-13T17:52:04Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I'm going to re-work this PR so that `exec` calls `execv` api and is, of course, limited to just non-Windows.",
      "created_at": "2021-11-14T22:01:15Z",
      "updated_at": "2021-11-14T22:01:15Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "It occurs to me that there might be some insight that the dotnet folks may have on this. I'm thinking especially of open file handles (which are preserved through the `exec` ) - this could mean that some clean up that happens when a managed app exits won't happen. I'm fairly certain that `exec` will not look like a standard process end to dotnet, but not absolutely sure.",
      "created_at": "2021-11-29T17:26:03Z",
      "updated_at": "2021-11-29T17:26:03Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "Also, since this is a PowerShell view of `exec` I would consider adding a parameter `-Environment` as a hashtable which would enable the use of `execve`",
      "created_at": "2021-11-29T17:39:03Z",
      "updated_at": "2021-11-29T17:39:03Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "The actual implementation should be in our native library and we should be calling the API from that library rather than directly having the system call.",
      "created_at": "2021-11-29T17:48:36Z",
      "updated_at": "2021-11-29T17:48:36Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "We also need to figure out what to do about the `exec` code in `src/powershell/Program.cs` shouldn't there be a single call here rather than a `PInvoke` here and one there?",
      "created_at": "2021-11-29T18:05:40Z",
      "updated_at": "2021-11-29T18:05:40Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@JamesWTruher over time, we probably want to get rid of our native library and move them all to P/Invoke or .NET API calls.  This will make it easier for us to support new architectures and also support MSIL builds.  As for the separate `execv` calls, we already have this pattern where we don't necessarily want different assemblies calling into other assemblies internal methods for the purpose of P/Invoke calls.  In this case, the ConsoleHost code is specific to ConsoleHost for purpose of working as a login shell and this is something that could be used in EditorServices, for example.\r\n\r\nI've also asked .NET team to review this.",
      "created_at": "2021-11-30T05:50:32Z",
      "updated_at": "2021-11-30T05:51:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I've also asked .NET team to review this.\r\n\r\nThey introduced new GeneratedDllImport attribute and it would be great if they reviewed PowerShell Native repo too - can we rid of the PowerShell Native now (after moving to .Net 7) or no?\r\nAlso .Net has System.Native.dll - have they plan to rid of it or could we benefit from it to replace PowerShell Native?",
      "created_at": "2021-11-30T18:03:46Z",
      "updated_at": "2021-11-30T18:03:46Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov I thought I had opened an issue previously on moving away from `PowerShell-Native`, but I created this issue https://github.com/PowerShell/PowerShell-Native/issues/76.  I haven't looked to see what the effort would look like based on new .NET APIs that weren't available when PS Core 6 first needed this library.",
      "created_at": "2021-11-30T21:51:37Z",
      "updated_at": "2021-11-30T21:51:37Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "with regard to eliminating the native library, there may be difficulties with _some_ of the APIs. I know when I did the UnixStat work I needed to handle all the platform differences in returning the stat structure. The stat structure is different on Mac, Linux, _and_ ARM - this would likely be problematic - i solved it in the native library by returning a CommonStat structure which smoothed over the rough edges of these differences.",
      "created_at": "2021-12-03T22:31:26Z",
      "updated_at": "2021-12-03T22:31:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> The stat structure is different on Mac, Linux, _and_ ARM - this would likely be problematic - i solved it in the native library by returning a CommonStat structure which smoothed over the rough edges of these differences.\r\n\r\nIt is great request for .Net team. I see their dll import generator works today for simple types but structs are under question. \r\nThen historically we do condition compiling (with `#if`) because absence .Net API. As soon as this API appears, we remove these conditions. \r\nGeneratedDllImport is intermediate solution. It allow to move workarounds and mappings to **managed code** like `if Platform.IsMac -> p/invoke GetMacStat() -> remap Mac Stat struct to generic Stat struct`.",
      "created_at": "2021-12-04T07:18:03Z",
      "updated_at": "2021-12-04T07:18:03Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2021-12-25T02:00:44Z",
      "updated_at": "2021-12-25T02:00:44Z"
    },
    {
      "author": "pull-request-quantifier[bot]",
      "author_association": "NONE",
      "body": "### ![](https://img.shields.io/static/v1?label=Quantified&message=Medium&color=yellow)\r\n\r\nThis PR has `127` quantified lines of changes. In general, a change size of upto `200` lines is ideal for the best PR experience!\r\n\r\n------\r\n\r\n<details >\r\n    <summary display=\"inline\"> <strong>Quantification details</strong></summary>\r\n    <p />\r\n\r\n```\r\nLabel      : Medium\r\nSize       : +125 -2\r\nPercentile : 45.4%\r\n\r\nTotal files changed: 6\r\n\r\nChange summary by file extension:\r\n.cs : +75 -1\r\n.resx : +6 -0\r\n.ps1 : +44 -1\r\n```\r\n> Change counts above are quantified counts, based on the [PullRequestQuantifier customizations](https://github.com/microsoft/PullRequestQuantifier/blob/main/docs/prquantifier-yaml.md).\r\n    \r\n</details>\r\n\r\n\r\n<details>\r\n    <summary display=\"inline\"> <strong>Why proper sizing of changes matters</strong> </summary>\r\n    <p/>\r\n    <p/>\r\n\r\nOptimal pull request sizes drive a better predictable PR flow as they strike a\r\nbalance between between PR complexity and PR review overhead. PRs within the\r\noptimal size (typical small, or medium sized PRs) mean:\r\n\r\n- Fast and predictable releases to production:\r\n  - Optimal size changes are more likely to be reviewed faster with fewer\r\niterations.\r\n  - Similarity in low PR complexity drives similar review times.\r\n- Review quality is likely higher as complexity is lower:\r\n  - Bugs are more likely to be detected.\r\n  - Code inconsistencies are more likely to be detetcted.\r\n- Knowledge sharing is improved within the participants:\r\n  - Small portions can be assimilated better.\r\n- Better engineering practices are exercised:\r\n  - Solving big problems by dividing them in well contained, smaller problems.\r\n  - Exercising separation of concerns within the code changes.\r\n\r\n#### What can I do to optimize my changes\r\n\r\n- Use the PullRequestQuantifier to quantify your PR accurately\r\n  - Create a context profile for your repo using the [context generator](https://github.com/microsoft/PullRequestQuantifier/releases)\r\n  - Exclude files that are not necessary to be reviewed or do not increase the review complexity. Example: Autogenerated code, docs, project IDE setting files, binaries, etc. Check out the `Excluded` section from your `prquantifier.yaml` context profile. \r\n  - Understand your typical change complexity, drive towards the desired complexity by adjusting the label mapping in your `prquantifier.yaml` context profile.\r\n  - Only use the labels that matter to you, [see context specification](./docs/prquantifier-yaml.md) to customize your `prquantifier.yaml` context profile.\r\n- Change your engineering behaviors\r\n  - For PRs that fall outside of the desired spectrum, review the details and check if:\r\n    - Your PR could be split in smaller, self-contained PRs instead\r\n    - Your PR only solves one particular issue. (For example, don't refactor and code new features in the same PR).\r\n\r\n#### How to interpret the change counts in git diff output\r\n\r\n- One line was added: `+1 -0`\r\n- One line was deleted: `+0 -1`\r\n- One line was modified: `+1 -1` (git diff doesn't know about modified, it will\r\ninterpret that line like one addition plus one deletion)\r\n- Change percentiles: Change characteristics (addition, deletion, modification)\r\nof this PR in relation to all other PRs within the repository.\r\n\r\n</details>\r\n\r\n<p />\r\n\r\n------\r\n\r\nWas this comment helpful? <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiU3RldmVMLU1TRlQiLCJSZXBvc2l0b3J5TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwiLCJQdWxsUmVxdWVzdExpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsL3B1bGwvMTY0NjIiLCJFdmVudFR5cGUiOiJUaHVtYnNVcCJ9&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs up\"><strong>:thumbsup:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiU3RldmVMLU1TRlQiLCJSZXBvc2l0b3J5TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwiLCJQdWxsUmVxdWVzdExpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsL3B1bGwvMTY0NjIiLCJFdmVudFR5cGUiOiJOZXV0cmFsIn0=&amp;anonymous=True\" target=\"_blank\" title=\"Neutral\"><strong>&nbsp;:ok_hand:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiU3RldmVMLU1TRlQiLCJSZXBvc2l0b3J5TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwiLCJQdWxsUmVxdWVzdExpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsL3B1bGwvMTY0NjIiLCJFdmVudFR5cGUiOiJUaHVtYnNEb3duIn0=&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs down\"><strong>&nbsp;:thumbsdown:</strong></a> (<a href=\"MAILTO:prquantifier@microsoft.com\" title=\"Mail to prquantifier@microsoft.com\">Email</a>)\r\n[Customize PullRequestQuantifier](https://github.com/PowerShell/PowerShell/blob/master/.github/prquantifier.yaml) for this repository.\r\n\r\n",
      "created_at": "2022-01-04T17:16:26Z",
      "updated_at": "2022-01-04T17:16:26Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.3.0-preview.2` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.3.0-preview.2)\n",
      "created_at": "2022-02-24T23:33:19Z",
      "updated_at": "2022-02-24T23:33:19Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-maintainers \r\nAlthough it is potentially unstable, it has had some bake time, and the functionality is behind and experimental feature.\r\n\r\nLet's give this some bake time to verify that it is stable.",
      "created_at": "2022-03-02T19:48:40Z",
      "updated_at": "2022-03-02T19:48:40Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "I have seen customers that implement exec as a cmdlet which this behavior could break.  The maintainers are inclined not to backport this unless we have a compelling argument to backport to the last LTS.\r\n",
      "created_at": "2022-03-29T20:01:04Z",
      "updated_at": "2022-03-29T20:01:04Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this.  Given that this is an experimental feature in 7.3 and the risk of impact of an existing `exec` command, we do not recommend backporting this to 7.2 pending customer feedback that it blocks their adoption of 7.2 in the future.",
      "created_at": "2022-04-27T22:28:54Z",
      "updated_at": "2022-04-27T22:28:54Z"
    }
  ],
  "created_at": "2021-11-13T05:21:22Z",
  "number": 16462,
  "state": "closed",
  "title": "Add `exec` cmdlet for bash compatibility",
  "updated_at": "2022-04-27T22:29:02Z"
}