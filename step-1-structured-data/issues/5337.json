{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5337",
  "author": "ForNeVeR",
  "body": "Steps to reproduce\r\n------------------\r\n\r\nConsider that I want to serialize this simple PS5-styled class to XML:\r\n\r\n```powershell\r\nclass TelegramSettings {\r\n    [bool] $EnableTelegramNotification\r\n}\r\n\r\nfunction Serialize-TelegramSettings($settings) {\r\n    $type = [TelegramSettings]\r\n    $serializer = New-Object Xml.Serialization.XmlSerializer $type\r\n    $writer = New-Object IO.StringWriter\r\n    try {\r\n        $serializer.Serialize($writer, $settings)\r\n        $writer.ToString()\r\n    } finally {\r\n        $writer.Dispose()\r\n    }\r\n}\r\n\r\n$settings = [TelegramSettings]::new()\r\nSerialize-TelegramSettings $settings\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\n<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<TelegramSettings xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\r\n  <EnableTelegramNotification>false</EnableTelegramNotification>\r\n</TelegramSettings>\r\n```\r\n\r\nThat could be achieved with `Add-Type` and C# snippet:\r\n\r\n```powershell\r\n$source = @\"\r\nnamespace Telegram\r\n{\r\n    public class TelegramSettings\r\n    {\r\n        public bool EnableTelegramNotification { get; set; }\r\n    }\r\n}\r\n\"@\r\n\r\n$TelegramSettings = Add-Type -TypeDefinition $source -PassThru\r\n\r\nfunction Serialize-TelegramSettings($settings) {\r\n  $type = $TelegramSettings\r\n  $serializer = New-Object Xml.Serialization.XmlSerializer $type\r\n  $writer = New-Object IO.StringWriter\r\n  try {\r\n      $serializer.Serialize($writer, $settings)\r\n      $writer.ToString()\r\n  } finally {\r\n      $writer.Dispose()\r\n  }\r\n}\r\n\r\n$settings = New-Object $TelegramSettings\r\nSerialize-TelegramSettings $settings\r\n```\r\n\r\nAs you can see, my `Serialize-TelegramSettings` is likely right.\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nNew-Object : Exception calling \".ctor\" with \"1\" argument(s): \"A non-collectible assembly may not reference a collectible assembly.\"\r\nAt Test1.ps1:7 char:19\r\n+     $serializer = New-Object Xml.Serialization.XmlSerializer $type\r\n+                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: (:) [New-Object], MethodInvocationException\r\n    + FullyQualifiedErrorId : ConstructorInvokedThrowException,Microsoft.PowerShell.Commands.NewObjectCommand```\r\n```\r\nIt looks like there's a difference between dynamically-generated assembly created by `Add-Type` and the one created by a `class` definition, and I couldn't found any settings to change the `class` behavior to create a non-collectible assembly or fix the issue somehow else.\r\n\r\nEnvironment data\r\n----------------\r\n\r\nVerified on both v6.0.0-beta.7 and v5.1:\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-beta\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-beta.7\r\nOS                             Microsoft Windows 10.0.15063\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.15063.674\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.15063.674\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```",
  "closed_at": "2020-02-01T17:33:04Z",
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I'm not sure we want non-collectible assemblies, but if you want to experiment, you can change `RunAndCollect` to `Run` [here](https://github.com/PowerShell/PowerShell/blob/cbe6b88df24297021d0eeb7864302e330d9c2c43/src/System.Management.Automation/engine/parser/PSType.cs#L1136).",
      "created_at": "2017-11-04T15:04:44Z",
      "updated_at": "2017-11-04T15:04:44Z"
    },
    {
      "author": "ForNeVeR",
      "author_association": "NONE",
      "body": "@iSazonov, I'm sorry, but could we get some information about why this issue was closed?\r\n\r\nI'm not against closing it e.g. \"as designed\" (the workaround is clear), but it would be nice to know the exact reason. Thanks!",
      "created_at": "2020-02-02T06:40:36Z",
      "updated_at": "2020-02-02T06:40:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It is in #6652 meta issue and will be tracked there. Thank you for discovering the issue.",
      "created_at": "2020-02-02T08:03:34Z",
      "updated_at": "2020-02-02T08:04:35Z"
    },
    {
      "author": "ForNeVeR",
      "author_association": "NONE",
      "body": "Thanks, got it.",
      "created_at": "2020-02-02T08:04:21Z",
      "updated_at": "2020-02-02T08:04:21Z"
    }
  ],
  "created_at": "2017-11-04T07:03:33Z",
  "number": 5337,
  "state": "closed",
  "title": "Error trying to use XmlSerializer with PS5-styled classes",
  "updated_at": "2020-02-02T08:04:35Z"
}