{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12020",
  "author": "gdoenlen",
  "body": "I just upgraded to pwsh 7 in my WSL instance and it causes the process to exit when using windows integration of $PATH with an error of: `bad variable name: (x86)\\Nvidia`\r\n\r\nIt persists even after removing this folder from my windows path (the next error is about a bad variable for `Files/Microsoft`. This only occurs when starting a fresh WSL instance and doesn't occur when running `pwsh` from bash.\r\n\r\nChanging `HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Lxss\\{YOUR_GUID}\\Flags` to 5 will disable the integration and fix this behavior. \r\n\r\nChanging the above registry key to 7 (enable integration) and using bash as your shell will also fix this behavior.\r\n\r\n# Steps to reproduce\r\n1. set your WSL shell to pwsh 7 with: `chsh -s /path/to/pwsh`\r\n2. Make sure windows integration of path is enabled in the registry: `HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Lxss\\{YOUR_GUID}` and the `Flags` key is set to 7. Setting this key to 5 turns the integration off and pwsh will start fine. Additionally setting this back to 7 and setting bash as your shell will have WSL start fine as well.\r\n3. Restart WSL and the path should fail (depending on your windows path of course).\r\n\r\n# Expected behavior\r\nPath should be properly parsed.\r\n\r\n# Actual behavior\r\nFailures related to bad variable names.\r\n\r\n# Environment data\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0\r\nOS                             Linux 4.4.0-18362-Microsoft #476-Microsoft Fri Nov 01 16:53:00 PST 2019\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2022-02-05T01:00:40Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think it is a problem with Windows paths sharing.\r\nSee https://github.com/microsoft/WSL/issues/1640.\r\n\r\n@SteveL-MSFT @rjmholt @sdwheeler I believe this is \"by-design\" and the workaround could be documented.\r\n",
      "created_at": "2020-03-05T05:52:56Z",
      "updated_at": "2020-03-05T05:52:56Z"
    },
    {
      "author": "gdoenlen",
      "author_association": "NONE",
      "body": "Yes I know it's from path sharing, hence the registry edits. The work around isn't ideal as you lose access to everything in windows without typing the full path to something (i.e. vscode). Pwsh 6 definitely didn't have the same behavior. ",
      "created_at": "2020-03-05T06:10:37Z",
      "updated_at": "2020-03-05T06:10:37Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "It\u2019s a [known issue](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_pwsh?view=powershell-7#-login---l) arising from the fact that 7, unlike 6, supports being run as a login shell.\r\n\r\nThis has shed new light on it though",
      "created_at": "2020-03-05T15:19:08Z",
      "updated_at": "2020-03-05T15:19:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@rjmholt Is it WSL or PowerShell issue? I did not find we parse PATH in the code.",
      "created_at": "2020-03-05T15:29:18Z",
      "updated_at": "2020-03-05T15:29:18Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Quite possibly a PowerShell issue. `exec` cares about the path. We use it here:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/348ca859475eb0094f97791d0f6c8717577d2935/src/powershell/Program.cs#L325-L330",
      "created_at": "2020-03-05T16:34:04Z",
      "updated_at": "2020-03-05T16:34:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@rjmholt You referenced MacOs code :-). \r\n\r\nIn any case we don't get explicitly PATH value and don't parse it. \r\n\r\nCan you catch the exception in debug build?",
      "created_at": "2020-03-05T16:39:15Z",
      "updated_at": "2020-03-05T16:40:00Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> You referenced MacOs code\r\n\r\nThe second part is Linux, but my point is about exec.\r\n\r\nIf exec is failing there will be no exception; it's a native API.\r\n\r\nI could be wrong about the provenance of the issue though. We need to see the whole error message (if you could add that please @gdoenlen)",
      "created_at": "2020-03-05T16:48:05Z",
      "updated_at": "2020-03-05T16:48:05Z"
    },
    {
      "author": "gdoenlen",
      "author_association": "NONE",
      "body": "@rjmholt The part after export will change depending on what it encounters in the path first.\r\n\r\n```\r\n: 6: export: Files/Microsoft: bad variable name\r\n\r\n[process exited with code 2] <-- this is probably from windows terminal\r\n```",
      "created_at": "2020-03-05T17:35:37Z",
      "updated_at": "2020-03-05T17:35:37Z"
    },
    {
      "author": "gdoenlen",
      "author_association": "NONE",
      "body": "Does powershell leave a log anywhere? I could check that as well.",
      "created_at": "2020-03-05T17:41:20Z",
      "updated_at": "2020-03-05T17:41:20Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> Does powershell leave a log anywhere\r\n\r\nI think it can be configured to, but I don't think at the level we're looking for; it's designed to log commands rather than its internals. But all of this happens so early anyway that we avoid all possible work to reduce startup time (since we have to start up twice).",
      "created_at": "2020-03-05T17:51:13Z",
      "updated_at": "2020-03-05T17:51:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "So we see bash error for `export`. I guess it is possible to repo without PowerShell.",
      "created_at": "2020-03-05T18:03:30Z",
      "updated_at": "2020-03-05T18:03:30Z"
    },
    {
      "author": "gdoenlen",
      "author_association": "NONE",
      "body": "Just for reference I believe /bin/sh points to dash and not bash. My posix shell isn't so great but maybe it's running something from /etc/profile or /etc/profile.d when you use it as a login shell? Though it is odd that bash and zsh as my login shell don't do the same. ",
      "created_at": "2020-03-05T18:10:05Z",
      "updated_at": "2020-03-05T18:10:05Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> Just for reference I believe /bin/sh points to dash and not bash. My posix shell isn't so great but maybe it's running something from /etc/profile or /etc/profile.d when you use it as a login shell?\r\n\r\nInteresting. We specifically intend to work with dash, but running as login deliberately runs either `/etc/profile` or `~/.profile`. Those are supposed to be `/bin/sh` compatible according to POSIX",
      "created_at": "2020-03-05T18:13:20Z",
      "updated_at": "2020-03-05T18:13:20Z"
    },
    {
      "author": "gdoenlen",
      "author_association": "NONE",
      "body": "I assume they are posix compliant as setting bash or zsh with `chsh -s /path/to/{zsh, bash}` runs correctly with the integration on. I'm not sure what is being done different in those situations. I did see a `wsl-integration.sh` file in `/etc/profil.d`, but again my shell isn't that great so not sure what's going on there.",
      "created_at": "2020-03-05T22:51:46Z",
      "updated_at": "2020-03-05T22:51:46Z"
    },
    {
      "author": "gdoenlen",
      "author_association": "NONE",
      "body": "So I've reproduced this with setting my shell to dash. `chsh -s /bin/dash`. The output is: `-dash: 6: export: Files/Microsoft: bad variable name` but the process doesn't exit like when pwsh tries to start. It seems like you might want to explicitly try for bash on linux if exists and then fall back to /bin/sh. ",
      "created_at": "2020-03-05T23:10:10Z",
      "updated_at": "2020-03-05T23:10:10Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> It seems like you might want to explicitly try for bash on linux if exists and then fall back to /bin/sh.\r\n\r\nYeah I think that sounds sensible. We did our best to keep it generic in order to support dash since some distros ship without bash, but it seems the world depends on bashisms.",
      "created_at": "2020-03-05T23:38:05Z",
      "updated_at": "2020-03-05T23:38:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If it is dash issue why does not request its fix?",
      "created_at": "2020-03-06T12:46:26Z",
      "updated_at": "2020-03-06T12:46:26Z"
    },
    {
      "author": "gdoenlen",
      "author_association": "NONE",
      "body": "In my opinion, I would prefer it to be fixed here. Getting a fix into dash and then getting that fix packaged into distros will take time and I'm not even sure if that fix would be back ported by canonical/Microsoft. The WSL kernel is 4.4 after all. And after all that, /bin/sh could point to tcsh, ksh, or some other unknown shell that might be required to be fixed and back ported as well.  Lastly, I don't think it's a ton of work to do a:  `if (File.Exists(\"/bin/bash\") { ... }`  and be able to have this working right now. ",
      "created_at": "2020-03-06T14:15:18Z",
      "updated_at": "2020-03-06T14:15:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Only thing we need from `/bin/sh` - PATH env variable creation. If dash can not do this on WSL I don't see a point to complicate PowerShell code.",
      "created_at": "2020-03-06T16:38:54Z",
      "updated_at": "2020-03-06T16:38:54Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Just to add some background:\r\n\r\nIt sounds like there may be a command such as `export PATH=foo:$PATH` somewhere, right?\r\n\r\nFor this command to be POSIX-compliant (if  the value of `$PATH` contains spaces), it would have to be written as `export PATH=\"foo:$PATH\"` (double-quoting of the RHS), and Bashisms indeed do not belong in `/etc/profile` or `~/.profile`\r\n\r\n`dash` is the most strictly POSIX-compliant among the major POSIX-like shells out there (a bare-bones shell built for speed to speed up booting, with very few features added to the POSIX-mandated ones).\r\n",
      "created_at": "2020-03-16T06:37:57Z",
      "updated_at": "2020-03-16T06:37:57Z"
    },
    {
      "author": "gdoenlen",
      "author_association": "NONE",
      "body": "> It sounds like there may be a command such as `export PATH=foo:$PATH` somewhere, right?\r\n\r\nMaybe, but if this is the case it's something written by Canonical or the WSL team that comes with the installation of WSL.\r\n\r\nFrom `~/.profile`:\r\n\r\n```\r\n# set PATH so it includes user's private bin if it exists\r\nif [ -d \"$HOME/bin\" ] ; then\r\n    PATH=\"$HOME/bin:$PATH\"\r\nfi\r\n\r\n# set PATH so it includes user's private bin if it exists\r\nif [ -d \"$HOME/.local/bin\" ] ; then\r\n    PATH=\"$HOME/.local/bin:$PATH\"\r\nfi\r\n```\r\n\r\n\r\n",
      "created_at": "2020-03-16T13:18:47Z",
      "updated_at": "2020-03-16T13:18:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@gdoenlen Could you please review all your system files and find where dash set PATH as @mklement0 mentioned? It'd great to discover where the error comes from.",
      "created_at": "2020-03-16T13:31:20Z",
      "updated_at": "2020-03-16T13:31:54Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "In my pristine WSL installation of Ubuntu 18.04.1 LTS I see no evidence of non-POSIX compliant code in `/etc/profile` or `~/.profile`, and running `sh -l` doesn't cause a problem.\r\n\r\nIf add `export FOO=/bar/baz:$PATH` to `~/.profile`, running `sh -l` surfaces the problem (with Windows path integration turned on).\r\n\r\nAlso note that when the system boots, it invariably processes `/etc/profile` (but not `~/.profile`) with `/bin/sh`, i.e., `dash`.\r\n\r\nWhen `pwsh` re-invokes itself via `/bin/sh -l`, the user-specific `~/.profile` comes into the mix.\r\n\r\nWhat puzzles me is that WSL invokes the user's default shell as a _login_ shell to begin with - which the default terminal emulator in a standalone Ubuntu installation does _not_ do (verify with `echo $0` with `bash` as the default shell, for instance: on WSL, you'll see `-bash`, indicating a login shell; in a standalone Ubuntu with the default terminal emulator, you'll see `bash`).\r\n",
      "created_at": "2020-03-16T14:17:26Z",
      "updated_at": "2020-03-16T14:18:17Z"
    },
    {
      "author": "gdoenlen",
      "author_association": "NONE",
      "body": "> n Could you please review all your system files and find where dash set PATH as @mklement0 mentioned? It'd great to discover where the error comes from.\r\n\r\nI'll try tonight.\r\n\r\n> In my pristine WSL installation of Ubuntu 18.04.1 LTS I see no evidence of non-POSIX compliant code in `/etc/profile` or `~/.profile`, and running `sh -l` doesn't cause a problem.\r\n\r\nI'm not sure where it would come from then. I'm not a basher so I haven't customized any of it. Have you checked `/etc/profile.d` ?\r\n\r\n",
      "created_at": "2020-03-16T14:29:12Z",
      "updated_at": "2020-03-16T14:29:12Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Good catch, @gdoenlen:\r\n\r\nWhile running `/bin/sh -l` interactively also processes the scripts in `/etc/profile.d/`, the offending command is inside a _conditional_ that happened not to be true on my system, so the problem didn't surface:\r\n\r\nFrom `/etc/profile.d/apps-bin-path.sh`:\r\n\r\n```sh\r\n# Expand $PATH to include the directory where snappy applications go.\r\nsnap_bin_path=\"/snap/bin\"\r\nif [ -n \"${PATH##*${snap_bin_path}}\" -a -n \"${PATH##*${snap_bin_path}:*}\" ]; then\r\n    export PATH=$PATH:${snap_bin_path}\r\nfi\r\n```\r\n\r\nThat is:\r\n\r\n* This script is _not robust_ due to the lack of `\"...\"` around the RHS and shouldn't have been written that way, knowing that all POSIX-compliant  shells have to be able to execute it properly. \r\n\r\n   * This is especially unfortunate, because only a few lines later the robust syntax _is_ used:\r\n`export XDG_DATA_DIRS=\"${XDG_DATA_DIRS}:${snap_xdg_path}\"`\r\n\r\n* As for the impact:\r\n\r\n  * The problem usually doesn't surface in stand-alone Ubuntu installations, because having directory paths _with spaces_ in `PATH` is atypical.\r\n\r\n    * However, if you did add such entries, the `/bin/sh` (`dash`) instance that processes `/etc/profile` _on system startup_ (and from which all user processes inherit their environment) would report a nonzero exit code that causes a blocking GUI error message to pop up during startup.\r\n\r\n  * Additionally, even on Windows (with Windows path integration enabled) the problem only surfaces if directory `/snap/bin` isn't already in listed in `PATH` \r\n\r\n    * In a standalone, full Ubuntu (virtual) machine, `/snap/bin` _is_ already in the `PATH` by the time a user's default shell is run, given that `snap` (package manager Snappy) comes preinstalled on Ubuntu 16.04+, and the variable is set when `/bin/sh` processes `/etc/profile` _during system startup_. It is for that reason that Ubuntu terminal emulators do _not_ invoke user shells as _login_ shells - it simply isn't necessary.\r\n\r\n    * That isn't the case on WSL, however, which is not a full Ubuntu VM, but a compatibility layer on top of the Windows kernel, so there's no boot-time `/bin/sh` process that processes `/etc/profile`; to make up for that WSL _does_ invoke user shells as _login_ shells.\r\n\r\n---\r\n\r\nThus, using `bash` indeed sounds like the right pragmatic workaround.\r\n\r\nThis is unfortunate, because for long-term stability, speed (though the impact is probably negligible), and implementation simplicity, `/bin/sh -l` is the right choice.\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2020-03-16T18:26:37Z",
      "updated_at": "2020-03-16T21:45:05Z"
    },
    {
      "author": "gdoenlen",
      "author_association": "NONE",
      "body": "Thank you @mklement0 ! It seems like shellcheck fails to catch this as well.\r\n\r\n```shell\r\n/etc/profile.d $ shellcheck -s sh apps-bin-path.sh\r\n\r\nIn apps-bin-path.sh line 5:\r\nif [ -n \"${PATH##*${snap_bin_path}}\" -a -n \"${PATH##*${snap_bin_path}:*}\" ]; then\r\n                                     ^-- SC2166: Prefer [ p ] && [ q ] as [ p -a q ] is not well defined.\r\n\r\n\r\nIn apps-bin-path.sh line 19:\r\nif [ -n \"${XDG_DATA_DIRS##*${snap_xdg_path}}\" -a -n \"${XDG_DATA_DIRS##*${snap_xdg_path}:*}\" ]; then\r\n                                              ^-- SC2166: Prefer [ p ] && [ q ] as [ p -a q ] is not well defined.\r\n```",
      "created_at": "2020-03-16T19:58:51Z",
      "updated_at": "2020-03-16T19:58:51Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Good point, @gdoenlen  - a request to add such a check has already been made (by the author of shellcheck himself): https://github.com/koalaman/shellcheck/issues/951 ",
      "created_at": "2020-03-16T21:41:49Z",
      "updated_at": "2020-03-16T21:42:07Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I've updated the [previous comment](https://github.com/PowerShell/PowerShell/issues/12020#issuecomment-599693404) to paint what I hope is the full picture, but in a nutshell:\r\n\r\n* The root cause is the poorly written `/etc/profile.d/apps-bin-path.sh` script that ships with Ubuntu.\r\n* The problem surfaces predictably in WSL (with Windows path integration turned on, which is true by default) with `pwsh` as the user's default shell, given that WSL of necessity always invokes user shells as a _login_ shell to ensure `/etc/profile` processing - unlike in actual Linux (virtual) machines, where that isn't necessary.\r\n    * The problem can hypothetically also occur in actual Linux machines, albeit with a different symptom: if you add a directory with spaces to `PATH` (e.g. via `/etc/enviroment`), a blocking error message will pop up during system startup.",
      "created_at": "2020-03-16T21:53:42Z",
      "updated_at": "2020-03-16T23:28:13Z"
    },
    {
      "author": "ExE-Boss",
      "author_association": "NONE",
      "body": "This\u00a0has\u00a0now been\u00a0fixed in\u00a0the\u00a0`snapd` **GitHub**\u00a0repository: <https://github.com/snapcore/snapd/pull/9888> (<https://github.com/snapcore/snapd/commit/ae84b651f464f297c046b60b82c60ecdd69ce80e>).",
      "created_at": "2021-02-05T12:42:01Z",
      "updated_at": "2021-02-05T12:42:01Z"
    },
    {
      "author": "gdoenlen",
      "author_association": "NONE",
      "body": "> \r\n> \r\n> This has now been fixed in the `snapd` **GitHub** repository: [snapcore/snapd#9888](https://github.com/snapcore/snapd/pull/9888) ([snapcore/snapd@ae84b65](https://github.com/snapcore/snapd/commit/ae84b651f464f297c046b60b82c60ecdd69ce80e)).\r\n\r\nAny idea when this will make it into WSL? As of today pwsh 7.1.1 is still broken as a login shell. ",
      "created_at": "2021-02-05T17:14:08Z",
      "updated_at": "2021-02-05T17:14:08Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as external and has not had any activity for **1 day**. It has been be closed for housekeeping purposes.",
      "created_at": "2022-02-05T01:00:39Z",
      "updated_at": "2022-02-05T01:00:39Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "The Engine WG reviewed this issue yesterday.  We believe this is an external issue.   While `snapd` has applied a fix, that fix was not available on the WSL Ubuntu 20.04 distro we tested.  Applying the fix `\"...\"` around the RHS manually seems to allow PowerShell to run as a login shell:\r\n\r\n```\r\nhillr@Keith-Dell8500:/$ sh -l\r\n$ exit\r\nhillr@Keith-Dell8500:/$ pwsh -l\r\nPowerShell 7.2.0\r\nCopyright (c) Microsoft Corporation.\r\n\r\nhttps://aka.ms/powershell\r\nType 'help' to get help.\r\n\r\n   A new PowerShell stable release is available: v7.2.1\r\n   Upgrade now, or check out the release page at:\r\n     https://aka.ms/PowerShell-Release?tag=v7.2.1\r\n\r\nPS />\r\n```",
      "created_at": "2022-02-05T01:09:48Z",
      "updated_at": "2022-02-05T01:09:48Z"
    }
  ],
  "created_at": "2020-03-05T02:36:20Z",
  "number": 12020,
  "state": "closed",
  "title": "pwsh 7 can't parse path in WSL when using Windows integration",
  "updated_at": "2022-02-05T01:09:48Z"
}