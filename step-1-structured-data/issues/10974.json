{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10974",
  "author": "daxian-dbw",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nFix #7452\r\n\r\nBackground about the setting `DisablePromptToUpdateHelp`:\r\n\r\nIn Windows PowerShell, `DisablePromptToUpdateHelp` is a registry key property set at `HKLM\\SOFTWARE\\Microsoft\\PowerShell`.\r\n**It's not really a setting for user to configure PowerShell, but instead, an implementation detail.** It's used by `Get-Help` to tell if `Update-Help` has been run yet. On a fresh Windows, `DisablePromptToUpdateHelp` is not set, so `Get-Help` running in a admin privilege PowerShell session will prompt user to ask if the user wants to run `Update-Help` to download help content for all the modules in module path. `DisablePromptToUpdateHelp` then is set to `1` after the prompt (`Update-Help` will set it to `1` too), so the code that prompt and run `Update-Help` in `Get-Help` is guaranteed to execute only once.\r\n\r\n**This feature never worked in `pwsh`**, because when moving the registry settings to the `powershell.config.json` file, `UpdatableHelpSystem.ShouldPromptToUpdateHelp()` was not updated correctly to keep the previous behavior. However, that was not a bad thing because the previous behavior in Windows PowerShell is not appropriate to `pwsh` anymore:\r\n- for `powershell.exe`, there is only one instance of PowerShell, so the `DisablePromptToUpdateHelp` key in registry can guarantee the prompt from `Get-Help` shows up only once. \r\n- for `pwsh.exe`, there can be many instances of PowerShell, and they all depend on their own `$PSHOME\\powershell.config.json`, so even if `Update-Help` has been run, a new instance of `pwsh` would still show the prompt when you run `Get-Help` in it. This is not desirable.\r\n\r\nGiven the fact that:\r\n1. this feature never worked in `pwsh` and there has been no complaint about it;\r\n2. the feature implementation in Windows PowerShell doesn't work for `pwsh`\r\n\r\nI propose to remove this functionality from `pwsh`, so as to remove the `DisablePromptToUpdateHelp` setting from `powershell.config.json` file (it should never be there as an implementation detail).\r\nIf we decide to bring back this functionality to `pwsh` in future, the implementation definitely needs to be re-written.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2019-11-07T19:54:23Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Should we set CL-Breaking label? Formally it is a breaking change.",
      "created_at": "2019-11-08T03:06:58Z",
      "updated_at": "2019-11-08T03:06:58Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "It's not a breaking change to `pwsh`. The functionality never worked in `pwsh`.",
      "created_at": "2019-11-08T17:47:45Z",
      "updated_at": "2019-11-08T17:47:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "How do we mark the difference from Windows PowerShell?\r\n",
      "created_at": "2019-11-08T17:50:53Z",
      "updated_at": "2019-11-08T17:50:53Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I don't think we have such a label ... There are still codes guarded by `#if CORECLR` and all those places are essentially differences from Windows PowerShell.\r\n@TravisEz13 @adityapatwardhan how do we keep track of the differences between Windows PowerShell and pwsh?",
      "created_at": "2019-11-08T19:25:13Z",
      "updated_at": "2019-11-08T19:25:13Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@daxian-dbw We don't have a method to track those changes",
      "created_at": "2019-11-08T19:27:19Z",
      "updated_at": "2019-11-08T19:27:19Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "I agree this is not breaking.",
      "created_at": "2019-11-08T19:27:32Z",
      "updated_at": "2019-11-08T19:27:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "My reasoning has always been that when 6.0 version was released, all the differences from Windows PowerShell version was breaking changes (never completely enumerated) and somehow we need to inform users about this.\r\n",
      "created_at": "2019-11-09T06:12:59Z",
      "updated_at": "2019-11-09T06:12:59Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Then I think that would just be a doc issue.  Breaking changes are to draw attention to breaking change in THAT release.  6.0 being long out of support makes not sense to make a breaking change announcement.",
      "created_at": "2019-11-13T00:40:04Z",
      "updated_at": "2019-11-13T00:40:04Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.0.0-preview.6` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.6)\n",
      "created_at": "2019-11-21T22:34:23Z",
      "updated_at": "2019-11-21T22:34:23Z"
    }
  ],
  "created_at": "2019-11-02T00:21:57Z",
  "number": 10974,
  "state": "closed",
  "title": "Remove the not-working 'run Update-Help from Get-Help when Get-Help runs for the first time' functionality",
  "updated_at": "2019-11-21T22:34:24Z"
}