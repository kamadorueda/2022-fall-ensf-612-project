{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17747",
  "author": "PaulHigin",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nThis PR makes the IPC named pipe listener, which currently always runs, opt-in.  This addresses issue #11599.\r\n\r\n## PR Context\r\n\r\nSince about PowerShell 5.0, every PowerShell session has a running IPC (inter-process communication) listener that allowed other PowerShell sessions on a local machine (with appropriate privileges) to attach to it and debug running script.  One downside to this is on non-Windows platforms where the created named pipe used for the connection does not always get cleaned up after the session process terminates.  Another drawback is that an extra listener thread always runs in a PowerShell session, that is rarely used.\r\n\r\nThe fix is to make the IPC listener thread opt-in, through both a new `-StartIPCListener` pwsh.exe parameter and a new `System.Management.Automation.Runspaces.Runspace.StartIPCListener()` API.  This makes debugging running script on other PowerShell sessions less convenient but still doable.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/main/reference/7.3/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [x] I have considered the user experience from a tooling perspective and opened an issue in the relevant tool repository. This may include:\r\n        - [x] Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode\r\n        (which runs in a different PS Host).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n",
  "closed_at": "2022-07-27T15:38:12Z",
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Most of the use cases I've had for `Enter-PSHostProcess` and that I've guided folks through have been after a process has already gotten into a state that needs to be troubleshooted. Often in a way that is not trivial to reproduce.\r\n\r\nPersonally I'd really rather see this be opt-out, possibly at the configuration level. Attach to process debugging is already sort of a hand full to explain.\r\n\r\nDo we know how .NET handles this? Or do they have the same temp file problem?",
      "created_at": "2022-07-25T15:58:40Z",
      "updated_at": "2022-07-25T15:58:40Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "We discussed this some more and agree that opt-out would be less disruptive and still allow users not to have the listener running.  However, the original concern (#11599) was about named pipe files being littered on non-Windows platforms, if PowerShell is abruptly terminated (clicking on the terminal window close button rather than running `exit` command).  I did some investigation and dotNet puts the named pipe file in the users `/tmp` directory.  But it turns out that the CLR also creates three temporary files (two of which are used for debugging), and these files also get leaked.  So disabling PowerShell named pipe listener will not completely solve the problem.  The good news is that these files do get cleaned up on machine reboot, so those temporary files will not remain indefinitely.  \r\n\r\n",
      "created_at": "2022-07-25T17:22:19Z",
      "updated_at": "2022-07-25T17:22:19Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Based on the current behavior, I agree that Opt-in is a better model as we are getting many reports of this failing very frequently in Ubuntu 22.04",
      "created_at": "2022-07-25T18:10:44Z",
      "updated_at": "2022-07-25T18:10:44Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Could pwsh on startup run in a separate thread a method that cleans up older pipes where the PID for that path has already exited? It would be annoying for this to become opt-in as I do find it quite useful that `Enter-PSHostProcess` just works without having to respawn a new process.",
      "created_at": "2022-07-25T21:37:03Z",
      "updated_at": "2022-07-25T21:37:28Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@jborean93 I agree that the listener always running is pretty convenient, but it is good to get community input to verify that.  The system already cleans up these temporary files on machine reboot (maybe even user log in/out, but not sure), so I don't think it is necessary to have PowerShell add a redundant cleaning mechanism.  At this point I feel `opt-out` is the right thing to do (sorry if I wasn't clear).  This is similar to what dotNET CLR does now (via environment variable) and gives users the option to opt-out of the listener, and not have littered files causing false alerts, but by default the listener will continue to always run on session start.",
      "created_at": "2022-07-25T21:51:08Z",
      "updated_at": "2022-07-25T21:51:08Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Closing this PR due to change from opt-in to opt-out preference.",
      "created_at": "2022-07-27T15:38:12Z",
      "updated_at": "2022-07-27T15:38:12Z"
    },
    {
      "author": "olii",
      "author_association": "NONE",
      "body": "Is there a PR that implements the opt-out preference?",
      "created_at": "2022-08-08T13:40:16Z",
      "updated_at": "2022-08-08T13:40:16Z"
    }
  ],
  "created_at": "2022-07-22T22:32:41Z",
  "number": 17747,
  "state": "closed",
  "title": "[WIP] Make named pipe IPC opt-in",
  "updated_at": "2022-08-08T13:40:16Z"
}