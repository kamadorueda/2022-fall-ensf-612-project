{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4345",
  "author": "f0rt",
  "body": "Team,\r\n\r\nIt's really hard to debug background jobs since they're started in a separate process and the debugger doesn't hit the breakpoints.\r\nPlease consider the following features:\r\n- Implement new parameter \"InSameProcess\" for the Start-Job cmdlet that forces it to be run in the same process\r\n- Attach debugger to the child background job processes\r\n\r\nThanks,\r\nNedko\r\n\r\nP.S. Note that the lack of this features makes some people avoid completely background jobs since they are hard to maintain.\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@f0rt Thanks for your suggestion!\r\n\r\nPossibly related #3000 ",
      "created_at": "2017-07-26T15:32:06Z",
      "updated_at": "2017-07-26T15:32:06Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Debugging background processes is definitely possible starting in V5 -\r\nI see a couple of relevant blog posts in the first page of results from this [search](https://www.bing.com/search?q=powershell+debug+background+job)",
      "created_at": "2017-07-26T16:03:30Z",
      "updated_at": "2017-07-26T16:03:30Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "The following Scripting Guys blog post shows how to use VSCode and the PowerShell extension to attach to a process in order to debug it.  https://blogs.technet.microsoft.com/heyscriptingguy/2017/02/13/debugging-powershell-script-in-visual-studio-code-part-2/",
      "created_at": "2017-07-26T16:10:52Z",
      "updated_at": "2017-07-26T16:10:52Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Although the title of this [blog post](https://blogs.msdn.microsoft.com/powershell/2016/03/14/debugging-powershell-dsc-class-resources/) is about DSCResources, it applies to debugging PowerShell in any runspace",
      "created_at": "2017-07-26T17:24:06Z",
      "updated_at": "2017-07-26T17:24:06Z"
    },
    {
      "author": "f0rt",
      "author_association": "NONE",
      "body": "Thanks for the replies. Is there a clean way to break into a Job? Set-PSBreakpoint is not working. Modifying the job script to add Wait-Debugger doesn't seem to be a developer friendly way. ",
      "created_at": "2017-08-15T08:20:37Z",
      "updated_at": "2017-08-15T08:20:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@f0rt Use Debug-Job https://blogs.msdn.microsoft.com/powershell/2014/12/11/powershell-job-debugging/",
      "created_at": "2017-08-15T09:18:42Z",
      "updated_at": "2017-08-15T09:18:42Z"
    },
    {
      "author": "f0rt",
      "author_association": "NONE",
      "body": "I'm using Debug-Job but it fails if I don't add Wait-Debugger to the job script. This means that I need to modify the script that I'm trying to debug which is not desired in some cases.",
      "created_at": "2017-08-15T11:50:23Z",
      "updated_at": "2017-08-15T11:50:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Do you say that the sample from the blog post mentioned above doesn't work?\r\n```powershell\r\n$job = Start-Job -ScriptBlock { Set-PSBreakpoint C:\\DebugDemos\\MyJobDemo1.ps1 -Line 8; C:\\DebugDemos\\MyJobDemo1.ps1 }\r\n```",
      "created_at": "2017-08-15T12:58:48Z",
      "updated_at": "2017-08-15T12:59:29Z"
    },
    {
      "author": "f0rt",
      "author_association": "NONE",
      "body": "The example is working. I'm saying that debugging should not involve modifying the script under investigations(because sometimes this is not possible).",
      "created_at": "2017-08-16T07:11:03Z",
      "updated_at": "2017-08-16T07:18:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Can you show a sample script where Debug-Job failed?",
      "created_at": "2017-08-16T08:15:48Z",
      "updated_at": "2017-08-16T08:15:48Z"
    },
    {
      "author": "dmilov",
      "author_association": "NONE",
      "body": "Hi,\r\n\r\nI'd like to join the discussion adding an use-case for the point of f0rt. Here it is\r\n\r\nI as a consumer of a PowerShell module, which has a function that spawns a job,\r\nfind out that the job produces wrong result for my input.\r\nI'd like to be able to debug this  job without modifying the code of the module I use. \r\n\r\nHere is an example, I have\r\n\r\n2ndPartyModule.psm1 with content\r\n\r\nfunction Do-Work {\r\nparam([int]$n)\r\n   start-job {\r\n      for ($i =0; $i -lt 10; $i++) {\r\n         Write-Output ($i*$n)\r\n      }\r\n   } | Wait-Job | Receive-Job\r\n}\r\n\r\nIf I want to break on the \"Write-Output ($i*$n)\" line to debug, \r\n\r\nmy option is to modify the code of 2ndPartyModule.psm1 adding \"Set-PSBreakPoint\" or \"Wait-Debugger\" and also adding \"Debug-Job\" somewhere. \r\n\r\nIt would be great if I am able to set break point from my host process, the PS console for instance, where I have imported the module and call it. To illustrate this imagine I start the console and do the following\r\n\r\nImport-Module .\\2ndPartyModule.psm1\r\nSet-PSBreakPoint  .\\2ndPartyModule.psm1 4\r\nDo-Work -n 7\r\n\r\nAnd this automatically breaks the job at my breakpoint.\r\n\r\n",
      "created_at": "2017-08-16T08:37:35Z",
      "updated_at": "2017-08-16T08:37:35Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr Could you please comment the scenario? It seems guys want that `Set-PSBreakPoint` implicitly set `Wait-Debugger` in a job.",
      "created_at": "2017-08-16T10:48:07Z",
      "updated_at": "2017-08-16T10:48:07Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This is more of a question for @PaulHigin ",
      "created_at": "2017-08-16T14:55:44Z",
      "updated_at": "2017-08-16T14:55:44Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Jobs run in a separate process and PowerShell session.  Set-PSBreakpoint works in the current process/session.  Debug-Job attaches the remote debugger to the process/session where the job is running.  If the job is running script during the attach then the job script is stopped at the attach point.  If the job is already stopped and waiting for a debugger attach (due to a breakpoint being set or Wait-Debugger) then attaching the debugger shows the current execution point.\r\n\r\nAs you mention PowerShell script can be stopped in the debugger in one of two ways:\r\n```powershell\r\nSet-PSBreakpoint   # cmdlet when called in the job process/session\r\nWait-Debugger      # cmdlet when inserted into the job script\r\n```\r\nYou can set script breakpoints in a job before you run any script files in the job to get the job to stop and wait for a debugger attach:\r\n```powershell\r\nPS > $job = Start-Job { Set-PSBreakpoint e:\\temp\\Modules\\Test1.psm1 -Line 10; ipmo e:\\temp\\Modules\\Test1.psd1; PublicFn }\r\n\r\nPS > $job\r\n\r\nId     Name            PSJobTypeName   State         HasMoreData     Location             Command\r\n--     ----            -------------   -----         -----------     --------             -------\r\n11     Job11           BackgroundJob   AtBreakpoint  True            localhost             Set-PSBreakpoint e:\\t...\r\n\r\nPS > Debug-Job $job\r\nHit Line breakpoint on 'E:\\temp\\Modules\\Test1\\Test1.psm1:10'\r\n\r\nAt E:\\temp\\Modules\\Test1\\Test1.psm1:10 char:5\r\n+     \"Get-Processes\"\r\n+     ~~~~~~~~~~~~~~~~~\r\n```\r\nOr alternatively:\r\n```powershell\r\nPS > $job = Start-Job { ipmo E:\\temp\\Modules\\Test1\\Test1.psd1; PublicFn } -InitializationScript { $\r\nhost.Runspace.Debugger.SetDebugMode([System.Management.Automation.DebugModes]::RemoteScript); Set-PSBreakpoint E:\\temp\\M\r\nodules\\Test1\\Test1.psm1 -line 10 }\r\n```\r\nWe could make this easier by adding to the existing Start-Job parameter sets that allow you provide breakpoint information for the running job.  Maybe something like:\r\n```powershell\r\nStart-Job { c:\\Scripts\\MyScript.ps1 } -Breakpoints @{ ScriptFile='c:\\Scripts\\MyScriptModule.psm1'; Lines=10,32 }\r\n```\r\n```",
      "created_at": "2017-08-16T16:58:03Z",
      "updated_at": "2017-08-16T16:58:03Z"
    },
    {
      "author": "dmilov",
      "author_association": "NONE",
      "body": "@PaulHigin Thanks for the detailed explanation!\r\n\r\nChanging DebugMode and setting breakpoints in the initialization script is a good option I haven't thought of. \r\n\r\nIf there is a switch parameter of the Start-Job cmdlet like \"-PropagateBreakpoints\" to get the breakpoints from the process that starts the job and sets them into the job's process it would be a bit more convenient.",
      "created_at": "2017-08-17T08:00:22Z",
      "updated_at": "2017-08-17T08:00:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If we'll propagate breakpoints from the parent process to a job process we get breakpoint clones in two processes.",
      "created_at": "2017-08-17T08:31:08Z",
      "updated_at": "2017-08-17T08:31:08Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I like the `-Breakpoints` parameter suggestion from @PaulHigin.  I'll reopen this issue and change it to a enhancement.",
      "created_at": "2017-08-17T11:33:57Z",
      "updated_at": "2017-08-17T11:33:57Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Does it make sense to support `Set-PSBreakpoint -Job $job ...`?",
      "created_at": "2017-08-17T17:40:21Z",
      "updated_at": "2017-08-17T17:40:21Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "I am not sure how useful it would be since it is impossible to know where a job is running a script and so difficult to know where to set breakpoints.  In a way this is already supported because Debug-Job stops the running script at the next execution point and attaches the debugger.  You can then see where the script is executing and set breakpoints more intelligently.",
      "created_at": "2017-08-17T22:49:11Z",
      "updated_at": "2017-08-17T22:49:11Z"
    },
    {
      "author": "t-tsvetkov",
      "author_association": "NONE",
      "body": "It will be really valuable to add support for debugging scripts running in separate PowerShell jobs without having to modify the source script.\r\n\r\nI did some testing with the suggested approach and it seems to work only when the breakpoint is set in a separate file, i.e. I am unable to set a breakpoint on a particular line of the job's script itself. \r\n\r\nHere is the sample script file:\r\n\r\n```\r\nfunction Do-Work {   \r\n    $script = {\r\n        # PowerShell is unable to debug the job unless an explicit Wait-Debugger command is specified inside the job.\r\n        # Changing the debug mode and setting session breakpoints in the job initialization script has no effect.\r\n        # Also, the $MyInvocation.ScriptName, and $MyInvocation.PSCommandPath properties are empty \r\n        # inside the executed job, which is probably causing the observed behavior.\r\n        \r\n        # Wait-Debugger\r\n\r\n        $MyInvocation | fl\r\n\r\n        Write-Host \"Running job...\"   \r\n        for ($i =1; $i -le 5; $i++) {\r\n            Write-Host ($i)\r\n        }\r\n    }\r\n\r\n    $initDebugModeScript = {        \r\n        $host.Runspace.Debugger.SetDebugMode([System.Management.Automation.DebugModes]::RemoteScript);\r\n        Set-PSBreakpoint -Script <This file> -Line 14    \r\n    }         \r\n                       \r\n    $job = Start-Job -ScriptBlock $script -InitializationScript $initDebugModeScript\r\n    \r\n    Wait-Debugger\r\n    Debug-Job -Job $job\r\n    Receive-Job -Job $job       \r\n}\r\n\r\nDo-Work\r\n```\r\n\r\nMost of our standalone jobs run longer scripts and it is typical that you need to set a breakpoint somewhere in the middle of the script, e.g. before a particular command. Extracting the job's script to a separate file (either statically or implicitly at run time)  is not always an option.\r\n\r\nIt seems that PowerShell is currently unable to transfer location information for the scriptblock object that is passed to the new job. However, setting breakpoints inside script blocks in the same session works perfectly fine.\r\n\r\n[Debug_Inline_Job.ps1.txt](https://github.com/PowerShell/PowerShell/files/1234146/Debug_Inline_Job.ps1.txt)\r\n",
      "created_at": "2017-08-18T11:12:34Z",
      "updated_at": "2017-08-18T11:12:34Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "PowerShell doesn't support line breakpoints in script blocks.  This is a known weakness (#3000) and shouldn't be that difficult to fix.  A workaround is to use command or variable breakpoints for the script block.",
      "created_at": "2017-08-18T16:44:40Z",
      "updated_at": "2017-08-18T16:44:40Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I like the flexibility of `-Breakpoints` (though it should probably be singular (`-Breakpoint`)), but I'd love to also see a `-WaitDebugger` switch that simplifies the following common use case:\r\n\r\n* Launch the job.\r\n* Have it wait for a debugger to attach right away, before doing any work.\r\n\r\nIn other words: it would be like an implicit `Wait-Debugger` call as the 1st line of the background script.\r\n",
      "created_at": "2017-10-29T15:16:46Z",
      "updated_at": "2017-10-29T15:16:46Z"
    }
  ],
  "created_at": "2017-07-26T08:47:47Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Interactive-Debugging"
  ],
  "number": 4345,
  "state": "open",
  "title": "Support -Breakpoint parameter to Start-Job to enable easier debugging of jobs without modifying the job script",
  "updated_at": "2018-06-21T21:04:43Z"
}