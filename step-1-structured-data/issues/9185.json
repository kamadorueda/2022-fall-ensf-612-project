{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9185",
  "author": "Jaykul",
  "body": "# Steps to reproduce\r\n\r\n```powershell\r\n& {\r\n    [CmdletBinding()]param()\r\n    1,2,3,4 | Select -First 1\r\n} -ErrorVariable Problems; \r\n$Problems |  Format-List * -Force\r\n```\r\n\r\n# Expected behavior\r\n\r\nThere are no errors, so `$Problems` should be **empty**.\r\n\r\n# Actual behavior\r\n\r\n`$Problems` has `StopUpstreamCommandsException` which `Select-Object -First` threw.\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.3\r\nPSEdition                      Core\r\nGitCommitId                    6.1.3\r\nOS                             Microsoft Windows 10.0.18353\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```\r\n",
  "closed_at": "2019-10-22T23:38:32Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "*sigh*\r\n\r\nWe need a proper pipeline stop signal. This has been brought up before, and it really needs to be done. There are too many side effects from using a secret exception to do it.",
      "created_at": "2019-03-21T16:41:16Z",
      "updated_at": "2019-03-21T16:41:16Z"
    },
    {
      "author": "mossrich",
      "author_association": "NONE",
      "body": "Also reported 11/2018:  https://windowsserver.uservoice.com/forums/301869-powershell/suggestions/36081100-error-select-object-with-first-parameter-populat\r\n\r\nThis issue is also present in Powershell 4 and 5, but manifests as 'System error. '\r\n\r\nPS > 1..2 | Select -First 2 -ErrorVariable X; $X | select *\r\n1\r\n2\r\n\r\nRequestingCommandProcessor : Select-Object\r\nMessage                    : System error.\r\nData                       : {}\r\nInnerException             : \r\nTargetSite                 : Void ProcessRecord()\r\nStackTrace                 :    at Microsoft.PowerShell.Commands.SelectObjectCommand.ProcessRecord()\r\n                                at System.Management.Automation.CommandProcessor.ProcessRecord()\r\nHelpLink                   : \r\nSource                     : Microsoft.PowerShell.Commands.Utility\r\nHResult                    : -2146233087\r\n\r\nPS > $PSVersionTable.PSVersion\r\n\r\nMajor  Minor  Build  Revision\r\n-----  -----  -----  --------\r\n4      0      -1     -1      \r\n",
      "created_at": "2019-03-29T16:31:50Z",
      "updated_at": "2019-03-29T16:31:50Z"
    },
    {
      "author": "ericnelson",
      "author_association": "NONE",
      "body": "This one bites you in really fun ways when using orchestration tools like RunDeck that strictly check the ErrorVariable  of Invoke-Expression -ErrorVariable +myerr. Scripts run but the orchestration tools report failures. Quite a few refactors because of this. ",
      "created_at": "2019-08-28T19:52:28Z",
      "updated_at": "2019-08-28T19:52:28Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT is there anything we can do about this one for ps7? I'm more than willing to put some work in here, but I'm not at all clear on where to start :(",
      "created_at": "2019-08-28T19:57:11Z",
      "updated_at": "2019-08-28T19:57:28Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@vexx32 It seems that this is not going to be a small fix that maintains backwards compatibility.  As such, seems risky to take for PS7.",
      "created_at": "2019-08-28T20:17:26Z",
      "updated_at": "2019-08-28T20:17:26Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Sure, but that will always be the case. Lots of little niggles like this all add up to a bit of an unfortunate mess in terms of error handling in PS. Joel B has several issues on various aspects of it, and all of them could potentially be breaking changes.\r\n\r\nHowever, the behaviour is broken to begin with. If a major version isn't a time to fix these long-standing problems, when is? :slightly_smiling_face: ",
      "created_at": "2019-08-28T22:02:06Z",
      "updated_at": "2019-08-28T22:02:06Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I agree this should be addressed, however, it's also been like this for probably ever.  From a priority standpoint, it's not clear to me how many customers are actually affected by this.",
      "created_at": "2019-08-29T22:55:40Z",
      "updated_at": "2019-08-29T22:55:40Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Definitely fair, I get that. I'm not asking for it to be solved yesterday, just if there are folks who might be familiar with the internals on your team, I'd appreciate some pointers on possible avenues for a solution / relevant code areas to be have a good chance of being able to put a solution in code. \ud83d\ude42 ",
      "created_at": "2019-08-30T00:39:01Z",
      "updated_at": "2019-08-30T00:39:01Z"
    },
    {
      "author": "mossrich",
      "author_association": "NONE",
      "body": "In case it helps with prioritization, this showed up as a post-implementation issue for multiple clients at my organization when an internal product upgrade was applied that introduced 'Select -First' in a deploy script.  Wrapper scripts falsely reported the error variable being set as a deploy failure.  I added a workaround that ignores errors with 'HResult = -2146233087' in the most urgent cases, but I know there are some clients who haven't yet encountered this issue and will eventually.  \r\nIt seems safe to assume that no one is _depending_ on the error variable to be set in this scenario. \r\nThanks for whatever attention you can give to the solution.  It may not help my clients who are unlikely to do a major version upgrade in the near future, but it certainly adds to the overall robustness of Powershell. ",
      "created_at": "2019-09-04T17:33:29Z",
      "updated_at": "2019-09-04T17:33:29Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Looked into this and turned out to be simple",
      "created_at": "2019-10-18T23:50:18Z",
      "updated_at": "2019-10-18T23:50:18Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #10840, which has now been successfully released as `v7.0.0-preview.6`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.6)\n",
      "created_at": "2019-11-21T22:35:45Z",
      "updated_at": "2019-11-21T22:35:45Z"
    }
  ],
  "created_at": "2019-03-21T16:34:41Z",
  "labels": [
    "Issue-Question",
    "Resolution-Fixed"
  ],
  "number": 9185,
  "state": "closed",
  "title": "Select-Object -First populates `-ErrorVariable`",
  "updated_at": "2019-11-21T22:35:45Z"
}