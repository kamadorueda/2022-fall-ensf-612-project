{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15133",
  "author": "brunovieira97",
  "body": "## Summary of the new feature/enhancement\r\n\r\nSupport hex color strings as values for console colors, such as `Write-Host`'s `-ForegroundColor` and `-BackgroundColor`.\r\n\r\nSpecially since PowerShell is now multi-platform, I consider it'd benefit from using a more standardized way of passing colors, not being limited to the default 16-color table from legacy code. Windows now offers Windows Terminal, which also doesn't interact with the old Console Colors functionality from Conhost.\r\n\r\nMaybe backwards compatibility could be maintained by using the old school strings from Conhost as aliases for the actual hex values? Something like `White -> #FFFFFF`.\r\n\r\nIs this even possible to implement?",
  "closed_at": "2022-11-13T04:01:01Z",
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> using a more standardized way of passing colors\r\n\r\nRGB Escape Sequences maybe? \r\n```\r\nWrite-Host \"`e[38;2;255;255;255;48;2;255;0;0m White on Red `e[0m\"\r\n```",
      "created_at": "2021-04-01T10:35:49Z",
      "updated_at": "2021-04-01T10:36:48Z"
    },
    {
      "author": "brunovieira97",
      "author_association": "NONE",
      "body": "Sure, I know that's possible, but adding this directly to the parameters would be much better for the user (dev, etc).\r\n\r\nThat's the reason I proposed the implementation of a more ubiquous way of using colors lol\r\n\r\nIdeally, PowerShell would support colors in a CSS-like way:\r\n\r\n- Color names for some standard ones (white, black, blue, etc)\r\n- HEX values\r\n- RGB (optionally)",
      "created_at": "2021-04-01T15:28:57Z",
      "updated_at": "2021-04-01T15:30:51Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "This was added recently in the form of the `$PSStyle` variable:\r\n\r\n```powershell\r\n\"$($PSStyle.Background.FromRgb(255, 0, 0))$($PSStyle.Foreground.FromRgb(0xFFFFFF))Testing$($PSStyle.Reset)\"\r\n```",
      "created_at": "2021-04-01T16:36:38Z",
      "updated_at": "2021-04-01T16:36:38Z"
    },
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "The way to specify hex values in PowerShell is with the `0x` prefix i.e. 0xf3d and specifying a hex value  as a color for `Write-Host` already works:\r\n```powershell\r\nWrite-Host -ForegroundColor 0x6 \"Hi there\"\r\n```\r\nBUT the type of `-ForegroundColor` itself is a problem. It's an enum `System.ConsoleColor` that already defines a (small) set of  numeric values for colors. The reason you can use color names as arguments is that the parameter binder type converter looks up the  member name on the enum then substitutes the corresponding integer value. For example `White` has the numeric value 0x0f not the RGB value 0xffff. So supporting RGB colors with the existing parameters would be a breaking change. I suppose a new parameter `-ForegroundColorRGB` could be added if you want more colors but the advantage of the current setup is that it's broadly portable. ",
      "created_at": "2021-04-02T02:26:14Z",
      "updated_at": "2021-04-02T02:26:14Z"
    },
    {
      "author": "brunovieira97",
      "author_association": "NONE",
      "body": "I ended up writing a custom function on my PowerShell module that will work with either hex and `System.ConsoleColor` names as a value for `-ForegroundColor`.\r\n\r\nI then check if it's one of the standard colors, or if it matches a hexadecimal color regex, and then transform it to RGB escape sequences to add to the text I want to write. Thanks, @237dmitry for that!\r\n\r\nIt's a workaround, of course, as native support for `#ffffff` as a color would be much appreciated. Anyway, my needs are met for the time being.\r\n\r\nPlease, keep looking into this as a future improvement, it'd be awesome to just pass a hex string to Write-Host!  ",
      "created_at": "2021-04-11T15:05:27Z",
      "updated_at": "2021-04-11T15:06:19Z"
    },
    {
      "author": "terryaney",
      "author_association": "NONE",
      "body": "@brunovieira97 Have a sample of your custom function? :)",
      "created_at": "2022-05-06T22:13:24Z",
      "updated_at": "2022-05-06T22:13:24Z"
    },
    {
      "author": "brunovieira97",
      "author_association": "NONE",
      "body": "@terryaney sure, here it is: https://github.com/brunovieira97/ps-color/blob/main/src/util/Color.ps1\r\n\r\nWhat I did was map the default hex values for each System.ConsoleColor, and just use everything as a hexadecimal value.\r\nThe shortcoming of this method is that I don't get the current value for the console colors, but there's probably a way to do so.\r\n\r\nIt's not the most fancy solution, but it gets the job done \ud83d\ude06\r\n\r\n<blockquote><img src=\"https://opengraph.githubassets.com/4bbca9713da700ae46f01d5bdf62bedde2b6210bcfd199578265589f552c80af/brunovieira97/ps-color\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/brunovieira97/ps-color\">ps-color/Color.ps1 at main \u00b7 brunovieira97/ps-color</a></strong></div><div>PowerShell module for simple and native color highlighting on various output types. - ps-color/Color.ps1 at main \u00b7 brunovieira97/ps-color</div></blockquote>",
      "created_at": "2022-05-07T13:58:08Z",
      "updated_at": "2022-05-07T13:59:30Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "$PSStyle.Foreground.FromRgb() and $PSStyle.Background.FromRgb() resolves this",
      "created_at": "2022-11-11T21:04:34Z",
      "updated_at": "2022-11-11T21:04:34Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as fixed and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-11-13T04:01:00Z",
      "updated_at": "2022-11-13T04:01:00Z"
    }
  ],
  "created_at": "2021-04-01T00:45:03Z",
  "number": 15133,
  "state": "closed",
  "title": "Support hex values for console colors",
  "updated_at": "2022-11-13T04:01:01Z"
}