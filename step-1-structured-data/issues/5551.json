{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5551",
  "author": "mklement0",
  "body": "From what I understand, `[psobject]` is an invisible helper type used behind the scenes.\r\n\r\nHowever, some cmdlets do expose that type directly via their `-InputObject` parameters.\r\n\r\nOn a related note regarding _output_: When cmdlets write to the pipeline, the output objects are invariably `[psobject]`-wrapped:\r\n\r\n```powershell\r\n# A number literal of type [int], for instance, is not [psobject]-wrapped\r\nPS> 1 -is [psobject]\r\nFalse\r\n\r\n# Passing that number literal through Write-Output adds a [psobject] wrapper.\r\nPS> (Write-Output 1) -is [psobject]\r\nTrue\r\n```\r\n\r\nThis extra `[psobject]` wrapper is  _typically_ benign, but on occasion does result in different behavior - see #5579.\r\n\r\nIs there a good reason to declare parameters as `[psobject]` or `[psobject[]]` - thereby arguably leaking an implementation detail - when `[object]` and `[object[]]` should do?\r\n\r\nHere's the list of cmdlets that have `[psobject]` / `[psobject[]]` parameters as of PowerShell Core v6.0.0-rc:\r\n\r\n```powershell\r\n> $type = [psobject]; Get-Command -pv c | % { if ($_.Parameters) { $_.Parameters.GetEnumerator() } } | % Value |  ? { $_.ParameterType -eq $type } | Select-Object @{ l='Command'; e={ $c }}, @{ l='Parameter'; e='Name'}, @{ l='Type'; e='ParameterType' }\r\n\r\nCommand              Parameter   Type                                 \r\n-------              ---------   ----                                 \r\nFormat-Xml           InputObject System.Management.Automation.PSObject\r\nGet-TypeInfo         InputObject System.Management.Automation.PSObject\r\nGet-TypeName         InputObject System.Management.Automation.PSObject\r\nWrite-ErrorString    InputObject System.Management.Automation.PSObject\r\nWrite-StdErr         InputObject System.Management.Automation.PSObject\r\nAdd-Member           InputObject System.Management.Automation.PSObject\r\nConvertTo-Csv        InputObject System.Management.Automation.PSObject\r\nConvertTo-Html       InputObject System.Management.Automation.PSObject\r\nConvertTo-Xml        InputObject System.Management.Automation.PSObject\r\nExport-Clixml        InputObject System.Management.Automation.PSObject\r\nExport-Csv           InputObject System.Management.Automation.PSObject\r\nForEach-Object       InputObject System.Management.Automation.PSObject\r\nFormat-Custom        InputObject System.Management.Automation.PSObject\r\nFormat-Hex           InputObject System.Management.Automation.PSObject\r\nFormat-List          InputObject System.Management.Automation.PSObject\r\nFormat-Table         InputObject System.Management.Automation.PSObject\r\nFormat-Wide          InputObject System.Management.Automation.PSObject\r\nGet-Member           InputObject System.Management.Automation.PSObject\r\nGet-Unique           InputObject System.Management.Automation.PSObject\r\nGroup-Object         InputObject System.Management.Automation.PSObject\r\nInvoke-Command       InputObject System.Management.Automation.PSObject\r\nMeasure-Command      InputObject System.Management.Automation.PSObject\r\nMeasure-Object       InputObject System.Management.Automation.PSObject\r\nNew-Event            Sender      System.Management.Automation.PSObject\r\nNew-Event            MessageData System.Management.Automation.PSObject\r\nOut-Default          InputObject System.Management.Automation.PSObject\r\nOut-File             InputObject System.Management.Automation.PSObject\r\nOut-Host             InputObject System.Management.Automation.PSObject\r\nOut-Null             InputObject System.Management.Automation.PSObject\r\nOut-String           InputObject System.Management.Automation.PSObject\r\nRegister-EngineEvent MessageData System.Management.Automation.PSObject\r\nRegister-ObjectEvent InputObject System.Management.Automation.PSObject\r\nRegister-ObjectEvent MessageData System.Management.Automation.PSObject\r\nSelect-Object        InputObject System.Management.Automation.PSObject\r\nSelect-String        InputObject System.Management.Automation.PSObject\r\nSet-ItemProperty     InputObject System.Management.Automation.PSObject\r\nSort-Object          InputObject System.Management.Automation.PSObject\r\nStart-Job            InputObject System.Management.Automation.PSObject\r\nTee-Object           InputObject System.Management.Automation.PSObject\r\nTrace-Command        InputObject System.Management.Automation.PSObject\r\nWhere-Object         InputObject System.Management.Automation.PSObject\r\n\r\n> $type = [psobject[]]; Get-Command -pv c | % { if ($_.Parameters) { $_.Parameters.GetEnumerator() } } | % Value |  ? { $_.ParameterType -eq $type } | Select-Object @{ l='Command'; e={ $c }}, @{ l='Parameter'; e='Name'}, @{ l='Type'; e='ParameterType' }\r\n\r\n\r\nCommand         Parameter        Type                                   \r\n-------         ---------        ----                                   \r\nAdd-History     InputObject      System.Management.Automation.PSObject[]\r\nCompare-Object  ReferenceObject  System.Management.Automation.PSObject[]\r\nCompare-Object  DifferenceObject System.Management.Automation.PSObject[]\r\nConvertFrom-Csv InputObject      System.Management.Automation.PSObject[]\r\nNew-Event       EventArguments   System.Management.Automation.PSObject[]\r\nWrite-Output    InputObject      System.Management.Automation.PSObject[]\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "While PSObject is largely invisible to the script author, it is explicitly not invisible to the cmdlet author. PSObject is the basis for the extended type system. Cmdlets with an -InputObject parameter should specify this parameter as being of type PSObject.",
      "created_at": "2018-03-09T20:11:28Z",
      "updated_at": "2018-03-09T20:11:28Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@BrucePay - IMO, this only makes sense if the cmdlet **uses** a `PSObject` api. If not, the `PSObject` wrapper is not necessary.\r\n\r\nFrom a performance perspective, it makes sense to use `PSObject` as long as the PowerShell parameter binder relies heavily on the `PSObject` apis - a wrapper is created internally, so it's no extra work to pass that wrapper along.\r\n\r\nBut I can envision changes to the parameter binder where we could skip creating the `PSObject` wrapper, in which case there would be a benefit to specify `object` instead of `PSObject`, but that's a theoretical discussion right now - it's a ton of work to make said changes.",
      "created_at": "2018-03-09T21:37:57Z",
      "updated_at": "2018-03-09T21:37:57Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr This was a matter of stated policy in V1 - everything was to be a PSObject. I would be happy to revisit this now :-)",
      "created_at": "2018-03-12T22:59:41Z",
      "updated_at": "2018-03-12T22:59:41Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "OK - now I remember the reason for the policy: anything that takes `[object]` must also deal with `[PSObject]`. This means that **every** cmdlet that takes `[object]` has to do something along the lines of:\r\n```\r\nif (input is PSObject)\r\n{\r\n    // Do stuff\r\n}\r\nelse\r\n{\r\n    // Do other stuff\r\n}\r\n```\r\nand there have been lots of errors when people forgot to do this. Making the cmdlets take `[PSObject]` in the first place eliminates the need for extra code and reduces the risk of errors.\r\n\r\n@mklement0 said\r\n>From what I understand, [psobject] is an invisible helper type used behind the scenes.\r\n\r\nIt's largely invisible at the _shell user's_ level. It is _**_very_**_ visible to _programmers_ as part of the PowerShell API. \r\n \r\n@lzybkr Yeah - it might be nice to eliminate the `[PSObject]` wrappers but that would be a huge amount of work with a equally huge risk of regressions.",
      "created_at": "2018-04-04T21:28:12Z",
      "updated_at": "2018-04-04T21:28:12Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@BrucePay: \r\n\r\nThanks for the clarification.\r\n\r\nAs stated before, `[psobject]` instances surfacing in unpredictable ways on _output_ (from an end user's perspective) is problematic too.\r\n\r\nCombining the two aspects, to reiterate my question from https://github.com/PowerShell/PowerShell/issues/5643#issuecomment-378467986: Where is the place to discuss PowerShell \"vNext\", unfettered by backward-compatibility concerns - if any?",
      "created_at": "2018-04-04T21:36:02Z",
      "updated_at": "2018-04-04T21:36:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 Is your last question still open? Maybe it should be RFC?",
      "created_at": "2018-04-11T06:53:19Z",
      "updated_at": "2018-04-11T06:53:19Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @iSazonov. \r\n\r\nI guess we can start thinking about the specifics of a  \"vNext\" RFC process once we have clarity on whether there is a fundamental willingness to pursue this at all - which I'm unclear on.\r\n\r\nIf the commitment is to everlasting backward compatibility only (with carefully managed, low-impact exceptions), we needn't think about this further.\r\n\r\nTrue, I could make these very thoughts the subject of \"meta RFC\", but, in the absence of knowing whether it has _any_ chance of being considered, I'm hesitant to put in the work.",
      "created_at": "2018-04-11T11:51:37Z",
      "updated_at": "2018-04-11T11:51:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We need to have some very significant improvements in the engine and language to overlap the disadvantages of incompatible changes. We need to somehow organize this work.",
      "created_at": "2018-04-11T12:03:53Z",
      "updated_at": "2018-04-11T12:03:53Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: \r\n\r\nI fully agree. \r\n\r\nMy personal opinion is that there are several fundamental problems that can only be solved with massively breaking changes; to name a few:\r\n\r\n* Error handling\r\n* Preference-variable / common-parameter inheritance\r\n* Quoting for external programs\r\n* `-Command` CLI argument parsing\r\n* Performance issues (`[object[]]` as the fundamental collection type)\r\n  * While PowerShell understandably will never match the speed of Unix utilities, it is all the more important to make interop with them predictable and as painless as possible (that's where quoting and `-Command` parsing come in)\r\n\r\nAdditionally, countless \"warts\" have accumulated that could be removed in the process.\r\n\r\nBut, again: Are we willing to even _consider_ doing such a thing?\r\n\r\n",
      "created_at": "2018-04-11T12:30:27Z",
      "updated_at": "2018-04-11T12:30:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I would also like to know the plans and intentions of the team.\r\n\r\n/cc @joeyaiello @SteveL-MSFT ",
      "created_at": "2018-04-11T13:22:30Z",
      "updated_at": "2018-04-11T13:22:30Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 since we've released 6.0 GA, we expectedly more adverse to big breaking changes.  Moving to a 7.x release is not desirable as it bifurcates the PowerShell community further (compared to <=4, 5.1, and 6 users today).  \r\n\r\nIf there's an opportunity to enable some of the features, but as opt-in, that might be acceptable but also creates its own problems of potentially splitting the community.",
      "created_at": "2018-04-11T16:55:36Z",
      "updated_at": "2018-04-11T16:55:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We have a local PHP-based service. At times we have to update the versions and it is always a huge headache due to backward compatibility problems of PHP. I suppose we need to have good reasons for such a change like implementing ultra modern concepts, increasing productivity by dozens of times, supporting critical scenarios.\r\n\r\nIn any case, the question is how we need to organize a working process to gather and discuss such ideas. For example, the current discussion is simply closed.",
      "created_at": "2018-04-11T17:51:30Z",
      "updated_at": "2018-04-11T17:51:30Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "We can continue this discussion here and have separate issues to discuss other breaking changes",
      "created_at": "2018-04-11T18:10:04Z",
      "updated_at": "2018-04-11T18:10:04Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT: \r\n\r\nThanks, but just to clarify: you now want to discuss the _meta_ issue of how to handle fundamental, but breaking improvements _here_?\r\n",
      "created_at": "2018-04-11T18:20:10Z",
      "updated_at": "2018-04-11T18:23:32Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 for the meta issue, let's have a new issue and see how that goes",
      "created_at": "2018-04-11T18:32:09Z",
      "updated_at": "2018-04-11T18:32:09Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "You'd be better off using `dynamic` instead of `object` don't you think?\r\n\r\nFor what it's worth, even in _pure script_ there have been problems in the past if you have an `[object]` instead of a `[psobject]` and you try to extend said object with add-member but the extensions fall off along the way (add-member wraps the object in a psobject, but if you were holding the object at the time, messy things).  Most of these problems have been fixed -- but I'd be worried that changing parameter types would introduce a bunch of tiny edge case regressions like that.",
      "created_at": "2018-04-26T20:38:21Z",
      "updated_at": "2018-04-26T20:38:21Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT: Sounds good; please see #6745.",
      "created_at": "2018-04-26T20:38:23Z",
      "updated_at": "2018-04-26T20:38:23Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@Jaykul - there are edge cases with `add-member` around values that are shared as an optimization - e.g. string interning and the moral equivalent for some specific value type values (like `true`, `false`, common int32 values which are shared to minimize boxing).\r\n\r\nThese instances do benefit from the PSObject wrapper, though one can argue that you shouldn't add a member to such values like `true` or `false`.",
      "created_at": "2018-04-26T20:50:00Z",
      "updated_at": "2018-04-26T20:50:00Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "Delayed scriptblock binding also hinges on the distinction between object and psobject (see #6419).",
      "created_at": "2018-05-05T15:58:04Z",
      "updated_at": "2018-05-05T15:58:24Z"
    }
  ],
  "created_at": "2017-11-26T19:14:05Z",
  "labels": [
    "WG-Engine",
    "Issue-Discussion",
    "Breaking-Change"
  ],
  "number": 5551,
  "state": "open",
  "title": "Should all [psobject] cmdlet parameters be changed to [object]?",
  "updated_at": "2020-04-19T10:55:00Z"
}