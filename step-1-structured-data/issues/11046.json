{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11046",
  "author": "iSazonov",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nFix #4474\r\nFix  #6533\r\n\r\nBefore the change GetProcessorArchitecture() call Windows P/Invoke so on Unix it would throw if user loaded a module with ProcessorArchitecture value in the module manifest. Now we use ProcessorArchitecture from current assembly.\r\n\r\n## PR Context\r\n\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-01-14T03:41:20Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Do you agree to merge the PR before GA?",
      "created_at": "2019-11-14T10:00:24Z",
      "updated_at": "2019-11-14T10:00:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@adityapatwardhan Please review the PR again.\r\n\r\nAfter looking in depth how the method is used I very wonder that we implement the conversion of these two enums if we can request current value from an assembly using Reflection.\r\nOn my system `typeof(object).Assembly.GetName().ProcessorArchitecture` returns Amd64.",
      "created_at": "2019-11-15T04:56:16Z",
      "updated_at": "2019-11-15T05:04:02Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov , can you please double check that currently `GetProcessorArchitecture()` returns system-wide info and [comment on this function is wrong](https://github.com/PowerShell/PowerShell/blob/78d64664ceda59d4a6918be1842f16da38d68c7d/src/System.Management.Automation/utils/PsUtils.cs#L139)?\r\nIf that's the case, then probably to avoid future confusion:\r\n1) current `GetProcessorArchitecture()` should be renamed across the code to something like `GetSystemProcessorArchitecture()`, and comment updated;\r\n2) since the functionality of getting current process arch is also needed, code of this PR should go into `PsUtils` as a separate method like `GetCurrentProcessProcessorArchitecture()`.",
      "created_at": "2019-11-15T21:41:01Z",
      "updated_at": "2019-11-15T21:41:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@anmenaga If the name confuses you we could remove the method at all because it is used in one place/scenario. Th scenario is a module loading. We read ProcessorArchitecture parameter from the module manifest and check that we can load the module. The check is to compare the ProcessorArchitecture parameter and ProcessorArchitecture property from current assembly. And we can do this directly. I pulled the commit.",
      "created_at": "2019-11-16T10:16:43Z",
      "updated_at": "2019-11-16T10:16:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@anmenaga Please update your review.",
      "created_at": "2019-11-19T09:24:59Z",
      "updated_at": "2019-11-19T09:24:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@anmenaga Could you please continue?",
      "created_at": "2019-12-10T05:36:36Z",
      "updated_at": "2019-12-10T05:36:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT @anmenaga I think the PR could be in 7.0.",
      "created_at": "2019-12-18T07:18:50Z",
      "updated_at": "2019-12-18T07:18:50Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov can you add a test to cover https://github.com/PowerShell/PowerShell/issues/6533?",
      "created_at": "2020-01-09T17:45:44Z",
      "updated_at": "2020-01-09T17:45:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Sorry, I did not saw the issue. New tests are added.\r\n",
      "created_at": "2020-01-10T08:51:21Z",
      "updated_at": "2020-01-10T08:51:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT It seems I need help to fix tests on Unix-s. :-( I guess SMA compiled to MSIL on Unix-s. In the case I don't know how make functional tests on Unix-s.",
      "created_at": "2020-01-10T14:56:23Z",
      "updated_at": "2020-01-10T14:56:23Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov You can probably not even worry about Add-Type, the module manifest issue was at validation time when it is imported so you can just generate the module manifest with ProcessorArchitecture and it should succeed on compatible arch and fail on not-compatible arch",
      "created_at": "2020-01-10T20:14:28Z",
      "updated_at": "2020-01-10T20:14:28Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT I try to create _functional_ tests to ensure that scenario like #6533 really works. But test failures show that _perhaps_ the PR doesn't fix #6533 in general (the PR only removes broken p/invoke but do not ensure that import-module works) because Roslyn works in another way on Unix-s and probably loader too. Now I set to skip new tests on Unix-s.",
      "created_at": "2020-01-11T14:56:28Z",
      "updated_at": "2020-01-11T14:56:28Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Notice. The code was not covered by tests. Now only Windows on Intel is covered. Unix-s and Arm are not covered.",
      "created_at": "2020-01-14T03:46:19Z",
      "updated_at": "2020-01-14T03:46:19Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.0.0-rc.2` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-rc.2)\n",
      "created_at": "2020-01-16T23:37:01Z",
      "updated_at": "2020-01-16T23:37:01Z"
    }
  ],
  "created_at": "2019-11-12T14:58:33Z",
  "number": 11046,
  "state": "closed",
  "title": "Port GetProcessorArchitecture()",
  "updated_at": "2020-01-16T23:37:02Z"
}