{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13985",
  "author": "mklement0",
  "body": "Note: The root cause is the same as for #4594, which describes it in detail; the `Start-Transcript`-focused #10994 may be related too.\r\n\r\nIn short: the asynchronous behavior of implicitly applied `Format-Table` formatting (for types without explicit format data) has surprising side effects; while #4594 only describes more or less _cosmetic_ issues, there is potential _data loss_ here:\r\n\r\nIf a `throw` or `exit` statement comes before the asynchronous table output's delay has elapsed, that output as well as any subsequent output is never _displayed_.\r\n\r\nWhile this is disconcerting enough interactively, it is very problematic when output from a call to PowerShell's CLI is being _logged_.\r\n\r\n[This SO question](https://stackoverflow.com/q/64681357/45375) shows that the problem happens in real life; that question's author made the following points there:\r\n\r\n* > checking the log of an important overnight job run, key info about things happening just before an error is missing because of this bug. Also the missing info makes it look like the error occurred at a different point in the script.\r\n\r\n* > introducing an async delay seems like cheating. [...] If they really wanted to wait 300ms to sample data, that delay should occur synchronously.\r\n\r\nThe variant manifestation with `exit` was discovered in [this SO answer](https://stackoverflow.com/a/71088631/45375).\r\n\r\n## Steps to reproduce\r\n\r\nWith `throw`\r\n\r\n```powershell\r\npwsh -noprofile -c @'\r\n  'before'\r\n  [pscustomobject] @{ foo = 1 }\r\n  'after'\r\n  throw \"error\"\r\n'@\r\n```\r\n\r\nSame symptom with `exit`:\r\n\r\n```powershell\r\npwsh -noprofile -c @'\r\n  'before'\r\n  [pscustomobject] @{ foo = 1 }\r\n  'after'\r\n  exit\r\n'@\r\n```\r\n\r\n## Expected behavior\r\n\r\nAll objects output before the `throw` statement should show, `'before'`, the table-formatted custom object, and `'after'` (ditto for the `exit` variation, except for the error message):\r\n\r\n```none\r\nbefore\r\n\r\nfoo\r\n---\r\n  1\r\nafter\r\nException:\r\nLine |\r\n   4 |    throw error\r\n     |    ~~~~~~~~~~~\r\n     | ScriptHalted\r\n```\r\n\r\n## Actual behavior\r\n\r\nAll output starting with the implicitly table-formatted `[pscustomobject] @{ foo = 1 }` statement is _lost_:\r\n\r\n```none\r\nbefore\r\n\r\nException:\r\nLine |\r\n   4 |    throw error\r\n     |    ~~~~~~~~~~~\r\n     | ScriptHalted\r\n```\r\n\r\n## Environment data\r\n\r\n```none\r\nPowerShell Core 7.1.0-rc.2\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "codeulike",
      "author_association": "NONE",
      "body": "As this issue is here I'll write a little narrative about how it tripped me up. It might help make it more understandable.\r\n\r\nI had an impotant overnight job, a Powershell script kicked off by the SQL Server Agent. As its an unsupervised batch job, I'm getting it to log info to a text file so that if something goes wrong I have a trail of info to figure out what happened.\r\n\r\nAnd normally I would not expect an error to stop previous statements from writing their output. e.g with this code:\r\n```\r\nWrite-Output (\"test output 1\")\r\nWrite-Output (\"test output 2\")\r\nWrite-Output (\"test output 3\")\r\nthrow \"pretend error\"\r\n```\r\n... I know that the 'pretend error' exception wont stop the statements above from appearing in the log.\r\n\r\nUnfortunately for me, at one point in my batch job, I was collating some info into an array of objects, and then outputting those objects to the log. I was pleased to find that when you do that, Powershell outputs the object properties in a smart little table. It turns out - completely unbeknownst to me at the time - that powershell is implicitly using Format-Table to do that. And weirdly, that means the output then becomes asynchronous because a 300ms delay gets introduced. So the output kindof gets paused while my powershell script continues to execute. As I said, I had no idea at the time, and this to me seems like VERY WEIRD behaviour, for a scripting language to suddenly switch its ouput into asynchronous mode for completely opaque reasons.\r\n\r\nSo in code, I was creating an array of objects, filling in the properties and then outputing them. Something along these lines:\r\n```\r\nWrite-Output (\"test output 1\")\r\nWrite-Output (\"test output 2\")\r\nWrite-Output (\"test output 3\")\r\n$testlist = @()\r\n$count = 1\r\nWhile($count -lt 6)\r\n{\r\n    $testobj = new-object psobject -prop @{Name=\"array object $count\"}\r\n    $testlist += $testobj\r\n    $count +=1\r\n}\r\nWrite-Output $testlist \r\nWrite-Output (\"test output 4\")\r\nWrite-Output (\"test output 5\")\r\nthrow \"pretend error\"\r\n```\r\nSo if you run that little snippet, you dont see any of the output after \"test output 3\". Thats pretty bonkers. The single most important thing I want my scripting language to do is execute the statements one after the other. But in this example it goes all parallel on me for no good reason.\r\n\r\nSo in the real world this caused me a right headache because my overnight batch file was failing, but when I looked in the log the error message was appearing but the previous five or six log messages I expected to see were missing. This meant the key info I needed to interpret the error message was missing. It also made it look like the error was happening at an earlier point in the script than it really was. It was a bit of a nightmare to untangle all that.\r\n\r\nFor reference, heres the SO question that helped me get to the bottom of it all:\r\n\r\n[Write-Output of array goes missing if error thrown afterwards](https://stackoverflow.com/questions/64681357/powershell-write-output-of-array-goes-missing-if-error-thrown-afterwards)\r\n\r\n\r\n",
      "created_at": "2020-12-04T14:39:35Z",
      "updated_at": "2020-12-04T14:39:35Z"
    }
  ],
  "created_at": "2020-11-04T15:53:06Z",
  "labels": [
    "Issue-Question",
    "WG-Engine"
  ],
  "number": 13985,
  "state": "open",
  "title": "Asynchronous behavior of implicit Format-Table use can lead to data loss via the CLI",
  "updated_at": "2022-03-01T13:55:09Z"
}