{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6812",
  "author": "DarwinJS",
  "body": "Would be nice if the MSI property were more self explanatory like \"LOG_TO_EVENTLOG\"\r\n\r\nWhen I have to consult the documentation to figure out the purpose of a variable like this it feels like it does not follow \"code as documentation\" principles well enough.  But all the more so when it is a variable that users of will have absolutely no other context for (won't be looking at the code that uses it when they need to use it) - which is the case for all properties fed into MSIs because it is not easy for non-MSI packager to dissect the package to figure out the purpose and in this case it is just a condition on a custom action.",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Related PR #5999",
      "created_at": "2018-05-03T12:16:25Z",
      "updated_at": "2018-05-03T12:16:25Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "I have no objections to renaming (since the properties were only introduced in the latest preview versions) as long as the documentation issue gets updated as well:\r\nhttps://github.com/PowerShell/PowerShell-Docs/issues/2007",
      "created_at": "2018-05-03T12:30:43Z",
      "updated_at": "2018-05-03T12:30:43Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "Great!  I am also thinking that for MSI properties the same principle should be followed in new properties.\r\n\r\nObviously ADD_EXPLORER_CONTEXT_MENU_OPENPOWERSHELL - is an excellent example of contextless self-documenting naming!",
      "created_at": "2018-05-03T12:38:42Z",
      "updated_at": "2018-05-03T12:38:42Z"
    },
    {
      "author": "Robo210",
      "author_association": "CONTRIBUTOR",
      "body": "REGISTER_MANIFEST is actually more self-explanatory for what this process actually does than LOG_TO_EVENTLOG. The instrumentation manifest is an ETW thing, **not** an Event Log thing, and \"register\" is the ETW terminology for passing off a set of data about your events to the system (register your provider with EventRegister(), register your manifest with wevtutil.exe, etc.).\r\n\r\nRegistering the manifest allows any ETW consumer to enable the provider by looking up the name and/or decode any events logged by this provider through the TDH APIs. It just so happens that the Event Log is an (not _the_) ETW consumer (in addition to its older logging APIs), and the service reflects your <channel> elements in the manifest into its own Event Log channels, but that's really just a side-effect of registering the manifest.",
      "created_at": "2018-05-30T07:41:11Z",
      "updated_at": "2018-05-30T07:41:11Z"
    }
  ],
  "created_at": "2018-05-03T12:13:56Z",
  "labels": [
    "Area-Maintainers-Build"
  ],
  "number": 6812,
  "state": "open",
  "title": "Rename or add alias property for \"REGISTER_MANIFEST\"",
  "updated_at": "2018-05-30T07:41:11Z"
}