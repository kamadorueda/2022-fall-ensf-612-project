{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3767",
  "author": "Cryowatt",
  "body": "Steps to reproduce\r\n------------------\r\nCreate a Powershell DSC configuration like this:\r\n```\r\nConfiguration MyConfig {\r\n    Node localhost {\r\n        File \"Foo\" {\r\n            DestinationPath = \"C:\\Temp\\Foo.txt\"\r\n            Contents = \"Foo\"\r\n        }\r\n    }\r\n}\r\n```\r\nWhen you execute the configuration you'll end up with this error:\r\n> WARNING: The configuration 'MyConfig' is loading one or more built-in resources without explicitly importing associated modules. Add Import-DscResource \u2013ModuleName 'PSDesiredStateConfiguration' to your configuration to avoid this message.\r\n\r\nThe given syntax isn't `-ModuleName`, it's `\u2013ModuleName`. Look closely, that's not a hyphen (0x2D), that's an en dash (0x2013). If you copy and paste that back into [some powershell hosts] it's not going to like it.\r\n\r\n\r\n\r\nExpected behavior\r\n-----------------\r\nHyphens\r\n\r\nActual behavior\r\n---------------\r\nEn dashes\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.14393.953\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.14393.953\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> if you copy and paste that back into powershell it's not going to like it.\r\n\r\nSurprisingly, it _is_ going to like it. \r\n\r\nUnlike most other languages, PowerShell actually _mostly_ recognizes (non-ASCII) Unicode whitespace and punctuation:\r\n\r\nTake the following command, for instance:\r\n\r\n```powershell\r\nWrite-Host\u00a0\u2013NoNewline\u00a0\u201c$HOME\u201d\u00a0\u2018literal\u2019\r\n```\r\n\r\nWith the exception of the hyphen in `Write-Host`, the whitespace and punctuation characters above are non-ASCII - including an en dash  before `NoNewline` - yet it works:\r\n\r\n* in the console / terminal\r\n\r\n* in a script, assuming its file is UTF-8 _with BOM_ (on Unix, the BOM is now optional)\r\n\r\nI'm unclear on the exact rules and mapping, however.\r\n\r\nThe above suggests that at least _command names_ only work if you spell them exactly as defined (case differences aside).   \r\nWhile probably ill-advised, you _could_ define a function/script with en-dash for instance, in which you'd also have to invoke with an en-dash.\r\n\r\n",
      "created_at": "2017-05-12T01:46:53Z",
      "updated_at": "2017-05-12T01:54:23Z"
    },
    {
      "author": "Cryowatt",
      "author_association": "NONE",
      "body": "Well I guess I should have tested in it a regular console window, but it seems that the loose Unicode handling is a host-specific thing as this definitely did not work in a VSCode embeded powershell terminal.",
      "created_at": "2017-05-12T02:06:28Z",
      "updated_at": "2017-05-12T02:06:28Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Actually, it does work in VSCode's PowerShell terminal, and it should work anywhere the Unicode encoding is preserved - but that perhaps points to the reason to better stick with ASCII: things may get lost in translation (transcoding)...",
      "created_at": "2017-05-12T02:12:15Z",
      "updated_at": "2017-05-12T02:12:15Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@Cryowatt, could you please change the title to prevent confusion? It's not about invalid syntax, it's about unexpected use of (non-ASCII) Unicode punctuation.",
      "created_at": "2017-05-12T14:01:52Z",
      "updated_at": "2017-05-12T14:01:52Z"
    },
    {
      "author": "BenJTucker",
      "author_association": "NONE",
      "body": "+1 for this. powershell didn't like it on my machine, in vscode.\r\n\r\nThe failure condition is *really* weird too, with powershell complaining about unterminated quotes on the last line with double quotes in it.\r\n\r\nFwiw, this sure looks like invalid syntax to my environment.",
      "created_at": "2019-05-09T14:52:42Z",
      "updated_at": "2019-05-09T14:52:42Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@BenJTucker \r\n\r\nThat suggests that your file is UTF-8 _without a BOM_, which is a general problem you should address, because Windows PowerShell will misinterpret all non-ASCII-range characters in your file.\r\nIn other words: your problem is an improperly encoded file, not the use of a en en-dash in lieu of a hyphen in the command.\r\n\r\nWith a properly encoded file, you can copy the command from the error message - `Import-DscResource \u2013ModuleName 'PSDesiredStateConfiguration'` as-is, and it will work.\r\n\r\nThat en-dashes also work in the integrated VS Code terminal can be verified by copying and pasting the following command, which should work: `get-date \u2013year 42`\r\n",
      "created_at": "2019-05-09T15:26:43Z",
      "updated_at": "2019-05-09T15:26:43Z"
    },
    {
      "author": "BenJTucker",
      "author_association": "NONE",
      "body": "I had a working script and I pasted in literally what the error message told me to. Then I had a broken script.",
      "created_at": "2019-05-09T15:31:56Z",
      "updated_at": "2019-05-09T15:31:56Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Indeed. Point being that PS itself should use errors that use the correct, unambiguous characters to avoid as many issues for the user as possible. Encoding is something that commonly has to be dealt with, but preferably we should avoid having to worry about encoding while handling what an error message has given us verbatim.",
      "created_at": "2019-05-09T15:35:05Z",
      "updated_at": "2019-05-09T15:35:05Z"
    },
    {
      "author": "Cryowatt",
      "author_association": "NONE",
      "body": "https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_command_syntax?view=powershell-6#parameters states that\r\n> In a PowerShell command, parameter names always begin with a hyphen. The hyphen tells PowerShell that the item in the command is a parameter name.\r\n\r\nIt doesn't say that parameter names can start with whatever horizontal line you feel like at the time.",
      "created_at": "2019-05-09T15:37:16Z",
      "updated_at": "2019-05-09T15:37:38Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah. PS does attempt to parse other types of horizontal dash to make one's life easier, just like it tries to parse fancy quotes that MS Word and Outlook like to convert things into without asking. \r\n\r\nUnfortunately, with how encodings sometimes trip things up, it can't work 100% of the time.",
      "created_at": "2019-05-09T15:48:45Z",
      "updated_at": "2019-05-09T15:49:28Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Agreed, @vexx32 - it's worth switching to a hyphen.\r\n\r\nThat said, the error message isn't part of _this_ repo, and it looks to me that the DSC code may not have been open-sourced (yet?), so the correct place to report this issue is https://windowsserver.uservoice.com/forums/301869-powershell?category_id=148047\r\n\r\n---\r\n\r\n\r\n_Separately_, it's important to understand the true issue here, and the true issue is one of character encoding. A lack of awareness of that can cause other problems down the line.\r\n\r\n@Cryowatt: Whether it's documented or not, PowerShell _does_ support this substitution, as it does with other punctuation and quote characters, as @vexx32 mentions - see [this Stack Overflow answer](https://stackoverflow.com/a/55053609/45375) for details.\r\n\r\n@BenJTucker: \r\nYour script will only work as long as it contains only characters in the ASCII range (7-bit, code points `0` through `127`), because both UTF-8 and ANSI encodings (the default in Windows PowerShell) share that range.\r\n\r\nWhile you may have no plans to use non-ASCII-range characters, know that saving your scripts as UTF-8 _without BOM_ will cause Windows PowerShell to misinterpret them as ANSI-encoded, once you add a non-ASCII-range character - and as you've experienced, that can happen through copy and paste.\r\n\r\nThe best cross-edition and cross-platform choice of encoding is UTF-8 _with BOM_.\r\nVS Code defaults to UTF-8 _without BOM_, which generally makes sense, but causes problems with Windows PowerShell (but not PowerShell _Core_).\r\n\r\nLack of API support has so far prevented the PowerShell extension for VS Code from defaulting new PowerShell files to UTF-8 _with BOM_ - see [this issue](https://github.com/PowerShell/vscode-powershell/issues/1771), which also shows how you can _manually_ configure VS Code that way.\r\n\r\n",
      "created_at": "2019-05-09T16:14:03Z",
      "updated_at": "2019-05-09T17:47:11Z"
    }
  ],
  "created_at": "2017-05-11T22:52:29Z",
  "labels": [
    "Issue-Discussion",
    "Area-DSC"
  ],
  "number": 3767,
  "state": "open",
  "title": "Explicitly importing associated modules error message contains invalid syntax",
  "updated_at": "2019-05-09T17:47:11Z"
}