{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14474",
  "author": "Ba4bes",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\nNot sure if this is a bug or if I just don't understand the behavior:\r\nYou start with an array with objects in them.\r\nYou assign a variable for one of these objects.\r\nWhen you change that object, the original array is changed as well.\r\n\r\n## Steps to reproduce\r\n\r\nExample1:\r\n```powershell\r\n# Set up an array with two objects in it\r\n$SourceArray = @(\r\n    [PSCustomObject]@{\r\n        Name = \"Value1\"\r\n        property1 = \"blieb\"\r\n        property2 = \"blaab\"\r\n        property3 = \"bloeb\"\r\n    }\r\n    [PSCustomObject]@{\r\n        Name = \"Value2\"\r\n        property1 = \"blieb\"\r\n        property2 = \"blaab\"\r\n        property3 = \"bloeb\"\r\n    }\r\n)\r\n\r\n# Create a variable based on an object in the array\r\n$IssueObject = $SourceArray[0]\r\n# Add a member to the object\r\n$IssueObject | Add-Member -MemberType NoteProperty -Name \"ExtraProperty\" -Value \"blaib\" -Force\r\n# So we have the object with an extra property\r\n$IssueObject\r\n\r\n# Now if we call the same object from the source array,\r\n# I wouldn't expect an extra member, as I created a new variable for the changed object\r\n$sourcearray[0]\r\n# Turns out the object in the variable has changed as well??\r\n\r\n\r\n# Looking further: Let's create the variable again but add | select-object *\r\n$IssueObject = $sourcearray[1]  | Select-Object *\r\n# Do the same thing as before\r\n$IssueObject | Add-Member -MemberType NoteProperty -Name \"ExtraProperty\" -Value \"blaib\" -Force\r\n$IssueObject \r\n\r\n# Call the object form the array again\r\n$SourceArray[1]\r\n# And results are as expected: without the extra member.\r\n```\r\n\r\nExample2 (run as admin to reproduce):\r\n```powershell\r\n\r\n# Collect all the services in an array\r\n$Services = Get-Service\r\n\r\n# Collect the status of the time service\r\n$Services | Where-Object {$_.Name -eq \"W32Time\"}\r\n\r\n# Save the Time service in a new variable\r\n$Time = $Services | Where-Object {$_.Name -eq \"W32Time\"}\r\n\r\n# Start the time service (or stop if it was already started)\r\n$Time | Start-Service\r\n\r\n# The time service is now running. But I did not touch the Services variable.\r\n# So I would expect the status in the Services Variable to still be Stopped.\r\n# But it now comes back as running...\r\n$Services | Where-Object {$_.Name -eq \"W32Time\"}\r\n\r\n```\r\n\r\n## Expected behavior\r\n\r\nI would expect the array to change when I define a new variable to work with. I would also not expect a difference when Select-Object is used.\r\n\r\n## Actual behavior\r\n\r\n![image](https://user-images.githubusercontent.com/43912004/102776314-d0a7b180-438e-11eb-88fc-6f712246702b.png)\r\n\r\n\r\n## Environment data\r\nTested on multiple devices (all Windows), on PowerShell 7.1.0, 7.2.0 as well as Windows PowerShell\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.0\r\nPSEdition                      Core\r\nGitCommitId                    7.1.0\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0-preview.2\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0-preview.2\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n",
  "closed_at": "2020-12-21T20:57:22Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "In short: The behavior is by design.\r\n\r\nAlso, unless you're reasonably sure that you've found a problem with PowerShell itself, please don't post here and use one of the following resources instead, at least until you're sure you've found an actual problem: \r\n\r\n* The [Slack](https://join.slack.com/t/powershell/shared_invite/enQtMzA3MDcxNTM5MTkxLTBmMWIyNzhkYzVjNGRiOTgxZmFlN2E0ZmVmOWU5NDczNTY2NDFhZjFlZTM1MTZiMWIzZDcwMGYzNjQ3YTRkNWM) and [Discord](https://discordapp.com/invite/AtzXnJM) community chat forums (they seamless talk to each other).\r\n \r\n* Q&A site [StackOverflow.com](https://stackoverflow.com/questions/tagged/powershell) and the [PowerShell.org](https://powershell.org/forums/) forum for searching or posting questions about PowerShell.\r\n\r\n---\r\n\r\nRe example 1:\r\n\r\n* After assignment `$IssueObject = $SourceArray[0]`, both `$IssueObject` and `$SourceArray[0]` by design point to the very same `[pscustomobject]` instance.\r\n\r\n* Creating a new variable is not the same as creating a _copy_ of the RHS value - that only applies to .NET _value types_, whereas `[pscustomobject]` is an instance of a _reference type_.\r\n   * See [this Stack Overflow answer](https://stackoverflow.com/a/45071111/45375) for more information.\r\n\r\n* To create a (shallow) copy of a `[pscustomobject]` instance, call its `.psobject.Copy()` method.\r\n\r\n* `Select-Object`, when used with `-Property` (positionally implied) always creates a _new_ (`[pscustomobject]`) instance (except if `-ExpandProperty` is passed), but note that `Select-Object *` with an `[pscustomobject]` input isn't always the same as calling `.psobject.Copy()` on that input, because only _properties_ are copied; also, the new object reports its type name as `Selected.System.Management.Automation.PSCustomObject`.\r\n\r\nNote that both methods of copying properties create _shallow_ copies, which means the property values are copied as-is, so that again you get _data copies_ for value-type instances and _reference copies_ for reference-type instances.\r\n\r\nThere is no general mechanism for _deep_ copying (cloning), though individual types may implement one.\r\n\r\nRe example 2:\r\n\r\nWhat `Get-Service` outputs are so-called _live objects_ (of type [`System.ServiceProcess.ServiceController`](https://docs.microsoft.com/en-US/dotnet/api/System.ServiceProcess.ServiceController)) . \r\nThat is, their properties reflect the _current state_ of the resource being pointed to instead of taking a _snapshot_ of the state.\r\n\r\nIt is up to each type to implement one behavior or the other, and this aspect is independent of the question of when a copy of the actual data vs. a reference to the same object is created.\r\n\r\nAn easy way to get a snapshot of a service-info object is to use `Select-Object *` to create a `[pscustomobject]` whose properties then contain _static_ copies of those properties in the original that are _calculated properties_ (properties whose value is determined dynamically, on very access) - but note that for non-calculated properties whose values happen to be instance of reference types you'll again get copies of the _references_.\r\n\r\n",
      "created_at": "2020-12-21T14:03:50Z",
      "updated_at": "2020-12-21T14:03:50Z"
    },
    {
      "author": "alexandair",
      "author_association": "CONTRIBUTOR",
      "body": "@mklement0 This is a perfect place to ask this kind of question. If you don't like it, ignore it. Please, it's not on you to tell anyone to post somewhere else.",
      "created_at": "2020-12-21T16:40:19Z",
      "updated_at": "2020-12-22T00:22:11Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@alexandair:\r\n\r\n* It isn't the perfect place to ask such questions, for the reasons stated - and as also reflected in the types of issue templates offered when you create an issue (bug reports, feature request, ...).\r\n\r\n* Someone who has questions such as this one is far better served by asking them in the communities that I linked - the likelihood of getting a satisfying answer is much greater there (even though in this particular case I (hopefully) happen to have provided one here).\r\n\r\nOr did I miss a decision to turn this into a general-purpose PowerShell support forum?\r\n\r\nI don't think so, but even if I did, I think that would be a mistake, as it would generate far too much noise for a repository focused on fixing bugs and developing new features.\r\n\r\nAs a community, we should have clarity on what does and doesn't belong here - unfortunately, the bug-report template doesn't do a good job of communicating that - despite having a very obvious _name_: _bug report_.\r\n\r\nThe very opening statement of this issue, \"Not sure if this is a bug or if I just don't understand the behavior\" is an indication that _conceptual clarity should be sought first_ before reporting something as a bug, and sites like Stack Overflow are the perfect place for that.\r\n\r\nYou seem to think of this as _dismissing_ the OP, I think of it as _helpful guidance_.\r\n\r\nUnless I hear convincing arguments to the contrary or see an official decision that general support questions are now acceptable, I will continue to provide this type of guidance.\r\n\r\nUnless you want to engage in an actual _discussion_ of the issue, I suggest you take your own advice: \"if you don't like, ignore it\".\r\n\r\n\r\n",
      "created_at": "2020-12-21T19:09:56Z",
      "updated_at": "2020-12-21T19:09:56Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> * It isn't the perfect place to ask such questions, for the reasons stated - and as also reflected in the types of issue templates offered when you create an issue (bug reports, feature request, ...).\r\n\r\nThat's more for \"how do I do X\". OP thought they found might have found a bug, that's good enough here. Won't be many folks reporting bugs if we require them to know for certain it's actually a bug before posting.\r\n\r\n> You seem to think of this as _dismissing_ the OP, I think of it as _helpful guidance_.\r\n\r\nI'm sure you didn't intend it to, but your original reply does read a bit like you're annoyed.  Even if you are, leaving that in usually just incites defensive replies. Also if you're going to answer anyway there's not a whole lot of point in mentioning it.",
      "created_at": "2020-12-21T19:53:09Z",
      "updated_at": "2020-12-21T19:53:09Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> Also if you're going to answer anyway there's not a whole lot of point in mentioning it.\r\n\r\nThe point is to extend a courtesy _this time_ - given that the issue has already been posted - as well as to provide guidance _for the future_.\r\n\r\n> I'm sure you didn't intend it to, but your original reply does read a bit like you're annoyed.\r\n\r\nIndeed I didn't intend to, and I can't take responsibility for that interpretation: It needed saying (see below) and it provided helpful information (unless you disagree that the places I linked to are good places for asking such questions).\r\n\r\n> OP thought they found might have found a bug\r\n\r\nThat's a _formal_ criterion that is too easily satisfied.\r\n\r\nWhile there are ultimately no hard and fast rules, the _specific nature_ of this issue suggests an unfamiliarity with fundamental .NET concepts, and I hope we can agree that:\r\n\r\n* This isn't the place to teach them.\r\n* Issues of this type could end up _ignored_ here, for that reason ...\r\n* ... unlike on platforms such as Stack Overflow - hence the recommendation to ask there.\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2020-12-21T20:05:55Z",
      "updated_at": "2020-12-21T20:05:55Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Indeed I didn't intend to, and I can't take responsibility for that interpretation: It needed saying (see below) and it provided helpful information (unless you disagree that the places I linked to are good places for asking such questions).\r\n\r\nWe're all responsible for how we're interpreted.  Unless you're specifically looking for conflict, putting some effort into less aggressive wording would be advisable.\r\n\r\n> That's a _formal_ criterion that is too easily satisfied.\r\n\r\nAnd that's great!\r\n\r\n> While there are ultimately no hard and fast rules, the _specific nature_ of this issue suggests an unfamiliarity with fundamental .NET concepts, and I hope we can agree that:\r\n\r\nThat's right, like the vast majority of the PowerShell community. Bug reporting shouldn't be gate kept, it's already hard enough to get folks to report things.",
      "created_at": "2020-12-21T20:21:06Z",
      "updated_at": "2020-12-21T20:21:06Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": ">  We're all responsible for how we're interpreted. \r\n\r\nOnly to a degree. If someone wants to take offense, they will.\r\n\r\n> putting some effort into less aggressive wording would be advisable.\r\n\r\nCommendable, and certainly something I strive for in general.\r\n\r\nRe-reading my original comment, I could have done better in this case.\r\nI can only hope that my having taken the time to answer the question with care (as a one-time courtesy) served to indicate that I was well-intentioned.\r\n\r\n>  And that's great!\r\n>  shouldn't be gate kept,\r\n\r\nIt isn't great, and mistaking _proper guidance_  for gate-keeping is unfortunate.\r\n\r\nWhat I think would be helpful, _to everyone involved_, is to communicate the following clearly, as part of the bug-report template (an earlier version had something like it, but it was taken out):\r\n\r\n---\r\n\r\n* If you're seeing behavior that deviates from the intended behavior, as documented, report it here.\r\n \r\n* If you're not sure what the intended behavior is or you have questions about PowerShell in general, please seek help from the community via the following forums:\r\n  * The [Slack](https://join.slack.com/t/powershell/shared_invite/enQtMzA3MDcxNTM5MTkxLTBmMWIyNzhkYzVjNGRiOTgxZmFlN2E0ZmVmOWU5NDczNTY2NDFhZjFlZTM1MTZiMWIzZDcwMGYzNjQ3YTRkNWM) and [Discord](https://discordapp.com/invite/AtzXnJM) community chat forums (they seamless talk to each other).\r\n \r\n  * Q&A site [StackOverflow.com](https://stackoverflow.com/questions/tagged/powershell) and the [PowerShell.org](https://powershell.org/forums/) forum for searching or posting questions about PowerShell.\r\n\r\n",
      "created_at": "2020-12-21T20:33:41Z",
      "updated_at": "2020-12-21T20:50:18Z"
    },
    {
      "author": "Ba4bes",
      "author_association": "NONE",
      "body": "Ok, few responses:\r\n\r\n- The explanation and provided link is very clear, thank you for that.\r\n- The recommendation did feel a bit reprimanding and I'm glad that was cleared up.\r\n- I posted here as I thought this could be a bug, or at least unwanted behavior. I personally find this very counter-intuitive. The two examples here came from two different people who were as confused as I was. So even if it isn't a bug, I thought it was useful to be mentioned here as behavior that raises questions.\r\n\r\nAs my wondering has been cleared up I will close this issue, thank you all for your responses",
      "created_at": "2020-12-21T20:57:22Z",
      "updated_at": "2020-12-21T20:57:22Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the feedback, @Ba4bes - point re feeling reprimanded taken; glad to hear the information was helpful.\r\n\r\nAs for providing better guidance via the bug-report template: I've created a PR at https://github.com/PowerShell/PowerShell/pull/14479.\r\n",
      "created_at": "2020-12-21T21:30:08Z",
      "updated_at": "2020-12-21T21:30:08Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I agree with @SeeminglyScience that OP posted what they thought was unexpected behavior, so open an issue (if one doesn't already exist) is the right thing.  I appreciate @mklement0 responding with correct information and pointers.  In general, we are considering enabling GitHub Discussions for general type of discussions not specific to the code of this project, but we won't get to that til next year.\r\n\r\nOn the internet where all you see is text and no body language, sometimes one may presume the worst, but many times I find that was not the intent (which is clear in this case by @mklement0's response later in the thread).  Overall, it looks like everything worked out and I appreciate the discussion.",
      "created_at": "2020-12-22T00:11:21Z",
      "updated_at": "2020-12-22T00:11:21Z"
    }
  ],
  "created_at": "2020-12-21T12:28:13Z",
  "labels": [
    "Issue-Question"
  ],
  "number": 14474,
  "state": "closed",
  "title": "Array changes when object taken from array gets changed",
  "updated_at": "2020-12-22T00:22:11Z"
}