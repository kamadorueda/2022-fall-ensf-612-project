{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6454",
  "author": "mklement0",
  "body": "Note: \r\n* The behavior described below has been in place since [member enumeration](https://blogs.msdn.microsoft.com/powershell/2012/06/13/new-v3-language-features/) was introduced in v3 and only affects _array-valued_ properties.\r\n* The behavior may well be by design, but given that it can be surprising, it may need to be _documented_.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n# Create an object whose .prop value is an array of hashtables, only one of \r\n# which as a .subProp entry whose value is a single-element array, then\r\n# access .subProp via member enumeration.\r\n$obj=[pscustomobject] @{ prop = @{foo='foo'}, @{subProp=,1}}; ($obj.prop.subProp).GetType().Name\r\n\r\n# Create two 2-element arrays and let member enumeration collect them.\r\n$obj=[pscustomobject] @{prop = @{subProp=1,2}, @{subProp=3,4}}; $obj.prop.subProp.Count\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nInt32\r\n4\r\n```\r\n\r\nThe single-element array was _unwrapped_.\r\nThe two 2-element arrays were _concatenated_ (rather than collected as-is in a 2-element array).\r\n\r\n\r\nAlternative behavior\r\n-----------------\r\n\r\nOne _could_ expect the following behavior, and contrasting it with the actual behavior is worth documenting:\r\n\r\n```none\r\nObject[]\r\n2\r\n```\r\n\r\nThe value of the properties could have been passed through, just as with _direct_ property access (e.g., `$obj.prop[-1].subProp`):\r\n\r\n* In the first case: `, 1` may be expected, but `1` is returned.\r\n  * Note that it's fine not to wrap `, 1` in an _outer_ array if only _one_ collection element's property value is found, because that is consistent with pipeline behavior.\r\n* In the second case: `(1, 2), (3, 4)` may be expected, but `1, 2, 3, 4` is returned (the equivalent of `(1, 2) + (3, 4)`)\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.0.2 on macOS 10.13.3\r\nPowerShell Core v6.0.2 on Ubuntu 16.04.3 LTS\r\nPowerShell Core v6.0.2 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\nWindows PowerShell v5.1.15063.674 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\n```\r\n",
  "closed_at": "2018-03-21T21:13:13Z",
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Per the linked document `$obj.prop.subProp` is equivalent to `$obj.prop | foreach subProp` and so the individual member collections get flattened as expected. Here is a simplified example:\r\n```\r\nPS[1] (67) > ( @{a=1, 2} , @{a=3, 4} ).a\r\n1\r\n2\r\n3\r\n4\r\n```\r\nNote that this behavior is currently documented in about_Properties. Do you think additional exposition is required?",
      "created_at": "2018-03-21T20:36:37Z",
      "updated_at": "2018-03-21T20:36:37Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@BrucePay: \r\n\r\nThanks for pointing that out. The `$obj.prop | foreach-object subProp` analogy indeed is a good explanation of the behavior (`( @{a=1, 2} , @{a=3, 4} ).a.Count` yielding `4`  rather than `2`).\r\n\r\nI also wasn't aware that `about_Properties` already talks about member enumeration, thanks.\r\n\r\nHowever, the linked page is a 6-year-old blog post, and  `about_Properties` does _not_ discuss the flattening:\r\n\r\n> PowerShell returns the value of that property for every object in the collection.\r\n\r\nThat phrasing could easily lead one to expect the alternative behavior.\r\n\r\nTherefore, **I suggest amending `about_Properties`** [update: created [this doc issue](https://github.com/PowerShell/PowerShell-Docs/issues/2198)]:\r\n\r\n* by adding the `$obj.prop | foreach-object subProp` analogy to it.\r\n\r\n* mentioning the feature's _name_:  \"member enumeration\", assuming that should be the official term; it always helps to have a name for a feature.\r\n",
      "created_at": "2018-03-21T20:58:15Z",
      "updated_at": "2018-03-21T21:13:04Z"
    }
  ],
  "created_at": "2018-03-21T19:49:54Z",
  "number": 6454,
  "state": "closed",
  "title": "Member enumeration unwraps and flattens array-valued properties",
  "updated_at": "2018-03-24T17:22:36Z"
}