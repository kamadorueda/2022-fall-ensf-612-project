{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8868",
  "author": "TravisEz13",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->  \r\n\r\n## PR Summary\r\n\r\nSplit Windows CI into the following Jobs\r\n\r\n1. Combine Build and xUnit, which published build artifact\r\n1. Elevated CI tests\r\n1. Unelevated CI test\r\n1. Elevated everything else tests\r\n1. Unelevated everything else tests\r\n1. Package build and test\r\n1. Verify xUnit result\r\n\r\n## PR Context  \r\n\r\nBefore this test:\r\n\r\n- A CI run would take ~14 minutes\r\n- A Feature run would take ~30 minutes\r\n\r\nAfter this change, it always runs all tests and takes ~20 minutes.\r\nJob `Unelevated everything else tests` is the long poll, taking ~4 minutes longer than the next shortest job.  We should be able to get this back down to ~15 if we split that test job somehow.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.  \r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**  \r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [ ] [Add `[feature]` to your commit messages if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2019-02-15T00:33:20Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> We should be able to get this back down to ~15 if we split that test job somehow.\r\n\r\nBy projects?",
      "created_at": "2019-02-12T06:06:07Z",
      "updated_at": "2019-02-12T06:06:07Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@iSazonov \tI don't want to design the solution right now.  By project, would be a possibility, but optimally, we should try to find a way that makes sense and divides the time close to evenly.  \r\n\r\nI think our first goal would be to do a similar refactoring of the non-windows CI system.",
      "created_at": "2019-02-12T17:16:15Z",
      "updated_at": "2019-02-12T17:16:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13 Why we do not select Build in a separate job to use the result for the rest jobs?\r\n\r\nAlso perhaps we could use [strategy-matrix](https://docs.microsoft.com/en-us/azure/devops/pipelines/get-started-multiplatform?view=azure-devops#add-additional-platforms) to unify process.\r\n\r\n",
      "created_at": "2019-02-13T06:29:17Z",
      "updated_at": "2019-02-13T18:09:38Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@iSazonov \tReview the change.  We do the build as a separate job and use the results (artifacts) for the rest of the jobs.\r\n\r\nMatrix is less flexible that designing the pipeline yourself.  We would not be able to do the build is a separate job and use the artifacts for the rest of the jobs.\r\n\r\nUsing templates gets you all the advantages of a matrix (not having to restate the job multiple times, only declare how many times you want to run it), with the added ability to depend on previous jobs.",
      "created_at": "2019-02-13T18:07:29Z",
      "updated_at": "2019-02-13T18:09:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13 Thanks for clarify! I see now how this works.\r\n\r\nFor reference Setting up parallel jobs, Slicing the test suite\r\nhttps://docs.microsoft.com/en-us/azure/devops/pipelines/test/parallel-testing-any-test-runner?view=azure-devops#setting-up-parallel-jobs\r\n\r\n",
      "created_at": "2019-02-14T03:57:27Z",
      "updated_at": "2019-02-14T03:57:27Z"
    }
  ],
  "created_at": "2019-02-12T01:32:55Z",
  "number": 8868,
  "state": "closed",
  "title": "Parallelize the windows CI to enable us to run all tests all the time",
  "updated_at": "2019-02-27T21:26:12Z"
}