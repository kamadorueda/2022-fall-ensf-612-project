{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2147",
  "author": "sitano",
  "body": "Under certain environment, PSVersion of 5.0.10586.117, Write-Host redirected with *>>1 writes `InformationRecord` structure representation of the message into a file instead of a message itself.\n\nThe bug does not show up under lower versions (no in 4.0, 3.0).\n\nWhen I run the script manually it works fine. It reproduces only when Consul executes it with Win32 API. I did not investigate further environment differences.\n## Steps to reproduce\n\nWe use pretty complicated setup. I don't know how to reproduce it.\n- We have Consul running run.bat as healthcheck\n- run.bat runs powershell sessions with run.ps1\n- run.ps1 run external scripts redirecting all logs to a file append\n\nRun.bat have:\n\n``` batch\n:: run.bat\n\n@ECHO OFF\nPowerShell.exe -NoProfile -NonInteractive -ExecutionPolicy Bypass -Command \"& %~dpn0.ps1\" %*\nEXIT /B %errorlevel%\n```\n\nRun.ps1 partly looks like:\n\n``` powershell\nfunction Run($WrappedCmd, $BoundParameters, $LogFile, $InputObject) {\n        $runspacepool = [runspacefactory]::CreateRunspacePool(1, 1, $SessionState, $Host)\n        $runspacepool.Open()  \n\n        # $executor will be taken by parent context closure\n        $ps = [powershell]::Create().AddScript('\n            param($WrappedCmd, $BoundParameters, $LogFile, $InputObject)\n\n            $Response = 0\n            # Catch Response via Closure boundaries (ignoring full redirect of pipe)\n            function Foo {\n                Param(\n                    [parameter(ValueFromPipeline)]\n                    $InputObject)\n\n                Begin {}\n                Process { \n                    Set-Variable -Name \"Response\" -Value $_ -Scope 1; $_ \n                }\n                End {}\n            }\n\n            try {\n                $Executor = {\n                    try {\n                        Write-Host \"Hi\"                 \n                    } catch {\n                        Write-Error-Detailed -E $_\n                        throw $_\n                    }\n                }\n\n                if ($LogFile) {\n                    # <output> stream redirected as well. thus, it will handle only exceptions\n                    # auto converting them to Error Code (2).\n                    (& $Executor | Foo) *>> $LogFile\n                    return $Response\n                } else {\n                    & $Executor\n                }\n            } catch {   \n                # $_ was pushed on top of $error, printed by $Executor\n                return $_\n            } finally {}\n            ').AddArgument($WrappedCmd).AddArgument($BoundParameters).AddArgument($LogFile)\n\n        if ($PSBoundParameters.ContainsKey(\"InputObject\")) {\n            $ps = $ps.AddArgument($InputObject)\n        }\n\n        $ps.RunspacePool = $runspacepool\n\n        try {        \n            $async = $ps.BeginInvoke()            \n            $async.AsyncWaitHandle.WaitOne($ScriptTimeout, $false) | Out-Null\n            if (-not $async.IsCompleted) {            \n                $ps.Stop()\n\n                Write-Host \"Script run out of time...\"\n                if ($LogFile) {\n                    Write-Output \"Script run out of time...\" *>> $LogFile\n                }                \n\n                Write-Output $TimeoutErrorCode\n            } else {\n                Write-Output $ps.EndInvoke($async)\n            }\n        } catch {\n            Write-Output 2\n        } finally {\n            $ps.Dispose()\n            $runspacepool.Close()\n        }    \n    }\n```\n\nthis run in complicated setup of pipelined function, which in its turn used as `$inpud | run thing`\n## Expected behavior\n\n```\n$ cat FILE\n```\n\nmust contain\n\n```\nHi\n```\n## Actual behavior\n\nResult file contains\n\n```\nWriteInformationStream : True\nMessageData            : Hi\nSource                 : Write-Host\nTimeGenerated          : 8/31/2016 3:13:16 PM\nTags                   : {PSHOST}\nUser                   : NT AUTHORITY\\SYSTEM\nComputer               : slmon....com\nProcessId              : 2144\nNativeThreadId         : 3180\nManagedThreadId        : 12\n```\n## Environment data\n\n``` powershell\n> $ [System.Environment]::OSVersion\n\nPlatform ServicePack Version    VersionString\n-------- ----------- -------    -------------\n Win32NT             6.3.9600.0 Microsoft Windows NT 6.3.9600.0\n```\n\n``` powershell\n> $PSVersionTable\nName                           Value\n----                           -----\nPSVersion                      5.0.10586.117\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\nBuildVersion                   10.0.10586.117\nCLRVersion                     4.0.30319.42000\nWSManStackVersion              3.0\nPSRemotingProtocolVersion      2.3\nSerializationVersion           1.1.0.1\n```\n",
  "closed_at": null,
  "comments": [
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Tried to repro it without success. Maybe you can find a simplified repro?\n",
      "created_at": "2016-09-01T03:27:13Z",
      "updated_at": "2016-09-01T03:27:28Z"
    },
    {
      "author": "sitano",
      "author_association": "NONE",
      "body": "I can't do it either manually, but when it ran by the consul it behaves that way. I did not investigate it any further yet. The same code version and consul and windows and etc works well on other servers, so I supposed it correlates to the PS version. Still, unsure.\n\nI thought, maybe someone with a knowledge of the codebase, will came up with an idea, how InformationRecord struct can appear out of Write-Host in redirected io?\n",
      "created_at": "2016-09-01T06:24:23Z",
      "updated_at": "2016-09-01T06:27:04Z"
    },
    {
      "author": "mwallner",
      "author_association": "NONE",
      "body": "Same here, **_can reproduce_** @vors - in 32 Bit PowerShell only.\r\n\r\n```\r\nPS E:\\> Write-Host \"foo\" 6>&1\r\n\r\nWriteInformationStream : True\r\nMessageData            : foo\r\nSource                 : Write-Host\r\nTimeGenerated          : 08.03.2017 10:24:49\r\nTags                   : {PSHOST}\r\nUser                   : .......\r\nComputer               : ......\r\nProcessId              : 27156\r\nNativeThreadId         : 13480\r\nManagedThreadId        : 7\r\n```\r\n![image](https://cloud.githubusercontent.com/assets/5354972/23697883/c3bcfaf4-03e9-11e7-8d09-d889c76e14c3.png)\r\n\r\nPowerShell version is\r\n```\r\nPS E:\\> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.0.10586.117\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.10586.117\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n\r\n```\r\n",
      "created_at": "2017-03-08T09:18:15Z",
      "updated_at": "2017-03-08T09:27:05Z"
    },
    {
      "author": "stknohg",
      "author_association": "CONTRIBUTOR",
      "body": "Hi.  \r\nI could reproduce this problem in 32 bit PowerShell 5.0 on Windows Server 2012 R2.  \r\nUpgrading to PowerShell 5.1, I solved this problem.\r\n\r\n## PowerShell 5.0\r\n\r\n```powershell\r\nPS C:\\Users\\Administrator> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.0.10586.117\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.10586.117\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n\r\nPS C:\\Users\\Administrator> Write-Host \"foo\" 6>&1\r\n\r\nWriteInformationStream : True\r\nMessageData            : foo\r\nSource                 : Write-Host\r\nTimeGenerated          : 2017/12/01 9:18:10\r\nTags                   : {PSHOST}\r\nUser                   : WIN-O64OASLM0GD\\Administrator\r\nComputer               : WIN-O64OASLM0GD\r\nProcessId              : 2956\r\nNativeThreadId         : 2428\r\nManagedThreadId        : 7\r\n```\r\n\r\n## PowerShell 5.0 to 5.1\r\n\r\n```powershell\r\nPS C:\\Users\\Administrator> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.14409.1005\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.14409.1005\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n\r\nPS C:\\Users\\Administrator> Write-Host \"foo\" 6>&1\r\nfoo\r\n```",
      "created_at": "2017-12-01T03:27:46Z",
      "updated_at": "2017-12-01T03:27:46Z"
    }
  ],
  "created_at": "2016-08-31T15:35:59Z",
  "number": 2147,
  "state": "open",
  "title": "Write-Host *>>1 full IO redirect results in printing `InformationRecord` into a file under certain env",
  "updated_at": "2017-12-01T03:27:46Z"
}