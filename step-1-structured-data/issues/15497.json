{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15497",
  "author": "tsmarvin",
  "body": "I believe there is a bug with `Get-ChildItem` for pwsh v7.1.3 on Ubuntu 20.04 (WSL2) when using the  `-exclude` and `-include` parameters in conjunction with the ` -Path '/'` parameter/argument combo.\r\n\r\nThis seems primarily be limited to `Get-ChildItem -Path '/'` as both `-LiteralPath '/'` and `-PSPath (Get-Item -Path '/').PSPath` return the data as expected when used with either `-exclude` or `-include`.\r\n\r\nAdditionally using `-exclude` and `-path` together works for directories outside `/`. However, I believe there may be another bug when using `-Path` and `-Include` other places as well.\r\n\r\n## Steps to reproduce\r\n### Get-ChildItem -Path '/' -Exclude 'mnt'\r\n```powershell\r\n# Bad:\r\nGet-ChildItem -Path '/' -Exclude 'mnt'\r\n\r\n# Aligns with expected behavior:\r\nGet-ChildItem -Path '/mnt' -Exclude 'c'\r\nGet-ChildItem -LiteralPath '/' -Exclude 'mnt'\r\nGet-ChildItem -PSPath (Get-Item -Path '/').PSPath -Exclude 'mnt'\r\n```\r\n![image](https://user-images.githubusercontent.com/57049894/120273996-159c1200-c264-11eb-8cdd-4b9e197159bb.png)\r\n\r\n### Get-ChildItem -Path '/' -Include 'mnt'\r\n```powershell\r\n# Bad:\r\nGet-ChildItem -Path '/' -Include 'mnt' # Produces error\r\nGet-ChildItem -Path '/mnt' -Include 'c' # Produces no output when output is expected.\r\n\r\n# Aligns with expected behavior:\r\nGet-ChildItem -LiteralPath '/' -Include 'mnt'\r\nGet-ChildItem -LiteralPath '/mnt' -Include 'c'\r\nGet-ChildItem -PSPath (Get-Item -Path '/').PSPath -Include 'mnt'\r\nGet-ChildItem -PSPath (Get-Item -Path '/mnt').PSPath -Include 'c'\r\n```\r\n![image](https://user-images.githubusercontent.com/57049894/120274513-d0c4ab00-c264-11eb-9226-be96d91de85b.png)\r\n\r\nI'm unsure if the behavior of `-Include` deserves its own bug report but would be happy to split it up if needed.\r\n\r\n## Environment data\r\n![image](https://user-images.githubusercontent.com/57049894/120271372-1468e600-c260-11eb-8ae7-ede2bb105b9d.png)\r\n\r\n```plaintext\r\nStackTrace:\r\n   at Microsoft.PowerShell.Commands.FileSystemProvider.GetChildName(String path) in /PowerShell/src/System.Management.Automation/namespaces/FileSystemProvider.cs:line 5683\r\n   at System.Management.Automation.Provider.NavigationCmdletProvider.GetChildName(String path, CmdletProviderContext context) in /PowerShell/src/System.Management.Automation/namespaces/NavigationProviderBase.cs:line 174\r\n   at System.Management.Automation.LocationGlobber.ExpandMshGlobPath(String path, Boolean allowNonexistingPaths, PSDriveInfo drive, ContainerCmdletProvider provider, CmdletProviderContext context) in /PowerShell/src/System.Management.Automation/namespaces/LocationGlobber.cs:line 2763\r\n   at System.Management.Automation.LocationGlobber.ResolveDriveQualifiedPath(String path, CmdletProviderContext context, Boolean allowNonexistingPaths, CmdletProvider& providerInstance) in /PowerShell/src/System.Management.Automation/namespaces/LocationGlobber.cs:line 516\r\n   at System.Management.Automation.LocationGlobber.GetGlobbedMonadPathsFromMonadPath(String path, Boolean allowNonexistingPaths, CmdletProviderContext context, CmdletProvider& providerInstance) in /PowerShell/src/System.Management.Automation/namespaces/LocationGlobber.cs:line 218\r\n   at System.Management.Automation.LocationGlobber.GetGlobbedProviderPathsFromMonadPath(String path, Boolean allowNonexistingPaths, CmdletProviderContext context, ProviderInfo& provider, CmdletProvider& providerInstance) in /PowerShell/src/System.Management.Automation/namespaces/LocationGlobber.cs:line 779\r\n   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context) in /PowerShell/src/System.Management.Automation/engine/SessionStateContainer.cs:line 1393\r\n   at System.Management.Automation.ChildItemCmdletProviderIntrinsics.Get(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context) in /PowerShell/src/System.Management.Automation/engine/ChildrenCmdletProviderInterfaces.cs:line 278\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord() in /PowerShell/src/Microsoft.PowerShell.Commands.Management/commands/management/GetChildrenCommand.cs:line 318\r\n   at System.Management.Automation.Cmdlet.DoProcessRecord() in /PowerShell/src/System.Management.Automation/engine/cmdlet.cs:line 173\r\n   at System.Management.Automation.CommandProcessor.ProcessRecord() in /PowerShell/src/System.Management.Automation/engine/CommandProcessor.cs:line 388\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I guess it is dup #3304",
      "created_at": "2021-06-01T11:59:55Z",
      "updated_at": "2021-06-01T11:59:55Z"
    },
    {
      "author": "ninmonkey",
      "author_association": "NONE",
      "body": "@tsmarvin What do you get running these?\r\n\r\n```ps1\r\n> Resolve-Path /\r\n\r\n# and\r\n> set-location -LiteralPath '/'\r\n> Get-ChildItem -path '/'\r\n```\r\n\r\nMaybe it's related to to windows root paths. The syntax `c:` refers to the current directory, **not** the root directory.\r\n\r\n## Output\r\n\r\ncurrent path: `D:\\test`\r\n| PathParam | FullName           |\r\n| --------- | ------------------ |\r\n| .         | D:\\test\\image.png  |\r\n| c:        | C:\\Temp\\export.tsv |\r\n| c:\\       | C:\\a.log           |\r\n| d:        | D:\\test\\image.png  |\r\n| d:\\       | D:\\stuff.md        |\r\n\r\n## To reproduce\r\n\r\n```ps1\r\n# Ensure both drives have a non-root `cwd` set before testing\r\nSet-Location -Path C:\\Temp\\\r\nSet-Location -Path D:\\test\\\r\n\r\n'current path: '\r\nSet-Location cd 'D:\\test\\'\r\nGet-Item . | ForEach-Object FullName\r\n\r\n$paths = '.', 'c:', 'c:\\', 'd:','d:\\'\r\n$paths | ForEach-Object {\r\n    $p = Get-ChildItem -File -Path $_ | Select-Object -First 1 | ForEach-Object FullName\r\n    [pscustomobject]@{\r\n       'PathParam' = $_\r\n       'FullName' = $p\r\n    }\r\n}\r\n```",
      "created_at": "2021-06-01T17:10:30Z",
      "updated_at": "2021-06-01T17:17:48Z"
    },
    {
      "author": "tsmarvin",
      "author_association": "NONE",
      "body": "Apologies - its been a busy week and I haven't had time to get back to this until now. \r\n\r\n@ninmonkey The behavior seems to be consistent between both windows and linux. The main difference is that linux returns an error for `Get-ChildItem -Path '/' -exclude 'mnt'` but windows does not.\r\n\r\nWindows: \r\n![image](https://user-images.githubusercontent.com/57049894/120938089-0c78ce00-c6c6-11eb-8f31-afa3923702f7.png)\r\n\r\nLinux: \r\n![image](https://user-images.githubusercontent.com/57049894/120938340-0b946c00-c6c7-11eb-9498-6c8848eb04f6.png)\r\n\r\n\r\n@iSazonov I'm unsure if this issue is the same as [#3304](https://github.com/PowerShell/PowerShell/issues/3304) as the exclude/include behavior for this issue is inconsistent between the root directories and non-root directories but 3304 seems to be more about the implicit wildcard for include/exclude.\r\nAlso - for this particular issue Linux now throws an error where Windows does not.",
      "created_at": "2021-06-06T20:07:10Z",
      "updated_at": "2021-06-06T20:07:10Z"
    }
  ],
  "created_at": "2021-06-01T06:18:45Z",
  "labels": [
    "Issue-Bug",
    "WG-Cmdlets-Management",
    "WG-Engine-Providers",
    "Needs-Triage",
    "Area-FileSystem-Provider"
  ],
  "number": 15497,
  "state": "open",
  "title": "Get-ChildItem -path '/' breaks -exclude or -include parameters",
  "updated_at": "2021-11-30T06:26:37Z"
}