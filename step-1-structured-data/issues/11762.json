{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11762",
  "author": "p0W3RH311",
  "body": "### steps to reproduce\r\n\r\nto import from testmodule module only **get-testmodule** and **set-testmodule** in lexical scope\r\n\r\n```\r\nusing module testmodule import get-testmodule,set-testmodule \r\n\r\n$a = get-testmodule \r\n```\r\n\r\n**export-modulemember** is great but suppose if module not contains **export-modulemember** ",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You could use `Import-Module -Cmdlet get-testmodule,set-testmodule `",
      "created_at": "2020-02-04T05:25:20Z",
      "updated_at": "2020-02-04T05:25:20Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Indeed, @iSazonov, but I can see how having the same ability in the context of the - generally preferable - `using module` statement would be helpful, if only to signal explicitly what commands are being used.\r\n\r\nHowever, to fully mirror `Import-Module`, we'd either have to mirror the individual `-Cmdlet`, `-Function`, `-Alias` and `-Variable` parameters - which could get syntactically awkward - or assume that exported member names are unique across member _types_ (which is a sensible assumption).\r\n\r\nEither way, note that neither a selectively importing `Import-Module` nor a `using module` would necessarily _prevent availability_ of those members that _aren't_ explicitly imported:\r\n\r\n* If someone else has previously imported the same module (non-selectively, in the same scope domain), all exported members would already be available (though `Import-Module -Force -Cmdlet...` could override that; `using module` has no force-reloading option).\r\n\r\n* For auto-loading modules, referencing not explicitly imported members still imports them on demand.\r\n\r\n\r\n",
      "created_at": "2020-02-04T16:59:54Z",
      "updated_at": "2020-02-04T16:59:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">  if only to signal explicitly what commands are being used\r\n\r\nIt seems this could be only achieved:\r\n- by module manifest\r\n- by JEA",
      "created_at": "2020-02-04T17:40:15Z",
      "updated_at": "2020-02-04T17:40:15Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov, this issue is about _voluntarily_ selecting only a _subset_ of a given module's exported members _at import time_, so module manifests and JEA don't apply.\r\n\r\nBy \"signal\" I meant \"signal to the human reader\", because, as discussed in my previous comment, you cannot reliably ensure that the scope trying to do a selective `using module` won't see _all_ exported members nonetheless.\r\n\r\nNote that there's no _lexical_ scoping with modules (as there generally isn't in PowerShell).\r\n`using module` invariably imports scope-domain-wide, only with `Import-Module -Scope` do you get _some_ control, but the scoping is always _dynamic_.\r\n\r\nIn short:\r\n\r\n* `Import-Module` already supports selective importing (`-Cmdlet`, `-Function`, ...); there's a case to be made that `using module` should support the same.\r\n\r\n* In both cases, non-import of the non-selected members cannot be _guaranteed_: it only works if no other code in the same scope domain imports the same module (non-selectively), and never with auto-loading modules. As such, at least without lexical scoping support, selective importing is primarily a (self-documenting) signal of _intent_ rather than something _enforced by the engine_.",
      "created_at": "2020-02-04T20:40:49Z",
      "updated_at": "2020-02-04T20:40:49Z"
    }
  ],
  "created_at": "2020-02-03T19:16:30Z",
  "number": 11762,
  "state": "open",
  "title": "add import statement to import specified command in the session",
  "updated_at": "2020-02-04T20:40:49Z"
}