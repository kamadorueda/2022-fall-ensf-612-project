{
  "_url": "https://github.com/PowerShell/PowerShell/issues/572",
  "author": "andschwa",
  "body": "Add cross-platform `Start-PSBuild` and `Start-PSPackage` commands to the `PowerShellGitHubDev` module. The former replaces `build.ps1` (which can soon be deleted) and `build.sh` (which cannot be deleted until we have a package available for Travis). The latter will build a `deb` package on Ubuntu 14.04, and a `pkg` on OS X (Windows MSI is not supported; will need help with that).\n\nDuring development, a `package.sh` was written for each platform, and I have retained this history on purpose so that those who can't yet self-host can build a package. Packaging uses the awesome tool [fpm](https://github.com/jordansissel/fpm) to get up and running quickly. I believe it satisfies our current requirements.\n\nPending merge and a separate review for documentation updates, I'd like to release version 0.1.0 with packages for both supported platforms.\n\nNote that this PR includes #568, because self-hosting necessitates at least a somewhat improved user experience.\n\nThe module still works on FullCLR, and AppVeyor has been updated to use it explicitly. @vors I believe we could merge `build.FullCLR.ps1` in as well.\n\nFunctions that should later be added to the module include replacements for `pester.sh`, `xunit.sh`, `omibuild.sh`, and `psrp.sh`. We should not remove these scripts until all developers are comfortable self-hosting PowerShell for building.\n",
  "closed_at": "2016-02-22T23:12:04Z",
  "comments": [
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "So this change makes a build of PS require an installed version of PS?\nIt looks like an unnecessary complication.\n\nIt's not a problem on Windows, where you have inbox version.\n\nI would suggest use something besides build script to embrace self-hosting.\nWell, in fact everything else :)\n",
      "created_at": "2016-02-22T09:12:53Z",
      "updated_at": "2016-02-22T09:12:53Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@vors It does not make it a requirement, it makes it an option. PowerShell ended up being much easier to script in a cross platform manner than Bash, _and_ extends that to Windows. I'll upload packages for Ubuntu and OS X today.\n\nThe build system was the best target for PowerShell conversion IMO as it requires Windows/OS X/Linux code, must of which can be deduplicated.\n\nWe can keep the other scripts around, but I think a lot of us will prefer just keeping a prompt with PowerShell (from the package) open.\n",
      "created_at": "2016-02-22T17:07:13Z",
      "updated_at": "2016-02-22T17:07:13Z"
    },
    {
      "author": "zach-folwick",
      "author_association": "CONTRIBUTOR",
      "body": "\" It does not make it a requirement, it makes it an option.\"\n\n@andschwa, @vors  - would it make sense to add a batch script to the product to build PSH from command prompt in windows?  Is there a use case?  What about a \"broken powershell\" (and the user runs this to re-build PSH)?\n\nEDIT: might be a future item and not for this PR\n",
      "created_at": "2016-02-22T17:14:11Z",
      "updated_at": "2016-02-22T17:17:21Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "No script whatsoever (PowerShell script/module or bash scripts) is a requirement to build PowerShell. The scripts are just helpers to run a set of commands from a documented process. Copy and paste the commands from the readme (or the script) if all else fails.\n\nThere is no need to worry about not being able to build without PowerShell on any system.\n",
      "created_at": "2016-02-22T17:20:57Z",
      "updated_at": "2016-02-22T17:20:57Z"
    },
    {
      "author": "zach-folwick",
      "author_association": "CONTRIBUTOR",
      "body": "\"Copy and paste the commands from the readme (or the script) if all else fails.\"\n\nThen in that case, if a user has a messed up powershell, then they likely have bigger issues.  This looks like a good way for users to update/upgrade powershell if they want \"new cross-platform powershell\", and it looks like a good recovery tool should some aspect of powershell be not working, or users would like to run something equivalent to \"apt-get update; apt-get upgrade\".\n\nApproved :+1 (See caveats): \n",
      "created_at": "2016-02-22T17:24:33Z",
      "updated_at": "2016-02-22T18:23:16Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "ok, sounds fine.\n\nI would keep `build.sh` around.\n\nWhat about homebrew receipt for ps?\n\n@zach-folwick: on windows it's unlikely that anybody would replace inbox version by any dev version (still some people do), so there is no need to have a build script in batch.\n",
      "created_at": "2016-02-22T21:39:50Z",
      "updated_at": "2016-02-22T21:39:50Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "We _have_ to keep to `build.sh` around, as Travis needs it :smile: \n\nA homebrew recipe would be great, but `fpm` is not suited to homebrew as it is a build-from-source package manager, not a package installer. I totally want to write one, but not until we've gone public.\n\nI'm having trouble with PowerShell on Linux not wanting to let subprocesses exit...\n",
      "created_at": "2016-02-22T21:43:57Z",
      "updated_at": "2016-02-22T21:43:57Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Due to a bug in .NET Core, the build function hangs on Linux (well, the execution of `cmake` when it waits on a subprocess it then executes hangs), but works on OS X. See dotnet/coreclr#3304 for fix.\n\nMerging as our code isn't broken.\n",
      "created_at": "2016-02-22T23:11:49Z",
      "updated_at": "2016-02-22T23:11:49Z"
    }
  ],
  "created_at": "2016-02-22T01:50:01Z",
  "number": 572,
  "state": "closed",
  "title": "Enable self-hosting",
  "updated_at": "2016-02-22T23:12:08Z"
}