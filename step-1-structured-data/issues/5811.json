{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5811",
  "author": "alx9r",
  "body": "Steps to reproduce\r\n------------------\r\n\r\n```powershell\r\ndo { \r\n    1..10 | \r\n        % { if ($_ -gt 2) { break }; $_ } | \r\n        Sort-Object -Descending\r\n } while ($false)\r\n\r\ndo {\r\n    % { foreach ( $i in 100..110 ) { $i } } | \r\n    % { if ($_ -gt 102) { break }; $_ } | \r\n    Sort-Object -Descending\r\n} while ($false)\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nEither no output or\r\n```none\r\n2\r\n1\r\n0\r\n102\r\n101\r\n100\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\n102\r\n101\r\n100\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value                                            \r\n----                           -----                                            \r\nPSVersion                      6.0.0-rc.2                                       \r\nPSEdition                      Core                                             \r\nGitCommitId                    v6.0.0-rc.2                                      \r\nOS                             Microsoft Windows 6.3.9600                       \r\nPlatform                       Win32NT                                          \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                          \r\nPSRemotingProtocolVersion      2.3                                              \r\nSerializationVersion           1.1.0.1                                          \r\nWSManStackVersion              3.0                                              \r\n```\r\n",
  "closed_at": "2018-01-08T18:50:13Z",
  "comments": [
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "This arose while trying to reproduce the examples in #3821.",
      "created_at": "2018-01-07T18:56:25Z",
      "updated_at": "2018-01-07T18:56:25Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I don't have an explanation, but the issue is related to using `%` (`ForEach-Object`) at the _start_ of the pipeline.\r\n\r\nIf you replace the initial `% {... }` with `$(...)` - which is the more idiomatic way to start a pipeline with an expression - the problem goes away (yields no output, as expected, because `Sort-Object`'s end block doesn't get to run):\r\n\r\n```pwsh\r\ndo {\r\n  $(foreach ( $i in 100..110 ) { $i }) |   # Use $(...) rather than % {...}\r\n  % { if ($_ -gt 102) { break }; $_ } | \r\n  Sort-Object -Descending\r\n} while ($false)\r\n```\r\n\r\nStill, it would be good to have an explanation for your symptom.",
      "created_at": "2018-01-08T10:07:08Z",
      "updated_at": "2018-01-08T10:07:08Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "@izybkr wrote this in [#3897 (comment)](https://github.com/PowerShell/PowerShell/issues/3879#issuecomment-304940545):\r\n\r\n>`break` and `continue` work dynamically - meaning the `break`/`continue` statement searches for an appropriate loop to break from at runtime.\r\n>...\r\n>Under the covers, the `break` turns into an exception (always V2 or earlier, V3 onwards if not lexically within a loop statement), the exception is always silent (because you don't really want to think of `break` as an exception, so it's silent even if we don't find a matching loop.\r\n\r\nBy that reasoning, I _think_ \r\n\r\n```PowerShell\r\ndo { \r\n    1..10 | \r\n        % { if ($_ -gt 2) { break }; $_ } | \r\n        Sort-Object -Descending\r\n } while ($false)\r\n```\r\n\r\noutputs nothing because the \"exception\" thrown by `break` is not caught until it reaches the `do{}` which is the first loop encountered.  That loop is outside the pipeline, so flow of control continues outside the pipeline and `end{}` doesn't run.  On the other hand I _think_ in\r\n```PowerShell\r\ndo {\r\n    % { foreach ( $i in 100..110 ) { $i } } | \r\n    % { if ($_ -gt 102) { break }; $_ } | \r\n    Sort-Object -Descending\r\n} while ($false)\r\n```\r\n\r\nthe first loop encountered by the \"exception\" thrown by `break` is `foreach{}`, so flow of control continues at the closing `}` of the `foreach` and the pipeline continues as usual from there.\r\n\r\n@lzybkr Is this right?",
      "created_at": "2018-01-08T17:32:53Z",
      "updated_at": "2018-01-08T17:32:53Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@alx9r - your understanding is correct.\r\n\r\nNote that you could have used `&` instead of `%` in the first stage of the pipeline and gotten the same result - the key is to ensure the `foreach` loop statement has not completed before hitting the `break` statement. As @mklement0 points out, `$()` would fully execute the loop before writing anything to the pipeline.",
      "created_at": "2018-01-08T17:46:46Z",
      "updated_at": "2018-01-08T17:46:46Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "This all makes sense to me now and seems to match the behavior I'm seeing.  Thank you @lzybkr.",
      "created_at": "2018-01-08T18:50:13Z",
      "updated_at": "2018-01-08T18:50:13Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I hadn't even considered the execute-in-full-first aspect - good to know that `& { ... }` - as opposed to `$(...)` - can send an expression-based statement's output to the pipeline as it is being produced.\r\n  ",
      "created_at": "2018-01-08T21:29:56Z",
      "updated_at": "2018-01-09T00:52:52Z"
    }
  ],
  "created_at": "2018-01-07T18:50:59Z",
  "number": 5811,
  "state": "closed",
  "title": "break in the pipeline: Why does End run in some cases and not in others?",
  "updated_at": "2018-02-08T07:17:23Z"
}