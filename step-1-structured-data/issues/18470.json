{
  "_url": "https://github.com/PowerShell/PowerShell/issues/18470",
  "author": "tapika",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nLet's start from overview.\r\n\r\nTo query version about running operating system, it's possible to use two approaches:\r\n\r\n```\r\n1.\r\nImport-Module Microsoft.PowerShell.Management\r\n$wmiOS = Get-WmiObject -Class Win32_OperatingSystem\r\n\r\n2.\r\nImport-Module CimCmdlets\r\n$wmiOS = Get-CimInstance -ClassName Win32_OperatingSystem\r\n```\r\n\r\nWhere 1 is considered as older interface, and 2 is available for newer powershell. (I will come to reason why I'm mixing those two shortly, stay tuned).\r\n\r\n- In my own [choco fork](https://github.com/tapika/swupd) (for now in develop branch, maybe later on will move into it's own branch) I'm using as a primary platform .net core 3.1, and powershell sdk 7.x.\r\n\r\n- As target OS I'm using older windows - for example for now I'm trying out how things will work in Windows 7 x64 (professional / sp1), where as powershell there is 2.0 version. \r\n\r\n- I'm using `ReadyToRun` build, which allows newer code to run on older windows.\r\n\r\nTarget windows may vary - windows 7 was just a test machine, I think my primary goal will be windows 8.1 - but it would be also good to identify what kind of restrictions there are on windows 7,\r\n\r\nAs a [package references](https://github.com/tapika/swupd/blob/e266786661767b6ec5c59c6c6de56d7cdb70044e/src/chocolatey/chocolatey.csproj#L66) I'm using:\r\n\r\n```\r\n    <PackageReference Include=\"Microsoft.PowerShell.SDK\" Version=\"7.0.6\" GeneratePathProperty=\"true\" />\r\n    <PackageReference Include=\"Microsoft.Management.Infrastructure.Runtime.Win\" Version=\"2.0.0\" GeneratePathProperty=\"true\" />\r\n    <PackageReference Include=\"System.Management.Automation\" Version=\"7.0.6\" />\r\n```\r\n\r\nUsing approach 2 does not work - results in `\"ERROR: FAILED\"`\r\n\r\nImage can be taken from [releases, beta choco.exe](https://github.com/tapika/swupd/releases) or built by yourself using command `cakebuild --build true --r2r_targets choco --os win7 --r2r_build`.\r\n\r\nTest command line which can be used is for example: \r\n`choco install kb3035131` or with debug `choco install kb3035131 --debug`.\r\n\r\n(You can adjust referred .ps1 files later on after failure if you want to test concept)\r\n\r\nWhich according to https://github.com/PowerShell/PowerShell/issues/11454\r\n\r\n> SteveL-MSFT commented on Jan 9, 2020\r\n> 6.1 is Windows 7 which requires WMF since WMI that is included with WIndows 7 is too old \r\n> to support the CIM cmdlets. The install instructions indicate WMF4 (or newer, 5.1 preferred) is required for Win7.\r\n\r\nFor information - \r\n\r\nhttps://www.microsoft.com/en-us/download/details.aspx?id=54616\r\n\r\nWindows Management Framework 5.1\r\n\r\nis it's own framework with it's own installation.\r\n\r\nBased on my own knowledge - powershell scripts typically wants to know OS version maybe with additional `-Filter` command. \r\n(See also [Get-WmiObject wrapper](https://github.com/tapika/swupd/blob/e266786661767b6ec5c59c6c6de56d7cdb70044e/src/chocolatey.resources/helpers/functions/PowerShellNonCoreCompatibility.ps1) )\r\n\r\nUsing approach 1 does not work either.\r\n\r\nResult in error.\r\n\r\n```\r\nERROR: The term 'Get-WmiObject' is not recognized as the name of a cmdlet, funct ion, script file, or operable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n```\r\n\r\nPlease note that powershell version 2.0 is hosted inside newer powershell 7.0.6 (coming from .net core 3.1) - see debug line:\r\n\r\n```\r\nHost version is 2.0, PowerShell Version is '7.0.6' and CLR Version is ''.\r\n```\r\n\r\nJust to make sure - issue is not this one: https://github.com/PowerShell/PowerShell/issues/2777\r\n\r\nYou can go into folder `%TEMP%\\.net\\choco\\` (that's where ReadyToRun extract's it's own files) - and see by yourself that `api-ms-win-core-processthreads-l1-1-*.dll` - -0, -1, -2 versions are included.\r\n\r\nWhat is interesting about powershell support for windows 7 - it seems to be supported (See also [this link](https://github.com/tapika/swupd/blob/e266786661767b6ec5c59c6c6de56d7cdb70044e/src/chocolatey/chocolatey.csproj#L87) ) - but I guess `Get-CimInstance` cannot be supported out of box. \r\n\r\nCan you recommend any walkaround or any approach how to solve this puzzle.\r\n\r\nPlease notice that choco posesses it's own [host control](https://github.com/tapika/swupd/blob/e266786661767b6ec5c59c6c6de56d7cdb70044e/src/chocolatey/infrastructure/powershell/PoshHost.cs) - so in theory anything can be done.\r\n\r\nI'm also wondering if it's possible just to use latest version of powershell - but then just wire whatever is needed underneath. \r\n\r\n\r\n### Expected behavior\r\n\r\n```console\r\nSolution proposed\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nFailure when using powershell via ReadyToRun.\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nSee description.\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "tapika",
      "author_association": "NONE",
      "body": "Hmm... It's possible that in similar manner to `https://github.com/dotnet/runtime/issues/77953` - so windows update is applied and after that also `Get-CimInstance` would work out of box, assuming that WPF 4.0 is installed at least. \r\n\r\nIf it's mandatory update in windows.",
      "created_at": "2022-11-07T17:25:19Z",
      "updated_at": "2022-11-07T17:25:19Z"
    }
  ],
  "created_at": "2022-11-05T07:38:42Z",
  "labels": [
    "WG-DevEx-SDK",
    "Needs-Triage"
  ],
  "number": 18470,
  "state": "open",
  "title": "ReadyToRun + Get-WmiObject or Get-CimInstance",
  "updated_at": "2022-11-07T17:25:19Z"
}