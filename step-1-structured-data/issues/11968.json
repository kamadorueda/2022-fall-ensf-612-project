{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11968",
  "author": "KirkMunro",
  "body": "# Summary of the new feature/enhancement\r\n\r\nAs a scripter,\r\nI want to be able to use Start-Job from within a C# application that hosts PowerShell\r\nso that I can start background jobs easily when it is appropriate to do so.\r\n\r\nAs a scripter,\r\nI want to be able to use Start-Job to start a background job in a specific version of PowerShell\r\nso that I can control the type of background job that is run.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nToday if you invoke Start-Job from a C# application that hosts PowerShell, you may be presented with an error message that states the following:\r\n\r\n```none\r\n   System.Management.Automation.CmdletInvocationException : The pwsh executable cannot be found at \"C:\\myApplicationPath\\pwsh.exe\".\r\nNote that 'Start-Job' is not supported by design in scenarios where PowerShell is being hosted in other applications. Instead, usage of the 'ThreadJob' module is recommended in such scenarios.\r\n```\r\n\r\nThis \"by design\" limitation is necessary because there are scenarios where you simply do not have access to the PowerShell executable that is required to launch a background job; however, the error message is misleading, because it can occur in in environments where you do have full access to the PowerShell executable that is required to launch a background job. In those scenarios, the error shows up simply because the executable is not in the same location as the process that is running, and the logic internal to `Start-Job` isn't looking for it elsewhere.\r\n\r\nTo correct this, the following enhancements should be considered for `Start-Job`:\r\n\r\n1. If `Start-Job` is invoked from an application other than `pwsh.exe`, it should internally look for `pwsh.exe` using command discovery. If it finds the executable, then it should start the job using that executable.\r\n1. `Start-Job` should have a `-PSExecutable` parameter of type `string` that accepts a path to a PowerShell executable. If this parameter is supplied as part of the invocation of `Start-Job`, `Start-Job` will attempt to start the job using that executable in place of anything else.\r\n\r\n~In addition, `Start-Job` has two parameters that are a parameter that is no longer supported today: `-RunAs32` and `-PSVersion`. Both of those apply for Windows PowerShell only. Someone (@SteveL-MSFT or the committee) needs to decide if these need to be kept around (they only produce errors right now) or if they can be removed. I'd prefer them be removed -- better to catch use of them early and report errors that clearly indicate they are not supported than to leave them kicking around.~\r\n\r\nUpdate that reflects what @SteveL-MSFT explained below:\r\nIn addition, `Start-Job` has a `-RunAs32` parameter that is no longer supported today. `-RunAs32` would be supported by providing a path to the the 32-bit version of the executable in the new `-PSExecutable` parameter, so `-RunAs32` could be deprecated as part of that change.",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "For discovering `pwsh` executable, it can just rely on command discovery.  If it's already cached, it'll be pretty quick.  `-RunAs32` usage would be replaced by specifying a path to the x86 exe.  `-PSVersion` actually works.  You can use `Start-Job` from PS7 and specify `-PSVersion 5.1` to have the job start with powershell.exe.",
      "created_at": "2020-02-27T18:22:35Z",
      "updated_at": "2020-02-27T18:22:35Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "When `Start-Job` requires `pwsh` to work, I think it should check for the version of `pwsh` as part of the command discovery, and only automatically works when the version matches the powershell sdk used in the hosting application. Otherwise, it should fail and require `-PSExecutable` to be explicitly specified. This will make the script execution more predictable.",
      "created_at": "2020-05-11T17:20:10Z",
      "updated_at": "2020-05-11T17:20:10Z"
    },
    {
      "author": "ALIENQuake",
      "author_association": "NONE",
      "body": "@KirkMunro Can you tell a bit more about the 'deployment context' of the application that hosts PowerShell specific version? Are you deploying the application into the Windows machines which do not have Powershell 7 or even 5.1 (win 7, 8, 2008, 2012)?",
      "created_at": "2020-05-26T10:13:37Z",
      "updated_at": "2020-05-26T10:13:37Z"
    },
    {
      "author": "jmiller76",
      "author_association": "NONE",
      "body": "I wanted to do something like:\r\n`Start-Job  { [System.Environment]::Is64BitProcess } -Runas32  -PSVersion 5.1`\r\nfrom 7.0.x and Id expect it to see 5.1 and RunAs32 and start the SysWow64 PowerShell.  Instead it tells me that I don't have 32bit pwsh 7 installed\r\n\r\nIs this really the same \"Find the right, exe\" with a different use case or would this be considered a different issue, as the two switch behave counterintuitive. \r\n\r\nId happily, specify the 32bit PowerShell 5.1 as the workaround.",
      "created_at": "2020-06-15T18:45:16Z",
      "updated_at": "2020-06-15T18:45:16Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@ALIENQuake: Cloud-based invocations. CI/CD using Pester in Azure DevOps. Places where you do not directly manage the infrastructure where you are running.",
      "created_at": "2020-06-16T12:00:57Z",
      "updated_at": "2020-06-16T12:00:57Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "> When `Start-Job` requires `pwsh` to work, I think it should check for the version of `pwsh` as part of the command discovery, and only automatically works when the version matches the powershell sdk used in the hosting application. Otherwise, it should fail and require `-PSExecutable` to be explicitly specified. This will make the script execution more predictable.\r\n\r\n@daxian-dbw: Can you explain this a little bit more? If I build an application using https://www.nuget.org/packages/Microsoft.PowerShell.SDK/7.0.3, and then later that application is installed on a system that has PowerShell 7.1 installed, are you indicating that `Start-Job` should fail and require `-PSExecutable` in that scenario? If so, why? I can understand for downlevel versions, but uplevel versions should be backwards compatible, so I would expect that to just work.\n\n<blockquote><img src=\"https://api.nuget.org/v3-flatcontainer/microsoft.powershell.sdk/7.0.3/icon\" width=\"48\" align=\"right\"><div><strong><a href=\"https://www.nuget.org/packages/Microsoft.PowerShell.SDK/\">Microsoft.PowerShell.SDK 7.0.3</a></strong></div><div>Runtime for hosting PowerShell</div></blockquote>",
      "created_at": "2020-09-23T19:09:52Z",
      "updated_at": "2020-09-23T19:09:54Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "Related to this, it's very annoying that `Start-Job -PSVersion 5.1` on a linux PWSH system doesn't throw an error saying 5.1 is not available, but instead happily runs on 7, causing the user to get a false result if they expected this to run on 5.1",
      "created_at": "2021-06-07T06:08:50Z",
      "updated_at": "2021-06-07T06:08:50Z"
    }
  ],
  "created_at": "2020-02-27T18:04:23Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets-Core"
  ],
  "number": 11968,
  "state": "open",
  "title": "Start-Job needs better discovery/support for pwsh.exe (and possibly powershell.exe)",
  "updated_at": "2021-06-07T06:08:50Z"
}