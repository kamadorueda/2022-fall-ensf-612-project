{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13853",
  "author": "hbouzieh",
  "body": "\r\n\r\n## Steps to reproduce\r\n\r\n\u2022\tInstall PowerShell Core on an Azure RedHat 7 Virtual Machine. (able to repro on different versions of rhel/CentOS)\r\n\u2022\tLogin to the guest OS from Azure Serial Console.\r\n\u2022\tType \u201cpwsh\u201d to start a PowerShell session, and press enter.\r\n\u2022\tType in any letter, then the PowerShell session will crash with the below error: \r\no\tProcess terminated. The value must be greater than or equal to zero and less than the console's buffer size in that dimension. (Parameter 'top')\r\n\r\n---------------------------------------------------------\r\n## Expected behavior\r\n\r\n\u2022\tTo be able to able to use PowerShell from Azure Serial Console with no issues. \r\n \r\n---------------------------------------------------------\r\n\r\n## Actual behavior\r\n\r\n\u2022\tWe are able to use the PowerShell Module through \u201cPutty, Luminate, etc.. \u201d with no issues.\r\n\u2022\tHowever, Over the Serial Console, when trying to use the PowerShell Module, it crashes with the below error: \r\no\tProcess terminated. The value must be greater than or equal to zero and less than the console's buffer size in that dimension. (Parameter 'top')\r\n\u2022\tNo other modules are facing any issues while using the Serial console, on the PowerShell. \r\n\u2022\tThe behavior was reproduced using the latest PowerShell Module version: \u201c7.0.3\u201d, and also using the latest Preview version: \u201c7.1.0-rc.1\u201d. \r\n\u2022\tSo far we could reproduce the same behavior only on RHEL and CentOS images. As the PowerShell works fine over the serial console on other distros such as Ubuntu. \r\n\u2022\tIf we look at the complete error we are getting, we can see that PowerShell Module was to query the cursor position, and getting \u201c-1\u201d from the terminal session. \r\n\r\n---------------------------------------------------------\r\n\r\n## Full Error: \r\nProcess terminated. The value must be greater than or equal to zero and less than the console's buffer size in that dimension. (Parameter\r\n'top')\r\nActual value was -1.\r\n   at System.Environment.FailFast(System.String, System.Exception)\r\n   at Microsoft.PowerShell.UnmanagedPSEntry.Start(System.String, System.String[], Int32)\r\n   at Microsoft.PowerShell.ManagedPSEntry.Main(System.String[])\r\nSystem.ArgumentOutOfRangeException: The value must be greater than or equal to zero and less than the console's buffer size in that dimension. (Parameter 't\r\nop')\r\nActual value was -1.\r\n   at System.Console.SetCursorPosition(Int32 left, Int32 top)\r\n   at System.Console.set_CursorLeft(Int32 value)\r\n   at Microsoft.PowerShell.ConsoleHostUserInterface.ReadLineFromConsole(Boolean endOnTab, String initialContent, Boolean calledFromPipeline, String& restOfL\r\nine, ReadLineResult& result)\r\n   at Microsoft.PowerShell.ConsoleHostUserInterface.ReadLine(Boolean endOnTab, String initialContent, ReadLineResult& result, Boolean calledFromPipeline, Bo\r\nolean transcribeResult)\r\n   at Microsoft.PowerShell.ConsoleHostUserInterface.ReadLineWithTabCompletion(Executor exec)\r\n   at Microsoft.PowerShell.ConsoleHost.InputLoop.Run(Boolean inputLoopIsNested)\r\n   at Microsoft.PowerShell.ConsoleHost.InputLoop.RunNewInputLoop(ConsoleHost parent, Boolean isNested)\r\n   at Microsoft.PowerShell.ConsoleHost.EnterNestedPrompt()\r\n   at Microsoft.PowerShell.ConsoleHost.DoRunspaceLoop(String initialCommand, Boolean skipProfiles, Collection`1 initialCommandArgs, Boolean staMode, String\r\nconfigurationName)\r\n   at Microsoft.PowerShell.ConsoleHost.Run(CommandLineParameterParser cpp, Boolean isPrestartWarned)\r\n   at Microsoft.PowerShell.ConsoleHost.Start(String bannerText, String helpText, String[] args)\r\n   at Microsoft.PowerShell.ConsoleShell.Start(InitialSessionState initialSessionState, String bannerText, String helpText, String[] args)\r\n   at Microsoft.PowerShell.ConsoleShell.Start(String bannerText, String helpText, String[] args)\r\n   at Microsoft.PowerShell.UnmanagedPSEntry.Start(String consoleFilePath, String[] args, Int32 argc)\r\n\r\n---------------------------------------------------------\r\n\r\n## Environment data\r\n\r\nName                           \t\tValue\r\n----                           \t\t-----\r\nPSVersion                     \t\t7.0.3\r\nPSEdition                     \t\tCore\r\nGitCommitId                    \t\t7.0.3\r\nOS                             \t\tLinux 3.10.0-1062.31.2.el7.x86_64 #1 SMP Tue Ju\u2026\r\nPlatform                       \t\tUnix\r\nPSCompatibleVersions           \t{1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      \t2.3\r\nSerializationVersion           \t1.1.0.1\r\nWSManStackVersion              \t3.0\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@DHowett Have you any thoughts about the issue? Does System.Console API work correctly in the console?",
      "created_at": "2020-10-26T07:14:56Z",
      "updated_at": "2020-10-26T07:14:56Z"
    },
    {
      "author": "DHowett",
      "author_association": "NONE",
      "body": "This looks like the same root cause as https://github.com/PowerShell/PSReadLine/issues/1376 but happening somewhere else in the stack. `System.Console` cannot handle terminals on Linux/Mac that do not respond to a cursor position report request.",
      "created_at": "2020-10-26T20:14:17Z",
      "updated_at": "2020-10-26T20:14:17Z"
    },
    {
      "author": "DHowett",
      "author_association": "NONE",
      "body": "This is just one victim of a leaky abstraction, where `System.Console` was made to model the Win32 console API and then \"ported\" to non-Windows. Cursor reporting is not guaranteed, but the `System.Console` port requires it.",
      "created_at": "2020-10-26T20:15:08Z",
      "updated_at": "2020-10-26T20:15:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@DHowett Thanks!\r\n\r\n/cc @daxian-dbw @SteveL-MSFT for information.",
      "created_at": "2020-10-27T03:26:58Z",
      "updated_at": "2020-10-27T03:26:58Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Looks like we need to check if cursorLeft is <= 0 and handle that accordingly.  However, if it is distro specific, it would make sense to have an issue in dotnet/runtime repo so that their API works consistently across repos.",
      "created_at": "2020-10-27T21:32:31Z",
      "updated_at": "2020-10-27T21:42:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Perhaps we could use a code from PSReadline.",
      "created_at": "2020-10-28T04:22:53Z",
      "updated_at": "2020-10-28T04:22:53Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "Checked the repo on Ubuntu 18 and RHEL 7. The difference between console settings is that on RHEL 7, the Console.BufferWidth is set to 0, where are on Ubuntu 18 it is set as 80. Next step is to create a small .NET app to create a repro.",
      "created_at": "2020-11-02T18:10:45Z",
      "updated_at": "2020-11-02T18:10:45Z"
    },
    {
      "author": "hbouzieh",
      "author_association": "NONE",
      "body": "@adityapatwardhan, thanks for the update, really important findings. \r\nIs there any way we can adjust the Console.BufferWidth on RHEL manually as a temp workaround ?",
      "created_at": "2020-11-02T21:11:43Z",
      "updated_at": "2020-11-02T21:11:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@hbouzieh You could try to set TERM = vt100.",
      "created_at": "2020-11-03T03:13:49Z",
      "updated_at": "2020-11-03T03:13:49Z"
    }
  ],
  "created_at": "2020-10-23T16:26:27Z",
  "labels": [
    "Issue-Question",
    "WG-Interactive-PSReadLine",
    "WG-Interactive-Console"
  ],
  "number": 13853,
  "state": "open",
  "title": "PowerShell Core crashing on RHEL/CentOS when using Azure Serial Console",
  "updated_at": "2020-11-03T03:13:49Z"
}