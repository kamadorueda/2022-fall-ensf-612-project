{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9382",
  "author": "KirkMunro",
  "body": "Traditionally, PowerShell is always playing catchup with languages like C#, and it's always lagging behind, since it does not have the momentum and support that C# has. I was sitting at my desk today jotting down notes about how I would write an RFC for a cmdlet keyword that could be used in (compiled) psx1 files, allowing PowerShell users to create actual cmdlets from within PowerShell itself, when a thought occurred to me.\r\n\r\n- C# has a scripting language that can be run in a REPL (`dotnet script` once you have installed the script tool), and `.csx` files are C# script files that allow you to use C# without any of the overhead of a project or solution.\r\n- PowerShell borrows some concepts from C# (like classes), but the capabilities differ quite a bit from what you can do in C#, to the point where many users who want a class and can write it in C# would rather just write it in C#.\r\n- PowerShell has supported inline C# using Add-Type for many years, but that does not allow users to debug into the C# code, and loading C# files or code is a manual process.\r\n\r\nWhat if PowerShell modules supported csx files, automatically loading them into the module where they are included (maybe via an extension to psd1 files to identify the csx files and define the order in which they should be loaded)? Building on that, what if PowerShell allowed users debugging a module that contained csx files to debug directly into those files from wherever they are (VS Code, or in native PowerShell)?",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I have been considering the transparent inclusion of the REPL in PowerShell - this is my favorite direction of development, but still have no understanding how to do it transparently. Although we definitely should have it for convenient development and debugging of C# script modules.\r\nNote: perhaps the extension should be .psx1",
      "created_at": "2019-04-17T06:01:39Z",
      "updated_at": "2019-04-17T06:01:39Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@KirkMunro, great idea.\r\n\r\n@iSazonov, how do you envision including the C# REPL _transparently_? My sense is that this could only work by temporarily entering the REPL - which is its own world - from a PowerShell session, and  by returning to the PowerShell session with `#exit`(or ^C), just as it currently works with `dotnet script`.",
      "created_at": "2019-04-20T17:09:44Z",
      "updated_at": "2019-04-20T17:09:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If we implement REPL mode I guess users will expect to get values of PowerShell variables \u200b\u200bfrom PowerShell and return modified ones. I do not know if it is possible to do this conveniently, but the types of _inlining_ have always been met in many languages \u200b\u200bbefore.\r\nI'm sure if PowerShell is a powerful add-on over .Net we should consider C# script mode too.",
      "created_at": "2019-04-20T18:04:13Z",
      "updated_at": "2019-04-20T18:04:13Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Maybe a better question is what would it take to do the opposite: create a session/an environment that uses an extended version of the C# REPL that also supports inline PowerShell. C# can invoke PowerShell directly, keep track of a session, etc., plus Roslyn, and the syntax of the two languages may just differ enough that inline PowerShell could be compiled automatically into the required C# when running CSX.",
      "created_at": "2019-04-22T16:43:34Z",
      "updated_at": "2019-04-22T16:43:34Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@KirkMunro I will be happy with a new class parser ( keyword superclass or something around) that build  through Roslyn an assembly 100% .net compatible.\r\n",
      "created_at": "2019-04-22T19:16:28Z",
      "updated_at": "2019-04-22T19:16:28Z"
    }
  ],
  "created_at": "2019-04-16T14:40:25Z",
  "number": 9382,
  "state": "open",
  "title": "What if PowerShell modules could recognize/load csx files?",
  "updated_at": "2019-04-22T19:16:28Z"
}