{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15181",
  "author": "sba923",
  "body": "## Steps to reproduce\r\n\r\nThe use case is: sorting objects obtained from a non-relational database, where the list of fields in records is not constant, on a property which is present in **all** input objects.\r\n\r\nHere's a small script to repro the issue:\r\n\r\n```powershell\r\nparam([switch] $Sort)\r\n\r\n$json = @'\r\n{\r\n    \"Items\": [\r\n        {\r\n            \"a\": 650,\r\n            \"b\": 660,\r\n            \"c\": 670\r\n        },\r\n        {\r\n            \"a\": 65,\r\n            \"b\": 66\r\n        },\r\n        {\r\n            \"a\": 6500,\r\n            \"c\": 6700\r\n        }\r\n    ]\r\n}\r\n'@\r\n\r\n$objects = ($json | ConvertFrom-JSON).Items\r\n\r\nif ($Sort)\r\n{\r\n    $objects | Sort-Object -Property a\r\n}\r\nelse {\r\n    $objects\r\n}\r\n\r\n\r\n```\r\n\r\nIf the `-Sort` parameter is not specified, the objects are output with all their properties -- where the list of properties differ from one object to the next.\r\n\r\n```none\r\n   a   b    c\r\n   -   -    -\r\n 650 660  670\r\n  65  66\r\n6500     6700\r\n```\r\n\r\nIf the `-Sort` parameter is specified, some properties are removed from **all** objects, even if they are present.\r\n\r\nThis is probably by design, but:\r\n\r\n1. where is this documented?\r\n2. how can one obtain the desired behavior?\r\n\r\n## Expected behavior\r\n\r\n```none\r\n   a   b    c\r\n   -   -    -\r\n  65  66\r\n 650 660  670\r\n6500     6700\r\n```\r\n\r\n## Actual behavior\r\n\r\n```none\r\n   a   b\r\n   -   -\r\n  65  66\r\n 650 660\r\n6500\r\n```\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core \r\nGitCommitId                    7.1.3\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}       \r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Formatting is based on the first object of a type that hits the formatter.  None of the properties are actually being removed, they just aren't being displayed because `Sort-Object` just happens to make the first object emitted be the one without a `C` property.",
      "created_at": "2021-04-07T17:25:45Z",
      "updated_at": "2021-04-07T17:25:45Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "> Formatting is based on the first object of a type that hits the formatter. None of the properties are actually being removed, they just aren't being displayed because `Sort-Object` just happens to make the first object emitted be the one without a `C` property.\r\n\r\nIf that would only affect how objects are _displayed_, I would concur, but this seems to prove that the properties *are* removed:\r\n\r\n```powershell\r\nparam([switch] $Sort)\r\n\r\n$json = @'\r\n{\r\n    \"Items\": [\r\n        {\r\n            \"a\": 650,\r\n            \"b\": 660,\r\n            \"c\": 670\r\n        },\r\n        {\r\n            \"a\": 65,\r\n            \"b\": 66\r\n        },\r\n        {\r\n            \"a\": 6500,\r\n            \"c\": 6700\r\n        }\r\n    ]\r\n}\r\n'@\r\n\r\n$objects = ($json | ConvertFrom-JSON).Items\r\n\r\nif ($Sort)\r\n{\r\n    $objects | Sort-Object -Property a | Get-Member  -MemberType NoteProperty\r\n}\r\nelse {\r\n    $objects | Get-Member -MemberType NoteProperty\r\n}\r\n```\r\n\r\n````\r\nPS> . 's:\\PowerShell\\test\\Test-SortingObjectsWithVariablePropertyList.ps1'\r\n\r\n\r\n   TypeName: System.Management.Automation.PSCustomObject\r\n\r\nName MemberType   Definition\r\n---- ----------   ----------\r\na    NoteProperty long a=650\r\nb    NoteProperty long b=660\r\nc    NoteProperty long c=670\r\n\r\nPS> . 's:\\PowerShell\\test\\Test-SortingObjectsWithVariablePropertyList.ps1' -sort\r\n\r\n\r\n   TypeName: System.Management.Automation.PSCustomObject\r\n\r\nName MemberType   Definition\r\n---- ----------   ----------\r\na    NoteProperty long a=65\r\nb    NoteProperty long b=66\r\n````\r\n\r\nOr am I missing something?\r\n",
      "created_at": "2021-04-07T17:49:34Z",
      "updated_at": "2021-04-07T17:49:34Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "That's more of a quirk with `Get-Member`, since all the objects are `PSCustomObject`, it only checks the first one.  Similar type of deal as formatting.\r\n\r\nA better test is `$objects | Format-Custom`, that will show you the same objects are the same every time, just sorted differently.",
      "created_at": "2021-04-07T18:07:47Z",
      "updated_at": "2021-04-07T18:08:25Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Good point, @SeeminglyScience, but I think it's time to do something about this `Get-Member` quirk - see #15184.",
      "created_at": "2021-04-07T19:40:39Z",
      "updated_at": "2021-04-07T19:40:39Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@sba923, for more information about the original problem (implicit `Format-Table` locking in the first object's properties as the display columns), see [this Stack Overflow answer](https://stackoverflow.com/a/45705068/45375).",
      "created_at": "2021-04-07T19:44:08Z",
      "updated_at": "2021-04-07T19:44:29Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "The issue has also come up before in #4552 (albeit conflated with `Format-Table`'s asynchronous behavior).",
      "created_at": "2021-04-07T19:47:15Z",
      "updated_at": "2021-04-07T19:47:15Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "This also relates to [**Add -UnifyProperties parameter to Select-Object `#13906`**](https://github.com/PowerShell/PowerShell/issues/13906)\r\nFor this specific issue the application would be:\r\n```PowerShell\r\n$objects = ($json | ConvertFrom-JSON).Items | Select-Object -UnifyProperties\r\n```\r\n(See also: this StackOverflow answer: [Not all properties displayed](https://stackoverflow.com/a/44429084/1701026))",
      "created_at": "2021-04-08T07:03:33Z",
      "updated_at": "2021-04-08T07:03:33Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "> This also relates to [**Add -UnifyProperties parameter to Select-Object `#13906`**](https://github.com/PowerShell/PowerShell/issues/13906)\r\n\r\nSure does!\r\n\r\n\r\n> For this specific issue the application would be:\r\n> \r\n> ```powershell\r\n> $objects = ($json | ConvertFrom-JSON).Items | Select-Object -UnifyProperties\r\n> ```\r\n> \r\n> (See also: this StackOverflow answer: [Not all properties displayed](https://stackoverflow.com/a/44429084/1701026))\r\n\r\n",
      "created_at": "2021-04-08T11:34:20Z",
      "updated_at": "2021-04-08T11:34:20Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "I was bitten by this again today... in 7.2.3.\r\n\r\nSeems the workaround I'd built into my script way back them doesn't work with my current dataset...",
      "created_at": "2022-05-13T16:28:50Z",
      "updated_at": "2022-05-13T16:28:50Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "For now I'll live with this:\r\n\r\n```powershell\r\n# new workaround to https://github.com/PowerShell/PowerShell/issues/15181\r\n# compute list of all properties, and add the ones missing\r\n$allproperties = $objects | ForEach-Object { $_.PSObject.Properties.Name } | Sort-Object -Unique\r\n\r\n# note: this modifies the elements of $objects in place\r\n$objects | Foreach-Object {\r\n    foreach ($property in $allproperties)\r\n    {\r\n        if ($property -notin $_.PSObject.Properties.Name)\r\n        {\r\n            Add-Member -InputObject $_ -MemberType NoteProperty -Name $property -Value $null\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nDon't hesitate to suggest something more elegant / efficient.",
      "created_at": "2022-05-23T16:03:18Z",
      "updated_at": "2022-05-23T16:03:18Z"
    }
  ],
  "created_at": "2021-04-07T17:08:41Z",
  "labels": [
    "WG-Cmdlets-Utility",
    "Needs-Triage"
  ],
  "number": 15181,
  "state": "open",
  "title": "Sort-Object removes properties missing from some input objects",
  "updated_at": "2022-05-23T16:03:19Z"
}