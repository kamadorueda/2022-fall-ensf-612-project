{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8495",
  "author": "vexx32",
  "body": "The comma operator has the highest precedence of any operator (excepting casts and enclosed statements like subexpressions and script blocks), causing (for example) `+` to behave as though concatenating arrays rather than adding values as one would more reasonably expect (in my opinion).\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n$a = 0..10\r\n$x = 5\r\n$a[$x, $x + 1, $x + 2]\r\n```\r\n\r\n# Expected behavior\r\n\r\nAddition should be more similar to multiplication, taking place before the comma operator in the absence of explicit parentheses.\r\n\r\n```none\r\n5\r\n6\r\n7\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\n5\r\n5\r\n1\r\n5\r\n2\r\n```\r\n\r\nAs it is not completely clear, what's actually happening is that PS is treating the resolution more like it was entered like this:\r\n\r\n```none\r\n$a[ @($x, $x) + @(1, $x) + 2 ]\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0\r\nOS                             Microsoft Windows 10.0.17134\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2019-03-26T16:33:56Z",
  "comments": [
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Hum! \r\nI don't think anything is wrong. I would use parentheses to contain the expressions results. \r\nThat's me!\r\n```\r\nPS [40] > $a[($x), ($x + 1), ($x + 2)]\r\n5\r\n6\r\n7\r\n\r\nPS [44] > $b = 5; $c = 6; $d = 7;\r\nPS [45] >\r\nPS [46] > $a[$b, $c, $d]\r\n5\r\n6\r\n7\r\nPS [50] >\r\n```\r\n\r\n:)",
      "created_at": "2018-12-19T21:37:17Z",
      "updated_at": "2018-12-19T21:37:17Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Sure, you _can_. But in most languages folks are used to, simple math operations generally evaluate before something like concatenating reference objects like arrays. \ud83d\ude04 \r\n\r\nIn my opinion, I think requiring parentheses to evaluate as \"add arrays together\" is _much_ more sensible, and simple math should be default.",
      "created_at": "2018-12-19T21:42:53Z",
      "updated_at": "2018-12-19T21:43:08Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@vexx32 if we were starting from scratch, I would agree with you.  However, this would be a breaking change.",
      "created_at": "2018-12-20T03:07:40Z",
      "updated_at": "2018-12-20T03:07:40Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32: \r\n\r\nI get that the current behavior may be surprising, but changing it would be a massively breaking change.\r\n\r\nThe current behavior _is_ documented, namely in [`about_operator_precedence`](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_operator_precedence?view=powershell-6).\r\n\r\nAs @SteveL-MSFT  states, such a change would definitely be a vZeroTechnicalDebt-related proposal - see #6745.\r\n",
      "created_at": "2018-12-20T03:08:50Z",
      "updated_at": "2018-12-20T03:16:27Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT @mklement0 I would be _very_ surprised indeed if anyone actually depended on the current behaviour. But knowing how PowerShell users are, I fully expect to be surprised pretty shortly as someone turns up depending on the current behaviour. \ud83d\ude0f \r\n\r\nThat said, I agree this is the sort of fundamental language precedence that is... _difficult_ at best to ever have changed.\r\n\r\nI still think it should be a noted and tracked issue, just in case we ever _do_ get any kind of zero-tech-debt version in the works as @mklement0 mentions. \ud83d\ude04 ",
      "created_at": "2018-12-20T03:38:05Z",
      "updated_at": "2018-12-20T03:39:29Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32: \r\n\r\n>  it should be a noted and tracked issue,\r\n\r\nIt is: in [`about_operator_precedence`](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_operator_precedence?view=powershell-6).\r\nAnd, as long as the surprising behavior can't be changed, that's the best we can do.\r\n\r\nThat said, I encourage you track the issue with an eye toward the future by adding a comment at #6745.\r\n\r\n> if anyone actually depended on the current behaviour. But knowing how PowerShell users are, I fully expect to be surprised pretty shortly as someone turns up depending on the current behaviour.\r\n\r\nI hear you, but changing something as fundamental as operator precedence is bound to break existing code, especially if users have read the docs and have come to rely on what they find there; e.g.:\r\n\r\n```powershell\r\nPS> , 1   +   2, 3\r\n1\r\n2\r\n3\r\n```\r\n\r\n\r\n\r\n",
      "created_at": "2018-12-20T03:49:13Z",
      "updated_at": "2018-12-20T03:50:58Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "\ud83d\ude2c \r\n\r\nHaha, if I had someone hand me code written like _that_, it'd be getting rewritten on the first pass. \ud83d\ude04 \r\n\r\nI'll make a note over there, thanks!",
      "created_at": "2018-12-20T03:53:28Z",
      "updated_at": "2018-12-20T03:53:28Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 The addition operator always has lower precedence than the comma operator however not all commas are operators e.g. in the top level of method calls, the comma lexically separates arguments, not array elements. Note that indexing does *not* do this - in an index expression, the commas are operators (see below).\r\n\r\nThe way PowerShell uses the comma for arrays is intended to be consistent with the way arrays are passed as a single argument to a command i.e. as comma-separated lists without delimiters. For example:\r\n```powershell\r\nInvoke-MyCommand 1, 2, 3\r\n```\r\nThis example is passing one argument which is a three element array. Here's the same thing using a variable:\r\n```powershell\r\n$arr = 1, 2, 3\r\nInvoke-MyCommand $arr\r\n```\r\nAgain - one argument with three elements. Contrast this with splatting\r\n```powershell\r\n$arr = 1, 2, 3\r\nInvoke-MyCommand @arr\r\n```\r\nwhich passes three arguments, each of which has a single scalar value.\r\n\r\nWe chose to favour array concatenation over addition on individual elements as the construction of lists is implicit in most PowerShell operations:\r\n```powershell\r\n$result1 =  echo 1, 2  \r\n$result1 += echo 3, 4\r\n$result2 =  1,2 + 3, 4\r\n$result3 =  $result1 + $result2\r\n$result3 +=  4, 5, 6 \r\n```\r\nMixing and matching commands and expression just works with no extra parentheses.\r\n\r\nNow let's look at array indexing. In PowerShell, and array index expression takes a _single_ index which is either a scalar or array value so:\r\n```powershell\r\nPS[1] (17) >   $a = 1..10\r\nPS[1] (18) >   $a[1,3,5,7]\r\n2\r\n4\r\n6\r\n8\r\n```\r\nis equivalent to\r\n```powershell\r\nPS[1] (19) >   $index = 1,3,5,7\r\nPS[1] (20) >   $a[$index]\r\n2\r\n4\r\n6\r\n8\r\n```\r\nwhich is effectively equivalent to splatting without actually splatting. \r\n\r\nMethod invocation is where things get inconsistent because commas are lexical elements that separate arguments (as opposed to commands where arguments are separated by spaces.) This means that the following works:\r\n```powershell\r\nPSCore (1:127) >  \"hello world\".substring(0+1, 2+3)\r\nello\r\n```\r\nAlthough in this example,  it appears that addition has higher precedence than comma, this is, in fact not the case because the comma here is not an operator, it's a lexical token that separates arguments. Ultimately this approach was the one that most people preferred despite the inconsistency. For one thing, it made transcribing C# code fragments trivial.\r\n\r\nAs an aside, some alternatives we considered included parsing methods like commands where spaces separated arguments:  `\"hello world\".substring(1  (2+3))` but the feedback on this was negative. We also considered using commands for member invocation\r\n```powershell\r\nInvoke-Object -InputObject \"Hello world\" SubString 0 3\r\n```\r\nBut this was felt to be too verbose.  (though this is pretty much what we implemented with `ForEach-Object`\r\n```powershell\r\nPSCore (1:128) >  ForEach-Object -InputObject \"Hello world\" SubString 0 3\r\nHel\r\n```\r\n\r\nOverall, taking everything in context, I'm reasonably satisfied with most of the decisions we made in this area. That said, many of these decisions were made well over a decade ago. Given a decade and a half of broad user experience it would be interesting to see how things might be refactored. But the hard part, then and as now, is keeping the entire system in mind and consistent.\r\n\r\n",
      "created_at": "2019-01-09T00:28:49Z",
      "updated_at": "2019-01-09T00:28:49Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Appreciate you taking the time to lay that all out, @BrucePay! \ud83d\ude04 \r\n\r\nYou're right, it is complicated somewhat by the fact that the comma operator sometimes just isn't an operator, which maybe is a bit unfortunate given that method invocation is a separate parsing mode _anyway_ and perhaps other delimiters _might_ have been a slightly more effective choice given the easy confusion of arrays vs method arguments as it is.\r\n\r\nBut really I guess the \"issue\" here is that it doesn't really match up to expectations of operator precedence that I would generally expect... and maybe, at the end of the day, that's just me. \ud83d\ude04 ",
      "created_at": "2019-01-09T01:38:27Z",
      "updated_at": "2019-01-09T01:38:27Z"
    },
    {
      "author": "jzabroski",
      "author_association": "NONE",
      "body": "@vexx32  Can you please edit your original post to say that the comma operator has the highest precedence of all PowerShell operators except for casts and property or array references?\r\n\r\nQuote from PowerShell in Action (**emphasis mine**):\r\n\r\n> 5.4.1 The comma operator\r\n> You\u2019ve already seen many examples using the comma operator to build arrays. We covered this topic in some detail in chapter 3, but there are a couple of things we still need to cover. **In terms of precedence, the comma operator has the highest precedence of any operator except for casts and property or array references.** This means that when you\u2019re building an array with expressions, you need to wrap those expressions in parentheses. In the next example, you\u2019ll build an array containing the values 1, 2, and 3. You\u2019ll use addition to calculate the final value. Because the comma operator binds more strongly than the plus operator, you won\u2019t get what you want:\r\n> ```\r\n> PS (1) > 1,2,1+2\r\n> 1\r\n> 2\r\n> 1\r\n> 2\r\n> ```",
      "created_at": "2019-03-26T16:19:12Z",
      "updated_at": "2019-03-26T16:19:30Z"
    },
    {
      "author": "jzabroski",
      "author_association": "NONE",
      "body": "@SteveL-MSFT Did you close this by accident?",
      "created_at": "2019-03-26T17:30:54Z",
      "updated_at": "2019-03-26T17:30:54Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@jzabroski, this issue is mentioned and linked to from #6745, which should be sufficient.",
      "created_at": "2019-03-26T18:07:57Z",
      "updated_at": "2019-03-26T18:08:18Z"
    }
  ],
  "created_at": "2018-12-19T20:52:33Z",
  "labels": [
    "Issue-Question",
    "WG-Language",
    "Resolution-Answered"
  ],
  "number": 8495,
  "state": "closed",
  "title": "Precedence of comma and addition operators doesn't make sense",
  "updated_at": "2019-03-26T18:08:18Z"
}