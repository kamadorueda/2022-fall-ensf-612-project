{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4605",
  "author": "JasonMorgan",
  "body": "Could we get an apk package for alpine linux?  The main reason we don't use powershell as part of our ci/cd pipeline is that all our tasks run in alpine containers.\r\n",
  "closed_at": "2018-09-14T01:40:34Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Are you able to use the AppImage?",
      "created_at": "2017-08-17T14:23:08Z",
      "updated_at": "2017-08-17T14:23:08Z"
    },
    {
      "author": "JasonMorgan",
      "author_association": "NONE",
      "body": "I tried and couldn't get it to work.  I don't see it in their list of supported os's.",
      "created_at": "2017-08-17T17:17:39Z",
      "updated_at": "2017-08-17T17:17:39Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I took a stab at running the Appimage in Alpine. It looks like you could do it only if you have a full glibc chroot. The primary issue seems to be the musl libc that alpine uses and Appimage is made for glibc environments. It certainly increases the size of Alpine if you have to tack on a full glibc chroot to run the Appimage.",
      "created_at": "2017-08-21T17:59:20Z",
      "updated_at": "2017-08-21T17:59:20Z"
    },
    {
      "author": "JasonMorgan",
      "author_association": "NONE",
      "body": "@SteveL-MSFT any thoughts on this? Adding an apk package would make it so I could start using it in most of my tools containers and I'm sure I'm not the only one.",
      "created_at": "2017-08-28T15:48:16Z",
      "updated_at": "2017-08-28T15:48:16Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@JasonMorgan Alpine isn't one of the official supported OS for corefx, so for us this isn't currently a priority.  If a community PR makes it work, we'd be happy to take that change and start producing packages.",
      "created_at": "2017-08-28T21:30:31Z",
      "updated_at": "2017-08-28T21:30:31Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Looks like Alpine is sort of supported by CoreCLR, they have a build, but it doesn't appear to be tested regularly.",
      "created_at": "2017-09-08T21:16:15Z",
      "updated_at": "2017-09-08T21:16:15Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "dotnet/coreclr#917 It looks like they are still working the kinks out.",
      "created_at": "2017-09-08T21:42:50Z",
      "updated_at": "2017-09-08T21:42:50Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "dotnet/dotnet-docker#22 and dotnet/announcements#49 looks like they added an alpine docker for .NET Core. https://github.com/dotnet/dotnet-docker-samples/tree/master/dotnetapp-prod-alpine-preview so it should be theoretically possible to get a pwsh docker from that now.",
      "created_at": "2017-11-21T21:05:40Z",
      "updated_at": "2017-11-21T21:55:31Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "How can we make this theory a fact? Something like:\r\n\r\n```\r\ndocker run ...something?\r\napk install git\r\ngit clone git@github.com:PowerShell/PowerShell\r\n./PowerShell/tools/install-powershell.sh\r\n```\r\n\r\nor are there any dependencies involved? Please publish an additional docker layer for PS sitting on top of that previewed docker from .NET Core.",
      "created_at": "2017-11-21T21:27:30Z",
      "updated_at": "2017-11-21T21:27:30Z"
    },
    {
      "author": "JasonMorgan",
      "author_association": "NONE",
      "body": "@kasper3 I can confirm the install script doesn't handle alpine yet.  I'm looking at building from source myself now.  I'll let you know if I get it.\r\n",
      "created_at": "2017-12-02T16:46:37Z",
      "updated_at": "2017-12-02T16:46:37Z"
    },
    {
      "author": "JasonMorgan",
      "author_association": "NONE",
      "body": "So looks like you need the dotnet sdk, not just dotnet to get powershell built from source. I'll wait for dotnet 2.1 to go GA, should be January according to the [release notes](https://github.com/dotnet/dotnet-docker-nightly/issues/500) before trying to go through the powershell build steps again.\r\n\r\nAlso just to address your question from before, `./PowerShell/tools/install-powershell.sh` seems to just use the OS based package manager and doesn't support alpine yet. ",
      "created_at": "2017-12-02T17:25:42Z",
      "updated_at": "2017-12-02T17:25:42Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "yea, for Alpine you would need to get the tool chain added manually and then build manually. at least that is my understanding.",
      "created_at": "2017-12-02T17:29:38Z",
      "updated_at": "2017-12-02T17:29:38Z"
    },
    {
      "author": "mikeschinkel",
      "author_association": "NONE",
      "body": "Wow, it would be hugely helpful if Microsoft could offer a supported release of PowerShell on Alpine given that Alpine is the first-class choice for Docker containers.",
      "created_at": "2018-01-22T21:09:00Z",
      "updated_at": "2018-01-22T21:09:00Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "considering .NET Core was just made to work in Alpine and right before 6.0.0 GA, it's not surprising there is no alpine build yet... I might play with it in my spare time to see if I can get a build going. I've been meaning to learn more about the build internals anyway. This would be a good opportunity with that. no promises though. I have a ton on my plate already :)",
      "created_at": "2018-01-22T21:40:45Z",
      "updated_at": "2018-01-22T21:40:45Z"
    },
    {
      "author": "AceHack",
      "author_association": "NONE",
      "body": "I would love an Alpine image",
      "created_at": "2018-01-25T04:04:22Z",
      "updated_at": "2018-01-25T04:04:22Z"
    },
    {
      "author": "JasonMorgan",
      "author_association": "NONE",
      "body": "Just a heads up, still waiting on an instance of the 2.1 coreclr sdk on alpine. I checked the [nightly builds repo](https://hub.docker.com/r/microsoft/dotnet-nightly/) and they still only list out the runtime.",
      "created_at": "2018-01-28T05:27:58Z",
      "updated_at": "2018-01-28T05:27:58Z"
    },
    {
      "author": "AceHack",
      "author_association": "NONE",
      "body": "@JasonMorgan do you include the sdk when installing powershell?  If so in which directory?",
      "created_at": "2018-01-28T05:44:18Z",
      "updated_at": "2018-01-28T05:44:18Z"
    },
    {
      "author": "JasonMorgan",
      "author_association": "NONE",
      "body": "@AceHack unfortunately I'm still stuck at the, I can't install powershell on alpine yet, part. I tried building it from source with the coreclr runtime container but it needed the sdk to work. They haven't released the SDK on alpine yet so I'm still waiting. I think Ideally we'll do a multistage build so we can distribute as small a powershell image as possible. \r\n\r\nIf I'm being honest my goal here is just to make an apk package that has pwsh in it. I'll probably never use a straight alpine image provided by this team. Not that I have anything against them I just typically build a alpine base image for wherever I'm working.",
      "created_at": "2018-01-28T23:04:27Z",
      "updated_at": "2018-01-28T23:04:27Z"
    },
    {
      "author": "AceHack",
      "author_association": "NONE",
      "body": "@JasonMorgan Please forgive my ignorance but is it possible to build an apk runtime package for alpine using a different OS as the SDK image?  Thanks.",
      "created_at": "2018-01-29T00:48:30Z",
      "updated_at": "2018-01-29T00:48:30Z"
    },
    {
      "author": "JasonMorgan",
      "author_association": "NONE",
      "body": "@AceHack I don't know, I'm only planning on trying with alpine. Unfortunately I don't understand enough about the various linux OS' to understand why some binaries work on one but not another.",
      "created_at": "2018-01-29T02:49:17Z",
      "updated_at": "2018-01-29T02:49:17Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "@JasonMorgan, the difference between Alpine and \"most of\" other linux distribution is that Alpine uses musl-libc instead of glibc to avoid the codebloat. In headless containers scenarios, the lesser the OS footprints, the better.\r\n\r\nSize of Linux Kernel ~2.7 MB\r\nSize of Alpine Linux (base OS) ~5.5 MB\r\nSize of TinyCore Linux (base OS) ~11.0 MB\r\nSize of Ubuntu Linux (base OS) ~70 MB\r\n\r\nTinyCore and Ubuntu both use glibc, Alpine is musl-libc.\r\n\r\n@AceHack, all the abuild tooling is providing by the Alpine, for the Alpine, packaging on other OS is \"possible\" yes (lots of additional unnecessary porting of abuild/aports tooling code..) but I doubt it would be \"feasible\" or even worth the effort. In 8 lines of Dockerfile, you can fetch, build, test, pack and upload your binary to artifact hosting server, why bother building apk on other OS? BTW, to get PowerShell from aports, .NET Core first needs to have the official package publish to: https://github.com/alpinelinux/aports.\r\n\r\nFirst lets build it on dev machine..",
      "created_at": "2018-02-04T10:21:57Z",
      "updated_at": "2018-02-04T10:24:54Z"
    },
    {
      "author": "massimonewsuk",
      "author_association": "NONE",
      "body": "Is there any update on this issue?",
      "created_at": "2018-03-01T18:44:15Z",
      "updated_at": "2018-03-01T18:44:15Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "@SteveL-MSFT, I read the building docs https://github.com/PowerShell/PowerShell/blob/master/docs/building/linux.md#toolchain-setup and found that it requires PowerShell to build PowerShell.. Could we please have a unix shell build script which would build the whole product from scratch on new platforms without this dogfooding? Does PowerShell scratch build require some closed source components?\r\n\r\nThis is what I did:\r\n\r\nFirst in host (Windows 10 in my case with docker community edition installed):\r\n\r\n```cmd\r\ndocker run -it microsoft/dotnet:2.1-sdk-alpine\r\n```\r\n\r\n```ash\r\n# install dependencies\r\napk update\r\napk add git cmake\r\n\r\n# clone\r\ngit clone https://github.com/PowerShell/PowerShell\r\ncd PowerShell\r\n\r\n# build\r\n./tools/install-powershell.sh\r\n```\r\n\r\nError:\r\n> /bin/sh: ./tools/install-powershell.sh: not found\r\n\r\nIn Alpine Linux, default shell is ash, not bash. In NetBSD, default shell is tsh/csh not bash. It would be awesome if `install-powershell.sh` is written with `/bin/sh` (Bourne Shell / POSIX standard way) so we don't have to do this:\r\n\r\n```ash\r\napk add bash\r\n```\r\n\r\nIt's a bit more work to adhere to keep shell script POSIX compliant and neutral (with `#!/bin/sh` shebang), but it has advantages. \r\n\r\nAnyway, then running the `./tools/install-powershell.sh`, I got:\r\n\r\n```\r\nGet-PowerShell Core MASTER Installer Version 1.1.1\r\nInstalls PowerShell Core and Optional The Development Environment\r\n  Original script is at: https://raw.githubusercontent.com/PowerShell/PowerShell/master/tools$gitscriptname\r\nArguments used:\r\n\r\nOperating System Details:\r\n  OS: linux\r\n  DIST:\r\n  DistroBasedOn:\r\n  PSUEDONAME:\r\n  REV:\r\n  KERNEL: 4.9.60-linuxkit-aufs\r\n  MACH: x86_64\r\nSorry, your operating system is based on  and is not supported by PowerShell Core or this installer at this time.\r\n```\r\n\r\n(something is missing between `on` and `and` from the message `based on  and`)",
      "created_at": "2018-03-01T20:01:33Z",
      "updated_at": "2018-03-01T20:01:33Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Looks like dotnetcore currently only has an Alpine runtime and not an SDK available",
      "created_at": "2018-03-02T16:52:53Z",
      "updated_at": "2018-03-02T16:52:53Z"
    },
    {
      "author": "massimonewsuk",
      "author_association": "NONE",
      "body": "@SteveL-MSFT Is this what you were referring to?\r\nhttps://hub.docker.com/r/microsoft/dotnet/tags/ - search for 2.1-sdk-alpine\r\nor\r\nhttps://hub.docker.com/r/microsoft/dotnet-nightly/tags/ - search for 2.1-sdk-alpine",
      "created_at": "2018-03-02T17:54:51Z",
      "updated_at": "2018-03-02T17:54:51Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "@SteveL-MSFT, from the example above:\r\n\r\n```cmd\r\ndocker run -it microsoft/dotnet:2.1-sdk-alpine\r\n```\r\n\r\nthis is dotnet runtime with SDK. After hitting enter, when you get into the container:\r\n\r\n```ash\r\ndotnet new console -n test\r\ncd test\r\ndotnet run\r\n\r\n# 'Hello World!' is printed\r\n```",
      "created_at": "2018-03-02T19:30:10Z",
      "updated_at": "2018-03-02T19:30:10Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Thanks for the pointers, I might try to take a look at this on the weekend",
      "created_at": "2018-03-02T23:38:58Z",
      "updated_at": "2018-03-02T23:38:58Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "@SteveL-MSFT, thanks! If there is a `bootstrap-everything-powershell-from-souce-for-unknown-platform` script in open, could you point it out, I maybe able to contribute here. I am trying to build CoreCLR on SmartOS (Solaris derivative from Joyent (node.js folks)), currently blocked on clang6 port in their package manager pkgsrc that is 4 weeks out, and once everything is bootstrapped on .NET Core side (that may even take ages), we will still be in same kind of situation on PowerShell side. Similar story is for FreeBSD and NetBSD. Would be cool to make those scripts more permissive rather than whitelisting the platforms (most of the platforms have similar kinds of APIs and they just work, all we need is a build recipe).\r\n\r\nOn dotnet side, things are moving towards `building everything from source` (even offline) direction: https://github.com/dotnet/source-build/blob/a1e063e/Documentation/boostrap-new-os.md",
      "created_at": "2018-03-10T20:33:19Z",
      "updated_at": "2018-03-10T20:33:19Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@kasper3 this project has evolved and created a dependency on PSCore6 itself to build the entire project.  I believe you really need to just build two things on any new platform that .Net Core supports:\r\n\r\n- libpsl-native is cmake based and you just need to perform the equivalent of [these steps in build.psm1](https://github.com/PowerShell/PowerShell/blob/dcba3c486e77b9fbceaf9504426d067df8898b70/build.psm1#L368)\r\n- powershell itself you should be able to initially get away with `dotnet restore`, `dotnet publish` if the dotnet SDK is available",
      "created_at": "2018-03-12T18:29:01Z",
      "updated_at": "2018-03-12T18:29:01Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "@SteveL-MSFT, thanks. I will give it a try. BTW, do you have plans to remove functionality from libpsl-native gradually and start depending on CoreFX when available? or will it stay there forever for backward compatibility? I think there are some symlink related proposals in CoreFX that are likely to be addressed soon.",
      "created_at": "2018-03-12T22:16:58Z",
      "updated_at": "2018-03-12T22:16:58Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "Native part compiled (will send a PR), for managed `dotnet restore` was fine but got few errors with `dotnet publish`\r\n\r\n```sh\r\n  Restore completed in 5.16 ms for /powershell/src/Microsoft.WSMan.Management/Microsoft.WSMan.Management.csproj.\r\n  Restore completed in 3.47 ms for /powershell/src/System.Management.Automation/System.Management.Automation.csproj.\r\n  Restore completed in 8.86 ms for /powershell/src/powershell-win-core/powershell-win-core.csproj.\r\nDotNetCode/Eventing/EventDescriptor.cs(41,61): error CS0103: The name 'DotNetEventingStrings' does not exist in the current context [/powershell/src/Microsoft.PowerShell.CoreCLR.Eventing/Microsoft.PowerShell.CoreCLR.Eventing.csproj]\r\nDotNetCode/Eventing/EventDescriptor.cs(46,103): error CS0103: The name 'DotNetEventingStrings' does not exist in the current context [/powershell/src/Microsoft.PowerShell.CoreCLR.Eventing/Microsoft.PowerShell.CoreCLR.Eventing.csproj]\r\nDotNetCode/Eventing/EventDescriptor.cs(58,63): error CS0103: The name 'DotNetEventingStrings' does not exist in the current context [/powershell/src/Microsoft.PowerShell.CoreCLR.Eventing/Microsoft.PowerShell.CoreCLR.Eventing.csproj]\r\nDotNetCode/Eventing/EventDescriptor.cs(63,105): error CS0103: The name 'DotNetEventingStrings' does not exist in the current context [/powershell/src/Microsoft.PowerShell.CoreCLR.Eventing/Microsoft.PowerShell.CoreCLR.Eventing.csproj]\r\nDotNetCode/Eventing/EventProviderTraceListener.cs(45,49): error CS0103: The name 'DotNetEventingStrings' does not exist in the current context [/powershell/src/Microsoft.PowerShell.CoreCLR.Eventing/Microsoft.PowerShell.CoreCLR.Eventing.csproj]\r\nDotNetCode/Eventing/EventProviderTraceListener.cs(76,45): error CS0103: The name 'DotNetEventingStrings' does not exist in the current context [/powershell/src/Microsoft.PowerShell.CoreCLR.Eventing/Microsoft.PowerShell.CoreCLR.Eventing.csproj]\r\nDotNetCode/Eventing/EventProvider.cs(627,75): error CS0103: The name 'DotNetEventingStrings' does not exist in the current context [/powershell/src/Microsoft.PowerShell.CoreCLR.Eventing/Microsoft.PowerShell.CoreCLR.Eventing.csproj]\r\nDotNetCode/Eventing/EventProvider.cs(664,83): error CS0103: The name 'DotNetEventingStrings' does not exist in the current context [/powershell/src/Microsoft.PowerShell.CoreCLR.Eventing/Microsoft.PowerShell.CoreCLR.Eventing.csproj]\r\n```",
      "created_at": "2018-03-12T22:57:34Z",
      "updated_at": "2018-03-12T22:57:34Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "#6367",
      "created_at": "2018-03-12T23:25:07Z",
      "updated_at": "2018-03-12T23:25:07Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@kasper3 removing functions from libpsl-native if CoreFx supports it makes sense, but it wouldn't be a high priority for my team.  Need to ensure that there isn't a perf penalty moving away from the native code.",
      "created_at": "2018-03-13T17:23:51Z",
      "updated_at": "2018-03-13T17:23:51Z"
    },
    {
      "author": "massimonewsuk",
      "author_association": "NONE",
      "body": "Hey guys. I wanted to ask if this is ready to use yet. We basically have a dockerfile that has this at the top:\r\n```dockerfile\r\nFROM node:alpine\r\n```\r\n\r\nAnd I want to know if I can get powershell inside that docker image?",
      "created_at": "2018-04-26T10:42:19Z",
      "updated_at": "2018-04-26T10:42:19Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@massimonewsuk unfortunately this won't happen for Preview2, I'm planning on working on this next week",
      "created_at": "2018-04-26T13:19:01Z",
      "updated_at": "2018-04-26T13:19:01Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "current status:\r\n\r\n* there is a build script and docker that compiles powershell master branch on alpine\r\n* `libpsl-native.so` and all the CoreCLR/CoreFX/CoreSetup/ASP.NET native binaries are linked with muscle libc\r\n* powershell has dependency on other native libraries, that are linked with glibc, which makes the product not usable unless you install glibc family on alpine and defeat the primary purpose of using alpine.. for that we need some help on https://github.com/Microsoft/omi/issues/497 (making their unix script portable)\r\n\r\nif you have time and expertise, please chime in and contribute to OMI, so we have a pure product without glibc-ism on alpine linux.",
      "created_at": "2018-04-26T13:30:02Z",
      "updated_at": "2018-04-26T13:30:02Z"
    },
    {
      "author": "mi-hol",
      "author_association": "NONE",
      "body": "@SteveL-MSFT any news on this?",
      "created_at": "2018-07-22T15:44:27Z",
      "updated_at": "2018-07-22T15:44:27Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Was hoping to have an Alpine release along with Preview.4.  Next week we'll be working on producing a docker image release.",
      "created_at": "2018-07-22T19:05:12Z",
      "updated_at": "2018-07-22T19:05:12Z"
    },
    {
      "author": "massimonewsuk",
      "author_association": "NONE",
      "body": "@SteveL-MSFT Hey is there any update on this?",
      "created_at": "2018-09-06T14:41:27Z",
      "updated_at": "2018-09-06T14:41:27Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@TravisEz13 is looking at this, however, it's currently a lower priority than preparing for the GA release.  Although we have updated the tooling to build PowerShell Core on Alpine, it wasn't complete as it didn't do a module restore and thus the resulting Alpine package didn't have any modules even though the engine/console worked.  Travis has an idea on how to resolve this.",
      "created_at": "2018-09-07T01:12:35Z",
      "updated_at": "2018-09-07T01:12:35Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "I have a PR here https://github.com/PowerShell/PowerShell-Docker/pull/37 for the docker image.\r\n\r\nThere are two issues:\r\n\r\n1. The version is `6.1.0-fixalpine` . The code is the same as `6.1.0-rc.1` but there were some build issues, and this is what our build system does when you build from a private branch.\r\n1. There are some rendering issues in the console (see image below.) You can avoid these issues by changing `docker run -it` to `docker run -i`, but you loose tab completion.\r\n\r\n![image](https://user-images.githubusercontent.com/10873629/45248161-9d76ac80-b2c2-11e8-815c-e18804a97347.png)\r\n\r\nYou can try my image: `docker run -it travisez13/powershell:preview-alpine-3.8`\r\n\r\nConsider this highly experimental.",
      "created_at": "2018-09-08T00:33:07Z",
      "updated_at": "2018-09-08T00:33:07Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Open new issues for for specific problems",
      "created_at": "2018-09-14T01:40:34Z",
      "updated_at": "2018-09-14T01:40:34Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "fyi, the container is available via `docker run -it mcr.microsoft.com/powershell:preview-alpine-3.8`",
      "created_at": "2018-09-14T18:58:24Z",
      "updated_at": "2018-09-14T18:58:24Z"
    },
    {
      "author": "alexandair",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13 Container is available. but is practically unusable. You cannot type anything. :(",
      "created_at": "2018-09-15T01:02:26Z",
      "updated_at": "2018-09-15T01:02:26Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@alexandair Yes, but we need something to bootstrap real development.  It works for automation.  I mentioned this issue here:  https://github.com/PowerShell/PowerShell/issues/4605#issuecomment-419598695\r\n\r\nWe now need to update the build to use this image and to a PSModuleRestore.",
      "created_at": "2018-09-16T19:34:52Z",
      "updated_at": "2018-09-16T19:34:52Z"
    }
  ],
  "created_at": "2017-08-17T04:27:21Z",
  "number": 4605,
  "state": "closed",
  "title": "Can we get a release that runs on Alpine?",
  "updated_at": "2018-09-16T19:34:52Z"
}