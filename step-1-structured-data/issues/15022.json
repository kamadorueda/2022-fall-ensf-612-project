{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15022",
  "author": "sba923",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\n## Steps to reproduce\r\n\r\nAttempting to delete a hidden file that is stored on a Samba file share (Samba 4.11.6-Ubuntu on Ubuntu 20.04.2 LTS) fails, whereas CMD can delete the file\r\n\r\nPowerShell:\r\n```\r\n\r\nPS\u276f gci -force  '\\\\pnjnas\\public\\FileHistory\\LATITUDE7400\\Data\\C\\Users\\sto\\OneDrive\\.NET assembly dependency (2020_09_20 08_01_14 UTC).docx'\r\n\r\n    Directory:  S:\\MM\\catalogs\r\n\r\nMode                LastWriteTime     Length Name\r\n----                -------------     ------ ----\r\n---h-        2016-01-26     09:46    12.67KB .NET assembly dependency (2020_09_20 08_01_14 UTC).docx\r\n\r\n\r\nPS\u276f remove-item '\\\\pnjnas\\public\\FileHistory\\LATITUDE7400\\Data\\C\\Users\\sto\\OneDrive\\.NET assembly dependency (2020_09_20 08_01_14 UTC).docx'\r\nRemove-Item: You do not have sufficient access rights to perform this operation or the item is hidden, system, or read only.\r\n\r\n\r\nPS\u276f remove-item -force '\\\\pnjnas\\public\\FileHistory\\LATITUDE7400\\Data\\C\\Users\\sto\\OneDrive\\.NET assembly dependency (2020_09_20 08_01_14 UTC).docx'\r\nRemove-Item: The handle is invalid. : '\\\\pnjnas\\public\\FileHistory\\LATITUDE7400\\Data\\C\\Users\\sto\\OneDrive\\.NET assembly dependency (2020_09_20 08_01_14 UTC).docx'\r\n```\r\n\r\nCMD:\r\n\r\n````\r\nC:\\Users\\<REDACTED>>dir /ah \"\\\\pnjnas\\public\\FileHistory\\LATITUDE7400\\Data\\C\\Users\\sto\\OneDrive\\.NET assembly dependency (2020_09_20 08_01_14 UTC).docx\r\n Volume in drive \\\\pnjnas\\public is Public\r\n Volume Serial Number is 4664-C5A0\r\n\r\n Directory of \\\\pnjnas\\public\\FileHistory\\LATITUDE7400\\Data\\C\\Users\\sto\\OneDrive\r\n\r\n2016-01-26  09:46            12,979 .NET assembly dependency (2020_09_20 08_01_14 UTC).docx\r\n               1 File(s)         12,979 bytes\r\n               0 Dir(s)  1,390,021,279,744 bytes free\r\n\r\nC:\\Users\\<REDACTED>>del /ah \"\\\\pnjnas\\public\\FileHistory\\LATITUDE7400\\Data\\C\\Users\\sto\\OneDrive\\.NET assembly dependency (2020_09_20 08_01_14 UTC).docx\r\n\r\nC:\\Users\\<REDACTED>>dir /ah \"\\\\pnjnas\\public\\FileHistory\\LATITUDE7400\\Data\\C\\Users\\sto\\OneDrive\\.NET assembly dependency (2020_09_20 08_01_14 UTC).docx\r\n Volume in drive \\\\pnjnas\\public is Public\r\n Volume Serial Number is 4664-C5A0\r\n\r\n Directory of \\\\pnjnas\\public\\FileHistory\\LATITUDE7400\\Data\\C\\Users\\sto\\OneDrive\r\n\r\nFile Not Found\r\n````\r\n\r\n## Expected behavior\r\n\r\n`Remove-Item -Force` should delete the file\r\n\r\n## Actual behavior\r\n\r\n`Remove-Item -Force`  fails with an \"invalid handle\" error.\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```\r\n> $psversiontable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems you are trying to remove OneDrive file which is a Windows reparse point - I guess Samba does not support this.",
      "created_at": "2021-03-14T17:25:29Z",
      "updated_at": "2021-03-14T17:25:29Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "No I'm not. It's just a coincidence that the Samba-hosted file I was trying to remove happened to be an old backup copy of some file within my OneDrive tree. Sorry for the confusion.\r\n\r\nAnd CMD **was** able to remove the file.",
      "created_at": "2021-03-14T19:53:05Z",
      "updated_at": "2021-03-14T19:53:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@sba923 I'd prefer to have an clean repro steps. Can you please create simple test folder tree with PowerShell cmdlets? What results do you see?",
      "created_at": "2021-03-15T04:30:52Z",
      "updated_at": "2021-03-15T04:30:52Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Will work on that. Stay tuned. ",
      "created_at": "2021-03-15T06:02:36Z",
      "updated_at": "2021-03-15T06:02:36Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Here's the test script:\r\n\r\n````\r\n$unixpath = '/data/Public/foo.txt'\r\n$uncpath = '\\\\pnjnas\\Public\\foo.txt'\r\n\r\nssh -n sto@pnjnas \"rm -f $unixpath\"\r\n\r\nif (Test-Path -LiteralPath $uncpath)\r\n{\r\n    Write-Host -ForegroundColor Red (\"Failed to remove test file\")\r\n    Exit(1)\r\n}\r\n\r\n\"foo\" | out-file $uncpath\r\n\r\nattrib -a $uncpath\r\nattrib +h $uncpath\r\n\r\nssh -n sto@pnjnas \"chmod 544 $unixpath\"\r\n\r\nssh -n sto@pnjnas \"ls -ld $unixpath\"\r\n\r\nGet-ChildItem -Force -LiteralPath $uncpath\r\n\r\nRemove-Item -LiteralPath $uncpath\r\n\r\nRemove-Item -Force -LiteralPath $uncpath\r\n````\r\n\r\nAnd the outcome:\r\n\r\n````\r\n\r\nPS\u276f S:\\powershell\\test\\Remove-SambaHidden544.ps1\r\n-r-xr--r-- 1 sto sto 5 Mar 15 08:48 /data/Public/foo.txt\r\n\r\n    Directory:  C:\\Users\\<REDACTED>\r\n\r\nMode                LastWriteTime     Length Name\r\n----                -------------     ------ ----\r\n---h-        2021-03-15     08:48        5   foo.txt\r\nRemove-Item: S:\\powershell\\test\\Remove-SambaHidden544.ps1:23\r\nLine |\r\n  23 |  Remove-Item -LiteralPath $uncpath\r\n     |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     | You do not have sufficient access rights to perform this operation or the item is hidden, system, or\r\n     | read only.\r\n\r\nRemove-Item: S:\\powershell\\test\\Remove-SambaHidden544.ps1:25\r\nLine |\r\n  25 |  Remove-Item -Force -LiteralPath $uncpath\r\n     |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     | The handle is invalid. : '\\\\pnjnas\\Public\\foo.txt'\r\n````",
      "created_at": "2021-03-15T07:52:28Z",
      "updated_at": "2021-03-15T07:52:28Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You should use `-Force` switch to remove hidden file objects.\r\nAlso in OP you used a file name started with dot.",
      "created_at": "2021-03-15T08:02:16Z",
      "updated_at": "2021-03-15T08:03:33Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "That's exactly what I'm doing, and that triggers the \"invalid handle\" error.\r\n\r\nAnd that is the case _even_ if the filename doesn't start with \".\"",
      "created_at": "2021-03-15T08:20:16Z",
      "updated_at": "2021-03-15T08:21:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Thanks, I see.\r\nPlease try .Net methods to remove the file:\r\n```powershell\r\n$a=[io.fileinfo]::new('\\\\pnjnas\\Public\\foo.txt')\r\n$a.Delete()\r\n```",
      "created_at": "2021-03-15T08:38:20Z",
      "updated_at": "2021-03-15T08:38:20Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "This works:\r\n\r\n````\r\n$unixpath = '/data/Public/foo.txt'\r\n$uncpath = '\\\\pnjnas\\Public\\foo.txt'\r\n\r\nssh -n sto@pnjnas \"rm -f $unixpath\"\r\n\r\nif (Test-Path -LiteralPath $uncpath)\r\n{\r\n    Write-Host -ForegroundColor Red (\"Failed to remove test file\")\r\n    Exit(1)\r\n}\r\n\r\n\"foo\" | out-file $uncpath\r\n\r\nattrib -a $uncpath\r\nattrib +h $uncpath\r\n\r\nssh -n sto@pnjnas \"chmod 544 $unixpath\"\r\n\r\nssh -n sto@pnjnas \"ls -ld $unixpath\"\r\n\r\nGet-ChildItem -Force -LiteralPath $uncpath\r\n\r\nRemove-Item -LiteralPath $uncpath\r\n\r\nRemove-Item -Force -LiteralPath $uncpath\r\n\r\n$a=[io.fileinfo]::new($uncpath)\r\n$a.Delete()\r\n\r\nif (Test-Path -LiteralPath $uncpath)\r\n{\r\n    Write-Host -ForegroundColor Red (\"Failed to remove test file\")\r\n    Exit(1)\r\n}\r\nelse {\r\n    Write-Host -ForegroundColor Green (\"Test file removal succeeded\")\r\n}\r\n````\r\n\r\n\r\n````\r\n\r\n\r\nPS\u276f S:\\powershell\\test\\Remove-SambaHidden544.ps1\r\n-r-xr--r-- 1 sto sto 5 Mar 15 13:40 /data/Public/foo.txt\r\n\r\n    Directory:  Microsoft.PowerShell.Core\\FileSystem::\\\\pnjnas\\Musique\\Twonky\\Playlists\r\n\r\nMode                LastWriteTime     Length Name\r\n----                -------------     ------ ----\r\n---h-        2021-03-15     13:40        5   foo.txt\r\nRemove-Item: S:\\powershell\\test\\Remove-SambaHidden544.ps1:23\r\nLine |\r\n  23 |  Remove-Item -LiteralPath $uncpath\r\n     |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     | You do not have sufficient access rights to perform this operation or the item is hidden, system, or\r\n     | read only.\r\n\r\nRemove-Item: S:\\powershell\\test\\Remove-SambaHidden544.ps1:25\r\nLine |\r\n  25 |  Remove-Item -Force -LiteralPath $uncpath\r\n     |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     | The handle is invalid. : '\\\\pnjnas\\Public\\foo.txt'\r\n\r\nTest file removal succeeded\r\n````\r\n",
      "created_at": "2021-03-15T12:42:30Z",
      "updated_at": "2021-03-15T12:42:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Thanks! Since .Net API works I believe it is PowerShell bug.",
      "created_at": "2021-03-15T16:22:25Z",
      "updated_at": "2021-03-15T16:22:25Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "You're very welcome.\r\n\r\nNote: this is **not** linked to PowerShell running on Linux! \r\n\r\n![image](https://user-images.githubusercontent.com/12860484/111202598-57ea7700-85c4-11eb-8b8d-55a0bda174ee.png)\r\n",
      "created_at": "2021-03-15T18:25:18Z",
      "updated_at": "2021-03-15T18:26:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Note: this is **not** linked to PowerShell running on Linux!\r\n\r\nYes, I checked the code works well for Windows shares. So the label is only about Samba context.",
      "created_at": "2021-03-15T18:37:28Z",
      "updated_at": "2021-03-15T18:37:28Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Fine.\r\n\r\nDon't hesitate to involve me in testing (candidate) fixes!",
      "created_at": "2021-03-15T18:49:32Z",
      "updated_at": "2021-03-15T18:49:32Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "The issue here is the `chmod 544` is setting permissions for the Samba user to just read and execute without any write access. For a delete operation this is fine as you just need to make sure you open the file with that request right. When you do\r\n\r\n```powershell\r\n$a=[io.fileinfo]::new($uncpath)\r\n$a.Delete()\r\n\r\n# Or just\r\n[IO.File]::Delete($uncpath)\r\n```\r\n\r\nIt will open the file with the Delete access mask which should still be fine.\r\n\r\nWhen you do `Remove-Item ...` it is actually opening the file with read and write access to the attributes and setting the attributes to `Normal`. I assume this is because `-Force` is meant to force the deletion that fails when the `ReadOnly` flag is set.\r\n\r\n![image](https://user-images.githubusercontent.com/8462645/111221978-ef80b180-8626-11eb-8efb-2b47e3f98739.png)\r\n\r\nBecause the samba user does not have write access it is failing to open the handle to that file and thus fails to delete the attributes. The fact that it's a compound request is probably the reason why the error back is invalid handle rather than access denied because the last request failed with that.\r\n\r\nFor fixing this problem I see 2 ways this could be done\r\n\r\n* Ignore this particular error if it occurs and just try the delete anyway, make removing the `ReadOnly` flag a best effort and use the actual deletion request what is reported on\r\n* Try to delete the file first and then unset the attribute if that failed with access denied\r\n\r\nPersonally I think the first option is the way to go, it doesn't add/remove any extra steps than what is currently done and if the user is truly unable to delete the file then the error back from the deletion request will still reflect that. The 2nd option might be quicker in normal cases but it could add an extra step if it does need to remove the attribute (and it's not needed).",
      "created_at": "2021-03-15T21:19:21Z",
      "updated_at": "2021-03-15T21:19:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> The issue here is the `chmod 544` is setting permissions for the Samba user to just read and execute without any write access.\r\n\r\nCould you please share a screenshot with how Windows maps this to Windows permissions? I'd want to see Security tab for the Samba file. This could helps to emulate the behavior on Windows shares/local disk and to prepare more unified fix.\r\n\r\n> Personally I think the first option is the way to go\r\n\r\nI guess PowerShell has long way to the delete call - there is a globbing code, specific provider code - there may be file open operations due to the versatility of this code and it may not be easy to fix.\r\nFor example, this should works for `Remove-Item -Force -Path \\\\server\\share\\folder\\*\\file*.txt`",
      "created_at": "2021-03-16T04:34:00Z",
      "updated_at": "2021-03-16T04:41:39Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "So I have 2 files in a share\r\n\r\n```\r\n[root@083f251e5344 app]# ls -al /srv/samba/share/\r\ntotal 0\r\ndrwxr-xr-x. 1 smbuser smbgroup 34 Mar 16 04:43 .\r\ndrwxr-xr-x. 1 root    root     54 Mar 16 04:41 ..\r\n-r-xr--r--. 1 smbuser smbuser   0 Mar 16 04:42 foo.txt\r\n-rwxr--r--. 1 smbuser smbuser   0 Mar 16 04:43 normal.txt\r\n```\r\n\r\nFor `foo.txt` (chmod 544) here are the permissions in the Windows GUI\r\n\r\n![image](https://user-images.githubusercontent.com/8462645/111257320-a18b9e00-8666-11eb-85e5-c8dd085ff3fb.png)\r\n\r\nFor `normal.txt` (chmod 744) here are the permissions in the Windows GUI\r\n\r\n![image](https://user-images.githubusercontent.com/8462645/111257121-52456d80-8666-11eb-985a-7b8ee6e7ec87.png)\r\n\r\nSo this confirms that the Unix permissions affect the permissions that Samba uses over SMB. It makes sense as well because if the Samba user is unable to write to the file then it is unable to write data (like attributes) to it. You can even replicate this outside of PowerShell and get the same Invalid handle error message back by trying to change the attributes after removing write access on the remote side.\r\n\r\nIf you are wanting to emulate the fix just make sure that the user does not have the `Write Attributes` access mask because that is the access this particular operation is requesting and failing to request. You can see in the Wireshark screenshot that it's simply requesting WA/RA/Synchronize and WA is what is actually used in the `SetInfo` request with that handle.\r\n\r\n> there may be file open operations due to the versatility of this code and it may not be easy to fix.\r\n\r\nI don't think the proposed fix changes anything about that. All I'm proposing is to not make that 1 operation a failure but rather a at best operation. If it truly cannot delete the file because it does not have access (or it's in use) then the subsequent delete call will still fail and report that error back to the user.\r\n\r\n> For example, this should works for Remove-Item -Force -Path \\\\server\\share\\folder\\*\\file*.txt\r\n\r\nIn this case it does not, the problem lies with how the FileSystem provider tries to delete a file when `-Force` is present (it must be present here because the file is hidden). All this logic is contained in [RemoveFileSystemItem](https://github.com/PowerShell/PowerShell/blob/4c40ab11401ff2ca19ee1206b7654ed299f373e6/src/System.Management.Automation/namespaces/FileSystemProvider.cs#L3238) with the offending code in particular being https://github.com/PowerShell/PowerShell/blob/4c40ab11401ff2ca19ee1206b7654ed299f373e6/src/System.Management.Automation/namespaces/FileSystemProvider.cs#L3272-L3276.\r\n\r\nWe can see that if `-Force` is set it always removes the `ReadOnly | Hidden | System` access mask before it moves onto the actual delete. By ignoring the failure when setting the attributes here we would actually have a successful deletion. Even if removing the attributes failed because the user didn't have permissions that permission error would be raised in the subsequent Delete call. Going a step further it looks like we've already gotten the attributes of the file just above this. We could make this call optional depending on whether it has the `ReadOnly` flag. AFAIK there are no complications or extra steps required to delete a file that is `Hidden` or `System` so I'm not sure why those are being cleared out here. If a file had `ReadOnly` and the user did not have WA access then not even Windows will delete the file, there's nothing that PowerShell can do here for that particular use case.",
      "created_at": "2021-03-16T05:06:14Z",
      "updated_at": "2021-03-16T05:12:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> So I have 2 files in a share\r\n\r\nCan you confirm the files is hidden? Can you share info for non-hidden files?",
      "created_at": "2021-03-16T08:02:08Z",
      "updated_at": "2021-03-16T08:02:08Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "I can confirm, I set it myself. The fact it is hidden has no bearing over the permissions. It\u2019s only to expose this bug that happens when using `-Force` and the user does not have write attributes access to the file.",
      "created_at": "2021-03-16T08:14:36Z",
      "updated_at": "2021-03-16T08:14:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> AFAIK there are no complications or extra steps required to delete a file that is `Hidden` or `System` so I'm not sure why those are being cleared out here.\r\n\r\nIt is exclusive PowerShell smart feature :-) By design. We should keep this.\r\n\r\nSo the proposed fix is to put the \"if (force)\" to \"try-catch\" - I am inclined to accept this.",
      "created_at": "2021-03-16T08:36:13Z",
      "updated_at": "2021-03-16T08:36:13Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "I confirm that if the file is **not** hidden, `Remove-Item -Force` **still** fails with the \"invalid handle\" error:\r\n\r\n````\r\n$unixpath = '/data/Public/foo.txt'\r\n$uncpath = '\\\\pnjnas\\Public\\foo.txt'\r\n\r\nssh -n sto@pnjnas \"rm -f $unixpath\"\r\n\r\nif (Test-Path -LiteralPath $uncpath)\r\n{\r\n    Write-Host -ForegroundColor Red (\"Failed to remove test file\")\r\n    Exit(1)\r\n}\r\n\r\n\"foo\" | out-file $uncpath\r\n\r\n# attrib -a $uncpath\r\n# attrib +h $uncpath\r\n\r\nssh -n sto@pnjnas \"chmod 544 $unixpath\"\r\n\r\nssh -n sto@pnjnas \"ls -ld $unixpath\"\r\n\r\nGet-ChildItem -Force -LiteralPath $uncpath\r\n\r\n# Remove-Item -LiteralPath $uncpath\r\n\r\nRemove-Item -Force -LiteralPath $uncpath\r\n\r\n# $a=[io.fileinfo]::new($uncpath)\r\n# $a.Delete()\r\n\r\nif (Test-Path -LiteralPath $uncpath)\r\n{\r\n    Write-Host -ForegroundColor Red (\"Failed to remove test file\")\r\n    Exit(1)\r\n}\r\nelse {\r\n    Write-Host -ForegroundColor Green (\"Test file removal succeeded\")\r\n}\r\n````\r\n\r\n````\r\n\r\n\r\nPS\u276f S:\\powershell\\test\\Remove-SambaHidden544.ps1\r\n-r-xr--r-- 1 sto sto 5 Mar 16 09:41 /data/Public/foo.txt\r\n\r\n    Directory:  Microsoft.PowerShell.Core\\FileSystem::\\\\pnjnas\\Musique\\Twonky\\Playlists\r\n\r\nMode                LastWriteTime     Length Name\r\n----                -------------     ------ ----\r\n-a---        2021-03-16     09:41        5   foo.txt\r\nRemove-Item: S:\\powershell\\test\\Remove-SambaHidden544.ps1:25\r\nLine |\r\n  25 |  Remove-Item -Force -LiteralPath $uncpath\r\n     |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     | The handle is invalid. : '\\\\pnjnas\\Public\\foo.txt'\r\n\r\nFailed to remove test file\r\n````\r\n",
      "created_at": "2021-03-16T08:43:06Z",
      "updated_at": "2021-03-16T08:43:06Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "> For fixing this problem I see 2 ways this could be done\r\n> \r\n> * Ignore this particular error if it occurs and just try the delete anyway, make removing the `ReadOnly` flag a best effort and use the actual deletion request what is reported on\r\n> * Try to delete the file first and then unset the attribute if that failed with access denied\r\n> \r\n> Personally I think the first option is the way to go, it doesn't add/remove any extra steps than what is currently done and if the user is truly unable to delete the file then the error back from the deletion request will still reflect that. The 2nd option might be quicker in normal cases but it could add an extra step if it does need to remove the attribute (and it's not needed).\r\n\r\nWe need to make sure that in no circumstances the operation could fail but have the side effect of modifying the file's attributes.\r\n\r\n",
      "created_at": "2021-03-16T08:44:59Z",
      "updated_at": "2021-03-16T08:44:59Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Totally understand it\u2019s a feature of PowerShell :) My main point is that the code is unilaterally removing all 3 attributes (ReadOnly, System, Hidden) in this case but really it\u2019s only ReadOnly that needs to be removed. It could even be smarter and only remove the attribute if it\u2019s not currently set to reduce the number of operations that need to occur.\r\n\r\nI still think a try/catch is also good for this situation but both options will fix this problem.",
      "created_at": "2021-03-16T08:47:45Z",
      "updated_at": "2021-03-16T08:47:45Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "> We need to make sure that in no circumstances the operation could fail but have the side effect of modifying the file's attributes.\r\n\r\nThat\u2019s already handled in the current code. If the attributes were changed but the delete failed then the attributes are reset back.",
      "created_at": "2021-03-16T08:56:33Z",
      "updated_at": "2021-03-16T08:56:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Totally understand it\u2019s a feature of PowerShell :) My main point is that the code is unilaterally removing all 3 attributes (ReadOnly, System, Hidden) in this case but really it\u2019s only ReadOnly that needs to be removed. It could even be smarter and only remove the attribute if it\u2019s not currently set to reduce the number of operations that need to occur.\r\n> \r\n> I still think a try/catch is also good for this situation but both options will fix this problem.\r\n\r\nI see your point. Only concern is about how this attributes are mapped to Unix attributes by Samba (I'd want to get a confirmation that .Net API can remove files with the attributes). If there are no issues due to the mapping I think we can accept the fix with the two changes since the code has good test coverage.",
      "created_at": "2021-03-16T10:24:05Z",
      "updated_at": "2021-03-16T10:24:05Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "> Only concern is about how this attributes are mapped to Unix attributes by Samba\r\n\r\nFrom my understanding of Samba it can store the attributes `Hidden`, `ReadOnly`, `System`, and `Archive` in 2 different ways.\r\n\r\n* When [store dos attributes](https://www.samba.org/samba/docs/current/man-html/smb.conf.5.html#STOREDOSATTRIBUTES) is `yes` (default since 4.9\r\n  * The attributes are stored in an extended attribute which is like special metadata on a file\r\n* When `store dos attributes = no` and the relevant `map <attribute>` is set to `yes`\r\n  * Uses the mode of the file to determine if the 4 attributes are set\r\n  * `Hidden` - world executable (001)\r\n  * `System` - group executable (010)\r\n  * `Archive` - owner executable (100)\r\n  * `ReadOnly` - owner write (200) (there are slight variants here but doesn't matter as much)\r\n\r\nIn my case I'm testing against a Samba setup that has `store dos attributes = yes`, potentially @sba923 might be using the owner write bit hence the chmod example.\r\n\r\nI can confirm that when using `store dos attributes = yes` then .NET is able to delete the file when `Hidden`, `System`, `Archive` is set. It only fails when `ReadOnly` is set which aligns with how I understand Windows works. Even the documentation for [DeleteFile](https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-deletefilew#remarks) states\r\n\r\n> To delete a read-only file, first you must remove the read-only attribute.\r\n\r\nThere are no other mentions for the other attributes and considering SMB is a Microsoft protocol it would make sense that Samba replicates the same behaviour.\r\n\r\nI also tested `store dos attributes = no` with the relevant `map <attribute> = yes` options enabled and it has the same behaviour.",
      "created_at": "2021-03-16T12:11:41Z",
      "updated_at": "2021-03-16T12:11:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@jborean93 Thanks for your research! I think we can offer the community fix. ",
      "created_at": "2021-03-16T12:59:33Z",
      "updated_at": "2021-03-16T12:59:33Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "FWIW I'm running Samba version 4.11.6-Ubuntu and the config file contains nothing but a _commented-out_ `store dos attributes = yes`",
      "created_at": "2021-03-16T13:01:45Z",
      "updated_at": "2021-03-16T13:01:45Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Note that I also get `Remove-Item: The handle is invalid` upon a `Remove-Item -LiteralPath foo -Verbose -Force`, for a non-hidden file that is just not writable for the user used for the connection to the Samba share, i.e.:\r\n\r\n````\r\n-rwxrw-r-- 1 otheruser otheruser 21215 Jul 25  2010 foo\r\n\r\n````\r\n\r\nWhat's next towards a solution to this issue?",
      "created_at": "2021-09-17T08:52:32Z",
      "updated_at": "2021-09-17T08:52:32Z"
    }
  ],
  "created_at": "2021-03-14T14:38:52Z",
  "labels": [
    "Issue-Bug",
    "Up-for-Grabs",
    "WG-Cmdlets-Management",
    "WG-Engine-Providers",
    "Area-FileSystem-Provider"
  ],
  "number": 15022,
  "state": "open",
  "title": "Remove-Item -Force cannot delete hidden file on Samba",
  "updated_at": "2021-10-09T19:45:11Z"
}