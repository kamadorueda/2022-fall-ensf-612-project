{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12734",
  "author": "dkattan",
  "body": "# Steps to reproduce\r\nCreate \r\n```c#\r\nInitialSessionState iss = InitialSessionState.Create();\r\niss.LanguageMode = PSLanguageMode.ConstrainedLanguage;\r\niss.ImportPSModule(\"Microsoft.Powershell.Utility\",  \"Microsoft.PowerShell.Security\");\r\nRunspace myRunSpace = RunspaceFactory.CreateRunspace(_host, iss);\r\nmyRunSpace.Open();\r\nPowerShell powershell = PowerShell.Create();\r\npowershell.Runspace = myRunSpace;\r\npowershell.AddScript(\"Hello World\");\r\npowershell.Invoke();\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nHello World\r\n```\r\n\r\n# Actual behavior\r\nTryModuleAutoDiscovery calls LookupCommandInfo which calls TryModuleAutoDiscovery which calls LookupCommandInfo forever\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/9fe96f0d8e67a4d66e051b2f8d7fc4567f39dab0/src/System.Management.Automation/engine/CommandDiscovery.cs#L814\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/9fe96f0d8e67a4d66e051b2f8d7fc4567f39dab0/src/System.Management.Automation/engine/CommandDiscovery.cs#L1114\r\n\r\nThis is where the Exception gets swallowed allowing for the infinite loop when FileSystem provider is not present:\r\nhttps://github.com/PowerShell/PowerShell/blob/9fe96f0d8e67a4d66e051b2f8d7fc4567f39dab0/src/System.Management.Automation/engine/SessionStateProviderAPIs.cs#L756\r\n\r\n\r\n# Environment data\r\nPowerShell 7.1.0 release 3\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "@dkattan \r\n\r\nI've got a few notes on this topic:\r\n\r\n1. I have not been able to reproduce the stack overflow with just the code in OP.  (See the code below for what I've tried.)\r\n2. In our internal test suite I have witnessed `nestedModule` on [this line](https://github.com/PowerShell/PowerShell/blob/3c22b5a3080e3074adf9f8713bdd1543f31c23c7/src/System.Management.Automation/engine/Modules/PSModuleInfo.cs#L633) bounce between \"Microsoft.Powershell.Utility\" and \"Microsoft.PowerShell.Security\" on its way to the stack overflow.\r\n3. The infinite recursion causing the stack overflow in (2) seems very similar to the repro in #12039. \r\n\r\nI think this issue and #12039 might be closely related.  Do you have any other hints that might help me reproduce the stack overflow you are seeing?\r\n\r\n### PowerShell versions of the code in the OP\r\n\r\n```PowerShell\r\n$iss = [initialsessionstate]::Create()\r\n$iss.LanguageMode = [System.Management.Automation.PSLanguageMode]::ConstrainedLanguage\r\n$iss.ImportPSModule(\"Microsoft.Powershell.Utility\",  \"Microsoft.PowerShell.Security\")\r\n$rs = [runspacefactory]::CreateRunspace($Host,$iss)\r\n$rs.Open()\r\n$ps = [powershell]::Create()\r\n$ps.Runspace = $rs\r\n$ps.AddScript({'Hello World'}).Invoke()\r\n```\r\n\r\n```PowerShell\r\nAdd-Type @'\r\nusing System.Collections.ObjectModel;\r\nusing System.Management.Automation;\r\nusing System.Management.Automation.Host;\r\nusing System.Management.Automation.Runspaces;\r\npublic static class c {\r\n    public static Collection<PSObject> run(PSHost host) {\r\n        InitialSessionState iss = InitialSessionState.Create();\r\n        iss.LanguageMode = PSLanguageMode.ConstrainedLanguage;\r\n        iss.ImportPSModule(\"Microsoft.Powershell.Utility\",  \"Microsoft.PowerShell.Security\");\r\n        Runspace myRunSpace = RunspaceFactory.CreateRunspace(host,iss);\r\n        myRunSpace.Open();\r\n        PowerShell powershell = PowerShell.Create();\r\n        powershell.Runspace = myRunSpace;\r\n        powershell.AddScript(\"'Hello World'\");\r\n        return powershell.Invoke();\r\n    }\r\n}\r\n'@\r\n[c]::run($Host)\r\n```",
      "created_at": "2020-05-21T15:58:06Z",
      "updated_at": "2020-05-21T15:58:06Z"
    }
  ],
  "created_at": "2020-05-20T07:49:52Z",
  "labels": [
    "Issue-Question",
    "WG-Engine"
  ],
  "number": 12734,
  "state": "open",
  "title": "Circular reference leads to stack overflow when FileSystem provider is not loaded",
  "updated_at": "2020-05-21T15:58:07Z"
}