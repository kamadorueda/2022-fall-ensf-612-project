{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15995",
  "author": "sasha2048",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nType `Get-ChildItem C:\\` (or `gci C:\\`, or `ls C:\\`) and press <kbd>Tab</kbd>. You'll get some autocompletion.\r\n\r\nType `Get-ChildItem -Recurse C:\\` (or `gci -Recurse C:\\`, or `ls -Recurse C:\\`) and press <kbd>Tab</kbd>. You'll get some autocompletion.\r\n\r\nType `Get-ChildItem -r C:\\` (or `gci -r C:\\`, or `ls -r C:\\`) and press <kbd>Tab</kbd>. You **won't get any autocompletion**.\r\n\r\n(But that's very low-priority thing.)\r\n\r\n### Expected behavior\r\n\r\n```console\r\nPS> # Press Tab key after typing '\\' instead of Enter:\r\nPS> gci -r C:\\\r\n\r\nPS> # I expect to get something like:\r\nPS> gci -r 'C:\\$Recycle.Bin\\'\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nPS> # Press Tab key after typing '\\' instead of Enter:\r\nPS> gci -r C:\\\r\n\r\nPS> # I actually get nothing more than:\r\nPS> gci -r C:\\\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nPS> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.4\r\nPSEdition                      Core\r\nGitCommitId                    7.1.4\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "How pwsh has to interprete `-r` `-ReadOnly` or `-Recurse`?",
      "created_at": "2021-08-25T17:25:52Z",
      "updated_at": "2021-08-25T17:25:52Z"
    },
    {
      "author": "DarylGraves",
      "author_association": "CONTRIBUTOR",
      "body": "When you run `Get-ChildItem -r` it will interpret it as the `Recurse` switch parameter. However, if you use the tab autocompetition it suggests `$true` and `$false`. \r\n\r\n![image](https://user-images.githubusercontent.com/46203429/130840315-442b3e3f-923c-420b-af8c-eefc94c008aa.png)\r\n\r\nIf you then run `Get-ChildItem -r $true` or `Get-ChildItem -r $false` you get no results, even if `Get-ChildItem -Recurse` or `Get-ChildItem -r` would typically return something.\r\n\r\nIf you navigate to a file which is ReadOnly (In my situation I ran `Get-ChildItem C:\\Windows -Recurse | where isReadOnly -eq true` and found \"C:\\Windows\\Globalization\\ICU\\icudtl.dat\" was a read only file) and run `Get-ChildItem -Readonly` I get the file return. However, if I run `Get-Childitem -r $true` and `Get-Childitem -r $false` I still get no results.\r\n\r\nUnfortunately that's as far as I could get but hope it helps!",
      "created_at": "2021-08-25T17:49:31Z",
      "updated_at": "2021-08-25T21:21:36Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Neither `-ReadOnly` nor `-Recurse` take values themselves, since they're switch parameters. Not sure why tab completion is giving those values, but what's essentially going to happen if you do `Get-ChildItem -R $true` is that the `$true` will be converted to a string, since the positional value will be bound to `-Path` (which requires a string). That call is equivalent to doing `Get-ChildItem -R \"True\"`",
      "created_at": "2021-08-25T21:40:13Z",
      "updated_at": "2021-08-25T21:40:31Z"
    },
    {
      "author": "sasha2048",
      "author_association": "NONE",
      "body": "Just to summarize: `-r` works exactly as `-Recurse` (and I think that's perfect), but (unlike the autocompletion for `-Recurse`) autocompletion for `-r` misbehaves (autocompletion wrongly expects a boolean value after `-r`).",
      "created_at": "2021-08-26T06:23:13Z",
      "updated_at": "2021-08-26T06:30:41Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, that's super odd, appreciate the clarification! That definitely needs looked at. I'm not sure what the autocompletion is inferring there, but whatever it is, it doesn't make much sense. \ud83d\ude01 ",
      "created_at": "2021-08-26T12:30:06Z",
      "updated_at": "2021-08-26T12:30:06Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Alias for Recurse is \"s\" and it is not clear why `-r` works as `-Recurse`. \r\n\r\nI tried some switch parameters in other cmdlets and not found such weird behaviot.",
      "created_at": "2021-08-26T12:54:54Z",
      "updated_at": "2021-08-26T12:54:54Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I've always used `-R` for `-Recurse` as far as I can recall. Maybe it just works because there's no other non-dynamic parameter that has a similar enough name to collide with the shorthand.",
      "created_at": "2021-08-26T13:47:55Z",
      "updated_at": "2021-08-26T13:48:21Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "Explain the difference between a parameter and an option:\r\n```\r\n PS > (gcm gci).Parameters\r\n\r\nKey                 Value\r\n---                 -----\r\nPath                System.Management.Automation.ParameterMetadata\r\nLiteralPath         System.Management.Automation.ParameterMetadata\r\nFilter              System.Management.Automation.ParameterMetadata\r\nInclude             System.Management.Automation.ParameterMetadata\r\nExclude             System.Management.Automation.ParameterMetadata\r\nRecurse             System.Management.Automation.ParameterMetadata\r\nDepth               System.Management.Automation.ParameterMetadata\r\nForce               System.Management.Automation.ParameterMetadata\r\nName                System.Management.Automation.ParameterMetadata\r\nVerbose             System.Management.Automation.ParameterMetadata\r\nDebug               System.Management.Automation.ParameterMetadata\r\nErrorAction         System.Management.Automation.ParameterMetadata\r\nWarningAction       System.Management.Automation.ParameterMetadata\r\nInformationAction   System.Management.Automation.ParameterMetadata\r\nErrorVariable       System.Management.Automation.ParameterMetadata\r\nWarningVariable     System.Management.Automation.ParameterMetadata\r\nInformationVariable System.Management.Automation.ParameterMetadata\r\nOutVariable         System.Management.Automation.ParameterMetadata\r\nOutBuffer           System.Management.Automation.ParameterMetadata\r\nPipelineVariable    System.Management.Automation.ParameterMetadata\r\n\r\n PS > (gcm gci).Options\r\nReadOnly\r\n```",
      "created_at": "2021-08-27T10:41:18Z",
      "updated_at": "2021-08-27T10:41:18Z"
    },
    {
      "author": "sasha2048",
      "author_association": "NONE",
      "body": "@237dmitry, [Options](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.scopeditemoptions?view=powershellsdk-7.0.0) is unrelated here. And IMHO you should look `(gcm Get-ChildItem).Parameters`, not `(gcm gci).Parameters` (offtopic: `(gcm gci).Parameters` returns different and nondeterministic(!) result \u2014 **that looks like another bug**).",
      "created_at": "2021-08-27T12:01:42Z",
      "updated_at": "2021-08-27T12:35:30Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> Get-ChildInfo\r\n\r\nWhat is this? ` The term 'Get-ChildInfo' is not recognized as...`\r\n\r\nProbably `Get-ChildItem` ? Yes it returns different result. Strange.",
      "created_at": "2021-08-27T12:30:39Z",
      "updated_at": "2021-08-27T12:35:23Z"
    },
    {
      "author": "sasha2048",
      "author_association": "NONE",
      "body": "@237dmitry, yes (I've fixed the typo in the comment). And, as for me, the main problem is not that `(gcm gci).Parameters` and `(gcm Get-ChildItem).Parameters` return different results (IMHO that may be expected) but that `(gcm gci).Parameters` returns varying (non-deterministic) result (one time the result is value1 and another time the result is value2, with value1\u2260value2).",
      "created_at": "2021-08-27T12:37:41Z",
      "updated_at": "2021-08-27T12:43:18Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> one time the result is value1 and another time the result is value2\r\n\r\nI do not think so. `gci` is just an alias and the interpreter should handle it first. Most probably this is a bug.",
      "created_at": "2021-08-27T13:07:33Z",
      "updated_at": "2021-08-27T13:07:33Z"
    },
    {
      "author": "sasha2048",
      "author_association": "NONE",
      "body": "@237dmitry, `gcm gci` and `gcm Get-ChildItem` intentionally return different stuff. For example, `(gcm gci).CommandType` = `[System.Management.Automation.CommandTypes]::Alias`, while `(gcm Get-ChildItem).CommandType` = `[System.Management.Automation.CommandTypes]::Cmdlet`. So maybe the inequality between `(gcm gci).Parameters` and `(gcm Get-ChildItem).Parameters` is also by design (or maybe not).\r\n\r\nBut the thing that `(gcm gci).Parameters` returns different lists on different calls is certainly a bug.",
      "created_at": "2021-08-27T14:24:53Z",
      "updated_at": "2021-08-27T14:25:27Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "My guess is that's because Get-ChildItem (like most of the provider cmdlets) has dynamic parameters which change from provider to provider. So if you load a new provider, you might find new parameters showing up, I think.\r\n\r\nNot sure how avoidable that is... Probably a better way to get a full list of parameters would be to check the `Get-Help` results (which can also be queried like an object programatically if needed).\r\n\r\nThat would probably best be left for a different issue, though, I don't think that problem pertains too much to the current issue. \ud83d\ude42 ",
      "created_at": "2021-08-27T14:30:52Z",
      "updated_at": "2021-08-27T14:31:19Z"
    },
    {
      "author": "sasha2048",
      "author_association": "NONE",
      "body": "@vexx32, no, it doesn't seem to be related to loading new [providers](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_providers). Just try the following:\r\n\r\n    # First make sure to open a new PowerShell instance.\r\n    (gcm gci).Parameters.Count # will return 0\r\n    gcm Get-ChildItem | Out-Null\r\n    (gcm gci).Parameters.Count # will return 20 (and that's still less than `(gcm Get-ChildItem).Parameters.Count` returns)\r\n\r\nAnd this is related only to `gcm gci` (while `gcm Get-ChildItem` always returns the same result for me).\r\n\r\nBut of course you're right that it's unrelated to the current report (about `-r` autocompletion) at all.",
      "created_at": "2021-08-27T14:41:52Z",
      "updated_at": "2021-08-27T14:43:48Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "FWIW, if you use `-s` instead of `-r` you get proper tab completion",
      "created_at": "2022-08-31T20:00:27Z",
      "updated_at": "2022-08-31T20:00:27Z"
    },
    {
      "author": "theJasonHelmick",
      "author_association": "CONTRIBUTOR",
      "body": "The Working Group has reviewed this issue.  In the case of -r, and why it binds to -recurse instead of -ReadOnly, we are investigating a possible bug in Tab completion.",
      "created_at": "2022-08-31T20:35:30Z",
      "updated_at": "2022-08-31T20:35:30Z"
    },
    {
      "author": "sasha2048",
      "author_association": "NONE",
      "body": "I suppose, that binding `-r` to `-Recurse` is intentional and useful. (PowerShell's `ls -R` should work similarly to classic `ls -R`, as well as `rm -r` should work similarly to classic `rm -r`. Full compatibility is impossible, but compatibility in basic things is useful.)",
      "created_at": "2022-09-01T10:48:12Z",
      "updated_at": "2022-09-01T10:48:43Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "> Alias for Recurse is \"s\" and it is not clear why `-r` works as `-Recurse`.\r\n> \r\n> I tried some switch parameters in other cmdlets and not found such weird behaviour.\r\n\r\nThis is an interesting one as PowerShell not only allows you to be lazy with parameter aliases, it also allows you to be lazy in a number of different ways too, some that only make sense when you understand how the engine will decide what to run.\r\nAlso this particular cmdlet changes how it can work depending on what provider you are working with, so you'll get different results in FileSystem vs Registry for example.\r\n\r\nOne may think, and unfortunately would be wrong that if calling `Get-ChildItem -r` when in a filesystem provider would then look alphabetically, as that's a logical view.\r\nThis would mean that the parameter called would be `ReadOnly` not `Recurse`.\r\nHowever whilst PowerShell has Parameter Positioning (which actually isn't enforced on Recurse), and could have been why `Recurse` come up as the intended parameter, I think that because `Recurse` is a base parameter of `Get-ChildItem`, it will always be preferential to any additional parameters that are added by the provider it is working with, like `ReadOnly` in the FileSystem Provider and that's because that is how the author of the cmdlet designed it. ",
      "created_at": "2022-10-02T16:40:00Z",
      "updated_at": "2022-10-02T16:47:44Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "> When you run `Get-ChildItem -r` it will interpret it as the `Recurse` switch parameter. However, if you use the tab autocompetition it suggests `$true` and `$false`.\r\n> \r\n> ![image](https://user-images.githubusercontent.com/46203429/130840315-442b3e3f-923c-420b-af8c-eefc94c008aa.png)\r\n> \r\n> If you then run `Get-ChildItem -r $true` or `Get-ChildItem -r $false` you get no results, even if `Get-ChildItem -Recurse` or `Get-ChildItem -r` would typically return something.\r\n> \r\n> If you navigate to a file which is ReadOnly (In my situation I ran `Get-ChildItem C:\\Windows -Recurse | where isReadOnly -eq true` and found \"C:\\Windows\\Globalization\\ICU\\icudtl.dat\" was a read only file) and run `Get-ChildItem -Readonly` I get the file return. However, if I run `Get-Childitem -r $true` and `Get-Childitem -r $false` I still get no results.\r\n> \r\n> Unfortunately that's as far as I could get but hope it helps!\r\n\r\nThis only happens in the FileSystem Provider and not in say the Registry provider in my limited testing\r\n\r\nTherefore @theJasonHelmick I'm not sure that this is an issue for Tab Completion at all as I strongly believe that this is working entirely as designed but I think that we'd be more likely to find the root cause of this experience somewhere in the filesystem provider and how that & tab completion speak to each other than it being tab completion itself, does that make sense?",
      "created_at": "2022-10-02T16:46:37Z",
      "updated_at": "2022-10-02T16:50:32Z"
    },
    {
      "author": "theJasonHelmick",
      "author_association": "CONTRIBUTOR",
      "body": "@kilasuit - Makes perfect sense and thank you!",
      "created_at": "2022-10-17T19:43:09Z",
      "updated_at": "2022-10-17T19:43:09Z"
    }
  ],
  "created_at": "2021-08-25T14:59:14Z",
  "number": 15995,
  "state": "open",
  "title": "Get-ChildItem autocompletion stops to work when -r is used",
  "updated_at": "2022-10-17T19:43:09Z"
}