{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2384",
  "author": "MaximoTrinidad",
  "body": "<!--\n\nIf it is a bug report:\n- make sure you are able to repro it on the latest released version. \nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\n- Search the existing issues.\n- Refer to the [FAQ](../docs/FAQ.md).\n- Refer to the [known issues](../docs/KNOWNISSUES.md).\n- Fill out the following repro template\n\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\n-->\n## Steps to reproduce\n\nI've been trying to figured out to load some of the .NET Assemblies available under PowerShell ver. 6.0.0.0-alpha.10.\n\nIn Windows PowerShell 5.1 the following code runs OK:\n\n_$writer = New-Object XML.XmlTextWriter 'c:\\tempxml\\sample.xml', ([Text.Encoding]::Unicode)\n$writer.GetType().FullName_\n\nBut, in both Windows and Linux under PowerShell ver. 6.0.0.0-alpha.10 failed to run giving the error message:\nNew-Object : Cannot find type [XML.XmlTextWriter]: verify that the assembly containing this type is loaded.\n## Expected behavior\n\nTo run as expected.\n## Actual behavior\n\nScript line fails:\nNew-Object : Cannot find type [XML.XmlTextWriter]: verify that the assembly containing this type is loaded.\nAt line:1 char:11\n- $writer = New-Object XML.XmlTextWriter 'c:\\temp\\test3.xml', ([Text.En ...\n-           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  - CategoryInfo          : InvalidType: (:) [New-Object], PSArgumentException\n  - FullyQualifiedErrorId : TypeNotFound,Microsoft.PowerShell.Commands.NewObjectCommand\n\n![posh5assemissue_2016-09-29](https://cloud.githubusercontent.com/assets/19892435/18958264/12baaada-8630-11e6-833f-8c0d44797907.jpg)\n## Environment data\n\nWindows OS Name:  Microsoft Windows 10 Pro Insider Preview 10.0.14931 N/A Build 14931\n\nLinux: Ubuntu 16.04.1 LTS Desktop\n\n<!-- provide the output of $PSVersionTable -->\n\n``` powershell\nPS C:\\Program Files\\PowerShell\\6.0.0.10> $PSVersionTable\n\nName                           Value\n----                           -----\nPSVersion                      6.0.0-alpha\nWSManStackVersion              3.0\nBuildVersion                   3.0.0.0\nPSRemotingProtocolVersion      2.3\nCLRVersion\nGitCommitId                    v6.0.0-alpha.10\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\nSerializationVersion           1.1.0.1\nPSEdition                      Core\n\n\n```\n",
  "closed_at": "2016-12-08T00:59:21Z",
  "comments": [
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "I'm not sure that CoreFX has implemented it yet: https://docs.microsoft.com/en-us/dotnet/core/api/system.xml#System_Xml\n\nLeaving this open for someone else to validate though.\n",
      "created_at": "2016-09-29T16:25:04Z",
      "updated_at": "2016-09-29T16:25:04Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "I just wanted to be documented.  I tried to use other assemblies under both Linux and Windows PowerShell 6.0.0.0-alpha.10 folder. But wasn't able to create a PowerShell object using New-Object.\n\nI know that maybe this will be implemented sometime soon.\n\n:)\n",
      "created_at": "2016-09-29T17:48:53Z",
      "updated_at": "2016-09-29T17:48:53Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "@joeyaiello https://github.com/dotnet/corefx/tree/master/src/System.Xml.XmlDocument ??\n\n@MaximoTrinidad you can only use classes that have been ported to .net Core. This is a _well_ [known issue](https://github.com/PowerShell/PowerShell/blob/master/docs/KNOWNISSUES.md#net-framework-vs-net-core-framework)\n",
      "created_at": "2016-10-01T04:52:07Z",
      "updated_at": "2016-10-01T05:07:26Z"
    },
    {
      "author": "jgraafstra",
      "author_association": "NONE",
      "body": "I'm also seeing similar results on OS X. I installed the MySql package via 'install-package', and then referenced the assembly using Add-Type. The MySql package came from: https://docs.efproject.net/en/latest/providers/mysql/\n\nAdd-Type didn't return any errors. However, when trying to reference that assembly it fails with:\n\n```\nNew-Object : Cannot find type [MySql.Data.MySqlClient]: verify that the assembly containing this type is loaded.\nAt /Volumes/Main//development/scripts/test.ps1:53 char:15\n+ $connection = New-Object MySql.Data.MySqlClient\n+               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : InvalidType: (:) [New-Object], PSArgumentException\n    + FullyQualifiedErrorId : TypeNotFound,Microsoft.PowerShell.Commands.NewObjectCommand\n```\n\nExamining the $error stack trace ($error[0].Exception.StackTrace) returns this:\n\n`System.Management.Automation.MshCommandRuntime.ThrowTerminatingError(ErrorRecord errorRecord) in /PowerShell/src/System.Management.Automation/engine/MshCommandRuntime.cs:line 2053`\n\n```\n$PSVersionTable                                                                                                                                                          \nName                           Value                                                                                                                                                      \n----                           -----                                                                                                                                                      \nPSVersion                      6.0.0-alpha                                                                                                                                                \nPSEdition                      Core                                                                                                                                                       \nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                                                                                    \nBuildVersion                   3.0.0.0                                                                                                                                                    \nGitCommitId                    v6.0.0-alpha.10                                                                                                                                            \nCLRVersion                                                                                                                                                                                \nWSManStackVersion              3.0                                                                                                                                                        \nPSRemotingProtocolVersion      2.3                                                                                                                                                        \nSerializationVersion           1.1.0.1  \n```\n",
      "created_at": "2016-10-09T15:39:56Z",
      "updated_at": "2016-10-09T16:07:11Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "@jgraafstra You should have opened a new ticket. \n\nTHIS ticket isn't really about loading, it's about types that were built-in in _Full .NET_ and are not in PowerShell Core (in this particular case, it should be fixable, since the XML classes are in CoreFX now).\n\nHowever, _your_ problem is simply that you're doing it wrong \ud83d\ude09 \n\n`MySql.Data.MySqlClient` is a namespace, not a class.\n\nFirst you _need to load [**all** of the **dependencies**](https://www.nuget.org/packages/MySql.Data.EntityFrameworkCore#dependencySets) for NetStandard_, including their dependencies (e.g. the dependencies of the [MySql.Data library](https://www.nuget.org/packages/MySql.Data/7.0.5-IR21), recursively. And there are _a lot_ of them.\n\nTry checking to make sure you're not getting an **error** when you try to run `Add-Type` with -passthru ... run something like this:\n\n``` posh\nadd-type -Path .\\MySql.Data.dll -PassThru\n```\n\nIf you get an error, then you can look at what assembly is missing:\n\n``` posh\n$Error[0].Exception.LoaderExceptions\n```\n\nTo make it work, the simplest thing is to collect **all** the dependencies together in one folder.\nYou can do that like this:\n\n``` posh\nInstall-Package MySql.Data.EntityFrameworkCore -RequiredVersion 7.0.5-IR21 -Destination .\\MySql\nGet-ChildItem .\\MySql\\*\\lib\\netstandard1.*\\*.dll | Move-Item -Destination .\\MySql -Force\nGet-ChildItem .\\MySql\\ -Directory | Remove-Item -Recurse\n```\n\nNow that you have all the assemblies in the MySql folder, you can actually Add-Type successfully, and make a connection, like this:\n\n``` posh\nAdd-Type -Path .\\MySql\\MySql.Data.EntityFrameworkCore.dll -PassThru\n[MySql.Data.MySqlClient.MySqlConnection]::new(\"server=localhost; user id=root; password=admin; database=mydatabase\");\n```\n",
      "created_at": "2016-10-09T20:41:49Z",
      "updated_at": "2016-10-09T20:47:43Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Resolving as external given that this is a .NET Core problem. \n\nAlso, @jaykul, I don't actually see any implementation in the folder you posted. They're just empty type forwarders\n",
      "created_at": "2016-10-25T21:54:14Z",
      "updated_at": "2016-10-25T21:54:14Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Good point @joeyaiello, the implementation is in /future (e.g. https://github.com/dotnet/corefx/blob/future/src/System.Xml.XmlDocument/src/System/Xml/Dom/XmlDocument.cs )\n",
      "created_at": "2016-11-04T20:57:15Z",
      "updated_at": "2016-11-04T20:57:15Z"
    }
  ],
  "created_at": "2016-09-29T14:33:26Z",
  "number": 2384,
  "state": "closed",
  "title": "PowerShell won't load .NET Assemblies cross-platform",
  "updated_at": "2016-12-08T00:59:21Z"
}