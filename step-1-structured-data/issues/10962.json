{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10962",
  "author": "SteveL-MSFT",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\n.NET Core 3.0 supports building WinExe type which doesn't bind to console host.  This means that pwshw.exe launches like any GUI app (think notepad) and stdin/stdout/stderr isn't bound to pwshw.exe from wherever it is started.  This is conceptually equivalent to the old `wscript.exe` and `cscript.exe` tools.\r\n\r\nBuild script updated to also build a new `powershell-win-core-w` project as we still need the console pwsh.exe built.  The resulting pwshw.exe and other necessary files are copied to the pwsh.exe folder.\r\n\r\nThis is exposed as an experimental feature although it can't be disabled as it's a binary file.  `pwshw` is never attached a console, so `-OutputLog` is added to the host to write output to a file making it easier to trouble issues.  `pwshw` is always non-interactive even if the `-interactive` switch is used.  ConsoleHost UserInterfaces updated to write to OutputLog if set.  Code paths that try to access ActiveScreenBuffer have try...catch to fail silently when there is no console.  Tests updated to account for being run within pwshw where necessary.  Tests using pwsh and expecting console output is left as-is.  CI is updated to run all CI and Other tests both elevated and unelevated under this new host on Windows.\r\n\r\n> NOTE: scripts that call console APIs will fail as those APIs will throw that there is no console\r\n\r\n## PR Context\r\n\r\nFix https://github.com/PowerShell/PowerShell/issues/3028\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [x] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [x] Experimental feature name(s): `PSConsoleLessHost`\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [x] Issue filed: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/5039\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-08-19T03:56:49Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Re PR description - The PR doesn't fix initial request in #3028, it is implement another case.\r\nTo address #3028 I created #10965. I think we could implement `pwshw` in #10965 in the same way as we did an alias for `preview-pwsh`.",
      "created_at": "2019-11-01T13:48:26Z",
      "updated_at": "2019-11-01T13:48:26Z"
    },
    {
      "author": "alexbuzzbee",
      "author_association": "NONE",
      "body": "@iSazonov The consensus in the discussion for #3028 is that the solution is to create a `pwshw` variant instead of continuing to use `-WindowStyle Hidden`, and this PR does that fairly cleanly.",
      "created_at": "2019-11-01T15:27:53Z",
      "updated_at": "2019-11-01T15:27:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@alexbuzzbee pwshw is only one option from many in the complex topic. My PR seems add more flexibility and allow to experiment with console, non-console, pseudo-console and GUI modes, and also fix `-WindowStyle Hidden` scenario.",
      "created_at": "2019-11-01T17:39:58Z",
      "updated_at": "2019-11-01T17:39:58Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov I don't think the two are mutually exclusive",
      "created_at": "2019-11-01T17:56:55Z",
      "updated_at": "2019-11-01T17:56:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT I updated a description in my PR to clarify my vision.",
      "created_at": "2019-11-01T18:06:17Z",
      "updated_at": "2019-11-01T18:06:17Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT Some packaging changes are needed:\r\n\r\n1. Include pwshw for signing: https://github.com/PowerShell/PowerShell/blob/417cbd7a677eee1b08134d40a861cc558fdcaf66/tools/releaseBuild/signing.xml#L25\r\n1. WXS file needs to be updated\r\n1. Maybe some changes are needed in https://github.com/PowerShell/PowerShell/blob/master/tools/packaging/packaging.psm1\r\n1. Once these changes are done, please scheduled a full signed build on your branch in Azure DevOps.\n\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/11524380?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell\">PowerShell/PowerShell</a></strong></div><div>PowerShell for every system! Contribute to PowerShell/PowerShell development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2019-11-01T18:09:47Z",
      "updated_at": "2019-11-01T18:09:49Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT Could you please elaborate more about the expectation of `pwshw`? Like what will not work (will all console related operations not work?)",
      "created_at": "2019-11-01T18:20:54Z",
      "updated_at": "2019-11-01T18:20:54Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@daxian-dbw updated description",
      "created_at": "2019-11-01T18:24:00Z",
      "updated_at": "2019-11-01T18:24:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "No tests running for pwshw.",
      "created_at": "2019-11-01T18:24:40Z",
      "updated_at": "2019-11-01T18:24:40Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov what do you mean?  The additional test was run: https://powershell.visualstudio.com/PowerShell/_build/results?buildId=37337&view=logs&jobId=65e467a7-433b-584d-c8f4-72fcd5732f9d&taskId=6a14d04a-9a6d-5c41-f839-531117eeb032&lineStart=857&lineEnd=858&colStart=1&colEnd=1\r\n\r\nI don't think there's a need to rerun all tests with pwshw.exe, it's a compilation flag.",
      "created_at": "2019-11-01T18:31:46Z",
      "updated_at": "2019-11-01T18:31:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I don't think there's a need to rerun all tests with pwshw.exe, it's a compilation flag.\r\n\r\nWhy not if we expect that some features will do not work? Are you sure that all feature which must works really works? (In my PR (although another scenario) 66 tests failed in one job)",
      "created_at": "2019-11-01T18:38:54Z",
      "updated_at": "2019-11-01T18:40:32Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov I'll see about running the tests manually, anything expecting a console won't work as that's the design of being consoleless.  Otherwise, pwshw.exe doesn't do much by itself and still relies on ConsoleHost.dll.",
      "created_at": "2019-11-01T18:42:50Z",
      "updated_at": "2019-11-01T18:42:50Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@adityapatwardhan mscodehub build succeeded, will fix merge conflict after getting pwshw test results",
      "created_at": "2019-11-01T19:15:39Z",
      "updated_at": "2019-11-01T19:16:09Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT I tried the artifacts out of the mscodehub build. Does not seem to work :(\r\n\r\n![image](https://user-images.githubusercontent.com/12820925/68054701-23666b80-fcac-11e9-8f27-fdf38c81b204.png)\r\n",
      "created_at": "2019-11-01T20:34:11Z",
      "updated_at": "2019-11-01T20:34:11Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@adityapatwardhan `pwshw.exe` is a Windows App, so it's not associated with the console.  You'll need to have it redirect to a file within your command: pwshw -nop -c '$PSVersionTable > ~/out.txt'",
      "created_at": "2019-11-01T20:54:45Z",
      "updated_at": "2019-11-01T20:55:10Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Ok, definitely a problem here.  Write-Host immediately fails.  Need to have it handle the case there is no host.",
      "created_at": "2019-11-01T22:42:07Z",
      "updated_at": "2019-11-01T22:42:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Ok, definitely a problem here. Write-Host immediately fails. Need to have it handle the case there is no host.\r\n\r\nIn my PR I follow these cases: (1) AllocConsole() for normal pwsh.exe scenario, (2) AttachConsole(-1) to attach to parent process console in Hidden scenario. This doesn't pass all tests on CIs, I still don't investigate what tests must pass but failed.",
      "created_at": "2019-11-02T07:02:36Z",
      "updated_at": "2019-11-02T07:02:36Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "```none\r\nTests completed in 3676.82s\r\nTests Passed: 7644,\r\nFailed: 127,\r\nSkipped: 335,\r\nPending: 106,\r\nInconclusive: 2\r\n```\r\n\r\nHad to use Invoke-Pester since `Start-PSPester` expects pwsh.exe.  Will have to look through the failures.",
      "created_at": "2019-11-02T13:45:41Z",
      "updated_at": "2019-11-02T13:45:41Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Got `Start-PSPester` working with pwshw:\r\n\r\n```\r\nTests completed in 3371.7s\r\nTests Passed: 10512,\r\nFailed: 55,\r\nSkipped: 350,\r\nPending: 339,\r\nInconclusive: 2\r\n```\r\n\r\nA bunch of tests run pwsh, so need to change to run pwshw to get accurate test results.\r\n",
      "created_at": "2019-11-02T23:25:35Z",
      "updated_at": "2019-11-02T23:25:35Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Remaining Codacy issue is by-design, compiler complains if it's not initialized.",
      "created_at": "2019-11-06T00:34:53Z",
      "updated_at": "2019-11-06T00:34:53Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT what's the behaviour of Write-Host in headless environments likewthis currently? \r\n\r\nA fellow at the MS Ignite PowerShell booth brought it up to myself and @TylerLeonhardt today, just wanted to follow up.\r\n\r\nI know in the past Write-Host threw a terminating error if you used it in a headless environment (definitely not ideal for automation since it can cancel your script completely, and a lot of online examples include Write-Host so it's plausible end users will still have some in their pwshw scripts). Is that still current behaviour, or did that change on some point?\r\n\r\nIf it hasn't changed we should probably look at changing it (in another PR of course) so that users don't get hard-to-debug issues working with pwshw over a simple Write-Host.",
      "created_at": "2019-11-06T03:30:23Z",
      "updated_at": "2019-11-06T03:30:23Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "And also since `Write-Host` writes to the information stream, it does have utility in an environment without a host. ",
      "created_at": "2019-11-06T03:41:30Z",
      "updated_at": "2019-11-06T03:41:30Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "As part of these changes, write to the host are fine:\r\n\r\n```powershell\r\nPS> pwshw -outputlog .\\test.txt -c { write-host 'hello' }\r\n[38.89ms] C:\\Users\\slee\\test DevPwsh\r\nPS> cat .\\test.txt\r\nhello\r\n```\r\n",
      "created_at": "2019-11-06T04:11:40Z",
      "updated_at": "2019-11-06T04:11:40Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I don't think this is in a state to push into PS7, so it'll have to come in vNext.  If we follow conventions of some gui tools that accept cmdline args (wscript, msiexec), we need to support popping up a dialog window if there's an initialization error.",
      "created_at": "2019-11-08T16:51:10Z",
      "updated_at": "2019-11-08T16:51:10Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "I wish we could also handle the \"GUIs only in the Main Thread on macOS\" issue with this effort.\r\n\r\nI know the code change isnt related, but the concept (opt in to gui-friendly mode) is a good push.\r\n\r\nWould allow folks to actually make gui apps with PowerShell using native APIs",
      "created_at": "2019-11-08T17:07:55Z",
      "updated_at": "2019-11-08T17:08:08Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PoshChan-Staging retry linux",
      "created_at": "2020-02-26T05:15:06Z",
      "updated_at": "2020-02-26T05:15:06Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PoshChan-Staging retry linux",
      "created_at": "2020-02-26T05:21:57Z",
      "updated_at": "2020-02-26T05:21:57Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "There are a large number of conflicts to be resolved",
      "created_at": "2020-02-28T18:56:55Z",
      "updated_at": "2020-02-28T18:56:55Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Please don't mark milestone until merged",
      "created_at": "2020-05-22T17:42:16Z",
      "updated_at": "2020-05-22T17:42:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What is a future of the feature?",
      "created_at": "2020-06-08T09:24:27Z",
      "updated_at": "2020-06-08T09:24:27Z"
    },
    {
      "author": "DHowett",
      "author_association": "NONE",
      "body": "FYI - https://github.com/PowerShell/PowerShell/issues/3028#issuecomment-675714111 talks about the console team's work to address this particulat deficiency. It might take some time to come to all Windows versions, but `pwshw` is a permanent fixture you may need to support forever if you commit to it. :smile:",
      "created_at": "2020-08-18T23:34:59Z",
      "updated_at": "2020-08-18T23:34:59Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Closing this for now and waiting for Windows solution.",
      "created_at": "2020-08-19T03:56:49Z",
      "updated_at": "2020-08-19T03:56:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Even if we get this feature in Windows API in future we could merge 90% of this PR today and save your efforts.\r\n",
      "created_at": "2020-08-19T12:52:33Z",
      "updated_at": "2020-08-19T12:52:33Z"
    }
  ],
  "created_at": "2019-11-01T04:29:06Z",
  "number": 10962,
  "state": "closed",
  "title": "Add `pwshw` for console-less PowerShell on Windows",
  "updated_at": "2020-08-19T12:52:33Z"
}