{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13227",
  "author": "yecril71pl",
  "body": "\r\n\r\n<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\n<!-- Summarize your PR between here and the checklist. -->\r\n\r\nAdds a check for `git` command at build time.  Fixes #13222.\r\n\r\n## PR Context\r\n\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\nWe check that `dotnet` is available as a command.  Similarly, the build process requires `git` to be available.  You can get the sources without having `git` installed, or you may have used `wsl git`, in which case you will be unable to build \ud83d\ude1e\r\n## PR Checklist\r\n\r\n- [X] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [X] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [X] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [X] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [X] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-08-18T05:22:30Z",
  "comments": [
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "Interesting coincidence. Yesterday I was setting up PS build on a clean Ubuntu 16.04 LTS and got the very message about missing `git`; once I installed it through `apt-get`, the build started working. That means the check was already somewhere in the build code even without this change?",
      "created_at": "2020-07-22T20:38:57Z",
      "updated_at": "2020-07-22T20:38:57Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "I would risk a hypothesis that this means that Microsoft Build under Ubuntu can pronounce \"Command not found\"  instead of \"9009\".  It may be the case that the general approach under Linux is to address the readers so that they understand what is going on: under Microsoft Windows it is just the opposite.  General protection fault.",
      "created_at": "2020-07-22T21:01:15Z",
      "updated_at": "2020-07-22T21:01:15Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-07-30T14:00:18Z",
      "updated_at": "2020-07-30T14:00:18Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "The CI error in Windows Packaging reproed on re-run; it comes from `WindowsPowerShell\\Modules\\Pester\\4.10.1\\Pester.psm1`\r\n```\r\nThe running command stopped because the preference variable \"ErrorActionPreference\" or common parameter is set to Stop: The term 'Pester\\SafeGetCommand' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\nat <ScriptBlock>, C:\\Program Files\\WindowsPowerShell\\Modules\\Pester\\4.10.1\\Functions\\PesterState.ps1: line 74\r\nat New-PesterState, C:\\Program Files\\WindowsPowerShell\\Modules\\Pester\\4.10.1\\Functions\\PesterState.ps1: line 30\r\nat Invoke-Pester<End>, C:\\Program Files\\WindowsPowerShell\\Modules\\Pester\\4.10.1\\Pester.psm1: line 1094\r\nat Invoke-CIFinish, D:\\a\\1\\s\\tools\\ci.psm1: line 500\r\nat <ScriptBlock>, D:\\a\\_temp\\f4487122-8ca5-49e5-bbe5-f8c400147c9b.ps1: line 5\r\nat <ScriptBlock>, <No file>: line 1\r\nPester\\SafeGetCommand : The running command stopped because the preference variable \"ErrorActionPreference\" or common \r\nparameter is set to Stop: The term 'Pester\\SafeGetCommand' is not recognized as the name of a cmdlet, function, script \r\nfile, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct \r\nand try again.\r\nAt C:\\Program Files\\WindowsPowerShell\\Modules\\Pester\\4.10.1\\Functions\\PesterState.ps1:74 char:49\r\n+ ... $script:SafeCommands['New-Object'] = & (Pester\\SafeGetCommand) -Name  ...\r\n+                                             ~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : ObjectNotFound: (Pester\\SafeGetCommand:String) [], ActionPreferenceStopException\r\n    + FullyQualifiedErrorId : CommandNotFoundException\r\n```",
      "created_at": "2020-08-05T17:43:13Z",
      "updated_at": "2020-08-05T17:43:13Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "@yecril71pl I was told that a rebase is needed to fix CI error. Please rebase this and I'll merge it. Thank you.",
      "created_at": "2020-08-10T21:59:23Z",
      "updated_at": "2020-08-10T21:59:23Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "I am sorry for this mess, I never intended to add anything here.  I shall revert my changes ASAP.",
      "created_at": "2020-08-11T16:49:04Z",
      "updated_at": "2020-08-11T16:49:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@yecril71pl Nit: one simple way to rebase:\r\n```\r\ngit pull --rebase PowerShell master\r\n```\r\nand resolve conflicts if exist.",
      "created_at": "2020-08-12T04:47:52Z",
      "updated_at": "2020-08-12T04:47:52Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@iSazonov Perhaps we should add https://github.com/PowerShell/PowerShell-Docker/blob/master/.github/workflows/rebase.yml\r\n\r\nIt has issues until it's in the PR that you run it in, and doesn't help if there are conflicts, but it helps.\r\n\r\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/11524380?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell-Docker\">PowerShell/PowerShell-Docker</a></strong></div><div>Repository for building PowerShell Docker images. Contribute to PowerShell/PowerShell-Docker development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2020-08-13T18:01:15Z",
      "updated_at": "2020-08-13T18:02:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13 It is interesting!\r\nMy concerns:\r\n- merge conflicts\r\n- is it only for maintainers? If yes there can be conflicts if author add new commits locally without sync with remote. If no how authors discover the feature? And again local-remote conflicts.",
      "created_at": "2020-08-13T18:08:13Z",
      "updated_at": "2020-08-13T18:08:13Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "It doesn't resolve conflict, more for the case where tests or code is out of date.\r\n\r\nOnly if the person, who runs the command has permission to push to the branch.   So:\r\n\r\n- The author can run it always\r\n- The maintainer can run it, if the author gave permissions for maintainers to update the branch AND there are no workflow updates (workflow updates are not included in the permissions given to maintainers)\r\n\r\n\r\nGitHub indicates there are no conflicts here, so it should be helpful in this case.",
      "created_at": "2020-08-13T18:20:44Z",
      "updated_at": "2020-08-13T18:24:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13 I agree - If this already works for PowerShell-Docker this will work for the repo too. ",
      "created_at": "2020-08-13T18:25:39Z",
      "updated_at": "2020-08-13T18:25:39Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@iSazonov It's definitely not perfect, but in docker the tests often don't merge right without rebasing, even though there are no conflicts.  So, I used this.",
      "created_at": "2020-08-13T18:53:49Z",
      "updated_at": "2020-08-13T18:53:49Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.1.0-preview.7` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.7)\n",
      "created_at": "2020-09-08T22:49:46Z",
      "updated_at": "2020-09-08T22:49:46Z"
    }
  ],
  "created_at": "2020-07-21T15:23:58Z",
  "number": 13227,
  "state": "closed",
  "title": "Add a precheck for git to build.psm1",
  "updated_at": "2020-09-08T22:49:46Z"
}