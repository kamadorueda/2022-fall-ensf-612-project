{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7201",
  "author": "mklement0",
  "body": "A follow-up from #5715:\r\n\r\nStart/launch/open-something tasks can be categorized as follows:\r\n\r\n* (a) Start _executables_, using a variety of options (asynchronous or not, different credentials, hidden, ...).\r\n\r\n* (b) Start (open) _documents_ (including directories), asynchronously, using whatever GUI application is registered to handle them by default.\r\n\r\n* (c) Start (open) _URIs_, asynchronously, using whatever using whatever GUI application is registered to handle them by default.\r\n\r\nFor technical and historical reasons, in _Windows PowerShell_ it is `Start-Process` that handles _all 3_ categories, with category (b) _also_ handled by `Invoke-Item`.\r\n\r\nAs of PowerShell Core v6.1.0-preview.3, `Start-Process` cannot handle (b) and (c), but `Invoke-Item` covers (b), as in Windows PowerShell.\r\n\r\n.NET Core has since made the previously full-framework-only `.UseShellExecute` property available, so that #5715 can be resolved by integrating (b) and (c) functionality to `Start-Process` too, for symmetry with Windows PowerShell.\r\n\r\nHowever, going forward I suggest (also) reflecting the categories in _distinct cmdlets_, so as to:\r\n\r\n* make them easier to discover.\r\n\r\n* have clear separation of purpose.\r\n\r\n* have simpler syntax (no need to figure out which of the many `Start-Process` parameters make sense / are compatible with (b) and (c) functionality).\r\n\r\nIn practice this means:\r\n\r\n* Leave `Start-Process` as-is (after integrating (b) and (c)), but deemphasize (b) and (c) in the _documentation_ and instead point to `Start-Item` and `Start-Uri` (see below).\r\n\r\n* Introduce alias `Start-Item` for `Invoke-Item` - given the asynchronous nature of `Invoke-Item` (at least in the filesystem - it isn't currently implemented for other providers), it should always have been named `Start-Item`.\r\n\r\n  * On a side note: the reverse goes for `Start-Sleep`, which should have been named `Invoke-Sleep` - see #3990\r\n\r\n* Introduce a simple new `Start-Uri` cmdlet whose sole purpose is to cover (c).\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\nWritten as of:\r\n\r\n```powershell\r\nPowerShell Core v6.1.0-preview.3\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Nice analysis but not quite complete as PowerShell natively handles category a).e.g. `PS > netstat.exe` just works.  My intention when I added `Start-Process` was to handle the *exceptional* case where `Invoke-Item` and native commands were insufficient e.g. starting a background console process without relying on `ShellExecute` or jobs. It's a relatively thin layer on top of the `Process` class and that shows through (to the detriment of the cmdlet). IMHO, the fact that `Invoke-Item` doesn't handle URIs should be fixed first before we do anything with `Start-Process`. I'm OK with adding a specific discoverable command for URIs but should probably be `Invoke-URI` rather than `Start` since you can't stop it.",
      "created_at": "2018-06-28T18:05:20Z",
      "updated_at": "2018-06-28T18:05:20Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @BrucePay.\r\n\r\n> as PowerShell natively handles category a).e.g. PS > netstat.exe just works.\r\n\r\nYes, but the focus of my analysis were all the _other_ scenarios where an external program / resource is executed / opened: asynchronously (at least by default), with no (direct) connection to the standard streams.\r\n(Leaving aside that it's a common beginner mistake (for people with a C# background) to think that `Start-Process` is needed for the it-just-works-with-direct-invocation scenario, i.e., for synchronous execution of _console_ programs with the standard streams connected.)\r\n\r\n> before we do anything with `Start-Process`\r\n\r\nAside from completing the work to bring `Start-Process` on (near-)par with the way it works in Windows PowerShell (now that `.UseShellExecute` is available), I wasn't suggesting any changes to `Start-Process` - those who are used to how it works in Windows PowerShell and know that (b) and (c) functionality are built in can continue to use it as they're used to.\r\n\r\nMy suggestion was to _additionally_ give category (c) (URI launching) a distinct cmdlet (`Start-Uri`), and to provide an alias for the already (b)-focused `Invoke-Item`, so as to make its name comply with PowerShell's naming rules (see below).\r\n\r\nThe net effect would be that each category would have a distinct cmdlet (despite the fact that `Start-Process` can do it all).\r\n\r\n> the fact that Invoke-Item doesn't handle URIs should be fixed first\r\n\r\nMy concern is that the `Item` noun suggests too strongly that the cmdlet acts on _PS provider items_ only, which URIs are not, hence the suggestion to add a URI-focused cmdlet.\r\n\r\nHere too we could take the same approach however: add URI support to `Invoke-Item` as well, in addition to providing a dedicated `Start-Uri` cmdlet.\r\n\r\n>  should probably be `Invoke-URI` rather than `Start` since you can't stop it.\r\n\r\nI was thinking `Start` in order to reflect the _asynchronous_ nature of the operation. \r\n\r\nThat said, not being able to stop the operation is unusual in this case, so we could consider a \"non-committal\" alternative such as `Open` (a verb that is commonly applied to documents and URIs even outside of PowerShell).\r\n\r\nBy contrast, `Invoke` strikes me as not appropriate, based on what the [documentation](https://docs.microsoft.com/en-us/powershell/developer/cmdlet/approved-verbs-for-windows-powershell-commands) tells us (emphasis added):\r\n\r\n> `Invoke` vs. `Start`: The **`Invoke` verb** is used to perform an operation that is **generally a synchronous operation**, such as running a command. The **`Start` verb** is used to begin an operation that is **generally an asynchronous operation**, such as starting a process.\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-06-28T19:59:42Z",
      "updated_at": "2018-06-29T03:02:29Z"
    }
  ],
  "created_at": "2018-06-28T16:04:33Z",
  "number": 7201,
  "state": "open",
  "title": "For a conceptually clear start/launch/open user experience, provide dedicated Start-* cmdlets",
  "updated_at": "2018-06-29T03:02:29Z"
}