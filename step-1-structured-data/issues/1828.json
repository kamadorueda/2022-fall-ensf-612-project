{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1828",
  "author": "Jaykul",
  "body": "Even on Windows, it doesn't appear search the GAC the way `WindowsPowerShell` does, but only the local directory, so it's basically the same as `-Path`, right?\n\nRepro:\n\n```\nPS>Add-Type -AssemblyName System.Web\n\nAdd-Type : Cannot find path 'C:\\Users\\Joel\\System.Web.dll' because it\ndoes not exist.\nAt line:1 char:1\n+ Add-Type -AssemblyName System.Web\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : ObjectNotFound: (C:\\Users\\Joel\\System.Web.dll:String) [Add-Type], ItemNotFoundException\n    + FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.AddTypeCommand\n```\n",
  "closed_at": "2016-08-19T05:27:05Z",
  "comments": [
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@Jaykul This is correct, .NET Core applications are self-contained and do not search the GAC whatsoever. I believe that `-AssemblyName` should still search our `AssemblyLoadContext`'s `basePaths` (which should include `$PSHOME` as well as the folder of any imported module, and of course the current folder), so it (shouldn't) be \"useless\".\n\n/cc @daxian-dbw @vors \n",
      "created_at": "2016-08-17T18:25:48Z",
      "updated_at": "2016-08-17T18:25:48Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "GAC is a FullCLR concept, not supported in .NET Core. `Add-Type -AssemblyName` should work with all .NET Core libraries that powershell depends on, which are known as Trusted Platform Assemblies. (TPAs). \nFor example:\n\n```\nPS F:\\> Add-Type -AssemblyName System.IO.Compression -PassThru | ? IsPublic\n\nIsPublic IsSerial Name                                     BaseType\n-------- -------- ----                                     --------\nTrue     False    ZipArchive                               System.Object\nTrue     False    ZipArchiveEntry                          System.Object\nTrue     True     ZipArchiveMode                           System.Enum\nTrue     True     CompressionLevel                         System.Enum\nTrue     True     CompressionMode                          System.Enum\nTrue     False    DeflateStream                            System.IO.Stream\nTrue     False    GZipStream                               System.IO.Stream\n```\n\nIt's not actually searching the local folder, but it happens that, as a standalone application,  powershell has all its dependencies in the same folder, so it looks like `Add-Type -AssemblyName` only searches for the local directory. On NanoServer/IoT, all .NET Core libraries are put in a centralized location, not the same directory where powershell resides, and `Add-Type -AssemblyName` will continue to work.\n",
      "created_at": "2016-08-17T19:10:41Z",
      "updated_at": "2016-08-17T19:10:41Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Thank you, @Jaykul . @andschwa and @daxian-dbw elaborated the difference between `-Path` and `-AssemblyName`, so I'm going to close the issue. Feel free to reopen if you want to continue discussion.\n",
      "created_at": "2016-08-19T05:27:05Z",
      "updated_at": "2016-08-19T05:27:14Z"
    }
  ],
  "created_at": "2016-08-16T04:42:54Z",
  "labels": [
    "WG-Cmdlets"
  ],
  "number": 1828,
  "state": "closed",
  "title": "Add-Type -AssemblyName (on Windows) is useless?",
  "updated_at": "2016-08-19T05:27:14Z"
}