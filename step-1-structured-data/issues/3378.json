{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3378",
  "author": "billwolckenlmco",
  "body": "ConvertFrom-Json in prior releases of PowerShell left strings that looked like date/timestamps in JSON data alone and deserialized them as strings.  In v6.0.0-alpha.17 on Mac, they are being converted to DateTimes.  This a breaking change, and if it is an intended feature, it should be opt-in via a cmdlet parameter of ConvertFrom-Json.  (In my scenario, I do not want the automagic conversion, since I want the values preserved round-trip, which would be the case if they stayed as strings.  DateTime serialization in ConvertTo-Json assumes my current timezone and is changing the value, plus it formats the zone as \"-05:00\" unlike the original JSON's \"-0400\" format and as such the final result is rejected by the Java application it gets passed to.)\r\n\r\nHere is my demonstration script:\r\n\r\n    $jsonOriginal = '{\"info\":\"2017-01-02T03:04:05.678-0400\"}'\r\n    $obj = ConvertFrom-Json $jsonOriginal\r\n    write-host (\"Type in object:  \" + $obj.info.GetType().FullName)\r\n    $jsonFinal = ConvertTo-Json -compress $obj\r\n    $matches = $jsonOriginal -eq $jsonFinal\r\n    write-host \"Round trip preserved:  $matches\"\r\n    if (!$matches) {\r\n    \twrite-host \"Original:  $jsonOriginal\"\r\n    \twrite-host \"Final:  $jsonFinal\"\r\n    }\r\n    write-host \"Version:\"\r\n    $PSVersionTable\r\n\r\nOn v6.0.0-alpha.17 on Mac the output is:\r\n\r\n\tType in object:  System.DateTime\r\n\tRound trip preserved:  False\r\n\tOriginal:  {\"info\":\"2017-01-02T03:04:05.678-0400\"}\r\n\tFinal:  {\"info\":\"2017-01-02T02:04:05.678-05:00\"}\r\n\tVersion:\r\n\r\n\tName                           Value\r\n\t----                           -----\r\n\tPSVersion                      6.0.0-alpha\r\n\tPSEdition                      Core\r\n\tPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\n\tBuildVersion                   3.0.0.0\r\n\tGitCommitId                    v6.0.0-alpha.17\r\n\tCLRVersion\r\n\tWSManStackVersion              3.0\r\n\tPSRemotingProtocolVersion      2.3\r\n\tSerializationVersion           1.1.0.1\r\n\r\nOn PowerShell v5 on Windows 7, the output is:\r\n\r\n\tType in object:  System.String\r\n\tRound trip preserved:  True\r\n\tVersion:\r\n\t \r\n\tName                           Value\r\n\t----                           -----\r\n\tPSVersion                      5.0.10586.117\r\n\tPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\n\tBuildVersion                   10.0.10586.117\r\n\tCLRVersion                     4.0.30319.42000\r\n\tWSManStackVersion              3.0\r\n\tPSRemotingProtocolVersion      2.3\r\n\tSerializationVersion           1.1.0.1\r\n\r\nOn PowerShell v4, the output is:\r\n\r\n\tType in object:  System.String\r\n\tRound trip preserved:  True\r\n\tVersion:\r\n\t \r\n\tName                           Value\r\n\t----                           -----\r\n\tPSVersion                      4.0\r\n\tWSManStackVersion              3.0\r\n\tSerializationVersion           1.1.0.1\r\n\tCLRVersion                     4.0.30319.42000\r\n\tBuildVersion                   6.3.9600.17400\r\n\tPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0}\r\n\tPSRemotingProtocolVersion      2.2\r\n",
  "closed_at": "2017-04-22T01:06:57Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Windows PowerShell used .Net's JSON serializer.  Since that is not in coreFx, for PowerShell Core, we use Newtonsoft.Json which handles thing differently.  In the case of datetime, looking at the Newtonsoft code, they always convert to localtime although they can preserve the UTC.  However, they follow ISO 8601 datetime format which supports both a colon and no colon for the offset, but Newtonsoft decided to [always add the colon](https://github.com/JamesNK/Newtonsoft.Json/blob/aa5f28c09732db5fb3e316433547ea7cdecd8804/Src/Newtonsoft.Json/Utilities/DateTimeUtils.cs#L757).  I would suggest creating an issue in their repo to support a new DateTimeZoneHandling value so that at least the colon isn't inserted and then we can expose a parameter to support that.",
      "created_at": "2017-04-22T01:06:39Z",
      "updated_at": "2017-04-22T01:06:39Z"
    },
    {
      "author": "rmbolger",
      "author_association": "NONE",
      "body": "I realize this is a long closed issue at this point. But was this breaking change documented anywhere? I'm having trouble finding any references to it other than this issue. I'd expect it would be somewhere in the what's new, breaking changes, or known issues with PowerShell 6 docs.",
      "created_at": "2018-12-31T07:44:12Z",
      "updated_at": "2018-12-31T07:44:12Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The JSON cmdlets were re-written for .NET Core since .NET Core didn't have the .NET Framework JSON serializer and NewtonSoft.JSON isn't completely compatible with .NET Framework JSON serializer.  Not sure if this is documented, but I would suggest opening an issue in PowerShell-Docs repo if you don't find sufficient documentation on this.",
      "created_at": "2018-12-31T08:10:59Z",
      "updated_at": "2018-12-31T08:10:59Z"
    },
    {
      "author": "jazzdelightsme",
      "author_association": "CONTRIBUTOR",
      "body": "The fact that `ConvertFrom-Json` munges my input data *astounds* me (in a bad way).\r\n\r\nNow that .NET Core *does* have a good JSON serializer, can we please switch to it?\r\n\r\n(Can this Issue be reopened?)",
      "created_at": "2020-05-20T05:32:29Z",
      "updated_at": "2020-05-20T05:32:29Z"
    },
    {
      "author": "stuartio",
      "author_association": "NONE",
      "body": "+1 for reopening this. ConvertFrom-Json is changing zulu time timestamps to my timezone, which my API can't handle yet. Would be great to have an opt-out param for that.",
      "created_at": "2020-06-03T17:00:09Z",
      "updated_at": "2020-06-03T17:00:09Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "#11198 is currently in progress and I believe we have an existing issue tracking that more general work as well.\r\n\r\n@iSazonov should we keep this open to track this specific issue and ensure it gets resolved by those changes?",
      "created_at": "2020-06-03T20:20:21Z",
      "updated_at": "2020-06-03T20:20:29Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "For ConvertTo-Json PowerShell Committee approved breaking changes caused by moving to new .Net Json API.\r\nAfter getting the new ConvertTo-Json we will migrate ConverFrom-Json. Obviously we will follow .Net Json API with many breaking changes. So it makes no sense to track issues for old API.\r\n\r\nIf you think that timestamp deserialization is important you could:\r\n1. Check that is behavior of new .Net Json API\r\n2. If you see it is a wrong you should open an issue in .Net Runtime repo and discuss there while .Net 5.0 under active development.\r\n",
      "created_at": "2020-06-04T03:54:08Z",
      "updated_at": "2020-06-04T03:55:47Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "IMVHO this breaking change is.... broken \ud83d\ude1c\r\n\r\nSee https://github.com/PowerShell/PowerShell/issues/13592\r\n",
      "created_at": "2020-09-07T11:12:58Z",
      "updated_at": "2020-09-07T11:12:58Z"
    },
    {
      "author": "beatcracker",
      "author_association": "CONTRIBUTOR",
      "body": "My 2\uffe0- I found about this change when I've tried to write a unit test for a JSON file. I wanted to check if property containing time conforms to specific format (ISO 8601/RFC 3339). I was using `[datetime]::TryParseExact` and couldn't figure out why it fails until I looked into the debugger and saw that the property was converted to `[dateime]` instead of being a plain string.\r\n\r\nI get how this could benefit round trip scenarios, but I wish that `ConvertFrom-Json` had an option to disable this behavior. Perhaps a `-Raw` switch?",
      "created_at": "2020-11-03T22:35:42Z",
      "updated_at": "2020-11-03T22:35:42Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@beatcracker Please open new issue with examples, describe your scenario and proposal.",
      "created_at": "2020-11-04T05:52:50Z",
      "updated_at": "2020-11-04T05:52:50Z"
    }
  ],
  "created_at": "2017-03-21T02:08:38Z",
  "labels": [
    "Resolution-External",
    "WG-Cmdlets-Utility"
  ],
  "number": 3378,
  "state": "closed",
  "title": "ConvertFrom-Json breaking change:  automagically detects timestamps and deserializes to DateTime",
  "updated_at": "2020-11-04T05:52:51Z"
}