{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11872",
  "author": "xa0082249956",
  "body": "# Steps to reproduce\r\n\r\n```powershell\r\nGet-Item (Join-Path $env:SystemRoot explorer.exe) | % Target\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nC:\\Windows\\WinSxS\\amd64_microsoft-windows-explorer_<xxxxxxxx>\\explorer.exe\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\n(no output)\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-rc.2\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-rc.2\r\nOS                             Microsoft Windows 10.0.19564\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-02-26T10:51:01Z",
  "comments": [
    {
      "author": "NoMoreFood",
      "author_association": "CONTRIBUTOR",
      "body": "Hard links really don't have targets.  When you create a hard link (using something like mklink /h), you're really just passing in \"target\" file as a means to identity the underlying data on the file system to create a new named pointer to.  By definition, every named file has one hard link and you can have any number of hard links for a specific piece of data on the file system.   Junctions and symbolic links are a different story -- they have specific targets.",
      "created_at": "2020-02-25T02:21:13Z",
      "updated_at": "2020-02-25T02:21:13Z"
    },
    {
      "author": "xa0082249956",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks. I tried to make another hard link and found that there is no `Target` property too.\r\nHowever, I don't know why **Windows PowerShell** have the target property. Maybe because of some difference between .NET and .NET Core?",
      "created_at": "2020-02-25T11:52:20Z",
      "updated_at": "2020-02-25T11:52:20Z"
    },
    {
      "author": "NoMoreFood",
      "author_association": "CONTRIBUTOR",
      "body": "Windows PowerShell takes a sensible approach: it will return an array of hard links that are not the same as the file being queried.  So let's say I create two hard links called 'A' and 'B' that using 'C' as a reference.  In Windows PowerShell, I look at the Target property for 'A', I get an array of @('B','C'); if I look at 'B', I get an array of @('A','C'); if I look at 'C', I get an array of @('A','B').  \r\n\r\nLooking at the file system provider in PowerShell Core, I do not see any effort to enumerate hard links.  My guess is that this is due the desire to maintain feature parity between Linux and Windows. Linux does not have a great way to query all hard links associated with a file (i.e. you have to enumerate every file on physical volume to see if a file points to the same physical location).",
      "created_at": "2020-02-25T23:53:55Z",
      "updated_at": "2020-02-26T00:12:25Z"
    },
    {
      "author": "xa0082249956",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for your explanation! So I think the issue can be closed now.",
      "created_at": "2020-02-26T10:51:01Z",
      "updated_at": "2020-02-26T10:51:13Z"
    }
  ],
  "created_at": "2020-02-18T14:23:52Z",
  "labels": [
    "Issue-Question"
  ],
  "number": 11872,
  "state": "closed",
  "title": "No Target property of Hard links",
  "updated_at": "2020-02-26T10:51:13Z"
}