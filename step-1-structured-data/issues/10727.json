{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10727",
  "author": "SteveL-MSFT",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nBased on @PowerShell/powershell-committee discussion, we decided to change the cmdlet to `Get-Error`.  RFC to be updated.\r\n\r\nImplement `Get-Error` cmdlet to render errors/exceptions from $error or pipeline.  Rendering is recursive for nested objects for Exceptions, InvocationInfo, and Arrays otherwise it uses ToString().  Members that are empty or null are not shown.  Indentation is always 4 spaces for nested objects.  There is a whitelist of types for nested objects otherwise the output is unusable since most types in .NET are objects and many members are useful for programming but not for visual viewing.\r\n\r\nA new `FormatAccentColor` is introduced to highlight property names from their values.  This can be used later to add accents to tables and list formatting.  Removed some commented out unneeded code from ConciseView.  StackTraces given how long the strings are always left justified instead of indented (the whitespace at the beginning is part of the string, not trimming it).\r\n\r\n![img](https://i.imgur.com/CHPqIEv.png)\r\n\r\n## PR Context\r\n\r\nImplement `Get-Error` from https://github.com/PowerShell/PowerShell-RFC/pull/228\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [x] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [x] Experimental feature name(s): Microsoft.PowerShell.Utility.PSResolveErrorRecord\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [X] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [X] Issue filed: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/4904\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [X] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [X] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2019-10-15T21:32:15Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PoshChan please retry static",
      "created_at": "2019-10-10T04:00:37Z",
      "updated_at": "2019-10-10T04:00:37Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT, successfully started retry of `PowerShell-CI-static-analysis`",
      "created_at": "2019-10-10T04:00:50Z",
      "updated_at": "2019-10-10T04:00:50Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Love the new name, the use of color and the completely left-justified stack traces.  Nice!  Unfortunately, don't love so much the indentation approach to nested exceptions. It is a bit visually hard to follow and I don't think it scales past about 2 (maybe 3) nested exceptions.  \r\n\r\nWe've provided a command like this in the past in PSCX that shows nested exceptions in subsequent sections which I think is easier to follow visually and scales to any number of nested exceptions:\r\n```\r\nPSMessageDetails      :\r\nException             : System.Management.Automation.RuntimeException: Attempted to divide by zero. --->\r\n                        System.DivideByZeroException: Attempted to divide by zero.\r\n                           --- End of inner exception stack trace ---\r\n                           at System.Management.Automation.IntOps.Divide(Int32 lhs, Int32 rhs)\r\n                           at System.Dynamic.UpdateDelegates.UpdateAndExecute2[T0,T1,TRet](CallSite site, T0 arg0, T1                          arg1)\r\n                           at System.Management.Automation.Interpreter.DynamicInstruction`3.Run(InterpretedFrame                               frame)\r\n                           at\r\n                        System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame                          frame)\r\nTargetObject          :\r\nCategoryInfo          : NotSpecified: (:) [], RuntimeException\r\nFullyQualifiedErrorId : RuntimeException\r\nErrorDetails          :\r\nInvocationInfo        : System.Management.Automation.InvocationInfo\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\nPipelineIterationInfo : {}\r\n\r\nMyCommand             :\r\nBoundParameters       : {}\r\nUnboundArguments      : {}\r\nScriptLineNumber      : 1\r\nOffsetInLine          : 1\r\nHistoryId             : -1\r\nScriptName            :\r\nLine                  : 1/0\r\nPositionMessage       : At line:1 char:1\r\n                        + 1/0\r\n                        + ~~~\r\nPSScriptRoot          :\r\nPSCommandPath         :\r\nInvocationName        :\r\nPipelineLength        : 0\r\nPipelinePosition      : 0\r\nExpectingInput        : False\r\nCommandOrigin         : Internal\r\nDisplayScriptPosition :\r\n\r\nException at nesting level 0 ---------------------------------------------------\r\n\r\nErrorRecord                 : Attempted to divide by zero.\r\nWasThrownFromThrowStatement : False\r\nMessage                     : Attempted to divide by zero.\r\nData                        : {System.Management.Automation.Interpreter.InterpretedFrameInfo}\r\nInnerException              : System.DivideByZeroException: Attempted to divide by zero.\r\nTargetSite                  : System.Object Divide(Int32, Int32)\r\nStackTrace                  :    at System.Management.Automation.IntOps.Divide(Int32 lhs, Int32 rhs)\r\n                                 at System.Dynamic.UpdateDelegates.UpdateAndExecute2[T0,T1,TRet](CallSite site, T0                                   arg0, T1 arg1)\r\n                                 at\r\n                              System.Management.Automation.Interpreter.DynamicInstruction`3.Run(InterpretedFrame                                     frame)\r\n                                 at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(Inter                               pretedFrame frame)\r\nHelpLink                    :\r\nSource                      : System.Management.Automation\r\nHResult                     : -2146233087\r\n\r\nException at nesting level 1 ---------------------------------------------------\r\n\r\nMessage        : Attempted to divide by zero.\r\nData           : {}\r\nInnerException :\r\nTargetSite     :\r\nStackTrace     :\r\nHelpLink       :\r\nSource         :\r\nHResult        : -2147352558\r\n```\r\nNow, pair this approach with some coloring to highlight field names and nested exception separators and I think it would work very nicely.   ",
      "created_at": "2019-10-14T22:20:39Z",
      "updated_at": "2019-10-14T22:20:39Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@rkeithhill I get your feedback.  At this time, I'd like to get this out to users and get additional feedback.  We can still provide alternate views.  ",
      "created_at": "2019-10-15T16:21:11Z",
      "updated_at": "2019-10-15T16:21:11Z"
    },
    {
      "author": "manoj2994",
      "author_association": "NONE",
      "body": "So nice that it shows the the way of error and liked the way that null members are not shown,before while tracing errors in the console it is bit pain sometimes by calling members one by one to know the values and the members which  haven't  .but this shows up all the members only having values thats easy to trace.\r\n\r\nIndentation for the nested object is cool ,so that easy to find member to reside on which property.as @rkeithhill suggested about the output for nested object,i personally feel that would be bit confusing while tracking down",
      "created_at": "2019-10-17T06:33:29Z",
      "updated_at": "2019-10-17T06:33:29Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@manoj2994 please add your feedback to the RFC https://github.com/PowerShell/PowerShell-RFC/pull/228.  I think other visualizations will have their own pros and cons.  If an ErrorRecord has multiple nested Exceptions, showing them independently will lose the contextual information that indention provides.",
      "created_at": "2019-10-17T19:26:23Z",
      "updated_at": "2019-10-17T19:26:23Z"
    },
    {
      "author": "jpsnover",
      "author_association": "CONTRIBUTOR",
      "body": "This is the textbook example for the defined verb \"RESOLVE\"\r\nThat is why all previous community versions of this function are published as Resolve-Error.\r\nWe should follow the rules unless there is extra-ordinary circumstances.",
      "created_at": "2019-10-24T20:10:49Z",
      "updated_at": "2019-10-24T20:15:21Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@jpsnover the key problem is that AzPS already has a `Resolve-Error` cmdlet which already caused confusion with users when we originally called it `Resolve-ErrorRecord` (although ErrorRecord isn't entirely correct as some errors are pure Exceptions).",
      "created_at": "2019-10-24T20:42:00Z",
      "updated_at": "2019-10-24T20:42:00Z"
    }
  ],
  "created_at": "2019-10-08T03:28:45Z",
  "number": 10727,
  "state": "closed",
  "title": "Implement `Get-Error` cmdlet as Experimental Feature",
  "updated_at": "2019-10-30T11:43:52Z"
}