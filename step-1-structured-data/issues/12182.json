{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12182",
  "author": "p0W3RH311",
  "body": "process multiple property in same time simplified syntax\r\n\r\n```\r\nPS C:\\> $a = @{\r\n>>    test1 = 10\r\n>>    test2 = 20\r\n>>    test3 = 30\r\n>>   test4 = 40\r\n>> }\r\n```\r\n\r\nfo example for assign new value to properties types instead of\r\n\r\n```\r\n$a | % { \r\n   $_.test1 = 100\r\n   $_.test2 = 100\r\n   $_.test3 = 100\r\n   $_.test3 = 100\r\n }\r\n```\r\n\r\nwe use wildcard\r\n\r\n\r\nfor all properties \r\n\r\n```\r\n$a | % { \r\n   $_.test* = 100\r\n }\r\n\r\n```\r\nor for some property $_.test1 and $_.test2\r\n\r\n```\r\n$a | % { \r\n   $_.test*[12] = 100\r\n }\r\n```\r\n\r\nits powerful ",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "This would break parsing of the `*` operator which currently handles mathematical multiplication operations:\r\n```ps1\r\n$a.test = 100\r\n$a.test*= 100\r\n$a.test # result: 10000\r\n```\r\nEqually, since `*` is a valid property and hashtable key name if enclosed in quotes, this would be a breaking change here also:\r\n\r\n```ps1\r\n$a.\"test*\" = 100\r\n$a # will show the key \"test*\" with a value of 100\r\n```\r\n\r\nYou can currently retrieve properties with a wildcard: `[pscustomobject]$a | ForEach-Object -MemberName test*` but I'm not sure there's a way to set them.",
      "created_at": "2020-03-23T15:08:06Z",
      "updated_at": "2020-03-23T15:31:45Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Good points, @vexx32.\r\n\r\nAs for _setting_ wildcard-matched properties:\r\n\r\n```powershell\r\n$o = [pscustomobject] @{ test1 = 10; test2 = 20; test3 = 30 ; test4 = 40 }\r\n$o.psobject.Properties.Name -like 'test*' | % { $o.$_ = 100 }\r\n```\r\n\r\n",
      "created_at": "2020-03-23T15:27:22Z",
      "updated_at": "2020-03-23T15:27:22Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "There's also some built in syntax for it (sorta) with the \"magic\" methods:\r\n\r\n```powershell\r\n$o = [pscustomobject] @{ test1 = 10; test2 = 20; test3 = 30 ; test4 = 40 }\r\n$o.psobject.Properties.Match('test*').ForEach('Value', 100)\r\n$o\r\n# test1 test2 test3 test4\r\n# ----- ----- ----- -----\r\n#   100   100   100   100\r\n```",
      "created_at": "2020-03-23T16:59:31Z",
      "updated_at": "2020-03-23T16:59:31Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "That's handy, @SeeminglyScience.\r\n\r\nI assume you're calling it \"magic\" because the actual collection type returned by `.psobject.Properties` doesn't have this method. \r\n\r\nOut of curiosity: is there any way to systematically discover all this \"magic\" throughout PowerShell?\r\nIt would be great if the `Get-Member` enhancement discussed in #11798 would cover them all.",
      "created_at": "2020-03-23T20:33:01Z",
      "updated_at": "2020-03-23T22:43:53Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 the `.PSObject.Properties` member does have the `.Match()` method definition, ~~it's defined by the `ReadOnlyPSMemberInfoCollection` type, which is one of the types that that particular collection inherits~~. (thanks @mklement0 for the correction; it is in fact `PSMemberInfo<T>` that implements this member.)\r\n\r\nSo that won't really be covered there, but you can discover it the same way you would other things of that nature:\r\n\r\n```ps1\r\n$a = @{}\r\n\r\nGet-Member -InputObject $a.PSObject.Properties\r\n```",
      "created_at": "2020-03-23T22:03:14Z",
      "updated_at": "2020-03-23T23:00:03Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @vexx32  - I got myself confused  too:\r\n\r\nWhile `` ReadOnlyPSMemberInfoCollection`1 `` too has a `Match` method, it isn't the type providing the `Match` method on the type returned from `.psobject.Properties` (and `psobject.Members`) - instead, it is the type returned _from calling `Match`_ on the latter.\r\n\r\nThe type providing `Match` for `.psobject.Properties` is `` System.Management.Automation.PSMemberInfoCollection`1 ``, which the internal `` System.Management.Automation.PSMemberInfoIntegratingCollection`1 `` type that  `.psobject.Properties` returns an instance of inherits from.\r\n\r\nThat said, you're right in essence: `Get-Member`  is sufficient to discover the method.",
      "created_at": "2020-03-23T22:55:44Z",
      "updated_at": "2020-03-24T01:58:27Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "`PSMemberInfoCollection<>` is the base type that defines `Match`.  By magic I meant that the `ForEach` magic method can be used to set a value.",
      "created_at": "2020-03-24T01:00:00Z",
      "updated_at": "2020-03-24T01:00:00Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for clarifying, @SeeminglyScience (the word `Collection` was missing from the type name in my previous comment (since corrected) - `` System.Management.Automation.PSMemberInfoCollection`1 `` is indeed what I meant).\r\n\r\nAs for the word \"magic\", to close the tangent: let me again suggest the terminology \"automatic method\", following the pattern of \"automatic variable\" - after all, it's not magic; it is built in, and therefore _automatically available_.",
      "created_at": "2020-03-24T02:10:32Z",
      "updated_at": "2020-03-24T02:10:32Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "If someone googles automatic method they're not gonna find anything.  Get it official and documented and I'll switch \ud83d\ude42 \r\n\r\nI'll save any naming critiques for where ever that issue is",
      "created_at": "2020-03-24T02:17:46Z",
      "updated_at": "2020-03-24T02:17:46Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Yes, having _established, agreed-upon terminology_ is very important - not just  for discoverability, but also for rasing awareness of the underlying  _concepts_.\r\n\r\n_Establishing_ terminology is hard, not least because not everyone is focused on the importance of doing so.\r\n\r\nhttps://github.com/PowerShell/PowerShell/issues/11798#issuecomment-583426062 first proposed the term _automatic member_, and it seemed like an apt place to start the discussion, given the context of suggesting that such members for the first time be made _programmatically discoverable_.\r\n\r\nBut you're right: let us tackle this directly: please see https://github.com/MicrosoftDocs/PowerShell-Docs/issues/5627",
      "created_at": "2020-03-24T03:07:55Z",
      "updated_at": "2020-03-24T13:06:49Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "Related: **Enhance hash table syntax** #13817: `1..4 | New-Dictionary -KeyScriptBlock { \"Test$_\" } -ValueScriptBlock { 10 * $_ }`",
      "created_at": "2020-10-27T10:35:53Z",
      "updated_at": "2020-10-27T10:35:53Z"
    }
  ],
  "created_at": "2020-03-23T14:36:20Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Language"
  ],
  "number": 12182,
  "state": "open",
  "title": "new feature: wilcards everywere",
  "updated_at": "2022-06-06T18:46:13Z"
}