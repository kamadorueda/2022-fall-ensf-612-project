{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13857",
  "author": "larsthelord",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\nWrite-Output \"Case 1:\"\r\n$csv = '#;1;\"foo\";2\r\n1;1;\"bar\";2\r\n1;1;\"barbar\";2'\r\n$csv | ConvertFrom-Csv -Delimiter \";\"\r\n\r\nWrite-Output \"Case 2:\"\r\n$csv = '#;\"foo\";2\r\n1;\"bar\";2\r\n1;1;\"barbar\";2'\r\n$csv | ConvertFrom-Csv -Delimiter \";\"\r\n```\r\n\r\n## Expected behavior\r\n\r\n```none\r\nCase 1:\r\n# 1 \"foo\"  2\r\n- - -----  -\r\n1 1 bar    2\r\n1 1 barbar 2\r\n\r\nCase 2: \r\n# \"foo\"  2\r\n- -----  -\r\n1 bar    2\r\n1 barbar 2\r\n```\r\n\r\n## Actual behavior\r\n\r\n```none\r\nCase 1:\r\nConvertFrom-Csv:\r\nLine |\r\n   4 |  $csv | ConvertFrom-Csv -Delimiter \";\"\r\n     |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     | The member \"1\" is already present.\r\n\r\n\r\nCase 2:\r\n1 bar    2\r\n- ---    -\r\n1 barbar 2\r\n```\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.3\r\nPSEdition                      Core\r\nGitCommitId                    7.0.3\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-10-29T00:00:10Z",
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "If you do export-csv you'll see by default the first line says \r\n`#TypeName`\r\n\r\n`#;1;\"foo\";2`    \r\nIs creating a type name. then\r\n`1;1;\"bar\";2`\r\nIs creating field names 1, 1, bar and 2    \r\nSo when it tries to the add the values from the next row it tries to  a member named 1 twice. \r\n\r\nSo by design. \r\n\r\n",
      "created_at": "2020-10-23T22:54:00Z",
      "updated_at": "2020-10-23T22:54:00Z"
    },
    {
      "author": "larsthelord",
      "author_association": "NONE",
      "body": "Didn't the #TYPE stop being standard from PS 6.0 and onwards? \r\n\r\n> Beginning with PowerShell 6.0 the default behavior of Export-CSV is to not include the #TYPE information in the CSV and NoTypeInformation is implied. IncludeTypeInformation can be used to include the #TYPE Information and emulate the default behavior of Export-CSV prior to PowerShell 6.0.\r\nhttps://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/export-csv?view=powershell-7#notes\r\n\r\ninformation about #TYPE is also only documented in Export-Csv and Import-Csv, but not in ConvertFrom-Csv. \r\nShould the behaviour still be the same?\r\n\n\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/export-csv\">Export-Csv (Microsoft.PowerShell.Utility) - PowerShell</a></strong></div><div>The Export-CSV cmdlet creates a CSV file of the objects that you submit. Each object is a row that includes a comma-separated list of the object's property values. You can use the Export-CSV cmdlet to create spreadsheets and share data with programs that accept CSV files as input. Do not format objects before sending them to the Export-CSV cmdlet. If Export-CSV receives formatted objects the CSV file contains the format properties rather than the object properties. To export only selected properties of an object, use the Select-Object cmdlet. </div></blockquote>",
      "created_at": "2020-10-24T13:10:17Z",
      "updated_at": "2020-10-24T13:10:19Z"
    },
    {
      "author": "larsthelord",
      "author_association": "NONE",
      "body": "I also saw in ConvertFrom-Csv that this under description\r\n\r\n> You can also use the Export-Csv and Import-Csv cmdlets to convert objects to CSV strings in a file (and back). These cmdlets are the same as the ConvertTo-Csv and ConvertFrom-Csv cmdlets, except that they save the CSV strings in a file.\r\nhttps://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/convertfrom-csv?view=powershell-7#description\r\n\r\nIt seems that the underlying method doing the transformation is the same.\r\nI still find it weird that it would try to interpret a line starting with \"#\" as #TYPE in PowerShell 7\n\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/convertfrom-csv\">ConvertFrom-Csv (Microsoft.PowerShell.Utility) - PowerShell</a></strong></div><div>The ConvertFrom-Csv cmdlet creates objects from CSV variable-length strings that are generated by the ConvertTo-Csv cmdlet. You can use the parameters of this cmdlet to specify the column header row, which determines the property names of the resulting objects, to specify the item delimiter, or to direct this cmdlet to use the list separator for the current culture as the delimiter. The objects that ConvertFrom-Csv creates are CSV versions of the original objects. The property values of the CSV objects are string versions of the property values of the original objects. The CSV versions of the objects do not have any methods. You can also use the Export-Csv and Import-Csv cmdlets to convert objects to CSV strings in a file (and back). These cmdlets are the same as the ConvertTo-Csv and ConvertFrom-Csv cmdlets, except that they save the CSV strings in a file. </div></blockquote>",
      "created_at": "2020-10-24T13:14:17Z",
      "updated_at": "2020-10-24T13:14:19Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> Didn't the #TYPE stop being standard from PS 6.0 and onwards?\r\n> \r\n> > Beginning with PowerShell 6.0 the default behavior of Export-CSV is to not include the #TYPE information \r\n\r\nI'm still specifying -NoTypeInformation  everywhere, and that detail had been swapped out of working memory. \r\nEven so when Import- and Convert see a type, they process it. \r\n\r\n\r\n> information about #TYPE is also only documented in Export-Csv and Import-Csv, but not in ConvertFrom-Csv.\r\n> Should the behaviour still be the same?\r\n\r\nI've always understood that under the covers Import was  Get-Content | convertfrom. \r\n",
      "created_at": "2020-10-24T13:54:34Z",
      "updated_at": "2020-10-24T13:54:34Z"
    },
    {
      "author": "BrunoG87",
      "author_association": "NONE",
      "body": "$4Sent from my Samsung Galaxy smartphone.\n-------- Original message --------From: jhoneill <notifications@github.com> Date: 10/24/20  09:55  (GMT-05:00) To: PowerShell/PowerShell <PowerShell@noreply.github.com> Cc: Subscribed <subscribed@noreply.github.com> Subject: Re: [PowerShell/PowerShell] If # is the first character of the header, ConvertFrom-Csv behaves weirdly (#13857)\n\nDidn't the #TYPE stop being standard from PS 6.0 and onwards?\n\nBeginning with PowerShell 6.0 the default behavior of Export-CSV is to not include the #TYPE information\n\n\nI'm still specifying -NoTypeInformation  everywhere, and that detail had been swapped out of working memory.\nEven so when Import- and Convert see a type, they process it.\n\ninformation about #TYPE is also only documented in Export-Csv and Import-Csv, but not in ConvertFrom-Csv.\nShould the behaviour still be the same?\n\nI've always understood that under the covers Import was  Get-Content | convertfrom.\n",
      "created_at": "2020-10-24T14:11:34Z",
      "updated_at": "2020-10-24T14:11:37Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> I still find it weird that it would try to interpret a line starting with \"#\" as #TYPE in PowerShell 7\r\n\r\nIf it stopped doing so then scripts from and (worse) datafiles produced by PowerShell 5 would fail in newer versions. \r\nSomeone chose # as the type designator in the beta of Windows PowerShell 1 before it even had the name PowerShell and you have a dozen years of scripts and data to overturn. \r\n",
      "created_at": "2020-10-24T16:23:12Z",
      "updated_at": "2020-10-24T16:23:12Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@larsthelord \r\n\r\n`Import-Csv` and `ConvertFrom-Csv` should act consistently.\r\n\r\nIt is unfortunate that that consistent behavior is marred by a historical oddity kept around for backward compatibility, but that is a separate issue.\r\n\r\n* Backward compatibility was _broken_ in PowerShell Core when _writing_ CSV files, for a very good reason: including the `#TYPE` line should never have been the default, given that it results in _nonstandard_ CSV files, and that in virtually all cases you do _not_ want or need it.\r\n\r\n* Backward compatibility was _preserved_ for _reading_ such nonstandard CSV files, and that's what you're seeing; also, again for backward compatibility you can still produce such files in PowerShell Core, but only on an _opt-in_ basis, with `-IncludeTypeInformation`.\r\n\r\nThe current limitation is that your header row's _first_ column name _must not start with an`#`_  - whether or not the column name is double-quoted and whether or not there is leading whitespace (in Windows PowerShell quoting and leading whitespace matter), otherwise the first line will be interpreted as a type-annotation line, causing it to be ignored as a header row.\r\n\r\n**This implies that the check for whether the first line is a `#TYPE` annotation is needlessly lax, leading to unnecessary false positives**.\r\n\r\n@jhoneill, there is a way to deal with this without breaking backward compatibility - mostly:\r\n\r\nA simple improvement would be to check the first line with `line.StartsWith(\"#TYPE\", StringComparison.OrdinalIgnoreCase)` and only _then_ treat the line as a type annotation, because only then it is truly recognized as such (as reflected in the output objects containing the specified type name - both as-is (in PS Core) and with  a `CSV:` prefix (in both editions - in their `.pstypenames` ETS property).\r\n\r\nTechnically, this would amount to a breaking change, because a first line that starts with something like `#foo` would then be considered a header row, whereas it is currently quietly ignored.\r\n\r\nHowever, given that such a malformed `#`-prefixed lines shouldn't be present in CSV files (`Export-Csv` would never produce them), to me that falls into [Bucket 3: Unlikely Grey Area](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md#bucket-3-unlikely-grey-area) and is therefore still worth doing.\r\n\r\n(This still leaves the inability to have a header row's first column name start with `#TYPE`, but that is much less likely to occur and can be worked around by double-quoting the name; using a regex to make the test stricter could also help; e.g. \r\n`^#TYPE\\s+\\S+\\s*` (stricter versions are possible))\r\n\r\n",
      "created_at": "2020-10-24T17:13:34Z",
      "updated_at": "2020-10-24T17:30:41Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@mklement0   Agree.  Your suggestion is the sensible place between the current \"Treat everything with a # as a type even if is malformed\" and what I took the OP as suggesting (which he probably didn't mean) of \"Ignore #Type even when well formed\". It's a very unlikely breaker. It is far, far, more likely that something depends on the default behaviour of Windows PowerShell writing #Type  and produces invalid data files on 6 and 7 - and _that_ was considered low enough risk, and changing sufficiently obviously right and doable  that it went ahead. \r\n",
      "created_at": "2020-10-24T17:24:59Z",
      "updated_at": "2020-10-24T17:25:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I can confirm that it is by-design for the _edge_ case.\r\nOur intentions were to make the cmdlets (1) more smart (support standard headers), (2) more performance (we still hope to add more improvements here).\r\nIt is second question about the behavior I remember but we need to see an important business scenario to fix this in the repo otherwise it is more simple to use an workaround in custom script.\r\nIf there is a gap in docs please open new issue in PowerShell-Docs repository.\r\n",
      "created_at": "2020-10-26T07:01:41Z",
      "updated_at": "2020-10-26T07:01:41Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: A `#` line in above a CSV's file first row is definitely _not_ a standard header. \r\n\r\nWhile there is no formal standard for CSV, [RFC 4180](https://tools.ietf.org/html/rfc4180) describes a format followed by most implementations, which doesn't allow for annotations of this kind, so it's likely that other tools interpret such lines as _data_.\r\n\r\nIt is really unfortunate that PowerShell ever introduced this custom variation, which provides virtually no benefit and causes only problems.\r\n",
      "created_at": "2020-10-26T19:09:40Z",
      "updated_at": "2020-10-26T19:10:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 It is de-facto standard #2480 We support this because it is widely used.\r\n",
      "created_at": "2020-10-27T05:43:34Z",
      "updated_at": "2020-10-27T05:43:34Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Fair enough, @iSazonov (those are log files with specific formats that start with a block of `#`-prefixed metadata (comment) lines followed by  a separator-based format).\r\n\r\nHowever, what _doesn't_ make sense and is worth fixing is that a _double_-quoted `#` as the first non-whitespace token on a line is also considered a comment line:\r\n\r\n```powershell\r\nPS> @'\r\n\"#\",\"Why\",\"am\",\"I\",\"a\",\"comment?\"\r\n\"Col1\",\"Col2\",\"Col3\",\"Col4\"\r\n\"1\",\"2\",\"3\",\"4\"\r\n'@ | ConvertFrom-Csv \r\n\r\nCol1 Col2 Col3 Col4   # !! \"#\"... line was ignored, despite the # in double quotes\r\n---- ---- ---- ----\r\n1    2    3    4\r\n```\r\n\r\nThis means that you cannot round-trip something like the following, because the header row isn't recognized as such on re-import:\r\n\r\n```powershell\r\nPS> [pscustomobject]@{ '#' = 10; Name = 'foo' } | ConvertTo-Csv\r\n\"#\",\"Name\"\r\n\"10\",\"foo\"\r\n```\r\n\r\n```powershell\r\nPS> [pscustomobject]@{ '#' = 10; Name = 'foo' } | ConvertTo-Csv | ConvertFrom-Csv\r\n# !! No output, because the header row was ignored, and the first data row became the header row.\r\n```\r\n\r\nNote that `Export-Csv` / `Import-Csv` _always_ double-quote the fields, so once this is problem is fixed, at least CSV files created with these cmdlets would be immune to misinterpretation of `#`.\r\n",
      "created_at": "2020-10-27T14:28:52Z",
      "updated_at": "2020-10-27T14:28:52Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Just so we don't lose track of this: see #13907.\r\n",
      "created_at": "2020-10-27T15:51:36Z",
      "updated_at": "2020-10-27T15:51:36Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-10-29T00:00:07Z",
      "updated_at": "2020-10-29T00:00:07Z"
    }
  ],
  "created_at": "2020-10-23T18:27:15Z",
  "number": 13857,
  "state": "closed",
  "title": "If # is the first character of the header, ConvertFrom-Csv behaves weirdly",
  "updated_at": "2020-10-29T00:00:10Z"
}