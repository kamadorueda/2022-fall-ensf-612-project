{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7634",
  "author": "mklement0",
  "body": "Note: As of v6.1.0-rc.1, the console on _Windows_ is fundamentally not configured to use UTF-8 yet - see #7233\r\n\r\nWhile `[console]::InputEncoding` and `[console]::OutputEncoding` on macOS and Linux _are_ set to UTF-8, the specific encoding variant used is the one _with a BOM_, which is the wrong one (though I'm unclear on what the practical implications are, given that _streams_, not _files_ are typically involved).\r\n\r\nThis contrasts with automatic variable `$OutputEncoding` which correctly uses the _BOM-less_ UTF-8 encoding.\r\n\r\nSteps to reproduce (macOS and Linux)\r\n------------------\r\n\r\n```powershell\r\n[console]::InputEncoding.GetPreamble().Count, \r\n[console]::OutputEncoding.GetPreamble().Count, \r\n$OutputEncoding.GetPreamble().Count\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\n0\r\n0\r\n0\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\n3\r\n3\r\n0\r\n```\r\n\r\nThat is, the 3-byte BOM is unexpectedly present in `[console]::InputEncoding` and `[console]::OutputEncoding`\r\n\r\nEnvironment data\r\n----------------\r\n\r\n\r\n```powershell\r\nPowerShell Core v6.1.0-rc.1 on macOS 10.13.6\r\nPowerShell Core v6.1.0-rc.1 on Ubuntu 16.04.4 LTS\r\n```\r\n",
  "closed_at": "2018-09-01T00:05:24Z",
  "comments": [
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "Well it is not PowerShell issue, but .NET one.",
      "created_at": "2018-08-25T19:09:13Z",
      "updated_at": "2018-08-25T19:09:13Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": " I haven't looked into it, @PetSerAl - do you know where these encodings are assigned?",
      "created_at": "2018-08-25T19:14:11Z",
      "updated_at": "2018-08-25T19:14:11Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "@mklement0 I will reference Windows implementation. I am not sure if it behave the same on Linux or MacOS since it use platform dependent function on Windows.\r\n[Here](https://referencesource.microsoft.com/#mscorlib/system/console.cs,608) it calls native `GetConsoleOutputCP`. For UTF-8 it would return 65001. There are not way to distinguish BOM/BOM-less flavor of UTF-8. Underlying console simply does not support that.\r\nOn [the next line](https://referencesource.microsoft.com/#mscorlib/system/console.cs,609) it just calls `Encoding.GetEncoding` which return UTF-8 with BOM if you pass 65001 as argument:\r\n```powershell\r\n[Text.Encoding]::GetEncoding(65001).GetPreamble().Length # 3\r\n```",
      "created_at": "2018-08-25T19:30:14Z",
      "updated_at": "2018-08-25T19:30:14Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "Though, at quick glance on .NET Core implementation, it looks like it supposed to return BOM-less UTF-8 in this case, so maybe I was wrong and it have some PowerShell related issue.",
      "created_at": "2018-08-25T19:46:26Z",
      "updated_at": "2018-08-25T19:46:26Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @PetSerAl. Indeed, given that `[Text.Encoding]::Default.GetPreamble().Count` is `0` - i.e., the _BOM-less_ UTF-8 variant, it would stand to reason that the console use the same encoding.",
      "created_at": "2018-08-25T22:51:45Z",
      "updated_at": "2018-08-25T22:51:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It is here\r\nhttps://github.com/dotnet/corefx/blob/e1a33f4a1cc582f42bd5ae0f887bf1aa9878d493/src/System.Console/src/System/ConsolePal.Unix.cs#L612\r\nhttps://github.com/dotnet/corefx/blob/a10890f4ffe0fadf090c922578ba0e606ebdd16c/src/Common/src/System/Text/EncodingHelper.Unix.cs#L34\r\n\r\nSo on Unixes CoreFX looks in env variables \"LC_ALL\", \"LC_MESSAGES\", \"LANG\".\r\nIf the vars is absent the default is Utf8 without BOM. (` return enc ?? new UTF8Encoding(encoderShouldEmitUTF8Identifier: false);`)",
      "created_at": "2018-08-27T05:38:10Z",
      "updated_at": "2018-08-27T05:38:10Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for digging deeper, @iSazonov.\r\n\r\nIn the absence of said environment variables the behavior is correct, but it is broken if these environment variables are present and specify UTF-8 - and these environment variables are virtually never absent, because they are part of the current locale (culture) setting, and these days they indeed typically specify UTF-8.\r\n\r\nI've filed a CoreFx bug - see https://github.com/dotnet/corefx/issues/32004",
      "created_at": "2018-08-28T16:33:32Z",
      "updated_at": "2018-08-28T16:33:49Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 So this should be resolved as external correct?",
      "created_at": "2018-08-28T19:10:42Z",
      "updated_at": "2018-08-28T19:10:42Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@BrucePay: Indeed, thanks - should've made that clearer.",
      "created_at": "2018-08-28T21:05:50Z",
      "updated_at": "2018-08-28T21:06:11Z"
    }
  ],
  "created_at": "2018-08-25T18:24:43Z",
  "labels": [
    "WG-Interactive-Console",
    "Resolution-External"
  ],
  "number": 7634,
  "state": "closed",
  "title": "Terminal: [console]::InputEncoding and [console]::OutputEncoding are set to the wrong UTF-8 encoding (*with* BOM)",
  "updated_at": "2018-09-01T00:05:24Z"
}