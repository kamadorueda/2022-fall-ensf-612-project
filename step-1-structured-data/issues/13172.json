{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13172",
  "author": "yecril71pl",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\n[INT] '?'\r\n$ERROR | SELECT -FIRST 1 | % EXCEPTION | % InnerException | % Data | % Item([System.Management.Automation.Interpreter.InterpretedFrameInfo])\r\n```\r\n\r\n## Expected behavior\r\n\r\n```none\r\nMethodName    DebugInfo\r\n----------    ---------\r\n<ScriptBlock>\r\n```\r\n\r\n## Actual behavior\r\n\r\n```none\r\nInvalidOperation: Unable to find type [System.Management.Automation.Interpreter.InterpretedFrameInfo]\r\n```\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.2\r\nPSEdition                      Core\r\nGitCommitId                    7.0.2\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-07-18T00:00:14Z",
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "The value is a non-public type as well, typically that means it's not supported for external use.  What are you trying to do with it?",
      "created_at": "2020-07-14T13:09:01Z",
      "updated_at": "2020-07-14T13:09:01Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "I hoped to get the offending value from there.  Obviously, it is not there.  But having discoverable but inaccessible things in the public interface is very confusing and unfriendly.",
      "created_at": "2020-07-14T13:14:22Z",
      "updated_at": "2020-07-14T13:17:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I guess PowerShell has a lot of these things, and it\u2019s not clear why we need to fix this. For edge cases users can use a reflection.\r\n",
      "created_at": "2020-07-15T12:23:51Z",
      "updated_at": "2020-07-15T12:23:51Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "> it\u2019s not clear why we need to fix this\r\n\r\nBecause having discoverable but inaccessible things in the public interface is very confusing and unfriendly.\r\n",
      "created_at": "2020-07-15T13:03:39Z",
      "updated_at": "2020-07-15T13:03:39Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "There isn't really any other way to generically add data to any exception efficiently.\r\n\r\nThat said, I really don't think it's even used anymore.  If I had to guess it stopped being used when the `System.Linq.Expressions.Expression` stopped being able to generate `DebugInfo`'s in the switch to core (at least I'm pretty sure it can't anymore... not 100% on that).  Realistically though, it's in such an arcane section of the engine that I wouldn't bet money on it ever being removed. Especially since almost no one really ever looks at the `Data` property tbh.",
      "created_at": "2020-07-15T15:45:34Z",
      "updated_at": "2020-07-15T15:45:34Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "> There isn't really any other way to generically add data to any exception efficiently.\r\n\r\nThe problem will go away if you make `'System.Management.Automation.Interpreter.InterpretedFrameInfo'` the key.",
      "created_at": "2020-07-15T15:53:54Z",
      "updated_at": "2020-07-15T15:54:44Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "It's intentionally inaccessible though.  The point of using a non-public type as the key is to make it clear it's not supported for external use.",
      "created_at": "2020-07-15T16:51:17Z",
      "updated_at": "2020-07-15T16:51:17Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "> It's intentionally inaccessible though. The point of using a non-public type as the key is to make it clear it's not supported for external use.\r\n\r\nAnd that is exactly why we should not use it as the key.  It leaks the private type to the public.",
      "created_at": "2020-07-15T17:11:44Z",
      "updated_at": "2020-07-15T17:20:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "`System.Management.Automation.Interpreter` is a copy of old .Net code. `InterpretedFrameInfo` is still present in modern .Net and it is _internal_. We have an issue to move to new .Net Interpreter. So we should keep current code without changes. Any feature requests should be moved to .Net Runtime repository.",
      "created_at": "2020-07-16T04:12:02Z",
      "updated_at": "2020-07-16T04:12:02Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "> We have an issue to move to new .Net Interpreter. \r\n\r\nPlease show me, I am unable to find it.\r\n",
      "created_at": "2020-07-16T09:14:32Z",
      "updated_at": "2020-07-16T09:14:32Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov ~~Is it possible you're thinking of something else?  `Interpreter` is PowerShell's instruction runner, it is what is used when a script block does not yet meet the criteria for IL compilation.~~ **Edit:** They're right, it's a direct copy of `System.Linq.Expressions.Interpreter`.",
      "created_at": "2020-07-16T13:25:04Z",
      "updated_at": "2020-07-16T14:30:27Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "> @iSazonov Is it possible you're thinking of something else? `Interpreter` is PowerShell's instruction runner, it is what is used when a script block does not yet meet the criteria for IL compilation.\r\n\r\nAt least the stack trace is consistent with this hypothesis.",
      "created_at": "2020-07-16T13:38:08Z",
      "updated_at": "2020-07-16T13:38:08Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-07-18T00:00:13Z",
      "updated_at": "2020-07-18T00:00:13Z"
    }
  ],
  "created_at": "2020-07-14T12:31:26Z",
  "number": 13172,
  "state": "closed",
  "title": "InterpreterFrame indexes Data with a private type",
  "updated_at": "2020-08-18T22:02:50Z"
}