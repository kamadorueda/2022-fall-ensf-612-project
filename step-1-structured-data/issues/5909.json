{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5909",
  "author": "markekraus",
  "body": "This is a common code scenario:\r\n\r\n```powershell\r\niex (iwr $uri).content\r\n```\r\n\r\nIt is debatable whether this is good or bad practice,... but it is common enough that I think it may be worth adding this feature natively. I don't believe it changes the existing security landscape as you can already do the above. It would only make it easier. \r\n\r\nThis could be accomplished by either adding a parameter to `Invoke-WebRequest` (Perhaps, `-EvaluateContent` or something) or perhaps through a new web cmdlet (something like `Invoke-WebExpression`).\r\n\r\nAnyway, I'm opening this issue to discuss the merits and possibilities of adding this feature as well as possible design and implementations.",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@markekraus  I'd expect that `Issue-Enhancement` is for approved features.\r\n\r\n",
      "created_at": "2018-01-15T17:07:09Z",
      "updated_at": "2018-01-15T17:07:24Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov https://github.com/PowerShell/PowerShell/blob/31f76395525e526f140d8cfef6b070287e51bce4/docs/maintainers/issue-management.md#issue-and-pr-labels\r\n\r\n> `Issue-Enhancement:` the issue is more of a feature request than a bug.\r\n\r\nThis is a feature request.",
      "created_at": "2018-01-15T18:21:50Z",
      "updated_at": "2018-01-15T18:21:50Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "I'd rather discourage people from doing that, rather than make it easier...\r\n\r\nAlthough, if this new cmdlet or feature enforced code signing checks, execution policy, and scope (e.g. by downloading the file to disk, properly marking it as remote, and executing it without dot-sourcing), that would actually be a dramatic improvement over using `Invoke-Expression` with the contents of an `Invoke-WebRequest` ... which might make it worthwhile.  You'd end up with something similar to what you'd get if you invoked the file via a WebDav UNC path ...",
      "created_at": "2018-01-16T03:38:50Z",
      "updated_at": "2018-01-17T15:02:53Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "\ud83d\udc4d  to everything @Jaykul said. Additionally, it would be awesome if it we could get a confirmation prompt with an option to view the content of the script similar to chocolatey.",
      "created_at": "2018-01-17T17:29:32Z",
      "updated_at": "2018-01-17T17:29:32Z"
    },
    {
      "author": "al-ign",
      "author_association": "NONE",
      "body": "> It is debatable whether this is good or bad practice\r\n\r\nIt is definitely a bad practice, but oh so common nowadays, for ex. look at Ruby's rvm.\r\n\r\nPersonally, I would object adding -EvaluateContent parameter to iwr, because it will change what cmdlet **does** (it works with web resources, not executes some arbitrary code).\r\nAlso, I can't see a reason to create new cmdlet for that (Invoke-WebExpression), because at minimum it will duplicate full IWR functionality (you will need all that session, certificate and proxy parameters), without any real improvement to usage case.\r\nFinally, you can add some parameter to iex, but - you will need all that iwr stuff here (certs, session, proxy) too. \r\n\r\nSo, IMHO, it does not worth the hassle.\r\n\r\n(And mandatory \"If you want to 'simplify' your life - just make a wrapper function, and make sure it will be available everywhere where you need it\")\r\n\r\n> Although, if this new cmdlet or feature enforced code signing checks, execution policy, and scope (e.g. by downloading the file to disk, properly marking it as remote, and executing it without dot-sourcing)\r\n\r\ni.e. everybody just ignore it and will continue to use 'iex (iwr $uri).content'. So why waste time and resources?",
      "created_at": "2018-01-17T19:09:10Z",
      "updated_at": "2018-01-17T19:09:10Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "> It is definitely a bad practice\r\n\r\nThis argument fails when you realize that so many practices fall in this paradigm and the only difference is the protocol (HTTP/HTTPS vs SMB, SSH, SCP, etc). Even installing modules from the PS gallery fits this paradigm. Running code from sanctioned repos fits this paradigm.... really it exists in so many forms but people only complain about HTTP/HTTPS. *shrugs\r\n\r\n> Personally, I would object adding -EvaluateContent parameter ...\r\n\r\nI agree with that.\r\n\r\n> Also, I can't see a reason to create new cmdlet for that (Invoke-WebExpression), because at minimum it will duplicate full IWR functionality\r\n\r\nSo? Its not hard to do. The Web Cmdlet base class is flexible and designed for purpose built spin-offs like this. if I knew how to \"dot source\" in C# I could have a working cmdlet for this in maybe an hour or two. It's somewhat trivial to implement.\r\n\r\n> without any real improvement to usage case.\r\n\r\nDownloading and executing code doesn't have a use case?\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/9bedef0c62614029a8892b0477b15cafbe1040b3/tools/releaseBuild/Images/microsoft_powershell_windowsservercore/dockerInstall.psm1#L28\r\n\r\nBut seriously, it does. With what @Jaykul discussed implemented, storing signed code on a repo and executing it is a pretty legit use case.\r\n\r\n> Finally, you can add some parameter to iex, but\r\n\r\nI agree it doesn't belong there.\r\n\r\n> So, IMHO, it does not worth the hassle.\r\n\r\nYou don't have to code it. :) \r\n\r\n> So why waste time and resources?\r\n\r\nLet's not let convenience become irrelevant in this project.\r\n\r\nOne benefit of it being an included command with restrictions in place would be to encourage adoption of better practices. Yes, user can and will always fall back to iex+iwr. Yes, old documentation, misguded blogs, and Open Source Project will still have examples of iex+iwr. But, we have an opportunity to 1) make it easier for doing this kind of thing which is common and necessary (like it or not) 2) recommend best practices.\r\n\r\nThere is no need to worry about resources. This is an Open Source project. If this cmdlet were even accepted by the PowerShell Team, they would likely not be the ones implementing it. They would put it up for grabs and someone like myself could work on it. ",
      "created_at": "2018-01-17T19:44:09Z",
      "updated_at": "2018-01-17T19:44:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@markekraus I think you should address security concerns in the initial propose. Currently PowerShell engine keeps remote executions under very strict control.",
      "created_at": "2018-01-18T06:02:20Z",
      "updated_at": "2018-01-18T06:02:20Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "> Currently PowerShell engine keeps remote executions under very strict control.\r\n\r\nExcept when people use Invoke-Expression.\r\n\r\nWhat if there was a switch: `Invoke-Expression -AsRemoteCode` which forced treating the code as though it were being loaded from a webdav file share?  Then you wouldn't need to jump through hoops to get PowerShell to evaluate the signature...",
      "created_at": "2018-01-18T16:29:06Z",
      "updated_at": "2018-01-18T16:32:32Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I suggest adding a new parameter to `Invoke-Expression` that accepts a `HtmlWebResponseObject` so you can do:\r\n\r\n```\r\niwr $url | iex\r\n```\r\n\r\nThen you can add all the fancy validation logic in the parameter set that accepts the `HtmlWebResponseObject`.",
      "created_at": "2018-01-18T18:08:54Z",
      "updated_at": "2018-01-18T18:08:54Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Great idea, @lzybkr.\r\n\r\nI've accidentally created a duplicate issue #8816, where, after some discussion, the proposal is now to to enhance `Invoke-Command`, not `Invoke-Expression` (which, as discussed in the linked issue, has a number of problems and, perhaps more importantly, whose use we generally want to discourage).\r\n\r\nhttps://github.com/PowerShell/PowerShell/issues/8816#issuecomment-460886333 adapts your idea to use with `Invoke-Command`.",
      "created_at": "2019-02-06T03:10:13Z",
      "updated_at": "2019-02-06T03:10:13Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Since #8816 was closed as a duplicate, let me summarize it here:\r\n\r\nAdding the proposed functionality to `Invoke-Expression` seems ill-advised, for the following reasons:\r\n  * primarily, [we want to discourage `Invoke-Expression` use in general](https://blogs.msdn.microsoft.com/powershell/2011/06/03/invoke-expression-considered-harmful/).\r\n  * (a moot point, based on the above, but there are problems with `exit` handling, the inability to run in a child scope, and a couple of bugs, #8778 and #8815; @SteveL-MSFT came up with a clever workaround that addresses all issues except the `exit` behavior; e.g.: <br>`iex \"& { $(irm https://aka.ms/install-powershell.ps1) } -Preview\"`)\r\n  *  the command name doesn't quite convey the intent of the operation (that is, invoking a _script_)\r\n  \r\nEnhancing `Invoke-Command` is a more natural fit, given that a(n external) _script_ is a sub-type of a _command_.\r\n\r\nAdapting @lzybkr's idea would give us (using the URL of PowerShell's own installation script, with `-Preview` as a pass-thru argument):\r\n\r\n```powershell\r\n# Via the pipeline, using the existing -ArgumentList / -Args parameter to pass arguments through.\r\niwr https://aka.ms/install-powershell.ps1 | icm -- -Preview\r\n\r\n# Less conveniently, with direct argument (-WebRequest could bind positionally).\r\nicm -WebRequest (iwr https://aka.ms/install-powershell.ps1) -- -Preview\r\n```\r\n<sup>Note: I'm assuming that `-Preview` is _passed through_ to the target script via a `ValueFromRemainingArguments` parameter that collects all arguments not meant for `Invoke-Command` itself; preceding such pass-through arguments with `--` (which is itself removed by the parameter binder) disambiguates and makes the pass-through intent obvious; the alternative is to stick with having to pass pass-through arguments via `-ArgumentList` / `-Args`, but that is less convenient.</sup>\r\n\r\nBelow is a proof of concept written in PowerShell, temporarily named `icmw` / `Invoke-CommandFromWebRequest`; if you substitute `icmw` for `icm` in the above commands, they should work on all platforms and also in Windows PowerShell.  \r\nOn Windows, the execution policy is enforced, unless `-Force` is passed.\r\n\r\n\r\n```powershell\r\nSet-Alias icmw Invoke-CommandFromWebRequest\r\nfunction Invoke-CommandFromWebRequest {\r\n  <#\r\n  .SYNOPSIS\r\n    Executes a .ps1 script downloaded via Invoke-WebRequest.\r\n  .DESCRIPTION\r\n    Enables convenient direct execution of .ps1 scripts available online,\r\n    typically for running / bootstrapping installation tasks, via the output\r\n    from an Invoke-WebRequest call that retrieves the script.\r\n  .PARAMETER WebRequest\r\n    The result of an Invoke-WebRequest that downloads a .ps1 script\r\n    as a plain-text resource. Typically passed via the pipeline.\r\n  .PARAMETER ArgumentList\r\n    Arguments to pass to the downloaded script, if any. May be passed\r\n    as an array or as individual arguments.\r\n  .PARAMETER Force\r\n    On Windows, forces execution by bypassing the execution-policy check.\r\n    By default, the downloaded script is considered a remote (downloaded) file.\r\n  .EXAMPLE\r\n    Invoke-WebRequest https://aka.ms/install-powershell.ps1 | Invoke-WebCommand -Preview\r\n  \r\n    Downloads the PowerShell Core installation script and invokes with the -Preview switch.\r\n  #>\r\n    [CmdletBinding(PositionalBinding=$false)]\r\n    param(\r\n      [Parameter(Mandatory, ValueFromPipeline, Position=0)] [Microsoft.PowerShell.Commands.WebResponseObject] $WebRequest,\r\n      [Parameter(ValueFromRemainingArguments)] [Alias('Args')] [string[]] $ArgumentList,\r\n      [switch] $Force\r\n    )\r\n  \r\n    $ErrorActionPreference = 'Stop'\r\n  \r\n    $sourceUri = if ($PSVersionTable.PSEdition -eq 'Desktop') { $WebRequest.BaseResponse.ResponseUri.AbsoluteUri } \r\n    else                                                      { $WebRequest.BaseResponse.RequestMessage.RequestUri }\r\n    Write-Verbose \"Source URI: $sourceUri\"\r\n  \r\n    if ($sourceUri -notmatch '\\.ps1$') {\r\n      Throw \"Resource $sourceUri must be a .ps1 script file.\"\r\n    }\r\n  \r\n    # Save the web-request content to a temporary script file.  \r\n    $tmpScript = [IO.Path]::Combine([IO.Path]::GetTempPath(), [IO.Path]::GetRandomFileName(), (Split-Path -Leaf $sourceUri))\r\n    $null = New-Item -Type Directory -Path (Split-Path -Parent $tmpScript)\r\n    Write-Verbose \"Temporary script path: $tmpScript\"\r\n    Set-Content -Encoding Utf8 -LiteralPath $tmpScript -Value $WebRequest.Content\r\n    \r\n    # Unless -Force was passed, mark the script as downloaded from the web (on Windows).\r\n    if (-not $Force -and $env:OS -eq 'Windows_NT') {\r\n      Write-Verbose \"Marking as remote file: $tmpScript\"\r\n      \"[ZoneTransfer]`nZoneId=3`nHostUrl=$sourceUri\" | Set-Content -LiteralPath $tmpScript -Stream Zone.Identifier\r\n    }\r\n    \r\n    # Execute the temporary script with the pass-thru arguments.\r\n    try {\r\n      # Note: We need to Invoke-Expression so that the pass-thru args are\r\n      #       properly recognized by the script; just & $tmpScript @ArgumentList\r\n      #       won't work.\r\n      #       To make Invoke-Expression safe, we must ensure that all arguments\r\n      #       (but not parameter names) are single-quoted, unless they obviously don't need it.\r\n      #       NOTE: This is not a fully robust solution.\r\n      $cmdLine = \"& `\"$tmpScript`\" $(foreach ($arg in $ArgumentList) { if ($arg -match '^-?\\w+$') { $arg } else { \"'{0}'\" -f ($arg -replace \"'\", \"''\") } })\"\r\n      Write-Verbose \"Invoking: $cmdLine\"\r\n      Invoke-Expression $cmdLine\r\n    } finally {\r\n      Write-Verbose \"Cleaning up.\"\r\n      Remove-Item -EA Ignore -LiteralPath (Split-Path -Parent $tmpScript) -Recurse\r\n    }\r\n  \r\n}\r\n```\r\n\r\n----\r\n\r\nAs an aside, note @SteveL-MSFT's idea from the closed duplicate:\r\n\r\n> Perhaps an alternative would be to have a `HTTP:` and `HTTPS:` drive that would allow any cmdlet accept a file path to `GET` and `POST` to a URL? This would mean `Get-Content https://aka.ms/install-powershell.ps1` would work.\r\n\r\n@vexx32 responded:\r\n\r\n> implementing such a provider would be interesting to say the least. Love the idea, though!\r\n> [...]\r\n> If it can utilise the web cmdlets' base functionality, we can hopefully avoid having two disparate sets of features for the same thing here.\r\n\r\n@iSazonov demonstrated how this could simplify the use case at hand:\r\n\r\n```powershell\r\nicm https://aka.ms/install-powershell.ps1\r\n\r\n# or even:\r\n& https://aka.ms/install-powershell.ps1\r\n```\r\n\r\nHe suggests fleshing out the idea in an RFC and has created a reminder issue for one at #8835.\r\n\r\n",
      "created_at": "2019-02-06T21:21:09Z",
      "updated_at": "2020-01-31T19:51:51Z"
    }
  ],
  "created_at": "2018-01-15T15:53:06Z",
  "number": 5909,
  "state": "open",
  "title": "Add Direct Evaluation of Web Content as PS Code",
  "updated_at": "2020-01-31T19:51:51Z"
}