{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2846",
  "author": "MaximoTrinidad",
  "body": "<!--\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](../docs/FAQ.md).\r\n- Refer to the [known issues](../docs/KNOWNISSUES.md).\r\n- Fill out the following repro template\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\nCreate a script file and include the \" #requires -version 5\" line before the code. \r\nOpen PowerShell v6.0.0_Alpha-13 \r\nrun .scriptfile.ps1\r\n\r\nExpected behavior\r\n-----------------\r\nScript file will error-out with the message:\r\n\"... cannot be run because it contained a \"#requires\" statement for Windows PowerShell 5.0...\"\r\n\r\nActual behavior\r\n---------------\r\nIt continues to execute the script file.\r\n\r\nEnvironment data\r\n----------------\r\nOS: Windows 10 Pro Insider Preview 14971\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nPS C:\\Program Files\\PowerShell\\6.0.0.13> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nCLRVersion\r\nPSVersion                      6.0.0-alpha\r\nSerializationVersion           1.1.0.1\r\nBuildVersion                   3.0.0.0\r\nGitCommitId                    v6.0.0-alpha.13\r\nWSManStackVersion              3.0\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSEdition                      Core\r\nPSRemotingProtocolVersion      2.3\r\n\r\n```\r\n![psreqversionissue](https://cloud.githubusercontent.com/assets/19892435/20911771/851b07c2-bb38-11e6-866c-f01d8c9bf3f7.png)\r\n\r\n",
  "closed_at": "2018-03-23T19:35:05Z",
  "comments": [
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "#Requires -version has always meant that this is the minimum required version of powershell to run - so this is working as I would expect in powershell v6.0.0.13 & 5.1\r\n\r\n`\r\nHowever I'm confused as the behavior in the Windows PowerShell window in your screenshot goes against this completely although I can't replicate the behaviour and by the looks of it I'm on the same Windows 10 build 14971\r\n`\r\nForget the above - I misread the Screenshot and read it as requires v5 not v6 as it actually states",
      "created_at": "2016-12-07T14:44:31Z",
      "updated_at": "2016-12-08T03:22:08Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "My only purpose was to demonstrate a \"possible\" way to validate is the PowerShell script can run in PowerShell Open Source.  Now that we'll be creating \"cross-platform\" scripts, there must be a way to Windows PowerShell scripts in a PowerShell Open Source environment.\r\n\r\nIn the above image, in PowerShell v6.0.0.0-Alpha_13, I'm trying to execute an SMO Script that can only run in Windows PowerShell v5.x (so it has the \"#requires -version 5.0\".  The results is, PowerShell 6 ignores the '#requires -version' statement and try to run the SMO script.\r\n\r\nIn the other console, is Windows PowerShell but I just change the \"#requires -version\" from 5 to 6.  This was just the prevent the script to run.  In reality the SMO script will not run in PowerShell 6.\r\n\r\nI think it should be important that PowerShell Open Source could use the \"#requires \" statement.\r\n\r\nAny comments are welcome!!\r\n\r\n\r\n\r\n",
      "created_at": "2016-12-07T15:46:32Z",
      "updated_at": "2016-12-07T15:46:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think that PS 6.0 will only be released when it is fully compatible with previous versions. Now it is only `alfa`\r\n",
      "created_at": "2016-12-07T18:43:09Z",
      "updated_at": "2016-12-07T18:43:09Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "As noted, `#requires -version` means minimal version, not exact version.\r\n\r\nPSCore 6.0 engine is expected to be compatible, however, the error in the repro above is due to differences between FullCLR and CoreCLR.  At this point, PowerShell Core 6.0 is only planned to support CoreCLR which is our cross platform story.  .Net Standard 2.0 in the future should remove some of these compatibility issues between FullCLR and CoreCLR.\r\n\r\n",
      "created_at": "2016-12-08T01:10:59Z",
      "updated_at": "2016-12-08T01:10:59Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@iSazonov , I know is Alpha but, as of now, we can see that even the Alpha version has differences between the OS's.  I don't see PowerShell 6.0 been compatible with previous (Windows) version moving forward cross-platform. A lot would need to change on Windows side and too much has been invested.\r\nBut, that's my thought! ",
      "created_at": "2016-12-08T02:33:30Z",
      "updated_at": "2016-12-08T02:33:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@MaximoTrinidad  Feel free to report all incompatibilities you found. It will be a great contribution.",
      "created_at": "2016-12-08T03:50:05Z",
      "updated_at": "2016-12-08T03:50:05Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Sounds good! I will work on it and colllect what I find. \r\n\r\nThanks,\r\nMaximo",
      "created_at": "2016-12-08T03:54:29Z",
      "updated_at": "2016-12-08T03:54:29Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "To try and clear this up\r\n\r\n> In the above image, in PowerShell v6.0.0.0-Alpha_13, I'm trying to execute an SMO Script that can only run in Windows PowerShell v5.x (so it has the \"#requires -version 5.0\". The results is, PowerShell 6 ignores the '#requires -version' statement and try to run the SMO script.\r\n\r\nFirstly PSv6 doesn't \"ignore\" the requires statement at all due to the fact that it's not specifying that it will only run in the version specified but all versions beyond that one. So any and all scripts that have #Requires -version will work in versions of PowerShell beyond the version specified - therefore PowerShell v6.0.0.13 does respect this when you specify `#Requires -Version 5.0` as v6.0.0.13 is a higher version to v5. If you had specified `#Requires -Version 3.0` then that would means that the script will be able to run in PowerShell v3, v4, v5, v5.1 & v6 but it will not run in v1 or v2. To confirm this please check the about_requires help text.\r\n\r\nIf you have a script that you don't think will run in PowerShell v6 then I would suggest to adapt the below and place it at the top of the script so that it runs first and place the rest of the scripts logic within the else statement\r\n\r\n```powershell\r\nif ($iscoreclr) \r\n{Write-Warning 'This script will only run on the FullCLR version of PowerShell which is only currently available on Windows, Please rerun this script in the Full Version of PowerShell.'; break}\r\nelse\r\n{'Full'}\r\n```\r\nThis added to a script will check for the iscoreclr variable and if its true (on all current versions of PSv6 regardless of the OS it runs on including Windows) will stop the script from processing and provide the user a sensible warning message.\r\n\r\nI do recall a discussion (however I cannot find it now) where it was put forward that it may be benefit in extending the requires statement to include a max version so that you could include something like this as your requires statement\r\n\r\n```powershell\r\n#Requires -Version 5.0\r\n#Requires -MaxVersion 5.9\r\n```\r\nWhich of course would stop it running on PSv6 completely.\r\n\r\nI hope that has helped :-)",
      "created_at": "2016-12-08T04:01:22Z",
      "updated_at": "2016-12-08T04:01:22Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "I've opened [an RFC](https://github.com/PowerShell/PowerShell-RFC/pull/122) on updating the behaviour of `#requires`. Please feel free to comment in the PR.",
      "created_at": "2018-03-23T18:34:23Z",
      "updated_at": "2018-03-23T18:34:23Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Closing this as the behavior is expected.  Please refer to @rjmholt's RFC to discuss new behavior.",
      "created_at": "2018-03-23T19:35:05Z",
      "updated_at": "2018-03-23T19:35:05Z"
    }
  ],
  "created_at": "2016-12-06T03:19:11Z",
  "labels": [
    "WG-Engine",
    "Issue-Discussion",
    "Resolution-Answered"
  ],
  "number": 2846,
  "state": "closed",
  "title": "PowerShell v6.0.0_Alpha.13 ignoring the \"#requires -version\" statement",
  "updated_at": "2018-03-23T19:35:05Z"
}