{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14923",
  "author": "SteveL-MSFT",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nAdd support to `Start-PSBuild` with runtime `osx-arm64`.  Requires https://github.com/PowerShell/PowerShell-Native/pull/64 to be published first.  A local build of both works.  When looking for crossgen, there appears to be one found under `x64-arm64` folder which fails, but the one in the parent `tools` folder works so need to filter that out for when finding crossgen.\r\n\r\n## PR Context\r\n\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and opened an issue in the relevant tool repository. This may include:\r\n        - [ ] Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode\r\n        (which runs in a different PS Host).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n",
  "closed_at": "2021-03-09T20:09:32Z",
  "comments": [
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "So does this build a universal binary or just one compiled for arm64? Does it require any work from .NET, I remember reading something about M1 support in the new preview so assumed PowerShell had to wait for that.",
      "created_at": "2021-03-01T00:40:24Z",
      "updated_at": "2021-03-01T00:40:24Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@jborean93 This PR leverages dotnet to build M1 optimized binaries.  It depends on https://github.com/PowerShell/PowerShell-Native/pull/64 which builds universal native binaries for pwsh.  For \"universal binaries\" we could just have a MSIL non-crossgen'd package, but startup speed is greatly affected.",
      "created_at": "2021-03-01T00:48:33Z",
      "updated_at": "2021-03-01T00:49:31Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Awesome thanks for the info, will have to get a move on updating the mi fork to produce arm64 libraries so powershell can use them.",
      "created_at": "2021-03-01T00:51:31Z",
      "updated_at": "2021-03-01T00:51:31Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Would you submit another PR to update the release build or add that to this PR?",
      "created_at": "2021-03-02T00:39:18Z",
      "updated_at": "2021-03-02T00:39:18Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@TravisEz13 I can update this PR to also do the build, was using this to test locally",
      "created_at": "2021-03-02T01:11:23Z",
      "updated_at": "2021-03-02T01:11:23Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@TravisEz13 I spent some time looking at the yml and psm1 that does the build, but it's much more complicated now than the last time I made changes.  I would suggest having it integrated with the build as a separate PR.",
      "created_at": "2021-03-06T00:24:04Z",
      "updated_at": "2021-03-06T00:24:04Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT  is this ready to merge?  Don't we need the updated native nuget?",
      "created_at": "2021-03-08T18:37:34Z",
      "updated_at": "2021-03-08T18:37:34Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "The description says it is dependent on the PR in PS-Native repo. The NuGet package after merging that that PR has to be released too.",
      "created_at": "2021-03-08T18:41:07Z",
      "updated_at": "2021-03-08T18:41:07Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "For the full package to work, it requires the universal binary from powershell-native, however, this PR itself can be merged.  @anmenaga can you do a separate PR to enable building of the M1 pkg?",
      "created_at": "2021-03-09T18:23:59Z",
      "updated_at": "2021-03-09T18:23:59Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.2.0-preview.4` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0-preview.4)\n",
      "created_at": "2021-03-16T23:39:15Z",
      "updated_at": "2021-03-16T23:39:15Z"
    }
  ],
  "created_at": "2021-02-28T22:18:04Z",
  "number": 14923,
  "state": "closed",
  "title": "Enable building PowerShell for Apple M1 runtime",
  "updated_at": "2021-03-16T23:39:15Z"
}