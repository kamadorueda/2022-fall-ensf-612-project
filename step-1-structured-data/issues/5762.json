{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5762",
  "author": "daxian-dbw",
  "body": "## PR Summary\r\nAnother attempt to address #5643 \r\n\r\nThis design is to add the `ListExpression '@[]'` to PowerShell, which is similar to `ArrayExpression '@()'` but always returns a `List<object>`.\r\n\r\nPlease review with #5761 as a comparison, where list is supported as a `ListLiteralExpression`, similar to `ArrayLiteralExpression`.\r\n\r\n### A blocking issue\r\n`@[]` has a `SubExpression` like `'@()'` and `'$()'`. However, unlike the closing parenthesis character `')'`, the closing bracket character `']'` doesn't always force to start a new token, and it can be included in a generic token, meaning that `']'` can appear in a command name, argument, or function name. This makes it impossible for `@[dir]` to determine the ending of the list expression because `dir]` will be treated as a single generic token.\r\n\r\nThis PR adds the property `InListSubExpression` to `Tokenizer`, and makes `']'` a force-to-start-new-token character when `_tokenizer.InListSubExpression` is set. This approach solves the most common UX problem but is by no way perfect, for example, comparing to `@(funcHas[]inName)` or `@(dir has[]inpath)`, `@[funcHas[]inName]` and `@[dir has[]inpath]` won't work because the first `']'` will force the command name to end.\r\n\r\n**I couldn't find a less hacky solution without breaking changes (make `'['` and `']'` always not included by `GenericToken`). So I started to think what if we support list in PowerShell like the `ArrayLiteralExpression` instead of `@()`. In that case, a list can only contain `Expression` elements and hence command name, arguments, and function names won't be a problem for the ending bracket. #5761 was also submitted to support list as a `ListLiteralExpression`.**\r\n\r\n### Example\r\n```\r\n# an empty list\r\n> $l = @[]\r\n> $l.GetType()\r\n\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     True     List`1                                   System.Object\r\n```\r\n```\r\n# one element list, the element is a type\r\n> $l = @[[string]]\r\n> $l.Count\r\n1\r\n> $l[0]\r\n\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     True     String                                   System.Object\r\n```\r\n```\r\n# multi-element list\r\n> $l = @[$pid,2,$home,4]\r\n> $l.Count\r\n4\r\n> $l.GetType()\r\n\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     True     List`1                                   System.Object\r\n```\r\n```\r\n# arbitrary statements in @[], like @()\r\n> $l = @[dir]\r\n> $l.GetType()\r\n\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     True     List`1                                   System.Object\r\n\r\n> $l.Count\r\n30\r\n```\r\n\r\n## PR Checklist\r\n\r\nNote: Please mark anything not applicable to this PR `NA`.\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - [x] Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] User facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - [x] Issue filed - Issue link:\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n    - [ ] [Add `[feature]` if the change is significant or affectes feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n",
  "closed_at": "2018-01-22T19:38:10Z",
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "You could consider 2 character tokens.\r\n\r\nFor example, F# uses this syntax for an array literal:\r\n\r\n```f#\r\n[| 1; 2 |]\r\n```\r\n\r\nThere are other possibilities that probably aren't breaking changes, e.g. `[< 1, 2 >]`.\r\n\r\nThe key here is to use a second character that can't be in a command name.",
      "created_at": "2017-12-29T23:24:02Z",
      "updated_at": "2017-12-29T23:24:02Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@lzybkr that's a good idea! I didn't think in that way. It would be great if we can have `@[]` because it resembles the existing `@()` and `$()`, but I'm fine to have new token pairs for List support.\r\nI will start prototype with `[<>]`, and wait for more discussion at the same time.",
      "created_at": "2017-12-29T23:38:29Z",
      "updated_at": "2017-12-29T23:38:29Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The proposal now is to use a type accelerator `[list]` for `List<object>`, so that users can easily create a list using `$list = [list]@(...)`. This way, we can avoid the issue we have here, but still provide an easy way to create a list. Given that, I will close this PR. Please see #5643 for more discussions.",
      "created_at": "2018-01-22T19:38:09Z",
      "updated_at": "2018-01-22T19:38:09Z"
    }
  ],
  "created_at": "2017-12-29T22:21:46Z",
  "number": 5762,
  "state": "closed",
  "title": "[WIP] Support ListExpression '@[]' in PowerShell",
  "updated_at": "2018-04-03T19:24:11Z"
}