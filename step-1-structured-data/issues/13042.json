{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13042",
  "author": "wi-fr",
  "body": "## Steps to reproduce\r\n\r\n[void][Windows.Storage.StorageFile, Windows.Storage, ContentType=WindowsRuntime]\r\n\r\n[void][Windows.Graphics.Imaging.BitmapDecoder, Windows.Graphics, ContentType=WindowsRuntime]\r\n\r\n## Expected behavior\r\n\r\nWinRT assemblies are loaded. \r\n\r\n## Actual behavior\r\n\r\nInvalidOperation: Unable to find type [Windows.Storage.StorageFile,Windows.Storage, ContentType=WindowsRuntime].\r\n\r\nInvalidOperation: Unable to find type [Windows.Graphics.Imaging.BitmapDecoder,Windows.Graphics, ContentType=WindowsRuntime].\r\n\r\n## Environment data\r\n\r\nPSVersion                      7.1.0-preview.4\r\nPSEdition                      Core\r\nGitCommitId                    7.1.0-preview.4\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n",
  "closed_at": "2021-07-08T21:00:41Z",
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "This is due to removal of builtin support in dotnet, see dotnet/runtime#37672.\r\n\r\n/cc @SteveL-MSFT while this breaking change isn't PowerShell's fault, it will have a decent impact. It may be a good idea to look into adding built in support. [C#/WinRT package](https://github.com/microsoft/CsWinRT) seems to be the recommendation, though at a glance it doesn't look like that can be used as a general solution.\r\n\r\nThere are some very popular modules that utilize winrt APIs (like [BurntToast](https://github.com/Windos/BurntToast) by @Windos).",
      "created_at": "2020-06-27T14:25:22Z",
      "updated_at": "2020-06-27T14:25:22Z"
    },
    {
      "author": "Windos",
      "author_association": "CONTRIBUTOR",
      "body": "It may be that my morning coffee is only half drunk atm, but I'm struggling to wrap my head around making use of [C#/WinRT](https://github.com/microsoft/CsWinRT) in (non-C#) PowerShell.\r\n\r\nFrom what I can see on the Gallery, the biggest use case of these WinRT assemblies are Toast Notifications of various flavours (Even [dbatools](https://www.powershellgallery.com/packages/dbatools/0.8.905/Content/functions%5CWatch-DbaUpdate.ps1) uses them).\r\n\r\nIf we could wrangle built-in support in PowerShell that'd be super \ud83d\udc9c. If not, it looks like module authors will need to figure out runtime projection... in BurntToast's case that'll probably mean a version or two that caps its host support at 7.0 until I/someone figure it out.",
      "created_at": "2020-06-28T23:16:47Z",
      "updated_at": "2020-06-28T23:16:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "PowerShell has never WinRT support. The fact that users could load WinRT assemblies previously does not mean that everything worked out of the box. Moreover, the engine explicitly blocks WinRT event processing (Also it seems the engine consider WinRT types as special case).\r\nTo restore previous behavior users have to explicitly install [C#/WinRT package](https://github.com/microsoft/CsWinRT) (it seems it is still not ready for general use).\r\nSince no changes was made in PowerShell engine all modules used WinRT directly (by p/invoke) should continue to work.\r\n",
      "created_at": "2020-06-29T12:17:13Z",
      "updated_at": "2020-06-29T12:17:13Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov I 100% agree that this break isn't PowerShell's *fault* or even necessarily it's responsibility to fix.  It still might be a good idea though.\r\n\r\n> PowerShell has never WinRT support.\r\n\r\nIn the same way it never supported `System.Text.StringBuilder` I suppose but if that disappeared tomorrow it might be a good idea to add it back.\r\n\r\n> Moreover, the engine explicitly blocks WinRT event processing (Also it seems the engine consider WinRT types as special case).\r\n\r\nIt also blocks processing of event handlers with a return type other than `void`.  I'm guessing there are similar technical and/or design reasons.\r\n\r\n",
      "created_at": "2020-06-29T12:27:09Z",
      "updated_at": "2020-06-29T12:27:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> In the same way it never supported System.Text.StringBuilder I suppose but if that disappeared tomorrow it might be a good idea to add it back.\r\n\r\nTechnically we would need to reference C # / WinRT package. But now the package is not ready for release. Also I guess MSFT team prefer to reduce PowerShell distributive size.\r\n",
      "created_at": "2020-06-29T12:44:52Z",
      "updated_at": "2020-06-29T12:44:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@Windos If I understand correctly BurntToast doesn't work on latest PowerShell preview. Do you consider C # / WinRT package for BurntToast?",
      "created_at": "2020-06-30T10:31:03Z",
      "updated_at": "2020-06-30T10:31:03Z"
    },
    {
      "author": "Windos",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Yeah, BurntToast 100% relies on WinRT assemblies so this change in .NET will break the module in PS preview. I missed Preview 4 before  the MSI got pulled, so will confirm this when Preview 5 is out.\r\n\r\nI will be looking into C#/WinRT, but haven't had a chance to sit down and figure that out yet.",
      "created_at": "2020-06-30T10:42:38Z",
      "updated_at": "2020-06-30T10:42:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I missed Preview 4 before the MSI got pulled, so will confirm this when Preview 5 is out.\r\n\r\n@Windos You can load a nightly build from main page of the repo.",
      "created_at": "2020-06-30T11:32:43Z",
      "updated_at": "2020-06-30T11:32:43Z"
    },
    {
      "author": "wi-fr",
      "author_association": "NONE",
      "body": "Another use case of WinRT assemblies that's worth to be considered are its bitmap decoders that support Apple's HEIF format. I'm not aware of any alternative provided by Microsoft.",
      "created_at": "2020-06-30T11:55:44Z",
      "updated_at": "2020-06-30T11:55:44Z"
    },
    {
      "author": "Windos",
      "author_association": "CONTRIBUTOR",
      "body": "Can confirm, expected exception when importing the module.\r\n\r\n![Exception on module import](https://user-images.githubusercontent.com/6955786/86191147-6447b480-bb9a-11ea-86b6-0039b5a6490a.png)\r\n",
      "created_at": "2020-07-01T00:57:34Z",
      "updated_at": "2020-07-01T00:57:34Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I'll bring this up with the .NET team",
      "created_at": "2020-07-01T04:37:29Z",
      "updated_at": "2020-07-01T04:37:29Z"
    },
    {
      "author": "AdamBraden",
      "author_association": "NONE",
      "body": "With the breaking change in .NET5 Preview 6, https://devblogs.microsoft.com/dotnet/announcing-net-5-0-preview-6/, you will now need to reference a cswinrt generated interop assembly to call winrt apis. For the Windows WinRT apis, we've built a nuget package that provides this support, and will need to be referenced when building the module - https://www.nuget.org/packages/Microsoft.Windows.SDK.NET\n\n<blockquote><img src=\"https://user-images.githubusercontent.com/2608468/85644370-9497cc00-b64b-11ea-83ae-fe41a2248119.png\" width=\"48\" align=\"right\"><div><img src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2018/10/Microsoft-Favicon.png\" height=\"14\"> .NET Blog</div><div><strong><a href=\"https://devblogs.microsoft.com/dotnet/announcing-net-5-0-preview-6/\">Announcing .NET 5.0 Preview 6 | .NET Blog</a></strong></div><div>Today, we\u2019re releasing .NET 5.0 Preview 6. It contains a small set of new features and performance improvements. The .NET 5.0 Preview 4 post covers what we are planning to deliver with .NET 5.0. Most of the features are now in the product,</div></blockquote>\n<blockquote><img src=\"https://api.nuget.org/v3-flatcontainer/microsoft.windows.sdk.net/10.0.18362.3-preview/icon\" width=\"48\" align=\"right\"><div><strong><a href=\"https://www.nuget.org/packages/Microsoft.Windows.SDK.NET/\">Microsoft.Windows.SDK.NET 10.0.18362.3-preview</a></strong></div><div>The Windows SDK available as a NuGet package for more seamless acquisition and CI/CD integration. This package is designed for .NET 5 applications.</div></blockquote>",
      "created_at": "2020-07-01T15:25:24Z",
      "updated_at": "2020-07-01T15:25:27Z"
    },
    {
      "author": "richlander",
      "author_association": "NONE",
      "body": "There are three big questions we need to answer:\r\n\r\n- Does referencing the package resolve this issue?\r\n- Does referencing the package / adding a dependency fit into a natural PS workflow?\r\n- What should we do to enable a PS module to support both PS 7.0 and 7.1 (to accommodate this breaking change)?",
      "created_at": "2020-07-01T15:51:39Z",
      "updated_at": "2020-07-01T15:51:39Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Modules referencing a nuget dependency is a scenario that still does not work anything close to well and isn't a supported scenario for PowerShellGet as far as I'm aware. Not sure if that's planned to change for v3 of that module but it really should if it hasn't already.\r\n\r\nUntil that's working _seamlessly_ things like this will need to be included in PowerShell itself to avoid breaking changes.",
      "created_at": "2020-07-01T16:46:23Z",
      "updated_at": "2020-07-01T16:46:23Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Workaround:\r\n\r\n1. include winrt.runtime.dll from microsoft.windows.cswinrt nupkg\r\n2. include Microsoft.Windows.SDK.NET.dll microsoft.windows.sdk.net nupkg\r\n\r\nAdd-Type -AssemblyName <the two above assemblies>\r\n\r\nIn BurntToast, remove lines like 2137 that try to load the types using fully qualified names as those types are projected from different assemblies.\r\n\r\nWas able to get `New-BurntToastNotification` to work.\r\n\r\nI'd like to get PowerShellGetv3 to manage nuget.org dependencies but until that exists you'll have to pkg your module with those assemblies and load them.",
      "created_at": "2020-07-03T05:28:32Z",
      "updated_at": "2020-07-03T05:28:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I see a size of latest version of microsoft.windows.cswinrt package is ~977 Kb. We could add it in PowerShell 7.1 distribution until PowerShellGet addresses dependencies.",
      "created_at": "2020-07-03T06:06:30Z",
      "updated_at": "2020-07-03T06:06:30Z"
    },
    {
      "author": "Windos",
      "author_association": "CONTRIBUTOR",
      "body": "That was unbelievably easy, thanks for spelling out the work around @SteveL-MSFT!\r\n\r\nAlso, this whole thing also addresses #2181 as the reflection includes event handling and... that works now:\r\n\r\n![Working events](https://user-images.githubusercontent.com/6955786/86530082-c3def080-bf09-11ea-819d-fb48139045f5.png)\r\n\r\n![happy dance](https://media.giphy.com/media/XxowRoIpcU3te/giphy.gif)\r\n\r\n_n.b. that last statement applies only to 7.1_",
      "created_at": "2020-07-05T09:54:40Z",
      "updated_at": "2020-07-05T09:59:19Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Will have PS-Committee review whether we should just include the necessary assemblies with PS7.1",
      "created_at": "2020-07-07T04:56:26Z",
      "updated_at": "2020-07-07T04:56:26Z"
    },
    {
      "author": "Windos",
      "author_association": "CONTRIBUTOR",
      "body": "Is that a community call review (and does that mean I'll have to wake up for the next call \ud83d\ude02)?",
      "created_at": "2020-07-08T03:00:44Z",
      "updated_at": "2020-07-08T03:00:44Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@Windos no, the PS-Committee is separate from the Monthly Community Calls.  PS-Committee meets twice a week to weigh in on certain decisions affecting PowerShell",
      "created_at": "2020-07-08T21:55:07Z",
      "updated_at": "2020-07-08T21:55:07Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, we agreed that we will not be redistributing the WinRT assemblies with PowerShell 7.1.  We also agreed to have documentation added to help PowerShell users that want to use WinRT.",
      "created_at": "2020-07-08T22:11:13Z",
      "updated_at": "2020-07-08T22:11:13Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "More generally, we also agreed that we should, as a rule, snap to .NET's decision on API surface area except where there is overwhelming evidence that something has additional value to PS users. E.g. WinForms/WPF are used *heavily* in the PS ecosystem, and make sense to continue including on Windows. ",
      "created_at": "2020-07-08T22:13:11Z",
      "updated_at": "2020-07-08T22:13:11Z"
    },
    {
      "author": "Windos",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the quick decision on this. Will work on a module update to include the assemblies.",
      "created_at": "2020-07-08T22:15:42Z",
      "updated_at": "2020-07-08T22:15:42Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @sdwheeler for reference.",
      "created_at": "2020-07-09T18:23:00Z",
      "updated_at": "2020-07-09T18:23:00Z"
    },
    {
      "author": "xdhmoore",
      "author_association": "NONE",
      "body": "Based on this thread I've been able to successfully use some WinRT classes in PowerShell by importing the two dlls in [this BurntToast folder](https://github.com/Windos/BurntToast/tree/main/BurntToast/lib/Microsoft.Windows.SDK.NET), but I can't figure out how to get or build these dlls from the primary source. Are these on NuGet somewhere?\r\n\r\n* Microsoft.Windows.SDK.NET.dll\r\n* WinRT.Runtime.dll\r\n\r\nI'm attempting to update this library: https://github.com/rkeithhill/PoshWinRT which is a C# wrapper that can be imported in PowerShell in order to use APIs that use Async file operations.",
      "created_at": "2021-03-15T04:02:05Z",
      "updated_at": "2021-03-15T04:05:19Z"
    },
    {
      "author": "Windos",
      "author_association": "CONTRIBUTOR",
      "body": "@xdhmoore: https://www.nuget.org/packages/Microsoft.Windows.SDK.NET.Ref/\n\n<blockquote><img src=\"https://api.nuget.org/v3-flatcontainer/microsoft.windows.sdk.net.ref/10.0.19041.14/icon\" width=\"48\" align=\"right\"><div><strong><a href=\"https://www.nuget.org/packages/Microsoft.Windows.SDK.NET.Ref/\">Microsoft.Windows.SDK.NET.Ref 10.0.19041.14</a></strong></div><div>The Windows SDK available as a targeting pack for .NET 5 applications.</div></blockquote>",
      "created_at": "2021-03-15T04:17:06Z",
      "updated_at": "2021-03-15T04:17:08Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as by-design and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2021-07-08T21:00:41Z",
      "updated_at": "2021-07-08T21:00:41Z"
    }
  ],
  "created_at": "2020-06-27T08:42:40Z",
  "number": 13042,
  "state": "closed",
  "title": "\"Loading\" of Windows Runtime assemblies fails in 7.1 Preview 4",
  "updated_at": "2021-07-08T21:00:41Z"
}