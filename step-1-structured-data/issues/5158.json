{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5158",
  "author": "PaulHigin",
  "body": "Add-Type uses File.ReadAllText() API in a loop for reading in multiple source files.  This can be non-performant for multiple reasons:\r\na. ReadAllText() uses a small buffer that increases IO calls.\r\nb. It performs StringBuilder.ToString() internally which allocates a string that is not used, making possible LOH allocation and adding GC pressure.\r\n\r\nConsider using a different pattern:\r\n```\r\nStringBuilder sourceCode = new StringBuilder();\r\n\r\nforeach (string file in paths)\r\n{\r\n    foreach (string line in File.ReadAllLines(file))\r\n    {\r\n        sourceCode.AppendLine(line);\r\n    }\r\n}\r\n\r\nString result = sourceCode.ToString();\r\n```",
  "closed_at": "2018-04-26T05:40:27Z",
  "comments": [
    {
      "author": "SaiKai",
      "author_association": "NONE",
      "body": "I will take a stab at this. ",
      "created_at": "2017-10-19T07:20:57Z",
      "updated_at": "2017-10-19T07:20:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "[ReadAllLines](https://github.com/dotnet/corefx/blob/master/src/System.IO.FileSystem/src/System/IO/File.cs#L499) put string in `List` then we put in `StringBuilder` - I don't see benefits.\r\nI found [tests](http://cc.davelozinski.com/c-sharp/fastest-way-to-read-text-files). ReadAllText looks best compared to ReadAllLines if we want to read the entire file in a single string.",
      "created_at": "2017-10-19T09:29:10Z",
      "updated_at": "2017-10-19T09:29:10Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "if `ReadAllText` is inefficient, we should be fixing that, not working around it.\r\n\r\nThe use case here though is a little different, we're reading multiple files into a single buffer.\r\n\r\nWith some unsafe code, one could preallocate a `char[]` buffer big enough to hold all of the files, then use `StreamReader.Read(char[] buffer, int index, int count)` - this would minimize the number of large allocations to just 2 - the `char[]` and then turning that into a string.\r\n\r\nI am curious where this came up though - if this was a perf problem, why not just compile the code with C# ahead of time?",
      "created_at": "2017-10-20T16:31:20Z",
      "updated_at": "2017-10-20T16:31:20Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "This was reported internally based on ETW perf traces showing a lot of LOH allocations from Add-Type/ReadAllText.  But I think you are right, calling Add-Type so often is unexpected and sounds like a possible design/implementation error.  ",
      "created_at": "2017-10-20T20:45:47Z",
      "updated_at": "2017-10-20T20:45:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I'm surprised too that we compile a string instead of files. We could use `CompileAssemblyFromFile`",
      "created_at": "2017-10-21T10:33:32Z",
      "updated_at": "2017-10-21T10:33:32Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Good suggestion - it might not have been an option with CodeDom, but now that we're using Roslyn, there obviously should be better options.",
      "created_at": "2017-10-21T15:02:01Z",
      "updated_at": "2017-10-21T15:02:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We need @powershell-committee conclusion - can we remove the _public_ `AddTypeCommandBase` class (merge with  `AddTypeCommand`)?\r\n\r\nIn #5243 we fixed a bug in `Add-Type` but added a breaking change. In #5306 we removed the breaking change restoring `AddTypeCommandBase`.\r\n\r\nFrom @daxian-dbw [comment](https://github.com/PowerShell/PowerShell/pull/5306#discussion_r148850795):\r\n>I think the breaking changes to  AddTypeCommandBase  is most likely safe. I searched on Github and don't see the type  AddTypeCommandBase  gets used except AddType.\r\n Given that, would it be OK that we just keep the breaking change made in #5243? Maybe you want to do further cleanup, such as completely remove the base type, in your subsequent work on Add-Type.\r\n\r\nI don't see the need for `AddTypeCommandBase` too.\r\n\r\n/cc @SteveL-MSFT ",
      "created_at": "2017-11-04T17:44:49Z",
      "updated_at": "2017-11-04T17:44:49Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I don't think we've typically viewed the public api surface of a cmdlet implementation as a real C# api, so I'm fine with changes like this.\r\n\r\nThere might be a rare exception, and if we find out we made a mistake, it's generally much easier to fix that these days, as compared to waiting multiple years between releases.",
      "created_at": "2017-11-04T18:06:43Z",
      "updated_at": "2017-11-04T18:06:43Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this and is ok with the changes already made to remove AddTypeCommandBase class",
      "created_at": "2018-01-03T23:33:52Z",
      "updated_at": "2018-01-03T23:33:52Z"
    }
  ],
  "created_at": "2017-10-18T23:27:00Z",
  "labels": [
    "WG-Engine-Performance",
    "Up-for-Grabs",
    "Resolution-Fixed",
    "Committee-Reviewed"
  ],
  "number": 5158,
  "state": "closed",
  "title": "Add-Type ReadAllText perf improvement",
  "updated_at": "2018-04-26T05:59:03Z"
}