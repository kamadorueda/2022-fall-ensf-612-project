{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15246",
  "author": "IISResetMe",
  "body": "## Problem description\r\n\r\nI've been working on a re-write of the [interface keyword feature](https://github.com/PowerShell/PowerShell-RFC/pull/152) for PS7/.NET5+, and have been [instructed to open a PR introducing it as an experimental feature](https://github.com/PowerShell/PowerShell-RFC/pull/152#issuecomment-794425131) to allow community members to test the proposed implementation.\r\n\r\nAdding a new Experimental Feature entry was straightforward, and guarding the parsing routine is easy: https://github.com/IISResetMe/PowerShell/blob/fb98b8fb4b01c54c1fc9f5fa6275cb0bf8d52e4b/src/System.Management.Automation/engine/parser/Parser.cs#L2092-L2095\r\n\r\n... but it touches _many_ different parts of the language engine (parser, AST, compiler, PSType etc.), and I'm struggling to figure out how to guard some of these changes:\r\n\r\n - ~~How do I require the feature enabled for related pester tests?~~ (solved with `$PSDefaultParameterValues.Add('It:Skip', (-not $EnabledExperimentalFeatures.Contains('FeatureName')))`)\r\n - How do I ensure the tests that require the feature enabled are _actually tested_ in build pipelines and elsewhere?\r\n - How should I handle changes [introduced in `ast.cs`](https://github.com/IISResetMe/PowerShell/commit/fb98b8fb4b01c54c1fc9f5fa6275cb0bf8d52e4b#diff-321bb81b7c5696aca6910d014c4e3165cf030ce7c27ebe037c5b3e8e7b651821)?\r\n \r\n\r\nPlease advice",
  "closed_at": "2021-05-08T17:22:19Z",
  "comments": [
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "I'm not sure all things can be guarded like this. You would need to make massive changes to have a facade, and two different underlying implementations, where the old implementation would be one of them. This would require a dependency-injection-like rewrite of core parts of the engine, which does not seem reasonable.\r\n\r\nTricky, for sure!",
      "created_at": "2021-04-16T12:09:54Z",
      "updated_at": "2021-04-16T12:09:54Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "That's more or less what I've done with PSType (sans a well-defined facade, entrypoint is just a single method call). \r\n\r\nThe additions to the ast's might be okay without guardrails (I'm not removing anything), but I'm still a bit perplexed as to how to tag and handle the test suite?",
      "created_at": "2021-04-16T12:46:36Z",
      "updated_at": "2021-04-16T12:46:36Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 kindly suggested scouring existing test fixtures for experimental feature names, and I can see this being used in some:\r\n\r\n    $PSDefaultParameterValues.Add('It:Skip', (-not $EnabledExperimentalFeatures.Contains('PSAnsiRendering')))\r\n\r\nThat answers my first question :) ",
      "created_at": "2021-04-16T14:05:48Z",
      "updated_at": "2021-04-16T14:05:48Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That code pattern might actually break depending on scoping... If there happens to already be an `It:Skip` entry in that table, it'll fail, I think?\r\n\r\nMight be safer to do it like this:\r\n```powershell\r\n$PSDefaultParameterValues['It:Skip'] = $PSDefaultParameterValues['It:Skip'] -or -not $EnabledExperimentalFeatures.Contains($FeatureName)\r\n```",
      "created_at": "2021-04-16T16:00:30Z",
      "updated_at": "2021-04-16T16:01:13Z"
    }
  ],
  "created_at": "2021-04-16T11:57:58Z",
  "number": 15246,
  "state": "closed",
  "title": "Request for guidance: guarding pervasive experimental features + tests",
  "updated_at": "2021-05-08T17:22:19Z"
}