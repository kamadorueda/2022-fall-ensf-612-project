{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17529",
  "author": "SetTrend",
  "body": "### Steps to reproduce\r\n\r\nThe [Microsoft documentation on `Add-Type`](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/add-type#parameters) claims that the `AssemblyName` parameter accepts wildcards.\r\n\r\nHowever, when I try using `Add-Type -AssemblyName '*SqlServer.Smo'` in PowerShell Core, it doesn't work. I get the error message: \"`Add-Type: Cannot load assembly '*.SqlServer.Smo'`\":\r\n\r\n![PowerShell Add-Type](https://i.stack.imgur.com/sOTsd.png)\r\n\r\n### Expected behavior\r\n\r\n```powershell\r\nAdd-Type -AssemblyName '*SqlServer.Smo'\r\n```\r\n\u2026 should exactly behave like \u2026\r\n```powershell\r\nAdd-Type -AssemblyName 'Microsoft.SqlServer.Smo'\r\n```\r\n\r\n### Actual behavior\r\n\r\nSee screenshot above.\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.4\r\nPSEdition                      Core\r\nGitCommitId                    7.2.4\r\nOS                             Microsoft Windows 10.0.19044\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "It works if assembly.dll in current directory or maybe in `PATH`.\r\n```powershell\r\n > pushd $pshome\r\n > dir Ma*.dll  \r\n\r\n    Directory: /opt/microsoft/powershell/7\r\n\r\nUnixMode     ACL    User   Group      LastWriteTime    Size Name\r\n--------     ---    ----   -----      -------------    ---- ----\r\n-rw-r--r--   644    root    root   11.05.2022 23:01    1,1M Markdig.Signed.dll\r\n\r\n  > Add-Type -AssemblyName \"*.Signed\"  # No Error          \r\n```",
      "created_at": "2022-06-16T15:19:45Z",
      "updated_at": "2022-06-16T15:19:45Z"
    },
    {
      "author": "SetTrend",
      "author_association": "NONE",
      "body": "I see, so it doesn't need to be in `PATH` if you don't use wildcards, but it must be in `PATH` when you do?\r\n\r\nIsn't this observation odd?",
      "created_at": "2022-06-16T17:53:02Z",
      "updated_at": "2022-06-16T17:53:02Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "I think wildcards are available only if assembly dll in the current directory. As a variant you can use Path parameter:\r\n```\r\nAdd-Type -Path \"$pshome\\*csharp*\"\r\n```\r\n\r\nYou are right, this is wrong help or wrong behavior of Add-Type cmdlet.",
      "created_at": "2022-06-16T18:26:07Z",
      "updated_at": "2022-06-16T18:29:57Z"
    },
    {
      "author": "SetTrend",
      "author_association": "NONE",
      "body": "PowerShell 5.1 seems to be able to resolve above example on the same machine without flaw. I'm still not confident that `Add-Type` should require a `PATH` entry.\r\n\r\nYou know, all modules and .NET libaries are stored at predictable locations. They never reside in any folder that's mentioned in `PATH`.",
      "created_at": "2022-06-18T05:47:17Z",
      "updated_at": "2022-06-18T05:47:17Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> You know, all modules and .NET libaries are stored at predictable locations. They never reside in any folder that's mentioned in PATH\r\n\r\nIn my environment they are all in `$PSHome`. When pwsh started `$PSHome` automatically sets in `$env:Path`\r\n\r\npwsh:\r\n```powershell\r\n> $env:PATH -split ':'\r\n/opt/microsoft/powershell/7\r\n/home/herz/bin\r\n/usr/local/bin\r\n/usr/bin\r\n/bin\r\n/usr/local/sbin\r\n/var/lib/flatpak/exports/bin\r\n/usr/bin/site_perl\r\n/usr/bin/vendor_perl\r\n/usr/bin/core_perl\r\n/var/lib/snapd/snap/bin\r\n```\r\nbash:\r\n```bash\r\n$ echo $PATH | sed 's/:/\\n/g'\r\n/home/herz/bin\r\n/usr/local/bin\r\n/usr/bin\r\n/bin\r\n/usr/local/sbin\r\n/var/lib/flatpak/exports/bin\r\n/usr/bin/site_perl\r\n/usr/bin/vendor_perl\r\n/usr/bin/core_perl\r\n/var/lib/snapd/snap/bin\r\n```",
      "created_at": "2022-06-18T07:35:01Z",
      "updated_at": "2022-06-18T07:35:01Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "> You know, all modules and .NET libaries are stored at predictable locations. \r\n\r\nThis is only true under .NET Framework (<= 4.8.x) where there is a Global Assembly Cache for .NET applications to reference. That's likely one of the main reasons that this works as expected in Windows PowerShell.\r\n\r\nFor PowerShell 7, there is no such global cache to reference. The only reasonable place pwsh could search by default would be $PSHOME, and I'd agree that it probably should search that when a wildcard is given to Add-Type. Beyond the assemblies shipped with pwsh though, I'm not sure there is anywhere else it could reasonably search.",
      "created_at": "2022-06-18T07:35:31Z",
      "updated_at": "2022-06-18T07:35:31Z"
    },
    {
      "author": "SetTrend",
      "author_association": "NONE",
      "body": "@vexx32: That's very enlightening, thank you! \ud83d\udc4d\ud83d\udc4d\r\n\r\nHowever, though, why does it (presumingly) find `Microsoft.SqlServer.Smo` when I don't use wildcards then? According to your statement, PowerShell 7+ would require a path then, too. Omitting the wildcard doesn't help in locating an assembly, AFAIK, does it?",
      "created_at": "2022-06-18T10:20:30Z",
      "updated_at": "2022-06-18T10:20:30Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Unsure how the code paths diverge here exactly I'm afraid, but I suspect there's some reliance on .NET's default behaviour for loading assemblies here that we'll likely need to compensate for.",
      "created_at": "2022-06-18T17:00:26Z",
      "updated_at": "2022-06-18T17:00:26Z"
    },
    {
      "author": "SetTrend",
      "author_association": "NONE",
      "body": "Do you believe this is something that needs investigation and amendment?\r\n\r\nI suspect, the documentation is quite clear on the input and outcome:\r\n\r\n> Specifies the name of an assembly that includes the types. Add-Type takes the types from the specified assembly. This parameter is required when you're creating types based on an assembly name.\r\n>\r\n> Enter the full or simple name, also known as the partial name, of an assembly. Wildcard characters are permitted in the assembly name.",
      "created_at": "2022-06-20T21:34:32Z",
      "updated_at": "2022-06-20T21:34:32Z"
    }
  ],
  "created_at": "2022-06-15T14:18:27Z",
  "number": 17529,
  "state": "open",
  "title": "Add-Type / PowerShell 7+: No wildcard accepted for -AssemblyName parameter",
  "updated_at": "2022-06-20T21:34:32Z"
}