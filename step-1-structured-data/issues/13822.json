{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13822",
  "author": "Paxilein",
  "body": "One of my scripts is using a hashtable for settings for different environments and does a discovery of additional services if the setting is \"all\" (tried other values for that, no change).\r\nIn case of \"all\" the newly added hashtable will contain the default-values that are stored in the \"all\"-hashtable of the proper level.\r\nThe hashtable could instead of \"all\" also contain specific names for the environments or services in those. It's not always \"all\"...\r\nSo, when my script adds a new nested hashtable, that's a copy of the nested \"all\"-hashtble of that level the newly added nested hashtable is added to all hashtables of that level. Which is a weird behaviour imho...\r\n\r\nOr I'm doing it wrong...\r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\n$hashtable = @{\r\n    \"all\" = @{\r\n        \"all\" = @{\r\n            \"all\" = @{\r\n                value = 4000\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n$hashtable.Add(\"env1\", $hashtable.all)\r\n$hashtable\r\n    \r\n#    Name                           Value\r\n#    ----                           -----\r\n#    env1                           {all}\r\n#    all                            {all}\r\n    \r\n$hashtable.env1.Add(\"subenv1\", $hashtable.env1.all)\r\n$hashtable\r\n    \r\n#    Name                           Value\r\n#    ----                           -----\r\n#    env1                           {subenv1, all}\r\n#    all                            {subenv1, all}\r\n```\r\n\r\n## Expected behavior\r\n\r\n```none\r\nOnly add the new hashtable to the one I run the add-method on\r\n```\r\n\r\n## Actual behavior\r\n\r\n```none\r\nThe new hashtable is added to all hashtables\r\n```\r\n\r\n## Environment data\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.3\r\nPSEdition                      Core\r\nGitCommitId                    7.0.3\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-10-20T21:28:35Z",
  "comments": [
    {
      "author": "Paxilein",
      "author_association": "NONE",
      "body": "Looks like I have problems with Reference-Types.... The add copies the reference and not the values, so when I change the new env1 I change both as both are pointing to the same memory address...",
      "created_at": "2020-10-20T21:00:27Z",
      "updated_at": "2020-10-20T21:00:27Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "You can use `.Clone()` to copy the hashtable you're wanting to copy, but it only copies one level deep.\r\nFor nested hashtables you want to copy, you'll need to create a recursive cloning function, I think.",
      "created_at": "2020-10-20T21:09:49Z",
      "updated_at": "2020-10-20T21:09:49Z"
    },
    {
      "author": "Paxilein",
      "author_association": "NONE",
      "body": "I actually tried the clone and it copies all nested hashtables and not only one level.... So that looks it that'll solve my problem!\r\n\r\nThanks @vexx32 ",
      "created_at": "2020-10-20T21:28:35Z",
      "updated_at": "2020-10-20T21:28:35Z"
    }
  ],
  "created_at": "2020-10-20T20:14:15Z",
  "number": 13822,
  "state": "closed",
  "title": "Nested Hashtable unexpected behaviour on Add",
  "updated_at": "2020-10-20T21:28:35Z"
}