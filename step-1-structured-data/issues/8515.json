{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8515",
  "author": "iSazonov",
  "body": "## PR Summary\r\n\r\nRelated #8120.\r\n\r\nThe PR is only demo how we could use Simple Case Folding to speed up PowerShell engine.\r\n\r\nCurrent code uses 2-level translation table to fold Unicode strings. The table is compact: full table is 128 Kb, the compressed table is ~10Kb.\r\n\r\nNew string compare works in 3-4 faster than standard ignore case comparer.\r\nWith using the new comparer in only one place you can also see a marked improvement in startup time.\r\nPerhaps we could use the comparer in other places.\r\n\r\nI push alternative code too so you could experiment. Tools and temporary benchmarks is also pushed.\r\n\r\n\r\n## PR Checklist\r\n\r\n- [ ] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [ ] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [ ] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [ ] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed - Issue link:\r\n- **Testing - New and feature**\r\n    - [ ] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [ ] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2019-02-15T07:10:50Z",
  "comments": [
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "What is the startup time difference you see?",
      "created_at": "2019-01-04T00:11:50Z",
      "updated_at": "2019-01-04T00:11:50Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13 My first measurement with a single-level array showed a speedup of ~8 percent. That's why I continued working on it. Of cause this result is not reliable although the standard powershell (Pester) tests pass successfully (only my xUnit tests fail currently).\r\nI also believe that there are other places where we could inject this code to get a performance win and I need a help to find its.",
      "created_at": "2019-01-04T09:21:09Z",
      "updated_at": "2019-01-04T09:21:09Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Talking to @daxian-dbw \this assumption is the actual folding code would go into DotNet.",
      "created_at": "2019-01-04T18:52:07Z",
      "updated_at": "2019-01-04T18:52:07Z"
    },
    {
      "author": "tarekgh",
      "author_association": "NONE",
      "body": "@TravisEz13 \r\n\r\n> Talking to @daxian-dbw his assumption is the actual folding code would go into DotNet.\r\n\r\nThere is no plan or decision that this will happen. it depends on the case and DotNet team will approve it. My thoughts so far is to create this in a separate NuGet package and if we see a demand on this functionality we can consider moving it to the core. \r\n",
      "created_at": "2019-01-04T18:58:05Z",
      "updated_at": "2019-01-04T18:58:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I agree that this should be in CoreFX. At best, it will be CoreFX 3.1 and that means that PowerShell will get this advantage only a year and a half or two years from today. This is too long to wait. So I think it is best to work here and in CoreFX at the same time.\r\nMy last perf test shows (sorry I still do not push the commit) that new comparer is faster than CoreFX OrdinalIgnoreCase:\r\n```\r\n                Method |         StrA |         StrB |     Mean |     Error |    StdDev | Ratio |\r\n---------------------- |------------- |------------- |---------:|----------:|----------:|------:|\r\n         CoreFXCompare | CaseFolding1 | cASEfOLDING2 | 41.77 ns | 0.1741 ns | 0.1454 ns |  1.00 |\r\n SimpleCaseFoldCompare | CaseFolding1 | cASEfOLDING2 | 37.34 ns | 0.2286 ns | 0.1909 ns |  0.89 |\r\n                       |              |              |          |           |           |       |\r\n         CoreFXCompare | \u042f\u044f\u042f\u044f\u042f\u044f\u042f\u044f\u042f\u044f\u042f1 | \u042f\u044f\u042f\u044f\u042f\u044f\u042f\u044f\u042f\u044f\u042f2 | 87.32 ns | 0.4460 ns | 0.4172 ns |  1.00 |\r\n SimpleCaseFoldCompare | \u042f\u044f\u042f\u044f\u042f\u044f\u042f\u044f\u042f\u044f\u042f1 | \u042f\u044f\u042f\u044f\u042f\u044f\u042f\u044f\u042f\u044f\u042f2 | 37.68 ns | 0.5356 ns | 0.4748 ns |  0.43 |\r\n```\r\n\r\nI hope this works correctly.\r\nIn this case, CoreFX team may be more interested in speeding up this work.",
      "created_at": "2019-01-04T19:23:54Z",
      "updated_at": "2019-01-04T19:23:54Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "What locale are those stats for?",
      "created_at": "2019-01-04T22:04:46Z",
      "updated_at": "2019-01-04T22:04:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13 In the test I used Russian chars. Really the result is true for chars with codepoints < 0x5ff (1-level mapping is used) that is most of Latin and European codepoints. For codepoint above a 2-level mapping is used and result is ~68 ms (vs 37 ms) that is still faster than CoreFX OrdinalIgnoreCase.",
      "created_at": "2019-01-05T08:34:59Z",
      "updated_at": "2019-01-05T08:34:59Z"
    },
    {
      "author": "stale[bot]",
      "author_association": "NONE",
      "body": "This PR has been automatically marked as stale because it has not had activity in the last 30 days. It will be closed if no further activity occurs within 10 days.\nThank you for your contributions.\nCommunity members are welcome to grab these works.\n",
      "created_at": "2019-02-04T15:10:30Z",
      "updated_at": "2019-02-04T15:10:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Now we have a PR in corefxlab repo and I hope we get the experimental package soon.",
      "created_at": "2019-02-05T06:11:48Z",
      "updated_at": "2019-02-05T06:11:48Z"
    },
    {
      "author": "stale[bot]",
      "author_association": "NONE",
      "body": "This PR has been automatically closed because it is stale. If you wish to continue working on the PR, please first update the PR, then reopen it.\nThanks again for your contribution.\nCommunity members are welcome to grab these works.\n",
      "created_at": "2019-02-15T07:10:49Z",
      "updated_at": "2019-02-15T07:10:49Z"
    }
  ],
  "created_at": "2018-12-21T19:54:32Z",
  "number": 8515,
  "state": "closed",
  "title": "WIP: Demo using Simple Case Folding",
  "updated_at": "2021-10-16T05:36:19Z"
}