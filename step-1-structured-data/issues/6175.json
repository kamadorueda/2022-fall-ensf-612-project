{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6175",
  "author": "apetitjean",
  "body": "I saw this issue with both Windows PowerShell 5.1 and PowerShell Core 6.0.1\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nGet-Command -ParameterName computername | Select-Object -ExpandProperty Name\r\n\r\nConnect-PSSession\r\nConnect-WSMan\r\nDisconnect-WSMan\r\nEnter-PSSession\r\nGet-PSSession\r\nGet-WSManInstance\r\nInvoke-Command\r\nInvoke-WSManAction\r\nNew-PSSession\r\nNew-WSManInstance\r\nReceive-Job\r\nReceive-PSSession\r\nRemove-PSSession\r\nRemove-WSManInstance\r\nRename-Computer\r\nRestart-Computer\r\nSend-MailMessage\r\nSet-WSManInstance\r\nStop-Computer\r\nTest-WSMan\r\n\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nThe result should not return Send-MailMessage because this cmdlet does not have a such parameter (it's an alias on SMTPServer).\r\n\r\nThis is hence not consistent with the result of:\r\n\r\n```powershell\r\nGet-Help * -parameter computername\r\n\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n$PSVersionTable\r\n\r\nName                           Value                                                                                                                                \r\n----                           -----                                                                                                                                \r\nPSVersion                      6.0.1                                                                                                                                \r\nPSEdition                      Core                                                                                                                                 \r\nGitCommitId                    v6.0.1                                                                                                                               \r\nOS                             Microsoft Windows 10.0.14393                                                                                                         \r\nPlatform                       Win32NT                                                                                                                              \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                                                              \r\nPSRemotingProtocolVersion      2.3                                                                                                                                  \r\nSerializationVersion           1.1.0.1                                                                                                                              \r\nWSManStackVersion              3.0                                                                                                                                  \r\n\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "`Get-Command -ParameterName` - unlike `Get-Help -Parameter` - also matches _parameter aliases_.\r\n\r\nThus, `Get-Command -ParameterName ComputerName` includes `Send-MailMessage`, because the latter's `SmtpServer` parameter has the alias name `ComputerName`, as the following command demonstrates.\r\n\r\n```powershell\r\n> (Get-Command Send-MailMessage).Parameters.SmtpServer.Aliases\r\nComputerName\r\n```\r\n\r\nThis inconsistency between `Get-Command` and `Get-Help` is worth addressing (though, as your post shows, the inclusion of parameter aliases can be confusing).\r\n\r\nNote that with a specific cmdlet / advanced-function name you _can_ discover alias names with `Get-Help`, but only if you know the _original_ parameter name:\r\n\r\n```powershell\r\n# Note the 'Aliases' output line.\r\n> Get-Help Send-MailMessage -Parameter SmtpServer\r\n\r\n-SmtpServer <string>\r\n    \r\n    Required?                    false\r\n    Position?                    3\r\n    Accept pipeline input?       false\r\n    Parameter set name           (All)\r\n    Aliases                      ComputerName\r\n    Dynamic?                     false\r\n    \r\n```\r\n\r\nI've created #6183 to track this.\r\n\r\n",
      "created_at": "2018-02-18T14:57:51Z",
      "updated_at": "2018-02-18T14:57:51Z"
    },
    {
      "author": "apetitjean",
      "author_association": "NONE",
      "body": "To me, there's no interest to search by parameter aliases. I would prefer that both cmdlets do not return them because in this specific case I want to *only* get the real parameter names and *not* the aliases.\r\n\r\nThat being said, we agree that in this context both cmdlets should return the same result ;-).",
      "created_at": "2018-02-18T15:42:01Z",
      "updated_at": "2018-02-18T15:42:01Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@apetitjean:\r\n\r\nUnderstood (I had missed that you were already aware of the alias-name issue).\r\n\r\nMy sense is that alias names _should_ be considered, at least _by default_, as that is consistent with how _command_ alias names are treated (by _both_ `Get-Command` and `Get-Help` - try `Get-Command gci` and `Get-Help gci`, for instance).\r\n\r\nThe - cumbersome - _workaround_ for what you're trying to do is:\r\n\r\n```powershell\r\nGet-Command -ParameterName computername | ? { $_.Parameters.ContainsKey('ComputerName') }\r\n```\r\n\r\nIf you feel strongly enough that (opt-in) support for ignoring alias names should be built in, say via a new `-NoAlias` switch, I encourage you to revise your original post accordingly - as it stands, it doesn't adequately reflect the general issue we're discussing here.\r\n",
      "created_at": "2018-02-18T19:45:01Z",
      "updated_at": "2018-02-18T19:45:01Z"
    },
    {
      "author": "apetitjean",
      "author_association": "NONE",
      "body": "Whatever you prefer! But what I would like is consistency.",
      "created_at": "2018-03-02T16:09:56Z",
      "updated_at": "2018-03-02T16:09:56Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@apetitjean: I agree re consistency, but what was I trying to say in my previous comment was:\r\n\r\n_If_ the current inconsistency gets resolved the way I'm suggesting (and it's just that - a suggestion) and you feel that ignoring aliases should at least be available _on demand_, without needing a workaround, you should ask for that - either by revising this issue's title and first post or by creating a new issue.\r\n",
      "created_at": "2018-03-02T16:44:14Z",
      "updated_at": "2018-03-02T16:44:14Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I believe the current behavior is working as designed.  For most users, they want the alias as they can use it the same as a parameter name.  Instead of a `-NoAlias` switch, perhaps adding a property to the output on whether the parametername is an alias making filtering more intuitive.",
      "created_at": "2018-03-02T18:30:31Z",
      "updated_at": "2018-03-02T18:30:31Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT: I agree, though a property won't help in this case, because the `-ParameterName` parameter acts as a _filter_ for returning _commands_; that is, you're not getting _parameter_ information back (where a property might help).",
      "created_at": "2018-03-02T18:41:44Z",
      "updated_at": "2018-03-02T18:41:44Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 I was thinking a script property that would do additional gathering",
      "created_at": "2018-03-02T23:37:45Z",
      "updated_at": "2018-03-02T23:37:45Z"
    }
  ],
  "created_at": "2018-02-17T14:15:38Z",
  "labels": [
    "WG-Interactive-HelpSystem",
    "WG-Cmdlets-Core"
  ],
  "number": 6175,
  "state": "open",
  "title": "Get-Command -ParameterName computername returns cmdlets that should not be",
  "updated_at": "2018-03-02T23:37:45Z"
}