{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11065",
  "author": "iUnknwn",
  "body": "When waiting for a C# event to occur (via Register-ObjectEvent), if the main PowerShell thread is blocked, the event action will not fire. This can create a deadlock when waiting on C# events.\r\n\r\n# Steps to reproduce\r\n\r\n```\r\n$ErrorActionPreference = \"Stop\"\r\n\r\n# launch process with the appropriate args. \r\n$p = [System.Diagnostics.Process]::new() \r\n$p.StartInfo.FileName = \"notepad.exe\" \r\n$p.StartInfo.Arguments = $null \r\n$p.EnableRaisingEvents = $true \r\n$p.Start()\r\n\r\n# create a task completion source\r\n$tcs = [System.Threading.Tasks.TaskCompletionSource[Boolean]]::new()\r\n\r\nRegister-ObjectEvent -InputObject $p -EventName Exited `\r\n    -MessageData $tcs `\r\n    -Action {\r\n        $Event.MessageData.SetResult($true)\r\n    } \r\n\r\n# wait for the program to exit \r\n$processTask = $tcs.Task\r\n\r\n# this deadlocks \r\n$processTask.Wait()\r\n\r\n```\r\n\r\n# Expected behavior\r\n\r\nThe event action fires on a background thread, triggering the task completion source, and the main thread is unblocked.\r\n\r\n\r\n# Actual behavior\r\n\r\nThe event action does not fire as long as the main thread is blocked.\r\n\r\n\r\n# Environment data\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.3\r\nPSEdition                      Core\r\nGitCommitId                    6.2.3\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```\r\n\r\nIf this is desired behavior, the documentation needs to be updated to indicate that all C# object events, even those that fire on background threads, will not work as long as the main thread is blocked.",
  "closed_at": "2020-02-01T05:30:37Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> If this is desired behavior, the documentation needs to be updated to indicate that all C# object events, even those that fire on background threads, will not work as long as the main thread is blocked.\r\n\r\n@iUnknwn Please open new issue in https://github.com/MicrosoftDocs/PowerShell-Docs repo\n\n<blockquote><img src=\"https://repository-images.githubusercontent.com/44411511/850abe80-7ca6-11e9-886f-a1b13b275ae0\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/MicrosoftDocs/PowerShell-Docs\">MicrosoftDocs/PowerShell-Docs</a></strong></div><div>The official PowerShell documentation sources. Contribute to MicrosoftDocs/PowerShell-Docs development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2019-11-14T10:16:53Z",
      "updated_at": "2019-11-14T10:16:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Can we close this as external (have you issue in Core repo?) or dup?",
      "created_at": "2020-01-31T11:21:08Z",
      "updated_at": "2020-01-31T11:21:08Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "This is the by design behavior of the powershell eventing.\r\nThe c# event is triggered on a background thread, but that event handler is not the `Action` script block you specified here, but a handler generated by PowerShell to queue an event in the session.\r\nThat queued event will trigger the script block action to run on the pipeline thread, so when the pipeline thread is blocked, the action won't be executed.\r\n\r\n@iUnknwn Please open an issue in the `PowerShell-Docs` repo as @iSazonov suggested above.",
      "created_at": "2020-01-31T17:19:28Z",
      "updated_at": "2020-01-31T20:45:35Z"
    },
    {
      "author": "iUnknwn",
      "author_association": "NONE",
      "body": "@daxian-dbw For reference, here's the bug I opened that covers the documentation issue: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/5097",
      "created_at": "2020-01-31T20:43:28Z",
      "updated_at": "2020-01-31T20:43:28Z"
    },
    {
      "author": "oising",
      "author_association": "CONTRIBUTOR",
      "body": "See `Wait-Event`",
      "created_at": "2020-05-06T18:18:53Z",
      "updated_at": "2020-05-06T18:18:53Z"
    }
  ],
  "created_at": "2019-11-14T00:02:08Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered",
    "WG-Cmdlets-Utility"
  ],
  "number": 11065,
  "state": "closed",
  "title": "Waiting on C# Events Causes Deadlocks",
  "updated_at": "2020-05-06T18:18:53Z"
}