{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7134",
  "author": "rjmholt",
  "body": "After discussion in https://github.com/PowerShell/PowerShell/pull/7126#discussion_r197228400 and reading various posts ([1](https://stackoverflow.com/questions/1646807/quick-and-simple-hash-code-combinations), [2](https://stackoverflow.com/a/263416/9944203), [3](https://blogs.msdn.microsoft.com/ericlippert/2011/02/28/guidelines-and-rules-for-gethashcode/), [4](https://msdn.microsoft.com/en-us/library/system.object.gethashcode%28v=vs.110%29.aspx), [5](http://www.eternallyconfuzzled.com/tuts/algorithms/jsw_tut_hashing.aspx), [6](https://computinglife.wordpress.com/2008/11/20/why-do-hash-functions-use-prime-numbers/)), it seems like a multiplicative hash function might be better implementation than the current XOR hash used in `Utils.CombineHashCodes()`.\r\n\r\nNote that changing the algorithm is, by definition, not a breaking change. To quote [the MSDN page on `Object.GetHashCode()`](https://msdn.microsoft.com/en-us/library/system.object.gethashcode(v=vs.110).aspx):\r\n> A hash code is intended for efficient insertion and lookup in collections that are based on a hash table. A hash code is not a permanent value... Do not serialize hash code values or store them in databases... Do not send hash codes across application domains or processes. In some cases, hash codes may be computed on a per-process or per-application domain basis... Do not test for equality of hash codes to determine whether two objects are equal. (Unequal objects can have identical hash codes.) To test for equality, call the ReferenceEquals or Equals method.\r\n\r\nAlso, it would be worthwhile implementing an array overload of `Utils.CombineHashCodes()`, like `Utils.CombineHashCodes(params int[] hs)` and `Utils.CombineHashCodes(int h, params int[] hs)`.",
  "closed_at": null,
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "That code is copied from .Net [here](https://github.com/dotnet/corefx/blob/103639b6ff5aa6ab6097f70732530e411817f09b/src/Common/src/CoreLib/System/Tuple.cs#L68) - so if you believe you have a better implementation, consider opening an issue with corefx.\r\n\r\nI *think* the shift avoids the problems of xor transitivity and that shift + xor is faster than multiplication.\r\n\r\nAnd last thing - an overload taking `params` is discouraged because it allocates memory. For non-library code, such an overload is never needed because we can always add 1 more overload that takes the exact number of parameters. Library code does not have that luxury, so libraries make the trade-off of providing a number of overloads for the most common uses and the inefficient overload for all other cases.",
      "created_at": "2018-06-23T15:36:05Z",
      "updated_at": "2018-06-23T15:36:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We have several alternative implementations of `GetHashCode` method in the repo. \r\nI discovered this when I had to implement this method for `SymVer` type some time ago. I had the idea of opening a case on this issue but I thought that this is a very rare situation. And this question again appeared. I think we need to revise our code and if possible use the standard implementation from CoreFX.",
      "created_at": "2018-06-23T18:53:12Z",
      "updated_at": "2018-06-23T18:53:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We have in .Net Core 2.1 \r\nDiscussion [System.HashCode](https://github.com/dotnet/corefx/issues/14354)\r\nImplementation\r\nhttps://github.com/dotnet/corefx/pull/25013\r\nhttps://github.com/dotnet/coreclr/pull/14863\r\n",
      "created_at": "2018-06-25T12:20:38Z",
      "updated_at": "2018-06-25T13:52:01Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Great, so they added a public api - best to just use that and remove the PowerShell copy.",
      "created_at": "2018-06-25T15:09:56Z",
      "updated_at": "2018-06-25T15:09:56Z"
    }
  ],
  "created_at": "2018-06-21T18:25:54Z",
  "labels": [
    "WG-Engine",
    "Issue-Code Cleanup"
  ],
  "number": 7134,
  "state": "open",
  "title": "Change Utils.CombineHashCodes() to use .NET Core's HashCode.Combine() method",
  "updated_at": "2018-06-25T16:22:43Z"
}