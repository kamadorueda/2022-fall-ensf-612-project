{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5718",
  "author": "NonSecwitter",
  "body": "On Windows 10 and Server 2016 DataCenter, there seems to be a problem with CIM class `MSFT_WUOperationsSession` in namespace `root/Microsoft/Windows/WindowsUpdate`\r\n\r\n## Expected Behavior\r\nIt seems that the class was properly implemented in server Nano: https://blogs.technet.microsoft.com/nanoserver/2016/01/16/updating-nano-server-using-windows-update-or-windows-server-update-service/\r\n\r\nFollowing the outlined instructions, I would expect to be able to search for and apply updates on any Windows 10/Server 2016 based operating system.\r\n\r\n## Current Behavior\r\nThis command:\r\n`$sess = New-CimInstance -Namespace root/Microsoft/Windows/WindowsUpdate -ClassName MSFT_WUOperationsSession`\r\n\r\nReturns this error:\r\n\r\n> New-CimInstance : Invalid class\r\n>At line:1 char:9\r\n> $sess = New-CimInstance -Namespace root/Microsoft/Windows/WindowsUpda ...\r\n>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n>CategoryInfo  : MetadataError: (MSFT_WUOperationsSession:CimInstance) [New-CimInstance], CimException\r\n>FullyQualifiedErrorId : HRESULT >0x80041010,Microsoft.Management.Infrastructure.CimCmdlets.NewCimInstanceCommand\r\n\r\nHowever, the class and all of its methods are listed using:\r\n`Get-CimClass -Namespace root/Microsoft/Windows/WindowsUpdate`\r\n\r\nand\r\n\r\n` Get-CimClass -Namespace root/Microsoft/Windows/WindowsUpdate -ClassName MSFT_WUOperationsSession | select -ExpandProperty CimClassMethods`\r\n\r\n## Possible Solution\r\nComplete or update implementation of MSFT_WUOperationsSession for Windows 10 and Server 2016.\r\n\r\n## Steps to Reproduce\r\n1. Open Powershell on Windows 10 or Server 2016 Datacenter\r\n2. Execute: `$sess = New-CimInstance -Namespace root/Microsoft/Windows/WindowsUpdate -ClassName MSFT_WUOperationsSession`\r\n3. Execute: `Get-CimClass -Namespace root/Microsoft/Windows/WindowsUpdate`\r\n4. Execute: ` Get-CimClass -Namespace root/Microsoft/Windows/WindowsUpdate -ClassName MSFT_WUOperationsSession | select -ExpandProperty CimClassMethods`\r\n\r\n## Context (Environment)\r\nLack of implementation prevents programmatic control of windows updates through CIM/WMI, particularly remote control over WinRM/WSMan. \r\n\r\nThere is a COM object for the Windows Update Agent, but it doesn't support remote execution. Implementing over WinRM/WSMan would improve control of resources from a centralized or remote location.",
  "closed_at": "2018-10-21T12:33:26Z",
  "comments": [
    {
      "author": "RichardSiddaway",
      "author_association": "NONE",
      "body": "On Windows Server 2016 I have successfully used and still use this class. The CIM classes were changed on Windows 10 FCU and Server 1709 and you have to use MSFT_WUOperations instead of MSFT_WUOperationsSession. The methods on MSFT_WUOperations  -  ScanForUpdates and InstallUpdates are static so you don't need to create and instance of the class.\r\n\r\nDetails of using the MSFT_WUOperations class are here: https://richardspowershellblog.wordpress.com/2017/11/17/windows-update-change-in-server-1709/\r\n",
      "created_at": "2017-12-19T18:00:20Z",
      "updated_at": "2017-12-19T18:00:20Z"
    },
    {
      "author": "NonSecwitter",
      "author_association": "NONE",
      "body": "@RichardSiddaway Thanks for the information. MSFT_WUOperations does indeed work on my Windows 10 machine, locally. Maybe I was mistaken about 2016, but I could have sworn that earlier testing was not working correctly for myself and others.\r\n\r\nIn any case, do you have any insights into how this CIM Method works? I'm trying to get this to run remotely, but I get this error, whether I run it with `Invoke-Command` .... `Invoke-CimMethod` .... or in a remote PSSession.\r\n\r\n> Invoke-CimMethod : WU Scan Failed\r\n> At line:1 char:1\r\n> + Invoke-CimMethod -Namespace \"root/Microsoft/Windows/WindowsUpdate\" -C ...\r\n> + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n>     + CategoryInfo          : PermissionDenied: (root/Microsoft/...FT_WUOperations:String) [Invoke-CimMethod], CimException\r\n>     + FullyQualifiedErrorId : HRESULT 0x80070005,Microsoft.Management.Infrastructure.CimCmdlets.InvokeCimMethodCommand\r\n>     + PSComputerName        : <computername>\r\n ",
      "created_at": "2017-12-19T22:49:17Z",
      "updated_at": "2017-12-19T22:49:17Z"
    },
    {
      "author": "RichardSiddaway",
      "author_association": "NONE",
      "body": "Can you show your whole line of code. What's the OS of the machine you're trying to remote to?",
      "created_at": "2017-12-20T12:55:06Z",
      "updated_at": "2017-12-20T12:55:06Z"
    },
    {
      "author": "NonSecwitter",
      "author_association": "NONE",
      "body": "If I run this, targeting a remote machine, I get the above error:\r\n`Invoke-CimMethod -Namespace \"root/Microsoft/Windows/WindowsUpdate\" -ClassName \"MSFT_WUOperations\" -MethodName ScanForUpdates -Arguments @{SearchCriteria=\"IsInstalled=0\"} -ComputerName <computername>`\r\n\r\nIf I run this, targeting the local machine, I get a result set.\r\n\r\n`Invoke-CimMethod -Namespace \"root/Microsoft/Windows/WindowsUpdate\" -ClassName \"MSFT_WUOperations\" -MethodName ScanForUpdates -Arguments @{SearchCriteria=\"IsInstalled=0\"} `\r\n\r\nAnother problem I'm seeing is that I get an empty result set, although WSUS is showing that there are updates needed for the machine. Using the PSWindowsUpdate module, I can see that WSUS is set as the default servicing manager. My updates have installed, so I can't tell whether PSWindowsUpdate or WindwosUpdateProvider are returning the same results as the CIM method, but I noticed the inconsistency between the CIM method and WSUS last night before the updates installed.\r\n\r\nI'm targeting Windows 10 1709 machines from a Windows 10 1709 mcahine.\r\n\r\n~~\r\nI have tried the above with WSMAN and DCOM as the protocol. I validated that WINRM is working with the following:\r\n\r\n```\r\n$Computer = <RemoteComputer>\r\n$CimOption = New-CimSessionOption -Protocol Dcom\r\n$CimSession = New-CimSession -ComputerName $Computer -SessionOption $CimOption\r\n\r\nInvoke-CimMethod -CimSession $CimSession -Namespace \"root/Microsoft/Windows/WindowsUpdate\" -ClassName \"MSFT_WUOperations\" -MethodName ScanForUpdates -Arguments @{SearchCriteria=\"IsInstalled=0\"} \r\n\r\n\r\nGet-CimInstance -ClassName win32_operatingsystem -CimSession $CimSession\r\n```\r\nWhether I set the protocol to DCOM or WSMAN, MSFT_WUOperations fails, but WIN32_OperatingSystem succeeds.",
      "created_at": "2017-12-20T15:09:08Z",
      "updated_at": "2017-12-20T16:00:31Z"
    },
    {
      "author": "RichardSiddaway",
      "author_association": "NONE",
      "body": "I'm not sure what's happening here but I suspect that someone thought it would be a good idea to revert to the situation we had with the old WSUS COM object that didn't work remotely.  The IIS WMI provider had these sorts of problems but they could be overcome by using PacketPrivacy .\r\nThis isn't really a PowerShell problem per se - its a WSUS/CIM problem that's surfacing through PowerShell.  This is madness because the MSFT_WUOperationsSession class from server 2016 and early Windows 10 versions works perfectly well remotely.",
      "created_at": "2017-12-20T17:06:08Z",
      "updated_at": "2017-12-20T17:06:08Z"
    },
    {
      "author": "RichardSiddaway",
      "author_association": "NONE",
      "body": "Just to add to the fun with this\r\n\r\nI successfully ran the ScanForUpdates method across a remote session direct to the VM using PowerShell Direct. I used the local Administrator credential on the VM and everything worked.\r\n\r\n\r\n",
      "created_at": "2017-12-20T17:25:14Z",
      "updated_at": "2017-12-20T17:25:14Z"
    },
    {
      "author": "NonSecwitter",
      "author_association": "NONE",
      "body": "I had the same suspicion. FWIW, \r\n\r\n+ Watching the WSMAN traffic with wireshark, I see an HTTP 500 response to my MSFT_WUOperations request. \r\n+ Event Viewer for \"WMI-Activity\" shows this error\r\n```\r\nId = {0A721CAE-794D-0003-1A24-720A4D79D301}; ClientMachine = <computer>; \r\nUser = ASSOC\\<myaccount>.admin; ClientProcessId = 2380; Component = Provider; \r\nOperation = Start IWbemServices::ExecMethod - root\\microsoft\\windows\\windowsupdate :\r\nMSFT_WUOperations::ScanForUpdates; ResultCode = 0x80041001; PossibleCause = Unknown\r\n```\r\n+ ResultCode = 0x80041001 means \"Call failed.\"  (https://msdn.microsoft.com/en-us/library/aa394559(v=vs.85).aspx)\r\n+ The DCOM security configuration doesn't allow me to enable remote execution of wuapihost for admins (just to test and see what would happen)\r\n\r\nI suppose *some* functionality is an improvement over needing PSWindowsUpdate, but Microsoft really pisses me off for their lack of attention to such a critical component for maintaining our systems. Why is it such a problem to get a decent update framework? Clearly \"Paint 3D\" was more important for the bottom line. ",
      "created_at": "2017-12-20T17:55:25Z",
      "updated_at": "2017-12-20T17:59:50Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The issue should be reported by Windows Preview feedback channel.",
      "created_at": "2018-10-21T12:33:26Z",
      "updated_at": "2018-10-21T12:33:26Z"
    }
  ],
  "created_at": "2017-12-19T17:49:08Z",
  "number": 5718,
  "state": "closed",
  "title": "WMI Namespace: WindowsUpdate",
  "updated_at": "2018-10-21T12:33:26Z"
}