{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16388",
  "author": "iRon7",
  "body": "### Summary of the new feature / enhancement\n\nSetting [`Set-StrictMode`](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/set-strictmode) to a specific `-Version` level automatically implies that *all prior* prohibitors are enabled. Meaning that there is no way just select for a recent prohibitor (e.g. \"*out of bounds or unresolvable array indexes*\") without also selecting a earlier prohibitor (e.g. \"*references to uninitialized variables*\").\r\n\r\nA `-Modes` parameter that supports certain prohibit flags, e.g.:\r\n```PowerShell\r\n[Flags()] enum StrictModes {\r\n    ProhibitReferencesToUninitializedVariables = 1\r\n    ProhibitReferencesToNonExistentProperties = 2\r\n    ProhibitUseOfCallingMethodSyntax = 4\r\n    ProhibitUnresolvableArrayIndexes = 8\r\n    ProhibitOmittingWriteOutput = 16\r\n}\r\n```\r\nwill avoid that.\r\nThe lack of selective prohibitors also holds back the future extensions of the `Set-StrictMode` cmdlet as e.g. [`#15781`Strict Write-Output](https://github.com/PowerShell/PowerShell/issues/15781).\r\n\n\n### Proposed technical implementation details (optional)\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "Also possible (false positive) bugs in specific `Set-StrictMode` modes as in [`#16427` Set-StrictMode -Version Latest: False positive for references to non-existent properties of an object](https://github.com/PowerShell/PowerShell/issues/16427) could be excluded/suppressed while still being able to as strict as possible with the rest of the prohibitors, using a command as e.g.: `Set-StrictMode -Mode 29`",
      "created_at": "2021-11-10T13:14:27Z",
      "updated_at": "2021-11-10T13:14:27Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "@mklement0,\r\n\r\n> Even if lexical scoping were to be introduced, the dynamic scoping of the existing strict modes would have to be retained for backward compatibility, which would invite confusion and subtle bugs.\r\n\r\nA different way to implement lexical scoping is by excluding using [SuppressMessageAttribute Class](https://docs.microsoft.com/dotnet/api/system.diagnostics.codeanalysis.suppressmessageattribute) in the cmdlet binding similar to the approach of PSScriptAnalyzer.",
      "created_at": "2021-11-29T14:11:58Z",
      "updated_at": "2021-11-29T14:11:58Z"
    }
  ],
  "created_at": "2021-11-07T12:10:28Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Language"
  ],
  "number": 16388,
  "state": "open",
  "title": "`-Mode` parameter for `Set-StrictMode`",
  "updated_at": "2021-11-29T14:11:58Z"
}