{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15075",
  "author": "GitClickOk",
  "body": "When using `Stop-Process` to terminate a process, a (very) common task is stop the entire tree of this process. To be more precise, ALL times when I need stop some process I need terminate the entire tree.\r\n\r\nCurrently the easiest way to do it is using taskkill:\r\n`taskkill /IM \"notepad.exe\" /T /F`\r\nobviously it is not a built in PowerShell Core feature. The PSCore command is `Stop-Process`, but it has not a built in way to kill the tree, then we need some pipeline-fu like [here](https://stackoverflow.com/a/55942155/48729).\r\n\r\nThen, by the same reason TaskKill has a /T flag, I propose `Stop-Process` get a ~~`-Tree`~~ `-Recurse` (as suggested by @GeeLaw) parameter. It is a natural addition, and surely it will avoid a lot of errors and extra boilerplate scripting for a so common task.\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "p0W3RH311",
      "author_association": "NONE",
      "body": "use the `-Force` switch ?",
      "created_at": "2021-03-21T09:51:15Z",
      "updated_at": "2021-03-21T09:51:15Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@p0W3RH311, all that the `-Force` switch does is it suppresses the confirmation prompt that is shown by default when you attempt to kill a different user's process(es).\r\n\r\n~~`-Tree`~~ better: `-Recurse`, as suggested by @GeeLaw, would be new functionality that maps onto  [`.Kill(true)`](https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.process.kill?view=net-5.0#System_Diagnostics_Process_Kill_System_Boolean_)",
      "created_at": "2021-03-21T15:55:48Z",
      "updated_at": "2021-03-25T17:56:08Z"
    },
    {
      "author": "GeeLaw",
      "author_association": "NONE",
      "body": "I think `-Recurse` aligns better with current terminology (cf. file system provider).",
      "created_at": "2021-03-25T16:32:51Z",
      "updated_at": "2021-03-25T16:32:51Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "My preference would be `-IncludeChildProcesses` as it's descriptive for non-technical folks, but we can alias it to `-Recurse`",
      "created_at": "2021-07-28T23:08:25Z",
      "updated_at": "2021-07-28T23:08:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Since we say about \"Stop\" it makes sense to _get_ a list of the child processes. I mean the parameter could be in Get-Process cmdlet too.",
      "created_at": "2021-07-29T03:34:53Z",
      "updated_at": "2021-07-29T03:34:53Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov I think `Get-Process` should definitely have the same parameters and the output should be formatted to look like a tree.  I think that should probably be a different issue linked to this one as you could implement one without the other.  Although in the case of `Get-Process`, `-Tree` would make more sense than `-Recurse`, but maybe we really need a `Format-Tree` cmdlet which would also work with other objects?",
      "created_at": "2021-07-29T04:21:05Z",
      "updated_at": "2021-07-29T04:22:28Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> maybe we really need a Format-Tree cmdlet which would also work with other objects?\r\n\r\nGood idea but I can not thing how we could inject/involve the Format-Tree cmdlet in smart way. Perhaps we could enhance Format-Table cmdlet `Get-Process -IncludeChildProcesses  | ft -TreeDisplayProperty Name -TreeBuildPropertyPair ProcessId, ParentProcessId` (we could automatically pick up right format view based on IncludeChildProcesses  custom type).",
      "created_at": "2021-07-29T04:46:10Z",
      "updated_at": "2021-07-29T04:46:10Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/wg-powershell-cmdlets discussed this and think it's reasonable to add a `-IncludeChildProcess` parameter to `Stop-Process` that terminates all child processes in addition to the parent process. There should also be a `-Tree` alias to `-IncludeChildProcess`. \r\n\r\nMarking this as Up-for-Grabs as it's not a high priority for us at this time.",
      "created_at": "2021-09-08T16:56:08Z",
      "updated_at": "2021-09-08T16:56:08Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov we should have the `Format-Table` tree view probably as a GitHub discussion?",
      "created_at": "2021-09-08T16:56:51Z",
      "updated_at": "2021-09-08T16:56:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> @iSazonov we should have the `Format-Table` tree view probably as a GitHub discussion?\r\n\r\n> > maybe we really need a Format-Tree cmdlet which would also work with other objects?\r\n> \r\n> Good idea but I can not thing how we could inject/involve the Format-Tree cmdlet in smart way. Perhaps we could enhance Format-Table cmdlet `Get-Process -IncludeChildProcesses | ft -TreeDisplayProperty Name -TreeBuildPropertyPair ProcessId, ParentProcessId` (we could automatically pick up right format view based on IncludeChildProcesses custom type).\r\n\r\nMy current proposal would be to benefit from `View` - `Get-Process -IncludeChildProcesses | ft -View Tree`. Since we added tab completion for View parameter (also there could be automatic Tree view selection) we can _hide all in Formatting system_ and get great user experience. Although the implementation can be non-trivial. This brings us back to the idea of Format-Tree which is not trivial for injection too.\r\n\r\nAnother thoughts. Modern process and directory/file names are so long that I don't see how we could display such wide tree in a window. _It is a feature rather for Out-GridView_ where we could implement expand-collapse feature for nested data.\r\n\r\nSo I am very skeptical today about further Github Discussion. :-)",
      "created_at": "2021-09-09T04:21:54Z",
      "updated_at": "2021-09-09T04:21:54Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Starting with just a `Tree` view for `ProcessInfo` seems like a good idea.  Maybe I'll work on that this weekend...  ",
      "created_at": "2021-09-09T17:13:15Z",
      "updated_at": "2021-09-09T17:13:15Z"
    },
    {
      "author": "nickkimbrough",
      "author_association": "NONE",
      "body": "> @PowerShell/wg-powershell-cmdlets discussed this and think it's reasonable to add a `-IncludeChildProcess` parameter to `Stop-Process` that terminates all child processes in addition to the parent process. There should also be a `-Tree` alias to `-IncludeChildProcess`.\r\n\r\n@SteveL-MSFT , as @mklement0 stated, this could simply be mapped to `.Kill(true)`, but that method returns `void` and wouldn't allow us to passthru the child processes that were stopped. Should the `-PassThru` functionality remain as it is today and only return the matching parent processes, or should we add additional logic to also return the child processes that were stopped as well?",
      "created_at": "2021-12-02T02:57:55Z",
      "updated_at": "2021-12-02T02:57:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I am ok with \"only return the matching parent processes\".",
      "created_at": "2021-12-02T03:14:57Z",
      "updated_at": "2021-12-02T03:14:57Z"
    },
    {
      "author": "GeeLaw",
      "author_association": "NONE",
      "body": "I think returning the matching parent process(es) is the desired behavior.\r\n\r\nConsider `Get-Proces ... | Stop-Process -Recurse -PassThru`. I expect `-PassThru` to mean \"do not eat the objects piped into this cmdlet\". Since only parent processes are piped in, only those should be piped out. And it's intuitive for `Stop-Process A -AnyOtherArguments` to behave the same way as `Get-Process A | Stop-Process -AnyOtherArguments`.",
      "created_at": "2021-12-05T11:35:18Z",
      "updated_at": "2021-12-05T11:35:18Z"
    }
  ],
  "created_at": "2021-03-20T20:19:20Z",
  "labels": [
    "Issue-Enhancement",
    "Up-for-Grabs",
    "WG-Cmdlets-Management"
  ],
  "number": 15075,
  "state": "open",
  "title": "Add a -Tree or -Recurse parameter to Stop-Process",
  "updated_at": "2021-12-05T11:35:19Z"
}