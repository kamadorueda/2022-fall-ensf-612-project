{
  "_url": "https://github.com/PowerShell/PowerShell/issues/18390",
  "author": "mklement0",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nWhen you use `-ErrorVariable` and a _statement-terminating_ error is captured, it is unexpectedly captured as a `System.Exception`-derived type, not as a `System.Management.Automation.ErrorRecord`, the way it is captured in the automatic `$Error` variable.\r\n\r\nNote: While this inconsistency could selectively be used to infer whether a given error was non-terminating or statement-terminating, I suspect it isn't intentional; determining the error type should be an intentional feature: see:\r\n *  #4781\r\n\r\nRepro:\r\n\r\n```powershell\r\n# Define a function that first reports a non-terminating error,\r\n# and then a statement-terminating one.\r\nfunction foo {\r\n\r\n  [CmdletBinding()]\r\n  param()\r\n\r\n  # Report a NON-TERMINATING error.\r\n  $PSCmdlet.WriteError(\r\n    [System.Management.Automation.ErrorRecord]::new(\r\n      \"non-terminating error\", # message\r\n      \"test_nt\", # custom error ID\r\n      'NotSpecified', # [System.Management.Automation.ErrorCategory] value\r\n      $null # target object\r\n    )\r\n  )\r\n\r\n  'continuing...'\r\n\r\n  # Report a STATEMENT-TERMINATING error, which aborts execution of the function.\r\n  $PSCmdlet.ThrowTerminatingError(\r\n    [System.Management.Automation.ErrorRecord]::new(\r\n      \"statement-terminating error\",\r\n      \"test_st\",\r\n      'NotSpecified',\r\n      $null\r\n    )\r\n  )\r\n\r\n  'Never get here.'\r\n\r\n}\r\n\r\n# Uses the foo function defined above.\r\n# Note: If you additionally use -ErrorAction Stop, a similar discrepancy\r\n#       occurs: $captured then contains a [System.Management.Automation.ActionPreferenceStopException] instance.\r\n$Error.Clear(); foo -ErrorVariable captured\r\n\r\n'-- $Error types:'\r\n$Error | % GetType | % FullName\r\n\r\n'-- -ErrorVariable types:'\r\n$captured | % GetType | % FullName\r\n```\r\n\r\n### Expected behavior\r\n\r\n```console\r\n# ... error output\r\n-- $Error types:\r\nSystem.Management.Automation.ErrorRecord\r\nSystem.Management.Automation.ErrorRecord\r\n-- -ErrorVariable types:\r\nSystem.Management.Automation.ErrorRecord\r\nSystem.Management.Automation.ErrorRecord\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\n# ... error output\r\n-- $Error types:\r\nSystem.Management.Automation.ErrorRecord\r\nSystem.Management.Automation.ErrorRecord\r\n-- -ErrorVariable types:\r\nSystem.Management.Automation.ErrorRecord\r\nSystem.Management.Automation.CmdletInvocationException\r\n```\r\n\r\nThat is, `-ErrorVariable` captured the statement-terminating error as a `System.Management.Automation.CmdletInvocationException` instance rather than as a `System.Management.Automation.ErrorRecord` instance.\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nPowerShell Core 7.3.0-preview.8\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [],
  "created_at": "2022-10-26T16:11:30Z",
  "labels": [
    "WG-Engine",
    "Needs-Triage"
  ],
  "number": 18390,
  "state": "open",
  "title": "-ErrorVariable unexpectedly captures statement-terminating errors as instances of System.Exception-derived types rather than of ErrorRecord",
  "updated_at": "2022-10-26T20:38:38Z"
}