{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5187",
  "author": "lzybkr",
  "body": "Steps to reproduce\r\n------------------\r\nRun a command like\r\n\r\n```powershell\r\nechoargs {1}\r\nbcdedit /set {cbd971bf-b7b8-4885-951a-fa03044f5d71} device partition=C:\r\n```\r\n\r\nPowerShell has long assumed that an argument that looks like a `ScriptBlock` is always a script block - regardless of what command is being called. If the command is native, a very different command line is passed.\r\n\r\nThis doesn't make sense for most native commands. Long ago there was a vision that there might be many native commands that supported PowerShell and maybe this made sense then, but that hasn't happened.\r\n\r\nThe workaround is to use quotes - not a bad workaround but still shouldn't be necessary.\r\n\r\nIf we changed the behavior, we would still pass these special parameters to `powershell.exe` and `pwsh.exe`.\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nPS> echoargs {1}\r\narg 0: <{1}>\r\n\r\nCommandLine:\r\nEchoArgs.exe {1}\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nPS> echoargs {1}\r\narg 0: <-encodedCommand>\r\narg 1: <MQA=>\r\narg 2: <-inputFormat>\r\narg 3: <xml>\r\narg 4: <-outputFormat>\r\narg 5: <text>\r\n\r\nCommandLine:\r\nEchoArgs.exe -encodedCommand MQA= -inputFormat xml -outputFormat text\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "So the expected behavior is that if the command is native, braces are literal always?  What about parenthesis?",
      "created_at": "2017-10-21T00:47:49Z",
      "updated_at": "2017-10-21T00:47:49Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I'm suggesting syntax doesn't matter - if the **value** is a `ScriptBlock`, pass the literal text unless calling `powershell.exe` or `pwsh.exe`, then use `-encodedCommand`.\r\n\r\nWe could attempt to be smart too - only pass the literal if the `ScriptBlock` has no whitespace, or I suppose escaped whitespace",
      "created_at": "2017-10-21T01:28:22Z",
      "updated_at": "2017-10-21T01:28:22Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Isn't this a dupe of https://github.com/PowerShell/PowerShell/issues/1761?",
      "created_at": "2017-10-25T01:02:27Z",
      "updated_at": "2017-10-25T01:02:27Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Not really a dupe.",
      "created_at": "2017-10-26T02:24:07Z",
      "updated_at": "2017-10-26T02:24:07Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr Historical context: this feature was introduced when we were still having to consider mini-shells. In that scenario, we were expecting many, many shells - essentially one mini-shell executable per module - all with unknown names. And so we autoconverted scriptblocks for all executables. Obviously that is no longer the case however people may have aliases/symlinks for our binaries (similar to python & python3). So there is still a chance that there will be unknown binaries. As an alternative to hard coding the list of executables, we could tweak the converter to special-case GUIDs. Are there other common cases where we'd want scriptblocks passed to executable verbatim?",
      "created_at": "2018-03-09T21:03:42Z",
      "updated_at": "2018-03-09T21:03:42Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@BrucePay - `bcdedit` accepts names in place of a GUID, e.g.: ` bcdedit /default {ntldr}`.\r\n\r\nI suppose a heuristic is possible though - if there are no spaces, it's unlikely to be a script block. Furthermore, if the text specifies calling a single command with no arguments and that command doesn't exist, that is very strong evidence that it's not really a script block - that would cover most use cases.\r\n\r\nThat said, I've never seen another executable that relies on this behavior. Introducing quirky behavior on the off chance that a non-PowerShell binary expects the current behavior is maybe being a little too paranoid w.r.t. compatibility.",
      "created_at": "2018-03-09T21:21:15Z",
      "updated_at": "2018-03-09T21:21:15Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "As for the symlink issue (the PowerShell executable in disguise): resolving symlinks to their ultimate target to check the latter's name sounds like a simple solution.\r\n\r\nI agree that _not_ employing heuristics is best - both in this case and #1761 - because in the long run users are better served by simply having to remember - and being able to rely on - _one_ simple rule:\r\n\r\n_PowerShell's own syntax requirements must be satisfied first_, which means that any metacharacters recognized by PowerShell must be quoted for literal use in an argument.\r\n\r\nYes, for users unfamiliar with PowerShell's syntax that involves growing pains - given that more characters are metacharacters than in other shells, especially compared to `cmd.exe`, but the _principle_ is the same: Just like you must double-quote a literal `&` in `cmd.exe`, for instance, you must quote a `{...}` token meant to be a literal.\r\n\r\nIn the long run, and across different scenarios, not having to remember heuristics and exceptions is a blessing.\r\n\r\n> The workaround is to use quotes - not a bad workaround but still shouldn't be necessary.\r\n\r\nTherefore, I wouldn't frame the need to use quoting as a _workaround_ - it's simply a syntactic necessity in PowerShell.\r\n\r\nAs PowerShell sees wider adoption - and perhaps even becomes the single, _cross-platform_ choice for users - these issues will lessen: \r\n\r\n * users will know the syntax requirements\r\n * more command lines that use PowerShell syntax to begin with will appear online\r\n\r\nThat said (a separate issue), the [broken treatment of double quotes](https://github.com/PowerShell/PowerShell-Docs/issues/2361) will continue to be a pain point.\r\n\r\n---\r\n\r\nAs for helping users understand:\r\n\r\nIn the case at hand, applying the usual rules - stringification of a script block to its literal content - will at least tell users that the `{` and `}` were \"eaten\" during invocation, which is a starting point for investigation.\r\n\r\nIn #1761 the symptom is more obscure.\r\n\r\nProviding a way to inspect the actual arguments passed would definitely be helpful, as originally discussed in https://github.com/PowerShell/PowerShell/issues/1761#issuecomment-283857859.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-10-09T15:34:00Z",
      "updated_at": "2018-10-09T15:34:00Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "Could we just limit the encoding to script blocks following `-Command` or `-c`? (Unfortunately, `-c` is rather common, but we must support it anyway.)",
      "created_at": "2020-08-21T16:17:45Z",
      "updated_at": "2020-08-21T16:17:45Z"
    }
  ],
  "created_at": "2017-10-21T00:42:16Z",
  "labels": [
    "Issue-Discussion",
    "Breaking-Change"
  ],
  "number": 5187,
  "state": "open",
  "title": "Passing a ScriptBlock (in syntax only) to native commands produces surprising results",
  "updated_at": "2020-08-21T16:17:45Z"
}