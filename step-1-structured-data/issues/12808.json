{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12808",
  "author": "konrad-jamrozik",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n$ErrorActionPreference = \"Stop\"\r\n$moduleContent = @'\r\n$ErrorActionPreference = \"Stop\" \r\nfunction foo { \r\n  Write-Error \"fail\"\r\n  Write-Host \"After!\" \r\n}\r\nExport-ModuleMember -Function \"foo\" -Variable *\r\n'@\r\n\r\n$moduleContent | Set-Content .\\foo_module.psm1\r\nImport-Module .\\foo_module.psm1\r\n(Get-Content .\\foo_module.psm1).Replace('$Err','#$Err') | Set-Content .\\foo_module.psm1\r\nImport-Module .\\foo_module.psm1 -Force\r\nfoo\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nfoo:\r\nLine |\r\n  15 |  foo\r\n     |  ~~~\r\n     | fail\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nfoo:\r\nLine |\r\n  15 |  foo\r\n     |  ~~~\r\n     | fail\r\nAfter!\r\n```\r\n\r\nThe fact \"After!\" is output is unexpected.\r\nWays to prevent it:\r\n- Remove \"-Force\" from the second module import.\r\n- Add '$ErrorActionPreference = \"Stop\"' after the second module import\r\n- Remove \"-Variable *\" from the module.\r\n\r\nNotes: \r\n- Executing \"foo\" after singular import of a module, forced or not, will not output the \"After!\" line.\r\n- If you rerun the snippet again, the \"After!\" won't be output. \r\n- To make sure \"After!\" is always output, add \"-Force\" to the first module import.\r\n- My possibly related [question on Stack Overflow about forced module import removing functions](https://stackoverflow.com/questions/61790138/how-to-forcefully-import-function-from-a-module-without-removing-other-functions).\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.1\r\nPSEdition                      Core\r\nGitCommitId                    7.0.1\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "@konrad-jamrozik I think the discussion in #2505 might be related.",
      "created_at": "2020-05-27T19:15:55Z",
      "updated_at": "2020-05-27T19:15:55Z"
    },
    {
      "author": "konrad-jamrozik",
      "author_association": "NONE",
      "body": "Thanks @alx9r! I believe this might also have relevant information: [#4568 Need straightforward way to honor the caller's preference-variable values / inherited common parameters in functions defined in script modules](https://github.com/PowerShell/PowerShell/issues/4568)",
      "created_at": "2020-05-27T21:23:12Z",
      "updated_at": "2020-05-27T21:23:12Z"
    }
  ],
  "created_at": "2020-05-27T03:41:53Z",
  "labels": [
    "Issue-Question",
    "WG-Cmdlets-Core"
  ],
  "number": 12808,
  "state": "open",
  "title": "\"Import-Module -Force\" erases $ErrorActionPreference variable value.",
  "updated_at": "2021-01-16T14:38:07Z"
}