{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5166",
  "author": "DarwinJS",
  "body": "Can't do the following from openssh installer to find the latest powershell core.\r\n\r\nget-command \"c:\\program files\\PowerShell\\*\\PowerShell.exe\"\r\n\r\nSo the weird thing is to do the same thing for *any other default shell candidate* from third parties - this would likely work - to, for instance, find the latest bash.exe\r\n\r\nI can do a work around by using the versioned folder for now - but that only handles the default install location where the methodology of a versioned folder is followed by convention.  If someone drops it in another folder or I try get-command against the file unpathed - I won't find a version.\r\n\r\nThere are obviously a lot of other reasons this should be done - just giving light to a very practical and current scenario.",
  "closed_at": "2017-10-27T04:52:09Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems dup #4836 - we can discuss there.",
      "created_at": "2017-10-19T18:24:43Z",
      "updated_at": "2017-10-19T18:24:43Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "It is not really a duplicate - getting a version number to compile into the PE header should be a couple compiler settings.  Additionally, you could have an exe emit it's version without coding the PE header.\r\n\r\nBoth ways should be probably enabled, but importantly, the PE header can be examined without running the EXE.",
      "created_at": "2017-10-19T22:58:13Z",
      "updated_at": "2017-10-19T22:58:13Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "#4836 is different.  I think I can take care of this one and the icon one at the same time.",
      "created_at": "2017-10-20T03:30:10Z",
      "updated_at": "2017-10-20T03:30:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The issue for Windows only. If we'll think about portability it is better to be based on SMA.dll to get a version by Get-Command.",
      "created_at": "2017-10-21T20:52:39Z",
      "updated_at": "2017-10-21T20:52:39Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@DarwinJS what @iSazonov has found is that SMA.dll has file version information already with PSCore6 even on non-Windows.  Since that is a core dll that will always be there with PowerShell, you can rely on it (with the exception of Windows PowerShell where SMA.dll is in the GAC and not in $PSHOME)",
      "created_at": "2017-10-21T21:21:55Z",
      "updated_at": "2017-10-21T21:22:44Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "I appreciate the tip.  It would be great if it could be right in the EXEs like you all did with openssh.\r\n\r\nFor instance, I was working on the ability for the openssh package to probe for which exe to use for the DefaultShell.  By the time I got it done, I realized I would need to make sure they can only choose an EXE and should not be allowed to have any wildcards in the file name so that they are always going for a know file name and don't pickup unintention EXEs.\r\n\r\nJust wanted to give light to a use case where having it actually in the exe is not only what is generally expected on Windows - in this case it avoids custom code to go find the version for an EXE by looking in a DLL.\r\n\r\nIs it somehow more challenging to do it for powershell than it was for openssh?",
      "created_at": "2017-10-21T22:22:46Z",
      "updated_at": "2017-10-21T22:22:46Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@DarwinJS I have a PR opened for pwsh.exe on Windows, @iSazonov's comment is that checking the version of pwsh.exe only works on Windows while checking version of SMA.dll works on all platforms.",
      "created_at": "2017-10-21T22:59:05Z",
      "updated_at": "2017-10-21T22:59:05Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT - thanks for clarifying!  I was thinking it was being offered as a permanent alternative.",
      "created_at": "2017-10-21T23:33:20Z",
      "updated_at": "2017-10-21T23:33:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I found SMA.dll idea in VS Code repo - they use that to enumerate PowerShells on all platforms.",
      "created_at": "2017-10-22T17:33:56Z",
      "updated_at": "2017-10-22T17:33:56Z"
    }
  ],
  "created_at": "2017-10-19T16:55:18Z",
  "labels": [
    "Area-Maintainers-Build",
    "Resolution-Fixed"
  ],
  "number": 5166,
  "state": "closed",
  "title": "Please Start Versioning PowerShell.exe (So The latest version can be found by Get-Command)",
  "updated_at": "2017-10-27T04:55:17Z"
}