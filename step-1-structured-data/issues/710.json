{
  "_url": "https://github.com/PowerShell/PowerShell/issues/710",
  "author": "jpsnover",
  "body": "Even if we don't support much - what we do support we should tell people .\n",
  "closed_at": "2016-04-21T23:34:29Z",
  "comments": [
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "We support `--help` and `-h` which is the Linux way of specifying arguments. I would not be opposed to also supporting the Windows way, as the host should be as cross-platform as possible.\n",
      "created_at": "2016-03-20T21:42:58Z",
      "updated_at": "2016-03-20T21:42:58Z"
    },
    {
      "author": "jpsnover",
      "author_association": "CONTRIBUTOR",
      "body": "Related:  \n\nPS /home/jsnover/Scripts> powershell --hel \n\nUnhandled Exception: System.Management.Automation.ParseException: At line:1 char:3\n- --hel\n-   ~\n  Missing expression after unary operator '--'.\n\nAt line:1 char:3\n- --hel\n-   ~~~\n  Unexpected token 'hel' in expression or statement.\n  at System.Management.Automation.Runspaces.PipelineBase.Invoke(IEnumerable input)\n  at System.Management.Automation.Runspaces.Pipeline.Invoke()\n  at System.Management.Automation.PowerShell.Worker.ConstructPipelineAndDoWork(Runspace rs, Boolean performSyncInvoke)\n  at System.Management.Automation.PowerShell.Worker.CreateRunspaceIfNeededAndDoWork(Runspace rsToUse, Boolean isSync)\n  at System.Management.Automation.PowerShell.CoreInvokeHelper[TInput,TOutput](PSDataCollection`1 input, PSDataCollection`1 output, PSInvocationSettings settings)\n  at System.Management.Automation.PowerShell.CoreInvoke[TInput,TOutput](PSDataCollection`1 input, PSDataCollection`1 output, PSInvocationSettings settings)\n  at System.Management.Automation.PowerShell.CoreInvoke[TOutput](IEnumerable input, PSDataCollection`1 output, PSInvocationSettings settings)\n  at System.Management.Automation.PowerShell.Invoke(IEnumerable input, PSInvocationSettings settings)\n  at Microsoft.PowerShell.Linux.Host.Listener.ExecuteHelper(String cmd, Object input)\n  at Microsoft.PowerShell.Linux.Host.Listener..ctor(String initialScript, Boolean loadProfiles)\n  at Microsoft.PowerShell.Linux.Host.Program.Main(String[] args)\n",
      "created_at": "2016-03-21T12:02:16Z",
      "updated_at": "2016-03-21T12:02:16Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "That's implying PowerShell can support tab completion of CLIs of native programs, reminiscent of Bash's programmable completion. Given support of that in PowerShell, we would need to teach PS the native executable's CLI for `--hel` to work (or build in fuzzy matching in the host itself).\n",
      "created_at": "2016-03-21T15:24:15Z",
      "updated_at": "2016-03-21T15:24:15Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@vors What's doable here?\n",
      "created_at": "2016-03-21T15:30:56Z",
      "updated_at": "2016-03-21T15:30:56Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Native commands completion support is my long-time dream.\n\nIn v5, @lzybkr added `Register-ArgumentCompleter` which should make writing such completer  easier.\nI think it make sense to create a separate module for that, and not include it in the core itself.\n",
      "created_at": "2016-03-24T23:54:24Z",
      "updated_at": "2016-03-24T23:54:24Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Actually, my design is that modules provide their own completions via the ArgumentCompleter attribute, and Register-ArgumentCompleter is for modules where the author failed to provide any completion.\n\nNative exes are special though - there are cmdlet parameters to put attributes on, so you need Register-ArgumentCompleter anyway.\n",
      "created_at": "2016-03-28T15:06:01Z",
      "updated_at": "2016-03-28T15:06:01Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@vors @lzybkr is there anything to do here?\n",
      "created_at": "2016-04-12T00:15:02Z",
      "updated_at": "2016-04-12T00:15:02Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I haven't implemented any automatic way for native commands to register their completions.\n\nYou can see how powershell.exe completion is currently implemented - via a module that you need to install and load, see: https://github.com/lzybkr/TabExpansionPlusPlus/blob/master/WindowsExe.ArgumentCompleters.ps1\n\nThis file also demonstrates a way we can provide completion for \"structured\" commands like git - e.g. the 'net' command has a ton of things it can do, and after we know which action you're doing, you can have context sensitive completion, for example 'net start <TAB>' will complete service names via this code:\n\nhttps://github.com/lzybkr/TabExpansionPlusPlus/blob/master/WindowsExe.ArgumentCompleters.ps1#L190\n\nSo I think it might be useful to do more than what's currently built in, I'm just not sure of the best way for an exe to provide completion automatically as opposed to the user needing to load a module explicitly.\n",
      "created_at": "2016-04-12T00:24:41Z",
      "updated_at": "2016-04-12T00:24:41Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "This should now be resolved with #832.\n",
      "created_at": "2016-04-18T20:10:33Z",
      "updated_at": "2016-04-18T20:10:33Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Re-opening as we don't have tests.\n",
      "created_at": "2016-04-21T23:01:02Z",
      "updated_at": "2016-04-21T23:01:02Z"
    }
  ],
  "created_at": "2016-03-20T21:29:04Z",
  "number": 710,
  "state": "closed",
  "title": "PowerShell -? and -help should work",
  "updated_at": "2016-04-21T23:34:33Z"
}