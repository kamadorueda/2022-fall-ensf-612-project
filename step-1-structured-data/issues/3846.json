{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3846",
  "author": "poizan42",
  "body": "If I do the following:\r\n\r\n```PowerShell\r\n    $delegate = [System.Environment].GetMethod(\"GetEnvironmentVariable\", $([string])).CreateDelegate([System.Func[string,string]])\r\n    [System.Management.Automation.ScriptBlock]$delegate\r\n```\r\n\r\nThen I get the error:\r\n```\r\nCannot convert the \"System.Func`2[System.String,System.String]\" value of type \"System.Func`2[[System.String,\r\nSystem.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String,\r\nSystem.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]\" to type\r\n\"System.Management.Automation.ScriptBlock\".\r\nAt line:1 char:1\r\n+ [System.Management.Automation.ScriptBlock]$delegate\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidArgument: (:) [], RuntimeException\r\n    + FullyQualifiedErrorId : ConvertToFinalInvalidCastException\r\n```\r\n\r\nThe same happens if I attempt to cast to System.Management.Automation.PSMethod.\r\n\r\nOf course it can be wrapped in a script block with { $delegate.InvokeDynamic($args) }, and $delegate.Invoke is a PSMethod, but it feels like unnecessary boilerplate code.",
  "closed_at": null,
  "comments": [
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "What are you trying to accomplish? Why not \r\n`{ [Environment]::GetEnvironmentVariable( $args[0] ) }` or\r\n`{ param([string] $name) [Environment]::GetEnvironmentVariable( $name ) }` ",
      "created_at": "2017-05-23T15:42:17Z",
      "updated_at": "2017-05-23T15:53:47Z"
    },
    {
      "author": "poizan42",
      "author_association": "NONE",
      "body": "@powercode GetEnvironmentVariable was just to show an example. Assume that I have a delegate from some other source. e.g. because a function in my script is called from some C# code.",
      "created_at": "2017-05-23T23:22:54Z",
      "updated_at": "2017-05-23T23:22:54Z"
    },
    {
      "author": "poizan42",
      "author_association": "NONE",
      "body": "@iSazonov It wasn't meant as a question as much as a discussion about whether these casts should be added to PowerShell",
      "created_at": "2017-05-24T10:28:18Z",
      "updated_at": "2017-05-24T10:28:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@poizan42 Please correct the title and description of the Issue.",
      "created_at": "2017-05-24T10:36:33Z",
      "updated_at": "2017-05-24T10:36:33Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "I think it is more the question of what the gain is. \r\nSeems like ```{$delegate.invoke()}``` would accomplish the same thing.\r\n@poizan42 Do you mean we should add this as a convenience?",
      "created_at": "2017-10-30T17:38:46Z",
      "updated_at": "2017-10-30T17:38:46Z"
    },
    {
      "author": "poizan42",
      "author_association": "NONE",
      "body": "@powercode, yes, and there is already a convenience conversion from ScriptBlock, e.g.\r\n\r\n```PowerShell\r\n$block = { echo \"Hello, World!\" }\r\n([Func[String]]$block).Invoke()\r\n```\r\n\r\noutputs \"Hello, World!\" as expected. And I can see that you are working on adding conversions from PSMethod to delegates (#2864), so it would only be natural if they could all be casted to each other.",
      "created_at": "2017-10-31T12:16:28Z",
      "updated_at": "2017-10-31T12:16:28Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr Thoughts?",
      "created_at": "2017-10-31T14:32:18Z",
      "updated_at": "2017-10-31T14:32:18Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Interesting idea. If this was possible, I wonder if I would have used a `scriptblock` instead of a delegate in some places, e.g.:\r\n\r\n```\r\nSet-PSReadlineOption ... [-AddToHistoryHandler <Func[string,bool]>] [-CommandValidationHandler <Action[CommandAst]>] ...\r\n```\r\n\r\nWhen I added these features, I considered `scriptblock`, but used a delegate partly because it was convenient in C#, but also knowing that:\r\n1. Converting a script block to a delegate worked\r\n2. The arguments and expected return type are clearly documented in the syntax\r\n\r\nI could see adding the proposed conversion from delegate to script block, but I could also see adding support for explicit delegates in some cmdlets, e.g. `Where-Object` could be much faster if you used a delegate instead of converting the delegate to a script block.\r\n",
      "created_at": "2017-10-31T15:30:58Z",
      "updated_at": "2017-10-31T15:30:58Z"
    }
  ],
  "created_at": "2017-05-23T13:37:30Z",
  "number": 3846,
  "state": "open",
  "title": "Could it be made possible to cast from delegates to script blocks and psmethod?",
  "updated_at": "2017-10-31T15:30:58Z"
}