{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7131",
  "author": "alx9r",
  "body": "I'm experimenting with parallelizing unit tests.  I'd like to be able to run each test in a clean runspace so that variables set during one test don't affect other tests.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n$runspacePool = [runspacefactory]::CreateRunspacePool() \r\n$runspacePool.Open()\r\n\r\n$scriptblock = { $a; $a = 1 }\r\n\r\n'first'\r\n$powershell1 = [powershell]::Create().AddScript($scriptblock)\r\n$powershell1.RunspacePool = $runspacePool\r\n$powershell1.Invoke()\r\n\r\n'second'\r\n$powershell2 = [powershell]::Create().AddScript($scriptblock)\r\n$powershell2.RunspacePool = $runspacePool\r\n$powershell2.Invoke()\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nI expected the PowerShell/RunspacePool objects to ensure that the Runspace used on each call to .Invoke() was reset prior to use.\r\n\r\n```none\r\nfirst\r\nsecond\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\nThe variable set by the first PowerShell object is available to the second PowerShell object.\r\n\r\n```none\r\nfirst\r\nsecond\r\n1\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.688\r\nPSEdition                      Core\r\nGitCommitId                    v6.1.0-preview.688\r\nOS                             Microsoft Windows 6.3.9600\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "There is a method `ResetRunspaceState()` on individual runspaces but not on a runspace pool. Note that this method only resets the variables in the runspace. It doesn't reset the command/function tables because doing so was very slow. Looking at the code, it should be fairly easy to add the property to `RunspacePool` and reset the runspace state when it's allocated. Would that be sufficient for your purposes?",
      "created_at": "2018-06-21T20:18:42Z",
      "updated_at": "2018-06-21T20:18:42Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": ">...`ResetRunspaceState()` ...Note that this method only resets the variables in the runspace. It doesn't reset the command/function tables because doing so was very slow.\r\n\r\nThanks for pointing this out.  I wasn't aware of that.  I'll happily take that limited reset behavior anyway.  The only alternative seems to be priming a new runspace with modules for each test.  But I've found that to be much too expensive for script modules.\r\n\r\n>...it should be fairly easy to add the property to RunspacePool and reset the runspace state when it's allocated. Would that be sufficient for your purposes?\r\n\r\nI think that would be a nice option wherever RunspacePools are used.  But I'm not quite sure yet whether I can use RunspacePools; I'm still seeing a performance disadvantage during module loading when compared with `Runspace.OpenAsync()` (see also #7035). ",
      "created_at": "2018-06-21T22:50:49Z",
      "updated_at": "2018-06-21T22:51:17Z"
    }
  ],
  "created_at": "2018-06-21T14:12:39Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine"
  ],
  "number": 7131,
  "state": "open",
  "title": "Is there any way to use RunspacePools such that Runspace state is reset between uses?",
  "updated_at": "2018-06-21T22:51:17Z"
}