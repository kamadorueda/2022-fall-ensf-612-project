{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4007",
  "author": "pingramk",
  "body": "\r\nSteps to reproduce\r\n------------------\r\n```powershell\r\nfunction test {\r\n\r\n    $tempary = @()\r\n    \r\n    $tempitem = New-Object PSCustomObject\r\n\r\n    $tempItem | Add-Member -MemberType NoteProperty -Name \"asdf\" -Value \"testing in prod\"\r\n    \r\n    $tempary += $tempItem\r\n\r\n    return $tempary\r\n}\r\n\r\n&{\r\n\r\n    $t = test\r\n\r\n    if( $t.Count -gt 0){\r\n        Write-Host \"Ye got the count\"\r\n    } else {\r\n        Write-Host \"No Count\"\r\n    }\r\n} \r\n```\r\n\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nArray object. So .count could be used to check.\r\n\r\nActual behavior\r\n---------------\r\n\r\nImplicit conversion from array to single object though the function returns an array\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPS C:\\Users\\rkomand> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.15063.296\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.15063.296\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n",
  "closed_at": "2017-06-14T19:37:56Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Repros with PSCore6 beta2",
      "created_at": "2017-06-14T17:32:42Z",
      "updated_at": "2017-06-14T17:32:42Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "This behavior may be surprising, but I think it is by design:\r\n\r\nCollections sent to the success output stream are _unwrapped_ and sent _item by item_.\r\n\r\nWhen you capture the result of a pipeline in a variable, a single item is stored  as-is, whereas multiple items are stored as a `[System.Object[]]` array - irrespective of the type of the collection sent to the output stream.\r\n\r\n```powershell\r\n# Even though an *array list* is output, the result is a *regular array*\r\n> (& { [system.collections.arraylist] (1, 2) }).GetType().Name \r\nObject[]\r\n```\r\n\r\nTo send a collection _as a whole_ to the output stream, wrap it in an array:\r\n\r\n```powershell\r\n# Wrap the array list in a single-item array with \",\", the array-construction operator,\r\n# to output the collection as a whole.\r\n> (& { , [system.collections.arraylist] (1, 2) }).GetType().Name \r\nArrayList\r\n```\r\n\r\nOn a side note: the code in the initial post relies on a _bug_ that will be fixed - see #3671.\r\nSince v3, _all_ scalars should have a `.Count` property (added by PS on demand), to unify the handling of scalars and arrays.\r\n\r\n```powershell\r\n> ([pscustomobject]::new()).Count\r\n # !! bug - no output\r\n\r\n> (666).Count\r\n1  # OK - a scalar has a count of 1\r\n```",
      "created_at": "2017-06-14T18:23:46Z",
      "updated_at": "2017-06-14T18:25:14Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Thanks @mklement0 the unwrapping is definitely `by design` and will continue to bring future discussion.  The lack of `.count` is and issue and dupe of yours.",
      "created_at": "2017-06-14T19:37:56Z",
      "updated_at": "2017-06-14T19:37:56Z"
    }
  ],
  "created_at": "2017-06-14T16:54:16Z",
  "number": 4007,
  "state": "closed",
  "title": "Powershell implicit conversion happening when returning an array with a single object (should be fixed in 3.0) and could not use .count ",
  "updated_at": "2017-06-14T19:37:56Z"
}