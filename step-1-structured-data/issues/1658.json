{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1658",
  "author": "Jaykul",
  "body": "Is this comment really true?\n\n``` csharp\n// NetworkCredential constructor only accepts plain string password in CoreCLR\n// Since user can already access the plain text password via PSCredential.GetNetworkCredential().Password,\n// this change won't be a security issue for PS on CSS.\n...\n```\n\nhttps://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/Credential.cs#L277\n\nWhat I mean is that this is a non-trivial security regression compared to WindowsPowerShell, right?\n\nRegardless of whether **the author** can access passwords ...\n\nThe \"security issue\" is a question of whether the password is stored in memory indefinitely (with non-deterministic garbage collection) as a string _that another user could read._\n\nIn the case of CoreFx NetworkCredential, the answer is yes.\n\nWith the full Framework and SecureString, as of 4.0 the answer is no.\n",
  "closed_at": "2017-02-25T00:55:50Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "`SecureString` was previously removed from .NET Core, so `System.Net.NetworkCredential` only takes plain string password in its constructors. Later, `SecureString` was added back to .NET Core RTM for both win and unix, but types like `System.Net.NetworkCredential` and `System.Diagnostics.Process` did not get updated to bring back the `SecureString` APIs. .NET Core is going to fix this in future release, and then we will move back to the `SecureString` APIs.\n\nAs for the comment in the code, you are right, it's not accurate. I will submit a PR to fix the comment.\n",
      "created_at": "2016-08-15T23:17:35Z",
      "updated_at": "2016-08-15T23:17:35Z"
    }
  ],
  "created_at": "2016-08-05T01:09:37Z",
  "number": 1658,
  "state": "closed",
  "title": "Question regarding PSCredential.GetNetworkCredential()",
  "updated_at": "2017-02-25T00:55:51Z"
}