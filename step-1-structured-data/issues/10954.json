{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10954",
  "author": "iSazonov",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nFix #10948\r\n\r\n## PR Context\r\n\r\nOptions for the fix:\r\n- lval.ToString()\r\n    That is before the fix.\r\n- Convert.ToString(lval, CultureInfo.InvariantCulture)\r\n    Makes lval conversion being culture invariant.\r\n- PSObject.ToStringParser(context, lval)\r\n    Current fix. Makes lval conversion being culture invariant and add PowerShell magic conversions if lval is PSObject (ex., follow ETS) [See](https://github.com/PowerShell/PowerShell/blob/96eb361af8d04d7821343ea2d59f61f0efcdd54c/src/System.Management.Automation/engine/MshObject.cs#L1270)\r\n    In the case behavior is as for -match operator\r\n- PSObject.ToStringParser(context, PSObject.AsPSObject(lval))\r\n    The same as previous but always use PowerShell magic conversions (follow ETS).\r\n    In the case behavior is as for `-join` operator (with performance issue because of mandatory wrapping to PSObject)\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2019-12-19T17:50:47Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for taking this on, @iSazonov.\r\n\r\nGenerally, it sounds we should follow the example of `-match` and `-split` (assuming they work consistently among them), which is `PSObject.ToStringParser(context, lval)`, which, from what I gather, is like using `\"$var\"` for a non-string value `$var`.\r\n\r\nBut I don't understand how `PSObject.ToStringParser(context, PSObject.AsPSObject(lval))` differs in practice from `PSObject.ToStringParser(context, lval)`.\r\nCan you explain in more detail and give an example?\r\n\r\n\r\n\r\n",
      "created_at": "2019-10-31T18:29:33Z",
      "updated_at": "2019-10-31T18:29:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> But I don't understand how PSObject.ToStringParser(context, PSObject.AsPSObject(lval)) differs in practice from PSObject.ToStringParser(context, lval).\r\nCan you explain in more detail and give an example?\r\n\r\nIn second case we could fall in fast way - TryFastTrackPrimitiveTypes() or IFormattable. In first case a code path is another - follow ETS at first.\r\nYou can see the logic in `internal static string ToString(ExecutionContext context, object obj, string separator, string format, IFormatProvider formatProvider, bool recurse, bool unravelEnumeratorOnRecurse)\r\n`",
      "created_at": "2019-11-01T06:23:05Z",
      "updated_at": "2019-11-01T06:24:45Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I see - but, speaking from observation (haven't looked a the code):\r\n\r\nApart from `[pscustomobject]` instances, ETS properties seem to only affect output formatting, not stringification (in expandable strings). Or are there cases where including ETS properties makes a difference for stringification? If so, what are they, and can you give a specific example?",
      "created_at": "2019-11-01T09:56:54Z",
      "updated_at": "2019-11-01T09:56:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 The example is in https://github.com/PowerShell/PowerShell/pull/10389#issuecomment-527172983\r\n\r\n> ETS properties seem to only affect output formatting\r\n\r\nYou confuse ETS (Extended Type System) with extensions for Formatting System (Update-TypeData vs Update-FormatData).",
      "created_at": "2019-11-01T10:27:41Z",
      "updated_at": "2019-11-01T10:29:16Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I see - you mean an ETS-overridden _`.ToString()` method_ (I was thinking _properties_ in general, which would only matter in formatting) - that's a helpful example.\r\n\r\nSo it sounds like `-join` is currently the only string-coercing operator that goes the ETS route.\r\n\r\n`-match`, `-split`, `-like` do _not_.\r\n\r\nIn the case of #10389 the ruling was to prevent a behavioral `-join` change, even if that means forgoing a possible performance optimization.\r\n\r\nHere, it comes down to this:\r\n\r\n* `PSObject.ToStringParser(context, lval)` means aligning `-replace` with `-match`, `-split`, `-like` and results in _no_ behavior modification (except for the culture-sensitivity being fixed)\r\n\r\n  * However, that means that an ETS `.ToString()` method is _ignored_.\r\n\r\n* `PSObject.AsPSObject(lval))` is the _conceptually correct_ thing to do, as it corresponds to what `\"$var\"` does (and you would expect the ETS to be honored consistently):\r\n\r\n  * It would result in a behavioral change - arguably for the better - in that an ETS `.ToString()` method then _would_ be respected, unlike before.\r\n\r\n  * It would impact performance, as you state - I don't know to what extent.\r\n\r\nI don't know what the performance implications are, but my personal recommendation would be to pick one of the following two options:\r\n\r\n* Make _all_ string operators use `PSObject.AsPSObject(lval))` to ensure that ETS `.ToString()` methods are _consistently_ honored.\r\n  * Technically, a breaking change, but in spirit it is more of a bug fix.\r\n\r\n* Fix `-replace` only and align with the majority behavior there, not least because `-match`, `-split`, `-like` are not only _string_ operators but involve string _matching_ (unlike `-join`), i.e., use `PSObject.ToStringParser(context, lval)` (and continue to have  ETS `.ToString()` methods ignored).\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2019-11-01T13:05:21Z",
      "updated_at": "2019-11-01T13:05:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 Great investigations! Thanks!\r\n\r\n@SteveL-MSFT Perhaps PowerShell-Committee should weight these @mklement0 's proposed options.",
      "created_at": "2019-11-01T14:12:05Z",
      "updated_at": "2019-11-01T14:12:05Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@PowerShell/powershell-committee reviewed this. It's definitely a breaking change (@BrucePay is calling it Bucket 2: Reasonable Gray Area), but we think it's the right thing to do. \r\n\r\nGiven where we're at in the release cycle, and our new snap to .NET's 1-year release cycle, we want to take this as an experimental feature into 7.1-preview.1 so we can understand the breakage and whether we need to revert to old behavior. ",
      "created_at": "2019-12-11T23:50:20Z",
      "updated_at": "2019-12-11T23:50:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw I use strong typed pattern for experimental feature. This simplify discovering where  codes or tests of the experimental feature is placed.",
      "created_at": "2019-12-12T16:37:22Z",
      "updated_at": "2019-12-12T16:37:22Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov Please follow the existing code pattern for adding new engine experimental features, and don't add new public API.\r\nIf you prefer to put the experimental feature name in a variable, then you can declare an internal const string field in the `Const Member` section to hold your experimental feature name.",
      "created_at": "2019-12-12T22:38:46Z",
      "updated_at": "2019-12-12T22:38:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> If you prefer to put the experimental feature name in a variable, then you can declare an internal const string field in the Const Member section to hold your experimental feature name.\r\n\r\nIt makes no sense because we can not use strong typed names out of SMA.\r\nI reverted the change.",
      "created_at": "2019-12-13T06:38:08Z",
      "updated_at": "2019-12-13T06:38:08Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> It makes no sense because we can not use strong typed names out of SMA.\r\n\r\nIf the experimental feature is not in SMA.dll, then it's not an engine feature and should not be declared in `ExperimentalFeature.cs`. Instead, it should be declared in the module where that dll is in.",
      "created_at": "2019-12-13T17:18:29Z",
      "updated_at": "2019-12-13T17:18:29Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Could you please continue?",
      "created_at": "2019-12-18T07:40:48Z",
      "updated_at": "2019-12-18T07:40:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Should we add `CL-Experimental` label?",
      "created_at": "2019-12-18T18:06:49Z",
      "updated_at": "2019-12-18T18:06:49Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I think we can only use 1 `CL-xx` label, otherwise the script to generate the change log will be confused.",
      "created_at": "2019-12-18T19:09:26Z",
      "updated_at": "2019-12-18T19:09:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I think we can only use 1 CL-xx label, otherwise the script to generate the change log will be confused.\r\n\r\nIt seems Travis said me that CL-Breaking can be used with another CL- label.\r\n\r\nFrom releaseTools.psm1\r\n```\r\n    # Array of PRs with multiple labels. The label \"CL-BreakingChange\" is allowed with some other \"CL-*\" label.\r\n```",
      "created_at": "2019-12-18T19:14:39Z",
      "updated_at": "2019-12-18T19:16:30Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I don't know about that, but what would you expect the script to do then? placing the same PR under both `Breaking Changes` and `Experimental Features` sections?\r\nI think `CL-BreakingChange` wins in this case. But thanks for the quote, I added the experimental label.",
      "created_at": "2019-12-18T19:18:15Z",
      "updated_at": "2019-12-18T19:19:50Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Hmm, by looking at the following code, it seems the script doesn't handle multiple labels even if `CL-breakingchange` is one of them, as the `switch` will fall into the default case when `$clLabel` contains more than 1 item.\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/384a7ba2d7b66b7099ac840915cbca36ae0494db/tools/releaseTools.psm1#L292-L313",
      "created_at": "2019-12-18T19:24:39Z",
      "updated_at": "2019-12-18T19:25:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> switch ($clLabel.Name) {\r\n\r\nHere we will have an array and the switch will run for every value from the array.",
      "created_at": "2019-12-18T19:59:27Z",
      "updated_at": "2019-12-18T19:59:27Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Ah, you are right, I totally missed that.",
      "created_at": "2019-12-18T20:53:32Z",
      "updated_at": "2019-12-18T20:53:32Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.1.0-preview.1` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.1)\n",
      "created_at": "2020-03-26T17:48:51Z",
      "updated_at": "2020-03-26T17:48:51Z"
    }
  ],
  "created_at": "2019-10-31T10:27:40Z",
  "number": 10954,
  "state": "closed",
  "title": "Use culture invariant to-string convertor for lval in replace operator",
  "updated_at": "2020-03-26T17:48:51Z"
}