{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17786",
  "author": "jazzdelightsme",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\n```powershell\r\npwsh -NonInteractive -Command { $host.EnterNestedPrompt() }\r\n```\r\n\r\n### Expected behavior\r\n\r\nI expect the same sort of exception that I would get if I had run:\r\n```powershell\r\npwsh -NonInteractive -Command { $host.UI.PromptForChoice( 'caption', 'msg', @('a', 'b'), 0 ) }\r\n```\r\n```console\r\nMethodInvocationException: Exception calling \"PromptForChoice\" with \"4\" argument(s): \"PowerShell is in NonInteractive mode. Read and Prompt functionality is not available.\"\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n(it enters a nested prompt)\r\n\r\n### Environment data\r\n\r\n```powershell\r\nI am on a pretty recent version, but I expect this repro's in every version, back to 5.\r\n\r\nPS C:\\Users\\me> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.3.0-preview.5\r\nPSEdition                      Core\r\nGitCommitId                    7.3.0-preview.5\r\nOS                             Microsoft Windows 10.0.22940\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2022-08-24T21:01:20Z",
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> `Read and Prompt functionality is not available`\r\n\r\nNested Prompt does not affect interactivity. Does not require user participation.",
      "created_at": "2022-07-28T10:57:14Z",
      "updated_at": "2022-07-28T10:57:14Z"
    },
    {
      "author": "jazzdelightsme",
      "author_association": "CONTRIBUTOR",
      "body": "Sorry, @237dmitry, I don't understand: in what way does a nested prompt not require user participation?\r\n\r\nIf you run the command in the repro steps, the new process will never exit... until the user interacts with it (by running `exit`). I claim it requires interactivity in the same way that `Read-Host` requires interactivity, and thus should also fail where `Read-Host` fails.",
      "created_at": "2022-07-28T14:32:30Z",
      "updated_at": "2022-07-28T14:32:30Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "It's difficult to come up with a use for `$host.EnterNestedPrompt()` in non-interactive mode. Unless, at some stage, freeze the execution of a script block in order to execute something else.\r\n\r\n```powershell\r\npwsh -NonInteractive -Command { 0..9 | % { if ($_ -eq 5) { $host.EnterNestedPrompt() }; $_  }}\r\n```",
      "created_at": "2022-07-28T15:58:20Z",
      "updated_at": "2022-07-28T16:24:52Z"
    },
    {
      "author": "jazzdelightsme",
      "author_association": "CONTRIBUTOR",
      "body": "\"Non-interactive mode\" (i.e. starting `pwsh` with the `-NonInteractive` switch) is used to indicate that a user should not (and likely *cannot*) interact with the program. Hence if you call `Read-Host` or `$host.UI.PromptForChoice` etc., they will throw an exception saying so. This allows you to adapt scripts to run in places like a session 0 service, where a user has no way to interact with it--if you make a mistake, and your script calls `Read-Host`, things won't hang--it will fail instead, which is the desired behavior here.",
      "created_at": "2022-07-28T16:27:04Z",
      "updated_at": "2022-07-28T16:27:04Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The Engine WG discussed this issue today, and we believe this is a by-design behavior.\r\n`pwsh -noninteractive` actually gives you an interactive shell, despite the `-noninteractive` flag being specified. Within that environment, you can debug a script, which will call `EnterNestedPrompt` to setup the debugging prompt (see the screenshot below).\r\n\r\nAs for why `pwsh -noninteractive` gives back an interactive shell, @JamesWTruher believes it was for debugging scripts that are supposed to run in `noninteractive` mode.\r\n\r\nThe [help content](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_powershell_exe?view=powershell-5.1#-noninteractive) for the `-NonInteractive` flag says: _Does not present an interactive prompt to the user._ It's not very accurate and should be updated. Opened doc issue: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/9156\r\n\r\n![image](https://user-images.githubusercontent.com/127450/186042249-fdd0ab08-860f-4644-aa3b-ee9b0e1153ee.png)\r\n",
      "created_at": "2022-08-23T01:08:35Z",
      "updated_at": "2022-08-23T01:08:35Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as by-design and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-08-24T21:01:19Z",
      "updated_at": "2022-08-24T21:01:19Z"
    }
  ],
  "created_at": "2022-07-27T21:11:50Z",
  "labels": [
    "WG-Engine",
    "Resolution-By Design",
    "Documentation Needed"
  ],
  "number": 17786,
  "state": "closed",
  "title": "`$host.EnterNestedPrompt()` should throw if `-NonInteractive` (but does not)",
  "updated_at": "2022-08-24T21:01:20Z"
}