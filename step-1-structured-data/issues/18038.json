{
  "_url": "https://github.com/PowerShell/PowerShell/issues/18038",
  "author": "mklement0",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\nSee also (the inverse problem): https://github.com/PowerShell/PowerShell/issues/10683\r\n\r\n### Steps to reproduce\r\n\r\nOn Unix-like platforms, _unquoted_ arguments that look like globbing (wildcard) patterns are automatically resolved to matching paths when calling external programs.\r\n\r\nWhile single- and double-quoting can be used to suppress this behavior, using character-individual backtick escaping does not:\r\n\r\n```\r\n/bin/echo `*\r\n```\r\n\r\n### Expected behavior\r\n\r\n```console\r\n*\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\n(list of file and subdirectory names in the current directory)\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nPowerShell Core 7.3.0-preview.7 on Unix-like platforms.\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "Why do you expect this ( `*` ) output?\r\n\r\n![1_001](https://user-images.githubusercontent.com/78153320/188745533-a76b2437-f26a-4592-bb4a-10eb70ce2339.png)\r\n\r\n",
      "created_at": "2022-09-06T21:40:10Z",
      "updated_at": "2022-09-06T21:40:10Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@237dmitry, why do you think that _Bash_ syntax is in any way relevant here?",
      "created_at": "2022-09-06T21:45:54Z",
      "updated_at": "2022-09-06T21:46:02Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "In PowerShell terms: if ``Write-Output `\"`` is the same as ``Write-Output '\"'``,  why isn't `` `* `` the same as ``'*'`` (as it indeed is with `Write-Output`)?\r\n\r\nGranted, the escaping in `` `* `` isn't strictly escaping for _syntactic_ reasons, but if `'*'` serves to signal to the native globbing feature that it should not be applied, so should `` `* `` - unless there's a good reason for this discrepancy that  I'm missing.\r\n\r\n\r\n",
      "created_at": "2022-09-06T22:20:40Z",
      "updated_at": "2022-09-06T22:36:48Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> why do you think that Bash syntax is in any way relevant here?\r\n\r\nBecause in bash `/bin/echo *` outputs list of files. You escaped ``` `* ``` and `/bin/echo` gets the clean `*`",
      "created_at": "2022-09-06T22:22:40Z",
      "updated_at": "2022-09-06T22:27:57Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "And to bring it back to Bash syntax _by analogy_: `echo \\*` - which prints verbatim `*` - is the analog of ``/bin/echo `*`` in PowerShell.\r\n\r\n> Because in bash `/bin/echo *` outputs list of files.\r\n\r\nIt does in PowerShell too, in an effort to _emulate_  this behavior of POSIX-compatible shells called _globbing_ (pathname expansion). That is, it is the _shell_ that perform this expansion, _before_ the target program is passed the _results_ of this expansion.\r\n\r\nThis emulation is the implied premise of this issue, not its subject.\r\n\r\n> You escaped `` `* `` and `/bin/echo` get the clean `*`\r\n\r\nIt doesn't, as shown in the initial post.\r\nIt is _not_ `/bin/echo` that performs the globbing, if that's your misconception.\r\n\r\n",
      "created_at": "2022-09-06T22:29:32Z",
      "updated_at": "2022-09-06T22:35:38Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> It is not /bin/echo that performs the globbing\r\n\r\n/bin/echo receives parameter that already globbed. Isn't it true?",
      "created_at": "2022-09-06T22:44:46Z",
      "updated_at": "2022-09-06T22:44:46Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Yes, if you pass `*`. By contrast, if you _quote_ the `*` as `'*'` or `\"*\"`, PowerShell does _not_ apply native globbing and `/bin/echo` receives _verbatim_ `*` (which it prints _as-is_). And, by PowerShell's quoting / escaping rules, `` `* `` should be equivalent to the quoted forms, but isn't.",
      "created_at": "2022-09-06T22:51:01Z",
      "updated_at": "2022-09-06T22:51:01Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> should be equivalent to the quoted forms, but isn't.\r\n\r\nI'm already confused with escaping.\r\n```powershell\r\nPS > /bin/echo 1`n2\r\n1\r\n2\r\n\r\nPS > Start-Process /bin/echo -ArgumentList 1`n2\r\n1\r\n2\r\n\r\nPS > /bin/echo --% 1`n2\r\n1`n2\r\n\r\nPS > (Get-ExperimentalFeature -Name PSNativeCommandArgumentPassing).Enabled\r\nTrue\r\n```",
      "created_at": "2022-09-06T23:50:07Z",
      "updated_at": "2022-09-06T23:50:07Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "* `PSNativeCommandArgumentPassing` is incidental to this discussion, because in effect it only relates to `\"` chars. embedded in arguments.\r\n* Use of `--%` is virtually pointless on Unix-like platforms (and documented as such - for the backstory, see https://github.com/MicrosoftDocs/PowerShell-Docs/issues/4963).\r\n\r\n---\r\n\r\nGenerally speaking, unquoted literal arguments are parsed _as if they were enclosed in `\"...\"`_; that is, ``/bin/echo 1`n2`` is the same as ``/bin/echo \"1`n2\"``, meaning that _escape sequence_ `` `n `` expands to a literal newline (LF).\r\n\r\nInside `\"...\"`, `` ` ``-escaping characters that do not form an escape sequence isn't necessary, but is tolerated; e.g. ``/bin/echo \"`'\"`` is the same as  `/bin/echo \"'\"` and prints verbatim `'`.\r\n\r\nHowever, in an _unquoted_ argument, characters that wouldn't require escaping if enclosed in `\"...\"` _do_ require escaping if they contain argument-mode metacharacters, such as `'`, `\"`, `&`, `|`, ..., so that, for instance, you have to use ``/bin/echo `| `` to print `|` verbatim.\r\n\r\nFrom that perspective _alone_, `*` does _not_ require `` ` ``-escaping, because `*` isn't an argument-mode metacharacter: leaving the native globbing feature out of the picture, _all_ of the following output `*` verbatim: `Write-Output *`, `Write-Output '*'`, `Write-Output \"*\"`, and ``Write-Output `*``\r\n\r\nThe fact that _with respect to native globbing_ it makes a difference whether you use `'...'` / `\"...\"` quoting (suppression of the feature) or not, already amounts to special-casing the usual syntax rules, and this special-casing is applied by PowerShell _itself, during parameter binding_ (I don't know the details).\r\n\r\nMy point is that this special-casing should also apply to `` `* `` and `` `? ``, for consistency, i.e. these escaped forms should be treated the same as their quoted equivalents, `'*'` / `\"*\"` and `'?'` / `\"?\"`, because the intent to treat `*` and `?` _verbatim_ is expressed by all of these forms.\r\n\r\nI do realize that this complicates matters, because an argument such as ``a`*b*`` would then have to treat the first `*` verbatim, while retaining the second one as a globbing metacharacter; expressed in Bash terms, it would have to be treated as `a\\*b*`for globbing purposes.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2022-09-07T02:14:02Z",
      "updated_at": "2022-09-07T02:14:02Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "cc @JamesWTruher \r\n\r\nIt seems reasonable that `` `\"` is a single literal double quote that `` `*` is a single literal asterisk.  `/bin/echo \"*\"` does do what you expect.",
      "created_at": "2022-09-12T18:16:29Z",
      "updated_at": "2022-09-12T18:16:29Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "FWIW, this is behavior is in ps6 as well.",
      "created_at": "2022-09-13T00:19:43Z",
      "updated_at": "2022-09-13T00:19:43Z"
    }
  ],
  "created_at": "2022-09-06T19:43:30Z",
  "labels": [
    "Needs-Triage"
  ],
  "number": 18038,
  "state": "open",
  "title": "Native globbing: character-individual backtick escaping of wildcard metacharacters is not respected",
  "updated_at": "2022-09-13T00:19:44Z"
}