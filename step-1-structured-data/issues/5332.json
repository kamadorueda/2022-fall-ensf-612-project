{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5332",
  "author": "fMichaleczek",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://github.com/PowerShell/PowerShell/blob/master/docs/KNOWNISSUES.md).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nWhen PowerShell class is inherited from a C# class, if another C# class invoke an overrided method on this powershell class instance, it invokes C# base method instead of overrided powershell method.\r\n\r\nThis problem doesn't exist when PowerShell class is inherited from an C# Interface.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n\r\nAdd-Type -Type @' \r\n\r\n// Interface\r\npublic interface iMyClass \r\n{\r\n\tvoid MySharedMethod();\r\n}\r\n\r\n// C# Class Example\r\npublic class MyClassCSharp : iMyClass\r\n{ \r\n\tpublic void MySharedMethod() \r\n\t{ \r\n\t\tSystem.Console.WriteLine(\"ClassCSharpMethod\");\r\n\t} \r\n} \r\n\r\n// Another class that will target C# Class or PowerShell Class\r\npublic static class AnotherClassCSharp\r\n{ \r\n\tpublic static void StaticMethod(iMyClass myclass) \r\n\t{ \r\n\t\tmyclass.MySharedMethod();\r\n\t} \r\n} \r\n'@ \r\n\r\n# PowerShell Class Exemple, same as MyClassCSharp\r\nclass MyClassFromInterface : iMyClass {\r\n\t[void] MySharedMethod() {\r\n\t\tWrite-Host \"ClassPSMethod\"\r\n\t}\r\n}\r\n\r\n# PowerShell Class Exemple 2, herit from MyClassCSharp \r\nclass MyClassFromCSharp : MyClassCSharp {\r\n\t[void] MySharedMethod() {\r\n\t\tWrite-Host \"ClassPSMethod\"\r\n\t}\r\n}\r\n\r\n# PowerShell Class Exemple 3, herit from MyClassPowerShell\r\nclass MyClassFromPowerShell : MyClassCSharp {\r\n\t[void] MySharedMethod() {\r\n\t\tWrite-Host \"ClassPSMethod\"\r\n\t}\r\n}\r\n$MyClassFromInterface = [MyClassFromInterface]::new()\r\n$MyClassFromCSharp = [MyClassFromCSharp]::new()\r\n$MyClassFromPowerShell = [MyClassFromPowerShell]::new()\r\n\r\n[AnotherClassCSharp]::StaticMethod($MyClassFromInterface)\r\n[AnotherClassCSharp]::StaticMethod($MyClassFromCSharp)\r\n[AnotherClassCSharp]::StaticMethod($MyClassFromPowerShell)\r\n\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nPS> [AnotherClassCSharp]::StaticMethod($MyClassFromInterface)\r\nClassPSMethod\r\nPS> C:\\Users\\flavi> [AnotherClassCSharp]::StaticMethod($MyClassFromCSharp)\r\nClassPSMethod\r\nPS> C:\\Users\\flavi> [AnotherClassCSharp]::StaticMethod($MyClassFromPowerShell)\r\nClassPSMethod\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\n> [AnotherClassCSharp]::StaticMethod($MyClassFromInterface)\r\nClassPSMethod\r\n> [AnotherClassCSharp]::StaticMethod($MyClassFromCSharp)\r\nClassCSharpMethod\r\n> [AnotherClassCSharp]::StaticMethod($MyClassFromPowerShell)\r\nClassCSharpMethod\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-beta.8\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-beta.8\r\nOS                             Microsoft Windows 10.0.15063\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```\r\n",
  "closed_at": "2020-05-04T20:52:19Z",
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "This should be an easy one for someone interested in fixing - it sounds like we are acting as though you specified the `new` keyword instead of `override`.",
      "created_at": "2017-11-03T17:58:39Z",
      "updated_at": "2017-11-03T17:58:39Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "This is I'm not quite sure I understand the issue here - the problem here is that `MyClassCSharp.MySharedMethod` is _not overridable_ (for lack of a better word), since the C# compiler marks `MyClassCSharp.MySharedMethod()` `final`. \r\n\r\nIn comparison, we keep all methods in PowerShell classes non-final virtual (in turn allowing all derived types to override them by simply existing).\r\n\r\nExplicitly marking the `MyClassCSharp.MySharedMethod` implementation `virtual` in `C#` makes the resulting method non-final and resolves the issue as expected:\r\n\r\n```powershell\r\nAdd-Type -Type @' \r\n\r\n// Interface\r\npublic interface iMyClass \r\n{\r\n\tvoid MySharedMethod();\r\n}\r\n\r\n// C# Class Example\r\npublic class MyClassCSharp : iMyClass\r\n{ \r\n\tpublic virtual void MySharedMethod() \r\n\t{ \r\n\t\tSystem.Console.WriteLine(\"ClassCSharpMethod\");\r\n\t} \r\n} \r\n\r\n// Another class that will target C# Class or PowerShell Class\r\npublic static class AnotherClassCSharp\r\n{ \r\n\tpublic static void StaticMethod(iMyClass myclass) \r\n\t{ \r\n\t\tmyclass.MySharedMethod();\r\n\t} \r\n}\r\n'@\r\n\r\nclass MyPowerShellCSharpOverrider : MyClassCSharp {\r\n    MySharedMethod() {\r\n        Write-Host \"PowerShell won!\"\r\n    }\r\n}\r\n\r\n[AnotherClassCSharp]::StaticMethod([MyPowerShellCSharpOverrider]::new())\r\n```",
      "created_at": "2020-05-03T14:28:22Z",
      "updated_at": "2020-05-03T14:28:22Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@IISResetMe You're right. Let me try to requalify it.\r\n\r\n**Inherited PowerShell class doesn't report error when you try to override a method which is not marked virtual, abstract, or override.**\r\n\r\n# Steps to reproduce\r\n```\r\nAdd-Type -Type @' \r\n\r\n// C# Class Example\r\npublic class MyClass\r\n{ \r\n\tpublic void MyMethod() \r\n\t{ \r\n\t\tSystem.Console.WriteLine(\"MyMethod\");\r\n\t} \r\n} \r\n\r\n'@\r\n\r\nclass MyInheritedClass : MyClass {\r\n    MyMethod() {\r\n        Write-Host \"PowerShell won!\"\r\n    }\r\n}\r\n\r\n\r\n```\r\n# Expected behavior\r\n\r\n'MyInheritedClass .MyMethod()': cannot override inherited member 'MyClass.MyMethod()' because it is not marked virtual, abstract, or override\r\n \r\n# Actual behavior\r\nNo error\r\n\r\nIf you agree with the vocabulary (any help is welcome to be more precise), I closed this one and create a new one.",
      "created_at": "2020-05-03T17:30:17Z",
      "updated_at": "2020-05-03T17:30:17Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "I completely disagree with the expectation - hiding existing implementations by default is pretty consistent PowerShell behavior IMO! \r\n\r\nThe verbiage/vocabulary makes perfect sense though, create new issue to discuss how to better handle \"sealed/final\" vs \"overrideable\" when extending classes, sounds good to me \ud83d\udc4d ",
      "created_at": "2020-05-04T20:07:29Z",
      "updated_at": "2020-05-04T20:07:29Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@IISResetMe https://github.com/PowerShell/PowerShell/issues/12571\r\n",
      "created_at": "2020-05-04T20:52:19Z",
      "updated_at": "2020-05-04T20:52:19Z"
    }
  ],
  "created_at": "2017-11-03T17:44:37Z",
  "number": 5332,
  "state": "closed",
  "title": "Inheritance from interface and class are inconsistent",
  "updated_at": "2020-05-05T06:27:01Z"
}