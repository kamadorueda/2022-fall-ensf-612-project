{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17906",
  "author": "aelij",
  "body": "### Summary of the new feature / enhancement\n\nThe following fails when using constrained language mode:\r\n\r\n```powershell\r\nfunction Test-ShouldProcess {\r\n     [CmdletBinding(SupportsShouldProcess, ConfirmImpact = 'High')]\r\n     param()\r\n\r\n     if($PSCmdlet.ShouldProcess('something')) {\r\n         return $true\r\n     }\r\n}\r\n```\r\n\r\nError:\r\n```\r\nCannot invoke method. Method invocation is supported only on core types in this language mode.\r\n```\r\n\r\nOther usages are also blocked, such as getting preference variables from caller scope within modules:\r\n\r\n```powershell\r\n  param (\r\n    $VerbosePreference = $PSCmdlet.GetVariableValue('VerbosePreference')\r\n  )\r\n```\n\n### Proposed technical implementation details (optional)\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@WG-Security\r\n\r\nCommittee discussed this and PowerShell disallows any method invocations when running in ConstrainedLangauge mode, and this is by design.  We cannot selectively allow some method invocations without possibly compromising our security boundary.\r\n\r\nFor most cases, this can be worked around by using the cmdlet equivalent (e.g., `Get-Variable, Write-Output, Write-Verbose, etc.`).  Unfortunately, there is no cmdlet equivalent for `ShouldProcess`, but we feel there should be one.\r\n\r\nFor now, the workaround for `ShouldProcess` is to make the test trusted by signing it or otherwise including it in the system lock down policy.",
      "created_at": "2022-08-22T21:00:09Z",
      "updated_at": "2022-08-22T21:00:30Z"
    }
  ],
  "created_at": "2022-08-16T09:21:47Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine",
    "Needs-Triage"
  ],
  "number": 17906,
  "state": "open",
  "title": "Allow `$PSCmdlet` methods in constrained language",
  "updated_at": "2022-08-22T21:04:18Z"
}