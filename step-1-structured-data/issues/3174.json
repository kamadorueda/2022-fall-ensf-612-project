{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3174",
  "author": "ThreeFive-O",
  "body": "When using square brackets in the OutFile parameter of the web cmdlets the square brackets in the path act as a wildcard option/range operator.\r\nHence any square brackets in the OutFile parameter causes an error for the cmdlets.\r\nPersonally, when downloading a file, I always use a literal path, instead of specifying a file with wildcard support.\r\n\r\nI would like to start a discussion if it makes sense to treat the OutFile parameter as a literal path.\r\nAny opinions on that?\r\n\r\nMaybe someone could contribute scenarios where wildcard support makes sense.\r\n\r\nNote: Of course there are several workarounds in PowerShell to overcome this minor lack of comfort.\r\n\r\nSteps to reproduce\r\n------------------\r\n```powershell\r\nInvoke-WebRequest https://raw.githubusercontent.com/PowerShell/PowerShell/master/README.md -OutFile ReadMe[Powershell].md\r\n```\r\nExpected behavior\r\n-----------------\r\nCreates a ReadMe[Powershell].md file in current directory.\r\n\r\nActual behavior\r\n---------------\r\n```powershell\r\nInvoke-WebRequest : Cannot perform operation because the wildcard path ReadMe[Powershell].md did not resolve to a file.\r\nAt line:1 char:1\r\n+ Invoke-WebRequest https://raw.githubusercontent.com/PowerShell/PowerS ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : OpenError: (ReadMe[Powershell].md:String) [Invoke-WebRequest], FileNotFoundException\r\n    + FullyQualifiedErrorId : FileOpenFailure,Microsoft.PowerShell.Commands.InvokeWebRequestCommand\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.14393.693\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.14393.693\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n",
  "closed_at": "2020-05-20T22:17:02Z",
  "comments": [
    {
      "author": "HumanEquivalentUnit",
      "author_association": "CONTRIBUTOR",
      "body": "Agree that `-OutFile` makes more sense as a literal path. (It only makes sense as a literal path?). If the wildcard resolves to multiple files then `Invoke-WebRequest` throws an exception.\r\n\r\nBut there could be scripts which depend on the wildcard resolving to a single filename - that does work, so it might be a breaking change. In that case `-LiteralOutFile` as a new parameter?\r\n\r\n[Here is the code which saves to the file](https://github.com/PowerShell/PowerShell/blob/40446c80a705f71260a9258ebc6477982789e82e/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/CoreCLR/InvokeWebRequestCommand.CoreClr.cs#L69) referencing a property `QualifiedOutFile`, which is defined [here](https://github.com/PowerShell/PowerShell/blob/a770ecd6864147feb2e298f4133a671afb22b1b6/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/Common/WebRequestPSCmdlet.Common.cs#L476), it calls `return (QualifyFilePath(OutFile));`\r\n\r\nThat's defined [here](https://github.com/PowerShell/PowerShell/blob/a770ecd6864147feb2e298f4133a671afb22b1b6/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/Common/WebRequestPSCmdlet.Common.cs#L610)\r\n\r\n        private string QualifyFilePath(string path)\r\n        {\r\n            string resolvedFilePath = PathUtils.ResolveFilePath(path, this, false);\r\n            return resolvedFilePath;\r\n        }\r\n\r\nThe third parameter sets whether ResolveFilePath treats it as literal or not, so changing that to `true` should make it resolve as a literal path and fix this.\r\n\r\nI can't see any other calls to `QualifyFilePath`, suggests there wouldn't be much other impact, but I'm not certain.",
      "created_at": "2017-10-06T17:56:24Z",
      "updated_at": "2017-10-06T17:56:24Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I think in general, output paths should be literalpaths.  The behavior of matching a file seems unpredictable at best and clobbering something unintentional at worst.",
      "created_at": "2017-10-06T18:28:34Z",
      "updated_at": "2017-10-06T18:28:34Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this and believe the right approach is to rename `-OutFile` to `-Path` (aliased as `-OutFile`) and add a `-LiteralPath` parameter.  Existing `-OutFile` can be used with current globbing behavior to match a single file using a wildcard.  For example, if you have a file called helloworld.txt and you want to overwrite it with the output, you can use `-OutFile hello*`. ",
      "created_at": "2017-11-30T00:00:29Z",
      "updated_at": "2017-11-30T00:00:29Z"
    },
    {
      "author": "ChrisMagnuson",
      "author_association": "NONE",
      "body": "@ThreeFive-O  You mention there are work arounds for this, can you add them as a comment?\r\n\r\nI am trying to OutFile to a file that has `[1]` in the name but I cannot figure out how to escape the `[]` characters. I tried \\` and `\\` but they do not escape the `[]` characters.",
      "created_at": "2019-04-26T14:09:11Z",
      "updated_at": "2019-04-26T14:09:11Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "As I recall, Chris, when escaping a path like this you have to double up, or use a literal string. For example:\r\n\r\n```powershell\r\nInvoke-RestMethod $Uri -OutFile C:\\``[test``].txt\r\n# or\r\nInvoke-RestMethod $Uri -OutFile 'C:\\`[test`].txt'\r\n```\r\n\r\nThis is because typically the bare strings in a parameter are treated as expandable strings, which means that the backtick is treated as a PS escape character first and evaluated before being passed to the internals. As a result, you need to escape the escape character so PS's expandable string evaluation doesn't eat it. The other option is to force PS to recognise it as a literal string.",
      "created_at": "2019-04-26T14:31:06Z",
      "updated_at": "2019-04-26T14:31:06Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32: \r\n\r\nWhile your escaping technique is correct and ensures that the file path is _accepted_, there is a _bug_ that affects most cmdlets in that they then use the _escaped_ path as a _literal_ path on output-file creation, which means that the `` ` `` chars. are unexpectedly _retained_ - see #9475.\r\n\r\nTherefore, the cumbersome workaround for now is to:\r\n\r\n* escape the input path so that it is _accepted_\r\n* and afterwards _rename_ the incorrectly named file by removing `` ` `` instances from it.\r\n\r\nSee [this Stack Overflow answer](https://stackoverflow.com/a/55869947/45375) for details.\r\n",
      "created_at": "2019-04-26T18:26:48Z",
      "updated_at": "2019-04-26T18:49:17Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Well now, that's no good at all! Thanks for the links!",
      "created_at": "2019-04-26T19:29:22Z",
      "updated_at": "2019-04-26T19:29:22Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #11701, which has now been successfully released as `v7.1.0-preview.4`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.4)\n",
      "created_at": "2020-06-25T19:08:02Z",
      "updated_at": "2020-06-25T19:08:02Z"
    }
  ],
  "created_at": "2017-02-20T10:14:55Z",
  "labels": [
    "Committee-Reviewed",
    "WG-Cmdlets-Utility"
  ],
  "number": 3174,
  "state": "closed",
  "title": "Discussion: Use literal paths for OutFile parameter on Invoke-RestMethod / Invoke-WebRequest",
  "updated_at": "2020-06-25T19:08:02Z"
}