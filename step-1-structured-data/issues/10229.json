{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10229",
  "author": "PaulHigin",
  "body": "# PR Summary\r\n\r\nThis PR is the implementation for the ForEach-Object -Parallel feature based on RFC: https://github.com/PowerShell/PowerShell-RFC/pull/194\r\n\r\n## PR Context\r\n\r\nThis new parameter set runs the ForEach-Object script blocks in parallel, for each piped input, on separate threads subject to a ThrottleLimit restriction.  It can run synchronously where the cmdlet call does not return until all piped input has been processed.  Or it can run asynchronously and return a job object immediately.\r\n\r\nThis is an experimental feature and must be explicitly enabled with the 'PSForEachObjectParallel' name.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [x] Issue filed: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/4590\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2019-08-13T20:40:59Z",
  "comments": [
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "It looks like my refactoring of ForEach-Object for this new feature has caused some regressions in our tests.  I'll take a look.",
      "created_at": "2019-07-26T21:35:20Z",
      "updated_at": "2019-07-26T21:35:20Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Removing `Review-Committee` label, after internal discussion, we're going with `-Parallel <scriptblock>` and wait for feedback.  Since this is `Experimental` we can make changes.",
      "created_at": "2019-07-31T16:26:20Z",
      "updated_at": "2019-07-31T16:26:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "There is a lot of Codacy and CodeFactor issues. Leave them for later PR?",
      "created_at": "2019-08-01T04:59:35Z",
      "updated_at": "2019-08-01T04:59:35Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov I have gone through the CodeFactor and Codacy issues already, and fixed what made sense.  Many of the Codacy issues were just plain wrong.  There has been some code changes since then and I can go through the issues again, but I don't intend to fix CodeFactor issues for ForEach-Object for old code in this PR.\r\ncc @adityapatwardhan \r\n",
      "created_at": "2019-08-05T15:01:32Z",
      "updated_at": "2019-08-05T15:01:32Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@PaulHigin Can you look at CodeFactor issues?",
      "created_at": "2019-08-12T22:04:53Z",
      "updated_at": "2019-08-12T22:04:53Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.0.0-preview.3` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.3)\n",
      "created_at": "2019-08-20T22:37:10Z",
      "updated_at": "2019-08-20T22:37:10Z"
    },
    {
      "author": "KurtDeGreeff",
      "author_association": "NONE",
      "body": "Foreach-Object -parallel  does not work well for me....\r\n\r\n![image](https://user-images.githubusercontent.com/2629743/63421945-c3c92580-c409-11e9-9bc0-d23601698569.png)\r\n",
      "created_at": "2019-08-21T09:49:53Z",
      "updated_at": "2019-08-21T09:49:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@KurtDeGreeff Please open new issue to report.",
      "created_at": "2019-08-21T12:15:38Z",
      "updated_at": "2019-08-21T12:15:38Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@KurtDeGreeff  Your example is not a good use of ForEach-Object -Parallel.  Parallelizing running scriptblocks involves creating runspaces and executing script on separate threads, subject to a throttle limit (default is 5 simultaneous threads).  Doing this to simply access an object property is a tremendous waste of resources and takes up a lot of time as you discovered.  ForEach -Parallel only makes sense when running scriptblocks performs long computations or long waits for results from asynchronous operations, where the resource overhead is used effectively.\r\n\r\nAlso writing to the console, as your example does, re-serializes each parallel operation, negating any positive effects.\r\n\r\n```powershell\r\nPS C:\\> (measure-command { dir -dir | % -parallel { $results = dir -r $_.FullName 2>$null } }).Seconds\r\n16\r\n\r\nPS C:\\> (measure-command { dir -dir | % { $results = dir -r $_.FullName 2>$null } }).Seconds\r\n25\r\n```",
      "created_at": "2019-08-21T15:40:23Z",
      "updated_at": "2019-08-21T15:40:23Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@KurtDeGreeff Indeed [we discussed this in the RFC](https://github.com/PowerShell/PowerShell-RFC/pull/174#discussion_r284863147). There was discussion that the parallel syntax should indicate that it's faster than a `foreach () { }` loop but making such a claim is an oversimplification.\r\n\r\nParallelisation is not automagically faster; there is considerable overhead involved. This is true not just in PowerShell, but in .NET and everywhere else.\r\n\r\nYou need to be judicious in the application of a performance tune like parallelisation. Is the time taken to run each task considerably longer than the overhead of job management? Is the operation you're running parallelisable or will it degenerate to some kind of serial execution (with the added overhead of thread contention and job management)? Is the operation *safe* to parallelise? Is the platform/hardware you're running on going to give you some benefit from running things in parallel (e.g. not on a single-core VM)?\r\n\r\nThe addition of the `-Parallel` switch is a powerful tool, but needs to be used wisely. It's easy to test whether you will get a performance benefit from it though; if the operation inside the `ForEach-Object` is likely to be long running, do some comparative performance tests with `Measure-Command` and pick the faster invocation.",
      "created_at": "2019-08-21T15:58:48Z",
      "updated_at": "2019-08-21T16:13:13Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "I should also have mentioned that parallelizing high computation tasks only makes sense when multiple cores are available.  If you have only one core (like a single core VM) then all threads have to run be scheduled sequentially anyway, and parallelism provides no benefit unless each parallel task is waiting for a result (say from a remote call).\r\n\r\nI'll work on creating a blog that I hope will help make clear when using foreach -parallel is beneficial.",
      "created_at": "2019-08-21T16:09:17Z",
      "updated_at": "2019-08-21T16:09:17Z"
    }
  ],
  "created_at": "2019-07-25T21:34:04Z",
  "number": 10229,
  "state": "closed",
  "title": "Implement ForEach-Object -Parallel feature",
  "updated_at": "2019-08-21T16:13:13Z"
}