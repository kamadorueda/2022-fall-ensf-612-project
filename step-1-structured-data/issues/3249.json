{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3249",
  "author": "SRGOM",
  "body": "Are there any plans to improve Powershell startup time to make it a viable contender to zsh/bash etc as an interactive shell. Right now I hit Win+Enter and zsh starts in what seems like sub 200ms. I can then time l `pin<Ctrl-p>` to get my last ping command, hit enter and get a ping in less than 100 ms and then hit <Ctrl-d>. In this time, powershell hasn't even started once. \r\n\r\nI wouldn't mind constantly running a \"server/daemon\" of some sort that allows me to instantly open multiple shells with fresh sessions. \r\n\r\nPS: I hope I don't sound rude with this request- Powershell, for what it's worth, runs circles around zsh and bash in how brilliantly designed and powerful it is. But one has to be able to use it to harness that power :)",
  "closed_at": "2019-04-24T16:39:39Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I assume you mean Windows PowerShell? Because Powershell Core starts very fast.",
      "created_at": "2017-03-03T19:02:45Z",
      "updated_at": "2017-03-03T19:02:45Z"
    },
    {
      "author": "SRGOM",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov I'm on Linux (Arch) but I'm using an AppImage. Could it be the AppImage? I see that the last release was 16 days back (same day that AppImage issue was resolved). Maybe I'll wait till the next AppImage. ",
      "created_at": "2017-03-03T20:43:38Z",
      "updated_at": "2017-03-03T20:43:38Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@SRGOM not rude at all. Startup performance is something we've always strived to improve. It's a difficult problem, unfortunately, but I absolutely agree we could improve it more. \r\n\r\nAs I understand it, most of the difficulty lies around loading CoreCLR into memory so that we can host PowerShell. If we had a CoreCLR hanging out memory (i.e. the \"server/daemon\" that you wouldn't mind) that we could attach to, I think it would certainly help things, but I'm not technical enough to know the feasability of that. \r\n\r\nI also know that \"ngen\"-ing or \"cross-gen\"ing the binaries down to native code helps with performance (classic space/time tradeoff), but I have no idea if we're already doing that. /cc @daxian-dbw ",
      "created_at": "2017-03-03T23:45:50Z",
      "updated_at": "2017-03-03T23:45:50Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Currently we temporaryly disable \"cross-gen\" because there is a bug in CoreCLR.\r\nUpdate: it is only for CI builds so distributives is not affected.",
      "created_at": "2017-03-04T03:46:14Z",
      "updated_at": "2017-03-04T12:08:58Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Cc @PowerShell/area-performance ",
      "created_at": "2017-03-04T06:06:01Z",
      "updated_at": "2017-03-04T06:06:01Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I did a ton of work on startup in 5.1 - I got Windows PowerShell startup to be roughly in the 250ms range.\r\n\r\nThe code in PowerShell Core is basically the same, but I've still found surprising differences where PowerShell Core is slower.\r\n\r\nSo it might be possible to get acceptable startup on Core, but I think a long-lived server process communicating with a full native exe is the key to getting sub 50ms startup.",
      "created_at": "2017-03-05T07:56:03Z",
      "updated_at": "2017-03-05T07:56:03Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "powershell core release packages are with corssgen'ed assemblies, but I still find it very slow at the first startup, at least on Windows from my experience. I'm using powershell core on Win as my default shell, and the startup time is sometimes frustrating. We need to get to the root of this problem to make it really a usable shell.",
      "created_at": "2017-03-05T19:32:16Z",
      "updated_at": "2017-03-05T19:32:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Confirm - first startup (on Windows) is slower than subsequent.",
      "created_at": "2017-03-05T19:45:55Z",
      "updated_at": "2017-03-05T19:45:55Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "We should do some profiling",
      "created_at": "2017-03-05T21:18:53Z",
      "updated_at": "2017-03-05T21:18:53Z"
    },
    {
      "author": "probonopd",
      "author_association": "CONTRIBUTOR",
      "body": "> I wouldn't mind constantly running a \"server/daemon\" of some sort that allows me to instantly open multiple shells with fresh sessions.\r\n\r\nI would. So this should be optional at best.",
      "created_at": "2017-03-05T21:21:02Z",
      "updated_at": "2017-03-05T21:21:02Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@probonopd - would you even notice?\r\n\r\nThe Roslyn C# compiler is implemented this way - `csc.exe` is 100% native code. If no server is running, it starts one. It then communicates with the server via pipe.\r\n\r\nThe server automatically exits if there is no client connecting after some time, like 15 minutes.\r\n\r\nOne big benefit to this approach - if you run identical scripts in different sessions, the server would naturally share the code, parsing/compilation gets skipped when it's been done already for another client.",
      "created_at": "2017-03-05T22:13:47Z",
      "updated_at": "2017-03-05T22:13:47Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@probonopd @lzybkr I think it definitely depends on the implementation, but we'll make sure to discuss it heavily if/when we choose to implement it. ",
      "created_at": "2017-03-06T17:34:48Z",
      "updated_at": "2017-03-06T17:34:48Z"
    },
    {
      "author": "mirichmo",
      "author_association": "MEMBER",
      "body": "Start-CrossGen only NGen's certain assemblies (the space/time balance). CrossGen'ing everything would improve perf a bit, but not enough to justify the bloated size, last time we checked.",
      "created_at": "2017-03-07T19:39:11Z",
      "updated_at": "2017-03-07T19:39:11Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Related to #1954.",
      "created_at": "2017-03-13T18:09:24Z",
      "updated_at": "2017-03-13T18:09:24Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr I would notice too. Happens quite often that I kill powershell processes because of hangs or some other sort of misbehavior. If all runspaces were in one server it would be an issue, not to mention the lack of isolation for threading etc.\r\n",
      "created_at": "2017-03-13T23:09:16Z",
      "updated_at": "2017-03-13T23:09:16Z"
    },
    {
      "author": "SRGOM",
      "author_association": "CONTRIBUTOR",
      "body": "For what it's worth, I just downloaded the latest alpha (17?) and compared to alpha 9- I'm seeing some improvements.\r\n\r\n`time /lib/AppImages/powershell-6.0.0-alpha.9-x86_64.AppImage -c 'exit'`\r\n\r\n~1.9s total average\r\n\r\n\r\n`time ~/Downloads/powershell-6.0.0-alpha.-x86_64.AppImage -c 'exit'`\r\n\r\n~1.9s total average\r\n\r\n`time ~/Downloads/PowerShell-x86_64.AppImage -c 'exit'` \r\n\r\n~1.5s total average\r\n\r\nI'm glad there is improvement but I still think it's not quite there... \r\n\r\nThank you for thinking about it though.",
      "created_at": "2017-03-14T15:40:59Z",
      "updated_at": "2017-03-14T15:40:59Z"
    },
    {
      "author": "SRGOM",
      "author_association": "CONTRIBUTOR",
      "body": "I guess I will close since you guys already have this thing in mind. Feel free to reopen if you want.",
      "created_at": "2017-03-14T15:41:20Z",
      "updated_at": "2017-03-14T15:41:20Z"
    },
    {
      "author": "SRGOM",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov \r\n\r\n> It's only for CI so distributives are not affected.\r\n\r\nSo how does one \"compile\" their powershell CLR assembly to native code on a Linux distro? I'd like to use the crossgen'd binary.",
      "created_at": "2017-03-15T09:29:40Z",
      "updated_at": "2017-03-15T09:29:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Use `crossgen`. You can see sample in our `Build.psm1` module. Also you can open Issue-Question to get in-depth answer.",
      "created_at": "2017-03-15T11:35:42Z",
      "updated_at": "2017-03-15T11:35:42Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "`Start-PSBuild -CrossGen -PSModuleRestore`  should work if you are running on a supported platform.  You can find an example in our nightly build script:  https://github.com/PowerShell/PowerShell/blob/master/docker/nightly/ubuntu14.04/Dockerfile#L13",
      "created_at": "2017-03-15T16:19:43Z",
      "updated_at": "2017-03-15T16:21:06Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Please review milestone. \r\n~Should we open (re-open) tracking Issue for the performance considerations?~\r\nSorry, we have already #1954",
      "created_at": "2017-04-13T12:11:39Z",
      "updated_at": "2017-04-13T13:12:29Z"
    },
    {
      "author": "SRGOM",
      "author_association": "CONTRIBUTOR",
      "body": "There were a lot of important discussion in this thread and I probably shouldn't have closed this since it seems that PSH still takes a while to open, nowhere fast enough for me to quickly send a ping. \r\n\r\nI will reopen and the repo-owner can decide what if anything to do, including closing this. I liked the idea of having a persistent server running. ",
      "created_at": "2019-03-26T17:39:25Z",
      "updated_at": "2019-03-26T17:39:25Z"
    },
    {
      "author": "SRGOM",
      "author_association": "CONTRIBUTOR",
      "body": "```\r\n[11:09:44 ~]time bash -c 'exit'\r\nbash -c 'exit'  0.00s user 0.00s system 89% cpu 0.006 total\r\n[11:09:46 ~]time zsh -c 'exit' \r\nzsh -c 'exit'  0.01s user 0.00s system 91% cpu 0.006 total\r\n[11:09:49 ~]time psh -c 'exit' \r\npsh -c 'exit'  0.54s user 0.04s system 125% cpu 0.463 total\r\n```",
      "created_at": "2019-03-26T17:40:17Z",
      "updated_at": "2019-03-26T17:40:17Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Updated timing from my mac using PowerShell 6.2\r\n```\r\n$ time pwsh -noprofile -c exit\r\n\r\nreal\t0m0.426s\r\nuser\t0m0.414s\r\nsys\t0m0.093s\r\n\r\n$ time bash -c 'exit'\r\n\r\nreal\t0m0.013s\r\nuser\t0m0.004s\r\nsys\t0m0.007s\r\n\r\n$ time zsh -c 'exit'\r\n\r\nreal\t0m0.017s\r\nuser\t0m0.005s\r\nsys\t0m0.009s\r\n\r\n```\r\n\r\nSince, AppImage is a virtualization, it will not be as fast.",
      "created_at": "2019-04-23T21:33:45Z",
      "updated_at": "2019-04-23T21:42:15Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": ".Net Core 3.0 has some improvements that will hopefully improve startup time, but certainly won't be comparable to bash or zsh",
      "created_at": "2019-04-24T03:56:13Z",
      "updated_at": "2019-04-24T03:56:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I remember here the idea was mentioned (Jason) to use a hosted solution to improve startup time.",
      "created_at": "2019-04-24T04:14:20Z",
      "updated_at": "2019-04-24T04:14:20Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov yes, that is something we've thought about but isn't something we're targeting for 7.0",
      "created_at": "2019-04-24T14:15:28Z",
      "updated_at": "2019-04-24T14:15:28Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Make sense to have a tracking issue for this?",
      "created_at": "2019-04-24T14:29:14Z",
      "updated_at": "2019-04-24T14:29:14Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Created https://github.com/PowerShell/PowerShell/issues/9456, we can close this one",
      "created_at": "2019-04-24T16:39:39Z",
      "updated_at": "2019-04-24T16:39:39Z"
    }
  ],
  "created_at": "2017-03-03T18:19:22Z",
  "number": 3249,
  "state": "closed",
  "title": "Powershell startup time",
  "updated_at": "2019-05-07T17:04:37Z"
}