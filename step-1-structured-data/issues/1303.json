{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1303",
  "author": "daxian-dbw",
  "body": "This is on my surface 3, which is running \"Windows 10 Home\":\n## Steps to reproduce\n\n```\nTest-Connection .\n```\n## Expected behavior\n\n```\nPS C:\\> Test-Connection .                                                                                               \nSource        Destination     IPV4Address      IPV6Address                              Bytes    Time(ms)\n------        -----------     -----------      -----------                              -----    --------\nDONGBO-SUF    localhost                                                                 32       0\nDONGBO-SUF    localhost                                                                 32       0\nDONGBO-SUF    localhost                                                                 32       0\nDONGBO-SUF    localhost                                                                 32       0\n```\n## Actual behavior\n\n```\nTest-Connection : The client cannot connect to the destination specified in the request. Verify that the\nservice on the destination is running and is accepting requests. Consult the logs and documentation for the\nWS-Management service running on the destination, most commonly IIS or WinRM. If the destination is the WinRM\nservice, run the following command on the destination to analyze and configure the WinRM service: \"winrm\nquickconfig\".\nAt line:1 char:1\n+ Test-Connection .\n+ ~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : InvalidOperation: (:) [Test-Connection], CimException\n    + FullyQualifiedErrorId : TestConnectionException,Microsoft.PowerShell.Commands.TestConnectionCommand\n\n\n> $Error[0].Exception.StackTrace\n   at Microsoft.Management.Infrastructure.Internal.Operations.CimSyncEnumeratorBase`1.MoveNext()\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\n   at Microsoft.PowerShell.Commands.TestConnectionCommand.ProcessWSManProtocolForTestConnection() in C:\\Users\\rocky\\Repos\\PowerShell\\src\\Microsoft.PowerShell.Commands.Management\\commands\\management\\Computer.cs:line 696\n```\n## Environment data\n\n``` powershell\n> $PSVersionTable\nName                           Value\n----                           -----\nPSVersion                      5.1.10032.0\nPSRemotingProtocolVersion      2.3\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\nPSEdition                      Core\nGitCommitId                    v0.5.0-299-g75c0c3cb4d5a51232199d7320d501a6c7adeb5ec\nBuildVersion                   3.0.0.0\nSerializationVersion           1.1.0.1\nWSManStackVersion              3.0\nCLRVersion\n\n> Get-ComputerInfo\nWindowsBuildLabEx                                       : 10586.420.amd64fre.th2_release_sec.160527-1834\nWindowsCurrentVersion                                   : 6.3\nWindowsEditionId                                        : Core\nWindowsInstallationType                                 : Client\nWindowsInstallDateFromRegistry                          : 4/1/2016 4:41:25 AM\nWindowsProductId                                        : 00342-24220-07471-AAOEM\nWindowsProductName                                      : Windows 10 Home\nWindowsSystemRoot                                       : C:\\WINDOWS\n```\n## Please Note\n\n`Test-Connection` works fine in CoreCLR OSPS on my dev machine, which is running \"Windows 10 Enterprise\" (see below), so this issue might be due to incompatibilities between OS.\n\n```\n> Test-Connection .\nSource        Destination     IPV4Address      IPV6Address                              Bytes    Time(ms)\n------        -----------     -----------      -----------                              -----    --------\nDONGBO-DEV    localhost                                                                 32       0\nDONGBO-DEV    localhost                                                                 32       0\nDONGBO-DEV    localhost                                                                 32       0\nDONGBO-DEV    localhost                                                                 32       0\n\n> $PSVersionTable\nName                           Value\n----                           -----\nPSRemotingProtocolVersion      2.3\nBuildVersion                   3.0.0.0\nGitCommitId                    v0.5.0-297-g2f9be46eac39cb987edd045fb3884a1ed4ba2acf\nWSManStackVersion              3.0\nSerializationVersion           1.1.0.1\nPSVersion                      5.1.10032.0\nPSEdition                      Core\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\nCLRVersion\n\n> Get-ComputerInfo \nWindowsBuildLabEx                                       : 10586.420.amd64fre.th2_release_sec.160527-1834\nWindowsCurrentVersion                                   : 6.3\nWindowsEditionId                                        : Enterprise\nWindowsInstallationType                                 : Client\nWindowsInstallDateFromRegistry                          : 1/21/2016 7:55:51 AM\nWindowsProductId                                        : 00329-00000-00003-AA197\nWindowsProductName                                      : Windows 10 Enterprise\nWindowsRegisteredOrganization                           : Microsoft IT\nWindowsRegisteredOwner                                  : Microsoft Corp.\nWindowsSystemRoot                                       : C:\\WINDOWS\n```\n",
  "closed_at": "2016-10-06T23:41:53Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@vors I'm not sure if this fits in the Aug 17 milestone. Please feel free to move it to \"future\".\n",
      "created_at": "2016-07-07T01:19:42Z",
      "updated_at": "2016-07-07T01:19:55Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@PaulHigin. Could this be because on \"Windows 10 Home\" remoting is not enabled by default? What is the Enable-PSRemoting equivalent?\n",
      "created_at": "2016-09-19T21:18:58Z",
      "updated_at": "2016-09-19T21:18:58Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@daxian-dbw On a Windows 10 Home machine on Powershell 5.1, Test-Connection uses DCOM protocol by default, hence it works fine. On Powershell 6.0, the default protocol is WSMan as DCOM is not supported. \n\nOn Powershell 5.1, if we do Test-Connection . -Protocol WSMan, we get the same error as Powershell 6.0. If we execute 'winrm quickconfig' as suggested by the error message then Test-Connection . works as expected on both versions. \n\nWith this, I am marking this as \"By Design\", please remove the label if you do not agree, otherwise close the issue. \n",
      "created_at": "2016-10-06T20:42:36Z",
      "updated_at": "2016-10-06T20:42:36Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Sounds good! Thanks @adityapatwardhan \n",
      "created_at": "2016-10-06T23:41:53Z",
      "updated_at": "2016-10-06T23:41:53Z"
    }
  ],
  "created_at": "2016-07-07T00:47:40Z",
  "labels": [
    "WG-Cmdlets",
    "Resolution-By Design"
  ],
  "number": 1303,
  "state": "closed",
  "title": "Test-Connection in CoreCLR OSPS doesn't work on \"Windows 10 Home\"",
  "updated_at": "2016-10-06T23:41:53Z"
}