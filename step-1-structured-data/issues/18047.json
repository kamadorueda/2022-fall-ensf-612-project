{
  "_url": "https://github.com/PowerShell/PowerShell/issues/18047",
  "author": "daxian-dbw",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nFor modules that target both Windows PowerShell and PowerShell Core, they are usually built against either `netstandard2.0`, or `net462`, so that one single set of assemblies can work on both .NET Framework and .NET Core.\r\n\r\nFor those modules, the API `Assembly.LoadFile` is usually used to load a dependency assembly into a separate load context when working in PowerShell Core to isolate the dependency, so as to avoid assembly loading conflicts with other modules. This usually happens when the dependency is commonly used by modules, such as `Newtonsoft.Json` and `YamlDotNet`.\r\n\r\nToday, assemblies loaded by `Assembly.LoadFile` are discoverable by PowerShell's type resolution, and this breaks the isolation those modules are looking for when using `Assembly.LoadFile`. Since they are built against `netstandard2.0` and `net462`, they cannot use the `AssemblyLoadContext` APIs for creating a custom load context but have to depend on `Assembly.LoadFile` which loads an assembly in a separate assembly load context.\r\n\r\nThis PR is a breaking change.\r\n\r\n## PR Context\r\n\r\nAssemblies loaded by `Assembly.LoadFile` are made discoverable by https://github.com/PowerShell/PowerShell/pull/12203.\r\nHowever, the original issues that PR was to address is just for assemblies loaded from memory by `Assembly.Load(byte[])`, and `Assembly.LoadFile` was never the ask.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/main/reference/7.3/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n",
  "closed_at": "2022-09-07T16:44:42Z",
  "comments": [
    {
      "author": "pull-request-quantifier[bot]",
      "author_association": "NONE",
      "body": "### ![](https://img.shields.io/static/v1?label=Quantified&message=Extra%20Small&color=green)\r\n\r\nThis PR has `17` quantified lines of changes. In general, a change size of upto `200` lines is ideal for the best PR experience!\r\n\r\n------\r\n\r\n<details >\r\n    <summary display=\"inline\"> <strong>Quantification details</strong></summary>\r\n    <p />\r\n\r\n```\r\nLabel      : Extra Small\r\nSize       : +11 -6\r\nPercentile : 6.8%\r\n\r\nTotal files changed: 2\r\n\r\nChange summary by file extension:\r\n.cs : +4 -2\r\n.ps1 : +7 -4\r\n```\r\n> Change counts above are quantified counts, based on the [PullRequestQuantifier customizations](https://github.com/microsoft/PullRequestQuantifier/blob/main/docs/prquantifier-yaml.md).\r\n    \r\n</details>\r\n\r\n\r\n<details>\r\n    <summary display=\"inline\"> <strong>Why proper sizing of changes matters</strong> </summary>\r\n    <p/>\r\n    <p/>\r\n\r\nOptimal pull request sizes drive a better predictable PR flow as they strike a\r\nbalance between between PR complexity and PR review overhead. PRs within the\r\noptimal size (typical small, or medium sized PRs) mean:\r\n\r\n- Fast and predictable releases to production:\r\n  - Optimal size changes are more likely to be reviewed faster with fewer\r\niterations.\r\n  - Similarity in low PR complexity drives similar review times.\r\n- Review quality is likely higher as complexity is lower:\r\n  - Bugs are more likely to be detected.\r\n  - Code inconsistencies are more likely to be detected.\r\n- Knowledge sharing is improved within the participants:\r\n  - Small portions can be assimilated better.\r\n- Better engineering practices are exercised:\r\n  - Solving big problems by dividing them in well contained, smaller problems.\r\n  - Exercising separation of concerns within the code changes.\r\n\r\n#### What can I do to optimize my changes\r\n\r\n- Use the PullRequestQuantifier to quantify your PR accurately\r\n  - Create a context profile for your repo using the [context generator](https://github.com/microsoft/PullRequestQuantifier/releases)\r\n  - Exclude files that are not necessary to be reviewed or do not increase the review complexity. Example: Autogenerated code, docs, project IDE setting files, binaries, etc. Check out the `Excluded` section from your `prquantifier.yaml` context profile. \r\n  - Understand your typical change complexity, drive towards the desired complexity by adjusting the label mapping in your `prquantifier.yaml` context profile.\r\n  - Only use the labels that matter to you, [see context specification](./docs/prquantifier-yaml.md) to customize your `prquantifier.yaml` context profile.\r\n- Change your engineering behaviors\r\n  - For PRs that fall outside of the desired spectrum, review the details and check if:\r\n    - Your PR could be split in smaller, self-contained PRs instead\r\n    - Your PR only solves one particular issue. (For example, don't refactor and code new features in the same PR).\r\n\r\n#### How to interpret the change counts in git diff output\r\n\r\n- One line was added: `+1 -0`\r\n- One line was deleted: `+0 -1`\r\n- One line was modified: `+1 -1` (git diff doesn't know about modified, it will\r\ninterpret that line like one addition plus one deletion)\r\n- Change percentiles: Change characteristics (addition, deletion, modification)\r\nof this PR in relation to all other PRs within the repository.\r\n\r\n</details>\r\n\r\n<p />\r\n\r\n------\r\n\r\nWas this comment helpful? <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiZGF4aWFuLWRidyIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xODA0NyIsIkV2ZW50VHlwZSI6IlRodW1ic1VwIn0=&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs up\"><strong>:thumbsup:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiZGF4aWFuLWRidyIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xODA0NyIsIkV2ZW50VHlwZSI6Ik5ldXRyYWwifQ==&amp;anonymous=True\" target=\"_blank\" title=\"Neutral\"><strong>&nbsp;:ok_hand:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiZGF4aWFuLWRidyIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xODA0NyIsIkV2ZW50VHlwZSI6IlRodW1ic0Rvd24ifQ==&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs down\"><strong>&nbsp;:thumbsdown:</strong></a> (<a href=\"MAILTO:prquantifier@microsoft.com\" title=\"Mail to prquantifier@microsoft.com\">Email</a>)\r\n[Customize PullRequestQuantifier](https://github.com/PowerShell/PowerShell/blob/master/.github/prquantifier.yaml) for this repository.\r\n\r\n",
      "created_at": "2022-09-07T00:07:24Z",
      "updated_at": "2022-09-07T00:07:24Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I'm not sure if we want to make this breaking change, given that it has been the way it works since PowerShell 6.\r\nWe can keep the existing behavior, and discourage using `Assembly.LoadFile` for dependency isolation. @SeeminglyScience, what's your thoughts on this?",
      "created_at": "2022-09-07T16:01:17Z",
      "updated_at": "2022-09-07T16:01:17Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I think it's better to keep the current behavior unchanged. For modules built against `netstandard2.0` or `net462`, we can have a `AssemblyLoadContextProxy` type that wraps some simple reflection APIs to create a custom ALC and load an assembly by path to that ALC. See the following as an example:\r\nhttps://github.com/PowerShell/platyPS/blob/8ca28935c376ae8dc36ac142e4960fc6d3b725e5/src/ModuleInitAndCleanup.cs#L74-L103",
      "created_at": "2022-09-07T16:50:15Z",
      "updated_at": "2022-09-27T21:35:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems general question is - should Engine use only default ALC for PowerShell's type resolution? Maybe it makes sense to make this configurable?",
      "created_at": "2022-09-08T03:57:37Z",
      "updated_at": "2022-09-08T03:57:37Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> should Engine use only default ALC for PowerShell's type resolution?\r\n\r\nIt definitely needs to resolve types from assemblies loaded by `Assembly.Load(byte[])`. Many users depend on it.\r\n\r\nEven though there is no report on `Assembly.LoadFile` when the regression was introduced by https://github.com/PowerShell/PowerShell/pull/11088, types from assemblies loaded by `Assembly.LoadFile` can be resolved by PowerShell in all prior versions of PowerShell Core (and I think it's the same to Windows PowerShell, but didn't verify). I don't think it's a breaking change that we can accept, and hence close this PR.",
      "created_at": "2022-09-08T16:25:14Z",
      "updated_at": "2022-09-08T16:25:35Z"
    }
  ],
  "created_at": "2022-09-07T00:07:19Z",
  "number": 18047,
  "state": "closed",
  "title": "Do not discover assemblies loaded by `Assembly.LoadFile`",
  "updated_at": "2022-09-27T21:35:08Z"
}