{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12303",
  "author": "DesertBear",
  "body": "# Steps to reproduce\r\n\r\nWhen using \"Get-WinEvent -FilterHashtable\", it appear that if an array is used for the value in the key/value pair, the array length is limited to 20 items.  \r\n\r\nI think this limit shouldn't be there, to allow for arrays longer than 20.  If it's not possible to remove the limit for some reason, PowerShell should display an error when the limit is exceeded.  As it is currently, the user is unaware that the script is silently broken.\r\n\r\n\r\n# Expected behavior\r\n\r\nIn the below example, the Event ID range is from 1 to 21.  As the array length doesn't exceed 20 items, the script works correctly and returns results.\r\n\r\n![Screenshot A](https://user-images.githubusercontent.com/27423064/79070463-f774fa80-7ccd-11ea-840d-43aecdddeb2e.png)\r\n\r\n\r\n# Actual behavior\r\n\r\nIn the below example, the Event ID range is from 1 to 24 (which is the Event ID range for Microsoft Defender [Exploit Protection events](https://docs.microsoft.com/windows/security/threat-protection/microsoft-defender-atp/event-views#list-of-attack-surface-reduction-events)).  As the array length exceeds 20 items, the script doesn't return any results \u2013 even though there are events stored in the event logs.  The user is unaware that the script is broken in this scenario.\r\n\r\n![Screenshot B](https://user-images.githubusercontent.com/27423064/79070475-08be0700-7cce-11ea-844b-345cce05418c.png)\r\n\r\n\r\n# Code from above screenshots\r\n\r\n```\r\n# Timescale\r\n$StartTime = (Get-Date).AddDays(-35)\r\n\r\n# Defender events\r\n$Defender = Get-WinEvent -FilterHashtable @(\r\n\r\n    # ExploitProtection\r\n    @{\r\n        \"StartTime\"        = $StartTime\r\n        \"LogName\"          = \"Microsoft-Windows-Security-Mitigations/KernelMode\"\r\n        \"ProviderName\"     = \"Microsoft-Windows-Security-Mitigations\"\r\n        \"ID\"               = \"1\"..\"24\"\r\n        SuppressHashFilter = @{ \r\n            \"ProcessPath\" = \"\\device\\harddiskvolume4\\windows\\system32\\svchost.exe\"\r\n        }\r\n    }\r\n)\r\n\r\n# Output\r\n@($Defender; ) | \r\nSort-Object -Property TimeCreated | \r\nFormat-List -Property TimeCreated, Message, ID\r\n```\r\n\r\n\r\n# Environment data\r\n\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}       \r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Did you check that this works for array with less 20 items?\r\nIf so I guess it is undocumented underlying API limitation.\r\nAdding a check and issue an error message is simple.",
      "created_at": "2020-04-13T06:33:12Z",
      "updated_at": "2020-04-13T06:33:12Z"
    },
    {
      "author": "DesertBear",
      "author_association": "NONE",
      "body": "I've just realised that it's actually 23 or more, not 20.  So if the array count is 22 or less it works OK, if the array count is 23 or more it doesn't work OK.\r\n\r\nThe first screenshot has an array count of 21 (1..21); therefore if you look in the Terminal pane in that particular screenshot you can see it is returning results as expected.  \r\n\r\nThe second screenshot has an array count of 24 (1..24); meaning it doesn't work as expected.  \r\n\r\nTherefore to clarify, using the following ranges will return results correctly:\r\n2..10 (Array count = 9)\r\n5..10 (Array count = 6)\r\n1..22 (Array count = 22)\r\n10..31 (Array count = 22)\r\n\r\nUsing the following ranges won't return any results, even though there are events in the log for Event ID 10:\r\n1..35 (Array count = 35)\r\n5..30 (Array count = 26)\r\n1..23 (Array count = 23)\r\n10..32 (Array count = 23)\r\n\r\nUsing \"Get-WinEvent -FilterXML\" works fine, it's just when trying to use \"-FilterHashtable\" to do the same thing as \"-FilterXML\" that it's problematic.  For example, the below using \"-FilterXML\" works fine:\r\n\r\nPS1 File:  \r\n[01 Defender - FilterXML.zip](https://github.com/PowerShell/PowerShell/files/4470618/01.Defender.-.FilterXML.zip)\r\n![Screenshot 01 (Defender - FilterXML)](https://user-images.githubusercontent.com/27423064/79140854-8ce8bb00-7db0-11ea-8b93-6253bdec57f4.png)\r\n\r\n",
      "created_at": "2020-04-13T17:02:52Z",
      "updated_at": "2020-04-13T17:27:09Z"
    },
    {
      "author": "DesertBear",
      "author_association": "NONE",
      "body": "In addition, the above example is using a range operator just for Event IDs (1..24).  However, as \"Get-WinEvent\" is dealing with Event Logs, the range operator may be used for other things that need to be longer as well.  For example, when looking at Windows Firewall event logs, it could be looking at a range of Source/Destination Port numbers.\r\n\r\nTo give an example, when using \"-FilterXML\" \u2013 rather than \"-FilterHashtable\" \u2013 it's possible to have multiple specific suppress filters, which allows creating a whitelist (collect all the events and then whitelist by suppressing the ones you don't want to see), however with \"-FilterHashtable\" that doesn't appear to be possible in the same way.\r\n\r\nUsing \"-FilterXML\" it will look something like this:\r\n\r\nPS1 File:\r\n[02 Firewall - FilterXML.zip](https://github.com/PowerShell/PowerShell/files/4470655/02.Firewall.-.FilterXML.zip)\r\n![Screenshot 02 (Firewall - FilterXML)](https://user-images.githubusercontent.com/27423064/79141223-3f208280-7db1-11ea-9791-95fcf01c1acf.png)\r\n\r\nUsing \"-FilterHashtable\", something similar can be achieved by doing something like this:\r\n\r\nPS1 File:\r\n[03 Firewall - Hashtable 01.zip](https://github.com/PowerShell/PowerShell/files/4470670/03.Firewall.-.Hashtable.01.zip)\r\n![Screenshot 03 (Firewall - Hashtable 01)](https://user-images.githubusercontent.com/27423064/79141326-80189700-7db1-11ea-9763-da93a223aea4.png)\r\n\r\nHowever, when using \"-FilterHashtable\", the problem is when you need to suppress firewall events where it's not possible to suppress a particular \"DestPort\" (like old delayed replies from DNS servers \u2013 as they are replying to random destination ports in the 49152\u201365535 range, rather than a specific port).  \r\n\r\n![Screenshot 04 (Firewall - Hashtable 01)](https://user-images.githubusercontent.com/27423064/79141408-a50d0a00-7db1-11ea-8ff6-ccf43a5a21be.png)\r\n\r\nIf you try to add a another field (such as \"SourcePort\") to be suppressed as well, this won't work because the event would need to have both one of the values in the \"DestPort\" and also one of the values in \"SourcePort\" in order for it to be suppressed.  As this isn't the case for most of the events, it will return almost the whole inbound event log:\r\n\r\nPS1 File:\r\n[05 Firewall - Hashtable 02.zip](https://github.com/PowerShell/PowerShell/files/4470678/05.Firewall.-.Hashtable.02.zip)\r\n![Screenshot 05 (Firewall - Hashtable 02)](https://user-images.githubusercontent.com/27423064/79141525-e4d3f180-7db1-11ea-9104-677a8c5cca6e.png)\r\n\r\nAnother option would be to use the 49152..65535 range operator.  Although not ideal, I'm unable to find another way.  However, due to the hashtable arrays being limited, this won't work either.  At least it is something I wanted to try; I don't know what the performance would be like if it did work:\r\n\r\nPS1 File:\r\n[06 Firewall - Hashtable 03.zip](https://github.com/PowerShell/PowerShell/files/4470695/06.Firewall.-.Hashtable.03.zip)\r\n![Screenshot 06 (Firewall - Hashtable 03)](https://user-images.githubusercontent.com/27423064/79141728-45632e80-7db2-11ea-94a1-05918c12a76d.png)\r\n\r\n",
      "created_at": "2020-04-13T17:24:51Z",
      "updated_at": "2020-04-13T17:24:51Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@DesertBear does using something like `\"49152-65535\"` for the `DestPort` work for this application?",
      "created_at": "2020-04-13T18:07:41Z",
      "updated_at": "2020-04-13T18:07:41Z"
    },
    {
      "author": "DesertBear",
      "author_association": "NONE",
      "body": "Unfortunately, that doesn't work.  When dealing with Windows Event Logs, you're stuck dealing with the data exactly as it appears in the event log XML.  So when using \"49152-65535\" for the \"DestPort\", it won't recognise it as a range, but instead reads it literally and checks to see if \"49152-65535\" matches \"61457\" \u2013 which it obviously doesn't.",
      "created_at": "2020-04-14T00:57:32Z",
      "updated_at": "2020-04-14T00:57:32Z"
    },
    {
      "author": "Robo210",
      "author_association": "CONTRIBUTOR",
      "body": "On [this page](https://docs.microsoft.com/en-us/windows/win32/wes/consuming-events) it mentions:\r\n\r\n> If the XPath expression is a compound expression that contains more than 20 expressions or you are querying for events from multiple sources, then you must use a structured XML query.\r\n\r\nThe limitation on the number of expressions applies to each of the XPath queries within each select/suppress element in a structured XML query. In order for your example to work, -FilterHashTable would need to either understand ranges and translate them into min <= x <= max queries, or it would need to create multiple select/suppress elements to stay under the 20 expression limit.",
      "created_at": "2020-05-19T10:41:55Z",
      "updated_at": "2020-05-19T10:41:55Z"
    }
  ],
  "created_at": "2020-04-12T14:12:40Z",
  "labels": [
    "Issue-Question",
    "WG-Cmdlets",
    "Up-for-Grabs"
  ],
  "number": 12303,
  "state": "open",
  "title": "\"Get-WinEvent -FilterHashtable\" - Array Length Limited To 20",
  "updated_at": "2020-05-19T10:41:55Z"
}