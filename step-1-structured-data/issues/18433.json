{
  "_url": "https://github.com/PowerShell/PowerShell/issues/18433",
  "author": "mklement0",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nClearly not a common use case, but a bug nonetheless:\r\n\r\nWhen you use `Switch-Process` (`exec`) to replace the current PowerShell process (running an interactive session) with a different shell's interactive session (e.g., `bash`), that session's command-line editing is broken.\r\n\r\n```powershell\r\n# Run on macOS or Linux\r\nSwitch-Process /bin/bash\r\n```\r\n\r\n### Expected behavior\r\n\r\nA regular interactive Bash session.\r\n\r\n### Actual behavior\r\n\r\nWhat the user types on the Bash command line doesn't print (however, submitting commands and printing output works normally).\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nPowerShell Core 7.3.0-rc.1 on macOS 12.6 or Linux\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": "2022-11-04T22:12:10Z",
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> What the user types on the Bash command line doesn't print (however, submitting commands and printing output works normally).\r\n\r\nThe same on Linux. And you can't switch back, `exit` closes the terminal.",
      "created_at": "2022-11-01T15:31:50Z",
      "updated_at": "2022-11-01T15:32:14Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for confirming that the problem also affects Linux, @237dmitry  (I've updated the initial post).\r\n\r\n>  `exit` closes the terminal\r\n\r\nThat is actually by design: `Switch-Process` (`exec`) is meant to _replace_ the current process rather than create a _child process_. Therefore , `bash` becomes the process running directly in the terminal window, and exiting it closes the window.",
      "created_at": "2022-11-01T15:36:56Z",
      "updated_at": "2022-11-01T15:36:56Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> is meant to replace the current process rather than create a child process. \r\n\r\nI understood. But it is unclear why this is necessary? You can simply run another shell right in the current session, in a different buffer, so as not to lose information in the main buffer.\r\n```\r\n\"`e[?1049h\"; Clear-Host; bash; \"`e[?1049l\"\r\n```",
      "created_at": "2022-11-01T15:51:22Z",
      "updated_at": "2022-11-01T15:55:04Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "As stated in the initial post, this use of `exec` is uncommon - you'd only do this if you wanted to discard the PowerShell session in favor of a different shell's interactive session, _without needing to return to it_. \r\n\r\nThat said, (a) it should still work and (b), not knowing what the underlying problem is, more common `exec` scenarios could be affected too (say a non-shell replacement process prompts for user input).\r\n\r\n",
      "created_at": "2022-11-01T16:06:55Z",
      "updated_at": "2022-11-03T03:33:42Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": ">  you'd only do this if you wanted to discard the PowerShell session in favor of a different shell's interactive session, without needing to return to it.\r\n\r\nOk.",
      "created_at": "2022-11-01T16:30:16Z",
      "updated_at": "2022-11-01T16:30:16Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Using `switch-process` with zsh works as expected, but bash seems to not set the echo mode (tested on MacOS).  Workaround is to use `stty echo` within bash.  Based on what I could find, we may have to use `termios` to re-enable echo before `exec` call.",
      "created_at": "2022-11-01T18:51:21Z",
      "updated_at": "2022-11-01T18:51:21Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "So, I don't think calling `termios` may be sufficient as `stty` already has echo on within pwsh and that doesn't resolve bash issue.",
      "created_at": "2022-11-02T15:41:52Z",
      "updated_at": "2022-11-02T15:41:52Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Not sure how relevant it is in the real world, but `ksh` is also affected (as is `dash`, but no one uses that as an interactive shell); by contrast, `fish`, like  `zsh`, is _not_ affected.",
      "created_at": "2022-11-02T16:02:59Z",
      "updated_at": "2022-11-03T03:32:55Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I'm guessing that `fish`, `zsh`, etc... is explicitly setting stty to echo whereas older shells do not.  Don't understand what other shells are doing to make it work.  Here's something that's a bit interesting:\r\n\r\n```console\r\nPS> stty\r\nspeed 38400 baud;\r\nlflags: echoe echok echoke echoctl pendin\r\niflags: iutf8\r\noflags: -oxtabs\r\ncflags: cs8 -parenb\r\n[61.39ms] /Users/steve\r\nPS> pwsh -c { exec stty }\r\nspeed 38400 baud;\r\nlflags: echoe echok echoke echoctl pendin\r\niflags: iutf8\r\noflags: -oxtabs\r\ncflags: cs8 -parenb\r\n[318.76ms] /Users/steve\r\nPS> pwsh\r\nPowerShell 7.3.0-rc.1\r\n/Users/steve\r\nPS> exec stty\r\nspeed 38400 baud;\r\nlflags: -icanon -iexten -echo echoe echok echoke echoctl pendin\r\niflags: -icrnl -ixon iutf8\r\noflags: -oxtabs\r\ncflags: cs8 -parenb\r\n```\r\n\r\nSo interactive mode for PowerShell is doing something affecting the tty.",
      "created_at": "2022-11-03T15:49:50Z",
      "updated_at": "2022-11-03T16:13:38Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Instead of PowerShell, It could be what .NET does, or more specifically, what `[Console]::Readkey` does. The following is quoted from the blog about [\"Console.ReadKey\" improvement](https://devblogs.microsoft.com/dotnet/console-readkey-improvements-in-net-7/#sys-calls):\r\n\r\n> [tcsetattr](https://linux.die.net/man/3/tcsetattr) allows for changing the terminal settings. It\u2019s used by .NET to apply its own setting at startup, and restore the previous settings at rundown.",
      "created_at": "2022-11-03T16:36:22Z",
      "updated_at": "2022-11-03T16:36:22Z"
    }
  ],
  "created_at": "2022-11-01T15:17:13Z",
  "number": 18433,
  "state": "closed",
  "title": "Switch-Process, when used to replace the PowerShell process with an interactive (different) shell session, breaks that session",
  "updated_at": "2022-11-04T22:12:17Z"
}