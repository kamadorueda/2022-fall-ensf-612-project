{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2321",
  "author": "PaulHigin",
  "body": "In PowerShell Ctrl+C should stop a running command.  But in an SSH interactive remote session Ctrl+C terminates the SSH process and closes the session.  This behavior is the same for both Windows and Linux clients.\n\nThis is happening because both PowerShell and SSH processes are attached to the console and so they both get the SIGINT signal.  PowerShell sends a PSRP stop signal over the channel as expected but the SSH process also handles the signal and terminates the process which closes the remote session.\n## Steps to reproduce\n\n``` powershell\nPS> Enter-PSSession -HostName <hostName> -UserName <userName>\n[<hostName>]: PS > 1..100 % { sleep 1; \"Output $_\" }\nOutput 1\nOutput 2\n# While script is running type Ctrl+C to stop it\n```\n## Expected behavior\n\nRunning command stops and remote session prompt is displayed.\n## Actual behavior\n\nSession is ended with error:\n\n``` powershell\nSystem.IO.IOException: Pipe is broken\n```\n\nAlso the exception is unhandled causing PowerShell process to crash.\n## Environment data\n\n``` powershell\nName                           Value\n----                           -----\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\nSerializationVersion           1.1.0.1\nPSRemotingProtocolVersion      2.3\nBuildVersion                   3.0.0.0\nWSManStackVersion              3.0\nPSVersion                      6.0.0-alpha\nCLRVersion\nGitCommitId                    v6.0.0-alpha.10-8-gdd2394b1e6088f6c82054f5cae5520e532010fd4-dirty\nPSEdition                      Core\n```\n",
  "closed_at": "2017-06-19T22:27:44Z",
  "comments": [
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "This has been fixed as part of the work for issue #2827 for a Windows client.  When creating the ssh.exe process we can use the CREATE_NEW_PROCESS_GROUP process creation flag which prevents the console Ctrl+C signal from propagating to that process.  But there is no support for this in managed code used on Linux clients so it is not fixed there yet.",
      "created_at": "2017-02-01T23:03:40Z",
      "updated_at": "2017-02-01T23:03:40Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "I'm hitting this problem.\r\nWould be really useful to get fix for unix.\r\n\r\n```\r\nUnhandled Exception: System.IO.IOException: Broken pipe\r\n   at System.IO.UnixFileStream.CheckFileCall(Int64 result, Boolean ignoreNotSupported)\r\n   at System.IO.UnixFileStream.WriteNative(Byte[] array, Int32 offset, Int32 count)\r\n   at System.IO.UnixFileStream.FlushWriteBuffer()\r\n   at System.IO.UnixFileStream.Flush(Boolean flushToDisk)\r\n   at System.Management.Automation.Remoting.OutOfProcessTextWriter.WriteLine(String data)\r\n   at System.Management.Automation.Remoting.Client.OutOfProcessClientCommandTransportManager.SendStopSignal()\r\n   at System.Management.Automation.Internal.ClientPowerShellDataStructureHandler.SendStopPowerShellMessage()\r\n   at System.Management.Automation.Runspaces.Internal.ClientRemotePowerShell.StopAsync()\r\n   at System.Management.Automation.PowerShell.CoreStop(Boolean isSyncCall, AsyncCallback callback, Object state)\r\n   at System.Management.Automation.PowerShell.BeginStop(AsyncCallback callback, Object state)\r\n   at System.Management.Automation.RemotePipeline.Stop()\r\n   at Microsoft.PowerShell.Executor.Cancel()\r\n   at Microsoft.PowerShell.Executor.CancelCurrentExecutor()\r\n   at Microsoft.PowerShell.ConsoleHost.HandleBreak()\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n\r\n```\r\n\r\n>  But there is no support for this in managed code used on Linux clients so it is not fixed there yet\r\n\r\nIs it a CoreCLR limitation? Should we start conversation with dotnet people?",
      "created_at": "2017-02-28T05:44:36Z",
      "updated_at": "2017-02-28T05:46:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems `ssh` can set raw mode and send `Ctrl-C` to remote host as character.\r\nhttp://unix.stackexchange.com/questions/102061/ctrl-c-handling-in-ssh-session",
      "created_at": "2017-02-28T15:21:47Z",
      "updated_at": "2017-02-28T15:21:47Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "This is interesting.  I can verify that interactive SSH sessions don't handle the Ctrl+C signal and appear to pass it to the remote session as expected.\r\n\r\nBut in any case I don't want ssh to handle Ctrl+C at all.  Instead it should be handled only in the PowerShell client process but it appears to get passed to the ssh child process as well.\r\n\r\nIn Windows this was an easy fix by simply preventing Ctrl+C from being passed from the PowerShell process to the child ssh process.  I am not sure what the mechanism is for Linux but it may be a similar issue.",
      "created_at": "2017-02-28T23:03:40Z",
      "updated_at": "2017-02-28T23:03:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@PaulHigin Unix has the same behavior as Windows based on [process groups](https://en.wikipedia.org/wiki/Process_group)\r\nTo move the process in a new process group, the [process must make a call](http://man7.org/linux/man-pages/man2/setpgid.2.html) `setpgid(0,0)`\r\n\r\nI believe that it can be easily and quickly be fixed in CoreCLR (add support for `CREATE_NEW_PROCESS_GROUP` flag)\r\n\r\nI may be wrong, but it seems the above mentioned ssh RAW mode uses `setpgid(0,0)` https://github.com/openssh/openssh-portable/blob/79e4829ec81dead1b30999e1626eca589319a47f/sshpty.c#L112\r\nIf so, we implicitly have \"fix\" :-) If you have the opportunity to check, look at PGID for ssd in raw mode `ps  xao pid,ppid,pgid,sid,comm`.\r\n\r\n\r\n",
      "created_at": "2017-03-02T16:32:34Z",
      "updated_at": "2017-03-02T16:34:07Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov This is great.  Thanks very much for the information.  I will look into this and check with the CoreCLR group about adding CREATE_NEW_PROCESS_GROUP support.  \r\n\r\nBut I don't understand your comment about SSH RAW mode.  RAW mode doesn't seem to be well documented and it is not clear if it can be used with subsystems.  But even if it can it still passes the signal to the SSH process and I presume on to the SSHD remote session, and I want to prevent this.",
      "created_at": "2017-03-02T16:48:30Z",
      "updated_at": "2017-03-02T16:48:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I prefer the CoreCLR fix and you too - so that we can both forget about ssh raw mode even if it works :-)",
      "created_at": "2017-03-02T16:56:32Z",
      "updated_at": "2017-03-02T16:56:32Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "setpgid() doesn't allow the process group id to be set if the process has already started executing code.  In addition there are restrictions to what process group id it can be set to (must be a process in the same session).  I didn't see anywhere where you can create a process with a *new* group process id so I am not sure if this is possible.  In any case I need to make a request to .Net to see if CREATE_NEW_PROCESS_GROUP can be supported.  My guess is this can't be done in the beta 1 timeframe.",
      "created_at": "2017-03-16T23:34:26Z",
      "updated_at": "2017-03-16T23:34:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@PaulHigin  Maybe comments from http://pubs.opengroup.org/onlinepubs/009695399/functions/setpgid.html  will be useful.\r\n>The new processes call setpgid() to alter their own process groups after fork() but before exec.\r\n\r\n>Since it would be confusing to an application to have its process group change after it began executing (that is, after exec), and because the child process would already have adjusted its process group before this, the [EACCES] error was added to disallow this.\r\n",
      "created_at": "2017-03-17T03:52:51Z",
      "updated_at": "2017-03-17T03:53:03Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov Thanks again.  It looks like you can specify a new process group id if done at the right time\r\n\"The setpgid() function shall either join an existing process group or create a **new** process group...\"\r\nI have created an  issue/request for dotNet Standard to add this (CREATE_NEW_PROCESS_GROUP) support.",
      "created_at": "2017-03-22T22:33:45Z",
      "updated_at": "2017-03-22T22:33:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@PaulHigin Please add link on the Issue for tracking.",
      "created_at": "2017-03-23T04:10:55Z",
      "updated_at": "2017-03-23T04:10:55Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Here is the link:  https://github.com/dotnet/corefx/issues/17412\r\n",
      "created_at": "2017-03-23T15:33:51Z",
      "updated_at": "2017-03-23T15:33:51Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Follow up:  I have created an API request to dotnet/corefx/issues to add support for process creation flags.  It is not clear if this proposal will be accepted or if the dotnet/corefx team will have resources to review/implement.  But there are other options.  One is to review the existing Linux process creation code and submit a pull request to support process creation flags.  The other is to use Linux API PInvoke in PowerShell to do our own process creation on Linux.\r\n\r\nBut in any case I feel there is not enough time to solve this issue for beta-1 and so I am moving this issue to beta-2.  We will need to document this issue for the beta-1 release.",
      "created_at": "2017-03-24T18:50:55Z",
      "updated_at": "2017-03-24T18:50:55Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Totally fair to move out to `beta2`, especially given that we'll be focusing especially on remoting scenarios for that release. \r\n\r\nI'm going to work to engage with CoreFX with you, @PaulHigin. Let's chat offline. ",
      "created_at": "2017-03-24T22:58:29Z",
      "updated_at": "2017-03-24T22:58:29Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@PaulHigin it looks like this works now (with a weird error about the pipeline that doesn't show up locally). I still leave this to you to close, though, because it still looks like you're talking to CoreFX folks about this issue. \r\n\r\n```\r\n[jaiello-centos]: PS /home/jaiello> 1..100 | % { sleep 1; \"Output $_\" }\r\nOutput 1\r\nOutput 2\r\nOutput 3\r\nOutput 4\r\nThe pipeline has been stopped.\r\n    + CategoryInfo          : OperationStopped: (:) [], PipelineStoppedException\r\n    + FullyQualifiedErrorId : PipelineStopped\r\n```",
      "created_at": "2017-05-25T18:19:03Z",
      "updated_at": "2017-05-25T18:19:24Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "It currently only works on Windows clients.  It is still broken on Linux clients.",
      "created_at": "2017-05-25T18:38:54Z",
      "updated_at": "2017-05-25T18:38:54Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@PaulHigin Really? Like Linux SSH clients? Or Linux PowerShell clients? Both appear to work for me right now...",
      "created_at": "2017-05-25T20:22:35Z",
      "updated_at": "2017-05-25T20:22:35Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Yes.  On Linux/Mac OSes Ctrl+C is handled by the SSH child process and closes the process/connection.  We want to prevent this and let PSRP (PowerShell remoting protocol) handle the Ctrl+C signal.",
      "created_at": "2017-06-01T16:38:46Z",
      "updated_at": "2017-06-01T16:38:46Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Okay, I see it now. Not sure why I couldn't get it before, but this looks like it's *only* for PSRP over SSH. Not generic Linux SSH clients. For posterity, the error I see right now is:\r\n\r\n```\r\nThe background process reported an error with the following message: \"The named pipe target process has ended.\".\r\n    + CategoryInfo          : ResourceUnavailable: (:) [], ParentContainsErrorRecordException\r\n    + FullyQualifiedErrorId : System.Management.Automation.Remoting.PSRemotingDataStructureException\r\n```",
      "created_at": "2017-06-01T17:47:19Z",
      "updated_at": "2017-06-01T17:47:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@PaulHigin @vors If we put the remote pseudo-terminal in raw mode - is it resolve the problem?\r\n\r\n```ssh -t remotehost command args ``` - put local terminal in raw mode. Then PowerShell put remote pseudo-terminal in raw mode with [cfmakeraw](http://rachid.koucha.free.fr/tech_corner/pty_pdip.html) - Is it possible?",
      "created_at": "2017-06-02T04:33:52Z",
      "updated_at": "2017-06-02T04:33:52Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "This is now fixed for both Windows and Linux platforms.",
      "created_at": "2017-06-19T22:27:44Z",
      "updated_at": "2017-06-19T22:27:44Z"
    }
  ],
  "created_at": "2016-09-20T21:27:41Z",
  "labels": [
    "Issue-Bug",
    "OS-macOS",
    "OS-Linux",
    "Resolution-Fixed",
    "WG-Remoting"
  ],
  "number": 2321,
  "state": "closed",
  "title": "Ctrl+C doesn't work as expected with SSH Remoting",
  "updated_at": "2017-06-20T05:12:18Z"
}