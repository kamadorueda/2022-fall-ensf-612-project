{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2581",
  "author": "joeyaiello",
  "body": "> Copied from one of the top suggestions on UserVoice: https://windowsserver.uservoice.com/forums/301869-powershell/suggestions/11087646-implement-native-robocopy-cmdlet\r\n\r\nThis is a collection of suggestions derived from UserVoice to improve `Copy-Item` so that it's as robust and feature-laden as Robocopy. (Special thanks to everyone in the UserVoice thread. I'm going to try and summarize all your requests as succinctly as possible here.) The bolded items were particularly popular in the UserVoice thread (and I sorted roughly from most to least popular).\r\n\r\nNote that there was also some discussion about adding this functionality to a separate cmdlet so as to avoid complicating `Copy-Item` too much. I think there's probably a reasonable balance we can strike here.\r\n\r\n- [x] **Deal w/ long paths ([this works now!](https://blogs.msdn.microsoft.com/jeremykuhne/2016/07/30/net-4-6-2-and-long-paths-on-windows-10/))**\r\n- [ ] **Support \"retries on failed copies\" (`robocopy /R:n /W:n`)**\r\n- [ ] **Support mirroring of a directory tree (`robocopy /MIR`)**\r\n- [ ] **Ability to copy \"all file info\" (`robocopy /COPYALL`)**\r\n- [ ] **Support excluding certain files and directories (`robocopy /XF foo /XD bar`). (Question: what is needed here that isn't fulfilled by `Copy-Item -Exclude`?)**\r\n- [ ] **Support \"backup mode\" where any admin can copy items without explicit rights (`robocopy /B`)**\r\n- [ ] Support \"restartable mode\"/ability to resume file transfers (`robocopy /R`)\r\n- [ ] Support EFS RAW mode to copy encrypted files (`robocopy /EFSRAW`)\r\n- [ ] Support logging to a CSV file (`robocopy /LOG`). (Question: what is not already fulfilled by `ConvertTo-Csv`?)\r\n- [ ] Ability to not overwrite target files that match the source's last write date\r\n- [ ] Support multithreading (`robocopy /MT[:n]`)\r\n- [ ] Support throttling of file transfers for low-bandwidth connections (`robocopy /IPG:n` for \"inter-packet gap)\r\n- [ ] Support \"copy using unbuffered I/O\" (`robocopy /J`)\r\n- [ ] Support arbitrary Robocopy usage (`Copy-Item -Robocopy -RobocopySwitches`) (in my opinion, this isn't a great idea, especially given cross-plat)",
  "closed_at": null,
  "comments": [
    {
      "author": "RobCannon",
      "author_association": "NONE",
      "body": "Does long paths work with the shipping version of PowerShell?\n",
      "created_at": "2016-11-01T18:40:29Z",
      "updated_at": "2016-11-01T18:40:29Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@RobCannon Windows PowerShell in the Win10 Anniversary Update supports long paths, but you need to enable it for the OS (http://www.howtogeek.com/266621/how-to-make-windows-10-accept-file-paths-over-260-characters), PowerShell Core supports it by default\n",
      "created_at": "2016-11-01T20:32:47Z",
      "updated_at": "2016-11-01T20:33:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The first question is whether the functionality in core?\n\nIt consists of two parts:\n1. Interest of the community, I believe that here the answer is Yes.\n2. The ability to implement functionality in volume, which will retain the interest of the community. \nTo answer the second part we need to do an analysis of what robocopy keys we can effectively implement (considering porting). If the resulting list will be good for the community, then we can go further.\n",
      "created_at": "2016-11-02T11:05:26Z",
      "updated_at": "2016-11-02T11:05:26Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "How about just a `-NoOverwrite` to not overwrite target files, period ... (`robocopy /XC /XN /XO`??)",
      "created_at": "2016-11-23T18:43:43Z",
      "updated_at": "2016-11-23T18:50:32Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I think `-NoClobber` would be more idiomatic.",
      "created_at": "2016-11-23T19:37:16Z",
      "updated_at": "2016-11-23T19:37:16Z"
    },
    {
      "author": "Explisiv",
      "author_association": "NONE",
      "body": "we need the options like \"-ACL permissionsOnly\"  & \"-NoACL\" & \"-ProgressBar $true\" and\r\n /mir -MirrorSource",
      "created_at": "2017-11-30T01:52:35Z",
      "updated_at": "2017-11-30T01:52:35Z"
    },
    {
      "author": "Kriegel",
      "author_association": "NONE",
      "body": "I know many, many admins using Robocopy to do backups.\r\n\r\nI allways say: if you do not check the integrity of your source <-> destination it is a copy not a backup!\r\n\r\nSo a verify mechanismm must / should be in the Process. This can be done by a separate cmdlet like Get-FileHash. But this should do it VERY fast and multithreded and IO / Network recource respectful.\r\n\r\nSo the needs to verify are very similar to Robocopy and they should work together.\r\nSo I think it also should be in the Robocopy box.",
      "created_at": "2020-03-25T12:00:22Z",
      "updated_at": "2020-03-30T19:34:08Z"
    },
    {
      "author": "Kriegel",
      "author_association": "NONE",
      "body": "The Runtime Team is discussing a File.CopyAsync method here \r\nhttps://github.com/dotnet/runtime/issues/20697\r\nI think @JeremyKuhne is the right guy to ask.",
      "created_at": "2020-03-27T17:40:47Z",
      "updated_at": "2020-03-27T17:40:47Z"
    },
    {
      "author": "juvtib",
      "author_association": "NONE",
      "body": "One way to move this forward without waiting for https://github.com/PowerShell/PowerShell/issues/5785 , is to try wrapping robocopy with [Crescendo](https://devblogs.microsoft.com/powershell/announcing-powershell-crescendo-preview-1/). \r\n",
      "created_at": "2020-12-23T19:13:46Z",
      "updated_at": "2020-12-23T19:13:46Z"
    },
    {
      "author": "RobCannon",
      "author_association": "NONE",
      "body": "But that would not be cross-platform.",
      "created_at": "2021-01-04T13:57:42Z",
      "updated_at": "2021-01-04T13:57:42Z"
    }
  ],
  "created_at": "2016-11-01T18:28:13Z",
  "number": 2581,
  "state": "open",
  "title": "Improve Copy-Item to provide parity with Robocopy",
  "updated_at": "2021-11-23T11:44:04Z"
}