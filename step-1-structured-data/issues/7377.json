{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7377",
  "author": "alx9r",
  "body": "Usually when a module is specified using `InitialSessionState.ImportPSModule()` and `Runspace.Open()` is invoked that module is imported into the runspace.  It is then output when `Get-Module` is invoked in the runspace.  Sometimes, however, the specified module is not imported (or at least is not available using `Get-Module`) despite that `Runspace.Open()` succeeded.\r\n\r\nThere seems to be variation from run-to-run of this phenomenon:\r\n\r\n* some modules never import successfully\r\n* some modules always import successfully\r\n* some modules import successfully only sometimes\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nforeach ( $module in Get-Module -ListAvailable )\r\n{\r\n    \"Testing Module $($module.Name)\"\r\n    $initialSessionState = [initialsessionstate]::CreateDefault()\r\n    $initialSessionState.ImportPSModule($module.Name)\r\n    $runspace = [runspacefactory]::CreateRunspace($initialSessionState)\r\n    $runspace.Open()\r\n    $powershell = [powershell]::Create().AddScript(\"Get-Module $($module.Name)\")\r\n    $powershell.Runspace = $runspace\r\n    if ( -not $powershell.Invoke() )\r\n    {\r\n        Write-Error 'Module not imported.'\r\n    }\r\n    else {\r\n        'success'\r\n    }\r\n}\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nTesting Module CimCmdlets\r\nsuccess\r\nTesting Module Microsoft.PowerShell.Archive\r\nsuccess\r\nTesting Module Microsoft.PowerShell.Diagnostics\r\nsuccess\r\nTesting Module Microsoft.PowerShell.Host\r\nsuccess\r\nTesting Module Microsoft.PowerShell.Management\r\nsuccess\r\nTesting Module Microsoft.PowerShell.Security\r\nsuccess\r\nTesting Module Microsoft.PowerShell.Utility\r\nsuccess\r\nTesting Module Microsoft.WSMan.Management\r\nsuccess\r\nTesting Module PackageManagement\r\nsuccess\r\nTesting Module PowerShellGet\r\nsuccess\r\nTesting Module PSDesiredStateConfiguration\r\nsuccess\r\nTesting Module PSDiagnostics\r\nsuccess\r\nTesting Module PSReadLine\r\nsuccess\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nTesting Module CimCmdlets\r\nsuccess\r\nTesting Module Microsoft.PowerShell.Archive\r\nsuccess\r\nTesting Module Microsoft.PowerShell.Diagnostics\r\nC:\\users\\un1\\Desktop\\test2.ps1 : Module not imported.\r\n+ CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\r\n+ FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,test\r\n2.ps1\r\n\r\nTesting Module Microsoft.PowerShell.Host\r\nC:\\users\\un1\\Desktop\\test2.ps1 : Module not imported.\r\n+ CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\r\n+ FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,test\r\n2.ps1\r\n\r\nTesting Module Microsoft.PowerShell.Management\r\nC:\\users\\un1\\Desktop\\test2.ps1 : Module not imported.\r\n+ CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\r\n+ FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,test\r\n2.ps1\r\n\r\nTesting Module Microsoft.PowerShell.Security\r\nC:\\users\\un1\\Desktop\\test2.ps1 : Module not imported.\r\n+ CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\r\n+ FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,test\r\n2.ps1\r\n\r\nTesting Module Microsoft.PowerShell.Utility\r\nC:\\users\\un1\\Desktop\\test2.ps1 : Module not imported.\r\n+ CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\r\n+ FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,test\r\n2.ps1\r\n\r\nTesting Module Microsoft.WSMan.Management\r\nC:\\users\\un1\\Desktop\\test2.ps1 : Module not imported.\r\n+ CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\r\n+ FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,test\r\n2.ps1\r\n\r\nTesting Module PackageManagement\r\nsuccess\r\nTesting Module PowerShellGet\r\nsuccess\r\nTesting Module PSDesiredStateConfiguration\r\nsuccess\r\nTesting Module PSDiagnostics\r\nsuccess\r\nTesting Module PSReadLine\r\nsuccess\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.4\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0-preview.4\r\nOS                             Microsoft Windows 6.3.9600 \r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "Here is a related repro where the `PowerShellGet` module is specified to multiple runspaces that are opened concurrenly.  `PowerShellGet` becomes available in some of the runspaces but not others.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nAdd-Type '\r\nusing System.Threading.Tasks;\r\nusing System.Management.Automation.Runspaces;\r\n\r\npublic static class RunspaceOpener\r\n{\r\n    public static Task OpenAsync(Runspace runspace)\r\n    {\r\n        return Task.Factory.StartNew(runspace.Open);\r\n    }\r\n}\r\n'\r\n$moduleName = 'PowerShellGet'\r\n$p = [System.Environment]::ProcessorCount\r\n$runspace = 1..$p | % {\r\n    $initialSessionState = [initialsessionstate]::CreateDefault()\r\n    $initialSessionState.ImportPSModule($moduleName)\r\n    [runspacefactory]::CreateRunspace($initialSessionState)\r\n}\r\n\r\n$opener = $runspace | % { [RunspaceOpener]::OpenAsync($_) }\r\n[System.Threading.Tasks.Task]::WaitAll($opener)\r\n\r\n$powershell = $runspace |\r\n    % {\r\n        $ps = [powershell]::Create().AddScript(\"Get-Module $moduleName\")\r\n        $ps.Runspace = $_\r\n        $ps\r\n    }\r\n\r\n$r = $powershell.Invoke()\r\n\r\nif ( $r.Count -ne $p )\r\n{\r\n    Write-Error \"expected $p, got $($r.Count)\"\r\n}\r\nelse\r\n{\r\n    \"success\"\r\n}\r\n```\r\n\r\nExpected Behavior\r\n--------------\r\n\r\n```none\r\nsuccess\r\n```\r\n\r\nActual Behavior\r\n-------------\r\n\r\n```none\r\nC:\\Users\\un1\\Desktop\\test.ps1 : expected 16, got 11\r\n+ CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\r\n+ FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,test.ps1\r\n```\r\n",
      "created_at": "2018-07-27T02:03:30Z",
      "updated_at": "2018-07-27T02:03:30Z"
    }
  ],
  "created_at": "2018-07-27T01:36:38Z",
  "number": 7377,
  "state": "open",
  "title": "Runspace.Open() sometimes completes without the specified ImportPSModules becoming available",
  "updated_at": "2018-07-27T06:07:32Z"
}