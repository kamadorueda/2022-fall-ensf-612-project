{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7813",
  "author": "vexx32",
  "body": "## PR Summary\r\n\r\nThis has been split off of #7509 at request of @iSazonov as that PR has become overly complex, and this portion of the PR was already approved by Powershell Committee. Re-submitting instead of working with #7575 due to messy rebase shenanigans that just... made a mess. \r\n\r\nThis fixes #3313.\r\n\r\n**Brief summary:**\r\n\r\nAdds the following numeric literal suffixes:\r\n\r\n* 'u' suffix (uint/ulong)\r\n* 's' suffix (short)\r\n* 'ul' suffix (ulong)\r\n* 'us' suffix (ushort)\r\n\r\nAdds the following type accelerators:\r\n\r\n* `[short]`\r\n* `[ushort]`\r\n* `[uint]`\r\n* `[ulong]`\r\n\r\nAnd of course, adds tests for all the above.\r\n\r\n**Comprehensive Summary:**\r\n\r\n* Implements type suffixes `s` (short) and `u` (unsigned) to complement the existing `l` suffix.\r\n  * Suffixes can be combined as `us` or `ul` to result in `ushort` or `ulong` types.\r\n* When `u` suffix is used alone, `uint` will be returned *unless* value exceeds `uint.MaxValue`, in which case it will automatically resolve as `ulong` instead.\r\n* Adds new type accelerators to fit new numeric types better into the PS ecosystem:\r\n  * `[short]` => `Int16`\r\n  * `[ushort]` => `UInt16`\r\n  * `[uint]` => `UInt32`\r\n  * `[ulong]` => `UInt64`\r\n* Maintains parity with existing `l` / `L` suffix, where it will also perform rounding functions when applied to a `real` literal while also ensuring it still returns an appropriate `uint` or `ulong` value: `105.5u => 106`\r\n* Defines a new `[Flags]` enum `NumberSuffixFlags` that takes care of one-or-more numerical type suffixes.\r\n* Use of `u`, `l`, `s` and valid combinations thereof **will** error out and register as an invalid numeric literal if their value after multiplication exceeds the type(s) contraints. \r\n  * This is intentional; if the user specifies a value that cannot be satisfied, such as `500sgb` (`500gb -as Int16`)then the parser should not be expected to figure out what they meant. \r\n* Changes `strNum` parameter of `TryGetNumberValue` to `ReadOnlySpan<char>` to reduce the number of string allocations required for parsing.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed - Issue link:\r\n- **Testing - New and feature**\r\n    - [ ] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [ ] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2018-09-28T20:27:33Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov I think this is tidier now. *shudders* I need to take a rebasing class! \ud83d\ude1d \r\n\r\nThe remaining build errors appear to be build environment errors unrelated to this PR. ^^\r\n\r\nThe CodeFactor issues are (I think) not particularly serious, and I have a follow-up PR that will address the vast majority of those coming shortly.",
      "created_at": "2018-09-18T19:20:10Z",
      "updated_at": "2018-09-18T19:20:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 To rebase you can use the pattern:\r\n```powershell\r\n# rebase pull request on top of master\r\ngit chechout <branch>\r\ngit fetch PowerShell master\r\ngit pull --rebase PowerShell master\r\ngit push -f\r\n```\r\nYou can catch a conflict but it is another story.",
      "created_at": "2018-09-19T11:59:12Z",
      "updated_at": "2018-09-19T11:59:12Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Reopened to restart CIs. Looks all good, I guess the Linux issues were resolved.\r\n\r\n@iSazonov I have never had the good fortune to get a rebase to work without painstaking editing at every step along the way. Not sure why... I think I must be doing it wrong somehow. I need to read up on it! \ud83d\ude04 ",
      "created_at": "2018-09-19T23:39:39Z",
      "updated_at": "2018-09-19T23:39:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Could you please look th PR? @vexx32 want to continue working on the code in follow PR.",
      "created_at": "2018-09-26T05:55:19Z",
      "updated_at": "2018-09-26T05:55:19Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Marked this PR with `Breaking-Change` label. The new type suffix makes some command names be parsed as numbers now, for example:\r\n```\r\nfunction 100u { \"Yay\" }\r\n100u\r\n```",
      "created_at": "2018-09-27T23:53:26Z",
      "updated_at": "2018-09-27T23:53:26Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@vexx32 I'm trying to tidy the PR description because the documentation work that follows up will need the accurate information.\r\n\r\n> 'u' suffix (uint32)\r\n\r\nBy looking into the code, the suffix `u` doesn't guarantee `uint32`. It tries to fit the literal value into `uin32` first, but if it fails, `ulong` will be used. Is taht implemetnation intentional? If so, please update the description.\r\n\r\nI copied the `Comprehensive Summary` from #7509 as it's more relevant to this PR. But the summary is a little outdated compared with the implementation. Can you please update the summary? Thanks!",
      "created_at": "2018-09-28T00:07:41Z",
      "updated_at": "2018-09-28T00:07:41Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Yes, the automatic step-up to `ulong` is intentional. I felt that because `u` can be read simply as \"unsigned\" it makes the most sense to apply it in keeping with the existing patterns as best it can (i.e., a large integer currently will parse as long; thus, a large unsigned integer converts up to `ulong` when it exceeds `uint32` bounds). I'll update the description and try to make sure everything fits with how it's intended to be. \ud83d\ude04 ",
      "created_at": "2018-09-28T00:50:52Z",
      "updated_at": "2018-09-28T00:50:52Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw I think I got them all, but let me know if I missed anything! \ud83d\ude04 \r\n\r\nPR description has been cleaned up and made hopefully useful as a jumping off point for some proper documentation.",
      "created_at": "2018-09-28T01:49:58Z",
      "updated_at": "2018-09-28T01:51:35Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Aww, I was enjoying the all-green. Appveyor's failing on a Test-Connection due to timeout.",
      "created_at": "2018-09-28T13:47:34Z",
      "updated_at": "2018-09-28T13:47:49Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yay! \ud83d\ude04 \r\n\r\nNow I can get the next one ready for Hacktoberfest \ud83d\ude09 \r\n\r\nAppVeyor's still having difficulty with Test-Connection, it seems...",
      "created_at": "2018-09-28T18:04:13Z",
      "updated_at": "2018-09-28T18:04:13Z"
    }
  ],
  "created_at": "2018-09-18T17:10:42Z",
  "number": 7813,
  "state": "closed",
  "title": "Add C#-style type accelerators and suffixes for ushort, uint, ulong, and short literals",
  "updated_at": "2018-10-15T21:44:59Z"
}