{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6618",
  "author": "ffeldhaus",
  "body": "Currently the WebCmdlets only allow to save the content of a response via `-OutFile` to a filename specified when invoking the Cmdlets. As many services are responding with the [`Content-Disposition` header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition), which contains details of the response content, including a filename, it would be good if the WebCmdlets would allow to save a file to a path specified e.g. via a parameter `-OutPath` but using the filename from the `Content-Disposition` header. This would be similar to the behaviour of `curl`, `wget` or Web Browsers.",
  "closed_at": "2019-01-24T01:53:35Z",
  "comments": [
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I do not want to overload `Invoke-WebRequest` and `Invoke-RestMethod` with download specific functionality. Instead, I would like to consider this functionality in the design of the new Download Specific cmdlet.\r\n\r\nPlease comment on PowerShell/PowerShell-RFC#124\r\n\r\nThe current plan doesn't include using Content-Disposition, but I'm open to guidance on how to incorporate that for HTTP/HTTPS.",
      "created_at": "2018-04-11T00:22:58Z",
      "updated_at": "2018-04-11T00:22:58Z"
    },
    {
      "author": "ffeldhaus",
      "author_association": "CONTRIBUTOR",
      "body": "@markekraus I like the suggestion in the RFC you mentioned, but in my opinion what you are suggesting there is something like a download utility similar to `wget` or a download manager (e.g. something like CloudBerry, Cyberduck or others).\r\n\r\nIn my opinion the WebCmdlets are about handling Web Requests and their responses. The response to a POST, PUT, GET or DELETE request can contain content and the `Content-Disposition` header is adding information about the content such as a filename which should be used to save the content. A download utility, as you suggested in the RFC, should be targeted at downloading files (e.g. via a HTTP GET request) and not handling responses of POST, PUT, GET or DELETE requests, which may contain files in their responses.\r\n\r\n[As the WebCmdlets already include functionality to save the content to a file via the `-OutFile` parameter](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-webrequest?view=powershell-6), I don't think we are overloading any functionality here.\r\n\r\nI noted that `-OutFile` accepts String as input, and only the documentation states that the parameter should either be path plus filename or only filename (and then `$PWD` will be used as path).\r\n\r\nTherefore my suggestion is, to extend the current behaviour and documentation:\r\n\r\n- Allow the `-OutFile` parameter to contain either a path OR a path and a filename OR only a filename\r\n- In case the string specified is a directory, the filename will be extracted from the `Content-Disposition` header if available. If not available, the filename will be the last part of the URL without query parameters (e.g. for https://example.org/path/to/file.txt it would be `file.txt`)\r\n\r\nThis would bring the WebCmdlets closer to the `curl` behavior and would meet what several users are expecting from the WebCmdlets when using the `-OutFile` parameter (see discussions [on StackOverflow](https://stackoverflow.com/questions/25125818/powershell-invoke-webrequest-how-to-automatically-use-original-file-name), [Reddit](https://www.reddit.com/r/PowerShell/comments/30d8uu/downloading_a_file_from_a_redirected_link_using/).\r\n\r\nThis is an example how curl handles the filename of the `Content-Disposition` header (parameter `-O` is required to save to file and `-J` to use extract the filename from the `Content-Disposition` header instead from the URL:\r\n\r\n        curl http://test.greenbytes.de/tech/tc2231/attwithasciifilename35.asis -O -J -v\r\n      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                     Dload  Upload   Total   Spent    Left  Speed\r\n      0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0*   Trying 217.91.35.233...\r\n    * TCP_NODELAY set\r\n    * Connected to test.greenbytes.de (217.91.35.233) port 80 (#0)\r\n    > GET /tech/tc2231/attwithasciifilename35.asis HTTP/1.1\r\n    > Host: test.greenbytes.de\r\n    > User-Agent: curl/7.54.0\r\n    > Accept: */*\r\n    > \r\n    < HTTP/1.1 200 OK\r\n    < Date: Thu, 12 Apr 2018 21:31:00 GMT\r\n    < Server: Apache/2.4.33 (Ubuntu)\r\n    < Cache-Control: no-cache\r\n    < Content-Disposition: attachment; filename=\"00000000001111111111222222222233333\"\r\n    < Upgrade: h2\r\n    < Connection: Upgrade\r\n    < Cache-Control: max-age=3600\r\n    < Expires: Thu, 12 Apr 2018 22:31:00 GMT\r\n    < Vary: Accept-Encoding\r\n    < Content-Length: 527\r\n    < Content-Type: text/html; charset=\"ISO-8859-1\"\r\n    < \r\n    { [527 bytes data]\r\n    100   527  100   527    0     0  10075      0 --:--:-- --:--:-- --:--:-- 10134\r\n    * Connection #0 to host test.greenbytes.de left intact\r\n    curl: Saved to filename '00000000001111111111222222222233333'\r\n\r\n[This page has several examples for testing the `Content-Disposition` header](http://test.greenbytes.de/tech/tc2231/).",
      "created_at": "2018-04-12T21:37:36Z",
      "updated_at": "2018-04-12T21:37:36Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Rather than overload `-OutFile`, it may be better to have a `-OutPath`parameter that only takes a directory path.",
      "created_at": "2018-04-12T21:45:17Z",
      "updated_at": "2018-04-12T21:45:17Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I'm an 100% against adding this.\r\n\r\nThere are way too many download specific requests for these cmdlets that are better served on the new cmdlet. The code for dealing with downloads in the web cmdlets is not ideal because all of the value of these cmdlets is focused on proccessing web responses, not downloaded content.\r\n\r\nCmdlets and functions should \"do one thing\". The web cmdlets already provide a download feature as a convenince, and perhaps that was a mistake in the initial design.. Any further download features should be focued on the new download specific cmdlets.",
      "created_at": "2018-04-13T03:48:37Z",
      "updated_at": "2018-04-13T03:48:37Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Also. the existing web cmdlets do not need to reach full parity with curl. PowerShell does. curl is overloaded and and that caries with it a ton of baggage.\r\n\r\nprocessing web content, downloading binary data (this includes text downloads), and processing web streams are 3 distinct tasks. Yes, they are sharing a common protocol, HTTP. But that protocol is overloaded with a bunch of different functionalities. \r\n\r\nPowerShell can and should accommodate those functions. But I see no compelling reason why they should all be done in the existing cmdlets. It makes them too complex and difficult to change. Adding more download features makes it harder to make feature changes that deal with processing web content, and adding features to process web content makes it harder to deal  with downloads.\r\n\r\nWe can avoid that coupling behavior by using separate cmdlets.",
      "created_at": "2018-04-13T03:53:26Z",
      "updated_at": "2018-04-13T03:54:38Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT Even with that, we now have to add logic in these cmdlets to deal with naming when content-distposition isn't available, we have to figure out the behavior when a file with the chosen name already exists. Do we overwrite? Do we error out? fdo we add an `-AllowClobber`? We have to now complicate the resume feature and extend run time checks to include more mutex params. It's just too complex and too restricting for too little gain, IMO. With the use of `-PassThru` or `-ResponseHeadersVariable` the user has access to the content-dispostiion header and can rename the file if they wish.",
      "created_at": "2018-04-13T04:08:08Z",
      "updated_at": "2018-04-13T04:10:17Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@markekraus I'm with you 100% that we want full parity with curl, but that doesn't mean everything jammed into just one or two cmdlets.  ",
      "created_at": "2018-04-13T04:12:10Z",
      "updated_at": "2018-04-13T04:12:10Z"
    },
    {
      "author": "ffeldhaus",
      "author_association": "CONTRIBUTOR",
      "body": "@markekraus I don't understand why you insist that handling attachments is something which needs to be done in a different Cmdlet. This issue is not about downloading a file. It is about extracting the filename for the response content from the `Content-Disposition` header, which is considerably different. A user may need to issue a complex Web Request with HTTP Header, Body and a Method different than GET (most often POST, but also PUT or DELETE) and where the response happens to contain an attachment which should be saved locally. As `-OutFile` already exists as a parameter, this issue is only about allowing to use the filename provided in the response instead of specifying it upfront. **This issue is not about adding download functionality to WebCmdlets**.\r\n\r\nThe Cmdlet you proposed in the RFC is about downloading (e.g. retrieving) a file. I agree, that functionality specific to downloading files could (and probably should) be handled in a different Cmdlet and that also includes extracting the filename from the `Content-Disposition` header. There are some features which would really bloat the existing WebCmdlets like multipart downloads (e.g. via multiple parallel HTTP Range Requests), Async IO for saving files, resumable downloads, protocols other than HTTP and probably several more features. Saving an attachment in resposne to a complex Web Request is not something which requires a different Cmdlet in my opinion, as it would bloat the Download Cmdlet and require it to allow specifying HTTP Header, Body and different HTTP Methods which are what the existing WebCmdlets seem to be designed for. The Download Cmdlet could reuse the existing WebCmdlets and enhance them with additional features for downloading files.\r\n\r\nThere is a good reason, that both `wget` and `curl` exist and are both used in different uses cases. `wget` handles downloading of files, similar to what you suggest. `curl` handles Web Requests and their responses.\r\n\r\nI'd be glad if others would add their view here. It may also be a good idea to exactly specify what the community (and the [PowerShell Committee](https://github.com/PowerShell/PowerShell/blob/master/docs/community/governance.md#powershell-committee)) want to achieve with the existing WebCmdlets and what they do not want to achieve with them, maybe even through dedicated RFCs for the WebCmdlets.",
      "created_at": "2018-04-13T19:22:31Z",
      "updated_at": "2018-04-13T19:22:31Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": ">  I don't understand why you insist that handling attachments is something which needs to be done in a different Cmdlet.\r\n\r\nI know I sound like a broken record, but: All of the value of the web cmdlets derives from their ability process web content. That is to say, doing meaningful things with HTML, XML, JSON, and plain-text. Their code is geared towards it. Adding features to support downloads or \"attachments\" or any other way you want to paint them is a completely different functionality. That is why. \r\n\r\nYou can already rename the file after the fact by inspecting the content disposition header on the response. So this lack of convenience is non-blocking. But, adding this feature is a non-trivial amount of work that requires limiting the cmdlets' flexibility to extend and improve features relevant to their core functionality.\r\n\r\nIf you think you may need POST functionality in order to retrieve remote files, please comment on the RFC.",
      "created_at": "2018-04-14T00:21:59Z",
      "updated_at": "2018-04-14T00:22:51Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "As I mentioned here https://github.com/PowerShell/PowerShell/issues/6537#issuecomment-377690052, with Invoke-WebRequest we can already achieve 2 of 3 things, so the single-responsibility principle is not strictly followed already. Therefore, adding the third (`1a. without specifying destination file name`) with `-Save` would not be in such a violation that we require a totally new cmdlet; now that Invoke-WebRequest is used quite heavily used in the wild.",
      "created_at": "2018-04-17T15:28:38Z",
      "updated_at": "2018-04-17T15:29:14Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "> with Invoke-WebRequest we can already achieve 2 of 3 things\r\n\r\nAnd that is a design decision that has not served us well.",
      "created_at": "2018-04-17T15:57:05Z",
      "updated_at": "2018-04-17T15:57:05Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I'm closing this as the conversation has gone stale and there is decent enough consensus and reason not to implement this in the existing cmdlets.",
      "created_at": "2019-01-24T01:53:35Z",
      "updated_at": "2019-01-24T01:53:35Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> decent enough consensus\r\n\r\nWith the recent addition of #11671, we now have 3 distinct requests to implement the same thing.\r\n\r\nI find [@ffeldhaus proposal](https://github.com/PowerShell/PowerShell/issues/6618#issuecomment-380952156) and [reasoning](https://github.com/PowerShell/PowerShell/issues/6618#issuecomment-381237367) convincing: this is not about \"feature creep\" or \"responsibility creep\", this is about a simple, non-breaking enhancement to an _existing_ feature that has great value.\r\n\r\nI suggest we revisit this.",
      "created_at": "2020-01-24T13:26:56Z",
      "updated_at": "2020-01-24T13:26:56Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "If someone is willing to take this on: Implementing it as an experimental feature has now been green-lighted: https://github.com/PowerShell/PowerShell/issues/11671#issuecomment-578904101",
      "created_at": "2020-01-27T19:50:26Z",
      "updated_at": "2020-01-27T19:50:26Z"
    }
  ],
  "created_at": "2018-04-10T21:55:30Z",
  "number": 6618,
  "state": "closed",
  "title": "Implement WebCdmlets to save response content to filename specified in Content-Disposition",
  "updated_at": "2020-01-27T19:50:27Z"
}