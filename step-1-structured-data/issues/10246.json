{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10246",
  "author": "ThreeFive-O",
  "body": "# PR Summary\r\n\r\nThis PR will fix the underlying architecture of the Send-MailMessage cmdlet using the actively maintained `MailKit` SMTP client.\r\nNote: `System.Net.Mail.SmtpClient` receives no further development and only supports STARTTLS secure connections.\r\n\r\n**Enhancements**\r\n- Fix #7591: Pipelining into the cmdlet is now supported\r\n- SMTPS is now supported\r\n\r\n**Benefits of MailKit**\r\n- Modern actively maintained dependency (would fix #10015)\r\n- Secure connection upgrades from insecure connections using STARTTLS is supported implicitly (no parameter has to be specified)\r\n- Secure connections over SSL/TLS is supported (Gmail, Yahoo, ... see #8987)\r\n- MailKit and MimeKit allow easier implementation of missing functionality (see #9191)\r\n\r\n**Backward compatibility and breaking changes**\r\nAll parameters are left as they are, BUT\r\n- `Credential` parameter is the only way to provide credentials right now. `System.Net.Mail.SmtpClient` has the ability to get the default credentials from Windows. \r\n-> Requires change in documentation; X-plat credential provider solution for PowerShell 7 might be the solution to that.\r\n\r\n- `DeliverNotificationOption` is implemented, but the functionality should be reviewed as all tested platforms either don't support Delivery Status Notfication (DSN) (e.g. Gmail, GMX, Yahoo) or ignore the setting (Outlook.com - btw the only SMTP server I've came accross which reports DSN capability).\r\n-> Subject to discuss in RFC to deprecate this parameter.\r\n\r\n- `Encoding` parameter no longer has any influence on subject/body encoding as this is handled by MimeKit\r\n-> Requires further research, but may be subject to deprecate.\r\n\r\n- `UseSsl` is no longer mandatory to allow STARTTLS upgrade from an insecure connection. The parameter is now used to explicitly state the the entire connection should be wrapped in a SSL/TLS connections, also known as SMTPS. -> Using Port 0 (default - automatic port selection will use Port 465 for `UseSsl` but can of course be overridden with any other port number; If `UseSsl` is not specified the default port 25 for SMTP is used, although most STARTTLS endpoints use port 587).\r\n-> Critical breaking change for automated scripts; Subject to discuss\r\nPossible workaround: Use another parameter for SMTPS functionality and keep `UseSsl` parameter for STARTTLS (though it wouldn't have any relevance in the code and would be a non-functional parameter like `Encoding`, though not breaking any scripts)\r\n\r\n**Test infrastructure**\r\nThe Pester tests use netDumbster which only supports insecure connections.\r\nSTARTTLS and SMTPS functionality have been tested interactively against:\r\n- Outlook.com (STARTTLS 587)\r\n- Gmail.com (SMTPS 465)\r\n- Yahoo.com (SMTPS 465 and STARTTLS 587)\r\n\r\n## PR Context\r\n\r\nAs of #9178 is marked as obsolete and an RFC PR PowerShell/PowerShell-RFC#160 was opened to discuess the future of the cmdlet.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2019-11-04T00:00:19Z",
  "comments": [
    {
      "author": "ThreeFive-O",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13 Tests for `Remoting` are failing for Windows ElevatedPesterTests due to missing dependencies:\r\n`New-PSSession : [localhost] Processing data from remote server localhost failed with the following error message: Could not load file or assembly 'MailKit, Version=2.2.0.0, Culture=neutral, PublicKeyToken=4e064fe7c44a8f1b'. The system cannot find the file specified. For more information, see the about_Remote_Troubleshooting Help topic.`\r\nCould you please point me in the right direction how to resolve this dependency issue? Thank you very much.",
      "created_at": "2019-07-31T08:28:03Z",
      "updated_at": "2019-07-31T08:28:03Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "cc @SteveL-MSFT  about if this is the right place for this",
      "created_at": "2019-08-02T20:41:02Z",
      "updated_at": "2019-08-02T20:41:02Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "We have a list of Assemblies trusted for remoting here https://github.com/PowerShell/PowerShell-Native/blob/534965cb5f5657a019815216a09de419dc6eec91/src/powershell-native/nativemsh/pwrshcommon/pwrshcommon.cpp#L671\r\n\r\nWork with @adityapatwardhan  on how you can progress.  My proposal would be that we publish a pre-release of PowerShell-Native with your changes and you can work off of that.\r\n\n\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/11524380?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell-Native\">PowerShell/PowerShell-Native</a></strong></div><div>Contribute to PowerShell/PowerShell-Native development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2019-08-02T20:48:49Z",
      "updated_at": "2019-08-02T20:48:51Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, we appreciate this work, but ask that this be a module published to PSGallery.  A decision whether this ships in PowerShell will be decided later.\r\n\r\n- We have concerns about potential for breaking changes (types, functionality)\r\n- Size concerns bringing in another assembly\r\n- In general, our direction is to have more modules/cmdlets validated via PSGallery before deciding it should be shipped with PowerShell\r\n",
      "created_at": "2019-08-07T22:18:18Z",
      "updated_at": "2019-08-07T22:18:18Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as stale because it has been marked as requiring author feedback but has not had any activity for **30 days**. It will be closed if no further activity occurs **within 10 days of this comment**.",
      "created_at": "2019-10-25T00:00:15Z",
      "updated_at": "2019-10-25T00:00:15Z"
    },
    {
      "author": "FireInWinter",
      "author_association": "NONE",
      "body": "I don't agree that existing functionality should be moved to a separate module.  It's too bad SMTPClient was deprecated, but this seems like a punishment to the community to remove a builtin feature and put it elsewhere. ",
      "created_at": "2020-02-27T00:53:04Z",
      "updated_at": "2020-02-27T00:53:04Z"
    }
  ],
  "created_at": "2019-07-29T13:56:39Z",
  "number": 10246,
  "state": "closed",
  "title": "Rework Send-MailMessage cmdlet with MailKit",
  "updated_at": "2020-02-27T00:53:06Z"
}