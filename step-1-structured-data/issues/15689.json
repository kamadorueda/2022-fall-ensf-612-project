{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15689",
  "author": "mamidenn",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n### Steps to reproduce\r\n\r\n* Create a class explicitly implementing an interface so that it has a property and a method of the same name.\r\n```ps1\r\nAdd-Type @\"\r\npublic interface MyInterface\r\n{\r\n    string Turncoat { get; }\r\n}\r\n\r\npublic class MyClass : MyInterface\r\n{\r\n    string MyInterface.Turncoat { get { return \"Property\"; } }\r\n\r\n    public string Turncoat() { return \"Method\"; }\r\n}\r\n\"@\r\n```\r\n* Create an object of that class and try to call the method\r\n```ps1\r\n$myObject = [MyClass]::new()\r\n$myObject.Turncoat()\r\n```\r\n\r\nThe method is in kind of a limbo-state. `$myObject | Get-Member` lists it, it can be called via Reflection, but simply calling it like `$myObject.TurnCoat()` yields an `InvalidOperation`.\r\n\r\n### Expected behavior\r\n\r\n1. I expect to be able to call the method\r\n\r\n```ps1\r\n$myObject.Turncoat()\r\n```\r\n```console\r\nMethod\r\n```\r\n\r\n2. I expect *not* to be able to access the property (and get the method's info instead)\r\n```ps1\r\n$myObject.Turncoat\r\n```\r\n```console\r\nMemberType          : Method\r\nOverloadDefinitions : {string Turncoat()}\r\nTypeNameOfValue     : System.Management.Automation.PSMethod\r\nValue               : string Turncoat()\r\nName                : Turncoat\r\nIsInstance          : True\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n1. I am *not* able to call the method\r\n```ps1\r\n$myObject.Turncoat()\r\n```\r\n```console\r\nMethod invocation failed because [MyClass] does not contain a method named 'Turncoat'.\r\n```\r\n\r\n2. I *am* able to access the property\r\n```ps1\r\n$myObject.Turncoat\r\n```\r\n```console\r\nProperty\r\n```\r\n\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Linux 5.4.72-microsoft-standard-WSL2 #1 SMP Wed Oct 28 23:40:43 UTC 2020\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "mamidenn",
      "author_association": "NONE",
      "body": "Vaguely related to #8235.",
      "created_at": "2021-06-29T14:08:23Z",
      "updated_at": "2021-06-29T14:08:23Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Note that changing this would be a breaking change.  An example is `JProperty` from Newtonsoft.Json:\r\n\r\n```csharp\r\nclass JProperty\r\n{\r\n    // inherited\r\n    T Value<T>(object key);\r\n\r\n    JToken Value { get; set; }\r\n}\r\n```\r\n\r\nMaybe the binder should prioritize methods over explicitly implemented interface properties rather than *any* property.  Though that would still be breaking change, I can't quickly find an example of an existing API with a realistic use case that would be broken.\r\n\r\nPersonally I think this comes up infrequently enough that a workaround of `$obj.psobject.Methods['MethodName'].Invoke($args)` is probably good enough.",
      "created_at": "2021-06-29T14:29:07Z",
      "updated_at": "2021-06-29T14:29:07Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That JProperty example also mightn't be as much of a problem if #12412 was merged, since you could specify the type parameter for the method.... at least I _think_ that'd work properly \ud83e\udd14 ",
      "created_at": "2021-06-29T14:52:47Z",
      "updated_at": "2021-06-29T14:53:06Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> That JProperty example also mightn't be as much of a problem if #12412 was merged, since you could specify the type parameter for the method.... at least I _think_ that'd work properly \ud83e\udd14\r\n\r\nTechnically it would be possible for the binder to target the method without requiring generic args since the `()` should be enough to signal intent.  That wouldn't be the most difficult of changes, but still non-trivial due to how some of the `DotNetAdapter` APIs are structured.\r\n\r\nHowever returning the overload definitions instead of invoking the property getter as requested in the OP is probably a too risky of a change.",
      "created_at": "2021-06-29T15:20:53Z",
      "updated_at": "2021-06-29T15:20:53Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, I'd agree... if we were going to fix this in any way, I would personally prefer that `$obj.Name()` calls the method and `$obj.Name` calls the property getter. Overload definitions would be hidden in cases like this, but all functionality would work as expected otherwise... and overload definitions could still be retrieved via reflection if needed, I think?",
      "created_at": "2021-06-29T15:42:34Z",
      "updated_at": "2021-06-29T15:42:54Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> and overload definitions could still be retrieved via reflection if needed, I think?\r\n\r\nReflection or just `$obj.psobject.Methods['MethodNameHere']`",
      "created_at": "2021-06-29T16:25:05Z",
      "updated_at": "2021-06-29T16:25:05Z"
    },
    {
      "author": "mamidenn",
      "author_association": "NONE",
      "body": "> However returning the overload definitions instead of invoking the property getter as requested in the OP is probably a too risky of a change.\r\n\r\nIt's not that that necessarily *want* to get the overload definitions instead of invoking the getter. That was just the behavior I expected. I would be totally fine with invoking the getter here.",
      "created_at": "2021-06-30T05:56:26Z",
      "updated_at": "2021-06-30T05:56:26Z"
    }
  ],
  "created_at": "2021-06-29T13:59:38Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Language",
    "Needs-Triage"
  ],
  "number": 15689,
  "state": "open",
  "title": "Cannot call method of a (C# class) object when a property of the same name exists",
  "updated_at": "2021-06-30T05:56:26Z"
}