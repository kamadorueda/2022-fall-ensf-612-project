{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13241",
  "author": "alexvergilis",
  "body": "\r\n## Steps to reproduce\r\n\r\n```\r\n[Linq.Enumerable]::Distinct([string[]]@('a','b')).Where({$_})\r\n```\r\n\r\n## Expected behavior\r\n\r\n```\r\na\r\nb\r\n```\r\n\r\n## Actual behavior\r\n\r\n```\r\n$null\r\n```\r\n\r\n## Environment data\r\n\r\n\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.3\r\nPSEdition                      Core\r\nGitCommitId                    7.0.3\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```\r\n",
  "closed_at": "2020-07-22T23:43:06Z",
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "The enumerator that gets returned (`Enumerable+DistinctIterator<string>`) happens to have a public `Where` method even though the type itself is non-public.  It doesn't have a `ForEach` method though, so as a work around you can do:\r\n\r\n```powershell\r\n[Linq.Enumerable]::Distinct([string[]]@('a','b')).\r\n    ForEach{ $_ }.\r\n    Where{ $_ }\r\n```",
      "created_at": "2020-07-22T22:01:53Z",
      "updated_at": "2020-07-22T22:01:53Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "This is working as designed.\r\n\r\nThe confusion comes from here:\r\n```ps1\r\nPS C:\\Users\\me> [Linq.Enumerable]::Distinct([string[]]@('a','b')).Where\r\n\r\nOverloadDefinitions\r\n-------------------\r\nSystem.Collections.Generic.IEnumerable[string] Where(System.Func[string,bool] predicate)\r\n```\r\n\r\nThat is, the `Where` method that is found is _not_ the typical `Where` \"magic\" method that is provided by default on arrays in PowerShell, it's a method implemented by the IEnumerable class. If you want to use the usual `.Where` for this, you can wrap the expression in `@()` first:\r\n\r\n```ps1\r\n@([Linq.Enumerable]::Distinct([string[]]('a','b'))).Where{$_}\r\n```\r\n\r\nAlternatively, you can just use the IEnumerable version of Where like this:\r\n\r\n```ps1\r\n# use $args to access Func arguments\r\n[Linq.Enumerable]::Distinct([string[]]@('a','b')).Where{ $args[0] }\r\n\r\n# Or define a param block to give input args their own name\r\n[Linq.Enumerable]::Distinct([string[]]@('a','b')).Where{ param($string) $string }\r\n```\r\n\r\nBecause PowerShell is not really in control of how many arguments are being passed into the script, and the delegate type being bound to is a Func (which can have _many_ input arguments), `$_` is not automatically provided to the scriptblock as input. If you want arguments to be named (and yes, you can technically use `$_` for this if you want, e.g. `{ param($_) $_ }`) you'll need to use a param() block to name them yourself. \ud83d\ude42 ",
      "created_at": "2020-07-22T22:02:20Z",
      "updated_at": "2020-07-22T22:02:44Z"
    },
    {
      "author": "alexvergilis",
      "author_association": "NONE",
      "body": "If PowerShell 7,x is meant to be an in place replacement of PowerShell 5.1 this is a breaking behavior, as this:\r\n`[Linq.Enumerable]::Distinct([string[]]@('a','b')).Where{ param($string) $string }\r\n`does not produce the same result in 5.1",
      "created_at": "2020-07-22T23:14:55Z",
      "updated_at": "2020-07-22T23:14:55Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "That change could have happened even in a minor .NET framework update since the .NET team doesn't consider that to be under their change contract.  There's nothing PowerShell can really do about that.",
      "created_at": "2020-07-22T23:18:09Z",
      "updated_at": "2020-07-22T23:18:09Z"
    },
    {
      "author": "alexvergilis",
      "author_association": "NONE",
      "body": "@SeeminglyScience Thank you.",
      "created_at": "2020-07-22T23:43:06Z",
      "updated_at": "2020-07-22T23:43:06Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@alexvergilis np \ud83d\ude42 FWIW `([string[]][Linq.Enumerable]::Distinct([string[]]@('a','b'))).Where{ $_ }` should be pretty immune to similar changes, and should work in 5.1 too.",
      "created_at": "2020-07-22T23:49:09Z",
      "updated_at": "2020-07-22T23:49:09Z"
    }
  ],
  "created_at": "2020-07-22T21:38:36Z",
  "labels": [
    "Issue-Question"
  ],
  "number": 13241,
  "state": "closed",
  "title": "Powershell 7.0.3 - [Linq.Enumerable]::Distinct",
  "updated_at": "2020-07-22T23:49:10Z"
}