{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7084",
  "author": "yevster",
  "body": "Reproducible on 6.0.2\r\n\r\nWhen a file in a directory is passed to `ForEach-Object`, it loses its subpath\r\n\r\nSteps to reproduce\r\n------------------\r\nSetup: \r\n\r\n```\r\nNew-Item -ItemType Directory -Name \"Subdir\"\r\n\"File content\" > \"Subdir/myFile.txt\"\r\n```\r\n\r\nNow for the bug:\r\n```\r\ndir . -Recurse -File | % {Get-Content $_ }\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nShould see the content of myFile.txt:\r\n\r\n```\r\nFile content\r\n```\r\n\r\nThe results should be identical to `dir . -Recurse -File | Get-Content`\r\n\r\nActual behavior\r\n---------------\r\nError:\r\n```\r\nGet-Content : Cannot find path '/var/tmp/pstest/File.txt' because it does not exist.\r\nAt line:1 char:26\r\n+ dir -Recurse -File  | % {Get-Content $_ }\r\n+                          ~~~~~~~~~~~~~~\r\n+ CategoryInfo          : ObjectNotFound: (/var/tmp/pstest/File.txt:String) [Get-Content], ItemNotFoundException\r\n+ FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.GetContentCommand\r\n```\r\n\r\nThe `Subdir` subdirectory seems to be ommitted from the path of the file that Get-Content tries to find. This does not happen when not using `ForEach-Object`.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```\r\nName                           Value                                                                                                  \r\n----                           -----                                                                                                  \r\nPSVersion                      6.0.2                                                                                                  \r\nPSEdition                      Core                                                                                                   \r\nGitCommitId                    v6.0.2                                                                                                 \r\nOS                             Darwin 17.6.0 Darwin Kernel Version 17.6.0: Tue May  8 15:22:16 PDT 2018; root:xnu-4570.61.1~1/RELEA...\r\nPlatform                       Unix                                                                                                   \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                                \r\nPSRemotingProtocolVersion      2.3                                                                                                    \r\nSerializationVersion           1.1.0.1                                                                                                \r\nWSManStackVersion              3.0                                                                                                    \r\n\r\n\r\n```\r\n",
  "closed_at": "2018-08-28T13:57:00Z",
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@yevster `Get-Content -Path` takes a string argument so the `FileInfo` object in `$_` gets converted to a string when it's passed to the cmdlet. Now the `.ToString()` of a `FileInfo` object is just the filename, not the full path so it won't work for files not in the current directory. If you use the `FullName` property on the object as in\r\n```powershell\r\n dir . -Recurse -File | % {Get-Content $_.FullName }\r\n```\r\nit will work as expected and you'll see the content of the file.\r\n ",
      "created_at": "2018-06-16T00:32:51Z",
      "updated_at": "2018-06-16T00:32:51Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@yevster: \r\n\r\n* As @BrucePay  states, `-Path` (and `-LiteralPath`) are bound as _strings_ when values are passed as _arguments_, and whether a `System.IO.DirectoryInfo`  or `System.IO.FileInfo` instance stringifies to a mere name (as in your case) or a full path _varies_ - it depends on the specifics of the `Get-ChildItem` / `Get-Item` command.\r\n   * By contrast, when such instances are passed _via the pipeline_, their `.PSPath` property is bound to `-LiteralPath`, which works reliably.\r\n\r\n* This problematic behavior is discussed in #6057, along with a potential solution.\r\n\r\n",
      "created_at": "2018-06-17T01:49:58Z",
      "updated_at": "2018-06-17T01:49:58Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@chuanjiao10: _Piping_ `System.IO.DirectoryInfo` and `System.IO.FileInfo` instances already works as expected (at least if emitted by PS provider cmdlets): their `.PSPath` property binds to `-LiteralPath`, and `.PSPath` is like `.FullName`, but with a provider-name prefix.\r\n\r\nThe problem is with passing such instances as _arguments_, where stringification is applied, and whether that stringification returns the full path varies by command and can therefore not be relied upon.\r\n\r\nUsing `$_.FullName` is an effective _workaround_, but it shouldn't be necessary and the need for it regularly trips users up.\r\n\r\n#6057 suggests applying the pipeline's by-property-value binding logic to direct argument passing as well, which would solve the problem.\r\n",
      "created_at": "2018-06-17T11:42:45Z",
      "updated_at": "2018-06-17T11:42:45Z"
    },
    {
      "author": "oising",
      "author_association": "CONTRIBUTOR",
      "body": "@BrucePay it's a little bit more insidious than that: ToString() returns whatever was passed to the FileInfo ctor; sometimes a name, sometimes a full path. \r\n",
      "created_at": "2018-08-03T17:25:54Z",
      "updated_at": "2018-08-03T17:25:54Z"
    }
  ],
  "created_at": "2018-06-15T21:11:01Z",
  "labels": [
    "Issue-Question",
    "WG-Cmdlets",
    "Resolution-Answered"
  ],
  "number": 7084,
  "state": "closed",
  "title": "ForEach-Object breaks paths in FileInfo",
  "updated_at": "2018-08-28T13:57:00Z"
}