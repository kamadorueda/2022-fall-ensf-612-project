{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9217",
  "author": "mklement0",
  "body": "# Summary of the new feature/enhancement\r\n\r\n`Get-Unique` is of limited use, currently, given that it requires pre-sorted input and supports no (cmdlet-specific) parameters other than `-AsString` (for performing comparison based on the input objects' string representations).\r\n\r\nThe [POSIX `uniq` utility](http://pubs.opengroup.org/onlinepubs/9699919799/utilities/uniq.html), by contrast, supports a number of additional features that are worth implementing in `Get-Unique` as well; the [GNU implementation of `uniq`](http://man.he.net/?topic=uniq&section=all) supports even more.\r\n\r\nFor a real-life example, see [this Stack Overflow question](https://stackoverflow.com/q/55318866/45375).\r\n\r\n# Proposed technical implementation details\r\n\r\nHere are at least some of these features, proposed as PowerShell-appropriate parameter names and behaviors, juxtaposed with their `uniq` counterpart:\r\n\r\n* `-AddCount` (`-c`)\r\n  * Output the lines in a wrapper object that has `.InstanceCount` and `.InputObject` properties, where `.InstanceCount` reflects the number of duplicate consecutive objects encountered.\r\n  * Alternatively, add the `.InstanceCount` property as a `NoteProperty` member to each output object.\r\n\r\n* `-DuplicatesOnly` (`-d`)\r\n  * Only output (the first of) _2 or more_ consecutive input objects\r\n\r\n* `-AllDuplicates`\r\n  * Like `-DuplicatesOnly`, except that _all_ input objects in a consecutive block of duplicates are output (but no non-duplicates); primarily useful in combination with `-Property` (see below.\r\n\r\n* `-UniqueOnly` (`-u`)\r\n  * Only output input objects that occur only _once_ in sequence.\r\n\r\n* `-Property <Object[]>` (more flexible analog of `-f`)\r\n  * Allow basing the uniqueness test on property name(s) / expression(s), as with `Sort-Object`, for instance.\r\n  * As with `uniq -f`, it would be the _first_ object in each sequence of consecutive duplicates that is output - unless `-AllDuplicates` is also passed.\r\n\r\n* `-CaseSensitive` (inverse of `-i`)\r\n  * Use case-sensitive string comparison (if the input objects happen to be strings or if `-AsString` was passed).\r\n\r\n\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We have Group-Object which implement some options from the suggestion list.",
      "created_at": "2019-03-26T14:27:44Z",
      "updated_at": "2019-03-26T14:27:44Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: `Group-Object` groups across _all_ input objects, whereas `Get-Unique` and `uniq` operates on _consecutive duplicates_ - see the linked SO question for an example.",
      "created_at": "2019-03-26T14:40:27Z",
      "updated_at": "2019-03-26T14:40:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Is all proposed switches related to \"consecutive\"? If so may be we could introduce only one new parameter `-Consecutive [AllDuplicates | DuplicatesOnly | ...]` ?",
      "created_at": "2019-03-26T14:53:06Z",
      "updated_at": "2019-03-26T14:53:06Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Interesting idea, @iSazonov, but there are really _two_ dimensions involved here:\r\n\r\n* What blocks of consecutive objects should fundamentally be _included in the output_?\r\n  * Default behavior: all (no explicit parameter)\r\n  * Opt-in: only blocks with at least 2 objects (`-DuplicatesOnly`)\r\n  * Opt-in: only blocks with just 1 object (`-UniqueOnly`)\r\n\r\n* Among those blocks that should be included, what objects from each block should be output?\r\n  * Default behavior: the 1st one (no explicit parameter)\r\n  * Opt-in, implies `-DuplicatesOnly` (and precludes `-Count`): all objects from each block with duplicates (`-AllDuplicates`)\r\n\r\nPerhaps the following, with `All` as the default:\r\n\r\n```powershell\r\n-Select [ All | UniqueOnly | DuplicatesOnly |  DuplicatesOnlyIndividually ]\r\n```\r\n\r\nThe implication is that, except with `DuplicatesOnlyIndividually`, the _first_ object from each block is output, i.e., _one representative_ per block.\r\n\r\nWith whole-object duplicates, which one is chosen from a block of duplicates is irrelevant, but it matters when combined with `-Property`, where only _part_ of the objects form the duplication test; if the differences in the other parts matter, `DuplicatesOnlyIndividually` can be used.\r\n\r\n\r\n",
      "created_at": "2019-03-26T15:38:09Z",
      "updated_at": "2019-03-26T15:38:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> With whole-object duplicates, which one is chosen from a block of duplicates is irrelevant\r\n\r\nAdd-Member can be next in pipeline.\r\n",
      "created_at": "2019-03-26T17:45:33Z",
      "updated_at": "2019-03-26T17:45:33Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov:\r\n\r\nHow does `Add-Member` help if `Get-Unique` has already eliminated all but one of the partial duplicates?\r\n\r\nMy point was that if you pick one object from, say `1, 1, 1 | Get-Unique` (all value types compared as a whole), which of the `1`s  from among the duplicates you output is ultimately irrelevant, but if you use, say,\r\n\r\n```powershell\r\n# Input objects have the same .one property value, but distinct .two values.\r\n[pscustomobject] @{ one = 1; two = 2 }, [pscustomobject] @{ one = 1; two = 3 } |\r\n  Get-Unique -Property one\r\n```\r\n\r\nthen choosing just _one_ of these duplicates-with-respect-to-`.one`-only on output results in loss of information, so it's important to clarify that the _first_ one from each block is output - unless you use `-Select DuplicatesOnlyInvidually`.\r\n",
      "created_at": "2019-03-26T18:04:06Z",
      "updated_at": "2019-03-26T18:06:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> How does Add-Member help if Get-Unique has already eliminated all but one of the partial duplicates?\r\n\r\nMy thought was about object order - that first object differs from second and Add-Member will add new property to first or second - order is important. It seems we say about the same.",
      "created_at": "2019-03-27T03:07:24Z",
      "updated_at": "2019-03-27T03:07:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> -Select [ All | UniqueOnly | DuplicatesOnly |  DuplicatesOnlyIndividually ]\r\n\r\nWith `Select` name it is not clear that we assume `consecutive`.\r\n`DuplicatesOnlyIndividually` looks awful :-) and not clear that it does.",
      "created_at": "2019-03-27T07:44:46Z",
      "updated_at": "2019-03-27T07:44:46Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "The core mandate of `uniq` is: from each block of (potentially) repeated lines, return only 1 (the first) instance.\r\n\r\nThat is, that only _consecutive_ objects are considered is very much _implied_.\r\n\r\n`-Select` then tells you which blocks to select for output.\r\n\r\n`DuplicatesOnlyIndividually` isn't pretty, but, with only a single parameter specifying both block selection and per-block output behavior, it seems reasonable.\r\nWhat name would you pick to make it clearer?\r\n\r\nOne option is to drop the `Only` part to make the names shorter, and to rename `DuplicatesOnlyIndividually` to `IndividualDuplicates` (which also helps with tab completion):\r\n\r\n```powershell\r\n-Select [ All | Unique | Duplicates | IndividualDuplicates ]\r\n```\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2019-03-27T08:06:00Z",
      "updated_at": "2019-03-27T08:06:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> -Select [ All | Unique | Duplicates | IndividualDuplicates ]\r\n\r\nThis looks good. \r\nOnly IndividualDuplicates has a mysterious meaning. Can you add example?\r\nDo this implies the use of Property parameter? Can we add this in name?",
      "created_at": "2019-03-27T09:24:33Z",
      "updated_at": "2019-03-27T09:24:33Z"
    },
    {
      "author": "bstrautin",
      "author_association": "NONE",
      "body": "I'd propose -MinCount [int], -MaxCount [int], and -Group [switch] as an alternative to the -Select options; they are more flexible and might be more intuitive.\r\n\r\n1. `gu -MaxCount 1`  would be equivalent to `gu -Select Unique`\r\n2. `gu -MinCount 2`  would be equivalent to `gu -Select Duplicates`\r\n3. `gu -MinCount 2 -Group |% Group`  would be equivalent to `gu -Select IndividualDuplicates`\r\n\r\n1&2 are different enough from solving the problem with -AddCount and Where-Object that they seem worthwhile.\r\n\r\nOf course perhaps all of this would be better with a -Consecutive switch on Group-Object...",
      "created_at": "2020-12-10T23:39:24Z",
      "updated_at": "2020-12-10T23:39:24Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov, here's an example of `-Select IndividualDuplicates`:\r\n\r\n```powershell\r\nPS> 0, 1, 1, 2, 3 | Get-Unique -Select IndividualDuplicates\r\n\r\n1\r\n1\r\n```\r\n\r\nThat is, only duplicates are reported, but _all of them_ are reported (with `-Select Duplicates` only a single `1` would be output).\r\n\r\nIn this simple case, where the duplicates are identical, this isn't all that useful, but when combined with `-Property`, it is:\r\n\r\n```powershell\r\nPS> [pscustomobject] @{ one=0; two=0}, \r\n    [pscustomobject] @{ one=1; two=1}, \r\n    [pscustomobject] @{ one=1; two=10}, \r\n    [pscustomobject] @{ one=2; two=2}, @{ one=3; two=3} | \r\n      Get-Unique -Select IndividualDuplicates -Property one\r\n\r\none two\r\n--- ---\r\n  1   1\r\n  1  10\r\n```\r\n\r\nIn this case, emitting all duplicate objects preserves information that would otherwise be lost, given that the comparison is based solely on the `.one` property values.\r\n\r\n",
      "created_at": "2020-12-23T15:07:03Z",
      "updated_at": "2020-12-23T15:07:03Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@bstrautin, I think it is indeed better to use `Group-Object` for such operations (and terminology related to _specific counts_), and, yes, `Group-Object -Consecutive` might be a nice optimization, akin to `Compare-Object -SyncWindow`.\r\n\r\n",
      "created_at": "2020-12-23T15:10:19Z",
      "updated_at": "2020-12-23T15:10:19Z"
    }
  ],
  "created_at": "2019-03-24T17:17:51Z",
  "labels": [
    "Issue-Enhancement"
  ],
  "number": 9217,
  "state": "open",
  "title": "Add various features to Get-Unique modeled on the `uniq` Unix utility to make it more useful",
  "updated_at": "2020-12-23T15:10:20Z"
}