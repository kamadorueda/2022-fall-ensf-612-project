{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15679",
  "author": "mklement0",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\n\n### Steps to reproduce\n\n```powershell\r\nclass Custom {\r\n  [string] $A\r\n  [string] $B\r\n  [string] $C = 'value'\r\n}\r\n\r\n[Custom]::new()\r\n```\n\n### Expected behavior\n\n```console\nA B C\r\n- - -\r\n    value\n```\n\n\n### Actual behavior\n\n```console\nC     A B\r\n-     - -\r\nvalue\n```\n\n\n### Environment data\n\n```powershell\nPowerShell Core 7.2.0-preview.7\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Is this ask about Formatting Subsystem or Engine API?",
      "created_at": "2021-06-26T18:17:58Z",
      "updated_at": "2021-06-26T18:17:58Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Engine.",
      "created_at": "2021-06-26T18:25:15Z",
      "updated_at": "2021-06-26T18:25:15Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "I took a look at this issue after first determining the formatting behavior seems to have changed around the release of 6.1.\r\n\r\nWhile trying figure out whether I could pinpoint the change in behavior in the underlying `System.Reflection.Emit` library between FX and Core (thereby establishing some pre-change \"baseline\"), I accidentally found that even on .NET Framework/WPS, the member order of dynamic types _is not consistent either_:\r\n\r\n```powershell\r\n\r\npowershell -c {\r\n  class C {\r\n    [int]$A\r\n    [int]$B = 123\r\n  }\r\n\r\n  $a = [C]@{}\r\n\r\n  'Reflected order: [{0}]' -f $([C].GetProperties().Name -join ', ')\r\n\r\n  $a\r\n}\r\n\r\npowershell -c {\r\n  class C {\r\n    [int]$A\r\n    [int]$B = 123\r\n  }\r\n\r\n  $a = [C]@{} |Format-Table\r\n\r\n  'Reflected order: [{0}]' -f $([C].GetProperties().Name -join ', ')\r\n\r\n  $a\r\n}\r\n```\r\n\r\nThe only difference here is that the first command enumerates the property metadata _before_ letting the formatting subsystem render an instance of `[C]`, whereas the second one does it _after_ - and somehow that affects _both_ the type created AND the order in the type adapter - going all the way back to at least 5.1:\r\n\r\n![image](https://user-images.githubusercontent.com/7413755/168093676-9551b5e4-2190-4a18-bf3c-def5e366eb32.png)\r\n\r\nI'll keep digging and see what comes up (let me know if you have any ideas or more surprising examples @mklement0) :)  ",
      "created_at": "2022-05-12T14:06:19Z",
      "updated_at": "2022-05-12T14:06:19Z"
    }
  ],
  "created_at": "2021-06-26T13:37:23Z",
  "number": 15679,
  "state": "open",
  "title": "Mixing initialized and uninitialized properties in custom classes breaks the ordering of properties",
  "updated_at": "2022-05-12T14:06:19Z"
}