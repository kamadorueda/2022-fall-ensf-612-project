{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3483",
  "author": "mklement0",
  "body": "Currently, preference variables, such as `$VerbosePreference`, are only predefined in the _global_ scope, where they are type-constrained, such as to `[System.Management.Automation.ActionPreference]`, which ensures that only valid values can be assigned to them. \r\nSome preference variables, such as `$OFS`, aren't even predefined in the global scope, although their type (and default value) is known, as described in `Get-Help about_Preference_Variables`.\r\n\r\nBy contrast, assigning to a preference variable in any descendant scope implicitly creates a new variable that is not type-constrained, which effectively allows assigning _invalid values_.\r\n\r\nTherefore, assigning invalid values in _scripts_ may go unnoticed.  \r\n(It seems that PowerShell quietly applies a given preference variable's default value in the event of encountering an invalid value.)\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n$VerbosePreference = 'ThisIsAnInvalidValue'\r\n& { $VerbosePreference = 'ThisIsAnInvalidValue' }\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nIdeally, _both_ commands would complain about the inability to convert string `'ThisIsAnInvalidValue'` to type `[System.Management.Automation.ActionPreference]`\r\n\r\n\r\nActual behavior\r\n---------------\r\n\r\n* The first command fails, as desired, because the top-level `$VerbosePreference` is type-constrained to `[System.Management.Automation.ActionPreference]`, and converting string `'ThisIsAnInvalidValue'` to that type fails.\r\n\r\n* The 2nd command is quietly accepted, because assigning to `$VerbosePreference`  in the child scope created by `&` implicitly creates a new, local variable that isn't type-constrained, so it effectively becomes a `[string]` value that cannot be converted to a legal `[System.Management.Automation.ActionPreference]` value.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-alpha (v6.0.0-alpha.17) on Darwin Kernel Version 16.5.0: Fri Mar  3 16:52:33 PST 2017; root:xnu-3789.51.2~3/RELEASE_X86_64\r\n```\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2017-04-04T22:49:59Z",
  "number": 3483,
  "state": "open",
  "title": "Explicit creation of preference variables in descendant scopes should be appropriately type-constrained, as in the global scope / according to the definition of the preference variable",
  "updated_at": "2020-12-14T12:52:09Z"
}