{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9243",
  "author": "tlsalex",
  "body": "Always met some not well designed software , which is required admin permission to run it. But we can't give a normal user a admin permission.\r\n\r\nI wonder if there is a way to make a program always runs in admin permission, just like the SUID in linux  /usr/bin/passwd.\r\n\r\nOr is there a similar way to do that in windows.\r\n\r\nSorry this seems not a powershell issue , but maybe PowerShell already have some cmdlet implement that, we just don't know\r\n\r\n",
  "closed_at": "2019-03-29T03:39:18Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Please look #3232",
      "created_at": "2019-03-28T13:30:28Z",
      "updated_at": "2019-03-28T13:30:28Z"
    },
    {
      "author": "tlsalex",
      "author_association": "NONE",
      "body": "Hello @iSazonov ,\r\n\r\nMaybe it is not clear enough for my question , what do I mean is a normal user can run a program that required admin permission without type any admin credential(by assign some privilege to it or something else). just double click on the app ,and the app runs well , but the program run as admin actually.\r\n\r\nJust like the normal user in linux , update his password with passwd command , but the passwd command itself run as root, because of the SUID can make it always run as root, no matter it is normal user or not.",
      "created_at": "2019-03-28T15:20:48Z",
      "updated_at": "2019-03-28T15:30:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "There is no SUID, SGID in Windows. You could be create a service running under elevated account and create utils which communicated with the service.",
      "created_at": "2019-03-29T03:07:37Z",
      "updated_at": "2019-03-29T03:07:37Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@tlsalex [JEA](https://github.com/powershell/jea) is what you are looking for.  The short version is that you can configure a PowerShell endpoint to runas another account.  So you can give trusted users limited access to admin tasks.",
      "created_at": "2019-03-29T03:39:18Z",
      "updated_at": "2019-03-29T03:39:18Z"
    }
  ],
  "created_at": "2019-03-28T06:20:06Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 9243,
  "state": "closed",
  "title": "Is there or similar SUID, SGID and Sticky stuff in windows, any PS cmdlet can do that?",
  "updated_at": "2019-03-29T03:39:29Z"
}