{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2045",
  "author": "proxb",
  "body": "## Steps to reproduce\n\nWorking with runspaces in PowerShell core presents some issues when it comes to adding Type data files into the new runspace. The first problem is that the RunspaceConfiguration property is hidden so you cannot get to anything within it other than using reflection. Because of this, you cannot get to the Types collection within the property to add extra type files to the runspace. The next issue is that the TypeConfigurationEntry which is required to be added to the Types collection is also a private type and unreachable without using reflection to invoke the constructor.\n\n``` PowerShell\n$Runspace = [runspacefactory]::CreateRunspace()\n$TypeFile = \"C:\\Temp\\TypeFile.ps1xml\"\n#This fails because TypeConfigurationEntry is private\n$TypeEntry = New-Object System.Management.Automation.Runspaces.TypeConfigurationEntry -ArgumentList $TypeFile\n#This will fail because RunspaceConfiguration is private\n$Runspace.RunspaceConfiguration.types.Append($TypeEntry)\n```\n## Expected behavior\n\nThe type files should be used to build the TypeConfigurationEntry object which in turn should added to the Types collection under the RunspaceConfiguration property of the runspace. The RunspaceConfiguration property should be accessible to view.\n\n**TypeConfigurationEntry Object**\n\n``` PowerShell\nPS C:\\> $TypeEntry\n\n\nFileName : C:\\Temp\\TypeFile.ps1xml\nTypeData : \nIsRemove : False\nName     : C:\\Temp\\TypeFile.ps1xml\nPSSnapIn : \nBuiltIn  : False\n```\n\n**RunspaceConfiguration Property**\n\n``` PowerShell\nPS C:\\> $Runspace.RunspaceConfiguration\n\n\nShellId               : Microsoft.PowerShell\nCmdlets               : {Get-WinEvent, New-WinEvent, Get-Counter, \n                        Import-Counter...}\nProviders             : {Registry, Alias, Environment, FileSystem...}\nTypes                 : {C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\GetEvent.ty\n                        pes.ps1xml, C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\\n                        types.ps1xml, C:\\Windows\\System32\\WindowsPowerShell\\v1.\n                        0\\typesv3.ps1xml}\nFormats               : {C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\Event.Forma\n                        t.ps1xml, C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\Di\n                        agnostics.Format.ps1xml, C:\\Windows\\System32\\WindowsPow\n                        erShell\\v1.0\\Certificate.format.ps1xml, C:\\Windows\\Syst\n                        em32\\WindowsPowerShell\\v1.0\\DotNetTypes.format.ps1xml..\n                        .}\nInitializationScripts : {}\nScripts               : {}\nAssemblies            : {Microsoft.PowerShell.Commands.Diagnostics, \n                        Version=3.0.0.0, Culture=neutral, \n                        PublicKeyToken=31bf3856ad364e35, \n                        ProcessorArchitecture=MSIL, \n                        Microsoft.PowerShell.ConsoleHost, Version=3.0.0.0, \n                        Culture=neutral, PublicKeyToken=31bf3856ad364e35, \n                        ProcessorArchitecture=MSIL, \n                        System.Management.Automation, Version=3.0.0.0, \n                        Culture=neutral, PublicKeyToken=31bf3856ad364e35, \n                        ProcessorArchitecture=MSIL, \n                        Microsoft.PowerShell.Commands.Utility, \n                        Version=3.0.0.0, Culture=neutral, \n                        PublicKeyToken=31bf3856ad364e35, \n                        ProcessorArchitecture=MSIL...}\nAuthorizationManager  : Microsoft.PowerShell.PSAuthorizationManager\n```\n## Actual behavior\n\nErrors are thrown about the type not being found when attempt to create the TypeConfigurationEntry object using the path of the type file as its argument. The RunspaceConfiguration property is not publicly available to dig into the types collection to add the type files. Attempting to view the property results in no data being displayed.\n## Workaround\n\nI can get around this by using reflection to locate the RunspaceConfiguration property and then further using reflection to locate and use the constructor for TypeConfigurationEntry to build the object and then apply it to the RunspaceConfiguration object so the runspace has the proper type files loaded.\n\n``` PowerShell\n$Runspace = [runspacefactory]::CreateRunspace()\n$TypeFile = \"C:\\Temp\\TypeFile.ps1xml\"\n\n#Use the necessary flags to locate the property\n$Flags = 'nonpublic','static','instance'\n$_RunspaceConfig = $Runspace.GetType().GetProperty('RunspaceConfiguration',$Flags)\n\n#Pull the RunspaceConfiguration property\n$RunspaceConfig = $_RunspaceConfig.GetValue($Runspace,$Null)\n\n#Locate the constructor of the TypeConfigurationEntry object \n$ctor = $RunspaceConfig.Types[0].GetType().GetConstructor([string])\n\n#Invoke the constructor with the type file to build the object\n$TypeConfigEntry = $ctor.Invoke($TypeFile)\n\n#Load the type files into the RunspaceConfiguration\n$RunspaceConfig.Types.Append($TypeConfigEntry)\n\n```\n## Environment data\n\n``` powershell\nName                           Value\n----                           -----\nPSEdition                      Core\nPSVersion                      6.0.0-alpha\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\nWSManStackVersion              3.0\nGitCommitId                    v6.0.0-alpha.9-107\nPSRemotingProtocolVersion      2.3\nCLRVersion\nSerializationVersion           1.1.0.1\nBuildVersion                   3.0.0.0\n\n```\n",
  "closed_at": "2016-08-27T16:23:49Z",
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "There are 2 runspace initialization apis, `RunspaceConfiguration` from V1, and `InitialSessionState` from V2 onwards.\n\nWe had plans to remove `RunspaceConfiguration` from PowerShell Core, partly because we don't need to support snap-ins, but also trying to reduce the api surface.\n\nWe made the apis internal in PowerShell Core for the time being, e.g.\n\nhttps://github.com/PowerShell/PowerShell/blob/c1faf1e6e10fc1ce45e84ef6f49ae7136c67a111/src/System.Management.Automation/minishell/api/RunspaceConfiguration.cs#L107\n\nBut longer term, we'd hoped we could remove them completely.\n\nAre `InitialSessionState` and the corresponding apis like `SessionStateTypeEntry` and `SessionStateFormatEntry` a viable replacement for you?\n\nNote that one reason we want to remove them - maintaining the 2 code paths is extra work, e.g. the work I did to speed up PowerShell startup was primarily done for `InitialSessionState`, so runspaces using `RunspaceConfiguration` won't see the same improvements.\n",
      "created_at": "2016-08-24T01:08:40Z",
      "updated_at": "2016-08-24T01:09:13Z"
    },
    {
      "author": "proxb",
      "author_association": "NONE",
      "body": "Nice! If those are the V2+ apis to replace `RunspaceConfiguration` then that will definitely be a viable solution for me as I want to ensure that my module keeps up with what the latest apis are. I'll work on testing `InitialSessionState`, `SessionStateTypeEntry` and `SessionStateFormatEntry` and integrating them into my [module ](https://github.com/proxb/PoshRSJob) so it is up to date. Appreciate the heads up on the updated apis!\n",
      "created_at": "2016-08-24T01:23:04Z",
      "updated_at": "2016-08-24T01:23:04Z"
    },
    {
      "author": "proxb",
      "author_association": "NONE",
      "body": "Using the public apis worked like a champ! Thanks for the heads up on these.\n",
      "created_at": "2016-08-27T16:23:49Z",
      "updated_at": "2016-08-27T16:23:49Z"
    }
  ],
  "created_at": "2016-08-24T00:16:05Z",
  "number": 2045,
  "state": "closed",
  "title": "Make TypeConfigurationEntry and RunspaceConfiguration public under System.Management.Automation.Runspaces",
  "updated_at": "2016-08-27T16:23:50Z"
}