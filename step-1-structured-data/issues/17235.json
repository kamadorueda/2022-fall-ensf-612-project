{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17235",
  "author": "superelitist",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\n```powershell\r\n$NAME_TO_SEARCH = \"a_string\"\r\n$THROTTLE_LIMIT = 5\r\n$TIMEOUT = 15\r\nGet-ADObject -Filter 'ObjectClass -eq \"serviceConnectionPoint\" -and Name -eq \"Microsoft Hyper-V\"' |\r\nForEach-Object { $_.DistinguishedName.Split(\",\")[1].replace(\"CN=\",\"\") } |\r\nForEach-Object -Parallel {\r\n  Get-VM -ComputerName $_ -Name *$($using:NAME_TO_SEARCH)* -ErrorAction SilentlyContinue |\r\n  Select-Object -Property ComputerName, Name, State, Uptime\r\n} -ThrottleLimit $THROTTLE_LIMIT -TimeoutSeconds $TIMEOUT\r\n```\r\n\r\n* `-ThrottleLimit 1 -TimeoutSeconds 10` completes in ~13 seconds.\r\n* `-ThrottleLimit 2 -TimeoutSeconds 10` completes in ~14 seconds.\r\n* `-ThrottleLimit 3 -TimeoutSeconds 10` completes in ~18 seconds.\r\n* `-ThrottleLimit 3 -TimeoutSeconds 15` did not complete--I waited about twenty minutes.\r\n* `-ThrottleLimit 4 -TimeoutSeconds 15` completes in ~45 seconds.\r\n* `-ThrottleLimit 5 -TimeoutSeconds 15` completes in ~45 seconds.\r\n* `-ThrottleLimit 5 -TimeoutSeconds 15 -UseNewRunspace` completes in ~638 seconds.\r\n* `-ThrottleLimit 100 -TimeoutSeconds 15` completes in ~220 seconds.\r\n* `-ThrottleLimit 100 -TimeoutSeconds 15 -UseNewRunspace` completes in ~71 seconds.\r\n* Ctrl-C does not appear to cancel running script blocks as documented.\r\n* The error appears anywhere from zero to three times, depending on `-TimeoutSeconds`. It seems apparent that Foreach-Object is indeed stopping the pipeline, but not stopping the scripts.\r\n* I also experimented with a jobs-based version, and ran into a similar problem with `Stop-Job`. I suspect that the actual problem might be in PowerShell's inability to stop the `Get-VM` cmdlet, but there's no feedback to such effect, so I'm shooting in the dark here--the title indicates the *apparent* problem.\r\n* #16507 appears to be related. If what they say is true (PowerShell *cannot* stop some tasks), then it's possible that the issue is with [incorrect/misleading documentation](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/foreach-object?view=powershell-7.2#parameters). I don't believe this is true though: I am certainly capable of stopping the scripts by killing the `pwsh.exe` process. Under the hood, I would expect PowerShell to have even greater control over the code it's running.\n\n### Expected behavior\n\n```console\n# after ~ten seconds...\r\nComputerName Name                     State Uptime\r\n------------ ----                     ----- ------\r\n<host_name>  <vm_name>              Running 2.10:53:54.3990000\r\n...\r\n\r\nPS>\n```\n\n\n### Actual behavior\n\n```console\n# after ~13-220 seconds...\r\nComputerName Name                     State Uptime\r\n------------ ----                     ----- ------\r\n<host_name>  <vm_name>              Running 2.10:53:54.3990000\r\n...\r\nInvalidOperation: The pipeline has been stopped.\r\n\r\nPS>\n```\n\n\n### Error details\n\n```console\nException             :\r\n    Type        : System.Management.Automation.PipelineStoppedException\r\n    ErrorRecord :\r\n        Exception             :\r\n            Type    : System.Management.Automation.ParentContainsErrorRecordException\r\n            Message : The pipeline has been stopped.\r\n            HResult : -2146233087\r\n        CategoryInfo          : OperationStopped: (:) [], ParentContainsErrorRecordException\r\n        FullyQualifiedErrorId : PipelineStopped\r\n    TargetSite  :\r\n        Name          : Throw\r\n        DeclaringType : System.Runtime.ExceptionServices.ExceptionDispatchInfo\r\n        MemberType    : Method\r\n        Module        : System.Private.CoreLib.dll\r\n    Message     : The pipeline has been stopped.\r\n    Source      : System.Private.CoreLib\r\n    HResult     : -2146233087\r\n    StackTrace  :\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n   at System.Management.Automation.Runspaces.LocalPipeline.InvokeHelper()\r\n   at System.Management.Automation.Runspaces.LocalPipeline.InvokeThreadProc()\r\nTargetObject          : System.Management.Automation.PSTasks.PSTask\r\nCategoryInfo          : InvalidOperation: (System.Management.A\u2026tion.PSTasks.PSTask:PSTask) [], PipelineStoppedException\r\nFullyQualifiedErrorId : PSTaskException\n```\n\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.3\r\nPSEdition                      Core\r\nGitCommitId                    7.2.3\r\nOS                             Microsoft Windows 10.0.19044\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2022-05-18T09:00:45Z",
  "comments": [
    {
      "author": "kasini3000",
      "author_association": "NONE",
      "body": "My guess:\r\nNothing to do with ForEach-Object-Parallel. The problem is on the left side of the pipe.\r\n\r\n```\r\n1..20 | ForEach-Object -ThrottleLimit 10 -Parallel { \"$_ start\" ;Start-Sleep 15; \"$_ end\" } #a\r\n1..20 | ForEach-Object -TimeoutSeconds 12  -ThrottleLimit 10 -Parallel { \"$_ start\" ;Start-Sleep 15; \"$_ end\" } #b\r\n```\r\nreturn is \u3010InvalidOperation: The pipeline has been stopped.\u3011on \u201cb\u201d \r\n\r\n\r\nMy personal advice:\r\nInstead of the pipe symbol \"|\", use foreach ($a in $b) {}, which is better for debugging and easier to control the flow, such as BREAK CONTINUE\r\nInstead of -computername, use new-pssession and invoke-command via winrm.\r\n\r\n-------\r\n\r\nmy powershell script framework, which encapsulates new-pssession and invoke-command.\r\n\r\n[kasini3000](https://gitee.com/chuanjiao10/kasini3000) site mirror:(https://github.com/kasini3000/kasini3000)   \r\nwin,linux devops automation batch script framework.(It is similar to Puppet\uff0cAnsible\uff0cpipeline) \r\nOpen source, free, cross-platform \r\nEnglish manual: https://gitee.com/chuanjiao10/kasini3000/blob/master/docs/kasini3000_manual.xlsx\r\n\r\n[kasini3000_agent_linux](https://gitee.com/chuanjiao10/kasini3000_agent_linux) Shell script,one click install powershell on linux,modify sshd_config for PsRemote.\r\n\r\n\r\n",
      "created_at": "2022-04-30T16:27:13Z",
      "updated_at": "2022-04-30T16:27:13Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "The timeout and Ctrl+C command just make a best effort to stop all running PowerShell scripts.  It does not abruptly terminate all threads, but instead sends a stop signal to each running script.  If the script or command ignores the stop signal, or is executing a native API call, the running script may not stop immediately or at all.  This is by design.",
      "created_at": "2022-05-16T21:38:21Z",
      "updated_at": "2022-05-16T21:38:21Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as by-design and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-05-18T09:00:44Z",
      "updated_at": "2022-05-18T09:00:44Z"
    }
  ],
  "created_at": "2022-04-30T03:56:14Z",
  "number": 17235,
  "state": "closed",
  "title": "ForEach-Object -TimeoutSeconds Does Not Stop In The Mandated Time",
  "updated_at": "2022-05-18T09:00:45Z"
}