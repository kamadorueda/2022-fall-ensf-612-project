{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9403",
  "author": "vexx32",
  "body": "# Summary of the new feature/enhancement\r\n\r\nFormat-Hex is a very useful cmdlet at times, but it could be made much more versatile if it could simply return the bare string values that it generates, without the headers and other surrounding context data, on request.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nAdd a new parameter to Format-Hex called `-Bare`, `-ValueOnly`, or `-Raw` (name up for discussion). This would cause the raw hex data to be sent to output as-is, without the column / table layout or row/column names, just a pure hexadecimal string.\r\n\r\nThis would enable use of the cmdlet for simpler data->hex conversions, and make it much easier to get the actual hex values for the bytes back.\r\n\r\n/cc @rkeithhill @iSazonov \r\n\r\n# Examples\r\n\r\n(Thanks Ilya!)\r\n\r\n```ps\r\n    65535 | Format-Hex -AsString | Should -BeExactly \"FFFF\"\r\n    65535 | Format-Hex -AsHexValue | Should -BeExactly \"0xFFFF\"\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Let's add examples like:\r\n```powershell\r\n    65535 | Format-Hex -AsString | Should -BeExactly \"FFFF\"\r\n    65535 | Format-Hex -AsHexValue | Should -BeExactly \"0xFFFF\"\r\n\r\n```",
      "created_at": "2019-04-18T18:22:39Z",
      "updated_at": "2019-04-18T18:22:39Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Interesting thought, too -- if we do the second one how would the value be delineated? If you pipe in, for example, a text file, would that get broken into bytes with each having an `0x` prefix?",
      "created_at": "2019-04-18T18:25:31Z",
      "updated_at": "2019-04-18T18:25:31Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "While I think it would be great to have this functionality, I don't think `Format-Hex` is the right place for it, because - as a `Format-*` cmdlet - its purpose is to create _for-display representations_, not data.\r\n\r\nWe should instead consider something along the lines of `ConvertTo-ByteString` and `ConvertFrom-ByteString`.",
      "created_at": "2019-04-18T18:27:52Z",
      "updated_at": "2019-04-18T18:27:52Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That does seem appropriate. I would be more inclined to name it in line with the current cmdlet as `ConvertTo-Hex` or some such. \ud83d\ude42 ",
      "created_at": "2019-04-18T18:29:54Z",
      "updated_at": "2019-04-18T18:29:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "In fact, Format-Hex is not part of formatting system but use the `Format` name that can confuse.\r\nDefinition for Format verb is \"Arranges objects in a specified form or layout.\" - which does not limit the use of verb in formatting system.",
      "created_at": "2019-04-18T18:56:18Z",
      "updated_at": "2019-04-18T18:56:18Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "While `Format-Hex` may not _technically_ be a cmdlet that outputs formatting instructions:\r\n\r\n* The name suggests it, because all other (built-in) `Format-*` cmdlets do use the formatting system; that, to me, is reason enough to avoid any other use.\r\n\r\n* While you can technically process  the `Microsoft.PowerShell.Commands.ByteCollection` output by `Format-Hex` _programmatically_, I've personally never seen it used that way.\r\n\r\n* _Arranges objects in a specified form or layout_: that sounds like _formatting_ to me, whereas creating a byte string is a _data transformation_: representing bytes via strings.\r\n\r\n\r\n",
      "created_at": "2019-04-18T19:04:58Z",
      "updated_at": "2019-04-18T19:11:35Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Whether or not there is a significant difference in operation between `Format-Hex` and a corresponding `ConvertTo-` cmdlet, I am inclined to err on the side of clarity. I think it's much more discoverable and clear as a separate cmdlet.",
      "created_at": "2019-04-18T19:19:00Z",
      "updated_at": "2019-04-18T19:19:00Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32, I see your point about wanting the word `Hex` in there; my thought was that the hex. aspect is implied, because when strings are used to encode byte values, they are most typically represented as hex numbers, so that it was more important to stress the _byte_ aspect and that a _string_ is output;   \r\nThe term _byte string_ may also be problematic, because it has a specific, different meaning in Python, for instance; `ConvertTo-HexString`? `ConvertTo-HexByteString` sounds a little clunky.",
      "created_at": "2019-04-18T19:21:31Z",
      "updated_at": "2019-04-18T19:22:02Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I get where you're coming from, but given that `Format-Hex` is already to some extent a staple of PowerShell when dealing with strings (pesky invisible characters!) I don't see that adding more words to the cmdlet noun as really adding any additional value or comprehensibility. Not that I really mind either way, but cmdlets in general tend to be more discoverable when you can find related commands with `Get-Command -Noun Item` (for example) and be reasonably confident they deal with similar things in similar ways. \ud83d\ude42 ",
      "created_at": "2019-04-18T19:29:43Z",
      "updated_at": "2019-04-18T19:29:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We can look at it from the other side. We can add parameters to suppress displaying:\r\n- header\r\n- right part\r\n- left part\r\n\r\nThen add parameters to add:\r\n- prefixes\r\n- suffixes\r\n\r\nAll of these are display modifiers.\r\nThis is such a casuistry :-)",
      "created_at": "2019-04-19T04:12:41Z",
      "updated_at": "2019-04-19T04:12:41Z"
    },
    {
      "author": "tamusjroyce",
      "author_association": "NONE",
      "body": "Any solution yet? `Format-Hex file | FormatTable | select \"Bytes\"` doesn't return anything. Seems like it returns one huge string than the standard multi-column object?",
      "created_at": "2019-04-20T20:51:13Z",
      "updated_at": "2019-04-20T20:51:13Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That's because you used format-table. Format-table returns formatting data, not useable data. Technically speaking format-hex is mainly intended for format data but you can extract the bytes as long as you don't put it through another format-* command first. \r\n\r\n```\r\n1, 2, 3, 4, 5, 6 |fhx|select -exp bytes\r\n1\r\n0\r\n0\r\n0\r\n2\r\n0\r\n0\r\n0\r\n3\r\n0\r\n0\r\n0\r\n4\r\n0\r\n0\r\n0\r\n5\r\n0\r\n0\r\n0\r\n6\r\n0\r\n0\r\n0\r\n```",
      "created_at": "2019-04-20T20:56:50Z",
      "updated_at": "2019-04-20T20:57:31Z"
    },
    {
      "author": "tamusjroyce",
      "author_association": "NONE",
      "body": "Apologies. Searched everywhere. And just saw a similar example after I posted. Exactly what I need! And I like your shorthand version too! `Format-Hex index.gzip | Select-Object -Expand Bytes`",
      "created_at": "2019-04-20T21:00:16Z",
      "updated_at": "2019-04-20T22:32:24Z"
    },
    {
      "author": "tamusjroyce",
      "author_association": "NONE",
      "body": "(\"some_string_1234567890123456789012345678901234567890123456789012345678901234567890\" | Format-Hex | Select-Object -Expand Bytes | ForEach-Object { '0x{0:X2}' -f $_ } | ForEach-Object { $i = 0 } { $i++;  @{$true=\"\\`r\\`n\";$false=\"\"}[($i - 1) % 16 -eq 0] + $_ }) -join ','\r\n\r\n(code referenced from https://stackoverflow.com/a/48373145/458321, Ansgar Wiechers)\r\n\r\nI'm also curious with the idea, `Format-Hex -AsHexValue`, would you be able to specify:\r\n- A delimiter?\r\n- A newline wrap (5 per instance * 16 above = 80 character wrap)?\r\n- Uppercase or lowercase (per 0:X2 or 0:x2)?\r\n\r\nOr `ConvertTo-Hex -AsHexValue ','` if that is the route wanting to be taken. ",
      "created_at": "2019-04-20T21:25:41Z",
      "updated_at": "2019-04-20T22:52:04Z"
    }
  ],
  "created_at": "2019-04-18T13:18:23Z",
  "number": 9403,
  "state": "open",
  "title": "Format-Hex: Support returning bare value strings",
  "updated_at": "2019-04-20T22:52:04Z"
}