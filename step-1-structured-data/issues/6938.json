{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6938",
  "author": "mklement0",
  "body": "The 1st (non-blank) line following `.EXAMPLE` in comment-based help is reformatted by PowerShell in two ways:\r\n\r\n* If no `...>` prefix is present, `PS C:\\>` is automatically prepended.\r\n\r\n* Whatever follows the automatically added prefix - or a retained custom prefix - has _leading whitespace stripped_, resulting in lines such as `PS C:\\>foo bar`.\r\n\r\nHowever, `PS C:\\>foo bar` should be `PS C:\\> foo bar` (a single space after `>`) so as to align with PowerShell's default prompt string.\r\n\r\nAdditionally, the automatically prepended prompt string uses path `C:\\` even on _Unix_-like platforms, which is confusing.\r\n\r\nAs an side: Windows PowerShell v5.1 exhibits the no-space-after-`>` also with _compiled_ cmdlets, whereas in PowerShell Core the problem only surfaces with advanced functions.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nfunction foo {\r\n<#\r\n  .EXAMPLE\r\n  foo bar\r\n#>  \r\n  param()\r\n}\r\nGet-Help foo -Examples\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nWindows:\r\n\r\n```none\r\nNAME\r\n    foo\r\n    \r\nSYNOPSIS\r\n    \r\n    -------------------------- EXAMPLE 1 --------------------------\r\n    \r\n    PS C:\\> foo bar\r\n```\r\n\r\nUnix:\r\n\r\n```none\r\nNAME\r\n    foo\r\n    \r\nSYNOPSIS\r\n    \r\n    -------------------------- EXAMPLE 1 --------------------------\r\n    \r\n    PS /> foo bar\r\n```\r\n\r\n\r\nActual behavior\r\n---------------\r\n\r\nAll platforms:\r\n\r\n```none\r\nNAME\r\n    foo\r\n    \r\nSYNOPSIS\r\n    \r\n    -------------------------- EXAMPLE 1 --------------------------\r\n    \r\n    PS C:\\>foo bar\r\n```\r\n\r\n* `C:\\` is used even on Unix-like platforms.\r\n\r\n* A space is missing after the `>` char.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n\r\n```powershell\r\nPowerShell Core v6.0.2 on macOS 10.13.4\r\nPowerShell Core v6.0.2 on Ubuntu 16.04.4 LTS\r\nPowerShell Core v6.0.2 on Microsoft Windows 10 Pro (64-bit; Version 1709, OS Build: 16299.371)\r\nWindows PowerShell v5.1.16299.251 on Microsoft Windows 10 Pro (64-bit; Version 1709, OS Build: 16299.371)\r\n```\r\n",
  "closed_at": "2018-08-30T19:37:31Z",
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Hmm - the prompt string should probably just be 'PS >' in all cases. Showing the operation  being done in the root of the file system on either *nix or Windows is undesirable..",
      "created_at": "2018-05-28T22:25:15Z",
      "updated_at": "2018-05-28T22:25:15Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Eliminating the `C:\\` makes sense to me given the cross-platform support.  But I do prefer the space after the `>`.  Perhaps `PS> foo bar` or `PS > foo bar`?",
      "created_at": "2018-05-28T22:35:02Z",
      "updated_at": "2018-05-28T22:35:02Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "I'll make it \"PS > \". Does that work for everyone?",
      "created_at": "2018-05-28T22:36:40Z",
      "updated_at": "2018-05-28T22:36:40Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "My preference is for `PS>\u00a0` (space only _after_ the `>`, given that in real prompts there's no space (immediately) _before_ it) rather than `PS >\u00a0`, but either way is an improvement.",
      "created_at": "2018-05-28T22:44:46Z",
      "updated_at": "2018-05-28T22:44:46Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 I'm not sure what you mean by 'real prompt'.",
      "created_at": "2018-05-29T01:29:01Z",
      "updated_at": "2018-05-29T01:29:01Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@BrucePay: I mean an actual prompt string used in an interactive session, as defined by the default `prompt()` function:\r\n\r\n```powershell\r\nPS> Get-Content function:prompt\r\n\r\n\"PS $($executionContext.SessionState.Path.CurrentLocation)$('>' * ($nestedPromptLevel + 1)) \";\r\n# ...\r\n```\r\n\r\nTo paraphrase: in a non-nested session (without having customized the `prompt` function), you'll see:\r\n\r\n```none\r\nPS {/path/to/current/filesystem-location}>\u00a0#<-- cursor shows here, after '> '\r\n```\r\n\r\nOn Windows, if `C:\\` happens to be the filesystem location: `PS C:\\>\u00a0`; on Unix, if `/` happens to be the current filesystem location: `PS />\u00a0` (note the space _following_ the `>` in both instances).\r\n\r\nNow, if we intend to remove the - incidental - filesystem path from our example prompt string, we get to _choose_ whether we get to keep the space _before_ the `>`, between the `PS` and the path.\r\n\r\nIn the interest of showing the prompt as a more readily recognizable _unit_ (a prefix), my preference is to use `PS>\u00a0` rather than `PS >\u00a0`.\r\n",
      "created_at": "2018-05-29T01:41:19Z",
      "updated_at": "2018-05-29T01:49:05Z"
    }
  ],
  "created_at": "2018-05-25T20:12:24Z",
  "labels": [
    "Issue-Bug",
    "WG-Interactive-HelpSystem",
    "Resolution-Fixed"
  ],
  "number": 6938,
  "state": "closed",
  "title": "Get-Help -Example should put a space after '>' and shouldn't use a Windows path on Unix",
  "updated_at": "2018-08-31T03:37:42Z"
}