{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2915",
  "author": "yanxyz",
  "body": " Use the lastest PowerShell to create a symbolic link folder:\r\n\r\n```powershell\r\nNew-Item -ItemType Directory .\\a\r\nNew-Item .\\a\\t.txt -Value \"hello\"\r\nNew-Item -ItemType SymbolicLink -Name .\\d  -Value .\\a\r\n# The Mode property is empty in the result of above cmdlet\r\nGet-ItemPropertyValue .\\d -Name Mode\r\n# Get-ItemPropertyValue : Exception getting \"Mode\": \"\u53e5\u67c4\u65e0\u6548\u3002\"\r\n# My OS language is Chinese\uff0c \"\u53e5\u67c4\u65e0\u6548\" means \"invalid handler\"\r\n```\r\n\r\nThe big problem is that the symbolic link  `d` created above can't be opened. When using the system default PowerShell\uff08PowerShell 5.1, My OS is Windows 10 x64\uff09 to create a symbolic link folder, it works well.  Another question, now use the lastest PowerShell to remove the symbolic link that is created by the system default PowerShell \r\n\r\n```powershell\r\n> Remove-Item .\\d -Recurse\r\n# Remove-Item : F:\\test\\test-powershell\\Symlink\\d is an NTFS junction point. Use the Force parameter to delete or modify this object.\r\n```\r\n\r\nIt says \"d is an NTFS junction point\", well,   `d` is a symbolic link\uff0cisn't it?\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nSerializationVersion           1.1.0.1\r\nBuildVersion                   3.0.0.0\r\nWSManStackVersion              3.0\r\nGitCommitId                    v6.0.0-alpha.14\r\nPSEdition                      Core\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nCLRVersion\r\nPSRemotingProtocolVersion      2.3\r\nPSVersion                      6.0.0-alpha\r\n```\r\n\r\n",
  "closed_at": "2017-04-14T21:23:14Z",
  "comments": [
    {
      "author": "mwrock",
      "author_association": "CONTRIBUTOR",
      "body": "I'm seeing this as well:\r\n\r\n```\r\nNew-Item -Path src -ItemType SymbolicLink -value C:\\dev\\habitat\\components\\hab\r\n```\r\n\r\nthen:\r\n```\r\n[HAB-STUDIO] C:\\hab\\studios> cd src\r\ncd : Cannot find path 'src' because it does not exist.\r\nAt line:1 char:1\r\n+ cd src\r\n+ ~~~~~~\r\n    + CategoryInfo          : ObjectNotFound: (src:String) [Set-Location], ItemNotFoundE\r\n   xception\r\n    + FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.SetLocationComm\r\n   and\r\n```\r\nHowever it works fine on shipping powershell 5.1 on windows 10.",
      "created_at": "2017-01-15T10:09:14Z",
      "updated_at": "2017-01-15T10:09:14Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "The problem still exists as of alpha17.\r\n\r\nWhat appears to be happening is that in Core the link is mistakenly created as a _file_ symlink rather than a _directory_ symlink.\r\n\r\nYou can verify this with `cmd /c dir /al d`, which in PS Core yields something like (note the `<SYMLINK>`, which should be `<SYMLINKD>`):\r\n\r\n```\r\n04/06/2017  04:12 PM    <SYMLINK>      d [C:\\Users\\jdoe\\Desktop\\pg\\a]\r\n```\r\n\r\nwhereas in Windows PS it correctly yields something like:\r\n\r\n```\r\n04/06/2017  04:12 PM    <SYMLINKD>      d [C:\\Users\\jdoe\\Desktop\\pg\\a]\r\n```\r\n\r\nI agree that the error message mentioning a _junction point_ rather than a symbolic link is misleading, but it sounds like this problem may go away on its own [once `-Force` is no longer needed](https://github.com/PowerShell/PowerShell/issues/621#issuecomment-287934652).\r\n\r\n",
      "created_at": "2017-04-06T20:29:42Z",
      "updated_at": "2017-04-06T20:29:42Z"
    },
    {
      "author": "jeffbi",
      "author_association": "CONTRIBUTOR",
      "body": "Actually, the -Force issue is not related to this. I was just writing up my own version of this issue when I saw this conversation.\r\n\r\nIn Windows PS 5.1, `New-Item -ItemType SymbolicLink` would create a directory symbolic link (`<SYMLINKD>`) when the target was a directory, a file symbolic link (`<SYMLINK>`) when the target was a file, and throw an `ObjectNotFound` error if the target did not exist.\r\n\r\nIt appears that at some point the cmdlet was changed to bring it more in line with the Windows `mklink` and Unix `ln` commands, allowing a symbolic link to be created that linked to a non-existent item. In making that change, the ability to create directory symbolic links to existing directories was (presumably) inadvertently lost.\r\n\r\nSince I'm working in this area anyway, and because this is impacting my ability to write tests for #1930, I'm happy to take this on.\r\n\r\nI think, though, that there should be some conversation around whether (and how) a user should be able to deliberately create a \"file\" symbolic link to a directory with `New-Item`. `mklink` allows it, and in Unix they're all file links anyway.",
      "created_at": "2017-04-07T01:31:35Z",
      "updated_at": "2017-04-07T01:31:35Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@jeffbi: \r\n\r\nThe `-Force` issue is entirely incidental to the issue at hand - it was an aside by @yanxyz  that perhaps should have been filed as a separate issue to begin with:  it relates to _removing_ a directory symlink, whereas the issue at hand is the inability to even _create_ such a symlink.  (And, as I said, if `-Force` will no longer be required to remove a directory symlink, no one will get to see that confusing error message anyway.)\r\n\r\n> It appears that at some point the cmdlet was changed to bring it more in line with the Windows `mklink` and Unix `ln` commands, allowing a symbolic link to be created that linked to a non-existent item. In making that change, the ability to create directory symbolic links to existing directories was (presumably) inadvertently lost.\r\n\r\nThat sounds like a promising lead: see [this commit](https://github.com/PowerShell/PowerShell/pull/804) (@andschwa).\r\n\r\n> there should be some conversation around whether (and how) a user should be able to deliberately create a \"file\" symbolic link to a directory with New-Item\r\n\r\nExcellent point: ~~If you're creating a symlink to a non-existing item, in the absence of knowing that not-yet-extant item's _type_,~~ on _Windows_ you must specify whether it is a _file_ or _directory_ - and there's currently no way to specify that.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2017-04-07T01:54:55Z",
      "updated_at": "2017-04-07T07:32:35Z"
    },
    {
      "author": "jeffbi",
      "author_association": "CONTRIBUTOR",
      "body": "@mklement0 Apologies, I misread your comment.\r\n\r\nAs for creating a symlink on Windows, I think you really need to be able to specify _file_ or _directory_ whether the target item exists or not. Windows is perfectly happy to allow you to create both a _file_ and a _directory_ symlink to either a file, a directory, or a yet-to-be-created object.\r\n```\r\n03/24/2017  04:06 PM                 0 test.txt\r\n04/06/2017  10:38 PM    <DIR>          sub\r\n04/06/2017  10:38 PM    <SYMLINK>      sym-to-nix [nix]\r\n04/06/2017  10:38 PM    <SYMLINK>      sym-to-sub [sub]\r\n04/06/2017  10:39 PM    <SYMLINK>      sym-to-text [text.txt]\r\n04/06/2017  10:38 PM    <SYMLINKD>     symd-to-nix [nix]\r\n04/06/2017  10:38 PM    <SYMLINKD>     symd-to-sub [sub]\r\n04/06/2017  10:39 PM    <SYMLINKD>     symd-to-text [text.txt]\r\n```",
      "created_at": "2017-04-07T07:09:32Z",
      "updated_at": "2017-04-07T07:09:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@jeffbi Do you work on fix for the Issue?",
      "created_at": "2017-04-07T09:08:11Z",
      "updated_at": "2017-04-07T09:08:11Z"
    },
    {
      "author": "jeffbi",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Since it's getting in my way, I'm about to start.\r\n\r\nMy intention at the moment is to have the cmdlet create _file_ symlinks to targets that do not exist, and either _file_ or _directory_ symlinks to appropriate existing targets. I still believe we need the ability to have the user specify what kind of link is actually desired. This is only for Windows, as Unix uses _file_ links even to directories.",
      "created_at": "2017-04-07T17:52:25Z",
      "updated_at": "2017-04-07T18:09:59Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Ugh, so we can either:\r\n\r\n* add more enums to `-Type` (i.e. `DirectorySymbolicLink` and `FileSymbolicLink`), but that means we have to leave `SymbolicLink` and have it try to \"do the right thing\" (file link for files and non-existent targets, and directory link for directories)\r\n* add a parameter like `-SymbolicLinkType`, but now you're stuck in the dynamic parameter catch-22\r\n\r\nI understand why someone would might want to create a directory symbolic link to a non-existent target, but could someone explain why I might want to create a file-based symbolic link to a directory? ",
      "created_at": "2017-04-10T18:07:37Z",
      "updated_at": "2017-04-10T18:07:37Z"
    },
    {
      "author": "jeffbi",
      "author_association": "CONTRIBUTOR",
      "body": "@joeyaiello Honestly, I don't know why someone would want to create a file-type symbolic link to a directory. Windows allows the `mklink` command to do so---in fact it is the default behavior unless the `/D` option is explicitly given---so presumably someone thought at one time that it would be useful.\r\n\r\nUnix doesn't have the notion of a separate directory-type symbolic link, so new enums for `DirectorySymbolicLink` and `FileSymbolicLink` would be meaningless for Linux and OS X. The Linux implementation of `ln` has a `-d` switch for creating directory _hard_ links, but that's pretty much never actually allowed, even for the superuser. Combining the `-d` switch with the `-s` switch (even on an NTFS volume) simply ignores the `-d` and creates a \"normal\" sym link. The OS X version of `ln` does not even offer the option.",
      "created_at": "2017-04-10T18:47:28Z",
      "updated_at": "2017-04-10T18:47:28Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Well, it looks like your PR (#3509) is doing the right thing for now, If people desperately need directory symlinks to non-existent targets, we'll figure it out then. ",
      "created_at": "2017-04-10T23:46:12Z",
      "updated_at": "2017-04-10T23:46:12Z"
    },
    {
      "author": "jeffbi",
      "author_association": "CONTRIBUTOR",
      "body": "Sorry, I'm getting ahead of myself a bit. If you want to put this off until more discussion happens, I'm fine with that. I suggested the discussion, you'd think I'd be patient enough to let it happen.\r\n\r\nIn the Pester tests for #1930 (PR #3441), I'd rather not have to shell out the `mklink` and `ln` commands for testing with links, so I'll hold off on completing that PR until a decision is made on this one.",
      "created_at": "2017-04-11T00:17:37Z",
      "updated_at": "2017-04-11T00:17:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@jeffbi I see that you have already done a full analysis \ud83d\udc4d  and we can continue to work on your PR.\r\nIt would be great to do a \"full specification\" or \"full description\" of the behaivor and place it in description of the PR.\r\nI also want to add that we would be good to do warnings in unusual cases (non-exist targets, file to directory links).",
      "created_at": "2017-04-11T03:50:24Z",
      "updated_at": "2017-04-11T03:50:24Z"
    },
    {
      "author": "jeffbi",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov I've updated the PR's description with additional details about how links are created.\r\n\r\nAs for warnings about \"unusual cases\", what's unusual to you and I may not be unusual for others. I can imagine scenarios for creating sym links to yet-be-created items. And keep in mind that file-type sym links to directories is the default behavior of `mklink` when not explicitly given the `/D` switch.",
      "created_at": "2017-04-11T22:55:37Z",
      "updated_at": "2017-04-11T22:55:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@jeffbi Thanks for clarify! I thought more about typos in the console when the user can quietly get a dead link \ud83d\ude15 ",
      "created_at": "2017-04-12T04:32:24Z",
      "updated_at": "2017-04-12T04:32:24Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@jeffbi Is `Remove-Item` on a symbolic directory also resolved via #3509? If not, is it tracked by another issue?",
      "created_at": "2017-04-14T21:25:38Z",
      "updated_at": "2017-04-14T21:25:38Z"
    },
    {
      "author": "jeffbi",
      "author_association": "CONTRIBUTOR",
      "body": "No, the `Remove-item` issue is not resolved by #3509. I have a separate set of fixes for #621. What #3509 gives me is, like #3441, the ability to use the fixed `New-Item` in tests for symlinks.",
      "created_at": "2017-04-14T22:17:04Z",
      "updated_at": "2017-04-14T22:19:42Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@jeffbi Got it. Thank you for fixing this issue!",
      "created_at": "2017-04-14T23:36:39Z",
      "updated_at": "2017-04-14T23:36:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "\ud83d\udc4d ",
      "created_at": "2017-04-15T09:40:47Z",
      "updated_at": "2017-04-15T09:40:47Z"
    }
  ],
  "created_at": "2016-12-21T11:42:56Z",
  "labels": [
    "Issue-Bug",
    "WG-Cmdlets",
    "Resolution-Fixed"
  ],
  "number": 2915,
  "state": "closed",
  "title": "New-Item -ItemType SymbolicLink folder cannot be opened",
  "updated_at": "2017-04-15T09:41:07Z"
}