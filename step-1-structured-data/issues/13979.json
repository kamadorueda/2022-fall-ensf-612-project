{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13979",
  "author": "gregzakh",
  "body": ".",
  "closed_at": "2020-11-03T19:20:57Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "`&` as a suffix is an operator that places the previous pipeline in a new job for execution. It also acts as a statement separator much like `;` does.\r\n\r\nSo in each of those examples the `[type]` is run in a background job and the following statement is sent to the current session as regular output. You can see the output from the background job by doing `Get-Job | Receive-Job`\r\n\r\nThe first example is precisely equivalent to running `[char] &` and `{!{}}` as two completely separate commands.\r\n\r\nIf your intention is to use `&` as the normal invocation operator it needs to be the _first_ thing in the statement, and given the reproduction examples given here I'd imagine you want to cast the result of some operation to a specific type after it completes. In that case you'd use parentheses like so: `[char](& {!{}})`",
      "created_at": "2020-11-03T18:42:24Z",
      "updated_at": "2020-11-03T18:42:57Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Not really sure what you're after here. It's how the operator works. There *is* a payload for the job. Just as you can run `[string]` in a prompt to get back type information, you can run it in a job as well.\r\n\r\nPowerShell is a tool, and you can use it wisely or unwisely as you please. We don't take hammers off the shelves over a couple of bent nails. \ud83d\ude42 ",
      "created_at": "2020-11-03T19:09:26Z",
      "updated_at": "2020-11-03T19:09:59Z"
    }
  ],
  "created_at": "2020-11-03T18:34:51Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 13979,
  "state": "closed",
  "title": ".",
  "updated_at": "2020-11-03T19:20:57Z"
}