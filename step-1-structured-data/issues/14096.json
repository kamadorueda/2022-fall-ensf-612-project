{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14096",
  "author": "IanBAdams",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\nCopy and paste the following code into a PowerShell 7.1 console.\r\n\r\nIf ($PSEdition -Eq 'Core' -And $PSVersionTable.PSVersion.ToString() -Like '7.*') {\r\n    $ReferencedAssemblies = 'System.Management.Automation.dll','System.Drawing.dll','PresentationFramework.dll','PresentationCore.dll','WindowsBase.dll','System.Xaml.dll'\r\n} ElseIf ($PSEdition -Eq 'Desktop' -And $PSVersionTable.PSVersion.ToString() -Like '5.1.*') {\r\n    $ReferencedAssemblies = 'System.Management.Automation.dll','System.Drawing.dll','WPF\\PresentationFramework.dll','WPF\\PresentationCore.dll','WPF\\WindowsBase.dll','System.Xaml.dll'\r\n} Else {\r\n    Throw 'Unsupported PowerShell version.'\r\n}\r\nAdd-Type -ReferencedAssemblies $ReferencedAssemblies -TypeDefinition @\"\r\nusing System.Management.Automation;\r\nusing System.Windows.Media;\r\nusing System.Drawing;\r\n\r\nnamespace AnyBox\r\n{\r\n    public enum InputType {\r\n        None, Text, FileOpen, FileSave, FolderOpen, Checkbox, Password, Date, Link\r\n    };\r\n    public enum MessagePosition { Top, Left };\r\n    public enum SetPresentation { ComboBox, Radio, Radio_Wide };\r\n    public enum DataGridSelectionMode { None, SingleCell, SingleRow, MultiRow };\r\n\r\n    public enum WindowStartupLocation { Center, Top, TopLeft, TopRight, Bottom, BottomLeft, BottomRight };\r\n\r\n    public class AnyBox\r\n    {\r\n        public string Icon;\r\n        public string Title;\r\n        public string Image;\r\n        public string[] Message;\r\n        public object[] Prompts;\r\n        public object[] Buttons;\r\n        public string CancelButton;\r\n        public string DefaultButton;\r\n        public System.UInt16 ButtonRows = 1;\r\n        public string[] Comment;\r\n        public string ContentAlignment = \"Left\";\r\n        public bool CollapsibleGroups;\r\n        public bool CollapsedGroups;\r\n        public System.Management.Automation.ScriptBlock PrepScript;\r\n        public System.Windows.Media.FontFamily FontFamily = new System.Windows.Media.FontFamily(\"Segoe UI\");\r\n        public System.UInt16 FontSize = 12;\r\n        public System.Windows.Media.Brush FontColor = System.Windows.Media.Brushes.Black;\r\n        public System.Windows.Media.Brush BackgroundColor;\r\n        public System.Windows.Media.Brush AccentColor = System.Windows.Media.Brushes.Gainsboro;\r\n        public System.Windows.WindowStyle WindowStyle = System.Windows.WindowStyle.SingleBorderWindow;\r\n        public System.Windows.ResizeMode ResizeMode = System.Windows.ResizeMode.CanMinimize;\r\n        public bool NoResize;\r\n        public System.UInt16 MinHeight = 50;\r\n        public System.UInt16 MinWidth = 50;\r\n        public System.UInt16 MaxHeight = 0;\r\n        public System.UInt16 MaxWidth = 0;\r\n        public bool Topmost;\r\n        public bool HideTaskbarIcon;\r\n        public System.UInt32 Timeout;\r\n        public bool Countdown;\r\n        public bool ProgressBar;\r\n        public System.Management.Automation.ScriptBlock While;\r\n        public WindowStartupLocation WindowStartupLocation = WindowStartupLocation.Center;\r\n        public System.Windows.Window ParentWindow;\r\n        public object[] GridData;\r\n        public bool GridAsList;\r\n        public DataGridSelectionMode SelectionMode = DataGridSelectionMode.SingleCell;\r\n        public bool NoGridSearch;\r\n    }\r\n\r\n    public class Prompt\r\n    {\r\n        public string Name;\r\n        public string Tab;\r\n        public string Group;\r\n        public InputType InputType = InputType.Text;\r\n        public string Message;\r\n        public MessagePosition MessagePosition = MessagePosition.Top;\r\n        public string Alignment;\r\n        public System.UInt16 FontSize;\r\n        public string FontFamily;\r\n        public string FontColor;\r\n        public string DefaultValue;\r\n        public System.UInt16 LineHeight = 1;\r\n        public bool ReadOnly = false;\r\n        public string[] ValidateSet;\r\n        public SetPresentation ShowSetAs = SetPresentation.ComboBox;\r\n        public string RadioGroup;\r\n        public bool ValidateNotEmpty = false;\r\n        public System.Management.Automation.ScriptBlock ValidateScript;\r\n        public bool ShowSeparator = false;\r\n        public bool Collapsible = false;\r\n        public bool Collapsed = false;\r\n    }\r\n\r\n    public class Button\r\n    {\r\n        public string Name;\r\n        public string Text;\r\n        public string ToolTip;\r\n        public bool IsCancel = false;\r\n        public bool IsDefault = false;\r\n        public System.Management.Automation.ScriptBlock OnClick;\r\n    }\r\n}\r\n\"@ -ErrorAction 'Stop'\r\n\r\n\r\n```\r\n\r\n## Expected behavior\r\n\r\n```none\r\nThe above code should complete without errors. This is the case with PowerShell 5.1.* and 7.0.*.\r\n\r\nThe above code is part of dm3ll3n / AnyBox from GitHub which my scripts use. Originally the code did not work with PowerShell 7.0.* but a simple amendment of the -ReferencedAssemblies corrected this.\r\n\r\n```\r\n\r\n## Actual behavior\r\n\r\n```none\r\nReceive the following error:\r\n\r\nAdd-Type: error CS1705: Assembly 'PresentationCore' with identity 'PresentationCore, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' uses 'WindowsBase, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' which has a higher version than referenced assembly 'WindowsBase' with identity 'WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'\r\n\r\nThe only open issues I can find that look remotely similar were: #3779, #9599 and #12781. However, they seemed to be more about missing assemblies rather than mismatched versions.\r\n\r\n\r\n```\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.0\r\nPSEdition                      Core\r\nGitCommitId                    7.1.0\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "IanBAdams",
      "author_association": "NONE",
      "body": "By replacing the code:\r\n\r\nIf ($PSEdition -Eq 'Core' -And $PSVersionTable.PSVersion.ToString() -Like '7.*') {\r\n    $ReferencedAssemblies = 'System.Management.Automation.dll','System.Drawing.dll','PresentationFramework.dll','PresentationCore.dll','WindowsBase.dll','System.Xaml.dll'\r\n} ElseIf ($PSEdition -Eq 'Desktop' -And $PSVersionTable.PSVersion.ToString() -Like '5.1.*') {\r\n    $ReferencedAssemblies = 'System.Management.Automation.dll','System.Drawing.dll','WPF\\PresentationFramework.dll','WPF\\PresentationCore.dll','WPF\\WindowsBase.dll','System.Xaml.dll'\r\n} Else {\r\n    Throw 'Unsupported PowerShell version.'\r\n}\r\n\r\nwithin the Steps to reproduce section by:\r\n\r\nIf ($PSVersionTable.PSVersion.ToString() -Like '7.0.*') {\r\n    $ReferencedAssemblies = 'System.Management.Automation.dll','System.Drawing.dll','PresentationFramework.dll','PresentationCore.dll','WindowsBase.dll','System.Xaml.dll'\r\n} ElseIf ($PSVersionTable.PSVersion.ToString() -Like '7.1.*') {\r\n    $PwshPath = Split-Path -Parent (Get-Command -Name pwsh.exe).Path\r\n    $ReferencedAssemblies = \"$PwshPath\\System.Management.Automation.dll\",\"$PwshPath\\System.Drawing.dll\",\"$PwshPath\\PresentationFramework.dll\",\"$PwshPath\\PresentationCore.dll\",\"$PwshPath\\WindowsBase.dll\",\"$PwshPath\\System.Xaml.dll\"\r\n} ElseIf ($PSVersionTable.PSVersion.ToString() -Like '5.1.*') {\r\n    $ReferencedAssemblies = 'System.Management.Automation.dll','System.Drawing.dll','WPF\\PresentationFramework.dll','WPF\\PresentationCore.dll','WPF\\WindowsBase.dll','System.Xaml.dll'\r\n} Else {\r\n    Throw 'Unsupported PowerShell version.'\r\n}\r\nAdd-Type -ReferencedAssemblies $ReferencedAssemblies -TypeDefinition @\"\r\n\r\nseems to allow the code to complete successfully and allows dm3ll3n / AnyBox from GitHub to work as expected against PowerShell versions 5.1, 7.03 and 7.1. I haven\u2019t installed PowerShell 7.2 but I would guess similar code to that used for 7.1 may be required.\r\n\r\nWhether or not I should have to fully qualify the paths for the referenced assemblies for PowerShell version 7.1 isn\u2019t clear to me. The documentation for Add-Type indicates that Add-Type looks for assemblies in a ref folder under the folder that contains pwsh.dll. However, this does not contain System.Management.Automation.dll but this is included within the folder that contains pwsh.dll. The documentation also indicates that the default .NET assemblies are no longer included by default from PowerShell 6 but I don\u2019t have to fully qualify the assemblies for version 7.0. So, I\u2019m a bit confused (nothing new there). Anyway, I thought I would post my findings so that changes could be made, if necessary. In the meantime, I\u2019m happy because I\u2019ve got something I can continue testing my scripts against PowerShell 7.1 with.\r\n",
      "created_at": "2020-11-20T15:02:53Z",
      "updated_at": "2020-11-20T15:02:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems we have a separate issue to improve how Add-Type cmdlet works/finds reference assemblies.",
      "created_at": "2021-01-21T07:33:32Z",
      "updated_at": "2021-01-21T07:33:32Z"
    },
    {
      "author": "redoz",
      "author_association": "NONE",
      "body": "@iSazonov Do you have a reference to that issue? I just discovered one of my old PS modules also broke due to this.",
      "created_at": "2021-06-07T12:49:48Z",
      "updated_at": "2021-06-07T12:49:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I just discovered one of my old PS modules also broke due to this.\r\n\r\nI guess you need to manually create right reference as demonstrated above.",
      "created_at": "2021-06-08T05:12:38Z",
      "updated_at": "2021-06-08T05:12:38Z"
    }
  ],
  "created_at": "2020-11-15T18:31:34Z",
  "number": 14096,
  "state": "open",
  "title": "Add-Type Mismatched Assemblies",
  "updated_at": "2021-06-08T05:12:39Z"
}