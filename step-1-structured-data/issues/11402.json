{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11402",
  "author": "lukeb1961",
  "body": "function Get-GACAssemblyPath {\r\n  PARAM ([Parameter(Mandatory=$true)][string] $AssemblyName)\r\n  $GAC = Join-Path -Path (Join-Path -Path $env:WINDIR -ChildPath '\\assembly\\GAC_MSIL') -ChildPath $AssemblyName \r\n  try {\r\n    (Get-ChildItem -Path (Get-ChildItem -Path $GAC -EA STOP).FullName -EA STOP).FullName\r\n  }\r\n  catch { }\r\n}\r\n\r\nAdd-Type -Path (Get-GACAssemblyPath -AssemblyName 'Microsoft.Office.Interop.Outlook')  #PS5/PS7 compatible\r\n\r\n$Outlook = New-Object -ComObject 'Outlook.Application'\r\n$MAPI = $Outlook.GetNamespace('MAPI')\r\n\r\nRegister-ObjectEvent -InputObject $Outlook -EventName 'AdvancedSearchComplete' -ErrorAction STOP # FAILS on PS7\r\n\r\nPS C:\\> Cannot register for the specified event. An event with the name 'AdvancedSearchComplete' does not exist. (Parameter 'eventName')\r\nAt C:\\test-registerEvent.ps1:15 char:1\r\n+ Register-ObjectEvent -InputObject $Outlook -EventName 'AdvancedSearch \u2026\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidArgument: (System.__ComObject:__ComObject) [Register-ObjectEvent], ArgumentException\r\n    + FullyQualifiedErrorId : INVALID_REGISTRATION,Microsoft.PowerShell.Commands.RegisterObjectEventCommand\r\nPS C:\\>\r\n\r\nPS C:\\> $PSversiontable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-rc.1\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-rc.1\r\nOS                             Microsoft Windows 10.0.19041\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}       \r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\nPS C:\\> \r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw If you have time could you please point where is root of the issue?",
      "created_at": "2019-12-20T08:07:10Z",
      "updated_at": "2019-12-20T08:07:10Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Seems like the main difference is that `Marshal.GetTypeFromCLSID` doesn't check primary interop assemblies in core. So in Windows PowerShell it returns `ApplicationClass` from the PIA and in Core it returns `__ComObject`.\r\n\r\nAs a workaround you can call the constructor for `ApplicationClass` directly instead of going through `New-Object`:\r\n\r\n```powershell\r\n# You also need to import the \"office.dll\" assembly. If you're loading an assembly\r\n# from the GAC in core then you need to manually import all dependencies. A easier\r\n# route would be using something like nuget to manage and distribute the assemblies\r\n# with the script.\r\nAdd-Type -Path (Get-GACAssemblyPath -AssemblyName office)\r\nAdd-Type -Path (Get-GACAssemblyPath -AssemblyName Microsoft.Office.Interop.Outlook)\r\n\r\n# This will be properly typed and still functional\r\n$outlook = [Microsoft.Office.Interop.Outlook.ApplicationClass]::new()\r\n$mapi = $outlook.GetNamespace('MAPI')\r\n\r\nRegister-ObjectEvent -InputObject $outlook -EventName AdvancedSearchComplete -ErrorAction Stop\r\n```",
      "created_at": "2019-12-20T13:43:27Z",
      "updated_at": "2019-12-20T13:43:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Is this a regression from 5.1, 6.0?",
      "created_at": "2019-12-20T16:24:41Z",
      "updated_at": "2019-12-20T16:24:41Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "I would guess anything after 5.1, but I can confirm it reproduces on 6.2.3 as well as 7 rc1",
      "created_at": "2019-12-20T16:58:25Z",
      "updated_at": "2019-12-20T16:58:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I did not found that we would change in the code but I feel we could/should fix this because New-Object is native for PowerShell.",
      "created_at": "2019-12-20T18:04:31Z",
      "updated_at": "2019-12-20T18:04:31Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> I did not found that we would change in the code but I feel we could/should fix this because New-Object is native for PowerShell.\r\n\r\nI think in order to fix this on the PowerShell end, `New-Object` would have to implement the logic of looking up registered primary interop assemblies in the registry.  Then fall back to `Marshal.GetTypeFromCLSID` if one is not found.",
      "created_at": "2019-12-21T14:23:16Z",
      "updated_at": "2019-12-21T14:23:16Z"
    },
    {
      "author": "lukeb1961",
      "author_association": "NONE",
      "body": "just FYI, using the suggestion from SeeminglyScience the full script runs fine. It is doing a search for an Outlook folder then an AdvancedSearch for messages with a subject starting with X or Y.\r\nPS5 it take 8-10 seconds to find the 5 messages.  \r\nPS7 is consistently around 35-38 seconds.\r\n",
      "created_at": "2019-12-24T01:28:53Z",
      "updated_at": "2019-12-24T01:28:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Could you please triage the regression issue?",
      "created_at": "2020-01-31T12:50:37Z",
      "updated_at": "2020-01-31T12:50:37Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov This looks like a regression in .NET Core. Do you mind opening an issue in https://github.com/dotnet/runtime repo?",
      "created_at": "2020-01-31T17:28:04Z",
      "updated_at": "2020-01-31T17:28:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Thanks! They would want to see C# repo. I am not sure that I can do. \r\nI will be on last resort :-) if @lukeb1961 or @SeeminglyScience  open the issue.",
      "created_at": "2020-01-31T17:56:14Z",
      "updated_at": "2020-01-31T17:56:14Z"
    }
  ],
  "created_at": "2019-12-19T07:08:21Z",
  "labels": [
    "Issue-Question",
    "WG-Engine-Performance",
    "WG-Cmdlets-Utility"
  ],
  "number": 11402,
  "state": "open",
  "title": "Register-ObjectEvent fails for Microsoft.Office.Interop.Outlook",
  "updated_at": "2020-01-31T17:56:14Z"
}