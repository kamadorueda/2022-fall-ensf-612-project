{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9270",
  "author": "musm",
  "body": "# Summary of the new feature/enhancement\r\nAdd colored output so when performing `gci` we have an output that is similar to the colored output in a linux shell.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nhttps://github.com/joonro/Get-ChildItemColor",
  "closed_at": "2021-07-12T18:07:30Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We could track this in  #7857 PSMore.",
      "created_at": "2019-04-02T05:56:02Z",
      "updated_at": "2019-04-02T05:56:02Z"
    },
    {
      "author": "musm",
      "author_association": "NONE",
      "body": "Is the PSMore project actively maintained any more ? It seems not. ",
      "created_at": "2019-04-08T19:37:34Z",
      "updated_at": "2019-04-08T19:37:34Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@musm This project is not even started.",
      "created_at": "2019-04-09T13:56:23Z",
      "updated_at": "2019-04-09T13:56:23Z"
    },
    {
      "author": "musm",
      "author_association": "NONE",
      "body": "Bump, it doesn't seem like it's activate at all? ",
      "created_at": "2019-10-28T04:47:22Z",
      "updated_at": "2019-10-28T04:47:22Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "We want to wait until we have a consistent way within the engine to support attributed text",
      "created_at": "2019-10-28T04:58:28Z",
      "updated_at": "2019-10-28T04:58:28Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I have an implementation here https://github.com/PowerShell/PowerShell/pull/14403\r\n\r\n![image](https://user-images.githubusercontent.com/11859881/102252463-f75f7700-3eba-11eb-9308-19c9d4f16b6f.png)\r\n\r\nDoes the design look reasonable?  Are there other default extensions (with colors/styles) that should be included by default?\r\n\r\nOriginally I considered supporting images and audio files, but don't necessarily want to add a huge number of entries to the extension hashtable.",
      "created_at": "2020-12-15T17:29:43Z",
      "updated_at": "2020-12-15T17:50:35Z"
    },
    {
      "author": "bfoster68",
      "author_association": "NONE",
      "body": "Love this idea because readability is paramount",
      "created_at": "2020-12-15T18:00:18Z",
      "updated_at": "2020-12-15T18:00:18Z"
    },
    {
      "author": "musm",
      "author_association": "NONE",
      "body": "Love it. I was never keen on how Ubuntu gives directories a background color, and would be happy if we did not copy that stylistic choice. A distinct foreground color to distinguish folders without a background would be my preference. ",
      "created_at": "2020-12-15T18:06:33Z",
      "updated_at": "2020-12-15T18:06:33Z"
    },
    {
      "author": "petervandivier",
      "author_association": "NONE",
      "body": "Allowing users to configure `$PROFILE` to customise the colour theme or selectively override defaults for this seems pretty important to me. Even if it's an arcane syntax, the ability to choose (as with [`$LS_COLORS`](https://www.howtogeek.com/307899/how-to-change-the-colors-of-directories-and-files-in-the-ls-command/) for example) should be a first-release feature.",
      "created_at": "2020-12-15T22:38:26Z",
      "updated_at": "2020-12-15T22:38:26Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "\ud83d\ude16 \ud83d\ude15 \ud83d\ude20 \r\n\r\nWhy are core team members wasting time implementing stuff that's [already done](https://github.com/devblackops/Terminal-Icons)\r\nI thought we had **pledged** to stop implementing things in the core that are easily doable by modules? ",
      "created_at": "2020-12-15T22:39:44Z",
      "updated_at": "2020-12-15T22:39:44Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@Jaykul I did this on the weekend on my free time.",
      "created_at": "2020-12-16T01:32:27Z",
      "updated_at": "2020-12-16T01:32:27Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "Using ansi escape sequences directly isn't very user friendly or verbose. \n\nI still don't understand why we aren't putting color support directly into the formatting/output layer. ",
      "created_at": "2020-12-16T01:57:44Z",
      "updated_at": "2020-12-16T01:57:44Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@ThomasNieto for consoles, ANSI escape sequences ARE the de facto standard.  PowerShell needs to work with existing native commands that already output ANSI escape sequences.  In this case, the end user does NOT need to work directly with ANSI escape sequences.  That is the whole point of `$PSStyle`.  The formatting shows the \"raw\" ANSI escape sequences for users that understand them, but otherwise they are colored to what would be rendered.  If a user wanted to change `Directory` to be just blue, they would do:\r\n\r\n```powershell\r\n$PSStyle.FileInfo.Directory = $PSStyle.Foreground.Blue\r\n```\r\n",
      "created_at": "2020-12-16T03:09:15Z",
      "updated_at": "2020-12-16T03:09:15Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@ThomasNieto I think you're missing the point of `$PSStyle` that I described above.  Users don't need to understand ANSI escape sequences.  If you want red and green in a string in PowerShell script, it would look like:\r\n\r\n```powershell\r\n\"$($PSStyle.Foreground.Red)Merry $($PSStyle.Foreground.Green)Christmas\"\r\n```\r\n\r\nOr combine multiple styles:\r\n\r\n```powershell\r\n\"$($PSStyle.Italic+$PSStyle.Foreground.Yellow+$PSStyle.Background.Magenta)Hello\"\r\n```\r\n\r\nWith the automatic variable, you also get tab-completion.\r\n",
      "created_at": "2020-12-16T04:55:23Z",
      "updated_at": "2020-12-16T04:55:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Users don't need to understand ANSI escape sequences.\r\n\r\nI believe most of users would prefer to pick up a predefined color theme and do not waste time manually setting dozens of parameters.\r\nWe could look on other applications. MS Office allows select one from 4 predefined themes. Notepad++ has tens \"styles\" (aka themes) and embedded editor for them.",
      "created_at": "2020-12-16T05:33:55Z",
      "updated_at": "2020-12-16T05:33:55Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "> I still don't understand why we aren't putting color support directly into the formatting/output layer.\r\n\r\nThis _is_ directly in the formatting/output layer. It's modifying the default format.ps1xml (which is in C# now, because it's faster that way)\r\n",
      "created_at": "2020-12-16T16:42:18Z",
      "updated_at": "2020-12-16T16:42:35Z"
    },
    {
      "author": "MAGOO56",
      "author_association": "NONE",
      "body": "First, I really love this idea! I have two comments:\r\n\r\n1. The leading period in the extension property seems redundant. Could this be left out?\r\n2. Can wildcarding or simple regex be used to reduce the number of entries? (eg. 'ps1xml1|ps(d|m)?1' toreplace the separate entries ps1, psd1, psm1, and ps1xml1 which have the same setting)",
      "created_at": "2021-01-14T22:49:51Z",
      "updated_at": "2021-01-14T22:49:51Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "FileInfo.Extension includes the leading period, so it would be less optimal to exclude it.  Allowing a regex will make things slower.",
      "created_at": "2021-07-07T23:48:14Z",
      "updated_at": "2021-07-07T23:52:18Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #14403, which has now been successfully released as `v7.2.0-preview.8`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0-preview.8)\n",
      "created_at": "2021-07-22T21:41:40Z",
      "updated_at": "2021-07-22T21:41:40Z"
    }
  ],
  "created_at": "2019-04-01T23:18:06Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine"
  ],
  "number": 9270,
  "state": "closed",
  "title": "Feature Request: Color output of  gci ",
  "updated_at": "2021-07-22T21:41:40Z"
}