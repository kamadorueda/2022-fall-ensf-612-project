{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7124",
  "author": "KirkMunro",
  "body": "This is more of a question than an issue at this point.\r\n\r\nI wonder if PowerShell could invoke Write-_Stream_ (Write-Verbose, Write-Debug, etc.) commands differently, still performing parse checking on scripts containing those commands to make sure they parse properly, but not actually invoking those commands unless the preference variable is appropriately configured or the parameter to make that stream's output show up was used directly or via $PSDefaultParameterValues.\r\n\r\nFor example, `Write-Verbose -Message 'Hello' -Verbose` would be invoked, but `Write-Debug -Message $(Get-Service | Format-List * | Out-String)` would not, unless $DebugPreference was set to something other than SilentlyContinue or Ignore).\r\n\r\nFor anyone familiar with the details surrounding how PowerShell executes commands, can someone comment on the feasibility/possibility of skipping commands that should be skipped as a way to optimize script performance? It's not hard to see how it could make a big difference, while encouraging broader use of Write-Verbose and Write-Debug at the same time (for the latter, especially if #7122 gets implemented).\r\n\r\ncc: @lzybkr",
  "closed_at": null,
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "There are certainly some significant performance gains possible, but I don't think targeting the `Write-` commands is a good approach.\r\n\r\nSome issues:\r\n\r\n* What if the command is a function or alias, not the built in cmdlet?\r\n* What if the command forces the action, e.g. `Write-Verbose \"Hi there\" -Verbose`?\r\n\r\nThese 2 issues hit general performance issues (command lookup and parameter binding) that have room for **major** improvements.\r\n\r\nIf command lookup and parameter binding are fast, I have a feeling you won't care about the minor overhead of actually calling into the `Write-` commands.",
      "created_at": "2018-06-21T17:46:23Z",
      "updated_at": "2018-06-21T17:46:23Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks @lzybkr, that's good food for thought.",
      "created_at": "2018-06-21T18:35:19Z",
      "updated_at": "2018-06-21T18:35:19Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "I came to the same question from a security and performance view, taking the following example:\r\n\r\n```\r\n$Credential = Get-Credential\r\nWrite-Debug \"Password: $(($credential.GetNetworkCredential()).Password)\"\r\n```\r\n<sub>(I suspect that the plaintext password will always be visible in memory using the above command even your not in debug mode)</sub>\r\n\r\n<del>That the `Write-Debug` evaluates the message appears from:\r\nWrite-Debug \"$(Write-Host 'Host') Debug\"\r\nWhere the word `Host` is always displayed no matter of the `$DebugPreference`</del>\r\n\r\nFrom my point of view it would make sense that the `$DebugPreference` (and similar `Write-*` cmdlets) would have (default?) `Bypass` value.\r\n",
      "created_at": "2018-10-25T15:16:42Z",
      "updated_at": "2018-10-26T10:11:40Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "`Write-Host` is explicitly coded to display by default unless you set `-InformationAction Ignore`, it's kind of what it's designed for. Subexpressions are evaluated before being passed to the command invocation.\r\n\r\nI'd also contend that silencing or skipping the write cmdlets entirely would only ever make sense if their corresponding `Action` parameter or `Preference` variable is set explicitly to `Ignore` -- in all other cases users or administrators will often want the data to be captured in a transcript if one is running, so skipping the call completely isn't often really an option.\r\n\r\n@lzybkr you mention that there are improvements to be made here. Is this a current focus for the PS team, or is this something I could take a look at? (And if so, I'd appreciate a pointer to where this code is so I or others can check it out!) \ud83d\ude04 ",
      "created_at": "2018-10-25T15:31:47Z",
      "updated_at": "2018-10-25T15:31:47Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "Hello vexx32,\r\n\r\nThanks for the comment. You are right, the string is of cause already evaluated before it is passed to the `Write-Debug` cmdlet. I wonder whether being able to provide a `ScriptBlock`  for the `-Message` parameter (which is then evaluated by the `Write-*` cmdlets: `&$Message`) would make sense.\r\n\r\nSomething like:\r\n\r\n````\r\nWrite-Verbose -Message {Get-Service | Format-List * | Out-String}\r\n````\r\n\r\nor:\r\n\r\n````\r\nWrite-Debug -Message {\"Password: $(($credential.GetNetworkCredential()).Password)\"}\r\n````\r\n\r\nOr is that where KirkMunro actually asks for?\r\n\r\n",
      "created_at": "2018-10-25T15:53:39Z",
      "updated_at": "2018-10-25T15:59:07Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I believe @KirkMunro is asking for something like [ConditionalAttribute](https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.conditionalattribute?view=netframework-4.7.2) with the difference being PowerShell would inject a runtime check for the preference variable around the call to the command.\r\n\r\n@vexx32 - the improvements I have in mind are a major work item and I'm not aware of anyone that is seriously looking at. The basic idea is to use dynamic sites (like what is used for operators and member access) for command lookup and parameter binding, basically introducing a layer on top of the existing code. These areas probably have room for more incremental improvements too, but it will take some digging with a profiler and probably some creativity combined with some deep understanding of how those areas work.",
      "created_at": "2018-10-25T16:34:51Z",
      "updated_at": "2018-10-25T16:34:51Z"
    }
  ],
  "created_at": "2018-06-21T00:57:13Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine-Performance",
    "WG-Cmdlets-Utility"
  ],
  "number": 7124,
  "state": "open",
  "title": "Possible performance enhancement with Write-* cmdlets",
  "updated_at": "2019-03-23T19:05:00Z"
}