{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13566",
  "author": "u2ill",
  "body": "I understand that when adding entries to an unordered hashtable, the order of the results will be inconsistent with the order the entries were made.  But in Powershell 5, the order was consistantly inconsistant.  Meaning, whatever order the entries were returned, they would always be returned in that order based on the same input.  In Powershell 7, again, we see the consitently inconsistent return of hashtable results - as long as the input and its order is exactly the same each time.\r\n\r\nThe problem is, the inconsistent order is not the same between PS5 and PS7.  Take the following scenario:\r\nI create a hash-table (per the steps to reproduce below), and I want to make a new string by concatenating the keys of the hash-table, in whatever order they are returned. Such as\r\n```\r\n$hash.Keys -join \"\"\r\n```\r\nwhich should produce \"test7test9test3test2test1test4test6test5test8\" in Powershell 5.\r\nNow, when I create the same hash-table in PS7, and do the key concatenation, the result is \"test7test6test3test9test1test2test4test8test5\".  The result is always the same over repeated runs in PS5.  The result is always the same over repeated runs in PS7.  But the results are different between PS5 and PS7.  \r\n\r\nThis came up because we did this type of concatenation to come up with a naming convention, and we could consistently refer to the generated names in PS5.  But now when running the same code in PS7, the generated names are different and thus breaking our scripts.\r\n\r\n## Steps to reproduce\r\n\r\n```\r\n$hash = @{}\r\n$hash.Add(\"test1\", $null)\r\n$hash.Add(\"test2\", $null)\r\n$hash.Add(\"test3\", $null)\r\n$hash.Add(\"test4\", $null)\r\n$hash.Add(\"test5\", $null)\r\n$hash.Add(\"test6\", $null)\r\n$hash.Add(\"test7\", $null)\r\n$hash.Add(\"test8\", $null)\r\n$hash.Add(\"test9\", $null)\r\n$hash.Keys\r\n```\r\n\r\n## Expected behavior\r\n\r\n```\r\ntest7\r\ntest9\r\ntest3\r\ntest2\r\ntest1\r\ntest4\r\ntest6\r\ntest5\r\ntest8\r\n```\r\n\r\n## Actual behavior\r\n\r\n```\r\ntest7\r\ntest3\r\ntest6\r\ntest9\r\ntest1\r\ntest2\r\ntest4\r\ntest8\r\ntest5\r\n```\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\nPowershell 5\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.17134.858\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.17134.858\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\nPowershell 7\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.3\r\nPSEdition                      Core\r\nGitCommitId                    7.0.3\r\nOS                             Microsoft Windows 10.0.17134\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
  "closed_at": "2020-09-03T22:42:26Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Typically the order will be inconsistent even between different sessions of the same version, in my experience.\r\n\r\nEither way, even if the hash sorting algorithm changed for some reason, that's not something PowerShell has any control over. If it changed, that would have happened at the .NET layer.\r\n\r\nAs ever, if you need an ordered dictionary, use an ordered dictionary type; PowerShell provides the `[ordered]@{ ... }` syntax for this reason. Regardless of precisely how it surfaces, the order of keys in a standard hashtable can never be guaranteed.",
      "created_at": "2020-09-03T01:26:46Z",
      "updated_at": "2020-09-03T01:27:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You could ask in .Net repository. But as @vexx32 explained it is implementation details and you should sort keys if you want predictable results.\r\nWe can not fix this in PowerShell Engine.",
      "created_at": "2020-09-03T04:56:18Z",
      "updated_at": "2020-09-03T04:57:04Z"
    },
    {
      "author": "u2ill",
      "author_association": "NONE",
      "body": "Sounds good thanks for confirming the behavior is expected and suggesting alternative ways to accomplish more predictable results.",
      "created_at": "2020-09-03T22:42:26Z",
      "updated_at": "2020-09-03T22:42:26Z"
    }
  ],
  "created_at": "2020-09-02T23:32:51Z",
  "number": 13566,
  "state": "closed",
  "title": "Order of hashtable.Keys is inconsistant between Powershell 7 and Windows Powershell 5",
  "updated_at": "2020-09-03T22:42:26Z"
}