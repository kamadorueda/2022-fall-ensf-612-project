{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12014",
  "author": "alx9r",
  "body": "`Get-Item` normally outputs System.IO.FileInfo or System.IO.DirectoryInfo objects for the FileSystem provider.  After invoking `Get-WmiObject`, however, `Get-Item` outputs PSObject objects instead.  This causes binding to any command expecting one of the specific FileSystemInfo types to fail.\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n(Get-Item .).GetType().Name\r\nGet-WmiObject bogus -ea si\r\n(Get-Item .).GetType().Name\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nDirectoryInfo\r\nDirectoryInfo\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nDirectoryInfo\r\nPSObject\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-rc.2\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-rc.2\r\nOS                             Microsoft Windows 6.3.9600\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u0393\u00c7\u00aa}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-04-16T23:57:56Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "`Get-WmiObject` is a Windows PowerShell cmdlet; by invoking that, you're importing a Windows PowerShell module, which (by the looks of it) also include Get-Item. Because the built-in remoting logic mirrors these cmdlets as _functions_ they take precedence over PowerShell Core cmdlets.\r\n\r\n/cc @PaulHigin -- looks like we need to add some explicit exclusions to cmdlets we're importing from a Windows PowerShell module.\r\n\r\n@alx9r in the meantime, I would recommend simply using `Get-CimInstance` instead, so that you don't need to invoke a Windows PowerShell session to run the command. `Get-WmiObject` has been deprecated since PowerShell v3.",
      "created_at": "2020-03-04T23:15:32Z",
      "updated_at": "2020-03-04T23:15:32Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> Get-WmiObject is a Windows PowerShell cmdlet; by invoking that, you're importing a Windows PowerShell module, which (by the looks of it) also include Get-Item\r\n\r\nNice diagnosis.\r\n\r\nYeah we need to solve the module encapsulation of the Windows PowerShell modules, and possibly exclude some WinPS modules from imports.\r\n\r\nI've been thinking we need to write a simple proxy module that only exposes the different commands from the WinPS modules.",
      "created_at": "2020-03-05T00:06:30Z",
      "updated_at": "2020-03-05T00:07:04Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@anmenaga ",
      "created_at": "2020-03-05T00:07:12Z",
      "updated_at": "2020-03-05T00:07:12Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "@vexx32 Thank you very much for explaining how that's happening.  I confirmed your explanation with this example:\r\n\r\n```PowerShell\r\n.{\r\n    Get-Command Get-Item\r\n    Get-WmiObject bogus -ea si\r\n    Get-Command Get-Item\r\n} |\r\n    % {[pscustomobject]@{\r\n        CommandType = $_.CommandType\r\n        ModulePath  = $_.Module.Path\r\n    }}\r\n\r\n```\r\nwhich outputs\r\n\r\n```\r\n\r\nCommandType ModulePath\r\n----------- ----------\r\n     Cmdlet C:\\program files\\powershell\\7\\Modules\\Microsoft.PowerShell.Management\\Microsoft.PowerShell.Management.psd1\r\n   Function C:\\Users\\un1w\\AppData\\Local\\Temp\\remoteIpMoProxy_MicrosoftPowerShellManagement_3.1.0.0_localhost_f7967f0e-9\u0393\u00c7\u00aa\r\n```",
      "created_at": "2020-03-05T14:10:25Z",
      "updated_at": "2020-03-05T14:10:25Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@rjmholt @anmenaga I'd also suggest that any cmdlets that have the same name as ones already present in the pwsh builtin modules are not automatically given proxy functions, regardless of which module is imported.",
      "created_at": "2020-03-05T14:27:17Z",
      "updated_at": "2020-03-05T14:27:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Yeah we need to solve the module encapsulation of the Windows PowerShell modules, and possibly exclude some WinPS modules from imports.\r\n\r\nIt doesn't help in the issue. We discussed this earlier. The example shows that we need \"import\" only one cmdlet from the module. And my suggestion was that we need to have a white list. Otherwise we import whole  WinPS Microsoft.PowerShell.Management and overload PS Core Microsoft.PowerShell.Management. Alternative proposal was to make second one more high priority in discovering process,",
      "created_at": "2020-03-05T16:10:11Z",
      "updated_at": "2020-03-05T16:10:11Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> Otherwise we import whole WinPS Microsoft.PowerShell.Management and overload PS Core Microsoft.PowerShell.Management\r\n\r\nMy thinking was to use a wrapper module that imports the WinPS module as a nested module and only exposes the commands that we want to add to the PS 7 session.\r\n\r\nHowever, playing with that now I'm not sure how possible that is.",
      "created_at": "2020-03-05T16:43:15Z",
      "updated_at": "2020-03-05T16:43:15Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Looks like I've found a new bug in PowerShell!\r\n\r\nTry this:\r\n\r\n```powershell\r\nNew-ModuleManifest -path ./wincompat.psd1 -NestedModules 'C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\Modules\\Microsoft.PowerShell.Management\\Microsoft.PowerShell.Management.psd1' -CmdletsToExport 'Get-EventLog'\r\n\r\nImport-Module ./wincompat.psd1\r\n\r\nGet-EventL<Tab> # Completes Get-EventLog\r\nGet-EventLog # Command not found\r\n```",
      "created_at": "2020-03-05T16:45:58Z",
      "updated_at": "2020-03-05T16:45:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I'd expect that `Import-Module ./wincompat.psd1` fail on loading .Net Framework dll and write the error.",
      "created_at": "2020-03-05T16:53:42Z",
      "updated_at": "2020-03-05T16:53:42Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> fail on loading .Net Framework dll\r\n\r\nBut we support that! The 5.1 Microsoft.PowerShell.Management.dll is importable into PowerShell. The problem is the way commands exported from it currently override things",
      "created_at": "2020-03-05T17:01:26Z",
      "updated_at": "2020-03-05T17:01:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">  we support that\r\n\r\nI guess you mean \"the binary can be loaded\" but we can not support the 5.1 module on 7.0. A similar module importing happened when we had a mess with the module paths. My suggestion was explicitly disable this for modules in the repo.\r\nMPM.dll depends on MPS.dll and SMA.dll. \r\n- Now PS Core SMA.dll has 7.0.0.0 version, Windows PS SMA.dll - 3.0.0.0. Will Windows MPM.dll load Windows PS SMA.dll?\r\n- If we cleaned up something in SMA this can cause type discover issues.\r\n",
      "created_at": "2020-03-05T17:50:04Z",
      "updated_at": "2020-03-06T16:19:39Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "@rjmholt @iSazonov @vexx32 I've been experimenting with this behavior.  My findings suggest that the impact of how PowerShell 7 resolves names is broader than just what occurs when a Windows PowerShell module is imported.  There seems to have been a change to how names are resolved between 5.1 and 7.  That change introduces name resolution side-effects, in general, _between_ modules.  I haven't to be able to reproduce that in 5.1.  I have opened #12036 which is a repro of a similar issue to this but not involving WIndows PowerShell at all.  If you have a chance please take a look at that issue too.",
      "created_at": "2020-03-05T18:00:46Z",
      "updated_at": "2020-03-05T18:01:59Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> My findings suggest that the impact of how PowerShell 7 resolves names is broader than just what occurs when a Windows PowerShell module is imported. There seems to have been a change to how names are resolved between 5.1 and 7. That change introduces name resolution side-effects, in general, between modules\r\n\r\nCan you give an example where this new behaviour is causing an issue? It would help us pin down the change and the issue",
      "created_at": "2020-03-05T19:18:43Z",
      "updated_at": "2020-03-05T19:18:43Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "Good ideas on this thread. The original issue with `Get-WmiObject` is covered by #11419",
      "created_at": "2020-03-05T19:58:18Z",
      "updated_at": "2020-03-05T19:58:18Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": ">Can you give an example where this new behaviour is causing an issue? It would help us pin down the change and the issue\r\n\r\n(I wasn't sure which \"new behavior\" you were asking about.  I [answered for the new module resolution behavior](https://github.com/PowerShell/PowerShell/issues/12036#issuecomment-595425489) over on #12036.)\r\n\r\n@rjmholt The new behavior of auto-importing of Windows PowerShell proxy commands caused a problem during the same PowerShell 5.1 to 7 transition I described [here](https://github.com/PowerShell/PowerShell/issues/12036#issuecomment-595425489) and it occurred in a similar manner to that story: I had a module that invoked `Get-WmiObject` that inadvertently loaded the wrong `Get-Item`.  Most modules that called `Get-Item` (which is a lot) then resolved to the wrong `Get-Item` which resulted in errors when the output type didn't match the input type of the downstream command.  None of those modules contained a call to `Import-Module Microsoft.PowerShell.Management` so they were all resolving `Get-Item` in the global scope.  That is a mistake, it seems, albeit not one that is obvious even now.  The solution seems to be to include explicit imports for each module within the module that uses it.",
      "created_at": "2020-03-05T20:26:00Z",
      "updated_at": "2020-03-05T22:16:49Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Thanks for looking into this so deeply @alx9r ",
      "created_at": "2020-03-05T20:32:58Z",
      "updated_at": "2020-03-05T20:32:58Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "Another idea is to replace `Get-WmiObject` with `Get-CimInstance` that is in PS-Core-compatible module `CimCmdlets`. CIM cmdlets were done as a replacement for WMI.",
      "created_at": "2020-03-05T22:11:39Z",
      "updated_at": "2020-03-05T22:11:39Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #12269, which has now been successfully released as `v7.1.0-preview.2`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.2)\n",
      "created_at": "2020-04-23T18:03:32Z",
      "updated_at": "2020-04-23T18:03:32Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #12269, which has now been successfully released as `v7.0.1`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.1)\n",
      "created_at": "2020-05-14T22:53:00Z",
      "updated_at": "2020-05-14T22:53:00Z"
    }
  ],
  "created_at": "2020-03-04T22:22:07Z",
  "labels": [
    "Issue-Question",
    "WG-Engine",
    "Resolution-Fixed"
  ],
  "number": 12014,
  "state": "closed",
  "title": "Get-Item for files outputs PSObject instead of FileSystemInfo after Get-WmiObject",
  "updated_at": "2020-05-14T22:53:00Z"
}