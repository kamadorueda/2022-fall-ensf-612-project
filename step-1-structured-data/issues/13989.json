{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13989",
  "author": "SteveL-MSFT",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nObjects that contain ETS members can cause problems when serializing to JSON.  In the case of script properties on a string, it gets stuck in a recursive loop.\r\n\r\nAs discussed in https://github.com/PowerShell/PowerShell/issues/5797, proposal is to have an ExperimentalFeature to add a `-Raw` switch that will use the BaseObject of the PSObject (effectively removing ETS members) for serialization.\r\n\r\n## PR Context\r\n\r\nFix https://github.com/PowerShell/PowerShell/issues/5797\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [x] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [x] Experimental feature name(s): Microsoft.PowerShell.Utility.PSConvertToJsonRaw\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [x] Issue filed: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/6847\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2021-06-24T00:52:44Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Although this seems to solve this particular problem, it is doubtful. The appearance of such a Raw parameter indicates that we have a poor understanding of whether we should serialize ETS properties or not. If these properties are required, then why should we exclude them from serialization? If so, is it always? If always and if we are talking about serialization, then _attributes_ are usually used to exclude properties from serialization. This approach is more general and does not require new parameters in cmdlets. If not always, then perhaps we need something like Select-Object -NoETSProperties or new cmdlet Get-PSBaseObject.\r\n",
      "created_at": "2020-11-05T18:08:06Z",
      "updated_at": "2020-11-05T18:08:06Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov I would suggest having this conversation in the issue.",
      "created_at": "2020-11-05T18:20:10Z",
      "updated_at": "2020-11-05T18:20:10Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "I almost feel like `Select-Object` should _really_ have the `-Raw` parameter so you can do:\r\n\r\n```pwsh\r\n$obj | Select-Object -Raw | ConvertTo-Json\r\n$obj | Select-Object -Raw | ConvertTo-Csv\r\n[xml]($obj | Select-Object -Raw)\r\n$obj | Select-Object -Raw | ConvertTo-Yaml\r\n```",
      "created_at": "2020-11-05T19:31:17Z",
      "updated_at": "2020-11-05T19:31:39Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "Or going down the route of having a `Remove-Member` or something like that that will remove a specific ETS property or _all_ ETS properties.",
      "created_at": "2020-11-05T19:34:38Z",
      "updated_at": "2020-11-05T19:34:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@TylerLeonhardt We continue the discussion in related issue. I believe we should investigate the issue more in depth.",
      "created_at": "2020-11-06T07:42:11Z",
      "updated_at": "2020-11-06T07:42:11Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@TylerLeonhardt:\r\n\r\nAs for why `Select-Object -Raw` isn't an option: see https://github.com/PowerShell/PowerShell/issues/5797#issuecomment-723134446\r\n\r\nAs for why `-Raw` isn't a great name, but is the closest thing to a _pattern_ that we have, after `-Bare` was turned down, in order to communicate the desire to output an _undecorated / unwrapped_ object: see #7855",
      "created_at": "2020-11-23T02:30:53Z",
      "updated_at": "2020-12-09T19:32:39Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as stale because it has been marked as requiring author feedback but has not had any activity for **15 days**. It will be closed if no further activity occurs **within 10 days of this comment**.",
      "created_at": "2020-12-08T05:00:06Z",
      "updated_at": "2020-12-08T05:00:06Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as stale because it has been marked as requiring author feedback but has not had any activity for **15 days**. It will be closed if no further activity occurs **within 10 days of this comment**.",
      "created_at": "2020-12-24T20:00:05Z",
      "updated_at": "2020-12-24T20:00:05Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee decided on a different approach https://github.com/PowerShell/PowerShell/issues/5797#issuecomment-747107494",
      "created_at": "2021-06-24T00:52:44Z",
      "updated_at": "2021-06-24T00:52:44Z"
    }
  ],
  "created_at": "2020-11-04T23:37:38Z",
  "number": 13989,
  "state": "closed",
  "title": "Add `-Raw` Experimental switch to `ConvertTo-Json` cmdlet",
  "updated_at": "2021-06-24T00:52:48Z"
}