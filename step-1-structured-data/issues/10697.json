{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10697",
  "author": "vexx32",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nRefactor Test-Connection to provide unit-based output with clearer formatting and more useful traceroute timing information.\r\n\r\n- Uses SendAsync() to send pings and adds event handler to permit Ctrl+C to cancel the cmdlet operation mid-ping (great for giving up on a long timeout).\r\n- Refactor output; both regular -Ping and -TraceRoute actions output one object per received ping, formatted to accommodate as much information as possible.\r\n- Refactor `-Traceroute` methodology to use 4 pings instead of 3:\r\n  - 1-3 initial \"discovery\" pings with low TTL to the final destination to find the router at that hop point (not displayed in output). First ping to come back with `TtlExpired` is used to target the rest of the pings.\r\n    - On Unix, `TtlExpired` is **never** reported, so we skip this step completely and just target all pings at the final destination.\r\n  - 3 followup pings to that router directly so we get proper latency and status information from the router (all rendered in output).\r\n  - This fixes an outstanding issue where traceroutes could not provide latency information on intermediate hops.\r\n- Slight refactor for `MtuSize` detection to allow it to work correctly on Unix.\r\n- Use new class types for all output in order to better provide easy access to displayed information.\r\n- Update `ValidateSet` attribute on `-MaxHops` to reflect underlying API limitations (0 is not a valid argument for PingOptions' TTL)\r\n- Fix long-standing issue with `-Traceroute` where `-MaxHops` is a valid input parameter, but is completely ignored. New behaviour is to write an error if the destination cannot be reached within the set value for `-MaxHops`, or return `$false` if also specifying `-Quiet`.\r\n- Fixed an issue where `-IPv4` and `-IPv6` were completely ignored if you supplied a valid address from the other family. Resolution is to check the AddressFamily, and if it doesn't match the provided switch, pull the host entry and find an address matching the requested family to use.\r\n  - Added some additional IPv6 tests. After running all the IPv6 tests in CI (including those originally marked -Pending) I think it best we leave them disabled. I've verified the features work in Windows 10 and Ubuntu under WSL, but Azures CI apparently doesn't have great IPv6 support, so it's a very mixed bag on what comes back for those tests. We can reenable them in future if there are improvements or alterations to CI config that might improve their reliability there.\r\n- Renamed switches:\r\n  - `-Continues` => `-Repeat` (Alias applied to maintain compatibility)\r\n  - `-MtuSizeDetect` => `-MtuSize` (Alias applied here also)\r\n\r\n## PR Context\r\n\r\nRFC: https://github.com/PowerShell/PowerShell-RFC/pull/172\r\n\r\nResolves #9235 \r\n\r\nResolves #7685\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [x] Issue filed: <!-- Number/link of that issue here -->https://github.com/MicrosoftDocs/PowerShell-Docs/issues/4987\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2019-11-18T19:33:00Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Samples of output:\r\n\r\n## Default -Ping Output\r\n\r\n![image](https://user-images.githubusercontent.com/32407840/66176419-ac49a300-e62b-11e9-94b7-85b431fd9c1b.png)\r\n\r\n## -Traceroute Output\r\n\r\n![image](https://user-images.githubusercontent.com/32407840/66263155-daf68380-e7bb-11e9-9465-3474febb0d3e.png)\r\n\r\n## -Traceroute -ResolveDestination Output\r\n\r\n![image](https://user-images.githubusercontent.com/32407840/66263129-88b56280-e7bb-11e9-8a00-ebc3dafacd8a.png)\r\n\r\n## -MtuSize Output\r\n\r\n![image](https://user-images.githubusercontent.com/32407840/66263132-979c1500-e7bb-11e9-9386-fdcf777fb131.png)\r\n\r\n## -IPv6 (with IPv4 address)\r\n\r\n![image](https://user-images.githubusercontent.com/32407840/66281871-39d6fe00-e88b-11e9-8f7b-8f9ec4d9b181.png)\r\n\r\n## -IPv4 (with IPv6 address)\r\n\r\n![image](https://user-images.githubusercontent.com/32407840/66281911-5ffc9e00-e88b-11e9-8e40-991f0f934f7c.png)\r\n",
      "created_at": "2019-10-04T03:28:06Z",
      "updated_at": "2019-10-07T02:48:38Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@PoshChan please retry Linux",
      "created_at": "2019-10-05T20:58:39Z",
      "updated_at": "2019-10-05T20:58:39Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@vexx32, successfully started retry of `PowerShell-CI-Linux`",
      "created_at": "2019-10-05T20:59:13Z",
      "updated_at": "2019-10-05T20:59:13Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@PoshChan please retry windows",
      "created_at": "2019-10-06T08:53:04Z",
      "updated_at": "2019-10-06T08:53:04Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@vexx32, successfully started retry of `PowerShell-CI-Windows`",
      "created_at": "2019-10-06T08:53:30Z",
      "updated_at": "2019-10-06T08:53:30Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Have you tested this in any of the docker containers?  We had large differences in behavior in the containers.",
      "created_at": "2019-10-07T22:06:10Z",
      "updated_at": "2019-10-07T22:06:10Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13 I have not as yet, no. How would I go about doing that?",
      "created_at": "2019-10-07T22:15:58Z",
      "updated_at": "2019-10-07T22:15:58Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Download the build.zip from the linux CI.\r\nextract it.\r\nIf you are on windows, make sure you have switch you docker daemon to linux, my right clicking on the icon and choosing the switch option.\r\nrun \r\n```\r\ndocker run -it --rm -v /extractedZipLocation:/pwsh mcr.microsoft.com/powershell:ubuntu-18.04 /bin/sh\r\nchmod a+x /pwsh/pwsh\r\n/pwsh/pwsh\r\n```\r\nThen you should be in the new PowerShell in the container.\r\n\r\n\r\n",
      "created_at": "2019-10-07T22:29:21Z",
      "updated_at": "2019-10-07T22:29:21Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Adding `Breaking Change` as some public types are changed.  Although I think they fit in Bucket 3 which is unlikely to impact anyone.",
      "created_at": "2019-10-08T01:24:24Z",
      "updated_at": "2019-10-08T01:24:24Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13 thanks for that! \r\n\r\nSo, testing in the Ubuntu 18.04 docker container looks very very similar to just testing in Ubuntu under WSL. The main difference I can find is that `-IPv6` functionality is simply not there, any attempt to use that switch errors out. \r\n\r\nGiven the APIs in use, I get the impression that might be simply a lack of IPv6 support in Docker? Not really sure how to properly test that, but everything else works the same way as it does under Ubuntu under WSL, and the same as how it's behaving in CI (though IPv6 support appears to be slightly better in CI than in the docker container, though even that is inconsistent at best).\r\n\r\nAll IPv4 functionality works the same way as it does in CI under Unix. Pings work pretty well, but traceroutes get a slew of TimedOut responses due to the .net core API not giving anything other than Success or TimedOut under Unix at the present time. However, the code is in place and fully-functional under Windows, so if/when the .NET Core team bring the Unix side of the Ping API up to parity in terms of possible results from a ping, the traceroute functionality should _just work_, or may require only minor adjustments, depending on if the response to TTL expiry is the same Status code under Unix or not.\r\n\r\n`-MtuSize` also doesn't work as well as in WSL or native Ubuntu, but judging from the error record there, it appears that .NET Core is mishandling the responses on that one somewhere; I'm getting `AggregateException`s from my ping attempts there, containing responses indicating `Message too Long`, which is _expected_, but also should be handled by .NET Core.\r\n\r\nI could potentially kludge in a temporary fix for that by catching the exception and continuing along the normal code paths to adjust the buffer size and retry. I suspect that catching all the exceptions there may slow down the speed of that operation in the docker container, but it would make it work.\r\n\r\nLet me know if that's something you want me to try to account for.\r\n",
      "created_at": "2019-10-08T15:03:57Z",
      "updated_at": "2019-10-08T15:09:51Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@vexx32 The one thing is our tests need to pass when we run them in a container.  This is how we test all supported distributions when releasing.  Can you work with @JamesWTruher to make sure you understand how to, change, skip, or otherwise make it so we don't have to triage the failures when when are running in containers for release.",
      "created_at": "2019-10-08T20:19:43Z",
      "updated_at": "2019-10-08T20:19:43Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Happy to! The `-IPv6` tests are already fairly unstable in the existing Unix CIs, which... I don't really know why that is, but they seem to work fine in Win10 and Ubuntu under WSL, so I believe the features are as sound as they can be at present. Those are already disabled under Unix.\r\n\r\n@JamesWTruher how can I determine if pwsh is running in a docker container so I can conditionally mark the less stable ones as pending?",
      "created_at": "2019-10-08T20:27:24Z",
      "updated_at": "2019-10-08T20:27:55Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Here is our code to setup the environment:\r\n```\r\n   $vstsCommandString = \"vso[task.setvariable variable=__INCONTAINER]1\"\r\n      Write-Verbose -Verbose \"Setting __INCONTAINER as 1\"\r\n      Write-Host \"##$vstsCommandString\"\r\n```",
      "created_at": "2019-10-08T20:47:14Z",
      "updated_at": "2019-10-08T20:47:14Z"
    },
    {
      "author": "steviecoaster",
      "author_association": "CONTRIBUTOR",
      "body": "From https://docs.docker.com/v17.09/engine/userguide/networking/default_network/ipv6/#how-ipv6-works-on-docker:\r\n\r\n`By default, the Docker daemon configures the container network for IPv4 only. You can enable IPv4/IPv6 dualstack support by running the Docker daemon with the --ipv6 flag. Docker will set up the bridge docker0 with the IPv6 link-local address fe80::1.`\r\n\r\nSo you may need to run your docker container like this:\r\n\r\n`docker run --ipv6 -it --rm -v /extractedZipLocation:/pwsh mcr.microsoft.com/powershell:ubuntu-18.04 /bin/sh`\r\n\n\n<blockquote><img src=\"/favicons/docs@2x.ico\" width=\"48\" align=\"right\"><div><img src=\"/v17.09/favicons/docs@2x.ico\" height=\"14\"> Docker Documentation</div><div><strong><a href=\"https://docs.docker.com/engine/userguide/networking/default_network/ipv6/\">IPv6 with Docker</a></strong></div><div>How do we connect docker containers within and across hosts ?</div></blockquote>",
      "created_at": "2019-10-08T20:48:10Z",
      "updated_at": "2019-10-08T20:48:12Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@steviecoaster This would have to be done by Azure DevOps in our case so lets continue with the existing plan.",
      "created_at": "2019-10-08T23:24:48Z",
      "updated_at": "2019-10-08T23:24:48Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13 @JamesWTruher if I remember my Azure variables correctly, the latest commit should address your concerns with the tests in the container environments.\r\n\r\nLet me know if you need me to tweak it any further. \ud83d\udc96 ",
      "created_at": "2019-10-09T03:28:35Z",
      "updated_at": "2019-10-09T03:28:35Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@iSazonov Do you mind reviewing the changes?",
      "created_at": "2019-10-09T21:23:57Z",
      "updated_at": "2019-10-09T21:23:57Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov very much appreciate the thorough review, thank you! I will have to check over the code again to answer some of your questions, and so I'll get to those and applying your suggestions this evening.\r\n\r\n",
      "created_at": "2019-10-10T14:41:11Z",
      "updated_at": "2019-10-10T14:41:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 Please resolve merge conflicts.",
      "created_at": "2019-10-17T07:22:26Z",
      "updated_at": "2019-10-17T07:22:26Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@PoshChan please retry windows",
      "created_at": "2019-10-17T16:56:49Z",
      "updated_at": "2019-10-17T16:56:49Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@vexx32, successfully started retry of `PowerShell-CI-Windows`",
      "created_at": "2019-10-17T16:57:03Z",
      "updated_at": "2019-10-17T16:57:03Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT @iSazonov @TravisEz13 I checked https://github.com/dotnet/corefx/issues/28934 recently and saw they pushed it back to 5.0 for now.\r\n\r\nCan we make a judgement call on the way forward here? This implementation, while doing more work than it should need to, is at least (in my opinion) more usable and functional on every platform than the existing implementation, and makes use of the most effective parts of the API surface currently available.\r\n\r\nIn my opinion, having this in PS7 to have a more user-friendly cmdlet would be better than waiting until .NET 5 for the API to be fixed. \ud83d\ude42 \r\n\r\nI'm more than happy to do the later rewrite when the .NET Core team (finally) fix their Ping APIs. \ud83d\ude01 ",
      "created_at": "2019-11-11T15:26:52Z",
      "updated_at": "2019-11-11T15:26:52Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@vexx32 I don't think we should hold this waiting on .NET (should open a new issue linked to corefx, I can tag it for vNext).  I'll spend some time reviewing this today.",
      "created_at": "2019-11-11T16:41:15Z",
      "updated_at": "2019-11-11T16:41:15Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Went back through ping / test-connection issues and found this one:\r\n\r\nhttps://github.com/PowerShell/PowerShell/issues/7576\r\n\r\nI think this PR addresses that as well \ud83e\udd14 ",
      "created_at": "2019-11-11T16:51:45Z",
      "updated_at": "2019-11-11T16:51:52Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT looks like we've been tracking this in #4240; I think we can continue to track this there. \ud83d\ude42 ",
      "created_at": "2019-11-11T16:54:14Z",
      "updated_at": "2019-11-11T16:54:14Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@PoshChan please retry windows",
      "created_at": "2019-11-15T17:06:26Z",
      "updated_at": "2019-11-15T17:06:26Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@vexx32, successfully started retry of `PowerShell-CI-Windows`",
      "created_at": "2019-11-15T17:06:53Z",
      "updated_at": "2019-11-15T17:06:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Should we document anything (the check box is set)?",
      "created_at": "2019-11-19T03:47:37Z",
      "updated_at": "2019-11-19T03:47:37Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, we changed quite a bit in terms of the shape of the output in pretty much all the cases here.\r\n\r\nDoc issue is https://github.com/MicrosoftDocs/PowerShell-Docs/issues/4987 - I'll link it in the PR description as well. Thanks for the reminder! \ud83d\udc96 ",
      "created_at": "2019-11-19T04:36:47Z",
      "updated_at": "2019-11-19T04:36:47Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.0.0-preview.6` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.6)\n",
      "created_at": "2019-11-21T22:36:11Z",
      "updated_at": "2019-11-21T22:36:11Z"
    }
  ],
  "created_at": "2019-10-03T21:27:11Z",
  "number": 10697,
  "state": "closed",
  "title": "`Test-Connection` - Improve Logic and Output",
  "updated_at": "2019-11-21T22:36:11Z"
}