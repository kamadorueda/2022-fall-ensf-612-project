{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11494",
  "author": "mkht",
  "body": "## Proposal summary\r\n\r\nHow about adding a Cmdlet to generate a random password? \ud83d\udd11 \r\nThink of the name as `New-Password`, for example.\r\n\r\n## Background\r\nIn the .NET Framework, We can use the static method `[System.Web.Security.Membership]::GeneratePassword()`.\r\nHowever, this method is not implemented in .NET Core. We need to consider alternative method.\r\n\r\nOf course, it is not very difficult to implement our own, but I think it is convenient if it is provided as a standard Cmdlet.\r\n\r\n## Proposed usage\r\nI want to implement some parameters so that we can use it flexibly.\r\n\r\n* Generates a random password string as specified length\r\n```PowerShell\r\nNew-Password -Length 10\r\n# RyP5!P%Kx6\r\n```\r\n\r\n* Generates a random password string with some common conditions\r\n```PowerShell\r\nNew-Password -Length 10 -MinNumberOfNumbers 1 -MinNumberOfUppercaseLetters 1 -MinNumberOfLowercaseLetters 1 -MinNumberOfSpecialCharacters 1\r\n```\r\n\r\n* Generates a random password string using the specified character set.\r\n```PowerShell\r\nNew-Password -Length 10 -CharacterSet ('a'..'z')\r\n# xrhupiqbcg\r\n```\r\n\r\n* Generates a random password as [SecureString]\r\n```PowerShell\r\nNew-Password -Length 10 -AsSecureString\r\n# Type of output to be [SecureString]\r\n```\r\n\r\n## Proof of concept\r\nPowerShell implementation for proof of concept. Most parameters are not implemented and no error checking is performed.\r\n\r\n```PowerShell\r\nfunction New-Password {\r\n    [CmdletBinding()]\r\n    [OutputType([String])]\r\n    param (\r\n        [Parameter(Mandatory, Position = 0)]\r\n        [ValidateRange(1, 128)]\r\n        [int]$Length,\r\n\r\n        [Parameter()]\r\n        [char[]]$CharacterSets\r\n    )\r\n    \r\n    if (-not ($PSBoundParameters.ContainsKey('CharacterSets'))) {\r\n        $CharacterSets = [char[]]'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_-+=[{]};:<>|./?'\r\n    }\r\n\r\n    -join ((1..$Length) | ForEach-Object { Get-Random -InputObject $CharacterSets })\r\n}\r\n```\r\n",
  "closed_at": "2021-02-02T05:25:41Z",
  "comments": [
    {
      "author": "he852100",
      "author_association": "NONE",
      "body": "It can contain all visible characters of utf8?\r\n\r\nProvide basic ASCII characters by default, add extended options.",
      "created_at": "2020-01-05T16:08:05Z",
      "updated_at": "2020-01-05T16:08:05Z"
    },
    {
      "author": "mkht",
      "author_association": "NONE",
      "body": "Hi @he852100 \r\n\r\nI think it's possible to extract a random string from all UTF8 characters, but the UTF8 character set is so enormous that it feels somewhat exaggerated considering the use of this Cmdlet. I don't know if it will be useful.\r\n\r\nBut the idea of adding an option to allow non-Latin characters to be included in the output would be interesting. \ud83d\ude04 ",
      "created_at": "2020-01-05T17:32:41Z",
      "updated_at": "2020-01-05T17:32:41Z"
    },
    {
      "author": "he852100",
      "author_association": "NONE",
      "body": "No need to include any characters in the cmdlet\u3002\r\n\r\nAs long as you know the number of characters, you can generate a few random numbers in it, and you can get the characters by random numbers\r\n\r\n",
      "created_at": "2020-01-05T17:52:56Z",
      "updated_at": "2020-01-05T17:52:56Z"
    },
    {
      "author": "mkht",
      "author_association": "NONE",
      "body": "What I wanted to say is that if we want to include all UTF8 chars in the output, we need to consider emoji, IVS, etc., which may make the implementation more complicated than necessary.\r\n\r\nI suggest that the characters output by default be in the range of ASCII printable characters. The user can extend the range of output characters from `U+0000` to `U+FFFF` by using `-CharacterSets` parameter if necessary.\r\n\r\n```PowerShell\r\n$AllChars = [char]0x0000..[char]0xffff\r\nNew-Password -Length 10 -CharacterSets $AllChars\r\n```",
      "created_at": "2020-01-05T18:33:19Z",
      "updated_at": "2020-01-05T18:34:10Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "There's a number of password generating modules on PowerShellGallery already, perhaps we don't need one with PowerShell?",
      "created_at": "2021-02-02T02:57:56Z",
      "updated_at": "2021-02-02T02:57:56Z"
    },
    {
      "author": "mkht",
      "author_association": "NONE",
      "body": "The `GetPassword` module by Simon W\u00e5hlin does what I want with flexible password generation, and it also works with PowerShell 7.\r\n\r\nhttps://www.powershellgallery.com/packages/GetPassword/1.0.0.0\r\n\r\nI would like to introduce this module and close this Issue.\r\nThank you very much.\n\n<blockquote><img src=\"https://powershellgallery.com/Content/Images/Branding/PackageDefaultIcon.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://powershellgallery.com/packages/GetPassword/\">GetPassword 1.0.0.0</a></strong></div><div>Generates one or more complex passwords designed to fulfill the requirements for Active Directory.</div></blockquote>",
      "created_at": "2021-02-02T05:25:41Z",
      "updated_at": "2021-02-02T05:25:43Z"
    }
  ],
  "created_at": "2020-01-05T10:29:39Z",
  "labels": [
    "Issue-Enhancement"
  ],
  "number": 11494,
  "state": "closed",
  "title": "Proposal: New cmdlet for generating passwords",
  "updated_at": "2021-02-02T05:25:43Z"
}