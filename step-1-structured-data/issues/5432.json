{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5432",
  "author": "daxian-dbw",
  "body": "Fix #5417\r\n\r\n- For `Mandatory` parameter, `ValidateNotNull` and `ValidateNotNullOrEmpty` attributes, skip null-element check if the collection's element type is value type.\r\n- For `ValidateNotNull` and `ValidateNotNullOrEmpty`, they are changed to do null/empty check only on collections (as defined in `ParameterCollectionTypeInformation`) and hashtable. They currently enumerate elements of any object that implements `IEnumerable` and also enumerate elements if the argument is an enumerator. I think this behavior is not right for the following reasons:\r\n    - The argument may be an object that talks to Azure to retrieve elements back. It doesn't seem right to have the `ValidateNotNull/ValidateNotNullOrEmpty` attributes wait on that.\r\n    - On Windows, COM object may be enumerable, but the `GetEnumerator()` method is not supported in .NET Core on COM object. (See the COM example below)\r\n    - When the argument is an enumerator, the enumerator may not be useful after the validate attribute walks through all its elements. (See the enumerator example below)\r\n\r\n\r\nCOM Example\r\n```\r\nfunction bar {\r\n   param ([ValidateNotNull()] $object)\r\n}\r\n> $shell = New-Object -ComObject Shell.Application\r\n> $folder = $shell.NameSpace(\"F:\\tmp\\dd\\\")\r\n> bar -object ($folder.Items())\r\nbar : Cannot validate argument on parameter 'object'. Could not load type 'System.Runtime.InteropServices.ComTypes.IEnumerable' from assembly 'System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e'.\r\nAt line:1 char:13\r\n+ bar -object ($folder.Items())\r\n+             ~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidData: (:) [bar], ParameterBindingValidationException\r\n+ FullyQualifiedErrorId : ParameterArgumentValidationError,bar\r\n```\r\n\r\nEnumerator Example\r\n```\r\nfunction bar {\r\n   param ([ValidateNotNull()] $object)\r\n   \"MoveNext:  $($object.MoveNext())\"\r\n}\r\n\r\n> bar -object @(1,2,3).GetEnumerator()\r\nMoveNext:  False\r\n```",
  "closed_at": "2017-11-30T22:46:10Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov You comments have been addressed. Please take another look when you have time. Thanks!",
      "created_at": "2017-11-20T22:11:14Z",
      "updated_at": "2017-11-20T22:11:14Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this and approves with this change",
      "created_at": "2017-11-29T23:42:16Z",
      "updated_at": "2017-11-29T23:42:16Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@daxian-dbw restarted AppVeyor build. Failed due to #5567 ",
      "created_at": "2017-11-29T23:52:26Z",
      "updated_at": "2017-11-29T23:52:26Z"
    }
  ],
  "created_at": "2017-11-13T17:39:35Z",
  "number": 5432,
  "state": "closed",
  "title": "Skip null-element check for collections with a value-type element type",
  "updated_at": "2017-12-02T00:13:08Z"
}