{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1152",
  "author": "raghushantha",
  "body": "This is for developers using our SDK\n",
  "closed_at": "2018-03-06T21:41:48Z",
  "comments": [
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "What about the existing one, [Microsoft.PowerShell.5.ReferenceAssemblies](https://www.nuget.org/packages/Microsoft.PowerShell.5.ReferenceAssemblies/)? This is what our cmdlet-example compiles against.\n",
      "created_at": "2016-06-20T19:50:53Z",
      "updated_at": "2016-06-20T19:50:53Z"
    },
    {
      "author": "raghushantha",
      "author_association": "MEMBER",
      "body": "Existing one stays. We need to have a newer version of the SDK for every release.\n",
      "created_at": "2016-06-20T20:20:09Z",
      "updated_at": "2016-06-20T20:20:09Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Are we changing the API?\n",
      "created_at": "2016-06-20T20:46:08Z",
      "updated_at": "2016-06-20T20:46:08Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Hm, we _have_ introduced some PowerShell script variables to the language (`$IsWindows`, `$IsLinux`, `$IsOSX`), but I don't think we've changed the public C# API of the PowerShell classes.\n\nIt would probably be better to build reference assemblies out of PowerShell Core. How were the original ones built?\n",
      "created_at": "2016-06-20T20:47:58Z",
      "updated_at": "2016-08-17T22:01:07Z"
    },
    {
      "author": "raghushantha",
      "author_association": "MEMBER",
      "body": "@JamesWTruher to answer below:\n\"How were the original ones built?\"\n",
      "created_at": "2016-06-20T21:29:16Z",
      "updated_at": "2016-06-20T21:29:16Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "We are going to need updated (for .NET Core) reference assemblies, and it's blocking #1234.\n",
      "created_at": "2016-07-02T00:16:15Z",
      "updated_at": "2016-07-02T00:16:15Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Our reference assemblies will have dependencies on WSMan and MMI assemlbies. We should look, can we turn them into references as well. #1105\n",
      "created_at": "2016-07-03T00:26:55Z",
      "updated_at": "2016-07-03T00:26:55Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "MMI and WSMan packages need to have implementation DLLs in them. We won't open source them, so we need the full nuget package to support the WSMan module and WMI/CIM in PowerShell.\nAs for SMA, I think we also need the full nuget package published eventually, at least for the netstandard1.6 target framework. A third party .NET Core application should be able to host the PowerShell Core SMA.dll, and a full package is required in order to do that.\n",
      "created_at": "2016-07-03T02:35:21Z",
      "updated_at": "2016-08-17T07:54:16Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw full Package for SMA (and others) is already done https://github.com/PowerShell/PowerShell/issues/930#issuecomment-221422472\nI'm planning to document \"how to consume them\" in a doc next week.\n",
      "created_at": "2016-07-03T06:56:15Z",
      "updated_at": "2016-07-03T06:56:15Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@vors we need to figure out how to package that with the Linux version too.\n",
      "created_at": "2016-07-03T07:07:22Z",
      "updated_at": "2016-07-03T07:07:22Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "The original ones were built in a Razzle environment by taking the original shipping binaries running a couple of tools on them to create reference assemblies. I did this because we wanted to support downlevel releases. If possible, we should create them in our build\n",
      "created_at": "2016-10-05T23:14:51Z",
      "updated_at": "2016-10-05T23:14:51Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "We should align this with the PowerShell Standard ref assembly work",
      "created_at": "2017-03-31T23:56:36Z",
      "updated_at": "2017-03-31T23:56:36Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT @lzybkr So this is blocked on #3095? \r\n\r\nIf so, this can be moved out to `6.0.0-beta` as we stated DevEx/SDK is the focus for post-beta1. ",
      "created_at": "2017-05-08T18:48:05Z",
      "updated_at": "2017-05-08T18:48:05Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "The existing reference package has the following file:\r\n![image](https://cloud.githubusercontent.com/assets/10873629/25866233/9e60db58-34aa-11e7-91be-a0bbefacf8ae.png)\r\n",
      "created_at": "2017-05-09T18:28:30Z",
      "updated_at": "2017-05-09T18:28:30Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "We definitely don't need most of those - no ISE, no workflow, probably no MMI, and we could easily exclude psreadline.\r\n\r\nI think it's worth having multiple nuget packages if we can, one per assembly.",
      "created_at": "2017-05-09T19:21:29Z",
      "updated_at": "2017-05-09T19:21:29Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@lzybkr I agree with a package per assembly.  I'll start with SMA.  One question that came up is if we should have one package both the reference and actual assembly or separate packages.",
      "created_at": "2017-05-09T21:01:42Z",
      "updated_at": "2017-05-09T21:01:42Z"
    },
    {
      "author": "HemantMahawar",
      "author_association": "CONTRIBUTOR",
      "body": "I think there are 2 main & different personas \r\n- Binary module authors - needs only PS Core reference assemblies for compilation\r\n- Application developers - needs actual PS Core runtime to create runspaces etc.\r\n\r\nSo I would recommend having 2 separate packages even just for SMA. /cc @joeyaiello @SteveL-MSFT ",
      "created_at": "2017-05-09T21:20:03Z",
      "updated_at": "2017-05-09T21:20:03Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "That makes sense",
      "created_at": "2017-05-09T21:43:35Z",
      "updated_at": "2017-05-09T21:43:35Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13 and I just spoke about this. I still feel like we should just continue shipping what we shipped so far for alphas (which is the full assemblies). \r\n\r\nOnce we have the \"PowerShell Standard\" PR closed at #3095, we should make that the reference assembly story, write a blog on developing binary cmdlets on macOS/Linux, etc. ",
      "created_at": "2017-05-09T21:54:21Z",
      "updated_at": "2017-05-09T21:54:21Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "If the reference assembly we are discussing here is the one that will be used as PowerShell Standard framework, then it should be a standalone NuGet package, because it's an abstraction and there is no specific runtime DLL exactly maps to the API surfaces exposed from it.\r\n\r\nHowever, if the reference assembly in the discussion is specific to PowerShell Core, then we should have only one NuGet package that contains both reference assembly and runtime assemblies so that a developer can reference to only one package for both writing a module and hosting powershell.",
      "created_at": "2017-05-09T21:54:28Z",
      "updated_at": "2017-05-09T21:55:09Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "It's my understanding that a developer can use the runtime assembly as a reference assembly at build time. Is this not the case? ",
      "created_at": "2017-05-09T22:20:10Z",
      "updated_at": "2017-05-09T22:20:10Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "That's the case, but the NuGet package will include different runtime assemblies targeting different platforms, and usually, a NuGet package like that will come with a reference assembly as well.\r\n\r\nTake `System.Security.Cryptography.ProtectedData` as an example, here is the content of it:\r\n![image](https://cloud.githubusercontent.com/assets/127450/25875483/95294fe4-34cc-11e7-93b8-90ca46ff4e69.png)\r\n",
      "created_at": "2017-05-09T22:31:44Z",
      "updated_at": "2017-05-09T22:31:44Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Please see my comment at https://github.com/PowerShell/PowerShell/issues/3417#issuecomment-300648549\r\n\r\nIn a nutshell, I think we need 2 sets of NuGet packages. Take `System.Management.Automation` as an instance, we need\r\n1. A NuGet package that contains only the __*PowerShell Standard*__ reference assembly.\r\n    - It should be used when building a binary powershell module targeting `netstandard2.0`\r\n    - This package should be tracked by this issue.\r\n\r\n2. A NuGet package specific for `netcoreapp2.0`, which contains the reference assembly, runtime assembly for Win and Unix platform (including `libpsl.so`).\r\n    - It should be used when building an application targeting `netcoreapp2.0`, which hosts powershell core.\r\n    - This package should be tracked by #3417",
      "created_at": "2017-05-11T00:31:23Z",
      "updated_at": "2017-05-11T00:33:44Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Just for the record -- this is still not fixed in Beta 4. It's *still __not possible__* to create a project which targets the PowerShell SDK and works for .Net Core _and_ full framework, except by _referencing the old packages_. \r\n\r\nI'm having to do nonsense like this:\r\n\r\n```xml\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'netcoreapp2.0'\">\r\n    <PackageReference Include=\"System.Management.Automation\" Version=\"6.0.0-beta.4\" />\r\n  </ItemGroup>\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'net462'\">\r\n    <PackageReference Remove=\"Microsoft.NETCore.App\" />\r\n    <PackageReference Include=\"System.Management.Automation\" Version=\"6.0.0-alpha17\" />\r\n  </ItemGroup>\r\n```",
      "created_at": "2017-07-14T01:22:32Z",
      "updated_at": "2017-07-14T01:22:32Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "@Jaykul I get the condition reference to `net462` but why does the other reference `netcoreapp2.0` instead of `netstandard2.0`?  Is it because this project file is for an `exe`?",
      "created_at": "2017-07-16T17:07:14Z",
      "updated_at": "2017-07-16T17:07:14Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Because *POWERSHELL DOES*. If any library references netcoreapp2.0, then **everyone** has to -- it's turtles all the way down.",
      "created_at": "2017-07-16T17:43:38Z",
      "updated_at": "2017-07-16T17:43:38Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Per [this Twitter conversation](https://twitter.com/terrajobst/status/892060963720974336) we might be able to become fully `netstandard2.0`.\r\n\r\nIn any case, we've known about this problem for a long time, and it's what PowerShell Standard #4374 is intended to solve. We have to do that either way, but it would be nice if the 6.0 SMA.dll could also be `netstandard2.0`.",
      "created_at": "2017-08-01T22:02:17Z",
      "updated_at": "2017-08-01T22:02:17Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "It's not fully `netstandard2.0`, restore would fail if the library is used in a runtime that doesn't support RefEmit. BTW, `System.Management.Automation` still depends on `System.Runtime.Loader` which is only available in `netcoreapp2.0`.",
      "created_at": "2017-08-01T23:14:57Z",
      "updated_at": "2017-08-01T23:14:57Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "The point, @daxian-dbw is that your library shouldn't have to know who supports RefEmit, RefEmit knows.\r\n\r\nBoth System.Runtime.Loader and System.Reflection.Emit are available as nuget packages targeting NetStandard.",
      "created_at": "2017-08-23T03:19:29Z",
      "updated_at": "2017-08-23T03:19:29Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "So @rkeithhill pointed out [PowerShellStandard.Library](https://www.nuget.org/packages/PowerShellStandard.Library) ...\r\n\r\nI noticed it's version `3.0.0-preview-01`, and only seems to support PowerShell API for 3.0  (no Information stream, for instance). Is the plan to have versions of this to support each API version, or did someone decide nothing that's been done since 2012 matters?",
      "created_at": "2017-09-12T05:32:22Z",
      "updated_at": "2017-09-12T05:32:22Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@Jaykul the current release 3.0.0 aligns with PowerShell 3.0.  It's a starting point.  We plan to have a 5.x version and probably 6.x.  ",
      "created_at": "2017-09-12T23:07:52Z",
      "updated_at": "2017-09-12T23:07:52Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Any progress on this?\r\n\r\nI run into issues with `IArgumentCompleter` when compiling, and problems loading System.Net.Http on Desktop when running against the `3.0.0-preview-01`.",
      "created_at": "2017-12-22T15:22:46Z",
      "updated_at": "2017-12-22T15:22:46Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@powercode hoping to have an update on this by next week",
      "created_at": "2018-01-02T20:39:12Z",
      "updated_at": "2018-01-02T20:39:12Z"
    },
    {
      "author": "JonKohler",
      "author_association": "NONE",
      "body": "hey @SteveL-MSFT - Any update on this?",
      "created_at": "2018-03-06T06:35:46Z",
      "updated_at": "2018-03-06T06:35:46Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@JonKohler sorry, had tweeted it, but forgot to update here https://www.nuget.org/packages/PowerShellStandard.Library/5.1.0-preview-01\r\n",
      "created_at": "2018-03-06T21:41:48Z",
      "updated_at": "2018-03-06T21:41:48Z"
    },
    {
      "author": "mallochine",
      "author_association": "NONE",
      "body": "@SteveL-MSFT sorry if this is obvious -- how to install via the 'nuget' CLI? For some reason Install-Package didn't work but nuget does. E.g. `nuget install Newtonsoft.Json`",
      "created_at": "2018-03-07T00:19:33Z",
      "updated_at": "2018-03-07T00:19:33Z"
    },
    {
      "author": "mallochine",
      "author_association": "NONE",
      "body": "oh, nevermind, figured it out. Needed to add -Version or else it doesn't work:\r\n\r\nnuget install PowerShellStandard.Library -Version 5.1.0-preview-01",
      "created_at": "2018-03-07T00:32:34Z",
      "updated_at": "2018-03-07T00:32:34Z"
    },
    {
      "author": "mallochine",
      "author_association": "NONE",
      "body": "@SteveL-MSFT another problem -- I noticed the reference assembly installed was net standard 2.0, not 4.5. Thus it didn't compile. What is the correct way to install the right framework?\r\n\r\n```\r\nerror CS1070: The type `System.Object' has been forwarded to an assembly that is not referenced. Consider adding a reference to assembly `netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'\r\n```",
      "created_at": "2018-03-07T00:57:56Z",
      "updated_at": "2018-03-07T01:14:58Z"
    },
    {
      "author": "mallochine",
      "author_association": "NONE",
      "body": "@SteveL-MSFT  so I see that I was supposed to pass in \"-sdk:2\" flag to 'mcs' compiler to make this work. However, my library uses 'dynamic' language feature, which is not supported in 2.0.\r\n\r\nI mean, there must be a way to use the 5.1.0 preview on other release versions, isn't there?",
      "created_at": "2018-03-07T01:48:52Z",
      "updated_at": "2018-03-07T01:48:52Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mallochine unfortunately for now, PSStdLib is tied to dotnetstd 2.0.  ",
      "created_at": "2018-03-08T00:31:13Z",
      "updated_at": "2018-03-08T00:31:13Z"
    },
    {
      "author": "mallochine",
      "author_association": "NONE",
      "body": "what's the github issue we can track to see the cmdlet tied to new sdk?",
      "created_at": "2018-03-08T02:54:07Z",
      "updated_at": "2018-03-08T02:54:07Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "@mallochine - SteveL said \"for now\" but it's just to be clear: this isn't really just \"for now\" -- if you want to write cmdlets that target _PowerShell Core_, you can't use features that aren't in netstandard2.0. In fact, you must compile targeting .NET Standard 2.0\r\n\r\nAdditionally, any Windows machines will need at least .NET Framework 4.6.1 (and possibly 4.7, depending on features you use) if you want to be sure the module will work in full desktop \"Windows PowerShell\" ...\r\n\r\nYou _can_ cross-compile (producing separate assemblies targeting each framework), but your code still has to compile against .NET Standard 2.0 to work in PowerShell Core.",
      "created_at": "2018-03-08T06:23:53Z",
      "updated_at": "2018-03-08T06:25:44Z"
    },
    {
      "author": "mallochine",
      "author_association": "NONE",
      "body": "Ok, so turns out actually .NET Standard and .NET Framework at different things. I finally got this to compile.\r\n\r\nHow do I install .NET Core 2.0 SDK from nuget? Since the library I used was deprecated -- https://www.nuget.org/packages/NETStandard.Library.NETFramework/2.0.0-preview2-25405-01",
      "created_at": "2018-03-09T03:17:10Z",
      "updated_at": "2018-03-09T03:17:10Z"
    },
    {
      "author": "almostjulian",
      "author_association": "NONE",
      "body": "Is this truly based on PowerShell 5.1?  Or is this just renamed from the original PowerShell 3 version?  I don't see SMA.Runspace.CreatePipeline() for instance.",
      "created_at": "2018-03-09T21:32:55Z",
      "updated_at": "2018-03-09T21:32:55Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@darkonejr PowerShell Standard Library intends to always be forward compatible.  As such, PS Std Lib v3 is a subset of PS v3 where the apis still exist in PSCore6.  Similarly , PS Std lib v5.1 is a subset of PS v5.1 where the apis still exist in PSCore6 (essentially, some exceptions).  I would expect CreatePipeline() to still be there.  If its not, it's probably a bug in the preview.  I would suggest opening a new issue for any APIs you expect to be there, but aren't.",
      "created_at": "2018-03-10T00:39:37Z",
      "updated_at": "2018-03-10T00:39:37Z"
    },
    {
      "author": "leonardder",
      "author_association": "NONE",
      "body": "Is this meant to be a replacement of Microsoft.PowerShell.5.1.ReferenceAssemblies?",
      "created_at": "2020-03-02T15:05:05Z",
      "updated_at": "2020-03-02T15:05:05Z"
    }
  ],
  "created_at": "2016-06-20T16:41:17Z",
  "number": 1152,
  "state": "closed",
  "title": "Ensure nuget based reference assemblies are created for PowerShell",
  "updated_at": "2020-03-02T15:05:05Z"
}