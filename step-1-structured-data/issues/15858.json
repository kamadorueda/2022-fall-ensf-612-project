{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15858",
  "author": "brunovieira97",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nI have a PowerShell module that overrides `Out-Default` using a steppable pipeline to color the output of some Cmdlets. The problem is, while using my module, `$?` will always return `True`, regardless if the last command had failed or not.\r\n\r\nI believe `$?` is returning `True` due to the last actual command running being the `$steppablePipeline.End()`, thus affecting the last exit code capture.\r\n\r\nSince I'm not very experienced in PowerShell, I don't know if this is an expected limitation, or if there should be an internal logic for going around this.\r\n\r\nHere's a snippet of my module's code:\r\n```powershell\r\nfunction Out-Default {\r\n\t[CmdletBinding(HelpUri = 'http://go.microsoft.com/fwlink/?LinkID=113362', RemotingCapability = 'None')]\r\n\tparam(\r\n\t\t[switch] ${Transcript},\r\n\t\t[Parameter(Position = 0, ValueFromPipeline = $true)][PSObject] ${InputObject}\r\n\t)\r\n\r\n\tbegin {\r\n\t\ttry {\r\n\t\t\t$outBuffer = $null\r\n\r\n\t\t\tif ($PSBoundParameters.TryGetValue('OutBuffer', [ref] $outBuffer)) {\r\n\t\t\t\t$PSBoundParameters['OutBuffer'] = 1;\r\n\t\t\t}\r\n\r\n\t\t\t$wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand('Microsoft.PowerShell.Core\\Out-Default', [System.Management.Automation.CommandTypes]::Cmdlet);\r\n\t\t\t$scriptCmd = {& $wrappedCmd @PSBoundParameters }\r\n\r\n\t\t\t$steppablePipeline = $scriptCmd.GetSteppablePipeline();\r\n\t\t\t$steppablePipeline.Begin($PSCmdlet);\r\n\t\t} catch {\r\n\t\t\tthrow\r\n\t\t}\r\n\t}\r\n\t\r\n\tprocess {\r\n\t\ttry {\r\n\t\t\t# do some stuff\r\n\t\t\t\t\r\n                        $steppablePipeline.Process($_);\r\n\t\t} catch {\r\n\t\t\tthrow\r\n\t\t}\r\n\t}\r\n\r\n\tend {\r\n\t\ttry {\r\n\t\t\t$steppablePipeline.End();\r\n\t\t} catch {\r\n\t\t\tthrow\r\n\t\t}\r\n\t}\r\n}\r\n```\n\n### Expected behavior\n\n```console\n# provoking an error so $? will be \"false\"\r\nPS> ll\r\nll: The term 'll' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n\r\nPS> $?\r\nFalse\n```\n\n\n### Actual behavior\n\n```console\n# provoking an error so $? will be \"false\"\r\nPS> ll\r\nll: The term 'll' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n\r\nPS> $?\r\nTrue\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nPS> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "It has nothing to do with steppable pipeline, but only because the customized `out-default` is a script cmdlet. See the below example:\r\n```\r\nfunction Out-Default {\r\n    process {\r\n        [Console]::WriteLine($_.ToString())\r\n    }\r\n    end {\r\n        # non-op\r\n        $null = 1+1\r\n    }\r\n}\r\n\r\nPS:2> ll\r\nThe term 'll' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\nPS:3> $?\r\nTrue\r\n```\r\nSo basically, when the end block of this `Out-Default` runs, it's a script block execution. For a script execution, if it runs successfully, `$?` gets set to `true`, which overrides the previous `false` value.\r\n\r\nThis only happens when you override `Out-Default` with a script implementation, due to the specialty of this command -- it's automatically added to the top level pipeline as the downstream command, which means its end block will always run as long as no terminating exception is thrown from the script/command that was typed in by the user.",
      "created_at": "2021-09-16T21:18:10Z",
      "updated_at": "2021-09-21T17:29:57Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The Engine WG discussed this issue today. It may be possible to fix this issue by saving the `$?` value before executing `Out-Default` and restoring the value after execution -- we should do this only for the top level pipeline, so we would need to check if the current pipeline is the only one in the pipeline stack, and if that's the case, we assume the `out-default` command is automatically added by the host, and thus make it not affect `$?` value.\r\n\r\nHowever, it's not clear if this behavior change would cause unexpected issue elsewhere, especially to the other host implementations such as in PowerShell VSCode extension and PowerShell Jupyter sub-kernel. We are open to further discussion, but we'd need substantial extra validation before we go changing things.",
      "created_at": "2021-09-16T23:40:20Z",
      "updated_at": "2021-09-16T23:40:20Z"
    }
  ],
  "created_at": "2021-08-03T01:04:44Z",
  "labels": [
    "Issue-Question",
    "WG-Engine",
    "Issue-Discussion"
  ],
  "number": 15858,
  "state": "open",
  "title": "Steppable Pipeline breaks $? value, always returning true",
  "updated_at": "2021-09-21T17:29:57Z"
}