{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4691",
  "author": "SteveL-MSFT",
  "body": "ssh-copy-id is a popular shebang bash script to make it easy to deploy public keys on target machines for key based authn.  \r\nThe problem is that this script uses the POSIX shell cmd `exec` which is unknown to powershell:\r\n\r\n```bash\r\nssh \"$@\" \"exec sh -c 'cd ; umask 077 ; mkdir -p .ssh && cat >> .ssh/authorized_keys\r\n```\r\n\r\nThis can block adoption of powershell as the default shell (via chsh)\r\n\r\n<!--\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](../docs/FAQ.md).\r\n- Refer to the [known issues](../docs/KNOWNISSUES.md).\r\n- Fill out the following repro template\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nPS> ssh-copy-id user@host\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nSuccess\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nssh-copy-id user@host/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed\r\n/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys\r\nuser@host's password: \r\nexec : The term 'exec' is not recognized as the name of a cmdlet, function, \r\nscript file, or operable program. Check the spelling of the name, or if a path \r\nwas included, verify that the path is correct and try again.\r\nAt line:1 char:1\r\n+ exec sh -c 'cd ; umask 077 ; mkdir -p .ssh && cat >> .ssh/authorized_ ...\r\n+ ~~~~\r\n    + CategoryInfo          : ObjectNotFound: (exec:String) [], CommandNotFoun \r\n   dException\r\n    + FullyQualifiedErrorId : CommandNotFoundException\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nName                           Value                                                                                                \r\n----                           -----                                                                                                \r\nPSVersion                      6.0.0-beta                                                                                           \r\nPSEdition                      Core                                                                                                 \r\nGitCommitId                    v6.0.0-beta.6                                                                                        \r\nOS                             Linux 4.10.0-32-generic #36~16.04.1-Ubuntu SMP Wed Aug 9 09:19:02 UTC 2017                           \r\nPlatform                       Unix                                                                                                 \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                              \r\nPSRemotingProtocolVersion      2.3                                                                                                  \r\nSerializationVersion           1.1.0.1                                                                                              \r\nWSManStackVersion              3.0             \r\n\r\n```\r\n",
  "closed_at": "2022-01-04T22:09:28Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Somewhat ironically, the `ssh-copy-id` source code states:\r\n\r\n> to defend against quirky remote shells: use 'exec sh -c' to get POSIX;\r\n\r\nThe problem, of course, is that the use of [`exec`](http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#exec) already presupposes a POSIX-compatible shell.\r\n\r\nA quick, but somewhat hacky workaround would be to define `exec` as a built-in alias of `&` - while `&` is _loosely_ the equivalent of POSIX `exec`, there's a crucial difference: the latter _replaces_ the current process with the invoked command's.",
      "created_at": "2017-08-29T01:33:15Z",
      "updated_at": "2017-08-29T12:39:59Z"
    },
    {
      "author": "argonym",
      "author_association": "NONE",
      "body": "I am experiencing this interop problem as well with PS 6.1.0 as default shell and OpenSSH 7.8p1 with ProxyJump configured in ~/.ssh/config:\r\n```\r\nPS> ssh -v somehost\r\ndebug1: Executing proxy command: exec /usr/bin/ssh [...]\r\ndebug1: ssh_exchange_identification: exec : The term 'exec' is not recognized as the name of a cmdlet, function, script file, or operable program.\r\ndebug1: ssh_exchange_identification: + exec /usr/bin/ssh [...]\r\nssh_exchange_identification: Connection closed by remote host [ssh's message is wrong - there has never been any connection]\r\n```\r\nOpenSSH had introduced `exec` as some workaround for Solaris: https://bugzilla.mindrot.org/show_bug.cgi?id=223\r\nMeanwhile they have removed it again for the \"match exec\" feature: https://bugzilla.mindrot.org/show_bug.cgi?id=2471\r\nHowever, they didn't remove `exec` for ProxyCommand/ProxyJump even though it seems to be unnecessary there as well meanwhile.",
      "created_at": "2018-10-04T16:08:06Z",
      "updated_at": "2018-10-04T16:08:06Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this and agree that `exec` as an alias is not the proper solution and would also be a potentially breaking change for someone who wrote their own `exec` function which is very likely.  It would make more sense to have a PowerShell cmdlet to handle distributing keys and also worked with Windows which this script currently would not work.",
      "created_at": "2018-10-10T22:23:51Z",
      "updated_at": "2018-10-10T22:23:51Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee should review this again.  It seems many unix utils expect the default shell to support `exec`.  For example, I can't use `gdb` if pwsh is the default shell as it tries to call `exec` to run the program under the debugger.",
      "created_at": "2019-12-02T19:26:55Z",
      "updated_at": "2019-12-02T19:26:55Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "I figure this is a pretty inexpensive implementation (either an alias or a thin function wrapper) with the bulk of the difficulty around managing folks who already have a self-defined `exec` in their own environment.\r\n\r\nI propose one of two paths:\r\n1. Make this change ASAP in 7.1-preview.1 as an experimental feature. Find out if it breaks anyone long before we deliver it into a supported release.\r\n1. Hardcode a warning for anyone running their own `exec` function or alias into 7.1 previews, with the promise that we'll break them in a subsequent release.\r\n\r\nI'm in favor of the first one, personally. Of course, we could also do nothing here, but I have a feeling that this one goes a lot further than `ssh-copy-id` et al \r\n",
      "created_at": "2019-12-18T22:14:41Z",
      "updated_at": "2019-12-18T22:14:41Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "PowerShell needs a built-in `exec` that takes the same command line args for compatibility with Unix tooling that expects it so it's a bit more than just an alias to `&`.  Agree that we should have this in early in 7.1 to gauge impact.",
      "created_at": "2019-12-18T22:54:22Z",
      "updated_at": "2019-12-18T22:54:22Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, we don't believe a simple alias will be sufficient and should look into an actual built-in that calls exec API and only on non-Windows (as the process semantics don't apply to Windows).  Recommend having the same args as bash exec for compatibility.  Get it in early in 7.1 to get feedback and assess user impact due to possibility someone has a `exec` function already defined.",
      "created_at": "2019-12-18T23:17:22Z",
      "updated_at": "2019-12-18T23:17:22Z"
    },
    {
      "author": "brantb",
      "author_association": "NONE",
      "body": "`ssh` also tries to call `exec` when using `-J` or the `ProxyJump` directive, which fails ~when pwsh is the default login shell:~ (this happens when calling `ssh -J` from pwsh even when it is not the default shell) \r\n\r\n```\r\nPS> ssh target.host.example.com -J jumpbox -v\r\nOpenSSH_8.1p1, LibreSSL 2.7.3\r\n<snip>\r\ndebug1: Setting implicit ProxyCommand from ProxyJump: /usr/bin/ssh -v -W '[%h]:%p' jumpbox\r\ndebug1: Executing proxy command: exec /usr/bin/ssh -v -W '[target.host.example.com]:22' jumpbox\r\ndebug1: kex_exchange_identification: banner line 0: \\033[91mexec: \\033[91mThe term 'exec' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\ndebug1: kex_exchange_identification: banner line 1: Check the spelling of the name, or if a path was included, verify that the path is correct and try again.\\033[0m\r\nkex_exchange_identification: Connection closed by remote host\r\n\r\nPS> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.4\r\nPSEdition                      Core\r\nGitCommitId                    7.1.4\r\nOS                             Darwin 20.6.0 Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.\u2026\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nRelated: #12750",
      "created_at": "2021-09-21T19:41:01Z",
      "updated_at": "2021-09-21T19:49:14Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Unfortunately we're not going to get this addressed in 7.2, but we should target a fix in 7.3\r\n",
      "created_at": "2021-09-22T00:52:41Z",
      "updated_at": "2021-09-22T00:52:41Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "For now, this seems to work for me:\r\n\r\n```\r\n#!/usr/bin/env pwsh\r\nparam($command)\r\n\r\n& $command @args\r\n```\r\n\r\nsave it as `exec`, chmod +x ./exec, make sure it's in your `$env:PATH` so pwsh finds it\r\n",
      "created_at": "2021-09-22T01:23:50Z",
      "updated_at": "2021-09-22T01:30:17Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #16462, which has now been successfully released as `v7.3.0-preview.2`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.3.0-preview.2)\n",
      "created_at": "2022-02-24T23:33:22Z",
      "updated_at": "2022-02-24T23:33:22Z"
    }
  ],
  "created_at": "2017-08-28T20:59:40Z",
  "number": 4691,
  "state": "closed",
  "title": "ssh-copy-id fails if powershell is default shell",
  "updated_at": "2022-02-24T23:33:22Z"
}