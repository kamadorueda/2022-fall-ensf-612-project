{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7342",
  "author": "Stlouistechy",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\nFrom a RHEL server running docker, pull down latest release by running:\r\ndocker run -it microsoft/powershell\r\nFrom PS command prompt, connect to a Windows 2012 R2 server by running:\r\nPS /> $creds = Get-Credential\r\nPS /> Enter-PSSession -ComputerName {Win2012-R2 Hostname} -Authentication Basic -Credential $creds\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nPS connects to server\r\n\r\nActual behavior\r\n---------------\r\n\r\nEnter-PSSession : Connecting to remote server {Win2012-R2 Hostname} failed with the following error message : MI_RESULT_ACCESS_DENIED For more information, see the about_Remote_Troubleshooting Help topic.\r\nAt line:1 char:1\r\n+ Enter-PSSession -ComputerName {Win2012-R2 Hostname} -Authentica ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidArgument: ({Win2012-R2 Hostname}:String) [Enter-PSSession], PSRemotingTransportException\r\n+ FullyQualifiedErrorId : CreateRemoteRunspaceFailed\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\nPS /> $psversiontable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.3\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.3\r\nOS                             Linux 3.10.0-693.21.1.el7.x86_64 #1 SMP Fri Feb 23 18:54:16 UTC 2018\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@Stlouistechy \r\n\r\nQuestion: Did you setup Winrm linux on RHEL Docker?\r\n\r\nI know it's kind-of hard to setup but it's possible.  The best and fast route it to setup ssh on the Windows Server.  Docker IT/PowerShell image will not have the Winrm configured.\r\n\r\n:)",
      "created_at": "2018-07-23T20:50:48Z",
      "updated_at": "2018-07-23T20:50:48Z"
    },
    {
      "author": "Stlouistechy",
      "author_association": "NONE",
      "body": "@MaximoTrinidad \r\n\r\nThanks Maximo. I just tested this on my Container by installing pywinrm (pip install pywinrm) and running the steps again. Unfortunately no luck, I receive the same error.",
      "created_at": "2018-07-23T21:18:13Z",
      "updated_at": "2018-07-23T21:18:13Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@Stlouistechy \r\n\r\nJust keep in mind... installing pywinrm is a python module and won't work with PowerShell.\r\nThere are more steps to follow in order to enable WinRm in Linux.\r\n\r\nThis why is quicker, and even efficient, to use OpenSSL and use port 21 for ssh connectivity.\r\n\r\n:)",
      "created_at": "2018-07-24T01:24:09Z",
      "updated_at": "2018-07-24T01:24:09Z"
    },
    {
      "author": "Stlouistechy",
      "author_association": "NONE",
      "body": "So is there a way for PSCore to support PSSessions from Linux to Windows currently? Given the fact that we can not run most windows native modules from PSCore on Linux, remoting is our only method to execute windows based modules. Without remoting, or support for Windows modules such as Active Directory, we are unable to use much of anything on PSCore Linux.",
      "created_at": "2018-07-24T20:25:01Z",
      "updated_at": "2018-07-24T20:25:01Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@Stlouistechy \r\n\r\nOpenSSH can be install in Windows so you can use SSH protocol for remoting.  \r\n\r\nBy the way, the AD Module will be available (if is not already) for PSCore. Then again, all components to support AD Authentication need to be in place on the Linux system. I know the way to install these components does varies on different Linux distributions. \r\n\r\n:)",
      "created_at": "2018-07-24T20:46:36Z",
      "updated_at": "2018-07-24T20:46:36Z"
    },
    {
      "author": "Stlouistechy",
      "author_association": "NONE",
      "body": "@chuanjiao10 Thanks. Is there a timeline when PSSession and ActiveDirectory modules may be available to PSCore on Linux?",
      "created_at": "2018-07-26T17:26:07Z",
      "updated_at": "2018-07-26T17:26:07Z"
    },
    {
      "author": "danports",
      "author_association": "NONE",
      "body": "@Stlouistechy The `microsoft/powershell` image is based on Ubuntu, which does not bundle `/etc/services`, so you are likely being bit by this issue: https://github.com/Microsoft/omi/issues/623. The workaround for now is to build your own Docker image based on the PowerShell image that includes a command like:\r\n`RUN echo 'http            80/tcp          www www-http' > /etc/services`",
      "created_at": "2019-03-28T18:09:27Z",
      "updated_at": "2019-03-28T18:09:27Z"
    },
    {
      "author": "jimdigriz",
      "author_association": "NONE",
      "body": "> @Stlouistechy The `microsoft/powershell` image is based on Ubuntu, which does not bundle `/etc/services`, so you are likely being bit by this issue: [microsoft/omi#623](https://github.com/microsoft/omi/issues/623). The workaround for now is to build your own Docker image based on the PowerShell image that includes a command like:\r\n> `RUN echo 'http 80/tcp www www-http' > /etc/services`\r\n\r\n...or `apt-get install netbase`\r\n\r\nI just lost two hours of my life because of this.\r\n",
      "created_at": "2020-02-13T15:15:22Z",
      "updated_at": "2020-02-13T15:15:22Z"
    },
    {
      "author": "apiening",
      "author_association": "NONE",
      "body": "Thanks @jimdigriz an `apt update && apt install netbase` did the trick for me as well.\r\n\r\nHowever I can't get around saying how poor this looks to me that Microsoft is unable / unwilling to fix errors like this in their official images that are around for two years.\r\nI only stumbled upon this issue because it seems not to be possible to do PowerShell remoting from Mac OS X (even though it is an officially supported platform) due to an incorrect hard linked dependency to an outdated OpenSSL library.\r\nSearching the web tells that even after 3 years still a lot of users (like me) are wasting their time with no workaround or even a solution provided by Microsoft.\r\n\r\nSo I thought with their docker image at least it should work right out of the box. Double fail! What a shame!\r\nSorry but I'm just frustrated after wasting nearly three hours.",
      "created_at": "2020-06-12T21:22:59Z",
      "updated_at": "2020-06-12T21:22:59Z"
    },
    {
      "author": "danports",
      "author_association": "NONE",
      "body": "@apiening Agreed. I think it took me 1-2 days of work last year digging into the OMI library internals to identify the issue - and then when I did, the fix I proposed was promptly [rejected](https://github.com/microsoft/omi/issues/623#issuecomment-488154661). \ud83e\udd37\u200d\u2642\ufe0f \ud83d\ude16 ",
      "created_at": "2020-06-13T03:10:48Z",
      "updated_at": "2020-06-13T03:10:48Z"
    },
    {
      "author": "Veverke",
      "author_association": "NONE",
      "body": "@apiening I was hesitating to express such a thought... thinking it is too naive to think Microsoft would ignore errors (in plural form) in official docker images. \r\nWell seems this **is** reality.   \ud83d\udd75\ufe0f\u200d\u2640\ufe0f ",
      "created_at": "2021-03-09T13:46:58Z",
      "updated_at": "2021-03-09T13:50:04Z"
    },
    {
      "author": "VGerris",
      "author_association": "NONE",
      "body": "It also fails for a non-docker image for me with netbase installed on Ubuntu 20.04. Don't kid yourself, the total lack of support of Microsoft for this and similar issues just shows clearly how committed they are to providing true cross platform solutions.\r\nKerberos support should work out of the box, it's trivial to make that work if it works on Windows. I would expect more from a so called commitment to open source and other platforms. ",
      "created_at": "2021-04-16T13:15:56Z",
      "updated_at": "2021-04-16T13:15:56Z"
    },
    {
      "author": "VenkataNaveen-Zoetis",
      "author_association": "NONE",
      "body": "> apt-get install netbase\r\n\r\nLife savior!! ",
      "created_at": "2021-04-28T02:45:03Z",
      "updated_at": "2021-04-28T02:45:03Z"
    },
    {
      "author": "VOVELEE",
      "author_association": "NONE",
      "body": "Please take a look into this threat - https://github.com/jborean93/omi/issues/29\r\nLooks like the limitation comes from the libraries which ship with different version of Windows. The workaround is to set the CbtHardeningLevel to None so Windows doesn't try to validate the value at all.",
      "created_at": "2021-06-09T05:08:17Z",
      "updated_at": "2021-06-09T05:08:17Z"
    },
    {
      "author": "Veverke",
      "author_association": "NONE",
      "body": "> > apt-get install netbase\r\n> \r\n> Life savior!!\r\n\r\nI had a working image in .net core 3.1 where I could establish remote connections via powershell from linux containers to windows machines, but the same code did not succeed when upgrading to .net 5.\r\nSimply adding netbase package installation to my container dockerfile did the job, I am able to connect from linux containers to windows machines via powershell in .net 5 using sdk 5.0 docker hub image.  ",
      "created_at": "2021-06-29T20:09:54Z",
      "updated_at": "2021-06-29T20:09:54Z"
    }
  ],
  "created_at": "2018-07-23T20:31:39Z",
  "labels": [
    "Issue-Discussion",
    "WG-Remoting"
  ],
  "number": 7342,
  "state": "open",
  "title": "Enter-PSSession fails from Docker image",
  "updated_at": "2021-06-29T20:09:54Z"
}