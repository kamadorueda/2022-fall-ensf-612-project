{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1325",
  "author": "andschwa",
  "body": "Per #1291, we've discovered that `Invoke-Item` and `Get-Help -Online` are broken for .NET Core on Windows and Nano due to `UseShellExecute` being unavailable.\n\nOne approach for Windows (but not Nano) is recorded in 6200f084cd949358f11c25c8c0e6ed550e02343d. While this works for .NET Core on Windows by shelling out to `cmd.exe \"start ...\"` (essentially replacing `UseShellExecute`) it still poses a problem on Nano as the latter won't have any browser (or other default applications) to invoke.\n\nAt this point, PowerShell does not really differentiate between PowerShell on Nano and PowerShell on Windows built with .NET Core, but the latter has become a valid, and different, flavor with PowerShell Core. ~~We'll need a proper way to detect whether or not the underlying OS is Nano, without depending on the target framework being .NET Core.~~ (Done: `[System.Management.Automation.Platform]::IsIoT` and `[System.Management.Automation.Platform]::IsNanoServer`)\n\nBreaking down issue 1325 into two as they required different approaches.\n- [ ] \n  Implement Invoke-Item for .NET Core on Windows, Nano Server and IoT (https://github.com/PowerShell/PowerShell/issues/2272)\n\nTo fix this issue, a possible solution is to wrap the call in cmd.exe \u201cstart...\u201d; however, in order to figure out if the process fail to start, we need WaitForExit, then check the exit code, and extract the standard error.  This is a change on behavior between Full and CoreCLR PowerShell. The problem with this implementation is that PowerShell will be blocked until the process completes. Alternatively, if we decide to just ignore the error, then this behavior will also be incorrect since in PowerShell no error means the operation was successful. \nWe should explore doing a PInvoke in Windows CoreCLR. This way, we can get the Marshal.GetLastWin32Error() if we fail to start the process. \n- [ ] \n  Implement Get-Help -Online for .NET Core on Windows, Nano Server, and IoT \n  (https://github.com/PowerShell/PowerShell/issues/2271)\n\nTo fix this issue, we should write code that checks if there is default browser. If there isn\u2019t (which is the Nano Server and IoT scenario), we error out. If there is, we can wrap the call in cmd.exe \u201cstart \u2026\u201d\n",
  "closed_at": "2016-10-12T19:29:00Z",
  "comments": [
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Moving milestone per #1506.\n",
      "created_at": "2016-07-26T20:40:38Z",
      "updated_at": "2016-07-26T20:40:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@andschwa IsNanoServer and IsIoT is defined in CorePsPlatform.cs\n(May be add their to SpecialVariables.cs for use in tests?)\n",
      "created_at": "2016-10-07T14:12:18Z",
      "updated_at": "2016-10-07T14:12:18Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@iSazonov They weren't in July \ud83d\ude04 and this is owned by @Francisco-Gamino \n",
      "created_at": "2016-10-07T16:59:08Z",
      "updated_at": "2016-10-07T16:59:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@andschwa Thanks for the clarification.\nCould you please strike through the text?\n\n> At this point, PowerShell does not really differentiate between PowerShell on Nano and PowerShell > on Windows built with .NET Core, but the latter has become a valid, and different, flavor with PowerShell Core. ~~~We'll need a proper way to detect whether or not the underlying OS is Nano, without depending on the target framework being .NET Core.~~~ (Done)\n\n@andschwa and @Francisco-Gamino Whether to open a new issue for \"add IsNanoServer and IsIoT to SpecialVariables.cs for use in tests\"?\n",
      "created_at": "2016-10-08T16:35:50Z",
      "updated_at": "2016-10-08T16:35:50Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov I updated the issue description to make it clearer.\n\nI'm a little hesitating about adding automatic variable `$IsIoT` and `$IsNanoServer` in powershell core. Differences between powershell core on windows and Nano/IoT powershell are mainly in:\n1. Configurations, such as module path, profile path, whether to use configuration json file or registry.\n-- the difference should be transparent to user: $env:psmodulepath and $profile will have the correct setting on those platforms.\n2. Native Win32 API coverage\n-- `$IsIoT` and `$IsNanoServer` could be helpful when a module implementation depends on native win32 APIs. But I guess that's not common and you can always check `$PSHome` to tell if you are running on a inbox powershell (indicating NanoServer and IoT).\n\nGiven that, I feel it's possibly more like a developer's need to have `$IsIoT` and `$IsNanoServer` -- easier to write tests, not a user's need. \n",
      "created_at": "2016-10-10T18:17:27Z",
      "updated_at": "2016-10-10T18:17:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Thanks for the update.\n\nIf  [System.Management.Automation.Platform]::IsIoT  and  [System.Management.Automation.Platform]::IsNanoServer can be used in the tests, then my question is closed.\nDiscussion about adding variables and end user UX I believe should be in a separate Issue.\n",
      "created_at": "2016-10-11T12:29:02Z",
      "updated_at": "2016-10-11T12:29:02Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "This issue has been separated into 2 sub issues: `Get-Help -Online` (#2271) and `Invoke-Item` (#2272).\n",
      "created_at": "2016-10-12T19:29:00Z",
      "updated_at": "2016-10-12T19:29:00Z"
    }
  ],
  "created_at": "2016-07-08T21:16:34Z",
  "labels": [
    "OS-Windows"
  ],
  "number": 1325,
  "state": "closed",
  "title": "Implement Invoke-Item/Get-Help -Online for .NET Core on Windows and Nano",
  "updated_at": "2016-10-12T19:29:00Z"
}