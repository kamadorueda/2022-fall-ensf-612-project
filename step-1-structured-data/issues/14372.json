{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14372",
  "author": "iRon7",
  "body": "This idea arose from this from the stackoverflow question [Convert datetime formats using powershell](https://stackoverflow.com/q/65212907/1701026) and is related to #7445 [We need a new operator '..' to access to members of childitems of a collection](https://github.com/PowerShell/PowerShell/issues/7445) but specific to the `ToString` method.\r\n\r\nVariable definitions (used in this request)\r\n```PowerShell\r\n$Strings = 'Monday, November 30, 2020 7:55:01 AM', 'Sunday, October 18, 2020 9:10:01 PM', 'Sunday, November 8, 2020 9:40:34 PM'\r\n$DateTimes = [DateTime[]]$Strings\r\n```\r\n\r\nKnowing that `ToString` isn't just parameterless but also has an **_usefull_** `IFormatProvider` interface parameter, I wanted to prove that you can use member enumerating for the stackoverflow question (instead of iterating through each item), but I failed to do so, as I keep ending up with a (new) collection that has it's own (parameterless) `ToString` method.\r\n\r\nAs @mklement0 commented in #7445:\r\n\r\n> `ToString` is currently invariably invoked on the collection itself (_where it is more or less useless_)\r\n\r\n- If it is indeed useless, why not break it?\r\nThat probably goes too deep as it is not just PowerShell but the `ToString` method actually appears to be implemented in all the .Net collections.\r\n\r\n- If it can't be broken, why not bend it? Meaning, only apply the method to the collection if it has no arguments, which would let the developer choose between the collection (`$DateTimes.ToString()`) or a the embedded scalars  (`$DateTimes.ToString('')`) , knowing that currently this curectly returns an error.\r\nBut that is probably too inconsistent and confusing...\r\nHmm, talking about inconsistency...\r\n\r\n```PowerShell\r\n$DateTimes[0].ToLocalTime()\r\nMonday, November 30, 2020 8:55:01 AM\r\n\r\n$DateTimes[0..2].ToLocalTime()\r\nMonday, November 30, 2020 8:55:01 AM\r\nSunday, October 18, 2020 11:10:01 PM\r\nSunday, November 8, 2020 10:40:34 PM\r\n\r\n$DateTimes[0].ToString('yyyy-MM-dd HH:mm:ss')\r\n2020-10-18 21:10:01\r\n\r\n$DateTimes[0..2].ToString('yyyy-MM-dd HH:mm:ss')\r\nMethodException: Cannot find an overload for \"ToString\" and the argument count: \"1\".\r\n```\r\n\r\n- If it can't be broken or bended, why not equipping all scalar objects (that have a `ToString` method and explicitly excluding collections) with an `Format` alias for the `ToString` method, so that it is possible to enumerate string formats like (wishful thinking):\r\n\r\n```PowerShell\r\n$DateTimes.Format('yyyy-MM-dd HH:mm:ss')\r\n2020-11-30 07:55:01\r\n2020-10-18 21:10:01\r\n2020-11-08 21:40:34\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "My vote is to solve this problem with the proposed `%.` _operator_ for unambiguous member enumeration - which would allow you to call `$someCollection%.ToString('...')` - for the reasons summarized in https://github.com/PowerShell/PowerShell/issues/7445#issuecomment-742512706.",
      "created_at": "2020-12-10T13:19:53Z",
      "updated_at": "2020-12-10T13:40:50Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "As a workaround you can use the engine intrinsic method `ForEach`:\r\n\r\n```powershell\r\n$DateTimes.ForEach('ToString', 'yyyy-MM-dd HH:mm:ss')\r\n```",
      "created_at": "2020-12-10T15:49:01Z",
      "updated_at": "2020-12-10T15:49:01Z"
    }
  ],
  "created_at": "2020-12-10T10:29:48Z",
  "number": 14372,
  "state": "open",
  "title": "Add Format alias for the ToString method to all scalar objects",
  "updated_at": "2020-12-12T16:21:17Z"
}