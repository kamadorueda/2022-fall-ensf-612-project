{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7196",
  "author": "KirkMunro",
  "body": "Related to #6656.\r\n\r\nI know the template suggests we log Windows PowerShell 5.1 issues, suggestions, or feature requests on [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell); however, that feels like a poorly neglected forum, and not appropriate for specific needs like making certain modules that were used in Windows PowerShell 5.1 open source so that they can be updated/enhanced for continued use with PowerShell Core on Windows. What do we do with requests that Windows-specific functionality that is offered in 5.1 be made open source so that we can invest in it when we have a business need to do so?\r\n\r\nThat question aside, I would like the PSPKI module to be made open source. I don't feel like I have anyone's ear for requests in UserVoice (investment in Windows PowerShell modules does not seem like a priority at this point). What can the PowerShell team do to enable the community to move the needle on some older packages that are still needed but not available in PowerShell core? Open source seems like a great way to solve this need.\r\n\r\nThoughts?",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Porting Windows PS Modules so they work on PSCore6 on Windows is something we're working on and it'll take multiple Windows releases before we can declare victory.  Open Sourcing that code is the decision of that module owner.  I can see two main issues that prevent them from Open Sourcing:\r\n\r\n1. Making code OSS creates work and they may not be prepared to sign up for that work\r\n2. The code is likely using undocumented Windows APIs which prevent it from being Open Source\r\n\r\nI've pinged the owner of this module and hopefully they will respond.",
      "created_at": "2018-06-27T20:47:18Z",
      "updated_at": "2018-06-27T20:47:18Z"
    },
    {
      "author": "messy17",
      "author_association": "NONE",
      "body": "Hi Kirk,  I am a Program Manager from Windows Core OS Security.  There currently is no plan to make the cmdlets open source.  These cmdlets are Windows specific, making them open source would not provide any cross platform capability. Can you elaborate further on why there is a need \"to move the needle on some older packages that are still needed but not available in PowerShell core?\"  Why do they need to be in PowerShell core?  What gap or need does this remedy given the cmdlets are included in the operating system for which they are targeted?\r\n\r\nThank you",
      "created_at": "2018-06-28T13:21:26Z",
      "updated_at": "2018-06-28T13:21:26Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@MikeStephens-MS One reason is that the community is moving to PS Core, where all the new features and bugfixes are made. Some modules are developed taking advantage of the new features of the PSCore platform, and are hence not available on Windows PowerShell. \r\n\r\nSo to make use of the \"old\" modules, we have to go to a separate environment (windows powershell), which adds complexity.\r\n\r\nSo even if they are not cross platform, just making them work in PowerShell Core is important to the windows users of PS Core.",
      "created_at": "2018-06-28T13:47:55Z",
      "updated_at": "2018-06-28T13:47:55Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@MikeStephens-MS What @powercode suggested covers part of why I was hoping these cmdlets would be moved forward -- so that they could work from PowerShell Core on Windows (faster, continued development, receiving bug fixes and enhancements regularly, and an environment that more of us are gravitating towards for all scripting needs) just like they do from Windows PowerShell (maintenance mode, only critical fixes at this point).\r\n\r\nMy request for open source comes from wanting to leverage work that is already in PKI cmdlets that doesn't quite suit my needs without reinventing the wheel entirely (the specific scenario I was after: creating a self-signed certificate entirely in memory, using PInvoke/Win32 APIs to create the store in memory and then create the self-signed certificate in that store, and then discarding the store). If it was open source, I would just look at the code and figure out how I could enhance it to support that functionality, which I figured would be much, much faster than submitting a request for such a feature and waiting for it, especially since this module is tied to Windows at the moment.\r\n\r\nOpen sourcing this module could also help remove the need for the community-developed PSPKI module, giving the community an opportunity to collaborate on one module instead of working independently on two and duplicating effort.",
      "created_at": "2018-06-28T14:32:45Z",
      "updated_at": "2018-06-28T14:32:45Z"
    }
  ],
  "created_at": "2018-06-27T13:53:52Z",
  "number": 7196,
  "state": "open",
  "title": "Open source the PSPKI module",
  "updated_at": "2018-06-28T14:32:45Z"
}