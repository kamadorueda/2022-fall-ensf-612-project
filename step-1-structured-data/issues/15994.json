{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15994",
  "author": "mklement0",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nThe forms `$collection.ForEach('someProp')` and `$collection.ForEach({ $_.someProp })` should be equivalent and generally are (the former being faster).\r\n\r\nHowever, with an (adapted) `XmlElement` enumerating the child elements with `.ForEach('someProp')` does _not_ work as expected: it returns the child elements as an _array_ in the first element of the returned collection.\r\n\r\n```powershell\r\n[xml] $xml = '<foo><child>A</child><child>B</child></foo>'\r\n$hash = @{ foo = [pscustomobject] @{ child = 'A'}, [pscustomobject] @{ child = 'B' } } # control\r\n$r = $hash.foo.ForEach('child'); [pscustomobject] @{ Count = $r.Count; TypeOfFirstElem = $r[0].GetType().Name; ValueOfFirstElem = $r[0] }\r\n$r = $xml.foo.ForEach('child'); [pscustomobject] @{ Count = $r.Count; TypeOfFirstElem = $r[0].GetType().Name; ValueOfFirstElem = $r[0] }\r\n$r = $xml.foo.ForEach({ $_.child }); [pscustomobject] @{ Count = $r.Count; TypeOfFirstElem = $r[0].GetType().Name; ValueOfFirstElem = $r[0] }\r\n```\r\n\r\n\r\n\r\n### Expected behavior\r\n\r\n```console\r\nCount TypeOfFirstElem ValueOfFirstElem\r\n----- --------------- ----------------\r\n    2 String          A\r\n    2 String          A\r\n    2 String          A\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nCount TypeOfFirstElem ValueOfFirstElem\r\n----- --------------- ----------------\r\n    2 String          A\r\n    1 Object[]        {A, B}\r\n    2 String          A\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nPowerShell Core 7.2.0-preview.9\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Just a guess but it looks like the `ForEach('child')` invocation is outputting a collection without the enumerate option.\r\n\r\n```\r\nPS> [xml] $xml = '<foo><child>A</child><child>B</child></foo>'\r\nPS> $xml.foo.ForEach('child').GetType()\r\n\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     True     Collection`1                             System.Object\r\n\r\nPS> $xml.foo.ForEach('child')\r\nA\r\nB\r\n\r\nPS> $xml.foo.ForEach('child') | % {$_}\r\nA\r\nB\r\n\r\nPS> $xml.foo.ForEach('child') | % {$_} | % GetType\r\n\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     True     String                                   System.Object\r\nTrue     True     String                                   System.Object\r\n```",
      "created_at": "2021-10-28T22:48:34Z",
      "updated_at": "2021-10-28T22:48:55Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@rkeithhill, note that `.ForEach()` _always_ returns a `System.Collections.ObjectModel.Collection<T>` instance, even for a single output object (e.g. `('foo').foreach('length').GetType()`)\r\n\r\nThe problem here, as demonstrated in the OP, is that the single output object is itself _an array_ (`object[]`), unexpectedly, whereas `$xml.foo.child` enumerates as usual.",
      "created_at": "2021-10-28T22:58:38Z",
      "updated_at": "2021-10-28T22:58:38Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "```\r\n> $xml.foo.ForEach('child')[0].GetType()\r\n\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     True     Object[]                                 System.Array\r\n```\r\nAh, yup.",
      "created_at": "2021-10-28T23:05:51Z",
      "updated_at": "2021-10-28T23:05:51Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I dug a little under the debugger and here are what I found:\r\n1. When running `$xml.foo.ForEach(...)`, `$xml.foo` is treated as a single element `XmlElement foo`. So the operation done within `ForEach` will be targeting `$xml.foo`. However, `$hash.foo` is an array of 2 elements, so it's not really comparable to `$xml.foo` and thus we can ignore it in this context.\r\n\r\n2. `$xml.foo.child` always return an array of 2 elements. The difference between `.ForEach('child')` and `.ForEach({$_.child})` is:\r\n    - for the latter, the array is automatically unwrapped because it goes through the [property access in the language way](https://github.com/PowerShell/PowerShell/blob/4ae539fed46b7403e95f65e605cef645b207642f/src/System.Management.Automation/engine/runtime/Operations/MiscOps.cs#L2890-L2894)\r\n    - for the former, it retrieves the `PSPropertyInfo` and directly [add its value to the collection](https://github.com/PowerShell/PowerShell/blob/4ae539fed46b7403e95f65e605cef645b207642f/src/System.Management.Automation/engine/runtime/Operations/MiscOps.cs#L3011-L3013), without unwrapping.\r\n\r\nThis is why _single output object is itself an array_.\r\nNot super sure how to fix it though. One option is to always unwrap collection when accessing a property or calling a method via the `.ForEach(<member-name>)` syntax.",
      "created_at": "2021-10-29T00:43:59Z",
      "updated_at": "2021-10-29T00:43:59Z"
    }
  ],
  "created_at": "2021-08-25T13:10:53Z",
  "number": 15994,
  "state": "open",
  "title": "The .ForEach() array method misbehaves with XmlElement instances if the name of the property to extract is passed as a string",
  "updated_at": "2021-10-29T00:44:08Z"
}