{
  "_url": "https://github.com/PowerShell/PowerShell/issues/617",
  "author": "andschwa",
  "body": "While I'd hoped this would be easy, I must track it because I am blocked (again) on dotnet/cli#1043.\n\nThis will resolve #571, #461, and #484. The patches were merged in dotnet/corefx#6488, and I've posted manually built patched assemblies to the #porting channel on Slack.\n\nThe `ReadKey` changes are likely to be incompatible with @palladia's changes in #613 to support intercepting `Ctrl-C`.\n\n> Lifetime of terminal attribute settings. Previously we were setting up the terminal's attributes (e.g. disabling echo) the first time the console was used, and leaving those settings for the duration of the process. This has the very bad effect of leaving such settings on the terminal while other code using that terminal runs. For example, if you launch a process with Process.Start and that process expects input, echo will still be disabled, and you won't be able to see the input. This commit changes how we do these attributes. Instead of setting them and leaving them, we only set them while a read operation is in progress, reverting the settings immediately after. (**This does mean that typing prior to a call to Console.ReadKey(intecept: true) will yield visible text**, an unfortunate tradeoff, but it seems to be the better of the options.)\n\n(Emphasis mine. This trade-off is the only solution we have to a myriad of other problems.)\n\nI believe this means that characters typed while `ReadKey` is not blocking will not get captured. However, the only way to know for sure is extensive testing.\n",
  "closed_at": "2016-03-07T23:16:03Z",
  "comments": [
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "> I believe this means that characters typed while ReadKey is not blocking will not get captured. However, the only way to know for sure is extensive testing.\n\nThey get captured just fine. What we saw was `Console.KeyAvailable` returning true only for `Enter` and `EOL`.\n",
      "created_at": "2016-03-03T22:58:47Z",
      "updated_at": "2016-03-03T22:58:47Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "This is in progress on the `new-packages` branch. Waiting on a couple things:\n- [x] dotnet/corefx#6619: necessary to enable merging #613 \n- [x] dotnet/corefx#6636: necessary to build PowerShell with the new packages\n- [x] dotnet/corefx#6603: work-around added to `test/csharp/project.json`, should be removed when no longer necessary\n- [x] [Microsoft.NETCore.Unsupported.Platform.API](https://github.com/ericstj/corefx/commit/b569f96ede171e412b245d58f2c2192b2797a54e): integrated as part of PowerShell/psl-windows-build#6\n",
      "created_at": "2016-03-04T00:46:33Z",
      "updated_at": "2016-03-05T00:39:30Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "~~All right, now I'm just waiting on packages as the build 23904 of `System.Reflection.TypeExtensions` is no good.~~\n",
      "created_at": "2016-03-05T00:40:08Z",
      "updated_at": "2016-03-07T21:27:49Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Build 23907 worked with some updated packages (TypeExtensions minor version was updated as well, among others). Also had to fix up the compatibility package.\n",
      "created_at": "2016-03-07T21:28:27Z",
      "updated_at": "2016-03-07T21:28:27Z"
    }
  ],
  "created_at": "2016-03-03T17:27:33Z",
  "number": 617,
  "state": "closed",
  "title": "Integrate upstream .NET patches for Console.ReadKey",
  "updated_at": "2016-03-07T23:16:07Z"
}