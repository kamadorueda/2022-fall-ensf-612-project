{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4193",
  "author": "ld0614",
  "body": "When there is an apostrophe in the filepath to a module Import-Module will work with modules that only have functions in however will fail if there is a class in the module.  The exact same code will work when the module is located on a different path.  \r\n\r\nThis situation was encountered due to the default OneDrive for Business path including an apostrophe.  When using the user windowspowershell module with folder redirection all use modules now have an apostrophe in the path.  \r\n\r\nThis affects both Version 5.1 and Version 6beta3\r\n\r\nSteps to reproduce\r\n------------------\r\nCreate Folder C:\\Te'mp\r\nSave the below code to C:\\Te'mp\\TypeName.psm1\r\n```powershell\r\n# Define a class\r\nclass TypeName\r\n{\r\n   # Property with validate set\r\n   [ValidateSet(\"val1\", \"Val2\")]\r\n   [string] $P1\r\n\r\n   # Constructor\r\n   TypeName ([string] $s)\r\n   {\r\n       $this.P1 = $s       \r\n   }\r\n}\r\n\r\n```\r\n\r\n```powershell\r\nImport-Module 'C:\\te''mp\\TypeName.psm1'\r\n\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nModule Loaded Successfully / No Output\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nImport-Module : The given assembly name or codebase was invalid. (Exception from HRESULT: 0x80131047)\r\nAt line:1 char:1\r\n+ Import-Module 'C:\\Te''mp\\TypeName.psm1'\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Import-Module], FileLoadException\r\n    + FullyQualifiedErrorId : System.IO.FileLoadException,Microsoft.PowerShell.Commands.ImportModuleCommand\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-beta\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-beta.3\r\nOS                             Microsoft Windows 10.0.14393\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\nName                           Value                                                                                                        \r\n----                           -----                                                                                                        \r\nPSVersion                      5.1.15063.413                                                                                                \r\nPSEdition                      Desktop                                                                                                      \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                                      \r\nBuildVersion                   10.0.15063.413                                                                                               \r\nCLRVersion                     4.0.30319.42000                                                                                              \r\nWSManStackVersion              3.0                                                                                                          \r\nPSRemotingProtocolVersion      2.3                                                                                                          \r\nSerializationVersion           1.1.0.1\r\n```\r\n",
  "closed_at": "2017-11-27T13:54:27Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@ld0614 Thanks for your report!\r\nRelated PR #4136 - it seems we need full review allowed chars for \"file names\" vs \"assembly names\".",
      "created_at": "2017-07-07T06:41:30Z",
      "updated_at": "2017-07-08T17:18:43Z"
    },
    {
      "author": "ld0614",
      "author_association": "NONE",
      "body": "I've written a (very quick and VERY dirty) script which loops through all visible ASCII chars and outputs the ones that fail.  In version 5.1 the following fail: 39 ('), 44 (,) and 61 (=).  Interestingly enough testing with version 6.0 Beta 3 the same 3 fail as well as 126 (~)\r\n\r\n```\r\n$InvalidDirectoryChars = 34,42,47,58,60,62,63,92,124\r\n$FailedChars = @()\r\n\r\nfor ($i = 32; $i -lt 255; $i++)\r\n{\r\n    $PathName = \"C:\\Temp\\$($i)Te$([Char]$i)mp\"\r\n    if ($InvalidDirectoryChars -notcontains $i)\r\n    {\r\n        $Directory = New-Item -ItemType Directory -Path $PathName -Force -ErrorAction SilentlyContinue\r\n        if ($Directory -eq $null)\r\n        {\r\n            Write-Output \"Char $([Char]$i) is not a valid folder name number is: $i\"\r\n        }\r\n        else\r\n        {\r\n            Copy-Item C:\\Temp\\Sample\\* $PathName -Force\r\n        }\r\n        if ($i -ne 91)\r\n        {\r\n            Import-Module $PathName\\FunctionModule.psm1 -ErrorAction SilentlyContinue -Force\r\n        }\r\n        else\r\n        {\r\n            Import-Module 'C:\\Temp\\91Te`[mp\\FunctionModule.psm1' -Force\r\n        }\r\n        $FunctionModule = Get-Module FunctionModule\r\n        if ($FunctionModule.Path -eq \"$PathName\\FunctionModule.psm1\")\r\n        {\r\n            Write-Host \"Char $i Loaded FunctionModule Correctly\" -ForegroundColor Green\r\n        }\r\n        else\r\n        {\r\n            Write-Host \"Char $i failed to load FunctionModule\" -ForegroundColor Red\r\n        }\r\n\r\n        if ($i -ne 91)\r\n        {\r\n            Import-Module $PathName\\ClassModule.psm1 -ErrorAction SilentlyContinue\r\n        }\r\n        else\r\n        {\r\n            Import-Module 'C:\\Temp\\91Te`[mp\\ClassModule.psm1' -Force\r\n        }\r\n        $ClassModule = Get-Module ClassModule\r\n        if ($ClassModule.Path -eq \"$PathName\\ClassModule.psm1\")\r\n        {\r\n            Write-Host \"Char $i Loaded ClassModule Correctly\" -ForegroundColor Green\r\n        }\r\n        else\r\n        {\r\n            Write-Host \"Char $i failed to load ClassModule\" -ForegroundColor Red\r\n            $FailedChars += $i\r\n        }\r\n    }\r\n}\r\n\r\nWrite-Output \"Failed Chars are:\"\r\n$FailedChars\r\n```",
      "created_at": "2017-07-07T23:39:57Z",
      "updated_at": "2017-07-07T23:39:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "This can vary on different platforms. We need more predictable way. I tried to find root code in CoreCLR repo. It seems the exception is [here](https://github.com/dotnet/coreclr/blob/13e7c4368da664a8b50228b1a5ef01a660fbb2dd/src/vm/assemblyname.cpp#L180) and failed code is [here](https://github.com/dotnet/coreclr/blob/dda6b6136e21901842758970d831f31687913a35/src/vm/appdomain.cpp#L9979) but I was not able to take the next step \ud83d\ude15 ",
      "created_at": "2017-07-08T19:08:41Z",
      "updated_at": "2017-07-08T19:08:41Z"
    },
    {
      "author": "TimCurwick",
      "author_association": "CONTRIBUTOR",
      "body": "Whether or not this eventually gets fixed at the .Net level, I presume we want to add the work arounds in the PowerShell code in the meantime.\r\n\r\nI can add three more Replace methods to the one that was merged last week for the comma.\r\n\r\nWe can use \u2019, [char]0x2019, the right quotation mark, to replace the apostrophe.\r\nWe can use \u223c, [char]0x223C, the tilde operator, to replace the tilde.\r\n\r\nThe equals sign is not as straightforward.\r\n\uff1d, [char]0xFF1D, the full width equals sign, as the only character I can find that looks like an equals sign is the most likely choice. The downside is that it is very wide, with whitespace built in, making it wider than standard ASCII characters, which throws off the spacing in plain text, which is probably no big deal but feels weird.\r\n\u2243, [char]0x2248; \u2250, [char]0x2250; and \u2255, [char]0x2255 are close, but not quite matches for an equals sign. They, too, are wider than standard ASCII characters by varying amounts, but not as wide as the full width equals sign.\r\n\u2248, [char]0x2243, is the right width, but it looks the least like an equals sign of the alternatives, and mathematically has a different meaning than an equals sign (almost or approximately equals). (The above three alternatives also have different meanings, but are less common so fewer people would be bothered by their mathematical differences.)",
      "created_at": "2017-07-13T22:45:17Z",
      "updated_at": "2017-07-13T22:45:17Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "And don't forget that you can now use the Unicode esc sequence in dq strings e.g. `` \"`u{2019}\"``.  :-)",
      "created_at": "2017-07-14T00:18:52Z",
      "updated_at": "2017-07-14T00:18:52Z"
    },
    {
      "author": "donlassini",
      "author_association": "NONE",
      "body": "This can also be reproduced in a simpler set up:\r\nSave the TypeName.psm1 file as TypeName.ps1 and execute that.\r\nYou will get an error if e.g. the path contains a comma.",
      "created_at": "2017-11-26T11:04:42Z",
      "updated_at": "2017-11-26T11:04:42Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@donlassini - this bug was fixed in 71d5439bbe02e8db3df4ea93eda96665c293463b - are you still seeing the problem in the latest build?",
      "created_at": "2017-11-26T17:11:52Z",
      "updated_at": "2017-11-26T17:11:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I can confirm that we can import module with apostrophe in the file path in latest builds.",
      "created_at": "2017-11-27T07:12:51Z",
      "updated_at": "2017-11-27T07:13:23Z"
    }
  ],
  "created_at": "2017-07-06T15:39:38Z",
  "number": 4193,
  "state": "closed",
  "title": "Apostrophe in filepath breaks Import-Module when the module has a class in it",
  "updated_at": "2017-11-27T16:06:34Z"
}