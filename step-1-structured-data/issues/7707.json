{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7707",
  "author": "HumanEquivalentUnit",
  "body": "Reading a file of ~60,000 lines, picking only unique entries:\r\n\r\n```\r\n$lines = [System.Io.File]::ReadLines('/path/to/file.txt')\r\n\r\n$lines | Select-Object -Unique   # 6-12 minutes\r\n\r\n$lines | Sort-Object -Unique    # 2-3 seconds\r\n```\r\n\r\n(Relevant source code for [sort-object unique handling](https://github.com/PowerShell/PowerShell/blob/5d03e1653a7d518715fa3f00587cad6b5c78cc89/src/Microsoft.PowerShell.Commands.Utility/commands/utility/sort-object.cs#L58) and relevant source code for [select-object -unique handling](https://github.com/PowerShell/PowerShell/blob/8374a5c97dbdf2367f9db3a6cde74ca3df14d224/src/Microsoft.PowerShell.Commands.Utility/commands/utility/select-object.cs#L600), appears to happen on PSv5.1 Windows and PSv6.1-preview 4 Linux).\r\n\r\nI see that `Select-Object` stores a list of items it has seen, and has a nested loop to compare every incoming item against every item in the list, a full object compare instead of just the property being sorted on, and every added property. so it is doing more work, and should be expected to be slower. Even so, it is *so much* slower - for a case of 'unique strings' which seems like it would be common, but may not be - could it be sped up?\r\n\r\nWould it be reasonable to have it store a HashSet of something like `obj.ToString()` as well, and then for each incoming object, lookup in the HashSet - if it's not there, then the object must be unique and new, and it can be output without further work. If the value is in the hashset, it can do the full comparison.  Or would that be too much extra memory use?\r\n\r\nUsing `sort-object` is a workaround if you don't mind the order changing, but if you try `select-object` and think it's slow, sorting seems like it would add extra work on top and take longer - it's not obvious that it might be ~100x faster.",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@HumanEquivalentUnit Do you want to offer a PR?",
      "created_at": "2018-09-05T13:24:03Z",
      "updated_at": "2018-09-05T13:24:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Seems we could use the same code in Sort-Object, Group-Object and Select-Object.\r\n\r\n/cc @powercode ",
      "created_at": "2018-09-05T13:28:31Z",
      "updated_at": "2018-09-05T13:28:31Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Seems like there are room for improvement :)",
      "created_at": "2018-09-05T17:01:50Z",
      "updated_at": "2018-09-05T17:01:50Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I guess we could move the new Sort-Object code to OrderObjectBase.cs on first step and then reuse it all related cmdlets. ",
      "created_at": "2018-09-06T04:44:26Z",
      "updated_at": "2018-09-06T04:44:36Z"
    },
    {
      "author": "HumanEquivalentUnit",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov A PR for the HashSet looks fun; a PR for merging the code of three cmdlets, without breaking backwards compatibility, looks scary and probably too big for my skills.\r\n\r\n(How does `Group-Object` fit into this?)",
      "created_at": "2018-09-06T22:28:48Z",
      "updated_at": "2018-09-06T22:28:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@HumanEquivalentUnit Yes, there maybe we have to refactor a lot of code. I hope @powercode  will have the inspiration for this. :-)\r\n\r\n> (How does Group-Object fit into this?)\r\n\r\nI've been watching this code for a long time. It seems that there are useful comments in OrderObjectBase.cs.",
      "created_at": "2018-09-07T03:57:31Z",
      "updated_at": "2018-09-07T03:57:31Z"
    },
    {
      "author": "jantari",
      "author_association": "NONE",
      "body": "> Seems we could use the same code in Sort-Object, Group-Object and Select-Object.\r\n\r\nWhat if one wants to preserve the order of the objects? `Select-Object -Unique` does that.\r\n\r\nIf we're going to clean up the cmdlets around this feature I think the first to go should be `Select-Unique` as its utterly useless and confusing due to only rejecting duplicates when they're pre-sorted. Unexpected behavior imo",
      "created_at": "2020-11-30T17:49:53Z",
      "updated_at": "2020-11-30T17:49:53Z"
    }
  ],
  "created_at": "2018-09-05T08:22:13Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine-Performance",
    "Up-for-Grabs",
    "Hacktoberfest",
    "WG-Cmdlets-Utility"
  ],
  "number": 7707,
  "state": "open",
  "title": "Select-Object -Unique is much slower than Sort-Object -Unique",
  "updated_at": "2020-11-30T17:49:53Z"
}