{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4391",
  "author": "petrSchreiber",
  "body": "As I learned the hard way today, **$input** is PowerShell [automatic variable](https://msdn.microsoft.com/en-us/powershell/reference/5.1/microsoft.powershell.core/about/about_automatic_variables).\r\n\r\nPowerShell seems to ignore obviously improper usage of the $input, leaving the programmer confused about the parameter not being propagated further.\r\n\r\nSteps to reproduce\r\n------------------\r\nThere are two identical (non-optimal, I admit) implementations of Ensure-Array.\r\nThey both differ only in parameter name, nothing more.\r\n```powershell\r\nfunction Ensure-ArrayA($input)\r\n{\r\n    $result = @()\r\n    if ($input -is [system.array])\r\n    {\r\n        $result = $input\r\n    }\r\n    else\r\n    {\r\n        $result = @($input)\r\n    }\r\n    return [Array]$result\r\n}\r\n\r\nfunction Ensure-ArrayB($Unknown)\r\n{\r\n    $result = @()\r\n    if ($Unknown -is [system.array])\r\n    {\r\n        $result = $Unknown\r\n    }\r\n    else\r\n    {\r\n        $result = @($Unknown)\r\n    }\r\n    return [Array]$result\r\n}\r\n\r\n$x = Ensure-ArrayA 1\r\n$y = Ensure-ArrayB 1\r\n\r\n$x.Count\r\n$y.Count\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nI would presume PowerShell would fire an exception regarding improper usage of the $input as function parameter in Ensure-ArrayA.\r\n\r\nActual behavior\r\n---------------\r\nInstead, PowerShell silently ignores this incorrect code, pretending everything is all right. Of course, using $input will result in incorrect output as consequence.\r\n\r\nThe script above will output simply:\r\n```\r\n0\r\n1\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value                                                                                                                                                          \r\n----                           -----                                                                                                                                                          \r\nPSVersion                      5.1.14393.1198                                                                                                                                                 \r\nPSEdition                      Desktop                                                                                                                                                        \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                                                                                        \r\nBuildVersion                   10.0.14393.1198                                                                                                                                                \r\nCLRVersion                     4.0.30319.42000                                                                                                                                                \r\nWSManStackVersion              3.0                                                                                                                                                            \r\nPSRemotingProtocolVersion      2.3                                                                                                                                                            \r\nSerializationVersion           1.1.0.1 \r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@petrSchreiber Thanks for your report!\r\n\r\nRelated #3695.\r\n\r\n/cc @jpsnover ",
      "created_at": "2017-07-30T14:20:17Z",
      "updated_at": "2017-07-30T14:20:17Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Also: #3061, which tackles the issue comprehensively.",
      "created_at": "2017-07-30T16:16:18Z",
      "updated_at": "2017-07-30T16:16:18Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee discussed this and agree that the parser will enforce not allowing writing to $input",
      "created_at": "2017-08-02T23:31:27Z",
      "updated_at": "2017-08-02T23:31:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "`Set-Variable` can write to the variable.",
      "created_at": "2017-08-03T08:36:16Z",
      "updated_at": "2017-08-03T08:36:16Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov I think the intent here is to address common usage where the user isn't aware that the variable they are using could be clobbered by PowerShell.  `Set-Variable` doesn't seem like it would fall under this, but I'm not opposed to special casing it in that cmdlet.",
      "created_at": "2017-08-03T23:49:07Z",
      "updated_at": "2017-08-03T23:49:07Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "See [this documentation issue](https://github.com/PowerShell/PowerShell-Docs/issues/1510) for the necessary attendant change to the documentation.",
      "created_at": "2017-08-04T02:21:17Z",
      "updated_at": "2017-08-04T02:21:17Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Although a breaking change, I think we can address this in 6.1.0",
      "created_at": "2017-08-31T20:54:47Z",
      "updated_at": "2017-08-31T20:54:47Z"
    }
  ],
  "created_at": "2017-07-30T12:44:52Z",
  "labels": [
    "WG-Cmdlets",
    "WG-Language",
    "Issue-Discussion",
    "Breaking-Change",
    "Committee-Reviewed"
  ],
  "number": 4391,
  "state": "open",
  "title": "Improper usage of $input as a function parameter is silently ignored",
  "updated_at": "2018-06-20T20:12:37Z"
}