{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10375",
  "author": "KirkMunro",
  "body": "cc: @vexx32 (I think you're the contributor who added short; otherwise, please ignore this cc)\r\n\r\nThe new `[short]` type accelerator is signed, but it does not convert to negative values like other signed type accelerators do.\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n[int]0xffffffff # returns -1\r\n[int]0xfffffffe # returns -2\r\n[int]0xfffffffd # returns -3\r\n[long]0xffffffffffffffff # returns -1\r\n[long]0xfffffffffffffffe # returns -2\r\n[long]0xfffffffffffffffd # returns -3\r\n[short]0xffff # generates an error\r\n[short]0xfffe # generates an error\r\n[short]0xfffd # generates an error\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\n-1\r\n-2\r\n-3\r\n-1\r\n-2\r\n-3\r\n-1\r\n-2\r\n-3\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\n-1\r\n-2\r\n-3\r\n-1\r\n-2\r\n-3\r\nCannot convert value \"65535\" to type \"System.Int16\". Error: \"Value was either too large or too small for an Int16.\"\r\nAt line:7 char:1\r\n+ [short]0xffff # generates an error\r\n+ ~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidArgument: (:) [], RuntimeException\r\n+ FullyQualifiedErrorId : InvalidCastIConvertible\r\n\r\nCannot convert value \"65534\" to type \"System.Int16\". Error: \"Value was either too large or too small for an Int16.\"\r\nAt line:8 char:1\r\n+ [short]0xfffe # generates an error\r\n+ ~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidArgument: (:) [], RuntimeException\r\n+ FullyQualifiedErrorId : InvalidCastIConvertible\r\n\r\nCannot convert value \"65533\" to type \"System.Int16\". Error: \"Value was either too large or too small for an Int16.\"\r\nAt line:9 char:1\r\n+ [short]0xfffd # generates an error\r\n+ ~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidArgument: (:) [], RuntimeException\r\n+ FullyQualifiedErrorId : InvalidCastIConvertible\r\n```\r\n\r\n# Environment data\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-preview.2\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-preview.2-76-g86461f3f35fe7ffe470377fd178c4a71bf1037da\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2019-08-19T00:53:59Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Not an error, this is (unfortunately) by design. Also, you mention *un*signed, but these are all the signed variants. \ud83d\ude42 \r\n\r\nHexadecimal numerals are handled in the tokenizer before anything else. These numerals are all parsed and their value determined before the cast operation is even fully defined by the parser and compiler.\r\n\r\n`0xFFFFFFFF` is always parsed as `-1`, regardless of context, when the hex sequence is entered as a bare string/numeral. However, the sign bit is only recognised at lengths of multiple 8. If we always recognise the upper bit as a sign bit, any number beginning with 0xA-0xF values will always be registered as negative, and any length of `0xFF` values will always be -1. This may not be desirable.\r\n\r\nTHe short version is: only `0xFFFFFFFF` (8 digits) and `0xFFFFFFFFFFFFFFFF` (16 digits) are recognised as `-1`; all other values with an `0xF` bit treat it as unsigned for the purposes of determining the value. This has been documented for the PS7 documentation. This is the same behaviour as Windows PowerShell if you attempt to cast to `[int16]`, the `[short]` accelerator isn't special.\r\n\r\n--------\r\n\r\nThis was done due to the pre-existing behaviour from Windows PowerShell. There, it was more an accident of the way the numerals were parsed (each being parsed by either `int.Parse()` or `Int64.Parse()`), but the committee decision on my PRs was we should mimic existing behaviour.\r\n\r\nMy personal preference was leaning more towards consistent parsing of all values, either being:\r\n\r\n1. Respect the sign bit _always_ for hex values, despite the inconvenience of always needing to prefix a leading zero (e..g, `0x0F`) in order to get any positive values from the hex syntax.\r\n2. Never utilise a sign bit for hex values, and always assume they're unsigned (possibly with some additional suffix tag to indicate they want them parsed as signed).\r\n\r\nNeither of the above was something the Committee wanted, but it was discussed at length in my PRs. \ud83d\ude42 \r\n\r\n----\r\n\r\nThe immediate solution is to simply parse the hex from string into `[short]` so that PowerShell's custom parsing doesn't affect it: `[short]'0xFFFF'`\r\n\r\nI am open to discussing the logic of the parsing modes here if need be, but in general I think that neither of the alternatives I can think of is especially great. We could potentially add a case for each common type, so that the following values _all_ get `-1` treatement:\r\n\r\n- `0xFF`\r\n- `0xFFFF`\r\n- `0xFFFFFFFF`\r\n- `0xFFFFFFFFFFFFFFFF`\r\n\r\nHowever, note that this would be _regardless_ of what you attempt to cast them to; these would always be parsed that way. I think this solution was also previously raised to the Committee during my PRs, but ultimately also rejected as it did not match up with Windows PowerShell behaviour.\r\n\r\nPlease feel free to ask for clarification if anything I've said isn't clear. \ud83d\ude0a ",
      "created_at": "2019-08-18T21:38:01Z",
      "updated_at": "2019-08-18T21:41:59Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Meh, I like consistency, but I'm not going to invest energy in going against existing behaviour at this point. Thanks for the detailed explanation.",
      "created_at": "2019-08-19T00:53:59Z",
      "updated_at": "2019-08-19T00:53:59Z"
    }
  ],
  "created_at": "2019-08-18T20:05:10Z",
  "number": 10375,
  "state": "closed",
  "title": "`[short]0xffff` should return -1, but it generates an error instead",
  "updated_at": "2019-08-23T11:06:43Z"
}