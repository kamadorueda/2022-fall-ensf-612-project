{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5424",
  "author": "mklement0",
  "body": "Steps to reproduce\r\n------------------\r\n\r\n```powershell\r\nbash -c 'echo a; echo b >&2; echo c' 2>&1\r\n```\r\n\r\nOn Windows, use `cmd /c 'echo a & echo b >&2 & echo c' 2>&1`.\r\nAdditionally, in _Windows PowerShell_, append `| % tostring`.\r\n\r\nNote that it is the addition of `2>&1` that triggers the problem.\r\n\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\na\r\nb\r\nc\r\n```\r\nThat is, the output lines should be printed in the order written, across streams.\r\n\r\nActual behavior\r\n---------------\r\n\r\n_Intermittently_, the output order is unexpected in that the stderr output line is printed out of order; e.g.:\r\n\r\n```none\r\na\r\nc\r\nb\r\n```\r\n\r\nor \r\n\r\n```none\r\nb\r\na\r\nc\r\n```\r\n\r\nIf you have trouble seeing the symptom, try something like the following\r\n\r\nUnix:\r\n\r\n```powershell\r\nwhile ($true) { if (($a = bash -c 'echo a; echo b >&2; echo c' 2>&1)[1] -notmatch 'b') { $a; break} }\r\n```\r\n\r\nWindows:\r\n\r\n```powershell\r\nwhile ($true) { if (($a = cmd /c 'echo a & echo b >&2 & echo c' 2>&1 | % tostring)[1] -notmatch 'b') { $a; break}  }\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta.9 on macOS 10.13\r\nPowerShell Core v6.0.0-beta.9 on Ubuntu 16.04.3 LTS\r\nPowerShell Core v6.0.0-beta.9 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\nWindows PowerShell v5.1.15063.674 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "I do not think this is really solvable. Either you redirect stdout and stderr separately. That allows you to distinguish them, but you will not be able to guaranty, that receiving side will handle them in the same order. Either you join stdout and stderr in one destination, that guaranty that you see data in the same order, but you will not be able to distinguish them.",
      "created_at": "2017-12-18T05:27:33Z",
      "updated_at": "2017-12-18T05:27:33Z"
    },
    {
      "author": "redvers",
      "author_association": "NONE",
      "body": "This is normal and expected behaviour for stdout and stderr on UNIXes.  The assumption that it is predictable by the original reporter is wrong, and the example provided isn't a legitimate test.  This is why.\r\n\r\nBuffering.\r\n\r\nThe output gets pushed into the string when the stderr or stdout is flushed.  When does that happen?\r\ni. When it feels like it.[0]\r\nii. When the program explicitly flushes.\r\niii. When a program exits.\r\n\r\nTake a closer look at the example given:\r\n\r\n```bash\r\nbash -c 'echo a; echo b >&2; echo c' 2>&1\r\n```\r\nThis example is actually _FOUR_ programs, not one.\r\n\r\nbash is the parent, and it spawns three __serial__ echo commands.  Each echo is a separate process, typically /bin/echo.\r\n\r\nThat means that, in the above example - the command \"/bin/echo a\" has to execute, complete, flush, and exit before the \"/bin/echo b\" is executed.\r\n\r\nThis results in the ONLY possible ordering being:\r\na\r\nb\r\nc\r\n\r\nTo get the output the OP desires, they need to explicitly flush in their application when they want it.  Languages tend not to autoflush as it causes their performance to sink into the dirt (although some give the option).\r\n\r\nI would assume that there's a function that can be called to flush the output of stdout and stderr.  If there isn't, that's a feature you probably want - but it's not a bug.\r\n\r\n\r\nRed\r\n\r\n[0] There are actually hard and fast rules, but they're nondeterministic.\r\n",
      "created_at": "2018-02-09T22:37:40Z",
      "updated_at": "2018-02-09T22:37:40Z"
    },
    {
      "author": "redvers",
      "author_association": "NONE",
      "body": "I just examined the syscalls executed in the above example and need to correct myself, in this environment bash used internal echo.\r\n\r\nSomething to bear in mind from the POSIX standard:\r\n\r\n```\r\n       At  program start-up, three streams shall be predefined and need not be opened explicitly:\r\n       standard input (for reading conventional input), standard output (for writing conventional\r\n       output),  and  standard\terror  (for writing diagnostic output). When opened, the standard\r\n       error stream is not fully buffered; the standard input and  standard  output  streams  are\r\n       fully  buffered if and only if the stream can be determined not to refer to an interactive\r\n       device.\r\n```\r\n\r\nSo stderr is unbuffered, stdin/stdout is buffered.\r\n\r\nThe OP may get the desired behaviour by executing a flush after printing their stdout.\r\n\r\n[Console]::Out.Flush() maybe?\r\n",
      "created_at": "2018-02-09T23:52:27Z",
      "updated_at": "2018-02-09T23:52:27Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@redvers thanks for your insights into this.  Your explanation makes sense and consistent with the behavior observed.",
      "created_at": "2018-02-10T00:20:51Z",
      "updated_at": "2018-02-10T00:20:51Z"
    },
    {
      "author": "redvers",
      "author_association": "NONE",
      "body": "You're welcome.  This is Day 0 for me with Powershell, off to a good start I guess :-)\r\n\r\nLater",
      "created_at": "2018-02-10T02:35:40Z",
      "updated_at": "2018-02-10T02:35:40Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@redvers:\r\n\r\n> This results in the ONLY possible ordering being:\r\na\r\nb\r\nc\r\n\r\nAnd that is precisely the order that PowerShell is _not_ providing, as demonstrated in my original example.\r\n\r\nBash _always_ gets this ordering right, PowerShell _frequently_ does _not_.\r\n\r\nYou can verify this by letting _Bash_ rather than PowerShell do the stream merging: The following loop _never_ exits, because the order is _always_ as expected:\r\n\r\n```powershell\r\nwhile ($true) { if (($a = bash -c '{ echo a; echo b >&2; echo c; } 2>&1')[1] -notmatch 'b') { $a; break} }\r\n```\r\n\r\nNote how `'echo a; echo b >&2; echo c' 2>&1` from the original example was replaced with `'{ echo a; echo b >&2; echo c; } 2>&1'`; i.e., _Bash_ does the merging (replacing the `echo` builtin call with external-utility call `/bin/echo` doesn't change the behavior).\r\n\r\n~~If you want a more striking example, consider this behavior of the `$(...)` operator:~~\r\n\r\n```powershell\r\n> $(/bin/echo \"1st stdout line\"; /bin/echo \"files in /nosuch\"; ls /nosuch)\r\nls: /nosuch: No such file or directory\r\n1st stdout line\r\nfiles in /nosuch\r\n```\r\n\r\n~~Note how the stderr line comes _first_, despite being output _last_ - even without stream redirections.\r\nNeedless to say, such output is unexpected and confusing, making it hard to understand at what point errors occurred.~~\r\n\r\n~~(By contrast, using `& { ... } ` in lieu of `$(...)` works as expected.)~~\r\n\r\n@SteveL-MSFT: There may be a need to split this into multiple issues, but please don't consider this matter closed.\r\n\r\n\r\n",
      "created_at": "2018-02-11T03:44:02Z",
      "updated_at": "2018-02-11T07:18:58Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@PetSerAl:\r\n\r\n> Either you join stdout and stderr in one destination, that guaranty that you see data in the same order, but you will not be able to distinguish them.\r\n\r\nSeeing the data in the same order is precisely the part that is _not_ working.\r\n\r\nWhile with `2>&1` in a POSIX-like shell you would indeed lose the ability to determine which output line came from what stream, PowerShell actually still allows you to make that distinction:\r\n\r\n```powershell\r\n> bash -c 'echo stdout; echo stderr >&2' 2>&1 | % { $_.GetType().Name } \r\nString\r\nErrorRecord\r\n```",
      "created_at": "2018-02-11T03:56:53Z",
      "updated_at": "2018-02-11T03:56:53Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "> While with 2>&1 in a POSIX-like shell you would indeed lose the ability to determine which output line came from what stream, PowerShell actually still allows you to make that distinction:\r\n\r\nThat is because PowerShell do not actually join sdtout and stderr of called application. It still use two separate anonymous pipe streams for redirection. You should give ability to distinct output up, if you want order. You can not have both.\r\n\r\n> If you want a more striking example, consider this behavior of the `$(...)` operator:\r\n\r\nThat is expected (for me) behavior of `$(...)` or plain `(...)`:\r\n```powershell\r\n$(1; Write-Error 2; 3)\r\n(&{1; Write-Error 2; 3})\r\n```",
      "created_at": "2018-02-11T05:45:14Z",
      "updated_at": "2018-02-11T05:45:14Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> It still use two separate anonymous pipe streams for redirection. \r\n\r\nThanks for explaining that. It sounds like that's the technical crux of the problem.\r\n\r\n> You should give ability to distinct output up, if you want order. You can not have both.\r\n\r\nGiving up distinct output is perfectly fine and - in line with traditional shells - what one should be accepting as a side effect of merging the two streams in order to gain predictable ordering.\r\n\r\n(I didn't realize that ordering is mutually exclusive with distinguishability. This issue is definitely about ordering.)\r\n\r\n> That is expected (for me) behavior of $(...) or plain (...):\r\n\r\nPlease explain why you expect this behavior, _without relying on knowledge of PowerShell internals_ - just tell us why you think this behavior _makes sense_.\r\n",
      "created_at": "2018-02-11T06:37:47Z",
      "updated_at": "2018-02-11T06:37:47Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "> Please explain why you expect this behavior, *without relying on knowledge of PowerShell internals* - just tell us why you think this behavior *makes sense*.\r\n\r\n`$(...)` and `(...)` first collect all the output, and only then write its own result. So you can split it in two:\r\n```powershell\r\n$Result = $(1; Write-Error 2; 3) # collect output\r\n$Result                          # writing own result\r\n```\r\nOn the first step all non stdout output will escape collecting and will be printed. And only on second step collected stdout output will be printed. It is working same way in the Bash, by the way:\r\n```bash\r\necho $(echo 1; echo 2 >&2; echo 3)\r\n```",
      "created_at": "2018-02-11T07:00:21Z",
      "updated_at": "2018-02-11T07:00:21Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "That indeed makes perfect sense, and excellent point about `$(...)` in Bash (though not `(...)`).\r\n\r\nSo, with that cleared up, the original issue remains:\r\n\r\nWith _native utilities_, PowerShell doesn't truly _merge_ the error stream into the success stream with `2>&1` and therefore _doesn't provide predictably ordered output_.\r\n\r\nEven though [`about_redirection`](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_redirection) makes no mention of ordering, this behavior is an unexpected departure from long-standing `>&` semantics in traditional shells, both on Windows and on Unix.  \r\n_In these shells, only ordered output is expected, not the ability to distinguish which lines came from what stream of origin._\r\n\r\nBy contrast, with _PowerShell_-native commands, output ordering _is_ preserved (while _also_ preserving the ability to detect error-stream-originated output by testing for `-is [System.Management.Automation.ErrorRecord]` - though that's not entirely foolproof, given that someone could send such instances directly to the success stream).\r\n\r\nDo you think this is a fair summary?\r\n\r\nGiven that with native utilities PowerShell has to choose between providing either ordering or distinguishability, to me the choice is clear: ordering.\r\n",
      "created_at": "2018-02-11T07:56:05Z",
      "updated_at": "2018-02-11T07:56:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I have to remind #2450\r\n\r\nSo I think the buildup in the pipe is not very good (sample #6059).",
      "created_at": "2018-02-12T04:44:18Z",
      "updated_at": "2018-02-12T04:45:58Z"
    },
    {
      "author": "redvers",
      "author_association": "NONE",
      "body": "> Even though about_redirection makes no mention of ordering, this behavior is an unexpected departure from long-standing >& semantics in traditional shells, both on Windows and on Unix.\r\n> In these shells, only ordered output is expected, not the ability to distinguish which lines came from what stream of origin.\r\n\r\nUmm, please cite a source for that, specifically the UNIX side which says \"In these shells, only ordered output is expected\".  POSIX directly contradicts that.\r\n\r\nWhen you use 2>&1, you are literally saying \"read from stderr and output it directly, unbuffered into stdout\".  You're not going to be able to identify the source because you explicitly chose to throw the information away.\r\n\r\nTaking a step back, if ordering or knowing what data came from where is a requirement of yours then why don't you fork the child from your program and then read the child's stdout and stderr separately?\r\n\r\nThen you'll not only know WHERE the data comes from, but you'll also have full control as to how you want it re-assembled.\r\n\r\n> So I think the buildup in the pipe is not very good\r\n\r\nThat \"buildup in the pipe\" is what gives you your performance.  Default UNIX semantics are that stdout is either block or line buffered, stderr is unbuffered.  stdout is only line-buffered if you're outputting directly to the screen.\r\n\r\nAs an example - try piping a long-running, high text output commmand into tee.  You'll notice that tee will pause and not display anything until the buffers of the feeding program are full.  That is because tee isn't interactive, so it's block buffered.\r\n\r\nIf you want, you can flush stdout after every line you print but calling the flush command.\r\n\r\nAnother option you could have is to see if there is a way to get Powershell to Autoflush stdout at runtime.  In some languages there is a setting to affect a program globally, for example - in Perl, it's the rather intuative command:\r\n\r\n`$|++;`\r\n\r\nEnabling autoflushing by default in the language would be a mistake.  I mean, you can if you want but the performance penalty would be insane.\r\n",
      "created_at": "2018-02-12T07:19:12Z",
      "updated_at": "2018-02-12T07:19:12Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@redvers:\r\n\r\nIt took us a while to narrow this issue down, and I contributed to the confusion with my incorrect `$(...)` example; let me clarify:\r\n\r\n### What this issue is NOT about:\r\n\r\n* This issue has nothing to do with _buffering_. The premise of this issue - `bash -c 'echo a; echo b >&2; echo c'` - is a series of predictably sequenced outputs, as you've explained yourself.\r\n\r\n* This issue is _not_ about the ability to identify which pieces of data came from what stream of \r\norigin when merging streams.\r\n\r\n   * If you opt into _merging_ streams with `2>&1`, you opt out of that ability - and that is expected and perfectly fine.\r\n\r\n  * Note that PowerShell doesn't actually allow you to make that distinction either; it's just that you can _make a reasonable guess_ based on the _type_ of an object in the merged stream that it came from the error stream. (It's only a guess, because it is possible to send error objects directly to the success output stream.)\r\n\r\n### What this issue IS about:\r\n\r\n\r\n\r\n* `cmd.exe` and POSIX-like shells merge the streams _in output sequence_ when you use `2>&1`.\r\n\r\n* PowerShell does so with _PowerShell-native_ commands (good!), but _NOT with [system-]native commands (external utilities)_ (woe is us!), for the reason @PetSerAl has explained (\"still use[s] two separate anonymous pipe streams for redirection\").\r\n   * The unpredictable output sequence with streams merged from an external-utility call is demonstrated in the initial post; here is a command that demonstrates that it works fine with PowerShell commands: the following loop never exits, because the output order remains stable:  \r\n`while ($true) { if (($a = & { 'a'; write-error 'b'; 'c' } 2>&1)[1] -notmatch 'b') { $a; break} }`\r\n\r\nA common use case for `2>&1` with external utility is to get a transcript of sorts, such as when running a (non-PowerShell) shell script: you want to capture that script's output in a single stream, as it would have printed to the console.\r\n\r\nPowerShell's current behavior gets in the way of that, by unpredictably capturing the output out of sequence.\r\n",
      "created_at": "2018-02-12T15:11:41Z",
      "updated_at": "2018-02-12T15:16:25Z"
    },
    {
      "author": "redvers",
      "author_association": "NONE",
      "body": "Thanks for the clarification @mklement0, now I better understand what you were getting at I've written what I believe to be the simplest use-case / illustration to show the bug.  Please forgive the post length:\r\n\r\n```\r\n#include <stdio.h>\r\n#include <unistd.h>\r\n\r\nint main() {\r\n  const void *s   = \"OOOOOO\";\r\n  const void *scr = \"OOOOOO\\n\";\r\n  const void *e   = \"EEEEEE\";\r\n  const void *ecr = \"EEEEEE\\n\";\r\n\r\n  write(1, s, 6);\r\n  write(2, ecr, 7);\r\n  write(1, s, 6);\r\n  write(2, e, 6);\r\n  write(1, scr, 7);\r\n  write(2, e, 6);\r\n  write(1, s, 6);\r\n  write(2, e, 6);\r\n  write(1, s, 6);\r\n  write(2, e, 6);\r\n  0;\r\n}\r\n```\r\n\r\nIt doesn't get simpler than that (note, we have to use write instead of fprintf to ensure that libc doesn't do buffering for us).\r\n\r\nCompiling with gcc and examining the ASM shows that the ASM is sending the data in the correct order:\r\n\r\n```\r\np2 powershell-src # gcc -S -O0 -o tt.S tt.c\r\np2 powershell-src # grep edi tt.S\r\n        movl    $1, %edi\r\n        movl    $2, %edi\r\n        movl    $1, %edi\r\n        movl    $2, %edi\r\n        movl    $1, %edi\r\n        movl    $2, %edi\r\n        movl    $1, %edi\r\n        movl    $2, %edi\r\n        movl    $1, %edi\r\n        movl    $2, %edi\r\np2 powershell-src #\r\n```\r\n\r\nSo, how does our executable behave?\r\n\r\nShell:\r\n```\r\np2 powershell-src # ./tt 2>&1\r\nOOOOOOEEEEEE\r\nOOOOOOEEEEEEOOOOOO\r\nEEEEEEOOOOOOEEEEEEOOOOOOEEEEEEp2 powershell-src #\r\n```\r\n\r\nYou can see the output is interlaced exactly as the code says it should be.\r\n\r\nFrom Powershell:\r\n```\r\nPS /home/red/projects/powershell-src> ./tt 2>&1\r\nOOOOOOOOOOOOOOOOOO\r\nOOOOOOOOOOOOEEEEEE\r\nEEEEEEEEEEEEEEEEEEEEEEEE\r\n```\r\n\r\nInteresting huh?  Seems that STDOUT takes priority over STDERR.\r\n\r\nHope that helps,\r\n\r\n\r\nRed\r\n",
      "created_at": "2018-02-21T15:33:49Z",
      "updated_at": "2018-02-21T15:33:49Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Parking this in 6.2.0 for now, not sure if we'll get around to it for 6.1.0 unless someone from the community takes this one.",
      "created_at": "2018-02-21T21:29:24Z",
      "updated_at": "2018-02-21T21:29:24Z"
    },
    {
      "author": "tekacs",
      "author_association": "NONE",
      "body": "The xonsh project (a shell written in Python) also faced this issue - https://github.com/xonsh/xonsh/issues/2129.\r\n\r\nThe project author there attempted to solve the problem and left a comment with some additional context on how other shells work. I'm linking it here in case it turns out to be useful to the implementor of this feature here (or vice versa):\r\n\r\nhttps://github.com/xonsh/xonsh/issues/2129#issuecomment-283261329\r\n",
      "created_at": "2018-06-02T09:26:03Z",
      "updated_at": "2018-06-02T09:26:48Z"
    },
    {
      "author": "npodbielski",
      "author_association": "NONE",
      "body": "I run on similar problem here. https://github.com/PowerShell/PowerShell/issues/10539\r\nI think that most problematic in this is that how unpredictable it is. I would not matter really even if similar command output would be different in bash then in PS but at leas it should be **deterministic**",
      "created_at": "2019-09-15T08:43:59Z",
      "updated_at": "2019-09-15T08:43:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If we run\r\n```powershell\r\nbash -c 'echo a; echo b >&2; echo c'\r\n```\r\ndo we get desired result?\r\n\r\nIn the case PowerShell does automatic merging standard output and error streams to Out-Default.\r\nIn a case with explicit redirection:\r\n```powershell\r\nbash -c 'echo a; echo b >&2; echo c' 2>&1\r\n```\r\nPowerShell add an data event handler for error stream and implicit stream merging command at end of the pipeline. As result error data events is collected in separate pipe buffer and wrote to output after native command exit.\r\nLook useful comments in \r\nhttps://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/NativeCommandProcessor.cs#L1182\r\n\n\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/11524380?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell\">PowerShell/PowerShell</a></strong></div><div>PowerShell for every system! Contribute to PowerShell/PowerShell development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2019-09-16T05:52:22Z",
      "updated_at": "2019-09-16T05:52:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Perhaps @PaulHigin could be add more info and code references how redirection works by default and with explicit redirection commands.",
      "created_at": "2019-09-16T05:54:24Z",
      "updated_at": "2019-09-16T05:54:24Z"
    },
    {
      "author": "beatcracker",
      "author_association": "CONTRIBUTOR",
      "body": "Another user story: I can't reliably output Docker container logs from PowerShell. Something like this results in log messages out of order if app(s) inside container use `stderr`:\r\n```pwsh\r\ndocker logs some-container | Write-Host\r\n```\r\nThis is extremely annoying since then commands like this need to be shelled out and it's PITA to support on multiple platforms (cmd/bash/etc).",
      "created_at": "2021-06-21T14:57:03Z",
      "updated_at": "2021-06-21T14:57:03Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That particular use case is going to run into issues in any case; PowerShell doesn't pass error data over pipelines / to commands, only output / stdout (generally). If an application is writing to stderr, Write-Host will never see it. You can try merging the streams as many examples here have done.\r\n\r\nNot sure if there's a better way to approach that particular use case at the moment, though \ud83e\udd14 ",
      "created_at": "2021-06-21T15:29:59Z",
      "updated_at": "2021-06-21T15:29:59Z"
    },
    {
      "author": "beatcracker",
      "author_association": "CONTRIBUTOR",
      "body": "> @vexx32 \r\n> If an application is writing to stderr, Write-Host will never see it.\r\n\r\nI have to disagree :). This works, but the ordering is messed up:\r\n\r\n```\r\ndocker logs kafka | ? { $_ -is [System.Management.Automation.ErrorRecord] } | Write-Host\r\n  16:29:51.63\r\n  16:29:51.63 Welcome to the Bitnami kafka container\r\n ...\r\n```\r\n\r\nI've settled for now on just dropping `Write-Host` and polluting pipeline which I don't like but it's acceptable in my case. No ordering issues that way.\r\n\r\n",
      "created_at": "2021-06-21T16:42:18Z",
      "updated_at": "2021-06-21T16:42:18Z"
    }
  ],
  "created_at": "2017-11-12T03:11:47Z",
  "labels": [
    "WG-Engine"
  ],
  "number": 5424,
  "state": "open",
  "title": "Unpredictable ordering of native command output when merging the error stream into the success output stream",
  "updated_at": "2021-06-21T16:42:18Z"
}