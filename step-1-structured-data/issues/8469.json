{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8469",
  "author": "PaulHigin",
  "body": "Per PowerShell documentation, Enable-PSRemoting and Disable-PSRemoting cmdlets enable and disable *all* remoting endpoints on the local machine.  But PSCore6 versions of these cmdlets affect only PSCore6 endpoints.  The problem with this is that users expect Disable-PSRemoting cmdlet to isolate the local machine from any WinRM/PowerShell connections, but this is no longer true when all Windows PowerShell endpoints remain enabled.\r\n\r\nI feel these enable/disable cmdlets should affect all WinRM endpoints on the local machine.  The cmdlet behavior should only differ by what default endpoints they create.  \r\n\r\nEnable-PSSessionConfiguration/Disable-PSSessionConfiguration cmdlets can be used to enable/disable individual endpoints.\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n# Create/register default PSCore6 remote endpoints\r\nEnable-PSRemoting -Force\r\n\r\n# Disable endpoints\r\nDisable-PSRemoting -Force\r\n\r\n# From Windows PowerShell check its remote endpoints\r\npowershell.exe -c 'Get-PSSessionConfiguration'\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nAll PowerShell endpoints on local machine are disabled.\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nOnly PSCore6 endpoints on local machine are disabled.  Windows PowerShell endpoints remain enabled and so PSRemoting remains enabled.\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.0-preview.2\r\nPSEdition                      Core\r\nGitCommitId                    6.2.0-preview.2-68-gc9fc4ef4ec1256ac7082f55c45d4e400cc642767\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Can PowerShell Core use Windows PowerShell endpoints and/or vice verse? If yes I agree that the proposal make sense.",
      "created_at": "2018-12-15T10:38:00Z",
      "updated_at": "2018-12-15T10:39:11Z"
    },
    {
      "author": "alexandair",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Sure, it can. That's how WindowsCompatibility module works--PowerShell Core on Windows connects to Windows PowerShell endpoint.",
      "created_at": "2018-12-15T15:04:55Z",
      "updated_at": "2018-12-15T15:04:55Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "How about:\r\n\r\n* keeping the edition-scoped behavior for consistency.\r\n\r\n* issuing a _warning_ if `Disable-PSRemoting` finds endpoints managed by the respective _other_ edition.\r\n\r\n* updating the documentation accordingly.\r\n\r\nThat would avoid the awkwardness of introducing implicit cross-edition _functionality_ (as opposed to _awareness_).\r\n",
      "created_at": "2018-12-15T19:06:15Z",
      "updated_at": "2018-12-15T19:06:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If `Disable-PSRemoting` disable/warn endpoints in both editions then `Enable-PSRemoting` should works symmetrically. ",
      "created_at": "2018-12-16T08:52:26Z",
      "updated_at": "2018-12-16T08:52:26Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "This one's hard...I strongly agree with @iSazonov's statement that Enable/Disable should be symmetric, but on the other hand, I really don't want us hunting around for and calling powershell.exe to do that (or worse, implementing logic for PS Core to create the endpoint itself). \r\n\r\nIn my mind, one problem here is that both of these cmdlets have conceptually been helpers/wrappers for \"setting up and disabling PowerShell remoting\" as opposed to something like New/Remove-WinRMEndpoint. \r\n\r\nBut I expect the @PowerShell/powershell-committee to have opinions here... ",
      "created_at": "2019-01-23T22:09:29Z",
      "updated_at": "2019-01-23T22:09:29Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this.  The current behavior is that `Disable-PSRemoting` affects the entire system while `Enable-PSRemoting` is only for the PS being used.  We agreed that this behavior should be documented and no code change expected.",
      "created_at": "2019-01-23T23:53:02Z",
      "updated_at": "2019-01-23T23:53:02Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT \r\n\r\n> We agreed that this behavior should be documented\r\n\r\nDocumenting this baffling asymmetry is an absolute necessity, but I fear it's not enough to counteract how counterintuitive it is.",
      "created_at": "2019-01-24T01:07:25Z",
      "updated_at": "2019-01-24T01:07:25Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 if we ever get `Enable-SSHRemoting` and `Disable-SSHRemoting`, we can decide to have them scoped to current PowerShell instance and possibly have a `-Scope System` parameter if needed.",
      "created_at": "2019-01-24T01:34:19Z",
      "updated_at": "2019-01-24T01:34:19Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT:\r\n\r\nIn line with @joeyaiello's argument: Something like `New/Remove-WinRMEndpoint` would deserve to be edition-agnostic, because its target is something that _transcends_ a particular PS edition.\r\n\r\nKnowing little about SSH-based remoting, it sounds like the same logic would apply there - unless it is truly something PS-specific.\r\n\r\nIn other words: Anything _but_ `*-PSRemoting` deserves to be edition-agnostic.\r\n",
      "created_at": "2019-01-24T02:46:37Z",
      "updated_at": "2019-01-24T02:46:37Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "I feel this is a wrong decision by the committee.  What is the justification for keeping this behavior that breaks with our public documentation and expected behavior?  Updating the cmdlets to be in conformance is relatively easy.",
      "created_at": "2019-01-24T16:20:25Z",
      "updated_at": "2019-01-24T16:20:25Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "To clarify, the decision from @PowerShell/powershell-committee is to retain the Windows PowerShell behavior.",
      "created_at": "2019-01-24T17:10:00Z",
      "updated_at": "2019-01-24T17:10:00Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2019-06-01T00:00:26Z",
      "updated_at": "2019-06-01T00:00:26Z"
    }
  ],
  "created_at": "2018-12-14T23:50:23Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Remoting",
    "Committee-Reviewed"
  ],
  "number": 8469,
  "state": "open",
  "title": "Enable-PSRemoting and Disable-PSRemoting cmdlets should affect all remoting endpoints per documentation.",
  "updated_at": "2021-06-01T19:33:53Z"
}