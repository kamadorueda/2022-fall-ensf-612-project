{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3258",
  "author": "mklement0",
  "body": "[ISO-8859-1](https://en.wikipedia.org/wiki/ISO/IEC_8859-1) is currently (alpha16) the default character encoding, as well as when explicit encoding specifiers `Default` and `OEM` are used - see [here](https://github.com/PowerShell/PowerShell/issues/3248#issuecomment-284038694).\r\n\r\nThis **choice is problematic, because ISO-8859-1 is a _subset_ of the commonly used [Windows-1252](https://en.wikipedia.org/wiki/Windows-1252) encoding.**  \r\n(The two encodings are often conflated, but they are _not_ the same.)\r\n\r\nSpecifically, **using ISO-8859-1 makes the following characters - the printable characters in the codepoint range `0x80 - 0x9F` - _unavailable_**:\r\n\r\n    \u20ac \u201a \u0192 \u201e \u2026 \u2020 \u2021 \u02c6 \u2030 \u0160 \u2039 \u0152 \u017d \u2018 \u2019 \u201c \u201d \u2022 \u2013 \u2014 \u02dc \u2122 \u0161 \u203a \u0153 \u017e \u0178\r\n\r\nNote that the `\u20ac` character is part of that list.\r\n\r\nYou can verify the problematic behavior as follows:\r\n\r\n    > '\u20ac' | Set-Content tmp.txt; Get-Content tmp.txt\r\n    ?\r\n\r\nBecause `\u20ac` cannot be represented in ISO-8859-1, it was quietly converted to a _literal_ `?`.\r\n\r\nContrast this with use of Windows-1252:\r\n\r\n    > $enc1252 = [System.Text.CodePagesEncodingProvider]::Instance.GetEncoding(1252); [IO.File]::WriteAllText('tmp.txt', '\u20ac', $enc1252); [IO.File]::ReadAllText('tmp.txt', $enc1252)\r\n    \u20ac\r\n\r\nThe `\u20ac` char. - codepoint `0x80` in Windows-1252 (but not ISO-8859-1) - was correctly preserved.\r\n\r\n---\r\n\r\nAlso, **please note that in order to fully emulate _Windows_ PowerShell behavior, using a _fixed_ encoding in Core is _not_ sufficient.**\r\n\r\nInstead, the encoding would have to be locale-dependent, as on Windows:\r\nUnix locales would have to be mapped to the Windows legacy codepages - see [here](https://github.com/PowerShell/PowerShell/issues/3248#issuecomment-284241580).",
  "closed_at": "2017-03-06T19:13:36Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Looks like the Content cmdlets used ISO-8859-1 as default to align with HTTP1.1, but HTML5 now uses Windows-1252 as equivalent due to mislabeling of sites using ISO-8859-1.  Seems like using Windows-1252 would be ideal.",
      "created_at": "2017-03-04T22:54:09Z",
      "updated_at": "2017-03-04T22:54:09Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Unfortunately just changing https://github.com/PowerShell/PowerShell/blob/fc30ae1d8713d930b7301bd6d9a85c77256f8669/src/System.Management.Automation/utils/ClrFacade.cs#L385 causes PowerShell to stop working",
      "created_at": "2017-03-04T23:21:33Z",
      "updated_at": "2017-03-04T23:21:33Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT \r\n\r\nThanks for that. To make it even more explicit:\r\n\r\n**Mistaking what was actually Windows-1252 for ISO-8559-1 became so commonplace that the HTML5 specification, which links to [this page about encoding](https://www.w3.org/TR/encoding/),  decided to treat label  \"iso-8859-1\" as an _alias for_  [windows-1252](https://encoding.spec.whatwg.org/index-windows-1252.txt)** (the link lists all chars. with the high bit set, i.e., starting at `0x80`), which is also reflected in this [living WHATWG document](https://encoding.spec.whatwg.org/#names-and-labels).",
      "created_at": "2017-03-05T00:10:13Z",
      "updated_at": "2017-03-05T00:10:13Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT: I suspect that the reason it breaks is that the Windows-1252 code page is not available _by default_ in Core, but you can load it via the [`System.Text.Encoding.CodePages`](https://www.nuget.org/packages/System.Text.Encoding.CodePages/) NuGet package, as demonstrated in this [Stack Overflow answer](http://stackoverflow.com/a/37870346/45375).\r\n\r\nCuriously, from PowerShell Core itself, that package (assembly) _is_ available by default, which is what the PowerShell snippet in the initial post  takes advantage of (`[System.Text.CodePagesEncodingProvider]::Instance.GetEncoding(1252)`).",
      "created_at": "2017-03-05T00:12:41Z",
      "updated_at": "2017-03-05T00:15:39Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 thanks!",
      "created_at": "2017-03-05T01:34:34Z",
      "updated_at": "2017-03-05T01:34:34Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT \r\n>Looks like the Content cmdlets used ISO-8859-1 as default to align with HTTP1.1, but HTML5 now uses Windows-1252 as equivalent due to mislabeling of sites using ISO-8859-1. Seems like using Windows-1252 would be ideal.\r\n\r\nDefaults for Content cmdlets and Web cmdlets is different things. I believe the issue is for Content cmdlets and it is duplicate #3248. Default for Web Cmdlet I suggest better discuss in #3267.",
      "created_at": "2017-03-06T18:37:26Z",
      "updated_at": "2017-03-06T18:37:26Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT: @iSazonov is correct, so I'm closing this issue.\r\n",
      "created_at": "2017-03-06T19:13:36Z",
      "updated_at": "2017-03-06T19:13:36Z"
    }
  ],
  "created_at": "2017-03-04T18:43:48Z",
  "labels": [
    "Resolution-Duplicate",
    "WG-Engine"
  ],
  "number": 3258,
  "state": "closed",
  "title": "Default and OEM character encodings in the Core edition should be Windows-1252, not ISO-8859-1",
  "updated_at": "2017-03-06T19:31:57Z"
}