{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16774",
  "author": "LethiferousMoose",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nThis is a follow-up issue to issue #5661 I reported a few years back and I would like some insight into how this setup is different.\r\n\r\nMy new code has been following the \"manifest module\" pattern as laid out in the Pester documentation here:\r\nhttps://github.com/pester/Pester/wiki/Testing-different-module-types#usage-and-workarounds\r\n\r\nHere is their snippet for reference:\r\n```powershell\r\n@{\r\nModuleVersion     = '1.0'\r\n\r\nRootModule        = \"MyModule.psm1\"\r\n\r\nNestedModules     = @( \"Invoke-PrivateManifestMethod.ps1\", \"Invoke-PublicManifestMethod.ps1\" )\r\nFunctionsToExport = @( \"Invoke-PublicManifestMethod\" )\r\n}\r\n```\r\n\r\nThis pattern works well for private and public PowerShell functions, it also works decently well for classes, except those that need to be exposed in the `ValidateSet` attribute. If I were to publish this I would likely merge the files, as I've heard dot-sourcing (which I assume is similar to `NestedModules`) can have performance issues, but I would still expect this to work locally.\r\n\r\nTo produce the issue, create the following folder structure and files:\r\n\r\n```\r\n\\--PSTest\r\n   |--Classes\r\n      |--ValidateSet.ps1\r\n   |--Public\r\n      |--Test-ValidateSet.ps1\r\n   |--PSTest.psd1\r\n   |--PSTest.psm1\r\n```\r\n\r\n**ValidateSet.ps1**:\r\n```powershell\r\nusing namespace System.Management.Automation\r\n\r\nclass TestValuesGenerator :  IValidateSetValuesGenerator {\r\n\r\n    [string[]] GetValidValues() {\r\n        return 1, 2, 3\r\n    }\r\n\r\n}\r\n```\r\n\r\n**Test-ValidateSet.ps1**:\r\n```powershell\r\n# Also does not work.\r\n# . $PSScriptRoot/../Classes/ValidateSet.ps1\r\n\r\nfunction Test-ValidateSet {\r\n    param (\r\n        [ValidateSet([TestValuesGenerator])]\r\n        [string] $IWantValidValues\r\n    )\r\n}\r\n```\r\n\r\n**PSTest.psd1**:\r\n```powershell\r\n...\r\n\r\n# Modules to import as nested modules of the module specified in RootModule/ModuleToProcess\r\nNestedModules = @('Classes/ValidateSet.ps1', 'Public/Test-ValidateSet.ps1')\r\n\r\n# Functions to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no functions to export.\r\nFunctionsToExport = @('Test-ValidateSet', 'Test-ValidateSetInModule')\r\n\r\n...\r\n```\r\n\r\n**PSTest.psm1**:\r\n```powershell\r\n# Also does not work.\r\n# . $PSScriptRoot/Classes/ValidateSet.ps1\r\n\r\nfunction Test-ValidateSetInModule {\r\n    param (\r\n        [ValidateSet([TestValuesGenerator])]\r\n        [string] $IWantValidValues\r\n    )\r\n}\r\n```\r\n\r\nAt the moment, the only workaround I've found is literally putting a copy of the class in any file that needs it or putting all the classes for `ValidateSet` exposure into their own module and using the `using module` expression. Neither is overly convenient. \r\n\r\n**Edit:\r\nI can also use the `ScriptsToProcess` attribute, that brings the class into session scope which may or may not be a good idea and would open the door to type collisions.**\r\n\r\n@iSazonov worked on the previous fix, maybe they have some insight into how this behavior is different. My current assumption is the classes are only visible to module scope, but the same is also true for classes defined inside a module, so I'm not 100% sure what the actual underlying differences are.\r\n\r\n### Expected behavior\r\n\r\n```console\r\nNo errors occur and validate set operations work.\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nPS> Test-ValidateSet\r\nInvalidOperation: C:\\<path-to-modules>\\Modules\\PSTest\\Public\\Test-ValidateSet.ps1:6\r\nLine |\r\n   6 |          [ValidateSet([TestValuesGenerator])]\r\n     |          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     | Unable to find type [TestValuesGenerator].\r\n```\r\n\r\n\r\n### Error details\r\n\r\n```console\r\nException             :\r\n    Type        : System.Management.Automation.RuntimeException\r\n    ErrorRecord :\r\n        Exception             :\r\n            Type    : System.Management.Automation.ParentContainsErrorRecordException\r\n            Message : Unable to find type [TestValuesGenerator].\r\n            HResult : -2146233087\r\n        TargetObject          : [ValidateSet([TestValuesGenerator])]\r\n        CategoryInfo          : InvalidOperation: ([ValidateSet([TestValuesGenerator])]:AttributeAst) [], ParentContainsErrorRecordException\r\n        FullyQualifiedErrorId : TypeNotFound\r\n        InvocationInfo        :\r\n            ScriptLineNumber : 6\r\n            OffsetInLine     : 9\r\n            HistoryId        : -1\r\n            ScriptName       : C:\\<path-to-modules>\\Modules\\PSTest\\Public\\Test-ValidateSet.ps1\r\n            Line             : [ValidateSet([TestValuesGenerator])]\r\n\r\n            PositionMessage  : At C:\\<path-to-modules>\\Modules\\PSTest\\Public\\Test-ValidateSet.ps1:6 char:9\r\n                               +         [ValidateSet([TestValuesGenerator])]\r\n                               +         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n            PSScriptRoot     : C:\\<path-to-modules>\\Modules\\PSTest\\Public\r\n            PSCommandPath    : C:\\<path-to-modules>\\Modules\\PSTest\\Public\\Test-ValidateSet.ps1\r\n            CommandOrigin    : Internal\r\n        ScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\n    TargetSite  :\r\n        Name          : NewValidateSetAttribute\r\n        DeclaringType : System.Management.Automation.Language.Compiler, System.Management.Automation, Version=7.2.1.500, Culture=neutral, PublicKeyToken=31bf3856ad364e35\r\n        MemberType    : Method\r\n        Module        : System.Management.Automation.dll\r\n    Message     : Unable to find type [TestValuesGenerator].\r\n    Data        : System.Collections.ListDictionaryInternal\r\n    Source      : System.Management.Automation\r\n    HResult     : -2146233087\r\n    StackTrace  :\r\n   at System.Management.Automation.Language.Compiler.NewValidateSetAttribute(AttributeAst ast)\r\n   at System.Management.Automation.Language.Compiler.GetAttribute(AttributeAst attributeAst)\r\n   at System.Management.Automation.Language.AttributeAst.GetAttribute()\r\n   at System.Management.Automation.Language.Compiler.GetRuntimeDefinedParameter(ParameterAst parameterAst, Boolean& customParameterSet, Boolean& usesCmdletBinding)\r\n   at System.Management.Automation.Language.Compiler.GetParameterMetaData(ReadOnlyCollection`1 parameters, Boolean automaticPositions, Boolean& usesCmdletBinding)\r\n   at System.Management.Automation.Language.FunctionDefinitionAst.System.Management.Automation.Language.IParameterMetadataProvider.GetParameterMetadata(Boolean automaticPositions, Boolean& usesCmdletBinding)\r\n   at System.Management.Automation.CompiledScriptBlockData.InitializeMetadata()\r\n   at System.Management.Automation.CompiledScriptBlockData.get_ObsoleteAttribute()\r\n   at System.Management.Automation.DlrScriptCommandProcessor.Init()\r\n   at System.Management.Automation.CommandDiscovery.CreateCommandProcessorForScript(FunctionInfo functionInfo, ExecutionContext context, Boolean useNewScope, SessionStateInternal sessionState)\r\n   at System.Management.Automation.CommandDiscovery.LookupCommandProcessor(CommandInfo commandInfo, CommandOrigin commandOrigin, Nullable`1 useLocalScope, SessionStateInternal sessionState)\r\n   at System.Management.Automation.CommandDiscovery.LookupCommandProcessor(String commandName, CommandOrigin commandOrigin, Nullable`1 useLocalScope)\r\n   at System.Management.Automation.ExecutionContext.CreateCommand(String command, Boolean dotSource)\r\n   at System.Management.Automation.PipelineOps.AddCommand(PipelineProcessor pipe, CommandParameterInternal[] commandElements, CommandBaseAst commandBaseAst, CommandRedirection[] redirections, ExecutionContext context)\r\n   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal[][] pipeElements, CommandBaseAst[] pipeElementAsts, CommandRedirection[][] commandRedirections, FunctionContext funcContext)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\nTargetObject          : [ValidateSet([TestValuesGenerator])]\r\nCategoryInfo          : InvalidOperation: ([ValidateSet([TestValuesGenerator])]:AttributeAst) [], RuntimeException\r\nFullyQualifiedErrorId : TypeNotFound\r\nInvocationInfo        :\r\n    ScriptLineNumber : 6\r\n    OffsetInLine     : 9\r\n    HistoryId        : -1\r\n    ScriptName       : C:\\<path-to-modules>\\Modules\\PSTest\\Public\\Test-ValidateSet.ps1\r\n    Line             : [ValidateSet([TestValuesGenerator])]\r\n\r\n    PositionMessage  : At C:\\<path-to-modules>\\Modules\\PSTest\\Public\\Test-ValidateSet.ps1:6 char:9\r\n                       +         [ValidateSet([TestValuesGenerator])]\r\n                       +         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    PSScriptRoot     : C:\\<path-to-modules>\\Modules\\PSTest\\Public\r\n    PSCommandPath    : C:\\<path-to-modules>\\Modules\\PSTest\\Public\\Test-ValidateSet.ps1\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\n```\r\n\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.1\r\nPSEdition                      Core\r\nGitCommitId                    7.2.1\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": "2022-01-22T05:00:45Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@LethiferousMoose Please look #6652 where we are tracking class issues. Perhaps we already have an issue like this.",
      "created_at": "2022-01-20T04:32:25Z",
      "updated_at": "2022-01-20T04:32:25Z"
    },
    {
      "author": "LethiferousMoose",
      "author_association": "NONE",
      "body": "@iSazonov Dang, that's a big list... I think I was happier being ignorant to all this... I'll read over them when I have some time tomorrow.",
      "created_at": "2022-01-20T04:50:03Z",
      "updated_at": "2022-01-20T04:50:03Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@LethiferousMoose   I've been through this pain :-) \r\n\r\nScript Classes loaded in modules can end up being invisible _outside_ the module. So if one is linked to a parameter it isn't available when you run the command at the prompt.  \r\n\r\nThis is what I have in the .psd1 for a module I am working on at the moment. \r\n```\r\n    ScriptsToProcess    = @('OctopusUtilityClasses.ps1')\r\n    RootModule          =   'Octopus.psm1'\r\n\r\n    FunctionsToExport   = @(  ...\r\n```\r\n\r\n(my PSM1 file dot sources all .ps1 files in specific folders - I have 1 per function about 60 in all!) \r\n\r\nThis behaves as if I run \r\n```\r\n.  OctopusUtilityClasses.ps1 \r\nimport-module  <something without classes>\r\n```\r\n\r\nIIRC Classes are also OK if they are defined in the .PSM1 file itself, but not if they are in a file which the PSM1 loads. \r\n",
      "created_at": "2022-01-20T10:35:13Z",
      "updated_at": "2022-01-20T10:35:13Z"
    },
    {
      "author": "LethiferousMoose",
      "author_association": "NONE",
      "body": "@jhoneill That's what I ended up doing, it just seems odd to me that a class defined within a .psm1 (which is only visible to the module) can be used for a `ValidateSet` attribute, but a class defined in a separate file (also only visible to things internal to the module) is not. It seems kind of jank to have to expose the class publicly in order to make this combination work. That opens the door to some potential weirdness and class name uniqueness issues (because PowerShell classes are not namespaced). My guess is there's something different about how imported files are scoped or the order of operations is slightly different.",
      "created_at": "2022-01-20T15:19:57Z",
      "updated_at": "2022-01-20T15:21:47Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@LethiferousMoose       \"Seems a bit odd\" is an understatement :-)   \r\n It's known and the stuff in #6652  is trying to round these issues up and do something about them but the lack of progress. makes me wonder if the cause isn't easy to solve. For now it's - just something one needs to work round. \r\n    \r\n\r\n",
      "created_at": "2022-01-20T19:59:25Z",
      "updated_at": "2022-01-20T19:59:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Dup #6652 #6293",
      "created_at": "2022-01-21T04:19:12Z",
      "updated_at": "2022-01-21T04:19:12Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as duplicate and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-01-22T05:00:44Z",
      "updated_at": "2022-01-22T05:00:44Z"
    }
  ],
  "created_at": "2022-01-20T01:02:47Z",
  "labels": [
    "Resolution-Duplicate",
    "Needs-Triage",
    "WG-Engine-Module"
  ],
  "number": 16774,
  "state": "closed",
  "title": "Getting error \"Unable to find type\" when using IValidateSetValuesGenerator in a PowerShell manifest module ",
  "updated_at": "2022-01-22T05:00:45Z"
}