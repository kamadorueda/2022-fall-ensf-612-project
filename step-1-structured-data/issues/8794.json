{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8794",
  "author": "SeeminglyScience",
  "body": "# Summary of the new feature/enhancement\r\n\r\nCurrently if you use the `InternalScriptExtent.Text` property it will allocate a string of the section of the script that the extent represents.  It would be a nice quality of life for compiled editor related projects if we could get a `ReadOnlySpan<char>` instead.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nThis could be surfaced with a new interface that implements `IScriptExtent`.\r\n\r\n```csharp\r\npublic interface ISpanEnabledScriptExtent : IScriptExtent\r\n{\r\n    ReadOnlySpan<char> GetTextSpan();\r\n}\r\n```\r\n\r\nAnd an implementation in `InternalScriptExtent`\r\n\r\n```csharp\r\npublic ReadOnlySpan<char> GetTextSpan()\r\n{\r\n    // StartOffset can be > the length for the EOF token.\r\n    if (StartOffset > PositionHelper.ScriptText.Length)\r\n    {\r\n        return ReadOnlySpan<char>.Empty;\r\n    }\r\n\r\n    return ((ReadOnlySpan<char>)PositionHelper.ScriptText).Slice(\r\n        StartOffset,\r\n        EndOffset - StartOffset);\r\n}\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SeeminglyScience Please clarify how do you plan get benefits in an editor if InternalScriptExtent is internal class?",
      "created_at": "2019-01-31T06:05:20Z",
      "updated_at": "2019-01-31T06:05:20Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov The new method would be accessible via the proposed public interface.\r\n\r\nI mention `InternalScriptExtent` specifically because it's the default `IScriptExtent` created by the parser. If you're working with extents that you haven't created yourself, they will most commonly be (by a large margin) `InternalScriptExtent`.\r\n\r\nThere also isn't much value in adding it the public `ScriptExtent` because you have to pass a string of it's contents to the constructor. Ideally `ScriptExtent` would still implement it, but mainly just for consistency.",
      "created_at": "2019-01-31T12:40:13Z",
      "updated_at": "2019-01-31T12:40:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SeeminglyScience Thanks for clarify. What specific editor project do you mean? I think it will be more convincing for the committee to approve the new public API.\r\nAlso I think it should be in IScriptExtent which is already public and I suggest AsSpan().",
      "created_at": "2019-01-31T13:00:32Z",
      "updated_at": "2019-01-31T13:00:32Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Thanks for clarify. What specific editor project do you mean? I think it will be more convincing for the committee to approve the new public API.\r\n\r\nThe suggestion came about while working on the [overhaul for EditorServicesCommandSuite](https://github.com/SeeminglyScience/EditorServicesCommandSuite/tree/0.5.0/src/EditorServicesCommandSuite) which utilizes `Span` heavily.  That said, when `Span` is eventually added to netstandard there are a lot of places in PowerShellEditorServices where this would be useful.\r\n\r\n> Also I think it should be in IScriptExtent which is already public\r\n\r\nWouldn't that be a breaking change for current implementations of `IScriptExtent`?  Not sure how many external implementations are out there, but at the very least PowerShellEditorServices and EditorServicesCommandSuite both have at least one.\r\n\r\n> I suggest AsSpan().\r\n\r\n`AsSpan` is already used a lot as extension methods in instances where a cast would normally work.  This is most often used targeting netstandard because the nuget package doesn't include the implicit operators for types like `string` and `T[]`.\r\n\r\nI think `AsSpan` would imply you are getting the extent itself as a span instead of just the string it represents.  I guess `GetSpan` has a similar problem though now that I think about it.  Maybe `GetTextSpan` would be better?",
      "created_at": "2019-01-31T15:15:00Z",
      "updated_at": "2019-01-31T15:15:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Wouldn't that be a breaking change for current implementations of IScriptExtent?\r\n\r\nWith C# 8.0 we get default interface implementations.\r\n\r\n> I think AsSpan would imply \u2026\r\n\r\nYour request is about Text property so TextAsSpan() will be that you want :-)",
      "created_at": "2019-01-31T15:38:37Z",
      "updated_at": "2019-01-31T15:38:37Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> With C# 8.0 we get default interface implementations.\r\n\r\nOkay now that's cool.  I had heard about that but I had assumed it would be behind-the-scenes compiler magic.  In case anyone else had the same assumption, [here's a sharplab](https://sharplab.io/#v2:EYLgZgpghgLgrgJwgZwLQBEJinANjASQDsYIFsBjCAgWwAdcIaITYBLAeyIBoYQ3cAHwACABgAEwgIwBuALAAoYQGZxbEmUoRxAYXEBvReOOTVwgCziAsgAoAlAaMnnOrsg6MAdAHUEbUjYwCHAQdvIKzgC+itEKiiqSAEzi6OIgugbikUA=) showing it's supported in the CLR. Neat \ud83d\ude42 \r\n\r\nSince the EMCA spec says interface's cannot provide concrete instance methods, do you happen to know if full CLR already supports this? Core CLR is in general a bit more lax in it's runtime checks from what I've seen.",
      "created_at": "2019-02-01T13:06:13Z",
      "updated_at": "2019-02-01T13:06:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "My understanding is that .Net Framework get new features slowly and only if it is not breaking backward compatibility. All new features is added to .Net Core. So it may not appear at all in Framework.",
      "created_at": "2019-02-01T13:37:44Z",
      "updated_at": "2019-02-01T13:37:44Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "What I'm more curious about is if it just happens to work.  In other words, the spec might say it's not supported but that doesn't mean they specifically coded against it outside of compilers.  I'll do some testing with `MetadataBuilder` to see how/if it blows up.  If it does then a new interface would be better, assembly load failures at runtime are no fun.\r\n\r\n**Edit:** Both core and full CLR currently throw when loading an interface with a non-abstract instance method \ud83d\ude15 ",
      "created_at": "2019-02-01T14:07:41Z",
      "updated_at": "2019-02-01T14:34:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Seems we could benefit from the API internally too.\r\n\r\n@SeeminglyScience Please update the issue description.\r\n\r\n@SteveL-MSFT Could PowerShell Committee review the new proposed API? ",
      "created_at": "2019-02-02T14:52:23Z",
      "updated_at": "2019-02-02T14:53:11Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "As long as you're thinking about performance and extents - there are also some nice possible gains in revisiting how the parser stores extents.\r\n\r\nSome background- I think I over-generalized with `IScriptExtent` - my thinking at the time was that there would be tools generating a PowerShell Ast that did not generate script and might want a custom way to represent the extent. I'm not aware of such tools.\r\n\r\nIf the Ast stored a concrete type (not `IScriptExtent`) - it could be `struct` saving some memory (assuming extents aren't shared (I don't think they are) and can't be shared effectively. Some asts will have the same extent, but is sharing a bigger win than a struct?\r\n\r\nAlso possible - the `ScriptText` property only needs to be stored in the root of the `Ast` - children could simply store the start/end pair, and a proper `ScriptExtent` instance would be synthesized on demand.",
      "created_at": "2019-02-04T19:19:31Z",
      "updated_at": "2019-02-04T19:19:31Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Some background- I think I over-generalized with IScriptExtent - my thinking at the time was that there would be tools generating a PowerShell Ast that did not generate script and might want a custom way to represent the extent. I'm not aware of such tools.\r\n\r\nSounds like something I'd do, got any fun ideas? \ud83d\ude09 \r\n\r\n>  (assuming extents aren't shared (I don't think they are))\r\n\r\nSome AST's share extents with tokens, like string constant expressions:\r\n\r\n```powershell\r\nusing namespace System.Management.Automation.Language\r\n\r\n$t = $null\r\n$a = [Parser]::ParseInput(\"'test'\", [ref] $tokens, [ref] $null)\r\n[object]::ReferenceEquals(\r\n    $a.EndBlock.Statements[0].PipelineElements[0].Expression.Extent,\r\n    $t[0].Extent)\r\n#  True\r\n```\r\n\r\n> Also possible - the ScriptText property only needs to be stored in the root of the Ast - children could simply store the start/end pair, and a proper ScriptExtent instance would be synthesized on demand.\r\n\r\n\u2764\ufe0f ",
      "created_at": "2019-02-04T19:54:59Z",
      "updated_at": "2019-02-04T19:54:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Related #1806 #7857 #7887 - Trivia\r\n",
      "created_at": "2019-02-05T05:53:49Z",
      "updated_at": "2019-02-05T05:53:49Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "the suggestion from @lzybkr suggests that adding to IScriptExtent might not be the best way to go. Could we get an updated proposal along those lines?",
      "created_at": "2019-02-14T00:37:31Z",
      "updated_at": "2019-02-14T00:37:31Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "I still think there is value in the original proposal.  Ultimately @lzybkr's suggestion is better long term, but I think it's a deceptively large undertaking.\r\n\r\nI'll include a rough outline of how I picture the changes below, but before that a few things to consider.\r\n\r\n1. Every AST type would need new public constructors to handle the alternate way of providing extent information.\r\n\r\n1. Tokens would also likely new constructors (though there are no public constructors currently)\r\n\r\n1. A significant amount of logic in the parser (and at least some in the compiler) would need to be updated.\r\n\r\nI've always wanted to see a separate parser package focused on supporting editors and other related tools.  In something like that I think this change would be great because you could throw out `IScriptExtent` entirely.  I could be missing an easy solution (@lzybkr?) but it looks like the amount of work would not likely be worth the performance gain.\r\n\r\nHere's my idea of how it could be done, ignoring thread safety and error checking:\r\n\r\n```csharp\r\n// Public version of PositionHelper that is easier to use and create, and stores script text\r\n// as ReadOnlyMemory<char>.\r\npublic class ScriptDocumentInfo\r\n{\r\n    private PositionHelper _positionHelper;\r\n\r\n    public ScriptDocumentInfo(string file, ReadOnlyMemory<char> scriptText, int[] lineStartMap)\r\n    {\r\n        File = file;\r\n        ScriptText = scriptText;\r\n        LineStartMap = lineStartMap;\r\n    }\r\n\r\n    public ReadOnlyMemory<char> ScriptText { get; }\r\n\r\n    public int[] LineStartMap { get; }\r\n\r\n    public string File { get; }\r\n\r\n    // This could possibly be omitted and instead use a new IScriptExtent implementation\r\n    // that would utilize ScriptDocumentInfo instead of PositionHelper.\r\n    internal PositionHelper PositionHelper => _positionHelper ?? _positionHelper = CreatePositionHelper(this);\r\n\r\n    public static ScriptDocumentInfo Create(string file, ReadOnlyMemory<char> input)\r\n    {\r\n        // Line map creation from Tokenizer.Initialize method.\r\n        List<int> lineStartMap = new List<int>(100) { 0 };\r\n        for (int i = 0; i < input.Length; ++i)\r\n        {\r\n            char c = input[i];\r\n\r\n            if (c == '\\r')\r\n            {\r\n                if ((i + 1) < input.Length && input[i + 1] == '\\n')\r\n                {\r\n                    i += 1;\r\n                }\r\n\r\n                lineStartMap.Add(i + 1);\r\n            }\r\n\r\n            if (c == '\\n')\r\n            {\r\n                lineStartMap.Add(i + 1);\r\n            }\r\n        }\r\n\r\n        return new ScriptDocumentInfo(file, input, lineStartMap.ToArray());\r\n    }\r\n\r\n    private static PositionHelper CreatePositionHelper(ScriptDocumentInfo document)\r\n    {\r\n        var helper = new PositionHelper(document.File, document.ScriptText.ToString());\r\n        helper.LineStartMap = document.LineStartMap;\r\n        return helper;\r\n    }\r\n}\r\n\r\n// Every AST would need new constructors that will take either ScriptSpan or\r\n// both ScriptSpan and ScriptDocumentInfo (for top level ASTs)\r\npublic partial class Ast\r\n{\r\n    private IScriptExtent _scriptExtent;\r\n\r\n    private ScriptDocumentInfo _document;\r\n\r\n    protected Ast(ScriptSpan scriptSpan)\r\n    {\r\n        ScriptSpan = scriptSpan;\r\n    }\r\n\r\n    protected Ast(ScriptDocumentInfo document, ScriptSpan scriptSpan)\r\n    {\r\n        _document = document;\r\n        ScriptSpan = scriptSpan;\r\n    }\r\n\r\n    // Original extent based constructor should still populate ScriptSpan and Document.\r\n    protected Ast(IScriptExtent extent)\r\n    {\r\n        _scriptExtent = extent;\r\n        _document = ScriptDocumentInfo.Create(\r\n            extent.File,\r\n            extent.Position.GetFullScript());\r\n        ScriptSpan = new ScriptSpan(extent.StartOffset, extent.EndOffset);\r\n    }\r\n\r\n    public ScriptSpan ScriptSpan { get; }\r\n\r\n    // Lazily create IScriptExtent from ScriptSpan.\r\n    public IScriptExtent Extent => _scriptExtent ?? _scriptExtent = ScriptSpan.ToScriptExtent(Document);\r\n\r\n    public ScriptDocumentInfo Document\r\n    {\r\n        get\r\n        {\r\n            if (_document != null)\r\n            {\r\n                return _document;\r\n            }\r\n\r\n            // Get document from a parent if it's not present on this node.\r\n            for (Ast node = Parent; node != null; node = node.Parent)\r\n            {\r\n                if (node._document != null)\r\n                {\r\n                    return _document = node._document;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// I used the name ScriptSpan as sort of a reference to Microsoft.CodeAnalysis.Text.TextSpan but\r\n// System.Span makes that a little confusing.\r\npublic readonly struct ScriptSpan\r\n{\r\n    public readonly int StartOffset;\r\n\r\n    public readonly int EndOffset;\r\n\r\n    public ScriptSpan(int startOffset, int endOffset)\r\n    {\r\n        StartOffset = startOffset;\r\n        EndOffset = endOffset;\r\n    }\r\n\r\n    // DocumentInfo must be provided when context is needed to keep the struct size small.\r\n    public IScriptExtent ToScriptExtent(ScriptDocumentInfo documentInfo)\r\n    {\r\n        return new InternalScriptExtent(\r\n            documentInfo.PositionHelper,\r\n            StartOffset,\r\n            EndOffset);\r\n    }\r\n\r\n    public ReadOnlySpan<char> GetTextSpan(ScriptDocumentInfo documentInfo)\r\n    {\r\n        return documentInfo.ScriptText.Span.Slice(StartOffset, EndOffset);\r\n    }\r\n}\r\n```",
      "created_at": "2019-02-14T15:57:47Z",
      "updated_at": "2019-02-14T15:58:18Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I think we're thinking roughly the same thing, the primary difference would just be an optimization in not storing `ScriptDocumentInfo` redundantly in every `Ast`.\r\n\r\nI would like to see `_scriptExtent` eventually go away. To start maybe it'd be important for performance, but if folks can move away from using the `Extent` property (maybe deprecate it?) then creating a new one every time wouldn't be too big a deal and it would be much better for gc perf - fewer fields to scan.",
      "created_at": "2019-02-14T18:34:43Z",
      "updated_at": "2019-02-14T18:34:43Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> I would like to see `_scriptExtent` eventually go away. To start maybe it'd be important for performance, but if folks can move away from using the `Extent` property (maybe deprecate it?) then creating a new one every time wouldn't be too big a deal and it would be much better for gc perf - fewer fields to scan.\r\n\r\nWhat about using a static `ConditionalWeakTable<Ast, IScriptExtent>` so reference equality is kept?",
      "created_at": "2019-02-14T19:33:49Z",
      "updated_at": "2019-02-14T19:33:49Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "A `ConditionalWeakTable` could be worse depending on how often the `Extent` property is used.\r\n\r\nI forgot to mention - I'm not excited about basically doubling the constructors. I know it would be a breaking change to remove the variants taking `IScriptExtent`, but that change might be low impact.",
      "created_at": "2019-02-14T20:12:31Z",
      "updated_at": "2019-02-14T20:12:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If I understand correctly the idea we keep source code (file) on top level and reference with (start, length) from ast tree. In the case if the file changed (by user in editor) whole ast tree (or all referenses) is needed to rebuild (recalculated). Does it cause a performance problem?",
      "created_at": "2019-02-15T04:12:20Z",
      "updated_at": "2019-02-15T04:12:20Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> A `ConditionalWeakTable` could be worse depending on how often the `Extent` property is used.\r\n\r\nYeah, my thought process was if `Extent` is deprecated then the performance hit would be acceptable to avoid breaking changes while still optimizing the recommended method.\r\n\r\n> I forgot to mention - I'm not excited about basically doubling the constructors. I know it would be a breaking change to remove the variants taking `IScriptExtent`, but that change might be low impact.\r\n\r\nThat change would have a pretty high impact on quite a few things I'm doing, but that's probably not a great indicator.\r\n\r\n@iSazonov \r\n\r\n> If I understand correctly the idea we keep source code (file) on top level and reference with (start, length) from ast tree. In the case if the file changed (by user in editor) whole ast tree (or all referenses) is needed to rebuild (recalculated). Does it cause a performance problem?\r\n\r\nThe AST is immutable, so everything is rebuilt with every change already.\r\n\r\n",
      "created_at": "2019-02-15T05:16:46Z",
      "updated_at": "2019-02-15T05:16:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> The AST is immutable, so everything is rebuilt with every change already.\r\n\r\nInteresting, what is Roslin behavior in such case?",
      "created_at": "2019-02-15T08:44:33Z",
      "updated_at": "2019-02-15T08:44:33Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Interesting, what is Roslin behavior in such case?\r\n\r\nAlso immutable so changes are done by recreating the whole tree there as well.  They do have some support for incremental parsing though.  I haven't looked into it too much, but I would assume they still need to recreate the whole tree with incremental parsing.  It's probably used to avoid needing to tokenize the whole source again.",
      "created_at": "2019-02-15T12:44:57Z",
      "updated_at": "2019-02-15T12:44:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SeeminglyScience Thanks! I look shortly the Roslyn sources - they uses immutable structs.\r\nFor reference https://stackoverflow.com/questions/25076035/roslyn-change-textspan-of-syntaxtoken-or-syntaxnode/25085585#25085585\r\n",
      "created_at": "2019-02-15T17:58:42Z",
      "updated_at": "2019-02-15T17:59:00Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "The Roslyn tree is essentially immutable, but the do smart things to avoid rebuilding the entire tree as that wouldn't scale to large projects\r\n\r\nPowerShell can't do things quite like Roslyn because of the `Parent` link. When I added that, it was a very conscious decision to make certain types of analysis much simpler given that the notion of a project does not exist in PowerShell and scripts tend to be reasonably small in comparison to C# code, e.g. you can do much more in fewer lines of code in PowerShell.\r\n",
      "created_at": "2019-02-15T20:35:52Z",
      "updated_at": "2019-02-15T20:35:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr Thanks for sharing the design decision! I would add that PowerShell Parser is very fast so that we shouldn't worry even about modules consisting of thousands of lines that seems to be covering all reasonable scenarios.\r\n\r\nI suggest that PowerShell Committee consider this idea (The ScriptText property only needs to be stored in the root of the Ast - children could simply store the start/end pair, and a proper ScriptExtent instance would be synthesized on demand.) so that we can continue to work in the right direction.",
      "created_at": "2019-02-16T13:17:03Z",
      "updated_at": "2019-02-16T13:17:03Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@iSazonov - committee involvement isn't necessary for implementation details like that unless there is a breaking change.\r\n\r\nI think some complexity can be avoided with a breaking change, but it isn't strictly necessary to get some nice wins.",
      "created_at": "2019-02-16T15:21:50Z",
      "updated_at": "2019-02-16T15:21:50Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr Initial request is to enhance IScriptExtent (new API). Opposite proposal is to deprecate this interface (a breaking change). The third sentence is to save the interface but implement a new API (additional complicity). It is PowerShell Committee competence.",
      "created_at": "2019-02-16T18:31:59Z",
      "updated_at": "2019-02-16T18:31:59Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@SeeminglyScience Is this issue still seeking for adding a new property to `IScriptExtent`? Or, has the goal been changed to pursue a more fundamental change? If it's the latter, then a RFC would be desired to keep various ideas and discussions well captured. If it's the former, then it will be great that you update the issue description to reflect the most up-to-date proposal of it.\r\n\r\nOverall, I think adding `TextAsSpan` to `IScriptExtent` is feasible with the upcoming \"interface default member\" feature in C#. But I'm afraid it might cause you problems when the editor service code that take advantage the new member is running on an older version of pwsh (or maybe that won't happen?).",
      "created_at": "2019-02-28T01:58:26Z",
      "updated_at": "2019-02-28T01:58:26Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Is this issue still seeking for adding a new property to `IScriptExtent`?\r\n\r\nIt is to add a new interface with the `GetTextSpan` method (or whatever name is decided, but that is my vote).  I believe it should be on a new interface to avoid breaking `IScriptExtent` implementations that target PowerShell Standard.\r\n\r\n> Or, has the goal been changed to pursue a more fundamental change?\r\n\r\nI think the changes @lzybkr brought up are ultimately the right move at some point in the future.  They do however come with a significant amount of risk and effort as `IScriptExtent` is used heavily in the parser.  For those changes to be meaningful at all, that logic would all need to be changed to use the new API. It's also difficult (for me at least) to tell how exactly large of a benefit those changes would really be.  In other words I think it's the right move but I can't commit that much spare time to it.\r\n\r\n> But I'm afraid it might cause you problems when the editor service code that take advantage the new member is running on an older version of pwsh (or maybe that won't happen?).\r\n\r\nYeah I did some tests with `MetadataBuilder`. Both core and full CLR currently throw on type gen if it comes cross an interface member with a concrete implementation.",
      "created_at": "2019-02-28T03:28:17Z",
      "updated_at": "2019-02-28T03:28:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Both core and full CLR currently throw on type gen if it comes cross an interface member with a concrete implementation.\r\n\r\nMy understanding is that it is for binary compatibility - you can load new dll in old code and run.\r\nAlso PowerShell Standard can have versions too.",
      "created_at": "2019-02-28T03:56:32Z",
      "updated_at": "2019-02-28T03:56:32Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> My understanding is that it is for binary compatibility - you can load new dll in old code and run.\r\nAlso PowerShell Standard can have versions too.\r\n\r\nAh right I'm thinking about it backwards (loading the new `IScriptExtent` into an older runtime), maybe that would work.  Though from the perspective of `IScriptExtent` it wouldn't have access to `PositionHelper`.  It would have to look get the full script text with something like `IScriptExtent.StartPosition.GetFullScript()` before it could get the span.",
      "created_at": "2019-02-28T04:10:16Z",
      "updated_at": "2019-02-28T04:10:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I'd ask MSFT team weigh the paths \r\n - if we add TextAsSpan to IScriptExtent today and later deprecate it with new solution - it will then breaking change and extra work\r\n - there are some fundamental issues that could be considered together - standalone Parser, trivia, the new shared extent proposal - if we want to change something then it must be a balanced movement.",
      "created_at": "2019-03-06T14:29:26Z",
      "updated_at": "2019-03-06T14:29:26Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, the desired behavior makes sense and we approve",
      "created_at": "2019-03-06T23:34:22Z",
      "updated_at": "2019-03-06T23:34:22Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> @PowerShell/powershell-committee reviewed this, the desired behavior makes sense and we approve\r\n\r\nTo clarify, \"the desired behavior\" means the proposed behavior: add `Span` based API to script extents to avoid `SubString` calls. The implementation detail was not in the committee discussion.",
      "created_at": "2019-03-07T02:11:18Z",
      "updated_at": "2019-03-07T02:11:18Z"
    }
  ],
  "created_at": "2019-01-30T14:51:15Z",
  "labels": [
    "Issue-Enhancement",
    "Committee-Reviewed"
  ],
  "number": 8794,
  "state": "open",
  "title": "Add Span based API to script extents",
  "updated_at": "2019-03-07T02:11:18Z"
}