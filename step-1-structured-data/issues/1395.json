{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1395",
  "author": "alexandair",
  "body": "## Steps to reproduce\n\nI'm on Windows 10 with November update:\n\n``` powershell\nPS C:\\> $PSVersionTable\n\nName                           Value\n----                           -----\nPSVersion                      5.0.10586.122\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\nBuildVersion                   10.0.10586.122\nCLRVersion                     4.0.30319.42000\nWSManStackVersion              3.0\nPSRemotingProtocolVersion      2.3\nSerializationVersion           1.1.0.1\n```\n\nWhen I install PowerShell 0.6.0 by using powershell-0.6.0-win81-x64.zip or PowerShell_0.6.0.0.msi, output of $PSVersionTable is not correct. \n## Expected behavior\n\nPSEdition property should be Desktop, not Core.\nCLRVersion property should not be empty.\n## Actual behavior\n\n``` powershell\nPS C:\\Program Files\\PowerShell\\0.6.0.0> $PSVersionTable\n\nName                           Value\n----                           -----\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\nSerializationVersion           1.1.0.1\nWSManStackVersion              3.0\nPSVersion                      5.1.10032.0\nPSRemotingProtocolVersion      2.3\nPSEdition                      Core\nGitCommitId                    v0.6.0\nCLRVersion\nBuildVersion                   3.0.0.0\n```\n",
  "closed_at": "2017-06-19T22:10:37Z",
  "comments": [
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "In PSEdition Core is for CoreCLR, Desktop is for FullCLR, so there is no problems here.\n",
      "created_at": "2016-07-17T00:25:14Z",
      "updated_at": "2016-07-17T00:25:38Z"
    },
    {
      "author": "alexandair",
      "author_association": "CONTRIBUTOR",
      "body": "Shouldn't CLRVersion property be populated?\n",
      "created_at": "2016-07-17T01:03:49Z",
      "updated_at": "2016-07-17T01:03:49Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Probably....\n",
      "created_at": "2016-07-20T21:52:41Z",
      "updated_at": "2016-07-20T21:52:41Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "This is purposefully not set because it is supposed to be `[Environment]::Version`, but that is not available in .NET Core (at least not in the current stable release; it _is coming back_ per https://github.com/dotnet/corefx/commit/fe5f4fbebc9e85c8e512a273567719dca15ac764, which will be available in the next stable release). So while it is not available, it is set to null.\n\nPlease note that the following will be confusing:\n\n``` powershell\n~/src/PowerShell |-/ [environment]::Version \n\nMajor  Minor  Build  Revision\n-----  -----  -----  --------\n4      0      30319  42000   \n```\n\nThis is due to `Version` being set in the environment extensions class for compatibility, and is not the actual CLR version.\n\nSo `$PSVersionTable` is currently correct; but should be updated with the next release of .NET Core.\n\nClosing for now.\n\n/cc @daxian-dbw \n",
      "created_at": "2016-09-19T22:49:13Z",
      "updated_at": "2016-09-19T22:49:13Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "If the api is coming back, this issue should be left open so we remember to fix the code.\n\nIf the api never comes back, we should consider either removing the entry or fill it in explicitly. An empty value is useless.\n",
      "created_at": "2016-09-20T20:17:00Z",
      "updated_at": "2016-09-20T20:17:00Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr do you happen to know which API we depended upon here? I want to validate if it's coming back with 2.0",
      "created_at": "2017-04-12T20:25:32Z",
      "updated_at": "2017-04-12T20:25:32Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Looks like it's `Environment.Version`: https://github.com/PowerShell/PowerShell/blob/f0c0176aa21647668e2bb3235e65dee002d52c62/src/System.Management.Automation/engine/PSVersionInfo.cs#L70",
      "created_at": "2017-04-12T20:45:51Z",
      "updated_at": "2017-04-12T20:45:51Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@joeyaiello @lzybkr following Andy's link above to corefx, it appears Environment.Version is [hardcoded](https://github.com/dotnet/corefx/commit/fe5f4fbebc9e85c8e512a273567719dca15ac764#diff-f22c2c21bb8e123660fb98b76393bbebR138) to 4.0.30319.42000 for compat reasons.  If the CLR version is useful (beyond this hardcoded string), it looks like we need to return the fileversion.  ",
      "created_at": "2017-04-12T20:54:53Z",
      "updated_at": "2017-04-12T20:54:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I believe too we should restore it for backward compatibility.\r\n\r\nAnd the next question is whether we need something else useful here? \r\n- NetCoreApp ? (Microsoft.Extensions.PlatformAbstractions.PlatformServices.Default.Application.RuntimeFramework.Version)\r\n- real CLR runtime version? There is no native way to get it https://github.com/dotnet/coreclr/issues/8815 \r\n[Comment](https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/Environment.cs#L360) : \r\n>Starting with 4.6 we switched to a file versioning\r\n\r\nSo we would read the version from coreclr.dll - how to find it?",
      "created_at": "2017-04-14T05:19:10Z",
      "updated_at": "2017-04-14T05:19:10Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@PowerShell/powershell-committee discussed a bunch of options today:\r\n1. removing the property: given the type of `$PSVersionTable`, `$PSVersionTable.CLRVersion` will still just emit `$null`. A cursory search reveals a non-zero amount of instances of people using `.Contains` which *would* still break\r\n2. using the hardcoded value of `[Environment]::Version`\r\n3. using the `.VersionInfo.FileVersion` of `coreclr.dll` (4.6.somethingorother)\r\n\r\nUltimately, the value is meaningless other than supporting back-compat. Given CoreCLR's decision to hardcode the string, we should talk to @terrajobst about .NET's thinking on this problem so that we don't do anything dumb. ",
      "created_at": "2017-04-19T23:32:23Z",
      "updated_at": "2017-04-19T23:32:23Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Assigning to myself to ping @terrajobst about this. ",
      "created_at": "2017-05-23T19:16:16Z",
      "updated_at": "2017-05-23T19:16:16Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee discussed this with dotnet team and agree that we should not be exposing ClrVersion property as guidance from dotnet is that users should not be taking dependency on this value as it's not providing intended value",
      "created_at": "2017-06-14T23:39:14Z",
      "updated_at": "2017-06-14T23:39:14Z"
    }
  ],
  "created_at": "2016-07-16T20:51:52Z",
  "number": 1395,
  "state": "closed",
  "title": "$PSVersionTable.CLRVersion property should be removed in PowerShell Core",
  "updated_at": "2017-06-20T05:13:38Z"
}