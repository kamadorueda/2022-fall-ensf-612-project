{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9599",
  "author": "fMichaleczek",
  "body": "# Steps to reproduce\r\n\r\n```powershell\r\n$avaloniaAssemblies = @(\r\n    \".\\Packages\\Avalonia.0.8.0\\lib\\netcoreapp2.0\\Avalonia.Animation.dll\"\r\n    \".\\Packages\\Avalonia.0.8.0\\lib\\netcoreapp2.0\\Avalonia.Base.dll\"\r\n    \".\\Packages\\Avalonia.0.8.0\\lib\\netcoreapp2.0\\Avalonia.Controls.dll\"\r\n    \".\\Packages\\Avalonia.0.8.0\\lib\\netcoreapp2.0\\Avalonia.DesignerSupport.dll\"\r\n    \".\\Packages\\Avalonia.0.8.0\\lib\\netcoreapp2.0\\Avalonia.Diagnostics.dll\"\r\n    \".\\Packages\\Avalonia.0.8.0\\lib\\netcoreapp2.0\\Avalonia.dll\"\r\n    \".\\Packages\\Avalonia.0.8.0\\lib\\netcoreapp2.0\\Avalonia.Input.dll\"\r\n    \".\\Packages\\Avalonia.0.8.0\\lib\\netcoreapp2.0\\Avalonia.Interactivity.dll\"\r\n    \".\\Packages\\Avalonia.0.8.0\\lib\\netcoreapp2.0\\Avalonia.Layout.dll\"\r\n    \".\\Packages\\Avalonia.0.8.0\\lib\\netcoreapp2.0\\Avalonia.Logging.Serilog.dll\"\r\n    \".\\Packages\\Avalonia.0.8.0\\lib\\netcoreapp2.0\\Avalonia.Markup.dll\"\r\n    \".\\Packages\\Avalonia.0.8.0\\lib\\netcoreapp2.0\\Avalonia.Markup.Xaml.dll\"\r\n    \".\\Packages\\Avalonia.0.8.0\\lib\\netcoreapp2.0\\Avalonia.OpenGL.dll\"\r\n    \".\\Packages\\Avalonia.0.8.0\\lib\\netcoreapp2.0\\Avalonia.Styling.dll\"\r\n    \".\\Packages\\Avalonia.0.8.0\\lib\\netcoreapp2.0\\Avalonia.Themes.Default.dll\"\r\n    \".\\Packages\\Avalonia.0.8.0\\lib\\netcoreapp2.0\\Avalonia.Visuals.dll\"\r\n    \".\\Packages\\Avalonia.0.8.0\\lib\\netcoreapp2.0\\Avalonia.DesktopRuntime.dll\"\r\n    \".\\Packages\\Avalonia.Desktop.0.8.0\\lib\\netstandard2.0\\Avalonia.Desktop.dll\"\r\n    \".\\Packages\\Avalonia.Skia.0.8.0\\lib\\netstandard2.0\\Avalonia.Skia.dll\"\r\n    \".\\Packages\\Avalonia.Win32.0.8.0\\lib\\netstandard2.0\\Avalonia.Win32.dll\"\r\n    \".\\Packages\\Avalonia.ReactiveUI.0.8.0\\lib\\netstandard2.0\\Avalonia.ReactiveUI.dll\"\r\n    \".\\Packages\\Serilog.2.8.0\\lib\\netstandard2.0\\Serilog.dll\"\r\n    \".\\Packages\\Serilog.Sinks.Debug.1.0.0\\lib\\netstandard1.0\\Serilog.Sinks.Debug.dll\"\r\n    \".\\Packages\\Serilog.Sinks.Trace.2.1.0\\lib\\netstandard1.3\\Serilog.Sinks.Trace.dll\"\r\n    \".\\Packages\\System.Reactive.4.0.0\\lib\\netstandard2.0\\System.Reactive.dll\"\r\n)\r\n  \r\nAdd-Type -ReferencedAssemblies $avaloniaAssemblies -TypeDefinition @'\r\nnamespace PSAvalonia\r\n{\r\n    public class App : Avalonia.Application\r\n    {\r\n        public override void Initialize()\r\n        {\r\n            Avalonia.Markup.Xaml.AvaloniaXamlLoader.Load(this);\r\n        }\r\n    }\r\n}\r\n'@\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nit works\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nAdd-Type : (3,24): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'\r\nAdd-Type : (7,13): error CS0012: The type 'Type' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'\r\n...\r\nAdd-Type : (7,13): error CS0012: The type 'Assembly' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'\r\n\r\n\r\n```\r\n\r\n# Workaround\r\n\r\n```none\r\n$refFolder = Join-Path ( Split-Path ([PSObject].Assembly.Location) ) \"ref\"\r\n$refAssemblies = Get-ChildItem -Path $refFolder -Filter \"*.dll\" | Select-Object -Expand FullName\r\n\r\nAdd-Type -ReferencedAssemblies @($avaloniaAssemblies + $refAssemblies) -TypeDefinition @'\r\nnamespace PSAvalonia\r\n{\r\n    public class App : Avalonia.Application\r\n    {\r\n        public override void Initialize()\r\n        {\r\n            Avalonia.Markup.Xaml.AvaloniaXamlLoader.Load(this);\r\n        }\r\n    }\r\n}\r\n'@\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.0\r\nPSEdition                      Core\r\nGitCommitId                    6.2.0\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "/cc @daxian-dbw ",
      "created_at": "2019-05-14T10:00:07Z",
      "updated_at": "2019-05-14T10:00:07Z"
    },
    {
      "author": "kborowinski",
      "author_association": "NONE",
      "body": "**OMG!** I have wasted whole day trying to port module with custom C# type definitions to PS Core just to find that when _ReferencedAssemblies_ parameter is specified the _Add-Type_ does not include .NET Core standard assemblies. I was losing my sanity because of that! Please fix it!\r\n\r\n@fMichaleczek: Thanks for the workaround!",
      "created_at": "2019-06-15T18:59:27Z",
      "updated_at": "2019-06-15T19:28:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT I think we need a conclusion should we fix this before 7.0 release. (Avalonia!)",
      "created_at": "2019-09-29T17:02:26Z",
      "updated_at": "2019-09-29T17:02:26Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Talked to @joeyaiello about this the other day. When `-ReferencedAssemblies` is specified, we currently only automatically include two ref assemblies in addition to what the user specifies, see the code at https://github.com/PowerShell/PowerShell/blob/master/src/Microsoft.PowerShell.Commands.Utility/commands/utility/AddType.cs#L703. I don't remember why we didn't include everything just like when `-ReferencedAssemblies` is not specified. Maybe we should just include everything under `ref/` all the time.\n\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/11524380?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell\">PowerShell/PowerShell</a></strong></div><div>PowerShell for every system! Contribute to PowerShell/PowerShell development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2019-10-09T23:56:46Z",
      "updated_at": "2019-10-09T23:56:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I don't remember why we didn't include everything just like when -ReferencedAssemblies is not specified.\r\n\r\nIt was at moving to .Net Core 2.0 time and I guess an intention was to avoid type conflicts.\r\n\r\nEven if we add everything from /ref folder, I guess everything from dotnet standard will not be there.\r\n",
      "created_at": "2019-10-10T05:00:26Z",
      "updated_at": "2019-10-10T05:00:26Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "dotnet standard stuff will be available as long as `netstandard.dll` is referenced. So maybe just add `netstandard.dll` to `InitAutoIncludedRefAssemblies` ... not sure if that's sufficient.",
      "created_at": "2019-10-10T18:36:36Z",
      "updated_at": "2019-10-10T18:36:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Best practice for me  today is to create a temporary project, compile and then move  code and references to Add-Type.\r\n\r\nMaybe we could benefit from csproj files?",
      "created_at": "2019-10-10T19:01:46Z",
      "updated_at": "2019-10-10T19:01:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I can not load Netonsoft.Json.dll until I do reference netstandard.dll",
      "created_at": "2019-11-26T11:34:02Z",
      "updated_at": "2019-11-26T11:34:02Z"
    },
    {
      "author": "kborowinski",
      "author_association": "NONE",
      "body": "Will it get fixed before 7.0 release?",
      "created_at": "2019-12-10T20:08:04Z",
      "updated_at": "2019-12-10T20:08:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "No, we need more feedback.",
      "created_at": "2019-12-10T20:21:34Z",
      "updated_at": "2019-12-10T20:21:34Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@daxian-dbw did we ever figure out if it work to just add all the reference assemblies to `/ref`? ",
      "created_at": "2020-07-30T23:11:06Z",
      "updated_at": "2020-07-30T23:11:06Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "May be related to #8121 in that we may just need to add another bucket of reference assemblies to the default PS package.",
      "created_at": "2020-12-07T19:56:43Z",
      "updated_at": "2020-12-07T19:56:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Since we use Roslyn API to compile and PowerShell is self-contained application perhaps we could have in the default assembly reference list all assemblies from PowerShell home directory as \"SDK\". This also could unblock scenario with compilation to standalone exe.",
      "created_at": "2020-12-08T10:01:03Z",
      "updated_at": "2020-12-08T10:01:03Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@iSazonov There is no feedback and I am agree with you, so should it be possible to ask for the committee to have a look ? If not it will be moved in the 7.4 timeline...\r\n",
      "created_at": "2022-08-04T15:05:50Z",
      "updated_at": "2022-08-04T15:05:50Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 @SeeminglyScience @daxian-dbw What do you think about [the proposal](https://github.com/PowerShell/PowerShell/issues/9599#issuecomment-740518147)?",
      "created_at": "2022-08-04T16:57:20Z",
      "updated_at": "2022-08-04T16:57:20Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> could have in the default assembly reference list all assemblies from PowerShell home directory as \"SDK\".\r\n\r\nIt's not clear to me what you mean by this. Do you mean including all the runtime dlls under `$PSHOME` to the assembly reference list? Referencing runtime dlls doesn't work and that was why we started to ship the reference assemblies along with PowerShell.\r\n\r\nI think someone can started to experiment whether it's sufficient to get the reported scenario working by just including `netstandard.dll` itself from `ref` folder.",
      "created_at": "2022-08-04T17:06:05Z",
      "updated_at": "2022-08-04T17:06:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw In OP there is Workaround which reference all dll-s from pwsh. I guess this resolve\u044b all compile scenarios. netstandard.dll is only part of APIs.",
      "created_at": "2022-08-04T17:20:28Z",
      "updated_at": "2022-08-04T17:20:28Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@daxian-dbw @iSazonov I\u2019ll dig in tomorrow and give you a detailed report on what works, what doesn\u2019t.\r\n\r\nand I will include Single Executable Compressed scenario because it's complicated to copy a ref folder inside a single executable after compilation ...\r\n\r\nhttps://github.com/PowerShell/PowerShell/compare/master...leXPek:PowerShell:appcontext-basedirectory\r\n\r\n![image](https://user-images.githubusercontent.com/6187529/182916734-328e7bdc-aa30-451f-8292-ccf443497b46.png)\r\n \r\n![image](https://user-images.githubusercontent.com/6187529/182917056-66c24a98-9b92-4556-bd81-15d8f0e398e3.png)\r\n",
      "created_at": "2022-08-04T17:51:30Z",
      "updated_at": "2022-08-04T17:51:30Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@fMichaleczek Thanks! Please also take into account the application-hosting-powershell scenario, where `Microsoft.PowerShell.SDK` is referenced and `pwsh` is not available. Today, the `ref` folder is shipped with the `Microsoft.PowerShell.SDK` nuget package.",
      "created_at": "2022-08-04T17:58:52Z",
      "updated_at": "2022-08-04T17:58:52Z"
    },
    {
      "author": "visusys",
      "author_association": "NONE",
      "body": "I just came across this issue (I think). Reference the following code:\r\n\r\n```\r\n$code = @'\r\nusing System;\r\nnamespace VSYS.Powershell\r\n{\r\n\tpublic class Device\r\n\t{\r\n\t\tpublic static void Main(){\r\n\t\t\tSystem.Console.WriteLine(\"Device Initialized\");\r\n\t\t}\r\n\t}\r\n}\r\n'@\r\n$a = (\"System.Core\",\"System.Xml.Linq\",\"System.Data\",\"System.Xml\")\r\nAdd-Type -TypeDefinition $code -ReferencedAssemblies $a\r\n\r\n[VSYS.Powershell.Device]::Main()\r\n```\r\nRunning the above code yields:\r\n\r\n```\r\n(7,4): error CS0234: The type or namespace name 'Console' does not exist in the namespace 'System' (are you missing an assembly reference?)\r\nCannot add type. Compilation errors occurred.\r\n```\r\n\r\nRemoving `-ReferencedAssemblies` makes it run.\r\n\r\nHow do I fix this? \r\nIs there a workaround? \r\nAre there plans to fix this? \r\n\r\nAny help is greatly appreciated.\r\n\r\n",
      "created_at": "2022-08-13T10:46:23Z",
      "updated_at": "2022-08-13T10:46:23Z"
    },
    {
      "author": "kborowinski",
      "author_association": "NONE",
      "body": "@visusys Your example should work on PowerShell 7.3.0 GA, however, for the time being, if you are not sure what standard assemblies your code is referencing, it is safe to reference *all* dotnet standard assemblies. Below yours slightly modified example:\r\n```powershell\r\n$code = @'\r\nusing System;\r\nnamespace VSYS.Powershell\r\n{\r\n\tpublic class Device\r\n\t{\r\n\t\tpublic static void Main(){\r\n\t\t\tSystem.Console.WriteLine(\"Device Initialized\");\r\n\t\t}\r\n\t}\r\n}\r\n'@\r\n$a = [IO.Directory]::GetFiles([IO.Path]::Combine($PSHOME, 'ref'), '*.dll', [IO.SearchOption]::TopDirectoryOnly)\r\nAdd-Type -TypeDefinition $code -ReferencedAssemblies $a\r\n\r\n[VSYS.Powershell.Device]::Main()\r\n```",
      "created_at": "2022-11-11T17:21:00Z",
      "updated_at": "2022-11-11T17:21:00Z"
    }
  ],
  "created_at": "2019-05-14T09:54:48Z",
  "number": 9599,
  "state": "open",
  "title": "'Add-Type' doesn't include dotnet standard reference assemblies in ReferencedAssemblies",
  "updated_at": "2022-11-11T17:21:00Z"
}