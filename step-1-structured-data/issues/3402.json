{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3402",
  "author": "mklement0",
  "body": "Not sure this is a bug, but the behavior is confusing.\r\n\r\nCurrently, the following two commands are equivalent:\r\n\r\n```powershell\r\nGet-Command -foo -bar -baz\r\n```\r\n\r\n```powershell\r\nGet-Command -ArgumentList '-foo', '-bar', '-baz'\r\n```\r\n\r\nApparently, any remaining unbound parameters are collected in `-ArgumentList`, and parameter set `CmdletSet` is selected.\r\nNo error is reported and lengthy output is produced - albeit fewer items than without any parameters.\r\n\r\n* This behavior makes it easy to miss mistyped parameter names.\r\n\r\n* Additionally, it's not clear what effect the `-ArgumentList` values are actually having.\r\n\r\nGiven that the purpose of `-ArgumentList`  is to pass arguments _through_ to the _target_ command(s) (in order to trigger inclusion of dynamic parameters in combination with `-Syntax`), shouldn't invalid arguments  cause _errors_?\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-alpha (v6.0.0-alpha.17) on Darwin Kernel Version 16.4.0: Thu Dec 22 22:53:21 PST 2016; root:xnu-3789.41.3~3/RELEASE_X86_64\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "bielawb",
      "author_association": "NONE",
      "body": "The purpose of ArgumentList is to pass positional arguments to a given command:\r\nE.g. to see `-Concatenate` on `Set-Item` you would do this:\r\n`Get-Command Set-Item -ArgumentList WSMan:\\localhost\\Client\\TrustedHosts -Syntax`\r\n\r\nAnother example: to see all extra parameters for New-PSDrive in ActiveDirectory provider (PSProvider is a second positional parameter in this case) you would run:\r\n`Get-Command -Syntax -Name New-PSDrive -ArgumentList foo, ActiveDirectory`\r\n\r\nHelp for that parameter is a bit confusing, mixing parameters and arguments... but the name is correct: you won't be able to pass parameters to it. In my opinion it's a documentation bug.",
      "created_at": "2017-03-23T17:24:24Z",
      "updated_at": "2017-03-23T17:24:24Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@bielawb: \r\n\r\nThanks for that important clarification. \r\n\r\nGenerally, the term \"arguments\" in the help topics is _not_ limited to just _positional_ arguments; for instance, the description of `-ArgumentList` for [`Start-Process`](https://msdn.microsoft.com/en-us/powershell/reference/5.1/microsoft.powershell.management/start-process) states (emphasis added):\r\n\r\n> Specifies _parameters_ or _parameter values_ to use when this cmdlet starts the process.\r\n\r\nI wonder what the reason for this restriction to _positional_ arguments is; arguably, to use your example, `Get-Command -Syntax -Name New-PSDrive -ArgumentList '-PSProvider', ActiveDirectory` is clearer, and, aside from the need to quote `-PSProvider`, simpler;  \r\ngiven the current parsing, even `Get-Command -Syntax -Name New-PSDrive -PSProvider ActiveDirectory` would then work, although this syntax is problematic with respect to typos, as I've mentioned.\r\n\r\nAlso, _some_ cmdlets cause an error if you pass _too many_ positional arguments, whereas others don't; e.g.:\r\n\r\n```powershell\r\n\r\n# Breaks - too many positional arguments.\r\nGet-Command -Syntax Get-Item -ArgumentList 1,2,3\r\n\r\n# !! Doesn't break - even though there are too many pos. args.\r\nGet-Command -Syntax Get-Date -ArgumentList 1,2,3\r\n\r\n```\r\n\r\nIt doesn't even break if you define a function that explicitly forbids positional arguments:\r\n\r\n```powershell\r\nfunction foo { [cmdletbinding(positionalbinding=$false)]param($bar) }\r\n\r\n# !! Doesn't break, even though no pos. args. are allowed.\r\nGet-Command -Syntax foo -ArgumentList 1,2,3\r\n```\r\n\r\n",
      "created_at": "2017-03-23T18:18:37Z",
      "updated_at": "2017-03-23T18:18:37Z"
    },
    {
      "author": "bielawb",
      "author_association": "NONE",
      "body": "Generally, I would argue that `-Arguments` that would take a hash table would be much cleaner:\r\n```powershell\r\nGet-Command -Arguments @{ PSProvider = 'ActiveDirectory' } -Name New-PSDrive -Syntax\r\n```\r\nI believe errors are only possible if a command that has dynamic parameters (true for Get-Item, false for Get-Date and your foo).\r\n\r\nEasy to reproduce with updated foo (empty `DynamicParam` block)\r\n\r\n```powershell \r\nfunction foo { [cmdletbinding(positionalbinding=$false)]param($bar) DynamicParam {} }\r\n# breaks....\r\nGet-Command foo -Syntax -ArgumentList a\r\n```\r\n\r\nI guess it's only validated when there is a good reason to \"give it a try\" - nothing changes in syntax of \"normal\" command no matter how many positional parameters you pass, so value for that parameter seems to be ignored.",
      "created_at": "2017-03-23T18:29:47Z",
      "updated_at": "2017-03-23T18:29:47Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks again.\r\n\r\n> I would argue that -Arguments that would take a hash table would be much cleaner:\r\n\r\nGreat idea.\r\n\r\n",
      "created_at": "2017-03-23T18:46:57Z",
      "updated_at": "2017-03-23T18:46:57Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "I don't know what changed since the original posting but there seems to be new behavior and it can now bind to named parameters.\r\n\r\n```powershell\r\nPS C:\\> Get-Command -foo -bar -baz\r\nGet-Command: The command could not be retrieved because the ArgumentList parameter can be specified only when retrieving a single cmdlet or script.\r\nPS C:\\> Get-Command -ArgumentList '-foo', '-bar', '-baz'\r\nGet-Command: The command could not be retrieved because the ArgumentList parameter can be specified only when retrieving a single cmdlet or script.\r\n```\r\n\r\nYou can now pass named parameters and have it work as expected, still the syntax is not intuitive.\r\n\r\n```powershell\r\nPS C:\\> Get-Command -Syntax Set-Item -Path HKLM:\\\r\n\r\nSet-Item [-Path] <string[]> [[-Value] <Object>] [-Force] [-PassThru] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-Type <RegistryValueKind>] [<CommonParameters>]\r\n\r\nSet-Item [[-Value] <Object>] -LiteralPath <string[]> [-Force] [-PassThru] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-Type <RegistryValueKind>] [<CommonParameters>]\r\n\r\nPS C:\\> Get-Command -Syntax Set-Item\r\n\r\nSet-Item [-Path] <string[]> [[-Value] <Object>] [-Force] [-PassThru] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]\r\n\r\nSet-Item [[-Value] <Object>] -LiteralPath <string[]> [-Force] [-PassThru] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]\r\n```\r\n\r\nYou can also use a splat.\r\n\r\n```powershell\r\nPS C:\\> $splat = @{ Path = 'HKLM:\\' }\r\nPS C:\\> Get-Command -Syntax Set-Item @splat\r\n\r\nSet-Item [-Path] <string[]> [[-Value] <Object>] [-Force] [-PassThru] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-Type <RegistryValueKind>] [<CommonParameters>]\r\n\r\nSet-Item [[-Value] <Object>] -LiteralPath <string[]> [-Force] [-PassThru] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-Type <RegistryValueKind>] [<CommonParameters>]\r\n```",
      "created_at": "2022-10-17T00:38:13Z",
      "updated_at": "2022-10-17T00:38:13Z"
    }
  ],
  "created_at": "2017-03-23T04:47:06Z",
  "labels": [
    "WG-Cmdlets",
    "Issue-Discussion"
  ],
  "number": 3402,
  "state": "open",
  "title": "Confusing `Get-Command -ArgumentList` behavior",
  "updated_at": "2022-10-17T00:38:14Z"
}