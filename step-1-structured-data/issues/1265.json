{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1265",
  "author": "lzybkr",
  "body": "## Steps to reproduce\n\n`function foo { param($DebugBuild) }`\n1. `Receive-Job -wa<TAB>`\n2. `foo -D<TAB>`\n3. `foo -Debug<TAB>`\n## Expected behavior\n1. Cycle through -Wait and -WarningAction\n2. Cycle through -Debug and -DebugBuild\n3. Cycle through -Debug and -DebugBuild\n## Actual behavior\n1. Only completes -WarningAction\n2. Only completes -DebugBuild\n3. No additional completion\n",
  "closed_at": "2019-10-31T20:09:38Z",
  "comments": [
    {
      "author": "Peter-Schneider",
      "author_association": "CONTRIBUTOR",
      "body": "The actual behavior of case 2 should be ok unless you are using the cmdletbinding attribute.\n",
      "created_at": "2016-08-25T08:49:56Z",
      "updated_at": "2016-08-25T08:49:56Z"
    },
    {
      "author": "adamgauthier",
      "author_association": "CONTRIBUTOR",
      "body": "### Additional information on this issue\r\n\r\nFirst, the matcher finds 3 possible matches: `-Wait`, `-WarningAction` and `-WarningVariable` (which is normal).\r\n\r\nThere are 2 issues here: \r\n\r\n- The matcher finds an exact match so it autocompletes to it without cycling through other results (in this case alias `wa` is an exact match for parameter `WarningAction`). Is this intended behavior? Should Tab cycle through matches or simply complete an alias like it does now?\r\n\r\n- Even if the text doesn't match an exact alias, for example with `Import-Module -ve` (#6150), the matcher will find 2 possible matches: `-MinimumVersion` and `-Verbose`, **however**, it will prefer parameters in the cmdlet over common parameters, and will effectively return `-MinimumVersion` as the only match since `Verbose` is a common parameter (same thing would happen for `-Wait` if `wa` wasn't an alias for `WarningAction`). \r\n\r\nI doubt the second one is intended behavior, but digging through the code I think I'm too unfamiliar with the codebase to find a good solution. Hope this helps other people:\r\n\r\nIf you want to dig in, this occurs in \r\n`CompletionCompleters.CompleteCommandParameter()` -> \r\n`PseudoParameterBinder.DoPseudoParameterBinding()` -> \r\n`PseudoParameterBinder.BindNamedParameters()` ->\r\n`MergedCommandParameterMetadata.GetMatchingParameter()`\r\nYou can see there the aliases loop and then the logic to filter common parameters.",
      "created_at": "2018-07-25T02:26:07Z",
      "updated_at": "2018-07-25T02:26:07Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@louistio Thanks for the investigation details!\r\n\r\nIn the your first issue, even if an exact match is found, I would expect it to cycle through other possible matches.  For the second, it should also all possible matches including common parameters.",
      "created_at": "2018-07-26T01:59:01Z",
      "updated_at": "2018-07-26T01:59:01Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #10850, which has now been successfully released as `v7.0.0-preview.6`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.6)\n",
      "created_at": "2019-11-21T22:34:48Z",
      "updated_at": "2019-11-21T22:34:48Z"
    }
  ],
  "created_at": "2016-07-01T22:58:15Z",
  "number": 1265,
  "state": "closed",
  "title": "Tab completion confusion with common parameters",
  "updated_at": "2019-11-21T22:34:48Z"
}