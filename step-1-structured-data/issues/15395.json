{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15395",
  "author": "rtestardi",
  "body": "Hopefully someone can just explain this -- I want to fill in a variable with \"-switch\" or \"\" and pass it to a script, but that does not seem to work...\r\n\r\nThe script:\r\n\r\n```\r\nparam(\r\n    [switch]$switch1 = $false,\r\n    [switch]$switch2 = $false,\r\n    [switch]$recurse = $false\r\n)\r\n\r\nfunction func()\r\n{\r\n    \"try 1\"\r\n    $arg=\"-switch1\"\r\n    & $MyInvocation.PSCommandPath $arg -recurse\r\n\r\n    \"try 2\"\r\n    & $MyInvocation.PSCommandPath -switch1 -recurse\r\n}\r\n\r\nif ($recurse) {\r\n    \"switch1 = $switch1\"\r\n    \"switch2 = $switch2\"\r\n    \"args = $args\"\r\n} else {\r\n    func\r\n}\r\n```\r\n\r\nWhy cannot $arg be passed to a child as a switch?\r\n\r\nI expected try 1 and try 2 to be the same?\r\n\r\n```\r\nPS C:\\temp\\dbe\\src\\services\\datavalidation\\tests\\ust> powershell .\\param.ps1\r\n\r\ntry 1\r\nswitch1 = False\r\nswitch2 = False\r\nargs = -switch1\r\n\r\ntry 2\r\nswitch1 = True\r\nswitch2 = False\r\nargs =\r\n```\r\n\r\nNote in the first case, \"-switch1\" ends up in $args, which I assume is because it was unprocessed by param()?\r\n\r\nThanks for any explanation!",
  "closed_at": "2021-05-13T01:01:11Z",
  "comments": [
    {
      "author": "rtestardi",
      "author_association": "NONE",
      "body": "PS If I do:\r\n\r\n    \"try 3\"\r\n    & $MyInvocation.PSCommandPath \"-switch1\" -recurse\r\n\r\nI get the same answer I don't like. :-)\r\n\r\nI'm hoping for a way to programmatically pass switches or not.",
      "created_at": "2021-05-12T23:15:25Z",
      "updated_at": "2021-05-12T23:15:25Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "There are two ways. Key thing to remember is passing switch values like this generally just means passing the value as a boolean -- almost.\r\n\r\n```powershell\r\n$switchValue = $true # or false, if you want to explicitly \"not\" pass the switch\r\n& $MyInvocation.PSCommandPath -switch1:$switchValue -recurse\r\n```\r\n\r\nIf `$switchValue` is true, the switch is registered as passed. If it's false, it's registered as omitted. The `:` here to join the switch to its value is necessary; otherwise, PS would assume the value belongs to a positional parameter (since switches normally don't take explicit values).\r\n\r\n```powershell\r\n$params = @{\r\n    switch1 = $true # or false, if \"omitting\" the switch\r\n}\r\n# The -Recurse switch here could also be placed in $params if you preferred\r\n& $MyInvocation.PSCommandPath @params -Recurse\r\n```\r\n\r\nThis method stores the arguments in a hashtable first, and then applies them to the command with the `@` splatting variable operator. It tends to be a bit more flexible, because you can define params as `$params = @{}` and then conditionally add parameters to it as needed with `$params['paramName'] = $value`.",
      "created_at": "2021-05-13T00:51:27Z",
      "updated_at": "2021-05-13T00:52:34Z"
    },
    {
      "author": "rtestardi",
      "author_association": "NONE",
      "body": "Cool, thanks so much!",
      "created_at": "2021-05-13T01:01:11Z",
      "updated_at": "2021-05-13T01:01:11Z"
    }
  ],
  "created_at": "2021-05-12T23:10:49Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 15395,
  "state": "closed",
  "title": "Powershell variable can't be passed to script switch parameter?",
  "updated_at": "2021-05-13T01:09:09Z"
}