{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14387",
  "author": "daxian-dbw",
  "body": "This issue is used to track the work to address the review comment https://github.com/PowerShell/PowerShell/pull/13758#discussion_r540412372. \r\n\r\n> This API may need to be public, so that other host implementations can strip off ANSI sequences the same way PowerShell does. All existing powershell hosts will need it when moving to PS 7.2, otherwise, their users will find `$PSStyle.OutputRendering` doesn't take effect. But I'm fine to expose the API in a separate PR. Let's open an issue to track it.\r\n>\r\n> There is a need, for sure! I have developed my own versions of this as there has been no API.\r\nI even think we should consider an API that doesn't just expose the implementation details but to think about what devs would like to do with it.\r\nOtherwise, everyone will have to invent that wheel over and over again.\r\n>\r\n>Another opportunity if you use methods is that you can determine if ANSI-output isn't enabled and then just bypass the decorations.\r\n\r\nI think maybe the following 2 APIs need to be made public\r\n- `Utils.GetOutputString` (overloads may be needed)\r\n  - The `isOutputRedirected` parameter needs to be revisited, at least its name. For a different host implementation, `Console.IsOutputRedirected == true` doesn't necessarily means it wants plain text. Think about the host of PS jupyter kernel in .NET Interactive, the process's output/error streams are always redirected to send to the frontend -- jupyter notebook, which is capable of handling ANSI sequences. So, in this case, even thought the std out/err are redirected, the ANSI sequences shouldn't be stripped off.\r\n- `Utils.GetFormatStyleString`\r\n  - This method currently directly check on `Console.IsErrorRedirected` and `Console.IsOutputRedirected`. I think we shouldn't directly check on those in PowerShell engine, but should instead have separate parameters for the caller to provide that information. The engine should not assume there is a console available, and it's up to the host implementation to pass in whether there is error/output redirection when calling this method.\r\n- ~`Utils.ShouldOutputPlainText` (not sure if this one needs to be public too, but should evaluate it)~ probably not needed to be public.",
  "closed_at": "2021-09-10T16:05:08Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I don't happy with current implementation because (1) it is very perf expensive, (2) it is very limited. \r\n\r\n$PSStyle could not be a const and be _evaluated_ based on host implementation - as result we have no need to filter out escapes because $PSStyle would return $null if user turns off coloring or terminal does not support escapes and so on.\r\n\r\nThis approach has several advantages. First, it doesn\u2019t force users to use escape sequences directly (what would be the worst thing we can imagine), which makes PowerShell very smart. \r\nSecond, it excludes very expensive string operations like filtering.\r\nThirdly, with current implementation PowerShell Engine issues escapes _without testing target terminal capabilities_. In Unix this is resolved with Terminfo database. Our solution should benefit from this too if we do not want to receive an endless number of complaints about poor display on terminals.\r\n\r\nAlso in the PR a consoleless scenario was also mentioned (Windows GUI application). This says that in any case PowerShell Engine _know_ about console and should support any console(less) scenarios. We could consider full decouple from console as a design solution. But then we have to talk about separating PowerShell Formatting System from the engine. We always expect many features from the formatting system itself and they cannot be implemented without integration with the target console / terminal based on some abstraction or virtualization.\r\n\r\nSo I find this approach more flexible and power than static constants and dumb filtering.\r\n",
      "created_at": "2020-12-11T19:07:52Z",
      "updated_at": "2020-12-11T19:07:52Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #16075, which has now been successfully released as `v7.3.0-preview.1`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.3.0-preview.1)\n",
      "created_at": "2021-12-16T20:01:06Z",
      "updated_at": "2021-12-16T20:01:06Z"
    }
  ],
  "created_at": "2020-12-11T04:38:09Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine",
    "Resolution-Fixed"
  ],
  "number": 14387,
  "state": "closed",
  "title": "Expose the `Utils.GetOutputString` as a public method for C# developers to work with `OutputRendering`",
  "updated_at": "2021-12-16T20:01:07Z"
}