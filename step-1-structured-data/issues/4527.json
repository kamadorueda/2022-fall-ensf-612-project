{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4527",
  "author": "mklement0",
  "body": "Now that postpositional `&` can be used as a Bash-like alternative to using `Start-Job` - e.g.,  \r\n`ls &` for `Start-Job { set-location $using:PWD; ls }`  -  \r\nperhaps an automatic variable that reflects the most recently launched job - analogous to `%%` / `$!` in `bash` - would be helpful.\r\n\r\n`$%%` and `$!` are not valid variable names in PS, so perhaps something like `$LASTJOB` would work, analogous to `$LASTEXITCODE`.\r\n\r\nCapturing the output explicitly with something like  `$jb = ls &` is always an option, but it is an unfamiliar practice to Unix users and generally amounts to more typing and increasing the cognitive load somewhat, given that you have to pick an appropriate variable name.\r\n\r\nDesired behavior\r\n------------------\r\n\r\n```powershell\r\n# Launch a background job (without capturing the \r\n# [System.Management.Automation.PSRemotingJob] instance being output).\r\nls &\r\n\r\n# Obtain the output from the most recently launched job, via the\r\n# [System.Management.Automation.PSRemotingJob] instance stored in automatic variable $LASTJOB.\r\nReceive-Job $LASTJOB -Wait -AutoRemove\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta.5\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We can be more flexible:\r\n```powershell\r\n$job = ls &\r\n```",
      "created_at": "2017-08-09T08:22:00Z",
      "updated_at": "2017-08-09T08:22:00Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: Please re-read the paragraph starting with \"Capturing the output explicitly\".",
      "created_at": "2017-08-09T08:24:51Z",
      "updated_at": "2017-08-09T08:24:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Sorry, I got distracted. \ud83d\ude04 \r\n\r\nI like `$job = ls &` (possibly as Windows user) more than creating a new entity.\r\n\r\nIf we want `$LASTJOB` it should be `$PSLastJob`",
      "created_at": "2017-08-09T08:33:03Z",
      "updated_at": "2017-08-09T08:33:26Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": ":)\r\n\r\n`$job = ls &` is definitely all that is _needed_, but my thought was that mimicking the Unix experience more comprehensively - given that the `... &` syntax is a nod to POSIX-like shells - perhaps makes sense.\r\n\r\nGood point about the name.\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2017-08-09T08:43:37Z",
      "updated_at": "2017-08-09T08:43:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We have to look at it on the other side. Perhaps Unix-like style is not the best in terms of clarity of understanding. If we based on c# and .Net Core, maybe it's better to follow that style.",
      "created_at": "2017-08-09T08:52:11Z",
      "updated_at": "2017-08-09T08:52:11Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I hear you, but now that I think about it, let me reframe the issue: \r\n\r\nThink of it as a convenience for _interactive_ use, for quickly firing off a background command.\r\n\r\nIn a _script_, `$job = ls &` is absolutely the way to go.\r\n",
      "created_at": "2017-08-09T09:08:46Z",
      "updated_at": "2017-08-09T09:08:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "it is reasonable. It seems we said the same thing about `$?`.",
      "created_at": "2017-08-09T10:33:11Z",
      "updated_at": "2017-08-09T10:33:11Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "See https://github.com/PowerShell/PowerShell-RFC/issues/27 - I think the proposal is more generally useful and address this issue as well.",
      "created_at": "2017-08-18T00:58:33Z",
      "updated_at": "2017-08-18T00:58:33Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr: Yes and no:\r\n\r\nYes, if you remember which among the recent commands happened to be the one that launched the job.\r\n\r\nNo, if you're expecting a _distinct_ variable referring to the most recently launched the most recent background job, irrespective of how many intervening commands were executed.\r\n\r\nIt's comparable to the distinction between `$?` (most recent statement - albeit _only_ the most recent) and `$LASTEXITCODE` (exit code of the most recently executed external utility, no matter how many commands ago).\r\n\r\nThe general RFC and a specific variable needn't be mutually exclusive, however:\r\n\r\nI definitely like the RFC idea in principle (a few quick asides: in addition to limiting the _number_ of outputs stored, perhaps a _per-item_ size limit is needed too, to guard against someone `Get-Content`-ing a 10-GB file to the console, for instance; also not sure if outputs explicitly captured in a variable are worth duplicating; I wouldn't allow customizing the names of these automatic variables - see below).\r\n\r\nWhile proliferation of automatic variables in the _user_-variable namespace is problematic - see https://github.com/PowerShell/PowerShell/issues/4394#issuecomment-321955860 - if we had a `$ps:` namespace, both the RFC variables (e.g., `$ps:LastResult`) and a `$ps:LastJob` variable could be accommodated.\r\n\r\nA tangent on why a separate namespace is worth considering, taking a step back to look at traditional shells:\r\n\r\n* To `cmd.exe`, not only do automatic variables live in the same namespace as user variables, _all_ variables are environment variables seen by child processes. Given that variable access is case-insensitive, not even a case-based convention allows distinguishing standard environment / automatic variables from user-defined variables.\r\n\r\n* In the world of POSIX-like shells such as `bash`, where variable access is case-_sensitive_, the _convention_ is to reserve the \"sub-namespace\" of all-uppercase variables for standard environment variables and the shell's own automatic variables (such as `$BASH`). All environment variables are represented as shell variables, but user-defined shell variables do not become environment variables unless explicitly requested.\r\n\r\nWhile POSIX-like shells at least have a convention in place, the limited features of both `cmd.exe` and POSIX-like shell cannot reliably prevent name collisions.\r\n\r\nPowerShell, by contrast, as a shell with much more sophisticated features at its disposal, allows solving these potential name conflicts once and for all, via a reserved-for-PowerShell namespace such as `$ps:` (as mentioned, existing automatic / preference variables would have to remain in the user-variable namespace for backward compatibility).\r\n\r\n",
      "created_at": "2017-08-18T04:54:28Z",
      "updated_at": "2017-08-20T02:17:42Z"
    }
  ],
  "created_at": "2017-08-08T16:00:35Z",
  "number": 4527,
  "state": "open",
  "title": "Consider introducing an automatic variable such as $LASTJOB that reflects the last background job started with & (Start-Job)",
  "updated_at": "2017-11-11T18:46:13Z"
}