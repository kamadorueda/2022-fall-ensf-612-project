{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3942",
  "author": "daxian-dbw",
  "body": "Some of our release steps can be automated:\r\n\r\n- [x] Microsoft Source Code Compliance Tasks (Microsoft Employee Only)\r\n- [x] Step 2.3 - Once the candidate packages are generated, we need to install them and verify the packages. This validation could be automated, at least for Linux packages.\r\n- [x] Step 3.3 - Update documents and scripts to use the new package names and links. This could be automated. _[update] we will ask every PR to add one line to CHANGELOG.md for the PR_\r\n- [x] Step 4 - We need to verify release Dockerfiles that are used for building the container images before creating/pushing the release tag. This validation could be automated.\r\n- [x] Step 5 - Publish Linux packages to Microsoft YUM/APT repositories.\r\n- [x] Step 6 - Create NuGet packages and publish to powershell-core. This could be automated.\r\n- [x] Step 9 - Create release draft in Github. This could be automated. Refer to section 3 in 'StepsToReleasePSCore.md'.\r\n- [x] Step 11 - Once the Docker builds are done, we need to verify the generated docker images. This validation could be automated.\r\n- [ ] Microsoft Binary and Package Compliance Tasks \r\n  - [ ] [Code Metrics](https://msdn.microsoft.com/en-us/library/bb385914.aspx?f=255&MSPPError=-2147217396)\r\n  - [ ] [FXCop](https://github.com/dotnet/roslyn-analyzers)\r\n  - [x] Other (Microsoft Employee Only)",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Script or MSBuild? Before we talked that we would have separate csproj for packaging.",
      "created_at": "2017-06-06T12:27:18Z",
      "updated_at": "2017-06-06T12:27:18Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov Those should be scripts to help reduce manual tasks in a release. We want to improve the release process before `beta.3`.\r\nAs for csproj, I'm not sure how far we want to go with .csproj to replace our build scripts. Need some discussion on it.",
      "created_at": "2017-06-06T17:21:15Z",
      "updated_at": "2017-06-06T17:21:28Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw What is current state? Should we enhance of using .csproj ? I think our scripts (Build.psm1) scripts become too complex to support. We could move some _stable_ parts to .csproj files. I mean ResRen and TypeGen in the first place.",
      "created_at": "2017-11-24T03:59:16Z",
      "updated_at": "2017-11-24T03:59:16Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov For the release procedure, we have made all parallelizable tasks run in parallel.\r\nFor moving to `.csproj`, we haven't yet had a discussion internally on how much we want to move to `.csproj`. I have 2 unbaked thoughts:\r\n1. We have more and more build steps gradually, such as embedding icon resources, fixing symbolic links, download additional modules and etc. If we move all to `csproj`, it will become another huge complex `build.psm1`. So I think we need to understand what the goal is, and only move those steps to `csproj` to support the goal.\r\n2. If we move some steps to `.csproj`, then we need to make sure those steps run only once when building all powershell assemblies. If I remember correctly, the target `GetPSCoreVersionFromGit` runs for building every powershell assembly. It's OK to do some duplicate 'git describe' and regex matching, but for a build task like `resgen`, it would be too expensive.\r\n\r\n/cc @PowerShell/powershell-maintainers ",
      "created_at": "2017-11-29T01:22:54Z",
      "updated_at": "2017-11-29T01:24:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Thanks! I agree with p.1.\r\n\r\nIt is not a problem to run our `ResGen.exe` for every assembly. It is already enhanced to re-generate only changed resx files. Currently if you change one resx file all resx files should be regenerated manually and _all_ cs files will be re-compiled. With csproj we check if any resx file changed and only the _single_ changed file will be re-compliled.\r\nFor TypeGen the same - we could re-generate \"powershell.inc\" only if json files changed by `dotnet restore` or the file is missing. \r\nI have no idea how we can build on VS 2015 without these things.",
      "created_at": "2017-11-29T11:28:02Z",
      "updated_at": "2017-11-29T11:28:02Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "FX Cop and Code Metrics didn't run successfully against DotNet Core binaries.",
      "created_at": "2018-04-16T21:22:38Z",
      "updated_at": "2018-04-16T21:22:38Z"
    }
  ],
  "created_at": "2017-06-05T22:59:53Z",
  "labels": [
    "Issue-Enhancement",
    "Area-Maintainers-Build"
  ],
  "number": 3942,
  "state": "open",
  "title": "Need to automate as many steps as possible in our release process",
  "updated_at": "2018-06-21T21:15:08Z"
}