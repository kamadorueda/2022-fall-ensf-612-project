{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7127",
  "author": "mklement0",
  "body": "Windows Vista defined (hidden) junctions (essentially, symbolic links to directories) to redirect legacy folder paths to their modern paths; e.g, `\"$HOME/Cookies\"`, `\"$HOME/My Documents\"`.\r\n\r\nThe `.LinkType` property of such paths, as returned by `Get-Item` / `Get-ChildItem` should contain string `'Junction'`, but it is currently `$null`.\r\n\r\nSimilarly, the  `.Target` property (the link/junctions's target path) unexpectedly contains `$null`.\r\n\r\nNote that these junctions also have the `Hidden` and `System` attributes set (in addition to `ReparsePoint`).\r\n\r\nHowever, even manually recreating a junction with all these attributes set does not reproduce the problem.\r\n\r\nSteps to reproduce\r\n-------\r\n\r\n```powershell\r\nGet-Item -Force $HOME/Cookies | Select Mode, LinkType\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nMode   LinkType\r\n----   --------\r\nd--hsl Junction\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nMode   LinkType\r\n----   --------\r\nd--hsl \r\n```\r\n\r\nNote how the `LinkType` value is missing.\r\n\r\nYou can verify that the target path is a junction as follows:\r\n`cmd /c dir /aL $HOME | sls Cookies`\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.1.0-preview.3 on Microsoft Windows 10 Pro (64-bit; Version 1709, OS Build: \r\n```\r\n",
  "closed_at": "2019-10-03T14:41:19Z",
  "comments": [
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "As far as understand, issue is caused by access rights of this junctions. Them prohibit content enumeration, but PowerShell open them with full read rights and get access denied.",
      "created_at": "2018-06-24T16:03:17Z",
      "updated_at": "2018-06-24T16:03:17Z"
    },
    {
      "author": "henrivdr",
      "author_association": "NONE",
      "body": "I have 2 PowerShell 5.1 windows open, one returns LinkType and Target and the other doesn't.  whoami /all returns the same result, so the Privileges are the same. Both windows are run as Admin.\r\n",
      "created_at": "2019-09-26T14:46:16Z",
      "updated_at": "2019-09-26T14:46:16Z"
    },
    {
      "author": "henrivdr",
      "author_association": "NONE",
      "body": "`Get-ChildItem C:\\Users\\Default -Force -Attributes \"Directory+ReparsePoint\" -ErrorAction SilentlyContinue  | select FullName,LinkType,Target,Attributes`\r\n",
      "created_at": "2019-09-26T14:48:19Z",
      "updated_at": "2019-09-26T14:48:19Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@henrivdr:\r\n\r\nIt fails consistently for me in PowerShell Core 7.0.0-preview.4 / Windows PowerShell v5.1 and also in Windows PowerShell v5.1.18362.145 on Microsoft Windows 10 1903 (though note that this repo is not for Windows PowerShell).\r\n\r\nIf @PetSerAl's understanding is correct (which strikes me as likely), then even running as admin should _consistently_ fail.\r\n\r\nHowever, your repro command made me just notice another, presumably closely related problem: see #10630\r\n\r\n\r\n\r\n",
      "created_at": "2019-09-26T15:17:33Z",
      "updated_at": "2019-09-26T15:17:33Z"
    },
    {
      "author": "henrivdr",
      "author_association": "NONE",
      "body": "@mklement0 \r\nNoted regarding this repo being for PS Core.\r\n\r\nI agree with @PetSerAl, because this works in the window where Get-Chilitem by itself does not work: [http://chrisbensen.blogspot.com/2010/06/getfinalpathnamebyhandle.html](url)\r\nSo it must be the way the directory is (not) opened with \r\n`CreateFile(...CREATION_DISPOSITION_OPEN_EXISTING, FILE_FLAG_BACKUP_SEMANTICS...)`\r\n\r\nIt sill does not make sense why it behaves differently between 2  identical windows.",
      "created_at": "2019-09-26T15:40:33Z",
      "updated_at": "2019-09-26T15:40:33Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "(The link in your comment has the correct URL, but clicking on it takes you elsewhere.)\r\n\r\n> It sill does not make sense why it behaves differently between 2 identical windows.\r\n\r\nCertainly sounds odd. If you have a reproducible case, please report it on UserVoice and/or here (as a new issue), as applicable.",
      "created_at": "2019-09-26T15:48:53Z",
      "updated_at": "2019-09-26T15:48:53Z"
    },
    {
      "author": "henrivdr",
      "author_association": "NONE",
      "body": "Here's a proper link\r\nhttps://stackoverflow.com/questions/16926127/powershell-to-resolve-junction-target-path/16926224#16926224\r\n\r\nI am holding on to the window which works, while I implement the C# Add-Type workaround :-)\n\n<blockquote><img src=\"https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded\" width=\"48\" align=\"right\"><div>Stack Overflow</div><div><strong><a href=\"https://stackoverflow.com/questions/16926127/powershell-to-resolve-junction-target-path/16926224\">powershell to resolve junction target path</a></strong></div><div>In PowerShell, I need resolve the target path of a junction (symlink). \n\nfor example, say I have a junction c:\\someJunction whose target is c:\\temp\\target\n\nI tried variations of $junc = Get-Item c:\\</div></blockquote>",
      "created_at": "2019-09-26T16:41:05Z",
      "updated_at": "2019-09-26T16:41:07Z"
    },
    {
      "author": "henrivdr",
      "author_association": "NONE",
      "body": "Solved!   I just had to Adjust the process Token Privilege to enable SeBackupPrivilege.\r\nI had to do something similar for another project to take ownership of folders.\r\n\r\nhttps://www.raydbg.com/2017/Token-Privileges-in-PowerShell/\r\nand\r\nhttps://www.codeproject.com/Articles/21202/Reparse-Points-in-Vista\r\n\n\n<blockquote><div><img src=\"/favicon-16x16.png?v=6.6.0\" height=\"14\"> RayDBG</div><div><strong><a href=\"http://www.raydbg.com/2017/Token-Privileges-in-PowerShell/index.html\">Token Privileges in PowerShell</a></strong></div><div>One common task in my daily work is to create a PowerShell script to modify the ACL(Access Control List) of Folders or Registrys on Windows. When I run some commands to take the ownership of the Folde</div></blockquote>\n<blockquote><img src=\"https://www.codeproject.com/KB/vista/ReparsePointID/Thumb-21202.jpg\" width=\"48\" align=\"right\"><div><strong><a href=\"https://www.codeproject.com/Articles/21202/Reparse-Points-in-Vista\">Reparse Points in Vista</a></strong></div><div>What are reparse points, and how do we get their properties.</div></blockquote>",
      "created_at": "2019-09-26T17:12:49Z",
      "updated_at": "2019-09-26T17:12:51Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #10662, which has now been successfully released as `v7.0.0-preview.5`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.5)\n",
      "created_at": "2019-10-23T19:07:27Z",
      "updated_at": "2019-10-23T19:07:27Z"
    }
  ],
  "created_at": "2018-06-21T02:15:55Z",
  "number": 7127,
  "state": "closed",
  "title": ".LinkType and .Target properties of System.IO.DirectoryInfo instances do not correctly reflect system-defined junctions",
  "updated_at": "2019-11-11T11:19:48Z"
}