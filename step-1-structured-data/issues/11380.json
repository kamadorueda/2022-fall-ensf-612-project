{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11380",
  "author": "PaulHigin",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nThis PR fixes the remoting key exchange hang in OutOfProc transport connections, when transferring SecureString objects.\r\nFixes issue: #259\r\n\r\n## PR Context\r\n\r\nWhen a SecureString object is transferred over the remoting layer, a key exchange algorithm is lazily run so that the contents of the SecureString can be encrypted.  This is not strictly necessary since both WinRM and SSH remoting channels already encrypt data on the wire by default.  But the key exchange must remain for compatibility reasons.\r\n\r\nThe hang occurs when the target sends an encrypted SecureString object to the client for the first time.  The client begins a key exchange handshake with the target so that it can handle the object.  This works fine for WinRM based remote connections because the client processes session and command protocol messages on different threads.  But the OutOfProc based transport implementations process client protocol messages on a single thread, and the lazily initiated key exchange results in a deadlock.\r\n\r\nThe fix is to update the OutOfProc transport manager base class to detect and process command and session client protocol messages on separate threads.  \r\n\r\nThis is not a low risk change since it affects four remote implementations that are based on the OutOfProc transport: background jobs, PowerShellDirect, named pipes, SSH.\r\n\r\nRepro Steps:\r\n```powershell\r\n$session = New-PSSession -Host localhost\r\nInvoke-Command $session { $ss = ConvertTo-SecureString \"Hello\" -AsPlainText -Force }\r\nInvoke-Command $session { $ss }\r\n\r\n#Result\r\nHang\r\n\r\n#Expected\r\nSecureString object to be returned.\r\n```\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2019-12-18T22:07:01Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PaulHigin merge upstream/master tp pick up fix for the nulconditional tests",
      "created_at": "2019-12-17T18:21:29Z",
      "updated_at": "2019-12-17T18:21:38Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "This will probably fix https://github.com/Azure/azure-functions-powershell-worker/issues/259",
      "created_at": "2019-12-17T20:20:41Z",
      "updated_at": "2019-12-17T20:20:41Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Will this issue be considered for GA? Otherwise, the Azure Function issue won't really be resolved until 7.1, which maybe a year later.",
      "created_at": "2019-12-18T01:36:45Z",
      "updated_at": "2019-12-18T01:36:45Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "I would love for it to make it into GA.",
      "created_at": "2019-12-20T01:34:51Z",
      "updated_at": "2019-12-20T01:35:10Z"
    },
    {
      "author": "invisibleaxm",
      "author_association": "NONE",
      "body": "Hello, just trying to understand, i see GA-approved for this PR, does it mean it will also solve for the  Azure Functions issue ? (Azure/azure-functions-powershell-worker#259)",
      "created_at": "2020-01-23T02:53:24Z",
      "updated_at": "2020-01-23T02:53:24Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Yes, this will address that issue, as soon as the Azure Functions team adopts PowerShell 7 in their runtime.",
      "created_at": "2020-01-23T22:16:29Z",
      "updated_at": "2020-01-23T22:16:29Z"
    }
  ],
  "created_at": "2019-12-17T16:53:42Z",
  "number": 11380,
  "state": "closed",
  "title": "Fix key exchange hang for outofproc transports",
  "updated_at": "2020-01-23T22:16:29Z"
}