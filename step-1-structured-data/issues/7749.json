{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7749",
  "author": "felixfbecker",
  "body": "The Format.ps1xml and Types.ps1xml system in PowerShell is incredibly powerful. It's awesome how we can output objects, then totally separate from that define how these should be displayed in similar ways to how UIs are declared in XAML or JSX. Some really cool things are possible with it:\r\n\r\n[![search results with highlighted matches](https://raw.githubusercontent.com/sourcegraph/PSSourcegraph/master/images/textsearch.png)](https://github.com/sourcegraph/PSSourcegraph)\r\n\r\n[![git log output with colored patches](https://raw.githubusercontent.com/felixfbecker/PowerGit/master/Screenshots/Get-GitCommit-Patch.svg?sanitize=true)](https://github.com/felixfbecker/PowerGit)\r\n\r\nHowever, authoring these files is incredibly frustrating. There is no autocompletion, hovers or validation for these files in your editor. The [reference documentation](https://docs.microsoft.com/en-us/powershell/developer/format/format-schema-xml-reference) is incredibly hard to find, browse and search (a bunch of duplicate `element Foo for Bar for Baz for Quz (Format)`. [Error messages are often very confusing](https://github.com/PowerShell/PowerShell/issues/6788).\r\n\r\nThe way this could be improved a _lot_ would be with an XSD for these files, which would allow validation, hovers and autocompletion. I started working on this:\r\n\r\n![image](https://user-images.githubusercontent.com/10532611/45297479-cdfa5880-b505-11e8-88d4-20cf464532f8.png)\r\n\r\nThis is with the [vscode-xml](https://github.com/redhat-developer/vscode-xml) extension.\r\nSchemas are here: https://github.com/felixfbecker/PowerShellXSD\r\n\r\nI currently just autogenerated this schema from the Format file in that repo.\r\n\r\nI will investigate writing a script that parses the official schema markdown reference [here](https://github.com/PowerShell/PowerShell-Docs/blob/staging/developer/format/format-schema-xml-reference.md) and converts it into an XSD (probably with manual edits afterwards).\r\n\r\nI couldn't find reference docs for Types.ps1xml files unfortunately, but they also seem simpler.\r\n\r\nWhat's in the way of using this is that any attribute declaration on the root `Configuration` element will cause an error:\r\n```\r\nUpdate-FormatData : Errors occurred while loading the format data file:\r\nFormat.ps1xml, Error at XPath  in file Format.ps1xml: The XML element Configuration does not allow attributes.\r\n```\r\nWhich means the schema instance attributes need to be removed again before loading the Format file. It would be great if PowerShell could instead just ignore attributes on the root element:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Configuration xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/felixfbecker/PowerShellXSD/master/Format.xsd\"\r\n               xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n```\r\n\r\nAnother unfortunate thing to mention is that schema validation won't work if you want to use ANSI color codes in Format files because of https://github.com/PowerShell/PowerShell/issues/7526\r\n\r\nI am posting this here in case someone wants to help out and because it would be great if eventually these schemas would be versioned in the PowerShell repo and hosted by Microsoft.",
  "closed_at": null,
  "comments": [
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "The schema for Format.ps1xml files is complete and autogenerated from the reference documentation: https://github.com/felixfbecker/PowerShellXSD/blob/master/Format.xsd",
      "created_at": "2018-09-11T16:09:07Z",
      "updated_at": "2018-09-11T16:09:07Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Many years ago we produced xsd files for both format and types ps1xml, I've shared them [here](https://gist.github.com/lzybkr/b2586418259caa5fa2379cb57a93925c), and we should probably include them in this repo.  I encourage you to compare to what you've produced to check correctness,\r\n\r\nThese xsd files were used to help automate the conversion of some ps1xml files to the C#, see examples like [TypesV3_Ps1Xml.cs](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/TypesV3_Ps1Xml.cs) and [FileSystem_format_ps1xml.cs](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/FormatAndOutput/DefaultFormatters/FileSystem_format_ps1xml.cs).\r\n\r\nI'm reasonably confident the types.xsd I've shared is complete because the current types ps1xml parser is based off of that xsd.\r\n\r\nI'm not as confident about the format.xsd file - it was sufficient for converting the core ps1xml format files, but the format ps1xml parser is not based on any xsd file, so there may be missing elements.",
      "created_at": "2018-09-12T00:51:36Z",
      "updated_at": "2018-09-12T00:51:36Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "Damn, I wished I had seen those earlier. Thanks for sharing. The Format types do look more detailed because they specify things that are not mentioned in the reference docs - like when elements can appear multiple times or just once, and what elements are mutually exclusive. What it misses is documentation.\r\n\r\nI'll diff the number of elements and test if they are complete.",
      "created_at": "2018-09-12T11:06:42Z",
      "updated_at": "2018-09-12T11:10:00Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "So I compared the schemas and found that\r\n- It is missing some elements, e.g. `ItemSelectionCondition`\r\n- It does not contain any documentation (which I find important for IntelliSense)\r\n- It was using `xs:sequence` in many places, even though I am pretty sure the _order_ of elements is not significant for _any_ element in Format/Types.ps1xml files. I assume this is because the schema was autogenerated from XML data, and the generator can't infer this.\r\n- It used `xs:all` accurately\r\n- It defines a custom Boolean type that accepts `true`, `false` or no content to mean `true`\r\n- It defined an `Expression` group to make `PropertyName` and `ScriptBlock` mutually exclusive (but was missing `FormatString`)\r\n- It defines `xs:complexType`s for every element so only `Configuration` is valid top-level, I was using top-level `xs:element`\r\n\r\nConsidering all points, I decided it would be best to continue with my generation script and extended it with all the advantages listed above (while keeping advantages like documentation and guarantee of completeness).",
      "created_at": "2018-09-12T16:20:22Z",
      "updated_at": "2018-09-12T16:20:22Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Cool, I'm glad to have provided you with a reference and to know you're doing one better. I do think you're right - it was probably generated from sample data.\r\n\r\nNote that `types.xsd` that I shared was used to generate the current parser, so it should be considered complete. I did make a bunch of manual changes to the tool generated parser for better performance, but I don't recall any logical/semantic changes.",
      "created_at": "2018-09-12T16:57:23Z",
      "updated_at": "2018-09-12T16:57:23Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "The Types schema looks complete, but it lacks documentation and uses `xs:sequence` everywhere, while the order of elements doesn't matter in Types file (confirmed this by trying it out). I'll look at improving it manually or generating that from `about_Types` too (although those docs are not nearly as structured as the Format reference).\r\n\r\nOne thing I found in the Format schema that is not documented anywhere:\r\n```xml\r\n<xs:complexType name=\"Text\">\r\n    <xs:simpleContent>\r\n      <xs:extension base=\"xs:string\">\r\n        <xs:attribute name=\"ResourceId\" type=\"xs:string\" />\r\n        <xs:attribute name=\"BaseName\" type=\"xs:string\" />\r\n        <xs:attribute name=\"AssemblyName\" type=\"xs:string\" />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n```\r\nWhat do these attributes mean? Are they actually supported?",
      "created_at": "2018-09-12T19:28:49Z",
      "updated_at": "2018-09-12T19:28:49Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Those attributes are used to support localized text in the ps1xml via a resource in an assembly.\r\n\r\nTo the best of my knowledge, those attributes were only used by the PowerShell engine. Today they are probably not used because those format files are now written as C# and can access the resource strings directly.",
      "created_at": "2018-09-12T20:35:57Z",
      "updated_at": "2018-09-12T20:35:57Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "Okay, after a lot of research it turns out it's actually _impossible_ to allow arbitrary ordering of elements in XSD while still validating how often they occur.\r\n\r\nSo I need to decide between\r\n- Allowing duplicate elements - making some invalid Format files not invalid according to the schema\r\n- Imposing fixed ordering - making some some valid Format files invalid according to the schema\r\n- Including all possible order permutations",
      "created_at": "2018-09-12T20:41:43Z",
      "updated_at": "2018-09-12T20:41:43Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I think the pragmatic option is to impose a fixed ordering.\r\n\r\nWriting format ps1xml is uncommon, and imposing an ordering that follows existing conventions seems acceptable.\r\n\r\nAt some point it would be nice to replace PowerShell's format ps1xml parser (it's slow and error messages are sometimes hard to diagnose) - and I'd suggest anyone doing so start with the xsd, so if that xsd is too permissive (e.g. allowing duplicates where it shouldn't), that seems like the wrong starting point.",
      "created_at": "2018-09-12T21:13:23Z",
      "updated_at": "2018-09-12T21:13:23Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this and would appreciate any contribution of xsd for format and types ps1xml",
      "created_at": "2018-09-12T22:40:38Z",
      "updated_at": "2018-09-12T22:40:38Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "I changed the script to read your schemas @lzybkr, but add documentation annotations parsed from the docs. They are complete and ready to use now.\r\n\r\nhttps://github.com/felixfbecker/PowerShellXSD/blob/master/Format.xsd\r\nhttps://github.com/felixfbecker/PowerShellXSD/blob/master/Types.xsd\r\n\r\n@SteveL-MSFT Where should these schemas live? In the PowerShell repo (if yes, what folder)? Or a repo under the PowerShell org?\r\n\r\nWhat still limits the usefulness of the schemas:\r\n- Format/Types files cannot have a schema instance attribute on the root element\r\n- Format/Types files error if the XML version is declared as 1.1 (but parse XML 1.1 features fine under XML 1.0), which means XSD validation breaks if you want to use VT escape codes https://github.com/PowerShell/PowerShell/issues/7526\r\n\r\nIt would be great if these could be fixed.",
      "created_at": "2018-09-13T00:24:29Z",
      "updated_at": "2018-09-20T17:47:15Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Let's have @PowerShell/powershell-committee discuss the limits",
      "created_at": "2018-09-22T01:15:26Z",
      "updated_at": "2018-09-22T01:15:26Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this and agree on doing loose validation rather than strict validation so for the first item, we should ignore unknown attributes.  For the second item, it should be ok to support 1.1.",
      "created_at": "2018-10-03T22:44:47Z",
      "updated_at": "2018-10-03T22:44:47Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "I made a PR to the VS Code docs on how to set this up: https://github.com/Microsoft/vscode-docs/pull/1965",
      "created_at": "2018-10-10T14:50:28Z",
      "updated_at": "2018-10-10T14:50:28Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@felixfbecker unfortunately, the best I can tell, the .NET XmlDocument type only supports XML 1.0.  I'll have a PR to allow attributes on the `<Configuration>` node, however.",
      "created_at": "2018-10-10T17:56:43Z",
      "updated_at": "2018-10-10T17:56:43Z"
    }
  ],
  "created_at": "2018-09-10T12:49:35Z",
  "labels": [
    "WG-Engine",
    "Issue-Discussion",
    "Committee-Reviewed"
  ],
  "number": 7749,
  "state": "open",
  "title": "Improve authoring experience for Format.ps1xml and Types.ps1xml files",
  "updated_at": "2018-10-10T17:56:43Z"
}