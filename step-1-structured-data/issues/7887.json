{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7887",
  "author": "vexx32",
  "body": "From what I have read, it seems like using `ReadOnlyMemory<char>` instead of `string` could potentially offer some performance gains in the tokenizer if we use it for the `_script`:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/parser/tokenizer.cs#L519\r\n\r\n(N.B.: This would obviously require much more extensive changes than just that. We'd need to make more use of the `.Span` and `.Span.Slice()` instead of `stringbuilder` as the tokenizer currently does, for example.)\r\n\r\nHowever, I lack sufficient understanding of how `{ReadOnly}Memory<T>` functions in practice to be able to say if it's just... better off as it is currently. Given what I have been reading thus far, it seems like it might be worth the change. However:\r\n\r\n1. Unlike `{ReadOnly}Span<T>`, `{ReadOnly}Memory<T>` cannot be directly indexed into; its `.Span` property must be accessed in order to be able to index into the contained memory / values. \r\n    * Continually pulling the `.Span` from `Memory<T>` as the tokenizer might need to for its successive indexing may incur *more* overhead than allocating strings, building new strings via StringBuilder, etc.; I don't know enough of its behaviour to really grok how they'd compare just yet, or if there's a better way to lay out the tokenizer's processes in general to minimise this potential issue.\r\n2. This would require changing several significant portions of how the tokenizer functions to `.Slice` the spans and pass them along instead of utilising `StringBuilder` objects, which *should* be more efficient at least in those areas once the initial `ReadOnlySpan<char>` has been allocated.\r\n\r\nI have had a bit of a play around with how the code itself would look, and I have yet to get it working completely with `ReadOnlyMemory`\r\n\r\nThe changes that are required are more extensive than I've presently been able to figure out. I think I can make it work, but I've yet to get a working prototype branch.\r\n\r\nI would be interested in the opinions of you folks who've been working on this project for a long time and/or have much more experience with `Memory<T>` and `Span<T>` than I do.\r\n\r\n* Is this worth the time investment to figure out, in your opinion?\r\n\r\n* Would you expect it to be more efficient than the current method (allocating a potentially huge string and indexing one character at a time)? \r\n\r\n* Would it just be a lot better to simply have `_script` be turned into `char[]` instead of `string`?\r\n\r\nLook forward to your feedback! \u2764\ufe0f \r\n\r\ncc @daxian-dbw @iSazonov as y'all have been enormously helpful as I've been tinkering already and you probably know this much better than I!",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I've looked at this before and found that this code (parser and tokenizer) is extremely optimized. \r\n\r\nBefore trying to improve this code, we need performance tests. I know that @daxian-dbw  had plans about this.",
      "created_at": "2018-09-28T18:14:54Z",
      "updated_at": "2018-09-28T18:14:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "StringBuilder was optimized in .Net Core 2.0. It is very efficient.",
      "created_at": "2018-09-28T18:28:26Z",
      "updated_at": "2018-09-28T18:28:26Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, I've no doubt StringBuilder is insanely fast, but -- if we didn't *need* to build the string? Just `.Slice()` the existing `Span<char>` or `Memory<char>` by indexes? I get the impression that it could be faster, potentially. Needs some careful examination, though, for sure. \ud83d\ude01 ",
      "created_at": "2018-09-28T18:30:19Z",
      "updated_at": "2018-09-28T18:32:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I looked at this code in PerfView and found it very efficient. I do not think that we will get a noticeable win here. There are much less effective parts in our code that need improvement.\r\n\r\nWe had an idea to implement Trivia (and also enhancements in classes). In this case, it would possible to combine this with improvements in parser and tokenizer.",
      "created_at": "2018-09-28T18:41:33Z",
      "updated_at": "2018-09-28T18:43:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Yes, we'll have Trivia RFC. https://github.com/PowerShell/PowerShell/issues/7857#issuecomment-426473585",
      "created_at": "2018-10-03T10:17:04Z",
      "updated_at": "2018-10-03T10:17:40Z"
    }
  ],
  "created_at": "2018-09-28T17:48:10Z",
  "number": 7887,
  "state": "open",
  "title": "Should _script in Tokenizer.cs be ReadOnlyMemory<char> instead of string?",
  "updated_at": "2018-10-03T10:17:40Z"
}