{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9890",
  "author": "SeeminglyScience",
  "body": "`PSPropertyAdapter` is cool, but every time I've thought about using it I've stopped because I typically also want methods.  Considering it was purposefully omitted from the public API and already exists in the internal API, I'm guessing this was a design decision.  Could someone clarify the intention?  Was this a security related decision or could this be opened up?",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@SeeminglyScience IIRC we created `PSPropertyAdapter` as a compromise for a partner team that had property bags that they wanted to _easily_ expose as PSObjects. Our general expectation was that anyone who wanted to expose data as a `PSObject` would write a custom *ObjectAdapter but that's a non-trivial proposition (hence the compromise)  Of course this all pre-dates the DLR (which PowerShell supports) so you might want to look at `DynamicObject` and friends and see if they are suitable for your purposes.",
      "created_at": "2019-06-14T05:10:50Z",
      "updated_at": "2019-06-14T05:10:50Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Our general expectation was that anyone who wanted to expose data as a PSObject would write a custom *ObjectAdapter but that's a non-trivial proposition\r\n\r\nWhen you say custom `*ObjectAdapter` do you mean like `DotNetAdapter`/`DirectoryEntryAdapter`/etc? If so then yeah I'd take that in a heart beat, but `Adapter` is internal.\r\n\r\n> Of course this all pre-dates the DLR (which PowerShell supports) so you might want to look at DynamicObject and friends and see if they are suitable for your purposes.\r\n\r\nYeah for some things `IDynamicMetaObjectProvider` works *okay*.  Even when I'm going that route though, I need a better way to telegraph members.  Since it uses `GetDynamicMemberNames`, `Get-Member` just shows the member name and that it's dynamic.  I love being able to customize binding, but it leaves a lot to be desired in presentation.\r\n\r\nThe bigger problem with that route though, is I can't apply it broadly.  I *have* to create a wrapper object for every object and every result (I know, PowerShell does it, but it can hide it in the language).  The dream would be to be able to specify an `Adapter` *and* custom `DynamicMetaObjectBinder`'s broadly (even against all types) but I sure would settle for `Adapter`!\r\n\r\nThis may not be the best example of a use case, but it would certainly make [ImpliedReflection](https://github.com/SeeminglyScience/ImpliedReflection) a lot more functional (not to mention maintainable). **Edit 02/02/2022:** jk I just did it anyway with the magic of `IgnoresAccessChecksToAttribute`",
      "created_at": "2019-06-14T12:17:20Z",
      "updated_at": "2022-02-03T01:23:58Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2019-06-16T00:00:14Z",
      "updated_at": "2019-06-16T00:00:14Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Can this be reopened please? cc @iSazonov \r\n\r\nThe design question was answered, but it still stands as a feature request.",
      "created_at": "2019-06-16T14:36:36Z",
      "updated_at": "2019-06-16T14:36:36Z"
    }
  ],
  "created_at": "2019-06-13T18:09:21Z",
  "number": 9890,
  "state": "open",
  "title": "Add publicly implementable adapter for methods",
  "updated_at": "2022-02-03T01:23:58Z"
}