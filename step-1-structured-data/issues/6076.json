{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6076",
  "author": "chrisfcarroll",
  "body": "CmdLets in the NetTCPIP & other Net* modules are not available cross-platform. \r\nMy use-case: we use powershell + netCore as a cross-platform develop & deploy solution. (It's great!)\r\nIf I might offer an order of priorities based on that use-case, I would prioritise \r\n- 'Get-' and 'Test-' CmdLets over 'Set-' & mutators\r\n- NetTcpIp over other Net* modules\r\n\r\nRationale:  In container and serverless application/service deployment, the ability (and hence the need) to mutate hardware and security configuration is limited; but the need to inspect network configuration does not go away.\r\n\r\nSo top of my list are:\r\n\r\n```powershell\r\nGet-NetIPAddress\r\nTest-NetConnection\r\nGet-NetIPConfiguration\r\nGet-NetIPInterface\r\nResolve-DnsName\r\nFind-NetRoute\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n```powershell\r\n\r\n> $PSVersionTable                                                                                                                                              \r\n\r\nName                           Value                                                                                                                                         \r\n----                           -----                                                                                                                                         \r\nPSVersion                      6.0.1                                                                                                                                         \r\nPSEdition                      Core                                                                                                                                          \r\nGitCommitId                    v6.0.1                                                                                                                                        \r\nOS                             Darwin 17.4.0 Darwin Kernel Version 17.4.0: Sun Dec 17 09:19:54 PST 2017; root:xnu-4570.41.2~1/RELEASE_X86_64                                 \r\nPlatform                       Unix                                                                                                                                          \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                                                                       \r\nPSRemotingProtocolVersion      2.3                                                                                                                                           \r\nSerializationVersion           1.1.0.1                                                                                                                                       \r\nWSManStackVersion              3.0  \r\n\r\n> $PSVersionTable\r\nPSVersion                      6.0.0-rc\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-rc\r\nOS                             Linux 4.4.51-40.58.amzn1.x86_64 #1 SMP Tue Feb 28 21:57:17 UTC 2017\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "RichardSiddaway",
      "author_association": "NONE",
      "body": "Many if not all of the net* modules are based on CIM classes that are only available on Windows 8 and later. Either those CIM classes would have to be ported to the other platforms - currently no CIM classes have been or are earmaked for porting as far as I'm aware - or the cmdlets would need to be rewritten to use the appropriate method of retrieving the data on each platform which is a non-trivial task ",
      "created_at": "2018-01-31T12:04:29Z",
      "updated_at": "2018-01-31T12:04:29Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Advanced and ported Test-Connection cmdlet #5328 \r\n\r\nResolve-DnsName can be easily implemented (with some seizures).\r\n\r\nThe remaining cmdlets are more difficult to implement because of the lack of standard APIs.",
      "created_at": "2018-01-31T12:43:53Z",
      "updated_at": "2018-01-31T14:01:12Z"
    },
    {
      "author": "GrimSmiler",
      "author_association": "NONE",
      "body": "@iSazonov could you maybe share the Resolve-DnsName code?\r\nWould be very helpful :)",
      "created_at": "2018-06-28T13:24:39Z",
      "updated_at": "2018-06-28T13:24:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@GrimSmiler I am not owner the cmdlet.. :-)  MSFT is an owner. And the cmdlet is out of the repo.\r\n\r\nI'd can re-create the cmdlet in the repo if we would get encouragement. Our policy requires the creation of an RFC. You could grab this if you want to get this cmdlet.",
      "created_at": "2018-06-28T13:34:29Z",
      "updated_at": "2018-12-12T05:44:55Z"
    },
    {
      "author": "FranklinYu",
      "author_association": "NONE",
      "body": "@iSazonov Then shall we create a feature request in https://github.com/dotnet/core or maybe https://github.com/dotnet/corefx about accessing such features?",
      "created_at": "2018-12-11T22:29:45Z",
      "updated_at": "2018-12-11T22:29:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@FranklinYu Seems it is out of CoreFX. CoreFX implements only base APIs. Interface management and route management is more high API level. Perhaps we could consider CIM. In any case, you need first do more research before make  feature requests.",
      "created_at": "2018-12-12T06:01:39Z",
      "updated_at": "2018-12-12T06:01:39Z"
    },
    {
      "author": "FranklinYu",
      "author_association": "NONE",
      "body": "@iSazonov I'm not familiar with CIM, but I thought it's only available on Windows, isn't it?",
      "created_at": "2018-12-12T15:03:50Z",
      "updated_at": "2018-12-12T15:03:50Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@FranklinYu There is OMI project for portable implementation of CIM \r\nhttps://cloudblogs.microsoft.com/windowsserver/2012/06/28/open-management-infrastructure/",
      "created_at": "2018-12-12T19:08:29Z",
      "updated_at": "2018-12-12T19:08:29Z"
    },
    {
      "author": "FranklinYu",
      "author_association": "NONE",
      "body": "IIUC if we implement those cmdlets in PowerShell with CIM, we need to include OMI in the package for non-Windows operating system, right?",
      "created_at": "2018-12-12T20:43:15Z",
      "updated_at": "2018-12-12T20:43:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "OMI is another project and you can freely install OMI on non-Windows systems.\r\n\r\nThe current plan for the repo is the reverse \u2014 eliminate dependence on OMI native client library and implement WSMan client on managed code to get better compatibility for all platforms.\r\n@SteveL-MSFT Could you please more clarify?",
      "created_at": "2018-12-13T05:21:47Z",
      "updated_at": "2018-12-13T05:21:47Z"
    },
    {
      "author": "FranklinYu",
      "author_association": "NONE",
      "body": "@iSazonov I\u2019m having some issue looking up the documentation. [`Resolve-DnsName`](https://docs.microsoft.com/en-us/powershell/module/dnsclient/resolve-dnsname) only shows \u201cWindows 8.1 and Windows Server 2012 R2\u201d as latest version. Is it provided by a PowerShell package instead? Like [NetworkingDsc](https://www.powershellgallery.com/packages/NetworkingDsc/)?",
      "created_at": "2018-12-16T17:00:20Z",
      "updated_at": "2018-12-16T17:00:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "No, it is a Windows component.",
      "created_at": "2018-12-16T18:42:28Z",
      "updated_at": "2018-12-16T18:42:28Z"
    },
    {
      "author": "FranklinYu",
      "author_association": "NONE",
      "body": "@iSazonov Then I don\u2019t quite understand why it says that. When I select \u201cWindows 10\u201d in the Product list, it says\r\n\r\n> The requested page is not available for Windows 10 and Windows Server 2016 PowerShell. You have been redirected to the newest product version this page is available for.\r\n\r\nSo the Cmdlet works, but it is no longer documented? Is it deprecated?",
      "created_at": "2018-12-16T18:46:26Z",
      "updated_at": "2018-12-16T18:46:26Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Might be a documentation issue? I have `Resolve-DnsName` on PS Core 6.1.0 with Windows 10.\r\n\r\n```\r\nCommandType     Name                                               Version    Source\r\n-----------     ----                                               -------    ------\r\nCmdlet          Resolve-DnsName                                    1.0.0.0    DnsClient\r\n```",
      "created_at": "2018-12-16T18:57:51Z",
      "updated_at": "2018-12-16T18:57:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It looks as doc issue. You could report on the web page or PowerShell-Docs repo.",
      "created_at": "2018-12-16T18:58:19Z",
      "updated_at": "2018-12-16T18:58:19Z"
    },
    {
      "author": "FranklinYu",
      "author_association": "NONE",
      "body": "@vexx32 `Resolve-DnsName` works in your PS Core? I installed PS Core 6.1.0 on my Windows 10 and `Resolve-DnsName` is not found. It only works with the Windows PowerShell 5 that came with Windows 10.",
      "created_at": "2018-12-16T21:56:05Z",
      "updated_at": "2018-12-16T21:56:05Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Ah, yeah. I don't _think_ I changed my $env:PSModulePath, but I might have. It does _work_ but I'm not sure if PS Core searches in the WinPS module paths by default or if I added that into my environment variables directly at some point.",
      "created_at": "2018-12-16T22:23:52Z",
      "updated_at": "2018-12-16T22:23:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If you look `C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\Modules\\DnsClient\\DnsClient.psd1` on Windows 10 1809 you will see `CompatiblePSEditions = @('Desktop','Core')`. The latest Windows 10 version has many such updated modules compatible with PowerShell Core 6.1. This was announced in https://blogs.msdn.microsoft.com/powershell/2018/09/13/announcing-powershell-core-6-1/",
      "created_at": "2018-12-17T17:55:11Z",
      "updated_at": "2018-12-17T17:55:11Z"
    },
    {
      "author": "FranklinYu",
      "author_association": "NONE",
      "body": "@iSazonov I can confirm with Windows 10 1809. This is not available for Windows 10 1803 (which is still the majority). I'm wondering how do I write my own Cmdlet that are compatible with both Windows PowerShell and PowerShell Core, like DnsClient in this case?",
      "created_at": "2018-12-18T17:05:36Z",
      "updated_at": "2018-12-18T17:05:36Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@FranklinYu I recently wrote some docs on [writing portable modules](https://github.com/PowerShell/PowerShell-Docs/pull/3434/files?short_path=6186c34#diff-6186c3471bb6880b62a9a75d8970d509).  It's not merged yet as it's still under review, but you can take a look at the PR for the content.\r\n\r\nRegarding OMI above.  My current recommendation is to not take a dependency on OMI.",
      "created_at": "2018-12-18T17:39:18Z",
      "updated_at": "2018-12-18T17:39:18Z"
    },
    {
      "author": "FranklinYu",
      "author_association": "NONE",
      "body": "> Resolve-DnsName can be easily implemented (with some seizures).\r\n\r\nI would like to help (because I myself need this Cmdlet). I did some research but there doesn't seem to be any built-in API (from .NET Core) to call, if we need record types like `MX` or `TXT` (required for the `-Type` parameter); we either need to [implement DNS protocol](https://www.codeproject.com/Articles/23673/DNS-NET-Resolver-C) or to depend on [third-party project](https://github.com/MichaCo/DnsClient.NET).\r\n\r\nIt seems like the `-Server` parameter is also missing from .NET Core API. I'm not familiar with meanings of other switches.",
      "created_at": "2018-12-26T19:19:36Z",
      "updated_at": "2018-12-26T19:26:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@FranklinYu .Net has TcpClient and UdpClient  and we could easily implement any type request to DNS service. But it is better contribute to .Net CoreFX to enhance `System.Net.NameResolution` APIs. Although if you want it can be done simultaneously.\r\nExamples https://stackoverflow.com/questions/2669841/how-to-get-mx-records-for-a-dns-name-with-system-net-dns",
      "created_at": "2018-12-27T04:30:59Z",
      "updated_at": "2019-01-03T16:05:25Z"
    },
    {
      "author": "FranklinYu",
      "author_association": "NONE",
      "body": "I think this is related: dotnet/corefx#13890\r\n\r\nI would try pushing that issue instead.",
      "created_at": "2019-01-03T14:59:05Z",
      "updated_at": "2019-01-03T14:59:05Z"
    },
    {
      "author": "FranklinYu",
      "author_association": "NONE",
      "body": "I think it would take long for CoreFX to pick them up. According to the CoreFX network team, they will be focusing on HTTP/3 once CoreFX 3.0 is released, so I guess it would be at least a year before they can put priority back to this DNS feature. Would it be possible to use community package [`DnsClient`](https://www.nuget.org/packages/DnsClient) before the function/feature lands on CoreFX?",
      "created_at": "2019-02-19T21:47:43Z",
      "updated_at": "2019-02-19T21:47:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@FranklinYu DnsClient is for .Net Framework.",
      "created_at": "2019-02-20T06:15:09Z",
      "updated_at": "2019-02-20T06:15:09Z"
    },
    {
      "author": "FranklinYu",
      "author_association": "NONE",
      "body": "@iSazonov It works in .NET Standard, according to NuGet. The package description is out of date; check the \"Dependencies\" section.\r\n\r\nWhere makes you think it's for .NET Framework only? I'll contact the author to fix it.",
      "created_at": "2019-02-20T15:05:48Z",
      "updated_at": "2019-02-20T15:10:02Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Looking at the DnsClient.NET repo, it appears to work with .Net Core 2.0 and even mentions Linux.  However, this seems like a module that may be best created and supported by the community and shipped on PSGallery.",
      "created_at": "2019-02-20T19:50:49Z",
      "updated_at": "2019-02-20T19:50:49Z"
    },
    {
      "author": "FranklinYu",
      "author_association": "NONE",
      "body": "Is there any way to write a module to do \"polyfill\", that is to provide certain Cmdlet *only if* it is not available as built-in? Otherwise, the module won't install on new version of PowerShell with `Resolve-DnsName` as built-in.",
      "created_at": "2019-02-20T21:59:04Z",
      "updated_at": "2019-02-20T22:01:31Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Typically, importing a module that contains a command that already exists will error, but you can -AlowClobber to force the import, and any conflicting commands are overridden with the new ones.",
      "created_at": "2019-02-20T22:11:27Z",
      "updated_at": "2019-02-20T22:11:27Z"
    },
    {
      "author": "FranklinYu",
      "author_association": "NONE",
      "body": "@vexx32 That\u2019s exactly the thing I want to avoid.\r\n\r\n1. Missing `-AllowClobber` will give user a very loud error message. This is what happened to Pscx (Pscx/Pscx#23) and I want to avoid it.\r\n2. When the command exist I would prefer *not* to override it, because the one from standard library is more stable and has less bugs.",
      "created_at": "2019-02-21T03:12:05Z",
      "updated_at": "2019-02-21T03:12:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">  module that may be best created and supported by the community and shipped on PSGallery.\r\n\r\nMSFT has many useful modules which is not ported.\r\nPerhaps the best option would be for the MSFT owners of the modules to make them open on GitHub and port them with community help. The new ported modules could replace current private modules in future.",
      "created_at": "2019-02-21T09:22:06Z",
      "updated_at": "2019-02-21T09:22:06Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov Much easier said than done.  Most of the Microsoft teams that own PowerShell modules are only doing closed source, so there's a big learning curve and work involved to make their code Open Source (legal review, private API usage, tests runnable by contributors outside of Microsoft environment, etc...).  Also, making source code open is easy, but maintaining an active repo with the community takes resources that are likely not available.  I suspect that many of the current teams that own a module have none of the original engineers that wrote that module and are only being maintained and not enhanced.  There are some teams producing new PS modules and they may be more open to starting as Open Source, but we usually don't know about them until they're ready for release.\r\n\r\nThe best way to encourage a team to port or Open Source their module is to give them direct feedback through their feedback channel (which is probably UserVoice).  You'll need to get others to support the cause if you want it to be prioritized higher or taken seriously.  Teams do take customer feedback more critically than feedback from the PowerShell team.",
      "created_at": "2019-02-22T17:49:47Z",
      "updated_at": "2019-02-22T17:49:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Thanks for clarify!\r\n\r\n>  to make their code Open Source \r\n\r\nI guess it is unreal and haven't benefits. My suggestion is to start new projects to get ported modules. \r\nMSFT as well as a community can get a lot of benefits from this as it will save everyone from rewriting common code. It will also save MSFT teams from unnecessary duplicate work. Your team could ask them that they would want to delegate, collect such commonly used functions, grab this in new project and get resources for new fin year.\r\nI understand about UserVoice and customer feedback.",
      "created_at": "2019-02-22T19:28:36Z",
      "updated_at": "2019-02-22T19:28:36Z"
    },
    {
      "author": "MichaCo",
      "author_association": "NONE",
      "body": "@SteveL-MSFT and others\r\n\r\n*Just jumping in here to clarify:*\r\n\r\n> Looking at the DnsClient.NET repo, it appears to work with .Net Core 2.0 and even mentions Linux. However, this seems like a module that may be best created and supported by the community and shipped on PSGallery.\r\n\r\n[DnsClient.NET](https://dnsclient.michaco.net) works totally fine cross platform on Linux etc.\r\n\r\nThe only problem a couple years ago was to resolve the System's DNS servers in case the user doesn't provide any. \r\nThe library has to query network interfaces to resolve those servers and older versions of .NET Core had no implementation of those methods in `System.Net.NetworkInformation` for some targets, especially Linux and WPF.\r\n\r\nBut that should not be an issue anymore since .NET Core 2.2 I think.\r\nI still have a native fallback in case the NetworkInformation doesn't yield any results...\r\n\r\nAll the other DNS protocol implementation simply uses UDP and/or TCP clients and sockets which are ported via .NET Core just fine. \r\nThe library is widely used by many customers in Linux containers within AKS for example in production for a long time now ;)\r\n\r\n\r\nIf there is anything I can help you with, like something is missing or blocking you using DnsClient, just ask or send a PR ;)",
      "created_at": "2020-04-18T13:03:29Z",
      "updated_at": "2020-04-18T13:11:15Z"
    },
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "<https://github.com/PowerShell/PowerShell/issues/12910> makes me think that, if a cross-platform `Resolve-DnsName` is implemented, there should still be some way to run DNS queries via the native DNS resolver of Windows so that it can be used for diagnosing DNS problems that are affecting applications on Windows. An independent DNS client like DnsClient.NET cannot be expected to respect all Windows settings for things like DNS over HTTP or default suffixes.\r\n\r\nPossibilities:\r\n\r\n- Implement `Resolve-DnsName -UseNativeResolver`, using [DnsQueryEx](https://docs.microsoft.com/windows/win32/api/windns/nf-windns-dnsqueryex) on Windows. On GNU/Linux, the GNU C Library does not appear to provide functions for getting an entire DNS response; no doubt there are such functions in other libraries, but perhaps none of them is so widely used by applications that it would be worth supporting for this diagnostic purpose.\r\n- Advise users to use `Test-Connection` or `[System.Net.Dns]::GetHostEntry` for this diagnostic. This assumes that .NET will keep using the DNS resolver of the operating system, like <https://github.com/dotnet/runtime/issues/19443#issuecomment-264531083> recommends.\r\n- Advise users to use Windows PowerShell for this diagnostic.",
      "created_at": "2020-06-06T18:07:43Z",
      "updated_at": "2020-06-06T18:07:43Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Is there a reason a Resolve-DnsName cmdlet can't simply use the `System.Net.Dns` API for this functionality?",
      "created_at": "2020-06-06T18:44:06Z",
      "updated_at": "2020-06-06T18:44:06Z"
    },
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "`System.Net.Dns` does not currently provide all the information that `Resolve-DnsName` outputs. On Windows PowerShell 5.1:\r\n\r\n```\r\nPS C:\\> Resolve-DnsName www.microsoft.com\r\n\r\nName                           Type   TTL   Section    NameHost\r\n----                           ----   ---   -------    --------\r\nwww.microsoft.com              CNAME  365   Answer     www.microsoft.com-c-3.edgekey.net\r\nwww.microsoft.com-c-3.edgekey. CNAME  365   Answer     www.microsoft.com-c-3.edgekey.net.globalredir.akadns.net\r\nnet\r\nwww.microsoft.com-c-3.edgekey. CNAME  365   Answer     e13678.dspb.akamaiedge.net\r\nnet.globalredir.akadns.net\r\n\r\nName       : e13678.dspb.akamaiedge.net\r\nQueryType  : AAAA\r\nTTL        : 15\r\nSection    : Answer\r\nIP6Address : 2a02:26f0:41:692::356e\r\n\r\n\r\nName       : e13678.dspb.akamaiedge.net\r\nQueryType  : AAAA\r\nTTL        : 15\r\nSection    : Answer\r\nIP6Address : 2a02:26f0:41:68e::356e\r\n\r\n\r\nName       : e13678.dspb.akamaiedge.net\r\nQueryType  : AAAA\r\nTTL        : 15\r\nSection    : Answer\r\nIP6Address : 2a02:26f0:41:695::356e\r\n\r\n\r\nName       : e13678.dspb.akamaiedge.net\r\nQueryType  : AAAA\r\nTTL        : 15\r\nSection    : Answer\r\nIP6Address : 2a02:26f0:41:68f::356e\r\n\r\n\r\nName       : e13678.dspb.akamaiedge.net\r\nQueryType  : AAAA\r\nTTL        : 15\r\nSection    : Answer\r\nIP6Address : 2a02:26f0:41:694::356e\r\n\r\n\r\nName       : e13678.dspb.akamaiedge.net\r\nQueryType  : A\r\nTTL        : 24\r\nSection    : Answer\r\nIP4Address : 23.37.97.67\r\n```\r\n\r\nOn PowerShell 7.1.0-preview.3:\r\n\r\n```\r\nPS C:\\> [System.Net.Dns]::GetHostEntry(\"www.microsoft.com\")\r\n\r\nHostName                   Aliases AddressList\r\n--------                   ------- -----------\r\ne13678.dspb.akamaiedge.net {}      {2a02:26f0:41:691::356e, 2a02:26f0:41:685::356e, 2a02:26f0:41:68a::356e, 2a02:26f0:\u2026\r\n```\r\n\r\nSo the CNAME chain and TTL values are not available.",
      "created_at": "2020-06-06T18:53:09Z",
      "updated_at": "2020-06-06T18:53:09Z"
    },
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "Also, the methods of `System.Net.Dns` only take `IPAddress address` or `string hostNameOrAddress` as a parameter, so there is no way to implement most of the parameters of `Resolve-DnsName`, such as `-Type` or `-Server`. If a native-resolver mode using `System.Net.Dns` were part of `Resolve-DnsName`, it might be best implemented as a separate parameter set.",
      "created_at": "2020-06-06T19:14:39Z",
      "updated_at": "2020-06-06T19:15:29Z"
    }
  ],
  "created_at": "2018-01-31T11:58:42Z",
  "labels": [
    "WG-Cmdlets",
    "Up-for-Grabs",
    "Issue-Discussion"
  ],
  "number": 6076,
  "state": "open",
  "title": "Networking Introspection CmdLets are not available cross-platform",
  "updated_at": "2020-06-06T19:15:29Z"
}