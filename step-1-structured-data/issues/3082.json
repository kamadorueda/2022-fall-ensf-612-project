{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3082",
  "author": "lzybkr",
  "body": "The parser has support for type aliases (like a type accelerator), but it's not fully implemented.\r\n\r\nThe following should work, but reports `Unable to find type [MyMap]`:\r\n\r\n```PowerShell\r\nusing type MyMap = System.Collections.Generic.Dictionary[string,int]\r\n[MyMap]::new()\r\n```\r\n\r\nThe following should also work, but reports `This syntax of the 'using' statement is not supported`:\r\n\r\n```PowerShell\r\nusing type foo = System.Collections.Arraylist\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "Yep! I Noticed this bug a log ago. Also If you import assembly with `using assembly blabla.dll` its members are inaccessible from  the `PowerShell` classes ! \r\nAnd `[Ordered]` to initialize an ordered hash table  doesn't work inside posh classes too!\r\n \r\n",
      "created_at": "2017-02-02T12:41:37Z",
      "updated_at": "2017-02-02T12:42:20Z"
    },
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "It probably also makes sense to add support for `using namespace Alias = RealName`  \r\nSpecial parsing rules were also made for `using command Alias = RealName` and `using module Alias = RealName` what was the idea behind those? In the case of using command, was it just an alternative to New-Alias?",
      "created_at": "2021-12-27T01:28:31Z",
      "updated_at": "2021-12-27T01:28:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> what was the idea behind those?\r\n\r\n\"using\" is evaluated at _parse_ time.",
      "created_at": "2021-12-27T04:24:00Z",
      "updated_at": "2021-12-27T04:24:00Z"
    },
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": ">\"using\" is evaluated at parse time.\r\n\r\nI know, but what functionality would those 2 using directives have had? Namespace and Type is obvious, Command and Module are harder to guess.",
      "created_at": "2021-12-27T07:32:49Z",
      "updated_at": "2021-12-27T07:32:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "`using module` is already implemented and call `Get-Module -FullQualifiedName`.",
      "created_at": "2021-12-27T07:50:24Z",
      "updated_at": "2021-12-27T07:50:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "`using module` imports class definitions that allows using the classes below in the script I guess.",
      "created_at": "2021-12-27T08:51:23Z",
      "updated_at": "2021-12-27T08:51:23Z"
    },
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "Maybe I wasn't clear, but I meant that the `using module Alias = RealName` syntax was unimplemented and that I couldn't figure out what the original intent may have been.  \r\nMaybe it would have imported class definitions from the specified module in the specified namespace?",
      "created_at": "2021-12-27T10:06:45Z",
      "updated_at": "2021-12-27T10:06:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "While type alias could be so useful as type accelerator I don't see benefits for module or command aliases. Although module alias could resolve module name conflict it is unlikely situation. ",
      "created_at": "2021-12-27T15:41:53Z",
      "updated_at": "2021-12-27T15:41:53Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Maybe I wasn't clear, but I meant that the `using module Alias = RealName` syntax was unimplemented and that I couldn't figure out what the original intent may have been. Maybe it would have imported class definitions from the specified module in the specified namespace?\r\n\r\nFairly certain it was only added to make way for the unfinished `using type/command alias = newname` syntax. Doubt there were any plans to make it work with `using module` though I could very well be wrong.",
      "created_at": "2021-12-27T17:35:53Z",
      "updated_at": "2021-12-27T17:35:53Z"
    }
  ],
  "created_at": "2017-02-02T00:39:46Z",
  "number": 3082,
  "state": "open",
  "title": "Implement type alias support",
  "updated_at": "2022-01-12T01:34:36Z"
}