{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17626",
  "author": "kirillkovalenko",
  "body": "### Steps to reproduce\r\n\r\nPS> $o = New-Object -ComObject \"{0444EB80-3B35-4108-B52B-DEB178AD3064}\"\r\n\r\n### Expected behavior\r\n\r\n```console\r\nIt works\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nNew-Object: Retrieving the COM class factory for component with CLSID {00000000-0000-0000-0000-000000000000} failed due to the following error: 80040154 Class not registered (0x80040154 (REGDB_E_CLASSNOTREG)).\r\n```\r\n\r\n\r\n### Error details\r\n\r\n```console\r\nException             :\r\n    Type       : System.Runtime.InteropServices.COMException\r\n    ErrorCode  : -2147221164\r\n    TargetSite :\r\n        Name          : AllocateComObject\r\n        DeclaringType : System.RuntimeTypeHandle\r\n        MemberType    : Method\r\n        Module        : System.Private.CoreLib.dll\r\n    Message    : Retrieving the COM class factory for component with CLSID {00000000-0000-0000-0000-000000000000} failed due to the following\r\nerror: 80040154 Class not registered (0x80040154 (REGDB_E_CLASSNOTREG)).\r\n    Source     : System.Private.CoreLib\r\n    HResult    : -2147221164\r\n    StackTrace :\r\n   at System.RuntimeTypeHandle.AllocateComObject(Void* pClassFactory)\r\n   at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)\r\n   at Microsoft.PowerShell.Commands.NewObjectCommand.SafeCreateInstance(Type t)\r\nCategoryInfo          : ResourceUnavailable: (:) [New-Object], COMException\r\nFullyQualifiedErrorId : NoCOMClassIdentified,Microsoft.PowerShell.Commands.NewObjectCommand\r\nInvocationInfo        :\r\n    MyCommand        : New-Object\r\n    ScriptLineNumber : 1\r\n    OffsetInLine     : 6\r\n    HistoryId        : 1\r\n    Line             : $o = New-Object -ComObject \"{0444EB80-3B35-4108-B52B-DEB178AD3064}\"\r\n    PositionMessage  : At line:1 char:6\r\n                       + $o = New-Object -ComObject \"{0444EB80-3B35-4108-B52B-DEB178AD3064}\"\r\n                       +      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    InvocationName   : New-Object\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\n```\r\n\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.5\r\nPSEdition                      Core\r\nGitCommitId                    7.2.5\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I get REGDB_E_CLASSNOTREG in pwsh and WinPS too. What is 0444EB80-3B35-4108-B52B-DEB178AD3064 class?",
      "created_at": "2022-07-05T11:54:13Z",
      "updated_at": "2022-07-05T11:54:13Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@iSazonov same as you on my Windows 10, 0444EB80-3B35-4108-B52B-DEB178AD3064 >Class not registered\r\n\r\n> New-Object -ComObject does not support instantiation by class identifier (CLSID)(https://github.com/PowerShell/PowerShell/issues/17626#)\r\n\r\n I made a PowerShell workaround/prototype. \r\n\r\n```\r\nfunction Resolve-ComObject {\r\n    param([Parameter(Mandatory)] [Guid] $CLSID)\r\n    begin {\r\n        if (-not('Ole32.Resolve' -as 'Type')) {\r\n            Add-Type -Namespace Ole32 -Name Resolve -MemberDefinition @'\r\n[DllImport(\"ole32.dll\")]\r\npublic static extern int ProgIDFromCLSID(\r\n    [In()]ref Guid clsid, \r\n    [MarshalAs(UnmanagedType.LPWStr)]out string lplpszProgID);\r\n'@\r\n        }\r\n        $progId = [string]::Empty\r\n        $errorCode = [Ole32.Resolve]::ProgIDFromCLSID([ref]$CLSID, [ref]$progId)\r\n        if ($errorCode -eq 0) {\r\n            $progID\r\n        } else {\r\n            Write-Error -Exception ([System.ComponentModel.Win32Exception]::new($errorCode))\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```\r\nPS> Resolve-ComObject 72C24DD5-D70A-438B-8A42-98424B88AFB8\r\nWScript.Shell.1\r\n\r\nPS> Resolve-ComObject 093FF999-1EA0-4079-9525-9614C3504B74\r\n> WScript.Network.1\r\n```",
      "created_at": "2022-07-05T16:50:31Z",
      "updated_at": "2022-07-05T16:50:31Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Can also do\r\n\r\n```powershell\r\n$comObject = [Activator]::CreateInstance([type]::GetTypeFromCLSID($guid))\r\n```",
      "created_at": "2022-07-05T17:30:54Z",
      "updated_at": "2022-07-05T17:30:54Z"
    },
    {
      "author": "kirillkovalenko",
      "author_association": "NONE",
      "body": "> I get REGDB_E_CLASSNOTREG in pwsh and WinPS too. What is 0444EB80-3B35-4108-B52B-DEB178AD3064 class?\r\n\r\nMy own class. It does not matter. Other CLSIDs give the same behavior.",
      "created_at": "2022-07-05T19:17:00Z",
      "updated_at": "2022-07-05T19:17:13Z"
    },
    {
      "author": "kirillkovalenko",
      "author_association": "NONE",
      "body": "> Can also do\r\n> \r\n> ```powershell\r\n> $comObject = [Activator]::CreateInstance([type]::GetTypeFromCLSID($guid))\r\n> ```\r\n\r\nYes, I can. But why should I?",
      "created_at": "2022-07-05T19:18:43Z",
      "updated_at": "2022-07-05T19:18:43Z"
    },
    {
      "author": "scriptingstudio",
      "author_association": "NONE",
      "body": "simple workaround\r\n```powershell\r\nfunction New-ComObject ([alias('name')]$guid) {\r\n    if ($guid -as [guid]) {\r\n        [Activator]::CreateInstance([type]::GetTypeFromCLSID($guid))\r\n    } else {\r\n        New-Object -ComObject $guid\r\n    }\r\n}\r\n```",
      "created_at": "2022-07-05T19:29:31Z",
      "updated_at": "2022-07-05T19:29:31Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "> > Can also do\r\n> > ```powershell\r\n> > $comObject = [Activator]::CreateInstance([type]::GetTypeFromCLSID($guid))\r\n> > ```\r\n> \r\n> Yes, I can. But why should I?\r\n\r\nAs a developper, you should declare a registry key to resolve your ProgID to your CLSID.\r\nhttps://docs.microsoft.com/en-us/windows/win32/com/-progid--key\r\n\r\nThen New-Object -ComObject \\<YourProgId\\> will work.\r\n\r\n\r\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/windows/win32/com/-progid--key\">ProgID Key - Win32 apps</a></strong></div><div>A programmatic identifier (ProgID) is a registry entry that can be associated with a CLSID. Like the CLSID, the ProgID identifies a class but with less precision because it is not guaranteed to be globally unique.</div></blockquote>",
      "created_at": "2022-07-05T19:40:13Z",
      "updated_at": "2022-07-05T19:41:07Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Yes, I can. But why should I?\r\n\r\nI was providing a work around, but also it's a rare use case. Either way, attaching the Cmdlets WG for discussion",
      "created_at": "2022-07-05T20:08:58Z",
      "updated_at": "2022-07-05T20:09:09Z"
    }
  ],
  "created_at": "2022-07-04T16:46:50Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets-Utility",
    "Needs-Triage"
  ],
  "number": 17626,
  "state": "open",
  "title": "New-Object -ComObject does not support instantiation by class identifier (CLSID)",
  "updated_at": "2022-07-05T20:09:09Z"
}