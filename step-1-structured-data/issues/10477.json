{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10477",
  "author": "ryhayash",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n**Issue description:**\r\nUnable to use $MyInvocation.MyCommand.Name in Where-Object block as it becomes null. ForEach and For-EachObject works fine. I see this only with Where-Object.\r\n\r\nI understand there are workarounds but just want to know if this is expected behavior or not as I was not able to find document that describes scope in Where-Object. \r\n\r\n# Steps to reproduce\r\n\r\nCopy the following script to `test.ps1`\r\n```powershell\r\n1 | Where-Object{\r\n    Write-Host('MyInvocation in Where-Object: ' + $MyInvocation.MyCommand.Name)\r\n}\r\n\r\n1 | ForEach-Object{\r\n    Write-Host('MyInvocation in ForEach-Object: ' + $MyInvocation.MyCommand.Name)\r\n}\r\n\r\nForEach($FileName in 1){\r\n    Write-Host('MyInvocation in ForEach: ' + $MyInvocation.MyCommand.Name)\r\n}\r\n```\r\nThen run\r\n```powershell\r\n.\\test.ps1\r\n```\r\n\r\n# Expected behavior\r\n\r\n```powershell\r\n## Expected output in case script name is test.ps1.\r\n\r\nMyInvocation in Where-Object: test.ps1\r\nMyInvocation in ForEach-Object: test.ps1\r\nMyInvocation in ForEach: test.ps1\r\n\r\n```\r\n\r\n# Actual behavior\r\n\r\n```powershell\r\n## Expected output in case script name is test.ps1.\r\n\r\nMyInvocation in Where-Object:       <-------- $MyInvocation.MyCommand.Name becomes null \r\nMyInvocation in ForEach-Object: test.ps1\r\nMyInvocation in ForEach: test.ps1\r\n\r\n\r\n```\r\n\r\n# Environment data\r\n```\r\n> $PSVersionTable\r\n\r\nName Value\r\n---- -----\r\nPSVersion 6.2.1\r\nPSEdition Core\r\nGitCommitId 6.2.1\r\nOS Microsoft Windows 10.0.18362\r\nPlatform Win32NT\r\nPSCompatibleVersions {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion 2.3\r\nSerializationVersion 1.1.0.1\r\nWSManStackVersion 3.0\r\n```\r\n\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@ryhayash \r\n\r\n> I understand there are workarounds but just want to know if this is expected behavior \r\n\r\nThis behaviour is the logical consequence of what you're doing. Unlike the `foreach` statement which just has a block as part of the statement., `Where-Object` is a _command_ that takes a script block _object_ as it's argument. A scriptblock is an anonymous function (anonymous command) so it has it's own invocation information and, since it's anonymous, the command name is empty. The other fields are populated however e.g.\r\n```powershell\r\n{master}PSCore (1:11) >  & { $MyInvocation.MyCommand.CommandType}\r\nScript\r\n```",
      "created_at": "2019-09-03T20:07:09Z",
      "updated_at": "2019-09-03T20:07:09Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@BrucePay if that's the case, why does the behaviour differ between `Where-Object` and `ForEach-Object`? They are both cmdlets, and I don't think it's unreasonable for users to expect a consistent experience between these two commands in terms of how their scriptblock implementations behave.",
      "created_at": "2019-09-03T20:28:35Z",
      "updated_at": "2019-09-03T20:28:35Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I agree. We need to decide which behavior is the correct one.\r\nFrom my personal view, `Where-Object` seems doing the right thing because just like @BrucePay said, a script block is an anonymous function.\r\n\r\nHere is another example:\r\n```powershell\r\nPS> cat .\\b.ps1\r\n. { Write-Host('MyInvocation in the script block: ' + $MyInvocation.MyCommand.Name) }\r\nPS> .\\b.ps1\r\nMyInvocation in the script block:\r\n```\r\nHere, `b.ps1` contains an invocation of a script block, and as we can see, the script block doesn't uses `b.ps1` as the command name.\r\n\r\n#10454 is related to this issue. The PR made an optimization to override `ForEahc-Object` with dot-sourcing a filter-like script block for some common uses of `ForEach-Object`, and when that optimization kicks in, `$MyInvocation.MyCommand.Name` is `null` for `ForEach-Object` too.\r\nWhether that should be fixed and how to fix it depends on the conclusion of this issue.\r\n\r\n-----------------------------------\r\n\r\nHere are the output of `$MyInvocation` from `Where-Object` and `ForEach-Object` in the repro scenario as in `preview.3`:\r\n\r\n```powershell\r\nMyInvocation in ForEach-Object:\r\n\r\nMyCommand             : a.ps1\r\nBoundParameters       : {}\r\nUnboundArguments      : {}\r\nScriptLineNumber      : 1\r\nOffsetInLine          : 1\r\nHistoryId             : 46\r\nScriptName            :\r\nLine                  : .\\a.ps1\r\nPositionMessage       : At line:1 char:1\r\n                        + .\\a.ps1\r\n                        + ~~~~~~~\r\nPSScriptRoot          :\r\nPSCommandPath         :\r\nInvocationName        : .\\a.ps1\r\nPipelineLength        : 1\r\nPipelinePosition      : 1\r\nExpectingInput        : False\r\nCommandOrigin         : Runspace\r\nDisplayScriptPosition :\r\n```\r\n\r\n```powershell\r\nMyInvocation in Where-Object:\r\n\r\nMyCommand             :\r\nBoundParameters       : {}\r\nUnboundArguments      : {}\r\nScriptLineNumber      : 1\r\nOffsetInLine          : 1\r\nHistoryId             : 47\r\nScriptName            :\r\nLine                  : .\\c.ps1\r\nPositionMessage       : At line:1 char:1\r\n                        + .\\c.ps1\r\n                        + ~~~~~~~\r\nPSScriptRoot          :\r\nPSCommandPath         :\r\nInvocationName        :\r\nPipelineLength        : 0\r\nPipelinePosition      : 0\r\nExpectingInput        : False\r\nCommandOrigin         : Internal\r\nDisplayScriptPosition :\r\n```\r\nHere is the output of  `$MyInvocation` from `ForEach-Object` in the repro scenario with the optimization change in #10454:\r\n\r\n```powershell\r\nMyInvocation in ForEach-Object:\r\n\r\nMyCommand             :\r\n                            'MyInvocation in ForEach-Object: '\r\n                            $MyInvocation | fl *\r\n\r\nBoundParameters       : {}\r\nUnboundArguments      : {}\r\nScriptLineNumber      : 5\r\nOffsetInLine          : 36\r\nHistoryId             : 32\r\nScriptName            : F:\\tmp\\a.ps1\r\nLine                  : 1..2 | Where-Object { $_ -gt 1 } | ForEach-Object {\r\n\r\nPositionMessage       : At F:\\tmp\\a.ps1:5 char:36\r\n                        + 1..2 | Where-Object { $_ -gt 1 } | ForEach-Object {\r\n                        +                                    ~~~~~~~~~~~~~~~~\r\nPSScriptRoot          : F:\\tmp\r\nPSCommandPath         : F:\\tmp\\a.ps1\r\nInvocationName        : ForEach-Object\r\nPipelineLength        : 2\r\nPipelinePosition      : 2\r\nExpectingInput        : True\r\nCommandOrigin         : Internal\r\nDisplayScriptPosition :\r\n```",
      "created_at": "2019-09-03T21:54:46Z",
      "updated_at": "2019-09-04T23:32:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Don't forget about `ForEach -Parallel` - we need to have a consistency with it too.",
      "created_at": "2019-09-04T03:11:12Z",
      "updated_at": "2019-09-04T03:11:12Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "At the meantime, I also doubt if it's necessary to pursue the consistency of `$MyInvocation` for `ForEach-Object` and `Where-Object`. I will analyze the [powershell corpus](https://onedrive.live.com/?authkey=%21AC9cbXs%2DtwuSZ%2DE&cid=7874CFD565B38D4B&id=7874CFD565B38D4B%211091892&parId=7874CFD565B38D4B%211091891&action=locate) to find out if there is any uses of `$MyInvocation` within the `Where/ForEach-Object` script block arguments.",
      "created_at": "2019-09-04T06:29:55Z",
      "updated_at": "2019-09-04T06:29:55Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I analyzed the [powershell corpus]().`ForEach-Object` appears 260954 times in those scripts, and the variable `$MyInvocation` is used in 294 `ForEach-Object` invocations. Out of that 294 uses, 259 are `$MyInvocation.MyCommand.XXX`.\r\nGiven this analysis result, the pipeline-rewriting optimization is a practical breaking change, and has been reverted.",
      "created_at": "2019-09-05T16:35:42Z",
      "updated_at": "2019-09-05T16:35:42Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Is there no way to implement the optimization without the breaking change? \ud83d\ude41 ",
      "created_at": "2019-09-05T16:42:04Z",
      "updated_at": "2019-09-05T16:42:04Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I looked into how feasible to fix this with the pipeline-rewriting. It turned out not possible unless with some hacky code to break how the `ScriptCommandProcessor` works today, for example, making the `InternalCommand.MyInvocation` settable, which might introduce other problems because the rest of code assumes `InternalCommand.MyInvocation` reflects exactly the `InternalCommand`.",
      "created_at": "2019-09-05T17:09:25Z",
      "updated_at": "2019-09-05T17:09:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Does the .MyInvocation work right in filter function?",
      "created_at": "2019-09-06T04:26:07Z",
      "updated_at": "2019-09-06T04:26:07Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov I'm not clear what you are asking. For reference, below are the places where the `InvocationInfo` is constructed for `ForEach-Object` and `Where-Object`. Basically, it's impossible to retain the exact same `InvocationInfo` if we replace the `ForEach-Objcet` with a script command.\r\n\r\n**ForEach-Object:**\r\nhttps://github.com/PowerShell/PowerShell/blob/cc0fed479a3e455b746a3d12597f078462f2d644/src/System.Management.Automation/engine/lang/scriptblock.cs#L676-L677\r\n\r\n**Where-Object:**\r\nhttps://github.com/PowerShell/PowerShell/blob/cc0fed479a3e455b746a3d12597f078462f2d644/src/System.Management.Automation/engine/runtime/CompiledScriptBlock.cs#L1051-L1059",
      "created_at": "2019-09-06T16:45:54Z",
      "updated_at": "2019-09-06T16:45:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Basically, it's impossible to retain the exact same InvocationInfo if we replace the ForEach-Objcet with a script command.\r\n\r\nI see. My comment was that we consider ForEach-Object, Where-Object and ForEach (and .ForEach()) but there is filter functions. I guess that ForEach and filter functions have the same behaviour.\r\n\r\nWe have or could have other cmdlets with scriptblock parameters. What is their behavior?",
      "created_at": "2019-09-06T18:57:45Z",
      "updated_at": "2019-09-06T18:57:45Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> I guess that ForEach and filter functions have the same behaviour.\r\n\r\nNo, `Foreach-Object` and filter functions (or script block with the process block only) have different behavior when it comes to `$MyInvocation`.\r\n\r\n> We have or could have other cmdlets with scriptblock parameters. What is their behavior?\r\n\r\nThat depends on which `XXInvokeXX` method is being used for those script block arguments.",
      "created_at": "2019-09-06T20:00:00Z",
      "updated_at": "2019-09-06T20:00:00Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Should we be matching which `XXInvokeXX` method is being used between ForEach-Object and Where-Object?",
      "created_at": "2019-09-06T20:11:11Z",
      "updated_at": "2019-09-06T20:11:11Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I don't know. It sounds like a breaking change. And again, the question would be back to `is it necessary to pursue the consistency in these two particular cases`.",
      "created_at": "2019-09-06T20:17:45Z",
      "updated_at": "2019-09-06T20:17:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> That depends on which XXInvokeXX method is being used for those script block arguments.\r\n\r\nIf we allow this for third-party cmdlets why do we search a consistency for core cmdlets?\r\n\r\nIf a conclusion will be that we should use only one way this will mean that we should deprecate a public API, right?\r\n",
      "created_at": "2019-09-07T18:53:54Z",
      "updated_at": "2019-09-07T18:53:54Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this.  Inspecting the code, it appears that both `Where-Object` and `ForEach-Object` both have code to set MyInvocation, but using different APIs.  It seems that user found utility in getting this information so we recommend that `Where-Object` should behave like `ForEach-Object` even if it is technically correct that it's an anonymous function.",
      "created_at": "2019-12-18T23:43:06Z",
      "updated_at": "2019-12-18T23:43:06Z"
    }
  ],
  "created_at": "2019-09-03T12:55:39Z",
  "number": 10477,
  "state": "open",
  "title": "$MyInvocation.MyCommand.Name becomes null in Where-Object block",
  "updated_at": "2021-01-15T14:32:33Z"
}