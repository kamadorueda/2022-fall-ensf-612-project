{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13426",
  "author": "yecril71pl",
  "body": "## Summary of the new feature/enhancement\r\n\r\n<!-- \r\nA clear and concise description of what the problem is that the new feature would solve.\r\nTry formulating it in user story style (if applicable):\r\n'As a user I want X so that Y.' with X being the being the action and Y being the value of the action.\r\n-->\r\nThe following command should produce three tokens rather than one:\r\n```powershell\r\nCMD$( )\r\n```\r\n## Proposed technical implementation details (optional)\r\n\r\n<!-- \r\nA clear and concise description of what you want to happen.\r\nConsider providing an example PowerShell experience with expected result.\r\n-->\r\nActual result: command `CMD$( )` not found.\r\nExpected result: command `CMD$` not found.\r\nIt is confusing when tokenisation rules related to constructs unsupported in the current parsing mode are applied.\r\nIn other words: Does `$( )` mean anything here?  No, it does not.  So why is it even a thing? \ud83e\udd14\r\n",
  "closed_at": "2020-08-15T12:00:11Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Have you a script example where it raises a problem?",
      "created_at": "2020-08-13T13:29:33Z",
      "updated_at": "2020-08-13T13:29:33Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "That would require a valid command ending with `$` in the name.  I do not know any such command.",
      "created_at": "2020-08-13T13:31:25Z",
      "updated_at": "2020-08-13T13:31:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You could rename an exe.",
      "created_at": "2020-08-13T13:46:31Z",
      "updated_at": "2020-08-13T13:46:31Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "```powershell\r\n'ECHO %1' | OUT-FILE CMD$.CMD\r\nECHO(0)\r\n./CMD$(0)\r\n```",
      "created_at": "2020-08-13T13:52:25Z",
      "updated_at": "2020-08-13T13:53:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I renamed an exe in cmd$(0) and this works for me.",
      "created_at": "2020-08-13T14:29:07Z",
      "updated_at": "2020-08-13T14:29:07Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "The command should call `cmd$` of `0`.",
      "created_at": "2020-08-13T16:30:18Z",
      "updated_at": "2020-08-13T19:27:50Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "While I don't disagree that it probably shouldn't have been parsed like that originally, I don't really see the point in changing it now because:\r\n\r\n1. The `FunctionName(args)` syntax is pretty heavily recommended against, so fixing that syntax for commands that happen to end in `$` isn't really worth pursuing\r\n1. `function cmd$(0) { }` is valid syntax, so changing it now is a break.  Even if not super likely",
      "created_at": "2020-08-13T16:47:13Z",
      "updated_at": "2020-08-13T16:47:13Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "Your 2. is irrelevant to the case.  I would appreciate a source for 1.",
      "created_at": "2020-08-13T17:03:14Z",
      "updated_at": "2020-08-13T17:03:14Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Your 2. is irrelevant to the case.\r\n\r\nPlease add more details when trying to refute a statement.  Just telling me I'm wrong without explaining why doesn't actually move the conversation along.\r\n\r\n> I would appreciate a source for 1.\r\n\r\nA source for what?  I didn't say it was officially deprecated.  Tbh no really talks about the syntax because it's incredibly limited.  You can only pass at most a single array as args, and you can't even keep the syntax when there are no args.  Also strict mode explicitly throws if you use that syntax for whatever that's worth.\r\n\r\nObviously if you like it no one is going to stop you from using it, but it doesn't make sense for the language to actively design around it more than it already has (which isn't really that much, it mostly works by accident).",
      "created_at": "2020-08-13T17:27:29Z",
      "updated_at": "2020-08-13T17:27:29Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "> Just telling me I'm wrong\r\n\r\nI did not tell you you were wrong.  I tried to say that this complaint is about what happens when you call a command, not when you define a function.  I am sorry if that was not clear enough.\r\n\r\nIt makes sense for the language to actively design around treating `$( )` as an affix token in a location when it is not interpreted as a subexpression operator.  Not so much because you want your `( )` to work as because you want to maintain integrity and consistency of the syntax.",
      "created_at": "2020-08-13T18:53:33Z",
      "updated_at": "2020-08-13T18:53:33Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "> You can only pass at most a single array as args\r\n\r\n```powershell\r\necho(1,2)(3,4)\r\n```",
      "created_at": "2020-08-13T18:56:54Z",
      "updated_at": "2020-08-13T18:56:54Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": ">  I tried to say that this complaint is about what happens when you call a command, not when you define a function. I am sorry if that was not clear enough.\r\n\r\nFair enough, no worries!\r\n\r\nSo what I was getting at is that it makes sense that if you can do:\r\n\r\n```powershell\r\nfunction cmd$() { param($a) $a }\r\n```\r\n\r\nthat you can do:\r\n\r\n```powershell\r\ncmd$() 10\r\n```\r\n\r\nNot always true for sure, but it would be strange to allow that in the function definition and then fail when you try to call it.\r\n\r\n> It makes sense for the language to actively design around treating `$( )` as an affix token in a location when it is not interpreted as a subexpression operator. Not so much because you want your `( )` to work as because you want to maintain integrity and consistency of the syntax.\r\n\r\nOh yeah I agree with you on that.  I'd much rather they have not allowed it in the first place, but taking it away *now* doesn't really win much unfortunately.  It's pretty much exclusively *just* a break with no upside aside from being a bit more technically correct you know?\r\n\r\n> > You can only pass at most a single array as args\r\n> \r\n> ```powershell\r\n> echo(1,2)(3,4)\r\n> ```\r\n\r\nI think we might be talking about different things here.  Early on in PowerShell's history there was (and probably still is) some folks who used functions with a \"method like\" syntax e.g. `Get-ChildItem('path')` etc.  I thought that's what you were going for in the OP but I see you were just talking generally about parsing rules.",
      "created_at": "2020-08-13T19:17:29Z",
      "updated_at": "2020-08-13T19:17:29Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "> It's pretty much exclusively _just_ a break with no upside aside from being a bit more technically correct\r\n\r\nI shall reveal the upside as soon as this is fixed.  It has to do with `PSReadline`.",
      "created_at": "2020-08-13T19:23:58Z",
      "updated_at": "2020-08-13T19:23:58Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "We have enough trouble getting breaks with demonstrated useful outcomes through a review. The chances of a breaking change being made for an unspecified and undefined \"benefit\" is precisely zero.",
      "created_at": "2020-08-13T19:58:00Z",
      "updated_at": "2020-08-13T19:58:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I believe this parser is complex enough to have a lot of such deviations. We have to start with real scenarios that don't work. For example this may have changed for a new DSL that uses this style.\r\nOtherwise it makes sense to add \"fixes\" with high risk to break something.",
      "created_at": "2020-08-14T03:31:23Z",
      "updated_at": "2020-08-14T03:31:23Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-08-15T12:00:09Z",
      "updated_at": "2020-08-15T12:00:09Z"
    }
  ],
  "created_at": "2020-08-12T23:20:52Z",
  "number": 13426,
  "state": "closed",
  "title": "Tokenisation should not respect operator rules in command parsing mode",
  "updated_at": "2020-08-15T12:00:11Z"
}