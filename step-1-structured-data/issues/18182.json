{
  "_url": "https://github.com/PowerShell/PowerShell/issues/18182",
  "author": "Liturgist",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nI understand that WMI is deprecated in favor of CIM. Why are WMI commands still listed in `Get-Command`?\r\n\r\n\n\n### Expected behavior\n\n```console\nGet-Command -Name '*wmi*' should not display unusable commands.\n```\n\n\n### Actual behavior\n\n```console\nPS C:\\> $PSVersionTable.PSVersion.ToString()\r\n7.2.6\r\nPS C:\\> Get-Command -Name '*-wmi*'\r\n\r\nCommandType     Name                                               Version    Source\r\n-----------     ----                                               -------    ------\r\nCmdlet          Get-WmiObject                                      3.1.0.0    Microsoft.PowerShell.Management\r\nCmdlet          Invoke-WmiMethod                                   3.1.0.0    Microsoft.PowerShell.Management\r\nCmdlet          Register-WmiEvent                                  3.1.0.0    Microsoft.PowerShell.Management\r\nCmdlet          Remove-WmiObject                                   3.1.0.0    Microsoft.PowerShell.Management\r\nCmdlet          Set-WmiInstance                                    3.1.0.0    Microsoft.PowerShell.Management\r\n\r\nPS C:\\> Get-WmiObject\r\nGet-WmiObject: The term 'Get-WmiObject' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\n```\n\n\n### Error details\n\n```console\nPS C:\\> Get-Error\r\n\r\nException             :\r\n    Type        : System.Management.Automation.CommandNotFoundException\r\n    ErrorRecord :\r\n        Exception             :\r\n            Type    : System.Management.Automation.ParentContainsErrorRecordException\r\n            Message : The term 'Get-WmiObject' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\n                      Check the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n            HResult : -2146233087\r\n        TargetObject          : Get-WmiObject\r\n        CategoryInfo          : ObjectNotFound: (Get-WmiObject:String) [], ParentContainsErrorRecordException\r\n        FullyQualifiedErrorId : CommandNotFoundException\r\n        InvocationInfo        :\r\n            ScriptLineNumber : 1\r\n            OffsetInLine     : 1\r\n            HistoryId        : 325\r\n            Line             : Get-WmiObject\r\n            PositionMessage  : At line:1 char:1\r\n                               + Get-WmiObject\r\n                               + ~~~~~~~~~~~~~\r\n            InvocationName   : Get-WmiObject\r\n            CommandOrigin    : Internal\r\n        ScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\n    CommandName : Get-WmiObject\r\n    TargetSite  :\r\n        Name          : LookupCommandInfo\r\n        DeclaringType : System.Management.Automation.CommandDiscovery, System.Management.Automation, Version=7.2.6.500, Culture=neutral,\r\nPublicKeyToken=31bf3856ad364e35\r\n        MemberType    : Method\r\n        Module        : System.Management.Automation.dll\r\n    Message     : The term 'Get-WmiObject' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\n                  Check the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n    Data        : System.Collections.ListDictionaryInternal\r\n    Source      : System.Management.Automation\r\n    HResult     : -2146233087\r\n    StackTrace  :\r\n   at System.Management.Automation.CommandDiscovery.LookupCommandInfo(String commandName, CommandTypes commandTypes, SearchResolutionOptions searchResolutionOptions,\r\nCommandOrigin commandOrigin, ExecutionContext context)\r\n   at System.Management.Automation.CommandDiscovery.TryModuleAutoDiscovery(String commandName, ExecutionContext context, String originalCommandName, CommandOrigin\r\ncommandOrigin, SearchResolutionOptions searchResolutionOptions, CommandTypes commandTypes, Exception& lastError)\r\n   at System.Management.Automation.CommandDiscovery.LookupCommandInfo(String commandName, CommandTypes commandTypes, SearchResolutionOptions searchResolutionOptions,\r\nCommandOrigin commandOrigin, ExecutionContext context)\r\n   at System.Management.Automation.ExecutionContext.CreateCommand(String command, Boolean dotSource)\r\n   at System.Management.Automation.PipelineOps.AddCommand(PipelineProcessor pipe, CommandParameterInternal[] commandElements, CommandBaseAst commandBaseAst,\r\nCommandRedirection[] redirections, ExecutionContext context)\r\n   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal[][] pipeElements, CommandBaseAst[]\r\npipeElementAsts, CommandRedirection[][] commandRedirections, FunctionContext funcContext)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\nTargetObject          : Get-WmiObject\r\nCategoryInfo          : ObjectNotFound: (Get-WmiObject:String) [], CommandNotFoundException\r\nFullyQualifiedErrorId : CommandNotFoundException\r\nInvocationInfo        :\r\n    ScriptLineNumber : 1\r\n    OffsetInLine     : 1\r\n    HistoryId        : 325\r\n    Line             : Get-WmiObject\r\n    PositionMessage  : At line:1 char:1\r\n                       + Get-WmiObject\r\n                       + ~~~~~~~~~~~~~\r\n    InvocationName   : Get-WmiObject\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\n```\n\n\n### Environment data\n\n```powershell\nPS C:\\> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.6\r\nPSEdition                      Core\r\nGitCommitId                    7.2.6\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "Can you show output of `Get-Command 'Get-WmiObject' | Select-Object *`? It should show where the command is supposedly located. Also, try running `Get-Help 'Get-WmiObject'`, maybe `Get-Command` is confused by some leftover help files. ",
      "created_at": "2022-09-28T21:46:38Z",
      "updated_at": "2022-09-28T21:46:38Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "Because WMI cmdlets are unavailable in \"Core\". Instead use `Get-CimInstance`\r\n```\r\nGet-Command *-Cim*\r\n```",
      "created_at": "2022-09-28T22:30:30Z",
      "updated_at": "2022-09-28T22:30:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> 3.1.0.0\r\n\r\nThis explicitly says that comes from Windows PowerShell.",
      "created_at": "2022-09-29T03:07:16Z",
      "updated_at": "2022-09-29T03:07:16Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> Because WMI cmdlets are unavailable in \"Core\". Instead use `Get-CimInstance`\r\n> \r\n> ```\r\n> Get-Command *-Cim*\r\n> ```\r\nThe OP covered that CIM has replaced WMI. We all know that , but  `Get-Command` is still giving him WMI commands\r\n\r\nOn my system `Get-Command -Name '*-wmi*'` returns nothing, so I have a feeling this is a PSModulePath issue more than a cmdlet one. \r\n\r\n@Liturgist  what does  $env:PSModulePath -split \";\"  show as being searched for modules. \r\n\r\n\r\n",
      "created_at": "2022-09-29T12:05:34Z",
      "updated_at": "2022-09-29T12:05:34Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> On my system Get-Command -Name '*-wmi*' returns nothing\r\n\r\nNothing on my system either, although `$env:PSModulePath` includes paths to Windows PowerShell modules. If you run `pwsh -noprofile` then wmi cmdlets will appear in the `Get-Command` list.\r\n\r\nProfile is `CurrentUserCurrentHost`. I think if profile file does not exist or not loaded then pwsh looks to Windows PowerShell modules.",
      "created_at": "2022-09-29T13:51:18Z",
      "updated_at": "2022-09-29T14:02:55Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "This issue can not be produced this morning. I do not know why. The question I posted was copy/paste from the machine. Closing.",
      "created_at": "2022-09-29T14:10:29Z",
      "updated_at": "2022-09-29T14:10:29Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "![image](https://user-images.githubusercontent.com/6187529/193813772-acf5115c-ce7c-4471-b3e4-c3771359c014.png)\r\n",
      "created_at": "2022-10-04T11:59:09Z",
      "updated_at": "2022-10-04T11:59:09Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "@fMichaleczek So you're saying you can reproduce it, but it's weirdly flaky? ",
      "created_at": "2022-10-04T13:52:00Z",
      "updated_at": "2022-10-04T13:52:00Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@dkaszews yes, it shows a bug \ud83d\ude42 ",
      "created_at": "2022-10-04T13:55:34Z",
      "updated_at": "2022-10-04T13:55:34Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "@fMichaleczek, could you try this with the current PowerShell Core 7.2.6? Does it produce the same bug?",
      "created_at": "2022-10-04T15:53:06Z",
      "updated_at": "2022-10-04T15:53:06Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@Liturgist 7.2.6 and 7.3.0-Preview.8 (I upgraded to the last preview) to be sure.",
      "created_at": "2022-10-04T16:27:15Z",
      "updated_at": "2022-10-04T16:27:15Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "@fMichaleczek, given that you can reproduce the bug, I will \"Reopen\" this item.",
      "created_at": "2022-10-04T16:54:42Z",
      "updated_at": "2022-10-04T16:54:42Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The problem appears to be that the WindowsCompat feature finds the cmdlet in the Windows PowerShell management module and shows it, but, of course, you can't use that module in PS7.  I think we should consider not having command discovery look at the core set of modules outside of $PSHOME.  ",
      "created_at": "2022-10-10T18:30:35Z",
      "updated_at": "2022-10-10T18:30:35Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I think we should consider not having command discovery look at the core set of modules outside of $PSHOME.\r\n\r\nHasn't that already been done? \ud83d\ude15 ",
      "created_at": "2022-10-11T17:25:53Z",
      "updated_at": "2022-10-11T17:25:53Z"
    }
  ],
  "created_at": "2022-09-28T17:14:04Z",
  "number": 18182,
  "state": "open",
  "title": "Get-WmiObject command listed but not recognized",
  "updated_at": "2022-10-11T17:25:53Z"
}