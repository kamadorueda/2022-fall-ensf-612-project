{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12607",
  "author": "scriptingstudio",
  "body": "I have found at least one difference how this method works with different types.\r\n\r\n```\r\n$array = 1,2,3,4,5,6\r\n$arraylist = [System.Collections.ArrayList]::new(@(1,2,3,4,5,6))\r\n$list = [System.Collections.Generic.List[object]]::new(@(1,2,3,4,5,6))\r\n\r\n$array.foreach{$_}\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n\r\n$arraylist.foreach{$_}\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n\r\n$list.foreach{$_}\r\n# nothing\r\n\r\n# workaround\r\n@($list).foreach{$_}\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n```\r\n\r\nIs it a type limitation, feature, or bug?\r\n`Foreach-Object` cmdlet works as expected.\r\n\r\n",
  "closed_at": "2020-05-08T15:49:10Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "No secrets here. Some confusion, though. \ud83d\ude42 \r\n\r\nThe `.Foreach()`\"magic\" method is only provided on objects that don't implement their own `.Foreach()` method; `System.Collections.Generic.List<T>` implements its own `Foreach()` method, so the magic method isn't available. You can check the overload definitions with `$list.Foreach`:\r\n\r\n```\r\nOverloadDefinitions\r\n-------------------\r\nvoid ForEach(System.Action[System.Object] action)\r\n```\r\n\r\nWithout getting too deep into it, you _can_ use these in PS, but you need to be mindful of how they behave. `Action<T>` has _no return type_ (it's a `void` method with one input, effectively), so no matter what you do you can't get it to provide output / return values, the type is defined to provide no return value. Typically `Func` is used for actions with return values, if I recall correctly, but `Action` indicates no return value.\r\n\r\nAlso, when handling C# `Action` or `Func`, I don't believe `$_` is typically defined; you usually need to use `$args` to handle that, or provide a `param()` block in your scriptblock to handle the input parameters to the Action or Func. In other words, this \"works\" (but provides no output as mentioned before):\r\n\r\n```ps1\r\n$list.Foreach{ Write-Host $args[0] }\r\n```\r\n\r\nSomething you _can_ do is use the `ConvertAll()` method instead, which does permit output values, but you need to cast the argument to the correct type deliberately, since it's a generic method and PS can't resolve that one on its own currently. Again, check overloads with `$list.ConvertAll` to see what you're dealing with, and something like this will work:\r\n\r\n```ps1\r\n# without param\r\n$list.ConvertAll([Converter[object, int]]{ $args[0] + 10 })\r\n\r\n# with param\r\n$list.ConvertAll(\r\n    [Converter[object,int]]{\r\n        param($item)\r\n        $item + 10\r\n    }\r\n)\r\n\r\n# both result in:\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n```",
      "created_at": "2020-05-08T12:06:06Z",
      "updated_at": "2020-05-08T12:11:29Z"
    },
    {
      "author": "scriptingstudio",
      "author_association": "NONE",
      "body": "@vexx32 thanks. I believe `@($list).foreach{$_}` is more simple solution.",
      "created_at": "2020-05-08T12:30:56Z",
      "updated_at": "2020-05-08T12:30:56Z"
    },
    {
      "author": "scriptingstudio",
      "author_association": "NONE",
      "body": "`.foreach` and `.where` methods are really confusing. Both return different from original collection type \r\n```\r\nSystem.Collections.Generic.List1[[System.Management.Automation.PSObject, System.Management.Automation, Ve\r\nrsion=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]\r\n```\r\n(backtick before \"1\" is lost)\r\nNew type corresponds by name to `generic.list` but with less amount of methods\r\n",
      "created_at": "2020-05-08T13:13:54Z",
      "updated_at": "2020-05-08T13:42:55Z"
    }
  ],
  "created_at": "2020-05-08T09:01:23Z",
  "number": 12607,
  "state": "closed",
  "title": "[Q] A .foreach magic method \"secret\"",
  "updated_at": "2020-05-08T15:49:11Z"
}