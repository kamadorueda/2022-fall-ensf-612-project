{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4112",
  "author": "daxian-dbw",
  "body": "Summary\r\n----------\r\nWhen test.psd1 file has 'FunctionToExport' or 'CmdletToExport' specified, the module script analyzer will skip parsing the module scripts and thus no type definitions would be retrieved back. and [`PSModuleInfo.GetExportedTypeDefinitions`](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/Modules/PSModuleInfo.cs#L553) doesn't handle this scenario well.\r\n\r\nRepro\r\n------\r\nStructure of the module 'test'\r\n```\r\nPS:146> tree.com F:\\tmp\\test /F\r\nF:\\TMP\\TEST\r\n    test.psd1\r\n    test.psm1\r\n```\r\nContent of 'test.psd1'\r\n```\r\n@{\r\nModuleVersion = '1.0'\r\nGUID = 'e812e452-6a43-4fe7-9738-375c2fbdd577'\r\nNestedModules = @(\"test.psm1\")\r\nFunctionsToExport = @('Get-Name')\r\nCmdletsToExport = @()\r\nVariablesToExport = '*'\r\nAliasesToExport = @()\r\n}\r\n```\r\nContent of 'test.psm1'\r\n```\r\nclass Foo\r\n{\r\n    [string] $Name = \"Foo\"\r\n}\r\n\r\nfunction Get-Name\r\n{\r\n    return \"Name\"\r\n}\r\n```\r\nContent of `run.ps1`\r\n```\r\nusing module F:\\tmp\\test\r\n\r\nclass Bar{\r\n    [Foo] $foo = [Foo]::new()\r\n\r\n    [void] Print()\r\n    {\r\n        Write-Host ($this.foo.Name)\r\n    }\r\n}\r\n```\r\nRun `run.ps1`\r\n```\r\n.\\run.ps1\r\n```\r\n\r\nExpected Behavior\r\n--------------------\r\nRunning `run.ps1` should be successful.\r\n\r\nActual Behavior\r\n-----------------\r\nIt failed\r\n```\r\nPS:14> .\\run.ps1\r\nAt F:\\tmp\\run.ps1:4 char:6\r\n+     [Foo] $foo = [Foo]::new()\r\n+      ~~~\r\nUnable to find type [Foo].\r\nAt F:\\tmp\\run.ps1:4 char:19\r\n+     [Foo] $foo = [Foo]::new()\r\n+                   ~~~\r\nUnable to find type [Foo].\r\n    + CategoryInfo          : ParserError: (:) [], ParseException\r\n    + FullyQualifiedErrorId : TypeNotFound\r\n```\r\n\r\nEnvironment\r\n--------------\r\n```\r\nPS:15> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-beta\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-beta.2-48-g598cebf7b2f0b5bb0b0add97c6393ccfaaa792f5-dirty\r\nOS                             Microsoft Windows 10.0.15063\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I believe this was part of a perf optimization @lzybkr made to avoid parsing scripts.  We need a `TypesToExport` to continue to enforce explicit exports and maintain perf",
      "created_at": "2017-06-27T00:05:12Z",
      "updated_at": "2017-06-27T00:05:12Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Actually this was a design issue - the intent was to not require specifying exported types in the manifest at all because, well, it's annoying.\r\n\r\nI didn't implement this aspect of classes, but I thought we intended to compute exported types on demand, and cache the results to avoid redundant parsing.",
      "created_at": "2017-06-27T00:16:53Z",
      "updated_at": "2017-06-27T00:16:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Was it a breaking change? Was it ported to Windows PowerShell? If so and it was not documented we should mark the Issue as breaking change and enhancement.",
      "created_at": "2017-06-28T09:15:28Z",
      "updated_at": "2017-06-28T09:17:31Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov I believe the changes being discussed happened during Windows PowerShell and ended up in PSCore6",
      "created_at": "2017-06-28T22:54:26Z",
      "updated_at": "2017-06-28T22:54:26Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Since it may not be obvious, let me point out that the problem only surfaces if you use the `NestedModules` entry to reference the `*.psm1` file.\r\n\r\nIn the given scenario it would be more typical to use  the `RootModule` entry, however, in which case everything works as expected.\r\n",
      "created_at": "2018-07-14T21:30:10Z",
      "updated_at": "2018-07-14T21:30:10Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Isn't the root cause that only classes in the **RootModule** are _supposed_ to be available.\r\nI don't think this is a separate bug. It's either a design choice, or a duplicate of #2964 \r\n",
      "created_at": "2018-12-05T18:54:35Z",
      "updated_at": "2018-12-05T18:55:55Z"
    }
  ],
  "created_at": "2017-06-26T23:42:12Z",
  "number": 4112,
  "state": "open",
  "title": "`using module test` doesn't load the powershell class defined in 'test' if 'test.psd1' has 'FunctionToExport' or 'CmdletToExport' specified",
  "updated_at": "2018-12-05T18:55:55Z"
}