{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4056",
  "author": "SteveL-MSFT",
  "body": "With moving to .Net Std 2.0 and the PR to enable PSCore6 to load assemblies from the GAC, the missing piece to enable PSCore6 to replace the need for Windows PowerShell (majority of scenarios anyways) is to make it simpler for users to find and use in-box Windows modules.  Currently, PSCore6 has no knowledge of the legacy Windows PowerShell PSModulePath.  Since we know we don't have 100% compatibility with in-box modules (PSSnapIns, for example are not supported at all), it seems we should consider an opt-in approach.  Alternatively, maybe we should have a `Windows Compat` module that has a whitelist of validated modules that work with PSCore6?\r\n\r\ncc @joeyaiello @HemantMahawar ",
  "closed_at": "2017-08-24T03:20:14Z",
  "comments": [
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "In my mind, I've been thinking like:\r\n* short-term is to finish startup config and put a value in there that concatenates Windows PS PSModulePath\r\n* long-term is the compat module that helps with whitelists and warnings\r\n\r\nWe should do short-term, I think, before 6.0. ",
      "created_at": "2017-06-20T18:00:36Z",
      "updated_at": "2017-06-20T18:00:36Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "having a setting in StartupConfig is fine as a brute force way to get people to help us test compatibility, the compat module is something we can do separate from PSCore6 in the gallery perhaps and ideally driven by the community :)",
      "created_at": "2017-06-20T20:08:41Z",
      "updated_at": "2017-06-20T20:08:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We could add `-LegacyModules` switch to `Import-Module` cmdlet on Windows to enable search in  legacy Windows PowerShell PSModulePath-s. Also it allow use `$PSDefaultParameterValues`.",
      "created_at": "2017-06-21T15:06:10Z",
      "updated_at": "2017-06-21T15:15:20Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov it's not just `Import-Module`, but also `Get-Module -ListAvailable`.  `-ListLegacyModules` might be ok as the long term we want everyone to have modules compatible with PSCore as well as available in the PSGallery.",
      "created_at": "2017-06-21T16:05:27Z",
      "updated_at": "2017-06-21T16:05:27Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Current thinking is to have this enabled by default (using a system default profile) in next beta release to make it easier to get user feedback.  As we get closer to a release candidate, we'll make this opt-in.",
      "created_at": "2017-06-28T15:37:14Z",
      "updated_at": "2017-06-28T15:37:14Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "For beta.4 we're adding a default profile to add Windows PowerShell path.  Based on customer feedback, we'll decide in a later beta whether we should continue to do this and what the implementation should look like",
      "created_at": "2017-07-13T15:34:32Z",
      "updated_at": "2017-07-13T15:34:32Z"
    },
    {
      "author": "alexandair",
      "author_association": "CONTRIBUTOR",
      "body": "This change doesn't make sense on new Nano Server container.\r\n This is what you see when you start microsoft/nanoserver-insider-powershell:\r\n\r\n\"WARNING: Appended Windows PowerShell PSModulePath\"\r\n```\r\nPS C:\\> $env:psmodulepath -split ';'\r\nPowerShell\\Modules\r\nc:\\program files\\powershell\\Modules\r\nC:\\Users\\ContainerUser\\Documents\\WindowsPowerShell\\Modules\r\nC:\\Program Files\\WindowsPowerShell\\Modules\r\nC:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\\r\n```\r\n\r\n3 of those 5 paths are unnecessary on new Nano Server.\r\n",
      "created_at": "2017-07-17T16:52:16Z",
      "updated_at": "2017-07-17T16:52:16Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Based on the initial feedback, I think it makes sense to have the Windows PowerShell PSModulePath added by default as many modules just work (or seem so without exhaustive testing):\r\n- [ ] Implement in the console host instead of userprofile\r\n- [ ] Make configurable in startup json\r\n- [ ] Blacklist or whitelist Windows PowerShell modules\r\n\r\nThis should also resolve https://github.com/PowerShell/PowerShell/issues/4339",
      "created_at": "2017-07-25T00:42:12Z",
      "updated_at": "2017-07-25T00:47:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What if no console?",
      "created_at": "2017-07-25T09:32:12Z",
      "updated_at": "2017-07-25T09:32:12Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "In the no console (using PowerShell as library) case, the app is expected to manage the module paths.",
      "created_at": "2017-07-25T19:58:40Z",
      "updated_at": "2017-07-25T19:58:40Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Questions we need to answer:\r\n* default behavior in 6.0 (in the future, we probably can't remove the Windows PS because it's a breaking change)\r\n* how do we expose changing it? (user profile, startup JSON, cmdlet, PS variable etc.)\r\n  * specifically is something like `Enable-WindowsPSModulePath` sufficient for 6.0? \r\n* is a whiltelist/blacklist desirable",
      "created_at": "2017-08-22T22:17:10Z",
      "updated_at": "2017-08-22T22:17:10Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "After some discussion with my engineering team, I think the proposal for the 6.0.0 timeframe is to have a single cmdlet `Enable-WindowsPSModulePath` that users explicitly use to opt-in.  All it does is the equivalent of what the interim solution does in the user profile.  The primary reason to switch to opt-in is that we know many FullCLR modules don't work and we don't have time to work with partner teams to validate ones that partially work giving a false impression to the user if they show up by default with `Get-Module -ListAvailable`.",
      "created_at": "2017-08-23T21:08:35Z",
      "updated_at": "2017-08-23T21:08:35Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@PowerShell/powershell-committee closed on shipping either an `Enable-WindowsPSModulePath` or `Add-WindowsPSModulePath` on the Gallery (and not the engine). Reasoning:\r\n* we don't want to expose a bunch of modules that don't work yet\r\n* in the future, we *can* expose modules that are known to work within PS 6.0/.NET Core 2.0\r\n* this feels like a bit of a hack, and we don't want to be tied to keeping it forever\r\n* there's still value in easily adding your Windows PSModulePath",
      "created_at": "2017-08-23T23:57:48Z",
      "updated_at": "2017-08-23T23:57:48Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "https://www.powershellgallery.com/packages/WindowsPSModulePath/1.0.0",
      "created_at": "2017-08-24T03:00:03Z",
      "updated_at": "2017-08-24T03:00:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I suggest start with _white list_ of Windows PowerShell modules which we want to enable to load from Windows PowerShell module paths. The white list should contains only tested and approved modules.\r\nHence we dont need new cmdlets - we can  implicitly use Windows PowerShell module paths (not in PSModulePath) and enhance Import-Module to check the white list _after_ module search in PSModulePath.",
      "created_at": "2017-08-24T05:13:14Z",
      "updated_at": "2017-08-24T05:13:14Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Long term, we may have a whitelist, but within the 6.0.0 timeframe, partner teams won't be able to validate compatibility with PSCore6 so the cmdlet is a stop gap solution.",
      "created_at": "2017-08-24T05:30:11Z",
      "updated_at": "2017-08-24T05:30:11Z"
    },
    {
      "author": "brwilkinson",
      "author_association": "NONE",
      "body": "Can't you just stop modules from loading (in PSCore6) unless the correct information is published in the Module manifest ? \r\n\r\nClrVersion, DotNetFrameworkVersion, PowerShellHostVersion, PowerShellVersion\r\n\r\n\r\n- Minimum version of the Windows PowerShell engine required by this module\r\nPowerShellVersion = ''\r\n\r\n- Name of the Windows PowerShell host required by this module\r\n PowerShellHostName = ''\r\n\r\n- Minimum version of the Windows PowerShell host required by this module\r\n PowerShellHostVersion = ''\r\n\r\n- Minimum version of Microsoft .NET Framework required by this module. This prerequisite is valid for the PowerShell Desktop edition only.\r\nDotNetFrameworkVersion = ''\r\n\r\n- Minimum version of the common language runtime (CLR) required by this module. This prerequisite is valid for the PowerShell Desktop edition only.\r\nCLRVersion = ''\r\n\r\n\r\nAny modules with that info will not load down level so that should be safe?! e.g. PowerShellVersion ='6.0'\r\n\r\nPerhaps rewrite the Get-Module -ListAvailable Cmdlet (in PSCore6) so it only shows up modules with the correct manifest info. Add a Force parameter for people to bypass the safe behavior and allow them to view all modules.\r\n\r\nDo the same thing for Import-Module. Force will allow them to load any module.\r\n\r\nI don't know enough about module autoloading to know what might be needed there, however I am sure it can also use the same information?\r\n\r\nPerhaps this overhead would cause some performance issues ? However ideally people will remove any non PSCore6 modules from their machines over time. Obviously that is the goal anyway.\r\n\r\nIf this was the behavior then, you would publish PSModulePath by default in PSCore6.\r\n",
      "created_at": "2017-08-26T00:51:16Z",
      "updated_at": "2017-08-26T00:51:56Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Guys!\r\n\r\nLong before the implementation of:  Appended Windows PowerShell PSModulePath in PoweeShell Core, I mention its was a bad idea and knowing that Windows PowerShell fullCLR is not supported in PowerShell Core, \r\n\r\nWe should not include Windows PowerShell modules in PowerShell Core PSModulePath,  In my own opinion we should keep it separate,\r\n\r\nOr at least give an option to turned it off.  \r\n\r\n:)\r\n\r\n\r\n",
      "created_at": "2017-08-26T01:14:44Z",
      "updated_at": "2017-08-26T01:14:44Z"
    }
  ],
  "created_at": "2017-06-20T16:53:23Z",
  "number": 4056,
  "state": "closed",
  "title": "PSCore6 should have a way to use Windows PowerShell PSModulePath",
  "updated_at": "2017-08-26T01:14:44Z"
}