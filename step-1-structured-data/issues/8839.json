{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8839",
  "author": "vexx32",
  "body": "# Summary of the new feature/enhancement\r\n\r\nSimply put, rather than:\r\n```\r\nInvoke-Command $sb -ArgumentList $arg1, $arg2\r\n```\r\n\r\nI would like to be able to do:\r\n```powershell\r\nInvoke-Command $sb -Parameters @{NamedArg = $value1; Switch = $true}\r\n```\r\n\r\n(note that currently it's _impossible_ to call a scriptblock with a `[switch]` parameter as they cannot be passed positionally; this would serve to resolve that, effectively, while permitting more complex functions)\r\n\r\nThis would enable a function to do something _very_ amusing, like so:\r\n```powershell\r\nInvoke-Command -ComputerName testPC -Scriptblock $MyInvocation.MyCommand.ScriptBlock -Parameters $PSBoundParameters\r\n```\r\n\r\nNot that that's really my use case, just thought it was fun! I'm mostly interested in giving `Invoke-Command` more robust function calling capability so we can call local functions in a remote session more easily, a la:\r\n\r\n```powershell\r\nInvoke-Command -ScriptBlock ${function:Test-Function} -Parameters $Params -ComputerName RemotePC\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "DHowett",
      "author_association": "NONE",
      "body": "Something like this might already be possible with [splatting](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_splatting?view=powershell-6):\r\n\r\n```\r\n% $Params=@{\"LiteralPath\" = \"C:\\\"; \"Hidden\" = $true;}; invoke-command -ScriptBlock { Get-ChildItem @Params }\r\n\r\n\r\nC:\\\r\n\r\nd--hs-        2/13/2017  10:23 PM                $RECYCLE.BIN\r\nd--h--         2/3/2019   3:23 PM                $WINDOWS.~BT\r\nd--hs-         2/4/2019   5:07 PM                Config.Msi\r\nd--hsl        8/25/2016   8:17 PM                Documents and Settings\r\nd--h--       11/17/2018   6:36 PM                ProgramData\r\nd--h--        9/18/2018   5:32 PM                Recovery\r\nd--hs-        9/22/2017   5:53 PM                System Volume Information\r\n-a-hs-         2/4/2019   4:54 PM     6840606720 hiberfil.sys\r\n-a-hs-         2/4/2019   4:54 PM     2550136832 pagefile.sys\r\n-a-hs-         2/4/2019   4:54 PM       16777216 swapfile.sys\r\n```\r\n\r\nYour last example might be possible by pasting the body of the function into a new function on the other end and splatting args against the _new_ remote function. I tried to get that working, but in the limited time I allocated to prototyping I couldn't.",
      "created_at": "2019-02-06T17:08:42Z",
      "updated_at": "2019-02-06T17:08:42Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yes @DHowett this can be done, but the syntax for doing so is _decidedly_ more irritating to use!\r\n\r\nExample:\r\n```powershell\r\n$Parameters = @{Param1 = $Value; Switch = $true}\r\nInvoke-Command -ComputerName RemotePC -ScriptBlock {\r\n    New-Item Function:\\TempFunc -Value ${using:function:my-function} > $null\r\n    TempFunc @using:Parameters\r\n}\r\n```\r\n\r\nBeing how relatively easy this is to accomplish in any case, Invoke-Command should just support it out of the box in my opinion.",
      "created_at": "2019-02-06T17:14:30Z",
      "updated_at": "2019-02-06T17:14:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 Do you see the RFC? \r\nhttps://github.com/PowerShell/PowerShell-RFC/blob/e09b14fe01b636ea38260da9e70ff024dc32936b/2-Draft-Accepted/RFC0002-Generalized-Splatting.md",
      "created_at": "2019-02-08T11:28:40Z",
      "updated_at": "2019-02-08T11:28:40Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov yeah, I've been following along with that one.\r\n\r\nThis is less about splatting itself and more about how `Invoke-Command` doesn't support passing parameters to its script block by name, only by position with `-ArgumentList`. ",
      "created_at": "2019-02-08T11:32:49Z",
      "updated_at": "2019-02-08T11:33:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The RFC targets \"Splatting in method invocations\" too. If it doesn't resolve your request we need to enhance the RFC I believe.",
      "created_at": "2019-02-08T11:40:04Z",
      "updated_at": "2019-02-08T11:40:04Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That portion of the RFC is designed to be used specifically with .NET methods. For example:\r\n\r\n```powershell\r\n[System.IO.File]::ReadAllBytes@@{Path = 'C:\\test.txt' }\r\n```\r\n\r\nThe fact that Invoke-Command as a Cmdlet itself only supports passing positional arguments to the script block parameter when it invokes is a separate issue.",
      "created_at": "2019-02-08T11:48:17Z",
      "updated_at": "2019-02-08T11:48:41Z"
    },
    {
      "author": "anthbro",
      "author_association": "NONE",
      "body": "I am having this issue too and splatting is not the issue...  Not accepting named arguments is the issue.",
      "created_at": "2020-02-26T06:39:58Z",
      "updated_at": "2020-02-26T06:39:58Z"
    },
    {
      "author": "justin-romano",
      "author_association": "NONE",
      "body": "Hey Guys, This is a real issue with scripts as it is easy to get the order of parameters wrong and write bad scripts.  The ideal solution, to me, would look like this\r\n```powershell\r\n$args = @{\r\n    P1 = 1\r\n    P3 = 3\r\n    P2 = 2\r\n}\r\n\r\nInvoke-Command -ScriptBlock{\r\n    param($P1, $P2, $P3)\r\n    Write-Host \"$P1 $P2 $P3\"\r\n} -ArgumentList @args -Session $somesession\r\n```\r\nif you have a script with lots of parameters you want to call on another session, you are in for ugly brittle code ;-)\r\nalso maybe \r\n```powershell\r\nInvoke-Command -FilePath d:\\scripts\\someFile.ps1 -ArgumentList @args -Session $somesession\r\n```",
      "created_at": "2020-08-27T06:04:16Z",
      "updated_at": "2020-08-27T06:07:05Z"
    }
  ],
  "created_at": "2019-02-06T16:36:21Z",
  "number": 8839,
  "state": "open",
  "title": "Feature Request - Invoke-Command should support passing parameters as a hashtable",
  "updated_at": "2020-08-27T06:07:05Z"
}