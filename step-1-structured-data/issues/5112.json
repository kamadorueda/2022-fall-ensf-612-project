{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5112",
  "author": "markekraus",
  "body": "# Problem\r\n\r\nIn #5052 we are introducing the new `-Authentication` parameter which include a terminating error when any scheme other than `https://` is provided in the URI. The legacy `-Credential` usage currently does not offer any warnings or errors when the secrets are sent over an unencrypted connection. \r\n\r\nThis issue is to track and discuss which method to go with.\r\n\r\n# Possible Solutions\r\n\r\n## Add a warning\r\nThis solution would add a warning message (via `WriteWarning()`) that the use could suppress with the `-AllowUnencryptedAuthentication` parameter. This would likely be a non-breaking change that would simply the user politely when they use the legacy `-Credential` and something other than `'https://`\r\n\r\n## Add an Error\r\nThis is similar to the previous but instead return an error. This could be a terminating or non-terminating error, but either would be a breaking change. A common usage of the web cmdlets is to use `-ErrorAction Stop` in a try/catch and this would introduce new stops for previously working code if users were sending credentials over HTTP before\r\n\r\n## Remove the legacy `-Credential` usage.\r\nThe new `-Authentication` usage has some duplication of functionality in that it does the same thing on its `Basic` option as the legacy `-Credential` usage. Legacy `-Credential` would only sent the Authorization header when the server present an Authorization request where the new method always sends the Authorization header (as many OAuth systems do not present auth realm).  This would require some discovery and clean up. I think this is the ultimate choice, but probably not a good candidate for 6.0.0 RTM.",
  "closed_at": "2017-11-10T16:11:58Z",
  "comments": [
    {
      "author": "dragonwolf83",
      "author_association": "NONE",
      "body": "The wording of `-AllowUnencryptedAuthentication` doesn't make sense for Warning. By issuing a warning, you are by default allowing unencrypted. I propose an `-IgnoreUnencryptedWarning` should be used if Warning is chosen. The Error proposal should continue with `-AllowUnencryptedAuthentication`.",
      "created_at": "2017-10-13T20:24:39Z",
      "updated_at": "2017-10-13T20:24:39Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": " I disagree with `-IgnoreUnencryptedWarning`. `-AllowUnencryptedAuthentication` will already be present and there is no need to add a second parameter to do the same thing. There were already discussions and back and forth on `-AllowUnencryptedAuthentication` and I think that debate does not need to be revisited. ",
      "created_at": "2017-10-13T20:29:26Z",
      "updated_at": "2017-10-13T20:30:07Z"
    },
    {
      "author": "dragonwolf83",
      "author_association": "NONE",
      "body": "`-AllowUnencryptedAuthentication` is a parameter switch to do what exactly? I thought it was a new parameter that was pulled out from previous PR specifically for this discussion of whether a Warning or Error should happen if no parameter is specified.\r\n\r\nWhat I'm suggesting is that for Warning Proposal, it is very confusing and doesn't make any sense. If I run `Invoke-WebRequest -Credential` and it works with a warning displayed then you have by default allowed it to happen. So why would I need to set `-AllowUnencryptedAuthentication`? I never would.\r\n\r\nNow, if you want `Confirmation` to happen so the user interactively chooses yes or no. Then it makes sense to have an `-AllowUnencryptedAuthentication` switch to hide confirmation and choose yes.\r\n\r\nError Proposal is fine, I just think the wording doesn't make sense if credentials are still sent with just a warning let the user know it happened. \r\n\r\n\r\n\r\n",
      "created_at": "2017-10-13T20:51:40Z",
      "updated_at": "2017-10-13T20:51:40Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "> What I'm suggesting is that for Warning Proposal\r\n\r\nAnd what I'm saying is there is no point in having yet another parameter that does the same thing. If `-AllowUnencryptedAuthentication` didn't already exist, then yea, maybe something else. But there is no point in two parameters doing the same thing. Seeing both `-IgnoreUnencryptedWarning` and `-AllowUnencryptedAuthentication` would be awkward.\r\n\r\nThe warning would be temporary. The end game is removing the legacy usage, IMO. For that temporary period of time having using the same parameter even if the wording doesn't suit everyone, is better than adding another parameter that will just end up being removed.",
      "created_at": "2017-10-13T21:15:57Z",
      "updated_at": "2017-10-13T21:16:39Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "> `-AllowUnencryptedAuthentication` is a parameter switch to do what exactly? \r\n\r\nThe new `-Authentication` parameter options give a terminating error for non-https and can only by suppressed with `-AllowUnencryptedAuthentication`.",
      "created_at": "2017-10-13T21:20:16Z",
      "updated_at": "2017-10-13T21:20:16Z"
    },
    {
      "author": "dragonwolf83",
      "author_association": "NONE",
      "body": "I think you are separating out logic that shouldn't be separated. `-Credential` and `-Authentication` behavior should match when sent over unencrypted. I think that is where my confusion is coming in. Having one error by default and the other give a warning would be inconsistent. So either both error, both warn, or both ask confirmation. Maybe that is what your 3rd proposal about `-Credential` is about?\r\n\r\nAlso, you are not proposing removing the `-Credential` parameter right, just cleaning up the code on how it used?",
      "created_at": "2017-10-13T21:37:59Z",
      "updated_at": "2017-10-13T21:37:59Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "> I think you are separating out logic that shouldn't be separated. \r\n\r\n> Having one error by default and the other give a warning would be inconsistent. \r\n\r\nThat's to avoid a breaking change now. Ultimately, there will be a breaking change. But, we can go this route with a warning temporarily an avoid breaking it until we have to.\r\n\r\n> Maybe that is what your 3rd proposal about -Credential is about?\r\n\r\nThat's exactly it. Basically, `-Credential` has 2 uses now. The legacy use where it is just `-Credential` and the new use where it is `-Authentication Basic -Credential`. The legacy use only sends the `Authorization` header when a web server has issues a `401` and `WWW-Authenticate: Basic realm=<realm>`. Many APIs and OAuth grant flows require `Basic` auth without the `401` or `WWW-Authenticate: Basic `. The legacy never errors. The new usage allows for sending the `Authorization` header always and it gives a terminating error when you try anything other that HTTPS unless you provide the switch.\r\n\r\nMy goal (what I think is the right direction) is to remove the legacy usage and just standardize on the `-Authentication`  parameter. That way we can add more authentication methods which may or may not use the `-Credential` parameter (such as OAuth/Bearer use of `-Token`). But that is not a trivial task. For one it is a significant breaking change and for another there is a lot of code cleanup associated with it. So getting that done before 6.0.0 RTM when it's not really a priority is unlikely.\r\n\r\nSo that is what the 3rd option is about. It's more of a \"do nothing until we do it right and when we can doit right, this is how\". But I would rather up the security game in the Web Cmdlets *before* 6.0.0 RTM even if some of those measure are temporary.\r\n\r\n> Also, you are not proposing removing the -Credential parameter right, just cleaning up the code on how it used?\r\n\r\nNo, it will stay. But, to use it, in the future you will need to supply `-Authentication Basic` (or maybe a few other flavors of `-Authentication <option>` which haven't been discussed yet). For now, the legacy behavior is left in. ",
      "created_at": "2017-10-13T22:03:02Z",
      "updated_at": "2017-10-13T22:07:23Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Digging into this a bit, removing the legacy usage isn't as simple and I thought. HttpClient apparently does some magic authentication for Basic, NTLM, and Digest using these credentials and it handles some automated detection and resolution, something I'd rather not bring into the web cmdlets. Might be able to get as way with a `-Authentication BuiltIn` or something like that.",
      "created_at": "2017-10-15T15:28:21Z",
      "updated_at": "2017-10-15T15:28:21Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this.  desire is that we can use `-Authentication Negotiate` (which is default for compat reasons) to handle the builtin dotnet auth.  and throwing a terminating error (telling them about `-AllowEncryptedAuthentication` switch) if `-url` is \"http:\" if `-AllowUnencryptedAuthentication` is not used.",
      "created_at": "2017-11-08T23:45:11Z",
      "updated_at": "2017-11-08T23:45:11Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT I'm a bit confused about how to implement this. You are saying to add a `Negotiate` option, make it default (replacing `None` as default) having `-Credential` by it self work with out specifying auth because `Negotiate` is default. but... how is it supposed to distinguished between the user doing `irm -Auth negotiate $uri` and not supplying a `-Credential` and just `irm $uri`? The logic for this will be really ugly unless I'm misunderstanding.",
      "created_at": "2017-11-09T00:18:29Z",
      "updated_at": "2017-11-09T00:18:29Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@markekraus yeah, that detail was missed in the discussion.  I think the way to implement this is:\r\n  \r\n  - `-credential` is a parameterset (let's call it \"credential\") along with `-auth`\r\n  - default w/o `-auth` is none (aka anonymous)\r\n  - `-credential` w/ `-auth none` is a runtime check and terminating error\r\n  - `-allowunencryptedauthentication` is required if `-url` starts with `http:`\r\n  - `-auth negotiate` is default for parameter set \"credential\"\r\n",
      "created_at": "2017-11-09T00:54:57Z",
      "updated_at": "2017-11-09T00:54:57Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I don't think a parameter can have default value on a per-parameterset basis.\r\n\r\nThe way I would do this change is to break the `iwr -uri $uri -Credential $creds` usage and make `-Credential` require that either `-Auth negotiate` or `-Auth basic` be present:\r\n\r\n```powershell\r\n$url = 'https://contoso.com'\r\n\r\n# results in an error about requiring -Authentication Basic|Negotiate\r\niwr -uri $uri -Credential $creds\r\n#Error\r\n\r\n# Result in error requiring -Credential\r\niwr -uri $uri -Auth Negotiate\r\n#Error\r\n\r\n# default is still None for -Authentication so this works\r\niwr -uri $uri\r\n#Success!\r\n\r\n# non-https uri errors:\r\n$url = 'http://contoso.com'\r\niwr -uri $uri -Authentication Negotiate -Credential $creds\r\n#Error\r\n\r\n# only ways to use -Credential \r\n$url = 'https://contoso.com'\r\niwr -uri $uri -Authentication Negotiate -Credential $creds\r\n#Success!\r\niwr -uri $uri -Authentication Basic -Credential $creds\r\n#Success!\r\n\r\n# -UseDefaultCredentials cannot be use with any auth so these error:\r\niwr -uri $uri -UseDefaultCredentials -Authentication Negotiate\r\n#Error\r\niwr -uri $uri -UseDefaultCredentials -Authentication Basic\r\n#Error\r\niwr -uri $uri -UseDefaultCredentials -Authentication OAuth\r\n#Error\r\niwr -uri $uri -UseDefaultCredentials -Authentication Bearer\r\n#Error\r\n\r\n# -UseDefaultCredentials can be used with -Authentication none or alone:\r\niwr -uri $uri -UseDefaultCredentials -Authentication None\r\n#Success!\r\niwr -uri $uri -UseDefaultCredentials\r\n#Success!\r\n\r\n# -UseDefaultCredentials errors on no-https url:\r\n$url = 'https://contoso.com'\r\niwr -uri $uri -UseDefaultCredentials -Authentication None\r\n#Error\r\niwr -uri $uri -UseDefaultCredentials\r\n#Error\r\n\r\n\r\n# Alternatively -UseDefaultCredentials could be used with only -Authentication Negotiate\r\n# this gives -Authentication Negotiate the choice of -Credential or -UseDefaultCredential\r\n$url = 'https://contoso.com'\r\niwr -uri $uri -UseDefaultCredentials -Authentication None\r\n#Error\r\niwr -uri $uri -UseDefaultCredentials\r\n#Error\r\niwr -uri $uri -UseDefaultCredentials -Authentication Negotiate\r\n#Sucess!\r\niwr -uri $uri -Authentication Negotiate -Credential $creds\r\n#Success!\r\n```\r\n\r\nOtherwise, I'm at a complete loss on how to implement.",
      "created_at": "2017-11-09T01:20:41Z",
      "updated_at": "2017-11-09T01:46:39Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@markekraus since this deviated a bit from the original expectation from the Committee, let me bring it back up.  ",
      "created_at": "2017-11-09T01:34:19Z",
      "updated_at": "2017-11-09T01:34:19Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks! I would have had a more fleshed out proposal for this.. but I didn't plan on breaking this until later, all I wanted for now was possibly an error on `-Credential`/`-UseDefaultCredential` on http. but if we are going to break it.. we might as well break it all the way.",
      "created_at": "2017-11-09T01:38:05Z",
      "updated_at": "2017-11-09T01:38:05Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Can we do this?  `-Auth` is `Default` if not specified, but meaning of `Default` changes depending on whether `-Cred` is used.  No cred `Default = none`, with cred `Default = negotiate`.  There is no explicit none or negotiate for `-Auth`.",
      "created_at": "2017-11-09T02:00:06Z",
      "updated_at": "2017-11-09T02:00:06Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@markekraus I'm actually fine with the full break proposal you made, but I think we need another +1. \r\n\r\n@SteveL-MSFT that seems a bit harder to follow intuitively. The error messages would have to be really good if we went that route. :) ",
      "created_at": "2017-11-09T02:42:45Z",
      "updated_at": "2017-11-09T02:42:45Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT My objection to doing that kind of logic (`Default`'s behavior changing on whether `Credential` is provided or not) is that it relies on checking for bound parameters as opposed to Parameter value. It's also complicated by `-UseDefaultCredential`. if we could use parameter sets with the cmdlets, this might have been ok except that it would result in the need for 12 more parameter sets (at least).  It's basically the same reason i was against using `Negotiate` as the default. It leads to a bunch of ugly hacky logic that would normally be offloaded to the parameter binding.\r\n\r\nI also agree with @joeyaiello that its a bit tough to follow. both from a coding and a user perspective. ",
      "created_at": "2017-11-09T09:54:46Z",
      "updated_at": "2017-11-09T09:54:46Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Perhaps for now, the best thing to do is simply return an error if `-AllowUnencryptedAuth` isn't used and the `-URI` is http.  Let's leave the other discussion for now which means we'll just have to have that inconsistency.",
      "created_at": "2017-11-09T17:05:33Z",
      "updated_at": "2017-11-09T17:05:33Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT that is certainly my minimum ask. \r\n\r\nThe breaking change for `-Credential`, is that something that would be possibly for 6.1/6.2? or is that something that would need to tabled until the next major version?",
      "created_at": "2017-11-09T17:53:33Z",
      "updated_at": "2017-11-09T17:53:33Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@markekraus ideally, I'd like to have telemetry in the future to show that only a small set of customers were using the legacy `-Credential` with PSCore6 so we can deprecate it and eventually remove it.  At this point, we can worry about that later and accept a possibility that we have to just live with it.",
      "created_at": "2017-11-09T17:59:48Z",
      "updated_at": "2017-11-09T17:59:48Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT my only fear is that the situations where `-Credential` and `-UseDefaultCredentials` would be used also don't lend themselves well to telemetry: internal applications. They are currently the only means for NTLM and Digest authentication and those kinds of sites and the automation working against them may not have internet access to dial home. I'd rather keep it by breaking the current usage and move it to the new `-Authentication` usage than to break access to legacy systems. *shrugs\r\n\r\nBut, I'm OK with a PR for just the error on non-https `-Uri` without `-AllowUnencryptedAuth` for now and living with the legacy behavior.",
      "created_at": "2017-11-09T18:29:07Z",
      "updated_at": "2017-11-09T18:29:07Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "#5402 for the non-HTTPS `-Credential` (legacy) and `-UseDefaultCredentials` errors ",
      "created_at": "2017-11-10T00:56:39Z",
      "updated_at": "2017-11-10T00:56:39Z"
    }
  ],
  "created_at": "2017-10-13T19:42:22Z",
  "labels": [
    "Issue-Enhancement",
    "Issue-Discussion",
    "Resolution-Fixed",
    "Breaking-Change",
    "WG-Cmdlets-Utility"
  ],
  "number": 5112,
  "state": "closed",
  "title": "Web Cmdlets should warn when  legacy -Credential is sent over unencrypted connections",
  "updated_at": "2017-11-12T18:11:44Z"
}