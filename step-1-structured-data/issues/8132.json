{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8132",
  "author": "sdwheeler",
  "body": "_From @YuriySamorodov on October 26, 2018 10:46_\n\n<!--\r\nIf this doc issue is for content OUTSIDE of /reference folder (such as DSC, WMF etc.), there is no need to fill this template. Please delete the template before submitting the PR.\r\n\r\nIf this doc issue is for content UNDER /reference folder, please fill out this template:\r\n-->\r\nIssue Details\r\n-----------------\r\n`-Separator` parameter in `Write-Host` is ignored when running the following script:\r\n```\r\nfor ($i = 0 ; $i -lt 3 ; $i++) {\r\n    $param1 = 32\r\n    $param2 = 'Test'\r\n    $WriteHostParams = @{\r\n        Object = $param1,$param2\r\n        Separator = '+'\r\n        NoNewLine = $false\r\n        ForegroundColor = 'Blue'\r\n        BackgroundColor = 'White'\r\n    }\r\n    Start-Job -Name $i -ScriptBlock {\r\n        param ($PassedArgs)\r\n        Write-Host @PassedArgs\r\n    } -ArgumentList $WriteHostParams\r\n}\r\n```\r\nOther parameters get passed no problem.\r\n\r\n![image](https://user-images.githubusercontent.com/5260172/47561915-6cf7da00-d925-11e8-994d-8f8c0c085a54.png)\r\n\r\nVersion(s) of document impacted\r\n------------------------------\r\n- [ x] Impacts 6.next document\r\n- [x ] Impacts 6 document\r\n- [x ] Impacts 5.1 document\r\n- [ x] Impacts 5.0 document\r\n- [x ] Impacts 4.0 document\r\n- [x ] Impacts 3.0 document\r\n\r\n<!--\r\nIf you are selecting only a subset of document version(s), please help us understand why you selected a subset\r\nIf the PR is fixing all the document version(s), please delete the list/options below\r\n-->\r\nReason(s) for not selecting all version of documents\r\n----------------------------------------------------\r\n- [ ] The documented feature was introduced in selected version of PowerShell\r\n- [ ] This issue only shows up in selected version of the document\r\n\n\n_Copied from original issue: PowerShell/PowerShell-Docs#3187_",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Good find; the issue is not related to splatting, so a simpler reproduction is:\r\n\r\n```powershell\r\nPS> Start-Job { Write-Host -Separator '+' what, gives } | Receive-Job -Wait -AutoRemove\r\nwhat gives  # -Separator was not honored.\r\n```\r\n",
      "created_at": "2018-10-26T15:37:05Z",
      "updated_at": "2018-10-26T15:37:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I can confirm.\r\nAnd no problem is with Invoke-ScriptBlock.",
      "created_at": "2018-10-26T18:14:49Z",
      "updated_at": "2018-10-26T18:14:49Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This is very odd.  I'm going to look into this in case other parameters are being dropped in jobs.  Works fine with ThreadJob",
      "created_at": "2018-10-27T01:38:07Z",
      "updated_at": "2018-10-27T01:39:21Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The problem appears to be the deserialized object parameter `what,gives` which should be an array, but ends up as a singleton `what gives` which is why you don't see the separator.  This repros with: invoke-command -session $s { write-host -separator \"+\" what,gives }\r\n\r\nStart-Job goes through the remoting stack hence the same behavior.  Not sure where it's being deserialized wrong yet as I can see the base object is still an array.\r\n\r\n`Write-Information` has the same problem as it accepts an `object` which can be an array.",
      "created_at": "2018-10-27T04:27:21Z",
      "updated_at": "2018-10-27T05:10:44Z"
    },
    {
      "author": "kvprasoon",
      "author_association": "CONTRIBUTOR",
      "body": "It works when I try to trace the binding,\r\n```\r\nStart-Job {Trace-Command ParameterBinding {Write-Host (1..5) -Separator ','}} | Receive-Job -Wait\r\n```\r\n\r\nEven\r\n```\r\nStart-Job {&{Write-Host (1..5) -Separator ','}} | Receive-Job -Wait\r\n```",
      "created_at": "2018-10-27T09:17:41Z",
      "updated_at": "2018-10-27T15:04:49Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@kvprasoon I noticed that, too.  It doesn't repro in that case because the embedded scriptblock is now running \"locally\" whereas the outer scriptblock is running \"remotely\".  Something related to deserialized psobject not binding `Object[]` to `Object` parameter.  I'll work with @BrucePay next week to understand what's happening.",
      "created_at": "2018-10-27T19:14:45Z",
      "updated_at": "2018-10-28T17:22:48Z"
    },
    {
      "author": "jszabo98",
      "author_association": "NONE",
      "body": "I think this is the same thing?  You can't pass arrays to jobs.  It only uses the first element.\r\n\r\n```powershell\r\n$a = 1,2,3\r\nstart-job { param ($b) $b } -args $a | wait-job | receive-job\r\n1\r\n```\r\nEven this doesn't resolve it:\r\n```powershell\r\nstart-job { param ($b) $b } -args @($a) | wait-job | receive-job\r\n1\r\n```\r\nBut here's an arcane workaround:\r\n```powershell\r\nstart-job { param ($b) $b } -args (,$a) | wait-job | receive-job\r\n1\r\n2\r\n3\r\n```\r\nAnother workaround is adding a second argument:\r\n\r\n```powershell\r\nstart-job { param ($b,$c) $b,$c } -args $a,4 | wait-job | receive-job\r\n1\r\n2\r\n3\r\n4\r\n```\r\nInvoke-command does the same thing:\r\n\r\n```powershell\r\n$a = 1,2,3\r\nicm comp001 { param ($b) $b } -args $a\r\n1\r\n```\r\nThe call operator works ok.\r\n\r\n```powershell\r\n$a = 1,2,3\r\n& { param ($b) $b } $a\r\n1\r\n2\r\n3\r\n```\r\nBtw the docs could be improved in this area.\r\n",
      "created_at": "2019-10-16T18:14:50Z",
      "updated_at": "2019-10-16T18:54:16Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@jszabo98: No, the issue is unrelated to argument passing, it is specific to the remoting infrastructure . What you're describing is a general pitfall that applies whenever a cmdlet accepts an array of arguments, whether remoting is involved or not.\r\n\r\nYou can verify that by applying your workaround, which does _not_ help with the problem at hand:\r\n\r\n```powershell\r\nPS> Start-Job { param($a) Write-Host -Separator '+' $a } -args (, (1,2)) | Receive-Job -Wait -AutoRemove\r\n1 2  # Problem still exists, even though array argument was passed correctly.\r\n```\r\n\r\n\r\n",
      "created_at": "2019-10-16T19:45:11Z",
      "updated_at": "2019-10-16T19:45:11Z"
    },
    {
      "author": "jszabo98",
      "author_association": "NONE",
      "body": "It seemed related, from the title of the post.  Btw, since -object is a ValueFromRemainingArguments, here's a workaround:\r\n\r\n```powershell\r\nStart-Job { Write-Host -Separator + what gives } | Receive-Job -Wait -AutoRemove\r\nwhat+gives\r\n```\r\n",
      "created_at": "2019-10-16T20:18:25Z",
      "updated_at": "2019-10-16T20:20:13Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@jszabo98: I can see how it _seems_ related, but now we know that it isn't.\r\n\r\nTo close this tangent: The unrelated pitfall you describe - explained in detail in [this Stack Overflow answer](https://stackoverflow.com/a/49307779/45375) (see the footnote there for why `@($a)` doesn't help) - is indeed worth documenting - see https://github.com/MicrosoftDocs/PowerShell-Docs/issues/4945",
      "created_at": "2019-10-16T20:37:31Z",
      "updated_at": "2019-10-16T20:37:31Z"
    }
  ],
  "created_at": "2018-10-26T13:43:25Z",
  "labels": [
    "Issue-Bug",
    "WG-Remoting",
    "WG-Cmdlets-Core"
  ],
  "number": 8132,
  "state": "open",
  "title": "When using remoting/jobs, `Object[]` type is being coerced to `Object`",
  "updated_at": "2019-10-21T21:06:51Z"
}