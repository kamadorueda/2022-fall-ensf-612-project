{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6647",
  "author": "KaloferovLab",
  "body": "Steps to reproduce\r\n------------------\r\nFrom LInux to WIn :\r\n```powershell\r\nenter-PSSession -ConfigurationName powershell.6.1.0-preview.1\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nEnter the pssession on the Windows box. Same error when i try to create new pesssession on the windows box. \r\n```none\r\n\r\n```\r\n\r\nActual behavior\r\n---------------\r\nError\r\n```none\r\nNew-PSSession : MI_RESULT_ACCESS_DENIED\r\nAt line:1 char:1\r\nEnter-PSSession -ComputerName <IP> -Credential <username>\r\n  + CategoryInfo          : InvalidOperation: (:) [New-PSSession], PSInvalidOperationException\r\n  + FullyQualifiedErrorId : InvalidOperation,Microsoft.PowerShell.Commands.NewPSSessionCommand\r\n```\r\n\r\nEnvironment data\r\n----------------\r\nWIndows server:\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.1\r\nPSEdition                      Core\r\nGitCommitId                    v6.1.0-preview.1\r\nOS                             Microsoft Windows 10.0.14393\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\nLInux Server:\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.1\r\nPSEdition                      Core\r\nGitCommitId                    v6.1.0-preview.1\r\nOS                             Linux 3.10.0-514.e17.x86_64 #1 SMP Tue Nov 22 16:42:41 UTC 2016\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nThe alpha vesion of the plugin didn't support PSCredential Object and  WinRM. Does it support them now? \r\nFound this from last year. \r\nhttps://github.com/PowerShell/PowerShell/issues/5742\r\nDoes cross platform remoting work now in 6.1.0?",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@KaloferovLab remoting over WSMan is supported, but much more limited than what you get with Windows and WinRM.  From Linux, you should use `-Credential` as unlike Windows you can't use the current security context.  Also, use `-Authentication Basic`.",
      "created_at": "2018-04-14T04:09:59Z",
      "updated_at": "2018-04-14T04:09:59Z"
    },
    {
      "author": "brunobml",
      "author_association": "NONE",
      "body": "I have tried many times establishing a new session from linux RHEL7 to windows server 2016.\r\nAlways get the same error.\r\nI also tried , athentication Kerberos, Basic, Negotiable, etc....\r\n\r\nEnter-PSSession : MI_RESULT_ACCESS_DENIED\r\nAt line:1 char:1\r\n+ Enter-PSSession -ComputerName WSRVPRD001 -Credential (Get-Credential) ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidArgument: (WSRVPRD001:String) [Enter-PSSession], PSInvalidOperationException\r\n+ FullyQualifiedErrorId : CreateRemoteRunspaceFailed\r\n",
      "created_at": "2018-12-11T04:58:36Z",
      "updated_at": "2018-12-11T04:58:36Z"
    },
    {
      "author": "nomoresecrets",
      "author_association": "NONE",
      "body": "Did anyone manage to establish the connection?",
      "created_at": "2019-03-12T07:11:40Z",
      "updated_at": "2019-03-12T07:11:40Z"
    },
    {
      "author": "tekniko24",
      "author_association": "NONE",
      "body": "New-PSSession -ComputerName remotehost -Credential $credential -Authentication Negotiate\r\n\r\nUse Negotiate for authentication. I don't recommend using basic as that would send your password in plain text over the network and you would also need to manually allow the remote host to accept basic authentication as it is not allowed by default. Specifying Negotiate results in using NTLM authentication which can be verified by checking $PSSenderInfo.UserInfo.Identity.AuthenticationType",
      "created_at": "2019-03-13T03:05:41Z",
      "updated_at": "2019-03-13T03:06:07Z"
    },
    {
      "author": "danports",
      "author_association": "NONE",
      "body": "If you are seeing this error on Debian or Ubuntu, see  https://github.com/PowerShell/PowerShell/issues/7342#issuecomment-477711182.",
      "created_at": "2019-04-01T15:52:06Z",
      "updated_at": "2019-04-01T15:52:06Z"
    },
    {
      "author": "mgseelan",
      "author_association": "NONE",
      "body": "I also facing same problem when I am accessing from ubuntu 16.04, with powershell version and details are included\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.1\r\nPSEdition                      Core\r\nGitCommitId                    6.2.1\r\nOS                             Linux 4.15.0-1036-gcp #38~16.04.1-Ubuntu SMP Tue Jun 25 15:30:46 UTC 2019\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n\r\nMy error output :\r\nPowerShell credential request\r\nEnter your credentials.\r\nPassword for user XXXXXXXXXXXX: **********\r\n\r\nenter-pssession : MI_RESULT_ACCESS_DENIED\r\nAt line:1 char:1\r\n+ enter-pssession <ip> -credential XXXXXXXXXXXX\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidArgument: (<ip>:String) [Enter-PSSession], PSInvalidOperationException\r\n+ FullyQualifiedErrorId : CreateRemoteRunspaceFailed",
      "created_at": "2019-07-16T08:31:21Z",
      "updated_at": "2019-07-16T08:31:21Z"
    },
    {
      "author": "dheitsc",
      "author_association": "NONE",
      "body": "I also face this Issue on Centos 7 and Server 2012r2 / 2016",
      "created_at": "2019-08-02T09:21:52Z",
      "updated_at": "2019-08-02T09:21:52Z"
    },
    {
      "author": "jorioux",
      "author_association": "NONE",
      "body": "Same issue on Centos 7 and WinServer 2019\r\n\r\n`Invoke-Command` gives the same error.",
      "created_at": "2019-08-23T17:09:21Z",
      "updated_at": "2019-08-23T17:09:21Z"
    },
    {
      "author": "aric49",
      "author_association": "NONE",
      "body": "So it appears this issue has been open for a while.   I recently ran into this issue via #10764.  Any plans to get this resolved in future releases?   This holding up some progress to port some Windows automation over to Linux based environment. ",
      "created_at": "2019-10-14T13:04:04Z",
      "updated_at": "2019-10-14T13:04:04Z"
    },
    {
      "author": "arnydo",
      "author_association": "NONE",
      "body": "Experiencing this ongoing issue as well.\r\n![image](https://user-images.githubusercontent.com/11653079/67111832-d8c0fb80-f1a3-11e9-9707-712a77623b66.png)\r\n\r\n# Linux > Windows 2012 R2\r\n```\r\nEnter-PSSession -Credential $creds -ConfigurationName microsoft.exchange -ConnectionUri http://x.x.x.x/powershell -Authentication Negotiate -Verbose\r\n```\r\n```\r\nEnter-PSSession : Connecting to remote server x.x.x.x failed with the following error message : MI_RESULT_ACCESS_DENIED For more information, see the about_Remote_Troubleshooting Help topic.     \r\n```\r\n\r\n#  Linux to Exchange 2013\r\n```\r\n Enter-PSSession -Credential $creds -ComputerName x.x.x.x -Authentication Negotiate -Verbose\r\n```\r\n```\r\nEnter-PSSession : Connecting to remote server x.x.x.x failed with the following error message : MI_RESULT_ACCESS_DENIED For more information, see the about_Remote_Troubleshooting Help topic.                                           \r\n```\r\n                                                                                                                                                                                                 ",
      "created_at": "2019-10-18T16:38:44Z",
      "updated_at": "2019-10-18T16:38:44Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "When remoting from Linux, you will likely need to explicitly use Basic auth.  Negotiate requires additional libraries and configuration.",
      "created_at": "2019-10-21T21:36:05Z",
      "updated_at": "2019-10-21T21:36:05Z"
    },
    {
      "author": "arnydo",
      "author_association": "NONE",
      "body": "> When remoting from Linux, you will likely need to explicitly use Basic auth. Negotiate requires additional libraries and configuration.\r\n\r\nAre the extra libraries required on the Windows or Linux side. Or both?",
      "created_at": "2019-10-22T12:27:04Z",
      "updated_at": "2019-10-22T12:27:04Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Windows already has the necessary libs built into the OS.  Here's an example where the docker image was updated with a lib to support NTLM on Linux: https://github.com/PowerShell/PowerShell-Docker/issues/124.  This [issue](https://github.com/PowerShell/PowerShell/issues/3329) seems to indicate Kerberos can work on Linux.",
      "created_at": "2019-10-22T16:29:11Z",
      "updated_at": "2019-10-22T16:29:11Z"
    },
    {
      "author": "arnydo",
      "author_association": "NONE",
      "body": "> Windows already has the necessary libs built into the OS. Here's an example where the docker image was updated with a lib to support NTLM on Linux: [PowerShell/PowerShell-Docker#124](https://github.com/PowerShell/PowerShell-Docker/issues/124). This [issue](https://github.com/PowerShell/PowerShell/issues/3329) seems to indicate Kerberos can work on Linux.\r\n\r\nHmm. Checked to verify that the package is installed in the Docker image and still get the same issue as above.\r\n\r\n```\r\nPS /> apt show gss-ntlmssp\r\nPackage: gss-ntlmssp\r\nVersion: 0.7.0-4build3\r\nStatus: install ok installed\r\n```\r\n\r\n```\r\nPS /> Enter-PSSession -Credential $cred -ComputerName xxxxx -Authentication Negotiate -Verbose\r\nEnter-PSSession : Connecting to remote server xxxxx failed with the following error message : MI_RESULT_FAILED For more information, see the about_Remote_Troubleshooting Help topic\r\n```\r\n",
      "created_at": "2019-10-22T16:50:10Z",
      "updated_at": "2019-10-22T16:50:10Z"
    },
    {
      "author": "RDIL",
      "author_association": "CONTRIBUTOR",
      "body": "Hey @arnydo,\r\nAll officially supported Docker images have `gss-ntlmssp` installed on them, except for `Alpine` and `openSUSE`.  So as long as you are using one of the others, you should be good.  ",
      "created_at": "2019-10-22T18:05:53Z",
      "updated_at": "2019-10-22T18:05:53Z"
    },
    {
      "author": "arnydo",
      "author_association": "NONE",
      "body": "> Hey @arnydo,\r\n> All officially supported Docker images have `gss-ntlmssp` installed on them, except for `Alpine` and `openSUSE`. So as long as you are using one of the others, you should be good.\r\n\r\nI am using the latest Docker image for Powershell with no luck.",
      "created_at": "2019-10-22T18:48:50Z",
      "updated_at": "2019-10-22T18:48:50Z"
    },
    {
      "author": "danports",
      "author_association": "NONE",
      "body": "@arnydo Did you check whether `/etc/services` was the issue? See https://github.com/PowerShell/PowerShell/issues/7342#issuecomment-477711182.",
      "created_at": "2019-10-24T00:39:49Z",
      "updated_at": "2019-10-24T00:39:49Z"
    },
    {
      "author": "arnydo",
      "author_association": "NONE",
      "body": "> @arnydo Did you check whether `/etc/services` was the issue? See [#7342 (comment)](https://github.com/PowerShell/PowerShell/issues/7342#issuecomment-477711182).\r\n\r\nHey, what does /etc/services have to do with this particular issue? That isn't sarcastic...",
      "created_at": "2019-10-28T20:53:45Z",
      "updated_at": "2019-10-28T20:53:45Z"
    },
    {
      "author": "danports",
      "author_association": "NONE",
      "body": "haha, yes, that's a fair question! There is an issue with the native OMI library PowerShell uses on Linux that only crops up with NTLM authentication when `/etc/services` is missing, as it is in some Docker images (like the official PowerShell images, IIRC). See https://github.com/microsoft/omi/issues/623.",
      "created_at": "2019-10-28T23:03:12Z",
      "updated_at": "2019-10-28T23:03:12Z"
    },
    {
      "author": "arnydo",
      "author_association": "NONE",
      "body": "@danports I built a new image based on the latest Ubuntu 18.04 Powershell Dockerfile but with the addition of the ```RUN echo 'http 80/tcp www www-http' > /etc/services```.\r\n\r\nSame result...",
      "created_at": "2019-10-29T12:29:28Z",
      "updated_at": "2019-10-29T12:29:28Z"
    },
    {
      "author": "danports",
      "author_association": "NONE",
      "body": "Hmm, perhaps you're experiencing a different problem then. You might want to try [enabling OMI logging](https://github.com/microsoft/omi/blob/master/Unix/doc/diagnose-omi-problems.md#enabling-logging-in-omi) inside the container - reviewing the OMI logs is what eventually helped me to diagnose my issue.",
      "created_at": "2019-10-29T22:09:23Z",
      "updated_at": "2019-10-29T22:09:23Z"
    },
    {
      "author": "arnydo",
      "author_association": "NONE",
      "body": "Doesn't look like omi is present at all in the Powershell images...is that even used in this case?",
      "created_at": "2019-10-30T13:19:49Z",
      "updated_at": "2019-10-30T13:19:49Z"
    },
    {
      "author": "danports",
      "author_association": "NONE",
      "body": "What do you mean by not present? You'll probably need to create the OMI log and configuration directories to enable logging - I don't think they are there by default.",
      "created_at": "2019-10-30T18:23:29Z",
      "updated_at": "2019-10-30T18:23:29Z"
    },
    {
      "author": "jameskirsop",
      "author_association": "NONE",
      "body": "@SteveL-MSFT, This is all well and good:\r\n\r\n> When remoting from Linux, you will likely need to explicitly use Basic auth. Negotiate requires additional libraries and configuration.\r\n\r\nExcept, it's not supported:\r\n```\r\n> Enter-PSSession -Credential $creds -ComputerName <HOSTNAME> -Authentication Basic -Verbose\r\nEnter-PSSession : Basic authentication is not supported over HTTP on Unix.\r\nAt line:1 char:1\r\n....\r\n```\r\n\r\nYou'd think that such a useful feature, with multiple bug reports, would have been implemented and/or documented properly a year and a half later after the issue was first reported...",
      "created_at": "2019-11-22T02:07:53Z",
      "updated_at": "2019-11-22T02:07:53Z"
    },
    {
      "author": "mgseelan",
      "author_association": "NONE",
      "body": "Which version of the Power shell ",
      "created_at": "2019-11-22T09:18:30Z",
      "updated_at": "2019-11-22T09:18:30Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "Just bumped against this too, using a rhel7.7 azure devops agent that needs to remote into a windows 2016 vm",
      "created_at": "2019-12-05T13:00:17Z",
      "updated_at": "2019-12-05T13:00:17Z"
    },
    {
      "author": "shneorc",
      "author_association": "NONE",
      "body": "Same issue.\r\n**Any solution or workaround?**\r\nCentOS 7 --> Server 2016\r\n\r\n```\r\nPS /tmp> Enter-PSSession -ComputerName \"HostName\"\r\nEnter-PSSession : MI_RESULT_ACCESS_DENIED\r\nAt line:1 char:1\r\n+ Enter-PSSession -ComputerName \"HostName\"\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidArgument: (HostName:String) [Enter-PSSession], PSInvalidOperationException\r\n+ FullyQualifiedErrorId : CreateRemoteRunspaceFailed\r\n```",
      "created_at": "2019-12-06T09:04:02Z",
      "updated_at": "2019-12-06T09:04:02Z"
    },
    {
      "author": "MrHariSharma",
      "author_association": "NONE",
      "body": "I am also facing same issue\r\nCentOS 7 --> Windows Server 2019\r\nPowerShell 6.0.0 Beta 6\r\n\r\nPS /root> Enter-PSSession -ComputerName \"TEST.mydomain.com\"\r\nEnter-PSSession : MI_RESULT_ACCESS_DENIED\r\nAt line:1 char:1\r\n+ Enter-PSSession -ComputerName \"TEST.mydomain.com\"\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidArgument: (TEST.mydomain.com:String) [Enter-PSSession], PSInvalidOperationException\r\n+ FullyQualifiedErrorId : CreateRemoteRunspaceFailed\r\n\r\n**But if I try Invoke-Command it works**\r\n**$dn='DomainName\\Administrator'\r\n$pwsd='GiveYourPassword'\r\n$ip='192.168.20.119' \r\n$secpasswd = ConvertTo-SecureString $pwsd -AsPlainText -Force\r\n$mycreds = New-Object System.Management.Automation.PSCredential -argumentlist $dn, $secpasswd**\r\n\r\n**Now I have another interesting issue i.e. latency** \r\nCan someone please help?\r\nIf I use Powershell 6.2.3 RC build, Invoke-Command takes approx 30 sec. For more details #6531 \r\n\r\n",
      "created_at": "2019-12-13T10:51:28Z",
      "updated_at": "2019-12-13T10:51:28Z"
    },
    {
      "author": "Nateb1121",
      "author_association": "NONE",
      "body": "The reason this wasn't working for me was that I didn't have the NTLM authentication package ( gssntlmssp) for my distro (CentOS) installed. Rather than fiddling with installing the correct packages, I took a look at the official Microsoft PowerShell docker image. Currently the folks over there have been working on adding NTLM support into the docker container (https://github.com/PowerShell/PowerShell-Docker/issues/124) and have every platform but Photon which prevents it from being added to latest. \r\n\r\n**Here's a workaround** I used, YMMV. To run the PowerShell docker container on CentOS that should allow you to Enter-PSSession into Windows computers run the following \r\n`docker run -it mcr.microsoft.com/powershell:7.0.0-preview.6-centos-7` or `docker run -it mcr.microsoft.com/powershell:preview` (which should work on any platform), this will start up a docker container interactively and will give you a PowerShell command line at the end, which suited my needs (I did have to add `-Authentication Negotiate` on the `Enter-PSSession` though). When you exit the PowerShell terminal the docker container will stop and you'll need to rerun that command. Keep in mind it is a container so be mindful when attempting to use files. If a container doesn't suit your needs, read on. \r\n\r\nI was able to successfully remote into things using that Docker container as a workaround. If you don't want to use the docker container then have a look at the Docker file in the PowerShell-Docker repo under `/release/preview/` for the corresponding architecture and see what commands it's running to get the container up. \r\n\r\nTL;DR Use the latest preview tagged Docker image for your architecture which will include the proper NTLM libraries. Alternatively, install gss-ntlmssp/gssntlmssp on your machine and it should solve most issues with Enter-PSSession. \r\n\r\n",
      "created_at": "2019-12-16T18:17:05Z",
      "updated_at": "2019-12-19T16:48:47Z"
    },
    {
      "author": "BitDesert",
      "author_association": "NONE",
      "body": "Installing `gss-ntlmssp` as stated in #11374 solved this issue for me.\r\nI'm using `-Authentication Negotiate`.",
      "created_at": "2020-01-16T14:46:02Z",
      "updated_at": "2020-01-16T14:46:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Please look previous comment. I believe we can close the issue and fix it in #11374",
      "created_at": "2020-01-31T14:44:10Z",
      "updated_at": "2020-01-31T14:45:04Z"
    },
    {
      "author": "waljlopez2019",
      "author_association": "NONE",
      "body": "> Installing `gss-ntlmssp` as stated in #11374 solved this issue for me.\r\n> I'm using `-Authentication Negotiate`.\r\n\r\nIt's solution.....",
      "created_at": "2020-04-17T03:18:17Z",
      "updated_at": "2020-04-17T03:18:17Z"
    },
    {
      "author": "sliddjur",
      "author_association": "NONE",
      "body": "I still have this issue, on Ubuntu 20.04\r\nPowershell installed today with snap.\r\nI'm trying to `Enter-PSSession -Authenthication Negotiate` using my $creds. \r\n\r\n\r\n```\r\n~> snap list powershell\r\nName        Version  Rev  Tracking       Publisher              Notes\r\npowershell  7.0.1    129  latest/stable  microsoft-powershell\u2713  classic\r\n```\r\n\r\n```\r\n~> apt info gss-ntlmssp\r\nPackage: gss-ntlmssp\r\nVersion: 0.7.0-4build3\r\n...\r\nAPT-Manual-Installed: yes\r\n```\r\n\r\nThe error message is:\r\n```\r\nEnter-PSSession: Connecting to remote server 172.18.42.64 failed with the following error message : acquiring creds with username only failed Unspecified GSS failure.  Minor code may provide more information SPNEGO cannot find mechanisms to negotiate For more information, see the about_Remote_Troubleshooting Help topic.\r\n\r\n```",
      "created_at": "2020-05-15T08:23:32Z",
      "updated_at": "2020-05-15T08:23:32Z"
    },
    {
      "author": "Himura2la",
      "author_association": "CONTRIBUTOR",
      "body": "Same here. Ubuntu 20.04, PowerShell 7.0.1 from Store. I guess the Snap package should be changed to add `gss-ntlmssp`?\r\n\r\n```\r\nPS /home/himura> Enter-PSSession -ComputerName ... -Credential ... -Authentication Negotiate\r\n\r\nPowerShell credential request\r\nEnter your credentials.\r\nPassword for user ...: ***************\r\n\r\nEnter-PSSession: Connecting to remote server ... failed with the following error message : acquiring creds with username only failed Unspecified GSS failure.  Minor code may provide more information SPNEGO cannot find mechanisms to negotiate For more information, see the about_Remote_Troubleshooting Help topic.\r\n```",
      "created_at": "2020-05-22T10:12:36Z",
      "updated_at": "2020-05-22T10:15:19Z"
    },
    {
      "author": "manivannanpk",
      "author_association": "NONE",
      "body": "I am also facing the same issue with the latest version of PowerShell (7.0.1).\r\n\r\nTrying to connect to Windows 2012 from CentOS Linux 7.\r\n",
      "created_at": "2020-05-27T09:25:26Z",
      "updated_at": "2020-05-27T09:25:26Z"
    },
    {
      "author": "manivannanpk",
      "author_association": "NONE",
      "body": "As suggested by @BitDesert above, it works for me after installing gss-ntlmssp and with -Authentication Negotiate.\r\n\r\nBut there is a huge latency. Authentication itself takes around 20 seconds. Both the Linux and Windows machines are in the same subnet.\r\n\r\nAny suggestion on how to reduce the latency?\r\n",
      "created_at": "2020-05-27T09:42:48Z",
      "updated_at": "2020-05-27T09:42:48Z"
    },
    {
      "author": "jlam55555",
      "author_association": "NONE",
      "body": "Having the same issue here on Arch Linux with Powershell Core 7.0.0. Installing the [gss-ntlmssp AUR package][1] and using `-Authentication Negotiate` did not solve the problem. Still get:\r\n\r\n```\r\nPS /home/jon> Enter-PSSession -Credential $credentials -Authentication Negotiate -ComputerName 192.168.1.203\r\nEnter-PSSession: Connecting to remote server 192.168.1.203 failed with the following error message : acquiring creds with username only failed Unspecified GSS failure.  Minor code may provide more information SPNEGO cannot find mechanisms to negotiate For more information, see the about_Remote_Troubleshooting Help topic.\r\n```\r\n\r\n[1]: https://aur.archlinux.org/packages/gss-ntlmssp/",
      "created_at": "2020-05-31T22:50:45Z",
      "updated_at": "2020-05-31T22:50:45Z"
    },
    {
      "author": "arizvisa",
      "author_association": "NONE",
      "body": "Hey guys, op of PowerShell/PowerShell-Docker#124 here.\r\n\r\nYou can literally just use the docker://mcr.microsoft.com/powershell:centos-7 container w/ podman/docker/rkt/whatev to get it to work. Just run the container w/ interactivity and a tty and it kicks you into `pwsh`. If it doesn't work, then check that the server you're trying to connect to is configured properly because tokens aren't exchanged across both platforms. Not all platforms support gssapi/ntlm, and I don't think they're any tests..but because of @RDIL's work, it's super straightforward regardless.\r\n\r\n```\r\nDownloading sha256:d06345b12b6 [=============================]   106 MB / 106 MB \r\nDownloading sha256:524b0c1e57f [=============================] 75.9 MB / 75.9 MB \r\nPowerShell 7.0.3\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\n\r\nhttps://aka.ms/powershell\r\nType 'help' to get help.\r\n\r\nPS /> enter-pssession -computername 10.7.17.218 -Credential $u -Authentication negotiate\r\n\r\nPowerShell credential request\r\nEnter your credentials.\r\nUser: root\r\nPassword for user root: ************************************************\r\n\r\n[10.7.17.218]: PS C:\\Users\\root\\Documents> exit\r\n```\r\n\r\nThis is literally what containers are for, so you don't have to fight with crazy deps to get a simple task handled.\r\n\r\nIf you're trying to get kerberos to work with it (instead of ntlm), I don't think the containers will work (despite gssapi supporting it) because you'll need to get your tgt with `kinit` and then get the gssapi library to see it. You can probably do some clever mounting to get its library to see your tgt w/ the container though.",
      "created_at": "2020-07-22T01:33:13Z",
      "updated_at": "2020-07-22T01:33:13Z"
    },
    {
      "author": "MysticRyuujin",
      "author_association": "NONE",
      "body": "I'd like to add that Linux Mint 20 has the same issue as Ubuntu 20.04.\r\n\r\nI installed the package with snap and manually installed `gss-ntlmssp` via `apt` but I still get the error:\r\n```\r\nNew-PSSession: [SERVER] Connecting to remote server SERVER failed with the following error message : acquiring creds with username only failed Unspecified GSS failure.  Minor code may provide more information SPNEGO cannot find mechanisms to negotiate For more information, see the about_Remote_Troubleshooting Help topic.\r\n```",
      "created_at": "2020-08-17T14:51:52Z",
      "updated_at": "2020-08-17T14:51:52Z"
    },
    {
      "author": "se",
      "author_association": "NONE",
      "body": "I found the problem. Just install `inetutils-ping` and it will solve. Probably it is depending `ping` to resolve OP or something.\r\n\r\n```sh\r\napt-get install inetutils-ping\r\n```\r\n\r\n\ud83d\udd96 ",
      "created_at": "2020-12-11T20:42:58Z",
      "updated_at": "2020-12-11T20:42:58Z"
    },
    {
      "author": "sliddjur",
      "author_association": "NONE",
      "body": "> I found the problem. Just install `inetutils-ping` and it will solve. Probably it is depending `ping` to resolve OP or something.\r\n> \r\n> ```shell\r\n> apt-get install inetutils-ping\r\n> ```\r\n\r\nOn ubuntu I have `iputils-ping` - but it does not work with either one of them installed. ",
      "created_at": "2021-01-20T14:47:01Z",
      "updated_at": "2021-01-20T14:47:01Z"
    },
    {
      "author": "janegilring",
      "author_association": "NONE",
      "body": "I get the same error on Ubuntu 20.04 (running in WSL2), even though inetutils-ping and gss-ntlmssp is installed.\r\n\r\n`Enter-PSSession: This parameter set requires WSMan, and no supported WSMan client library was found. WSMan is either not installed or unavailable for this system.`",
      "created_at": "2021-03-13T20:26:55Z",
      "updated_at": "2021-03-13T20:27:07Z"
    },
    {
      "author": "VGerris",
      "author_association": "NONE",
      "body": "unfortunately it seems this kind of situations are terribly poorly documented by Microsoft.\r\nI got the following to work:\r\n - Setup FreeIPA for DNS and Kerberos (on Linux)\r\n - register the window host in FreeIPA (add host - type machine name and IP address - save)\r\n - setup the proper ciphers for Kerberos (GPO/regedit, everything but DES)\r\n - Setup windows to authenticate with Kerberos, with something like:\r\n```\r\n ksetup /setdomain IPA.YOURDOMAIN.COM\r\nksetup /addkdc IPA.YOURDOMAIN.COM idm.ipa.yourdomain.com\r\nksetup /addkpasswd IPA.YOURDOMAIN.COM idm.ipa.yourdomain.com\r\nksetup /setcomputerpassword SecretMachinePassword\r\nksetup /mapuser * *\r\n```\r\n  - Login to the FreeIPA host and generate the keytab:\r\n  ipa-getkeytab -s ipa.yourdomain.com -p host/windows-hostname.ipa.yourdomain.com -e arcfour-hmac -k krb5.keytab.windows-hostname -P\r\n  - now install a Linux host you will use to connect with Powershell - then register it with the FreeIPA Kerberos server and install powershell and the gssntlmssp package\r\n  - on that same host you should be able to connect now:\r\n  start powershell (pwsh / powershell in bash) then :\r\n```\r\n  $credential = get-credential user@IPA.YOURDOMAIN.COM\r\nEnter-PSSession -ComputerName windows-hostname.ipa.yourdomain.com -Authentication Negotiate -Credential $credential\r\n```\r\nA few other notes : \r\n - user needs to exist in FreeIPA, password is the password of the user in FreeIPA. The user also needs to exist as a local user on the Windows machine\r\n - while this worked from Linux, from Windows to Windows I only got it to work with Administrator accounts, then the format for the user is windows-hostname\\Administrator\r\n - the Windows machines are showing the Kerberos Realm as a Workgroup, so they are not in a Domain like with an AD server\r\n - winrm service needs to run on host, setup and network has to be private (not public) \r\n ```\r\nwinrm quickconfig\r\nEnable-PSRemoting\r\nSet-NetConnectionProfile -NetworkCategory Private\r\n\r\n```\r\n \r\n Finally, the output on CentOS 7 to connect looks like :\r\n \r\n```\r\n pwsh\r\nPowerShell 7.1.3\r\nCopyright (c) Microsoft Corporation.\r\n\r\nhttps://aka.ms/powershell\r\nType 'help' to get help.\r\n\r\nPS /home/user> $credential = get-credential user@IPA.YOURDOMAIN.COM\r\n\r\nPowerShell credential request\r\nEnter your credentials.\r\nPassword for user user@IPA.YOURDOMAIN.COM: ****************\r\n\r\nPS /home/user> Enter-PSSession -ComputerName windows-hostname.ipa.yourdomain.com -Authentication Negotiate -Credential $credential\r\n[windows-hostname.ipa.yourdomain.com]: PS C:\\Users\\user.WINDOWS-HOSTNAME\\Documents>\r\n```\r\nAll this was put together by pulling information from all over the net.\r\nThis does not contain all details but should give you enough info to get it to work.\r\nI have not tried Basic authentication and I think it is not safe.\r\nThe better approach is to use SSH to manage Windows, because Microsoft seems to be unwilling to deliver proper cross platform authentication support (NTLM does not work and Kerberos not the same as in a domain setting).\r\n\r\nThere are tickets for that that have been open for months, I haven't checked those for a while, but feel free to try and get those done. Nobody wants to need a Windows server to manage other Windows servers ( or manage any windows server at all for that matter, but that's beyond the scope of the answer ;) ).\r\n\r\n ",
      "created_at": "2021-04-17T00:53:06Z",
      "updated_at": "2021-04-17T00:59:48Z"
    },
    {
      "author": "VGerris",
      "author_association": "NONE",
      "body": "> I still have this issue, on Ubuntu 20.04\r\n> Powershell installed today with snap.\r\n> I'm trying to `Enter-PSSession -Authenthication Negotiate` using my $creds.\r\n> \r\n> ```\r\n> ~> snap list powershell\r\n> Name        Version  Rev  Tracking       Publisher              Notes\r\n> powershell  7.0.1    129  latest/stable  microsoft-powershell\u2713  classic\r\n> ```\r\n> \r\n> ```\r\n> ~> apt info gss-ntlmssp\r\n> Package: gss-ntlmssp\r\n> Version: 0.7.0-4build3\r\n> ...\r\n> APT-Manual-Installed: yes\r\n> ```\r\n> \r\n> The error message is:\r\n> \r\n> ```\r\n> Enter-PSSession: Connecting to remote server 172.18.42.64 failed with the following error message : acquiring creds with username only failed Unspecified GSS failure.  Minor code may provide more information SPNEGO cannot find mechanisms to negotiate For more information, see the about_Remote_Troubleshooting Help topic.\r\n> ```\r\n\r\nyou are not posting your whole command line. Make sure to use hostname and not IP and set up credentials as shown in my post above. it seems you only supply a user. Just google that error and look at examples otherwise. Make sure to post full info if you have the same issue, thanks",
      "created_at": "2021-04-17T00:57:47Z",
      "updated_at": "2021-04-17T00:57:47Z"
    },
    {
      "author": "ponchofiesta",
      "author_association": "NONE",
      "body": "```bash\r\nyum install gssntlmssp\r\n...\r\n```\r\n```powershell\r\nPS > $sesopt = New-PSSessionOption -SkipCACheck -SkipCNCheck\r\nPS > Enter-PSSession -ComputerName 192.168.10.85 -Credential $cred -Authentication Negotiate -UseSSL -SessionOption $sesopt\r\nEnter-PSSession: Connecting to remote server 192.168.10.85 failed with the following error message : Authorization failed For more information, see the about_Remote_Troubleshooting Help topic.\r\n```\r\nThe Windows eventlog shows Error code 0xC000035B. That might be a version problem. Powershell on Linux seems to use NTLMv1. Windows Server needs a newer version.\r\n\r\nClient: CentOS 7, Powershell 7.1.3\r\nServer: Windows Server 2019",
      "created_at": "2021-04-22T09:15:40Z",
      "updated_at": "2021-04-22T09:25:11Z"
    },
    {
      "author": "azurezhang",
      "author_association": "NONE",
      "body": "In order to get the remote work, I have installed the following dependencies on ubuntu 20.4 (without Kerberos).\r\nInstall pwsh 7.1.3\r\nInstall OpenSSL\r\nInstall PSWSman : sudo pwsh -Command 'Install-Module -Name PSWSMan'\r\nInstall gss-ntlmssp : sudo apt-get install -y gss-ntlmssp\r\n\r\nWhile I am trying to setup on RHEL with Kerberos, got the error of \"acquiring creds with username only failed Unspecified GSS failure.  Minor code may provide more information SPNEGO cannot find mechanisms to negotiate\" from Invoke-Command, and \"Authorization failed Unspecified GSS failure.  Minor code may provide more information Server not found in Kerberos database For more information\" from New-PSSession and Enter-PSSession command\r\n\r\nThis might be a Kerberos configure issue or still missing some other dependencies required on RHEL.",
      "created_at": "2021-04-23T04:29:53Z",
      "updated_at": "2021-04-23T04:29:53Z"
    },
    {
      "author": "VGerris",
      "author_association": "NONE",
      "body": "you need to have your Linux machine authenticate with Kerberos first. Depending if you use AD or Linux, you need to make sure that it works. As I wrote, it works with both the Windows and Linux host using a Linux Kerberos server.\r\nSo login on the machine with Kerberos and  type klist, you should see a valid ticket there.\r\nAs far as I know, it will not work without that, correct me if I'm wrong.",
      "created_at": "2021-04-23T07:17:36Z",
      "updated_at": "2021-04-23T07:17:36Z"
    },
    {
      "author": "azurezhang",
      "author_association": "NONE",
      "body": "@VGerris Thank you for your comment, I am able to create/enter PSSession from Linux to windows server run after turn off FIPS on Linux. Tracing down to md5 hash error and find that gss-ntlmssp is not compatible with FIPS.\r\nNow need find a FIPS compatible gss-ntlmssp package. ",
      "created_at": "2021-04-28T01:27:11Z",
      "updated_at": "2021-04-28T01:27:44Z"
    },
    {
      "author": "VOVELEE",
      "author_association": "NONE",
      "body": "I am experiencing similar issues with my setup - I simply cannot make Ubuntu 18.04 or 20.04 to connect to Windows Server 2019 using NTLM. Does anyone have any suggestions?\r\n\r\nLooks like Ubuntu and Windows Server 2019 cannot negotiate the correct NTLM.\r\nThe same command opens a valid PSSession when it is executed on Windows 10 Client (standalone client, not joined to doimain).\r\n\r\nSetup:\r\n\r\n- Enabled WinRM on Windows Server 2019. Windows Server is joined to an Azure Active Directory Domain Services domain\r\n- Installed Powershell 7.1.3 on Ubunbtu 18.04 following official Microsoft article\r\n- Installed gss-ntlmssp on Ubuntu 18.04 to enable NTML authentication as per https://github.com/PowerShell/PowerShell-Docker/issues/124\r\n- Install PSWSMAN 2.2.0 (I tested it without it - the same issue occur)\r\n\r\nCommands executed on Ubuntu server:\r\n\r\n``` powershell\r\n$PSSessionParameters = @{\r\n  Authentication    = 'Negotiate'\r\n  Credential        = [pscredential]::new('user@domaintest.onmicrosoft.com', ('Obfuscated' | ConvertTo-SecureString -AsPlainText))\r\n  UseSSL            = $true\r\n  Port              = 5986\r\n  ConfigurationName = 'PowerShell.7'\r\n  SessionOption     = New-PSSessionOption -SkipCACheck -SkipCNCheck\r\n}\r\nNew-PSSession -ComputerName '10.0.104.201' @PSSessionParameters\r\n```\r\n\r\nError received on Ubuntu: \r\n\r\n```\r\nNew-PSSession: [10.0.104.201] Connecting to remote server 10.0.104.201 failed with the following error message : Authorization failed For more information, see the about_Remote_Troubleshooting Help topic.\r\n```\r\n\r\n\r\nError in Windows Server Security log:\r\n```\r\nEvent 4625\r\nAccount For Which Logon Failed:\r\n\tSecurity ID:\t\tNULL SID\r\n\tAccount Name:\t\tuser@domaintest.onmicrosoft.com\r\n\tAccount Domain:\t\t\r\n\r\nFailure Information:\r\n\tFailure Reason:\t\tAn Error occured during Logon.\r\n\tStatus:\t\t\t0xC000035B\r\n\tSub Status:\t\t0x0\r\n```\r\n\r\nNTLM audit log on Windows Server:\r\n\r\n```\r\nNTLM server blocked audit: Audit Incoming NTLM Traffic that would be blocked\r\nCalling process PID: 3136\r\nCalling process name: C:\\Windows\\System32\\svchost.exe\r\nCalling process LUID: 0x3E4\r\nCalling process user identity: vm-gs-alt001$\r\nCalling process domain identity: DOMAINTEST\r\nMechanism OID: 1.3.6.1.4.1.311.2.2.10\r\nAudit NTLM authentication requests to this server that would be blocked if the security policy Network Security: Restrict NTLM: Incoming NTLM Traffic is set to Deny all accounts or Deny all domain accounts.\r\nIf you want this server to allow NTLM authentication, set the security policy Network Security: Restrict NTLM: Incoming NTLM Traffic to Allow all.\r\n```\r\n\r\n",
      "created_at": "2021-06-08T05:12:02Z",
      "updated_at": "2021-06-08T05:12:02Z"
    },
    {
      "author": "VOVELEE",
      "author_association": "NONE",
      "body": "Please take a look into this threat - https://github.com/jborean93/omi/issues/29\r\nLooks like the limitation comes from the libraries which ship with different version of Windows. The workaround is to set the CbtHardeningLevel to None so Windows doesn't try to validate the value at all.",
      "created_at": "2021-06-09T05:09:23Z",
      "updated_at": "2021-06-09T05:09:23Z"
    },
    {
      "author": "netcore-jroger",
      "author_association": "NONE",
      "body": "if you using `CentOS`, please install gssntlmssp:\r\n```bash\r\nyum install gssntlmssp\r\n```\r\nif using `Ubuntu`, please install gss-ntlmssp:\r\n```bash\r\nsudo apt install gss-ntlmssp\r\n```\r\n\r\n- https://kimconnect.com/linux-enable-powershell-remoting-winrm-client-on-ubuntu-20-04/\r\n- https://blog.quickbreach.io/blog/powershell-remoting-from-linux-to-windows/",
      "created_at": "2021-07-14T09:53:38Z",
      "updated_at": "2021-07-14T09:56:50Z"
    },
    {
      "author": "plao",
      "author_association": "NONE",
      "body": "> New-PSSession -ComputerName remotehost -Credential $credential -Authentication Negotiate\r\n> \r\n> Use Negotiate for authentication. I don't recommend using basic as that would send your password in plain text over the network and you would also need to manually allow the remote host to accept basic authentication as it is not allowed by default. Specifying Negotiate results in using NTLM authentication which can be verified by checking $PSSenderInfo.UserInfo.Identity.AuthenticationType\r\n\r\nThanks!",
      "created_at": "2022-02-09T10:19:37Z",
      "updated_at": "2022-02-09T10:19:37Z"
    },
    {
      "author": "hunter86bg",
      "author_association": "NONE",
      "body": "Obviously something is wrong with the PowerShell for Linux.\r\nA very interesting [blog](https://www.bloggingforlogging.com/2020/08/21/wacky-wsman-on-linux/) that can shed the light , especially the topic where the PRs were rejected.\r\n\r\nFor my Ubuntu18.04 connecting to Win10 Pro over winrm (http port, not joined in AD) , the following worked:\r\n\r\n```\r\nsudo apt install  gss-ntlmssp powershell\r\npwsh -Command 'Install-Module -Name PSWSMan'\r\nsudo pwsh -Command 'Install-WSMan'\r\n```\r\n\r\nValidation:\r\n```\r\n$cred=Get-Credential \r\nEnter-PSSession -ComputerName vmhostname.vmdomain -Credential $cred -Authentication Negotiate\r\n```\r\n\r\nFile copy :\r\n```\r\n$pw = convertto-securestring -AsPlainText -Force -String PASS\r\n$cred = new-object -typename System.Management.Automation.PSCredential -argumentlist \"USER\",$pw\r\n$session = New-PSSession -ComputerName win10pro.localdomain -Credential $cred  -Authentication Negotiate\r\nCopy-Item -Path 'C:\\Users\\USER\\Desktop\\somefile.txt' -Destination /tmp/ -FromSession $session\r\n```",
      "created_at": "2022-02-18T23:11:43Z",
      "updated_at": "2022-02-18T23:11:43Z"
    },
    {
      "author": "VarunRajanna",
      "author_association": "NONE",
      "body": "The below steps worked for me on CentOS 7*\r\n \r\nInstall PowerShell for linux \r\nDOCS: https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-linux?view=powershell-7.2\r\n \r\nRegister the Microsoft RedHat repository\r\ncurl https://packages.microsoft.com/config/rhel/8/prod.repo | sudo tee /etc/yum.repos.d/microsoft.repo\r\n    \r\nInstall PowerShell\r\n\r\n``` sudo yum install -y powershell ```\r\n \r\nConfirm epel-release is installed\r\n\r\n``` yum install -y epel-release ```\r\n \r\nUpdate all packages\r\n \r\n``` yum update -y ```\r\n \r\nInstall the below packages\r\n\r\n``` yum install -y gssntlmssp less ncurses openssh-clients ```\r\n \r\nNote: If gssntlmssp fails with the error Public key for gssntlmssp-0.7.0-1.el7.x86_64.rpm is not installed use the below command\r\n\r\n``` yum install -y gssntlmssp --nogpgcheck ```\r\n \r\nInstall the PSWSMan on powershell\r\n\r\n``` pwsh -Command \"Install-Module -Name PSWSMan -Force ```\r\n\n\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-linux\">Install PowerShell on Linux - PowerShell</a></strong></div><div>Learn about the Linux distributions supported by PowerShell.</div></blockquote>\n<blockquote></blockquote>",
      "created_at": "2022-03-04T05:38:59Z",
      "updated_at": "2022-03-04T05:39:00Z"
    },
    {
      "author": "arizvisa",
      "author_association": "NONE",
      "body": "> Obviously something is wrong with the PowerShell for Linux. A very interesting [blog](https://www.bloggingforlogging.com/2020/08/21/wacky-wsman-on-linux/) that can shed the light , especially the topic where the PRs were rejected.\r\n\r\nFor the record, the blog is definitely titled as being related to Linux..but if you look at the PRs microsoft/omi#669, microsoft/omi#670, and the blog, those are all related to building the library on MacOS (which is unsupported).\r\n\r\nThe troubleshooting of GSSAPI and everything else from the blog is definitely on-topic, though, and is probably useful for people who need help troubleshooting more details of how pwsh on linux interacts with GSSAPI. Still, though, it's super cool that the author is actively maintaining OMI for all of the platforms (including MacOS)...because honestly, it needs it.",
      "created_at": "2022-03-04T19:13:18Z",
      "updated_at": "2022-03-04T19:25:45Z"
    },
    {
      "author": "hunter86bg",
      "author_association": "NONE",
      "body": "> > Obviously something is wrong with the PowerShell for Linux. A very interesting [blog](https://www.bloggingforlogging.com/2020/08/21/wacky-wsman-on-linux/) that can shed the light , especially the topic where the PRs were rejected.\r\n> \r\n> For the record, the blog is definitely titled as being related to Linux..but if you look at the PRs [microsoft/omi#669](https://github.com/microsoft/omi/pull/669), [microsoft/omi#670](https://github.com/microsoft/omi/pull/670), and the blog, those are all related to building the library on MacOS (which is unsupported).\r\n> \r\n> The troubleshooting of GSSAPI and everything else from the blog is definitely on-topic, though, and it's super cool that the author is actively maintaining OMI for all of the platforms (including MacOS)...because honestly, it needs it.\r\n\r\nAnd he is also an Ansible developer (from Red Hat) focusing on Windows (pywinrm).",
      "created_at": "2022-03-04T19:19:43Z",
      "updated_at": "2022-03-14T18:40:37Z"
    },
    {
      "author": "celsolom",
      "author_association": "NONE",
      "body": "> Obviously something is wrong with the PowerShell for Linux. A very interesting [blog](https://www.bloggingforlogging.com/2020/08/21/wacky-wsman-on-linux/) that can shed the light , especially the topic where the PRs were rejected.\r\n> \r\n> For my Ubuntu18.04 connecting to Win10 Pro over winrm (http port, not joined in AD) , the following worked:\r\n> \r\n> ```\r\n> sudo apt install  gss-ntlmssp powershell\r\n> pwsh -Command 'Install-Module -Name PSWSMan'\r\n> sudo pwsh -Command 'Install-WSMan'\r\n> ```\r\n> \r\n> Validation:\r\n> \r\n> ```\r\n> $cred=Get-Credential \r\n> Enter-PSSession -ComputerName vmhostname.vmdomain -Credential $cred -Authentication Negotiate\r\n> ```\r\n> \r\n> File copy :\r\n> \r\n> ```\r\n> $pw = convertto-securestring -AsPlainText -Force -String PASS\r\n> $cred = new-object -typename System.Management.Automation.PSCredential -argumentlist \"USER\",$pw\r\n> $session = New-PSSession -ComputerName win10pro.localdomain -Credential $cred  -Authentication Negotiate\r\n> Copy-Item -Path 'C:\\Users\\USER\\Desktop\\somefile.txt' -Destination /tmp/ -FromSession $session\r\n> ```\r\nThanks!\r\nWorks for me on Manjaro with PS 7.2.1.",
      "created_at": "2022-03-14T18:02:21Z",
      "updated_at": "2022-03-14T18:02:21Z"
    },
    {
      "author": "hunter86bg",
      "author_association": "NONE",
      "body": "It's really interesting , as even 'install Install-WSMan' doesn't work when I want to copy from Linux to Windows 10 Pro. 'Copy-Item -ToSession ' just stucks.\r\nUsing pywinrm (python) is a kind of solution , but it doesn't support file transfer, so you have to base64 encode on one side and base64 decode on the other side.",
      "created_at": "2022-03-14T18:08:44Z",
      "updated_at": "2022-03-14T18:40:18Z"
    },
    {
      "author": "arizvisa",
      "author_association": "NONE",
      "body": "@hunter86bg not to police this thread, but that might be off-topic since we're in an issue tracker for keeping track of bugs and the thread could get closed or locked if it wanders too far from the original issue. this specific issue is with regards to entering/creating a PSsession and not necessarily performance issues encountered therein.\r\n\r\nplease create another issue describing your problem so that maybe the devers could look into it.",
      "created_at": "2022-03-14T18:30:02Z",
      "updated_at": "2022-03-14T18:30:02Z"
    },
    {
      "author": "lefort1",
      "author_association": "NONE",
      "body": "I spent days trying to figure out why the code below wasn't working on **Amazon Linux 2 (CentOS 7)**:\r\n```\r\n$serviceUserName = '<username>@my.company.domain'\r\n$secStringPassword = '<password>'\r\n\u200b$secStringPassword = ConvertTo-SecureString $servicePassword -AsPlainText -Force\r\n$credObject = New-Object System.Management.Automation.PSCredential ($serviceUserName, $secStringPassword)\r\n\r\n$ExSession = New-PSSession \u2013ConfigurationName Microsoft.Exchange \u2013ConnectionUri \u2018http://<hostname>.<domain>/PowerShell/?SerializationLevel=Full\u2019 -Credential $credObject -Authentication Kerberos\r\n```\r\n\r\nError message:\r\n```\r\nEnter-PSSession : Connecting to remote server hostname failed with the following error message : Kerberos verify cred with password failed No credentials were supplied, or the credentials were unavailable or inaccessible For more information, see the about_Remote_Troubleshooting Help topic.\r\n```\r\n\r\nTurns out the domain name in the username simply needed to be capitalized like so: `<username>@MY.COMPANY.DOMAIN`\r\n\r\nSorry if this is obvious, but hoping it helps someone else like me. ",
      "created_at": "2022-06-29T20:15:34Z",
      "updated_at": "2022-06-29T20:15:34Z"
    },
    {
      "author": "mtbiker-s",
      "author_association": "NONE",
      "body": "> > Installing `gss-ntlmssp` as stated in #11374 solved this issue for me.\r\n> > I'm using `-Authentication Negotiate`.\r\n> \r\n> It's solution.....\r\n\r\nThis worked for me on Centos 7 with Powershell 7.1.3",
      "created_at": "2022-08-02T18:00:17Z",
      "updated_at": "2022-08-02T18:00:17Z"
    },
    {
      "author": "ponchofiesta",
      "author_association": "NONE",
      "body": "> \r\n\r\n\r\n\r\n> > > Installing `gss-ntlmssp` as stated in #11374 solved this issue for me.\r\n> > > I'm using `-Authentication Negotiate`.\r\n> > \r\n> > \r\n> > It's solution.....\r\n> \r\n> This worked for me on Centos 7 with Powershell 7.1.3\r\n\r\nIt's a Debian package and not available in CentOS 7. There is `gssntlmssp` package but it is installed here and it's still not working.",
      "created_at": "2022-08-03T09:58:11Z",
      "updated_at": "2022-08-03T09:59:35Z"
    }
  ],
  "created_at": "2018-04-13T11:18:23Z",
  "labels": [
    "Issue-Question",
    "WG-Remoting"
  ],
  "number": 6647,
  "state": "open",
  "title": "Cannot enter/create PSSession from linux to windows machine",
  "updated_at": "2022-08-03T09:59:35Z"
}