{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6557",
  "author": "iSazonov",
  "body": "Currently we merged new ported version of Test-Connection cmdlet. See description in #5328.\r\n\r\nThe cmdlet has some issues on Unixes because of .Net Core API gaps. I'll open issues in .Net Core repo.\r\n\r\nNow we need feedbacks for Test-Connection cmdlet.\r\n I think we should break the feedback into two parts:\r\n1. scripting functionality\r\n- Is the design good?\r\n- Does the cmdlet work as expected?\r\n\r\n2. interactive functionality (display output)\r\n- Now we have implemented the output to the screen as progress bar and as text (without ETS) - we have to decide what is best to use.\r\n- There is also a question about output headers and footers - should we emulate Windows/Linux output or should follow PowerShell output style?\r\n\r\n\r\n",
  "closed_at": "2021-05-25T06:27:40Z",
  "comments": [
    {
      "author": "ConstantineK",
      "author_association": "NONE",
      "body": "Would it also be relevant to mention that using the -Quiet parameter currently still prints output, or should that be held for a different discussion/item? \r\n\r\n<img width=\"1228\" alt=\"screen shot 2018-04-07 at 11 21 24 am\" src=\"https://user-images.githubusercontent.com/6138430/38457410-c2cb94d6-3a55-11e8-9aee-7c8f77aade55.png\">\r\n",
      "created_at": "2018-04-07T16:21:09Z",
      "updated_at": "2018-04-07T16:21:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@ConstantineK Thanks! Any feedback is accepted. Please add in your post that is behavior you expect.",
      "created_at": "2018-04-07T18:04:05Z",
      "updated_at": "2018-04-07T18:04:05Z"
    },
    {
      "author": "ConstantineK",
      "author_association": "NONE",
      "body": "Roger that @iSazonov, I was trying to write a Pester test for the behavior but I am having a bit of an issue determining how to detect the console is being written to (and then fail that test) in https://github.com/PowerShell/PowerShell/blob/master/test/powershell/Modules/Microsoft.PowerShell.Management/Test-Connection.Tests.ps1#L61. \r\n\r\nIn the case of -Quiet, the existing version's documentation states in https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/test-connection?view=powershell-6#optional-parameters\r\n\r\n```Indicates that this cmdlet suppresses all errors. If any pings succeed, this cmdlet returns $True. If all pings fail, this cmdlet returns $False.```\r\n\r\nWhat it could additionally say is that the cmdlet actually suppresses all output besides the boolean result not just errors (as far as I can tell)\r\n\r\nWhen I perform the same action in PS 5.1:\r\n```\r\nPS C:\\Users\\ck\\> Test-Connection -Destination localhost -quiet\r\nTrue\r\n```\r\n\r\n",
      "created_at": "2018-04-07T20:23:04Z",
      "updated_at": "2018-04-07T20:25:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Test-Connection $UnreachableAddress -Count 1000 -Quiet\r\n\r\nIn the example an user can be confused due to lack of output. I'd prefer to see an progress bar.\r\n\r\n> how to detect the console is being written \r\n\r\nWe could use our [HelpersHostCS.psm1](https://github.com/PowerShell/PowerShell/blob/master/test/tools/Modules/HelpersHostCS/HelpersHostCS.psd1)",
      "created_at": "2018-04-08T12:04:18Z",
      "updated_at": "2018-04-08T12:04:29Z"
    },
    {
      "author": "ConstantineK",
      "author_association": "NONE",
      "body": "It might be confusing to a user, but I would argue that if they provide an additional parameter to Quiet the output, they are concretely asking for it to not present output except for true and false (as the docs say). \r\n\r\nThe use case is writing some basic application logic in PowerShell where I specifically want to suppress output, progress bars, and the rest, and just be able to simply say \"is this ip address available, true or false\" \r\n\r\nI will take a look at that host helpers, thanks!\r\n",
      "created_at": "2018-04-08T13:06:20Z",
      "updated_at": "2018-04-08T13:06:20Z"
    },
    {
      "author": "ConstantineK",
      "author_association": "NONE",
      "body": "So I was thinking something along the lines of this test passing  https://github.com/ConstantineK/PowerShell/commit/36aafe937fea5c6fe339cc25da025f27d6c44321\r\n\r\nAlong the same lines I think it would be useful for the command to suppress output to the console host but still return the more complex object, so maybe my suggestion is for an entirely different switch that just suppressed the console output? \r\n",
      "created_at": "2018-04-08T16:51:43Z",
      "updated_at": "2018-04-08T17:06:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We must strive for compatibility with Windows PowerShell.",
      "created_at": "2018-04-08T17:17:17Z",
      "updated_at": "2018-04-08T17:17:17Z"
    },
    {
      "author": "ConstantineK",
      "author_association": "NONE",
      "body": "I got you, but in that case then at least my original feedback is probably valid - in PS 5.1 -Quiet does not write to the console. ",
      "created_at": "2018-04-08T17:43:02Z",
      "updated_at": "2018-04-08T17:43:02Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I got curious about the behaviour here thanks to issue #7685 being raised. The main points raised there seem to be:\r\n\r\n* Progress bar display is very much counter to expected display. There may be some circumstances where it is *useful*, but at present it is only duplicating console display unnecessarily.\r\n* Console display is giving information that could be used programmatically, which is only being output at the end instead of outputting individual objects that could be used.\r\n* Per the above point, all the useful information is buried in a subproperty, and the default display of the summary objects gives absolutely no information\r\n* It was also raised that the current console display probably should be moved to the `Verbose` stream rather than being always output to host.\r\n\r\nI have most of this laid out in code form as a bit of a proof-of-concept (see [this comment](https://github.com/PowerShell/PowerShell/issues/7685#issuecomment-431627292) for sample output), and I feel it is more responsive and easier to understand interactively *and* work with programmatically where needed... though I'm sure my code leaves something to be desired.\r\n\r\n@iSazonov's point about this potential halting condition giving no output is very much valid:\r\n```powershell\r\nTest-Connection $UnreachableAddress -Count 1000 -Quiet\r\n```\r\n\r\nI would suggest that `WriteProgress` only be used in cases where it can be *reasonably expected* that output will take some time -- for example, when `-Count` is supplied a value that is expected to take some time (e.g., any value higher than 15, or something).\r\n\r\nAlternatively, is it at all meaningful for a user to ask for 1000 connection attempts and then ask for a true/false result? Perhaps -Count and -Quiet should be in different parameter sets? Perhaps a sensible limit should be applied to -Count when -Quiet is applied also?",
      "created_at": "2018-10-21T12:46:50Z",
      "updated_at": "2018-10-21T12:54:52Z"
    },
    {
      "author": "RichardSiddaway",
      "author_association": "NONE",
      "body": "I think the progress bar should be an opt in feature.  while\r\n\r\nTest-Connection $UnreachableAddress -Count 1000 -Quiet\r\n\r\ncould be run its much more likely that -Count will be set to a much lower value.   If I was waiting on a system becoming available I'd just test once with the test in a loop I could break out of when I got a successful result",
      "created_at": "2018-10-21T14:01:54Z",
      "updated_at": "2018-10-21T14:01:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Perhaps -Count and -Quiet should be in different parameter sets?\r\n\r\nUser might want to programmatically measure delays or lost packets.\r\nThere are still many conflicting scenarios. Otherwise, I would have done it. :-)\r\n\r\n> If I was waiting on a system\r\n\r\nIs the Ctrl-C stopping not working?\r\n",
      "created_at": "2018-10-21T16:57:38Z",
      "updated_at": "2018-10-21T16:57:38Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Well, in those instances I don't think anyone would want to use `-Quiet` in most cases... but yes, I agree that in general we shouldn't place arbitrary restrictions like that.\r\n\r\nFrom my testing, Ctrl+C can *seem* like it isn't stopping for several seconds; the standard timeout seems to be a few seconds, and the cancellation isn't registered until the next response is received or the timeout expires. So it seems sluggish but does eventually stop.",
      "created_at": "2018-10-21T17:04:20Z",
      "updated_at": "2018-10-21T17:04:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> From my testing, Ctrl+C can seem like it isn't stopping for several seconds; \r\n\r\nWe do -Count in cmdlet cycle and 4 attempts per second in CoreFX if I remember right. (CoreFX uses ping utility (!) on Unix when non-elevated)",
      "created_at": "2018-10-21T17:12:00Z",
      "updated_at": "2018-10-21T17:13:45Z"
    },
    {
      "author": "RichardSiddaway",
      "author_association": "NONE",
      "body": "-Count and -Quiet need to be in the same parameter set as\r\n\r\ntest-Connection <computer> -Count 1 -Quiet  \r\n\r\nis a common scenario especially in scripts where you're running against a large number of machines and want to determine if you can reach a machine before proceeding with next steps\r\n",
      "created_at": "2018-10-21T17:30:16Z",
      "updated_at": "2018-10-21T17:30:16Z"
    }
  ],
  "created_at": "2018-04-04T08:29:09Z",
  "labels": [
    "Issue-Discussion",
    "WG-Cmdlets-Management"
  ],
  "number": 6557,
  "state": "closed",
  "title": "Need feedback for ported Test-Connection cmdlet",
  "updated_at": "2021-05-25T06:27:40Z"
}