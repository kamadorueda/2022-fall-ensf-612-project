{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13727",
  "author": "mklement0",
  "body": "## Summary of the new feature/enhancement\r\n\r\nv7.0 added support to `Select-Object` for treating the entries of `[hashtable]` input objects like properties that can be selected; e.g.:\r\n\r\n```powershell\r\n# v7+ only:\r\n# In v6-, this would only work with a [pscustomobject] \"cast\".\r\nPS> @{ one = 1; two = 2; three = 3 } | Select-Object three, one\r\nthree one\r\n----- ---\r\n    3   1\r\n```\r\n\r\nThis interchangeable use of hashtables and (custom) objects is useful, and also implemented in other cmdlets, such as `ConvertTo-Json`.\r\n\r\nAs a user, I'd like to see the same support implemented for _other dictionary-like types_ as well, notably _ordered_ hashtables and generic dictionaries:\r\n\r\n```powershell\r\n# WISHFUL THINKING - does NOT currently work as expected (the named entries' values aren't extracted).\r\nPS> [ordered] @{ one = 1; two = 2; three = 3 } | Select-Object three, one\r\nthree one\r\n----- ---\r\n    3   1\r\n```\r\n\r\n```powershell\r\n# WISHFUL THINKING - does NOT currently work as expected (the named entries' values aren't extracted).\r\nPS> $gd = [System.Collections.Generic.Dictionary[string, object]]::new(); $gd.Add('one', 1); $gd.Add('two', 2); $gd.Add('three', 3); $gd | Select-Object three, one\r\nthree one\r\n----- ---\r\n    3   1\r\n```\r\n\r\n**Backward compatibility considerations:**\r\n\r\nWhile technically a breaking change - currently _only_ the dictionary's _own_ properties rather than its entries are selected from - it is the same change that has already been deemed acceptable for `[hashtable]` instances.\r\nThe dictionary's own properties will still be selectable, but will be shadowed by entries with keys of the same name.\r\n\r\n## Proposed implementation details\r\n\r\nSupport treating the entries of any input type that implements `IDictionary` as properties.\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Should be pretty straightforward to do... Probably just swap out some `Hashtable` for `IDictionary` in the code paths here. I might take a quick look, see what's needed for this to work.",
      "created_at": "2020-10-01T15:03:33Z",
      "updated_at": "2020-10-01T15:03:33Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Looks like the main pain point will be here:\r\n\r\nhttps://github.com/powershell/powershell/blob/4b9b0788ed28ea6d463ce857d1ed81bd4a977a59/src/System.Management.Automation/FormatAndOutput/common/Utilities/Mshexpression.cs#L363-L372\r\n\r\nNames and comments around these code paths will need to be updated too, but that's probably the most questionable part of it, I'm not yet sure if just passing in the wrapped dictionary is enough, I'll have to investigate the languageprimitives method as well.\r\n\r\nFairly doable, there's a good trail there, I'll have a look if I get the time, but that's the main bit if anyone else wants to have a crack at it.\n\n<blockquote><img src=\"https://repository-images.githubusercontent.com/49609581/aad0ad80-cdec-11ea-8248-a37bc0571bfd\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell\">PowerShell/PowerShell</a></strong></div><div>PowerShell for every system! Contribute to PowerShell/PowerShell development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2020-10-01T15:24:33Z",
      "updated_at": "2020-10-01T15:24:35Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I did a bit more digging, and it looks like this might be a tad complex to sort out. Mainly because the handler for this conversion is in LanguagePrimitives, and I'm unsure whether enhancing that to allow conversion from any IDictionary to PSCustomObject is acceptable for this case, it's a bit of a broader stroke that might suddenly make PSCustomObject _casts_ also work that way \ud83e\udd14 ",
      "created_at": "2020-10-06T12:16:52Z",
      "updated_at": "2020-10-06T12:16:52Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> it's a bit of a broader stroke that might suddenly make PSCustomObject _casts_ also work that way \ud83e\udd14\r\n\r\nThat'd be pretty dope tho \ud83d\ude2e \r\n\r\nOnly thing it could break (that I can think of in the limited capacity I've thought about it) is if someone for some reason was trying to simply wrap a dictionary in a `PSObject` by casting to `PSCustomObject`.",
      "created_at": "2020-10-06T12:25:00Z",
      "updated_at": "2020-10-06T12:25:00Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I'd imagine one or two other code paths might need some small tweaks, but yeah that's within the realm of possibility for sure. Just a matter of being aware that PSObject properties expect strings and if you have a dictionary with non-string keys it might do weird things or not work. \ud83e\udd37 ",
      "created_at": "2020-10-06T12:59:14Z",
      "updated_at": "2020-10-06T12:59:14Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "To be fair, `hashtable` is basically `Dictionary<object, object>` so that's already an issue \ud83d\ude00 ",
      "created_at": "2020-10-06T13:05:11Z",
      "updated_at": "2020-10-06T13:05:11Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "You know, that's a good point. Maybe we should go down that route then.... \ud83d\ude02 ",
      "created_at": "2020-10-06T13:06:26Z",
      "updated_at": "2020-10-06T13:06:26Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I agree that also being able to cast any dictionary to a custom object would be helpful, and note that it already works for `[hashtable]` and ordered hashtables (`System.Collections.Specialized.OrderedDictionary`), but not for `System.Collections.Generic.Dictionary[object, object]`.\r\n\r\n```powershell\r\n# Note: If you cast to [psobject] instead of [pscustomobject], all types are effectively retained (but\r\n#      wrapped in a typically invisible [psobject] instance).\r\nPS> @{ one = 1; two = 2 },\r\n    [ordered] @{ one = 1; two = 2 }, \r\n    $($gd = [System.Collections.Generic.Dictionary[object, object]]::new(); $gd.Add('one', 1); $gd.Add('two', 2); $gd) |\r\n      foreach { ([pscustomobject] $_).GetType().Name }\r\n\r\nPSCustomObject\r\nPSCustomObject\r\nDictionary`2\r\n```\r\n\r\nAs for what could break, @SeeminglyScience: It's an exotic scenario to begin with, but given that there seems to be built-in magic to distinguish between a `[psobject]` and a `[pscustomobject]` cast (even though _both_ accelerators refer to `System.Management.Automation.PSObject`), one would certainly hope that someone who did that used `[psobject]`, not `[pscustomobject]`, for conceptual clarity alone.\r\n\r\nAs for future dope, if you will: being able to cast `[pscustomobject]` instances back to `[hashtable]` or (more awkwardly, but more usefully) to `[System.Collections.Specialized.OrderedDictionary]` or even `[System.Collections.Generic.Dictionary[string, object]]` would be nice as well.\r\n\r\n\r\n",
      "created_at": "2020-10-06T13:14:26Z",
      "updated_at": "2020-10-06T13:25:16Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> As for what could break, @SeeminglyScience: It's an exotic scenario to begin with, but given that there seems to be built-in magic to distinguish between a `[psobject]` and a `[pscustomobject]` cast (even though _both_ accelerators refer to `System.Management.Automation.PSObject`), one would certainly hope that someone who did that used `[psobject]`, not `[pscustomobject]`, for conceptual clarity alone.\r\n\r\nYeah I agree.  The chances that someone knows enough to know that wrapping in pso's is a thing, has a use case for doing it explicitly, and *still* uses `PSCustomObject` instead of `psobject`, are *incredibly* slim.",
      "created_at": "2020-10-06T13:24:15Z",
      "updated_at": "2020-10-06T13:24:15Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "Allowing implicit conversion from any dictionary to a custom object sounds like a great idea, we already support that for concrete target types:\r\n\r\n```\r\nPS ~> class T { [string]$A; [int]$B }\r\nPS ~> $dict = [System.Collections.Generic.Dictionary[object,object]]::new()\r\nPS ~> $dict['A'] = 'Some String'\r\nPS ~> $dict['B'] = 123\r\nPS ~> $dict -as [T]\r\n\r\nA             B\r\n-             -\r\nSome String 123\r\n```\r\n\r\n.... but I'm not sure I'm convinced about selecting dictionary entries with `Select-Object` - how would you resolve `@{Keys = '123'} |Select-Object Keys`?",
      "created_at": "2020-10-10T14:13:05Z",
      "updated_at": "2020-10-10T14:13:05Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@IISResetMe It already works for hashtable's (added in 7.0).  This issue is just about extending it to any other `IDictionary`.  Currently it works the same as normal property binding (e.g. it'll return `123` in that example).",
      "created_at": "2020-10-10T14:43:09Z",
      "updated_at": "2020-10-10T14:43:56Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@IISResetMe \r\n\r\n> we already support that for concrete target types:\r\n\r\nNeat - didn't know that.\r\n\r\nTo add to @SeeminglyScience's comment:\r\n\r\nIndeed, the decision has already been made to _shadow_ the dictionary's own properties - which is the sensible choice in my view - after all, if you send an object to `Select-Object`, your intent is to select from its _members_ and it makes sense to conceive of the dictionary _entries_ as such.\r\n\r\nTo get the dictionary's own `.Keys` property value, just call `$dict.Keys` or - if you're really sending multiple dictionaries to the pipeline whose own properties you want to query, `$dict, $dict | % { $_.Keys }`\r\n\r\nNote, however, that it is the inverse of how it works in member enumeration (see #7445):\r\n\r\n```powershell\r\nPS> ([pscustomobject] @{ count = 10 }, [pscustomobject] @{ count = 20 }).Count\r\n2  # collection's own property took precedence\r\n```\r\n\r\n\r\n",
      "created_at": "2020-10-10T14:48:04Z",
      "updated_at": "2020-10-10T18:58:25Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Just to tie this to the earlier, related proposal to make `Export-Csv` / `ConvertTo-Csv` support `IDictionary` input meaningfully too: #10999",
      "created_at": "2020-10-10T18:54:43Z",
      "updated_at": "2020-10-10T18:55:04Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Aye, I've already implemented that one, think it's just waiting for @SteveL-MSFT or someone else to give #11029 a look over. I was hoping to get it in for 7.1, but I guess it's waited too long for that now. \ud83d\ude42 \r\n\r\nWould be nice to have this as a complement to it as well, but that'll be a separate  of course.",
      "created_at": "2020-10-10T19:55:28Z",
      "updated_at": "2020-10-10T19:55:28Z"
    }
  ],
  "created_at": "2020-10-01T14:33:54Z",
  "number": 13727,
  "state": "open",
  "title": "Make Select-Object treat any IDictionary type's entries as properties, as it already does for a [hasthable]'s",
  "updated_at": "2020-10-10T19:55:28Z"
}