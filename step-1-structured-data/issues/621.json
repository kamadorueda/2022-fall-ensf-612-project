{
  "_url": "https://github.com/PowerShell/PowerShell/issues/621",
  "author": "andschwa",
  "body": "If you make a symbolic link to a directory on Windows (with administrative privileges of course), and then try to delete said link, you get this:\n\n```\n|Y> Yes |A> Yes to All |N> No |L> No to All |S> Suspend [Default is (Y]\nPS C:\\Users\\anschwa\\src\\PowerShell> remove-item -Force .\\foobar\\\nConfirm\nThe item at C:\\Users\\anschwa\\src\\PowerShell\\foobar\\ has children and the Recurse parameter was not specified. If you con\ntinue, all children will be removed with the item. Are you sure you want to continue?\n\n|Y> Yes |A> Yes to All |N> No |L> No to All |S> Suspend [Default is (Y]\nn\nPS C:\\Users\\anschwa\\src\\PowerShell> remove-item -Force .\\foobar\\ -Recurse\nremove-item : There is a mismatch between the tag specified in the request and the tag present in the reparse point\nAt line:1 char:1\n+ remove-item -Force .\\foobar\\ -Recurse\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Remove-Item], Win32Exception\n    + FullyQualifiedErrorId : System.ComponentModel.Win32Exception,Microsoft.PowerShell.Commands.RemoveItemCommand\n\nPS C:\\Users\\anschwa\\src\\PowerShell> $error[0].Exception.StackTrace\n   at Microsoft.PowerShell.Commands.InternalSymbolicLinkLinkCodeMethods.DeleteJunction(String junctionPath) in C:\\Users\\\nanschwa\\src\\PowerShell\\src\\monad\\monad\\src\\namespaces\\FileSystemProvider.cs:line 8447\n   at Microsoft.PowerShell.Commands.FileSystemProvider.RemoveDirectoryInfoItem(DirectoryInfo directory, Boolean recurse,\n Boolean force, Boolean rootOfRemoval) in C:\\Users\\anschwa\\src\\PowerShell\\src\\monad\\monad\\src\\namespaces\\FileSystemProvi\nder.cs:line 2859\n   at Microsoft.PowerShell.Commands.FileSystemProvider.RemoveItem(String path, Boolean recurse) in C:\\Users\\anschwa\\src\\\nPowerShell\\src\\monad\\monad\\src\\namespaces\\FileSystemProvider.cs:line 2733\n   at System.Management.Automation.Provider.ContainerCmdletProvider.RemoveItem(String path, Boolean recurse, CmdletProvi\nderContext context) in C:\\Users\\anschwa\\src\\PowerShell\\src\\monad\\monad\\src\\namespaces\\ContainerProviderBase.cs:line 422\n   at System.Management.Automation.SessionStateInternal.RemoveItem(CmdletProvider providerInstance, String path, Boolean\n recurse, CmdletProviderContext context) in C:\\Users\\anschwa\\src\\PowerShell\\src\\monad\\monad\\src\\engine\\SessionStateConta\niner.cs:line 1152\n```\n\n`Remove-Item` is thinking the link is a directory and so failing to delete it.\n\nIf the code is changed such that `File.Delete(junction)` is used instead of native calls, you get:\n\n```\nPS C:\\Users\\anschwa\\src\\PowerShell> rm .\\foobar\\ -Force\nConfirm\nThe item at C:\\Users\\anschwa\\src\\PowerShell\\foobar\\ has children and the Recurse parameter was not specified. If you con\ntinue, all children will be removed with the item. Are you sure you want to continue?\n\n|Y> Yes |A> Yes to All |N> No |L> No to All |S> Suspend [Default is (Y]\ny\nrm : Index (zero based) must be greater than or equal to zero and less than the size of the argument list.\nAt line:1 char:1\n+ rm .\\foobar\\ -Force\n+ ~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Remove-Item], FormatException\n    + FullyQualifiedErrorId : System.FormatException,Microsoft.PowerShell.Commands.RemoveItemCommand\n\nPS C:\\Users\\anschwa\\src\\PowerShell> $error[0].Exception.StackTrace\n   at System.Text.StringBuilder.AppendFormatHelper(IFormatProvider provider, String format, ParamsArray args)\n   at System.String.FormatHelper(IFormatProvider provider, String format, ParamsArray args)\n   at System.String.Format(IFormatProvider provider, String format, Object arg0)\n   at System.Management.Automation.Internal.StringUtil.Format(String formatSpec, Object o) in C:\\Users\\anschwa\\src\\Power\nShell\\src\\monad\\monad\\src\\utils\\StringUtil.cs:line 18\n   at Microsoft.PowerShell.Commands.FileSystemProvider.RemoveDirectoryInfoItem(DirectoryInfo directory, Boolean recurse,\n Boolean force, Boolean rootOfRemoval) in C:\\Users\\anschwa\\src\\PowerShell\\src\\monad\\monad\\src\\namespaces\\FileSystemProvi\nder.cs:line 2863\n   at Microsoft.PowerShell.Commands.FileSystemProvider.RemoveItem(String path, Boolean recurse) in C:\\Users\\anschwa\\src\\\nPowerShell\\src\\monad\\monad\\src\\namespaces\\FileSystemProvider.cs:line 2733\n   at System.Management.Automation.Provider.ContainerCmdletProvider.RemoveItem(String path, Boolean recurse, CmdletProvi\nderContext context) in C:\\Users\\anschwa\\src\\PowerShell\\src\\monad\\monad\\src\\namespaces\\ContainerProviderBase.cs:line 422\n   at System.Management.Automation.SessionStateInternal.RemoveItem(CmdletProvider providerInstance, String path, Boolean\n recurse, CmdletProviderContext context) in C:\\Users\\anschwa\\src\\PowerShell\\src\\monad\\monad\\src\\engine\\SessionStateConta\niner.cs:line 1152\n```\n\nIt fails even sooner (I think because there aren't actually any children to pass delete recursively, so it gets an empty list; just a guess).\n\nIf you use `Directory.Delete(junctionPath)`, it works just fine!\n",
  "closed_at": "2017-05-02T04:25:44Z",
  "comments": [
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "So, `Remove-Item` needs to a) not ask to recursively delete a symbolic link to a directory, and b) not recursively delete the directory, just delete the link. There's a right way to do this and a quick way to do this; as it is now, the `FileSystemProvider` code is all hacked up, and needs to be fixed.\n\nI'm going to disable the symbolic link tests for Windows until we can solve this correctly.\n",
      "created_at": "2016-03-04T02:04:50Z",
      "updated_at": "2016-03-04T02:04:50Z"
    },
    {
      "author": "palladia",
      "author_association": "CONTRIBUTOR",
      "body": "Problem is, sym links behave differently on Windows vs. Linux.  For a symlink that points to a directory on Linux, deleting the link does not impact the directory it points to.  But I believe for windows, symlinks  are much closer to hard links, and deleting it will delete what the link points to.\n\nDo we have latest/greatest fix from CoreFx?\n",
      "created_at": "2016-03-04T19:58:09Z",
      "updated_at": "2016-03-04T19:58:09Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@palladia Can you test this out again? We have the latest and greatest .NET Core packages.\n",
      "created_at": "2016-04-10T03:15:47Z",
      "updated_at": "2016-04-10T03:15:47Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Just FYI, this works correctly on Linux, except that it asks to remove the item recursively (even though all it does is remove the link).\n",
      "created_at": "2016-04-25T16:45:03Z",
      "updated_at": "2016-04-25T16:45:03Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Moving this to the next milestone as we're pending ported DVT/BRT tests.\n",
      "created_at": "2016-04-28T20:56:00Z",
      "updated_at": "2016-04-28T20:56:00Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "We have the tests available now.\n",
      "created_at": "2016-05-05T16:02:23Z",
      "updated_at": "2016-05-05T16:02:23Z"
    },
    {
      "author": "palladia",
      "author_association": "CONTRIBUTOR",
      "body": "Have we tried them?  Where are they?\n",
      "created_at": "2016-05-05T16:07:37Z",
      "updated_at": "2016-05-05T16:07:37Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "https://github.com/PowerShell/PowerShell/tree/jimtru-linktests\n",
      "created_at": "2016-05-05T16:09:44Z",
      "updated_at": "2016-05-05T16:09:44Z"
    },
    {
      "author": "palladia",
      "author_association": "CONTRIBUTOR",
      "body": "Do you know if the work is complete?  The comment says it's still a work-in-progress.  I downloaded it onto Linux, and 11 tests fail.\n",
      "created_at": "2016-05-05T18:52:50Z",
      "updated_at": "2016-05-05T18:52:50Z"
    },
    {
      "author": "asklar",
      "author_association": "NONE",
      "body": "repro when running Remove-Item -Recurse -Force on a folder which contains a symlink to another folder.\nName                           Value\n\n---\n\nPSVersion                      5.1.14951.1001\nPSEdition                      Desktop\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\nBuildVersion                   10.0.14951.1001\nCLRVersion                     4.0.30319.42000\nWSManStackVersion              3.0\nPSRemotingProtocolVersion      2.3\nSerializationVersion           1.1.0.1\n",
      "created_at": "2016-10-21T22:54:42Z",
      "updated_at": "2016-10-21T22:54:42Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "This bug is existent in Windows PowerShell targetting FullCLR, re-opening.\n",
      "created_at": "2016-10-21T22:55:07Z",
      "updated_at": "2016-10-21T22:55:07Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@joeyaiello this bug has been fixed in PowerShell Core per #920; it should probably be slated for backport to the next PowerShell Full release.\n",
      "created_at": "2016-10-21T22:57:04Z",
      "updated_at": "2016-10-21T22:57:04Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@andschwa ps-committee needs to see a test that shows the expected behavior on Windows and Linux\n",
      "created_at": "2016-11-02T23:26:05Z",
      "updated_at": "2016-11-02T23:26:05Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@stevel-msft I don't follow.\n",
      "created_at": "2016-11-02T23:33:25Z",
      "updated_at": "2016-11-02T23:33:25Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@andschwa when we reviewed this yesterday, we didn't understand the expected behavior on Windows and Linux.  we tried a few things with symlinks on both and it seemed consistent in that the soft-link got removed and not the target.  perhaps making it more clear with expected/actual on both Windows and Linux would help us. \n",
      "created_at": "2016-11-03T16:10:29Z",
      "updated_at": "2016-11-03T16:10:29Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT Correct, the issue is fixed in PowerShell 6.0, there should be symlink tests in the  test directory. The issue is that PowerShell 5 on Windows is broken, per @asklar's bug report.\n",
      "created_at": "2016-11-03T16:31:46Z",
      "updated_at": "2016-11-03T16:31:46Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@andschwa we tried to repro it on Windows PowerShell 5.1 as well and it seemed to have the same behavior as PowerShell Core 6.0 on Windows. Could you provide a simple repro? \n",
      "created_at": "2016-11-11T23:08:24Z",
      "updated_at": "2016-11-11T23:08:24Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@asklar would you please provide them with a simple repro?\n",
      "created_at": "2016-11-12T05:12:25Z",
      "updated_at": "2016-11-12T05:12:25Z"
    },
    {
      "author": "sandersaares",
      "author_association": "NONE",
      "body": "I ran into this issue today, being unable to remove a symlink on Windows Server 2016. Here is a stepby-step PowerShell session repro case that hopefully illustrates the issue:\r\n\r\n```\r\nPS C:\\> & cmd /c mklink /d c:\\foo c:\\inetpub\r\nsymbolic link created for c:\\foo <<===>> c:\\inetpub\r\nPS C:\\> remove-item c:\\foo\r\n\r\nConfirm\r\nThe item at C:\\foo has children and the Recurse parameter was not specified. If you continue, all children will be removed with the\r\n item. Are you sure you want to continue?\r\n[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is \"Y\"): y\r\nremove-item : C:\\foo is an NTFS junction point. Use the Force parameter to delete or modify this object.\r\nAt line:1 char:1\r\n+ remove-item c:\\foo\r\n+ ~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : WriteError: (C:\\foo:DirectoryInfo) [Remove-Item], IOException\r\n    + FullyQualifiedErrorId : DirectoryNotEmpty,Microsoft.PowerShell.Commands.RemoveItemCommand\r\n\r\nPS C:\\> remove-item -force c:\\foo\r\n\r\nConfirm\r\nThe item at C:\\foo has children and the Recurse parameter was not specified. If you continue, all children will be removed with the\r\n item. Are you sure you want to continue?\r\n[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is \"Y\"): y\r\nremove-item : There is a mismatch between the tag specified in the request and the tag present in the reparse point\r\nAt line:1 char:1\r\n+ remove-item -force c:\\foo\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Remove-Item], Win32Exception\r\n    + FullyQualifiedErrorId : System.ComponentModel.Win32Exception,Microsoft.PowerShell.Commands.RemoveItemCommand\r\n\r\nPS C:\\> (get-host).version\r\n\r\nMajor  Minor  Build  Revision\r\n-----  -----  -----  --------\r\n5      1      14393  206\r\n```",
      "created_at": "2016-11-30T06:02:26Z",
      "updated_at": "2016-11-30T06:08:26Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee thanks @sandersaares for the repro, we need @joeyaiello to see if this repros on Core and if so, we should fix this",
      "created_at": "2016-12-01T00:16:50Z",
      "updated_at": "2016-12-01T00:16:50Z"
    },
    {
      "author": "artisticcheese",
      "author_association": "NONE",
      "body": "Happening on Win10 annivesary with Powershell 5.1 trying to remove folder left by docker installation\r\n```\r\n\r\nPS C:\\Users\\admin> Remove-Item C:\\ProgramData\\docker\\ -Force -Recurse\r\nRemove-Item : There is a mismatch between the tag specified in the request and the tag present in the reparse point\r\nAt line:1 char:1\r\n+ Remove-Item C:\\ProgramData\\docker\\ -Force -Recurse\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Remove-Item], Win32Exception\r\n    + FullyQualifiedErrorId : System.ComponentModel.Win32Exception,Microsoft.PowerShell.Commands.RemoveItemCommand\r\n```",
      "created_at": "2016-12-01T20:57:22Z",
      "updated_at": "2016-12-01T20:57:59Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@sandersaares thanks for the more simple repro! I can confirm that this does happen, but the hunch from @palladia that the children actually get deleted is incorrect.\r\n\r\nSo to clarify, even after specifying `-Force`, only the symbolic link is deleted and not the contents of the folder to which the link points. \r\n\r\nThe behavior that definitely needs to be fixed here is giving the confirmation prompt about the children and the Recurse parameter. The behavior that should be discussed is whether we should require a `-Force` for symbolic links. I would say 'no', but that would likely be a breaking change (so I'm re-adding `Review - Committee` here). \r\n\r\nAnd this is all on the latest 6.0 alpha:\r\n\r\n```\r\nName                           Value\r\n----                           -----\r\nGitCommitId                    v6.0.0-alpha.13\r\nPSRemotingProtocolVersion      2.3\r\nPSEdition                      Core\r\nWSManStackVersion              3.0\r\nCLRVersion\r\nBuildVersion                   3.0.0.0\r\nPSVersion                      6.0.0-alpha\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nSerializationVersion           1.1.0.1\r\n```\r\n\r\n@artisticcheese that looks like a very different error message. Could you file another bug? And, if possible, repro on 6.0 to make sure it's happening on PowerShell Core as well? ",
      "created_at": "2016-12-02T18:23:54Z",
      "updated_at": "2016-12-02T18:23:54Z"
    },
    {
      "author": "sandersaares",
      "author_association": "NONE",
      "body": "Note that my example also gave the same error message as @artisticcheese got, after adding the -Force parameter.\r\n\r\nAnd to be clear, the symlink was never actually deleted by Remove-Item. I have to drop down to `cmd /c rmdir /s /q c:\\foo` to actually delete it.",
      "created_at": "2016-12-05T07:42:05Z",
      "updated_at": "2016-12-05T07:42:05Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "or ```[IO.Directory]::Delete('c:\\foo')```\r\nBut it is a lot of typing ...",
      "created_at": "2016-12-06T21:57:21Z",
      "updated_at": "2016-12-06T21:57:21Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee agrees that -force and message only relevant to removing the folder should not be there for removing a folder symlink as it should be the same as removing a file",
      "created_at": "2016-12-08T17:34:10Z",
      "updated_at": "2016-12-08T17:34:10Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "So in other words, we shouldn't require the use of `-Force` to remove a symlink, and we should not traverse the symlink at remove-time to delete the files that it targets. Treat the symlink itself as you would any other file. ",
      "created_at": "2017-03-20T23:54:59Z",
      "updated_at": "2017-03-20T23:54:59Z"
    },
    {
      "author": "Schroedingers-Cat",
      "author_association": "NONE",
      "body": "I'm running powershell 5.1 on Win10. The use of \"Remove-Item\" on a directory fails due to some subdirectories containing symlinks. Is there a way to delete the directory from powershell 5.1?",
      "created_at": "2017-03-25T18:05:26Z",
      "updated_at": "2017-03-25T18:05:26Z"
    },
    {
      "author": "Schroedingers-Cat",
      "author_association": "NONE",
      "body": "I must be doing something wrong. Anyway, I found a way to get it done, at least.\r\nFrom a powershell script, do\r\n```powershell\r\n[System.IO.Directory]::Delete(\"C:\\folder\\to\\delete\", $true)\r\n```\r\nHowever, from a powershell terminal session, you have to:\r\n```powershell\r\ncmd /c \"rmdir C:\\folder\\to\\delete\"\r\n```\r\nYou cannot use the latter in a powershell script and you cannot use the first on a powershell terminal session.",
      "created_at": "2017-03-25T18:27:34Z",
      "updated_at": "2017-03-25T18:27:34Z"
    },
    {
      "author": "jeffbi",
      "author_association": "CONTRIBUTOR",
      "body": "@Schroedingers-Cat I've been trying this out on a Windows 10 box using PowerShell 5.1:\r\n```\r\nPS > $PsVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.14393.953\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.14393.953\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\nI'm seeing that the methods you mention work the same whether run from the PowerShell prompt or from a script.\r\n\r\nI've been testing both, from the prompt and within script, using multiple link types within the sub-directory to be removed, and the only issue I've seen is when using the `[System.IO.Directory]::Delete` method when the sub-directory contains a `Junction`. In that case, the `Delete` call throws an error saying  access to the junction is denied. It actually isn't, and the junction is in fact deleted, but because the error \"occurred\" the sub-directory is not deleted. Calling `Delete` again will delete the sub-directory.\r\n\r\nFor all other types of links, both methods seem to work equally well.",
      "created_at": "2017-03-30T20:14:11Z",
      "updated_at": "2017-03-30T20:14:11Z"
    },
    {
      "author": "Schroedingers-Cat",
      "author_association": "NONE",
      "body": "Just tested on a different machine and both methods work there. \r\nWell, maybe something was wrong with the paths-variable when I encountered the issue first.\r\n\r\nBtw. when will we be able to use \"Remove-Item\" instead?",
      "created_at": "2017-03-30T21:02:12Z",
      "updated_at": "2017-03-30T21:02:30Z"
    },
    {
      "author": "jeffbi",
      "author_association": "CONTRIBUTOR",
      "body": "@Schroedingers-Cat In general, `Remove-Item` is working in PowerShell 6. I was able to remove a sub-directory full of all kinds of link types with\r\n```\r\nRemove-Item sub -Force -Recurse\r\n```\r\nWhat we're working on here is the correct use (or non-use) of -Force and -Recurse when removing a link directly.",
      "created_at": "2017-03-30T21:41:46Z",
      "updated_at": "2017-03-30T21:41:46Z"
    },
    {
      "author": "jeffbi",
      "author_association": "CONTRIBUTOR",
      "body": "@joeyaiello Just to be sure I'm doing the right thing. Using `Remove-Item symlink` on a either a directory symbolic link or a junction will remove the link but not attempt to traverse the directory that `symlink` points to. What, then, is the expected behavior if the cmdlet is invoked with `-Recurse`? Should it delete the contents of the linked-to directory then delete the link, or ignore the `-Recurse` flag and simply delete the link?",
      "created_at": "2017-04-24T03:42:58Z",
      "updated_at": "2017-04-24T03:42:58Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "There has to be a precedence for this in the unix world.\r\nBut anything but simply deleting the link seems dangerous.",
      "created_at": "2017-04-24T06:30:41Z",
      "updated_at": "2017-04-24T06:30:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "My expectations:\r\nRemove-Item symlink  - remove only symlink.\r\nRemove-Item symlink -Recurse - remove symlink and target too with confirmation by default (w/o with -Force)\r\n",
      "created_at": "2017-04-24T06:37:06Z",
      "updated_at": "2017-04-24T06:37:06Z"
    },
    {
      "author": "jeffbi",
      "author_association": "CONTRIBUTOR",
      "body": "The unix `rm` command even with the `-r` switch removes only the link itself. That's my preference for how the cmdlet should work as well, but I wasn't sure how well silently ignoring a cmdlet option would go over.\r\n\r\nThere are already two differing opinions, which is a big part of why I posed the question.",
      "created_at": "2017-04-24T07:26:15Z",
      "updated_at": "2017-04-24T07:26:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I agree that this is special case and we should follow Unix `rm` .\r\n\r\n> I wasn't sure how well silently ignoring a cmdlet option would go over\r\n\r\nIt seems we usually use non-terminating error. User always can suppress it by \"SilentlyContinue\".",
      "created_at": "2017-04-24T07:41:56Z",
      "updated_at": "2017-04-24T07:41:56Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@jeffbi: that sounds right to me. And a non-terminating error still feels a little weird. For example, it may be that you're deleting a regular folder full of folders full of symlinks, and you want to use the `-Recurse` parameter to delete all of the symlinks. That shouldn't really result in an error just because you don't traverse the symlinks.\r\n\r\nIf you're absolutely married to the idea, @iSazonov, a warning might be in order, but I don't think anything more than that is necessary.  ",
      "created_at": "2017-04-24T16:38:40Z",
      "updated_at": "2017-04-24T16:38:40Z"
    },
    {
      "author": "jeffbi",
      "author_association": "CONTRIBUTOR",
      "body": "I've put up a PR for this. At the moment the cmdlet silently ignores the -Recurse option it if is given. I'll change that if required.",
      "created_at": "2017-04-24T18:44:34Z",
      "updated_at": "2017-04-24T18:44:34Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@jeffbi be careful with that, as `rm -r linktofolder` does _not_ recursively delete the contents of the linked folder, unless you add a `/`, that is, `rm -r linktofolder/` will recursively delete the contents of the linked folder. I think it treats the link as a link when the slash is missing, and follows the link if the trailing slash is added.",
      "created_at": "2017-04-25T17:38:50Z",
      "updated_at": "2017-04-25T17:38:50Z"
    },
    {
      "author": "jeffbi",
      "author_association": "CONTRIBUTOR",
      "body": "@andschwa On my Linux box `rm -r linktofolder/` behaves pretty much as you describe, with the addition of an error message which is displayed despite having emptied the target directory:\r\n```bash\r\n$ tree\r\n.\r\n|-- fred\r\n|   `-- file.txt\r\n`-- fred-sl -> fred\r\n\r\n2 directories, 1 file\r\n$ rm -r fred-sl/\r\nrm: cannot remove 'fred-sl/': Not a directory\r\n$ tree\r\n.\r\n|-- fred\r\n`-- fred-sl -> fred\r\n\r\n2 directories, 0 files\r\n```\r\nSo how should this knowledge affect the behavior of `Remove-Item?` You made a comment back in August on #1775 that suggests that users shouldn't have to use a trailing slash to get into a symlink.",
      "created_at": "2017-04-25T20:54:05Z",
      "updated_at": "2017-04-25T20:54:05Z"
    },
    {
      "author": "jeffbi",
      "author_association": "CONTRIBUTOR",
      "body": "A comment from @PaulHigin in a [code review on the PR](https://github.com/PowerShell/PowerShell/pull/3637/commits/ad1a63ed47c868e9c10f99969422d03b53fe1bb3) has brought up another question: should junctions be treated differently than file symlinks or directory symlinks?\r\n\r\nBefore the PR, junctions were treated differently; they required both `-Recurse` (or answering `Y` to the prompt) and `-Force` to remove the junction. After the PR, junctions are treated like other types of symbolic link.\r\n\r\nWhat is the preferred behavior here?",
      "created_at": "2017-04-25T21:22:47Z",
      "updated_at": "2017-04-25T21:22:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It is better to stick to one pattern.",
      "created_at": "2017-04-26T07:44:48Z",
      "updated_at": "2017-04-26T07:44:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@joeyaiello \r\n>And a non-terminating error still feels a little weird\r\n\r\nI could be wrong it seems we use non-terminating errors instead of warnings.",
      "created_at": "2017-04-26T07:52:03Z",
      "updated_at": "2017-04-26T07:52:03Z"
    },
    {
      "author": "jeffbi",
      "author_association": "CONTRIBUTOR",
      "body": "@joeyaiello Regarding @andschwa's comments about `rm -r linktofolder/`, PowerShell's `Remove-Item -Recurse linktofolder/` currently errors out on both Linux and Windows, but in different ways. On Linux the error is `not a directory`, on Windows it's `Cannot find path`.\r\n\r\nI think this should be a separate issue and not to be addressed in this one. What do you think?",
      "created_at": "2017-04-27T01:15:16Z",
      "updated_at": "2017-04-27T01:15:16Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Quoted from the PR:\r\n> When Remove-Item is used to remove a symbolic link in Windows, only the link itself is removed. The -Force switch is no longer required.\r\nIf the directory pointed to by the link has child items, the cmdlet no longer prompts the user to remove the child items---those child items are not removed. The -Recurse switch, if given, is ignored.\r\nThis brings Remove-Item more in line with the behavior of the 'rm' command on Unix.\r\n\r\n@jeffbi #3637 has been merged, but it seems it doesn't resolve all the concerns in this issue. Are you going to open a separate issue for the behavior of `Remove-Item -Recurse linktofolder/` vs. `rm -r linktofolder/`?",
      "created_at": "2017-04-28T00:55:51Z",
      "updated_at": "2017-04-28T00:55:51Z"
    },
    {
      "author": "jeffbi",
      "author_association": "CONTRIBUTOR",
      "body": "@daxian-dbw I believe it should have a separate issue, and I posed the question yesterday. If you'd like me to go ahead and open an issue for it, I'll do so.",
      "created_at": "2017-04-28T01:07:09Z",
      "updated_at": "2017-04-28T01:07:09Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@jeffbi you should open a new issue and reference this one.  We should then close this one.",
      "created_at": "2017-05-01T19:58:47Z",
      "updated_at": "2017-05-01T19:58:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@jeffbi Thanks for the fix! I closed the Issue to continue in #3674 ",
      "created_at": "2017-05-02T04:27:10Z",
      "updated_at": "2017-05-02T04:27:10Z"
    },
    {
      "author": "jegannathanmaniganadan",
      "author_association": "NONE",
      "body": "Has it been resolved? I still get this issue",
      "created_at": "2018-05-06T10:03:32Z",
      "updated_at": "2018-05-06T10:03:32Z"
    },
    {
      "author": "Alwandy",
      "author_association": "NONE",
      "body": "Same issue here. ",
      "created_at": "2018-07-03T17:15:21Z",
      "updated_at": "2018-07-03T17:15:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@manigandan-jegannathan-developer @Alwandy Please clarify what kind of problem are you talking about? It is better open new issue with repo steps and link the issue.",
      "created_at": "2018-07-06T03:41:23Z",
      "updated_at": "2018-07-06T03:41:23Z"
    },
    {
      "author": "stevencohn",
      "author_association": "NONE",
      "body": "Get-ChildItem $somepath -Attributes ReparsePoint | % { $_.Delete() }",
      "created_at": "2018-08-18T13:22:18Z",
      "updated_at": "2018-08-18T13:22:18Z"
    },
    {
      "author": "amay0048",
      "author_association": "NONE",
      "body": "I still get this issue.\r\n\r\nUPDATE: worked out that the link was going to a directory that didn't exist. Using cmd was the only way I could find to remove the link.",
      "created_at": "2018-08-29T01:25:30Z",
      "updated_at": "2018-08-29T05:45:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@amay0048   Did you look #3674?",
      "created_at": "2018-08-29T05:28:11Z",
      "updated_at": "2018-09-04T04:31:12Z"
    },
    {
      "author": "erichiller",
      "author_association": "NONE",
      "body": "If anyone stumbles across this issue as I did trying to remove reparsepoints without deleting the underlying file use\r\n```powershell\r\n(get-item $removethispathreparsepoint).Delete()\r\n```",
      "created_at": "2018-09-03T16:29:57Z",
      "updated_at": "2018-09-03T16:29:57Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@amay0048 can you open a new issue where the link points to a non-existing directory?",
      "created_at": "2018-09-10T21:26:00Z",
      "updated_at": "2018-09-10T21:26:00Z"
    },
    {
      "author": "jszabo98",
      "author_association": "NONE",
      "body": "Looks like Windows 10 1809 can't delete profiles even through wmi.  Rm -r in powershell won't work either.  It looks like the MicrsoftOfficeHub app is making weird links under \"AppData\\Local\\Packages\\Microsoft.MicrosoftOfficeHub_8wekyb3d8bbwe\\LocalCache\".   Remove-item says \"is an NTFS junction point. Use the Force parameter to delete or modify this object.\" Remove-item -force says \"There is a mismatch between the tag specified in the request and the tag present in the reparse point\"\r\n\r\n\"cmd /c rmdir /s /q\" works ok.\r\n",
      "created_at": "2019-07-28T03:15:35Z",
      "updated_at": "2019-08-01T16:16:08Z"
    },
    {
      "author": "jtbrower",
      "author_association": "NONE",
      "body": "Building upon what @erichiller nicely shared, I created a PS function that uses pass-through arguments to customize the deletion of symlinks.\r\n\r\n**Used to remove links made with mklink**\r\n``` \r\nfunction Remove-SymLinks {\r\n    Get-ChildItem -Force -ErrorAction Stop @Args | Where-Object { if($_.Attributes -match \"ReparsePoint\"){$_.Delete()} }\r\n}\r\n```\r\n**Example Usage**\r\n`Remove-SymLinks` -Remove all links in the current directory\r\n`Remove-SymlLinks -Path .\\Builds -Recurse` -Recursively Remove all links in the Builds Directory\r\n\r\nDisclaimer, I am a C# expert and a wannabe PowerShell weekend warrior so be careful with that Recurse option.",
      "created_at": "2019-12-08T22:08:31Z",
      "updated_at": "2019-12-08T22:09:09Z"
    },
    {
      "author": "francesco1119",
      "author_association": "NONE",
      "body": "FYI, I had the same problem today on `PowerShell 7` and unfortunately the only way to remove the folder was through `cmd /c rmdir /s /q C:\\Users\\Your_User_Name\\Your_Folder_Name`.\r\nSorry to give you a bad news :(",
      "created_at": "2020-12-15T15:02:53Z",
      "updated_at": "2020-12-15T15:02:53Z"
    },
    {
      "author": "FoldZero",
      "author_association": "NONE",
      "body": "> If anyone stumbles across this issue as I did trying to remove reparsepoints without deleting the underlying file use\r\n> \r\n> ```powershell\r\n> (get-item $removethispathreparsepoint).Delete()\r\n> ```\r\n\r\nOnly thing that worked for me on ps7",
      "created_at": "2021-01-17T13:09:38Z",
      "updated_at": "2021-01-17T13:09:38Z"
    },
    {
      "author": "emil-prager",
      "author_association": "NONE",
      "body": "In my case this error manifested only under PowerShell 5.1 (and only for `ItemType SymbolicLink`, i.e. no problem on `ItemType Junction` on 5.1).\r\nOn PowerShell 7.1 no error was encountered when deleting the directory symlink.\r\nPS: The command prompt `rmdir` command functions ok with both symlinks and directory junctions.",
      "created_at": "2021-10-21T19:37:36Z",
      "updated_at": "2021-10-21T19:37:36Z"
    }
  ],
  "created_at": "2016-03-04T01:31:24Z",
  "number": 621,
  "state": "closed",
  "title": "Fix Remove-Item <symbolic link to directory>",
  "updated_at": "2021-10-21T19:37:36Z"
}