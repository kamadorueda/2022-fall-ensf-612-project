{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9425",
  "author": "SteveL-MSFT",
  "body": "This issue is for tracking known issues with the 3.0 port happening in the `feature-netcore30` branch.\r\n\r\n  - [x] PackageManagement failing (the prompt to install nuget provider causes tests to timeout)\r\n  - [x] WebListener not accepting connections on Windows\r\n  - [x] symlink tests failing\r\n  - [x] Measure-Object and Json tests failing due to change in precision\r\n  - [x] Import-Module tests failing on Windows\r\n  - [x] Get-Module tests failing on Windows\r\n  - [x] Constrained mode test failures on Windows\r\n  - [x] CompatiblePSEditions tests/Get-Module tests\r\n  - [x] #Requires tests\r\n\r\n@edyoung can you have someone look at the PackageManagement failures?  It causes other tests to fail that depend on it\r\n\r\nThanks @markekraus for fixing weblistener and now the tests are passing on Windows!\r\n",
  "closed_at": "2019-05-21T21:33:15Z",
  "comments": [
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Initial digging:\r\n\r\n```powershell\r\n$WL = Start-WebListener\r\n$WL[-1].Job.ChildJobs[0].Output\r\n```\r\n\r\n```none\r\nappEXE: C:\\Git\\PowerShell\\test\\tools\\WebListener\\bin\\WebListener.exe\r\nserverPfxPath: C:\\Users\\MarkLocal\\AppData\\Local\\Temp\\ServerCert.pfx\r\nserverPfxPassword: ***********\r\nHttpPort: 8083\r\nHttps: 8084\r\nTls11Port: 8085\r\nTlsPort: 8086\r\ninfo: Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager[0]\r\n      User profile is available. Using 'C:\\Users\\MarkLocal\\AppData\\Local\\ASP.NET\\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.\r\ninfo: Microsoft.AspNetCore.Server.HttpSys.HttpSysListener[0]\r\n      Start\r\ninfo: Microsoft.AspNetCore.Server.HttpSys.HttpSysListener[0]\r\n      Listening on prefix: http://localhost:5000/\r\nHosting environment: Development\r\nContent root path: C:\\Git\\PowerShell\\test\\tools\\WebListener\\bin\r\nNow listening on: http://localhost:5000\r\nApplication started. Press Ctrl+C to shut down.\r\n```\r\n\r\nI can access the HTTP site on `http://localhost:5000`, but not on any of the bindings which should be there. I'm going to guess that ASP.NETCore has changes up the bindings again. More to come.",
      "created_at": "2019-04-21T03:30:01Z",
      "updated_at": "2019-04-21T03:30:01Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "#9427 for the WebListener fixes.",
      "created_at": "2019-04-21T04:39:12Z",
      "updated_at": "2019-04-21T04:39:12Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@rjmholt can you look at the CompatiblePSEditions/Get-Module test failures and the #Requires tests (look related)",
      "created_at": "2019-04-23T00:39:39Z",
      "updated_at": "2019-04-23T00:39:39Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Just ran the CompatiblePSEditions tests with the netcore3 branch on my machine and got no failures. Do you have a reference build for the current failures? Is there CI on the netcore3 branch?",
      "created_at": "2019-04-23T01:12:36Z",
      "updated_at": "2019-04-23T01:12:44Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Get-Module tests also just passed for me",
      "created_at": "2019-04-23T01:14:09Z",
      "updated_at": "2019-04-23T01:14:09Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "As did `#requires` tests.\r\n\r\nThis is all on Windows btw",
      "created_at": "2019-04-23T01:16:16Z",
      "updated_at": "2019-04-23T01:16:16Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@rjmholt it might be due to a behavior change with long paths.  See my latest PR for failures: https://github.com/PowerShell/PowerShell/pull/9447.  You might be able to repro it by creating a local user with a long name.",
      "created_at": "2019-04-23T01:17:01Z",
      "updated_at": "2019-04-23T01:17:28Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Looks like there's a problem loading psm1s off the module path",
      "created_at": "2019-04-23T01:40:28Z",
      "updated_at": "2019-04-23T01:40:28Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "~~I've got repros (although I'm now a new user, so my environment is very weird...). I don't think this can/should be fixed in the tests themselves -- I suspect path comparisons are failing inside PowerShell. It's something that's always been done badly inside the module cmdlet code, because there's no common abstraction for Path resolution.~~\r\n\r\nIs there an explanation of the long path phenomenon occurring here (not long paths, but the way they're being shortened)?",
      "created_at": "2019-04-23T06:04:35Z",
      "updated_at": "2019-04-23T06:27:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "is MSFT team working on https://github.com/dotnet/coreclr/issues/24064 internally or we should do this in the repo publicly?",
      "created_at": "2019-04-23T06:24:37Z",
      "updated_at": "2019-04-23T06:24:37Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT In the case of the Get-Module tests, it's just been a matter of calling `Resolve-FilePath` on `$TestDrive` and subbing out the variable. Which makes me think the right solution is your PR on Pester",
      "created_at": "2019-04-23T06:55:17Z",
      "updated_at": "2019-04-23T06:55:17Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov already working internally with .NET Core team on best configuration for pwsh startup perf\r\n\r\n@rjmholt For now, can you make the change to use `Resolve-FilePath` so the tests pass?  Once we have an updated Pester with my change available on PSGallery, we can bulk remove use of that helper function.  ",
      "created_at": "2019-04-23T20:06:21Z",
      "updated_at": "2019-04-23T20:06:21Z"
    },
    {
      "author": "edyoung",
      "author_association": "CONTRIBUTOR",
      "body": "See https://github.com/OneGet/oneget/pull/443",
      "created_at": "2019-04-27T23:40:50Z",
      "updated_at": "2019-04-27T23:40:50Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "Fixed by #9597 ",
      "created_at": "2019-05-21T21:33:56Z",
      "updated_at": "2019-05-21T21:33:56Z"
    }
  ],
  "created_at": "2019-04-20T04:03:33Z",
  "number": 9425,
  "state": "closed",
  "title": ".NET Core 3.0 port",
  "updated_at": "2019-05-22T03:06:13Z"
}