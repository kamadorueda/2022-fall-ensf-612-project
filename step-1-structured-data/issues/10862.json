{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10862",
  "author": "Jaykul",
  "body": "# PowerShell should support constructing (and probably casting) generic dictionaries \r\n\r\n```\r\nAs a PowerShell user\r\nI need to construct strongly typed dictionaries\r\nSo I can pass them to .NET methods\r\n\r\nAs a PowerShell user with a C# background \r\nI need to initialize collection types with minimal code\r\nSo my code is readable and maintainable\r\nAnd I don't look like I'm stuck in .net 1.0\r\n```\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nWhat we need is to be able to initialize strongly typed dictionaries. like I can in other languages, e.g.:\r\n\r\n```PowerShell\r\n$Spanish = [Dictionary[int,string]]@{\r\n    0 = \"zero\"\r\n    1 = \"uno\"\r\n    2 = \"dos\"\r\n}\r\n```\r\n\r\nSince PowerShell's casting is much more powerful than other langauges, and I can already cast this Dictionary to `hashtable`, \r\n\r\nI should also be able to cast to `[Dictionary[string,string]]` etc. as long as the objects in the dictionary can cast to the new types.\r\n\r\nCurrently I have to resort to behind the scenes tricks with LINQ (and since PowerShell's extensible type system doesn't apply to interfaces, I must apply it to `hashtable` instead of to `IDictionary`):\r\n\r\n```PowerShell\r\nusing namespace System.Collections\r\nusing namespace System.Collections.Generic\r\nusing namespace System.Linq\r\n\r\n# Add a .ToDictionary(KeyType,ValueType) for all hashtables\r\nUpdate-TypeData -TypeName Hashtable -MemberType ScriptMethod -MemberName ToDictionary -Value {\r\nparam([Type]$KeyType,[Type]$ValueType)\r\n    [Scriptblock]::Create(\r\n        \"[Enumerable]::ToDictionary(\r\n            [DictionaryEntry[]]@(`$this.GetEnumerator()),\r\n            [Func[DictionaryEntry,$($KeyType.FullName)]]{ `$args.Key },\r\n            [Func[DictionaryEntry,$($ValueType.FullName)]]{ `$args.Value })\"\r\n    ).Invoke()\r\n}\r\n\r\n```\r\n\r\nSo that I can write initializers that are readable and preserve maintainability at some cost of performance (and type safety):\r\n\r\n```PowerShell\r\n$Spanish = @{\r\n    0 = \"zero\"\r\n    1 = \"uno\"\r\n    2 = \"dos\"\r\n    3 = \"tres\"\r\n}.ToDictionary([int],[string])\r\n```\r\n\r\nBut currently, to cast that to `[Dictionary[string.string]` I have to _cast_ it to hashtable and then convert it `.ToDictionary([string],[string])`:\r\n\r\n```PowerShell\r\n([hashtable]$Spanish).ToDictionary([string],[string])\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Is it related to https://github.com/PowerShell/PowerShell-RFC/blob/master/2-Draft-Accepted/RFC0002-Generalized-Splatting.md?\n\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/11524380?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell-RFC\">PowerShell/PowerShell-RFC</a></strong></div><div>RFC (Request for Comments) documents for community feedback on design changes and improvements to PowerShell ecosystem - PowerShell/PowerShell-RFC</div></blockquote>",
      "created_at": "2019-10-23T05:02:09Z",
      "updated_at": "2019-10-23T05:02:11Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Don't think that's related, no. That's more for ways to utilise existing hashtables in commands or method invocation. :slightly_smiling_face: ",
      "created_at": "2019-10-23T10:22:29Z",
      "updated_at": "2019-10-23T10:22:29Z"
    }
  ],
  "created_at": "2019-10-21T23:10:14Z",
  "labels": [
    "Issue-Enhancement"
  ],
  "number": 10862,
  "state": "open",
  "title": "Support generic dictionary initializers",
  "updated_at": "2019-10-23T10:22:29Z"
}