{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8871",
  "author": "rfoust",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\nExporting a module locally (such as Office 365 remote powershell) and then re-importing it results in the cmdlets in that module being broken (on Mac/Linux, haven't tested Windows). The error they return is below. If I just connect to the Office 365 powershell session directly without exporting it, it works fine.  So it seems to be something with the re-imported module that breaks it?\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n$Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri \"https://outlook.office365.com/powershell-liveid/\" -Credential (Get-Credential) -Authentication Basic -AllowRedirection -Name TestTenant\r\nExport-PSSession $Session -OutputModule \"path_to_module\" -AllowClobber\r\nImport-Module TestTenant -DisableNameChecking -Global\r\n```\r\n\r\n# Expected behavior\r\n\r\nThe imported module should work.\r\n\r\n# Actual behavior\r\n\r\n```powershell\r\nPS /Users/rfoust> Get-Mailbox\r\nCreating a new session for implicit remoting of \"Get-Mailbox\" command...\r\nException calling \"GetSteppablePipeline\" with \"1\" argument(s): \"The expression after '&' in\r\na pipeline element produced an object that was not valid. It must result in a command name, a script\r\nblock, or a CommandInfo object.\"\r\nAt /Users/rfoust/.local/share/powershell/Modules/TestTenant/TestTenant.psm1:18294 char:13\r\n+             $steppablePipeline = $scriptCmd.GetSteppablePipeline($myI ...\r\n+             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : NotSpecified: (:) [], ParentContainsErrorRecordException\r\n+ FullyQualifiedErrorId : CmdletInvocationException\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.2\r\nPSEdition                      Core\r\nGitCommitId                    6.1.2\r\nOS                             Darwin 18.2.0 Darwin Kernel Version 18.2.0: Thu Dec 20 20:46:53 PST 2018; root:xnu-4903.241.1~1/RELEASE_X86_64\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "I believe you need to do the below get them imported properly (or at least I have has this in one of my scripts for a long long time as part of an older office 365 connection script that I had as part of a module that for that imported in my profile)\r\n\r\n```powershell\r\n#Connect-EXOSession#\r\nFunction Connect-EXOSession {\r\n<#\r\n.Synopsis\r\n   Short description\r\n.DESCRIPTION\r\n   Long description\r\n.EXAMPLE\r\n   Example of how to use this cmdlet\r\n.EXAMPLE\r\n   Another example of how to use this cmdlet\r\n#>\r\nparam (\r\n    [Parameter(Mandatory=$true)][PSCredential]$EXOCredential\r\n\r\n     )\r\n$Global:Session = New-PSSession -ConfigurationName Microsoft.Exchange `\r\n                    -ConnectionUri https://ps.outlook.com/powershell/ `\r\n                    -Credential $EXOCredential -Authentication Basic `\r\n                    -AllowRedirection -Name EXOSession -WarningAction SilentlyContinue \r\nImport-Module (Import-PSSession -Session $Global:Session -Verbose:$false -DisableNameChecking -AllowClobber) -Global -DisableNameChecking\r\n}\r\n```\r\n\r\nI then called these lines in my profile\r\n\r\n```powershell\r\n\r\nFunction Connect-MyEXOSession { \r\nImport-Module GitHub:\\kilasuit\\PoshFunctions\\Modules\\Connect-EXOSession\\Connect-EXOSession.psd1 ; \r\n$MYO365cred = Get-bCredential -Credential MyO365UserName -Store # as using BetterCredentials Module\r\nConnect-EXOSession -EXOCredential $MYO365cred\r\n}\r\n\r\nConnect-MyEXOSession \r\n\r\n```",
      "created_at": "2019-02-12T16:55:12Z",
      "updated_at": "2019-02-12T16:59:36Z"
    },
    {
      "author": "rfoust",
      "author_association": "NONE",
      "body": "Thanks @kilasuit for the suggestion. Yes, I am able to get it to work if I don't export the module. But what I do on regular Windows Powershell is export the module so that I can update the line in the .psm1 file that asks for credentials to use a global variable that already has the credential. This way, the module with automatically re-authenticate without prompting when the session dies.  I'm trying to replicate that behavior in PS Core.\r\n\r\n",
      "created_at": "2019-02-12T17:28:05Z",
      "updated_at": "2019-02-12T17:28:05Z"
    },
    {
      "author": "rfoust",
      "author_association": "NONE",
      "body": "This is the line in the .psm1 that is triggering the exception. $myInvocation.CommandOrigin is \"Runspace\".\r\n\r\n```powershell\r\n$steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\r\n```",
      "created_at": "2019-02-12T18:13:39Z",
      "updated_at": "2019-02-12T18:13:39Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@rfoust I don't know enough an the technical side in this case to know why that regression exists, but in the meantime you can apply such a modification on the in-memory module, and then remove and reload it.",
      "created_at": "2019-02-13T11:28:17Z",
      "updated_at": "2019-02-13T11:28:17Z"
    },
    {
      "author": "rfoust",
      "author_association": "NONE",
      "body": "@vexx32 Interesting idea, I didn't realize it was possible to modify an in-memory module. Can you elaborate on how I would do that or point me in the right direction? Thanks!",
      "created_at": "2019-02-13T13:54:34Z",
      "updated_at": "2019-02-13T13:54:34Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "The basic method I'd probably tackle it from is like this:\r\n\r\n```powershell\r\n# usually these are temp_* for an imported PSSession\r\n$Module = Get-Module -Name $ModuleName \r\n\r\n# single-quotes! Variable names need to be intact\r\n$ModuleScript = [scriptblock]::Create($Module.Definition -replace '<credential_line>','$global:Creds') \r\n\r\n# Create new module from modified script block\r\n$New = New-Module -Name NewModuleName -ScriptBlock $ModuleScript\r\n\r\n# remove original copy of the module from the session\r\nRemove-Module $Module.Name \r\n\r\n# import the new module\r\n$New | Import-Module \r\n```\r\n\r\nThis might run into the same issue, but... it's worth a shot nonetheless. \ud83d\ude04 ",
      "created_at": "2019-02-13T14:15:24Z",
      "updated_at": "2019-02-13T14:16:37Z"
    },
    {
      "author": "rfoust",
      "author_association": "NONE",
      "body": "@vexx32 Oh wow, doing it that way never occurred to me. Mind blown. :) It worked on a quick test! I still need to put that logic in my wrapper function and see how it behaves after the session breaks. But looks promising so far, thanks!",
      "created_at": "2019-02-13T14:53:04Z",
      "updated_at": "2019-02-13T14:53:04Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "It'd be really cool if doing the `Export-PSSession` how you were handling it supported a `-Credential` parameter so you could just pass them in and have it work, but that's probably a separate issue/request.\r\n\r\nLet me know how you get on, I'm curious to see if it behaves as expected. \ud83d\ude04 ",
      "created_at": "2019-02-13T15:09:31Z",
      "updated_at": "2019-02-13T15:09:52Z"
    },
    {
      "author": "rfoust",
      "author_association": "NONE",
      "body": "@vexx32 So when I remove the existing pssession, I get the same error.  So this caused me to do a little more tracing and long story short, the original problem I have is being caused because New-PSSessionOption does not exist in PS Core (on mac/linux?).  Not sure why.\r\n\r\nBut anyway, since that cmdlet doesn't exist, it is causing the New-PSSession command to bomb out somewhere when it is called this way in the .psm1 file:\r\n\r\n```powershell\r\nSet-PSImplicitRemotingSession `\r\n            -CreatedByModule $true `\r\n            -PSSession (\r\n                $(\r\n                & $script:NewPSSession `\r\n                    -connectionUri 'https://outlook.office365.com/powershell-liveid/' -ConfigurationName 'Microsoft.Exchange' `\r\n                    -SessionOption (Get-PSImplicitRemotingSessionOption) `\r\n                    -Credential ( $host.UI.PromptForCredential( 'PowerShell Credential Request', 'Enter your credentials for https://outlook.office365.com/powershell-liveid/.', 'user@removed.onmicrosoft.com', 'outlook.office365.com' ) ) `\r\n                     `\r\n                    -Authentication Basic `\r\n                    -AllowRedirection `\r\n                    -Verbose `\r\n                )\r\n            )\r\n```\r\nSpecifically, the -SessionOption line is where it dies.  So if I go back to my original code, I can just strip out that line to resolve all my problems.\r\n\r\nBut I guess this bug still technically exists, and the question is why is that cmdlet not there?  According to the docs, it should be:\r\n\r\nhttps://docs.microsoft.com/en-us/powershell/module/Microsoft.PowerShell.Core/New-PSSessionOption?view=powershell-6",
      "created_at": "2019-02-13T17:18:11Z",
      "updated_at": "2019-02-13T17:29:40Z"
    },
    {
      "author": "rfoust",
      "author_association": "NONE",
      "body": "Also just for anyone reading along, to save ya some time, the -SessionOption parameter calls Get-PSImplicitRemotingSessionOption which is this:\r\n\r\n```powershell\r\nfunction Get-PSImplicitRemotingSessionOption\r\n{\r\n    if ($null -ne $PSSessionOptionOverride)\r\n    {\r\n        return $PSSessionOptionOverride\r\n    }\r\n    else\r\n    {\r\n        return $(& $script:NewPSSessionOption -Culture 'en-US' -UICulture 'en-US' -CancelTimeOut 60000 -IdleTimeOut -1 -OpenTimeOut 180000 -OperationTimeOut 180000 -MaximumReceivedObjectSize 209715200 -MaximumRedirection 5 -ProxyAccessType None -ProxyAuthentication Negotiate )\r\n    }\r\n}\r\n```\r\nand $script:NewPSSessionOption is this:\r\n```powershell\r\n$script:NewPSSessionOption = $executionContext.InvokeCommand.GetCommand('New-PSSessionOption', [System.Management.Automation.CommandTypes]::Cmdlet)\r\n```\r\nThis is all auto-generated when the module is exported.",
      "created_at": "2019-02-13T17:28:14Z",
      "updated_at": "2019-02-13T17:28:56Z"
    }
  ],
  "created_at": "2019-02-12T16:16:30Z",
  "labels": [
    "Issue-Question",
    "WG-Cmdlets-Core"
  ],
  "number": 8871,
  "state": "open",
  "title": "Imported modules that were exported seem to be broken",
  "updated_at": "2021-01-15T07:45:21Z"
}