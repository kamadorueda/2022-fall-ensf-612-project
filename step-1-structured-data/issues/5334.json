{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5334",
  "author": "zehranaz",
  "body": "If flips random bytes. If output is written to file instead with -OutFile parameter, then the problem goes away. Invoke-WebRequest on the same response shows the expected binary in the Content field.\r\n\r\n<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://github.com/PowerShell/PowerShell/blob/master/docs/KNOWNISSUES.md).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n\r\n-->\r\nSteps to reproduce\r\n------------------\r\nI am writing out the string response to a file and reading it into a byte array. After I get the bytes, I convert them like this:\r\n```powershell\r\n\r\n[System.BitConverter]::ToSingle($Bytes, $BeginIndex);\r\n```\r\nThe response conversion shows that some of the values are garbled, typically the decimals and negatives, but also 1 in a consistent manner. I have also opened the string response in a hex editor and seen certain bytes getting flipped to 3A.\r\n<!--\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\n\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\n\r\n```\r\n-->\r\nEnvironment data\r\n----------------\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.16299.19\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.16299.19\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n",
  "closed_at": "2019-09-28T18:04:11Z",
  "comments": [
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Can you please provide the output of your `$PSVersionTable`?\r\nAlso, Can you provide the exact steps to reproduce the issue? I suspect this is using the cmdlet outside of its intended purpose, but it's hard to make that call without exact steps to reproduce.\r\n\r\nWhen output is not redirected to a file, `Invoke-RestMethod` coerces unknown content to a string which means that a string encoding gets applied to it. If the server is not supplying the correct encoding (which, usually `application/octet-stream` does not send with an encoding) it's quite possible that bytes would get mixed up in the encoding process. `Invoke-RestMethod` isn't really meant for working with a byte stream.\r\n\r\nI was unable to reproduce an issue using the following:\r\n\r\n```\r\ndotnet new mvc\r\n```\r\nedit `Controllers\\HomeController.cs`\r\nadd the following endpoint:\r\n```csharp\r\n        [HttpGet]\r\n        public FileStreamResult Bytes()\r\n        {\r\n            Byte[] bytes = new Byte[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};\r\n            MemoryStream mstream = new MemoryStream(bytes);\r\n            return new FileStreamResult(mstream, \"application/octet-stream\");            \r\n        }\r\n```\r\nrun it\r\n```\r\ndotnet run\r\n```\r\ndo the following:\r\n```powershell\r\n[System.Text.Encoding]::UTF8.GetBytes((irm 'http://localhost:5000/home/Bytes' ))\r\n\"-----\"\r\n(iwr 'http://localhost:5000/home/Bytes' ).Content\r\n```\r\n\r\nResult:\r\n```none\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n-----\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n```\r\n\r\n",
      "created_at": "2017-11-03T20:16:58Z",
      "updated_at": "2017-11-03T20:17:45Z"
    },
    {
      "author": "zehranaz",
      "author_association": "NONE",
      "body": "Thank you for the prompt response. Impressive!\r\n\r\nI forgot to mention that this issue happens when you send bytes that map to decimal point and negative values such as 10.1 and -1. I have recorded the steps above. I don't have a clear repro to share with you since the response is coming from an internal server. I have updated the repro steps above if it helps though.\r\n\r\nI think you're right about the string interpretation messing up the bytes. That would make sense and it's what I had guessed before looking at the code. It helps to know that Invoke-RestMethod is not meant to support binary responses. But what I would suggest is if the encoding is not JSON or XML, to return the Content that is coming back from WebRequest rather than returning as a string. With some more code reading, I could probably submit a PR to fix this, but someone more familiar with the code should be able to do it more quickly :)",
      "created_at": "2017-11-03T22:02:37Z",
      "updated_at": "2017-11-03T22:02:37Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": ">  But what I would suggest is if the encoding is not JSON or XML, to return the Content that is coming back from WebRequest rather than returning as a string.\r\n\r\nThat's not what I would expect from the command. `Invoke-RestMethod` is more light weight than `Invoke-WebRequest`, which makes it ideal for web scraping and other activities that do not need the structured complexity of the WebResponseObject. If you want the full object, than just use `Invoke-WebRequest`. I think requesting that behavior is a non-starter. It would be a massive breaking change for very little gain when there is already a cmdlet that does that.\r\n\r\nThere is another request #3829 to provide raw streams to be able to do things like log streams, What you are trying to do would be another use-case for my proposal there to add a new web cmdlet that adds stream handling features. something like `-AsByteStream` or something similar as a switch for that cmdlet.\r\n",
      "created_at": "2017-11-03T22:21:01Z",
      "updated_at": "2017-11-03T22:21:01Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@zehranaz I see that you have updated your post with the PS version table and it is for Windows PowerShell 5.1. Can you reproduce your issue with with PowerShell Core 6.0.0-beta.9?\r\n\r\nIf you are not using PowerShell Core and wish to file a bug or feature request for Windows PowerShell 5.1, please use the Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell).",
      "created_at": "2017-11-03T23:04:38Z",
      "updated_at": "2017-11-03T23:04:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Old issue without feedback.",
      "created_at": "2019-09-28T18:04:11Z",
      "updated_at": "2019-09-28T18:04:11Z"
    }
  ],
  "created_at": "2017-11-03T19:27:58Z",
  "number": 5334,
  "state": "closed",
  "title": "Invoke-RestMethod parses octet-stream responses (binary) incorrectly",
  "updated_at": "2019-09-28T18:04:12Z"
}