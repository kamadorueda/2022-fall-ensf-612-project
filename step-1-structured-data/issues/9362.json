{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9362",
  "author": "cawoodm",
  "body": "PowerShell 6.2.0 on Windows 10\r\n\r\n# Steps to reproduce\r\n**test.ps1**\r\n```powershell\r\n[CmdletBinding()]param(\r\n     [string]$p1,\r\n     [string]$p2,\r\n    [Parameter(ValueFromPipeline)][string]$InputObject\r\n)\r\nprocess{\r\n    $input.replace($p1, $p2)\r\n}\r\n```\r\nRun the following from CMD:\r\n```none\r\necho hello world | powershell -f test.ps1 e E\r\nhEllo world\r\necho hello world | powershell -f test.ps1 e -\r\nCRA$H@#*\r\necho hello world | powershell -f test.ps1 e \"-\"\r\nCRA$H@#*\r\n```\r\n`CRA$H@#*` = PowerShell crashes\r\n![image](https://user-images.githubusercontent.com/498834/56133048-d202c300-5f8b-11e9-81bd-5f63ea67896f.png)\r\n\r\n# Expected behavior\r\n\r\n```\r\nh-llo world\r\n```\r\n\r\n# Actual behavior\r\nCRASH of pwsh.exe !\r\n\r\n# Environment data\r\n\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.0\r\nPSEdition                      Core\r\nGitCommitId                    6.2.0\r\nOS                             Microsoft Windows 10.0.16299\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n",
  "closed_at": "2019-04-28T17:20:24Z",
  "comments": [
    {
      "author": "cawoodm",
      "author_association": "NONE",
      "body": "NB:\r\n* This also crashes PowerShell v5\r\n* It seems to be the dash `-` which crashes things\r\n* It only crashes from CMD, run from within the powershell shell things work fine:\r\n```powershell\r\necho \"hello world\" | .\\test.ps1 e -\r\nh-llo world\r\n```",
      "created_at": "2019-04-15T12:43:05Z",
      "updated_at": "2019-04-15T12:43:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@cawoodm Please share the content of test.ps1 file.",
      "created_at": "2019-04-23T10:11:33Z",
      "updated_at": "2019-04-23T10:11:33Z"
    },
    {
      "author": "cawoodm",
      "author_association": "NONE",
      "body": "I've updated the original question with the code.\r\n\r\nJust double-checked that it crashes PowerShell 6/Core (pwsh.exe) - it does:\r\n\r\n```\r\nC:>echo hello world | pwsh .\\test.ps1 e -\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/498834/56671556-2a853f00-66b5-11e9-9f17-7d7f5abf3a73.png)\r\n",
      "created_at": "2019-04-24T15:21:12Z",
      "updated_at": "2019-04-24T15:21:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Simple repo from cmd and pwsh:\r\n```\r\npwsh any.ps1 -\r\n```\r\n\r\n```\r\nany.ps1 : Cannot process argument because the value of argument \"name\" is not valid. Change the value of the \"name\" argument and run the operation again.\r\n+ CategoryInfo          : InvalidArgument: (:) [any.ps1], PSArgumentException\r\n+ FullyQualifiedErrorId : Argument,any.ps1\r\n```",
      "created_at": "2019-04-25T03:41:02Z",
      "updated_at": "2019-04-25T03:41:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I debug the code and guess that it is \"by design\". In \"pwsh any.ps1 -\" we interpret the dash as parameter name prefix and get null as parameter name. If we run \"> .\\any.ps1 -\" we interpret the dash as argument value.\r\n\r\nI don't know can/should we fix this or no.\r\n\r\n/cc @SteveL-MSFT @daxian-dbw @mklement0 ",
      "created_at": "2019-04-25T05:35:20Z",
      "updated_at": "2019-04-25T05:35:20Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "It happens only with (implied) `-File`, not with `-Command`.\r\n\r\nWith `-Command`, it behaves as expected: the `-` is interpreted as a _positional argument_ rather than the start of an (invalid) parameter name.\r\n\r\nWhile there are - regrettable<sup>[1]</sup> - by-design differences between argument parsing with `-File` vs. `-Command` (literals vs. as-code), they should behave the same in this case (and, obviously, there shouldn't be a crash).\r\n\r\n---\r\n\r\n<sup>[1] In short: for conceptual clarity and predictable parameter passing (in line with POSIX-like shells), only ever the _first_ argument following `-Command` should be interpreted as a snippet of PowerShell code, whereas all remaining arguments should be treated as _literal_ arguments  _to pass as arguments to that first argument_, as with `-File`.</sup>",
      "created_at": "2019-04-25T13:50:07Z",
      "updated_at": "2019-04-25T13:50:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems the problem come from #4019 or #7449 (@TravisEz13 could you please look this too?)\r\nhttps://github.com/PowerShell/PowerShell/blob/ceed73d7375cb98a199ceb19796bb2311b0b0002/src/Microsoft.PowerShell.ConsoleHost/host/msh/CommandLineParameterParser.cs#L1133-L1141\r\n\r\nDebug shows \"i\" has value 0 but I think it must be 1.\r\n\r\n@mklement0 Look comment in the code.",
      "created_at": "2019-04-25T15:04:24Z",
      "updated_at": "2019-04-25T15:11:52Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: looking at it purely from a behavioral perspective: \r\n\r\n`-` is only special as the _first_ - and then _only_ supported - argument passed to `-File` - which is not the case here.\r\n\r\nSince `-f` (`-File`) is used _explicitly_, #4019 shouldn't come into play - don't know anything about #7449.\r\n\r\nAs an aside: both `-File -` and `-Command -` are currently badly broken (the `// Process interactive input...` comment provides a hint) - see #3223\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2019-04-25T20:21:38Z",
      "updated_at": "2019-04-29T13:04:11Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Based on this comment https://github.com/PowerShell/PowerShell/issues/9362#issuecomment-483235798, this was not introduced in either of these PRs\r\n",
      "created_at": "2019-04-25T20:22:09Z",
      "updated_at": "2019-04-25T20:22:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13 I checked that Windows PowerShell 5.1 (10.0.17763.437)  is not crashed.",
      "created_at": "2019-04-26T03:03:34Z",
      "updated_at": "2019-04-26T03:03:34Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "I think @mklement0 is correct here.  There is a logic error in the code.  It should verify the immediate parameter before was `-file` or `-command`",
      "created_at": "2019-04-26T17:28:25Z",
      "updated_at": "2019-04-26T17:31:56Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I have a fix",
      "created_at": "2019-04-26T21:20:47Z",
      "updated_at": "2019-04-26T21:20:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Reopen because of https://github.com/PowerShell/PowerShell/pull/9479#discussion_r279165507",
      "created_at": "2019-04-28T05:41:08Z",
      "updated_at": "2019-04-28T05:41:08Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Responded to the comment. \r\n\r\nAlso, That would be a new issue.  Please open a new issue for new issues.  It is VERY confusing to use the same issue for multiple issues.",
      "created_at": "2019-04-28T17:20:24Z",
      "updated_at": "2019-04-28T17:21:12Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Unfortunately, @cawoodm's code snippet points to a larger (separate) problem:\r\n\r\nIf you look closely, the `process` block doesn't actually use the declared parameter variable, `$InputObject`, but the automatic `$Input` variable.\r\n\r\nSadly, this is actually _necessary_ in order for the script to receive outside stdin input _directly_, and while you can apply this hack in your own scripts, it is not an option with standard cmdlets.\r\n\r\nIn short: outside stdin input doesn't automatically translate to pipeline input - explicit use of `$Input` is required - see #9497\r\n\r\n\r\n",
      "created_at": "2019-04-29T16:43:14Z",
      "updated_at": "2019-04-29T16:43:14Z"
    },
    {
      "author": "cawoodm",
      "author_association": "NONE",
      "body": "@mklement0 My code came about hacking around trying to find a variable which consistently represented the piped stream of input (stdin).  What I came up with was that in a `begin{}` block it's `$InputObject`, in an `end{}` block it's `$input` and in the `process{}` block it's `$_` which seems crazy but it's what I found.\r\n\r\nI'd be eternally grateful of a resource describing when `$_`, `$InputObject` and `$Input` are to be used.",
      "created_at": "2019-04-29T19:21:12Z",
      "updated_at": "2019-04-29T19:21:12Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@cawoodm - here's my $0.02:\r\n\r\nIdeally, all you should use in your advanced script is `$InputObject` (whose freely chosen parameter-variable name is a _convention_) - from within PowerShell, this will work as expected.\r\n\r\nThe lack of support for automatic mapping of external stdin input to PowerShell pipeline input detailed in #9497 prompted your use of `$Input` as a workaround.\r\n\r\nA workaround that wouldn't require modification of your script is:\r\n\r\n```powershell\r\necho hello world | powershell -command  '$Input | ./test.ps1 e E'\r\n```\r\n\r\nThat is the primary use of `$Input`, I'd say: enumerating the lines of external stdin input; see below for a secondary use.\r\n\r\nGenerally:\r\n\r\n* If you have explicitly declared pipeline-binding parameters, use only them - no need for `$_` or `$Input`.\r\n   * Your pipeline-binding parameters, say `$InputObject`, has no meaningful value in `begin` - unless you've passed a value as an _argument_ instead, though even then you should perform processing in the `process` block.\r\n  * In the `process` block, `$InputObject` represents the input object at hand (or a _property_ value of it, if the parameter is declared with `ValueFromPipelineByPropertyName`). \r\n    * Because external stdin input isn't mapped to pipeline input, `$InputObject` is not bound in your scenario (if you just used `$InputObject`, the `process` block would be entered _once_, with `$InputObject` containing the type-specific default value)\r\n    * That using `$Input` actually works in this case is surprising, and I wouldn't rely on it; even more obscurely, you could alternatively place `$null = $input` in your `begin`(!) block, and then use `$InputObject` in your `process` block, as you normally would - I have no idea why that works.\r\n  * In the `end` block, `$InputObject` still contains the _last_ input object.\r\n\r\n* If not:\r\n  * use `$_` in the `process` block (`$Input` works too, but is wrapped in a single-element `ArrayList` in advanced scripts / functions).\r\n  * if you don't have a `process` block and you just want to collect all objects first and process them in the (possibly implied) `end` block, use `$Input` there. (If you do have a `process` block, `$Input` will be empty in the `end` block.)\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2019-04-30T05:38:14Z",
      "updated_at": "2019-04-30T05:40:09Z"
    },
    {
      "author": "cawoodm",
      "author_association": "NONE",
      "body": "It would appear, however, that `$Input` is not available in an `end{}` block if a `process{}` block is present. So I see no way of making a function/script which can work in both modes - like being able to filter objects in the stream (via process{}) OR, in a different mode, summarize/sort the entire stream (via end{}).\r\n\r\nConsider the following function/script which should convert an object or stream of objects to JSON (producing `\"{object}, {object2}...\"` output) and, optionally with the `-AsArray` switch pass the entire stream through in one go (producing `\"[{object},{object2}...]\"` output):\r\n\r\n```powershell\r\n[CmdLetBinding()]\r\n[OutputType([String])]\r\nparam(\r\n  [Parameter(Mandatory,ValueFromPipeline)]\r\n  [object]$InputObject,\r\n  [switch]$Compress,\r\n  [switch]$AsArray\r\n)\r\nprocess {\r\n  if (-not $AsArray) {\r\n    return $InputObject | ConvertTo-Json -Compress:$Compress\r\n  }\r\n}\r\nend {\r\n  if ($AsArray) {\r\n    Write-Host $Input # Nothing, unless we remove the process block above\r\n    if ($Input -is [array] -and $Input.length -gt 1) {\r\n      # We have an array, pass to convertto-json as is\r\n      return $Input | ConvertTo-Json -Compress:$Compress\r\n    } else {\r\n      # Coerce single object to an array\r\n      return ConvertTo-Json -InputObject @($Input) -Compress:$Compress\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nAFAIK this can only be solved with 2 different scripts/functions.",
      "created_at": "2019-05-03T16:21:50Z",
      "updated_at": "2019-05-03T16:39:43Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> `$Input` is not available in an `end{}` block if a `process{}` block is present\r\n\r\nCorrect (it's what I tried to say with \"if you don't have a `process` block ...\").\r\n\r\nIf you do have a `process` block, you must perform collecting all input manually, which is best done by instantiating a list type such as  `[System.Collections.Generic.List[object]]` in `begin` and appending to it with `.Add()` in the `process`  block.\r\n\r\nWhile I can't speak directly to the design intent, it makes sense to me to _consume_ the input in a `process` block, as it is being received, so as to enable _streaming_ processing that doesn't require collecting all input in memory. Collecting therefore only happens in the absence of a `process` block. \r\n\r\nAs an aside: `$Input` is _always_ an array; what you need to guard against is that array only having 1 element, and, if so,  use `, $Input`, not `@($Input)`.\r\n",
      "created_at": "2019-05-03T17:03:58Z",
      "updated_at": "2019-05-03T17:03:58Z"
    }
  ],
  "created_at": "2019-04-15T12:39:45Z",
  "number": 9362,
  "state": "closed",
  "title": "Dash as a parameter crashes PWSH",
  "updated_at": "2019-05-07T17:01:49Z"
}