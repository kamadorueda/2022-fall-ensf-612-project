{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5974",
  "author": "ThePieMonster",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://github.com/PowerShell/PowerShell/blob/master/docs/KNOWNISSUES.md).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\nRun the below command in Linux, Command Prompt, and PowerShell and compare the output.\r\n```powershell\r\necho -n \"string\" | openssl dgst -sha256 -hmac \"authcode\"\r\n```\r\nI also attempted to change the encoding PowerShell was using to UTF-8 but that did not change the value of the returned hash.\r\n```powershell\r\n[Console]::OutputEncoding = [Text.UTF8Encoding]::UTF8\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nLinux/CMD Response: (stdin)= 54ef1d2effbc663eb6dc84a49cc1600b30e79f2e1ff737b99cd96589842d50e9\r\nPowerShell Response:(stdin)= 54ef1d2effbc663eb6dc84a49cc1600b30e79f2e1ff737b99cd96589842d50e9\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nLinux/CMD Response: (stdin)= 54ef1d2effbc663eb6dc84a49cc1600b30e79f2e1ff737b99cd96589842d50e9\r\nPowerShell Response:(stdin)= 08daf0944f91c2d904ef9f231c4e767067c9b795197c4fe46631aa78c7e9d0c4\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value                                                                                       \r\n----                           -----                                                                                       \r\nPSVersion                      5.1.16299.98                                                                                \r\nPSEdition                      Desktop                                                                                     \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                     \r\nBuildVersion                   10.0.16299.98                                                                               \r\nCLRVersion                     4.0.30319.42000                                                                             \r\nWSManStackVersion              3.0                                                                                         \r\nPSRemotingProtocolVersion      2.3                                                                                         \r\nSerializationVersion           1.1.0.1                                                                                     \r\n\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "One point of clarity. in `pwsh` the `echo` command is an alias for `Write-Output`. `-n` on `Write-Output` is short for `-NoEnumerate`. it is not the same as the Linux `echo` binary. However switching the command to `/bin/echo -n \"string\" | openssl dgst -sha256 -hmac \"authcode\"` does not alleviate the issue you are seeing.  It appears a new line is always being appended.\r\n\r\npowershell (with `-n`):\r\n\r\n```powershell\r\n/bin/echo -n \"string\" | openssl dgst -sha256 -hmac \"authcode\"\r\n```\r\n\r\nresult: `(stdin)= e0110cef9a8ba1b3ebdf6655bd096ea7e2cbd8790fce71e8767dba374c22461e`\r\n\r\nbash (without `-n`):\r\n\r\n```bash\r\n/bin/echo \"string\" | openssl dgst -sha256 -hmac \"authcode\"\r\n```\r\n\r\nresult: `(stdin)= e0110cef9a8ba1b3ebdf6655bd096ea7e2cbd8790fce71e8767dba374c22461e`\r\n",
      "created_at": "2018-01-22T01:49:07Z",
      "updated_at": "2018-01-22T01:50:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Is the problem in cmd.exe and Bash?",
      "created_at": "2018-01-22T05:49:02Z",
      "updated_at": "2018-01-22T05:49:02Z"
    },
    {
      "author": "ThePieMonster",
      "author_association": "NONE",
      "body": "@markekraus Yes I have tried using echo and Write-Output with and without the -n / NoEnumerate but the hashs returned are always the same regardless what is used.\r\n@iSazonov The issue is with PowerShell since all other applications (cmd.exe, Bash, Linux Distros) return the same hash except for PShell.",
      "created_at": "2018-01-22T08:39:55Z",
      "updated_at": "2018-01-22T08:39:55Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "You can get the (hopefully) full story and **workarounds** in [this SO answer](https://stackoverflow.com/a/48372333/45375) of mine, but the short of it is:\r\n\r\nAs @markekraus  has already stated, the PowerShell pipeline invariably appends a (platform-appropriate) trailing newline to strings when they're sent to _external_ programs, which you can verify as follows (on a Unix platform):\r\n\r\n    PS> printf %s h | od -t x1  # try to send \"h\" without a trailing newline through the pipeline\r\n    0000000    68  0a                                                        \r\n    0000002\r\n\r\nThe `0a` is the trailing LF that the pipeline added - you won't see it when you run the very same command from Bash.\r\n\r\nThis is problematic, as is the general inability to pipe raw byte streams (see #1908, which addresses external-program-to-external-program piping, though sometimes you may even want to send raw bytes from a PowerShell command).\r\n",
      "created_at": "2018-01-22T17:39:45Z",
      "updated_at": "2022-08-17T14:33:59Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@ThePieMonster: If you agree with my analysis, can you please change the title of this issue to something like \"Piping text to an external program appends a trailing newline\"?",
      "created_at": "2018-01-22T17:43:29Z",
      "updated_at": "2018-01-22T17:43:29Z"
    },
    {
      "author": "ThePieMonster",
      "author_association": "NONE",
      "body": "@mklement0 I updated the title as you suggested. ",
      "created_at": "2018-01-23T07:49:05Z",
      "updated_at": "2018-01-23T23:52:50Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@ThePieMonster: Thanks for updating the title.\r\n\r\nUnfortunately, `echo -n` does _not_ work with `cmd`, because `echo` is an _internal_ command that supports _no_ options at all, so the `-n` is simply output too (try `cmd /c \"echo -n hi\"`).\r\n\r\nThus, you must use the following on _Windows_ (my linked SO answer states limitations of this approach):\r\n\r\n```powershell\r\ncmd /c \"<NUL set /p =`\"string`\"| ...\"     # NO space before | \r\n```\r\n\r\nIf you happen to have the GnuWin32 tools installed on Windows, you can  use  \r\nthe more robust `` cmd /c \"printf `\"%s`\" `\"string`\" | ...\"   ``instead.\r\n\r\nOn _Unix_:\r\n\r\n```powershell\r\nsh -c \"printf %s `\"string`\" | ...\"\r\n```\r\n\r\n\r\n\r\n",
      "created_at": "2018-01-23T13:12:52Z",
      "updated_at": "2018-01-24T00:24:16Z"
    },
    {
      "author": "ThePieMonster",
      "author_association": "NONE",
      "body": "@mklement0 Thanks for the suggestion. The below seems to do the trick for me to get PShell to not have the trailing newline which in turn responds with the same hash as in Linux. _(Being careful to not have a space before | like suggested)._\r\n```PowerShell\r\ncmd /c \"<NUL set /p =`\"string`\"| openssl dgst -sha256 -hmac authcode\"\r\n```\r\n",
      "created_at": "2018-01-23T23:59:37Z",
      "updated_at": "2018-01-23T23:59:37Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Maybe an `Out-Native` cmdlet would be handy??",
      "created_at": "2018-01-24T00:11:24Z",
      "updated_at": "2018-01-24T00:11:24Z"
    },
    {
      "author": "wclear",
      "author_association": "NONE",
      "body": "*Sidenote* In case anyone landed here looking to get rid of the trailing newline from piped input, I was able to trim the newline from a one-line output command and pass it to the `Set-Clipboard` command, for example, with the following:\r\n\r\n`echo \"abc def\" | Set-Clipboard -Value {$_.Trim()}`\r\n",
      "created_at": "2019-10-31T12:13:45Z",
      "updated_at": "2019-10-31T13:59:11Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@wclear: \r\n\r\nThis issue is about the inability to send a string as-is TO an external program, without having PowerShell append a trailing newline.\r\n\r\nIn the opposite direction, FROM an external program, as in your example, you usually have the _opposite_ problem: because PowerShell automatically splits output from external programs into an _array of lines_, you can't tell the difference between a given external program sending you just `\"foo\"` or sending ``\"foo`n\"`` (trailing newline).\r\n\r\n(In other words: strings come \"pre-trimmed\" with respect to trailing newlines, and the `.Trim()` call in your command shouldn't be necessary - unless you need to trim trailing _spaces and tabs_.)\r\n\r\nSo we'd need both `Out-Native` and \"`In-Native`\" commands (in the latter case, a solution probably requires intervention at the engine level) to address these scenarios.\r\n\r\nThe raw native-exe-to-native-exe piping or native-exe-to-file-redirection (#1908) isn't implemented yet either.\r\n\r\nI don't know what the right solution is, but, as of PowerShell Core 7.0.0-preview.5, PowerShell and external (native) executables are separate worlds that can only communicate with one another if they \"speak text\" and always assume that trailing newlines are _incidental_ to the data.\r\n\r\nNeither receiving nor sending raw data (bytes) is supported, nor is redirecting an external program's output as-is to a file.\r\n\r\n\r\n\r\n",
      "created_at": "2019-10-31T13:51:33Z",
      "updated_at": "2019-10-31T13:51:33Z"
    },
    {
      "author": "wclear",
      "author_association": "NONE",
      "body": "> This issue is about the inability to send a string as-is TO an external program, without having PowerShell append a trailing newline.\r\n\r\nThank you for that clarification @mikeehsu, I see that now. I've updated my comment to be just a sidenote.",
      "created_at": "2019-10-31T14:01:13Z",
      "updated_at": "2019-10-31T14:01:13Z"
    },
    {
      "author": "vsalvino",
      "author_association": "NONE",
      "body": "This becomes an especially difficult problem when piping text to programs cross-platform. For example, running PowerShell (core) on Windows and trying to pipe output to a program running on a Linux server. It simply seems to not be possible at the moment.\r\n\r\n```\r\nWrite-Output \"uptime\" | ssh remote@server \"bash -s\"\r\n\r\n\"uptime\" | ssh remote@server \"bash -s\"\r\n\r\n\"uptime\" | Out-String -NoNewline | ssh remote@server \"bash -s\"\r\n```\r\n\r\nRegardless of the input, the pipe here is adding a CRLF which breaks the remote command.",
      "created_at": "2020-02-11T21:30:44Z",
      "updated_at": "2020-02-11T21:32:04Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The addition of the newline appears to be an issue on both the input and output side.  On Windows:\r\n\r\n```powershell-console\r\nPS> \"hello there\" | wsl awk --% '{print $2,$1}' | out-string | format-hex\r\n\r\n   Label: String (System.String) <0F0E5C9B>\r\n\r\n          Offset Bytes                                           Ascii\r\n                 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\r\n          ------ ----------------------------------------------- -----\r\n0000000000000000 74 68 65 72 65 0D 0A 20 68 65 6C 6C 6F 0D 0A    there\ufffd\ufffd hello\ufffd\ufffd\r\n```\r\n\r\nIf you try the equivalent in cmd.exe:\r\n\r\n```cmd\r\nC:\\>echo hello there | wsl awk '{print $2,$1}'\r\nthere hello\r\n```\r\n\r\nWhat I think happens is that awk returns two strings to stdout and the PowerShell NativeCommandProcessor gets those strings and does a WriteLine() call which inserts the newlines you can see above in hex as 0D0A (CRLF).\r\n",
      "created_at": "2020-09-03T19:48:09Z",
      "updated_at": "2020-09-03T19:48:09Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT:\r\n\r\nTrue, on the output side, due to parsing output into an _array_ of lines, PowerShell _also_ does _not_ allow you to distinguish between:\r\n\r\n```powershell\r\n# On Unix: NO trailing newline\r\n$out = printf 'hi'\r\n```\r\n\r\nand \r\n\r\n```powershell\r\n# On Unix: Trailing newline\r\n$out = printf 'hi\\n'\r\n```\r\n\r\n`$out` receives verbatim `hi` - without a trailing newline - in _both_ cases.\r\n\r\nAllowing user code to make this distinction would be a nontrivial proposition, given that invocations of external (native) executables don't support any ad-hoc behavioral options, such as via common parameters.\r\n\r\nTacking `Out-String` onto such calls is _not_ a solution, because that outputs a single string that _invariably_ ends in a trailing newline _whether the original output had one or not_ (which is problematic in itself - see #14444)\r\n\r\nIn your `wsl` example, a _separate, `wsl`-specific_ problem seems to occur, given that the following works just fine:\r\n\r\n```powershell\r\n# Windows\r\nPS> cmd /c echo there hello | Out-String | Format-Hex\r\n\r\n   Label: String (System.String) <2C119606>\r\n\r\n          Offset Bytes                                           Ascii\r\n                 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\r\n          ------ ----------------------------------------------- -----\r\n0000000000000000 74 68 65 72 65 20 68 65 6C 6C 6F 0D 0A          there hello\ufffd\ufffd\r\n```\r\n\r\nSimilarly, on a Unix-like platform, `awk` works as expected:\r\n\r\n```powershell\r\n# Unix\r\nPS> \"hello there\" | awk '{print $2,$1}' | Out-String | Format-Hex\r\n\r\n   Label: String (System.String) <029F4149>\r\n\r\n          Offset Bytes                                           Ascii\r\n                 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\r\n          ------ ----------------------------------------------- -----\r\n0000000000000000 74 68 65 72 65 20 68 65 6C 6C 6F 0A             there hello\ufffd\r\n```\r\n\r\nAs an aside: That your `wsl` command line requires `--%` to pass the `awk` script through as intended is a testament to `wsl`'s broken argument handling - see https://github.com/PowerShell/PowerShell/issues/12975#issuecomment-657645025. \r\n\r\nThat said, given that a single executable - `awk` - is being invoked here, with no need to involve a _shell_, the problem can be avoided by using the `-e` / `--execute` `wsl` option: `\"hello there\" | wsl -e awk '{print $2,$1}'`\r\n",
      "created_at": "2020-09-03T21:08:10Z",
      "updated_at": "2022-08-17T16:19:42Z"
    },
    {
      "author": "petervandivier",
      "author_association": "NONE",
      "body": "I'm not sure if this adds anything to the conversation, but as a matter of reference:\r\n\r\n```powershell\r\n$foo = \"foo\"\r\n$foon = \"foo`n\"\r\n\r\n@(\r\n    '\"foo\" | xxd'\r\n    '(\"foo\" | Format-Hex).HexBytes'\r\n    '(Format-Hex -InputObject \"foo\").HexBytes'\r\n    '$foo | xxd'\r\n    '($foo | Format-Hex).HexBytes'\r\n    '\"foo`n\" | xxd'\r\n    '$foon | xxd'\r\n    '($foon | Format-Hex).HexBytes'\r\n) | % {\r\n    [PSCustomObject]@{\r\n        Command = $_\r\n        Output = iex $_\r\n    }\r\n}\r\n```\r\n\r\nBelow results are PS 7.0.3 on Darwin 19.6.0. \r\n\r\n```\r\nCommand                                  Output\r\n-------                                  ------\r\n\"foo\" | xxd                              00000000: 666f 6f0a                                foo.\r\n(\"foo\" | Format-Hex).HexBytes            66 6F 6F\r\n(Format-Hex -InputObject \"foo\").HexBytes 66 6F 6F\r\n$foo | xxd                               00000000: 666f 6f0a                                foo.\r\n($foo | Format-Hex).HexBytes             66 6F 6F\r\n\"foo`n\" | xxd                            00000000: 666f 6f0a 0a                             foo..\r\n$foon | xxd                              00000000: 666f 6f0a 0a                             foo..\r\n($foon | Format-Hex).HexBytes            66 6F 6F 0A\r\n```\r\n\r\nThis tripped me up a bit even after I thought I knew what was going on. Notably a string ending in a newline still gets a newline appended. I had previously assumed the trailing newline got appended only when missing.\r\n\r\n",
      "created_at": "2020-09-04T05:14:34Z",
      "updated_at": "2020-09-04T05:14:34Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@petervandivier, good point: a _platform-appropriate_ newline sequence - CRLF on Windows, LF on Unix - is _invariably_ added when a string is sent via the pipeline to a native executable.\r\n\r\n@SteveL-MSFT, your `wsl` problem - which is unrelated to the issue at hand - boils down to this: the CRLF newlines that PowerShell sends on Windows can cause problems when they're sent to Unix utilities such as `awk` via `wsl`, because such utilities recognize only LF newlines, and treat CRs as _data_ - I've created a new issue for it: see #13579.\r\n",
      "created_at": "2020-09-04T22:33:33Z",
      "updated_at": "2020-09-04T22:33:33Z"
    },
    {
      "author": "dazinator",
      "author_association": "NONE",
      "body": "For a specific use case (perhaps one is not needed), this makes setting creating `docker secrets` from `stdin` impossible from powershell / pscore\r\n\r\n```\r\n Write-Output \"$secretString\" | docker secret create \"my-secret\" -\r\n```\r\n\r\nThe secret is created with an additional new line appended making it invalid.",
      "created_at": "2022-01-20T17:38:39Z",
      "updated_at": "2022-01-21T09:40:07Z"
    },
    {
      "author": "spinitron",
      "author_association": "NONE",
      "body": "Is there a workaround so that something like this can encrypt without adding trailing newline characters to the secret text? (I didn't see one in the above discussion.)\r\n\r\n    'pa55w0rd'.Trim() | gpg  -e ...",
      "created_at": "2022-10-31T18:11:54Z",
      "updated_at": "2022-10-31T18:12:43Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@spinitron, call via the platform-native shell:\r\n\r\n```powershell\r\n# Unix\r\nsh -c 'printf %s ''pa55w0rd'' | gpg  -e ...'\r\n\r\n# Windows (workaround needed to print a string without a trailing newline)\r\ncmd /c '<NUL set /p =\"pa55w0rd\" | gpg -e ...'\r\n```",
      "created_at": "2022-10-31T18:40:53Z",
      "updated_at": "2022-10-31T18:40:53Z"
    }
  ],
  "created_at": "2018-01-22T00:20:11Z",
  "number": 5974,
  "state": "open",
  "title": "Piping Text To An External Program Appends A Trailing Newline",
  "updated_at": "2022-10-31T18:40:53Z"
}