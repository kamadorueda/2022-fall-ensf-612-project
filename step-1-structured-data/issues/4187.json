{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4187",
  "author": "tseward",
  "body": "When loading a snapin via `Add-PSSnapin`, the cmdlets provided by the snapin override those allowed specified via VisibleCmdlets. Is this intended behavior? Ideally, only cmdlets assigned via VisibleCmdlets would be allowed after loading a snapin.",
  "closed_at": "2021-04-05T21:04:12Z",
  "comments": [
    {
      "author": "alexandair",
      "author_association": "CONTRIBUTOR",
      "body": "First, you are not talking about PowerShell Core 6, right?\r\nSecond, I don't get how your JEA endpoint looks like. Is Add-PSSnapin one of the cmdlets defined in VisibleCmdlets setting?",
      "created_at": "2017-07-05T19:11:34Z",
      "updated_at": "2017-07-05T19:11:34Z"
    },
    {
      "author": "tseward",
      "author_association": "NONE",
      "body": "That's correct, just PowerShell as shipped in Windows Server 2016. As far as VisibleCmdlets, no the snapin is added via a script specified via ScriptsToProcess; Add-PSSnapin is not specified in VisibleCmdlets.",
      "created_at": "2017-07-05T19:17:07Z",
      "updated_at": "2017-07-05T19:17:07Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "PSSnapins aren't supported by PSCore, so this only affects Windows PowerShell.  cc @PaulHigin @rpsqrd ",
      "created_at": "2017-07-05T21:04:40Z",
      "updated_at": "2017-07-05T21:04:40Z"
    },
    {
      "author": "tseward",
      "author_association": "NONE",
      "body": "A workaround appears to be creating a 'fake' module in the Modules directory. E.g. `MyModule\\MyModule.psm1` in which it runs `Add-PSSnapin Mysnapin`. Add 'MyModule' to `ModulesToImport`. From there, only the cmdlets exposed via `VisibleCmdlets` appear.",
      "created_at": "2017-07-05T21:20:51Z",
      "updated_at": "2017-07-05T21:20:51Z"
    },
    {
      "author": "alexandair",
      "author_association": "CONTRIBUTOR",
      "body": "It's hard to tell what you are trying to accomplish without looking at your session configuration and role capability files. In general, Add-PSSnapin and Import-Module should not be exposed in the constrained, JEA endpoint. Also, I think the VisibleCmdlets setting doesn't work as you expected it to work.",
      "created_at": "2017-07-05T21:40:32Z",
      "updated_at": "2017-07-05T21:40:32Z"
    },
    {
      "author": "tseward",
      "author_association": "NONE",
      "body": "As I said, `Add-PSSnapin` isn't exposed via the endpoint, validated through `Get-Command` on the JEA session. Take SharePoint, as an example. Let's say you had a `VisibleCmdlets = 'Get-SPFarm'`. If you have a .ps1 that runs `Add-PSSnapin Microsoft.SharePoint.Powershell` and specify that script in `ScriptsToProcess`, the snapin will load successfully, but all cmdlets loaded by the snapin will be available (e.g. `Get-SPWebApplication`, `Disconnect-SPContentDatabase`, and so forth). That's clearly not desired.\r\n\r\nIf we create a module named `Microsoft.SharePoint.PowerShell` with the same `Add-PSSnapin Microsoft.SharePoint.Powershell` command within the .psm1, then add that module to `ModulesToImport`, only the cmdlets specified in `VisibleCmdlets` are available.\r\n\r\nHopefully that clarifies the difference.",
      "created_at": "2017-07-05T21:50:06Z",
      "updated_at": "2017-07-05T21:50:06Z"
    },
    {
      "author": "alexandair",
      "author_association": "CONTRIBUTOR",
      "body": "What happens if you just set VisibleCmdlets = 'Get-SPFarm' without any Add-PSSnapin and Import-Module?",
      "created_at": "2017-07-05T22:03:41Z",
      "updated_at": "2017-07-05T22:03:41Z"
    },
    {
      "author": "tseward",
      "author_association": "NONE",
      "body": "Nothing, as the snapin must be loaded. Typically we'd accomplish this (locally) through the SharePoint Management Shell which runs a .ps1 script deployed by the SharePoint installation bits that simply calls `Add-PSSnapin`. But if we use a standard Windows PowerShell window or `Enter-PSSession`, we must call `Add-PSSnapin Microsoft.SharePoint.PowerShell [-EA 0]` to make the SharePoint cmdlets available for use.",
      "created_at": "2017-07-05T22:08:43Z",
      "updated_at": "2017-07-05T22:09:11Z"
    },
    {
      "author": "alexandair",
      "author_association": "CONTRIBUTOR",
      "body": "Could you try:\r\nModulesToImport='Microsoft.SharePoint.PowerShell'\r\nVisibleCmdlets='Get-SPFarm'\r\nRemove Add-PSSnapin line for a script (to load).\r\n\r\nDoes that expose only Get-SPFarm from SharePoint snapin?",
      "created_at": "2017-07-05T22:33:36Z",
      "updated_at": "2017-07-05T22:33:36Z"
    },
    {
      "author": "alexandair",
      "author_association": "CONTRIBUTOR",
      "body": "One more idea:\r\n```\r\nVisibleCmdlets='Microsoft.SharePoint.PowerShell\\Get-SPFarm'\r\n```",
      "created_at": "2017-07-05T23:07:03Z",
      "updated_at": "2017-07-05T23:07:03Z"
    },
    {
      "author": "tseward",
      "author_association": "NONE",
      "body": "No, neither of those will work. SharePoint doesn't have a PowerShell Module, unfortunately. Only the  snapin. It will not load unless you explicitly call `Add-PSSnapin Microsoft.SharePoint.PowerShell`. None the less, I did try your suggestion of `ModulesToImport` and specifying the full path for `VisibleCmdlets`. In that case, because the snapin isn't loaded, the cmdlet isn't visible via `Get-Command` and my function that calls on a SharePoint cmdlet does not work",
      "created_at": "2017-07-06T01:27:06Z",
      "updated_at": "2017-07-06T01:27:06Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "You could build a module from the snapin. If the snapin just a container for an assembly containing cmdlets, then creating a module that loads the assembly should work. I've not tested it!",
      "created_at": "2018-09-12T11:52:03Z",
      "updated_at": "2018-09-12T11:52:03Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "This isn't a PowerShell Core issue so should be raised in a forum like PowerShell.org for further discussion IMO",
      "created_at": "2018-09-12T17:58:56Z",
      "updated_at": "2018-09-12T17:58:56Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Yes, you can wrap the snapin as a module and it'll work just fine as a module.  However, if the snapin registration code is still there it won't work in PSCore6.  Porting a snapin to a module is simply deleting the snapin code and authoring a module manifest.",
      "created_at": "2018-09-14T02:05:25Z",
      "updated_at": "2018-09-14T02:05:25Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Security Working group:\r\nWindows PowerShell issues should be report at: https://windowsserver.uservoice.com/forums/301869-powershell\r\n\r\nIf this is a security vuln, please follow the [security policy](https://github.com/PowerShell/PowerShell/security/policy)\n\n<blockquote><div><strong><a href=\"https://windowsserver.uservoice.com/forums/301869-powershell\">PowerShell: Hot (1951 ideas) \u2013 Windows Server</a></strong></div></blockquote>",
      "created_at": "2021-04-05T21:04:12Z",
      "updated_at": "2021-04-05T21:04:14Z"
    }
  ],
  "created_at": "2017-07-05T19:03:48Z",
  "labels": [
    "WG-Security"
  ],
  "number": 4187,
  "state": "closed",
  "title": "PowerShell Snapin Overrides JEA VisibleCmdlets",
  "updated_at": "2021-04-05T21:04:19Z"
}