{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10141",
  "author": "wjk",
  "body": "# Summary of the new feature/enhancement\r\n\r\nStarting on macOS Catalina, all native binaries (command-line and GUI application), as well as all .pkg installer files, must be both code-signed and notarized by Apple, or the system will refuse to run them. Notarizing the .pkg file is easy, since it is already being signed. Notarizing the `pwsh` command-line tool, as well as the `PowerShell.app` wrapper application, will be harder. Note that while notarization is optional on macOS Mojave, it is still supported on that version. We do not (and, IMHO, should not) wait for Catalina's release to start work on this important change.\r\n\r\n# Proposed technical implementation details\r\n\r\nWe will need to do the following:\r\n\r\n1. Code-sign the `pwsh` apphost binary with a Developer ID certificate. For notarization to succeed, we must also enable Hardened Runtime on that binary by passing the `-o runtime` flag to the signing tool. We must also use an entitlements file (the correct contents of which are attached at the end of this issue), or else Hardened Runtime will disallow the binary from jitting code or loading third-party dynamic libraries.\r\n2. Code-sign all `*.dylib` files with the Developer ID certificate that is used to sign the apphost binary. No other special steps are required here.\r\n3. Code-sign the `*.app` launcher with the same Developer ID certificate, and enable Hardened Runtime on it as well. While no entitlements are required for the launcher app, we must rewrite the launcher's main executable (which is currently a shell script) in Objective-C, as the macOS code signing process does not support applications with shell scripts as main executables.\r\n4. Notarize all dylibs, the apphost binary, and the launcher app before including them into the installer. You can use `xcrun altool` and `xcrun stapler` to do this.\r\n5. Notarize the `*.pkg` installer once it has been signed.\r\n\r\nNote that the code-signing process is completely independent of the .NET build process, and can easily be run on a .NET CLI-generated apphost binary, as long as the apphost binary in question has been stamped with the appropriate path before it is signed. (After signing, any changes to the binary will invalidate the signature and render the file un-runnable.)\r\n\r\n### Entitlements for `pwsh` tool\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\r\n<plist version=\"1.0\">\r\n<dict>\r\n\t<key>com.apple.security.cs.allow-unsigned-executable-memory</key>\r\n\t<true/>\r\n\t<key>com.apple.security.cs.disable-library-validation</key>\r\n\t<true/>\r\n</dict>\r\n</plist>\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "christian-korneck",
      "author_association": "NONE",
      "body": "+1 (now that ps 7-lts is ready this would make Mac Enterprise deployments easier)",
      "created_at": "2020-03-06T01:18:46Z",
      "updated_at": "2020-03-06T01:18:46Z"
    },
    {
      "author": "wjk",
      "author_association": "NONE",
      "body": "One quick note: I have since found that, while all exes/dylibs must be signed (and all exes must have Hardened Runtime enabled), only the final *.pkg file needs to be notarized. This is a good thing, as notarization is a long-running, asynchronous process. Having to repeat it over and over again for every file in the project would drive me nuts. (That's not even mentioning the automated email that Apple sends whenever a notarization run completes, which becomes quite annoying when I am monitoring it using an automated script!)",
      "created_at": "2020-03-06T01:22:11Z",
      "updated_at": "2020-03-06T01:22:11Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "This is related to https://github.com/PowerShell/PowerShell/issues/10874\r\n\r\nI understand the requirement for the pkg to be signed and notarized.\r\n\r\nCan someone explain the requirement for the executables to be signed?  I'll need I very good explanation for this.  If this involves a binary not provided by PowerShell most likely you will need to go back to that binary to get it signed.\r\n\r\nFor example\r\n> Code-sign all *.dylib files with the Developer ID certificate that is used to sign the apphost binary. No other special steps are required here.\r\n\r\nIf the binary is not from Microsoft, and several are, our policy is not not sign the binary.  I'll need a good justification to get an exception to this policy.\r\n\r\nAll of these requirement make building the package long and complicated.  We are having trouble getting notarization support at all.\r\n\r\n",
      "created_at": "2020-04-07T18:56:28Z",
      "updated_at": "2020-04-07T18:56:28Z"
    }
  ],
  "created_at": "2019-07-12T14:39:24Z",
  "number": 10141,
  "state": "open",
  "title": "Code-sign and notarize all binaries on macOS",
  "updated_at": "2020-04-07T18:56:29Z"
}