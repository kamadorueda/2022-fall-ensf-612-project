{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3106",
  "author": "JohnLBevan",
  "body": "When Write-Verbose is included in a function or cmdlet in a module file, it doesn't behave in the same way as it would had that function been written in the main script file.  i.e.\r\n```powershell\r\n# MyScript.ps1\r\n[CmdletBinding()]\r\nparam()\r\n \r\nfunction Invoke-Demo {\r\n    [CmdletBinding()]\r\n    param ([Parameter()][string]$Message)\r\n    process {Write-Verbose $Message}\r\n}\r\n \r\nInvoke-Demo 'This DOES show when I run \".\\MyScript.ps1 -Verbose\"'\r\nWrite-Verbose 'This DOES show when I run \".\\MyScript.ps1 -Verbose\"'\r\n```\r\nBehaves differently to:\r\n```powershell\r\n# MyModule.psm1\r\nfunction Invoke-Demo {\r\n    [CmdletBinding()]\r\n    param ([Parameter()][string]$Message)\r\n    process {Write-Verbose $Message}\r\n}\r\n```\r\n```powershell\r\n# MyScript.ps1\r\n[CmdletBinding()]\r\nparam()\r\nImport-Module -Path '.\\MyModule.psm1' -Force\r\nInvoke-Demo 'This does NOT show when I run \".\\MyScript.ps1 -Verbose\"'\r\nWrite-Verbose 'This DOES show when I run \".\\MyScript.ps1 -Verbose\"'\r\n```\r\nThis seems counter intuitive, and overly complex to get write-verbose to function based on whether the script is being run with the verbose switch enabled.\r\n\r\n---\r\n**Suggested Solution**\r\nSince there may be a design reason for this behaviour, it's likely best that any new behaviour be controlled explicitly.  As such I'd suggest enabling `Write-Verbose` to function as desired by including a switch when importing the module; i.e. \r\n```powershell\r\nImport-Module -Path '.\\MyModule.psm1' -Force -InheritVerbose\r\n```\r\n\r\n---\r\n\r\nMore information here: https://developer42.wordpress.com/2017/02/04/powershell-suggestion-simplify-write-verbose-in-modules/\r\n\r\n\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "joeypiccola",
      "author_association": "NONE",
      "body": "I hit this a few years back, was hoping it was figured out. ",
      "created_at": "2017-05-03T22:14:19Z",
      "updated_at": "2017-05-03T22:14:33Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "It took a while to emerge, but this is actually the more fundamental issue discussed in #4568:\r\n\r\nInheritance of common parameters - not just `-Verbose`, but notably also `-WhatIf` - via advanced functions relies on _implicitly set local preference variables_: \r\n\r\nA _common parameter_, such as `-Verbose`, passed to an advanced function is function-internally automatically translated into an equivalent local preference variable_,  such as `$VerbosePreference`.\r\n\r\nThis inheritance mechanism ONLY works:\r\n * when invoking _binary cmdlets_, which do see and respect the local preference variable.\r\n * when calling scripts / other functions _in the same module scope as the caller_.\r\n\r\nBy contrast, a function from a _different_ module _cannot_ see the caller's local preference variable, due to how module scopes function fundamentally.\r\n\r\nIn short: the common-parameter inheritance mechanism is fundamentally broken for advanced functions across module scopes.\r\n\r\n",
      "created_at": "2018-04-07T21:06:27Z",
      "updated_at": "2018-04-07T21:06:27Z"
    }
  ],
  "created_at": "2017-02-06T23:29:44Z",
  "labels": [
    "Issue-Enhancement"
  ],
  "number": 3106,
  "state": "open",
  "title": "Suggestion :: Write-Verbose Behaviour when packaged in a module  ",
  "updated_at": "2018-04-07T21:06:27Z"
}