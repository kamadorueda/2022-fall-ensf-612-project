{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11384",
  "author": "mklement0",
  "body": "# Steps to reproduce\r\n\r\n```powershell\r\n'42' | Test-Json | Should -BeTrue\r\n'[ 1, 2 ]' | Test-Json | Should -BeTrue\r\n```\r\n\r\n# Expected behavior\r\n\r\nThe tests should succeed, given that these are valid [JSON strings](https://www.json.org/json-en.html) and that piping them to `ConvertFrom-Json` works just fine:\r\n\r\n```powershell\r\n# These tests pass.\r\n'42' | ConvertFrom-Json | Should -Be 42\r\n'[ 1, 2 ]' | ConvertFrom-Json | Should -Be 1, 2\r\n```\r\n\r\n# Actual behavior\r\n\r\nBoth tests fail.\r\n\r\n# Environment data\r\n\r\n\r\n```none\r\nPowerShell Core 7.0.0-rc.1\r\n```\r\n",
  "closed_at": "2022-07-25T17:43:50Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 Could you please add more info why it should work in the way? Maybe reference to a standard or a quote from the standard. It would help to avoid regressions in follow fix.",
      "created_at": "2019-12-18T06:29:44Z",
      "updated_at": "2019-12-18T06:29:44Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov, I've added a link to json.org to the OP, and also a demonstration that `ConvertFrom-Json` itself happily accepts such inputs.",
      "created_at": "2019-12-18T11:22:07Z",
      "updated_at": "2019-12-18T11:22:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We use NewtonSoft JObject.Parse() which throws. I tried System.Text.Json.JsonDocument.Parse() and \u2026 most of our tests failed because examples in the issue and out tests in Test-Json.Tests.ps1 use single quotes but Json standard allows only double quotes.\r\nSo we should decide what to do because switching to JsonDocument.Parse() looks like a breaking change. \r\nWith double quotes the tests and the issue examples are passed if JsonDocument.Parse() is used.",
      "created_at": "2019-12-18T14:17:29Z",
      "updated_at": "2019-12-18T14:17:29Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> use single quotes but Json standard allows only double quotes.\r\n\r\nThe single quotes aren't in the _data_, they are only there as _PowerShell's string delimiter_.\r\n\r\nWhat `Test-Json` sees is just `42` and `[ 1, 2 ]` and both are valid JSON strings.\r\n\r\nI haven't looked at the internals, but it's obvious that whatever `ConvertFrom-Json` manages to parse should be considered valid by `Test-Json`.\r\n\r\n",
      "created_at": "2019-12-18T14:24:59Z",
      "updated_at": "2019-12-18T14:24:59Z"
    },
    {
      "author": "jochenvanwylick",
      "author_association": "NONE",
      "body": "+1 Encountered the same problem here - would love to see this resolved!",
      "created_at": "2019-12-19T15:01:43Z",
      "updated_at": "2019-12-19T15:01:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@jochenvanwylick You could download artifact from #11397, check your scenarios and report issues there.",
      "created_at": "2019-12-19T17:24:48Z",
      "updated_at": "2019-12-19T17:24:48Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: In the current implementation,\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/7b33cfe8470e100e4de3942eecbb57549e293747/src/Microsoft.PowerShell.Commands.Utility/commands/utility/TestJsonCommand.cs#L70\r\n\r\nshould be:\r\n\r\n```c#\r\nparsedJson = JToken.Parse(Json);\r\n```\r\n\r\nOnly `JToken` correctly parses JSON documents such as `42`  and `[ 1, 2 ]`, whereas `JObject` accepts just a _single object_ (dictionary).\r\n\r\nOr, better yet, use the same technique that `ConvertFrom-Json` uses:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/7b33cfe8470e100e4de3942eecbb57549e293747/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/JsonObject.cs#L179-L187\r\n\r\nNote that the code there contains a workaround for a NewtonSoft bug that's no longer needed.\r\n\r\n--- \r\n\r\nIn a `System.Text.Json`-based implementation, `System.Text.Json.JsonDocument.Parse()` is indeed the right tool.\r\n\r\n---\r\n\r\nAll these tests succeed:\r\n\r\n```powershell\r\n# Valid JSON\r\n'42', '[ 1, 2 ]', '{ \"foo\": 1 }' | % {\r\n    {  [System.Text.Json.JsonDocument]::Parse($_) } | Should -Not -Throw\r\n    {  [Newtonsoft.Json.Linq.JToken]::Parse($_)  } | Should -Not -Throw\r\n}\r\n\r\n# Invalid JSON\r\n'a', '[', '{ \"foo\": 1 }, { \"bar\": 2 }' | % {\r\n    {  [System.Text.Json.JsonDocument]::Parse($_) } | Should -Throw\r\n    {  [Newtonsoft.Json.Linq.JToken]::Parse($_)  } | Should -Throw\r\n}\r\n\r\n```\r\n\r\n\r\n",
      "created_at": "2019-12-19T18:56:37Z",
      "updated_at": "2019-12-19T18:56:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 Thanks! I think we should move to Core API if possible. Sooner or later it will happen anyway. If there are no serious problems, it is better to do it \"sooner\".\r\n\r\n",
      "created_at": "2019-12-19T19:07:26Z",
      "updated_at": "2019-12-19T19:07:26Z"
    },
    {
      "author": "thedavecarroll",
      "author_association": "NONE",
      "body": "Has there been any progress on this?\r\n\r\nA Redditor recently made a [similar comment](https://www.reddit.com/r/PowerShell/comments/fgopt5/powershell_7_changes_to_json_cmdlets/fk6y8hh?utm_source=share&utm_medium=web2x). I responded with a link to this issue.\r\n\r\nBasically, I said that they could use `ConvertFrom-Json | ConvertTo-Json | Test-Json` to perform tests. \r\n\r\n```powershell\r\n'[ { name : \"Joe\" } ]' | ConvertFrom-Json | ConvertTo-Json | Test-Json\r\n```\r\n\r\nIs this the best advice for **PowerShell 7 GA**?",
      "created_at": "2020-03-11T13:24:37Z",
      "updated_at": "2020-03-11T13:24:37Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@thedavecarroll, yes, it's unfortunate that this wasn't addressed in time for 7.0\r\n\r\nPR #11397 will implicitly fix these issues, if I understand correctly, but due to its move to a different underlying API it will bring breaking changes, notably no longer  being able to use _single_-quoted JSON (right, @iSazonov?).\r\n\r\nI wasn't even aware of the other issue that `Test-Json` doesn't support its input as an _array_ of lines, the way `ConvertFrom-Json` does  (e.g., `'{ \"foo\": ', '\"bar\" }' | Test-Json` fails, which succeeds with `ConvertFrom-Json`)\r\n\r\nAs for a workaround: It's sufficient to use only `ConvertFrom-Json`, and derive from its failure whether the input is valid JSON or not:\r\n\r\n```powershell\r\n$valid = try { $null = '[ { name : \"Joe\" } ]' | ConvertFrom-Json; $true } catch { $false }\r\n```\r\n",
      "created_at": "2020-03-11T13:59:49Z",
      "updated_at": "2020-03-11T14:00:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 Yes. \r\nCurrently we are waiting .Net 5.0 public preview to continue.",
      "created_at": "2020-03-11T14:48:47Z",
      "updated_at": "2020-03-11T14:48:47Z"
    },
    {
      "author": "dgard1981",
      "author_association": "NONE",
      "body": "Might we get another update on this issue?\r\n\r\n@iSazonov said -\r\n> Currently we are waiting .Net 5.0 public preview to continue.\r\n\r\nLooks like this has [now happened](https://devblogs.microsoft.com/dotnet/announcing-net-5-0-preview-5/).\r\n\r\nWith regards to suggested workarounds using `ConvertFrom-Json` - unfortunately that's no good if you are trying to test against a schema.",
      "created_at": "2020-07-08T16:33:45Z",
      "updated_at": "2020-07-08T16:33:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We have PRs for ConvertFrom-Json and Test-Json a long time without review. Unfortunately, we missed this time. I think it makes no sense to continue this now. .Net 5 will be frozen soon for release and we have no chance to fix something there if we find problems.\r\n",
      "created_at": "2020-07-08T17:56:16Z",
      "updated_at": "2020-07-08T17:56:16Z"
    },
    {
      "author": "heilkn",
      "author_association": "NONE",
      "body": "Hello,\r\n\r\nwhat does that mean now? The world will be stuck with a broken command? Could you please make a clear statement, whether this issue will be abandoned or resolved?\r\n\r\nKind regards\r\n\r\nKonstantin",
      "created_at": "2020-08-19T13:05:41Z",
      "updated_at": "2020-08-19T13:05:41Z"
    },
    {
      "author": "gogbg",
      "author_association": "NONE",
      "body": "I'm encountering the same issue.\r\nPlease fix it before .net 5.0",
      "created_at": "2020-08-20T20:48:38Z",
      "updated_at": "2020-08-20T21:05:53Z"
    },
    {
      "author": "MalcolmTyrrell",
      "author_association": "NONE",
      "body": "In case it's useful to anyone, I've had some success working around this issue with code like the following:\r\n```\r\ntry\r\n{\r\n    # Work around a limitation of Test-Json, which can't parse top-level arrays:\r\n    # Wrap the actual json as the value of a single property \"_\" in an object.\r\n    $schemaPrefix = \"{`\"type`\":`\"object`\",`\"properties`\":{`\"_`\":\"\r\n    $schemaBody = $schema -replace \"`\"\\`$ref`\"\\s*:\\s*`\"#/\", \"`\"`$ref`\":`\"#/properties/_/\"\r\n    $schemaSuffix = \"}}\"\r\n    $wrappedSchema = $schemaPrefix + $schemaBody + $schemaSuffix\r\n    $wrappedJson = \"{`\"_`\":\" + $json +\"}\"\r\n    Test-Json -Json $wrappedJson -Schema $wrappedSchema -ErrorAction Stop\r\n    return $True\r\n}\r\ncatch\r\n{\r\n    # Have to unwrap the path in any schema error\r\n    $schemaError = $_.ErrorDetails.Message.Replace(\"#/_.\", \"#/\").Replace(\"#/_[\", \"#/[\")\r\n    Write-Error \"$($_.Exception.Message) $($schemaError)\"\r\n    return $False\r\n}\r\n```",
      "created_at": "2020-10-23T08:51:16Z",
      "updated_at": "2020-10-23T08:51:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You could try artifact from #11397 (now it is on 5.0 RC2) - both tests from the OP are passed.\r\n\r\n> single-quoted JSON\r\n\r\nThis was rejected by .Net team because of (1) low audience, (2) performance lack. https://github.com/dotnet/runtime/issues/31608 It is true for Test-Json too. I believe we have no need to think about this today.",
      "created_at": "2020-10-23T10:25:03Z",
      "updated_at": "2020-10-23T10:25:03Z"
    },
    {
      "author": "hacst",
      "author_association": "NONE",
      "body": "Also stumbled over this. I reported a bug against the documentation of Test-Json so we can at least have the limitations documented. As it is now Test-Json does not really validate JSON. It accepts invalid JSON in the form of single quotes and comments while rejecting valid JSON like arrays.\r\n\r\nWhile I would prefer it to actually validate JSON I'm fine with it working with a dialect and being limited to objects if that can no longer be changed. But at least it should be clearly documented.\r\n\r\nMaybe a `-Dialect` flag or something could be added to fix this in a backwards compatible way?",
      "created_at": "2021-07-02T15:33:54Z",
      "updated_at": "2021-07-02T15:35:33Z"
    },
    {
      "author": "Michaelvsk",
      "author_association": "NONE",
      "body": "Seems that it hasen't been fixed up until now? Just tried with `PowerShell 7.2.0-preview.8` and still same problem (array not considered a valid JSON). :(",
      "created_at": "2021-08-12T11:52:12Z",
      "updated_at": "2021-08-12T11:52:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "No, PR is waiting 1.5 years.",
      "created_at": "2021-08-12T12:09:17Z",
      "updated_at": "2021-08-12T12:09:17Z"
    },
    {
      "author": "Szeraax",
      "author_association": "NONE",
      "body": "After having read through all of these comments, I'm convinced that MS wants you to use try/catch Convertfrom-Json for validating json. And now I think I have seen this before. So sad that we will have to keep waiting on this bug to get resolved. \r\n\r\nImagine if Test-Path/Resolve-Path and Get-Item/gci worked differently for hidden items......... (sarcasm, *Item cmdlets don't find hidden paths unless you use `-Force`, but *-Path cmdlets do). ",
      "created_at": "2021-12-05T05:01:54Z",
      "updated_at": "2021-12-05T05:02:57Z"
    },
    {
      "author": "JordanTheITGuy",
      "author_association": "NONE",
      "body": "This is pretty frustrating. \r\n\r\nThis basically means that if you want to do anything more complicated than a single object you have to break the array into unique objects, which is terrible from a performance perspective, and otherwise you're stuck with try-catch stuff. ",
      "created_at": "2021-12-29T16:33:06Z",
      "updated_at": "2021-12-29T16:33:06Z"
    },
    {
      "author": "traberc",
      "author_association": "NONE",
      "body": "I just stumbled across this issue and am baffled that it hasn't been resolved in 2 years, even in the latest versions of PowerShell.\r\n\r\nI am currently running PowerShell 7.2 in Visual Studio Code and `Test-Json` reports a JSON file is invalid with an array as the root object. Both Visual Studio Code and `ConvertFrom-Json` treat this file as valid JSON. \r\n\r\nAs others have mentioned, regardless of what JSON standard PowerShell is conforming to, `Test-Json` and `ConvertFrom-Json` should treat the same input as either valid or invalid JSON. They should not give different results.\r\n\r\nIn my case, I can change the schema of my source config file, but that's a lame workaround for a 2-year-old bug.",
      "created_at": "2022-01-15T01:22:41Z",
      "updated_at": "2022-01-15T01:22:41Z"
    },
    {
      "author": "m-soltani",
      "author_association": "NONE",
      "body": "Really frustrating that this issue still exists. I have exactly a case for which I can not develop a workaround and `Test-Json` cmdlet should really have this issue fixed.\r\nAnybody have a working solution when you have to really test against a json schema ?",
      "created_at": "2022-03-12T20:10:35Z",
      "updated_at": "2022-03-12T20:10:35Z"
    },
    {
      "author": "MalcolmTyrrell",
      "author_association": "NONE",
      "body": "If you're desperate, you could try the hacky code in my comment above. It seemed to work OK for a scenario I had.",
      "created_at": "2022-03-14T10:26:43Z",
      "updated_at": "2022-03-14T10:26:43Z"
    },
    {
      "author": "hilari0n",
      "author_association": "NONE",
      "body": "Yes, this is unbelievable and frustrating, that such a simple and obvious error is still not fixed.\r\nI ended up writing my own Test-Json script. Unfortunately I can't share it, as it's now the property of my employer.\r\n\r\nLooking at the original code it's not that hard to write your own. You can safely assume, that Newtonsoft.Json and NJsonSchema libraries are present, as PowerShell uses them for this crippled implementation, so they are a mandatory dependency. So you can parse your Json using Newtonsoft.Json, parse your schema using NJsonSchema and do the validation of the first by the second, so using the same libraries the Test-Json command does and probably a similar approach.\r\nYou can add your own features too, e.g. accept Json file paths (not just Json content) and maybe with wildcards, load Json schema indicated in the Json document, provide a way to add PowerShell code validation (e.g. where Json schema can't cover some requirements), change the output format (so you can have results for multiple Json files and it's clear which error is for which document), allow some deserialization options to be set (like max depth, date or number processing), the parsed Json to be returned (so you do not have to parse it separately), etc.\r\nMost of this can be done while maintaining compatibility with the Test-Json command (i.e. it failing for non-objects), by having the needed behavior work on switches and keeping the default call perform the same crap as Test-Json.",
      "created_at": "2022-03-14T12:38:51Z",
      "updated_at": "2022-03-14T12:38:51Z"
    },
    {
      "author": "m-soltani",
      "author_association": "NONE",
      "body": "puhh, dont want to waste time, mess around with internals of PowerShell. Found a workaround for this.",
      "created_at": "2022-03-28T15:37:35Z",
      "updated_at": "2022-03-28T15:37:35Z"
    },
    {
      "author": "eric-ash-1",
      "author_association": "NONE",
      "body": "I would also love to see this bug fixed. It's still there in 7.2.3",
      "created_at": "2022-05-05T17:47:10Z",
      "updated_at": "2022-05-05T17:47:10Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "No idea why @iSazonov 's [MR](https://github.com/PowerShell/PowerShell/pull/11397) was closed, but per @mklement0 's suggestion, I just changed the `parsedJson` from `JObject` to `JToken` and everything works with just one line of diff (plus one to remove unnecessary outside declaration):\r\n\r\n```csharp\r\n-                parsedJson = JObject.Parse(Json);\r\n+                var parsedJson = JToken.Parse(Json);\r\n```\r\n\r\nI'll add extra tests and create an MR.",
      "created_at": "2022-07-20T17:13:43Z",
      "updated_at": "2022-07-20T17:14:03Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #17741, which has now been successfully released as `v7.3.0-preview.7`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.3.0-preview.7)\n",
      "created_at": "2022-08-12T00:00:29Z",
      "updated_at": "2022-08-12T00:00:29Z"
    }
  ],
  "created_at": "2019-12-17T19:02:04Z",
  "labels": [
    "Issue-Question",
    "Resolution-Fixed",
    "WG-Cmdlets-Utility"
  ],
  "number": 11384,
  "state": "closed",
  "title": "Test-Json doesn't recognize JSON arrays or primitives",
  "updated_at": "2022-08-12T00:00:29Z"
}