{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3779",
  "author": "bmanikm",
  "body": "This regression got introduced with #3556. This impacted the functionality of PowerShellGet module in PowerShellCore beta1 release (https://github.com/PowerShell/PowerShellGet/issues/125).\r\n\r\nI think, Add-Type should ignore -ReferencedAssemblies if that is not applicable on PowerShellCore. \r\nAdd-Type should still support -ReferencedAssemblies for assemblies which are not referenced by default in PowerShellCore.\r\n\r\nThis impacts all PowerShell Script modules which uses Add-Type with -ReferencedAssemblies. Please ensure that this is not another SemanticVersion related issue in PowerShellCore for 2 part version comparison with $PSVersionTable.PSVersion .\r\n\r\nRepro\r\n------\r\n```powershell\r\n$requiredAssembly = @([System.Management.Automation.PSCmdlet].Assembly.FullName)\r\n$source = @\"\r\nusing System.Management.Automation;\r\nnamespace Microsoft.PowerShell.Commands.PowerShellGet\r\n{\r\n     [Cmdlet(\"Get\", \"Test\")]\r\n     public class Telemetry : PSCmdlet\r\n     {\r\n         protected override void ProcessRecord()\r\n         {\r\n             WriteObject(new { ArtifactsNotFound = \"abc\" });\r\n         }\r\n     }\r\n }\r\n\"@\r\n\r\nAdd-Type -TypeDefinition $source -Language CSharp -Verbose -PassThru -ReferencedAssemblies $requiredAssembly\r\n```\r\n\r\nExpected Behavior\r\n--------------------\r\n`Add-Type` runs successfully, link on Windows PowerShell v 5.1\r\n\r\nActual Behavior\r\n-----------------\r\n```\r\nAdd-Type : (1) : Missing compiler required member 'System.Collections.Generic.EqualityComparer`1.Equals'\r\n(1) : >>> using System.Management.Automation;\r\n(2) : namespace Microsoft.PowerShell.Commands.PowerShellGet\r\nAt line:1 char:1\r\n+ Add-Type -TypeDefinition $source -Language CSharp -Verbose -PassThru  ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidData: (Microsoft.Power...peCompilerError:AddTypeCompilerError) [Add-Type], Exception\r\n+ FullyQualifiedErrorId : SOURCE_CODE_ERROR,Microsoft.PowerShell.Commands.AddTypeCommand\r\n\r\nAdd-Type : (1) : Missing compiler required member 'System.Collections.Generic.EqualityComparer`1.GetHashCode'\r\n(1) : >>> using System.Management.Automation;\r\n(2) : namespace Microsoft.PowerShell.Commands.PowerShellGet\r\nAt line:1 char:1\r\n+ Add-Type -TypeDefinition $source -Language CSharp -Verbose -PassThru  ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidData: (Microsoft.Power...peCompilerError:AddTypeCompilerError) [Add-Type], Exception\r\n+ FullyQualifiedErrorId : SOURCE_CODE_ERROR,Microsoft.PowerShell.Commands.AddTypeCommand\r\n\r\nAdd-Type : (1) : Missing compiler required member 'System.Collections.Generic.EqualityComparer`1.get_Default'\r\n(1) : >>> using System.Management.Automation;\r\n(2) : namespace Microsoft.PowerShell.Commands.PowerShellGet\r\nAt line:1 char:1\r\n+ Add-Type -TypeDefinition $source -Language CSharp -Verbose -PassThru  ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidData: (Microsoft.Power...peCompilerError:AddTypeCompilerError) [Add-Type], Exception\r\n+ FullyQualifiedErrorId : SOURCE_CODE_ERROR,Microsoft.PowerShell.Commands.AddTypeCommand\r\n\r\nAdd-Type : Cannot add type. Compilation errors occurred.\r\nAt line:1 char:1\r\n+ Add-Type -TypeDefinition $source -Language CSharp -Verbose -PassThru  ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidData: (:) [Add-Type], InvalidOperationException\r\n+ FullyQualifiedErrorId : COMPILER_ERRORS,Microsoft.PowerShell.Commands.AddTypeCommand\r\n```\r\n\r\nEnvironment\r\n--------------\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-rc\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-rc\r\nOS                             Microsoft Windows 10.0.16299\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nSolution/Workaround\r\n------------------------\r\n`Add-Type` now implicitly include all `netcoreapp2.0` reference assemblies and `System.Management.Automation` by default with `-ReferenceAssembly` is not specified. So running `Add-Type` without `-ReferenceAssembly` will work.",
  "closed_at": null,
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "[Move discussion comments from MSTeam to Github]\r\n`Add-Type` can be made smarter to do better choice about what explicitly given reference assemblies to ignore and what to included implicitly. The user probably should be notified that the ignored ref assemblies are not necessary, probably through a warning message.",
      "created_at": "2017-05-13T00:37:35Z",
      "updated_at": "2017-05-13T00:37:35Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The problem we need to solve (or at least mitigate) is to avoid requiring conditional logic about how to specify `-ReferenceAssembly` parameter when using `Add-Type` in a script that would run on Windows PowerShell and PowerShell Core. Ideally, a single set of arguments for `-ReferenceAssembly` should work on both Windows PowerShell and PowerShell Core.",
      "created_at": "2017-05-13T00:59:09Z",
      "updated_at": "2017-05-13T01:01:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw It seems you already fixed the Issue.",
      "created_at": "2017-11-20T12:50:54Z",
      "updated_at": "2017-11-20T12:50:54Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov If I remember it correctly, running `Add-Assembly` with the same script may require different reference assemblies on Wndows PowerShell and PowerShell Core, so a conditional logic is needed if `Add-Type` is needed for a module targeting both Windows PowerShell and PowerShell Core. This issue is for solving or mitigating that problem.",
      "created_at": "2017-11-20T22:48:45Z",
      "updated_at": "2017-11-20T22:48:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Thanks for clarify! The repo and workaround from the Issue don't work now. Have you new repo?",
      "created_at": "2017-11-21T05:23:52Z",
      "updated_at": "2017-11-21T05:23:52Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov I have updated the repro steps in the issue description. It should demonstrate that the same script runs on Windows PowerShell but fails on PowerShell Core.",
      "created_at": "2017-11-29T06:09:53Z",
      "updated_at": "2017-11-29T06:09:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Thanks for the update!\r\nIf we remove `-ReferencedAssemblies` the code works on both versions - so the reference on the assembly is not mandatory for Windows PowerShell. The error is because _required_ assemblies is missing from this list `-ReferencedAssemblies`. If replace `s_autoReferencedAssemblies.Value` with `s_defaultAssemblies.Value` in [the line](https://github.com/PowerShell/PowerShell/blob/master/src/Microsoft.PowerShell.Commands.Utility/commands/utility/AddType.cs#L1158) the Issue is resolved. If it is a right fix I can add it to [my fork ](https://github.com/iSazonov/PowerShell/blob/addtype-enhance1/src/Microsoft.PowerShell.Commands.Utility/commands/utility/AddType.cs) where I work on SyntaxTree integration.",
      "created_at": "2017-11-29T08:01:57Z",
      "updated_at": "2017-11-29T08:01:57Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov The repro is just a demonstration, there could be other examples which you can come up with yourself once leaned the code that causes the issue.\r\n\r\nIf I remember correctly, you will also need to resolve the conflicts between what are specified by the user with `-ReferenceAssemblies` and the default references we use. The default ones are pointing to the reference assemblies in the `/refs` folder. If the user specify a dll path points to the runtime dll, you may get `ambiguous type identity` or other issues during the compilation. But sometimes it's OK to use a runtime dll path so that you can use types that are not included in the reference dlls that we include (we only include the standard .NET Core 2.0 reference assemblies, but say you want to use `Json.net.dll`).\r\n\r\nCurrently, we include the default references (all .NET Core 2.0 ref assemblies) only if `-ReferenceAssemblies` is not specified. It will be tricky if you want to always include them.",
      "created_at": "2017-11-29T18:51:38Z",
      "updated_at": "2017-11-29T18:51:38Z"
    }
  ],
  "created_at": "2017-05-13T00:29:56Z",
  "number": 3779,
  "state": "open",
  "title": "Add-Type should not fail when default referenced assemblies are specified with -ReferencedAssemblies",
  "updated_at": "2017-11-29T18:51:39Z"
}