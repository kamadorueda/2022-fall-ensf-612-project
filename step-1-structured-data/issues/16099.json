{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16099",
  "author": "sba923",
  "body": "### Summary of the new feature / enhancement\r\n\r\nWhen running PowerShell within Windows Terminal, one can use OSC9;4 sequences to indicate (on the tab and on the taskbar) that a lengthy command is being executed:\r\n\r\n````powershell\r\nWrite-Host \"`e]9;4;3;100`a\"\r\n# something that will take quite some time to run\r\n Write-Host \"`e]9;4;0;100`a\"\r\n````\r\n\r\nIt would be useful to have a built-in mechanism that sets the terminal's progress state \"automatically\" (should be configurable, of course).\r\n\r\nThis would give users a \"seamless\" experience like in any other apps that perform lengthy operations.\r\n\r\n\r\n\r\n### Proposed technical implementation details (optional)\r\n\r\nThis should be done in such a way that it doesn't interfere with a potential future use of OSC9;4 by `Write-Progress` et al. (for instance, there should be some kind of function that computes the desired terminal progress state from a combination of _multiple_ sources).\r\n\r\nIn https://twitter.com/Steve_MSFT/status/1437467621599768576?s=20 @SteveL-MSFT  suggests:\r\n\r\n> Maybe in PS7, if a command takes more than some predetermined time to complete (5 secs?), then the native command processor can set the terminal progress state and reset upon completion?\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "This has been implemented.  If you have `7.2.0-preview.9`, try setting this `$PSStyle.Progress.UseOSCIndicator = $true` and then in Windows Terminal the taskbar button will show progress, as will the terminal tab icon.",
      "created_at": "2021-09-15T15:17:53Z",
      "updated_at": "2021-09-15T15:18:47Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "I've tried this with `gci -rec c:/` and get no 'indeterminate' progress indicator...\r\n\r\nMaybe you're referring to the `Write-Progress` feature I was referring to? This rings a bell. Can you please provide a link to the issue/PR?",
      "created_at": "2021-09-15T18:14:21Z",
      "updated_at": "2021-09-15T18:17:29Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@rkeithhill that feature is tied to `Write-Progress`.  What @sba923 is asking for is if a command takes a long time (and doesn't write progress), then have PowerShell automatically emit that ANSI code so that tab indicates it is busy.",
      "created_at": "2021-09-15T19:02:47Z",
      "updated_at": "2021-09-15T19:02:47Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "For reference, what's the link to that other `Write-Progress` feature?",
      "created_at": "2021-09-15T19:43:45Z",
      "updated_at": "2021-09-15T19:43:45Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "`Write-Progress` is a command you can use in your own functions to display progress of a long running function.  Right now, in PowerShell, it is up to the implementation of individual commands as to whether or not they display progress.  Invoke-WebRequest is one such command that displays progress.  Internally, commands use the same underlying code that `Write-Progress` uses to display progess.\r\n\r\nYou can try this with this command in PowerShell:\r\n\r\n```powershell\r\n1..100 | %{Write-Progress -Activity 'Busying doing foo' -Status \"$_% complete\" -PercentComplete $_; Sleep -m 250}\r\n```\r\n\r\n@SteveL-MSFT You refer to doing this for native commands but the OP asks about `gci` in a follow up post.  \ud83e\udd37 \r\n",
      "created_at": "2021-09-15T20:19:23Z",
      "updated_at": "2021-09-15T20:19:23Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "It seems my description of the feature was far from clear.\r\n\r\nWhat I'm suggesting is a _seamless_ mechanism where PowerShell would automagically detect that I'm launching _any_ command, sets the progress indicator to \"indeterminate\" when the command starts, and resets the progress indicator when the command completes execution.\r\n\r\n@SteveL-MSFT suggested to set the \"indeterminate\" state not when the command starts but when PowerShell internally has determined that the command has been running for longer than some predetermined amount of time.\r\n\r\nMy test with `gci` was just a randomly picked long-running command to test whether the desired behavior had already been implemented.\r\n\r\n",
      "created_at": "2021-09-15T20:52:38Z",
      "updated_at": "2021-09-15T20:52:38Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "You can set this up in your profile by overriding `PSConsoleHostReadLine`:\r\n\r\n```powershell\r\nfunction PSConsoleHostReadLine {\r\n    Microsoft.PowerShell.Core\\Set-StrictMode -Off\r\n    Write-Host \"`e]9;4;0;100`a\" -NoNewline\r\n    [Microsoft.PowerShell.PSConsoleReadLine]::ReadLine($host.Runspace, $ExecutionContext)\r\n    Write-Host \"`e]9;4;3;100`a\" -NoNewline\r\n}\r\n```\r\n\r\nI'm a little reluctant to agree that this should be a default though. If I have a PowerShell window open constantly running, like monitoring something, I don't really want the whole process group in the task bar to show as in-progress.  Also simply running `vim` or some other interactive console app would trigger it.",
      "created_at": "2021-09-21T13:22:28Z",
      "updated_at": "2021-09-21T13:22:28Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I could see this being built into Write-Progress / the WriteProgress() method on PSCmdlet itself, potentially, but I agree that having it be a default thing for _any_ potentially long-running command is probably a bit of a broad stroke.\r\n\r\nAlternatively, exposing methods for emitting these sequences easily via some API on the PSHost or something along those lines might be a neater solution?",
      "created_at": "2021-09-21T13:54:14Z",
      "updated_at": "2021-09-21T13:54:14Z"
    }
  ],
  "created_at": "2021-09-15T08:19:11Z",
  "labels": [
    "WG-Interactive-Console",
    "Needs-Triage"
  ],
  "number": 16099,
  "state": "open",
  "title": "Automatic setting of terminal progress state",
  "updated_at": "2021-09-21T13:54:14Z"
}