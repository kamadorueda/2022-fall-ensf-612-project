{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13549",
  "author": "agowa338",
  "body": "## Steps to reproduce\r\n\r\n```powershell\r\n$a = {Start-Sleep -Seconds 100;Write-Host \"sleep 100 - 1st\"}\r\n$b = 1..10 | ForEach-Object { Start-ThreadJob -ScriptBlock $a -ThrottleLimit 2 }\r\n$c = 1..10 | ForEach-Object { Start-ThreadJob -ScriptBlock $a -ThrottleLimit 10 }\r\n$b\r\n```\r\n\r\n## Expected behavior\r\n\r\nThrottleLimit should either only apply for the one line it was specified with e.g. the one that fills $b and the other one for those that fill $c.\r\nBut that may be hard to impossible, as it would require the command within the scriptblock of the foreach knowing about the piping and even than it would break in countless of other cases.\r\n\r\nThe better fix may be adding a \"ThreadPool\" parameter that allows \"ThrottleLimit\" to just apply to that pool of threads, as well as documenting within the Get-Help pages that ThrottleLimit changes a global constant and that it influences already scheduled tasks.\r\n\r\nA third possible fix would be to store the ThreadLimit with the ThreadJob id and compare the amount of currently running threads against the limit of the next one in the list (basically if 4 tasks already run and task 5 should be started,  it simply could be checked what the ThreadLimit of task 5 is and if lesser Threads are currently running). This would introduce an implicit synchronization, as all tasks of b would complete before any of the ones within $c will start, but as the tasks are currently also processed using FIFO this may be the best fix. Using this approach all tasks within $b will be started using a ThreadLimit of 2, except the last one, that will be started using the ThreadLimit of $c. E.g. it will run together with the first 9 tasks of $c. This however is not an issue, as 9 is below the expected limit of 10. And also for the tasks in $b 1 is also below the there defined limit of 2. If the limit of a later task is smaller, it simply will not start until enough of the previous tasks have completed.\r\nAnd the implementation of ThreadPools for Start-ThreadJob could be put into the backlog for being implemented with the next version.\r\n\r\nWhen dealing with different APIs, the current behaviour could lead to unexpectedly running into rate limitations.\r\nE.g. if $b contains threads to the API of e.g. `https://example.com/` with a strict rate limit of 2 and $c contains threads querying the api of `https://contoso.com/` with a less strict rate limit of 10\r\n\r\n## Actual behavior\r\n\r\nThe ThrottleLimit apparently changes a global constant which influences how many threads within $b are started, even though it was specified for $c.\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.3\r\nPSEdition                      Core\r\nGitCommitId                    7.0.3\r\nOS                             Microsoft Windows 10.0.20190\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It looks like overhead to have many pools because resources are related to a computer.",
      "created_at": "2020-08-31T15:07:30Z",
      "updated_at": "2020-08-31T15:07:30Z"
    },
    {
      "author": "agowa338",
      "author_association": "NONE",
      "body": "I just provided multiple possibilities for an implementation. My personal favourite is the 3rd one:\r\n\r\n> A third possible fix would be to store the ThreadLimit with the ThreadJob id and compare the amount of currently running threads against the limit of the next one in the list (basically if 4 tasks already run and task 5 should be started, it simply could be checked what the ThreadLimit of task 5 is and if lesser Threads are currently running).",
      "created_at": "2020-08-31T15:52:14Z",
      "updated_at": "2020-08-31T15:53:13Z"
    }
  ],
  "created_at": "2020-08-30T23:49:51Z",
  "number": 13549,
  "state": "open",
  "title": "Bug Start-ThreadJob not pooling and hidden global constant",
  "updated_at": "2020-08-31T15:53:13Z"
}