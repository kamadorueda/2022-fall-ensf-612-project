{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8869",
  "author": "GlitterHorn",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n\r\n  1. type something at the command prompt.\r\n  2. Try to use Home or End to navigate the text.\r\n  3. Try to use Ctrl+Arrow to navigate the text.\r\n  4. Repeat 1-3 with text editor, e.g. nano.\r\n  5. Observe.\r\n\r\n# Expected behavior\r\n\r\nHome, End, and Ctrl+Arrow should behave as in bash - go to beginning of text, end of text, and skip words left and right.\r\n\r\n# Actual behavior\r\n\r\n  * Home prints ~\r\n  * End prints ~\r\n  * Ctrl+Arrow does nothing\r\n\r\n# Environment data\r\n\r\nI used yaourt on Arch to install.\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.0-preview.2\r\nPSEdition                      Core\r\nGitCommitId                    6.2.0-preview.2\r\nOS                             Linux 4.20.0-arch1-1-ARCH #1 SMP PREEMPT Mon Dec 24 03:00:40 UTC 2018\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
  "closed_at": "2020-01-16T19:14:06Z",
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "This is most likely not a PowerShell problem.\r\n\r\nTry `[Console]::ReadKey()` then type <kbd>Home</kbd>. Output should look like:\r\n\r\n```\r\nKeyChar  Key Modifiers\r\n-------  --- ---------\r\n        Home         0\r\n```\r\n\r\nI'm guessing it won't, in which case the problem could be with:\r\n\r\n* The setting for `$env:TERM`\r\n* .Net Core\r\n* The terminfo database\r\n",
      "created_at": "2019-02-13T00:28:25Z",
      "updated_at": "2019-02-13T00:28:25Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr This is what I see on Ubuntu 18.04 (when I ssh in from Windows PS 7 and then start pwsh):\r\n```\r\n09-01 21:23:44 3> [Console]::ReadKey()\r\n\r\nKeyChar    Key Modifiers\r\n-------    --- ---------\r\n       Escape         0\r\n```\r\nThis is a real bummer as it makes moving around a command line painful.  Here's the term info:\r\n```\r\n09-01 21:29:01 4> dir env:term*\r\n\r\nName                           Value\r\n----                           -----\r\nTERM                           xterm-256color\r\n```",
      "created_at": "2019-09-02T03:32:48Z",
      "updated_at": "2019-09-02T03:32:48Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I'm pretty sure this is a PowerShell problem and probably not a PSReadLine problem.  FWIW, I only see this when I SSH into our RedHat or Ubuntu build machines.  I don't see this issue in Bash but I do see it when I then start up pwsh.  I also see it when I start pwsh with `pwsh -noprofile -noni` which, I think, doesn't load PSReadLine.  I see this when using both conhost and WindowsTerminal.  And it is somewhat maddening TBH.  \r\n\r\n![PwshHomeEndBug](https://user-images.githubusercontent.com/5177512/64563358-650e1200-d30c-11e9-883c-5763c8c1fbc8.gif)\r\n\r\nThis shows the issue on 6.2.2 but I just tried PS7-preview.3 and it behaves the exact same way.",
      "created_at": "2019-09-09T20:16:57Z",
      "updated_at": "2019-09-09T20:16:57Z"
    },
    {
      "author": "npodbielski",
      "author_association": "NONE",
      "body": "Is there any chance to fix this. I would even try to do it myself since bash is maddeningly hard to do even easiest thing but I cannot swap pwsh because it lacks that little things like arrow keys support :)",
      "created_at": "2019-09-14T08:49:45Z",
      "updated_at": "2019-09-14T08:49:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @daxian-dbw @SteveL-MSFT If the problem is in .Net Core we need to get a fix before .Net Core 3.1 LTS.\r\n\r\n@rkeithhill Could you please make the test with simple C# app which only output Console.ReadKey()?",
      "created_at": "2019-09-29T10:17:59Z",
      "updated_at": "2019-09-29T10:17:59Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This seems most likely an issue in .NET Core.  Agree with @iSazonov that a simple C# console app to repro would be ideal.",
      "created_at": "2019-10-03T20:49:48Z",
      "updated_at": "2019-10-03T20:49:48Z"
    },
    {
      "author": "AndrewSav",
      "author_association": "NONE",
      "body": "I'm slightly preplexed by these comments. This is an issue that is stabely reproducible in powershell and it does not seem to be and obvious way to reporoduce it in a C# console app. Also it does not seem that there is any evidence is given that it is not a Powershell issue. \r\n\r\nCould guys please clarify your line of thinking? ",
      "created_at": "2019-10-03T21:06:18Z",
      "updated_at": "2019-10-03T21:07:01Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@AndrewSav when PSReadLine is not involved as shown in @rkeithhill's example, pwsh has a simple [ReadLine](https://github.com/PowerShell/PowerShell/blob/bd6fdae73520931f0d27a29d6290e18761772141/src/Microsoft.PowerShell.ConsoleHost/host/msh/ConsoleHostUserInterface.cs#L1886) that doesn't do any translation of keys.  It is whatever the .NET API returns.",
      "created_at": "2019-10-03T21:20:24Z",
      "updated_at": "2019-10-03T21:20:24Z"
    },
    {
      "author": "AndrewSav",
      "author_association": "NONE",
      "body": "@SteveL-MSFT thank you for this. Will I be too far off if I conjecture, that these services (Home, End, Ctr+Arrow ) are not provided by [ReadLine](https://docs.microsoft.com/en-us/dotnet/api/system.console.readline?view=netcore-3.0) itself, but by something else, for example on windows by console host? ",
      "created_at": "2019-10-03T23:00:36Z",
      "updated_at": "2019-10-03T23:00:36Z"
    },
    {
      "author": "AndrewSav",
      "author_association": "NONE",
      "body": "I tested the issue with pwsh 6.2.3 on Windows and Ubuntu Linux 18.04. I also tested it with a simple ReadLine console program. Here are the results.\r\n\r\n**pwsh 6.2.3**\r\n\r\n|                | Home/End      | Ctrl-Arrows    |\r\n| -------------- | ------------- | ------------- |\r\n| Windows 10     | Works         | Works         |\r\n| Ssh            | Does not work | Does not work |\r\n| gnome-terminal | Works         | Does not work |\r\n| xfce4-terminal | Works         | Does not work |\r\n\r\n**.net core 3.0.100  program with Console.ReadLine**\r\n\r\n|                | Home/End      | Ctrl-Arrows    |\r\n| -------------- | ------------- | ------------- |\r\n| Windows 10     | Works         | Works         |\r\n| Ssh            | Does not work | Does not work |\r\n| gnome-terminal | Does not work | Does not work |\r\n| xfce4-terminal | Does not work | Does not work |\r\n\r\n**Console program text**\r\n\r\n```csharp\r\nusing System;\r\n\r\nnamespace readline\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n\r\n            Console.WriteLine(\"Hello World!\");\r\n            string hello = Console.ReadLine();\r\n            Console.WriteLine(hello);\r\n        }\r\n    }\r\n}\r\n```\r\nIn **bash** it works in any combination.",
      "created_at": "2019-10-04T01:29:55Z",
      "updated_at": "2019-10-04T01:29:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "PowerShell uses ReadConsole P/Invoke on Windows that is power method.\r\nOn Unix it emulates a line editor.\r\nPossible fix for local host could be in https://github.com/PowerShell/PowerShell/blob/70a74fbfc891b3b9e8657d314860622cc97b20b8/src/Microsoft.PowerShell.ConsoleHost/host/msh/ConsoleHostUserInterface.cs#L1517\r\n\r\nPerhaps @PaulHigin  could add more about ssh scenario.\r\n\r\nI already opened API request in CoreFX repo https://github.com/dotnet/corefx/issues/36175 long ago.",
      "created_at": "2019-10-04T04:25:44Z",
      "updated_at": "2019-10-04T04:29:05Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I was able to repro this with ssh.exe we ship in Win10.  However, after using just the ssh.exe from https://github.com/PowerShell/Win32-OpenSSH/releases/tag/v8.1.0.0p1-Beta, it works as expected.  So the issue appears to be in our Win32 port of ssh.exe.  Work is happening to update the ssh in Windows, but it'll take time to be released.  For now, you can just replace the ssh.exe from our GitHub release.\n\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/11524380?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/Win32-OpenSSH\">PowerShell/Win32-OpenSSH</a></strong></div><div>Win32 port of OpenSSH. Contribute to PowerShell/Win32-OpenSSH development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2020-01-16T19:14:06Z",
      "updated_at": "2020-01-16T19:14:09Z"
    },
    {
      "author": "AndrewSav",
      "author_association": "NONE",
      "body": "@SteveL-MSFT did you see my matrix above? When I tested it with ssh on windows I tested with:\r\n\r\n- ssh that comes with windows\r\n- putty\r\n- mobaxterm\r\n- one from www.mls-software.com\r\n\r\nIt was exhibintg the problem on all of them, in addition Ctrl-Arrows did not work even without ssh.\r\n\r\nI'll try and re-test with 7 but while I'm doing this, are you sure, we are not jumping the gun closing it?\r\n\r\nIt does not seem reasonable to request people use one certain flavour of SSH when so many are avialable.\r\n",
      "created_at": "2020-01-16T19:27:36Z",
      "updated_at": "2020-01-16T19:28:37Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@AndrewSav in the cases where your .NET Core 3 app doesn't work, it would have to be an issue in the .NET Runtime repo",
      "created_at": "2020-01-16T21:29:44Z",
      "updated_at": "2020-01-16T21:29:44Z"
    },
    {
      "author": "AndrewSav",
      "author_association": "NONE",
      "body": "@SteveL-MSFT which version of powershell did you test this with?",
      "created_at": "2020-01-16T21:42:03Z",
      "updated_at": "2020-01-16T21:42:03Z"
    },
    {
      "author": "AndrewSav",
      "author_association": "NONE",
      "body": "Okay, after some testing it does not seem to be fixed.\r\n\r\n**PowerShell 7.0.0-rc.1 running on ubuntu 18.04**\r\n\r\n|                | Home/End      | Ctrl-Arrows    |\r\n| -------------- | ------------- | ------------- |\r\n| Win32-OpenSSH OpenSSH_for_Windows_7.7p1, LibreSSL 2.6.5            | Does not work | Does not work |\r\n| Win32-OpenSSH OpenSSH_for_Windows_8.1p1, LibreSSL 2.9.2            | Works  | Does not work |\r\n| Putty  0.73            | Does not work | Does not work |\r\n| MobaXterm 12.4            | Does not work | Does not work |\r\n| git-bash 2.24.1.windows.2            | Works | Does not work |\r\n| www.mls-software.com 8.0p1            | Works  | Does not work |\r\n\r\nThe ctrl-arrows do not seem to work at all via ssh. Home/End work for some clients but not for other.\r\nbash (unlike powershell) works everywhere\r\n\r\nDo you think there is an issue with powershell not suporting these?\r\n",
      "created_at": "2020-01-16T22:27:03Z",
      "updated_at": "2020-01-16T22:27:03Z"
    },
    {
      "author": "AndrewSav",
      "author_association": "NONE",
      "body": "> @AndrewSav in the cases where your .NET Core 3 app doesn't work, it would have to be an issue in the .NET Runtime repo\r\n\r\nHow come that this would be an issue with .net runtime for some cases but would not be for others?\r\n\r\nE.g. console app readline does NOT work for home/end over, say, with `Win32-OpenSSH OpenSSH_for_Windows_8.1p1, LibreSSL 2.9.2` but powershell does. so how come that issues with .net runtime do not affect this case but affect others?",
      "created_at": "2020-01-16T22:34:40Z",
      "updated_at": "2020-01-16T22:35:14Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "PowerShell (specifically PSReadLine) uses [console]::ReadKey().  That may differ from the ReadLine() api that you have as your test app.  Try this instead:\r\n\r\n```csharp\r\nusing System;\r\n\r\nnamespace readline\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"ReadKey:\");\r\n            var key = Console.ReadKey();\r\n            Console.WriteLine(key.Key.ToString());\r\n        }\r\n    }\r\n}\r\n```\r\n",
      "created_at": "2020-01-17T00:00:51Z",
      "updated_at": "2020-01-17T00:00:51Z"
    },
    {
      "author": "AndrewSav",
      "author_association": "NONE",
      "body": "Thank you, but wether they are different or not, most of I said is still valid and the questions still stand...",
      "created_at": "2020-01-17T00:19:22Z",
      "updated_at": "2020-01-17T00:19:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think we should reopen.\r\n\r\n@AndrewSav Could you please share test matrix for (1) Windows and Linux, (2) Home/End, (3)Right and Left Arrows (Ctrl-B/Ctrl-F), (4) Different terms/apps, (5) for both [Console]::ReadKey() and [Console]::ReadLine() ?",
      "created_at": "2020-01-17T03:58:04Z",
      "updated_at": "2020-01-17T03:58:04Z"
    },
    {
      "author": "AndrewSav",
      "author_association": "NONE",
      "body": "@iSazonov I'm not sure how to present 5 dimentional matrix in text, I'm happy for suggestions. I think for ReadLine you already have coverage above, I don't see what's missing. For the ReadKey, results are indeed interesting.\r\n\r\n```csharp\r\nusing System;\r\n\r\nnamespace readline\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n            while (true)\r\n            {\r\n                ConsoleKeyInfo k = Console.ReadKey();\r\n                Console.WriteLine($\"Key:{k.Key}, Modifiers: {k.Modifiers}\");\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nHere are the obesrvations:\r\n\r\nhttps://docs.google.com/spreadsheets/d/1a5wzdwwOmjsEZxedX3xb6bKhaI7sR5g0Or8iiGxCo34/edit?usp=sharing\r\n\r\nThis is from Windows Client (as per first column of the table) to Ubuntu 18.04 server.\r\n`dotnet --version` is 3.0.102\r\n",
      "created_at": "2020-01-17T06:18:44Z",
      "updated_at": "2020-01-17T06:24:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@AndrewSav  Thanks for sharing your tests!\r\n\r\nI see ReadKey() returns wrong sequences. \r\nI guess it is .Net Core _feature_. .Net Core internally load term database and probably uses it in ReadKey() for input transformations. You could try to find that term is detected and used in every case and either add new line in term database or modify exist one.\r\n\r\nPerhaps it is here https://github.com/dotnet/runtime/blob/4f9ae42d861fcb4be2fcd5d3d55d5f227d30e723/src/libraries/System.Console/src/System/ConsolePal.Unix.cs#L891\r\n",
      "created_at": "2020-01-17T07:19:16Z",
      "updated_at": "2020-01-17T07:33:48Z"
    },
    {
      "author": "AndrewSav",
      "author_association": "NONE",
      "body": "@iSazonov ctrl-arrows do not work regardless ;(",
      "created_at": "2020-01-17T08:03:27Z",
      "updated_at": "2020-01-17T08:03:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You could debug the code \r\nhttps://github.com/PowerShell/PowerShell/blob/70a74fbfc891b3b9e8657d314860622cc97b20b8/src/Microsoft.PowerShell.ConsoleHost/host/msh/ConsoleHostUserInterface.cs#L1718-L1739\r\n",
      "created_at": "2020-01-17T08:41:35Z",
      "updated_at": "2020-01-17T08:41:35Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@AndrewSav your results are showing that the dotnet app isn't reading some key combinations correct, right?  Seems we should be discussing this in the dotnet/runtime repo unless I'm misunderstanding something.",
      "created_at": "2020-01-17T15:29:42Z",
      "updated_at": "2020-01-17T15:29:42Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT I guess .Net Core can not find these terminals in term database and can not do right translation.",
      "created_at": "2020-01-17T15:36:39Z",
      "updated_at": "2020-01-17T15:36:39Z"
    },
    {
      "author": "AndrewSav",
      "author_association": "NONE",
      "body": "@SteveL-MSFT Ctrl-Arrows do not work in powershell via SSH, it does not look like there is problems with Ctrl-Arrows in .net core. Could you please test independently and share your results?\r\n\r\nAlso: if powershell aims to be a comfortable replacement for bash on linux I feel that powershell needs to address the Home/End problem regardless of what .net core does. Find a way to make it work. Many people including me, voiced that they wish they could switch to powershell from bash if not for this problem.",
      "created_at": "2020-01-17T19:13:34Z",
      "updated_at": "2020-01-17T19:19:06Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": " @AndrewSav I did a test on Ubuntu 18.04 ssh to itself.  Was able to use Ctrl+LeftArrow within PS7 (I tested it by binding that chord to MenuComplete function in PSReadLine).",
      "created_at": "2020-01-17T22:11:40Z",
      "updated_at": "2020-01-17T22:11:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@AndrewSav Since you have repo on C# please open consulting issue in .Net Core runtime repository and share link here.",
      "created_at": "2020-01-18T04:56:22Z",
      "updated_at": "2020-01-18T04:56:22Z"
    },
    {
      "author": "artisticcheese",
      "author_association": "NONE",
      "body": "Why this issue is closed when it's obviously still an open problem.",
      "created_at": "2020-03-15T17:12:37Z",
      "updated_at": "2020-03-15T17:12:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@artisticcheese See https://github.com/PowerShell/PowerShell/issues/8869#issuecomment-575481777 above - it shows that it is .Net Core issue.",
      "created_at": "2020-03-15T18:29:33Z",
      "updated_at": "2020-03-15T18:29:33Z"
    },
    {
      "author": "artisticcheese",
      "author_association": "NONE",
      "body": "Is there an open issue with .NET core we can follow for resolution? I did not find it mentioned. ",
      "created_at": "2020-03-15T19:34:15Z",
      "updated_at": "2020-03-15T19:34:15Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "**OpenSSH 8.1.0.0p1-Beta ssh run from a PS 7 GA console  (not Windows Terminal) to Ubuntu 18.04 Bash** - All key combos of Home/End, Arrows and Ctrl+Arrows works.  As soon as I start `pwsh` (v7 GA) on Ubuntu, Home/End continues to work as do arrows but Ctrl+Arrows do not work.  Also, and very infuriatingly, `Esc` does not work so clearing the input line requires pressing `End` and then `Ctrl+u`.\r\n\r\nAnd this experience is even worse and frankly a bit embarrassing: \r\n**OpenSSH 8.1.0.0p1-Beta ssh run from a PS 7 GA console (not Windows Terminal) to Windows 10 running PS 7 GA and OpenSSH 8.1.0.0p1-Beta** - Ctrl+Arrows and Esc work but Arrows do NOT and neither does Home/End.  Arrow keys that don't work makes the Windows to Windows SSH line editing and history recall experience awful - almost unusable.\r\n\r\n**Update:** this last scenario works WAY better with `Windows Terminal` - as in everything seems to work.  Maybe there should be documentation on the **many** issues doing SSH (Windows to Windows) with the PowerShell console?  RE the first scenario, the results are the same with Windows Terminal.  Ctrl+Arrows don't work and neither does the Esc key.",
      "created_at": "2020-03-15T19:55:28Z",
      "updated_at": "2020-03-15T21:27:45Z"
    },
    {
      "author": "artisticcheese",
      "author_association": "NONE",
      "body": "My attempt to replace bash with PSCore as default shell in Ubuntu come to screeching halt due to this bug, now not only I'm back to bash as default shell but don't use any powershell at all. For some it's minor issue and for some it's a dealbreaker.",
      "created_at": "2020-03-15T19:57:48Z",
      "updated_at": "2020-03-15T19:58:04Z"
    },
    {
      "author": "npodbielski",
      "author_association": "NONE",
      "body": "Watching this issue for like a half a year and its funny and sad at the same time. I was watching in disbelief when maintainers were asking this one reporter to jump through hoops preparing matrices and the likes with keys behaviour  when this is so easy to reproduce. And they blamed external library and marked closed.\r\nThere is a name for that kind of behaviour in my language. It is kinda hard to translate but the closest would be: pushologic adapdet - meaning when someone pushes problem away from himself most likely pointing someone  else responsible. Very popular in government agencies and among bureaucrats. Culture changes, language changes, country and timezone but basics of human behaviours does not. **not my problem** summarizes this issue resolution.",
      "created_at": "2020-03-15T20:36:19Z",
      "updated_at": "2020-03-15T20:36:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@artisticcheese @npodbielski Do you ready to work on the issue? If yes, current conclusion is that the issue is not in PowerShell code but perhaps in .Net Core code. So please open new issue in .Net Core Runtime repo and work with .Net Core team. If no, please don't speculate - this do not add value in the discussion.",
      "created_at": "2020-03-16T04:06:40Z",
      "updated_at": "2020-03-16T04:06:40Z"
    },
    {
      "author": "npodbielski",
      "author_association": "NONE",
      "body": "I certainly could. Probably it would be fun to work on such a big OS project given I would get few pointers, how to start and etc. But I want to picture you my perspective first. \r\n\r\nI did not spend much time using PS and most of it is on Ubuntu lately, but still I observed few strange behaviors:\r\n \r\n1. PS sometimes shows garbage instead of usual welcome string (current dir and '>'). I think it is connected to not clearing screen correctly after terminating some long running job. You can still work as usual, it do not brake anything, but it does looks strange.\r\n2. Searching through history and reusing some command by clearing some of it often causes strange changes in colors of already printed characters - most notably removing some command entirely can cause to '>' char at the end of welcome string to i.e. became red. It also do not brake shell but also looks strange.\r\n3. Pasting larger chunks of text looks funny because it pastes char by char instead of all of it at once so you paste it and wait till PS will be done with it thinking how and why it is implemented like this. \r\n4. Keys issue, that you are surely already familiar with.\r\n\r\nSo PS is a shell and what shell does is basically printing text on screen and reading keyboard. And from my own experience PS is shitty with both for now. Having that in mind why would I invest my own spare time in this project? It is bad with it is most basic functionality. \r\n\r\nWould you i.e. bought a car that does not start like a 10% percent of the time? Or does not turn right? If this would be some other linux shell I would probably, just uninstall it and forgot about it right away. But it is from Microsoft so you do expect something more right? Certainly it is not some OS project maintained by 1 guy in a basement? Such big company have money and resources to do it better, right? Well for now it do not looks like it. \r\n\r\nYou say that this discussion is counterproductive. For me it is not counterproductive but it was escalated to the topic how maintainers threats users and other people that want or might be able to help. Should not maintainers want project to succeed? I think they should. Does closing such obvious issue drives you toward such a goal? I do not think so. Then why you did it? Why I should fix it if looks like you (well not you specifically but all people involved in this project) does not care really?\r\n\r\nIn commercial projects I worked on, usually this works like this:\r\nUser or business reports an issue.\r\n\r\n1. User or business reports an issue.\r\n2. You check this out and it turns out that it is caused by some external library. \r\n3. You look for help on their support page, bug reporting software etc for possible solutions workaround.\r\n4. You inform your users that problem was escalated and you are waiting for third party.\r\n\r\nDoing otherwise would looks like I am hard to work with and ultimately could cause me being fired if it would occur often or issue would be really major for the users and I would refuse to help them.\r\n\r\nSometimes when I am looking for some tool and it is open source I skim through source code and issues to see if it is maintained and how open, helpful and active is community. IMHO PS is maintained actively but it is not open nor helpful. \r\n**This do not inspire confidence.** \r\n\r\nIn readme it states:\r\n\r\n> Welcome to the PowerShell GitHub Community! PowerShell Core is a cross-platform (Windows, Linux, and macOS). \r\n\r\nFor now it do not looks like it is cross-platform. If you are asking me for contribution I am asking what is real priority of this project. It do not looks like Linux support is most important. There was recently 7.0 release. Seventh version of PS and it still can't handle basic navigation keys. \r\n\r\nI would certainly switch to PS as my default shell on Ubuntu since IMHO bash is bad for scripting, but PS is painful to use, so I am sticking to bash as shell and PS for some more advanced scripting (so I do not have to use it directly). \r\n\r\nHaving that in mind why would I contribute? After all from this issue users are left with impression 'if you have an issue with our project, well... you are alone with that. Good luck fixing it yourself'. \r\n\r\nDo this post is counterproductive? I may certainly look like this for you, but in my opinion this is me contributing. \r\n\r\n**Please change your approach to users, change way how you support this project. \r\nPlease re prioritize.\r\nPlease be more helpful and supportive.**\r\n\r\nThen maybe people like me will be more likely to contribute to the project.\r\nFor now reason says: **do not.**",
      "created_at": "2020-03-16T07:46:14Z",
      "updated_at": "2020-03-16T07:46:14Z"
    },
    {
      "author": "artisticcheese",
      "author_association": "NONE",
      "body": "I would create an issue if I understood fully what I need to write and where. I just lack that understanding. So choice for me was either spend unknown amount of time trying to figure out where to write and what to do to create issue or just don't use PS as daily driver. I just chose latter since it's easier since I have no pressing need to have PS as default shell (thought I would like it like I have it on Windows).",
      "created_at": "2020-03-16T13:10:14Z",
      "updated_at": "2020-03-16T13:10:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@artisticcheese Never mind. Please continue monitor the issue, try workarounds and share your experience from your scenarios.\r\n\r\n@rkeithhill  I found some docs for Windows-OpenSSH https://github.com/PowerShell/Win32-OpenSSH/wiki/TTY-PTY-support-in-Windows-OpenSSH\r\nCould you please look the document and try the recommendations?\r\n\n\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/11524380?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/Win32-OpenSSH\">PowerShell/Win32-OpenSSH</a></strong></div><div>Win32 port of OpenSSH. Contribute to PowerShell/Win32-OpenSSH development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2020-03-16T14:13:35Z",
      "updated_at": "2020-03-16T14:13:38Z"
    },
    {
      "author": "AndrewSav",
      "author_association": "NONE",
      "body": "> @artisticcheese See [#8869 (comment)](https://github.com/PowerShell/PowerShell/issues/8869#issuecomment-575481777) above - it shows that it is .Net Core issue.\r\n\r\nI still beleive that Ctrl-Arrows is not a .Net Core issue, since I cannot reporoduce it with .Net Core. Yet, it's easily reproducible with powershell.",
      "created_at": "2020-03-16T22:45:25Z",
      "updated_at": "2020-03-16T22:45:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@AndrewSav Can you add more info about Ctrl-Arrows? Do you test with and without PSReadline? Did you try `[Console]::ReadKey()` and command line?",
      "created_at": "2020-03-17T05:27:46Z",
      "updated_at": "2020-03-17T05:27:46Z"
    },
    {
      "author": "AndrewSav",
      "author_association": "NONE",
      "body": "@iSazonov `[Console]::ReadKey()` returns Control LeftArrow and Control RightArrow as expected, but Ctrl-Arrows do nothing on the command line.\r\n\r\nI'm not sure about PSReadline, how do you test with or without it? I installed powershell following instructions [here](https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-core-on-linux?view=powershell-7) and tested with it.",
      "created_at": "2020-03-18T04:19:24Z",
      "updated_at": "2020-03-18T04:19:24Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Load pwsh like so `pwsh -noprofile -noninteractive` to test without PSRL.",
      "created_at": "2020-03-18T04:24:03Z",
      "updated_at": "2020-03-18T04:24:03Z"
    },
    {
      "author": "AndrewSav",
      "author_association": "NONE",
      "body": "It does not work either way, but differently. When runnning `pwsh` Ctrl-Arrows do nothing (do not move cursor), when running `pwsh -noprofile -noninteractive` they seem to act as Arrow keys without Ctrl.",
      "created_at": "2020-03-18T04:41:29Z",
      "updated_at": "2020-03-18T04:41:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Ctrl-UpArrow/DownArrow does not implemented in PowerShell on Unix. You could assign a handler for these keys in PSReadline.\r\nhttps://github.com/PowerShell/PowerShell/blob/70a74fbfc891b3b9e8657d314860622cc97b20b8/src/Microsoft.PowerShell.ConsoleHost/host/msh/ConsoleHostUserInterface.cs#L1742-L1749\r\n",
      "created_at": "2020-03-18T07:44:49Z",
      "updated_at": "2020-03-18T07:44:49Z"
    },
    {
      "author": "artisticcheese",
      "author_association": "NONE",
      "body": "Slightly offtopic.\r\nWhat is Crtl-Up/Down arrow is supposed to do in Powershell? ",
      "created_at": "2020-03-18T13:16:58Z",
      "updated_at": "2020-03-18T13:16:58Z"
    },
    {
      "author": "AndrewSav",
      "author_association": "NONE",
      "body": ">Ctrl-UpArrow/DownArrow does not implemented in PowerShell on Unix\r\n\r\nYep, this is what this issue is about. Why is this closed?",
      "created_at": "2020-03-18T17:58:02Z",
      "updated_at": "2020-03-18T17:58:02Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "https://github.com/dotnet/runtime/issues/802 tracks issues with `Console.ReadKey` on Linux.",
      "created_at": "2020-03-18T22:53:09Z",
      "updated_at": "2020-03-18T22:53:09Z"
    },
    {
      "author": "AndrewSav",
      "author_association": "NONE",
      "body": "It does not appear that this one is relevant. Firstly in never mentions ctrl-arrow keys, and secondly they seem to be reported as expected by `Console.ReadKey` on Linux.",
      "created_at": "2020-03-19T00:20:05Z",
      "updated_at": "2020-03-19T00:34:56Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@AndrewSav - got it - you should open an issue in https://github.com/PowerShell/PSReadLine for the lack of <kbd>Ctrl+LeftArrow</kbd> and <kbd>Ctrl+RightArrow</kbd> support in Emacs mode.  Better yet, you could submit a PR - it's a trivial fix.\n\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/11524380?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PSReadLine\">PowerShell/PSReadLine</a></strong></div><div>A bash inspired readline implementation for PowerShell - PowerShell/PSReadLine</div></blockquote>",
      "created_at": "2020-03-19T00:54:44Z",
      "updated_at": "2020-03-19T00:54:46Z"
    },
    {
      "author": "AgSync-Aaron",
      "author_association": "NONE",
      "body": "Bare with me, this has a point.\r\n\r\nI use windows 10 as my daily driver and have used windows as my desktop OS of choice since windows 95. I am a Microsoft fanboy through and through. I've been a developer using Microsoft technologies since the late 90s but have avoided Powershell because it's way too verbose for my liking. A coworker of mine turned me on to it again recently an I have fell in love with the power of the object oriented-ness (is that a word?). I am now a new fan of PowerShell and once you have a hammer everything looks like a nail, am-I-right? I knew Powershell has been cross-platform for a while now so I thought I'd try it out on some of our linux machines to automate some backup processes and it seemed to be working swell. \r\n\r\nHot damn! I thought to myself this is great, one shell many OSes. Let's checkout the command line shell on Linux and maybe I can go with PS 100%. My glee turned to horror as I discovered that almost nothing works the same from the command-line as what it does in windows. An example is that auto-completion is very buggy with character casing and it doesn't cycle though the entries like it does on windows. PS continues to show all 148 (or whatever) entries as a giant block of text just like bash. \"YUCK!\" I say to myself upon this discovery, but it's easy to live with. Okay let's try something else. \r\n\r\n```\r\nit@server:~$ sudo pwsh\r\nPowerShell 7.1.0\r\nCopyright (c) Microsoft Corporation.\r\n\r\nhttps://aka.ms/powershell\r\nType 'help' to get help.\r\n\r\nPS /home/it>\r\n```\r\nUm... what user am I again? The default prompt doesn't include the username on linux where the user means everything. This is a windows-ism that _shouldn't_ have been the default in linux. But I think that is changeable, let's move on. As I was exploring I discovered many of the keyboard shortcuts that I use in bash on linux and in powershell on windows **DO NOT** work for powershell in linux. This is a show stopper for me and it completely decimates my productivity. This has to be a config issue on my machine right?\r\n\r\nWrong.\r\n\r\nWhen I discover a trail of issues going back about 2.5 years (at this point) that were closed for technicalities or because of the \"it's not my problem\" syndrome, _I was crushed_. How could a company that says it's product is cross-platform let something like this slip for over 2 years?  The responses from the Microsoft team members among this trail of issues has left me dejected.\r\n\r\nIt's issues like this one that really show me how (un)dedicated Microsoft is to cross platform technologies. This ongoing behavior I see from the Powershell team has really made me question whether a future issue that affects my powershell scripts on linux may go unfixed for over 2 years. I cannot justify this with my management. It's my decision to make, but if it breaks, it's my problem to fix and I cannot trust you Microsoft.\r\n\r\n\r\n",
      "created_at": "2020-12-08T03:52:51Z",
      "updated_at": "2020-12-08T03:52:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@AgSync-Aaron You could learn how to customize PowerShell prompt and PSReadline - I guess you have no idea what the _latest_ version of PSReadline can do.\r\n",
      "created_at": "2020-12-08T04:11:36Z",
      "updated_at": "2020-12-08T04:11:36Z"
    },
    {
      "author": "AgSync-Aaron",
      "author_association": "NONE",
      "body": "You completely missed my point. Typical. Thank you for your snarky elitist comment.\r\n\r\nI was telling a story of my journey of how PS command line for linux isn't perfect and I'm willing to overlook almost all of those issues. But as a product that claims to be cross-platform, it misses the boat on basic core usability.  This is a show-stopper for me and clearly many other people who have commented on these series of issues that keep getting closed.\r\n\r\nI love MS products and have made a career out of using them. I have invested a lot of my time the past couple months in learning powershell for nothing. This issue is STILL an issue 2.5 years later. The point is that I cannot trust Microsoft to be good stewards of cross-platform technology when they let something this basic go unfixed for so long.\r\n\r\nIf you'd like to have a serious conversation about Microsoft's choices here I'm game, but leave the condescending comments at the door.",
      "created_at": "2020-12-08T04:13:07Z",
      "updated_at": "2020-12-08T04:28:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Thank you for your snarky elitist comment.\r\n\r\nSorry, I didn't try to offend you. My efforts here are to make PowerShell better.\r\nI just pointed out to you that you can easily customize the prompt and you will be pleasantly surprised by the capabilities of the new PSReadline 2.1. If you haven't tried it yet, I highly recommend it (see experimental features too and feedback).\r\n\r\n> This issue is STILL an issue 2.5 years later.\r\n\r\nPowerShell capabilities are based on .Net capabilities. There are fundamental contradictions in how different OSes work. It is not easy to get over it. Net team is actively planning next 6.0 milestone and you can discuss this and vote in .Net Runtime repository so as to help them prioritize.\r\n\r\n\r\n",
      "created_at": "2020-12-08T05:01:38Z",
      "updated_at": "2020-12-08T05:01:38Z"
    },
    {
      "author": "AgSync-Aaron",
      "author_association": "NONE",
      "body": "I accept your apology, thanks. \r\n\r\nI had always figured there was a way to customize the prompt, I wasn't concerned about that. That was one of those imperfections that all software has and that I _wasn't_ concerned about it. It was just a data point in my journey of Powershell discovery that I was trying to share. I was trying to share my experience and how excited I was about the prospect of having one shell and one scripting language across OSes. And how that excitement turned to disappointment over missing basic functionality.  As as customer, _frankly_, I don't care who's team is responsible. Microsoft is my software vendor and my company pays them a _lot_ of money. \r\n\r\nIf a member of our support team told our customer \"sorry, that's not my problem\" and hung up on them. We would probably lose that customer. I am trying to let Microsoft know that is how I was made to feel here by reading these issues and seeing them dismissed out of hand.\r\n\r\nI am trying to standardize the languages that my company uses to manage our infrastructure. Microsoft says their \"command-line shell\" product is \"cross-platform\" but fails to pass some minimum requirements due to a bug. In all due respect, I cannot recommend ANY product, no matter the vendor, if what we consider basic functionality to be non-existent or buggy. I truly have honest concerns about using cross-platform powershell. This issue is over 2 years old and has been passed off to another team at Microsoft and that [issue](https://github.com/dotnet/runtime/issues/802) that is over FOUR years old!  If I run into a bug in my critical infrastructure that is deemed to be \"some other team's\" fault. Am I going to have to wait two years for a fix?\r\n\r\n",
      "created_at": "2020-12-08T05:56:29Z",
      "updated_at": "2020-12-08T05:56:29Z"
    },
    {
      "author": "AndrewSav",
      "author_association": "NONE",
      "body": "> I was trying to share my experience and how excited I was about the prospect of having one shell and one scripting language across OSes. And how that excitement turned to disappointment over missing basic functionality. As as customer, frankly, I don't care who's team is responsible. \r\n\r\nYes, this has been an uphill battle with a lot of finger pointing, and the end result that interactive experience on Linux via SSH from Windows is in a shape, where it cannot be used as the default command prompt. This is very disappointing and frustrating. \"It's PSReadline!\", \"No, it's PowerShell!\", \"No it's .NET!\".\r\n\r\nTo be completely honest I'm still _not convinced_ that it's .net because as far as I can see the .net bit works as long as it's not called from PowerShell. Yet the issue was closed. I supplied a lot of tests above but all I got in response is asking for _more tests_ and no evidence that someone tested it and it worked differently, no steps to reproduce _that_ were ever published.\r\n\r\nIn the end we have nothing else to do but to accept, that this is how PowerShell management chose to engage with the community. This is not satisfactory, but it is what it is.",
      "created_at": "2020-12-08T06:37:30Z",
      "updated_at": "2020-12-08T06:37:30Z"
    },
    {
      "author": "pencoe",
      "author_association": "NONE",
      "body": "After some investigations i found that Powershell (.NET) uses ncurses, so i got Home and End working by editing Terminfo for the used $TERM (xterm for me) by\r\n - infocmp $TERM > terminfo.src\r\n - vi terminfo.src: look for the values of khome and kend. In my case they were \\EOH and \\EOF and had to be \\E[H for khome and \\E[F for kend. Be careful to search for this, there must be no second kxxxx entry with this code!\r\n - tic terminfo.src\r\n\r\nAfter relogin Home and End did work in pwsh as expected.\r\n\r\nI did not look for Ctrl-Arrow, but maybe this can be fixed in a similar way... next one please ;-)\r\n\r\nPeter",
      "created_at": "2021-05-20T14:03:53Z",
      "updated_at": "2021-05-20T14:03:53Z"
    },
    {
      "author": "steven-willard",
      "author_association": "NONE",
      "body": "This seems to be an issue still, I am unable to get ctrl+rightArrow or ctrl+LeftArrow to work in tokenizing the advance of the cursor location.\r\n\r\nHere is a quick pwsh function you can dump in your console to confirm the readkey value.\r\n```\r\nfunction Test-KeyInputOnLinux {\r\n  $key = \"\"\r\n  while ($key.Key -ne \"Enter\") {\r\n    $key = [System.Console]::ReadKey()\r\n    $key\r\n  }\r\n}\r\n```\r\nLeftArrow and RightArrow returned just fine. (Along with the Control Modifier)\r\n\r\nHere is my version info, are we sure this is closed, or did I miss something?\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Linux 4.4.0-19041-Microsoft #488-Microsoft Mon Sep 01 13:43:00 PST 20\u2026\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0",
      "created_at": "2021-06-23T22:04:17Z",
      "updated_at": "2021-06-23T23:02:59Z"
    },
    {
      "author": "AndrewSav",
      "author_association": "NONE",
      "body": "@steven-willard yep, it's still broken. If you read the issue history, it seems pretty impossible to get stuff fixed here, and this is not just this issue, it's general attitude towards the community, e.g read [this](https://github.com/PowerShell/PowerShell/pull/10238#issuecomment-826091414) or [this](https://github.com/PowerShell/PowerShell/issues/15143#issuecomment-866317075). I personally abandoned any hope of this being fixed and moved on.",
      "created_at": "2021-06-25T01:39:25Z",
      "updated_at": "2021-06-25T01:39:25Z"
    },
    {
      "author": "npodbielski",
      "author_association": "NONE",
      "body": "@AndrewSav @steven-willard \r\nYep. I've been watching this thread for 2 years, lately mainly for fun and kicks. There should be banner:\r\n\r\n> abandon hope all ye who enter here\r\n\r\nPS on Linux is just broken and looks line maintainers want it to work this way. It would be nice to have the same CLI for both OSes but it looks line it won't be PS.\r\nI think it would be easier to use bash via CygWin or something similar than PS on Linux. \r\nThey should be just honest and kill it instead of lie to people that is 'cross-platform'.\r\n",
      "created_at": "2021-06-25T07:12:49Z",
      "updated_at": "2021-06-25T07:12:49Z"
    },
    {
      "author": "pencoe",
      "author_association": "NONE",
      "body": "@AndrewSav @steven-willard @npodbielski \r\n> Yep. I've been watching this thread for 2 years, lately mainly for fun and kicks. There should be banner:\r\n> \r\n> > abandon hope all ye who enter here\r\n\r\nYes, it's a pity... In this case (as far as i can tell) Powershell team and .NET team are playing \"pass the buck\" on each other.\r\n\r\n> PS on Linux is just broken and looks line maintainers want it to work this way. It would be nice to have the same CLI for both OSes but it looks line it won't be PS.\r\n\r\nWhich is very sad, because PS is more powerful than bash in many ways.\r\n\r\n> I think it would be easier to use bash via CygWin or something similar than PS on Linux.\r\n\r\nNo need to use CygWin since WSL and WSL2. In fact i found myself using bash on Windows more and more, because using PS on Linux isn't that easy as promised...\r\n\r\nPeter\r\n\r\n",
      "created_at": "2021-06-25T07:23:19Z",
      "updated_at": "2021-06-25T07:23:19Z"
    },
    {
      "author": "yodasad",
      "author_association": "NONE",
      "body": "There are too many comments in this thread... I cannot figure it out, why was the issue closed?\r\nHome, Ctrl + Arrow are still not working in pwsh on linux.",
      "created_at": "2022-01-24T07:09:28Z",
      "updated_at": "2022-01-24T07:09:28Z"
    },
    {
      "author": "yodasad",
      "author_association": "NONE",
      "body": "I've found a workaround: for Home and End you can use Ctrl+A and Ctrl+E respectively.",
      "created_at": "2022-01-24T08:07:59Z",
      "updated_at": "2022-01-24T08:07:59Z"
    },
    {
      "author": "artisticcheese",
      "author_association": "NONE",
      "body": "https://twitter.com/artisticcheese/status/1485698470791028741 leave comments under tweet to tell Microsoft that we still care.\r\n\r\n<blockquote><img src=\"https://pbs.twimg.com/card_img/1485698342671818754/x9sg3ybs?format=jpg&name=600x314\" width=\"48\" align=\"right\"><div>Twitter</div><div><strong><a href=\"https://twitter.com/artisticcheese/status/1485698470791028741\">Gregory Suvalian on Twitter</a></strong></div><div>\u201c@PowerShell_Team How come issue with broken Home, End keys not working on Linux is closed? (https://t.co/suSQ9qGTDw). Issue is still there and seems to be lying with Microsoft to fix and result of finger-pointing within MS who will do it\u201d</div></blockquote>",
      "created_at": "2022-01-24T19:39:09Z",
      "updated_at": "2022-01-24T19:43:04Z"
    },
    {
      "author": "hepptho",
      "author_association": "NONE",
      "body": "On Ubuntu, with PowerShell 7.2, I got the expected behavior by adding the following to my profile.ps1:\r\n\r\n```powershell\r\nSet-PSReadLineKeyHandler -Chord Ctrl+LeftArrow -Function BackwardWord\r\n\r\nSet-PSReadLineKeyHandler -Chord Ctrl+RightArrow -Function ForwardWord\r\n\r\nSet-PSReadLineKeyHandler -Chord Home -Function BeginningOfLine\r\n\r\nSet-PSReadLineKeyHandler -Chord End -Function EndOfLine\r\n```\r\n\r\nThis requires the PSReadLine module to be installed, but I think it always should be by default. You can use Get-Module to check if you are unsure.\r\n\r\nTo find the profile.ps1 file, you can use the $PROFILE variable or check the docs [here](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-7.2).\r\n\r\nSee also the docs on [Set-PSReadLineKeyHandler](https://docs.microsoft.com/en-us/powershell/module/psreadline/set-psreadlinekeyhandler?view=powershell-7.2) and [PSConsoleReadLine](https://docs.microsoft.com/en-us/dotnet/api/microsoft.powershell.psconsolereadline?view=powershellsdk-1.1.0). The customization options seem extensive; it's pretty neat.\r\n\r\nThat PSReadLine doesn't offer this behavior by default appears to be intentional, see PowerShell/PSReadLine#668.\r\nInstead (as @yodasad noted) there are Ctrl+a and Ctrl+e for beginning / end of line, as well as alt-b and alt-f for backward word / forward word. Those are Emacs conventions, apparently, but that's where I'm out of my depth.",
      "created_at": "2022-02-04T15:03:22Z",
      "updated_at": "2022-02-04T15:03:22Z"
    },
    {
      "author": "artisticcheese",
      "author_association": "NONE",
      "body": "> ```powershell\r\n> Set-PSReadLineKeyHandler -Chord End -Function EndOfLine\r\n> ```\r\nThis did not work for me from command line, I'm on 7.2.1 and Ubuntu 20.04.3 LTS (Focal Fossa) and I just executed those from command line instead of $PROFILE to test\r\n\r\n```powershell\r\nPS /home/cloudadmin> import-module PSReadLine\r\nPS /home/cloudadmin> Set-PSReadLineKeyHandler -Chord Home -Function BeginningOfLine\r\nPS /home/cloudadmin> Set-PSReadLineKeyHandler -Chord End -Function EndOfLine\r\n```\r\n",
      "created_at": "2022-02-04T15:41:01Z",
      "updated_at": "2022-02-04T15:50:51Z"
    },
    {
      "author": "hepptho",
      "author_association": "NONE",
      "body": "Hmm, I'm on 7.2.1 / 20.04 too, and it works directly on command line as well as in profile.ps1.\r\n\r\nAn alternative that works for me as well is:\r\n```powershell\r\nSet-PSReadLineOption -EditMode Windows\r\n```\r\nThe default EditMode on Linux appears to be Emacs, see also [here](https://github.com/PowerShell/PSReadLine/blob/master/PSReadLine/KeyBindings.cs) for a (presumably) comprehensive list of things that _should_ work in different edit modes. It's a nice reference.\r\n\r\nIf that also doesn't work, then the only idea I have left - and that's a wild guess - is that the keys are hijacked by something else. That sometimes happens to me with shortcuts on Linux, but it would be weird with Home and End.\r\nYou could try (if you haven't already) [Console]::ReadKey() followed by Home / End, and see what happens, and if it tells you anything.",
      "created_at": "2022-02-04T16:39:17Z",
      "updated_at": "2022-02-04T16:39:17Z"
    },
    {
      "author": "artisticcheese",
      "author_association": "NONE",
      "body": "Issue was seen only when using Remote Desktop Manager, not present at Windows command line, otherwise solution by @hepptho works as expected\r\n",
      "created_at": "2022-02-04T17:58:40Z",
      "updated_at": "2022-02-04T18:04:01Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "@hepptho RE `Set-PSReadLineOption -EditMode Windows` - thanks for that!!!  I can't believe what a dope I've been. I've been fighting the PSRL key bindings on Linux/macOS for a while now.  But my main machine is Windows.  For some reason, it never occurred to me to check/change the PSRL edit mode.  \ud83e\udd26\u200d\u2642\ufe0f",
      "created_at": "2022-02-05T00:44:55Z",
      "updated_at": "2022-02-05T00:44:55Z"
    },
    {
      "author": "yodasad",
      "author_association": "NONE",
      "body": "> If that also doesn't work, then the only idea I have left - and that's a wild guess - is that the keys are hijacked by something else. That sometimes happens to me with shortcuts on Linux, but it would be weird with Home and End. You could try (if you haven't already) [Console]::ReadKey() followed by Home / End, and see what happens, and if it tells you anything.\r\n\r\nThat was already done at the beginning of this thread on Sep, 2, 2019:\r\nhttps://github.com/PowerShell/PowerShell/issues/8869#issuecomment-526989407\r\n```\r\nPS /home/user> [System.Console]::ReadKey()\r\n\r\nKeyChar    Key Modifiers\r\n-------    --- ---------\r\n       Escape         0\r\n\r\nPS /home/user> H\r\n```\r\nIt seems like pressing the Home button results in Escape following \"H\" and pressing the End button results in Escape following F, so I tried to do this:\r\n\r\n```\r\nSet-PSReadLineKeyHandler -Chord Escape,H -Function BeginningOfLine\r\nSet-PSReadLineKeyHandler -Chord Escape,F -Function EndOfLine\r\n```\r\n\r\nAnd it works, Home and End buttons started to work as expected, but unfortunately after that I cannot type capital \"H\" and \"F\" pressing Shift+H and Shift+F, they started to act as if I press Home and End buttons moving the cursor to the Beginning and the End of line.\r\n",
      "created_at": "2022-02-11T11:09:16Z",
      "updated_at": "2022-02-11T11:09:16Z"
    },
    {
      "author": "DTW-DanWard",
      "author_association": "NONE",
      "body": "None of the above worked for me on Mac (PS 7.2.2) but this did - hope it helps someone else.\r\n\r\nCreate a new Terminal profile (or copy an existing) and add a Keyboard mapping for Home and End:\r\nHome\r\n  Key: Home\r\n  Modifier: None\r\n  Send text: (using Mac keyboard, not external): CTRL+A\r\n  This should produce Send text of \\001\r\nEnd:\r\n  Key: End\r\n  Modifier: None\r\n  Send text: (again on Mac keyboard, assuming no other modifier key changes): CTRL+E\r\n    This should produce Send text of \\005",
      "created_at": "2022-04-01T23:20:27Z",
      "updated_at": "2022-04-01T23:20:27Z"
    },
    {
      "author": "Clifra-Jones",
      "author_association": "NONE",
      "body": "> ```powershell\r\n> Set-PSReadLineOption -EditMode Windows\r\n> ```\r\nOMG! Thank you. This has been driving me nuts for months!\r\n",
      "created_at": "2022-05-13T12:26:14Z",
      "updated_at": "2022-05-13T12:26:14Z"
    }
  ],
  "created_at": "2019-02-12T04:20:16Z",
  "labels": [
    "Issue-Question",
    "WG-Interactive-Console",
    "Resolution-External"
  ],
  "number": 8869,
  "state": "closed",
  "title": "Home, End, Ctr+Arrow don't work (Arch/Linux 4.20)",
  "updated_at": "2022-05-13T12:26:15Z"
}