{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2771",
  "author": "SteveL-MSFT",
  "body": "addresses #2756",
  "closed_at": "2016-11-29T22:53:58Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "running tests under codecoverage is blocked by this, with this change, codecoverage run completed",
      "created_at": "2016-11-23T17:24:39Z",
      "updated_at": "2016-11-23T17:24:39Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Actually, if `RenderHelper` is a hot-spot, **read-write lock** would be better here.\r\n\r\nAlso the comment at the top of the file suggests that class code could be simplified, but it's out of scope of this PR\r\n\r\n```\r\n/// This class uses lots of nearly identical helper functions to recursively traverse the tree. If I weren't so pressed \r\n/// for time, I would see if generic methods could be used to collapse the number of traversers.    \r\n```",
      "created_at": "2016-11-27T04:05:24Z",
      "updated_at": "2016-11-27T04:05:24Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@vors made change to ReaderWriterLockSlim, verifying change",
      "created_at": "2016-11-28T20:54:20Z",
      "updated_at": "2016-11-28T20:54:20Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "By reading the code, it looks to me that `RenderHelper` will only be called through `ProgressPane.Show`, and `ProgressPane.Show` will never be called from 2 different threads simultaneously -- it's either being called on the pipeline thread, or called from a timer thread, and only one timer thread will be running at any given time. That means at any given time, only 1 thread will be executing `RenderHelper` method, so a read-write lock won't help improve concurrency.\r\n\r\nSecond, this lock protects accessing to the type field `_topLevelNodes`, but there are other type members also shared between the main pipeline thread and `_progPane.Show` running on the timer thread, `_rawui` and `_progressRegion` are another 2 examples. I didn't do thorough analysis to know if those shared members can actually cause other race conditions, but it's possible.\r\n\r\nMaybe we should just have a lock in `ConsoleHostUserInterfaceProgress.cs` to protect the call to `_pendingProgress.Update(sourceId, record)` in `HandleIncomingProgressRecord` and the call to `_progPane.Show(_pendingProgress)` in `ProgressPaneUpdateTimerElapsed`. I think that will cause very minimum performance degradation to the timer improvement.\r\n\r\n@lzybkr @iSazonov Any thoughts?",
      "created_at": "2016-11-29T18:15:47Z",
      "updated_at": "2016-11-29T18:18:47Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "If we are manipulating data structures as part of showing progress, maybe a timer was the wrong approach - it seems possible that we might make a mess of things somehow by not rendering everything that was asked of us.\r\n\r\nOn the other hand, maybe the progress rendering handles such cases already on the assumption that the user did a poor job, e.g. not reporting the completion of some child event.",
      "created_at": "2016-11-29T18:29:07Z",
      "updated_at": "2016-11-29T18:29:07Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "It turns out the current timer approach could result in more potential race conditions, for example, the timer might be disposed on the main pipeline thread while it's being called on the timer thread, the `_progPane.Hide()` might be called in `ResetProgress` on the main pipeline thread, while `_progPane.Show` is running on the timer thread. After talking to @SteveL-MSFT and @lzybkr, we feel the safest fix for now (to unblock CI/daily build) is to revert the original timer change. I will re-open the original `Write-Progress` issue too. /cc @iSazonov \r\n\r\nI will close this PR and submit another one to revert the timer change.",
      "created_at": "2016-11-29T22:53:58Z",
      "updated_at": "2016-11-29T22:53:58Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The new PR is #2806.",
      "created_at": "2016-11-30T00:24:25Z",
      "updated_at": "2016-11-30T00:24:25Z"
    }
  ],
  "created_at": "2016-11-23T17:24:00Z",
  "number": 2771,
  "state": "closed",
  "title": "fix race condition between ProgressRecord being updated while rendering",
  "updated_at": "2016-11-30T00:24:26Z"
}