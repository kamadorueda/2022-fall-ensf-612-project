{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9849",
  "author": "rjmholt",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n**This PR is specified by https://github.com/PowerShell/PowerShell-RFC/pull/192**\r\n\r\n# PR Summary\r\n\r\nResolves https://github.com/PowerShell/PowerShell/issues/3241.\r\n\r\nImplements `&&` and `||`.\r\n\r\nA statement like `cmd1 && cmd2` should behave like `cmd1; if ($?) { cmd2 }`.\r\n\r\nAfter discussion with the @PowerShell/powershell-committee, this feature has the following charateristics:\r\n\r\n- `cmd1 && cmd2` behaves like `cmd1; if ($?) { cmd2 }`\r\n- `cmd1 || cmd2` behaves like `cmd1; if (-not $?) { cmd2 }`\r\n- `cmd1 && cmd2 && cmd3` is left associative: `[cmd1 && cmd2] && cmd3`\r\n- **No control flow statements in pipeline chains; only pipelines**. Control flow statements are still possible with subexpressions in pipelines (`cmd1 && $(break)`). These were taken out due to the inconsitencies they posed at a grammatical, data structure and semantic level.\r\n- Assignment is consistent with other assignment in PowerShell, so that a script terminating error will not result in a partial assignment, but a pipeline-terminating error will.\r\n- This syntax is available as the `PSPipelineChainOperators` experimental feature\r\n\r\n<!-- Summarize your PR between here and the checklist. -->\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [x] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [x] Experimental feature name(s): `PSPipelineChainOperators`<!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [x] Issue filed: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/4853 <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n",
  "closed_at": "2019-10-17T21:43:47Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The `&&` and `||` operators allow statements for both operands in bash. Why don't we do the same in PowerShell?",
      "created_at": "2019-06-11T15:26:10Z",
      "updated_at": "2019-06-11T20:37:18Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Discussed this offline with @daxian-dbw. We've decided to get rid of the subordinate statements and move assignment up to the whole chain (so no `$x = cmd1 && $y = cmd2`). I'll try to rework this today or tomorrow",
      "created_at": "2019-06-11T17:44:10Z",
      "updated_at": "2019-06-11T17:44:10Z"
    },
    {
      "author": "stereokai",
      "author_association": "NONE",
      "body": "@rjmholt Can you explain the reasoning in this PR thread?",
      "created_at": "2019-06-12T07:39:57Z",
      "updated_at": "2019-06-12T07:39:57Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> Can you explain the reasoning in this PR thread?\r\n\r\nI've discussed again with @daxian-dbw and we agreed this is now best served by an RFC. When that RFC is accepted, I'll make the desired changes in this branch",
      "created_at": "2019-06-12T15:43:22Z",
      "updated_at": "2019-06-12T15:43:22Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Please see https://github.com/PowerShell/PowerShell-RFC/pull/192",
      "created_at": "2019-06-12T20:48:07Z",
      "updated_at": "2019-06-12T20:48:07Z"
    },
    {
      "author": "stereokai",
      "author_association": "NONE",
      "body": "Excellent, thanks",
      "created_at": "2019-06-13T11:57:18Z",
      "updated_at": "2019-06-13T11:57:18Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Codacy's flagged problems are all by design (needed for testing)",
      "created_at": "2019-07-16T23:22:48Z",
      "updated_at": "2019-07-16T23:22:48Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Any chance this is still going to happen for PS7?  I could really be using this right now. I'm often executing commands like this:\r\n```\r\nnpm run build-native; npm run build-plugin-bundle\r\n```\r\nI'd really like the second command to run only if the first succeeds i.e. I really want:\r\n```\r\nnpm run build-native && npm run build-plugin-bundle\r\n```",
      "created_at": "2019-09-05T00:05:28Z",
      "updated_at": "2019-09-05T00:05:28Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Haven't got to the compiler changes. If the AST design is changed, compiler code will be changed a lot, so I will postpone reviewing that for now.",
      "created_at": "2019-09-05T21:38:56Z",
      "updated_at": "2019-09-05T21:38:56Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "The remaining CodeFactor and Codacy issues either aren't due to my changes, are needed for tests, or are contrary to our usual style (particularly the comment ones)",
      "created_at": "2019-09-30T16:32:58Z",
      "updated_at": "2019-09-30T16:32:58Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PoshChan please retry linux",
      "created_at": "2019-10-10T19:20:57Z",
      "updated_at": "2019-10-10T19:20:57Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT, successfully started retry of `PowerShell-CI-Linux`",
      "created_at": "2019-10-10T19:21:46Z",
      "updated_at": "2019-10-10T19:21:46Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@rjmholt Can you please squash some of the commits? I depend on CodeFlow for code reviews and it doesn't work for PRs with more than 63 commits ...",
      "created_at": "2019-10-10T21:20:03Z",
      "updated_at": "2019-10-10T21:20:03Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> Can you please squash some of the commits? I depend on CodeFlow for code reviews and it doesn't work for PRs with more than 63 commits ...\r\n\r\nDone, although following the commits will likely present more work; they include things like putting in, taking out, then putting in again experimental features and implementing and then removing control flow statements in chains",
      "created_at": "2019-10-10T22:24:49Z",
      "updated_at": "2019-10-10T22:24:49Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "This issue has changes that could potentially change syntax. Please consider adding this feature to [EditorSyntax](https://github.com/PowerShell/EditorSyntax) which is used for syntax highlighting in GitHub, Visual Studio Code, Atom, Sublime Text, and many more locations.\r\n\r\nConsistent syntax highlighting is very important for the language and a feature isn't \"complete\" until syntax highlighting is what is expected.\r\n\r\nIf you can't contribute to [EditorSyntax](https://github.com/PowerShell/EditorSyntax), at least open an issue to track the work - however, please note, that no one is actively working on the repo and so the work will likely not get done in a timely manner.\r\n\r\nWe hope that you consider contributing to [EditorSyntax](https://github.com/PowerShell/EditorSyntax).\r\n\r\n(note this is copy/pasted text for any change that looks like it could impact EditorSyntax - and will be a bot in the future)",
      "created_at": "2019-10-12T14:36:26Z",
      "updated_at": "2019-10-12T14:36:26Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Sure would be nice if this could make it into `preview.5`.  :-)",
      "created_at": "2019-10-15T20:19:38Z",
      "updated_at": "2019-10-15T20:19:48Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Also, have you reviewed all the visitors? Like `ConstantValueVisitor`, `VariableAnalysisVisitor` and etc. Some are implementing `ICustomVisitor`, but if it makes sense, we should change them to implement `ICustomVisitor2`.",
      "created_at": "2019-10-15T20:40:14Z",
      "updated_at": "2019-10-15T20:40:14Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "One example, for a script `1 && 1`, do we consider it a constant?",
      "created_at": "2019-10-15T20:40:54Z",
      "updated_at": "2019-10-15T20:40:54Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> One example, for a script 1 && 1, do we consider it a constant?\r\n\r\nSo this is a very interesting question. Philosophically and under the hood, `&&` and `||` check `$?`, which is a *stateful* concept (i.e. not pure or constant). `1 && 1` is a chain of two pipelines becoming a single statement (so above the level of what PowerShell terms an *expression*), but as you imply, there's only one value possible.\r\n\r\nLooking at how we use the `IsConstantValueVisitor`, it's used in a couple of places where we might not want any ambiguity:\r\n\r\n- [In attribute arguments](https://github.com/PowerShell/PowerShell/blob/c76e1221c4516ea853d1e3f22117b12796b28eb8/src/System.Management.Automation/engine/parser/SemanticChecks.cs#L21-L29)\r\n- [In #requires arguments](https://github.com/PowerShell/PowerShell/blob/c76e1221c4516ea853d1e3f22117b12796b28eb8/src/System.Management.Automation/engine/parser/tokenizer.cs#L2026)\r\n\r\nOn the other hand, there are places like in the compiler where it might make things more efficient.\r\n\r\nMy thinking is:\r\n\r\n- If we optimise pipeline chains to emit simple constants when all members of a chain are constant, and ignore `$?` altogether, then that would mean a pipeline chain can be constant\r\n- If that's the case, then it makes sense for constant folding etc to work with it",
      "created_at": "2019-10-15T22:34:40Z",
      "updated_at": "2019-10-15T22:34:40Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "It looks like xUnit isn't creating its test results file? The tests failing now don't exist in this branch",
      "created_at": "2019-10-15T23:58:12Z",
      "updated_at": "2019-10-15T23:58:12Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The fix for `TestAppDomainProcessExitEvenHandlerNotLeaking` has been merged. I have no idea about the `TestCustomPipeNameCreation` failure.",
      "created_at": "2019-10-16T18:02:11Z",
      "updated_at": "2019-10-16T18:02:11Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "BTW, please review all `CodeFactor` issues, and fix the reasonable ones.",
      "created_at": "2019-10-16T18:03:15Z",
      "updated_at": "2019-10-16T18:03:15Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@rjmholt The PR should be ready to merge after you resolve the conflict in `ExperimentalFeature.cs`.",
      "created_at": "2019-10-17T17:23:53Z",
      "updated_at": "2019-10-17T17:23:53Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> @rjmholt The PR should be ready to merge after you resolve the conflict in ExperimentalFeature.cs.\r\n\r\nDone",
      "created_at": "2019-10-17T17:26:08Z",
      "updated_at": "2019-10-17T17:26:19Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "I've tried reproducing this on WSL, Ubuntu 18.04 and macOS and in all cases the tests are correctly skipped (when I run the file directly)",
      "created_at": "2019-10-17T18:28:21Z",
      "updated_at": "2019-10-17T18:28:21Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "\ud83c\udf89 ",
      "created_at": "2019-10-17T21:54:28Z",
      "updated_at": "2019-10-17T21:54:28Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "\ud83c\udf89\ud83c\udf89\ud83c\udf89 Nice!",
      "created_at": "2019-10-18T08:02:07Z",
      "updated_at": "2019-10-18T08:02:07Z"
    },
    {
      "author": "Graham-Beer",
      "author_association": "NONE",
      "body": "This is awesome! Looking forward to having a look in PS7 preview 5!",
      "created_at": "2019-10-18T09:37:54Z",
      "updated_at": "2019-10-18T09:37:54Z"
    }
  ],
  "created_at": "2019-06-07T01:10:55Z",
  "number": 9849,
  "state": "closed",
  "title": "Pipeline chain operators",
  "updated_at": "2019-10-22T18:35:58Z"
}