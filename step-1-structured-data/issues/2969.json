{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2969",
  "author": "joeyaiello",
  "body": "[Edited by @daxian-dbw]\r\n\r\nPR #3281 adds support to ShellExecute in powershell core when it's running on Windows full SKUs. With that fix, `Start-Process` is able to run MSI in powershell core.\r\n\r\nHowever, it's not a complete solution. It calls ShellExecuteEx directly in MTA thread instead of from STA thread [as suggested in MSDN](https://msdn.microsoft.com/en-us/library/windows/desktop/bb762154(v=vs.85).aspx). Therefore, the current solution may not work for some shell extensions that require COM.\r\n\r\nIn .NET Core, managed threads are all eagerly initialized with MTA mode, so to call ShellExecuteEx from a STA thread, we need to create a native thread using CreateThread function and initialize COM with STA on that thread. In #3281, we are calling ShellExecuteEx directly on MTA thread, and it works for things like opening a folder in File Explorer, opening a file with the application that is associated with its extension in shell, opening URL in web browser and etc, but it's not guaranteed to work in all ShellExecution scenarios.\r\n\r\nWill keep this issue open to track the \"invoke-on-STA-thread\" work.\r\n\r\n-------------------------------------------------------------------------------------------------\r\n\r\n```powershell\r\nPS:4> Start-Process .\\PowerShell_6.0.0-alpha.17-win10-win2016-x64.msi -PassThru\r\n\r\n NPM(K)    PM(M)      WS(M)     CPU(s)     Id  SI ProcessName\r\n ------    -----      -----     ------     --  -- -----------\r\n      9     6.15       7.55       0.03  20092   3 msiexec\r\n\r\nPS:5> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-alpha\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-alpha.16-54-gc86a287726fe366895723dfcc7739f93038615ea\r\nCLRVersion\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nSerializationVersion           1.1.0.1\r\nBuildVersion                   3.0.0.0\r\n```",
  "closed_at": "2017-08-01T18:27:41Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I test this for .txt - it don't work too. Seems windows type associations don't work here at all.",
      "created_at": "2017-01-06T18:58:51Z",
      "updated_at": "2017-01-06T18:58:51Z"
    },
    {
      "author": "mattpwhite",
      "author_association": "NONE",
      "body": "The .NET Core version of System.Diagnostics.Process doesn't support using ShellExecute() to start processes.  The .NET Framework version does and does so by default, with an alternate path that uses CreateProcess().  ShellExecute is what makes starting a file launch its associated executable (and other stuff like starting a URL launching your default browser).  Have to imagine this is a breaking change for a lot of existing scripts (and that it's probably not trivial to fix).\r\n\r\nhttps://referencesource.microsoft.com/#System/services/monitoring/system/diagnosticts/ProcessStartInfo.cs,48\r\n\r\nhttps://github.com/dotnet/corefx/blob/912cba3675a15718515417e7e9b46504c0303fbc/src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.Windows.cs#L85",
      "created_at": "2017-01-11T02:14:52Z",
      "updated_at": "2017-01-11T02:14:52Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "#3281 is to add ShellExecute support in powershell core.\r\nIt's not a complete solution however. It calls `ShellExecuteEx` directly in MTA thread instead of from STA thread as suggested in [MSDN](https://msdn.microsoft.com/en-us/library/windows/desktop/bb762154(v=vs.85).aspx). Therefore, the current solution may not work for some shell extensions that require COM.\r\n\r\nIn .NET Core, managed threads are all eagerly initialized with MTA mode, so to call `ShellExecuteEx` from a STA thread, we need to create a native thread using `CreateThread` function and initialize COM with STA on that thread. In #3281, we are calling `ShellExecuteEx` directly on MTA thread, and it works for things like opening a folder in File Explorer, opening a file with the application that is associated with its extension in shell, opening URL in web browser and etc, but it's not guaranteed to work in all ShellExecution scenarios.\r\n\r\nI will keep this issue open even after merging that PR to track the \"invoke-on-STA-thread\" work.",
      "created_at": "2017-03-11T07:09:15Z",
      "updated_at": "2017-03-11T07:09:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "CoreFX issue https://github.com/dotnet/corefx/issues/522 milestone is 1.0.0-rtm so I set \"Waiting - NetStandard20\"",
      "created_at": "2017-03-18T18:23:31Z",
      "updated_at": "2017-03-18T18:23:31Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov So I'll be the first to admit that this thread is totally over my head, but `1.0.0-rtm` in the CoreFX repo implies that that work already shipped in .NET Core 1.0 RTM. \r\n\r\nIs .NET Standard 2.0 still relevant here? ",
      "created_at": "2017-03-27T17:18:31Z",
      "updated_at": "2017-03-27T17:18:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I can't still find full support STA in CoreFX \ud83d\ude15 ",
      "created_at": "2017-03-27T18:10:26Z",
      "updated_at": "2017-03-27T18:10:26Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The CoreFX issue was not addressed. It was closed as I quoted here:\r\n> We should consider this when we have a concrete motivating scenario that requires it.",
      "created_at": "2017-03-27T18:38:40Z",
      "updated_at": "2017-03-27T18:38:40Z"
    },
    {
      "author": "jeffbi",
      "author_association": "CONTRIBUTOR",
      "body": "If it helps motivate them, without STA we cannot use IGroupPolicyObject (#3353)",
      "created_at": "2017-03-27T22:54:42Z",
      "updated_at": "2017-03-27T22:54:42Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@jeffbi Please leave a comment in the CoreFX issue. Maybe even reactivate the issue if you think it's a concrete scenario that should be supported in .NET Core.",
      "created_at": "2017-03-28T01:11:00Z",
      "updated_at": "2017-03-28T01:11:00Z"
    },
    {
      "author": "jeffbi",
      "author_association": "CONTRIBUTOR",
      "body": "@daxian-dbw I have added a comment on the CoreFX issue, but I don't think I can reopen it.",
      "created_at": "2017-03-28T01:48:51Z",
      "updated_at": "2017-03-28T01:48:51Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@jeffbi it's probably better to open a new issue, explain the scenario for our purposes, and then list references to this issue and the original closed issue. Sound okay? ",
      "created_at": "2017-03-30T22:19:09Z",
      "updated_at": "2017-03-30T22:19:09Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "STA is now in corefx",
      "created_at": "2017-07-26T20:06:08Z",
      "updated_at": "2017-07-26T20:06:08Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Sweet! We need to clean up `ApartmentState` related workarounds in powershell now.",
      "created_at": "2017-07-26T20:43:21Z",
      "updated_at": "2017-07-26T20:43:21Z"
    }
  ],
  "created_at": "2017-01-06T17:52:23Z",
  "labels": [
    "WG-Cmdlets",
    "Resolution-Fixed",
    "Waiting - DotNetCore"
  ],
  "number": 2969,
  "state": "closed",
  "title": "powershell should run `ShellExecuteEx` on STA thread",
  "updated_at": "2017-08-01T18:50:19Z"
}