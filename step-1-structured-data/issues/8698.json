{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8698",
  "author": "xycui",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n(Please re-open [issue#7675](https://github.com/PowerShell/PowerShell/issues/7675))\r\n1. Create new console project with VS 2017 or ```dotnet new console```\r\n2. Edit csproj file to change to change the ```TargetFramework``` to ```net461``` even ```net471```.  netcoreapp is working. \r\n3. Add ```RuntimeIdentifier``` (2 different types of exception will be thrown)\r\n```xml\r\n    <RuntimeIdentifier>win-x64</RuntimeIdentifier>\r\n```\r\n4. Debug the code in main like below\r\n```\r\nnamespace test\r\n{\r\n    using System.Management.Automation;\r\n\r\n    internal class Program\r\n    {\r\n        private static void Main(string[] args)\r\n        {\r\n            PowerShell ps = PowerShell.Create();\r\n            Console.ReadKey();\r\n        }\r\n\r\n    }\r\n}\r\n```\r\n\r\n# Expected behavior\r\nThe code could pass.\r\n\r\n# Actual behavior\r\n- If not add RuntimeIdentifier tag. csproj like this:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net471</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Management.Automation\" Version=\"6.1.2\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\nThrow exception: \r\n```\r\nSystem.IO.FileNotFoundException: 'Could not load file or assembly 'System.Management.Automation, Version=6.1.2.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.'\r\n```\r\n![image](https://user-images.githubusercontent.com/2989428/51429080-f4fc3000-1c45-11e9-86c2-1330d20dd30b.png)\r\n\r\n- if add the RuntimeIdentifier tag. csproj like this:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net471</TargetFramework>\r\n    <RuntimeIdentifier>win-x64</RuntimeIdentifier>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Management.Automation\" Version=\"6.1.2\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\nThrow exception:\r\n```\r\nSystem.IO.FileNotFoundException: 'Could not load file or assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.'\r\n```\r\n<img width=\"911\" alt=\"untitled\" src=\"https://user-images.githubusercontent.com/2989428/51429001-11e43380-1c45-11e9-9213-6c0f8940fe0a.png\">\r\n\r\n# Environment data\r\nOS: Windows 10\r\nVisual studio:  Visual studio 2017 5.9.5\r\n\r\n# My analyze & questions for your reference\r\nI check the nuget package ```System.Management.Automation``` with NuGet package Explore     \r\n![image](https://user-images.githubusercontent.com/2989428/51429019-41933b80-1c45-11e9-8afb-9bf9e423f155.png)     \r\nHere are the problems: \r\n1. All the libs files are in ref/runtimes folder instead of lib folder. Maybe it is fine. **But how to deal with the Any CPU case?** Repro step3 is added after I checked the nuget package. That is a real Any CPU case.\r\n2. Even if the ```RuntimeIdentifier``` is assigned. We can see from the screen shot that: the System.Runtime 4.2.1.0 is in **referenced assemblies** of the System.Management.Automation.dll(double click the file in Nuget Package Explorer). Maybe most of the **referenced assemblies**(dependencies) are in the Netframework binaries. But when we add the System.Runtime reference manualy we could see: The version of it is **4.1.2.0**.\r\n![image](https://user-images.githubusercontent.com/2989428/51429555-7e156600-1c4a-11e9-816d-0feba26aca47.png)\r\n3. System.Runtime is not the only dependency with the issue. We could add binding redirect to force redirect version of this dependency. (I don't think it is a good solution).  You will still see the exception, but with another dll name. \r\n",
  "closed_at": "2019-03-14T05:56:28Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Please see comment in #4669.",
      "created_at": "2019-01-21T05:25:08Z",
      "updated_at": "2019-01-21T05:25:08Z"
    },
    {
      "author": "xycui",
      "author_association": "NONE",
      "body": "> Please see comment in #4669.\r\n\r\nHi @iSazonov. I have tried to use the package **Microsoft.Powershell.SDK**, **Microsoft.PowerShell.Commands.Diagnostics**, **Microsoft.WSMan.Management**. Still not work. Here is the csproj.\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.PowerShell.Commands.Diagnostics\" Version=\"6.1.2\" />\r\n    <PackageReference Include=\"Microsoft.PowerShell.SDK\" Version=\"6.1.2\" />\r\n    <PackageReference Include=\"Microsoft.WSMan.Management\" Version=\"6.1.2\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\nI think I have the different case. Because I am using **NET FRAMEWORK** as target. It is working if I change the target framework to netcore. BUT that is not what I want. \r\nCould you please have a try on the repro steps I have provided? \r\nThanks in advance...",
      "created_at": "2019-01-21T09:36:31Z",
      "updated_at": "2019-01-21T10:03:16Z"
    },
    {
      "author": "xycui",
      "author_association": "NONE",
      "body": "> Please see comment in #4669.\r\n\r\nI also check the package of Microsoft.PowerShell.SDK. I think the package has the similar issue which I have mentioned in the origin post. Please take a look at section:\r\n> My analyze & questions for your reference\r\n![image](https://user-images.githubusercontent.com/2989428/51466223-a4e7af80-1da4-11e9-85ff-9ec64d31db98.png)",
      "created_at": "2019-01-21T09:51:53Z",
      "updated_at": "2019-01-21T09:51:53Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@xycui The problem is that you are building against full .net, you'd have to use .net core or .net standard instead\r\nWhat are you trying to achieve on a high level? the SMA package is just for referencing the API's, it does not do anything by itself. Do you want to host PowerShell instead (then you should use the SDK package) and are you clear on the difference between PowerShell v5 (also known as Windows PowerShell) vs v6 (PowerShell Core, which this repo is about)? From a .Net app, I would only expect that referencing the Windows PowerShell assemblies to work.",
      "created_at": "2019-01-21T20:39:35Z",
      "updated_at": "2019-01-21T20:40:44Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "For hosting PowerShell, if you're specifically targeting the .Net Framework runtime, you should be using https://www.nuget.org/packages/Microsoft.PowerShell.5.ReferenceAssemblies/ which targets Windows PowerShell (built on .Net Framework).  Otherwise, Microsoft.PowerShell.SDK is specifically for PSCore6 which is targeting the .Net Core runtime.",
      "created_at": "2019-01-22T17:18:55Z",
      "updated_at": "2019-01-22T17:18:55Z"
    },
    {
      "author": "xycui",
      "author_association": "NONE",
      "body": "@SteveL-MSFT Thanks for the reply. This is what I need.",
      "created_at": "2019-01-23T07:58:21Z",
      "updated_at": "2019-01-23T07:58:21Z"
    },
    {
      "author": "xycui",
      "author_association": "NONE",
      "body": "@bergmeister Thanks for your note. \r\nI know the SMA is just for reference. But the net standard version of SMA package cannot work on .NET Framework target. Which really confused me. I know there is another System.Management.Automation.dll package. But that is 3 years ago version. I thought that might be replaced by the NET standard one. And now I know that this package is just for .NET Core environment. ",
      "created_at": "2019-01-23T08:07:52Z",
      "updated_at": "2019-01-23T08:07:52Z"
    },
    {
      "author": "xycui",
      "author_association": "NONE",
      "body": "@SteveL-MSFT Maybe the package (PowerShell.SDK and System.Management.Automation) could be package to netcore?  Just because net standard could also be used by net framework target? Or any doc for the case of net framework to use Microsoft.PowerShell.5.ReferenceAssemblies instead.",
      "created_at": "2019-01-23T08:11:17Z",
      "updated_at": "2019-01-23T08:11:17Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "https://github.com/PowerShell/PowerShell/issues/8721 is opened for changing the target framework for SDK nuget package to `netcoreapp2.1`",
      "created_at": "2019-01-23T22:14:58Z",
      "updated_at": "2019-01-23T22:14:58Z"
    }
  ],
  "created_at": "2019-01-19T16:33:56Z",
  "number": 8698,
  "state": "closed",
  "title": "Throw 'Could not load file or assembly' exception when using package System.Management.Automation in C# project (target net framework)",
  "updated_at": "2019-03-14T05:56:28Z"
}