{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13104",
  "author": "kilasuit",
  "body": "## Steps to reproduce\r\n\r\n```powershell\r\n$ob1 = @{\r\n    ProcessName = 'pwsh'\r\n}\r\n\r\n$ob1 | Get-Process\r\n```\r\n\r\n## Expected behavior\r\n\r\n```none\r\nreturns running pwsh Processes\r\n```\r\n\r\n## Actual behavior\r\n\r\n```none\r\n\r\nGet-Process: The input object cannot be bound to any parameters for the command either because the command does not take pipeline input or the input and its properties do not match any of the parameters that take pipeline input.\u001b\r\n\r\n```\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.2\r\nPSEdition                      Core\r\nGitCommitId                    7.0.2\r\nOS                             Microsoft Windows 10.0.20161\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "This is fundamentally the same issue as https://github.com/PowerShell/PowerShell/issues/13103 -- it has more to do with the parameter binder itself than the individual cmdlets, as far as I can tell?",
      "created_at": "2020-07-05T02:22:09Z",
      "updated_at": "2020-07-05T02:22:19Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "I think it may be in both the parameter binder & also the cmdlets themselves",
      "created_at": "2020-07-05T02:28:50Z",
      "updated_at": "2020-07-05T02:28:50Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Can you elaborate? \ud83d\ude05 \r\n\r\nWhile it's possible for the cmdlets to take a hashtable as pipeline input, and this could be individually added to them, it's not a thing that broadly works across most cmdlets I can think of at the moment. Are there cmdlets you're thinking of that seem to allow this specific kind of input? \ud83e\udd14 ",
      "created_at": "2020-07-05T02:31:22Z",
      "updated_at": "2020-07-05T02:31:22Z"
    },
    {
      "author": "scriptingstudio",
      "author_association": "NONE",
      "body": "@kilasuit \r\n```\r\n#$ob1 = @{\r\n$hash = @{\r\n    ProcessName = 'pwsh'\r\n}\r\n\r\n$ob1 = [pscustomobject]@{\r\n    ProcessName = 'pwsh'\r\n}\r\n\r\n$ob1 | Get-Process\r\n\r\n NPM(K)    PM(M)      WS(M)     CPU(s)      Id  SI ProcessName\r\n ------    -----      -----     ------      --  -- -----------\r\n     59    38,62      70,49       1,28    9228   1 pwsh\r\n```",
      "created_at": "2020-07-05T07:56:26Z",
      "updated_at": "2020-07-05T07:56:26Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "Ya @scriptingstudio, that's known as per the linked issue (see some of the other comments) and was **well** aware of that anyway \n\nHowever, a PSCustomObject is not a Simple object like a basic hashtable is\n\nAnd also requires **actual knowledge** of PowerShell to understand that it doesn't **just** work which for newcomers will be a pain point. \n\nAlso fyi, that kind of response, isn't all that friendly, at least preface it \"Hey did you know about this?\u201c which if you'd also read the linked issue too you'd have seen basically the same comment from @vexx32 and seen your comment wasn't all that useful. \n\nAlso further FYI, 7 going on 8 years PowerShell experience here (& teacher too), I was already aware that this worked with PSCustomObjects, also as highlighted in the linked issue. ",
      "created_at": "2020-07-05T08:10:09Z",
      "updated_at": "2020-07-05T08:10:09Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Note that changing this would change the behavior of existing code:\r\n\r\n```powershell\r\nfunction Test-Function {\r\n    [CmdletBinding()]\r\n    param(\r\n        [Parameter(ValueFromPipelineByPropertyName)]\r\n        [string] $Name,\r\n\r\n        [Parameter(ValueFromPipeline)]\r\n        [hashtable] $Hashtable\r\n    )\r\n    process {\r\n        if ($PSBoundParameters.ContainsKey('Name')) {\r\n            $Name\r\n        } else {\r\n            $Hashtable\r\n        }\r\n    }\r\n}\r\n\r\n[pscustomobject]@{ Name = 'test' } | Test-Function\r\n@{ Name = 'test' } | Test-Function\r\n```\r\n\r\nCurrently returns:\r\n\r\n```\r\ntest\r\n\r\nName                           Value\r\n----                           -----\r\nName                           test\r\n```\r\n\r\nBut after the changes would return:\r\n\r\n```\r\ntest\r\ntest\r\n```\r\n\r\n---\r\n\r\n@kilasuit It's hard to tell how many years of experience someone has from a pseudonym and an avatar.  Though I definitely agree that a brief description would have helped the message come off as slightly less terse, there was a nicer way to say that as well.",
      "created_at": "2020-07-05T13:28:49Z",
      "updated_at": "2020-07-05T13:28:49Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "In terms of terminology, @kilasuit, I recommend talking about _dictionaries_ or _hash tables_, not _simple objects_, because we want to distinguish objects whose _properties_ (from a .NET type perspective) to operate on from dictionary-like types that happen to use .NET properties to store a collection of _key-value pair_ entries. I also suggest removing the reference to `Get-Process` from the title, and to close the effective  duplicate, #13103, now that we've established that the behavior applies to the parameter binder in general, not to specific cmdlets.\r\n\r\n---\r\n\r\nGenerally speaking, it makes sense to treat objects with bona fide _properties_ and _dictionaries_ (hash tables) _interchangeably_, as is already the case in many contexts; e.g., we've implemented that recently for `Select-Object`; similarly, `ConvertTo-Json` supports hash-table input, and #10999 suggests adding such support to `Export-Csv` / `ConvertTo-Csv`.\r\n\r\n---\r\n\r\n@SeeminglyScience, while with your specific code the behavior would indeed change, note that `$Hashtable` would still _also_ be bound, and - as seems more likely - if you put the two parameters into _separate parameter sets_ and use `$PSCmdlet.ParameterSetName`, things will work as before, because the type-as-a-whole `ValueFromPipeline` binding (sensibly) takes precedence:\r\n\r\n```powershell\r\nclass Foo {\r\n  [string] $Name = 'Property'\r\n  [string] ToString() { return 'Whole object' }\r\n}\r\n\r\nfunction Test-Function {\r\n  [CmdletBinding()]\r\n  param(\r\n      [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='Property')]\r\n      # [Parameter(ValueFromPipelineByPropertyName)]\r\n      [string] $Name,\r\n\r\n      [Parameter(ValueFromPipeline, ParameterSetName='WholeObj')]\r\n      # [Parameter(ValueFromPipeline)]\r\n      [Foo] $WholeObj\r\n  )\r\n  process {\r\n      \"Parameter set: $($PSCmdlet.ParameterSetName)\"\r\n      if ($PSBoundParameters.ContainsKey('Name')) {\r\n          $Name.ToString()\r\n      }\r\n      if ($PSBoundParameters.ContainsKey('WholeObj')) {\r\n        $WholeObj.ToString()\r\n      }\r\n  }\r\n}\r\n\r\n[Foo]::new() | Test-Function\r\n```\r\n\r\nThe above yields:\r\n\r\n```none\r\nParameter set: WholeObj\r\nWhole object\r\n```\r\n\r\nIf you _don't_ use distinct parameters sets (use the commented-out `[Parameter(...)]` lines instead), you'll see that _both_ parameters are bound:\r\n\r\n```none\r\nParameter set: __AllParameterSets\r\nProperty\r\nWhole object\r\n```\r\n\r\nTrue, the proposed change would then also bind `$Name` in cases where it didn't before, but, overall, I think this proposal is worth considering, and the technically breaking change strikes me as falling into [Bucket 3: Unlikely Grey Area](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md#bucket-3-unlikely-grey-area).\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2020-07-06T23:46:02Z",
      "updated_at": "2020-07-06T23:46:02Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Hah that's what I get for trying to use minimal code to demo huh? I wouldn't have bet it would actually assign both \ud83d\ude42 \r\n\r\nThat's wild, learn something new every day. Good catch @mklement0!",
      "created_at": "2020-07-07T01:05:16Z",
      "updated_at": "2020-07-07T01:05:16Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "@SeeminglyScience - totally agree with you & perhaps I could have put it across kinder too, something for me to work on. My Bad.\r\n\r\nIn terms of education around terminology @mklement0 we need to be mindful of those coming to PowerShell at all ages & skill sets, because, for example, I fully intend to teach my ten year old son all about PowerShell & will look forward to the day where he teaches me about it instead of me teaching him. \r\n\r\nEven so, this is starting to feel very much like it may actually have been an unfortunate design flaw in the cmdlet that may possibly even date back to v1 days ",
      "created_at": "2020-07-07T02:44:15Z",
      "updated_at": "2020-07-07T02:44:15Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@kilasuit \r\n\r\nWe need to be mindful of terminology that is _accurate (enough)_, which comes with unavoidable intrinsic complexity, if important underlying distinctions are to be reflected.\r\nMy recommendation (_dictionaries_ (hash tables) vs. (non-dictionary) _objects_) reflects this approach, whereas the term _simple object_ invites confusion, because it erases the fundamental distinction described in my previous comment.\r\n\r\n> starting to feel very much like it may actually have been an unfortunate design flaw in the cmdlet that may possibly even date back to v1 days\r\n\r\nAgain: this behavior isn't specific to any specific cmdlet, it is built into the parameter binder, and therefore applies to any cmdlet with by-property pipeline-binding parameters.\r\n\r\nUsing the _entries_ of _dictionaries_ (hash tables) _as if they were object properties_ - allowing for interchangeable use of non-dictionary objects based on their bona fide properties and dictionaries based on their entries (which are implemented _via_ bona fide properties) - is _inconsistently_ supported: `ConvertTo-Json` and (now) `Select-Object` already do, but `Export-Csv` / `ConvertTo-Csv` do not (yet) - and https://github.com/PowerShell/PowerShell/issues/10999#issuecomment-552109741 shows the useless behavior that results if you treat a dictionary based on its bona fide properties only.\r\n\r\nGiven the close conceptual relationship between (custom) objects and dictionaries, it makes sense to support their interchangeable use more widely:\r\n\r\n* #10999 is a step in that direction (as is #11027 in the _opposite_ direction: supporting dictionary _output_ as an alternative to custom objects, as only supported by _some_ cmdlets)\r\n\r\n* similarly, _this_ proposal could be another step in that direction - but in order for this to go anywhere, it needs to be framed properly: as an enhancement to the parameter binder, not as an issue with an individual cmdlet, with a discussion of the potential ramifications.\r\n\r\n\r\n\r\n",
      "created_at": "2020-07-07T03:27:38Z",
      "updated_at": "2020-07-07T03:28:46Z"
    }
  ],
  "created_at": "2020-07-05T02:18:02Z",
  "labels": [
    "Issue-Question",
    "WG-Cmdlets-Management"
  ],
  "number": 13104,
  "state": "open",
  "title": "Pipelining a Simple object to Get-Process is broken",
  "updated_at": "2020-07-07T03:28:46Z"
}