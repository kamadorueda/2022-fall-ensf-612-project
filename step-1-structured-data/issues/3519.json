{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3519",
  "author": "DarwinJS",
  "body": "I am writing some scripts that need to pull the latest version of PowerShell (whether or not they are setup in a repo) - similar to tools/download.sh.\r\n\r\nIt would be great if you published something like tools/currentversion.sh (and currentversion.ps1) that contained:\r\nrelease=v6.0.0-alpha.18\r\nbuild=18\r\n\r\nThen I could download and run that shell script in my code (at my own risk) and be able to pull the current version.\r\n\r\nOther data might be helpful as well (maybe actual package files per platform target and their checksums?) - but at a minimum being able to auto-detect the current version would be very helpful!\r\n",
  "closed_at": "2017-09-22T07:48:58Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Related Issues #1635 #1395 \r\n@DarwinJS Please clarify what do you use \"current version\" for? I believe that preferred way is always to test the availability of features.",
      "created_at": "2017-04-10T04:52:05Z",
      "updated_at": "2017-04-10T04:52:05Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov - it would allow me to build something similar to download.sh - which pulls the latest version of PowerShell for the target environment - but I would be in control of the details of what happens in the download.sh equivalent.\r\n\r\nSo within my script I would call something similar to this:\r\n```\r\nwget -O latestsversion.sh https://raw.githubusercontent.com/PowerShell/PowerShell/master/tools/latestversion.sh\r\n. latestversion.sh\r\n```\r\nFor languages other than bash, the file could be pulled and parsed as key value pairs.",
      "created_at": "2017-04-10T10:56:40Z",
      "updated_at": "2017-04-10T10:56:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Can you use [nuget](http://stackoverflow.com/questions/11867660/list-all-available-versions-of-a-specific-package-in-nuget-package-manager-conso)? ",
      "created_at": "2017-04-10T12:28:26Z",
      "updated_at": "2017-04-10T12:28:26Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov - I wouldn't be interested in using nuget for Linux.  As far as Windows goes, I am already the maintainer for the Chocolatey package for PowerShell core: https://chocolatey.org/packages/powershell-core and can pull down chocolatey and PowerShell core with a oneliner if it is needed.",
      "created_at": "2017-04-10T12:33:25Z",
      "updated_at": "2017-04-10T12:34:05Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "I'm not sure that it makes sense to have yet another script to manually update every time we do a release. \r\n\r\n`(Invoke-RestMethod https://api.github.com/repos/powershell/powershell/releases/latest).tag_name` should give you the latest version string today. If you need something else that's not provided there, I'd love to get some more info. ",
      "created_at": "2017-04-10T17:48:59Z",
      "updated_at": "2017-04-10T17:48:59Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "@joeyaiello - this script is to bootstrap PowerShell itself so I can't use invoke-restmethod - do you know a simple a bash equivalent using curl or wget?  I think wget may be more prevalent - I am having to install it on Ubuntu.\r\n\r\nThis is on machines that were freshly built and like download.sh I want to use only utilities already on the system - not have to install git or other utilities just to pull the tag.\r\n\r\nThanks for any help!",
      "created_at": "2017-04-10T18:06:32Z",
      "updated_at": "2017-04-10T18:09:35Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "`curl` will get you the JSON block just fine, but then you have to parse it. It's relatively painless if you've got Python, but if you're stuck with basic coreutils, check this out: http://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools",
      "created_at": "2017-04-10T23:43:02Z",
      "updated_at": "2017-04-10T23:43:02Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "Great link - I was able to craft a solution based on a pure curl + sed example!\r\n\r\nFYI - I thought your build chain would have been capable of writing an updated currentversion.sh - wouldn't want to rely on someone remembering to update a manually edited file.",
      "created_at": "2017-04-11T01:31:33Z",
      "updated_at": "2017-04-11T01:32:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@DarwinJS It seems #3521 is related.",
      "created_at": "2017-04-11T05:21:52Z",
      "updated_at": "2017-04-11T05:21:52Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "Did a PR to make download.sh detect version rather than have hard codes: https://github.com/PowerShell/PowerShell/pull/3535",
      "created_at": "2017-04-11T23:48:40Z",
      "updated_at": "2017-04-11T23:48:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The Issue was resolved in #3608 ",
      "created_at": "2017-09-22T07:48:57Z",
      "updated_at": "2017-09-22T07:48:57Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "The best resolution is actually in: https://github.com/PowerShell/PowerShell/issues/3586",
      "created_at": "2017-09-22T11:07:37Z",
      "updated_at": "2017-09-22T11:07:37Z"
    }
  ],
  "created_at": "2017-04-09T23:21:40Z",
  "number": 3519,
  "state": "closed",
  "title": "Publish Current Version Info Only in tools/currentversion.sh & tools/currentversion.ps1",
  "updated_at": "2017-09-22T11:07:37Z"
}