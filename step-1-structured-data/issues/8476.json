{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8476",
  "author": "IISResetMe",
  "body": "## PR Summary\r\nFix #8308 \r\n\r\n`WriteMemberInfoCollection()` incorrectly nests sibling elements at depth==0\r\nThe reason seems to be that `WriteMemberInfoCollection()` calls `WriteEndElement()` at most once, even if `WriteStartElement()` has been called more than once.\r\n\r\nThis PR moves the `WriteEndElement()` call up immediately after the elements text value has been written.\r\n\r\n## PR Checklist\r\n\r\n- [X] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [X] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [X] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [X] Not Applicable\r\n    - **OR**\r\n    - [ ] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed - Issue link:\r\n- **Testing - New and feature**\r\n    - [ ] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [X] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [ ] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2018-12-22T17:50:12Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The original code is obviously broken.\r\nAs for the depth, I am afraid that this fix is not entirely correct. I assume that recursion was originally meant to serialize members.\r\n@mklement0  What do you think?",
      "created_at": "2018-12-18T07:53:42Z",
      "updated_at": "2018-12-18T07:53:42Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov I agree that depth limitations are not at all correctly imposed by the serializer right now, but that's a broader issue that should be addressed in a separate issue/PR. This is simply an attempt to not produce invalid XML by fixing an adjecent bug.\r\n\r\nFor the broader issue of depth limitations we'll need to address the fact that depth is currently ignored by container types as well. ",
      "created_at": "2018-12-18T08:04:57Z",
      "updated_at": "2018-12-18T08:04:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@IISResetMe In the case I'd keep the method signature. And could you please open new issue about the wrong depth ignoring?",
      "created_at": "2018-12-18T16:29:55Z",
      "updated_at": "2018-12-18T16:29:55Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "I'll revert the last commit, but plan on tackle the depth issue as part of https://github.com/PowerShell/PowerShell/issues/7290",
      "created_at": "2018-12-18T19:50:42Z",
      "updated_at": "2018-12-18T19:50:42Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov Reverted `depth`-related refactorings",
      "created_at": "2018-12-18T23:08:47Z",
      "updated_at": "2018-12-18T23:08:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@IISResetMe Please add a empty commit with `[Feature]` in title before we merge..",
      "created_at": "2018-12-19T18:50:32Z",
      "updated_at": "2018-12-19T18:50:32Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "Please be aware that this issue shouldn't only concern the _technical_ fix of #7290 but also the presumed compatibility with prior versions. Meaning: a lot of scripts in the field might break due to this change!\r\nRefer to the discussion in case #8393 from @mklement0  and StackOverflow Question [_\"Unexpected ConvertTo-Json results? Answer: it has a default -Depth of 2\"_](https://stackoverflow.com/q/53583677/1701026) concerning the perception of the default  `-Depth` (of **`2`**) of the similar cmdlet: `ConvertTo-Json`.",
      "created_at": "2018-12-20T15:12:01Z",
      "updated_at": "2018-12-20T15:20:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@iRon7 In the PR we fix a bug in ConvertTo-Xml cmdlet but you reference a ConvertTo-Json - could you clarify that you mean?",
      "created_at": "2018-12-20T18:14:16Z",
      "updated_at": "2018-12-20T18:14:16Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "I am sorry, I guess my comment wasn't that clear. What I mean is, that appearently every user of the `ConvertTo-Json` cmdlets appears to trapped by the pitfall that the `-Depth`is limited by default to `2`. The issues with `ConvertTo-Xml` are less than `ConvertTo-Json` which could be explained by usage but also by the concerned bug. Meaning that if the default depth now suddenly changes to `2`, users might experience the same type of issues as with `ConvertTo-Json`. Besides, scripts that used to work might now suddenly break and have truncated property paths...",
      "created_at": "2018-12-20T19:03:34Z",
      "updated_at": "2018-12-20T20:12:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@iRon7 The PR doesn't change defaults. It only fix a bug. Defaults we'll change after PowerShell Committee review #7290.",
      "created_at": "2018-12-20T19:29:39Z",
      "updated_at": "2018-12-20T19:29:39Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "@iRon7 one approach could be:\r\n\r\n - Fix depth enforcement \r\n - Set default depth = 5\r\n\r\nDoesnt have to be 2 just because that's the case for the json cmdlet ",
      "created_at": "2018-12-20T19:32:07Z",
      "updated_at": "2018-12-20T19:32:07Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "@IISResetMe. Yes, changing the default depth might work but could cause a performance impact for existing scripts were the default depth (of 2) did work.\r\nE.g.:\r\n```PowerShell\r\nGet-Service | ConvertTo-Xml\r\n```\r\ntakes ~700ms, where:\r\n```PowerShell\r\nGet-Service | ConvertTo-Xml -Depth 5\r\n```\r\ntakes 6.5 minutes...",
      "created_at": "2018-12-20T19:52:19Z",
      "updated_at": "2018-12-20T20:08:50Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@IISResetMe \r\nI still feel the unused method parameters should be removed.  Yes, they should eventually be implemented, but since they are not now, they should be removed.  It is Ok to add a TODO comment and create an Issue to add the functionality later.",
      "created_at": "2018-12-20T21:52:45Z",
      "updated_at": "2018-12-20T21:52:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@PaulHigin A code you reference is not _new code_ so the change is not related the PR. I believe we get better code with fixing #7290.  @IISResetMe Are ready to fix #7290?\r\n\r\n> takes 6.5 minutes...\r\n\r\n@iRon7 Please open new performance issue so we can investigate this problem.",
      "created_at": "2018-12-21T12:58:26Z",
      "updated_at": "2018-12-21T12:58:26Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "@iSazonov, I do not have a performance issue (...yet). Just some concerns that the fix (even it is technically correct) might break a few scripts in the field and if you try to prevent that with a higher default `-Depth`, you _might_ introduce a few performance complains with existing scripts.\r\nAnyway, it is totally up to you what to decide (any direction in this delimema has its pro's and cons).",
      "created_at": "2018-12-21T15:02:13Z",
      "updated_at": "2018-12-21T15:02:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT We need an additional review from MSFT experts and get a conclusion about @iRon7's concerns - can we merge before PowerShell Committee review #7290?",
      "created_at": "2018-12-21T17:39:12Z",
      "updated_at": "2018-12-21T17:39:12Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I think the scope of these changes is ok to accept without waiting on conclusion of #7290 \r\n",
      "created_at": "2018-12-21T17:49:53Z",
      "updated_at": "2018-12-21T17:49:53Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "I just found a similar issue with a `PSCustomObject` and a recurring reference:\r\n\r\n```PowerShell\r\n$Parent = [PSCustomObject]@{\r\n\tName = \"Parent\"\r\n}\r\n$Child = [PSCustomObject]@{\r\n\tName = \"Child\"\r\n}\r\n$Parent | Add-Member Child $Child\r\n$Child | Add-Member Parent $Parent\r\n```\r\nBut the error message is completely different from #7290\r\n\r\n```PowerShell\r\nPS C:\\> $Parent | ConvertTo-Xml\r\n```\r\n\r\n> ConvertTo-Xml : Unexpected end of file has occurred. The following elements are not closed: Objects. Line 9, position 12.\r\n> At line:1 char:11\r\n> + $Parent | ConvertTo-Xml\r\n> +           ~~~~~~~~~~~~~\r\n>     + CategoryInfo          : NotSpecified: (:) [ConvertTo-Xml], XmlException\r\n>     + FullyQualifiedErrorId : System.Xml.XmlException,Microsoft.PowerShell.Commands.ConvertToXmlCommand \r\n\r\nI am not sure whether this is covered in the upcoming fix and tests\r\nAnyways, let me know if you like me to open a new bug report for this.",
      "created_at": "2019-01-06T12:03:48Z",
      "updated_at": "2019-01-06T12:05:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@iRon7 You can download a latest night build from main page of the repo and test.\r\nFor your example I get:\r\n```\r\n$Parent | ConvertTo-Xml\r\n\r\nxml                            Objects\r\n---                            -------\r\nversion=\"1.0\" encoding=\"utf-8\" Objects\r\n```",
      "created_at": "2019-01-06T12:36:59Z",
      "updated_at": "2019-01-06T12:36:59Z"
    }
  ],
  "created_at": "2018-12-16T21:52:04Z",
  "number": 8476,
  "state": "closed",
  "title": "Fix xml nesting bug in CustomSerializer.WriteMemberInfoCollection()",
  "updated_at": "2019-01-06T12:37:00Z"
}