{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4520",
  "author": "mklement0",
  "body": "`-ArgumentList` (`-Args`) currently requires that a _non-empty_ array be passed, which is inconvenient in scenarios where you want to pass arguments through, whether any were specified or not, such as via `$Args`.\r\n\r\nAn empty array or a null collection (`[System.Management.Automation.Internal.AutomationNull]::Value`) should be accepted and should be interpreted as \"no arguments to pass\".\r\n\r\nCurrently, passing `$Args` through in a function is cumbersome; imagine a function `wpsh` whose purpose is to invoke a Windows PowerShell window from PowerShell Core, with any arguments passed through:\r\n\r\n```powershell\r\nfunction wpsh {\r\n  # Pass all arguments through. \r\n  # To do this in a single Start-Process call, you need a cumbersome workaround\r\n  # via an aux. hashtable and splatting.\r\n  # Ideally,  \r\n  #    Start-Process (Get-Command powershell.exe).Path -Args $Args \r\n  # should work directly.\r\n  $htArgs  = if ($Args.Count) { @{ Args = $Args } } else { @{} }\r\n  Start-Process (Get-Command powershell.exe).Path @htArgs\r\n}\r\n```\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n# Or: [System.Management.Automation.Internal.AutomationNull]::Value, such as produced by `& {}`\r\n$arguments = @()  \r\nStart-Process code -Args $arguments\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n`code` (the Visual Studio CLI, if installed) should open / activate, with no arguments being passed.\r\n\r\nActual behavior\r\n---------------\r\n\r\nInvocation fails with the following error message:\r\n\r\n```none\r\nStart-Process : Cannot validate argument on parameter 'ArgumentList'.\r\nThe argument is null, empty, or an element of the argument collection contains a null value.\r\nSupply a  collection that does not contain any null values and then try the command again.\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta.5 on macOS 10.12.6\r\nPowerShell Core v6.0.0-beta.5 on Ubuntu 16.04.3 LTS\r\nPowerShell Core v6.0.0-beta.5 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\nWindows PowerShell v5.1.15063.483 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\n```\r\n",
  "closed_at": "2018-06-22T18:29:47Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Is the main motivation a dynamic construction of the parameter list? Any samples?",
      "created_at": "2017-08-08T06:20:28Z",
      "updated_at": "2017-08-08T06:20:28Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: It is primarily about passing `$Args` through, though allowing empty arrays can also help with dynamically constructed parameter lists; I've added an example to the initial post, based on [this real-world code](https://github.com/PowerShell/PowerShell/issues/4214#issuecomment-320761856).",
      "created_at": "2017-08-08T11:18:06Z",
      "updated_at": "2017-08-08T11:18:06Z"
    },
    {
      "author": "ZSkycat",
      "author_association": "NONE",
      "body": "I also encountered this problem.\r\nmy code\r\n```powershell\r\nfunction RunAsAdministrator {\r\n    $principal = [System.Security.Principal.WindowsPrincipal][System.Security.Principal.WindowsIdentity]::GetCurrent()\r\n    $isAdministrator = $principal.IsInRole([System.Security.Principal.WindowsBuiltInRole]::Administrator)\r\n    if (!$isAdministrator) {\r\n        $cmd = [System.Environment]::GetCommandLineArgs()\r\n        Start-Process -Verb 'runas' ($cmd[0] -replace '.dll$', '.exe') $cmd[1..$cmd.Length]\r\n        exit\r\n    }\r\n}\r\nRunAsAdministrator\r\n```\r\n~~can work in Windows Powershell~~\r\n~~can not work in Powershell Core~~\r\n\r\n@iSazonov ",
      "created_at": "2017-11-29T07:33:09Z",
      "updated_at": "2017-11-29T16:08:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@ZSkycat It seem is another issue. Please open Issue-Question.",
      "created_at": "2017-11-29T12:33:36Z",
      "updated_at": "2017-11-29T12:33:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Can you approve @mklement0 request change?",
      "created_at": "2017-11-29T12:37:40Z",
      "updated_at": "2017-11-29T12:37:40Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: \r\n\r\nThanks.\r\n\r\nRe @ZSkycat's issue: it _is_ the same issue (and Windows PowerShell and PowerShell Core are therefore equally affected): if `$cmd[1..$cmd.Length]` evaluates to `$null` - i.e., if the PowerShell instance was originally invoked without any arguments - binding to `-ArgumentList` breaks.\r\n",
      "created_at": "2017-11-29T13:03:21Z",
      "updated_at": "2017-11-29T13:03:21Z"
    },
    {
      "author": "ZSkycat",
      "author_association": "NONE",
      "body": "@iSazonov \r\nThis is the same issue. As @mklement0  said\r\n\r\n~~Windows PowerShell support -ArgumentList equal $null~~\r\n\r\n`Windows PowerShell` And `PowerShell Core` will throw an error\r\n```\r\nStart-Process : Cannot validate argument on parameter 'ArgumentList'. The argument is null, empty, or an element of the\r\n argument collection contains a null value. Supply a collection that does not contain any null values and then try the\r\ncommand again.\r\n```",
      "created_at": "2017-11-29T13:53:27Z",
      "updated_at": "2017-11-29T15:55:59Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@ZSkycat: \r\n\r\nYes, it is the same issue, but Windows PowerShell also doesn't support an empty array / `$null` `-ArgumentList` value: try `Start-Process notepad -ArgumentList $null`\r\n\r\nAs an aside: Unfortunately, the way `Start-Process` currently works may require additional, embedded quoting to pass arguments through.\r\nFor instance, your function would fail if the session had been invoked with something like `powershell -noexit -file \"C:\\Users\\jdoe\\t 1.ps1\"`, due to the space in the filename - see #5576\r\n\r\n\r\n\r\n",
      "created_at": "2017-11-29T15:49:02Z",
      "updated_at": "2017-11-29T15:49:02Z"
    },
    {
      "author": "ZSkycat",
      "author_association": "NONE",
      "body": "@mklement0 \r\nI try it, you are right.",
      "created_at": "2017-11-29T16:00:51Z",
      "updated_at": "2017-11-29T16:00:51Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this and agree that the change in behavior makes sense and has low risk",
      "created_at": "2017-12-06T23:26:27Z",
      "updated_at": "2017-12-06T23:26:27Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Hmm - looking at the code in \r\n    Microsoft.PowerShell.Commands.Management\\commands\\management\\process.cs\r\nfor the parameter definition, it appears we are deliberately blocking null/empty values\r\n```\r\n        [Parameter(Position = 1)]\r\n        [Alias(\"Args\")]\r\n        [ValidateNotNullOrEmpty]\r\n        [SuppressMessage(\"Microsoft.Performance\", \"CA1819:PropertiesShouldNotReturnArrays\")]\r\n        public string[] ArgumentList { get; set; }\r\n```\r\nRemoving the [ValidateNotNullOrEmpty] attribute should fix the problem.  This is not a breaking change per the breaking change contract description of acceptable changes:\r\n\"Any existing behavior that results in an error message generally may be changed to provide new functionality\"",
      "created_at": "2018-03-16T23:20:42Z",
      "updated_at": "2018-03-16T23:21:44Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@BrucePay do you want to submit a PR for this?",
      "created_at": "2018-03-17T00:01:16Z",
      "updated_at": "2018-03-17T00:01:16Z"
    }
  ],
  "created_at": "2017-08-07T21:01:37Z",
  "labels": [
    "Issue-Discussion",
    "Resolution-Fixed",
    "Committee-Reviewed",
    "WG-Cmdlets-Management"
  ],
  "number": 4520,
  "state": "closed",
  "title": "Start-Process -ArgumentList should accept an empty array / the null collection and interpret that as \"no arguments to pass\"",
  "updated_at": "2018-06-22T18:38:41Z"
}