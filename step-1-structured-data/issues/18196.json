{
  "_url": "https://github.com/PowerShell/PowerShell/issues/18196",
  "author": "deafpolygon",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nSet-Clipboard is missing -AsHtml in PS 7+   \r\n\r\nThere is no known workaround or alternative for this incredibly useful feature.  \r\n\r\n### Expected behavior\r\n\r\n```console\r\n\"<table><tr><td>Test</td><td>Test</td></tr></table>\" | Set-Clipboard -AsHtml \r\n\r\nShould produce a table for any rich-text enabled Office application (Word, Outlook, OneNote) and maybe other applications that understand this.\r\n```\r\n\r\n\r\n### Actual behavior\r\n-AsHtml does not exist.  Piping into `|ConvertTo-Html` does not work\r\n```console\r\nPlain-text paste: <table><tr><td>Test</td><td>Test</td></tr></table>\r\n```\r\n\r\n\r\n### Error details\r\n\r\n```console\r\nSet-Clipboard: A parameter cannot be found that matches parameter name 'AsHtml'.\r\n```\r\n\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.6\r\nPSEdition                      Core\r\nGitCommitId                    7.2.6\r\nOS                             Microsoft Windows 10.0.22621\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": "2022-10-05T00:01:23Z",
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> Should produce a table for any rich-text enabled Office application (Word, Outlook, OneNote) and maybe other applications that understand this.\r\n\r\nWindows Powershell (**5.1.22621.169**), Win 11 22H2\r\n```powershell\r\n\"<table><tr><td>Test</td><td>Test</td></tr></table>\" | Set-Clipboard -AsHtml\r\nSet-Clipboard \"<table><tr><td>Test</td><td>Test</td></tr></table>\" -AsHtml\r\n```\r\nClipboard is empty. The switch is there, but it does not work.\r\n\r\n> Piping into |ConvertTo-Html does not work\r\n\r\nThere is not an object. The Object converts as expected.\r\n```powershell\r\nGet-ChildItem | ConvertTo-Html | Set-Clipboard     # Works in both \"Core\" and \"Desktop\" editions\r\n```",
      "created_at": "2022-10-01T10:13:30Z",
      "updated_at": "2022-10-01T14:37:33Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "I'm confused, is this a bug or feature request? Also, is it Windows-specific or can it also be used on other systems? ",
      "created_at": "2022-10-01T20:43:26Z",
      "updated_at": "2022-10-01T20:43:26Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "You can use ConvertTo-Html with parameters\r\n```powershell\r\nConvertTo-Html -Body \"<table><tr><td>Test</td><td>Test</td></tr></table>\" `\r\n               -Title 'MyTitle' `\r\n               -Head '<style></style>' | Set-Clipboard\r\n```",
      "created_at": "2022-10-01T21:56:40Z",
      "updated_at": "2022-10-01T22:05:31Z"
    },
    {
      "author": "deafpolygon",
      "author_association": "NONE",
      "body": "```\r\nConvertTo-Html -Body \"<table border=1><tr><td>Test</td><td>Test</td></tr></table>\" `\r\n               -Title 'MyTitle' `\r\n               -Head '<style></style>' | Set-Clipboard\r\n```\r\nwhen pasting into OneNote, MS Word, etc, produces the text\r\n\r\n![image](https://user-images.githubusercontent.com/3342826/193431776-b9bd918a-2fc6-4182-9b4f-08544601e89d.png)\r\n\r\nIn Powershell 5, doing \r\n`\"<table border=1><tr><td>Test</td><td>Test</td></tr></table>\"  | Set-Clipboard -AsHtml`\r\nand pasting into OneNote, MS Word, etc (Office suite) produces this:\r\n\r\n![image](https://user-images.githubusercontent.com/3342826/193431756-843e0d9e-9987-4016-a875-5d46710a17d2.png)\r\n\r\nThis is the effect that I wanted.   ConvertTo-Html does not do this, and in Powershell 7, we are missing `-AsHtml` in the `Set-Clipboard` cmdlet.",
      "created_at": "2022-10-01T23:24:29Z",
      "updated_at": "2022-10-01T23:25:55Z"
    },
    {
      "author": "deafpolygon",
      "author_association": "NONE",
      "body": "\r\n\r\n\r\n\r\n> Clipboard is empty. The switch is there, but it does not work.\r\n\r\nThe clipboard is not empty because you can CTRL+V into any Office application and get the effect.  Using Get-Clipboard on the CLI is going to be empty for some reason after using Set-Clipboard with the `-AsHtml` flag, but it works. ",
      "created_at": "2022-10-01T23:29:05Z",
      "updated_at": "2022-10-01T23:29:05Z"
    },
    {
      "author": "deafpolygon",
      "author_association": "NONE",
      "body": "> I'm confused, is this a bug or feature request? Also, is it Windows-specific or can it also be used on other systems?\r\n\r\nI consider it a bug because Set-Clipboard/Get-Clipboard was taken out of Powershell 6, then added back in Powershell 7 but Set-Clipboard is missing the -AsHtml functionality (which is _not_ the same thing as ConvertTo-Html).",
      "created_at": "2022-10-01T23:48:57Z",
      "updated_at": "2022-10-01T23:48:57Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> CTRL+V into any Office application and get the effect\r\n\r\nTried to paste in wordpad. Then pasted in online Word. Now I understand what you meant. A strange feature for a console shell.",
      "created_at": "2022-10-02T08:49:37Z",
      "updated_at": "2022-10-02T08:49:37Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "For tables, you can just use `ConvertTo-Csv -Delimiter \"`t\"`. It's what I always use and I fail to see how this request provides anything else. ",
      "created_at": "2022-10-02T09:09:47Z",
      "updated_at": "2022-10-02T09:09:47Z"
    },
    {
      "author": "deafpolygon",
      "author_association": "NONE",
      "body": "> For tables, you can just use `ConvertTo-Csv -Delimiter \"`t\"`. It's what I always use and I fail to see how this request provides anything else.\r\n\r\n` ConvertTo-Csv \"<table border=1><tr><td>Test</td><td>Test</td></tr></table>\" -Delimiter \"t\" | Set-Clipboard`\r\n\r\nresults in:\r\n\r\n<img width=\"157\" alt=\"image\" src=\"https://user-images.githubusercontent.com/3342826/193447583-f49a7709-1d28-4068-a317-7e023d25d1e0.png\">\r\n",
      "created_at": "2022-10-02T09:32:11Z",
      "updated_at": "2022-10-02T09:32:11Z"
    },
    {
      "author": "deafpolygon",
      "author_association": "NONE",
      "body": "> > CTRL+V into any Office application and get the effect\r\n> \r\n> Tried to paste in wordpad. Then pasted in online Word. Now I understand what you meant. A strange feature for a console shell.\r\n\r\nIndeed, a strange feature... but immensely useful! Going forward (if Powershell 7 will supersede version 5 at some point in the future), it would be good to retain this functionality.",
      "created_at": "2022-10-02T09:33:53Z",
      "updated_at": "2022-10-02T09:33:53Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@adamm1471, please see https://github.com/PowerShell/PowerShell/issues/14758#issuecomment-777925566 for the status quo; the short of it: as of v7.3.0-preview.8, the clipboard cmdlets in PS Core support _plain text only_, and there are no plans I'm aware of to change that.\r\n",
      "created_at": "2022-10-02T13:42:57Z",
      "updated_at": "2022-10-02T13:42:57Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "Slight offtop: Does PowerShell support non-text clipboards, eg files? It may be a useful feature for pasting into browser, email, etc. if you want to quickly select bunch of files based on some criterion. ",
      "created_at": "2022-10-02T18:42:53Z",
      "updated_at": "2022-10-02T18:42:53Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@dkaszews, only Windows PowerShell does; the linked comment summarizes the non-plain-text parameters supported in Windows PowerShell that PS Core no longer supports. The question is if there's a willingness to bring non-plain-text support back, and to what degree it can be implemented in a platform-agnostic fashion - having platform-specific parameters is generally undesirable.\r\n\r\n",
      "created_at": "2022-10-02T19:21:46Z",
      "updated_at": "2022-10-02T19:21:46Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "@mklement0 Agreed that Windows-only features should not be put in Core, but rather in a separate module, even if one would also be supported by Microsoft. For other platforms, there are two questions: whether it is _possible_ to implement a feature and whether it is _useful_ to implement a feature. For example, copying files into clipboard could be considered less useful on Linux with its less GUI-oriented culture. ",
      "created_at": "2022-10-02T20:24:34Z",
      "updated_at": "2022-10-02T20:24:34Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> Does PowerShell support non-text clipboards\r\n\r\n`Clipboard` class of `System.Windows.Forms` seems could. But this is non-crossplatform. ",
      "created_at": "2022-10-02T20:50:26Z",
      "updated_at": "2022-10-02T20:53:32Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@dkaszews, I guess the determination as to whether it's useful should be based on the capabilities of the native clipboard on a given platform; the absence of a _standard_ GUI shell on Linux makes this problematic, but the linked issue does discuss supporting copying file objects in the context of freedesktop.org-compliant GUI shells.\r\n\r\n@237dmitry, the fact that Windows PowerShell offers such features in and of itself implies that Windows supports such features, and the linked issue shows attempts to use lower-level (.NET) APIs to regain the functionality that PS Core no longer provides (yet).\r\n\r\nHistorically, one of PowerShell's strengths has always been to _transcend_ mere _console_-based functionality; to be the glue among many disparate subsystems, including the GUI world. As much as possible, that strength should extend to _all_ supported platforms.\r\n\r\n",
      "created_at": "2022-10-02T21:09:49Z",
      "updated_at": "2022-10-02T21:10:17Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> @dkaszews, only Windows PowerShell does; the linked comment summarizes the non-plain-text parameters supported in Windows PowerShell that PS Core no longer supports. The question is if there's a willingness to bring non-plain-text support back, and to what degree it can be implemented in a platform-agnostic fashion - having platform-specific parameters is generally undesirable.\r\n\r\nAs one guiding principle, platform specific parameters ARE undesirable    \r\nAs a second principle, PowerShell 7 on Windows should have parity with Windows PowerShell 5.    \r\nAnd when these principles come into conflict they need to be dealt with on a case by case basis. \r\n\r\nI have an open issue with Import-Excel where we do something which relies on the Windows PowerShell functionality, and it is a lot of trouble for a rarely used feature (a command to get a picture from an Excel workbook and save it) to work around it, So I would prefer \"Parity with Windows PowerShell\" to win. Other preferences are available, and valid :-) \r\n\r\n\r\n\r\n",
      "created_at": "2022-10-03T13:32:23Z",
      "updated_at": "2022-10-03T13:32:23Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> PowerShell 7 on Windows should have parity with Windows PowerShell 5.\r\n\r\nI don't understand why the PowerShell team won't just take the necessary code from Windows Powershell and use it? Or is Microsoft just a name, and the project has nothing to do with the corporation?",
      "created_at": "2022-10-03T14:46:49Z",
      "updated_at": "2022-10-03T14:46:49Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> > PowerShell 7 on Windows should have parity with Windows PowerShell 5.\r\n> \r\n> I don't understand why the PowerShell team won't just take the necessary code from Windows Powershell and use it? Or is Microsoft just a name, and the project has nothing to do with the corporation?\r\n\r\nThere are two primary reasons (a) The code is something which cannot be open sourced, for whatever reason and (b) for some reason it was supported in .NET Framework but is not longer available in current .NET (and WHY? is a valid question there). Clipboard support went away in V6 for .NET related reasons, and came back in V7; I think in V7 it may be different code, or possibly just the subset of code which works cross platform . Sometimes teams in Microsoft do re-invent the wheel rather than using something from another group, but I don't think is what is happening here. \r\n\r\n",
      "created_at": "2022-10-03T15:34:46Z",
      "updated_at": "2022-10-03T15:34:46Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I believe the reasoning on why this no longer exists has been answered.  I would also encourage folks to publish a clipboard module to PSGallery whether it's Windows only or, preferably, cross-platform.  The built-in one as part of PS7 is intentionally limited to have it cross-platform.",
      "created_at": "2022-10-03T17:05:38Z",
      "updated_at": "2022-10-03T17:05:38Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-10-05T00:01:22Z",
      "updated_at": "2022-10-05T00:01:22Z"
    }
  ],
  "created_at": "2022-10-01T09:08:41Z",
  "number": 18196,
  "state": "closed",
  "title": "Set-Clipboard is missing -AsHtml",
  "updated_at": "2022-10-05T00:01:23Z"
}