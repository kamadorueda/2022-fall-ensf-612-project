{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6232",
  "author": "lkydev",
  "body": "Steps to reproduce\r\n------------------\r\n\r\n1. Type on an NTFS/ReFS file system:\r\n```\r\nNew-Item -Path '[target]' -ItemType Directory\r\n```\r\n2. Try creating a junction (or symbolic link, substitute with 'SymbolicLink' in the -ItemType parameter)\r\n```\r\nNew-Item -Path '[source]' -Value '[target]' -ItemType Junction\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nThe junction should be created even if the target path contains square bracket characters\r\n\r\nActual behavior\r\n---------------\r\n An error message is resulted:\r\n```\r\nnew-item : Cannot find path '[target]' because it does not exist.\r\nAt line:1 char:1\r\n+ New-Item -Path '[source]' -Value '[target]' -Itemtype Junction\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidOperation: (:) [New-Item], PSInvalidOperationException\r\n+ FullyQualifiedErrorId : InvalidOperation,Microsoft.PowerShell.Commands.NewItem Command\r\n```\r\nNote: the command **can** be made to work with double escapes, but it seems hacky.\r\n```\r\nnew-item -path '[source]' -value \"```[target```]\" -Itemtype Junction\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.1\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.1\r\nOS                             Microsoft Windows 6.1.7601 S\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It is expected behavior because we support wildcards in paths.\r\n\r\nPerhaps we could add `-LiteralPath` in `New-Item`",
      "created_at": "2018-02-24T16:08:18Z",
      "updated_at": "2018-02-24T16:08:18Z"
    },
    {
      "author": "lkydev",
      "author_association": "NONE",
      "body": "1. I had the problem with the '-Value' parameter, not '-Path' or even '-LiteralPath'.\r\n\r\n2. So perhaps we need '-LiteralValue', not '-LiteralPath'.\r\n",
      "created_at": "2018-02-25T03:16:48Z",
      "updated_at": "2018-02-25T03:16:48Z"
    },
    {
      "author": "kwkam",
      "author_association": "CONTRIBUTOR",
      "body": "`-Name` is `-LiteralPath`\r\nThis should work:\r\n```ps1\r\nNew-Item -Name '[target]' -ItemType Directory`\r\nNew-Item -Name '[source]' -Value '[target]' -ItemType Junction\r\n```",
      "created_at": "2018-02-26T03:22:46Z",
      "updated_at": "2018-02-26T03:22:46Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov:\r\n\r\nTo be clear: **wildcard support  _should not apply_  when  _creating new items_.**\r\n\r\n`NewItem`'s **`-Path` paramete**r:\r\n\r\n * is, on the one hand, commendably **already treated as a _literal_** - the new item is created with the specified name as-is.\r\n\r\n    * Similarly, `-Name` is treated literally, but invariably creates the new item in the _current_ location.\r\n \r\n* on the other hand,  the parameter _name_ clashes with the use of `-Path` in cmdlets such as `Get-ChildItem`, where it implies wildcard support, in contrast with the `-LiteralPath` parameter;\r\n**`New-Item` doesn't even _have_ a `-LiteralPath` parameter (arguably, though, it should be added as an _alias_ of `-Path`)**.\r\n\r\n**Similarly, the `-Value` parameter - whose alias name is `-Target` - should _always_ treat a value passed to it as a _literal_, but currently doesn't - and that is the bug.**\r\n\r\n@kwkam: `-Name` is _not_ an alias of `-LiteralPath`, not least because `New-Item` doesn't even have a `-LiteralPath` parameter (see above). Aside from that, the inappropriate treatment of a value passed to `-Value` / `-Target` as a wildcard expression is the same.\r\n\r\n\r\n\r\n",
      "created_at": "2018-02-26T03:38:02Z",
      "updated_at": "2018-02-26T03:46:17Z"
    },
    {
      "author": "kwkam",
      "author_association": "CONTRIBUTOR",
      "body": "Okay I forgot I was using a patched(#5896) build.\r\n\r\n@mklement0 For consistency with other cmdlet's `-Path` parameter, and for the convenient with tab completion, I think `-Path` should stay as is. As for the `-Path` and `-Name`, what if we want to do, for example, ```New-Item -Path '`[path`]/item_[0-9]' -Name '[sub]/dir' -ItemType Directory```? `-Name` can act as `-LiteralPath` in my opinion.",
      "created_at": "2018-02-26T04:33:47Z",
      "updated_at": "2018-02-26T04:33:47Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@kwkam:\r\n\r\n>  I think -Path should stay as is\r\n\r\nI wasn't suggesting that `New-Item`'s `-Path` be changed, I was suggesting that `-LiteralPath` be _added as an alias_ for it.\r\n\r\nThe reason for suggesting that is that `-Path` _already acts the way `-LiteralPath` usually does_.\r\n\r\n_Conceptually_ speaking, `-Name` is a path _component_, and, more precisely, the _leaf_ component - it should never accept a _path_.\r\n\r\nUnfortunately, it currently _does_ accept a path, namely a _relative_ one: either  relative to the path specified in `-Path`, or, in the latter's absence, relative to the _current_ directory.\r\n\r\nAside from that, `-Name` doesn't - and shouldn't - accept wildcard patterns either.\r\n\r\nFor consistency, given that `-Path` and `-Name` don't accept wildcard patterns, neither should `-Value` (a.k.a. `-Target`).\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-02-26T05:32:19Z",
      "updated_at": "2018-02-26T05:40:41Z"
    },
    {
      "author": "Moonsilence",
      "author_association": "NONE",
      "body": "> **Similarly, the `-Value` parameter - whose alias name is `-Target` - should _always_ treat a value passed to it as a _literal_, but currently doesn't - and that is the bug.**\r\n\r\nHey! Googling an Error lead me here. Trying to create a Symlink to a path that contains square brackets using \r\n\r\nNew-Item -Path C:\\my\\path\\cover.jpg -ItemType SymbolicLink -Value C:\\my\\path[1995]\\cover.jpg\r\n\r\n\"not found\"\r\n\r\nHas this bug been fixed yet?",
      "created_at": "2019-01-02T17:14:22Z",
      "updated_at": "2019-01-02T17:14:22Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I see a lot of PRs with @kwkam's work but I'm not sure that specific issue has been completely fixed yet.",
      "created_at": "2019-01-02T17:54:20Z",
      "updated_at": "2019-01-02T17:54:20Z"
    },
    {
      "author": "anthonypants",
      "author_association": "NONE",
      "body": "This is definitely still happening in 6.2.0.",
      "created_at": "2019-04-14T02:26:18Z",
      "updated_at": "2019-04-14T02:26:18Z"
    },
    {
      "author": "JessiAuro",
      "author_association": "NONE",
      "body": "Running 6.2.2 on Linux and found this issue after hours of scratching my head. In my use case in particular it's important the original file names are preserved.\r\n\r\nI tried escaping wildcard characters in the value I pass to `-Value`/`-Target`, but that just results in `ItemNotFoundException`. Re-reading the above, I've found that double-escaping the path first does solve the problem, but that's obviously not something that should be expected of anyone.\r\n\r\nWhat's confusing me the most is from what I read I still don't quite understand why `-Value` isn't presumable literal. The discussion on the above PR seems much more concerned about `-Path` and doesn't seem to at all address that `-Value` should always be literal regardless of how `-Path` is handled.",
      "created_at": "2019-08-06T18:46:30Z",
      "updated_at": "2019-08-06T18:47:00Z"
    },
    {
      "author": "KaXaSA",
      "author_association": "NONE",
      "body": " So I ran some tests because I was having issues with the [square brackets] inside New-Item ... HardLink -**Value** here are the results:\r\n\r\n(updated: Mar 1, 2021)\r\n\r\n**[Powershell 7.2.0-preview.3]**\r\n```\r\nTest 1 | -Value with DOUBLE backticks\r\nCommand: New-Item -Path 'C:\\bfolder001\\file.txt' -ItemType HardLink -Value 'C:\\bfolder001\\``[subfolder A``]\\file.txt' -Force\r\n[Done] Hardlink created: C:\\bfolder001\\file.txt\r\n#####\r\n\r\nTest 2 | -Value with DOUBLE backticks + SUBFOLDER(B)\r\nCommand: New-Item -Path 'C:\\bfolder001\\file.txt' -ItemType HardLink -Value 'C:\\bfolder001\\``[subfolder A``]\\subfolder B\\file.txt' -Force\r\n[Error] Cannot find path 'C:\\bfolder001\\``[subfolder A``]\\subfolder B\\file.txt' because it does not exist.\r\n#####\r\n\r\nTest 3 | -Value with SINGLE backticks\r\nCommand: New-Item -Path 'C:\\bfolder001\\file.txt' -ItemType HardLink -Value 'C:\\bfolder001\\`[subfolder A`]\\file.txt' -Force\r\n[Error] Could not find item C:\\bfolder001\\`[subfolder A`]\\file.txt.\r\n#####\r\n\r\nTest 4 | -Value with SINGLE backticks + SUBFOLDER(B)\r\nCommand: New-Item -Path 'C:\\bfolder001\\file.txt' -ItemType HardLink -Value 'C:\\bfolder001\\`[subfolder A`]\\subfolder B\\file.txt' -Force\r\n[Error] Could not find item C:\\bfolder001\\`[subfolder A`]\\subfolder B\\file.txt.\r\n#####\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0-preview.3\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0-preview.3\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n---\r\n\r\n**[Powershell 5.1]**\r\n```\r\nTest 1 | -Value with DOUBLE backticks\r\nCommand: New-Item -Path 'C:\\bfolder001\\file.txt' -ItemType HardLink -Value 'C:\\bfolder001\\``[subfolder A``]\\file.txt' -Force\r\n[Done] Hardlink created: C:\\bfolder001\\file.txt\r\n#####\r\n\r\nTest 2 | -Value with DOUBLE backticks + SUBFOLDER(B)\r\nCommand: New-Item -Path 'C:\\bfolder001\\file.txt' -ItemType HardLink -Value 'C:\\bfolder001\\``[subfolder A``]\\subfolder B\\file.txt' -Force\r\n[Error] Cannot find path 'C:\\bfolder001\\``[subfolder A``]\\subfolder B\\file.txt' because it does not exist.\r\n#####\r\n\r\nTest 3 | -Value with SINGLE backticks\r\nCommand: New-Item -Path 'C:\\bfolder001\\file.txt' -ItemType HardLink -Value 'C:\\bfolder001\\`[subfolder A`]\\file.txt' -Force\r\n[Done] Hardlink created: C:\\bfolder001\\file.txt\r\n#####\r\n\r\nTest 4 | -Value with SINGLE backticks + SUBFOLDER(B)\r\nCommand: New-Item -Path 'C:\\bfolder001\\file.txt' -ItemType HardLink -Value 'C:\\bfolder001\\`[subfolder A`]\\subfolder B\\file.txt' -Force\r\n[Done] Hardlink created: C:\\bfolder001\\file.txt\r\n#####\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.19041.610\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.19041.610\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n---\r\nCan someone explain why in **PowerShell 7** the New-Item works in Test 1 but doesn't work in Test 2?\r\n\r\n```\r\nTest 1 | -Value with DOUBLE backticks\r\nCommand: New-Item -Path 'C:\\bfolder001\\file.txt' -ItemType HardLink -Value 'C:\\bfolder001\\``[subfolder A``]\\file.txt' -Force\r\n[Done] Hardlink created: C:\\bfolder001\\file.txt\r\n#####\r\n\r\nTest 2 | -Value with DOUBLE backticks + SUBFOLDER(B)\r\nCommand: New-Item -Path 'C:\\bfolder001\\file.txt' -ItemType HardLink -Value 'C:\\bfolder001\\``[subfolder A``]\\subfolder B\\file.txt' -Force\r\n[Error] Cannot find path 'C:\\bfolder001\\``[subfolder A``]\\subfolder B\\file.txt' because it does not exist.\r\n#####\r\n```\r\nAFAIK the only difference here is the extra subfolder, I changed this:\r\n`-Value 'C:\\bfolder001\\``[subfolder A``]\\file.txt'` \r\n\r\nTo:\r\n`-Value 'C:\\bfolder001\\``[subfolder A``]\\subfolder B\\file.txt'`\r\n\r\n---\r\n\r\n\r\nThe script if you want to test/check to see if I did something wrong:\r\n\r\n```\r\n$bFolder = 'C:\\bfolder001'\r\n$subfA  = '[subfolder A]'\r\n$subfB = 'subfolder B'\r\n$txtFile = 'file.txt'\r\n\r\n$backtickS = '`$1'\r\n$backtickD = '``$1'\r\n\r\nfunction Test {\r\n    param (\r\n        [String]$bFolder, [String]$subfA, [String]$subfB, [String]$txtFile, [String]$backtick\r\n    )\r\n\r\n    $fullName = \"$bFolder\\$subfA\\$subfB\\$txtFile\" -replace '\\\\{2,}', '\\' # replace \\\\ (2 or more) with only one \\\r\n    $fullNameEsc = \"$fullName\" -replace \"(\\]|\\[)\", \"$backtick\" # replace [] with `[`] OR ``[``]\r\n    $hardlinkT = \"$bFolder\\$txtFile\" -replace '\\\\{2,}', '\\'\r\n\r\n    Try {\r\n        New-Item -Path $fullName -ItemType File -Force -ErrorAction Stop | out-null\r\n\r\n        \"Command: New-Item -Path `'$hardlinkT`' -ItemType HardLink -Value `'$fullNameEsc`' -Force\" | Write-Host -ForegroundColor Cyan\r\n        New-Item -Path $hardlinkT -ItemType HardLink -Value $fullNameEsc -Force -ErrorAction Stop | out-null\r\n        \"[Done] Hardlink created: $bFolder\\$txtFile\" | Write-Host -ForegroundColor Green\r\n    } Catch {\r\n        \"[Error] $_\" | Write-Host -ForegroundColor Red\r\n    } Finally {\r\n        if ($bFolder -notmatch \"^\\w:\\\\?$\") {\r\n            Remove-Item -Path $bFolder -Recurse #-Confirm\r\n        }\r\n        \"#####\" | Write-Host -ForegroundColor Gray\r\n    }\r\n} #end function\r\n\r\n\"`nTest 1 | -Value with DOUBLE backticks\" | Write-Host\r\nTest $bFolder $subfA $null $txtFile $backtickD\r\n\r\n\"`nTest 2 | -Value with DOUBLE backticks + SUBFOLDER(B)\" | Write-Host\r\nTest $bFolder $subfA $subfB $txtFile $backtickD\r\n\r\n\"`nTest 3 | -Value with SINGLE backticks\" | Write-Host\r\nTest $bFolder $subfA $null $txtFile $backtickS\r\n\r\n\"`nTest 4 | -Value with SINGLE backticks + SUBFOLDER(B)\" | Write-Host\r\nTest $bFolder $subfA $subfB $txtFile $backtickS \r\n\r\n\r\n$PSVersionTable\r\npause\r\n```\r\n\r\nI guess this is related to https://github.com/PowerShell/PowerShell/issues/13136",
      "created_at": "2020-09-21T16:54:23Z",
      "updated_at": "2021-03-02T00:26:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think this could be fixed with #13134 \r\n\r\n/cc @mklement0 ",
      "created_at": "2020-09-23T03:23:33Z",
      "updated_at": "2020-09-23T03:23:33Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "~~Meanwhile you can use `[WildcardPattern]::Escape()`.~~\r\n\r\n~~`New-Item -ItemType SymbolicLink -Name \"link.txt\" -Target ([WildcardPattern]::Escape(\"C:\\asdf [hello].txt\"))`.~~\r\n\r\n\r\nMeanwhile you can use `[WildcardPattern]::Escape()` if your target is already escaped:\r\n\r\n``\r\nNew-Item -ItemType SymbolicLink -Name \"link.txt\" -Target ([WildcardPattern]::Escape(\"C:\\asdf `[hello`].txt\"))\r\n``",
      "created_at": "2021-03-01T18:57:29Z",
      "updated_at": "2021-04-06T06:34:34Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @OctaneTwisted, but this doesn't actually work:\r\n\r\n* The command _seemingly_ succeeds,\r\n* but the resulting symlink is _broken_, because the _escaped_ name is used _verbatim_  as the target path.\r\n\r\n\r\n",
      "created_at": "2021-04-05T18:55:30Z",
      "updated_at": "2021-04-05T18:55:30Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "> Thanks, @OctaneTwisted, but this doesn't actually work:\r\n\r\nYou're right, sorry. You actually need to escape it twice:\r\n`([WildcardPattern]::Escape([WildcardPattern]::Escape('C:\\asdf [hello].txt')))`\r\n\r\nOr get tab completion to help you out when typing out the target path, since it gives you an escaped path ( 'asdf \\`[hello`]\\test.txt' ), and just put that though Escape() once.",
      "created_at": "2021-04-06T06:28:27Z",
      "updated_at": "2021-04-06T06:28:27Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @OctaneTwisted  - good to know (and certainly unexpected; related: #7999).\r\n\r\nAlso worth noting that the workaround will break once the already green-lit proposal to treat a `-Target` argument _literally_ gets implemented: see https://github.com/PowerShell/PowerShell/issues/13136#issuecomment-659053840",
      "created_at": "2021-04-06T07:29:35Z",
      "updated_at": "2021-04-06T07:29:35Z"
    },
    {
      "author": "C8H17OH",
      "author_association": "NONE",
      "body": "Have same problem.\r\n\r\nThree years past and still not solved...\r\n\r\nQuite annoying for me, since I use BitTorrents to download files (whose names usually include '[', ']' and '&'), and use symbolic links to sync them between my disk and OneDrive.\r\n\r\nI'm not familiar with PowerShell, but after reading this topic, as far as I'm concerned, I agree with @mklement0 that\r\n> `-Target` should always treat a value passed to it as a literal, but currently doesn't\r\n\r\n...And it seems much easier to use old `mklink` in cmd, lol. Suck new techniques :)\r\n\r\n----\r\nBy the way, for further reference, my current edition is PowerShell 7.2.1.\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.1\r\nPSEdition                      Core\r\nGitCommitId                    7.2.1\r\nOS                             Microsoft Windows 10.0.22000\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
      "created_at": "2022-02-10T02:20:56Z",
      "updated_at": "2022-02-10T02:26:06Z"
    }
  ],
  "created_at": "2018-02-24T04:29:16Z",
  "number": 6232,
  "state": "open",
  "title": "Creating symbolic links or junctions with New-Item doesn't work if target contains '[' or ']'",
  "updated_at": "2022-02-10T02:26:06Z"
}