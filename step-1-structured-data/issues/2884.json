{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2884",
  "author": "dijitali",
  "body": "When running a PowerShell Job which creates a PSDrive to a remote server using credentials, the job can \"hang\" in the `Running` state even when all actions have been completed.  This is apparently caused by the way the PSCredential object is passed to the job, as illustrated in the script example below.\r\n\r\nIf the PSCredential object is created within the job, it will hang.  However, if the PSCredential object (created in exactly the same way) is passed as a parameter, the job will finish normally.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n_C:\\scripts\\MySimpleJob.ps1_\r\n```powershell\r\nParam(\r\n    [string] $computer,\r\n    [pscredential] $DeploymentCredential\r\n)\r\n\r\nif($DeploymentCredential -eq $null)\r\n{\r\n    $securePass = Get-Content \"C:\\scripts\\passwords\\dijitali.txt\" | ConvertTo-SecureString\r\n    $DeploymentCredential = New-Object PsCredential 'foobar\\dijitali', $SecurePass\r\n}\r\n\r\nNew-PSDrive -Name TargetServer -PSProvider FileSystem -Root ('\\\\' + $computer + '\\c$') -Credential $deploymentCredential | Out-Null\r\n\r\n$testinglog = 'TargetServer:\\temp\\TEST.txt'\r\nif(Test-Path -Path $testinglog)\r\n{\r\n    Remove-Item -Path $testinglog -Force\r\n}\r\n\r\nNew-Item $testinglog -ItemType 'File' -Force\r\n((Get-Date -Format \"yyyy-MM-dd\\THH\\:mm:ss:fff: \") + 'I can write to this file!') | Out-File -FilePath $testinglog\r\n```\r\n\r\nLaunch the above script as a job without passing the $DeploymentCredential parameter and observer it takes roughly 180 seconds to complete:\r\n```powershell\r\n$job = Start-Job -ScriptBlock {\r\n                        C:\\scripts\\MySimpleJob.ps1 -Computer $args[0]\r\n                       }`\r\n          -ArgumentList @( 'MYTESTSERVER')\r\nWait-Job -Job $job\r\n($job.PSEndTime - $job.PSBeginTime).TotalSeconds\r\n# 184.0685204\r\n```\r\n\r\nWhereas if credentials are passed as a parameter, the job completes in a couple of seconds:\r\n```powershell\r\n$SecurePass = Get-Content \"C:\\scripts\\passwords\\dijitali.txt\" | ConvertTo-SecureString\r\n$DeploymentCredential = New-Object PsCredential 'foobar\\dijitali', $SecurePass\r\n\r\n$job = Start-Job -ScriptBlock {\r\n                        C:\\scripts\\MySimpleJob.ps1 -Computer $args[0] -deploymentCredential $args[1]\r\n                       }`\r\n          -ArgumentList @( 'MYTESTSERVER' , $DeploymentCredential)\r\nWait-Job -Job $job\r\n($job.PSEndTime - $job.PSBeginTime).TotalSeconds\r\n# 5.545685\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nJobs execute and change to `Completed` status within a few seconds.\r\n\r\nActual behavior\r\n---------------\r\nIn PowerShell 4.0 the jobs appear to stay in the `Running` state indefinitely.\r\nIn PowerShell 5.1 and 6.0.0-alpha the jobs stay in the `Running` state for ~180 seconds and then change to `Completed`.\r\n\r\nEnvironment data\r\n----------------\r\n\r\nI have tested this on OS versions Server 2008 R2 (PowerShell 4.0 and 5.1) and Server 2012 R2 (PowerShell 5.1 and 6.0.0-alpha).  Behaviour appears to be the same regardless of OS (on both executing server and remote server that is used as a PSDrive).\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-alpha\r\nWSManStackVersion              3.0\r\nBuildVersion                   3.0.0.0\r\nSerializationVersion           1.1.0.1\r\nCLRVersion\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nGitCommitId                    v6.0.0-alpha.13\r\nPSEdition                      Core\r\n\r\n```\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2016-12-14T16:18:25Z",
  "labels": [
    "WG-Engine"
  ],
  "number": 2884,
  "state": "open",
  "title": "PowerShell Jobs hang when using PSDrives with credentials",
  "updated_at": "2016-12-14T22:10:43Z"
}