{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15410",
  "author": "erinlah-ms",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\nThe powershell command line docs suggest that the \"-Command\" option may be used with the \"-args\" option to pass extra arguments to a script block. However, this does not work as described. \r\n\r\nRecommend updating the command line documentation to document the actual behavior of -Command, which does not support an `-args` option.\r\n\r\n```\r\nUsage: pwsh[.exe] [-Login] [[-File] <filePath> [args]]\r\n                  [-Command { - | <script-block> [-args <arg-array>]\r\n                                | <string> [<CommandParameters>] } ]\r\n```\r\n\r\n## Steps to reproduce\r\n\r\n```shell\r\npowershell.exe -Command \"{ echo $args[1] }\" -args one two three\r\n```\r\n\r\n## Expected behavior\r\n\r\nprint `two`\r\n\r\n## Actual behavior\r\n\r\nerror:\r\n\r\n```none\r\naaronla@aaronla-r:scratch$ dotnet pwsh -command \"{ echo $args[1] }\" -args one two three\r\nParserError:\r\nLine |\r\n   1 |  { echo $args[1] } -args one two three\r\n     |                    ~~~~~\r\n     | Unexpected token '-args' in expression or statement.\r\n```\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\naaronla@aaronla-r:PowerApps-CoreServices$ dotnet pwsh -command echo $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.3\r\nPSEdition                      Core\r\nGitCommitId                    7.0.3\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2021-05-18T00:34:40Z",
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "The command needs to be written as a script block, not a string, and the args as an array\r\n\r\n`pwsh  -command { echo $args[1] }  -args one,two,three`\r\n\r\nWhen a string is used in place of the script block, `-args` isn't allowed ,but you can do something like \r\n\r\n`pwsh -c \"dir\"  \"function:\"` \r\n\r\n\r\n\r\n",
      "created_at": "2021-05-14T23:47:44Z",
      "updated_at": "2021-05-14T23:54:18Z"
    },
    {
      "author": "erinlah-ms",
      "author_association": "NONE",
      "body": "@jhoneill No dice for me. Similar error:\r\n\r\n```\r\naaronla@aaronla-r:repos$ powershell -command { echo $args[1] } -args one,two,three\r\nAt line:1 char:19\r\n+ { echo $args[1] } -args one,two,three\r\n+                   ~~~~~\r\nUnexpected token '-args' in expression or statement.\r\nAt line:1 char:25\r\n+ { echo $args[1] } -args one,two,three\r\n+                         ~~~\r\nUnexpected token 'one' in expression or statement.\r\nAt line:1 char:28\r\n+ { echo $args[1] } -args one,two,three\r\n+                            ~\r\nMissing argument in parameter list.\r\n    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException\r\n    + FullyQualifiedErrorId : UnexpectedToken\r\n```\r\n\r\n> When a string is used in place of the script block, -args isn't allowed ,but you can do something like `pwsh -c \"dir\" \"function:\"`\r\n\r\nYes, but then string escaping between shells gets to be a nightmare. I'd like something I can reasonably forward cmd's `%*` args through. E.g.\r\n\r\n```\r\nREM example\r\npowershell.exe -command { & .\\init.ps1; & .\\myscript.ps1 @args } -args %*\r\n```\r\n\r\nObviously the above doesn't work. But how do you fix it?",
      "created_at": "2021-05-15T01:07:56Z",
      "updated_at": "2021-05-15T01:08:57Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "It works -- but it only works if the shell you're running it in is itself powershell/pwsh. The scriptblock handling that allows `-Command` to take an actual scriptblock requires that the shell handing the argument to the executable is powershell or pwsh, which will actively serialize the input to a format that the new shell instance can parse.\r\n\r\nWithout that, everything following `-Command` is assumed to be a single command string/script, so `-Args` is never read as an executable argument, but interpreted as part of the command string.",
      "created_at": "2021-05-15T02:12:29Z",
      "updated_at": "2021-05-15T02:12:29Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "It works in bash:\r\n```\r\npwsh -c '{ echo $args.count; $args[0]; $args -join \" \"}.Invoke(1,2,3)'\r\n```\r\nreturned:\r\n```\r\n3\r\n1\r\n1 2 3\r\n```\r\nIn my opinion the better way is to start executable (`chmod +x`) pwsh-scripts with shebang `#!/usr/bin/pwsh -NoProfile`",
      "created_at": "2021-05-15T07:27:39Z",
      "updated_at": "2021-05-15T07:42:58Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> @jhoneill No dice for me. Similar error:\r\n> I'd like something I can reasonably forward cmd's `%*` args through. E.g.\r\n> \r\n> ```\r\n> REM example\r\n> powershell.exe -command { & .\\init.ps1; & .\\myscript.ps1 @args } -args %*\r\n> ```\r\n> \r\n> Obviously the above doesn't work. But how do you fix it?\r\n\r\nMy brain is having trouble with writing a batch file that runs PowerShell (why not have everything in one PS script)  but this works \r\n\r\n`powershell -noprofile -command \"echo %*\" `\r\n\r\n\r\n",
      "created_at": "2021-05-15T15:09:06Z",
      "updated_at": "2021-05-15T15:09:06Z"
    },
    {
      "author": "erinlah-ms",
      "author_association": "NONE",
      "body": "@jhoneill\r\n\r\n> My brain is having trouble with writing a batch file that runs PowerShell \r\n\r\nA few practical reasons reasons:\r\n\r\n- Out of the box, PowerShell scripts aren't executable. Windows lacks the equivalent of #!, and the default shell verb for PowerShell is to edit it in notepad. Batch scripts are.\r\n- To get consistent behavior from machine to machine, with varying user profiles and permission policies, we need to launch PowerShell with the additional arguments `-ExecutionPolicy Bypass -NonInteractive -NoProfile`. Batch scripts are a handy way to automate this. \r\n- MSbuild lacks a built in task for running PowerShell . But it includes built in support for batch scripts via the Exec task. This makes batch scripts a handy place to add PowerShell to the build.\r\n\r\nHopefully that helps understand our motivations here.\r\n\r\n> but this works: `powershell -noprofile -command \"echo %*\"`\r\n\r\nIt does not work if %* contains quotations. I'm looking for something that can _generally_ forward arguments, not work in some limited specific cases.\r\n",
      "created_at": "2021-05-17T16:33:37Z",
      "updated_at": "2021-05-17T16:33:37Z"
    },
    {
      "author": "erinlah-ms",
      "author_association": "NONE",
      "body": "\r\n@vexx32\r\n\r\n> It works -- but it only works if the shell you're running it in is itself powershell/pwsh\r\n\r\nThanks for the clarification vexx. If that's the intended behavior, that this feature only work from specific shells, then perhaps that's the scope of the bug. Update the documentation to reflect that this only works on bash and powershell, and not via exec / CreateProcess / batch / Windows command line.",
      "created_at": "2021-05-17T16:33:44Z",
      "updated_at": "2021-05-17T16:33:44Z"
    },
    {
      "author": "erinlah-ms",
      "author_association": "NONE",
      "body": "> It works in bash:\r\n> \r\n> ```\r\n> pwsh -c '{ echo $args.count; $args[0]; $args -join \" \"}.Invoke(1,2,3)'\r\n> ```\r\n> \r\n\r\nThanks for the feedback @237dmitry, but I get a very similar error when run on bash. `-Args` doesn't seem to work there either.\r\n\r\nOn bash \r\n```\r\naaronla@aaronla-r:~/scratch$ echo \"${BASH_VERSION}\"\r\necho \"${BASH_VERSION}\"\r\n5.0.3(1)-release\r\naaronla@aaronla-r:~/scratch$ dotnet pwsh -Command '{ echo $args[1] }' -args one two three\r\nParserError:\r\nLine |\r\n   1 |  { echo $args[1] } -args one two three\r\n     |                    ~~~~~\r\n     | Unexpected token '-args' in expression or statement.\r\n```\r\n",
      "created_at": "2021-05-17T16:41:28Z",
      "updated_at": "2021-05-17T16:42:04Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@sdwheeler are you able to transfer this to PowerShell-Docs?",
      "created_at": "2021-05-17T18:12:13Z",
      "updated_at": "2021-05-17T18:12:13Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> but I get a very similar error when run on bash\r\n\r\nIt works, I think string arguments in `.Invoke()` should be in quotation marks:\r\n\r\n![1_000](https://user-images.githubusercontent.com/78153320/118536476-769bf400-b754-11eb-8aae-afd4df55ade0.png)\r\n\r\n",
      "created_at": "2021-05-17T18:13:09Z",
      "updated_at": "2021-05-17T18:13:09Z"
    },
    {
      "author": "erinlah-ms",
      "author_association": "NONE",
      "body": "I've seen some people on the thread claim this works when invoked from powershell, but if you debug the child process, you'll observe that powershell-launching-powershell never passes the -command/-args combo, but instead treats -Command/-Args as an alias for -encodedCommand/-encodedArgs.\r\n\r\nExample repro:\r\n\r\n```\r\naaronla@aaronla-rabbit:echoapp$ cat Program.cs\r\n\u2229\u2557\u2510class Program {\r\nstatic void Main(string[] args) =>\r\n    System.Console.WriteLine(\"Args=\" + System.Environment.CommandLine);\r\n}\r\n\r\naaronla@aaronla-rabbit:echoapp$ dotnet build -nologo\r\n  Determining projects to restore...\r\n  All projects are up-to-date for restore.\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n  echoapp -> C:\\scratch\\echoapp\\bin\\Debug\\net6.0\\echoapp.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:00.78\r\n\r\naaronla@aaronla-rabbit:echoapp$ cd bin\\Debug\\net6.0\\\r\n\r\naaronla@aaronla-rabbit:net6.0$ set path=%cd%;%path%\r\n\r\naaronla@aaronla-rabbit:net6.0$ C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\r\nWindows PowerShell\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nTry the new cross-platform PowerShell https://aka.ms/pscore6\r\n\r\nPS C:\\scratch\\echoapp\\bin\\Debug\\net6.0> powershell -Command { echo \"hello $($args[0])\" } -args world\r\nArgs=C:\\scratch\\echoapp\\bin\\Debug\\net6.0\\echoapp.dll -encodedCommand IABlAGMAaABvACAAIgBoAGUAbABsAG8AIAAkACgAJABhAHIAZwBzAFsAMABdACkAIgAgAA== -encodedarguments PAA/AHgAbQBsACAAdgBlAHIAcwBpAG8AbgA9ACIAMQAuADAAIgAgAGUAbgBjAG8AZABpAG4AZwA9ACIAdQB0AGYALQAxADYAIgA/AD4APABPAGIAagBzACAAVgBlAHIAcwBpAG8AbgA9ACIAMQAuADEALgAwAC4AMQAiACAAeABtAGwAbgBzAD0AIgBoAHQAdABwADoALwAvAHMAYwBoAGUAbQBhAHMALgBtAGkAYwByAG8AcwBvAGYAdAAuAGMAbwBtAC8AcABvAHcAZQByAHMAaABlAGwAbAAvADIAMAAwADQALwAwADQAIgA+ADwATwBiAGoAIABSAGUAZgBJAGQAPQAiADAAIgA+ADwAVABOACAAUgBlAGYASQBkAD0AIgAwACIAPgA8AFQAPgBTAHkAcwB0AGUAbQAuAEMAbwBsAGwAZQBjAHQAaQBvAG4AcwAuAEEAcgByAGEAeQBMAGkAcwB0ADwALwBUAD4APABUAD4AUwB5AHMAdABlAG0ALgBPAGIAagBlAGMAdAA8AC8AVAA+ADwALwBUAE4APgA8AEwAUwBUAD4APABTAD4AdwBvAHIAbABkADwALwBTAD4APAAvAEwAUwBUAD4APAAvAE8AYgBqAD4APAAvAE8AYgBqAHMAPgA= -inputFormat xml -outputFormat text\r\n```",
      "created_at": "2021-05-17T18:13:44Z",
      "updated_at": "2021-05-17T18:13:44Z"
    },
    {
      "author": "erinlah-ms",
      "author_association": "NONE",
      "body": "I propose updating the documentation for -Args to indicate that it is not supported as a command line argument, and only supported as an alias when powershell is invoked using the powershell function/alias.",
      "created_at": "2021-05-17T18:14:29Z",
      "updated_at": "2021-05-17T18:14:29Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> If that's the intended behavior, that this feature only work from specific shells, then perhaps that's the scope of the bug. Update the documentation to reflect that this only works on bash and powershell, and not via exec / CreateProcess / batch / Windows command line.\r\n\r\nFrom [about_powershell.exe](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_powershell_exe?view=powershell-5.1#-command):\r\n\r\n> The Command parameter only accepts a script block for execution when it can recognize the value passed to Command as a ScriptBlock type. This is only possible when running powershell.exe from another PowerShell host. The ScriptBlock type may be contained in an existing variable, returned from an expression, or parsed by the PowerShell host as a literal script block enclosed in curly braces ({}), before being passed to powershell.exe.\r\n\r\n> using the powershell function/alias\r\n\r\nIt's working as the standard executable here, it's just that the invoking PowerShell process is able to translate the scriptblock passed as an argument into an encoded command under the hood.",
      "created_at": "2021-05-17T18:16:30Z",
      "updated_at": "2021-05-17T18:16:30Z"
    },
    {
      "author": "erinlah-ms",
      "author_association": "NONE",
      "body": "> It works, I think string arguments in `.Invoke()` should be in quotation marks:\r\n\r\nMy issue is not with the .Invoke method, it's with the -Args command line argument.",
      "created_at": "2021-05-17T18:17:37Z",
      "updated_at": "2021-05-17T18:17:37Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> I propose updating the documentation\r\n\r\nAlso please note that the repo for that is https://github.com/PowerShell/PowerShell-Docs.\n\n<blockquote><img src=\"https://repository-images.githubusercontent.com/44411511/850abe80-7ca6-11e9-886f-a1b13b275ae0\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/MicrosoftDocs/PowerShell-Docs\">MicrosoftDocs/PowerShell-Docs</a></strong></div><div>The official PowerShell documentation sources. Contribute to MicrosoftDocs/PowerShell-Docs development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2021-05-17T18:17:53Z",
      "updated_at": "2021-05-17T18:17:54Z"
    },
    {
      "author": "sdwheeler",
      "author_association": "COLLABORATOR",
      "body": "This works, as stated in the docs, when it is run from within a PowerShell session.\r\n\r\n```\r\nPS> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\nPS> pwsh -command { echo $args[1] } -args one,two,three\r\ntwo\r\nPS> powershell -command { echo $args[1] } -args one,two,three\r\ntwo\r\n\r\nPS> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.19041.906\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.19041.906\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n\r\n\r\nPS> powershell -command { echo $args[1] } -args one,two,three\r\ntwo\r\nPS> pwsh -command { echo $args[1] } -args one,two,three\r\ntwo\r\nPS>\r\n```",
      "created_at": "2021-05-17T19:17:14Z",
      "updated_at": "2021-05-17T19:17:14Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Given the discussion in the issue, I think the docs already cover this case and have marked it resolved. If there are changes you'd like to see in the documentation, please open an issue in https://github.com/MicrosoftDocs/PowerShell-Docs.\n\n<blockquote><img src=\"https://repository-images.githubusercontent.com/44411511/850abe80-7ca6-11e9-886f-a1b13b275ae0\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/MicrosoftDocs/PowerShell-Docs\">MicrosoftDocs/PowerShell-Docs</a></strong></div><div>The official PowerShell documentation sources. Contribute to MicrosoftDocs/PowerShell-Docs development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2021-05-17T19:39:44Z",
      "updated_at": "2021-05-17T19:39:45Z"
    },
    {
      "author": "erinlah-ms",
      "author_association": "NONE",
      "body": "Thanks for clarifying @rjmholt. The docs make it seem like it's a command line argument, but now I see what you mean -- it's more intended as a _powershell_ function argument to be used from within powershell, and not to be used at the command line / StartProcess / exec.",
      "created_at": "2021-05-18T00:34:40Z",
      "updated_at": "2021-05-18T00:34:40Z"
    }
  ],
  "created_at": "2021-05-14T23:27:22Z",
  "labels": [
    "Resolution-Answered"
  ],
  "number": 15410,
  "state": "closed",
  "title": "Using -Args with -Command does not work as documented",
  "updated_at": "2021-05-18T00:34:40Z"
}