{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4832",
  "author": "bergmeister",
  "body": "Steps to reproduce\r\n------------------\r\n\r\n```powershell\r\nWrite-Verbose $variableThatWasNotAssigned\r\nWrite-Verbose @()\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nSimilar behaviour to `Write-Host` or `Write-Output`: Those 2 cmdlets do not throw when being provided directly or via pipeline with a variable that was not assigned or an empty array.\r\n\r\nActual behavior\r\n---------------\r\n\r\n```powershell\r\n> Write-Verbose $variableThatWasNotAssigned\r\nWrite-Verbose : Cannot bind argument to parameter 'Message' because it is null.\r\nAt line:1 char:15\r\n+ Write-Verbose $variableThatWasNotAssigned\r\n+               ~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidData: (:) [Write-Verbose], ParameterBindingValidationException\r\n    + FullyQualifiedErrorId : ParameterArgumentValidationErrorNullNotAllowed,Microsoft.PowerShell.Commands.WriteVerboseCommand\r\n```\r\n```powershell\r\n> Write-Verbose @()\r\nWrite-Verbose : Cannot convert 'System.Object[]' to the type 'System.String' required by parameter 'Message'. Specified method is not supported.\r\nAt line:1 char:15\r\n+ Write-Verbose @()\r\n+               ~~~\r\n    + CategoryInfo          : InvalidArgument: (:) [Write-Verbose], ParameterBindingException\r\n    + FullyQualifiedErrorId : CannotConvertArgument,Microsoft.PowerShell.Commands.WriteVerboseCommand\r\n\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\n> $PSVersionTable\r\n```\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-beta\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-beta.6-39-g4313dbf19cea94a8d4d368f3b8c2c2acd79ed751\r\nOS                             Microsoft Windows 10.0.15063\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Good find; to boil this down:\r\n\r\n```powershell\r\n# (Effectively) passing *$null* fails.\r\n> Write-Verbose $null\r\nWrite-Verbose : Cannot bind argument to parameter 'Message' because it is null.\r\n...\r\n\r\n# Passing *any array* fails:\r\n> Write-Verbose ('ver', 'bose')\r\nWrite-Verbose : Cannot convert 'System.Object[]' to the type 'System.String' required by parameter 'Message'. Specified method is not supported.\r\n...\r\n```\r\n\r\nIn other words: `Write-Verbose` fails with:\r\n\r\n* anything that evaluates to `$null` \r\n* any array-valued expression\r\n",
      "created_at": "2017-09-13T21:58:04Z",
      "updated_at": "2017-09-13T21:59:39Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "It's consistent with `write-warning` and `write-debug`.  Is there a case where `$null` makes sense that isn't a bug in the script?  Handling an array or object makes sense to me, but perhaps that should be a different parameter for compatibility reasons.",
      "created_at": "2017-09-13T22:22:36Z",
      "updated_at": "2017-09-13T22:22:36Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "If `Write-Host $null` and `Write-Output $null` output nothing, it makes sense to me that `Write-Verbose`, `Write-Warning` and `Write-Debug` should at least not _fail_.\r\n\r\nTo me it make sense for these cmdlets to emit their _prefix only_ when passed `$null`, i.e., `VERBOSE: `, `WARING: ` and `DEBUG: `;  the specific behavior is debatable (perhaps output nothing at all?), but I hope there's agreement that there shouldn't be  an _error_.\r\n\r\n> Is there a case where $null makes sense that isn't a bug in the script?\r\n\r\nAny variable you're trying to write using one of these cmdlets could turn out to be unset, in which case it is better to have prefix-only output / no output rather than an error.\r\n\r\nAs for passing an _array_:\r\n\r\nGiven that PS generally converts arrays to `$OFS`-separated lists when coercing to `[string]`, all `Write-*` cmdlets should do the same - which is the same behavior you get with an advanced function:\r\n\r\n```powershell\r\n> function foo { param([string] $s) \"[$s]\" }; foo $null; foo @(); foo 'foo', 'bar'\r\n[]\r\n[]\r\n[foo bar]\r\n```",
      "created_at": "2017-09-14T00:27:05Z",
      "updated_at": "2017-09-14T00:27:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Currently all  Write-*  cmdlets accept an argument as simple string only - so it is \"by design\" Issue.\r\n\r\nWe could re-targeting the Issue as \"Enhance all Write-*  cmdlets to support object formatting\".\r\n\r\nMaybe it makes sense `Write-Debug \"Array values:\", $array`\r\n\r\n",
      "created_at": "2017-09-14T07:09:54Z",
      "updated_at": "2017-09-14T07:09:54Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "It is definitely an enhancement, but something I think could be useful",
      "created_at": "2017-09-14T14:46:27Z",
      "updated_at": "2017-09-14T14:46:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "So we need RFC :-)",
      "created_at": "2017-09-14T15:11:12Z",
      "updated_at": "2017-09-14T15:11:12Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Should be a short RFC.  My team and the committee will refocus efforts on the RFC repo after we get 6.0.0 out.",
      "created_at": "2017-09-14T16:24:17Z",
      "updated_at": "2017-09-14T16:24:17Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Some initial thoughts:\r\n\r\n`Write-Output`'s behavior differs - it is designed to accept an _array_ - but that difference is probably fine, because its purpose is not to generate _strings for display_ the way that (most) of the other `Write-*` cmdlets do.\r\n\r\nAll the others, which accept a _single_ object, should act consistently, however, and **I think `Write-Host` should be the model here**:\r\n\r\n* It accepts `$null` and an _empty_ array, and treats it the same as an empty string (i.e.: no error, and a blank line by default; no output with `-NoNewline`.\r\n  * It makes sense that `Write-Host`, `Write-Debug`, and `Write-Warning` (all of which currently _break_ with $null / empty-array input) should still print their usual prefix, however (`VERBOSE: `, `DEBUG: `, `WARNING: `). Perhaps it is debatable whether it makes sense for `Write-Error` to accept `$null` / an empty array, but note that _all_ of the cmdlets mentioned do support passing an _empty string_ explicitly.\r\n  * As an aside: Curiously, `Write-Information` doesn't use a prefix when printing to the _console_ (or redirecting to a file), but does so in a _transcript_  (prefix `INFO: `;  see also: #4645)\r\n\r\n* `Write-Host` helpfully stringifies a _collection_ input object by creating a space-separated list by default (unless a different separator is specified with `-Separator`).   \r\n`Write-Host 1, 2 # -> '1 2'`\r\n\r\n  * `Write-Verbose`, `Write-Debug`, `Write-Warning`, and `Write-Error` currently _break_ with array-valued input.\r\n  * `Write-Information` doesn't break, but simply calls `.ToString()` on the collection, which results in unhelpful output:  \r\n`Write-Information -infa Continue 1, 2 # -> 'System.Object[]' !!`\r\n\r\n* `Write-Host`'s input parameter is declared as a value-from-remaining-arguments parameter, which allows passing a collection as individual arguments:  \r\n`Write-Host one       two  # -> 'one two'; same as: Write-Host one, two`\r\n\r\n  * This might be convenient for the other cmdlets too, and the consistency would help.\r\n \r\n\r\n",
      "created_at": "2017-09-14T16:31:35Z",
      "updated_at": "2017-09-14T16:31:35Z"
    },
    {
      "author": "jeffpatton1971",
      "author_association": "NONE",
      "body": "@SteveL-MSFT @TravisEz13 \r\n\r\nThis is still an issue, I've run into this in both older and current versions of PowerShell. The behavior for me is when I pass in array on the pipeline everything works as expected but when passing in the array to the parameter directly. \r\n\r\nhttps://github.com/SchemaModule/PowerShell/issues/17\r\n\r\nWhat I expect to happen\r\nwhen passing an array on the pipeline or via the parameter where a write-verbose is outputting the same, I should not get an error.\r\n\r\nWhat is happening\r\nWhen passing an array on the pipeline no error is thrown from Write-Verbose, but when the array is passed via param, Write-Verbose is throwing an error.\r\n\r\nIn order to validate that I'm not programatically creating a faulty array I have passed a well-known array construct into the function.\r\n\r\n``` powershell\r\n@(1,2,3,4,5) |Get-SchemaProperty -Verbose\r\nVERBOSE: 1\r\nVERBOSE:\r\nVERBOSE: Return all properties\r\nVERBOSE: 2\r\nVERBOSE:\r\nVERBOSE: Return all properties\r\nVERBOSE: 3\r\nVERBOSE:\r\nVERBOSE: Return all properties\r\nVERBOSE: 4\r\nVERBOSE:\r\nVERBOSE: Return all properties\r\nVERBOSE: 5\r\nVERBOSE:\r\nVERBOSE: Return all properties\r\n# JeffreyPatton@FSTNQL1 | 12:08:22 | 09-09-2020 | [23.72GB] D:\\CODE\\Organizations\\SchemaModule\\PowerShell $  [dev \u2261]\r\nGet-SchemaProperty -SchemaDocument @(1,2,3,4,5)\r\nWrite-Verbose : Cannot convert 'System.Object[]' to the type 'System.String' required by parameter 'Message'. Specified method is not supported.\r\nAt D:\\CODE\\Organizations\\SchemaModule\\PowerShell\\schema\\schema.psm1:135 char:19\r\n+     Write-Verbose $SchemaDocument;\r\n+                   ~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidArgument: (:) [Write-Verbose], ParameterBindingException\r\n    + FullyQualifiedErrorId : CannotConvertArgument,Microsoft.PowerShell.Commands.WriteVerboseCommand\r\n```\r\n\r\nThe last comment on this thread was 2yrs ago, and I'm unclear that my issue is DIRECTLY related to this Open issue, but it feels to be rather close.",
      "created_at": "2020-09-09T17:18:38Z",
      "updated_at": "2020-09-09T17:18:38Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@jeffpatton1971 if the proposed changes were implemented, your command would no longer emit an error but it would instead just write `System.Object[]`.  So it would only shift your bug a little.  You want to either pipe to `Write-Verbose` or construct the string you want to display (e.g. `Write-Verbose ($SchemaDocument -join ', ')`)",
      "created_at": "2020-09-09T17:56:01Z",
      "updated_at": "2020-09-09T17:56:01Z"
    },
    {
      "author": "jeffpatton1971",
      "author_association": "NONE",
      "body": "@SeeminglyScience if the proposed changes were implemented I should be seeing system.object[] but that's obviously not happening here. Ultimately what will be passed in is a json array, so simply -join a comma i don't think is a workable solution for me. I'm curious to know if the change was implemented.",
      "created_at": "2020-09-09T18:14:59Z",
      "updated_at": "2020-09-09T18:14:59Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Again, making all `Write-*` cmdlets (other than `Write-Output`) exhibit the same behavior as `Write-Host` strikes me as a reasonable solution:\r\n\r\n```powershell\r\nPS> Write-Host 1,2\r\n1 2  # space-separated list of .ToString()-stringified elements\r\n\r\nPS> Write-Host @()\r\n # no output\r\n\r\nPS> Write-Host $null\r\n # no output\r\n```\r\n\r\nThis is certainly more sensible than _breaking_, and in cases where the `.ToString()` stringification is insufficient, there's always piping via `Out-String`:\r\n\r\n```powershell\r\nPS> Get-Process -Id $PID | Out-String | Write-Verbose -vb\r\nVERBOSE:\r\n NPM(K)    PM(M)      WS(M)     CPU(s)      Id  SI ProcessName\r\n ------    -----      -----     ------      --  -- -----------\r\n      0     0.00      56.30      19.93   45714 \u202613 pwsh\r\n```",
      "created_at": "2020-09-09T18:23:42Z",
      "updated_at": "2020-09-09T18:24:06Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> @SeeminglyScience if the proposed changes were implemented I should be seeing system.object[] but that's obviously not happening here.\r\n> (...)\r\n> I'm curious to know if the change was implemented.\r\n\r\nNah nothing implemented yet.\r\n\r\n> Ultimately what will be passed in is a json array, so simply -join a comma i don't think is a workable solution for me. \r\n\r\nWhat I mean is these examples aren't the same:\r\n\r\n```powershell\r\n$objects | Write-Verbose\r\n\r\n# vs\r\n\r\nWrite-Verbose $objects\r\n```\r\n\r\nThey will act differently even if this is implemented.  While it won't write `System.Object[]` (ty for the correction @mklement0) `-join ' '` doesn't seem like what you want either.  You need to construct the string you want to send to verbose or change up how you're calling it.",
      "created_at": "2020-09-09T19:06:23Z",
      "updated_at": "2020-09-09T19:06:23Z"
    },
    {
      "author": "jeffpatton1971",
      "author_association": "NONE",
      "body": "@mklement0 consistency would be good, as that's what I'm striving for myself as stated in my comment, write-verbose WORKS as intended when I'm passing an array along the pipeline, but it fails when i pass the array via the named parameter. \r\n\r\nIt's possible that the issue I'm experiencing is NOT write-verbose but instead is how the pipeline is passing in the array. In the snip below you can see that when I pass in an array to the function write-verbose fails, but the second example i pass in the same array on the pipeline and write-verbose works.\r\n\r\nI could potentially code around this, or simply OMIT the write-verbose and move on with my life, which I'm not opposed to either, but I'd like to at first see why there is this, what seems to me, glaring difference.\r\n\r\n@SeeminglyScience I don't have the luxury of constructing the array, it's built, i happened to notice this in testing.\r\n\r\n``` powershell\r\nGet-SchemaProperty -SchemaDocument $SchemaDocument.properties.products.items.anyOf -Name dimensions -Verbose\r\nWrite-Verbose : Cannot convert 'System.Object[]' to the type 'System.String' required by parameter 'Message'. Specified method is not supported.\r\nAt D:\\CODE\\Organizations\\SchemaModule\\PowerShell\\schema\\schema.psm1:135 char:19\r\n+     Write-Verbose $PSBoundParameters['SchemaDocument'];\r\n+                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidArgument: (:) [Write-Verbose], ParameterBindingException\r\n    + FullyQualifiedErrorId : CannotConvertArgument,Microsoft.PowerShell.Commands.WriteVerboseCommand\r\n\r\nVERBOSE: dimensions\r\nVERBOSE: Return specific Property\r\n\r\n\r\n$id                  : #/properties/products/items/anyOf/0/properties/dimensions\r\ntype                 : object\r\ntitle                : The dimensions schema\r\ndescription          : An explanation about the purpose of this instance.\r\ndefault              :\r\nexamples             : {@{width=5; height=10}}\r\nrequired             : {width, height}\r\nproperties           : @{width=; height=}\r\nadditionalProperties : True\r\n\r\n\r\n\r\n# JeffreyPatton@FSTNQL1 | 14:02:12 | 09-09-2020 | [23.72GB] D:\\CODE\\Organizations\\SchemaModule\\PowerShell $  [dev \u2261 +0 ~1 -0 !]\r\n$SchemaDocument.properties.products.items.anyOf |Get-SchemaProperty -Name dimensions -Verbose\r\nVERBOSE: @{$id=#/properties/products/items/anyOf/0; type=object; title=The first anyOf schema; description=An explanation about the purpose of this instance.; default=; examples=System.Object[]; required=System.Object[]; properties=; additionalProperties=True}\r\nVERBOSE: dimensions\r\nVERBOSE: Return specific Property\r\n\r\n\r\n$id                  : #/properties/products/items/anyOf/0/properties/dimensions\r\ntype                 : object\r\ntitle                : The dimensions schema\r\ndescription          : An explanation about the purpose of this instance.\r\ndefault              :\r\nexamples             : {@{width=5; height=10}}\r\nrequired             : {width, height}\r\nproperties           : @{width=; height=}\r\nadditionalProperties : True\r\n```",
      "created_at": "2020-09-09T19:06:40Z",
      "updated_at": "2020-09-09T19:07:55Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> @SeeminglyScience I don't have the luxury of constructing the array, it's built, i happened to notice this in testing.\r\n\r\nNot the array, the string you're passing to `Write-Verbose`.  The point is that passing an array as a direct parameter is not the same as piping.  You can pipe, you can do a string join, a foreach, etc. @mklement0's last example in [this comment](https://github.com/PowerShell/PowerShell/issues/4832#issuecomment-689736459) is another thing you can do.",
      "created_at": "2020-09-09T19:13:51Z",
      "updated_at": "2020-09-09T19:13:51Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "To illustrate @SeeminglyScience's point:\r\n\r\n```powershell\r\n# Argument\r\nPS> & { [CmdletBinding()] param([Parameter(ValueFromPipeline)] $foo) process { \"[$foo]\" }  } -foo 1, 2\r\n[1 2]\r\n\r\n# Pipeline\r\nPS> 1, 2 | & { [CmdletBinding()] param([Parameter(ValueFromPipeline)] $foo) process { \"[$foo]\" } }\r\n[1]\r\n[2]\r\n```\r\n\r\nPerhaps #4242 also sheds some light on this.",
      "created_at": "2020-09-09T19:15:55Z",
      "updated_at": "2020-09-09T19:15:55Z"
    },
    {
      "author": "jeffpatton1971",
      "author_association": "NONE",
      "body": "@SeeminglyScience and @mklement0 I could use out-string as that seems to work for my needs, but it feels hack-ish. Especially, i get that there is a difference here, when the pipeline does the write-verbose of the array fine but the named param fails.",
      "created_at": "2020-09-09T19:37:14Z",
      "updated_at": "2020-09-09T19:37:14Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I agree that `Write-Verbose $someArray` and `Write-Verbose $null` _should_ work as-is, namely [as described above](https://github.com/PowerShell/PowerShell/issues/4832#issuecomment-689736459).\r\n\r\nTo be clear: The powers that be need to agree with that, and someone has to implement it.\r\n",
      "created_at": "2020-09-09T19:42:30Z",
      "updated_at": "2020-09-09T19:42:30Z"
    }
  ],
  "created_at": "2017-09-13T19:33:59Z",
  "number": 4832,
  "state": "open",
  "title": "Write-Verbose throws error for unassigned variable or empty array",
  "updated_at": "2020-09-09T19:42:30Z"
}