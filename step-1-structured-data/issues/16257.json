{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16257",
  "author": "iRon7",
  "body": "### Summary of the new feature / enhancement\r\n\r\nIt is a quiet common task to create an object list from a `string` (e.g. a log file) and convert it to a `PSCustomObject` (to e.g. pass it onto a `Csv` file), yet there is no straight forward PowerShell command to this in ones.\r\n\r\nTake as example StackOverflow answer: [Powershell, RegEx, separate a text with colon but do not consider drive letter and date/time](https://stackoverflow.com/a/69513624/1701026):\r\n\r\n**Given:**\r\n```PowerShell\r\n$text = @'\r\nlog1:107:time=08/10/2021 20:38:24\r\nlog2:108:sw!version=3.2.1.0 ()\r\nlog3:109:os_text_encoding=cp1250\r\nlog4:110:!snapshot?!=unset\r\n'@ -split '\\r?\\n'\r\n```\r\n**Conversion:**\r\n```PowerShell\r\n$pattern = '(.*?):([0-9]+):(.*)'\r\n\r\n$text | Where-Object { $_ -match $pattern } | ForEach-Object {\r\n    [PSCustomObject]@{\r\n        Path   = $Matches[1]\r\n        LineNo = $Matches[2]\r\n        Line   = $Matches[3]\r\n    }\r\n}\r\n```\r\nAs `$_ -match $pattern` might return a `Boolean` and due to issue [`#15494` Set `$matches` variable to `$null` when `-match` returns `$false]()`](https://github.com/PowerShell/PowerShell/issues/15494), it is required to test *and* iterate using two statements (`Where`/`ForEach`). Besides it is also required to reassign the resulted items to the object's properties (as shown above) or use e.g. calculated expressions. Using the [`Select-String`](https://docs.microsoft.com/powershell/module/microsoft.powershell.utility/select-string) cmdlet would even result in a more complex syntax.\r\n\r\n\r\n### Proposed technical implementation details (optional)\r\n\r\nThe ingredients for a clean *string-to-object* syntax would just require: the input **string**, a command, and a **regex pattern** where the **regex pattern** could take care of the filter _and_ the property assignment.\r\n\r\n### `Select-Matches` (alias `Match`)\r\n<details>\r\n  <summary>Prototype</summary>\r\n\r\n```PowerShell  \r\nfunction Select-Matches {\r\n    [CmdletBinding(DefaultParameterSetName='File', HelpUri='https://go.microsoft.com/fwlink/?LinkID=2097119')]\r\n    param(\r\n        [ValidateSet('Ordinal','Invariant','Current','','aa','aa-DJ','aa-ER','aa-ET','af','af-NA','af-ZA','agq','agq-CM','ak','ak-GH','am','am-ET','ar','ar-001','ar-AE','ar-BH','ar-DJ','ar-DZ','ar-EG','ar-ER','ar-IL','ar-IQ','ar-JO','ar-KM','ar-KW','ar-LB','ar-LY','ar-MA','ar-MR','ar-OM','ar-PS','ar-QA','ar-SA','ar-SD','ar-SO','ar-SS','ar-SY','ar-TD','ar-TN','ar-YE','arn','arn-CL','as','as-IN','asa','asa-TZ','ast','ast-ES','az','az-Cyrl','az-Cyrl-AZ','az-Latn','az-Latn-AZ','ba','ba-RU','bas','bas-CM','be','be-BY','bem','bem-ZM','bez','bez-TZ','bg','bg-BG','bm','bm-Latn-ML','bn','bn-BD','bn-IN','bo','bo-CN','bo-IN','br','br-FR','brx','brx-IN','bs','bs-Cyrl','bs-Cyrl-BA','bs-Latn','bs-Latn-BA','byn','byn-ER','ca','ca-AD','ca-ES','ca-ES-valencia','ca-FR','ca-IT','ccp','ccp-Cakm-BD','ccp-Cakm-IN','ce','ce-RU','ceb','ceb-Latn-PH','cgg','cgg-UG','chr','chr-Cher-US','ku','ku-Arab-IQ','ku-Arab-IR','co','co-FR','cs','cs-CZ','cu','cu-RU','cy','cy-GB','da','da-DK','da-GL','dav','dav-KE','de','de-AT','de-BE','de-CH','de-DE','de-IT','de-LI','de-LU','dje','dje-NE','dsb','dsb-DE','dua','dua-CM','dv','dv-MV','dyo','dyo-SN','dz','dz-BT','ebu','ebu-KE','ee','ee-GH','ee-TG','el','el-CY','el-GR','en','en-001','en-150','en-AE','en-AG','en-AI','en-AS','en-AT','en-AU','en-BB','en-BE','en-BI','en-BM','en-BS','en-BW','en-BZ','en-CA','en-CC','en-CH','en-CK','en-CM','en-CX','en-CY','en-DE','en-DK','en-DM','en-ER','en-FI','en-FJ','en-FK','en-FM','en-GB','en-GD','en-GG','en-GH','en-GI','en-GM','en-GU','en-GY','en-HK','en-IE','en-IL','en-IM','en-IN','en-IO','en-JE','en-JM','en-KE','en-KI','en-KN','en-KY','en-LC','en-LR','en-LS','en-MG','en-MH','en-MO','en-MP','en-MS','en-MT','en-MU','en-MW','en-MY','en-NA','en-NF','en-NG','en-NL','en-NR','en-NU','en-NZ','en-PG','en-PH','en-PK','en-PN','en-PR','en-PW','en-RW','en-SB','en-SC','en-SD','en-SE','en-SG','en-SH','en-SI','en-SL','en-SS','en-SX','en-SZ','en-TC','en-TK','en-TO','en-TT','en-TV','en-TZ','en-UG','en-UM','en-US','en-US-posix','en-VC','en-VG','en-VI','en-VU','en-WS','en-ZA','en-ZM','en-ZW','eo','eo-001','es','es-419','es-AR','es-BO','es-BR','es-BZ','es-CL','es-CO','es-CR','es-CU','es-DO','es-EC','es-ES','es-GQ','es-GT','es-HN','es-MX','es-NI','es-PA','es-PE','es-PH','es-PR','es-PY','es-SV','es-US','es-UY','es-VE','et','et-EE','eu','eu-ES','ewo','ewo-CM','fa','prs-AF','fa-IR','ff','ff-Latn','ff-Latn-BF','ff-Latn-CM','ff-Latn-GH','ff-Latn-GM','ff-Latn-GN','ff-Latn-GW','ff-Latn-LR','ff-Latn-MR','ff-Latn-NE','ff-Latn-NG','ff-Latn-SL','ff-Latn-SN','fi','fi-FI','fil','fil-PH','fo','fo-DK','fo-FO','fr','fr-BE','fr-BF','fr-BI','fr-BJ','fr-BL','fr-CA','fr-CD','fr-CF','fr-CG','fr-CH','fr-CI','fr-CM','fr-DJ','fr-DZ','fr-FR','fr-GA','fr-GF','fr-GN','fr-GP','fr-GQ','fr-HT','fr-KM','fr-LU','fr-MA','fr-MC','fr-MF','fr-MG','fr-ML','fr-MQ','fr-MR','fr-MU','fr-NC','fr-NE','fr-PF','fr-PM','fr-RE','fr-RW','fr-SC','fr-SN','fr-SY','fr-TD','fr-TG','fr-TN','fr-VU','fr-WF','fr-YT','fur','fur-IT','fy','fy-NL','ga','ga-IE','gd','gd-GB','gl','gl-ES','gn','gn-PY','gsw','gsw-CH','gsw-FR','gsw-LI','gu','gu-IN','guz','guz-KE','gv','gv-IM','ha','ha-Latn-GH','ha-Latn-NE','ha-Latn-NG','haw','haw-US','he','he-IL','hi','hi-IN','hr','hr-BA','hr-HR','hsb','hsb-DE','hu','hu-HU','hy','hy-AM','ia','ia-001','id','id-ID','ig','ig-NG','ii','ii-CN','is','is-IS','it','it-CH','it-IT','it-SM','it-VA','iu','iu-CA','iu-Latn','iu-Latn-CA','ja','ja-JP','jgo','jgo-CM','jmc','jmc-TZ','jv','jv-Latn-ID','ka','ka-GE','kab','kab-DZ','kam','kam-KE','kde','kde-TZ','kea','kea-CV','khq','khq-ML','ki','ki-KE','kk','kk-KZ','kkj','kkj-CM','kl','kl-GL','kln','kln-KE','km','km-KH','kn','kn-IN','ko','ko-KP','ko-KR','kok','kok-IN','ks','ks-Arab-IN','ksb','ksb-TZ','ksf','ksf-CM','ksh','ksh-DE','kw','kw-GB','ky','ky-KG','lag','lag-TZ','lb','lb-LU','lg','lg-UG','lkt','lkt-US','ln','ln-AO','ln-CD','ln-CF','ln-CG','lo','lo-LA','lrc','lrc-IQ','lrc-IR','lt','lt-LT','lu','lu-CD','luo','luo-KE','luy','luy-KE','lv','lv-LV','mas','mas-KE','mas-TZ','mer','mer-KE','mfe','mfe-MU','mg','mg-MG','mgh','mgh-MZ','mgo','mgo-CM','mi','mi-NZ','mk','mk-MK','ml','ml-IN','mn','mn-MN','mn-Mong','mn-Mong-CN','mn-Mong-MN','moh','moh-CA','mr','mr-IN','ms','ms-BN','ms-MY','ms-SG','mt','mt-MT','mua','mua-CM','my','my-MM','mzn','mzn-IR','naq','naq-NA','nb','nb-NO','nb-SJ','nd','nd-ZW','nds','nds-DE','nds-NL','ne','ne-IN','ne-NP','nl','nl-AW','nl-BE','nl-BQ','nl-CW','nl-NL','nl-SR','nl-SX','nmg','nmg-CM','nn','nn-NO','nnh','nnh-CM','nqo','nqo-GN','nr','nr-ZA','nso','nso-ZA','nus','nus-SS','nyn','nyn-UG','oc','oc-FR','om','om-ET','om-KE','or','or-IN','os','os-GE','os-RU','pa','pa-Arab','pa-Arab-PK','pa-Guru','pa-IN','pl','pl-PL','prg','prg-001','ps','ps-AF','ps-PK','pt','pt-AO','pt-BR','pt-CH','pt-CV','pt-GQ','pt-GW','pt-LU','pt-MO','pt-MZ','pt-PT','pt-ST','pt-TL','quz','quz-BO','quz-EC','quz-PE','quc','quc-GT','rm','rm-CH','rn','rn-BI','ro','ro-MD','ro-RO','rof','rof-TZ','ru','ru-BY','ru-KG','ru-KZ','ru-MD','ru-RU','ru-UA','rw','rw-RW','rwk','rwk-TZ','sa','sa-IN','sah','sah-RU','saq','saq-KE','sbp','sbp-TZ','sd','sd-Arab-PK','se','se-FI','se-NO','se-SE','seh','seh-MZ','ses','ses-ML','sg','sg-CF','shi','shi-Latn','shi-Latn-MA','shi-Tfng','shi-Tfng-MA','si','si-LK','sk','sk-SK','sl','sl-SI','sma','sma-NO','sma-SE','smj','smj-NO','smj-SE','smn','smn-FI','sms','sms-FI','sn','sn-Latn-ZW','so','so-DJ','so-ET','so-KE','so-SO','sq','sq-AL','sq-MK','sq-XK','sr','sr-Cyrl','sr-Cyrl-BA','sr-Cyrl-ME','sr-Cyrl-RS','sr-Cyrl-XK','sr-Latn','sr-Latn-BA','sr-Latn-ME','sr-Latn-RS','sr-Latn-XK','ss','ss-SZ','ss-ZA','ssy','ssy-ER','st','st-LS','st-ZA','sv','sv-AX','sv-FI','sv-SE','sw','sw-CD','sw-KE','sw-TZ','sw-UG','syr','syr-SY','ta','ta-IN','ta-LK','ta-MY','ta-SG','te','te-IN','teo','teo-KE','teo-UG','tg','tg-Cyrl-TJ','th','th-TH','ti','ti-ER','ti-ET','tig','tig-ER','tk','tk-TM','tn','tn-BW','tn-ZA','to','to-TO','tr','tr-CY','tr-TR','ts','ts-ZA','tt','tt-RU','twq','twq-NE','tzm','tzm-Latn-MA','ug','ug-CN','uk','uk-UA','ur','ur-IN','ur-PK','uz','uz-Arab','uz-Arab-AF','uz-Cyrl','uz-Cyrl-UZ','uz-Latn','uz-Latn-UZ','vai','vai-Latn','vai-Latn-LR','vai-Vaii','vai-Vaii-LR','ve','ve-ZA','vi','vi-VN','vo','vo-001','vun','vun-TZ','wae','wae-CH','wal','wal-ET','wo','wo-SN','xh','xh-ZA','xog','xog-UG','yav','yav-CM','yi','yi-001','yo','yo-BJ','yo-NG','zgh','zgh-Tfng-MA','zh','zh-Hans','zh-CN','zh-Hans-HK','zh-Hans-MO','zh-SG','zh-Hant','zh-HK','zh-MO','zh-TW','zu','zu-ZA')]\r\n        [ValidateNotNull()]\r\n        [string]\r\n        ${Culture},\r\n\r\n        [Parameter(ParameterSetName='ObjectRaw', Mandatory=$true, ValueFromPipeline=$true)]\r\n        [Parameter(ParameterSetName='Object', Mandatory=$true, ValueFromPipeline=$true)]\r\n        [AllowNull()]\r\n        [AllowEmptyString()]\r\n        [psobject]\r\n        ${InputObject},\r\n\r\n        [Parameter(Mandatory=$true, Position=0)]\r\n        [string[]]\r\n        ${Pattern},\r\n\r\n        [Parameter(ParameterSetName='FileRaw', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='File', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]\r\n        [string[]]\r\n        ${Path},\r\n\r\n        [Parameter(ParameterSetName='LiteralFileRaw', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='LiteralFile', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\r\n        [Alias('PSPath','LP')]\r\n        [string[]]\r\n        ${LiteralPath},\r\n\r\n        [Parameter(ParameterSetName='FileRaw', Mandatory=$true)]\r\n        [Parameter(ParameterSetName='ObjectRaw', Mandatory=$true)]\r\n        [Parameter(ParameterSetName='LiteralFileRaw', Mandatory=$true)]\r\n        [switch]\r\n        ${Raw},\r\n\r\n        [switch]\r\n        ${SimpleMatch},\r\n\r\n        [switch]\r\n        ${CaseSensitive},\r\n\r\n        [Parameter(ParameterSetName='Object')]\r\n        [Parameter(ParameterSetName='File')]\r\n        [Parameter(ParameterSetName='LiteralFile')]\r\n        [switch]\r\n        ${Quiet},\r\n\r\n        [switch]\r\n        ${List},\r\n\r\n        [switch]\r\n        ${NoEmphasis},\r\n\r\n        [ValidateNotNullOrEmpty()]\r\n        [string[]]\r\n        ${Include},\r\n\r\n        [ValidateNotNullOrEmpty()]\r\n        [string[]]\r\n        ${Exclude},\r\n\r\n        [switch]\r\n        ${NotMatch},\r\n\r\n        [switch]\r\n        ${AllMatches},\r\n\r\n        [ValidateNotNullOrEmpty()]\r\n        [System.Text.Encoding]\r\n        ${Encoding},\r\n\r\n        [ValidateRange(0, 2147483647)]\r\n        [ValidateNotNullOrEmpty()]\r\n        [ValidateCount(1, 2)]\r\n        [int[]]\r\n        ${Context})\r\n\r\n    begin\r\n    {\r\n        $outBuffer = $null\r\n        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer))\r\n        {\r\n            $PSBoundParameters['OutBuffer'] = 1\r\n        }\r\n    }\r\n\r\n    process\r\n    {\r\n        $Match = Select-String @PSBoundParameters\r\n        if ($Match) {\r\n            $Match.Matches |ForEach-Object {\r\n                if ($_.Groups.Count -eq 1 -and $_.Name -eq 0) { $_.Value }\r\n                else {\r\n                    $Properties = [Ordered]@{}\r\n                    ForEach ($Group in $_.Groups) {\r\n                        if ($Group.Name -ne 0) { $Properties[$Group.Name] = $Group.Value }\r\n                    }\r\n                }\r\n                [pscustomobject]$Properties\r\n            }\r\n        }\r\n    }\r\n}\r\nSet-Alias -Name Match -Value Select-Matches\r\n```\r\n</details>\r\n\r\nUsing the StackOverflow example, the syntax could just be::\r\n\r\n```PowerShell\r\n$Text |Match '(?<Path>.*?):(?<LineNo>[0-9]+):(?<Line>.*)'\r\n\r\nPath LineNo Line\r\n---- ------ ----\r\nlog1 107    time=08/10/2021 20:38:24\r\nlog2 108    sw!version=3.2.1.0 ()\r\nlog3 109    os_text_encoding=cp1250\r\nlog4 110    !snapshot?!=unset\r\n```\r\n\r\nIn the idea, the control (complete filteringen and assignment) is driven by the regular expression.\r\nPrototype caveats:\r\n- The main group (the complete captured string, named `0`) is omitted\r\n  - To also capture the whole match, you might just name the whole regex expression: `(?<Main>MyPattern)'\r\n- In case of a simple regex (with only a single `0` match) a list of strings is returned\r\n\r\nOther example:\r\n```PowerShell\r\n$Emails =\r\n'email@example.nl;firstname.lastname@hotmail.com',\r\n'John.Doe@fabrikam.com'\r\n$Pattern = '(?<Email>(?<Name>[A-Z0-9._%+-]+)@(?<Domain>(?<Company>[A-Z0-9.-]+)\\.(?<Country>[A-Z]{2,})))'\r\n$Emails |Match -All $Pattern |ConvertTo-Csv\r\n\r\n\"Email\",\"Name\",\"Domain\",\"Company\",\"Country\"\r\n\"email@example.nl\",\"email\",\"example.nl\",\"example\",\"nl\"\r\n\"firstname.lastname@hotmail.com\",\"firstname.lastname\",\"hotmail.com\",\"hotmail\",\"com\"\r\n\"John.Doe@fabrikam.com\",\"John.Doe\",\"fabrikam.com\",\"fabrikam\",\"com\"\r\n```",
  "closed_at": "2021-10-23T17:43:31Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "This isn't really that complicated currently IMO. It's much easier if you just use named regex matches:\r\n\r\n```ps1\r\n$pattern = '(?<Path>.*?):(?<LineNo>[0-9]+):(?<Line>.*)'\r\n\r\n$text |\r\n    Where-Object { $_ -match $pattern } |\r\n    ForEach-Object {\r\n        $matches.Remove(0)\r\n        [PSCustomObject]$matches\r\n    }\r\n```\r\n\r\nA cmdlet might have value for some more complex cases, or just to make the functionality a little more obvious perhaps, but IMO it's not a huge undertaking to do this.",
      "created_at": "2021-10-15T18:22:35Z",
      "updated_at": "2021-10-15T18:22:35Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> yet there is no straight forward PowerShell command to this in ones.\r\n\r\nThere is ConvertFrom-String - very power but it does not ported to Core.",
      "created_at": "2021-10-16T06:26:37Z",
      "updated_at": "2021-10-16T06:26:37Z"
    },
    {
      "author": "ashishsabu",
      "author_association": "NONE",
      "body": "There is ConvertFrom-String - very power but it does not ported to Core.",
      "created_at": "2021-10-16T08:28:54Z",
      "updated_at": "2021-10-16T08:28:54Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "> There is ConvertFrom-String - very power but it does not ported to Core.\r\n\r\nThe idea behind the purpose is a _clean_ and _straight forward_ syntax. `ConvertFrom-String -Delimiter` actually selects the opposite (everything you do ***not*** want) and doesn't support multiple independent delimiters (and named matches) and `ConvertFrom-String -Template*` is very abstract.",
      "created_at": "2021-10-16T15:14:37Z",
      "updated_at": "2021-10-20T17:28:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> `ConvertFrom-String -Template*` is very abstract.\r\n\r\nThis is a common misconception about this cmdlet. It is quite powerful and handy for parsing files. Of course it's not something you can easily use in an interactive session on the fly, but if you process files of the same format over and over again, you should create a template and everything gets easier.",
      "created_at": "2021-10-16T15:34:28Z",
      "updated_at": "2021-10-16T15:34:28Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "@Vexx32,\r\n\r\n> A cmdlet might have value for some more complex cases\r\n\r\nI am not specifically aiming for an additional cmdlet. An existing cmdlet with an additional parameter(set) could also lead to an easier syntax. E.g. for `ConvertFrom-String` , adding a `-Pattern` set (to the already existing sets), like:\r\n```PowerShell\r\nConvertFrom-String\r\n                [-Pattern <String>]\r\n                [-InputObject] <String>\r\n                [-AllMatches] # Optional, to support multiple matches in a single line (as in the $Emails example)\r\n                [<CommonParameters>]\r\n```\r\n\r\nWould expose a **plain and lean syntax** as e.g.:\r\n```PowerShell\r\n$Text |ConvertFrom-String -Pattern '(?<Path>.*?):(?<LineNo>[0-9]+):(?<Line>.*)'\r\n```\r\n",
      "created_at": "2021-10-17T10:42:29Z",
      "updated_at": "2021-10-17T10:42:29Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT already suggested reviving `ConvertFrom-String` and adding _this exact functionality_ [some time ago](https://twitter.com/Steve_MSFT/status/1049029800394780675), - I picked it up at the time, but got stuck trying to port the template parser from the original v4/v5 `ConvertFrom-String` cmdlet - it's quite complicated.",
      "created_at": "2021-10-20T15:58:27Z",
      "updated_at": "2021-10-20T15:58:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> but got stuck trying to port the template parser from the original v4/v5 `ConvertFrom-String` cmdlet - it's quite complicated.\r\n\r\nDid you port from PowerSHell SourceDepot or create from scratch?",
      "created_at": "2021-10-20T16:13:58Z",
      "updated_at": "2021-10-20T16:13:58Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "I wrote a new parser from scratch (although I've previously decompiled and inspected the original `ConvertTo-String` helper classes, I don't know if that's problematic from a license/patent perspective?). \r\n\r\nWhat is \"PowerShell SourceDepot\" @iSazonov?",
      "created_at": "2021-10-21T10:23:57Z",
      "updated_at": "2021-10-21T10:24:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "`source-depot` is a branch in the repo. There is the cmdlet. You can learn original code. If the parser is really useful you could discuss license issue with Steve Lee. ",
      "created_at": "2021-10-22T18:48:54Z",
      "updated_at": "2021-10-22T18:48:54Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "That sounds very useful, but unfortunately I'm unable to locate the source code within the `source-depot` branch - searching through git history only reveals two relevant commits: https://github.com/PowerShell/PowerShell/commit/c8351063ef2580d67022c260378d6c9ffd28f3ba (apparent introduction of Utility module to repo), and https://github.com/PowerShell/PowerShell/commit/0db07f84354ef661f2c1a33676e6346248a40e16 (removal from repo) - but in both cases, it's just a bunch of references added to and removed from a `project.json` file, not the actual `ConvertFromStringCommand.cs` file. \r\n\r\nPerhaps someone with better `git log`-fu can help locate it?",
      "created_at": "2021-10-23T14:17:46Z",
      "updated_at": "2021-10-23T14:17:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@IISResetMe I watched it a long time ago and even then it was different from the modern version. So I think the code too old and it doesn't help. I see Prose project supports now Linux and Mac and this means that there are no obstacles to porting this cmdlet and publish on PowerShellGallery. We can ask in #726",
      "created_at": "2021-10-23T17:33:04Z",
      "updated_at": "2021-10-23T17:33:04Z"
    }
  ],
  "created_at": "2021-10-15T17:25:08Z",
  "number": 16257,
  "state": "closed",
  "title": "`String` >>>Regex>>> `PSCustomObject`",
  "updated_at": "2021-10-23T17:43:33Z"
}