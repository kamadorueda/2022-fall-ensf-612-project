{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3039",
  "author": "ivanakcheurov",
  "body": "<!--\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](../docs/FAQ.md).\r\n- Refer to the [known issues](../docs/KNOWNISSUES.md).\r\n- Fill out the following repro template\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\n`\"Fancy string - $('Hor\"ray'.Replace('\"', '\"\"'))\"`\r\n\r\nExpected behavior\r\n-----------------\r\nOutput: `Hor\"\"ray`\r\n\r\nActual behavior\r\n---------------\r\nOutput: `Hor\"ray`\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.14393.479\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.14393.479\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n\r\nhttp://stackoverflow.com/questions/24242338/powershell-doubled-double-quotes-in-inline-expressions/24346886#24346886\r\n`'\"\"'` outputs `\"\"` so I expect `\"$('\"\"')\"` should also output `\"\"` however it actually outputs `\"`",
  "closed_at": "2018-12-22T06:38:04Z",
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I'm not sure this can be fixed, it would likely break existing scripts, especially because the workaround is to use more quotes.\r\n\r\nMy memory is a little fuzzy, but I believe I tried to fix this issue when rewriting the parser in V3. I don't recall specifics, but my original design was to tokenize the sub-expression during initial scanning of the string, and I think it would have naturally worked as you expect.\r\n\r\nUnfortunately, due to backwards compatibility issues (then and now), we continue to work as it did in V1 and V2.",
      "created_at": "2017-01-24T21:48:14Z",
      "updated_at": "2017-01-24T21:48:14Z"
    },
    {
      "author": "briantist",
      "author_association": "NONE",
      "body": "This looks related to #4543 and [this question on SO](https://stackoverflow.com/q/47877162/3905079).",
      "created_at": "2017-12-18T22:43:45Z",
      "updated_at": "2017-12-18T22:43:45Z"
    },
    {
      "author": "briantist",
      "author_association": "NONE",
      "body": "@lzybkr your previous comment was from almost a year ago. Since then it seems like there are plenty of breaking changes going from Windows PowerShell to  PowerShell Core. \r\n\r\nThis seems like the right time if there ever was one to fix the parser.",
      "created_at": "2017-12-19T16:26:59Z",
      "updated_at": "2017-12-19T16:26:59Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "While we have taken breaking changes, I believe none of them fall under Bucket 1 or 2 in the [breaking change contract](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md).\r\n\r\nI believe this one falls under Bucket 2: Reasonable Gray Area because I do think real world scripts depend on the current behavior.",
      "created_at": "2017-12-19T18:12:18Z",
      "updated_at": "2017-12-19T18:12:18Z"
    },
    {
      "author": "briantist",
      "author_association": "NONE",
      "body": "@lzybkr thanks for that link, it's great to read that sort of guidance about breaking changes.\r\n\r\nBased on the examples given, this does seem to fall under Bucket 2.\r\n\r\nBut based on the description of each bucket, I think it falls under Bucket 3:\r\n\r\n> Change of behavior that customers could have depended on, but probably wouldn't.\r\n\r\nI think it's unlikely that existing scripts would have depended on this behavior. I believe it's far less likely that authors used what is clearly incorrect/unbalanced quotes as a workaround rather than opt to refactor or simplify (use the `-f` operator, pre-assign what was in a sub-expression to a variable, etc.).\r\n\r\nAdditionally even if it does fall under Bucket 2:\r\n\r\n>Judiciously making changes in these type of features require judgement: how predictable, obvious, consistent was the behavior?\r\n\r\nThis behavior is not predictable, obvious, or consistent.\r\n\r\n---\r\nIt would be interesting to take a large corpus of public scripts (PSGallery, TechNet Gallery, GitHub) and test our assumptions; see how much code is out there that depends on this specific parsing behavior (this would be easiest to do if we had a version of the parser with the fix, as we could run each parser against the same code and really quickly catch situations where it breaks).",
      "created_at": "2017-12-19T22:59:05Z",
      "updated_at": "2017-12-19T22:59:05Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I do think the behavior is predictable and consistent, but not necessarily obvious. By consistent, I mean, one could write a specification for how it works, and it would be slightly weird, but easily explained.\r\n\r\n#### Quick attempt at a specification:\r\n\r\nThe parser scans the characters in string, replacing 2 quotes with 1. Nested sub-expressions are processed in a similar manner after this replacement.\r\n\r\n#### Proof that this is correct\r\n\r\nUse the following function to generate deeply nested expressions:\r\n\r\n```powershell\r\nfunction Test-Quotes\r\n{\r\n    param(\r\n        [Parameter(ValueFromPipeline)]\r\n        [ValidateRange(1,16)]\r\n        [int]\r\n        $nestedExprs = 1,\r\n        \r\n        [ValidateRange(1,65536)]\r\n        [int]$quoteCount)\r\n\r\n    process\r\n    {\r\n        if ($null -eq $PSBoundParameters['quoteCount'])\r\n        {\r\n            $quoteCount = [math]::Pow(2, $nestedExprs) \r\n        }\r\n        $prefix = '\"$('\r\n        $suffix = ')\"'\r\n        $actualExpr = \"'\" + ('\"' * $quoteCount) + \"'\"\r\n        $expr = $prefix * $nestedExprs + $actualExpr + $suffix * $nestedExprs\r\n        $val = Invoke-Expression $expr\r\n        \"val: <$val> expr: = $expr\"\r\n    }\r\n}\r\n```\r\n\r\nWith this function, I can validate my explanation above, e.g.:\r\n\r\n```\r\n#23 PS> 1..8 | Test-Quotes\r\nval: <\"> expr: = \"$('\"\"')\"\r\nval: <\"> expr: = \"$(\"$('\"\"\"\"')\")\"\r\nval: <\"> expr: = \"$(\"$(\"$('\"\"\"\"\"\"\"\"')\")\")\"\r\nval: <\"> expr: = \"$(\"$(\"$(\"$('\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"')\")\")\")\"\r\nval: <\"> expr: = \"$(\"$(\"$(\"$(\"$('\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"')\")\")\")\")\"\r\nval: <\"> expr: = \"$(\"$(\"$(\"$(\"$(\"$('\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"')\")\")\")\")\")\"\r\nval: <\"> expr: = \"$(\"$(\"$(\"$(\"$(\"$(\"$('\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"')\")\")\")\")\")\")\"\r\nval: <\"> exprr\n```\r\n\r\nYou can see that the result is always a single quote when there are `n` nested expressions and `2^n` double quotes inside the inner single quoted string.\r\n\r\nSo I think this is predictable and I think my explanation is easily understood. But it's definitely not obvious.\r\n\r\nTesting your assumptions here is hard. You can't really run a large corpus of scripts because most scripts will fail to run properly, or it is difficult to determine if they ran correctly, or if they even hit the code in question.\r\n\r\nYou can analyze a script with the Ast - and that wouldn't require a new parser - but I'm struggling to think of what exactly you would look for - it is difficult to infer intent. At best you could flag scripts that *might* rely on the existing behavior.",
      "created_at": "2017-12-20T00:44:47Z",
      "updated_at": "2017-12-20T01:01:46Z"
    },
    {
      "author": "briantist",
      "author_association": "NONE",
      "body": "@lzybkr yeah I see what you mean now about the explanations of predictable and consistent.\r\n\r\nPart of my proposal for testing scripts is based on my own error of commenting on this issue, which is slightly different than the problem I had in mind ([this question on SO](https://stackoverflow.com/q/47877162/3905079) more specifically, and maybe #4543).\r\nI am assuming (perhaps incorrectly actually) that the root cause is the same in all 3 of these.\r\n\r\nIn the case of the SO question, the issue is with escaped double quotes inside an expandable string inside a sub-expression inside an expandable string, i.e. <code>\"$(\" `\" \")\"</code>.\r\n\r\nThat's what I had in mind when I was thinking about using old vs. new parser because in that case it's not that something valid gets parsed as something else valid, it gets parsed as something invalid and throws an error.\r\n\r\nSo, given my conflating what are possibly 3 separate issues (even if they have the same root cause), I can see why this is more difficult.\r\n\r\nI'd still like to think that this would be fixed at some point instead of being stuck in the codebase forever :confused:",
      "created_at": "2017-12-20T19:23:52Z",
      "updated_at": "2017-12-20T19:23:52Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I can elaborate some on my original design.\r\n\r\nWhen I rewrote the parser, I originally invoked the tokenizer recursively in nested expressions - because that seemed like the obvious way to do it.\r\n\r\nI broke real world scripts, and one case that convinced me I had to mimic how the V1/V2 parser worked.  It was not easy to mimic the old parser *and* keep the extents correct (the old parser did not have extents.) You can see that complexity in the [tokenizer](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/parser/tokenizer.cs), look for `_nestedTokensAdjustment`.\r\n\r\nSo it's safe to say I wanted to fix this problem, I tried to fix it, and I had to do a lot of tricky work that shouldn't have been necessary just to be compatible. Now if I could just remember specifics (like a convincing example) around my exact decision making process, but I can't.\r\n\r\nI'm afraid I don't think much can be done about the quotes.\r\n\r\nThe paren issue could be the same issue, as in, my original implementation would have handled both cases as many people expect, but that doesn't mean we must fix both issues or neither, I'll comment further on that in #4543.\r\n\r\nOne last thing - in my opinion, this issue may be a minor annoyance, but sometimes a simple format string or other alternative not only gets around this issue, but is also easier to understand, and we should all prefer scripts that are easier to understand.",
      "created_at": "2017-12-21T00:44:56Z",
      "updated_at": "2017-12-21T00:44:56Z"
    },
    {
      "author": "briantist",
      "author_association": "NONE",
      "body": "Thank you @lzybkr , I really appreciate the time you've taken to respond and the insight you've provided.\r\n\r\nI agree on your last point especially. If it were not for the SO question I may have never run into the issue as I tend to refactor before that point, \r\n\r\nThe only (somewhat?) valid scenario I can think of where this might come up without being a candidate for refactoring is in certain dynamic code generation scenarios. \r\n\r\nIf you're replacing some tokens with sub-expressions you would expect to be able to do so consistently, generating code that would be considered messy if written by hand, but should run fine nonetheless.\r\n\r\nOtherwise, that was my also my point in that most hand-written scripts would likely have used workaround that involve clearer code that is syntactically correct rather than invalid syntax that somehow works anyway.",
      "created_at": "2017-12-21T21:34:02Z",
      "updated_at": "2017-12-21T21:34:02Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Not sure it's the exact same issue, but this works in bash on macos\r\n\r\n```bash\r\npython -c 'import os; print(os.listdir(\".\"))'\r\n```\r\n```\r\nbash-3.2$ python -c 'import os; print(os.listdir(\".\"))'\r\n['.DS_Store', 'foo', 'foo2']\r\n```\r\n\r\nAnd doesn't work in in powershell\r\n```\r\n  File \"<string>\", line 1\r\n    import os; print(os.listdir(.))\r\n                                ^\r\nSyntaxError: invalid syntax\r\n```\r\n\r\nTo make it work in powershell I need to\r\n\r\n```\r\npython -c 'import os; print(os.listdir(\\\".\\\"))'\r\n```\r\n\r\nWhich doesn't work in bash\r\n\r\n```\r\n  File \"<string>\", line 1\r\n    import os; print(os.listdir(\\\".\\\"))\r\n                                      ^\r\nSyntaxError: unexpected character after line continuation character\r\n```",
      "created_at": "2018-08-14T03:09:38Z",
      "updated_at": "2018-08-14T03:12:03Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@vors: \r\n\r\nIt is not the same issue; your issue is related to how PowerShell rebuilds the command line behind the scenes for invoking external programs.\r\n\r\nUnfortunately, however, that is much more of a real-world problem, as your example shows - I've summarized the current behavior and its problems at https://github.com/PowerShell/PowerShell-Docs/issues/2361 and an example of how problematic the current behavior is even on Windows can be found in [this SO answer](https://stackoverflow.com/a/51773694/45375).\r\n\r\n\r\n",
      "created_at": "2018-09-19T18:31:51Z",
      "updated_at": "2018-09-19T18:31:51Z"
    },
    {
      "author": "UberKluger",
      "author_association": "NONE",
      "body": "I feel I must disagree with all the comments regarding maintaining the status quo to avoid breaking changes. As far I see it, if something is not working properly, it should be fixed. PowerShell has (or should have) a well defined grammar for expandable strings. In particular, the contents of an embedded subexpression should be an independent syntactic context. What goes on inside, stays inside, only the expression's value is relevant. When parsing the enclosing expandable string, the parser should neither see nor affect the enclosed sub-expression (as it processes the enclosing string), just interpolate the returned value (from a completely separate parse tree). Anything else just leads to confusion and unexpected, inexplicable failures (inexplicable by many users as evidenced by the issues raised).\r\n\r\nThe idea that fixing the apparent aberrant behaviour is somehow ***bad*** and should be avoided, lest those relying on it are inconvenienced, is misguided and not even historically consistent. Yes, there are many instances of apparent bugs being allowed to avoid the exterminator but there are also many instances where the end user just had to wear the problems they encountered due to a bug \"fix\". How many web pages were trashed whenever Microsoft&reg; fixed bugs or security holes in IE? How many programs died when a machine's DOS version was upgraded because they relied on undocumented INT 21 calls? Sure, you can argue that such programs shouldn't have relied on undocumented behaviour that could change or disappear with the next release but they worked at the time. And how about all the scripts which rely on the cmdlets which have been deleted from PS7 for \"compatibility reasons\"?\r\n\r\nArguments that it is best to avoid fixing something because it might cause some short term inconvenience are similar to saying that you don't want to get a cast for your broken arm because it's bulky and cumbersome so you'll just make do with a cloth sling. Sure, that kinda works but it's not likely to give the best overall outcome and the inconvenience would have only been temporary but the problems caused by avoiding it could be long term (and compound in unforeseen ways).\r\n\r\nAny programming (or scripting) language should have a well defined grammar leading to predictable (and sensible) behaviour. Further, any construct which is grammatically correct should produce the expected result but one that is not correct should always be flagged as an error. I have read the comments regarding buckets and, to me, any implementation where a grammatically correct expression is flagged as an error while an incorrect one is evaluated (giving a grammatically unspecified result) should be placed in the \"broken beyond all repair and must be replaced\" bucket, despite the existence of a (probably small) number of end users utilising the incorrect behaviour (even if it is consistent and somewhat predictable after experimentation).\r\n\r\nThis is especially true when the fault can manifest due to very small changes in the input. In this issue (and #10413) simply changing the offending string from \"\" to \" \" (or anything other than \"\") results in expected behaviour. This means that end users could have a perfectly functioning script but simply changing a non-empty string in an embedded sub-expression into an empty one results in the script breaking. Thus, \"\" becomes a \"special case\" but only within an embedded subexpression (so only sometimes special). Special cases are something to be avoided, especially in the context of a language ***specification*** (the official documentation). As such, simply providing instructions for how to work around the \"special case\" is not a satisfactory long term solution. (More of a SO handy hint to solve an immediate issue.) \r\n\r\nAs far as programs dying because they relied on undocumented \"features\", any scripts relying on the current \"improper\" behaviour are in the same boat. Using a workaround to get it operational despite the bug is fine but you shouldn't expect that the bug will never be fixed thereby necessitating an update to your script. At the very least, scripts (programs) that rely on unexpected (and also undocumented) behaviour should (and, in a perfect world, would) be written to notify the operator if they detect a change of environment (i.e. newer version of PS) since, as with INT 21, undocumented (or even documented) behaviour can change with a new release. Thus, at a minimum, this behaviour should be ***fully*** documented. Whether or not it is described as \"deprecated\" (i.e. planned to be changed) is a matter for discussion. I would say that it should. Something which should be straightforward but doesn't work as expected should not be just left as it is because there is a (potentially complicated) procedure which can be used to get the desired result.\r\n\r\nJust as there are programs still running on XP that do not work on Win7 (let alone 10/11), support for old scripts which require out of date (or, frankly, just erroneous) behaviour must eventually end. Whether this is a \"rip the band-aid off\" change or a more gradual, hand-holding change, it should still happen. Some might suggest that having option selectable multiple behaviours for PS would provide some mitigation but this sort of thing can lead to an exponentially expanding multiverse of included behaviours probably ending up like the restaurant scene from Monty Python's Meaning of Life (warning, distressing scenes). Perhaps detecting the constructs affected by an impending change (12 months away perhaps) and then giving a (non-terminating) warning which included instructions to aid mitigation (only once per script invocation). Something like this perhaps\r\n```\r\nWARNING: The evaluation of expandable strings enclosing sub-expressions which contain character sequences that\r\nresemble escaped double quotes (`\" or \"\") will be changed in release X.YY. For information\r\nregarding mitigation of the effects of this change, see https://...... To inhibit the display of this message, add\r\nthe value 123456 to the $SeenWarningsList preference variable array.\r\n```\r\nYes, it is a bit of a mouthful but, again, the pain is temporary. As an aside, the idea of a list of individually inhibitable warnings of impending potentially breaking changes (or other useful info) leads to a cmdlet to list them so that the end user can keep up to date with things that might affect their scripts in the future (without searching for \"planned changes to powershell\").\r\n\r\nAnyway, all reasoning and rationalisation aside,\r\n\r\n(TLDR;) I think the issue boils down to this.\r\n\r\n `$('\"\"')` and `\"$('\"\"')\"` should evaluate to the same value but don't, this should be fixed.",
      "created_at": "2021-12-30T10:30:17Z",
      "updated_at": "2021-12-30T10:30:17Z"
    },
    {
      "author": "kevinholtkamp",
      "author_association": "NONE",
      "body": "This might be old, but as you can see, it is still a problem. Hardcore backwards compatibility leads to problems all the times, and are rarely helpful (just look at windows).\r\nIf I really had a script relying on this \"hack\", I would simply not update powershell for this or install an old version side-by-side.\r\n\r\nI can only agree with @UberKluger and say that `$('\"\"')` really should equal `\"$('\"\"')\"`.",
      "created_at": "2022-07-19T19:31:47Z",
      "updated_at": "2022-07-19T19:31:47Z"
    },
    {
      "author": "mubed",
      "author_association": "NONE",
      "body": "Why is this issue closed, when it's still unresolved?",
      "created_at": "2022-11-07T08:07:44Z",
      "updated_at": "2022-11-07T08:08:00Z"
    }
  ],
  "created_at": "2017-01-24T15:52:24Z",
  "labels": [
    "WG-Language",
    "Issue-Discussion",
    "Resolution-Answered"
  ],
  "number": 3039,
  "state": "closed",
  "title": "Two double-quotes in inline expressions",
  "updated_at": "2022-11-07T08:08:00Z"
}