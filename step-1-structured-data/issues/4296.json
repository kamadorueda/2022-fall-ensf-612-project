{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4296",
  "author": "daxian-dbw",
  "body": "Fix #4280\r\n\r\nSummary\r\n----------\r\nThis PR focuses on 3 issues:\r\n1. According to [PowerShell Language Specification Version 3.0](https://www.microsoft.com/en-us/download/details.aspx?id=36389), as quoted: \"_The result is the (possibly empty) unconstrained 1-dimensional array_\", `@(...)` should only return `object[]` array.\r\n1. `@([object[]]$null).GetType()` fails with error `\"You cannot call a method on a null-valued expression.\"`\r\n1. `@([System.Collections.Generic.List[object]]$null)` fails with error `\"Object reference not set to an instance of an object.\"`\r\n\r\nMarked with label `Review-Committee` to review the first issue.",
  "closed_at": "2017-07-25T04:52:31Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Should we add tests for `@($var)` ? It seems absent.",
      "created_at": "2017-07-20T17:48:31Z",
      "updated_at": "2017-07-20T17:48:31Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> the intent of @() is not to create a new array, but to ensure the result is an array\r\n\r\nThe last commit removed the `[object]::ReferenceEquals` check from the test per Jason's comment.\r\nBut the check for `System.Object[]` is kept as we haven't changed the language specification yet.",
      "created_at": "2017-07-25T03:18:35Z",
      "updated_at": "2017-07-25T03:18:35Z"
    }
  ],
  "created_at": "2017-07-19T19:11:01Z",
  "number": 4296,
  "state": "closed",
  "title": "Fix array expression to not return null or throw error",
  "updated_at": "2018-08-16T18:18:22Z"
}