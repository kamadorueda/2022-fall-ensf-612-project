{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6250",
  "author": "bergmeister",
  "body": "## PR Summary\r\n\r\nFixes a subset of #6245\r\nUse new dashed Pester v4 operators for tests in `test\\powershell\\Host`\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [NA] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed - Issue link:\r\n- **Testing - New and feature**\r\n    - [x] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [ ] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2018-03-23T17:48:27Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@bergmeister Please clarify about \"-Not -Throw is deprecated\"\r\n\r\n/cc @it-praktyk @nohwnd",
      "created_at": "2018-02-27T15:41:47Z",
      "updated_at": "2018-02-27T15:41:47Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov  See [here](https://github.com/pester/Pester/releases/tag/4.2.0) (bottom section about breaking changes) about why `Should -Not -Throw` should not be used any more. I agree with your other suggestions.",
      "created_at": "2018-02-27T17:30:49Z",
      "updated_at": "2018-02-27T17:30:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If you means:\r\n>Should -Not -Throw will fail if any exception is thrown. The filters applied on Should -Not -Throw do not apply, because when an exception is thrown, it automatically means that the test should not pass.\r\n\r\nI don't see where said that it is \"deprecated\". My understanding is that with the change we get expected behavior \"Should -Not -Throw _will fail_ if any exception is thrown.\"",
      "created_at": "2018-02-27T18:05:01Z",
      "updated_at": "2018-02-27T18:05:01Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "I would like to hear first what the Pester guys suggest. I read the statement `Should -Not -Throw will fail if any exception is thrown.` first as that the operator itself will fail but you may be right that they changed it to make it actually work. But in general I do not understand why such an assertion is needed at all. Does a Pester test not fail automatically if a terminating or non-terminating error occurs?",
      "created_at": "2018-02-27T18:34:46Z",
      "updated_at": "2018-02-27T18:35:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Pester `Should` like C# [Fact] in Unit tests - we should _explicitly_ see that we expect. Also if we remove `Should` we (can) get noisy output and we have to suppress it by redirection to null.",
      "created_at": "2018-02-27T19:04:06Z",
      "updated_at": "2018-02-27T19:04:06Z"
    },
    {
      "author": "nohwnd",
      "author_association": "NONE",
      "body": "`Should -Not -Throw` is not deprecated. Only the behavior changed. Before, `Should -Not -Throw`was a negation of `Should -Throw`, which allowed it to catch an exception, and still pass the test. So I corrected the behavior to fail if any exception is thrown. And now I think I should make the assertion fail, if `-Not` and any other filter is used.\r\n\r\nThe change of behavior no longer allows for writing tests that say that \"code should not throw a particular exception, but any other exception is fine\". This is a sacrifice I am willing to make, as this kind of test does not make much sense, and is easy to replicate via `Should -Throw`. \r\n\r\nPersonally I would remove `Should -Not -Throw` from the assertion library completely, if it was easily possible. Because as with any other .NET test framework, any exception thrown within a test fails the test. So `Should -Not -Throw` is implied on every line of code that we write, and there is no need to explicitly call it out. In fact it only help us to write incomplete tests, because it looks like we have an assertion, while we should be testing for a result or an effect instead.\r\n\r\n@iSazonov I am not sure, what you mean by your last remark about `Should` and `Fact`. Should is an assertion, but Fact is an attribute that mark a test in xUnit, did you mean Assert?. Anyways removing Should -Not -Throw, shouldn't be a problem. \r\n",
      "created_at": "2018-02-27T21:11:10Z",
      "updated_at": "2018-02-27T21:11:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@nohwnd Thanks for confirmation.\r\nI means that \"Should\" brings useful information - we _explicitly_ see the expected result. If this is not present, the `It` block looks like useless - we can not know that the expected result of code execution should be an exception - the first thought is that we skip anything.",
      "created_at": "2018-02-28T04:00:44Z",
      "updated_at": "2018-02-28T04:00:44Z"
    },
    {
      "author": "nohwnd",
      "author_association": "NONE",
      "body": "@iSazonov \r\n> we explicitly see the expected result.\r\n\r\nI cannot agree with that. That code does not throw is not a good result of a test. A test is supposed to validate that something useful happened. A function can be useful by either returning the correct result, or producing the correct side effect. (eg. adding 1+1 and making sure you got 2, or deleting a file and making sure it's deleted).  \r\n\r\nA function that does not return any value, and does not have any side effects is not useful. (but feel free to prove me wrong :) )\r\n\r\nComing back to our useful functions we can see that pre-requisites for successfully returning the correct value, or producing the correct side-effect is that the code does not throw. So a test that only validates that you did not throw, is just a subset of a more useful test that would test the resulting value, or the resulting side-effect.\r\n\r\n( If this does not make a sense, you can view it from TDD point of view. A test is a mean that allows you to force your code to have the desired behavior. By writing a test that validates that your function returns 2 for input 1 and 1 you are forcing the function to implement some behavior, because by default it does not return anything. BUT by expecting the code to not throw, you are not forcing anything new, because empty functions do not throw by default. )\r\n",
      "created_at": "2018-02-28T09:04:14Z",
      "updated_at": "2018-02-28T09:04:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "This logic is perfectly correct in the general case. We would have to do all our tests that way. But we have _edge_ cases where we are forced to use this \"Should -Not -Throw\". For example, in this PR we say that modified psversiontable can be formatted, but we do not check the exact result - such a test would be unduly complicated, so we just check that there is no exception - then we _trust_ formatting system tests that exist separately. There are other examples when there is output to the console, user interaction, changing system settings (Set-Date). So \"Should -Not -Throw\" helps us to simplify tests if it is justified or impossible otherwise.",
      "created_at": "2018-02-28T18:18:17Z",
      "updated_at": "2018-02-28T18:18:17Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "So what is the outcome? Do I need to revert the removal of `Should -Not -Throw`?",
      "created_at": "2018-03-04T16:18:14Z",
      "updated_at": "2018-03-04T16:18:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@bergmeister Yes, please revert - we'll use this until we make a decision to replace such edge cases with full positive tests.",
      "created_at": "2018-03-05T12:48:47Z",
      "updated_at": "2018-03-05T12:48:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @SteveL-MSFT No feedback long time - can I merge? ",
      "created_at": "2018-03-23T13:24:48Z",
      "updated_at": "2018-03-23T13:24:48Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@daxian-dbw Please tick the corresponding checkbox in the referenced issue 6245",
      "created_at": "2018-03-23T18:07:27Z",
      "updated_at": "2018-03-23T18:07:27Z"
    }
  ],
  "created_at": "2018-02-26T22:50:48Z",
  "number": 6250,
  "state": "closed",
  "title": "Upgrade Pester tests in test\\powershell\\Host folder to dashed v4 syntax",
  "updated_at": "2018-03-23T18:07:28Z"
}