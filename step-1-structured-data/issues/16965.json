{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16965",
  "author": "puxu-msft",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nI built a test C# program with the sample code from https://docs.microsoft.com/en-us/dotnet/api/system.console.treatcontrolcasinput?view=net-6.0\r\n\r\nPasted it below:\r\n\r\n```cs\r\nusing System;\r\n\r\nConsoleKeyInfo cki;\r\n// Prevent example from ending if CTL+C is pressed.\r\nConsole.TreatControlCAsInput = true;\r\n\r\nConsole.WriteLine(\"Press any combination of CTL, ALT, and SHIFT, and a console key.\");\r\nConsole.WriteLine(\"Press the Escape (Esc) key to quit: \\n\");\r\ndo\r\n{\r\n  cki = Console.ReadKey();\r\n  Console.Write(\" --- You pressed \");\r\n  if((cki.Modifiers & ConsoleModifiers.Alt) != 0) Console.Write(\"ALT+\");\r\n  if((cki.Modifiers & ConsoleModifiers.Shift) != 0) Console.Write(\"SHIFT+\");\r\n  if((cki.Modifiers & ConsoleModifiers.Control) != 0) Console.Write(\"CTL+\");\r\n  Console.WriteLine(cki.Key.ToString());\r\n} while (cki.Key != ConsoleKey.Escape);\r\n```\r\n\r\nIt works bad with pwsh:\r\n\r\nCASE 1\r\n\r\n```ps1\r\nPS> [Console]::TreatControlCAsInput = $false\r\nPS> .\\keyecho.exe\r\n# Ctrl+C is handled\r\nPS> [Console]::TreatControlCAsInput\r\nTrue\r\n```\r\n\r\n```ps1\r\nPS> [Console]::TreatControlCAsInput = $false\r\nPS> & .\\keyecho.exe\r\n# Ctrl+C is handled\r\nPS> [Console]::TreatControlCAsInput\r\nTrue\r\n```\r\n\r\nCASE 2\r\n\r\n```ps1\r\nPS> [Console]::TreatControlCAsInput = $false\r\nPS> Start-Process .\\keyecho.exe -Wait -NoNewWindow\r\n# Ctrl+C exits the program!\r\nPS> [Console]::TreatControlCAsInput\r\nFalse\r\n```\r\n\r\n```ps1\r\nPS> [Console]::TreatControlCAsInput = $true\r\nPS> Start-Process .\\keyecho.exe -Wait -NoNewWindow\r\n# Ctrl+C is handled\r\n```\r\n\r\nI think:\r\n\r\n- `Console.TreatControlCAsInput` should be reset after case 1. We've done with the inner program, right?\r\n- It's okay to keep the behavior on case 2, but could we make it more intuitive?\r\n\r\n\r\n### Expected behavior\r\n\r\n```console\r\nCASE 1\r\n\r\n\r\nPS> [Console]::TreatControlCAsInput = $false\r\nPS> .\\keyecho.exe\r\n# Ctrl+C is handled\r\nPS> [Console]::TreatControlCAsInput\r\nFalse\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nCASE 1\r\n\r\n\r\nPS> [Console]::TreatControlCAsInput = $false\r\nPS> .\\keyecho.exe\r\n# Ctrl+C is handled\r\nPS> [Console]::TreatControlCAsInput\r\nTrue\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.1\r\nPSEdition                      Core\r\nGitCommitId                    7.2.1\r\nOS                             Microsoft Windows 10.0.19044\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [],
  "created_at": "2022-03-07T09:28:27Z",
  "labels": [
    "Issue-Question",
    "WG-Interactive-Console",
    "Needs-Triage"
  ],
  "number": 16965,
  "state": "open",
  "title": "Console.TreatControlCAsInput is acting weird",
  "updated_at": "2022-03-07T13:15:25Z"
}