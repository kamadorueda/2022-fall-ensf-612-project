{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4394",
  "author": "iSazonov",
  "body": "Continue #4216 to discuss improving the discoverability of PowerShell variables.\r\n\r\nProblem: It is hard for users to discover PowerShell automatic (system) variables and get help (their description).\r\n\r\nIdias:\r\n1. Enhance cmdlets to provide better discoverability, tab-completion, etc.\r\n1.1. Get-Variable -AutomaticVariable/-PowerShell/-System/-Special  / -PreferenceVariable\r\n1.2 Get-Help -AutomaticVariable/-SpecialVariable / -PreferenceVariable\r\n2. ~~Add new namespace $pspref or $psvar~~\r\n3. Enhance the  variable:  provider with additional properties  IsAutomatic and IsPreference.\r\n",
  "closed_at": "2021-08-25T04:12:22Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Also enhance the `variable:` provider with additional property `IsAutomatic`",
      "created_at": "2017-08-01T18:38:09Z",
      "updated_at": "2017-08-01T18:38:09Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT: \r\n\r\nGood idea; while we're at it: `IsPreference` would be useful too.\r\n\r\nProgrammatic discovery of preference variables has been suggested before, on [uservoice.com](https://windowsserver.uservoice.com/forums/301869-powershell/suggestions/17407222-powershell-and-collections-in-particular-collect).\r\n ",
      "created_at": "2017-08-12T03:48:31Z",
      "updated_at": "2017-08-12T03:48:31Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I still think the introduction of namespaces is worth considering, given that, with the current approach of sticking all automatic / preference variables in the same namespace as user-defined variables, any introduction of new automatic / preference variables comes with the risk of breaking existing scripts that happen to use variables of the same name.\r\n\r\nTechnically, a single namespace such as `$ps:` would suffice, containing the union of preference variables and automatic variables, including the proposed platform-abstracted \"environment\" variables (PS-internal variables that provide cross-platform information about the environment, such as the location of the directory for temporary files).\r\n\r\nGiven how namespace notation currently works, an underlying `ps:` drive would be required, though a conceivable departure could be to instead use `Get-Variable` with switches such as the new ones proposed in the initial post for filtered discovery of _all_ variables, including those in the `$ps:` namespace.\r\n\r\n\r\n\r\n",
      "created_at": "2017-08-12T04:00:16Z",
      "updated_at": "2017-08-14T14:09:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Internally we use term [AutomaticVariables](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/SpecialVariables.cs#L250) in different way then [public](https://docs.microsoft.com/en-us/powershell/module/Microsoft.PowerShell.Core/about_Automatic_Variables?view=powershell-5.1).\r\n\r\nShould we use `SpecialVariables` that is used internally in public too?\r\n",
      "created_at": "2017-08-14T05:25:31Z",
      "updated_at": "2017-08-14T05:25:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We have 7 well-known [preference variable](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/SpecialVariables.cs#L350) - I think there's no point in highlighting them.",
      "created_at": "2017-08-14T05:33:04Z",
      "updated_at": "2017-08-14T05:33:04Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Re _automatic_ variables: While this discrepancy is unfortunate, _automatic variable_ is a well-established and documented user-facing term. \r\n\r\nIt sounds to me that the way to resolve this is to make a note in the source code or change the variable name(s), such as to `AutomaticEngineVariable`.\r\n\r\nRe _preference_ variables:\r\n\r\nSimilarly, the `about_preference_variables` help topic lists many more preference variables than the 7 named as such in the source code:\r\n\r\n```powershell\r\n> (Get-Help about_preference_variables) -split '\\r?\\n' | Select-String '^\\s+(\\$\\w+)\\s{2,}' | % { (-split $_)[0] }\r\n```\r\n\r\n```none\r\n$ConfirmPreference\r\n$DebugPreference\r\n$ErrorActionPreference\r\n$ErrorView\r\n$FormatEnumerationLimit\r\n$InformationPreference\r\n$LogCommandHealthEvent\r\n$LogCommandLifecycleEvent\r\n$LogEngineHealthEvent\r\n$LogEngineLifecycleEvent\r\n$LogProviderLifecycleEvent\r\n$LogProviderHealthEvent\r\n$MaximumAliasCount\r\n$MaximumDriveCount\r\n$MaximumErrorCount\r\n$MaximumFunctionCount\r\n$MaximumHistoryCount\r\n$MaximumVariableCount\r\n$OFS\r\n$OutputEncoding\r\n$ProgressPreference\r\n$PSDefaultParameterValues\r\n$PSEmailServer\r\n$PSModuleAutoLoadingPreference\r\n$PSSessionApplicationName\r\n$PSSessionConfigurationName\r\n$PSSessionOption\r\n$VerbosePreference\r\n$WarningPreference\r\n$WhatIfPreference\r\n```\r\n\r\nOn a side note: `$OFS` is currently documented as _both_ an automatic and a preference variable, whereas I think it should only be the latter - see https://github.com/PowerShell/PowerShell-Docs/issues/1566\r\n\r\nI'll address the need for discoverability of preference variables separately.\r\n\r\n\r\n",
      "created_at": "2017-08-14T13:10:54Z",
      "updated_at": "2017-08-14T13:10:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">Similarly, the  about_preference_variables  help topic lists many more preference variables than the 7 named as such in the source code\r\n\r\nIt's a misleading internal/public terminology again.",
      "created_at": "2017-08-14T14:11:48Z",
      "updated_at": "2017-08-14T14:11:48Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "As for the need for programmatic discoverability of automatic / preference variables:\r\n\r\nPowerShell (as well as .NET) has a strong tradition of \"self-awareness\" through reflection.\r\n\r\n_Generally_, you'd want to know about special attributes / behavior of variables: whether a variable is defined by PowerShell and whether a variable modifies PowerShell's behavior is certainly worth knowing about.\r\n\r\n  * This is especially true currently, given that these variables live in the same namespace as _user_ variables, but the argument applies in general.\r\n\r\n  * Again, my vote is to move these variables into a _separate_ namespace, while grandfathering in the current variables for backward compatibility.\r\n\r\nIn _particular_, with respect to _preference variables_, #4568 shows why a programmatic way to discover all preference variable is important (though I wish this particular need would go away via a _built-in_ way to honor all caller preference-variable values in the context of functions inside script modules).\r\n",
      "created_at": "2017-08-14T14:53:25Z",
      "updated_at": "2017-08-14T14:53:25Z"
    },
    {
      "author": "DTW-DanWard",
      "author_association": "NONE",
      "body": "@mklement0  My 2 cents, if it helps: many years ago I created a PowerShell module framework for a client and ran into this issue.  The environment was *very* heterogeneous; OK, not cross-OS like Core but every flavor of Windows that supported PS v1 and above.  Using a separate namespace - an in-memory-only ```$psf:``` drive - solved the problem perfectly:\r\n - clean abstraction separate from all other types of PS variables, 3rd party modules, user-specific settings, etc.\r\n - good discoverability: I created a function to walk the ```$psf:``` tree and output all variables and values; you could also manually walk the tree if you wanted using tab completion.\r\n - easy to override per machine if necessary: user could run ```$psf:Folders.Temp = <whatever>``` in the shell to update for just that session or update their $profile to permanently override the value set when bootstrapping.\r\n- easy to customize and maintain. The tree was basically a structure of hash tables so it worked well in PowerShell, including tab completion.  The tree could be as deep and / or wide as needed.\r\n\r\n All that said: this solution did (and still does) run on 100+ machines, not the millions you have to consider.  Plus there is backward compatibility to think about.  But if you are interested in making a fresh start with Core, a separate namespace / settings drive would be nice. You could also add some structure, improving organization and discoverability, i.e. ```$psf:Folders.Home``` ,  ```$psf:Folders.Temp``` , ```$psf:Preferences.Verbose``` , etc.\r\n",
      "created_at": "2017-09-03T19:26:05Z",
      "updated_at": "2017-09-03T19:26:05Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @DTW-DanWard - good stuff. So you created an in-memory `$psf:` drive by implementing your own provider?\r\n\r\nI agree that a separate namespace makes sense - and PowerShell has the sophistication in terms of features to pull it off (unlike other shells). \r\nThe backward-compatibility issue could be solved by continuing to surface the defined-so-far PS-controlled variables in the user-variable namespace while also exposing them via the new namespace.",
      "created_at": "2017-09-04T02:25:27Z",
      "updated_at": "2017-09-04T02:25:27Z"
    },
    {
      "author": "DTW-DanWard",
      "author_association": "NONE",
      "body": "Yep @mklement0 a custom provider. It was a great way to provide a default location for settings that could be quite different based on the machine: dev machines vs. servers, web servers vs. databases vs. <whatever>, dev environment vs. UAT vs prod, etc.  And even though I typically only used it with machine-level settings (not app-level), it grew quickly enough that I still had to organize the contents into 'folders': ```$psf:Folders```, ```$psf:Applications```, ```$psf:Applications.Database```, ```$psf:Applications.Database.SqlCmd = <path>```, etc.\r\n ",
      "created_at": "2017-09-04T14:41:10Z",
      "updated_at": "2017-09-04T14:41:10Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "I really don't like the idea of creating namespaces for this stuff. Please don't do that.\r\n\r\n1. There are a lot of automatic variables already\r\n2. There are a lot of preference variables already\r\n3. PowerShell has already reserved for itself \"variables starting with PS\"\r\n4. Modules can add variables which **they** consider \"preference\" variables (e.g. `$PSEmailServer` _ought_ to be a preference variable exported by the `Microsoft.PowerShell.Utility` module where Send-MailMessage is)\r\n\r\nFor all of these reasons, we cannot really \"move\" these things. We need to just annotate them where they already are.\r\n\r\nCould we not just add \"Automatic\" (and even \"Preference\") to the `ScopedItemOptions` enumeration and set it accordingly?  Certainly it would be _much easier_ to do that than to add properties to the variable class or implement a new provider or namespace.",
      "created_at": "2018-10-06T03:46:47Z",
      "updated_at": "2018-10-06T03:48:04Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Re 1. and 2.: The proposal is to grandfather those in and parallel them in the new namespace - and define future automatic / preference variables only in the new namespace.\r\n\r\nRe 3: That currently applies to only 20% of the automatic / preference variables. A separate namespace is a conceptually cleaner and more robust solution.\r\n\r\nRe 4: Modules - if they have preference variables at all - will have to find their own mechanism, which could be prefix-based; `$PSEmailServer` seems to be the only current preference variable that is specific to one cmdlet as opposed to pertaining to the session (scope) as a whole or to the engine.\r\n\r\n\r\n\r\n",
      "created_at": "2018-10-09T03:11:16Z",
      "updated_at": "2018-10-09T03:11:16Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "@mklement0 your response to 3 is a terrible point: Separate things are conceptually cleaner, but even the ones we have don't get used/followed properly, so let's create another?\r\n\r\nWould your new ... thing ... be scoped? All of those preference variables are currently _scoped_, and if you copy them out of the variable drive, the new thing still needs to have variable scope, which would mean your proposed `$ps:EmailServer` would be introducing people to the dreaded double-drive syntax: `$ps:global:Email`\r\n\r\nAdding a double-implementation of core preference variables sounds like a performance hit, and a HUGE source of confusion. I mean, even if it could be implemented without a performance hit, you'd still have the original variables floating around, and the syntax for the new ones would be confusing! \r\n\r\nYou would be complicating script analyzer rules and code reviews _for everyone_  --for ever.\r\n\r\nI think the whole idea is even worse, if it's implemented in a way that's engine-specific and only PowerShell itself can create variables in it. In that scenario you're would be creating a lot of code and architecture to basically just replace an `about_` doc",
      "created_at": "2018-10-09T12:48:15Z",
      "updated_at": "2018-10-09T12:48:43Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Maybe something simpler is in order?\n\n`$_` is a *well-known* automatic variable. Perhaps it's worth setting a convention that automatic variable names should all start with `$_` (so we'd end up with things like `$_ErrorActionPreference`, for example.\n\nRegarding issues with changed names, perhaps it would be wise to simply have the existing automatic variable names point to the new ones by reference (can that be done?). This way, if someone wants to use one of the old names, they're just overriding the for-legacy-purposes reference.\n\nGiven that older versions of PS are still in fairly widespread use, we would probably need to put together a PSSA warning or something about scripts developed for older versionsusing the new vars.\n\nA single character change like this would be an easy fix, as well - a simple regex replace like `-replace '(?<=$)_(?=[^\\s|\\n])'` could be used to turn them back into their backwards-compatible versions. Then perhaps just warn against use of the older names for legacy reasons, etc., Etc.\n\nThere isn't a perfect solution here, because this design wasn't really built with expansion in mind, at least in terms of the number of automatic variables PS uses. They were more brought in as needed. Resulting in strangely semi-standardized things with grey areas. \n\nCase in point: `$ProgressPreference`\nIt's not an actual stream like the others, there's really only one cmdlet that utilises it, and as a result it is often mishandled by both users and the engine (cmdletbinding doesn't seem to affect it quite the same as the other preference vars, for example).\n",
      "created_at": "2018-10-09T14:04:31Z",
      "updated_at": "2018-10-09T14:04:31Z"
    },
    {
      "author": "RichardSiddaway",
      "author_association": "NONE",
      "body": "I don't see the benefit of $_xxx.  if you keep the old variable around to avoid breaking tons of code you'll increase the confusion level.",
      "created_at": "2018-10-09T14:28:14Z",
      "updated_at": "2018-10-09T14:28:14Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Agreed. But I think that although I would _like_ to just change the names, somehow I doubt that that is a solution that can be accepted at this point in time.",
      "created_at": "2018-10-09T14:34:31Z",
      "updated_at": "2018-10-09T14:34:31Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@Jaykul:\r\n\r\n> even the ones we have don't get used/followed properly, so let's create another?\r\n\r\nYes, so as to resolve the existing inconsistencies, once and for all.\r\nIn a separate namespace, there is no need for a prefix, so that `$PSSessionConfigurationName` could become `$ps:SessionConfigurationName` for instance (I'm leaving aside the question of whether preference vs. automatic variables should occupy distinct namespaces).\r\n\r\nThe payoff:\r\n\r\n* First and foremost: _No more name collisions on introducing new preference / automatic variables_ - no one else can create variables in that namespace.\r\n* No inconsistently applied prefixes.\r\n* Simple, focused discoverability - see scopes discussion below.\r\n\r\n> Adding a double-implementation of core preference variables [...] and a HUGE source of confusion.\r\n\r\nConfusion after transitioning to a different, better solution is unavoidable - it's the price of improving things while maintaining backward compatibility.\r\nProper documentation and PSSA rules would ease the pain of the transition.\r\nIdeally the rules would be silenced for code explicitly tagged for compatibility with older versions and, conversely, code with no backward-compatibility burden would trigger a warning when using the legacy names.\r\n\r\n> I think the whole idea is even worse, if it's implemented in a way that's engine-specific and only PowerShell itself can create variables in it.\r\n\r\nConsidering preference and automatic variables the domain of PowerShell exclusively makes sense to me: they are engine- and whole-session/scope-related (outlier `$PSEmailServer` notwithstanding).\r\n\r\nAs an aside: @vexx32, with respect to `$ProgressPreference` are you referring to the fact that there's no corresponding `-ProgressAction` _common parameter_? In what way is it mishandled (should a new issue be created)?\r\n\r\n---\r\n\r\n> Would your new ... thing ... be scoped? \r\n\r\nGood point - yes, it would have to be scoped.\r\n\r\nThat concept is currently not a part of the PS provider framework as such, but it could be implemented via a _dynamic_ `-Scope` parameter - though perhaps that isn't necessary, given that that wasn't even done for the `Variable` provider in its current form: `Get-Item variable:foo` only ever gives you the variable _visible or defined_ in the _current_ scope, i.e., the _effective_ value.\r\n\r\nThus, perhaps it is sufficient to integrate with `Get-Variable` for the full functionality, just as `Get-Variable` is already needed for full access to existing variables.\r\n\r\nSpecifically (note: I'm floating ideas here - many details would have to be worked out, and I'm aware that this is a big change):\r\n\r\nThe `Variable` provider could be made _hierarchical_ (2-level hierarchy) to support _containers_ that effectively act as _sub-namespaces_ of the current all-in-one variable namespace.\r\n\r\nExpressed in namespace notation, that would mean:\r\n\r\n```powershell\r\nGet-Item variable::foo  # user-space variable $foo, as before\r\nGet-Item variable::ps:OutputEncoding  # PS-maintained $ps:OutputEncoding preference variable.\r\n```\r\n\r\nNote that I'm proposing `:` as the provider's path separator here, which would be a departure from the existing providers (note that the trying to support both `\\` and `/` as the universal separators is [already problematic](5536#issuecomment-346917545)).\r\n\r\nNow, for namespace notation `$ps:OutputEncoding` to be consistent with current usage, that would require defining a PS _drive_ as follows, and analogously for all other sub-namespaces:\r\n\r\n```powershell\r\nNew-PSDrive ps -Provider Variable -Root ps  # ps: drive with direct access to all $ps:... vars.\r\n```\r\n\r\nOn the plus side, this would make the preference variables that are in effect in a given scope discoverable with `Get-ChildItem ps:`, for instance (analogous to `Get-ChildItem variable:`)\r\n\r\nIf proliferation of drives is a concern, perhaps variable-provider containers could be special-cased and be surfaced _implicitly_ as \"drives\" in the context of namespace notation.\r\n\r\nWhile PowerShell itself would exclusively claim the `ps` container name (and potentially others, TBD), this would give user code the ability to create variable namespaces too (though name collisions are definitely possible, including with custom _filesystem_ drives).\r\n\r\nAs for integration into `Get-Variable` (and the other `*-Variable` cmdlets): The `-Name` parameter could be made to accept _paths_:\r\n\r\n```powershell\r\nGet-Variable ps:OutputEncoding # or Get-Variable -Namespace ps OutputEncoding\r\n```\r\n\r\nAs for sub-namespace discovery:\r\n\r\n```powershell\r\nGet-ChildItem variable:: | ? PSItemType -eq 'Container'\r\n```\r\n\r\nwould work, but is a little clunky, so perhaps adding a parameter such as `-ListNamespaces` to `Get-Variable` is called for.\r\n\r\nAlso, there's the issue of container names such as `ps` potentially colliding with existing regular variables.  \r\nA simple way around that is to allow a variable and a container to have the same name - awkward, but not unheard of: in the Windows registry, a given key can have a _value_ and a _subkey_ with the same name.\r\nThe alternative is to stick _everything_ into containers, with the current variables put into `default`, which would only require redefining the `variable:` drive slightly, with `-Root default`, and making `Get-Variable` look in container `default`, if a name without namespace prefix is given.\r\nHypothetically, legacy code that used the _provider prefix_ `variable::` rather than the _drive name_ `variable:` would be impacted, but that sounds unlikely.\r\nOn the plus side, `Get-ChildItem variable::` would then list all available sub-namespaces (only).\r\n\r\nGenerally, as hinted at before, due to use of namespace notation, the names of variable sub-namespaces would themselves share a namespace with PS drives of _any_ type (provider), including custom _filesystem_ drives, so existing code with a custom `ps:` drive is hypothetically a problem.\r\n\r\n> would be introducing people to the dreaded double-drive syntax: `$ps:global:Email`\r\n\r\nFirst, accessing preference variables in a different scope strikes me as a rare use case.\r\nIf needed, `$global:ps:EmailServer` seems acceptable (the scope modifier should come first), and \r\n`Get-Variable ps:EmailServer -Scope Global` is always an option, and needed for relative-scope access anyway.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-10-09T19:52:29Z",
      "updated_at": "2019-11-12T14:03:09Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 RE: `$ProgressPreference` -- it has been my experience that setting $ProgressPreference is *only* reliable in the current scope. I'm not sure if other cmdlets simply routinely modify it themselves for some reason, or if there are issues in the underlying code that handles the variable.\r\n\r\nThis, combined with the very... clunky... nature of `Write-Progress` for many purposes which we would typically *want* to use it for, results in me simply... not... using it, at all. Write-Progress is great when it works, but by and large it is much more difficult to use than one would expect, and the effort one needs to input to get it working satisfactorily is typically far more than the task is worth.",
      "created_at": "2018-10-09T20:09:31Z",
      "updated_at": "2018-10-09T20:09:31Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@vexx32 seems like you should open a separate issue on `Write-Progress` and suggestions on how to make it more usable  ",
      "created_at": "2018-10-09T20:47:54Z",
      "updated_at": "2018-10-09T20:47:54Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "@mkelement0 you keep doubling down and making it even more complicated... \r\n\r\nI think your proposed benefits are just an illusion. The name collisions and inconsistently applied prefixes are all still there, because as everyone keeps saying: you can't get rid of the current variables without breaking the world. People have already been told There's not better discoverability, you've actually buried the things in a folder ... people would need to read a document to even learn about that and this document would have to explain the old values as well as the new provider, because most people need to write code that works in older versions of PowerShell ... like 6.1\r\n\r\nTo me, it seems obvious that a simple property (or additional value in the options enum) is a much simpler option that keeps the actual code backwards-compatible, while still enhancing visibility (especially paired with a change to the view).\r\n\r\nP.S. using `:` as a separator for the _variable_ namespace would be really confusing, because it's already the separator for scopes. Don't you write `$global:ProgressPreference`? I never see code using the variable cmdlets just to access `global` or `script` (or `local`) scope -- it's usually only used when you need to set options, or access a scope _by index_.\r\n\r\nP.P.S. I'm strongly opposed to adding hierarchy to a provider that's already scoped - even a new provider would be better.",
      "created_at": "2018-10-10T04:23:31Z",
      "updated_at": "2018-10-10T04:24:11Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@Jaykul \r\n\r\n> The name collisions and inconsistently applied prefixes are all still there, because as everyone keeps saying: you can't get rid of the current variables without breaking the world.\r\n\r\nThey will continue to be there for backward compatibility.\r\nThey will be documented as deprecated (without fear of removal), and users will be encouraged to use the new namespace(s) going forward.\r\nPSSA will provide guidance, as suggested.\r\n\r\n> There's not better discoverability, you've actually buried the things in a folder \r\n\r\nSomething like `Get-Variable ps:*` or `Get-Variable -Namespace ps` seems pretty discoverable to me.\r\n\r\n> To me, it seems obvious that a simple property (or additional value in the options enum) is a much simpler option\r\n\r\nTagging variables is fine, but it does not address the primary problem with how preference / automatic variables are currently maintained: _every time a new one needs to be introduced, existing scripts may break_.\r\n\r\n> people would need to read a document to even learn about that \r\n\r\nYes, when a new feature is introduced, people need to learn about it, if they want to avail themselves of it (they don't have to, thanks to backward compatibility, though they'll hopefully see the benefits of the new behavior).\r\n\r\n> most people need to write code that works in older versions of PowerShell .\r\n\r\nBy that reasoning, all innovation in PowerShell should be put on hold.\r\n\r\nThat improvements may take a while before they are usable in production is no reason not to introduce them.\r\n\r\n> using `:` as a separator for the variable namespace would be really confusing\r\n\r\nI think it would be just fine in practice, given that `:` _already_ does double duty as the scope-modifier separator (`$global:LASTEXITCODE`) and as the drive-name separator with namespace notation (`$env:HOME`).\r\n~~The only thing new would be _combining_ the two, but all you'll need to remember is that the scope modifier goes first~~ As is already the case<sup>[1]</sup>, the namespace (drive name) goes first (and creating drives / sub-namespaces named `global`, `script` or `local` would have to be prevented).\r\n\r\n> I'm strongly opposed to adding hierarchy to a provider that's already scoped - even a new provider would be better.\r\n\r\nYou needn't think of it as a hierarchy; think of it as partitioning into sub-namespaces.\r\nThat is, you'd access variables in the default namespace as before (`$foo`) or with a namespace qualifier in a given namespace (`$ps:OutputEncoding`).\r\n\r\nRe new provider: obviously, most of the logic is already in the Variable provider and we're talking about simply partitioning the set of variables.\r\n\r\n---\r\n\r\n<sup>[1] Even though it's not supported consistently, the current namespace notation requires that the scope modifier _follow_ the drive name; e.g., `$function:global:help` returns the definition of the `help` function in the global scope.</sup>\r\n\r\n\r\n",
      "created_at": "2018-10-10T05:04:55Z",
      "updated_at": "2018-10-17T22:07:38Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Correction re sequence of namespace (drive name) and scope modifiers: as is already supported (albeit inconsistently), the namespace goes _first_ (e.g., `$function:global:help`) - I've updated my previous comment accordingly.",
      "created_at": "2018-10-17T22:08:49Z",
      "updated_at": "2018-10-17T22:09:27Z"
    },
    {
      "author": "romero126",
      "author_association": "CONTRIBUTOR",
      "body": "This is a pretty rough read honestly. Given that there is this big conversation regarding creating variable pathing. My question is how does the proposed arguments add to and not obfuscate the base idea that $scope:variable exists.. as well as not muddy the waters diverging too far away from how variables work within the confines of C# and other scripting languages.\r\n\r\nI believe adding a path would detract so much from the language that it would confuse a lot of people about how scoping works. Especially if path'ing would exist in the global space. Making Garbage Collection a little bit more murky.\r\n\r\nInstead I recommend adding an Attribute to the Variable. and the ability to look up the variable by AttributeType. [PSAutomaticVariableAttribute].\r\n\r\nSo example code would be \r\nGet-Variable * -AttributeType [PSAutomaticVariableAttribute]\r\nWhich would return $_, $PSItem, $Error.\r\n\r\nI believe this would also avoid an entire rewrite of PSVariable module and help keep the language similar to other languages (C#/Python/Ruby/etc) and help implement a Pretty Awesome Feature.",
      "created_at": "2018-10-23T17:17:11Z",
      "updated_at": "2018-10-23T17:17:11Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I agree. Having variable paths is a nice idea in concept, but in practice it just means burying them further down out of the immediately accessible values.\r\n\r\nMaintaining the `PS` prefix for any automatic variables like this would seem to be the best option, supplemented with the ability to specifically search for them within the variable provider by adding these designation(s) as a property or attribute of the variables themselves, per @romero126's suggestions.",
      "created_at": "2018-10-23T17:36:52Z",
      "updated_at": "2018-10-23T17:36:52Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32: As [someone once said](https://github.com/PowerShell/PowerShell/issues/8393#issuecomment-446352840):\r\n\r\n>  I think that while by and large PowerShell tends to backwards compatibility there are cases where it makes sense to break a few eggs to make a better omelet. \ud83d\ude04\r\n\r\nAnd here's the good news: No eggs need harming in the implementation of my proposal:\r\nGrandfathering in the existing variables means old code won't break.\r\n\r\n> Maintaining the PS prefix for any automatic variables like this would seem to be the best option\r\n\r\nYes, _going forward_ you can commit to `PS`-prefixing future automatic variables, but that can still only be a _convention_, if you want to preserve backward compatibility.\r\n\r\nYes, implementing sub-namespaces would be a _new concept_ that users will have to learn, but I think it's worth it in the long run.  \r\nIt also fits in well with [namespace variable notation](https://github.com/PowerShell/PowerShell/issues/2268#issuecomment-283755725) (e.g., `$env:HOME`), which isn't currently well-known as a general concept, but deserves to be.\r\n\r\n\r\n\r\n",
      "created_at": "2018-12-13T23:49:02Z",
      "updated_at": "2018-12-13T23:49:02Z"
    }
  ],
  "created_at": "2017-07-31T04:39:23Z",
  "number": 4394,
  "state": "closed",
  "title": "Improving the discoverability of PowerShell variables",
  "updated_at": "2021-08-25T04:12:22Z"
}