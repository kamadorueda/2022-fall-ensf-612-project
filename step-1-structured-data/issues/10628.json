{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10628",
  "author": "chriskuech",
  "body": "# Summary of the new feature/enhancement\r\n\r\nThere does not seem to be any way to validate whether a JSON string is valid, which makes it impossible to use PowerShell to validate JSON before passing it to another application.\r\n\r\nFor example, the following JSON is invalid due to the trailing comma, but `Test-Json` still returns `$true`.\r\n```powershell\r\n'{\"hello\": \"world\",}' | Test-Json\r\n```\r\n\r\nI propose adding a `-Strict` parameter to `Test-Json` for testing that the JSON string adheres strictly to the JSON specification.\r\n\r\n## Side note\r\nI was very excited when I found the `Test-Json` cmdlet, but so far every use case it would have helped, it has not behaved as expected.  See also #9560.  If this cannot be implemented using the current library, please strongly consider using Json.NET instead of NJsonSchema.",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@chriskuech We is as simple as possible in Test-Json and delegate all to Json.NET. (NJsonSchema is used only if Schema parameter presents.) We call `JObject.Parse(Json)`. For your example it returns true. So it is Json.NET issue, we can do nothing in the PowerShell Core repo. You could open issue in Json.NET repository.",
      "created_at": "2019-09-26T07:46:56Z",
      "updated_at": "2019-09-26T07:46:56Z"
    },
    {
      "author": "chriskuech",
      "author_association": "NONE",
      "body": "That makes sense, but I think it also makes sense for the default behavior of PowerShell to have lenient JSON parsing.  Because the `-Strict` parameter provides additional validation, perhaps it makes more sense to do a regex matching.",
      "created_at": "2019-09-26T15:52:18Z",
      "updated_at": "2019-09-26T15:52:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> PowerShell to have lenient JSON parsing\r\n\r\nThis is not a PowerShell feature to parse third-party languages. It can use features of .Net Core or another library like Json.NET. Moreover, JSON is too complicated for regex.\r\n\r\n",
      "created_at": "2019-09-26T17:08:46Z",
      "updated_at": "2019-09-26T17:08:46Z"
    },
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "> Moreover, JSON is too complicated for regex.\r\n\r\nUgh, nested arrays seem doable with [balancing group definitions](https://docs.microsoft.com/en-us/dotnet/standard/base-types/grouping-constructs-in-regular-expressions#balancing-group-definitions), but I can't see how to validate the closing braces of nested objects at the same time.",
      "created_at": "2019-09-26T20:42:31Z",
      "updated_at": "2019-09-26T20:42:31Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "A `-Strict` mode sounds like a useful addition, to not just check for extraneous trailing commas, but also for the presence of `// ... ` comments, which are also accepted by default.\r\n\r\nTrying to roll our own strict mode seems like the wrong way to go, though, as @iSazonov states.\r\n\r\nUnfortunately, the Json.Net author in the past has expressed no interest in (opt-in) strict parsing; see this closed issue from 2017: https://github.com/JamesNK/Newtonsoft.Json/issues/1162",
      "created_at": "2019-09-27T14:26:42Z",
      "updated_at": "2019-09-27T14:27:56Z"
    },
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "Would the strict validator be required to reject:\r\n\r\n- duplicate names in JSON objects, as in `{\"a\":1,\"a\":1}`? [RFC 8259 section 4](https://tools.ietf.org/html/rfc8259#section-4) says: \"The names within an object SHOULD be unique.\"\r\n- huge numbers that match the JSON syntax but are probably not supported by most implementations, such as `1E100000000`?\r\n\r\nIf it is not required to reject those things, then it is simpler to implement and faster to run, I think.",
      "created_at": "2019-09-27T14:39:52Z",
      "updated_at": "2019-09-27T14:39:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ".Net Core team actively works on new JSON API implementation to replace  Json.Net. All new features will be in .Net Core. Open feature request issues in CoreFX repo if you want more features - we will get them.",
      "created_at": "2019-09-27T14:48:59Z",
      "updated_at": "2019-09-27T14:48:59Z"
    },
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "System.Text.Json currently seems focused on UTF-8 byte sequences. It seems a bit wasteful if TestJsonCommand has to convert `string Json` to UTF-8 and have System.Text.Json decode it back. OTOH, perhaps TestJsonCommand has enough overhead elsewhere to make that not matter.",
      "created_at": "2019-09-27T14:53:45Z",
      "updated_at": "2019-09-27T14:53:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@KalleOlaviNiemitalo It is a question for .Net Core team too.\r\n(Although I don't see performance issues because this cmdlet is mainly used for checking configuration files and not for analyzing high-load Web server streams)\r\n",
      "created_at": "2019-09-27T15:01:08Z",
      "updated_at": "2019-09-27T15:01:08Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as external and has not had any activity for **1 day**. It has been be closed for housekeeping purposes.",
      "created_at": "2019-09-28T16:00:31Z",
      "updated_at": "2019-09-28T16:00:31Z"
    },
    {
      "author": "asifma",
      "author_association": "NONE",
      "body": "When are you planning to solve this?! E.g. I want to validate my Azure ARM-Templates (json) using Test-Json\r\nBut it allows trailing commas. Which would not be a valid json syntax....\r\nGuess I can't use it as for now =/",
      "created_at": "2020-10-06T21:54:59Z",
      "updated_at": "2020-10-06T21:54:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I re-open so that we could look this after moving to new .Net Json API.\r\n\r\nIf you have an interest you could create a simple C# app to test new API and report to .Net Runtime repo. This will increase our chances of getting a solution faster.\r\n",
      "created_at": "2020-10-07T10:05:39Z",
      "updated_at": "2020-10-07T10:05:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "#11397 will resolve this.",
      "created_at": "2020-10-26T04:22:50Z",
      "updated_at": "2020-10-26T04:22:50Z"
    },
    {
      "author": "cloud-devops-ninja",
      "author_association": "NONE",
      "body": "Can anyone update the status of this issue as it is unclear to me whether the above mentioned #11397 resolved the issue as currently our Test-Json is still showing True for JSON that contains a trailing comma. (PowerShell 7.2.6 latest)\r\n\r\nI need a solid solution to validate JSON input in my DevOps pipelines so any human error can be excluded from the automated processes.",
      "created_at": "2022-09-05T13:39:01Z",
      "updated_at": "2022-09-05T13:39:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "For reference #18023",
      "created_at": "2022-09-06T03:23:42Z",
      "updated_at": "2022-09-06T03:23:42Z"
    }
  ],
  "created_at": "2019-09-26T04:43:58Z",
  "labels": [
    "Issue-Enhancement",
    "Waiting - DotNetCore",
    "WG-Cmdlets-Utility"
  ],
  "number": 10628,
  "state": "open",
  "title": "ConvertFrom-Json and Test-Json accept non-compliant/non-standard JSON - no way to strictly validate JSON",
  "updated_at": "2022-09-06T03:23:43Z"
}