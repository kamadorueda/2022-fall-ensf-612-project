{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5555",
  "author": "markekraus",
  "body": "When a non-success status code is returned the web cmdlets provide a convenient  error message and attaches the `HttpResponseMessage` object to the `Response` property of the exception. In 5.1 cmdltes which wrap `Invoke-RestMethod` and `Invoke-WebRequest` could run the following to retrieve the raw response body:\r\n\r\n```powershell\r\ntry {\r\n    Invoke-WebRequest 'http://httpbin.org/status/418' -ErrorAction Stop\r\n}\r\nCatch {\r\n    $err = $_\r\n}\r\n$Stream = $err.Exception.Response.GetResponseStream()\r\n$Stream.Position = 0\r\n$Reader = [System.IO.StreamReader]::new($Stream)\r\n$Reader.ReadToEnd()\r\n```\r\n\r\nThis is needed because sometimes the response body for error codes contain useful information about why something failed. \r\n\r\nIn 6.0.0 the equivalent code is below in the \"Steps to Reproduce\", This would work except that the web cmdltes are disposing the stream after creating the error message:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/32286ed22a0c8f3b58716d5d0fb2948c558678ec/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/CoreCLR/WebRequestPSCmdlet.CoreClr.cs#L581\r\n\r\nThis makes it impossible to get the original stream. This would probably not be a problem except that there are encoding issues to consider and that the string in the error message is doctored to make it more human readable:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/32286ed22a0c8f3b58716d5d0fb2948c558678ec/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/CoreCLR/WebRequestPSCmdlet.CoreClr.cs#L571\r\n\r\nI recommend not disposing the streamreader and let it naturally fall out of scope as there does not appear to be a way to dispose of a streamreader without closing the underlying stream.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\ntry {\r\n    Invoke-WebRequest 'http://httpbin.org/status/418' -ErrorAction Stop\r\n}\r\nCatch {\r\n    $err = $_\r\n}\r\n$Stream = $err.Exception.Response.Content.ReadAsStreamAsync().GetAwaiter().GetResult()\r\n$Stream.Position = 0\r\n$Reader = [System.IO.StreamReader]::new($Stream)\r\n$Reader.ReadToEnd()\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\n    -=[ teapot ]=-\r\n\r\n       _...._\r\n     .'  _ _ `.\r\n    | .\"` ^ `\". _,\r\n    \\_;`\"---\"`|//\r\n      |       ;/\r\n      \\_     _/\r\n        `\"\"\"`\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nException calling \".ctor\" with \"1\" argument(s): \"Stream was not readable.\"\r\nAt line:1 char:1\r\n+ $Reader = [System.IO.StreamReader]::new($Stream)\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\r\n+ FullyQualifiedErrorId : ArgumentException\r\nYou cannot call a method on a null-valued expression.\r\nAt line:1 char:1\r\n+ $Reader.ReadToEnd()\r\n+ ~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidOperation: (:) [], RuntimeException\r\n+ FullyQualifiedErrorId : InvokeMethodOnNull\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-rc\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-rc\r\nOS                             Microsoft Windows 10.0.15063\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2019-11-07T20:38:25Z",
  "comments": [
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "/cc @lipkau",
      "created_at": "2017-11-27T15:13:07Z",
      "updated_at": "2017-11-27T15:13:07Z"
    },
    {
      "author": "dragonwolf83",
      "author_association": "NONE",
      "body": "Any reason why this has to be a Stream and not just parsed automatically into `Exception.RawMessage` or maybe `Exception.Response.RawMessage`? Memory usage? Maybe do both if backwards compatibility is the only concern? \r\n\r\nWhy is it stripping out the formatting? \r\n\r\nI hate the idea of having to do extra code to read the stream if the common scenario is to want that detail. ",
      "created_at": "2017-11-29T06:57:47Z",
      "updated_at": "2017-11-29T06:57:47Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "> Any reason why this has to be a Stream\r\n\r\nEncoding issues as well as the fact that it could be binary data in the stream. \r\n\r\n> parsed automatically into Exception.RawMessage\r\n\r\nThis is already done on the `ErrorDetails.Message` with minor changes. But if you want this, please open a separate issue.\r\n\r\n>  Memory usage? \r\n\r\n~That, and the fact that any extra processing is wasted processing time. It will slow down errors when most users will not care about this data. Fail-fast!~ I just realized the raw string is already there so that's not really a concern.\r\n\r\nSo, the reason for this is to not destroy the stream that is already available in the `HttpResponseMessage` so that advanced users can do with that as they please. This has no bearing on any other error related issues, just keeping the stream available instead of closing it and leaving the user with no way to access it.\r\n\r\n> backwards compatibility is the only concern?\r\n\r\nBackwards compatibility is not even a concern here at all as this would absolutely not work the same in 5.1 and 6.0.0.\r\n\r\n> Why is it stripping out the formatting?\r\n\r\nThe code comment states it's for readability. It is stripping HTML tags. Compare the following on 6.0.0 and 5.1:\r\n\r\n```powershell\r\niwr https://google.com/noloexisto\r\niwr https://httpbin.org/status/418\r\n```\r\n\r\nIMO, this is an improvement (though imperfect) over 5.1\r\n\r\n> I hate the idea of having to do extra code to read the stream if the common scenario is to want that detail.\r\n\r\nIt's not common. Most users will find `ErrorDetails.Message` sufficient. This scenario addresses advanced and less common needs such as wrapping and proxying the cmdlets. This is an area where it is better to leave it up to the user to decide what they want to do with it. As far as PowerShell is concerned, an error occurred. This at least provides the user the opportunity to do something useful with the error, should they choose to and most will not.",
      "created_at": "2017-11-29T10:28:05Z",
      "updated_at": "2017-11-29T12:24:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Do we get resource leaks? Seems it is an edge case - maybe add a new parameter to get extended error message?",
      "created_at": "2018-05-08T10:51:39Z",
      "updated_at": "2018-05-08T10:51:39Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov it is definitely not an edge case. I run into this quite a bit when implementing error handling. The truth is that error bodies contain useful information and we currently mangle it with no way to retrieve the original data. While it is true that _most_ users will not run into issues with this, some _major projects_ (such as those working with Atlassian products) do. It is a problem that presents itself quite clearly to those working closely with APIs. That makes it a step above edge case.\r\n\r\nThere are several ways to attack this. \r\n\r\nI have a plan floating in my head and across several issues here to add support for treating all status codes or a provided list of status code as successful. This would mean that object creation from IRM would proceed as normal and IWR would return its normal response object. This will allow users to interact with non-success messages (such as 3XX, 4XX, and 5XX responses) as if they are normal. In that scenario a module author could indicate the known error messages for the endpoint are success codes, manually check status code, and parse the output. This presents a minor problem with IRM where it is currently not possible to obtain the response code (but this could be remediated). \r\n\r\nA second option is to provide a new parameter that results in the response not being disposed when an error occurs. This would make it possible to retrieve the stream on the response object that is attached to the exception. \r\n\r\nAnother option I've considered is adding a delayed dispose where the stream is available for a period of time and then the object is disposed. I haven't looked deeply into this.. and I kind of think it is a bad idea for a ton of reasons.\r\n\r\nYet another option I have considered is allowing to a `-ErrorStreamVariable`  that accepts a string. this string is used as a variable name in the calling scope (similar to `-SessionVariable`) for a Stream object. `CoptToAsync()` is used to copy from the content to the stream, the stream is used to generate the error, and then the stream position is reset to 0. The user could then consume the stream and dispose of it at their leisure in their own code. ",
      "created_at": "2018-05-08T11:50:27Z",
      "updated_at": "2018-05-08T12:10:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@markekraus Thanks for great review!\r\n\r\nAs a user I would prefer to have an optional parameter that will return the contents of the error stream in a variable.",
      "created_at": "2018-05-08T15:10:00Z",
      "updated_at": "2018-05-08T15:10:00Z"
    },
    {
      "author": "MaxKot",
      "author_association": "NONE",
      "body": "Current behavior makes it impossible to use Invoke-WebRequest with APIs which indicate errors with both HTTP status code and the response body. E.g. if a server returns HTTP status 400 and the following response: `{\"code\":1,\"message\":\"<description>\"}` then the contents of \"message\" field will be formatted away and, with the response stream closed, it is impossible to restore the value returned by the server.",
      "created_at": "2019-02-20T21:15:09Z",
      "updated_at": "2019-02-20T21:15:09Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "This coupled with the automatic throw on non-200 status codes makes proper error handling from APIs impossible in PowerShell",
      "created_at": "2019-05-06T07:43:25Z",
      "updated_at": "2019-05-06T07:43:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Interesting, will we get anything related (useful) in .Net Core 3.0?",
      "created_at": "2019-05-06T16:25:16Z",
      "updated_at": "2019-05-06T16:25:16Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Not really. This is pretty much a mess of our own making. We could redo a huge chunk of code to take advantage of some of the baked in stream decoding, but none of that would affect this current situation.",
      "created_at": "2019-05-06T23:38:31Z",
      "updated_at": "2019-05-06T23:38:31Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I have thought deeply about this for months now. I think the correct path forward is to add a `-SkipErrorCheck` parameter which treats all responses as successful.\r\n\r\nSince this only affects error handling when the author wants to manually handle errors, they will likely be looking for errors in the responses themselves.\r\n\r\n```powershell\r\n$Uri = 'http://urlecho.appspot.com/echo?status=404&Content-Type=application%2Fjson&body=%7B%22error%22%3A%22Does%20not%20exist%22%7D'\r\n\r\n$Result = Invoke-RestMethod -Uri $Uri -SkipErrorCheck\r\n$Result.error\r\n'--------------'\r\n$Result = Invoke-WebRequest -Uri $Uri -SkipErrorCheck\r\nif(!$Result.BaseResponse.IsSuccessStatusCode) {\r\n    $ErrorMessage = 'Request failed: {0}' -f $Result.Content\r\n    Write-Error $ErrorMessage\r\n}\r\n```\r\n\r\nResult\r\n\r\n```none\r\nDoes not exist\r\n--------------\r\nRequest failed: {\"error\":\"Does not exist\"}\r\n+ CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\r\n+ FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException\r\n```\r\n\r\nThe understanding is that since the user wants to manually handle errors in their own code, we can pass that responsibility to them and let them do what they want. \r\n\r\nIncidentally, this also resolved the issues surrounding not being able to retrieve the redirect uri for an end point.\r\n\r\n```powershell\r\n$Result = Invoke-WebRequest https://httpbin.org/absolute-redirect/3 -MaximumRedirection 1 -SkipErrorCheck\r\n$Result.Headers.Location\r\n```\r\n\r\nResult:\r\n\r\n```none\r\nhttp://httpbin.org/absolute-redirect/2\r\n```",
      "created_at": "2019-05-07T00:20:25Z",
      "updated_at": "2019-05-07T00:20:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Can we re-use `-ErrorAction` parameter?\r\nIf no I'd suggest more explicit parameter name `SkipHttpErrorCheck`.\r\n",
      "created_at": "2019-05-07T03:58:21Z",
      "updated_at": "2019-05-07T03:59:28Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I wouldn't reuse the -ErrorAction here; there are other sources of potential error here than just the responding web server.",
      "created_at": "2019-05-07T04:22:43Z",
      "updated_at": "2019-05-07T04:22:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> there are other sources of potential error here than just the responding web server.\r\n\r\nIt depends on how more we want generalize  \"treats all responses as successful\".\r\n",
      "created_at": "2019-05-07T05:04:08Z",
      "updated_at": "2019-05-07T05:04:08Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "No. We should not reuse the ErrorAction. There are issues which will result in the cmdlets failing that are not related to the response from the web server as @vexx32 points out. Those errors would never produce any error message from the web server and this is targeted specifically at handling error response from the web server which have useful data in them.\r\n\r\nI'm good with `-SkipHttpErrorCheck`.",
      "created_at": "2019-05-07T13:20:18Z",
      "updated_at": "2019-05-07T13:20:18Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "I think -SkipHttpErrorCheck is not the right solution. Invoke-RestMethod only returns the parsed content of the response. With -SkipHttpErrorCheck we would be able to inspect the error response, but we would have no way to know it is an error response, we have no way to check the status code. One could always use Invoke-WebRequest, but then you can\u2019t use features like -FollowRelLinks, have to content-switch and parse yourself, etc.\r\n\r\nImo especially for a high-level cmdlet like Invoke-RestMethod, it should abstract HTTP as it does already, meaning it should convert HTTP error responses into PowerShell errors.\r\n\r\nWhy can\u2019t we expose the response content on the exception object?",
      "created_at": "2019-05-07T15:01:54Z",
      "updated_at": "2019-05-07T15:01:54Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@felixfbecker To address that we could add a `StatusCodeVariable` parameter which would create a variable in the calling scope with the status code. \r\n\r\n```powershell\r\n$Uri = 'http://urlecho.appspot.com/echo?status=404&Content-Type=application%2Fjson&body=%7B%22error%22%3A%22Does%20not%20exist%22%7D'\r\n\r\n$Result = Invoke-RestMethod -Uri $Uri -SkipErrorCheck -StatusCodeVariable StatusCode\r\nif($StatusCode -ne 200) {\r\n   Write-Error $Result.Error\r\n}\r\n```\r\n\r\nIn a situation where you are doing this, you are already planning to handle HTTP errors yourself so you would be inspecting the response content for errors instead of the exception. Often times those are structured errors, meaning JSON or XML. With what you are proposing by putting th content on the exception, we then have to still translate the content to string then the string to structure objects.\r\n\r\nWe have discussed the issues with making the content available on the exception earlier in the thread. There are other issue surrounding our simplified errors.",
      "created_at": "2019-05-07T16:34:28Z",
      "updated_at": "2019-05-07T16:34:28Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@markekraus is there a specific reason we wouldn't expose the status code just as a member of the returned object?",
      "created_at": "2019-05-07T16:51:42Z",
      "updated_at": "2019-05-07T16:51:42Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "> To address that we could add a StatusCodeVariable parameter which would create a variable in the calling scope with the status code.\r\n\r\nThat doesn't sound like a good solution. It will mean you cannot pipe the result of the function anymore into a pipeline to further process it, instead you will have to save it in a variable, then check the magically created variable first, then continue with the result variable. Also, no IntelliSense on magic variables.\r\n\r\n> In a situation where you are doing this, you are already planning to handle HTTP errors yourself so you would be inspecting the response content for errors instead of the exception.\r\n\r\nYou cannot (and should not in a REST API, because that's what status codes are for) reliably determine just from the response body whether it is an error. For example, GitHub's REST API's error response look like `{\"message\": \"Something went wrong\"}`. GitHub's REST endpoint for commits also returns an object with a `message` property. How would you know whether it is an error or a commit? Checking for other properties is really hairy, and the function that does the API request often doesn't know what returned schema for that particular resource is, only the caller knows.\r\n\r\n> With what you are proposing by putting th content on the exception, we then have to still translate the content to string then the string to structure objects.\r\n\r\nWhat is the problem with that? `Invoke-RestMethod` does that in the success case, why should it not do it in the error case?\r\n\r\n> We have discussed the issues with making the content available on the exception earlier in the thread. There are other issue surrounding our simplified errors.\r\n\r\nThe only real argument I saw was not destroying the stream. But that can't be a problem because `ErrorDetails` already contains the response as a string, so somewhere the stream is already read anyway. Why can't that string also be exposed on a different property, but without the HTML stripping, and in the same form that the result would be in (i.e. parse it depending on `Content-Type` just like `Invoke-RestMethod` does for response bodies of success responses).\r\n\r\n\r\n ",
      "created_at": "2019-05-07T16:52:26Z",
      "updated_at": "2019-05-07T16:52:40Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32 because that would mess with the source object. These are structure objects, adding our own members to those objects could result in a clash or confusion. also.. would be awkward on string result.",
      "created_at": "2019-05-07T16:56:30Z",
      "updated_at": "2019-05-07T17:01:44Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "> That doesn't sound like a good solution. It will mean you cannot pipe the result of the function anymore into a pipeline \r\n\r\nWhen you are handling your own errors... you are almost always using the assignment paradigm and not the pipeline paradigm.\r\n\r\n> How would you know whether it is an error or a commit? \r\n\r\nFrom the status code. That's the same way it is handled in every other language besides powershell.\r\n\r\n> What is the problem with that? Invoke-RestMethod does that in the success case, why should it not do it in the error case?\r\n\r\nBy we.. I meant the module authors, not the powershell authors. Again. please review the complication pointed out earlier in the thread.",
      "created_at": "2019-05-07T16:59:14Z",
      "updated_at": "2019-05-07T17:00:36Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "> When you are handling your own errors... you are almost always using the assignment paradigm and not the pipeline paradigm.\r\n\r\nI don't know why you'd make that assumption. I almost _always_ combine `Invoke-RestMethod` with a pipeline. E.g.:\r\n```powershell\r\ntry {\r\n    Invoke-RestMethod /myapi/$Something |\r\n        ForEach-Object { $_.items } |\r\n        Where-Object { $_.id -eq $Id }\r\n} catch [WebException] {\r\n\tif ($_.Exception.StatusCode -eq 401 -and $_.Exception.Body.code -eq 'token_expired') {\r\n\t    Write-Error 'The token is expired. Generate a new one with New-MyApiToken'\r\n\t\treturn\r\n\t} else {\r\n\t\tWrite-Error $_\r\n\t}\r\n}\r\n```\r\n\r\n> From the status code.\r\n\r\nYes, but without a magic variable.\r\n\r\n> That's the same way it is handled in every other language besides powershell.\r\n\r\nIf by this you mean throwing an Exception for non-200 status codes, that couldn't be further from true. HTTP libraries in NodeJS all do this, .NET/C# does this (PowerShell is literally using the same Exception type), Java has `HttpException` too. Exceptions are really convenient and the proper representation of HTTP errors in any language that has them.\r\n\r\n> By we.. I meant the module authors, not the powershell authors.\r\n\r\nWhy can't we expose the parsed contents?\r\n\r\n> Again. please review the complication pointed out earlier in the thread.\r\n\r\nI read the thread twice and still don't know what you're referring to. Could you be more specific? What is blocking PowerShell from exposing the parsed contents on the Exception object?",
      "created_at": "2019-05-07T20:43:06Z",
      "updated_at": "2019-05-07T20:43:06Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "> I don't know why you'd make that assumption.\r\n\r\nI spend a lot of time writing, consulting on, and reviewing REST wrappers created in PowerShell. Based on experience, when someone wants to perform error handling manually they almost always use the assignment paradigm. But let's not argue on that. Neither of us have time to pull stats from github and other places for that. \r\n\r\n>   .NET/C#\r\n\r\nWe are using `HttpClient`. Both `HttpClient` and `WebRequest` APIs do not throw on a non-200 status. If you look at our code, we are creating the HttpReponseException in the PowerShell code.\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/8bd16d13cb97ba4466b4c328a9e6d130bbf2c894/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/Common/WebRequestPSCmdlet.Common.cs#L1517\r\n\r\n> Why can't we expose the parsed contents?  Could you be more specific?  What is blocking PowerShell from exposing the parsed contents on the Exception object?\r\n\r\nThis has to do with the simplified error messages. Essentially, we can have one or the other, but not both without performance sacrifices. Also, the error handling is done in the base cmdlet class, which means it needs to behave similarly for both `Invoke-WebRequest` and `Invoke-RestMethod`. Factor in binary responses, no way to ensure disposal, and that these errors accumulate in the $Error variable without falling into the garbage collector and you have a recipe for unintended performance impacts.\r\n\r\nIn 5.1 the `WebRequest` API provided a stream that could be reused. In 6.0 with the move to HttpClient the stream cannot be reused and additionally we dispose it because we have to basically duplicate it in memory to perform string processing on it to give a meaningful error.",
      "created_at": "2019-05-07T23:13:24Z",
      "updated_at": "2019-05-07T23:13:24Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #10466, which has now been successfully released as `v7.0.0-preview.6`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.6)\n",
      "created_at": "2019-11-21T22:35:26Z",
      "updated_at": "2019-11-21T22:35:26Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "> This has to do with the simplified error messages. \r\n\r\nAre you talking about this?\r\n\r\n> Invoke-WebRequest:\r\nAccessDeniedAccess DeniedC99953C5A28DBED1IexDfeKyKtSfznqe611PPDBGkbsH7jbvf5H/cZNN7K2pTM9e2SIAX7tFIpGgWem3/YKlUqFTfqA=\r\n\r\nThis is not simplified, this is plain old garbage.  Here is the error message I would expect to appear:\r\n\r\n> Invoke-WebRequest: Forbidden\r\nError:\r\n  Code      : AccessDenied\r\n  Message   : Access Denied\r\n  RequestId : FCD8C82E32E026FD\r\n  HostId    : Qh5CRv7KHUv4ro3pwWh2F1dXTTl/qOQLK88/Klle4Jut5dvDufpVzxLVpYMio4DZKdqgKq/JoTM=\r\n\r\n\r\n",
      "created_at": "2020-07-23T13:15:48Z",
      "updated_at": "2020-07-23T13:15:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@yecril71pl Please open new issue if you want to improve the error formatting.",
      "created_at": "2020-07-23T14:47:27Z",
      "updated_at": "2020-07-23T14:47:27Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "https://github.com/PowerShell/PowerShell/issues/13251#issue-664568802",
      "created_at": "2020-07-27T10:15:59Z",
      "updated_at": "2020-07-27T10:15:59Z"
    }
  ],
  "created_at": "2017-11-27T15:12:01Z",
  "labels": [
    "Issue-Enhancement",
    "Resolution-Fixed",
    "WG-Cmdlets-Utility"
  ],
  "number": 5555,
  "state": "closed",
  "title": "Original Response Body Unattainable from Web Cmdltes on Non-Success Status Codes",
  "updated_at": "2020-07-27T10:15:59Z"
}