{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12754",
  "author": "tlsalex",
  "body": "# Summary of the new feature/enhancement\r\nWhen using start-process to start a process like ping nslookup , the stream of stdout, stderr is not comming into powershell relative stream.\r\n\r\nStart-Process cmd -ArgumentList \"/c c:\\software\\test.bat\"\r\n\r\nthe test.bat only contains ipconfig\r\n\r\nhowever it returns nothing within powershell\r\n\r\nif do that like this \r\n$getip= Start-Process cmd -ArgumentList \"/c c:\\software\\test.bat\" 2>&1\r\n$getip is still an empty variable.\r\n\r\nSo I hope powershell can capture those cmd-tools' stream into its own stream.\r\n\r\nPS: I know we can run cmd tool directly within powershell, just for illustration.\r\n\r\n<!-- \r\nA clear and concise description of what the problem is that the new feature would solve.\r\nTry formulating it in user story style (if applicable):\r\n'As a user I want X so that Y.' with X being the being the action and Y being the value of the action.\r\n-->\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\n<!-- \r\nA clear and concise description of what you want to happen.\r\nConsider providing an example PowerShell experience with expected result.\r\n-->\r\n",
  "closed_at": "2022-01-08T04:01:11Z",
  "comments": [
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "From PowerShell, there is no need to run cmd.exe to, in turn, run another command such as nslookup.exe or ipconfig.exe. \r\n\r\nJust run it natively:\r\n```powershell\r\nipconfig /all\r\n```\r\n\r\n",
      "created_at": "2020-05-22T14:26:50Z",
      "updated_at": "2020-05-22T14:26:50Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Also, if you do want to use `Start-Process`, you can use `-NoNewWindow` to make the stdout/stderr capturable.",
      "created_at": "2020-05-22T14:31:52Z",
      "updated_at": "2020-05-22T14:31:52Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@doctordns \r\n\r\n> From PowerShell, there is no need to run cmd.exe to, in turn, run another command such as nslookup.exe or ipconfig.exe. (...) Just run it natively:\r\n\r\nFYI they do mention that in the issue and that the example given is just for demonstration purposes.\r\n\r\n@vexx32 \r\n\r\n> Also, if you do want to use `Start-Process`, you can use `-NoNewWindow` to make the stdout/stderr capturable.\r\n\r\nNot capturable, it just writes directly to stdin/out.\r\n\r\n---\r\n\r\nI've often wanted something like this for when native commands have conflicting syntax but I also need to pass a variable (making the stop parsing operator not usable).  It would be nice if there was a way to manually craft an argument list but still allow stdin/out to work like it does with the native command processor.",
      "created_at": "2020-05-22T16:40:29Z",
      "updated_at": "2020-05-22T16:42:39Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Good point. You can get creative with defining your arguments:\r\n\r\n```ps1\r\n$process = 'pwsh.exe'\r\n$args = @(\r\n     @'\r\n-ExecutionPolicy Bypass\r\n'@\r\n    '-File'\r\n    'C:\\Scripts\\script.ps1'\r\n)\r\n\r\n& $process @args\r\n```\r\n\r\nI'm sure it doesn't solve everything but it does make some complex situations much simpler. ",
      "created_at": "2020-05-22T16:47:15Z",
      "updated_at": "2020-05-22T16:47:58Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Give that a go and you'll see part of the problem \ud83d\ude09 ",
      "created_at": "2020-05-22T16:50:32Z",
      "updated_at": "2020-05-22T16:50:32Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah it's a mess of trial end error, but it's usually more doable than some of the alternatives. Could be better, always.",
      "created_at": "2020-05-22T16:52:57Z",
      "updated_at": "2020-05-22T16:52:57Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Yeah for sure, same can be said about just normal inline syntax though.  If this feature was added it would be a great last resort catch all.  Right now if I run into an executable like that I either have to drop all stdin/out and work off just exit code or hack together my own implementation that uses `Process` directly and reads redirected output/error.",
      "created_at": "2020-05-22T16:57:45Z",
      "updated_at": "2020-05-22T16:57:45Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The @PowerShell/wg-powershell-cmdlets has been discussing this for awhile.  To help us come to a conclusion, we would like to understand the real world scenario where simply calling the exe directly is not sufficient.",
      "created_at": "2021-07-27T00:25:31Z",
      "updated_at": "2021-07-27T00:25:31Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as \"Waiting on Author\" and has not had any activity for **7 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-01-08T04:01:09Z",
      "updated_at": "2022-01-08T04:01:09Z"
    }
  ],
  "created_at": "2020-05-22T07:02:03Z",
  "number": 12754,
  "state": "closed",
  "title": "capture Command-Line tool stream(stdout, stderr) into powershell",
  "updated_at": "2022-01-08T04:01:11Z"
}