{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7081",
  "author": "alx9r",
  "body": "The behavior of `Write-Output` has been incorrect since #2038 (see #5955, #5122, #6451, etc.).  I'd like for its correct behavior to be restored.  It seems like restoring `Write-Output` to its pre-#2038 implementation wouldn't be entirely sufficient, however.  It seems like there's something that changed between version 5.1 and 6.1-preview that affects how the pre-#2038 implementation of `Write-Output` behave for empty arrays.  That is why I'm opening this issue.\r\n\r\nFor this repro I've implemented `Write-Output2` as a stand-in for pre-#2038 `Write-Output` (see [#6451(comment)](https://github.com/PowerShell/PowerShell/issues/6451#issuecomment-375111813)) .  I believe (and it is my intention) that this implementation of `Write-Output2` matches the pre-#2038 implementation of `Write-Output`.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nAdd-Type '\r\n    using System.Management.Automation;\r\n\r\n    [Cmdlet(VerbsCommunications.Write, \"Output2\")]\r\n    public class WriteOutput2Command : PSCmdlet\r\n    {\r\n        private PSObject[] _inputObjects = null;\r\n\r\n        [Parameter(Position = 0, Mandatory = true, ValueFromPipeline = true, ValueFromRemainingArguments = true)]\r\n        [AllowNull]\r\n        [AllowEmptyCollection]\r\n        public PSObject[] InputObject\r\n        {\r\n            get { return _inputObjects; }\r\n            set { _inputObjects = value; }\r\n        }\r\n\r\n        [Parameter()]\r\n        public SwitchParameter NoEnumerate\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n\r\n        protected override void ProcessRecord()\r\n        {\r\n            if (null == _inputObjects)\r\n            {\r\n                WriteObject(_inputObjects);\r\n                return;\r\n            }\r\n\r\n            bool enumerate = true;\r\n            if (NoEnumerate.IsPresent)\r\n            {\r\n                enumerate = false;\r\n            }\r\n            foreach (PSObject inputObject in _inputObjects)\r\n            {\r\n                WriteObject(inputObject, enumerate);\r\n            }\r\n        }//processrecord\r\n    }' -PassThru | % Assembly | Import-Module\r\n\r\n$c = {Write-Output2 @() -NoEnumerate}.Invoke()\r\n$c.Count\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nI expected the `Collection<PSObject>` returned by `.Invoke()` to contain a reference to the empty array passed to `Write-Output2`.  I expected that `Write-Output -NoEnumerate` should be transparent to the object passed to it.  Such behavior would match the behavior in version 5.1.\r\n\r\n```none\r\n1\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\nThe `Collection<PSObject>` does not contain anything.\r\n\r\n```none\r\n0\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.688\r\nPSEdition                      Core\r\nGitCommitId                    v6.1.0-preview.688\r\nOS                             Microsoft Windows 6.3.9600\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2018-06-15T14:59:33Z",
  "number": 7081,
  "state": "open",
  "title": "pre-#2038 Write-Output: {Write-Output @() -NoEnumerate}.Invoke() returns empty Collection<PSObject>",
  "updated_at": "2018-06-19T15:35:05Z"
}