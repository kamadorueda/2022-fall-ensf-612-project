{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13229",
  "author": "PrzemyslawKlys",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\nRemove-Item -LiteralPath $AnyFolderWithFiles -Recurse:$false\r\n```\r\n## Expected behavior\r\n\r\nWhen defined `Recurse:$false` I would expect the command to accept it and simply not do anything. I explicitly want to delete folder only when it's empty, so if Remove-Item detected files in specified folder and I set Recurse to false I would expect it to simply not do anything.\r\n\r\n## Actual behavior\r\n\r\n![image](https://user-images.githubusercontent.com/15063294/88102251-859b2f80-cb9f-11ea-880f-93891fc824b5.png)\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\n\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "This is a good example of why cmdlets should never use `Cmdlet.ShouldContinue()` calls directly, despite some folks wanting to argue otherwise. There's no way to bypass the prompt with the way the cmdlet is designed.\r\n\r\nIMO changing it so that an explicit `-Confirm:$false` is respected would be great; `-Force` isn't appropriate here as we don't want the folder removed anyway.\r\n\r\nI'd expect maybe an error to be emitted stating the folder can't be removed without removing its children, but forcing a prompt here means that implementing the necessary logic for this to work in a headless environment / automation script would need multiple additional command calls (when it's clear Remove-Item is perfectly capable of determining if the container is empty in the first place).",
      "created_at": "2020-07-21T21:08:41Z",
      "updated_at": "2020-07-21T21:08:55Z"
    },
    {
      "author": "PrzemyslawKlys",
      "author_association": "NONE",
      "body": "Just to be clear, Force is also ignored :-) ",
      "created_at": "2020-07-21T21:16:35Z",
      "updated_at": "2020-07-21T21:16:35Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> There's no way to bypass the prompt with the way the cmdlet is designed.\r\n\r\nHow bout:\r\n\r\n```powershell\r\nif (-not (gci $path -ea 0)) {\r\n    Remove-Item $path\r\n}\r\n```\r\n\r\nWanting that specific behavior isn't super common, the above is a fine for those edge cases imo.\r\n\r\n> I'd expect maybe an error to be emitted stating the folder can't be removed without removing its children, but forcing a prompt here means that implementing the necessary logic for this to work in a headless environment / automation script\r\n\r\nDoesn't it throw in `-NonInteractive`?\r\n\r\n---\r\n\r\nSide note, I don't think we should encourage differing behavior on `-Switch:$false`.  That still just translates to \"not present\".  You'd have to check `BoundParameters` *and* the value which seems really counter intuitive (and real confusing for splatting).",
      "created_at": "2020-07-22T13:09:37Z",
      "updated_at": "2020-07-22T13:10:03Z"
    },
    {
      "author": "PrzemyslawKlys",
      "author_association": "NONE",
      "body": "It's not about how to get information if folder is empty. I'm using either of those 2 options:\r\n- `$FullFolder = Test-Path -Path \"$($_.FullName)\\*\"`\r\n- `Get-ChildItem -LiteralPath $Folder -Force -ErrorAction Stop | Select-Object -First 1 | Measure-Object` - and check for count -eq 0\r\n\r\nI'm just trying to point out that behavior, where it claims Recurse is not set when it's set (just to $false), is giving me a wrong error message, and generally prompting for input where I don't want it and can't prevent it.  ",
      "created_at": "2020-07-22T13:28:13Z",
      "updated_at": "2020-07-22T13:28:13Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> I'm just trying to point out that behavior, where it claims Recurse is not set when it's set (just to $false), is giving me a wrong error message, and generally prompting for input where I don't want it and can't prevent it.\r\n\r\nIt isn't set though, `-Recurse:$false` is just the explicit version of excluding the parameter.  Switch parameters only have two states.",
      "created_at": "2020-07-22T13:32:26Z",
      "updated_at": "2020-07-22T13:32:26Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Pretty sure `-Confirm:$false` is already treated differently by cmdlets implementing ShouldProcess and using Cmdlet.ShouldProcess() -- it ignores the confirmimpact settings completely and bypasses the prompt.",
      "created_at": "2020-07-22T15:26:14Z",
      "updated_at": "2020-07-22T15:26:14Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Pretty sure `-Confirm:$false` is already treated differently by cmdlets implementing ShouldProcess and using Cmdlet.ShouldProcess() -- it ignores the confirmimpact settings completely and bypasses the prompt.\r\n\r\nYeah it is, but that's also super confusing and frequently complained about.  I don't think that mistake should be propagated.",
      "created_at": "2020-07-22T15:33:34Z",
      "updated_at": "2020-07-22T15:33:34Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I don't disagree, but I'd say we then have a need for an additional switch for SupportsShouldProcess to explicitly bypass prompts. That's probably a separate issue, but either way I think the behaviour of Remove-Item here is awkward to workaround at the best of times. ",
      "created_at": "2020-07-22T15:51:04Z",
      "updated_at": "2020-07-22T15:52:26Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> I don't disagree, but I'd say we then have a need for an additional switch for SupportsShouldProcess to explicitly bypass prompts.\r\n\r\nI do kinda wish `ShouldContinue` would always throw if the command is not the top level interactive command.  Probably too big of break though.  Yeah I'd be down for a `ThrowOnPrompt` style parameter (with a better name) to be added to `CommonParameters`. Or if you mean as a replacement for `-Confirm:$false` yeah I agree.\r\n\r\n> That's probably a separate issue, but either way I think the behaviour of Remove-Item here is awkward to workaround at the best of times.\r\n\r\nIt's barely awkward at the worst of times \ud83d\ude1b \r\n\r\nAt the best of times you're either removing a file or a directory with `-Recurse -Force`.  The worst of times is when you specifically only want to delete a folder when it's empty, which is pretty easily worked around by wrapping the `Remove-Item` call in a simple `if` block.",
      "created_at": "2020-07-22T16:34:36Z",
      "updated_at": "2020-07-22T16:34:36Z"
    }
  ],
  "created_at": "2020-07-21T20:16:44Z",
  "labels": [
    "Issue-Question",
    "WG-Cmdlets-Management",
    "Area-FileSystem-Provider"
  ],
  "number": 13229,
  "state": "open",
  "title": "Remove-Item doesn't respect Recurse switch set to $false",
  "updated_at": "2021-11-29T17:18:31Z"
}