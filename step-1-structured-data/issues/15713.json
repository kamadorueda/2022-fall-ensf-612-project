{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15713",
  "author": "VShrubowich",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\n\n### Steps to reproduce\n\n### Description\r\n\r\nWhen using the **FilterHashtable** parameter for **Get-WinEvent** and specifying both, the **Application** event log and the **Microsoft-Windows-Winlogon** event log provider, the errors \"_The specified providers do not write events to any of the specified logs_\" and \"_The parameter is incorrect_\" are returned.  However, when specifying the event log without the provider or the provider without the event log, **Microsoft-Windows-Winlogon** events are returned from the **Application** log if any are present.  \r\n\r\nThe following shows that the **Microsoft-Windows-Winlogon** event log provider does indeed write to the **Application** log:\r\n```\r\nPS> (Get-WinEvent -ListLog Application).ProviderNames | Where-Object {$_ -eq 'Microsoft-Windows-Winlogon'}\r\nMicrosoft-Windows-Winlogon\r\n```\r\n\r\nThe following shows that **Get-WinEvent** does work when the **FilterHashtable** parameter is used to specify the **Application** event log and another provider:\r\n```\r\nPS> Get-WinEvent -FilterHashtable @{ LogName='Application'; ProviderName='Microsoft-Windows-Defrag' }\r\n\r\n   ProviderName: Microsoft-Windows-Defrag\r\n\r\nTimeCreated                     Id LevelDisplayName Message\r\n-----------                     -- ---------------- -------\r\n6/30/2021 7:27:31 AM           258 Information      The storage optimizer successfully completed retrim on OSDisk (C:)\r\n(additional lines of output left out)\r\n```\r\n\r\nRunning the following code shows that, when using the **FilterXML** parameter to specify the **Application** log and the **Microsoft-Windows-Winlogon** provider instead of using the **FilterHashtable** parameter, the results are as expected:\r\n```\r\n<# Code:\r\n\r\nGet-WinEvent -FilterXML @'\r\n<QueryList>\r\n  <Query Id=\"0\" Path=\"Application\">\r\n    <Select Path=\"Application\">*[System[Provider[@Name='Microsoft-Windows-Winlogon']]]</Select>\r\n  </Query>\r\n</QueryList>\r\n'@\r\n\r\n#>\r\n\r\n# Output:\r\n\r\nPS> Get-WinEvent -FilterXML @'\r\n>> <QueryList>\r\n>>   <Query Id=\"0\" Path=\"Application\">\r\n>>     <Select Path=\"Application\">*[System[Provider[@Name='Microsoft-Windows-Winlogon']]]</Select>\r\n>>   </Query>\r\n>> </QueryList>\r\n>> '@\r\n\r\n   ProviderName: Microsoft-Windows-Winlogon\r\n\r\nTimeCreated                     Id LevelDisplayName Message\r\n-----------                     -- ---------------- -------\r\n7/1/2021 8:51:39 PM           1002 Information      The shell stopped unexpectedly and explorer.exe was restarted.\r\n```\r\n\r\nThe **FilterXPath** parameter also works:\r\n```\r\nPS> Get-WinEvent -LogName 'Application' -FilterXPath '*[System[Provider[@Name=\"Microsoft-Windows-Winlogon\"]]]'\r\n\r\n   ProviderName: Microsoft-Windows-Winlogon\r\n\r\nTimeCreated                     Id LevelDisplayName Message\r\n-----------                     -- ---------------- -------\r\n7/1/2021 8:51:39 PM           1002 Information      The shell stopped unexpectedly and explorer.exe was restarted.\r\n```\r\n\r\n\r\n### Steps to reproduce\r\n\r\n1. Cause the **Microsoft-Windows-Winlogon** provider to write one or more events to the **Application** event log.  One way to accomplish this is to open a **File Explorer** window, then, in **Task Manager** on the **Processes** tab, right-click on **Windows Explorer** and select **Restart**.\r\n\r\n2. Run Get-WinEvent like below:\r\n\r\n`Get-WinEvent -FilterHashtable @{ LogName='Application'; ProviderName='Microsoft-Windows-Winlogon' }`\n\n### Expected behavior\n\n```console\nPS> Get-WinEvent -FilterHashtable @{ LogName='Application'; ProviderName='Microsoft-Windows-Winlogon' }\r\n\r\n   ProviderName: Microsoft-Windows-Defrag\r\n\r\nTimeCreated                     Id LevelDisplayName Message\r\n-----------                     -- ---------------- -------\r\n7/1/2021 8:51:39 PM           1002 Information      The shell stopped unexpectedly and explorer.exe was restarted.\n```\n\n\n### Actual behavior\n\n```console\nPS7> Get-WinEvent -FilterHashtable @{ LogName='Application'; ProviderName='Microsoft-Windows-Winlogon' }\r\nGet-WinEvent: The specified providers do not write events to any of the specified logs.\r\nGet-WinEvent: The parameter is incorrect.\n```\n\n\n### Environment data\n\n```powershell\nPS> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "`Get-WinEvent -ListProvider * | ? {$_.Name -eq \"Microsoft-Windows-Winlogon\" }`\r\n\r\n```\r\nName     : Microsoft-Windows-Winlogon\r\nLogLinks : {Microsoft-Windows-Winlogon/Diagnostic, Microsoft-Windows-Winlogon/Operational, System}\r\nOpcodes  : {win:Info, win:Start, win:Stop, NotificationPended\u2026}\r\nTasks    : {AuthenticateUser, UpdatePerUserSystemParameters, CheckWindowsLicenseStatus, RestoringNetConnections\u2026}\r\n```\r\n\r\nLogLinks doesn't contains Application log. So it is OS issue. You could report the issue by Windows Feedback tool.",
      "created_at": "2021-07-02T03:33:55Z",
      "updated_at": "2021-07-02T03:33:55Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> ISSUE WILL BE HERE\r\n\r\nThis is not an issue.\r\n\r\n`LogName` and `ProviderName` can't be used together. They are in different parameter sets.\r\n```\r\nPS > (gcm Get-WinEvent).ParameterSets.Where({ $_.Parameters.Name -eq 'ProviderName' }).Foreach({ $_.Name })\r\nGetProviderSet\r\n\r\nPS > (gcm Get-WinEvent).ParameterSets.Where({ $_.Parameters.Name -eq 'LogName' }).Foreach({ $_.Name })\r\nGetLogSet\r\n```",
      "created_at": "2021-07-04T12:30:21Z",
      "updated_at": "2021-07-04T12:56:59Z"
    },
    {
      "author": "uw-dc",
      "author_association": "NONE",
      "body": "@237dmitry \r\n\r\nThis not a valid example then?\r\nhttps://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.diagnostics/get-winevent?view=powershell-7.3#example-18--use-filterhashtable-to-get-application-errors\n\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.diagnostics/get-winevent\">Get-WinEvent (Microsoft.PowerShell.Diagnostics) - PowerShell</a></strong></div><div> This cmdlet is only available on the Windows platform.  The Get-WinEvent cmdlet gets events from event logs, including classic logs, such as the System and Application logs. The cmdlet gets data from event logs that are generated by the Windows Event Log technology introduced in Windows Vista. And, events in log files generated by Event Tracing for Windows (ETW). By default, Get-WinEvent returns event information in the order of newest to oldest. Get-WinEvent lists event logs and event log providers. To interrupt the command, press CTRL+C. You can get events from selected logs or from logs generated by selected event providers. And, you can combine events from multiple sources in a single command. Get-WinEvent allows you to filter events using XPath queries, structured XML queries, and hash table queries. If you're not running PowerShell as an Administrator, you might see error messages that you cannot retrieve information about a log. </div></blockquote>",
      "created_at": "2022-01-24T19:43:45Z",
      "updated_at": "2022-01-24T19:43:47Z"
    }
  ],
  "created_at": "2021-07-02T02:20:52Z",
  "labels": [
    "WG-Cmdlets",
    "Needs-Triage"
  ],
  "number": 15713,
  "state": "open",
  "title": "Get-WinEvent cannot read Winlogon events in Application log using FilterHashtable",
  "updated_at": "2022-01-24T19:43:47Z"
}