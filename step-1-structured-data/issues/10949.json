{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10949",
  "author": "mklement0",
  "body": "PowerShell was not to blame, after all - see [comment below](https://github.com/PowerShell/PowerShell/issues/10949#issuecomment-548411382).\r\n\r\n---\r\n\r\nLaunching `pwsh.exe` via WSH, such as from a VBScript, seemingly causes PowerShell not to find well-known assemblies such as `System.Windows.Forms` that you can normally load with `Add-Type -Assembly`\r\n\r\nNote: This is a regression of sorts from Windows PowerShell, though the technological foundation has changed: Windows PowerShell looks in the GAC, whereas PowerShell Core - due to there no longer being a GAC in .NET Core - seemingly looks in `$PSHOME`.\r\n\r\nNote that the problem can be reproduced with both WSH executables, `cscript.exe` (console) and `wscript.exe` (GUI).\r\n\r\n# Steps to reproduce\r\n\r\nRun the following Pester test on Windows:\r\n\r\n```powershell\r\nDescribe \"WSH-launched CLI command should find well-known assemblies\" {\r\n\r\n  BeforeAll {\r\n    Push-Location testdrive:\\\r\n    $outFile = (Convert-Path .) + 'out.txt'\r\n    'powershell', 'pwsh' | ForEach-Object {\r\n      \"CreateObject(`\"WScript.Shell`\").Run(`\"$_.exe -noprofile -c Add-Type -AssemblyName System.Windows.Forms; `$Error[0] > $outFile`\")\" > \"test_$_.vbs\"\r\n    }\r\n  }\r\n\r\n  It \"Can locate System.Windows.Forms\" {\r\n\r\n    'powershell', 'pwsh' | ForEach-Object {\r\n\r\n      Remove-Item -ErrorAction Ignore $outFile\r\n\r\n      & ./\"test_$_.vbs\"\r\n\r\n      While (-not (Get-Item -EA Ignore $outFile)) {\r\n        Write-Host . -NoNewline\r\n        Start-Sleep -Milliseconds 300\r\n      }\r\n      Write-Host\r\n      Get-Content $outFile | Should -BeNullOrEmpty\r\n    }\r\n\r\n  }\r\n\r\n  AfterAll {\r\n    Start-Sleep 1 # Sleep a little \r\n    Pop-Location\r\n  }\r\n\r\n}\r\n```\r\n\r\n# Expected behavior\r\n\r\nThe tests should pass.\r\n\r\n# Actual behavior\r\n\r\nThe test with `pwsh.exe` fails.\r\n\r\n```none\r\n Expected $null or empty, but got @('Add-Type : Cannot find path 'C:\\Users\\jdoe\\AppData\\Local\\Temp\\07a8351f-062f-4253-bf76-8994223a491b\\System.Windows.Forms.dll' because it does not exist.'\r\n```\r\n\r\nThat is, the `System.Windows.Forms.dll` assembly wasn't found in PowerShell's own home folder (`$PSHOME`) even though it is present there. (try `Get-Item \"$PSHOME\\System.Windows.Forms.dll\"`)\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core 7.0.0-preview.5\r\n```\r\n",
  "closed_at": "2019-10-31T14:48:01Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What is $pwd in the case?\r\n\r\nUpdate: it is the testdrive:\\",
      "created_at": "2019-10-31T11:01:23Z",
      "updated_at": "2019-10-31T11:06:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Run(`\"$_.exe -noprofile \r\n\r\nIf I put full path to the exe I don't see errors. Perhaps vbs script find previous pwsh version without the dll?",
      "created_at": "2019-10-31T11:39:31Z",
      "updated_at": "2019-10-31T11:39:31Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> Perhaps vbs script find previous pwsh version without the dll?\r\n\r\nExcellent guess, @iSazonov - that's exactly what it was - it never occurred to me to check for that, because the older version (6.2.3) _isn't in my $env:PATH_.\r\n\r\nHere's what happened in detail:\r\n\r\n* I had both v7.0.0-preview.5 and v6.2.3 installed on my system, with _only_ v7.0.0-preview.5 in the path (in a directory listed in `$env:PATH`)\r\n\r\n* Even though v6.2.3 wasn't in the path, it _was_ present in the _registry_, as put there by the installer, namely in the following location:\r\n\r\n  * `HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\pwsh.exe`\r\n\r\n* **The `WScript.Shell` COM Automation component's `.Run()` method apparently _first_ looks in the _registry_ for an executable's path**, and only _then_ in `$env:PATH`, which is why it ended up launching v6.2.3 (where the `System.Windows.Forms.dll` doesn't exist).\r\n\r\n---\r\n\r\nThis behavior contrasts with both cmd.exe and PowerShell itself:\r\n\r\n* In _direct execution_ (`pwsh ...`), it is _only_ `$env:PATH` that is consulted.\r\n\r\n* In execution via `start` / `Start-Process`, `$env:PATH`  is consulted _first_, and only if no match is found is the _registry_ location consulted.\r\n\r\nTherefore, the observed behavior is entirely owed to `WScript.Shell`'s by-(surprising)-design behavior, so I'm closing this.\r\n\r\n\r\n",
      "created_at": "2019-10-31T14:47:57Z",
      "updated_at": "2019-10-31T15:48:43Z"
    }
  ],
  "created_at": "2019-10-30T21:07:04Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered",
    "WG-Cmdlets-Utility"
  ],
  "number": 10949,
  "state": "closed",
  "title": "CLI: When launched from VBScript (WSH), well-known assemblies aren't found with Add-Type -AssemblyName",
  "updated_at": "2019-10-31T15:48:43Z"
}