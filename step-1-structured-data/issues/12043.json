{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12043",
  "author": "alx9r",
  "body": "I've been trying to find some kind of practical workaround for the name collisions described in #12036 and #12014.  One avenue that seemed worth exploring is setting `$PSModuleAutoLoadingPreference` to `None` and explicitly importing required modules into each module.  Turning off module auto-loading, however, seems to result in the silent failure of `Import-Module -UseWindowsPowerShell`.  Proxy commands in that condition don't seems to be created despite that `Import-Module -UseWinidowsPowerShell` produces no error.\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n$PSModuleAutoLoadingPreference = [System.Management.Automation.PSModuleAutoLoadingPreference]::None\r\nImport-Module Microsoft.PowerShell.Utility,Microsoft.PowerShell.Management\r\nImport-Module Microsoft.PowerShell.Management -UseWindowsPowerShell -wa si\r\nGet-Command Get-WmiObject\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nFunction\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nGet-Command: C:\\test.ps1:4\r\nLine |\r\n   4 |  Get-Command Get-WmiObject | % CommandType\r\n     |  ~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     | The term 'Get-WmiObject' is not recognized as the name of a cmdlet, function, script file, or operable program.\r\n     | Check the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0\r\nOS                             Microsoft Windows 6.3.9600\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u0393\u00c7\u00aa}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "This is fixed by #11980 \r\n\r\nIn short: depending on the value of `PSModulePath` - in the default case - this line `Import-Module Microsoft.PowerShell.Management -UseWindowsPowerShell -wa si` will import version `7.0.0.0` of the module in Windows PowerShell, so there is no surprise that `Get-WmiObject` is not found.\r\nThis can be checked by running following in the end of repro steps:\r\n```\r\nPS C:\\> $s = Get-PSSession -Name WinPSCompatSession\r\nPS C:\\> Icm $s {Get-Module -Name Microsoft.PowerShell.Management}\r\n\r\nModuleType Version    PreRelease Name                                ExportedCommands                           PSComputerName\r\n---------- -------    ---------- ----                                ----------------                           --------------\r\nManifest   7.0.0.0               Microsoft.PowerShell.Management     {New-ItemProperty, Set-Item, Push-Locatio\u2026 localhost\r\n```\r\nA workaround can be loading module by path:\r\n`Import-Module \"$env:windir\\System32\\WindowsPowerShell\\v1.0\\Modules\\Microsoft.PowerShell.Management\\Microsoft.PowerShell.Management.psd1\" -UseWindowsPowerShell -wa si`",
      "created_at": "2020-03-06T00:44:53Z",
      "updated_at": "2020-03-06T00:44:53Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@anmenaga:\r\n\r\nWithout having looked at #11980:\r\n\r\n* The suggested workaround is effective with respect to the ability to call `Get-WmiObject`, but has the major side effect of replacing all `Microsoft.PowerShell.Management` cmdlets with implicitly-remoting WinPS proxy functions, which causes the problems described in  #12014.\r\n\r\n* The problem here is that _in recent Windows 10 versions_ - as of at least version `1909` - the `C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules\\Microsoft.PowerShell.Management` module is unexpectedly - and, I presume, _inappropriately_ - tagged as _being PS Core-compatible_ - see https://github.com/PowerShell/PowerShell/issues/12172#issuecomment-602100870 (update: a [fix is pending](https://github.com/PowerShell/PowerShell/issues/12172#issuecomment-602828905)).\r\n",
      "created_at": "2020-03-21T22:33:02Z",
      "updated_at": "2020-03-23T20:23:11Z"
    }
  ],
  "created_at": "2020-03-05T23:55:30Z",
  "number": 12043,
  "state": "open",
  "title": "Import-Module with -UseWindowsPowerShell and PSModuleAutoLoadingPreference=None silently fails to create proxies",
  "updated_at": "2020-03-23T20:23:11Z"
}