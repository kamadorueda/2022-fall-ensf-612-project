{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3569",
  "author": "alexandair",
  "body": "This is not a PowerShell Core issue, but it's connected to Docker base image created to support easy test of PowerShell Core. I don't know if this is the right place to submit this issue.\r\n\r\nWhen I run a container built on microsoft/powershell Docker base image (the one with the latest PowerShell Core), $env:PSModulePath has a different value when I run PowerShell in the container directly and when I connect to it using Invoke-Command -ContainerID.\r\n\r\nSteps to reproduce\r\n------------------\r\nRun a container based on microsoft/powershell:nanoserver image.\r\n```\r\ndocker run -it --rm microsoft/powershell:nanoserver powershell\r\n```\r\nExecute this inside of a container:\r\n```\r\nPS C:\\> $env:PSModulePath -split ';'\r\nC:\\Users\\ContainerAdministrator\\Documents\\PowerShell\\Modules\r\nC:\\Program Files\\PowerShell\\Modules\r\nc:\\program files\\powershell\\latest\\Modules\r\n```\r\nConnect to the same container using Invoke-Command:\r\n```\r\nPS C:\\> Enter-PSSession -ContainerId 3b7424b9239b... -RunAsAdministrator\r\n\r\n[3b7424b9239b...]: PS C:\\> $env:psmodulepath -split ';'\r\nC:\\Users\\ContainerAdministrator\\Documents\\WindowsPowerShell\\Modules\r\nC:\\Program Files\\WindowsPowerShell\\Modules\r\nc:\\windows\\system32\\windowspowershell\\v1.0\\Modules\r\n```\r\nExpected behavior\r\n-----------------\r\nContent of $env:PSModulePath should be the same in both cases. \r\n\r\nActual behavior\r\n---------------\r\n`c:\\windows\\system32\\windowspowershell\\v1.0\\Modules` is missing when you run PowerShell in a container directly.\r\n\r\n",
  "closed_at": "2018-04-30T18:50:48Z",
  "comments": [
    {
      "author": "mirichmo",
      "author_association": "MEMBER",
      "body": "@alexandair Check $PSHOME in both cases. In the first instance, it looks like you are using PowerShell Core. In the second instance, you are using Windows PowerShell (inbox system32 version). If that is the case then the difference in module path sets is expected.",
      "created_at": "2017-04-18T15:36:12Z",
      "updated_at": "2017-04-18T15:36:12Z"
    },
    {
      "author": "alexandair",
      "author_association": "CONTRIBUTOR",
      "body": "@mirichmo As I said, this is not connected to PowerShell Core. In both cases I'm \"connected\" to Windows PowerShell.\r\n\r\n```\r\n# directly running commands in a container\r\nPS C:\\> $pshome\r\nC:\\Windows\\System32\\WindowsPowerShell\\v1.0\r\nPS C:\\> $env:PSModulePath -split ';'\r\nC:\\Users\\ContainerAdministrator\\Documents\\PowerShell\\Modules\r\nC:\\Program Files\\PowerShell\\Modules\r\nc:\\program files\\powershell\\latest\\Modules\r\n```\r\n\r\n```\r\n# Interactive session using the -ContainerID\r\n[354ec2ca2095...]: PS C:\\> $pshome\r\nC:\\Windows\\System32\\WindowsPowerShell\\v1.0\r\n[354ec2ca2095...]: PS C:\\> $env:psmodulepath -split ';'\r\nC:\\Users\\ContainerAdministrator\\Documents\\WindowsPowerShell\\Modules\r\nC:\\Program Files\\WindowsPowerShell\\Modules\r\nc:\\windows\\system32\\windowspowershell\\v1.0\\Modules\r\n```\r\n\r\nThe content of $env:PSModulePath is not the same.\r\nThe main problem is that c:\\windows\\system32\\windowspowershell\\v1.0\\Modules is missing in the first case.\r\n\r\n$PSVersionTable is the same in both cases:\r\n```\r\nPS C:\\> $psversiontable\r\n\r\nName                           Value\r\n----                           -----\r\nBuildVersion                   10.0.14393.1000\r\nSerializationVersion           1.1.0.1\r\nCLRVersion\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSVersion                      5.1.14393.1000\r\nPSEdition                      Core\r\nPSRemotingProtocolVersion      2.3\r\nWSManStackVersion              3.0\r\n```\r\n\r\n`Get-Module -List` doesn't give the same output.",
      "created_at": "2017-04-18T19:01:50Z",
      "updated_at": "2017-04-18T19:01:50Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The Windows Docker Images we currently create and publish are targeting use of PSCore v6 on them even though they also contain the inbox Windows PowerShell [Core] v5.  They are really designed to be used as:\r\n\r\n```\r\ndocker run -it microsoft/powershell:nanoserver\r\n```\r\n\r\n`$psversiontable` will show you are running PSCore6.  You'll also know it's PSCore6 as PSReadline currently has a problem running in a container.  However, when you specify:\r\n\r\n```\r\ndocker run -it microsoft/powershell:nanoserver powershell\r\n```\r\n\r\nit's probably using the system path and finding Windows PowerShell before PowerShell Core.  `$psversiontable` will show you are running Windows PowerShell v5.1.\r\n\r\nwhere the default entry point is PS Core v6 and the env vars point to that.  When you use Invoke-Command/Enter-PSSession -ContainerId, this is connecting to the inbox Windows PowerShell v5.  Perhaps we should update the remoting endpoint configuration to point to PSCore v6.\r\n\r\ncc @TravisEz13 ",
      "created_at": "2017-04-18T21:30:06Z",
      "updated_at": "2017-04-18T21:32:13Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Unless PowerShell Direct can be told to use a different configuration per VM, I agree we should update PowerShell 6 to be the default for the Docker containers.",
      "created_at": "2017-05-11T21:05:22Z",
      "updated_at": "2017-05-11T21:05:22Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "`Enter-PSSession` takes a `-ConfigurationName` parameter so it should be possible to point it to the PSCore6 endpoint.  However, you have to run `$PSHOME\\Install-PowerShellRemoting.ps1` first to create the endpoint.  Looking at our dockerfiles, we only install PSCore6 and don't register the endpoint so we should do that and also consider pointing the default endpoint to PSCore6 as that is the purpose of those images.",
      "created_at": "2018-01-05T00:50:04Z",
      "updated_at": "2018-01-05T00:50:04Z"
    },
    {
      "author": "mirichmo",
      "author_association": "MEMBER",
      "body": "`Enable-PSRemoting` is also supported. That can be used instead of the script.",
      "created_at": "2018-01-05T16:52:19Z",
      "updated_at": "2018-01-05T16:52:19Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "`1709` version of `nanoserver` this functionality does not work any longer.  I've been assured that this functionality will be restored in the next major release for servers (working with PowerShell Core).\r\n\r\nAlso, for `nanoserver` the team has said that [the use of BuiltinAdministrator should be discontinued](https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/system-requirements#nano-server-vs-windows-server-core).\r\n\r\n>Starting with Windows Server version 1709 applications run under a user context, so commands that require administrator privileges will fail. You can specify the container administrator account via the --user flag (i.e. docker run --user ContainerAdministrator) however **in the future we intend to fully remove administrator accounts from NanoServer.**\r\n\r\nI'm going to resolve this as external.",
      "created_at": "2018-04-30T18:50:29Z",
      "updated_at": "2018-04-30T18:50:29Z"
    }
  ],
  "created_at": "2017-04-15T13:57:04Z",
  "labels": [
    "Issue-Question",
    "Area-Maintainers-Build",
    "Area-SideBySide",
    "Resolution-External"
  ],
  "number": 3569,
  "state": "closed",
  "title": "missing path to system modules in $env:PSModulePath in microsoft/powershell Docker base image",
  "updated_at": "2018-04-30T18:50:48Z"
}