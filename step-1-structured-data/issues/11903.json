{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11903",
  "author": "lehtoj",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\nImport-Module ModuleName -UseWindowsPowerShell\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nModule loads without errors.\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nThe remote session with the name WinPSCompatSession  is not available.\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nPSVersion                      7.0.0-rc.2\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-rc.2\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-03-10T06:31:45Z",
  "comments": [
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "I can not duplicate this. \r\n\r\nFirst - I do not have a module name 'modulename'\r\n\r\nYou only get the remoting session if you are loading via compatibility not by default. that is, only the modules in System 32 are remoted.  I have tested this extensively and can not, in general, duplicate this. \r\n",
      "created_at": "2020-02-21T10:54:05Z",
      "updated_at": "2020-02-21T10:54:05Z"
    },
    {
      "author": "lehtoj",
      "author_association": "NONE",
      "body": "\"ModuleName\" was simply an example, not a real name obviously. I got the error with every module I tried, so I omitted the real names.\r\n\r\nFor example modules AzureAD and ExchangeOnlineManagement which are available in the PSGallery do not work in PS7. And as such I attempted to use the UseWindowsPowerShell switch to load them in PS5.1 remote session.\r\n\r\nBut instead I get the described error, which is not really helpful. I did not know the switch is limited to modules located in system32. If this is intended behavior, then the error message should be clarified to say so.",
      "created_at": "2020-02-21T11:23:32Z",
      "updated_at": "2020-02-21T11:23:32Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "I can not reproduce your error. With the exception of the three modules we know are problematic, I can load the others just fine in compatibility mode. \r\n\r\nYou say AZUREAD module is an issue. I just installed it and it works fine in PowerShell 7.   Here is what I see:\r\n![2020-02-21_11-28-12](https://user-images.githubusercontent.com/3630329/75031155-84a18d00-549d-11ea-84dd-62aa741b747c.png)\r\n\r\nNot ALl modules automatically use remoting. The Azure AD module is cross-platform and is used natively in PWSH 7 without using remoting. ",
      "created_at": "2020-02-21T11:31:11Z",
      "updated_at": "2020-02-21T11:31:11Z"
    },
    {
      "author": "lehtoj",
      "author_association": "NONE",
      "body": "You can import the modules fine in PS7, but neither Connect-AzureAD nor Connect-ExchangeOnline cmdlets work. They produce error \"Could not load type System.Security.Cryptography.SHA256Cng' from assembly 'System.Core\".\r\n\r\nWhich is the reason I wanted to use the UseWindowsPowerShell switch.\r\n\r\nNeither AzureAD or ExchangeOnline modules are cross-platform. Their cmdlets use .NET Framework namespaces. A known issue, but no timeline for fix.",
      "created_at": "2020-02-21T11:43:10Z",
      "updated_at": "2020-02-21T11:44:37Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "I see what you mean! I was using the AZ..accounts module (which does work) with the AzureAD commands - my bad. I can duplicate what you see.\r\n\r\nThis appears to be an issue with the module. The module is marked only with Desktop as the supported edition.  To resolve this is a challenge for the Azure team. \r\n\r\nThe Connect=EXOService has the same issue and the module is not marke as Core compatible.\r\n\r\n@iSazonov  - should both these modules get added to the deny list?\r\n",
      "created_at": "2020-02-21T12:13:10Z",
      "updated_at": "2020-02-21T12:13:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think it could be a temporary solution.",
      "created_at": "2020-02-21T12:57:20Z",
      "updated_at": "2020-02-21T12:57:20Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "I really think it is the best solution for RTM.  \r\n\r\nI strongly feel the product can not go out if there are unexpected surprises like this (and these are two module sets I had not yet tested).  \r\n\r\nIt basically tells the user: this is not going to work (today) in PowerShell 7. I think this is a better solution then failing with an error message that is NOT in any way actionable. I get why the error we are seeing here is generated, but the new user is not given any clues as to how to fix this issue.\r\n\r\nAt least with putting these modules in the deny list, you shift the problem to where the solutions lies, ie at the MSOnline and AzureAD product teams. \r\n\r\nI like the idea of PowerShell team having my back and not letting me load modules that just are not going to work. Today. And bacause that block list is in text - if a working module IS produced, i",
      "created_at": "2020-02-21T14:07:18Z",
      "updated_at": "2020-02-21T14:07:18Z"
    },
    {
      "author": "lehtoj",
      "author_association": "NONE",
      "body": "Please also note that there are two Exchange Online modules; Microsoft.Exchange.Management.ExoPowershellModule and ExchangeOnlineManagement.\r\n\r\nFormer is installed from https://portal.office.com and the latter from https://www.powershellgallery.com.\r\n\r\nThere is also predecessor of the AzureAD module, called MSOnline. Which is still very widely in use.",
      "created_at": "2020-02-21T14:59:50Z",
      "updated_at": "2020-02-21T15:06:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @anmenaga for information.",
      "created_at": "2020-02-21T19:14:34Z",
      "updated_at": "2020-02-21T19:14:34Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "The `The remote session with the name WinPSCompatSession  is not available` error is not supposed to happen; we need to get to the bottom of this, but I'm having difficulty with repro (tried on 2 machines) - module `AzureAD` version `2.0.2.76` from PSGallery:\r\nWhen loaded directly in PS Core `Connect-AzureAD` does produce `Cryptography.SHA256` errors;\r\nbut when loaded using `-UseWindowsPowerShell` `Connect-AzureAD` successfully logs me into AzureCloud.\r\n\r\n@doctordns do you also see `The remote session with the name WinPSCompatSession  is not available.` error?\r\n @lehtoj can you please try loading any other module with  `-UseWindowsPowerShell`, for example, what output do you get for following?:\r\n```\r\n# start a fresh PS Core\r\nImport-Module -Name PKI -UseWindowsPowerShell\r\nGet-Module\r\nGet-PSSession\r\n```\r\n\r\nSome other hopefully clarifying thoughts:\r\n* `I did not know the switch is limited to modules located in system32`\r\nit is not limited to system32 modules. In fact it was added for scenarios like you are trying to do - when the module is Not in system32, but user wants to use it with WindowsPS anyway.\r\n* `The module is marked only with Desktop as the supported edition.`\r\nThis is actually kind of misleading... `Install-Module` by default installs into user directory (e.g. `C:\\Users\\me\\Documents\\PowerShell\\Modules\\AzureAD`). But PS Core considers any module that is Not in system32 as PS Core-compatible. In other words, any module downloaded from PSGallery by default is considered PS Core-compatible. \r\n`Modules\\AzureAD\\2.0.2.76\\AzureAD.psd1` does not specify `CompatiblePSEditions` and [`get-module AzureAD -ListAvailable` displays that as `PSEdition` == `Desk`](https://github.com/PowerShell/PowerShell/blob/34f9b43514445a8ceac05794827072b35d0ea577/src/System.Management.Automation/FormatAndOutput/DefaultFormatters/PowerShellCore_format_ps1xml.cs#L1658), which is misleading. Looks like this is issue #7856 ",
      "created_at": "2020-02-22T01:29:58Z",
      "updated_at": "2020-02-22T01:29:58Z"
    },
    {
      "author": "lehtoj",
      "author_association": "NONE",
      "body": "@anmenaga I made a fresh Windows 10 virtual machine to test and installed PS7.0 RC3 on it.\r\n\r\nI tried importing the PKI module with the UseWindowsPowerShell switch, which worked as expected. Then I tried importing the AzureAD module, which also worked.\r\n\r\nUnfortunately Connect-AzureAD produces following errors.\r\n```\r\nConnect-AzureAD: One or more errors occurred.: The handle is invalid\r\nConnect-AzureAD: One or more errors occurred.\r\nConnect-AzureAD: The handle is invalid\r\nConnect-AzureAD: One or more errors occurred.: The handle is invalid\r\n```\r\n\r\nIf I use Enter-PSSession to enter the WinPSCompatSession and run Connect-AzureAD in there, I get more verbose errors.\r\n```\r\nConnect-AzureAD : One or more errors occurred.: The handle is invalid\r\nAt line:1 char:1\r\n+ Connect-AzureAD\r\n+ ~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : AuthenticationError: (:) [Connect-AzureAD], AadAuthenticationFailedException\r\n    + FullyQualifiedErrorId : Connect-AzureAD,Microsoft.Open.Azure.AD.CommonLibrary.ConnectAzureAD\r\n \r\nConnect-AzureAD : One or more errors occurred.\r\nAt line:1 char:1\r\n+ Connect-AzureAD\r\n+ ~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : AuthenticationError: (:) [Connect-AzureAD], AggregateException\r\n    + FullyQualifiedErrorId : Connect-AzureAD,Microsoft.Open.Azure.AD.CommonLibrary.ConnectAzureAD\r\n \r\nConnect-AzureAD : The handle is invalid\r\nAt line:1 char:1\r\n+ Connect-AzureAD\r\n+ ~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : AuthenticationError: (:) [Connect-AzureAD], Win32Exception\r\n    + FullyQualifiedErrorId : Connect-AzureAD,Microsoft.Open.Azure.AD.CommonLibrary.ConnectAzureAD\r\n \r\nConnect-AzureAD : One or more errors occurred.: The handle is invalid\r\nAt line:1 char:1\r\n+ Connect-AzureAD\r\n+ ~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Connect-AzureAD], AadAuthenticationFailedException\r\n    + FullyQualifiedErrorId : Microsoft.Open.Azure.AD.CommonLibrary.AadAuthenticationFailedException,Microsoft.Open.Azure.AD.CommonLibrary.ConnectAzureAD\r\n```\r\n\r\nThen I attempted to import the ExchangeOnlineManagement module with the UseWindowsPowerShell switch and run Connect-ExchangeOnline and Get-EXOMailbox, all worked fine. Very nice.\r\n\r\nNext Monday I will test what happens on PS7.0 RC2 as well as RC3 on my work laptop, which is where I originally experienced the \"The remote session with the name WinPSCompatSession is not available\" error. So I'll get back to you in a few days.",
      "created_at": "2020-02-22T08:14:12Z",
      "updated_at": "2020-02-22T08:18:39Z"
    },
    {
      "author": "lehtoj",
      "author_association": "NONE",
      "body": "Right, so. I tested again on my work laptop and... now the UseWindowsPowerShell switch works as expected. And I haven't even rebooted the laptop since, only opened a fresh PS7.0 RC2 session. Which I did multiple times last week as well, without results changing any.\r\n\r\nUnlike on the virtual machine earlier, both AzureAD and ExchangeOnlineManagement modules do work. I did not get \"The handle is invalid\" error.\r\n\r\nI honestly don't know why the UseWindowsPowerShell  switch produced the reported error last week, but now it does not. Perhaps there might be relation to VSCode and the PS extension, as I tend to only use VSCode. But I did do test VSCode too and could not replicate the error.\r\n\r\nAll things considered, seems to generally work as expected, with a few mysterious bugs. If you have any ideas how I might help to investigate the original issues as well as the invalid handle issue further, please let me know.",
      "created_at": "2020-02-24T06:17:43Z",
      "updated_at": "2020-02-24T06:17:43Z"
    },
    {
      "author": "MovGP0",
      "author_association": "NONE",
      "body": "I can confirm this on `PowerShell 7.0.0-rc.3`. Example: \r\n\r\n```powershell\r\n> Import-Module PKI\r\nGet-PSSession: The remote session with the name WinPSCompatSession  is not available.\r\n```\r\n\r\nhowever, this seems to work:\r\n\r\n```powershell\r\n> Import-Module PKI -UseWindowsPowerShell\r\nWARNING: Module PKI is loaded in Windows PowerShell using WinPSCompatSession remoting session; please note that all input and output of commands from this module will be deserialized objects. If you want to load this module into PowerShell Core please use 'Import-Module -SkipEditionCheck' syntax.\r\n```\r\n\r\nand this works too: \r\n```powershell\r\n> Import-Module PKI -SkipEditionCheck;\r\n```",
      "created_at": "2020-03-02T09:40:12Z",
      "updated_at": "2020-03-02T09:46:38Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "SO far as I can tell, the PKI module is core compatible\r\n\r\n```powershell\r\nPS Cert:\\CurrentUser\\My\\> gmo pki | ft name, CompatiblePSEditions\r\n\r\nName CompatiblePSEditions\r\n---- --------------------\r\npki  {Desktop, Core}\r\n```\r\nSo after importing the module, there should be no compatibility remoting serssion as the cmdlets are native. ",
      "created_at": "2020-03-02T11:55:32Z",
      "updated_at": "2020-03-02T11:55:32Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "`PKI module is core compatible` - this is good find. It turns out they've added `CompatiblePSEditions` field to `pki.psd1`. So on older systems (like Server 2016) the PKI module is considered PS-Core-incompatible and WinCompat will be auto-engaged when loading it; but on newer systems the module is marked as PS-Core-compatible so it will load naively.\r\n\r\n@MovGP0, @lehtoj  do you know if your environment uses some sort of error redirection mechanism (e.g. [redirect error stream to the regular output stream](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_redirection?view=powershell-7)) ?",
      "created_at": "2020-03-02T20:33:00Z",
      "updated_at": "2020-03-02T20:33:00Z"
    },
    {
      "author": "codykonior",
      "author_association": "NONE",
      "body": "I have this problem with Import-Module on PowerShell 7.0 RTM (Get-PSSession: The remote session with the name WinPSCompatSession  is not available), with these built-in Windows 10 modules:\r\n\r\n- FailoverClusters, it can be loaded with -SkipEditionCheck, but functions only work with Import-WinModule. Does not load with -UseWindowsPowerShell.\r\n- ScheduledTasks, it must be loaded with -SkipEditionCheck, but functions only work with Import-WinModule. Does not load with -UseWindowsPowerShell.\r\n- DnsClient. Does not load with -SkipEditionCheck or -UseWindowsPowerShell. It must be loaded with Import-WinModule instead.\r\n",
      "created_at": "2020-03-09T05:31:16Z",
      "updated_at": "2020-03-09T05:38:04Z"
    },
    {
      "author": "lehtoj",
      "author_association": "NONE",
      "body": "@anmenaga Nope, no such redirection is taking place.",
      "created_at": "2020-03-09T12:12:50Z",
      "updated_at": "2020-03-09T12:12:50Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "In my testing (using Server 1809):\r\n\r\n1. Failover clusters - works in compat mode. Does NOT work natively in Pwsh 7 (ie don't bother trying to load it with -SkipEditionCheck). It loads fine using -UseWindowsPowerShell. This module does NOT declare a CompatiblePSEditions tag. \r\n\r\n2. Importing ScheduledTasks module works OK natively. This module declares itself as Desktop AND Core. \r\n\r\n3.DNS CLient works natively. This module also declares itself as Desktop AND Core.\r\n",
      "created_at": "2020-03-09T14:59:43Z",
      "updated_at": "2020-03-09T15:00:08Z"
    },
    {
      "author": "codykonior",
      "author_association": "NONE",
      "body": "I manage a few hundred servers and OSs not just Server 2019 so your observations aren\u2019t valid for my environment.\r\n\r\nFurthermore the stuff I listed is accurate and the reason -UseWindowsPowerShell is broken is because of a bug that exhibits when $ErrorActionPreference = \u2018Stop\u2019. Later I found there\u2019s an open issue and a merge request in for it from someone else. \r\n",
      "created_at": "2020-03-09T15:42:15Z",
      "updated_at": "2020-03-09T15:42:15Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "This may be a compatibility issue - can you post the version numbers of the modules that are not working and which OS you tested under? And what specific issues.\r\n\r\nFor reference - I tested (client and server-side) on Windows Server 2019 1809. running from PowerShell 7.0.0.0 Here are the module versions  I saw\r\n\r\nFailoverClusters - Module Version 3.1.90.0  which is marked as Desktop (aka Windows PowerShell) only but loads/works in compatibility mode. I tested using both Import-Module and module autoload - both create the remoting session and import the module from that session successfully. I was able to test,  the module's commands via building and managing a 2-node failover cluster using iSCSI CSV, and to build a SOFS on the cluster. \r\n\r\nWhat, specifically, is meant by modules does 'not load'?\r\n\r\nCan you check to see if your version of this module is moarked accordingly as core compatible?\r\n\r\nScheduledTasks - Module version 1.0.0.0 and marked as compatible with Core. Some basic testing works as expected but have not delved deeply.  Are you meaning ScheduledTasks or PSScheduledTasks? The latter does **not** work.\r\n\r\nThe Scheduled Tasks module is marked as core compatible so loads natively - there is no reason to use the -UseWIndowsPowerShell switch to load the module. \r\n\r\nDNSClient - version 1.0.0.0 and marked as compatible with Core. Built a 2 domain forest, created a second forest, with X-forest trusts, and carried out a wealth of other operations all of which required DNS. Created multiple zones (forward and ptr), RRs etc. I see no issues at all in the Client (or Server0 modules.\r\n\r\nAs this module is marked as core compatible - no need to use the -UseWIndowsPowerShell script. Can you check to see if your version of this module is marked accordingly as core compatible?\r\n\r\nFinally - you mention Import-WinModule. That command is no longer needed. Import-Module has, in effect, incorporated the functionality of Import-WInModule (and even stops known to not work at all in PowerShell 7 modules). \r\n\r\n\r\n",
      "created_at": "2020-03-09T16:36:32Z",
      "updated_at": "2020-03-09T16:36:32Z"
    },
    {
      "author": "codykonior",
      "author_association": "NONE",
      "body": "No need to go into it further. \r\n\r\nFor others, the fix is on #11980 (disclaimer: I haven\u2019t tested the fix). Until then use Import-WinModule as it doesn\u2019t have this bug. It\u2019s still needed until this is resolved. ",
      "created_at": "2020-03-09T18:10:31Z",
      "updated_at": "2020-03-09T18:13:10Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #11980, which has now been successfully released as `v7.1.0-preview.1`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.1)\n",
      "created_at": "2020-03-26T17:48:06Z",
      "updated_at": "2020-03-26T17:48:06Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #11980, which has now been successfully released as `v7.0.1`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.1)\n",
      "created_at": "2020-05-14T22:52:48Z",
      "updated_at": "2020-05-14T22:52:48Z"
    }
  ],
  "created_at": "2020-02-20T13:39:37Z",
  "labels": [
    "Issue-Question"
  ],
  "number": 11903,
  "state": "closed",
  "title": "The remote session with the name WinPSCompatSession  is not available",
  "updated_at": "2020-05-14T22:52:48Z"
}