{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6807",
  "author": "mklement0",
  "body": "<sup>For the ultimate resolution, see https://github.com/PowerShell/PowerShell-Docs/issues/2402</sup>\r\n\r\n\r\nFrom what I understand, use of `[ref]` only makes sense when applied to a _variable_  or _parameter_ [variable].\r\n\r\nAssuming this assumption holds, perhaps nonsensical uses such as `[ref] 'foo'` or `[ref] $hashtable.key1` could be flagged as syntax errors.\r\n\r\nThe confusion that not preventing such pointless uses can create is exemplified by [this SO question](https://stackoverflow.com/q/50125273/45375), in which the OP thought they could create a persistent reference to a specific hashtable entry as follows (simplified):\r\n\r\n```powershell\r\n$Tree = @{ TextValue = \"main\"; Children = @() }\r\n # Mistaken attempt to create a \"pointer\" to a specific hashtable entry\r\n$Pointer = [ref] $Tree.Children  # This should be prevented.\r\n# Mistaken attempt to indirectly append  to $Tree.Children\r\n$Pointer.Value += $Item\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\nWritten as of:\r\n\r\n```powershell\r\nPowerShell Core v6.0.2\r\n```\r\n",
  "closed_at": "2018-05-10T15:12:27Z",
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "`[ref]` works just fine with data structures:\r\n```\r\nPS[1] (584) > $x = [pscustomobject] @{a=@{b=2; c=3}}\r\nPS[1] (585) > $r = [ref] $x\r\nPS[1] (586) > $r.Value.a.abc = 123\r\nPS[1] (587) > $x\r\na\r\n-\r\n{c, abc, b}\r\n```\r\nIt does exactly what you would expect from other languages: it creates a _durable_ reference to a _specific_ instance. The SO item in question was using `[ref]` when they didn't need to not understanding that they already had a reference to the parent object and also not understanding how array concatenation is done in PowerShell. If they had assigned to an _element_ of the array it would have worked fine. But by appending an element, they created a new object which, of course, did not update the reference.\r\n",
      "created_at": "2018-05-03T05:50:22Z",
      "updated_at": "2018-05-03T05:50:22Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @BrucePay, but this issue is not about how `[ref]` functions when it is used _as intended_, it is about the syntax not preventing _nonsensical uses_.\r\n\r\n> [ref] works just fine with data structures:\r\n\r\nWhat you're demonstrating is not per se about _data structures_ (that aspect is incidental), you're demonstrating use with a _variable_, i.e., effectively creating a variable _alias_ (this is also covered in [my answer](https://stackoverflow.com/a/50125934/45375) to the SO question).\r\n\r\n>  If they had assigned to an element of the array\r\n\r\nYes, it would have worked - but it also would have been _pointless_. Pointing to a piece of _data_ (a) only makes sense with instances of _reference types_ and (b) you can use a _regular_ variable to do that - using `[ref]` in this scenario adds nothing and only complicates matters.\r\n\r\nThus, my point was that using it with a [parameter] _variable_ is the _only_ use that makes sense\r\nand that users can be spared confusion if the language itself prevents other uses.\r\n\r\nOr am I missing other legitimate uses of `[ref]`?",
      "created_at": "2018-05-03T11:12:54Z",
      "updated_at": "2018-05-03T11:12:54Z"
    },
    {
      "author": "the-CPU1",
      "author_association": "NONE",
      "body": "Since I'm the OP of the item in question, I thought I'd provide a little more insight into what I was trying to do and how I got to the bad `[ref]` use. First, here's a simplified version of the code I was trying to use:\r\n\r\n     $List = @()\r\n     while (!($Result.EOF)) {\r\n         $Pointer = [ref] $List\r\n         foreach ($Field in $Result.Fields) {\r\n             $Pointer.Value += @{ DataValue = $Field.Value; Children = @() }\r\n             $Pointer = [ref] ($Pointer.Value[$Pointer.Value.Count - 1].Children)\r\n         }\r\n         $Result.MoveNext()\r\n     }\r\n\r\nI hope this code explains why I was trying to point to an array element instead of just using the parent variable containing the array.\r\n\r\nSecond, I did understand that there might be an issue with array concatenation, that is why I first attempted to test with a simple `[ref]` to an array variable. Seeing that it worked (but not knowing how the aliases worked), I made an incorrect assumption that I could create a persistent pointer to an array member. When that didn't work, I looked for an explanation at SO, which I received. \r\n\r\nSo, now I know that creating references to a piece of data has no practical uses, and I should be fine using `[ref]` going forward as long as I know what is just data and what is a reference to data (and also keeping in mind aliases and how `+=` works on arrays).",
      "created_at": "2018-05-03T16:41:00Z",
      "updated_at": "2018-05-03T17:03:06Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@the-CPU1: Thanks for the explanation - what you did is an understandable thing to try, especially given that the language doesn't prevent you from doing so.\r\n\r\nSo, if there's consensus that applying `[ref]` only ever makes sense when applied to a _variable_, perhaps trying anything else can be flagged as a syntax error.\r\nThat would spare future users the confusion over why their code doesn't work as expected.\r\n",
      "created_at": "2018-05-03T17:16:39Z",
      "updated_at": "2018-05-03T17:16:39Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 \r\n> you're demonstrating use with a variable,\r\n\r\nBad example - how about this :-)\r\n```\r\nPS[2] (611) > $r = [ref] ([system.collections.generic.list[object]]::new())\r\nPS[2] (612) > $r.Value.Add(1)\r\nPS[2] (613) > $r.Value.Add(2)\r\nPS[2] (614) > $r.Value\r\n1\r\n2\r\n```\r\nor this\r\n```\r\nPS[2] (626) > $rerr =  [ref] ([System.Collections.ObjectModel.Collection[System.Management.Automation.PSParseError]]::new())\r\nPS[2] (627) > $null = [system.management.automation.psparser]::Tokenize(\"2 2 2\", $rerr)\r\nPS[2] (628) > $rerr.value\r\n\r\nToken                                Message\r\n-----                                -------\r\nSystem.Management.Automation.PSToken Unexpected token '2' in expression or statement.\r\nSystem.Management.Automation.PSToken Unexpected token '2' in expression or statement.\r\n```\r\n@the-CPU1 \r\n>  I could create a persistent pointer to an array member\r\n\r\nYou get a persistent pointer to the _data_ stored in in the array member. Getting a pointer to a specific location in memory is not supported in PowerShell.\r\n\r\n> I should be fine using [ref] going forward as long as I know what is just data and what is a reference to data \r\n\r\nEverything in PowerShell is already a pointer (object reference) so the set of circumstances where `[ref]` is _needed_ is very small - basically with APIs that have In/Out/Ref parameters. COM APIs in particular tend to have `out` parameters, but, as the example above shows, it can be necessary even with PowerShell APIs. \r\n",
      "created_at": "2018-05-03T20:22:26Z",
      "updated_at": "2018-05-03T20:22:26Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@BrucePay:\r\n\r\n> `$r = [ref] ([system.collections.generic.list[object]]::new())`\r\n\r\nThat's an example of _pointless_ use of `[ref]`, because just using the reference _directly_ gives you the same functionality, and does so more simply:\r\n\r\n```powershell\r\n$r = [system.collections.generic.list[object]]::new() \r\n$r.Add(1)\r\n$r.Add(2)\r\n$r  # prints the list\r\n```\r\n\r\nUnless I'm missing something, there is _no good reason_ to use `[ref]` in this scenario.\r\n\r\n---\r\n\r\n> `$rerr =  [ref] ([System.Collections.ObjectModel.Collection[System.Management.Automation.PSParseError]]::new())`\r\n\r\nThe `[ref]`'s purpose  is to type the _variable_ - `$rerr` - and therefore better written as follows:\r\n\r\n```powershell\r\n[ref] $rerr = ([System.Collections.ObjectModel.Collection[System.Management.Automation.PSParseError]]::new())\r\n```\r\n\r\nOr, to localize the by-reference passing:\r\n\r\n ```powershell\r\n# Declare as regular variable.\r\n$err = ([System.Collections.ObjectModel.Collection[System.Management.Automation.PSParseError]]::new())\r\n\r\n# Pass with ad-hoc [ref] cast\r\n$null = [system.management.automation.psparser]::Tokenize(\"2 2 2\", [ref] $err)\r\n\r\n# $err - still a regular variable - was assigned a value in the method call.\r\n$err\r\n```\r\n\r\nNote that this idiom is also the form found in the v3.0 language spec.\r\n\r\n",
      "created_at": "2018-05-03T20:41:03Z",
      "updated_at": "2018-05-03T20:41:03Z"
    },
    {
      "author": "the-CPU1",
      "author_association": "NONE",
      "body": "@BrucePay:\r\n\r\n> Everything in PowerShell is already a pointer (object reference) so the set of circumstances where [ref] is needed is very small - basically with APIs that have In/Out/Ref parameters.\r\n\r\nThis is what got me confused initially. Suppose we have a function:\r\n\r\n    function foo([ref] $a) { $a.value += 1 }\r\n\r\nI was trying to see if something like this would work:\r\n\r\n    $b = @(0); foo ([ref] $b); $b\r\n\r\nAnd it did. But then this call didn't work:\r\n\r\n    $c = @(@(0)); foo ([ref] $c[0]); $c[0]\r\n\r\nAnd this doesn't work either:\r\n\r\n    $c = @(@(0)); $d = $c[0]; foo ([ref] $d); $c[0]\r\n\r\nI thought that if first would work, so would the second one, and vice versa. I do understand why it didn't work in the second call - that's the way arrays and `+=` work. \r\n\r\nIf I were to make a guess, I'd think that the first call was specifically coded for by the developers (aka aliases), since there might be a need for a user to pass an array to a function and then modify the size of that array. I'd also guess that the second call behaves \"normally\", as one would expect if there were no aliases.",
      "created_at": "2018-05-04T00:27:45Z",
      "updated_at": "2018-05-04T00:27:45Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I think you misunderstand the way the `@()` operator works.  It does *not* always wrap the content in a new array.  What it does is create an array **if** the content is a scalar value (or $null). If the content is already an array, `@()` is a no-op.  ",
      "created_at": "2018-05-04T00:56:12Z",
      "updated_at": "2018-05-04T00:56:52Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@the-CPU1:\r\n\r\n@rkeithhill  correctly points out that you have a misconception about `@()`, which, in short, is not an array _constructor_, but an array _guarantor_.\r\n\r\nHowever, even if we construct the nested array the way you intended - i.e., using `, , 0` instead of `@(@(0))`, your commands cannot work:\r\n\r\n```powershell\r\n$c = , , 0; foo ([ref] $c[0]); $c[0]\r\n```\r\n\r\nThe problem here is again that `[ref]` is being used with a _value_, not a _variable_.\r\nYou're passing a reference to the inner _array_, and _not_ a reference to the _location of that array within the value of `$c`_ - the latter cannot be done, because it would require an _additional_ level of indirection (and, as @BrucePay states, getting a pointer to a specific location in memory is not supported).\r\n\r\n```powershell\r\n$c = , , 0; $d = $c[0]; foo ([ref] $d); $c[0]\r\n```\r\n\r\nThis is basically the same scenario above, except that the by-reference passing works for the _intermediate_  variable `$d`, because there `[ref]` _is_ used on a _variable_ - but, again, it cannot refer to the location of the nested array inside `$c`.\r\n\r\n> I'd think that the first call was specifically coded for by the developers (aka aliases), since there might be a need for a user to pass an array to a function and then modify the size of that array.\r\n\r\nNote that `[ref]` is not about _arrays_ specifically. \r\nIt's about passing _any_ variable _by reference_ to a method or function, typically so that the callee can modify it.\r\n\r\nAs @BrucePay states, you need `[ref]` to call .NET methods that have `ref` or `out` or `in` parameters - see [the docs](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/in-parameter-modifier) -  or to call PowerShell functions that declare `[ref]` parameters, but that is rare.\r\n\r\nAnd while you _can_ use `[ref]` to create an effective alias of another variable outside the context of parameter passing (e.g., `$v = 1; $vAlias = [ref] $v; $vAlias.Value++; $v`), that is even rarer.\r\n\r\n---\r\n\r\n@rkeithhill: \r\n\r\nJust to be clear: `@()` with an array operand is _conceptually_ a no-op, but not _technically_: It actually _clones_ something that already is an array (the only exception being array _literals_ (explicitly enumerated elements such as `1, 2, 3`), an optimization introduced in v5.1 - see #4280)\r\n\r\nAs an aside: While maintaining reference equality is rarely a concern in PowerShell, this cloning is problematic from a performance perspective.\r\n",
      "created_at": "2018-05-04T02:17:54Z",
      "updated_at": "2018-05-05T12:49:58Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "An attempt to summarize and clear (at least my) conceptual fog (arrived at without source-code analysis; do let me know if and where I'm wrong):\r\n\r\n* The purpose of `[ref]` ([`[System.Management.Automation.PSReference]`](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.psreference?view=powershellsdk-1.1.0)) is to enable passing PowerShell _variables_ _by reference_ to .NET method _parameters_ marked as `ref`/ `out` / `in` or, rarely, to PowerShell function parameters typed as `[ref]` \r\n\r\n  * When used as such, a regular PowerShell variable is _directly cast_ to `[ref]`, the variable is wrapped so that modifying the `[ref]` instance's `.Value` property is equivalent to assigning to the variable directly (the docs suggest that `[ref]` essentially wraps a `[psvariable]` instance in this case).\r\n\r\n    * This indirect access to a variable _only_ works with a _direct cast_:\r\n       * `[ref] $var # OK`\r\n       * `[ref] ($var)    # !! Does NOT work`\r\n       * `[ref] $ref = $var    # !! Does NOT work`\r\n\r\n    * The conceptually cleanest idiom is:\r\n       * Define a _regular_ PowerShell variable.\r\n       * Cast it to `[ref]` _as part of the invocation only_; e.g.:\r\n`[System.Management.Automation.PSParser]::Tokenize('foo', [ref] $err)`\r\n       * That way, the by-reference passing is a localized aspect of the given invocation; this mirrors C# usage, where you _must_ use the `ref` / `out` / `in` keywords on invocation.\r\n\r\n  * Outside of this use, there's no good reason to use `[ref]`:\r\n\r\n     * There is no point in using `[ref]` with a _value_ rather than a _variable_ (something other than ultimately a `[psvariable]`) - see below.\r\n\r\n     * If you really want an alias variable [wrapper], use `Get-Variable`:  \r\n`$v = 666; $vObj = (Get-Variable v); $vObj.Value++; $v # -> 667` \r\n\r\n---\r\n\r\n**Why `[ref]` should not be used with _values_ (non-variables)**\r\n\r\nNote: There is one edge case: `[ref] $null` is useful for cases where you don't care about what the target method/function returns via the by-reference parameter; that said, you can conceive of `$null` as a _variable_ too (it certainly is that _syntactically_).\r\n\r\nWhen you use `[ref]` with a _value_:\r\n\r\n  * It obviously doesn't work with the cast-to-`[ref]`-on-invocation idiom, whose purpose is to pass a _variable_.\r\n  * **If you save a `[ref] <non-variable>` expression in a variable (e.g., `$ref = [ref] (1, 2, 3)`), you're effectively creating a more cumbersome analog to a regular PowerShell variable in that you must then use `.Value` to access the enclosed value.**\r\n     * While you _can_ then pass `$ref` to a `ref` / `out` / `in` parameter directly - in which case you _mustn't_ use `[ref]` on invocation - it leaves you with having to access the value returned via `$ref.Value`.\r\n\r\n    * Again: the cast-to-`[ref]`-on-invocation idiom is superior in every respect: `$var = 1, 2, 3` on _initialization_, then `[ref] $var` _on invocation_.\r\n\r\n    * Outside the context of by-reference parameter passing, use of `[ref]` is pointless:\r\n         * `$ref = [ref] (1, 2, 3) # pointless; just use the expression result directly`\r\n         * It can lead you to mistakenly think that it's possible to create a reference to _properties inside other objects_ (the confusion that prompted creation of this issue).\r\n\r\nTherefore,  my preference is to disallow `[ref]` with a non-variable operand, but given that it _technically_ works, it would be a breaking change.\r\n\r\n---\r\n\r\n[`Get-Help about_Ref`](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_ref) is currently a mixed bag:\r\n\r\n* It commendably shows only the cast-to-`[ref]`-on-invocation idiom.\r\n\r\n* The type's primary purpose - use with .NET `ref` / `out` / `in` parameters is not mentioned.\r\n\r\n* The description is confusing.\r\n\r\n---\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-05-05T20:12:17Z",
      "updated_at": "2019-10-17T17:41:01Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Re improving the documentation: please see https://github.com/PowerShell/PowerShell-Docs/issues/2402.",
      "created_at": "2018-05-06T13:03:05Z",
      "updated_at": "2018-05-06T13:03:19Z"
    },
    {
      "author": "the-CPU1",
      "author_association": "NONE",
      "body": "@mklement0 \r\n\r\n> Note that [ref] is not about arrays specifically.\r\nIt's about passing any variable by reference to a method or function, typically so that the callee can modify it.\r\n\r\nThat is what I remember from my C days. In my first example above, inside the callee `foo` any manipulation of variable `a` is effecting caller's variable `b`, *including moving it from one memory location to another*. I think I have a better picture now.\r\n\r\n@mklement0 \r\n\r\n> It can lead you to mistakenly think that it's possible to create a reference to properties inside other objects \r\n\r\nOne more question on this:\r\n\r\n    $a = @{ Children = New-Object System.Collections.ArrayList }\r\n    $b = [ref] $a.Children\r\n    $b.Value.Add(1) \r\n\r\nI understand that I can simply reference `$a` directly here, but for my purposes I was trying to create a function to create (and another one to traverse) a series of nested array lists (a tree-like structure). Even though this sort of scenario would be rare, and can probably be done without nesting, it was a quick and easy solution for me.",
      "created_at": "2018-05-07T16:01:47Z",
      "updated_at": "2018-05-07T16:01:47Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@the-CPU1:\r\n\r\n> In my first example above, inside the callee foo any manipulation of variable `a` is affecting caller's variable `b`\r\n\r\nIndeed: `[ref] $var` is special in that it truly creates a reference to the variable _object_ behind the scenes, not its _present value_.\r\n\r\n---\r\n\r\nI understand the intent behind\r\n\r\n```powershell\r\n$a = @{ Children = New-Object System.Collections.ArrayList }\r\n$b = [ref] $a.Children\r\n$b.Value.Add(1)\r\n```\r\n\r\nbut the point is that the use of `[ref]` here creates a  _pointless wrapper_. You can simply assign `$a.Children`  directly to a regular variable and get the same effect:\r\n\r\n```powershell\r\n$a = @{ Children = New-Object System.Collections.ArrayList }\r\n$b = $a.Children  # No need for [ref] - obtain a reference to the array list\r\n$b.Add(1)         # Operate on the array list directly.\r\n```\r\n\r\nAgain, note that this only works because the value of the `Children` entry is an instance of a .NET _reference type_.\r\nIf it were an instance of a _value type_ (e.g., `666`), this approach _fundamentally_ wouldn't work - whether or not you use the `[ref]` wrapper.\r\n",
      "created_at": "2018-05-07T16:19:49Z",
      "updated_at": "2018-05-07T16:19:49Z"
    },
    {
      "author": "the-CPU1",
      "author_association": "NONE",
      "body": "That last example explains a lot.\r\n\r\nThere really isn't a good reason to use `[ref]` outside of referenced parameters. ",
      "created_at": "2018-05-07T21:40:16Z",
      "updated_at": "2018-05-07T21:40:43Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "I sometimes use `ref` to force a value type to be a reference type.  For example capturing a value from a child scope.\r\n\r\n```powershell\r\n$innerVar = [ref] 0\r\n& { $innerVar.Value = 10 }\r\n$innerVar.Value\r\n# 10\r\n```\r\n\r\nYou *could* use a bunch of other things here like `Nullable<>` or even just wrapping it in a `PSObject`. But `ref` is nice and short, can be cast from anything, can hold anything, and the name fits.",
      "created_at": "2018-05-10T12:11:40Z",
      "updated_at": "2018-05-10T12:11:40Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SeeminglyScience:\r\n\r\nThat's a good example in principle, but note that it isn't about _value_ types - it's about (conveniently) _modifying a variable in a parent scope_.\r\n\r\nWithout the scoping issue involved, again a simple variable will do - note the use of `.` rather than `&`, which creates _no_ child scope:\r\n\r\n```powershell\r\n$var = 0\r\n. { $var = 10 }\r\n$var # 10\r\n```\r\n\r\nBecause `&` creates a child scope, you do need an indirect reference, as demonstrated in your example.\r\n\r\nImplementing the same thing without `[ref]` would indeed be clunky (though it has the advantage of not needing `.Value` afterwards):\r\n\r\n```powershell\r\n$var = 0\r\n& { (Get-Variable var -Scope 1).Value = 10 }\r\n$var # 10\r\n```\r\n\r\nSo, as long as `about_Ref` is updated to properly frame the two - disparate - cases in which `[ref]` makes sense - use with APIs, use a convenient `Get-Variable` alternative - perhaps that's all we need.\r\n",
      "created_at": "2018-05-10T12:37:26Z",
      "updated_at": "2018-05-10T12:47:18Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> That's a good example in principle, but note that it isn't about value types - it's about (conveniently) modifying a variable in a parent scope.\r\n\r\nWell, yes and no.  This is just semantics but you aren't modifying the variable.  The variable in the child scope is a different variable but it holds a reference to the same object or the value of a value type.  I mentioned value types because if the variable instead held a reference type you could adjust it as you would in the parent scope (with the exception of replacing it entirely)\r\n\r\nBut with a value type you need to either change the value of the variable from the previous scope (like your example) or place it into a reference type.\r\n\r\nMore specifically I'd say it's useful for creating an explicit reference to an object.",
      "created_at": "2018-05-10T12:55:10Z",
      "updated_at": "2018-05-10T12:55:10Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SeeminglyScience:\r\n\r\nI see what you're saying and \"it's useful for creating an explicit reference to an object\" is a good summary.\r\n\r\nAs the whole discussion here shows, users need guidance with respect to the primary purpose of `[ref]` and the secondary one that you describe.\r\n\r\nThis guidance is missing from the documentation, so let's try to summarize in preparation for updating it:\r\n\r\n*  The primary purpose of `[ref]` ([`[System.Management.Automation.PSReference]`](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.psreference?view=powershellsdk-1.1.0)) is to enable passing PowerShell _variables_ _by reference_ to .NET method _parameters_ marked as `ref`/ `out` / `in` or, rarely, to PowerShell function parameters typed as `[ref]`.\r\n   * In this usage, `[ref]` is applied to a _variable_, and the resulting `[ref]` instance can be used to indirectly modify that variable's value.\r\n\r\n* Secondarily, you may also use `[ref]` as a general-purpose object holder.\r\n   * In this usage, `[ref]` is applied to a _value_ (data) - typically an instance of a _value type_.\r\n   * In many scenarios you can use a regular variable or parameter instead, but this approach is useful as a concise way to modify a (value-type) value in a descendent scope - without having to _explicitly_ pass a value holder (such as via a `[ref]` _parameter_).  \r\nThis technique is useful in scenarios where passing an explicit value holder is undesired (for brevity) or not possible (e.g., in script-block parameter values - see below).\r\n\r\nDoes that sound correct and comprehensive to you?\r\n\r\n---\r\n\r\nYour example inspired me to rethink a scenario in which I did use `Get-Variable` (clunkily) in the past:\r\n\r\nIf you use script-block parameter values, such as for calculating the value of the `Rename-Item`'s `-NewName` parameter from each pipeline input object, such script blocks run in a _child_ scope, so modifying a variable in the _caller_'s scope directly is not an option (and neither is passing _arguments_ to the script block in this context).\r\n\r\nI solved that problem with `Get-Variable` as follows (in this case, an index (sequence number) needed to be maintained in the caller's context):\r\n\r\n```powershell\r\n$i = 0; $iVar = Get-Variable -Name i\r\nGet-ChildItem -File $setPath | Rename-Item -NewName { ... $iVar.Value++ ...  }\r\n```\r\n\r\nBut your technique enables a more elegant solution:\r\n\r\n```powershell\r\n$iRef = [ref] 0\r\nGet-ChildItem -File $setPath | Rename-Item -NewName { ... $iRef.Value++ ...  }\r\n```\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-05-10T14:19:07Z",
      "updated_at": "2018-05-10T14:24:49Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 \r\n\r\n> Does that sound correct and comprehensive to you?\r\n\r\nYes that is an excellent summary \ud83d\udc4d ",
      "created_at": "2018-05-10T14:28:21Z",
      "updated_at": "2018-05-10T14:29:01Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @SeeminglyScience.\r\n\r\nI've transferred the relevant information to https://github.com/PowerShell/PowerShell-Docs/issues/2402, so we can close this.",
      "created_at": "2018-05-10T15:12:27Z",
      "updated_at": "2018-05-10T15:12:27Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "`SORT` returns bogus results with `[REF]`:\r\n```powershell\r\n, (\r\n([REF] 0, [REF] 1), ([REF] 1, [REF] 0) |\r\n % { , ($_, { $_ | SORT -T:1 | % VALUE }) } |\r\n % { , ($_[0]) | % $_[1] }\r\n) |\r\n % { $_[0] | SHOULD -BE $_[1] }\r\n```\r\nExplanation for hoomans (in case any come around): \r\n1. Create two equal but differently ordered sequences of integers, wrapping each element into a reference!\r\n2. Pair each sentence with an instruction to extract the value of each of the the smallest elements of the result!\r\n3. Execute said instruction on each pair!\r\n4. Verify that both values are equal!\r\n\r\nIs this a problem with `SORT` or a problem with `[REF]`?\r\nWorkaround:\r\n```powershell\r\n, (\r\n([REF] 0, [REF] 1), ([REF] 1, [REF] 0) | % { , ($_, { $_ | SORT VALUE -T:1 | % VALUE }) } | % { , ($_[0]) | % $_[1] }\r\n) |\r\n % { $_[0] | SHOULD -BE $_[1] }\r\n```\r\nThe workaround means to explicitly sort by value.\r\nOTOH, if I replace `SORT -T:1` with `MEASURE -MIN`, `MEASURE` correctly fails.\r\n\r\n",
      "created_at": "2020-07-28T16:05:01Z",
      "updated_at": "2020-07-28T16:14:40Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@yecril71pl ref just isn't sortable.  It's probably doing `ToString` which will result in the same string for all `ref`'s of the same type.",
      "created_at": "2020-07-28T16:21:31Z",
      "updated_at": "2020-07-28T16:21:31Z"
    }
  ],
  "created_at": "2018-05-03T02:37:08Z",
  "labels": [
    "Issue-Discussion",
    "Resolution-External"
  ],
  "number": 6807,
  "state": "closed",
  "title": "Restrict use of [ref] to variables",
  "updated_at": "2020-07-28T16:21:31Z"
}