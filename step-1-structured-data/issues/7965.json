{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7965",
  "author": "larssb",
  "body": "I followed the good advice in #7852. However I'm having some issues building. I think especially you @iSazonov would be of great help. If you would be so kind.\r\n\r\nI have a setup for my HealOps module according to the fine guide by @KevinMarquette. [Here it is](https://kevinmarquette.github.io/2018-08-04-Powershell-Standard-Library-Binary-Module/?utm_source=twitter&utm_medium=post#hybrid-modules). However, when I do the `dotnet build` command when in the `.../src` folder of the HealOps project I get the following error:\r\n\r\n```Text\r\nMicrosoft (R) Build Engine version 15.4.8.50001 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nTestJsonCommand.cs(55,57): error CS0103: The name 'TestJsonCmdletStrings' does not exist in the current context [/gitRepos/HealOps/src/HealOps.csproj]\r\nTestJsonCommand.cs(80,61): error CS0103: The name 'TestJsonCmdletStrings' does not exist in the current context [/gitRepos/HealOps/src/HealOps.csproj]\r\nTestJsonCommand.cs(95,53): error CS0103: The name 'TestJsonCmdletStrings' does not exist in the current context [/gitRepos/HealOps/src/HealOps.csproj]\r\n\r\nBuild FAILED.\r\n\r\nTestJsonCommand.cs(55,57): error CS0103: The name 'TestJsonCmdletStrings' does not exist in the current context [/gitRepos/HealOps/src/HealOps.csproj]\r\nTestJsonCommand.cs(80,61): error CS0103: The name 'TestJsonCmdletStrings' does not exist in the current context [/gitRepos/HealOps/src/HealOps.csproj]\r\nTestJsonCommand.cs(95,53): error CS0103: The name 'TestJsonCmdletStrings' does not exist in the current context [/gitRepos/HealOps/src/HealOps.csproj]\r\n    0 Warning(s)\r\n    3 Error(s)\r\n\r\nTime Elapsed 00:00:02.35\r\n```\r\n\r\nI've tried looking around to find a way to fix this. What I can conclude (not entirely sure that I'm right about it). Is that I need to somehow tell the build where the `TestJsonCmdletStrings.resx` file is.\r\nI do have it included in the HealOps module, but the build cannot find it. I tried reading:\r\n\r\n- [About PS development and resx files](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/resx-files.md)\r\n- [PowerShell build module](https://github.com/PowerShell/PowerShell/blob/master/build.psm1)\r\n- [The Pester test for resource validation](https://github.com/PowerShell/PowerShell/blob/master/test/powershell/engine/ResourceValidation/TestRunner.ps1)\r\n- [How-to on building on MacOS](https://github.com/PowerShell/PowerShell/blob/master/docs/building/macos.md)\r\n- [This one looks good. Build internals](https://github.com/PowerShell/PowerShell/blob/master/docs/building/internals.md)\r\n\r\nThe last link, am I right that it is the one to follow? If so, maybe there is an easier way for me, when all I want to do, at least for now, is to add the `Test-Json` cmdlet code to my HealOps project.\r\nIt seems as quite some work for building the `Test-Json` cmdlet.\r\n\r\nI hope you can give me a tip or two. Thank you a million. ",
  "closed_at": "2018-10-09T01:14:44Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "If you import the build module locally from `.\\build.psm1` in the repository root, you can run the `Start-PSBuild -ResGen` command to build PS while generating the .cs files from the .resx files.\r\n\r\nOnce the command generates the files, you'll find the file you need to pull from at `.\\src\\Microsoft.PowerShell.Commands.Utility\\gen\\TestJsonCmdletStrings.cs`\r\n\r\nYou may need to modify namespaces and suchlike to ensure that the commands you're running can see the file where you put it in your own project.",
      "created_at": "2018-10-07T21:15:53Z",
      "updated_at": "2018-10-07T21:15:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Currently .Net Core doesn't support strong typed resources so we have ResGen in PowerShell Core repo. You have options: (1) re-use our ResGen, (2) Only grab generated file, (3) Use non-strong typed resources.",
      "created_at": "2018-10-08T03:42:11Z",
      "updated_at": "2018-10-08T03:42:11Z"
    },
    {
      "author": "larssb",
      "author_association": "NONE",
      "body": "Thank you so much for the info and help to the both of you (@vexx32 and @iSazonov). I will try your suggestions. \r\nI will see if I can get to it later today.\r\n\r\nThank you.",
      "created_at": "2018-10-08T07:34:27Z",
      "updated_at": "2018-10-08T07:35:52Z"
    },
    {
      "author": "larssb",
      "author_association": "NONE",
      "body": "I got it working by using your guide @vexx32. Thank you so much. Thanks also goes out to you @iSazonov. I ended up doing \"Option 2\".\r\n\r\nFor \"Option 1\". How would I actually use \"your\" ResGen? To be honest I'm not a .NET framework wiz. So I don't quite get all the semantics here.\r\n\r\nThank you.",
      "created_at": "2018-10-08T19:13:21Z",
      "updated_at": "2018-10-08T19:13:21Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@larssb as noted by @vexx32 if you use the `build.psm1` module in this repo with the `-resgen` switch, it will generate the strongly typed resources for you.  Since resgen isn't supported by `dotnetcli` today, we have our own implementation [here](https://github.com/PowerShell/PowerShell/tree/master/src/ResGen)",
      "created_at": "2018-10-09T01:14:44Z",
      "updated_at": "2018-10-09T01:14:44Z"
    }
  ],
  "created_at": "2018-10-07T20:34:22Z",
  "number": 7965,
  "state": "closed",
  "title": "Follow-up to #7852 - Test-Json command. Issue with building.",
  "updated_at": "2018-10-09T01:14:44Z"
}