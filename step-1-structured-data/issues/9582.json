{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9582",
  "author": "mklement0",
  "body": "`Import-Module` can be:\r\n\r\n* _implicitly_ scope-specific, if the same module is imported by different other modules\r\n\r\n* _explicitly_ scope-specific, via `-Scope Local` (or `-Scope Global`).\r\n\r\nBy contrast, certain aspects of module handling are currently _invariably session-global_, seemingly due to behind-the-scenes session-global module caching:\r\n\r\n* The `ScriptsToProcess` module manifest key is only honored _once_ per session, namely in whatever scope happens to import the module _first_.\r\n\r\n* `Remove-Module` - which doesn't have a `-Scope` parameter - _session-globally_ unloads a module, so that different scopes that had imported the module scope-locally later cannot unload that module anymore, which means that all its exports _linger_.\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\nDescribe \"Global module caching\" {\r\n  BeforeAll {\r\n    Push-Location TestDrive:/\r\n    New-Item -Type Directory ./tm\r\n    # .ps1 file to use with ScriptsToSource\r\n    @'\r\n    $foo = 'bar'\r\n'@ > tm/toSource.ps1\r\n    # .psm1 file (root module)\r\n    @'\r\nfunction foo { 'bar too' }\r\n'@ > tm/tm.psm1\r\n   # Create the manifest.\r\n   New-ModuleManifest -Path ./tm/tm.psd1 -ScriptsToProcess toSource.ps1 -RootModule tm.psm1\r\n  }\r\n  AfterAll {\r\n    Pop-Location\r\n  }\r\n  It \"ScriptsToProcess is honored on every import.\" {\r\n    & {\r\n      Import-Module -Scope Local ./tm -Verbose\r\n      $foo | Should -Be 'bar' # 1st\r\n    }\r\n    & {\r\n      # !! Because Import-Module was previously called in a different\r\n      # !! scope, the ScriptsToProcess script isn't sourced again.\r\n      Import-Module -Scope Local ./tm -Verbose\r\n      $foo | Should -Be 'bar' # 2nd\r\n    }\r\n  }\r\n  It \"Remove-Module is honored in every scope.\" {\r\n    Import-Module -Scope Local ./tm -Verbose\r\n    foo | Should -Be 'bar too'\r\n    & { \r\n      Import-Module -Scope Local ./tm -Verbose\r\n      # !! This removes the module globally.\r\n      Remove-Module tm\r\n    }\r\n    Remove-Module tm\r\n    { foo } | Should -Throw\r\n  }\r\n}\r\n```\r\n\r\n# Expected behavior\r\n\r\nAll tests should pass.\r\n\r\n# Actual behavior\r\n\r\nThe 1st test fails, because the 2nd Import-Module call fails to dot-source the ScriptsToProcess script.\r\n\r\n2nd test: The 2nd Remove-Module call fails, because the previous `Remove-Module` call in a different scope unloaded the module globally.\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core 6.2.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Is it dup #6170?",
      "created_at": "2020-03-16T12:24:52Z",
      "updated_at": "2020-03-16T12:24:52Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "In part, @iSazonov, namely the `ScriptsToProcess` part; the `Remove-Module` problem is specific to this issue.",
      "created_at": "2020-03-16T13:05:12Z",
      "updated_at": "2020-03-16T13:05:12Z"
    }
  ],
  "created_at": "2019-05-12T18:24:13Z",
  "labels": [
    "Issue-Question",
    "WG-Cmdlets-Core"
  ],
  "number": 9582,
  "state": "open",
  "title": "Session-global module caching is at odds with ScriptsToProcess feature and scoped unloading of modules with Remove-Module",
  "updated_at": "2020-03-16T13:32:59Z"
}