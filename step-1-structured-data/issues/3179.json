{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3179",
  "author": "SteveL-MSFT",
  "body": "Merged https://github.com/PowerShell/PowerShell/pull/2082 prematurely.  @lzybkr brought to my attention that his concern wasn't addressed.\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/master/tools/appimage.sh#L41\r\n\r\nRelies on\r\n\r\n```\r\nhttps://github.com/probonopd/AppImages/raw/e05cbebc62c86f8c602d74d9050bbfbf10df1c69/functions.sh \r\n```\r\n\r\nwhich internally gets and executes other scripts.\r\n\r\nIf any of these scripts are compromised, we'll run arbitrary code as part of our publishing pipeline.\r\nWe need to resolve this vulnerability before we start publishing appimages.\r\n\r\nCC @raghushantha @andschwa @probonopd ",
  "closed_at": "2017-03-03T18:37:17Z",
  "comments": [
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "This can't get compromised, it's pinned to a commit hash. The only way to compromise it would be to create a hash collision, and overwrite that on the repo, or compromise GitHub. But if GitHub is compromised, or a hash collision is made, then the game's up anyway.",
      "created_at": "2017-02-21T22:08:55Z",
      "updated_at": "2017-02-21T22:08:55Z"
    },
    {
      "author": "probonopd",
      "author_association": "CONTRIBUTOR",
      "body": "I think @SteveL-MSFT is concerned with the files that the [script mentioned above](https://github.com/probonopd/AppImages/raw/e05cbebc62c86f8c602d74d9050bbfbf10df1c69/functions.sh) downloads (search for \"wget\"). The (only?) solution is to mirror the script and the files it downloads, and change the links in the script to your mirror.\r\n\r\nThis is like using a toolchain -- you have to download it from somewhere (and trust that location), or mirror it and build it yourself from the mirrored sources.",
      "created_at": "2017-02-21T22:16:50Z",
      "updated_at": "2017-02-21T22:18:06Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "That's exactly what @SteveL-MSFT and I are concerned about.\r\n\r\nAnother concern is brittleness and being able to reproduce issues.  There is no coherent package or set of packages, pieces are pulled from `releases`, `master`, and latest successful build in CI.\r\n\r\nIf `AppImage` were accepted into a trusted repository - then I think we could happily use these tools.",
      "created_at": "2017-02-21T22:26:17Z",
      "updated_at": "2017-02-21T22:26:17Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "A trusted repository would be ideal.  Caching local copies may be a viable short term solution.",
      "created_at": "2017-02-21T23:19:00Z",
      "updated_at": "2017-02-21T23:19:00Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "~~Hm... I mean we currently download `wget` and lots of other packages from each distro's repository already (outside of this script). What exactly are we concerned about here?~~\r\n\r\nEdit: Oooh, I see the concern now, it's over the binaries used by AppImage, .e.g `AppRun` being downloaded from GitHub.",
      "created_at": "2017-02-22T00:29:38Z",
      "updated_at": "2017-02-27T19:19:54Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "I think the key phrase there is \"each distro's repository\" which I would equivocate with \"trusted repository\". ",
      "created_at": "2017-02-22T01:30:45Z",
      "updated_at": "2017-02-22T01:30:45Z"
    },
    {
      "author": "probonopd",
      "author_association": "CONTRIBUTOR",
      "body": "If your definition of a \"trusted repository\" only covers distribution repositories, then it it unlikely to happen soon. Even though someone has filed an [intent to package](https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=854902) for debian, it will be quite some time until it lands in mature distributions that are suitable for building on.\r\n\r\nSo I see two ways:\r\n1. You mirror `appimagetool`, and we rewrite the script that generates the AppImage to use it (no other things downloaded via `wget`)\r\n2. You build at least `runtime.c` as part of your builds, and we rewrite the script that generates the AppImage to use it, `mksquashfs` (from the distribution repository) and a even more bash scripting (no other things downloaded via `wget`)\r\n\r\n2 is significantly more work than 1. Which route do you want to go?",
      "created_at": "2017-02-22T17:00:10Z",
      "updated_at": "2017-02-22T17:00:10Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The first option seems acceptable to me.  Thanks!",
      "created_at": "2017-02-22T17:06:01Z",
      "updated_at": "2017-02-22T17:06:01Z"
    },
    {
      "author": "probonopd",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT implemented [here](https://github.com/probonopd/PowerShell/blob/patch-2/tools/appimage.sh). Travis CI build running.",
      "created_at": "2017-02-22T17:29:24Z",
      "updated_at": "2017-02-22T17:29:24Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "> This can't get compromised, it's pinned to a commit hash. **The only way to compromise it would be to create a hash collision, and overwrite that on the repo**, or compromise GitHub. But if GitHub is compromised, or a hash collision is made, then the game's up anyway.\r\n\r\n@andschwa the timing of this statement is pretty hilarious given the SHA-1 news. Linus wrote [an interesting piece](https://plus.google.com/+LinusTorvalds/posts/7tp2gYWQugL) on why it's not a big deal for Git given that hashes aren't being used for security, but I guess he wasn't thinking of our particular scenario. ;) ",
      "created_at": "2017-03-01T19:57:25Z",
      "updated_at": "2017-03-01T19:57:25Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@joeyaiello I like to think that I jinxed that!",
      "created_at": "2017-03-01T21:17:15Z",
      "updated_at": "2017-03-01T21:17:15Z"
    }
  ],
  "created_at": "2017-02-21T21:54:43Z",
  "labels": [
    "Area-Maintainers-Build",
    "Resolution-Fixed"
  ],
  "number": 3179,
  "state": "closed",
  "title": "AppImage publishing relies on script hosted on another web site",
  "updated_at": "2017-03-08T16:01:42Z"
}