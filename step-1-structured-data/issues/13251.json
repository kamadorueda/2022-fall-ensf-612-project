{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13251",
  "author": "yecril71pl",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\niwr 'http://github-production-release-asset-2e65be.s3.amazonaws.com/'\r\n```\r\n\r\n## Expected behavior\r\n\r\n```none\r\nInvoke-WebRequest: Forbidden\r\n\r\nError:\r\n    Code: AccessDenied\r\n    Message: Access Denied\r\n    RequestId: 229E67C9F0B26053\r\n    HostId: kUI8bnH/eZxSAjznVy7+RQpaBv1yHVAP7w9Vh/Z2LYdrrPfn1E8E3y176OHzhKwwdkRMZ0RygbQ=\r\n```\r\n\r\n## Actual behavior\r\n\r\n```none\r\nInvoke-WebRequest:\r\nAccessDeniedAccess Denied4GEN7KFG5Q8QAT8J/8ZJ9JizWnxWHeo0m3wU/rl7Kh7xzbV89arVlDlaSbYwEGELtFblhWEQAKxeaWmeY61sUti5ISk=\r\n```\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.3\r\nPSEdition                      Core\r\nGitCommitId                    7.0.3\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "```\r\nPS Temp:\\> (iwr 'http://github-production-release-asset-2e65be.s3.amazonaws.com/' -SkipHttpErrorCheck).Content\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Error><Code>AccessDenied</Code><Message>Access Denied</Message><RequestId>AY9Q4P8SDQCRCNAJ</RequestId><HostId>teel4p+MFOck+dIyvQtwFzXV+jYfLOnyyp6wJBq1wTo9SUHLU+fG+lQtr3WYP9B/4ZND/nP9SzQ=</HostId></Error>\r\n```\r\n\r\nThen it helpfully removes the XML tags and leaves only the content: <https://github.com/PowerShell/PowerShell/blob/dd73c303a86ee04afca54a2be949c18299f2d8ed/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/Common/WebRequestPSCmdlet.Common.cs#L1548-L1549>\r\n\r\nPerhaps that should trigger only if Content-Type is text/html or application/xhtml+xml. This response has application/xml. Removing \\<\u2026\\> doesn't make much sense for JSON responses, either.",
      "created_at": "2020-07-23T15:49:26Z",
      "updated_at": "2020-07-23T15:55:46Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "I expect XML to be handled in a user-friendly way.  Blindly removing tags is not user-friendly and leaving them as they are is not either.  Remember that XML is an application format, not a text format.  BTW, `application/xhtml+xml` is an application format too.",
      "created_at": "2020-07-23T15:59:43Z",
      "updated_at": "2020-07-23T16:01:15Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "And that is why we must use a formatter to get something we can throw.",
      "created_at": "2020-07-23T16:03:22Z",
      "updated_at": "2020-07-23T16:03:22Z"
    },
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "[Microsoft.Rest.HttpResponseMessageWrapper](https://github.com/Azure/azure-sdk-for-net/blob/8dfd3b317af57a3c3a3942105748bbce2f964465/sdk/mgmtcommon/ClientRuntime/ClientRuntime/HttpResponseMessageWrapper.cs) referenced [in PowerShellCore_format_ps1xml.cs](https://github.com/PowerShell/PowerShell/blob/dd73c303a86ee04afca54a2be949c18299f2d8ed/src/System.Management.Automation/FormatAndOutput/DefaultFormatters/PowerShellCore_format_ps1xml.cs#L793-L797) unfortunately does not have code for converting the HTTP response body to properties that could then be nicely formatted.",
      "created_at": "2020-07-23T16:34:29Z",
      "updated_at": "2020-07-23T16:34:29Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "I would not expect them to, considering the error page response body can be in any form, including Adobe Illustrator, because why not.  However, we should be prepared handle the cases that are common, at least HTML and XML.\r\nThe right way to format HTML is to render it to a text document with default style, scripts disabled and all external resources blocked.  That means, in particular, normalising white space where appropriate, wrapping text to 80 columns, expanding character references, discerning block elements from inline elements, treating all nonstandard elements as text spans, using alternative text for replaced elements and rendering blockquotes, lists and tables as properly aligned text.\r\nThe right way to format XML is as indicated in the issue (that is, format as YAML), stand-alone, with external DTDs blocked.  That still means we have to honour inline DTDs, including text entities.  That means all information from attributes will be lost; this is consistent with the theory that XML should not convey key information in attributes.  I know, some XML formats do not think much of this theory\u2014it will be their fault.\r\nAnd, as always, the original response body should be stored in the `TargetObject`.",
      "created_at": "2020-07-23T16:39:39Z",
      "updated_at": "2020-07-23T18:09:57Z"
    },
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "> The right way to format HTML is to render it to a text document with default style\r\n\r\nI'll be surprised if an HTML renderer is added to PowerShell, especially if it is then used for errors only.\r\nOn the other hand, ConvertFrom-Markdown surprised me as well.\r\n\r\n> format as YML\r\n\r\nDo you mean [YAML](https://yaml.org/)? Your \"Expected behavior\" does not have any indentation to indicate nesting of elements.\r\n\r\n> That still means we have to honour inline DTDs, including text entities.\r\n\r\nWasn't there some security problem with inline DTDs, too? Perhaps it was just a denial of service that could be mitigated by setting [XmlReaderSettings.MaxCharactersFromEntities](https://docs.microsoft.com/dotnet/api/system.xml.xmlreadersettings.maxcharactersfromentities). Regardless, a web server that required DTD processing of error responses would only hurt its compatibility with client software, so I don't believe many servers do that.\r\n\r\n> I know, some XML formats do not think much of this theory\u2014it will be their fault.\r\n\r\nPragmatically though, the error summary displayed by PowerShell should try to help the user solve the error.",
      "created_at": "2020-07-23T18:08:43Z",
      "updated_at": "2020-07-23T18:08:43Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "> > format as YML\r\n> \r\n> Do you mean [YAML](https://yaml.org/)? Your \"Expected behavior\" does not have any indentation to indicate nesting of elements.\r\n\r\nI am sorry, I am not a DevOps guy.  Is it better now?\r\n\r\n> \r\n> > That still means we have to honour inline DTDs, including text entities.\r\n> \r\n> Wasn't there some security problem with inline DTDs, too? Perhaps it was just a denial of service that could be mitigated by setting [XmlReaderSettings.MaxCharactersFromEntities](https://docs.microsoft.com/dotnet/api/system.xml.xmlreadersettings.maxcharactersfromentities). Regardless, a web server that required DTD processing of error responses would only hurt its compatibility with client software, so I don't believe many servers do that.\r\n\r\nYes, you can very easily go exponential with DTD entities.  DOS can (and should) be mitigated by limiting the total length of the result.\r\n\r\n> \r\n> > I know, some XML formats do not think much of this theory\u2014it will be their fault.\r\n> \r\n> Pragmatically though, the error summary displayed by PowerShell should try to help the user solve the error.\r\n\r\nPragmatically, putting essential content into attributes is actively preventing users from seeing it.  The purpose of PowerShell is not to save the world.",
      "created_at": "2020-07-23T18:17:42Z",
      "updated_at": "2020-07-23T18:33:11Z"
    },
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "If the HTTP server returns an error response in XML or JSON format, then the provider of the HTTP server presumably intends the response to be parsed by dedicated client software, rather than a generic web browser.\r\n\r\nIf the user of PowerShell is writing a script that sends requests to such an HTTP server, then the user presumably has access to documentation of the error response format and would benefit from seeing the response in that format. Raw XML or JSON would be fine in that case, optionally indented by PowerShell.\r\n\r\nHowever, if the user of PowerShell is running a script provided by someone else and is not familiar with the intended API, then it might be better to display the response in a different format, like YAML.\r\n\r\nI don't think the original response body should be stored in the TargetObject, if it is large. Errors accumulate in the $Error variable and could take up too much memory.\r\n\r\nLikewise, when PowerShell shows the error response to a user, it should not blast out many pages of text and should escape or filter out terminal control characters. A user who wants the exact error response can rerun the request with Invoke-WebRequest -SkipHttpErrorCheck. That is also what scripts should do if they need to parse the error response.",
      "created_at": "2020-07-27T10:35:50Z",
      "updated_at": "2020-07-27T10:35:50Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "You assume that re-running the request is cheap, which need not be the case.  I have already reported one issue with excessive error messages.  We have agreed that `TargetObject` is the way to go.  If `$ERROR` takes too much memory, there should be a way to GC it.",
      "created_at": "2020-07-27T10:46:01Z",
      "updated_at": "2020-07-27T10:46:01Z"
    },
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": ">  We have agreed that `TargetObject` is the way to go.\r\n\r\nThe decision was apparently in <https://github.com/PowerShell/PowerShell/issues/2193#issuecomment-280187451>. But it turns out that ErrorRecord.TargetObject is the HttpRequestMessage, rather than HttpResponseMessage. ErrorRecord.Exception may be an HttpResponseException that then carries the response.\r\n\r\n",
      "created_at": "2020-07-27T11:23:14Z",
      "updated_at": "2020-07-27T11:23:14Z"
    }
  ],
  "created_at": "2020-07-23T15:23:51Z",
  "number": 13251,
  "state": "open",
  "title": "Invoke-WebRequest: The error message is damaged beyond repair",
  "updated_at": "2021-07-12T20:56:19Z"
}