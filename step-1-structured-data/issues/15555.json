{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15555",
  "author": "ringerc",
  "body": "This issue was encountered when using `runas.exe` to launch a task, but applies to any situation where `Start-Process` launches a child process that terminates before its own children do.\r\n\r\n`Start-Process -Wait` waits until the new process *and all its children* exit. By contrast, `Wait-Process` waits only until the process specified terminates, with no concern for its children. This asymmetry appears to be undocumented, and it's rather unintuitive. \r\n\r\nPSVersion 7.1.3 but observed in various back-versions too.\r\n\r\nThe difference is because `Start-Process -Wait` has a special-case behaviour that tracks child processes and tracks them as a powershell job - see the [`ProcessCollection` class](https://github.com/PowerShell/PowerShell/blob/088eb6d0396fb78565cc9af91a2ddd40d80438c9/src/Microsoft.PowerShell.Commands.Management/commands/management/Process.cs#L2611) for details.\r\n\r\n## Steps to reproduce\r\n\r\nCompare:\r\n\r\n```powershell\r\nPS C:\\Users\\test> Measure-Command { Start-Process -Wait -FilePath 'cmd' -ArgumentList @(\"/D /S /C `\"start timeout 5`\"\") } | Select TotalSeconds \r\n\r\nTotalSeconds\r\n------------\r\n   5.0259809\r\n```\r\n\r\nwith\r\n\r\n```powershell\r\nPS C:\\Users\\test> Measure-Command { \r\n    $proc = Start-Process -PassThru -FilePath 'cmd' -ArgumentList @(\"/D /S /C `\"start timeout 5`\"\")\r\n    $proc | Wait-Process\r\n} | Select TotalSeconds\r\n\r\nTotalSeconds\r\n------------\r\n   0.0146624\r\n\r\nPS C:\\Users\\test> ($timeout = Get-Process -Name timeout) | Format-Table -Property @('Id','ProcessName','CommandLine','HasExited','ExitCode')   \r\n\r\n  Id ProcessName CommandLine HasExited ExitCode\r\n  -- ----------- ----------- --------- --------\r\n2616 timeout     timeout  5      False\r\n\r\nPS C:\\Users\\test> sleep 5\r\nPS C:\\Users\\test> $timeout.HasExited\r\nTrue\r\n```\r\n\r\n## Expected behavior\r\n\r\nIntuitively, one would expect that `Start-Process -Wait` and `$proc = Start-Process | Wait-Process` would have the same effect. So *either* `Start-Process -Wait` would exit as soon as the immediate child process exits, *or* `Wait-Process` would wait until the process and all its children terminate. \r\n\r\nBut this is not the case.\r\n\r\n## Actual behavior\r\n\r\nAs shown above, `Start-Process -Wait` will wait until the whole process tree exits, wheras `Wait-Process` exits as soon as the process that was launched exits.\r\n\r\n## Background\r\n\r\nI originally encountered this when invoking a command under `runas.exe`  to launch it in an unprivileged session. `runas.exe` exits as soon as it has started the unprivileged child, so it doesn't forward the child process exit code or channel stdio between child and parent processes\r\n\r\nI found that \r\n\r\n```powershell\r\nStart-Process -Wait -FilePath runas -ArgumentList @('/trustlevel:0x20000','\"cmd /S /D /C thecommand.exe\"')\r\n```\r\n\r\nwaited for `thecommand.exe` to terminate - as expected - but \r\n\r\n```powershell\r\n$proc = Start-Process -PassThru -FilePath runas -ArgumentList @('/trustlevel:0x20000','\"cmd /S /D /C thecommand.exe\"')\r\n$proc | Wait-Process\r\n```\r\n\r\nstopped waiting immediately. Attempted workarounds like waiting for `$proc.WaitForExitAsync()` or polling `$proc.HasExited` didn't help since they all reflect the state of the process, not process tree.\r\n\r\nThe underlying problem is really that `runas.exe` behaves like `cmd.exe`'s `start` command, not like `start /wait`.\r\n\r\n## Workaround\r\n\r\nAfter reading the Start-Process cmdlet's source to work out why the behaviour differs, I was able to work around this by launching the child process in a powershell job:\r\n\r\n```powershell\r\n$job = Start-ThreadJob -ScriptBlock {\r\n    $proc = Start-Process -PassThru -FilePath 'cmd' -ArgumentList @(\"/D /S /C `\"start timeout 5`\"\")\r\n}\r\nWait-Job $job\r\nRemove-Job $job\r\n```\r\n\r\ntracked the whole process graph, so it exited only when the child exited.\r\n\r\n## Environment data\r\n\r\n```none\r\nPS C:\\Users\\test> $PSVersionTable | Format-Table\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n## P.S.\r\n\r\nPlease document that `Start-Process -ArgumentList` simply concatenates the arguments with space separators and absolutely no concern for quoting or otherwise grouping up arguments to preserve the argument vector - it behaves like win32's `spawnv` not unix's `execv`.",
  "closed_at": null,
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "From where does `Wait-Process` know what process it has to wait?\r\n```powershell\r\n $ & {\r\n >>    Start-Process -FilePath cmd -ArgumentList \" /c timeout 5\"\r\n >>    Get-Process | ? CommandLine -eq \"cmd /c timeout 5\" | Wait-Process\r\n >>  }\r\n $ & {\r\n >>    Start-Process -Verb Runas -FilePath cmd -ArgumentList \" /c timeout 5\"\r\n >>    Get-Process | ? CommandLine -eq \"cmd /c timeout 5\" | Wait-Process\r\n >>  }\r\n $  h -Count 2\r\n\r\n  Id     Duration CommandLine\r\n  --     -------- -----------\r\n  65        5.628 & {\u2026\r\n  66        6.044 & {\u2026\r\n```",
      "created_at": "2021-06-10T15:01:35Z",
      "updated_at": "2021-06-10T15:03:13Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "In curious what are you expecting to come out of here. You cannot change Wait-Process to use the grandchild wait and -Wait on Start-Process has been the behaviour since the beginning. Either change will be a breaking change so is it just a docfix you are wanting?",
      "created_at": "2021-06-10T18:38:11Z",
      "updated_at": "2021-06-10T18:38:11Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Potentially Wait-Process could be augmented to add the detection for child processes as an opt-in as well.\r\n\r\nI do think the asymmetry here is concerning, and doesn't make a lot of sense though; folks will use Start-Process -Wait and then be very confused when they try to do similar with Wait-Process for processes they haven't directly started themselves, and something may break because they behave differently.",
      "created_at": "2021-06-10T19:51:13Z",
      "updated_at": "2021-06-10T19:51:13Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "I'm not sure if doing it with `Wait-Process` would even work. It would have to be tested but I believe if you add a process to a job after it has started to a job then only processes it subsequently spawns (and not ones it has already) will be part of that job and thus will be waiting on. There's also the difficulty when dealing with processes that are already part of an existing job. There are 3 concerning behaviours that would need to be considered:\r\n\r\n* On older OS' (pre Win8/Server 2012) you cannot have nested jobs\r\n  * If the process is already part of a job (WinRM session is one of those) then it will fail\r\n* If the process is already part of a job then the job we assign needs to be a nested job\r\n  * I'm not even sure how you can create a nested job\r\n  * There's also a limitation if the existing job has UI limits placed upon the job\r\n* There's a run condition where the process exists when `Wait-Process` starts but exists when creating the job\r\n  * This is probably more just something to keep in mind if it's implemented as we can ignore the failure\r\n  * `Start-Process` doesn't suffer from this because the process is created as a suspended process and isn't resumed until after it's added to the job\r\n\r\nI feel that there are enough edge cases here to consider keeping the behaviour as is. The alternative is to have `Wait-Process` try and wait for all the child processes but revert back to the original behaviour sometimes and those sometimes will be hard for the caller to really determine.",
      "created_at": "2021-06-10T20:04:04Z",
      "updated_at": "2021-06-10T20:16:34Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "> It would have to be tested but I believe if you add a process to a job after it has started to a job then only processes it subsequently spawns (and not ones it has already) will be part of that job and thus will be waiting on\r\n\r\nSo I just tested this assumption and it is correct. If you were to add a process to a job then any child processes it has already spawned will not be included in the job and thus will not be waited on. Only subsequent processes that it spawns after it was added to the job is.\r\n\r\nA reproducer for this is\r\n\r\n```powershell\r\nAdd-Type -TypeDefinition @'\r\nusing Microsoft.Win32.SafeHandles;\r\nusing System;\r\nusing System.ComponentModel;\r\nusing System.Runtime.InteropServices;\r\n\r\npublic class NativeMethods\r\n{\r\n    [DllImport(\"Kernel32.dll\", EntryPoint = \"AssignProcessToJobObject\", SetLastError = true)]\r\n    private static extern bool NativeAssignProcessToJobObject(\r\n        SafeHandle hJob,\r\n        SafeHandle hProcess\r\n    );\r\n\r\n    [DllImport(\"Kernel32.dll\", CharSet = CharSet.Unicode, EntryPoint = \"CreateJobObjectW\", SetLastError = true)]\r\n    private static extern SafeFileHandle NativeCreateJobObjectW(\r\n        IntPtr lpJobAttributes,\r\n        string lpName\r\n    );\r\n\r\n    public static void AssignProcessToJobObject(SafeHandle job, SafeHandle process)\r\n    {\r\n        if (!NativeAssignProcessToJobObject(job, process))\r\n            throw new Win32Exception();\r\n    }\r\n    \r\n    public static SafeHandle CreateJobObjectW(string name)\r\n    {\r\n        SafeHandle job = NativeCreateJobObjectW(IntPtr.Zero, name);\r\n        if (job.IsInvalid)\r\n            throw new Win32Exception();\r\n            \r\n        return job;\r\n    }\r\n}\r\n'@\r\n\r\n$job = [NativeMethods]::CreateJobObjectW('MyJob')\r\n$parentProc = Start-Process powershell.exe -PassThru\r\n\r\n# In the new process start a new powershell process again\r\n\r\n[NativeMethods]::AssignProcessToJobObject($job, $parentProc.SafeHandle)\r\n\r\n# In the new process start another powershell process again\r\n\r\n# Use your favour process explorer tool to see the job setup and close processes once you are done\r\n\r\n$job.Dispose()\r\n```\r\n\r\nUsing `procexp` I can see that the job only contains the one process assigned to it and the 2nd process it had spawned spawned (and it's conhost process) and not the first one\r\n\r\n![image](https://user-images.githubusercontent.com/8462645/121598048-b5d41100-ca84-11eb-82a5-3b31aba5beea.png)",
      "created_at": "2021-06-10T21:17:40Z",
      "updated_at": "2021-06-10T21:17:40Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Is it possible to enumerate the current child processes in a different fashion, then?",
      "created_at": "2021-06-10T21:19:53Z",
      "updated_at": "2021-06-10T21:19:53Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "You can enumerate all processes and get the parent PID (pwsh has the logic for this luckily) and then assign them to the job yourself. There are 2 problems with this though\r\n\r\n* Unless you are an admin you can only really inspect your own user's processes\r\n  * This is actually another case where `Wait-Process` cannot assign a specified process to a job and thus wait like `Start-Process`\r\n* A process' parent might no longer exist and thus cannot determine the lineage back to the process specified in `Wait-Process`\r\n  * This means it won't be waited on where `Start-Process -Wait` would have picked it up",
      "created_at": "2021-06-10T21:27:46Z",
      "updated_at": "2021-06-10T21:29:52Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Those are good points. Yeah, it makes sense that any effort to determine the process hierarchy will pretty much only be able to be a best-effort approach.\r\n\r\nI think that's an OK approach to take in order to reduce the disparity between Start-Process -Wait and Wait-Process, but we'd still need to document that it's not going to be flawless at detecting child processes.",
      "created_at": "2021-06-11T00:34:15Z",
      "updated_at": "2021-06-11T00:34:15Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "One thing I should mention is that I currently rely on this behaviour and have come across people in the Discord either wanted to rely on only the specific process (`Wait-Process`) vs the process tree (`Start-Process -Wait`). If the behaviour is going to change I personally think it should either be behind a switch or at least there's a switch to bring back the existing behaviour.",
      "created_at": "2021-06-11T00:48:11Z",
      "updated_at": "2021-06-11T00:48:11Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I agree that **IF** the `Wait-Process` behavior were to change to wait on child-processes, it should be done via a new switch.  Even though it is inconsistent with `Start-Process -Wait`, `Wait-Process` currently behaves the way I expect it to.  It's the `Start-Process -Wait` behavior that is \"news\" to me. ",
      "created_at": "2021-06-11T01:10:31Z",
      "updated_at": "2021-06-11T01:19:44Z"
    },
    {
      "author": "ringerc",
      "author_association": "NONE",
      "body": "To start with, clearly documenting this behaviour would be a big help, especially if the docs suggest wrapping the child process in a PS job as a workaround per the above notes.\r\n\r\nI agree that a new switch *definitely* should be required if `Wait-Process` was to change behaviour. As well as being a most undesirable BC breaking surprise, it'd just be confusing, and I'm not sure it'd be possible to do in a race-free manner for arbitrary process IDs anyway.\r\n\r\nI was extremely confused by all this for some time, because I couldn't understand how `Start-Process -Wait` continued to block if the child process actually exited immediately, as it seemed to. It took reading the sources to finally understand what was going on. It took a lot of time and test test case writing to work it out.\r\n\r\nA possible solution might be to return a wrapper or subclass of `System.Diagnostics.Process` from `Start-Process -PassThru` that tracks the child processes like [`ProcessCollection`](https://github.com/PowerShell/PowerShell/blob/088eb6d0396fb78565cc9af91a2ddd40d80438c9/src/Microsoft.PowerShell.Commands.Management/commands/management/Process.cs#L2616) does. Then a new `WaitProcess -WaitForChildren` would require an object of that type as its input, refusing to try to wait for an arbitrary `System.Diagnostics.Process`'s children.\r\n\r\nIt'd be *better* if `Wait-Process` could assemble a child process graph when it starts waiting, and maintain it even once the target exits, but that'd suffer from obvious race conditions when the target process exits before `Wait-Process` has finished enumerating its children. So it might be better not to allow that, or to provide a separate cmdlet to `Get-ProcessTree` for a process.\r\n\r\n(I wrote some stuff about runas, trustlevel, etc here, but I'll actually raise a separate issue for it.)",
      "created_at": "2021-06-11T01:59:36Z",
      "updated_at": "2021-06-11T01:59:36Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": ">  clearly documenting this behaviour would be a big help\r\n\r\nAgreed. Would you mind submitting an issue to the https://github.com/powershell/powershell-docs repo?  They also accept community PR's **if** you're interested in writing up some text to document this behavior.\n\n<blockquote><img src=\"https://repository-images.githubusercontent.com/44411511/850abe80-7ca6-11e9-886f-a1b13b275ae0\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/MicrosoftDocs/PowerShell-Docs\">MicrosoftDocs/PowerShell-Docs</a></strong></div><div>The official PowerShell documentation sources. Contribute to MicrosoftDocs/PowerShell-Docs development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2021-06-11T02:16:57Z",
      "updated_at": "2021-06-11T02:16:59Z"
    },
    {
      "author": "ringerc",
      "author_association": "NONE",
      "body": "@jborean93 I'm reporting a defect and inconsistency. I don't have a strong opinion on the \"right\" fix.\r\n\r\nTo understand the full picture in which this fits, take a look at the attached horror script I concocted to run a child process without admin privileges, stream its stdout to the current window, and kill the process tree if the powershell script is terminated. File ext is `.txt` because github is fussy. I've only been using Powershell for a week or two, so there are probably lots of things in there that are not done the optimal way, but it should give you the idea. Compare the \"is admin\" vs \"not admin\" branches...\r\n[trustlevel.txt](https://github.com/PowerShell/PowerShell/files/6635702/trustlevel.txt)\r\n\r\nA doc fix is *definitely* needed. But beyond that, when it comes to behaviour I see a few options.\r\n\r\n* Give `Start-Process` a new `-NoWaitForChildren` flag or something, document that it behaves like `Wait-Process`, document that `-Start` has special child process tracking behaviour, and document in `Wait-Process` that child procs are not waited for; or\r\n* Teach `Start-Process -PassThru` to return a subclass or wrapper for `System.Diagnostics.Process` that tracks child processes. Add a new `Wait-Process -WaitForChildren` that requires the extended Process object as an InputObject, so it cannot work on an arbitrary process obtained from `Get-Process`. Document this special case.\r\n\r\nEssentially I want consistency and predictability of behaviour, and the behaviour clearly reflected in the docs.\r\n\r\n@vexx32 \r\n\r\n>I do think the asymmetry here is concerning, and doesn't make a lot of sense though; folks will use Start-Process -Wait and then be very confused when they try to do similar with Wait-Process for processes they haven't directly started themselves, and something may break because they behave differently.\r\n\r\nOr in my case, a process I did start myself, as a lower trustlevel, where I wanted to read and echo its output while it was running. You'd think that'd be easy, but you'd be wrong. `runas.exe` exits immediately and offers no way to connect a child process's stdio (or get its exit code).\r\n\r\n@rkeithhill  Yeah, I'll submit an issue. I've spent a couple of days on this already so I can't presently update the docs, but I will try to get to it once the work delayed by working around this is done.",
      "created_at": "2021-06-11T04:07:25Z",
      "updated_at": "2021-06-11T04:07:25Z"
    },
    {
      "author": "ringerc",
      "author_association": "NONE",
      "body": "I opened https://github.com/PowerShell/PowerShell/issues/15562 to suggest a way for `pwsh`'s `Start-Process` to entirely remove the pain around using `runas.exe` etc by handling the process separation for the user.",
      "created_at": "2021-06-11T05:11:08Z",
      "updated_at": "2021-06-11T05:11:08Z"
    },
    {
      "author": "ringerc",
      "author_association": "NONE",
      "body": "> > clearly documenting this behaviour would be a big help\r\n> \r\n> Agreed. Would you mind submitting an issue to the https://github.com/powershell/powershell-docs repo? They also accept community PR's **if** you're interested in writing up some text to document this behavior.\r\n\r\nFiled as linked above: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/7700\r\n\r\nI also wrote a separate docs issue for the confusing behaviour of `Start-Process -ArgumentList`, which I think is a giant foot-cannon for users: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/7701\n\n<blockquote><img src=\"https://repository-images.githubusercontent.com/44411511/850abe80-7ca6-11e9-886f-a1b13b275ae0\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/MicrosoftDocs/PowerShell-Docs\">MicrosoftDocs/PowerShell-Docs</a></strong></div><div>The official PowerShell documentation sources. Contribute to MicrosoftDocs/PowerShell-Docs development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2021-06-11T06:26:55Z",
      "updated_at": "2021-06-11T06:26:57Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Re `Start-Process -ArgumentList`: the relevant bug report is #5576",
      "created_at": "2021-08-25T13:37:08Z",
      "updated_at": "2021-08-25T13:37:08Z"
    }
  ],
  "created_at": "2021-06-10T10:42:42Z",
  "labels": [
    "WG-Cmdlets-Management",
    "Needs-Triage"
  ],
  "number": 15555,
  "state": "open",
  "title": "Start-Process -Wait behaves inconsistently vs Wait-Process when the new process launches children then exits before the children",
  "updated_at": "2021-08-25T13:37:08Z"
}