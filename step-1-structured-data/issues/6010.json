{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6010",
  "author": "jpsnover",
  "body": "Ubiquitous -OnError {Scriptblock} parameter which would take precedence over -ErrorAction and others.  The scriptbock would be called on terminating errors and would be called for every non-terminating error.  For non-terminating errors, the scriptblock can control whether to STOP or CONTINUE code execution.\r\n\r\nThis would unify the processing of terminating vs non terminating errors:\r\n\r\n```powershell\r\n# Nonterminating error\r\nStop-Process foo* -OnError {\r\n     Write-Host \"Had an error.\"\r\n}\r\n\r\n# Terminating error\r\nStart-CmdwithTerminatingError -OnError {\r\n      Write-Host \"Had an error.\"\r\n}\r\n\r\n\r\n\r\n# Terminating errors always terminate but now non-terminating errors are controlled by Continue/Break\r\n# Continue  == -ErrorAction Continue\r\n# Break     == -ErrorAction Stop\r\n# -ErrorAction Debug can be achieved by writing a message, doing a Wait-Debugger and then \r\n# afterwards you can continue or break.\r\nStop-Process foo* -OnError {\r\n     Write-Host \"Had an error. Continuing\"\r\n     Continue\r\n}\r\n\r\nStop-Process foo* -OnError {\r\n     Write-Host \"Had an error. Stopping\"\r\n     Break\r\n}\r\n\r\nStop-Process foo* -OnError {\r\n     Write-Host \"Had an error.  Debug this script\"\r\n     Wait-Debugger\r\n     if ((Read-Host \"Type 'y' to continue\") -eq 'y'){\r\n        Continue\r\n     } else {\r\n        Break\r\n     }\r\n}\r\n\r\nStart-CmdwithTerminatingError -OnError {\r\n      Write-Host \"Had an error. Stopping or Continuing has the same effect\"\r\n      Break\r\n}\r\n\r\n\r\n\r\n# scriptblock is run at the botton - you have the full call stack preserved\r\nstop-process foo* -OnError { \r\n   Write-Host \"PSCALLstack is preserved!\"\r\n   Get-PSCallstack\r\n}\r\n\r\n\r\n# The exception is surfaced through $_ the same as with try/catch\r\nStop-Process foo* -OnError {\r\n    Write-Host \"Error stopping: $($_.TargetObject)`n\"\r\n}\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "Really like the idea as there isn't really any good way to handle errors from the error stream. The only way known to me is something like this:\r\n```powershell\r\nGet-Whatever 2>&1 |\r\n  ForEach-Object {\r\n    if ($_ -is [ErrorRecord]) {\r\n      # handle error\r\n    } else {\r\n      $_\r\n    }\r\n  }\r\n```\r\n\r\nHowever, the `break` and `continue` seem weird to me because this is a scriptblock, not a loop.\r\nWhy not continue by default, and break with `throw`? That would be more intuitive to me",
      "created_at": "2019-05-31T09:33:07Z",
      "updated_at": "2019-05-31T09:33:21Z"
    },
    {
      "author": "skycommand",
      "author_association": "NONE",
      "body": "So, how does it work for distinguishing the error type and acting accordingly? Let's say there is a script in which a file has to be deleted. The Remove-Item command might end with an error when:\r\n\r\n1. _The file is not found:_ Well, that's good, right? We wanted the file gone and it is. The script can disregard this and move on.\r\n2. _Access to the file is denied:_ Not good! We wanted the file gone and it is still alive. The script must **not** move on.\r\n",
      "created_at": "2019-06-02T06:46:50Z",
      "updated_at": "2019-06-02T06:46:50Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "You would presumably get `$_` input into the scriptblock as the error record, so you could pick what to do based on the type of `$_.Exception` that it receives.",
      "created_at": "2019-06-02T06:51:31Z",
      "updated_at": "2019-06-02T06:51:31Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Just to call it out, PR #8205 is currently in the review process and should be in place in PowerShell 7 shortly (it's just waiting for PR #9825 to finish review and be merged so that automated scripts can be written against the debugger). It adds an `ActionPreference.Break` enumeration, which allows you to do this:\r\n\r\n```PowerShell\r\nStop-Process foo* -ErrorAction Break\r\n```\r\n\r\nThat command will automatically enter the debugger on terminating or non-terminating error, and from that point you can check the call stack, step, continue execution, or terminate (quit) the script that is running.\r\n\r\nOnce that is merged, it will resolves some of the needs identified here (breaking into the debugger and/or checking the callstack on error).",
      "created_at": "2019-06-06T18:23:33Z",
      "updated_at": "2019-06-06T18:23:33Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "FYI, this RFC proposes a different approach that I believe provides a better method for doing this, for all streams, without introducing a bunch of new common variables: https://github.com/PowerShell/PowerShell-RFC/pull/219. It supercedes the closed RFC196 proposal that is referenced above.",
      "created_at": "2021-01-13T13:30:44Z",
      "updated_at": "2021-01-13T13:32:58Z"
    }
  ],
  "created_at": "2018-01-24T13:11:58Z",
  "number": 6010,
  "state": "open",
  "title": "Ubiquitous -OnError {ScriptBlock} parameter",
  "updated_at": "2021-01-13T13:32:58Z"
}