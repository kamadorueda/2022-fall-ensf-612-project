{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11396",
  "author": "jazzdelightsme",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\nUnfortunately I don't have a simple repro at hand, but the change is that passing an empty string for the `-ContentType` parameter of `Invoke-WebRequest` used to work, through 6.2.3, but now it fails.\r\n\r\nI'm using a popular internal module that makes calls to the Azure DevOps web service. It has an internal function that accepts a `[string] $ContentType` parameter, which then gets passed on to `Invoke-WebRequest`. When there is no body to send, and thus no content type, the calling code passes `$null` for `$ContentType`, but since the parameter type is `[string]`, it gets converted to an empty string. The same thing happens in PS5.1. In PS5.1, passing in the empty string works (it treats it as no content type), and the same in PsCore 6. But on PSv7:\r\n\r\n# Actual behavior\r\n\r\n```none\r\nThe cmdlet cannot run because the -ContentType parameter is not a valid Content-Type header. Specify a valid Content-Type for -ContentType, then retry. To suppress header validation, supply the -SkipHeaderValidation parameter.\r\n```\r\n# Expected behavior\r\n\r\n(no error)\r\n\r\nI don't know if this is worth breaking the glass on the RC, but at a minimum, because this is a heavily-used, workhorse cmdlet, I think it should be documented.\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-rc.1\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-rc.1\r\nOS                             Microsoft Windows 10.0.19041\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-01-06T20:11:56Z",
  "comments": [
    {
      "author": "spongemike2",
      "author_association": "CONTRIBUTOR",
      "body": "Here's a repro that works in PS5 and PS6, and throws a tantrum in PS7:\r\n\r\n    Invoke-WebRequest -Uri \"http://microsoft.com\" -ContentType \"\"",
      "created_at": "2019-12-18T16:15:38Z",
      "updated_at": "2019-12-18T16:15:38Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "/cc @markekraus do you know if there was a change made to this deliberately, or was there possibly a change in the .NET Core libraries we're using?",
      "created_at": "2019-12-18T16:34:59Z",
      "updated_at": "2019-12-18T16:34:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Strict check of Headers and ContentTypes is .Net Core feature. \r\nYou can skip this with SkipHeaderValidation switch.\r\nIf a behavior is not correct please report to dotnet/runtime repo.\r\n",
      "created_at": "2019-12-18T19:00:48Z",
      "updated_at": "2019-12-18T19:00:48Z"
    },
    {
      "author": "jazzdelightsme",
      "author_association": "CONTRIBUTOR",
      "body": "Adding `-SkipHeaderValidation` would break people running the script on lower versions (5.1, 6.x). Spongemike2 came up with a different workaround, which does not require checking a version number:\r\n\r\n```powershell\r\nif (-not $ContentType)\r\n{\r\n    Remove-Variable   -Name ContentType\r\n    $ContentType =   $null\r\n}\r\n```\r\n\r\nI am of course not opposed to anybody reporting anything to the dotnet/runtime people. But without having done any research into it, it doesn't seem like it would be necessarily wrong for them to treat `null` and `String.Empty` as different. And even if they did decide to change something, I assume it would be quite some time before that change was available to PS.\r\n\r\nHowever, this is still a breaking change for PS: it used to work, now it does not.\r\n\r\nAnother question to consider: should we *want* this breaking change in PS? Maybe the additional flexibility allowed by treating `null` and `String.Empty` differently are something that we would want to be able to pass on to PS users (albeit at the cost of being a breaking change). I don't do web-ish stuff for my day job, so I really don't have any sort of gut feel for it--I leave it to wiser and more experienced minds to consider. But if we keep the breaking change, it would be nice to have it documented. (I assume there will be a list of breaking changes when PSv7 is released.)\r\n\r\n\r\n",
      "created_at": "2019-12-20T01:25:15Z",
      "updated_at": "2019-12-20T01:25:15Z"
    },
    {
      "author": "spongemike2",
      "author_association": "CONTRIBUTOR",
      "body": "Since this ends up being an HTTP header, an empty string isn't really a valid \"key\", so passing in an empty string _should_ mean that there's no content type. As you mention, in my case, I've worked around it. Others who encounter it can as well. However, doing so may be painful, and in the cases where the code may not be modifiable, this could be really problematic. I think it would be worth working around in the PS7 code base in order to maintain compatibility. But that's just my opinion. :-)",
      "created_at": "2019-12-20T01:35:35Z",
      "updated_at": "2019-12-20T01:35:35Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> so passing in an empty string should mean that there's no content type.\r\n\r\nThis assumes ignoring ContentType parameter.\r\n\r\nFor script language it\u2019s not characteristic sometimes to distinguish between null and empty string.\r\n\r\nWhat about other web cmdlets? Are they susceptible too?\r\n",
      "created_at": "2019-12-20T05:30:19Z",
      "updated_at": "2019-12-20T05:40:29Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT I believe we could avoid the breaking change before 7.0 GA and ignore ContentType parameter for null and empty string argument.\r\n(It works in 5.1 and 6.0.)",
      "created_at": "2019-12-20T05:37:05Z",
      "updated_at": "2019-12-20T05:38:48Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "From what I found https://github.com/whatwg/fetch/issues/332 it seems that empty HTTP headers is legal although not defined.  Created https://github.com/dotnet/runtime/issues/1095",
      "created_at": "2019-12-20T18:57:17Z",
      "updated_at": "2019-12-20T18:57:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Until we get Core fix we could make local fix.",
      "created_at": "2019-12-20T19:17:21Z",
      "updated_at": "2019-12-20T19:17:21Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov a local fix with a comment to the dotnet issue seems fine",
      "created_at": "2019-12-20T22:31:53Z",
      "updated_at": "2019-12-20T22:31:53Z"
    },
    {
      "author": "spongemike2",
      "author_association": "CONTRIBUTOR",
      "body": "The bug is in PS Core, not in dotnet. The bug was introduced with commit `2285ece613`. In PS6, if there's no request content (i.e., no body), the headers aren't added. In commit `2285ece613`, that logic was changed. Now, PS Core only creates an empty request content if there's no body, which means it parses the content type. \r\n\r\nLook at the change to line 1244 of file \"`src\\Microsoft.PowerShell.Commands.Utility\\commands\\utility\\WebCmdlet\\Common\\WebRequestPSCmdlet.Common.cs`\" from commit `2285ece613`.",
      "created_at": "2019-12-21T04:12:29Z",
      "updated_at": "2019-12-21T04:12:29Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@spongemike2 Thanks for investigations! Do you want to pull a fix?",
      "created_at": "2019-12-21T04:59:33Z",
      "updated_at": "2019-12-21T04:59:33Z"
    },
    {
      "author": "spongemike2",
      "author_association": "CONTRIBUTOR",
      "body": "I would love to, and I have one tested and ready-to-go, committed into a local topic branch. However, it appears I don't have permission to push my topic branch. How do I change that?\r\n\r\n    remote: Permission to PowerShell/PowerShell.git denied to spongemike2.\r\n    fatal: unable to access 'https://github.com/PowerShell/PowerShell.git/': The requested URL returned error: 403\r\n\r\n",
      "created_at": "2019-12-21T15:32:18Z",
      "updated_at": "2019-12-21T15:32:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@spongemike2 You should fork the repo, create new working branch in your fork, add commits, pull new PR from the branch.\r\nhttps://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#contributing-to-code\r\n\r\n<blockquote><img src=\"https://repository-images.githubusercontent.com/49609581/96590180-07d7-11ea-89b1-2f719dc4bb9c\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell\">PowerShell/PowerShell</a></strong></div><div>PowerShell for every system! Contribute to PowerShell/PowerShell development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2019-12-21T16:53:22Z",
      "updated_at": "2019-12-21T16:53:56Z"
    },
    {
      "author": "spongemike2",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, iSazonov. That's the documentation I needed (and was looking for). I was used to working with ADO pull requests, which work differently. I'm on it now... stay tuned...",
      "created_at": "2019-12-21T17:01:16Z",
      "updated_at": "2019-12-21T17:01:16Z"
    },
    {
      "author": "spongemike2",
      "author_association": "CONTRIBUTOR",
      "body": "Hmm... okay, I forked the repo, made the change there in a topic branch, pushed it, made a PR to master in the forked repo, and merged it. The docs aren't clear about what to do now. How do I get this from the \"master\" branch in the forked repo to the \"master\" branch in the official repo?",
      "created_at": "2019-12-21T17:40:31Z",
      "updated_at": "2019-12-21T17:40:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@spongemike2 You shouldn't merge in your forked master. After you publish your working branch and add commit you could open https://github.com/PowerShell/PowerShell - GitHub will show new button to create new PR.\r\n( Also you can find steps in GitHub help)\n\n<blockquote><img src=\"https://repository-images.githubusercontent.com/49609581/96590180-07d7-11ea-89b1-2f719dc4bb9c\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell\">PowerShell/PowerShell</a></strong></div><div>PowerShell for every system! Contribute to PowerShell/PowerShell development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2019-12-21T17:47:21Z",
      "updated_at": "2019-12-21T17:47:23Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #11421, which has now been successfully released as `v7.0.0-rc.2`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-rc.2)\n",
      "created_at": "2020-01-16T23:38:25Z",
      "updated_at": "2020-01-16T23:38:25Z"
    }
  ],
  "created_at": "2019-12-18T16:06:07Z",
  "labels": [
    "Issue-Question",
    "Resolution-Fixed",
    "Breaking-Change",
    "WG-Cmdlets-Utility"
  ],
  "number": 11396,
  "state": "closed",
  "title": "Breaking change: Invoke-WebRequest -ContentType with empty string now fails",
  "updated_at": "2020-01-16T23:38:26Z"
}