{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15688",
  "author": "schiroky",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n### Steps to reproduce\r\n\r\nI need to retrieve the Issuer information for a certificate of a website. I do already have a sample code that works perfectly with Windows PowerShell 5.1 (tested with 5.1.19041.1023 on Windows 10), but does not work anymore with Microsoft PowerShell 7.1.3). I attached the sample file (GetCert.ps1) as text file. Just rename to .ps1 file `extension:\r\n\r\n[GetCert.txt](https://github.com/PowerShell/PowerShell/files/6733755/GetCert.txt)\r\n\r\n```powershell\r\n[Net.ServicePointManager]::ServerCertificateValidationCallback = { $true }\r\n\r\n#$url = \"https://self.events.data.microsoft.com\"\r\n#$url = \"https://api.informationprotection.azure.com\"\r\n#$url = \"https://www.microsoft.com\"\r\n$url = \"https://dataservice.protection.outlook.com\"\r\n\r\n$WebRequest = [System.Net.HttpWebRequest]::Create($url)\r\n\r\nTry {\r\n\r\n    $WebRequest.GetResponse() #.Dispose()\r\n\r\n}\r\nCatch [System.Net.WebException] {\r\n\r\n    If ($_.Exception.Status -eq [System.Net.WebExceptionStatus]::TrustFailure) {\r\n        <# Ignoring errors, only retrieve the certificate from the URL #>\r\n        Write-Host \"check\" # for testing purposes\r\n    }\r\n    Else {\r\n        Write-Warning \"$_.Exception.Message (A)\"\r\n    }\r\n\r\n}\r\nCatch {\r\n\r\n    Write-Warning \"$_.Exception.Message (B)\"\r\n\r\n}\r\n\r\n$WebRequest.ServicePoint.Certificate.Issuer\r\n```\r\n\r\n### Expected behavior\r\n\r\n```console\r\nAs output I should see something like this:\r\n\r\nFor command $WebRequest.GetResponse():\r\n\r\nIsMutuallyAuthenticated : False\r\nCookies                 : {}\r\nHeaders                 : {Pragma, Strict-Transport-Security, X-Content-Type-Options, Link...}\r\nSupportsHeaders         : True\r\nContentLength           : 153422\r\nContentEncoding         : \r\nContentType             : text/html; charset=utf-8\r\nCharacterSet            : utf-8\r\nServer                  : \r\nLastModified            : 29.06.2021 15:37:32\r\nStatusCode              : OK\r\nStatusDescription       : OK\r\nProtocolVersion         : 1.1\r\nResponseUri             : https://login.microsoftonline.com/login.srf?wa=wsignin1.0&rpsnv=4&ct=1624973851&rver=7.0.6737.0&wp=MBI_KEY&wreply=https:%2F%2Fdataservice.protection.outlook.com%2Fecp%2F&id=500483\r\nMethod                  : GET\r\nIsFromCache             : False\r\n\r\nAnd for $WebRequest.ServicePoint.Certificate.Issuer:\r\n\r\nCN=DigiCert SHA2 Secure Server CA, O=DigiCert Inc, C=US\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nThe first command is accepted and proceeded, but the second command does not, when running the same code on PowerShell 7.1.3.\r\n```\r\n\r\n\r\n### Environment data\r\n\r\n```powershell\r\nFor 7.1.3:\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\nFor 5.1:\r\n\r\nName                           Value                                                                                                                                                                                                             \r\n----                           -----                                                                                                                                                                                                             \r\nPSVersion                      5.1.19041.1023                                                                                                                                                                                                    \r\nPSEdition                      Desktop                                                                                                                                                                                                           \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                                                                                                                                           \r\nBuildVersion                   10.0.19041.1023                                                                                                                                                                                                   \r\nCLRVersion                     4.0.30319.42000                                                                                                                                                                                                   \r\nWSManStackVersion              3.0                                                                                                                                                                                                               \r\nPSRemotingProtocolVersion      2.3                                                                                                                                                                                                               \r\nSerializationVersion           1.1.0.1\r\n```\r\n\r\n\r\n### Visuals\r\n\r\nIssue can easily reproduce from scratch. In case it should be needed, I can demo the problem.",
  "closed_at": "2021-07-01T22:05:23Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "If this no longer works as expected, it's a .NET change, not a PowerShell one.\r\n\r\n@jborean93 might have some background knowledge around how this can work or perhaps changes to the logic that may be required to make it work? \ud83e\udd14 ",
      "created_at": "2021-06-29T15:40:40Z",
      "updated_at": "2021-06-29T15:40:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It is better to ask in .Net Runtime repository.",
      "created_at": "2021-06-29T18:20:05Z",
      "updated_at": "2021-06-29T18:20:05Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "It's definitely a .NET question but a very rudimentary way to do this would be to use the raw socket and wrap that without going into the HTTP request side:\r\n\r\n```powershell\r\n$server = 'httpbin.org'\r\n\r\n$client = $sslStream = $null\r\ntry {\r\n    $client = [System.Net.Sockets.TcpClient]::new($server, 443)\r\n    $sslStream = [System.Net.Security.SslStream]::new($client.GetStream(), $false, {$true}, $null)\r\n    $sslStream.AuthenticateAsClient($server)\r\n\r\n    $cert = $sslStream.RemoteCertificate\r\n}\r\nfinally {\r\n    if ($sslStream) { $sslStream.Close() }\r\n    if ($client) { $client.Close() }\r\n}\r\n```\r\n\r\nThis connects to the server and port specified and disables all validation so you can then get the certificate of the server. Some enhancements to this would be to explicitly connect to the `TcpClient` using the `ConnectAsync` so you can have a timeout on how long it waits until it deems the connection a failure. The `AuthenticateAsClient` has some further overloads you can use to control the TLS policy as well but they are highly dependent on the .NET version that is running so it will be up to you to define them how you wish.",
      "created_at": "2021-06-29T19:32:27Z",
      "updated_at": "2021-06-29T19:32:34Z"
    },
    {
      "author": "schiroky",
      "author_association": "NONE",
      "body": "**@jborean93** Thank you for that method. I need to play a bit with this way to figure out if it fits into my solution, and of course I'll report to .Net Runtime repository.\r\nAs I'm not that familiar with TcpClient today, could you please extend that sample a bit for me?\r\nIt would be great to have a sample of doing the following with TcpClient as well:\r\n\r\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\r\n\r\nAnd I do not know if having something implemented for the following is needed as well?\r\n\r\n[System.Net.WebRequest]::DefaultWebProxy = [System.Net.WebRequest]::GetSystemWebProxy()\r\n[System.Net.WebRequest]::DefaultWebProxy.Credentials = [System.Net.CredentialCache]::DefaultNetworkCredentials \r\n\r\n",
      "created_at": "2021-06-30T09:01:35Z",
      "updated_at": "2021-06-30T09:01:35Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as external and has not had any activity for **1 day**. It has been be closed for housekeeping purposes.",
      "created_at": "2021-07-01T22:05:22Z",
      "updated_at": "2021-07-01T22:05:22Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "> [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\r\n\r\nThe TLS settings are part of the `SslStream`, the `TcpClient` is basically just the raw transport that exchanges the packets and doesn't care about things like authentication and the like. If you want to control what TLS protocols that it can accept there is an overload of [AuthenticateAsClient](https://docs.microsoft.com/en-us/dotnet/api/system.net.security.sslstream.authenticateasclient?view=net-5.0#System_Net_Security_SslStream_AuthenticateAsClient_System_String_System_Security_Cryptography_X509Certificates_X509CertificateCollection_System_Security_Authentication_SslProtocols_System_Boolean_)\r\n\r\n```powershell\r\n$sslStream.AuthenticateAsClient(\r\n    $server,\r\n    $null,  # Certificates to use for X509 certificate authentication - probably don't need this\r\n    'None',  # The SslProtocols that are enabled\r\n    $true  # Whether to check for certificate revocation or not\r\n)\r\n``` \r\n\r\nThe [SslProtocols](https://docs.microsoft.com/en-us/dotnet/api/system.security.authentication.sslprotocols?view=net-5.0) value should be set to `None` if you are on a new enough .NET version, otherwise you can use `Default` or explicitly enable `Tls12` just like you do with `ServicePointManager`.\r\n\r\n> [System.Net.WebRequest]::DefaultWebProxy = [System.Net.WebRequest]::GetSystemWebProxy()\r\n> [System.Net.WebRequest]::DefaultWebProxy.Credentials = [System.Net.CredentialCache]::DefaultNetworkCredentials\r\n\r\nUnfortunately the TCP Client this is a level lower than proxies, you need to be able to access the server and port directly. If you need to use proxies then maybe the HTTP request is more ideal but that's technically an extra layer that sits on top of TLS.",
      "created_at": "2021-07-01T23:24:15Z",
      "updated_at": "2021-07-01T23:24:15Z"
    },
    {
      "author": "schiroky",
      "author_association": "NONE",
      "body": "Thank you!",
      "created_at": "2021-07-02T12:35:50Z",
      "updated_at": "2021-07-02T12:35:50Z"
    }
  ],
  "created_at": "2021-06-29T13:44:28Z",
  "number": 15688,
  "state": "closed",
  "title": "Retrieving the Issuer of a certificate does not work anymore in PowerShell 7.1",
  "updated_at": "2021-07-02T12:35:50Z"
}