{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2109",
  "author": "dfinke",
  "body": "Need guidance on creating YAML cmdlets by including this library.\nhttps://github.com/aaubry/YamlDotNet\n",
  "closed_at": "2016-09-11T22:38:06Z",
  "comments": [
    {
      "author": "ArieHein",
      "author_association": "NONE",
      "body": "@dfinke : Try looking at the Ansible repos from https://github.com/trondhindenes\nto see how he handled it as Ansible is YAML\n",
      "created_at": "2016-08-28T19:36:54Z",
      "updated_at": "2016-08-28T19:36:54Z"
    },
    {
      "author": "ArieHein",
      "author_association": "NONE",
      "body": "We discussed having a DSC resource to handle some common text files. YAML would fit there too.\nhttps://github.com/PowerShell/DscResources/issues/155\n",
      "created_at": "2016-08-28T19:38:27Z",
      "updated_at": "2016-08-28T19:38:27Z"
    },
    {
      "author": "dfinke",
      "author_association": "NONE",
      "body": "@ArieHein Could you say more about your comment? I've wrapped the YAMLDotNet library in PowerShell so I can do  `ConvertFrom-Yaml`. Works fine. I was thinking it'd be good to add this to PowerShell directly so these cmdlets are available out of the box. \n\nI was thinking of pulling YAMLDotNet into the PowerShell code, and create a cmdlet for it. I wanted guidance on adding other oss into the core product. If v6.0 ships with Windows, are there legal restrictions? Is there a mechanism to add these types of cmdlets so it ships with the OSS version and not the Windows release? etc\n",
      "created_at": "2016-08-28T20:24:28Z",
      "updated_at": "2016-08-28T20:24:28Z"
    },
    {
      "author": "ArieHein",
      "author_association": "NONE",
      "body": "The starting point was adding a DSC resource to handle various text formats. We didnt mention YAML as an option as implementing it would take longer time. Naturally it would be based on the appropriate .net classes and types (were not inventing the wheel).\n\nTrons' repo was something I found along the way when I was learning Ansible and he has created DSC resources to handle YAML, so I figured you might want to take a look if anything looks reasonable to you. Perhaps the core code is already inside PowerShell without bringing additional libraries.\n",
      "created_at": "2016-08-28T20:47:36Z",
      "updated_at": "2016-08-28T20:47:36Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "I agree with @dfinke that it would be good to get some guidance on whether it is possible to be able to add this directly in the PowerShell 6 release as this would also help where there are other possible options that could also be included from other OSS projects too\n",
      "created_at": "2016-08-28T21:19:15Z",
      "updated_at": "2016-08-28T21:19:15Z"
    },
    {
      "author": "RamblingCookieMonster",
      "author_association": "NONE",
      "body": "This would be quite valuable.  Yaml is a common format in the wider Microsoft ecosystem, and beyond.  Some common use cases:\n- Introduce more opportunity for tooling and automation for systems using yaml for configuration\n- Provide an friendlier (IMHO - at the very least, \"another\") way to serialize and deserialize data for our own PowerShell tools\n\nCheers!\n",
      "created_at": "2016-08-29T19:49:13Z",
      "updated_at": "2016-08-29T19:49:13Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "This raise the question \"What should be available in the core distro and what should be downloadable from the gallery\". Historically (before Windows PowerShell v5), it was hard to relay on any modules that are not part of the distro. With https://www.powershellgallery.com/ it became much easier to install and depend on 3rd party modules.\n",
      "created_at": "2016-08-31T19:56:43Z",
      "updated_at": "2016-08-31T19:56:43Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "@vors - personally it makes sense for as much to be pushed to gallery as possible and \"decoupled\" from the core of PowerShell where I've rationalised why in #2136 & #1979 \n\nBut saying that I feel that any ConvertTo/ConvertFrom cmdlets like the proposed YAML ones should really be bundled into Microsoft.PowerShell.Utility.\n\nBut then again that's just my thoughts :wink:\n",
      "created_at": "2016-08-31T20:16:17Z",
      "updated_at": "2016-08-31T20:16:17Z"
    },
    {
      "author": "RamblingCookieMonster",
      "author_association": "NONE",
      "body": "I'd be for decoupling.  Presumably, if it goes into PowerShell itself, it's locked to that and higher versions of PowerShell (and difficult to update outside of that cadence, as you mentioned @kilasuit).\n\nOn top of that, presumably an external module could target down-level PowerShell versions.  IMHO this alone, assuming you target PS3 or PS4, would justify a separate module - many of us on the operations side don't have a choice, or aren't ready to move to PS5+ across the board - not everyone runs a farm of cattle unfortunately : )\n\nCheers!\n",
      "created_at": "2016-08-31T20:19:50Z",
      "updated_at": "2016-08-31T20:20:35Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "This is where module metadata in the PowerShell Gallery plays a very important role. Even modules released to the Gallery can be downloaded without having PackageManagement installed using something like this\n\n``` powershell\n$file = 'https://www.powershellgallery.com/api/v2/package/ISESteroids/2.6.0.3'\n$Request = [System.Net.WebRequest]::Create($file)\n$Request.Timeout = '1000000000'\n$URL = $Request.GetResponse()\n$Filename = $URL.ResponseUri.OriginalString.Split('/')[-1]\n$WC = New-Object -TypeName System.Net.WebClient\n$WC.DownloadFile($file,('C:\\Files\\{0}' -f $Filename))\n$WC.Dispose()\n$URL.Close()\n```\n\nSo things like PowerShellVersion & PowerShellHostName etc should be filled in where possible - else why bother having the metadata available to us in the first place?\n",
      "created_at": "2016-08-31T23:00:44Z",
      "updated_at": "2016-08-31T23:00:44Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Based on the discussion, our resolution is: we will keep YAML parsing capabilities outside of the scope for PowerShell core (inbox modules) in the observable future.\nWe are encouraging you to use PowerShell gallery as a delivery vehicle for the module.\n",
      "created_at": "2016-09-11T22:38:06Z",
      "updated_at": "2016-09-11T22:38:06Z"
    },
    {
      "author": "dfinke",
      "author_association": "NONE",
      "body": "Just another data point.\n\n## AWS CloudFormation Introduces YAML Template Support\n\nhttps://aws.amazon.com/about-aws/whats-new/2016/09/aws-cloudformation-introduces-yaml-template-support-and-cross-stack-references/\n",
      "created_at": "2016-09-20T15:24:16Z",
      "updated_at": "2016-09-20T15:24:16Z"
    },
    {
      "author": "bgshacklett",
      "author_association": "NONE",
      "body": "I understand that every feature needs a business case. Currently, YAML is supported by pretty much every language out there, except for PowerShell. When I tell my coworkers that they should be looking into PowerShell on Linux or Mac OS, and then I say they're going to have to add another external library to handle YAML, it's going to seriously hurt PowerShell's position relative to other languages.\n",
      "created_at": "2016-10-27T02:54:47Z",
      "updated_at": "2016-10-27T02:54:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If this language is so important and needful (is it really true?), I see three direction to add support it:\n1. Module as external package\n2. New System.Yaml namespace in CoreCLR\n3. Native Yaml cmdlets and native [yaml](easy after 2.)\n",
      "created_at": "2016-10-27T06:21:12Z",
      "updated_at": "2016-10-27T06:21:12Z"
    },
    {
      "author": "ArieHein",
      "author_association": "NONE",
      "body": "@bgshacklett hmm what language supports YAML as a core type ? even python requires 'another external library'. So I cant see how this will 'hurt' PowerShell position.\n\n@iSazonov I dare say there wont be a System.Yaml for the same reason there's no System.JSON (not counting Silverlight) though you have some abilities via Serialization but this is left for the 3rd party to \ncreate their own implementations and not be bound. MS are good at making frameworks with enough hooks for the programmers to build upon and extend and thus create a partner ecosystem.\n\nAs @RamblingCookieMonster  said, decoupling is a good thing as you're not bounding the language to a specific implementation.\n",
      "created_at": "2016-10-28T18:39:33Z",
      "updated_at": "2016-10-28T18:39:33Z"
    }
  ],
  "created_at": "2016-08-28T16:45:05Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets"
  ],
  "number": 2109,
  "state": "closed",
  "title": "Including open source libraries to support YAML cmdlets",
  "updated_at": "2016-10-28T18:39:33Z"
}