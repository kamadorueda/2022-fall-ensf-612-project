{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16843",
  "author": "fsackur",
  "body": "### Summary of the new feature / enhancement\n\nValuable discussion on #11300 and #2875\r\n\r\nThere is appetite for a cmdlet that accepts a hashtable and outputs a PowerShell expression that recreates that hashtable. The linked issues discuss this specifically for writing .psd1 files - which is 99% of the problem.\r\n\r\nI see no reason to stop there. If you generate .psd1 data, writing it to a file is the trivial part. And why limit to hashtable input? You should be able to pass any object that's legal for a hashtable value in a .psd1 and \"cut out the middleman\".\r\n\r\nNot all types can be serialised safely like this. I would be delighted with a constrained solution that throws on types outside a basic set of \"primitive\" types, bans scriptblocks, etc.\r\n\r\n### Use case: \r\n\r\n$Employer has a long tail of legacy boxes to support, and we must still use PSEXEC. We have to convert objects to strings that we can put in a command expression. (I know about XML, but the legibility is poor and it imposes extra steps.)\r\n\r\n```\r\n$Hashtable = @{\r\n    'restore-healthsnapshot' = @{\r\n        maintenanceticket = '000000-10117'\r\n        mainttype         = 'HardwareSwapStandalone'\r\n        hardware = @(\r\n            @{\r\n                Component   = 'Memory'\r\n                SwapType    = 'Downgrade'\r\n                TargetValue = 8\r\n            },\r\n            @{\r\n                Component   = 'Cpu'\r\n                SwapType    = 'Reseat'\r\n            }\r\n        )\r\n    }\r\n}\r\n$Hashtable | ConvertTo-PSExpression\r\n\r\n@{'restore-healthsnapshot' = @{mainttype = 'HardwareSwapStandalone'; maintenanceticket = '000000-10117'; hardware = @(@{TargetValue = 8; Component = 'Memory'; SwapType = 'Downgrade'}, @{SwapType = 'Reseat'; Component = 'Cpu'})}}\r\n```\r\n\r\nWe are agnostic about brace alignment, use of newlines, etc. I can use PSScriptAnalyzer\\Invoke-Formatter for the brace alignment.\n\n### Proposed technical implementation details (optional)\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "An interesting idea. But I am not too sure of how much of an appetite there actually is for such a cmdlet. I have never seen someone ask for this before. \r\n\r\nThis might be a great candidate for a separate PowerShell module and posted to the PS Gallery. If there really is a sufficient appetite, then we could consider folding it into PowerShell itself., ",
      "created_at": "2022-02-06T14:46:06Z",
      "updated_at": "2022-02-06T14:46:06Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "Agree with @doctordns  - \"No-one has asked for it\" isn't the same as \"No-one would want it\" , an initial version shared via the gallery is the way to see what appetite there is. ",
      "created_at": "2022-02-09T11:00:00Z",
      "updated_at": "2022-02-09T11:00:00Z"
    }
  ],
  "created_at": "2022-02-04T13:42:25Z",
  "number": 16843,
  "state": "open",
  "title": "ConvertTo-PSExpression: serialise objects as valid expressions (superset of Export-PowerShellDataFile / Export-Psd1)",
  "updated_at": "2022-02-09T11:00:00Z"
}