{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15862",
  "author": "joeyaiello",
  "body": "### Summary of the new feature / enhancement\n\nIn preparation for 7.2 RCs, @PowerShell/powershell-committee has reviewed our existing experimental features and decided that the following should be upgraded to stable, left as experimental, or removed altogether:\r\n\r\n## Supported / Non-Experimental\r\n\r\n* `PSNotApplyErrorActionToStderr`: We agree that stderr is used in many cases where there is no error behavior and therefore shouldn't trigger ErrorAction cases like Stop. Given that we've seen no issues with this experimental feature since it was checked into 7.1 previews, we're moving it to stable.\r\n* `PSUnixFileStat`: This has had sufficient time for users in preview builds to use the default behavior of showing Linux file stats (since early 7.1 previews), and no major issues have been reported. \r\n* `PSAnsiProgress`: This new minimal style of progress bar hasn't created any issues, and we see no reason not to make it stable. Furthermore, you can back to the old progress bar with `$PSStyle.Progress.View = 'classic'`, or turn off progress altogether. \r\n* `PSAnsiRendering`: There were a few issues around the `$PSStyle` implementation that have been fixed. This points to some amount of usage from customers. Additionally, we've implemented features like `PSAnsiProgress` on top of this, and the interface has been stable and useful. \r\n* `PSCultureInvariantReplaceOperator`: As outlined in #10948, this issue should make the `-replace` string operator indifferent to the culture in an environment, such that it works the same as the `-split` operator. We haven't seen this cause any impact in the wild from the result of this Bucket 3 breaking change.\r\n* `Microsoft.PowerShell.Utility.PSManageBreakpointsInRunspace`: The `-BreakAll` switch added to `Debug-Runspace` is opt-in, and has been working well within the Azure Functions tooling for Visual Studio Code. \r\n* `Microsoft.PowerShell.Utility.PSImportPSDataFileSkipLimitCheck`: The `-SkipLimitCheck` switch added to `Import-PowerShellDataFile` is opt-in, and we haven't seen any issues with it in the wild. \r\n\r\n## Experimental (for now)\r\n\r\n* `PSAnsiRenderingFileInfo`: This came in very late, and we'd like to give it some more bake time for folks to give feedback. For example, we should continue to discuss the colors themselves, which file extensions should be colorized, how we might be able to support `LS_COLOR`, whether we need theme support, as well as how 3rd parties might be able to extend existing formatters (more context in #15746). To that end, we're leaving it as experimental. \r\n* `PSCommandNotFoundSuggestion`: The suggestion framework still has significant issues (e.g. writes only to the console host rather than an output stream). This is still something we'd like to leverage in the future for suggesting modules for download from PowerShellGet. \r\n* `PSNativePSPathResolution`: Today, this resolution of PSPaths in native commands is overly aggressive because single- and double-quotes are not differentiated in the native command binder. This means you can't indicate a PSPath as literal. Until we solve this issue (which is non-trivial), we're leaving this as experimental.\r\n* `PSLoadAssemblyFromNativeCode`: As we discussed in #14641, we are leaving this as experimental until we decide whether or not we want to implement a full native hosting API for wrapping PowerShell from native code.\r\n* `PSSubsystemPluginModel`: Subsystems are still a WIP as we work through the right way to decouple certain functionality from the core PowerShell engine. \r\n\r\n## Needs to be removed\r\n\r\n* `PSImplicitRemotingBatching`: This has not fulfilled the original goal of optimizing implicit remoting calls, and has not seen significant usage from folks in the wild. To that end, we plan to revert and remove this code before 7.2 GAs. \r\n\r\n## Deferred\r\n\r\n* `PSDesiredStateConfiguration.InvokeDscResource`: Given that this is part of the PSDesiredStateConfiguration module, we are deferring to the module owner to make a final decision on whether this should remain experimental. \n\n### Proposed technical implementation details (optional)\n\n_No response_",
  "closed_at": "2021-08-09T21:01:59Z",
  "comments": [
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Any chance we could get the `PSNativeCommandErrorActionPreference` experimental feature added as `Experimental (for now)` for 7.2?  Ya know, after the PR gets merged (soon we hope).  \ud83d\ude09",
      "created_at": "2021-08-07T03:35:10Z",
      "updated_at": "2021-08-07T03:35:41Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #15864, which has now been successfully released as `v7.2.0-preview.9`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0-preview.9)\n",
      "created_at": "2021-08-23T18:36:17Z",
      "updated_at": "2021-08-23T18:36:17Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #15864, which has now been successfully released as `v7.2.0-preview.10`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0-preview.10)\n",
      "created_at": "2021-09-28T23:18:07Z",
      "updated_at": "2021-09-28T23:18:07Z"
    }
  ],
  "created_at": "2021-08-03T19:56:42Z",
  "labels": [
    "Issue-Enhancement",
    "Area-Maintainers-Build",
    "Resolution-Fixed",
    "Committee-Reviewed"
  ],
  "number": 15862,
  "state": "closed",
  "title": "Decide on which experimental features will remain in experimental in 7.2",
  "updated_at": "2021-09-28T23:18:08Z"
}