{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11215",
  "author": "SchrodingerZhu",
  "body": "Step:\r\nenter iex by `zsh -c 'iex'`, doube enter Ctrl-C to quit iex.\r\nBehavior:\r\n```\r\n\u276f zsh -c 'iex'\r\nErlang/OTP 22 [erts-10.5] [source] [64-bit] [smp:12:12] [ds:12:12:10] [async-threads:1] [hipe]\r\n\r\nwarning: the VM is running with native name encoding of latin1 which may cause Elixir to malfunction as it expects utf8. Please ensure your locale is set to UTF-8 (which can be verified by running \"locale\" in your shell)\r\nInteractive Elixir (1.9.2) - press Ctrl+C to exit (type h() ENTER for help)\r\niex(1)> \r\nBREAK: (a)bort (c)ontinue (p)roc info (i)nfo (l)oaded\r\n       (v)ersion (k)ill (D)b-tables (d)istribution\r\n^CProcess terminated. The process cannot access the file because it is being used by another process.\r\n   at System.Environment.FailFast(System.String, System.Exception)\r\n   at Microsoft.PowerShell.UnmanagedPSEntry.Start(System.String, System.String[], Int32)\r\n   at Microsoft.PowerShell.ManagedPSEntry.Main(System.String[])\r\nSystem.IO.IOException: The process cannot access the file because it is being used by another process.\r\n   at System.ConsolePal.TryGetCursorPosition(Int32& left, Int32& top, Boolean reinitializeForRead)\r\n   at System.Console.get_CursorLeft()\r\n   at Microsoft.PowerShell.ConsoleHostRawUserInterface.get_CursorPosition()\r\n   at Microsoft.PowerShell.ConsoleHost.InputLoop.Run(Boolean inputLoopIsNested)\r\n   at Microsoft.PowerShell.ConsoleHost.InputLoop.RunNewInputLoop(ConsoleHost parent, Boolean isNested)\r\n   at Microsoft.PowerShell.ConsoleHost.EnterNestedPrompt()\r\n   at Microsoft.PowerShell.ConsoleHost.DoRunspaceLoop(String initialCommand, Boolean skipProfiles, Collection`1 initialCommandArgs, Boolean staMode, String configurationName)\r\n   at Microsoft.PowerShell.ConsoleHost.Run(CommandLineParameterParser cpp, Boolean isPrestartWarned)\r\n   at Microsoft.PowerShell.ConsoleHost.Start(String bannerText, String helpText, String[] args)\r\n   at Microsoft.PowerShell.ConsoleShell.Start(InitialSessionState initialSessionState, String bannerText, String helpText, String[] args)\r\n   at Microsoft.PowerShell.ConsoleShell.Start(String bannerText, String helpText, String[] args)\r\n   at Microsoft.PowerShell.UnmanagedPSEntry.Start(String consoleFilePath, String[] args, Int32 argc)\r\n\r\nWarning: Program '/usr/bin/pwsh-preview' crashed.\r\n```\r\nOs info:\r\n```\r\nLinux ****** 5.3.12-arch1-1 #1 SMP PREEMPT Wed, 20 Nov 2019 19:45:16 +0000 x86_64 GNU/Linux\r\n```\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> the VM is running with native name encoding of latin1 which may cause Elixir to malfunction as it expects utf8.\r\n\r\nWhat is locale in your session?",
      "created_at": "2019-11-30T13:46:04Z",
      "updated_at": "2019-11-30T13:46:04Z"
    },
    {
      "author": "SchrodingerZhu",
      "author_association": "NONE",
      "body": "@iSazonov \r\n```\r\n\u276f locale\r\nLANG=C\r\nLC_CTYPE=\"C\"\r\nLC_NUMERIC=\"C\"\r\nLC_TIME=\"C\"\r\nLC_COLLATE=\"C\"\r\nLC_MONETARY=\"C\"\r\nLC_MESSAGES=\"C\"\r\nLC_PAPER=\"C\"\r\nLC_NAME=\"C\"\r\nLC_ADDRESS=\"C\"\r\nLC_TELEPHONE=\"C\"\r\nLC_MEASUREMENT=\"C\"\r\nLC_IDENTIFICATION=\"C\"\r\nLC_ALL=\r\nschrodinger@Monad \ue0b0 ~ \ue0b0                                                                                                                                                 [11:05]\r\n\u276f env LC_ALL=en_US.utf-8 iex\r\nErlang/OTP 22 [erts-10.5] [source] [64-bit] [smp:12:12] [ds:12:12:10] [async-threads:1] [hipe]\r\n\r\nInteractive Elixir (1.9.2) - press Ctrl+C to exit (type h() ENTER for help)\r\niex(1)> \r\nBREAK: (a)bort (c)ontinue (p)roc info (i)nfo (l)oaded\r\n       (v)ersion (k)ill (D)b-tables (d)istribution\r\n^CProcess terminated. The process cannot access the file because it is being used by another process.\r\n   at System.Environment.FailFast(System.String, System.Exception)\r\n   at Microsoft.PowerShell.UnmanagedPSEntry.Start(System.String, System.String[], Int32)\r\n   at Microsoft.PowerShell.ManagedPSEntry.Main(System.String[])\r\nSystem.IO.IOException: The process cannot access the file because it is being used by another process.\r\n   at System.ConsolePal.TryGetCursorPosition(Int32& left, Int32& top, Boolean reinitializeForRead)\r\n   at System.Console.get_CursorLeft()\r\n   at Microsoft.PowerShell.ConsoleHostRawUserInterface.get_CursorPosition()\r\n   at Microsoft.PowerShell.ConsoleHost.InputLoop.Run(Boolean inputLoopIsNested)\r\n   at Microsoft.PowerShell.ConsoleHost.InputLoop.RunNewInputLoop(ConsoleHost parent, Boolean isNested)\r\n   at Microsoft.PowerShell.ConsoleHost.EnterNestedPrompt()\r\n   at Microsoft.PowerShell.ConsoleHost.DoRunspaceLoop(String initialCommand, Boolean skipProfiles, Collection`1 initialCommandArgs, Boolean staMode, String configurationName)\r\n   at Microsoft.PowerShell.ConsoleHost.Run(CommandLineParameterParser cpp, Boolean isPrestartWarned)\r\n   at Microsoft.PowerShell.ConsoleHost.Start(String bannerText, String helpText, String[] args)\r\n   at Microsoft.PowerShell.ConsoleShell.Start(InitialSessionState initialSessionState, String bannerText, String helpText, String[] args)\r\n   at Microsoft.PowerShell.ConsoleShell.Start(String bannerText, String helpText, String[] args)\r\n   at Microsoft.PowerShell.UnmanagedPSEntry.Start(String consoleFilePath, String[] args, Int32 argc)\r\n\r\n```",
      "created_at": "2019-12-02T03:06:24Z",
      "updated_at": "2019-12-02T03:06:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SchrodingerZhu Thanks! Please remove PSReadline (Remove-Module PSReadline) and try again. Also what is a terminal you use?",
      "created_at": "2019-12-02T03:25:43Z",
      "updated_at": "2019-12-02T03:25:43Z"
    },
    {
      "author": "SchrodingerZhu",
      "author_association": "NONE",
      "body": "still\r\n```\r\n^CProcess terminated. The process cannot access the file because it is being used by another process.\r\n   at System.Environment.FailFast(System.String, System.Exception)\r\n   at Microsoft.PowerShell.UnmanagedPSEntry.Start(System.String, System.String[], Int32)\r\n   at Microsoft.PowerShell.ManagedPSEntry.Main(System.String[])\r\nSystem.IO.IOException: The process cannot access the file because it is being used by another process.\r\n   at System.ConsolePal.TryGetCursorPosition(Int32& left, Int32& top, Boolean reinitializeForRead)\r\n   at System.Console.get_CursorLeft()\r\n   at Microsoft.PowerShell.ConsoleHostRawUserInterface.get_CursorPosition()\r\n   at Microsoft.PowerShell.ConsoleHost.InputLoop.Run(Boolean inputLoopIsNested)\r\n   at Microsoft.PowerShell.ConsoleHost.InputLoop.RunNewInputLoop(ConsoleHost parent, Boolean isNested)\r\n   at Microsoft.PowerShell.ConsoleHost.EnterNestedPrompt()\r\n   at Microsoft.PowerShell.ConsoleHost.DoRunspaceLoop(String initialCommand, Boolean skipProfiles, Collection`1 initialCommandArgs, Boolean staMode, String configurationName)\r\n   at Microsoft.PowerShell.ConsoleHost.Run(CommandLineParameterParser cpp, Boolean isPrestartWarned)\r\n   at Microsoft.PowerShell.ConsoleHost.Start(String bannerText, String helpText, String[] args)\r\n   at Microsoft.PowerShell.ConsoleShell.Start(InitialSessionState initialSessionState, String bannerText, String helpText, String[] args)\r\n   at Microsoft.PowerShell.ConsoleShell.Start(String bannerText, String helpText, String[] args)\r\n   at Microsoft.PowerShell.UnmanagedPSEntry.Start(String consoleFilePath, String[] args, Int32 argc)\r\n```\r\nthe terminal is konsole",
      "created_at": "2019-12-02T13:23:25Z",
      "updated_at": "2019-12-02T13:23:47Z"
    },
    {
      "author": "SchrodingerZhu",
      "author_association": "NONE",
      "body": "same error with terminal `alacritty`. ",
      "created_at": "2019-12-02T13:24:56Z",
      "updated_at": "2019-12-02T13:24:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">    at System.ConsolePal.TryGetCursorPosition(Int32& left, Int32& top, Boolean reinitializeForRead)\r\n   at System.Console.get_CursorLeft()\r\n\r\nI guess it is .Net Core issue with `alacritty`.  \r\n@rjmholt Thoughts?",
      "created_at": "2019-12-02T15:23:46Z",
      "updated_at": "2019-12-02T15:23:46Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Looks like an issue with console ownership where PowerShell expects to own the console but does not.\r\n\r\nLooks like the place we do this in PowerShell is [here](https://github.com/PowerShell/PowerShell/blob/d68d126cae263637a819a14f83062d63a6f221b0/src/Microsoft.PowerShell.ConsoleHost/host/msh/ConsoleHost.cs#L2444-L2447). The underlying implementation of that property in *nix is [here](https://github.com/PowerShell/PowerShell/blob/d68d126cae263637a819a14f83062d63a6f221b0/src/Microsoft.PowerShell.ConsoleHost/host/msh/ConsoleHostRawUserInterface.cs#L1395-L1407).\r\n\r\nIt feels to me like PowerShell is trying to be too clever in this particular instance.\r\n\r\nMy simplified mental model for how our interactive shell should host another interactive program/shell is that we synchronously cede the console to the subprocess, and then when that subprocess finishes we take it back. I'm imagining that's the intended implementation, so this might be an issue where the ConHost is not waiting for that properly.\r\n\r\nIt is notable that we don't have this issue generally; just with `iex`. @SchrodingerZhu what happens if you execute `iex` directly, without `zsh`?\r\n\r\n/cc @daxian-dbw and @SteveL-MSFT since they are better versed in our console interaction logic",
      "created_at": "2019-12-02T17:38:59Z",
      "updated_at": "2019-12-02T17:38:59Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "It looks like the problem is that pwsh is sent a SIGTTIN signal (meaning pwsh doesn't have the console, so stop trying to read it), but it's not being handled.  I couldn't find how to handle this in .NET Core.  Opened https://github.com/dotnet/runtime/issues/452",
      "created_at": "2019-12-02T19:46:13Z",
      "updated_at": "2019-12-02T20:16:06Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "([Summary of currently evented signals in .NET Core](https://github.com/dotnet/corefx/issues/3188#issuecomment-365986835))",
      "created_at": "2019-12-03T02:16:53Z",
      "updated_at": "2019-12-03T02:16:53Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Looks like the recommend solution is to use a Mono library to handle this",
      "created_at": "2019-12-03T17:45:31Z",
      "updated_at": "2019-12-03T17:45:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Why not if it is small library.",
      "created_at": "2019-12-04T05:50:08Z",
      "updated_at": "2019-12-04T05:50:08Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> Why not if it is small library.\r\n\r\nWhile I'd usually propose caution on bringing a new dependency in (both for size and dependency matching reasons), this one seems especially useful to have as a shell, so agree with the proposal.",
      "created_at": "2019-12-04T17:22:13Z",
      "updated_at": "2019-12-04T17:22:13Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "`PSReadLine` is affected by this too. The call to `Console.ReadKey` will result in an `IOException` in this case.\r\n\r\nI read a bit more about `SIGTTIN` and it looks to me the default action for this signal is what we want unless the reading process is ignoring or blocking this signal:\r\n\r\n> From [Access to the Controlling Terminal](https://www.gnu.org/software/libc/manual/html_node/Access-to-the-Terminal.html#Access-to-the-Terminal)\r\nWhen a process in a background job tries to read from its controlling terminal, the process group is usually sent a SIGTTIN signal. This normally causes all of the processes in that group to stop (unless they handle the signal and don\u2019t stop themselves). However, if the reading process is ignoring or blocking this signal, then read fails with an EIO error instead.\r\n\r\nAnd I found this PR: [Investigate which signals really need to be blocked on Unix](https://github.com/dotnet/coreclr/issues/3305), and [this comment](https://github.com/dotnet/coreclr/issues/3305#issuecomment-217895125) indicates `SIGTTIN` is handled by its default handler, which is `Stop` (suspend).\r\n\r\nAccording to the description [here](http://curiousthing.org/sigttin-sigttou-deep-dive-linux#what-are-code-classprettyprintsigttincode-and_2), `SIGTTIN` is sent to a background process when it tries to read from the terminal and `SIGCONT` is sent when the background process is resumed. So I tried the following in bash on Linux:\r\n\r\n```none\r\n## run start-sleep first so it's guaranteed that '[Console]::CursorLeft' executes after the pwsh process becomes a background process.\r\npwsh-preview -c \"start-sleep -s 2; Set-Content ~/bb.txt -value value; Add-Content ~/bb.txt -Value ([Console]::CursorLeft)\" &\r\n```\r\nAnd here is the result\r\n```none\r\nbash:39> pwsh-preview -c \"start-sleep -s 2; Set-Content ~/bb.txt -value value; Add-Content ~/bb.txt -Value ([Console]::CursorLeft)\" &\r\n[1] 12962\r\nbash:40> cat ~/bb.txt \r\nvalue\r\n\r\n[1]+  Stopped                 pwsh-preview -c \"start-sleep -s 2; Set-Content ~/bb.txt -value value; Add-Content ~/bb.txt -Value ([Console]::CursorLeft)\"\r\nbash:41> cat ~/bb.txt \r\nvalue\r\nbash:42> fg\r\npwsh-preview -c \"start-sleep -s 2; Set-Content ~/bb.txt -value value; Add-Content ~/bb.txt -Value ([Console]::CursorLeft)\"\r\nbash:43> cat ~/bb.txt \r\nvalue\r\n0\r\n```\r\nIt looks to me `SIGTTIN` is handled properly -- `pwsh` was suspended when reaching `[Console]::CursorLeft` and resumed after `fg` brings it to foreground.\r\nSo maybe this is not caused by the handling of `SIGTTIN`? (it seems the default action should just be desired anyways)",
      "created_at": "2019-12-18T22:56:32Z",
      "updated_at": "2019-12-18T22:56:32Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Also want to add, this issue has a different repro **on WSL** (works fine on Ubuntu 16.04), which doesn't involve `SIGTTIN` signal sending to pwsh:\r\n\r\n![image](https://user-images.githubusercontent.com/127450/71133608-ef89cb80-21af-11ea-8771-d3f08aab5875.png)\r\n\r\nHere, `iex` runs from bash, then type `Ctrl+C` twice to exit from it, then start `pwsh-preview`, and pwsh crashes with the same exception stack.",
      "created_at": "2019-12-19T00:04:46Z",
      "updated_at": "2019-12-19T00:05:17Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Related https://github.com/PowerShell/PowerShell/issues/8975",
      "created_at": "2020-07-13T22:34:08Z",
      "updated_at": "2020-07-13T22:34:08Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": ".NET team is not going to directly support this.  @JamesWTruher has a prototype to catch signals and convert to .NET event we can use.",
      "created_at": "2021-03-04T01:06:32Z",
      "updated_at": "2021-03-04T01:06:32Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "Since current dotnet preview now contains code for handling signals, i created a private which handles `SIGTTIN` and `SIGTTOU`. Sadly, those signals are not getting delivered in this scenario (no surprise, these are really signals for job control environments which PS is _not_). On the plus side, i have been able to replicate the behavior in a powershell-free environment. I've opened https://github.com/dotnet/runtime/issues/59059 to see if the dotnet folks can provide some guidance.",
      "created_at": "2021-09-13T19:39:25Z",
      "updated_at": "2021-09-13T19:39:25Z"
    },
    {
      "author": "radrow",
      "author_association": "NONE",
      "body": "The issue persists for me. However, I managed to workaround it by wraping `erl` or `iex` with [rlwrap](https://github.com/hanslub42/rlwrap). You may loose some autocompletion, but it is still better than shell crash...",
      "created_at": "2022-06-27T08:42:06Z",
      "updated_at": "2022-06-27T08:42:06Z"
    }
  ],
  "created_at": "2019-11-29T13:42:38Z",
  "labels": [
    "WG-Engine"
  ],
  "number": 11215,
  "state": "open",
  "title": "Powershell 7 crashes when exiting from elixir's iex",
  "updated_at": "2022-06-27T08:42:06Z"
}