{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12631",
  "author": "iSazonov",
  "body": "C# 8.0 introduces great feature - nullable reference types.\r\nhttps://devblogs.microsoft.com/dotnet/try-out-nullable-reference-types/\r\n\r\nMany developers already benefit from the feature in their projects and expect that PowerShell API will be nullable annotated too.\r\n\r\nThis is a lot of work. @iSazonov  and @powercode agreed to start the project. But we need more contributors and code reviewers.\r\n@vexx32 @SeeminglyScience @KirkMunro welcome and please ask your friends and followers.\r\n\r\nTo make this work efficiently, we need Rules and Plan.\r\n\r\n### Rules\r\n\r\nBest start is .Net team experience https://github.com/dotnet/runtime/blob/master/docs/coding-guidelines/api-guidelines/nullability.md\r\n\r\nMain rule is that _annotation PRs should not change code due to the high risk of making a bug_.\r\n\r\nI believe we should strongly follow the rule too and make separate PRs if we see a need to refactor a code and especially if we see a bug.\r\n\r\nWe could save more time if we fixed most code style issues before starting the project. \r\nI started the work in #11916 but again I need a help with code review. (#11916 fix ~5000 issues from ~10000, and I hope to fix rest in follow some PRs. You could pull such PRs too).\r\n\r\nPlease use one pattern:\r\n- one PR per type with name `Enable nullable: <namespace>.<type name>`\r\n- enable directive before first type line (after XML comments) and restore directive after last type line without extra empty lines:\r\n```c#\r\n    [Guid(\"AF86E2E0-B12D-4c6a-9C5A-D7AA65101E90\")]\r\n    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]\r\n    #nullable enable\r\n    internal interface IInspectable { }\r\n    #nullable restore\r\n```\r\n- add XML comments to non-nullable members like \"This never returns null.\" - good documentation helps a lot\r\n\r\n\r\n### Plan\r\n\r\nIn the file [System.Management.Automation-20201109114545.xlsx](https://github.com/PowerShell/PowerShell/files/6544170/System.Management.Automation-20201109114545.xlsx)\r\n\r\n\r\n( Previous  [System.Management.Automation-20201109114545.xlsx](https://github.com/PowerShell/PowerShell/files/6514003/System.Management.Automation-20201109114545.xlsx)\r\n\r\nall SMA PowerShell types are sorted by dependency count.\r\n\r\nWe should annotate types by groups starting from group with dependency 0 (Group0), then 1 and so on.\r\nMain rule here is - current annotating type should have all dependencies already annotated and merged.\r\n\r\n### Status\r\n\r\n\r\nWorking on **Group0**\r\n\r\n_Done_ - most of interface types was annotated.\r\n\r\n_In process_ - now we can annotate structs with dependency 0\r\n\r\n",
  "closed_at": "2021-08-25T04:15:06Z",
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "At the very least I'll definitely sign up for some reviews, I'd love to see this come together.\r\n\r\n@SteveL-MSFT I'm not sure if y'all typically require a team member to sign off on a review before it can be merged, if so you may want to consider appointing a few folks from the community specifically for these annotation only PR's.\r\n\r\n@JamesWTruher Once a lot of the this work is done it'd be amazing to see it in PowerShell Standard.  Assuming your tooling doesn't already capture these (does it capture internal attribute annotations?), it would need to capture:\r\n\r\n```raw\r\nSystem.Diagnostics.CodeAnalysis.AllowNullAttribute\r\nSystem.Diagnostics.CodeAnalysis.DisallowNullAttribute\r\nSystem.Diagnostics.CodeAnalysis.MaybeNullAttribute\r\nSystem.Diagnostics.CodeAnalysis.NotNullAttribute\r\nSystem.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute\r\nSystem.Diagnostics.CodeAnalysis.NotNullWhenAttribute\r\nSystem.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute\r\nSystem.Diagnostics.CodeAnalysis.DoesNotReturnAttribute\r\nSystem.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute\r\nSystem.Diagnostics.CodeAnalysis.MemberNotNullAttribute\r\nSystem.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute\r\nSystem.Runtime.CompilerServices.NullableAttribute (embedded internal)\r\nSystem.Runtime.CompilerServices.NullableContextAttribute (embedded internal)\r\n```\r\n\r\nAlso if annotations were added to the 5.1 ref lib (wishful thinking I know, but \ud83e\udd1e) they would all need to be embedded internal.",
      "created_at": "2020-05-12T13:31:17Z",
      "updated_at": "2020-05-12T13:41:31Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I'm sure I can do some work here, for sure. \ud83d\ude42 \r\n\r\nI will _probably_ end up getting distracted with more style-related issues here and there as well, but I should be able to keep those and nullable annotation PRs completely separate.",
      "created_at": "2020-05-12T13:35:57Z",
      "updated_at": "2020-05-12T13:35:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32  As for style issues I foresaw this and started # 11916. I hope we do the work first.\r\n\r\n> I'm not sure if y'all typically require a team member to sign off on a review before it can be merged\r\n\r\nIt is good rule for functional changes because Engine sometimes is very complex.\r\nI can fast merge PRs with annotations while they contains only annotations because they can break nothing in functionality. (We will fix annotations later based on feedbacks for a long time.)\r\nBut we must follow strong rule - move all code changes in other PRs. If we see that a code could be refactored as result of annotations we should do this after the annotations merged.\r\n\r\n",
      "created_at": "2020-05-12T13:56:41Z",
      "updated_at": "2020-05-12T13:56:41Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I'll give that one a look over, bit of a big one, but does need doing. \ud83d\udc4d ",
      "created_at": "2020-05-12T17:28:22Z",
      "updated_at": "2020-05-12T17:28:22Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "There are cases where the code wont build after annotations are added. In that case, we have to make changes, right?\r\n\r\nBut we should strive to keep changes to a minimum!\r\n",
      "created_at": "2020-05-13T20:37:43Z",
      "updated_at": "2020-05-13T20:37:43Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "In SMA, is is also useful to start at the classes at the bottom of the dependency chain. \r\nI started with LanguagePrimitives, PSObject and the PSObject collections.",
      "created_at": "2020-05-13T20:52:00Z",
      "updated_at": "2020-05-13T20:52:00Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "In terms of creating a list of types to start with as @iSazonov mentioned, I wrote this small function to determine the inheritance chain length of a given type:\r\n\r\n```ps1\r\nfunction Get-InheritanceChainLength {\r\n    [CmdletBinding()]\r\n    param(\r\n        [Parameter(Mandatory)]\r\n        [Type]\r\n        $Type\r\n    )\r\n\r\n    if ($Type.BaseType -eq $null) {\r\n        return 1\r\n    }\r\n\r\n    (Get-InheritanceChainLength $Type.BaseType) + 1\r\n}\r\n```\r\n\r\nUsing this, we can get a listing of the types most deeply nested first:\r\n\r\n```ps1\r\n[powershell].Assembly.GetTypes() |\r\n    Sort-Object -Property @(\r\n        @{Expression = { Get-InheritanceChainLength -Type $_ }; Descending = $true}\r\n        @{ Expression = 'Name';Ascending = $true }\r\n    )\r\n```\r\n\r\nThat's only going to be a fraction of all the types since there are a good number of assemblies to work through, but it's a start.",
      "created_at": "2020-05-13T21:12:38Z",
      "updated_at": "2020-08-24T07:50:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Thanks @vexx32! It is great!\r\n\r\n> That's only going to be a fraction of all the types since there are a good number of assemblies to work through, but it's a start.\r\n\r\nWe could simply enumerate all out assemblies with ForEach-Object ",
      "created_at": "2020-05-14T06:57:57Z",
      "updated_at": "2020-05-14T06:57:57Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I think adding @daxian-dbw and @rjmholt as reviewers (just need one of them to sign off, not both) would be sufficient.  This would be great to have!",
      "created_at": "2020-05-20T17:23:20Z",
      "updated_at": "2020-05-20T17:23:20Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 We don't really care about inheritance, but dependencies between types. There will be clusters of types at different levels, and it is easier do start at the bottom.",
      "created_at": "2020-05-20T19:19:51Z",
      "updated_at": "2020-05-20T19:19:51Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32\r\n`Get-InheritanceTreeLength` -> `Get-InheritanceChainLength`\r\n\r\n",
      "created_at": "2020-07-06T16:49:23Z",
      "updated_at": "2020-10-26T15:52:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "After looking this script in depth I think we need a Roslyn analyzer because we take into account all type cross-references - if Class1 uses Class2 in field, property or local the Class2 should be annotated before Class1.\r\nHas anybody an experience with Roslyn API to create such custom analyzer?",
      "created_at": "2020-09-01T06:55:48Z",
      "updated_at": "2020-09-01T06:55:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I implemented the helper tool.\r\n```\r\nUsing MSBuild at 'C:\\Users\\1\\AppData\\Local\\Microsoft\\dotnet\\sdk\\5.0.100-rc.2.20479.15\\' to load projects.\r\nLoading project 'C:/Users/1/Documents/GitHub/iSazonov/PowerShell/src/System.Management.Automation/System.Management.Automation.csproj'\r\nEvaluate        0:00.6018181    System.Management.Automation.csproj\r\nBuild           0:00.7572002    System.Management.Automation.csproj\r\nEvaluate        0:00.0439293    Microsoft.PowerShell.CoreCLR.Eventing.csproj\r\nBuild           0:00.1137562    Microsoft.PowerShell.CoreCLR.Eventing.csproj\r\nResolve         0:00.0220096    Microsoft.PowerShell.CoreCLR.Eventing.csproj (net5.0)\r\nResolve         0:00.4936166    System.Management.Automation.csproj (net5.0)\r\nFinished loading project 'C:/Users/1/Documents/GitHub/iSazonov/PowerShell/src/System.Management.Automation/System.Management.Automation.csproj'\r\nDocuments count = 733\r\nLoading namespaces\r\nLoading types\r\nType count = 2421\r\nEvaluating type dependencies\r\nWriting to file: System.Management.Automation-20201106180401.csv\r\n```\r\nIt shows **2421** types only in SMA. I never thought that so many types are declared there.\r\nThere is even no way to publish this huge list in expanded form.\r\n\r\nI have no idea how we can handle this. \u2708\ufe0f  I suspect that many types require refactoring and new xUnit tests.\r\n\r\n\r\n",
      "created_at": "2020-11-06T13:15:36Z",
      "updated_at": "2020-11-06T13:15:36Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "If we have the list I guess we can stash it in a spreadsheet and start with things that have no dependencies I guess? It would be some work to be sure, but it can be done piece by piece \ud83d\ude42 ",
      "created_at": "2020-11-06T14:32:13Z",
      "updated_at": "2020-11-06T14:32:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Yes, I sorted the list so that to have types with no dependencies on top. (I want to add more info in the list before share.)\r\n\r\nI believe we could be more productive if MSFT team reviewed the list first and indicated _design intentions_ which are not always obvious.",
      "created_at": "2020-11-06T17:13:25Z",
      "updated_at": "2020-11-06T17:13:25Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Fully agreed on that point, but we may be waiting some time for that. It might be simpler to just do it as we're able and any design intentions may need to come from the PR reviews. Looking for design intent across the whole of S.M.A may prove a bit of a lengthy effort, even moreso than the code changes.",
      "created_at": "2020-11-06T17:38:18Z",
      "updated_at": "2020-11-06T17:38:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Here is a sorted list of SMA types.\r\n[System.Management.Automation-20201109114545.xlsx](https://github.com/PowerShell/PowerShell/files/5511944/System.Management.Automation-20201109114545.xlsx)\r\n\r\nI think we could start with interfaces in Group0 (DependencyCount = 0):\r\n\r\nIBlockingEnumerator\r\nICmdletProviderSupportsHelp\r\nIContentReader\r\nIContentWriter\r\nIDynamicParameters\r\nIEtwActivityReverter\r\nIInspectable\r\nILightCallSiteBinder\r\nIMethodInvoker\r\nIModuleAssemblyInitializer\r\nIResourceSupplier\r\nIRSPDriverInvoke\r\nIScriptPosition\r\nISecurityDescriptorCmdletProvider\r\nISupportsTypeCaching\r\nIValidateSetValuesGenerator\r\n\r\n",
      "created_at": "2020-11-09T16:44:55Z",
      "updated_at": "2020-11-09T16:44:55Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "> Here is a sorted list of SMA types.\r\n> [System.Management.Automation-20201109114545.xlsx](https://github.com/PowerShell/PowerShell/files/5511944/System.Management.Automation-20201109114545.xlsx)\r\n> \r\n> I think we could start with interfaces in Group0 (DependencyCount = 0):\r\n> \r\n> IBlockingEnumerator\r\n> ICmdletProviderSupportsHelp\r\n> IContentReader\r\n> IContentWriter\r\n> IDynamicParameters\r\n> IEtwActivityReverter\r\n> IInspectable\r\n> ILightCallSiteBinder\r\n> IMethodInvoker\r\n> IModuleAssemblyInitializer\r\n> IResourceSupplier\r\n> IRSPDriverInvoke\r\n> IScriptPosition\r\n> ISecurityDescriptorCmdletProvider\r\n> ISupportsTypeCaching\r\n> IValidateSetValuesGenerator\r\n\r\nIt looks like adding the nullable annotations for these interfaces will be easy.",
      "created_at": "2020-11-09T17:01:22Z",
      "updated_at": "2020-11-09T17:01:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> It looks like adding the nullable annotations for these interfaces will be easy.\r\n\r\nEasy start. It won't always be that easy :-)\r\n\r\nPlease use one pattern:\r\n- one PR per type with name `Enable nullable: <namespace>.<type name>`\r\n- enable directive before first type line and restore directive after last type line:\r\n```c#\r\n    [Guid(\"AF86E2E0-B12D-4c6a-9C5A-D7AA65101E90\")]\r\n    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]\r\n    #nullable enable\r\n    internal interface IInspectable { }\r\n    #nullable restore\r\n```\r\n",
      "created_at": "2020-11-09T17:29:00Z",
      "updated_at": "2020-11-09T17:36:08Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "I will start this work, starting at the bottom of the list with `IValidateSetValuesGenerator` and working up to the top. (in case anyone is already working top to bottom)",
      "created_at": "2020-11-09T17:53:06Z",
      "updated_at": "2020-11-09T17:53:06Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Do we want to format the pre-processor directives to start at the beginning of the line? This would be standard indentation behaviour in Visual Studio. See https://github.com/PowerShell/PowerShell/pull/14018#discussion_r520015755.",
      "created_at": "2020-11-09T18:18:27Z",
      "updated_at": "2020-11-09T18:18:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If we can not to turn off the behavior in VS 2019 I agree to put this at the beginning of the line.",
      "created_at": "2020-11-09T18:47:30Z",
      "updated_at": "2020-11-09T18:47:30Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "We will get a lot of CodeFactor errors since we touch code that is in violation of the rules. \r\n\r\nCan we agree to ignore these errors and only focus on annotations?\r\n",
      "created_at": "2020-11-19T20:30:55Z",
      "updated_at": "2020-11-19T20:30:55Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Tick when starting work\r\n\r\n- [x] IAssignableValue\r\n- [x] IAstPostVisitHandler\r\n- [x] IBoxableInstruction\r\n- [x] IContainsErrorRecord\r\n- [x] IDynamicPropertyCmdletProvider\r\n- [x] IEtwEventCorrelator\r\n- [x] IHasSessionStateEntryVisibility\r\n- [x] IHostSupportsInteractiveSession\r\n- [x] IHostUISupportsMultipleChoiceSelection\r\n- [x] IInstructionProvider\r\n- [x] IJobDebugger\r\n- [x] IModuleAssemblyCleanup\r\n- [x] IOutputProcessingState\r\n- [x] IPropertyCmdletProvider\r\n- [x] IRegistryWrapper\r\n- [x] IScriptCommandInfo\r\n- [x] IScriptExtent\r\n- [x] ISubsystem\r\n- [x] ISupportsAssignment\r\n- [x] ITypeName\r\n- [x] IArgumentCompleter\r\n- [x] ICommandRuntime2\r\n- [x] IContentCmdletProvider\r\n- [x] IDispatch\r\n- [x] IWSManNativeApiFacade\r\n- [x] IConversionData\r\n- [x] ICommandPredictor\r\n- [x] ICommandRuntime\r\n- [x] IParameterMetadataProvider\r\n- [x] ICustomAstVisitor2\r\n- [x] ICustomAstVisitor\r\n",
      "created_at": "2020-11-19T22:34:47Z",
      "updated_at": "2020-12-11T04:59:57Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "To help with the workflow, I have this function \r\n\r\n```powershell\r\n\r\n\r\nfunction NullableCommit {\r\n    param(\r\n        [Parameter(Mandatory)]\r\n        [string] $Name,\r\n        [ArgumentCompletions(\"System.Diagnostics\", \"System.Diagnostics.Eventing\", \"System.Diagnostics.Eventing.Reader\", \"System.Management.Automation\", \"System.Management.Automation.ComInterop\", \"System.Management.Automation.Configuration\", \r\n        \"System.Management.Automation.Help\", \"System.Management.Automation.Host\", \"System.Management.Automation.Internal\", \"System.Management.Automation.Internal.Host\", \"System.Management.Automation.InteropServices\", \"System.Management.Automation.Interpreter\",\r\n         \"System.Management.Automation.Language\", \"System.Management.Automation.PerformanceData\", \"System.Management.Automation.Provider\", \"System.Management.Automation.PSTasks\", \"System.Management.Automation.Remoting\", \"System.Management.Automation.Remoting.Client\", \r\n         \"System.Management.Automation.Remoting.Internal\", \"System.Management.Automation.Remoting.Server\", \"System.Management.Automation.Remoting.WSMan\", \"System.Management.Automation.Runspaces\", \"System.Management.Automation.Runspaces.Internal\", \r\n         \"System.Management.Automation.Security\", \"System.Management.Automation.SecurityAccountsManager\", \"System.Management.Automation.SecurityAccountsManager.Extensions\",\r\n         \"System.Management.Automation.SecurityAccountsManager.Native\", \"System.Management.Automation.SecurityAccountsManager.Native.NtSam\", \"System.Management.Automation.Subsystem\", \"System.Management.Automation.Tracing\", \"Microsoft.PowerShell.Commands\")]\r\n        [string] $Namespace = \"System.Management.Automation\"\r\n    )\r\n    \r\n    git checkout -b nullable/$Name master\r\n    Read-Host -Prompt \"Press enter when done\"\r\n    git diff\r\n    $choices = @(\r\n        [System.Management.Automation.Host.ChoiceDescription]::new(\"&Commit and push\")\r\n        [System.Management.Automation.Host.ChoiceDescription]::new(\"&Fix\")\r\n        [System.Management.Automation.Host.ChoiceDescription]::new(\"&Diff\")\r\n    )\r\n    \r\n    while ($i -ne 0) {\r\n        if ($i -eq 2) {\r\n            git diff master\r\n        }\r\n                \r\n        $i = $PSCmdlet.Host.UI.PromptForChoice(\"Commit?\", \"\", $choices, 0)    \r\n    }\r\n    git commit -am \"Enable nullable: $Namespace.$Name\"\r\n    git push\r\n\r\n}\r\n```",
      "created_at": "2020-11-19T22:42:45Z",
      "updated_at": "2020-11-19T23:35:42Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "\ud83c\udfb6It's been a hard day's night...",
      "created_at": "2020-11-20T00:55:02Z",
      "updated_at": "2020-11-20T00:55:02Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "I believe that was all the interfaces of depth 0",
      "created_at": "2020-11-20T00:55:44Z",
      "updated_at": "2020-11-20T00:55:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> We will get a lot of CodeFactor errors since we touch code that is in violation of the rules.\r\n> \r\n> Can we agree to ignore these errors and only focus on annotations?\r\n\r\nYes, we should exclude unrelated changes. If a code requires reformatting or refactoring we should make this before in separate PRs with adding tests as needed.",
      "created_at": "2020-11-20T03:06:06Z",
      "updated_at": "2020-11-20T03:06:06Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Updated file System.Management.Automation-20201109114545.xlsx in OP. \r\n~About 50% interface types was annotated.~\r\n\r\nOnly 3  interface types is not annotated:\r\n\r\n- IDispatch\r\n- ICommandRuntime\r\n- IParameterMetadataProvider",
      "created_at": "2020-12-11T07:14:33Z",
      "updated_at": "2021-05-20T08:02:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Most of interface types was annotated.\r\n\r\nNow we can annotate **structs with dependency 0**. It is ~71 struct but most of them is for p/invokes and annotations are formal. Welcome to grab!\r\n\r\nSince MSFT team is not very active I will do fast merge since it is not critical changes.",
      "created_at": "2021-05-20T08:16:38Z",
      "updated_at": "2021-05-20T08:20:03Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Why is this closed? Will we not accept annotation PR anymore?",
      "created_at": "2021-08-25T11:25:12Z",
      "updated_at": "2021-08-25T11:25:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@xtqqczze We need to process about 20 classes daily to get the job done in a reasonable amount of time. But we see near-zero activity and complete indifference from MSFT team.\r\nSo I have no desire to keep track of dead issues.",
      "created_at": "2021-08-26T04:11:33Z",
      "updated_at": "2021-08-26T04:11:33Z"
    }
  ],
  "created_at": "2020-05-12T09:07:42Z",
  "labels": [
    "Issue-Meta",
    "Up-for-Grabs",
    "Hacktoberfest"
  ],
  "number": 12631,
  "state": "closed",
  "title": "Nullable annotations",
  "updated_at": "2021-08-26T04:11:33Z"
}