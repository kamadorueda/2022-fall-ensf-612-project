{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17732",
  "author": "SteveL-MSFT",
  "body": "### Summary of the new feature / enhancement\n\nPS7 package has gotten quite large.  We should review the list of assemblies we crossgen as part of the build process and see if any that don't affect startup perf should stay MSIL.  Perhaps even assess the startup difference between pure MSIL and crossgen to see if .NET JIT has improved it to the point that it makes more sense to prioritize size over a small perf improvement (of course if the difference is large, we'll need to keep crossgen)\n\n### Proposed technical implementation details (optional)\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Since all .Net Runtime dlls are distributed now as crossgened which is 90% of distributive size I would not expect a noticeable reduction in the size of the distribution.\r\n\r\nAlso it is not clear what is the request about - about package size or unpacked size on disk?",
      "created_at": "2022-07-21T03:26:56Z",
      "updated_at": "2022-07-21T03:26:56Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The on disk size is the major factor not the pkg size pre-install.   I believe if the build doesn't target a specific runtime, it should not use the crossgen .NET runtime assemblies otherwise it wouldn't work.  Also `Start-PSBuild` has a `-ForMinimalSize` switch that uses the MSIL .NET assemblies which, last I looked, reduced the size by 50%.  However, that build doesn't have any crossgen at all as startup perf for that package is not a critical factor.",
      "created_at": "2022-07-21T05:32:14Z",
      "updated_at": "2022-07-21T05:33:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The only way to make pwsh small and fast is to use _shared_ .Net Runtime. That's the only thing we didn't do - we already have an FX distribution and a compiled one too.",
      "created_at": "2022-07-21T05:44:00Z",
      "updated_at": "2022-07-21T05:44:00Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "FX dependent packages can help in some scenarios where .NET Runtime can be installed as a dependent package or it's already there.  However, we have partner scenarios where PS7 is the only .NET app so there's no savings there.",
      "created_at": "2022-07-21T14:54:13Z",
      "updated_at": "2022-07-21T14:54:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> However, we have partner scenarios where PS7 is the only .NET app so there's no savings there.\r\n\r\nCan you describe the kind of such applications? \r\nI can assume that this application does not use all the features of the .Net Runtime. (Otherwise there is no way to reduce the size of the application at all.) And if so, we could think of trimming unused dlls.\r\nThis in turn brings us back to a project of pwsh partitioning into _subsystems_.\r\nThis in turn leads us again to the idea of creating an experimental project of the new generation pwsh (vNext PowerShell) in which gradually implement new (and not so new) ideas for 3 - 5 years.\r\nNow obviously a lot is blocked for the simple reason that we are only working for today. PowerShell was once a technological breakthrough. Perhaps it is time for a new leap into the future? :-)",
      "created_at": "2022-07-22T04:08:48Z",
      "updated_at": "2022-07-22T04:08:48Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "There's a significant savings just by shipping MSIL vs crossgen assemblies.  I'm not sure why you're so against that.  Some of the previous discussions/ideas like subsystem, etc... have turned out to be significant efforts that also have higher risks in terms of regressions.  Our build script used to have a list of assemblies to crossgen while currently it's either compile to ReadyToRun for everything or nothing (fxdependent and forminimalsize pkgs).  I think we can consider a hybrid approach where the assemblies that impact startup should be ReadyToRun and everything else is MSIL.  If we can get a 25-30% size reduction, wouldn't that be worthwhile?",
      "created_at": "2022-07-22T04:51:19Z",
      "updated_at": "2022-07-22T04:51:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I'm not sure why you're so against that\r\n\r\nI don't mind :-) I'd prefer a more fundamental solution. :-)\r\n\r\n> have turned out to be significant efforts that also have higher risks in terms of regressions.\r\n\r\nI understand that and so does your situation. That's why I'm talking about the need for an experimental project. From it, some ideas can be transferred back to pwsh, or backward compatibility elements can be added to adapt it to consumers. This is roughly what happens with the .Net Framework and .Net Core.\r\nI think the ideas in PowerShell are only partially implemented. And I believe that at some point the next era will come.\r\n\r\n> If we can get a 25-30% size reduction, wouldn't that be worthwhile?\r\n\r\nI think you are too optimistic. \r\nIf we remove crossgen code from pwsh dlls - it is too small effect.\r\nIf we remove crossgen code from all dlls including .Net - this reduces size significant but we will have to re-sign the dlls. Then make another package? Is it worth it? Wouldn't it be easier if this partner just repackaged the existing package and removed unnecessary dlls and even crossgen code from it?\r\n\r\nNotice, pwsh distributes about 430 dlls but only 69 dlls are loaded at (interactive) startup. So the partner has a great ability to remove unused dlls.",
      "created_at": "2022-07-22T06:23:43Z",
      "updated_at": "2022-07-22T06:23:43Z"
    }
  ],
  "created_at": "2022-07-20T20:32:39Z",
  "labels": [
    "Issue-Enhancement",
    "Area-Maintainers-Build"
  ],
  "number": 17732,
  "state": "open",
  "title": "Revisit which assemblies should be crossgen and which should not",
  "updated_at": "2022-07-22T06:23:44Z"
}