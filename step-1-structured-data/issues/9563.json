{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9563",
  "author": "KirkMunro",
  "body": "As a PowerShell contributor, I have a thought about bug/enhancement processing.\r\n\r\nToday the process seems to be:\r\n1. Identify a bug or an enhancement for PowerShell.\r\n1. Have optional discussion about that bug or enhancement in the related Issue page.\r\n1. Submit a PR that addresses the issue. In submitting the PR, you can write tests first or write code first, but if it can be automatically tested, tests must be included in the PR.\r\n\r\nOne part of this process that seems to be lacking is visibility into the relationships that your issue/PR may have with other open issues. There are ~1900 open issues at the time of this writing. We have maintainers who will add comments to an issue, referencing other related issues, but that's manual and some relationships may be missed. Also, when we add Pester tests, there are no references for those tests back to the issues they were designed to identify and confirm fixed, so if they then break in the future, intentionally or otherwise, and you want visibility into the discussion around the related issues, that information isn't readily available to you.\r\n\r\nAfter having gone through this process a decent number of times, I find myself wondering if it would be better if:\r\n\r\n1. The form for submitting new bugs recommends that the reproduction code be written as a one or more Pester tests if users know Pester already (not requiring it though, to keep the barrier to posting an issue as low as possible).\r\n1. Once bugs are confirmed, if the Issue does not have an associated Pester test already, add a label indicating Pester tests are needed.\r\n1. Once bugs are confirmed and Pester tests are ready, add them to the repo via a PR, with the Issue numbers used as tags for the tests.\r\n\r\n    > **Aside**: Today in Pester you can tag on Describe, but not on It -- it may be beneficial to be able to do more granular tagging on It so that Describe can be used to group a set of related tests while still allowing individual tests to be associated with GitHub issues, and if that is desirable we may need to request a fix or submit a PR for Pester.\r\n\r\n1. When the CI/CD pipeline runs Pester tests, tests associated with open issues are ignored unless they are specifically related (tagged) to that PR.\r\n1. As an additional background build step (not required for success), tests associated with open issues that are not also associated to the PR are run so that PR authors can identify other related tests (and therefore issues) that are impacted by their changes, and tag them so that they are associated with the PR as well.\r\n\r\nThe end goals behind these ideas are:\r\n\r\n1. To increase visibility between related issues without having to scour through the issue discussion and/or manually add a reference between issues as part of that discussion.\r\n1. To identify all issues that are either partially or fully addressed when a PR is merged, ensuring that all open issues are actually still open issues.\r\n1. To accurately report all issues that are fixed in product releases.\r\n1. To encourage TDD, ensuring that issues are reproducible on a machine before they are fixed and facilitating the verification of those issues once they are fixed.\r\n\r\nThoughts?",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I like the idea and intent, but not sure how well this will work in practice.  Part of the problem is for CI/CD to be aware of GitHub issues, we'd have to have a wrapper to skip the tests by querying GitHub at runtime.  Although doable, this will hit GitHub API throttling issues unless we use someone's personal access token.\r\n\r\nI do like the idea of submitting bug reports as Pester tests and a few people actually do this, but I suspect the number of people able to author Pester tests (let along good Pester tests) is extremely small compared to the total number of folks reporting issues.  I think if regular contributors start doing this leading by example, we may see more of it happening.",
      "created_at": "2019-05-10T05:33:33Z",
      "updated_at": "2019-05-10T05:33:33Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Good point. Maybe a better way to separate tests expected to be working from tests for open issues is to physically separate them then, in separate paths. Then CI/CD wouldn't have to query GitHub at all. It would only care if the tests in the \"expected working path\" passed, and the result of other tests would be purely informational.",
      "created_at": "2019-05-10T15:57:35Z",
      "updated_at": "2019-05-10T15:57:35Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "Another way this can be achieved is by using `Set-ItResult` - [docs](https://github.com/pester/Pester/wiki/Set%E2%80%90ItResult)\r\n\r\n```PowerShell\r\n\r\nDescribe \"Help system tests\" {\r\n  It 'Valid test' {\r\n    Get-Help | Should -Not -BeNullOrEmpty\r\n  }\r\n  \r\n  It 'New-Cmdlet test' {\r\n    Set-ItResult -Inconclusive -Because 'New-Cmdlet is not implemented yet' \r\n    Get-Help New-Cmdlet | Should -Not -BeNullOrEmpty\r\n  }\r\n}\r\n```\r\nThe output will be like: \r\n\r\n```\r\nDescribing Help system tests\r\n  [+] Valid test 72ms\r\n  [?] New-Cmdlet test, is inconclusive, because New-Cmdlet is not implemented yet 15ms\r\n```",
      "created_at": "2019-05-10T16:43:16Z",
      "updated_at": "2019-05-10T16:43:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Currently such tests is marked as \"pending\" in our code base and we can easily identify them. (So we could add more such tests.)",
      "created_at": "2019-05-12T16:38:56Z",
      "updated_at": "2019-05-12T16:41:18Z"
    }
  ],
  "created_at": "2019-05-08T16:17:15Z",
  "number": 9563,
  "state": "open",
  "title": "Issue processing thoughts",
  "updated_at": "2019-05-12T16:41:18Z"
}