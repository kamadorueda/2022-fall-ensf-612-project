{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4096",
  "author": "SteveL-MSFT",
  "body": "We should be able to have a lightweight client library/host that is solely for managing remote PowerShell endpoints.  This means that the parser, etc... is not on the client.",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We could start with two separated clients - 1. PSRP 2. SSH\r\n\r\nIf I understand right we need simple console app to setup remote session and run remote PowerShell process.",
      "created_at": "2018-01-13T17:59:14Z",
      "updated_at": "2018-01-17T04:44:20Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The client should understand both WSMan and SSH PSRP.  Pure SSH should be existing solutions.  For a library, I wonder if it's better to just enable a basic REST endpoint to execute PowerShell and get back JSON which means many existing languages can easily work with PowerShell remotely or if there is a real need for apps to talk PSRP.",
      "created_at": "2018-01-17T02:05:05Z",
      "updated_at": "2018-01-17T02:05:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@markekraus Have you thoughts about PowerShell REST endpoint?",
      "created_at": "2018-01-17T04:47:23Z",
      "updated_at": "2018-01-17T04:47:23Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Kind of...  \r\n\r\n* The API should be swagger defined\r\n* Some or all \"core\" cmdlets should be exposed as endpoints that accept parameters as queries\r\n  `/api/v1.0/Cmdlets/Get-Process?Name=pwsh` == `Get-Process -Name pwsh`\r\n* The same endpoint without a cmdlet should list available cmdlets\r\n  `/api/v1.0/Cmdlets/` lists available cmdlets and parameters\r\n* the cmdlet endpoints should accept a json object body that contains a object with a `Parameters` property that is an array of objects containing paramters to execute..\r\n   `/api/v1.0/Cmdlets/Get-Process` accepts the body `{\"Parameters\":[{\"Name\":\"pwsh\"},{\"Id\":1234}]}` and executes `Get-Process -Name pwsh; Get-Process -d 12345`\r\n* There should be and endpoint that takes general cmds\r\n  `/api/v1.0/Command` takes a body with something like `{\"Commands\":[\"$ProcessName = \\\"pwsh\\\"\",\"Get-Process -Name $ProcessName\"]}` which executes `$ProcessName = \"pwsh\"; Get-Process -Name $ProcessName`\r\n* Results should some what mimic jobs where the output streams are sepertaed. \r\n* There should be a modules endpoint which lists the available modules and any exposed endpoints\r\n* modules endpoint should possibly be allowed to install and uninstall modules \r\n* Piping objects should be done though a JSON body.. not really sure on this one.. might only work on `ValueFromPipelineByPropertyName`?? *shrugs\r\n* and `$SessionId` query should be available on all endpoints to identify a PowerShell session the cmds are run in and response header should include session expiry date. Variables and such should persist in that session until expiry, expiry clock resets after every execution, session expiry time is configurable, session should be tied current auth, a single auth can have multiple session, thus requiring a session edpoint to reqeust manage sessions.... API calls with out `$SessionID` could either run in a one off session or against a default session...\r\n\r\n\r\nIts fair to say I have given this some thought before....",
      "created_at": "2018-01-17T11:06:56Z",
      "updated_at": "2018-01-17T11:06:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@markekraus \ud83d\ude04 I only ask your opinion not full specifications. Thanks for great comment. I think it is better to move this in new Issue.\r\n@SteveL-MSFT Perhaps it makes sense to ask MSFT product teams to give feedback about PowerShell REST endpoint. I know Exchange Server team is actively using PowerShell over HTTPS (EMS).",
      "created_at": "2018-01-17T13:27:59Z",
      "updated_at": "2018-01-17T13:27:59Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@markekraus perhaps you can author an RFC :)",
      "created_at": "2018-01-18T02:03:57Z",
      "updated_at": "2018-01-18T02:03:57Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "### I, for one, **definitely** don't want a REST endpoint. \r\n\r\nI already have PowerShell remoting and constrained endpoints, etc. I don't need a replacement **server** product -- I need client libraries to call the PowerShell remoting endpoints I already have.\r\n\r\nFor what it's worth, we have web apps that currently make PowerShell remoting calls, and as we're moving things to ASP.NET Core, we still need to be able to do PowerShell remoting (including from containers). I just don't want (to need) to ship a whole copy of all of PowerShell's dependencies for that.\r\n\r\nI mean, I'm sure that a PowerShell REST endpoint would be awesome, but it's change on the wrong end, for me...",
      "created_at": "2018-10-18T04:15:59Z",
      "updated_at": "2018-10-18T04:23:44Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The REST discussion deviated from the original topic (yes, I did that!).  Let's focus discussion of this issue on a client library to remotely manage existing PowerShell endpoints.  ",
      "created_at": "2018-10-18T06:31:00Z",
      "updated_at": "2018-10-18T06:31:00Z"
    },
    {
      "author": "it-praktyk",
      "author_association": "CONTRIBUTOR",
      "body": "@nitzmahone, @jborean93, is it something that can be used by Ansible to manage Windows?",
      "created_at": "2018-10-18T15:59:28Z",
      "updated_at": "2018-10-18T15:59:28Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "@it-praktyk from the original topic probably not. We use our own Python client(s) and talk to the server. Having a REST endpoint is interesting but we currently don't have any plans on officially supporting PSCore in the short term which is what will be affected by this.",
      "created_at": "2018-10-18T19:15:32Z",
      "updated_at": "2018-10-18T19:15:32Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "@jborean93 well, the client library would be .NET _Standard_, but it has to be able to talk to either Windows PowerShell or PowerShell Core endpoints. It would basically be a .NET version of the Python client, so we can finally catch up \ud83d\ude2c",
      "created_at": "2018-10-18T20:21:48Z",
      "updated_at": "2018-10-18T20:25:44Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "@Jaykul agreed, technically on the Windows side you have `winrs` which allows you to run commands over WinRM outside of PSRP but that's Windows specific.",
      "created_at": "2018-10-18T20:43:57Z",
      "updated_at": "2018-10-18T20:43:57Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "this is also linked to #5681\r\n",
      "created_at": "2022-07-20T20:37:47Z",
      "updated_at": "2022-07-20T20:37:47Z"
    }
  ],
  "created_at": "2017-06-23T17:22:35Z",
  "number": 4096,
  "state": "open",
  "title": "Have a light weight PowerShell client that can be used to manage remote endpoints",
  "updated_at": "2022-07-20T20:37:47Z"
}