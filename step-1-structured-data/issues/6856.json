{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6856",
  "author": "mklement0",
  "body": "<sup>Related: #4135, #4715, #4626, #4137</sup>\r\n\r\n\r\nEspecially with complex commands that have several parameter sets, the parameter-set names are important to quickly understand the context of a given syntax diagram.\r\n\r\nThe help-topic sources seems to already contain the information, but it shows neither with `Get-Help` / `-?` nor online - see https://github.com/PowerShell/PowerShell-Docs/issues/2422\r\n\r\nA simple example:\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nGet-Content -?\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\n...\r\n    \r\nSYNTAX\r\n  Path (Default)\r\n\r\n    Get-Content [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [-Delimiter <String>] [-Force] [-Raw] [-Wait] [-Stream <String>] [-UseTransaction] [-Credential \r\n    <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Include <String[]>] -LiteralPath <String[]> [-ReadCount <Int64>] [-TotalCount <Int64>] [-Tail <Int32>] [<CommonParameters>]\r\n\r\n  LiteralPath\r\n    \r\n    Get-Content [-Path] <String[]> [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [-Delimiter <String>] [-Force] [-Raw] [-Wait] [-Stream <String>] [-UseTransaction] \r\n    [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Include <String[]>] [-ReadCount <Int64>] [-TotalCount <Int64>] [-Tail <Int32>] [<CommonParameters>]\r\n    \r\n...\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\n...\r\n    \r\nSYNTAX\r\n    Get-Content [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [-Delimiter <String>] [-Force] [-Raw] [-Wait] [-Stream <String>] [-UseTransaction] [-Credential \r\n    <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Include <String[]>] -LiteralPath <String[]> [-ReadCount <Int64>] [-TotalCount <Int64>] [-Tail <Int32>] [<CommonParameters>]\r\n    \r\n    Get-Content [-Path] <String[]> [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [-Delimiter <String>] [-Force] [-Raw] [-Wait] [-Stream <String>] [-UseTransaction] \r\n    [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Include <String[]>] [-ReadCount <Int64>] [-TotalCount <Int64>] [-Tail <Int32>] [<CommonParameters>]\r\n    \r\n...\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\nWritten as of:\r\n\r\n```powershell\r\nPowerShell Core v6.0.2\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "FYI: parameter set names are not considered to be user-facing data and there is no expectation that they should be sensible to the end-user. They're only intended to be used by the command developer and changing a parameter set name is not considered to be a breaking change. \r\n\r\nIn practice, they're mostly some amalgam of the distinguishing parameter names, sometimes with \"Set\" on the end so it might be useful information in some (maybe most) cases.  But, as proposed,  it also takes up a lot of space. It might be more effective to show the syntax with the distinguishing parameters first instead of displaying them all alphabetically. ",
      "created_at": "2018-05-11T20:14:04Z",
      "updated_at": "2018-05-11T20:14:04Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@BrucePay: \r\n\r\n> It might be more effective to show the syntax with the distinguishing parameters first instead of displaying them all alphabetically.\r\n\r\nThat would certainly help. Ultimately it is about being able to quickly discern what's unique about a parameter set.\r\n\r\n> changing a parameter set name is not considered to be a breaking change.\r\n\r\nUnderstood, but for the purpose of quickly _informing_ users (as opposed to _programmatic processing_) that in itself is not a problem.\r\n\r\nIf chosen carefully - and I understand that that is not a current requirement - a parameter-set name can potentially communicate more than the just the name of the unique parameter.\r\n\r\n> it also takes up a lot of space.\r\n\r\nTrue, but a condensed display doesn't help if it hinders readability.\r\n\r\nThis is a bit of a tangent, but: \r\n\r\nI find the current syntax diagrams hard to parse visually in general and lacking in important information (see also the linked issues).\r\n\r\nConsider the more \"spacious\" but far more legible representation @rkeithhill mentions in https://github.com/PowerShell/PowerShell/issues/4135#issuecomment-311788186.\r\n\r\n\r\n\r\n",
      "created_at": "2018-05-11T20:29:28Z",
      "updated_at": "2018-05-11T20:32:00Z"
    },
    {
      "author": "fowl2",
      "author_association": "NONE",
      "body": "> FYI: parameter set names are not considered to be user-facing data\r\n\r\nFWIW, they _are_ actually displayed by the ISE - each tab is a parameter set:\r\n\r\n![image](https://user-images.githubusercontent.com/12844147/61267188-3414d380-a7da-11e9-860f-2f6c4387de2c.png)\r\n",
      "created_at": "2019-07-16T05:01:03Z",
      "updated_at": "2019-07-16T05:01:03Z"
    }
  ],
  "created_at": "2018-05-11T14:27:21Z",
  "labels": [
    "WG-Interactive-HelpSystem"
  ],
  "number": 6856,
  "state": "open",
  "title": "Get-Help / -? should show the parameter-set name above each syntax diagram",
  "updated_at": "2019-07-16T05:01:04Z"
}