{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6702",
  "author": "markekraus",
  "body": "I have often run into the need to capture output from `Write-Verbose` and `Write-Debug`. I know that it can currently be done by using subexpressions and output redirection. Those methods are not quite as user friendly as `-OutVariable`, `-InformationVariable`, `-ErrorVaraiable`, and `-WarningVariable`. I'm sure there was a good reason for not including `-DebugVariable` and `-VerboseVariable`, but I'm curious if these could be added.",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@markekraus IIRC I don't think we saw a need to capture this stuff since it's transient execution information (which you can record with transcript). I'm curious - what are the cases where you find you need it? (I'm not objecting to adding these parameters - it shouldn't be hard, I'm just curious)",
      "created_at": "2018-04-23T15:16:06Z",
      "updated_at": "2018-04-23T15:16:06Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@BrucePay Honestly, it's more often `Write-Verbose` and I've never really needed this for `Write-Debug`. But much of it is about UX testing (i.e. making sure `-Verbose` on certain commands actually return something). The other use case is just general \"capture all the outputs\" for selective verbose logging (where you want all the output streams captured for some commands but not all). \r\n\r\nThere have even been times in the Web Cmdlets tests where we are using the Verbose stream to ensure certain code paths are being hit when it is not obvious or possible to derive from command output or behavior. For example, this test function:\r\nhttps://github.com/PowerShell/PowerShell/blob/2da75767365c7136877b53339aec7b372acf16d6/test/powershell/Modules/Microsoft.PowerShell.Utility/WebCmdlets.Tests.ps1#L266\r\n",
      "created_at": "2018-04-23T15:32:20Z",
      "updated_at": "2018-04-23T16:35:42Z"
    },
    {
      "author": "bstrautin",
      "author_association": "NONE",
      "body": "Apparently at least one person has a real-world use for this: [Reddit thread](https://www.reddit.com/r/PowerShell/comments/9610yo/capture_verbose_output_of_copyitem/)",
      "created_at": "2018-08-10T16:31:13Z",
      "updated_at": "2018-08-10T16:31:13Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT can this enhancement be added to PS 7?",
      "created_at": "2019-05-31T18:16:36Z",
      "updated_at": "2019-05-31T18:16:36Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@tnieto88 this is currently not a priority for PS7.  We would welcome a PR from the community however :)",
      "created_at": "2019-07-25T17:52:57Z",
      "updated_at": "2019-07-25T17:52:57Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "This is related to the need for `-VerboseAction` and `-DebugAction` as well, as mentioned in [this set of RFCs](https://github.com/PowerShell/PowerShell-RFC/pull/187#pullrequestreview-247359715). Can I add the lot of them?",
      "created_at": "2019-07-25T20:55:44Z",
      "updated_at": "2019-07-25T22:25:16Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "\ud83d\udc40 _do iiiit_",
      "created_at": "2019-07-25T20:57:27Z",
      "updated_at": "2019-07-25T20:57:27Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32 I'm about half way there. Working out kinks from the first pass through the code. That plus Pester tests on deck for tomorrow morning.",
      "created_at": "2019-07-26T01:13:01Z",
      "updated_at": "2019-07-26T01:13:01Z"
    },
    {
      "author": "jantari",
      "author_association": "NONE",
      "body": "Is this still happening anytime?\r\n\r\nI want to be able to run a command that produces quite a bit of verbose and/or debug output and capture BOTH those streams to a file for later reference. I do not want these streams in the main output (transcript) of the command because they are lengthy and really spam the otherwise concise transcript with tons of information that is only needed very very rarely.\r\n\r\nI basically want to be able to do:\r\n\r\n```powershell\r\n# This errors because details.log is locked / already in use\r\nInvoke-ExampleCmdlet -Parameter \"value\" -Verbose -Debug 4>details.log 5>details.log\r\n```\r\n\r\nor\r\n\r\n```powershell\r\n# This fails for absolutely no reason really, I guess redirecting streams to anything other\r\n# than 1, 2 or null was just never implemented because ..... ????\r\nInvoke-ExampleCmdlet -Parameter \"value\" -Verbose -Debug 5>&4 4>details.log\r\n```\r\n\r\nor at least:\r\n\r\n```powershell\r\nInvoke-ExampleCmdlet -Parameter \"value\" -Verbose -Debug -VerboseVariable details_verbose -DebugVariable details_debug\r\n```\r\n\r\nalthough that last option would of course result in separately captured streams so the order of the output cannot be reconstructed. But at least it's _something_.",
      "created_at": "2022-02-03T11:30:21Z",
      "updated_at": "2022-02-03T11:32:53Z"
    }
  ],
  "created_at": "2018-04-23T10:06:18Z",
  "number": 6702,
  "state": "open",
  "title": "Feature request: Add -VerboseVariable and -DebugVariable common paramaters",
  "updated_at": "2022-02-03T11:32:53Z"
}