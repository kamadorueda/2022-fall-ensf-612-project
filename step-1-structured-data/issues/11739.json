{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11739",
  "author": "jhoneill",
  "body": "I lost most of yesterday to not being able to see a - sign in VS code because colour choices I'll be dealing with over there.  I had managed to enter, but could not see something like this\r\n\r\n\r\n```\r\nfunction foo  {\r\n [cmdletbinding()]\r\n  param ($a , $b) \r\n  \"a is '$a' and b is '$b;' \" \r\n}\r\n\r\n$h = @{\r\n   a = 1\r\n   b = 2\r\n} \r\n\r\nfoo -@h\r\n```\r\n\r\nSo I am trying to splat the hash H into foo, but I have a stray - sign before the @ And I get the output  \r\n`a is '-@h' and b is '' `\r\n\r\n With the ISE theme in VS code by default it looks like this \r\n![image](https://user-images.githubusercontent.com/16209593/73527107-64d0f900-440a-11ea-9106-3fca15a487c1.png)\r\nwhich camouflagesit quite well. So after leaving work 2 hours late I started thinking \r\n\r\n**Why** is` -@h` not considered to be a parameter  ? If I typed -atH \r\n I would have got \r\n`Invoke-RestMethod : A parameter cannot be found that matches parameter name 'atH'.`\r\nand I would have found the bug in two seconds not two hours. \r\n\r\nIn a previous item @SeeminglyScience  (IIRC - I can find it now) explained that `--`  has a special undocumented suppression function. And I'm trying to work out if there is a case where `-@x `should be a parameter's value without needing quotes but for `-xx ` to be the _value_ rather than the _name_  it needs quotes.  Having been caught by this **of course I think** this should cause an error, but maybe someone can point the case where it is legitimate, anyone ? anyone ? Bueler ? Anyone ?   \r\n\r\n\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Without having looked at the source code, it seems that **only if `-` is followed by an (English) letter or `_` (notably, not a _digit_) is it interpreted as a parameter name**.\r\n\r\nThe following calls succeed, because the `-<char>` sequences are _not_ treated as parameter names (and therefore _positionally_ bind to `-bar`):\r\n\r\n```powershell\r\nfunction foo { [CmdletBinding()]param($bar) \"[$bar]\" }\r\n[char[]] '~`!@#$%^*+0<>./\\[]' | % { iex \"foo -$_\" }\r\n```\r\n\r\nNote that while `` ` `` works in principle, it retains its escaping function, so something like ``-`a`` rings the bell, and `` -`n `` passes `-<newline>`.\r\n\r\n[_Update_, based on your comment] Similarly, `$` is used as-is  by itself (`-$`) or if followed by a character not valid in a variable name (`-$@`); `$(...)` (`-$('hi')`) and `$<identifier>` (`-$HOME`) are treated as subexpressions / variable references, possibly followed by other literal chars / `$` constructs.\r\n\r\n(Perhaps surprisingly, given that `@` and `$` work), `{` / `}` and `(` / `)` don't work.\r\n\r\nNeither do the quoting chars., `\"` and `'`.\r\n\r\nAs you state, `-` doesn't work (`--` makes the binder treat all remaining tokens as _positional_ arguments, so that\r\n`foo -- -unknownswitch` works, for instance).\r\n\r\nNon-prefix metacharacters `,`, `;`, `|`, and `&` still have their usual meaning and also cannot be used.\r\n\r\n`-?` is intercepted and always shows help.\r\n\r\n---\r\n\r\nAs an aside: Using `-%`, to form `--%`, the stop parsing symbol, is recognized as such even with additional characters immediately following it, because its special treatment of the remaining command line kicks in _instantly_.\r\n\r\nCuriously, it breaks the invocation altogether, because no arguments are then recognized anymore (granted, `--%` is for _external programs_, but the behavior is still curious):\r\n\r\n```powershell\r\n# Without --%, these would succeed.\r\nfoo --% a # fails\r\nfoo --% -bar baz # fails\r\n```\r\n\r\nAnother `--%` problem: #11608\r\n\r\n",
      "created_at": "2020-01-31T13:10:24Z",
      "updated_at": "2020-08-10T13:17:51Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "<tips hat>  at the response. \r\n\r\n> (Perhaps surprisingly, given that `@` and `$` work), `{` / `}` and `(` / `)` don't work.\r\n> \r\n> Neither do the quoting chars., `\"` and `'`.\r\nif $x is 1 , foo -$  assumes -$ is a value but -$x is -($x) and -1 is passed  \r\n\r\nI'm not sure if the behavior is by design or by accident. If it is right, and even if it is wrong if people depend on it . It certainly feels wrong to me but I'm not sure I should be judging. \r\n\r\n`->x.txt `\r\nis another odd one. Is it ever _meant_ or only ever a typo for >x.txt \r\n\r\n\r\n",
      "created_at": "2020-01-31T15:39:13Z",
      "updated_at": "2020-01-31T15:39:13Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> I'm not sure if the behavior is by design or by accident. \r\n\r\nI hope someone else can speak to that; my intent was simply to document the current behavior, which definitely has quirks and is hard to predict.\r\n\r\nThere are several other problems related to parameter parsing:\r\n\r\n* #6291 \r\n* #6292\r\n* #6360\r\n* #11608 (mentioned above)\r\n* #11646\r\n\r\n",
      "created_at": "2020-01-31T15:51:12Z",
      "updated_at": "2020-01-31T15:51:33Z"
    }
  ],
  "created_at": "2020-01-31T09:29:38Z",
  "number": 11739,
  "state": "open",
  "title": "-@ untrapped error, or design choice ? ",
  "updated_at": "2020-08-10T13:17:51Z"
}