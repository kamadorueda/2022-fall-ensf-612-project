{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15787",
  "author": "xtqqczze",
  "body": "Fix #15740.\r\n\r\ncc: @iSazonov\r\n",
  "closed_at": "2021-07-20T20:26:29Z",
  "comments": [
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "@daxian-dbw I looked at the implementation again, and removed the unnecessary `_disposed` bool, as:\r\n\r\n* it is safe to call `CancellationTokenSource.Dispose` multiple times \r\n* we don't check that `_disposed == false` at the beginning of each method (we let `CancellationTokenSource` throw the `ObjectDisposedException` instead)\r\n\r\nFeel free to revert to reset to 29cdfb4 if you disagree.",
      "created_at": "2021-07-18T09:49:39Z",
      "updated_at": "2021-07-18T09:49:39Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@xtqqczze In that case, you don't really need to follow the exact `IDisposible` pattern to have the `protected virtual void Dispose(bool disposing)` method. This method makes sense only if the type may have derived sub types. You can put `CancellationTokenSource.Dispose` directly in `public void Dispose()` and remove `GC.SuppressFinalize(this)` (calling this method is in case of a sub-type has a finalizer defined. This type doesn't have a finalizer and thus won't be put on the finalizer queue)",
      "created_at": "2021-07-18T15:52:31Z",
      "updated_at": "2021-07-18T15:52:31Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "> @xtqqczze In that case, you don't really need to follow the exact `IDisposible` pattern to have the `protected virtual void Dispose(bool disposing)` method. This method makes sense only if the type may have derived sub types. You can put `CancellationTokenSource.Dispose` directly in `public void Dispose()` and remove `GC.SuppressFinalize(this)` (calling this method is in case of a sub-type has a finalizer defined. This type doesn't have a finalizer and thus won't be put on the finalizer queue)\r\n\r\n@daxian-dbw I already considered those changes, but they are only possible if the class is sealed. Since `ConvertToJsonCommand` is currently unsealed and a public API I thought it best not to do that.",
      "created_at": "2021-07-18T16:10:27Z",
      "updated_at": "2021-07-18T16:10:27Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "The sealed class issue reminds me of comments in https://github.com/PowerShell/PowerShell/pull/11820#pullrequestreview-445815117.",
      "created_at": "2021-07-18T16:18:15Z",
      "updated_at": "2021-07-18T16:18:15Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.2.0-preview.8` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0-preview.8)\n",
      "created_at": "2021-07-22T21:41:13Z",
      "updated_at": "2021-07-22T21:41:13Z"
    }
  ],
  "created_at": "2021-07-16T14:08:32Z",
  "number": 15787,
  "state": "closed",
  "title": "Implement `IDisposable` for `ConvertToJsonCommand`",
  "updated_at": "2021-07-22T21:41:13Z"
}