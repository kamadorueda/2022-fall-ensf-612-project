{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16772",
  "author": "hdformat",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nI was expected the same results from both a/b commands\r\na.\r\n```\r\nget-process | select-string -pattern edge\" and \r\n```\r\nb.\r\n```\r\n\"get-process | select-string\r\n\r\ncmdlet Select-String at command pipeline position 2\r\nSupply values for the following parameters:\r\nPattern[0]: edge\r\n```\r\nbut they show differrent results. \n\n### Expected behavior\n\n```console\nPS> get-process | select-string -pattern edge\r\n\r\nSystem.Diagnostics.Process (msedge)\r\nSystem.Diagnostics.Process (msedge)\r\nSystem.Diagnostics.Process (msedge)\r\n\r\nPS> get-process | select-string\r\n\r\ncmdlet Select-String at command pipeline position 2\r\nSupply values for the following parameters:\r\nPattern[0]: edge\r\nPattern[1]:\r\n\r\nSystem.Diagnostics.Process (msedge)\r\nSystem.Diagnostics.Process (msedge)\r\nSystem.Diagnostics.Process (msedge)\n```\n\n\n### Actual behavior\n\n```console\nPS> get-process | select-string -pattern edge\r\n\r\nSystem.Diagnostics.Process (msedge)\r\nSystem.Diagnostics.Process (msedge)\r\nSystem.Diagnostics.Process (msedge)\r\n\r\nPS> get-process | select-string\r\n\r\ncmdlet Select-String at command pipeline position 2\r\nSupply values for the following parameters:\r\nPattern[0]: edge\r\nPattern[1]:\r\n\r\nSelect-String: Cannot bind argument to parameter 'Path' because it is null. This failure might be caused by applying the default parameter binding. You can disable the default parameter binding in $PSDefaultParameterValues by setting $PSDefaultParameterValues[\"Disabled\"] to be $true, and retry. The following default parameter was successfully bound for this cmdlet when the error occurred: -Encoding\r\nSelect-String: Cannot bind argument to parameter 'Path' because it is null. This failure might be caused by applying the default parameter binding. You can disable the default parameter binding in\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nPS > $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.1\r\nPSEdition                      Core\r\nGitCommitId                    7.2.1\r\nOS                             Microsoft Windows 10.0.22000\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           \u00a81.0, 2.0, 3.0, 4.0\u2026\u00bc\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n![image](https://user-images.githubusercontent.com/869339/150052680-534d76a5-e119-4098-b725-dbf2f10a1126.png)\r\n",
  "closed_at": "2022-01-19T15:00:10Z",
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "It's not specific to `select-string`\r\n\r\nAIUI what happens is when a command has multiple parameter-sets (`Select-String` has 6) and the parameters given aren't sufficient to select one,  PowerShell will try to use the default set - which is the \"File\" parameter set for `Select-String`.  It will prompt for any missing parameters in that set (in this case the `file` set is missing the `pattern` parameter) and tries to continue. \r\n\r\nIn the case of `select string`,  the default set has a `path` parameter which looks to get a `path` property from the whatever is piped and things go south from there... \r\n\r\nThe following works  because the objects arriving at `Select-String` have a path property: \r\n![image](https://user-images.githubusercontent.com/16209593/150118924-056fc77d-238f-48a8-ad7c-f7a064a74977.png)\r\n\r\nHowever; using `dir *.ps1 |  select-string` , will produce an error for each file, because File objects don't have a `path` property - they have `name`, `parent`, and `fullname` and the author of `Select-String` didn't allow for this case by giving the path parameter an alias of \"FullName\" \r\n\r\nIf you **do** specify a parameter, then when something is piped in `Select-String` selects the `Object` parameter set because that will take whatever is piped in. If the object is a file, `Select-String` reads the file, if it is anything else it converts the object to a string  so    \r\n` dir *.ps1 | Resolve-Path | select-string profile` \r\nwill return  \r\n`Microsoft.PowerShell.Core\\FileSystem::C:\\Users\\ ... \\profile.ps1`.\r\nI.e. it no longer uses the path property to get the file. \r\n\r\nFor `Select-String` the parameter sets can **probably** be altered so that \r\n1.  `Select-string \"foo\" *.ps1`   which needs the File parameter set still works but...\r\n2.  The Object parameter set is the default.\r\n\r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n \r\n\r\n ",
      "created_at": "2022-01-19T11:45:22Z",
      "updated_at": "2022-01-19T11:45:22Z"
    },
    {
      "author": "hdformat",
      "author_association": "NONE",
      "body": "@jhoneill  Thank you very much for a kind explaination. \ud83d\udc4d ",
      "created_at": "2022-01-19T15:00:02Z",
      "updated_at": "2022-01-19T15:00:02Z"
    }
  ],
  "created_at": "2022-01-19T02:33:00Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered",
    "WG-Cmdlets-Utility"
  ],
  "number": 16772,
  "state": "closed",
  "title": "select-string does unexpected behavior when supplying a parameter via interactive",
  "updated_at": "2022-01-19T17:29:03Z"
}