{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7560",
  "author": "DarwinJS",
  "body": "Thinking of stuff that is obviously missing from Linux, but also stuff that should be in Windows or needs serious fixing.\r\n\r\nThis is cmdlets you would want around for barebones bootstrap automation of Windows or Linux.\r\n\r\n- Stop-Computer, Restart-Computer (missing on Linux)\r\n- Scheduler / Cron (Missing on Linux, WAAAY TOOO COMPLEX on Windows)\r\n- Path Management soapbox: *) It's 2018, *) PATH variables are still critical, *) they are easy to screw up on removes, *) easy to overflow on Windows in large environments, *) two source contexts (user, computer) and a final rendered context on windows (process) - it is definitely a task for the uber admin tool PowerShell - but we have nothing endsoapbox.  I have template code for Windows for this one.\r\n- reliable editing of INIs and CONFs - INIs have been summarily ignored since Windows 95 came out.  But now I am dealing with more and more Linux ports to Windows that either use INIs or CONFs.  Since CONFs are harder - might as well handle INIs at the same time.  **The fact that CONFs are so unstructured is going to be a source of security holes (turning up on audits too) for OpenSSH on Windows.**\r\n- cross platform, simple permissions CMDLets - at least supporting linux chmod level of functionalty for both.  And Convert-CHMODToPermissions to easy transitions.  Set-Permissions -Permissions (Convert-ChmodToPermissions '755') -TargetObject '$env:userprofile\\.ssh'\r\n\r\nThe amount of times I have to re-use and bug fix painstakingly maintained personal code libraries for the above is dumbfounding.  (which also means I have empathy for how hard some of these problems are) \r\n\r\nI would easily call this \"fundamental, multi-generational tech debt\" - things that should have been there on day one - that aren't there are on year 20 (for both windows and linux)\r\n\r\nFYI - I would be fine with two levels of CMDLets for some of this.  For example \"Set-Permissions\" = multiplatform, common, most frequently used file permissions setting.  All parameters applicable to both platforms.  \"Set-AdvancedPermissions\" - platform specific functionality.  Maybe advanced splits out to \"Set-AdvancedWinPermissions\" and \"Set-AdvancedLinPermissions\" - or maybe it is a new breed of CMDLet whose parameters are known and expect to vary widely by platform (NOT parameter sets)?  Set-AdvancedPermissions would not need to be in a minimal install and may be best community managed and as script CMDLets.  But this could be a useful categorization to get to a set of core common cmdlets - possibly part of powershell and then a relief valve for those wanting the advanced, platform specific features. Or maybe \"Set-Platform*\" nomenclature such as \"Set-PlatformPermissions\"\r\n\r\n/cc @SteveL-MSFT @joeyaiello @BrucePay \r\n",
  "closed_at": "2018-08-17T16:49:35Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@DarwinJS I had created https://github.com/PowerShell/PowerShell/issues/7542 for this discussion",
      "created_at": "2018-08-17T16:17:41Z",
      "updated_at": "2018-08-17T16:17:41Z"
    }
  ],
  "created_at": "2018-08-17T11:33:14Z",
  "labels": [],
  "number": 7560,
  "state": "closed",
  "title": "Missing CMDLets That Should Be Multiplatform And on the Most Minimally Installable PSH 6 Installation",
  "updated_at": "2018-08-17T16:49:35Z"
}