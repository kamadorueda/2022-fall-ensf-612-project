{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7387",
  "author": "mklement0",
  "body": "<sup>Updated to extend the resolution functionality to executable symlinks.</sup>\r\n\r\nIt would be convenient  to allow passing `-Resolve`  to `Get-Command` so as to immediately display information about the command underlying an alias, if applicable.\r\n\r\nIn other words: given an alias name, `-Resolve` would act like `(Get-Command someAlias).ResolvedCommand`.\r\n\r\nThis is more useful than the default behavior, where the output for an alias name only indicates the _name_ of the underlying command.\r\n\r\nSimilarly, if a command refers to an executable that is a _symlink_ (common on Unix-like platforms, `-Resolve` could resolve that symlink to its (ultimate) target path and emit information about that, as it sometimes of interest where an executable truly resides.\r\n\r\nFor all other command forms the switch should have no effect.\r\n\r\nDesired behavior\r\n------------------\r\n\r\nFor an **alias**:\r\n\r\n```powershell\r\nPS> Get-Command gci -Resolve  # wishful thinking; equivalent of (Get-Command gci).ResolvedCommand\r\n\r\nCommandType     Name                                               Version    Source\r\n-----------     ----                                               -------    ------\r\nCmdlet          Get-ChildItem                                      6.1.0.0    Microsoft.PowerShell.Management\r\n\r\n\r\n```\r\n\r\nFor an executable that is a **symlink**:\r\n\r\n```powershell\r\n# Wishful thinking: pwsh is symlink /usr/local/bin/pwsh on macOS for instance,\r\n# whose target is something like  /usr/local/microsoft/PowerShell/6.1.0/pwsh.\r\nPS> Get-Command pwsh -Resolve \r\n\r\nCommandType     Name       Version    Source\r\n-----------     ----       -------    ------\r\nApplication     pwsh       0.0.0.0    /usr/local/microsoft/PowerShell/6.1.0/pwsh\r\n```\r\n\r\nAdditionally, it may be of interest to see the _chain_ of resolutions, perhaps via  a separate `-Follow` or `-ResolveChain` switch, which could emit both the immediate target and the (chain of) ultimate target(s), as a sequence of objects.\r\n\r\nFor instance, with `gci` you'd get both the alias info and the underlying cmdlet info, and with `pwsh` you'd get the original symlink info as well as info for their target(s).\r\n\r\nEnvironment data\r\n----------------\r\n\r\nWritten as of:\r\n\r\n```powershell\r\nPowerShell Core 6.1.0-preview.4\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "kvprasoon",
      "author_association": "CONTRIBUTOR",
      "body": "Great idea !!!",
      "created_at": "2018-07-29T06:39:26Z",
      "updated_at": "2018-07-29T06:39:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think it could be `-ResolveAlias`.",
      "created_at": "2018-07-30T05:13:10Z",
      "updated_at": "2018-07-30T05:13:10Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: \r\n\r\nI was thinking `-Resolve` for consistency with other cmdlets (currently only `Join-Path` and `Split-Path`), but I guess we can do both - make one an alias of the other.\r\n\r\n(Even though elastic syntax would allow using `-Resolve` in lieu of `-ResolveAlias` anyway, it's better to \"make it official\".)",
      "created_at": "2018-07-30T11:08:16Z",
      "updated_at": "2018-07-30T11:09:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I suggest `-ResovleAlias` because it is self-documented and it is not clear that `-Resolve` should resolve - full module name, full source path and so on.",
      "created_at": "2018-07-30T13:33:22Z",
      "updated_at": "2018-07-30T13:33:22Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov:\r\n\r\nMaybe we can turn that into a virtue, given that there's at least one other way to resolve a command name:\r\n\r\nFor external programs that happen to be _symlinks_, make `-Resolve` show the _ultimate target file path_ (at least currently, such a feature is of much more interest on Unix-like platforms); e.g.:\r\n\r\n```powershell\r\n# Currently, you get just the symlink's path\r\nPS> Get-Command pwsh\r\n\r\nCommandType     Name       Version    Source\r\n-----------     ----       -------    ------\r\nApplication     pwsh       0.0.0.0    /usr/local/bin/pwsh\r\n\r\n\r\n# Wishful thinking: -Resolve shows the symlink's (ultimate) *target* path\r\nPS> Get-Command pwsh -Resolve\r\n\r\nCommandType     Name       Version    Source\r\n-----------     ----       -------    ------\r\nApplication     pwsh       0.0.0.0    /usr/local/microsoft/PowerShell/6.1.0/pwsh\r\n\r\n```\r\n\r\nOn a side note, complementing `-Resolve` with something like `-Follow` or `-ResolveChain`  may make sense, which could emit both the immediate target and the (chain of) ultimate target(s), as a _sequence_ of objects.\r\n\r\nFor instance, with `gci` you'd get both the alias info and the underlying cmdlet info, and with `pwsh` you'd get the original symlink info as well as info for their target(s).",
      "created_at": "2018-07-30T14:02:57Z",
      "updated_at": "2018-07-30T14:02:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "This seems too unobvious/tricky :smile:. I would prefer something simpler that matches user's expectations. In any case, do not go too far - this is not so often necessary and we ca always do `Format-List` to get more info.",
      "created_at": "2018-07-30T14:57:48Z",
      "updated_at": "2018-07-30T14:57:48Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov : Too late - I've fallen in love with the idea \ud83d\ude1c. \r\n\r\nI can tell you that inspecting the true filesystem locations of symlinked executables is something I deal with frequently (on Unix-like platforms).\r\n\r\n`Format-List` would only help if you crammed more information into the one and only output object currently emitted, which strikes me as a bad idea.\r\nThis issue is about resolving to the command that is effectively used / to see the chain of commands (symlinks) that lead to it.\r\n\r\nI've updated the original post with my suggestions; let's see what others think.",
      "created_at": "2018-07-30T16:15:38Z",
      "updated_at": "2018-07-30T16:15:38Z"
    }
  ],
  "created_at": "2018-07-27T16:42:49Z",
  "number": 7387,
  "state": "open",
  "title": "Extend Get-Command to support a -Resolve switch for resolving to an alias' underlying command or an executable symlink's true filesystem location",
  "updated_at": "2018-07-30T16:15:38Z"
}