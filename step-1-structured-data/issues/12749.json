{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12749",
  "author": "schuelermine",
  "body": "Add a parameter like `-InterpretPipeLiterally` such that\r\n\r\n```\r\n$Values | Convert-Path -InterpretPipeLiterally\r\n```\r\n\r\nis equivalent to\r\n\r\n```\r\n$Values | ForEach-Object {Convert-Path -LiteralPath $_}",
  "closed_at": "2020-05-21T22:29:00Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "You can do this with scriptblock binding syntax \ud83d\ude42 \r\n\r\n```ps1\r\n$Values | Convert-Path -LiteralPath { $_ }\r\n```",
      "created_at": "2020-05-21T19:35:15Z",
      "updated_at": "2020-05-21T19:35:35Z"
    },
    {
      "author": "schuelermine",
      "author_association": "CONTRIBUTOR",
      "body": "Oooh, wow, didn't know that! Thanks",
      "created_at": "2020-05-21T22:28:51Z",
      "updated_at": "2020-05-21T22:28:51Z"
    },
    {
      "author": "schuelermine",
      "author_association": "CONTRIBUTOR",
      "body": "Wait. Where is the documentation for this? I can't seem to get it to work.\r\n\r\n@vexx32 ",
      "created_at": "2020-05-21T22:57:20Z",
      "updated_at": "2020-05-21T22:57:20Z"
    },
    {
      "author": "schuelermine",
      "author_association": "CONTRIBUTOR",
      "body": "Searching \"scriptblock binding syntax\" only leads to scriptblock documentation",
      "created_at": "2020-05-21T22:58:11Z",
      "updated_at": "2020-05-21T22:58:11Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Documentation is here: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_script_blocks?view=powershell-7#using-delay-bind-script-blocks-with-parameters\r\n\r\nYeah, it's a bit confusing that it's buried in the scriptblock article, but there's not really a much better place to put it, it's a general purpose syntax available to all commands. \r\n\r\nIf you can share the code you're running into issues with, I can try to point out what's going wrong. The important limitations with the scriptblock binding for parameters are:\r\n\r\n1. It can't be used with `[scriptblock]`-type parameters\r\n2. The parameter must be defined as accepting pipeline input either by value or by property name. You can check the `Get-Help <command> -Parameter <parameter>` results to see if a given parameter supports pipeline input.\r\n\r\n<blockquote><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_script_blocks\">about_Script_Blocks - PowerShell</a></strong></div></blockquote>",
      "created_at": "2020-05-21T23:00:09Z",
      "updated_at": "2020-05-21T23:00:50Z"
    },
    {
      "author": "schuelermine",
      "author_association": "CONTRIBUTOR",
      "body": "Assuming I have a parameter that accepts any `Object`, if I want to pass a `ScriptBlock`, I can just write `({\u2026})`, right?",
      "created_at": "2020-05-21T23:05:46Z",
      "updated_at": "2020-05-21T23:05:46Z"
    },
    {
      "author": "schuelermine",
      "author_association": "CONTRIBUTOR",
      "body": "The issue I ran into is that this apparently requires specifying an explicit parameter. I was doing `Get-PSDrive | Set-Location {\"${_}:\"}` as an experiment. `Get-PSDrive | Set-Location -Path {\"${_}:\"}` worked.",
      "created_at": "2020-05-21T23:07:36Z",
      "updated_at": "2020-05-21T23:07:36Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Ah yeah, it has to be a specific named parameter. I don't know the full implementation details but yeah, that's a hard requirement.\r\n\r\nAlso, `[object]` params will just accept a scriptblock as-is. They never invoke pipeline binding.",
      "created_at": "2020-05-22T03:24:03Z",
      "updated_at": "2020-05-22T03:24:48Z"
    },
    {
      "author": "thlac",
      "author_association": "CONTRIBUTOR",
      "body": "Probably not for your specific use case, but you can also construct the objects with property names, for example:\r\n`[pscustomobject]@{ LiteralPath= \"c:\\\"} | Convert-Path`\r\n\r\nDoes require the cmdlet supports ValueFromPipelineByPropertyName, but they typically do when they have distinct inputs with the same underlying type",
      "created_at": "2020-05-22T05:29:09Z",
      "updated_at": "2020-05-22T05:29:36Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yep! Very often (if not always) `-LiteralPath` parameters also support a `PSPath` alias both directly and on the property, because providers' objects in PS have a PSPath property that they'll use when piped into a provider cmdlet. \ud83d\ude42 ",
      "created_at": "2020-05-22T05:31:35Z",
      "updated_at": "2020-05-22T05:31:35Z"
    }
  ],
  "created_at": "2020-05-21T18:53:17Z",
  "labels": [
    "Issue-Enhancement",
    "Resolution-Answered"
  ],
  "number": 12749,
  "state": "closed",
  "title": "Feature Request: Allow Convert-Path to accept literal paths as pipeline inputs",
  "updated_at": "2020-05-22T05:31:35Z"
}