{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17668",
  "author": "mklement0",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nInvoking a method name without parentheses (without actually _calling_ the method) is a convenient reflection feature in PowerShell; e.g. `(42).ToString` lists all overloads of the `[int]` type's `.ToString()` method.\r\n\r\nHowever, this doesn't work with the new-in-7.3 syntax (see [about_Calling_Generic_Methods](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_Calling_Generic_Methods)) for calling generic methods with explicit type arguments (e.g., `[Array]::Empty[int]()` to create an empty `[int[]]` array):\r\n\r\n```powershell\r\n[Array]::Empty         # OK without type argument\r\n[Array]::Empty[int]    # !! BROKEN: treats [int] as an *index* expression\r\n```\r\n\r\n\r\n\r\n### Expected behavior\r\n\r\n```console\r\nOverloadDefinitions\r\n-------------------\r\nstatic T[] Empty[T]()\r\n\r\nstatic int[] Empty[int]()\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nParserError: ...\r\nLine |\r\n  51 |  [Array]::Empty[int]\r\n     |                 ~\r\n     | Array index expression is missing or not valid.\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nPowerShell Core 7.3.0-preview.5\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "My memory's a little hazy here (@daxian-dbw may recall better than I) but I think this was a necessary concession to ensure that index operations on static members would continue to work? \ud83e\udd14 ",
      "created_at": "2022-07-12T16:27:19Z",
      "updated_at": "2022-07-12T16:27:19Z"
    },
    {
      "author": "kborowinski",
      "author_association": "NONE",
      "body": "I think it's related to the [following issue](https://github.com/PowerShell/PowerShell/issues/16870#issuecomment-1054848038).",
      "created_at": "2022-07-22T16:44:38Z",
      "updated_at": "2022-07-22T16:44:38Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The reported issue is the by-design behavior. Please see the issue pointed to by @kborowinski and the PR description of the fix: https://github.com/PowerShell/PowerShell/pull/16937.",
      "created_at": "2022-07-25T22:12:51Z",
      "updated_at": "2022-07-25T22:12:51Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @daxian-dbw:\r\n\r\n* If this assessment stands, please ensure that this limitation is documented in the new conceptual [about_Calling_Generic_Methods](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_Calling_Generic_Methods) help topic\r\n\r\n* However, I don't see a connection between this issue and the ones you and @kborowinski point to, given that they seem to relate to using _nested_ type literals or _expressions_ inside what could be interpreted as the type arguments of generic method calls - can you explain?\r\n\r\n",
      "created_at": "2022-07-25T22:58:19Z",
      "updated_at": "2022-07-25T22:58:19Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "See the `And allowing to declare generic arguments for property causes unexpected behaviors:` part in https://github.com/PowerShell/PowerShell/issues/16870#issuecomment-1054848038, and also the `Besides, there is no point to allow declaring generic arguments for a property.` part in https://github.com/PowerShell/PowerShell/pull/16937.\r\n\r\nNow that I read them again, I'd say that's why the parsing of `[Array]::Empty[int]` or `\"string\".Length[nonexis]` was removed, but not why `[Array]::Empty[int]` cannot be made work -- return the generic parameter resolved method signature. Of course, a lot more validations will be needed to make sure it works only for method group that support generic parameter types.",
      "created_at": "2022-07-25T23:22:28Z",
      "updated_at": "2022-07-25T23:22:28Z"
    }
  ],
  "created_at": "2022-07-12T13:21:57Z",
  "labels": [
    "Needs-Triage"
  ],
  "number": 17668,
  "state": "open",
  "title": "New syntax for invoking generic methods doesn't support overload reporting when invoked without parentheses",
  "updated_at": "2022-07-25T23:22:29Z"
}