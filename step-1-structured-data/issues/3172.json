{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3172",
  "author": "Jaykul",
  "body": "Among the many new types in .NET added to work around problems in the legacy types there is a new `System.DateTimeOffset`, which is just a `System.DateTime` plus an `Offset` (i.e. the original timezone) -- I won't explain why this is useful, but [MSDN does](https://msdn.microsoft.com/en-us/library/system.datetimeoffset#Remarks).\r\n\r\nThis class should _just work_ in PowerShell, just like the original DateTime.\r\n\r\nCurrently it doesn't, because when you pass it over a remote connection it comes out as `Deserialized.DateTimeOffset` and the scripter is forced to manually re-create a DateTimeOffset object.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n#### This works great:\r\n\r\n```posh\r\nInvoke-Command { \r\n    param([DateTimeOffset]$Time) \r\n    $Time.UtcDateTime, $Time.LocalDateTime, $Time.DateTime\r\n} -Args ([DateTimeOffset]::Now)\r\n```\r\n#### But the same command, with a `-ComputerName`, fails, because of remote deserializing...\r\n\r\n```posh\r\nInvoke-Command -ComputerName localhost { \r\n    param([DateTimeOffset]$Time) \r\n    $Time.UtcDateTime, $Time.LocalDateTime, $Time.DateTime\r\n} -Args ([DateTimeOffset]::Now)\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nPassing `DateTimeOffset` should _just work_ even over remote connections.\r\n\r\nActual behavior\r\n---------------\r\n\r\nCannot pass `System.DateTimeOffset` to remote instances. Must re-construct it from `Deserialized.System.DateTimeOffset`\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "[Serialization of primitive types ](https://github.com/PowerShell/PowerShell/blob/02b5f357a20e6dee9f8e60e3adb9025be3c94490/src/System.Management.Automation/engine/serialization.cs#L2438)is based on XmlConvert class but CoreCLR is still not support [ToDateTimeOffset](https://msdn.microsoft.com/en-us/library/bb558804(v=vs.110).aspx)\r\n\r\nIf the Issue will be approved, then we should come back to it after we move on .Net Standart 2.0.",
      "created_at": "2017-02-22T14:05:41Z",
      "updated_at": "2017-02-22T14:05:41Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "What do you mean @iSazonov, it looks like it's **already there**, even in the version you shipped in 6.0.0.10?\r\n\r\nhttps://github.com/dotnet/corefx/blob/f0ccd9742065ee2aa296448fe3dd38ef6ff77af9/src/System.Private.Xml/src/System/Xml/XmlConvert.cs#L863\r\n\r\n\r\n```\r\nPS>[XmlConvert] | gm -sta | where Name -match DateTime\r\n\r\n   TypeName: System.Xml.XmlConvert\r\n\r\nName             MemberType Definition\r\n----             ---------- ----------\r\nToDateTime       Method     static datetime ToDateTime(string s, System.Xml.XmlDateTimeSerializationMode dateTimeOption)\r\nToDateTimeOffset Method     static System.DateTimeOffset ToDateTimeOffset(string s), static System.DateTimeOffset ToDateTimeOffset(string s, string format), static System.DateTi...\r\n\r\nPS>[XmlConvert].Assembly\r\n\r\nGAC    Version        Location\r\n---    -------        --------\r\n       v4.0.30319     C:\\Program Files\\PowerShell\\6.0.0.10\\System.Xml.ReaderWriter.dll\r\n\r\nPS>[XmlConvert]::ToString([DateTimeOffset]::Now)\r\n2017-02-26T23:58:52.0082884-05:00\r\n\r\nPS>[XmlConvert]::ToDateTimeOffset( [XmlConvert]::ToString([DateTimeOffset]::Now) )\r\n\r\nDateTime      : 2/26/2017 11:59:36 PM\r\nUtcDateTime   : 2/27/2017 4:59:36 AM\r\nLocalDateTime : 2/26/2017 11:59:36 PM\r\nDate          : 2/26/2017 12:00:00 AM\r\nDay           : 26\r\nDayOfWeek     : Sunday\r\nDayOfYear     : 57\r\nHour          : 23\r\nMillisecond   : 639\r\nMinute        : 59\r\nMonth         : 2\r\nOffset        : -05:00:00\r\nSecond        : 36\r\nTicks         : 636237503766399149\r\nUtcTicks      : 636237683766399149\r\nTimeOfDay     : 23:59:36.6399149\r\nYear          : 2017\r\n```",
      "created_at": "2017-02-27T05:00:21Z",
      "updated_at": "2017-02-27T05:00:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@Jaykul Good catch! Thanks!\r\n(I figured that we use an older version. Strange that I couldn't make the fix in code. Most likely I should did `dotnet restore`)",
      "created_at": "2017-02-27T05:10:27Z",
      "updated_at": "2017-02-27T05:15:49Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "PowerShell remoting uses it's own serialization mechanism as described in protocol specification MS-PSRP, section 2.2.5. By design, a limited, fixed set of types deserialize with fidelity.  This list is available in MS-PSRP section 2.2.5.1 (see https://msdn.microsoft.com/en-us/library/dd305931.aspx )\r\nAdding support for new primitive types requires changes to both the code/protocol and protocol specifications.  The serialization code is in \r\nsrc\\System.Management.Automation\\engine\\Serialization.cs\r\nsrc\\System.Management.Automation\\engine\\SerializationStrings.cs\r\n(Note: you can use the types files and Update-TypeData to specify custom deserializations in the local runspace but these need to be set up in each session.)\r\nFor PowerShell 6.0, it seems reasonable that we expand the set of types we serialize with fidelity but we should do this deliberately. I suggest opening an RFC for this so we can get a canonical list of the new types we want to handle.\r\n",
      "created_at": "2017-03-03T19:03:05Z",
      "updated_at": "2017-03-03T19:03:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Can we implement a generic algorithm based on a schema to being more flexible?",
      "created_at": "2017-10-08T10:24:24Z",
      "updated_at": "2017-10-08T10:24:57Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "I don't understand why this is taking **years**. How hard is this?\r\n\r\nCan't you just write a converter like this [DateTimeOffsetConverter](https://github.com/Jaykul/Information/blob/experimental/Source/Classes/DateTimeOffsetConverter.cs) and [register it](https://github.com/Jaykul/Information/blob/experimental/Source/Classes/_using.ps1) for DateTimeOffset?",
      "created_at": "2022-02-02T05:02:44Z",
      "updated_at": "2022-02-02T05:02:44Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@WG-Remoting\r\nRemoting working group: Adding new remoting types requires updating the remoting protocol version and associated documents, which is a very large work item.  It is unlikely that we would do this just for a single new type, but this could be part of a planned protocol upgrade that encompasses many enhancements.  There is currently no plan to do this, but in the meantime, types can be deserialized into concrete types using PowerShell's extended type system over remoting. ",
      "created_at": "2022-04-07T19:50:21Z",
      "updated_at": "2022-04-07T19:50:21Z"
    }
  ],
  "created_at": "2017-02-20T00:42:44Z",
  "number": 3172,
  "state": "open",
  "title": "DateTimeOffset should be treated as a primitive for serialization",
  "updated_at": "2022-04-07T19:50:29Z"
}