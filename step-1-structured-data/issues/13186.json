{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13186",
  "author": "daxian-dbw",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nThe subsystem plugin model is designed to make it possible to break down the components in `System.Management.Automation.dll` to individual subsystems (_each of which resides in its own assembly_), so that we can get a core PowerShell engine that takes minimal disk footprint, which at the meanwhile could be brought up to a fully fledged PowerShell by registering those subsystems to the core engine.\r\n\r\nCurrently, only the `CommandPredictor` subsystem is supported, which will be used along with PSReadLine to provide custom prediction plugins. In future, `Job`, `CommandCompleter`, `Remoting` and more other components that currently in `S.M.A.dll` could be make subsystems and be moved out of `S.M.A.dll`.\r\n\r\n## PR Context\r\n\r\n**Goal:** Seek for review and early feedback.\r\nThe experimental flag `PSSubsystemPluginModel` is used to indicate that this is experimental and subject to change.\r\n\r\n`Register/Unregister-Subsystem` cmdlets are **NOT** planned because it's targeting binary subsystem implementations, which should deal with registration/unregistration via APIs. \r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): `PSSubsystemPluginModel`\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-08-21T00:41:46Z",
  "comments": [
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "PSES could probably leverage the `CommandPredictor` in completions or other places. As this progresses we should have an issue opened in PSES to support this new capability and what the experience should be like.",
      "created_at": "2020-07-15T22:23:57Z",
      "updated_at": "2020-07-15T22:23:57Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "Is it possible to ship these subsystems in modules instead of a new subsystem model? By shipping them in modules it could be possible to update individual components of PowerShell for example, updating the help subsystem with a new feature or bug fix.",
      "created_at": "2020-07-16T00:22:54Z",
      "updated_at": "2020-07-16T00:22:54Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Module will be the main approach to ship a subsystem for now. We considered leveraging NuGet package directly, but it's still vague how to support that. Subsystem will be wrapped as a module, and registration happens on module loading; unregistration happens on module unloading (well, if that subsystem allows unregistration).",
      "created_at": "2020-07-16T00:30:09Z",
      "updated_at": "2020-07-16T00:30:43Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw is the help subsystem in the cards for this in future?",
      "created_at": "2020-07-16T00:35:12Z",
      "updated_at": "2020-07-16T00:35:12Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the clarification @daxian-dbw. It sounds like how `PSProvider` have `Get-PSProvider` but get shipped and loaded/unloaded with a module.",
      "created_at": "2020-07-16T00:40:54Z",
      "updated_at": "2020-07-16T00:40:54Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@vexx32 The current idea is to pull the help system out as a completely standalone module, which means it doesn't need to hook up into the engine, but only expose those help cmdlets. Subsystems are more about the components that are tightly coupled with the engine state and thus have to hook up to the engine via some pre-defined interface/contracts.",
      "created_at": "2020-07-16T17:12:57Z",
      "updated_at": "2020-07-16T17:13:42Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> It sounds like how PSProvider have Get-PSProvider but get shipped and loaded/unloaded with a module.\r\n\r\n@ThomasNieto Yes, very similar to that. The `Provider` or `JobAdapter` for example allow extensions to a specific component of PowerShell, and the subsystem idea is to make it more general, applicable the the individual component itself of PowerShell.\r\n\r\nThe difference is that subsystem is not for custom extension, but only for separating existing components from the engine (_maybe used for new PS components in future too_).",
      "created_at": "2020-07-16T17:25:05Z",
      "updated_at": "2020-07-16T17:25:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> so that we can get a core PowerShell engine that takes __minimal disk footprint__\r\n\r\nCurrent SMA.dll size is ~20 Mb with R2R (~10% from dir full size) and ~7 Mb without R2R (~3% from dir full size). \r\nI wonder how could we noticeably reduce \"disk footprint\" with the plugin model?",
      "created_at": "2020-07-20T18:28:59Z",
      "updated_at": "2020-07-20T18:28:59Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> Current SMA.dll size is ~20 Mb with R2R (~10% from dir full size) and ~7 Mb without R2R (~3% from dir full size).\r\nI wonder how could we noticeably reduce \"disk footprint\" with the plugin model?\r\n\r\n@iSazonov sorry for the delay of my response. You are talking about the whole pwsh package size. If you have a scenario that require full set of features, then there is no much we can do about the disk footprint. But when you have scenarios that you only need a subset of PowerShell features, there is a chance to reduce the footprint.\r\n\r\nFor example, say an Azure service wants to use PowerShell language for local in-proc processing, then the remoting and job components and their dependencies are just burden. The goal of minimal powershell is to make the engine minimal and pluggable, so you can get only what you need and don't waste additional disk footprint.",
      "created_at": "2020-07-30T21:10:01Z",
      "updated_at": "2020-07-30T21:10:01Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Thank you all for the review and comments. I think I address or respond to all the comments.\r\nLet's keep the discussion going and I appreciate any additional feedback!",
      "created_at": "2020-07-31T23:37:58Z",
      "updated_at": "2020-07-31T23:37:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw I like an microkernel idea in general. But I very wonder to see \"disk footprint\" as main motivation.\r\nEven embedded modern systems have a huge memory size, not to mention the size of the disk.\r\nI think it's not a problem for Azure servers to have PowerShell 1-2 MB more or less.\r\nIf MSFT team want reduce PowerShell size because of security this is also not a compelling motivation to add new complicity since PowerShell has had multiple layers/features of protection for many years.\r\nIf MSFT team has a special request from Azure then conditional compilation might be the best solution. I just can't imagine that someone will use this new API like they do with providers due to the complexity.\r\n\r\n",
      "created_at": "2020-08-01T07:44:08Z",
      "updated_at": "2020-08-01T07:44:08Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov This is actually a real problem we are facing when trying to get PowerShell in some Azure service images. @joeyaiello, can you please chime in and provide some context?\r\n\r\n> PowerShell 1-2 MB more or less.\r\n\r\nIt's not just the size of the components themselves, but their dependencies as well.\r\n\r\n> If MSFT team want reduce PowerShell size because of security\r\n\r\nReducing surfacing area is another benefit. With reduced dependencies, there would less patching concerns/needs.\r\n\r\n> I just can't imagine that someone will use this new API like they do with providers due to the complexity.\r\n\r\nTo be honest, we are not expecting anyone outside the PowerShell team to implement most of the subsystems (maybe all except for `Prediction` and `Completion`). We even planed that most of the essential subsystems such as `remoting` and `job` would be implemented as friend assemblies to the not-yet-existing `System.Management.Automation.Core` assembly.",
      "created_at": "2020-08-03T16:39:55Z",
      "updated_at": "2020-08-03T16:44:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> We even planed that most of the essential subsystems such as remoting and job would be implemented as friend assemblies to the not-yet-existing System.Management.Automation.Core assembly.\r\n\r\nIt is expected with the innovation. And it raises a concern - the more dll-s the slower the startup. Or you plan \"single file compile\" (at least for SMA)? And maybe trimming too?",
      "created_at": "2020-08-03T18:58:26Z",
      "updated_at": "2020-08-03T18:59:20Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> the more dll-s the slower the startup.\r\n\r\nNo, actually for startup, the smaller size of the absolutely needed assemblies, the faster it will be. The subsystem assemblies can be lazily loaded when needed, in a similar way of module discovery.",
      "created_at": "2020-08-03T19:12:46Z",
      "updated_at": "2020-08-03T19:12:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We could enable nullable annotations in new files. More clear design intentions, less NREs in future.",
      "created_at": "2020-08-07T06:09:09Z",
      "updated_at": "2020-08-07T06:09:09Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The latest update includes the following changes:\r\n1. Add the experimental feature `PSSubsystemPluginModel`. It can hide `Get-Subsystem` cmdlet but won't hide the APIs, but it indicates that the feature is experimental and subject to change.\r\n2. Rename a few method names as @rjmholt suggested.\r\n3. Add `ToolTip` to the predictive suggestion returned by `IPredictor.GetSuggestion` as @TylerLeonhardt suggested.",
      "created_at": "2020-08-07T06:13:02Z",
      "updated_at": "2020-08-07T06:13:02Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The latest commits enabled the nullable reference type check in the newly added files.",
      "created_at": "2020-08-07T20:04:29Z",
      "updated_at": "2020-08-07T20:04:29Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "It looks like the Prediction subsystem is still in SMA but one of the goals of subsystems was pulling them out of SMA. Any reason Predictions didn't start outside of SMA?\r\n\r\nAlso, I'm interested in understanding how this work will interact with:\r\n\r\n* Hosting scenarios using the PowerShell SDK\r\n    * How does a PSHost interact with subsystems?\r\n    * PowerShell SDK currently pulls in SMA... what \r\n* Referencing scenarios using PowerShell Standard\r\n    * If I am a PowerShell module referencing PowerShell Standard, how could I leverage a subsystem only when I'm running in PS 7.next?\r\n\r\n",
      "created_at": "2020-08-18T17:07:48Z",
      "updated_at": "2020-08-18T17:07:48Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> It looks like the Prediction subsystem is still in SMA but one of the goals of subsystems was pulling them out of SMA. Any reason Predictions didn't start outside of SMA?\r\n\r\nThe `CommandPredictor` subsystem is not in SMA. Without a predictor implementation, APIs exposed from `CommandPrediction` do nothing. `CommandPrediction` exposes the interfaces for a user to consume the `CommandPredictor` implementations, if any is registered. So `CommandPrediction` is not the \"_prediction subsystem_\", but just a thin layer between users and the `CommandPredictor` subsystem.\r\n\r\n> Hosting scenarios using the PowerShell SDK - How does a PSHost interact with subsystems?\r\n\r\nSo far, I don't think a PSHost needs to interact with subsystems. When remoting is refactored as a subsystem, it may need to interact with PSHost, but the host doesn't need to know whether it comes from `S.M.A.Core` or a `PowerShell.Subsystem.Remoting.dll`.\r\n\r\n> PowerShell SDK currently pulls in SMA... what\r\n\r\nNot sure what you are asking here.\r\n\r\n> If I am a PowerShell module referencing PowerShell Standard, how could I leverage a subsystem only when I'm running in PS 7.next?\r\n\r\nFor now, you will have to build 2 assemblies for the module, one targeting PS standard, which can be used on prior-7.1 PowerShell; one targeting the 7.1 nuget packages, which is used when the psversion is 7.1. It's in the same situation as the new debugging APIs added in 7.0. They are not in the PowerShell Standard. How are you using them in PSES today?",
      "created_at": "2020-08-18T17:54:33Z",
      "updated_at": "2020-08-18T17:54:33Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "> The `CommandPredictor` subsystem is not in SMA.\r\n\r\nWhich dll is it in?\r\n\r\n> Not sure what you are asking here.\r\n\r\nOops! I think I was going to ask if the PowerShell SDK will be responsible for pulling in subsystem dlls or if the user needs to do that.",
      "created_at": "2020-08-18T19:08:13Z",
      "updated_at": "2020-08-18T19:08:13Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> > The `CommandPredictor` subsystem is not in SMA.\r\n>\r\n>Which dll is it in?\r\n\r\nIt will be a plugin DLL, making available as a PowerShell module, which will register itself to `SubsystemManager` during module importing.\r\n\r\n> I think I was going to ask if the PowerShell SDK will be responsible for pulling in subsystem dlls or if the user needs to do that.\r\n\r\nFor the `CommandPredictor` subsystem specifically, the user needs to import the module that implements the predictor.\r\n\r\nFor subsystems that don't yet exist, such as remoting and eventing, the shipping vehicles will be module and nuget package (_how to support nuget package directly is not yet known_). The user can choose to reference the minimal core nuget package, and pull in additional subsystems as needed via modules, or the user can choose to reference the minimal core nuget package as well as additional subsystem nuget packages, and pre-configure the subsystem registrations via APIs.",
      "created_at": "2020-08-18T20:17:02Z",
      "updated_at": "2020-08-18T20:17:02Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "Ah so this PR does not include an implementation of a `ComandPredictor`. I see now.\r\n\r\nAlso, I guess we need to wait til we try to pull out remoting and eventing to see what the nuget package landscape will be.",
      "created_at": "2020-08-18T20:27:02Z",
      "updated_at": "2020-08-18T20:27:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> So CommandPrediction is not the \"prediction subsystem\", but just a thin layer between users and the CommandPredictor subsystem.\r\n\r\nI stumbled from this earlier too. It seems the names could be more intuitively clear.\r\n",
      "created_at": "2020-08-19T15:04:45Z",
      "updated_at": "2020-08-19T15:04:45Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "FYI. It would be good to have this in `PowerShell 7.1.0-preview.7` and currently requirements are met.\r\nBe advised: I'll be merging this in 24 hours, so there is the last chance to post anything blocking this PR.\r\n@TylerLeonhardt @rjmholt @theJasonHelmick @adityapatwardhan @iSazonov @SeeminglyScience @vexx32 @PaulHigin ",
      "created_at": "2020-08-19T23:01:45Z",
      "updated_at": "2020-08-19T23:01:45Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.1.0-preview.7` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.7)\n",
      "created_at": "2020-09-08T22:51:49Z",
      "updated_at": "2020-09-08T22:51:49Z"
    },
    {
      "author": "sdwheeler",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw We need docs for this experimental feature. Please open a docs issue and provide the necessary information. ",
      "created_at": "2020-10-15T17:59:30Z",
      "updated_at": "2020-10-15T17:59:30Z"
    }
  ],
  "created_at": "2020-07-15T21:58:22Z",
  "number": 13186,
  "state": "closed",
  "title": "Initial work of the subsystem plugin model (for minimal powershell)",
  "updated_at": "2020-10-15T17:59:31Z"
}