{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16643",
  "author": "jhoneill",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nSetting $PSStyle.OutputRendering = \"PlainText\"  removes colour. However it only seems to do so if the `$host.name` is  `ConsoleHost` so using a .Net Interactive notebook (which doesn't load the profile as a way to set psstyle preferences) or the the PowerShell Integrated console in VS Code.  (\".NET Interactive Host\"  and \" Visual Studio Code Host\" respectively) \r\n\r\n\n\n### Expected behavior\n\n```console\nSetting $PSStyle.OutputRendering = \"PlainText\"  removes colour\n```\n\n\n### Actual behavior\n\n```console\nSetting $PSStyle.OutputRendering = \"PlainText\" does not removes colour when the host is not \"Consolehost\" see visuals\n```\n\n\n### Error details\n\n```console\nNo message\n```\n\n\n### Environment data\n\n```powershell\n\u001b[32;1mName                           Value\u001b[0m\r\n\u001b[32;1m----                           -----\u001b[0m\r\nPSVersion                      7.2.1\r\nPSEdition                      Core\r\nGitCommitId                    7.2.1\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u0393\u00c7\u00aa}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\nBelow both show labels in green despite plain text being selected. \r\n![image](https://user-images.githubusercontent.com/16209593/146528131-5638c91e-6806-433f-8939-43b9081593bb.png)\r\n\r\n.Net Interactive notebook\r\n\r\n![image](https://user-images.githubusercontent.com/16209593/146528299-4137c81c-67b0-4609-a22a-a9bf826fd1ef.png)\r\n\r\nPowerShell Integrated Console  in VS Code. \r\n\r\nIn the console host (Windows terminal, legacy console, and pwsh in VS Code outside the integrated vs code console).  plain text removes the green colouring.\r\n![image](https://user-images.githubusercontent.com/16209593/146529165-ddbf20c6-f952-42da-b8e3-92d969bd4100.png)\r\n\r\n\r\n",
  "closed_at": "2022-10-13T22:01:17Z",
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "I do not know. In Windows Console Host and in VSCode all are working as expected. If I set to 'PlainText' the coloring disappeared in entire console screen.",
      "created_at": "2021-12-17T11:56:27Z",
      "updated_at": "2021-12-17T11:59:19Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@237dmitry  \r\nIn VS code does the drop down say \"pwsh\" or \"PowerShell Integrated Console\"  ?\r\nFor me, it works fine if it is pwsh, (just the same as if I do [win key] [r] pwsh, or if I use Windows Terminal)  - that's the bottom picture, but if it is the \"PowerShell Integrated Console\" I get the middle picture. \r\n\r\n\r\n",
      "created_at": "2021-12-17T12:03:23Z",
      "updated_at": "2021-12-17T12:03:23Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "Ah, sorry,  I was too hasty. In VSCode coloring is disappeared AFTER setting 'PlainText'. All strings before are still colored.\r\n\r\n![ss-20211217150552](https://user-images.githubusercontent.com/78153320/146543465-5c0419dd-4507-4e66-8198-7a530347f388.png)\r\n\r\n![ss-20211217151544](https://user-images.githubusercontent.com/78153320/146543484-7316b2cc-6abc-4458-bf1b-0966192f115f.png)\r\n\r\n",
      "created_at": "2021-12-17T12:13:51Z",
      "updated_at": "2021-12-17T12:17:03Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "OK, I understand now, yes that looks right in a pwsh pane.  My issue is the integrated one  \r\n",
      "created_at": "2021-12-17T13:17:42Z",
      "updated_at": "2021-12-17T13:18:22Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "VSCode integrated console and PowerShell notebook use different hosts, which haven't been updated to work with `$PSStyle`. Can you maybe open separate issues in .NET Interactive and PSES repos about this?",
      "created_at": "2021-12-17T17:37:12Z",
      "updated_at": "2021-12-17T17:37:12Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Quote the discussion between @jhoneill and me from https://github.com/PowerShell/PowerShell/issues/16635#issuecomment-996901232\r\n\r\n> just so I'm clear, although it's a change in PowerShell itself that caused it, the fix can only come from the people who produce the hosts?\r\n\r\nUnfortunately, yes. In PowerShell itself, the work that strips off the ANSI code is done in ConsoleHost, and that makes it necessary for other host to do something similar.\r\n\r\nBut you made me start to think, maybe that's not the right design, maybe that should be done in formatting before sending the payload to host ... there could be other applications that hosts PowerShell out there in the wild, and requiring extra work to their host after upgrading to PS 7.2 is not a pleasant ask for sure.\r\n\r\nWe may want to rethink about where to strip off the ANSI code. Does this work have to be done in host implementation? If not, it's better to do it in PowerShell formatting, so various hosts out in the wild don't need to change for `$PSStyle` to work properly when upgrading to PS 7.2+.",
      "created_at": "2021-12-17T19:33:43Z",
      "updated_at": "2021-12-17T19:34:13Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "There seem to be other problems relating to different hosts, which suggest - per @daxian-dbw  above - **shifting this out of the host is a good idea.** \r\n\r\nThe screen shot below is using a .NET interactive notebook. \r\nRed is used in the right most column to say \"EXCEPT in these environments. \r\nThe section labelled 1 in the screen, shows  without colour the environment name fits on one line  but when colour is added the same text is split over two lines - I assume because the codes for \"foreground red\" and \"reset\" are treated as visible characters.  I've mentioned on #16700  that because the _reset_ has moved down a line  _Panettone service_  gets trapped between the begin and end of colour for _shared services pre-release_, turning it red.\r\n\r\nOn the bottom row, blue is used to highlight some types of action and (2) shows the codes for \"foreground blue\" and \"reset\" have reduced padding before the next column. \r\n\r\n![image](https://user-images.githubusercontent.com/16209593/148264358-131c0ada-f829-4ab9-894d-a2ab12743d71.png)\r\n\r\nNeither (1) nor (2) occurs in the default host, but making people who create other hosts bring over multiple pieces of functionality is not ideal. \r\n\r\n",
      "created_at": "2022-01-05T17:59:16Z",
      "updated_at": "2022-01-05T17:59:16Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "It seems to me that if a host could declare  or be constructed what formats it supports (plaintext only, console emits, ANSI support), then Powershell should send that output to the host and do that work, and the host can either pass it thorugh or do with it what it wants.",
      "created_at": "2022-02-04T02:40:45Z",
      "updated_at": "2022-02-04T02:40:45Z"
    },
    {
      "author": "ALIENQuake",
      "author_association": "NONE",
      "body": "@daxian-dbw FWIW, I'm facing this issue using SAPIEN PowerShell Studio.",
      "created_at": "2022-03-08T20:12:13Z",
      "updated_at": "2022-03-08T20:12:13Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "Looking for something else this is fixed with the newest PowerShell integrated console in VSCode, but the problem remains in .NET Interactive. \r\n",
      "created_at": "2022-05-12T16:35:26Z",
      "updated_at": "2022-05-12T16:35:26Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@jhoneill PowerShell integrated console started to wrap a console host instance internally. The .NET Interactive cannot wrap console host within it, because it's not facing a terminal, but the .NET Interactive stdin/stdout channel.",
      "created_at": "2022-05-12T17:45:02Z",
      "updated_at": "2022-05-12T17:45:02Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@daxian-dbw  so something that works that way can't get clean output then ? ",
      "created_at": "2022-05-12T19:21:22Z",
      "updated_at": "2022-05-12T19:21:22Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The PowerShell sub-kernel host needs to be updated to strip off the VT sequences properly as controlled by `$PSStyle`, and that's not done yet :(",
      "created_at": "2022-05-12T21:26:10Z",
      "updated_at": "2022-05-12T21:26:10Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "But it will be done at some point ? ",
      "created_at": "2022-05-13T08:54:31Z",
      "updated_at": "2022-05-13T08:54:31Z"
    },
    {
      "author": "simonsabin",
      "author_association": "NONE",
      "body": "> The PowerShell sub-kernel host needs to be updated to strip off the VT sequences properly as controlled by `$PSStyle`, and that's not done yet :(\r\n\r\nShould that be a switch passed in via pwsh, to control stripping of characters when pwsh called directly",
      "created_at": "2022-09-07T16:03:23Z",
      "updated_at": "2022-09-07T16:03:23Z"
    },
    {
      "author": "theJasonHelmick",
      "author_association": "CONTRIBUTOR",
      "body": "The Working Group has reviewed this issue and agrees it should be filed with .Net Interactive. For discussions regarding the design of PSStyle and it implementation, please open a separate issue.",
      "created_at": "2022-10-12T20:25:24Z",
      "updated_at": "2022-10-12T20:25:24Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as external and has not had any activity for **1 day**. It has been be closed for housekeeping purposes.",
      "created_at": "2022-10-13T22:01:16Z",
      "updated_at": "2022-10-13T22:01:16Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@theJasonHelmick  What troubles me here is:  Is .NET  interactive the only host with any meaningful user-base which needs to take on the extra work to integrate with PowerShell, or are there a few, or potentially many ? For small numbers filing an issue with them is the right course. For large numbers the solution should be coming from the PowerShell team. I don't know of any others so I'm happy with this marked as external and closed, at least for now.  We **may** need to re-visit but no sense it getting overly worried because it is more likely we won't. \r\n,\r\n ",
      "created_at": "2022-10-14T08:25:08Z",
      "updated_at": "2022-10-14T08:25:08Z"
    }
  ],
  "created_at": "2021-12-17T10:31:37Z",
  "labels": [
    "WG-Interactive-Console",
    "Resolution-External",
    "WG-Engine-Format"
  ],
  "number": 16643,
  "state": "closed",
  "title": "$PsStyle.OutputFormatting =  PlainText is ineffective when host is not 'ConsoleHost'",
  "updated_at": "2022-10-14T08:25:08Z"
}