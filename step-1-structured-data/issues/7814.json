{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7814",
  "author": "splatteredbits",
  "body": "If `$InformationPreference` is `Continue`, the `Receive-Job` cmdlet duplicates `Write-Host` output from background jobs.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n> Start-Job { 1..5 | % { Write-Host $_ } } | Wait-Job | Receive-Job -InformationAction Continue\r\n1\r\n1\r\n2\r\n2\r\n3\r\n3\r\n4\r\n4\r\n5\r\n5\r\n```\r\n\r\nor \r\n\r\n```powershell\r\n> $InformationPreference = 'Continue'\r\n> Start-Job { 1..5 | % { Write-Host $_ } } | Wait-Job | Receive-Job\r\n1\r\n1\r\n2\r\n2\r\n3\r\n3\r\n4\r\n4\r\n5\r\n5\r\n```\r\n\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```powershell\r\n> Start-Job { 1..5 | % { Write-Host $_ } } | Wait-Job | Receive-Job -InformationAction Continue\r\n1\r\n2\r\n3\r\n4\r\n5\r\n```\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                      Value\r\n----                      -----\r\nPSVersion                 6.1.0\r\nPSEdition                 Core\r\nGitCommitId               6.1.0\r\nOS                        Microsoft Windows 6.1.7601 S\r\nPlatform                  Win32NT\r\nPSCompatibleVersions      {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion 2.3\r\nSerializationVersion      1.1.0.1\r\nWSManStackVersion         3.0\r\n```\r\n",
  "closed_at": "2021-01-15T06:13:49Z",
  "comments": [
    {
      "author": "splatteredbits",
      "author_association": "NONE",
      "body": "This also affects Windows PowerShell 5.1: https://windowsserver.uservoice.com/forums/301869-powershell/suggestions/35443981-receive-job-duplicates-write-host-output",
      "created_at": "2018-09-18T19:37:03Z",
      "updated_at": "2018-09-18T19:37:03Z"
    },
    {
      "author": "thezim",
      "author_association": "CONTRIBUTOR",
      "body": "This does not repro for me on Windows PowerShell.\r\n\r\n```powershell\r\nPS C:\\temp> Start-Job { 1..5 | % { Write-Host $_ } } | Wait-Job | Receive-Job\r\n1\r\n2\r\n3\r\n4\r\n5\r\nPS C:\\temp> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.14393.2368\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.14393.2368\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```",
      "created_at": "2018-09-19T12:08:52Z",
      "updated_at": "2018-09-19T12:08:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@thezim Do you set $InformationPreference to Continue?",
      "created_at": "2018-09-19T12:25:16Z",
      "updated_at": "2018-09-19T12:25:16Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Indeed, @thezim:\r\n\r\nIt is adding `-InformationAction Continue` to the `Receive-Job` call that produces the symptom, or setting `$InformationActionPreference = 'Continue'` beforehand.\r\n\r\n",
      "created_at": "2018-09-19T17:27:47Z",
      "updated_at": "2018-09-19T17:28:00Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "One copy came from host stream. Another from information stream.",
      "created_at": "2018-09-27T21:21:35Z",
      "updated_at": "2018-09-27T21:21:35Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Host *is* information stream as of... PS v5 and up, I believe. :)",
      "created_at": "2018-09-27T21:33:36Z",
      "updated_at": "2018-09-27T21:33:36Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32 Host stream is separate from information stream. Also, host stream is bidirectional.\r\n```powershell\r\nStart-Job {\r\n    $Host.UI.Write('Input value: ')\r\n    $Host.UI.WriteLine('Value from main process: ' + $Host.UI.ReadLine())\r\n} | Receive-Job -Wait -AutoRemoveJob\r\n```",
      "created_at": "2018-09-27T21:50:59Z",
      "updated_at": "2018-09-27T21:50:59Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Right, but that's not what the issue is really about. They're using Write-Host, which *does* write to the information stream.\n\nSo I guess the issue is that the tagged messages write to the host stream and then write to the host stream again when as they pass through receive-job with its specified InformationAction... ",
      "created_at": "2018-09-27T21:56:57Z",
      "updated_at": "2018-09-27T21:57:34Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32 Processing information record in job cause it to produce host message, which received alongside with information record. Now, when information record processed locally, it can produce another host message. Which is what happening here.",
      "created_at": "2018-09-27T22:25:28Z",
      "updated_at": "2018-09-27T22:25:28Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "Just to demonstrate this:\r\n```powershell\r\nStart-Job {\r\nStart-Job {\r\nStart-Job {\r\nStart-Job {\r\nStart-Job {\r\n    Write-Information Test -InformationAction Continue\r\n} | Receive-Job -Wait -AutoRemoveJob -InformationAction Continue\r\n} | Receive-Job -Wait -AutoRemoveJob -InformationAction Continue\r\n} | Receive-Job -Wait -AutoRemoveJob -InformationAction Continue\r\n} | Receive-Job -Wait -AutoRemoveJob -InformationAction Continue\r\n} | Receive-Job -Wait -AutoRemoveJob -InformationAction Continue\r\n```\r\nAlso, it is not jobs specific. It is how PowerShell remoting work in general:\r\n```powershell\r\nInvoke-Command . {\r\nInvoke-Command . {\r\nInvoke-Command . {\r\nInvoke-Command . {\r\nInvoke-Command . {\r\n    Write-Information Test -InformationAction Continue\r\n} -EnableNetworkAccess -InformationAction Continue\r\n} -EnableNetworkAccess -InformationAction Continue\r\n} -EnableNetworkAccess -InformationAction Continue\r\n} -EnableNetworkAccess -InformationAction Continue\r\n} -EnableNetworkAccess -InformationAction Continue\r\n```",
      "created_at": "2018-09-28T03:59:30Z",
      "updated_at": "2018-09-28T03:59:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">  It is how PowerShell remoting work in general:\r\n\r\nIt seems this is in serialization code.",
      "created_at": "2018-09-28T04:25:53Z",
      "updated_at": "2018-09-28T04:25:53Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov I do not see how it is related with serialization. Here:\r\nhttps://github.com/PowerShell/PowerShell/blob/bd5f7719bce3579f8128b498c8d059f6a0daf528/src/System.Management.Automation/engine/MshCommandRuntime.cs#L753\r\nit pass `InformationRecord` along. And here:\r\nhttps://github.com/PowerShell/PowerShell/blob/bd5f7719bce3579f8128b498c8d059f6a0daf528/src/System.Management.Automation/engine/MshCommandRuntime.cs#L819\r\nit also write message on host. So, each time `InformationRecord` processed it also generate additional message on host (assuming the conditions:\r\nhttps://github.com/PowerShell/PowerShell/blob/bd5f7719bce3579f8128b498c8d059f6a0daf528/src/System.Management.Automation/engine/MshCommandRuntime.cs#L755-L756\r\nare met).",
      "created_at": "2018-09-28T04:44:02Z",
      "updated_at": "2018-09-28T04:44:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@PetSerAl I don't remeber details. I tried optimize streams and I rested on remoting and serialization and had to postpone the work (to preserve backword compatibility).",
      "created_at": "2018-09-28T05:03:49Z",
      "updated_at": "2018-09-28T05:03:49Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "This is a major pain.\r\n\r\n`Receive-Job` and `Invoke-Command` respect the `$InformationPreference` from the calling scope which means that any script or function that receives a job (possibly including the upcoming foreach -parallel which is not explicitly using jobs) is going to get double output from any `Write-Host` -- and **also** from any `Write-Information` where the `$InformationPreference` is \"Continue\" _inside_ the job.\r\n\r\nWe tried using the Information stream on some new code last week and ended up with doubled output all over the place, and _wasted hours tracking down the double output_ to the fact that we'd passed in the InformationPreference in some remoting code because we wanted the information to be output to host (for logging) on the remote machine, but the script that's calling it _also_ has it's preference set to Continue for the same reason...",
      "created_at": "2019-09-17T23:26:28Z",
      "updated_at": "2019-09-17T23:26:28Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "In PowerShell v5 Write-host was changed to also output to the Information stream as per https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/write-host?view=powershell-6\r\n\r\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/write-host\">Write-Host (Microsoft.PowerShell.Utility)</a></strong></div><div>The Write-Host cmdlet customizes output. You can specify the color of text by using the ForegroundColor parameter, and you can specify the background color by using the BackgroundColor parameter. The Separator parameter lets you specify a string to use to separate displayed objects. The particular result depends on the program that is hosting PowerShell.  Note Starting in Windows PowerShell 5.0, Write-Host is a wrapper for Write-Information This allows you to use Write-Host to emit output to the information stream. This enables the capture or suppression of data written using Write-Host while preserving backwards compatibility. The $InformationPreference preference variable and InformationAction common parameter do not affect Write-Host messages. The exception to this rule is -InformationAction Ignore, which effectively suppresses Write-Host output. (see &quot;Example 5&quot;)  </div></blockquote>\r\n\r\nSo I think this is as expected.",
      "created_at": "2019-09-18T02:14:41Z",
      "updated_at": "2019-09-18T02:15:51Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@kilasuit: That `Write-Host` writes to the information stream is indeed expected; that the information is _duplicated_, as described in the OP, is not.\r\n\r\nFor the full extent of the problem, which affects all streams other than success and error, see #9585",
      "created_at": "2019-11-13T01:24:51Z",
      "updated_at": "2019-11-13T01:24:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Dup #9585",
      "created_at": "2021-01-15T06:13:49Z",
      "updated_at": "2021-01-15T06:13:49Z"
    }
  ],
  "created_at": "2018-09-18T19:34:11Z",
  "number": 7814,
  "state": "closed",
  "title": "Receive-Job duplicates Write-Host output from background job",
  "updated_at": "2021-01-15T06:13:50Z"
}