{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12995",
  "author": "jantari",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\n## Steps to reproduce\r\n\r\nThis is a function I wrote today:\r\n\r\n```powershell\r\nfunction Get-PingableServers {\r\n    [CmdletBinding()]\r\n    Param (\r\n        [Parameter(Position = 0, ValueFromPipeline = $true)]\r\n        [string[]]$Server\r\n    )\r\n\r\n    begin {\r\n        $pingTasks = [System.Collections.Generic.Dictionary[string, System.Threading.Tasks.Task]]::new()\r\n        $ping = [System.Net.NetworkInformation.Ping]::new()\r\n    }\r\n\r\n    process {\r\n        foreach ($pingTarget in $Server) {\r\n            $pingTasks.Add($pingTarget, $ping.SendPingAsync($pingTarget, $PingTimeoutMS))\r\n        }\r\n    }\r\n\r\n    end {\r\n        while ($pingTasks.Values.IsCompleted -contains $false) {\r\n            Start-Sleep -Milliseconds 200\r\n        }\r\n        $pingTasks.GetEnumerator().Where{ $_.Value.Result.Status -eq 0 }.Key\r\n    }\r\n}\r\n\r\n```\r\n\r\n## Expected behavior\r\n\r\nWhen passing in more than 1 Hostname, it should throw a `System.Management.Automation.MethodInvocationException`\r\nand fail. This is what happens in PowerShell 5.1:\r\n\r\n```none\r\njantari@NBFFM0037:C:\\Users\\jantari\r\n\u2514\u2500 PS> Get-PingableServers -Server fakehost01, fakehost02\r\nAusnahme beim Aufrufen von \"SendPingAsync\" mit 2 Argument(en):  \"Es l\u00e4uft bereits ein asynchroner Aufruf. Er muss abgeschlossen oder abgebrochen werden,\r\nbevor Sie diese Methode aufrufen k\u00f6nnen.\"\r\nIn Zeile:15 Zeichen:13\r\n+             $pingTasks.Add($pingTarget, $ping.SendPingAsync($pingTarg ...\r\n+             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\r\n    + FullyQualifiedErrorId : InvalidOperationException\r\n```\r\n\r\nI am terribly sorry for the localized german error message, but that is a catastrophe Microsoft is responsible for and not me. It basically says there  is already an asynchronous procedure running and it must be completed before the method can be called again.\r\n\r\n## Actual behavior\r\n\r\nIn PowerShell 7.0.2 and PowerShell 7.1.0-preview3, there is just no output. It doesn't work, but since there's no error message it's also impossible to diagnose. I had to run this in PowerShell 5.1 to learn what was wrong.\r\n\r\n```none\r\njantari@NBFFM0037:C:\\Users\\jantari\r\n\u2514\u2500 PS> Get-PingableServers -Server fakehost01, fakehost02\r\njantari@NBFFM0037:C:\\Users\\jantari\r\n\u2514\u2500 PS>\r\n```\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.0-preview.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.0-preview.3\r\nOS                             Microsoft Windows 10.0.19041\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nErrorActionPreference is set to continue for all shells.\r\n\r\n```none\r\njantari@NBFFM0037:C:\\Users\\jantari\r\n\u2514\u2500 PS> $ErrorActionPreference\r\nContinue\r\n```",
  "closed_at": "2020-06-22T00:00:10Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Is there anything stored in `$Error` in these cases?\r\n\r\n```ps1\r\n$Error | Format-List -Force\r\n```\r\n\r\nIf so, it may be a bug in the ConciseView error formatting; try setting `$ErrorView = 'NormalView'` and see if the errors appear there.",
      "created_at": "2020-06-19T12:07:57Z",
      "updated_at": "2020-06-19T12:08:08Z"
    },
    {
      "author": "jantari",
      "author_association": "NONE",
      "body": "No, `$Error` is empty and changing the view does not make anything appear either.",
      "created_at": "2020-06-19T13:10:06Z",
      "updated_at": "2020-06-19T13:10:06Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Very strange... and I'm seeing the same, as well. Even wrapping the code that should be throwing in a try/catch and trying to handle the error manually gives me absolutely nothing.",
      "created_at": "2020-06-19T13:17:49Z",
      "updated_at": "2020-06-19T13:18:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "PowerShell utilizes .Net API and the API is not throw. You should ask in .Net Rintime repository.",
      "created_at": "2020-06-19T14:31:57Z",
      "updated_at": "2020-06-19T14:31:57Z"
    },
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "In .NET Framework 4.8, InvalidOperationException is thrown out of Ping.SendPingAsync if an asynchronous operation is already in progress. The implementation uses TaskCompletionSource to wrap a task around an event-based asynchronous operation.\r\n\r\nIn .NET 5 Preview 4, Ping.SendPingAsync instead returns a task whose Task.Exception contains an InvalidOperationException. The implementation uses C# async methods.\r\n\r\nWhen PowerShell code reads the Task\\<TResult>.Result property, an exception is thrown but PowerShell swallows it. If PowerShell code instead calls the underlying Task\\<TResult>.get_Result() accessor method, then PowerShell does not swallow the exception.\r\n\r\n# Windows PowerShell 5.1 using .NET Framework 4.8 on Windows 10.0.19041\r\n\r\n```\r\nPS C:\\> $ping = [System.Net.NetworkInformation.Ping]::new()\r\nPS C:\\> $pingtask1 = $ping.SendPingAsync(\"fakehost1\"); $pingtask2 = $ping.SendPingAsync(\"fakehost2\")\r\nException calling \"SendPingAsync\" with \"1\" argument(s): \"An asynchronous call is already in progress. It must be completed or canceled before you can call this method.\"\r\nAt line:1 char:48\r\n+ ... PingAsync(\"fakehost1\"); $pingtask2 = $ping.SendPingAsync(\"fakehost2\")\r\n+                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\r\n    + FullyQualifiedErrorId : InvalidOperationException\r\n```\r\n\r\n# PowerShell 7.1.0-preview.3 using .NET 5.0.0-preview.4.20251.6 on Windows 10.0.19041\r\n\r\n```\r\nPS C:\\> $ping = [System.Net.NetworkInformation.Ping]::new()\r\nPS C:\\> $pingtask1 = $ping.SendPingAsync(\"fakehost1\"); $pingtask2 = $ping.SendPingAsync(\"fakehost2\")\r\nPS C:\\> $pingtask1\r\n\r\nId IsCompleted Status\r\n-- ----------- ------\r\n3  True        RanToCompletion\r\n\r\nPS C:\\> $pingtask2\r\n\r\nId IsCompleted Status\r\n-- ----------- ------\r\n4  True        Faulted\r\n\r\nPS C:\\> $pingtask2.Exception\r\n\r\nInnerExceptions : {System.InvalidOperationException: An asynchronous call is already in progress. It must be completed or canceled before you can call this method.\r\n                     at System.Net.NetworkInformation.Ping.CheckStart()\r\n                     at System.Net.NetworkInformation.Ping.GetAddressAndSendAsync(String hostNameOrAddress, Int32 timeout, Byte[] buffer, PingOptions options)}\r\nMessage         : One or more errors occurred. (An asynchronous call is already in progress. It must be completed or canceled before you can call this method.)\r\nTargetSite      :\r\nStackTrace      :\r\nData            : {}\r\nInnerException  : System.InvalidOperationException: An asynchronous call is already in progress. It must be completed or canceled before you can call this method.\r\n                     at System.Net.NetworkInformation.Ping.CheckStart()\r\n                     at System.Net.NetworkInformation.Ping.GetAddressAndSendAsync(String hostNameOrAddress, Int32 timeout, Byte[] buffer, PingOptions options)\r\nHelpLink        :\r\nSource          :\r\nHResult         : \u22122146233088\r\n\r\n\r\nPS C:\\> $pingtask2.Result\r\nPS C:\\> $pingtask2.get_Result()\r\nMethodInvocationException: Exception calling \"get_Result\" with \"0\" argument(s): \"One or more errors occurred. (An asynchronous call is already in progress. It must be completed or canceled before you can call this method.)\"\r\nPS C:\\>\r\n```\r\n\r\n",
      "created_at": "2020-06-20T07:43:32Z",
      "updated_at": "2020-06-20T07:44:17Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Ah, I see. Yeah, PowerShell doesn't really allow property accesses to throw in general. You would need to check the Exception property I suppose. \ud83e\udd14 \r\n\r\nJust as a general FYI, the .NET Core API for Ping is... weird, at best. We filed [an issue in dotnet/runtime](https://github.com/dotnet/runtime/issues/927) months ago to try to get at least some of the issues with it fixed, but not a lot of progress has been made. If you can comment on that issue with any additional problems you find there it might help get some of them sorted out/prioritized.",
      "created_at": "2020-06-20T13:15:32Z",
      "updated_at": "2020-06-20T13:16:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> PowerShell doesn't really allow property accesses to throw in general. \r\n\r\nWe could discuss this in new issue.",
      "created_at": "2020-06-20T18:52:30Z",
      "updated_at": "2020-06-20T18:52:30Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-06-22T00:00:08Z",
      "updated_at": "2020-06-22T00:00:08Z"
    }
  ],
  "created_at": "2020-06-19T09:29:29Z",
  "labels": [
    "Issue-Question",
    "WG-Engine",
    "Resolution-Answered"
  ],
  "number": 12995,
  "state": "closed",
  "title": "PowerShell 7 silently \"swallows\" InvalidOperationException Error",
  "updated_at": "2020-06-22T00:00:10Z"
}