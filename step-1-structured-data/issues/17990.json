{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17990",
  "author": "LqkUWp",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nI have a file `.\\o\\abc [defg].pdf`, then I try all commands below to `ls` it. The first char y/x represents that the corresponding command works or not, i.e. prints the file or nothing without any error. \r\n\r\n```\r\ny ls 'abc `[defg`].pdf' -Recurse\r\ny ls 'abc `[defg`].pdf' -Recurse -File | ls\r\nx ls (ls 'abc `[defg`].pdf' -Recurse).FullName\r\nx ls \"$((ls 'abc `[defg`].pdf' -Recurse).FullName)\"\r\nx ls (ls 'abc `[defg`].pdf' -Recurse -File).ToString()\r\n   ```\r\n\r\n### Expected behavior\r\n\r\n```console\r\nAll commands above should works exactly the same way.\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nJust as the first char y/x in each command line shows. Output of `ls` can't be recognized by `ls` itself when the output is not passed via pipeline. \r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.6\r\nPSEdition                      Core\r\nGitCommitId                    7.2.6\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "I don't understand this `x/y` notation. Please either show the output of each command, or write them as tests using `| Should -Be $null` or `| Should -Not - Be $null`. The same applies to the other two issues you submitted. \r\n\r\nAlso, this is not a bug, but the result of treating filename as a glob. Minimal test case would be a file named `[.txt`. ``` ls '`[.txt' ``` will work, but ``` ls '`[.txt' | ls``` with through an error about mismatched `[`.\r\n\r\nThis is solved by using `-LiteralPath` whenever you pipe in filenames. I believe the same will apply to the other two issues. Its similar to how `$x -Match $x` will fail if `$x` contains any of `\\?*[]^$`",
      "created_at": "2022-08-30T15:52:35Z",
      "updated_at": "2022-08-30T15:56:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems this mix some issues and such issue were already opened.",
      "created_at": "2022-08-31T04:12:29Z",
      "updated_at": "2022-08-31T04:12:29Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "This and #17992  and #17991 are basically the same issue.  There are pain points around the use of `[`  and  `]` filenames because they can be treated as wild cards. \r\nThe advice is \r\n1. Avoid using these characters. \r\n2. If you **must** use them specify -LiteralPath  - there are places where the  `[` and `]` can be escaped with a `` ` `` but this is not reliable.  See #17992  and #18038  among other places.\r\n\r\nIn all three failing examples above  the inner command  ```  ls  'abc `[defg`].pdf' ``` works because the string is treated as -Path and escaping works  as desired.    \r\nThe full name - which is what the file object gives when converting to a string - does _not_ escape the name so the outer command runs `ls 'abc [defg].pdf' ` un-escaped, which fails.    \r\nIf the outer command may need to deal with names that contain wildcard chars it _must_ use `-literalpath`\r\n\r\n\r\n",
      "created_at": "2022-09-07T11:29:24Z",
      "updated_at": "2022-09-07T11:29:24Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "On a side note, @LqkUWp: Please use the true names of PowerShell cmdlets in your issues, not aliases, especially if those aliases aren't defined on all platforms due to referring to a native utility there. Specifically, `ls` refers to `/bin/ls` on Unix-like platforms, not `Get-ChildItem`, so if someone tries your repro steps there, they won't work as intended.\r\n\r\n---\r\n\r\nWhile https://github.com/PowerShell/PowerShell/issues/17992 and https://github.com/PowerShell/PowerShell/issues/17991 show true problems (which may ultimately be resolved by #7999), I see only _by-design_ behavior here (to paraphrase  your explanation, @jhoneill):\r\n\r\n* `Get-ChildItem`'s first _positional_ argument binds to the wildcard-supporting `-Path` parameter.\r\n* To provide a _literal_ path (as implied by a `[System.IO.FileInfo]` instance), either use `-LiteralPath` explicitly or (as shown in the initial post), provide the `[System.IO.FileInfo]` instance _via the pipeline_, where it also binds to the `-LiteralPath` parameter (via the `.PSpath` property, thanks to `-PSPath` being a parameter alias).\r\n\r\n#18038 is actually unrelated, because it refers to the _native globbing_ feature for _external programs_, which is distinct from how providers handle wildcards.\r\n\r\n",
      "created_at": "2022-09-07T16:05:58Z",
      "updated_at": "2022-09-07T16:05:58Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@mklement0   yes 18038 is only another example of escaped wildcards not being processed correctly, there seems to be independent code in multiple places making similar errors, so a fix for 18038 wouldn't fix 17992 and vice versa. \r\n\r\nAs another example, on Windows ```dir | out-file -path 'files [Sept].txt'``` gives a \"file does not exist\", but ```dir | out-file -path 'files `[Sept`].txt'``` will create a file with ``` ` ``` in the name, I think this is another distinct bit of code.  \r\n\r\n",
      "created_at": "2022-09-07T18:35:33Z",
      "updated_at": "2022-09-07T18:35:33Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Your other example is the subject of:\r\n*  https://github.com/PowerShell/PowerShell/issues/9475",
      "created_at": "2022-09-08T05:06:55Z",
      "updated_at": "2022-09-08T05:06:55Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@mklement0  I brought this up at the cmdlet working group yesterday. Things are being looked at again, although we may get the same conclusion as before. The point you make in 9475 that `Set-Content` and `Out-File`  work differently _suggests_ \"cmdlet thing which is relatively easy to fix\", rather than \"provider minefield\"  \r\n\r\nYou've got the best list of related issues for this that I've see so far here \r\nhttps://github.com/PowerShell/PowerShell/issues/17106#issuecomment-1088755835 \r\n\r\nI want to make sure this points to that one :-)  \r\n",
      "created_at": "2022-09-08T08:14:07Z",
      "updated_at": "2022-09-08T10:08:21Z"
    }
  ],
  "created_at": "2022-08-30T14:21:31Z",
  "number": 17990,
  "state": "open",
  "title": "`ls` is not self-consistent",
  "updated_at": "2022-09-08T10:08:21Z"
}