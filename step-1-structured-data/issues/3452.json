{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3452",
  "author": "lzybkr",
  "body": "If a custom format wants to use ANSI escape sequences, it should be possible to skip the escape sequences when the target is a file instead of a tty.\r\n\r\nFor example, my [custom format for `MatchInfo`](https://gist.github.com/lzybkr/dcb973dccd54900b67783c48083c28f7) (the output of `Select-String`) uses ANSI escape sequences, but if I redirect output, e.g. `dir *.txt | Select-String foo > out.txt`, I probably don't want the escape sequences.\r\n\r\nWe should have a simple way (api, variable, whatever) that makes it easy to control this behavior.\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Do you really mean a file or just redirected (not a tty/console). IIRC, there is logic in the native command processor that computes whether the output is redirected or not. ",
      "created_at": "2017-03-29T20:43:56Z",
      "updated_at": "2017-03-29T20:43:56Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I think it depends,\r\n\r\nIf `tmux` or `screen` is using redirection, then you'd still like your escape sequences.\r\nBut if I run `powershell -file script.ps1 > out.txt`, then that's also simple redirection where you don't want escape sequences.\r\n\r\nThe bottom line here is that PowerShell should make it easy (if it isn't already) to support these scenarios in custom formatting, or alternatively strip (some limited) ANSI escape sequences automatically.",
      "created_at": "2017-03-29T21:01:17Z",
      "updated_at": "2017-03-29T21:01:17Z"
    },
    {
      "author": "parkovski",
      "author_association": "NONE",
      "body": "I've been struggling with this for a little while - I rewrote my `ls` alias to output similar to Linux's `ls -F --color`, but if I forget to write `gci` instead in a pipeline, all sorts of weird things happen.\r\n\r\nAt first I tried calling `GetFileType(GetStdHandle(STD_OUTPUT_HANDLE))` from an `Add-Type` block, but this doesn't work. It seems that PowerShell code in a pipeline doesn't change the actual stdout handle and I can't see anything that exposes the redirection to the script.\r\n\r\nWhen calling native code though, it does replace the handles as you'd expect, so I wrote a small C++ program, which seems to be the only way to tell if a stream is redirected or it's part of a pipeline.\r\n\r\nSince calling a native program does what you'd expect, I can't imagine it'd be too hard to add something like `$MyInvocation.Is<Input|Output|Error>Redirected`.",
      "created_at": "2021-09-24T04:24:02Z",
      "updated_at": "2021-09-24T04:24:02Z"
    }
  ],
  "created_at": "2017-03-29T19:39:32Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets-Utility",
    "WG-Engine-Format"
  ],
  "number": 3452,
  "state": "open",
  "title": "Need a way to detect output goes to a file instead of the console",
  "updated_at": "2021-09-24T05:34:07Z"
}