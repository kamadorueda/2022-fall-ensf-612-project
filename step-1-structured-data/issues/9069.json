{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9069",
  "author": "vexx32",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nWrite-Output's `InputObject` parameter was typed as `PSObject[]`. This was forcing **all** collections to be enumerated during parameter binding, making `-NoEnumerate` essentially useless; use of the switch would result in a `PSObject[]`-typed output collection instead of the usual `object[]`, but it was completely impossible to retain the original collection(s) via the switch.\r\n\r\nFixes #5955, a long-standing regression from Windows PowerShell.\r\n\r\nAdds regression test.\r\n\r\n~~As I was digging through the underlying code before I came upon the true cause, I also came across a pair of methods with names that are just _asking_ for misinterpretation. I renamed one of the pairs, the pair with only one reference each. As they are private methods, I doubt this will affect anything much, but it should make maintaining those code paths less confusing going forward.~~ Moved to #9074.\r\n\r\n## PR Context\r\n\r\nSee issue #5955 for context.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [ ] [Add `[feature]` to your commit messages if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2019-03-13T08:54:13Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Reverted the commit. I'll ignore the CodeFactor items for MshCommandRuntime.cs -- most of them look to be the usual Hungarian notation ones that we plan to ignore going forward anyway. \ud83d\ude04 \r\n\r\nMoved that change to #9074.",
      "created_at": "2019-03-06T14:16:08Z",
      "updated_at": "2019-03-06T14:24:40Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this.  We agree that we should fix this to get back to the Windows PowerShell behavior which is the correct behavior.",
      "created_at": "2019-03-06T23:21:49Z",
      "updated_at": "2019-03-06T23:21:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 Please open new issue in Docs repo if needed.",
      "created_at": "2019-03-07T03:36:00Z",
      "updated_at": "2019-03-07T03:36:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 Could you please look the PR before we merge?",
      "created_at": "2019-03-08T03:33:22Z",
      "updated_at": "2019-03-08T03:33:22Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The parameter type of `InputObject` for `Write-Output` is `psobject[]` on Windows PowerShell,\r\n```\r\nPS:2> Get-Command Write-Output -Syntax\r\n\r\nWrite-Output [-InputObject] <psobject[]> [-NoEnumerate] [<CommonParameters>]\r\n```\r\nand it behaves as expected:\r\n```\r\nPS:3> (Write-Output -NoEnumerate 1, 2).GetType().Name\r\nObject[]\r\nPS:4> (Write-Output -NoEnumerate ([System.Collections.ArrayList] (1, 2))).GetType().Name\r\nArrayList\r\n```\r\nSo I wonder what is the actual change that breaks it on PowerShell Core ...",
      "created_at": "2019-03-08T03:41:55Z",
      "updated_at": "2019-03-08T03:42:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> So I wonder what is the actual change that breaks it on PowerShell Core \u2026\r\n\r\nPerhaps https://github.com/PowerShell/PowerShell/issues/2035",
      "created_at": "2019-03-08T04:09:54Z",
      "updated_at": "2019-03-08T04:09:54Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Yeah, I can see where that's confusing... And knowing what PSObject is for more than I used to, I think it makes more sense behaving as it currently does... but I am _very_ sure that sentiment wouldn't necessarily be shared by most PowerShell users.",
      "created_at": "2019-03-08T17:17:26Z",
      "updated_at": "2019-03-08T17:17:26Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Yes, the regression was caused by #2038. See another related issue: #5122\r\nUnfortunately, due to #2038, `Write-Output` still doesn't behave exactly the same as on Windows PowerShell even with this PR:\r\n\r\n```\r\n# on windows powershell\r\n(Write-Output -NoEnumerate 1).GetType().FullName\r\n> System.Int32\r\n```\r\n```\r\n# on powershell core with this PR\r\n(Write-Output -NoEnumerate 1).GetType().FullName\r\n> System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]\r\n```",
      "created_at": "2019-03-08T21:43:15Z",
      "updated_at": "2019-03-08T22:31:36Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw I shall do some digging to see where that occurs and what can be done about it. ",
      "created_at": "2019-03-08T21:47:52Z",
      "updated_at": "2019-03-08T21:48:01Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@vexx32 After #2038, the remaining argument are handled in a similar way as `params` in C#:\r\nif the remaining argument is a collection, then use that collection directly, otherwise, wrap the argument(s) to a `List<object>`.\r\nI double there is anything we can do in `Write-Output` to make it behave the same as in Windows PowerShell in those particular cases :(",
      "created_at": "2019-03-08T22:46:01Z",
      "updated_at": "2019-03-08T22:46:28Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Hmm. I guess that makes some sense.\r\n\r\nIt does seem rather unlikely that folks would _deliberately_ use -NoEnumerate and then _not_ expect a collection to be the result. :thinking:",
      "created_at": "2019-03-08T22:50:36Z",
      "updated_at": "2019-03-08T22:50:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Make alternative internal attribute?",
      "created_at": "2019-03-09T04:31:46Z",
      "updated_at": "2019-03-12T05:17:19Z"
    },
    {
      "author": "PrzemyslawKlys",
      "author_association": "NONE",
      "body": "Maybe instead of fixing Write-Output -NoEnumerate (which would be nice of course) behavior for  [OutputType()] could be changed to keep output type untouched if it's defined. Right now even without  [OutputType()] defined you still get unwrap for a single object. ",
      "created_at": "2019-03-11T08:39:52Z",
      "updated_at": "2019-03-11T08:39:52Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Not sure I follow what you mean there. That attribute generally is metadata and more of a documentation attribute that anything else. As far as I know, it has no effect during execution.\r\n\r\nNor do I really see how it would help with this current situation, where -NoEnumerate is simply broken?",
      "created_at": "2019-03-11T10:06:24Z",
      "updated_at": "2019-03-11T10:07:27Z"
    },
    {
      "author": "PrzemyslawKlys",
      "author_association": "NONE",
      "body": "I see. Well, I thought that it's more than metadata. And the only reason I would use NoEnumerate is to preserve Array on function return. If it has other uses, that's cool too. \r\n\r\nWhat I mean is, if that change wouldn't go thru because of other reasons I would still want some other way to have that feature. If it goes thru, that's great. ",
      "created_at": "2019-03-11T10:24:35Z",
      "updated_at": "2019-03-11T10:24:35Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Gotcha. Yeah, that might work on a surface level. Unfortunately it would probably mean enumerating the collection twice (once in the parameter binder -> PSObject[], and once before output -> OutputType) which is a bit much imo.\r\n\r\nIt would also not be retaining the original collection, so if it originally had NoteProperty or other ETS members, they would be stripped. In the few cases where -NoEnumerate are needed, this might be one motivation for using it.",
      "created_at": "2019-03-11T10:48:35Z",
      "updated_at": "2019-03-11T10:48:35Z"
    }
  ],
  "created_at": "2019-03-06T06:18:56Z",
  "number": 9069,
  "state": "closed",
  "title": "Fix -NoEnumerate behaviour in Write-Output",
  "updated_at": "2020-06-13T22:09:05Z"
}