{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11887",
  "author": "MaximoTrinidad",
  "body": "# Summary of the new feature/enhancement\r\n\r\n<!-- \r\nA clear and concise description of what the problem is that the new feature would solve.\r\nTry formulating it in user story style (if applicable):\r\n'As a user I want X so that Y.' with X being the being the action and Y being the value of the action.\r\n-->\r\n\r\nJust a feature request to allow the cmdlet Get-PSdrive to also list existing mapped network drive(s).\r\nIn the scenario where I'm using trying to assign a letter in New-PSDrive and I want to make sure is available without opening the file explorer. SO, I'm eliminating an extra step to find out if the it already exist. \r\n\r\nIt would be nice!\r\n\r\n![PS7_MappedDrive_2020-02-19_11-52-18](https://user-images.githubusercontent.com/19892435/74856095-8dfcef00-530f-11ea-8398-ba1bedd8a875.png)\r\n\r\n\r\n\r\n\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\n<!-- \r\nA clear and concise description of what you want to happen.\r\nConsider providing an example PowerShell experience with expected result.\r\n-->\r\n",
  "closed_at": "2020-02-19T21:44:14Z",
  "comments": [
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "I am not quite sure - but this seems to work here. If I create a new mapped drive, like this\r\n```powershell\r\nnet use z: \\\\cookham24\\d$\\builds\r\n```\r\nand then look ag *Get-PSDrive*, I see the drive fine. See here\r\n![2020-02-19_18-04-30](https://user-images.githubusercontent.com/3630329/74861658-a3d7d780-5342-11ea-8198-e11cdd65ca3d.png)\r\n\r\nOr am I misunderstanding your use case?",
      "created_at": "2020-02-19T18:08:03Z",
      "updated_at": "2020-02-19T18:08:03Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@doctordns \r\n\r\nTry to first manually create map a network drive using the \"File Explorer\", not PowerShell, not using \"net use ...\". At the same time, I'm trying to access my existing Z: drive from within PowerShell session, but it's not possible.\r\n\r\nThe Get-PSDrive cmdlet won't display already existing mapped drives.\r\n\r\nThat's what I'm trying to show in the screenshot.  \r\n\r\n:) \r\n\r\n\r\n",
      "created_at": "2020-02-19T18:25:34Z",
      "updated_at": "2020-02-19T18:25:34Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@MaximoTrinidad,  you're seeing an _OS_ limitation, not one of PowerShell.\r\n\r\n`Get-PSDrive` _does_ list the mapped drives that the current user sees.\r\n\r\nHowever, the same account running _as administrator_ (elevated, as your screen shot suggests) does _not_ see the same mappings as its non-elevated incarnation.\r\n\r\nEssentially, non-elevated and elevated processes started by a given user account behave like different accounts with respect to `net use` / File Explorer drive mappings: neither sees the other's, and they must be managed independently.\r\n\r\nThe only (simple) way to make a drive show up in both contexts is to define it via `$PROFILE`.\r\n\r\n\r\n\r\n",
      "created_at": "2020-02-19T18:32:44Z",
      "updated_at": "2020-02-19T21:06:21Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Ah! That's the reason I created this feature request.\r\n\r\nMany companies possibly will have mapped some network drives during the login process.  So, why should I map again the drives in PowerShell?\r\n\r\nOf course, knowing this limitation makes you creative.  Right! \r\n\r\nI think it would be a nice feature to have if it's possible!\r\n:)\r\n",
      "created_at": "2020-02-19T18:55:27Z",
      "updated_at": "2020-02-19T18:55:27Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I agree that the behavior is surprising and inconvenient, but I don't think it's PowerShell's job to change it (which couldn't be done safely / predictably, given that this separation has always existed and users may have adjusted by explicitly managing separate mappings for elevated processes).\r\n\r\nYour best bet is to put `net use` statements into your `$PROFILE`.\r\n\r\n",
      "created_at": "2020-02-19T21:09:21Z",
      "updated_at": "2020-02-19T21:09:21Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@mklement0 \r\n\r\nI understand! We can always change the way to map drives at login time.\r\n:)\r\n",
      "created_at": "2020-02-19T21:25:09Z",
      "updated_at": "2020-02-19T21:25:09Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "If the drives are mapped under a different account (and elevated vs non-elevated is considered different), then the OS prevents the other user context from seeing it (you can verify this with `net use` to show the mapped drives).  There isn't anything PowerShell can do differently here.",
      "created_at": "2020-02-19T21:44:14Z",
      "updated_at": "2020-02-19T21:44:14Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@MaximoTrinidad: https://github.com/gerardog/gsudo (a `sudo` implementation for Windows) has a `--copyns` switch that tries to recreate the drive mappings in an elevated session.\n\n<blockquote><img src=\"https://avatars2.githubusercontent.com/u/3901474?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/gerardog/gsudo\">gerardog/gsudo</a></strong></div><div>A Sudo for Windows - run elevated without spanning a new Console Host Window - gerardog/gsudo</div></blockquote>",
      "created_at": "2020-02-27T21:40:00Z",
      "updated_at": "2020-02-27T21:40:02Z"
    }
  ],
  "created_at": "2020-02-19T17:01:46Z",
  "number": 11887,
  "state": "closed",
  "title": "PowerShell 7 to allow displayed existing mapped drives",
  "updated_at": "2020-02-27T21:40:02Z"
}