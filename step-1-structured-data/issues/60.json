{
  "_url": "https://github.com/PowerShell/PowerShell/issues/60",
  "author": "andschwa",
  "body": "Talk to PowerShell team on how to enable trace logs the correct way, maybe this is just some configuration option or cmdlet that needs to be called.  Fixing correctly   Pull in https   www.nuget.org packages System.Diagnostics.TraceSource 4.0.0 beta 23409 as our build does not contain the correct references.  Usage  `set psdebug  trace 2`  https   technet.microsoft.com library 2517a4da 2468 4148 aca3 50a6d7df4a10 v=wps.630 .aspx  This really doesn't need to be added to  Main  or anything, just use the cmdlet.  This is how we added traces so far   how to hack enable tracing    in the PSTraceSource ctor set flags to PSTraceSourceOptions.All   add WriteLine  diff   git a monad src utils StructuredTraceSource.cs b monad src utils StructuredTraceSource.cs index c81b8af2d..5778ad132 100644     a monad src utils StructuredTraceSource.cs     b monad src utils StructuredTraceSource.cs @@  326,6  326,7 @@ namespace System.Management.Automation                  flags = PSTraceSourceOptions.None;                 #endif              flags = PSTraceSourceOptions.All;^M              #if !CORECLR    System.AppDomain is not in ProjectK. @@  1009,7  1010,7 @@ namespace System.Management.Automation                      finally trace the output                   OutputLine flag, output.ToString   ;                  Console.WriteLine output.ToString   ;^M                             catch                 VSO create date - 6/15/2015 9:51:00     VSO closed date - 10/21/2015 19:16:00     \n",
  "closed_at": "2016-01-22T20:38:14Z",
  "comments": [],
  "created_at": "2016-01-22T20:38:14Z",
  "labels": [],
  "number": 60,
  "state": "closed",
  "title": "Add command line option to Main to enable trace logging, add trace logging",
  "updated_at": "2016-01-22T20:38:14Z"
}