{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9614",
  "author": "KirkMunro",
  "body": "# PR Summary\r\n\r\nContinuing the work that was started in PR #8938, this PR adds more implicit line continuance support to simplify scripting while further reducing the need for explicit line continuance using backtick. With these changes in place, users can span commands across multiple lines as long as the subsequent lines begin with named parameters or splatted collections.\r\n\r\n## Breaking Change Details\r\n\r\nIt is marked as experimental at the moment because it introduces a breaking change and there wasn't a better way to make it optional at this time. Before these changes, users could invoke a command whose name begins with a dash (`-`), or a named unary operator in a statement, even on a line immediately following another command.\r\n\r\nFor example, here is what can be done before these changes:\r\n\r\n```PowerShell\r\nfunction -minus {\r\n   'The -minus command was invoked.'\r\n}\r\nGet-Process -Id $PID\r\n-minus # Invokes the -minus command\r\n\r\nGet-Process -Id $PID\r\n-split 'a b c d'\r\n```\r\n\r\nWith this PR in place, and with the experimental feature enabled, here is what happens instead:\r\n\r\n```PowerShell\r\nfunction -minus {\r\n   'The -minus command was invoked.'\r\n}\r\nGet-Process -Id $PID\r\n-minus # Identifies the '-minus' text as a named parameter for Get-Process (implicit line continuance)\r\n& -minus # Invokes the -minus command using the required workaround\r\n\r\n-minus # The workaround isn't necessary when you don't have a command on the contiguous, non-whitespace lines before this command\r\n\r\nGet-Process -Id $PID\r\n-split 'a b c d' # Identifies the '-split' text as a named parameter for Get-Process (implicit line continuance)\r\n\r\n-split 'a b c d' # You can invoke named unary operators after commands by ensuring the parser recognizes them as new statements (which is done by placing a blank line before them)\r\n```\r\n\r\nWhile command names beginning with dash are virtually non-existent, to the point where I don't know if any exist in Windows or Linux (searches seem to indicate that dashes as the first character are problematic when it comes to file names on Linux, so maybe that's why), named unary operators are part of PowerShell and are used frequently. With that in mind, I've opened an [RFC for discussion](https://github.com/PowerShell/PowerShell-RFC/pull/176) on possibilities because I believe this feature adds significant value that is worth considering, even if it remains only optional.\r\n\r\n## PR Context\r\n\r\nThis PR helps because PowerShell has many long commands (especially since some command names are over 60 characters long!), with many, many parameters, and users often want to span those commands across multiple lines in their scripts, but the only way to do that in PS 6.x and earlier is to use backtick or splatting. Neither of those should be necessary. Splatting has a purpose (passing in a common set of parameters to multiple commands), but splatting should not be the solution to more intelligent line wrapping within scripts. Instead, PowerShell can simply identify implicit line continuance automatically by looking at the subsequent lines to determine if they start with a named parameter or a splatted collection, and if so, tread them as part of the same command.\r\n\r\n## PR Checklist\r\n\r\n- [X] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [X] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [ ] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [X] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [X] Issue filed: [#4303](https://github.com/MicrosoftDocs/PowerShell-Docs/issues/4303)\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [X] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Experimental**\r\n    - [X] The use of and testing of this feature requires enabling the following experimental features: `PSImplicitLineContinuanceForNamedParameters`\r\n",
  "closed_at": "2019-05-23T11:58:44Z",
  "comments": [
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "I must be missing something - but the text:\r\n```powershell\r\nfunction '-minus' {\r\n   'The -minus command was invoked.'\r\n}\r\n```\r\nGenerates an error:\r\n```yaml\r\nPS [C:\\foo> ]> function '-minus' {\r\n>>    'The -minus command was invoked.'\r\n>> }\r\nAt line:1 char:9\r\n+ function '-minus' {\r\n+         ~\r\nMissing name after function keyword.\r\nAt line:1 char:19\r\n+ function '-minus' {\r\n+                   ~\r\nUnexpected token '{' in expression or statement.\r\n+ CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException\r\n+ FullyQualifiedErrorId : MissingNameAfterKeyword\r\n\r\n```\r\n",
      "created_at": "2019-05-16T10:09:29Z",
      "updated_at": "2019-05-16T10:09:29Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Sorry @doctordns, that was my mistake. I typed in those sample scripts since they were short, rather than copy/paste them, and in doing so I made a mistake wrapping the function name in quotes. This has been corrected in my original post.",
      "created_at": "2019-05-16T12:46:44Z",
      "updated_at": "2019-05-16T12:46:44Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@KirkMunro Could you write an RFC where users that try the feature can give feedback?  ",
      "created_at": "2019-05-16T22:04:53Z",
      "updated_at": "2019-05-16T22:04:53Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13: [RFC](https://github.com/PowerShell/PowerShell-RFC/pull/176). Also, I added the link to the RFC PR in the description to increase visibility.",
      "created_at": "2019-05-17T01:55:21Z",
      "updated_at": "2019-05-17T16:18:59Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Pulling back on this PR for now as the RFC has changed significantly. The [new proposal](https://github.com/PowerShell/PowerShell-RFC/pull/179) has eliminated any breaking changes. I'll be experimenting with the logic separately to confirm it's not very complex to do and let me try it out in a number of scenarios.",
      "created_at": "2019-05-23T11:58:43Z",
      "updated_at": "2019-05-23T11:58:43Z"
    }
  ],
  "created_at": "2019-05-16T00:56:30Z",
  "number": 9614,
  "state": "closed",
  "title": "Add implicit line continuance for named parameters and splatted collections (experimental feature)",
  "updated_at": "2019-07-29T21:13:32Z"
}