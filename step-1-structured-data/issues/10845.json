{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10845",
  "author": "corbob",
  "body": "# Steps to reproduce\r\n\r\n```powershell\r\nGet-Module PSReadLine\r\n# Note output includes a PreRelease property\r\nGet-Module PSReadLine | select *\r\n# Note output does not include a PreRelease property\r\n```\r\n\r\n# Expected behavior\r\n\r\n(note: I removed the majority of properties to focus on the missing property PreRelease)\r\n\r\n```none\r\nC:\\Users\\corbob> get-module psreadline\r\n\r\nModuleType Version    PreRelease Name                                ExportedCommands\r\n---------- -------    ---------- ----                                ----------------\r\nScript     2.0.0      beta5      PSReadLine                          {Get-PSReadLineKeyHandler, Get-PSReadLineOption, Remove-PSReadLineKeyHandler, Set-PSReadLineKeyHandler\u2026}\r\n\r\nC:\\Users\\corbob> get-module psreadline | select *\r\n\r\nLogPipelineExecutionDetails : False\r\nName                        : PSReadLine\r\nPath                        : C:\\program files\\powershell\\7-preview\\Modules\\PSReadLine\\PSReadLine.psm1\r\n# a bunch of properties removed for brevity\r\nVersion                     : 2.0.0\r\nPreRelease                : beta5\r\n```\r\n\r\n# Actual behavior\r\n\r\n(note: the only thing I removed from this output was the signature block because it was just a wall of text that adds nothing in this context)\r\n\r\n```none\r\nC:\\Users\\corbob> get-module psreadline\r\n\r\nModuleType Version    PreRelease Name                                ExportedCommands\r\n---------- -------    ---------- ----                                ----------------\r\nScript     2.0.0      beta5      PSReadLine                          {Get-PSReadLineKeyHandler, Get-PSReadLineOption, Remove-PSReadLineKeyHandler, Set-PSReadLineKeyHandler\u2026}\r\n\r\nC:\\Users\\corbob> get-module psreadline | select *\r\n\r\nLogPipelineExecutionDetails : False\r\nName                        : PSReadLine\r\nPath                        : C:\\program files\\powershell\\7-preview\\Modules\\PSReadLine\\PSReadLine.psm1\r\nImplementingAssembly        :\r\nDefinition                  : function PSConsoleHostReadLine\r\n                              {\r\n                                  Microsoft.PowerShell.Core\\Set-StrictMode -Off\r\n                                  [Microsoft.PowerShell.PSConsoleReadLine]::ReadLine($host.Runspace, $ExecutionContext)\r\n                              }\r\n\r\n\r\n                              # SIG # Begin signature block\r\n                              # Signature block removed for brevity\r\n\r\nDescription                 : Great command line editing in the PowerShell console host\r\nGuid                        : 5714753b-2afd-4492-a5fd-01d9e2cff8b5\r\nHelpInfoUri                 : https://go.microsoft.com/fwlink/?LinkId=528806\r\nModuleBase                  : C:\\program files\\powershell\\7-preview\\Modules\\PSReadLine\r\nPrivateData                 : {PSData}\r\nExperimentalFeatures        : {}\r\nTags                        : {}\r\nProjectUri                  :\r\nIconUri                     :\r\nLicenseUri                  :\r\nReleaseNotes                :\r\nRepositorySourceLocation    :\r\nVersion                     : 2.0.0\r\nModuleType                  : Script\r\nAuthor                      : Microsoft Corporation\r\nAccessMode                  : ReadWrite\r\nClrVersion                  : 4.0.0\r\nCompanyName                 : Microsoft Corporation\r\nCopyright                   : (c) Microsoft Corporation. All rights reserved.\r\nDotNetFrameworkVersion      : 4.6.1\r\nExportedFunctions           : {[PSConsoleHostReadLine, PSConsoleHostReadLine]}\r\nPrefix                      :\r\nExportedCmdlets             : {[Get-PSReadLineKeyHandler, Get-PSReadLineKeyHandler], [Get-PSReadLineOption, Get-PSReadLineOption], [Remove-PSReadLineKeyHandler, Remove-PSReadLineKeyHandler], [Set-PSReadLineKeyHandler,\r\n                              Set-PSReadLineKeyHandler]\u2026}\r\nExportedCommands            : {[Get-PSReadLineKeyHandler, Get-PSReadLineKeyHandler], [Get-PSReadLineOption, Get-PSReadLineOption], [Remove-PSReadLineKeyHandler, Remove-PSReadLineKeyHandler], [Set-PSReadLineKeyHandler,\r\n                              Set-PSReadLineKeyHandler]\u2026}\r\nFileList                    : {}\r\nCompatiblePSEditions        : {}\r\nModuleList                  : {}\r\nNestedModules               : {Microsoft.PowerShell.PSReadLine2}\r\nPowerShellHostName          :\r\nPowerShellHostVersion       :\r\nPowerShellVersion           : 5.0\r\nProcessorArchitecture       : None\r\nScripts                     : {}\r\nRequiredAssemblies          : {}\r\nRequiredModules             : {}\r\nRootModule                  : PSReadLine.psm1\r\nExportedVariables           : {}\r\nExportedAliases             : {}\r\nExportedDscResources        : {}\r\nSessionState                : System.Management.Automation.SessionState\r\nOnRemove                    :\r\nExportedFormatFiles         : {C:\\program files\\powershell\\7-preview\\Modules\\PSReadLine\\PSReadLine.format.ps1xml}\r\nExportedTypeFiles           : {}\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-preview.4\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-preview.4\r\nOS                             Microsoft Windows 10.0.19002\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2019-10-22T12:00:35Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "It looks like the formatter is pulling the prerelease information from `PrivateData.PSData.Prerelease`\r\n\r\nWe could potentially have this information added as an ETS property for any modules that have prerelease version information, so that it's not a property seemingly coming from thin air on the objects being output.",
      "created_at": "2019-10-19T19:32:07Z",
      "updated_at": "2019-10-19T19:32:07Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@vexx32 is correct, the table format presents what is a nested property.  Since the data is there in the object (just nested several levels deep), I don't know if we want to replicate it with ETS.  The intent with the table format is to easily see what prerelease you are using and expect automation to use the existing nested member.",
      "created_at": "2019-10-20T00:29:25Z",
      "updated_at": "2019-10-20T00:29:25Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That's assuming you know the nested member is there at all. Is `PrivateData`'s structure enforced at all? I've seen a fair few odd things squirreled away there, and it's just a hashtable really, so unless you already know where it is (i.e., it's well-documented in an appropriate place), I don't think we should expect users to know exactly where to find prerelease data.\r\n\r\nOf course, this would  be a non-issue if module manifests just supported SemVer properly, but we've had the SemVer talk pretty recently - #2983 was recently resurfaced and we're still waiting on the CoreFX team to get that sorted, really.\r\n\r\nAlso, I tend to dislike the formatter showing properties that \"aren't really there\" or are buried several levels deep, unless it's just rendering the data that _is_ there in a way that is really only useful for formatting. If we're showing it off, it should be reasonably readily accessible, not 3 levels deep -- in my opinion. \ud83d\ude42 ",
      "created_at": "2019-10-20T00:39:09Z",
      "updated_at": "2019-10-20T00:39:09Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "`PrivateData` exists specifically because the structure is not enforced.  Currently, psd1 files are strictly validated with the exception of `PrivateData`.  This enables backwards compatibility.  I think we should seriously consider making psd1 loosely validated so we can add actual new members without worry about breaking compat.  However, that also means that it only works with that version going forward (modules authors may not like limiting their audience so adoption of such a thing would be low until most users move to that version of PS).\r\n\r\nThere are already many cases where formatting shows \"phantom properties\" or renames properties to make them better viewed on the console, but the actual property name is something else.  One thing we could do is have some formatting to make those members more obvious that they aren't actually part of the object.",
      "created_at": "2019-10-20T05:54:14Z",
      "updated_at": "2019-10-20T05:54:14Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2019-10-22T12:00:33Z",
      "updated_at": "2019-10-22T12:00:33Z"
    }
  ],
  "created_at": "2019-10-19T19:27:33Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 10845,
  "state": "closed",
  "title": "(PowerShell 7) Get-Module exposes PreRelease without exposing PreRelease",
  "updated_at": "2019-10-22T12:00:35Z"
}