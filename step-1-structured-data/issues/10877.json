{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10877",
  "author": "nightroman",
  "body": "https://github.com/PowerShell/PowerShell/pull/10641 - The new error formatting is nice but it might have some disadvantages, too.\r\n\r\n**Demo script**\r\n\r\n```powershell\r\nfunction Test-Error {\r\n    Write-Error @'\r\nOops, error! Details:\r\n- Somewhat long details line 1, and more somewhat long details line 1.\r\n- Somewhat long details line 2, and more somewhat long details line 2.\r\n'@\r\n}\r\n\r\nTest-Error\r\n```\r\n\r\n**NormalView error formatting** (good old but with some \"noise\"):\r\n\r\n```\r\nTest-Error : Oops, error! Details:\r\n- Somewhat long details line 1, and more somewhat long details line 1.\r\n- Somewhat long details line 2, and more somewhat long details line 2.\r\nAt C:\\ROM\\z\\_191023_233922_ps_ErrorView\\bad-error.ps1:11 char:1\r\n+ Test-Error\r\n+ ~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\r\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Test-Error\r\n```\r\n\r\n**ConciseView error formatting** (nice and shiny but with issues):\r\n\r\n```\r\nTest-Error: C:\\ROM\\z\\_191023_233922_ps_ErrorView\\bad-error.ps1\r\nLine |\r\n  11 | Test-Error\r\n     | ^ Oops, error! Details: - Somewhat long details line 1, and more somewhat long details line 1. - Somewhat long details line 2, and more somewhat long\r\n     | details line 2.\r\n```\r\n\r\n**Some issues**\r\n\r\n1. The file path and line number are in different places. Even for a human it requires\r\n   some effort to connect them together in order to go to the problem location.\r\n   But it is also the challenge for various error parsers in text editors, log\r\n   parsers, etc. VSCode, for example, understands \"standard link\" patterns as\r\n   `<path>(<line>)`, `<path>:<line> [char:<column>]`. Is it going to work well\r\n   with the new ConciseView formatting?\r\n1. Column number is missing. The caret position is shown in a different way,\r\n   this is somewhat fine for humans but programs (VSCode and others) will\r\n   have difficulties with getting this info.\r\n1. Line formatting of error messages is not respected. Yes, in most cases error\r\n   messages are one liners. But lengthy errors with some detailed multiline\r\n   descriptions are not rare, too. Preserving the original formatting of such\r\n   messages would be useful, they were composed in such a way for reasons.\r\n1. When the error caret position is more to the right, the error message first\r\n   line is more indented and gets even more difficult to read for long messages.\r\n   Copying the error messages is also difficult with such extra indentation.\r\n\r\n**Suggestion**\r\n\r\nFor ConciseView, why not just strip some \"noise\", i.e. CategoryInfo and\r\nFullyQualifiedErrorId lines and keep the rest just like in NormalView?\r\nExample:\r\n\r\n```\r\nTest-Error : Oops, error! Details:\r\n- Somewhat long details line 1, and more somewhat long details line 1.\r\n- Somewhat long details line 2, and more somewhat long details line 2.\r\nAt C:\\ROM\\z\\_191023_233922_ps_ErrorView\\bad-error.ps1:11 char:1\r\n+ Test-Error\r\n+ ~~~~~~~~~~\r\n```\r\n\r\nAll the above issues are resolved (or at least negative effects reduced).\r\n",
  "closed_at": "2019-12-18T22:05:57Z",
  "comments": [
    {
      "author": "theJasonHelmick",
      "author_association": "CONTRIBUTOR",
      "body": "Thank you for the feedback! In regards to line and column - the positional information is still contained in the error object itself so non-humans should still be able to read that.  You should notice it if you use the new cmdlet Get-Error or with $error[0].  ",
      "created_at": "2019-10-28T20:35:08Z",
      "updated_at": "2019-10-28T20:35:08Z"
    },
    {
      "author": "nightroman",
      "author_association": "NONE",
      "body": "I believe in many scenarios tools and apps like VSCode just parse the output *text*, not the actual error instances. To rephrase, did you or somebody else tried this update in VSCode? If a new format error is written to the output, can you click there in order to jump to the source file error line and column?",
      "created_at": "2019-10-28T21:23:23Z",
      "updated_at": "2019-10-28T21:23:53Z"
    },
    {
      "author": "Halkcyon",
      "author_association": "NONE",
      "body": "@nightroman If you're referring to the vscode extension, they use powershell's shell as a server to process commands so the error object is still intact.  Next month, they'll be moving to a omnisharp-based server with PS7 GA which should address performance issues seen there.",
      "created_at": "2019-12-17T20:42:50Z",
      "updated_at": "2019-12-17T20:42:50Z"
    },
    {
      "author": "nightroman",
      "author_association": "NONE",
      "body": "@TheIncorrigible1 This is good. And yet, have you tried, does it work well? I have not, I just think it might not work.\r\n\r\nIn other words, can you click in the output where the error is just **printed** so that VSCode jumps to the source code where the error is?",
      "created_at": "2019-12-17T21:08:53Z",
      "updated_at": "2019-12-17T21:08:53Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@nightroman there's an existing issue to debate what to do with long error messages: https://github.com/PowerShell/PowerShell/issues/10760\r\n\r\nFor VSCode where the terminal supports linking to the location, the NormalView format doesn't work completely.  `file:line` is understood by the VSCode terminal, but not `file:line char:num`.  Looking at the output of dotnetcli, this format works: `file(line,char)` but is less obvious to a person what it means, but does link correctly.  Here's an example:\r\n\r\n```powershell\r\nPS> /Users/steve/test/multierror.ps1\r\nBegin\r\nGet-ChildItem: /Users/steve/test/multierror.ps1(3,1)\r\nLine |\r\n   3 | Get-Childitem -Path .\\nothere\r\n     | ^ Cannot find path '/Users/steve/repos/PowerShell/nothere' because it does not exist.\r\n\r\nSelct-object: /Users/steve/test/multierror.ps1(5,15)\r\nLine |\r\n   5 | Get-Process | Selct-object -property Nohere\r\n     |               ^ The term 'Selct-object' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n\r\nInvoke-Command: /Users/steve/test/multierror.ps1(7,1)\r\nLine |\r\n   7 | Invoke-Command -HostName nothere\r\n     | ^ Parameter set cannot be resolved using the specified named parameters. One or more parameters issued cannot be used together or an insufficient number of parameters were provided.\r\n\r\nGet-Item: /Users/steve/test/multierror.ps1(9,1)\r\nLine |\r\n   9 | Get-Item -Path .\\stuff\r\n     | ^ Cannot find path '/Users/steve/repos/PowerShell/stuff' because it does not exist.\r\n\r\nGet-Item: /Users/steve/test/multierror.ps1(11,10)\r\nLine |\r\n  11 | get-item -invalid foo\r\n     |          ^ A parameter cannot be found that matches parameter name 'invalid'.\r\n\r\nDone\r\n```\r\n",
      "created_at": "2019-12-17T21:57:16Z",
      "updated_at": "2019-12-17T21:57:16Z"
    },
    {
      "author": "nightroman",
      "author_association": "NONE",
      "body": "For VSCode the NormalView format works at least partially (file:line), right out of the box. And it may perhaps fine tuned via VSCode settings (some one-liner regex pattern?).\r\n\r\nAs for the ConciseView, in its current form, VSCode probably does not work at all. And it is very tricky to tune it even using settings (multi-line regex patterns? is it even supported?).\r\n\r\nAlso, it's not just about VSCode. There are other editors, IDEs (I am working on one of them), log file processing apps, etc. Ideally, errors should contain at least `<file>` and `<line>` at the same line, in one of \"well known\" formats. Of course `<column>` is useful, too. The ConciseView does not fit at all.\r\n",
      "created_at": "2019-12-18T00:01:09Z",
      "updated_at": "2019-12-18T00:49:05Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Adding the line as in `file:line` is simple and, I believe, doesn't make the text less human-readable.  I was simply asserting that trying to add the column with parenthesis syntax will probably make it confusing to most users.",
      "created_at": "2019-12-18T04:37:58Z",
      "updated_at": "2019-12-18T04:37:58Z"
    },
    {
      "author": "nightroman",
      "author_association": "NONE",
      "body": "@SteveL-MSFT I believe (and have tried), VSCode understands `file:line:column`, too. Will it be confusing if supported?\r\n\r\nBut if at least the line is added, it's already much better usability.",
      "created_at": "2019-12-18T05:26:31Z",
      "updated_at": "2019-12-18T05:26:31Z"
    },
    {
      "author": "nightroman",
      "author_association": "NONE",
      "body": "I think this would be ideal for ConciseView but it's just me :)\r\n```\r\nTest-Error : Oops, error! Details:\r\n- Somewhat long details line 1, and more somewhat long details line 1.\r\n- Somewhat long details line 2, and more somewhat long details line 2.\r\nAt C:\\ROM\\z\\_191023_233922_ps_ErrorView\\bad-error.ps1:11:1\r\n+ Test-Error\r\n+ ~~~~~~~~~~\r\n```\r\n\r\nIt is less shiny perhaps and less \"innovative\" but it is concise and practical, see my arguments in the first post.",
      "created_at": "2019-12-18T05:30:47Z",
      "updated_at": "2019-12-18T05:34:03Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "file:line:column does work, but I don't think it's easily understandable by users and most users will see the error in a terminal they can't click.  However, one option (and I don't like to hardcode for a specific term) is to detect we are using vscode and emit the column information since we know it's clickable.\r\n\r\nNote that you can always implement a new errorview and if the community likes it we can include it with PS7.x.",
      "created_at": "2019-12-18T05:58:55Z",
      "updated_at": "2019-12-18T06:31:34Z"
    },
    {
      "author": "nightroman",
      "author_association": "NONE",
      "body": "@SteveL-MSFT Thank you for listening and taking actions.\r\n",
      "created_at": "2019-12-18T10:32:25Z",
      "updated_at": "2019-12-18T10:32:25Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #11391, which has now been successfully released as `v7.0.0-rc.2`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-rc.2)\n",
      "created_at": "2020-01-16T23:38:02Z",
      "updated_at": "2020-01-16T23:38:02Z"
    }
  ],
  "created_at": "2019-10-24T02:26:41Z",
  "labels": [
    "Issue-Enhancement",
    "Resolution-Fixed"
  ],
  "number": 10877,
  "state": "closed",
  "title": "Some concerns about error formatting with ErrorView = ConciseView",
  "updated_at": "2020-01-16T23:38:02Z"
}