{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16166",
  "author": "ZonderP",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nMight be related to https://github.com/PowerShell/PowerShell/issues/15872, but I fear this bug is more fundamental.\r\nWhen I call\r\nGet-ChildItem -LiteralPath:'\\\\\\\\?\\\\C:\\\\Program Files' in Powershell Core 7.1.4\r\nit returns all directories and files located on 'C:\\\\' regardless of what the current work directory is.\r\nAs soon as the specified path does not exist, I get the expected error.\r\nE.g. \r\nGet-ChildItem -LiteralPath:'\\\\\\\\?\\\\C:\\\\Program Filessssss'\r\nwill display error: 'Get-ChildItem: Cannot find path '\\\\\\\\?\\\\C:\\\\Program Filessssss' because it does not exist.\r\nGet-ChildItem -LiteralPath:'\\\\\\\\?\\\\C:\\Program Files' works as expected in Windows Powershell 5.1.\r\nOriginally I detected this error with this:\r\nGet-ChildItem -LiteralPath:'\\\\\\\\?\\\\UNC\\\\autlet\\\\QA\\\\TestResults\\\\Artist'\r\nwhere '\\\\\\\\autlet\\\\QA\\\\TestResults\\\\Artist' is an existing folder on shared drive '\\\\\\\\autlet\\\\QA'.\r\nalso for this case Get-ChildItem returns the files and folders from root of drive C:\\\\.\r\nAlso here, if I specify a not existing folder, I get the expected error.\r\nE.g.\r\nGet-ChildItem -LiteralPath:'\\\\\\\\?\\\\UNC\\\\autlet\\\\QA\\\\TestResults\\\\Artistttt'\r\nwill display error  'Get-ChildItem: Cannot find path '\\\\\\\\?\\\\UNC\\\\autlet\\\\QA\\\\TestResults\\\\Artistttt' because it does not exist.\r\n\r\nI'm aware, that this syntax ('\\\\\\\\?\\UNC\\\\...' resp. '\\\\\\\\?C:\\\\...') is not documented in the Powershell documentation for Get-ChildItem (https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-childitem?view=powershell-7.1 - neither for Windows Powershell 5.1 nor for Powershell Core 7.x), but this solution can often be found in the internet when searching for solutions to 'long path' problems.\r\nIf this syntax should not be supported, then it should give an error in each case.\r\n\r\n\r\n### Expected behavior\r\n\r\n```console\r\nGet-ChildItem -LiteralPath:'\\\\?\\C:\\Program Files'\r\n\r\nShould return the files and folders under 'C:\\Program Files\\'.\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nGet-ChildItem -LiteralPath:'\\\\?\\C:\\Program Files'\r\n\r\nReturns the files and folders under 'C:\\'.\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.4\r\nPSEdition                      Core\r\nGitCommitId                    7.1.4\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n![Powershell Core Get-ChildItem Problem ](https://user-images.githubusercontent.com/7192499/135046445-36761b3f-df5f-4aa9-beeb-4f39a699eb68.png)\r\n# https://github.com/PowerShell/PowerShell/issues/15872",
  "closed_at": null,
  "comments": [
    {
      "author": "ZonderP",
      "author_association": "NONE",
      "body": "Note that I would consider this bug (if it not only occurs for me for some reason) very serious.\r\nImagine something like\r\nGet-ChildItem -LiteralPath:'\\\\\\\\?\\\\UNC\\\\autlet\\\\QA\\\\TestResults\\\\Artist' -Force -File -Depth:5 | Remove-Item -Force\r\nexecuted in an elevated session...\r\nIn my case it would more or less wipe out my system drive.",
      "created_at": "2021-09-28T09:27:45Z",
      "updated_at": "2021-09-28T09:27:45Z"
    },
    {
      "author": "lukeb1961",
      "author_association": "NONE",
      "body": "I see the same failure with 7.2.0-preview.9  \r\nworks fine on 5.1.19041.1237",
      "created_at": "2021-09-29T00:28:34Z",
      "updated_at": "2021-09-29T00:28:34Z"
    },
    {
      "author": "Hutoa",
      "author_association": "NONE",
      "body": "Same here but I'm on 7.1.0 (Core)\r\n\r\nI also need to work around 260 limit across '000s of files with varying path length and filename lengths.  If unicode path support worked correctly it would be massive result for my project.  No doubt I'll hit this elsewhere, I'll keep looking for an alternative for now.\r\n\r\nThere are features of 7.x I need so reverting to 5.1.x (mentioned above) is not an option.",
      "created_at": "2022-02-11T08:27:32Z",
      "updated_at": "2022-02-11T08:33:16Z"
    },
    {
      "author": "Binomimus",
      "author_association": "NONE",
      "body": "Still an serious issue - and I almost went to delete things under C:\\ ....\r\n\r\n```powershell\r\n$PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.1\r\nPSEdition                      Core\r\nGitCommitId                    7.2.1\r\nOS                             Microsoft Windows 10.0.19044\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
      "created_at": "2022-02-15T15:46:53Z",
      "updated_at": "2022-03-17T10:47:31Z"
    },
    {
      "author": "Binomimus",
      "author_association": "NONE",
      "body": "Still an issue in 7.2.2\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.2\r\nPSEdition                      Core\r\nGitCommitId                    7.2.2\r\nOS                             Microsoft Windows 10.0.19044\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
      "created_at": "2022-03-17T10:43:58Z",
      "updated_at": "2022-03-17T10:46:50Z"
    },
    {
      "author": "Johnlamsl",
      "author_association": "NONE",
      "body": "Problem Also seen at\r\nPowershell 7.2.2 at Windows 10 21H2 - Build 19044.1645\r\n\r\nI am noticing a worse behaver\r\n\r\nAs you can see from My screen Shot\r\n\r\nit doesn't only return to the Root\r\n\r\nbut it returns to your PowerShell operation root\r\n\r\nFor example\r\nif you are working on the F: drive PowerShell \r\n\r\neven if you enter\r\n```\r\n`\\\\?\\C:\\{What ever path it is}`\r\n```\r\n\r\nit will still Return to your F: Driver Root\r\n\r\n![image](https://user-images.githubusercontent.com/59799709/165002267-c65637c6-d63b-4217-9b77-55333b46a714.png)\r\n\r\nand here is the .Net Version installed\r\n```\r\nPS C:\\> dotnet --info\r\n  It was not possible to find any installed .NET Core SDKs\r\n  Did you mean to run .NET Core SDK commands? Install a .NET Core SDK from:\r\n      https://aka.ms/dotnet-download\r\n\r\nHost (useful for support):\r\n  Version: 3.1.24\r\n  Commit:  3b38386083\r\n\r\n.NET Core SDKs installed:\r\n  No SDKs were found.\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.24 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.24 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.24 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n@ZonderP\r\n\r\nThe \"\\\\?\\\" prefix \r\nit is documented here  if you or anyone else need more refrence\r\nhttps://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file?redirectedfrom=MSDN#maximum-path-length-limitation\r\n\r\n```\r\n'Win32 File Namespaces\r\nThe Win32 namespace prefixing and conventions are summarized in this section and the following section, with descriptions of how they are used. Note that these examples are intended for use with the Windows API functions and do not all necessarily work with Windows shell applications such as Windows Explorer. For this reason there is a wider range of possible paths than is usually available from Windows shell applications, and Windows applications that take advantage of this can be developed using these namespace conventions.\r\n\r\nFor file I/O, the \"\\\\?\\\" prefix to a path string tells the Windows APIs to disable all string parsing and to send the string that follows it straight to the file system. For example, if the file system supports large paths and file names, you can exceed the MAX_PATH limits that are otherwise enforced by the Windows APIs. For more information about the normal maximum path limitation, see the previous section [Maximum Path Length Limitation](https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file?redirectedfrom=MSDN#maximum-path-length-limitation).\r\n\r\nBecause it turns off automatic expansion of the path string, the \"\\\\?\\\" prefix also allows the use of \"..\" and \".\" in the path names, which can be useful if you are attempting to perform operations on a file with these otherwise reserved relative path specifiers as part of the fully qualified path.\r\n\r\nMany but not all file I/O APIs support \"\\\\?\\\"; you should look at the reference topic for each API to be sure.\r\n\r\nNote that Unicode APIs should be used to make sure the \"\\\\?\\\" prefix allows you to exceed the MAX_PATH'\r\n\r\n```",
      "created_at": "2022-04-25T00:00:40Z",
      "updated_at": "2022-04-25T01:03:40Z"
    },
    {
      "author": "Binomimus",
      "author_association": "NONE",
      "body": "Still an issue in 7.2.5",
      "created_at": "2022-06-23T08:53:41Z",
      "updated_at": "2022-06-23T08:53:41Z"
    },
    {
      "author": "ZonderP",
      "author_association": "NONE",
      "body": "Doesn't seem to be important enough to be taken care of...\r\nStill not fixed in 7.2.6 and in 7.2.0 preview.\r\nI'm wondering... - since I still think that this bug is quite a severe issue.",
      "created_at": "2022-08-12T10:24:10Z",
      "updated_at": "2022-08-12T10:24:10Z"
    }
  ],
  "created_at": "2021-09-28T07:55:52Z",
  "labels": [
    "WG-Cmdlets-Management",
    "Needs-Triage",
    "Area-FileSystem-Provider"
  ],
  "number": 16166,
  "state": "open",
  "title": "Get-ChildItem -LiteralPath:'\\\\?\\C:\\Program Files' returns items from C:\\ root ",
  "updated_at": "2022-08-12T10:24:10Z"
}