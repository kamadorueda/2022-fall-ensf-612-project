{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6009",
  "author": "igrep",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://github.com/PowerShell/PowerShell/blob/master/docs/KNOWNISSUES.md).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n1. Install Git for Windows (or other \\*Nix compatible tool chains may work too).\r\n2. Run:\r\n    ```powershell\r\n    yes | head\r\n    ```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nThe `yes | head` command exits after printing `y` 10 times (as bash would do).\r\n\r\nActual behavior\r\n---------------\r\n\r\n`yes | head` command doesn't exit after printing `y` 10 times.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0\r\nOS                             Microsoft Windows 6.1.7601 S\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nI guess this is a problem of design of pipes.\r\nSo it might be very hard to fix (and fixing it  causes incompatibility with the existing versions)",
  "closed_at": null,
  "comments": [
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "Native application do not really fit PowerShell single-threaded push pipeline. So PowerShell first collect all input for native application and only then invoke it, thus you can not pass infinite input to native application by PowerShell, although you can use PowerShell own tools to accept infinite input:\r\n```powershell\r\nyes | select -First 10\r\n```",
      "created_at": "2018-02-11T06:19:07Z",
      "updated_at": "2018-02-11T06:19:07Z"
    },
    {
      "author": "igrep",
      "author_association": "NONE",
      "body": "I tried `yes | select -First 10`, but `yes` didn't stop after printing `y` 10 times, and `pwsh` kept consuming CPU (perhaps by `select`).\r\nSo should this be counted as `select`'s bug?",
      "created_at": "2018-02-13T01:20:02Z",
      "updated_at": "2018-02-13T01:20:02Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "`Select-Object -First $n` throws an instance of `StopUpstreamCommandsException`. The upstream commands are responsible for terminating, so the bug isn't in `Select-Object`.\r\n\r\nWe can verify that upstream PowerShell commands really do stop processing by injecting a sleep, e.g. the following finishes despite the infinite loop:\r\n\r\n```powershell\r\n& { 1; while(1){}; 2 } | Select-Object -First 1\r\n```\r\n\r\nSo it sounds like native commands are not terminated. I would guess the bug is in `NativeCommandProcessor` - specifically I think the method `NativeCommandProcessor.CleanUp` or maybe `NativeCommandProcessor.ProcessRecord`.",
      "created_at": "2018-02-13T02:19:49Z",
      "updated_at": "2018-02-13T02:19:49Z"
    }
  ],
  "created_at": "2018-01-24T09:54:09Z",
  "labels": [
    "Issue-Bug",
    "Issue-Discussion"
  ],
  "number": 6009,
  "state": "open",
  "title": "Pipes can't handle inifinite stream",
  "updated_at": "2018-02-13T03:29:33Z"
}