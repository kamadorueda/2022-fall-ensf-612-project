{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15649",
  "author": "chriskuech",
  "body": "## Summary of the new feature/enhancement\r\n\r\n<!-- \r\nA clear and concise description of what the problem is that the new feature would solve.\r\nTry formulating it in user story style (if applicable):\r\n'As a user I want X so that Y.' with X being the being the action and Y being the value of the action.\r\n-->\r\n\r\nAs a shell scripting language, PowerShell scripts often depend on a non-PowerShell CLI such as `git`, `kubectl`, or `az`. These requirements should have the same support as other requirements implemented with the `#Requires`  directive.\r\n\r\n## Proposed technical implementation details (optional)\r\n\r\n<!-- \r\nA clear and concise description of what you want to happen.\r\nConsider providing an example PowerShell experience with expected result.\r\n-->\r\n\r\nWhen the interpreter sees a `#Requires -Command \"some-command\"` directive, it will invoke `Get-Command \"some-command\"`. If the result of that invocation is null/empty, it will throw an assertion error equivalent to existing `#Requires` directives.",
  "closed_at": null,
  "comments": [
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "My personal perspective on this is that `#requires` is a generally poorer substitute for doing something like `Get-Command git -ErrorAction Stop`. `#requires` is harder to reason about, compose with other language elements and generalise, and it's often run at a different time to when users expect it (for example, commands are available based on the `$env:PATH`, which can be modified by a script, but a script with `#requires -Command` in it will fail before it can modify the `$env:PATH`).\r\n\r\n",
      "created_at": "2021-06-23T16:37:03Z",
      "updated_at": "2021-06-23T16:37:03Z"
    },
    {
      "author": "chriskuech",
      "author_association": "NONE",
      "body": "I agree requires is not ideal for all situations, but it seems like at least a few of your complaints are with PowerShell's existing implementation of `#requires` and would best be addressed by ensuring `#requires` throws a transparent exception (even if it can't be caught within the same script) and ensuring the exception message contains enough information to reason about.",
      "created_at": "2021-06-23T17:51:23Z",
      "updated_at": "2021-06-23T17:51:23Z"
    }
  ],
  "created_at": "2021-06-23T15:57:54Z",
  "number": 15649,
  "state": "open",
  "title": "#Requires -Command \"some-command\"",
  "updated_at": "2021-06-23T17:51:23Z"
}