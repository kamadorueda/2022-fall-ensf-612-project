{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17452",
  "author": "daxian-dbw",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nThis happens in 7.3.0-preview.4, and all other 7.3 preview versions.\r\n**This is a regression from both 7.0.x and 7.2.x (both are LTS versions).**\r\n\r\nContent of the test file `try.ps1`: (Ansi escape sequence is used for color).\r\n```\r\nRead-Host -Prompt \"\u001b[33mEnter your device code\u001b[0m\"\r\n```\r\n\r\nTry replacing ``\"`r`n\"`` with ``\"`n\"`` for the content in the file and save it to another file:\r\n```pwsh\r\n(Get-Content .\\try.ps1 -Raw).Replace(\"`r`n\", \"`n\") > new.ps1\r\n## Or, (Get-Content .\\try.ps1 -Raw).Replace(\"`r`n\", \"`n\")  | Out-File new.ps1\r\n```\r\n\r\nNow all Ansi escape sequences are lost in the content of `new.ps1`:\r\n```\r\nRead-Host -Prompt \"Enter your device code\"\r\n```\r\n---------------------------------------------------------------\r\n\r\n`Set-Content` works as expected, which preserves the Ansi escape sequences.\r\n\r\n```pwsh\r\n(Get-Content .\\try.ps1 -Raw).Replace(\"`r`n\", \"`n\") | Set-Content new.ps1\r\n```\r\n---------------------------------------------------------------\r\n\r\nBehavior in 7.0.11:\r\n\r\n![image](https://user-images.githubusercontent.com/127450/170773178-9b3a660c-af15-4383-a0a2-9adc83dbdb3b.png)\r\n\r\nBehavior in 7.2.2:\r\n\r\n![image](https://user-images.githubusercontent.com/127450/170773256-eaa5cce9-1cee-4d6e-b135-3eb120150d0a.png)\r\n\r\n-------------------------------------------\r\n\r\n### Root cause and behavior proposal\r\n\r\nThe root cause of this regression is having `Host` to be the default value for `$PSStyle.OutputRendering`, which make the `Out-*` cmdlet to strip off escape sequences from the passed-in input.\r\n\r\n- In 7.0.x, the `$PSStyle` feature is not there, so `Out-*` commands don't do anything special to Ansi escape sequences in the input.\r\n- In 7.2.x, the default value for `$PSStyle.OutputRendering` is `Ansi`, so the behavior is unchanged without a user knowing about the `$PSStyle` feature.\r\n- In 7.3, the default value is changed to `Host`, which makes `Out-*` cmdlets to always strip off escape sequences from the input, and hence the regression.\r\n\r\nI understand the purpose of having `Host` option for `$PSStyle.OutputRendering` -- it's nice to have ANSI decorations in the formatting output when it's rendered on terminal, but when redirecting the formatting out like in `Get-Process > file`, the escape sequences in the formatting output becomes annoying. The `Host` option is to tell PowerShell to not keep ANSI decorations in case of redirection (essentially `Out-File`, and basically any `Out-*` cmdlets such as `Out-String`).\r\n\r\nBut for pure string input that doesn't really go through formatting, it doesn't seem right to remove the Ansi escape sequences, given that the formatting system doesn't add any to it. The `Out-*` should treat the pure string input as is, and only remove escape sequences when the input object actually goes through formatting.\r\n\r\nSo, the **proposal** is: option `Host` makes `Out-*` cmdlets remove escape sequences only if the input object actually goes through formatting within the `Out-*` cmdlets. For string input, `Out-*` cmdlet should not do anything special regarding Ansi escape sequences.\r\n\r\n### Expected behavior\r\n\r\n```console\r\nThe content in new.ps1 should be the same as in try.ps1, except that all \"\\r\\n\" characters are replaced with \"\\n\".\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nThe escape sequences in the original file was removed during redirection.\r\n```\r\n\r\n\r\n### Error details\r\n\r\n```console\r\nN/A\r\n```\r\n\r\n\r\n### Environment data\r\n\r\n```powershell\r\nPS:24> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.3.0-preview.4\r\nPSEdition                      Core\r\nGitCommitId                    7.3.0-preview.4\r\nOS                             Microsoft Windows 10.0.19044\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": "2022-06-09T01:13:41Z",
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "7.2.0 would have done the same thing, yes ?  \r\n\r\nThe problem now is that commands are emitting ANSI corrupted data by default, e.g. even though I don't want my table headings in green and set  `Formatting.TableHeader` to an empty string  , I get a reset at the end of line. \r\n\r\n```\r\n    Directory: C:\\\r\n\r\nMode                 LastWriteTime         Length Name\u001b[0m\r\n----                 -------------         ------ ----\u001b[0m\r\n``` \r\n\r\nAnything which cleans this up so `dir > files.txt` works like it has done since the early 1980s  will also \"clean\" things it shouldn't\r\nIt's hard to see how Out-File can  know it should strip ansi from one thing but not another. \r\n\r\n",
      "created_at": "2022-05-28T00:21:10Z",
      "updated_at": "2022-05-28T00:21:10Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Please see #17455 for the fix to `Out-File` and `Out-String`.\r\nFor the table header and list label styles, please see #17463 for the fix.",
      "created_at": "2022-05-30T22:41:49Z",
      "updated_at": "2022-05-30T22:41:49Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "#17463 will fix the extra reset so that's good. \r\n#17455 makes the behaviour \"Leave ANSI out of object formatting, but leave strings alone\" which looks like a good answer. I'm sure some people will want \"Strip ansi from strings\" but that's a new feature and shouldn't be the default behaviour",
      "created_at": "2022-05-31T07:42:54Z",
      "updated_at": "2022-05-31T07:42:54Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #17455, which has now been successfully released as `v7.3.0-preview.5`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.3.0-preview.5)\n",
      "created_at": "2022-06-22T20:27:12Z",
      "updated_at": "2022-06-22T20:27:12Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #17455, which has now been successfully released as `v7.2.6`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.6)\n",
      "created_at": "2022-08-11T22:19:10Z",
      "updated_at": "2022-08-11T22:19:10Z"
    }
  ],
  "created_at": "2022-05-27T20:13:35Z",
  "labels": [
    "Issue-Bug",
    "WG-Engine",
    "Resolution-Fixed"
  ],
  "number": 17452,
  "state": "closed",
  "title": "Save pure string text to file with redirection or `Out-File` unexpectedly strip off VT sequences from the original text",
  "updated_at": "2022-08-11T22:19:10Z"
}