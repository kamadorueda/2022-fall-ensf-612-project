{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4315",
  "author": "iSazonov",
  "body": "I install PowerShell-6.0.0-beta.4-win10-win2016-x64.msi on Windows Server 2012 R2 and get an exception (see test below). The same package I install on Windows Server 2012 - no exception with the same test.\r\n\r\nConclusion: we should check OS version in our packages and block setup on inappropriate OS version.\r\n\r\nDiscussion: User can copy-paste folder with installed PowerShell Core from one OS to one with  inappropriate version and get unpredictable results. We should to protect in some way. Maybe have a manifest to check dll versions at startup. \r\n(Microsoft.Management.Infrastructure.Native.Unmanaged.DLL version is the same in Win10 and Win81 packagees).\r\n\r\n\r\nI  test `Test-Connection computername` on Windows Server 2012 R2. The `Microsoft.Management.Infrastructure.Native.Unmanaged.DLL` is present in root PowerShell Core folder. \r\n\r\n```powershell\r\nTypeName       : Microsoft.Management.Infrastructure.Native.ApplicationMethods\r\nMessage        : The type initializer for 'Microsoft.Management.Infrastructure.\r\n                 Native.ApplicationMethods' threw an exception.\r\nData           : {}\r\nInnerException : System.DllNotFoundException: Unable to load DLL\r\n                 'Microsoft.Management.Infrastructure.Native.Unmanaged.DLL':\r\n                 The specified module could not be found. (Exception from\r\n                 HRESULT: 0x8007007E)\r\n                    at\r\n                 MI_ApplicationWrapper_Initialize(_MI_ApplicationWrapper* ,\r\n                 UInt16* , IntPtr , IntPtr , IntPtr , IntPtr , IntPtr , IntPtr\r\n                 , IntPtr , IntPtr , IntPtr , IntPtr , IntPtr , IntPtr ,\r\n                 IntPtr )\r\n                    at Microsoft.Management.Infrastructure.Native.MI_Applicatio\r\n                 nWrapper_Initialize_Managed(_MI_ApplicationWrapper*\r\n                 pmiApplicationWrapper)\r\n                    at Microsoft.Management.Infrastructure.Native.ApplicationMe\r\n                 thods.InitializeCore(InstanceHandle& errorDetails,\r\n                 ApplicationHandle& applicationHandle)\r\n                    at Microsoft.Management.Infrastructure.Native.ApplicationMe\r\n                 thods..cctor()\r\nTargetSite     : Microsoft.Management.Infrastructure.Native.MiResult Initialize\r\n                 (Microsoft.Management.Infrastructure.Native.InstanceHandle\r\n                 ByRef,\r\n                 Microsoft.Management.Infrastructure.Native.ApplicationHandle\r\n                 ByRef)\r\nStackTrace     :    at Microsoft.Management.Infrastructure.Native.ApplicationMe\r\n                 thods.Initialize(InstanceHandle& errorDetails,\r\n                 ApplicationHandle& applicationHandle)\r\n                    at Microsoft.Management.Infrastructure.Internal.CimApplicat\r\n                 ion.GetApplicationHandle()\r\n                    at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)\r\n                    at System.Lazy`1.ExecutionAndPublication(LazyHelper\r\n                 executionAndPublication, Boolean useDefaultConstructor)\r\n                    at System.Lazy`1.CreateValue()\r\n                    at Microsoft.Management.Infrastructure.Options.CimOperation\r\n                 Options.<>c__DisplayClass9_0.<.ctor>b__0()\r\n                    at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)\r\n                    at System.Lazy`1.ExecutionAndPublication(LazyHelper\r\n                 executionAndPublication, Boolean useDefaultConstructor)\r\n                    at System.Lazy`1.CreateValue()\r\n                    at Microsoft.Management.Infrastructure.Options.CimOperation\r\n                 Options.set_Timeout(TimeSpan value)\r\n                    at Microsoft.PowerShell.Commands.TestConnectionCommand.Proc\r\n                 essWSManProtocolForTestConnection()\r\n                    at Microsoft.PowerShell.Commands.TestConnectionCommand.Proc\r\n                 essRecord()\r\n                    at System.Management.Automation.Cmdlet.DoProcessRecord()\r\n                    at\r\n                 System.Management.Automation.CommandProcessor.ProcessRecord()\r\nHelpLink       :\r\nSource         : Microsoft.Management.Infrastructure.Native\r\nHResult        : -2146233036\r\n```",
  "closed_at": "2017-09-19T05:10:52Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The MSI should check to make sure it's the right OS.  I think it should also check dependencies (Win10 URT and VC++ redist).  However, if someone copies the expanded zip from one OS to another, I don't know how much effort we want to spend detecting that.",
      "created_at": "2017-07-25T23:51:37Z",
      "updated_at": "2017-07-25T23:51:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems not only Windows issue but Unix too.\r\nWe have Issues to get universal packages #2608 (Windows) and #3961 (Linux) - maybe we can resolve the Issue there.",
      "created_at": "2017-07-26T16:00:22Z",
      "updated_at": "2017-07-26T16:00:22Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov @adityapatwardhan  See [here](http://wixtoolset.org/documentation/manual/v3/howtos/redistributables_and_install_checks/block_install_on_os.html) on how you could do this using functionality already built into WiX. It is not perfect but a good starting point.",
      "created_at": "2017-08-14T21:21:51Z",
      "updated_at": "2017-08-14T21:21:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@bergmeister Thanks! ",
      "created_at": "2017-08-15T06:42:07Z",
      "updated_at": "2017-08-15T06:42:07Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Unassigning from @adityapatwardhan who is on leave",
      "created_at": "2017-08-28T21:46:06Z",
      "updated_at": "2017-08-28T21:46:06Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Did we have a proper fix?",
      "created_at": "2017-08-29T06:21:43Z",
      "updated_at": "2017-08-29T06:21:43Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov this issue got closed because #4540 mentioned `'Fixes #4315 and #2608'`. Please re-open it if you don't think that PR fixes this issue.",
      "created_at": "2017-08-29T16:12:50Z",
      "updated_at": "2017-08-29T16:12:50Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov I think it's safer to reopen it directly and let you close if you think #4540 fixed it.",
      "created_at": "2017-08-29T16:15:13Z",
      "updated_at": "2017-08-29T16:15:13Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@iSazonov with beta.7, we have a single package for all Windows OSs. Is it ok to close this issue?",
      "created_at": "2017-09-15T18:38:28Z",
      "updated_at": "2017-09-15T18:38:28Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I'll test this on next week.",
      "created_at": "2017-09-16T18:26:04Z",
      "updated_at": "2017-09-16T18:26:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I get an error on Windows Server 2012 for Test-Connection with Beta.7. \ud83d\ude15 I guess we can catch more errors if we run full test set on all supported platforms.",
      "created_at": "2017-09-18T11:26:13Z",
      "updated_at": "2017-09-18T11:26:13Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@iSazonov What error do you get for Test-Connection?",
      "created_at": "2017-09-18T17:35:22Z",
      "updated_at": "2017-09-18T17:35:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "On Windows Server 2012 (not R2):\r\n```powershell\r\nPS C:\\Program Files\\PowerShell\\6.0.0-beta.7> Test-Connection fs\r\nTest-Connection : Unable to find an entry point named 'GetCurrentThread' in\r\nDLL 'api-ms-win-core-processthreads-l1-1-2.dll'.\r\nAt line:1 char:1\r\n+ Test-Connection fs\r\n+ ~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Test-Connection], EntryPointN\r\n   otFoundException\r\n    + FullyQualifiedErrorId : System.EntryPointNotFoundException,Microsoft.Pow\r\n   erShell.Commands.TestConnectionCommand\r\n\r\nPS C:\\Program Files\\PowerShell\\6.0.0-beta.7> $error[0].Exception | fl * -Force\r\n\r\n\r\nMessage        : Unable to find an entry point named 'GetCurrentThread' in DLL\r\n                 'api-ms-win-core-processthreads-l1-1-2.dll'.\r\nTypeName       :\r\nData           : {}\r\nInnerException :\r\nTargetSite     : Void* GetCurrentThread()\r\nStackTrace     :    at GetCurrentThread()\r\n                    at Microsoft.Management.Infrastructure.Native.SessionHandle\r\n                 .ReleaseHandleAsynchronously(OnSessionHandleReleasedDelegate\r\n                 completionCallback)\r\n                    at Microsoft.Management.Infrastructure.Native.SessionHandle\r\n                 .ReleaseHandle()\r\n                    at\r\n                 System.Runtime.InteropServices.SafeHandle.InternalDispose()\r\n                    at Microsoft.Management.Infrastructure.CimSession.Dispose(B\r\n                 oolean disposing)\r\n                    at Microsoft.Management.Infrastructure.CimSession.Dispose()\r\n                    at Microsoft.PowerShell.Commands.TestConnectionCommand.Proc\r\n                 essWSManProtocolForTestConnection()\r\n                    at Microsoft.PowerShell.Commands.TestConnectionCommand.Proc\r\n                 essRecord()\r\n                    at System.Management.Automation.Cmdlet.DoProcessRecord()\r\n                    at\r\n                 System.Management.Automation.CommandProcessor.ProcessRecord()\r\nHelpLink       :\r\nSource         : Microsoft.Management.Infrastructure.Native\r\nHResult        : -2146233053\r\n\r\n```",
      "created_at": "2017-09-19T04:53:07Z",
      "updated_at": "2017-09-19T04:53:54Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "That issue is https://github.com/PowerShell/PowerShell/issues/2777\r\n\r\nFor the purpose of this original issue, since we have unified Windows packages now.  We can close this.",
      "created_at": "2017-09-19T05:10:52Z",
      "updated_at": "2017-09-19T05:10:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The error is absent in previous builds - it is up with unified Windows packages.",
      "created_at": "2017-09-19T05:28:27Z",
      "updated_at": "2017-09-19T05:28:27Z"
    }
  ],
  "created_at": "2017-07-21T09:11:34Z",
  "number": 4315,
  "state": "closed",
  "title": "Need check OS version in installation packages and maybe binary",
  "updated_at": "2017-09-19T05:28:27Z"
}