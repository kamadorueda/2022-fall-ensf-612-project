{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10513",
  "author": "iRon7",
  "body": "Add  `System.Collections.Specialized.OrderedDictionary` as  `Ordered` to the PowerShell type accelerators <sub>(not sure if this request is related or similar to: #9512)</sub>.\r\n\r\nCurrently the the`-is` operator returns an error for the `Ordered` type although I am able to use it in the constructor:\r\n\r\n```PowerShell\r\n$Ordered = [Ordered]@{a=1}\r\n$Ordered -is [Ordered]\r\n\r\nUnable to find type [Ordered].\r\nAt line:1 char:14\r\n+ $Ordered -is [Ordered]\r\n+              ~~~~~~~~~\r\n+ CategoryInfo          : InvalidOperation: (Ordered:TypeName) [], RuntimeException\r\n+ FullyQualifiedErrorId : TypeNotFound\r\n```\r\n\r\nAs with e.g. the `semver` type, I would expect to be able to use the same type (accelerator) for comparison as for the constructor:\r\n\r\n```PowerShell\r\n$Semver = [semver]'1.2.3'\r\n$Semver -is [semver]\r\nTrue\r\n```",
  "closed_at": "2022-08-01T16:15:15Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "WG-Engine discussed this today.\r\n\r\nWe agree that it makes sense to add a type accelerator here so that [ordered] can be used for `-is` comparisons and for directly constructing an OrderedDictionary with `[ordered]::new()`. This is a fairly straightforward change so we're happy to mark this as up for grabs.\r\n\r\nNote that there is a parser check that prevents the usage of `[ordered]$a` for anything other than a hashtable literal (`[ordered]@{ a = 1 }`) which we agree should remain in place for the following reasons:\r\n\r\n1. There is currently no usable direct casts to an OrderedDictionary that this code path could take\r\n2. Casting a non-ordered Dictionary/hashtable type to OrderedDictionary is always going to result in the same unordered keys as can be gotten from the non-ordered Dictionary type anyway; going from an unordered type to an ordered type after the dictionary has been constructed does not make sense.\r\n\r\nGiven this, we think that simply adding a new type accelerator with no other changes makes sense here. It will enable the desired scenario and requires minimal changes.\r\n\r\nEDIT: For those wanting to implement the change, the accelerator would be added to this list:\r\nhttps://github.com/PowerShell/PowerShell/blob/7dc4587014bfa22919c933607bf564f0ba53db2e/src/System.Management.Automation/engine/parser/TypeResolver.cs#L724-L815",
      "created_at": "2022-07-21T21:21:42Z",
      "updated_at": "2022-07-22T12:23:16Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #17804, which has now been successfully released as `v7.3.0-preview.7`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.3.0-preview.7)\n",
      "created_at": "2022-08-12T00:01:02Z",
      "updated_at": "2022-08-12T00:01:02Z"
    }
  ],
  "created_at": "2019-09-11T17:13:36Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine",
    "Up-for-Grabs",
    "Resolution-Fixed"
  ],
  "number": 10513,
  "state": "closed",
  "title": "Feature Request: add [Ordered] type accelerator",
  "updated_at": "2022-08-12T00:01:02Z"
}