{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7464",
  "author": "SteveL-MSFT",
  "body": "Was talking to @jpsnover about this.  It seems that if the module manifest exists, we should process that even if the user explicitly imported only the psm1.  The problem is that depending on what the user imports, the result may not be what the module author intended.  Unless the module author has matching FunctionsToExport in psd1 and Export-ModuleMember in psm1, the resulting exported members may be different (applies to other type and not just functions).\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nNew-ModuleManifest -Path foo.psd1 -FunctionsToExport foo1 -RootModule foo.psm1\r\nSet-Content -Path foo.psm1 -Value @\"\r\n  function foo1 { \"foo1\" }\r\n  function foo2 { \"foo2\" }\r\n\"@\r\n\r\nImport-Module ./foo.psd1\r\nGet-Command -module foo\r\n\r\nCommandType     Name                                               Version    Source\r\n-----------     ----                                               -------    ------\r\nFunction        foo1                                               0.0.1      foo\r\n\r\nImport-Module ./foo.psm1 -Force\r\nGet-Command -module foo       \r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\n\r\nCommandType     Name                                               Version    Source\r\n-----------     ----                                               -------    ------\r\nFunction        foo1                                               0.0.1      foo\r\n\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\n\r\nCommandType     Name                                               Version    Source\r\n-----------     ----                                               -------    ------\r\nFunction        foo1                                               0.0        foo\r\nFunction        foo2                                               0.0        foo\r\n\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.4\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0-preview.4\r\nOS                             Darwin 17.7.0 Darwin Kernel Version 17.7.0: Thu Jun 21 22:53:14 PDT 2018; root:xnu-4570.71.2~1/RELEASE_X86_64\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "Sometimes I import the psm1 by design as a convenience to test the functions that are not 'public' (i.e. exported), should we therefore have an option for still being able to do that?",
      "created_at": "2018-08-07T17:08:07Z",
      "updated_at": "2018-08-07T17:08:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@bergmeister You can still copy the module and remove psd1 file for your test.",
      "created_at": "2018-08-08T05:10:13Z",
      "updated_at": "2018-08-08T05:10:13Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "I'm not sure on the perceived benefit of this. In most cases modules should be in one of the PSModulePaths and therefore Import-Module by Name will import based on PSD1 by default if it's there and if not PSM1. T\r\n\r\nThis is expected and designed behaviour, behaviour that as teachers of how to properly use PowerShell we should be pushing people to use the language in the right way in the mass majority of cases. This means that if you want to explicitly import the PSM1 where a PSD1 exists, you would see this as an advanced use case like @bergmeister mentions above and the suggestion that @iSazonov has made can be definitely followed i'm not sure that this is ideal.\r\n\r\nTherefore, IMO, this is a change that isn't sensible, and one that is not really required considering the why that things are set up like at present.\r\n\r\n@SteveL-MSFT - the problem goes away using a mor` accepted correct import method, ie `Import-Module -Name MyModule` where `MyModule` exists in one of the PSModulePaths\r\n\r\nThis is more an education issue, both to end users and Module Authors, than being PowerShell Engine Issue.",
      "created_at": "2018-08-08T14:01:36Z",
      "updated_at": "2018-08-08T14:01:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We could turn on this only in strict mode.",
      "created_at": "2018-08-09T03:31:17Z",
      "updated_at": "2018-08-09T03:31:17Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "> It seems that if the module manifest exists, we should process that even if the user explicitly imported only the psm1.\r\n\r\n@stevel-msft Could you elaborate on this?  It's not obvious to me why such behavior is desirable.",
      "created_at": "2018-08-09T15:02:04Z",
      "updated_at": "2018-08-09T15:02:04Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "If the module manifest exists, it should be the \"source of truth\" for the module.  Intent by the author (for end users) is to import the module manifest which defines not only what functions/cmdlets/aliases/etc.. get exported, but also the formatting and types files to use.  Importing the .psm1 directly won't give same experience (unless explicitly coded to do) and could give different behavior as nested modules or requiredassemblies wouldn't be processed.\r\n\r\nIn the dev scenario, it would still make sense to import the psd1 since they authored it and should want to validate the end user experience.\r\n\r\nI can see how importing the psd1 when the user explicitly imported the psm1 could be surprising.",
      "created_at": "2018-08-09T16:27:25Z",
      "updated_at": "2018-08-09T16:27:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Another thought is to import always by name but allow psm1 only with \"-Force\".",
      "created_at": "2018-08-10T04:00:28Z",
      "updated_at": "2018-08-10T04:00:28Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Going to new major 7.0 version allow us to implement the \"unlikely breaking\" change.",
      "created_at": "2019-04-28T06:19:02Z",
      "updated_at": "2019-04-28T06:19:02Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT this behaviour is because you've force imported the psm1 after importing the psd1.\r\n\r\nThe correct way to do this is to use `Remove-Module` on the psd1 and then import the psm1, and vice versa just like as @bergmeister mentions for development testing.\r\n\r\nBecause this is already the way it's designed and understood this way I don't think this change should really be considered for 7.0 at all because in reality this doesn't bring any realy additional value or benefit to either Module Dev's or End Users.\r\n\r\nEven more so when you consider that good module development practices would not have a module being worked on in one of the PSModulePaths but a `released` version should be tested within one of these paths to ascertain that it works as intended in a user installed scenario.\r\n\r\nI think there's better areas to investigate than what would be a breaking change and one that I personally cannot see the value from making this change, other than perhaps it highlighting a need for improved documentation around the Module development process, including authoring a recommended practice.\r\n\r\n",
      "created_at": "2019-04-28T18:18:00Z",
      "updated_at": "2019-04-28T18:18:00Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this and do not agree with importing the psd1 when the user explicitly specified the psm1.  We do agree that explicitly importing a psm1 when a psd1 exists is a development time scenario so we propose adding a warning when importing the psm1 and a psd1 exists.",
      "created_at": "2019-05-08T23:00:55Z",
      "updated_at": "2019-05-08T23:00:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I believe we need to document this explicitly.",
      "created_at": "2019-05-09T19:14:01Z",
      "updated_at": "2019-05-09T19:14:01Z"
    }
  ],
  "created_at": "2018-08-06T20:21:07Z",
  "number": 7464,
  "state": "open",
  "title": "Import-Module foo.psm1 should still process foo.psd1 if exists",
  "updated_at": "2019-05-10T04:22:34Z"
}