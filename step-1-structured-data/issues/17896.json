{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17896",
  "author": "AAATechGuy",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nFix https://github.com/PowerShell/PowerShell/issues/17893 \r\n\r\nBoth `Invoke-RestMethod` and `Invoke-WebRequest` showed 20x latency of 1000ms when downloading a web item via pscore 7, that typically takes ~60ms in ps 5, In `StreamHelper` there is a constant minimum delay of `1s` for any calls to `StreamHelper.WriteToStream`. This is not expected. \r\n\r\nIf `Invoke-WebRequest` / `Invoke-RestMethod` are used in parallel and for large volume of items, the 1s delay adds up. \r\n\r\nWe fix this issue by replacing `Task.Delay` check with `copyTask.Wait`. \r\n\r\nThe change does take into consideration, \r\n- to exit immediately if copyTask succeeds. \r\n- to wait for 1s, for progress update, in case task takes longer. \r\n- to throw exception, in case task fails [although, I think this may not have the right parity with earlier code]\r\n\r\nFix https://github.com/PowerShell/PowerShell/issues/17931\r\n\r\nWe also fix the issue where failure in download results in partial file being saved, and exception being suppressed. \r\n\r\n<!-- Summarize your PR between here and the checklist. -->\r\n\r\n## PR Context\r\n\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\n\r\nTested that perf improves after fix, locally, \r\n![image](https://user-images.githubusercontent.com/3484074/184528659-129f8d95-d267-4eca-a04b-74e8213a6c51.png)\r\n\r\nEarlier, latency was as follows, \r\n![image](https://user-images.githubusercontent.com/3484074/184528909-ad5d9ed3-5548-4b8c-aea1-9626e6dbe5d3.png)\r\n\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/main/reference/7.3/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and opened an issue in the relevant tool repository. This may include:\r\n        - [ ] Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode\r\n        (which runs in a different PS Host).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n",
  "closed_at": "2022-08-23T05:30:47Z",
  "comments": [
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "Open PRs should not be assigned to milestone, so they are not assigned to the wrong milestone after they are merged.  For backport consideration, use a `backport` label. ",
      "created_at": "2022-08-14T13:46:45Z",
      "updated_at": "2022-08-14T13:46:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Hmm, looking how [Task.Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken)](https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.wait?view=net-6.0#system-threading-tasks-task-wait(system-threading-cancellationtoken)) method works, I think we could refactor the cycle condition (we can not check cancelation since it throws):\r\n```c#\r\n                while (!copyTask.Wait(1000, cancellationToken))\r\n                {\r\n                    record.StatusDescription = StringUtil.Format(WebCmdletStrings.WriteRequestProgressStatus, output.Position);\r\n                    cmdlet.WriteProgress(record);\r\n                };\r\n\r\n                record.StatusDescription = StringUtil.Format(WebCmdletStrings.WriteRequestComplete, output.Position);\r\n                cmdlet.WriteProgress(record);\r\n```",
      "created_at": "2022-08-15T04:30:03Z",
      "updated_at": "2022-08-15T05:10:50Z"
    },
    {
      "author": "AAATechGuy",
      "author_association": "CONTRIBUTOR",
      "body": "> Hmm, looking how [Task.Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken)](https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.wait?view=net-6.0#system-threading-tasks-task-wait(system-threading-cancellationtoken)) method works, I think we could refactor the cycle condition (we can not check cancelation since it throws):\r\n> \r\n> ```cs\r\n>                 while (!copyTask.Wait(1000, cancellationToken))\r\n>                 {\r\n>                     record.StatusDescription = StringUtil.Format(WebCmdletStrings.WriteRequestProgressStatus, output.Position);\r\n>                     cmdlet.WriteProgress(record);\r\n>                 };\r\n> \r\n>                 record.StatusDescription = StringUtil.Format(WebCmdletStrings.WriteRequestComplete, output.Position);\r\n>                 cmdlet.WriteProgress(record);\r\n> ```\r\n\r\nIn addition to modifying the loop logic, I added a catch for `AggregateException` to handle the specific scenario where `copyTask` throws any exception. \r\nPreviously, no exception is thrown. I kept that behavior, \r\n\r\nI have tested on mock code here: https://github.com/AAATechGuy/AbinzSharedTools/commit/e9dbe47054d2b1a22b7e1b304ae237181e212c4a\r\nOutput below. \r\n```\r\n\r\n[06:41:08.643] *** Execute.start\r\n[06:41:08.667] .\r\n[06:41:08.698] task-begin\r\n[06:41:08.762] task-end\r\n[06:41:09.694] Completed\r\n[06:41:09.694] *** Execute.complete : elapsed 1043 ms\r\n\r\n\r\n[06:41:09.695] *** Execute.start\r\n[06:41:09.696] task-begin\r\n[06:41:09.771] task-end\r\n[06:41:09.772] Completed\r\n[06:41:09.772] *** Execute.complete : elapsed 77 ms\r\n\r\n\r\n[06:41:09.772] *** Execute.start\r\n[06:41:09.773] .\r\n[06:41:09.773] task-begin\r\n[06:41:10.774] .\r\n[06:41:10.837] task-end\r\n[06:41:11.777] Completed\r\n[06:41:11.778] *** Execute.complete : elapsed 2004 ms\r\n\r\n\r\n[06:41:11.778] *** Execute.start\r\n[06:41:11.779] task-begin\r\n[06:41:12.781] .\r\n[06:41:12.842] task-end\r\n[06:41:12.843] Completed\r\n[06:41:12.843] *** Execute.complete : elapsed 1064 ms\r\n\r\n\r\n[06:41:12.845] *** Execute.start\r\n[06:41:12.845] .\r\n[06:41:12.846] task-begin\r\n[06:41:13.846] Completed\r\n[06:41:13.846] *** Execute.complete : elapsed 1001 ms\r\n\r\n\r\n[06:41:13.847] *** Execute.start\r\n[06:41:13.848] task-begin\r\n[06:41:14.010] AggregateException\r\n[06:41:14.010] *** Execute.complete : elapsed 162 ms\r\n\r\n\r\n[06:41:14.011] *** Execute.start\r\n[06:41:14.011] .\r\n[06:41:14.011] task-begin\r\n[06:41:14.171] OperationCanceledException\r\n[06:41:14.171] *** Execute.complete : elapsed 160 ms\r\n\r\n\r\n[06:41:14.172] *** Execute.start\r\n[06:41:14.173] task-begin\r\n[06:41:14.319] OperationCanceledException\r\n[06:41:14.320] *** Execute.complete : elapsed 147 ms\r\n\r\n[06:41:15.083] task-end\r\n[06:41:15.241] task-end\r\n```",
      "created_at": "2022-08-15T06:43:22Z",
      "updated_at": "2022-08-15T06:43:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@AAATechGuy Please rename the PR to something like \"Remove 1s minimum delay in Invoke-WebRequest for small files.\"",
      "created_at": "2022-08-15T06:57:37Z",
      "updated_at": "2022-08-15T06:57:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@AAATechGuy You comment in review mode - open Files changed tab and cancel review mode on top right.\r\n\r\nPreviously we catch and ignore only OperationCanceledException. You added AggregateException - please revert this.",
      "created_at": "2022-08-16T05:32:54Z",
      "updated_at": "2022-08-16T05:32:54Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I discussed this with @AAATechGuy and what we agreed is that for 7.3 we should not change the current behavior which is an exception during the copy task is ignored.  For 7.4, we should take another change that does not ignore the exception and see if there are any unanticipated side effects as this seems to be the correct change for the long term.",
      "created_at": "2022-08-17T23:49:54Z",
      "updated_at": "2022-08-17T23:50:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "My understanding was that we don't ignore exceptions from the copy task. It was my mistake and _**it is a regression**_.\r\n\r\nIt is not easy to get an exception from the copy task. I disconnected network for ~1 minutes and restore it. Original cmdlet waits some seconds and silently stop with semi-downloaded file. With the change (without catching AggregateException) user get follow error:\r\n![image](https://user-images.githubusercontent.com/22290914/185305212-26301e0c-9653-41b4-8c12-a4f92db53c95.png)\r\n\r\nI think it is right behavior and we should remove the regression.\r\n\r\n----\r\nThere is also another issue with CopyToAsync(). If I disconnected network for long time (2 minutes in my experiment) the cmdlet hangs _unlimitedly_. It is not a problem in interactive scenario since user see a progress bar, but it is huge problem for script scenario since the script can hangs infinitely.\r\nRelated issue https://github.com/dotnet/runtime/issues/36822. I think we need to support the cmdlet Timeout parameter here by checking `output` Stream.Position (or Stream.Length) or we could put the functionality (throw a timeout exception) in WebResponseContentMemoryStream class. Or better use the code example https://github.com/dotnet/runtime/blob/e71a9583b4d6c9bd97edd87cda7f98f232f63530/src/libraries/System.Net.Requests/src/System/Net/HttpWebRequest.cs#L1666-L1702\r\n\n\n<blockquote><img src=\"https://opengraph.githubassets.com/b1cb5796b760d0cdbab4ced1dacdd627b41e52c4eb95074c3b3ebcc45b3317aa/dotnet/runtime\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/dotnet/runtime\">runtime/HttpWebRequest.cs at e71a9583b4d6c9bd97edd87cda7f98f232f63530 \u00b7 dotnet/runtime</a></strong></div><div>.NET is a cross-platform runtime for cloud, mobile, desktop, and IoT apps. - runtime/HttpWebRequest.cs at e71a9583b4d6c9bd97edd87cda7f98f232f63530 \u00b7 dotnet/runtime</div></blockquote>",
      "created_at": "2022-08-18T07:10:59Z",
      "updated_at": "2022-08-18T07:11:02Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Talking to @PaulHigin, let's defer taking any change here for 7.3 and make what we agree is the right change (throwing the inner exception from the aggregate) for 7.4 so we have opportunity to see if there's side effects.",
      "created_at": "2022-08-18T16:11:38Z",
      "updated_at": "2022-08-18T16:11:38Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Does this address https://github.com/PowerShell/PowerShell/issues/17762 as well?",
      "created_at": "2022-08-18T18:37:34Z",
      "updated_at": "2022-08-18T18:37:34Z"
    },
    {
      "author": "AAATechGuy",
      "author_association": "CONTRIBUTOR",
      "body": "> Does this address #17762 as well?\r\n\r\nFrom the descrption of it, it appears so. \r\n",
      "created_at": "2022-08-18T18:42:30Z",
      "updated_at": "2022-08-18T18:42:30Z"
    },
    {
      "author": "pull-request-quantifier[bot]",
      "author_association": "NONE",
      "body": "### ![](https://img.shields.io/static/v1?label=Quantified&message=Extra%20Small&color=green)\r\n\r\nThis PR has `4` quantified lines of changes. In general, a change size of upto `200` lines is ideal for the best PR experience!\r\n\r\n------\r\n\r\n<details >\r\n    <summary display=\"inline\"> <strong>Quantification details</strong></summary>\r\n    <p />\r\n\r\n```\r\nLabel      : Extra Small\r\nSize       : +1 -3\r\nPercentile : 1.6%\r\n\r\nTotal files changed: 1\r\n\r\nChange summary by file extension:\r\n.cs : +1 -3\r\n```\r\n> Change counts above are quantified counts, based on the [PullRequestQuantifier customizations](https://github.com/microsoft/PullRequestQuantifier/blob/main/docs/prquantifier-yaml.md).\r\n    \r\n</details>\r\n\r\n\r\n<details>\r\n    <summary display=\"inline\"> <strong>Why proper sizing of changes matters</strong> </summary>\r\n    <p/>\r\n    <p/>\r\n\r\nOptimal pull request sizes drive a better predictable PR flow as they strike a\r\nbalance between between PR complexity and PR review overhead. PRs within the\r\noptimal size (typical small, or medium sized PRs) mean:\r\n\r\n- Fast and predictable releases to production:\r\n  - Optimal size changes are more likely to be reviewed faster with fewer\r\niterations.\r\n  - Similarity in low PR complexity drives similar review times.\r\n- Review quality is likely higher as complexity is lower:\r\n  - Bugs are more likely to be detected.\r\n  - Code inconsistencies are more likely to be detected.\r\n- Knowledge sharing is improved within the participants:\r\n  - Small portions can be assimilated better.\r\n- Better engineering practices are exercised:\r\n  - Solving big problems by dividing them in well contained, smaller problems.\r\n  - Exercising separation of concerns within the code changes.\r\n\r\n#### What can I do to optimize my changes\r\n\r\n- Use the PullRequestQuantifier to quantify your PR accurately\r\n  - Create a context profile for your repo using the [context generator](https://github.com/microsoft/PullRequestQuantifier/releases)\r\n  - Exclude files that are not necessary to be reviewed or do not increase the review complexity. Example: Autogenerated code, docs, project IDE setting files, binaries, etc. Check out the `Excluded` section from your `prquantifier.yaml` context profile. \r\n  - Understand your typical change complexity, drive towards the desired complexity by adjusting the label mapping in your `prquantifier.yaml` context profile.\r\n  - Only use the labels that matter to you, [see context specification](./docs/prquantifier-yaml.md) to customize your `prquantifier.yaml` context profile.\r\n- Change your engineering behaviors\r\n  - For PRs that fall outside of the desired spectrum, review the details and check if:\r\n    - Your PR could be split in smaller, self-contained PRs instead\r\n    - Your PR only solves one particular issue. (For example, don't refactor and code new features in the same PR).\r\n\r\n#### How to interpret the change counts in git diff output\r\n\r\n- One line was added: `+1 -0`\r\n- One line was deleted: `+0 -1`\r\n- One line was modified: `+1 -1` (git diff doesn't know about modified, it will\r\ninterpret that line like one addition plus one deletion)\r\n- Change percentiles: Change characteristics (addition, deletion, modification)\r\nof this PR in relation to all other PRs within the repository.\r\n\r\n</details>\r\n\r\n<p />\r\n\r\n------\r\n\r\nWas this comment helpful? <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiQUFBVGVjaEd1eSIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xNzg5NiIsIkV2ZW50VHlwZSI6IlRodW1ic1VwIn0=&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs up\"><strong>:thumbsup:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiQUFBVGVjaEd1eSIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xNzg5NiIsIkV2ZW50VHlwZSI6Ik5ldXRyYWwifQ==&amp;anonymous=True\" target=\"_blank\" title=\"Neutral\"><strong>&nbsp;:ok_hand:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiQUFBVGVjaEd1eSIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xNzg5NiIsIkV2ZW50VHlwZSI6IlRodW1ic0Rvd24ifQ==&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs down\"><strong>&nbsp;:thumbsdown:</strong></a> (<a href=\"MAILTO:prquantifier@microsoft.com\" title=\"Mail to prquantifier@microsoft.com\">Email</a>)\r\n[Customize PullRequestQuantifier](https://github.com/PowerShell/PowerShell/blob/master/.github/prquantifier.yaml) for this repository.\r\n\r\n",
      "created_at": "2022-08-18T22:01:51Z",
      "updated_at": "2022-08-18T22:01:51Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "Open PRs should not be assigned to milestone, so they are not assigned to the wrong milestone after they are merged.  For backport consideration, use a `backport` label. ",
      "created_at": "2022-08-18T22:50:21Z",
      "updated_at": "2022-08-18T22:50:21Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "Open PRs should not be assigned to milestone, so they are not assigned to the wrong milestone after they are merged.  For backport consideration, use a `backport` label. ",
      "created_at": "2022-08-18T22:50:25Z",
      "updated_at": "2022-08-18T22:50:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> > Does this address #17762 as well?\r\n> \r\n> From the descrption of it, it appears so.\r\n\r\nThere is another PR for the issue #17813",
      "created_at": "2022-08-19T05:01:52Z",
      "updated_at": "2022-08-19T05:01:52Z"
    },
    {
      "author": "AAATechGuy",
      "author_association": "CONTRIBUTOR",
      "body": "> We seem to be going around in circles. :-) To keep the current behavior for **7.3** we need to add an empty catch since we ignored the exceptions before and should ignore now:\r\n> \r\n> ```cs\r\n> catch (AggregateException)\r\n> {}\r\n> ```\r\n> \r\n> For 7.4 we will have to make new PR and add re-throw for the exceptions.\r\n\r\n@iSazonov :-) ya, I agree there is bit of back and forth. \r\n\r\n> Talking to @PaulHigin, let's defer taking any change here for 7.3 and make what we agree is the right change (throwing the inner exception from the aggregate) for 7.4 so we have opportunity to see if there's side effects.\r\n\r\nFrom what Steve mentioned in latest comment, \r\n- we do not check-in any fix for 7.3 as it's too late in the cycle. \r\n- we have just 1 PR (with the right fix), which would go in 7.4 (Oct-Nov timeframe)\r\n",
      "created_at": "2022-08-19T09:42:31Z",
      "updated_at": "2022-08-19T09:42:31Z"
    },
    {
      "author": "AAATechGuy",
      "author_association": "CONTRIBUTOR",
      "body": "> > > Does this address #17762 as well?\r\n> > \r\n> > \r\n> > From the descrption of it, it appears so.\r\n> \r\n> There is another PR for the issue #17813\r\n\r\n makes sense, and the fix here doesn't affect the other repro. \r\n Removed from description. ",
      "created_at": "2022-08-19T09:45:56Z",
      "updated_at": "2022-08-19T09:45:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> * we do not check-in any fix for 7.3 as it's too late in the cycle.\r\n\r\nSo we should add `catch (AggregateException) {}`, don't it?",
      "created_at": "2022-08-19T18:01:15Z",
      "updated_at": "2022-08-19T18:01:15Z"
    },
    {
      "author": "AAATechGuy",
      "author_association": "CONTRIBUTOR",
      "body": "> > * we do not check-in any fix for 7.3 as it's too late in the cycle.\r\n> \r\n> So we should add `catch (AggregateException) {}`, don't it?\r\n\r\n7.3 - no change. \r\n\r\n7.4 - we fix two issues: \r\na. `copyTask.Wait` - improve perf.\r\nb. we fix earlier issue that partial download silently fails. \r\n`a` is the fix. Newly changed behavior will throw `AggregateException` for any download/disk-space issues. This ex is not suppressed and shown to the ps-user. \r\n",
      "created_at": "2022-08-19T21:33:25Z",
      "updated_at": "2022-08-19T21:33:25Z"
    },
    {
      "author": "AAATechGuy",
      "author_association": "CONTRIBUTOR",
      "body": "> According to Steve's comment [#17896 (comment)](https://github.com/PowerShell/PowerShell/pull/17896#issuecomment-1219679734) (quoted below), the changes from this PR will not be included in 7.3.\r\n> \r\n> > Talking to @PaulHigin, let's defer taking any change here for 7.3 and make what we agree is the right change (throwing the inner exception from the aggregate) for 7.4 so we have opportunity to see if there's side effects.\r\n> \r\n> So, we should go with the desired behavior -- throwing inner exceptions from the aggregate exception.\r\n\r\n@daxian-dbw , `throwing inner exceptions from the aggregate exception`, what does this mean - could you suggest a code sample? \r\n\r\n\r\nMy thought is ... \r\nThe script will throw an AggregateException which is the right behavior, we do not suppress any exception. There could be multiple exceptions thrown by `copyTask`, for which I do not have the whole list. \r\n\r\nFrom a PS-user perspective, as @iSazonov tested out here https://github.com/PowerShell/PowerShell/pull/17896#issuecomment-1219117740 , AggregateException does display a sensible error.  \r\n",
      "created_at": "2022-08-20T07:51:10Z",
      "updated_at": "2022-08-20T07:51:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> could you suggest a code sample?\r\n\r\nAs I understand @SteveL-MSFT, for **7.3** we do semi perf fix with preserving current behavior:\r\n```c#\r\n            try\r\n            {\r\n                while (!copyTask.Wait(1000, cancellationToken))\r\n                {\r\n                    record.StatusDescription = StringUtil.Format(WebCmdletStrings.WriteRequestProgressStatus, output.Position);\r\n                    cmdlet.WriteProgress(record);\r\n                }\r\n\r\n                if (copyTask.IsCompleted)\r\n                {\r\n                    record.StatusDescription = StringUtil.Format(WebCmdletStrings.WriteRequestComplete, output.Position);\r\n                    cmdlet.WriteProgress(record);\r\n                }\r\n            }\r\n            catch (OperationCanceledException)\r\n            {\r\n            }\r\n            catch (AggregateException ae)\r\n            {\r\n            }\r\n```\r\nand for 7.4 we do full fix:\r\n```c#\r\n            try\r\n            {\r\n                while (!copyTask.Wait(1000, cancellationToken))\r\n                {\r\n                    record.StatusDescription = StringUtil.Format(WebCmdletStrings.WriteRequestProgressStatus, output.Position);\r\n                    cmdlet.WriteProgress(record);\r\n                }\r\n\r\n                if (copyTask.IsCompleted)\r\n                {\r\n                    record.StatusDescription = StringUtil.Format(WebCmdletStrings.WriteRequestComplete, output.Position);\r\n                    cmdlet.WriteProgress(record);\r\n                }\r\n            }\r\n            catch (OperationCanceledException)\r\n            {\r\n            }\r\n            catch (AggregateException)\r\n            {\r\n                ae.Handle((x) =>\r\n                {\r\n                    return false;  // Let all wrapped exceptions throw and be handled in calling layers\r\n                });\r\n            }\r\n```\r\nand also address second issue (hang) I mentioned above.",
      "created_at": "2022-08-20T17:03:22Z",
      "updated_at": "2022-08-20T17:03:22Z"
    },
    {
      "author": "AAATechGuy",
      "author_association": "CONTRIBUTOR",
      "body": "> As I understand @SteveL-MSFT, for **7.3** we do semi perf fix with preserving current behavior:\r\n\r\nNo, \r\n\r\nThat was a previous/ stale suggestion here - [comment1](https://github.com/PowerShell/PowerShell/pull/17896#issuecomment-1218683817).  \r\n\r\nIn the latest comment here - [comment2](https://github.com/PowerShell/PowerShell/pull/17896#issuecomment-1219679734), it was discussed, no fix will be taken for 7.3. Hence, the confusion. \r\nFix for both issues ( https://github.com/PowerShell/PowerShell/issues/17893 and https://github.com/PowerShell/PowerShell/issues/17931 ) will be checked-in together for 7.4 (Oct-Nov timeframe). \r\n\r\n\r\n>             catch (AggregateException)\r\n>             {\r\n>                 ae.Handle((x) =>\r\n>                 {\r\n>                     return false;  // Let all wrapped exceptions throw and be handled in calling layers\r\n>                 });\r\n>             }\r\n\r\nNow, for 7.4, I discussed with @PaulHigin and agreed offline, there is no need to catch `AggregateException` and use `ae.Handle`. `ae.Handle` does not unwrap the exception, instead it just throws another `AggregateException` based on the filter provided. There is no point in handling it, if we do not want to suppress any exception. \r\n\r\nHope this clarifies. ",
      "created_at": "2022-08-21T02:17:56Z",
      "updated_at": "2022-08-21T17:25:26Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "We can only throw one exception, so it will have to be the AggregateException, if it contains more than one inner exception.  I don't think it is worth checking and we just allow the AggregateException to propagate.",
      "created_at": "2022-08-22T15:21:29Z",
      "updated_at": "2022-08-22T15:21:29Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Can we merge this now or do we wait 7.4?",
      "created_at": "2022-08-22T18:11:10Z",
      "updated_at": "2022-08-22T18:11:10Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov I believe we've branched for 7.3, so master branch is effectively 7.4 now and should be ok to merge.  We cherry pick for 7.3 at this point.",
      "created_at": "2022-08-22T20:14:31Z",
      "updated_at": "2022-08-22T20:14:31Z"
    },
    {
      "author": "AAATechGuy",
      "author_association": "CONTRIBUTOR",
      "body": "> @iSazonov I believe we've branched for 7.3, so master branch is effectively 7.4 now and should be ok to merge. We cherry pick for 7.3 at this point.\r\n\r\nnice. Can someone help merge this PR then. I don't appear to have permissions. thanks!",
      "created_at": "2022-08-22T22:43:01Z",
      "updated_at": "2022-08-22T22:43:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Thanks for clarify!\r\n\r\n@AAATechGuy thanks for your contribution! Do you have plans to continue with fixing socket timeout https://github.com/PowerShell/PowerShell/pull/17896#issuecomment-1219117740?",
      "created_at": "2022-08-23T05:32:56Z",
      "updated_at": "2022-08-23T05:32:56Z"
    },
    {
      "author": "AAATechGuy",
      "author_association": "CONTRIBUTOR",
      "body": "> @SteveL-MSFT Thanks for clarify!\r\n> \r\n> @AAATechGuy thanks for your contribution! Do you have plans to continue with fixing socket timeout [#17896 (comment)](https://github.com/PowerShell/PowerShell/pull/17896#issuecomment-1219117740)?\r\n\r\nThanks for the merge, and for all the reviews, discussions and testing. \r\n\r\n@iSazonov , no, I don't plan to fix socket timeout issue, at the moment. ",
      "created_at": "2022-08-23T06:17:05Z",
      "updated_at": "2022-08-23T06:17:05Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "/backport to release/v7.2.7",
      "created_at": "2022-09-27T22:59:05Z",
      "updated_at": "2022-09-27T22:59:05Z"
    }
  ],
  "created_at": "2022-08-14T08:23:55Z",
  "number": 17896,
  "state": "closed",
  "title": "Remove 1s minimum delay in Invoke-WebRequest for small files, and prevent file-download-error suppression.",
  "updated_at": "2022-10-13T18:30:07Z"
}