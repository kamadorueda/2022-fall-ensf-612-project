{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15222",
  "author": "johnjelinek",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\nA newline is getting added to the output when running `echo` even if I tell it not to (with `-n` flag). It also looks like `Write-Out` doesn't support `-NoNewLine`.\r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\necho 'hello' | base64\r\n```\r\n\r\n## Expected behavior\r\n\r\n```none\r\n> echo 'hello' | base64\r\naGVsbG8K\r\n> echo -n 'hello' | base64\r\naGVsbG8=\r\n```\r\n\r\n## Actual behavior\r\n\r\n```none\r\n> echo 'hello' | base64\r\naGVsbG8K\r\n> echo -n 'hello' | base64\r\naGVsbG8K\r\n```\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\n> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Darwin 19.6.0 Darwin Kernel Version 19.6.0: Tue Jan 12 22:13:05 PST 2021; root:xnu-6153.141.16~1/RELEASE_X86_64\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "`echo` is an alias for Write-Output. Your `-n` is treated as `-NoEnumerate`, not `-NoNewLine` (as you said, Write-Output doesn't have a -NoNewLine).\r\n\r\nPretty sure this is a bit of a wider issue, given that simply `\"hello\" | base64` exhibits the same issue.",
      "created_at": "2021-04-13T19:21:19Z",
      "updated_at": "2021-04-13T19:23:14Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Yes, unfortunately the trailing newline can currently not be prevented - please see #5974",
      "created_at": "2021-04-13T21:43:37Z",
      "updated_at": "2021-04-13T21:43:37Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "As a workaround you can use the .NET method instead of relying on platform specific binaries being place.\r\n\r\n```powershell\r\n[Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes('hello'))\r\n```\r\n\r\nIt's more verbose but the benefit is that it it's portable, unlike calling `base64` which won't work on hosts without that binary. You also have fine control over the encoding used on the string.\r\n\r\nBut if `base64` is just an example to show your problem and the issue is around piping data has the newline then mkelement0's issue #5974 covers that.",
      "created_at": "2021-04-13T22:01:35Z",
      "updated_at": "2021-04-13T22:03:50Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@jborean93, on a quick meta note: I know that my user name _looks_ like it has the word \"element\" in it, but it actually doesn't (the unexciting truth is that it is simply a contraction of my name).\r\n",
      "created_at": "2021-04-14T16:23:27Z",
      "updated_at": "2021-04-14T19:27:35Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> @jborean93, on a quick meta note: I know that my user name _looks_ like it has the word \"element\" in it, but it actually doesn't (the unexciting truth is that it is simply a contraction of my name).\r\n\r\nI 100% still read it in my head as \"MK Element\" even after noticing that's not what it is \ud83d\ude01 ",
      "created_at": "2021-04-14T19:07:48Z",
      "updated_at": "2021-04-14T19:07:54Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "My apologies, I'm totally with SeeminglyScience where that's how I say it in my head but I'll have to try harder next time :)",
      "created_at": "2021-04-14T19:11:43Z",
      "updated_at": "2021-04-14T19:11:54Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SeeminglyScience and @jborean93: \ud83d\ude01 .\r\nNo worries, @jborean93 - it's an understandable mistake to make, but I figured since we'll likely have more conversations in the future, I'd clarify.",
      "created_at": "2021-04-14T19:29:59Z",
      "updated_at": "2021-04-14T19:30:09Z"
    },
    {
      "author": "johnjelinek",
      "author_association": "NONE",
      "body": "@jborean93: so, I'm the only one on the team using `pwsh` for mac right now. The rest are on zsh/fish -- I wanted to write docs that are portable to the rest of my team. The `.NET` way won't work for my use-case. 'Tis a shame, I will have to switch shells to be pragmatic for now.",
      "created_at": "2021-04-14T22:47:45Z",
      "updated_at": "2021-04-14T22:47:45Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@johnjelinek, calling the platform-native shell is always an option:\r\n\r\n```powershell\r\nPS> sh -c \"printf %s 'hello' | base64\"\r\naGVsbG8K=\r\n```\r\n\r\n\r\n",
      "created_at": "2021-04-14T22:51:39Z",
      "updated_at": "2021-04-14T22:56:52Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "To generalize the approach (see [caveat below](https://github.com/PowerShell/PowerShell/issues/15222#issuecomment-819907192)):\r\n\r\n```powershell\r\nPS> sh -c 'printf %s \"$1\" | base64' - 'hello'\r\naGVsbG8K=\r\n```",
      "created_at": "2021-04-14T22:55:54Z",
      "updated_at": "2021-04-14T23:10:18Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "P.S., @johnjelinek: passing a string such as `'printf %s \"$1\" | base64'` to _external programs_ (such as `sh`) currently results in the  embedded `\"` characters effectively getting _stripped_, which is a longstanding problem - see https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-562334606. PR #14692 is aiming to fix it on an opt-in basis, initially as an experimental feature. #15143 additionally proposes important accommodations for command-line programs on Windows.",
      "created_at": "2021-04-14T23:09:39Z",
      "updated_at": "2021-04-14T23:11:44Z"
    },
    {
      "author": "johnjelinek",
      "author_association": "NONE",
      "body": "Ok, thanks for the help! Do we want to leave this open or close the issue?",
      "created_at": "2021-04-14T23:14:35Z",
      "updated_at": "2021-04-14T23:14:35Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@johnjelinek:\r\n\r\n* Your original (legitimate) complaint is covered by #5974, so, yes, I suggest closing this issue.\r\n\r\n* Independently, if something is unclear about the comments above - as your use of the \ud83d\ude15 emoji suggests -  feel free to ask for clarification.\r\n  * By contrast, if your use of \ud83d\ude15 is meant to express _disapproval of the status quo_, I suggest expressing that verbally, to avoid confusion.",
      "created_at": "2021-04-14T23:27:56Z",
      "updated_at": "2021-04-14T23:27:56Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "PowerShell Core 7.2.0-preview.5 has just been released, which includes the `PSNativeCommandArgumentPassing` [experimental feature](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_Experimental_Features) that fixes the embedded-double-quotes problem _fully_ on Unix, and _partially_ on Windows. (Preview releases have experimental features turned _on by default_, but not release candidates and regular releases).\r\n\r\nThus, in PowerShell Core 7.2.0-preview.5 the following now works correctly on Unix-like platforms (assuming the experimental feature is on and the `$PSNativeCommandArgumentPassing` preference variable is at its default, `'Standard'`):\r\n\r\n```powershell\r\n# Malfunctions in PowerShell Core 7.2.0-preview.4 and below, because `\"$1\"` turns into `$1`, which\r\n# makes `sh` perform word-splitting, resulting in *two* arguments.\r\nPS> sh -c 'printf %s \"$1\" | base64' - 'hello more'\r\naGVsbG8gbW9yZQ==\r\n```\r\n",
      "created_at": "2021-04-15T14:40:30Z",
      "updated_at": "2021-04-15T14:40:30Z"
    }
  ],
  "created_at": "2021-04-13T18:21:49Z",
  "number": 15222,
  "state": "open",
  "title": "NewLine is added to output when told to explicitly drop NewLine",
  "updated_at": "2021-04-15T14:40:30Z"
}