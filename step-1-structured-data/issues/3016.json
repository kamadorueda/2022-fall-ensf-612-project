{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3016",
  "author": "chunqingchen",
  "body": "This is a customer feedback according to issue\r\nhttps://github.com/PowerShell/PowerShellGet/issues/87\r\n\r\nwhen user input CmdletsToExport = '@() ' in module manifest, test-modulemanifest suppose to give friendly warning about this.\r\n\r\n\r\nEnvironment data\r\n----------------\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.15007.1000\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.15007.1000\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I'm not sure I understand what the proposed warning should be.\r\n\r\nI don't think we should test for a specific string, e.g. `'@()'`, that seems like too much of a special case.\r\n\r\nIdeally we could warn on exported commands that don't exist, though that's harder or impossible to implement for modules that dynamically define commands.\r\n\r\nAs a compromise, we could warn if any of the exported commands don't match a regex, something like `^\\w+-\\w+$' for cmdlets and `^\\w+$` for functions, variables, and aliases. This would just be a warning though, so if the regex is too aggressive, we don't cause problems for valid scenarios.",
      "created_at": "2017-01-19T19:40:03Z",
      "updated_at": "2017-01-19T19:40:03Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "How about if Test-ModuleManifest just issues the same warning Import-Module would about the name not having a valid verb ;-)",
      "created_at": "2017-01-19T19:44:27Z",
      "updated_at": "2017-01-19T19:44:27Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Module manifests, by design, are aggregators of modules. You can have a module that contains nothing but a manifest. That manifest then imports (multiple) other modules and re-exports all, some or none of the imported elements. (This is why Import-Module -verbose shows both import and export messages). Assigning an empty array explicitly means \"export no cmdlets/variables/aliases\" i.e. it's an explicit valid value. That said, it's also unlikely to be used so having Test-ModuleManifest (and Update-ModuleManifest) emit a warning when any of the export field _values_ are set to empty array i.e. @() makes sense.  It's a simple value test that I think we should take.",
      "created_at": "2017-02-17T18:58:19Z",
      "updated_at": "2017-02-17T18:58:19Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I updated the title - because it confused both @BrucePay and myself.\r\n\r\n@Jaykul - a warning on invalid verbs would work for `CmdletsToExport`, but functions and aliases do not necessarily need a verb at all.\r\n\r\nAs it's just a warning - it seems fine to warn on any exported commands that don't match some regex, something like `'^\\w(-\\w)?$'`.",
      "created_at": "2017-02-17T19:14:34Z",
      "updated_at": "2017-02-17T19:14:34Z"
    }
  ],
  "created_at": "2017-01-19T06:04:32Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets"
  ],
  "number": 3016,
  "state": "open",
  "title": "Check for invalid exported commands in Test-ModuleManifest",
  "updated_at": "2017-05-16T21:17:49Z"
}