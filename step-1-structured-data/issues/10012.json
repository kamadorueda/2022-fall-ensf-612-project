{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10012",
  "author": "jzabroski",
  "body": "# Current Behavior\r\nI am not productive as possible as a C# developer writing PowerShell DevOps infrastructure, because:\r\n\r\n1. `Microsoft.Management.Infrastructure` exists on nuget.org\r\n2. `Microsoft.Management.Infrastructure.CimCmdlets` does not exist on nuget.org\r\n3. `Microsoft.Management.Infrastructure.CimCmdlets.dll` must be manually copied from the local modules path into a C# .csproj directory and explicitly refererenced.  Not desirable as it binds my C# Cmdlets to a specific version of `Microsoft.Management.Infrastructure.CimCmdlets.dll`\r\n\r\n# Desired Behavior\r\nEither:\r\n1. Adopt \"SDK metapackage\" for PowerShell similar to .NET Standard / .NET Core metapackages\r\n2. Publish a NuGet package for CimCmdlets so we can be productive writing DevOps infrastructure in C#.\r\n\r\nDuplicate of #8119 ",
  "closed_at": "2020-01-13T16:28:27Z",
  "comments": [
    {
      "author": "jzabroski",
      "author_association": "NONE",
      "body": "I'm debating closing this - I see now that my request is probably misguided:\r\n\r\n1. I was trying to invoke GetCimInstanceCommand directly from `Microsoft.Management.Infrastructure.Cmdlets`\r\n2. The \"easier\" approach is to use the more fundamental `Microsoft.Management.Infrastructure` package/dll OR use the PowerShell SDK via `PowerShell.Create`.\r\n\r\nThe fundamental problem is to get the goodness of PowerShell's ability to handle partial failures as non-terminating, but get the goodness of C# + Visual Studio + ReSharper to debug and write code quickly.\r\n\r\nThere is a library on CodePlex called MissingLinq which tries to expose a lot of CIM functionality via LINQ, and I think that is a powerful concept that would help unify PowerShell and C# interfaces to CIM.  However, MissingLinq is over 2 years old and does not seem to be actively maintained.",
      "created_at": "2019-06-26T19:32:31Z",
      "updated_at": "2019-06-26T19:32:31Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "cc @adityapatwardhan ",
      "created_at": "2019-07-05T21:36:12Z",
      "updated_at": "2019-07-05T21:36:12Z"
    },
    {
      "author": "jzabroski",
      "author_association": "NONE",
      "body": "Just to be clear, I think we may want to retitle this thread as \"Allow composable Cim calls from C#\".  This would retain the current package set-up, while allowing infrastructure engineers to write infrastructure mostly in C#.\r\n\r\nLet me know if you understand why this is painful for me.  It's probably not obvious to someone who only does PowerShell and never uses C#.\r\n\r\nFor what it's worth, we're slowly making progress moving our PowerShell interfaces to C# and then exposing them as PowerShell Commands via thin wrappers around the C# logic we write.  We have found it significantly easier to benchmark and optimize the hell out of things like pinging giant networks of machines, doing scheduled reboots in ways that don't suck (_Hello, Microsoft Operations Manager_), validating permissions on file shares, etc.",
      "created_at": "2019-07-05T21:45:50Z",
      "updated_at": "2019-07-05T21:47:28Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "This is a duplicate of #8119 ",
      "created_at": "2020-01-13T16:28:27Z",
      "updated_at": "2020-01-13T16:28:27Z"
    }
  ],
  "created_at": "2019-06-26T16:38:29Z",
  "number": 10012,
  "state": "closed",
  "title": "Publish Microsoft.Management.Infrastructure.CimCmdlets as NuGet package",
  "updated_at": "2020-01-13T16:28:27Z"
}