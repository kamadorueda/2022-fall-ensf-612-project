{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16937",
  "author": "daxian-dbw",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nFix #16870\r\n\r\nUpdate the parsing code to only support the syntax `$var.Method[TypeName1 <, TypeName2 ...>]` for method generic arguments, not the syntax `$var.Method[[TypeName1] <, [TypeName2] ...>]`.\r\n\r\nThe latter syntax has been supported for type expression since the beginning, but it's ambiguous in this scenario because we could be looking at an indexing operation on a property like: `$var.Property[<expression>]` and the `<expression>` could start with a type expression like `[TypeName]::Method()`, or even just a single type expression acting as a key to a hashtable property. Such cases will cause ambiguities.\r\n\r\nEven though it might be possible to write code that sorts out the ambiguity and continue to support the latter syntax for method generic arguments, I choose not to do so, because:\r\n  1. that will definitely increase the complexity of the parsing code and also make it fragile.\r\n  2. the latter syntax hurts readability a lot due to the number of opening/closing brackets.\r\n\r\nThe downside is that the assembly-qualified type names won't be supported for method generic arguments, but that's likely not a problem in practice, and we can revisit if it turns out otherwise.\r\n\r\n-----\r\n\r\nBesides, there is no point to allow declaring generic arguments for a property. Even for method group, it makes no sense to allow generic arguments to be declared for it because we don't do anything with the generic arguments for a method group, so no validation will be done -- you will see the following script works in 7.3-preview.1 unexpectedly:\r\n```\r\nPS:1> [string]::Join[nonexisting]\r\n\r\nOverloadDefinitions\r\n-------------------\r\nstatic string Join(char separator, Params string[] value)\r\nstatic string Join(string separator, Params string[] value)\r\nstatic string Join(char separator, string[] value, int startIndex, int count)\r\nstatic string Join(string separator, string[] value, int startIndex, int count)\r\nstatic string Join(string separator, System.Collections.Generic.IEnumerable[string] values)\r\nstatic string Join(char separator, Params System.Object[] values)\r\nstatic string Join(string separator, Params System.Object[] values)\r\nstatic string Join[T](char separator, System.Collections.Generic.IEnumerable[T] values)\r\nstatic string Join[T](string separator, System.Collections.Generic.IEnumerable[T] values)\r\n```\r\n\r\nSo, the related code in AST and parser are removed, and declaring a generic argument on a property will generate the same parsing errors as before:\r\n```\r\nPS:1> [string]::Join[nonexisting]\r\nParserError:\r\nLine |\r\n   1 |  [string]::Join[nonexisting]\r\n     |                 ~\r\n     | Array index expression is missing or not valid.\r\n```\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n\r\n",
  "closed_at": "2022-03-03T17:21:22Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "This looks good to me overall!\r\n\r\nI would ask that we add a test similar to this actual use case from the linked issue:\r\n```ps1\r\n\t\t[IPAddress]::Parse(\r\n\t\t\t$_.IPSubnet[\r\n\t\t\t\t([Array]::IndexOf($_.IPAddress, $_.IPAddress[0]))\r\n\t\t\t]\r\n\t\t)\r\n```\r\n\r\nIt's a bit of an odd case but does look like a pretty solid test case where we should be recognising the index expression instead of a partial generic method syntax.",
      "created_at": "2022-03-01T15:08:34Z",
      "updated_at": "2022-03-01T15:08:34Z"
    },
    {
      "author": "kborowinski",
      "author_association": "NONE",
      "body": "> This looks good to me overall!\r\n> \r\n> I would ask that we add a test similar to this actual use case from the linked issue:\r\n> \r\n> ```powershell\r\n> \t\t[IPAddress]::Parse(\r\n> \t\t\t$_.IPSubnet[\r\n> \t\t\t\t([Array]::IndexOf($_.IPAddress, $_.IPAddress[0]))\r\n> \t\t\t]\r\n> \t\t)\r\n> ```\r\n> \r\n> It's a bit of an odd case but does look like a pretty solid test case where we should be recognising the index expression instead of a partial generic method syntax.\r\n\r\nIt indeed looks a bit odd but it's just a simplified version of following code that selects IP subnet from IP subnets array based on IP address index in corresponding IP address array:\r\n```powershell\r\n...\r\n$IPAddress = $_.IPAddress | Where-Object {$_ -like $using:Filter} | Select-Object -First 1\r\n$IPSubnet  = [IPAddress]::Parse(($_.IPSubnet[[Array]::IndexOf($_.IPAddress, $IPAddress)]))\r\n...\r\n```",
      "created_at": "2022-03-01T21:31:56Z",
      "updated_at": "2022-03-01T21:31:56Z"
    },
    {
      "author": "pull-request-quantifier[bot]",
      "author_association": "NONE",
      "body": "### ![](https://img.shields.io/static/v1?label=Quantified&message=Medium&color=yellow)\r\n\r\nThis PR has `124` quantified lines of changes. In general, a change size of upto `200` lines is ideal for the best PR experience!\r\n\r\n------\r\n\r\n<details >\r\n    <summary display=\"inline\"> <strong>Quantification details</strong></summary>\r\n    <p />\r\n\r\n```\r\nLabel      : Medium\r\nSize       : +71 -53\r\nPercentile : 44.8%\r\n\r\nTotal files changed: 3\r\n\r\nChange summary by file extension:\r\n.cs : +17 -42\r\n.ps1 : +54 -11\r\n```\r\n> Change counts above are quantified counts, based on the [PullRequestQuantifier customizations](https://github.com/microsoft/PullRequestQuantifier/blob/main/docs/prquantifier-yaml.md).\r\n    \r\n</details>\r\n\r\n\r\n<details>\r\n    <summary display=\"inline\"> <strong>Why proper sizing of changes matters</strong> </summary>\r\n    <p/>\r\n    <p/>\r\n\r\nOptimal pull request sizes drive a better predictable PR flow as they strike a\r\nbalance between between PR complexity and PR review overhead. PRs within the\r\noptimal size (typical small, or medium sized PRs) mean:\r\n\r\n- Fast and predictable releases to production:\r\n  - Optimal size changes are more likely to be reviewed faster with fewer\r\niterations.\r\n  - Similarity in low PR complexity drives similar review times.\r\n- Review quality is likely higher as complexity is lower:\r\n  - Bugs are more likely to be detected.\r\n  - Code inconsistencies are more likely to be detetcted.\r\n- Knowledge sharing is improved within the participants:\r\n  - Small portions can be assimilated better.\r\n- Better engineering practices are exercised:\r\n  - Solving big problems by dividing them in well contained, smaller problems.\r\n  - Exercising separation of concerns within the code changes.\r\n\r\n#### What can I do to optimize my changes\r\n\r\n- Use the PullRequestQuantifier to quantify your PR accurately\r\n  - Create a context profile for your repo using the [context generator](https://github.com/microsoft/PullRequestQuantifier/releases)\r\n  - Exclude files that are not necessary to be reviewed or do not increase the review complexity. Example: Autogenerated code, docs, project IDE setting files, binaries, etc. Check out the `Excluded` section from your `prquantifier.yaml` context profile. \r\n  - Understand your typical change complexity, drive towards the desired complexity by adjusting the label mapping in your `prquantifier.yaml` context profile.\r\n  - Only use the labels that matter to you, [see context specification](./docs/prquantifier-yaml.md) to customize your `prquantifier.yaml` context profile.\r\n- Change your engineering behaviors\r\n  - For PRs that fall outside of the desired spectrum, review the details and check if:\r\n    - Your PR could be split in smaller, self-contained PRs instead\r\n    - Your PR only solves one particular issue. (For example, don't refactor and code new features in the same PR).\r\n\r\n#### How to interpret the change counts in git diff output\r\n\r\n- One line was added: `+1 -0`\r\n- One line was deleted: `+0 -1`\r\n- One line was modified: `+1 -1` (git diff doesn't know about modified, it will\r\ninterpret that line like one addition plus one deletion)\r\n- Change percentiles: Change characteristics (addition, deletion, modification)\r\nof this PR in relation to all other PRs within the repository.\r\n\r\n</details>\r\n\r\n<p />\r\n\r\n------\r\n\r\nWas this comment helpful? <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiZGF4aWFuLWRidyIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xNjkzNyIsIkV2ZW50VHlwZSI6IlRodW1ic1VwIn0=&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs up\"><strong>:thumbsup:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiZGF4aWFuLWRidyIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xNjkzNyIsIkV2ZW50VHlwZSI6Ik5ldXRyYWwifQ==&amp;anonymous=True\" target=\"_blank\" title=\"Neutral\"><strong>&nbsp;:ok_hand:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiZGF4aWFuLWRidyIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xNjkzNyIsIkV2ZW50VHlwZSI6IlRodW1ic0Rvd24ifQ==&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs down\"><strong>&nbsp;:thumbsdown:</strong></a> (<a href=\"MAILTO:prquantifier@microsoft.com\" title=\"Mail to prquantifier@microsoft.com\">Email</a>)\r\n[Customize PullRequestQuantifier](https://github.com/PowerShell/PowerShell/blob/master/.github/prquantifier.yaml) for this repository.\r\n\r\n",
      "created_at": "2022-03-03T02:57:11Z",
      "updated_at": "2022-03-03T02:57:11Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The `Invoke-WebRequest` failures are known test issues, not related to changes in this PR.",
      "created_at": "2022-03-03T17:21:00Z",
      "updated_at": "2022-03-03T17:21:00Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.3.0-preview.3` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.3.0-preview.3)\n",
      "created_at": "2022-03-21T21:57:11Z",
      "updated_at": "2022-03-21T21:57:11Z"
    }
  ],
  "created_at": "2022-02-28T23:59:51Z",
  "number": 16937,
  "state": "closed",
  "title": "Fix the parsing code for method generic arguments",
  "updated_at": "2022-03-21T21:57:11Z"
}