{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14253",
  "author": "rmbolger",
  "body": "After upgrading from PowerShell 7.0.3 to 7.1.0 on a fully patched Ubuntu 18.04 server with OpenSSL 1.1.1, web cmdlets (Invoke-RestMethod and Invoke-WebRequest) throw a `Authentication failed, see inner exception.` when connecting to our Infoblox API (which is running the latest available version of its NIOS OS, 8.5.1). Expanding the inner exception reveals the underlying problem is an SSL handshake failure. Downgrading PowerShell back to 7.0.3 fixes the problem.\r\n\r\n*NOTE: Requests to other internal TLS sites using PS 7.1.0 work just fine. This only seems to be a problem specifically with Infoblox (that I've found so far).*\r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\n# a simple call to the grid master's documentation endpoint which requires no authentication\r\nInvoke-RestMethod https://gridmaster.test/wapidoc/\r\n```\r\n\r\n## Expected behavior\r\n\r\nThe web request succeeds return normal responses.\r\n\r\n## Actual behavior\r\n\r\n```none\r\nInvoke-RestMethod: Authentication failed, see inner exception.\r\n```\r\n\r\nSerializing the exception using `$Error[0].Exception.ToString()` produces the following output:\r\n\r\n```none\r\nSystem.Net.Http.HttpRequestException: The SSL connection could not be established, see inner exception.\r\n ---> System.Security.Authentication.AuthenticationException: Authentication failed, see inner exception.\r\n ---> Interop+OpenSsl+SslException: SSL Handshake failed with OpenSSL error - SSL_ERROR_SSL.\r\n ---> Interop+Crypto+OpenSslCryptographicException: error:14094410:SSL routines:ssl3_read_bytes:sslv3 alert handshake failure\r\n   --- End of inner exception stack trace ---\r\n   at Interop.OpenSsl.DoSslHandshake(SafeSslHandle context, ReadOnlySpan`1 input, Byte[]& sendBuf, Int32& sendCount)\r\n   at System.Net.Security.SslStreamPal.HandshakeInternal(SafeFreeCredentials credential, SafeDeleteSslContext& context, ReadOnlySpan`1 inputBuffer, Byte[]& outputBuffer, SslAuthenticationOptions sslAuthenticationOptions)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Security.SslStream.ForceAuthenticationAsync[TIOAdapter](TIOAdapter adapter, Boolean receiveFirst, Byte[] reAuthenticationData, Boolean isApm)\r\n   at System.Net.Http.ConnectHelper.EstablishSslConnectionAsyncCore(Boolean async, Stream stream, SslClientAuthenticationOptions sslOptions, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.EstablishSslConnectionAsyncCore(Boolean async, Stream stream, SslClientAuthenticationOptions sslOptions, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.SendAsyncCore(HttpRequestMessage request, HttpCompletionOption completionOption, Boolean async, Boolean emitTelemetryStartStop, CancellationToken cancellationToken)\r\n   at Microsoft.PowerShell.Commands.WebRequestPSCmdlet.GetResponse(HttpClient client, HttpRequestMessage request, Boolean keepAuthorization) in /PowerShell/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/Common/WebRequestPSCmdlet.Common.cs:line 1361\r\n   at Microsoft.PowerShell.Commands.WebRequestPSCmdlet.ProcessRecord() in /PowerShell/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/Common/WebRequestPSCmdlet.Common.cs:line 1518\r\n```\r\n\r\n## Environment data\r\n\r\n`$PSVersionTable` ouput\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.0\r\nPSEdition                      Core\r\nGitCommitId                    7.1.0\r\nOS                             Linux 4.15.0-124-generic #127-Ubuntu SMP Fri Nov 6 10:54:43 UTC 2020\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n`apt-cache policy openssl` output\r\n\r\n```none\r\nopenssl:\r\n  Installed: 1.1.1-1ubuntu2.1~18.04.6\r\n  Candidate: 1.1.1-1ubuntu2.1~18.04.6\r\n  Version table:\r\n *** 1.1.1-1ubuntu2.1~18.04.6 500\r\n        500 http://archive.ubuntu.com/ubuntu bionic-updates/main amd64 Packages\r\n        500 http://security.ubuntu.com/ubuntu bionic-security/main amd64 Packages\r\n        100 /var/lib/dpkg/status\r\n     1.1.0g-2ubuntu4 500\r\n        500 http://archive.ubuntu.com/ubuntu bionic/main amd64 Packages\r\n```\r\n\r\nUnfortunately, Infoblox doesn't allow root access to the appliance's operating system or webserver to give exact versions on things there. But the managed CLI does allow some ability to tweak TLS protocol versions and ciphers. These are the current values. TLSv1.3 is not an option and the ciphers in the list are all that is available.\r\n\r\n```none\r\n> show ssl_tls_protocols\r\nTLSv1.2\r\n> show ssl_tls_ciphers\r\n  1. TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 enabled\r\n  2. TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 enabled\r\n  3. TLS_DHE_RSA_WITH_AES_128_CBC_SHA    enabled\r\n  4. TLS_DHE_RSA_WITH_AES_256_CBC_SHA    enabled\r\n  5. TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 enabled\r\n  6. TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 enabled\r\n  7. TLS_RSA_WITH_AES_128_GCM_SHA256     enabled\r\n  8. TLS_RSA_WITH_AES_128_CBC_SHA        enabled\r\n  9. TLS_RSA_WITH_AES_128_CBC_SHA256     enabled\r\n 10. TLS_RSA_WITH_3DES_EDE_CBC_SHA       enabled\r\n 11. TLS_RSA_WITH_AES_256_GCM_SHA384     enabled\r\n 12. TLS_RSA_WITH_AES_256_CBC_SHA        enabled\r\n 13. TLS_RSA_WITH_AES_256_CBC_SHA256     enabled\r\n     TLS_DHE_DSS_WITH_AES_256_CBC_SHA    disabled\r\n     TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA    disabled\r\n     TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA    disabled\r\n     TLS_DHE_DSS_WITH_AES_128_CBC_SHA    disabled\r\n     TLS_RSA_WITH_RC4_128_SHA            disabled\r\n     TLS_DHE_DSS_WITH_AES_256_GCM_SHA384 disabled\r\n     TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 disabled\r\n     TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 disabled\r\n     TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 disabled\r\n```",
  "closed_at": "2020-11-26T04:00:04Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@rmbolger Thanks for your investigations!\r\n\r\nPowerShell does directly nothing with SSL - it utilize .Net. HttpClient class. Please open issue in .Net Runtime repository. (If you could make simple C# demo app it helped them.)\r\n\r\nNotice, PowerShell 7.0 is on .Net 3.1, PowerShell 7.1 is on .Net 5.0.",
      "created_at": "2020-11-25T03:45:25Z",
      "updated_at": "2020-11-25T03:45:25Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as external and has not had any activity for **1 day**. It has been be closed for housekeeping purposes.",
      "created_at": "2020-11-26T04:00:03Z",
      "updated_at": "2020-11-26T04:00:03Z"
    },
    {
      "author": "rmbolger",
      "author_association": "NONE",
      "body": "Just to follow up here so answers are easier to find. Here's are the details on what is needed to fix the issue.\r\n\r\nThe crux of the issue deals with a change in the default behavior for TLS in .NET 5.0 that is described in this doc.\r\nhttps://docs.microsoft.com/en-us/dotnet/core/compatibility/cryptography/5.0/default-cipher-suites-for-tls-on-linux\r\n\r\nIn summary, .NET 5.0 will respect `CipherString` settings (among others) in the OS's `/etc/ssl/openssl.cnf` file. But if the settings aren't specified (which is the default in Ubuntu 18.04), .NET 5.0 defaults to a very restrictive/secure/modern default set of ciphers whereas .NET 3.1 defaults to a very loose/compatible set of ciphers. So if you are connecting to services that aren't capable of modern ciphers, you need to configure the OS's config to allow one or more of the ciphers your service *does* support. The other option is a code level change in your app that deals with `CipherSuitePolicy` and `SslStream` objects. But since my issue is with PowerShell, I don't have control of the code. So my only option is the OS config change.\r\n\r\nIn my particular case, I decided to use the [Mozilla SSL Configuration Generator](https://ssl-config.mozilla.org/) on the \"Intermediate\" configuration setting as a guide for what ciphers to allow while remaining compatible, but still as secure as possible. And I added the following to my `/etc/ssl/openssl.cnf` file right before the `[ new_oids ]` section.\r\n\r\n```none\r\nopenssl_conf = default_conf\r\n\r\n[default_conf]\r\nssl_conf = ssl_sect\r\n\r\n[ssl_sect]\r\nsystem_default = system_default_sect\r\n\r\n[system_default_sect]\r\nCipherString = ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384\r\n```\r\n\r\nThe last two in the list match ciphers that are available from the Infoblox appliance. When re-testing both my .NET sample app and PowerShell's web cmdlets, neither throw an error anymore.\n\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/dotnet/core/compatibility/cryptography/5.0/default-cipher-suites-for-tls-on-linux\">Breaking change: Default TLS cipher suites for .NET on Linux - .NET Core</a></strong></div><div>Learn about the breaking change in .NET 5.0 where .NET, on Linux, now respects the OpenSSL configuration for default cipher suites when doing TLS/SSL.</div></blockquote>",
      "created_at": "2020-11-26T05:57:41Z",
      "updated_at": "2020-11-26T05:57:43Z"
    }
  ],
  "created_at": "2020-11-25T01:52:10Z",
  "labels": [
    "Issue-Question",
    "Resolution-External"
  ],
  "number": 14253,
  "state": "closed",
  "title": "SSL Handshake failed in 7.1.0 on Ubuntu 18.04 with OpenSSL 1.1.1",
  "updated_at": "2020-11-26T05:57:43Z"
}