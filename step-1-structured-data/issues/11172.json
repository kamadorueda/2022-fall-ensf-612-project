{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11172",
  "author": "scrthq",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\nAfter updating to PowerShell 7-preview.6, I'm no longer able to import the ActiveDirectory module without providing the full path due to `C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules` no longer being in `$env:PSModulePath`. I know there was an update to `Import-Module` with this version that would use implicit remoting to import the module via Windows PowerShell, but it does not appear to be working as expected.\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\nImport-Module ActiveDirectory\r\n```\r\n\r\n# Expected behavior\r\n\r\nModule imports successfully by name.\r\n\r\n# Actual behavior\r\n\r\n```none\r\n>> Import-Module ActiveDirectory\r\nImport-Module: The specified module 'ActiveDirectory' was not loaded because no valid module file was found in any module directory.\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-preview.6\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-preview.6\r\nOS                             Microsoft Windows 10.0.18362\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u0393\u00c7\u00aa}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nCC @SteveL-MSFT ",
  "closed_at": "2019-12-10T00:25:09Z",
  "comments": [
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "@scrthq can you please provide additional info:\r\n1) `$env:PSModulePath` from your repro;\r\n2) it feels like there is expectation that \"`C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules` no longer being in `$env:PSModulePath` \" is normal. Can you please clarify why do you have such expectation?\r\n3) I was told that latest `ActiveDirectory` module is actually Core-compatible. To double-check this can you please copy-pase the contents of your `C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\Modules\\ActiveDirectory\\ActiveDirectory.psd1`?\r\n\r\nThe general rule is: If a module location is missing from `$env:PSModulePath` then `Import-Module` (and, subsequently, `WinCompat`) won't be able to find the module if the import is done by module name (as opposed to full path to the module).",
      "created_at": "2019-11-23T00:25:55Z",
      "updated_at": "2019-11-23T00:25:55Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@scrthq  \r\nI had a similar problem with $psmodulePath getting messed up in VS Code when I changed it in my profile.  If I leave it alone it's fine.  (see https://github.com/PowerShell/vscode-powershell/issues/2127#issuecomment-554586582 )\r\n\r\n\r\nFor completeness I tested these by putting ___ in front of the last part of the path in system environment variable so I could see what PowerShell did.  \r\n\r\nWindows PowerShell 5.1\r\n```\r\n%UserProfile%\\Documents\\WindowsPowerShell\\Modules  << Even if it is in System Environment variable\r\nContents of system enviroment variable             << Normally includes %SystemRoot%\\system32\\WindowsPowerShell\\v1.0\\Modules\r\n%ProgramFiles%\\WindowsPowerShell\\Modules           << Only if not in system environment variable. \r\n```\r\n\r\nPowerShell 6.2.3\r\n```\r\nIgnores System Environment variable. \r\n$home\\Documents\\PowerShell\\Modules\r\n$env:ProgramFiles\\PowerShell\\Modules\r\n$PsHome\\Modules\r\n$Env:systemRoot\\system32\\WindowsPowerShell\\v1.0\\Modules  <<Even if not in system environment variable\r\n```\r\n\r\nPowerShell 7 preview 6\r\n```\r\n$home\\Documents\\PowerShell\\Modules\r\n$env:ProgramFiles\\PowerShell\\Modules\r\n$PsHome\\Modules\r\nC:\\Program Files\\WindowsPowerShell\\Modules              <<Even if not in system environment variable      \r\nC:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules      <<Even if not in system environment variable\r\nContents of system environment variable if not already included AND path is valid\r\n``` \r\n",
      "created_at": "2019-11-23T12:34:07Z",
      "updated_at": "2019-11-23T13:21:27Z"
    },
    {
      "author": "scrthq",
      "author_association": "NONE",
      "body": "To clarify - yes, it works fine if I provide the full path to the module or add the System32\\WindowsPowerShell path back to `$env:PSModulePath` -- that's not the point of the issue. Up until PowerShell 7-preview.5, `C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules` was included in the default values for `$env:PSModulePath` and it no longer appears to be that way in PowerShell 7-preview.6, resulting in importing modules in that path (e.g. ActiveDirectory, DNSServer, etc) to fail without taking additional steps to readd the path yourself. Existing scripts importing those modules running with PowerShell 7-preview.6 will subsequently break.\r\n\r\n*** \r\n\r\n@anmenaga \r\n\r\n1. Here is the contents on PS 6.2.3 vs 7-preview.5 vs 7-preview.6 --- it looks like with 7-preview.6, the CurrentUser path for Windows PowerShell modules is swapped with the Machine path unexpectedly?\r\n\r\n### 6.2.2\r\n```powershell\r\n>> pwsh -noprofile -command \"`$PSVersionTable.PSVersion.ToString();`$env:PSModulePath -split [IO.Path]::PathSeparator\"\r\n6.2.2\r\nC:\\Users\\nferrell\\Documents\\PowerShell\\Modules\r\nC:\\Program Files\\PowerShell\\Modules\r\nc:\\program files\\powershell\\6\\Modules\r\nC:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules\r\n```\r\n\r\n### 7-preview.5\r\n```powershell\r\n>> pwsh-preview -noprofile -command \"`$PSVersionTable.PSVersion.ToString();`$env:PSModulePath -split [IO.Path]::PathSeparator\"\r\n7.0.0-preview.5\r\nC:\\Users\\nferrell\\Documents\\PowerShell\\Modules\r\nC:\\Program Files\\PowerShell\\Modules\r\nc:\\program files\\powershell\\7-preview\\Modules\r\nC:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules\r\n```\r\n\r\n### 7-preview.6\r\n```powershell\r\n>> pwsh-preview -noprofile -command \"`$PSVersionTable.PSVersion.ToString();`$env:PSModulePath -split [IO.Path]::PathSeparator\"\r\n7.0.0-preview.6\r\nC:\\Users\\nferrell\\Documents\\PowerShell\\Modules\r\nC:\\Program Files\\PowerShell\\Modules\r\nc:\\program files\\powershell\\7-preview\\Modules\r\nC:\\Users\\nferrell\\Documents\\WindowsPowerShell\\Modules\r\n```\r\n\r\n2. As shown by the contents of `$env:PSModulePath` for previous versions, everything outside of a few early versions of PS Core 6 (if I remember correctly) contained `C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules`, hence the expectation for it to be present in 7-preview.6\r\n\r\n3. ActiveDirectory is indeed Core compatible and imports without issue if I provide either the full path or update the default `$env:PSModulePath` to include `C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules` again.\r\n\r\n***\r\n\r\n@jhoneill - Definitely not anything in my profile altering the PSModulePath. I don't think it's unreasonable to expect things that worked up to 7-preview.5 to continue working, so long as there weren't any breaking changes introduced.",
      "created_at": "2019-11-24T05:40:39Z",
      "updated_at": "2019-11-24T05:40:39Z"
    },
    {
      "author": "scrthq",
      "author_association": "NONE",
      "body": "Tried from another machine (new PC build) and I'm not able to reproduce there, strangely enough. I've tried installing via Chocolatey and the 64-bit MSI on the Releases page, both still have `C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules` in `$env:PSModulePath` as expected.\r\n\r\n7-preview.6 reliably uninstalls/reinstalls on my current machine (work laptop) from the 64-bit MSI on the Release page and the same issue is present every time.\r\n\r\nBoth machines have consoles are launched in the same manner (Admin session within ConEmu), the only difference that stands out is I'm on Windows 10 Pro 1909 on the new PC build where it's working fine, but on Windows 10 Enterprise 1903 on the machine where the issue is present.",
      "created_at": "2019-11-24T06:02:14Z",
      "updated_at": "2019-11-24T06:02:22Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "(a) Does it happen if  you start with -NoProfile ? \r\nand \r\n(b) are there anything strange about \r\nHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\\PSModulePath\r\n\r\n[Sorry if you've  already checked both of those]\r\n",
      "created_at": "2019-11-24T10:13:08Z",
      "updated_at": "2019-11-24T10:13:08Z"
    },
    {
      "author": "scrthq",
      "author_association": "NONE",
      "body": "@jhoneill - a) Yup, see the calls above at the start of each code block before the output of each block, e.g.:\r\n\r\n```powershell\r\n>> pwsh-preview -noprofile -command \"`$PSVersionTable.PSVersion.ToString();`$env:PSModulePath -split [IO.Path]::PathSeparator\"\r\n```\r\n\r\nb) None of the items in that registry key are present in my `$env:PSModulePath` actually, so that may be something notable (e.g. that RegKey value is not being pulled in if it's expected to be pulled). Also worth noting that the other paths in that RegKey also do not show in `$env:PSModulePath` in other versions, so possibly a red herring.\r\n\r\nContents of the RegKey on the machine with the issue:\r\n\r\n```none\r\nC:\\ProgramData\\Boxstarter;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\windows\\system32\\WindowsPowerShell\\v1.0\\Modules;C:\\opscode\\chef-workstation\\modules\\\r\n```\r\n\r\nContents of the RegKey on the machine that is working fine (note that this build is only a couple weeks old and is not my primary workstation):\r\n\r\n```none\r\n%ProgramFiles%\\WindowsPowerShell\\Modules;%SystemRoot%\\system32\\WindowsPowerShell\\v1.0\\Modules\r\n```",
      "created_at": "2019-11-24T17:44:46Z",
      "updated_at": "2019-11-24T17:44:46Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@scrthq  \r\nHmmm. The one with boxstarter looks it re-wrote the entry because the %env% parts have been expanded. (Going back to DOS 3.1 I have a dim view of things which put themselves first on a path, so I'm going to blame boxstarter for everything :-)   \r\nAIUI if the value is missing PowerShell will re-create it so I might quickly export that bit of the registry and delete the key and see what happens. \r\nI get something added to PS Module Path from the registry / global environment variable in 7 but not in 6. (See above).   \r\n",
      "created_at": "2019-11-24T18:36:07Z",
      "updated_at": "2019-11-24T18:36:07Z"
    },
    {
      "author": "scrthq",
      "author_association": "NONE",
      "body": "@jhoneill - That makes sense re: Boxstarter (or Chef) expanding the env var values, but the resolved string would still be the same. Still an unexpected difference in experience between 7-p.5 and 7-p.6. I'm curious what would trip it up and add the CurrentUser path for WindowsPowerShell _instead of_ the Machine path on this machine.",
      "created_at": "2019-11-24T19:27:15Z",
      "updated_at": "2019-11-24T19:27:15Z"
    },
    {
      "author": "deisner",
      "author_association": "NONE",
      "body": "I'm running into this problem on my Windows 10 Enterprise 1909 system, too, also starting with preview.6:\r\n\r\n```\r\nPS C:\\Users\\me> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-preview.6\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-preview.6\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\nPS C:\\Users\\me> $env:PSModulePath -split [IO.Path]::PathSeparator\r\nC:\\Users\\me\\Documents\\PowerShell\\Modules\r\nC:\\Program Files\\PowerShell\\Modules\r\nc:\\program files\\powershell\\7-preview\\Modules\r\n```\r\n\r\nWhereas with my default PowerShell:\r\n\r\n```\r\nPS C:\\Users\\me> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.18362.145\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.18362.145\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n\r\n\r\nPS C:\\Users\\me> $env:PSModulePath -split [IO.Path]::PathSeparator\r\n\r\nC:\\Users\\me\\AppData\\Local\\Google\\Cloud SDK\\google-cloud-sdk\\platform\\PowerShell\r\nC:\\Program Files\\WindowsPowerShell\\Modules\r\nC:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules\\\r\nC:\\Program Files (x86)\\Microsoft SQL Server\\120\\Tools\\PowerShell\\Modules\\\r\nC:\\Program Files (x86)\\Windows Kits\\10\\Microsoft Application Virtualization\\Sequencer\\AppvPkgConverter\r\nC:\\Program Files (x86)\\Windows Kits\\10\\Microsoft Application Virtualization\\Sequencer\\AppvSequencer\r\nC:\\Program Files (x86)\\Windows Kits\\10\\Microsoft Application Virtualization\\\r\n```\r\n\r\nMy `HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\\PSModulePat` registry key value is \r\n```\r\n%SystemRoot%\\system32\\WindowsPowerShell\\v1.0\\Modules\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\Tools\\PowerShell\\Modules\\;C:\\Program Files (x86)\\Windows Kits\\10\\Microsoft Application Virtualization\\Sequencer\\AppvPkgConverter;C:\\Program Files (x86)\\Windows Kits\\10\\Microsoft Application Virtualization\\Sequencer\\AppvSequencer;C:\\Program Files (x86)\\Windows Kits\\10\\Microsoft Application Virtualization\\\r\n```\r\n",
      "created_at": "2019-11-26T16:00:15Z",
      "updated_at": "2019-11-26T16:00:15Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "For those of you that can repro this, can you start cmd.exe and run `set psmodulepath` and paste the output here?  The change in PS7 Preview.6 is to inherit $env:PSModulePath rather than clobber it so unless the system32 path is explicitly removed from the registry, it should have been inherited.",
      "created_at": "2019-11-26T19:16:45Z",
      "updated_at": "2019-11-26T19:16:45Z"
    },
    {
      "author": "deisner",
      "author_association": "NONE",
      "body": "```\r\nC:\\Users\\me>set psmodulepath\r\nPSModulePath=;C:\\Users\\me\\AppData\\Local\\Google\\Cloud SDK\\google-cloud-sdk\\platform\\PowerShell\r\n```\r\nIt's odd that it begins with a path separator. Maybe the Google Cloud SDK installer appended its own module path to an empty string (perhaps a logic error when PSModulePath isn't set)?\r\n\r\n**UPDATE**: So that was a user variable. If I delete the PSModulePath user variable (using the System Properties > Environment Variables dialog), then in cmd.exe PSModulePath gets the value from the System variables value ...\r\n\r\n```\r\nC:\\Users\\me>set psmodulepath\r\nPSModulePath=C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\Tools\\PowerShell\\Modules\\;C:\\Program Files (x86)\\Windows Kits\\10\\Microsoft Application Virtualization\\Sequencer\\AppvPkgConverter;C:\\Program Files (x86)\\Windows Kits\\10\\Microsoft Application Virtualization\\Sequencer\\AppvSequencer;C:\\Program Files (x86)\\Windows Kits\\10\\Microsoft Application Virtualization\\\r\n```\r\nand in PS7 preview.6:\r\n\r\n```\r\nPS C:\\Users\\me> $env:PSModulePath -split [IO.Path]::PathSeparator\r\nC:\\Users\\me\\Documents\\PowerShell\\Modules\r\nC:\\Program Files\\PowerShell\\Modules\r\nc:\\program files\\powershell\\7-preview\\Modules\r\nC:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules\\\r\nC:\\Program Files (x86)\\Microsoft SQL Server\\120\\Tools\\PowerShell\\Modules\\\r\nC:\\Program Files (x86)\\Windows Kits\\10\\Microsoft Application Virtualization\\Sequencer\\AppvPkgConverter\r\nC:\\Program Files (x86)\\Windows Kits\\10\\Microsoft Application Virtualization\\Sequencer\\AppvSequencer\r\nC:\\Program Files (x86)\\Windows Kits\\10\\Microsoft Application Virtualization\\\r\n```\r\n\r\n",
      "created_at": "2019-11-26T19:40:34Z",
      "updated_at": "2019-11-26T19:51:17Z"
    },
    {
      "author": "scrthq",
      "author_association": "NONE",
      "body": "![image](https://user-images.githubusercontent.com/12724445/69668819-43444180-1056-11ea-97a9-51b7de2fe5e4.png)\r\n\r\n\r\nSo it does indeed behave like you're describing, @SteveL-MSFT, but it looks like it's inheriting the User scope env var if present and not the Machine scope:\r\n\r\n![image](https://user-images.githubusercontent.com/12724445/69668799-332c6200-1056-11ea-9752-f40d2572201d.png)",
      "created_at": "2019-11-26T20:09:01Z",
      "updated_at": "2019-11-26T20:11:27Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "@scrthq `looks like it's inheriting the User scope env var if present and not the Machine scope` - that is standard env var behavior as far as I know - User environment variables take precedence over system environment variables. (with the exception of `Path` env var, where values are combined)",
      "created_at": "2019-11-26T20:25:47Z",
      "updated_at": "2019-11-26T20:25:47Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Correct, if the user has defined their own PSModulePath env var, we respect that first then fall back to machine scope if available.  So this seems like it's by-design.",
      "created_at": "2019-11-26T21:09:57Z",
      "updated_at": "2019-11-26T21:09:57Z"
    },
    {
      "author": "scrthq",
      "author_association": "NONE",
      "body": "I can understand that it's working how it's expected to, considering that it's looking at the environment variable now, but it doesn't change the fact that it alters the behavior on some systems. \r\n\r\nGiven the large amount of Windows PowerShell modules that specifically install to the Machine scope with no option to specify the User scope (e.g. modules that install through means other than `Install-Module`, such as ActiveDirectory / DNSServer / etc that currently install via RSAT installer or Windows Optional Feature, depending on the client OS), it feels like the System32 path should be ensured as present and added as last on the list of paths if not automatically added, or both the User and Machine paths should be concatenated.",
      "created_at": "2019-11-26T21:55:07Z",
      "updated_at": "2019-11-26T21:55:07Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Prior to Preview.6, pwsh did explicitly add the system32 path.  However, this wasn't respecting the user's changes to the env var.  The current behavior is consistent with cmd.exe which is to inherit the user env var, if available.  Otherwise,  use the machine scope env var, if available.  Otherwise use a default env var.  This should be consistent with other exes on Windows with other env vars.  Special casing PSModulePath makes it inconsistent.",
      "created_at": "2019-11-26T22:30:23Z",
      "updated_at": "2019-11-26T22:30:23Z"
    },
    {
      "author": "deisner",
      "author_association": "NONE",
      "body": "@SteveL-MSFT Correct me if I'm wrong (I very well may be), but the PATH environment variable has historically been treated specially, and is a concatenation of the user scope PATH and the machine scope PATH. This make sense -- the effective path ought to be a concatenation of the two.\r\n\r\nSince the PSModulePath is also a list of directories to search, it seems like its semantics should be the same as PATH's. And indeed PowerShell 5.1, based on experimentation, treats both PATH and PSModulePath specially -- both are the concatenation of the respective user and machine variables. (Actually, I don't know if pwsh is doing this, or if the process is inheriting the already concatenated values).\r\n\r\nIt seems like the change in behavior introduced with pwsh Preview.6 is significant. I can imagine that a lot of existing software might depend on the previous behavior. ",
      "created_at": "2019-11-27T01:10:09Z",
      "updated_at": "2019-11-27T01:10:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It is explicitly demo (one case from many) why I asked to change the old practice, do not change PSModulePath and use all path we need internally.",
      "created_at": "2019-11-27T03:59:28Z",
      "updated_at": "2019-11-27T04:00:05Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, except where $env:PSModulePath is not defined at all, pwsh should just use the $env:PSModulePath that is inherited as the OS will merge User and Machine env vars already.",
      "created_at": "2019-12-04T23:22:25Z",
      "updated_at": "2019-12-04T23:22:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If we merge them, save in env:PSModulePath and then change User and/or Machine env vars we again get an inconsistency that will amazes users..",
      "created_at": "2019-12-05T03:36:23Z",
      "updated_at": "2019-12-05T03:36:23Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #11276, which has now been successfully released as `v7.0.0-rc.1`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-rc.1)\n",
      "created_at": "2019-12-16T21:37:54Z",
      "updated_at": "2019-12-16T21:37:54Z"
    }
  ],
  "created_at": "2019-11-22T23:50:31Z",
  "number": 11172,
  "state": "closed",
  "title": "Modules under C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules not found with PowerShell 7-preview.6",
  "updated_at": "2019-12-16T21:37:54Z"
}