{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3692",
  "author": "Szeraax",
  "body": "Steps to reproduce\r\n------------------\r\n\"one,two,three`rthree,three,three\" | out-file test.csv \r\nimport-csv test.csv\r\n\r\nExpected behavior\r\n-----------------\r\nExpected result:\r\n```\r\none   two   three\r\n---   ---   -----\r\nthree three three\r\n```\r\n\r\nActual behavior\r\n---------------\r\nimport-csv : The member \"three\" is already present.\r\n\r\nEnvironment data\r\n----------------\r\nTested on windows 8.1 and windows X (10). \r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.14393.206\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.14393.206\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\nSteps to fix\r\n----------------\r\nIt seems that the ImportCsvHelper method located in my C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\Microsoft.PowerShell.Commands.Utility\\v4.0_3.0.0.0__31bf3856ad364e35\\Microsoft.PowerShell.Commands.Utility.dll is the culprit. \r\n\r\nIt looks like the code here:\r\n```\r\n\t\tprivate bool IsNewLine(char ch)\r\n\t\t{\r\n\t\t\tbool result = false;\r\n\t\t\tif (ch == '\\n')\r\n\t\t\t{\r\n\t\t\t\tresult = true;\r\n\t\t\t}\r\n\t\t\telse if (ch == '\\r' && this.PeekNextChar('\\n'))\r\n\t\t\t{\r\n\t\t\t\tresult = true;\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n```\r\n\r\nshould include \r\n```\r\n\t\t\telse if (ch == '\\r')\r\n\t\t\t{\r\n\t\t\t\tresult = true;\r\n\t\t\t}\r\n```\r\n\r\nand then all will be happy. Thanks!",
  "closed_at": "2017-11-10T22:02:46Z",
  "comments": [
    {
      "author": "Szeraax",
      "author_association": "NONE",
      "body": "By the way, Get-Content does handle this case correctly. My solution for these files is to use Get-Content foo.csv | ConvertFrom-Csv.",
      "created_at": "2017-05-03T19:12:01Z",
      "updated_at": "2017-05-03T19:12:01Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Hum!  I normally use both \"r`n`\" then I can get the expected result.  I don't think something is wrong here.\r\n\r\n\"one,two,three`r`nthree,three,three\"| out-file test.csv\r\nimport-csv test.csv\r\n\r\nResults:\r\none   two   three\r\n---   ---   -----\r\nthree three three\r\n\r\n![csvgood_2017-05-03_16-18-16](https://cloud.githubusercontent.com/assets/19892435/25679833/c14326b8-301c-11e7-9d25-75024b719eab.jpg)\r\n\r\nBy the way, just a reminder, for Windows 5.x issues need to routed to UserVoice forum: https://windowsserver.uservoice.com/forums/301869-powershell\r\n",
      "created_at": "2017-05-03T20:23:14Z",
      "updated_at": "2017-05-03T20:23:14Z"
    },
    {
      "author": "Szeraax",
      "author_association": "NONE",
      "body": "Good to know about UserVoice!\r\n\r\nAnd yes, using \\r\\n and \\n both work fine. Its only just the plain `r that causes this issue. If I could, I would beat whoever creates files with \\r as a line ending, but that's illegal and stuff.\r\n\r\nThe fact that Get-Content can read a file that uses just carriage returns means that there is inconsistency between using Get-Content foo.csv | ConvertFrom-Csv and Import-Csv. I would think those two usages should perform the same. ",
      "created_at": "2017-05-03T21:00:22Z",
      "updated_at": "2017-05-03T21:00:37Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Now I see what you're referring with the 'r`'.  I notice the inconsistency between import-csv and get-content.  Yeap! This might be a Bug!!\r\n\r\nAt the same time PowerShell is not working in WSL Bash Console as some of it previous behavior, like Scroll-Up and screen refresh issues, are back again making it hard to work with it.\r\n\r\n![bashimportcsv_2017-05-04_10-23-52](https://cloud.githubusercontent.com/assets/19892435/25708509/af7e6fa8-30b4-11e7-8f72-7e4fd2eac0cd.jpg)\r\n![bashimportcsv_02_2017-05-04_10-23-52](https://cloud.githubusercontent.com/assets/19892435/25708512/b3ee4ff4-30b4-11e7-855f-a1514d0f5e5c.jpg)\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2017-05-04T14:31:13Z",
      "updated_at": "2017-05-04T14:31:13Z"
    },
    {
      "author": "jeffbi",
      "author_association": "CONTRIBUTOR",
      "body": "Isn't \"`r\" carriage-return (CR, 0x0D) rather that line-feed (LF, 0x0A)? Unix-style line endings are LF. Old, pre-OS X mac line-endings were CR.",
      "created_at": "2017-05-04T19:41:46Z",
      "updated_at": "2017-05-04T19:41:46Z"
    },
    {
      "author": "Szeraax",
      "author_association": "NONE",
      "body": "Yes\n\nOn May 4, 2017 1:41 PM, \"jeffbi\" <notifications@github.com> wrote:\n\n> Isn't \"`r\" carriage-return (CR, 0x0D) rather that line-feed (LF, 0x0A)?\n> Unix-style line endings are LF. Old, pre-OS X mac line-endings were CR.\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/PowerShell/PowerShell/issues/3692#issuecomment-299288454>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AF9Az8UrHTvosw2SQeGaOpPc7jMz1bbcks5r2ioDgaJpZM4NP0xM>\n> .\n>\n",
      "created_at": "2017-05-04T19:46:57Z",
      "updated_at": "2017-05-04T19:46:57Z"
    },
    {
      "author": "thezim",
      "author_association": "CONTRIBUTOR",
      "body": "-LineDelimiter would be a nice addition.",
      "created_at": "2017-05-04T23:35:12Z",
      "updated_at": "2017-05-04T23:36:00Z"
    },
    {
      "author": "Szeraax",
      "author_association": "NONE",
      "body": "If we add line delimiter, do we add it to get-content too?\n\nOn May 4, 2017 5:35 PM, \"Greg Zimmerman\" <notifications@github.com> wrote:\n\n> -LineDelimiter would be nice addition.\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/PowerShell/PowerShell/issues/3692#issuecomment-299337503>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AF9AzxB9aF9IMohz-Bh_hd2-IDCrwx3xks5r2mC6gaJpZM4NP0xM>\n> .\n>\n",
      "created_at": "2017-05-04T23:37:29Z",
      "updated_at": "2017-05-04T23:37:29Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "I think it should also be added in the \"Get-Content\" in order to keep some kind on consistent behavior.\r\n\r\n+1 on to add the parameter '-LineDelimiter'.\r\n\r\n:)",
      "created_at": "2017-05-05T00:02:56Z",
      "updated_at": "2017-05-05T00:02:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "There is the informational [RFC 4180](https://tools.ietf.org/html/rfc4180) for CSV:\r\n>    1.  Each record is located on a separate line, delimited by a line\r\n       break (CRLF).  For example:\r\n\r\n>       aaa,bbb,ccc CRLF\r\n>       zzz,yyy,xxx CRLF\r\n\r\nThis obviously does not take into account Unix style EOL (LF) that we should support.\r\nI agree that we should support old MAC style (CR, '\\r') too.\r\n\r\nModern W3C standard - [Model for Tabular Data and Metadata on the Web](http://www.w3.org/TR/2015/REC-tabular-data-model-20151217/)\r\n[line terminators](http://www.w3.org/TR/2015/REC-tabular-metadata-20151217/#dialect-lineTerminators)\r\n>An atomic property that sets the line terminators flag to either an array containing the single provided string value, or the provided array. The default is [\"\\r\\n\", \"\\n\"].\r\n\r\nIt should also be noted that the SQL bcp utility has support of custom (EOL) _terminators_.\r\n",
      "created_at": "2017-05-05T06:38:32Z",
      "updated_at": "2017-05-05T06:38:32Z"
    },
    {
      "author": "Szeraax",
      "author_association": "NONE",
      "body": "Personally, I'm not sure that it is worth making a -LineDelimiter parameter, given that I can Get-Content a csv file, split it using any delimiter I want, and then ConvertFrom-Csv to already accomplish the same thing. As just a regular powershell user, I don't expect import-csv or get-content to have custom EOL characters/terminators/delimiters. \r\n\r\nI'll let others decide that one though. ",
      "created_at": "2017-05-05T16:18:39Z",
      "updated_at": "2017-05-05T16:18:39Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@MaximoTrinidad You beat me to it: I meant to point you to the fact that `Get-Content` already has a `-Delimiter` parameter, though its current behavior is surprising: #3706",
      "created_at": "2017-05-05T17:13:15Z",
      "updated_at": "2017-05-05T17:13:15Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "LOL @mklement0!! \r\n:)",
      "created_at": "2017-05-05T17:22:13Z",
      "updated_at": "2017-05-05T17:22:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Although files with '\\r' EOL is a rare case, we should fix the Issue.",
      "created_at": "2017-05-05T20:02:44Z",
      "updated_at": "2017-05-05T20:02:44Z"
    },
    {
      "author": "Szeraax",
      "author_association": "NONE",
      "body": "I agree that should be fixed to work the same as get content. I don't think\r\nthat we should add anything else though (at least, not based on this ticket)",
      "created_at": "2017-05-05T20:21:01Z",
      "updated_at": "2017-05-05T20:21:58Z"
    },
    {
      "author": "thezim",
      "author_association": "CONTRIBUTOR",
      "body": "@Szeraax yes, fix it first.\r\n\r\n",
      "created_at": "2017-05-05T21:43:47Z",
      "updated_at": "2017-05-05T21:43:47Z"
    },
    {
      "author": "mi-hol",
      "author_association": "NONE",
      "body": "@SteveL-MSFT maybe this issue could be fixed using the code proposed by @Szeraax any time soon?",
      "created_at": "2017-11-05T11:13:29Z",
      "updated_at": "2017-11-05T11:13:29Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I can pull PR on next week if the fix will be approved.",
      "created_at": "2017-11-05T12:08:43Z",
      "updated_at": "2017-11-05T12:08:43Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Seems like treating a single CR the same as a single LF is reasonable.",
      "created_at": "2017-11-05T19:30:37Z",
      "updated_at": "2017-11-05T19:30:37Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "There are 3 line ending variants supported by the PowerShell parser - CRLF (Windows), LF (Unix), and CR (old Apple), so it's very reasonable for CSV to do the same.\r\n\r\nSee [here](https://en.wikipedia.org/wiki/Newline) for more excessive details.",
      "created_at": "2017-11-06T02:59:47Z",
      "updated_at": "2017-11-06T02:59:47Z"
    },
    {
      "author": "bcrotty",
      "author_association": "NONE",
      "body": "@iSazonov I'm still having an issue with this. My PS version is 5.1.18362.145. When I import a CSV where a line ends in `\\r` instead of `\\r\\n`, the final value gets set to `\\r` instead of an empty string, which is what I'd expect. Here's sample code:\r\n\r\n```\r\n\"Name,Date`r`nBob,`r\" | Set-Content \".\\Test.csv\" -NoNewline\r\n$test = Import-Csv .\\Test.csv\r\n$test[0].Date -eq \"`r\"\r\n\r\n\"Name,Date`r`nBob,`r`n\" | Set-Content \".\\Test.csv\" -NoNewline\r\n$test = Import-Csv .\\Test.csv\r\n$test[0].Date -eq \"\"\r\n```\r\n\r\nDjango reporting outputs CSVs that end with `\\r` instead of `\\r\\n`, which is causing errors in some scripts I have. Now that I understand the issue, I can work around it, but it seems like the issue isn't fully resolved with `Import-Csv`.",
      "created_at": "2019-11-04T19:10:07Z",
      "updated_at": "2019-11-04T19:14:41Z"
    },
    {
      "author": "mi-hol",
      "author_association": "NONE",
      "body": "@bcrotty did you notice that this repository is for **PowerShell Core** (with version 7 preview 5 recently release)?\r\nthe difference is explained [here](https://github.com/PowerShell/PowerShell#windows-powershell-vs-powershell-core)\r\nActually I am surprised that an issue for the very different product **Windows PowerShell** 5.1 (not covered here) wasn't closed right away. ",
      "created_at": "2019-11-04T19:50:21Z",
      "updated_at": "2019-11-04T19:54:22Z"
    },
    {
      "author": "bcrotty",
      "author_association": "NONE",
      "body": "@mi-hol Got it.",
      "created_at": "2019-11-04T21:48:34Z",
      "updated_at": "2019-11-04T21:48:34Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@bcrotty You can use Windows 10 Feedback tool or UserVoice site to report but before check latest Windows 10 builds.",
      "created_at": "2019-11-05T03:18:47Z",
      "updated_at": "2019-11-05T03:18:47Z"
    }
  ],
  "created_at": "2017-05-03T19:07:37Z",
  "number": 3692,
  "state": "closed",
  "title": "Import-Csv does not handle newlines containing just \\r (Carriage Return)",
  "updated_at": "2019-11-05T03:18:47Z"
}