{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14208",
  "author": "Sidneys1",
  "body": "## Summary of the new feature/enhancement\r\n\r\nAs a user I want PowerShell to integrate with terminal features where it makes sense, especially when the terminal is providing integration with the host operating system. One such feature supported by ConEmu and Windows Terminal ([as of 2020-11-18](https://github.com/microsoft/terminal/pull/8055)) is OS integration for visual progress indicators via `OSC9;4` ANSI codes.\r\n\r\nThe `Write-Progress` cmdlet should optionally emit a ConEmu-style `OSC 9;4` progress ANSI code, controlled by a switch parameter like `-EmitAnsiProgress`, and default to a global variable like `$EmitAnsiProgressPreference` so that it can be enabled profile-wide.\r\n\r\n## Proposed technical implementation details (optional)\r\n\r\nWhen enabled via the switch parameter or the global preference variable, `Write-Progress` will emit the following OSC codes in the following circumstances:\r\n\r\n`` `e]9;4;st;pr`e\\ ``\r\n\r\n| `st` | Description                        | Circumstance                                                         |\r\n| ---: | :--------------------------------- | :------------------------------------------------------------------- |\r\n|    0 | remove progress                    | `Write-Progress -Completed`                                          |\r\n|    1 | set progress value to `pr`         | `Write-Progress -PercentComplete <pr>`                               |\r\n|    3 | set taskbar to Indeterminate state | `Write-Progress` when no `-PercentCompleted` has been set previously |\r\n\r\nAn example of this behavior can be emulated by running the following PowerShell command in a terminal supporting the OSC `9;4` code:\r\n\r\n```ps1\r\n0..100 |% {\r\n  Write-Host -NoNewline \"`e]9;4;1;$_`e\\\";\r\n  Write-Progress -Activity Demo -PercentComplete $_;\r\n  Start-Sleep 0.1\r\n}; Write-Host -NoNewline \"`e]9;4;0`e\\\"; Write-Progress -Activity Demo -Completed;\r\n```\r\n",
  "closed_at": "2021-03-12T23:21:13Z",
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "This would definitely be cool to see.\r\n\r\nSomething that should be worked out before an implementation is started is what to do about nested progress activities.  That's something that always comes up as problematic whenever trying to integrate PowerShell progress into other progress systems.",
      "created_at": "2020-11-23T14:48:47Z",
      "updated_at": "2020-11-23T14:48:47Z"
    },
    {
      "author": "Sidneys1",
      "author_association": "NONE",
      "body": "That's an excellent point. I suppose the options are:\r\n\r\n1. Don't do anything (show each record as it is generated). This is obviously not viable since it would cause terrible \"flickering\".\r\n2. Keep track of the parent-most and oldest progress indicator, and only show that in the taskbar.\r\n3. When multiple progress indicators are in play, either don't show any (disable taskbar progress), or show an indeterminate state in the taskbar progress (``\"`e]9;4;3`e\\\"``).\r\n\r\nOptions 2 and 3 are tricky, since they'd require some additional tracking in the PowerShell host that I imagine doesn't currently exist. I'm not aware of the current host architecture for progress display - are these approaches viable?",
      "created_at": "2020-11-23T15:26:55Z",
      "updated_at": "2020-11-23T15:26:55Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> 2. Keep track of the parent-most and oldest progress indicator, and only show that in the taskbar.\r\n\r\nI think this one makes the most sense personally.\r\n\r\n> I'm not aware of the current host architecture for progress display - are these approaches viable?\r\n\r\nShould be.  `ConsoleHost` already keeps track of what progress messages are currently being displayed, so it should be able to keep track of what the top most is.  I'm unsure how much overhead that would add, but probably minimal.",
      "created_at": "2020-11-23T17:00:57Z",
      "updated_at": "2020-11-23T17:00:57Z"
    },
    {
      "author": "Sidneys1",
      "author_association": "NONE",
      "body": "I poked around in the ConsoleHost progress UI. It looks like this should be pretty easy to implement at a very basic level.\r\n\r\nSome things that occurred to me:\r\n1. The system for display UI like the progress banner doesn't emit to a stream, it writes to the raw console buffer. This might interfere with OSC sequences.\r\n2. If there isn't already, there should be a central API in the ConsoleHost for emitting raw OSC sequences like this. I might have to investigate how `pwsh` handles color codes on non-windows systems and see if something like this exists. I don't want to bury code emitting OSC to a stream in the actual progress UI code.\r\n",
      "created_at": "2020-11-23T17:09:16Z",
      "updated_at": "2020-11-23T17:09:16Z"
    },
    {
      "author": "Sidneys1",
      "author_association": "NONE",
      "body": "For reference, the [`ProgressPane` itself is here](https://github.com/PowerShell/PowerShell/blob/master/src/Microsoft.PowerShell.ConsoleHost/host/msh/ProgressPane.cs). ",
      "created_at": "2020-11-23T17:14:04Z",
      "updated_at": "2020-11-23T17:14:04Z"
    },
    {
      "author": "DHowett",
      "author_association": "NONE",
      "body": "Something similar to--or exactly matching--this just landed with #14927",
      "created_at": "2021-03-12T23:04:11Z",
      "updated_at": "2021-03-12T23:04:11Z"
    },
    {
      "author": "Sidneys1",
      "author_association": "NONE",
      "body": "I'd say this is adequately resolved, thanks for following up @DHowett! ",
      "created_at": "2021-03-12T23:21:13Z",
      "updated_at": "2021-03-12T23:21:13Z"
    }
  ],
  "created_at": "2020-11-20T17:58:52Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Interactive-Console"
  ],
  "number": 14208,
  "state": "closed",
  "title": "Supporting the OSC 9;4 codes",
  "updated_at": "2021-03-12T23:21:13Z"
}