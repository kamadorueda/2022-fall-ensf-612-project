{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11069",
  "author": "KirkMunro",
  "body": "# PR Summary\r\n\r\nAdd an empty, obsolete `WorkflowInfo` public class back into PowerShell.\r\n\r\n## PR Context\r\n\r\nFixes #11053.\r\n\r\n## PR Checklist\r\n\r\n- [X] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [X] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [X] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [X] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [X] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [X] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2019-11-21T00:02:01Z",
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Any reason not to include the original subclass and members?  Won't this still throw on JIT of a method that references one of these members?",
      "created_at": "2019-11-15T12:51:26Z",
      "updated_at": "2019-11-15T12:51:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SeeminglyScience This would mean that users would expect they (subclass and members) to _work_, but it is not. \r\nI think the current compromise is good.\r\n",
      "created_at": "2019-11-15T13:13:15Z",
      "updated_at": "2019-11-15T13:13:15Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> @SeeminglyScience This would mean that users would expect they (subclass and members) to _work_, but it is not.\r\n> I think the current compromise is good.\r\n\r\nTake this example:\r\n\r\n```csharp\r\nstring GetRealName(CommandInfo command)\r\n{\r\n    return command switch\r\n    {\r\n        WorkflowInfo workflow => workflow.Name,\r\n        FunctionInfo function => function.Name,\r\n        _ => string.Empty,\r\n    };\r\n}\r\n```\r\n\r\nThere isn't going to be any workflows coming into this method because core doesn't support it.  The property can throw `NotSupportedException`, it doesn't really matter because that code path will never be hit.  But just by referencing the property this method can no longer be JIT'd (if I'm remembering correctly).",
      "created_at": "2019-11-15T13:34:05Z",
      "updated_at": "2019-11-15T13:34:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SeeminglyScience You could add a method call... It has no end. Really the PR addresses an issue reported by Kirk, no more. If somebody point another project which we must save we could consider this. Although this does not make sense because it has already been three years since we removed workflow support. Now it's time to remove all extra links.\r\n",
      "created_at": "2019-11-15T13:58:11Z",
      "updated_at": "2019-11-15T13:58:11Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> @SeeminglyScience You could add a method call... It has no end.\r\n\r\nNot sure what you mean. Keeping the layout of the class would be the end and not really take any additional effort or complexity.\r\n\r\n> Really the PR addresses an issue reported by Kirk, no more. If somebody point another project which we must save we could consider this. Although this does not make sense because it has already been three years since we removed workflow support. Now it's time to remove all extra links.\r\n\r\nI'd be more inclined to agree if you were suggesting that the class shouldn't be added back at all.  I don't see what is lost by including the members as well. I get that there's no reported issue with them *yet*, but decorating them with `Obsolete` solves any implied support issues and there's no real downside if you're already including the class.",
      "created_at": "2019-11-15T14:35:21Z",
      "updated_at": "2019-11-15T14:35:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SeeminglyScience My thoughts is simple. If anybody creates an instance of the class he expects that the class works but really it does not work and it is good to throw, otherwise it can lead to unpredictable behavior.",
      "created_at": "2019-11-15T14:54:31Z",
      "updated_at": "2019-11-15T14:54:31Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> @SeeminglyScience My thoughts is simple. If anybody creates an instance of the class he expects that the class works but really it does not work and it is good to throw, otherwise it can lead to unpredictable behavior.\r\n\r\nYeah for sure, throw `NotSupportedException` at runtime if that code path is actually hit, 100% agree.   Really even the constructors should throw.  The point in adding this back is only for assembly load/JIT time backwards compatibility right?  If someone is trying to actually instansiate an instance of `WorkflowInfo`, that should definitely throw as well. My issue is only with JIT time exceptions, they're way harder to troubleshoot and throw even when someone is just trying to account for the *possibility* of being passed a `WorkflowInfo` object.",
      "created_at": "2019-11-15T15:30:06Z",
      "updated_at": "2019-11-15T15:30:06Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "> Any reason not to include the original subclass and members? Won't this still throw on JIT of a method that references one of these members?\r\n\r\nNot really. It simply came down to time and need for me. I put back what I had time to put back, and addressed the specific issue I came across. I have a trip next week that is naturally making me frantic because as usual I need to do all the things before that trip since trips really only shift work rather than remove work from your plate, so I just did a quick fix here because that's what I had time to do. If we want more than what I did, that's fine by me. I'm too busy to think about it myself though, at least until I'm back from my trip the week after next.",
      "created_at": "2019-11-15T15:52:42Z",
      "updated_at": "2019-11-15T15:52:42Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "We discussed this at length within the @PowerShell/powershell-committee and went back and forth a few times:\r\n\r\nIt's been our philosophy for a long time that we should make a \"best effort\" to load .NET Framework / WinPS compiled modules in .NET/PS Core. E.g. if 9/10 cmdlets in a module would work just fine at runtime, but the 1 cmdlet contains a reference to a missing type, it gives me heartburn that we block import altogether. This is particularly relevant with regards to modules that are not and will not be maintained but that still can have value in (mostly) working with PS7. \r\n\r\nThat being said, we also don't want to start adding these things back on an ad hoc basis. We removed a ton of stuff over the course of 6.x, and we certainly shouldn't re-introduce just this one type if we decide that it's the right thing. The effort level to enumerate, analyze, decide on, and reintroduce all those types would be significant, and may cause other unforeseen problems. Therefore, we'd rather wait until we see this problem more often in the wild--and particularly around modules that are not well maintained--before it makes sense to make that investment. \r\n\r\nAlso, we all agree that we wouldn't ever want to add something like this back to .NET Standard, as we're trying to get as close to of a guarantee of \"it will work on both editions\" as is possible at compile time. Furthermore, if a module is being recompiled, then it means it's being actively maintained, and the usage of that type can be removed.",
      "created_at": "2019-11-21T00:02:01Z",
      "updated_at": "2019-11-21T00:02:01Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@joeyaiello I think you made the wrong call on this. I chose to apply the PR because that was something I could do today. Obviously if I could have just fixed this in my modules I would have already, but releasing an update to my modules is not something I can do until I have a new code signing certificate.\r\n\r\n> That being said, we also don't want to start adding these things back on an ad hoc basis. We removed a ton of stuff over the course of 6.x, and we certainly shouldn't re-introduce just this one type if we decide that it's the right thing.\r\n\r\nThis is a new change in PowerShell 7. It was not in PowerShell 6.x. Ergo it isn't re-introducing something, it's just undoing the removal of that thing before PowerShell 7 is released.\r\n\r\n> Therefore, we'd rather wait until we see this problem more often in the wild--and particularly around modules that are not well maintained--before it makes sense to make that investment.\r\n\r\nThis is a specific issue with a problem in the wild, for a change that has not yet been included in anything other than a pre-release. It's also a problem with a module that is used by other modules, so the impact isn't just localized to one thing. I don't see where \"investment\" comes to play here given that this is pre-release. It also appears that you're deciding to handle this differently for me than you would for a customer with shipped modules, assuming I can just do the work to make this right on my side, and that's not right.\r\n\r\n> Furthermore, if a module is being recompiled, then it means it's being actively maintained, and the usage of that type can be removed.\r\n\r\nI only compiled the module again to identify where the issue was coming from. While I want to actively maintain my modules, I am not in a position to code-sign them yet, and as such, they are sitting idle until I can code-sign them again. This is something I hope to be in a position to do again in the next few months, but it is not something I can do today. That doesn't qualify for \"actively maintained\" in my book.",
      "created_at": "2019-11-27T22:12:35Z",
      "updated_at": "2019-11-28T20:43:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think that this will not worsen PowerShell if we leave this class for another six months with obsolete attribute.\r\n",
      "created_at": "2019-11-28T03:21:11Z",
      "updated_at": "2019-11-28T03:21:11Z"
    }
  ],
  "created_at": "2019-11-14T03:18:47Z",
  "number": 11069,
  "state": "closed",
  "title": "Put the WorkflowInfo public class back, but marked as obsolete",
  "updated_at": "2020-01-09T23:29:47Z"
}