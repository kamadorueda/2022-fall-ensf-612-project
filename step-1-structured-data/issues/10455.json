{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10455",
  "author": "PaulHigin",
  "body": "# PR Summary\r\n\r\nThis is a fix for the ForEach-Object perf Issue: #10450.  \r\n\r\n```powershell\r\nmeasure-command { 1..254 | foreach -Parallel {ping \"192.168.0.$_\" -n 1 | where {$_ -match \"ttl=\"}} -ThrottleLimit 300 }\r\n\r\n# Time for ThreadJob and ForEach -Parallel -AsJob is around 8 seconds\r\n# Time for ForEach -Parallel is around 60 seconds\r\n```\r\n\r\n## PR Context\r\n\r\nThe problem was that the number of concurrent runspaces was being limited to around 40-50, even though the ThrottleLimit was set to 300.  It turns out it was the Cmdlet input processing thread that was causing the bottleneck.  I don't know what the conflict is while spinning up runspaces, but the fix is to now do this on a dedicated thread similar to how it currently works for -AsJob.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2019-09-05T18:27:21Z",
  "comments": [
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@PaulHigin \r\n\r\nThe change is causing a lot memory allocations as compared to before.\r\n\r\nScenario: `measure-command { 1..10kb | ForEach-Object -Parallel { }}`\r\n\r\nBefore change: 105 MB in 2.6 minutes\r\nAfter change: 10,200 MB in 2.6 minutes",
      "created_at": "2019-08-30T19:23:17Z",
      "updated_at": "2019-08-30T19:23:17Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@adityapatwardhan \r\nI am not too surprised at this, as this change increases the processing rate of creating/running scripts.  Even though the default Throttle limit is 5, since the script block is empty the code is basically creating and disposing threads/runspaces as fast as it can, 10000 times.  So I am not surprised that memory consumption is large.\r\n\r\nAs long as the CLR eventually collects the memory, I think we are Ok.\r\n\r\nI have run tests that loop for hours, detecting handle and working set usage.  So far I see the usage plateau after a while so there seems to be no resource leak.  However, the CLR and GC is getting a lot of exercise!",
      "created_at": "2019-09-03T22:39:03Z",
      "updated_at": "2019-09-03T22:39:03Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Speed is awesome, but I don't think most folks will agree that... what, 10 _gigabytes_(?) of RAM usage for a task that is literally doing no work is something they'll want to work with regularly if at all.\r\n\r\nAre currently available alternatives this excessive in terms of memory usage? (e.g., PoshRSJobs?)",
      "created_at": "2019-09-04T00:26:39Z",
      "updated_at": "2019-09-04T00:26:50Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 \r\n```\r\nmeasure-command { 1..10kb | ForEach-Object -Parallel { }}\r\n```\r\nThe code is useless and is essentially creating 100s of thousands of managed objects and releasing them as fast as possible.  It is no surprise that memory usage peaks until GC can deal with it.  This is more about managed code and the CLR than about PowerShell.  You can do the same thing by writing silly C# code.",
      "created_at": "2019-09-04T16:03:32Z",
      "updated_at": "2019-09-04T16:03:32Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.0.0-preview.4` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.4)\n",
      "created_at": "2019-09-19T17:52:13Z",
      "updated_at": "2019-09-19T17:52:13Z"
    }
  ],
  "created_at": "2019-08-27T22:32:43Z",
  "number": 10455,
  "state": "closed",
  "title": "Fix for ForEach-Object -Parallel perf problem with many runspaces",
  "updated_at": "2019-09-19T17:52:13Z"
}