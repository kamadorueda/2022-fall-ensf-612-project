{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13795",
  "author": "kyanha",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nThis PR allows `Get-Item -Stream`, `Get-Content -Stream`, `Clear-Content -Stream`, `Set-Content -Stream`, `Add-Content -Stream`, and `Remove-Item -Stream` to see and address alternate data streams on directories, not merely on files.\r\n\r\nFixes #10570. Fixes #13656.\r\n\r\nSupersedes #13650 (squashes all intermediary commits).\r\n\r\n<!-- Summarize your PR between here and the checklist. -->\r\n\r\n## PR Context\r\n\r\nIssue #10570 has been open for a year.  NTFS supports what are called \"Alternate Data Streams\" on both files and directories (multiple named discrete blobs of data which are associated with a single directory entry).  PowerShell currently supports enumeration of these Alternate Data Streams on files, using the '-Stream' parameter to 'Get-Item'.  It also supports manipulation of these alternate data streams on files, using the '-Stream' parameter to Set-Content, Add-Content, Clear-Content, and Remove-Item.\r\n\r\nUnfortunately, the initial implementation of PowerShell only supported alternate data streams on files, not on directories.  This makes an entire facility of the OS's file system invisible, and if an administration team is relying on PowerShell it makes an attractive place for a red team to store data to exfiltrate.  (This is not an invitation to destroy the capability to store alternate data streams on directories, as they are useful for many purposes.  It is merely a rationale for making their existence visible through PowerShell.)\r\n\r\nTo create and see an alternate data stream on a directory, use cmd.exe to run the following commands:\r\n\r\n```\r\n> mkdir 10570demo\r\n> cd 1057demo\r\n> echo \"This is a file.\" > 10570demo.txt\r\n> echo \"This is an alternate data stream on the file.\" > 10570demo.txt:datastream\r\n> mkdir bug10570\r\n> echo \"This is an alternate data stream on the directory.\" > bug10570:datastream\r\n> dir /r\r\n```\r\nThe output is something like:\r\n```\r\nD:\\10570demo>dir /r\r\n Volume in drive D is DATA\r\n Volume Serial Number is 8FD3-BD69\r\n\r\n Directory of D:\\10570demo\r\n\r\n09/17/2020  02:59 PM    <DIR>          .\r\n09/17/2020  02:59 PM    <DIR>          ..\r\n09/17/2020  02:58 PM                20 10570demo.txt\r\n                                    50 10570demo.txt:datastream:$DATA\r\n09/17/2020  02:59 PM    <DIR>          bug10570\r\n                                    55 bug10570:datastream:$DATA\r\n               1 File(s)             20 bytes\r\n               3 Dir(s)  88,185,401,344 bytes free\r\n```\r\n\r\nTo see the failure of PowerShell being able to see the stream on the file, but not the directory:\r\n```\r\n> pwsh\r\nPS > Get-Item *\r\n\r\n\r\n    Directory: D:\\10570demo\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\nda---           9/17/2020  2:59 PM                bug10570\r\n-a---           9/17/2020  2:58 PM             20 10570demo.txt\r\n\r\nPS > Get-Item * -stream *\r\n\r\nPSPath        : Microsoft.PowerShell.Core\\FileSystem::D:\\10570demo\\10570demo.txt::$DATA\r\nPSParentPath  : Microsoft.PowerShell.Core\\FileSystem::D:\\10570demo\r\nPSChildName   : 10570demo.txt::$DATA\r\nPSDrive       : D\r\nPSProvider    : Microsoft.PowerShell.Core\\FileSystem\r\nPSIsContainer : False\r\nFileName      : D:\\10570demo\\10570demo.txt\r\nStream        : :$DATA\r\nLength        : 20\r\n\r\nPSPath        : Microsoft.PowerShell.Core\\FileSystem::D:\\10570demo\\10570demo.txt:datastream\r\nPSParentPath  : Microsoft.PowerShell.Core\\FileSystem::D:\\10570demo\r\nPSChildName   : 10570demo.txt:datastream\r\nPSDrive       : D\r\nPSProvider    : Microsoft.PowerShell.Core\\FileSystem\r\nPSIsContainer : False\r\nFileName      : D:\\10570demo\\10570demo.txt\r\nStream        : datastream\r\nLength        : 50\r\n\r\nPS > Get-Item bug10570 -stream *\r\nPS >\r\n```\r\n\r\nWriting the tests revealed that Set-Content internally calls Clear-Content, which is hardcoded to not check for streams on directories.  This was raised as an issue in Issue #13656, but I decided to put that into this PR as well.\r\n\r\n## PR Checklist\r\n\r\n- [X] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [X] I'm assuming bucket 3: current behavior of Get-Item -stream when confronted with a directory was to silently do nothing, and this PR continues to do so in the event a directory doesn't have any alternate data streams.  I would like someone to doublecheck, though.\r\n- **User-facing changes**\r\n    - [X] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [X] Issue filed: <!-- Number/link of that issue here --> MicrosoftDocs/Powershell-Docs#6648\r\n- **Testing - New and feature**\r\n    - [X] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [X] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n",
  "closed_at": "2020-10-30T07:19:30Z",
  "comments": [
    {
      "author": "kyanha",
      "author_association": "CONTRIBUTOR",
      "body": "All issues raised by CodeFactor are in code that I didn't touch. @anmenaga Please review when you get a moment?",
      "created_at": "2020-10-17T03:48:00Z",
      "updated_at": "2020-10-17T03:48:00Z"
    },
    {
      "author": "n3rdopolis",
      "author_association": "NONE",
      "body": "I tested it, it works. One thing though before the compatibility is set in stone, does it make sense that PsIsContainer is $True? It's a _member_ of a container, but I don't think streams that are parts of folders can have any children in NTFS....",
      "created_at": "2020-10-20T17:15:59Z",
      "updated_at": "2020-10-20T17:15:59Z"
    },
    {
      "author": "kyanha",
      "author_association": "CONTRIBUTOR",
      "body": "@n3rdopolis \r\n> I tested it, it works. One thing though before the compatibility is set in stone, does it make sense that PsIsContainer is $True? It's a _member_ of a container, but I don't think streams that are parts of folders can have any children in NTFS....\r\n\r\nYou are correct, data streams cannot contain children.  That's a handy mnemonic to understand why files always have default (unnamed) data streams, and why directories can never have default data streams.\r\n\r\nUnfortunately, I can't figure out the path by which the property is set, so I can't figure out if I have enough information available anywhere to communicate to that location that even though the filesystem entry is a directory it's actually a stream on a directory.\r\n\r\nIf you have any suggestions to figuring out how it works, I am attentive.  I'm just a filesystem guy, not a PowerShell internal structure guy, and I've been trying to push this so I can get back to work on what I'm actually supposed to be working on (a Windows filesystem filter driver that uses alternate data streams to store persistent data). :/\r\n",
      "created_at": "2020-10-23T02:25:39Z",
      "updated_at": "2020-10-23T02:25:39Z"
    },
    {
      "author": "kyanha",
      "author_association": "CONTRIBUTOR",
      "body": "> Unfortunately, I can't figure out the path by which the property is set, so I can't figure out if I have enough information available anywhere to communicate to that location that even though the filesystem entry is a directory it's actually a stream on a directory.\r\n\r\nI did some exploring tonight, and thought I might have figured it out, but alas it didn't work the way I wanted to.  You apparently can't use `Get-Item drive:\\directory:*` as a synonym for `Get-Item drive:\\directory -Stream *`, which means that when it passes through `private static FileSystemInfo GetFileSystemInfo(string path, out bool isContainer)` it doesn't get a stream name.  So, even though that seems to be where `isContainer` is set, it apparently doesn't get enough information for Get-Item to be able to say it's not a container.\r\n\r\nI can't figure out where \"Stream\" is added as a dynamic parameter, so I can't really do anything there either.  Ideally, if PSChildName contains a `':'`, `isContainer` should be reset to `false` before it's returned.",
      "created_at": "2020-10-30T05:46:22Z",
      "updated_at": "2020-10-30T05:46:22Z"
    },
    {
      "author": "kyanha",
      "author_association": "CONTRIBUTOR",
      "body": "I found it! Now, I need to write tests for it to make sure it's correct.  Will set the title here to WIP.",
      "created_at": "2020-10-30T05:56:37Z",
      "updated_at": "2020-10-30T05:56:37Z"
    },
    {
      "author": "kyanha",
      "author_association": "CONTRIBUTOR",
      "body": "I apparently suck at git, and I've gotten my local repository into a state where I can't push it.  Will try again on Yet Another Branch[tm].",
      "created_at": "2020-10-30T07:08:22Z",
      "updated_at": "2020-10-30T07:08:22Z"
    },
    {
      "author": "kyanha",
      "author_association": "CONTRIBUTOR",
      "body": "Superseded by #13941, because apparently some pull I made is trying to update workflow but my OAUTH token doesn't have the \"workflow\" scope.  That PR has all tests written and all commits squashed for review, and addresses @n3rdopolis's concern about $PSIsContainer on the alternate data streams.",
      "created_at": "2020-10-30T07:19:30Z",
      "updated_at": "2020-10-30T07:19:30Z"
    }
  ],
  "created_at": "2020-10-17T03:17:52Z",
  "number": 13795,
  "state": "closed",
  "title": "WIP: Windows: Alternate Data Steams on directories are now accessible.",
  "updated_at": "2020-12-03T20:17:46Z"
}