{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14166",
  "author": "powercode",
  "body": "Tracking issue: #12631.",
  "closed_at": "2021-01-09T07:20:05Z",
  "comments": [
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "The checks I see are of the type\r\n```csharp\r\n var icer = exception as IContainsErrorRecord;\r\nif (icer == null)...\r\n```\r\n\r\nBut that is just checking for the interface.\r\n\r\n```csharp\r\n        /// <summary>\r\n        /// Encode exception.\r\n        /// </summary>\r\n        private static PSObject EncodeException(Exception exception)\r\n        {\r\n            // We are encoding exceptions as ErrorRecord objects because exceptions written\r\n            // to the wire are lost during serialization. By sending across ErrorRecord objects\r\n            // we are able to preserve the exception as well as the stack trace.\r\n\r\n            ErrorRecord errorRecord = null;\r\n            IContainsErrorRecord containsErrorRecord = exception as IContainsErrorRecord;\r\n            if (containsErrorRecord == null)\r\n            {\r\n                // If this is a .NET exception then wrap in an ErrorRecord.\r\n                errorRecord = new ErrorRecord(exception, \"RemoteHostExecutionException\", ErrorCategory.NotSpecified, null);\r\n            }\r\n            else\r\n            {\r\n                // Exception inside the error record is ParentContainsErrorRecordException which\r\n                // doesn't have stack trace. Replace it with top level exception.\r\n                errorRecord = containsErrorRecord.ErrorRecord;\r\n                errorRecord = new ErrorRecord(errorRecord, exception);\r\n            }\r\n\r\n            PSObject errorRecordPSObject = RemotingEncoder.CreateEmptyPSObject();\r\n            errorRecord.ToPSObjectForRemoting(errorRecordPSObject);\r\n            return errorRecordPSObject;\r\n        }\r\n```\r\n\r\nAnd \r\n```csharp\r\n        public ErrorRecord(ErrorRecord errorRecord,\r\n                             Exception replaceParentContainsErrorRecordException)\r\n        {\r\n            if (errorRecord == null)\r\n            {\r\n                throw new PSArgumentNullException(nameof(errorRecord));\r\n            }\r\n}\r\n```\r\n\r\nClearly, the expectation is that it is non-null.\r\n\r\nI don't think the checks you see for null are what you think they are.\r\n",
      "created_at": "2020-11-20T14:40:42Z",
      "updated_at": "2020-11-20T14:40:42Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "I think those checks are just extra precautions since we haven't had a language mechanism to help us with this.\r\nSo devs add safeguards.",
      "created_at": "2020-11-20T14:47:19Z",
      "updated_at": "2020-11-20T14:47:19Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-11-29T02:00:10Z",
      "updated_at": "2020-11-29T02:00:10Z"
    }
  ],
  "created_at": "2020-11-19T23:03:28Z",
  "number": 14166,
  "state": "closed",
  "title": "Enable nullable: System.Management.Automation.IContainsErrorRecord",
  "updated_at": "2021-01-13T15:28:36Z"
}