{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4826",
  "author": "powercode",
  "body": "<!--\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://github.com/PowerShell/PowerShell/blob/master/docs/KNOWNISSUES.md).\r\n- Fill out the following repro template\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nusing namespace System.Management.Automation\r\nclass Y{\r\n    [int] $Id\r\n}\r\n\r\nclass X{    \r\n\tstatic [void] OpenUri([psobject] $obj) {\r\n\t\t$id = $obj.Id\r\n\t\tstart-process \"http://baseuri/$id\"\r\n\t}\r\n\r\n    static [void] UpdateTypeData(){\r\n        $td = [Runspaces.Typedata]::new([Y])\t\t\r\n\t\t$td.Members.Add(\"OpenUri\",\r\n\t\t\t[Runspaces.CodeMethodData]::new(\"OpenUri\", [X]::GetMethodInfo([X], \"OpenUri\")));\r\n\t\tUpdate-TypeData -TypeData $td -Force\r\n    }\r\n    \r\n    hidden static [Reflection.MethodInfo] GetMethodInfo([Type] $type, [string] $method) {\r\n\t\treturn $type.GetMethod($method, [Reflection.BindingFlags]::Static -bor [Reflection.BindingFlags]::Public -bor [Reflection.BindingFlags]::IgnoreCase);\r\n\t}\r\n}\r\n[X]::UpdateTypeData()\r\n\r\n$y = [Y]::new()\r\n\r\n#works\r\n$y | % OpenUri\r\n#fails with No coercion operator is defined between types 'System.Void' and 'System.Object'.\r\n$y.OpenUri()\r\n\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nSame behavior invoking method with dot syntax as when invoked via `Foreach-Object -MemberName`\r\n\r\nActual behavior\r\n---------------\r\nfails with\r\n```\r\nNo coercion operator is defined between types 'System.Void' and 'System.Object'.\r\nAt line:1 char:1\r\n+ $y.OpenUri()\r\n```\r\n```\r\nPS C:\\Program Files\\PowerShell\\6.0.0-beta.6> $y | gm\r\n\r\n   TypeName: Y\r\n\r\nName        MemberType Definition\r\n----        ---------- ----------\r\nOpenUri     CodeMethod static void OpenUri(psobject obj)\r\n```\r\n\r\nEnvironment data\r\n----------------\r\nAll versions (beta 6 and win 5.1)\r\n",
  "closed_at": "2017-09-20T21:37:44Z",
  "comments": [
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "It works if the `OpenUri` method is returning something, i.e. is not a `[void]` return.",
      "created_at": "2017-09-13T10:21:05Z",
      "updated_at": "2017-09-13T10:21:05Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "This is probably an easy fix for someone interested in dynamic sites and code gen.\r\n\r\nTaking the original repro, I've added an explanation of how the `foreach` example works - it's using a PSMethod which goes through reflection:\r\n\r\n```\r\n# works\r\n$y.OpenUri.Invoke()\r\n#works because the above works\r\n$y | % OpenUri\r\n#fails with No coercion operator is defined between types 'System.Void' and 'System.Object'.\r\n$y.OpenUri()\r\n```",
      "created_at": "2017-09-14T00:40:51Z",
      "updated_at": "2017-09-14T00:40:51Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@PowerShellTeam I'll take a stab at it.",
      "created_at": "2017-09-16T07:02:32Z",
      "updated_at": "2017-09-16T07:02:32Z"
    }
  ],
  "created_at": "2017-09-13T10:16:57Z",
  "labels": [
    "Issue-Bug",
    "WG-Language",
    "Up-for-Grabs",
    "Resolution-Fixed"
  ],
  "number": 4826,
  "state": "closed",
  "title": "CodeMethod invoke fails with dot syntax but works with Foreach-Object -MemberName",
  "updated_at": "2017-09-26T08:05:45Z"
}