{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15109",
  "author": "TravisEz13",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nMake Linux package universal.\r\n- Add packaging build for Linux\r\n- Consolidate to two universal packages one for RedHat and one for deb\r\n- Use post install and removal scripts to deal with symbolic links\r\n\r\nNON-GOAL:  Improve libmi support.\r\n\r\n## PR Context\r\n\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [x] **This is breaking but cannot be experimental.**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [x] Issue filed: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/7387\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and opened an issue in the relevant tool repository. This may include:\r\n        - [ ] Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode\r\n        (which runs in a different PS Host).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n",
  "closed_at": "2021-04-10T16:53:41Z",
  "comments": [
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.2.0-preview.5` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0-preview.5)\n",
      "created_at": "2021-04-14T23:59:59Z",
      "updated_at": "2021-04-14T23:59:59Z"
    },
    {
      "author": "DHowett",
      "author_association": "NONE",
      "body": "As a package maintainer, I'd like to lodge my dissent with making files (or symlinks, or permission changes) in postinst scripts. They can't be properly removed, the package manager doesn't know about them, and generally they circumvent the OS's mechanism for handling packaged data. :smile:",
      "created_at": "2021-04-18T18:28:05Z",
      "updated_at": "2021-04-18T18:28:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Perhaps @heaths has thoughts how improve this.",
      "created_at": "2021-04-19T03:19:15Z",
      "updated_at": "2021-04-19T03:19:15Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@DHowett Please open an issue.  This objection needs to be reviewed.  As these symlinks are for a feature that eventually will no longer work, my proposal would be to just remove the links, but that breaks that feature for everyone.\r\n\r\nAnother alternative, to maintain compatibility, is to make a second package which this package has as an optional dependency on.  ",
      "created_at": "2021-04-19T18:54:49Z",
      "updated_at": "2021-04-19T18:54:49Z"
    },
    {
      "author": "heaths",
      "author_association": "CONTRIBUTOR",
      "body": "Is this question in response to tools/packaging/packaging.strings.psd1? As for build scripts, I see no problems with that and changes should be isolated (i.e. don't mess with the host outside of the build directory), but if in relation to the aforementioned file I really don't know. All I can say is that I don't see symlinking other packages' files by scripts that don't own them. Seems wrong to mess with another system like that - like in the old days before SFC on Windows when third-parties would replace Windows' bits.",
      "created_at": "2021-04-19T19:43:08Z",
      "updated_at": "2021-04-19T19:43:08Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@heaths `libmi`, provided by another team, has a hard coded path to load the libraries from.  That team has decided not to support PowerShell anymore.  To keep things functioning (until it completely brakes), this is our work around.   symlinks would be our solution, if through the package manager or the script.  I'm honestly happy to pull the symlinks from the package all together.\r\n\r\nI don't think this is the same as replacing windows bits.  We are symlinking other packages INTO our folder, not the other way around.",
      "created_at": "2021-04-20T00:19:01Z",
      "updated_at": "2021-04-20T00:19:01Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "> provided by another team, has a hard coded path to load the libraries from.\r\n\r\nThat's not true, the \"universal\" Linux build they have provided you are linked to the following OpenSSL libs\r\n\r\n* `libssl.so.1.0.0`\r\n* `libcrypto.so.1.0.0`\r\n\r\nThese are not absolute paths but library names that the loader checks in the various library paths on the host. You can see that in the following snippet, note I don't have OpenSSL 1.0.x installed and deleted the symlinks to show you what actual linked name so `not found` is expected.\r\n\r\n```\r\n[root@713b4cbcd41d /]# ldd /opt/microsoft/powershell/7/libmi.so\r\nldd: warning: you do not have execution permission for `/opt/microsoft/powershell/7/libmi.so'\r\n        linux-vdso.so.1 (0x00007ffeb393a000)\r\n        libpthread.so.0 => /lib64/libpthread.so.0 (0x00007fb157362000)\r\n        libdl.so.2 => /lib64/libdl.so.2 (0x00007fb15715e000)\r\n        libpam.so.0 => /lib64/libpam.so.0 (0x00007fb156f4e000)\r\n        libssl.so.1.0.0 => not found\r\n        libcrypto.so.1.0.0 => not found\r\n        libc.so.6 => /lib64/libc.so.6 (0x00007fb156b8b000)\r\n        /lib64/ld-linux-x86-64.so.2 (0x00007fb157582000)\r\n        libaudit.so.1 => /lib64/libaudit.so.1 (0x00007fb156961000)\r\n        libcap-ng.so.0 => /lib64/libcap-ng.so.0 (0x00007fb15675b000)\r\n```\r\n\r\nTypically these libraries are just picked up in the normal load path like `/usr/lib`, or the one specified by `LD_LIBRARY_PATH`. The `libmi.so` binary also has an RPATH set to `$ORIGIN` which allows it to also check the origin path (same dir it is placed in) which is what allows you to use the symlinks\r\n\r\n```\r\n[root@2cd102a3a066 /]# objdump -x /opt/microsoft/powershell/7/libmi.so | grep RPATH\r\n  RPATH                $ORIGIN\r\n```\r\n\r\nBut with the exception of EL7, which I go into below, you don't need the symlinks at all as `lib[crypto|ssl].so.1.0.0` is in the normal system paths for distributions that ship with OpenSSL 1.0.x. On Ubuntu 16.04 I deleted the symlinks and you can see that it picked up the system locations just fine.\r\n\r\n```\r\nroot@9d42597878f5:/# ldd /opt/microsoft/powershell/7/libmi.so\r\n        linux-vdso.so.1 =>  (0x00007ffc80db9000)\r\n        libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f0741cf0000)\r\n        libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f0741aec000)\r\n        libpam.so.0 => /lib/x86_64-linux-gnu/libpam.so.0 (0x00007f07418de000)\r\n        libssl.so.1.0.0 => /lib/x86_64-linux-gnu/libssl.so.1.0.0 (0x00007f0741676000)\r\n        libcrypto.so.1.0.0 => /lib/x86_64-linux-gnu/libcrypto.so.1.0.0 (0x00007f0741231000)\r\n        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f0740e67000)\r\n        /lib64/ld-linux-x86-64.so.2 (0x00007f0741f0d000)\r\n        libaudit.so.1 => /lib/x86_64-linux-gnu/libaudit.so.1 (0x00007f0740c40000)\r\n```\r\n\r\nIn a normal situation you should just be picking up these libraries as they are installed, this actually works just fine if you have OpenSSL 1.0.x installed with only 2 caveats\r\n\r\n* Enterprise Linux 7 (CentOS 7, RHEL 7, etc) uses `.10` as the suffix for the OpenSSL libs in `/usr/lib64` so they won't be picked up\r\n  * This is one case where you probably need the symlinks or to patch the ELF headers to point to the distro specific path for that distribution only\r\n  * Other distributions that still package OpenSSL 1.0.x use the `lib[ssl|crypto].so.1.0.0` file so they just work\r\n* macOS does have a hardcoded path to `/usr/local/opt/openssl/lib/lib[ssl|crypto].1.0.0.dylib`\r\n  * This is a different distribution package and IIRC it doesn't contain symlinks so I consider it a separate problem\r\n\r\nThe other issue is that the PowerShell package for newer distributions have a symlink to point `lib[ssl|crypto].1.0.0` to the OpenSSL 1.1.x paths which is completely wrong. This causes a seg fault in the process when `libmi` tries to use any OpenSSL APIs.\r\n\r\nSo ultimately what I think should happen is\r\n\r\n* Patch the `libmi.so` library to change the suffix of libssl and libcrypto to `.10` for the RPM/Enterprise Linux package\r\n* Do nothing, no symlinks on the other Linux distributions\r\n\r\nI also think you should be consuming the newer releases from the [omi repo](https://github.com/microsoft/omi/releases) where that team has actually provided an official \"universal\" OpenSSL 1.1.x build which you can use on newer distributions that don't ship OpenSSL 1.0.x (read mostly all of them). It also means that patched `libmi.so` library is only shipped on EL7, everything else shouldn't require symlinks.\r\n\r\nmacOS is another problem and there's not much you can do there without recompling your own version of `omi` on OpenSSL 1.1.x which is understandable why you don't want to do.",
      "created_at": "2021-04-20T01:17:42Z",
      "updated_at": "2021-04-20T01:20:24Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@jborean93 This issue is not to improve `libmi` behavior.  Please open a new issue for making libmi behavior better.\r\n\r\n\r\nAs for resolving this, I'll open a new issue for resolving creating the symlinks in the postscript.  Thinking about it, I think the best approach is separate packages with the symlink. ",
      "created_at": "2021-04-20T17:21:05Z",
      "updated_at": "2021-04-20T17:21:05Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "I would love to resolve the libmi but I know the team doesn\u2019t want to look into it. My posts are talking about the issues with how the current libmi is packaged. The package has symlinks which is not needed all the time (only EL7). The package symlinks point to OpenSSL 1.1.x which causes seg faults in PowerShell whenever you try to use any of the TLS components in libmi. How is that not related to the packaging components and thus this PR.\r\n\r\nthere are comments asking why things are done the way they are, I\u2019m explaining the problem and why the existing packaging setup is wrong and giving possible fixes for it. I can\u2019t really raise the PR myself because there are a lot of internal moving parts in the packaging process so my comments are a way of trying to stress what is wrong and hopefully illustrate what could be done to solve it.",
      "created_at": "2021-04-20T18:42:47Z",
      "updated_at": "2021-04-20T18:45:30Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@jborean93 How about making the `PSWSMan` module the only source of `libmi` and `libpsrpclient` binaries for PowerShell remoting over WSMan on Linux and macOS? Namely, powershell will not ship those libs, but instead, tell users to leverage the `PSWSMan` module to enable WSMan remoting on Linux and macOS.\r\n\r\nPlease see the discussion topic https://github.com/PowerShell/PowerShell/discussions/15310, and let's discuss the feasibility there.",
      "created_at": "2021-04-27T00:42:13Z",
      "updated_at": "2021-04-27T00:42:13Z"
    }
  ],
  "created_at": "2021-03-26T18:42:36Z",
  "number": 15109,
  "state": "closed",
  "title": "Make Linux package universal.",
  "updated_at": "2021-04-27T00:42:13Z"
}