{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8574",
  "author": "Groostav",
  "body": "Powershells `-ExecutionPolicy` and `-File` options are order sensitive. _Almost all_ of the command line tools I use do not have functional differences in the order of their command line options. This has lead me to build a mental model of arguments as an _unordered dictionary_ or _set of tuples and flags_. In fact it is more like an ordered table.\r\n\r\n# Steps to reproduce\r\n```ps1\r\n# run with admin privileges\r\nSet-ExecutionPolicy Restricted \r\n# restart the shell, dont need admin\r\nWrite-Output \"echo 'I'm running!'\" | Out-File \"./hello.ps1\"\r\n\r\npowershell.exe -ExecutionPolicy Bypass -File ./hello.ps1 #successfully prints \"I'm running!\"\r\npowershell.exe -File ./hello.ps1 -ExecutionPolicy Bypass # fails: scripting is disabled by execution policy\r\n```\r\n\r\n# Expected \r\nArgument order should not matter. Where it does matter it should be validated. It should be documented as such.\r\n -  `-File` and `-ExecutionPolicy` can be written in any order\r\n - OR: calling `powershell -File asdf -ExecutionPolicy Bypass` results in an error \"ExecutionPolicy must come  before the -File option\"\r\n - OR: `powershell.exe -Help` should mention that the `ExecutionPolicy` parameter is order sensitive.\r\n\r\n# Actual \r\nArgument order does matter, and when that order is not used correctly powershell fails silently\r\n -  the `-File` and `-ExecutionPolicy` arguments are order sensitive. \r\n - `-ExecutionPolicy` appears to simply \"not work\" in some circumstances, and with the apparent security implications of such a variable I was willing to write it off as windows security black magic _when infact [PEBCAK](https://www.bing.com/search?q=define%3A+PEBCAK)_\r\n\r\n# Environment data\r\n\r\n```none\r\nPSVersion                      5.1.17134.407\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.17134.407\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n\r\n---\r\n\r\nI'm loathe to admit that this has contributed to a 2-year quirk in my software. Years ago I tried the `-ExecutionPolicy Bypass` option, had no impact, so I simply moved past it _requiring that our users enabled scripting on their systems_. This was a way bigger deal to deployment that I thought it would and contributed to a couple dozen man-hours of support time. More recently I tried `-ExecutionPolicy Bypass` again and everything worked as its supposed to because, by chance, I wrote it first. Perhaps I'm dumb or impatient, but my mental model of command line as being an \"option dictionary\" did not lead me to think about argument order. \r\n",
  "closed_at": "2019-01-07T20:48:12Z",
  "comments": [
    {
      "author": "Groostav",
      "author_association": "NONE",
      "body": "more specifically, a session:\r\n\r\n```\r\nPS C:\\Users\\geoff> Get-ExecutionPolicy\r\nRestricted\r\nPS C:\\Users\\geoff> .\\hello.ps1\r\n.\\hello.ps1 : File C:\\Users\\geoff\\hello.ps1 cannot be loaded because running scripts is disabled on this system. For\r\nmore information, see about_Execution_Policies at https:/go.microsoft.com/fwlink/?LinkID=135170.\r\nAt line:1 char:1\r\n+ .\\hello.ps1\r\n+ ~~~~~~~~~~~\r\n    + CategoryInfo          : SecurityError: (:) [], PSSecurityException\r\n    + FullyQualifiedErrorId : UnauthorizedAccess\r\nPS C:\\Users\\geoff> powershell.exe -ExecutionPolicy Bypass -File .\\hello.ps1\r\nhello!\r\nPS C:\\Users\\geoff> powershell.exe -File .\\hello.ps1 -ExecutionPolicy Bypass\r\nFile C:\\Users\\geoff\\hello.ps1 cannot be loaded because running scripts is disabled on this system. For more\r\ninformation, see about_Execution_Policies at https:/go.microsoft.com/fwlink/?LinkID=135170.\r\n    + CategoryInfo          : SecurityError: (:) [], ParentContainsErrorRecordException\r\n    + FullyQualifiedErrorId : UnauthorizedAccess\r\n```\r\n",
      "created_at": "2019-01-01T00:11:39Z",
      "updated_at": "2019-01-01T00:11:39Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "As I recall, both the `-File` and `-Command` parameters must _always_ come last in a command line call to `powershell`. \r\n\r\nWhen using `-File`, any further arguments after the file name are interpreted as _arguments to be passed to the script itself_. See [here](https://docs.microsoft.com/en-us/powershell/scripting/components/console/powershell.exe-command-line-help?view=powershell-6#-file--).\r\n\r\n\r\nWhen using `-Command` everything that follows is interpreted as part of the command string when called from the command line. If you're executing an instance of `powershell` _from_ PowerShell itself, then you can use an actual script block to properly delineate the command you're passing in. If you specify `-Command` from a standard command line or without using a script block as the argument, it _must_ be the last parameter supplied for this reason. See [here](https://docs.microsoft.com/en-us/powershell/scripting/components/console/powershell.exe-command-line-help?view=powershell-6#-command).\r\n\r\nSo, yeah, it's not really possible for `-File` or `-Command` to be order-agnostic; in general those two need to be the last in any command sequence, although apart from that you can put the other parameters in whichever order you like. \ud83d\ude04 ",
      "created_at": "2019-01-01T00:51:47Z",
      "updated_at": "2019-01-01T00:53:15Z"
    },
    {
      "author": "Groostav",
      "author_association": "NONE",
      "body": "ah, so this is just yet another gotcha in shell scripting --though now that I think about it the C family of languages all have their own gotchas around `vararg` arguments, so I suppose I shouldn't be surprised to find them here too. \r\n\r\nIs another good practice is then to also write scripts that validate they dont get any data they don't expect? Then I would've seen an exception in something like the `param` block for my script, once I had it running. Though, looking at [about function advanced parameters](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_functions_advanced_parameters?view=powershell-6) nothing there immediately implies that I can somehow forbid extra command line arguments. \r\n\r\nIs there an option for something like that with `Param()` and its various annotations? In other words, is there an elegant way I can use the `Param` block to test if any extra arguments or options have been left on the command line for my script, and throw an exception in such a case?\r\n\r\nAlso, I'm no expert at reading complex usage documents, but this seems unfortunate:\r\n\r\n```\r\n> powershell.exe /?\r\nPowerShell[.exe] [-PSConsoleFile <file> | -Version <version>]\r\n    #...\r\n    [-ConfigurationName <string>]\r\n    [-File <filePath> <args>] [-ExecutionPolicy <ExecutionPolicy>]\r\n    [-Command { - | <script-block> [-args <arg-array>]\r\n    #...\r\n```\r\n\r\nIf you write `-File path arg1 arg2 -ExecutionPolicy Bypass`, as is kind've implied by the documentation, then `-ExecutionPolicy` and `Bypass` simply become _arg3_ and _arg4_, correct? \r\n\r\nAnyways, thanks for the clarification, I'm suprised at long I've been using powershell for and not realized some of these ambiguities. ",
      "created_at": "2019-01-07T19:09:34Z",
      "updated_at": "2019-01-07T19:10:35Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "In my experience, specifying `[CmdletBinding()]` will explicitly forbid any additional arguments from being supplied, _unless_ a declared parameter has the `[Parameter(ValueFromRemainingArguments)]` attribute declared. However, some arguments may be declared positionally and will accidentally accept the input in certain cases.\r\n\r\n![image](https://user-images.githubusercontent.com/32407840/50788084-615e5300-1286-11e9-883b-3f45fb83ef3a.png)\r\n\r\nFor this reason, I generally recommend only declaring positions for the most commonly used parameters.\r\n\r\nAgreed that the display is confusing as heck, and yes your inference is correct. ",
      "created_at": "2019-01-07T19:12:40Z",
      "updated_at": "2019-01-07T19:14:08Z"
    }
  ],
  "created_at": "2019-01-01T00:08:56Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 8574,
  "state": "closed",
  "title": "ExecutionPolicy and File options are not order agnostic",
  "updated_at": "2019-01-07T20:48:12Z"
}