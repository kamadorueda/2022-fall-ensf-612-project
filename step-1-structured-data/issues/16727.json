{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16727",
  "author": "LethiferousMoose",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\n* Create a module called PSTestAlias with the following code:\r\n* Place in the module path with correctly named folder structure\r\n* Open PowerShell and try to get the alias\r\n\r\nPSTestAlias.psm1 :\r\n```powershell\r\nfunction Invoke-SecondFunction {\r\n    param([Parameter(Mandatory=$true, Position=0)]\r\n          [string] $Parameter)\r\n\r\n    Write-Output $Parameter\r\n}\r\n\r\nfunction Test-Function {\r\n    [CmdletBinding()]\r\n    param([Parameter(Position=0)]\r\n          [string] $Parameter)\r\n  \r\n    Invoke-SecondFunction -Parameter $Parameter\r\n} \r\n\r\nNew-Alias -Name testalias -Value Test-Function\r\n\r\nExport-ModuleMember -Function 'Test-Function' -Alias '*'\r\n```\n\n### Expected behavior\n\n```console\nPS > Get-Command testalias\r\n\r\nCommandType     Name                                               Version    Source\r\n-----------     ----                                               -------    ------\r\nAlias           testalias -> Test-Function                         0.0        PSTestAlias\n```\n\n\n### Actual behavior\n\n```console\nPS > Get-Command testalias\r\nGet-Command: The term 'testalias' is not recognized as a name of a cmdlet, function, script file, or executable program.Check the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\nPS C:> Get-Command Test-Function\r\n\r\nCommandType     Name                                               Version    Source\r\n-----------     ----                                               -------    ------\r\nFunction        Test-Function                                      0.0        PSTestAlias\n```\n\n\n### Error details\n\n```console\nPS > Get-Error\r\n\r\nException             :\r\n    Type        : System.Management.Automation.CommandNotFoundException\r\n    ErrorRecord :\r\n        Exception             :\r\n            Type    : System.Management.Automation.ParentContainsErrorRecordException\r\n            Message : The term 'testalias' is not recognized as a name of a cmdlet, function, script file, or\r\nexecutable program.\r\n                      Check the spelling of the name, or if a path was included, verify that the path is correct and\r\ntry again.\r\n            HResult : -2146233087\r\n        TargetObject          : testalias\r\n        CategoryInfo          : ObjectNotFound: (testalias:String) [], ParentContainsErrorRecordException\r\n        FullyQualifiedErrorId : CommandNotFoundException\r\n    CommandName : testalias\r\n    Message     : The term 'testalias' is not recognized as a name of a cmdlet, function, script file, or executable\r\nprogram.\r\n                  Check the spelling of the name, or if a path was included, verify that the path is correct and try\r\nagain.\r\n    HResult     : -2146233087\r\nTargetObject          : testalias\r\nCategoryInfo          : ObjectNotFound: (testalias:String) [Get-Command], CommandNotFoundException\r\nFullyQualifiedErrorId : CommandNotFoundException,Microsoft.PowerShell.Commands.GetCommandCommand\r\nInvocationInfo        :\r\n    MyCommand        : Get-Command\r\n    ScriptLineNumber : 1\r\n    OffsetInLine     : 1\r\n    HistoryId        : 1\r\n    Line             : Get-Command testalias\r\n    PositionMessage  : At line:1 char:1\r\n                       + Get-Command testalias\r\n                       + ~~~~~~~~~~~~~~~~~~~~~\r\n    InvocationName   : Get-Command\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\nPipelineIterationInfo :\n```\n\n\n### Environment data\n\n```powershell\nPS > $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.1\r\nPSEdition                      Core\r\nGitCommitId                    7.2.1\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "LethiferousMoose",
      "author_association": "NONE",
      "body": "I don't usually create modules without a manifest file, but I was trying to give someone some quick code who is just learning PowerShell and came across this.",
      "created_at": "2022-01-10T16:53:46Z",
      "updated_at": "2022-01-10T16:53:46Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "Doing some quick testing on this and it looks as though it works just fine if you explicitly import the module first. Modules that aren't imported yet like SMBShare work as expected because those aliases are defined in the module manifest. The command discovery logic used in the event the module manifest doesn't exist or FunctionsToExport when wildcards are used must not be happening for aliases. I would expect this is happening because when command discovery happens for a non-imported module it uses the AST rather than actually \"executing\" the module to get the output from `Export-ModuleMember`. You can see an example below with `Get-Module` and how it includes `Invoke-SecondFunction` which is supposed to be private and doesn't have `testalias`. However, after importing the module it will have the accurate exports from `Export-ModuleMember` with `testalias` and no `Inovke-SecondFunction`.\r\n\r\n```powershell\r\nPS C:\\> Get-Module testmod -ListAvailable | fl\r\n\r\nName              : testmod\r\nPath              : <path>\r\nDescription       :\r\nModuleType        : Script\r\nVersion           : 0.0\r\nPreRelease        :\r\nNestedModules     : {}\r\nExportedFunctions : {Test-Function, Invoke-SecondFunction}\r\nExportedCmdlets   :\r\nExportedVariables :\r\nExportedAliases   :\r\n\r\n\r\nPS C:\\> Import-Module testmod\r\nPS C:\\> Get-Module testmod -ListAvailable | fl\r\n\r\nName              : testmod\r\nPath              : <path>\r\nDescription       :\r\nModuleType        : Script\r\nVersion           : 0.0\r\nPreRelease        :\r\nNestedModules     : {}\r\nExportedFunctions : Test-Function\r\nExportedCmdlets   :\r\nExportedVariables :\r\nExportedAliases   : testalias\r\n```",
      "created_at": "2022-01-14T19:39:11Z",
      "updated_at": "2022-01-14T19:39:11Z"
    },
    {
      "author": "LethiferousMoose",
      "author_association": "NONE",
      "body": "@ThomasNieto I was just comparing it to how it worked back in PowerShell 5.1 and 6 Core (back when I still did them this way, before I switched the manifests). Back then this just used to work without any manual imports being done.",
      "created_at": "2022-01-14T19:52:48Z",
      "updated_at": "2022-01-14T19:52:48Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "Yeah, I can confirm that it worked in 5.1. I don't have a 6.x instance to test off hand.\r\n\r\n```powershell\r\nC:\\> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.19041.1320\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.19041.1320\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n\r\n\r\nC:\\> Get-Module testmod\r\nC:\\> Get-Module testmod -ListAvailable | fl\r\n\r\n\r\nName              : testmod\r\nPath              : <path>\r\nDescription       :\r\nModuleType        : Script\r\nVersion           : 0.0\r\nNestedModules     : {}\r\nExportedFunctions : Test-Function\r\nExportedCmdlets   :\r\nExportedVariables :\r\nExportedAliases   : testalias\r\n```",
      "created_at": "2022-01-14T20:35:10Z",
      "updated_at": "2022-01-14T20:35:10Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I suspect this was likely an optimisation effort to avoid command discovery code paths automatically loading modules that don't actually need to be loaded. There's functionally no way for PowerShell to discover aliases defined in this way without loading the module into the session. \r\n\r\nI don't think it makes a lot of sense for PowerShell to potentially load several unrelated modules into the session that _weren't_ asked for just so it can find an alias that might have been in one of the modules.",
      "created_at": "2022-01-14T20:39:46Z",
      "updated_at": "2022-01-14T20:39:46Z"
    }
  ],
  "created_at": "2022-01-10T16:52:58Z",
  "labels": [
    "WG-Cmdlets-Core",
    "Needs-Triage"
  ],
  "number": 16727,
  "state": "open",
  "title": "Export-ModuleMember's Alias Parameter No Longer Works Consistently",
  "updated_at": "2022-01-14T20:39:46Z"
}