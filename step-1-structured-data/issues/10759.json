{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10759",
  "author": "leoniDEV",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\nUsing `Invoke-Command` to get the folder list from a remote computer an empty table is displayed, this seems a problem with the formatting of the output.\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n Invoke-Command {Get-ChildItem $env:APPDATA} -ComputerName buildsrv1\r\n```\r\n\r\n# Expected behavior\r\nGet the list of folders\r\n![Annotazione 2019-10-10 112845](https://user-images.githubusercontent.com/11667486/66556848-3aa0b600-eb51-11e9-8d6c-40c4ce52155b.png)\r\n\r\n# Actual behavior\r\n![Annotazione 2019-10-10 110545](https://user-images.githubusercontent.com/11667486/66556894-4c825900-eb51-11e9-9e38-5f9e9d79c7fe.png)\r\n\r\n# Additional Notes\r\nThe object returned by the command seems ok, If i pipe the `Invoke-Command` to `Select-Object` or `Format-List` the output is correct\r\n\r\n![Annotazione 2019-10-10 112235](https://user-images.githubusercontent.com/11667486/66556473-9880ce00-eb50-11e9-90b2-5886a5315675.png)\r\n\r\n![Annotazione 2019-10-10 112401](https://user-images.githubusercontent.com/11667486/66556484-9d458200-eb50-11e9-97c0-fd53f8b4b62e.png)\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-preview.4\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-preview.4\r\nOS                             Microsoft Windows 10.0.18995\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I guess we get _deserialized_ objects.",
      "created_at": "2019-10-10T19:55:34Z",
      "updated_at": "2019-10-10T19:55:34Z"
    },
    {
      "author": "leoniDEV",
      "author_association": "NONE",
      "body": "seems that in PSCore 7.0.0-preview.5 this issue is fixed",
      "created_at": "2019-10-29T22:19:01Z",
      "updated_at": "2019-10-29T22:19:41Z"
    },
    {
      "author": "leoniDEV",
      "author_association": "NONE",
      "body": "I was wrong, what misled me is that I load a custom format file in my profile, with that custom format file loaded the output is correct, if I run `pwsh` with `-noprofile` the output still wrong",
      "created_at": "2019-10-29T22:32:03Z",
      "updated_at": "2019-10-29T22:32:03Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This works in 6.2.3, so regressed in 7.",
      "created_at": "2019-10-30T00:51:27Z",
      "updated_at": "2019-10-30T00:51:27Z"
    },
    {
      "author": "leoniDEV",
      "author_association": "NONE",
      "body": "In 6.2.1 works as expected, I need to reinstall to test older preview but I think that the issue is not present even in preview 3",
      "created_at": "2019-10-30T01:42:14Z",
      "updated_at": "2019-10-30T01:42:14Z"
    },
    {
      "author": "leoniDEV",
      "author_association": "NONE",
      "body": "I was wrong again, I made tests with previous builds (without load the profiles) and the last build where the issue is not present is 6.2.3, all the 7.0.0-preview.x are affected by this issue.\r\n\r\nMaybe my custom format file has hidden the issue to me until now",
      "created_at": "2019-10-30T02:12:09Z",
      "updated_at": "2019-10-30T02:15:46Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Had a quick look at what's happened in that timeframe... didn't spot anything super obvious, but I'm sure I'm just missing it for now. \ud83d\ude42 \r\n\r\nhttps://github.com/PowerShell/PowerShell/compare/v6.2.3...v7.0.0-preview.1",
      "created_at": "2019-10-30T02:30:45Z",
      "updated_at": "2019-10-30T02:31:05Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This PR https://github.com/PowerShell/PowerShell/pull/8789 made a change to use CodeProperties for types that get used for formatting.  It appears that Deserialized versions of that type doesn't get those CodeProperties, so formatting can't find it and thus is empty.  What's not clear to me is that that PR is marked for 6.2.0 so it must have worked in 6.2.  It may be combination with some other change in 7.x that made this not work with deserialized objects.  PS7 Preview.1 has the issue, so something changed then.  Looking at the ChangeLog, I suspect https://github.com/PowerShell/PowerShell/pull/8785",
      "created_at": "2019-10-30T02:45:11Z",
      "updated_at": "2019-10-30T02:46:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We get good object but formatting doesn't work by default but well with explicit:\r\n```powershell\r\n Invoke-Command {Get-ChildItem $env:APPDATA} -ComputerName . | ft Mode,LastWriteTime,Length,Name\r\n\r\nMode   LastWriteTime         Length Name\r\n----   -------------         ------ ----\r\nd----- 7/11/2019 5:22:53 PM         Adobe\r\nd----- 9/9/2019 4:35:28 PM          Docker\r\nd----- 9/9/2019 3:39:34 PM          Far Manager\r\nd----- 8/7/2019 5:34:14 PM          GitHub Desktop\r\nd----- 7/11/2019 5:23:26 PM         ICAClient\r\nd----- 8/8/2019 3:11:17 PM          Macromedia\r\nd---s- 10/18/2019 5:03:36 PM        Microsoft\r\nd----- 7/11/2019 5:35:51 PM         Notepad++\r\nd----- 9/17/2019 2:48:06 PM         PerfView\r\nd----- 10/25/2019 8:20:25 AM        Visual Studio Setup\r\nd----- 7/11/2019 5:27:29 PM         vstelemetry\r\nd----- 7/11/2019 5:27:28 PM         vs_installershell\r\n```",
      "created_at": "2019-10-30T04:09:28Z",
      "updated_at": "2019-10-30T04:11:26Z"
    },
    {
      "author": "leoniDEV",
      "author_association": "NONE",
      "body": "The problem could be in the default `FileSystem.format.ps1xml`, as I said I have a custom one which came from a copy of the one in `C:\\System32\\WindowsPowershell\\v1` with slight modification, and when this custom format file is loaded the output is right",
      "created_at": "2019-10-30T09:55:36Z",
      "updated_at": "2019-10-30T09:55:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Maybe #9116",
      "created_at": "2019-10-30T15:16:37Z",
      "updated_at": "2019-10-30T15:16:37Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov I don't think it's #9116 as that was about the table headers.  If you select the specific properties, it formats because the previous PRs I reference made some optimizations and the default formatter doesn't use the actual properties but a CodeProperty to display them.  You can see here https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/FormatAndOutput/DefaultFormatters/FileSystem_format_ps1xml.cs#L52-L55 that the formatter is using different properties.  Here is where those properties get added by ETS https://github.com/PowerShell/PowerShell/blob/ceed73d7375cb98a199ceb19796bb2311b0b0002/src/System.Management.Automation/engine/Types_Ps1Xml.cs#L203-L224.  \n\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/11524380?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell\">PowerShell/PowerShell</a></strong></div><div>PowerShell for every system! Contribute to PowerShell/PowerShell development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2019-10-30T15:51:11Z",
      "updated_at": "2019-10-30T15:51:13Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT so we'd need to add the properties to deserialized objects as well, then? \ud83e\udd14 ",
      "created_at": "2019-10-30T16:01:44Z",
      "updated_at": "2019-10-30T16:01:44Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@vexx32 The deserialized object should have those properties, but I think the problem is that they aren't re-hydrated correctly to be associated with the CodeProperty.  Since there's no code to execute, they are just empty strings.  The change to the code property was in 6.2 and they work correctly.  The optimization PR happened in PS7 which is why I suspect it's the problem.",
      "created_at": "2019-10-30T16:43:19Z",
      "updated_at": "2019-10-30T16:43:19Z"
    },
    {
      "author": "leoniDEV",
      "author_association": "NONE",
      "body": "My tests were made against a remote computer with PSCore 6.2.1 and I tried Windows Powershell and PSCore 6.2.1 as endpoints and in both cases I have the issue, now I tested also PSCore 7.0.0-preview.5 as endpoint on remote and the output is as expected.\r\n",
      "created_at": "2019-10-30T16:43:54Z",
      "updated_at": "2019-10-30T16:43:54Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@leoniDEV just to be clear, which version of PowerShell was your client against the PS7-5 endpoint?",
      "created_at": "2019-10-30T16:59:14Z",
      "updated_at": "2019-10-30T16:59:14Z"
    },
    {
      "author": "leoniDEV",
      "author_association": "NONE",
      "body": "All the tests were made with 7.0.0-preview.5 on client",
      "created_at": "2019-10-30T17:13:13Z",
      "updated_at": "2019-10-30T17:13:34Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It is not clear why Format-Table works well but Format-Default not.",
      "created_at": "2019-10-30T17:17:56Z",
      "updated_at": "2019-10-30T17:17:56Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This appears to work correctly if remoting from PS7 to PS7, but fails if remoting from PS7 to WinPS.",
      "created_at": "2019-12-10T22:39:33Z",
      "updated_at": "2019-12-10T22:39:33Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Related: #11400",
      "created_at": "2020-09-25T17:17:37Z",
      "updated_at": "2020-09-25T17:17:37Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "For the short term, we can potentially make a change in our formatter for FileSystemInfo to be smart about this so it renders correctly.  Longer term, it may make sense to have the client request the FormatData of a remote type even if there is a local formatter.",
      "created_at": "2021-09-15T22:58:33Z",
      "updated_at": "2021-09-15T22:58:33Z"
    },
    {
      "author": "dkattan",
      "author_association": "NONE",
      "body": "> For the short term, we can potentially make a change in our formatter for FileSystemInfo to be smart about this so it renders correctly. Longer term, it may make sense to have the client request the FormatData of a remote type even if there is a local formatter.\r\n\r\nKeep in mind that this is an issue when running Import-CliXml from XML exported from a PS5.1 system, and in that scenario we don't have the luxury of asking for the remote formatter. I think the short term solution is a better long term solution.\r\n",
      "created_at": "2021-10-07T11:15:51Z",
      "updated_at": "2021-10-07T11:15:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> This PR #8789 made a change to use CodeProperties for types that get used for formatting. It appears that Deserialized versions of that type doesn't get those CodeProperties, so formatting can't find it and thus is empty.\r\n\r\nI prepare a workaround fix in the branch https://github.com/iSazonov/PowerShell/commit/3cbdb04f4b86830e42d4cee70de2997fcdd29e78 - **Anyone can grab this job**\r\nManually checked PS7->WnPS and PS7->PS7 work.\r\n\r\nI can not say it is not full fix because Formatting System has limitation - we can add either property or script block in a view but not code property. As result we can add code property only in ETS. That was done in #8789. In my workaround we overlap C# properties with PSObject properties. As result there are duplicate property names in target object. It works well but there would be side effects but I don't found them in the time.",
      "created_at": "2022-01-20T16:49:01Z",
      "updated_at": "2022-01-20T16:49:01Z"
    },
    {
      "author": "dkattan",
      "author_association": "NONE",
      "body": "> > This PR #8789 made a change to use CodeProperties for types that get used for formatting. It appears that Deserialized versions of that type doesn't get those CodeProperties, so formatting can't find it and thus is empty.\r\n> \r\n> I prepare a workaround fix in the branch [iSazonov@3cbdb04](https://github.com/iSazonov/PowerShell/commit/3cbdb04f4b86830e42d4cee70de2997fcdd29e78) - **Anyone can grab this job** Manually checked PS7->WnPS and PS7->PS7 work.\r\n> \r\n> I can not say it is not full fix because Formatting System has limitation - we can add either property or script block in a view but not code property. As result we can add code property only in ETS. That was done in #8789. In my workaround we overlap C# properties with PSObject properties. As result there are duplicate property names in target object. It works well but there would be side effects but I don't found them in the time.\r\n\r\nThis is perfect!",
      "created_at": "2022-01-21T10:28:23Z",
      "updated_at": "2022-01-21T10:28:23Z"
    }
  ],
  "created_at": "2019-10-10T09:34:35Z",
  "labels": [
    "Issue-Bug",
    "WG-Remoting",
    "WG-Cmdlets-Management",
    "WG-Engine-Format",
    "Area-FileSystem-Provider"
  ],
  "number": 10759,
  "state": "open",
  "title": "Get-ChildItem doesn't output correctly when used with Invoke-Command",
  "updated_at": "2022-01-21T10:28:23Z"
}