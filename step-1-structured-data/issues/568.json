{
  "_url": "https://github.com/PowerShell/PowerShell/issues/568",
  "author": "andschwa",
  "body": "Very simple implementation of C-(A,E,K,D,B,F,P,R,N,S,J,L) and Alt-(B,F).\n\nResolves #562 and makes it much nicer to play with.\n",
  "closed_at": "2016-02-22T17:51:34Z",
  "comments": [
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@vors @palladia Good enough?\n",
      "created_at": "2016-02-21T08:13:59Z",
      "updated_at": "2016-02-21T08:13:59Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "/cc @zach-folwick\n",
      "created_at": "2016-02-21T08:14:40Z",
      "updated_at": "2016-02-21T08:14:40Z"
    },
    {
      "author": "palladia",
      "author_association": "CONTRIBUTOR",
      "body": "It would be great to have Emacs-style bindings.  But a few don't look quite right:\n\n<ctrl-L>   should refresh screen\n<ctrl-S>   should search forward through history\n<ctrl-R>    should search backward through history\n<ctrl-K>   should remove from cursor position to end-of-line, and store removed text in a kill buffer\n\nand if we do <ctrl-K>, should we do <ctrl-Y>, to yank the kill buffer?\n",
      "created_at": "2016-02-21T21:43:03Z",
      "updated_at": "2016-02-21T21:43:03Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "This is a _basic_ implementation that can be extended later; it does not attempt to address more complicated scenarios such as incremental search or saving of text.\n\nWhat do you mean `refresh screen`? `Ctrl-L` just calls `clear`.\n",
      "created_at": "2016-02-21T21:57:41Z",
      "updated_at": "2016-02-21T21:57:41Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Essentially, this was written in twenty minutes to address usability concerns. I added what could easily be mapped to existing functionality. Anything extra I still believe falls outside the scope of our readline implementation (and should belong in `PSReadLine`).\n",
      "created_at": "2016-02-21T21:58:48Z",
      "updated_at": "2016-02-21T21:58:48Z"
    },
    {
      "author": "palladia",
      "author_association": "CONTRIBUTOR",
      "body": "Ctrl-L clears the screen, but preserves what you have typed on the command-line.\n\nNot asking you to implement the whole set of Emacs bindings, but that the few I pointed out don't seem to bind correctly.\n",
      "created_at": "2016-02-21T22:01:53Z",
      "updated_at": "2016-02-21T22:01:53Z"
    },
    {
      "author": "palladia",
      "author_association": "CONTRIBUTOR",
      "body": "Hmm, it looks like Waffle filtered out my control-keys...\n",
      "created_at": "2016-02-21T22:02:40Z",
      "updated_at": "2016-02-21T22:02:40Z"
    },
    {
      "author": "palladia",
      "author_association": "CONTRIBUTOR",
      "body": "The four bindings I was concerned about were Control-L, Control-S, Control-R, and Control-K.\n",
      "created_at": "2016-02-21T22:03:50Z",
      "updated_at": "2016-02-21T22:03:50Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Another developer is free to implement the extra features a better implementation of those keys would require, but I feel this PR should not include that work. That extra work is beyond P2.\n\nThis PR makes those keys work as close as possible to their expected behaviors by reusing the existing code.\n\nWe're spending more time talking about those four keys than I did adding these mappings.\n\n@PowerShell/linux Sign-off please?\n",
      "created_at": "2016-02-21T23:27:40Z",
      "updated_at": "2016-02-21T23:27:40Z"
    },
    {
      "author": "palladia",
      "author_association": "CONTRIBUTOR",
      "body": "If it's too much work, stub those 4 bindings, or don't catch them at all.  Why do the bindings for easiness, but have them behave differently than what Emacs-users expect?\n",
      "created_at": "2016-02-21T23:40:20Z",
      "updated_at": "2016-02-21T23:40:20Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "They are stubbed... and behave close enough for a **basic** implementation of _readline_.\n",
      "created_at": "2016-02-22T00:19:24Z",
      "updated_at": "2016-02-22T00:19:24Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "I should expand on why I emphasized _readline_. These are not Emacs bindings; they are \"Emacs-style readline\" bindings. What we choose to do for a specific binding is entirely up to our shell. I agree that we should make an effort to work \"as expected\" for a Bash or a Windows-PowerShell-with-PSReadLine user, but it is not necessarily high-priority. As it is, this very simple addition to our readline implementation causes it to act much closer to GNU Readline than it did previously. I added this because it was bugging me, @zach-folwick, and @vors in the last couple days, and did not take much time (at this point, less time than trying to get a sign-off on the code itself).\n\nAdding a \"kill buffer\" for `Ctrl-K` and pasting it with `Ctrl-Y` is certainly some low hanging fruit we can do, but it does not _need_ to be in this PR for sign-off. Same goes for restoring a command before executing `clear`. I welcome anyone to add these extended features at any point (and I might do so myself later), but I think a continued discussion about it here is not useful. (Incremental history search is probably more tricky, and ought to be approved before being worked on.)\n",
      "created_at": "2016-02-22T00:44:57Z",
      "updated_at": "2016-02-22T00:44:57Z"
    },
    {
      "author": "palladia",
      "author_association": "CONTRIBUTOR",
      "body": "Not looking for a full implementation here.  I am all for your goals.  In fact, Zach and I have discussed this, and I was debating whether to jump in and do exactly what you did here, after you closed his work item.  As you noted, it's not hard to implement a few commands using existing functions, and it greatly helps users without doing a lot of work.\n\nBut to explain what I was saying, let's take example of Control-S...In your implementation, if I read it correctly, you have Control-S, and Control-N duplicate behavior of a Down-Arrow.  Control-N is good, but why Control-S as well?  Control-S is forward-search in Emacs.  Why confuse users?  We can do Control-S later.\n",
      "created_at": "2016-02-22T01:03:57Z",
      "updated_at": "2016-02-22T01:03:57Z"
    },
    {
      "author": "zach-folwick",
      "author_association": "CONTRIBUTOR",
      "body": "I would remove the functions that don't match behavior (C-k, C-r, C-s, etc), because of the \"a feature is just a bug with seniority\" issue.  Of course someone _could_ come in later, but I feel it's better to be annoyed enough to fix, rather than the \"good enough for now\" trap (which often ends up as \"oh well... ship it!\").\n\nThe others are solid additions though.  :+1: (with removals).\n",
      "created_at": "2016-02-22T17:04:08Z",
      "updated_at": "2016-02-22T17:05:38Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Closing in favor of #572 \n",
      "created_at": "2016-02-22T17:51:34Z",
      "updated_at": "2016-02-22T17:51:34Z"
    }
  ],
  "created_at": "2016-02-20T22:27:15Z",
  "number": 568,
  "state": "closed",
  "title": "Add Emacs-style readline bindings",
  "updated_at": "2016-02-22T17:51:38Z"
}