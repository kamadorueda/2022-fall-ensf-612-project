{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4084",
  "author": "dchristian3188",
  "body": "First pass of additional parameter validations attributes as mentioned here: https://github.com/PowerShell/PowerShell/issues/2634\r\n\r\nNew attributes include:\r\nValidatePositiveAttribute\r\nValidateNonNegativeAttribute\r\nValidateNegativeAttribute \r\nValidateNonPositiveAttribute\r\n",
  "closed_at": "2017-08-02T18:24:07Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@dchristian3188 Please put a message in #2634 that you are starting the fix to exclude conflicts.",
      "created_at": "2017-06-23T03:46:31Z",
      "updated_at": "2017-06-23T03:46:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">We also need to think through usage on all data types, and avoid introducing unnecessary new public apis (the base classes).\r\n\r\nWe could exclude the new apis at all - if we want usage on all data types we should generalize existing `ValidateElement()`. So we can generalize `ValidateRangeAttribute.ValidateElement()`  and add new constructor to support:\r\n```c#\r\nValidateRange(Range=\"Positive\")\r\n```\r\n",
      "created_at": "2017-06-23T04:51:12Z",
      "updated_at": "2017-06-23T04:51:12Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@iSazonov - I was saying we don't need any unnecessary apis like the abstract base class used to share a tiny bit of code - that could easily be done without inheritance.\r\n\r\nYour suggestion might look like:\r\n```C#\r\npublic enum RangeKind {\r\n    Positive, NonNegative, Negative, NonPositive\r\n}\r\n\r\n    // In ValidateRangeAttribute\r\n    RangeKind? _rangeKind;\r\n    public ValidateRange(RangeKind kind) { _rangeKind = kind; }\r\n\r\n        // in ValidateElement\r\n        if (_rangeKind.HasValue) { ... }\r\n        else { /* existing code */ }\r\n```\r\n\r\nThat might be fine too, I'm not sure I have a preference either way.",
      "created_at": "2017-06-23T17:25:07Z",
      "updated_at": "2017-06-23T17:25:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr Thanks for you prototype. I like it. We use the similar approach for enhancing ValidateSet with valid values generator. First locally I used inheritance, but your idea (to add new constructor) was better. So I believe we should use the same pattern here. Users will find it easier to know and apply the enhancements than the new apis.",
      "created_at": "2017-06-23T18:35:04Z",
      "updated_at": "2017-06-23T18:35:04Z"
    },
    {
      "author": "dchristian3188",
      "author_association": "CONTRIBUTOR",
      "body": "I think you guys are right. Extending Validate range does feel cleaner.",
      "created_at": "2017-06-23T23:21:36Z",
      "updated_at": "2017-06-23T23:21:36Z"
    },
    {
      "author": "dchristian3188",
      "author_association": "CONTRIBUTOR",
      "body": "Ok, i added the check for the common type. Also tried to make the error messages a little more relevant. ",
      "created_at": "2017-06-30T05:26:10Z",
      "updated_at": "2017-06-30T05:26:10Z"
    },
    {
      "author": "dchristian3188",
      "author_association": "CONTRIBUTOR",
      "body": "I get what you're saying about the methods. I've consolidated them into one method with overload. Let me know how it looks.",
      "created_at": "2017-06-30T06:15:39Z",
      "updated_at": "2017-06-30T06:15:39Z"
    },
    {
      "author": "dchristian3188",
      "author_association": "CONTRIBUTOR",
      "body": "Hey iSazonov, I'm not sure I follow on adding the additional range type. If we were to add the ```ExpliciteRange``` in the enum, wouldn't this allow a user to do something like this:\r\n\r\n```powershell\r\nfunction foo { param([ValidateRange(\"ExpliciteRange\")] [int] $bar) }; foo 0 }\r\n```\r\n\r\n",
      "created_at": "2017-06-30T23:57:25Z",
      "updated_at": "2017-06-30T23:57:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@dchristian3188 I agree - we should follow HasValue(). That's enough to make a choice in general method.",
      "created_at": "2017-07-01T18:10:22Z",
      "updated_at": "2017-07-01T18:10:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We could enhance and unify Ranges. Currently Min and Max values are allowed but user can want to exclude them. Ex., \"Positive\" exclude zero. So the \"Positive\" range looks:\r\n```powershell\r\nValidateRange(0, int.MaxValue, RangeOption.ExcludeMin)\r\n```\r\n\"Negative\":\r\n```powershell\r\nValidateRange( -int.MaxValue, 0, RangeOption.ExcludeMax)\r\n```\r\nExclude both (allow 0.5):\r\n```powershell\r\nValidateRange( 0, 1, RangeOption.ExcludeMin+RangeOption.ExcludeMax)\r\n```\r\n\r\nAnd we can move `switch (rangeKind)` to a constructor (with assigning a specific error message) and implement general ValidateElement method.\r\n\r\n",
      "created_at": "2017-07-02T08:37:58Z",
      "updated_at": "2017-07-02T08:39:05Z"
    },
    {
      "author": "dchristian3188",
      "author_association": "CONTRIBUTOR",
      "body": "Hi iSazonov,\r\n\r\nI think expanding the range functionality is a cool idea, but might be out of scope for this PR. Do you want me to open a separate issue for tracking?\r\n\r\nAre there other updates I should make to the validate positive, negative, etc?",
      "created_at": "2017-07-11T01:09:17Z",
      "updated_at": "2017-07-11T01:09:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@dchristian3188 Please clarify do you plan continue in new PR or want cut off?",
      "created_at": "2017-07-11T04:21:43Z",
      "updated_at": "2017-07-11T04:21:43Z"
    },
    {
      "author": "dchristian3188",
      "author_association": "CONTRIBUTOR",
      "body": "Hi iSazonov,\r\n\r\nI would continue the work you mentioned in the new PR. If we open the issue, would I be able to get it assigned to me? \r\n\r\n",
      "created_at": "2017-07-12T02:30:39Z",
      "updated_at": "2017-07-12T02:31:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr  Could you please continue the code review?",
      "created_at": "2017-07-12T04:17:13Z",
      "updated_at": "2017-07-12T04:17:13Z"
    },
    {
      "author": "ArieHein",
      "author_association": "NONE",
      "body": "will this make the value zero validated both as NonNegative and NonPositive ?  \r\nor did I miss something ?",
      "created_at": "2017-07-25T09:07:02Z",
      "updated_at": "2017-07-25T09:07:02Z"
    },
    {
      "author": "dchristian3188",
      "author_association": "CONTRIBUTOR",
      "body": "Yes 0 will fall into both NonNegative and NonPositive. \r\nThe breakdown is:\r\n\r\nPositive -gt 0\r\nNonNegative -ge 0\r\nNegative -lt 0\r\nNonPostive -le 0",
      "created_at": "2017-07-29T17:19:10Z",
      "updated_at": "2017-07-29T17:19:10Z"
    },
    {
      "author": "dchristian3188",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr \r\n\r\nLatest PR removes static variables. Also reworked to get rid of the dynamic variable.\r\n\r\nLet me know if everything looks ok. ",
      "created_at": "2017-07-29T17:28:23Z",
      "updated_at": "2017-07-29T17:28:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@dchristian3188 For ` 0.GetType();` request was\r\n>you should just use  typeof(int)  instead.",
      "created_at": "2017-07-29T18:06:58Z",
      "updated_at": "2017-07-29T18:06:58Z"
    },
    {
      "author": "dchristian3188",
      "author_association": "CONTRIBUTOR",
      "body": "hi @iSazonov , sorry missed that one.\r\n\r\nCorrections have been made. Please review",
      "created_at": "2017-07-29T20:49:55Z",
      "updated_at": "2017-07-29T20:49:55Z"
    },
    {
      "author": "ArieHein",
      "author_association": "NONE",
      "body": "Thers also the issue is 0 defined as positive or negative.\r\n\r\nI need to test my DSC scripts to make sure if I use these validations I get the desired logic.\r\n",
      "created_at": "2017-07-29T23:36:10Z",
      "updated_at": "2017-07-29T23:36:10Z"
    },
    {
      "author": "dchristian3188",
      "author_association": "CONTRIBUTOR",
      "body": "Updates made in latest PR",
      "created_at": "2017-07-30T19:01:17Z",
      "updated_at": "2017-07-30T19:01:17Z"
    }
  ],
  "created_at": "2017-06-22T22:40:54Z",
  "number": 4084,
  "state": "closed",
  "title": "Added Addtional Validation Attributes",
  "updated_at": "2018-10-15T21:56:05Z"
}