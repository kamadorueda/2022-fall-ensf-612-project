{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17824",
  "author": "kcbowhunter",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\n[PeteTheCat.zip](https://github.com/PowerShell/PowerShell/files/9245920/PeteTheCat.zip)\r\n\r\nThe zip file contains 4 files that are used to demonstrate the issue.\r\nPeteThe01.cat is a catalog that contains only one file, Green.dll\r\nTest-FileCatalog works fine when there is one file in the catalog and one file is being tested.\r\n\r\nPeteThe02.cat is a catalog that contains two files, Green.dll and Red.dll\r\nTest-FileCatalog fails to validate Green.dll in the PeteThe02.cat file catalog.\r\n\r\nI am new to using file catalogs, but this behavior looks incorrect.  If I'm doing something wrong, please indicate how to test one file in a catalog with multiple files.\r\n\r\n\n\n### Expected behavior\n\n```console\nTesting the first catalog with one file works correctly:\r\na) without specifying any files\r\nPS D:\\Learn\\TestCat\\Test01> Test-FileCatalog -CatalogFilePath .\\PeteThe01.cat -Detailed\r\n\r\nStatus        : Valid\r\nHashAlgorithm : SHA256\r\nCatalogItems  : {[Green.dll, FD16354EE3B868E122FE3154EF06AA5FB561393F867D538F0D1D6BAD4228CA41]}\r\nPathItems     : {[Green.dll, FD16354EE3B868E122FE3154EF06AA5FB561393F867D538F0D1D6BAD4228CA41]}\r\nSignature     : System.Management.Automation.Signature\r\n(this shows that Petethe01.cat only contains one file)\r\n\r\n\r\nb) The first test using PeteThe01.cat works correctly when specifying a single file to validate:\r\nPS D:\\Learn\\TestCat\\Test01> Test-FileCatalog -CatalogFilePath .\\PeteThe01.cat -Detailed -Path .\\Green.dll\r\n\r\nStatus        : Valid\r\nHashAlgorithm : SHA256\r\nCatalogItems  : {[Green.dll, FD16354EE3B868E122FE3154EF06AA5FB561393F867D538F0D1D6BAD4228CA41]}\r\nPathItems     : {[Green.dll, FD16354EE3B868E122FE3154EF06AA5FB561393F867D538F0D1D6BAD4228CA41]}\r\nSignature     : System.Management.Automation.Signature\r\n\r\n--------------------------------------------------------------------\r\n\r\nSecond test using PeteThe02.cat, a catalog which contains two dll's.\r\nFirst, not specifying any path to Test-FileCatalog shows that PeteThe02.cat is a valid catalog and it contains two dll's:\r\nPS D:\\Learn\\TestCat\\Test02> Test-FileCatalog -CatalogFilePath .\\PeteThe02.cat -Detailed\r\n\r\nStatus        : Valid\r\nHashAlgorithm : SHA256\r\nCatalogItems  : {[Green.dll, FD16354EE3B868E122FE3154EF06AA5FB561393F867D538F0D1D6BAD4228CA41], [Red.dll,\r\n                23B1EE3F3D67F403E092BC88B2BCFCC19087EFCE142A2D071B737F9FF59C5411]}\r\nPathItems     : {[Green.dll, FD16354EE3B868E122FE3154EF06AA5FB561393F867D538F0D1D6BAD4228CA41], [Red.dll,\r\n                23B1EE3F3D67F403E092BC88B2BCFCC19087EFCE142A2D071B737F9FF59C5411]}\r\nSignature     : System.Management.Automation.Signature\r\n\r\n-------------------------------------------------------------------\r\nThe problem occurs when specifying a path to validate one dll for PeteThe02.cat which contains two dll's:\r\n\r\nThe expected behavior is that when testing one file in the catalog with two dll's that the status should be valid:\r\nPS D:\\Learn\\TestCat\\Test02> Test-FileCatalog -CatalogFilePath .\\PeteThe02.cat -Detailed -Path .\\Green.dll\r\n\r\nStatus        : Valid\n```\n\n\n### Actual behavior\n\n```console\nThis is the actual behavior that I am observing; when there are two files in the catalog, when I try to validate one file in the catalog the validation fails.  The syntax used is the same syntax for the first test performed where the validation passed when there was only one file in the catalog.\r\n\r\n\r\nPS D:\\Learn\\TestCat\\Test02> Test-FileCatalog -CatalogFilePath .\\PeteThe02.cat -Detailed -Path .\\Green.dll\r\n\r\nStatus        : ValidationFailed\r\nHashAlgorithm : SHA256\r\nCatalogItems  : {[Green.dll, FD16354EE3B868E122FE3154EF06AA5FB561393F867D538F0D1D6BAD4228CA41], [Red.dll,\r\n                23B1EE3F3D67F403E092BC88B2BCFCC19087EFCE142A2D071B737F9FF59C5411]}\r\nPathItems     : {[Green.dll, FD16354EE3B868E122FE3154EF06AA5FB561393F867D538F0D1D6BAD4228CA41]}\r\nSignature     : System.Management.Automation.Signature\n```\n\n\n### Error details\n\n```console\nGet-Error did not return anything from the Test-FileCatalog command.\n```\n\n\n### Environment data\n\n```powershell\nPS D:\\Learn\\TestCat\\Test01> $psversiontable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.5\r\nPSEdition                      Core\r\nGitCommitId                    7.2.5\r\nOS                             Microsoft Windows 10.0.19044\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n![PeteTheCat01](https://user-images.githubusercontent.com/9277839/182482062-cb1bff11-5bbd-421e-b719-2c8e2ffe1c3f.png)\r\n![PeteTheCat02](https://user-images.githubusercontent.com/9277839/182482231-b6a6b48a-3c25-4d70-88f9-4d0b4b45f7d2.png)\r\n![PeteTheCat03](https://user-images.githubusercontent.com/9277839/182482465-bed5e6ac-95a1-4f23-8003-90cd668cf837.png)\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "kcbowhunter",
      "author_association": "NONE",
      "body": "After doing more research and reading through the source code it looks like the behavior that I'm seeing is the intended behavior.  Also, it appears that you can't specify .\\Filename.dll on the command line when the file is in the catalog as Filename.dll.\r\n\r\nI was able to get the test I wrote to work by using the FilesToSkip option:\r\n\r\nPS D:\\Learn\\TestCat\\Test02> Test-FileCatalog -CatalogFilePath .\\PeteThe02.cat -Detailed -Path Red.dll -FilesToSkip Green.dll\r\n\r\nStatus        : Valid\r\nHashAlgorithm : SHA256\r\nCatalogItems  : {[Red.dll, 23B1EE3F3D67F403E092BC88B2BCFCC19087EFCE142A2D071B737F9FF59C5411]}\r\nPathItems     : {[Red.dll, 23B1EE3F3D67F403E092BC88B2BCFCC19087EFCE142A2D071B737F9FF59C5411]}\r\nSignature     : System.Management.Automation.Signature\r\n\r\nThis is really not very practical when you have a catalog with 100+ files and you want to verify one specific file in the catalog.  How about adding a -VerifyOneFile option that would skip over all the files in the catalog except for the single file being verified.\r\n\r\nMy company is evaluating the use of software catalogs for generating a catalog of unsigned 3rd party dll's that we sign and ship with our products.  We need to give our customers an easy method for verifying that the hashes for the files installed are correct using the (signed) catalog we provide.  \r\n\r\nOur current thinking is to create the files in the catalog during the build process on Azure DevOps pipelines by accumulating 3rd party unsigned dll's over many folders from the build and copying those files to a temporary location to create the catalog.  Therefore the relative paths of the files from where the software will be installed will not match the relative paths of the files in the catalog.  For our purposes, an option of -IgnoreRelativeFilePath or -VerifyHashOnly would be useful.  \r\n\r\nApologies for creating this as a defect if it is more appropriate as a feature request.\r\n",
      "created_at": "2022-08-03T01:08:56Z",
      "updated_at": "2022-08-03T01:08:56Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@WG-Security\r\nThe `Test-FileCatalog` is intended to validate an entire catalog directory and not a single file.  It might make sense to have another cmdlet, or parameter set, that is intended to validate specific files in a catalog, similar to what Windows API does.",
      "created_at": "2022-08-08T20:42:30Z",
      "updated_at": "2022-08-08T20:42:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I wonder what is Path parameter semantic? ",
      "created_at": "2022-08-09T03:44:25Z",
      "updated_at": "2022-08-09T03:44:25Z"
    },
    {
      "author": "kcbowhunter",
      "author_association": "NONE",
      "body": "My example above shows that when there are two files in the catalog and you use the Path parameter to try and validate only one file the result is that the validation fails.\r\n\r\nOur plan is to create a catalog of unsigned 3rd party dll's on our ADO build pipeline.  During the software build process all of the unsigned 3rd party dlls found in the build artifacts are copied  to a temporary folder on the build agent.  The catalog is created using New-FileCatalog from that folder.  \r\n\r\nWe don't include the dll's we create because we apply our digital signature to our dll's.  \r\n\r\nWe were hoping to use Test-FileCatalog to allow our customers to verify that the unsigned 3rd party dll's installed as part of installing one of our software products have not been tampered with.  \r\n\r\nBecause the unsigned 3rd party dlls are collected into a common folder and signed during the build process, the dll's in the catalog will not be found in the same folders when installed via our .msi installer.\r\n\r\nThis gives some of the background why it would be useful to us to for Test-FileCatalog to easily test / validate a single file in the catalog.  Thanks for reading! :-)\r\n",
      "created_at": "2022-08-11T21:20:45Z",
      "updated_at": "2022-08-11T21:20:45Z"
    }
  ],
  "created_at": "2022-08-02T22:16:57Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Security"
  ],
  "number": 17824,
  "state": "open",
  "title": "Test-FileCatalog Fails to Validate a Single File when the Catalog Contains Two Files",
  "updated_at": "2022-08-15T20:35:56Z"
}