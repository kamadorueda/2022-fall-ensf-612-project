{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10614",
  "author": "mklement0",
  "body": "# Summary of the new feature/enhancement\r\n\r\nThere are cases where incorrect use of parameter and validation attributes results in them getting _quietly ignored_, which is undesirable from a UX perspective.\r\n\r\nIdeally, such cases would cause errors at parse time (though I don't know if that's feasible), ideally complemented with PSScriptAnalyzer warnings.\r\n\r\nIf feasible, the changes would technically be breaking; if that's a problem, PSScriptAnalyzer warnings will have to do.\r\n\r\n#### Quietly ignored `[Parameter()]`  attributes if accidentally used outside `param(...)`\r\n\r\n```powershell\r\n& {\r\n  # Note the missing param(...) enclosure.\r\n    [Parameter(ValueFromPipeline)]  # quietly ignored\r\n    $foo = 'bar'    # parsed as a  local variable, not as parameter\r\n}\r\n```\r\n\r\n#### Quietly ignored `[Validate*()]` attributes if a variable isn't initialized:\r\n\r\n```powershell\r\n& {\r\n   # Missing `= <RHS>`, so the attribute is ignored and the \r\n   # value of $foo (if any) is returned\r\n   [ValidateRange(1,10)] $foo\r\n}\r\n```\r\n\r\n\r\n#### Pointless combination of `[Parameter(Mandatory)]`  with a parameter default value:\r\n\r\nNote that there's one case where  a PSScriptAnalyzer warning _alone_ is probably the right solution - and that warning already exists - given that existing code may still behave as designed (the default value may be a remnant from before a  parameter was made mandatory):\r\n\r\n```powershell\r\n& {\r\n  param(\r\n    [Parameter(Mandatory)]\r\n    $foo = 'bar' # pointless, because `Mandatory` still prompts\r\n  )\r\n}\r\n```",
  "closed_at": null,
  "comments": [],
  "created_at": "2019-09-24T17:22:16Z",
  "labels": [
    "Issue-Enhancement"
  ],
  "number": 10614,
  "state": "open",
  "title": "Can we prevent / warn of nonsensical uses of parameter and validation attributes?",
  "updated_at": "2019-09-24T17:22:16Z"
}