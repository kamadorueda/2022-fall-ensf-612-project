{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15526",
  "author": "binyomen",
  "body": "## Steps to reproduce\r\n\r\n```powershell\r\nSet-StrictMode -Version Latest\r\n\r\n$object = [PSCustomObject]@{A=1; B=2; C=3; D=4; E=5}\r\n$object.Count # does not throw after version 6.1\r\n```\r\n\r\n[More thorough repros/differences by version](https://www.pwsh-live-doc.com/pscustomobject#strict-mode)\r\n\r\n## Expected behavior\r\n\r\nThe error text below when trying to access the `Count` property.\r\n\r\n```none\r\nThe property 'Count' cannot be found on this object. Verify that the property exists.\r\n```\r\n\r\n## Actual behavior\r\n\r\nThe `Count` property returns the value of 1.\r\n\r\n```none\r\n1\r\n```\r\n\r\n## Environment data\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n## More detail\r\n\r\nBasically, one of the features of the latest version of strict mode is that trying to access non-existent properties on an object results in an exception. This includes properties like `Count`, which are available on all objects outside of strict mode.\r\n\r\nHowever, after #3671 was resolved, `PSCustomObject` no longer throws when you try to access `Count` in strict mode. The same is true for `Length`. This differs from the behavior of other objects such as numbers, strings, and process objects, which throw when `Count` is accessed.\r\n\r\nIf we want to follow #2798, then potentially the other objects like numbers should have their behavior changed. But as it stands, it seems like `PSCustomObject` is special in that it doesn't match the behavior of other types in strict mode.",
  "closed_at": null,
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> This differs from the behavior of other objects such as numbers, strings, and process objects, which throw when `Count` is accessed.\r\n\r\nThey do not throw:\r\n\r\n![ss](https://user-images.githubusercontent.com/78153320/120881174-0d333680-c5d8-11eb-9430-dc3456c99989.png)\r\n",
      "created_at": "2021-06-05T05:30:27Z",
      "updated_at": "2021-06-05T05:30:27Z"
    },
    {
      "author": "binyomen",
      "author_association": "NONE",
      "body": "Sorry if I didn't clarify enough in the issue description. In your example, I wouldn't expect any of those to throw in strict mode either. `PSCustomObject` doesn't throw, and that's the subject of this issue. Strings won't throw when accessing `Length`, since that's a valid property on strings. They will throw when accessing `Count`, though. `(gps).Count` doesn't throw, since `gps` returns an array, and arrays have a `Count` property.\r\n\r\nMy reasoning behind creating the issue is that most objects that don't have `Count` (or `Length`) properties throw in strict mode when you try to access those properties. `PSCustomObject` doesn't throw, however, which seems like inconsistent behavior.\r\n\r\nDoes that make sense?\r\n\r\n```powershell\r\nPS>Set-StrictMode -Version Latest\r\nPS>'aaa'.Count\r\nPropertyNotFoundException: The property 'Count' cannot be found on this object. Verify that the property exists.\r\nPS>(gps)[0].Count\r\nPropertyNotFoundException: The property 'Count' cannot be found on this object. Verify that the property exists.\r\nPS>(4).Count\r\nPropertyNotFoundException: The property 'Count' cannot be found on this object. Verify that the property exists.\r\nPS>\r\n```",
      "created_at": "2021-06-05T05:47:28Z",
      "updated_at": "2021-06-05T05:55:58Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "> (gps).Count doesn't throw, since gps returns an array, and arrays have a Count property.\r\n\r\nI don't think that is true, `Array` does not have a `Count` property, they just have `Length` so this is another edge case where `Count` is present. I don't really have any strong feelings either way though, Strict Mode is mostly a curiosity for me and not something I've used successfully in the past.",
      "created_at": "2021-06-05T09:32:37Z",
      "updated_at": "2021-06-05T09:32:37Z"
    },
    {
      "author": "binyomen",
      "author_association": "NONE",
      "body": "From using `Get-Member`, it seems like arrays have both a `Count` and a `Length` property, although I might be missing something:\r\n\r\n```\r\nPS> Get-Member -InputObject @(1, 2, 3)\r\n\r\n   TypeName: System.Object[]\r\n\r\nName           MemberType            Definition\r\n----           ----------            ----------\r\nAdd            Method                int IList.Add(System.Object value)\r\nAddress        Method                System.Object&, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicK\u2026\r\nClear          Method                void IList.Clear()\r\nClone          Method                System.Object Clone(), System.Object ICloneable.Clone()\r\nCompareTo      Method                int IStructuralComparable.CompareTo(System.Object other, System.Collections.IComp\u2026\r\nContains       Method                bool IList.Contains(System.Object value)\r\nCopyTo         Method                void CopyTo(array array, int index), void CopyTo(array array, long index), void I\u2026\r\nEquals         Method                bool Equals(System.Object obj), bool IStructuralEquatable.Equals(System.Object ot\u2026\r\nGet            Method                System.Object Get(int )\r\nGetEnumerator  Method                System.Collections.IEnumerator GetEnumerator(), System.Collections.IEnumerator IE\u2026\r\nGetHashCode    Method                int GetHashCode(), int IStructuralEquatable.GetHashCode(System.Collections.IEqual\u2026\r\nGetLength      Method                int GetLength(int dimension)\r\nGetLongLength  Method                long GetLongLength(int dimension)\r\nGetLowerBound  Method                int GetLowerBound(int dimension)\r\nGetType        Method                type GetType()\r\nGetUpperBound  Method                int GetUpperBound(int dimension)\r\nGetValue       Method                System.Object GetValue(Params int[] indices), System.Object GetValue(int index), \u2026\r\nIndexOf        Method                int IList.IndexOf(System.Object value)\r\nInitialize     Method                void Initialize()\r\nInsert         Method                void IList.Insert(int index, System.Object value)\r\nRemove         Method                void IList.Remove(System.Object value)\r\nRemoveAt       Method                void IList.RemoveAt(int index)\r\nSet            Method                void Set(int , System.Object )\r\nSetValue       Method                void SetValue(System.Object value, int index), void SetValue(System.Object value,\u2026\r\nToString       Method                string ToString()\r\nItem           ParameterizedProperty System.Object IList.Item(int index) {get;set;}\r\nCount          Property              int Count {get;}\r\nIsFixedSize    Property              bool IsFixedSize {get;}\r\nIsReadOnly     Property              bool IsReadOnly {get;}\r\nIsSynchronized Property              bool IsSynchronized {get;}\r\nLength         Property              int Length {get;}\r\nLongLength     Property              long LongLength {get;}\r\nRank           Property              int Rank {get;}\r\nSyncRoot       Property              System.Object SyncRoot {get;}\r\n```\r\n\r\nHowever, `PSCustomObject` doesn't have a `Count` property:\r\n\r\n```\r\nPS> Get-Member -InputObject ([pscustomobject]@{a=1; b=2})\r\n\r\n   TypeName: System.Management.Automation.PSCustomObject\r\n\r\nName        MemberType   Definition\r\n----        ----------   ----------\r\nEquals      Method       bool Equals(System.Object obj)\r\nGetHashCode Method       int GetHashCode()\r\nGetType     Method       type GetType()\r\nToString    Method       string ToString()\r\na           NoteProperty int a=1\r\nb           NoteProperty int b=2\r\n```\r\n\r\nNeither do strings or numbers (`Int32` in this case):\r\n\r\n```\r\nPS> Get-Member -InputObject 'aaa'\r\n\r\n   TypeName: System.String\r\n\r\nName                 MemberType            Definition\r\n----                 ----------            ----------\r\nClone                Method                System.Object Clone(), System.Object ICloneable.Clone()\r\nCompareTo            Method                int CompareTo(System.Object value), int CompareTo(string strB), int ICompar\u2026\r\nContains             Method                bool Contains(string value), bool Contains(string value, System.StringCompa\u2026\r\nCopyTo               Method                void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int \u2026\r\nEndsWith             Method                bool EndsWith(string value), bool EndsWith(string value, System.StringCompa\u2026\r\nEnumerateRunes       Method                System.Text.StringRuneEnumerator EnumerateRunes()\r\nEquals               Method                bool Equals(System.Object obj), bool Equals(string value), bool Equals(stri\u2026\r\nGetEnumerator        Method                System.CharEnumerator GetEnumerator(), System.Collections.IEnumerator IEnum\u2026\r\nGetHashCode          Method                int GetHashCode(), int GetHashCode(System.StringComparison comparisonType)\r\nGetPinnableReference Method                System.Char&, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, Pub\u2026\r\nGetType              Method                type GetType()\r\nGetTypeCode          Method                System.TypeCode GetTypeCode(), System.TypeCode IConvertible.GetTypeCode()\r\nIndexOf              Method                int IndexOf(char value), int IndexOf(char value, int startIndex), int Index\u2026\r\nIndexOfAny           Method                int IndexOfAny(char[] anyOf), int IndexOfAny(char[] anyOf, int startIndex),\u2026\r\nInsert               Method                string Insert(int startIndex, string value)\r\nIsNormalized         Method                bool IsNormalized(), bool IsNormalized(System.Text.NormalizationForm normal\u2026\r\nLastIndexOf          Method                int LastIndexOf(char value), int LastIndexOf(char value, int startIndex), i\u2026\r\nLastIndexOfAny       Method                int LastIndexOfAny(char[] anyOf), int LastIndexOfAny(char[] anyOf, int star\u2026\r\nNormalize            Method                string Normalize(), string Normalize(System.Text.NormalizationForm normaliz\u2026\r\nPadLeft              Method                string PadLeft(int totalWidth), string PadLeft(int totalWidth, char padding\u2026\r\nPadRight             Method                string PadRight(int totalWidth), string PadRight(int totalWidth, char paddi\u2026\r\nRemove               Method                string Remove(int startIndex, int count), string Remove(int startIndex)\r\nReplace              Method                string Replace(string oldValue, string newValue, bool ignoreCase, culturein\u2026\r\nSplit                Method                string[] Split(char separator, System.StringSplitOptions options), string[]\u2026\r\nStartsWith           Method                bool StartsWith(string value), bool StartsWith(string value, System.StringC\u2026\r\nSubstring            Method                string Substring(int startIndex), string Substring(int startIndex, int leng\u2026\r\nToBoolean            Method                bool IConvertible.ToBoolean(System.IFormatProvider provider)\r\nToByte               Method                byte IConvertible.ToByte(System.IFormatProvider provider)\r\nToChar               Method                char IConvertible.ToChar(System.IFormatProvider provider)\r\nToCharArray          Method                char[] ToCharArray(), char[] ToCharArray(int startIndex, int length)\r\nToDateTime           Method                datetime IConvertible.ToDateTime(System.IFormatProvider provider)\r\nToDecimal            Method                decimal IConvertible.ToDecimal(System.IFormatProvider provider)\r\nToDouble             Method                double IConvertible.ToDouble(System.IFormatProvider provider)\r\nToInt16              Method                short IConvertible.ToInt16(System.IFormatProvider provider)\r\nToInt32              Method                int IConvertible.ToInt32(System.IFormatProvider provider)\r\nToInt64              Method                long IConvertible.ToInt64(System.IFormatProvider provider)\r\nToLower              Method                string ToLower(), string ToLower(cultureinfo culture)\r\nToLowerInvariant     Method                string ToLowerInvariant()\r\nToSByte              Method                sbyte IConvertible.ToSByte(System.IFormatProvider provider)\r\nToSingle             Method                float IConvertible.ToSingle(System.IFormatProvider provider)\r\nToString             Method                string ToString(), string ToString(System.IFormatProvider provider), string\u2026\r\nToType               Method                System.Object IConvertible.ToType(type conversionType, System.IFormatProvid\u2026\r\nToUInt16             Method                ushort IConvertible.ToUInt16(System.IFormatProvider provider)\r\nToUInt32             Method                uint IConvertible.ToUInt32(System.IFormatProvider provider)\r\nToUInt64             Method                ulong IConvertible.ToUInt64(System.IFormatProvider provider)\r\nToUpper              Method                string ToUpper(), string ToUpper(cultureinfo culture)\r\nToUpperInvariant     Method                string ToUpperInvariant()\r\nTrim                 Method                string Trim(), string Trim(char trimChar), string Trim(Params char[] trimCh\u2026\r\nTrimEnd              Method                string TrimEnd(), string TrimEnd(char trimChar), string TrimEnd(Params char\u2026\r\nTrimStart            Method                string TrimStart(), string TrimStart(char trimChar), string TrimStart(Param\u2026\r\nChars                ParameterizedProperty char Chars(int index) {get;}\r\nLength               Property              int Length {get;}\r\n\r\nPS> Get-Member -InputObject 5\r\n\r\n   TypeName: System.Int32\r\n\r\nName        MemberType Definition\r\n----        ---------- ----------\r\nCompareTo   Method     int CompareTo(System.Object value), int CompareTo(int value), int IComparable.CompareTo(System.\u2026\r\nEquals      Method     bool Equals(System.Object obj), bool Equals(int obj), bool IEquatable[int].Equals(int other)\r\nGetHashCode Method     int GetHashCode()\r\nGetType     Method     type GetType()\r\nGetTypeCode Method     System.TypeCode GetTypeCode(), System.TypeCode IConvertible.GetTypeCode()\r\nToBoolean   Method     bool IConvertible.ToBoolean(System.IFormatProvider provider)\r\nToByte      Method     byte IConvertible.ToByte(System.IFormatProvider provider)\r\nToChar      Method     char IConvertible.ToChar(System.IFormatProvider provider)\r\nToDateTime  Method     datetime IConvertible.ToDateTime(System.IFormatProvider provider)\r\nToDecimal   Method     decimal IConvertible.ToDecimal(System.IFormatProvider provider)\r\nToDouble    Method     double IConvertible.ToDouble(System.IFormatProvider provider)\r\nToInt16     Method     short IConvertible.ToInt16(System.IFormatProvider provider)\r\nToInt32     Method     int IConvertible.ToInt32(System.IFormatProvider provider)\r\nToInt64     Method     long IConvertible.ToInt64(System.IFormatProvider provider)\r\nToSByte     Method     sbyte IConvertible.ToSByte(System.IFormatProvider provider)\r\nToSingle    Method     float IConvertible.ToSingle(System.IFormatProvider provider)\r\nToString    Method     string ToString(), string ToString(string format), string ToString(System.IFormatProvider provi\u2026\r\nToType      Method     System.Object IConvertible.ToType(type conversionType, System.IFormatProvider provider)\r\nToUInt16    Method     ushort IConvertible.ToUInt16(System.IFormatProvider provider)\r\nToUInt32    Method     uint IConvertible.ToUInt32(System.IFormatProvider provider)\r\nToUInt64    Method     ulong IConvertible.ToUInt64(System.IFormatProvider provider)\r\nTryFormat   Method     bool TryFormat(System.Span[char] destination, [ref] int charsWritten, System.ReadOnlySpan[char]\u2026\r\n```",
      "created_at": "2021-06-05T18:16:54Z",
      "updated_at": "2021-06-05T18:16:54Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> it seems like arrays have both a Count and a Length property\r\n\r\nI think this was left for backward compatibility with Windows Powershell, where `Count` was an alias for `Length` and very many scripts use both of them.",
      "created_at": "2021-06-05T21:02:54Z",
      "updated_at": "2021-06-05T21:02:54Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "It\u2019s not documented in the [Array](https://docs.microsoft.com/en-us/dotnet/api/system.array?view=net-5.0) type. While it appears as an adapted property it\u2019s still not part of the underlying type AFAIK.",
      "created_at": "2021-06-05T22:11:46Z",
      "updated_at": "2021-06-05T22:11:46Z"
    },
    {
      "author": "binyomen",
      "author_association": "NONE",
      "body": "> It\u2019s not documented in the [Array](https://docs.microsoft.com/en-us/dotnet/api/system.array?view=net-5.0) type. While it appears as an adapted property it\u2019s still not part of the underlying type AFAIK.\r\n\r\nIt looks like it is documented there. Under \"Explicit Interface Implementations\" the page lists `ICollection.Count`.",
      "created_at": "2021-06-05T22:14:42Z",
      "updated_at": "2021-06-05T22:15:23Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "`Count` tends to persist on most PS objects because it is an automatic property. If you check the `Count` property of any non-array it will generally give you the result `1`, except if the value you're checking is `$null`, when it may be `0`.\r\n\r\nThis is so that users don't have to be hypervigilant over whether a given pipeline result is one or multiple items, and can simply check `Count`.\r\n\r\nNot sure how consistently it works in strict mode, though. ",
      "created_at": "2021-06-06T01:49:10Z",
      "updated_at": "2021-06-06T01:49:10Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Engine-supplied members such as `.Count`, `.Length`, `.psobject`, `ForEach()`, .... now have an official name:  [_intrinsic members_](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_Intrinsic_Members).\r\n\r\nIt makes much more sense to make them _consistently_ available _irrespective of strict mode_.\r\n\r\nThis is already true for most of them, but inexplicably not for `.Count` and `.Length` (in general), despite their tremendous usefulness in unified handling of scalars and collections, as mentioned by @vexx32.\r\n\r\nIn short: Fix #2798, and everyone will live happily ever after.\r\n\r\n`Set-StrictMode` isn't heavily used anyway, but at least for me it was #2798 that prevented me from ever using `Set-StrictMode -Version 2` or higher.\r\n\r\nHere's a quick demonstration of the inconsistency:\r\n\r\n```powershell\r\n# .psobject, .ForEach(), scalar indexing already work in all strict modes, .Count does not.\r\nPS> & { Set-StrictMode -version Latest; ('foo').psobject; ('foo').ForEach({\"[$_]\"}); (42)[0]; ('foo').Count }\r\n\r\n\r\nBaseObject          : foo\r\nMembers             : {char Chars(int index) {get;}, int Length {get;}, Remove, Replace\u2026}\r\nProperties          : {int Length {get;}}\r\nMethods             : {Remove, Replace, Split, Substring\u2026}\r\nImmediateBaseObject : foo\r\nTypeNames           : {System.String, System.Object}\r\n\r\n[foo]\r\n42\r\n\r\nPropertyNotFoundException: The property 'Count' cannot be found on this object. Verify that the property exists.\r\n```",
      "created_at": "2021-07-20T18:09:09Z",
      "updated_at": "2021-07-20T18:12:08Z"
    }
  ],
  "created_at": "2021-06-05T04:05:57Z",
  "labels": [
    "Needs-Triage",
    "WG-Engine-ParameterBinder"
  ],
  "number": 15526,
  "state": "open",
  "title": "PSCustomObject still has properties like Count and ForEach, even in strict mode",
  "updated_at": "2021-07-20T18:12:08Z"
}