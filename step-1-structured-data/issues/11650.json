{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11650",
  "author": "p0W3RH311",
  "body": "this decorator are a way of wrapping a function in another one. Decorators are very powerful and useful since it allows programmers to modify the behavior of function . Decorators allow us to wrap another function in order to extend the behavior of wrapped function, without permanently modifying it. this is an example (we can use measure-command but this example demonstrate this new technique):\r\n\r\n```\r\nfunction timeExecution([scriptblock]$fn) {\r\n\t\r\n \r\n\tfunction inner([scriptblock]$fn) {\r\n\r\n\t\t$begin = [Diagnostics.Stopwatch]::StartNew() \r\n\t\t\r\n\t\t&{$fn} \r\n\r\n        $end = $sw.Stop()\r\n  \t\t\"Total time taken in : $(&{$fn.functionName }) $($end - $begin)\"\r\n\r\n\t   inner\r\n    }\r\n}\r\n\r\n function mainfunc($n) :timeExecution {\r\n\t sleep $n\r\n\t'in main function'\r\n }\r\n\r\n\r\nmainfunc 3\r\n```\r\n\r\ni know this breaking change but it allow new possibilities to PS7+ ,  scriptblock object must have new members isfunction and functionName to perform this technique",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Hmm. I don't think you need to make any changes in PS itself to accomplish this. You just need to change what you're passing around.\r\n\r\nFunctions are the upper layer here - a FunctionInfo object contains both a name and a scriptblock. So while scriptblocks can contain function _declarations_, they cannot contain functions directly.\r\n\r\nOnce a function is declared, you can retrieve the FunctionInfo object using `Get-Item Function:\\Function-Name` -- it's a standard PSDrive you can retrieve items from kind of like the filesystem.\r\n\r\nIf you pass function objects themselves around, I think you'll be able to mimic the kind of behaviour you're looking for. \ud83d\ude42 ",
      "created_at": "2020-01-22T01:16:50Z",
      "updated_at": "2020-01-22T01:17:35Z"
    },
    {
      "author": "p0W3RH311",
      "author_association": "NONE",
      "body": "\r\n\r\n\r\n\r\n> \r\n> \r\n> Hmm. I don't think you need to make any changes in PS itself to accomplish this. You just need to change what you're passing around.\r\n> \r\n> Functions are the upper layer here - a FunctionInfo object contains both a name and a scriptblock. So while scriptblocks can contain function _declarations_, they cannot contain functions directly.\r\n> \r\n> Once a function is declared, you can retrieve the FunctionInfo object using `Get-Item Function:\\Function-Name` -- it's a standard PSDrive you can retrieve items from kind of like the filesystem.\r\n> \r\n> If you pass function objects themselves around, I think you'll be able to mimic the kind of behaviour you're looking for. slightly_smiling_face\r\n\r\nthanks for the information but there are still some problems because i am trying to pass a function as a parameter to another function but my workaround is  scriptblock its not perfect and it will be awesome if there is a magic variable like $func and this variable contains information about the main function for example:\r\n\r\n```\r\nfunction timeExecution {\r\n\t\r\n \r\n\tfunction inner {\r\n\r\n\t\t$begin = [Diagnostics.Stopwatch]::StartNew() \r\n\t\t\r\n\t\t&{$func} \r\n\r\n        $end = $sw.Stop()\r\n  \t\t\"Total time taken in : $($func.functionName ) $($end - $begin)\"\r\n\r\n\t   inner\r\n    }\r\n}\r\n\r\n function mainfunc($n) :timeExecution {\r\n\t sleep $n\r\n\t'in main function'\r\n }\r\n```\r\n\r\n\r\n\r\nand the other problem how to mimic this syntax\r\n\r\n` function mainfunc($n) :timeExecution`\r\n\r\n",
      "created_at": "2020-01-22T02:38:10Z",
      "updated_at": "2020-01-22T02:38:10Z"
    }
  ],
  "created_at": "2020-01-21T20:57:22Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Language"
  ],
  "number": 11650,
  "state": "open",
  "title": "decorator in function",
  "updated_at": "2020-01-22T07:00:57Z"
}