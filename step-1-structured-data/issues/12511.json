{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12511",
  "author": "schuelermine",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nThe side indicators in the output of Compare-Object have been changed from `<=` and `=>` to `<-` and `->`.\r\n\r\n## PR Context\r\n\r\nThe symbol `<=` is most often used to mean less-than-or-equal.\r\nThis is particularly poignant using fonts that support ligatures, such as Cascadia Code.\r\nThis PR avoids this and changes the difference side indicator to match the style of the non-ambiguous reference side indicator.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**; **User-facing changes**\r\n    - [x] Scripts reading from the `SideIndicator` fields in `Compare-Object`'s output might no longer work.\r\n        - Notably, using `.Contains` on the `SideIndicator` value works before and after this PR\r\n- **Testing - New and feature**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] See breaking changes above",
  "closed_at": "2020-05-29T20:35:53Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> This is particularly poignant using fonts that support ligatures, such as Cascadia Code.\r\n\r\nDo you see an issue with `==`?",
      "created_at": "2020-05-01T18:08:42Z",
      "updated_at": "2020-05-01T18:08:42Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "The side indicator `=>` and `<=` is a programmatically accessible item. Hence, I believe this is a breaking change. It only gives a different visual aid and no improvement in functionality.",
      "created_at": "2020-05-01T18:09:43Z",
      "updated_at": "2020-05-01T18:09:43Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I see where the OP is coming from.  This is less than ideal when you use a font with ligatures:\r\n\r\n![image](https://user-images.githubusercontent.com/5177512/80831527-3baa3b00-8ba8-11ea-9636-6861f24c043b.png)\r\n\r\nMaybe there could be a new switch parameter to enable ligature friendly indicators?",
      "created_at": "2020-05-01T18:36:04Z",
      "updated_at": "2020-05-01T18:36:04Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Honestly, if we were to consider changing this, the SideIndicator should be an enum or similar value with custom ToString() behaviour for the pretty formatting so you can work more easily with it programmatically.\r\n\r\nThe whole concept of SideIndicator is pretty ambiguous. It always takes a handful of seconds when I use Compare-Object to get straight in my head which ones are in which collection and what that means for the present use case.\r\n\r\nA property like `ObjectLocation` with `ReferenceSet` or `DifferenceSet` or `BothSets` would be _much_ more clear on all fronts IMO. The arrow thing is both very unclear and awkward to handle programmatically. That could be added as a side by side with the current side indicators, and we could leave the current sideindicators in the object output for compatibility, perhaps optionally being hidden completely in the formatting. \r\n\r\nI don't think the current display is very accessible to anyone, but imagine if someone working with a screen reader tried to work out what on earth is going on in that output. Good luck, frankly.",
      "created_at": "2020-05-01T18:45:17Z",
      "updated_at": "2020-05-01T18:48:05Z"
    },
    {
      "author": "schuelermine",
      "author_association": "CONTRIBUTOR",
      "body": "I have noted in the PR description that there are breaking changes, thank you @adityapatwardhan ",
      "created_at": "2020-05-03T10:29:25Z",
      "updated_at": "2020-05-03T10:29:25Z"
    },
    {
      "author": "schuelermine",
      "author_association": "CONTRIBUTOR",
      "body": "I agree with @vexx32. In this case, it might be possible to allow the user to choose the string representation of a `SideIndicator` object.\r\n\r\nIt might also be possible to cast both `\"=>\"` and `\"Difference\"` to the same `SideIndicator` object, meaning that scripts using `$side_indicator -eq \"=>\"` wouldn't be affected at all, since `\"=>\"` would get cast to the correct value.",
      "created_at": "2020-05-03T10:31:08Z",
      "updated_at": "2020-05-03T10:31:08Z"
    },
    {
      "author": "schuelermine",
      "author_association": "CONTRIBUTOR",
      "body": "Again, regarding @vexx32's comment:  \r\nI personally do not know how to add a new Enum type to the project, so I fear I will not be able to do that myself.",
      "created_at": "2020-05-03T10:32:30Z",
      "updated_at": "2020-05-03T10:32:30Z"
    },
    {
      "author": "schuelermine",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov I do not see an issue with `==`",
      "created_at": "2020-05-03T10:36:32Z",
      "updated_at": "2020-05-03T10:36:32Z"
    },
    {
      "author": "schuelermine",
      "author_association": "CONTRIBUTOR",
      "body": "> \r\n> \r\n> The side indicator `=>` and `<=` is a programmatically accessible item. Hence, I believe this is a breaking change. It only gives a different visual aid and no improvement in functionality.\r\n\r\nNotably, it does _not_ break scripts using the `.Cotains()` method, since `\"==>\".Contains(\"=>\")` is True.",
      "created_at": "2020-05-03T10:37:43Z",
      "updated_at": "2020-05-03T10:37:43Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMainainer, Please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-05-27T02:00:53Z",
      "updated_at": "2020-05-27T02:00:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I don't see a value from the PR and I'd close.\r\n@adityapatwardhan It is for MSFT team conclusion.",
      "created_at": "2020-05-27T07:34:59Z",
      "updated_at": "2020-05-27T07:34:59Z"
    },
    {
      "author": "schuelermine",
      "author_association": "CONTRIBUTOR",
      "body": "I think the Enum thing is a better idea",
      "created_at": "2020-05-27T10:47:44Z",
      "updated_at": "2020-05-27T10:47:44Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "Yes, I would prefer to have it as an enum or a parameters to override the default.\r\n\r\nAnd if the override is the default you want to set, then [PSDefaultParameterValues](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_parameters_default_values?view=powershell-7) can be used in your profile.\r\n\r\nSomething like: \r\n\r\n```\r\nCompare-Object -ReferenceObject $a -DifferenceObject $b -SideIndicator @{Difference = '->'; Reference = '<-'; Equal = '==' }\r\n```\r\n@schuelermine @vexx32  @iSazonov @rkeithhill \r\nYour thoughts?",
      "created_at": "2020-05-28T18:36:42Z",
      "updated_at": "2020-05-28T18:37:01Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "My vote would go to the enum solution. It's probably the least breakable overall. Having a parameter to override them completely is nice for niche cases purely for display but I don't see it being useful in scripts at all.\r\n\r\nBoth could be implemented side by side though; extend the current objects with a new property to make it easier to handle programmatically, and then add a parameter to customize the strings used to display the indicator.",
      "created_at": "2020-05-28T18:47:36Z",
      "updated_at": "2020-05-28T18:50:33Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I like what @adityapatwardhan proposes with:\r\n```\r\n-SideIndicator @{Difference = '->'; Reference = '<-'; Equal = '==' }\r\n```\r\nOne option to prevent breaking changes would be to add another field `SideIndicatorDisplay` (or something like that) and use that string for displaying on the host.  Then you could default that new field to use the updated, ligature-friendly arrows.  Scripts would continue to use `SideIndicator` and wouldn't be broken.  ",
      "created_at": "2020-05-28T19:00:28Z",
      "updated_at": "2020-05-28T19:00:28Z"
    },
    {
      "author": "schuelermine",
      "author_association": "CONTRIBUTOR",
      "body": "I think the enum solution is the best one.",
      "created_at": "2020-05-28T19:37:31Z",
      "updated_at": "2020-05-28T19:45:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I don't see any value for the change.\r\nIf intention is to add the enum it is a breaking change and should be considered by PowerShell Committee.",
      "created_at": "2020-05-29T05:58:54Z",
      "updated_at": "2020-05-29T05:58:54Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "From what I recall, Compare-Object's output is just a PSObject. Adding a new property would not be a breaking change.",
      "created_at": "2020-05-29T14:06:37Z",
      "updated_at": "2020-05-29T14:06:37Z"
    },
    {
      "author": "schuelermine",
      "author_association": "CONTRIBUTOR",
      "body": "Making an Enum would not impact scripts. If `\"==\"` is coerced to `BothSets`, then things like `$SideIndicator -eq \"==\"` would still work.",
      "created_at": "2020-05-29T14:37:51Z",
      "updated_at": "2020-05-29T14:38:14Z"
    },
    {
      "author": "schuelermine",
      "author_association": "CONTRIBUTOR",
      "body": "At any rate, the proposed solutions seem to me to stop being relevant to this specific pull request. I'm not sure about the guidelines/general practice here, but I think the addition of an Enum and the addition of a parameter, whichever is more desirable, are very different from what I've written in this PR. Maybe an RFC or a new PR is in order. Again, I'm not sure about the procedure.",
      "created_at": "2020-05-29T14:42:48Z",
      "updated_at": "2020-05-29T14:42:48Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "@schuelermine The proposed changes are relevant because this PR, as it stands right now, is a breaking change.  We're trying to suggest ways that you can get the \"display behavior\" you and I both want (I use a ligature font as well) and not introduce a breaking change.",
      "created_at": "2020-05-29T16:47:35Z",
      "updated_at": "2020-05-29T16:47:35Z"
    },
    {
      "author": "schuelermine",
      "author_association": "CONTRIBUTOR",
      "body": "@rkeithhill In that case, I'd recommend closing this PR and starting work on one or more of the suggestions offered here.\r\nI'm not sure if I have the authority (not ability, I do have the ability) to close this PR. Should it be closed?",
      "created_at": "2020-05-29T18:33:11Z",
      "updated_at": "2020-05-29T18:33:11Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "You should be able to close it if you want. If not, one of us can close it for you, no worries. \ud83d\ude42 \r\n\r\nJudging by all the discussion here, it might be a good idea to raise a new issue and discuss in there until we come to a conclusion on what the right course of action is.",
      "created_at": "2020-05-29T18:38:51Z",
      "updated_at": "2020-05-29T18:38:51Z"
    },
    {
      "author": "schuelermine",
      "author_association": "CONTRIBUTOR",
      "body": "OK.",
      "created_at": "2020-05-29T20:35:53Z",
      "updated_at": "2020-05-29T20:35:53Z"
    },
    {
      "author": "schuelermine",
      "author_association": "CONTRIBUTOR",
      "body": "I have created a new issue https://github.com/PowerShell/PowerShell/issues/12841, where more discussion can take place.",
      "created_at": "2020-05-29T20:48:30Z",
      "updated_at": "2020-05-29T20:48:30Z"
    }
  ],
  "created_at": "2020-04-28T14:44:48Z",
  "number": 12511,
  "state": "closed",
  "title": "Adjust the side indicators of Compare-Object to prevent misinterpreting `<=` as less-than-or-equal",
  "updated_at": "2020-05-29T20:48:30Z"
}