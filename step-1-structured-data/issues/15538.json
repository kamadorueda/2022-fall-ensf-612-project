{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15538",
  "author": "JAK1047",
  "body": "Just a question on what I assume is due to a change in .net 5. I've encountered a small breaking change when converting one of my Powershell 5.1 scripts to be Powershell 7 compatible. In our environment I have an import script where I can't be positive on the delimiter in a string, so previously I used the .net string split method like: .Split(';:,') which would split on any of those characters. Seems that that's changed in Powershell 7 assumedly due to a change in .net.\r\n\r\n![image](https://user-images.githubusercontent.com/29665481/121088440-c306ac80-c7b3-11eb-9962-0c1f2e9bd3d3.png)\r\n\r\nSuper easy fix I can either chain .splits together or in my case I just swapped to the regex split operator: -split ',|:|;'. But I can't seem to find any documentation on either the .net or Powershell side mentioning what this change would have been. Any help for an explanation?\r\n\r\n---\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0",
  "closed_at": "2021-06-07T23:47:02Z",
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "```\r\n'a;b:c,d'.Split([char[]]';,:')\r\n```",
      "created_at": "2021-06-07T21:31:28Z",
      "updated_at": "2021-06-07T21:31:28Z"
    },
    {
      "author": "JAK1047",
      "author_association": "NONE",
      "body": "So previously the .Net String Split method defaulted with the Char[] overload and now defaults to String[] or something along those lines? Was that a .Net change somewhere between framework and core? Not looking for a solution just hoping to find the reason behind the difference and documentation of the change if possible.",
      "created_at": "2021-06-07T21:41:12Z",
      "updated_at": "2021-06-07T21:43:44Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "Windows Powershell has no `string` separator, just `string[]`. PowerShell Core has . This is why the separator type has to be specified. As I think.\r\n```\r\n(''.Split).OverloadDefinitions\r\n```",
      "created_at": "2021-06-07T22:12:06Z",
      "updated_at": "2021-06-07T22:12:06Z"
    },
    {
      "author": "JAK1047",
      "author_association": "NONE",
      "body": "Gotcha so those extra overloads were added at some point with Core and now in my example instead of being read as a string array or char array, checking each character individually against the string, it's instead by default just read as a singular string? (Unless of course I specify the type explicitly)\r\n\r\nAm I getting the gist of it?",
      "created_at": "2021-06-07T22:31:29Z",
      "updated_at": "2021-06-07T22:31:29Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> it's instead by default just read as a singular string?\r\n\r\nYes. Otherwise, it is impossible to distinguish a string from a set of delimiters.",
      "created_at": "2021-06-07T23:07:59Z",
      "updated_at": "2021-06-07T23:07:59Z"
    },
    {
      "author": "JAK1047",
      "author_association": "NONE",
      "body": "That answers my question on the difference then. Thank you!",
      "created_at": "2021-06-07T23:47:02Z",
      "updated_at": "2021-06-07T23:47:02Z"
    }
  ],
  "created_at": "2021-06-07T21:20:32Z",
  "number": 15538,
  "state": "closed",
  "title": "Question on .net Split Change",
  "updated_at": "2021-06-07T23:47:02Z"
}