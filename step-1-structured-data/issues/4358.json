{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4358",
  "author": "akervinen",
  "body": "This has already been posted on UserVoice ([here](https://windowsserver.uservoice.com/forums/301869-powershell/suggestions/20102977-command-line-parsing-bug-spaces-and-trailing-slas)), but appears to still happen in 6.0.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nUsing any .exe capable of outputting its command line arguments:\r\n```powershell\r\nPS X:\\scratch> .\\ps-args-test.exe .\\test1\\ '.\\test 2\\' .\\test1\\\r\n```\r\nAuto-completion uses this format with a trailing backslash, so it's expected to work correctly.\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\n.\\test1\\\r\n.\\test 2\\\r\n.\\test1\\\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\n.\\test1\\\r\n.\\test 2\" .\\test1\\\r\n```\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-beta\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-beta.4\r\nOS                             Microsoft Windows 10.0.14393\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2017-10-11T14:01:10Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: \r\n\r\nThis is only indirectly related to IntelliSense (which _suggests_ passing the arguments like that).\r\n\r\nThe real issue is how the command line is rebuilt _behind the scenes_ by PowerShell:\r\n\r\nArgument list `.\\test1\\ '.\\test 2\\' .\\test1\\` is translated to `.\\test1\\ \".\\test 2\\\" .\\test1\\` behind the scenes, which any external utility that uses `\\` as the escape character (most of them) parses as demonstrated in the initial post, causing the initial argument partitioning to be misinterpreted:\r\n\r\n* The 2nd `\"` in `\".\\test 2\\\"`, due to being preceded by `\\` is interpreted as an _escaped_ `\"`, causing the remainder of the string - despite a then-missing closing `\"` to be interpreted as part of the same argument.\r\n\r\n---\r\n\r\nThe - cumbersome - **workaround** on **Windows** is to add an extra `\\`, though, given that PowerShell does _re-quoting_ behind the scenes (as is _necessary_ on Windows), the **fix** is to let _PowerShell_  do  that _automatically_:\r\n\r\n    > .\\ps-args-test.exe .\\test1\\ '.\\test 2\\\\' .\\test1\\  # Note the '\\\\'\r\n\r\nThe - proper, hopefully-soon - **fix** on **Unix** platforms is to pass the arguments as an _array of literals_ to the target utility, as is the norm on Unix platforms, bypassing such issues altogether. (Re-quoting behind the scenes is _unnecessary_ on Unix platforms and should be _avoided altogether_.)\r\n\r\ncc @SteveL-MSFT \r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2017-07-28T01:09:17Z",
      "updated_at": "2017-07-28T01:14:15Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Unless I hear otherwise, this doesn't seem to be a common use case.  I think we can fix in 6.1.0 unless someone from the community submits a PR.",
      "created_at": "2017-07-28T22:21:06Z",
      "updated_at": "2017-07-28T22:21:06Z"
    },
    {
      "author": "akervinen",
      "author_association": "NONE",
      "body": "I'd argue it's common since it happens every time I auto-complete a directory name with a space unless I remove the trailing slash manually. My example was a bit incomplete I think, since the extra quote is also inserted with just one argument.\r\n\r\n```powershell\r\nPS X:\\scratch> .\\ps-args-test.exe '.\\test 2\\'\r\n```\r\n```\r\n.\\test 2\"\r\n```\r\n\r\nA shell that has a broken auto-complete for directories is... inconvenient.",
      "created_at": "2017-07-30T21:29:44Z",
      "updated_at": "2017-07-30T21:29:44Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@akervinen I see, every time with a space is definitely a concern",
      "created_at": "2017-07-30T23:46:44Z",
      "updated_at": "2017-07-30T23:46:44Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The trailing slash is added by PSReadline, not by powershell tab completion:\r\n```\r\nPS> $s = TabExpansion2 -inputScript 'git t' -cursorColumn 'git t'.Length\r\nPS> $s.CompletionMatches[0].CompletionText\r\n'.\\test 2'\r\n```\r\nSo this is more of a PSReadline issue, maybe PSReadline should have an option to no adding trailing slash for directories?",
      "created_at": "2017-08-04T22:00:58Z",
      "updated_at": "2017-09-12T16:22:10Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@daxian-dbw: \r\n\r\nNot appending a `\\` would be a band-aid, especially given that nothing stops a user from _typing_ a path that ends in `\\`.\r\n\r\nThere is no good reason not to properly support passing of whitespace-containing arguments that end in `\\`.\r\n\r\nAt the risk of repeating myself: The problem is a fundamental problem with how PS rebuilds the command line behind the scenes on Windows and that it even _does so at all_ on Unix platforms, and it should be fixed at that level.\r\n\r\n",
      "created_at": "2017-08-04T22:39:01Z",
      "updated_at": "2017-08-04T23:17:54Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@mklement0 I see your point now.\r\nThe problem is in `NativeCommandParameterBinder.cs`, which cause the argument passed in native commands like this:\r\n```\r\nPS> testexe.exe -echoargs '.\\test 2\\'\r\nArg 0 is <.\\test 2\">\r\n```",
      "created_at": "2017-08-04T22:50:56Z",
      "updated_at": "2017-08-04T22:50:56Z"
    },
    {
      "author": "JVimes",
      "author_association": "NONE",
      "body": "Just lost an hour wondering why git status wouldn't work with -C. And a number of RoboCopy folks [lost time](https://github.com/RamblingCookieMonster/PSDeploy/issues/42) to it.\r\n\r\nThis use case gets hit!",
      "created_at": "2017-09-12T15:48:11Z",
      "updated_at": "2017-09-12T15:48:11Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> The - cumbersome - workaround on Windows is to add an extra \\, though, given that PowerShell does re-quoting behind the scenes (as is necessary on Windows), the fix is to let PowerShell do that automatically:\r\n>      .\\ps-args-test.exe .\\test1\\ '.\\test 2\\\\' .\\test1\\  # Note the '\\\\'\r\n\r\n@mklement0 Do you think we should do this fix for now or shall we wait until https://github.com/dotnet/corefx/issues/23592 is addressed?\r\n\r\nI'm trying to do this fix now but having some trouble figuring out the reasonable behavior handling the trailing backslashes of an arg string. When the arg string needs to be quoted, the trailing backslashes will escape each other and if there are odd number of backslashes, then the closing quote will be misinterpreted, for example:\r\n```powershell\r\nPS> testexe.exe -echoargs 'test \\'\r\nArg 0 is <test \">\r\nPS> testexe.exe -echoargs 'test \\\\'\r\nArg 0 is <test \\>\r\nPS> testexe.exe -echoargs 'test \\\\\\'\r\nArg 0 is <test \\\">\r\nPS> testexe.exe -echoargs 'test \\\\\\\\'\r\nArg 0 is <test \\\\>\r\n```\r\nNow, we think the resulting `\"` is confusing, and the ending `\\` should be preserved when passing to the native command. As a result, we will see behaviors like this:\r\n```powershell\r\nPS> testexe.exe -echoargs 'test \\'\r\nArg 0 is <test \\>\r\nPS> testexe.exe -echoargs 'test \\\\'\r\nArg 0 is <test \\>\r\nPS> testexe.exe -echoargs 'test \\\\\\'\r\nArg 0 is <test \\\\>\r\nPS> testexe.exe -echoargs 'test \\\\\\\\'\r\nArg 0 is <test \\\\>\r\n```\r\nYou can see that when there is an odd number of backslashes, the ending backslash will be preserved, which makes the odd number of trailing backslashes always behave as _(odd number + 1)_ trailing backslashes. Does this look like a reasonable behavior?",
      "created_at": "2017-09-19T00:09:20Z",
      "updated_at": "2017-09-19T15:53:38Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@daxian-dbw:\r\n\r\nMy sense is that once [this RFC proposal](https://github.com/PowerShell/PowerShell-RFC/pull/90) by @TSlivede is implemented, it will cover this scenario too, so we probably don't need a separate fix for this specific issue.\r\n\r\nFor background, see https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-325231274",
      "created_at": "2017-09-19T00:50:05Z",
      "updated_at": "2017-09-19T00:50:05Z"
    },
    {
      "author": "TSlivede",
      "author_association": "NONE",
      "body": "Yes, that's true. My RFC-Proposal (or any other fix for https://github.com/PowerShell/PowerShell/issues/1995) should also fix this. Basically we could rename https://github.com/PowerShell/PowerShell/issues/1995 to something like \"Arguments for external executables aren't correctly escaped\". In that case this issue could be closed as duplicate.",
      "created_at": "2017-09-19T08:56:17Z",
      "updated_at": "2017-09-19T08:56:17Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@TSlivede makes sense.  Dupe of https://github.com/PowerShell/PowerShell/issues/1995",
      "created_at": "2017-09-19T16:16:19Z",
      "updated_at": "2017-09-19T16:16:19Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I'm separating this out from the uber issue of args to native commands which might be resolved by a future corefx api.  I'll see if there is something we can do to solve this one sooner.",
      "created_at": "2017-10-01T03:02:45Z",
      "updated_at": "2017-10-01T03:02:45Z"
    },
    {
      "author": "triynko",
      "author_association": "NONE",
      "body": "This bug causes all kinds of problem in Jenkins builds.  Trying to set any ENV variable to a path that ends in a backslash causes this.\r\n\r\nFor example, if you try to call   setx 'MY_PATH' 'C:\\folder1\\folders\\' /M;\r\nIt ends up setting MYPATH to \"C:\\folder1\\folder2\" /M\"\r\nSo instead of the value ending in a backslash, it ends with a double quote, a space, a forward slash, and a capital M. I happen to be setting a SignalFx environment home path, so it ends up crashing the entire profiler process.\r\n\r\nIt doesn't get more wrong that that.  And Jenkins is just tied to this Powershell version (v5.1.19041.1023) so there's no fixing it. Just literally cannot pass any Powershell arguments using single quotes when the string ends in a backslash.\r\n\r\nThe PSReadline dependency implicated here is the same problematic project that prevents more than 50 characters from being pasted into docker container when powershell is active (works fine when basic cmd.exe is active instead) to this very day.",
      "created_at": "2021-09-21T17:27:28Z",
      "updated_at": "2021-09-21T17:30:47Z"
    }
  ],
  "created_at": "2017-07-27T11:43:08Z",
  "labels": [
    "Issue-Bug",
    "WG-Engine",
    "Resolution-Fixed"
  ],
  "number": 4358,
  "state": "closed",
  "title": "Command line parsing bug: spaces and trailing backslash",
  "updated_at": "2021-09-21T17:30:47Z"
}