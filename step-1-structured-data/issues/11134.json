{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11134",
  "author": "mklement0",
  "body": "_Update_: This issue was originally about `Out-Default`, but since the latter is not meant to be called from user code, that is a moot point; however, `Out-Host` is equally affected, and `Out-Host` has legitimate end-user uses, namely to send command output to the host rather than to the success stream.\r\n\r\nUse of `Out-Host` should not affect transcription behavior, but it currently does with respect to _stderr_ output from _external programs_ (PowerShell commands aren't affected): such output is unexpectedly not recorded.\r\n\r\n# Steps to reproduce\r\n\r\nRun the following on Windows:\r\n\r\n```powershell\r\n$file = [IO.Path]::GetTempFileName()\r\nStart-Transcript $file\r\n\r\n# Execute an external command that produces both stdout and stderr output\r\n# Note: Without the Out-Host, transcribing works as expected.\r\ncmd /c 'echo stdout & nosuch' | Out-Host\r\n\r\nStop-Transcript\r\n\r\nSelect-String 'stdout' $file | Should -match 'stdout'\r\nSelect-String 'nosuch' $file | Should -match 'nosuch'\r\n\r\n'Tests completed.'\r\nRemove-Item $file\r\n```\r\n\r\n# Expected behavior\r\n\r\nBoth tests should pass.\r\n\r\n# Actual behavior\r\n\r\nThe 2nd test fails, because stderr output was not recorded.\r\n\r\n```none\r\nExpected regular expression 'nosuch' to match $null, but it did not match.\r\n```\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core 7.0.0-preview.6\r\n```\r\n\r\nWindows PowerShell is affected too.",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "/cc @PaulHigin \r\n\r\nThis seems kind of strange to me. Does the same thing happen with `Out-Host` as well?",
      "created_at": "2019-11-20T16:58:11Z",
      "updated_at": "2019-11-20T16:58:11Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 \r\n\r\n`Out-Host` and `Out-Default` are radically different cmdlets. `Out-Default` is only intended to be used by the host and requires the pipeline to be set up in a specific way to work properly. I have a more detailed description of what's going on in issue #11135",
      "created_at": "2019-11-21T04:29:43Z",
      "updated_at": "2019-11-21T04:29:43Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Good question, @vexx32: Yes, the same thing happens with `Out-Host` (I've updated the title and the OP).\r\n\r\nGiven that `Out-Default` is generally not meant to be used directly, the `Out-Host` case is a more problematic one:\r\n\r\nFor instance, you could be using `| Out-Host` for display-only output.\r\n\r\n(You could also be using it to force _synchronous_ output from implicitly table-formatted cmdlet output, to ensure correct sequencing of intermixed host and success-stream output in the transcript, but the true PowerShell error stream _is_ properly transcribed - leaving  aside that it currently results in _duplicate_ transcript entries; transcribing currently has a number of bugs).\r\n\r\n\r\n\r\n",
      "created_at": "2019-11-21T15:26:51Z",
      "updated_at": "2019-11-21T15:27:22Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@mklement0  Setting aside `Out-Default`, what if you put a `Start-Sleep` before `Stop-Transcription`? Or redirect the streams?\r\n\r\nAre you trying to use `Out-Host` to circumvent format timing issues? Because remember, the pipeline is typically just the output stream.  The other streams still go through formatting and probably hit similar timing issues.",
      "created_at": "2019-11-21T15:48:33Z",
      "updated_at": "2019-11-21T15:49:14Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "The only timing issue I am aware of is the 300 msec. delay when table-formatting is implicitly applied to output types that don't have predefined formatting data (as explained [here](https://stackoverflow.com/a/34858911/45375)). Are there others?\r\n\r\nYes, `Out-Host` solves that timing issue, but that use case isn't problematic, because, as stated in the previous comment, _true error stream content_ IS recorded in that case - it is only _stderr_ output from external programs that is missing.\r\n\r\nI have no personal use case, but it's conceivable that someone just wants to send command output selectively to the host in a script, using `Out-Host`, and that should work with external programs too.\r\n\r\nJust to be safe, I tried adding `Start-Sleep 5` before `Stop-Transcript`, and it made no difference.\r\n\r\nYes, a `2>&1` redirection would solve the problem - but that shouldn't be necessary.\r\n",
      "created_at": "2019-11-21T16:05:29Z",
      "updated_at": "2019-11-21T16:05:48Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Ah.  Yeah you're right.  I think the problem is in the native command processor.  There's a ton of edge cases around what's downstream in the pipeline, etc that determines how stdout/err are directed.  For anyone looking into it I'd recommend starting around here:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/8d944fdec28652625d1bb4dadb32d2a581cb8121/src/System.Management.Automation/engine/NativeCommandProcessor.cs#L1191-L1212",
      "created_at": "2019-11-21T16:36:21Z",
      "updated_at": "2019-11-21T16:36:21Z"
    }
  ],
  "created_at": "2019-11-20T16:11:56Z",
  "labels": [
    "Issue-Bug",
    "WG-Security"
  ],
  "number": 11134,
  "state": "open",
  "title": "Explicit use of Out-Host causes stderr output from external programs not to be recorded in transcripts",
  "updated_at": "2021-06-07T20:52:35Z"
}