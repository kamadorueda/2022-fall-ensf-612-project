{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12703",
  "author": "mikeTWC1984",
  "body": "# Summary of the new feature/enhancement\r\n\r\n<!-- \r\nGeneral idea is to convert console output to HTML.\r\n-->\r\nMain idea is to capture colors from console stdout and convert it to HTML, so tools using it for logging (e.g. jenkins) could produce pretty looking logs. \r\nActually error printing is already doing this:\r\n![image](https://user-images.githubusercontent.com/31977106/82155376-8089cf00-9842-11ea-85e3-e2cdc877463e.png)\r\nBut Write-* cmdlets output does not contain ansi codes though, so there is no straightforward way to get those colors on html log.\r\n\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\n<!-- \r\nA clear and concise description of what you want to happen.\r\nConsider providing an example PowerShell experience with expected result.\r\n-->\r\n\r\nThis could be extra option for OutputFormat e.g.\r\n```\r\npwsh -of ansi -c \"Write-Host 123 -fore green\"\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Perhaps @daxian-dbw have thoughts about this.\r\n\r\nPersonally, I would prefer PowerShell to initially do HTML formatting and render this for terminals.\r\n",
      "created_at": "2020-05-17T18:44:53Z",
      "updated_at": "2020-05-17T18:44:53Z"
    },
    {
      "author": "mikeTWC1984",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov  that would be even better (is this something on radar?) ",
      "created_at": "2020-05-17T20:29:47Z",
      "updated_at": "2020-05-17T20:29:47Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "As a workaround you could implement a custom `PSHost` whose `PSHostUserInterface.WriteErrorLine`, `WriteDebugLine`, `Write(ConsoleColor, ConsoleColor, String)` etc use ANSI.",
      "created_at": "2020-05-18T00:49:30Z",
      "updated_at": "2020-05-18T00:50:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> that would be even better (is this something on radar?)\r\n\r\nNo. It looks weird, but when the whole world invests in web, MSFT invests in a dump teletype. :-)\r\nAlthough I know that there are GiHub projects of similar web->tty rendering.\r\n\r\n",
      "created_at": "2020-05-18T03:41:33Z",
      "updated_at": "2020-05-18T03:41:33Z"
    },
    {
      "author": "mikeTWC1984",
      "author_association": "CONTRIBUTOR",
      "body": "Some more thoughts on this.\r\nturns out many cli tools include color codes only if stdout goes to tty (terminal/emulator). The common pattern to include colors everywhere is to use --color flag. Good example is \"ls -la --color\". I think that could be good option for pwsh too, at least on nix platforms. There are actually some options to emulate tty on linux, but it might work strange.\r\n\r\nAnother good feature/solution could be adding ansi coloring as string class extension. E.g.\r\n```powershell\r\nWrite-Host \"red string on green background\".Fg(\"red\").Bg(\"green\")\r\nWrite-Host \"just red string\".Red\r\n```\r\n",
      "created_at": "2020-06-29T21:36:25Z",
      "updated_at": "2020-06-29T21:36:25Z"
    },
    {
      "author": "mikeTWC1984",
      "author_association": "CONTRIBUTOR",
      "body": "Actually the script tool  (tty emulator, linux only but seemed to be in the box on major distros) is quite ok.  The snippet below would do about what I want , although some extra trimming is needed because pwsh generates some weird sequences like \"`e=\"  that  may not be parsed. \r\n```powershell\r\nscript -qec 'pwsh -f ./myscript.ps1' | ansi-to-html\r\n```\r\n",
      "created_at": "2020-06-30T04:11:01Z",
      "updated_at": "2020-06-30T04:12:40Z"
    }
  ],
  "created_at": "2020-05-17T17:57:35Z",
  "number": 12703,
  "state": "open",
  "title": "Feature Request: Write-* cmdlets  - add ANSI color codes to stdout",
  "updated_at": "2020-06-30T04:12:40Z"
}