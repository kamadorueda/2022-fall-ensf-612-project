{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7728",
  "author": "pldmgg",
  "body": "# Goal:\r\n\r\nEnter an interactive pwsh.exe session on a (Windows) Remote Host using SSH Public Cert Authentication using BOTH ssh.exe AND pwsh.exe `*-PSSession` cmdlets\r\n\r\n# Requirements:\r\n\r\n- SSH Client must be on a Windows OS\r\n- SSHD Server must be on a Windows OS\r\n- SSH Cert Authentication must be used\r\n- The `Subsystem` sshd_config option must be used\r\n- The `ForceCommand` sshd_config option must NOT be used\r\n- Optionally specify `DefaultShell` as pwsh.exe under `HKLM:\\SOFTWARE\\OpenSSH` if necessary\r\n\r\n# Environment\r\n\r\nRelevant info about ssh client and sshd server machines:\r\n\r\n- zerotesting5.zero.lab (192.168.2.13) is the localhost (client) and zerowin16sshb.zero.lab (192.168.2.53) is the Remote Host (server).\r\n- Both are running Windows 2016 Standard\r\n- Both have pwsh 6.1.0-rc1 (and ONLY pwsh 6.1.0-rc1) installed\r\n- Both are running OpenSSH-Win64 7.7.2.0\r\n- ssh-agent Service is running on both machines (`sshd -ddd` is run manually on the sshd server for each test in order to collect logs)\r\n- Each machine's Signed Host Cert (`ssh-rsa-cert-v01@openssh.com AAAA... C:\\ProgramData\\ssh\\ssh_host_rsa_key`) is loaded in the ssh-agent for both client and server (not sure if this is necessary)\r\n- zero\\zeroadmin's SSH Cert `ssh-rsa-cert-v01@openssh.com AAAA... C:\\Users\\zeroadmin\\.ssh\\zeroadmin_090618_114109` is loaded in the ssh-agent on the client\r\n- Baseline sshd_config is as follows: https://gist.github.com/pldmgg/2850f834889fc430c08e3fd4e735c3e3\r\n\r\n# What Works Beyond Any Doubt:\r\n\r\nTesting so far proves that SSH Certificate Authentication is configured properly since I can consistently get to an interactive cmd.exe session on the Remote Host via any of the following commands:\r\n\r\n```\r\nssh zeroadmin@zero@zerowin16sshb\r\n\r\nssh -o \"IdentitiesOnly=true\" -i \"C:\\Users\\zeroadmin\\.ssh\\zeroadmin_090618\" -i \"C:\\Users\\zeroadmin\\.ssh\\zeroadmin_090618-cert.pub\" zeroadmin@zero@zerowin16sshb\r\n\r\nssh -o \"IdentitiesOnly=true\" -i \"C:\\Users\\zeroadmin\\.ssh\\zeroadmin_090618\" zeroadmin@zero@zerowin16sshb\r\n```\r\n\r\nFor completeness sake, `C:\\Users\\zeroadmin\\.ssh\\zeroadmin_090618-cert.pub` is in this format:\r\n\r\n```\r\nssh-rsa-cert-v01@openssh.com AAAA...<truncated>...Bg==\r\n```\r\n\r\n# What Does Not Work:\r\n- I have not been able to get any of the `*-PSSession` pwsh.exe cmdlets to work under any circumstances (using SSH Cert Auth).\r\n- The above ssh.exe commands NEVER honor the sshd_config `Subsystem` setting. What I SHOULD see in sshd logs is the following...\r\n\r\n```\r\nStarting session: subsystem 'powershell' for zero\\\\zeroadmin from 192.168.2.13 port 51060 id 0\r\n```\r\n\r\n...What I always end up seeing is the following...\r\n\r\n```\r\nStarting session: shell on windows-pty for zero\\\\zeroadmin from 192.168.2.13 port 50944 id 0\r\n```\r\n\r\nFull sshd logs can be found under the relevant SCENARIO sections below.\r\n\r\nSide Note: Using the pwshe.exe `*-PSSession` cmdlets DOES honor `Subsystem` (i.e., I see the desired `Starting session: subsystem ...` in sshd logs), however, they never actually create a PSSession.\r\n\r\n# The Closest I Got to Satisfying Requirements:\r\n\r\n## SCENARIO 1:\r\n\r\n### Config Info (these are the ONLY things that are changed from the above sshd_config between testing scenarios)\r\n\r\n- `DefaultShell` Entry in Registry - NO\r\n- `ForceCommand pwsh.exe -NoProfile` implemented in sshd_config - YES\r\n- `Subsystem powershell C:/symlinks/pwsh.exe -sshs -NoLogo -NoProfile` implemented in sshd_config -YES\r\n(NOTE: `C:/symlinks/pwsh.exe` is a symlink to `C:/Program Files/Powershell/6-preview/pwsh.exe`)\r\n\r\n### Result\r\n\r\n- The aforementioned ssh commands place me in pwsh.exe on the Remote Host (SUCCESS)\r\n- `*-PSSession` cmdlets on the client side fail for some unknown reason (FAILURE)\r\n- Additional Notes:\r\n1) `Subsystem` is NOT honored when using ssh.exe. `Subsystem` IS honored when using the `*-PSSession` cmdlets.\r\n2) Changing `ForceCommand pwsh.exe -NoProfile` to `ForceCommand pwsh.exe -sshs -NoLogo -NoProfile` causes ssh.exe to hang on the client side, but things look okay on the sshd side\r\n\r\nLOGS:\r\n\r\n1) SSHExe_No_DefaultShell_In_Registry: https://gist.github.com/pldmgg/3fa040a73ce6f83385dbc05acb96cf1a\r\n2) New-PSSession_No_DefaultShell_In_Registry: https://gist.github.com/pldmgg/6cf1a2e1ca02ae540062222fc50bbb63\r\n\r\n## SCENARIO 2:\r\n\r\n### Config Info (these are the ONLY things that are changed from the above sshd_config between testing scenarios)\r\n\r\n- `DefaultShell` Entry in Registry of `C:/Program Files/Powershell/6-preview/pwsh.exe` - YES\r\n- `ForceCommand` implemented in sshd_config - NO\r\n- `Subsystem powershell C:/symlinks/pwsh.exe -sshs -NoLogo -NoProfile` implemented in sshd_config -YES\r\n(NOTE: `C:/symlinks/pwsh.exe` is a symlink to `C:/Program Files/Powershell/6-preview/pwsh.exe`)\r\n\r\n### Result\r\n\r\n- The aforementioned ssh commands place me in pwsh.exe on the Remote Host (SUCCESS)\r\n- `*-PSSession` cmdlets on the client side fail for some unknown reason (FAILURE)\r\n- Additional Notes:\r\n1) `Subsystem` is NOT honored when using ssh.exe. `Subsystem` IS honored when using the `*-PSSession` cmdlets.\r\n\r\nLOGS:\r\nI can post this as public gists, but long story short, the same problems mentioned in the \"What Does Not Work\" section above apply.\r\n\r\n## ALL OTHER SCENARIOS:\r\n\r\nTrying config settings other than those outlined in the above 2 Scenarios always resulted in one of the following outcomes:\r\n\r\n- Placed me in cmd.exe on the Remote Host\r\n- Prevented me from connecting altogether\r\n- Hung indefinitely on either Client or SSHD side\r\n\r\nAttempting to connect using SSH Cert Auth via the `*-PSSession` cmdlets (i.e. the `-HostName`, `-KeyFilePath`, and optionally the `-SSHTransport` parameters) has never been successful under any circumstances. Specifically I tried the following under all testing scenarios that I attempted...\r\n\r\n```powershell\r\nNew-PSSession -HostName zerowin16sshb -UserName zero\\zeroadmin -KeyFilePath \"C:\\Users\\zeroadmin\\.ssh\\zeroadmin_090618-cert.pub\"\r\n\r\nNew-PSSession -HostName zerowin16sshb -UserName zero\\zeroadmin -KeyFilePath \"C:\\Users\\zeroadmin\\.ssh\\zeroadmin_090618\"\r\n\r\nNew-PSSession -HostName zerowin16sshb -UserName zeroadmin -KeyFilePath \"C:\\Users\\zeroadmin\\.ssh\\zeroadmin_090618-cert.pub\"\r\n\r\nNew-PSSession -HostName zerowin16sshb -UserName zeroadmin -KeyFilePath \"C:\\Users\\zeroadmin\\.ssh\\zeroadmin_090618\"\r\n\r\nNew-PSSession -HostName zerowin16sshb -UserName zero\\zeroadmin -KeyFilePath \"C:\\Users\\zeroadmin\\.ssh\\zeroadmin_090618-cert.pub\" -SSHTransport\r\n\r\nNew-PSSession -HostName zerowin16sshb -UserName zero\\zeroadmin -KeyFilePath \"C:\\Users\\zeroadmin\\.ssh\\zeroadmin_090618\" -SSHTransport\r\n\r\nNew-PSSession -HostName zerowin16sshb -UserName zeroadmin -KeyFilePath \"C:\\Users\\zeroadmin\\.ssh\\zeroadmin_090618-cert.pub\" -SSHTransport\r\n\r\nNew-PSSession -HostName zerowin16sshb -UserName zeroadmin -KeyFilePath \"C:\\Users\\zeroadmin\\.ssh\\zeroadmin_090618\" -SSHTransport\r\n```\r\n\r\nThanks in advance for any help!",
  "closed_at": "2018-09-12T12:34:33Z",
  "comments": [
    {
      "author": "pldmgg",
      "author_association": "NONE",
      "body": "~~From /u/ainesophaur on reddit~~\r\n~~(https://www.reddit.com/r/PowerShell/comments/9doeqm/has_anyone_successfully_been_able_to_get_to_an/)~~\r\n\r\n~~\"There's a github issue about this and ultimately it was stated that authing by key pair will not grant you a kerberos session.. So you're then unable to do remote powershell using kerberos or negotiate auth. Your options are to either sign in with username and password via ssh (which will give you a kerberos ticket) or you have to use basic auth for remote powershell\"~~\r\n\r\n~~This actually makes a lot of sense to me...is that what's going on here?~~\r\n\r\nEDIT: No it's not...",
      "created_at": "2018-09-07T14:15:32Z",
      "updated_at": "2018-09-09T16:45:46Z"
    },
    {
      "author": "pldmgg",
      "author_association": "NONE",
      "body": "The discussion over here...\r\n\r\nhttps://github.com/PowerShell/Win32-OpenSSH/issues/1246\r\n\r\n...has led me to believe that this is not a Kerberos issue.\r\n\r\nHere's more information.\r\n\r\n### Using Password Auth\r\n\r\nsshd Logs...\r\n(Problems after line 260)\r\nhttps://gist.github.com/pldmgg/2b675389975c19d27ea17cc7da14e52e\r\n\r\nOn the client side, it just hangs...\r\n```powershell\r\nPS C:\\Users\\zeroadmin> New-PSSession -HostName zerowin16sshb\r\nzeroadmin@ZERO@zerowin16sshb's password:\r\n\r\n# I need the Ctrl-C here, otherwise it just hangs indefinitely\r\n```\r\n\r\n### Using SSH (RSA) Cert Auth:\r\n\r\nsshd Logs...\r\n(Problems after line 304)\r\nhttps://gist.github.com/pldmgg/c0172dfbd8a867b5f5c52ae159c14bbd\r\n\r\nOn the client side...\r\n```powershell\r\nPS C:\\Users\\zeroadmin> New-PSSession -HostName zerowin16sshb -UserName zero\\zeroadmin -KeyFilePath \"C:\\Users\\zeroadmin\\.ssh\\zeroadmin_090918_121751-cert.pub\"\r\n\r\n# I need the Ctrl-C here, otherwise it just hangs indefinitely\r\n```\r\n\r\n@dantraMSFT Sorry to bother you, and I'm not really asking for help with diagnosis, but more of a sanity check:\r\n\r\nHave you / anyone you know been able to get pwsh.exe `*-PSSession` cmdlets to work between **two Windows machines** via SSH (i.e. -HostName, -KeyFilePath, -SSHTransport parameter set)? If yes, I'll redouble my efforts to try and diagnose my own problem since I'll know of at least one person that's been successful. But right now, I don't know anyone that's been able to make it work (password auth, key auth, or ssh cert auth).",
      "created_at": "2018-09-09T16:40:11Z",
      "updated_at": "2018-09-09T16:53:50Z"
    },
    {
      "author": "dantraMSFT",
      "author_association": "CONTRIBUTOR",
      "body": "@pldmgg I've been using Server->Server with OpenSSH regularly for the last few weeks; the target is Server 2016 so I've installed OpenSSH there and also PowerShell RC-1. \r\nHere's an example:\r\n\r\n$session = New-PSSession -HostName mytargetserver -UserName testuser -KeyFilePath ~\\.ssh\\testuserprivatekey\r\n\r\nOn the target system, I have the following configuration: \r\n\r\n* sshd_config\r\n\r\n```none\r\nSubsystem\tpowershell c:\\powershell\\pwsh.exe -sshs -NoLogo -NoProfile\r\nPubkeyAuthentication yes\r\nAuthorizedKeysFile\t.ssh/authorized_keys\r\n```\r\n%username%\\.ssh\r\n\r\nI simply copied the public key for my user to authorized_keys. \r\n\r\nI also ran the two permission 'fixing' scripts from the OpenSSH directory (FixHostFilePermissions.ps1 and FixUserFilePermissions.ps1).  Like the Linux versions, OpenSSH requires restricted permissions on various files.\r\n\r\nFinally, if you installed PowerShell under 'Program Files' on the target system, it will not work with OpenSSH due to a [known issue](https://github.com/PowerShell/Win32-OpenSSH/issues/784) with OpenSSH and subsystem paths that contain spaces.  The suggested fix is to create a symlink for pwsh.exe but I found this did not work on my 2016 systems. I ended up creating a directory symlink to the PowerShell Core installation directory. (That's why the above sbsystem references c:\\powershell).  \r\n",
      "created_at": "2018-09-10T17:56:12Z",
      "updated_at": "2018-09-10T17:56:12Z"
    },
    {
      "author": "pldmgg",
      "author_association": "NONE",
      "body": "@dantraMSFT Thanks so much for getting back to me.\r\n\r\nUnfortunately, I still haven't had any success getting the `*-PSSession` cmdlets to work between two Windows 2016 Standard machines. I've tried fresh VMs, different domains, always with the result where pwsh on the client Win16 machine hangs and I need to Ctrl+C.\r\n\r\nI'm certain that I've followed all of the aforementioned guidance (symlinks, permissions, etc), but still no dice.\r\n\r\nI'm not going to close this issue because I really feel like someone should be able to recreate this issue. But I understand if a contributor wants to close this issue without a solution if the issue can't be recreated.",
      "created_at": "2018-09-11T23:37:33Z",
      "updated_at": "2018-09-11T23:37:59Z"
    },
    {
      "author": "dantraMSFT",
      "author_association": "CONTRIBUTOR",
      "body": "Here are a few things to check:\r\n1: Verify the pwsh.exe symlink actually works. Open a command prompt and attempt to run it as  you have it defined in sshd_config\r\n2: Let's get the Win32 OpenSSH team involved. There's a few errors in the client side log but I don't know how to  interpret them.\r\nEnsure you have logging set up for both client and server as described here: https://github.com/PowerShell/Win32-OpenSSH/wiki/Troubleshooting-Steps\r\nThe I would create an issue here: https://github.com/powershell/Win32-OpenSSH/issues\r\n\r\nFeel free to reference me in the issue so I can stay in the loop.  \r\nI'm going to be unavailable for a few days so be patient if you're looking for a response from me.",
      "created_at": "2018-09-11T23:59:22Z",
      "updated_at": "2018-09-11T23:59:22Z"
    },
    {
      "author": "pldmgg",
      "author_association": "NONE",
      "body": "HOLY CRAP I figured it out!\r\n\r\nMy mistake was that I was creating the symlink to pwsh.exe directly as opposed to its parent directory, i.e.\r\n\r\n```powershell\r\nNew-Item -ItemType SymbolicLink -Path \"C:\\symlinks\\pwsh.exe\" -Target $(Get-Command pwsh).Source\r\n```\r\n\r\nWhen I made a symlink to pwsh.exe's parent directory (and updated the Subsystem path in sshd_config), the `*-PSSession` cmdlets started working:\r\n\r\n```powershell\r\nNew-Item -ItemType SymbolicLink -Path \"C:\\pwshRoot\" -Target $($(Get-Command pwsh).Source | Split-Path -Parent)\r\n```\r\n\r\nNow we're firing on all cylinders (password auth, key auth, ssh cert auth)\r\n\r\nThanks for your help @dantraMSFT !",
      "created_at": "2018-09-12T12:34:33Z",
      "updated_at": "2018-09-12T12:34:33Z"
    }
  ],
  "created_at": "2018-09-06T23:11:29Z",
  "number": 7728,
  "state": "closed",
  "title": "SSH Between 2 Windows Machines Using pwsh.exe and OpenSSH-Win64 with SSH Cert Auth",
  "updated_at": "2018-10-30T06:15:08Z"
}