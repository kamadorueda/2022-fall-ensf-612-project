{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14095",
  "author": "Fs00",
  "body": "While using only System.Management.Automation as a dependency for an application of mine (**without the entire SDK** because I didn't need it), I was getting sometimes a `NullReferenceException` that was thrown in this line of code:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/4b9b0788ed28ea6d463ce857d1ed81bd4a977a59/src/System.Management.Automation/engine/TypeTable_Types_Ps1Xml.cs#L51\r\n\r\nbecause `type` was null.\r\n\r\nDigging in the stack trace, I found out that the null reference was originated by the following instruction:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/4b9b0788ed28ea6d463ce857d1ed81bd4a977a59/src/System.Management.Automation/engine/TypeTable_Types_Ps1Xml.cs#L4072\r\n\r\nThe `securityDescriptorCommandsBaseType` variable gets passed to the method `GetMethodInfo`, which contains the return statement with the variable `type` shown above.\r\n\r\nOnce you know that the referenced type (`Microsoft.PowerShell.Commands.SecurityDescriptorCommandsBase`) belongs to the Microsoft.PowerShell.Security package, and that the latter depends on System.Management.Automation, it becomes apparent that [TypeResolver.ResolveType](https://github.com/PowerShell/PowerShell/blob/76cef3b299911ba264fef7a2f510dd633f36497d/src/System.Management.Automation/engine/parser/TypeResolver.cs#L489) was being used in place of `typeof` to avoid a circular dependency at compile time between the two assemblies.\r\nThe problem is that the circular dependency still exists and causes the NRE mentioned above when System.Management.Automation is used alone.\r\n\r\nTherefore, since I think that probably that dependency can't be broken, I would propose to \"loosen\" it by adding a null-check that prevents all the code related to the `securityDescriptorCommandsBaseType` from being executed when Microsoft.PowerShell.Security assembly is not available (which should be lines [4074-4128](https://github.com/PowerShell/PowerShell/blob/4b9b0788ed28ea6d463ce857d1ed81bd4a977a59/src/System.Management.Automation/engine/TypeTable_Types_Ps1Xml.cs#L4074L4128) or even 4074-4210, I'm not sure).\r\n\r\nI'm willing to open a PR to mitigate this problem after receiving your feedback on it, since - unlike me - you know the context and the motivation of the code I mentioned throughout this issue.",
  "closed_at": "2022-07-26T04:16:53Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Could you please comment?",
      "created_at": "2020-11-15T16:47:55Z",
      "updated_at": "2020-11-15T16:47:55Z"
    },
    {
      "author": "Fs00",
      "author_association": "CONTRIBUTOR",
      "body": "Hello @daxian-dbw, could you please take a look at this and see if my proposed solution could be enough to solve it?\r\nI don't want to bother you, but this issue is getting stale and I would like to see it fixed (if it's possible to).",
      "created_at": "2021-02-10T08:25:08Z",
      "updated_at": "2021-02-10T08:25:08Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Currently, the security assembly is required.  We are looking at this type of feature in the future.",
      "created_at": "2021-03-08T22:04:15Z",
      "updated_at": "2021-03-08T22:04:15Z"
    },
    {
      "author": "Fs00",
      "author_association": "CONTRIBUTOR",
      "body": "Ok, so - if I understood correctly - the proper fix would consist in fully decoupling those two assemblies, right?",
      "created_at": "2021-03-08T22:41:08Z",
      "updated_at": "2021-03-08T22:42:35Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "I'll let @daxian-dbw  talk to what the correct fix is.",
      "created_at": "2021-03-09T20:17:25Z",
      "updated_at": "2021-03-09T20:17:25Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #16355, which has now been successfully released as `v7.3.0-preview.7`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.3.0-preview.7)\n",
      "created_at": "2022-08-12T00:02:08Z",
      "updated_at": "2022-08-12T00:02:08Z"
    }
  ],
  "created_at": "2020-11-15T14:15:47Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine",
    "Up-for-Grabs",
    "Resolution-Fixed"
  ],
  "number": 14095,
  "state": "closed",
  "title": "Circular dependency at runtime between System.Management.Automation and Microsoft.PowerShell.Security",
  "updated_at": "2022-08-12T00:02:08Z"
}