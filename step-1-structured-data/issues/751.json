{
  "_url": "https://github.com/PowerShell/PowerShell/issues/751",
  "author": "andschwa",
  "body": "The \"deprecated\" PsSnapIn system believes that `System.Management.Automation.dll` depends on `System.Core.dll`, which is false when building for .NET Core. Unfortunately, PowerShell (through the `InitialSessionState` constructor `CreateDefault2()`) still uses the PsSnapIn system to load the SMA assembly, and so throws an internal exception when it can't find `System.Core.dll`.\n\nThe PsSnapIn system really needs to be fully removed.\n",
  "closed_at": "2018-01-18T23:31:13Z",
  "comments": [
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@JamesWTruher: \"Please add a stack trace\"\n",
      "created_at": "2016-04-07T21:54:42Z",
      "updated_at": "2016-04-07T21:54:42Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Unfortunately, the latest versions of VS Code no longer debug very well...\n",
      "created_at": "2016-04-22T20:46:16Z",
      "updated_at": "2016-04-22T20:46:16Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "```\n\"Could not load file or assembly 'System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' or one of its dependencies. The system cannot find the file specified under any probing paths.\" [string]\n```\n\nAt:\n\n![stacktrace](https://cloud.githubusercontent.com/assets/2226434/14754735/1e558994-0892-11e6-818e-ea6851e1d79e.PNG)\n\nUnfortunately, VS Code doesn't support capturing that stack trace as text :frowning: \n",
      "created_at": "2016-04-22T20:57:37Z",
      "updated_at": "2016-04-22T20:57:37Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@BrucePay Do you know what's causing this?\n",
      "created_at": "2016-04-22T21:03:45Z",
      "updated_at": "2016-04-22T21:03:45Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@lzybkr Could you help me out with this some time?\n",
      "created_at": "2016-04-29T21:29:13Z",
      "updated_at": "2016-04-29T21:29:13Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Repro: run PowerShell in debugger with \"uncaught exception\" allowed.\n",
      "created_at": "2016-06-08T21:32:40Z",
      "updated_at": "2016-08-17T05:53:33Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "@andschwa this issue is unrelated to Snapins system.\nThe stack trace indicates that it's comming from static ctor of `PSVersionInfo`.\n\nIt looks like dotnet core problem with custom ALC.\nHere is a minimal repro that doesn't include anything from PS, except our ALC.\nThey still fire the event to resolve `System.Core`.\n`System.Core` is a reference assembly, all the types are forwarded into the implementation assembly from it.\n\n```\nusing System.Management.Automation;\nnamespace Microsoft.PowerShell\n{\n    /// <summary>\n    /// Defines an entry point for the .NET CLI \"powershell\" app\n    /// </summary>\n    public sealed class ManagedPSEntry\n    {\n        /// <summary>\n        /// Starts the managed MSH\n        /// </summary>\n        /// <param name=\"args\">\n        /// Command line arguments to the managed MSH\n        /// </param>\n        public static int Main(string[] args)\n        {\n            // Open PowerShell has to set the ALC here, since we don't own the native host\n            PowerShellAssemblyLoadContextInitializer.SetPowerShellAssemblyLoadContext(string.Empty);          \n\n System.Console.WriteLine(System.Diagnostics.FileVersionInfo.GetVersionInfo(\"/Users/vors/dev/PowerShell/debug/powershell\").FileVersion.ToString());\n            return 0;\n        }\n    }\n}\n\n```\n",
      "created_at": "2016-06-29T05:53:30Z",
      "updated_at": "2016-06-29T05:53:30Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Since it's external, I will keep issue around for references.\nWe don't needed this for 0.6.0.\n",
      "created_at": "2016-06-29T05:54:19Z",
      "updated_at": "2016-06-29T05:54:19Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "> `System.Core` is a reference assembly\n\nThat's a key piece of information right there.\n\nI imagine this might not repro now with the catalog being automatically generated.\n",
      "created_at": "2016-06-29T06:33:58Z",
      "updated_at": "2016-06-29T06:33:58Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Confirmed, this still repros with v6.0.0-alpha.10-8-gdd2394b1e608.\n",
      "created_at": "2016-09-16T19:29:03Z",
      "updated_at": "2016-09-16T19:29:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I can not repo - I think after we migrated to .Net Core 2.0 it's gone and we can close the Issue.\r\n\r\n/cc @SteveL-MSFT @daxian-dbw ",
      "created_at": "2018-01-18T12:52:41Z",
      "updated_at": "2018-01-18T12:52:41Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I cannot reproduce the issue either. We have stopped using a custom implementation of `AssemblyLoadContext` in powershell. Instead, we solely depend on the default loader (`AssemblyLoadContext.Default`) for loading assemblies. I think we can close this issue now.",
      "created_at": "2018-01-18T23:31:13Z",
      "updated_at": "2018-01-18T23:31:13Z"
    }
  ],
  "created_at": "2016-03-29T22:33:22Z",
  "number": 751,
  "state": "closed",
  "title": "dotnet fires a resolve event for \"System.Core.dll\", when it should not",
  "updated_at": "2018-02-08T06:42:14Z"
}