{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13579",
  "author": "mklement0",
  "body": "* On Windows, PowerShell terminates strings sent via the pipeline to native programs with an implicit trailing CRLF.\r\n\r\n* If WSL (`wsl.exe`) happens to be targeted, the ultimately invoked Unix utility usually only expects LF newlines, retaining the CR instances _as part of the data_, causing problems, as shown in the `awk` example below.\r\n\r\n**Note**: \r\n\r\n* I'm not sure where the proper place to resolve this is. Arguably,  it is `wsl.exe` (and `bash.exe`) that should translate CRLF sequences to LF sequences before processing stdin input, but that should only be done for _text_ input, and it is only the _calling_ shell that knows whether data is textual or not (if PowerShell is the calling shell, the input is _always_ text, but that's not necessarily always true).\r\n\r\n* A simple way to solve the problem is to make PowerShell always send stdin input with LF-only newlines (``\"`n\"``), under the assumption that even native Windows programs recognize such newline sequences; while technically a breaking change, it _may_ be a [Bucket 3: Unlikely Grey Area](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md#bucket-3-unlikely-grey-area) change, and therefore acceptable.\r\n\r\n## Steps to reproduce\r\n\r\nOn Windows, with WSL and an Ubuntu distro as the default:\r\n\r\nThe following should output `two one` - a single line.\r\n\r\n```powershell\r\n'one two' | wsl -e awk '{ print $2, $1 }' | should -be 'two one'\r\n```\r\n\r\n## Expected behavior\r\n\r\nThe test should pass.\r\n\r\n## Actual behavior\r\n\r\n```none\r\nExpected 'two one', but got @('two', ' one').\r\n```\r\n\r\nWhat the output doesn't directly show is the root cause of the problem: `two` is actually ``two`r`` (verbatim `two` followed by a CR in the raw output, which `awk` retained as part of field `$2` due to not considering CRs part of newlines), due to the input line using CRLF as the trailing newline.\r\n\r\nSince PowerShell recognizes a CR _by itself_ as a newline too, the output is parsed as _two_ lines.\r\n\r\n## Environment data\r\n\r\n```none\r\nPowerShell Core 7.1.0-preview.6\r\n```\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2020-09-04T22:29:31Z",
  "number": 13579,
  "state": "open",
  "title": "PowerShell's piping of strings with implicit trailing CRLF newlines causes problems with WSL on Windows",
  "updated_at": "2021-01-18T05:53:49Z"
}