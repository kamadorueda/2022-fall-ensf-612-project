{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2179",
  "author": "be5invis",
  "body": "like, `ls` would be a cmdlet accepting a parameter called `al`, and produces a full list while its output result is typed.\n",
  "closed_at": "2021-02-25T21:35:17Z",
  "comments": [
    {
      "author": "GeeLaw",
      "author_association": "NONE",
      "body": "Hmmm perhaps we want to check out if any param name collides.\n",
      "created_at": "2016-09-05T06:48:55Z",
      "updated_at": "2016-09-05T06:48:55Z"
    },
    {
      "author": "be5invis",
      "author_association": "NONE",
      "body": "@GeeLaw Maybe an alternative parameter parser in `getopt` flavor?\n",
      "created_at": "2016-09-05T18:37:33Z",
      "updated_at": "2016-09-05T18:37:33Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "The basic idea sounds like a great open source module side-project, but not something that should _ever_ be done as part of Core PowerShell.  \n\nIt would be a huge amount of work (and most of it would be wasted). These so-called \"original\" apps have almost 50 years of evolution ... with lots of redundant options and conflicting parameter sets, most of which are rarely if ever used.\n\n> For example, the _simple_ command `ls` has over 50 parameters, from `-a` and `-A` (which can't be used together) to `-x` and `-X` (which have nothing to do with each other) and `-Z` (which _must_ be upper case).  On top of that, it responds to environment variables...\n\nHowever, more importantly, it **can't really be done**, because the _parameter syntax_ of Unix native commands simply _isn't supported_ in PowerShell. \n- `--double-dash-parameter` names aren't really valid\n- smashing together of individual letter flags does not work\n- case-sensitive flags aren't valid\n- `--parameter=value` isn't valid (PowerShell uses `-parameter:value`)\n\nPowerShell currently sort-of allows those things when you're passing parameters to a native executable, but it certainly does not allow them with native PowerShell scripts or cmdlets. Even if the PowerShell team decided to allow case-sensitive aliases on PowerShell commands, you would still have to accept using \":\" instead of \"=\" for parameter values, **and** to give up on smashing flag parameters together -- which would mean that the muscle-memory things would just not work.\n\nBut even if you were ok with that, you still can't do it:\n\nFirst you'd have to choose between divergent versions of the commands and parameters available across the Linux ecosystem. E.g. GNU vs BSD.  As a simple example, consider the command `ls` where the `-F` and `-G` flags involve **color** on BSD, but append indicators and group output on GNU (where --color is used for color).\n\nThen you would have to invent all sorts of formatting hacks (like attaching pseudo-types to output to select different formatting rules), since unix native apps each do their own formatting **and** sorting -- most of the parameters to a simple command like `ls` are actually concerned with the formatting or sorting of the output.\n\nAnd after all of that, it just wouldn't be cut-and-paste compatible because of the lack of support for smashing flags together, and colons in parameters, but most importantly, because native apps _stream **text**,_ and these would stream objects, so anything you _used to do_ that involved more than one command in a pipeline would probably fail with these new commands.\n\n### Please just learn to use PowerShell syntax\n\nThere is a **ton of functionality** that would be awesome to add to PowerShell -- this isn't it. Spending valuable development time trying to cobble together something to make it feel more like bash is a sad waste of effort.\n",
      "created_at": "2016-09-06T00:19:29Z",
      "updated_at": "2016-09-06T00:21:10Z"
    },
    {
      "author": "be5invis",
      "author_association": "NONE",
      "body": "@Jaykul @GeeLaw Or maybe a \u201cparser\u201d on the PS-Native barrier?\nHmm it will be related to #1908 now.\n\nAn example scenario:\n\n``` powershell\nls | % {echo %_.Length } # Returns file size\n#  \u2191 do something here\n#    like: parse the `ls`'s output and return a typed wrapper\nls | ls-to-ps-parser | % {echo %_.Length } # Returns file size\n#  \u2191 more verbose?\nls | as-text | % {echo %_.Length } # Returns length of each line\n```\n",
      "created_at": "2016-09-06T00:30:02Z",
      "updated_at": "2016-09-06T00:30:29Z"
    },
    {
      "author": "GeeLaw",
      "author_association": "NONE",
      "body": "@be5invis @Jaykul didn't even think about param style problem... If that problem is overcome, it is not very hard to invent a shim cmdlet, called `ls`, to mimic `ls`. I.e., make `ls` dedicated for UNIX style usage, not an alias for `Get-Child-Item\u2018. This breaks Windows PowerShell but is good as a long run.\n\nBut the param style is not easy to deal with -- it increases hardness for new users.\n\nTo solve the problem inside current implementation of PS, we could create a cmdlet `Use-Unix` that accepts appropriate parameters, then calls the native utility, and finally parses the output according the the utility used.\n\n---\n\nEdited 12:26 PM 6 September 2016 (UTC+8):\n\nAnd it sounds impossible to just `ls | % { echo $_.Length }`, since it's impossible for PowerShell to figure out the first command is `ls`, unless that `ls` refers to a PowerShell cmdlet instead of a native utility. There must be something that tells PowerShell to parse the output as if it is an output from `ls` native utility.\n\nThe philosophy of Unix commands is different from PS cmdlets and there are several parameters involving formatting the output in a typical Unix command. For example, `-lFh` for `ls`. In PS, formatting is done by applying `Format-...` cmdlets and other operations to objects before sending them to `Out-...` cmdlets. It sounds like `Invoke-Cmdlet | Out-String | Parse-CmdletOutputStringIntoOutputObjects`.\n\nAt least, formatting parameters should be ignored when having a PS wrapper.\n",
      "created_at": "2016-09-06T01:10:41Z",
      "updated_at": "2016-09-06T04:35:49Z"
    },
    {
      "author": "be5invis",
      "author_association": "NONE",
      "body": "@GeeLaw What if you alias `ls` to a function (or even an external application if RFC0005 is accepted) which strips formatting parameters, and do the format on itself when necessary?\n",
      "created_at": "2016-09-12T20:24:55Z",
      "updated_at": "2016-09-12T20:24:55Z"
    },
    {
      "author": "GeeLaw",
      "author_association": "NONE",
      "body": "@be5invis Yup, that's stated as \"formatting parameters should be ignored when having a PS wrapper\". But still, internal commands cannot easily workaround the param style problem.\n",
      "created_at": "2016-09-13T03:01:24Z",
      "updated_at": "2016-09-13T03:01:24Z"
    },
    {
      "author": "MathiasMagnus",
      "author_association": "NONE",
      "body": "@GeeLaw I'm with @Jaykul on this one. I too think that the effort is not worth it. The muscle memory is easier to rewire, than to keep it but also keep in mind the subtle differences, such as stream of text vs. stream of objects. Any time you used to pipe the result of `ls -al` (which in itself is very hard to make work) to another command, you have to take a different route.\r\n\r\n```\r\nps -aux | grep username\r\n```\r\n\r\nworks on Linux systems but what happens one you ported both `ps` and `grep`? The latter will expect input as a stream of bytes, but ps already provides objects. In short: hell breaks loose.\r\n\r\nIMHO it's infinitely more useful to simply embrace PS for what it is, rewire muscle memory to non-*nix-overlapping aliases like `gci` et al. I went down this road, after 2-3 months of use I got to a point where I was dropped into a bash shell I have felt at home for the past 10 years I saw this:\r\n\r\n```\r\nmnagy@MATTY-GL702ZC:~$ gci\r\nNo command 'gci' found, did you mean:\r\n Command 'gcx' from package 'gcx' (universe)\r\n Command 'sci' from package 'scheme2c' (universe)\r\n Command 'gsi' from package 'gambc' (universe)\r\n Command 'gcp' from package 'gcp' (universe)\r\n Command 'gcin' from package 'gcin' (universe)\r\n Command 'gcc' from package 'gcc' (main)\r\n Command 'gcv' from package 'scotch' (universe)\r\n Command 'gcl' from package 'gcl' (universe)\r\n Command 'ghci' from package 'ghc' (universe)\r\n Command 'gc' from package 'graphviz' (main)\r\n Command 'gco' from package 'gco' (universe)\r\n Command 'gcj' from package 'gcj-jdk' (universe)\r\n Command 'ci' from package 'rcs' (universe)\r\n Command 'gcb' from package 'gcb' (universe)\r\n Command 'gri' from package 'gri' (universe)\r\ngci: command not found\r\n```\r\n\r\nI could also quote a dance teacher of mine:\r\n\r\n>    Either do, or don't do, but sort-of doing looks the worst.\r\n\r\n",
      "created_at": "2018-01-04T09:58:31Z",
      "updated_at": "2018-01-04T09:58:31Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "Aliases are supposed to the token substitutions. We did not intend them to be macros.",
      "created_at": "2021-02-25T21:35:17Z",
      "updated_at": "2021-02-25T21:35:17Z"
    }
  ],
  "created_at": "2016-09-03T23:18:10Z",
  "number": 2179,
  "state": "closed",
  "title": "Re-Implement UNIX aliases as a typed, parameter-to-parameter compatible version of the original UNIX native app",
  "updated_at": "2021-02-25T21:35:17Z"
}