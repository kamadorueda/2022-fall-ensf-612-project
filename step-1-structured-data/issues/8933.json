{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8933",
  "author": "Amaroq-Clearwater",
  "body": "# Summary of the new feature/enhancement\r\nImplement heuristics which would double-check batch files, PowerShell scripts, and inputted commands to determine whether they would be fatal to the running system or are otherwise malicious, and prevent execution of those commands. Examples include batch files which try to remove the root directory, hex-obfuscated commands which try to delete system files, attempts to cut off network access to a remote machine by a remote user, etc.\r\n\r\nBecause this would rely on heuristics, there is always the chances that a malicious command would slip through the cracks, or that a benign script could be detected as a false-positive.",
  "closed_at": "2019-02-21T12:56:31Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I don't think this is really PowerShell's domain. It's an administration tool, not an antivirus. :confused:",
      "created_at": "2019-02-21T00:10:16Z",
      "updated_at": "2019-02-21T00:10:16Z"
    },
    {
      "author": "Amaroq-Clearwater",
      "author_association": "NONE",
      "body": "But an administrative tool, if used incorrectly, can cause a lot of damage. A new user might not be aware of things they should not do, or things that they should look out for and avoid when trying to use scripts which they find online.\r\n\r\nThere could also be batch files or PowerShell scripts which are created by or packaged with certain programs that execute unwanted commands. This isn't turning PowerShell into an Anti-Malware tool, this is giving PowerShell an inoculation against a potential threat. A correction for both known and unknown security/system stability vulnerabilities, as it were.",
      "created_at": "2019-02-21T00:16:08Z",
      "updated_at": "2019-02-21T00:16:08Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "All of which are already handled, arguably better than PowerShell itself can reasonably manage, by many common antivirus or antimalware products readily available.\r\n\r\nThe only thing they're not going to do is save your from your own inexperience, but that's a catch-22. If you are prevented from working with things you don't already fully understand how to use, you'll never be able to use them.\r\n\r\nAnd that's not even getting into the question of how the application is supposed to know what to protect the user from in the first place. That's a question for philosophers, not administrators.",
      "created_at": "2019-02-21T00:47:26Z",
      "updated_at": "2019-02-21T00:47:26Z"
    },
    {
      "author": "Amaroq-Clearwater",
      "author_association": "NONE",
      "body": "If Microsoft ends up making a \"Windows System Philosophy Toolkit\", I'm going to laugh~",
      "created_at": "2019-02-21T01:03:16Z",
      "updated_at": "2019-02-21T01:03:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Powershell already uses AMSI for security checks. If a soft behind AMSI has a heurisitics PowerShell benefits from it.",
      "created_at": "2019-02-21T12:56:31Z",
      "updated_at": "2019-02-21T12:56:31Z"
    }
  ],
  "created_at": "2019-02-21T00:05:09Z",
  "number": 8933,
  "state": "closed",
  "title": " Feature Request: Self-Preservation Heurisitics",
  "updated_at": "2019-02-21T12:56:41Z"
}