{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2887",
  "author": "JamesWTruher",
  "body": "We would really like to have our tests be reported as skipped if they are not applicable to a given platform.\r\n\r\nCode which looks like this:\r\n```powershell\r\nif ($IsWindows) {\r\n$script:catalogPath = \"\" \r\nDescribe \"Test suite for NewFileCatalogAndTestFileCatalogCmdlets\" -Tags \"CI\" {\r\n    #compare two hashtables \r\n    function CompareHashTables\r\n    {\r\n        param\r\n        (\r\n          $hashTable1,\r\n          $hashTable2\r\n        )\r\n        foreach ($key in $hashTable1.keys)\r\n        {\r\n        . . .\r\n ```\r\nthis means that these tests will only be reported on when run on a windows system. We won't be able to compare test counts across systems.\r\n\r\nSteps to reproduce\r\n------------------\r\ninspect `test/powershell/Modules\\Microsoft.PowerShell.Security\\FileCatalog.Tests.ps1`\r\n\r\nExpected behavior\r\n-----------------\r\nEach test should be reported as skipped during a test run if it is not applicable to the system.\r\n\r\nActual behavior\r\n---------------\r\nTests are not reported at all\r\n\r\n\r\n",
  "closed_at": "2017-01-04T18:09:08Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Desire is to have the same number of tests run on any platform (although skipped tests are expected to be different) as this makes it easy to see that all tests were run.  We should fix this sooner so other people don't copy this as an acceptable pattern.",
      "created_at": "2016-12-15T01:07:03Z",
      "updated_at": "2016-12-15T01:07:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "```powershell\r\n> $a=dir *.ps1 -Recurse | select-string -Pattern 'if.*\\(.*\\$IsWindows.*' -List\r\n> $a\r\n\r\npowershell\\engine\\ETS\\CimAdapter.Tests.ps1:13:    if ( ! $IsWindows ) {\r\npowershell\\engine\\Help\\HelpSystem.Tests.ps1:112:        if ($IsWindows)\r\npowershell\\engine\\Module\\ModulePath.Tests.ps1:5:        if ($IsWindows)\r\npowershell\\engine\\Remoting\\SessionOption.Tests.ps1:2:    if ( ! $IsWindows ) {\r\npowershell\\Host\\Base-Directory.Tests.ps1:12:            if ($IsWindows) {\r\npowershell\\Host\\HostUtilities.Tests.ps1:59:        if ($IsWindows) {\r\npowershell\\Host\\Read-Host.Tests.ps1:6:            if ($IsWindows) {\r\npowershell\\Language\\Parser\\RedirectionOperator.Tests.ps1:5:        if ( $IsWindows ) {\r\npowershell\\Language\\Scripting\\NativeExecution\\NativeLinuxCommands.Tests.ps1:19:    It \"Should not redirect standard\r\ninput if native command is the first command in pipeline (1)\" -Skip:$IsWindows {\r\npowershell\\Modules\\CimCmdlets\\CimInstance.Tests.ps1:2:    if ( ! $IsWindows ) {\r\npowershell\\Modules\\CimCmdlets\\CimSession.Tests.ps1:2:    if ( ! $IsWindows ) {\r\npowershell\\Modules\\CimCmdlets\\Get-CimClass.Tests.ps1:3:    if ( ! $IsWindows ) {\r\npowershell\\Modules\\Microsoft.PowerShell.Diagnostics\\Get-WinEvent.Tests.ps1:3:        if ( ! $IsWindows )\r\npowershell\\Modules\\Microsoft.Powershell.Host\\Start-Transcript.Tests.ps1:59:        if ($isWindows) {\r\npowershell\\Modules\\Microsoft.PowerShell.Management\\Clear-EventLog.Tests.ps1:1:if ($IsWindows -and !$IsCoreCLR) {\r\npowershell\\Modules\\Microsoft.PowerShell.Management\\FileSystem.Tests.ps1:171:            if ($IsWindows) {\r\npowershell\\Modules\\Microsoft.PowerShell.Management\\Get-ChildItem.Tests.ps1:57:        It \"Should give .sys file if the\r\nfullpath is specified with hidden and force parameter\" -Skip:(!$IsWindows){\r\npowershell\\Modules\\Microsoft.PowerShell.Management\\Get-ComputerInfo.Tests.ps1:1127:    if ($IsWindows)\r\npowershell\\Modules\\Microsoft.PowerShell.Management\\Get-Content.Tests.ps1:110:    if ($IsWindows) {$expected =\r\n\"World3`r`nHello4,\",\"World4`r`n\"\r\npowershell\\Modules\\Microsoft.PowerShell.Management\\Get-EventLog.Tests.ps1:1:if ($IsWindows -and !$IsCoreCLR) {\r\npowershell\\Modules\\Microsoft.PowerShell.Management\\Get-PSDrive.Tests.ps1:29:        if ($IsWindows)\r\npowershell\\Modules\\Microsoft.PowerShell.Management\\Get-Service.Tests.ps1:6:    if ( -not $IsWindows ) {\r\npowershell\\Modules\\Microsoft.PowerShell.Management\\New-EventLog.Tests.ps1:1:if ($IsWindows -and !$IsCoreCLR) {\r\npowershell\\Modules\\Microsoft.PowerShell.Management\\Registry.Tests.ps1:7:        if ($IsWindows -eq $false) {\r\npowershell\\Modules\\Microsoft.PowerShell.Management\\Remove-EventLog.Tests.ps1:1:if ($IsWindows -and !$IsCoreCLR) {\r\npowershell\\Modules\\Microsoft.PowerShell.Management\\Set-Location.Tests.ps1:4:    if ($IsWindows)\r\npowershell\\Modules\\Microsoft.PowerShell.Management\\Start-Process.Tests.ps1:6:    if ($IsWindows) {\r\npowershell\\Modules\\Microsoft.PowerShell.Management\\TimeZone.Tests.ps1:17:if ($IsWindows) {\r\npowershell\\Modules\\Microsoft.PowerShell.Security\\ExecutionPolicy.Tests.ps1:36:# tests only run if ($IsWindows -eq\r\n$true)\r\npowershell\\Modules\\Microsoft.PowerShell.Security\\FileCatalog.Tests.ps1:6:if ($IsWindows) {\r\npowershell\\Modules\\Microsoft.PowerShell.Security\\SecureString.Tests.ps1:8:        if ( ! $IsWindows ) {\r\n$PSdefaultParameterValues[\"it:pending\"] = $true }\r\npowershell\\Modules\\Microsoft.PowerShell.Utility\\Environment-Variables.Tests.ps1:12:     if ($IsWindows)\r\npowershell\\Modules\\Microsoft.PowerShell.Utility\\Export-Alias.Tests.ps1:95:              if ( $IsWindows )\r\npowershell\\Modules\\Microsoft.PowerShell.Utility\\Invoke-Item.Tests.ps1:50:        if ($IsWindows) {\r\npowershell\\Modules\\Microsoft.PowerShell.Utility\\Write-Stream.Tests.ps1:92:           if ($IsWindows)\r\n```\r\nFound 35 files. Really need fix much less. I could do this.\r\n\r\nAnd related question about [skipping test guidance](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/WritingPesterTests.md#skipping-tests-in-bulk): why do we use `global` scope to restore defaults? `$global:PSDefaultParameterValues = $originalDefaultParameterValues`\r\nSome tests [here](https://github.com/PowerShell/PowerShell/blob/master/test/powershell/Language/Parser/RedirectionOperator.Tests.ps1#L21) and [here](https://github.com/PowerShell/PowerShell/blob/master/test/powershell/engine/ETS/CimAdapter.Tests.ps1#L34) use local scope.",
      "created_at": "2016-12-15T15:51:43Z",
      "updated_at": "2016-12-15T15:59:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I scanned the file list. Really need fix 9:\r\n```\r\npowershell\\engine\\Help\\HelpSystem.Tests.ps1:112:        if ($IsWindows)\r\npowershell\\Modules\\Microsoft.PowerShell.Management\\Clear-EventLog.Tests.ps1:1:if ($IsWindows -and !$IsCoreCLR) {\r\npowershell\\Modules\\Microsoft.PowerShell.Management\\Get-ComputerInfo.Tests.ps1:1127:    if ($IsWindows)\r\npowershell\\Modules\\Microsoft.PowerShell.Management\\Get-EventLog.Tests.ps1:1:if ($IsWindows -and !$IsCoreCLR) {\r\npowershell\\Modules\\Microsoft.PowerShell.Management\\New-EventLog.Tests.ps1:1:if ($IsWindows -and !$IsCoreCLR) {\r\npowershell\\Modules\\Microsoft.PowerShell.Management\\Registry.Tests.ps1:7:        if ($IsWindows -eq $false) {\r\npowershell\\Modules\\Microsoft.PowerShell.Management\\Remove-EventLog.Tests.ps1:1:if ($IsWindows -and !$IsCoreCLR) {\r\npowershell\\Modules\\Microsoft.PowerShell.Management\\TimeZone.Tests.ps1:17:if ($IsWindows) {\r\npowershell\\Modules\\Microsoft.PowerShell.Security\\FileCatalog.Tests.ps1:6:if ($IsWindows) {\r\n\r\n```",
      "created_at": "2016-12-15T17:00:07Z",
      "updated_at": "2016-12-15T17:00:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Do we need to fix this?\r\npowershell\\Modules\\Microsoft.PowerShell.Utility\\Implicit.Remoting.Tests.ps1:39:            return\r\npowershell\\engine\\Help\\HelpSystem.Tests.ps1:112:        if ($IsWindows)",
      "created_at": "2016-12-15T17:17:43Z",
      "updated_at": "2016-12-15T17:31:41Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "The reason I chose the global scope was to be _sure_ that it got reset it back to it's original state. Pester creates quite a number of scopes, and I wanted to be sure that I reset the value as high in the scope chain as I could.\r\n\r\nWRT: Implicit.Remoting.Tests.ps1 - this looks fine, the tests should report regardless of platform. the return after setting $skiptest is proper as the BeforeAll shouldn't continue to execute.\r\nWRT: HelpSystem.Tests.ps1 - the architecture of these tests is going to make this a bit tricky. Pester doesn't have a way to skip a test based on the _contents_ of a testcase (although that would be a cool thing). This may need to be deconstructed into a foreach loop",
      "created_at": "2016-12-16T00:14:11Z",
      "updated_at": "2016-12-16T00:37:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@JamesWTruher Thanks for clarification!\r\n> I reset the value as high in the scope chain as I could.\r\n\r\nIt seems Pester's scopes are bit tricky. However, wouldn't it be more correct to restore the value in the same scope where the change was made? The same we do for `$ProgressPreference = $SavedProgressPreference`\r\n\r\n> WRT: HelpSystem.Tests.ps1 - the architecture of these tests is going to make this a bit tricky\r\n\r\nI don't understand why tests split on \"Windows\" and \"non-Windows\" in `testcases` and skipped ALL for \"non-Windows\"?\r\n```powershell\r\n    It -Skip:(-not $IsWindows) \"shows contextual help when Get-Help is invoked for provider-specific path (Get-Help -Name <verb>-<noun> -Path <path>)\" -TestCases $testCases {\r\n```\r\nShould the tests (from first `testcase`) be performed on non-Windows? Or should I make them `pending` or `skipped`?",
      "created_at": "2016-12-16T16:30:20Z",
      "updated_at": "2016-12-16T17:01:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Today we have 4609 Travis test and 4681 Appveyor test. So we \"lost\" 72 tests. Need a way to catch them.",
      "created_at": "2017-01-05T13:53:38Z",
      "updated_at": "2017-01-05T13:53:38Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "yep. FWIW, even if the numbers are the same, it may be that different tests are running. We need more tooling to compare the test runs across platforms",
      "created_at": "2017-01-05T21:56:45Z",
      "updated_at": "2017-01-05T21:56:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Yes. It is more common so I open new Issue.",
      "created_at": "2017-01-06T07:11:48Z",
      "updated_at": "2017-01-06T07:11:48Z"
    }
  ],
  "created_at": "2016-12-15T00:25:59Z",
  "number": 2887,
  "state": "closed",
  "title": "Tests should be marked and reported as skipped if not applicable to the platform",
  "updated_at": "2017-01-06T07:11:48Z"
}