{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5342",
  "author": "mklement0",
  "body": "Defining a `Trap` statement via a dot-sourced script does not work, which is surprising, given that dot-sourcing<sup>[1]</sup> is generally equivalent to including the referenced script's content directly in a script.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nSetup:\r\n\r\nContent of `t1.ps1`:\r\n\r\n```powershell\r\n. ./t2.ps1\r\n1 / 0\r\n'after'\r\n```\r\n\r\nContent of `t2.ps1`:\r\n\r\n```powershell\r\nTrap { 'Shame.'; exit 1 }\r\n```\r\n\r\nCommand that reproduces the symptom:\r\n\r\n```powershell\r\n> ./t1.ps1`\r\n```\r\n\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nShame.\r\n```\r\n\r\nThe `Trap` handler should take effect, output the specified string, and exit with exit code `1`.\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nAttempted to divide by zero.\r\nAt /Users/jdoe/t1.ps1:5 char:1\r\n+ 1 / 0\r\n+ ~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [], RuntimeException\r\n    + FullyQualifiedErrorId : RuntimeException\r\n \r\nafter\r\n```\r\n\r\nThe `Trap` handler was ignored altogether, due to being dot-sourced rather than being included directly in the script.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta.9 on macOS 10.13\r\nPowerShell Core v6.0.0-beta.9 on Ubuntu 16.04.3 LTS\r\nPowerShell Core v6.0.0-beta.9 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\nWindows PowerShell v5.1.15063.674 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\n```\r\n\r\n---\r\n\r\n<sup>[1] Nomenclature quibble: Why is `.` called the _dot_-sourcing operator, and not just _sourcing_ operator? Contrast this with `&`, the _call operator_, which is mercifully not called the \"ampersand call operator\". Including the somewhat arbitrary _syntactic form_ in the name seems unnecessary.</sup> \r\n",
  "closed_at": "2018-04-02T21:02:55Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "With t1.ps1\r\n```\r\n. ./t2.ps1\r\n1 / 0\r\nTrap { '!!!!! Shame.'; exit 1 }\r\n'after'\r\n\r\n```\r\nI get strange result too.",
      "created_at": "2017-11-05T12:47:21Z",
      "updated_at": "2017-11-05T12:47:21Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov:  \r\n\r\nStrange in what way? \r\n\r\nWhen I try your snippet, the in-script `Trap` takes effect (it's fine to place it after the offending statement), and the sourced one is still ignored.\r\n\r\nSo it seems to me that both snippets demonstrate the same problem.\r\n",
      "created_at": "2017-11-05T12:54:37Z",
      "updated_at": "2017-11-05T12:54:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I don't see an error for previous command `1/0`.",
      "created_at": "2017-11-05T13:23:03Z",
      "updated_at": "2017-11-05T13:23:03Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 @iSazonov  `trap` is a lexical construct, scoped to the compile unit (i.e. the script). This is why dot-sourcing a file with a `trap` statement doesn't introduce a trap into the caller's environment. When the dot-sourced script exits, its traps are removed. This is also why defining a `trap` by itself on the command line\r\n```\r\nPS[1] (39) > trap { Write-Host Hello }\r\nPS[1] (40) >\r\n```\r\nappears to do nothing. The command executes and then the trap is removed.\r\n\r\nNOTE: In V1, we did consider allowing traps defined in dot-sourced scripts or on the command line to persist in the caller's environment however this would have required additional commands to enumerate and manage traps.  Due to a lack of time/resources, this was not implemented for V1 and it would be a significant breaking change to do so now.",
      "created_at": "2018-03-28T23:54:25Z",
      "updated_at": "2018-03-28T23:54:25Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "No additional updates so I'm closing this.",
      "created_at": "2018-04-02T21:02:55Z",
      "updated_at": "2018-04-02T21:02:55Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT: Can you please add the `Documentation Needed` label so that @BrucePay's explanation can be rescued from obscurity?",
      "created_at": "2018-04-02T21:10:06Z",
      "updated_at": "2018-04-02T21:10:06Z"
    }
  ],
  "created_at": "2017-11-05T04:04:53Z",
  "labels": [
    "Resolution-By Design",
    "Issue-Discussion"
  ],
  "number": 5342,
  "state": "closed",
  "title": "Trap statement doesn't take effect when dot-sourced",
  "updated_at": "2018-10-15T21:50:54Z"
}