{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3684",
  "author": "mklement0",
  "body": "PSv5 brought the `-NoNewline` switch to the `Set-Content` (`Add-Content`) and `Out-File` cmdlets to allow direct concatenation of the input objects without newlines (strings among the input objects retain their _embedded_ newlines however).\r\n\r\n_By default_, these cmdlets _blindly append an additional newline_, whereas `Out-String` currently _invariably_ does that, because it lacks `-NoNewline`.\r\n\r\nFor symmetry, `Out-String` should support `-NoNewline` too.\r\n\r\nCurrent behavior\r\n------------------\r\n\r\n```powershell\r\n> (Out-String -InputObject 'a') -match '^a\\r?\\n$'\r\n$True  # A trailing newline was added.\r\n```\r\n\r\nDesired behavior\r\n-----------------\r\n\r\n```powershell\r\n> (Out-String -NoNewline -InputObject 'a') -match '^a$'\r\n$True  # No trailing newline was added.\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-alpha (v6.0.0-alpha.18) on Darwin Kernel Version 16.5.0: Fri Mar  3 16:52:33 PST 2017; root:xnu-3789.51.2~3/RELEASE_X86_64\r\n```\r\n",
  "closed_at": "2017-10-11T13:44:58Z",
  "comments": [
    {
      "author": "raghav710",
      "author_association": "CONTRIBUTOR",
      "body": "@mklement0 how complex is this for a beginner? If its fairly straightforward I'd like to give it a try!",
      "created_at": "2017-10-05T11:16:15Z",
      "updated_at": "2017-10-05T11:16:15Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@raghav710: \r\n\r\nShouldn't be too hard:\r\n\r\n* Add the new parameter [here](https://github.com/PowerShell/PowerShell/blob/master/src/Microsoft.PowerShell.Commands.Utility/commands/utility/FormatAndOutput/out-string/out-string.cs#L20).\r\n* Act on it accordingly [here](https://github.com/PowerShell/PowerShell/blob/master/src/Microsoft.PowerShell.Commands.Utility/commands/utility/FormatAndOutput/out-string/out-string.cs#L122).\r\n* Add tests [here](https://github.com/PowerShell/PowerShell/blob/master/test/powershell/Modules/Microsoft.PowerShell.Utility/Out-String.Tests.ps1).\r\n\r\nI'm not sure how the documentation part is usually handled; perhaps create an issue in the [docs repo](https://github.com/PowerShell/PowerShell-Docs/issues); @iSazonov, can you advise?\r\n\r\nThanks for taking it on.",
      "created_at": "2017-10-05T12:54:56Z",
      "updated_at": "2017-10-05T12:54:56Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "For the docs, the best thing is to create a corresponding doc PR in the [docs repo](https://github.com/PowerShell/PowerShell-Docs) and link it to the PR in this repo.",
      "created_at": "2017-10-05T15:09:33Z",
      "updated_at": "2017-10-05T15:09:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@raghav710  Typically, beginners receive most style comments. Please read out [Coding Guidelines](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/coding-guidelines.md). Mainly you should  follow the style of the surrounding code.",
      "created_at": "2017-10-06T03:55:01Z",
      "updated_at": "2017-10-06T03:55:01Z"
    },
    {
      "author": "raghav710",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov @SteveL-MSFT @mklement0  thanks for all the guidance :) That was quite kind of you all :)\r\nShould the issue be assigned before i start working?",
      "created_at": "2017-10-06T05:35:49Z",
      "updated_at": "2017-10-06T05:35:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We cannot formally assign you today because your GitHub status is still not `Contributor`.",
      "created_at": "2017-10-06T06:40:18Z",
      "updated_at": "2017-10-06T06:40:18Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@raghav710 consider it implicitly assigned to you :)\r\n\r\nI'll assign it to myself so no one else ends up duplicating your work.  Thanks!",
      "created_at": "2017-10-06T17:53:24Z",
      "updated_at": "2017-10-06T17:53:24Z"
    },
    {
      "author": "raghav710",
      "author_association": "CONTRIBUTOR",
      "body": "@mklement0 I notice that when the -Stream switch is used, no newline is appended. Should I make the behaviour consistent and add in a newline when -NoNewLine is not set?",
      "created_at": "2017-10-07T16:24:37Z",
      "updated_at": "2017-10-07T16:24:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "`-Stream` turn out internal formatting in Out-String. I think `-Stream` and `-NoNewLine` should be in different parameter sets. ",
      "created_at": "2017-10-07T17:12:40Z",
      "updated_at": "2017-10-07T17:12:40Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Yes, `-Stream` and `-NoNewline` should be mutually exclusive and should therefore be in different parameter sets.\r\n\r\nAll `Out-String` output goes through the formatting system to generate multi-line string output; by default, the result is output as a _single_, multi-line string; `-Stream`, by contrast, outputs the lines as a string _array_, and the individual array elements - the lines - should _never_ have a trailing newline.\r\n\r\nIn other words: No change should be made to the existing `-Stream` behavior.",
      "created_at": "2017-10-07T18:37:25Z",
      "updated_at": "2017-10-07T18:38:06Z"
    },
    {
      "author": "raghav710",
      "author_association": "CONTRIBUTOR",
      "body": "I've added the code and a couple of tests. I tried the Current behaviour and desired behaviour commands and both work as expected. The behaviour of -Stream is not impacted. \r\nThanks!",
      "created_at": "2017-10-08T06:47:56Z",
      "updated_at": "2017-10-08T06:47:56Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT:  The more I think about this, perhaps it's also time to rethink the behavior of `Out-File -NoNewline` with respect to types that have PS formatting data:\r\n\r\nCurrently, whatever lines the (default) formatter produces (for types with formatting data) are newline-stripped too, resulting in virtually useless representations:\r\n\r\n```powershell\r\nGet-Item / | Out-File -NoNewline t.txt\r\n```\r\n\r\nIt's not obvious in the console due to word wrapping, but if you inspect `t.txt` in an editor with word wrapping turned off, you'll see that a _single_ output line was produced - it's basically the equivalent of `(Get-Item / | Out-String) -replace '\\r?\\n'`:\r\n\r\n```none\r\n    Directory: Mode                LastWriteTime         Length Name                                                                                                                              ----                -------------         ------ ----                                                                                                                              d-r---          10/8/17   2:56 PM                /                                                                                                                                 \r\n```\r\n\r\nWith this PR, `Out-String -NoNewline` will work the same, but the larger question is whether this behavior should be changed for _both_ `Out-File` and `Out-String`.",
      "created_at": "2017-10-08T21:09:36Z",
      "updated_at": "2017-10-09T12:24:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We have some issues about problems with our formatting (adding LF/CR). So I think it is good to have `-NoNewline`- users are able to control output more flexibly.",
      "created_at": "2017-10-09T04:54:18Z",
      "updated_at": "2017-10-09T04:54:18Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Yes, `-NoNewline` is desirable, but the aspect of stripping out _embedded_  newlines from formatter-generated output is the problematic one.\r\n\r\nTo put it differently: This obscure behavioral distinction between `.ToString()`-stringified types (such as `[string]` itself) and those with PS formatting data is problematic and there is no good reason for the embedded newline stripping to begin with.\r\n\r\nAs a separate issue, given the name and the state of the current documentation, it may not be obvious to users that `-NoNewline` effectively means `-NoSeparatorBetweenOutputObjects`, not `-SuppressOnlyTheTrailingNewline`.  \r\nGiven that a  change would be a serious breaking change, the solution is to document `-NoNewline` properly - see https://github.com/PowerShell/PowerShell-Docs/issues/1739\r\n",
      "created_at": "2017-10-09T12:38:42Z",
      "updated_at": "2017-10-09T12:38:42Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Consider the following example, which illustrates the difference in behavior between `.ToString()`-stringified and formatter-generated output with respect to stripping of embedded newlines:\r\n\r\n```powershell\r\n> \"one`ntwo\", [pscustomobject] @{ three = 3 } | Out-file -NoNewline t.txt; Get-Content -Raw t.txt\r\none\r\ntwothree-----    3\r\n```\r\nNote how all newlines were stripped from the formatter-generated output for `@{ three = 3 }`, which included removal of empty lines, whereas the multiline input _string_ was preserved as-is; to spell it out:\r\n\r\n```\r\n\r\nthree\r\n-----\r\n    3\r\n```\r\n\r\nturned into `twothree-----    3`\r\n\r\n\r\nIn summary: we first need to decide whether `Out-File -NoNewline` requires fixing for formatter-generated output, and then implement `Out-String -NoNewline` accordingly.\r\n\r\n",
      "created_at": "2017-10-09T12:50:14Z",
      "updated_at": "2017-10-09T12:50:40Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "cc @joeyaiello @HemantMahawar \r\n\r\nI don't know the history of `out-file -nonewline`, but as an end user, it seems that `-nonewline` should always mean the last newline, not every newline.  If someone wanted to strip newlines, they can easily do it themselves, but the cmdlets (without the `-nonewline`) would typically add a trailing newline which they can't suppress without the switch.\r\n",
      "created_at": "2017-10-09T16:15:39Z",
      "updated_at": "2017-10-09T16:15:39Z"
    },
    {
      "author": "raghav710",
      "author_association": "CONTRIBUTOR",
      "body": "If I may add to the discussion. I noticed that when you do a \r\n`\"a\",\"b\" | out-string` you get an output that is of length **6** in windows. This was a bit surprising for me and then I noticed that the extra 4 characters were because of two _\\r\\n_s. I believe this value may be different in Linux.\r\nSome points to ponder:\r\n* Should `-NoNewLine` be the solution to this issue or should we only strip the last newline and let the user handle the problem?\r\n* If the user is capable of stripping embedded new lines, why should s/he use `-NoNewLine` ?",
      "created_at": "2017-10-09T17:19:30Z",
      "updated_at": "2017-10-09T17:19:30Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@raghav710: Yes, PowerShell Core uses platform-appropriate newlines (CRLF on Windows, LF-only on Unix), so getting 6 chars. on Windows vs. 4 on Unix is to be expected.\r\n\r\nThis behavior is unrelated to `-NoNewline` (_newline_ is used as an abstract term for line break, irrespective of what specific character [sequence] is used to represent it).\r\n\r\nAs @SteveL-MSFT mentions, the natural assumption about what `-NoNewline` does is to suppress a _trailing_ newline only, but - unfortunately - that is never how it has worked: all implementations of `-NoNewline` - in `Write-Host` (v2+), `Set-Content`/`Add-Content` (v5+), `Out-File` (v5+) _directly concatenate_ the (representations of) _all_ input objects without newlines:\r\n\r\n```powershell\r\n> 1, 2 | Write-Host -NoNewline; Write-Host more\r\n12more\r\n```\r\n(You won't notice with `Write-Host 1, 2` or the equivalent `Write-Host 1 2`, because the array is processed as a whole and stringified to `1 2`.)\r\n\r\nThe usefulness of this behavior is questionable, but changing it would certainly be a breaking change.\r\n\r\nCurrently, `-NoNewline` only work as one would expect with a _single_ input object.\r\n\r\nThe only conceivable benefit of the current  `-NoNewline` behavior with _multiple_ input objects is a way to suppress all newlines _at the source_, as opposed to having to remove them after the fact.\r\n\r\nAs such, it is as special case of a generic `-Delimiter` parameter, that was suggested in #3855: \r\n `-Delimiter ''`.\r\n\r\n`-Delimiter` would work as a _terminator_ - i.e., placed after _every_ object, including the last; arguably, it would also be helpful to place the string only _between_ elements, not also after the last, i.e, act as a _separator_ (with an empty delimiter that distinction doesn't matter).\r\n\r\nIf `-NoNewline` gets fixed to work the way users probably expect - suppress the _last_ newline only - `-NoTerminator` could be introduced as an _alias_ of `-NoNewline` to generically suppress a trailing delimiter - be it a newline by default or one specified via `-Delimiter`, which effectively applies the delimiter string as a _separator_.",
      "created_at": "2017-10-11T22:19:20Z",
      "updated_at": "2017-10-11T22:19:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 if  `-NoNewline` works as No Newline Between Objects we would add new parameter -NoLastNewLine which will suppress only last new line.\r\nThe parameter name `-NoNewline` does not explicitly imply that new lines is suppressed all or only the last. So user expectiotions is based on docs and/or actual behavior. Considering it's a long-standing parameter I beleive that `-NoLastNewLine` is right way if we really want fix something here.",
      "created_at": "2017-10-12T03:45:34Z",
      "updated_at": "2017-10-12T03:45:34Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "User expectations _may_ be based on examining actual behavior (personally, I only very recently discovered the true behavior), and it's certainly _not_ based on the docs, [as I've tried to point out](https://github.com/PowerShell/PowerShell-Docs/issues/1739).\r\n\r\nThat said, introducing `-NoLastNewline`  (and possibly alias `-NoLastDelimiter`) sounds like a good compromise for the sake of backward compatibility.",
      "created_at": "2017-10-12T12:47:14Z",
      "updated_at": "2017-10-12T12:47:14Z"
    },
    {
      "author": "raghav710",
      "author_association": "CONTRIBUTOR",
      "body": "Should the docs be updated with the details of the current implementation of `-NoNewLine` ?",
      "created_at": "2017-10-12T17:48:34Z",
      "updated_at": "2017-10-12T17:48:34Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@raghav710 yes!  is this something you can contribute?  I think the `-NoLast*` discussion should continue in a separate issue",
      "created_at": "2017-10-12T20:00:29Z",
      "updated_at": "2017-10-12T20:01:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 Could you please open new Issue for ` -NoLast*`?",
      "created_at": "2017-10-13T04:28:26Z",
      "updated_at": "2017-10-13T04:28:26Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: Please see #5108 and #5107.",
      "created_at": "2017-10-13T13:17:16Z",
      "updated_at": "2017-10-13T13:17:16Z"
    },
    {
      "author": "raghav710",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT I'd be happy to :) I should first create an issue and then work on it right?",
      "created_at": "2017-10-13T13:34:57Z",
      "updated_at": "2017-10-13T13:34:57Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@raghav710 for the doc update, you don't need to create an issue, you can just submit PR to https://github.com/PowerShell/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Utility/Out-String.md",
      "created_at": "2017-10-13T18:25:09Z",
      "updated_at": "2017-10-13T18:25:09Z"
    },
    {
      "author": "raghav710",
      "author_association": "CONTRIBUTOR",
      "body": "@mklement0 @SteveL-MSFT @iSazonov I've added the docs and raised a PR [here](https://github.com/PowerShell/PowerShell-Docs/pull/1764). Please let me know if I need to add more clarity anywhere",
      "created_at": "2017-10-15T07:51:54Z",
      "updated_at": "2017-10-15T07:51:54Z"
    }
  ],
  "created_at": "2017-05-02T17:54:24Z",
  "labels": [
    "Issue-Enhancement",
    "Resolution-Fixed",
    "Hacktoberfest",
    "WG-Cmdlets-Utility"
  ],
  "number": 3684,
  "state": "closed",
  "title": "Out-String cmdlet should support -NoNewline too",
  "updated_at": "2017-10-19T03:04:20Z"
}