{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4106",
  "author": "iSazonov",
  "body": "Reopen #3917 \r\nRelated #3400\r\n\r\nMotivation\r\n---\r\nWe inherited old assembly file versions from Windows PowerShell.\r\nCurrently we shouldn't set versions of assemblies statically in `AssemblyInfo.cs` files, we should set versions of assemblies dynamically by MSBuild as discussed in #3690.\r\n\r\nFix\r\n---\r\n1. Remove `AssemblyVersion` and `AssemblyFileVersionAttribute` attributes from `AssemblyInfo.cs` files.\r\n2. Put all common properties in PowerShell.Common.props including version related properties.\r\n3. Import `PowerShell.Common.props` in all csproj files.\r\n\r\nFollow-Up Work\r\n---\r\nIn the PR we temporarily hard code assembly versions as \"6.0.0-beta.3\".\r\nLater we should set a dll version based on GitCommitId.\r\n\r\nAdditional considerations\r\n---\r\nIn previous PR #3917 we caught some problems and we should fix it here:\r\n - package versions now corrupted (1.0.0) ([for help](https://stackoverflow.com/questions/42183300/what-is-the-difference-between-various-msbuild-version-properties-such-as-versi)): **[Continue to use 'VersionPrefix' tag. 'Version' will be inferred from this tag and all other versions, such as AssemblyVersion, FileVesion and PackageVersion and etc, will be inferred from 'Version']**\r\n    - set PackageVersion?\r\n    - set Version?\r\n - SMA.dll backward compatibility: **[Reviewed by powershell-committee and agreed to bump AssemblyVersion to 6.0.0.0]**\r\n    - statically set `AssemblyVersion` 3.0.00  (`AssemblyFileVersionAttribute`?)\r\n    - dynamically set `AssemblyVersion` by MSBuild\r\n    - any tests?\r\n\r\nNote\r\n-----\r\nQuoted from @SteveL-MSFT:\r\n> @PowerShell/powershell-committee reviewed this and is fine with taking the assembly version to 6.0.0.0 and taking it now to discover customer impact",
  "closed_at": "2017-06-29T17:25:50Z",
  "comments": [
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "\ud83d\udc4d for following [DRY principle](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself).",
      "created_at": "2017-06-26T23:33:14Z",
      "updated_at": "2017-06-26T23:33:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw  Commit to get PS version from Git is ready. If you want I can add it to the PR. It is only add one new Target. ",
      "created_at": "2017-06-27T14:31:36Z",
      "updated_at": "2017-06-27T14:31:36Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov If the new Target is not huge then add it in and let's review it together.",
      "created_at": "2017-06-27T15:59:51Z",
      "updated_at": "2017-06-27T15:59:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The new target is very simple.\r\n\r\nAlso I tried to build a package by\r\n```powershell\r\nStart-PSBuild -Clean -CrossGen -Runtime win10-x64 -Configuration Release\r\nStart-PSPackage -Type msi\r\n```\r\nand got `PowerShell-6.0.0-beta.3-win10-win2016-x64.msi`.",
      "created_at": "2017-06-28T06:36:14Z",
      "updated_at": "2017-06-28T06:36:14Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "It's good that you verified the package generation. But it's the NuGet package that I'm worried. Without `<VersionPrefix>6.0.0</VersionPrefix>`, you will get NuGet packages with `1.0.0` in the name.",
      "created_at": "2017-06-28T17:30:56Z",
      "updated_at": "2017-06-28T17:30:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "How can I build the NuGet package?",
      "created_at": "2017-06-28T19:10:39Z",
      "updated_at": "2017-06-28T19:10:54Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov see document here: https://github.com/PowerShell/PowerShell/blob/master/docs/maintainers/releasing.md#nuget-packages",
      "created_at": "2017-06-28T19:24:36Z",
      "updated_at": "2017-06-28T19:24:36Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Get the tag commit meta info from the target is good, but it raises a problem -- in our release process, we need to be able to build and package powershell core targeting a tag label, say `v6.0.0-beta.4`, without actually creating the tag. We added a new parameter `-ReleaseTag` to `Start-PSBuild` and `Start-PSPackage` so that currently we can build and package powershell without a tag but still have the correct `$PSVersionTable.GitCommitId`. (see https://github.com/PowerShell/PowerShell/blob/master/docs/maintainers/releasing.md#release-steps for more information)\r\n\r\nHowever, with this `taget` change, the FileVersion, ProductVersion won't be correct without the tag being pushed, so it will break our release process.\r\n\r\nThe reason to create the tag until finishing preparing the release is that issues may come up when or after build/package, and in that case we need check in fixes. If tag is already pushed, then it's super hard to do the fix.\r\n\r\nGiven this, I suggest to separate the `GetPS6VersionFromGit target` out from this PR, let's get the `common.props` part in first.",
      "created_at": "2017-06-28T23:24:04Z",
      "updated_at": "2017-06-29T00:21:11Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this and is fine with taking the assembly version to 6.0.0 and taking it now to discover customer impact",
      "created_at": "2017-06-28T23:42:30Z",
      "updated_at": "2017-06-28T23:42:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT  Could we add @PowerShell/powershell-committee argumentations to the PR description if in future customers catch any problems with the change?\r\n\r\nAlso my question is - what is a best practice to ensure assembly backward compatibility? If we follow the best practice, we can recommend the same users to avoid the problem.\r\n\r\n@daxian-dbw Well, I revert last commit. We can easy pass a ReleaseTag value by ```dotnet build ... /p:\"PS6BuildVersion=$ReleaseTag\" in Build.psm1. I'll add this in next PR.",
      "created_at": "2017-06-29T03:15:45Z",
      "updated_at": "2017-06-29T03:15:45Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> I revert last commit. We can easy pass a ReleaseTag value by ```dotnet build ... /p:\"PS6BuildVersion=$ReleaseTag\" in Build.psm1. I'll add this in next PR.\r\n\r\nThanks @iSazonov! Appreciate your quick action.",
      "created_at": "2017-06-29T04:33:02Z",
      "updated_at": "2017-06-29T04:33:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Thanks for review! I am ready to continue the work in new PR.",
      "created_at": "2017-06-29T17:11:51Z",
      "updated_at": "2017-06-29T17:11:51Z"
    }
  ],
  "created_at": "2017-06-26T17:35:31Z",
  "number": 4106,
  "state": "closed",
  "title": "Refactor MSBuild project files by adding the common property file",
  "updated_at": "2017-07-20T11:30:36Z"
}