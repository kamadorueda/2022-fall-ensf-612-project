{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4473",
  "author": "mklement0",
  "body": "<sup>Related: #4472.</sup>\r\n\r\nThe `-LiteralPath` parameter, via its `-PSPath` alias,  is normally used to bind to objects piped from `Get-ChildItem` / `Get-Item`, such as with the `Get-Content` cmdlet.\r\n\r\n`Import-Csv` currently fails to establish this binding.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n'file1.csv', 'file2.csv' | % { $null > $_ }\r\nGet-ChildItem file*.csv | Import-Csv\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nBinding of the `[System.IO.FileInfo]` instances via their `.PSPath` property to `-LiteralPath`, and therefore no output (null collection), given that both files are empty.\r\n\r\nActual behavior\r\n---------------\r\n\r\nThe following statement-terminating error is reported:\r\n\r\n```none\r\nImport-Csv : You must specify either the -Path or -LiteralPath parameters, but not both.\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta.4 on macOS 10.12.5\r\nPowerShell Core v6.0.0-beta.4 on Ubuntu 16.04.2 LTS\r\nPowerShell Core v6.0.0-beta.4 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\nWindows PowerShell v5.1.15063.413 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\n```\r\n",
  "closed_at": "2019-01-09T13:49:16Z",
  "comments": [
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@Lipkau pointed me to this issue.\r\n\r\nThe problem appears to be with the way in which the parameter sets are done for this cmdlet. There are 2 parameter sets: One for Delimiter and another for Culture. Each set accepts both `-Path` and `-LiteralPath` and then performs a runtime check for the presence of both. ",
      "created_at": "2018-04-06T10:26:47Z",
      "updated_at": "2018-04-06T10:26:47Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "I think this is beating around the bush... Although I don't understand the purpose of importing Null csv files as the first line can create or can cleared the existing files.\r\n\r\nI think the second line is totally wrong to use.  I never heard of dir merging files.\r\n\r\nBut, Thanks to .NET I can do the following oneliner and ... the magic happens:\r\n\r\n```\r\nPS C:\\temp> cat test01.csv\r\nName, Age\r\nmax, 59\r\ntee, 45\r\nasa, 55\r\nPS C:\\temp> cat test02.csv\r\nName, Age\r\nalex, 25\r\nana, 32\r\nmaria, 45\r\nPS C:\\temp> (Get-ChildItem test*.csv).FullName | import-csv\r\n\r\nName  Age\r\n----  ---\r\nmax   59\r\ntee   45\r\nasa   55\r\nalex  25\r\nana   32\r\nmaria 45\r\n\r\nPS C:\\temp> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.1\r\nPSEdition                      Core\r\nGitCommitId                    v6.1.0-preview.1\r\nOS                             Microsoft Windows 10.0.17133\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\nAnd, it works in Linux!\r\n```\r\nPS /home/maxt/Temp> vim test01.csv\r\nPS /home/maxt/Temp> vim test02.csv\r\nPS /home/maxt/Temp> (Get-ChildItem test*.csv).FullName | import-csv\r\n\r\nName  Age\r\n----  ---\r\nmax   59\r\ntee   45\r\nasa   55\r\nalex  25\r\nana   32\r\nmaria 45\r\n\r\n\r\nPS /home/maxt/Temp> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.1\r\nPSEdition                      Core\r\nGitCommitId                    v6.1.0-preview.1\r\nOS                             Linux 4.4.0-17133-Microsoft #1-Microsoft Fri Mar 23 13:12:00 PST 2018\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\nI don't think is nothing wrong.\r\n:)\r\n",
      "created_at": "2018-04-06T12:52:34Z",
      "updated_at": "2018-04-06T12:52:34Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> Although I don't understand the purpose of importing Null csv files as the first line can create or can cleared the existing files.\r\n\r\nThe purpose was to create _dummy_ CSV files - _their content doesn't matter_, because `Import-Csv` never gets to _read_ them, due to the command breaking during _parameter parsing_.\r\n(A better way to create the dummy files is `New-Item file1.csv, file2.csv`).\r\n\r\n> I think the second line is totally wrong to use. I never heard of dir merging files.\r\n\r\nIt may be _unusual_ to specify _multiple_ files, but `Import-Csv` does support it, as `Import-Csv -LiteralPath file1.csv, file2.csv` will show you.\r\n\r\n> Thanks to .NET I can do the following oneliner and ... the magic happens:\r\n> `(Get-ChildItem test*.csv).FullName | import-csv`\r\n\r\nYes, you can _work around_ the bug, but that doesn't mean it's not a bug:\r\n\r\n`Import-Csv` is _designed_ to bind `Get-ChildItem` / `Get-Item` output via the pipeline, and that is currently _broken_.\r\n\r\n> I think this is beating around the bush...\r\n\r\nCan you elaborate?",
      "created_at": "2018-04-06T14:19:31Z",
      "updated_at": "2018-04-06T14:20:18Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Sorry @mklement0 \r\n\r\nFor me... seems like I'm chasing ghost, and that's because I don't know everything about the deep internal of PowerShell but know enough to get things working. It just that I'm using what's given in PowerShell, which is Awesome!\r\n\r\nApologies!  If it feel like a bug, then it's probably a bug!\r\n\r\n:)\r\n\r\n\r\n\r\n",
      "created_at": "2018-04-06T15:43:04Z",
      "updated_at": "2018-04-06T15:43:04Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@MaximoTrinidad:\r\n\r\nI appreciate the feedback.\r\n\r\n> It just that I'm using what's given in PowerShell, which is Awesome!\r\n\r\nFully agreed.\r\n\r\n> because I don't know everything about the deep internal of PowerShell\r\n\r\nBelieve me, you're not alone, but you don't need to have this knowledge in this and many other cases:\r\n\r\n(a) The issue at hand is a real-world problem that people have been working around for years (judging by code I've seen on Stack Overflow; people lived with that, presumably because the workaround is not difficult (but inconvenient)).  \r\nAll that's needed to contribute is to describe and demonstrate the problem, which I've done here, without having looked at the source code (a step that @markekraus fortunately has already taken since).\r\n\r\n(b) PowerShell's great reflection features often allow you to narrow down the problem even without looking at the source code.\r\n\r\n>  If it feel like a bug, then it's probably a bug!\r\n\r\nWell, you've heard the reasoning behind deeming this a bug. Do you still not agree?\r\n\r\n\r\n",
      "created_at": "2018-04-06T15:53:09Z",
      "updated_at": "2018-11-15T13:13:24Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@mklement0 \r\n\r\n> \"Well, you've heard the reasoning behind deeming this a bug. Do you still not agree?\"\r\n\r\nWhat threw me off was the use of the parameters '-path' vs. '-literalpath'!  I use one of them or whatever it works to get my task done.  \r\n\r\nSo, I would say No! But in the sense that I know another way to handle it.  \r\n\r\n**Maybe is By-Design!!**\r\n\r\nI'm pleased that this exercise show one new thing I didn't thought of using:\r\n```\r\n(Get-ChildItem test*.csv).FullName | import-csv\r\n``` \r\n\r\nThis is why I love PowerShell.  One-liner simplicity!\r\n:)",
      "created_at": "2018-04-06T16:20:40Z",
      "updated_at": "2018-04-06T16:20:40Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@MaximoTrinidad:\r\n\r\n> What threw me off was the use of the parameters '-path' vs. '-literalpath'! I use one of them or whatever it works to get my task done.\r\n\r\nThe cmdlets that have a pipeline-binding `-LiteralPath` parameter also bind pipeline input via the input's `.PSPath` property, and that property is present on `Get-Item` and `Get-ChildItem` output (see bottom for details).\r\n\r\nThat's why, in properly implemented cmdlets, `Get-Item` and `Get-ChildItem` output _unambiguously_ binds to `-LiteralPath`, and life is good.\r\n\r\nTo put it differently: the error message complaining about the presence of _both_ `-Path` and `-LiteralPath` is a clear indication of a bug.\r\n\r\n---\r\n\r\nYes, `(Get-ChildItem test*.csv).FullName` is the _simplest_ workaround.\r\n\r\nBut - just to be clear - it still is a _workaround_ that _shouldn't be necessary_, had the cmdlet been implemented as designed.\r\n\r\n----\r\n\r\nJust to show you that `Import-Csv` indeed _tries_ to define `-LiteralPath` as discussed above:\r\n\r\n```powershell\r\nPS>  (Get-Command Import-Csv).Parameters['LiteralPath'].Attributes\r\n\r\n\r\nPosition                        : -2147483648\r\nParameterSetName                : __AllParameterSets\r\nMandatory                       : False\r\nValueFromPipeline               : False\r\nValueFromPipelineByPropertyName : True\r\nValueFromRemainingArguments     : False\r\nHelpMessage                     : \r\nHelpMessageBaseName             : \r\nHelpMessageResourceId           : \r\nDontShow                        : False\r\nTypeId                          : System.Management.Automation.ParameterAttribute\r\n\r\nTypeId : System.Management.Automation.ValidateNotNullOrEmptyAttribute\r\n\r\nAliasNames : {PSPath}\r\nTypeId     : System.Management.Automation.AliasAttribute\r\n```\r\n\r\nNote the `ValueFromPipelineByPropertyName : True` and `AliasNames : {PSPath}` lines.\r\n\r\n",
      "created_at": "2018-04-06T16:37:54Z",
      "updated_at": "2018-04-06T16:40:20Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@mklement0 \r\n\r\nI greatly appreciate all the learning here!\r\n\r\nThanks,\r\n:)",
      "created_at": "2018-04-06T17:39:01Z",
      "updated_at": "2018-04-06T17:39:01Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@MaximoTrinidad: \r\n\r\nI am glad to hear it. \r\nBut wait - there's more! :)\r\n\r\n* Conceptually, `-Path` and `-LiteralPath` are always _mutually exclusive_.\r\n\r\n* Most cmdlets sensibly enforce that by putting them into _separate parameter sets_.\r\n\r\n* `Import-Csv` doesn't do that - presumably to avoid the inconvenience of having to then define _4_ \r\ndistinct parameter sets - and then seemingly bungles the _manual_ check for mutual exclusion.\r\n\r\n   * The proliferation of parameter sets required to enforce mutual exclusion is a real pain point (see [here](https://stackoverflow.com/a/43019281/45375) for an example), and there has been [an attempt to address this](https://github.com/PowerShell/PowerShell-RFC/blob/master/X-Withdrawn/RFC0001-Mutual-Exclusion-Parameters-and-Properties.md), but that RFC by @SteveL-MSFT  has since been withdrawn.\r\n\r\nTo continue in the vein of \"Look, ma - no source-code analysis!\", here's a command that shows that `Import-Csv` has _both_ `-Path` and `-LiteralPath` in each of its two parameter sets, `Delimiter` and `UseCulture` (consistent with @markekraus' findings):\r\n\r\n```powershell\r\n> (Get-Command Import-Csv).ParameterSets | \r\n     Select-Object -ExpandProperty Parameters @{ n='ParameterSetName'; e='Name' } | \r\n       ? Name -like *Path | Select-Object ParameterSetName, Name\r\n\r\nParameterSetName Name       \r\n---------------- ----       \r\nDelimiter        Path       \r\nDelimiter        LiteralPath\r\nUseCulture       Path       \r\nUseCulture       LiteralPath\r\n```\r\n",
      "created_at": "2018-04-06T18:45:38Z",
      "updated_at": "2018-04-06T19:28:53Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@mklement0 \r\n\r\nLOL!!   \r\n\r\n> ..has since been withdrawn. \r\n\r\nNow, starting to sound more like ... By-Design!  \r\nVery informative!\r\n\r\nI wonder what @SteveL-MSFT would have to say?\r\n:)",
      "created_at": "2018-04-06T21:23:34Z",
      "updated_at": "2018-04-06T21:23:34Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The uber problem of simplifying defining and reading/understanding mutually exclusive parameter sets is still a problem that needs to be solved.  For now, we've had to do runtime checks (like in the web cmdlets) as a workaround.  I'd like to revisit that RFC in the future, but at the time it was written, it was more to validate/test the RFC process than something we had planned to implement.\r\n\r\nThe issue here does seem like a bug.  @mklement0 you allude to a number of scripts today that work around this, can you provide some numbers to get a sense of the urgency of this issue?",
      "created_at": "2018-04-09T00:22:36Z",
      "updated_at": "2018-04-09T00:22:36Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT: Thanks for the feedback.\r\n\r\nThe 1st hit when I searched Stack Overflow for [`[powershell] import-csv get-childitem`](https://stackoverflow.com/search?q=%5Bpowershell%5D+import-csv+get-childitem) was a question from 2013 relating to this very bug: https://stackoverflow.com/q/18254718/45375\r\n\r\nI haven't sifted through the remaining hits, but anecdotally I can tell you I've seen people run into the problem repeatedly.\r\n\r\nEither way, it should be a simple bug to resolve, and given that the current behavior is simply broken, there should be no backward-compatibility concerns.",
      "created_at": "2018-04-09T01:27:38Z",
      "updated_at": "2018-04-09T01:27:38Z"
    }
  ],
  "created_at": "2017-08-03T03:59:05Z",
  "labels": [
    "Issue-Bug",
    "Resolution-Fixed",
    "WG-Cmdlets-Utility"
  ],
  "number": 4473,
  "state": "closed",
  "title": "Import-Csv fails to bind Get-ChildItem output to its -LiteralPath parameter via the pipeline",
  "updated_at": "2019-01-19T08:04:51Z"
}