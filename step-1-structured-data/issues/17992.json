{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17992",
  "author": "LqkUWp",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nI have a file `.\\o\\abc [defg-0 hijk -lmn].pdf`. Then I try all commands below to `ls` it. The first char y/x represents that the corresponding command works or not, i.e. prints the file or throw out error which is in 'Error details' part. \r\n\r\n```\r\ny ls '*`[defg*0 hijk -lmn`].pdf' -Recurse\r\ny ls '*defg-0 hijk -lmn*.pdf' -Recurse\r\nx ls '*`[defg-0 hijk -lmn`].pdf' -Recurse\r\n```\n\n### Expected behavior\n\n```console\nAll three commands above work fine, i.e. print the file specified.\n```\n\n\n### Actual behavior\n\n```console\nJust as the first char y/x in each command line shows. It seems that hyphen is recognized as a special char although brackets are escaped.\n```\n\n\n### Error details\n\n```console\nGet-ChildItem: Cannot retrieve the dynamic parameters for the cmdlet. The specified wildcard character pattern is not valid: *\\[defg-0 hijk -lmn\\].pdf\r\n```\n```\n\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.6\r\nPSEdition                      Core\r\nGitCommitId                    7.2.6\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think this was already covered by https://github.com/PowerShell/PowerShell/issues/12168#issuecomment-611241092 and should be reported there.",
      "created_at": "2022-08-31T03:57:10Z",
      "updated_at": "2022-08-31T03:57:10Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@iSazonov  looking at the error, it seems that somewhere in processing the parameters something is not seeing ``` `[  ``` and ``` `] ``` as escaped and is trying to process what is inside the ` [   ... ] ` as a wildcard expression\r\n\r\n@LqkUWp  specifying -LiteralPath will prevent this happening. ",
      "created_at": "2022-09-02T09:19:46Z",
      "updated_at": "2022-09-02T09:19:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@jhoneill If I remember correctly PowerShell doesn't use exact parser for wildcards to get perf win. As result there are some problems. Also there is an conceptual problem since PowerShell allows wildcards in LiteralPath.",
      "created_at": "2022-09-02T13:05:51Z",
      "updated_at": "2022-09-02T13:05:51Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I think the more relevant related issues are:\r\n\r\n* A partial duplicate, because in both cases what is between _escaped_ `[` and `]` is still inappropriately being treated as a character set / range.\r\n\r\n  * https://github.com/PowerShell/PowerShell/issues/17991\r\n\r\n* The _inverse_ problem:\r\n  * https://github.com/PowerShell/PowerShell/issues/6733\r\n\r\n* The catch-all issue with respect to inconsistent behavior of backtick-escaping:\r\n  * https://github.com/PowerShell/PowerShell/issues/7999\r\n\r\n---\r\n\r\n@iSazonov\r\n\r\n> Also there is an conceptual problem since PowerShell allows wildcards in LiteralPath.\r\n\r\nNote that on Unix-like platforms `*` and `?` are legitimate filename characters, so `-LiteralPath` _should_ (and does) allow them.\r\n\r\nOn Windows, you get `Cannot find path 't*.txt' because it does not exist`, i.e. the path is formally accepted (but predictably never found). Are you thinking of implementing a more specific error message that points out that no such _literal_ path can by definition exist (at least by the rules of the file-system APIs, not necessarily by the rules of the underlying file-system)?\r\n\r\n\r\n\r\n",
      "created_at": "2022-09-07T15:32:12Z",
      "updated_at": "2022-09-07T15:55:34Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> > Also there is an conceptual problem since PowerShell allows wildcards in LiteralPath.\r\n> \r\n> Note that on Unix-like platforms `*` and `?` are legitimate filename characters, so `-LiteralPath` _should_ (and does) allow them.\r\n\r\nSo question is does it make sense to allow wildcards in LiteralPath if we have Path?",
      "created_at": "2022-09-08T05:31:54Z",
      "updated_at": "2022-09-08T05:31:54Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> \r\n\r\nWe have `filter`  which passes the characters to the Windows API which treats `*` and `?` but not `[ ]` as wildcards (not sure what happens on linux but it may treat them differently)\r\n\r\nWe have `literalpath` which should treat _nothing as wildcards_ even though on windows * and ? are forbidden by the filesystem, on linux that would be how you request a file with those characters. \r\n\r\nAnd `path` which treats all 3 as wildcards, unless they are backquoted (the backquote is a requirement of the wildcard class, not PowerShell syntax). However backquoted characters are not always processed correctly. \r\n\r\nSince `-literalpath`  does not work with -recurse ,  `-filter`  will work for this case, but the -path won't because of the backquote problem.  ",
      "created_at": "2022-09-08T08:28:27Z",
      "updated_at": "2022-09-08T08:29:05Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov, it's implied by @jhoneill's comment, but to spell it out: \r\n* On Unix, it absolutely makes sense, because you can have files literally named `a*b.txt` for instance (though it's probably not a good idea.\r\n* On Windows, _as a nicety_, we could perform a formal check up front to preclude use of `*` and `?` in `-LiteralPath` arguments, given that from the perspective of the file-system APIs no such files can exist, but I personally don't think that's necessary and I'm not even sure what would happen if you tried `-LiteralPath a*b.txt` on a file share hosted on a Unix server where such a file could exist (I don't know enough about APIs, SMB protocols, ... to know that).\r\n\r\n@jhoneill, good points, but I don't understand what you mean by `-LiteralPath` not working with `-Recurse`. Note that if you want to use _PowerShell_'s wildcards in this scenario, use `-Include` rather than `-Filter`. Not sure if the backtick problems affect `-Include` too, but at least it works with the failing command in the initial post: ``gci -include '*`[defg-0 hijk -lmn`].pdf' -Recurse``\r\n\r\n",
      "created_at": "2022-09-08T15:11:39Z",
      "updated_at": "2022-09-08T15:11:39Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@mklement0   The literal path thing\r\nFrom my powershell directory  `dir -LiteralPath \"profile.ps1\" `  finds my profile. From there if I do. \r\n\r\n```\r\n cd ..  \r\ndir -LiteralPath \"profile.ps1\" -Recurse\r\n```\r\ngives error `dir : Cannot find path 'C:\\Users\\me\\Documents\\profile.ps1' because it does not exist.`\r\n\r\n` dir -Filter \"profile.ps1\" -Recurse` works and passes the text to the underlying API (so on Windows `*` and `?` are wildcards and ``` ` ``` and . `[  ]` have no meta-functions)\r\n`dir -include \"profile.ps1\" -Recurse ` also works and I haven't checked what the wild cards and escapes do  \r\n\r\n\r\n",
      "created_at": "2022-09-08T17:06:20Z",
      "updated_at": "2022-09-08T17:06:20Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Unlike `-Filter`, `-Include` and `-Exclude` use _PowerShell_ wildcards and therefore also support `[...]` constructs.\r\n\r\n> `dir -LiteralPath \"profile.ps1\" -Recurse`\r\n\r\nif `profile.ps1` isn't in the current dir., that is the expected - and sensible - behavior: you're specifying the literal paths to match in the _current_ directory, and recursion is then to be performed on whatever matches _there_.\r\n\r\nThat `dir -Path profile.ps1 -Recurse` _does_ find `profile.ps1` in _subdirectories_ is highly unfortunate and can have destructive consequences - see\r\n * https://github.com/PowerShell/PowerShell/issues/5699",
      "created_at": "2022-09-09T02:17:09Z",
      "updated_at": "2022-09-09T02:17:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "(We could make `dir -Recurse \"profile.ps1\"` (that is `dir -Recurse -Path \"profile.ps1\"`) equivalent to `dir -Recurse -Include \"profile.ps1\"` by new parameter set.)",
      "created_at": "2022-09-09T04:49:30Z",
      "updated_at": "2022-09-09T04:49:30Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> > `dir -LiteralPath \"profile.ps1\" -Recurse`\r\n> \r\n> if `profile.ps1` isn't in the current dir., that is the expected - and sensible - behavior: you're specifying the literal paths to match in the _current_ directory, and recursion is then to be performed on whatever matches _there_.\r\n\r\nYes. I forget this and rediscover it about once every couple of years. I asked a group of experts and everyone initially thought literal path is just path without wildcard processing.\r\n\r\n`dir -Recurse -Path  \"profile.ps1\" `  works like  `dir  -Recurse -Include \"profile.ps1\" ` ,   and \r\n`dir -Recurse -LiteralPath \"profile.ps1\" `  does something different.    \r\nThe help descriptions of `path` and `literalPath` don't lead people to understanding the difference and there are no `literalpath` examples. It is working as designed, but the design comes as a surprise to many.  \r\n\r\n` dir -Recurse -literalpath .\\PowerShell\\readme.md `  tries to recurse through  a non-existent readme.md directory but   \r\n` dir -Recurse -path .\\PowerShell\\readme.md ` recurses through all subdirectories looking for readme.md  -path seems to split into parent and child parts, and do different things if the child is a file or a directory. \r\n\r\n`Include` has its own annoyances\r\n1. without `-recurse` neither  `dir -include profile.ps1` nor `dir  . -include profile.ps1` return a file from the current directory, one must specify `dir * -include profile.ps1` (nothing would break if the cmdlet assumed *). \r\n2.  `dir -path .\\PowerShell\\,.\\WindowsPowerShell\\ -Include profile.ps1` returns nothing (it requires `.\\PowerShell\\*,.\\WindowsPowerShell\\*`  and again * could be assumed) but...\r\n3.  `-Include` and `-exclude` don't apply when used with literalpath  (`dir -LiteralPath .\\PowerShell -Include *.psm1`  returns everything)\r\n\r\nFortunately the bug in this issue - which I think is validating the path parameter - does not affect `-Include` so        \r\n```dir -include '* `[defg-0 hijk -lmn`].Txt' -Recurse```  works \r\n\r\nThis is all harder than it needs to be :-( \r\n\r\n",
      "created_at": "2022-09-09T09:44:37Z",
      "updated_at": "2022-09-09T09:46:38Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> This is all harder than it needs to be :-(\r\n\r\nAmen to that.\r\n\r\nIf backward compatibility weren't in the picture, I would eliminate the implicit recursion based on the leaf component of the `-Path` component altogether - it is simply too treacherous and confusing.\r\n\r\nThat is, the only way to search for a name or pattern in _all_ directories of the subtree would then be to use either `-Filter` or `-Include`, and both `-Path` and `-LiteralPath` would consistently only specify the _starting point_ for `-Recurse`.\r\n\r\nTherefore, @iSazonov, backward compatibility also gets in the way of your suggestion, because you can (unfortunately) currently do something like `Get-ChildItem $Home/*.txt -Recurse` too look for `*.txt` files in the entire subtree, which would break if `$Home/*.txt` were to bind to `-Include`.\r\n\r\n\r\n\r\n",
      "created_at": "2022-09-09T16:13:26Z",
      "updated_at": "2022-09-09T16:13:26Z"
    }
  ],
  "created_at": "2022-08-30T15:18:27Z",
  "labels": [
    "Needs-Triage"
  ],
  "number": 17992,
  "state": "open",
  "title": "`ls` breaks down when path name contains hyphen enclosed in escaped brackets",
  "updated_at": "2022-09-09T16:13:26Z"
}