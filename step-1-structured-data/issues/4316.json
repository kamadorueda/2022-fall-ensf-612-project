{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4316",
  "author": "mklement0",
  "body": "<sup>This suggestion is the result of a conversation between @iSazonov  and me - see #4293.</sup>\r\n\r\nThe idea is to introduce **new parameter sets** that:\r\n\r\n* frame the operations in the more established **set-theory terms** \r\n* while introducing the relative-complement operation to **make it easy to determine the objects unique to _one_ side**.\r\n* **make it easier to retrieve just the selected input objects** (without the custom-object wrapper that contains the `.SideIndicator` property\r\n* **improve the performance** of certain use cases\r\n\r\nBelow are examples of each desired new parameter (parameter set) that would be mutually incompatible and also incompatible with the current parameter sets.\r\n\r\nAside from referring to the desired set operation, their desired behavior is expressed as s command using `Compare-Object`'s _current_ capabilities:\r\n\r\n* **`Compare-Object -Union $A $B`:** union (A \u222a B)\r\n\r\n     `Compare-Object $A $B -IncludeEqual -PassThru`\r\n\r\n* **`Compare-Object -Intersection $A $B`**: intersection (A \u2229 B):\r\n\r\n     `Compare-Object $A $B -IncludeEqual -ExcludeDifferent -PassThru`\r\n\r\n* **`Compare-Object -SymmetricDifference $A $B`**: symmetric difference (A \u2206 B) - the same as the current default behavior, but without the wrapper objects\r\n\r\n     `Compare-Object $A $B  -PassThru`\r\n\r\n* **`Compare-Object -Complement $A $B`**: relative complement (A \u2216 B) - getting objects unique to `$B`\r\n\r\n     `Compare-Object $A $B  | ? SideIndicator -eq '=>' | % InputObject`\r\n\r\n_Syntax note_: @dragonwolf83 proposes using a _single_ parameter such as `-SetOperation <operation>` (e.g., `-SetOperation Intersection` or `-SetOperation Union`) instead of distinct switches (e.g., `-Intersection` or `-Union`), which makes for easier implementation (no need for a distinct parameter set for each operation) and better discoverability, though is slightly more cumbersome to type for experienced users who already know what they want.\r\n\r\nNote that all commands above (effectively) suppress the custom-object wrapper with the `.SideIndicator` property and return the selected input objects directly (or, with `-Property` specified, the resulting `[pscustomobject]` instance would lack the `.SideIndicator` property).\r\n\r\nOne thing to note is the _order_ in which objects are output - this is not currently documented (from a _set_ perspective, order doesn't matter, but for subsequent processing it may), and I haven't dug into the source to verify, but from what I can tell, it is:\r\n\r\n* `==` (identical) objects first\r\n* `>=` right-side-only objects next\r\n* `<=` left-side-only objects last\r\n\r\n---\r\n\r\nOn a related note, adding a  **new switch** would make sense in order to return a _hashtable_ of **original objects grouped by what is currently the `.SideIndicator` value**.\r\n\r\nTwo names have been proposed for this switch:\r\n\r\n* `-Group`\r\n* `-AsHashtable`\r\n\r\n`-AsHashtable` has the advantage of being familiar from `Group-Object`, although there it doesn't indicate a fundamental change in output _structure_.\r\n\r\nThe following example uses `-Group` for now:\r\n\r\n```powershell\r\n$A = 1, 2, 3, 4\r\n$B = 1, 3, 4, 5\r\n\r\n# Wishful thinking\r\nCompare-Object -Group -Union $A $B\r\n```\r\n\r\nThe above would yield the equivalent of:\r\n\r\n```powershell\r\n@{\r\n  '==' = 1, 3, 4\r\n  '<=' = , 2\r\n  '=>' = , 5\r\n}\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta.4\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I like this quite a bit. Compare-Object has long been... lacklustre... in implementation. I would personally also prefer if rather than `==`, `<=`, and `=>` symbols for the grouping (or indeed even for the current behaviour) the `SideIndicator`s were changed to match the actual parameters the objects are passed to (i.e., `ReferenceSet`, `DifferenceSet`, and `Both`)\r\n\r\nCurrently the default display is actually surprisingly difficult to make sense of in my opinion with any appreciably large comparison sets. It may even make more sense for the default display to actually do a `Format-Table -GroupBy SideIndicator` similar to how `GetChildItem` will group the table display by folder in a recursive search. It would make comprehending the data you're getting significantly less befuddling. :) ",
      "created_at": "2018-08-17T14:44:05Z",
      "updated_at": "2018-08-17T14:44:52Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Good point re default output format, @vexx32. Can I suggest you create a new issue to propose the grouped output? \r\n\r\nAs for the `.SideIndicator` property values: I fear that ship has sailed, as the value of that property is used programmatically. (We could transform the values just _for display_, but the resulting discrepancy between what is displayed and what you need to use programmatically may be confusing).\r\n\r\nAs an aside: It's unfortunate that the property wasn't defined as an `[enum]` type to begin with.\r\n\r\nPersonally it took me a while to remember the logic of `<=` vs. `=>`; here's how I remember it now: the arrow points to the side the object at hand is _exclusive to_.",
      "created_at": "2018-08-17T15:13:03Z",
      "updated_at": "2018-08-17T15:13:03Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Oh, I get that, but it's not clear *at a glance* which side is actually which; you have to examine your objects' input data and see which is `<=` and which is `=>`\r\n\r\nI'll type up an issue on it. Whether or not it's actually used (which, frankly, I *very rarely see* because of its obscure and unclear implementation) it needs to change.",
      "created_at": "2018-08-17T15:16:46Z",
      "updated_at": "2018-08-17T15:16:46Z"
    },
    {
      "author": "dragonwolf83",
      "author_association": "NONE",
      "body": "I don't think ` -Group` parameter should be used. That starts overloading parameters when the original intent is to pipe to a standard set of cmdlets to do that, like `Group-Object`. It is not any more complex to use and keeps the cmdlet code clean.\r\n\r\n````PowerShell\r\nCompare-Object -Group -Union $A $B\r\nvs\r\nCompare-Object -Union $A $B | Group-Object\r\n````\r\n\r\nBack to using Sets, it would be nicer to have one parameter, like `-UsingSet`, with the option of `Union`, `Intersect`, `Except` instead of separate parameters. Hopefully a better name than I came up with.",
      "created_at": "2018-08-18T04:55:48Z",
      "updated_at": "2018-08-18T04:55:48Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @dragonwolf83.\r\n\r\nRe `-UsingSet <operation>` vs. distinct parameters: That makes sense for ease of implementation and discoverability, though I like the direct expression of the intent with distinct switches for experienced users (read: less to type). I don't feel strongly about this, and Ive updated the original post to mention `-UsingSet` - renamed to `-SetOperation` - as an alternative.\r\n\r\nRe `-Group`, I do see your point: piping to `Group-Object SideIndicator` is conceptually cleaner.\r\nHowever, that is at odds with the proposed implementation of returning the _unwrapped_ elements from the set operations, in which case `... | Group-Object SideIndicator` wouldn't work.\r\nWe would then need an opt-in to have the output objects wrapped (as currently happens by default) - which sounds clunky too.\r\nAny thoughts?\r\n",
      "created_at": "2018-08-19T16:23:58Z",
      "updated_at": "2018-08-19T16:23:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "How many set operations exist out of the propose so that we want `-SetOperation`?",
      "created_at": "2018-08-20T03:33:56Z",
      "updated_at": "2018-08-20T03:33:56Z"
    }
  ],
  "created_at": "2017-07-21T12:40:23Z",
  "number": 4316,
  "state": "open",
  "title": "Suggestion: Improve Compare-Object by adding set operations (union, intersection, symmetric difference, relative complement)",
  "updated_at": "2018-08-20T03:33:56Z"
}