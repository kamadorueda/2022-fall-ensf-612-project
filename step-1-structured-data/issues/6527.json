{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6527",
  "author": "dronkoff",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://github.com/PowerShell/PowerShell/blob/master/docs/KNOWNISSUES.md).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n$sss = New-PSSession server\r\nCopy-Item -Path 'c:\\temp\\[x]*' -Destination 'c:\\temp' -ToSession $sss\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nEverything that starts with the letter 'x' in the temp folder was copied to server \"server\".\r\n\r\nActual behavior\r\n---------------\r\n\r\n```powershell\r\nPS C:\\> Copy-Item -Path 'c:\\temp\\[x]*' -Destination 'c:\\temp' -ToSession $sss\r\nCopy-Item : A parameter cannot be found that matches parameter name 'ToSession'.\r\nAt line:1 char:55\r\n+ Copy-Item -Path 'c:\\temp\\[x]*' -Destination 'c:\\temp' -ToSession $sss\r\n+                                                       ~~~~~~~~~~\r\n    + CategoryInfo          : InvalidArgument: (:) [Copy-Item], ParameterBindingException\r\n    + FullyQualifiedErrorId : NamedParameterNotFound,Microsoft.PowerShell.Commands.CopyItemCommand\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nPS C:\\> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.16299.251\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.16299.251\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n\r\n```\r\n",
  "closed_at": "2021-06-14T18:09:27Z",
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@dronkoff What does `Get-Command Copy-Item` return? And can you show the detailed error output i.e. after running your command, do \r\n```\r\n$error[0] | fl * -force\r\n```\r\nThanks!\r\n",
      "created_at": "2018-03-29T18:18:47Z",
      "updated_at": "2018-03-29T18:18:47Z"
    },
    {
      "author": "dronkoff",
      "author_association": "NONE",
      "body": "@BrucePay If you mean if this parameter exists? Yes, it is. And it even works as expected if I wouldn't specify square brackets in Path param. \r\n```powershell\r\nPS C:\\> Get-Command Copy-Item -syntax\r\n\r\nCopy-Item [-Path] <string[]> [[-Destination] <string>] [-Container] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Recurse] [-PassThru] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [-FromSession <PSSession>] **[-ToSession <PSSession>]** [<CommonParameters>]\r\n\r\nCopy-Item [[-Destination] <string>] -LiteralPath <string[]> [-Container] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Recurse] [-PassThru] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [-FromSession <PSSession>] **[-ToSession <PSSession>]** [<CommonParameters>]\r\n\r\nPS C:\\> Get-Help copy-item -Parameter ToSession\r\n\r\n-ToSession <PSSession>\r\n    Specifies the PSSession object to which a remote file is being copied. When you use this par\r\n    ameter, the Path and LiteralPath parameters refer to the local path on the remote machine.\r\n\r\n    Required?                    false\r\n    Position?                    named\r\n    Default value                None\r\n    Accept pipeline input?       False\r\n    Accept wildcard characters?  false\r\n```\r\n\r\nYou can also try to reproduce it on your machine. You don't even need a real session and folders for a simple test. From my observations it can be easily reproduced on every installation of Windows PowerShell 5.0 and 5.1. Also I reproduced it on one installation of PowerShell Core 6.0.\r\n\r\n```powershell\r\nCopy-Item -Path 'c:\\temp\\[x]*' -Destination 'c:\\temp' -ToSession $null\r\n```\r\n\r\n\r\n\r\nHere are exception details.\r\n\r\n```powershell\r\nPS C:\\> $Error[0] | fl * -Force\r\n\r\n\r\nPSMessageDetails      :\r\nException             : System.Management.Automation.ParameterBindingException: A parameter cannot be found that matches parameter name 'ToSessio\r\n                        n'.\r\n                           at System.Management.Automation.CmdletParameterBinderController.VerifyArgumentsProcessed(ParameterBindingException ori\r\n                        ginalBindingException)\r\n                           at System.Management.Automation.CmdletParameterBinderController.BindCommandLineParametersNoValidation(Collection`1 arg\r\n                        uments)\r\n                           at System.Management.Automation.CmdletParameterBinderController.BindCommandLineParameters(Collection`1 arguments)\r\n                           at System.Management.Automation.CommandProcessor.BindCommandLineParameters()\r\n                           at System.Management.Automation.CommandProcessor.Prepare(IDictionary psDefaultParameterValues)\r\n                           at System.Management.Automation.CommandProcessorBase.DoPrepare(IDictionary psDefaultParameterValues)\r\n                           at System.Management.Automation.Internal.PipelineProcessor.Start(Boolean incomingStream)\r\n                           at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n                        --- End of stack trace from previous location where exception was thrown ---\r\n                           at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n                           at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n                           at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal\r\n                        [][] pipeElements, CommandBaseAst[] pipeElementAsts, CommandRedirection[][] commandRedirections, FunctionContext funcCont\r\n                        ext)\r\n                           at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)\r\n                           at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\nTargetObject          :\r\nCategoryInfo          : InvalidArgument: (:) [Copy-Item], ParameterBindingException\r\nFullyQualifiedErrorId : NamedParameterNotFound,Microsoft.PowerShell.Commands.CopyItemCommand\r\nErrorDetails          :\r\nInvocationInfo        : System.Management.Automation.InvocationInfo\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\nPipelineIterationInfo : {}\r\n```\r\n",
      "created_at": "2018-03-30T07:20:34Z",
      "updated_at": "2018-03-30T07:20:34Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@dronkoff Currently I can't repro this on either 5.1 or 6.0. If I specify `$null` for the session as you suggest, I get\r\n```\r\nPS[1] (86) > Copy-Item -Path 'c:\\temp\\[x]*' -Destination 'c:\\temp' -ToSession $null\r\nCopy-Item : Cannot validate argument on parameter 'ToSession'. The argument is null or empty. ...\r\n```\r\nwhich is the expected error. \r\n\r\nI wanted you to run `Get-Command` to see where the cmdlet was coming from in the (admittedly unlikely) case that you somehow were picking up a command alias:\r\n```\r\nPS[1] (89) > gcm copy-item\r\n\r\nCommandType     Name                                               Version    Source\r\n-----------     ----                                               -------    ------\r\nCmdlet          Copy-Item                                          3.1.0.0    Microsoft.PowerShell.Management\r\n```\r\n",
      "created_at": "2018-03-30T19:44:50Z",
      "updated_at": "2018-03-30T19:44:50Z"
    },
    {
      "author": "dronkoff",
      "author_association": "NONE",
      "body": "Ah, I got the idea. No, it's the original one.\r\n\r\n```powershell\r\nPS C:\\> Get-Command Copy-Item\r\n\r\nCommandType     Name                                               Version    Source\r\n-----------     ----                                               -------    ------\r\nCmdlet          Copy-Item                                          3.1.0.0    Microsoft.PowerShell.Management\r\n```\r\nMaybe locale related issues? Because with $null I have another result.\r\n```powershell\r\nPS C:\\> Copy-Item -Path 'c:\\temp\\[x]*' -Destination 'c:\\temp' -ToSession $null\r\nCopy-Item : A parameter cannot be found that matches parameter name 'ToSession'.\r\nAt line:1 char:55\r\n+ ... opy-Item -Path 'c:\\temp\\[x]*' -Destination 'c:\\temp' -ToSession $null\r\n+                                                          ~~~~~~~~~~\r\n    + CategoryInfo          : InvalidArgument: (:) [Copy-Item], ParameterBindingException\r\n    + FullyQualifiedErrorId : NamedParameterNotFound,Microsoft.PowerShell.Commands.CopyItemCommand\r\n```\r\n\r\n",
      "created_at": "2018-04-03T21:25:40Z",
      "updated_at": "2018-04-03T21:25:40Z"
    },
    {
      "author": "dhjensen",
      "author_association": "NONE",
      "body": "It's the same issue with -FromSession\r\nusing wildcard(*) give the exception with that as well.",
      "created_at": "2018-08-22T10:43:41Z",
      "updated_at": "2018-08-22T10:43:41Z"
    },
    {
      "author": "BarnumD",
      "author_association": "NONE",
      "body": "Same issue on powershell core 6.1 when copying a file with a wildcard.",
      "created_at": "2018-11-06T18:13:36Z",
      "updated_at": "2018-11-06T18:13:36Z"
    },
    {
      "author": "catebest",
      "author_association": "NONE",
      "body": "I encountered this issue on PowerShell 5.1.14393.2636 with Copy-Item version 3.1.0.0 when my **Path parameter value was invalid**.  A more appropriate error message would be a great fix!",
      "created_at": "2018-12-15T21:25:04Z",
      "updated_at": "2018-12-15T21:25:04Z"
    },
    {
      "author": "RoboMWM",
      "author_association": "NONE",
      "body": "Also having this issue when trying to copy a file that's in a folder with square brackets in its name. (Not using a wildcard in my case.) Is there any way to \"escape\" these characters?",
      "created_at": "2020-02-19T04:20:35Z",
      "updated_at": "2020-02-19T04:20:54Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@RoboMWM you can either use `-LiteralPath` or escape the brackets with `",
      "created_at": "2020-02-19T05:03:56Z",
      "updated_at": "2020-02-19T05:03:56Z"
    },
    {
      "author": "rifftual",
      "author_association": "NONE",
      "body": "What's the status of this?",
      "created_at": "2021-02-16T14:31:26Z",
      "updated_at": "2021-02-16T14:31:26Z"
    },
    {
      "author": "AspenForester",
      "author_association": "NONE",
      "body": "With PowerShell 7.1.1, I'm able to reproduce the error when I enter a valid but empty source path, but if I point the `-Path` parameter to a valid path that actually contains a non-zero number of items to copy, the command completes successfully. ",
      "created_at": "2021-02-24T19:06:29Z",
      "updated_at": "2021-02-24T19:06:29Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I looked into this.  What's happening is that the parameter binder is trying to find the right provider for dynamic parameters.  It correctly identifies the FileSystemProvider based on the path, but then it calls the provider to glob the path.  No result is found since that path doesn't match anything.  There is a check for result to be found and doesn't attempt to bind dynamic parameters if nothing is returned.  This results in the parameter binder error.",
      "created_at": "2021-06-04T23:17:50Z",
      "updated_at": "2021-06-04T23:23:02Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #15525, which has now been successfully released as `v7.2.0-preview.7`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0-preview.7)\n",
      "created_at": "2021-06-17T16:59:06Z",
      "updated_at": "2021-06-17T16:59:06Z"
    }
  ],
  "created_at": "2018-03-29T11:22:12Z",
  "number": 6527,
  "state": "closed",
  "title": "Parameter binding error in Copy-Item -ToSession when using range wildcards in -Path",
  "updated_at": "2021-06-17T16:59:06Z"
}