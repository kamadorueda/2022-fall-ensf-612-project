{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5978",
  "author": "SwarfegaGit",
  "body": "This seems to occur on 6.0 and 5.1.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nPS C:\\> Get-PSSession\r\nPS C:\\> New-PSSession -ComputerName SERVER01 -OutVariable Session\r\n\r\n Id Name            ComputerName    ComputerType    State         ConfigurationName     Availability\r\n -- ----            ------------    ------------    -----         -----------------     ------------\r\n  1 WinRM1          SERVER01 RemoteMachine   Opened        Microsoft.PowerShell     Available\r\n\r\nPS C:\\> Invoke-Command -Session $Session -ScriptBlock { Import-Module FailoverClusters }\r\nPS C:\\> Import-PSSession -Session $Session -Module FailoverClusters\r\nImport-PSSession : Cannot convert 'System.Collections.ArrayList' to the type 'System.Management.Automation.Runspaces.PSS\r\nession' required by parameter 'Session'. Specified method is not supported.\r\nAt line:1 char:27\r\n+ Import-PSSession -Session $Session -Module FailoverClusters\r\n+                           ~~~~~~~~\r\n+ CategoryInfo          : InvalidArgument: (:) [Import-PSSession], ParameterBindingException\r\n+ FullyQualifiedErrorId : CannotConvertArgument,Microsoft.PowerShell.Commands.ImportPSSessionCommand\r\n\r\nPS C:\\> Import-PSSession -Session (Get-PSSession) -Module FailoverClusters\r\n\r\nModuleType Version    Name                                ExportedCommands\r\n---------- -------    ----                                ----------------\r\nScript     1.0        tmp_kluknkoe.fsw                    {Add-ClusterDisk, Add-ClusterFileServerRole, Add-ClusterGe...\r\n\r\n\r\nPS C:\\> $Session | Get-Member\r\n\r\n   TypeName: System.Management.Automation.Runspaces.PSSession\r\n\r\nName                   MemberType     Definition\r\n----                   ----------     ----------\r\nEquals                 Method         bool Equals(System.Object obj)\r\nGetHashCode            Method         int GetHashCode()\r\nGetType                Method         type GetType()\r\nToString               Method         string ToString()\r\nApplicationPrivateData Property       psprimitivedictionary ApplicationPrivateData {get;}\r\nAvailability           Property       System.Management.Automation.Runspaces.RunspaceAvailability Availability {get;}\r\nComputerName           Property       string ComputerName {get;}\r\nComputerType           Property       System.Management.Automation.Runspaces.TargetMachineType ComputerType {get;set;}\r\nConfigurationName      Property       string ConfigurationName {get;}\r\nContainerId            Property       string ContainerId {get;}\r\nId                     Property       int Id {get;}\r\nInstanceId             Property       guid InstanceId {get;}\r\nName                   Property       string Name {get;set;}\r\nRunspace               Property       runspace Runspace {get;}\r\nVMId                   Property       System.Nullable[guid] VMId {get;}\r\nVMName                 Property       string VMName {get;}\r\nDisconnectedOn         ScriptProperty System.Object DisconnectedOn {get=$this.Runspace.DisconnectedOn;}\r\nExpiresOn              ScriptProperty System.Object ExpiresOn {get=$this.Runspace.ExpiresOn;}\r\nIdleTimeout            ScriptProperty System.Object IdleTimeout {get=$this.Runspace.ConnectionInfo.IdleTimeout;}\r\nOutputBufferingMode    ScriptProperty System.Object OutputBufferingMode {get=$this.Runspace.ConnectionInfo.OutputBuf...\r\nState                  ScriptProperty System.Object State {get=$this.Runspace.RunspaceStateInfo.State;}\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nTo not error like it does on command #5\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nSee command #4 which fails due to expecting a different 'type'.  \r\n\r\nA Get-Member shows that the $Session variable is the type expected by Import-PSSession.\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0\r\nOS                             Microsoft Windows 6.1.7601 S\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "megamorf",
      "author_association": "CONTRIBUTOR",
      "body": "The problem is that `-OutVariable` returns an ArrayList which isn't being unrolled by Import-PSSession. In my opinion its `-Session` parameter should be able to do so whereas changing the behaviour of `-OutVariable` would be a breaking change.",
      "created_at": "2018-01-25T02:46:07Z",
      "updated_at": "2018-01-25T02:46:07Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@SwarfegaGit If you want to see the real type in a variable, use ```Get-Member -Inputobject $var```\r\n\r\n\r\n",
      "created_at": "2018-01-25T10:04:14Z",
      "updated_at": "2018-01-25T10:04:14Z"
    },
    {
      "author": "SwarfegaGit",
      "author_association": "CONTRIBUTOR",
      "body": "@powercode thanks, I didn't know that.  Why would this be different depending on syntax?\r\n\r\nAlso as a 5.1 issue and [yesterdays blog](https://blogs.msdn.microsoft.com/powershell/2018/01/24/powershell-core-6-1-roadmap/) mentioning the Consider-WindowsPowerShell51 label is it worth adding that label to this issue?",
      "created_at": "2018-01-25T10:20:08Z",
      "updated_at": "2018-01-25T10:21:50Z"
    },
    {
      "author": "megamorf",
      "author_association": "CONTRIBUTOR",
      "body": "@SwarfegaGit I prefer this way of checking object types:\r\n\r\n```\r\n[#401] PS5 D:\\temp> Get-Process explorer -OutVariable proc\r\n\r\nHandles  NPM(K)    PM(K)      WS(K)     CPU(s)     Id  SI ProcessName\r\n-------  ------    -----      -----     ------     --  -- -----------\r\n   1562     166   168208      55092     874,34  18832   1 explorer\r\n\r\n[#402] PS5 D:\\temp> $proc.GetType()\r\n\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     True     ArrayList                                System.Object\r\n\r\n\r\n[#403] PS5 D:\\temp> $proc[0].GetType()\r\n\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     False    Process                                  System.ComponentModel.Component\r\n```",
      "created_at": "2018-01-25T11:52:51Z",
      "updated_at": "2018-01-25T11:52:51Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Well, it does different things :) If you only want the type, `.GetType()` is perfect. \r\n```Get-Member -in $var``` gives you the type and the members of that type.\r\n```$var | Get-Member``` enumerates $var if it is IEnumerable, otherwise it is the same as the above.\r\n\r\nTo summarize, it differs if `$var` contains a collection.\r\n\r\nfor sports, try \r\n``` \r\n$var = 1,\"text\"\r\n$var | Get-Member\r\nGet-Member -input $var\r\n```",
      "created_at": "2018-01-25T13:43:00Z",
      "updated_at": "2018-01-25T13:45:01Z"
    }
  ],
  "created_at": "2018-01-22T14:06:42Z",
  "number": 5978,
  "state": "open",
  "title": "Import-PSSession doesn't like session in a variable",
  "updated_at": "2018-01-25T13:45:01Z"
}