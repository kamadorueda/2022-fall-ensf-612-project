{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5175",
  "author": "markekraus",
  "body": "# Problem\r\n\r\nParameter sets are great for grouping parameters into sets that work together. This can, to some degree, also be used to make parameters exclusive. The problem arises when you have mutually exclusive parameters that need to exist in all parameter sets. The current implementation would require creating additional parameter sets to accommodate the actual parameter sets and the mutually exclusive parameters.\r\n\r\nFor very simplistic demonstration, lets say you have a `New-Widget`:\r\n\r\n```powershell\r\nfunction New-Widget {\r\n    [CmdletBinding()]\r\n    param (\r\n        [Parameter(ParameterSetName=\"Size\")]\r\n        [int]$Height,\r\n        [Parameter(ParameterSetName=\"Size\")]\r\n        [int]$Width,\r\n        [Parameter(ParameterSetName=\"Size\")]\r\n        [int]$Length,\r\n\r\n        [Parameter(ParameterSetName=\"Color\")]\r\n        [int]$Red,\r\n        [Parameter(ParameterSetName=\"Color\")]\r\n        [int]$Green,\r\n        [Parameter(ParameterSetName=\"Color\")]\r\n        [int]$Blue\r\n    )\r\n}\r\n``` \r\n\r\nWidgets can be defined either by color or size. Now, let say that all widgets, regardless of begin defined by size or color, can either have a flavor or a sound but not both. Currently, to accommodate this you would need to do the following:\r\n\r\n```powershell\r\nfunction New-Widget {\r\n    [CmdletBinding()]\r\n    param (\r\n        [Parameter(ParameterSetName=\"SizeFlavor\")]\r\n        [Parameter(ParameterSetName=\"SizeSound\")]\r\n        [int]$Height,\r\n        [Parameter(ParameterSetName=\"SizeFlavor\")]\r\n        [Parameter(ParameterSetName=\"SizeSound\")]\r\n        [int]$Width,\r\n        [Parameter(ParameterSetName=\"SizeSound\")]\r\n        [Parameter(ParameterSetName=\"SizeFlavor\")]\r\n        [int]$Length,\r\n\r\n        [Parameter(ParameterSetName=\"ColorFlavor\")]\r\n        [Parameter(ParameterSetName=\"ColorSound\")]\r\n        [int]$Red,\r\n        [Parameter(ParameterSetName=\"ColorSound\")]\r\n        [Parameter(ParameterSetName=\"ColorFlavor\")]\r\n        [int]$Green,\r\n        [Parameter(ParameterSetName=\"ColorSound\")]\r\n        [Parameter(ParameterSetName=\"ColorFlavor\")]\r\n        [int]$Blue,\r\n\r\n        [Parameter(ParameterSetName=\"SizeFlavor\")]\r\n        [Parameter(ParameterSetName=\"ColorFlavor\")]\r\n        [string]$Flavor,\r\n\r\n        [Parameter(ParameterSetName=\"SizeSound\")]\r\n        [Parameter(ParameterSetName=\"ColorSound\")]\r\n        [string]$Sound\r\n    )\r\n}\r\n```\r\n\r\nThis can get wildly out of hand if you have a third or fourth set of mutually exclusive parameters. This becomes difficult to maintain and to add additional parameters. Another option is to have logic in the body of the function to check for mutually exclusive Parameters at the cost of the mutual exclusion not being as discoverable.\r\n\r\nIn some instances you may be able to refactor into additional cmdlets or make use of custom types. But that doesn't always work for command line utilities meant to ease user burden at the cost of code complexity. \r\n\r\n# Proposal\r\nI propose that parameters should support mutual exclusion natively. I don't have a solid implementation plan, but one idea would be to add a Parameter Attribute property like `ParameterMutexName`. Using the example above it would work like this:\r\n\r\n```powershell\r\nfunction New-Widget {\r\n    [CmdletBinding()]\r\n    param (\r\n        [Parameter(ParameterSetName=\"Size\")]\r\n        [int]$Height,\r\n        [Parameter(ParameterSetName=\"Size\")]\r\n        [int]$Width,\r\n        [Parameter(ParameterSetName=\"Size\")]\r\n        [int]$Length,\r\n\r\n        [Parameter(ParameterSetName=\"Color\")]\r\n        [int]$Red,\r\n        [Parameter(ParameterSetName=\"Color\")]\r\n        [int]$Green,\r\n        [Parameter(ParameterSetName=\"Color\")]\r\n        [int]$Blue,\r\n\r\n        [Parameter(ParameterSetName=\"Size\", ParameterMutexName=\"FlavorOrSound\")]\r\n        [Parameter(ParameterSetName=\"Color\", ParameterMutexName=\"FlavorOrSound\")]\r\n        [string]$Flavor,\r\n        [Parameter(ParameterSetName=\"Size\", ParameterMutexName=\"FlavorOrSound\")]\r\n        [Parameter(ParameterSetName=\"Color\", ParameterMutexName=\"FlavorOrSound\")]\r\n        [string]$Sound\r\n    )\r\n}\r\n```\r\n\r\nParameter binding logic would then check if more than one parameter is supplied in a `ParameterMutexName` and throw. This is flexible enough to accommodate parameters being exclusive in one set while not exclusive in other sets. This could also accommodate multiple Mutex sets within a parameter set.",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@markekraus you should take a look at an old draft of an RFC as a proposal to solve this https://github.com/PowerShell/PowerShell-RFC/blob/master/X-Withdrawn/RFC0001-Mutual-Exclusion-Parameters-and-Properties.md",
      "created_at": "2017-10-19T23:49:44Z",
      "updated_at": "2017-10-19T23:49:44Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT Interesting. When I was thinking about this my first thought was to add an attribute like what is in that RFC but I immediately realized that it makes things more painful. That's when I thought to add the parameter attribute property.\r\n\r\nWould a solution to this need to work for both classes and parameters? I'm not sure doing something like that is really the correct approach for class properties. It just feels wrong. Was something like what I suggest here ever discussed? It doesn't look like it from the RFC's history, but maybe an offline discussion took place.",
      "created_at": "2017-10-20T00:21:06Z",
      "updated_at": "2017-10-20T00:21:06Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I don't think your specific proposal came up when we original thought about this.  I think the big challenge was having something that was easy to author and also easy to read (once authored) particularly when cmdlets get extended and more parameters get added (like what you experienced with the web cmdlets).",
      "created_at": "2017-10-20T01:55:59Z",
      "updated_at": "2017-10-20T01:55:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I thought about this too. It is not difficult to implement mutual exclusion parameters on top level but not for subparameters - definitions with attributers becomes a mystery. \r\nIn fact, we must define a graph. We can do it in a variety of ways, (even with Json and Yaml).",
      "created_at": "2017-10-20T03:42:15Z",
      "updated_at": "2017-10-20T03:42:15Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT Any thoughts on the readability and ease of coding for what I proposed? \r\n\r\n> definitions with attributers becomes a mystery\r\n\r\n@iSazonov Can you expand on that? I'm not sure I understand.\r\n\r\n> In fact, we must define a graph.\r\n\r\nCould you psuedo code an example of what that would look like?\r\n\r\n",
      "created_at": "2017-10-20T10:01:32Z",
      "updated_at": "2017-10-20T10:01:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "```\r\nParameterSet1\r\n    ||\r\n    \\/\r\nMandatoryParam1 -> Param11 -> Param111\r\n                -> Param12\r\n\r\nMandatoryParam2 -> Param21 -> Param211\r\n                -> Param22 -> Param221\r\n                -> Param23 -> Param221\r\n\r\n```\r\nNote the `Param221`.\r\n",
      "created_at": "2017-10-20T12:32:36Z",
      "updated_at": "2017-10-20T12:32:36Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@markekraus it seems it would be just as complicated with existing parameter sets once you get to several [ParameterMutexName] attributes.\r\n\r\nPersonally, when you start having a large number of attributes that scroll off the screen, it makes it hard to mentally map all the sets and exclusions.  So I think I prefer something at the [CmdletBinding] level to declare the exclusions and maybe that new thing is mutually exclusive to parametersets.\r\n\r\nIf we use `Invoke-RestMethod` as the canonical example, today if you get the help syntax:\r\n\r\n```none\r\nInvoke-RestMethod [-Uri] <uri> [-Method <WebRequestMethod>] [-FollowRelLink] [-MaximumFollowRelLink <int>] [-ResponseHeadersVariable <string>] [-UseBasicParsing] [-WebSession <WebRequestSession>] [-SessionVariable <string>] [-Credential <pscredential>] [-UseDefaultCredentials] [-CertificateThumbprint <string>] [-Certificate <X509Certificate>] [-SkipCertificateCheck] [-UserAgent <string>] [-DisableKeepAlive] [-TimeoutSec <int>] [-Headers <IDictionary>] [-MaximumRedirection <int>] [-Proxy <uri>] [-ProxyCredential <pscredential>] [-ProxyUseDefaultCredentials] [-Body <Object>] [-ContentType <string>] [-TransferEncoding <string>] [-InFile <string>] [-OutFile <string>] [-PassThru] [-PreserveAuthorizationOnRedirect] [-SkipHeaderValidation] [<CommonParameters>]\r\n\r\nInvoke-RestMethod [-Uri] <uri> -NoProxy [-Method <WebRequestMethod>] [-FollowRelLink] [-MaximumFollowRelLink <int>] [-ResponseHeadersVariable <string>] [-UseBasicParsing] [-WebSession <WebRequestSession>] [-SessionVariable <string>] [-Credential <pscredential>] [-UseDefaultCredentials] [-CertificateThumbprint <string>] [-Certificate <X509Certificate>] [-SkipCertificateCheck] [-UserAgent <string>] [-DisableKeepAlive] [-TimeoutSec <int>] [-Headers <IDictionary>] [-MaximumRedirection <int>] [-Body <Object>] [-ContentType <string>] [-TransferEncoding <string>] [-InFile <string>] [-OutFile <string>] [-PassThru] [-PreserveAuthorizationOnRedirect] [-SkipHeaderValidation] [<CommonParameters>]\r\n\r\nInvoke-RestMethod [-Uri] <uri> -CustomMethod <string> -NoProxy [-FollowRelLink] [-MaximumFollowRelLink <int>] [-ResponseHeadersVariable <string>] [-UseBasicParsing] [-WebSession <WebRequestSession>] [-SessionVariable <string>] [-Credential <pscredential>] [-UseDefaultCredentials] [-CertificateThumbprint <string>] [-Certificate <X509Certificate>] [-SkipCertificateCheck] [-UserAgent <string>] [-DisableKeepAlive] [-TimeoutSec <int>] [-Headers <IDictionary>] [-MaximumRedirection <int>] [-Body <Object>] [-ContentType <string>] [-TransferEncoding <string>] [-InFile <string>] [-OutFile <string>] [-PassThru] [-PreserveAuthorizationOnRedirect] [-SkipHeaderValidation] [<CommonParameters>]\r\n\r\nInvoke-RestMethod [-Uri] <uri> -CustomMethod <string> [-FollowRelLink] [-MaximumFollowRelLink <int>] [-ResponseHeadersVariable <string>] [-UseBasicParsing] [-WebSession <WebRequestSession>] [-SessionVariable <string>] [-Credential <pscredential>] [-UseDefaultCredentials] [-CertificateThumbprint <string>] [-Certificate <X509Certificate>] [-SkipCertificateCheck] [-UserAgent <string>] [-DisableKeepAlive] [-TimeoutSec <int>] [-Headers <IDictionary>] [-MaximumRedirection <int>] [-Proxy <uri>] [-ProxyCredential <pscredential>] [-ProxyUseDefaultCredentials] [-Body <Object>] [-ContentType <string>] [-TransferEncoding <string>] [-InFile <string>] [-OutFile <string>] [-PassThru] [-PreserveAuthorizationOnRedirect] [-SkipHeaderValidation] [<CommonParameters>]\r\n```\r\n\r\nIt's already hard to figure out what to do (and this doesn't include the new capabilities @markekraus is adding).  Thinking out loud here.  The current syntax should look more like:\r\n\r\n```none\r\nInvoke-RestMethod [-Uri] <uri> [-Method <method> |  -CustomMethod <string>] [-FollowLink [-MaximumFollowLink <int>]] [-ResponseHeadersVariable <string> [-UseBasicParsing] [-SessionVariable] [-WebSession <session> | -Credential <cred> | -UseDefaultCredentials | -CertificateThumbprint <string> | -Certificate <cert>] [-SkipCertificateCheck] [-UserAgent <string>] [-DisableKeepAlive]...\r\n```\r\n\r\nAnd if we simplify it a bit and not including some of the params to keep it smaller:\r\n\r\n```none\r\nInvoke-RestMethod [-Uri] <uri> [{Method}] [-FollowLink [-MaxFollowLink]] [{Auth}] ...\r\n{Method} = -Method | -CustomMethod\r\n{Auth} = -WebSession | -Credential | -UseDefaultCredentials | -CertThumb | -Cert\r\n```\r\n\r\nand we turn this into some sort of declarative syntax:\r\n\r\n```none\r\nInvoke-RestMethod [Uri] [Method] [Auth] [FollowLink] ...\r\nUri\r\n    [-Uri] <uri>\r\nAuth\r\n    [-WebSession <session>]\r\n    [-Credential <cred>]\r\n    [-UseDefaultCredentials]\r\n    [-CertThumb <string>]\r\n    [-Cert <string]\r\n```\r\n\r\nSo how to put this into code?  (has to work for both C# and script)",
      "created_at": "2017-10-20T19:40:25Z",
      "updated_at": "2017-10-22T00:16:41Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "It's almost like the entire parameter system would need to be redone or at least a new one added in parallel with the existing one.  Part of the problem is that the existing system is too cumbersome. but completely breaking it seems almost a like non-starter. hmmm",
      "created_at": "2017-10-20T21:10:33Z",
      "updated_at": "2017-10-20T21:10:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We could borrow method overloads idea from C#. In this case, we only need to find the appropriate entry point into the cmdlet from several.",
      "created_at": "2017-10-21T19:50:44Z",
      "updated_at": "2017-10-21T19:50:44Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov I'm not sure how you apply the same logic to exclusive parameters of the same type with different names. I have hard time visualizing this as being less work for the user. You'd need to basically define each unique binding signature. If you have 3 parameter sets and 3 exclusive sets, that a lot unique signatures to define. But maybe I don't have a good idea of what you are proposing. What is some mock code how how that would look from a user perspective?",
      "created_at": "2017-10-21T19:58:37Z",
      "updated_at": "2017-10-21T20:06:24Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Parameter sets already are the equivalent of C# overloads.\r\n\r\nSome random thoughts:\r\n* A fully general solution might not be necessary or easy to express\r\n* A reasonable goal is to express the most common cases\r\n\r\nA not fully formed idea - instead of specifying mutually exclusive parameter, how about expressing compatible parameter sets?\r\n\r\n```powershell\r\n\r\n[CmdletBinding()]\r\n[CompatibleParameterSets(\"A\", @(\"C\", \"D\"))]\r\n[CompatibleParameterSets(\"B\", @(\"C\", \"D\"))]\r\nparam(\r\n    [Parameter(ParameterSetName=\"A\"))]$A,\r\n    [Parameter(ParameterSetName=\"B\"))]$B,\r\n    [Parameter(ParameterSetName=\"C\"))]$C,\r\n    [Parameter(ParameterSetName=\"D\"))]$D\r\n)\r\n```\r\n\r\nSo this says:\r\n* A is compatible with C and D\r\n* B is also compatible with C and D\r\nIf we assume this is transitive, then C is compatible with both A and B, and the same for D.\r\n\r\nThis gives us a syntax like: `cmd [-A | -B] [-C | -D]`\r\n\r\nIn terms of the implementation - after binding is finished, it's possible we won't have a single parameter set, but that's OK because we now know which parameter sets are compatible.\r\n\r\nI wonder if this idea helps reduce the need for a large number of `[Parameter]` attributes.\r\n",
      "created_at": "2017-10-21T21:01:51Z",
      "updated_at": "2017-10-21T21:01:51Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr I'm trying to wrap my brain around how to use that in the instance where you have, say, 2 governing parameter sets, but then you have 2 sets of mutex parameters\r\n\r\nThere is set A and set B. Set A includes normal parameters A1 and A2. Set B includes normal parameters B1 and B2. There is a C and D which are mutex but belong to both A and B sets. There is also E and F which are mutex and can belobn to both A and B sets.\r\n\r\nthe syntax is something like\r\n\r\n```none\r\n-A [-A1] [-A2] [-C | -D] [-E | -F]\r\n-B [-B1] [-B2] [-C | -D] [-E | -F]\r\n```\r\n\r\nWith my equally not-fully-formed proposal, it would look like this:\r\n\r\n```powershell\r\n[CmdletBinding()]\r\nparam (\r\n    [Parameter(ParameterSetName=\"A\")]$A,\r\n    [Parameter(ParameterSetName=\"A\")]$A1,\r\n    [Parameter(ParameterSetName=\"A\")]$A2,\r\n\r\n    [Parameter(ParameterSetName=\"B\")]$B,\r\n    [Parameter(ParameterSetName=\"B\")]$B1,\r\n    [Parameter(ParameterSetName=\"B\")]$B2,\r\n\r\n    [Parameter(ParameterSetName=\"A\", ParameterMutexName='CD')]\r\n    [Parameter(ParameterSetName=\"B\", ParameterMutexName='CD')]\r\n    $C,\r\n\r\n    [Parameter(ParameterSetName=\"A\", ParameterMutexName='CD')]\r\n    [Parameter(ParameterSetName=\"B\", ParameterMutexName='CD')]\r\n    $D,\r\n\r\n    [Parameter(ParameterSetName=\"A\", ParameterMutexName='EF')]\r\n    [Parameter(ParameterSetName=\"B\", ParameterMutexName='EF')]\r\n    $E,\r\n\r\n    [Parameter(ParameterSetName=\"A\" ParameterMutexName='EF')]\r\n    [Parameter(ParameterSetName=\"B\" ParameterMutexName='EF')]\r\n    $F\r\n)\r\n```",
      "created_at": "2017-10-21T21:40:51Z",
      "updated_at": "2017-10-21T21:41:31Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "If only this were possible:\r\n\r\n```powershell\r\n[CmdletSyntax(\"\r\n-A [-A1] [-A2] [-C | -D] [-E | -F]\r\n-B [-B1] [-B2] [-C | -D] [-E | -F]\r\n\")]\r\n[CmdletBinding()]\r\nParam(\r\n    $A, $B, $C, $D, $E, $F\r\n)\r\n```",
      "created_at": "2017-10-21T21:44:50Z",
      "updated_at": "2017-10-21T21:44:50Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@markekraus that's what I was moving towards as it's much easier to read and modify although it means introducing a new syntax.",
      "created_at": "2017-10-22T00:16:54Z",
      "updated_at": "2017-10-22T00:16:54Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT I really like the idea. It separates parameter binding definition from parameter definition and it works like a nice in-code self-documentation. But, yea, a new syntax and a new parser. I have no clue where to even begin implementing that or how to make it coalesce with the existing `[Parameter()]` attribute.  I'm assuming it would be tricky and/or complex to implement",
      "created_at": "2017-10-22T00:27:13Z",
      "updated_at": "2017-10-22T00:27:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think we've already caught the main idea - to separate parameter definitions from parameter set definitions.\r\nAs I said above we can consider Json, Yaml, BNF dialect or C# patterns for new parameter set syntax.\r\n\r\n_I believe we should sample all these options._\r\n\r\nFor C# like pattern:\r\n```poweshell\r\nParameterSet($A, $A1=0, $A2=1, $C=2, $E=4)\r\nParameterSet($A, $A1=0, $A2=1, $D=3, $E=4)\r\nParameterSet($A, $A1=0, $A2=1, $C=2, $F=5)\r\nParameterSet($A, $A1=0, $A2=1, $D=3, $E=5)\r\n```\r\nAs you can see, the definition will be long. Its advantage is that it is a full general solution, easy to compose, easy to read, and easy to parse. Variations - we can add explicit mandatory attribute and move defaults in parameter definitions.\r\n",
      "created_at": "2017-10-22T17:28:46Z",
      "updated_at": "2017-10-22T17:28:46Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov From your syntax I have no clue what is a mandatory vs optional parameter. I also don't quite understand what the `=0` and `=1` etc mean. Is that position? \r\n\r\nMy biggest dislike of that is that it requires a ton of definitions. I'm just thinking of the 3 pages worth of definitions that would be needed to implement that on the web cmdlets. It also makes it really hard to track where you are missing a combination when working with complex sets with multiple mutually exclusive parameters. Take for example `-InFile`, `-Body`, and (probably) `-Form`. those three make up a single mutex set while `-Credential` `-UseDefaultCredentails` `-Authentication OAuth` make up another mutex set both of these muterx sets can be used in just about all parameter sets. That is a ton of definitions and easy to miss one.",
      "created_at": "2017-10-22T18:15:50Z",
      "updated_at": "2017-10-22T18:16:28Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov what would a JSON solution look like?\r\n\r\nMaybe this?\r\n\r\n```json\r\n{\r\n  \"AllParameterSets\": {\r\n    \"MandatoryParameters\": [],\r\n    \"OptionalParameter\": [\r\n      \"C\",\r\n      \"D\",\r\n      \"E\",\r\n      \"F\"\r\n    ],\r\n    \"ParameterMutexGroups\": {\r\n      \"CD\": [\r\n        \"C\",\r\n        \"D\"\r\n      ],\r\n      \"EF\": [\r\n        \"E\",\r\n        \"F\"\r\n      ]\r\n    }\r\n  },\r\n  \"ParameterSetA\": {\r\n    \"MandatoryParameters\": [\r\n      \"A\"\r\n    ],\r\n    \"OptionalParameters\": [\r\n      \"A1\",\r\n      \"A2\"\r\n    ],\r\n    \"ParameterMutexGroups\": {}\r\n  },\r\n  \"ParameterSetB\": {\r\n    \"MandatoryParameters\": [\r\n      \"B\"\r\n    ],\r\n    \"OptionalParameters\": [\r\n      \"B1\",\r\n      \"B2\"\r\n    ],\r\n    \"ParameterMutexGroups\": {}\r\n  }\r\n}\r\n```\r\n\r\n```powershell\r\n[ordered]@{\r\n    AllParameterSets = [ordered]@{\r\n        MandatoryParameters = @()\r\n        OptionalParameter = @('C','D','E','F')\r\n        ParameterMutexGroups = [ordered]@{\r\n            CD = @('C', 'D')\r\n            EF = @('E', 'F')\r\n        }\r\n    }\r\n    ParameterSetA = [ordered]@{\r\n        MandatoryParameters = @('A')\r\n        OptionalParameters = @('A1', 'A2')\r\n        ParameterMutexGroups = @{}\r\n    }\r\n    ParameterSetB = [ordered]@{\r\n        MandatoryParameters = @('B')\r\n        OptionalParameters = @( 'B1', 'B2')\r\n        ParameterMutexGroups= @{}\r\n    }\r\n} | ConvertTo-Json -Depth 4\r\n```",
      "created_at": "2017-10-22T18:36:48Z",
      "updated_at": "2017-10-22T18:44:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@markekraus It is full C# pattern. Optional parameters has explicit defaults.\r\n\r\n>My biggest dislike of that is that it requires a ton of definitions\r\n\r\nYes. Currently we can be short because we can skip silently many combinations. The side effect - the user is completely unclear what is acceptable until it examines the cmdlet description and tests all functionals. \r\nCan we be short with new proposed syntax? (This is true for any _new_ syntax!). Yes. We can only specify which variants to use. For others, the user will receive an error message automatically. We can omit the parameters that are used in any combination.\r\n\r\n>That is a ton of definitions and easy to miss one.\r\n\r\nThe cmdlet author cannot miss because he is making the code. The user cannot miss what he is looking for because it is explicitly presented, rather than hidden in a cunningly encoded form and is not implied in the implementation code that he does not see.\r\nNow we're seeing something similar in the documentation that shows us parameter sets and we can choose the one we want. Nothing changes in this sense.\r\n",
      "created_at": "2017-10-22T18:47:02Z",
      "updated_at": "2017-10-22T18:47:02Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Yaml example.\r\n\r\n```yaml\r\n\"AllParameterSets\":\r\n  \"MandatoryParameters\": []\r\n  \"OptionalParameters\": [\"C\", \"D\", \"E\", \"F\"]\r\n  \"ParameterMutexGroups\":\r\n    \"CD\": [\"C\", \"D\"]\r\n    \"EF\": [\"E\", \"F\"]\r\n\"ParameterSetA\":\r\n  \"MandatoryParameters\": [\"A\"]\r\n  \"OptionalParameters\": [\"A1\", \"A2\"]\r\n  \"ParameterMutexGroups\": []\r\n\"ParameterSetB\":\r\n  \"MandatoryParameters\": [\"B\"]\r\n  \"OptionalParameters\": [\"B1\", \"B2\"]\r\n  \"ParameterMutexGroups\": []\r\n```",
      "created_at": "2017-10-22T18:53:46Z",
      "updated_at": "2017-10-22T18:53:46Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "> It is full C# pattern. \r\n\r\nForgive me... I have no clue what that is (reminder that I'm now only 8 months into C# \ud83d\ude09 ).\r\n\r\n> The cmdlet author cannot miss because he is making the code.\r\n\r\nSure they can. Just try using your syntax for the web cmdlets.. You will likely have well over 100 definitions. You are definitely going to miss one. I have a pretty deep understanding of these cmdlets and I'm not confident I wouldn't miss one.\r\n\r\n",
      "created_at": "2017-10-22T18:57:15Z",
      "updated_at": "2017-10-22T18:57:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> You will likely have well over 100 definitions.\r\n\r\nThis problem exists for any new syntax. Any optimization found for one will apply to the other. :-)\r\n\r\nThanks for Yaml sample.",
      "created_at": "2017-10-22T19:01:41Z",
      "updated_at": "2017-10-22T19:02:05Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "> This problem exists for any new syntax\r\n\r\n@iSazonov It doesn't have to. The JSON and YAML options pull of that level of complexity with way less code.",
      "created_at": "2017-10-22T19:07:15Z",
      "updated_at": "2017-10-22T19:07:15Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I'm really liking the \"PowerShell figures it out from your syntax\" approach - and my primary reasoning - it should be an inverse function - meaning we might have a verbose way to specify the same with attributes, but nobody would use that going forward.",
      "created_at": "2017-10-23T18:33:43Z",
      "updated_at": "2017-10-23T18:33:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Original C# overloads look cumbersome.\r\n```C#\r\n[String]::Format\r\n\r\nOverloadDefinitions\r\n-------------------\r\nstatic string Format(string format, System.Object arg0)\r\nstatic string Format(string format, System.Object arg0, System.Object arg1)\r\nstatic string Format(string format, System.Object arg0, System.Object arg1, System.Object arg2)\r\nstatic string Format(string format, Params System.Object[] args)\r\nstatic string Format(System.IFormatProvider provider, string format, System.Object arg0)\r\nstatic string Format(System.IFormatProvider provider, string format, System.Object arg0, System.Object arg1)\r\nstatic string Format(System.IFormatProvider provider, string format, System.Object arg0, System.Object arg1, System.Object arg2)\r\nstatic string Format(System.IFormatProvider provider, string format, Params System.Object[] args)\r\n```\r\nAfter we remove types it looks simpler.:\r\n```powershell\r\nOverloadDefinitions\r\n-------------------\r\nFormat(format, arg0)\r\nFormat(format, arg0, arg1)\r\nFormat(format, arg0, arg1, arg2)\r\nFormat(format, args)\r\nFormat(provider, format, arg0)\r\nFormat(provider, format, arg0, arg1)\r\nFormat(provider, format, arg0, arg1, arg2)\r\nFormat(provider, format, args)\r\n```\r\n\r\nFor example above signatures will be ('+' - optional parameter):\r\n```powershell\r\n$A, +$A1, +$A2, +$C, +$E\r\n$A, +$A1, +$A2, +$C, +$F\r\n$A, +$A1, +$A2, +$D, +$E\r\n$A, +$A1, +$A2, +$D, +$F\r\n\r\n$B, +$B1, +$B2, +$C, +$E\r\n$B, +$B1, +$B2, +$C, +$F\r\n$B, +$B1, +$B2, +$D, +$E\r\n$B, +$B1, +$B2, +$D, +$F\r\n```\r\nFor Add-Member cmdlet ($PassThru we can exclude at all):\r\n```powershell\r\n$InputObject, $TypeName, +$PassThru\r\n$InputObject, $MemberType, $Name, +$Force, +$PassThru, +$SecondValue, +TypeName, +$Value\r\n$InputObject, $NotePropertyMembers, +$Force, +$PassThru, +$TypeName\r\n$InputObject, $NotePropertyName, $NotePropertyValue, +$Force, +$PassThru, +$TypeName\r\n```",
      "created_at": "2017-10-24T12:36:21Z",
      "updated_at": "2017-10-24T12:36:21Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "To add to the problems... currently ValueFromPipeline, ValueFromPipelineByPropertyName, DontShow, etc can be configured per parameter set how do we jive that with any of the new syntax proposals? more sigils? do we not?",
      "created_at": "2017-10-24T17:01:25Z",
      "updated_at": "2017-10-24T17:01:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "For general solution we should allow set attributes in parametersets. This allows us to use the exact type to InputObject.",
      "created_at": "2017-10-24T17:49:22Z",
      "updated_at": "2017-11-20T03:54:03Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Related to https://github.com/PowerShell/PowerShell/pull/5435, we should provide the user with more specific error message about why they couldn't use two or more parameters together because they are mutually exclusive (and additionally a detailed error if insufficient parameters are provided to resolve a parameter set)",
      "created_at": "2017-11-19T19:09:59Z",
      "updated_at": "2017-11-19T19:09:59Z"
    }
  ],
  "created_at": "2017-10-19T22:49:17Z",
  "labels": [
    "Issue-Enhancement",
    "Issue-Discussion"
  ],
  "number": 5175,
  "state": "open",
  "title": "Parameters Should Support Mutual Exclusion Natively",
  "updated_at": "2017-11-20T03:54:03Z"
}