{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7914",
  "author": "IISResetMe",
  "body": "<!--\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nI was curious to find [this reddit post](https://www.reddit.com/r/PowerShell/comments/9kj7w3/addtype_path_in_powershell_61_requires_write/) describing how `Add-Type -Path ./path/to/sourcecode.cs` fails with `Access to the path './path/to/sourcecode.cs' is denied` even though the process owner has read access to the file. \r\n\r\nUpon granting _write_ access to the file, the issue resolves.\r\n\r\nSteps to reproduce\r\n------------------\r\nI've only tested this on Windows 10:\r\n```powershell\r\n# Create empty source file\r\n$srcFile = Get-Item $([System.IO.Path]::GetTempFileName()) |Rename-Item -NewName {$_.BaseName + '.cs'} -PassThru\r\n# Write source code to file\r\n@'\r\nusing System;\r\nnamespace TestAddType {\r\n  public class TestClass {}\r\n}\r\n'@ |Set-Content $srcFile -Encoding UTF8\r\n# Mark source file ReadOnly\r\n$srcFile.Attributes += 'ReadOnly'\r\n# Attempt to compile from source\r\nAdd-Type -Path $srcFile.FullName\r\n# Output new type literal\r\n[TestAddType.TestClass]\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     False    TestClass                                System.Object\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nAdd-Type : Access to the path 'C:\\Users\\iisresetme\\AppData\\Local\\Temp\\tmp2A59.cs' is denied.\r\nAt line:1 char:1\r\n+ Add-Type -Path $srcFile.FullName\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : NotSpecified: (:) [Add-Type], UnauthorizedAccessException\r\n+ FullyQualifiedErrorId : System.UnauthorizedAccessException,Microsoft.PowerShell.Commands.AddTypeCommand\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0-57-g0f0c46dfe51440470b86f67b258e14aea32fa0aa\r\nOS                             Microsoft Windows 10.0.17134 \r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2018-10-03T03:36:11Z",
  "comments": [
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "[`git blame`](https://github.com/PowerShell/PowerShell/blame/86469bda33c679d82d62e20019656e4e500c9edf/src/Microsoft.PowerShell.Commands.Utility/commands/utility/AddType.cs#L968) lead me to #6141, in which the mechanism for reading the text from source files is changed from `StreamReader.ReadAllText()` to opening a `FileStream`, without specifying `FileAccess` attributes in the constructor.\r\n\r\nUnfortunately, a call to `new FileStream(path, FileMode.Open)` will result in the resulting file stream opening the target file in `FileAccess.ReadWrite` mode, which seems unnecessary.",
      "created_at": "2018-10-01T20:43:21Z",
      "updated_at": "2018-10-01T20:43:21Z"
    },
    {
      "author": "thezim",
      "author_association": "CONTRIBUTOR",
      "body": "Should we be using a standard FileStream constructor for reading files? This [constructor](https://docs.microsoft.com/en-us/dotnet/api/system.io.filestream.-ctor?view=netcore-2.1#System_IO_FileStream__ctor_System_String_System_IO_FileMode_System_IO_FileAccess_System_IO_FileShare_) was used in #7676 which allowed multiple read access. Can't see why multiple read access should be disallowed by default.",
      "created_at": "2018-10-01T23:23:42Z",
      "updated_at": "2018-10-01T23:23:42Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "@thezim good point, fixed that as well. ",
      "created_at": "2018-10-02T10:59:28Z",
      "updated_at": "2018-10-02T10:59:28Z"
    }
  ],
  "created_at": "2018-10-01T20:39:48Z",
  "number": 7914,
  "state": "closed",
  "title": "Bug: Add-Type needs write-access when compiling from source",
  "updated_at": "2018-10-03T07:37:55Z"
}