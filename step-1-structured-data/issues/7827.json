{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7827",
  "author": "iyoumans",
  "body": "Updating from 6.0.4 to 6.10 breaks Install-Module and Update-Module for me as it cannot connect to PowerShell Gallery.\r\n\r\nSteps to reproduce\r\n------------------\r\nTried to run Update-Module in version 6.10.\r\n\r\nExpected behavior\r\n-----------------\r\nExpect it to connect to PowerShell Gallery and update the module\r\n\r\nActual behavior\r\n---------------\r\nSee errors below. Reverting to version 6.0.4 fixes the issue.\r\n```Code\r\n# Update-Module AzureRM.Netcore\r\nGet-PSGalleryApiAvailability : PowerShell Gallery is currently unavailable.  Please try again later.\r\nAt C:\\program files\\powershell\\6\\Modules\\PowerShellGet\\PSModule.psm1:12941 char:13\r\n+             Get-PSGalleryApiAvailability -Repository (Get-SourceName  ...\r\n+             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidOperation: (:) [Get-PSGalleryApiAvailability], InvalidOperationException\r\n+ FullyQualifiedErrorId : PowerShellGalleryUnavailable,Get-PSGalleryApiAvailability\r\n\r\nWARNING: Unable to resolve package source 'https://www.powershellgallery.com/api/v2/'.\r\nPackageManagement\\Install-Package : No match was found for the specified search criteria and module name 'AzureRM.Netcore'. Try Get-PSRepository to see all available registered module repositories.\r\nAt C:\\program files\\powershell\\6\\Modules\\PowerShellGet\\PSModule.psm1:12955 char:20\r\n+ ...           $sid = PackageManagement\\Install-Package @PSBoundParameters\r\n+                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : ObjectNotFound: (Microsoft.Power....InstallPackage:InstallPackage) [Install-Package], Exception\r\n+ FullyQualifiedErrorId : NoMatchFoundForCriteria,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n# $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0\r\nOS                             Microsoft Windows 10.0.14393\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n",
  "closed_at": "2019-02-19T23:40:18Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "`PowerShell Gallery is currently unavailable` suggests a temporary, server-side issue, so the gallery may simply have been down while you tried.\r\n\r\nI just tried, and didn't see the problem.\r\n",
      "created_at": "2018-09-20T13:46:08Z",
      "updated_at": "2018-09-20T13:46:08Z"
    },
    {
      "author": "iyoumans",
      "author_association": "NONE",
      "body": "I just retried this: I installed 6.1.0, got the error. I uninstalled it, installed 6.0.4, worked fine. Then I re-installed 6.1.0 and got the problem. So it's repeatable (for me anyway).",
      "created_at": "2018-09-20T14:20:13Z",
      "updated_at": "2018-09-20T14:20:13Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I should have read _both_ error/warning messages :)\r\n\r\nThe only obvious difference between your setup and mine is the specific Windows 10 version (mine is 10.0.17134).\r\n\r\nA few more things to try (just guesses - I'll leave it to someone more knowledgeable in this area to take over from here):\r\n\r\n* I found this re `Unable to resolve package source 'https://www.powershellgallery.com/api/v2/'`: https://vanbrenk.blogspot.com/2017/09/install-module-unable-to-resolve.html\r\n\r\n* If you open `https://www.powershellgallery.com/api/v2/` in a browser, does it work? Does  \r\n`Invoke-WebRequest https://www.powershellgallery.com/api/v2/` work? Does `Get-PSRepository` return what you'd expect?\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-09-20T14:46:46Z",
      "updated_at": "2018-09-20T14:46:46Z"
    },
    {
      "author": "edyoung",
      "author_association": "CONTRIBUTOR",
      "body": "What do you see if you run Get-PSRepository? Does Unregister-PSRepository Psgallery ; Register-PSRepository -Default make any difference?",
      "created_at": "2018-09-20T17:26:21Z",
      "updated_at": "2018-09-20T17:26:21Z"
    },
    {
      "author": "iyoumans",
      "author_association": "NONE",
      "body": "The Get looks good. Unregister/Register didn't work either.\r\n\r\n```PowerShell\r\nPS C:\\Users\\iyoumans> Get-PSRepository\r\n\r\nName                      InstallationPolicy   SourceLocation\r\n----                      ------------------   --------------\r\nPSGallery                 Untrusted            https://www.powershellgallery.com/api/v2\r\n```\r\n\r\nTried to install Azure module and got this error:\r\n```PowerShell\r\nPS C:\\Users\\iyoumans> Install-Module -Name AzureRM\r\nWARNING: Unable to resolve package source 'https://www.powershellgallery.com/api/v2'.\r\nPackageManagement\\Install-Package : No match was found for the specified search criteria and module name 'AzureRM'. Try Get-PSRepository to see all available registered module repositories.\r\nAt C:\\program files\\powershell\\6\\Modules\\PowerShellGet\\PSModule.psm1:9491 char:21\r\n+ ...          $null = PackageManagement\\Install-Package @PSBoundParameters\r\n+                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : ObjectNotFound: (Microsoft.Power....InstallPackage:InstallPackage) [Install-Package], Exception\r\n+ FullyQualifiedErrorId : NoMatchFoundForCriteria,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage\r\n```",
      "created_at": "2018-09-20T17:54:03Z",
      "updated_at": "2018-09-20T17:54:03Z"
    },
    {
      "author": "RichardSiddaway",
      "author_association": "NONE",
      "body": "I've successfully run install-module azurerm on Windows 10 build 17134 with PowerShell v6.1.  As build 14393 is 3 updates back could you consider updating your Windows machine/",
      "created_at": "2018-09-20T20:35:20Z",
      "updated_at": "2018-09-20T20:35:20Z"
    },
    {
      "author": "thezim",
      "author_association": "CONTRIBUTOR",
      "body": "@iyoumans You also might look at your TLS setting. Your OS might have some of them disabled by default. Not sure if the default protocol under 6.1 has changed since 6.0.x /cc @markekraus. .Net Core version did change between these versions which PowerShell Core is build against.\r\n\r\nYou can try each of these so see if all protocols are working.\r\n\r\n```powershell\r\nInvoke-WebRequest -Uri https://www.powershellgallery.com/api/v2 -SslProtocol Tls\r\nInvoke-WebRequest -Uri https://www.powershellgallery.com/api/v2 -SslProtocol Tls1\r\nInvoke-WebRequest -Uri https://www.powershellgallery.com/api/v2 -SslProtocol Tls12\r\n```\r\n\r\n\r\n",
      "created_at": "2018-09-20T23:30:56Z",
      "updated_at": "2018-09-20T23:30:56Z"
    },
    {
      "author": "iyoumans",
      "author_association": "NONE",
      "body": "See my results below:\r\n\r\n```PowerShell\r\nPS C:\\Users\\iyoumans> Invoke-WebRequest -Uri https://www.powershellgallery.com/api/v2 -SslProtocol Tls\r\nInvoke-WebRequest : The requested name is valid, but no data of the requested type was found\r\nAt line:1 char:1\r\n+ Invoke-WebRequest -Uri https://www.powershellgallery.com/api/v2 -SslP ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidOperation: (Method: GET, Re...rShell/6.1.0\r\n}:HttpRequestMessage) [Invoke-WebRequest], HttpRequestException\r\n+ FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand\r\nPS C:\\Users\\iyoumans> Invoke-WebRequest -Uri https://www.powershellgallery.com/api/v2 -SslProtocol Tls1\r\nInvoke-WebRequest : Cannot bind parameter 'SslProtocol'. Cannot convert value \"Tls1\" to type \"Microsoft.PowerShell.Commands.WebSslProtocol\". Error: \"The identifier name Tls1 cannot be processed because it is either too similar or identical to the following enumerator names: Tls11, Tls12. Use a more specific identifier name.\"\r\nAt line:1 char:78\r\n+ ... quest -Uri https://www.powershellgallery.com/api/v2 -SslProtocol Tls1\r\n+                                                                      ~~~~\r\n+ CategoryInfo          : InvalidArgument: (:) [Invoke-WebRequest], ParameterBindingException\r\n+ FullyQualifiedErrorId : CannotConvertArgumentNoMessage,Microsoft.PowerShell.Commands.InvokeWebRequestCommand\r\n\r\nPS C:\\Users\\iyoumans> Invoke-WebRequest -Uri https://www.powershellgallery.com/api/v2 -SslProtocol Tls12\r\nInvoke-WebRequest : The requested name is valid, but no data of the requested type was found\r\nAt line:1 char:1\r\n+ Invoke-WebRequest -Uri https://www.powershellgallery.com/api/v2 -SslP ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidOperation: (Method: GET, Re...rShell/6.1.0\r\n}:HttpRequestMessage) [Invoke-WebRequest], HttpRequestException\r\n+ FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand\r\n```\r\n\r\nThere must be some machine or enterprise configuration that is messing me up, because it is affecting my co-workers as well. Thanks for your help.",
      "created_at": "2018-09-21T10:57:24Z",
      "updated_at": "2018-09-21T10:57:24Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iyoumans:\r\n\r\nIt may be a DNS issue; possibly relevant information [in this SO answer](https://stackoverflow.com/a/29531561/45375)\r\n\r\nTo narrow the problem down, see if you can get a normal response by using the IP address in the URL (`40.87.85.101` is what I get for `ping www.powershellgallery.com`):\r\n\r\n```powershell\r\nInvoke-WebRequest -Uri https://40.87.85.101/api/v2 -SslProtocol Tls -SkipCertificateCheck\r\n```\r\n",
      "created_at": "2018-09-21T14:36:09Z",
      "updated_at": "2018-09-21T14:36:09Z"
    },
    {
      "author": "iyoumans",
      "author_association": "NONE",
      "body": "Here's with the IP. Keep in mind that on my same machine, Windows PowerShell functions just fine, so I don't see how it could be a DNS issue?\r\n\r\n```PowerShell\r\nPS C:\\Users\\iyoumans> Invoke-WebRequest -Uri https://40.87.85.101/api/v2 -SslProtocol Tls -SkipCertificateCheck\r\nInvoke-WebRequest : No connection could be made because the target machine actively refused it\r\nAt line:1 char:1\r\n+ Invoke-WebRequest -Uri https://40.87.85.101/api/v2 -SslProtocol Tls - ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidOperation: (Method: GET, Re...rShell/6.1.0\r\n}:HttpRequestMessage) [Invoke-WebRequest], HttpRequestException\r\n+ FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand\r\n```",
      "created_at": "2018-09-21T14:43:59Z",
      "updated_at": "2018-09-21T14:45:42Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I'm out of my depth here, but my guess is that  your / your organization's firewall configuration / DNS configuration / proxy-server configuration may be the problem - all of which are not directly related to PowerShell.",
      "created_at": "2018-09-21T15:33:34Z",
      "updated_at": "2018-09-21T15:33:34Z"
    },
    {
      "author": "iyoumans",
      "author_association": "NONE",
      "body": "Thanks for your suggestions anyway - it's a place to start.",
      "created_at": "2018-09-21T15:36:13Z",
      "updated_at": "2018-09-21T15:36:13Z"
    },
    {
      "author": "megamorf",
      "author_association": "CONTRIBUTOR",
      "body": "I'm affected by this as well.\r\n\r\n## Setup\r\n\r\n```\r\nPS /home/megamorf> $PSVersionTable                                                                          \r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0\r\nOS                             Linux 4.18.11-93.current #1 SMP PREEMPT Tue Oct 2 00:24:40 UTC 2018\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nInstalled as snap:\r\n\r\n```\r\nPS /home/megamorf> snap list powershell\r\nName        Version  Rev  Tracking  Publisher              Notes\r\npowershell  6.1.0    11   stable    microsoft-powershell\u2713  classic\r\n```\r\n\r\n## Troubleshooting\r\n\r\nThe Gallery is not available and cannot be registered:\r\n\r\n```\r\nPS /home/megamorf> Get-PSRepository\r\nWARNING: Unable to find module repositories.\r\nPS /home/megamorf> Register-PSRepository -Default -Verbose\r\nVERBOSE: Performing the operation \"Register Module Repository.\" on target \"Module Repository 'PSGallery' () in provider 'PowerShellGet'.\".\r\nPS /home/megamorf> Get-PSRepository\r\nWARNING: Unable to find module repositories.\r\n```\r\n\r\nI tried the PowerShellGet version that ships with PS as well as the latest stable release from Github:\r\n\r\n```\r\nPS /home/megamorf> Get-Module PowerShellGet -ListAvailable\r\n\r\n\r\n    Directory: /home/megamorf/.local/share/powershell/Modules\r\n\r\n\r\nModuleType Version    Name                                PSEdition ExportedCommands\r\n---------- -------    ----                                --------- ----------------\r\nScript     2.0.1      PowerShellGet                       Desk      {Find-Command, Find-DSCResource, Find-Module, Find-RoleCapability...}\r\n\r\n\r\n    Directory: /snap/powershell/11/opt/powershell/Modules\r\n\r\n\r\nModuleType Version    Name                                PSEdition ExportedCommands\r\n---------- -------    ----                                --------- ----------------\r\nScript     1.6.7      PowerShellGet                       Desk      {Find-Command, Find-DSCResource, Find-Module, Find-RoleCapability...}\r\n```\r\n\r\nApparently something is wrong with the certificate store/trust. Querying the v2 endpoint of the Gallery by IP works:\r\n\r\n```\r\nPS /home/megamorf> Invoke-WebRequest -Uri https://40.87.85.101/api/v2 -SslProtocol Tls12 -SkipCertificateCheck\r\n\r\nStatusCode        : 200                                                                                                                                                  StatusDescription : OK                                                                                                                                                   \r\nContent           : <?xml version=\"1.0\" encoding=\"utf-8\"?><service xml:base=\"https://40.87.85.101/api/v2\" xmlns=\"http://www.w3.org/2007/app\" \r\n                    xmlns:atom=\"http://www.w3.org/2005/Atom\"><workspace><atom:title type=\"text\">Def...\r\nRawContent        : HTTP/1.1 200 OK\r\n                    Cache-Control: no-cache\r\n                    Pragma: no-cache\r\n                    Server: Microsoft-IIS/10.0\r\n                    X-CorrelationId: 80007c2b-0007-e000-b63f-84710c7967bb\r\n                    DataServiceVersion: 3.0\r\n                    Content-Security-Policy: frame-ancesto...\r\nHeaders           : {[Cache-Control, System.String[]], [Pragma, System.String[]], [Server, System.String[]], [X-CorrelationId, System.String[]]...}\r\nImages            : {}\r\nInputFields       : {}\r\nLinks             : {}\r\nRawContentLength  : 325\r\nRelationLink      : {}\r\n```\r\n\r\nBut with TLS1.2 it does not work:\r\n\r\n```\r\nPS /home/megamorf> Invoke-WebRequest -Uri https://www.powershellgallery.com/api/v2 -SslProtocol Tls12\r\nInvoke-WebRequest : The remote certificate is invalid according to the validation procedure.\r\nAt line:1 char:1\r\n+ Invoke-WebRequest -Uri https://www.powershellgallery.com/api/v2 -SslP ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidOperation: (Method: GET, Re...rShell/6.1.0\r\n}:HttpRequestMessage) [Invoke-WebRequest], HttpRequestException\r\n+ FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand\r\n\r\n```\r\n\r\nI assume the ca-certificates provided by the snap environment are not up to date/missing certificates to complete the ca chain of trust.",
      "created_at": "2018-10-08T15:36:09Z",
      "updated_at": "2018-10-08T15:36:09Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "These are PowerShellGet issues.  You may find support in the https://github.com/powershell/powershellget repo where that team hangs out.",
      "created_at": "2018-10-09T01:29:21Z",
      "updated_at": "2018-10-09T01:29:21Z"
    },
    {
      "author": "edyoung",
      "author_association": "CONTRIBUTOR",
      "body": "Happy to try and help, wherever the issue goes ;-) \r\n\r\nI do think this seems more like an environmental issue than something specifically in PowerShellGet. The cert issue above seems similar to https://github.com/PowerShell/PowerShell-Docker/issues/46 but may not be the same problem @iyoumans is hitting earlier in the thread. @megamorf, you could try running curl as suggested in that issue - if that complains about the cert, it seems likely to be the same issue. We did update the cert on the gallery around the time of our update in September, which might be related. The current cert is valid as far as I'm aware and uses the Baltimore root cert. ",
      "created_at": "2018-10-09T04:17:40Z",
      "updated_at": "2018-10-09T04:17:40Z"
    },
    {
      "author": "MartinSGill",
      "author_association": "NONE",
      "body": "I'm seeing the same behaviour from update-module after I upgraded to 6.1. What's strange is that install-module and uninstall-module actually work.\r\n\r\nI can therefore update my modules the long-way around. ",
      "created_at": "2018-10-10T07:41:45Z",
      "updated_at": "2018-10-10T07:41:45Z"
    },
    {
      "author": "nxsharma",
      "author_association": "NONE",
      "body": "$webclient=New-Object System.Net.WebClient\r\n$webclient.Proxy.Credentials = [System.Net.CredentialCache]::DefaultNetworkCredentials\r\n\r\nrun this and then try to reinstall. Most likely it's being blocked by your some internal security mechanism",
      "created_at": "2018-10-15T20:47:03Z",
      "updated_at": "2018-10-15T20:48:04Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "> \r\n> \r\n> $webclient=New-Object System.Net.WebClient\r\n> $webclient.Proxy.Credentials = [System.Net.CredentialCache]::DefaultNetworkCredentials\r\n> \r\n> run this and then try to reinstall\r\n\r\nThis has no effect, I am experiencing the same issue on 6.0.4 and 6.1.0 in my environment. The aforementioned code is in my \"Current User - All Hosts\" profile for powershell 6. The latest version of nuget and powershell get are installed. \r\n\r\nThis is most likely an environmental issue having to do with network policy. I will investigate further in my environment and update here if a solution or verifiable cause is found. ",
      "created_at": "2018-10-15T20:54:42Z",
      "updated_at": "2018-10-15T20:54:42Z"
    },
    {
      "author": "iyoumans",
      "author_association": "NONE",
      "body": "I had already tried that to no effect. I have also tried setting $env:HTTP_PROXY and $env:HTTPS_PROXY to no effect either. Meanwhile, my Windows PowerShell (5.0) environment works fine on the same PC which means it's not a network or proxy issue as far as I can tell.",
      "created_at": "2018-10-16T12:11:11Z",
      "updated_at": "2018-10-16T12:11:11Z"
    },
    {
      "author": "iyoumans",
      "author_association": "NONE",
      "body": "I somewhat solved this issue for myself. The problem was indeed my proxy. In Windows PowerShell, I set the HTTP_PROXY and HTTPS_PROXY environment variables to my proxy URI and that solves my issue. In PowerShell Core this doesn't appear to work. Instead, I passed the -Proxy tag on the Install-Module with the URI of my proxy and that worked. Kind of a pain - does anyone know how I can set and forget the proxy in PowerShell Core?",
      "created_at": "2018-10-16T19:23:13Z",
      "updated_at": "2018-10-16T19:23:13Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iyoumans: See #3112, which offers a workaround - sounds like support for these variables may come in the future, though note that on Unix-like platforms, where case matters, these variables are [commonly _lowercase_ (`http_proxy`, `https_proxy`)](https://unix.stackexchange.com/a/212972/54804).",
      "created_at": "2018-10-16T19:46:23Z",
      "updated_at": "2018-10-16T19:46:23Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "CoreFX supports the following Environment Variables for proxies on Linux and macOS:\r\n\r\n```none\r\nall_proxy\r\nALL_PROXY\r\nhttp_proxy\r\nhttps_proxy\r\nHTTPS_PROXY\r\nno_proxy\r\n```\r\n\r\nhttps://github.com/dotnet/corefx/blob/56d177d8ed94096c13ac14894945899783b1a3df/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpEnvironmentProxy.cs#L93\r\n\r\nNote that it does not support `HTTP_PROXY` or `NO_PROXY`. Protocol specific trumps all. Lower case trumps upper. ",
      "created_at": "2018-10-17T00:52:36Z",
      "updated_at": "2018-10-17T00:52:36Z"
    },
    {
      "author": "thezim",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks @markekraus. We should get this info into the docs. I do see that `Invoke-RestMethod` has fallen behind in some of its parameters as well.\r\n\r\nhttps://github.com/PowerShell/PowerShell-Docs/issues/1665",
      "created_at": "2018-10-17T01:16:15Z",
      "updated_at": "2018-10-17T01:16:32Z"
    },
    {
      "author": "iyoumans",
      "author_association": "NONE",
      "body": "Changing the case of the environment variables didn't do anything for me (I'm on Windows though) - I still have to use the -Proxy switch. It seems the community is aware of the issue, so I'll close this thread.",
      "created_at": "2018-10-17T12:04:14Z",
      "updated_at": "2018-10-17T12:04:14Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iyoumans: \r\n\r\nSorry, I didn't mean to imply that the case would make a difference. On Windows, it never does, because accessing environment variables is always case-insensitive.\r\n\r\nMy understanding of the underlying issues is superficial, but based on what @markekraus said above and the information in #3112, the short of it is: \r\n\r\n* On Unix-like platforms, `Invoke-Webrequest` and `Invoke-RestMethod` - which I _presume_ underlie PowerShell's package management - do not (yet) honor these environment variables, in any case variation, but support may be coming in 6.2.0.  \r\n(I'm unclear on who honors them on Windows.)\r\n\r\n* The safe case to use for these environment variables is _all-lowercase_, on all supported platforms.\r\n\r\n@markekraus, is that a fair summary?\r\n",
      "created_at": "2018-10-17T13:25:09Z",
      "updated_at": "2018-10-17T13:25:09Z"
    },
    {
      "author": "megamorf",
      "author_association": "CONTRIBUTOR",
      "body": "@iyoumans Could you reopen this issue, since I'm facing the exact issue but none of the mentioned solutions have worked for me so far. I'd like to troubleshoot this more thoroughly this weekend and post my results afterwards. If they're conclusive we can close this issue, otherwise investigate further. \r\n\r\nThanks \ud83d\udc4d ",
      "created_at": "2018-10-17T14:13:22Z",
      "updated_at": "2018-10-17T14:13:22Z"
    },
    {
      "author": "iyoumans",
      "author_association": "NONE",
      "body": "Re-opening on request...",
      "created_at": "2018-10-17T14:15:18Z",
      "updated_at": "2018-10-17T14:15:18Z"
    },
    {
      "author": "megamorf",
      "author_association": "CONTRIBUTOR",
      "body": "Okay, I seem to have narrowed down the issue. Among the people affected seem to be some Solus users as well.\r\n\r\n## Issue description\r\n\r\nPowerShell Core is installed as classic snap. The web cmdlets and webclient related actions all fail with the following error message when attempting to connect to TLS protected resources while host OS binaries like curl can connect just fine:\r\n\r\n> The remote certificate is invalid according to the validation procedure.\r\n\r\nThere are two possible workarounds:\r\n\r\n## Option 1\r\n\r\n> I was able to get restore working on my Solus box by first running `export DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER=0`. Once I did that, dotnet restore worked.\r\n>\r\n> Source: https://github.com/dotnet/core/issues/1668#issuecomment-398960685\r\n\r\n## Option 2\r\n\r\n\r\n\r\n>  There's a bit of openssl which has been dormant forever which we are tripping over in some scenarios and we're working through the best fix. In the meantime, you can workaround this by setting the SSL_CERT_FILE to the host OS cert. Setting it to the Snap subsystem also works but that feels funny to me.\r\n>\r\n>```\r\n>export SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt\r\n>export SSL_CERT_DIR=/dev/null\r\n>```\r\n> Source: https://github.com/dotnet/core-setup/issues/4295#issuecomment-422208914\r\n\r\nI suggest documenting the workaround until the underlying issue has been identified and remediated (could be dotnet core or snapd according to the linked issues above).\r\n",
      "created_at": "2018-10-19T17:45:10Z",
      "updated_at": "2018-10-19T17:46:10Z"
    },
    {
      "author": "iyoumans",
      "author_association": "NONE",
      "body": "Option 1 above worked for me. Thanks for all your help!",
      "created_at": "2018-10-19T18:05:20Z",
      "updated_at": "2018-10-19T18:08:03Z"
    },
    {
      "author": "godeater",
      "author_association": "NONE",
      "body": "I'm trying to troubleshoot this on my work Windows 7 machine, which has currently got 6.2.0-preview.1 on it.\r\n\r\nSpecifying -Proxy to any of the *-Module commands (e.g. Find-Module or Install-Module) seems to be being entirely ignored. I've got Fiddler4 running at the moment, and have tried setting the value for -Proxy to \"http://localhost:8888\", but I see no traffic and fiddler, and thus I'm left with OP's original problem of:\r\n\r\nUnable to resolve package source 'https://www.powershellgallery.com/api/v2/'\r\n\r\nSince http access from any machine where I work has to go via our http proxies.",
      "created_at": "2018-11-02T16:22:06Z",
      "updated_at": "2018-11-02T16:22:06Z"
    },
    {
      "author": "iyoumans",
      "author_association": "NONE",
      "body": "Did you try:\r\n\r\n$env:DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER=0",
      "created_at": "2018-11-02T17:13:04Z",
      "updated_at": "2018-11-02T17:13:04Z"
    },
    {
      "author": "godeater",
      "author_association": "NONE",
      "body": "I've just tried it this morning - didn't make any difference. As far as I can tell, the cmdlet is making no attempt to connect via a proxy.\r\n",
      "created_at": "2018-11-05T08:02:55Z",
      "updated_at": "2018-11-05T08:02:55Z"
    },
    {
      "author": "godeater",
      "author_association": "NONE",
      "body": "Ok - I've been doing some more fiddling with the profile.ps1 that my PowerShell core environment is loading (which I'd been mostly copying over from my working profile for Windows PowerShell). I've not stripped out all the stuff I had in that original profile to do with proxies, and just set this:\r\n\r\n$PSDefaultParameterValues[\"*:proxy\"]=$env:http_proxy\r\n\r\nand for whatever reason this has caused the install-module cmdlet to start working.\r\n\r\nI realise this is functionally equivalent to calling the cmdlet with -proxy manually, but I'm assuming that it's something to do with all the other bits of .NET code I've taken out, rather than it having to be in the variable.\r\n\r\nFWIW, things I've *removed* from the Pwsh profile: (for reference, localhost:3128 is a locally running instance of CNTLM, so I don't need to faff with authentication on our corporate proxies).\r\n\r\n    # This used to work under PowerShell for Windows\r\n    #$global:wc                   = New-Object Net.WebClient\r\n\t#$global:wc.Proxy.Credentials = [Net.CredentialCache]::DefaultNetworkCredentials\r\n\r\n    # Weird environment variable sourced from https://github.com/PowerShell/PowerShell/issues/7827\r\n    # According to https://docs.microsoft.com/en-us/dotnet/core/whats-new/dotnet-core-2-1 this is\r\n    # used to disable use of the new \"SocketsHttpHandler\" in .NET Core 2.1, and allows the code\r\n    # to fall back to the older HttpClientHandler\r\n    #$env:DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER=$false\r\n\r\n    # Possible new values required for PowerShell core?\r\n    #[System.Net.WebRequest]::DefaultWebProxy = New-Object System.Net.WebProxy('http://localhost:3128')\r\n    #[System.Net.WebRequest]::DefaultWebProxy.BypassProxyOnLocal = $true",
      "created_at": "2018-11-05T08:52:46Z",
      "updated_at": "2018-11-05T08:53:39Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "@godeater \r\n\r\nI tried the following with no luck.\r\n\r\n```\r\n$env:http_proxy = 'http://<user>:<pass>@<server>:<port>/'\r\n$PSDefaultParameterValues[\"*:proxy\"]=$env:http_proxy`\r\n```\r\n\r\nStill getting:\r\n\r\n`WARNING: Unable to resolve package source 'https://www.powershellgallery.com/api/v2/'.`\r\n",
      "created_at": "2018-11-05T21:24:34Z",
      "updated_at": "2018-11-05T21:24:34Z"
    },
    {
      "author": "godeater",
      "author_association": "NONE",
      "body": "> ```\r\n> $env:http_proxy = 'http://<user>:<pass>@<server>:<port>/'\r\n> $PSDefaultParameterValues[\"*:proxy\"]=$env:http_proxy`\r\n> ```\r\n\r\nI presume you have actual values in your http_proxy environment variable?\r\n\r\nHave you tried doing what I did previously: running Fiddler4 and setting that variable to point to the fiddler instance, and see if you see any evidence of the proxy being hit?",
      "created_at": "2018-11-06T07:10:52Z",
      "updated_at": "2018-11-06T07:10:52Z"
    },
    {
      "author": "ghost",
      "author_association": "NONE",
      "body": "> \r\n> \r\n> > ```\r\n> > $env:http_proxy = 'http://<user>:<pass>@<server>:<port>/'\r\n> > $PSDefaultParameterValues[\"*:proxy\"]=$env:http_proxy`\r\n> > ```\r\n> \r\n> I presume you have actual values in your http_proxy environment variable?\r\n> \r\n> Have you tried doing what I did previously: running Fiddler4 and setting that variable to point to the fiddler instance, and see if you see any evidence of the proxy being hit?\r\n\r\nI will try that and update",
      "created_at": "2018-11-06T19:49:52Z",
      "updated_at": "2018-11-06T19:49:52Z"
    },
    {
      "author": "jbirley",
      "author_association": "NONE",
      "body": "Are others still having this problem?  I am running Windows PowerShell 5.1 on Windows 2008 R2 (Win 7) along side of PowerShell Core 6.1.0 on the same system.  PowerShellGet cmdlets work in 5.1, but not in 6.1.0.  Same PSGallery SourceLocation (https://www.powershellgallery.com/api/v2), same versions of PowerShellGet (2.0.4).  Could this be related to TLS 1.2?",
      "created_at": "2019-01-15T23:22:21Z",
      "updated_at": "2019-01-15T23:27:49Z"
    },
    {
      "author": "gluons",
      "author_association": "NONE",
      "body": "I face the similar problem. But not in PS `6.10`.\r\nMy PS is `5.1`\r\n\r\n```\r\nUnable to find repository 'https://www.powershellgallery.com/api/v2/'. Use Get-PSRepository to see all available repositories.\r\n```\r\n\r\nBut I already have `PSGallery` repository.\r\n\r\n```ps\r\n> Get-PSRepository\r\nName                      InstallationPolicy   SourceLocation\r\n----                      ------------------   --------------\r\nPSGallery                 Trusted              https://www.powershellgallery.com/api/v2\r\n```",
      "created_at": "2019-01-19T17:59:02Z",
      "updated_at": "2019-01-19T18:02:08Z"
    },
    {
      "author": "gluons",
      "author_association": "NONE",
      "body": "Nope.\r\n\r\nhttps://evotec.xyz/update-module-packagemanagementinstall-package-unable-to-find-repository/ solves my problem. \u2764\ufe0f",
      "created_at": "2019-01-19T18:32:52Z",
      "updated_at": "2019-01-19T18:32:52Z"
    },
    {
      "author": "CollinChaffin",
      "author_association": "NONE",
      "body": "Official answer here where I opened this issue about the same time as this OP:\r\n\r\nhttps://github.com/PowerShell/PowerShellGet/issues/349\r\n\r\nA PR was created that fixed this:  https://github.com/PowerShell/PowerShellGet/pull/407\r\n\r\nAlso, I have determined and am testing a full automated workflow to correct any affected machines and normalize all stored repo URLs to the correct syntax.  Once I test, I will post it and update my issue #349.",
      "created_at": "2019-02-09T20:05:25Z",
      "updated_at": "2019-02-09T20:10:44Z"
    },
    {
      "author": "amccool",
      "author_association": "NONE",
      "body": "I am seeing this failure as well, after using IIS Crypto and disabling all Server and Client Protocols except for TLS1.2\r\n\r\n\r\nPS C:\\temp> $oldSM = [Net.ServicePointManager]::SecurityProtocol\r\nPS C:\\temp> $oldSM\r\nSsl3, Tls\r\nPS C:\\temp> [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\r\nPS C:\\temp> Invoke-RestMethod -Uri \"https://www.powershellgallery.com/api/v2\"\r\nInvoke-RestMethod : The underlying connection was closed: An unexpected error occurred on a receive.\r\nAt line:1 char:1\r\n+ Invoke-RestMethod -Uri \"https://www.powershellgallery.com/api/v2\"\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: (System.Net.HttpWebRequest:HttpWebRequest) [Invoke-RestMethod], WebException\r\n    + FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeRestMethodCommand\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2019-02-11T23:16:22Z",
      "updated_at": "2019-02-11T23:29:27Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Please continue discussion in https://github.com/PowerShell/PowerShellGet/issues/349",
      "created_at": "2019-02-19T23:40:18Z",
      "updated_at": "2019-02-19T23:40:18Z"
    },
    {
      "author": "mrlonis",
      "author_association": "NONE",
      "body": "For those getting the following error message in PowerShell Core 6:\r\n\r\n```PowerShell\r\nWARNING: Unable to resolve package source 'https://www.powershellgallery.com/api/v2'.\r\n```\r\n\r\nRun the following command in PowerShell:\r\n\r\n```PowerShell\r\n[System.AppContext]::SetSwitch(\"System.Net.Http.UseSocketsHttpHandler\", $false)\r\n```",
      "created_at": "2019-07-19T06:36:45Z",
      "updated_at": "2019-07-19T06:36:45Z"
    },
    {
      "author": "shivakumarg06",
      "author_association": "NONE",
      "body": "@mrlonis , \r\n\r\nThanks Buddy, it worked ",
      "created_at": "2019-10-25T11:04:24Z",
      "updated_at": "2019-10-25T11:04:24Z"
    },
    {
      "author": "Shiv-Shekhawat",
      "author_association": "NONE",
      "body": "Try following, worked for me:\r\n1. [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\r\n2. Set-ExecutionPolicy RemoteSigned\r\n\r\nFirst try option 1, if resolved be happy or use both 1 and 2 to be awesome.",
      "created_at": "2020-05-15T09:19:34Z",
      "updated_at": "2020-05-15T09:19:34Z"
    },
    {
      "author": "KonTheCat",
      "author_association": "NONE",
      "body": "@Shiv-Shekhawat - what you said worked, thank you! ",
      "created_at": "2020-05-22T15:35:21Z",
      "updated_at": "2020-05-22T15:35:21Z"
    },
    {
      "author": "c3rberus",
      "author_association": "NONE",
      "body": "The first option worked for me as well. Why is this required to get Install/Update module to work? This is ran on up to date Windows 2016 box.",
      "created_at": "2020-05-25T16:51:54Z",
      "updated_at": "2020-05-25T16:51:54Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "/cc @SteveL-MSFT @SydneyhSmith \r\n\r\nDid we get the TSL 1.0/1.1 turned back on for PSGallery? Seems like some folks are still having issues with that.",
      "created_at": "2020-05-25T17:37:13Z",
      "updated_at": "2020-05-25T17:37:13Z"
    },
    {
      "author": "Shiv-Shekhawat",
      "author_association": "NONE",
      "body": "> @Shiv-Shekhawat - what you said worked, thank you!\r\n\r\nGlad to hear that, happy to help.",
      "created_at": "2020-05-27T06:38:03Z",
      "updated_at": "2020-05-27T06:38:03Z"
    },
    {
      "author": "Shiv-Shekhawat",
      "author_association": "NONE",
      "body": "> The first option worked for me as well. Why is this required to get Install/Update module to work? This is ran on up to date Windows 2016 box.\r\n\r\nIt seems like the latest Powershell version has dropped many functionality including support for TLS 1.0 and 1.1, thus the error.",
      "created_at": "2020-05-27T06:40:12Z",
      "updated_at": "2020-05-27T06:40:12Z"
    },
    {
      "author": "Shiv-Shekhawat",
      "author_association": "NONE",
      "body": "> /cc @SteveL-MSFT @SydneyhSmith\r\n> \r\n> Did we get the TSL 1.0/1.1 turned back on for PSGallery? Seems like some folks are still having issues with that.\r\n\r\nIts better to move forwards as TSL 1.0/1.1 are now discarded almost everywhere. Or those who has legacy applications may take a U turn and apply the options provided by the fellow contributors.",
      "created_at": "2020-05-27T06:42:34Z",
      "updated_at": "2020-05-27T06:42:34Z"
    },
    {
      "author": "FadJee",
      "author_association": "NONE",
      "body": "the error disappeared on my side when I updated the \"PowerShellGet\" to the version \"2.2.5\". Also make sure that when u run \"Get-Module PowerShellGet -ListAvailable\" Only the 2.2.5 version is displayed , otherwise the same issue will be faced .. hope this helps ",
      "created_at": "2020-11-19T12:09:23Z",
      "updated_at": "2020-11-19T12:09:23Z"
    },
    {
      "author": "ZzZombo",
      "author_association": "NONE",
      "body": "    Unregister-PSRepository -Name 'PSGallery'\r\n    Register-PSRepository -Name 'PSGallery' -SourceLocation 'https://www.powershellgallery.com/api/v2/' -InstallationPolicy Trusted\r\n\r\nOnly this fixed this error for me. Note the missing slash in the URL. This script corrects it by putting it back at the end of the URL.",
      "created_at": "2020-12-20T16:15:10Z",
      "updated_at": "2020-12-20T16:15:22Z"
    }
  ],
  "created_at": "2018-09-20T13:25:03Z",
  "labels": [
    "Issue-Question",
    "Area-PowerShellGet",
    "Resolution-External"
  ],
  "number": 7827,
  "state": "closed",
  "title": "Install or Update-Module no longer works with 6.10",
  "updated_at": "2020-12-20T16:15:22Z"
}