{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12641",
  "author": "TomCJones",
  "body": "I cannot tell if this method should support protocol/verson http/2 - or is that a windows problem still?",
  "closed_at": "2021-11-02T23:53:36Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Please provide the information requested in the issue template. There's really not a lot to go on here.\r\n\r\nFor reference, the API used by the cmdlets is here: https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpclient?view=netcore-3.1\r\n\r\nThere is reference to support for other versions of HTTP via this API / the SendAsync() method: https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpclient.defaultrequestversion?view=netcore-3.1\r\n\r\nI'm not sure on the state of HTTP2 support on the web cmdlets by default.\n\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpclient\">HttpClient Class (System.Net.Http)</a></strong></div><div>Provides a base class for sending HTTP requests and receiving HTTP responses from a resource identified by a URI. </div></blockquote>\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpclient.defaultrequestversion\">HttpClient.DefaultRequestVersion Property (System.Net.Http)</a></strong></div><div>Gets or sets the default HTTP version used on subsequent requests made by this  instance. </div></blockquote>",
      "created_at": "2020-05-13T03:15:42Z",
      "updated_at": "2020-05-13T03:15:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems we could consider new `HttpVersion` parameter for all web cmdlets.",
      "created_at": "2020-05-13T11:37:34Z",
      "updated_at": "2020-05-13T11:37:34Z"
    },
    {
      "author": "dmex",
      "author_association": "NONE",
      "body": "The version probably needs to be set in two places since the SendAsync method doesn't use the DefaultRequestVersion. For example the Invoke-WebRequest script:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/0f16d0ec6ea7524ccdcf61669b84812474d1d25b/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/Common/WebRequestPSCmdlet.Common.cs#L1038-L1038\r\n\r\n`httpClient.DefaultRequestVersion = new Version(2, 0);`\r\n\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/0f16d0ec6ea7524ccdcf61669b84812474d1d25b/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/Common/WebRequestPSCmdlet.Common.cs#L1079-L1080\r\n\r\n`request.Version = new Version(2, 0);`",
      "created_at": "2020-05-30T18:26:00Z",
      "updated_at": "2020-05-30T18:26:49Z"
    },
    {
      "author": "hayhay27",
      "author_association": "CONTRIBUTOR",
      "body": "could we same time replace [HttpClientHandler](https://docs.microsoft.com/ru-ru/dotnet/api/system.net.http.httpclient?view=netcore-3.1#httpclient-and-net-core)  by SocketsHttpHandler?\r\n\r\n> \r\n>     The use of SocketsHttpHandler offers a number of advantages:\r\n>       * A significant performance improvement when compared with the previous implementation.\r\n>       * The elimination of platform dependencies, which simplifies deployment and servicing. For example, libcurl is no longer a dependency on .NET Core for macOS and .NET Core for Linux.\r\n>       * Consistent behavior across all .NET platforms.\r\n\r\n",
      "created_at": "2021-07-28T17:11:36Z",
      "updated_at": "2021-07-28T17:11:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "SocketsHttpHandler is an _implementation_ of HttpClientHandler.",
      "created_at": "2021-07-28T18:19:43Z",
      "updated_at": "2021-07-28T18:19:43Z"
    },
    {
      "author": "hayhay27",
      "author_association": "CONTRIBUTOR",
      "body": "> \r\n> \r\n> SocketsHttpHandler is an _implementation_ of HttpClientHandler.\r\n\r\nMy fault. I miss sentence about HttpClientHandler implementation.\r\n\r\nAnyway. I want to add new parameter HttpVersion for `irm` and `iwr`:\r\n\r\n```csharp\r\n\r\n[Parameter]\r\npublic virtual HttpVersion HttpVersion { get; set; } = HttpVersion.Default;\r\n\r\nenum HttpVersion\r\n{\r\n  Default,\r\n  Version10,\r\n  Version11,\r\n  Version20,\r\n  Version30,\r\n}\r\n```\r\n\r\nAnd fill `request.Version` according to `HttpVersion`\r\n\r\nIf it's ok I'll create PR\r\n",
      "created_at": "2021-07-31T15:50:08Z",
      "updated_at": "2021-07-31T15:50:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "`HttpClient` has `DefaultRequestVersion` property of `Version` type. I think we should use `Version` for the new parameter since new HTTP versions may appear in the future. Argument completer would be great addition. Current supported list is in [HttpVersion class](https://source.dot.net/#System.Net.Primitives/System/Net/HttpVersion.cs,6)\r\n\r\n> If it's ok I'll create PR\r\n\r\nCome on!",
      "created_at": "2021-07-31T16:35:34Z",
      "updated_at": "2021-07-31T16:35:34Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "If we follow `curl`'s lead, we should default to 2.0 and fallback to 1.1 if negotiation fails: https://everything.curl.dev/http/versions#:~:text=Since%20perhaps%20mid%202016%2C%20curl%20will%20default%20to,capable%20curls%20get%201.1%20over%20HTTPS%20by%20default.\r\n\r\nBut also expose a `HttpVersion` if the user wants to be explicit.\n\n<blockquote><img src=\"https://app.gitbook.com/share/space/thumbnail/-LvW30LMWx5oHe1_SY3L.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://everything.curl.dev/http/versions#:~:text=Since%20perhaps%20mid%202016%2C%20curl%20will%20default%20to,capable%20curls%20get%201.1%20over%20HTTPS%20by%20default\">HTTP versions</a></strong></div></blockquote>",
      "created_at": "2021-09-07T18:05:13Z",
      "updated_at": "2021-09-07T18:05:15Z"
    },
    {
      "author": "hayhay27",
      "author_association": "CONTRIBUTOR",
      "body": "> If we follow `curl`'s lead, we should default to 2.0 and fallback to 1.1 if negotiation fails\r\n\r\nshould we consider this as breaking change? default version was [changed](https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httprequestmessage.version?view=net-5.0#remarks) in dotnet 2.1 and reverted in 3.0 for reasons unknown to me\r\n\r\nIf we definitely follow curl's I can set default as 2.0\r\n\r\n> But also expose a `HttpVersion` if the user wants to be explicit.\r\n\r\ndone",
      "created_at": "2021-09-07T21:44:24Z",
      "updated_at": "2021-09-07T21:44:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> should we consider this as breaking change? default version was [changed](https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httprequestmessage.version?view=net-5.0#remarks) in dotnet 2.1 and reverted in 3.0 for reasons unknown to me\r\n\r\nHistory https://github.com/dotnet/runtime/issues/28635#issuecomment-462531816\r\n\r\nI think it makes no sense to change the default from 1.1.",
      "created_at": "2021-09-08T07:04:45Z",
      "updated_at": "2021-09-08T07:04:45Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Unfortunately, the specific reasons of the change from HTTP2 back to HTTP1.1 wasn't made clear in the dotnet/runtime thread.  It seems that the least risky change is to keep default as 1.1 and just expose the `-HttpVersion` parameter if the user wants something better and knows the endpoint supports it.  ",
      "created_at": "2021-09-08T16:50:40Z",
      "updated_at": "2021-09-08T16:50:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Unfortunately, the specific reasons of the change from HTTP2 back to HTTP1.1 wasn't made clear in the dotnet/runtime thread.\r\n\r\nFrom my understanding, they say that 2.0 and 3.0 are de-facto specific enhancements of 1.1 but not new protocols. So users should explicitly point that they want to use.",
      "created_at": "2021-09-09T05:11:50Z",
      "updated_at": "2021-09-09T05:11:50Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #15853, which has now been successfully released as `v7.3.0-preview.1`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.3.0-preview.1)\n",
      "created_at": "2021-12-16T19:59:45Z",
      "updated_at": "2021-12-16T19:59:45Z"
    }
  ],
  "created_at": "2020-05-13T02:45:52Z",
  "number": 12641,
  "state": "closed",
  "title": "invoke-restmethod does not support http/2",
  "updated_at": "2021-12-16T19:59:45Z"
}