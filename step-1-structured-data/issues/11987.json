{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11987",
  "author": "iRon7",
  "body": "A list of `[PSCustomObject]` objects consumes multiple times the amount of memory as a `[DataTable]`. For a lot of .Net classes there are accelerators and PowerShell constructors but to create a `[DataTable]` in PowerShell is quiet an hassle, see e.g. [Creating table using Powershell](https://docs.microsoft.com/nl-nl/archive/blogs/rkramesh/creating-table-using-powershell).\r\n\r\nIt would be nice to be able to construct a data table the PowerShell way, e.g.:\r\n```PowerShell\r\n$Table = [DataTable]('Text', 'Number')\r\n```\r\nOr:\r\n```PowerShell\r\n$Table = [DataTable]@{Text = [String]; 'Number' = [Int]}\r\n```\r\n\r\nAnd add data rows like:\r\n```PowerShell\r\n$Table.AddRow(@('A', 1))\r\n```\r\nOr:\r\n```PowerShell\r\n$Table.AddRow(@{Text = 'A',  Number = 1})\r\n```\r\nAs I don't have enough experience with C#, I have created a derived `[DataTable]` class in \r\nPowerShell to test the idea:\r\n\r\n```PowerShell\r\nclass DataTable : Data.DataTable {\r\n\tDataTable([Array]$ColumnNames) {\r\n\t\tForEach ($ColumnName in $ColumnNames) { \r\n\t\t\tIf ($ColumnName -is [PSCustomObject]) {Write-Host 'PSCustomObject'}\r\n\t\t\tElse { $This.AddColumn($ColumnName) }\r\n\t\t}\r\n\t}\r\n\tDataTable([System.Collections.IDictionary]$ColumnNameTypes) {\r\n\t\tForEach($Key in $ColumnNameTypes.Get_keys()) { $This.AddColumn($Key, $ColumnNameTypes[$Key]) }\r\n\t}\r\n\t[Void]AddColumn([String]$ColumnName) {\r\n\t\t$DataColumn = New-Object Data.DataColumn($ColumnName)\r\n\t\t$This.Columns.Add($DataColumn)\r\n\t}\r\n\t[Void]AddColumn([String]$ColumnName, [Type]$ColumnType = [String]) {\r\n\t\t$DataColumn = New-Object Data.DataColumn($ColumnName, $ColumnType)\r\n\t\t$This.Columns.Add($DataColumn)\r\n\t}\r\n\t[Void]AddRow([Array]$Array) {\r\n\t\t$DataRow = $This.NewRow()\r\n\t\tFor ($i = 0; $i -lt $Array.Length; $i++) {\r\n\t\t\tIf ($i -lt $This.Columns.Count) { $DataRow.Item($i) = $Array[$i] }\r\n\t\t}\r\n\t\t$This.Rows.Add($DataRow)\r\n\t}\r\n\t[Void]AddRow([System.Collections.IDictionary]$Dictionary) {\r\n\t\t$DataRow = $This.NewRow()\r\n\t\tForEach ($Name in $Dictionary.get_Keys()) {\r\n\t\t\tIf ($This.Columns.Contains($Name)) { $DataRow.Item($Name) = $Dictionary[$Name] }\r\n\t\t}\r\n\t\t$This.Rows.Add($DataRow)\r\n\t}\r\n\t[Void]AddRow([PSCustomObject]$PSObject) {\r\n\t\t$DataRow = $This.NewRow()\r\n\t\tForEach ($Name in $PSObject.PSObject.Properties.Name) {\r\n\t\t\tIf ($This.Columns.Contains($Name)) { $DataRow.Item($Name) = $PSObject.$Name }\r\n\t\t}\r\n\t\t$This.Rows.Add($DataRow)\r\n\t}\r\n}\r\n\r\n#Example 1\r\n\r\n$MyDataTable = [DataTable]('a', 'b', 'c')\r\n$MyDataTable.AddRow(@(1,2,3))\r\n$MyDataTable\r\n\r\na b c\r\n- - -\r\n1 2 3\r\n\r\n#Example 2\r\n\r\n$Table = [DataTable]@{Text = [String]; 'Number' = [Int]}\r\n$Table.AddRow(@{Text = 'A'; Number = 1})\r\n$Table\r\n\r\nText Number\r\n---- ------\r\nA         1\r\n\r\n# Example 3\r\n\r\n# $Process = [DataTable]@((Get-Process | Select-Object -First 1).PSStandardMembers.DefaultDisplayPropertySet.ReferencedPropertyNames)\r\n$Process = [DataTable][Ordered]@{Id = [Int]; ProcessName = [String]}\r\nGet-Process | ForEach-Object { $Process.AddRow($_) }\r\n$Process",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Also you could look TypedTableBase\\<T> class.",
      "created_at": "2020-03-02T17:29:05Z",
      "updated_at": "2020-03-02T17:29:17Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "It seems like this is something that could be packaged as a module and published to PowerShellGallery.  Maybe `New-DataTable` and `ConvertTo-DataTable` cmdlets.",
      "created_at": "2022-10-29T16:07:38Z",
      "updated_at": "2022-10-29T16:09:21Z"
    }
  ],
  "created_at": "2020-03-02T11:13:14Z",
  "number": 11987,
  "state": "open",
  "title": "Extend [DataTable] with easy constructor and AddRow method",
  "updated_at": "2022-10-29T16:09:21Z"
}