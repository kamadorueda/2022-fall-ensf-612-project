{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15161",
  "author": "mklement0",
  "body": "Note: This is ultimately a duplicate of #15235\r\n\r\n---\r\n\r\nPR #8783 brought the ability to use _relative_ paths as symlink targets _on Windows_.\r\n\r\nHowever, if the target is a _directory_ and the relative path starts with / is just a _name_ (rather than starting with `.\\`), the resulting symlink doesn't behave like a directory with `Get-ChildItem`.\r\n\r\nNote that on _Unix_, as of PowerShell Core 7.2.0-preview.4, use of relative target paths is still fundamentally unsupported - see #15233\r\n\r\n## Steps to reproduce\r\n\r\nRun on Windows:\r\n\r\n```powershell\r\n# Switch to a temporary directory.\r\nPush-Location -ea Stop ($tmpDir = (New-Item -Type Directory -Force (Join-Path Temp:/ $PID)).FullName)\r\n\r\n# Create a dir. to serve as the target, with a single text file in it.\r\n$null = New-Item -Type Directory target -Force\r\n'hi' > target/t.txt\r\n\r\n# Define two links: \r\n#  * one that targets 'target' - by name only.\r\n#  * one that targets '.\\target' - explicit reference to the current dir.\r\n$null = New-Item -Type SymbolicLink link1 -Target target -Force\r\n$null = New-Item -Type SymbolicLink link2 -Target .\\target -Force\r\n\r\n# Now compare the Get-ChildItem behavior of these two links, which\r\n# *should* be the same.\r\nGet-ChildItem link1\r\nGet-ChildItem link2\r\n\r\nPop-Location; Remove-Item -lp $tmpDir -Recurse\r\n```\r\n\r\n## Expected behavior\r\n\r\nWith the exception of the directory path in the grouping header, the commands should produce the same output and show the _content_ of the target dir:\r\n\r\n```none\r\n    Directory: C:\\Users\\jdoe\\AppData\\Local\\Temp\\8748\\link1\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\n-a---            4/5/2021  3:30 PM              4 t.txt\r\n\r\n    Directory: C:\\Users\\jdoe\\AppData\\Local\\Temp\\8748\\link2\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\n-a---            4/5/2021  3:30 PM              4 t.txt\r\n```\r\n\r\n## Actual behavior\r\n\r\n```none\r\n    Directory: C:\\Users\\jdoe\\AppData\\Local\\Temp\\8748\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\nla---            4/5/2021  3:30 PM              0 link1 -> target\r\n\r\n    Directory: C:\\Users\\jdoe\\AppData\\Local\\Temp\\8748\\link2\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\n-a---            4/5/2021  3:30 PM              4 t.txt\r\n```\r\n\r\nNote how `link1` present as if it were a _flle_, as if you had called `Get-Item` rather than `Get-ChildItem` on it.\r\n\r\nInterestingly, `cmd.exe`'s `dir` shows analogous behavior, and additionally fails with `dir link1\\t.txt`, which PowerShell handles correctly.\r\n\r\n## Environment data\r\n\r\n```none\r\nPowerShell Core v7.2.0-preview.4 (.NET 6.0.0-preview.2.21154.6) on Microsoft Windows 10 Pro (64-bit; Version 20H2, OS Build: 19042.867)\r\n```\r\n",
  "closed_at": "2021-04-15T17:20:47Z",
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "I did not understand what the problem is.\r\n\r\n![11](https://user-images.githubusercontent.com/78153320/114907610-ed776180-9e23-11eb-8048-7bf734a1510b.png)\r\n",
      "created_at": "2021-04-15T16:55:00Z",
      "updated_at": "2021-04-15T16:55:00Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@237dmitry, if you run the code in the initial post, you'll see the problem.\r\n\r\nIt doesn't _always_ happen, but I've just realized that this issue will go away if what @MatejKafka reported in #15235 gets fixed (which is the right thing to do), so I'm closing this.\r\n\r\nIn short: if there's a mismatch between the _process_' current directory (as reported by `[Environment]::CurrentDir`) and _PowerShell's_ (which is typically the case), the symlink target's _type_ (file vs. directory) may be mis-identified.\r\n\r\nIn the case at hand, `target` - but not `.\\target` - is mistakenly looked for in `[Environment]::CurrentDir` and, if there's no such item there, it is assumed to be a _file_, so that the `link1` symlink is created _with the wrong type_ (it behaves like a _file_, even though its true target is a _directory_).\r\n\r\n\r\n",
      "created_at": "2021-04-15T17:20:46Z",
      "updated_at": "2021-04-15T17:28:40Z"
    }
  ],
  "created_at": "2021-04-05T19:34:41Z",
  "number": 15161,
  "state": "closed",
  "title": "On Windows, a directory symlink doesn't behave a like a directory with Get-ChildItem if its target path is a relative path that starts directly with a name",
  "updated_at": "2021-04-15T17:28:40Z"
}