{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6207",
  "author": "AmandaCameron",
  "body": "It'd be nice if we could use SSH PSRemote sessions with our configured session `ssh-agent`-compatible daemon to get the required security information/\r\n\r\nFor instance, I use `gpg-agent` to store my SSH private key securely on my Yubikey 4, as a result my key doesn't actually exist on my laptop.\r\n\r\nFrom looking at the output of `ps` while `New-PSSession` is run, it appears you guys are shelling out to `ssh` anyway, and the `ssh` client supports the ssh-agent by default, so I assume something is being done to disable it for the invocation.",
  "closed_at": "2018-07-12T23:51:12Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @PaulHigin  Could you please comment the feature request.",
      "created_at": "2018-02-21T16:49:29Z",
      "updated_at": "2018-02-21T16:49:29Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "The idea is to let SSH handle the connection/transport for PS remoting.  I don't know what the mechanism is for SSH to work with ssh-agent but PowerShell shouldn't get in the way.  More details and repro steps can help determine if PowerShell is preventing this.  We may have to update PowerShell code to support this, if possible.",
      "created_at": "2018-02-21T23:53:18Z",
      "updated_at": "2018-02-21T23:53:18Z"
    },
    {
      "author": "AmandaCameron",
      "author_association": "NONE",
      "body": "A quick test just confirmed what I thought might be the issue -- the\r\nenvironment variables are being stripped by the time `ssh` is shelled out\r\nto.\r\n\r\nssh uses the environment variable `SSH_AUTH_SOCK` to know where the unix\r\nsocket for the ssh-agent is, so at least that needs to be preserved.\r\n\r\nI tested this with the following shell script placed in my $PATH before the\r\nnormal location of ssh:\r\n\r\n```sh\r\n#!/bin/sh\r\n\r\nenv >/tmp/test-ssh.env\r\nexec /usr/bin/ssh \"$@\"\r\n```",
      "created_at": "2018-02-22T00:02:17Z",
      "updated_at": "2018-02-22T00:02:17Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Yes, this looks like a bug in PowerShell when forking the ssh process.  It is passing in an empty string array for the environment variables.\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/remoting/common/RunspaceConnectionInfo.cs#L2148\r\n\r\nI'll change this to a bug issue.",
      "created_at": "2018-02-26T18:43:22Z",
      "updated_at": "2018-02-26T18:43:22Z"
    },
    {
      "author": "AmandaCameron",
      "author_association": "NONE",
      "body": "Any chance this can be bumped into 6.1.0? It's somewhat inconvient to be unable to use my securely-stored private key, instead having to use a password.",
      "created_at": "2018-05-27T22:34:04Z",
      "updated_at": "2018-05-27T22:34:04Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "+ @SteveL-MSFT  Adding Steve for priority question.  I believe the fix would be fairly straightforward.",
      "created_at": "2018-05-30T19:23:30Z",
      "updated_at": "2018-05-30T19:23:30Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@AmandaCameron `6.1.0-Consider` means we're considering it for 6.1.0 already\r\n\r\nI know @PaulHigin is currently busy with some other work, but this seems like something that shouldn't be too complicated to fix, so I'll leave it to Paul to address when he's able to",
      "created_at": "2018-05-30T20:40:55Z",
      "updated_at": "2018-05-30T20:40:55Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Ok, I'll look at a fix for 6.1.0 timeframe.",
      "created_at": "2018-05-31T16:42:42Z",
      "updated_at": "2018-05-31T16:42:42Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@AmandaCameron This should fix the problem.  Please try your scenario with a build having this change.",
      "created_at": "2018-06-18T16:19:04Z",
      "updated_at": "2018-06-18T16:19:04Z"
    },
    {
      "author": "AmandaCameron",
      "author_association": "NONE",
      "body": "Will there be another preview release before the full release? If so I'll report back when I see that update hit my laptop apt repo.",
      "created_at": "2018-06-19T14:00:36Z",
      "updated_at": "2018-06-19T14:00:36Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@AmandaCameron Yes, there will be another preview release probably the first week of July.  However, you can also pick up a nightly build that runs side-by-side to do a quick verification.",
      "created_at": "2018-06-19T16:33:04Z",
      "updated_at": "2018-06-19T16:33:04Z"
    },
    {
      "author": "AmandaCameron",
      "author_association": "NONE",
      "body": "I'm having some trouble finding a non-docker binary release of the nightly builds, so I'll double-check that this is def. fixed for my usecase in early july.",
      "created_at": "2018-06-22T20:09:45Z",
      "updated_at": "2018-06-22T20:09:45Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "> iex \"& { $(irm https://aka.ms/install-pscore ) } -Daily\"\r\n\r\nRun from PowerShell should install the latest successful nightly build",
      "created_at": "2018-06-22T21:48:17Z",
      "updated_at": "2018-06-22T21:48:17Z"
    },
    {
      "author": "AmandaCameron",
      "author_association": "NONE",
      "body": "Assuming the latest daily is including this fix, it doesn't appear to be fixed. The environment contains a `PWD` entry now, but not the required `SSH_AUTH_SOCK` one.\r\n\r\nEDIT: If I type `$env:SSH_AUTH_SOCK` in the shell, I get the expected value of `/run/user/1000/gnupg/S.gpg-agent.ssh`",
      "created_at": "2018-06-22T22:12:26Z",
      "updated_at": "2018-06-22T22:14:02Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Does the parent process have the SSH_AUTH_SOCK environment variable set?  When creating the SSH process for the remote connection, all parent process environment variables are now copied to the new child SSH process.  The assumption is that the parent process has all needed environment variables.\r\n",
      "created_at": "2018-06-25T16:25:55Z",
      "updated_at": "2018-06-25T16:25:55Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "BTW if you are using the ssh-agent service from the OpenSSH that ships with Windows 10 1803, none of the SSH_AUTH env vars are defined in any process AFAICT.  Yet I use this with Git and it has no problems connecting/pulling/pushing to repos using SSH and my passphrase protected key (served up by ssh-agent).  \r\n\r\nJust want to make sure  that PowerShell Core SSH remoting works with the ssh-agent that comes from the PowerShell project on GitHub.  :-)",
      "created_at": "2018-06-26T04:09:24Z",
      "updated_at": "2018-06-26T04:10:08Z"
    },
    {
      "author": "AmandaCameron",
      "author_association": "NONE",
      "body": "@PaulHigin I'm not sure what you mean by \"parent process\" I mentioned in an edit above that at the very least the powershell commandline knows of the auth socket, through `$env:SSH_AUTH_SOCK` -- the only env variable that my test script above is showing is `PWD` which is pointed to the directory containing the test `ssh` command script\r\n\r\n",
      "created_at": "2018-06-26T12:49:37Z",
      "updated_at": "2018-06-26T12:49:37Z"
    },
    {
      "author": "AmandaCameron",
      "author_association": "NONE",
      "body": "I just checked the code, and while I'm not that familiar with C# -- [this looks like](\r\nhttps://github.com/PaulHigin/PowerShell/blob/98a22f565e8587ef10530de9eb16c1e7abec406e/src/System.Management.Automation/engine/remoting/common/RunspaceConnectionInfo.cs#L2085-L2087) where the startInfo is coming from? I'm not sure why that would have it's own copy of the parent's environment.\r\n",
      "created_at": "2018-06-26T12:55:01Z",
      "updated_at": "2018-06-26T12:55:01Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "By parent process I mean the command line PowerShell process you are using to create a remote session.  I assumed that the default StartInfo environment variables were obtained from the process in which it is currently running.  My limited testing seemed to indicate that this was so, but maybe not since your $env:SSH_AUTH_SOCK setting doesn't seem to be propagating.  I'll need to take a closer look.",
      "created_at": "2018-06-26T15:31:23Z",
      "updated_at": "2018-06-26T15:31:23Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "I found some time to look at this some more and I can verify that StartInfo does indeed contain the parent process environment variables, including SSH_AUTH_SOCK, and that they are being passed into the ssh process used for the connection and transport.  So there must be something else that prevents ssh-agent from working.\r\n\r\nI'll play around with ssh-agent to see if I can repro the problem.  ",
      "created_at": "2018-07-10T20:48:14Z",
      "updated_at": "2018-07-10T20:48:14Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I'm confused about something here.  The `ssh-agent` that comes with `Git for Windows` will create/use those env vars.  But AFAICT, the `ssh-agent` that comes with `OpenSSH` (Windows 10 1803), it doesn't create or need those env vars.",
      "created_at": "2018-07-11T00:41:29Z",
      "updated_at": "2018-07-11T00:41:29Z"
    },
    {
      "author": "AmandaCameron",
      "author_association": "NONE",
      "body": "Worth noting -- I'm running an Ubuntu-based laptop, not Windows where I'm encountering the issue.\r\n\r\nThe steps I listed above to dump the environment variables was showing only `PWD` with the latest change.",
      "created_at": "2018-07-11T00:53:25Z",
      "updated_at": "2018-07-11T00:53:36Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "I verified that the ssh process created by PowerShell remoting does not have the environment variables, by looking at the virtual file location /proc/[procid]/environ.  It seems that our process creation code is not passing in the environment information correctly.  I look deeper when I get some time.",
      "created_at": "2018-07-11T20:57:07Z",
      "updated_at": "2018-07-11T20:57:07Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "My apologies.  I was testing the old build without my fix and this is why I didn't see any environment variables.  When I test a build with my fix I do now see the environment variables in the ssh process, including SSH_AUTH_SOCK.  Next I'll see if I can get ssh-agent working.",
      "created_at": "2018-07-12T18:36:45Z",
      "updated_at": "2018-07-12T18:36:45Z"
    },
    {
      "author": "AmandaCameron",
      "author_association": "NONE",
      "body": "Okay, I just re-ran the powershell daily download just now, and when\ntesting I wasn't asked for my password when sshing into something, so I\nexpect that I juts managed to get an older nightly when I installed it\nearlier? Appologies for the false alarm on it being broken still. :\\\n\nOn Thu, Jul 12, 2018 at 2:37 PM Paul Higinbotham <notifications@github.com>\nwrote:\n\n> My apologies. I was testing the old build without my fix and this is why I\n> didn't see any environment variables. When I test a build with my fix I do\n> now see the environment variables in the ssh process, including\n> SSH_AUTH_SOCK. Next I'll see if I can get ssh-agent working.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/PowerShell/PowerShell/issues/6207#issuecomment-404609326>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAG_ztvgjwvi04CY-dE2z_viEoSGOCp7ks5uF5dZgaJpZM4SN8Ps>\n> .\n>\n",
      "created_at": "2018-07-12T19:37:01Z",
      "updated_at": "2018-07-12T19:37:01Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "No problem.  It looks like you did the same thing I did and tested on an older build.  Glad to know it is working.",
      "created_at": "2018-07-16T15:47:58Z",
      "updated_at": "2018-07-16T15:47:58Z"
    }
  ],
  "created_at": "2018-02-21T16:32:41Z",
  "number": 6207,
  "state": "closed",
  "title": "feature-request: New-PSSession -HostName should be able to use the system's ssh-agent to get the required keys.",
  "updated_at": "2018-07-16T15:47:58Z"
}