{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8323",
  "author": "drocs",
  "body": "This makes the `ModuleIntrinsics.GetModulePath` function call add the directory `c:\\users\\<username>\\.nuget\\packages\\system.management.automation\\6.1.1\\runtimes\\win-x64\\lib\\netstandard2.0\\Modules` to the `$env:PSModulePath`, rather than the expected `C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\Modules` directory.",
  "closed_at": null,
  "comments": [
    {
      "author": "drocs",
      "author_association": "NONE",
      "body": "1) Create new console app\r\n2) Add nuget packages Microsoft.Powershell.SDK; Microsoft.Powershell.Commands.Diagnostics; Microsoft.WSMan.Management (versions 6.1.1)\r\n3) Create a powershell variable and attempt to call `Get-IISSite`\r\n\r\nResult: Command not found.\r\nReason: `$env:PSModulePath` does not have a directory reference to `$PSHome`",
      "created_at": "2018-11-20T20:28:18Z",
      "updated_at": "2018-11-27T01:34:11Z"
    },
    {
      "author": "drocs",
      "author_association": "NONE",
      "body": "Affects multiple powershell commands.  (Get-PackageProvider)",
      "created_at": "2018-11-26T16:32:11Z",
      "updated_at": "2018-11-26T16:32:11Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "cc @adityapatwardhan \t@rjmholt \t",
      "created_at": "2018-11-26T23:49:23Z",
      "updated_at": "2018-11-26T23:49:23Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@drocs Can you please share the following details:\r\n- The version of PowerShell you are using (i.e. `$PSVersionTable`).\r\n- The contents of `$env:PSModulePath` you are seeing.\r\n- A reproduction of the problem you are seeing.\r\n- What your expected vs actual behaviours are.\r\n\r\n`$PSHome` [is defined as](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-6) the location of the `System.Management.Automation.dll` assembly.\r\n\r\nOn my current machine, `$PSHome` points to `C:\\Program Files\\PowerShell\\6`. It would only point to ` C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\` in Windows PowerShell.\r\n\r\nThe problem IMO is that in a hosted PowerShell context, it's not clear what the module path should be. I've discussed this a bit in https://github.com/PowerShell/PowerShell/issues/7082.\r\n\r\nIn your particular case however, we need more information to determine what the specific problem is.",
      "created_at": "2018-11-27T01:32:47Z",
      "updated_at": "2018-11-27T01:34:33Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "In the hosted PowerShell case, it seems that the app should own dependency management and set the PSModulePath as the app could have undesired results if we have the same ones as with the PSCore6 package.",
      "created_at": "2018-11-27T01:48:16Z",
      "updated_at": "2018-11-27T01:48:16Z"
    },
    {
      "author": "drocs",
      "author_association": "NONE",
      "body": "@rjmholt \r\nPowershell Version: 6.1.1 (downloaded from nuget)\r\nPSModulePath (partial, the rest of the path looks the same as I get from powershell)  : `c:\\users\\<username>\\.nuget\\packages\\system.management.automation\\6.1.1\\runtimes\\win-x64\\lib\\netstandard2.0\\Modules`\r\nI have uploaded the sample project (slightly modified) to highlight the issue.  https://github.com/drocs/PowershellIssue\r\nNote that line 27 in Program.cs causes the `ErrorOnDataAdded` EventHandler to be fired, with the exception could not find `Get-PackageProvider`.  I would expect that this call would work successfully.\r\n\r\nThe reason for this is that the location of the System.Management.Automation.dll is the nuget location (above)",
      "created_at": "2018-11-27T14:30:12Z",
      "updated_at": "2018-11-27T18:42:12Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "So given the fact that hosted scenarios are eventually going to be packaged up and redistributed, there's no way for us to know where the SMA dll lies in relation to the core modules. So that you can have a more modular application, the modules aren't bundled as part of the the nuget package. Modules are up to you to bundle and configure.\r\n\r\nSo in this case it's up to you to set the module path to point to the modules you require. You can do this with a powershell.config.json file in `$PSHOME` like so:\r\n\r\n```json\r\n{\r\n    \"PSModulePath\": \"C:\\\\Path\\\\To\\\\Module\\\\Dir;C:\\\\Other\\\\Path\\\\To\\\\More\\\\Modules\"\r\n}\r\n```",
      "created_at": "2018-11-27T18:46:28Z",
      "updated_at": "2018-11-27T18:46:38Z"
    },
    {
      "author": "drocs",
      "author_association": "NONE",
      "body": "That seems like a fragile solution.  Shouldn't the Utils class figure this out a better way than typeof(PSObject).Assembly.Location? These locations are set in both the registry and the machine environment variable when the package is installed.  This would seem to be less fragile to get the location from one of those locations rather than trying to set it to the install directory of ps.exe.",
      "created_at": "2018-11-27T19:08:22Z",
      "updated_at": "2018-11-27T19:08:22Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "There's no registry in Linux or macOS -- powershell.config.json was designed to be a less fragile, cross-platform way to designate what were previously registry-bound PowerShell settings.\r\n\r\nWhich environment variable do you mean here? `$env:PSModulePath` is heavily manipulated by PowerShell and should only be depended on by child processes of PowerShell, rather than as a way to set the module path in PowerShell.\r\n\r\nAgain, in a hosted scenario, there is no pwsh.exe. A redistributable standalone application hosting PowerShell is basically going to throw out most of the assumptions at play. The only thing we can depend on is that System.Management.Automation.dll exists and has a path and that it's running on dotnet -- everything else depends on the structure of the application you build and how you deploy it, so they are left to be bundled and configured by you.",
      "created_at": "2018-11-27T19:19:09Z",
      "updated_at": "2018-11-27T19:19:40Z"
    },
    {
      "author": "drocs",
      "author_association": "NONE",
      "body": "My application is going to have a whole lot less information about the Powershell Modules directory than the Powershell redist will.  I would have to manually figure out where the Modules directory is for every place I install it.",
      "created_at": "2018-11-27T19:25:40Z",
      "updated_at": "2018-11-27T19:25:40Z"
    },
    {
      "author": "drocs",
      "author_association": "NONE",
      "body": "According to a quick internet search, information typically kept in the Windows registry should be kept in the /etc or /var directories in Linux.",
      "created_at": "2018-11-27T19:33:59Z",
      "updated_at": "2018-11-27T19:33:59Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "The point is that an application hosting PowerShell might not have the same preconceptions about the module path, so we don't promise to know anything about that. If we did, we would break other hosting scenarios.\r\n\r\nHave you tried calling this method:\r\nhttps://github.com/PowerShell/PowerShell/blob/9510fe56f52a2b55835aaa671d0de1c4c6c46ebc/src/System.Management.Automation/engine/Modules/ModuleIntrinsics.cs#L1012-L1027\r\n\r\nRe: /etc and /var, yes that's being discussed in https://github.com/PowerShell/PowerShell-RFC/pull/111.",
      "created_at": "2018-11-27T19:36:26Z",
      "updated_at": "2018-11-27T19:36:26Z"
    },
    {
      "author": "drocs",
      "author_association": "NONE",
      "body": "That method is internal.  I believe it is called by the GetModulePath function.  This variable is set from https://github.com/PowerShell/PowerShell/blob/9510fe56f52a2b55835aaa671d0de1c4c6c46ebc/src/System.Management.Automation/engine/Utils.cs DefaultPowerShellAppBase (line 224) which calls GetApplicationBase, which as I stated earlier is typeof(PSObject).Assembly.Location.  Unfortunately this location is only correct if you assume that the only place the module will be run from is the Powershell runner, which is an incorrect assumption.  Basically, this assumption renders the Hosted Powershell libraries completely usesless, as the install directory of the SMA cannot be known from the application (which is where the config file would have to be) and also does not necessarily know the install directory.  Which means anyone building an application using the Hoseted Powershell libraries has to MANUALY find the directory, find the Powershell Module directory, and drop a config file with that information.  All these things are known from the Powershell installer.  It does not make sense for an application to have to manage this when the required information is known by the library that is being used by the application.  Completely contrary to modern software development practices.\r\n\r\nFrom: Robert Holt [mailto:notifications@github.com]\r\nSent: Tuesday, November 27, 2018 12:38 PM\r\nTo: PowerShell/PowerShell <PowerShell@noreply.github.com>\r\nCc: Robinson, David (PTP) <drocs@allstate.com>; Mention <mention@noreply.github.com>\r\nSubject: [External] Re: [PowerShell/PowerShell] Utils.DefaultPowerShellAppBase gives the wrong directory for $PSHOME when downloading nuget package (#8323)\r\n\r\n\r\nThe point is that an application hosting PowerShell might not have the same preconceptions about the module path, so we don't promise to know anything about that. If we did, we would break other hosting scenarios.\r\n\r\nHave you tried calling this method:\r\nhttps://github.com/PowerShell/PowerShell/blob/9510fe56f52a2b55835aaa671d0de1c4c6c46ebc/src/System.Management.Automation/engine/Modules/ModuleIntrinsics.cs#L1012-L1027<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_PowerShell_PowerShell_blob_9510fe56f52a2b55835aaa671d0de1c4c6c46ebc_src_System.Management.Automation_engine_Modules_ModuleIntrinsics.cs-23L1012-2DL1027&d=DwMFaQ&c=gtIjdLs6LnStUpy9cTOW9w&r=gWXysqUi1eAfl1fYoSws1rg2xhI0je8ApWZzCl5hWWY&m=rgZ8dzB5OlpF4JTtK0gkecS0sJABtRkMdkAX29vNRSY&s=L16_h0wyWCDohtivW_Ng9GgT5s_703cBYYpTeOjehGQ&e=>\r\n\r\nRe: /etc and /var, yes that's being discussed in PowerShell/PowerShell-RFC#111<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_PowerShell_PowerShell-2DRFC_pull_111&d=DwMFaQ&c=gtIjdLs6LnStUpy9cTOW9w&r=gWXysqUi1eAfl1fYoSws1rg2xhI0je8ApWZzCl5hWWY&m=rgZ8dzB5OlpF4JTtK0gkecS0sJABtRkMdkAX29vNRSY&s=C7wNxv_K8qyuNlBaEwCA656CkOwbefj8tvr9YCMKDv8&e=>.\r\n\r\n\u2014\r\nYou are receiving this because you were mentioned.\r\nReply to this email directly, view it on GitHub<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_PowerShell_PowerShell_issues_8323-23issuecomment-2D442188563&d=DwMFaQ&c=gtIjdLs6LnStUpy9cTOW9w&r=gWXysqUi1eAfl1fYoSws1rg2xhI0je8ApWZzCl5hWWY&m=rgZ8dzB5OlpF4JTtK0gkecS0sJABtRkMdkAX29vNRSY&s=t6BnlWmrwuzVMWpOClO_sjywZfTFY4mpN_7qWH9x31I&e=>, or mute the thread<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_notifications_unsubscribe-2Dauth_ArHn4fy6oqdpgm1TZowp-5FXmpESLstzdNks5uzZR8gaJpZM4Yr3B9&d=DwMFaQ&c=gtIjdLs6LnStUpy9cTOW9w&r=gWXysqUi1eAfl1fYoSws1rg2xhI0je8ApWZzCl5hWWY&m=rgZ8dzB5OlpF4JTtK0gkecS0sJABtRkMdkAX29vNRSY&s=rmQBaYcxrFWtDvRWSYoTUSnYXzHxDELkDjTO7OXUlmg&e=>.\r\n",
      "created_at": "2018-11-27T19:57:39Z",
      "updated_at": "2018-11-27T19:57:39Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "I've looked into your particular problem now. I think the actual problem at play is that `Get-IISSite` hasn't been ported to be compatible with PowerShell Core -- we're still working with the team to get it working with .NET Core.\r\n\r\nI was thinking about the problem where the Windows module path doesn't seem to work with an embedded app and just decided to try it out. Here's my `Program.cs`:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Management.Automation;\r\n\r\nnamespace psproj\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            using (var pwsh = PowerShell.Create())\r\n            {\r\n                pwsh.AddCommand(\"Import-Module\")\r\n                    .AddParameter(\"SkipEditionCheck\", true)\r\n                    .AddParameter(\"Name\", \"DeliveryOptimization\")\r\n                    .Invoke();\r\n\r\n                IEnumerable<object> output = pwsh.AddScript(\"Get-DeliveryOptimizationPerfSnapThisMonth\").Invoke<object>();\r\n\r\n                foreach (object obj in output)\r\n                {\r\n                    Console.WriteLine(obj);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nRunning this with `dotnet run` gives the following output:\r\n\r\n```\r\nMonthlyUploadLanBytes           : 3,001,492,347\r\nMonthlyUploadInternetBytes      : 0\r\nMonthlyDownloadHttpBytes        : 20,925,016,490\r\nMonthlyDownloadLanBytes         : 3,712,189,616\r\nMonthlyDownloadInternetBytes    : 0\r\nMonthlyDownloadFgRateKbps       : 3,594\r\nMonthlyDownloadBgRateKbps       : 33,206\r\nMonthlyUploadLimitReached       : No\r\nMonthStartDate                  : 11/1/2018\r\n```\r\n\r\nI've just discovered there's a bug here where `pwsh.AddCommand(\"Get-DeliveryOptimizationPerfSnapThisMonth\")` doesn't work though.\r\n\r\n`DeliveryOptimization` is a Windows PowerShell module though, so this suggests to me that the Windows PowerShell module path is available to a PowerShell SDK process and the module is being loaded correctly.\r\n\r\nFor your IIS use case, I think the actual problem is that the `IISAdministration` module is not yet compatible with PowerShell Core.\r\n\r\nFor the PowerShellGet case, `Get-PackageProvider` in the case of PowerShell Core doesn't come from the Windows module path, it comes from the PowerShell module path, which PowerShellGet makes assumptions about. ~Wanting to call PowerShellGet cmdlets from an SDK-hosted PowerShell is why I opened https://github.com/PowerShell/PowerShell/issues/7082.~ That's not terribly related, but see below.",
      "created_at": "2018-11-27T20:20:56Z",
      "updated_at": "2018-11-27T20:31:13Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Just discussed the PowerShellGet problem a bit more with @SteveL-MSFT. Essentially any hosted application will have to manage its own module environment. `Install-Module` will be useless since it's coupled to the concept of the normal PowerShell installation, but `Save-Module` would be essential.\r\n\r\nCurrently, we don't bundle PowerShellGet as part of PowerShell in the SDK at all, and PowerShellGet is not available as a nuget package, making this situation quite tricky.\r\n\r\nMy current thinking is that we could ask PowerShellGet for a nuget package so that hosted PowerShell can easily ship with PowerShellGet. Otherwise, it could be bundled at build time with `Save-Module` and the application shipped with it.",
      "created_at": "2018-11-27T20:30:47Z",
      "updated_at": "2018-11-27T20:30:47Z"
    },
    {
      "author": "drocs",
      "author_association": "NONE",
      "body": "Yes, I realized that about the IISModules.  The more concerning problem is the Module path.  If you debug ModuleIntrinsics.GetModulePath and set a breakpoint on line 229 of the Utils.cs class, that is where the real problem is.  It assumes that the SMA dll is located in the same directory as the Modules directory.  This isn\u2019t a correct assumption given that the library can be downloaded from nuget.\r\n\r\nFrom: Robert Holt [mailto:notifications@github.com]\r\nSent: Tuesday, November 27, 2018 1:22 PM\r\nTo: PowerShell/PowerShell <PowerShell@noreply.github.com>\r\nCc: Robinson, David (PTP) <drocs@allstate.com>; Mention <mention@noreply.github.com>\r\nSubject: [External] Re: [PowerShell/PowerShell] Utils.DefaultPowerShellAppBase gives the wrong directory for $PSHOME when downloading nuget package (#8323)\r\n\r\n\r\nI've looked into your particular problem now. I think the actual problem at play is that Get-IISSite hasn't been ported to be compatible with PowerShell Core -- we're still working with the team to get it working with .NET Core.\r\n\r\nI was thinking about the problem where the Windows module path doesn't seem to work with an embedded app and just decided to try it out. Here's Program.cs:\r\n\r\nusing System;\r\n\r\nusing System.Collections.Generic;\r\n\r\nusing System.Management.Automation;\r\n\r\n\r\n\r\nnamespace psproj\r\n\r\n{\r\n\r\n    class Program\r\n\r\n    {\r\n\r\n        static void Main(string[] args)\r\n\r\n        {\r\n\r\n            using (var pwsh = PowerShell.Create())\r\n\r\n            {\r\n\r\n                pwsh.AddCommand(\"Import-Module\")\r\n\r\n                    .AddParameter(\"SkipEditionCheck\", true)\r\n\r\n                    .AddParameter(\"Name\", \"DeliveryOptimization\")\r\n\r\n                    .Invoke();\r\n\r\n\r\n\r\n                IEnumerable<object> output = pwsh.AddScript(\"Get-DeliveryOptimizationPerfSnapThisMonth\").Invoke<object>();\r\n\r\n\r\n\r\n                foreach (object obj in output)\r\n\r\n                {\r\n\r\n                    Console.WriteLine(obj);\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nRunning this with dotnet run gives the following output:\r\n\r\nMonthlyUploadLanBytes           : 3,001,492,347\r\n\r\nMonthlyUploadInternetBytes      : 0\r\n\r\nMonthlyDownloadHttpBytes        : 20,925,016,490\r\n\r\nMonthlyDownloadLanBytes         : 3,712,189,616\r\n\r\nMonthlyDownloadInternetBytes    : 0\r\n\r\nMonthlyDownloadFgRateKbps       : 3,594\r\n\r\nMonthlyDownloadBgRateKbps       : 33,206\r\n\r\nMonthlyUploadLimitReached       : No\r\n\r\nMonthStartDate                  : 11/1/2018\r\n\r\nI've just discovered there's a bug here where pwsh.AddCommand(\"Get-DeliveryOptimizationPerfSnapThisMonth\") doesn't work though.\r\n\r\nDeliveryOptimization is a Windows PowerShell module though, so this suggests to me that the Windows PowerShell module path is available to a PowerShell SDK process and the module is being loaded correctly.\r\n\r\nFor your IIS use case, I think the actual problem is that the IISAdministration module is not yet compatible with PowerShell Core.\r\n\r\nFor the PowerShellGet case, Get-PackageProvider in the case of PowerShell Core doesn't come from the Windows module path, it comes from the PowerShell module path, which PowerShellGet makes assumptions about. Wanting to call PowerShellGet cmdlets from an SDK-hosted PowerShell is why I opened #7082<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_PowerShell_PowerShell_issues_7082&d=DwMFaQ&c=gtIjdLs6LnStUpy9cTOW9w&r=gWXysqUi1eAfl1fYoSws1rg2xhI0je8ApWZzCl5hWWY&m=1GxSnB9FqG2MowGrS1zPJFmF8nY0FzC23o6dKumExMg&s=23KiH_gFGmT-bAMsc5bWoatTLnqdnyYFGg3-qO6BjyM&e=>.\r\n\r\n\u2014\r\nYou are receiving this because you were mentioned.\r\nReply to this email directly, view it on GitHub<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_PowerShell_PowerShell_issues_8323-23issuecomment-2D442203153&d=DwMFaQ&c=gtIjdLs6LnStUpy9cTOW9w&r=gWXysqUi1eAfl1fYoSws1rg2xhI0je8ApWZzCl5hWWY&m=1GxSnB9FqG2MowGrS1zPJFmF8nY0FzC23o6dKumExMg&s=u8nalW70moOc88UizR1WxvIQMsrHXsinb70Nmt5Ae5k&e=>, or mute the thread<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_notifications_unsubscribe-2Dauth_ArHn4U7-2DgZmKVr5bZg2spLxvl3tEpaSOks5uzZ7RgaJpZM4Yr3B9&d=DwMFaQ&c=gtIjdLs6LnStUpy9cTOW9w&r=gWXysqUi1eAfl1fYoSws1rg2xhI0je8ApWZzCl5hWWY&m=1GxSnB9FqG2MowGrS1zPJFmF8nY0FzC23o6dKumExMg&s=c9U2iXNdF3hVJuHmG1TSECO4qNI6g6SjqnC0jnhnyJw&e=>.\r\n",
      "created_at": "2018-11-27T20:32:49Z",
      "updated_at": "2018-11-27T20:32:49Z"
    },
    {
      "author": "drocs",
      "author_association": "NONE",
      "body": "BTW:  Line 957-987 of ModuleIntrinsics.cs make the problem even more nefarious:  The comments and code associated all assume the path returned by Utils.DefaultPowerShellAppBase will be similar to syswow64 or system32, and assume that the location of the SMA dll is where the Powershell Modules have been installed.  No consideration for the nuget package installer is taken into account.\r\n\r\nFrom: Robert Holt [mailto:notifications@github.com]\r\nSent: Tuesday, November 27, 2018 1:31 PM\r\nTo: PowerShell/PowerShell <PowerShell@noreply.github.com>\r\nCc: Robinson, David (PTP) <drocs@allstate.com>; Mention <mention@noreply.github.com>\r\nSubject: [External] Re: [PowerShell/PowerShell] Utils.DefaultPowerShellAppBase gives the wrong directory for $PSHOME when downloading nuget package (#8323)\r\n\r\n\r\nJust discussed the PowerShellGet problem a bit more with @SteveL-MSFT<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_SteveL-2DMSFT&d=DwMFaQ&c=gtIjdLs6LnStUpy9cTOW9w&r=gWXysqUi1eAfl1fYoSws1rg2xhI0je8ApWZzCl5hWWY&m=RLB4Eip9fu0_khqD5dJ0fdvjUQCiqtl8ahOF8K5UdH8&s=yDpPAj3w_XhC6qO92XZt5tiEdweJUkJD2aNOBcIr-nc&e=>. Essentially any hosted application will have to manage its own module environment. Install-Module will be useless since it's coupled to the concept of the normal PowerShell installation, but Save-Module would be essential.\r\n\r\nCurrently, we don't bundle PowerShellGet as part of PowerShell in the SDK at all, and PowerShellGet is not available as a nuget package, making this situation quite tricky.\r\n\r\nMy current thinking is that we could ask PowerShellGet for a nuget package so that hosted PowerShell can easily ship with PowerShellGet. Otherwise, it could be bundled at build time with Save-Module and the application shipped with it.\r\n\r\n\u2014\r\nYou are receiving this because you were mentioned.\r\nReply to this email directly, view it on GitHub<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_PowerShell_PowerShell_issues_8323-23issuecomment-2D442206096&d=DwMFaQ&c=gtIjdLs6LnStUpy9cTOW9w&r=gWXysqUi1eAfl1fYoSws1rg2xhI0je8ApWZzCl5hWWY&m=RLB4Eip9fu0_khqD5dJ0fdvjUQCiqtl8ahOF8K5UdH8&s=ePUigegvtGlaDRH4SHlOimncjvXKvQnX1limks9kGko&e=>, or mute the thread<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_notifications_unsubscribe-2Dauth_ArHn4SRrmrDleOOJK55exEcm3tFQg3-5FPks5uzaEUgaJpZM4Yr3B9&d=DwMFaQ&c=gtIjdLs6LnStUpy9cTOW9w&r=gWXysqUi1eAfl1fYoSws1rg2xhI0je8ApWZzCl5hWWY&m=RLB4Eip9fu0_khqD5dJ0fdvjUQCiqtl8ahOF8K5UdH8&s=PfvBXinHgVw5bE6kJ7nKHwdyHI8FFbn5V20HvA7wGM8&e=>.\r\n",
      "created_at": "2018-11-27T20:56:15Z",
      "updated_at": "2018-11-27T20:56:15Z"
    },
    {
      "author": "drocs",
      "author_association": "NONE",
      "body": "This is the result of the function call ModuleIntrinsics.GetModulePath(null, null, null); :\r\nC:\\Users\\drocs\\Documents\\PowerShell\\Modules;C:\\Program Files\\PowerShell\\Modules;c:\\users\\drocs\\.nuget\\packages\\system.management.automation\\6.1.1\\runtimes\\win-x64\\lib\\netstandard2.0\\Modules\r\n\r\nNotice the last path is incorrect.",
      "created_at": "2018-11-27T22:30:28Z",
      "updated_at": "2018-11-27T22:30:28Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@drocs It's not that the assumption is that the Modules directory is in `$PSHome`, that's the contract -- it's by design. If you want to use modules in your hosted scenario, you need to do one of:\r\n\r\n- Put them in a folder called `Modules` in the `$PSHome` directory and ship it with the application.\r\n- Use a `powershell.config.json` to set the PSModulePath to point to the desired location before starting PowerShell.\r\n\r\nThe first scenario is the most robust (pending possible considerations in the configuration RFC) and is best serviced by a build script that calls `dotnet publish -f netcoreapp2.1` and then uses `Save-Module`. Because once you publish and redistribute your app, there will be no nuget cache path.\r\n\r\nThe hosted app scenario is designed for systems where there is no pre-existing PowerShell installation. And possibly no concept of \"CurrentUser\" scope. It has to service blank slate containers. The additional context (like using the PowerShell modules of another PowerShell installation as you are trying to do) is something that we don't promise to manage.",
      "created_at": "2018-11-27T22:33:02Z",
      "updated_at": "2018-11-27T22:33:19Z"
    },
    {
      "author": "drocs",
      "author_association": "NONE",
      "body": "This severely limits the usefulness of the Powershell SDK.  Basically what you are saying is that I cannot run any scripts that I've built using the Windows Powershell ISE.",
      "created_at": "2018-11-27T22:41:06Z",
      "updated_at": "2018-11-27T22:51:40Z"
    }
  ],
  "created_at": "2018-11-20T20:20:41Z",
  "labels": [
    "WG-Engine",
    "Issue-Discussion"
  ],
  "number": 8323,
  "state": "open",
  "title": "Utils.DefaultPowerShellAppBase gives the wrong directory for $PSHOME when downloading nuget package",
  "updated_at": "2018-11-27T22:51:40Z"
}