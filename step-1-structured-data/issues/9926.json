{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9926",
  "author": "iSazonov",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nAdd new module Microsoft.PowerShell.AccountManagement\r\nThere is only single cmdlet New-User to keep the PR as small as possible.\r\nLater we will add other cmdlets.\r\n\r\n## PR Context\r\n\r\nRelated #2996\r\n\r\nModule Microsoft.PowerShell.LocalAccounts was removed from PowerShell Core because of using non-public APIs.\r\nMicrosoft.PowerShell.AccountManagement uses only public APIs and based on System.DirectoryServices.AccountManagement.\r\n\r\nIt is impossible to get full backward compatibility with Microsoft.PowerShell.LocalAccounts module due to differences of the underlying API.\r\nSo the main model was chosen Microsoft ActiveDirectory module.\r\nIt will be easier for users to migrate from Microsoft.PowerShell.LocalAccounts to a more functional Microsoft.PowerShell.LocalAccounts module if necessary.\r\n\r\n## PR Checklist\r\n\r\n- [ ] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [ ] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n",
  "closed_at": "2020-06-02T05:20:04Z",
  "comments": [
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "is the syntax the same as the windows PowerShell cmdlet?",
      "created_at": "2019-06-18T17:36:21Z",
      "updated_at": "2019-06-18T17:36:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13 No, as mentioned in the PR description the used API is another and it impossible to keep _full_ backward compatibility. The new design is closer to ActiveDirectory module. It make more sense because scripts can works (manage accounts) without the need to install AdminTools everyware. \r\nI did not look at this in detail, but it is quite possible that we could get almost the same functionality using the cmdlet aliases and parameters. I suppose it should stay outside of this module.",
      "created_at": "2019-06-18T18:09:40Z",
      "updated_at": "2019-06-18T18:09:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Last days CI Macos frequently time out.",
      "created_at": "2019-06-18T18:11:44Z",
      "updated_at": "2019-06-18T18:11:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT  Can your team review so that we can move on and add more cmdlets in follow PRs?",
      "created_at": "2019-06-19T11:25:36Z",
      "updated_at": "2019-06-19T11:25:36Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "IMO this should be externalised, released to the Gallery and pulled into the output build of PowerShell (like PowerShellGet) instead of being added to the codebase",
      "created_at": "2019-06-19T11:28:12Z",
      "updated_at": "2019-06-19T11:28:12Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "I agree with @kilasuit. This should ideally go to PSGallery and be pulled down.",
      "created_at": "2019-06-19T16:15:49Z",
      "updated_at": "2019-06-19T16:15:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We have a base account management in Windows PowerShell many years. If plan is to replace Windows PowerShell with PowerShell 7.0 we need to get back most of common modules and features that we lost in porting time. \r\n\r\n- Please point me the community that is ready to take on the production of this module for all the necessary platforms. Over the past 3 years, I have repeatedly heard that we need to decouple modules. But where are the people who take it upon themselves? I am ready to make the module (and make other contributions) _in the repo_ but I am not ready to take on the entire production cycle.\r\n\r\n- Currently I have 99.9% needed PowerShell features in-box on all my enterprise servers to manage the infrastructure. Today we (I say about enterprise) cannot replace Windows PowerShell with PowerShell Core because it is slow, consumes a lot of resources and, mostly, lost a lot of functionality. (I do not think that it is possible to fix it a few months before the 7.0 release.) We can not freely use third-party modules because strong enterprise policy - we can not trust whole Internet, validate every new version, we have isolated networks. PowerShell for us is an enterprise level management tool. If it will have not all we had many years we will have to spend time and money to implement/find workarounds (maybe write internal scripts to replace gaps or more likely to replace it with a better alternative management tool).",
      "created_at": "2019-06-19T18:25:47Z",
      "updated_at": "2019-06-19T18:25:47Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I don't think there's any necessary need to force these to be a completely separate module.\r\n\r\nMaybe have a tracking issue or issues for such modules that we want to eventually have out of box? Separating them to a separately shipped module and/or pulling them into the PS build cycle isn't a huge undertaking in and of itself.\r\n\r\nI don't see why we need reject this as it is at the present; we can always move to separate it to a separate module when someone willing to maintain and develop it further steps up, whether from the PS team or the community.",
      "created_at": "2019-06-19T19:02:23Z",
      "updated_at": "2019-06-19T19:02:23Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I think we would want to include this as part of the PS7 package, but also think it should be a separate module that is published to PSGallery and have its own repo.  Eventually, I want to split up and move Utility and Management modules out of this repo (see https://github.com/PowerShell/PowerShell/issues/9960).  Since the code is all self contained in a single folder, I think it's ok to just keep it in this repo for now and we can move it out when we do so for the others.  By that time, hopefully we'll have templatized how to create the repos, contributing docs/etc.., enable CI, etc...",
      "created_at": "2019-06-20T06:17:09Z",
      "updated_at": "2019-06-20T06:17:09Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Should have the @PowerShell/powershell-committee do a cmdlet review",
      "created_at": "2019-06-20T06:23:35Z",
      "updated_at": "2019-06-20T06:23:35Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "My main concern about module decouples is that we will waste a lot of time and resources without benefits.\r\n\r\n\r\nLet's look at PowerShell-Native lib. How many benefits did we get? I think we only complicate dev process. Before the decouple I could make PR in the PowerShell repo and get test results in minutes. Now I do not even know how long it takes to set up the environment, compile and get test results (only locally!). This is not so important as the module is stable.\r\n\r\nMain benefit from the decoupling I see for projects which is under high community development activity. \r\nHave we such modules in the repo? No, all modules is stable.\r\nI guess we could develop new HelpSystem module in separate repo but first we should decouple current one from engine but after that I don't expect high community activity so the moving in a separate project loses its meaning - if someone wants to make another module based on new public API he can do it in himself repo.\r\n\r\nSecond benefit is the ability to create a PowerShell distributive of the minimum size.\r\n\r\nWe could easily resolve this like .Net Core does. They have a runtime with most of needed code and dozen packages.\r\nThis means that important frequently used modules live in this PowerShell repository, but are also published as packages (or/and directly included in distributive).\r\n",
      "created_at": "2019-06-20T13:02:09Z",
      "updated_at": "2019-06-20T13:02:09Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov yes, we could still publish the modules in PSGallery while keeping the code in this repo.  It may depend on whether someone (or some people) step up to be maintainers of that module to justify putting it in separate repo.",
      "created_at": "2019-06-20T15:20:53Z",
      "updated_at": "2019-06-20T15:20:53Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "quoting @SteveL-MSFT \r\n>I think we would want to include this as part of the PS7 package, but also think it should be a separate module that is published to PSGallery and have its own repo. Eventually, I want to split up and move Utility and Management modules out of this repo (see #9960). Since the code is all self contained in a single folder, I think it's ok to just keep it in this repo for now and we can move it out when we do so for the others. By that time, hopefully we'll have templatized how to create the repos, contributing docs/etc.., enable CI, etc...\r\n\r\nIn all honesty this is something that has needed prioritising for far too long now and with each month that passes with new additions like this suggested new module it makes the task harder and harder and IMO unlikely that it will ever happen. The community have tried to help get steering on this many times before however the issue becomes a case of it being very opinionated on how the best way forward is. I personally want to see this happen for v7 \r\n\r\nMy main concern about bundling more and more into this repo is unnecessary bloat that is not critical to the running and using of the core engine of PowerShell. PowerShellGet/PSReadline are 2 examples where they aren't engine critical so rightly live outside the engine and can be pulled in at packaging time.\r\n\r\nHonestly as part of v7 plans you should minimize the amount of code being added to this repo that is new functionality that is not v7 critical (this change IMO is not critical for PowerShell use in v7) and therefore should be externalised and any new modules to be bundled into this repo should go through RFC Process IMO\r\n\r\nAlso see my comment in #9960 - this to me feels like the wrong place to put effort in. \r\n\r\n\r\n> We could easily resolve this like .Net Core does. They have a runtime with most of needed code and dozen packages.\r\n\r\nThis would be the output of this issue would it not - #5681 - which is where I would like to see v7 lead to. with default install being minimal but additional packages available to bootstrap other uses (which in windows could be additional check boxes in the additional features part of programs and features)",
      "created_at": "2019-06-20T15:49:05Z",
      "updated_at": "2019-06-20T15:49:05Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@PowerShell/powershell-committee agrees that this module should have an RFC, irrespective of whether it's packaged with PS7 or released only to the Gallery. Currently, we're unclear on whether this would be cross-platform, as well as what the all-up cmdlet surface area would look like. (Even if you start with one cmdlet, it should make sense in the context of a planned design for the rest of the module.)\r\n\r\nWe also just commented in #9960, and agree that the decision there should not block whether we accept this PR. \r\n\r\n@iSazonov I totally hear your requirements around not being able to pull things in from the web, and to that end I think it's important to separate the two issues around shipping modules in the Gallery and where the source code ultimately lives. Those should be independent, and we should close them in #9960.\r\n\r\nThat being said, we do believe it makes sense for this to start as a Gallery module for validation. This isn't to say it should never be included in any PS7 package of any kind, but it would allow you to iterate much more quickly than if we are constrained by the RFC process. And in fact, you could publish to the Gallery today, we on the team and in the community could play with it, and your implementation can serve as a much easier basis for writing and reviewing an RFC about taking it into PS7. \r\n\r\n(And we discussed that it might be a good idea to actually make that the general guidance for contributing new modules all up.)",
      "created_at": "2019-06-26T23:01:08Z",
      "updated_at": "2019-06-26T23:01:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "For full understanding, my main intention here was/is only to plug a hole with LocalAccount module before 7.0 release. Nothing more :-)\r\n\r\nLooking back, I see how the MSFT contribution policy has changed from very strict to liberal. _Automation tools contributed to this._ Now, I even speculated that the number of contributors has increased - because the dev process has become easier to do PRs.\r\n\r\nNow I dream that this process will move to a new level. :-)\r\n\r\nProbably many of us have indoor flowers. They are not difficult to care for and water, and they bring pleasure. Fewer people are ready to plant flowers in front of the house because it takes more time and effort. And very few people are willing to go a long way to devote their time somewhere to caring for flowers, and even more so to do it in many places just for fun.\r\nI mean - most members of the community are present here for fun and not business. The further you move the code away from the center and the more it is sprayed on the repositories, the more costs you cause and the less pleasure it brings.\r\n\r\nThe best model for community contributions that MSFT invented is the CoreFX / CoreCLR model. They separated auxiliary projects like performance, installation, core tools, etc. but combined all featured code in the center (note that this is a _huge_ number of packages).\r\n\r\nI pulled PR with Simple Case Folding to corefxlab repo and ask after the PR merging when the package will be published - the answer was that it was already auto published immediately after the merging.\r\n\r\nIf PowerShell team wants to move forward with in integrating with dev community, it could create a similar infrastructure so that contributors can promote modules just as easily as in Core.\r\n\r\nI am pleased to take care of the flowers in this room, but I am not ready to rush through wild remote plantations. :-)",
      "created_at": "2019-06-27T10:51:57Z",
      "updated_at": "2019-06-27T10:51:57Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMainainer, Please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-05-27T02:03:44Z",
      "updated_at": "2020-05-27T02:03:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Closed with https://github.com/PowerShell/PowerShell/pull/12242#issuecomment-637072659",
      "created_at": "2020-06-02T05:20:01Z",
      "updated_at": "2020-06-02T05:20:01Z"
    }
  ],
  "created_at": "2019-06-18T14:34:51Z",
  "number": 9926,
  "state": "closed",
  "title": "Add module AccountManagement",
  "updated_at": "2020-06-02T05:20:04Z"
}