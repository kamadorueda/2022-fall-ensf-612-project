{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15135",
  "author": "krowlandson",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\n## Steps to reproduce\r\n\r\nWhen loading an empty file into PowerShell using the `Get-Content` command, the returned object is a `null-valued expression`.\r\n\r\nThis makes it impossible to correctly evaluate against a `switch` statement.\r\n\r\nContent of `emptyFile.json`:\r\n```json\r\n```\r\n\r\n> NOTE: This must be a completely empty file. Any characters or whitespace changes the behaviour.\r\n\r\n### Example 1\r\n\r\nPowerShell Code:\r\n```powershell\r\n$fileContent = (Get-Content ./emptyFile.json)\r\nswitch ( $fileContent )\r\n{\r\n    $null\r\n    {\r\n        'Value is null'\r\n    }\r\n    default\r\n    {\r\n        'Value is not null'\r\n    }\r\n}\r\n```\r\n\r\nOutput:\r\n```shell\r\n\r\n```\r\n\r\nIn this example, we see that the `switch` statement fails to evaluate `$fileContent`, providing no output. This means the `switch` statement is also failing to return the `default` case.\r\n\r\n### Example 2\r\n\r\nPowerShell Code:\r\n```powershell\r\n$fileContent = ((Get-Content ./emptyFile.json) ?? \"\")\r\nswitch ( $fileContent )\r\n{\r\n    $null\r\n    {\r\n        'Value is null'\r\n    }\r\n    default\r\n    {\r\n        'Value is not null'\r\n    }\r\n}\r\n```\r\n\r\nOutput:\r\n```shell\r\nValue is not null\r\n```\r\n\r\nIn this example, the null-coalescing operator correctly identifies that the output of `Get-Content ./emptyFile.json` to `null`, replacing the value with an empty string, resulting in the response `Value is not null`.\r\n\r\n### Example 3\r\n\r\nPowerShell Code:\r\n```powershell\r\n$fileContent = ((Get-Content ./emptyFile.json) ?? $null)\r\nswitch ( $fileContent )\r\n{\r\n    $null\r\n    {\r\n        'Value is null'\r\n    }\r\n    default\r\n    {\r\n        'Value is not null'\r\n    }\r\n}\r\n```\r\n\r\nOutput:\r\n```shell\r\nValue is null\r\n```\r\n\r\nIn this example, the null-coalescing operator correctly identifies that the output of `Get-Content ./emptyFile.json` to `null`, replacing the value with `$null`, resulting in the response `Value is null`.\r\n\r\nThis shows that although [switch can evaluate a `null` value](https://docs.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-switch?view=powershell-7.1#null), the `null-valued expression` returned by `Get-Content ./emptyFile.json` doesn't get evaluated but also doesn't generate any errors.\r\n\r\n### Additional context\r\n\r\nIn our case we are actually using the `ConvertFrom-Json` function to convert the content of the file (expected to be valid JSON) into an object.\r\n\r\nWe have also noted the following:\r\n\r\n```powershell\r\n# Command:\r\nGet-Content ./emptyFile.json | ConvertFrom-Json\r\n# Response (none):\r\n# \r\n\r\n# Command:\r\n$null | ConvertFrom-Json\r\n# Response:\r\n# ConvertFrom-Json: Cannot bind argument to parameter 'InputObject' because it is null.\r\n\r\n# Command:\r\n\"\" | ConvertFrom-Json\r\n# Response (none):\r\n# \r\n\r\n# Command:\r\n(Get-Content ./emptyFile.json).GetType()\r\n# Response:\r\n# InvalidOperation: You cannot call a method on a null-valued expression.\r\n```\r\n\r\nAs you can see, despite the output of `Get-Content ./emptyFile.json` being a null-valued expression, this doesn't cause the `ConvertFrom-Json` function to throw an error. This in turn also means the output is the parsed to the `switch` statement as a null-valued expression, but switch appears not to be able to evaluate this input, unlike a standard `if` statement.\r\n\r\n## Expected behaviour\r\n\r\nExpected behaviour is for `Get-Content` to return either a properly initialized `$null` or empty string value as the response when successfully loading an empty file.\r\n\r\n## Actual behaviour\r\n\r\n `Get-Content` returns a `null-valued expression` when parsing an empty file.\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "This is by design. You can force the use of an array by using the array sub-expression `@()`\r\n\r\n```powershell\r\n$fileContent = @((Get-Content ./emptyFile.json) ?? $null)\r\nswitch ( $fileContent )\r\n{\r\n    $null\r\n    {\r\n        'Value is null'\r\n    }\r\n    default\r\n    {\r\n        'Value is not null'\r\n    }\r\n}\r\n\r\n#output\r\n\r\nValue is null\r\n```",
      "created_at": "2021-04-01T13:57:24Z",
      "updated_at": "2021-04-01T13:57:24Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "```\r\nswitch ( $fileContent -eq $null )\r\n{\r\n    $true\r\n    {\r\n        'Value is null'\r\n    }\r\n    default\r\n    {\r\n        'Value is not null'\r\n    }\r\n}\r\n\r\n```",
      "created_at": "2021-04-01T14:32:39Z",
      "updated_at": "2021-04-01T14:32:39Z"
    },
    {
      "author": "krowlandson",
      "author_association": "NONE",
      "body": "Thank you for your response @237dmitry. Unfortunately in our case we need to evaluate the content of `$fileContent` so evaluating the result of the evaluation within the switch will not meet our needs. My examples above are highly simplified to illustrate the issue we're facing.",
      "created_at": "2021-04-01T19:41:46Z",
      "updated_at": "2021-04-01T19:42:04Z"
    },
    {
      "author": "krowlandson",
      "author_association": "NONE",
      "body": "Thank you for your response @powercode.\r\n\r\nPlease can you explain what you mean by:\r\n\r\n> This is by design. You can force the use of an array by using the array sub-expression @()\r\n\r\nI'm struggling to understand why a file with no content returns an object type which is inconsistent with when the file has content, and why this would be by design? This would be like making an empty string, not a string? Or have I misunderstood something?\r\n\r\nAlso, what is the purpose of forcing the use of an array? If I remove the null-coalescing operator (which I already know resolves the issue without the array), I still get the same outcome as without the array?",
      "created_at": "2021-04-01T19:49:03Z",
      "updated_at": "2021-04-01T19:49:03Z"
    },
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "Some (hopefully clarifying) notes:\r\n\r\nFirst, the `switch` statement is an iterator (i.e. a loop). For example:\r\n```powershell\r\nswitch (1,2,3,4) { {$_ % 2} {\"odd\"} default {\"even\"}}\r\n```\r\nreturns `odd,even,odd,even`. \r\n\r\nSecond, `Get-Content emptyfile.txt` returns `\"\"` not `$null` so do:\r\n```powershell\r\n{master}PSCore (1:35) >  switch (gc emptyfile.json) { \"\" {\"empty\"} default {\"default\"}}\r\nempty\r\n```\r\nNow if you actually pass null. it works as expected:\r\n```powershell\r\n{master}PSCore (1:37) >  switch ($null) { $null {\"null\"} default {\"default\"}}\r\nnull\r\n```\r\nFinally. if somewhat orthogonally. `switch` has a `-file` parameter that lets you iterate through the lines of a file:\r\n```powershell\r\nswitch -file c:\\temp\\empty.txt { \"\" {\"empty\"} default {\"default\"}}\r\n```\r\nso you don't actually need to call `Get-Content`.",
      "created_at": "2021-04-02T03:15:15Z",
      "updated_at": "2021-04-02T03:15:15Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "To add to the existing comments:\r\n\r\nThis comes down to the distinction between bona fide `$null` and the _situationally_ equivalent [`[System.Management.Automation.Internal.AutomationNull]::Value` singleton](https://docs.microsoft.com/en-US/dotnet/api/System.Management.Automation.Internal.AutomationNull.Value), which is used _behind the scenes_ to represent the case when a PowerShell command (cmdlet, function, script, script block) returns _no output_ (which is most easily created with `$automationNull = & { }`).\r\n\r\n* In _expression_ contexts, `$null` and this special singleton are considered _equal_:\r\n\r\n  * `$null -eq [System.Management.Automation.Internal.AutomationNull]::Value` returns `$true`\r\n\r\n* In _enumeration_ contexts - notably in a _pipeline_ _and also in a `switch` statement_, these values behave _differently_: `$null` _is_ enumerated - as itself, whereas `[System.Management.Automation.Internal.AutomationNull]::Value` is _not_; that is, it behaves like an _empty collection_ in this context:\r\n  * `$null | ForEach-Object { 'hi, mom' }` -> `hi, mom`\r\n  *  `& {} | ForEach-Object { 'why won''t anybody call me?' }` -> no output, because the script block is never invoked (the statement as a whole again \"outputs\" `[System.Management.Automation.Internal.AutomationNull]::Value` \r\n\r\nIn your case this means: the branches of the `switch` statement are never evaluated, because the statement _receives no input_.\r\n\r\nWithout all this - undocumented - background information, I'm not surprised at all that questions arose for you.\r\n\r\nFor that very reason, #13465 proposes implementing `-is [AutomationNull]` as a simple test to distinguish `$null` from `[System.Management.Automation.Internal.AutomationNull]::Value`.\r\n\r\nA stopgap solution for detecting `[System.Management.Automation.Internal.AutomationNull]::Value` in, say, a variable `$var` is:\r\n\r\n```powershell\r\n$null -eq $var -and $var -is [psobject]\r\n```\r\n\r\nSlightly less obscure:\r\n\r\n```powershell\r\n$null -eq $var -and @($var).Count -eq 0\r\n```\r\n\r\n\r\n\r\n",
      "created_at": "2021-04-02T21:41:40Z",
      "updated_at": "2021-04-03T12:41:57Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "To clarify, @bpayette: `Get-Content emptyfile.txt` doesn't return `\"\"`, it outputs \"nothing\", i.e. `[System.Management.Automation.Internal.AutomationNull]::Value`, which explains the `switch` behavior (it receives no input, and therefore doesn't evaluate its branches).\r\n\r\nWhile you would expect that `\"\"` is returned when you use `GetContent -Raw emptyfile.txt` - i.e. asking for the entire file _as a single string_ - surprisingly you get `[System.Management.Automation.Internal.AutomationNull]::Value` too - see #3911.\r\n\r\n\r\n\r\n",
      "created_at": "2021-04-03T12:48:20Z",
      "updated_at": "2021-04-03T12:49:11Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> Also, what is the purpose of forcing the use of an array? \r\n\r\nTechnically, you don't actually need to do that, `$fileContent = (Get-Content ./empty.txt) ?? $null` is enough (as in your example 3).\r\n\r\nIn fact, that `[System.Management.Automation.Internal.AutomationNull]::Value` _behaves like an empty array_, causing `switch` to enumerate _nothing_, is the problem to begin with.\r\n\r\n`(Get-Content ./empty.txt) ?? $null` is the equivalent of `[System.Management.Automation.Internal.AutomationNull]::Value ?? $null` and - somewhat ironically - it is the fact that `[System.Management.Automation.Internal.AutomationNull]::Value` _is_ considered `$null` _in this expression context_ that makes the expression return the actual `$null`.\r\n\r\nAnd the actual `$null` - as a scalar of sorts - _is_ processed by `switch`. That is, in terms of _enumeration_, `$null` behaves like `@($null)`, i.e. a collection of size 1 whose only element is `$null`, and that element is evaluated against the `switch` branches; that's why the `@(...)` makes no difference in this scenario.\r\n\r\n---\r\n\r\nAlso, even though it can be inferred from the above, let me point out that when the file _isn't_ empty, the `switch` statement is evaluated _for each line_. That is, `$fileContent = Get-Content ./emptyFile.json; switch ($fileContent) ...` is functionally equivalent to `switch -File ./emptyFile.json ...`\r\n\r\nTo treat the file content as a single, multi-line string, use `-Raw` - though you still need the `?? $null` workaround due to #3911:\r\n\r\n```powershell\r\n# Read file into a single string, which cause `switch` to receive only *one * input object.\r\n$fileContent = (Get-Content -Raw ./emptyFile.json) ?? $null\r\nswitch ($fileContent)\r\n{\r\n    $null\r\n    {\r\n        'Value is null'\r\n    }\r\n    default\r\n    {\r\n        'Value is not null'\r\n    }\r\n}\r\n```\r\n",
      "created_at": "2021-04-03T12:59:59Z",
      "updated_at": "2021-04-03T13:08:53Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Final thoughts:\r\n\r\n* Because `[System.Management.Automation.Internal.AutomationNull]::Value` behaves like an empty collection, its `.Count` property value is `0`, so `0 -eq $fileContent.Count` tells you whether the file is empty.\r\n\r\n* If #3911 gets implemented, `'' -eq $fileContent` could be used after `$fileContent = Get-Content -Raw ./emptyFile.json` - note the test against the _empty string_ rather than `$null`, because `[string]`-typed values in PowerShell are never `$null` (unless you use the `[NullString]::Value` singleton, which should be limited to .NET API calls).\r\n\r\n   * What currently already works _with `-Raw`_ is to rely on PowerShell's _implicit to-Boolean conversions_; that is, `-not $fileContent` indicates an empty file (_without_ `-Raw`, both a truly empty file and one containing solely a newline sequence would return `$true` for this test).\r\n\r\nAs an aside: There is a general pitfall with respect to how _nonempty collections_ are interpreted as Booleans (an _empty_ collection, just like `[System.Management.Automation.Internal.AutomationNull]::Value` (and `$null`), always evaluates to `$false`): something like `[bool] @($null)` is `$false`, because any _single-element_ collection is unwrapped before converting, and `[bool] $null` is `$false`; _multi_-element collections, by contrast, are _always_ `$true`, irrespective of the data types and values of their elements; e.g., `[bool] ($null, $null)` is `$true`.\r\n\r\n",
      "created_at": "2021-04-04T14:54:06Z",
      "updated_at": "2021-04-04T15:42:00Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "```powershell\r\n > New-Item empty.txt | Out-Null\r\n > (Get-Item empty.txt).Length  \r\n0 \r\n                              \r\n > & {                          \r\n  :     switch (${c:empty.txt})     \r\n  :     {                           \r\n  :         $null   { 'null' }            \r\n  :         default { 'default' }       \r\n  :     }                           \r\n  : }                           \r\nnull\r\n                            \r\n > '1' >> empty.txt             \r\n > (Get-Item empty.txt).Length  \r\n3 \r\n                             \r\n > & {                          \r\n  :     switch (${c:empty.txt})     \r\n  :     {                           \r\n  :         $null   { 'null' }            \r\n  :         default { 'default' }       \r\n  :     }                           \r\n  : }                           \r\ndefault                         \r\n```\r\nInstead of `c:` you can create PSDrive and use it's name. `${name:empty.txt}`",
      "created_at": "2021-04-04T17:20:28Z",
      "updated_at": "2021-04-04T17:20:28Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @237dmitry. It's certainly interesting that using _namespace variable notation_ with files yields bona fide `$null` with an empty file, however:\r\n\r\n* Since `${c:empty.txt}` is effectively the same as `Get-Content c:empty.txt`, it should instead return `[System.Management.Automation.Internal.AutomationNull]::Value`, as the latter does.\r\n\r\n* As useful as namespace notation is with drives such as `Env` (e.g., `$env:HOME`), with _file-system_ drives it has severe limitations, which is probably why you rarely see it in the wild: no fully relative paths (need a least a drive spec), no support on Unix by default (no drive spec exists), no _variable_-based paths, no control over the encoding, `[` and `]` are invariably treated as wildcard metacharacters, _nonexistent_ files quietly return `$null`; see also:  https://github.com/PowerShell/PowerShell/issues/2268#issuecomment-283755725\r\n   \r\n\r\n\r\n\r\n",
      "created_at": "2021-04-04T17:55:39Z",
      "updated_at": "2021-04-04T17:58:44Z"
    },
    {
      "author": "krowlandson",
      "author_association": "NONE",
      "body": "Thank you all... some fascinating responses and amazing to better understand the behaviour we are observing.\r\n\r\nSo for now, my take away is to actually base our solution on my Example 2 above (as we need to be able to parse an empty file into `ConvertFrom-Json` which will fail with a `$null` input, and then process the individual object created from this as per the following:\r\n\r\n```powershell\r\n$fileContent = ((Get-Content ./emptyFile.json) ?? \"\") | ConvertFrom-Json -AsHashTable\r\nswitch ( $fileContent )\r\n{\r\n    $_ <condition_1>\r\n    {\r\n      <process_condition_1>\r\n    }\r\n    $_ <condition_2>\r\n    {\r\n      <process_condition_2>\r\n    }\r\n    $_ <condition_3>\r\n    {\r\n      <process_condition_3>\r\n    }\r\n    default\r\n    {\r\n      <process_default_condition>\r\n    }\r\n}\r\n```\r\n\r\nHowever this still raises a question as to whether one of the \"modes\" of `Get-Content` should support returning an empty file as an empty string? Would anyone else find this useful? In my mind this should have been the behaviour of `raw` based on the documentation but it sounds like there may be reasons why the author of this function chose to return `[System.Management.Automation.Internal.AutomationNull]` in this scenario.",
      "created_at": "2021-04-04T18:57:03Z",
      "updated_at": "2021-04-04T18:57:03Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": ">  whether one of the \"modes\" of Get-Content should support returning an empty file as an empty string?\r\n\r\nYes, I agree that `Get-Content -Raw` should, as argued in #3911.\r\n\r\n",
      "created_at": "2021-04-04T22:24:40Z",
      "updated_at": "2021-04-04T22:30:26Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Re-reading your previous comment: \r\n\r\n> which will fail with a $null input\r\n\r\nYes, `$null` as _input_ to `Convert-FromJson` fails, whereas the _empty string_ as input actually produces `$null` _as output_, which you can then process with `switch`.",
      "created_at": "2021-04-04T22:33:16Z",
      "updated_at": "2021-04-04T22:33:16Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Final thought, take 2:\r\n\r\nA perhaps conceptually clearer approach to end up with a true `$null`, using `-Raw` for better performance (note that `ConvertFrom-Json` must collect all text input up front anyway):\r\n\r\n```powershell\r\n$fileContent = (Get-Content -Raw ./emptyFile.json | ConvertFrom-Json -AsHashTable) ?? $null\r\n```\r\n\r\nIf / when #3911 gets fixed, the `?? $null` part will no longer be necessary (when combined with `-Raw`).",
      "created_at": "2021-04-05T19:40:47Z",
      "updated_at": "2021-04-05T19:40:47Z"
    },
    {
      "author": "User843212",
      "author_association": "NONE",
      "body": "\"mklement0\" brought me to this idea:\r\n$Segments | ForEach-Object { Get-Content $_ **-Encoding 1252** | Add-Content \"Video.ts\" **-Encoding 1252** \r\n\r\nThis works only almost correctly because every '\"CR\" 0xD' is translated to \"CR/LF\"  '0xD/'0xA'.\r\nUsing \"Add-Content\" with \"**-NoNewline**\" removes every '0xD'.\r\nIs there a convenient way to not translate a CR into Windows style?\r\n\r\n",
      "created_at": "2021-04-09T15:49:39Z",
      "updated_at": "2021-04-09T15:52:57Z"
    }
  ],
  "created_at": "2021-04-01T13:52:26Z",
  "number": 15135,
  "state": "open",
  "title": "Switch unable to evaluate output from Get-Content using an empty file",
  "updated_at": "2021-04-09T15:52:57Z"
}