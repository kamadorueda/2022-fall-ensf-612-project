{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5271",
  "author": "mklement0",
  "body": "You can use member enumeration to _get_ property values from all members of a collection, but you cannot currently _set_ them (to a given, single value).\r\nBy contrast, you _can_ use a setter _method_ to do so.\r\n\r\n```powershell\r\n# Create 2 temporary files and collect their [System.IO.FileInfo] representations\r\n# in an array.\r\n$files = (New-Item -Type File -Force '/tmp/t1.txt'), (New-Item -Force -Type File '/tmp/t2.txt')\r\n\r\n# Using member enumeration, try to set a property on all elements of the array\r\n# to the same value:\r\n\r\n# Try to to *assign to a property*.\r\n# !! FAILS with error \"The property 'LastWriteTime' cannot be found on this object.\"\r\n$files.LastWriteTime = (Get-Date).AddDays(-1)     \r\n\r\n# Try the property's *setter method* - this works.\r\n$files.set_LastWriteTime((Get-Date).AddDays(-1))\r\n\r\n# Verify that the date was set to yesterday.\r\n$files\r\n```\r\n\r\nGiven that using the setter method works, I suggest also allowing the property-assignment form.\r\n(Note that `NoteProperty` members, such as found on `[pscustomobject]` instances, do not have setter methods.)\r\n\r\nIf there are good reasons not to allow that, I suggest making the error message less confusing (if `$someColl.foo` finds property `foo` on the collection members, then `$someColl.foo = ...` should indicate that assignment is disallowed rather than claiming that the property doesn't exist).\r\n\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta.9 on macOS 10.13\r\nPowerShell Core v6.0.0-beta.9 on Ubuntu 16.04.3 LTS\r\nPowerShell Core v6.0.0-beta.9 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\nWindows PowerShell v5.1.15063.674 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\n```\r\n",
  "closed_at": "2017-10-29T19:24:42Z",
  "comments": [
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I hope this is `by design`. I don't want to  imagine the horrors that await us all should this work: `$users.DisplayName = 'John Doe'`. To me, *get*ing the properties as a collection isn't harmful (well to anything other than performance maybe), *set*ing them is destructive.  I'd want the language to make sure I really meant coercing the properties of all members of a collection instead of  intending to do so on an individual item.",
      "created_at": "2017-10-29T15:32:35Z",
      "updated_at": "2017-10-29T15:32:35Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@markekraus:\r\n\r\nOne [hu]man's horror is another's convenience.\r\n\r\nI get that this can be tricky, but note that you can already be destructive in this manner with _methods_, and there is a distinct lack of symmetry in only allowing the _get_ operation (which also carries the ambiguity of whether collection-level vs. member-level access was intended).\r\n\r\nIf the consensus turns out to be that it shouldn't be allowed, the error message should be amended to say so.\r\n\r\n",
      "created_at": "2017-10-29T15:57:30Z",
      "updated_at": "2017-10-29T15:57:30Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@mklement0 there is a huge difference between doing this with a method and doing it with a property. using a set accesor's direct method (which is usually hidden and not obvious) implies explicit intent. Assignment to a property of a collection is ambiguous just as get operations on the property of a collection are ambiguous. The former is destructive, the later is (usually) not. I would rather not have unsafe ambiguous operations.\r\n\r\nThat lack of symmetry probably (I hope, at least) exists to protect users from themselves. I hope this never gets added even though it would be convenient for those who know what they're doing. \r\n\r\nI agree with you on the error message. It should be more informative.",
      "created_at": "2017-10-29T16:26:37Z",
      "updated_at": "2017-10-29T16:26:37Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@markekraus:\r\n\r\nI agree about the difference with respect to the _setter_ method vs. assignment in the context of _property-value assignment_.\r\n\r\nHowever, you can call _any_ method with member enumeration, and there again you may get tripped up by not realizing that the method may be called on _each member_ - and thus do unintended things.\r\n\r\nTake the following example:\r\n\r\n```powershell\r\n> $a = 1, 2; $a.Reset()\r\nMethod invocation failed because [System.Int32] does not contain a method named 'Reset'\r\n...\r\n```\r\n\r\nSay you thought that arrays have a `.Reset()` method and you wanted to call it on the whole array, but since they don't, `.Reset()` is called  on _each array element_. No harm done in this case, because the `[int]` elements happen to have no `.Reset()` method, but they certainly _could_.\r\n\r\n(Of course, you could now make the case that calling methods should be disallowed too, but note that that would be a breaking change.)\r\n\r\n---\r\n\r\nAs for the _benefits_ of allowing property assignments with member enumeration:\r\n\r\n* Symmetry \r\n\r\n* Convenience (personally, I'd find it useful and it is indeed in the context of naively _assuming_ that that's already possible that I discovered the problem).\r\n\r\nI'm happy to leave it at that and let others weigh in.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2017-10-29T16:45:24Z",
      "updated_at": "2017-10-29T16:45:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Enumeration works with property for pipeline in last versions. I believe it is possible to implement this for assignment too.\r\nAnd I have a troubling ambiguity in @mklement0's example.",
      "created_at": "2017-10-29T17:00:20Z",
      "updated_at": "2017-10-29T17:00:20Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@mklement0 I still feel that a method is more explicit with the intent. When I make an assignment, I expect it to be a 1-to-one mapping.\r\n\r\nHere is something else that would be ambiguous:\r\n\r\n```powershell\r\n$collection.EnumeratedProperty = 1, 2, 3\r\n```\r\n\r\nWould that set all collection elements to an array like this does?\r\n\r\n```powershell\r\n$a = 1, 2, 3\r\n```\r\n\r\nor would it set the first 3 like this?\r\n\r\n```powershell\r\n$a, $b, $c, $d = 1, 2, 3\r\n```\r\n\r\nAnd how would this behave?\r\n\r\n```powershell\r\n$a, $collection.EnumeratedProperty = 1, 2, 3\r\n```",
      "created_at": "2017-10-29T18:23:28Z",
      "updated_at": "2017-10-29T18:24:30Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "This is definitely by design. I'm a big fan of symmetry, but I'm a bigger fan of pragmatism.\r\n\r\nIn this case - allowing method calls was pragmatic - yes you can mutate object or system state, and in some cases that's exactly goal, but methods also do other things.\r\n\r\nAssignment does one thing - and we felt strongly that assigning the same value to every instance was likely not expected or desirable. If it is, then calling the setter is an acceptable alternative.\r\n\r\nNow in hindsight, we maybe should have used a new operator (and to be clear, it was considered). If we used a different operator, then I'm fairly certain we would have opted for symmetry.\r\n",
      "created_at": "2017-10-29T19:04:18Z",
      "updated_at": "2017-10-29T19:04:18Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr: \r\n\r\nUnderstood, but note that calling a setter method is not an option for `NoteProperty` members, which rather limits the usefulness of this alternative.\r\n\r\nA dedicated operator would also have avoided the existing ambiguity (as shown in my `.Reset()` example above, which I presume is what @iSazonov finds troubling).\r\n\r\nGiven the resolution as by-design, I suggest:\r\n\r\n* amending the error message\r\n\r\n* documenting this decision (add the `Documentation Needed` label).\r\n\r\n---\r\n\r\n@markekraus: It's a moot point now, but by limiting the magic to the LHS and documenting that fact, there would be no ambiguity.\r\nOf course, assigning the _same_ value to all members is the less common scenario, but it does have its uses and is consistent with the current behavior.\r\n\r\n",
      "created_at": "2017-10-29T19:24:03Z",
      "updated_at": "2017-10-29T19:25:04Z"
    }
  ],
  "created_at": "2017-10-29T13:27:18Z",
  "number": 5271,
  "state": "closed",
  "title": "Member-access enumeration works with setter methods, but not with property assignments",
  "updated_at": "2022-10-05T15:08:17Z"
}