{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11146",
  "author": "Saancreed",
  "body": "# PR Summary\r\n\r\nThe build module `build.psm1` currently throws an error when imported on unrecognized Linux distributions. This PR allows the module to be used in such cases, while preserving the \"not supported\" message as warning.\r\n\r\n## PR Context\r\n\r\nBuilding PowerShell Core on distros like Arch Linux, while unsupported by Microsoft / PowerShell Team, is already possible as long as build dependencies are provided by the user. In such cases, the most simple way to do so would be to skip the toolchain bootstrapping steps as outlined [here](https://github.com/PowerShell/PowerShell/blob/master/docs/building/linux.md#toolchain-setup) and ensure that they are satisfied by distro-specific tools (Arch: a `PKGBUILD` with `depends` and `makedepends` ensures that necessary runtime and/or build packages are provided by `pacman`). After that, we could use `build.psm1` to build PowerShell from source, which is currently not possible because of hard exception thrown from `Get-EnvironmentInformation` function, even though the build could still continue and succeed as normal.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-05-29T00:31:57Z",
  "comments": [
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "What family of distro's does this work with?",
      "created_at": "2019-11-21T20:02:11Z",
      "updated_at": "2019-11-21T20:02:11Z"
    },
    {
      "author": "Saancreed",
      "author_association": "CONTRIBUTOR",
      "body": "Arch Linux at the very least (in fact, community-maintained Arch packages are mentioned [here](https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-core-on-linux?view=powershell-6#arch-linux), but they are being built [manually](https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=powershell#n32)), probably also its derivatives. And I suppose some Gentoo people could also make use of this.\r\n\r\nI can successfully build PowerShell on my Arch PC with this change when using the build module.",
      "created_at": "2019-11-21T20:12:23Z",
      "updated_at": "2019-11-21T20:12:23Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@Saancreed some feature that rely on native component may not work, such as WinRM based remoting.",
      "created_at": "2019-11-21T20:14:04Z",
      "updated_at": "2019-11-21T20:14:04Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13 for which I think it's fair to warn. But I don't see a specific need to hamper efforts to expand PS's possibilities on \"not supported\" architectures. The warning message seems appropriate and still allows enterprising users the ability to at least _try_ despite the potential for some missing / broken bits and pieces. \ud83d\ude42 ",
      "created_at": "2019-11-21T20:24:20Z",
      "updated_at": "2019-11-21T20:24:30Z"
    },
    {
      "author": "Saancreed",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13 That is true, and frankly I'm not sure if I can somehow check that. But if some features are indeed broken, then using binaries built and linked against whatever glibc and openssl some distros currently use can help more than it can hurt.\r\n\r\n@vexx32 Yep, if Arch users can make (parts of) PowerShell work that it's worth to make an AUR package, then they will use it even if some things don't work.",
      "created_at": "2019-11-21T20:30:14Z",
      "updated_at": "2019-11-21T20:34:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@Saancreed Thanks for your contribution!\r\n\r\nI think we need to add new explicit switch parameter (-SkipLinuxDistroCheck with a comment that it is not supported) to enable the scenario without a risk to break supported build scenario.",
      "created_at": "2019-11-22T08:52:13Z",
      "updated_at": "2019-11-22T08:52:13Z"
    },
    {
      "author": "Saancreed",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Supported build scenarios shouldn't be affected by this change at all, so introducing extra switch seems redundant (and makes the change not as simple as I orginally intended). The message itself is still printed to the console as warning, which preserves its visibility but still makes it clear to the user that building in such environments is not officially supported.\r\n\r\nThat said, if PowerShell team prefers a switch over succeeding with a warning, I can try and rewrite this PR into something like that.",
      "created_at": "2019-11-22T18:01:36Z",
      "updated_at": "2019-11-22T18:01:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We change Build.psm1 module frequently. I believe the new switch will protect both the proposed scenario and regular build scenarios too. Also for the switch we could add a comment that the scenario is not supported and not recommended.\r\n@TravisEz13 Thoughts?",
      "created_at": "2019-11-22T19:22:32Z",
      "updated_at": "2019-11-22T19:22:32Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "I tend to agree with @iSazonov .  The error message can tell you about the switch to bypass the check.",
      "created_at": "2019-11-22T20:11:47Z",
      "updated_at": "2019-11-22T20:11:47Z"
    },
    {
      "author": "Saancreed",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov @TravisEz13 Sounds fair, but one issue I can see is that the error is thrown when the module is _imported_, and there we can pass arguments only with `-ArgumentList` which is not very self-descriptive. Would leaving the warning on import and adding said switch to `Start-PSBuild` (and perhaps some other functions as well?) that causes the _function_ to throw the error instead be an acceptable solution?",
      "created_at": "2019-11-22T20:32:18Z",
      "updated_at": "2019-11-22T20:32:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You could update the message to inform user how bypass. So if we import the module without the argument we get throw and the message (\"use ipmo .\\Build.psm1 -ArgumentList SkipLinuxDistroCheck\"). If we import with the argument we don't throw and get only warning that the scenario is not supported.",
      "created_at": "2019-11-23T10:35:43Z",
      "updated_at": "2019-11-23T10:35:43Z"
    },
    {
      "author": "Saancreed",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13 @iSazonov Any thoughts on the second iteration of this PR?",
      "created_at": "2019-11-26T21:39:16Z",
      "updated_at": "2019-11-26T21:39:16Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "restarted static analysis\r\n",
      "created_at": "2019-12-08T21:38:11Z",
      "updated_at": "2019-12-08T21:38:11Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@PoshChan Please remind me in 1 day",
      "created_at": "2019-12-08T21:38:23Z",
      "updated_at": "2019-12-08T21:38:23Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13, this is the reminder you requested 1 day ago",
      "created_at": "2019-12-09T21:38:38Z",
      "updated_at": "2019-12-09T21:38:38Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@PoshChan Please remind me in 5 days",
      "created_at": "2020-01-08T01:30:34Z",
      "updated_at": "2020-01-08T01:30:34Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13, this is the reminder you requested 5 days ago",
      "created_at": "2020-01-13T01:30:56Z",
      "updated_at": "2020-01-13T01:30:56Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMainainer, Please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-05-27T02:02:23Z",
      "updated_at": "2020-05-27T02:02:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@Saancreed Please resolve merge conflicts.\r\n\r\n@TravisEz13 The PR is waiting your review.",
      "created_at": "2020-05-27T06:51:29Z",
      "updated_at": "2020-05-27T06:51:29Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.1.0-preview.4` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.4)\n",
      "created_at": "2020-06-25T19:03:35Z",
      "updated_at": "2020-06-25T19:03:35Z"
    }
  ],
  "created_at": "2019-11-21T19:59:38Z",
  "number": 11146,
  "state": "closed",
  "title": "Allow use of build module on unknown Linux distros",
  "updated_at": "2020-06-25T19:03:35Z"
}