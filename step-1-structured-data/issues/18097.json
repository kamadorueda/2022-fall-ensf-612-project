{
  "_url": "https://github.com/PowerShell/PowerShell/issues/18097",
  "author": "shinfd",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nI ran the following PowerShell script\r\n\r\n```powershell\r\n$ErrorActionPreference = \"Stop\" # (A)\r\nfunction Inner2 {\r\n\tparam (\r\n\t\t[SecureString] $SecureName\r\n\t)\r\n}\r\nfunction Inner1 {\r\n\tparam (\r\n\t\t[Parameter(Mandatory)] # (B)\r\n\t\t[string] $Name\r\n\t)\r\n\tInner2 -SecureName $Name # ParameterArgumentTransformationError\r\n}\r\nfunction Func {\r\n\tparam (\r\n\t\t[string] $Name\r\n\t)\r\n\tInner1 -Name $Name # Unless (A) or (B) is commented out, PowerShell points to this line as source of error\r\n}\r\nFunc -Name Hello\r\n```\r\n\r\n### Expected behavior\r\n\r\nBelow error is shown, regardless of the existence of $ErrorActionPreference or [Parameter(Mandatory)].\r\n\r\n```console\r\nLine |\r\n  13 |      Inner2 -SecureName $Name # ParameterArgumentTransformationError\r\n     |                         ~~~~~\r\n     | Cannot process argument transformation on parameter 'SecureName'. Cannot convert the \"Hello\" value of\r\n     | type \"System.String\" to type \"System.Security.SecureString\".\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\nPowerShell interpreter points to wrong line as the source of the error.\r\n\r\n```console\r\nLine |\r\n  19 |      Inner1 -Name $Name # Unless (A) or (B) is commented out, PowerShe \u2026\r\n     |      ~~~~~~~~~~~~~~~~~~\r\n     | Cannot process argument transformation on parameter 'SecureName'. Cannot convert the \"Hello\" value of\r\n     | type \"System.String\" to type \"System.Security.SecureString\".\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.6\r\nPSEdition                      Core\r\nGitCommitId                    7.2.6\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_\r\n\r\n### Additional Details\r\n\r\nThe above symptom looks very similar to one reported in #14308 which also involves `$ErrorActionPreference = \"Stop\"`, but this one uses `[Parameter(Mandatory)]` instead.",
  "closed_at": null,
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "Annoying as it seems this is by design. \r\n\r\nWhen you call a cmdlet and there is an **unrecoverable** error it doesn't tell you where in the cmdlet the error occurred, you just get  \"there was an error running  cmdlet Get-Widget ...\"  \r\n\r\n`$ErrorActionPreference = 'stop'` makes errors which would be **recovered** simply by printing the message unrecoverable\r\n\r\nWhen you have a  _basic_  function like this \r\n```\r\nfunction one {\r\n1/0\r\n}\r\n```\r\nan unrecoverable error is reported as the line of PowerShell code where it happened. \r\n```\r\nPS> $ErrorActionPreference = 'stop' \r\nPS> one\r\n\r\nParentContainsErrorRecordException:\r\nLine |\r\n   2 |  1/0\r\n     |  ~~~\r\n     | Attempted to divide by zero.\r\n```\r\nbut if the function is made into advanced function / script cmdlet for example, like this \r\n```\r\nfunction one { [cmdletbinding()] Param()\r\n1/0\r\n}\r\n```\r\nthe unrecoverable error is reported **as it would be for a compiled cmdlet.** \r\n```\r\nPS> $ErrorActionPreference = 'stop' \r\nPS> one\r\none: Attempted to divide by zero.\r\n```\r\nIn other words \"the cmdlet had an error and there is no point in telling the details because you can't recover from it\"     \r\nbut if we make the error **recoverable:**\r\n```\r\nPS>  $errorActionPreference = \"Continue\"\r\nPS>  one\r\nRuntimeException:\r\nLine |\r\n   2 |  1/0\r\n     |  ~~~\r\n     | Attempted to divide by zero.\r\n```\r\nThat is : \"Here are the details, so something can decide what to do next\"  \r\n\r\nYou don't have `[cmdletBinding()]` in your code but if any of the parameters in a function have attached attributes `[alias()]`, `[Validatexxx()]`, `[Allowyyy()]` or `[paramater()]` **then  `[cmdletBinding()]` is implied.**\r\n\r\nRecoverable errors are either handled are passed up to the caller for handling, \r\n$ErrorActionPreference = `continue`, means that when the error can't be passed up any further, printing the message is considered to be sufficient handling to continue at the next line, and  `silentlycontinue` considers doing nothing is sufficient.   \r\n\r\nIn this \r\n```\r\n function one { [cmdletbinding()] Param()\r\n1/0 ; \"One finished\"\r\n}\r\nfunction two   {one    ; \"Two   Finished\"}\r\nfunction three {two    ; \"Three Finished\"}\r\n\r\nPS> $ErrorActionPreference = \"Continue\"\r\nPS> three\r\n\r\n\r\nRuntimeException:\r\nLine |\r\n   2 |  1/0 ; \"One finished\"\r\n     |  ~~~\r\n     | Attempted to divide by zero.\r\nOne finished\r\nTwo   Finished\r\nThree Finished\r\n```\r\nThe recoverable error in `one` passes up to `two`, `two` doesn't handle it so it goes up to `three` which doesn't handle it either so there error is passed back to the PowerShell session which says \"Print the message and tell everything to continue\"\r\n\r\nif we put \r\n```\r\nPS> try {three ; \"message\"} catch {\"error occurred\"}\r\nerror occurred\r\n``` \r\nNow, handling the recoverable error which bubbled up results in the text output but `catch` means execution **stops**\r\n   \r\nWhen a recoverable error is passed up and error action is `stop` that it is wrapped in an unrecoverable error. \r\n\r\nAlthough the display is different if you run your inner1 from the prompt, \r\n```\r\nPS> $errorActionPreference = \"stop\"\r\nPS>   Inner1 -Name hello\r\nInner1: Cannot process argument transformation on parameter 'SecureName'. Cannot convert the \"hello\" value of type \"System.String\" to type \"System.Security.SecureString\".\r\n```\r\n\r\nYou can see the command considered to be behind the error being received  through `$error[0].errorrecord.InvocationInfo` (it's inner1 -name Hello) and you can get to wrapped error like this:\r\n```\r\nPS>  $Error[0].innerException.errorrecord\r\nInner2:\r\nLine |\r\n   6 |  Inner2 -SecureName $Name # ParameterArgumentTransformationError\r\n     |                     ~~~~~\r\n     | Cannot process argument transformation on parameter 'SecureName'. Cannot convert the \"hello\" value of type \"System.String\" to type \"System.Security.SecureString\".\r\n```\r\n\r\n Yes it's frustrating that the error is \"something wrong inside this 200 line function\", but no-one has yet figured out a good way to decide if using an inner exception (and there may be more than one) gives more useful information. \r\n",
      "created_at": "2022-09-15T14:14:59Z",
      "updated_at": "2022-09-15T14:14:59Z"
    }
  ],
  "created_at": "2022-09-15T08:26:03Z",
  "labels": [
    "Needs-Triage"
  ],
  "number": 18097,
  "state": "open",
  "title": "Incorrect error position reported when $ErrorActionPreference = 'Stop' and [Parameter(Mandatory)] exists",
  "updated_at": "2022-09-15T14:14:59Z"
}