{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17157",
  "author": "thegraffix",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://www.powershellgallery.com/packages/PSReadLine)\n- [X] Search the existing issues, especially the pinned issues.\n\n### Exception report\n\n```console\nN/A\n```\n\n\n### Screenshot\n\n![Get-PSReadLineOption 1](https://user-images.githubusercontent.com/57874058/163656257-6a189271-478c-40f1-97ac-752d74ed160b.png)\r\n![Get-PSReadLineOption 2](https://user-images.githubusercontent.com/57874058/163656260-27d8cba6-3390-4795-9c7d-273b2fb9d269.png)\r\n\r\n\n\n### Environment data\n\n```console\nPS Version: 5.1.19041.1645\r\nPS HostName: ConsoleHost\r\nPSReadLine Version: 2.2.2\r\nPSReadLine EditMode: Windows\r\nOS: 10.0.19041.1 (WinBuild.160101.0800)\r\nBufferWidth: 106\r\nBufferHeight: 3000\n```\n\n\n### Steps to reproduce\n\nHappens on PS 5.1 console and Windows Terminal app (cannot reproduce with the ISE nor PowerShell 7.2.2)\r\n<br>\r\n\r\n**To reproduce:**\r\n1. Type `Get-PSReadlineOption | Format-List *`\r\n\r\n\r\n<br>\r\n\r\n**To resolve:**\r\n\r\n1. Type `Get-PSReadLineOption` (without `| Format-List *`) and color scheme is restored after the property `CommandColor` is listed on-screen.  See bottom screenshot for a better explanation of this.\n\n### Expected behavior\n\nColor scheme should remain constant\n\n### Actual behavior\n\n- Console color scheme now appears like the `ListPredictionSelectedColor` color scheme\r\n- Missing property values (see screenshot)\r\n- Clearing the screen/changing console size doesn't resolve the issue.",
  "closed_at": "2022-05-10T23:05:14Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "This is an issue with the PowerShell formatting. When using `Format-List *`, the formatting view registered by the PSReadLine module won't be used. Instead, PowerShell formatting will dump every property of the object and display them in a list view.\r\n\r\nThe problem is that PowerShell formatting doesn't handle ANSI escape codes properly. The color properties are all holding ANSI sequences for color, which should not be simply written to console as regular strings. And doing so will lead to color leaking, which is what is observed in your screenshot. I will transfer this issue to PowerShell repo.",
      "created_at": "2022-04-18T17:04:53Z",
      "updated_at": "2022-04-19T23:33:09Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #17262, which has now been successfully released as `v7.3.0-preview.4`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.3.0-preview.4)\n",
      "created_at": "2022-05-23T16:22:20Z",
      "updated_at": "2022-05-23T16:22:20Z"
    }
  ],
  "created_at": "2022-04-16T01:29:39Z",
  "labels": [
    "WG-Interactive-Console",
    "Resolution-Fixed"
  ],
  "number": 17157,
  "state": "closed",
  "title": "Formatting doesn't handle the property with ANSI escape sequence string value properly, which leads to color leaking",
  "updated_at": "2022-05-23T16:22:20Z"
}