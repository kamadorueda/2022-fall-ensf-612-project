{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8995",
  "author": "powercode",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nAdds support for deriving from PSObject to create optimized CodeProperties, and uses this to implement the attached properties for FileSystem/Registry-Provider and the output of Get-Content.\r\n\r\nThis makes the FileSystemProvider roughly **twice as fast** getting items, and about **5 times faster** getting content.\r\n\r\nMemory usage of getting all item under c:\\windows is **415Mb** before the change, and **103Mb** after.\r\n\r\nTo try it out: \r\n```powershell\r\nEnable-ExperimentalFeature PSOptimizedProvider \r\n```\r\n\r\n## PR Context\r\nPSNoteProperties are quite expensive. To provide core scenarios with a more performant alternative, this PR adds types derived from PSObject that are tailored for common scenarios in the providers.\r\n\r\nThe providers add six PSNoteProperties to each item, adding massively to the memory usage, and substantially to the time it takes to create the PSObjects wrapping the items. \r\n\r\nThe same thing happens with `Get-Content` where the attached properties can inflate the PSObjects many times over.\r\n\r\nThe gist of the change is the addition of an interface, `IPSObjectExtendedMemberInfo` and an attribute, \r\n`PSExtensionMemberAttribute`, that the derived PSObjects can use to communicate with the ETS about what members to expose.\r\n\r\nCoreAdapter has a new member, `AddExtensionProperties` that adds members with the attribute, and the interface provides a member \r\n```CSharp\r\nT GetMember<T>(MemberNamePredicate predicate)\r\n```\r\nthat can be used to quickly determine if an object provides a property matching the predicate.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [ ] [Add `[feature]` to your commit messages if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2020-06-22T06:00:20Z",
  "comments": [
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Not sure why that test fails. It passes locally \ud83e\udd14\r\n",
      "created_at": "2019-02-27T08:10:51Z",
      "updated_at": "2019-02-27T08:10:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Verify Clear-Item with -WhatIf\r\n\r\nIt still fail. I don't see why - need to debug.",
      "created_at": "2019-03-01T05:17:46Z",
      "updated_at": "2019-03-01T05:17:46Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov That seems like a genuine bug from my side. And windows only is easy to debug for me.",
      "created_at": "2019-03-01T14:21:59Z",
      "updated_at": "2019-03-01T14:21:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Perhaps I don't understand you comment but the test failed on Windows\r\nhttps://powershell.visualstudio.com/PowerShell/_build/results?buildId=14744&view=logs&jobId=35656138-dd59-55dc-1472-6feeb4c97f57&taskId=41fef26b-4f6c-56d4-3d5d-1873b1a12853&lineStart=853&lineEnd=854&colStart=1&colEnd=1\r\n\r\nUpdate: previous test seems works so only WhatIf parameter doesn't work.",
      "created_at": "2019-03-01T15:50:40Z",
      "updated_at": "2019-03-01T16:21:01Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov, @daxian-dbw  Do you know how to test global experimental features?\r\n\r\nIn this case, I would like to run all test with the feature both enabled and disabled, to make sure I didn't break anything in the old behavior, and that is works with the optimizations.\r\n\r\nI know about the flags to `Start-PSPester`, and I can run them locally, but I don't know how to enable running both for a large set of tests.\r\n\r\nTo you have any ideas on how to handle this? \r\nSince I'm changing the binder, PSObject and ProviderBase, it would be good to have quite a lot of testing on it :)",
      "created_at": "2019-03-03T13:00:12Z",
      "updated_at": "2019-03-03T13:05:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "There is TestMetadata.json file.\r\nSee #7419",
      "created_at": "2019-03-03T17:01:38Z",
      "updated_at": "2019-03-03T17:01:38Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@powercode Here is the `TestMetadata.json` file: https://github.com/PowerShell/PowerShell/blob/master/test/tools/TestMetadata.json\r\nPlease look at it along with the Pester test example: https://github.com/PowerShell/PowerShell/blob/master/test/powershell/engine/ExperimentalFeature/ExperimentalFeature.Basic.Tests.ps1\r\n\r\n`TestMetadata.json` allows you to define the experimental features and the corresponding tests to run. If an empty array is used for an experimental feature, that means all tests will run for the experimental feature.\r\n When starting to Pester tests, we first run all tests without any experimental feature enabled, so the stable code gets exercised by all tests.\r\nThen for each experimental feature defined in `TestMetadata.json`, `Start-PSPester` sets up the config file to enable the feature, and run the indicated tests with that feature enabled.\r\n\r\nSorry that I didn't update the testing doc with this. Will do that soon.",
      "created_at": "2019-03-03T19:12:53Z",
      "updated_at": "2019-03-03T19:13:58Z"
    },
    {
      "author": "stale[bot]",
      "author_association": "NONE",
      "body": "This PR has been automatically marked as stale because it has not had activity in the last 30 days. It will be closed if no further activity occurs within 10 days.\nThank you for your contributions.\nCommunity members are welcome to grab these works.\n",
      "created_at": "2019-04-26T17:01:51Z",
      "updated_at": "2019-04-26T17:01:51Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Keeping this alive. Will get back to it after PSConfEU",
      "created_at": "2019-05-20T09:01:36Z",
      "updated_at": "2019-05-20T09:01:36Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@powercode, your last commit had 2 failures in `PowerShell-CI-windows`\r\nGet-ItemProperty.Should be able to access a property using the Path and name switches\r\n```powershell\r\nExpected $null, but got C.\r\nat <ScriptBlock>, D:\\a\\1\\s\\test\\powershell\\Modules\\Microsoft.PowerShell.Management\\Get-ItemProperty.Tests.ps1: line 36\r\n36: \t$output.PSDrive | Should -Be $testprovider\r\n```\r\nString cmdlets.Select-String.Network path\r\n```powershell\r\nExpected 2, but got 0.\r\nat <ScriptBlock>, D:\\a\\1\\s\\test\\powershell\\Modules\\Microsoft.PowerShell.Utility\\string.tests.ps1: line 56\r\n56:             (select-string -LiteralPath $fileNameAsNetworkPath \"b\").count | Should -Be 2\r\n```\r\n",
      "created_at": "2019-06-07T22:37:26Z",
      "updated_at": "2019-06-07T22:37:26Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@powercode, your last commit had 4 failures in `PowerShell-CI-macos`\r\nBasic FileSystem Provider Tests.Validate basic FileSystem Cmdlets.Get-Content on Unix succeeds with folder and file with colon: \\foo:bar.txt\r\n```powershell\r\nExpected exactly 'Hello', but got $null.\r\nat <ScriptBlock>, /Users/vsts/agent/2.152.1/work/1/s/test/powershell/Modules/Microsoft.PowerShell.Management/FileSystem.Tests.ps1: line 246\r\n246:                 $files[0] | Get-Content | Should -BeExactly \"Hello\"\r\n```\r\nBasic FileSystem Provider Tests.Validate basic FileSystem Cmdlets.Get-Content on Unix succeeds with folder and file with colon: /foo:\r\n```powershell\r\nExpected exactly 'Hello', but got $null.\r\nat <ScriptBlock>, /Users/vsts/agent/2.152.1/work/1/s/test/powershell/Modules/Microsoft.PowerShell.Management/FileSystem.Tests.ps1: line 246\r\n246:                 $files[0] | Get-Content | Should -BeExactly \"Hello\"\r\n```\r\nBasic FileSystem Provider Tests.Validate basic FileSystem Cmdlets.Get-Content on Unix succeeds with folder and file with colon: \\:bar\r\n```powershell\r\nExpected exactly 'Hello', but got $null.\r\nat <ScriptBlock>, /Users/vsts/agent/2.152.1/work/1/s/test/powershell/Modules/Microsoft.PowerShell.Management/FileSystem.Tests.ps1: line 246\r\n246:                 $files[0] | Get-Content | Should -BeExactly \"Hello\"\r\n```\r\nGet-ItemProperty.Should be able to access a property using the Path and name switches\r\n```powershell\r\nExpected $null, but got /.\r\nat <ScriptBlock>, /Users/vsts/agent/2.152.1/work/1/s/test/powershell/Modules/Microsoft.PowerShell.Management/Get-ItemProperty.Tests.ps1: line 36\r\n36: \t$output.PSDrive | Should -Be $testprovider\r\n```\r\n",
      "created_at": "2019-06-07T22:39:11Z",
      "updated_at": "2019-06-07T22:39:11Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@powercode, your last commit had 4 failures in `PowerShell-CI-linux`\r\nBasic FileSystem Provider Tests.Validate basic FileSystem Cmdlets.Get-Content on Unix succeeds with folder and file with colon: \\foo:bar.txt\r\n```powershell\r\nExpected exactly 'Hello', but got $null.\r\nat <ScriptBlock>, /home/vsts/work/1/s/test/powershell/Modules/Microsoft.PowerShell.Management/FileSystem.Tests.ps1: line 246\r\n246:                 $files[0] | Get-Content | Should -BeExactly \"Hello\"\r\n```\r\nBasic FileSystem Provider Tests.Validate basic FileSystem Cmdlets.Get-Content on Unix succeeds with folder and file with colon: /foo:\r\n```powershell\r\nExpected exactly 'Hello', but got $null.\r\nat <ScriptBlock>, /home/vsts/work/1/s/test/powershell/Modules/Microsoft.PowerShell.Management/FileSystem.Tests.ps1: line 246\r\n246:                 $files[0] | Get-Content | Should -BeExactly \"Hello\"\r\n```\r\nBasic FileSystem Provider Tests.Validate basic FileSystem Cmdlets.Get-Content on Unix succeeds with folder and file with colon: \\:bar\r\n```powershell\r\nExpected exactly 'Hello', but got $null.\r\nat <ScriptBlock>, /home/vsts/work/1/s/test/powershell/Modules/Microsoft.PowerShell.Management/FileSystem.Tests.ps1: line 246\r\n246:                 $files[0] | Get-Content | Should -BeExactly \"Hello\"\r\n```\r\nGet-ItemProperty.Should be able to access a property using the Path and name switches\r\n```powershell\r\nExpected $null, but got /.\r\nat <ScriptBlock>, /home/vsts/work/1/s/test/powershell/Modules/Microsoft.PowerShell.Management/Get-ItemProperty.Tests.ps1: line 36\r\n36: \t$output.PSDrive | Should -Be $testprovider\r\n```\r\n",
      "created_at": "2019-06-07T22:40:07Z",
      "updated_at": "2019-06-07T22:40:07Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMainainer, Please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-05-27T02:04:11Z",
      "updated_at": "2020-05-27T02:04:11Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as stale because it has been marked as requiring author feedback but has not had any activity for **15 days**. It will be closed if no further activity occurs **within 10 days of this comment**.",
      "created_at": "2020-06-11T23:00:43Z",
      "updated_at": "2020-06-11T23:00:43Z"
    }
  ],
  "created_at": "2019-02-26T22:48:55Z",
  "number": 8995,
  "state": "closed",
  "title": "PSOptimizedProvider objects - Experimental feature",
  "updated_at": "2020-06-22T06:00:20Z"
}