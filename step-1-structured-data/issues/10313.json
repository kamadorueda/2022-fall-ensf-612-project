{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10313",
  "author": "EPinci",
  "body": "# Steps to reproduce\r\n\r\n```powershell\r\n$var = get-process | out-null\r\nswitch ($var) {\r\n  $null { write-host NULL }\r\n  default { write-host DEFAULT }\r\n}\r\n```\r\n\r\nIn my specific case, I assign $var to the output of a native command that, in some expected cases, doesn't return anything.\r\nNote that explicitly assigning $var = $ null appears to be not the same thing and doesn't trigger the issue.\r\n\r\n# Expected behavior\r\nExpecting the switch to be evaluated and the $null clause honored. \r\n# Actual behavior\r\nThe switch is entirely skipped.\r\n# Environment data\r\n```none\r\nPSVersion                      6.2.2\r\nPSEdition                      Core\r\nGitCommitId                    6.2.2\r\nOS                             Microsoft Windows 10.0.18362\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2019-10-02T13:47:30Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "$var won't contain $null with the code you've given. In will continue PowerShell's \"nothing\" value - AutomationNull. This value indicates no value whatsoever, not even $null. \r\n\r\nIf Out-Null generated a $null, then this sequence would create output:\r\n\r\n```powershell\r\n$items | Out-Null | % { 42 }\r\n```\r\n\r\nThis is because $null is a perfectly valid pipeline value and would continue down the pipe.\r\n\r\nOut-Null follows the idea of redirecting to /dev/null on Linux where no output is generated at all. A $null value is still a valid output value, however.\r\n\r\nEven knowing this, I do not think there is a way to examine that with a switch statement. A switch statement iterates it's input, and will process arrays one item at a time. AutomationNull indicates to PowerShell that no iteration is to occur -- not in the pipeline, nor a foreach statement, etc., So the switch behaves the same.",
      "created_at": "2019-08-07T10:18:53Z",
      "updated_at": "2019-08-07T10:18:53Z"
    },
    {
      "author": "EPinci",
      "author_association": "NONE",
      "body": "Ok, now I'm confused.\r\n\r\nI'm in my actual code I'm assigning to the output of some native command:\r\n`$var = az network dns record-set list [...] --query  -otsv`\r\nthat returns a list or nothing, if there's nothing to return.\r\nI was assuming that in that case the variable got assigned to $null.\r\n\r\nActually, after that assignment, the following works fine:\r\n```powershell\r\n    if ($var -eq $null) {\r\n        Write-Host \"something\"\r\n    } elseif ($var -eq $something) {\r\n        Write-Verbose \"somethingtoo\"\r\n    } else {\r\n        Write-Host \"somethingelse\"\r\n    }\r\n```\r\nSo why is the first `if` actually working?\r\nHow am I supposed to actually check against the return of that native command?\r\nOr better, it looks to me that `switch` is working as expected but the assignment is not.\r\nI am, as a matter of fact assigning something that gets assigned to nothing instead of null?",
      "created_at": "2019-08-07T10:59:26Z",
      "updated_at": "2019-08-07T11:07:20Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "An if statement doesn't iterate like a switch does, it's just a direct comparison as written. \r\n\r\nAutomationNull is by definition equivalent to $null in a direct comparison, so that's why the if statement works.\r\n\r\nIt does appear the assignment results in truly nothing rather than $null, yeah. Unusual, really, most native utils output _something_.",
      "created_at": "2019-08-07T12:17:28Z",
      "updated_at": "2019-08-07T12:17:28Z"
    },
    {
      "author": "EPinci",
      "author_association": "NONE",
      "body": "Actually, the output (or lack there-of) of the command is quite normal. Simply the command has nothing to do/say or, in my specific case, the query result is empty.\r\n\r\nIf I get it right... the \"AutomationNull\" is equal to \"unassigned\"?\r\nI find confusing that an *assigment* to something that is \"nothing\" *results in an unassigned variable*.\r\nIn what cases the output of a native command can result in a $null assignment?",
      "created_at": "2019-08-07T14:53:42Z",
      "updated_at": "2019-08-07T14:53:42Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "\r\n> If I get it right... the \"AutomationNull\" is equal to \"unassigned\"?\r\n\r\nMore like \"no results\".  It acts a bit differently than an unassigned variable in some cases.  It's a bit like how a SQL query could return a literal `NULL` value or just not find any matching results.\r\n\r\n`AutomationNull` is like a mix between an empty collection (e.g. `@()` )and `$null`. A bit closer to an empty collection than `$null`.",
      "created_at": "2019-08-07T15:17:16Z",
      "updated_at": "2019-08-07T15:17:16Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@EPinci the output of a native command cannot result in a true $null assignment, because native commands only deal with text output. You can get \"nothing\", you can sometimes in odd cases get an empty string value ( `[string]::Empty` or `''` ), or a string containing just whitespace.\r\n\r\nNative commands don't deal with the CLR, so they don't have the ability to pass a $null value to another utility like PowerShell.",
      "created_at": "2019-08-07T15:20:06Z",
      "updated_at": "2019-08-07T15:20:06Z"
    }
  ],
  "created_at": "2019-08-07T09:24:09Z",
  "number": 10313,
  "state": "closed",
  "title": "Switch fails with null value",
  "updated_at": "2019-10-02T13:47:30Z"
}