{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3613",
  "author": "DarwinJS",
  "body": "Sure would be nice to be able to do basic validation of the syntax fussy data formats in code - and even in the console not having to use an editor or website.\r\n\r\nI do *not* mean to imply that powershell do broadbased syntax checking of other things - just these very common data formats that are syntax heavy and that we have to work with a lot.",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I believe Test-CSV is impossible - what is formal rules?\r\nTest-Json and Test-xml can be implemented - we have all for that.\r\nTest-yaml only once we receive support for YAML in PowerShell.",
      "created_at": "2017-04-21T15:04:33Z",
      "updated_at": "2017-04-21T15:04:33Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@DarwinJS what form do you see this talking? The various import and convert commands already validate that documents are well-formed. Are you talking about schema validation? Better errors?",
      "created_at": "2017-04-24T04:51:54Z",
      "updated_at": "2017-04-24T04:51:54Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov - I know that csv does not have a published standard, but tools like CSVEdit (http://csved.sjfrancke.nl/) have been successful at collecting all the \"common formats in the wild\".  However, I'm not really hung on that one - it's these others that I have to deal with much more often.\r\n\r\n@BrucePay - I am thinking \"dedicated test- CMDLets\"  (if \"test-\" is the right verb to use for well-formed validations) to expose this functionality so that:\r\n- I can easily discover this functionality.\r\n- I can be sure to only receive errors of the format validation (execution of the general CMDLets could be emitting errors for many conditions and I don't know how many different validation errors it might be capable of emitting).  Especially important when I as the script author am not the author of the formatted input data.\r\n- I can be given the exact position in the data where the error occurs - like I am used to in online linters - this may already be part of the built-in check, but if it is not for any given command, that test-whatever would be diligent in surfacing that information.\r\n- If the existing functionality does not do it already, perhaps reporting all errors that can be found, not simply stopping on the first one found.\r\n\r\nAlthough I think a CMDLet is more discoverable, if providing a CMDLet is difficult, perhaps \"Convert-ToYaml -validateonly\" that just gives a true or the location of the first error.\r\n\r\nI haven't wrapped my head around this enough to know if validation errors are all that the \"Convert-\" CMDLets output?  But even if so, I would still say that having dedicated cmdlets would help people understand that better and through broader use feedback might improve the quality of the validation code.\r\n\r\nIn general it seems like there could be a lot more \"Test-\" CMDLets across all of powershell.",
      "created_at": "2017-04-24T13:20:42Z",
      "updated_at": "2017-04-24T13:22:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Test-Json was added.",
      "created_at": "2018-10-31T15:06:04Z",
      "updated_at": "2018-10-31T15:06:04Z"
    },
    {
      "author": "jasonchester",
      "author_association": "NONE",
      "body": "+1 to better handling of CSV files.\r\n\r\nWhile not an official standard there are best practices published and commonly accepted \r\n* https://www.ietf.org/rfc/rfc4180.txt \r\n* https://www.w3.org/TR/tabular-data-primer/ & https://github.com/w3c/csvw\r\n\r\nTest-CSV is certainly possible as there are a number of tools in that space already \r\n* http://csvlint.io/ & https://github.com/theodi/csvlint.rb\r\n* https://csvkit.readthedocs.io/en/1.0.3/scripts/csvclean.html#\r\n* https://github.com/slashbit/csv-lint\r\n* https://github.com/Clever/csvlint",
      "created_at": "2019-01-03T15:58:17Z",
      "updated_at": "2019-01-03T15:58:17Z"
    }
  ],
  "created_at": "2017-04-20T23:18:00Z",
  "labels": [
    "WG-Cmdlets",
    "Issue-Discussion"
  ],
  "number": 3613,
  "state": "open",
  "title": "Complex Data Format Linters?  Test-Json, Test-yaml, Test-xml, Test-CSV",
  "updated_at": "2019-01-03T15:58:18Z"
}