{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5243",
  "author": "iSazonov",
  "body": "Related #5158.\r\n\r\n### Fix description\r\n\r\nCommit 1. Minor optimizations in `OutputError()`.\r\n\r\nCommit 2. Before the fix we read sources files twice in base.EndProcessing() and in this.EndProcessing() - it is excluded. Also now we read source files in StringBuilder to exclude large reallocations. Added one test.\r\n\r\n### Additional considerations\r\nI expect the fix remove performance issues reported in #5158. So we can close the Issue by the PR and open new Issue to discuss refactoring the code to use ` CompileAssemblyFromFile()`. Using Roslyn can open paths to enhance the Add-Type cmdlet's capabilities but requires a lot of work.",
  "closed_at": "2017-10-31T15:00:42Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@PaulHigin @daxian-dbw Thanks for review! It seems I found how compile files - I'll test and come back with new PR in days so you will have a choice that back port to PS 5.1.",
      "created_at": "2017-10-31T15:00:01Z",
      "updated_at": "2017-10-31T15:00:01Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov Thanks for spending effort redesign the code, looking forward to the new PR!\r\nAs for porting to windows, one thing we all need to know is that in Windows powershell, add-type goes through completely different code path (it uses CodeDom in full .NET). So your new PR most likely won't be ported back, but this micro-optimization change may be ported back.",
      "created_at": "2017-10-31T15:13:11Z",
      "updated_at": "2017-10-31T15:13:19Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw, @iSazonov I just noticed that the AddTypeCommandBase abstract class is public.  So removing the duplicate sourceCode read from there could potentially be a breaking change if someone was relying on that functionality.  I feel it is an acceptable risk for Core 6 since it is unlikely anyone has a dependency on it.  But for Windows (back porting) it could adversely affect a customer.",
      "created_at": "2017-10-31T17:16:56Z",
      "updated_at": "2017-10-31T17:16:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Good catch! We can avoid breaking change if we move AddTypeCommandBase.EndProcessing code in AddTypeCommand.EndProcessing. Makes a new PR?",
      "created_at": "2017-11-01T04:28:12Z",
      "updated_at": "2017-11-01T04:28:12Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov Yes, moving the EndProcessing code into the base class seems like the right thing to do.",
      "created_at": "2017-11-01T18:33:10Z",
      "updated_at": "2017-11-01T18:33:10Z"
    }
  ],
  "created_at": "2017-10-26T13:57:35Z",
  "number": 5243,
  "state": "closed",
  "title": "Fix performance issues in Add-Type",
  "updated_at": "2018-02-01T17:22:17Z"
}