{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16538",
  "author": "iRon7",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nI am not quiet sure about this, but I would expect PowerShell to be able to cast ([CanConvertTo](https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.typeconverter.canconvertto)) an object array (`Object[]`) to a specific `IEnumerable`. The issue occurred to me when I was trying to create an **`InvariantCultureIgnoreCase`** [`HashSet`](https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.hashset-1) and immediately populate it in a single statement:\r\n\r\n```PowerShell\r\n[System.Collections.Generic.HashSet[String]]::new(@('a', 'b', 'c', 'A', 'b'), [StringComparer]::InvariantCultureIgnoreCase)\r\n```\r\n\r\n### Expected behavior\r\n\r\n```console\r\na\r\nb\r\nc\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n<details>\r\n  <summary>MethodException: Cannot find an overload for \"new\" and the argument count: \"2\".</summary>\r\n\r\n```console\r\nException             :\r\n    Type        : System.Management.Automation.MethodException\r\n    ErrorRecord :\r\n        Exception             :\r\n            Type    : System.Management.Automation.ParentContainsErrorRecordException\r\n            Message : Cannot find an overload for \"new\" and the argument count: \"2\".\r\n            HResult : -2146233087\r\n        CategoryInfo          : NotSpecified: (:) [], ParentContainsErrorRecordException\r\n        FullyQualifiedErrorId : MethodCountCouldNotFindBest\r\n        InvocationInfo        :\r\n            ScriptLineNumber : 1\r\n            OffsetInLine     : 1\r\n            HistoryId        : -1\r\n            Line             : [System.Collections.Generic.HashSet[String]]::new(@('a', 'b', 'c', 'A', 'b'), [StringComparer]::InvariantCultureIgnoreCase)\r\n            PositionMessage  : At line:1 char:1\r\n                               + [System.Collections.Generic.HashSet[String]]::new(@('a', 'b', 'c', 'A \u2026\r\n                               + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n            CommandOrigin    : Internal\r\n        ScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\n    TargetSite  : System.Object CallSite.Target(System.Runtime.CompilerServices.Closure, System.Runtime.CompilerServices.CallSite, System.Type, System.Object[], System.StringComparer)\r\n    Message     : Cannot find an overload for \"new\" and the argument count: \"2\".\r\n    Data        : System.Collections.ListDictionaryInternal\r\n    Source      : Anonymously Hosted DynamicMethods Assembly\r\n    HResult     : -2146233087\r\n    StackTrace  :\r\n   at CallSite.Target(Closure , CallSite , Type , Object[] , StringComparer )\r\n   at System.Dynamic.UpdateDelegates.UpdateAndExecute3[T0,T1,T2,TRet](CallSite site, T0 arg0, T1 arg1, T2 arg2)\r\n   at System.Management.Automation.Interpreter.DynamicInstruction`4.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\nCategoryInfo          : NotSpecified: (:) [], MethodException\r\nFullyQualifiedErrorId : MethodCountCouldNotFindBest\r\nInvocationInfo        :\r\n    ScriptLineNumber : 1\r\n    OffsetInLine     : 1\r\n    HistoryId        : -1\r\n    Line             : [System.Collections.Generic.HashSet[String]]::new(@('a', 'b', 'c', 'A', 'b'), [StringComparer]::InvariantCultureIgnoreCase)\r\n    PositionMessage  : At line:1 char:1\r\n                       + [System.Collections.Generic.HashSet[String]]::new(@('a', 'b', 'c', 'A \u2026\r\n                       + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\n```\r\n</details>\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Workarround\r\n\r\nTo workaround this you will need specify the array item type (`[string[]]`):\r\n```PowerShell\r\n[System.Collections.Generic.HashSet[String]]::new([String[]]@('a', 'b', 'c', 'A', 'b'), [StringComparer]::InvariantCultureIgnoreCase)\r\n```\r\n\r\n### Related\r\n\r\nThis is probably related to the fact that I can't directly cast an `object[]` to a specific enumerable either:\r\n```PowerShell\r\n[System.Collections.Generic.IEnumerable[String]]@('a', 'b', 'c')\r\nInvalidArgument: Cannot convert the \"System.Object[]\" value of type \"System.Object[]\" to type \"System.Collections.Generic.IEnumerable`1[System.String]\".\r\n```\r\n\r\nBut this (rather [WET](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself)) statement works:\r\n```PowerShell\r\n[System.Collections.Generic.IEnumerable[String]][String[]]@('a', 'b', 'c')\r\na\r\nb\r\nc\r\n```\r\n\r\n**Related issues**\r\n* [`#16002` IEnumerable -property values should enumerate](https://github.com/PowerShell/PowerShell/issues/16002)\r\n* [`#16003` Accelerate HashSet](https://github.com/PowerShell/PowerShell/issues/16003)",
  "closed_at": null,
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Also related: #7651",
      "created_at": "2021-12-02T12:51:10Z",
      "updated_at": "2021-12-02T12:51:10Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "The Engine-WG discussed this last night and we agree that casting should be aware of a few key interfaces and how to translate them.\r\n\r\nThe big ones I can see being necessary for a first round is:\r\n| Interface | Fallback |\r\n|---|---|\r\n|`IList<T>`|`T[]`|\r\n|`ICollection<T>`|`T[]`|\r\n|`IEnumerable<T>`|`T[]`|\r\n|`IReadOnlyList<T>`|`T[]`|\r\n|`IReadOnlyCollection<T>`|`T[]`|\r\n| Less important |\r\n|`IList`|`object[]`|\r\n|`ICollection`|`object[]`|\r\n|`IEnumerable`|`object[]`|\r\n|`IDictionary`|`Hashtable`|\r\n|`IDictionary<TKey, TValue>`|`Dictionary<TKey, TValue>`|\r\n\r\nMarking up for grabs.",
      "created_at": "2022-04-15T15:38:00Z",
      "updated_at": "2022-04-15T15:38:00Z"
    }
  ],
  "created_at": "2021-12-02T11:13:08Z",
  "number": 16538,
  "state": "open",
  "title": "`Object[]` should cast to `IEnumerable[<>]`",
  "updated_at": "2022-04-15T15:38:05Z"
}