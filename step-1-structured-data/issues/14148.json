{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14148",
  "author": "xtqqczze",
  "body": "# PR Summary\r\n\r\nFactor out multiply operation for slightly more readable code.\r\n\r\nReplace all instances of `x * (y ? 1 : -1)` with `y ? x : -x`.\r\n\r\n## PR Context\r\n\r\nAs shown in following micro-benchmark results, these changes do not worsen performance, there is in fact a very small absolute gain.\r\n\r\n```\r\n| Method |      Mean |     Error |    StdDev |    Median | Code Size | Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------- |----------:|----------:|----------:|----------:|----------:|------:|------:|------:|----------:|\r\n|    Mul | 0.6288 ns | 0.0518 ns | 0.0836 ns | 0.5843 ns |      25 B |     - |     - |     - |         - |\r\n|    Neg | 0.0358 ns | 0.0275 ns | 0.0496 ns | 0.0000 ns |      16 B |     - |     - |     - |         - |\r\n```\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [NA] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [NA] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [NA] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [NA] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [NA] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [NA] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-12-08T21:59:11Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@xtqqczze Not for the PR: could you please fix `!(this is` pattern in ProviderBase.cs.",
      "created_at": "2020-11-20T06:45:46Z",
      "updated_at": "2020-11-20T06:45:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> there is in fact a very small gain.\r\n\r\n0.0358 ns vs 0.6288 ns small?\r\n\r\nIt seems there are other places where we use the multiply.",
      "created_at": "2020-11-20T10:33:34Z",
      "updated_at": "2020-11-20T10:36:53Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "> > there is in fact a very small gain.\r\n> \r\n> 0.0358 ns vs 0.6288 ns small?\r\n\r\nLarge relative gain but small absolute gain (in micro-benchmark).\r\n> \r\n> It seems there are other places where we use the multiply.\r\n\r\nThis PR replaces all instances of the  `x * (y ? 1 : -1)` pattern.\r\n\r\n",
      "created_at": "2020-11-20T10:57:08Z",
      "updated_at": "2020-11-20T10:57:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> This PR replaces all instances of the `x * (y ? 1 : -1)` pattern.\r\n\r\nSee `private object Compare(object objValue, object statMinOrMaxValue, bool isMin)` in Measure-Object.\r\nI guess we have others. I don't ask you to find all and fix but it would be great.",
      "created_at": "2020-11-20T11:09:21Z",
      "updated_at": "2020-11-20T11:09:21Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "How the measurements were done / results table in `PR Context` was created?",
      "created_at": "2020-11-20T23:32:14Z",
      "updated_at": "2020-11-20T23:32:14Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "> How the measurements were done / results table in `PR Context` was created?\r\n\r\nUsing BenchmarkDotNet:\r\n\r\n```\r\n...\r\n        bool _ascendingOrder = false;\r\n        int result = 7;\r\n\r\n        [Benchmark]\r\n        public int Mul()\r\n        {\r\n            return result * (_ascendingOrder ? 1 : -1);\r\n        }\r\n\r\n        [Benchmark]\r\n        public int Neg()\r\n        {\r\n            return _ascendingOrder ? result : -result;\r\n        }\r\n...\r\n```\r\n\r\nNot the most realistic benchmark, but the results do show performance is not harmed by the changes.",
      "created_at": "2020-11-21T00:02:23Z",
      "updated_at": "2020-11-21T00:02:23Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-12-01T14:00:07Z",
      "updated_at": "2020-12-01T14:00:07Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Please could you approve changes.",
      "created_at": "2020-12-01T15:37:46Z",
      "updated_at": "2020-12-01T15:37:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> @iSazonov Please could you approve changes.\r\n\r\nI did but since the PR changes code we need more reviewers.",
      "created_at": "2020-12-01T16:20:15Z",
      "updated_at": "2020-12-01T16:20:15Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.2.0-preview.2` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0-preview.2)\n",
      "created_at": "2020-12-15T21:38:29Z",
      "updated_at": "2020-12-15T21:38:29Z"
    }
  ],
  "created_at": "2020-11-19T20:54:49Z",
  "number": 14148,
  "state": "closed",
  "title": "Refactor multiply operation for better performance in 2 Commands.Utility functions",
  "updated_at": "2020-12-15T21:38:29Z"
}