{
  "_url": "https://github.com/PowerShell/PowerShell/issues/625",
  "author": "andschwa",
  "body": "I believe we should add the `Microsoft.PowerShell.Platform` to the built-in [modules](https://github.com/PowerShell/psl-monad/blob/2a3547e9c6a22fd36dc985e6359225893d1a8459/monad/src/engine/Utils.cs#L317).\n\nThis would give us `$IsWindows`, `$IsLinux`, `$IsOSX`, and `$IsCore` as global variables for both full and core PowerShell. We are now programming against these in the Pester tests. This would also give us a set module to add further platform-specific PowerShell functionality (I'm surprised we haven't already done this).\n\nDoing this would enable me to remove its import statement from the default profile, and from the CI scripts.\n\n/cc @vors @JamesWTruher\n",
  "closed_at": "2016-03-11T20:44:41Z",
  "comments": [
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "This issue was sparked by #623.\n",
      "created_at": "2016-03-05T00:14:35Z",
      "updated_at": "2016-03-05T00:14:35Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Just hit this problem\n\n![image](https://cloud.githubusercontent.com/assets/816680/13587398/d7935aa6-e47c-11e5-9fea-7580e8c7687a.png)\n",
      "created_at": "2016-03-07T23:54:20Z",
      "updated_at": "2016-03-07T23:54:20Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "If we do _not_ add the Platform module to the built-in modules, then we must always override the `PSModulePath` because it's being inherited from the environment on Windows, and does not contain our modules folder. I am for adding it as a built-in.\n",
      "created_at": "2016-03-07T23:55:07Z",
      "updated_at": "2016-03-07T23:55:07Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Work-around for now is `$env:PsModulePath=\"$pwd/bin/Modules\"`.\n\nPowerShell Core always expects to have this path, but we'd still want to inherit a set `PsModulePath`. Would it be appropriate to check the path, and if this folder (the built-ins folder) is missing, add it?\n",
      "created_at": "2016-03-08T05:11:33Z",
      "updated_at": "2016-08-18T00:02:55Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "hmmmm - this is only true if you're in the PowerShell directory (where build.sh is) - also, is there any case sensitivity about the environment variable? An alternative approach is to put\n`export PSMODULEPATH=$HOME/PowerShell/bin/Modules`\nin your BASH profile\n",
      "created_at": "2016-03-08T17:45:41Z",
      "updated_at": "2016-03-08T17:45:41Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@JamesWTruher This is not an issue on Linux, this is an issue on Windows.\n",
      "created_at": "2016-03-08T17:55:17Z",
      "updated_at": "2016-03-08T17:55:17Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@paulcallen Hit this too with remoting tests. The platform module _must_ become a built-in for things to work \"as expected\" with cross-platform PowerShell script development.\n\nI'll get on this.\n",
      "created_at": "2016-03-09T00:15:34Z",
      "updated_at": "2016-03-09T00:15:34Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Resolved this in #646.\n",
      "created_at": "2016-03-11T20:44:41Z",
      "updated_at": "2016-03-11T20:44:41Z"
    }
  ],
  "created_at": "2016-03-05T00:11:23Z",
  "labels": [
    "Issue-Bug",
    "Issue-Question",
    "OS-Windows",
    "OS-Linux"
  ],
  "number": 625,
  "state": "closed",
  "title": "Make Microsoft.PowerShell.Platform a system module",
  "updated_at": "2016-08-18T00:02:55Z"
}