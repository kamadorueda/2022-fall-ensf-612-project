{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3415",
  "author": "pauldambra",
  "body": "I [asked this question on twitter](https://twitter.com/pauldambra/status/845274435707977728) and it was suggested I post here.\r\n\r\n[Many](http://stackoverflow.com/a/13478622/222163) [people](https://github.com/azet/community_bash_style_guide#style-conventions) consider it good practice to start a bash script.\r\n\r\n```\r\n#! /bin/bash\r\nset -eu\r\n```\r\n\r\n`set -e` tells the script to stop on first error\r\n`set -u` tells the script to not allow undeclared variables\r\n\r\nAlthough [not everyone agrees](http://mywiki.wooledge.org/BashFAQ/105)\r\n\r\nI think `set -u` and `Set-StrictMode -Version 1.0` are equivalent.\r\n\r\nI just wrote a set of Powershell scripts for managing an elasticsearch server. Then a few top-level scripts to tie them together. \r\n\r\nIt would have been really useful to be able to write something equivalent to...\r\n\r\n```\r\nset -e\r\n\r\n$someValue = .\\server-task-1.ps1\r\n.\\server-task-2.ps1 -using $someValue\r\n.\\task-that-requires-everything-else-suceeded.ps1\r\n```\r\n\r\n... but I couldn't find how to and ended up with something more like...\r\n\r\n```\r\n\r\n$someValue = .\\server-task-1.ps1\r\nif ($LastExitCode -ne 0) {\r\n    exit $LastExitCode \r\n}\r\n\r\n.\\server-task-2.ps1  -using $someValue\r\nif ($LastExitCode -ne 0) {\r\n    exit $LastExitCode \r\n}\r\n\r\n.\\task-that-requires-everything-else-suceeded.ps1\r\nif ($LastExitCode -ne 0) {\r\n    exit $LastExitCode \r\n}\r\n\r\n```\r\n\r\nApologies if this is already possible and I've missed it...",
  "closed_at": "2021-11-10T21:57:06Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "`$erroractionpreference = \"stop\"` is similar to `set -e`, except it only works against cmdlets and not native commands",
      "created_at": "2017-03-25T00:33:51Z",
      "updated_at": "2017-03-25T00:33:51Z"
    },
    {
      "author": "pauldambra",
      "author_association": "NONE",
      "body": "As someone fresh to Powershell that's a confusing distinction. \r\n\r\nSo would $erroractionpreference = \"stop\" work for my example above..?\r\n\r\ni.e.\r\n\r\n```\r\n$erroractionpreference = \"stop\"\r\n\r\n$someValue = .\\server-task-1.ps1\r\n\r\n# does not run the next two commands if server-task-1.ps1 exits with code != 0\r\n.\\server-task-2.ps1 -using $someValue\r\n.\\task-that-requires-everything-else-suceeded.ps1\r\n```\r\n\r\nbut\r\n\r\n```\r\n$erroractionpreference = \"stop\"\r\n\r\n$someValue = .\\server-task-1.exe\r\n\r\n# does run the next two commands _even though_ server-task-1.exe exits with code != 0\r\n.\\server-task-2.ps1 -using $someValue\r\n.\\task-that-requires-everything-else-suceeded.ps1\r\n```\r\n\r\n",
      "created_at": "2017-03-27T10:59:09Z",
      "updated_at": "2017-03-27T10:59:09Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "`$erroractionpreference = \"stop\"` only works if `Write-Error` is called (such as an exception is raised).  It doesn't do any checks against $lastexitcode.  We can certainly look into adding another preference variable to throw an exception if $lastexitcode != 0.",
      "created_at": "2017-03-27T17:09:43Z",
      "updated_at": "2017-03-27T17:09:43Z"
    },
    {
      "author": "mopadden",
      "author_association": "NONE",
      "body": "Would probably want to throw the exception only in a context where Powershell also sets $? to false as a result.\r\n\r\nThrowing an exception in other situations where lastexitcode != 0 would not give a result equivalent to \"set -e\" in bash.\r\n\r\nhttps://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html\r\nEdit: the idea is to throw an error on failure where the success/failure of an application is not tested.",
      "created_at": "2017-03-29T20:44:41Z",
      "updated_at": "2017-03-30T10:45:25Z"
    },
    {
      "author": "mopadden",
      "author_association": "NONE",
      "body": "Hi, i've done some work on this, can I ask for an assignment?",
      "created_at": "2017-04-07T17:16:04Z",
      "updated_at": "2017-04-07T17:16:04Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mopadden consider it assigned, GitHub doesn't allow assigning to people without write access",
      "created_at": "2017-04-11T22:19:30Z",
      "updated_at": "2017-04-11T22:19:30Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Assigning to @daxian-dbw who's assigned to the PR so no one else duplicates this work",
      "created_at": "2017-04-11T22:20:31Z",
      "updated_at": "2017-04-11T22:20:31Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Anyone who's interested in this should review the RFC: https://github.com/PowerShell/PowerShell-RFC/pull/88/files",
      "created_at": "2017-06-20T17:31:50Z",
      "updated_at": "2017-06-20T17:31:50Z"
    },
    {
      "author": "choovick",
      "author_association": "NONE",
      "body": "+1, very inconvenient to check $LastExitCode, especially when using PS for build scripts with multiple steps...",
      "created_at": "2018-07-11T15:19:02Z",
      "updated_at": "2018-07-11T15:19:02Z"
    },
    {
      "author": "b-rad15",
      "author_association": "NONE",
      "body": "Since this is the first search result, linking the most recent thread on this RFC that I can find for anyone interested in implementing it https://github.com/PowerShell/PowerShell-RFC/pull/277",
      "created_at": "2021-06-29T06:56:37Z",
      "updated_at": "2021-06-29T06:56:59Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The PR that implements the RFC was already merged as an experimental feature: #15897\r\nSo, closing this issue.",
      "created_at": "2021-11-10T21:57:06Z",
      "updated_at": "2021-11-10T21:57:06Z"
    }
  ],
  "created_at": "2017-03-24T20:46:13Z",
  "number": 3415,
  "state": "closed",
  "title": "Equivalent of bash `set -e`",
  "updated_at": "2021-11-10T21:57:21Z"
}