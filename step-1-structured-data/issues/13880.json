{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13880",
  "author": "xtqqczze",
  "body": "Enable [IDE0044: MakeFieldReadonly](https://docs.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/ide0044) as warning.\r\n\r\n* Add suppression for `ComInterop` via `GlobalSuppressions.cs`\r\n* Convert a few `static readonly` fields to `const`.",
  "closed_at": "2021-07-07T04:33:20Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@xtqqczze Please resolve merge conflicts and rebase.",
      "created_at": "2020-11-02T07:44:05Z",
      "updated_at": "2020-11-02T07:44:30Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov We can reuse this PR for `src\\Microsoft.Management.Automation` changes?",
      "created_at": "2020-11-02T10:46:33Z",
      "updated_at": "2020-11-02T10:46:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The PR is still huge.",
      "created_at": "2020-11-02T10:50:37Z",
      "updated_at": "2020-11-02T10:50:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "CIs still fail. Maybe split the PR?",
      "created_at": "2020-11-09T04:12:24Z",
      "updated_at": "2020-11-09T04:12:24Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "> Also, I happily went and added all my readonly tags to a [Serializable] class only to discover (of course) that a binary deserialize will fail in this instance due to the readonly property. But NO warning of this until the runtime error.\r\n\r\n_Originally posted by @vsfeedback in https://github.com/dotnet/roslyn/issues/27212#issue-327077528_\r\n\r\n@iSazonov Can you confirm that using the readonly-modifier in our case will not adversely affect types marked with `SerializableAttribute`?",
      "created_at": "2020-11-10T13:20:46Z",
      "updated_at": "2020-11-10T13:20:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> @iSazonov Can you confirm that using the readonly-modifier in our case will not adversely affect types marked with `SerializableAttribute`?\r\n\r\nCan you point a type you say about?",
      "created_at": "2020-11-10T14:38:58Z",
      "updated_at": "2020-11-10T14:38:58Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "> > @iSazonov Can you confirm that using the readonly-modifier in our case will not adversely affect types marked with `SerializableAttribute`?\r\n> \r\n> Can you point a type you say about?\r\n\r\n@iSazonov In #13966 we made the field `_originInfo` readonly in the serializable class `RemotingErrorRecord`: https://github.com/xtqqczze/PowerShell/blob/94c15f6000e9d189c485f4e3d946cfd00372a317/src/System.Management.Automation/engine/remoting/client/RemotingErrorRecord.cs#L28\n\n<blockquote><img src=\"https://avatars3.githubusercontent.com/u/45661989?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/xtqqczze/PowerShell\">xtqqczze/PowerShell</a></strong></div><div>PowerShell for every system! Contribute to xtqqczze/PowerShell development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2020-11-11T20:40:18Z",
      "updated_at": "2020-11-11T20:40:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> In #13966 we made the field `_originInfo` readonly in the serializable class `RemotingErrorRecord`\r\n\r\nThis was my concern too but the field is assigned only in protected constructor at deserialization time.\r\nAlso serialization commonly works only for public members and settable properties.\r\n\r\nDo you see other samples of the pattern we need to review carefully?",
      "created_at": "2020-11-12T05:01:22Z",
      "updated_at": "2020-11-12T05:02:37Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "> > In #13966 we made the field `_originInfo` readonly in the serializable class `RemotingErrorRecord`\r\n> \r\n> This was my concern too but the field is assigned only in protected constructor at deserialization time.\r\n> Also serialization commonly works only for public members and settable properties.\r\n> \r\n> Do you see other samples of the pattern we need to review carefully?\r\n\r\nI do not have any more examples, but I worry this may have been missed in review for PRs already merged.",
      "created_at": "2020-11-12T05:15:02Z",
      "updated_at": "2020-11-12T05:15:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I worry this may have been missed in review for PRs already merged.\r\n\r\nI checked this in reviews but I was wrong about private fields\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.serializableattribute?view=net-5.0:\r\n> When you apply the SerializableAttribute attribute to a type, **all private** and public fields are serialized by default.\r\n\r\nSo we need re-review this. I found follow examples (maybe you can find others):\r\nErrorPackage.cs, ExtendedTypeSystemException.cs, MshSecurityException.cs, PseudoParameters.cs,TypeTable.cs,LocalConnection.cs PSDataCollection.cs, Job2.cs, RemotingErrorRecord.cs, FormatTable.cs, HelpCategoryInvalidException.cs, HelpNotFoundException.cs, CommandDiscoveryExceptions.cs, CryptoUtils.cs, MetadataExceptions.cs, MshArgumentException.cs, MshArgumentNullException.cs, MshArgumentOutOfRangeException.cs, MshInvalidOperationException.cs, MshNotImplementedException.cs, MshNotSupportedException.cs, MshObjectDisposedException.cs, ParameterBinderExceptions.cs, ParserException.cs, SessionStateExceptions.cs\n\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.serializableattribute\">SerializableAttribute Class (System)</a></strong></div><div>Indicates that a class can be serialized. This class cannot be inherited. </div></blockquote>",
      "created_at": "2020-11-12T06:07:15Z",
      "updated_at": "2020-11-12T06:07:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@xtqqczze Could you please revert changes I mentioned in previous comment in follow PR?",
      "created_at": "2020-11-13T04:46:27Z",
      "updated_at": "2020-11-13T04:46:27Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "> @xtqqczze Could you please revert changes I mentioned in previous comment in follow PR?\r\n\r\n@iSazonov I am not so sure the changes are not a problem - they did not cause test failures after all. I'm been thinking that deserializers are usually implemented using reflection, so they can write to readonly fields.\r\n\r\nDo you have specific concerns with the `SerializableAttribute` and readonly fields?\r\n",
      "created_at": "2020-11-13T05:30:49Z",
      "updated_at": "2020-11-13T05:31:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Do you have specific concerns with the SerializableAttribute and readonly fields?\r\n\r\nI am not sure it works.\r\nAnd the remote code is probably not covered by tests.",
      "created_at": "2020-11-13T09:50:10Z",
      "updated_at": "2020-11-13T09:50:10Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-11-20T14:00:05Z",
      "updated_at": "2020-11-20T14:00:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@PaulHigin Could you please help?\r\n- Do we still need `SerializableAttribute` if we don't use BinarySerializer or we can remove them?\r\n- Can we make fields readonly or we can break XML serializer?",
      "created_at": "2020-11-21T15:14:52Z",
      "updated_at": "2020-11-21T15:14:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> @PaulHigin Could you please help?\r\n> \r\n> * Do we still need `SerializableAttribute` if we don't use BinarySerializer or we can remove them?\r\n> * Can we make fields readonly or we can break XML serializer?\r\n\r\n@PaulHigin Could you please clarify?",
      "created_at": "2020-11-24T03:29:41Z",
      "updated_at": "2020-11-24T03:29:41Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov  What part in the code are you referring to?  Can you provide a link?",
      "created_at": "2020-11-24T19:04:16Z",
      "updated_at": "2020-11-24T19:04:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> @iSazonov What part in the code are you referring to? Can you provide a link?\r\n\r\nhttps://github.com/xtqqczze/PowerShell/blob/94c15f6000e9d189c485f4e3d946cfd00372a317/src/System.Management.Automation/engine/remoting/client/RemotingErrorRecord.cs#L28\r\nShould we remove `SerializableAttribute`-s in such cases if we don't use BinaryFormatter?\r\nCan we make such fields readonly or we can break XML serializer?\n\n<blockquote><img src=\"https://avatars3.githubusercontent.com/u/45661989?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/xtqqczze/PowerShell\">xtqqczze/PowerShell</a></strong></div><div>PowerShell for every system! Contribute to xtqqczze/PowerShell development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2020-11-25T03:25:46Z",
      "updated_at": "2020-11-25T03:25:48Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "> > Set readonly field via reflection doesn't work in .NET Core 3.0 and later versions, see https://stackoverflow.com/a/934942:\r\n> > \r\n> > > In dotnet core 3.0 this is no longer possible. A System.FieldAccessException is thrown saying: \"Cannot set initonly static field 'bar' after type 'Foo' is initialized.\"\r\n> \r\n> @daxian-dbw I compiled and ran the code from https://stackoverflow.com/a/934944 with .NET Core 3.0, .NET Core 3.1 and .NET 5.0 and didn't see the `System.FieldAccessException`.\r\n> \r\n> ```csharp\r\n> using System;\r\n> using System.Reflection;\r\n> \r\n> public class Test\r\n> {\r\n>     private readonly string foo = \"Foo\";\r\n> \r\n>     public static void Main()\r\n>     {\r\n>         Test test = new Test();\r\n>         FieldInfo field = typeof(Test).GetField\r\n>             (\"foo\", BindingFlags.Instance | BindingFlags.NonPublic);\r\n>         field.SetValue(test, \"Hello\");\r\n>         Console.WriteLine(test.foo);\r\n>     }        \r\n> }\r\n> ```\r\n> \r\n> According to [SetValue documentation](https://docs.microsoft.com/dotnet/api/system.reflection.fieldinfo.setvalue), if you attempt to set a value on a **static**, readonly field, an exception is thrown in .NET Core 3.0 and later.\r\n> \r\n> See also:\r\n> * https://github.com/dotnet/runtime/issues/11571\r\n> * https://github.com/dotnet/dotnet-api-docs/issues/3851\r\n\r\n_Originally posted by @xtqqczze in https://github.com/PowerShell/PSReadLine/issues/1923#issuecomment-733533803_",
      "created_at": "2020-11-25T07:58:47Z",
      "updated_at": "2020-11-25T08:27:44Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-12-02T14:00:07Z",
      "updated_at": "2020-12-02T14:00:07Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov `ComInterop` is frozen, but the code is not structured in separate project from `System.Management.Automation`, so we cannot currently disable analyzers for only ComInterop :(\r\n\r\n```\r\nD:\\a\\1\\s\\src\\System.Management.Automation\\engine\\ComInterop\\ExcepInfo.cs(18,23): error IDE0044: Make field readonly [D:\\a\\1\\s\\src\\System.Management.Automation\\System.Management.Automation.csproj]\r\nD:\\a\\1\\s\\src\\System.Management.Automation\\engine\\ComInterop\\ExcepInfo.cs(19,23): error IDE0044: Make field readonly [D:\\a\\1\\s\\src\\System.Management.Automation\\System.Management.Automation.csproj]\r\nD:\\a\\1\\s\\src\\System.Management.Automation\\engine\\ComInterop\\ExcepInfo.cs(23,21): error IDE0044: Make field readonly [D:\\a\\1\\s\\src\\System.Management.Automation\\System.Management.Automation.csproj]\r\nD:\\a\\1\\s\\src\\System.Management.Automation\\engine\\ComInterop\\ExcepInfo.cs(24,24): error IDE0044: Make field readonly [D:\\a\\1\\s\\src\\System.Management.Automation\\System.Management.Automation.csproj]\r\nD:\\a\\1\\s\\src\\System.Management.Automation\\engine\\ComInterop\\ExcepInfo.cs(25,24): error IDE0044: Make field readonly [D:\\a\\1\\s\\src\\System.Management.Automation\\System.Management.Automation.csproj]\r\nD:\\a\\1\\s\\src\\System.Management.Automation\\engine\\ComInterop\\ExcepInfo.cs(26,21): error IDE0044: Make field readonly [D:\\a\\1\\s\\src\\System.Management.Automation\\System.Management.Automation.csproj]\r\nD:\\a\\1\\s\\src\\System.Management.Automation\\engine\\ComInterop\\ComInvokeBinder.cs(26,37): error IDE0044: Make field readonly [D:\\a\\1\\s\\src\\System.Management.Automation\\System.Management.Automation.csproj]\r\n```",
      "created_at": "2021-06-27T20:59:41Z",
      "updated_at": "2021-06-27T20:59:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@xtqqczze Please look the code in .Net Runtime repository. Perhaps they already fixed the issues. If no we could suppress the warnings on file level:\r\n```\r\n[ExcepInfo.cs]\r\ndotnet_diagnostic.IDE0044.severity = none\r\n```\r\n\r\n(For generated code https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/configuration-options#exclude-generated-code)",
      "created_at": "2021-06-28T03:33:59Z",
      "updated_at": "2021-06-28T03:41:03Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "`/home/vsts/work/1/s/src/System.Management.Automation/engine/interpreter/InstructionList.cs(99,49): error CS0649: Field 'InstructionList._debugCookies' is never assigned to, and will always have its default value null [/home/vsts/work/1/s/src/System.Management.Automation/System.Management.Automation.csproj]`\r\n",
      "created_at": "2021-06-29T12:16:24Z",
      "updated_at": "2021-06-29T12:16:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> @xtqqczze Please look the code in .Net Runtime repository. Perhaps they already fixed the issues. If no we could suppress the warnings on file level:\r\n> \r\n> ```\r\n> [ExcepInfo.cs]\r\n> dotnet_diagnostic.IDE0044.severity = none\r\n> ```\r\n> \r\n> (For generated code https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/configuration-options#exclude-generated-code)\r\n\r\nDoesn't this work?\n\n<blockquote><img src=\"https://docs.microsoft.com/dotnet/media/dotnet-logo.svg\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/configuration-options\">Configure code analysis rules - .NET</a></strong></div><div>Learn how to configure code analysis rules in an analyzer configuration file.</div></blockquote>",
      "created_at": "2021-06-29T17:42:05Z",
      "updated_at": "2021-06-29T17:42:06Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "> > @xtqqczze Please look the code in .Net Runtime repository. Perhaps they already fixed the issues. If no we could suppress the warnings on file level:\r\n> > ```\r\n> > [ExcepInfo.cs]\r\n> > dotnet_diagnostic.IDE0044.severity = none\r\n> > ```\r\n> > \r\n> > \r\n> >     \r\n> >       \r\n> >     \r\n> > \r\n> >       \r\n> >     \r\n> > \r\n> >     \r\n> >   \r\n> > (For generated code https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/configuration-options#exclude-generated-code)\r\n> \r\n> Doesn't this work?\r\n\r\n@iSazonov Unless I specify the absolute path, I see warning `InvalidGlobalSectionName`, so probably this approach doesn't work in a `GlobalConfig` file. In any case, suppression in a `GlobalSuppressions.cs` file works for this PR. Ideally, the `ComInterop` code would be split to separate project and we set `RunAnalyzers` to `false` in the csproj. We could open an issue to discuss the best approach. \r\n",
      "created_at": "2021-06-30T20:46:04Z",
      "updated_at": "2021-07-01T02:05:27Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "Depends on #15704.",
      "created_at": "2021-07-01T02:06:25Z",
      "updated_at": "2021-07-01T02:06:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> @iSazonov Unless I specify the absolute path, I see warning `InvalidGlobalSectionName`, so probably this approach doesn't work in a `GlobalConfig` file. In any case, suppression in a `GlobalSuppressions.cs` file works for this PR. Ideally, the `ComInterop` code would be split to separate project and we set `RunAnalyzers` to `false` in the csproj. We could open an issue to discuss the best approach.\r\n\r\n absolute path? What about relative?\r\n\r\nI don't like the assembly level suppression and I'd consider it as only last resort. \r\n\r\nI believe we don't want ComInterop in separate project because we don't want new additional dll.",
      "created_at": "2021-07-01T03:32:48Z",
      "updated_at": "2021-07-01T03:32:48Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "> > @iSazonov Unless I specify the absolute path, I see warning `InvalidGlobalSectionName`, so probably this approach doesn't work in a `GlobalConfig` file. In any case, suppression in a `GlobalSuppressions.cs` file works for this PR. Ideally, the `ComInterop` code would be split to separate project and we set `RunAnalyzers` to `false` in the csproj. We could open an issue to discuss the best approach.\r\n> \r\n> absolute path? What about relative?\r\n> \r\n> I don't like the assembly level suppression and I'd consider it as only last resort.\r\n\r\nIt seems that section headers for [global AnalyzerConfig](https://docs.microsoft.com/dotnet/fundamentals/code-analysis/configuration-files#global-analyzerconfig) files must specify an absolute file path. A relative file path produces a compiler warning and is ignored.",
      "created_at": "2021-07-03T08:30:04Z",
      "updated_at": "2021-07-03T08:30:04Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.2.0-preview.8` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0-preview.8)\n",
      "created_at": "2021-07-22T21:40:46Z",
      "updated_at": "2021-07-22T21:40:46Z"
    }
  ],
  "created_at": "2020-10-26T15:59:15Z",
  "number": 13880,
  "state": "closed",
  "title": "Enable IDE0044: MakeFieldReadonly",
  "updated_at": "2021-07-22T21:40:47Z"
}