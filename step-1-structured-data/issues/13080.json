{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13080",
  "author": "mikeTWC1984",
  "body": "\r\nI'm experimenting with some job scheduling tool and trying to imitate warning state using specific exit code. In bash I can do something like ``` echo 'warning message' >&2; exit $MyWarningCode``` In powershell it's a bit less intuitive:\r\n\r\n1) Write-Warning writes to stdout, not stderror.  So to imitate warning message I need to use Write-Error. \r\n\r\n2) Write-Error - the output message includes \"Write-Error\".  Its kind of weird. Shouldn't this be just \"ERROR:\", similar to what Write-Warning do?\r\n \r\n![image](https://user-images.githubusercontent.com/31977106/86309428-b06e1580-bbe9-11ea-9802-48820a47d049.png)\r\n\r\n\r\n\r\n\r\n",
  "closed_at": "2020-07-04T00:00:13Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Error records in PowerShell typically list the cmdlet name that generated the error record, to make debugging easier later on. PowerShell's stream concepts don't map _super_ well externally where you only really have stdout and stderr to work with, though; there's only so many ways you can condense 6 streams down to 2, and you'll always be losing out somewhere, so oftentimes it's mainly a matter of making the best of it.",
      "created_at": "2020-07-02T03:14:31Z",
      "updated_at": "2020-07-02T03:14:31Z"
    },
    {
      "author": "mikeTWC1984",
      "author_association": "CONTRIBUTOR",
      "body": "make sense. Is there any plan to implement 1>&2 , it's currently throwing \"operator is reserved for future use\".  This actually can be achieved with $Host.UI.WriteErrorLine , but it just looks more like a hack",
      "created_at": "2020-07-02T03:41:53Z",
      "updated_at": "2020-07-02T03:42:23Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "There's generally not a need to do that, because there are `Write-*` cmdlets for each stream, so you can just use typical pipelines to send data to each stream, e.g., `\"this is an error\" | Write-Error`\r\n\r\nThat doesn't mean those operators are impossible to implement, but it isn't a simple problem; each stream in PowerShell is strongly typed (the output stream is the only exception), so it's likely at best you'll get any complex objects converted to string data when they're sent to a different stream, which may not always be desirable.\r\n\r\nNot sure if there are plans for that, but I've not heard anything about that being planned... I think we may have existing issues for that, I'm not sure.",
      "created_at": "2020-07-02T04:30:49Z",
      "updated_at": "2020-07-02T04:30:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "All about PowerShell streams https://devblogs.microsoft.com/scripting/understanding-streams-redirection-and-write-host-in-powershell/\n\n<blockquote><img src=\"https://devblogs.microsoft.com/scripting/wp-content/uploads/sites/29/2018/09/dr_scripto.gif\" width=\"48\" align=\"right\"><div><img src=\"https://devblogs.microsoft.com/scripting/wp-content/uploads/sites/29/2018/10/Microsoft-Favicon.png\" height=\"14\"> Scripting Blog</div><div><strong><a href=\"https://devblogs.microsoft.com/scripting/understanding-streams-redirection-and-write-host-in-powershell/\">Understanding Streams, Redirection, and Write-Host in PowerShell | Scripting Blog</a></strong></div><div>Summary: June Blender explains how to understand and use streams in Windows PowerShell. Microsoft Scripting Guy, Ed Wilson, is here. Today guest blogger, June Blender, explains how to understand and use streams in Windows PowerShell. To read more from June, see these Hey,</div></blockquote>",
      "created_at": "2020-07-02T11:23:17Z",
      "updated_at": "2020-07-02T11:23:22Z"
    },
    {
      "author": "mikemol",
      "author_association": "NONE",
      "body": "There really does need to be a way to send data to `stderr` without triggering `ErrorAction`. `stderr` is often used as a diagnostic data channel on POSIX-like systems, kept separate from `stdout` which is often used for streaming data being processed. In Powershell today, there's no way to emit debugging output while simultaneously pipelining `pwsh` with POSIX-native tooling. That leads to very awkward shims, and a general loss of debugging data streams.\r\n\r\nIdeally, an invocation of `pwsh` would at minimum permit specifying file descriptors to map the event streams to, to let the plumbing get wired in to user expectations.",
      "created_at": "2020-07-02T13:55:47Z",
      "updated_at": "2020-07-02T13:55:47Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-07-04T00:00:13Z",
      "updated_at": "2020-07-04T00:00:13Z"
    }
  ],
  "created_at": "2020-07-02T03:03:25Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 13080,
  "state": "closed",
  "title": "Write-Error\\Warning - a bit weird behavior",
  "updated_at": "2020-07-04T00:00:13Z"
}