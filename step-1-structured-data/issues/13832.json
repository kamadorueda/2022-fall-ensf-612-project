{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13832",
  "author": "jhoneill",
  "body": "Looking at #13831  I found something which may have been logged before but I can find it so if this is duplicate, please close \r\n\r\nTo test that problem I ran   `pwsh -c \"write-host asd\"` and got the expected response. \r\n\r\n```\r\nSetting-up Paths, Prompt and History. Redefining CD and h, Defining Whathas, HowLong,  Edit, Elevate, TS, Show-Help.\r\nasd\r\n```\r\nI then called up the previous line and added a switch to get this  ` pwsh -c \"write-host asd\" -noprofile`\r\n\r\n```\r\nSetting-up Paths, Prompt and History. Redefining CD and h, Defining Whathas, HowLong,  Edit, Elevate, TS, Show-Help.\r\nasd -noprofile\r\n```\r\n\r\nEverything after `-c` is treated as an argument for the command.  And **this is OK. People probably rely on it** the same probably applies with a `-file` argument as well \r\n\r\nhowever the help text reads\r\n```\r\nUsage: pwsh[.exe] [-Login] [[-File] <filePath> [args]]\r\n                  [-Command { - | <script-block> [-args <arg-array>]\r\n                                | <string> [<CommandParameters>] } ]\r\n                  [-ConfigurationName <string>] [-CustomPipeName <string>]\r\n                  [-EncodedCommand <Base64EncodedCommand>]\r\n                  [-ExecutionPolicy <ExecutionPolicy>] [-InputFormat {Text | XML}]\r\n                  [-Interactive] [-MTA] [-NoExit] [-NoLogo] [-NonInteractive] [-NoProfile]\r\n                  [-OutputFormat {Text | XML}] [-SettingsFile <filePath>] [-STA] [-Version]\r\n                  [-WindowStyle <style>] [-WorkingDirectory <directoryPath>]\r\n```\r\n\r\nThis bit of BNF (I think it is BNF, but I haven't really worked with that since I finished my degree in the 1980s!)\r\n```\r\n-Command { - | <script-block> [-args <arg-array>]  | <string> [<CommandParameters>] } ]\r\n```\r\nsays that if -`command` comes before the others they will morph into command parameters, **but** I read the whole things as saying `-NoExit`, `-NoProfile` etc are optional after -`command <string>`  I'll defer to  anyone with more recent knowledge on the grammar, but most readers will infer that the sequence is valid as shown. \r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\npwsh -c \"write-host Hello\" -Noexit\r\n```\r\nor\r\n\r\n```powershell\r\npwsh -c \"write-host Hello\" -NoProfile\r\n```\r\n\r\n## Expected behavior\r\n\r\n```none\r\nHello\r\n```\r\n\r\n## Actual behavior\r\n\r\n```none\r\nHello -Noexit\r\n```\r\nor \r\n\r\n```none\r\nxxxx Profile message xxxx\r\nHello -NoProfile\r\n```\r\n\r\n## Environment data\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.3\r\nPSEdition                      Core\r\nGitCommitId                    7.0.3\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2021-01-18T12:36:57Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "While the description in the help topic is clear about everything after `-c` / `-Command` becoming an argument to that parameter, it definitely makes sense to reflect that in the syntax diagram too, by placing it _last_.\r\n\r\nThe conceptual challenge here is that users will generally not expect the order of _named_ arguments to matter, but they do here. Making that clear in the help as well as _hinting_ at it in the diagram as described is probably the best we can do.  \r\n\r\n(There is nothing in the notation that supports the must-go-last concept, and given that it is an _exception_ I don't think it's worth trying to introduce one.)\r\n",
      "created_at": "2020-10-22T13:32:52Z",
      "updated_at": "2020-10-22T13:32:52Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Slightly pedantic but they aren't added as arguments, they're directly appended to `Command`:\r\n\r\n```powershell\r\n# This would be a syntax error, but instead we get command not found\r\npwsh -nop -c 'echo test |' -Something\r\n# -Something: The term '-Something' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\n# Check the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n```\r\n\r\n(@mklement0 I know you're saying this as well, I just want to stress the difference because it was confusing to me at first)",
      "created_at": "2020-10-22T14:05:34Z",
      "updated_at": "2020-10-22T14:05:34Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SeeminglyScience, yes, thanks for the clarification; specifically, what are technically separate arguments are space-concatenated, and the resulting string is then evaluated as PowerShell code.\r\n\r\nIn other words: instead of conceiving of the _first_ `-c` argument as a mini-script to which the remaining arguments are passed as arguments _for that mini-script_, _all_ `-c` arguments - however, partitioned - are stitched together and then as a whole interpreted as a script.\r\n\r\nHere's another head scratcher:\r\n\r\n```powershell\r\nPS> pwsh -nop -c echo \"one, two\" # evaluated as: `echo one, two`  i.e. a 2-element array\r\none\r\ntwo\r\n```\r\n\r\nIt isn't just confusing, it limits functionality (you can't pass verbatim arguments, because everything is interpreted by PowerShell rules) and it is also at odds with how POSIX-compatible shells do it - see https://github.com/PowerShell/PowerShell/issues/4024#issuecomment-311541803\r\n\r\n",
      "created_at": "2020-10-22T14:32:38Z",
      "updated_at": "2020-10-22T14:32:38Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> (There is nothing in the notation that supports the must-go-last concept, and given that it is an _exception_ I don't think it's worth trying to introduce one.)\r\n\r\nLike I said my knowledge of these notations has 30 years of rust on it but I **think** as it is written it implies.  `Login` (if  it appears) goes before `File `(if it appears), which goes before `command` (if it appears) which goes before `ConfigurationName`   etc.  \r\nI can't remember a wrapper for saying \"The _following in any order_\" , it's _custom and practice_ in the PowerShell world that applies that to named parameters, it's not always true for .EXEs.  \r\n\r\n",
      "created_at": "2020-10-22T14:32:45Z",
      "updated_at": "2020-10-22T14:32:45Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@jhoneill, https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_Command_Syntax?view=powershell-7.1 doesn't really name the _basis_ for the notation (but calls the representation as a whole a _syntax diagram_ and explains its elements), and I don't think we need to worry about what _formal_ notation (such as BNF, which it certainly looks like) it derives from:\r\n\r\nIt's a notation that needs to make sense to the human observer (and, as an aside, with its current formatting it doesn't do a great job at that: see #4135, #4626, #4715, #6856, #7868, #8692)\r\n\r\nDe facto, with justification, users expect the order of _named_ arguments _not_ to matter, **they are used to reading the diagrams as _not_ being meaningful in terms of the order in which the parameters are listed, except for _positional_ use** (which is hard to glean), irrespective of what the underlying formal notation may imply.\r\n\r\nThere are only two exceptional cases where the position of an (ostensible) named argument matters:\r\n\r\n* In the CLI, with `-c` / `-Command`, as discussed here.\r\n\r\n* If you disable named argument parsing with `--` (e.g., `Write-Output -- -NoEnumerate`)\r\n  * (`--%` isn't really a parameter and only applies to external programs, which don't generally understand PowerShell's notion of named parameters anyway)\r\n\r\nTherefore, except for the subtle hint of listing `-Command` last in this particular case, the notation won't help, and the burden falls on the _description_, which currently states:\r\n\r\n```none\r\nIf the value of Command is a string, Command must be the last parameter for\r\n    pwsh, because all arguments following it are interpreted as part of the\r\n    command to execute.\r\n```\r\n\r\nWhile this is pretty clear, it may make sense:\r\n\r\n*  to move it to (near) the _start_ of the parameter description\r\n\r\n* to also provide a brief hint _directly underneath the syntax diagram_.\r\n\r\n\r\n\r\n\r\n\r\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_command_syntax\">about_Command_Syntax - PowerShell</a></strong></div><div>Describes the syntax diagrams that are used in PowerShell.</div></blockquote>",
      "created_at": "2020-10-22T14:57:00Z",
      "updated_at": "2020-10-22T18:03:10Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "P.S., @SeeminglyScience, the current `-c` behavior is also notable for the asymmetry between the script-block and the string form:\r\n\r\nYou can do `pwsh -nop -c { $args.Count } -args foo, bar`, but not `pwsh -nop -c '$args.Count' foo bar`. From _within_ PowerShell, that is not a hardship, because the script-block form is superior both syntactically with respect to (limited) rich type support, but from _outside_ PowerShell you're stuck with the string syntax and its limitations.\r\n\r\nThe current syntax diagram snippet for the _string_ form of `-c` - ` <string> [<CommandParameters>]` - somewhat misleadingly suggests that `<string>` is merely a _command name_, even though you can obviously pass entire statements. \r\n\r\nMore importantly, even if you do just pass a single command name, such as in the `pwsh -nop -c echo \"one, two\"` example above, the arguments won't work as expected.\r\n\r\n\r\n\r\n",
      "created_at": "2020-10-22T15:15:57Z",
      "updated_at": "2020-10-22T15:15:57Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@mklement0  yes, agree. \r\n\r\n\r\n\r\n> De facto, with justification, users expect the order of _named_ arguments _not_ to matter, **they are used to reading the diagrams as _not_ being meaningful in terms of the order in which the parameters are listed, except for _positional_ use** \r\n\r\nYes . especially as \r\nhttps://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_Command_Syntax?view=powershell-7.1 tells them **The order of parameters in a command matters only when you omit the optional parameter names.**\r\n\r\nHowever exes are not internal PowerShell commands and if the user reads about_pwsh instead of running pwsh /? they may spot the contradiction between the two. \r\n ",
      "created_at": "2020-10-22T15:26:06Z",
      "updated_at": "2020-10-22T16:36:25Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> However exes are on internal to PowerShel\r\n\r\nI didn't get that.\r\n\r\n> if the user reads about_pwsh instead of running pwsh /? \r\n\r\nThese are kept in sync, so there should be no contradiction.\r\n(And I don't think the exception is worth mentioning in  `about_Command_Syntax`.)\r\n",
      "created_at": "2020-10-22T16:30:33Z",
      "updated_at": "2020-10-22T16:30:33Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> > However exes are on internal to PowerShel\r\n> \r\n> I didn't get that.\r\n> \r\n> > if the user reads about_pwsh instead of running pwsh /?\r\n> \r\n> These are kept in sync, so there should be no contradiction.\r\n> (And I don't think the exception is worth mentioning in `about_Command_Syntax`.)\r\n\r\nTypo sorry.   There's a distinction between functions and cmdlets (named parameters can be in any order) and external programs where it's not guaranteed.  What I meant was  \"that only applies to commands internal to PowerShell (which exes are _NOT_)\" and the word not got tangled.   \r\n\r\npwsh /? is a subset of what is in the about help. IF someone reads the section on the -command parameter in  about_pwsh  that contradicts what is said in about_command_syntax (because the latter doesn't apply to EXEs and the former is talking about an EXE). \r\n\r\nSorry, made a pig's ear of saying it the first time. ",
      "created_at": "2020-10-22T16:42:46Z",
      "updated_at": "2020-10-22T16:42:46Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I see.\r\n\r\n> pwsh /? is a subset of what is in the about help.\r\n\r\nFormatting differences and section headings aside, the content looks the same to me.\r\n\r\nAt this point I'm unclear what you're suggesting:\r\n\r\n* The suggestions [above](https://github.com/PowerShell/PowerShell/issues/13832#issuecomment-714552773) would improve the `pwsh -?` text / `about_pwsh` topics in isolation.\r\n\r\n* Are you saying something is needed in addition, in `about_command_syntax`? I suppose it wouldn't hurt to mention there that these diagrams only apply to PowerShell-native commands, and that for external programs `-?` cannot (generally) be expected to work and that `Get-Help <external-program>` never works (except with `pwsh`) and that  `Get-Command -Syntax <external-program>`  prints just the executable's full path (which isn't great, at least an abstract placeholder for the unknown syntax would help), including for `pwsh`.\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2020-10-22T17:28:32Z",
      "updated_at": "2020-10-22T17:40:28Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> I see.\r\n> \r\n> > pwsh /? is a subset of what is in the about help.\r\n> \r\n> Formatting differences and section headings aside, the content looks the same to me.\r\n> \r\n\r\n\r\nNow I'm suffering machine specific weirdness. because NOW I get the whole of the About when I run pwsh /? previously I only got the the syntax diagram as I cut and pasted in the first post. \r\n\r\n",
      "created_at": "2020-10-22T17:47:15Z",
      "updated_at": "2020-10-22T17:47:15Z"
    }
  ],
  "created_at": "2020-10-22T08:35:05Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 13832,
  "state": "closed",
  "title": "pwsh.exe -command , parameter order and help text. ",
  "updated_at": "2021-01-18T12:36:57Z"
}