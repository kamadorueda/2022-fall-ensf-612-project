{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11212",
  "author": "KirkMunro",
  "body": "# Summary of the new feature/enhancement\r\n\r\nAs a scripter,\r\nI want PowerShell to support type testing with pattern matching with the -is operator\r\nso that I can write much more elegant, compact code.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nC# spoils me with simple syntax that makes code much easier to write and maintain.\r\n\r\nOne addition that showed up in C# 7 that I'd like to implement in PowerShell is type testing with pattern matching. This is very helpful when you have to deal with .NET types, such as when you are processing AST.\r\n\r\nFor example, consider this snippet:\r\n\r\n```powershell\r\n$ast = {Get-Command Get-Process -Syntax}.Ast\r\n$commandAst = $ast.FindAll({\r\n    param($ast)\r\n    $commandAst = $ast -as [System.Management.Automation.Language.CommandAst]\r\n    if ($commandAst -ne $null) {\r\n        $stringConstantExpressionAst = $commandAst.CommandElements[0] -as [System.Management.Automation.Language.StringConstantExpressionAst]\r\n        return $stringConstantExpressionAst -ne $null -and\r\n               $stringConstantExpressionAst.StringConstantType -eq [System.Management.Automation.Language.StringConstantType]::BareWord -and\r\n               $stringConstantExpressionAst.Value -eq 'Get-Command'\r\n    }\r\n    return $false\r\n}, $true);\r\n```\r\n\r\nThat's very cumbersome to write, and it's a pretty simple example. It gets worse if you need to go even deeper with nested if blocks.\r\n\r\nInstead, if we support type testing with pattern matching like C# 7 supports, we could write the same logic like this:\r\n\r\n```powershell\r\nusing System.Management.Automation.Language\r\n\r\n$ast = {Get-Command Get-Process -Syntax}.Ast\r\n$commandAst = $ast.FindAll({\r\n    $args[0] -is [CommandAst] $commandAst -and\r\n    $commandAst.CommandElements[0] -is [StringConstantExpressionAst] $stringConstantExpressionAst -and\r\n    $stringConstantExpressionAst.StringConstantType -eq [StringConstantType]::BareWord -and\r\n    $stringConstantExpressionAst.Value -eq 'Get-Command'\r\n}, $true);\r\n```\r\n\r\nThis syntax is much easier to read than the previous syntax that uses `-as` with `-ne $null`, allowing what is meant to be a series of conditional statements to be written as a series of conditional statements.\r\n\r\nAny objections to this proposed addition to PowerShell?",
  "closed_at": null,
  "comments": [
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "For full disclosure, such a change would technically be breaking, because:\r\n\r\n```powershell\r\n$x = 'A string'\r\n$bool = 'bool'\r\n$x -is [string] $bool # returns False\r\n```\r\n\r\nToday, PowerShell parses the right-hand side of the -is operator separately. In the case of the example shown above, `$bool` is a string containing the value `'bool'`, which is then typecast to a string, returning the value `'bool'`, which is then typecast to a type by the `-is` operator, resulting in a comparison checking if `$x` is of type `[bool]`.\r\n\r\nI've never seen such code in practice though. I only discovered it by checking to see what would happen if I used code similar to what I'm proposing here. It is unlikely that such code exists in practice, as there is no value in casting something with the `-is` operator.\r\n\r\nAlso, note that the following examples don't work today, so the possibility of actually breaking something is pretty much non-existent:\r\n\r\n```powershell\r\n$x = 'A string'\r\n$string = 'Another string'\r\n$x -is [string] $string # raises an error because 'Another string' is not a type\r\n\r\n$x = $true\r\n$string = 'A string'\r\n$x -is [bool] $string # raises an error because you cannot convert boolean true or false to System.Type\r\n```\r\n\r\nLast, just to call it out, I would implement this syntax extension for `-is`, but I would not do anything for `-isnot`, because there is no use case for that.",
      "created_at": "2019-11-29T00:32:44Z",
      "updated_at": "2019-11-29T00:32:44Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@KirkMunro C#'s pattern matching supports conditionals with negative pattern matching too:\r\n```csharp\r\nif (!(value is Type convertedValue))\r\n{\r\n    // convertedValue does not exist here\r\n}\r\n\r\n// convertedValue exists here\r\n```\r\n\r\nPerhaps something similar could still be useful with `-isnot`?",
      "created_at": "2019-11-29T00:50:56Z",
      "updated_at": "2019-11-29T00:50:56Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "I worry that might be more challenging than it's worth. Still, good to know it's there. That's a pattern I haven't used in C# yet.",
      "created_at": "2019-11-29T01:56:04Z",
      "updated_at": "2019-11-29T01:56:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Maybe we can generalize and propose a syntax to store result for any sub-expression?",
      "created_at": "2019-11-29T03:21:39Z",
      "updated_at": "2019-11-29T03:21:39Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "There (sort of) is that already, but as Kirk says it's not the greatest syntax and blurs the intent:\r\n\r\n```powershell\r\nif ($convertedValue = $value -as [type]) {\r\n    # do things with $convertedValue\r\n}\r\n```\r\n\r\nAlso, RE: the possible effort of handling `-isnot` -- I don't think there should be any additional checks necessary, really. If a value is obtainable, store it in the variable and return the appropriate value. Either way, the conditional logic should handle which branch is taken anyway. I don't think any special handling should be necessary, but it's always a possibility.",
      "created_at": "2019-11-29T03:33:36Z",
      "updated_at": "2019-11-29T03:35:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "My thoughts is about `bool TryChech(out Type result)` pattern.",
      "created_at": "2019-11-29T03:55:13Z",
      "updated_at": "2019-11-29T03:55:13Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "The closest analogue for that in PS is much more akin to `Test-Value $value -Out [ref]$var` which is probably a pattern I think we should avoid.\r\n\r\nIt works well for C#, but if we're doing something like this in PS I think the expression syntax is much more effective here.",
      "created_at": "2019-11-29T04:12:12Z",
      "updated_at": "2019-11-29T04:12:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It is not new for PowerShell to store a side result. In pipeline we have PilpelineVariable parameter. Perhaps we could have something like for expressions.",
      "created_at": "2019-11-29T06:00:22Z",
      "updated_at": "2019-11-29T06:00:22Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Here are some alternate syntax proposals that may be more in line with \"the PowerShell way\", and that would also be non-breaking:\r\n\r\n```powershell\r\n# Explicitly identifying the variable with an additional operator option\r\nif ($x -is [string] -typecastVariable myString) {$myString.Length}\r\n\r\n# Or, using shorthand (which could be supported in addition to the above):\r\nif ($x -is [string] -tv myString) {$myString.Length}\r\n\r\n# Or, simply using comma (like the -split operator, which has optional additional arguments)\r\nif ($x -is [string],myString) {$myString.Length}\r\n```\r\n\r\nI'm not particularly attached to any one of these more than the others. As long as I can assign a value as part of the `-is` comparison, I'll be happy.\r\n\r\nI'm not sure where or how something like this could be applied generically to all expressions @iSazonov. Do you have suggestions? It seems to me something that should be done on a case-by-case basis, because the thing you want to capture as a side result depends on what you are doing.",
      "created_at": "2019-11-29T17:24:31Z",
      "updated_at": "2019-11-29T17:24:31Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I think I prefer the syntax from the original proposal. `-PipelineVariable` works the way it does because it's probably the least complicated way to manage it from a cmdlet's perspective. I don't think that approach adds value in the expression syntax over what you originally proposed, Kirk. \ud83e\udd14 ",
      "created_at": "2019-11-29T17:39:15Z",
      "updated_at": "2019-11-29T17:39:15Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "I think I do as well. It looks more like you're strongly typing something, which is exactly what is being done in that case. I just wanted to share additional options for consideration.",
      "created_at": "2019-11-29T17:52:06Z",
      "updated_at": "2019-11-29T17:52:06Z"
    }
  ],
  "created_at": "2019-11-28T20:38:46Z",
  "number": 11212,
  "state": "open",
  "title": "Type testing with pattern matching",
  "updated_at": "2019-11-29T17:52:06Z"
}