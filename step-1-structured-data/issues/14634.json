{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14634",
  "author": "sassdawe",
  "body": "## Summary of the new feature/enhancement\r\n\r\nAs a security professional I want to audit the use of Enter-PSHostProcess on my network to gain better visibility into the abuse of different services running PowerShell by an insider or an external attacker. And I would like to audit this without turning on script-block logging which would generate a lot more noise than a more targeted auditing.\r\n\r\n## Proposed technical implementation details (optional)\r\n\r\nA dedicated <log> (please insert platform appropriate term) generated every time when Enter-PSHostProcess is used, with metadata containing the source account + process, and the target account + process + command line (it could be a scheduled task too)\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "I like the basic idea. You might also want to audit ``Invoke-Command -Session`` as well. To cover the case where a user runs something in a session vs entering it. Perhaps different log events for an interactive session and a remote session.\r\n\r\n\r\n",
      "created_at": "2021-01-19T21:08:22Z",
      "updated_at": "2021-01-19T21:08:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I see already the request for two cmdlets. Someone might want other cmdlets. As a result, we will come to the conclusion that we need to log everything.\r\n\r\n",
      "created_at": "2021-01-20T13:53:39Z",
      "updated_at": "2021-01-20T13:53:39Z"
    },
    {
      "author": "sassdawe",
      "author_association": "NONE",
      "body": "My original goal was to monitor when someone is impersonating a different user account because that could be used for interactive elevation of privileges.\nI'm not sure that this is possible with Invoke-Command. ",
      "created_at": "2021-01-20T14:04:12Z",
      "updated_at": "2021-01-20T14:04:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@sassdawe I understand your request but I have strong doubts that it should be in PowerShell. All impersonating events will be logged in Windows (if we say about Windows) Security log and any security monitoring system will raise alert if this event is illegal. Also, this monitoring system can find related events in other logs including PowerShell. \r\n\r\n",
      "created_at": "2021-01-20T15:25:29Z",
      "updated_at": "2021-01-20T15:25:29Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "> I see already the request for two cmdlets. Someone might want other cmdlets. As a result, we will come to the conclusion that we need to log everything.\r\n\r\nIs that a bad thing?\r\n\r\nAs long as it's configurable is that really a problem?\r\n",
      "created_at": "2021-01-20T16:15:37Z",
      "updated_at": "2021-01-20T16:15:37Z"
    },
    {
      "author": "sassdawe",
      "author_association": "NONE",
      "body": "@iSazonov, you're right! Of course. I should have search this first! \r\n\r\nEventID 4624 captures when Enter-PSHostProcess is used. But it doesn't tell which process is connecting to which, just the two user accounts, and svchost.exe. \r\n\r\nSome information is captured, but not all. Would filling this gap be PowerShell's job on the engine level? It \"sounds\" easier then asking the OS to provide this information. ",
      "created_at": "2021-01-20T16:57:28Z",
      "updated_at": "2021-01-20T16:57:28Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Some information is captured, but not all\r\n\r\nI'd expect Windows logs contain all that you need. The event has an correlation information. You could discuss on Wondows security forums how find correlated events.",
      "created_at": "2021-01-20T17:36:10Z",
      "updated_at": "2021-01-20T17:36:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> > I see already the request for two cmdlets. Someone might want other cmdlets. As a result, we will come to the conclusion that we need to log everything.\r\n> \r\n> Is that a bad thing?\r\n> \r\n> As long as it's configurable is that really a problem?\r\n\r\nI believe PowerShell logs already all needed information. Users only need to enable logging and handle the logs appropriately (which may not be trivial).",
      "created_at": "2021-01-20T17:38:36Z",
      "updated_at": "2021-01-20T17:38:36Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "Yes - logging exists. But it slows down things. What i9s being asked for is, hopefully, a lot less non-performant.",
      "created_at": "2021-01-20T20:18:37Z",
      "updated_at": "2021-01-20T20:18:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> But it slows down things.\r\n\r\nIf you see real problem with a performance please open new issue with demo and measurements so that we could investigate and fix.",
      "created_at": "2021-01-21T04:22:49Z",
      "updated_at": "2021-01-21T04:22:49Z"
    },
    {
      "author": "sassdawe",
      "author_association": "NONE",
      "body": "I believe what @doctordns meant by \"but it slows things down\" is that correlating different events using some sort of (security) tool makes detection slower or require more actions to be taken for local detection.\r\n\r\nI think these are the options:\r\n\r\n1. using some sort of SIEM solution create a complex query, which might requires to enable additional logging (this additional logging could have performance impact on the systems being monitored, plus might increase the cost of the SIEM solution)\r\n2. locally, using some advanced queries, which on their own could impact performance depending on how easy is to correlate the events, and if additional logging is requires or not.\r\n3. PowerShell getting an update which would generate one or more predefined and well documented events which could be used on their own, without requiring complex queries to be run. \r\n\r\nOf course, I could be missing something, am I missing something here? Please tell me if I am!",
      "created_at": "2021-01-21T07:24:29Z",
      "updated_at": "2021-01-21T07:24:29Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "What I also meant is that turning on script block logging has been a perf drain in the past. ",
      "created_at": "2021-01-21T14:55:19Z",
      "updated_at": "2021-01-21T14:55:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "In general. Enter-PSHostProcess can be executed on system non-controlled by you. This convinces me once again that there is no need to add audit to Enter-PSHostProcess. Only target system should log connections.\r\n\r\n> Of course, I could be missing something, am I missing something here? Please tell me if I am!\r\n\r\nWindows allows you also:\r\n1. Assign a script on events in Event logs.\r\n2. Centralize collecting events on one host. Then you can process its locally or write to a database.\r\n",
      "created_at": "2021-01-21T17:29:34Z",
      "updated_at": "2021-01-21T17:29:34Z"
    }
  ],
  "created_at": "2021-01-19T20:48:47Z",
  "labels": [
    "Issue-Question",
    "WG-Engine"
  ],
  "number": 14634,
  "state": "open",
  "title": "Feature Request - Audit the use of Enter-PSHostProcess",
  "updated_at": "2021-01-21T17:29:34Z"
}