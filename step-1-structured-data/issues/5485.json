{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5485",
  "author": "TravisEz13",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://github.com/PowerShell/PowerShell/blob/master/docs/KNOWNISSUES.md).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nSet-ExecutionPolicy -Policy AllSigned -scope process\r\nimport-module pester -force  #Import a module which lives in $PSHome\r\n```\r\n\r\nBut if you copy Pester out of $PSHome it will not load\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/10873629/32920304-a0468ce6-cadd-11e7-992c-779cb569dacf.png)\r\n\r\n\r\n\r\nActual behavior\r\n---------------\r\nmodule loads without error\r\n\r\nNotes\r\n-------\r\n\r\nPS 5.1 has the same behavior\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-rc\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-rc\r\nOS                             Microsoft Windows 6.1.7601 S\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```\r\n",
  "closed_at": "2017-11-29T01:34:38Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Currently, PowerShell inherently trusts modules under $PSHome.  For Windows PowerShell, this was ok as only Trusted Installer or admin could put things under %windir%.  It would probably make sense to change this behavior.",
      "created_at": "2017-11-16T23:32:38Z",
      "updated_at": "2017-11-16T23:32:38Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "hmm... Would that force anyone who wanted to use a daily or build-from-source version to run their entire session in bypass?",
      "created_at": "2017-11-16T23:57:01Z",
      "updated_at": "2017-11-16T23:57:01Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "The default policy is unrestricted.  And only AllSigned would have this issue.  I don't think many people would have to change their workflow.  Only someone who chooses to enable this feature (only supported on Windows).",
      "created_at": "2017-11-17T00:13:31Z",
      "updated_at": "2017-11-17T00:13:44Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "But the only way to run in AllSigned mode, then, would be official releases, no? \r\nIs this maybe something we could toggle on in release branches (totally fine with a release versions having this set), and then toggle off before it is merged back to master?\r\n\r\nMakes it hard to test functionality in AllSigned default environment if it can only be done in a release. It's probably not a huge issue, but I'd rather voice this minor concern than say nothing. *shrugs",
      "created_at": "2017-11-17T00:25:39Z",
      "updated_at": "2017-11-17T00:25:39Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "I don't think we should have any such mechanism.  I think you could test this the vast majority of the time by using the modules from an official build.",
      "created_at": "2017-11-17T00:35:38Z",
      "updated_at": "2017-11-17T00:35:38Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "We've always said that Execution Policy is not a security boundary, it's only to prevent unintentional incidents (aka shooting one self in the foot).  From that perspective, it seems that perhaps relying on $PSHome being properly ACL'd might be sufficient (and using our .msi installer does do that as only Trusted Installer has write access).  ",
      "created_at": "2017-11-17T02:17:15Z",
      "updated_at": "2017-11-17T02:17:15Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "We are installing 3rd party modules unsigned to PSHome, basically bypassing the policy by default.",
      "created_at": "2017-11-17T05:18:16Z",
      "updated_at": "2017-11-17T05:18:16Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "I agree with @TravisEz13.  For PowerShell Core6 we have a single default module path instead of three and so we will likely mix signed and unsigned modules there.  AllSigned should only allow signed.\r\n",
      "created_at": "2017-11-17T19:50:35Z",
      "updated_at": "2017-11-17T19:50:35Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I talked to @TravisEz13 , I think it's fine to remove the special casing of $PSHome",
      "created_at": "2017-11-20T21:23:20Z",
      "updated_at": "2017-11-20T21:23:20Z"
    }
  ],
  "created_at": "2017-11-16T22:53:10Z",
  "number": 5485,
  "state": "closed",
  "title": "unsigned modules should not load with `AllSigned` policy",
  "updated_at": "2017-11-29T03:20:28Z"
}