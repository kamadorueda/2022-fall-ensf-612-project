{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11338",
  "author": "mklement0",
  "body": "See also: \r\n* #11339\r\n* #13550\r\n\r\n# Summary of the new feature/enhancement\r\n\r\n`Get-Help` supporting online lookup of documentation for built-in .NET types (those that ship with the framework / PowerShell) would be ... uh ... helpful, given:\r\n\r\n* the close integration between PowerShell and .NET types in general\r\n* that there's no easy way to look up the types that PowerShell cmdlets outputs ([`MatchInfo`](https://docs.microsoft.com/en-US/dotnet/api/Microsoft.PowerShell.Commands.MatchInfo) comes to mind as a complex type whose documentation needs to be consulted to take full advantage of it - see also: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/5221).\r\n\r\nBoth looking up by type name alone as well as a combination of type name and member name (to get help for a specific method, for instance) would be beneficial.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nNote that since .NET documentation is only available online, conceptually `-Online` is implied when targeting .NET types.\r\n\r\nHere's how it _could_ work:\r\n\r\n```powershell\r\n# WISHFUL THINKING\r\n\r\n# Opens the documentation for the System.String.Split() method.\r\n# Note:\r\n#  You can specify a type name ('string' in this example) as follows:\r\n#    * Use a full type name, with the initial 'System.' component optionally omitted (e.g. 'Text.Encoding' for 'System.Text.Encoding'\r\n#    * Use a PowerShell type accelerator such as 'xml' for 'System.Xml.XmlDocument'\r\n# Tab-completion can assist: You can type (part of) a the name of a type\r\n# (last component of the full name) and cycle through loaded types by that name.\r\n# E.g., typing `arrayli` tab-completes to 'System.Collections.ArrayList', which is the \r\n# Alternatively, *pipe* an instance of a string to the function (see next example).\r\nGet-Help -Type string -Member split\r\n\r\n# Opens the documentation for the [Microsoft.PowerShell.Commands.MatchInfo]\r\n# type, instances of which Select-String outputs.\r\n'foo' | Select-String o | Get-Help \r\n```\r\n\r\nNote:\r\n\r\n* Technically, `Get-Help` currently binds the `-Name` parameter by property value from the pipeline, but that appears to be broken anyway (and I've never seen it in the wild). Therefore binding pipeline objects to a new `-InputObject` parameter whose (distinct set of ) types are to be looked up should work.\r\n\r\n  * Being able to do something like `'foo'.Split | Get-Help` would be great, but, unfortunately, the resulting `PSMethodInfo` instances contain no information about the enclosing _type_.\r\n\r\n* The lookup URL should include a `?view=netcore-<major>.<minor>` / `?view=netframework-<major>.<minor>` query string reflecting the .NET platform underlying the executing PowerShell engine.\r\n\r\n* For an implementation of this functionality as PowerShell function `Show-TypeHelp` (focused on .NET type lookup only), see [this Stack Overflow answer](https://stackoverflow.com/a/59324892/45375).\r\n\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "> Being able to do something like `'foo'.Split | Get-Help` would be great, but, unfortunately, the resulting `PSMethodInfo` instances contain no information about the enclosing type.\r\n\r\nPossibly we could extend `PSMethodInfo` to include a reference to the type it was found in?",
      "created_at": "2019-12-13T17:04:34Z",
      "updated_at": "2019-12-13T17:04:34Z"
    }
  ],
  "created_at": "2019-12-13T15:55:00Z",
  "number": 11338,
  "state": "open",
  "title": "Extend Get-Help to support online documentation lookup for built-in .NET types",
  "updated_at": "2021-09-24T20:07:13Z"
}