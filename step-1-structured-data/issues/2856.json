{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2856",
  "author": "PaulHigin",
  "body": "```powershell\r\nPS > /home/<user>/ dir\r\n\r\ndir : Access to path '/home/<user>/.gvfs' is denied\r\n\r\nPS >\r\n```\r\n\r\nResult:\r\n------\r\nEnumeration of paths and files terminates on access denied error\r\n\r\nExpected\r\n------\r\nGet-ChildItem should skip inaccessible paths (with error) and continue enumerating files and paths that are accessible.",
  "closed_at": "2017-05-26T00:24:47Z",
  "comments": [
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Question: Which version of OS(Ubuntu/RedHat,Fedora...), and version PowerShell?\r\nUbuntu 16.04.1 on PowerShell v6.0.0.0-Alpha-13 works fine. \r\n![ubuntudirfine](https://cloud.githubusercontent.com/assets/19892435/20992361/b35e5718-bcb1-11e6-81ac-c49158077a06.png)\r\n",
      "created_at": "2016-12-08T00:17:34Z",
      "updated_at": "2016-12-08T00:17:34Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This repro'd for me on Ubuntu16.04 with alpha.16.  It may depend on if you have a .gvfs directory in your home directory.  `dir -force` works, but that's not user friendly particularly when `ls` works happily without issue.",
      "created_at": "2017-03-04T23:25:24Z",
      "updated_at": "2017-03-04T23:25:24Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Agreed.  We need to make \"cannot access\" errors non-terminating.",
      "created_at": "2017-03-06T16:42:19Z",
      "updated_at": "2017-03-06T16:42:19Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "No longer repro'ing for me on Ubuntu16 with alpha.17",
      "created_at": "2017-03-20T17:19:00Z",
      "updated_at": "2017-03-20T17:19:00Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I'm hearing this also repros if the file gets renamed or deleted while get-childitem is running.  Generally, get-childitem shouldn't be throwing terminating errors.",
      "created_at": "2017-05-08T19:48:42Z",
      "updated_at": "2017-05-08T19:48:42Z"
    },
    {
      "author": "jeffbi",
      "author_association": "CONTRIBUTOR",
      "body": "I have not be able to repro this as originally described, using this environment\r\n```PowerShell\r\nPS> $PsVersionTable\r\nName                           Value                                                     \r\n----                           -----                                                     \r\nPSVersion                      6.0.0-alpha                                               \r\nPSEdition                      Core                                                      \r\nBuildVersion                   3.0.0.0                                                   \r\nCLRVersion                                                                               \r\nGitCommitId                    v6.0.0-alpha.18-58-g8d744f2517c047a9d02b79c65a574741110...\r\nOS                             Linux 4.8.0-51-generic #54~16.04.1-Ubuntu SMP Wed Apr 2...\r\nPlatform                       Unix                                                      \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                   \r\nPSRemotingProtocolVersion      2.3                                                       \r\nSerializationVersion           1.1.0.1                                                   \r\nWSManStackVersion              3.0                                                       \r\n```\r\n\r\nI believe that I have been able to reproduce the scenario in which a file is deleted or renamed during the course of the `Get-ChildItem` process. The cmdlet is not actually throwing a terminating error, it just looks like it is. What actually happens is that when an error is encountered, the error is written and the cmdlet stops processing the specific directory it is currently processing.\r\n\r\nConsider the following directory tree:\r\n```\r\n tmp\r\n |-- alpha\r\n |   |-- file1\r\n |   |-- file2\r\n |   `-- file3\r\n |-- beta\r\n |   |-- file4\r\n |   `-- file5\r\n `-- gamma\r\n     `-- file6\r\n```\r\nwhere our current directory is `tmp.` When a \"flat\" `Get-ChildItem` is run and during processing the directory `beta` is renamed or deleted, the error is written and the cmdlet stops processing the `tmp` directory and it looks like a terminating error.\r\n\r\nIf instead we ran a deeper `Get-ChildItem -Recurse`, and while processing the `alpha` directory one of the files within that directory were renamed or deleted, an error would be written and the cmdlet would stop processing the `alpha` directory then return up to continue processing the `tmp` directory which would continue processing the `beta` and `gamma` directories.\r\n\r\nI've made a couple of changes that allow processing of a directory to continue if a condition like this occurs. I'm working now on what happens when while processing a directory, that directory itself is deleted.",
      "created_at": "2017-05-09T22:12:52Z",
      "updated_at": "2017-05-09T22:12:52Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Thanks @jeffbi .  I am not able to repro this any more.  Now when I enumerate a directory on Ubuntu with inaccessible sub directories I get expected behavior ... a full enumeration with error on directories that couldn't be accessed.\r\n\r\nI don't know if this was fixed at some point.  But I wonder if this was just a case where an unexpected exception is thrown and not handled.  Do we catch specific exceptions during enumeration?  If so then that might account for the directory enumeration terminating abruptly under certain error conditions.\r\n\r\nRegarding enumerating directories that have changed.  It seems to me that this behavior is correct, to abandon that directory since it is in an inconsistent state.",
      "created_at": "2017-05-09T22:59:40Z",
      "updated_at": "2017-05-09T22:59:40Z"
    },
    {
      "author": "jeffbi",
      "author_association": "CONTRIBUTOR",
      "body": "@PaulHigin The function that walks directories does handle specific exceptions: `ArgumentException`, `IOException` and `UnauthorizedAccessException`. I'm going to be adding additional try/catch handlers for more specific IO exception types a little deeper in scope within the function.\r\n\r\nI'm thinking what we would want is if a single file or sub-directory within a directory triggers an error we should not abandon that directory, just write an error and move on to the next entry. If, however, the \"current\" directory *itself* goes away mid-process then we abandon that directory and go back up to the parent if present. Does that make sense?\r\n",
      "created_at": "2017-05-09T23:35:32Z",
      "updated_at": "2017-05-09T23:35:32Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@jeffbi Yes, I agree.  This sounds like the right behavior.",
      "created_at": "2017-05-10T15:49:26Z",
      "updated_at": "2017-05-10T15:49:26Z"
    }
  ],
  "created_at": "2016-12-07T23:48:48Z",
  "labels": [
    "OS-Linux",
    "Resolution-Fixed",
    "WG-Engine-Providers"
  ],
  "number": 2856,
  "state": "closed",
  "title": "Get-ChildItem on Linux terminates abruptly when accessing directory fails with access denied or file not found",
  "updated_at": "2017-05-26T06:04:00Z"
}