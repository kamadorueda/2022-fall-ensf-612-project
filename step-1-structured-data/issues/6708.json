{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6708",
  "author": "daxian-dbw",
  "body": "## PR Summary\r\n\r\nClean up code related to the uses of `CommandTypes.Workflow` and `WorkflowInfo` in `System.Management.Automation`. This change mainly affects help provider code.\r\n\r\nThis PR includes a few minor breaking changes:\r\n- Change the `public` constructors of `WorkflowInfo` to `internal`. We don't support workflow in PSCore, so I think it makes sense to not allow people to create `Workflow` instances.\r\n- Remove the type `System.Management.Automation.DebugSource` since it's only used for workflow debugging.\r\n- Remove the overload of `SetParent` from the abstract class `Debugger` that is only used for workflow debugging.\r\n- Remove the same overload of `SetParent` from the derived class `RemotingJobDebugger`.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed - Issue link:\r\n- **Testing - New and feature**\r\n    - [ ] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [x] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2018-04-28T06:02:16Z",
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Assuming `ModuleInfo.ExportedWorkflows` will remain forever - it would be good to decide what to do about it - throwing an error seems unwise, but what about warning that it is ignore? And should it return the entries in the `psd1` (reflecting the psd1 contents) or should it always return an empty array, reflecting what is actually imported? The property name would imply the former, but in reality, it typically is what is imported.",
      "created_at": "2018-04-23T23:21:31Z",
      "updated_at": "2018-04-23T23:21:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Seems if we return an empty array it will be a breaking change - in the case a throw is better then a warning.\r\nIf we want remove this in future we could mark this with [obsolete] and write a warning in scripts.",
      "created_at": "2018-04-26T06:27:00Z",
      "updated_at": "2018-04-26T06:27:00Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Currently, `ModuleInfo.ExportedWorkflows` returns an empty `Dictionary<string, FunctionInfo>` (_not changed in this PR_). I think the current behavior makes sense. We don't support `XAML` module and don't support the `workflow` keyword in the script, so there is no way to import a module that declares any workflow in it.\r\n\r\nAs to `Get-Module -list`, for a script module that has `workflow foo {}` defined in it, the module analysis does find `foo` as an exported module member, but consider `foo` to be a function (_this seems wrong to me, module analysis probably shouldn't return any exported commands in case a `workflow` definition is found in AST, because that module won't be able to be loaded_). The `ExportedWorkflows` property of the returned `PSModuleInfo` object is still an empty dictionary.",
      "created_at": "2018-04-26T14:33:43Z",
      "updated_at": "2018-04-26T14:33:43Z"
    }
  ],
  "created_at": "2018-04-23T23:02:58Z",
  "number": 6708,
  "state": "closed",
  "title": "Cleanup uses of `CommandTypes.Workflow` and `WorkflowInfo`",
  "updated_at": "2018-04-28T06:02:20Z"
}