{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7668",
  "author": "jherby2k",
  "body": "using the SDK, I can:\r\n\r\nWriteError(new ErrorRecord(\u2026));\r\nWriteInformation(new InformationRecord(\u2026));\r\nWriteProgress(new ProgressRecord(\u2026));\r\n\r\nbut I can't do that with a DebugRecord or WarningRecord (WriteDebug and WriteWarning only accept a string). Any good reason for this?\r\n",
  "closed_at": "2018-09-05T20:30:40Z",
  "comments": [
    {
      "author": "jherby2k",
      "author_association": "NONE",
      "body": "Furthermore (and recognizing that backwards compatibility has to be preserved) why aren't these all just Write() overloads?",
      "created_at": "2018-08-30T20:11:52Z",
      "updated_at": "2018-08-30T20:11:52Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@BrucePay, @JamesWTruher, or @HemantMahawar may have some historical context.  ",
      "created_at": "2018-09-01T00:04:59Z",
      "updated_at": "2018-09-01T00:04:59Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@jherby2k First\r\n\r\n> why aren't these all just Write() overloads?\r\n\r\n`WriteObject()` takes all objects and writes them to the output stream, regardless of type. Think about how `2>&1` works - error records are routed into the output stream and written to output along with everything else. (As an aside - note that the API is `WriteObject()` but the corresponding cmdlet is `Write-Output`. Originally they were both 'Object'. We changed the cmdlet but didn't get around to changing the API.)\r\n\r\nAs to why the others take strings rather than complex objects, at the time (version 1)  we were focused on ease-of-use of the APIs over pretty much everything else.  (Remember we got into the PowerShell business because teams kept telling us it was to hard to write command line tools for Windows. Making things as easy as possible was a key driver.)  In retrospect, this was a mistake. We should have had specific types for each stream and still kept the ease of use with overloads. In fact we retrofitted a `VerboseRecord` type into PowerShell in V2(?). Originally it was just a string too. And in the `[PowerShell]` API, everything is strongly typed. So why not just change all of the remaining APIs? IIRC it had to do with not breaking public APIs (specifically ICommandRuntime). Now we essentially did that with `ICommandRuntime2` to accommodate the Information stream so maybe it's not something we should be so worried about now.",
      "created_at": "2018-09-02T23:15:06Z",
      "updated_at": "2018-09-02T23:15:06Z"
    }
  ],
  "created_at": "2018-08-30T20:08:42Z",
  "number": 7668,
  "state": "closed",
  "title": "SDK question / comment regarding Write methods",
  "updated_at": "2018-09-05T20:30:40Z"
}