{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13405",
  "author": "adityapatwardhan",
  "body": "## Summary of the new feature/enhancement\r\n\r\nWe recently released a cross platform pager as a NuGet package `Microsoft.PowerShell.Pager`. The intention is to use the Pager for `Get-Help` and dynamic help. \r\n\r\nThe has been interest expressed in utilizing the Pager in a more general purpose way.\r\n\r\nThis issue is to discuss if the Pager should be distributed in some other form. Options on top of my mind in no priority order.\r\n\r\n### Built-in function or Cmdlet to use as a Pager\r\n\r\nSomething like, no intention of designing the cmdlet surface here.\r\n\r\n```powershell\r\nGet-Process | Out-Pager \r\n```\r\n\r\n### .NET global tool or Executable\r\n\r\nThe behavior will be similar to a native pager like `less` or `more.com`.\r\n\r\n```powershell\r\nGet-Process | pspager \r\n```\r\n\r\n## Proposed technical implementation details (optional)\r\n\r\n<!-- \r\nA clear and concise description of what you want to happen.\r\nConsider providing an example PowerShell experience with expected result.\r\n-->\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Personally, I think an `Out-Pager` cmdlet would be the most useful. If we can mimic some of the typical options from `more` or `less`  as parmeters that'd be ideal, of course. IIRC there are some open issues around Out-Host -Paging that we should probably seek to fix for a new native pager implementation like this / ensure they aren't an issue in the new implementation.",
      "created_at": "2020-08-12T03:01:06Z",
      "updated_at": "2020-08-12T03:01:06Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "A big part of the draw imo is halting the pipeline.  Even with how janky `Out-Host -Paging` is I still use it when I'm looking through results that are expensive to pull all at once.  Being able to pause downstream `ProcessRecord` invocations when the screen fills up is great.",
      "created_at": "2020-08-12T12:22:25Z",
      "updated_at": "2020-08-12T12:22:25Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "More feedback from @jaykul @vexx32  @jhoneill in issue #13468 ",
      "created_at": "2020-08-18T17:40:18Z",
      "updated_at": "2020-08-18T17:40:18Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "I wanna throw out that regardless of what route we take here, I want to see the new pager replace the pager used in `Out-Host -Paging` (which we can't take out). We should only have one pager in the product :)",
      "created_at": "2020-08-18T19:14:28Z",
      "updated_at": "2020-08-18T19:15:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> We should only have one pager in the product :)\r\n\r\nI guess there are users who will prefer Unix `less`. I hope we preserve the environment variable to pick up a preferred pager.",
      "created_at": "2020-08-19T03:47:40Z",
      "updated_at": "2020-08-19T03:47:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "1. Traditional user experience in all shells for many years is to explicitly use a pager.\r\n    - So I agreed we shouldn't have `-Pager` switch in cmdlets. \r\n    - It is true for Out-Host -Pager\r\n    - We have a pager in Help function and we could move the new pager there.\r\n2. For better discoverability I'd suggest to consider Out-HostPager name\r\n3. PowerShell could do smart things for paginating but we should investigate such scenarios with caution.\r\n    - Add a flag in Formatting system could annoying users if it is default but this could be opt-in.\r\n    - Traditionally we moderate this by a preference variable/switch/attribute which is possibly superfluous for these scenarios\r\n\r\nSo my preference - only implement Out-Pager/Out-HostPager in 7.1 and then wait more feedback.\r\n",
      "created_at": "2020-08-19T04:26:40Z",
      "updated_at": "2020-08-19T04:26:40Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> I wanna throw out that regardless of what route we take here, I want to see the new pager replace the pager used in `Out-Host -Paging` (which we can't take out). We should only have one pager in the product :)\r\n\r\nIn all my years using PowerShell I don't think I've used `Out-host -paging` - I learned `| more ` - in about 1983 - and that's too much muscle memory to overturn (same applies to `| clip` or `ping` ) \r\nWindows PowerShell has `more` as a function wrapping for `more.com` and 7 just lets things flow through to the OS's `more` and a linux user might well use `less`\r\n\r\nHaving just tested  it ,  I can't imagine anyone who just wanted paging would  `| Out-host -paging`  unless they had never heard of `more` , writing an error to say you pressed Q...  I can, sort of, see that there may some case where you want to know the user didn't look at everything but the muscle memory which says press ctrl+c  defeats it. \r\n\r\n> A big part of the draw imo is halting the pipeline. Even with how janky `Out-Host -Paging` is I still use it when I'm looking through results that are expensive to pull all at once. Being able to pause downstream `ProcessRecord` invocations when the screen fills up is great.\r\n\r\nEven that is six of one and half a dozen of the other\r\n```\r\ntry \r\n1..1000 | %{ $_ ; sleep .2} | more\r\n```\r\nAt one screenful you pause for a look, and then hit space for the next screenful and it's buffered and waiting. Downside ? Exiting with Q means waiting for the remaining rows; it needs ctrl + C\r\n`1..1000 | %{ $_ ; sleep .2} | out-host -Paging`\r\nPuts the brakes on;  My hunch is most of the time, most people will want the machine to do the next part in the background while they're reviewing what has been done so far.  But some of the people, some of the time will want \"Don't do 51-100 until I have reviewed 1-50\". I'm trying to think of a case where I'd stop after a screenful not review each item - at least for the first few items. ",
      "created_at": "2020-08-19T15:50:04Z",
      "updated_at": "2020-08-19T15:50:04Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Having just tested it , I can't imagine anyone who just wanted paging would `| Out-host -paging` unless they had never heard of `more` , writing an error to say you pressed Q... I can, sort of, see that there may some case where you want to know the user didn't look at everything but the muscle memory which says press ctrl+c defeats it.\r\n\r\nYeah it's pretty terrible, but that's why we're talking about improving it.\r\n\r\n> At one screenful you pause for a look, and then hit space for the next screenful and it's buffered and waiting. Downside ? Exiting with Q means waiting for the remaining rows; it needs ctrl + C\r\n\r\nNah it can throw `PipelineStoppedException`.\r\n\r\n> My hunch is most of the time, most people will want the machine to do the next part in the background while they're reviewing what has been done so far.\r\n\r\nOften retrieving a single page is quite quick while retrieving the entire result set is still expensive.  Personally I have the opposite experience, the amount of times I'd have preferred the behavior you described is very rare.\r\n\r\n> I'm trying to think of a case where I'd stop after a screenful not review each item - at least for the first few items.\r\n\r\nOften when exploring something interactively that returns a lot of results, you can tell whether you need to change your search criteria based on the first page.  Also if you're fishing for a specific item with broad search criteria, you would want to stop processing the search once you spot what you're looking for.\r\n\r\n",
      "created_at": "2020-08-19T16:15:00Z",
      "updated_at": "2020-08-19T16:16:06Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee discussed this today and advises:\r\n\r\n- This feature needs to be wrapped as an experimental feature as we have open questions about the design.  This is needed for 7.1.  Everything else below is 7.2+\r\n- We agree that `Out-Pager` cmdlet makes sense as `Out-Host -Paging` is not discoverable\r\n- We agree that in cases where you have data, then paging should occur in the main screen buffer while deliberate use of `Out-Pager` (or dynamic help in PSReadLine) should use the alternate screen buffer\r\n- It may make sense to have paging as a common feature, but did not agree on whether it's a common parameter or some other configuration/preference set by the user",
      "created_at": "2020-08-19T23:01:54Z",
      "updated_at": "2020-08-19T23:01:54Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT did the committee also say that `Out-Host -Paging` should use the new pager?",
      "created_at": "2020-08-19T23:19:09Z",
      "updated_at": "2020-08-19T23:19:09Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@SteveL-MSFT \r\n\r\n> * We agree that `Out-Pager` cmdlet makes sense as `Out-Host -Paging` is not discoverable\r\n\r\nIt is worth asking the question, **why would a user prefer** `|Out-Pager`  **over** `|more`. ?\r\nTo give a parallel `Test-NetConnection`  has not replaced `ping` for most use cases because (1) We already know `ping`, as a universal command so the new command needs to _overturn a habit_. (2) most of the time we don't need to process objects returned - we don't achieve _benefit_  from changing, and (3) At 18 characters instead of 4 it doesn't offer _convenience_.  \r\nAnother parallel is `| clip`, which I use most days. Windows PowerShell (in  V4  or V5) introduced a functionally identical `Set-Clipboard`  which is more typing for something doesn't work  everywhere-  `| clip.exe`  works in bash on Windows, cmd, and legacy PowerShell (which I still have to work with)  \r\n\r\n**I'm not saying** no one will ever prefer it, but before embarking on doing something because it's possible, there needs to be clarity on where it offers a gain (and where it doesn't try to), to justify using effort which could deliver something else. It can't be universal, something already does the job, so in what way is this doing the job better?    \r\n\r\n> * It may make sense to have paging as a common feature, but did not agree on whether it's a common parameter or some other configuration/preference set by the user\r\n\r\nThink very, _very_, **very** hard about introducing `Do-not-return-objects-but-print-text` options. Some commands _do_ exist to put stuff onthe console for a human to read (`format-table`,  `Get-Help`) and their _objects_ are seldom exploited.      \r\nBut the thinking which says \"`-Paged` would be a good common parameter\" would also say \"`-AsTable` , `-AsList`  and  `-AsStrings` would be good parameters\" and is countered by the same logic which says no,  use `format-Table` , `format-list` , or ` out-string` \r\n\r\nAnd again ask the question if / how / when `-paged`  gives a better solution than `|more`.  \r\n",
      "created_at": "2020-08-20T09:54:30Z",
      "updated_at": "2020-08-20T09:55:42Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "@jhoneill the new pager and `Out-Host -Paging` pager work in a PSReadLine keyhandler. more/less do not. The intention is to use this pager for dynamic help feature in PSRL.",
      "created_at": "2020-08-20T14:35:33Z",
      "updated_at": "2020-08-20T14:37:12Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@TylerLeonhardt    \r\nPSRL might be sufficient justification for doing a native pager - meaning PS users, generally speaking, not using it doesn't matter much. Improving the pager in `out-host` makes sense, Wrapping that in a PAGE  function (any name <= 4 chars), makes more sense to me than adding a cmdlet to do the same job.  \r\n\r\nMy call to  avoid `-DoNotReturnObjectsButPrintText` common parameters  stands though.\r\n    \r\n ",
      "created_at": "2020-08-20T15:10:30Z",
      "updated_at": "2020-08-20T15:10:30Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> @jhoneill the new pager and `Out-Host -Paging` pager work in a PSReadLine keyhandler. more/less do not.\r\n\r\nThey work, you just need to pipe to `Out-Default`:\r\n\r\n```powershell\r\nSet-PSReadLineKeyHandler -Chord 'ctrl+p' -ScriptBlock {\r\n    & { gps | more } | Out-Default\r\n}\r\n```\r\n\r\nDoesn't work over remoting though.\r\n",
      "created_at": "2020-08-20T15:17:51Z",
      "updated_at": "2020-08-20T15:17:51Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@jhoneill personally I'd just prefer to have a native paging cmdlet so I don't have to bother checking what pager(s) might be available on a given system.\r\n\r\nA short alias to it is simple enough if it's a separate cmdlet. `Out-Host -Paging` already being part of an existing cmdlet tends to mean that adding further options to it will become cumbersome (and discovering them from a function would then either be impossible or require additional unnecessary dev work to manually copy parameters to the function.)\r\n\r\n`Out-Host -Paging` should IMO be a compatibility effort, maintained for existing use and the basic paging functionality, but pagers tend to expose [additional options](https://man7.org/linux/man-pages/man1/less.1.html) that would be better suited to their own cmdlet than making bloated parameter sets to expand on `Out-Host -Paging` in my opinion.",
      "created_at": "2020-08-20T16:23:48Z",
      "updated_at": "2020-08-20T16:23:48Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> @jhoneill personally I'd just prefer to have a native paging cmdlet so I don't have to bother checking what pager(s) might be available on a given system.\r\n\r\nI think we might talking at cross-purposes. `|more` works in pwsh, windows PowerShell, even legacy versions, cmd, bash, whatever.  Introducing `out-Pager` means I first have to stop and think \"What pager is available in this shell\" and type the longer `| Out-Pager`. So why wouldn't I do `|more` ? \r\n\r\n> A short alias to it is simple enough if it's a separate cmdlet. \r\nAt least that removes the need for more typing to get the same effect. I agree on `Out-Host -Paging` \r\n",
      "created_at": "2020-08-20T18:32:50Z",
      "updated_at": "2020-08-20T18:32:50Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "`more` only works if that pager is available in the system, from what I can see. It's not provided by PowerShell. Is it usually available? Sure. Always? \ud83e\udd37 \r\n\r\nAnd if you're working in different shells, remembering a slightly different pager command is the _least_ of one's concerns, surely. \ud83d\ude02 \r\n\r\nAnd even if you forget, as you pointed out, `| more` would still work in the majority of cases, so you're not losing out there either.",
      "created_at": "2020-08-20T19:45:43Z",
      "updated_at": "2020-08-20T19:46:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I would say that it is beneficial for PowerShell to treat everything as cmdlets - either as true cmdlet or as a wrapper cmdlet.\r\n",
      "created_at": "2020-08-21T04:07:37Z",
      "updated_at": "2020-08-21T04:07:37Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Mostly I don't disagree with what's been said above: there are already a few good pagers out there, and they _mostly_ work fine in PowerShell ... except for this one thing ...\r\n\r\nAn actual PowerShell pager needs to be able to deal with output in alternative streams. Otherwise, why bother?\r\n\r\nThere are few things more frustrating and confusing than piping output mixed with some verbose/debug/warnings/errors to `| more` and having each page just those few lines more than a page, thanks to the uncounted alternate stream lines.\r\n\r\n(I know I can write it as ` *>&1 | more` but then Warning, Verbose, Debug streams are indistinguishable from the output, it's just a different mess)",
      "created_at": "2020-08-21T04:12:02Z",
      "updated_at": "2020-08-21T04:12:24Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Hmm. A pager implementation could be made to format non-output streams according to their typical standard formatting, though, since non-output streams have their own discrete types. That would make it possible to do something like `*>&1 | Out-Pager` and have the pager still render them recognisably. Whether that should be a default or exposed in a different way... don't know.",
      "created_at": "2020-08-21T11:57:21Z",
      "updated_at": "2020-08-21T11:57:21Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> `more` only works if that pager is available in the system, from what I can see. It's not provided by PowerShell. Is it usually available? Sure. Always? \ud83e\udd37\r\n\r\nEvery Microsoft operating system (certainly from DOS 3.1, including OS/2, NT3.1 and upwards, and Windows 9x)  and every Unix based operating system from when I first used it in 1985, has supported |more and I've never seen it removed from a system.  Any computer I've met which uses | supports more. \r\n \r\n \r\n> And if you're working in different shells, remembering a slightly different pager command is the _least_ of one's concerns, surely. \ud83d\ude02\r\n\r\nIt's not the least but one of many small concerns.  Don't worry about is `test-netconnection`, / `Get-LocalGroupMember` / `Set-clipboard` valid here when Ping, net localgroup or clip do the job. Just like they did 20 years ago.  There are cases where you want the Ping objects, or GroupMember objects, but for clipboard or more, where's the benefit. \r\n\r\n> And even if you forget, as you pointed out, `| more` would still work in the majority of cases, so you're not losing out there either.\r\nMy point is not _forgetting_. It's non-adoption.\r\n\r\n",
      "created_at": "2020-08-21T15:23:11Z",
      "updated_at": "2020-08-21T15:23:11Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "One other point (regarding the `-Pager` switch in Get-Help): we have **\"always\"** had a `help` function which is just a proxy for `Get-Help @PSBoundParameters | more`.  In my opinion, that's the right way to deliver paging to help -- except that it should respect an environment variable for which pager to use!\r\n\r\n We shouldn't be putting custom unique paging functionality into commands, because I want to use the pager which is the best, every time I use a pager (and that might not be your pager, but if you make it handle additional streams, it probably will be).",
      "created_at": "2020-08-21T17:25:18Z",
      "updated_at": "2020-08-21T17:25:18Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Hmm. A pager implementation could be made to format non-output streams according to their typical standard formatting, though, since non-output streams have their own discrete types.\r\n\r\nThis could be handled similar to how `Out-Null` is currently implemented.  During `PipelineProcessor` init it can check if the downstream command is `Out-Pager`.  If it is then do `MergeMyResults(PipelineResultTypes.All, PipelineResultTypes.Output)`\r\n\r\nDownside is that it *might* change the order of some things due to the table formatters delay, though the displayed order would be more \"correct\".\r\n\r\n> It's not the least but one of many small concerns. Don't worry about is `test-netconnection`, / `Get-LocalGroupMember` / `Set-clipboard` valid here when Ping, net localgroup or clip do the job. Just like they did 20 years ago. There are cases where you want the Ping objects, or GroupMember objects, but for clipboard or more, where's the benefit.\r\n\r\nFor `clip` I recently forced myself to start using `scb` because of extra new line characters and encoding issues.  `ping` is sort of a loaded scenario because it `Test-Connection` was pretty wonk for some time (ty @vexx32 for fixing it).",
      "created_at": "2020-08-21T18:12:03Z",
      "updated_at": "2020-08-21T18:12:03Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Also all the talk about how native `more`/`less` variants are better but none of those work over remoting still right?  It's still just `Out-Host -Paging` that works?",
      "created_at": "2020-08-21T18:13:21Z",
      "updated_at": "2020-08-21T18:13:21Z"
    },
    {
      "author": "Swoogan",
      "author_association": "NONE",
      "body": "@jhoneill \r\n> It is worth asking the question, why would a user prefer |Out-Pager over |more. ?\r\n\r\nToday I discovered a case where `|more` doesn't work as I would expect:\r\n\r\n```\r\nC:\\> \"\u2026\" | more\r\n\u0393\u00c7\u00aa\r\n```\r\n\r\nWhich, in turn, affects long lines that have been truncated with the ellipsis (the line gets wrapped with `\u00c7\u00aa` appearing on the next line. \r\n",
      "created_at": "2022-08-13T18:12:57Z",
      "updated_at": "2022-08-13T18:12:57Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@Swoogan  yes, if you pipe a 2byte character - like ellipsis - to a command-like app it becomes two 1byte characters. \r\n\r\n`  \"\u2026\" | clip`\r\n \r\nDoes the same thing. \r\nBut `\"\u2026\" | Set-Clipboard`  works.  But I use `| clip`  99% of time ,even though `Get-Clipboard` should lead me to using `Set-Clipboard`.   \r\n\r\nReally the smart thing to do with `set-clipboard` or  `out-pager` is to alias them to `clip` / `more`\r\n\r\n",
      "created_at": "2022-08-13T21:24:39Z",
      "updated_at": "2022-08-13T21:24:39Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Aliasing over existing executables tend to break people.  ",
      "created_at": "2022-08-15T19:00:15Z",
      "updated_at": "2022-08-15T19:00:15Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "For clarity  - I should move from using clip.exe to using `set-clipboard` because of things like 2-byte characters but decades of muscle memory means I'll probably always use  `| clip`  so giving myself an alias would be a smart thing . PowerShell out-of-the-box seizing an existing name is a much less smart thing :-) \r\n ",
      "created_at": "2022-08-15T19:40:01Z",
      "updated_at": "2022-08-15T19:40:01Z"
    }
  ],
  "created_at": "2020-08-11T22:37:43Z",
  "number": 13405,
  "state": "open",
  "title": "Cross platform pager using `Microsoft.PowerShell.Pager`",
  "updated_at": "2022-08-15T19:40:02Z"
}