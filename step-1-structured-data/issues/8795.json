{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8795",
  "author": "mklement0",
  "body": "# Summary of the new feature/enhancement\r\n\r\nI would be helpful if an error occurred ~~at parse time~~ if a script / function parameter _default value_ were encountered that _contradicts the parameter's validation attributes_.\r\n(_Omitting_ a default value should always pass the check, however).\r\n\r\nThis would prevent self-contradictory definitions such as the following, which could easily happen in the course of refactoring, for instance:\r\n\r\n```powershell\r\nfunction foo {\r\n    [ValidateSet('one', 'two')]\r\n    $bar = 'uno'   # Invalid, because it contradicts the validation set.\r\n}\r\n```\r\n\r\nCurrently, the above is quietly accepted, which means that you cannot rely on the parameter variable to have a valid (non-null) value.\r\n\r\nCaveats: \r\n\r\n* Technically, that would be a breaking change, as it is conceivable that there are functions out there that exploit this permissiveness deliberately in order to use an invalid values as an explicit signal that no argument was passed, along the lines of: `. { param([ValidateSet(\"one\", \"two\")] $foo=\"<none>\") $foo }`.\r\nThat said, there was never a good reason for this technique (use `$PSBoundParameters.ContainsKey()` to see if a value was passed), so it is hopefully a [Bucket 3: Unlikely Grey Area](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md#bucket-3-unlikely-grey-area) change.\r\n\r\n* Also, as @iSazonov points out below, this change may be problematic from a performance perspective.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nBug #8778 suggests that code to enforce this check already exists, but (a) it currently only surfaces via `Invoke-Expression` and (b) is currently overzealous in that it also considers the _absence_ of a default value invalid.",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Presumably the same code paths are invoked when one uses a validation attribute on a regular variable, as well.\r\n\r\n```powershell\r\n[ValidateSet(\"apple\",\"banana\")] $Fruit = \"apple\" # works\r\n$Fruit = \"banana\" # works\r\n$Fruit = 0 # fails\r\n\r\n[ValidateSet(\"lettuce\",\"celery\")] $Greens = \"parsnip\" # fails\r\n```",
      "created_at": "2019-01-30T17:37:19Z",
      "updated_at": "2019-01-30T17:37:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 Could you confirm that it is in parse time?",
      "created_at": "2019-01-31T06:18:18Z",
      "updated_at": "2019-01-31T06:18:18Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "My above example isn't detected until runtime, I believe. I'm not sure any of these related checks occur at parse-time.",
      "created_at": "2019-01-31T13:35:41Z",
      "updated_at": "2019-01-31T13:35:41Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I may have jumped to conclusions there, so I've removed the references to parse time.\r\n\r\nIdeally, the problem would be detect at parse time, but that would only be safe for static, literal values, such as `ValidateSet(1,2,3)`; expression-based values and especially `ValidateScript` you wouldn't want to execute at parse time.",
      "created_at": "2019-01-31T13:43:36Z",
      "updated_at": "2019-01-31T13:43:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Checks in runtime will slow down significantly. ",
      "created_at": "2019-01-31T13:49:54Z",
      "updated_at": "2019-01-31T13:49:54Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I'm out of my depth here with respect to parsing stages and what happens when.\r\n(My understanding is that scripts are parsed _before execution starts_, which is what I meant by parse time; other than actual execution, are there additional stages?)\r\n\r\nConceptually, we're talking about a _design-time error_ - as the script/function author, you've created a contradiction - that you want to be alerted to _as early as possible_.\r\n\r\nIf we simply check _during actual invocation_, the problem may not be detected until much later.\r\n\r\nEither way, the check takes time.\r\n\r\nA compromise might be:\r\n\r\n* let PSScriptAnalyzer perform the checks instead, but only...\r\n* where it _can do so (safely)_, namely with validation based on (folded) _constants_, but not with `ValidateScript`",
      "created_at": "2019-01-31T14:25:39Z",
      "updated_at": "2019-01-31T16:51:22Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Tagging this for WG-Language to follow up on as we've not seemingly had a conclusion in any related issues I've been able to find, and it was raised again in #17403.\r\n\r\nSome more related issues:\r\n\r\n- https://github.com/PowerShell/PowerShell/issues/10614\r\n- https://github.com/PowerShell/PowerShell/issues/8778\r\n\r\nQuoting my comment from #17403:\r\n\r\n> I think having some kind of parse time error is a good idea, myself. PSSA rules are an okay stand-in but I think there's a lot we can do at parse time that we aren't doing to prevent very obvious foot-gun scenarios.",
      "created_at": "2022-05-23T15:25:49Z",
      "updated_at": "2022-05-23T15:26:46Z"
    }
  ],
  "created_at": "2019-01-30T15:58:00Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Language",
    "Needs-Triage"
  ],
  "number": 8795,
  "state": "open",
  "title": "For validation-constrained function parameters, prevent invalid default values.",
  "updated_at": "2022-05-23T15:26:46Z"
}