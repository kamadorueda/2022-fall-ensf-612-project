{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11102",
  "author": "iSazonov",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nFix #11091\r\n\r\nThrow if -AllMatches parameter is used with -SimpleMatch parameter in Select-String cmdlet\r\n\r\n## PR Context\r\n\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [x] Issue filed: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/5108\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2022-05-13T05:07:55Z",
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Given that this is:\r\n1. a breaking change\r\n2. provides no functional value\r\nWhy are you \"fixing\" this?",
      "created_at": "2019-11-18T18:44:58Z",
      "updated_at": "2019-11-18T18:44:58Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@BrucePay it's misleading to users to have parameters that appear to work together when one is completely ignored.\r\n\r\nThe alternative is to \"fix\" `-SimpleMatch` so that it does capture additional matches, but I can't speak to how complex that would be to fix.",
      "created_at": "2019-11-18T18:46:59Z",
      "updated_at": "2019-11-18T18:46:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Why are you \"fixing\" this?\r\n\r\n@BrucePay Please see @mklement0 comment https://github.com/PowerShell/PowerShell/issues/11091#issuecomment-555010137\r\n",
      "created_at": "2019-11-19T03:49:41Z",
      "updated_at": "2019-11-19T03:49:41Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @vexx32.\r\n\r\n> The alternative is to \"fix\" -SimpleMatch so that it does capture additional matches, but I can't speak to how complex that would be to fix.\r\n\r\nThe challenge is that `-SimpleMatch` - sensibly - uses literal substring searches, which is faster than regex matching.\r\n\r\nTherefore, there are no `Match` instances to populate the `.Matches` property with and providing just an array of strings for the literal matches would require introducing a distinct property, which sounds awkward.\r\n\r\nConceivably, we could switch to using regexes for `-SimpleMatch` as well, by simply calling `Regex.Escape()` on the input strings first.\r\n\r\nHowever, we would forgo the performance advantage of using literal substring searches.\r\n\r\nIn practice, the current `-SimpleMatch` implementation doesn't seem to provide that much of a performance gain over a regex search, so perhaps this change is an option; on the flip side, `Select-String` is perceived as slow already.\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2019-11-20T22:07:40Z",
      "updated_at": "2019-11-20T22:07:40Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT Can you review?",
      "created_at": "2019-12-07T22:27:20Z",
      "updated_at": "2019-12-07T22:27:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13 @SteveL-MSFT Please review the PR.",
      "created_at": "2020-03-29T07:39:04Z",
      "updated_at": "2020-03-29T07:39:04Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "If we believe that this is breaking, then the committee should review it.",
      "created_at": "2020-05-21T19:09:04Z",
      "updated_at": "2020-05-21T19:09:04Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee \r\n\r\n> Given that this is:\r\n1. a breaking change\r\n2. provides no functional value\r\nWhy are you \"fixing\" this?\r\n\r\nI tend to agree with this statement by Bruce.  Can you please review this breaking change?\r\n",
      "created_at": "2020-05-21T19:12:27Z",
      "updated_at": "2020-05-21T19:12:27Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "PowerShell in general is good at setting user expectations. This specific example is a very poor way to set user expectations. If parameters _don't work_ together, they shouldn't be premitted to be used together.\r\n\r\nEvery other cmdlet follows this idea pretty well. It would be a shame to have UX design principles fall apart or be ignored just because someone dropped the ball when setting up this cmdlet's parameter sets. It sets a poor expectation and a bad example to users, in my opinion.",
      "created_at": "2020-05-21T19:31:16Z",
      "updated_at": "2020-05-21T19:31:28Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@vexx32 I think this still falls into [bucket 2](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md#bucket-2-reasonable-grey-area) and should be reviewed by the committee.\r\n\r\nUsers could have specified both switches, not realizing one has no effect.  We are breaking that scenario reasonably.  So, I guess it does provide a function, which is notifying the user they are not getting the expected behavior.\r\n\r\nEven if we say this is not likely, then it is still in bucket 3 and requires review.",
      "created_at": "2020-05-21T19:49:53Z",
      "updated_at": "2020-05-21T19:57:03Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "I'm concerned that we are being too expedient. Creating a breaking change seems less desirable than providing the behavior that providing the 2 parameters implies. SimpleMatch and AllMatches providing all the matches that simplematch finds may be a more complex \"fix\" but it seems like it's the right thing to do. Especially in the light of punishing the user by making these parameters mutually exclusive.",
      "created_at": "2020-05-27T18:48:03Z",
      "updated_at": "2020-05-27T18:48:03Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Do we have an API for emitting match strings from a wildcard pattern match?",
      "created_at": "2020-05-27T19:38:31Z",
      "updated_at": "2020-05-27T19:38:31Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> Especially in the light of punishing the user by making these parameters mutually exclusive.\r\n\r\nThey _are_ effectively mutually exclusive and the real punishment is that _the command doesn't tell you_ (to recap: `-AllMatches` is _ignored_ if `-SimpleMatch` is also present) - but I understand @TravisEz13's concern.\r\n\r\nI agree that you _should_ be able to combine them and that enabling that is the better fix, but note that it too will be a _breaking_ change, at the very least because existing commands that use both switches may start reporting _more_ matches.\r\n\r\nAdditionally, because you cannot stuff the literal-substring match information (however we design that; note that `-SimpleMatch` doesn't perform _wildcard_ matching) into the `System.Text.RegularExpressions.Match[]`-typed `.Matches` property of [`Microsoft.PowerShell.Commands.MatchInfo`](https://docs.microsoft.com/en-US/dotnet/api/Microsoft.PowerShell.Commands.MatchInfo).\r\n\r\n* We then either need a new type for combining `-SimpleMatch` with `-AllMatches`  - or at least a new `MatchInfo` child class with an additional property.\r\n\r\n* Alternatively, as suggested before, we can internally switch to regex matching (via automatic escaping of the literal pattern string); while this has performance implications, the existing `MatchInfo` type could continue to be used, which makes for a consistent experience (though, as we currently already do with `-SimpleMatch`, `MatchInfo.Pattern` should also report the _literal_ pattern even when `-AllMatches` is also specified).\r\n\r\n\r\n\r\n",
      "created_at": "2020-05-27T21:44:27Z",
      "updated_at": "2020-05-27T21:44:27Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Y'know, that's a fair point that I hadn't really thought about @mklement0. We can indeed just use `[regex]::Escape()` to get a literal regex match... That would be relatively simple.",
      "created_at": "2020-05-27T22:19:46Z",
      "updated_at": "2020-05-27T22:19:46Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, we don't see the value of making this breaking change where users may have inadvertently used both switches and haven't seen real-world feedback where the two switches is causing confusion",
      "created_at": "2020-05-27T22:38:14Z",
      "updated_at": "2020-05-27T22:38:14Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Let me spell out what this decision means:\r\n\r\n* It forgoes fixing a bug / gap in functionality in favor of not breaking existing, _conceptually broken_ code: users who have combined `-SimpleMatch` and `-AllMatches` must have been unaware that `-AllMatches` is ignored - they just haven't noticed that their code doesn't work as intended.\r\n\r\n* Therefore, users are at risk of writing similarly broken code in the future.\r\n",
      "created_at": "2020-05-28T02:14:32Z",
      "updated_at": "2020-05-28T02:16:02Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah given we could just make this _actually work_ I don't see why we'd maintain code that is currently supporting a dead / useless pattern. Either we should make it work or break it properly. \ud83e\udd37 ",
      "created_at": "2020-05-28T03:10:35Z",
      "updated_at": "2020-05-28T03:10:35Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 Since we moved to .Net 5 we get many Regex optimizations. Have you time to measure SimpleMatch vs no-SimpleMatch? And compare with PowerShell 7.0.\r\nIf we saw better performance we could make follow breaking change - effectively use AllMatches if both switches present.",
      "created_at": "2020-05-28T07:40:33Z",
      "updated_at": "2020-05-28T07:40:33Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov there's no significant difference currently with `-SimpleMatch` and an equivalent regex expression that I can see. The two are approximately as fast as each other. We'd lose essentially nothing by switching `-SimpleMatch` to use (escaped) regex and enabling `-AllMatches` functionality.",
      "created_at": "2020-05-28T13:29:25Z",
      "updated_at": "2020-05-28T13:29:25Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMainainer, Please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-06-04T14:00:11Z",
      "updated_at": "2020-06-04T14:00:11Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13 were there changes requested? Last comment I see from the committee isn't requesting any changes at all, more recommending against fixing the bug entirely (which... *sigh*.)",
      "created_at": "2020-06-09T17:56:07Z",
      "updated_at": "2020-06-09T17:56:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "From my understanding the conclusion is that we need to switch to regex if both parameters present and return results in format as `-AllMatches` does.\r\nI think it should be in new PR.\r\n@TravisEz13 Yes?",
      "created_at": "2020-06-10T05:26:32Z",
      "updated_at": "2020-06-10T05:29:35Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMainainer, Please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-06-17T14:00:24Z",
      "updated_at": "2020-06-17T14:00:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I don't understand the request.\r\nMy current point https://github.com/PowerShell/PowerShell/pull/11102#issuecomment-641730199\r\n\r\n@TravisEz13 @SteveL-MSFT could you please clarify? Or maybe PowerShell Committee could discuss https://github.com/PowerShell/PowerShell/pull/11102#issuecomment-641730199",
      "created_at": "2020-10-28T07:44:57Z",
      "updated_at": "2020-10-28T07:44:57Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-11-04T14:00:05Z",
      "updated_at": "2020-11-04T14:00:05Z"
    },
    {
      "author": "pull-request-quantifier[bot]",
      "author_association": "NONE",
      "body": "### ![](https://img.shields.io/static/v1?label=Quantified&message=Extra%20Small&color=green)\r\n\r\nThis PR has `10` quantified lines of changes. In general, a change size of upto `200` lines is ideal for the best PR experience!\r\n\r\n------\r\n\r\n<details >\r\n    <summary display=\"inline\"> <strong>Quantification details</strong></summary>\r\n    <p />\r\n\r\n```\r\nLabel      : Extra Small\r\nSize       : +9 -1\r\nPercentile : 4%\r\n\r\nTotal files changed: 3\r\n\r\nChange summary by file extension:\r\n.cs : +4 -0\r\n.resx : +3 -0\r\n.ps1 : +2 -1\r\n```\r\n> Change counts above are quantified counts, based on the [PullRequestQuantifier customizations](https://github.com/microsoft/PullRequestQuantifier/blob/main/docs/prquantifier-yaml.md).\r\n    \r\n</details>\r\n\r\n\r\n<details>\r\n    <summary display=\"inline\"> <strong>Why proper sizing of changes matters</strong> </summary>\r\n    <p/>\r\n    <p/>\r\n\r\nOptimal pull request sizes drive a better predictable PR flow as they strike a\r\nbalance between between PR complexity and PR review overhead. PRs within the\r\noptimal size (typical small, or medium sized PRs) mean:\r\n\r\n- Fast and predictable releases to production:\r\n  - Optimal size changes are more likely to be reviewed faster with fewer\r\niterations.\r\n  - Similarity in low PR complexity drives similar review times.\r\n- Review quality is likely higher as complexity is lower:\r\n  - Bugs are more likely to be detected.\r\n  - Code inconsistencies are more likely to be detetcted.\r\n- Knowledge sharing is improved within the participants:\r\n  - Small portions can be assimilated better.\r\n- Better engineering practices are exercised:\r\n  - Solving big problems by dividing them in well contained, smaller problems.\r\n  - Exercising separation of concerns within the code changes.\r\n\r\n#### What can I do to optimize my changes\r\n\r\n- Use the PullRequestQuantifier to quantify your PR accurately\r\n  - Create a context profile for your repo using the [context generator](https://github.com/microsoft/PullRequestQuantifier/releases)\r\n  - Exclude files that are not necessary to be reviewed or do not increase the review complexity. Example: Autogenerated code, docs, project IDE setting files, binaries, etc. Check out the `Excluded` section from your `prquantifier.yaml` context profile. \r\n  - Understand your typical change complexity, drive towards the desired complexity by adjusting the label mapping in your `prquantifier.yaml` context profile.\r\n  - Only use the labels that matter to you, [see context specification](./docs/prquantifier-yaml.md) to customize your `prquantifier.yaml` context profile.\r\n- Change your engineering behaviors\r\n  - For PRs that fall outside of the desired spectrum, review the details and check if:\r\n    - Your PR could be split in smaller, self-contained PRs instead\r\n    - Your PR only solves one particular issue. (For example, don't refactor and code new features in the same PR).\r\n\r\n#### How to interpret the change counts in git diff output\r\n\r\n- One line was added: `+1 -0`\r\n- One line was deleted: `+0 -1`\r\n- One line was modified: `+1 -1` (git diff doesn't know about modified, it will\r\ninterpret that line like one addition plus one deletion)\r\n- Change percentiles: Change characteristics (addition, deletion, modification)\r\nof this PR in relation to all other PRs within the repository.\r\n\r\n</details>\r\n\r\n<p />\r\n\r\n------\r\n\r\nWas this comment helpful? <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiaVNhem9ub3YiLCJSZXBvc2l0b3J5TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwiLCJQdWxsUmVxdWVzdExpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsL3B1bGwvMTExMDIiLCJFdmVudFR5cGUiOiJUaHVtYnNVcCJ9&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs up\"><strong>:thumbsup:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiaVNhem9ub3YiLCJSZXBvc2l0b3J5TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwiLCJQdWxsUmVxdWVzdExpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsL3B1bGwvMTExMDIiLCJFdmVudFR5cGUiOiJOZXV0cmFsIn0=&amp;anonymous=True\" target=\"_blank\" title=\"Neutral\"><strong>&nbsp;:ok_hand:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiaVNhem9ub3YiLCJSZXBvc2l0b3J5TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwiLCJQdWxsUmVxdWVzdExpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsL3B1bGwvMTExMDIiLCJFdmVudFR5cGUiOiJUaHVtYnNEb3duIn0=&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs down\"><strong>&nbsp;:thumbsdown:</strong></a> (<a href=\"MAILTO:prquantifier@microsoft.com\" title=\"Mail to prquantifier@microsoft.com\">Email</a>)\r\n[Customize PullRequestQuantifier](https://github.com/PowerShell/PowerShell/blob/master/.github/prquantifier.yaml) for this repository.\r\n\r\n",
      "created_at": "2022-05-12T20:42:01Z",
      "updated_at": "2022-05-12T20:42:01Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@iSazonov The committee is asking for change that doesn't break existing functionality.",
      "created_at": "2022-05-12T20:44:30Z",
      "updated_at": "2022-05-12T20:44:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I had already forgotten about it and have no interest :-)",
      "created_at": "2022-05-13T05:07:55Z",
      "updated_at": "2022-05-13T05:07:55Z"
    }
  ],
  "created_at": "2019-11-18T13:54:47Z",
  "number": 11102,
  "state": "closed",
  "title": "Makes SimpleMatch and AllMatches parameters mutually exclusive in Select-String cmdlet",
  "updated_at": "2022-05-13T05:08:04Z"
}