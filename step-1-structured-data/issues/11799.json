{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11799",
  "author": "Bluecakes",
  "body": "I'm trying to create a portable library that i can use with PowerShell 5, 6 (Core) and Linux. I'm following the [Building a C# Cmdlet for PowerShell Standard 3.0 with Visual Studio](https://github.com/PowerShell/PowerShell/blob/master/docs/cmdlet-example/visual-studio-simple-example.md) example but i'm only able to successfully import the module on PowerShell 5.\r\n\r\nSteps to reproduce:\r\n1. Create a new \"Class Library (.NET Standard)\" project in Visual Studio\r\n2. Add the PowerShellStandard.Library Nuget package\r\n3. Replace the class in Class1.cs with the following code\r\n````\r\n    using System.Management.Automation;\r\n\r\n    [Cmdlet(VerbsCommunications.Write, \"Greeting\")]\r\n    public class WriteGreeting : PSCmdlet\r\n    {\r\n        protected override void EndProcessing()\r\n        {\r\n            this.WriteObject(\"Greetings!\");\r\n        }\r\n    }\r\n````\r\n4. Build the project\r\n\r\nExpected Results\r\n- Can import the module in PowerShell 5 and run the Write-Greeting cmdlet\r\n- Can import the module in PowerShell 6 and run the Write-Greeting cmdlet\r\n\r\nOutcome\r\n- PowerShell 5 successfully imports the module and i can run the Write-Greeting cmdlet\r\n- PowerShell 6 displays \"Bad IL Format\" when i import the module\r\n![image](https://user-images.githubusercontent.com/12452056/74000232-0f20c180-49b3-11ea-865b-c55d602bf18f.png)\r\n\r\n\r\nVisual Studio and .NET Framework Version\r\n![image](https://user-images.githubusercontent.com/12452056/73999830-af75e680-49b1-11ea-9eb2-ef604607f46e.png)\r\n\r\nPowerShell 6 and .NET Core Version\r\n![image](https://user-images.githubusercontent.com/12452056/73999881-e21fdf00-49b1-11ea-9517-10c2b8b9e125.png)\r\n\r\nPowerShell 5\r\n![image](https://user-images.githubusercontent.com/12452056/73999675-34accb80-49b1-11ea-8b3b-cf4178d5feff.png)",
  "closed_at": "2020-02-10T22:09:02Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "For reference https://devblogs.microsoft.com/powershell/powershell-standard-library-build-single-module-that-works-across-windows-powershell-and-powershell-core/\n\n<blockquote><img src=\"https://devblogs.microsoft.com/powershell/wp-content/uploads/sites/30/2018/09/Powershell_256.png\" width=\"48\" align=\"right\"><div><img src=\"https://devblogs.microsoft.com/powershell/wp-content/uploads/sites/30/2019/02/Powershell_2561.png\" height=\"14\"> PowerShell</div><div><strong><a href=\"https://devblogs.microsoft.com/powershell/powershell-standard-library-build-single-module-that-works-across-windows-powershell-and-powershell-core/\">PowerShell Standard Library: Build single module that works across Windows PowerShell and PowerShell Core | PowerShell</a></strong></div><div>This is the first of a series of blog posts that will help you take advantage of a new NuGet package\u00a0PowerShellStandard Library 5.1.0. This package allows developers to create modules that are portable between Windows PowerShell 5.1 and PowerShell Core 6.0.</div></blockquote>",
      "created_at": "2020-02-07T07:22:00Z",
      "updated_at": "2020-02-07T07:22:06Z"
    },
    {
      "author": "Bluecakes",
      "author_association": "NONE",
      "body": "@iSazonov  I tried following that reference and encountered the same error. After creating a new module using the psmodule template and immediately building the project, i can't import the resulting library into PowerShell Core to run the \"Test-SampleCmdlet\" cmdlet.\r\n\r\n![image](https://user-images.githubusercontent.com/12452056/74119163-0ece3380-4c0a-11ea-895d-056df2a0825b.png)\r\n\r\nIf i then transition into PowerShell 5, the cmdlet works as expected.\r\n\r\n![image](https://user-images.githubusercontent.com/12452056/74119489-530e0380-4c0b-11ea-8f4f-66a32c18ab94.png)\r\n",
      "created_at": "2020-02-10T03:36:43Z",
      "updated_at": "2020-02-10T03:44:01Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "/cc @daxian-dbw from the error message, I can't help but wonder if this is related to the native library loading changes that have been made.",
      "created_at": "2020-02-10T04:07:43Z",
      "updated_at": "2020-02-10T04:07:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If it is native library loading related we have an update in last days and @Bluecakes can test with latest nightly build.",
      "created_at": "2020-02-10T04:38:37Z",
      "updated_at": "2020-02-10T04:38:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@Bluecakes Can you share Get-Error output? Better for PowerShell debug build.",
      "created_at": "2020-02-10T04:41:20Z",
      "updated_at": "2020-02-10T04:42:10Z"
    },
    {
      "author": "Bluecakes",
      "author_association": "NONE",
      "body": "I downloaded the latest release, PowerShell 7, and tried importing the module created by the .NET Core CLI and got the same error, here is the Get-Error output:\r\n\r\n![image](https://user-images.githubusercontent.com/12452056/74123087-2f51ba00-4c19-11ea-9d3e-68d9ee458de4.png)\r\n",
      "created_at": "2020-02-10T05:23:20Z",
      "updated_at": "2020-02-10T05:23:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I can not confirm the bug. I create, compile and import the module without any error, and run the cmdlet too in both PowerShell versions.",
      "created_at": "2020-02-10T07:25:38Z",
      "updated_at": "2020-02-10T07:25:38Z"
    },
    {
      "author": "Bluecakes",
      "author_association": "NONE",
      "body": "I tried the exact same steps to create a brand new psmodule on a different machine and it worked perfectly. The version of Windows (10.0.17763) and Core (3.1.101) are exactly the same, the only difference is that the working machine only has 3.1.101 SDK installed, the machine that isn't working has multiple SDKs as listed in the first post.",
      "created_at": "2020-02-10T09:19:42Z",
      "updated_at": "2020-02-10T09:19:42Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You could use dotnet tracing if you want fix this.\r\n",
      "created_at": "2020-02-10T10:53:24Z",
      "updated_at": "2020-02-10T10:53:24Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "It doesn't seem right that PowerShell would break here just if a different SDK happens to be installed. The install should be standalone from whatever SDK versions are installed side by side :thinking: ",
      "created_at": "2020-02-10T12:35:37Z",
      "updated_at": "2020-02-10T12:35:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "There can be conflict with paths or packages in cache. Or crossgen wrong selection.",
      "created_at": "2020-02-10T13:03:08Z",
      "updated_at": "2020-02-10T13:04:03Z"
    },
    {
      "author": "Bluecakes",
      "author_association": "NONE",
      "body": "So i opened up a new PowerShell window and got the ID with `$PID`, opened another window and got dotnet trace to collect data from that process id and...   it worked. Just to make sure i closed down all windows and opened up a new window, module still loaded. Opened up PowerShell 6 and tried it there too, still loaded.\r\n\r\nI'm both happy and confused, i'm not sure what caused the problem or what fixed it but thank you for helping me with this issue.",
      "created_at": "2020-02-10T22:09:02Z",
      "updated_at": "2020-02-10T22:09:02Z"
    }
  ],
  "created_at": "2020-02-07T04:14:56Z",
  "number": 11799,
  "state": "closed",
  "title": "Bad IL Format for cmdlet created with PowerShellStandard.Library",
  "updated_at": "2020-02-10T22:09:03Z"
}