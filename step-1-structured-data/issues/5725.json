{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5725",
  "author": "iSazonov",
  "body": "Current version of Add-Type cmdlet is _partially_ ported on Roslyn from Dom. It is large breaking change. It is true for most of the parameters. Some parameters was related to Dom and was removed. Some parameters don't implemented. _In fact, we already have a new cmdlet._\r\nBefore I push new enhancements I want discuss a few points. We could remove old things.\r\n\r\n -  [public enum `Language`](https://github.com/PowerShell/PowerShell/blob/master/src/Microsoft.PowerShell.Commands.Utility/commands/utility/AddType.cs#L33)\r\nShould we keep JScript for backward compatibility?\r\nShould we add FSharp for future?\r\nShould we keep CSharpVersion1, CSharpVersion2 and so on? If yes should we add VisualBasicVersion9 and so on? Could we leave only CSharp and VisualBasic in the enum? Why anybody can want to use CSharpVersion1 in PowerShell?! I found nothing on GitHub - I think we should old elements.\r\nCurrently I have to add language family type with CSharp and VisualBasic internally. So I'd prefer simplify `public enum Language` and don't use the new type and helper functions to translate these types.\r\n- Roslyn can accept parsing and compile options. It is _different types_ for every language (currently CSharp and VusualBasic). Some options (not all) can be useful for Add-Type (language version, preprocessor variables). \r\nHow we can better expose the options? Generic or by language? The question related with previous one - with options we can specify the language version. We could Roslyn generic classes but they are not convenient to work in PowerShell. I have no conclusion.\r\n- Should we support creation new assembly without loading? Currently we always load created assembly, even with `-Passthrou`. I think we could add `-CompileOnly` switch.\r\n\r\n/cc @SteveL-MSFT @daxian-dbw \r\n\r\n  ",
  "closed_at": "2018-04-26T05:40:27Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "`Add-Type` was a big change to dotnetcore so I'm personally ok with not maintaining strict compatibility for legacy features that people don't use (with sufficient data).\r\n\r\nIdeally, we should use dynamic parameters per language.\r\n\r\nI think adding a `-CompileOnly` switch would be useful.",
      "created_at": "2017-12-27T19:18:08Z",
      "updated_at": "2017-12-27T19:18:08Z"
    },
    {
      "author": "HerbM",
      "author_association": "NONE",
      "body": "Please do add FSharp.\r\n\r\nCurrent versions of FSharp.Compiler.Codedom seem to be broken relative to incorrect version of FSharp.Core -- and no amount of installing packages for various versions had helped me -- or asking on FSharp Slack.\r\n\r\nWhose problem would this be?  Where should it be reported?\r\n(I think it is stuck half-way between PowerShell & FSharp with no one to care.",
      "created_at": "2018-01-06T18:31:43Z",
      "updated_at": "2018-01-06T18:31:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@HerbM Thanks for your feedback. I like this too. But I don't found FSharp classes in Roslyn repo. It seems it is a separate project. So my current plan is to remove a regression and add VisualBasic support. After that we could research in depth how add FSharp support.",
      "created_at": "2018-01-06T19:18:09Z",
      "updated_at": "2018-01-06T19:18:09Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> Should we support creation new assembly without loading? Currently we always load created assembly, even with -Passthru\r\n\r\nOne correction: `-PassThru` returns the types that were added by `Add-Type`, so the assembly has to be loaded when it's specified.",
      "created_at": "2018-01-10T01:57:32Z",
      "updated_at": "2018-01-10T01:57:32Z"
    },
    {
      "author": "LMA1980",
      "author_association": "NONE",
      "body": "Would it be possible to add PowerShell as a language to overcome the limitation link to the PowerShell's keyword Class?",
      "created_at": "2018-02-24T01:58:10Z",
      "updated_at": "2018-02-24T01:58:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@LMA1980 Could you add more information about your request?",
      "created_at": "2018-02-25T14:31:59Z",
      "updated_at": "2018-02-25T14:31:59Z"
    },
    {
      "author": "LMA1980",
      "author_association": "NONE",
      "body": "Powershell now have the keyword _class_ and _enum_. When using that method it allow to quickly generate simple class or even extend other classes.\r\n\r\n```\r\nclass MyClass { \r\n[string] myProperty;\r\n[int] anotherProperty; \r\n\r\nMyClass() { \r\n#...do something - this is a constructor... \r\n} \r\n\r\nMyClass([PSCustomObject] $object) { \r\n#... do something using a PSCustomObject as source ...\r\n}\r\n}\r\n```\r\n\r\nNow the issue with such definition, they are only accessible to their Scope and currently they cannot be exported like a Function or a Cmdlet. (https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_classes?view=powershell-5)\r\n\r\nWith Add-Type -language PowerShell ... This would open up new capability without requiring wrapper like _New-MyClass_ function solution to instanciate such object from outside of a Module scope.",
      "created_at": "2018-02-25T22:43:31Z",
      "updated_at": "2018-02-25T22:44:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@LMA1980 Thanks for clarify! It seems we have already such request (related with Import-Module). I couldn't find a quick the Issue.",
      "created_at": "2018-02-26T03:50:42Z",
      "updated_at": "2018-02-26T03:51:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@LMA1980 Please see related Issues #4713, #2964, #2963, #2505, #2449 ",
      "created_at": "2018-02-26T15:40:08Z",
      "updated_at": "2018-02-26T15:40:08Z"
    }
  ],
  "created_at": "2017-12-20T18:23:36Z",
  "number": 5725,
  "state": "closed",
  "title": "Future of Add-Type ",
  "updated_at": "2018-04-26T05:58:31Z"
}