{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7435",
  "author": "iSazonov",
  "body": "## PR Summary\r\n\r\nRelated #7112.\r\nPSMemberInfoInternalCollection<T> uses internally OrderedDictionary class.\r\nThe OrderedDictionary class in .Net Core 2.1 allocates internally ArrayList  and Hashtable  after any first using any property. Even if we check that OrderedDictionary is empty (Count==0) or use indexer it causes allocations.\r\n\r\nThe commit postpones the internall allocations until this is really necessary.\r\n\r\nTaking into account that PSMemberInfoInternalCollection<T> is used in each PSObject and is often empty, this change dramatically reduces memory allocations.\r\n\r\n### PerfView results\r\n1. Startup test\r\n- before - GC Stats Total Allocs : 13.274 MB\r\n- after  - GC Stats Total Allocs : 10.082 MB\r\n\r\n2. Script test (Import-Csv)\r\nBefore fix:\r\n- GC Stats Total Allocs : 4,073.747 MB\r\n![gcstatsbeforefix](https://user-images.githubusercontent.com/22290914/43588607-62cb0bbc-965c-11e8-82eb-0d007ebea9c0.jpg)\r\n![gcheapallocbeforefix](https://user-images.githubusercontent.com/22290914/43588707-9b5b8484-965c-11e8-97a7-8db9e783c0b1.jpg)\r\n\r\nAfter the fix:\r\n- GC Stats Total Allocs : 1,186.017 MB\r\n![gcstatsafterfix](https://user-images.githubusercontent.com/22290914/43588685-9243fafc-965c-11e8-8dce-90785ccb8f9b.jpg)\r\n![gcheapallocafterfix](https://user-images.githubusercontent.com/22290914/43588713-9f8d1bd0-965c-11e8-9836-189cd64e0745.jpg)\r\n\r\nTest script:\r\n```powershell\r\ncd c:\\tmp\\\r\nfunction perf_test($source, $result) {\r\n    Write-Host \"Measuring Import-Csv performance over time...\"\r\n\r\n    \"index,duration_ms,bytes_consumed\" | Out-File $result\r\n    for ($i=0; $i -le 400; $i++) {\r\n\r\n            $millis = (Measure-Command { Import-Csv $source }).TotalMilliseconds\r\n            # Uncomment this if you want analize results in Excel\r\n            $memory = [System.GC]::GetTotalMemory($false)\r\n\t    $i.ToString() + \",\" + $millis.ToString() + \",\" + $memory | Out-File $result -Append\r\n    }\r\n    Write-Host \"Done\"\r\n}\r\n\r\n$fields = 0..19 | ForEach-Object { \"random_numbers$_\" }\r\n($fields -join \",\") | Out-File .\\source2.csv\r\nGet-Random -SetSeed 1 | Out-Null\r\nfor ($i=0; $i -le 500; $i++) {\r\n    $values = 0..19 | ForEach-Object { (Get-Random).ToString() }\r\n    ($values -join \",\") | Out-File .\\source2.csv -Append\r\n}\r\n\r\nperf_test .\\source2.csv .\\results.csv\r\n```\r\n\r\n\r\n\r\n\r\n\r\n## PR Checklist\r\n\r\n- [ ] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [ ] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [ ] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [ ] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed - Issue link:\r\n- **Testing - New and feature**\r\n    - [ ] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [ ] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2018-08-06T18:06:37Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT If the PR is ok you could consider it for Windows PowerShell 5.1 too.\r\n\r\n@daxian-dbw Sorry for ping - the PR can be important.\r\n\r\n@markekraus Could you please check json cmdlets with the change if you have a time. I hope we get a win there too.\r\n\r\n@vancem Thanks for your great analysis - it helped a lot!\r\n",
      "created_at": "2018-08-02T14:16:48Z",
      "updated_at": "2018-08-02T14:16:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw I reverted `lock (_members)` to `lock (Members)` because the lock failed on null in Add(). I believe that it makes no sense to add the null check in the method so using `lock (Members)` everywhere looks good.\r\n",
      "created_at": "2018-08-03T11:44:51Z",
      "updated_at": "2018-08-03T12:30:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I measure pwsh.exe startup and update PR description:\r\n> Startup test\r\n- before - GC Stats Total Allocs : 13.274 MB\r\n- after  - GC Stats Total Allocs : 10.082 MB\r\n",
      "created_at": "2018-08-03T12:29:27Z",
      "updated_at": "2018-08-03T12:29:27Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov The issue with JSON is one of speed more than memory allocation. I don't have he tooling to test the memory performance. but the code I use to test the JSON performance is this:\r\n\r\n```powershell\r\n$json = @'\r\n{\r\n    \"id\": \"string\",\r\n    \"data\": [\r\n        {                       \r\n        \"accountId\": 0,\r\n        \"productId\": 0,\r\n        \"resourceLocationId\": 0,\r\n        \"consumedServiceId\": 0,\r\n        \"departmentId\": 0,\r\n        \"accountOwnerEmail\": \"string\",\r\n        \"accountName\": \"string\",\r\n        \"serviceAdministratorId\": \"string\",\r\n        \"subscriptionId\": 0,\r\n        \"subscriptionGuid\": \"string\",\r\n        \"subscriptionName\": \"string\",\r\n        \"date\": \"2017-04-27T23:01:43.799Z\",\r\n        \"product\": \"string\",\r\n        \"meterId\": \"string\",\r\n        \"meterCategory\": \"string\",\r\n        \"meterSubCategory\": \"string\",\r\n        \"meterRegion\": \"string\",\r\n        \"meterName\": \"string\",\r\n        \"consumedQuantity\": 0,\r\n        \"resourceRate\": 0,\r\n        \"Cost\": 0,\r\n        \"resourceLocation\": \"string\",\r\n        \"consumedService\": \"string\",\r\n        \"instanceId\": \"string\",\r\n        \"serviceInfo1\": \"string\",\r\n        \"serviceInfo2\": \"string\",\r\n        \"additionalInfo\": \"string\",\r\n        \"tags\": \"string\",\r\n        \"storeServiceIdentifier\": \"string\",\r\n        \"departmentName\": \"string\",\r\n        \"costCenter\": \"string\",\r\n        \"unitOfMeasure\": \"string\",\r\n        \"resourceGroup\": \"string\"\r\n        }\r\n    ],\r\n    \"nextLink\": \"string\"\r\n}\r\n'@\r\n$json = 1..1000 | % { $json }\r\n$json = '[' + ($json -join ',') + ']'\r\nMeasure-Command {$Json | ConvertFrom-Json } | % TotalMilliseconds\r\n```\r\n\r\n5.1: 375.3416ms\r\n6.0.2: 2055.1092ms\r\n6.1.0-preview.4: 1252.1725ms\r\n6.1.0-preview.10466: 1130.4745ms (your most recent passing build for this PR)\r\n\r\nso it is marginally better than 6.1.0-preview.4, better than 6.0.2, but still nowhere near the performance of 5.1. \u2639\ufe0f \r\n",
      "created_at": "2018-08-03T13:46:33Z",
      "updated_at": "2018-08-03T13:46:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@markekraus Many thanks for your repo script! I'll try to look it deeper next week.\r\n\r\nUpdate: I did fast look - after #7413 and the PR I think we get a win in ConvertFrom-Json too.",
      "created_at": "2018-08-03T14:24:18Z",
      "updated_at": "2018-08-03T15:14:29Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov You cannot change all `lock(Members)` to `lock(_members)`. You can change those that `_members == null` has already been checked. For `Add`, there is no check for `_members != null`, so changing to `lock (_members)` would fail for sure.",
      "created_at": "2018-08-03T17:04:27Z",
      "updated_at": "2018-08-03T17:04:27Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@markekraus \r\nThere is a *very* expensive check for duplicate members in `JsonObject.PopulateFromJDictionary`.\r\n\r\nBy replacing that check, and by keeping a hashset of preValidated member, I can speed it up by a factor of 3 or so.\r\n",
      "created_at": "2018-08-03T17:13:14Z",
      "updated_at": "2018-08-03T17:15:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@powercode Using preValidated looks as internal only hack. It will be nice to find more generic solution that we can expose to public.",
      "created_at": "2018-08-03T17:38:06Z",
      "updated_at": "2018-08-03T17:38:06Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov I agree about `preValidated`.\r\n\r\nIt isn't obvious how though. It would require some sort of scope, where I say *now I'm gonna add a bunch of similar objects - do validation only on the first one*.",
      "created_at": "2018-08-03T17:41:32Z",
      "updated_at": "2018-08-03T17:53:31Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "One test failed in AppVeyor, but works fine on my dev box. Will address @powercode's comment and trigger the CIs again.\r\n\r\n```\r\n[00:15:18]     [-] -WindowStyle Maximized should work on Windows \r\n[00:15:18]       Expected exactly {Maximized}, but got {Hidden}.\r\n[00:15:18]       636:         $showCmd | Should -BeExactly $WindowStyle\r\n[00:15:18]       at Invoke-Assertion, C:\\projects\\powershell\\src\\powershell-win-core\\bin\\Release\\netcoreapp2.1\\win7-x64\\publish\\Modules\\Pester\\4.2.0\\Functions\\Assertions\\Should.ps1: line 206\r\n[00:15:18]       at <ScriptBlock>, C:\\projects\\powershell\\test\\powershell\\Host\\ConsoleHost.Tests.ps1: line 636\r\n[00:15:18] Processing -WindowStyle 'invalid' failed: Cannot convert value \"invalid\" to type \"System.Diagnostics.ProcessWindowStyle\". Error: \"Unable to match the identifier name invalid to a valid enumerator name. Specify one of the following enumerator names and try again:\r\n[00:15:18] Normal, Hidden, Minimized, Maximized\".\r\n```",
      "created_at": "2018-08-03T18:05:02Z",
      "updated_at": "2018-08-03T18:05:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Thanks all for help and useful comments!",
      "created_at": "2018-08-07T03:33:35Z",
      "updated_at": "2018-08-07T03:33:35Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "OrderedDictionary was fixed in https://github.com/dotnet/corefx/pull/32001 - some properies now don't allocate if no need.",
      "created_at": "2018-08-31T13:38:45Z",
      "updated_at": "2018-08-31T13:38:45Z"
    }
  ],
  "created_at": "2018-08-02T14:09:13Z",
  "number": 7435,
  "state": "closed",
  "title": "Remove extra allocations in PSMemberInfoInternalCollection<T>",
  "updated_at": "2018-08-31T13:38:45Z"
}