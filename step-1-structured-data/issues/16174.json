{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16174",
  "author": "yumaikas",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\n0) Be on macOS Big Sur, Version 11.6\r\n1) Launch a PowerShell session in Terminal.\r\n\r\n2) Run `Wait-Event`, then stop it via Ctrl-C\r\n3) Run. `Wait-Event` again, but resize the terminal.\r\n\r\n### Expected behavior\r\n\r\n```console\r\nPowerShell doesn't exit\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nPowershell exits on terminal resize. \r\n\r\nIf the terminal is hosted inside Neovim, it shows shows \"Process exited 130\", \r\n\r\nIf the terminal is only hosted inside of the macOS Terminal.app shows \"[Process completed]\"\r\n```\r\n\r\n\r\n### Error details\r\n\r\n```console\r\n(Nothing)\r\n```\r\n\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.4\r\nPSEdition                      Core\r\nGitCommitId                    7.1.4\r\nOS                             Darwin 20.6.0 Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": "2022-08-19T00:01:27Z",
  "comments": [
    {
      "author": "yumaikas",
      "author_association": "NONE",
      "body": "Of note, this issue gives me a lot of grief when I run long-running foreground commands in PowerShell in Neovim, like a custom file polling script I have. \r\n\r\nThe above reproduces outside of that context.",
      "created_at": "2021-09-30T05:52:29Z",
      "updated_at": "2021-09-30T05:52:29Z"
    },
    {
      "author": "yumaikas",
      "author_association": "NONE",
      "body": "Why does this have Issue-Question instead of Issue-Bug?",
      "created_at": "2021-10-01T18:59:58Z",
      "updated_at": "2021-10-01T18:59:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Why does this have Issue-Question instead of Issue-Bug?\r\n\r\nWork Group will do a conclusion.\r\n\r\nPlease update your repro steps (it is not clear about Neovim).",
      "created_at": "2021-10-02T13:01:17Z",
      "updated_at": "2021-10-02T13:01:17Z"
    },
    {
      "author": "yumaikas",
      "author_association": "NONE",
      "body": "The repro steps are updated. Is there anything further I should do to help the WG be able to attack this? I can attempt to run PowerShell Core inside a debugger, and reproduce it there, though that will take some time.",
      "created_at": "2021-10-05T04:16:35Z",
      "updated_at": "2021-10-05T04:16:35Z"
    },
    {
      "author": "yumaikas",
      "author_association": "NONE",
      "body": "So, I found out something curious about my setup that suggests this isn't a PowerShell specific bug:\r\n\r\nI'd set up a pwsh.nologo script to act as my interactive shell with the following\r\n\r\n```sh\r\n#! /bin/zsh\r\n/usr/local/bin pwsh -Login -nologo\r\n```\r\n\r\nI noticed that running this outside of a logo environment, didn't seem to run into the same error.\r\n\r\nSwitching it to:\r\n\r\n```sh\r\n#! /usr/local/bin/pwsh\r\n/usr/local/bin/pwsh -Login -nologo\r\n```\r\n\r\nSeems to get rid of this bug. Unless you want something else from me, I'll close this issue in 48 hours.",
      "created_at": "2021-10-05T19:36:01Z",
      "updated_at": "2021-10-05T19:36:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I don't think we support `zsh`. /cc @rjmholt ",
      "created_at": "2021-10-06T04:12:05Z",
      "updated_at": "2021-10-06T04:12:05Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Things should work running underneath another shell. I do that a lot on Linux myself.\r\n\r\nHowever, for this issue it'd be nice to rule out this being caused by zsh interfering in some way.\r\n\r\nI will say, I'm not sure why you'd want a login script to be a PowerShell script (with the pwsh shebang) that then calls PowerShell with arguments -- that means you're starting two PowerShell processes, one within another.\r\n\r\nI'm fairly sure you can specify arguments in a shebang, but also I think you can give them in your login shell configuration (maybe in /etc/shells?).",
      "created_at": "2021-10-06T18:10:33Z",
      "updated_at": "2021-10-06T18:10:33Z"
    },
    {
      "author": "yumaikas",
      "author_association": "NONE",
      "body": "So, the reason I do this is because I want to able to set -Login and -nologo, and I'm totally unaware of any non-CLI flag options for doing so. I tried setting flags via /etc/shells, and that didn't work for me. So, I've created a script that just calls PowerShell, like I showed above.\r\n\r\nDo you want me to try a different shell for my shebang line? Do environment variables exist that I could use to drive -Login/-nologo? \r\n\r\nI've documented what I'm doing here: <https://junglecoder.com/blog/pwsh-osx-nologo> \n\n<blockquote><div><strong><a href=\"https://junglecoder.com/blog/pwsh-osx-nologo\">PowerShell -nologo for interactive OSX shells. | Jungle Coder</a></strong></div></blockquote>",
      "created_at": "2021-10-06T22:43:27Z",
      "updated_at": "2021-10-06T22:43:29Z"
    },
    {
      "author": "yumaikas",
      "author_association": "NONE",
      "body": "I did do a decent amount of digging around trying to piece together how I got here, but this depth of customizing login shells is new territory for me, so there is a chance that I've missed something.\r\n\r\nThat being said, /bin/dash and /bin/sh both seem to not crash due to resizes, as well as /bin/pwsh, so it does look more related to zsh than pwsh.",
      "created_at": "2021-10-06T22:52:31Z",
      "updated_at": "2021-10-06T22:52:31Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "You could try /bin/sh with the login flag -- other than zsh I don't think there's much else for default shells on macOS (I'm pretty sure bash will be taken out soon). The only thing I'd avoid is using pwsh in the shebang to start pwsh, since two pwsh startups is a lot of overhead and will be slow.\r\n\r\nDepending on what terminal you use, you should also be able to configure the default shell invocation (certainly iTerm2 allows that).",
      "created_at": "2021-10-07T17:23:30Z",
      "updated_at": "2021-10-07T17:23:30Z"
    },
    {
      "author": "yumaikas",
      "author_association": "NONE",
      "body": "So, it turns out that I can use `exec` like so:\r\n\r\n```zsh\r\n#! /bin/zsh\r\nexec /usr/local/bin pwsh -Login -nologo\r\n```\r\n\r\nAnd that works around it. I got that tip from Bart Schaefer on the zsh-workers mailing list.\r\n\r\nFunnily enough, I think I notice *more* startup time using zsh than I do with nested pwsh calls. \r\n\r\nI use kitty and/or Terminal.app atm.",
      "created_at": "2021-10-07T21:34:53Z",
      "updated_at": "2021-10-07T21:37:03Z"
    },
    {
      "author": "yumaikas",
      "author_association": "NONE",
      "body": "From what I could tell with dtruss, the nested pwsh session seems to send a QUIT signal (or something of the like) that the zsh session isn't monitoring for.\r\n\r\nI have ways to work around it, so it's not a critical issue at this point, more of a quirk.\r\n\r\nFor me, /etc/shells shows quite a few options:\r\n\r\n```\r\n/bin/bash\r\n/bin/csh\r\n/bin/dash\r\n/bin/ksh\r\n/bin/sh\r\n/bin/tcsh\r\n/bin/zsh\r\n/usr/local/bin/pwsh\r\n/usr/local/bin/pwsh.nologo\r\n```",
      "created_at": "2021-10-07T21:41:47Z",
      "updated_at": "2021-10-07T21:41:47Z"
    },
    {
      "author": "theJasonHelmick",
      "author_association": "CONTRIBUTOR",
      "body": "@yumaikas - Thanks for the issue - I haven't been able to reproduce this error using PowerShell 7.2.2 on MacOS using terminal or iTerm2.  Can you confirm?",
      "created_at": "2022-06-06T19:43:57Z",
      "updated_at": "2022-06-06T19:43:57Z"
    },
    {
      "author": "yumaikas",
      "author_association": "NONE",
      "body": "I wasn't able to reproduce it locally running pwsh from Zsh, so I think this is now working better.",
      "created_at": "2022-06-13T17:44:49Z",
      "updated_at": "2022-06-13T17:44:49Z"
    },
    {
      "author": "theJasonHelmick",
      "author_association": "CONTRIBUTOR",
      "body": "@yumaikas - thank you for the response -- It is possible that an upgrade to .NET may have fixed this.  We tried to repo on PowerShell 7.2.x and 7.3 -- the error did not reproduce.",
      "created_at": "2022-08-17T20:22:00Z",
      "updated_at": "2022-08-17T20:22:00Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-08-19T00:01:26Z",
      "updated_at": "2022-08-19T00:01:26Z"
    }
  ],
  "created_at": "2021-09-30T05:50:07Z",
  "labels": [
    "Issue-Question",
    "OS-macOS",
    "WG-Interactive-Console",
    "Resolution-Answered"
  ],
  "number": 16174,
  "state": "closed",
  "title": "Resizing Wait-Event crashes PowerShell on macOS",
  "updated_at": "2022-08-19T00:01:27Z"
}