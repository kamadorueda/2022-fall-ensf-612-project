{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13247",
  "author": "xtqqczze",
  "body": "Our [coding guidelines](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/coding-guidelines.md#naming-conventions) the naming convention is to: \"Use `PascalCase to name constant local variables and fields.\" and is common with [dotnet repository guidelines](https://github.com/dotnet/runtime/blob/master/docs/coding-guidelines/coding-style.md).\r\n\r\nOn the other hand, the style for local constants is mostly `camelCase` in existing code so we should consider the logic for this part of our coding guidelines.\r\n\r\nIn https://github.com/PowerShell/PowerShell/pull/13217#discussion_r458263009 @rjmholt made a persuasive case we should use `camelCase` instead of `PascalCase` for local constants:\r\n\r\n>My thinking is that that's only for global constants (which behave most like value macros), rather than local constant variables (which can hold references and for which `const` indicates just immutability rather than referential transparency)\r\n\r\nIf we used `camelCase` for local constants this would be a violation of [SA1303ConstFieldNamesMustBeginWithUpperCaseLetter](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1303.md) but there is an [open issue](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/issues/2082) as to whether the rule should apply to local constants as well as fields.\r\n\r\n\r\n\r\n\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> > My thinking is that that's only for global constants (which behave most like value macros), rather than local constant variables (which can hold references and for which `const` indicates just immutability rather than referential transparency)\r\n\r\nDoes it? It still doesn't work with types that can't be embedded just like global constants.  I was under the impression it was like method local functions in that it just limits scope syntactically but was more or less the same at the metadata level.",
      "created_at": "2020-07-23T12:40:54Z",
      "updated_at": "2020-07-23T12:40:54Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Looking into it, it sounds like I'm wrong and that `const` means the same thing everywhere. I personally prefer camelCase locals, but I don't want to invest any time debating it, so happy to let the conversation proceed",
      "created_at": "2020-07-23T15:19:28Z",
      "updated_at": "2020-07-23T15:19:28Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> I personally prefer camelCase locals, but I don't want to invest any time debating it, so happy to let the conversation proceed\r\n\r\nFYI I was just making sure that was known, as long as the style is consistent it doesn't matter to me much.",
      "created_at": "2020-07-23T15:57:28Z",
      "updated_at": "2020-07-23T15:57:28Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I think I also prefer camelCase locals, even if they're constant.",
      "created_at": "2020-07-23T16:14:22Z",
      "updated_at": "2020-07-23T16:14:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Our coding guidelines the naming convention is to: \"Use `PascalCase to name constant local variables and fields.\" and is common with dotnet repository guidelines.\r\n\r\nMakes no sense to change our guidelines. And we always follow .Net team code conventions. \r\n\r\n> On the other hand, the style for local constants is mostly camelCase in existing code so we should consider the logic for this part of our coding guidelines.\r\n\r\nNo, I did search in our code base - most consts are in PascalCase. Rest we should fix.",
      "created_at": "2020-07-28T16:30:37Z",
      "updated_at": "2020-07-28T16:30:37Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov the distinction being made is \"constants\" vs \"local constants\". Are we confident that most **local** constants are using PascalCase currently?",
      "created_at": "2020-07-29T02:59:05Z",
      "updated_at": "2020-07-29T02:59:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 Yes, I mean local constants.",
      "created_at": "2020-07-29T03:58:03Z",
      "updated_at": "2020-07-29T03:58:03Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "Compare `^\\s+const [^ ]+ [a-z]` with `^\\s+const [^ ]+ [A-Z]`.\r\n\r\nIt seems the majority of local constants begin with a lower case character.",
      "created_at": "2020-07-29T21:36:36Z",
      "updated_at": "2020-07-29T21:36:36Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Looks pretty even to me (remember to only look at `*.cs` and enable match case if doing it from VSCode).  *Slightly* more are lowercase.",
      "created_at": "2020-07-29T21:50:38Z",
      "updated_at": "2020-07-29T21:50:38Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I guess we should take a vote then? \ud83d\ude1b ",
      "created_at": "2020-07-29T21:57:58Z",
      "updated_at": "2020-07-29T21:57:58Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "I think we should follow the same convention as https://github.com/dotnet/runtime Perhaps a case could be made for change there?\r\n\r\nFor the time being we could follow the style of the surrounding code. In this case we should disable the `SA1303ConstFieldNamesMustBeginWithUpperCaseLetter` StyleCop rule.\n\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/9141961?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/dotnet/runtime\">dotnet/runtime</a></strong></div><div>.NET is a cross-platform runtime for cloud, mobile, desktop, and IoT apps. - dotnet/runtime</div></blockquote>",
      "created_at": "2020-07-29T22:24:52Z",
      "updated_at": "2020-07-29T22:24:54Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Thinking on my preference, I think it's because I rely on variable names to see their scope/lifetime.\r\n\r\nHere's my current heuristic:\r\n\r\n- `camelCase`: local\r\n- `_startsWithUnderscore`: private field\r\n- `s_startsWithSUnderscore`: private static field\r\n- `t_startsWithTUnderscore`: private thread-static field\r\n- `PascalCase`: property or constant (something that's either public, or would be safe to be public)\r\n\r\nNaturally naming schemes like this are unpopular thanks to things like Hungarian notation polluting C[++] variable names everywhere, but:\r\n\r\n- This is relatively lightweight compared to `lpszNameOfThing` and is mostly already a convention we follow\r\n- We also have a policy of obvious variable type declaration (i.e. no `var` when the RHS isn't explicit about the type)\r\n- Many of us do a lot of code review on GitHub, which isn't an IDE and doesn't have `Go to Definition`\r\n\r\nWhether a local variable/value is constant or not is something the compiler can check and tends not to be too material to how a method is implemented. But whether something is local vs a property is a very important distinction, and one the compiler can't check for errors in.",
      "created_at": "2020-07-29T22:58:02Z",
      "updated_at": "2020-07-29T22:58:51Z"
    }
  ],
  "created_at": "2020-07-23T12:07:17Z",
  "labels": [
    "Issue-Code Cleanup"
  ],
  "number": 13247,
  "state": "open",
  "title": "Naming convention for local constants",
  "updated_at": "2020-07-29T22:58:51Z"
}