{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1998",
  "author": "Jaykul",
  "body": "For example: `Set-ExecutionPolicy`.  This command should simply _not exist_ on Linux.  Rather than throwing `RuntimeErrorException` _**terminating** errors_, I would prefer to get a command-not found, because that's something I can test for _ahead of time_.\n\nYears of developing for moving targets on the web has taught us that the right way to avoid features that don't exist is to **test for the feature**, and _not_ for the underlying OS, Architecture, or software version, because you never know when someone's going to finally figure out how to implement something.\n\nIf non-functioning commands are not **hidden**, there is no easy, fast way for scripts to test for whether commands will work -- you have to run them and catch the exception. However, many scripters will _instead_ write incorrect conditional code _based on the PSEdition_ (or operating system sniffing, but currently that's not even in `$PSVersionTable` #1997)  which will prevent them from using the feature in the case where it's added later on.\n\nIn general, when a (core) module exposes a command (functioning or not), it's more difficult for _another_ module to provide an implementation -- I know we can't anyway in this particular example, but that's the problem with picking examples ;-)\n## Suggestion: This should be exposed in the manifest.\n\nI would like an easy way to identify commands that should be exported _based on **PSEdition**, **PSVersion**, **OS**, or **Architecture**_ from the module manifest.\n\nI don't want to have to wrap binary modules in script modules to put conditional Export-ModuleManifest statements in ... especially since putting the _right_ values in the manifest for exported cmdlets is vital to discoverability.\n\nOne thought is to allow specific module manifests for platforms, like `MyModule.Core-Linux.psd1` or something -- this would provide solutions to other design problems as well (like loading the right binary assemblies).\n",
  "closed_at": "2019-10-15T19:14:25Z",
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "The plan is to allow the variables $IsLinux and $IsWindows so you can use something like:\n\n``` PowerShell\nCmdletsToExport = \"Get-Process\",$(if ($IsWindows) { \"Set-ExecutionPolicy\" })\n```\n",
      "created_at": "2016-08-21T21:52:22Z",
      "updated_at": "2016-08-21T21:52:22Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "Although I agree this needs to be in the Module Manifest I think that we need to have this information in the Cmdlet (or Function) as an additional property that we can define perhaps like so\n\n``` powershell\n[CmdletBinding(SupportedOsVersions='Windows','Linux','MacOS')]\n```\n\n(not sure would need MacOS but best to put it in there)\n\nI believe that would be a breaking change but would allow for CI systems to dynamically build the *ToExport lists like @lzybkr has suggested for in the Manifest\n",
      "created_at": "2016-08-22T21:18:58Z",
      "updated_at": "2016-08-22T21:18:58Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "It would be convenient to be able to do it with an attribute, but **unless** putting it in the `CmdletBinding` attribute _automatically_ hides it, it should not go there at all.\n\nI'm ok with the `$IsWindows` and `$IsLinux` but can we also access `$IsCore` or `$IsARM` ?\n",
      "created_at": "2016-08-23T07:04:12Z",
      "updated_at": "2016-08-23T07:04:12Z"
    },
    {
      "author": "Se1ecto",
      "author_association": "NONE",
      "body": "Something could be done using the \"Get-CimInstance\" cmd, if it works on Linux, of course.\nGitHub noob contributor here.\n",
      "created_at": "2016-08-23T19:56:28Z",
      "updated_at": "2016-08-23T19:57:40Z"
    },
    {
      "author": "masaeedu",
      "author_association": "NONE",
      "body": "@lzybkr Would this help us with intellisense when e.g. developing scripts for Linux from an instance of VSCode running on Windows?\n",
      "created_at": "2016-08-25T19:27:34Z",
      "updated_at": "2016-08-25T19:27:34Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "We need to spend more time thinking through the solution (perhaps a RFC), moving to 6.1.0",
      "created_at": "2017-08-31T23:07:07Z",
      "updated_at": "2017-08-31T23:07:07Z"
    },
    {
      "author": "mi-hol",
      "author_association": "NONE",
      "body": "@SteveL-MSFT did the thinking bear fruit that could be shared here?",
      "created_at": "2018-02-17T13:12:21Z",
      "updated_at": "2018-02-17T13:12:55Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mi-hol no investigation for this has happened yet",
      "created_at": "2018-02-21T00:23:57Z",
      "updated_at": "2018-02-21T00:23:57Z"
    },
    {
      "author": "bcdady",
      "author_association": "NONE",
      "body": "I am running PowerShell Core 6.1.1 on MacOS, and encountered these symptoms again. I found this issue via [#7573](https://github.com/PowerShell/PowerShell/issues/7573).\r\nI run Get-ExecutionPolicy in $PROFILE Script, which works fine, but then I instinctively want to go run Set-ExecutionPolicy, which doesn't work.\r\n\r\nI could add more specific issues to running Set-ExecutionPolicy in PS Core on MacOS, but for this Issue, I think this is sufficient.",
      "created_at": "2018-12-13T01:18:25Z",
      "updated_at": "2018-12-13T01:18:25Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Module manifest already supports conditional exporting https://docs.microsoft.com/en-us/powershell/gallery/concepts/module-psedition-support\r\n\r\nAs for the ExecutionPolicy cmdlets themselves, I don't recall exactly why we left them since we explicitly removed others.  Let's have Committee review.",
      "created_at": "2019-01-09T03:10:49Z",
      "updated_at": "2019-01-09T03:10:49Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, since we want to retain `Get-ExecutionPolicy` for compatibility reasons (and should return `Bypass` which is more accurate on non-Windows).  It would make sense to keep `Set-ExecutionPolicy` and only allow setting `Unrestricted` or `Bypass`, other values should continue to return the `Operation not supported on this platform` error.  `pwsh -executionpolicy` should also follow this.",
      "created_at": "2019-01-09T23:29:40Z",
      "updated_at": "2019-01-09T23:29:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems we hide/remove all that don't work on Unix-s. Can we close the issue?",
      "created_at": "2019-09-29T07:03:37Z",
      "updated_at": "2019-09-29T07:03:37Z"
    }
  ],
  "created_at": "2016-08-21T19:05:51Z",
  "labels": [
    "WG-Engine",
    "Resolution-Fixed",
    "Committee-Reviewed"
  ],
  "number": 1998,
  "state": "closed",
  "title": "PowerShell needs a way to hide commands which won't work",
  "updated_at": "2019-10-15T19:14:44Z"
}