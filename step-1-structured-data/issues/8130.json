{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8130",
  "author": "a-tinsmith",
  "body": "Steps to reproduce\r\n------------------\r\n1. Set `$env:PAGER` to a program with spaces in the path. For example:\r\n```powershell\r\n> $env:PAGER = \"C:\\Program Files\\Git\\usr\\bin\\less.exe\"\r\n```\r\n2. Invoke `help` function:\r\n```powershell\r\n> help gcm\r\n```\r\nExpected behavior\r\n-----------------\r\nNew pager program is used to display help contents.\r\n\r\nActual behavior\r\n---------------\r\nThe help contents cannot be displayed:\r\n```none\r\n& : The term 'C:\\Program' is not recognized as the name of a cmdlet, function, script file, or operable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\nAt line:76 char:23\r\n+             $help | & $moreCommand $moreArgs\r\n+                       ~~~~~~~~~~~~\r\n+ CategoryInfo          : ObjectNotFound: (C:\\Program:String) [], CommandNotFoundException\r\n+ FullyQualifiedErrorId : CommandNotFoundException\r\n```\r\n\r\nNotice how `help` command handles `$env:PAGER`:\r\n```powershell\r\n> (gcm help).ScriptBlock\r\n...\r\n    else\r\n    {\r\n        # Respect PAGER, use more on Windows, and use less on Linux\r\n        $moreCommand,$moreArgs = $env:PAGER -split '\\s+'\r\n        if ($moreCommand) {\r\n            $help | & $moreCommand $moreArgs\r\n        } elseif ($IsWindows) {\r\n            $help | more.com\r\n        } else {\r\n            $help | less\r\n        }\r\n    }\r\n```\r\nThe contents of the variable is split with `\\s+` pattern, which ignores any quotes or escape characters.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0\r\nOS                             Microsoft Windows 10.0.17134\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2019-01-17T03:32:42Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It will be simple fix here https://github.com/SteveL-MSFT/PowerShell/blob/3b078bd188e59d2519464d255c140320b39e1c8e/src/System.Management.Automation/engine/InitialSessionState.cs#L4767",
      "created_at": "2018-10-26T18:34:11Z",
      "updated_at": "2018-10-26T18:34:11Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for pinpointing the source-code location, @iSazonov \r\n\r\nWhile the fix is technically not difficult, we need to get clarity on the specific formats we want to support:\r\n\r\n* Executable-path-only: Allow `$env:PAGER = \"C:\\Program Files\\Git\\usr\\bin\\less.exe\"`, without requiring _embedded_ quoting, by employing heuristics?\r\n  * If the value has embedded spaces but no embedded quoting check to see if it happens to refer to an existing executable path only (as opposed to an executable + arguments) and accept it as such?\r\n\r\n* Executable-path-plus-arguments: What embedded quoting styles do we support?  Both single- and double-quoting?\r\n\r\n   * `$env:PAGER = '\"C:\\Program Files\\Git\\usr\\bin\\less.exe\" -w'`  # embedded \"`...\"` quoting\r\n   * `$env:PAGER = '''C:\\Program Files\\Git\\usr\\bin\\less.exe'' -w'`  # embedded `'...'` quoting",
      "created_at": "2018-10-27T17:44:09Z",
      "updated_at": "2018-10-27T17:44:09Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The simplest thing here is to add a `$env:PAGER_ARGS`, but would be a breaking change.",
      "created_at": "2018-10-28T16:01:55Z",
      "updated_at": "2018-10-28T16:01:55Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Hmmmm. Something simpler? A delimiter between pager and args perhaps?\n\n```powershell\n$env:PAGER = 'C:\\Program Files\\Git\\usr\\bin\\less.exe;-w'\n```\nDocumentation necessary, of course.",
      "created_at": "2018-10-28T16:26:08Z",
      "updated_at": "2018-10-28T16:26:08Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@vexx32 a creative solution, but that would be setting a precedent introducing a new syntax and also less discoverable.  Alternative is require quotes in the value to differentiate executable path with whitespace and parameters which is consistent with the command line.  Since this is an advanced use case, perhaps documenting that is sufficient.  So it would look like:\r\n\r\n```powershell\r\n$env:PAGER = '\"C:\\Program Files\\Git\\usr\\bin\\less\" -w'\r\n```\r\n",
      "created_at": "2018-10-28T17:31:17Z",
      "updated_at": "2018-10-28T17:31:17Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yep, not a bad solution overall, I think.",
      "created_at": "2018-10-28T17:33:04Z",
      "updated_at": "2018-10-28T17:33:04Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I suspect the set of folks using $env:PAGER is pretty small (I'm one of them) and the set of folks using $env:PAGER with arguments is very small (I'm not one of them).  So $env:PAGER_ARGS wouldn't be horrible considering that I think this is an interactive use feature (and not used in scripts).  That said, requiring exe paths with spaces to be quoted would be fine also.",
      "created_at": "2018-10-28T18:57:16Z",
      "updated_at": "2018-10-28T18:57:16Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "`$env:PAGER` is primarily used on Unix-like platforms, and at least on macOS:\r\n\r\n* _both_ kinds of _embedded_ quoting (`\"...\"` and `'...'`) _are_ properly recognized by `man`\r\n\r\n* embedded quoting is _required_ in order for executable paths with embedded spaces to be recognized.\r\n\r\nTherefore, I suggest:\r\n\r\n* we also support both styles of embedded quoting.\r\n\r\n* but, as a nod to Windows users - where paths with spaces are more likely - allow _fallback_ to interpreting a value without embedded quoting _in full_ as the binary path, so that users who don't have passing arguments on their mind (which is rare, as @rkeithhill  points out) can just specify the full executable path as-is, without having to worry about _embedded_ quoting.\r\n\r\nIn short: I suggest we apply `sh`-style command-line parsing -  to the value of `$env:PAGER` and  fall back to interpreting a whitespace-containing value _as a whole_ as the binary path.\r\n\r\n_Caveat_: `man` on macOS even recognizes _environment-variable references_ such as `$HOME` in `$env:PAGER` (unless `'...'` is used for embedded quoting).  \r\nI'm not sure we need to go this far in our implementation, however.\r\n",
      "created_at": "2018-10-28T19:41:50Z",
      "updated_at": "2018-10-28T19:42:15Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "It seems we don't need to over-engineer this for a small subset of a small subset of users.  Based on what @mklement0 is saying, it seems at least `man` has set some precedent and we should go with the embedded quoting route since some users could be using that today.  I would probably just go with a simple regex matching for this.",
      "created_at": "2018-10-28T22:58:01Z",
      "updated_at": "2018-10-28T22:58:01Z"
    },
    {
      "author": "a-tinsmith",
      "author_association": "NONE",
      "body": "I believe that following `man` behaviour is the most sensible thing to do. I would assume that users who set `PAGER` variable expect it to behave as with `man`, so there is no surprises for them.",
      "created_at": "2018-10-29T00:40:38Z",
      "updated_at": "2018-10-29T00:40:38Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Here's my suggestion for a pragmatic solution (to replace the following code: https://github.com/PowerShell/PowerShell/blob/b27380dc510fe3cc2b8dbef056d882e6086dcd20/src/System.Management.Automation/engine/InitialSessionState.cs#L4238-L4245):\r\n\r\n**Important**: In order to embed the code below in the verbatim string in the C# code, all `\"` instances must be doubled.\r\n\r\n```powershell\r\n$customPagerCommand = $null\r\nif ($customPagerCommandLine = $env:PAGER) {\r\n\r\n  # Sanitize the command line to prevent injection attacks.\r\n  # Note: This sanitization is overeager in that it also escapes metacharacters\r\n  #       inside embedded single-quoted tokens, but I doubt that that's a real-world\r\n  #       concern.\r\n  # Effectively, ignore anything other than simple [environment-]variable references.\r\n  # Note:\r\n  #       If the command needs to target environment variables, the PS-specific\r\n  #       syntax - .e.g, $env:USER - then makes the command PS-specific on \r\n  #       Unix-like platforms.\r\n  #       $HOME is the only variable that would work without $env: in PS too.\r\n  #       Conceivably, we could interpret $var as $env:var by default, but\r\n  #       I'm not sure that's worth the effort, and might cause confusion.\r\n  $customPagerCommandLineSanitized = $customPagerCommandLine -replace '[(),{};@<>|]', '`$&'\r\n  \r\n  # Split the command line into tokens, respecting quoting.\r\n  # Thanks to sanitizing, use of InvokeExpression should be safe here.\r\n  $customPagerCommand, $customPagerArgs = Invoke-Expression \"Write-Output -- $customPagerCommandLineSanitized\"\r\n  \r\n  # See if the first token refers to a known command (executable), \r\n  # and if not, see if the command line as a whole is an executable path.\r\n  $cmds = Get-Command $customPagerCommand, $customPagerCommandLine -ErrorAction Ignore\r\n  if (-not $cmds) {\r\n    # Custom command is invalid; ignore it, but issue a warning.\r\n    Write-Warning \"Ignoring invalid custom-paging utility command line specified in `$env:PAGER: $customPagerCommandLine\"\r\n    $customPagerCommand = $null # use default command\r\n  }\r\n  elseif ($cmds.Count -eq 1 -and $cmds[0].Source -eq $customPagerCommandLine) {\r\n    # The full command line is an unquoted path to an existing executable\r\n    # with embedded spaces.\r\n    $customPagerCommand = $customPagerCommandLine\r\n    $customPagerArgs = $null\r\n  }\r\n}\r\n\r\nif ($customPagerCommand) {\r\n  $help | & $customPagerCommand $customPagerArgs\r\n}\r\nelseif ($IsWindows) {\r\n  $help | more.com\r\n}\r\nelse {\r\n  $help | less -Ps\"Page %db?B of %D:.\\. Press h for help or q to quit\\.$\"\r\n}\r\n```\r\n\r\nSee the code comments for tradeoffs.\r\n\r\nNote that, as an additional courtesy, an invalid command triggers a warning and fallback to the default behavior.\r\n\r\nThe above should handle strings such as the following (showing embedded quoting only), with or without arguments:\r\n\r\n```powershell\r\n/usr/bin/less\r\nless -r\r\n'less' -r\r\n\"less\" -r\r\nless -Ps\"Page %db?B of %D:.\\. Press h for help or q to quit\\.$\"\r\n\"C:\\Program Files\\Git\\usr\\bin\\less.exe\"\r\nC:\\Program Files\\Git\\usr\\bin\\less.exe    # as a courtesy, recognize a file path (only) with embedded spaces)\r\n```\r\n\r\n\r\n",
      "created_at": "2018-10-29T16:48:38Z",
      "updated_at": "2018-10-30T03:18:52Z"
    },
    {
      "author": "pougetat",
      "author_association": "NONE",
      "body": "Hello,\r\nCan I work on this :) ?",
      "created_at": "2018-12-31T14:20:30Z",
      "updated_at": "2018-12-31T14:20:30Z"
    }
  ],
  "created_at": "2018-10-26T10:33:58Z",
  "number": 8130,
  "state": "closed",
  "title": "The 'help' function cannot use a program specified in the '$env:PAGER' if its path contains spaces",
  "updated_at": "2019-01-17T03:32:42Z"
}