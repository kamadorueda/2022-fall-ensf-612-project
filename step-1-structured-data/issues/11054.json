{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11054",
  "author": "mklement0",
  "body": "# Summary of the new feature/enhancement\r\n\r\nSymlinks (symbolic links) are a staple of the Unix world and are becoming increasingly common on Windows too.\r\n\r\nFor scripts invoked via symlinks, the \"reflective\" variables that contain the running script's location (directory, `$PSScriptRoot`) and `$PSCommandPath` currently reflect only the _link_'s information, not (also) the underlying file's information.\r\n\r\n(Reporting the _link_'s information is consistent with the behavior of POSIX-like shells such as Bash, via `$0` and `$BASH_SOURCE`).\r\n\r\nWhile you can _manually_ investigate the paths contained in these variables to find the true script location and file name, it would be nice to have this information _automatically_ available.\r\n\r\nAs an aside: Even manual investigation is currently nontrivial - see #10640\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nOne option that doesn't require introducing _new_ automatic variables (which is always problematic) is to add a `NoteProperty` member name, say, `.Target` to the `$PSScriptRoot` and `$PSCommandPath` variables that reflects the underlying script file's true directory and full filename, respectively.\r\n\r\nThat way, you could use `$PSCommandPath.Target` to get the running script's true full path, for instance.\r\n\r\nWhile somewhat obscure, this follows the pattern of the `NoteProperty` members the `$PROFILE` automatic variable is decorated with, which reflect the paths of the various profile types and scopes.\r\n\r\n_Documenting_ these non-obvious properties clearly should be sufficient, however.\r\n\r\n\r\n",
  "closed_at": "2019-11-14T14:55:51Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Can Resolve-Path help in the scenario?\r\n\r\nIt seems there is no single place where we set value to an automatic variable. So it is not easy to add a property.\r\n\r\nAlso we could change type of the variable from string to FileInfo but it looks as a breaking change.",
      "created_at": "2019-11-14T12:27:53Z",
      "updated_at": "2019-11-14T12:27:53Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> Can Resolve-Path help in the scenario?\r\n\r\nNo, but the yet-to-be-implemented `Convert-Path -Canonical` would help - see #10640\r\n\r\n> It seems there is no single place where we set value to an automatic variable.\r\n\r\nI haven't looked, but are you saying that these specific automatic variables are filled in different places based on whether the code unit is a script or a module?\r\n\r\n> Also we could change type of the variable from string to FileInfo but it looks as a breaking change.\r\n\r\nWhile that would be nice, I fear it is too problematic a change.\r\n",
      "created_at": "2019-11-14T14:34:56Z",
      "updated_at": "2019-11-14T14:34:56Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Actually, the more I think about this: I think just using `Convert-Path -Canonical` on demand should be enough for this use case, so I'll close this issue.\r\n",
      "created_at": "2019-11-14T14:55:51Z",
      "updated_at": "2019-11-14T14:55:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> are you saying that these specific automatic variables are filled in different places based on whether the code unit is a script or a module?\r\n\r\nI mean that we haven't methods like SetPSCommandPathVariable() and SetPSScriptRootVariable(). (It is true for all automatic variables). We use one universal method SetAutomaticVariable().\r\n\r\nReally we set these variables in 2 places - for module and for script block.",
      "created_at": "2019-11-14T15:23:10Z",
      "updated_at": "2019-11-14T15:23:10Z"
    }
  ],
  "created_at": "2019-11-12T22:39:19Z",
  "number": 11054,
  "state": "closed",
  "title": "Make $PSScriptRoot and $PSCommandPath also reflect the true filesystem locations for scripts invoked via symlinks",
  "updated_at": "2019-11-14T15:23:19Z"
}