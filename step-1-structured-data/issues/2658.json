{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2658",
  "author": "Liturgist",
  "body": "It seems odd that applying the logical not operator does not work when used outside of a ScriptBlock.\r\n\r\nGet-ChildItem | Where-Object PSIsContainer # works\r\nGet-ChildItem | Where-Object !PSIsContainer # fails silently\r\nGet-ChildItem | Where-Object {$_.PSIsContainer} # works\r\nGet-ChildItem | Where-Object {!$_.PSIsContainer} # works\r\n\r\nWindows 10, GitCommitId v6.0.0-alpha.12\r\nUbuntu 16.04, GitCommitId v6.0.0-alpha.12\r\n\r\nI would label this as Area-Language, but it appears that I cannot set a label.",
  "closed_at": "2017-01-12T00:35:22Z",
  "comments": [
    {
      "author": "RichardSiddaway",
      "author_association": "NONE",
      "body": "same on PowerShell 5.1\nif I remember correctly that structure has always failed\n\n2 options with where-object\noriginal is to use the filter block {}\n\nsecond is \nproperty operator value \nwithout the {}\n\nYou'd need to do something like\nGet-ChildItem | where PSisContainer -ne $true\nin that case\n",
      "created_at": "2016-11-10T16:51:39Z",
      "updated_at": "2016-11-10T16:51:39Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "Thank you for the workaround Richard.\n\nUsing -ne or -eq is reasonable. However, failing silently seems less reasonable. If it is going to fail, shouldn't it fail?\n",
      "created_at": "2016-11-10T16:57:04Z",
      "updated_at": "2016-11-10T16:57:04Z"
    },
    {
      "author": "RichardSiddaway",
      "author_association": "NONE",
      "body": "It didn't fail.\n\nGet-ChildItem | Where-Object <filter>\n\nwill show you everything that passes the filter. In your case nothing passed the filter so you just get the prompt back\n\nThis is the full syntax\nGet-ChildItem | Where-Object -Property PSIsContainer -ne -Value $true\n\nWhen you do \n Get-ChildItem | Where-Object -Property PSIsContainer\n\nyou have an implicit map to \nGet-ChildItem | Where-Object -Property PSIsContainer -eq -Value $true\n\nbut \nGet-ChildItem | Where-Object -Property !PSIsContainer\n\ndoesn't map so your filter passes nothing and you get nothing returned\n\nThe one are where the <property> <operator> <value> breaks down is when you want to get a negative\n\nFor directories & files you're better off using Get-ChildItem's parameters\nGet-ChildItem -Directory\nGet-ChildItem -File\n",
      "created_at": "2016-11-10T17:09:53Z",
      "updated_at": "2016-11-10T17:09:53Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "This is an unfortunate design choice for `Where-Object`.\n\nThe simplified `Where-Object` relies on the command syntax instead of the expression syntax to gather the property name because the command line arguments are parsed in command mode.\n\nThe `!` character is not an operator in command mode, e.g. if you wanted to create or read a file with `!` in the name, you'd expect to write something like: `Get-Context !file.txt`.\n\nIt might make sense to add a `-Not` parameter to `Where-Object`, but I'm not sure it's an improvement over `... | Where-Object { !$_.PSIsContainer }`\n",
      "created_at": "2016-11-11T19:19:46Z",
      "updated_at": "2016-11-11T19:19:46Z"
    }
  ],
  "created_at": "2016-11-10T16:36:10Z",
  "labels": [
    "Issue-Question",
    "Resolution-By Design"
  ],
  "number": 2658,
  "state": "closed",
  "title": "Logical not operator not working on Where-Object",
  "updated_at": "2017-01-12T00:40:24Z"
}