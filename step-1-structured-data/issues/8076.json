{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8076",
  "author": "KevinMarquette",
  "body": "Test-Path will throw an error when the path is `$null` (or an empty string) instead of returning `$false`.\r\n\r\nThe errors that we do get are parameter binding errors\r\n\r\nI find myself often running into errors with `Test-Path` because of empty or `$null` strings. Then I end up making my validation more complex to account for it.\r\n\r\n```\r\nif ( Test-Path -Path $Path)\r\n{\r\n    # do something\r\n}\r\n\r\n# VS\r\n\r\nif ( $null -ne $Path -and ( Test-Path -Path $Path) )\r\n{\r\n    # do something\r\n}\r\n```\r\nIt would be nice if it would just return `$false` (or offer a `-Quiet` parameter)\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n$path = Resolve-Path -Path '.\\*\\nothing'\r\nTest-Path $path\r\n```\r\n```powershell\r\nResolve-Path -Path '.\\*\\nothing' | Test-Path\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nFalse\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nError: Test-Path : Cannot bind argument to parameter 'Path' because it is null.\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\n> $PSVersionTable\r\nPSVersion                      6.1.0\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0\r\nOS                             Microsoft Windows 10.0.16299\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2018-11-21T05:08:32Z",
  "comments": [
    {
      "author": "dachshund-digital",
      "author_association": "NONE",
      "body": "Over 2 years and this has not bee addressed?  Really?",
      "created_at": "2020-10-26T02:05:05Z",
      "updated_at": "2020-10-26T02:05:05Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "The team's choice was that `$null` is considered entirely unusable and they preferred that case should error.\r\n\r\nPersonally I think it should return $false, but that's what they decided.",
      "created_at": "2020-10-26T02:28:19Z",
      "updated_at": "2020-10-26T02:28:19Z"
    },
    {
      "author": "pabrams",
      "author_association": "NONE",
      "body": "I'm pretty sure it _does_ return false?  It only stops execution if you have a non-default `$ErrorActionPreference`, like 'Stop'.  This is a non-terminating error.",
      "created_at": "2021-05-19T20:48:05Z",
      "updated_at": "2021-05-19T20:48:05Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "No, it doesn't return anything.\r\n\r\nPowerShell will however treat the 'nothing' value as \"false\" if you use it in a context that will coerce the missing value to a boolean, like an `if` statement.",
      "created_at": "2021-05-19T20:55:08Z",
      "updated_at": "2021-05-19T20:55:08Z"
    },
    {
      "author": "pabrams",
      "author_association": "NONE",
      "body": "I'm having a hard time imagining the practical value of treating nulls (or, really, empty strings was what I was thinking of) as erroneous inputs of `Test-Path`, other than catching some user errors?  I think by most definitions, that path doesn't 'exist', and so test-path should return false, not fail...  \r\nAnd anyway, other cmdlets seem to interpret `$null` in other ways (maybe $null isn't what you're talking about):\r\n![image](https://user-images.githubusercontent.com/1376688/118890668-167c8d80-b8cd-11eb-9548-7da300db60e3.png)\r\n",
      "created_at": "2021-05-19T21:56:34Z",
      "updated_at": "2021-05-19T22:19:20Z"
    },
    {
      "author": "p00j4",
      "author_association": "NONE",
      "body": "Upvoting the fix for this. \r\nI also have a need to use `Test-Path` on a computed path at runtime and at times it comes as `null` and hence it failed in the main pipeline with error  Cannot bind argument to parameter 'Path' because it is null. And now i'm forced to add one more check for \"null\". \r\n![image](https://user-images.githubusercontent.com/6470509/162166821-ea094fc8-f7e1-417a-a1cc-a05763ed49d5.png)\r\n\r\n\r\n`PSVersion                      5.1.22580.1000`",
      "created_at": "2022-04-07T09:24:53Z",
      "updated_at": "2022-04-07T09:24:53Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@p00j4 this case is easier to handle in current versions of PS, but no fixes are being backported to 5.1 other than absolutely critical vulnerabilities at this stage. 5.1 is no longer being actively maintained. I'd suggest you install one of the newer versions and use that \ud83d\ude42 ",
      "created_at": "2022-04-07T12:23:20Z",
      "updated_at": "2022-04-07T12:23:20Z"
    }
  ],
  "created_at": "2018-10-18T23:50:26Z",
  "labels": [
    "Issue-Enhancement",
    "Resolution-Fixed",
    "WG-Cmdlets-Management"
  ],
  "number": 8076,
  "state": "closed",
  "title": "Test-Path -Path $null should return $false",
  "updated_at": "2022-04-07T12:23:20Z"
}