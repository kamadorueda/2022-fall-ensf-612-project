{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14409",
  "author": "xtqqczze",
  "body": "It would be great if there was instructions on how to update to a later .NET SDK for the repository.\r\n\r\nSpecifically, there is a script `tools\\UpdateDotnetRuntime.ps1` that has no documentation.",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I wonder why do need this? It seems it is exclusively maintainer's headache :-)\r\nCurrent intention is to update to new .Net preview versions as fast as possible to resolve all issues early.\r\n\r\n/cc @adityapatwardhan ",
      "created_at": "2020-12-15T13:16:36Z",
      "updated_at": "2020-12-15T13:16:36Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@xtqqczze For local purposes, you can just edit the .NET SDK version in [global.json](https://github.com/PowerShell/PowerShell/blob/master/global.json) to one that you have already installed. For exampe, right now you could update it from `5.0.100` to `5.0.102` if you've got the latest patch installed and it will work fine, the only thing that you might have to do is re-import the [build.psm1](https://github.com/PowerShell/PowerShell/blob/master/build.psm1) module. If you also wanted to use the `Start-PSBootStrap` function of the `build.psm1` module for convenience or to make sure that CI runs with that different version as well, then you'd also update the [DotnetRuntimeMetadata.json](https://github.com/PowerShell/PowerShell/blob/master/DotnetRuntimeMetadata.json) file as well.\r\nAnd that's about it for most cases. If for example, you wanted to update to a new major version of .NET, then some of the .NET NuGet packages that are not part of the SDK need to be updated as well, most of them start with `System.*` and you can find the references in the csproj files and do a bulk update with search replace or use Visual Studio's NuGet manager for that. Similarly, when using nightly versions of the .NET SDK, those NuGet packages need updating and the `tools/UpdateDotnetRuntime.ps1` takes away some of that manual pain. Also, if you wanted to have a green CI build, you'd also need to update the [files.wxs](https://github.com/PowerShell/PowerShell/blob/master/assets/files.wxs) for the Windows installer as the package versions are hard-coded in there. When building the MSI locally, you will actually be presented with automatic tooling that spits out the new files.wxs file that you can then replace and check in, how to build the MSI is documented [here](https://github.com/PowerShell/PowerShell/blob/b7cabd4063233176dbd3d38cd60a1e6e8cdd652c/docs/maintainers/releasing.md#build-and-packaging-examples), just be aware that you need to do that on a Windows box and have the [WiX ToolSet](https://wixtoolset.org/releases/) installed, but the commands would give you pointers to the required tooling anyway in case you miss something. If you use the Visual Studio Code devcontainer feature, then you'd also update the SDK in the Dockerfile [here](https://github.com/PowerShell/PowerShell/blob/master/.devcontainer/Dockerfile#L6). To show you an example, in [this](https://github.com/PowerShell/PowerShell/compare/master...bergmeister:Dotnet_SDK_5.0.102?expand=1) branch, I've updated the SDK from 5.0.100 to 5.1.102 and update NuGet packages, which worked fine for the whole Linux CI build but somehow not for the Mac build, which is one of the joys of the maintainers to figure out some of those failures or report them higher up...\r\nDoes that help or are there specific questions?",
      "created_at": "2021-01-16T22:13:15Z",
      "updated_at": "2021-01-16T23:19:56Z"
    }
  ],
  "created_at": "2020-12-13T23:21:30Z",
  "number": 14409,
  "state": "open",
  "title": "Instructions to update .NET SDK",
  "updated_at": "2021-01-16T23:19:56Z"
}