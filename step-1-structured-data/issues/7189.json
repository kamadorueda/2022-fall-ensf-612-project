{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7189",
  "author": "bergmeister",
  "body": "Now that PR 5051 has implemented issue 2188 (`cd -` support), we are ready to start thinking about adding `cd +` support, i.e. not only can one go back in the location history, one should also be able to go forward as well. The behaviour should behave as in the following example and support a similar history range like the `cd -` operation, which can go back the last 20 history locations\r\n\r\n```powershell\r\nC:\\foo> cd C:\\bar\r\nC:\\bar> cd -\r\nC:\\foo> cd +\r\nC:\\bar\r\n```\r\n\r\nCurrently a stack is used for the location history of `cd -`, this will need to be changed/adapted to allow for this new scenario, it could possibly be something similar to a  circular buffer.\r\n\r\nTo be clear, this issue is just to discuss and track this feature as I don't have time to implement it now (but might come back to it in the future), so anyone can pick it up.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.721\r\nPSEdition                      Core\r\nGitCommitId                    v6.1.0-preview.721\r\nOS                             Microsoft Windows 10.0.17134\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2018-09-19T07:50:30Z",
  "comments": [
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "While you are at it, please consider adding support for some syntax to display the current stack.  This is what we do in PSCX.  Maybe use `cd ?`  to display something like this:\r\n```\r\n06-26 15:55:12 9> cd\r\n\r\n     # Directory Stack:\r\n   --- ----------------\r\n     0 C:\\Users\\hillr\r\n     1 C:\\Windows\r\n     2 C:\\Git\r\n->   3 C:\\Users\\hillr\\GitHub\r\n     4 C:\\Bin\r\n     5 C:\\temp\r\n```",
      "created_at": "2018-06-26T21:56:26Z",
      "updated_at": "2018-06-26T21:56:26Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Also, and this is probably an aside but `Set-Location` really should be designed to not require quotes.  For instance, if I fire up CMD.exe I can do this:\r\n```\r\nC:\\Users\\hillr>cd c:\\program files\r\n\r\nc:\\Program Files>\r\n```\r\nbut in PS Core this fails:\r\n```\r\n06-26 15:56:33 1> cd c:\\program files\r\nSet-Location : A positional parameter cannot be found that accepts argument 'files'.\r\n```\r\nIn PSCX, we have a wrapper command that `cd` is aliased to called `Set-LocationEx` and it allows two nice features.  First, you don't have to quote:\r\n```\r\n06-26 15:59:29 13> cd c:\\program files\r\nC:\\program files\r\n```\r\nSecond, if the path is a file path then it will cd to the directory containing the file which is nice for:\r\n```\r\n06-26 15:59:33 14> cd $profile\r\n~\\Documents\\WindowsPowerShell\r\n```\r\nThis last feature would be a breaking change I suppose so may not be viable but I can tell you that for interactive use, it is very nice.  :-)\r\n",
      "created_at": "2018-06-26T22:01:00Z",
      "updated_at": "2018-06-26T22:01:00Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@rkeithhill You know you can do\r\n```powershell\r\n cd c:\\program` files\r\n```\r\nIt's considerably less annoying than quoting at each end.  To get rid of quotes are you suggesting parser magic? Or simply making `Set-Location` varags and concatenating the strings with a space between them? (Which will work in most cases but not all). With respect to parent directory vs leaf, in my `cd` function, I have a switch `-Parent` that lops of the leaf node of the path. It's handy.",
      "created_at": "2018-06-26T22:35:31Z",
      "updated_at": "2018-06-26T22:35:31Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Not a parser trick but a use of `ValueFromRemainingArguments` - https://github.com/Pscx/Pscx/blob/master/Src/Pscx/Modules/CD/Pscx.CD.psm1#L78  Yeah, that breaks down if there are multiple spaces between tokens but the common cases have a single space like in `Program Files`.  Perhaps there is a better way to do this with $MyInvocation?\r\n\r\nIt's just that as I have moved folks from CMD to PowerShell, they inevitably try this and when it doesn't work it's a bit of a bummer.  Not huge but if it can be solved easily (and robustly) it eliminates one source of paper cuts.  :-)",
      "created_at": "2018-06-26T22:43:59Z",
      "updated_at": "2018-06-26T22:44:26Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@rkeithhill Do you want to open a separate issue for the `cd c:\\program files` feature?",
      "created_at": "2018-06-27T00:47:39Z",
      "updated_at": "2018-06-27T00:47:39Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Yes, I can do that.",
      "created_at": "2018-06-27T00:49:03Z",
      "updated_at": "2018-06-27T00:49:03Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "`cd -`, `cd +` and `cd ?` all make great additions.\r\n\r\nSyntax-wise I'm a little concerned about edge cases:\r\n\r\nGiven that `-` and `+` are legal directory names, I'm hoping that these magic symbols bind to `-Path` only, so that `-LiteralPath` can be used to target `-` and `+` as literals. Is that how `-` is already implemented?\r\n\r\n(On a side note: `bash`, `dash`, `ksh`, and `zsh` surprisingly do _not_ support targeting a directory _literally_ named `-` - even though they could use the presence or absence of quoting to distinguish between the magic symbol and the literal.)\r\n\r\nThe same distinction won't work with `?`, because binding `?` to `-Path` takes away the ability to target a single-character directory name with a wildcard.\r\nHowever, given that `Set-Location` only works with wildcards that resolve to a _single_ container, that is even more of an edge case, so perhaps not worth worrying about.\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-06-28T15:09:44Z",
      "updated_at": "2018-06-28T15:09:44Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@mklement0 One can still use -Path and -LiteralPath for absolute and relative paths where the directory is just named `-`.\r\nFor relative paths one would need to change scripts though from `cd -` to something like `cd '.\\-'` but tab completion helps getting there automatically.",
      "created_at": "2018-06-28T18:22:42Z",
      "updated_at": "2018-06-28T18:26:28Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Ah, of course, thanks @bergmeister - for some reason I didn't think about the `./` prefix.\r\n\r\n(I doubt that tab completion will be of much help, though: if you don't know about the need to `./`-prefix, you'll likely just try `-` without attempting tab completion, and if you do know, you're likely to just type `./-` in full; attempting to tab-complete on `-` alone will not work, as it will complete _parameter names_.)\r\n",
      "created_at": "2018-06-28T19:20:08Z",
      "updated_at": "2018-06-28T19:20:08Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "Tab completion will only help if you start with `.\\-` and then tab (either with or without single or double quotes). But I think overall this special case for relative directories can be neglected IMHO, as long as it still works",
      "created_at": "2018-06-28T19:47:01Z",
      "updated_at": "2018-06-28T19:47:29Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> But I think overall this special case for relative directories can be neglected IMHO\r\n\r\nAgreed, now that we've established that it will continue to be possible to change to directories literally named `-` and `+` with relative paths (too).\r\n\r\n(Just to bring closure to this: My point was that if your intent is to target a directory named `+` and `-`, you won't use tab completion (on the last or only path component), because there's nothing to complete. _Afterthought_: But, yes, you can type `./<tab>` in order to have _all_ directories listed / cycled through, which would include the dir. of interest.)",
      "created_at": "2018-06-28T19:51:47Z",
      "updated_at": "2018-09-19T13:10:37Z"
    }
  ],
  "created_at": "2018-06-26T21:53:23Z",
  "labels": [
    "Issue-Enhancement",
    "Resolution-Fixed",
    "WG-Cmdlets-Management"
  ],
  "number": 7189,
  "state": "closed",
  "title": "Add support for 'cd +' ",
  "updated_at": "2018-09-19T13:10:37Z"
}