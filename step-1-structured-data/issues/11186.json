{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11186",
  "author": "Silver-Fang",
  "body": "I have a custom .Net DLL named PowerShellExtension:\r\n```VB\r\nPublic Module Utility\r\n\tFunction TaskAssignment(Of T)(TaskList As T(), Optional Threads As Byte = 0) As T()()\r\n\tEnd Function\r\nEnd Module\r\n```\r\nCalling this in PS will cause error:\r\n```PowerShell\r\n Add-Type -Path .\\PowerShellExtension.dll\r\n$a=1..100\r\n$b=[PowerShellExtension.Utility]::TaskAssignment($a)\r\n```\r\nMethodException: Cannot find an overload for \"TaskAssignment\" and the argument count: \"1\".\r\nI have to offer the second parameter, though it's supposed to be optional:\r\n```PowerShell\r\n $b=[PowerShellExtension.Utility]::TaskAssignment($a,8)\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "If you call `[PowerShellExtension.Utility]::TaskAssignment` on its own, what does the overload definition show?",
      "created_at": "2019-11-25T11:30:54Z",
      "updated_at": "2019-11-25T11:30:54Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Looks like it's an issue with generics specifically:\r\n\r\n```powershell\r\nAdd-Type -TypeDefinition '\r\n    public static class GenericWithOptional\r\n    {\r\n        public static int TestNonGeneric(int arg, byte optional = 0)\r\n        {\r\n            return default(int);\r\n        }\r\n\r\n        public static T TestGeneric<T>(T arg, byte optional = 0)\r\n        {\r\n            return default(T);\r\n        }\r\n    }'\r\n\r\n[GenericWithOptional]::TestGeneric(0)\r\n# MethodException: Cannot find an overload for \"TestGeneric\" and the argument count: \"1\".\r\n\r\n[GenericWithOptional]::TestNonGeneric(0)\r\n# 0\r\n```",
      "created_at": "2019-11-25T13:03:02Z",
      "updated_at": "2019-11-25T13:03:02Z"
    },
    {
      "author": "Silver-Fang",
      "author_association": "NONE",
      "body": "> Looks like it's an issue with generics specifically:\r\n> \r\n> ```powershell\r\n> Add-Type -TypeDefinition '\r\n>     public static class GenericWithOptional\r\n>     {\r\n>         public static int TestNonGeneric(int arg, byte optional = 0)\r\n>         {\r\n>             return default(int);\r\n>         }\r\n> \r\n>         public static T TestGeneric<T>(T arg, byte optional = 0)\r\n>         {\r\n>             return default(T);\r\n>         }\r\n>     }'\r\n> \r\n> [GenericWithOptional]::TestGeneric(0)\r\n> # MethodException: Cannot find an overload for \"TestGeneric\" and the argument count: \"1\".\r\n> \r\n> [GenericWithOptional]::TestNonGeneric(0)\r\n> # 0\r\n> ```\r\n\r\nThat's confusing. What's .Net generics supposed to behave in a PowerShell call?",
      "created_at": "2019-12-07T03:36:25Z",
      "updated_at": "2019-12-07T03:36:25Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@Silver-Fang Sorry, what I'm saying is that PowerShell *does* support optional parameters, there is just a bug in the invoke method binder that only occurs when the method is generic.",
      "created_at": "2019-12-07T15:46:20Z",
      "updated_at": "2019-12-07T15:46:20Z"
    }
  ],
  "created_at": "2019-11-25T07:40:57Z",
  "number": 11186,
  "state": "open",
  "title": "Can't ignore optional parameters of .Net function?",
  "updated_at": "2020-01-31T12:01:45Z"
}