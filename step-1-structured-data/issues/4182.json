{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4182",
  "author": "iSazonov",
  "body": "Related #3400\r\nContinue #3690 and #4106.\r\n\r\nExtract information about the release tag, number of commits since the tag and the hash of the latest commit within a MSBuild target, and bake that information into version properties of the assemblies appropriately.\r\n\r\n- New target `GetPSCoreVersionFromGit` depends on (BeforeTargets) Restore and Nuget steps so now we get packages with the right version.\r\n- Added generating a version without suffix (for release tag).\r\n- Now ProductVersion is the same as  AssemblyInformationalVersion",
  "closed_at": "2017-09-06T22:20:26Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Could you please review?",
      "created_at": "2017-07-14T10:11:57Z",
      "updated_at": "2017-07-14T10:11:57Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov Sure, next item on my list :)",
      "created_at": "2017-07-14T15:12:29Z",
      "updated_at": "2017-07-14T15:12:29Z"
    },
    {
      "author": "mi-hol",
      "author_association": "NONE",
      "body": "@daxian-dbw 4 weeks pass by quickly :) , hence I wonder if this PR getting any closer to the top of your list?",
      "created_at": "2017-08-18T15:29:33Z",
      "updated_at": "2017-08-18T15:29:33Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Sorry for leaving this PR unattended for such a long time ... The conflicts were resolved.\r\n\r\nThe changes in `PowerShell.Common.props` is pretty clean and well organized. The comments are good and very helpful -- some minor touch-ups can be made but we can do that when we finalize the changes. I have a few concerns here about the change:\r\n1. We need to be able to produce a release build without actually pushing the release tag. For example, we need to build for `v6.0.0-beta.6` without pushing the git tag `v6.0.0-beta.6`. This is needed because pushing a release tag should be the last step for a release so that any issues we discovered during the preparation of the release can still be fixed before having the release tag pushed. Currently, this is achieved by passing `-ReleaseTag` to `Start-PSBuild` and `Start-PSPackage`. Take `Start-PSBuild` for an instance, when `-ReleaseTag` is specified, it will use that as the release tag instead of turning to `git describe`. Is it possible to continue allowing this with the `GetPSCoreVersionFromGit` target? (maybe by passing the to-be-used tag name to a property and in case that property is not empty, use that instead of running `git describe`)\r\n\r\n1. The target `GetPSCoreVersionFromGit` seems to be executed for multiple times (once per `csproj`). Can we make it run only once?\r\n\r\n1. When the target runs `git`, the output shows on console (see the screenshot below). Is it possible to suppress it while still capturing the output in `Exec` tasks?\r\n\r\n![image](https://user-images.githubusercontent.com/127450/29479607-18df85e2-8428-11e7-9f68-f3d9ceda722e.png)\r\n",
      "created_at": "2017-08-18T22:18:45Z",
      "updated_at": "2017-08-18T22:18:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "\r\n1. I believe we can fix this. We can call MSBuild with explicit tag value and don't re-evaluate it in the target by condition.\r\n2. I guess it is \"by design\" - MSBuild create new context for every csproj and re-run targets. I'll be happy if I'm wrong. (We can use this as an advantage if we'll want to assign the dll versions more precisely and independently.)\r\n3. The same. It seems MSBuild can catch output external program only from console. Currently I don't know how suppress the noise.",
      "created_at": "2017-08-19T21:32:14Z",
      "updated_at": "2017-08-19T21:32:14Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The changes to `build.psm1` and `PowerShell.Common.props` are mostly good. I asked @TravisEz13 to review the changes in AppVeyor.psm1 as he is more experienced in the full build.\r\n\r\nI did find that the full build run in CI doesn't generate the powershell packages (msi, nupkg and zip) like our daily build (look in the `artifacts` tab). I don't know how to check the individual assembly nuget packages.",
      "created_at": "2017-08-31T22:19:45Z",
      "updated_at": "2017-08-31T22:19:45Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Packaging is broken:  See the very end of https://ci.appveyor.com/project/PowerShell/powershell/build/6.0.0-beta.6-4928#L9098\r\n\r\n```\r\nVERBOSE: Zipping C:\\projects\\powershell\\src\\powershell-win-core\\bin\\Release\\netcoreapp2.0\\win7-x64\\publish into C:\\projects\\powershell\\PowerShell_6.0.0-beta.6-19-ga8f22c7f.zip\r\nCannot validate argument on parameter 'ReleaseTag'. The argument \"v6.0.0-daily-beta6-4928\" does not match the \"^v\\d+\\.\\d+\\.\\d+(-\\w+\\.\\d+)?$\" pattern. Supply an argument that matches \"^v\\d+\\.\\d+\\.\\d+(-\\w+\\.\\d+)?$\" and try the command again.\r\nBuild success\r\n```",
      "created_at": "2017-09-01T17:07:55Z",
      "updated_at": "2017-09-01T19:59:56Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@TravisEz13 Now that `Publish-NugetFeed` has `-VersionSuffix` replaced by `-ReleaseTag`, the value provided when running `Publish-NugetFeed` has to comply with the release tag format pattern `'^v\\d+\\.\\d+\\.\\d+(-\\w+\\.\\d+)?$'`. So we cannot use the current daily build suffix now. I changed that to the format like this `v6.0.0-dailybeta5.3453`. Let me know if you have concerns about that.",
      "created_at": "2017-09-04T19:18:25Z",
      "updated_at": "2017-09-04T19:18:25Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "No concerns with that change",
      "created_at": "2017-09-05T19:42:24Z",
      "updated_at": "2017-09-05T19:42:24Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Windows artifacts look good.  ",
      "created_at": "2017-09-05T19:45:54Z",
      "updated_at": "2017-09-05T19:45:54Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Thanks @TravisEz13. Then I will consider this PR to be almost ready. I will update some of the comments, and then it would be good to go.",
      "created_at": "2017-09-05T20:01:26Z",
      "updated_at": "2017-09-05T20:01:26Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov Can you please take a look and see if my re-write reflects what you think?",
      "created_at": "2017-09-06T05:36:04Z",
      "updated_at": "2017-09-06T05:36:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Yes, thanks! Look very good.",
      "created_at": "2017-09-06T06:20:04Z",
      "updated_at": "2017-09-06T06:20:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Get-ComputerInfo test failed in AppVeyor CI.",
      "created_at": "2017-09-06T06:22:38Z",
      "updated_at": "2017-09-06T06:22:38Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The test failure is not related to this change. Comparing with the last successful [full build CI](https://ci.appveyor.com/project/PowerShell/powershell/build/6.0.0-beta.6-5006), the only changes we have are comment changes. So it's OK to merge this PR.",
      "created_at": "2017-09-06T19:40:15Z",
      "updated_at": "2017-09-06T19:40:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw @TravisEz13 Thanks for review and approvement!\r\n\r\nShould we continue to improve csproj files? I think it's worth moving a stable logic into them.",
      "created_at": "2017-09-07T03:08:18Z",
      "updated_at": "2017-09-07T03:08:18Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov Thanks for your hard work on it!\r\nI'm a little hesitating about aggressively moving build logic to `.csproj` files. I think #3690 deserves higher priority -- now that we have version attributes embedded in the assemblies, we can set up the `CommitId` and `PSVersion` in C#.",
      "created_at": "2017-09-07T15:39:57Z",
      "updated_at": "2017-09-07T15:39:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw My question was more about #3690 - I'll continue.",
      "created_at": "2017-09-07T17:58:04Z",
      "updated_at": "2017-09-07T17:58:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw What is your thoughts - should we set up the  CommitId  and  PSVersion based on assembly  version attributes or generate strong typed constant?\r\nThe first method is simpler and more [approved](https://github.com/PowerShell/PowerShell/pull/3690#issuecomment-301105191) but not protected like powershell.version file.\r\nSecond is more strong but can result in frequent recompilation of SMA.",
      "created_at": "2017-09-15T14:59:25Z",
      "updated_at": "2017-09-15T14:59:25Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I vote for getting the needed info from the attributes \ud83d\ude04 ",
      "created_at": "2017-09-15T15:49:05Z",
      "updated_at": "2017-09-15T15:49:05Z"
    }
  ],
  "created_at": "2017-07-04T10:25:21Z",
  "number": 4182,
  "state": "closed",
  "title": "Refactor MSBuild project files to get PowerShell version from git tag",
  "updated_at": "2017-09-15T15:49:05Z"
}