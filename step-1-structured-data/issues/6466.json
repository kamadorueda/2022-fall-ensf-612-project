{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6466",
  "author": "mklement0",
  "body": "In the pipeline, `[System.Data.DataTable]` is still treated as a _collection_ that implicitly enumerates its `.Rows` collection - through a mechanism that is unclear to me, given that it in other contexts this is currently, though possibly only temporarily, disabled (see #6453).\r\n\r\nGiven that `[System.Data.DataTable]`:\r\n\r\n* itself has no `.Count` property\r\n* is not itself indexable\r\n\r\nthe behavior with member enumeration - use of `.Count` and indexing - is not as expected:\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n# Create a sample data table with 2 rows.\r\n1..2 | % { $dt = [Data.DataTable]::new(\"test\") } { $dt.Rows.Add($dt.NewRow()) }\r\n\r\n# If we assume that [DataTable] is a collection, this should be equal to $dt.Rows.Count, i.e., 2\r\n$dt.Count\r\n\r\n# If we assume that [DataTable] is an indexable collection, this should return the\r\n# type name of the 2nd row, $dt.Rows[1], i.e., 'DataRow'\r\n$dt[1].GetType().Name\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\n2\r\nDataRow\r\n```\r\n\r\nNote: If [DataTable] itself is NOT conceived of as a collection, the expected behavior would be (standard member enumeration):\r\n\r\n```none\r\n1  # a single [DataTable] instance\r\nYou cannot call a method on a null-valued expression.  # Error, because index 1 doesn't exist.\r\n...\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\n1  # post-#5756 only: member enumeration was applied to the items of .Row\r\n1  # ditto\r\nYou cannot call a method on a null-valued expression.  # Error, index 1 was applied to $dt itself, not the .Rows collection\r\n...\r\n```\r\n\r\nNote: `$dt.Count` returning `1, 1` is only seen with @iSazonov's #5756 PR in effect, which has not been released yet as of PowerShell Core v6.0.2; without it, `$null` is output, because the row objects lack the implicit `.Count` property.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nPowerShell Core v6.0.2 on macOS 10.13.3\r\nPowerShell Core v6.0.2 on Ubuntu 16.04.3 LTS\r\nPowerShell Core v6.0.2 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\nWindows PowerShell v5.1.15063.674 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "I am little confuse as I'm used to do this with SQL datasets:\r\n```\r\n$sdt.rows.count \r\n```\r\nAnd, it will give me the number rows.\r\n\r\nHere's my SQL dataset sample:\r\n```\r\n$getSvr = \"systemname,1433\";\r\n$sqlcon = \"server=$Global:getSvr;database=Master;Integrated Security=false;User ID=sa;\" + 'Password=$SqlPw0rd1!';\r\n\r\n## - SQL Query:\r\n$SqlQry = @'\r\nsp_who2\r\n'@;\r\n\r\n## - Create connection to SQL Server and execute the T-SQL command:\r\n$sda = New-Object System.Data.SqlClient.SqlDataAdapter ($SqlQry, $sqlcon);\r\n$sdt = New-Object System.Data.DataTable;\r\n$sda.fill($sdt) | Out-Null;\r\n\r\n## - Display Results from SQLQuery:\r\n$sdt.rows\r\n\r\n## - Total number of rows:\r\n$sdt.rows.count\r\n```\r\n\r\nIf it something else then apologies! Just trying to understand. \r\n:)",
      "created_at": "2018-03-22T22:47:45Z",
      "updated_at": "2018-03-22T22:47:45Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@MaximoTrinidad: There is no issue if you're using the `.Rows` property explicitly - the problem I've described (without recommending a resolution, because I don't know the history) only surfaces if you use a `DataTable` instance _itself_ as an enumerable.\r\n",
      "created_at": "2018-03-22T22:52:51Z",
      "updated_at": "2018-03-22T22:53:31Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@mklement0,\r\n\r\nIt's been happening for the longest time so I got the habit to use the rows.count.  I never thought about using it at the first instance.  \r\n\r\nI think this is another .NET issue not really PowerShell Core as it can be repro in Windows PowerShell.\r\nThat's my take!\r\n\r\n:)",
      "created_at": "2018-03-22T23:01:13Z",
      "updated_at": "2018-03-22T23:01:13Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@MaximoTrinidad: \r\n\r\nYes, it's been around for a long time, but it's PowerShell (both editions), not .NET (a C# program won't recognize a `DataTable` instance as enumerable with `foreach`, for example).\r\n\r\nMy aim was to document the awkwardness of the behavior.\r\nNot sure what the outcome will be (document it and live with it / no longer treat `DataTable` as an enumerable).",
      "created_at": "2018-03-22T23:08:37Z",
      "updated_at": "2018-03-22T23:08:37Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@mklement0,\r\n\r\nGotcha!\r\nThere's always the possibility it's going to come back ... By-Design!  Hehe!\r\n:)",
      "created_at": "2018-03-22T23:16:48Z",
      "updated_at": "2018-03-22T23:16:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0  I don't debug but seems it is here:\r\nhttps://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/pipeline.cs#L1139\r\nhttps://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/LanguagePrimitives.cs#L549\r\nhttps://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/LanguagePrimitives.cs#L538\r\nhttps://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/runtime/Binding/Binders.cs#L595",
      "created_at": "2018-03-23T04:45:36Z",
      "updated_at": "2018-03-23T04:45:36Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@iSazonov \r\n\r\nNormally, when I look at issues like these, I search in MSDN Documentation for the .NET class having issues: https://msdn.microsoft.com/en-us/library/system.data.datatable(v=vs.100).aspx\r\n\r\nI can't find any documentation that would tell that the property Count doesn't exist at the DataTable class.  You'll find it available on the DataRowCollection Class.\r\n\r\nThis is why I was saying the issues can come from the .NET class and not PowerShell. \r\n\r\nNow, you could probably add a patch in PowerShell to work around the issue but at up for the team to decide.\r\n\r\nI understand @mklement0 in making us aware about the issue. \r\n\r\n:)\r\n\r\n\r\n\r\n",
      "created_at": "2018-03-23T18:56:10Z",
      "updated_at": "2018-03-23T18:56:10Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: Thanks for all the pointers, I'll take a look.\r\n\r\n@MaximoTrinidad: \r\n\r\nThe issue I'm highlighting is unrelated to whether any _properties_ of `[DataTable]` instances contain objects with a `.Count` property.\r\n\r\n**The issue is that a `[DataTable]` instance half behaves like a - broken - collection and half like a - broken - scalar.**\r\n\r\nThis can be resolved in one of 2 ways:\r\n\r\n* (a) Make it a well-behaved collection: \r\n  * give it a `.Count` property that reports the same thing as `.Rows.Count`\r\n  * make it indexable so that `[n]` is the same thing as `.Rows[n]`\r\n\r\n* (b) Make it a well-behaved scalar:\r\n  * give it a `.Count` property of `1` - it is, after all, _one_ table (remember that something like `(3).Count` also yields `1` in v3+)\r\n  * make it indexable as any scalar (since v3): `[0]` and `[-1]` are no-ops (yield the object itself), any other index yields `$null`\r\n\r\n(a) is friendlier to backward-compatibility, but, at least from a conceptual perspective, my vote is for (b).\r\n\r\n",
      "created_at": "2018-03-23T20:09:15Z",
      "updated_at": "2018-03-23T20:10:31Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@MaximoTrinidad:\r\n\r\n> Now, you could probably add a patch in PowerShell to work around the issue but at up for the team to decide.\r\n\r\nAnd, to be clear, it is PowerShell that is creating the problem to begin with, by treating the `DataTable` type itself as an enumerable, which it isn't intrinsically (as a .NET type).",
      "created_at": "2018-03-24T13:25:31Z",
      "updated_at": "2018-03-24T13:25:31Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "Not every enumerable is a collection which have `Count` property and indexer.\r\n\r\n```powershell\r\n$a = [System.Linq.Enumerable]::Range(1,3)\r\n$a.Count\r\n$a[1].GetType()\r\n```\r\n",
      "created_at": "2018-03-30T21:42:36Z",
      "updated_at": "2018-03-30T21:42:36Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@PetSerAl: \r\n\r\nGood point in general, but PowerShell is making `DataTable` act as if it were its own `.Rows` collection, which _does_ have a `.Count` property and whose elements _are_ indexable.\r\n\r\nTherefore, I'd expect `$someDataTable.Count` to return the same as `$someDataTable.Rows.Count` and `$someDataTable[$i]` to return the same as `$someDataTable.Rows[$i]`.\r\n\r\nOn a side note, `$someDataTable.Rows[-1]` returns `$null` rather than the last element. \r\n",
      "created_at": "2018-03-31T03:04:37Z",
      "updated_at": "2018-03-31T03:04:37Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "As far as I understand all the magic about treating `DataTable` as enumerable is concealed in `[System.Management.Automation.LanguagePrimitives]::GetEnumerable` and `[System.Management.Automation.LanguagePrimitives]::GetEnumerator`. So, PowerShell never treat `DataTable` as alias to its `Rows` property, but merely enumeration of `DataRow`s. Also, besides `Count` property and indexer `DataRowCollection` have other properties and methods, should them also be \"copied\" to `DataTable`? For example: `$dt.GetEnumerator()` fails now.\r\n\r\n>On a side note, `$someDataTable.Rows[-1]` returns `$null` rather than the last element.\r\n\r\nIf I understand it correctly, that is because `DataRowCollection` is not implement `IList` interface.",
      "created_at": "2018-03-31T08:25:52Z",
      "updated_at": "2018-03-31T08:26:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think we could ask .Net Core team that is their plans to enhance `DataTable` with methods from `Rows`. If they like this we'll resolve the Issue automatically. If they don't like this we should ask PowerShell Committe about implementation this in PowerShell.",
      "created_at": "2018-03-31T10:26:12Z",
      "updated_at": "2018-03-31T10:26:12Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@PetSerAl:\r\n\r\nThanks for the background info, as usual.\r\n\r\n> So, PowerShell never treat DataTable as alias to its Rows property, but merely enumeration of DataRows. \r\n\r\nI guess what I'm saying is: it _should_, at least in terms of the features that matter for a consistent PowerShell user experience, and these features are a `.Count` property and the ability to index.\r\nPersonally, I'm not concerned about other members such as `.GetEnumerator()`.\r\n\r\n@iSazonov:\r\n\r\nSince treating data tables themselves as enumerable is _PowerShell_'s magic (which I think was unfortunate to begin with, but we're stuck with it now), I don't think the .NET Core team will be receptive to the idea.\r\n\r\nI do hope the PowerShell committee will consider a PowerShell implementation, though.",
      "created_at": "2018-03-31T11:58:40Z",
      "updated_at": "2018-03-31T11:58:40Z"
    }
  ],
  "created_at": "2018-03-22T19:13:31Z",
  "number": 6466,
  "state": "open",
  "title": "Treating System.Data.DataTable as enumerable clashes with member enumeration",
  "updated_at": "2018-03-31T11:58:40Z"
}