{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12199",
  "author": "Tragen",
  "body": "Currently, the default variable scope allows variables to be accessed in child scopes.\r\nI always had a lot of problems with this in bigger scripts.\r\nIt would be nice to have an option, e.g. at the beginning of a script, which tells PS\r\nthat the default scope should be private for this script.\r\n",
  "closed_at": "2020-05-11T00:00:10Z",
  "comments": [
    {
      "author": "Halkcyon",
      "author_association": "NONE",
      "body": "That is the purpose of declaring your variables with scope, .e.g, `$private:myVar`",
      "created_at": "2020-03-25T00:54:42Z",
      "updated_at": "2020-03-25T00:54:42Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Correct. I believe the request is to have a way in the script to set such a scope to be the _default_ for all variables in that scope, so that when creating an unscoped variable it is automatically assigned the `private` scope.",
      "created_at": "2020-03-25T01:17:12Z",
      "updated_at": "2020-03-25T01:17:12Z"
    },
    {
      "author": "Tragen",
      "author_association": "NONE",
      "body": "Yes, exactly. When you have very long scripts, it's very ugly to prefix all variables with `private`",
      "created_at": "2020-03-25T11:22:55Z",
      "updated_at": "2020-03-25T11:22:55Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "PowerShell's dynamic scoping is a problem in other areas too, notably with not wanting `Set-StrictMode` settings to apply to child scopes ((third-party) code is often written with the assumption that no strict mode is in effect, and one going into effect in the caller's scope can break the code - see the (languishing) lexical strict-mode RFC at https://github.com/PowerShell/PowerShell-RFC/issues/7\r\n\r\nFor more robust code, lexically scoped variables, or their emulation with the `$private:` scope modifier, but _without the latter's ceremony_ would indeed be helpful, but requires an _opt-in_ mechanism so as not to break backward compatibility.\r\n\r\nConceivably, a new `using` statement could using be introduced that makes all local variables private _by default_, along the lines of `using private variables`; however, this implies that the option is only available at the _file_ level, not to individual functions. [_update_: also, the effect would have to be lexically scoped, which the current `using` statements are _not_].\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2020-03-29T17:30:58Z",
      "updated_at": "2020-03-29T18:37:10Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Not a bad suggestion, @mklement0. For myself, I was imagining introducing a preference variable; e.g., `$PSDefaultVariableScope = 'Private'`",
      "created_at": "2020-03-29T18:15:15Z",
      "updated_at": "2020-03-29T18:15:15Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "The problem with preference variables is again their dynamic scoping - child scopes that weren't written with all-private variables in mind could break.\r\n\r\nI suggested `using` under the mistaken assumption was that  they are lexically scoped to the enclosing script / script module, but as it turns out they're _not_, not even in the `using namespace` case.\r\n\r\nI suppose something like `$private:PSDefaultVariableScope = 'Private'` would work in a given scope, come to think of it, but that is obscure.\r\n\r\n",
      "created_at": "2020-03-29T18:36:33Z",
      "updated_at": "2020-03-29T18:43:25Z"
    },
    {
      "author": "Tragen",
      "author_association": "NONE",
      "body": "This isn't answered yet",
      "created_at": "2020-05-09T21:08:44Z",
      "updated_at": "2020-05-09T21:08:44Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-05-11T00:00:08Z",
      "updated_at": "2020-05-11T00:00:08Z"
    },
    {
      "author": "fabienfl-orc",
      "author_association": "NONE",
      "body": "@iSazonov What is the answered resolution ?",
      "created_at": "2021-10-05T13:15:43Z",
      "updated_at": "2021-10-05T13:15:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@fabienfl-orc PowerShell is well-designed language for scripting. :-) Later classes was introduced in PowerShell to address \"programming\" scenarios.",
      "created_at": "2021-10-05T16:48:13Z",
      "updated_at": "2021-10-05T16:48:13Z"
    }
  ],
  "created_at": "2020-03-24T22:13:50Z",
  "labels": [
    "Issue-Question",
    "WG-Language",
    "Resolution-Answered"
  ],
  "number": 12199,
  "state": "closed",
  "title": "Feature Request: Allow to change default variable scope",
  "updated_at": "2021-10-05T16:48:13Z"
}