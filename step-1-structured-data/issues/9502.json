{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9502",
  "author": "msftrncs",
  "body": "The quote character at `\\x{201F}` (or ``` `u{201F} ``` (\u201f) seems to have been missed in PowerShell's support for the extra quote characters.\r\n\r\nThere are 4 quotes in each set, from \\x{2018}-\\x{201B} (single quotes) and \\x{201C}-\\x{201F} (double quotes).  The only one not supported is \\x{201F}.   Was this an oversite or a typo?",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "It _sounds_ like it's an oversight, to be honest. It should be a simple fix, too, I know exactly where that code's at. \r\n\r\nDoes anyone know if there's a reason this wouldn't have been included in the set of recognised quotes?",
      "created_at": "2019-04-30T16:16:59Z",
      "updated_at": "2019-04-30T16:16:59Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Certainly a curious omission. \r\n\r\nAs an aside: More quote characters  exist, such as `\uff02` ([FULLWIDTH QUOTATION MARK, `U+FF02`](http://www.fileformat.info/info/unicode/char/ff02)), so I wonder how the currently supported subset was chosen.\r\n\r\nA while ago I've tried to summarize what non-ASCII-range punctuation and whitespace chars. PowerShell accepts interchangeably syntactically in [this Stack Overflow answer](https://stackoverflow.com/a/55053609/45375) - I've just updated it to point to this issue.\r\n\r\nSource-code link: https://github.com/PowerShell/PowerShell/blob/2cd4a4870a16808442421722a3c8b90b66747aa0/src/System.Management.Automation/engine/lang/parserutils.cs#L35-L41",
      "created_at": "2019-04-30T17:08:29Z",
      "updated_at": "2019-04-30T17:09:31Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "I know the primary reason for supporting the 'curly' Unicode quotes was the desire in the beginning to allow new PowerShell users to use what ever editor they had at their disposal, which includes editors like Word, which is more of a word processor/printed document editor.  I know first hand how hard it can be to control Word's quoting (or apostrophe). \r\n",
      "created_at": "2019-04-30T17:46:48Z",
      "updated_at": "2019-04-30T17:46:48Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "To clarify, it wasn't so much as allow use of Word as an editor PowerShell, but to allow users to cut and paste example PowerShell from Word (or Outlook) and have it work.  Word has a tendency to change the ascii quotes to fancy unicode quotes.",
      "created_at": "2019-05-03T21:12:00Z",
      "updated_at": "2019-05-03T21:12:00Z"
    }
  ],
  "created_at": "2019-04-30T16:07:12Z",
  "number": 9502,
  "state": "open",
  "title": "unsupported quote character \\x{201F}",
  "updated_at": "2021-01-15T10:19:17Z"
}