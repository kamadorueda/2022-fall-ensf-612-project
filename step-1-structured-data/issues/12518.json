{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12518",
  "author": "Schwanowski",
  "body": "Hi there,\r\n\r\nim really like the new foreach - parallel function but I need to be able to store the results in e.g. a global variable.\r\n\r\nLook if you call a webservice in parallel, you need to process the result and save it to some e.g. global variable.\r\n\r\n`\r\n$items = $myGlobalVariable.Keys | Where-Object {$myGlobalVariable[$_].run -eq $false}\r\n\r\n$items | ForEach-Object -parallel {\r\n$response = Invoke-RestMethod xxxx\r\n$myGlobalVariable[$_].ID = $response.ID\r\n}\r\n`\r\n\r\nAny suggestions?",
  "closed_at": "2020-04-30T07:39:47Z",
  "comments": [
    {
      "author": "Schwanowski",
      "author_association": "NONE",
      "body": "Seems to be a duplicate to https://github.com/PowerShell/PowerShell/issues/12240",
      "created_at": "2020-04-29T11:32:59Z",
      "updated_at": "2020-04-29T11:32:59Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "You can reference items from the main runspace with `$using:varName`; `$global:` will not work as far as I'm aware. However, a majority of collections are not threadsafe, and you will encounter what can only be described as 'undefined behaviour' when trying to use them from more than one thread/runspace simultaneously as you are here.\r\n\r\nYou can prepare a hashtable for use in threaded operations using the static `Synchronize` method, like so:\r\n```ps1\r\n$results = [hashtable]::Synchronized(@{ })\r\n```\r\n\r\nWhich you can then safely use via `$using:results` in Foreach-Object -Parallel. There are other, more sophisticated collection types that can be used in a multithreaded context, but that's probably closest to what's familiar. Multithreading something correctly isn't easy, and the complexity of some of the threadsafe types reflects that.\r\n\r\nDo note that `$using:var` doesn't permit assignment, or (I think?) indexing operations... so you may need to do something like `$myResults = $using:Results` at the start of the parallel scriptblock, and then reference the hashtable with that when adding entries.",
      "created_at": "2020-04-29T12:33:51Z",
      "updated_at": "2020-04-29T12:34:59Z"
    },
    {
      "author": "Schwanowski",
      "author_association": "NONE",
      "body": "Thanks already for your response, I will try this later today.\r\n\r\nBut one question: I have read some time ago that I should use System.Collections.Generic.Dictionary instead of an hashtable is this true? Can I use a dictonary instead of a hashtable or is this not possible in this case?\r\n\r\nThanks,\r\n\r\nAlex",
      "created_at": "2020-04-29T12:50:58Z",
      "updated_at": "2020-04-29T12:50:58Z"
    },
    {
      "author": "Schwanowski",
      "author_association": "NONE",
      "body": "I have tested it with \r\n$myResults = $using:Results\r\nand it works all fine\r\n\r\nThanks",
      "created_at": "2020-04-29T13:28:48Z",
      "updated_at": "2020-04-29T13:29:06Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "You can use a Dictionary, sure, but you can't use _that_ kind of dictionary due to the aforementioned threading issues. It also doesn't have a `Synchronized()` method like Hashtable does.\r\n\r\nIf you want a type-safe _and_ thread-safe dictionary, you'll need to look to [`System.Collections.Concurrent.ConcurrentDictionary`](https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent.concurrentdictionary-2?view=netcore-3.1).\r\n\r\nAs you'll see if you look through some of its methods, it has to be handled a good bit differently, with things like `TryAdd()` which _can_ fail and may need to be retried. It's a bit more complicated, but probably a lot more efficient to work with.",
      "created_at": "2020-04-29T14:38:24Z",
      "updated_at": "2020-04-29T14:40:11Z"
    },
    {
      "author": "Schwanowski",
      "author_association": "NONE",
      "body": "Thank you so much for your support",
      "created_at": "2020-04-30T07:39:47Z",
      "updated_at": "2020-04-30T07:39:47Z"
    }
  ],
  "created_at": "2020-04-29T11:29:45Z",
  "number": 12518,
  "state": "closed",
  "title": "Question concerning foreach - parallel",
  "updated_at": "2020-04-30T07:39:47Z"
}