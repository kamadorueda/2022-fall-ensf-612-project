{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8095",
  "author": "p0W3RH311",
  "body": "0.4 - 0.3 - 0.1 is equal to zero but is true only for Perl6 ?! why PS not return the correct result...and python ?!!\r\n\r\nSteps to reproduce\r\n------------------\r\n```powershell\r\nPS> 0.4 - 0.3 - 0.1 -eq 0\r\nFalse\r\nPS> 0.4 - 0.3 - 0.1\r\n2.77555756156289E-17\r\n```\r\n\r\n```perl\r\nPS> perl6\r\n\r\n> 0.4 - 0.3 - 0.1 == 0\r\nTrue\r\n> 0.4 - 0.3 - 0.1\r\n0\r\n```\r\n\r\n```python\r\nPS> python\r\n>>> 0.4 - 0.3 - 0.1 == 0\r\nFalse\r\n>>> 0.4 - 0.3 - 0.1\r\n2.7755575615628914e-17\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\n0\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\n2.77555756156289E-17\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0\r\nOS                             Microsoft Windows 6.3.9600\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2018-10-28T01:02:35Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Common problem with floating-point arithmetic.\r\n\r\nComputers don't typically represent numbers in true base 10 that we're accustomed to. It's to inefficient to keep track of and usually not significant enough to worry about. They use binary floating-point numbers to approximate a large number space without wasting a ton of memory on the value.\r\n\r\nThis isn't really the place to talk about it in full, but there are plenty of proper write-ups on the Internet, if you want to look one up. Suffice it to say that, just like how in base 10 we have a *huge* issue neatly representing the value of `1/3` in decimal notation (`0.33333...` going on forever), computers have a huge issue properly representing some more \"normal\" (to us) fractions in their typical base 2 numerals. They only have finite decimal places, so if we give them a number they cannot completely represent (due to it having infinitely repeating digits in base 2) the value they give us back will not be completely accurate.\r\n\r\nIn PowerShell, at least, you can use decimal numerals instead to use a more \"accurate\" depiction of the value:\r\n```powershell\r\nPS> 0.4d - 0.3d - 0.1d\r\n0.0\r\n```\r\nThis takes up more memory and the slight differences aren't typically worth the extra memory to worry about. The value you get back with the standard floating point calculation is not zero, but is for many intents and purposes more or less the same. ",
      "created_at": "2018-10-21T05:35:31Z",
      "updated_at": "2018-10-21T05:36:20Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Brief depiction of why this is an issue:\r\n```\r\n0.4 = 4/10 = 2/5\r\nin base 2:\r\n10/101 = 0.01001001... (repeating forever)\r\n```\r\nA number we can represent with `0.4` in base 10 has infinite digits in binary.\r\n\r\nAs [this article explains](http://blogs.perl.org/users/ovid/2015/02/a-little-thing-to-love-about-perl-6-and-cobol.html) it seems Perl 6 evades this topic by internally working with rational numbers by splitting them up into numerator and denominator. This would mean that it needs to keep track of twice the amount of numbers in memory, but it gains the ability to more accurately reflect fractional numbers.\r\n\r\nPowerShell is built on .NET Core, and as far as I'm aware there is no such type present in Core. We could *make* one, I'm sure, but it may or may not be worth it. As I mention -- we have `decimal` for things like this, really.",
      "created_at": "2018-10-21T05:43:36Z",
      "updated_at": "2018-10-21T05:51:21Z"
    }
  ],
  "created_at": "2018-10-21T05:08:19Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 8095,
  "state": "closed",
  "title": "it should be equal to 0 !?",
  "updated_at": "2018-10-28T01:02:35Z"
}