{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10208",
  "author": "jazzdelightsme",
  "body": "# PR Summary\r\n\r\nThe RawUI's `LengthInBufferCells` needs to treat VT control sequences as zero-width for the purpose of determining string length.\r\n\r\nPreviously, it only handled SGR (Select Graphics Rendition) sequences (which do things like set fg color, bg color, etc.).\r\n\r\nI'm currently adding support for some new control sequences in the microsoft/terminal project: XTPUSHSGR and XTPOPSGR. Initial WIP PR [here](https://github.com/microsoft/terminal/pull/1978).\r\n\r\nSummarized descriptions of XTPUSHSGR and XTPOPSGR from XTerm's [ctlseqs](https://invisible-island.net/xterm/ctlseqs/ctlseqs.html) documentation:\r\n\r\n```\r\nCSI # {\r\nCSI Ps ; Ps # {\r\n          Push video attributes onto stack (XTPUSHSGR), xterm.\r\n\r\nCSI # }   Pop video attributes from stack (XTPOPSGR), xterm.  Popping\r\n          restores the video-attributes which were saved using XTPUSHSGR\r\n          to their previous state.\r\nCSI # p\r\nCSI Ps ; Ps # p\r\n          Push video attributes onto stack (XTPUSHSGR), xterm.  This is\r\n          an alias for CSI # {.\r\n\r\nCSI # q   Pop video attributes from stack (XTPOPSGR), xterm.  This is an\r\n          alias for CSI # }.\r\n```\r\n\r\nThe scenario enabled by these sequences is composability (see [Issue 1796](https://github.com/microsoft/terminal/issues/1796)).\r\n\r\nI'd like to support these sequences in PowerShell, similarly to SGR sequences, to enable better SGR content composability.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2019-08-16T20:37:02Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Can PSReadline affected by this addition?",
      "created_at": "2019-07-26T05:16:07Z",
      "updated_at": "2019-07-26T05:16:07Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov To answer you question, PSReadLine does have code for similar purpose (see below). But it's not for a general purpose like in PowerShell. The use of it in PSReadLine is pretty narrowed down as the escape sequences are added by PSReadLine, so it does a simple skipping that is more efficient.\r\n\r\nhttps://github.com/PowerShell/PSReadLine/blob/3ed06e11dc6da4719ac69a756122bd482dc00fe0/PSReadLine/Render.cs#L581-L600\n\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/11524380?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PSReadLine\">PowerShell/PSReadLine</a></strong></div><div>A bash inspired readline implementation for PowerShell - PowerShell/PSReadLine</div></blockquote>",
      "created_at": "2019-08-15T23:55:27Z",
      "updated_at": "2019-08-15T23:55:29Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Thanks for clarify!\r\n\r\nI think we can merge and I could implement my suggestion [\"I propose to make this method local in ControlSequenceLength so that we get direct access to \"offset\" and \"str\" variables in ControlSequenceLength.\" ](https://github.com/PowerShell/PowerShell/pull/10208#discussion_r307590671) in follow PR.",
      "created_at": "2019-08-16T03:48:51Z",
      "updated_at": "2019-08-16T03:48:51Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> I think we can merge and I could implement my suggestion \"I propose to make this method local in ControlSequenceLength so that we get direct access to \"offset\" and \"str\" variables in ControlSequenceLength.\" in follow PR.\r\n\r\n@iSazonov I don't see the need to do that. `offset` is already passed in as a ref, and str is a reference pointer. I don't recommend you to submit this follow-up PR.",
      "created_at": "2019-08-16T20:36:06Z",
      "updated_at": "2019-08-16T20:36:06Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.0.0-preview.4` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.4)\n",
      "created_at": "2019-09-19T17:52:04Z",
      "updated_at": "2019-09-19T17:52:04Z"
    }
  ],
  "created_at": "2019-07-23T03:35:39Z",
  "number": 10208,
  "state": "closed",
  "title": "Formatting: handle XTPUSHSGR/XTPOPSGR sequences",
  "updated_at": "2019-09-19T19:00:40Z"
}