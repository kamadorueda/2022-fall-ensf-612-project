{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8783",
  "author": "SteveL-MSFT",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->  \r\n\r\n## PR Summary\r\n\r\nThe current code always tries to glob the target path which results in an absolute path and limits the usefulness of creating a symlink.  Fix is to see if the target path even contains any wildcards, if not, don't use the resolved globbed path and instead use the value as literal.  Since there isn't a `-LiteralTarget` parameter, this does mean that the globber can fail if the target path contains a wildcard character intended to be literal, but that is not in scope of this PR.\r\n\r\nNote that relative links are only supported on Windows so skipping test on non-Windows.  On non-Windows, the relative path is passed to the symlink() api which ends up creating an absolute link.  Using the `ln` command line tool has the same result.\r\n\r\n## PR Context  \r\n\r\nFix https://github.com/PowerShell/PowerShell/issues/3500\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.  \r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**  \r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [x] [Add `[feature]` to your commit messages if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2019-02-07T19:44:24Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Codefactor issues are on untouched code and incorrectly identifying Hungarian notation",
      "created_at": "2019-01-29T19:03:52Z",
      "updated_at": "2019-01-29T19:03:52Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "`FileSystem.Tests.ps1` failed in all 3 CI systems.\r\nThis looks suspicious considering that the change is in `SessionStateContainer.cs`. :)",
      "created_at": "2019-01-31T19:26:03Z",
      "updated_at": "2019-01-31T19:26:03Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Looking",
      "created_at": "2019-01-31T21:04:37Z",
      "updated_at": "2019-01-31T21:04:37Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The spelling error in static analysis is unrelated to this PR.  The CodeFactor issues are also unrelated to the changes in this PR.",
      "created_at": "2019-02-01T22:59:52Z",
      "updated_at": "2019-02-01T22:59:52Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@anmenaga I believe this is ready to merge",
      "created_at": "2019-02-06T21:48:32Z",
      "updated_at": "2019-02-06T21:48:32Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "I'd like to see sign offs from @iSazonov and @vexx32 .",
      "created_at": "2019-02-06T21:53:03Z",
      "updated_at": "2019-02-06T21:53:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I have only one open question above.",
      "created_at": "2019-02-07T03:56:32Z",
      "updated_at": "2019-02-07T03:56:32Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT:\r\n\r\nThanks for fixing this.\r\n\r\n> On non-Windows, the relative path is passed to the symlink() api which ends up creating an absolute link.\r\n\r\nI just tried the new code on my Mac, and it was able to create a symlink with a relative path just fine.\r\n\r\n> Using the `ln` command line tool has the same result.\r\n\r\nSimilarly, `ln` on macOS and Linux creates symlinks with relative target paths, if given a relative path.\r\nIn fact, that's the typical use case.\r\n\r\n\r\nI suggest enabling the tests for Unix-like platforms too.\r\n",
      "created_at": "2019-02-07T22:02:46Z",
      "updated_at": "2019-02-07T22:02:46Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 I tried it on my macBook and it didn't create a relative link.  Not sure why it's different for me as the tests failed on my system and was also failing in CI.",
      "created_at": "2019-02-08T06:04:51Z",
      "updated_at": "2019-02-08T06:05:25Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT:\r\n\r\nTo verify that `ln` is capable of creating relative symlinks on both macOS and Linux, run the following test:\r\n\r\n```powershell\r\nDescribe \"Relative symlink path test\" {\r\n  It \"ln creates a symlink with a relative path when given one\" {\r\n    ln -s . /tmp/$pid\r\n    readlink /tmp/$pid | should -BeExactly '.'\r\n    rm /tmp/$pid\r\n  }\r\n}\r\n```",
      "created_at": "2019-02-11T20:12:51Z",
      "updated_at": "2019-02-11T20:12:51Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT, inferring the correct symlink type on Windows seems to be broken with relative paths to existing directories - see #9127\r\n\r\nOn a related note, we must come up with a way to explicitly specify the target type for _nonexistent_ (not-yet-extant) targets - see https://github.com/PowerShell/PowerShell/issues/9067#issuecomment-470140963",
      "created_at": "2019-03-12T21:09:24Z",
      "updated_at": "2019-03-12T21:09:24Z"
    }
  ],
  "created_at": "2019-01-29T19:02:38Z",
  "number": 8783,
  "state": "closed",
  "title": "Enable creating relative symlinks with `New-Item`",
  "updated_at": "2019-03-22T18:27:14Z"
}