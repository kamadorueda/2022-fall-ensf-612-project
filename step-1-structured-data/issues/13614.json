{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13614",
  "author": "Herrmel",
  "body": "Since Version 7 of Powershell my Code doesn't work the way it used to in Version 6.2.*. I want my own implemented host to handle the output of Errors. But since v7 it only writes empty lines.\r\n\r\n## Steps to reproduce\r\n\r\nCreate a little Project with PowershellSDK like this: \r\n\r\n```csharp\r\nusing System.Management.Automation;\r\nusing System.Management.Automation.Runspaces;\r\n\r\nnamespace PowerShellTestProjekt\r\n{\r\n    class Program\r\n    {\r\n        const string testedInput = \"'dawdaw\";\r\n        static void Main(string[] args)\r\n        {\r\n            using PowerShell ps = PowerShell.Create(RunspaceFactory.CreateRunspace(new PowerShellConsoleHost(), InitialSessionState.CreateDefault()));\r\n            ps.Runspace.Open();\r\n            System.Management.Automation.Language.Parser.ParseInput(testedInput, out _, out var parseErrors);\r\n            if(parseErrors.Length > 0)\r\n            {\r\n                var parseException = new ParseException(parseErrors);\r\n                PSWrite($\"Here it comes:\\r\\nInput: \\r\\n{testedInput}\\r\\nError:\");\r\n                WriteError(\"ErrorRecord\", parseException.ErrorRecord);\r\n\r\n                PSWrite($\"ErrorRecord alone to output:\");\r\n                PSWrite(parseException.ErrorRecord);\r\n\r\n                PSWrite($\"Write Error with Exception:\");\r\n                WriteError(\"Exception\", parseException);\r\n\r\n                PSWrite(\"Finished\");\r\n            }\r\n            else\r\n            {\r\n                ps.AddScript(testedInput).AddCommand(\"out-host\");\r\n            }\r\n            \r\n            ps.Invoke();\r\n\r\n            void PSWrite(object toWrite)\r\n            {\r\n                ps.AddStatement().AddCommand(\"out-host\").AddParameter(\"InputObject\", toWrite);\r\n            }\r\n\r\n            void WriteError(string paramName,object value)\r\n            {\r\n                ps.AddStatement().AddCommand(\"Write-Error\").AddParameter(paramName, value).AddCommand(\"out-host\");\r\n                ps.Commands.Commands[ps.Commands.Commands.Count-2].MergeMyResults(PipelineResultTypes.All, PipelineResultTypes.Output);//Without this it wont get to out-host\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAlso implement the PowershellHost(here named PowerShellConsoleHost). Test with 6.2.7 and with 7.0.* and you see The Execution of Write-Error with -ErrorRecord does not output anything except an empty line in v7.\r\n\r\n<details>\r\n<summary>My basic PowerShellConsoleHost implementation in case you need it</summary>\r\n    \r\n```csharp\r\nusing System;\r\nusing System.Globalization;\r\nusing System.Management.Automation;\r\nusing System.Management.Automation.Host;\r\nusing System.Management.Automation.Runspaces;\r\nusing System.Threading;\r\n\r\nnamespace PowerShellTestProjekt\r\n{\r\n\tpublic class PowerShellConsoleHost : PSHost\r\n\t{\r\n\r\n\t\tprivate static Guid instanceId = Guid.NewGuid();\r\n\r\n\t\tpublic PowerShellConsoleHost()\r\n\t\t{\r\n\t\t\tmyHostUserInterface = new PowerShellConsoleHostUserInterface();\r\n\t\t}\r\n\r\n\t\tprivate readonly PowerShellConsoleHostUserInterface myHostUserInterface;\r\n\r\n\t\tpublic Runspace pushedRunspace = null;\r\n\r\n\t\tpublic override CultureInfo CurrentCulture => Thread.CurrentThread.CurrentCulture;\r\n\r\n\t\tpublic override CultureInfo CurrentUICulture => Thread.CurrentThread.CurrentUICulture;\r\n\r\n\t\tpublic override Guid InstanceId\r\n\t\t{\r\n\t\t\tget { return instanceId; }\r\n\t\t}\r\n\t\tpublic override string Name => \"ConsoleHost\";\r\n\r\n\t\tpublic override PSHostUserInterface UI\r\n\t\t{\r\n\t\t\tget { return this.myHostUserInterface; }\r\n\t\t}\r\n\t\tpublic override Version Version { get; } = typeof(PowerShell).Assembly.GetName().Version;\r\n\r\n\t\tpublic override void EnterNestedPrompt()\r\n\t\t{\r\n\t\t\tthrow new NotImplementedException(\r\n\t\t\t\t  \"The method or operation is not implemented.\");\r\n\t\t}\r\n\t\tpublic override void ExitNestedPrompt()\r\n\t\t{\r\n\t\t\tthrow new NotImplementedException(\r\n\t\t\t\t  \"The method or operation is not implemented.\");\r\n\t\t}\r\n\t\tpublic override void NotifyBeginApplication()\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tpublic override void NotifyEndApplication()\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tpublic override void SetShouldExit(int exitCode)\r\n\t\t{\r\n\t\t}\r\n\r\n\t}\r\n}\r\n```\r\n\r\n```csharp\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Collections.ObjectModel;\r\nusing System.Globalization;\r\nusing System.Linq;\r\nusing System.Management.Automation;\r\nusing System.Management.Automation.Host;\r\nusing System.Management.Automation.Runspaces;\r\nusing System.Text;\r\n\r\nnamespace PowerShellTestProjekt\r\n{\r\n\tinternal class PowerShellConsoleHostUserInterface : PSHostUserInterface\r\n\t{\r\n\t\tprivate readonly PowerShellConsoleHostRawUserInterface myRawUi;\r\n\r\n\t\tpublic PowerShellConsoleHostUserInterface()\r\n\t\t{\r\n\t\t\tmyRawUi = new PowerShellConsoleHostRawUserInterface();\r\n\t\t}\r\n\r\n\t\tpublic Runspace pushedRunspace = null;\r\n\r\n\t\tpublic override PSHostRawUserInterface RawUI\r\n\t\t{\r\n\t\t\tget { return this.myRawUi; }\r\n\t\t}\r\n\t\tpublic override Dictionary<string, PSObject> Prompt(string caption,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstring message,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCollection<FieldDescription> descriptions)\r\n\t\t{\r\n\t\t\tthrow new NotImplementedException();\r\n\t\t}\r\n\r\n\t\tpublic override int PromptForChoice(string caption,\r\n\t\t\t\t\t\t\t\t\t\t\tstring message,\r\n\t\t\t\t\t\t\t\t\t\t\tCollection<ChoiceDescription> choices,\r\n\t\t\t\t\t\t\t\t\t\t\tint defaultChoice)\r\n\t\t{\r\n\t\t\tthrow new NotImplementedException();\r\n\t\t}\r\n\r\n\r\n        public override PSCredential PromptForCredential(string caption,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t string message,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t string userName,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t string targetName)\r\n\t\t{\r\n\t\t\tthrow new NotImplementedException();\r\n\t\t}\r\n\r\n\t\tpublic override PSCredential PromptForCredential(string caption,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t     string message,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t     string userName,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t     string targetName,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t     PSCredentialTypes allowedCredentialTypes,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t     PSCredentialUIOptions options)\r\n\t\t{\r\n\r\n\t\t\tthrow new NotImplementedException();\r\n\r\n\t\t}\r\n\r\n\t\tpublic override string ReadLine()\r\n\t\t{\r\n\t\t\treturn System.Console.ReadLine();\r\n\t\t}\r\n\r\n\t\tpublic override System.Security.SecureString ReadLineAsSecureString() => throw new NotImplementedException();\r\n\r\n\t\tpublic override void Write(string value)\r\n\t\t{\r\n\t\t\tSystem.Console.Write(value);\r\n\t\t}\r\n\r\n\t\tpublic override void Write(ConsoleColor foregroundColor,\r\n\t\t\t\t\t\t\t\t   ConsoleColor backgroundColor,\r\n\t\t\t\t\t\t\t\t   string value)\r\n\t\t{\r\n\t\t\tConsoleColor oldFg = System.Console.ForegroundColor;\r\n\t\t\tConsoleColor oldBg = System.Console.BackgroundColor;\r\n\t\t\tSystem.Console.ForegroundColor = foregroundColor;\r\n\t\t\tSystem.Console.BackgroundColor = backgroundColor;\r\n\t\t\tSystem.Console.Write(value);\r\n\t\t\tSystem.Console.ForegroundColor = oldFg;\r\n\t\t\tSystem.Console.BackgroundColor = oldBg;\r\n\t\t}\r\n\r\n\t\tpublic override void WriteLine(ConsoleColor foregroundColor,\r\n\t\t\t\t\t\t\t\t\t   ConsoleColor backgroundColor,\r\n\t\t\t\t\t\t\t\t\t   string value)\r\n\t\t{\r\n\t\t\tConsoleColor oldFg = System.Console.ForegroundColor;\r\n\t\t\tConsoleColor oldBg = System.Console.BackgroundColor;\r\n\t\t\tSystem.Console.ForegroundColor = foregroundColor;\r\n\t\t\tSystem.Console.BackgroundColor = backgroundColor;\r\n\t\t\tSystem.Console.WriteLine(value);\r\n\t\t\tSystem.Console.ForegroundColor = oldFg;\r\n\t\t\tSystem.Console.BackgroundColor = oldBg;\r\n\t\t}\r\n\r\n\r\n\t\tpublic override void WriteDebugLine(string message)\r\n\t\t{\r\n\t\t\tWriteLine(ConsoleColor.DarkYellow,\r\n\t\t\t\t\t\t   ConsoleColor.Black,\r\n\t\t\t\t\t\t   message);\r\n\t\t}\r\n\r\n\t\tpublic override void WriteErrorLine(string value)\r\n\t\t{\r\n\t\t\tWriteLine(ConsoleColor.Red,\r\n\t\t\t\t\t\t   ConsoleColor.Black,\r\n\t\t\t\t\t\t   value);\r\n\t\t}\r\n\r\n\t\tpublic override void WriteLine()\r\n\t\t{\r\n\t\t\tSystem.Console.WriteLine();\r\n\t\t}\r\n\r\n\t\tpublic override void WriteLine(string value)\r\n\t\t{\r\n\t\t\tSystem.Console.WriteLine(value);\r\n\t\t}\r\n\r\n\r\n\t\tpublic override void WriteProgress(long sourceId, ProgressRecord record)\r\n\t\t{\r\n\t\t\tthrow new NotImplementedException();\r\n\t\t}\r\n\r\n\t\tpublic override void WriteVerboseLine(string message)\r\n\t\t{\r\n\t\t\tWriteLine(ConsoleColor.Green,\r\n\t\t\t\t\t\t   ConsoleColor.Black,\r\n\t\t\t\t\t\t   message);\r\n\t\t}\r\n\r\n\t\tpublic override void WriteWarningLine(string message)\r\n\t\t{\r\n\t\t\tWriteLine(ConsoleColor.Yellow,ConsoleColor.Black,message);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n```\r\n\r\n```csharp\r\nusing System;\r\nusing System.Management.Automation.Host;\r\n\r\nnamespace PowerShellTestProjekt\r\n{\r\n\tinternal class PowerShellConsoleHostRawUserInterface : PSHostRawUserInterface\r\n\t{\r\n\t\tpublic PowerShellConsoleHostRawUserInterface()\r\n\t\t{}\r\n\r\n\t\tpublic override ConsoleColor BackgroundColor\r\n\t\t{\r\n\t\t\tget { return System.Console.BackgroundColor; }\r\n\t\t\tset { System.Console.BackgroundColor = value; }\r\n\t\t}\r\n\r\n\t\tpublic override Size BufferSize\r\n\t\t{\r\n\t\t\tget { return new Size(System.Console.BufferWidth, System.Console.BufferHeight); }\r\n\t\t\tset { System.Console.SetBufferSize(value.Width, value.Height); }\r\n\t\t}\r\n\r\n\t\tpublic override Coordinates CursorPosition\r\n\t\t{\r\n\t\t\tget\r\n\t\t\t{\r\n\t\t\t\treturn new Coordinates(System.Console.CursorLeft, System.Console.CursorTop);\r\n\t\t\t}\r\n\t\t\tset\r\n\t\t\t{\r\n\t\t\t\tSystem.Console.SetCursorPosition(value.X, value.Y);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic override int CursorSize\r\n\t\t{\r\n\t\t\tget { return System.Console.CursorSize; }\r\n\t\t\tset { System.Console.CursorSize = value; }\r\n\t\t}\r\n\r\n\t\tpublic override ConsoleColor ForegroundColor\r\n\t\t{\r\n\t\t\tget { return System.Console.ForegroundColor; }\r\n\t\t\tset { System.Console.ForegroundColor = value; }\r\n\t\t}\r\n\r\n\t\tpublic override bool KeyAvailable\r\n\t\t{\r\n\t\t\tget { return System.Console.KeyAvailable; }\r\n\t\t}\r\n\r\n\t\tpublic override Size MaxPhysicalWindowSize\r\n\t\t{\r\n\t\t\tget { return new Size(System.Console.LargestWindowWidth, System.Console.LargestWindowHeight); }\r\n\t\t}\r\n\r\n\t\tpublic override Size MaxWindowSize\r\n\t\t{\r\n\t\t\tget { return new Size(System.Console.LargestWindowWidth, System.Console.LargestWindowHeight); }\r\n\t\t}\r\n\r\n\t\tpublic override Coordinates WindowPosition\r\n\t\t{\r\n\t\t\tget { return new Coordinates(System.Console.WindowLeft, System.Console.WindowTop); }\r\n\t\t\tset { System.Console.SetWindowPosition(value.X, value.Y); }\r\n\t\t}\r\n\r\n\t\tpublic override Size WindowSize\r\n\t\t{\r\n\t\t\tget { return new Size(System.Console.WindowWidth, System.Console.WindowHeight); }\r\n\t\t\tset { System.Console.SetWindowSize(value.Width, value.Height); }\r\n\t\t}\r\n\r\n\t\tpublic override string WindowTitle\r\n\t\t{\r\n\t\t\tget { return System.Console.Title; }\r\n\t\t\tset { System.Console.Title = value; }\r\n\t\t}\r\n\r\n\t\tpublic override void FlushInputBuffer()\r\n\t\t{\r\n\t\t\tusing var inp= System.Console.OpenStandardInput();\r\n\t\t\tinp.Flush();\r\n\t\t}\r\n\r\n\t\tpublic override BufferCell[,] GetBufferContents(Rectangle rectangle)\r\n\t\t{\r\n\t\t\tthrow new NotImplementedException(\r\n\t\t\t\t\t \"The method or operation is not implemented.\");\r\n\t\t}\r\n\r\n\t\tpublic override KeyInfo ReadKey(ReadKeyOptions options)\r\n\t\t{\r\n\t\t\tConsoleKeyInfo key = System.Console.ReadKey((options & ReadKeyOptions.NoEcho) != 0);\r\n\t\t\treturn new KeyInfo((int)key.Key, key.KeyChar, new ControlKeyStates(), true);\r\n\t\t}\r\n\r\n\t\tpublic override void ScrollBufferContents(Rectangle source, Coordinates destination, Rectangle clip, BufferCell fill)\r\n\t\t{\r\n\t\t\tthrow new NotImplementedException(\r\n\t\t\t\t\t  \"The method or operation is not implemented.\");\r\n\t\t}\r\n\r\n\r\n\t\tpublic override void SetBufferContents(Coordinates origin, BufferCell[,] contents)\r\n\t\t{\r\n\t\t\t\r\n\t\t\tthrow new NotImplementedException(\r\n\t\t\t\t\t  \"The method or operation is not implemented.\");\r\n\t\t}\r\n\r\n\t\tpublic override void SetBufferContents(Rectangle rectangle, BufferCell fill)\r\n\t\t{\r\n\r\n\t\t\tif (fill.Character == ' ' && rectangle.Bottom == -1 && rectangle.Left == -1 && rectangle.Right == -1 && rectangle.Top == -1)\r\n\t\t\t{\r\n\t\t\t\tSystem.Console.Clear();\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tthrow new NotImplementedException(\"The method or operation is not implemented.\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n```\r\n\r\n</details>\r\n\r\n## Expected behavior\r\n\r\nOutput of Powershell SDK 6.2.*:\r\n![image](https://user-images.githubusercontent.com/36636591/92722251-95e1b680-f367-11ea-9891-bcbc1f45956f.png)\r\n\r\n\r\n## Actual behavior\r\n\r\nOutput for `Write-Error -ErrorRecord` is an empty line.\r\nOutput of Powershell SDK 7.0.*:\r\n![image](https://user-images.githubusercontent.com/36636591/92722082-587d2900-f367-11ea-8061-62ea75069298.png)\r\n\r\nNotice: The `WriteErrorLine` Method in the implemented host is called once but with an empty string.\r\n\r\n## Environment data\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.7\r\nPSEdition                      Core\r\nGitCommitId                    6.2.7\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0.}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.3\r\nPSEdition                      Core\r\nGitCommitId                    7.0.3\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0.}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nBtw is there a Way to get Rid of the \"Write-Error\" part in the output? I couldnt find an other way than \"Write-Error\" to output the ErrorRecord (with the expected format applied) in the host.",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT looks like an issue with ConciseView?\r\n\r\n@Herrmel not with `Write-Error` as far as I'm aware. If you're in a function or script with `[CmdletBinding()]` applied, though, you can use `$PSCmdlet.WriteError($errorRecord)`",
      "created_at": "2020-09-10T13:07:45Z",
      "updated_at": "2020-09-10T13:07:45Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@Herrmel I've fixed a similar issue in 7.1, can you try your host with 7.1 SDK and see if it repros?",
      "created_at": "2020-09-23T21:55:39Z",
      "updated_at": "2020-09-23T21:55:39Z"
    },
    {
      "author": "Herrmel",
      "author_association": "NONE",
      "body": "Same result in v7.1 Preview 7",
      "created_at": "2020-09-24T09:38:33Z",
      "updated_at": "2020-09-24T09:38:33Z"
    },
    {
      "author": "dkattan",
      "author_association": "NONE",
      "body": "I had this same problem. Adding this made it trigger:\r\n```\r\npowershell.AddScript(script);\r\nforeach (var command in powershell.Commands.Commands)\r\n{\r\n\t// This is what made it trigger\r\n        command.MergeMyResults(PipelineResultTypes.Error, PipelineResultTypes.Output);\r\n\t// Has no effect on whether or not WriteWarning gets called in custom PS host. Always gets called.\r\n\tcommand.MergeMyResults(PipelineResultTypes.Warning, PipelineResultTypes.Output);\r\n}\r\n```",
      "created_at": "2020-10-14T12:03:29Z",
      "updated_at": "2020-10-14T12:03:29Z"
    },
    {
      "author": "Herrmel",
      "author_association": "NONE",
      "body": "@iSazonov I dont think the answer from @dkattan was a resolution, but a more precise description. I still have the same problem in the newest previewversion (7.2 preview 2). I dont see any reason why ErrorRecords in Write-Error are not Merged to Output but Exceptions do when using `MergeMyResults(PipelineResultTypes.Error, PipelineResultTypes.Output)`? Even the`WriteErrorLine`-Method from the host gets called, but with an empty-string. I really do not think this is working as intended!",
      "created_at": "2021-02-11T08:35:01Z",
      "updated_at": "2021-02-11T08:35:01Z"
    },
    {
      "author": "BobbyCannon",
      "author_association": "NONE",
      "body": "I have a custom host implementation that I am migrating from v5 to v7.1.3. This is very frustrating and had me stumped for hours... I was trying to execute a script. All code snippets worked. However when I tried to runs a PS1 file nothing would happen. Turns out PSHostUserInterface.WriteErrorLine is sending an empty string. So when I tried to Execute a script when the ExecutionPolicy is set for \"Undefined\" I was just getting an empty line.\r\n\r\nI expected to see an error but nothing was outputting and I just could not figure out why. Finally noticed this. \r\n\r\n![image](https://user-images.githubusercontent.com/840590/118303550-9365cc80-b4b3-11eb-992f-69a1b48b29cd.png)\r\n\r\nI've very sure this is not expected. I'm thinking the exception value (Message) should be passed to WriteErrorLine, correct?\r\n",
      "created_at": "2021-05-14T16:55:23Z",
      "updated_at": "2021-05-14T16:57:16Z"
    },
    {
      "author": "BobbyCannon",
      "author_association": "NONE",
      "body": "![image](https://user-images.githubusercontent.com/840590/118304311-81d0f480-b4b4-11eb-8ce7-02a9fb25a347.png)\r\n\r\nDecided to just test a \"Write-Error\" and boom it's empty. \r\n\r\n![image](https://user-images.githubusercontent.com/840590/118304528-c5c3f980-b4b4-11eb-9177-201f023611dd.png)\r\n\r\nWhere exactly is the 'Error' parameter data going? If this behavior is intended then how do we get to the error content?\r\n",
      "created_at": "2021-05-14T17:04:27Z",
      "updated_at": "2021-05-14T17:04:27Z"
    },
    {
      "author": "BobbyCannon",
      "author_association": "NONE",
      "body": "Maybe add a few unit test that validate the output is working as expected.\r\n\r\n* EnsureWriteErrorWorks: **Fails**\r\n* EnsureWriteWarningWorks: Passes\r\n\r\n```csharp\r\n[TestMethod]\r\npublic void EnsureWriteErrorWorks()\r\n{\r\n\tvar options = GetOptions();\r\n\tvar channel = new MemoryChannel();\r\n\tusing var host = new PowerShellConsole(channel, options.ToJson());\r\n\tAssert.AreEqual(true, host.IsInitialized);\r\n\tchannel.Messages.ForEach(x => Console.WriteLine(x));\r\n\tchannel.Messages.Clear();\r\n\r\n\thost.Execute(\"Write-Error 'error'\", true, true);\r\n\tchannel.Messages.ForEach(x => Console.WriteLine(x));\r\n\tAssert.IsTrue(channel.Messages.Any(x => x == \"Write Line: error\"));\r\n}\r\n\r\n[TestMethod]\r\npublic void EnsureWriteWarningWorks()\r\n{\r\n\tvar options = GetOptions();\r\n\tvar channel = new MemoryChannel();\r\n\tusing var host = new PowerShellConsole(channel, options.ToJson());\r\n\tAssert.AreEqual(true, host.IsInitialized);\r\n\tchannel.Messages.ForEach(x => Console.WriteLine(x));\r\n\tchannel.Messages.Clear();\r\n\r\n\thost.Execute(\"Write-Warning 'warning'\", true, true);\r\n\tchannel.Messages.ForEach(x => Console.WriteLine(x));\r\n\tAssert.IsTrue(channel.Messages.Any(x => x == \"Write Line: warning\"));\r\n}\r\n```",
      "created_at": "2021-05-14T17:47:34Z",
      "updated_at": "2021-05-14T17:47:34Z"
    },
    {
      "author": "BobbyCannon",
      "author_association": "NONE",
      "body": "@vexx32  @SteveL-MSFT  I agree, it for sure has something to do with $ErrorView\r\n\r\nConciseView gives **no response** (well, an empty string)\r\nCategoryView and NormalView give proper responses\r\n\r\n![image](https://user-images.githubusercontent.com/840590/118319614-ff066480-b4c8-11eb-89a2-b8370b91f293.png)\r\n",
      "created_at": "2021-05-14T19:29:11Z",
      "updated_at": "2021-05-14T19:41:08Z"
    }
  ],
  "created_at": "2020-09-10T11:54:54Z",
  "number": 13614,
  "state": "open",
  "title": "Powershell SDK custom Host Error Output after Write-Error with Parameter ErrorRecord broken since Version 7",
  "updated_at": "2021-05-14T19:41:08Z"
}