{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14600",
  "author": "doctordns",
  "body": "## Summary of the new feature/enhancement\r\n\r\n<!-- \r\nA clear and concise description of what the problem is that the new feature would solve.\r\nTry formulating it in user story style (if applicable):\r\n'As a user I want X so that Y.' with X being the being the action and Y being the value of the action.\r\n-->\r\n\r\nWhen PowerShell 7 imports a module, it invokes compatibility mode when it finds a module not fully supported in PowerShell Core/7. This allows the cmdlets to be used and in most cases works well.\r\n\r\nIf, however, the module has display XML that helps format the output nicely, such XML is not imported. This results in less nice output. An easy workaround is to manually import the XML into the current session and then all works well.\r\n\r\nHere is an example:\r\n\r\n```Console\r\nPS C:\\Foo> # Import Server Manager \r\nPS C:\\Foo> Import-Module -Name ServerManager     \r\nWARNING: Module ServerManager is loaded in Windows PowerShell using WinPSCompatSession remoting session; please \r\nnote that all input and output of commands from this module will be deserialized objects. If you want to load this module into PowerShell please use 'Import-Module -SkipEditionCheck' syntax.                                                      \r\nPS C:\\Foo> # Get features and view sub-optimal output                                                                                                                            PS C:\\Foo> Get-WindowsFeature -Name \"*PowerShell*\"\r\n\r\nDisplay Name                                            Name                       Install State\r\n------------                                            ----                       -------------\r\n                                                        RSAT-Clustering-PowerS\u2026        Available\r\n                                                        RSAT-AD-PowerShell             Available\r\n                                                        Hyper-V-PowerShell             Available\r\n                                                        RSAT-RemoteAccess-Powe\u2026        Available\r\n                                                        PowerShellRoot                 Installed\r\n                                                        PowerShell                     Installed\r\n                                                        PowerShell-V2                    Removed\r\n                                                        WindowsPowerShellWebAc\u2026        Available\r\n\r\nPS C:\\Foo> # Import the XML\r\nPS C:\\Foo> $SMFolder = \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\Modules\\ServerManager\"\r\nPS C:\\Foo> Update-FormatData -Prepend $SMFolder\\*.Format.PS1XML\r\nPS C:\\Foo> # Retest\r\nPS C:\\Foo> Get-WindowsFeature -Name \"*PowerShell*\"\r\n\r\nDisplay Name                                            Name                       Install State\r\n------------                                            ----                       -------------\r\n            [ ] Failover Cluster Module for Windows Po\u2026 RSAT-Clustering-PowerS\u2026        Available\r\n            [ ] Active Directory module for Windows Po\u2026 RSAT-AD-PowerShell             Available\r\n            [ ] Hyper-V Module for Windows PowerShell   Hyper-V-PowerShell             Available\r\n            [ ] Remote Access module for Windows Power\u2026 RSAT-RemoteAccess-Powe\u2026        Available\r\n[X] Windows PowerShell                                  PowerShellRoot                 Installed\r\n    [X] Windows PowerShell 5.1                          PowerShell                     Installed\r\n    [ ] Windows PowerShell 2.0 Engine                   PowerShell-V2                    Removed\r\n    [ ] Windows PowerShell Web Access                   WindowsPowerShellWebAc\u2026        Available\r\n```\r\n\r\n## Proposed technical implementation details (optional)\r\n\r\n<!-- \r\nA clear and concise description of what you want to happen.\r\nConsider providing an example PowerShell experience with the expected result.\r\n-->\r\nHave Import module look inside the module and automatically import any Type or FormatXML.\r\n\r\nIf necessary, have a ``-ImportFormatXML`` and ``-ImportTypeXML`` switches to force the import (or deny it explicitly).\r\n\r\nAnother example of this issue is #14595 \r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @anmenaga ",
      "created_at": "2021-01-12T13:39:05Z",
      "updated_at": "2021-01-12T13:39:05Z"
    },
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "A small note: IIRC compatibility mode uses implicit remoting and when we remote, we don't bring the formatting XML across because it can contain scriptblocks which opens up the possibility of code injection attacks. In this case, since we trust both ends, we could special case the scenario but we'd have to be careful not to break security for the general case. Another potential issue is that any code that is brought across could fail since it may depend on types that aren't present. ",
      "created_at": "2021-01-16T04:05:16Z",
      "updated_at": "2021-01-16T04:05:16Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "I would have thought we could bring in any xml that is in System32 as an exception. It would have been nice had they all been signed. \r\n\r\nHaving worked with many of the modules, I've seen no issues with importing the XML with respect to non-existent types. Of \r\ncourse that is not to say there isn't any.\r\n\r\nAnd to mitigate the risk, what about a ``-ImportFormatXML`` switch to ``Import-Module``? By default, no xml gets imported, but if the switch is set, then it would be. That would let the user decide.\r\n\r\n",
      "created_at": "2021-01-28T21:55:26Z",
      "updated_at": "2021-01-28T21:55:26Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "BUMP:\r\n\r\nAny chance of getting this as an experimental feature for 7.3?\r\n\r\nI suck at C# and can't quite work out where to add the code to ImportModuleCommand.cs.\r\n\r\nAnd would it be a good idea to add to the telemetry to see how many type and format XML files get imported too??",
      "created_at": "2021-11-11T11:32:53Z",
      "updated_at": "2021-11-11T11:32:53Z"
    }
  ],
  "created_at": "2021-01-12T13:10:34Z",
  "number": 14600,
  "state": "open",
  "title": "Enable Import-Module to also load Display XML in Compatibility mode",
  "updated_at": "2021-11-11T11:32:54Z"
}