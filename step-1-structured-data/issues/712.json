{
  "_url": "https://github.com/PowerShell/PowerShell/issues/712",
  "author": "jpsnover",
  "body": "A number of important things use this including:\n\nPS> PowerShell {ls}\n",
  "closed_at": "2016-04-22T18:49:15Z",
  "comments": [
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "The example looks like what one would pass via the `--command`/`-c` flag, or the `[script]` argument. `-EncodedCommand` wouldn't have much of a place on Linux, as Bash will do your interpolation. Now, inside of PowerShell, passing to another PowerShell instance, I could see this being useful.\n",
      "created_at": "2016-03-21T15:35:55Z",
      "updated_at": "2016-03-21T15:35:55Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "See [here](https://blogs.msdn.microsoft.com/timid/2014/03/26/powershell-encodedcommand-and-round-trips/). The pieces are in place, we just need to support `-EncodedCommand`.\n",
      "created_at": "2016-04-13T17:53:52Z",
      "updated_at": "2016-04-13T17:53:52Z"
    },
    {
      "author": "jpsnover",
      "author_association": "CONTRIBUTOR",
      "body": "We should add a method GetEncodedCommand or property EncodedCommand to the ScriptBlock type (and maybe a function to go the other way around).\n\ne.g. {get-process }.GetEncodedCommand() \n",
      "created_at": "2016-04-14T23:10:10Z",
      "updated_at": "2016-04-14T23:10:10Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@palladia You implemented this, right? If so please add tests and close.\n",
      "created_at": "2016-04-20T23:38:44Z",
      "updated_at": "2016-04-20T23:38:44Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "I've got this @palladia.\n",
      "created_at": "2016-04-21T23:00:21Z",
      "updated_at": "2016-04-21T23:00:21Z"
    },
    {
      "author": "palladia",
      "author_association": "CONTRIBUTOR",
      "body": "I've revisited this a bit, and I'm more confused than ever on whether I implemented this correctly.  If you search 64-bit encoding, some websites say to use System.Text.Encoding.Unicode, and some say to use System.Text.Encoding.UTF8.  Unfortunately, they aren't compatible.  From my testing, Unicode generates an extra byte per character.\n",
      "created_at": "2016-04-21T23:12:19Z",
      "updated_at": "2016-04-21T23:12:19Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Yeah I was talking with Jim about it. He suggests we use Unicode as PowerShell's original implementation does the same.\n\nThe problem is that this breaks compatibility with Linux where most things are UTF8 (i.e. if you do `echo get-location | base64` and use that as the input, it fails).\n\nWe _could_ be platform specific about it by using Unicode on Windows and UTF8 on Linux, but should we?\n",
      "created_at": "2016-04-21T23:17:13Z",
      "updated_at": "2016-04-21T23:17:13Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "I have a branch up that adds tests and swaps it to Unicode, which is probably the right thing to do for now.\n",
      "created_at": "2016-04-21T23:17:43Z",
      "updated_at": "2016-04-21T23:17:43Z"
    },
    {
      "author": "mrnerdhair",
      "author_association": "NONE",
      "body": "Brief idea: I don't think there's a valid character for a script to start with that would cause the second byte of a utf-16 encoding to be anything other than 0x00, and I don't think a valid utf-8 script longer than 1 byte can have 0x00 as the second byte. (BOMs notwithstanding, but those are well-defined.) I've struggled with the cross-platformness of -EncodedCommand before, and been equally frustrated at the needlessly space-wasting utf-16 encoding making the base64 strings *just* too long for, say, including in an unattend.xml file (where command length is limited to 255 characters).\r\n\r\nCouldn't we perform encoding detection between UTF-8 and UTF-16, and do it on both platforms? Pseudocode:\r\n\r\n    System.Text.Encoding detectEncoding(byte[] cmd) {\r\n        if (cmd.length <= 1) return System.Text.Encoding.UTF8;\r\n        if (cmd[0] == 0xFF && cmd[1] == 0xFE) return System.Text.Encoding.Unicode;\r\n        if (cmd.length >= 3 && cmd[0] == 0xEF && cmd[1] == 0xBB && cmd[2] == 0xBF) return System.Text.Encoding.UTF8;\r\n        if (cmd[1] == 0x00) return System.Text.Encoding.Unicode;\r\n        return System.Text.Encoding.UTF8;\r\n    }\r\n\r\nI'd be happy to work up a PR if needed.",
      "created_at": "2018-01-15T16:42:04Z",
      "updated_at": "2018-01-15T16:42:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@reidrankin Sorry for the late reply. Could you please open new Issue to discuss?",
      "created_at": "2018-02-08T06:50:42Z",
      "updated_at": "2018-02-08T06:50:42Z"
    }
  ],
  "created_at": "2016-03-21T12:04:56Z",
  "number": 712,
  "state": "closed",
  "title": "Need to implement PowerShell -EncodedCommand",
  "updated_at": "2018-02-08T06:50:42Z"
}