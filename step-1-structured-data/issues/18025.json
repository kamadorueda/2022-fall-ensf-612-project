{
  "_url": "https://github.com/PowerShell/PowerShell/issues/18025",
  "author": "kilasuit",
  "body": "### Summary of the new feature / enhancement\r\n\r\nWe already have the ability to create an array of numbers in sequence like `0..100`, therefore it would be nice to be able to do the same thing for the Alphabet\r\n\r\n### Proposed technical implementation details (optional)\r\n\r\nFor the most commonly used alphabet in coding being based on Latin, i.e. the A-Z so therefore an accelerator for `a..z` and `A..Z` would be quite useful & more so if it enabled say `e..n` as an expansion too.\r\n\r\nThis does open up to the potential ask for additional alphabet expansions but in the first instance I think that Latin alphabet should be added as a PoC & would make a good community contribution",
  "closed_at": "2022-09-07T00:01:19Z",
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "**Removed** I should have tested before posting\r\n\r\n",
      "created_at": "2022-09-04T00:51:02Z",
      "updated_at": "2022-09-04T09:37:41Z"
    },
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "PowerShell already has this, you just need to quote the letters: `\"a\"..\"z\"`",
      "created_at": "2022-09-04T09:13:20Z",
      "updated_at": "2022-09-04T09:13:20Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> PowerShell already has this, you just need to quote the letters: `\"a\"..\"z\"`\r\n\r\nThis is case sensitive   `A..z`  26 Uppercase letters, 6 symbols and 26 lower case letters `a..Z`  works backwards. \r\n \r\nHowever numbers wrapped in quotes are converted to numbers. So \"/\"..\":\"  includes all the digits, but \"0\"..\":\" is gives an error \r\n   \r\n",
      "created_at": "2022-09-04T09:44:58Z",
      "updated_at": "2022-09-04T09:44:58Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> PowerShell already has this\r\n\r\nThis doesn't always work correctly for non-English alphabets.\r\n```powershell\r\nPS > \"\u0434\"..\"\u0436\"  # it has to be \"\u0434\", \"\u0435\", \"\u0451\", \"\u0436\"\r\n\u0434\r\n\u0435\r\n\u0436\r\n\r\nPS > [int[]][char[]] \"\u0434\u0435\u0451\u0436\"\r\n1076\r\n1077\r\n1105    # !!\r\n1078\r\n\r\nPS > -join (\"\u0430\"..\"\u0435\" + \" \u0451 \" + \"\u0436\"..\"\u044f\")   # workaround\r\n\u0430\u0431\u0432\u0433\u0434\u0435 \u0451 \u0436\u0437\u0438\u0439\u043a\u043b\u043c\u043d\u043e\u043f\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044a\u044b\u044c\u044d\u044e\u044f\r\n```",
      "created_at": "2022-09-04T20:50:25Z",
      "updated_at": "2022-09-04T21:20:34Z"
    },
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "> This doesn't always work correctly for non-English alphabets.\r\n\r\nThat's true but how do you propose it should work for other languages? In Danish the alphabet ends in `Z,\u00c6,\u00d8,\u00c5` and in Swedish it ends in `Z,\u00c5,\u00c4,\u00d6`. Note how `\u00c5` is used in both alphabets. What should happen if I type in `A..\u00c5`? Do I get the Danish or Swedish alphabet? If you say it depends on the computer language then what should happen when the computer is using an entirely different language like English?  \r\nI think it's best if features like this are consistent, regardless of the system language and while ideally Danish should be the international standard, I think English is a good enough compromise.",
      "created_at": "2022-09-04T21:48:31Z",
      "updated_at": "2022-09-04T21:48:31Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> I think English is a good enough compromise\r\n\r\nI'm not arguing, I just showed the presence of a problem. In addition, it is not so important from the point of view of practical application, in rare cases it is possible to find a solution for once. The main thing is to know that there are pitfalls.",
      "created_at": "2022-09-05T06:44:31Z",
      "updated_at": "2022-09-05T06:44:31Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> > I think English is a good enough compromise\r\n> \r\n> I'm not arguing, I just showed the presence of a problem. In addition, it is not so important from the point of view of practical application, in rare cases it is possible to find a solution for once. The main thing is to know that there are pitfalls.\r\n\r\nIt seems to work as \r\n``` [int][char]\"a\" .. [int][char]\"Z\"  -as [char[]] ```\r\nAlthough cultures are aware of different alphabet sequences this isn't , and there isn't a simple way to tell an operator like .. to use invariant or local culture.  So extra characters which were not in the original ASCII 65-90 and 97-122 will always be an issue. 9\r\n\r\n",
      "created_at": "2022-09-05T08:27:08Z",
      "updated_at": "2022-09-05T08:27:08Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> It seems to work as\r\n\r\nI think so too. Sorting is not lexical, but numerical by character codes. This problem is global, not just powershell or .Net, and is rooted in the past.",
      "created_at": "2022-09-05T10:21:52Z",
      "updated_at": "2022-09-05T10:21:52Z"
    },
    {
      "author": "kasini3000",
      "author_association": "NONE",
      "body": "my share:\r\n```\r\n'z'..'a'\r\n'c'..'g'\r\n'A'..'Z'\r\n\r\nnon-english\uff1a\r\n[char]27721 #\u6c49\r\n[char]27726 #\u6c4e\r\n'\u6c49'..'\u6c4e' #\u6c49\uff0c\u6c4a\uff0c\u6c4b\uff0c\u6c4c\uff0c\u6c4d\uff0c\u6c4e\u3002\r\n\r\n'\u3220'..'\u3229' #\u3220\uff0c\u3221\uff0c.......\u3229\uff0c\r\n'\u2460'..'\u2469'\r\n'\u246a'..'\u2473'\r\n'\u32c0'..'\u32cb'\r\n'\u33e0'..'\u33fe'\r\n'\u3358'..'\u3370'\r\n'\u3248'..'\u324f'\r\n```",
      "created_at": "2022-09-05T14:31:25Z",
      "updated_at": "2022-09-05T14:32:07Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-09-07T00:01:18Z",
      "updated_at": "2022-09-07T00:01:18Z"
    }
  ],
  "created_at": "2022-09-03T22:07:58Z",
  "labels": [
    "Resolution-Answered"
  ],
  "number": 18025,
  "state": "closed",
  "title": "add ability for Alphabet expansions",
  "updated_at": "2022-09-07T00:01:19Z"
}