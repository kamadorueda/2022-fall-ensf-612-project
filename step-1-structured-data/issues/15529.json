{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15529",
  "author": "davidBar-On",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nSuggested fix to issue #3810 for Tab Completion in Nested mode.  This is to make sure all local variables and aliases are included in the tab-completion or Get-Alias.  The change is to add local variable and aliases to `CommandScope` before executing read line.  The changes are required at least when entering the nested mode from a script by Write-Debug suspend selection.  Without this change, all variables and aliases defined in the script or after the suspend are **not** included in the tab-completion or Get-Alias.\r\n\r\n Although the suggested change seem to work well, there are some potential issues with the it.  However, it seem that if required they can be better resolved when the suggested changes are available (this is why I submit this PR without trying to resolve these issues first).\r\n\r\n**The potential issues are:**\r\n1. **No test cases were added**.  I didn't find any available test of the **Write-Debug Suspend mode**, so I assume this mode is tested only manually.\r\n2. **There may be a better place to add the changes**. It may be that that adding the local variables/aliases to the `CommandScope` should be done when it is generated (in case it is re-recreated before each read line, to make sure latest locals are added).\r\n3. **New API may be defined for adding the locals to the scope**.   However, it seemed to me that until there is a decision about final code for adding the variables to the scope, it is better to have all the code in one place, so it will be clear what is done.\r\n\r\n## PR Context\r\n\r\nResolve issue #3810.\r\n\r\n## PR Checklist\r\n\r\n- [X ] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [X] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [X] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [X] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [X] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [X] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and opened an issue in the relevant tool repository. This may include:\r\n        - [ ] Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode\r\n        (which runs in a different PS Host).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n",
  "closed_at": "2021-09-03T18:00:32Z",
  "comments": [
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2021-06-14T14:00:09Z",
      "updated_at": "2021-06-14T14:00:09Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Leaking variables across scopes does not seem like the right way to fix this rare and unusual scenario.\r\n@daxian-dbw can you take a look?",
      "created_at": "2021-06-14T15:41:55Z",
      "updated_at": "2021-06-14T15:41:55Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "I would wait on review from @daxian-dbw who is on vacation right now. Maybe @PowerShell/wg-powershell-engine can help in reviewing this.",
      "created_at": "2021-07-28T19:31:50Z",
      "updated_at": "2021-07-28T19:31:50Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2021-08-05T02:00:43Z",
      "updated_at": "2021-08-05T02:00:43Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "We looked over this in the Engine working group today (8/5/2021). We're in agreement with @PaulHigin's assertion here; copying variables to additional scopes like this may have unintended side effects. Especially as the condition we're using is based around the command name, it may be possible possible to trigger the behaviour in cases that we aren't expecting by simply defining new functions matching those names.\r\n\r\nFrom the discussion in the linked issue and the code change here, it seems like a potentially more appropriate solution would be to either:\r\n\r\n- Give the tab completion code access to the previous scope in these specific cases, _or_\r\n- Ensure that the scope given to the ReadLine call is a child of the original, currently-executing scope.\r\n\r\nThis change seems somewhat heavy-handed, and there aren't any limits as to how much we're copying from one scope to another. It seems odd that the values are available when executing the prompt, but not during tab completion, which seems to point to there being other possible solutions that shouldn't require copying the variables across scopes. \r\n\r\nWe're also concerned about what might happen if this were to occur in a remote debugging session; would this work & serialise data? Break completely? Simply do nothing?\r\n\r\nIf there's a more direct solution available, it would be preferable to go that route instead.",
      "created_at": "2021-08-05T23:07:59Z",
      "updated_at": "2021-08-05T23:11:58Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as stale because it has been marked as requiring author feedback but has not had any activity for **15 days**. It will be closed if no further activity occurs **within 10 days of this comment**.",
      "created_at": "2021-08-24T08:00:36Z",
      "updated_at": "2021-08-24T08:00:36Z"
    }
  ],
  "created_at": "2021-06-07T10:10:10Z",
  "number": 15529,
  "state": "closed",
  "title": "Fix for Tab Completion in Nested mode",
  "updated_at": "2021-09-03T18:00:32Z"
}