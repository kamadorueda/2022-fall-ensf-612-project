{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7898",
  "author": "kvprasoon",
  "body": "Just a thought, \r\n\r\nBelow Objects for this example.\r\n````\r\n$r=[PSCUstomObject]@{\r\n    Column1   = [PSCUstomObject]@{NColumn1='NR1';NColumns2='NR2'}\r\n    Columns2 = 'R2'\r\n}\r\n\r\n$t=[PSCUstomObject]@{\r\nColumn1   = [PSCUstomObject]@{NColumn1='NR11';NColumns2='NR2'}\r\nColumns2 = 'R2'}\r\n````\r\n\r\nWhat we have now\r\n-----------------\r\n```\r\ncompare $r.Column1.NColumn1 $t.Column1.NColumn1\r\n\r\n#or\r\n\r\ncompare $r.Column1 $t.Column1 -Property NColumn1\r\n\r\n#or\r\n(gps|select -ExpandProperty starttime).day\r\n```\r\n\r\nWhat I am proposing\r\n--------------------\r\n````\r\ncompare $r $t -Property Column1.NColumn1\r\n\r\n#or\r\nGet-Process | Select-Object -Property StartTime.Day\r\n````\r\n\r\nJust a low priority/up-for-grabs feature request.",
  "closed_at": "2018-10-02T08:54:20Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Please clarify - we already have `Compare-Object -Property`.",
      "created_at": "2018-09-30T18:11:20Z",
      "updated_at": "2018-09-30T18:11:20Z"
    },
    {
      "author": "kvprasoon",
      "author_association": "CONTRIBUTOR",
      "body": "My suggestion is not just for `Compare-Object` , see below use case for `Get-Process`\r\n\r\n````\r\nGet-Process | Select-Object -Property StartTime.Day\r\n\r\n#instead of\r\n(Get-Process | Select-Object -ExpandProperty StartTime).Day\r\n#or\r\nGet-Process | Select-Object -First 1 -ExpandProperty StartTime | Select-Object -ExpandProperty Day\r\n````\r\nI'm sure this will not be a huge value add, but just a thought.",
      "created_at": "2018-09-30T18:46:05Z",
      "updated_at": "2018-09-30T18:46:05Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Even for things like Select-Object -Property this could be useful.\r\n\r\nHowever, given that a property name that includes a period is currently a valid name, how is Select-Object (or any other cmldet that works with `-Property`) to be able to distinguish the intent?\r\n\r\n```powershell\r\n$obj = [PSCustomObject]@{\r\n    'Property.Name' = 'test'\r\n    Property = [PSCustomObject]@{\r\n        Name = 'this will not be selected'\r\n    }\r\n}\r\n\r\n$obj | Select-Object -Property Property.Name\r\n\r\n$Obj.'Property.Name'\r\n$Obj.Property.Name # different to above!\r\n```\r\n\r\nSo really, this can't be done neatly any way you slice it, because there's not really any 'invarid characters' in a property name. Anything that *might* be normally invalid or read differently can still be accepted as a property name by simply enclosing it in quotes.",
      "created_at": "2018-09-30T19:28:29Z",
      "updated_at": "2018-09-30T23:39:25Z"
    },
    {
      "author": "kvprasoon",
      "author_association": "CONTRIBUTOR",
      "body": "Yes, I know such property with dot can exist, but Just posted here when I got the thought.",
      "created_at": "2018-10-01T03:54:47Z",
      "updated_at": "2018-10-01T03:54:47Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "No worries... just wondering if you had any ideas on potential solutions.\r\n\r\nPerhaps we could consider use of escape characters like the tilde a potential method here?\r\n\r\nGiven the above object example:\r\n\r\n```powershell\r\n$obj | Select-Object -Property 'Property`.Name'\r\n```\r\nBut even then I suppose it's *possible* to use a tilde in a property name... \ud83d\ude15 ",
      "created_at": "2018-10-01T12:38:39Z",
      "updated_at": "2018-10-01T12:38:39Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "#6509 suggested the same feature in the context of `ForEach-Object` and `Where-Object` and ran into the same problem.\r\n\r\nArguably, interpreting `$obj | Select-Object Property.Name` as access to the _nested_  `.Property.Name` property is the much more common use case and should be the default, but changing that now would be a breaking change.\r\n\r\nEven if we didn't have this backward-compatibility problem, we'd have to come up with an opt-in mechanism for the as-is interpretation of the name (where `Property.Name` _as a whole_ should be considered the (single) property name):\r\n\r\n* Using single- or double-quoting for that is not really an option, given that in argument mode there's normally no distinction between arguments `foo.bar` and `'foo.bar'`.\r\n\r\n* ``'foo`.bar'`` - a combination of a _literal_ string with an embedded _literal_ `` ` `` to be interpreted by the _target command_  as an escape char. -  would work in principle, but it is awkward.   \r\nThat said, this approach is already required if you want to escape metacharacters in wildcard expressions.\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-10-02T03:10:18Z",
      "updated_at": "2018-10-02T03:10:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@kvprasoon @mklement0 Do you agree move the Issue to #6509 for tracking?",
      "created_at": "2018-10-02T05:24:21Z",
      "updated_at": "2018-10-02T05:24:21Z"
    },
    {
      "author": "kvprasoon",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Both are kind of same, I'm ok for having one issue for this.",
      "created_at": "2018-10-02T07:58:33Z",
      "updated_at": "2018-10-02T07:58:33Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @iSazonov. I've generalized the description of the linked issue to incorporate @kvprasoon's suggestion and also generalized the title.",
      "created_at": "2018-10-02T13:05:50Z",
      "updated_at": "2018-10-02T13:05:50Z"
    }
  ],
  "created_at": "2018-09-30T14:30:16Z",
  "number": 7898,
  "state": "closed",
  "title": "[Feature] -Property parameter to support Child properties using dot operator",
  "updated_at": "2018-10-02T13:05:50Z"
}