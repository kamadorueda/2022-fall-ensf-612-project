{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16994",
  "author": "jborean93",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nCreate a symlink with a name that exceeds ~80 chars\r\n\r\n```bash\r\nln -s \"$( which pwsh )\" abc_abc_abc_abc_abc_abc_abc_abc_abc_abc_abc_abc_abc_abc_abc_abc_abc_abc_abc_abc_pwsh\r\n./abc_abc_abc_abc_abc_abc_abc_abc_abc_abc_abc_abc_abc_abc_abc_abc_abc_abc_abc_abc_pwsh\r\n\r\n$connInfo = [System.Management.Automation.Runspaces.NamedPipeConnectionInfo]::new($pid)\r\n$rp = [RunspaceFactory]::CreateRunspace($connInfo)\r\n$rp.Open()\r\n$Error[0] | Select *\r\n```\r\n\r\nThis is happening as the name of the Unix Domain Socket created for PowerShell remoting will exceed 108 characters and PowerShell attempts to trim this to fit in that length but has a few problems:\r\n\r\n* The logic for `pipeNameBuilder.Remove(MaxNamedPipeNameSize + 1, charsToTrim);` is incorrect and causes an exception (detailed below)\r\n* The length calculation does not take into account a different tmpdir + the `CoreFXPipe_` prefix\n\n### Expected behavior\n\n```console\nThe Runspace is opened without any errors.\n```\n\n\n### Actual behavior\n\n```console\nConnection fails\n```\n\n\n### Error details\n\n```console\nPSMessageDetails      :\r\nException             : System.Management.Automation.MethodInvocationException: Exception calling \"Open\" with \"0\" argument(s): \"An error has occurred which PowerShell cannot handle. A remote session might\r\n                        have ended.\"\r\n                         ---> System.Management.Automation.Remoting.PSRemotingDataStructureException: An error has occurred which PowerShell cannot handle. A remote session might have ended.\r\n                         ---> System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection. (Parameter 'length')\r\n                           at System.Text.StringBuilder.Remove(Int32 startIndex, Int32 length)\r\n                           at System.Management.Automation.Remoting.NamedPipeUtils.CreateProcessPipeName(Process proc, String appDomainName)\r\n                           at System.Management.Automation.Remoting.NamedPipeUtils.CreateProcessPipeName(Int32 procId, String appDomainName)\r\n                           at System.Management.Automation.Remoting.Client.NamedPipeClientSessionTransportManager.CreateAsync()\r\n                           at System.Management.Automation.Remoting.ClientRemoteSessionDSHandlerImpl.SendNegotiationAsync(RemoteSessionState sessionState)\r\n                           at System.Management.Automation.Remoting.ClientRemoteSessionDSHandlerImpl.HandleStateChanged(Object sender, RemoteSessionStateEventArgs arg)\r\n                           at System.Management.Automation.Remoting.ClientRemoteSessionDSHandlerStateMachine.RaiseStateMachineEvents()\r\n                           at System.Management.Automation.Remoting.ClientRemoteSessionDSHandlerStateMachine.ProcessEvents()\r\n                           --- End of inner exception stack trace ---\r\n                           at System.Management.Automation.Runspaces.AsyncResult.EndInvoke()\r\n                           at System.Management.Automation.Runspaces.Internal.RunspacePoolInternal.EndOpen(IAsyncResult asyncResult)\r\n                           at System.Management.Automation.Runspaces.Internal.RemoteRunspacePoolInternal.Open()\r\n                           at System.Management.Automation.RemoteRunspace.Open()\r\n                           at CallSite.Target(Closure , CallSite , Object )\r\n                           --- End of inner exception stack trace ---\r\n                           at System.Management.Automation.ExceptionHandlingOps.ConvertToMethodInvocationException(Exception exception, Type typeToThrow, String methodName, Int32 numArgs, MemberInfo\r\n                        memberInfo)\r\n                           at CallSite.Target(Closure , CallSite , Object )\r\n                           at System.Dynamic.UpdateDelegates.UpdateAndExecute1[T0,TRet](CallSite site, T0 arg0)\r\n                           at System.Management.Automation.Interpreter.DynamicInstruction`2.Run(InterpretedFrame frame)\r\n                           at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\nTargetObject          :\r\nCategoryInfo          : NotSpecified: (:) [], MethodInvocationException\r\nFullyQualifiedErrorId : PSRemotingDataStructureException\r\nErrorDetails          :\r\nInvocationInfo        : System.Management.Automation.InvocationInfo\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\nPipelineIterationInfo : {}\n```\n\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.1\r\nPSEdition                      Core\r\nGitCommitId                    7.2.1\r\nOS                             Linux 5.16.12-200.fc35.x86_64 #1 SMP PREEMPT Wed Mar 2 19:06:17 UTC 2022\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "I tried and no errors. ArcoLinux, pwsh 7.2.1",
      "created_at": "2022-03-14T12:14:25Z",
      "updated_at": "2022-03-14T12:14:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> This is happening as the name of the Unix Domain Socket created for PowerShell remoting will exceed 108 characters and PowerShell attempts to trim this to fit in that length but has a few problems:\r\n\r\nFrom https://man7.org/linux/man-pages/man7/unix.7.html\r\n>When coding portable applications, keep in mind that some\r\n       implementations have sun_path as short as 92 bytes.\n\n<blockquote><div><strong><a href=\"https://man7.org/linux/man-pages/man7/unix.7.html\">unix(7) - Linux manual page</a></strong></div></blockquote>",
      "created_at": "2022-03-14T12:15:44Z",
      "updated_at": "2022-03-14T12:15:46Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "It does say that but Linux uses 108 (including NULL) but macOS is set to 104 so that would have to be the minimum, not 108). The 92 length came from a version of HP-UX but considering pwsh/.NET doesn't run on that platform I think we can safely ignore that.",
      "created_at": "2022-03-14T20:20:06Z",
      "updated_at": "2022-03-14T20:20:06Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Is it critical to have 10 byte more or less in the name/path?\r\n\r\nWe have to implement tricky code to handle the limitation. Maybe ask .Net for new public API to get the const `UnixDomainSocketEndPoint.MaxPathLength`? I guess this could be approved in days.\r\n\r\n/cc @PaulHigin Thoughts?",
      "created_at": "2022-03-15T04:32:39Z",
      "updated_at": "2022-03-15T04:35:05Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "> Is it critical to have 10 byte more or less in the name/path?\r\n\r\nIt isn't but it's a problem that needs to be solved as currently it is meant to trim the pipe name but fails to do so. The end result is really should it be trimming at all and if not do we have a better way to reduce the risk of having a long pipe name. This is being investigated in https://github.com/PowerShell/PowerShell/pull/16995 and requires some pending input from the security team.\r\n\r\n> Maybe ask .Net for new public API to get the const UnixDomainSocketEndPoint.MaxPathLength\r\n\r\nIt might be possible if .NET creates some C/C++ code that does `sizeof(sockaddr_un.sun_path);` or something like that and allows .NET to retrieve that info. Personally I prefer to avoid all this complexity and just have pwsh attempt to create the pipe rather than attempting to trim it at all. Except for the very rare cases this is essentially what happens today.",
      "created_at": "2022-03-15T05:47:31Z",
      "updated_at": "2022-03-15T05:47:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> It might be possible if .NET creates some C/C++ code that does `sizeof(sockaddr_un.sun_path);`\r\n\r\nThey does\r\nhttps://github.com/dotnet/runtime/blob/39fb7f7826270f00b856e3e9a13165c07dec87cc/src/libraries/System.Net.Sockets/src/System/Net/Sockets/UnixDomainSocketEndPoint.Unix.cs#L10-L26\n\n<blockquote><img src=\"https://opengraph.githubassets.com/2917892713e870c7ea36c3a03b76ee1e78e3f73938b6e4887696c20a07f9f3bf/dotnet/runtime\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/dotnet/runtime\">runtime/UnixDomainSocketEndPoint.Unix.cs at 39fb7f7826270f00b856e3e9a13165c07dec87cc \u00b7 dotnet/runtime</a></strong></div><div>.NET is a cross-platform runtime for cloud, mobile, desktop, and IoT apps. - runtime/UnixDomainSocketEndPoint.Unix.cs at 39fb7f7826270f00b856e3e9a13165c07dec87cc \u00b7 dotnet/runtime</div></blockquote>",
      "created_at": "2022-03-15T09:20:19Z",
      "updated_at": "2022-03-15T09:20:21Z"
    }
  ],
  "created_at": "2022-03-14T04:49:06Z",
  "number": 16994,
  "state": "open",
  "title": "non-Windows Named Pipe Server Length Limitation is calculated inproperly",
  "updated_at": "2022-05-16T18:40:22Z"
}