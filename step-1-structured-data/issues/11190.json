{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11190",
  "author": "dronkoff",
  "body": "# Summary of the new feature/enhancement\r\n\r\n<!-- \r\nA clear and concise description of what the problem is that the new feature would solve.\r\nTry formulating it in user story style (if applicable):\r\n'As a user I want X so that Y.' with X being the being the action and Y being the value of the action.\r\n-->\r\n\r\nIf one module depends on another module and we want these modules to be installed together using `Install-Module` we use `RequiredModules` attribute in psd1 file.\r\nThe issue here is that modules from `RequiredModules` will be also imported during the original module import process. If module has many dependencies, like 30 for example, this behavior will slow down module import a lot.\r\nAs an example look at [https://www.powershellgallery.com/packages/AzSK/4.3.0](https://www.powershellgallery.com/packages/AzSK/4.3.0) it has many references to Azure modules, which is expected, but all these references are preloaded during module import. \r\n`Import-Module AzSK` can take 20-50 seconds depending on machine speed and most of this time is lost on module preloading.\r\nThere is no need to preload all these modules. Afaik, only couple of them can be preloaded and the rest can be loaded in a lazy manner.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\n<!-- \r\nA clear and concise description of what you want to happen.\r\nConsider providing an example PowerShell experience with expected result.\r\n-->\r\n\r\nWith PowerShell module base and code base growing there should be a way to describe module in that way, so module author can specify 2 different lists of references - one list for modules that should be preloaded during module import, and a separate list for modules that just should be installed together but not preloaded.\r\nLet's say the behavior of `RequiredModules` attribute remains the same for backward compatibility purposes, and a new attribute like `ReferencedModules` is introduced that has a list of modules that are installed together but modules from this list are not preloaded during `Import-Module` so module can utilize lazy loading behavior for referenced modules and speed up it's import time.",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I guess most of the slow down comes from AppLocker. See #11074",
      "created_at": "2019-11-28T11:55:35Z",
      "updated_at": "2019-11-28T11:55:35Z"
    },
    {
      "author": "dronkoff",
      "author_association": "NONE",
      "body": "Fortunately, the issue with AzSK used as an example is easily reproducible. \r\nI've used Trace-Command to get the timings.\r\n`Trace-Command -Name ('Modules', 'FileSystemProvider') -Expression {Import-module AzSK} -ListenerOption 'DateTime' -PSHost`\r\nHow can I trace to be sure if it's AppLocker or not?",
      "created_at": "2019-11-28T15:55:30Z",
      "updated_at": "2019-11-28T15:55:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "https://github.com/microsoft/perfview is great tool to discover allocations and performance issues.\n\n<blockquote><img src=\"https://avatars2.githubusercontent.com/u/6154722?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/microsoft/perfview\">microsoft/perfview</a></strong></div><div>PerfView is a CPU and memory performance-analysis tool - microsoft/perfview</div></blockquote>",
      "created_at": "2019-11-28T17:10:36Z",
      "updated_at": "2019-11-28T17:10:40Z"
    },
    {
      "author": "dronkoff",
      "author_association": "NONE",
      "body": "Thanks. It'd be nice to know what particular ETW events from what provider to collect to make observations of PowerShell and AppLocker performance.",
      "created_at": "2019-11-28T17:14:09Z",
      "updated_at": "2019-11-28T17:14:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Use default settings. This will works well for your case.",
      "created_at": "2019-11-28T17:15:56Z",
      "updated_at": "2019-11-28T17:15:56Z"
    },
    {
      "author": "dronkoff",
      "author_association": "NONE",
      "body": "The defaults are: Kernel Base, .NET, Cpu Samples and TPL providers. How they'll help to understand what's happening inside PowerShell? It doesn't consume memory or CPU during module import.",
      "created_at": "2019-11-28T17:28:02Z",
      "updated_at": "2019-11-28T17:28:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "See my screenshot https://github.com/PowerShell/PowerShell/issues/11074#issuecomment-559456002\r\n\r\nPerfView collects .Net events and with pdb symbols show all .Net callsites to you.\r\n\r\nIf you want to get more (full system trace, not only your .Net allication) you could use Windows Performance tools (WPR/WPA).",
      "created_at": "2019-11-28T17:40:06Z",
      "updated_at": "2019-11-28T17:40:06Z"
    },
    {
      "author": "dronkoff",
      "author_association": "NONE",
      "body": "I know how PerfView works, thanks. The usual question with PerfView is how to analyse the collected data - what particular events to look at and how to aggregate them.\r\nIn context of this issue and your advise to use PerfView, taking into account that there are no predefined collector options and views for PowerShell events in PerfView the question rises - what ETW providers do you suggest to subscribe to and how to interpret collected events?",
      "created_at": "2019-11-28T17:56:18Z",
      "updated_at": "2019-11-28T17:56:18Z"
    }
  ],
  "created_at": "2019-11-25T16:59:49Z",
  "number": 11190,
  "state": "open",
  "title": "Separate module dependency from module preload logic",
  "updated_at": "2019-11-28T17:56:18Z"
}