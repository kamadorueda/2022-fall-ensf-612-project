{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13662",
  "author": "bender-the-greatest",
  "body": "## Summary of the new feature/enhancement\r\nSimilar to how it works in C#, or even using PowerShell's existing `Add-Member` cmdlet, under this feature request class properties would be able to define a `ScriptBlock` or use an `Attribute` to change how a class property's getter or setter works. If possible, being able to specify a private setter would also be beneficial to expose properties that can only be changed by class members.\r\n  \r\nSome cases where this would be useful:\r\n\r\n- Sort collection values before returning\r\n- Escape a string before it's set or gotten\r\n- Data validation before the property is set\r\n- Return localized values, especially useful if the class instance is expected to work with external data stored in a culture invariant format. Examples:\r\n  - Return a localized date\r\n  - Store a localized date in UTC or another timezone\r\n  - Return culture-specific data for the invoker\r\n  - Store culture-specific data in a culture-invariant way\r\n- Fire an event or update the value in a remote API when a property value is set \r\n- Store information about class access metadata, such as the last time the class was read or written to, and which Property was accessed \r\n\r\n## Proposed technical implementation details (optional)\r\n\r\nTake the following class definition representing an `InventoryItem` from the database of an in-house asset management system:\r\n\r\n```powershell\r\nusing namespace System.Data.SqlClient\r\n\r\nclass InventoryItem {\r\n  static [string] $InventoryItemsUrl\r\n  [int] $Id\r\n  [string] $FQDN\r\n  [string[]] $ItemNotes\r\n  [string[]] $IpAddresses\r\n  [DateTime] $ActiveSince\r\n\r\n  InventoryItem( [string]$connectionString, [string]$id ) {\r\n    # Query database and assign member properties the correct values based on the returned results\r\n  }\r\n}\r\n```\r\n\r\nAs is, this works fine for storing and retrieving information about the `InventoryItem`, but we have to code around not having access to getter and setter instructions. If we want to change how the getter or setter behaves (including treating the setter as \"private\"), we have to resort to hacky workarounds [like this](https://stackoverflow.com/q/63973656/584676).\r\n\r\nGetters and setters on some of these properties _could_ look something like this syntactically using `Attributes` without having to change the parser:\r\n\r\n```powershell\r\nclass InventoryItem {\r\n  [ClassPropertySetter(Scope=\"private\")]\r\n  static [string] $InventoryItemsUrl = 'https://assetmanager.company.tld/InventoryItems/'\r\n  [ClassPropertySetter(Scope=\"private\")]\r\n  [int] $Id\r\n  [ClassPropertySetter(Definition=\"set_ValidateFQDN\")]\r\n  [string] $FQDN\r\n  [string[]] $ItemNotes\r\n  [ClassPropertySetter(Definition=\"set_ValidateIPs\")]\r\n  [string[]] $IpAddresses\r\n  [ClassPropertyGetter(Definition=\"get_ActiveSinceLocalTime\")]\r\n  [ClassPropertySetter(Definition=\"set_ActiveSinceUTC\")]\r\n  [DateTime] $ActiveSince\r\n\r\n  InventoryItem( [string]$connectionString, [string]$id ) {\r\n    # Query database and assign member properties the correct values based on the returned results\r\n  }\r\n\r\n  hidden [void] set_ValidateFQDN( [string]$value ) {\r\n    # Validate that $value looks like an FQDN before setting\r\n  }\r\n\r\n  hidden [void] set_ValidateIPs( [string[]]$values ) {\r\n    # Validate that each element of $values looks like an IP address before setting\r\n  }\r\n\r\n  hidden [void] set_ActiveSinceUTC( [DateTime]$value ) {\r\n    # Convert $value to UTC time before setting\r\n  }\r\n\r\n  hidden [DateTime] get_ActiveSinceLocalTime() {\r\n    # Return $ActiveSince in the local time zone\r\n  }\r\n}\r\n```\r\n\r\nIn this case, `ClassPropertySetter` and `ClassPropertyGetter` both would take the same arguments - `Definition` is the member function name in the class to use for its get or set function, which said function must take exactly one parameter for a setter and zero for a getter. `Scope` would be one of \"public\" (default), \"private\", and possibly \"internal\" (where internal may only be invoked from the module which declared the class). Omitting either attribute would simply create the default getter or setter which defining the class already does today.",
  "closed_at": "2020-09-21T17:00:06Z",
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Duplicate of #2219",
      "created_at": "2020-09-20T11:48:22Z",
      "updated_at": "2020-09-20T11:48:22Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as duplicate and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-09-21T17:00:05Z",
      "updated_at": "2020-09-21T17:00:05Z"
    }
  ],
  "created_at": "2020-09-20T04:19:06Z",
  "labels": [
    "Resolution-Duplicate",
    "Issue-Enhancement",
    "WG-Language"
  ],
  "number": 13662,
  "state": "closed",
  "title": "Feature Request: Allow class properties to define behavior and scope for their getters and setters",
  "updated_at": "2020-09-21T17:00:06Z"
}