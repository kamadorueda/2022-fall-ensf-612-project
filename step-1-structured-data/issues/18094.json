{
  "_url": "https://github.com/PowerShell/PowerShell/issues/18094",
  "author": "LethiferousMoose",
  "body": "### Summary of Issues\r\n\r\nI was reading over the formatting and generation of help code a lot last month and I made note of some areas that are either missing functionality, are seemingly dead code, or cause inconsistencies.\r\n\r\n#### Missing from MAML Help\r\n- When using the default Extended help you get parameter aliases, function aliases, `parameterValueGroup` (which provides a list of valid values from the `ValidateSetAttribute`), and whether a parameter `isDynamic`. These all appear to be absent the moment you provide function documentation. #6694, #3006, #2869\r\n\r\n#### General Issues\r\n- `pipelineInput` for parameters is not using the `TrueFalseControl` in the the help formatters and is thus does not have locale support (is that exists) because it does not pull from a resource file (`HelpDisplayStrings`). **See Help_format_ps1xml**\r\n-There is a lot of duplicated code when creating remarks, alerts, examples, input types, and return types formatters, these could be created once in the array and reused. **See Help_format_ps1xml**\r\n- **HelpCommands.cs** doesn't handle parameter uniqueness and keeps returning all parameters that match the search criteria even when they have already been found (i.e. `Get-Help Get-Help -Parameter Name, Na* Nam*` would return the Name parameter 3 times):\r\n```csharp\r\n        private PSObject[] GetParameterInfo(HelpInfo helpInfo)\r\n        {\r\n            List<PSObject> parameterInfosList = new List<PSObject>(Parameter.Length);\r\n\r\n            foreach (var parameter in Parameter)\r\n            {\r\n                foreach (var parameterInfo in helpInfo.GetParameter(parameter))\r\n                {\r\n                    parameterInfosList.Add(parameterInfo);\r\n                }\r\n            }\r\n\r\n            return parameterInfosList.ToArray();\r\n        }\r\n```\r\nThis could be better handled with a `Dictionary<String, PSObject>` of unique pairings of `Name` to `PSObject` that returns the `.Values` as an array.\r\n- An overly complicated for-loop exists in **HelpCommands.cs** that could be reduced four-fold:\r\n```csharp\r\nHelpInfo firstHelpInfoObject = null;\r\nint countOfHelpInfos = 0;\r\nforeach (HelpInfo helpInfo in helpInfos)\r\n{\r\n    // honor Ctrl-C from user.\r\n    if (IsStopping)\r\n    {\r\n        return;\r\n    }\r\n\r\n    if (countOfHelpInfos == 0)\r\n    {\r\n        firstHelpInfoObject = helpInfo;\r\n    }\r\n    else\r\n    {\r\n        // write first help object only once.\r\n        if (firstHelpInfoObject != null)\r\n        {\r\n            WriteObjectsOrShowOnlineHelp(firstHelpInfoObject, false);\r\n            firstHelpInfoObject = null;\r\n        }\r\n\r\n        WriteObjectsOrShowOnlineHelp(helpInfo, false);\r\n    }\r\n\r\n    countOfHelpInfos++;\r\n}\r\n\r\n...\r\n\r\n// Write full help as there is only one help info object\r\nif (countOfHelpInfos == 1)\r\n{\r\n    WriteObjectsOrShowOnlineHelp(firstHelpInfoObject, true);\r\n}\r\nelse if (_showOnlineHelp && (countOfHelpInfos > 1))\r\n{\r\n    throw PSTraceSource.NewInvalidOperationException(HelpErrors.MultipleOnlineTopicsNotSupported, \"Online\");\r\n}\r\n```\r\nCould be reduced to:\r\n```csharp\r\nforeach (HelpInfo helpInfo in helpInfos)\r\n{\r\n    // honor Ctrl-C from user.\r\n    if (IsStopping)\r\n    {\r\n        return;\r\n    }\r\n\r\n    WriteObjectsOrShowOnlineHelp(firstHelpInfoObject, helpInfos.Count == 1);\r\n}\r\n\r\n...\r\n\r\nif (_showOnlineHelp && (helpInfos.Count > 1))\r\n{\r\n    throw PSTraceSource.NewInvalidOperationException(HelpErrors.MultipleOnlineTopicsNotSupported, \"Online\");\r\n}\r\n```\r\n\r\n#### Dead code/unimplemented\r\n- There exist formatters for `terminatingErrors` and `nonTerminatingErrors`, but I could find nothing in the code that populated these fields unless they come from an undocumented XML help tag. **See Help_format_ps1xml**\r\n- `possibleValues` and `possibleValue` are also in the same boat, nothing in the code explicitly sets these, I assume they have since been replaced with `parameterValueGroup` , but their formatters still exist. **See Help_format_ps1xml**\r\n- Formatters for MAML help are missing for some of the component parts: `syntaxItem`, `inputType`, `returnValue`, `navigationLink`. **See Help_format_ps1xml**\r\n- Various places in the help formatters seemingly use more bindings than needed\r\n- **HelpV3_format_ps1xml.cs** is missing a wide variety of format views, but since this is for documentation-less code it would probably be wasted effort to add them\r\n\r\n### Proposed technical implementation details (optional)\r\n\r\nNone of the above things are particularly high priority, I just noted them and wanted to make sure there was at least some level of tracking around them. They are all fairly quick fixes and I may end up doing some of them eventually if I have time.",
  "closed_at": null,
  "comments": [],
  "created_at": "2022-09-14T21:52:45Z",
  "number": 18094,
  "state": "open",
  "title": "General Help Issues/Dodgey Code",
  "updated_at": "2022-09-15T05:27:02Z"
}