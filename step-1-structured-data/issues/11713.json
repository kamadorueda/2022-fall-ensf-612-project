{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11713",
  "author": "daxian-dbw",
  "body": "# PR Summary\r\n\r\nFix #11659\r\nUse dedicated threads to read the redirected output and error streams from the child process for out-of-proc jobs.\r\n\r\n## PR Context\r\n\r\nCurrently, when `Start-Job` starts a child PowerShell process, it depends on the `Process` events `OutputDataReceived` and `ErrorDataReceived` to handle messages from the output and error streams.\r\nInternally, the `Process` implementation uses 2 thread-pool threads to read messages from those 2 streams. Even though the implementation calls `stream.ReadAsync` on those 2 streams, the actual read operation is synchronous because the underlying Win32 API `CreatePipe()` only allows the pipe handle to be created in `\"synchronous\"` mode.\r\n\r\nThis results in 2 thread-pool threads being held up indefinitely for each out-of-proc job created. When more out-of-proc jobs are created at the same time, it quickly depletes the thread pool, and causing thread starvation for other tasks that depend on thread-pool threads until the thread pool manager realize it's time to increase the pool.\r\n\r\n**Thread-pool threads should be used for transient tasks that finish quickly, not for long-running tasks. In this case, reading from pipe in a blocking manner is obviously a long-running tasks and should be done with dedicated threads.**\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [x] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-03-28T10:44:24Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "- Is ForEach -Parallel affected in a way?\r\n- In original issue many jobs is created. Make sense to have dedicated thread pool for jobs?",
      "created_at": "2020-01-29T07:28:35Z",
      "updated_at": "2020-01-29T07:28:35Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> Is ForEach -Parallel affected in a way?\r\n\r\nIt creates its own thread, so it's not affected.\r\n\r\n> In original issue many jobs is created. Make sense to have dedicated thread pool for jobs?\r\n\r\nI don't think that's needed. Thread pool threads should only for short living tasks. When it comes to long-living tasks, even a separate dedicated thread pool will have the same starvation problem.",
      "created_at": "2020-01-29T16:55:26Z",
      "updated_at": "2020-01-29T16:55:26Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Dedicated thread pool for thread jobs is not needed because both ThreadJob and ForEach-Object -Parallel have throttling and queuing, which is basically performs the same function as a thread pool.",
      "created_at": "2020-01-29T17:00:45Z",
      "updated_at": "2020-01-29T17:00:45Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@PoshChan Please retry mac",
      "created_at": "2020-01-30T17:52:03Z",
      "updated_at": "2020-01-30T17:52:03Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw, I do not understand the build target(s) `mac`; I only allow `static`, `windows`, `macos`, `linux`, `all`",
      "created_at": "2020-01-30T17:52:27Z",
      "updated_at": "2020-01-30T17:52:27Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@PoshChan Please retry macos",
      "created_at": "2020-01-30T17:52:45Z",
      "updated_at": "2020-01-30T17:52:45Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw, successfully started retry of `PowerShell-CI-macOS`",
      "created_at": "2020-01-30T17:53:05Z",
      "updated_at": "2020-01-30T17:53:05Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Turns out the failure in Windows build is a real issue that needs to be looked into. I will investigate and report back.",
      "created_at": "2020-01-31T23:02:52Z",
      "updated_at": "2020-01-31T23:02:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Could you please address CI Windows fail?",
      "created_at": "2020-03-13T13:14:52Z",
      "updated_at": "2020-03-13T13:14:52Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw \r\nI think the issue may be in handling expected errors that reflect various ways listener loop can end.  You can see example code for the NamedPipe and SSH transports.",
      "created_at": "2020-03-13T15:54:19Z",
      "updated_at": "2020-03-13T15:54:19Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Thanks @PaulHigin for the pointers!\r\nI was busy with some other work with higher priority. Will get back to this soon.",
      "created_at": "2020-03-18T21:58:10Z",
      "updated_at": "2020-03-18T21:58:10Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "All tests passed now \ud83d\ude04\r\nIt turns out I forgot to remove the following two lines from `KillServerProcess()`:\r\n```c#\r\n_serverProcess.CancelOutputRead();\r\n_serverProcess.CancelErrorRead();\r\n```\r\nThey should be called only if we are actively using the `OutputDataReceived` and `ErrorDataReceived` events to asynchronously read the redirected output and error. Otherwise, they will throw exception which [got swollen silently](https://github.com/PowerShell/PowerShell/pull/11713/commits/b6b446a9a3895ea292837019d3914cb70d722127#diff-62032daf278902e44b9c801a37a8ec81R1299) by `KillServerProcess()` (by design), and thus the line [`_serverProcess.Kill()`](https://github.com/PowerShell/PowerShell/pull/11713/commits/b6b446a9a3895ea292837019d3914cb70d722127#diff-62032daf278902e44b9c801a37a8ec81R1280) will never be executed, which causes the child process started by `Start-Job` lingers around forever.\r\n\r\nThe issue results in 34 child pwsh processes not cleaned up after the jobs finish, which eat up the memory in the Windows CI environment. That's why we see the `stack overflow` and out-of-memory error thrown from CoreCLR (`Failed to create CoreCLR, HRESULT: 0x8007000E`).\r\n\r\n@PaulHigin @iSazonov Can you please take another look at the changes? Thank you!",
      "created_at": "2020-03-27T18:28:45Z",
      "updated_at": "2020-03-27T18:29:32Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Sure, I will add a test to verify the server process is terminated after the job is gone.",
      "created_at": "2020-03-27T18:41:31Z",
      "updated_at": "2020-03-27T18:41:31Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@PaulHigin, tests are added to verify that the background process is cleaned up after job is gone. Please review it when you have time. Thanks!",
      "created_at": "2020-03-27T20:38:07Z",
      "updated_at": "2020-03-27T20:38:07Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov I think this is now ready to merge. But please take another look before you do so as there are changes after your last review.",
      "created_at": "2020-03-28T00:10:07Z",
      "updated_at": "2020-03-28T00:10:07Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.1.0-preview.2` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.2)\n",
      "created_at": "2020-04-23T18:02:08Z",
      "updated_at": "2020-04-23T18:02:08Z"
    }
  ],
  "created_at": "2020-01-28T23:11:13Z",
  "number": 11713,
  "state": "closed",
  "title": "Use dedicated threads to read the redirected output and error streams from the child process for out-of-proc jobs",
  "updated_at": "2020-04-23T18:02:08Z"
}