{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10841",
  "author": "mikeTWC1984",
  "body": "# Summary of the new feature/enhancement\r\n\r\nStart-ThreadJob is a great tool, although it's a bit cumbersome if you just need to invoke single cmdlet with parameters. Would be nice just to indicate this with some switch, e.g. \"Async\". Somewhat similar to AsJob switch, but returning task or thread job. \r\n\r\n# Example\r\n```powershell\r\nInvoke-WebRequest -Uri $Url -Method $Method -Headers $h -Async\r\n```\r\nThis should return task object, or be a shortcut to this:\r\n```powershell\r\nStart-ThreadJob -ScriptBlock { param($Url, $Method, $h)\r\n\r\n    Invoke-WebRequest -Uri $Url -Method $Method -Headers $h\r\n\r\n} -ArgumentList ($Url, $Method, $h)\r\n```\r\n\r\nIf not possible as general mechanism, this could be implemented for some selected cmdlets. I think this could be useful for iwr/irm,  test-connection and GetWMI-Object",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "You can do this with the `&` suffix operator:\r\n\r\n```powershell\r\n$job = Invoke-WebRequest $Url -Method $Method -Headers $headers &\r\n$job | Receive-Job -Wait\r\n```",
      "created_at": "2019-10-19T04:47:20Z",
      "updated_at": "2019-10-19T04:47:35Z"
    },
    {
      "author": "mikeTWC1984",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx I believe this is shortcut for start-job. I was thinking about runspace/task mechanism. ",
      "created_at": "2019-10-19T05:04:16Z",
      "updated_at": "2019-10-19T05:04:16Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Isn't this a dupe of https://github.com/PowerShell/PowerShell/issues/9873?",
      "created_at": "2019-10-19T18:29:57Z",
      "updated_at": "2019-10-19T18:29:57Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "It is in _intent_, @SteveL-MSFT, but not in suggested implementation.\r\n\r\n@mikeTWC1984, #9873 suggests a syntax that is part of the \"plumbing\" rather than relying on parameters supported by individual cmdlets (or even a new _common_ parameter), which to me is the better way to go.\r\n\r\n",
      "created_at": "2019-10-19T19:57:15Z",
      "updated_at": "2019-10-19T20:13:17Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I believe the ask is to have ubiquitous parameter to run as a threadjob, like `-AsThreadJob`.  This would be more discoverable than a new background operator.  We DO currently have both `-AsJob` and the background operator, so I guess we COULD have both.",
      "created_at": "2019-10-20T00:26:14Z",
      "updated_at": "2019-10-20T00:26:14Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Making `-AsThreadJob` a common parameter would be... interesting. @PaulHigin, any thoughts on that?",
      "created_at": "2019-10-20T00:39:56Z",
      "updated_at": "2019-10-20T00:39:56Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Yes, making it a common parameter would be an alternative way to make the functionality available to every cmdlet, but I don't think it belongs there _conceptually_:\r\n\r\nIt's awkward to specify  an _invocation method_ - something that is extrinsic to the invoked cmdlet - as one of its _parameters_.\r\n\r\nNote to how the existing `-AsJob` parameter is sensibly _not_ a common parameter, because it only applies to cmdlets that _themselves_ have invocation functionality, such as `Invoke-Command`.\r\n\r\nAlso, an operator such as the postpositional `&` is more comprehensive in that it also covers _expressions_  (to use an overly simplistic example: `1..10 & `).\r\n\r\nAs for discoverability: yes, all symbol-based functionality is not easy to discover, but the reason for choosing a symbol to begin with is that the feature is so common (or is expected to become that) that it warrants maximum concision.\r\n\r\nWith frequent use and exposure comes familiarity.\r\n\r\nAlso, to help with discoverability, the feature should be documented alongside its verbose equivalent, i.e. `Start-ThreadJob`, just as postpositional use of `&` _should_ be documented in the `Start-Job` topic - but currently isn't: see https://github.com/MicrosoftDocs/PowerShell-Docs/issues/4965\r\n\r\n",
      "created_at": "2019-10-20T13:03:14Z",
      "updated_at": "2019-10-20T17:08:22Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "There's another problem with using `-AsJob` as a common parameter.\r\n\r\nIn PowerShell 6.x and earlier, we have `-AsJob` as a parameter on some commands (most notably: `Invoke-Command`), and it returns a `PSRemotingJob` for the job that is being run in the background.\r\n\r\nIn PowerShell 7, we have `-AsJob` as a parameter on the new `ForEach-Object -parallel` parameter set, and it returns a `PSTaskJob`.\r\n\r\nWe also have `ThreadJob` as a third type for jobs that are launched using `Start-ThreadJob`.\r\n(Aside: I find it quite confusing that we have `ThreadJob` and `PSTaskJob` types -- do we need two types of jobs here or can we move forward with just one?)\r\n\r\nIf we were to try going the common parameter route, do we provide a common parameter for each type of job? Or have a default job type for `-AsJob` and another common parameter to define the job type to use?\r\n\r\nPlus, as @mklement0 pointed out, using common parameters here feels awkward. I'd rather we control invocation of commands using post-positional operators.\r\n\r\nFor those who are interested, I opened an RFC for this a while back when I felt this was missing and would add value to the PowerShell async story. You can read that proposal and add comments in https://github.com/PowerShell/PowerShell-RFC/pull/205.",
      "created_at": "2019-10-20T20:30:25Z",
      "updated_at": "2019-10-20T20:30:25Z"
    },
    {
      "author": "mikeTWC1984",
      "author_association": "CONTRIBUTOR",
      "body": "I actually came to this from .net's async methods (like DoSmth()/DoSmthAsync()). As I understand from above there is already a mechanism to invoke cmdlet asynchronously without creating extra scopes (which was my main concern) and we just discuss implementation. I'm good with either operator or switch, latter sounds more intuitive to me, but I agree this could be awkward to see it on every  cmdlet. Probably switch appearance could be indicated inside CmdletBinding attribute.\r\n\r\nBtw, what is a PSTaskJob? Thread job seem to create a decent overhead, unlike task that came from async methods. Wondering if PSTaskJob can improve this. Below are some dummy examples.\r\n\r\nThis eats/cloggs 100MB+  of memory on my machine (on average)\r\n```\r\n1..100 | foreach {Start-ThreadJob -ScriptBlock {sleep 1} }\r\n```\r\nThis takes 1-2 MB\r\n```\r\n1..100 | foreach {([System.Net.NetworkInformation.Ping]::new()).SendPingAsync(\"www.example.com\") }\r\n```\r\n",
      "created_at": "2019-10-21T03:52:15Z",
      "updated_at": "2019-10-21T03:52:15Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "This is all a great discussion.  \r\n\r\nCmdlets aren't really designed to run asynchronously.  There are threading, data streaming, and state sharing issues.  Over the years PowerShell has added various ways to run script/commands asynchronously: PowerShell remoting, Start-Job, Workflows, asynchronous API.\r\n\r\nMore recently I have tried to make the async API easier to use through ThreadJobs and the new ForEach-Object -Parallel experimental feature.  This has been mostly successful but has also accentuated PowerShell's inherent limitations, in particular the large overhead required to run PowerShell scripts concurrently (see my blog post for more information: (https://devblogs.microsoft.com/powershell/powershell-foreach-object-parallel-feature/).\r\n\r\nI am a bit ambivalent about adding syntactical ways to automatically invoke cmdlets in parallel.  The feedback we have received from the new ForEach -Parallel experimental feature makes clear that it does not meet many users expectations.  The large overhead, often slower performance, and lack of awareness of basic threading safety makes ThreadJobs and ForEach -Parallel potentially dangerous to use, or at minimum a disappointment for some users (again see blog link above for more explanation).\r\n\r\nI would love to build something that 'just works'.  But unfortunately, due to inherent PowerShell design limitations, this is not possible and each existing concurrent model has its own benefits and side effects.\n\n<blockquote><img src=\"https://devblogs.microsoft.com/powershell/wp-content/uploads/sites/30/2018/09/Powershell_256.png\" width=\"48\" align=\"right\"><div><img src=\"https://devblogs.microsoft.com/powershell/wp-content/uploads/sites/30/2019/02/Powershell_2561.png\" height=\"14\"> PowerShell</div><div><strong><a href=\"https://devblogs.microsoft.com/powershell/powershell-foreach-object-parallel-feature/\">PowerShell ForEach-Object Parallel Feature | PowerShell</a></strong></div><div>PowerShell ForEach-Object Parallel Feature\nPowerShell 7.0 Preview 3 is now available with a new ForEach-Object Parallel Experimental feature. This feature is a great new tool for parallelizing work, but like any tool, it has its uses and drawbacks.\nThis article describes this new feature,</div></blockquote>",
      "created_at": "2019-10-21T16:14:14Z",
      "updated_at": "2019-10-21T16:14:17Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Adding `-AsJob` to _commands that can natively support it_ is the right way to go. It is the existing idiom for running things asynchronously in PowerShell. And regardless of the underlying implementation, -AsJob should *always* return a `Job2` object. PowerShell jobs are **the** abstraction for asynchronous operations. As long as you return a `Job` object, the user can use the standard *-Job cmdlets to manipulate it. If you break this abstraction, then you'll end up rewriting these cmdlets for each type of asynchronous \"handle\". In the OP's example `Invoke-WebRequest -Uri $Url -Method $Method -Headers $h -AsJob` would probably return a subclass of Job2 that wrapped a `Task`. Not a background job object, not a threadjob but still a job object that can be manipulated with standard patterns. ",
      "created_at": "2019-10-21T19:55:33Z",
      "updated_at": "2019-10-21T19:55:33Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@BrucePay \r\n\r\n> Adding `-AsJob` to _commands that can natively support it_ is the right way to go.\r\n\r\nIt is, but only for \"meta cmdlets\" that themselves invoke _other_ commands - but that isn't the issue at hand, which is about a general-purpose, cmdlet-agnostic way to invoke _any_ cmdlet in a separate thread.\r\n\r\nThanks for the background information, @PaulHigin - I think it would make sense to create a conceptual help topic based on your blog post.\r\n\r\n>  I am a bit ambivalent about adding syntactical ways to automatically invoke cmdlets in parallel. \r\n\r\nThere's no way around users needing to understand the constraints and appropriate use case, and burdening those that do with verbose syntax doesn't sound like the best way forward.\r\n\r\nWe already have postpositional `&` to make implicit `Start-Job` calls easy, so there's no reason not to provide the same convenience for `Start-ThreadJob` - see @KirkMunro's RFC at https://github.com/PowerShell/PowerShell-RFC/pull/205\r\n",
      "created_at": "2019-10-21T23:22:02Z",
      "updated_at": "2019-10-22T01:01:15Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Regarding documentation: I've created https://github.com/MicrosoftDocs/PowerShell-Docs/issues/4977, asking that guidance be added to `about_Jobs`, along with extending the topic to cover `Start-ThreadJob` and `ForEach-Object -Parallel -AsJob` too.",
      "created_at": "2019-10-22T19:01:15Z",
      "updated_at": "2019-10-22T19:01:15Z"
    },
    {
      "author": "mikeTWC1984",
      "author_association": "CONTRIBUTOR",
      "body": "@PaulHigin  Thanks for the info.   So far I'm more than happy with thread jobs, it's trade-offs are quite reasonable. Question - is PSTaskJob an attempt to reduce thread overheads, or it's still something based on runspaces? ",
      "created_at": "2019-10-22T21:26:30Z",
      "updated_at": "2019-10-22T21:26:30Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "PSTaskJob is similar to ThreadJob except that it is specific to ForEach-Object -Parallel when run with the -AsJob switch.  Unlike a ThreadJob, which encompasses only one running job at a time, PSTaskJob contains child jobs for all scriptblocks invoked by ForEach -Parallel (one script block is invoked for each piped input object).  So if you run `1..10 | foreach -parallel { $_ }`, there will be 10 child jobs within the PSTaskJob.  Note that throttling still applies so only 5 child jobs will run at a time if the throttle limit is set to 5.\r\n\r\nBut basically it allows you to use PowerShell job cmdlets on a foreach -parallel running asynchronously as a job.",
      "created_at": "2019-10-22T23:09:48Z",
      "updated_at": "2019-10-22T23:09:48Z"
    }
  ],
  "created_at": "2019-10-19T03:43:24Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine"
  ],
  "number": 10841,
  "state": "open",
  "title": "Feature Request: Async Cmdlets ",
  "updated_at": "2019-10-22T23:09:48Z"
}