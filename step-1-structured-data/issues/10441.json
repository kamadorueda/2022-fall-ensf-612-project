{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10441",
  "author": "lahell",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\nI know PowerShell is mostly case insensitive, but when using both `-AsHashTable` and `-CaseSensitive` I expected to end up with a case sensitive hashtable.\r\n```powershell\r\n$capitonyms = @(\r\n    [PSCustomObject]@{\r\n        Capitonym = 'Bill'\r\n    }\r\n    [PSCustomObject]@{\r\n        Capitonym = 'bill'\r\n    }\r\n)\r\n\r\n$capitonyms | Group-Object Capitonym -AsHashTable -CaseSensitive\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nBill                           {@{Capitonym=Bill}}\r\nbill                           {@{Capitonym=bill}}\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nGroup-Object : The objects grouped by this property cannot be expanded because there is a key duplication. Provide a valid value for the property, and then try again.\r\nAt line:1 char:15\r\n+ $capitonyms | Group-Object Capitonym -AsHashTable -CaseSensitive\r\n+               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidArgument: (:) [Group-Object], Exception\r\n+ FullyQualifiedErrorId : The objects grouped by this property cannot be expanded because there is a key duplication. Provide a valid value for the property, and then try again.,Microsoft.PowerShell.Commands.GroupObjectCommand\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-preview.3\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-preview.3\r\nOS                             Microsoft Windows 10.0.18362\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2019-11-13T04:16:46Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Seems completely reasonable to me.",
      "created_at": "2019-08-24T16:59:50Z",
      "updated_at": "2019-08-24T16:59:50Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT This would be a breaking change. If there are no key conflicts, current users may depend on the case-insensitivity of the generated hashtable. (Also note - since this cmdlet was envisioned as grouping objects by .NET property name, the notion of two properties with the same name differing by case is not the common case.)\r\n\r\n@lahell Given that this is a breaking change, what is the rational for doing this? That is, what scenarios are unblocked, what important thing can you do that you couldn't do before? Providing these scenarios helps the Committee make decisions about this sort of thing. Thanks!",
      "created_at": "2019-08-29T05:45:40Z",
      "updated_at": "2019-08-29T05:45:40Z"
    },
    {
      "author": "lahell",
      "author_association": "NONE",
      "body": "Why would anyone use both CaseSensitive and AsHashTable if they need a case insensitive hashtable?\r\n\r\nI noticed this when grouping AD users by department to look for typos and was not sure if this was intentional behaviour. \r\n\r\nThis is not a big deal for me. I got the hashtable I needed with the following code.\r\n\r\n    $hashtable = New-Object System.Collections.Hashtable\r\n    $capitonyms | foreach { $hashtable[$_.Capitonym] += ,$_ }\r\n    $hashtable\r\n",
      "created_at": "2019-08-29T07:22:58Z",
      "updated_at": "2019-08-29T07:24:16Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Agree with @BrucePay that it would be good to understand what the real world scenario that is impacted by this.  However, this doesn't have to be a breaking change, it could be a new switch to make it explicit.",
      "created_at": "2019-08-29T22:50:51Z",
      "updated_at": "2019-08-29T22:50:51Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I mean, if `-CaseSensitive` doesn't _already_ make it explicit, we're kind of out of options for making it explicit. \ud83d\ude02 ",
      "created_at": "2019-08-30T00:09:40Z",
      "updated_at": "2019-08-30T00:09:40Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> since this cmdlet was envisioned as grouping objects by .NET property name\r\n\r\nGrouping happens by property _value_, not _name_, and given that omitting `-AsHashtable` already works exactly as advertised:\r\n\r\n```\r\nPS> $capitonyms | Group-Object Capitonym -CaseSensitive\r\n\r\nCount Name                      Group\r\n----- ----                      -----\r\n    1 bill                      {@{Capitonym=bill}}\r\n    1 Bill                      {@{Capitonym=Bill}}\r\n```\r\n\r\nso should the variant  with `-AsHashtable`.\r\n\r\nSo I don't see a breaking change here, only a bug fix.\r\n\r\nUsers who opt for combining `-CaseSensitive` with `-AsHashtable` will have to be aware that the resulting hashtable will have case-sensitive key lookups, unlike regular PowerShell hashtables, but since `-CaseSensitive`  is an explicit opt-in, that seems reasonable.\r\n",
      "created_at": "2019-08-30T04:36:49Z",
      "updated_at": "2019-08-30T05:21:01Z"
    },
    {
      "author": "lahell",
      "author_association": "NONE",
      "body": "My real world scenario was just using it to clean up human errors in department names.\r\n\r\nI guess this could be more of an issue on Linux. This simple test ends in key duplication error.\r\n\r\n    $dir1 = New-Item -Name test -Type Directory\r\n    $files1 = 1..3 | foreach { New-Item -Path $dir1.FullName -Name \"file$_\" -Type File }\r\n\r\n    $dir2 = New-Item -Name TEST -Type Directory\r\n    $files2 = 1..3 | foreach { New-Item -Path $dir2.FullName -Name \"file$_\" -Type File }\r\n\r\n    Get-ChildItem -Recurse | group DirectoryName -AsHashTable\r\n",
      "created_at": "2019-08-30T05:33:40Z",
      "updated_at": "2019-08-30T05:34:20Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #11030, which has now been successfully released as `v7.0.0-preview.6`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.6)\n",
      "created_at": "2019-11-21T22:35:32Z",
      "updated_at": "2019-11-21T22:35:32Z"
    },
    {
      "author": "lahell",
      "author_association": "NONE",
      "body": "Thanks @vexx32, I ran a few tests in preview 6 and your fix works great.\r\n\r\nI did notice that adding a `$null` to the mix gives a misleading error message.\r\n\r\n```\r\n$capitonyms = @(\r\n    [PSCustomObject]@{\r\n        Capitonym = 'Bill'\r\n    }\r\n    [PSCustomObject]@{\r\n        Capitonym = 'bill'\r\n    }\r\n    [PSCustomObject]@{\r\n        Capitonym = $null\r\n    }\r\n)\r\n\r\n$capitonyms | Group-Object Capitonym -AsHashTable -CaseSensitive\r\n```\r\n\r\nThe code above will throw the error message:\r\n```\r\nGroup-Object: The objects grouped by this property cannot be expanded because there is a key duplication. Provide a valid value for the property, and then try again.\r\n```\r\n\r\nThe InnerException is:\r\n```\r\nSystem.ArgumentNullException: Key cannot be null. (Parameter 'key')\r\n    at System.Collections.Hashtable.Insert(Object key, Object nvalue, Boolean add)\r\n    at Microsoft.PowerShell.Commands.GroupObjectCommand.EndProcessing()\r\n```",
      "created_at": "2019-11-22T08:52:03Z",
      "updated_at": "2019-11-22T08:52:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@lahell Please open new issue.",
      "created_at": "2019-11-22T08:53:54Z",
      "updated_at": "2019-11-22T08:53:54Z"
    }
  ],
  "created_at": "2019-08-24T10:38:28Z",
  "labels": [
    "Issue-Enhancement",
    "Up-for-Grabs",
    "Resolution-Fixed",
    "Breaking-Change",
    "WG-Cmdlets-Utility"
  ],
  "number": 10441,
  "state": "closed",
  "title": "Return casesensitive hashtable with Group-Object",
  "updated_at": "2019-11-22T08:53:54Z"
}