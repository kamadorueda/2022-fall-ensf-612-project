{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6141",
  "author": "iSazonov",
  "body": "## PR Summary\r\n\r\nFix #5515\r\nFix #4814\r\nFix #5158 \r\n\r\nClose #5725 \r\n\r\n- Can compile a source from parameters (TypeDefinition and MemberDefinition).\r\n- Can compile from files.\r\n- Can compile only to a file (without assembly loading).\r\n- Don't recompile and don't reload if the sources have not changed.\r\n- Implemented `-IgnoreWarnings` - ignore warnings as errors. By default the cmdlet consider warnings as errors.\r\n- Added VisualBasic support.\r\n- Added new `-CompilerOptions` parameter allow set Roslyn command line parameters including:\r\n    - Parser options.\r\n    - Compile options.\r\n    - Emit options.\r\n\r\n**ATTENTION:** The `CompilerOptions` can be specified along with other options like `-OutputAssembly`, `-Language` and `-IgnoreWarnings`. The explicit setting parameters will take precedence over the same settings specified in `-CompileOptions`.\r\n\r\nSee docs about the compiler options:\r\nhttps://github.com/dotnet/roslyn/blob/master/docs/compilers/CSharp/CommandLine.md\r\nhttps://github.com/dotnet/roslyn/blob/master/docs/compilers/Visual%20Basic/CommandLine.md\r\n\r\n**ATTENTION:** `-OutputType` default is `Library`. If `-OutputType` is absent the `-OutputType` default overlaps a value in `CompileOptions`. In other words output type (\"target\" ot \"t\" in command line) is always ignored in `CompileOptions`. We have to use `-OutputType` to set an output type.\r\n\r\n@TravisEz13 @PaulHigin Please audit security of the `-ExtendedOptions` parameter.\r\n\r\n## PR Checklist\r\n\r\nNote: Please mark anything not applicable to this PR `NA`.\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - [x] Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] User facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - [ ] Issue filed - Issue link:\r\n- [ ] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n    - [ ] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n",
  "closed_at": "2018-04-26T05:40:27Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov I left more comments in many of my existing comments to reply to your responses. I add `#Closed` those of my comments that are closed. For the rest, they are still open and need your response. Thanks!",
      "created_at": "2018-03-13T18:05:26Z",
      "updated_at": "2018-03-13T18:05:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw I'm trying to address your comments but some might miss because Github hides them. \ud83d\ude04  Also the browser freezes on his too large PR.",
      "created_at": "2018-03-14T13:55:09Z",
      "updated_at": "2018-03-14T13:55:09Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": ">  some might miss because Github hides them\r\n\r\nEvery time I revisit this PR, I open every hidden comment left by myself and see if you respond to my last reply. For comments that is closed, a `#closed` tag is added to the last message of the comment thread.",
      "created_at": "2018-03-14T16:05:22Z",
      "updated_at": "2018-03-14T16:05:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw I have collected almost all open comments for a quicker response.\r\n\r\n1. UsingNamespace in [Parameter(ParameterSetName = \"FromSource\")] \r\n\r\nI believe the scenario can be important if someone has a portable code template and have to compile in Windows PowerShell and PowerShell Core with different usings. If the scenario is important we should enhance Windows PowerShell too. If no I'll remove this.\r\n\r\n----------\r\n\r\n**_[daxian] I don't see such a change can meet the bar for Windows PowerShell. I think you can remove this for now. If a demand comes up at a later time, we can revisit this idea._**\r\n\r\n----------\r\n\r\n[iSazonov] Fixed.\r\n\r\n2. CompileOnly \r\n\r\nSorry, I already forget my thoughts - `Add-Type -TypeDefinition $code -OutputAssembly f:\\test.dll` in Windows PowerShell loads the dll only if `-PassTru` present. It is hidden logic, this is not an obvious behavior of the -PassTru parameter. If we want load the dll and don't want `-PassTru` we have to use:\r\n```c#\r\nAdd-Type -TypeDefinition $code -OutputAssembly f:\\test.dll -PassTru > $null\r\n```\r\nSo the idea is to add new parameter for better UX.\r\n\r\n---------\r\n\r\n**_[daxian] IMO, `-CompileOnly` is not needed for `Add-Type`. Currently, `Add-Type` doesn't load an assembly when `-OutputAssembly` is specified. Otherwise, it produces an in-memory assembly which has to be loaded. When `-PassThru` is specified, you basically are asking `Add-Type` to load the assembly because you want it to return all types._**\r\n\r\n**_[daxian] If we don't break the current behavior, then the `-CompileOnly` parameter is not useful at all, because for `Add-Type $code -OutputAssembly f:\\test.dll -CompileOnly`, `-CompileOnly` is redundant as it doesn't load the assembly anyways; for `Add-Type $code -CompileOnly`, it's useless because we have to load an in-memory assembly_.**\r\n\r\n**_[daxian] For `-CompileOnly` to be useful, you have to break the current behavior to make `Add-Type $code -OutputAssembly f:\\test.dll` load the assembly by default, and add `-CompileOnly` if you don't want it to be loaded. I don't think this breaking change is acceptable._**\r\n\r\n----------\r\n[iSazonov] Fixed.\r\n\r\n3. WarnAsError and IgnoreWarnings\r\n\r\nIn master branch code `-IgnoreWarnings` comply with default behavior and really do nothing.\r\nThe master branch code already has a breaking change with 6.0.0 GA (really we haven't any code for `-IgnoreWarnings`) - and the breaking change is that user can not get \"warnings as errors\" with absent `-IgnoreWarnings` or with `-IgnoreWarnings:$false`.\r\n\r\nWhat is fix we want get now? Should we keep CodeDom (Windows PowerShell) default? It is main question. If so it will be _again a breaking change with 6.0.0 GA_.\r\n\r\nRoslyn has [opposite default](https://github.com/dotnet/roslyn/blob/944ae114140ba77cbd4be370bf13a7f758f740b3/src/Compilers/CSharp/Portable/CommandLine/CSharpCommandLineParser.cs#L744).\r\n\r\n_I'd prefer use new parameter and new default._\r\n\r\nI assumed we could keep the `-IgnoreWarnings` old parameter for backward compatibility, but as I said we've already _full_ broken it and it's better to remove it altogether.\r\n\r\n---------\r\n\r\n> In master branch code `-IgnoreWarnings` comply with default behavior and really do nothing.\r\n\r\n**_[daxian] It's broken and needs to be fixed. That parameter should have the same behavior as in Windows PowerShell. The behavior of `-IgnoreWarnings` in Windows PowerShell is very reasonable -- treat warnings as errors by default, and don't treat warning as errors when `-IgnoreWarnings` is specified (see an example in my comment [here](https://github.com/PowerShell/PowerShell/pull/6141#discussion_r173579369)). Keep in mind that the current `Add-Type` in PSCore is partially broken, the does-nothing `-IgnoreWarnings` parameter is one of the broken pieces. We should respect the existing behavior in Windows PowerShell for script portability, unless the existing behavior doesn't make sense at all within the new environment_**\r\n\r\n----------\r\n[iSazonov] Fixed.\r\n\r\n4. Done: ExtendedOptions -> CompilerOptions\r\n\r\n5. Removed: `Diagnostics.Assert(defaultRefAssemblies.Count < 150...`\r\n\r\n6. `if (!char.IsWhiteSpace(errorLineString[i]))`\r\n\r\nI fixed this but ...\r\nThis come from original code and I'm afraid the code isn't exactly correct because we're replacing one tab with a single space. Perhaps it was necessary for CodeDom. I hope that Roslyn don't use tabs in error messages. Although these whitespaces can come from the code that it compiles. Therefore we have to clean the error message too or remove this cleanup at all. Thoughts?\r\n\r\n--------\r\n\r\n> or remove this cleanup at all.\r\n\r\n**_[daxian] What code does `\"this cleanup\"` refer to?_**\r\n**_[daxian] As for white characters other than spaces in the error message, I think they should be rare. What do you mean by \"`original code`\" here? The existing code in `Add-Type`? If that's the case, then we should just stick with it because I don't head complaints about error reporting for the existing `Add-Type`._**\r\n\r\n--------\r\n[iSazonov] Thanks! Clear. Fixed.\r\n\r\n7. IAssemblySymbol.TypeNames\r\n\r\nNot addressed still\r\n\r\n--------------\r\n\r\n**_[daxian] I don't see your response on another big item -- merging the VisualBasicSourceCodeProcessing and CSharpSourceCodeProcessing into one method (see my comment [here](https://github.com/PowerShell/PowerShell/pull/6141#discussion_r173633126)). Hope you can think about it._**\r\n\r\n--------------\r\n[iSazonov] Yes, of course. I was hoping to avoid `switch`, but there seems to be no other way.\r\n",
      "created_at": "2018-03-16T15:09:47Z",
      "updated_at": "2018-03-19T14:44:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "CI Appveyor failed on `files.wxs` - I can not fix this.",
      "created_at": "2018-03-19T14:38:09Z",
      "updated_at": "2018-03-19T14:38:09Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "```\r\nnew file {$(env.ProductSourcePath)\\Microsoft.CodeAnalysis.VisualBasic.dll} need to be added to {C:\\projects\\powershell\\tools\\packaging\\..\\..\\assets\\Files.wxs}\r\n```\r\nWhy can you not fix this?",
      "created_at": "2018-03-19T20:52:53Z",
      "updated_at": "2018-03-19T20:52:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13 Thanks for help - Files.wxs was fixed.",
      "created_at": "2018-03-20T08:15:51Z",
      "updated_at": "2018-03-20T08:15:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">IAssemblySymbol.TypeNames\r\n\r\nIt returns strings with simple type name \ud83d\ude15 - we need full qualify type names.\r\n\r\n```c#\r\n$guid = [Guid]::NewGuid().ToString().Replace(\"-\",\"\")\r\n\r\n$CSharpCode1 = @\"\r\n        namespace Test.AddType1\r\n        {\r\n            public class CSharpTest1$guid\r\n            {\r\n                public static int Add1(int a, int b)\r\n                {\r\n                    return (a + b);\r\n                }\r\n            }\r\n            public class CSharpTest2$guid\r\n            {\r\n                public static int Add2(int a, int b)\r\n                {\r\n                    return (a + b);\r\n                }\r\n            }\r\n        }\r\n        namespace Test.AddType2\r\n        {\r\n            public class CSharpTest1$guid\r\n            {\r\n                public static int Add1(int a, int b)\r\n                {\r\n                    return (a + b);\r\n                }\r\n            }\r\n            public class CSharpTest2$guid\r\n            {\r\n                public static int Add2(int a, int b)\r\n                {\r\n                    return (a + b);\r\n                }\r\n            }\r\n        }\r\n\"@\r\n\r\nAdd-Type -TypeDefinition $CSharpCode1\r\n```\r\n![iassemblysymbol](https://user-images.githubusercontent.com/22290914/37707306-a1f311a2-2cfa-11e8-8767-d222b643d2f9.png)\r\n\r\n-----------------------------------------------------------------------------------\r\n\r\n**[daxian-dbw] Thanks for checking!**\r\n**This comment is closed.**",
      "created_at": "2018-03-21T11:26:25Z",
      "updated_at": "2018-04-03T01:08:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Could you please continue? I hope I addresed most comments. I see only (1) CompileOptions Parameter set, (2) using System.",
      "created_at": "2018-03-26T14:17:59Z",
      "updated_at": "2018-03-26T14:17:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Seems I addressed all comments.",
      "created_at": "2018-04-02T10:43:04Z",
      "updated_at": "2018-04-02T10:43:04Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Do we have enough ask to add the 5MB for VB support?",
      "created_at": "2018-04-02T23:17:06Z",
      "updated_at": "2018-04-02T23:17:06Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13 \r\n>Do we have enough ask to add the 5MB for VB support?\r\n\r\nMy motivation was to achieve compatibility with Windows PowerShell. \r\nAlso we have requestes to add JS and F#.",
      "created_at": "2018-04-03T04:53:25Z",
      "updated_at": "2018-04-03T04:53:25Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@adityapatwardhan and @TravisEz13 Could you please quickly review the tests? Not sure if the `Add-Type` tests should be made CI ...\r\n\r\n@TravisEz13 and @vors brought up the concern about adding back `VB` support (with 5MB new assembly). So add `Committee-Review` label to get a conclusion from the committee.\r\n\r\n@iSazonov Can you please fix the failed Travis CI build?",
      "created_at": "2018-04-04T17:09:33Z",
      "updated_at": "2018-04-04T17:09:33Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "We just had a long conversation within the @PowerShell/powershell-committee about this. Some high-level thoughts:\r\n* First, thank you for doing this work here. This is clearly a huge PR, and we know how much of a pain that can be.\r\n* We have no clue about the magnitude of demand for VB in Add-Type. @iSazonov: are you aware of customer use cases or do you personally have a use case for VB that you can elaborate on here?\r\n* We're a *little* worried about adding 5 MBs to the size footprint. Today, $PSHome is about 125 MBs, and we have a strong desire to shrink that over time. 5 MBs might be a LOT for little benefit. \r\n* Given that this PR has been open for a while, I think it makes a lot of sense to talk to customers at the PowerShell Summit NA and PSconfEU over the next two weeks to get an understanding of the demand for VB support. \r\n\r\nIn the event that we decide not to accept VB for 6.1, @daxian-dbw has said that he could take on the work of removing the VB code. But in the meantime, we'd like to wait until after the two conferences to merge this PR. ",
      "created_at": "2018-04-04T23:34:07Z",
      "updated_at": "2018-04-04T23:34:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@joeyaiello \r\n1. My main motivation is to achieve maximum compatibility with Windows PowerShell Add-Type. Released version has too many incompatibilities (even without considering VB).\r\n\r\n2. I don't know about customer cases. I would addressed this question to MSFT and above all to _VB team_. This language has very long history. If MSFT wants to use it further _widely_, it should be here.\r\nAs a system administrator, I can find _many implementations_ of algorithms on VB and easily inject them into a script without having to rewrite to C#. This is especially important if the algorithm is very complex.\r\n\r\nIf someone is developing a large project on VB and uses scripts for automation (as we do in this project), then I guess they will likely use VB in scripts too.  \r\n\r\nAlso we have requests (in the repo Issues) to add F# and JS support.\r\n\r\n3. 5 MB. Most of the size PowerShell is .Net Core. Each new version will have a larger size. I don't think we can significantly reduce the number of dependencies. We could only change the model with Self-contained on Framework-dependent to get small distributive.\r\n",
      "created_at": "2018-04-05T05:33:24Z",
      "updated_at": "2018-04-05T05:33:24Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I have to delete 30 old comments in order to make the web browser able to open this PR page. Wait for the @PowerShell/powershell-committee's final call to merge this PR.",
      "created_at": "2018-04-24T22:03:53Z",
      "updated_at": "2018-04-24T22:03:53Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@daxian-dbw this is a long PR, can you summarize what the committee needs to review?",
      "created_at": "2018-04-25T01:08:52Z",
      "updated_at": "2018-04-25T01:08:52Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT I need the committee's approval to merge the PR as is (with the VB related code).\r\nIf the committee decides to not have VB support in `Add-Type`, then we can use a separate PR to clean it up.",
      "created_at": "2018-04-25T21:35:25Z",
      "updated_at": "2018-04-25T21:35:25Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee is ok with taking this PR as-is and having a separate discussion about removing VB support",
      "created_at": "2018-04-25T22:15:41Z",
      "updated_at": "2018-04-25T22:15:41Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov Thanks for the hard work to get `Add-Type` refactored!",
      "created_at": "2018-04-26T05:41:04Z",
      "updated_at": "2018-04-26T05:41:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Thanks for great comments and help!",
      "created_at": "2018-04-26T05:55:08Z",
      "updated_at": "2018-04-26T05:55:08Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Remove `Breaking-Change` label because no breaking change is introduced in this PR.",
      "created_at": "2018-06-07T20:56:59Z",
      "updated_at": "2018-06-07T20:56:59Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Add back the `Breaking-Change` label as @dantraMSFT pointed out that some error strings were removed meaning that we are using different `FullyQualifiedName` for those error conditions.",
      "created_at": "2018-06-07T22:08:56Z",
      "updated_at": "2018-06-07T22:08:56Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "\ud83d\udd28 ",
      "created_at": "2018-06-07T22:19:33Z",
      "updated_at": "2018-06-07T22:19:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We have never considered changing FullyQualifiedName as breaking change. However, I agree to leave this label because updates to the cmdlet are significant.",
      "created_at": "2018-06-08T04:46:46Z",
      "updated_at": "2018-06-08T04:46:46Z"
    }
  ],
  "created_at": "2018-02-09T14:14:44Z",
  "number": 6141,
  "state": "closed",
  "title": "Enhance and refactor Add-Type cmdlet",
  "updated_at": "2018-10-15T21:44:22Z"
}