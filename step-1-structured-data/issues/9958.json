{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9958",
  "author": "RDIL",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\nC# isn't my specialty but I think this is unused.\r\n<!-- Summarize your PR between here and the checklist. -->\r\n\r\n## PR Context\r\n\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n",
  "closed_at": "2019-06-21T12:21:07Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@RDIL I think we can accept only style fixes. The empty static constructors should be returned back because the change slow down PowerShell startup - the constructors postpone class initialization until first using.\r\n\r\n@daxian-dbw Thouths? ",
      "created_at": "2019-06-20T10:56:49Z",
      "updated_at": "2019-06-20T10:56:49Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@isazonov is that so? I never would have guessed that would be the result. Do you know if that delay-loading behaviour is documented somewhere? I'd like to read up on it!",
      "created_at": "2019-06-20T11:09:31Z",
      "updated_at": "2019-06-20T11:09:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 Maybe this helps https://stackoverflow.com/questions/9731335/singleton-implementation-with-empty-static-constructor",
      "created_at": "2019-06-20T11:32:09Z",
      "updated_at": "2019-06-20T11:32:09Z"
    },
    {
      "author": "RDIL",
      "author_association": "CONTRIBUTOR",
      "body": "I\u2019m not totally sure if that applies here, but it may affect this. ",
      "created_at": "2019-06-20T12:06:50Z",
      "updated_at": "2019-06-20T12:06:50Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "An empty static constructor is sometimes used to guarantee that all static initialization happen before any static fields or methods are accessed. Without an explicit static constructor, the inline static field initialization is guaranteed to happen before static fields are accessed but not static methods or instance constructor. See https://docs.microsoft.com/en-us/visualstudio/code-quality/ca1810-initialize-reference-type-static-fields-inline?view=vs-2019#rule-description\r\n\r\nFor the one in `EtwActivity.cs`, I looked at the code, and it seems safe to remove it.\r\nFor the other one in `ComRuntimeHelpers.cs`, let's not change it. Reason: 1) the code was copied from .NET code base and it's not used in PowerShell Core (`ComBinder` not working in .NET Core); 2) I didn't read the code, but the empty static constructor could be there on purpose since it's explicitly suppressing the rule.",
      "created_at": "2019-06-20T15:09:08Z",
      "updated_at": "2019-06-20T15:09:08Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.0.0-preview.2` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.2)\n",
      "created_at": "2019-07-17T20:55:23Z",
      "updated_at": "2019-07-17T20:55:23Z"
    }
  ],
  "created_at": "2019-06-19T23:13:21Z",
  "number": 9958,
  "state": "closed",
  "title": "Remove EtwActivity empty constructor and make minor style fixes",
  "updated_at": "2019-07-17T20:55:23Z"
}