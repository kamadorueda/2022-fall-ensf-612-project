{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13883",
  "author": "iRon7",
  "body": "## Issue\r\n\r\nI have a script which I would like to be able to directly install using the [`Install-Script`](https://docs.microsoft.com/en-us/powershell/module/powershellget/install-script?view=powershell-7) from a (PowerShell Gallery) repository. The way it was setup is to download the script and dot-source the script.\r\nAs recommended by @mklement0, I should actually [create `*.ps1` file instead of embedded script](https://github.com/iRon7/ConvertTo-Expression/issues/8).\r\n\r\nMy current script looks like:\r\n```PowerShell\r\n<#PSScriptInfo\r\n.VERSION 3.3.6\r\n.GUID 5f167621-6abe-4153-a26c-f643e1716720\r\n.AUTHOR Ronald Bode (iRon)\r\n.DESCRIPTION Stringifys an object to a PowerShell expression (PSON,  PowerShell Object Notation).\r\n.COMPANYNAME\r\n.COPYRIGHT\r\n.TAGS PSON PowerShell Object Notation Expression Serialize Stringify\r\n.LICENSE https://github.com/iRon7/ConvertTo-Expression/LICENSE.txt\r\n.PROJECTURI https://github.com/iRon7/ConvertTo-Expression\r\n.ICON https://raw.githubusercontent.com/iRon7/ConvertTo-Expression/master/ConvertTo-Expression.png\r\n.EXTERNALMODULEDEPENDENCIES\r\n.REQUIREDSCRIPTS\r\n.EXTERNALSCRIPTDEPENDENCIES\r\n.RELEASENOTES\r\n.PRIVATEDATA\r\n#>\r\nfunction ConvertTo-Expression {\r\n    [CmdletBinding()][OutputType([scriptblock])] param()\r\n    begin {}\r\n    process {}\r\n}; Set-Alias ctex ConvertTo-Expression\r\n```\r\nIf I change the current script to just a `*.ps1` script (preserving the metadata and only the inner script body), I will lose the alias (`Set-Alias ctex ConvertTo-Expression`).\r\nAlso noted by @mklement0: _another problem with using *.ps1 files directly as commands is that on case-sensitive file-systems - notably on Linux by default - you'll only be able to invoke the script if you match the file name's case exactly - which is both inconvenient and unexpected._\r\nAnd I noticed that I do not see information like `Version` in the `Get-Command ConvertTo-Expression` (although it is shown in the `Get-InstalledScript ConvertTo-Expression`)\r\n\r\n## Summary of the new feature/enhancement\r\n* Automatically build a manifest from the script's metadata required for publishing\r\n* Add `aliases` information to [`new-scriptfileinfo`](https://docs.microsoft.com/en-us/powershell/module/powershellget/update-scriptfileinfo)/[`new-scriptfileinfo`](https://docs.microsoft.com/en-us/powershell/module/powershellget/update-scriptfileinfo) cmdlets\r\n* Possibly let the `Install-Script` cmdlet automatically transform a script into a simplified module using its metadata of the script\r\nI see no reason why the the manual steps provided in [How to Write a PowerShell Script Module](https://docs.microsoft.com/en-us/powershell/scripting/developer/module/how-to-write-a-powershell-script-module?view=powershell-7) couldn't be automated (all mandatory steps are straight forward and optional configuration data is already available in the metadata)\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We discussed previously adding version info in scripts and this was rejected in favor of modules. I think any suggestions for adding meta information to script files will be rejected in favor of modules.\r\n\r\nI believe we have a better chance of moving forward if we consider a _single file modules_.\r\n",
      "created_at": "2020-10-27T11:03:58Z",
      "updated_at": "2020-10-27T11:03:58Z"
    }
  ],
  "created_at": "2020-10-26T16:22:11Z",
  "number": 13883,
  "state": "open",
  "title": "Enhance standalone script installation",
  "updated_at": "2020-10-27T11:04:39Z"
}