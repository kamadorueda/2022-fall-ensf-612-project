{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14875",
  "author": "ankku",
  "body": "0\r\nI am not getting error as \"Get-RowandPartitionKeys\" is not recognized cmndlt while it is very much there. Here are the steps. But its not working from C#. it works from outside powerShell window. \r\n\r\nPwsh cmd:\r\n\r\n```\r\npublic class GetRowAndPartitionKeys : Cmdlet\r\n    {\r\n        [Parameter(Mandatory = false)]\r\n        public List<string> Properties { get; set; } = new List<string>();\r\n    }\r\n\r\n    [Cmdlet( VerbsCommon.Get, \"RowAndPartitionKeys\" )]\r\n    public class GetRowAndPartitionKeyCmd : GetRowAndPartitionKeys\r\n\r\n    {\r\n        protected override void ProcessRecord()\r\n        {            \r\n            WriteObject (\"Hi\");\r\n        }\r\n    }\r\n\r\n}\r\n```\r\nC# method:\r\n\r\n ```\r\npublic async Task<IEnumerable<object>> RunScript(  )\r\n        {\r\n            // create a new hosted PowerShell instance using the default runspace.\r\n            // wrap in a using statement to ensure resources are cleaned up.\r\n           string scriptContents = \"Import-Module 'C:\\Users\\...\\Powershell.dll\";\r\n            using( PowerShell ps = PowerShell.Create() )\r\n            {\r\n                // specify the script code to run.\r\n            ps.AddScript( scriptContents ).AddCommand( \"Get-RowAndPartitionKeys\" );\r\n\r\n\r\n            // execute the script and await the result.\r\n            var pipelineObjects = await ps.InvokeAsync().ConfigureAwait( false );\r\n           \r\n            foreach( var item in pipelineObjects )\r\n            {\r\n                Console.WriteLine( item.BaseObject.ToString() );\r\n            }\r\n            return pipelineObjects;\r\n        }\r\n```",
  "closed_at": "2021-02-25T21:52:37Z",
  "comments": [
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "Could you also show the csproj? Also which version of powershell are you using? ",
      "created_at": "2021-02-22T16:34:34Z",
      "updated_at": "2021-02-22T16:39:04Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@ankku, I've posted an answer to your Stack Overflow question (which has the same content as this issue): https://stackoverflow.com/a/66322165/45375\r\n\r\n* It points out the one obvious problem with your code - lack of `.AddStatement()` between `.AddScript()` and `.AddCommand()`\r\n\r\n* It demonstrates that there's nothing wrong with your approach per se, using test projects.\r\n\r\nIf the test projects don't work for you, please use them as a basis for providing a self-contained, reproducible example that highlights the problem.\r\n\r\n\r\n\r\n\r\n\n\n<blockquote><img src=\"https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded\" width=\"48\" align=\"right\"><div>Stack Overflow</div><div><strong><a href=\"https://stackoverflow.com/questions/66313904/whats-the-correct-way-to-get-output-for-this-powershell-in-c-sharp\">Whats the correct way to get output for this Powershell in C#</a></strong></div><div>I am not getting any error below but I am also not getting the output. Below is the Powershell cmd and the C# method which is calling it. I would like to know if it is written correctly and how can...</div></blockquote>",
      "created_at": "2021-02-22T19:43:31Z",
      "updated_at": "2021-02-22T19:43:33Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "so the proper approach here is to inspect the PowerShell object for clues to what is going wrong. It contains the errors that will help you debug what is going on. Here's transcript (from powershell, rather than C#, but it's a reasonable approximation):\r\n```powershell\r\nPS> $ps = [powershell]::Create()\r\nPS> $task = $ps.addcommand(\"Get-Date\").AddCommand(\"get-location\").BeginInvoke()\r\nPS> $task\r\n\r\nCompletedSynchronously IsCompleted AsyncState AsyncWaitHandle\r\n---------------------- ----------- ---------- ---------------\r\n                 False        True            System.Threading.ManualResetEvent\r\n\r\nPS> $ps\r\n\r\nCommands            : System.Management.Automation.PSCommand\r\nStreams             : System.Management.Automation.PSDataStreams\r\nInstanceId          : a41197ec-d3f7-449b-91c7-92c14475c43d\r\nInvocationStateInfo : System.Management.Automation.PSInvocationStateInfo\r\nIsNested            : False\r\nHadErrors           : True\r\nRunspace            : System.Management.Automation.Runspaces.LocalRunspace\r\nRunspacePool        : \r\nIsRunspaceOwner     : True\r\nHistoryString       : \r\n\r\n\r\nPS> $ps.streams\r\n\r\nError       : {The input object cannot be bound to any parameters for the command either because the command does not take pipeline input or the \r\n              input and its properties do not match any of the parameters that take pipeline input.}\r\nProgress    : {}\r\nVerbose     : {}\r\nDebug       : {}\r\nWarning     : {}\r\nInformation : {}\r\n```\r\nin your example, you attempted this _pipeline_ `Import-module | get-rowandpartitionkey` which is the problem. The missing `AddStatement` turns your pipeline into 2 discrete commands.",
      "created_at": "2021-02-25T01:30:21Z",
      "updated_at": "2021-02-25T01:30:21Z"
    }
  ],
  "created_at": "2021-02-22T11:41:36Z",
  "labels": [
    "Resolution-Answered",
    "WG-DevEx-SDK"
  ],
  "number": 14875,
  "state": "closed",
  "title": "Powershell library unable to fetch Modules",
  "updated_at": "2021-02-25T21:52:37Z"
}