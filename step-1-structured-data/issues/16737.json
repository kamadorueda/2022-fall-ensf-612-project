{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16737",
  "author": "237dmitry",
  "body": "### Summary of the new feature / enhancement\r\n\r\nPlease add:\r\n - the ability to display access rights in octal notation.\r\n - displaying  SGID, SUID and sticky bit in UnixMode\r\n\r\n\r\n### Proposed technical implementation details (optional)\r\n\r\nFor example:\r\n```\r\nGet-Item ./1.ps1\r\n\r\n    Directory: /home/user/Desktop\r\n\r\nUnixMode      Octal  User   Group      LastWriteTime       Size Name\r\n--------      -----  ----   -----      -------------       ---- ----\r\n-rw-r--r-T     1644  user    user   11.01.2022 22:34        579 1.ps1\r\n\r\n```\r\n\r\nAnd the question -- where can I see the enum of unix access rights? Like this:\r\n```\r\n[flags()] enum access\r\n{\r\n    ExecuteAll   = 1\r\n    WriteAll     = 2\r\n    ReadAll      = 4\r\n    ExecuteGroup = 8\r\n    WriteGroup   = 16\r\n    ReadGroup    = 32\r\n    ExecuteOwner = 64\r\n    WriteOwner   = 128\r\n    ReadOwner    = 256\r\n    StickyBit    = 512\r\n    SGID         = 1024\r\n    SUID         = 2048\r\n  #              = 4096    # ???\r\n    SymLink      = 8192    # And character special file ???\r\n    Directory    = 16384\r\n    File         = 32768\r\n}\r\n``` ",
  "closed_at": "2022-01-13T23:42:40Z",
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "`get-typedata system.io.fileinfo | % members`      \r\nshows that `Mode, ModeWithoutHardLink, VersionInfo, BaseName, Target, LinkType, NameString, LengthString, LastWriteTimeString` are added from the types information for **fileinfo** objects and  (on linux)    \r\n `get-typedata system.io.fileSysteminfo | % members`    \r\n shows types information adds script properties for 'UnixMode, User, Group, Size' to **fileSysteminfo** objects  \r\n\r\nThe script in `UnixMode` checks for the presence of `UnixStat` and  uses its `.GetModeString` Method to return the Unix mode as a formatted string.  (User, Group and Size also use `UnixStat`)\r\n\r\nif I do something like  `$d = Get-Item ./PowerShell `  \r\n`$d.GetFiles`  returns items **without** `UnixStat` members, (which is what the types info suggests) but `$d | gci` returns items **with** `UnixStat` - which implies it is added by `Get-Item`  / `Get-ChildItem` . It looks to be a \"helper\" designed to hide all the internals you want - exposing them doesn't seem to be a very difficult thing to do but I haven't searched for the code that does the work. \r\n\r\n\r\n\r\n",
      "created_at": "2022-01-13T09:57:22Z",
      "updated_at": "2022-01-13T09:57:22Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "Thank you. But I don't understand where can I look for `System.Enum` (like `System.IO.FileAttributes`) of linux access rights? In order to use net-methods (they are faster then scripts and _no need to assemble my own bike_) For example:\r\n```\r\n(gi ./Desktop/).UnixStat.Mode   # 16877\r\n(gi ./Desktop/).UnixMode        # drwxr-xr-x\r\n```\r\n`16877` is:\r\n```\r\nd_rwx_r-x_r-x\r\n\r\nd: 16384  # Directory\r\n\r\nr: 256    # owner can read \r\nw: 128    # owner can write\r\nx: 64     # owner can execute\r\n\r\nr: 32     # group can read\r\nw: 0      # group can not write\r\nx: 8      # group can execute\r\n\r\nr: 4      # other can read\r\nw: 0      # other can not write\r\nx: 1      # other can execute\r\n\r\n\r\n16384 + 256 + 128 + 64 + 32 + 8 + 4 + 1 = 16877\r\n```\r\nI want something like `/usr/bin/stat`\r\n```\r\nstat -c \"%A %a %F\" ./Desktop/\r\ndrwxr-xr-x 755 directory\r\n```",
      "created_at": "2022-01-13T13:19:14Z",
      "updated_at": "2022-01-13T13:27:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "P/Invoke read Unix `stat` struct and `mode_t` field of the struct is the mode you ask. You can find more info in https://man7.org/linux/man-pages/man0/sys_stat.h.0p.html\n\n<blockquote><div><strong><a href=\"https://man7.org/linux/man-pages/man0/sys_stat.h.0p.html\">sys_stat.h(0p) - Linux manual page</a></strong></div></blockquote>",
      "created_at": "2022-01-13T13:31:45Z",
      "updated_at": "2022-01-13T13:31:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> if I do something like `$d = Get-Item ./PowerShell `\r\n> `$d.GetFiles` returns items **without** `UnixStat` members,\r\n\r\nYes, PowerShell add the extension properties only in NavigationCmdletProvider.",
      "created_at": "2022-01-13T13:33:53Z",
      "updated_at": "2022-01-13T13:33:53Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "From where `UnixStat.Mode` does get values? Is this an enum or not? ",
      "created_at": "2022-01-13T13:36:27Z",
      "updated_at": "2022-01-13T13:36:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> From where `UnixStat.Mode` does get values? Is this an enum or not?\r\n\r\nIt copies mode_t from stat struct. It is `int` - see reference to docs above.",
      "created_at": "2022-01-13T13:40:21Z",
      "updated_at": "2022-01-13T13:40:21Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "I wanted to do it the right way, I did it as always, with the help of crutches (`/usr/bin/stat`).\r\n![1](https://user-images.githubusercontent.com/78153320/149342859-440adc7a-7666-416d-80db-f5751bc38074.png)\r\n",
      "created_at": "2022-01-13T13:56:06Z",
      "updated_at": "2022-01-13T13:56:06Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You can also look https://github.com/PowerShell/PowerShell-Native where Unix P/Invokes implemented.\n\n<blockquote><img src=\"https://opengraph.githubassets.com/458526b079e5455c3da5157f828feb551683ce73ca3733ca96acab46879a11d2/PowerShell/PowerShell-Native\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell-Native\">GitHub - PowerShell/PowerShell-Native</a></strong></div><div>Contribute to PowerShell/PowerShell-Native development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2022-01-13T14:15:24Z",
      "updated_at": "2022-01-13T14:15:26Z"
    },
    {
      "author": "kasini3000",
      "author_association": "NONE",
      "body": "1 powershell is currently not perfect\r\n\r\n2 You can judge the SGID, SUID, sticky attributes by the following commands:\r\n(Get-Item './smy Matrix Digital Rain.ps1').Unixstat.IsSetUid\r\n(Get-Item './smy Matrix Digital Rain.ps1').Unixstat.IsSetGid\r\n(Get-Item './smy Matrix Digital Rain.ps1').Unixstat.IsSticky\r\n\r\n3 You can get the string with the following commands and calculate it yourself:\r\n  (Get-Item './smy Matrix Digital Rain.ps1').UnixMode[-3]\r\nr",
      "created_at": "2022-01-13T17:33:51Z",
      "updated_at": "2022-01-13T17:33:51Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> 3 You can get the string with the following commands and calculate it yourself\r\n\r\nThe variant, thanks. Just I don't want to parse strings to get result. Kind of this:\r\n```\r\n& {                                                                               \r\n -join ('drwxr-xr-x' -replace '[ldc]' `\r\n                     -replace '-','0' `\r\n                     -replace 'r','4' `\r\n                     -replace 'w','2' `\r\n                     -replace 'x','1' `                                 \r\n                     -split '(?<=...)(?=(?:...)+$)' |                             \r\n           Foreach-Object { [Linq.Enumerable]::Sum([int[]][string[]][char[]] $_) }\r\n       )\r\n }\r\n\r\n# 755\r\n```",
      "created_at": "2022-01-13T19:20:34Z",
      "updated_at": "2022-01-13T19:20:34Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "I noticed that if `SUID` and `SGID` are in the file at the same time, then `UnixStat.IsSetUid` and `UnixStat.IsSetGid` both show `False` but each of them must show `True`.",
      "created_at": "2022-01-13T20:57:59Z",
      "updated_at": "2022-01-13T21:40:54Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "A shorter conversion :-) \r\n\r\n```PowerShell \r\n [convert]::ToString([convert]::ToInt32(('drwxr-xr-x' -replace '[rwx]','1' -replace \"[^1]\",\"0\"),2),8)\r\n\r\n```",
      "created_at": "2022-01-13T21:57:54Z",
      "updated_at": "2022-01-13T21:57:54Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "Thanks to all. So far I have done so:\r\n```\r\n<TableColumnItem><ScriptBlock>\r\n\r\n    switch ($_.UnixStat.ItemType)\r\n    {\r\n        'NamedPipe'       { $a =  4096 }\r\n        'CharacterDevice' { $a =  8192 }\r\n        'Directory'       { $a = 16384 }\r\n        'BlockDevice'     { $a = 24576 }\r\n        'File'            { $a = 32768 }\r\n        'SymbolicLink'    { $a = 40960 }\r\n        'Socket'          { $a = 49152 }\r\n    }\r\n\r\n    [convert]::ToString(($_.UnixStat.Mode - $a),8)\r\n\r\n</ScriptBlock></TableColumnItem>\r\n```",
      "created_at": "2022-01-13T23:42:40Z",
      "updated_at": "2022-01-14T13:38:44Z"
    }
  ],
  "created_at": "2022-01-12T15:33:37Z",
  "number": 16737,
  "state": "closed",
  "title": "UnixMode + UnixStat.Mode",
  "updated_at": "2022-01-14T13:38:44Z"
}