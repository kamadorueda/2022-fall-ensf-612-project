{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12563",
  "author": "daverickdunn",
  "body": "# Description\r\nI believe I have a good understanding of message streams in PowerShell but I do not understand why I cannot redirect or suppress this warning message from `New-PSSession` (see _Actual behavior_, below).\r\n\r\n# Context (skip if you don't care)\r\nI have a legitimate reason for wanting to control all message streams - I am trying to capture and serialise the output from any arbitrary command to send the results of each stream via std_out to a parent process that is running a different language (currently NodeJS, but the format is agnostic). I'm wrapping commands with `Invoke-Command` and it works great, but `New-PSSession` has one warning (of several) that does not behave like the others.\r\n\r\n# Steps to reproduce\r\nThis snippet is only a minimum to recreate the warning. It does not include any of the redirection / suppression methods I have tried\r\n\r\n```powershell\r\nparam (\r\n    $username,\r\n    $password\r\n)\r\n$secpasswd = ConvertTo-SecureString $password -AsPlainText -Force\r\n$creds = New-Object System.Management.Automation.PSCredential ($username, $secpasswd)\r\n$URL = \"https://ps.outlook.com/powershell\"\r\nNew-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri $URL -Credential $creds -Authentication Basic -AllowRedirection\r\n```\r\n# Methods that do not work\r\nNote: the `...` in each represents the parameters from the sample in _Steps to reproduce_, I've omitted for clarity.\r\n```powershell\r\nNew-PSSession *>$null ...\r\n```\r\n\r\n```powershell\r\nNew-PSSession ... | Out-Null\r\n```\r\n\r\n```powershell\r\nNew-PSSession *>$null ... -OutVariable x -ErrorVariable y -WarningVariable z\r\n```\r\n\r\n```powershell\r\nNew-PSSession *>$null ... -WarningAction SilentlyContinue\r\n```\r\n\r\n```powershell\r\n$WarningPreference = 'SilentlyContinue'\r\nNew-PSSession ...\r\n```\r\nI've even tried taking temporary control of `std_out`:\r\n\r\n```powershell\r\n$std_out = [System.Console]::Out\r\n$out_writer = New-Object IO.StringWriter\r\n[System.Console]::SetOut($out_writer)\r\n\r\n$std_err = [System.Console]::Error\r\n$err_writer = New-Object IO.StringWriter\r\n[System.Console]::SetOut($err_writer)\r\n\r\n$sess = New-PSSession ...\r\n\r\n[System.Console]::SetOut($std_out)\r\n[System.Console]::SetError($std_err)\r\n```\r\n\r\n# Expected behavior\r\n\r\nWarnings are ideally redirected, but neither redirection nor suppression works for this particular warning.\r\n\r\n# Actual behavior\r\n\r\nThe following warning is always written to console (text is yellow).\r\n\r\n```powershell\r\nWARNING: Using New-PSSession with Basic Authentication is going to be deprecated soon, checkout https://aka.ms/exops-docs for using Exchange Online V2 Module which uses Modern Authentication.\r\n```\r\n\r\n# Environment data\r\n\r\nTested on 7.1 and 5.1\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.0-preview.2\r\nPSEdition                      Core\r\nGitCommitId                    7.1.0-preview.2\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.18362.752\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.18362.752\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n",
  "closed_at": "2020-05-07T09:22:20Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Maybe `-WarningAction SilentlyContinue` resolve your issue?",
      "created_at": "2020-05-05T07:16:43Z",
      "updated_at": "2020-05-05T07:16:43Z"
    },
    {
      "author": "daverickdunn",
      "author_association": "NONE",
      "body": "@iSazonov Thanks, but as per my question, that doesn't work. \r\n\r\nAlso, if anyone wants 500 fake internet points, by all means answer the same question on [Stack Overflow](https://stackoverflow.com/questions/61549872/powershell-redirection-does-not-always-work)",
      "created_at": "2020-05-05T09:05:52Z",
      "updated_at": "2020-05-05T09:05:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> WARNING: Using New-PSSession with Basic Authentication is going to be deprecated soon, checkout https://aka.ms/exops-docs for using Exchange Online V2 Module which uses Modern Authentication.\r\n\r\nThe warning string is not in PowerShell Core - no such string in resx files. It comes from Exchange Online V2 Module. I guess they do not use the warning stream at all. It seems the module is not OSS so you have to use Windows Feedback tool or other channel to communicate with the module owners.\n\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/exchange/exchange-online/exchange-online-powershell-v2/exchange-online-powershell-v2\">Exchange Online PowerShell V2</a></strong></div><div>Learn how to download and use the Exchange Online PowerShell V2 module to connect to Exchange Online PowerShell.</div></blockquote>",
      "created_at": "2020-05-05T13:42:05Z",
      "updated_at": "2020-05-05T13:42:07Z"
    },
    {
      "author": "daverickdunn",
      "author_association": "NONE",
      "body": "@iSazonov I am not using the EXO V2 module. I am calling `New-PSsession`, which is part of **PowerShell Core**:\r\n\r\nhttps://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/new-pssession?view=powershell-7\r\n\r\nRegardless, this is in my opinion, a fundamental issue with the PowerShell language. If a programming language is non-deterministic, it's not a very well implemented language.\r\n\r\nThe redirection behavior outlined, (again under **PowerShell Core**), is not being honoured:\r\n\r\nhttps://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_redirection?view=powershell-7\r\n\r\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/new-pssession\">New-PSSession (Microsoft.PowerShell.Core)</a></strong></div><div>The New-PSSession cmdlet creates a PowerShell session (PSSession) on a local or remote computer. When you create a PSSession, PowerShell establishes a persistent connection to the remote computer. Use a PSSession to run multiple commands that share data, such as a function or the value of a variable. To run commands in a PSSession, use the Invoke-Command cmdlet. To use the PSSession to interact directly with a remote computer, use the Enter-PSSession cmdlet. For more information, see about_PSSessions. You can run commands on a remote computer without creating a PSSession by using the ComputerName parameters of Enter-PSSession or Invoke-Command. When you use the ComputerName parameter, PowerShell creates a temporary connection that is used for the command and is then closed. Starting with PowerShell 6.0 you can use Secure Shell (SSH) to establish a connection to and create a session on a remote computer, if SSH is available on the local computer and the remote computer is configured with a PowerShell SSH endpoint. The benefit of an SSH based PowerShell remote session is that it can work across multiple platforms (Windows, Linux, macOS). For SSH based sessions you use the HostName or SSHConnection parameter set to specify the remote computer and relevant connection information. For more information about how to set up PowerShell SSH remoting, see PowerShell Remoting Over SSH.  Note When using WSMan remoting from a Linux or macOS client with a HTTPS endpoint where the server certificate is not trusted (e.g., a self-signed certificate). You must provide a PSSessionOption that includes -SkipCACheck and -SkipCNCheck to successfully establish the connection. Only do this if you are in an environment where you can be certain of the server certificate and the network connection to the target system.  </div></blockquote>\r\n<blockquote><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_redirection\">about_Redirection - PowerShell</a></strong></div></blockquote>",
      "created_at": "2020-05-05T13:49:44Z",
      "updated_at": "2020-05-05T13:58:53Z"
    },
    {
      "author": "daverickdunn",
      "author_association": "NONE",
      "body": "@iSazonov Can I ask what the semantics are for the label **Resolution-Answered**?",
      "created_at": "2020-05-05T13:53:31Z",
      "updated_at": "2020-05-05T13:54:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">  I am not using the EXO V2 module.\r\n\r\nBut the message you posted suggests otherwise. \r\nSee Get-Module output in your session.",
      "created_at": "2020-05-05T17:49:56Z",
      "updated_at": "2020-05-05T17:49:56Z"
    },
    {
      "author": "daverickdunn",
      "author_association": "NONE",
      "body": "@iSazonov \r\n\r\nI am calling `New-PSSession`, a PowerShell Core module. \r\nI am using redirection, a feature of PowerShell Core. \r\n\r\nNowhere in the redirection documentation does it say that it's optional, bypassable, or there can exist multiples of the same stream. I understand if a .NET module has direct access to std_out, that's a different issue. But as my issue clearly states, this does not override as it should, and this warning is (almost certainly) emitted via _a_ warning stream.\r\n\r\nYou're telling me it's the server I'm connecting to that's the problem? I cannot agree with this. It shouldn't matter if the server I am connecting to is running Exchange or Minecraft. The contract that the PowerShell language proposes is broken. Redirection should be as fundamental to this language as operators and conditions `(2 + 2) -ne 5`.",
      "created_at": "2020-05-06T09:53:30Z",
      "updated_at": "2020-05-06T09:53:30Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@daverickdunn This is what you SHOULD provide if you need the support of the PowerShell team (repeatable step and code that does not involve starting from other projects.)\r\n\r\n# Steps to reproduce\r\n```\r\nNew-Item -ItemType Directory -Path C:\\Temp -ErrorAction SilentlyContinue\r\n'Write-Warning \"Warning stream\"' | Set-Content C:\\Temp\\InitScript.ps1\r\n\"@{ SchemaVersion = '2.0.0.0' ; GUID = '$([Guid]::NewGuid())' ; SessionType = 'Default' ; ScriptsToProcess = 'C:\\temp\\InitScript.ps1' } \" | \r\n    Set-Content C:\\Temp\\Temp.pssc\r\nRegister-PSSessionConfiguration -Name Test -Path C:\\Temp\\Temp.pssc *> $null\r\nRestart-Service WinRM\r\n\r\n$session = New-PSSession -ComputerName $env:COMPUTERNAME -ConfigurationName Test -WarningAction SilentlyContinue\r\n$session2 = New-PSSession -ComputerName $env:COMPUTERNAME -ConfigurationName Test *> $null\r\n\r\nUnregister-PSSessionConfiguration -Name test\r\n```\r\n\r\n# Expected behavior\r\nempty screen\r\n\r\n# Actual behavior\r\nWARNING: Warning stream\r\nWARNING: Warning stream\r\n",
      "created_at": "2020-05-06T13:18:13Z",
      "updated_at": "2020-05-06T13:18:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@PaulHigin Could you please comment the issue?",
      "created_at": "2020-05-06T13:49:44Z",
      "updated_at": "2020-05-06T13:49:44Z"
    },
    {
      "author": "daverickdunn",
      "author_association": "NONE",
      "body": "@fMichaleczek My initial question and your feedback are hardly worlds apart. What are the \"other projects\" you're talking about?",
      "created_at": "2020-05-06T14:58:42Z",
      "updated_at": "2020-05-06T14:58:42Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@daverickdunn I think all @fMichaleczek meant was that your reproduction is dependent on having an Exchange server to open a new session in, so it's a bit more of a complicated reproduction that could be affected by a number of factors external to powershell itself. \ud83d\ude42 \r\n\r\nThat said, the more straightforward reproduction he mentioned makes it clear that regardless of the session configuration / where the session is being created, warnings that occur during creating / initializing the PSSession are not being handled at all by the `New-PSSession` cmdlet and are simply being passed through.",
      "created_at": "2020-05-06T15:05:47Z",
      "updated_at": "2020-05-06T15:05:47Z"
    },
    {
      "author": "daverickdunn",
      "author_association": "NONE",
      "body": "@vexx32 Thanks for clarifying what he meant, but what is this barrier to entry for reporting a problem all about? It's boiled down to what I observed, with no fluff. Should reporters skip creating issues and go straight to pull requests? It's nonsense.",
      "created_at": "2020-05-06T15:11:46Z",
      "updated_at": "2020-05-06T15:11:46Z"
    },
    {
      "author": "BeaconMRat",
      "author_association": "NONE",
      "body": "This is my code.  How can I suppress warning \"Using New-PSSession with Basic Authentication is going to be deprecated soon...\"?  Appending &?HideBannermessage=true to the URL does not work.\r\n\r\n```\r\n$user = \"administrator@contso.onmicrosoft.com\"\r\n$pass = \"P@ssW0rd\"\r\n$password = $pass | ConvertTo-SecureString -asPlainText -Force\r\n$creds = New-Object -typename System.Management.Automation.PSCredential -Argumentlist $user, $password\r\nConnect-MSOLService -Credential $creds -ErrorAction Stop\r\nImport-Module MSOnline\r\n\r\n# Get list of tenants & loop\r\nGet-MsolPartnerContract -All | ForEach { \r\n    $tenantprefix = [string]$_.DefaultDomainName\r\n\r\n    # Configure the connection url and connect\r\n    $ConnectionUri = \"https://ps.outlook.com/powershell-liveid?DelegatedOrg=$tenantprefix\"\r\n    $Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri $ConnectionUri -Credential $creds -Authentication Basic -AllowRedirection -WarningAction SilentlyContinue\r\n    Import-PSSession $Session -AllowClobber -WarningAction SilentlyContinue -DisableNameChecking | Out-Null\r\n\r\n#run some cmdlets here...\r\n\r\n}\r\n```",
      "created_at": "2020-05-06T16:57:06Z",
      "updated_at": "2020-05-06T17:08:00Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Many thanks to @fMichaleczek for providing a clear repro.  The problem is that the warning is created during session creation script processing, and therefore outside the usual remoting command channel which handles data streams.  The result is that the server writes the warning directly to the console host through the session remote host call.\r\n\r\nUnfortunately, I don't see any workaround for this other than having Exchange session not write the warning during session creation.",
      "created_at": "2020-05-06T17:06:16Z",
      "updated_at": "2020-05-06T17:06:16Z"
    },
    {
      "author": "daverickdunn",
      "author_association": "NONE",
      "body": "@PaulHigin So in summary, are you saying there are other threads / processes that can access the console directly? Is there absolutely no way to capture and separate that output, even outside of redirection? As I state in my original comment, I've tried temporarily overriding stdout, to no avail. Am I doing that incorrectly, or is that approach completely without merit?\r\n\r\nSorry for the multiple questions. I hope you can see what I'm pursuing. If redirection is not canonical and side effects are always a risk, I'd just like to bottom out my options for making output deterministic. PowerShell went a long way to separate data into dedicated streams , it's a shame if that has to fall apart when we get as far as IPC.",
      "created_at": "2020-05-07T09:19:03Z",
      "updated_at": "2020-05-07T09:19:03Z"
    },
    {
      "author": "daverickdunn",
      "author_association": "NONE",
      "body": "You know what, I think I just answered my own question. I'll move to file IPC, other threads can pollute the console all they want.",
      "created_at": "2020-05-07T09:22:20Z",
      "updated_at": "2020-05-07T09:22:20Z"
    },
    {
      "author": "BeaconMRat",
      "author_association": "NONE",
      "body": "I solved my own issue...  The & had to be escaped in the ConnectionUri\r\n\r\n$ConnectionUri = \"https://ps.outlook.com/powershell-liveid?DelegatedOrg=$($tenantprefix)&amp;HideBannermessage=true\" ",
      "created_at": "2020-05-07T15:57:39Z",
      "updated_at": "2020-05-07T15:57:39Z"
    },
    {
      "author": "GalRabin",
      "author_association": "NONE",
      "body": "@devblackops \r\nIt seems that Microsoft isn't going to solve this issue, Therefor I sharing my solution for it:\r\n\r\n```powershell\r\nfunction GetRedirectUri ([string]$uri, [string]$upn, [string]$bearer_token) {\r\n    $tokenValue = ConvertTo-SecureString \"Bearer $bearer_token\" -AsPlainText -Force\r\n    $credential = New-Object System.Management.Automation.PSCredential($upn, $tokenValue) \r\n    try {\r\n        Invoke-WebRequest \"https://$uri/powershell-liveid?BasicAuthToOAuthConversion=true;PSVersion=7.0.3\" -Method 'POST' -Credential $credential -MaximumRedirection 0\r\n    }\r\n    catch {\r\n        if ($_.Exception.Response.StatusCode -eq \"Redirect\") {\r\n            $uri = $_.Exception.Response.Headers.Location.AbsoluteUri\r\n        } else {\r\n            throw $_.Exception\r\n        }\r\n    }\r\n\r\n    return $uri\r\n    <#\r\n        .DESCRIPTION\r\n        Solve Bug - When using bearer token the new-pssession unable to get redirect url for establishing pssession.\r\n        This function get redirect URI by interacting with WSMAN directly via Rest-API.\r\n\r\n        .PARAMETER uri\r\n        Security & Compliance Center uri.\r\n        \r\n        .PARAMETER upn\r\n        User Principal Name (UPN) is the name of a system user in an email address format..\r\n        \r\n        .PARAMETER bearer_token\r\n        Valid bearer token value.\r\n\r\n        .EXAMPLE\r\n        CreateNewSession(\"ps.compliance.protection.outlook.com\", \"user@microsoft.com\", \"dfhsdkjhkjhvkdvbihsgiu\")\r\n\r\n        .OUTPUTS\r\n        [string] Redirect uri if redirected. \r\n        \r\n        .LINK\r\n        https://github.com/PowerShell/PowerShell/issues/12563\r\n    #>\r\n}\r\n\r\nfunction CreateNewSession([string]$uri, [string]$upn, [string]$bearer_token) {\r\n    $tokenValue = ConvertTo-SecureString \"Bearer $bearer_token\" -AsPlainText -Force\r\n    $credential = New-Object System.Management.Automation.PSCredential($upn, $tokenValue) \r\n    $uri = GetRedirectUri $uri $upn $bearer_token\r\n    $session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri $uri -Credential $credential -Authentication Basic -AllowRedirection\r\n\r\n\tif (!$session) {\r\n\t\tthrow \"Fail - establishing session to $uri\"\r\n\t}\r\n\r\n\treturn $session\r\n    <#\r\n        .DESCRIPTION\r\n        Creates new pssession using Oauth2.0 method.\r\n        \r\n        .PARAMETER uri\r\n        Security & Compliance Center uri.\r\n        \r\n        .PARAMETER upn\r\n        User Principal Name (UPN) is the name of a system user in an email address format..\r\n        \r\n        .PARAMETER bearer_token\r\n        Valid bearer token value.\r\n\r\n        .EXAMPLE\r\n        CreateNewSession(\"ps.compliance.protection.outlook.com\", \"user@microsoft.com\", \"dfhsdkjhkjhvkdvbihsgiu\")\r\n\r\n        .OUTPUTS\r\n        PSSession - PSSession object.\r\n        \r\n        .LINK\r\n        https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/new-pssession?view=powershell-7\r\n    #>\r\n}\r\n```",
      "created_at": "2020-11-11T08:24:43Z",
      "updated_at": "2020-11-11T08:24:43Z"
    }
  ],
  "created_at": "2020-05-03T16:40:10Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered",
    "WG-Cmdlets-Core"
  ],
  "number": 12563,
  "state": "closed",
  "title": "PowerShell Redirection Not Working for New-PSSession",
  "updated_at": "2020-11-11T08:24:43Z"
}