{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13412",
  "author": "illusive-man",
  "body": "Pretty much what title says. When invoking from one workstation simple Get-ChildItem on remote PC, the Powershell 7.0.3 session  neither returns nor renders the content of given drive which is unexpected (see the screenshots provided below). Running the same script in Windows powershell 5.1 session works just fine. \r\n\r\n## Steps to reproduce\r\nTwo workstations in the same network. One is Win10 Pro x64 v1903 with PS 7.0.3, the second is on Windows 7 SP1 x64 with PS 2.0\r\nRemoting is enabled and working. WSMan's TrustedHosts - all hosts allowed on both WS.\r\n```powershell\r\nInvoke-Command -ComputerName 192.168.74.153 -ScriptBlock { Get-ChildItem 'C:\\' } -credential DocsUser\r\n```\r\n\r\n## Expected behavior\r\n\r\n```none\r\nLike when run on PS 5.1:\r\n![2020-08-12 13_50_11-Window](https://user-images.githubusercontent.com/25516639/90009510-dc7bbc80-dca6-11ea-9da4-b0bb4d97bca5.png)\r\n\r\n```\r\n\r\n## Actual behavior\r\n\r\n```none\r\nPowershell 7.0.3:\r\n![2020-08-12 13_49_59-Window](https://user-images.githubusercontent.com/25516639/90009575-f7e6c780-dca6-11ea-823b-033859d167e8.png)\r\n```\r\n\r\n## Environment data\r\n\r\n```none\r\n\r\nWindows 10 workstation:\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.3\r\nPSEdition                      Core\r\nGitCommitId                    7.0.3\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\nWindows 7 workstation:\r\nName                           Value\r\n----                           -----\r\nCLRVersion                     2.0.50727.8669\r\nBuildVersion                   6.1.7601.23403\r\nPSVersion                      2.0\r\nWSManStackVersion              2.0\r\nPSCompatibleVersions           {1.0, 2.0}\r\nSerializationVersion           1.1.0.1\r\nPSRemotingProtocolVersion      2.1\r\n```\r\n",
  "closed_at": "2020-08-13T17:00:13Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "IIRC this was an issue with the codeproperties the formatter tries to use or something. I'm pretty sure this got fixed fairly recently. Can you test on the latest preview release to be sure, though? \ud83d\ude42 ",
      "created_at": "2020-08-12T12:18:34Z",
      "updated_at": "2020-08-12T12:18:34Z"
    },
    {
      "author": "illusive-man",
      "author_association": "NONE",
      "body": "Alas, the issue is still there for 7.1.0 preview 5.",
      "created_at": "2020-08-12T12:53:39Z",
      "updated_at": "2020-08-12T12:53:39Z"
    },
    {
      "author": "illusive-man",
      "author_association": "NONE",
      "body": "@vexx32 I think you're right about formatter, since when I added \"`| Format-table`\" after \"`gci`\" the returned output is OK. But I suppose it's still the issue, since it should work without any additional actions/formats.",
      "created_at": "2020-08-12T14:14:53Z",
      "updated_at": "2020-08-12T14:14:53Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Ah, knew I'd seen it before. There's a bit more info in #11400. \r\n\r\nReading back through that discussion, sounds like the most promising option would be to duplicate the format view definitions for `System.IO.FileInfo` and `System.IO.DirectoryInfo` and explicitly declare the same formatters for their deserialised versions to account for this.\r\n\r\nI'll mark this as duplicate for now. If you're interested in looking at a fix yourself, I can point out the relevant code areas where the formatting is handled. If not, I might have a look in a while myself; it'd be good to get this fixed for 7.1. \ud83d\ude42 ",
      "created_at": "2020-08-12T14:28:32Z",
      "updated_at": "2020-08-12T14:28:32Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as duplicate and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-08-13T17:00:12Z",
      "updated_at": "2020-08-13T17:00:12Z"
    }
  ],
  "created_at": "2020-08-12T11:34:15Z",
  "labels": [
    "Issue-Bug",
    "Resolution-Duplicate"
  ],
  "number": 13412,
  "state": "closed",
  "title": "Simple Invoke-Command script doesn't return data from remote PC correctly",
  "updated_at": "2020-08-13T17:00:13Z"
}