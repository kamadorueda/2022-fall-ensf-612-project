{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16839",
  "author": "ClarkRSD",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nSimply take anything that produces an error and save the information into a variable. After recalling this variable more than once in the console, it simply returns the error itself, **not** the information that was intended to be saved via `Get-Error`.\n\n### Expected behavior\n\n```console\nPS C:\\Windows\\System32> Do-Something\r\nDo-Something: The term 'Do-Something' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\nPS C:\\Windows\\System32> $ErrorInformation = $error[0] | Get-Error\r\nPS C:\\Windows\\System32> $ErrorInformation\r\n\r\nException             :\r\n    Type        : System.Management.Automation.CommandNotFoundException\r\n    ErrorRecord :\r\n        Exception             :\r\n            Type    : System.Management.Automation.ParentContainsErrorRecordException\r\n            Message : The term 'Do-Something' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\n                      Check the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n            HResult : -2146233087\r\n        TargetObject          : Do-Something\r\n        CategoryInfo          : ObjectNotFound: (Do-Something:String) [], ParentContainsErrorRecordException\r\n        FullyQualifiedErrorId : CommandNotFoundException\r\n        InvocationInfo        :\r\n            ScriptLineNumber : 1\r\n            OffsetInLine     : 1\r\n            HistoryId        : 10\r\n            Line             : Do-Something\r\n            PositionMessage  : At line:1 char:1\r\n                               + Do-Something\r\n                               + ~~~~~~~~~~~~\r\n            InvocationName   : Do-Something\r\n            CommandOrigin    : Internal\r\n        ScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\n    CommandName : Do-Something\r\n    TargetSite  :\r\n        Name          : LookupCommandInfo\r\n        DeclaringType : System.Management.Automation.CommandDiscovery, System.Management.Automation, Version=7.3.0.1, Culture=neutral, PublicKeyToken=31bf3856ad364e35\r\n        MemberType    : Method\r\n        Module        : System.Management.Automation.dll\r\n    Message     : The term 'Do-Something' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\n                  Check the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n    Data        : System.Collections.ListDictionaryInternal\r\n    Source      : System.Management.Automation\r\n    HResult     : -2146233087\r\n    StackTrace  :\r\n   at System.Management.Automation.CommandDiscovery.LookupCommandInfo(String commandName, CommandTypes commandTypes, SearchResolutionOptions searchResolutionOptions,\r\nCommandOrigin commandOrigin, ExecutionContext context)\r\n   at System.Management.Automation.ExecutionContext.CreateCommand(String command, Boolean dotSource)\r\n   at System.Management.Automation.PipelineOps.AddCommand(PipelineProcessor pipe, CommandParameterInternal[] commandElements, CommandBaseAst commandBaseAst,\r\nCommandRedirection[] redirections, ExecutionContext context)\r\n   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal[][] pipeElements, CommandBaseAst[] pipeElementAsts,\r\nCommandRedirection[][] commandRedirections, FunctionContext funcContext)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\nTargetObject          : Do-Something\r\nCategoryInfo          : ObjectNotFound: (Do-Something:String) [], CommandNotFoundException\r\nFullyQualifiedErrorId : CommandNotFoundException\r\nInvocationInfo        :\r\n    ScriptLineNumber : 1\r\n    OffsetInLine     : 1\r\n    HistoryId        : 10\r\n    Line             : Do-Something\r\n    PositionMessage  : At line:1 char:1\r\n                       + Do-Something\r\n                       + ~~~~~~~~~~~~\r\n    InvocationName   : Do-Something\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\nPS C:\\Windows\\System32> $ErrorInformation\r\n\r\nException             :\r\n    Type        : System.Management.Automation.CommandNotFoundException\r\n    ErrorRecord :\r\n        Exception             :\r\n            Type    : System.Management.Automation.ParentContainsErrorRecordException\r\n            Message : The term 'Do-Something' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\n                      Check the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n            HResult : -2146233087\r\n        TargetObject          : Do-Something\r\n        CategoryInfo          : ObjectNotFound: (Do-Something:String) [], ParentContainsErrorRecordException\r\n        FullyQualifiedErrorId : CommandNotFoundException\r\n        InvocationInfo        :\r\n            ScriptLineNumber : 1\r\n            OffsetInLine     : 1\r\n            HistoryId        : 10\r\n            Line             : Do-Something\r\n            PositionMessage  : At line:1 char:1\r\n                               + Do-Something\r\n                               + ~~~~~~~~~~~~\r\n            InvocationName   : Do-Something\r\n            CommandOrigin    : Internal\r\n        ScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\n    CommandName : Do-Something\r\n    TargetSite  :\r\n        Name          : LookupCommandInfo\r\n        DeclaringType : System.Management.Automation.CommandDiscovery, System.Management.Automation, Version=7.3.0.1, Culture=neutral, PublicKeyToken=31bf3856ad364e35\r\n        MemberType    : Method\r\n        Module        : System.Management.Automation.dll\r\n    Message     : The term 'Do-Something' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\n                  Check the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n    Data        : System.Collections.ListDictionaryInternal\r\n    Source      : System.Management.Automation\r\n    HResult     : -2146233087\r\n    StackTrace  :\r\n   at System.Management.Automation.CommandDiscovery.LookupCommandInfo(String commandName, CommandTypes commandTypes, SearchResolutionOptions searchResolutionOptions,\r\nCommandOrigin commandOrigin, ExecutionContext context)\r\n   at System.Management.Automation.ExecutionContext.CreateCommand(String command, Boolean dotSource)\r\n   at System.Management.Automation.PipelineOps.AddCommand(PipelineProcessor pipe, CommandParameterInternal[] commandElements, CommandBaseAst commandBaseAst,\r\nCommandRedirection[] redirections, ExecutionContext context)\r\n   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal[][] pipeElements, CommandBaseAst[] pipeElementAsts,\r\nCommandRedirection[][] commandRedirections, FunctionContext funcContext)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\nTargetObject          : Do-Something\r\nCategoryInfo          : ObjectNotFound: (Do-Something:String) [], CommandNotFoundException\r\nFullyQualifiedErrorId : CommandNotFoundException\r\nInvocationInfo        :\r\n    ScriptLineNumber : 1\r\n    OffsetInLine     : 1\r\n    HistoryId        : 10\r\n    Line             : Do-Something\r\n    PositionMessage  : At line:1 char:1\r\n                       + Do-Something\r\n                       + ~~~~~~~~~~~~\r\n    InvocationName   : Do-Something\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\n```\n\n\n### Actual behavior\n\n```console\nPS C:\\Windows\\System32> Do-Something\r\nDo-Something: The term 'Do-Something' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\nPS C:\\Windows\\System32> $ErrorInformation = $error[0] | Get-Error\r\nPS C:\\Windows\\System32> $ErrorInformation\r\n\r\nException             :\r\n    Type        : System.Management.Automation.CommandNotFoundException\r\n    ErrorRecord :\r\n        Exception             :\r\n            Type    : System.Management.Automation.ParentContainsErrorRecordException\r\n            Message : The term 'Do-Something' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\n                      Check the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n            HResult : -2146233087\r\n        TargetObject          : Do-Something\r\n        CategoryInfo          : ObjectNotFound: (Do-Something:String) [], ParentContainsErrorRecordException\r\n        FullyQualifiedErrorId : CommandNotFoundException\r\n        InvocationInfo        :\r\n            ScriptLineNumber : 1\r\n            OffsetInLine     : 1\r\n            HistoryId        : 10\r\n            Line             : Do-Something\r\n            PositionMessage  : At line:1 char:1\r\n                               + Do-Something\r\n                               + ~~~~~~~~~~~~\r\n            InvocationName   : Do-Something\r\n            CommandOrigin    : Internal\r\n        ScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\n    CommandName : Do-Something\r\n    TargetSite  :\r\n        Name          : LookupCommandInfo\r\n        DeclaringType : System.Management.Automation.CommandDiscovery, System.Management.Automation, Version=7.3.0.1, Culture=neutral, PublicKeyToken=31bf3856ad364e35\r\n        MemberType    : Method\r\n        Module        : System.Management.Automation.dll\r\n    Message     : The term 'Do-Something' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\n                  Check the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n    Data        : System.Collections.ListDictionaryInternal\r\n    Source      : System.Management.Automation\r\n    HResult     : -2146233087\r\n    StackTrace  :\r\n   at System.Management.Automation.CommandDiscovery.LookupCommandInfo(String commandName, CommandTypes commandTypes, SearchResolutionOptions searchResolutionOptions,\r\nCommandOrigin commandOrigin, ExecutionContext context)\r\n   at System.Management.Automation.ExecutionContext.CreateCommand(String command, Boolean dotSource)\r\n   at System.Management.Automation.PipelineOps.AddCommand(PipelineProcessor pipe, CommandParameterInternal[] commandElements, CommandBaseAst commandBaseAst,\r\nCommandRedirection[] redirections, ExecutionContext context)\r\n   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal[][] pipeElements, CommandBaseAst[] pipeElementAsts,\r\nCommandRedirection[][] commandRedirections, FunctionContext funcContext)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\nTargetObject          : Do-Something\r\nCategoryInfo          : ObjectNotFound: (Do-Something:String) [], CommandNotFoundException\r\nFullyQualifiedErrorId : CommandNotFoundException\r\nInvocationInfo        :\r\n    ScriptLineNumber : 1\r\n    OffsetInLine     : 1\r\n    HistoryId        : 10\r\n    Line             : Do-Something\r\n    PositionMessage  : At line:1 char:1\r\n                       + Do-Something\r\n                       + ~~~~~~~~~~~~\r\n    InvocationName   : Do-Something\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\n\r\nPS C:\\Windows\\System32> $ErrorInformation\r\n\r\nDo-Something: The term 'Do-Something' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nPS C:\\Windows\\System32> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.3.0-preview.1\r\nPSEdition                      Core\r\nGitCommitId                    7.3.0-preview.1\r\nOS                             Microsoft Windows 10.0.19044\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2022-02-06T12:00:40Z",
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "It's the formatting script, \r\n\r\nGet-Error returns an object with a type which triggers special formatting. \r\n```\r\n$ErrorInformation = $error[0] | Get-Error\r\n$ErrorInformation $e | gm\r\n\r\n   TypeName: System.Management.Automation.ErrorRecord#PSExtendedError\r\n```\r\n\r\nThis shows the script \r\n```\r\n(Get-FormatData System.Management.Automation.ErrorRecord#PSExtendedError).FormatViewDefinition.Control.entries.customitems.expression.value\r\n```\r\n\r\nThere's code at the end specifically to remove it that type, so the next time it won't format.  I don't know why.  There are number of things looking at that code where I don't know why things have been done as they have (TBH it doesn't look to have been properly reviewed) \r\n\r\n\r\n",
      "created_at": "2022-02-04T01:09:11Z",
      "updated_at": "2022-02-04T01:09:11Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "If the goal is to save to variable the full output of `Get-Error`, not the ErrorRecord object, then it can be saved as a string.\r\n```powershell\r\n> 1/0\r\nRuntimeException: Attempted to divide by zero.\r\n\r\n> $err = Get-Error | Out-String\r\n```",
      "created_at": "2022-02-04T07:32:03Z",
      "updated_at": "2022-02-04T07:32:03Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> If the goal is to save to variable the full output of `Get-Error`, not the ErrorRecord object, then it can be saved as a string.\r\n> \r\n> ```powershell\r\n> > 1/0\r\n> RuntimeException: Attempted to divide by zero.\r\n> \r\n> > $err = Get-Error | Out-String\r\n> ```\r\n\r\nYes, or the OP  could replace \r\n```\r\n> $ErrorInformation = $error[0] | Get-Error \r\n> $ErrorInformation \r\n...\r\n> $ErrorInformation \r\n```\r\n\r\nwith \r\n```\r\n> $MyError = $error[0] \r\n> $MyError  | Get-Error \r\n...\r\n>$MyError  | Get-Error \r\n```\r\n\r\nBut, **as a general principle , formatting code should not change the object being formatted** . Code which does so really needs to be classed as **a bug.**   \r\nI think  @theJasonHelmick   was involved in this initially, and might be able to shed some light on whether this was done for good reason or if something crept into the the release that shouldn't be there : it looks like the latter to me. \r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2022-02-04T11:03:47Z",
      "updated_at": "2022-02-04T11:04:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "`Get-Error` temporary removes `System.Management.Automation.ErrorRecord` from TypeNames property and add `System.Management.Automation.ErrorRecord#PSExtendedError`. But in second call of the variable PowerShell Engine evaluate properties of the psobject and as result reset TypeNames property to \"right\" value.\r\n\r\nI think we have no need to fix something since workarounds exist.",
      "created_at": "2022-02-04T12:10:14Z",
      "updated_at": "2022-02-04T12:10:14Z"
    },
    {
      "author": "ClarkRSD",
      "author_association": "NONE",
      "body": "Yes, there is a workaround to format the error into a string.\r\n\r\nI should have clarified in my OP that I know how to workaround this by doing what's outlined above and putting the error into a string or whatever item that I'm needing specifically in the error into a string, but I figured I would report this as I wasn't sure if this is something that would be something that would want to even be fixed or not, as you have mentioned, @iSazonov.",
      "created_at": "2022-02-04T15:11:43Z",
      "updated_at": "2022-02-04T15:11:43Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "My 0.02... the act of formatting something for output should not change it. \r\n\r\nThis is a badly behaved bit of code which should all be in one lump.\r\n\r\n```\r\nps> $error[2]\r\n\r\nInvalidOperation: Method invocation failed because [System.Management.Automation.ErrorRecord] does not ...\r\n\r\nps> $e = $error[2] | get-error\r\n\r\nps> $error[2]\r\n\r\nException             :\r\n    Type        : System.Management.Automation.RuntimeException\r\n    ErrorRecord :\r\n        Exception             :\r\n            Type    : System.Management.Automation.ParentContainsErrorRecordException\r\n            Message : Method invocation failed because [System.Management.Automation.ErrorRecord] does not ....\r\n```\r\n\r\n\r\nThis looks like it was written as  one big script to print an error, and then it was split into return an object, and formatting to print it.  So if you don't format the what is returned by `Get-Error` you are left with `$error[i]` having its `PSTypeNames` modified. \r\n```\r\nps> $error[2].pstypenames\r\nSystem.Object\r\nSystem.Management.Automation.ErrorRecord\r\n\r\nps> $e = $Error[2] | get-error\r\n\r\nps> $error[2].pstypenames\r\nSystem.Management.Automation.ErrorRecord#PSExtendedError\r\nSystem.Object\r\n```\r\n Which is the first wrong, the cmdlet should make a copy, to preserve the original.  $e and $error[2] point to the same bytes.  so when the formatting runs it reverts them that's the second wrong. Get-Error only works properly if the output is immediately formatted which as we see here isn't always the case. There is a much better way to do this - and this isn't the kind of practice built in commands should demonstrate .\r\n\r\n",
      "created_at": "2022-02-04T16:47:00Z",
      "updated_at": "2022-02-04T16:47:55Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "You can save `$error[0] | Get-Error` as a scriptblock:\r\n```powershell\r\n > $err = [scriptblock]::Create(\"`$error`[-$($error.Count)`] `| Get-Error\")\r\n > $err\r\n$error[-17] | Get-Error\r\n\r\n > (& $err).GetType().Fullname\r\nSystem.Management.Automation.ErrorRecord\r\n\r\n > & $err      # returns full output\r\n```",
      "created_at": "2022-02-04T18:10:03Z",
      "updated_at": "2022-02-04T18:10:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "For information, Get-Error cmdlet was designed exclusively as helper for _interactive_ scenarios, it makes no sense to use it scripts.",
      "created_at": "2022-02-05T03:33:27Z",
      "updated_at": "2022-02-05T03:33:27Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-02-06T12:00:39Z",
      "updated_at": "2022-02-06T12:00:39Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> For information, Get-Error cmdlet was designed exclusively as helper for _interactive_ scenarios, it makes no sense to use it scripts.\r\n\r\nEven so it doesn't need to screw up the error objects and fix them during the output process. \r\n\r\nI've created a function based on the `Get-Error` c#  and the script embedded in the formatting to do it all in one place so what the OP complained about doesn't happen any more. It also allows the colors to be specified, sorts out the colons for nested items being less indented and and handles long lines better. \r\n\r\nhttps://gist.github.com/jhoneill/6e79c210f78eda01f72426c173fa2bf4 \r\n\r\n\n\n<blockquote><img src=\"https://github.githubassets.com/images/modules/gists/gist-og-image.png\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> Gist</div><div><strong><a href=\"https://gist.github.com/jhoneill/6e79c210f78eda01f72426c173fa2bf4\">replaceGet-Error.ps1</a></strong></div><div>GitHub Gist: instantly share code, notes, and snippets.</div></blockquote>",
      "created_at": "2022-02-06T16:20:38Z",
      "updated_at": "2022-02-06T16:20:40Z"
    }
  ],
  "created_at": "2022-02-03T18:32:52Z",
  "number": 16839,
  "state": "closed",
  "title": "Get-Error unexpected behavior when error information is saved inside variable",
  "updated_at": "2022-02-06T16:20:40Z"
}