{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12848",
  "author": "ZonderP",
  "body": "Since I yesterday reported a different issue with a simple example, I though it would be a good time  to finally also report a bug that really annoys me, since it somehow makes weeks of work useless.\r\n\r\nOver the last years I spent many days (or even weeks - all in all) on working on something I call colored HTML transcription (and as a side project 'ANSI colored output' - for use in Jenkins).\r\nColored HTML transcription mainly works like 'Start-Transcript'/'Stop-Transcript' but instead of just logging text, it more or less transfers the console to an html file with all the colors we see on the console.\r\nFor this to work as expected I override all the 'Write-' functions (e.g.: 'Write-Information', 'Write-Warning', 'Write-Error' - except 'Write-Output'.)\r\n\r\nI write cmdlets in my modules usually in a way, that they use 'Write-Error', when I consider something to be an error, thus giving the users the possibility to decide for themselves, if those errors should be terminating or not by calling them either with '-ErrorAction:Stop' or not so.\r\n\r\nMy cmdlets in my modules serve mainly for automated testing, so it is often desired, that a test fails, if an error occurs and thus many of those cmdlets are called with '-ErrorAction:Stop'.\r\nAnd for automated testing we used to use 'Colored HTML transcription', because for human testers it is very convenient to see colors in transcript files which got produced for test suites which run hundreds of tests over night to immediately see errors and warnings and hints.\r\nBut we had to stop to make use of this nice feature, because at some point I found out, that the very important feature of 'auto terminating' a single test with 'Failed' in case of an error didn't work under some circumstances, because of the bug, where -ErrorAction:Stop' just doesn't work.\r\n\r\nAs a side note:\r\nThe bug is easily reproducible on 7.0.1 as well as on 5.1.\r\n\r\n# Steps to reproduce\r\n\r\nOverwrite 'Write-Error' in a module the way it can be found in many examples on the Internet and I think also in the 'Windows PowerShell Cookbook' by 'O'Reilly' (steppablePipeline).\r\nThe overwrite just may use again the original 'Microsoft.PowerShell.Utility\\Write-Error'.\r\nIn that same module write a simple cmdlet called like 'Test-WriteErrorInOverloadModule' which does nothing else then call 'Write-Error' with some message.\r\nThen in some other module write a simple cmdlet called like 'Test-WriteErrorInOtherModule' which also just calls 'Write-Error' with some message.\r\n\r\nIn the module where the 'Write-Error' overwrite is defined, also add a function which replaces the original 'Write-Error' cmdlet with the 'Overwrite'.\r\n\r\nNow call the function which does the 'Write-Error' replacement and then call:\r\n'Test-WriteErrorInOverloadModule -ErrorAction:Stop' within a try/catch\r\nand then call 'Test-WriteErrorInOtherModule -ErrorAction:Stop' withing a try/catch and see what happens!\r\nThe first one will go to the catch block, but the second one not!\r\n\r\n# Expected behavior\r\nAlso the call to 'Test-WriteErrorInOtherModule -ErrorAction:Stop' should go to the catch block.\r\n\r\n# Actual behavior\r\nThe call to 'Test-WriteErrorInOtherModule -ErrorAction:Stop' doesn't make the error thrown within that function to be a terminating error as expected.\r\n\r\n# Environment data\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.1\r\nPSEdition                      Core\r\nGitCommitId                    7.0.1\r\nOS                             Microsoft Windows 6.1.7601 Service Pack 1\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\nI'm quite sure, that some guys here are aware of that problem, because when I tried to find a solution for it back then some months ago - I stumbled over dozens of Powershell 'Error-Handling' related issues and really very long discussions on this topic here on this Powershell GitHub where I also found indications, that this is a real problem that - depending from where called, the behavior might be different.\r\nIf you ask me - this is a severe issue, because if you cannot rely on something that important to work the same way independently of some preconditions, you really loose a lot of trust.\r\n\r\nSince this bug is not that easy to reproduce, I attached a zip file with 2 modules where everything already is prepared, so that you do not have to write those before-mentioned cmdlets yourself.\r\nJust call the script 'Check.ps1' (located in the 'WriteErrorOverloadModule' base directory) and see what happens.\r\n\r\nIf someone would know of a workaround to overcome this problem, I would very much appreciate if you could give me hints how to do so.\r\n\r\n[PoSh Example for Write-Error overload problem.zip](https://github.com/PowerShell/PowerShell/files/4706586/PoSh.Example.for.Write-Error.overload.problem.zip)\r\n",
  "closed_at": "2020-06-01T23:00:13Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "This is a known issue, but fixing it may break a _lot_ of existing code intentionally or unintentionally built expecting the current behaviour.\r\n\r\nSee #4568 and @KirkMunro's RFC which would need to be accepted before we can accept any fixes for this problem: https://github.com/PowerShell/PowerShell-RFC/pull/221\r\n\r\nThis is a bit of a more specific case, it seems, but the symptoms are the same as #4568 ultimately; please add anything more that is not already mentioned in that issue into that thread. I'm marking this one as duplicate for now, though. \ud83d\ude42 ",
      "created_at": "2020-05-30T23:14:17Z",
      "updated_at": "2020-05-30T23:16:25Z"
    },
    {
      "author": "ZonderP",
      "author_association": "NONE",
      "body": "From my understanding I have to disagree that this issue is a duplicate of https://github.com/PowerShell/PowerShell/issues/4568.\r\nThat other issue is about execution preference variables not being transferred to another scope, whereas this issue is about the 'ErrorAction' parameter passed in to a cmdlet defined in another scope not being considered.\r\n\r\nThere is - in my understanding - a slight chance, that there is an overlap, but from what I read in that other issue's conversation, a parameter like 'ErrorAction' will internally change the execution preference variable 'ErrorActionPreference' in that other scope if it happens that the called cmdlet is in another scope than the callee, but my described issue has really nothing to do with transferring such an execution preference variable to another scope.\r\n\r\nI completely understand that fixing https://github.com/PowerShell/PowerShell/issues/4568 has the potential to break a lot of existing code.\r\n\r\nBut this ticket is on one hand about something different and on the other hand could have chances to be fixed.\r\n\r\nOnly because symptoms are somewhat the same does not justify that issues are the same.",
      "created_at": "2020-05-31T07:53:11Z",
      "updated_at": "2020-05-31T08:05:07Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I agree the reproduction here is a little different, but given that we still are, ultimately, invoking _script_ module functions in both cases, the fact that one is a proxy command for the original cmdlet seems to be a lesser detail.\r\n\r\nIn both cases, the expected behaviour (inheriting the -ErrorAction preference setting) is lost as soon as a separate script module's code is called.\r\n\r\nI would be surprised if there is a second cause for the same issue.",
      "created_at": "2020-05-31T16:07:19Z",
      "updated_at": "2020-05-31T16:07:19Z"
    },
    {
      "author": "ZonderP",
      "author_association": "NONE",
      "body": "Yes, you're right, I missed an important point:\r\nIn my example script I call 'Test-WriteErrorInSomeModule' with the 'ErrorAction:Stop' parameter,\r\nbut then the call to Write-Error is not using '-ErrorAction:$ErrorActionPreference', but instead relies on inheritance.\r\nJust to give me some hope:\r\nWould a work-around be that I  write my function 'Write-ErrorInternal' as a binary module function?",
      "created_at": "2020-05-31T19:50:21Z",
      "updated_at": "2020-05-31T19:50:21Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "From what I understand, that should work, yeah.",
      "created_at": "2020-05-31T20:08:35Z",
      "updated_at": "2020-05-31T20:08:35Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as duplicate and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-06-01T23:00:12Z",
      "updated_at": "2020-06-01T23:00:12Z"
    }
  ],
  "created_at": "2020-05-30T21:45:08Z",
  "number": 12848,
  "state": "closed",
  "title": "-ErrorAction:Stop doesn't work as it should under special conditions.",
  "updated_at": "2020-06-01T23:00:13Z"
}