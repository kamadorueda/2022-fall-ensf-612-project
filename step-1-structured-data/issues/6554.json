{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6554",
  "author": "KevinMarquette",
  "body": "When I call `Get-PSSessions -State Opened` I get this error that says the parameter set cannot be resolved. It should be valid to call `Get-PSSession` with just the `-State` parameter to get the sessions that match that state.\r\n\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nGet-PSSession -State Opened\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nId Name            ComputerName    ComputerType    State         ConfigurationName     Availability\r\n -- ----            ------------    ------------    -----         -----------------     ------------\r\n  1 WinRM1          Server1   RemoteMachine   Opened        Microsoft.PowerShell     Available\r\n  3 WinRM2          Server2   RemoteMachine   Opened        Microsoft.PowerShell     Available\r\n  2 WinRM3          Server3   RemoteMachine   Opened        Microsoft.PowerShell     Available\r\n  4 WinRM4          Server4   RemoteMachine   Opened        Microsoft.PowerShell     Available\r\n```\r\n\r\nActual behavior\r\n---------------\r\n```none\r\nGet-PSSession : Parameter set cannot be resolved using the specified named parameters.\r\nAt line:1 char:1\r\n+ Get-PSSession -State Opened\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidArgument: (:) [Get-PSSession], ParameterBindingException\r\n    + FullyQualifiedErrorId : AmbiguousParameterSet,Microsoft.PowerShell.Commands.GetPSSessionCommand\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.2\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.2\r\nOS                             Microsoft Windows 10.0.16299\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "KevinMarquette",
      "author_association": "CONTRIBUTOR",
      "body": "looks like `-ConfigurationName` suffers from the same problem.",
      "created_at": "2018-04-04T04:01:06Z",
      "updated_at": "2018-04-04T04:01:06Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "`Get-PSSession -State Opened -ComputerName localhost`",
      "created_at": "2018-04-05T14:49:10Z",
      "updated_at": "2018-04-05T14:49:10Z"
    },
    {
      "author": "KevinMarquette",
      "author_association": "CONTRIBUTOR",
      "body": "The discussion point here is that the current implementation requires that you will provide another parameter. This is the current workaround:\r\n\r\n    Get-PSSession | Where State -eq 'Opened'",
      "created_at": "2018-04-05T20:51:01Z",
      "updated_at": "2018-04-05T20:51:01Z"
    },
    {
      "author": "thomascwiley",
      "author_association": "NONE",
      "body": "> `Get-PSSession -State Opened -ComputerName localhost`\r\n\r\nThis doesn't work when connecting to a remote host, obviously. For scripts that run in loops for multiple hours (e.g. moving several hundred accounts to Skype online) it's useful to clear out the broken sessions on an interval. \r\n\r\nThe 'Get-pssession | where-object {$_.State -eq 'Opened'}' workaround is reliable, but not very efficient. ",
      "created_at": "2019-07-23T18:43:31Z",
      "updated_at": "2019-07-23T18:43:31Z"
    }
  ],
  "created_at": "2018-04-03T23:53:35Z",
  "labels": [
    "Issue-Discussion",
    "WG-Cmdlets-Core"
  ],
  "number": 6554,
  "state": "open",
  "title": "Should be able to call Get-PSSession -State Opened",
  "updated_at": "2019-07-23T18:43:31Z"
}