{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13181",
  "author": "i5513",
  "body": "Some times you have an list of psobject with empty properties values (which will distract you from the important properties). I think it should be possible with format-list to skip such properites without any third-party function\r\n\r\nI'm not alone:\r\nhttps://stackoverflow.com/a/44370806/410540\r\n\r\nI propose:\r\n-skipEmty will not show you the noteProperties which have null or empty strings\r\n\r\nor may be:\r\n-skipPattern \"^$|^\\s+$\"\r\n\r\nSimulating the expected output:\r\nNew-Object PSObject -Property @{\"a\"=$null; \"b\"=\"b\"; \"c\"=\"c\"} | fl | out-string -Stream |  sls -NotMatch \"^[^:]*:\\s+$\"\r\n\r\nThank you!",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We have Where-Object cmdlet for filtering. It is not clear why we should move Where-Object functionality to formatting cmdlets.",
      "created_at": "2020-07-20T13:32:23Z",
      "updated_at": "2020-07-20T13:32:23Z"
    },
    {
      "author": "i5513",
      "author_association": "NONE",
      "body": "Sorry I did not explain (this is not a where-object funcionality). See this example ($person have a list of person data):\r\n\r\n> $person | fl\r\nName: Jorge\r\nCity: Jaen\r\nTelephone:\r\nName: Juan\r\nCity: M\u00e1laga\r\nTelephone: 666555444\r\n\r\n> $person | fl -skipEmpty\r\nName: Jorge\r\nCity: Jaen\r\nName: Juan\r\nCity: M\u00e1laga\r\nTelephone: 666555444\r\n\r\nSee Telephone of Jorge is not presente because It is empty\r\n\r\nThe same idea could be with -skipPattern\r\n\r\nThis parameter apply better with objects with many noteProperties like those created with importfrom-csv using a csv with many columns\r\n\r\nSorry for my english ",
      "created_at": "2020-07-20T16:38:55Z",
      "updated_at": "2020-07-20T16:40:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "For the case you can do:\r\n```powershell\r\n$person | Where-Object Telephone | fl\r\n```",
      "created_at": "2020-07-20T16:41:30Z",
      "updated_at": "2020-07-20T16:41:30Z"
    },
    {
      "author": "i5513",
      "author_association": "NONE",
      "body": "> For the case you can do:\r\n> \r\n> ```powershell\r\n> $person | Where-Object Telephone | fl\r\n> ```\r\n\r\nI have not powershell to exec this now but I think It would skip Jorge info (not only not show Telephone in the output)\r\n\r\nI Will test ir later\r\n\r\nThink about a larger csv import. If there are many empty properties this parameter would be very useful to inspect the data from command line\r\n\r\nThank you very much!",
      "created_at": "2020-07-20T16:46:48Z",
      "updated_at": "2020-07-20T16:46:48Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "> I have not powershell to exec this now but I think It would skip Jorge info (not only not show Telephone in the output)\r\n\r\nThat's correct. Where-Object is not designed to skip individual properties on objects, only whole objects based on a given condition.\r\n\r\nThis request is different, I think. Asking Format-List to simply skip individual properties on every object if they're null or empty is definitely useful in some cases, there are cases where some objects may have many null properties that the user doesn't care to display.\r\n\r\nCurrently the closest thing you can do here is something like this:\r\n\r\n```ps1\r\n$PropertiesShown = $person.PSObject.Properties.Where{$_.Value}.Name\r\n$person | Select-Object -Property $PropertiesShown | Format-List\r\n```\r\n\r\nWe could definitely stand to add a switch to make this more accessible.",
      "created_at": "2020-07-20T16:53:16Z",
      "updated_at": "2020-07-20T16:53:16Z"
    },
    {
      "author": "i5513",
      "author_association": "NONE",
      "body": "> > I have not powershell to exec this now but I think It would skip Jorge info (not only not show Telephone in the output)\r\n> \r\n> That's correct. Where-Object is not designed to skip individual properties on objects, only whole objects based on a given condition.\r\n> \r\n> This request is different, I think. Asking Format-List to simply skip individual properties on every object if they're null or empty is definitely useful in some cases, there are cases where some objects may have many null properties that the user doesn't care to display.\r\n> \r\n> Currently the closest thing you can do here is something like this:\r\n> \r\n> ```powershell\r\n> $PropertiesShown = $person.PSObject.Properties.Where{$_.Value}.Name\r\n> $person | Select-Object -Property $PropertiesShown | Format-List\r\n> ```\r\n> \r\n\r\nIt is (but with foreach ($p in $person) ir similar loop)\r\n\r\nThank you!\r\n\r\n",
      "created_at": "2020-07-20T17:07:43Z",
      "updated_at": "2020-07-20T17:07:43Z"
    }
  ],
  "created_at": "2020-07-15T18:00:52Z",
  "labels": [
    "Issue-Question",
    "WG-Engine"
  ],
  "number": 13181,
  "state": "open",
  "title": "Feature Request: Format-List add -skipEmpty parameter",
  "updated_at": "2020-07-20T17:07:43Z"
}