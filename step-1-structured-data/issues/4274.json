{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4274",
  "author": "rkeithhill",
  "body": "We are working with more and more \"Linux\" based servers where we get instructions to run `curl` to say get back content for a `.npmrc` file from a product called Artifactory.  This product uses Basic auth to accept credentials.\r\n\r\nThe instructions they give are:\r\n```bash\r\ncurl -u<USERNAME>:<PASSWORD> http://artifactory.it.keysight.com:8081/artifactory/api/npm/auth\r\n```\r\n\r\nTo get this to work in PowerShell using Invoke-WebRequest, this is the best I could come up with:\r\n```posh\r\n$userpassB64 = [byte[]][char[]]\"hillr:OpenSesame\" | ConvertTo-Base64 -NoLineBreak\r\n$res = Invoke-WebRequest http://artifactory.my.company.com:8081/artifactory/api/npm/auth `\r\n       -Headers @{Authorization = \"Basic $userpassB64\"}\r\n```\r\nFirst, `ConvertTo-Base64` is a PSCX command (we really need B64 encode/decode in PS Core).  Second, Basic auth should be built-in like it is in CURL. \r\n\r\nThis what I'd like to see from Invoke-WebRequest:\r\n```posh\r\n$res = Invoke-WebRequest http://artifactory.my.company.com:8081/artifactory/api/npm/auth `\r\n       -UseBasicAuth -Credential (Get-Credential)\r\n```\r\nThis `-UseBasicAuth` switch should also support the `-UseDefaultCredentials` parameter.  However the trick is whether or not to include the `Domain\\` in the `username` field.  That option, when coupled with `-UseBasicAuth` \"probably\" should not include the domain.  In our scenario, Artifactory will fail to authenticate if the domain is specified.  Either way, the user can always fall back to explicitly providing the username with `-Credential (Get-Credential)`.\r\n\r\nFYI, the curl docs on `-u`:\r\n> -u, --user <user:password> \r\nSpecify the user name and password to use for server authentication. Overrides -n, --netrc and --netrc-optional. \r\nIf you simply specify the user name, curl will prompt for a password. \r\nThe user name and passwords are split up on the first colon, which makes it impossible to use a colon in the user name with this option. The password can, still. \r\nWhen using Kerberos V5 with a Windows based server you should include the Windows domain name in the user name, in order for the server to successfully obtain a Kerberos Ticket. If you don't then the initial authentication handshake may fail. \r\nWhen using NTLM, the user name can be specified simply as the user name, without the domain, if there is a single domain and forest in your setup for example. \r\nTo specify the domain name use either Down-Level Logon Name or UPN (User Principal Name) formats. For example, EXAMPLE\\user and user@example.com respectively. \r\nIf you use a Windows SSPI-enabled curl binary and perform Kerberos V5, Negotiate, NTLM or Digest authentication then you can tell curl to select the user name and password from your environment by specifying a single colon with this option: \"-u :\". \r\nIf this option is used several times, the last one will be used. \r\n",
  "closed_at": "2017-10-18T02:08:07Z",
  "comments": [
    {
      "author": "dragonwolf83",
      "author_association": "NONE",
      "body": "We are having the same situation with Device42, an inventory management software. The REST API is requiring the same methods as above to login. \r\n\r\nIn my case, I didn't use the PSCX extensions though and just did the Base64 conversions in .NET manually. Then, I wrapped it in it's own function, so that all my Device42 cmdlets can reuse the logic. \r\n\r\nThe `-UseBasicAuth` parameter is needed for both Invoke-WebRequest and Invoke-RestMethod.\r\n\r\n@rkeithhill based on the doc you linked, I think `-UseBasicAuth` should be a string with a `[ValidateSet]` attribute that can allow user to set the different methods of Basic Authentication that exist.",
      "created_at": "2017-07-17T23:30:55Z",
      "updated_at": "2017-07-17T23:30:55Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "In the future, we may want to support other forms of Auth, so perhaps have a `-Authentication` parameter.  Note that `Basic` won't work with `-UseDefaultCredentials` as I believe there's no way to retrieve the password to send to the remote target which is required for `Basic`.",
      "created_at": "2017-07-18T04:20:31Z",
      "updated_at": "2017-07-18T04:20:31Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT That makes sense.  ",
      "created_at": "2017-07-18T15:32:01Z",
      "updated_at": "2017-07-18T15:32:01Z"
    },
    {
      "author": "RandomNoun7",
      "author_association": "CONTRIBUTOR",
      "body": "Add Jenkins and even Github to the list of popular tools that would be easier to work with if iwr and irm supported something like -Authentication Basic \r\n\r\nAlso, since neither of these tools are really Linux based (Jenkins is Java which I run on my Windows servers), it points out that this is becoming a widespread issue with a lot of the OSS and otherwise community based tools that Windows folks are increasingly trying to work with using PowerShell.",
      "created_at": "2017-07-21T04:06:00Z",
      "updated_at": "2017-07-21T04:06:00Z"
    },
    {
      "author": "DexterPOSH",
      "author_association": "NONE",
      "body": "+1 \r\nHaving the ```-Authentication``` parameter would make sense.",
      "created_at": "2017-07-21T11:04:12Z",
      "updated_at": "2017-07-21T11:04:12Z"
    },
    {
      "author": "treestryder",
      "author_association": "NONE",
      "body": "Basic Auth would be nice, but my current struggle is with \"OASIS Web Services Security\" authentication for Workday's API.\r\n\r\nhttps://www.oasis-open.org/standards#wssv1.1.1\r\n",
      "created_at": "2017-07-21T13:48:19Z",
      "updated_at": "2017-07-21T13:48:19Z"
    },
    {
      "author": "APraestegaard",
      "author_association": "NONE",
      "body": "+1 ",
      "created_at": "2017-07-21T14:28:22Z",
      "updated_at": "2017-07-21T14:28:22Z"
    },
    {
      "author": "vMarkusK",
      "author_association": "NONE",
      "body": "Maybe the Syntax \"-BasicAuth (get-credential)\" is more intuitive. But a great enhancement! \n",
      "created_at": "2017-07-21T18:01:26Z",
      "updated_at": "2017-07-21T18:02:10Z"
    },
    {
      "author": "mkellerman",
      "author_association": "NONE",
      "body": "+1 for -Authentication ",
      "created_at": "2017-07-22T03:16:25Z",
      "updated_at": "2017-07-22T03:16:25Z"
    },
    {
      "author": "bitzbyte",
      "author_association": "NONE",
      "body": "+1 for -Authentication. I have 3 different services that I have to manually Base64 encode credentials for routinely (multiple times per week for each of them) and more that come up on a less frequent basis.",
      "created_at": "2017-07-23T01:09:17Z",
      "updated_at": "2017-07-23T01:09:17Z"
    },
    {
      "author": "swinster",
      "author_association": "NONE",
      "body": "The crosslinked issue #2112 above gives an example that without adding Basic Authorisation headers to requests, it results in a dual request, the first being challenged then the second with the header added. If you are then attempting to either upload or download very large files (in my case anything from a 1 GB upload or 3-4 GB download is normal), this seems to result in the entire file being uploaded or downloaded twice - a huge waste of time and resource.",
      "created_at": "2017-08-26T15:35:18Z",
      "updated_at": "2017-08-26T15:35:18Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "We can address this in the 6.1.0 timeframe",
      "created_at": "2017-08-31T20:56:06Z",
      "updated_at": "2017-08-31T20:56:06Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "This one has finally made it to the top of my to-do list. \r\n\r\nSince this works primarily with the `Authorization` header, I think `-Authorization` is a more appropriate name for the parameter.\r\n\r\nThoughts, comments?",
      "created_at": "2017-10-05T08:37:13Z",
      "updated_at": "2017-10-05T08:37:13Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "In the future, we may want to support other authn schemes like OAuth.  So my preference is to have something extensible.  For the Basic scenario, one option is to support:\r\n\r\n```powershell\r\ninvoke-restmethod -authentication basic -credential user\r\n# this will prompt as it would today with a PSCredential\r\n```\r\n\r\nOf course, creating a PSCredential from cleartext user/pass takes a few steps:\r\n\r\n```powershell\r\n$password = \"mypassword\" | ConvertTo-SecureString -asPlainText -Force\r\n$cred = [pscredential]::new(\"myuser\",$password)\r\n```\r\n\r\nSeems like a bad practice to make it easy to create a pscredential with cleartext as then cleartext passwords show up in scripts, but I'm open to discussion on that as a separate issue.\r\n\r\nSo then the question is how would this work for OAuth.  We could still take a PSCredential and just ignore the username where the token is put into the password, but this isn't obvious:\r\n\r\n```powershell\r\n$oauthtoken = \"tokenincleartext\" | ConvertTo-SecureString -asPlainText -Force\r\n$cred = [pscredential]::new(\"$null is not accepted for username\",$oauthtoken)\r\ninvoke-restmethod -authentication oauth -credential $cred\r\n```\r\n\r\nPerhaps an acceptable solution is to support PSCredential, but maybe also `Token`?\r\n\r\n```powershell\r\ninvoke-restmethod -auth basic -token user:passwordincleartext\r\ninvoke-restmethod -auth oauth -token oauthtoken\r\n```\r\n\r\nAlthough it uses the `Authorization` header, authorization is what happens on the server side...\r\n\r\ncc @HemantMahawar @LeeHolmes @joeyaiello ",
      "created_at": "2017-10-05T16:33:12Z",
      "updated_at": "2017-10-05T16:34:02Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT \r\n\r\nMy preference has always been to discourage secrets in plain text by not accepting them. If the user wants to go out of their way to create a PSCredentail using plain text, that's on them. If we accept plain text secrets, that's on us.  Though, this kind of breaks down if they can't be imported and exported conveniently (last I checked, you couldn't import/export secure strings in Linux #1654 ). \r\n\r\nIn my modules that wrap the web cmdlets I accept a credential object and use the password for the OAuth token. Depending on the API, OAuth access tokens are closer to long lived passwords than they should be (lasting up to 90 days in some \u2639\ufe0f ).\r\n\r\n[In my current code](https://github.com/PowerShell/PowerShell/compare/master...markekraus:BasicAuthentication), I'm doing the same thing. and since `Basic` and `Bearer` often go hand-in-hand I was planning to implement both at once.\r\n\r\n```powershell\r\nInvoke-RestMethod -Uri $uri -Authorization Bearer -Credential $credential\r\n```",
      "created_at": "2017-10-05T18:05:15Z",
      "updated_at": "2017-10-05T18:06:14Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@markekraus agree that only adopting the PSCredential pattern is best, `Basic` and `Bearer` makes sense although I wonder if `Token` is a better name for discovery reasons as I'm sure most people not familiar with how the authz headers work won't equate `Bearer` to OAuth",
      "created_at": "2017-10-05T18:19:10Z",
      "updated_at": "2017-10-05T18:19:10Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT I was thinking maybe OAuth could be an alias for `Bearer`. It's not easily resolved because many APIs require a `Basic` auth with the a combination of user/pass or client-id/client-secret and that is just as much OAuth as `Bearer` in some users' eyes.\r\n\r\nToken could work. But it would be highly specialized for just OAuth.  For `Basic`, there are many APIs that use it outside the context of OAuth where token makes no sense and Credential does. It could be a sort of \"alias\" for `-Credential` in that it is a real separate parameter but under the hood implements the same object with some error detection if both are supplied. but I feel that somewhat over complicates things. ",
      "created_at": "2017-10-05T18:33:33Z",
      "updated_at": "2017-10-05T19:03:05Z"
    },
    {
      "author": "RandomNoun7",
      "author_association": "CONTRIBUTOR",
      "body": "+1 for:\r\n```powershell \r\nInvoke-RestMethod -Authorization Basic -credential $credential\r\nInvoke-RestMethod -Athorization OAuth -token $OAuthToken\r\n```\r\nUsing a PSCredential object with a username that is ignored isn't very intuitive.",
      "created_at": "2017-10-05T18:46:27Z",
      "updated_at": "2017-10-05T18:46:27Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "> Using a PSCredential object with a username that is ignored isn't very intuitive.\r\n\r\n`-Token` would need to be a SecureString then.",
      "created_at": "2017-10-05T18:49:56Z",
      "updated_at": "2017-10-05T18:49:56Z"
    },
    {
      "author": "RandomNoun7",
      "author_association": "CONTRIBUTOR",
      "body": "Insisting on a secure string for -token seems ok. \r\n\r\nIf you were to not support -token and insist on -credential for OAuth, my impression is that most scripters are going to take a trip through ConvertTo-secureString anyway to create the credential object. Whether they are getting the Token from a file stored in plain text on disk, or from a password manager API, that's on them, but using a PSCredential object for both purposes doesn't solve that issue, as I think many many script authors will use the same or similar process either way.\r\n\r\nSo for my uses, whether I have to use a SecureString with -token, or a Credential object, it doesn't practically change the way I retrieve and handle that secret in my scripts.",
      "created_at": "2017-10-05T19:08:51Z",
      "updated_at": "2017-10-05T19:08:51Z"
    },
    {
      "author": "devblackops",
      "author_association": "CONTRIBUTOR",
      "body": "My two cents:\r\n\r\nI don't think accepting a PSCredential  `-Token` parameter where we only really need the password property makes sense. `[SecureString]` makes more sense to me as that is the only part we care about. If the user already has the token in a credential object, they can just pass in the securestring password with:\r\n\r\n```powershell\r\nInvoke-RestMethod -Authentication OAuth -Token $cred.Password\r\n```\r\n\r\nHere are a couple of  scenarios that I think `Invoke-RestMethod` and `Invoke-WebRequest` should support:\r\n```powershell\r\n# Credential is a [PSCredential]\r\nInvoke-RestMethod -Authorization Basic -Credential $cred\r\n# Behind the scenes do the base64 encoding stuff\r\n```\r\n\r\n```powershell\r\n# Token is a [SecureString]\r\nInvoke-RestMethod -Authorization OAuth -Token $token\r\n# Under the covers set header Authorization = \"Bearer $token\"\r\n```\r\n",
      "created_at": "2017-10-05T19:20:29Z",
      "updated_at": "2017-10-05T19:20:29Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@devblackops that looks like +3-ish for that. I'm persuaded. I will modify that.\r\n",
      "created_at": "2017-10-05T19:26:38Z",
      "updated_at": "2017-10-05T19:26:38Z"
    },
    {
      "author": "devblackops",
      "author_association": "CONTRIBUTOR",
      "body": "@markekraus Cool. It may make the implementation more complicated but I think the intent is clearer.",
      "created_at": "2017-10-05T19:36:03Z",
      "updated_at": "2017-10-05T19:36:03Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I wonder if the implementation should warn that with `-Authorization Basic` that the unencrypted password will be passed across the wire in base64 encoding (which is easily unencoded)?  Of course, if you did this you'd need a way to suppress that warning.  `ConvertTo-SecureString` uses `-Force` for this:\r\n```\r\n38:335ms> ConvertTo-SecureString \"open sesame\" -AsPlainText\r\nConvertTo-SecureString : The system cannot protect plain text input. To suppress this warning and convert the plain\r\ntext to a SecureString, reissue the command specifying the Force parameter. For more information ,type: get-help\r\nConvertTo-SecureString.\r\nAt line:1 char:1\r\n+ ConvertTo-SecureString \"open sesame\" -AsPlainText\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidArgument: (:) [ConvertTo-SecureString], ArgumentException\r\n    + FullyQualifiedErrorId : ImportSecureString_ForceRequired,Microsoft.PowerShell.Commands.ConvertToSecureStringComm\r\n   and\r\n\r\n39:308ms> ConvertTo-SecureString \"open sesame\" -AsPlainText -Force\r\nSystem.Security.SecureString\r\n```",
      "created_at": "2017-10-05T21:31:11Z",
      "updated_at": "2017-10-05T21:31:11Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I think if the address is `https`, I wouldn't provide a warning.  If it's `http`, I think we should require `-AllowUnecryptedBasic` (or something scary like that)",
      "created_at": "2017-10-05T22:13:38Z",
      "updated_at": "2017-10-05T22:13:38Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@rkeithhill hmm I initially agreed but the more I wrote and rewrote my reply, the more I started to disagree.\r\n\r\nThe current `-Credential` doesn't warn (it actually does send Basic auth.. just.. only when challenged with `Www-Authenticate: Basic realm=`). It should probably warn for anytime `-Credential` is supplied. That would get annoying for console users accessing a site/api that has basic auth though. At worst It might lead them to disabling all warnings. \ud83d\udc4e Adding a `-force` seems a bit.. awkward... for the web cmdlets. hrm\r\n\r\nPart me also feels that it should just be a given that these credentials are being sent insecurely. I realize that's not the case, but, most forms are not doing any kind of client side encryption or encoding either before passing on credentials over the pipe as form fields.\r\n\r\nMaybe if it warned when not going over HTTPS?\r\n\r\nI'd like more feedback from others on this one.",
      "created_at": "2017-10-05T22:14:47Z",
      "updated_at": "2017-10-05T22:14:47Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT  Good point.  Most of the time I'm hitting internal servers were we're too cheap to buy SSL certs.  :-)  I like the `-AllowUnencryptedBasic` suggestion.",
      "created_at": "2017-10-05T22:15:48Z",
      "updated_at": "2017-10-05T22:16:09Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT and @rkeithhill how about `-AllowUnencrypedAuthorization`? I would like this to apply to OAuth as well... sending OAuth tokens over non-HTTPS is just as dangerous.",
      "created_at": "2017-10-05T22:18:46Z",
      "updated_at": "2017-10-05T22:18:46Z"
    },
    {
      "author": "dragonwolf83",
      "author_association": "NONE",
      "body": "I still prefer a `-Token` parameter on PSCredential for a few reasons.\r\n\r\n1. Don't need to learn yet another method for credential handling.   \r\n2. Messing with SecureString is not as clean since you have to use `-AsPlainText -Force` for passing it in interactively.\r\n2. Reusability in custom cmdlets for other scenarios where a `token` or `passphrase` is needed. Custom SSH cmdlets come to mind. Everyone gets confused about how to do passphrase securely with PSCredential.\r\n3. Create a standard method like `GetNetworkCredential()` called `GetToken()`. You can then use this in the web cmdlets to keep it encrypted until the last moment needed. I can then reuse this for a custom cmdlet.\r\n\r\n```PowerShell\r\n$cred = Get-Credential -Token -Authentication OAuth\r\n$response = Invoke-RestMethod -Credential $cred\r\n```\r\n\r\nAnother idea to is you could put the `-Authentication` parameter in PSCredential too. Not sure if there is a situation where you would want to reuse the same credential across authentication types.\r\n\r\n```PowerShell\r\n$cred = Get-Credential -Token \r\n$response = Invoke-RestMethod -Credential $cred -Authentication OAuth\r\n```\r\nCompare that to SecureString madness\r\n```PowerShell\r\n$token = ConvertTo-SecureString -AsPlainText -Force\r\n$response = Invoke-RestMethod -Token $token -Authentication OAuth\r\n```\r\n",
      "created_at": "2017-10-05T23:16:01Z",
      "updated_at": "2017-10-05T23:16:01Z"
    },
    {
      "author": "dragonwolf83",
      "author_association": "NONE",
      "body": "@markekraus how about if HTTP warn by default and then have a parameter `-IgnoreUnsecureWarnings`\r\nUnsecure or Insecure?\r\n\r\n@rkeithhill I guess we need some `Let\u2019s Encrypt` cmdlets!",
      "created_at": "2017-10-05T23:19:14Z",
      "updated_at": "2017-10-05T23:19:14Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@dragonwolf83 For interactive secure strings:\r\n\r\n```powershell\r\n$Creds = Read-Host -AsSecureString \"Token\"\r\n```\r\n\r\nI don't think changing the behavior of PSCredential for this makes sense. `SecureString` is exactly what should be used for this kind of thing. I don't think the usecase for manually entering access tokens is a significant one. Most tokens would be extremely painful to enter interactively.",
      "created_at": "2017-10-05T23:26:32Z",
      "updated_at": "2017-10-05T23:26:32Z"
    },
    {
      "author": "RandomNoun7",
      "author_association": "CONTRIBUTOR",
      "body": "What if you could use this as an excuse to start moving in the direction browsers are starting to go, where they are warning users about any and all [pages that are http](http://www.zdnet.com/article/google-tightens-noose-on-http-chrome-to-stick-not-secure-on-pages-with-search-fields/)? \r\n\r\nA credential going over an un-encrypted connection is just the most obvious danger, but if it's the cmdlet authors job to warn users about things that are dangerous, you have to admit that you don't know what they are putting in the -Body parameter either.\r\n\r\nTo me, that argues for something like the following behavior\r\n1. Implement a new parameter called ```-AllowUnEncryptedConnections```\r\n2. Any request whatever, to an http site would result in output to the Warning Stream wagging a finger at the user. Why any and all requests? Because even a regular GET to a non-ssl site can reveal compromising data if the returned page content contains sensitive data. \r\n3. Any request, including those with credentials, that use the ```-AllowUnEncryptedConnections``` switch would not have that warning output.\r\n\r\nTo me, that allows the cmdlet to take the threat from unencrypted connections seriously and treat it comprehensively. Writing a warning rather than an error seems a good compromise rather than blocking the cmdlet from executing and breaking lots of people's scripts. \r\n\r\nThat said, I realize this is a bit of an extreme position to take, so I'm fine with an ```-AllowUnencrypedAuthorization``` parameter too if that's as far you are willing to push it.",
      "created_at": "2017-10-05T23:33:53Z",
      "updated_at": "2017-10-05T23:33:53Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "For interactive use, I think we should prompt for password or token so user doesn't have to create the securestring.",
      "created_at": "2017-10-05T23:41:58Z",
      "updated_at": "2017-10-05T23:41:58Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT I'm trying to imagine interactive entry of an OAuth Token, and I'm thinking that is an edge case. Most of the APIs I've been exposed to have massive 60+ character tokens that are not valid for long. I mean, I'm not against adding it, i just don't see it being useful.\r\n\r\nIs there a good way to check for an interactive session in the Cmdlet?\r\n",
      "created_at": "2017-10-05T23:48:11Z",
      "updated_at": "2017-10-05T23:48:11Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "There is an existing pattern for this that applies to all the PowerShell commands that take a credential e.g. `Command -Credential (Get-Credential)`.",
      "created_at": "2017-10-05T23:49:09Z",
      "updated_at": "2017-10-05T23:49:09Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@RandomNoun7 RE: HTTP warnings. I think that is a good idea, but perhaps that should be tracked as a separate issue and not coupled with the addition basic and bearer authentication.\r\n\r\n@rkeithhill then `irm -Token (Read-Host -AsSecureString) ...`?",
      "created_at": "2017-10-05T23:53:44Z",
      "updated_at": "2017-10-05T23:53:44Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Ok.. the [latest commit](https://github.com/markekraus/PowerShell/commit/dd872beea87844e046300e7272d8bc5f0891eedc) has everything except the HTTP warning/block or the \"prompting if not provided\" (`Basic`, `OAuth`, `Bearer`, `-Token`,`-Credential`, errors, tests.. etc.)\r\n",
      "created_at": "2017-10-06T00:59:20Z",
      "updated_at": "2017-10-06T00:59:20Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "And now I have a super scary error just in time for Halloween \ud83c\udf83 \r\nhttps://github.com/PowerShell/PowerShell/compare/master...markekraus:BasicAuthentication\r\n\r\n@SteveL-MSFT I don't think prompting for the token makes sense. It would complicate the cmdlet code to handle something that should be done outside of it. As @rkeithhill mentioned, there is already an existing pattern for this kind of behavior and I still believe manually entering a token would be an edge case.\r\n\r\nI'll wait until tomorrow to cleanup and submit the PR to allow for more comments/suggestions.",
      "created_at": "2017-10-06T10:24:51Z",
      "updated_at": "2017-10-06T10:24:51Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I'm ok without the prompting.  Thanks for working on this!",
      "created_at": "2017-10-06T17:52:08Z",
      "updated_at": "2017-10-06T17:52:08Z"
    },
    {
      "author": "devblackops",
      "author_association": "CONTRIBUTOR",
      "body": "Thank you @markekraus! This will be a great addition.",
      "created_at": "2017-10-06T18:06:42Z",
      "updated_at": "2017-10-06T18:06:42Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Heck yeah!  Thanks @markekraus.  I sure hope this make it into 6.0.0.",
      "created_at": "2017-10-06T20:11:13Z",
      "updated_at": "2017-10-06T20:11:13Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@rkeithhill me too. This has been on my PowerShell wishlist for a long time. I have been wrapping this functionality for awhile. I can't wait to rip that out of my own code once it's finally baked into the cmdlets.",
      "created_at": "2017-10-06T20:25:06Z",
      "updated_at": "2017-10-06T20:25:06Z"
    },
    {
      "author": "RandomNoun7",
      "author_association": "CONTRIBUTOR",
      "body": "@markekraus This is going to be fantastic. Thanks for working on this. ",
      "created_at": "2017-10-06T20:27:00Z",
      "updated_at": "2017-10-06T20:27:00Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@markekraus I'm assigning this to myself since GitHub won't let me put your name there so that no one duplicates your work",
      "created_at": "2017-10-06T23:11:08Z",
      "updated_at": "2017-10-06T23:11:08Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "PR #5052",
      "created_at": "2017-10-07T12:06:04Z",
      "updated_at": "2017-10-07T12:06:04Z"
    }
  ],
  "created_at": "2017-07-17T21:35:50Z",
  "labels": [
    "Issue-Enhancement",
    "Resolution-Fixed",
    "Hacktoberfest",
    "WG-Cmdlets-Utility"
  ],
  "number": 4274,
  "state": "closed",
  "title": "Invoke-WebRequest should directly support Basic authentication",
  "updated_at": "2017-10-19T03:02:18Z"
}