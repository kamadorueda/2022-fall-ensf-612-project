{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11735",
  "author": "LethiferousMoose",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\nI recently started porting some of my PowerShell code into C# modules. Currently I have a bunch of configuration classes that are used across quite a number of my PowerShell modules (currently stored in a classes modules and \"imported\" into each module via `using module`). My idea was the migrate all of the base classes I use for configurations into C# and implement them across C# and PowerShell modules. However I am hitting a snag in this process, it seems PowerShell modules don't seem to have visibility to classes in the compiled DLLs. I tried the `using module` syntax and also tried using `Import-Module` and the PowerShell module does not find the types. \r\n\r\nIf I go into the PowerShell console and do the following it works:\r\n```powershell\r\nusing module <DLL_MODULE_NAME>\r\nImport-Module <POWERSHELL_MODULE_NAME>\r\n```\r\n\r\nIs this not the correct way to do this? Is a different way to create a class library I can share between PowerShell and C# code?\r\n\r\n# Steps to reproduce\r\n```none\r\nCreate a simple C# module (Some.Class.Module) with a single class inside.\r\nCompile project, add DLL to PSModulePath\r\nCreate PowerShell module (psm1)\r\nAdd \"using Some.Class.Module\"  to the top of the file\r\nTry to inherit or use the classes within the PowerShell module.\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nClass is available within the module to be used/inherited.\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\n\"Unable to find type\" errors occur.\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.4\r\nPSEdition                      Core\r\nGitCommitId                    6.2.4\r\nOS                             Microsoft Windows 10.0.18362\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-01-31T14:42:23Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You could look BitLocker.psd1 on Windows.\r\n```powershell\r\nNestedModules=@('Microsoft.BitLocker.Structures')\r\n```",
      "created_at": "2020-01-31T06:40:23Z",
      "updated_at": "2020-01-31T06:40:23Z"
    },
    {
      "author": "LethiferousMoose",
      "author_association": "NONE",
      "body": "Thanks @iSazonov I figured I was missing something.",
      "created_at": "2020-01-31T14:42:23Z",
      "updated_at": "2020-01-31T14:42:23Z"
    },
    {
      "author": "LethiferousMoose",
      "author_association": "NONE",
      "body": "@iSazonov as a follow-up question, is this the proper way to include classes from a DLL/Cmdlet to a module's scope? And is `using module` intended to only be used on PowerShell (psm1) modules?",
      "created_at": "2020-01-31T14:48:22Z",
      "updated_at": "2020-01-31T14:48:32Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Using NestedModules is usually the recommended route, yeah. Ultimately any DLL imported will affect the entire PowerShell session regardless of where it's imported, so you can also just use `Import-Module` or `Add-Type` to import the module DLL from a PSM1 if you need that for some reason. \ud83d\ude42 ",
      "created_at": "2020-01-31T15:02:36Z",
      "updated_at": "2020-01-31T15:02:36Z"
    },
    {
      "author": "LethiferousMoose",
      "author_association": "NONE",
      "body": "@vexx32  just to be clear for documentation purposes, `Import-Module` also does not work, only using `NestedModules` fixes the issue. `Import-Module` and `using module` only worked on the DLL modules in the console, not within a module. \r\n\r\nOut of curiosity, why does `using module`/`Import-Module` work on a DLL module within the console, but not within a PowerShell module? Is this meant to encourage using the `NestedModules` attribute or is it just weird behavior?",
      "created_at": "2020-01-31T22:05:55Z",
      "updated_at": "2020-01-31T22:05:55Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "If I recall correctly, you should be able to Import-Module a DLL within a PSM1 file provided you also specify the cmdlet names in the module's `CmdletsToExport` manifest entry, but it's a been a little bit since I tinkered with it, so my memory could be out of date. \ud83d\ude42  \r\n",
      "created_at": "2020-01-31T23:02:52Z",
      "updated_at": "2020-01-31T23:02:52Z"
    }
  ],
  "created_at": "2020-01-30T22:45:36Z",
  "number": 11735,
  "state": "closed",
  "title": "Using DLL classes in PowerShell (.psm1) module.",
  "updated_at": "2020-01-31T23:02:52Z"
}