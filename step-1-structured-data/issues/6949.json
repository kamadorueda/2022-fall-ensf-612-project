{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6949",
  "author": "iSazonov",
  "body": "## PR Summary\r\n\r\nPlease fast review to avoid merge conflicts because of many files changed.\r\n\r\nPlease review commit by commit - every commit contains only single kind of change so you can do very fast review.\r\n\r\nThis corrects about 1% of the CodeFactor issues.\r\n\r\nThe PR replace `null != var` with `var != null` and `null == var` with `var == null`\r\n\r\nAll changes is made in VS Code with Regex patterns - one pattern by commit:\r\n```\r\n'\\((null) != (\\w+)\\)' -> '($2 != $1)'\r\n\r\n'\\((null) != (\\w+.\\w+)\\)' -> '($2 != $1)'\r\n\r\n'\\((null) != (\\w+) ' -> '($2 != $1 '\r\n\r\n'(null) != (\\w+),' -> '$2 != $1,'\r\n\r\n'if \\((null) != (\\w+(.\\w+)+)\\)' -> 'if ($2 != $1)'\r\n\r\n'if \\((null) != (.+)\\)' -> 'if ($2 != $1)'\r\n\r\nManual replacement 1\r\n\r\n'if \\((null) != (\\w+.\\w+)' -> 'if ($2 != $1'\r\n\r\n'\\b(null) != (\\w+)\\)' -> '$2 != $1)'\r\n\r\n'\\b(null) != (\\w+.\\w+)\\)' -> '$2 != $1)'\r\n\r\n'\\b(null) != (\\w+.\\w+.\\w+)\\)' -> '$2 != $1)'\r\n\r\n'\\((null) != (\\w+.\\w+),' -> '($2 != $1,'\r\n\r\n'\\((null) != (\\w+.\\w+) ' -> '($2 != $1 '\r\n\r\n'\\((null) != (\\w+.\\w+\\[\\w+.\\w+\\])' -> '($2 != $1'\r\n\r\n'\\b(null) != (\\w+.\\w+)' -> $2 != $1\r\n\r\n------------------------------------------\r\n\r\n'\\((null) == (\\w+)\\)' -> '($2 == $1)'\r\n\r\n'\\((null) == (\\w+.\\w+)\\)' -> '($2 == $1)'\r\n\r\n'\\((null) == (\\w+) ' -> '($2 == $1 '\r\n\r\n'if \\((null) == (\\w+.\\w+)' -> 'if ($2 == $1'\r\n\r\n'\\b(null) == (\\w+)\\)' -> '$2 == $1)'\r\n\r\n'\\b(null) == (\\w+.\\w+)\\)' -> '$2 == $1)'\r\n\r\n'\\((null) == (\\w+.\\w+\\[\"\\w+\"].\\w+)' -> '($2 == $1'\r\n\r\n'\\((null) == (\\w+.\\w+\\[\"\\w+\"])' -> '($2 == $1'\r\n\r\n```\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed - Issue link:\r\n- **Testing - New and feature**\r\n    - [ ] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [x] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2018-06-25T21:37:10Z",
  "comments": [
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov make sure you are pushing with `[feature]`",
      "created_at": "2018-05-28T13:24:17Z",
      "updated_at": "2018-05-28T13:24:17Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "People use `if (null != something)` out of habit because some languages like C and C++ allow `if (something = null)` and that's a nasty bug. I'm not a fan of discouraging this style even though it's not a problem in C#.\r\n\r\nIf this CodeFactor warning didn't find a bug, I'd disable the warning, it doesn't feel like it's worth the risk of so many changes via regex without much higher confidence the tests cover all of these changes.",
      "created_at": "2018-05-29T16:53:25Z",
      "updated_at": "2018-05-29T16:53:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If you remember a year ago, I offered to fix style in tests. Response team was negative - it is better to spend your time on more useful things. It was a convincing position. Then we continued to receive many-many comments on the style of tests _each_ PR. Finally everyone ran out of patience and we fixed our tests.\r\nWe have long endured trailing spaces in our code. At one point, our patience ran out and we fixed it.\r\nNow we understand that spend a lot of useless efforts to style and formatting. So @TravisEz13  suggested the use of CodeFactor.\r\nWe must configure it before we can effectively use it. This is being discussed in #6930.\r\nWe disable obvious rules which we'll never fix like \"one type per file\" or \"ordering elements\" and more. \r\n_The remaining problems, we have to be correct (partially) to use CodeFactor effectively._\r\nShould we disable current issue? I believe no because we already discussed this and we already require that use the _C# style_ in our code. If we leave bad samples we lose meaning use CodeFactor which reports problems a entire file rather than the latest changes.\r\nAbout risk see my https://github.com/PowerShell/PowerShell/pull/6930#issuecomment-393015925",
      "created_at": "2018-05-30T04:58:05Z",
      "updated_at": "2018-05-30T04:58:05Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I sampled the report from CodeFactor when it was first enabled and wasn't impressed. Maybe after you refine the rules it will show some value, but I'm still skeptical.\r\n\r\nAs one data point for my skepticism - you touched 187 files in this PR, but CodeFactor claims there are 119 issues fixed and only 99 of the issues fixed are of the `Do not use comparison where value goes first`.\r\n\r\nSo if you found 88 or more places to fix that the tool didn't, humans will continue to find similar nits that the tool won't. Contributors will have one **additional** barrier to contributing in addition to the human nitpickers.\r\n\r\nIf the nitpicking isn't adding value, you could try asking those making the comments to try less nitpicking.",
      "created_at": "2018-05-30T13:19:34Z",
      "updated_at": "2018-05-30T13:19:34Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "When I joined the project, the first three months I was amazed each time I got different types of style comments from different people. Why team did it? Obviously to get good code. What changed this time? Nothing. We will not be able to change our behavior if we do not take any steps.\r\nThis situation zugzwang. If we do not correct these issues we are doomed to many style comments. Fix all - it's not real. We need to find a compromise by configuring CodeFactor and fixing some issues.\r\nI would be happy not to do this work. But I definitely envy CoreFX code looks like.\r\n\r\n> As one data point for my skepticism - you touched 187 files in this PR, but CodeFactor claims there are 119 issues fixed and only 99 of the issues fixed are of the Do not use comparison where value goes first.\r\n\r\nOn CodeFactor site it is mentioned that they use their config and some other analysis methods - so we can get \"weird\" and \"amazing\" results. After we merge our config we can investigate problems if we find them.",
      "created_at": "2018-05-30T14:01:37Z",
      "updated_at": "2018-05-30T14:01:37Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "In this specific case - I find it reasonable to adopt the exact opposite of what CodeFactor suggests, but I think it is even more reasonable to disable the warning and move on to more important issues.\r\n\r\nSometimes *word order* matters, sometimes the *order of words* doesn't matter. Either way, we understand the message clearly.\r\n\r\nIf code reviewers are complaining about this exact issue - they too should find more valuable things to complain about.",
      "created_at": "2018-05-30T15:18:25Z",
      "updated_at": "2018-05-30T15:18:25Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "My last comment on this specific issue - CoreFx is roughly as inconsistent as PowerShell, with about 6% of the comparisons using `null` on the LHS.\r\n\r\nWith some irony, if you fix this, we'd be less like CoreFx. :)",
      "created_at": "2018-05-30T16:23:39Z",
      "updated_at": "2018-05-30T16:23:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">As one data point for my skepticism - you touched 187 files in this PR, but CodeFactor claims there are 119 issues fixed and only 99 of the issues fixed \r\n\r\nI believe that this difference comes from the fact that some code is under `if UNIX` (and we have still `if !CORECLR`).",
      "created_at": "2018-06-01T08:09:57Z",
      "updated_at": "2018-06-01T08:09:57Z"
    },
    {
      "author": "dantraMSFT",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov, I have to agree with @lzybkr, I see no benefit to making this change and the rule should simply be disabled.",
      "created_at": "2018-06-08T19:11:59Z",
      "updated_at": "2018-06-08T19:11:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": " I think this rule should remain enabled and this change can be closed if the team does not want it. /cc @SteveL-MSFT @daxian-dbw ",
      "created_at": "2018-06-09T06:22:42Z",
      "updated_at": "2018-06-09T06:22:42Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I scrolled through the changes and don't see any issues with the change itself.  So the risk seems low.\r\n\r\nAs for whether we want to make this change, I think readability is slightly better with `null` on the RHS.  If we want new code to adopt RHS, then I think we should take this PR so we don't have mixed usage.  Otherwise, we should just be ok with `null` on LHS or RHS (although perhaps at least consistent within the same file).\r\n\r\nSince @iSazonov has already done the work, risk seems low, and (personally) readability is better.  I would be for taking this change.  However, I think it's a decision the @PowerShell/powershell-maintainers should make.",
      "created_at": "2018-06-17T21:27:11Z",
      "updated_at": "2018-06-17T21:27:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Resolve merge conflicts.",
      "created_at": "2018-06-18T03:50:55Z",
      "updated_at": "2018-06-18T03:50:55Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "restarted Linux CI, I'll be OOF for a couple of days.",
      "created_at": "2018-06-20T19:20:09Z",
      "updated_at": "2018-06-20T19:20:09Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@TravisEz13 @adityapatwardhan and I discussed this offline and we agree to take this PR for the same reasons as @SteveL-MSFT mentioned above. But in general, we prefer less changes per PR for style related changes:\r\n- A PR is better to focus on a single category of style issue.\r\n- A PR is better to modify less than 10 files (it also depends on how many changes per file)\r\n\r\nI will soon go through this PR and merge it.",
      "created_at": "2018-06-21T23:52:01Z",
      "updated_at": "2018-06-21T23:52:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> \u2022A PR is better to modify less than 10 files (it also depends on how many changes per file)\r\n\r\nI suggest to apply this rule only to code. We have tons style issues for doc comments - I think we could change more files per PR in the case without risk.\r\n\r\nSeems also the rule assumes that we could fix style issues by file, by module, by cmdlet set (ex., web cmdlets), by provider and so on.\r\n\r\nDoes this conclusion imply that our policy is changed and we want and accept style changes?\r\nI believe we should update our internal contributing docs.",
      "created_at": "2018-06-22T03:58:31Z",
      "updated_at": "2018-06-22T03:58:31Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov Doc comments issues can be an exception, because of the super low risk. It's not a rule, but a flexible guideline for us maintainers to consider (you can read the tone -- `prefer`, `better to` :)).\r\n\r\nThe main reason that we don't want massive changes in a PR is the time cost to review -- it will be easy for the PR to end up with no approval since no one wants to spend the time reviewing all the changes. This will, in turn, hurt the author's feeling and discourage the author's further contribution, because if the author really meant to fix those style issues, he/she must have put a lot effort/time into it. So we want to set some guidelines to help prevent a contributor from getting in that situation.",
      "created_at": "2018-06-25T18:53:10Z",
      "updated_at": "2018-06-25T18:53:10Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> Seems also the rule assumes that we could fix style issues by file, by module, by cmdlet set (ex., web cmdlets), by provider and so on.\r\n>\r\n> Does this conclusion imply that our policy is changed and we want and accept style changes?\r\nI believe we should update our internal contributing docs.\r\n\r\nWe accept PRs that are purely for style changes (we have to if we want to make CodeFactor useful). Such a PR should be reviewable, and that's why we proposed the flexible guideline. But this should be temporary -- once the existing style issues reported by CodeFactor are fixed, we won't accept PR with pure style changes.",
      "created_at": "2018-06-25T19:47:58Z",
      "updated_at": "2018-06-25T19:47:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Thanks for code review and clarifications!",
      "created_at": "2018-06-26T06:29:26Z",
      "updated_at": "2018-06-26T06:29:26Z"
    }
  ],
  "created_at": "2018-05-28T12:08:03Z",
  "number": 6949,
  "state": "closed",
  "title": "Cleanup CodeFactor issues with null comparisions",
  "updated_at": "2018-06-26T06:29:26Z"
}