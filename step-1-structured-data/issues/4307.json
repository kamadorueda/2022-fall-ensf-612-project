{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4307",
  "author": "ephos",
  "body": "Set-Clipboard throws a CommandNotFoundException in PowerShell Core on Windows.  There is a similar issue #3618 open for Mac.  A workaround could be piping to clip.exe in Windows but this passes functionality out of PowerShell.  \r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nGet-Content -Path myfile.txt | Set-Clipboard\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nText piped or passed into command should get set to the clipboard.\r\n\r\nActual behavior\r\n---------------\r\n\r\n```PowerShell\r\nGet-Content -Path myfile.txt | Set-Clipboard\r\nSet-Clipboard : The term 'Set-Clipboard' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\nAt line:1 char:32\r\n+ Get-Content -Path myfile.txt | Set-Clipboard\r\n+                                ~~~~~~~~~~~~~\r\n    + CategoryInfo          : ObjectNotFound: (Set-Clipboard:String) [], CommandNotFoundException\r\n    + FullyQualifiedErrorId : CommandNotFoundException\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n$PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-beta\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-beta.4\r\nOS                             Microsoft Windows 10.0.14393\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n\r\n```\r\n",
  "closed_at": "2019-11-04T19:28:59Z",
  "comments": [
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Hum! Set-Clipboard doesn't exist in PowerShell Core (yet). \r\n:)",
      "created_at": "2017-07-20T15:45:45Z",
      "updated_at": "2017-07-20T15:45:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Have we plans to port Get/Set-Clipboard cmdlets? On Windows? On Unix?",
      "created_at": "2017-07-20T18:30:53Z",
      "updated_at": "2017-07-20T18:30:53Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov Clipboard class is part of WinForms so no hope of having it in corefx.  Personally, I think the cmdlets are useful, but we'll have to use native apis to make it work.",
      "created_at": "2017-07-20T18:51:35Z",
      "updated_at": "2017-07-20T18:51:35Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "PSReadline needs this functionality as well, but I would probably just copy the code so the dependency on WinForms can be removed completely (not use WinForms with full clr.)",
      "created_at": "2017-07-23T20:24:47Z",
      "updated_at": "2017-07-23T20:24:47Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "As a stopgap, [here](https://stackoverflow.com/a/15581127/45375) are functions `Set-ClipboardText` and `Get-ClipboardText` that work with both editions (Windows PowerShell and PowerShell Core) on all supported platforms.\r\n\r\nIn PowerShell Core, they use `clip.exe`, `pbcopy` / `pbpaste`, `xclip` on Windows / macOS / Linux, and on Windows PowerShell they use WinForms on v5.0- and defer to `Set-Clipboard` / `Get-Clipboard` on  v5.1+.\r\n\r\nThe caveat is that, on Linux platforms, `xclip` is neither preinstalled nor guaranteed to be available (different Linux desktop environments have different utilities).\r\n",
      "created_at": "2017-12-30T03:09:39Z",
      "updated_at": "2017-12-30T03:09:39Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 perhaps you can wrap it as a module and publish to PowerShell Gallery?  ",
      "created_at": "2018-01-02T19:24:51Z",
      "updated_at": "2018-01-02T19:24:51Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT: Your wish is my (belated) command: I've published module `ClipboardText`:\r\n\r\n\r\n* Gallery link: https://www.powershellgallery.com/packages/ClipboardText\r\n\r\n* Repo link (overview): https://github.com/mklement0/ClipboardText\r\n",
      "created_at": "2018-05-22T20:01:27Z",
      "updated_at": "2018-05-22T20:01:27Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I think @mklement0's module is a fine solution to this issue.",
      "created_at": "2018-05-22T21:28:31Z",
      "updated_at": "2018-05-22T21:28:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "How can we make better discoverability for this module?",
      "created_at": "2018-05-23T06:44:07Z",
      "updated_at": "2018-05-23T06:44:07Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov well, I tweeted it so that helps.  Perhaps someone can add it to https://github.com/janikvonrotz/awesome-powershell?  ",
      "created_at": "2018-05-23T16:17:10Z",
      "updated_at": "2018-05-23T16:17:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The cmdlets is documented for Windows PowerShell. Maybe for PowerShell Core we could replace the articles with link on @mklement0 module? ",
      "created_at": "2018-05-23T18:02:54Z",
      "updated_at": "2018-05-23T18:02:54Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov if we ever get around to implementing https://github.com/PowerShell/PowerShell/issues/1982, I think that should solve the discovery problem",
      "created_at": "2018-05-23T20:00:31Z",
      "updated_at": "2018-05-23T20:00:31Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Although .Net Core 3.0 brings back WinForms so the Windows implementation of the Clipboard cmdlets may come back, it wouldn't be cross platform compatible.  My suggestion is to use code similar to what we have in PSReadLine for cross platform clipboard support: https://github.com/lzybkr/PSReadLine/blob/194c8dba426986f115c61919e8699b0f34fc4b01/PSReadLine/Clipboard.cs#L12",
      "created_at": "2019-03-01T20:50:28Z",
      "updated_at": "2019-03-01T20:50:28Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #10340, which has now been successfully released as `v7.0.0-preview.6`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.6)\n",
      "created_at": "2019-11-21T22:35:09Z",
      "updated_at": "2019-11-21T22:35:09Z"
    }
  ],
  "created_at": "2017-07-20T15:36:18Z",
  "labels": [
    "Resolution-Fixed",
    "WG-Cmdlets-Management"
  ],
  "number": 4307,
  "state": "closed",
  "title": "Set-Clipboard in PowerShell Core on Windows Results in Throwing CommandNotFoundException",
  "updated_at": "2019-11-21T22:35:10Z"
}