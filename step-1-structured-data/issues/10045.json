{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10045",
  "author": "msftrncs",
  "body": "# Steps to reproduce\r\n\r\n```powershell\r\n\"$('`' -replace '[`\"]', '$0$0')\" # produces single backtick, expected double\r\n'`' -replace '[`\"]', '$0$0' # produces double backticks\r\n\"$('`' -replace '[``\"]', '$0$0')\" # produces double backticks\r\n\"$('`' -replace '[`]', '$0$0')\" # produces double backticks\r\n```\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.0\r\nPSEdition                      Core\r\nGitCommitId                    6.2.0\r\nOS                             Microsoft Windows 10.0.18922\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nI am sure this is a tokenizer issue during the subexpression tokenizing, similar to how a closing ')' can end a single line comment or even an embedded string within an interpolated subexpression.\r\n",
  "closed_at": "2021-12-30T20:00:44Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "At least at first glance, this _may_ have the same root cause as #3039.",
      "created_at": "2019-07-05T21:21:45Z",
      "updated_at": "2019-07-05T21:21:45Z"
    },
    {
      "author": "UberKluger",
      "author_association": "NONE",
      "body": "May be #3039? It ***is*** #3039 (and #10413). These are all the same thing. The parser (or whatever) is processing subexpressions within expandable strings as if they were part of the string and not a completely separate syntactic context. As such, any double quote escapes  (`\" or \"\") within the subexpression are being evaluated and replaced ***before*** the subexpression is parsed (evaluated?). Thus your examples are being silently changed as follows (silently because there is no mention of this in the documentation)\r\n```\r\n\"$('`' -replace '[`\"]', '$0$0')\" # produces single backtick, expected double\r\nbecomes -> \"$('`' -replace '[\"]', '$0$0')\" # `\" is an escaped \", replace fails, string unchanged\r\n\r\n'`' -replace '[`\"]', '$0$0' # produces double backticks because it is not an embedded subexpression\r\n\r\n\"$('`' -replace '[``\"]', '$0$0')\" # produces double backticks\r\nbecomes -> \"$('`' -replace '[`\"]', '$0$0')\" # `\" replaced but initial ` remains so replace succeeds\r\n\r\n\"$('`' -replace '[`]', '$0$0')\" # produces double backticks because there is no escaped \" to consume the `\r\n```\r\nFurther examples to \"prove\" it\r\n```\r\n\"$('`' -replace '[\"`]', '$0$0')\" # produces double backticks even though the character class seems to be equivalent\r\n\r\n\"$('[``\"] [`x`\"] [``x\"]')\" # produces [`\"] [`x\"] [``x\"] showing that the ` does not escape itself or the x, only the \"\r\n```\r\n\r\nIn #3039 there are those saying that this should not be fixed (too much of a breaking change) but it should at least be ***thoroughly*** documented (when and why this occurs). Even if it does get fixed (one day) the documentation should still mention it for historical continuity (breaking changes are bad but ignoring the past is worse).",
      "created_at": "2021-12-29T14:58:27Z",
      "updated_at": "2021-12-29T14:58:27Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as duplicate and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2021-12-30T20:00:43Z",
      "updated_at": "2021-12-30T20:00:43Z"
    }
  ],
  "created_at": "2019-07-02T03:46:45Z",
  "labels": [
    "Resolution-Duplicate",
    "Issue-Question",
    "WG-Language"
  ],
  "number": 10045,
  "state": "closed",
  "title": "backtick bahavior in embedded strings in interpolated subexpressions",
  "updated_at": "2021-12-30T20:00:44Z"
}