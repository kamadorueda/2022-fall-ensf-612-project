{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1371",
  "author": "andschwa",
  "body": "Per #1275 we need to test if we can use the Pester package and remove the submodule. Failing that, we will likely move it to a vendor folder.\n",
  "closed_at": "2018-02-09T05:12:16Z",
  "comments": [
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "It's not going to work on non-windows without additional changes.\nThis is post-Aug17 release item.\n",
      "created_at": "2016-07-30T17:04:29Z",
      "updated_at": "2016-07-30T17:04:29Z"
    },
    {
      "author": "dlwyatt",
      "author_association": "CONTRIBUTOR",
      "body": "I can't see the submodule's repository yet, but happy to take a look and see what changes need to be made in Pester once I've got access.\n",
      "created_at": "2016-07-30T19:03:55Z",
      "updated_at": "2016-07-30T19:03:55Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "@dlwyatt done!\n",
      "created_at": "2016-07-30T20:37:29Z",
      "updated_at": "2016-07-30T20:37:29Z"
    },
    {
      "author": "dlwyatt",
      "author_association": "CONTRIBUTOR",
      "body": "Working on it, should have something ready soon.\n\nI'm really not a fan of reading `${directorySeparatorChar}` all over the place, so I'm doing that a different way.  In most places, I'm just using `/` instead of `\\` (if it works fine on Windows anyway), and in some cases, using a new proxy function of Join-Path with nicer syntax for joining multiple path parts, like so:\n\n``` posh\n<#\n    The \"Ex\" naming is stupid; I just want something to make it clear in the calls to this function that it's _not_\n    the original Join-Path cmdlet (and doesn't need to be guarded with $SafeCommands.)\n\n    The difference is that ChildPath is now an array with ValueFromRemainingArguments defined, so we can do this:\n\n    Join-PathEx One Two Three Four Five\n\n    However, we've removed pipeline input support from the ChildPath parameter, as a tradeoff.\n#>\nfunction Join-PathEx\n{\n    [CmdletBinding()]\n    param(\n        [Parameter(Mandatory = $true, Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true)]\n        [Alias('PSPath')]\n        [string[]]\n        ${Path},\n\n        [Parameter(Mandatory = $true, Position = 1, ValueFromRemainingArguments = $true)]\n        [AllowEmptyString()]\n        [AllowNull()]\n        [string[]]\n        ${ChildPath},\n\n        [switch]\n        ${Resolve},\n\n        [Parameter(ValueFromPipelineByPropertyName = $true)]\n        [pscredential]\n        [System.Management.Automation.CredentialAttribute()]\n        ${Credential}\n    )\n\n    begin\n    {\n        $null = $PSBoundParameters.Remove('Path')\n        $null = $PSBoundParameters.Remove('ChildPath')\n\n        $combinedChildPath = ''\n\n        if ($ChildPath.Count -gt 0)\n        {\n            $combinedChildPath = $ChildPath[0]\n\n            for ($i = 1; $i -lt $ChildPath.Count; $i++)\n            {\n                $combinedChildPath = & $SafeCommands['Join-Path'] -Path $combinedChildPath -ChildPath $ChildPath[$i] @PSBoundParameters\n            }\n        }\n    }\n\n    process\n    {\n        $null = $PSBoundParameters.Remove('Path')\n        $null = $PSBoundParameters.Remove('ChildPath')\n\n        foreach ($p in $Path)\n        {\n            & $SafeCommands['Join-Path'] -Path $p -ChildPath $combinedChildPath @PSBoundParameters\n        }\n    }\n}\n```\n\n``` posh\n    Describe 'Stripping common parent paths' {\n        $paths = @(\n            Join-PathEx C: Common Folder UniqueSubFolder1 File.ps1\n            Join-PathEx C: Common Folder UniqueSubFolder2 File2.ps1\n            Join-PathEx C: Common Folder UniqueSubFolder3 File3.ps1\n        )\n\n        $commonPath = Get-CommonParentPath -Path $paths\n        $expectedCommonPath = Join-PathEx C: Common Folder\n\n        It 'Identifies the correct parent path' {\n            $commonPath | Should Be $expectedCommonPath\n        }\n\n        $expectedRelativePath = Join-PathEx UniqueSubfolder1 File.ps1\n\n        It 'Strips the common path correctly' {\n            Get-RelativePath -Path $paths[0] -RelativeTo $commonPath |\n            Should Be $expectedRelativePath\n        }\n    }\n```\n",
      "created_at": "2016-07-30T23:09:52Z",
      "updated_at": "2016-07-30T23:09:52Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@dlwyatt backward slashes should no longer be an issue, we recently made PowerShell on Linux slash agnostic (with the caveat that literal backslashes in file paths are not yet supported).\n",
      "created_at": "2016-07-30T23:12:19Z",
      "updated_at": "2016-07-30T23:12:19Z"
    },
    {
      "author": "dlwyatt",
      "author_association": "CONTRIBUTOR",
      "body": "Ah, even better.  That accounts for most of the differences between Pester and the psl-Pester fork.  :)  Thanks!\n",
      "created_at": "2016-07-30T23:20:36Z",
      "updated_at": "2016-07-30T23:20:36Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Just about ;) And thank you!\n",
      "created_at": "2016-07-31T02:27:58Z",
      "updated_at": "2016-07-31T02:27:58Z"
    },
    {
      "author": "dlwyatt",
      "author_association": "CONTRIBUTOR",
      "body": "@JamesWTruher mentioned that Add-Type is also coming (or already there), so there's not much that needs to be done here.  I've just opened a PR for Pester (https://github.com/pester/Pester/pull/589) which should be all we need to support backslashes, I think.\n\nThe only other big change I see between the psl fork is that the Invoke-PesterInJob function was completely rewritten to use in-proc runspaces instead of `Start-Job`.  Is this because `Start-Job` is or was not available yet in Open PS?  If so, I can copy that code over as well.  (Should give us a slight performance boost anyway, getting rid of the overhead of starting a new process.)\n",
      "created_at": "2016-08-04T12:49:22Z",
      "updated_at": "2016-08-04T12:49:22Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "@dlwyatt any updates here?\n\nAlso, would you like to be assigned to this issue?\n",
      "created_at": "2016-09-02T18:24:03Z",
      "updated_at": "2016-09-02T18:24:03Z"
    },
    {
      "author": "dlwyatt",
      "author_association": "CONTRIBUTOR",
      "body": "When I went through the code differences, they seemed to be lumped into three categories:  slashes, Add-Type, and Start-Job.  I believe the first two are already fixed in PS, but Start-Job may not be working yet on Linux.  (Pester itself doesn't actually need it, but it's used in some of the test suite.)\n",
      "created_at": "2016-09-02T18:49:38Z",
      "updated_at": "2016-09-02T18:49:38Z"
    },
    {
      "author": "dlwyatt",
      "author_association": "CONTRIBUTOR",
      "body": "So basically, download the latest Pester on a Linux build, run it and see what happens :)\n",
      "created_at": "2016-09-02T18:50:06Z",
      "updated_at": "2016-09-02T18:50:06Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "OK, will do\n\nAdding #1979 for cross-reference\n",
      "created_at": "2016-09-02T18:51:38Z",
      "updated_at": "2016-09-02T18:51:38Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "For #1979, we're going to remove the Pester submodule and rely on importing Pester.\n\nMaintainers are assigning this over to @JamesWTruher for investigation.\n",
      "created_at": "2016-10-06T20:26:06Z",
      "updated_at": "2016-10-06T20:26:06Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "@dlwyatt I'm finally looking at this now - is there a specific branch I should be validating against? Running against 3.4.6 is failing about 7% of the tests",
      "created_at": "2017-02-21T20:53:24Z",
      "updated_at": "2017-02-21T20:53:24Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@JamesWTruher as far as I can tell, we already removed the Pester submodule from the repository. Is this item now implicitly to use the latest version of Pester from the Gallery in our tests? If so, can we change the title to that effect and move this out to 6.1.0 (unless you see a reason for us to be on 3.4.6)? ",
      "created_at": "2017-05-23T19:10:52Z",
      "updated_at": "2017-05-23T19:10:52Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Based on an offline conversation with @JamesWTruher, while we should do this, we should hold this work off until Pester is fully cross-platform (which will likely not happen until after we release a stable 6.0.0). ",
      "created_at": "2017-05-23T22:22:27Z",
      "updated_at": "2017-05-23T22:22:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@adityapatwardhan Should we close the Issue too after #6064?",
      "created_at": "2018-02-09T04:50:09Z",
      "updated_at": "2018-02-09T04:50:09Z"
    }
  ],
  "created_at": "2016-07-14T18:31:25Z",
  "number": 1371,
  "state": "closed",
  "title": "Replace Pester submodule with import",
  "updated_at": "2018-02-09T05:12:16Z"
}