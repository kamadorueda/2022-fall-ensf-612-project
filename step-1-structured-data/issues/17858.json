{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17858",
  "author": "timconner",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nI am hosting PowerShell in a C# application using the Microsoft.PowerShell.SDK package. The application periodically calls Get-Volume. Memory usages steadily climbs as it runs throughout the week. Only restarting the entire application/process clears the memory.\r\n\r\nReproduction Code:\r\n```c#\r\nusing System.Diagnostics;\r\nusing System.Management.Automation;\r\nusing System.Management.Automation.Runspaces;\r\n\r\nint count = 100;\r\nConsole.WriteLine($\"Running Get-Volume {count} times...\");\r\n\r\nfor (int i = 0; i < count; i++) {\r\n    InitialSessionState iss = InitialSessionState.CreateDefault();\r\n    iss.ExecutionPolicy = Microsoft.PowerShell.ExecutionPolicy.Unrestricted;\r\n    using (var ps = PowerShell.Create(iss)) {\r\n        ps.AddScript($\"$Result = (Get-Volume | Select -First 1).Size\");\r\n        ps.Invoke();\r\n        var resultVar = ps.Runspace.SessionStateProxy.PSVariable.GetValue(\"Result\");\r\n        Console.WriteLine($\"Iteration Output: {resultVar}\");\r\n    }\r\n}\r\n\r\nGC.Collect();\r\nGC.WaitForPendingFinalizers();\r\nGC.Collect();\r\n\r\nConsole.WriteLine();\r\nConsole.WriteLine($\"Memory Usage: {Process.GetCurrentProcess().PrivateMemorySize64 / 1024 / 1024} MB\");\r\nConsole.WriteLine();\r\n\r\nConsole.WriteLine(\"Finished. Press any key to exit.\");\r\nConsole.ReadKey();\r\n```\n\n### Expected behavior\n\n```console\nMemory clears up as garbage collection runs.\n```\n\n\n### Actual behavior\n\n```console\nMemory usage steadily increases.\n```\n\n\n### Error details\n\n```console\nN/A\n```\n\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.5\r\nPSEdition                      Core\r\nGitCommitId                    7.2.5\r\nOS                             Microsoft Windows 10.0.19044\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n![image](https://user-images.githubusercontent.com/22841670/183475500-8edf2046-6e6b-4118-9e77-934a5bdf5490.png)\r\n",
  "closed_at": "2022-08-20T07:01:22Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Is Get-Volume a root of the issue? Can you reproduce the issue with another cmdlet/module?\r\nAlso I don't see how your repro code could show memory leak.\r\n",
      "created_at": "2022-08-08T17:24:34Z",
      "updated_at": "2022-08-08T17:24:34Z"
    },
    {
      "author": "timconner",
      "author_association": "NONE",
      "body": "I have tried many other cmdlets (e.g. Get-Service, Get-CimInstance, Get-ItemProperty, etc) and Get-Volume appears to be the only one I've come across that has this issue.\r\n\r\nThe repro code shows that memory isn't cleared even though PowerShell object is disposed via the using block. You could replace Get-Volume with a different Cmdlet and see. I supposed I could have it do that first to demonstrate the difference in memory usage.",
      "created_at": "2022-08-08T17:28:08Z",
      "updated_at": "2022-08-08T17:28:08Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "This is a similar report as https://github.com/PowerShell/PowerShell/issues/14779. Both cmdlets are from the `Storage` module, which is implemented as a CDXML module (meaning they involve native code execution by WMI providers).\r\n\r\nAs [my previous investigation](https://github.com/PowerShell/PowerShell/issues/14779#issuecomment-782516402) shown, the increasing committed memory was from native heap, and the size of managed heap almost didn't change over the 4 hours of my test run.\r\n\r\nHowever, we talked with the owner team, but didn't get much traction on this.",
      "created_at": "2022-08-12T18:50:45Z",
      "updated_at": "2022-08-12T18:50:45Z"
    },
    {
      "author": "timconner",
      "author_association": "NONE",
      "body": "I had a feeling it would effect multiple cmdlets that interact with the storage system. I figured it had to be something with native calls since no amount of disposing and forced garbage collection could clear it.  Thanks for the confirmation!\r\n\r\nWhen my windows service that typically consumes less than 100MB of memory started consuming multiple GB of memory it was fairly obvious there was a leak somewhere. I have since moved all PowerShell execution into it's own process using named pipes to relay results back so that I can free up memory by terminating the external process.",
      "created_at": "2022-08-12T19:08:31Z",
      "updated_at": "2022-08-12T19:08:31Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@StevenBucher98 and @theJasonHelmick, can we contact the owner team of the `Storage` module about the memory leak? This is the 2nd report about memory leaks when using cmdlets from the `Storage` module.",
      "created_at": "2022-08-12T19:13:23Z",
      "updated_at": "2022-08-12T19:13:23Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Thanks to @StevenBucher98 for getting in contact with the owner team of the `Storage` module, we got response from the owner team that they can reproduce the leak with `Get-PhysicalDisk` (they are working on a fix), and they are running tests with `Get-Volume`.",
      "created_at": "2022-08-18T19:35:21Z",
      "updated_at": "2022-08-18T19:35:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Close as external.",
      "created_at": "2022-08-19T04:17:02Z",
      "updated_at": "2022-08-19T04:17:02Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as external and has not had any activity for **1 day**. It has been be closed for housekeeping purposes.",
      "created_at": "2022-08-20T07:01:21Z",
      "updated_at": "2022-08-20T07:01:21Z"
    }
  ],
  "created_at": "2022-08-08T17:16:42Z",
  "labels": [
    "Resolution-External",
    "Needs-Triage"
  ],
  "number": 17858,
  "state": "closed",
  "title": "Get-Volume Memory Leak",
  "updated_at": "2022-08-20T07:01:22Z"
}