{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9800",
  "author": "TheGoddessInari",
  "body": "This breaks vcpkg's scripts\\bootstrap.ps1. I imagine it breaks any script assuming the previous behavior.\r\n\r\nConclusively, Get-ChildItem is returning full paths instead of relative paths.\r\n\r\nIt's most obvious on Microsoft's own vcpkg's bootstrap, since it fails immediately.\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n\r\ncd \\pathtovcpkg\r\nscripts\\bootstrap.ps1 -verbose\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nVERBOSE: Looking for Windows 10 SDK\r\nVERBOSE: C:\\Program Files (x86)\\Windows Kits\\10\\Include - Found\r\nVERBOSE: C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\um\\windows.h - Found\r\nVERBOSE: C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\shared\\sdkddkver.h - Found\r\nVERBOSE: Found 10.0.18362.0\r\nVERBOSE: C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.17763.0\\um\\windows.h - Found\r\nVERBOSE: C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.17763.0\\shared\\sdkddkver.h - Found\r\nVERBOSE: Found 10.0.17763.0\r\nVERBOSE: C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\um\\windows.h - Not Found\r\nVERBOSE: C:\\Program Files (x86)\\Windows Kits\\10\\Include - Found\r\nVERBOSE: C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\um\\windows.h - Found\r\nVERBOSE: C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\shared\\sdkddkver.h - Found\r\nVERBOSE: Found 10.0.18362.0\r\nVERBOSE: C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.17763.0\\um\\windows.h - Found\r\nVERBOSE: C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.17763.0\\shared\\sdkddkver.h - Found\r\nVERBOSE: Found 10.0.17763.0\r\nVERBOSE: C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\um\\windows.h - Not Found\r\nVERBOSE: C:\\Program Files\\Windows Kits\\10\\Include - Not Found\r\nVERBOSE: C:\\Program Files (x86)\\Windows Kits\\10\\Include - Found\r\nVERBOSE: C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\um\\windows.h - Found\r\nVERBOSE: C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\shared\\sdkddkver.h - Found\r\nVERBOSE: Found 10.0.18362.0\r\nVERBOSE: C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.17763.0\\um\\windows.h - Found\r\nVERBOSE: C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.17763.0\\shared\\sdkddkver.h - Found\r\nVERBOSE: Found 10.0.17763.0\r\nVERBOSE: C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\um\\windows.h - Not Found\r\nVERBOSE:\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nVERBOSE: Looking for Windows 10 SDK\r\nVERBOSE: C:\\Program Files (x86)\\Windows Kits\\10\\Include - Found\r\nVERBOSE: C:\\Program Files (x86)\\Windows Kits\\10\\Include\\C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\um\\windows.h - Not Found\r\nVERBOSE: C:\\Program Files (x86)\\Windows Kits\\10\\Include\\C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.17763.0\\um\\windows.h - Not Found\r\nVERBOSE: C:\\Program Files (x86)\\Windows Kits\\10\\Include\\C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\um\\windows.h - Not Found\r\nVERBOSE: C:\\Program Files (x86)\\Windows Kits\\10\\Include - Found\r\nVERBOSE: C:\\Program Files (x86)\\Windows Kits\\10\\Include\\C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\um\\windows.h - Not Found\r\nVERBOSE: C:\\Program Files (x86)\\Windows Kits\\10\\Include\\C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.17763.0\\um\\windows.h - Not Found\r\nVERBOSE: C:\\Program Files (x86)\\Windows Kits\\10\\Include\\C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\um\\windows.h - Not Found\r\nVERBOSE: C:\\Program Files\\Windows Kits\\10\\Include - Not Found\r\nVERBOSE: C:\\Program Files (x86)\\Windows Kits\\10\\Include - Found\r\nVERBOSE: C:\\Program Files (x86)\\Windows Kits\\10\\Include\\C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\um\\windows.h - Not Found\r\nVERBOSE: C:\\Program Files (x86)\\Windows Kits\\10\\Include\\C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.17763.0\\um\\windows.h - Not Found\r\nVERBOSE: C:\\Program Files (x86)\\Windows Kits\\10\\Include\\C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\um\\windows.h - Not Found\r\nVERBOSE:\r\n\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-preview.1\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-preview.1\r\nOS                             Microsoft Windows 10.0.18362\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2019-06-06T00:50:56Z",
  "comments": [
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "Looking at this, If I look at a file system object with Get-ChildItem, I note that in PowerShell V 7, the object's Parent property is a full pathname (same in 6.2), but a relative pathname in V5.1. This is not really a regression in 7.0.",
      "created_at": "2019-06-03T16:42:29Z",
      "updated_at": "2019-06-03T16:42:29Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@TheGoddessInari would you be able to provide a standalone repro? It looks like I'd need a C++ project to reproduce this currently",
      "created_at": "2019-06-03T23:47:27Z",
      "updated_at": "2019-06-03T23:47:27Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "The problem is easy to reproduce. Get-ChildItem is returning a different value for the Parent property of the System.IO.Directoryinfo object between Windows PowerShell and Powershell 6.2, and 7 (and probably also earlier versions of 6.x). \r\n\r\nI have a folder, C:\\Foo\\Test\\Test2, and the following happens:\r\n````powershell\r\n# In WindowsPowerShell 5.1\r\nPS [C:\\foo> ]> get-item c:\\foo\\test\\test2 | fl name, parent\r\nName   : test2\r\nParent : test\r\n# In PowerShell 6.2, and 7:\r\nPS [C:\\foo> ]> get-item c:\\foo\\test\\test2 | fl name, parent\r\nName   : test2\r\nParent : C:\\foo\\test\r\n````\r\nI suspect the script that is having the issue is adding the parent name returned to a string to create a path, and due to this change in System.IO.DirectoryInfo this no longer works the same way, hence the reported error.\r\n\r\nNot sure if this is a bug in the cmdlet or a feature (and thus a breaking change).\r\n\r\n",
      "created_at": "2019-06-04T11:04:47Z",
      "updated_at": "2019-06-04T11:04:47Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I'm wondering if this change might originate in .net Core?",
      "created_at": "2019-06-04T12:11:14Z",
      "updated_at": "2019-06-04T12:11:14Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "So I did a little bit of digging:\r\n\r\n- `gci` returns `FileSystemInfo` objects (not strings), as does `(gci).Parent`\r\n- The formatting in the default formatter in PowerShell still uses the relative name:\r\n```\r\n> [System.IO.DirectoryInfo]::new($PWD).Parent\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\nd-r---         5/31/2019 10:12 PM                Users\r\n\r\n> [System.IO.DirectoryInfo]::new($PWD).Parent.Name\r\nUsers\r\n\r\n> gci | select -First 1 | % { $_.Parent }\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\nd-----          6/3/2019 11:23 AM                me\r\n\r\n> gci | select -First 1 | ft name,parent\r\n\r\nName   Parent\r\n----   ------\r\n.Azure C:\\Users\\me\r\n```\r\n- *But*, `[System.IO.DirectoryInfo]::new($PWD).Parent.ToString()` has changed from relative to absolute. That appears to be because [DirectoryInfo.ToString() returns the original path used in the constructor](https://docs.microsoft.com/en-us/dotnet/api/system.io.directoryinfo.tostring?view=netcore-3.0).\r\n- Since this is a type created purely in .NET (and we don't control the constructor for `Parent`), this looks like a .NET regression that nobody caught\r\n- The strange part is [they already hit this once](https://github.com/dotnet/corefx/issues/2632) and added tests for it. So I'll open an issue and check",
      "created_at": "2019-06-04T17:06:54Z",
      "updated_at": "2019-06-04T17:08:14Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Looks like .NET is leaning toward WontFix.\r\n\r\nIn that case, we should:\r\n- Investigate changing `LanguagePrimitives` so that converting a `DirectoryInfo` to a `string` uses `Name` rather than `ToString()`\r\n- Investigate investment in @rkeithhill's suggested `[Path()]` attribute (or a similar parameter processing attribute)\r\n- Update any relevant documentation",
      "created_at": "2019-06-04T21:32:34Z",
      "updated_at": "2019-06-04T21:38:06Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "Is it worth pointing this out as a Breaking Issue for PowerShell 7?",
      "created_at": "2019-06-05T13:53:32Z",
      "updated_at": "2019-06-05T13:53:32Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> Is it worth pointing this out as a Breaking Issue for PowerShell 7?\r\n\r\nIt'll likely go in the changelog of the next release as a breaking change - @joeyaiello and @TravisEz13 are most familiar with our changelog processes.",
      "created_at": "2019-06-05T16:54:25Z",
      "updated_at": "2019-06-05T16:54:25Z"
    },
    {
      "author": "TheGoddessInari",
      "author_association": "NONE",
      "body": "It's worth noting that Powershell 6.0 also returns relative. \r\nI'm also not sure what the point of the press release for Powershell 7 saying it's supposed to be a drop-in replacement for Windows Powershell is if it's going to break scripts that use any of these common functions, even those that were already modified to be clean on both Powershell 5.0 and 6.0.\r\nAs far as I can tell, it was never listed as a breaking change for 6.1 or 6.2, and it breaks Powershell scripts that even Microsoft ships.",
      "created_at": "2019-06-05T22:51:54Z",
      "updated_at": "2019-06-05T22:52:14Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Duplicate of https://github.com/PowerShell/PowerShell/issues/7132",
      "created_at": "2019-06-06T00:50:52Z",
      "updated_at": "2019-06-06T00:50:52Z"
    }
  ],
  "created_at": "2019-06-02T07:30:18Z",
  "number": 9800,
  "state": "closed",
  "title": "Powershell 7.0-preview1 regression: Get-ChildItem returns full paths instead of relative paths.",
  "updated_at": "2019-06-12T22:29:25Z"
}