{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9202",
  "author": "TravisEz13",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nMake command searcher not use wildcard search for execution\r\n\r\n## PR Context\r\n\r\nThis is a Defense in Depth fix to prevent people from accidentally running a script. \r\n\r\nFor example, if a user attempted to run `.\\[my1].ps1` and there is a `1.ps1` in the same folder.  `1.ps1` would be executed instead.\r\nThe fix allows tab completion and `Get-Command` to continue to work with the wildcards (`[]`, `?`, and `*`).\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [ ] [Add `[feature]` to your commit messages if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2019-04-02T18:54:11Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If we want unambiguity, can we follow the practice we use in cmdlets? I mean that if name resolution returns several results, then throw.\r\n\r\n/cc @mklement0 ",
      "created_at": "2019-03-22T18:33:53Z",
      "updated_at": "2019-03-22T18:33:53Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@iSazonov \tThat code is already there.  End the end, both code paths, use the same code.  I doubt anyone actually wants to do execution based on wildcards.  It can lead to executing unexpected files and VERY bad results.",
      "created_at": "2019-03-22T18:35:27Z",
      "updated_at": "2019-03-22T18:37:11Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Glad to see this is getting fixed; it addresses at least part of #4726, which also asks for the `>`, `>>` behavior to be fixed - will this PR address that too (haven't looked)? ",
      "created_at": "2019-03-22T19:22:56Z",
      "updated_at": "2019-03-22T19:22:56Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@mklement0 \tThe intent was not to fix that issue.  As #4726 does not directly affect execution, I would not think that the issue would be considered a Defense in Depth fix and I'd prefer to get this fix in before addressing that issue.",
      "created_at": "2019-03-22T19:34:38Z",
      "updated_at": "2019-03-22T19:34:38Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for clarifying, @TravisEz13 (but note that #4726 is about execution _as well_).",
      "created_at": "2019-03-22T19:37:32Z",
      "updated_at": "2019-03-22T19:37:32Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@TravisEz13 Can you please summarize what is asked from the committee to review?",
      "created_at": "2019-03-23T21:34:13Z",
      "updated_at": "2019-03-23T21:34:13Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Committee ask:\r\n\r\nPlease review this breaking change.\r\n\r\nBefore this change, if a user attempted to run `.\\[my1].ps1` and there is a `1.ps1` in the same folder, `1.ps1` would be executed instead because we performed globbing on executed commands.\r\n\r\nIt would fail if there were multiple files matching the statement and fall back to the literal path if no match was found.\r\n\r\nAfter the change, execution always uses literal path.\r\n\r\nThe behavior was regressed in Windows Server 2016/Windows 10 Anniversary Edition/WMF 5.1 when a change to support the same type of patterns was added to `Get-Command` for relative command search.  There was no indication in the change description that the intent was to add this support for command execution execution as well.",
      "created_at": "2019-03-23T23:40:29Z",
      "updated_at": "2019-03-23T23:40:29Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, our proposal is to simply switch the behavior so that literal path is treated first and if not found, then attempt globbing.  We need to also fix the separate issue (outside of this PR) where the escaped literal path is not accepted: ./\\`[my1\\`].ps1\r\n\r\nRelated https://github.com/PowerShell/PowerShell/issues/5785",
      "created_at": "2019-03-27T22:22:52Z",
      "updated_at": "2019-03-28T03:18:57Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13, your last commit had 1 failures in `PowerShell-CI-windows`\r\nCommand Discovery tests.Use literal path first when executing scripts.'fully qualified path with bracket wildcard matctching one file' should not execute\r\n```powershell\r\nExpected an exception, with FullyQualifiedErrorId 'CommandNotFoundException' to be thrown, but no exception was thrown.\r\nat <ScriptBlock>, D:\\a\\1\\s\\test\\powershell\\engine\\Basic\\CommandDiscovery.Tests.ps1: line 119\r\n119:             { & $command } | Should -Throw -ErrorId 'CommandNotFoundException'\r\n```\r\n",
      "created_at": "2019-03-30T19:49:36Z",
      "updated_at": "2019-03-30T19:53:55Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13, your last commit had failures in `PowerShell-CI-static-analysis`\r\n",
      "created_at": "2019-03-30T19:53:01Z",
      "updated_at": "2019-03-30T19:53:34Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13, your last commit had failures in `PowerShell-CI-linux`\r\n",
      "created_at": "2019-03-30T19:53:03Z",
      "updated_at": "2019-03-30T19:53:38Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13, your last commit had failures in `PowerShell-CI-macos`\r\n",
      "created_at": "2019-03-30T19:53:05Z",
      "updated_at": "2019-03-30T19:53:43Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13, your last commit had failures in `PowerShell-CI-windows`\r\n",
      "created_at": "2019-03-30T19:53:06Z",
      "updated_at": "2019-03-30T19:53:47Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13, your last commit had 1 failures in `PowerShell-CI-windows`\r\nCommand Discovery tests.Use literal path first when executing scripts.Invoking .\\1.ps1 by fully qualified path with wildcard should return 'first script'\r\n```powershell\r\nExpected strings to be the same, but they were different.\r\nExpected length: 12\r\nActual length:   10\r\nStrings differ at index 0.\r\nExpected: 'first script'\r\nBut was:  'alt script'\r\n-----------^\r\nat <ScriptBlock>, D:\\a\\1\\s\\test\\powershell\\engine\\Basic\\CommandDiscovery.Tests.ps1: line 117\r\n117:             & $command | Should -BeExactly $expectedResult\r\n```\r\n",
      "created_at": "2019-03-30T20:20:09Z",
      "updated_at": "2019-03-30T20:20:55Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13, your last commit had failures in `PowerShell-CI-windows`\r\n",
      "created_at": "2019-03-30T21:22:24Z",
      "updated_at": "2019-03-30T21:54:02Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13, your last commit had failures in `PowerShell-CI-linux`\r\n",
      "created_at": "2019-03-30T21:30:56Z",
      "updated_at": "2019-03-30T21:54:06Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13, your last commit had failures in `PowerShell-CI-macos`\r\n",
      "created_at": "2019-03-30T21:30:57Z",
      "updated_at": "2019-03-30T21:54:11Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13, your last commit had failures in `PowerShell-CI-windows`\r\n",
      "created_at": "2019-03-30T21:30:59Z",
      "updated_at": "2019-03-30T21:54:14Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13, your last commit had 1 failures in `PowerShell-CI-windows`\r\nEnter-PSHostProcess tests.By Process Id.Can enter using NamedPipeConnectionInfo\r\n```powershell\r\nException calling \"Invoke\" with \"0\" argument(s): \"The runspace state is not valid for this operation.\"\r\nat <ScriptBlock>, D:\\a\\1\\s\\test\\powershell\\Modules\\Microsoft.PowerShell.Core\\Enter-PSHostProcess.Tests.ps1: line 136\r\n136:                 $ps.AddScript('$pid').Invoke() | Should -Be $pwshId\r\n\r\n```\r\n",
      "created_at": "2019-03-30T21:56:26Z",
      "updated_at": "2019-03-30T22:50:19Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13, your last commit had failures in `PowerShell-CI-windows`\r\n",
      "created_at": "2019-04-01T18:04:48Z",
      "updated_at": "2019-04-01T18:06:31Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13, your last commit had failures in `PowerShell-CI-windows`\r\n",
      "created_at": "2019-04-01T18:42:06Z",
      "updated_at": "2019-04-01T19:40:32Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13, your last commit had failures in `PowerShell-CI-macos`\r\n",
      "created_at": "2019-04-02T00:00:04Z",
      "updated_at": "2019-04-02T00:00:53Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13, your last commit had failures in `PowerShell-CI-linux`\r\n",
      "created_at": "2019-04-02T00:00:09Z",
      "updated_at": "2019-04-02T00:00:57Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13, your last commit had failures in `PowerShell-CI-windows`\r\n",
      "created_at": "2019-04-02T00:00:10Z",
      "updated_at": "2019-04-02T00:01:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Should we document the command searcher process in Docs repo?",
      "created_at": "2019-04-03T03:48:15Z",
      "updated_at": "2019-04-03T03:48:15Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "The command searcher itself is an implementation detail.  We should document the search order for command execution.",
      "created_at": "2019-04-03T05:18:52Z",
      "updated_at": "2019-04-03T05:18:52Z"
    }
  ],
  "created_at": "2019-03-22T18:05:39Z",
  "number": 9202,
  "state": "closed",
  "title": "Make command searcher not use wildcard search for execution",
  "updated_at": "2019-04-03T05:54:40Z"
}