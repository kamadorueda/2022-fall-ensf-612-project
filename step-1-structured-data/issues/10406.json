{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10406",
  "author": "hpaul-osi",
  "body": "# Steps to reproduce\r\nThis behavior was originally observed while doing batch copies of blob containers with the Az CLI, but a simple contrived example is below.  ReproduceIssue.ps1 is a minimal script that fires off a batch of tasks defined in DelayedStdOut.ps1 that do not receive data to standard out until after the parent process has exited.  If I run ReproduceIssue.ps1 in pwsh on Windows, there is no exception and the late output is not redirected to the text file.  When it is run on a Linux container, there is an unhandled exception.\r\n\r\n**ReproduceIssue.ps1**\r\n```powershell\r\n$StdOutDelaySeconds = 5,\r\n$RequestBatch = 5\r\n@(1 .. $RequestBatch) | % {\r\n    $processParameters = @{\r\n        FilePath = 'pwsh'\r\n        ArgumentList = @( '-file', \"DelayedStdOut.ps1 $StdOutDelaySeconds\")\r\n        PassThru = $true\r\n        RedirectStandardOut = Join-Path -Path (Get-Location) -ChildPath \"$([System.Guid]::NewGuid().Guid).out.log\"\r\n    }\r\n    Start-Process @processParameters\r\n}\r\nStart-Sleep (2*$StdOutDelaySeconds)\r\n```\r\n\r\n**DelayedStdOut.ps1**\r\n```powershell\r\nparam(\r\n    $StdOutDelaySeconds\r\n)\r\nStart-Process -FilePath pwsh -ArgumentList @('-c',\"{Start-Sleep $StdOutDelaySeconds; Write-Output 'Test' }\")\r\nexit 0\r\n```\r\n# Expected behavior\r\nOn Windows, there is no exception and the standard output that was received after the process exited is not redirected to the file.\r\n\r\n# Actual behavior\r\nWhen executed on Unix (Linux Azure Container Instance), there is an unhandled exception because the object is disposed when the data is received.  Under less contrived circumstances, the issue only appears intermittently.  I saw [this comment](https://github.com/PowerShell/PowerShell/blob/8234fbb04b437748b6782e9c45b0026c374ef12d/src/Microsoft.PowerShell.Commands.Management/commands/management/Process.cs#L2192) in the if Unix region indicating that the ExitHandler waits for a second on another thread in hopes of avoiding a race condition whereas the non-Unix region has more involved logic.\r\n\r\n```none\r\nAn error has occurred that was not properly handled. Additional information is shown below. The PowerShell process will exit.\r\n\r\nUnhandled Exception: System.ObjectDisposedException: Cannot write to a closed TextWriter.\r\n   at System.IO.StreamWriter.WriteLine(String value)\r\n   at Microsoft.PowerShell.Commands.StartProcessCommand.StdOutputHandler(Object sendingProcess, DataReceivedEventArgs outLine)\r\n   at System.Diagnostics.Process.OutputReadNotifyUser(String data)\r\n   at System.Diagnostics.AsyncStreamReader.FlushMessageQueue(Boolean rethrowInNewThread)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Diagnostics.AsyncStreamReader.<>c.<FlushMessageQueue>b__17_0(Object edi)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n```\r\n\r\n# Environment data\r\nWindows Environment\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.2\r\nPSEdition                      Core\r\nGitCommitId                    6.2.2\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\nUnix Environment\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.2\r\nPSEdition                      Core\r\nGitCommitId                    6.2.2\r\nOS                             Linux 4.15.0-1052-azure #57-Ubuntu SMP Tue Jul 23 19:07:16 UTC 2019\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@hpaul-osi Can you confirm the issue with latest 7.0 build?",
      "created_at": "2019-10-02T14:04:31Z",
      "updated_at": "2019-10-02T14:04:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@PaulHigin @daxian-dbw It is again redirections in Start-Process. ",
      "created_at": "2020-01-31T07:51:35Z",
      "updated_at": "2020-01-31T07:51:35Z"
    },
    {
      "author": "bh3791",
      "author_association": "NONE",
      "body": "this is still an issue. I see the issue crop up reliably on an Ubuntu 20.04 32-core machine executing 32 external processes with Powershell Start-Process redirecting stdout and stderr to file output. Also, on the same environment, but when running fewer processes, it does not appear to show up.\r\n\r\nI've seen the issue occur on ubuntu in the most latest pwsh 7 updates (since Feb 2021) BUT NOT in the version that was current in January 2021. I'm not sure if it's the recent pwsh updates or something in ubuntu that changed. I didn't see this issue on windows.\r\n\r\nIt kills the parent process. Here's a stack trace:\r\n\r\nAn error has occurred that was not properly handled. Additional information is shown below. The PowerShell process will exit.\r\nUnhandled exception. System.ObjectDisposedException: Cannot write to a closed TextWriter.\r\nObject name: 'StreamWriter'.\r\n   at System.IO.StreamWriter.<ThrowIfDisposed>g__ThrowObjectDisposedException|75_0()\r\n   at System.IO.StreamWriter.WriteLine(String value)\r\n   at Microsoft.PowerShell.Commands.StartProcessCommand.StdOutputHandler(Object sendingProcess, DataReceivedEventArgs outLine) in /PowerShell/src/Microsoft.PowerShell.Commands\r\n.Management/commands/management/Process.cs:line 2177\r\n   at System.Diagnostics.AsyncStreamReader.FlushMessageQueue(Boolean rethrowInNewThread)\r\n--- End of stack trace from previous location ---\r\n   at System.Diagnostics.AsyncStreamReader.<>c.<FlushMessageQueue>b__18_0(Object edi)\r\n   at System.Threading.QueueUserWorkItemCallback.<>c.<.cctor>b__6_0(QueueUserWorkItemCallback quwi)\r\n   at System.Threading.ExecutionContext.RunForThreadPoolUnsafe[TState](ExecutionContext executionContext, Action`1 callback, TState& state)\r\n   at System.Threading.QueueUserWorkItemCallback.Execute()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n",
      "created_at": "2021-04-30T21:30:07Z",
      "updated_at": "2021-04-30T22:31:52Z"
    }
  ],
  "created_at": "2019-08-21T20:10:43Z",
  "number": 10406,
  "state": "open",
  "title": "Inconsistent behavior between platforms when RedirectStandardOut is used and delayed data is received.",
  "updated_at": "2021-04-30T22:31:52Z"
}