{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17165",
  "author": "mklement0",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nNote: This may not arise often in practice, but there are two concerns:\r\n\r\n* The original behavior is surprising.\r\n* _Repeating_ the command - for an already type-constrained variable - _changes_ the behavior.\r\n\r\n```powershell\r\nRemove-Variable -ErrorAction Ignore var # Make sure no $var variable exists.\r\n\r\n([bool] $var = 42).GetType().Name # !! 'Int32', i.e. the type of the input rather than the stored converted value.\r\n\r\n# Repeating the command - even with a different constraining type - then *does* return the converted value.\r\n# NB: The symptom only surfaces with the same variable, i.e. with a *previously type-constrained* one.\r\n([string] $var = 42).GetType().Name # !! 'String'\r\n```\r\n\r\n\r\n### Expected behavior\r\n\r\n```console\r\nBoolean\r\nString\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nInt32\r\nString\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nPowerShell Core 7.3.0-preview.3\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": "2022-04-22T17:55:38Z",
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "And only when the compiler is running unoptimized (dot sourcing, debug scenarios, etc).\r\n\r\nSo\r\n\r\n```powershell\r\n& { ([string] $a = 42).GetType() }\r\n# string\r\n\r\n& { . { ([string] $a = 42).GetType() } }\r\n# int\r\n```",
      "created_at": "2022-04-20T17:05:18Z",
      "updated_at": "2022-04-20T17:05:18Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #17174, which has now been successfully released as `v7.3.0-preview.4`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.3.0-preview.4)\n",
      "created_at": "2022-05-23T16:21:56Z",
      "updated_at": "2022-05-23T16:21:56Z"
    }
  ],
  "created_at": "2022-04-20T14:43:11Z",
  "number": 17165,
  "state": "closed",
  "title": "Passing the value of a type-constrained assignment through via the grouping operator (`(...)`) passes the input value rather than the converted one",
  "updated_at": "2022-05-23T16:21:56Z"
}