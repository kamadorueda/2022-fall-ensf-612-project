{
  "_url": "https://github.com/PowerShell/PowerShell/issues/18371",
  "author": "RussKie",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nI have a little .NET app (targeting .NET 6/7), and I want to measure how long it takes to launch it. The app automatically closes itself upon launch and reports the elapsed time. The time reported by `Measure-Command` cmdlet and inconsistent with the time reported by the app.\r\n\r\nWhen I ran the cmdlet I get these results from the cmdlet:\r\n```ps\r\nPS throwaway\\winforms-nativeaot> Measure-Command { .\\bin\\Release\\net6.0-windows\\winforms-nativeaot.exe }\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 0\r\nMilliseconds      : 88\r\nTicks             : 881686\r\nTotalDays         : 1.02046990740741E-06\r\nTotalHours        : 2.44912777777778E-05\r\nTotalMinutes      : 0.00146947666666667\r\nTotalSeconds      : 0.0881686\r\nTotalMilliseconds : 88.1686\r\n```\r\n\r\nDebugViewer report the data from the app:\r\n```\r\n[28008] winforms_nativeaot: time taken: 146.5512 ms || 1465512 ticks // 146 ms \r\n```\r\n\r\nWhen I ran a comparable command from bash, I get these results:\r\n```\r\n$ time ./bin/Release/net6.0-windows/winforms-nativeaot.exe\r\n\r\nreal    0m0.266s\r\nuser    0m0.000s\r\nsys     0m0.000s\r\n```\r\n\r\nAnd I also tried the good ol' cmd:\r\n```\r\nD:\\Development\\throwaway\\winforms-nativeaot>cmd /v:on /c \"echo !TIME! & .\\bin\\Release\\net6.0-windows\\winforms-nativeaot.exe & echo !TIME!\"         \r\n14:33:16.35 \r\n14:33:16.59\r\n```\r\n\r\nApp | PowerShell 5.1 | PowerShell 7.2 | Bash | Cmd\r\n--|--|--|--|--\r\n146 ms | 34.337 | 88.1686 | 266 | 240\r\n\r\nIt's clear that PowerShell reports grossly incorrect results as it can't take less time than the actual app. Bash reports the correct time as there's some overhead to launch the app before it gets to the `Main` entrypoint.\r\n\r\nTo verify, I have also run this, and results are surprising to say the least:\r\n```ps\r\n Measure-Command { timeout 3 }\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 2\r\nMilliseconds      : 322\r\nTicks             : 23221427\r\nTotalDays         : 2.68766516203704E-05\r\nTotalHours        : 0.000645039638888889\r\nTotalMinutes      : 0.0387023783333333\r\nTotalSeconds      : 2.3221427\r\nTotalMilliseconds : 2322.1427\r\n```\r\n\r\n\r\n\r\n<details>\r\n<summary>.NET app code</summary>\r\n\r\n\r\n\r\n```cs\r\nusing System.Diagnostics;\r\n\r\nnamespace winforms_nativeaot;\r\n\r\nstatic class Program\r\n{\r\n    [STAThread]\r\n    static void Main()\r\n    {\r\n        Stopwatch stopwatch = Stopwatch.StartNew();\r\n\r\n        // To customize application configuration such as set high DPI settings or default font,\r\n        // see https://aka.ms/applicationconfiguration.\r\n        ApplicationConfiguration.Initialize();\r\n\r\n        Application.ApplicationExit += (s, e) =>\r\n        {\r\n            stopwatch.Stop();\r\n            Trace.WriteLine($\"winforms_nativeaot: time taken: {stopwatch.Elapsed.TotalMilliseconds} ms || {stopwatch.ElapsedTicks} ticks // {stopwatch.ElapsedMilliseconds} ms\");\r\n        };\r\n\r\n        Application.Run(new Form1());\r\n    }    \r\n}\r\n\r\npublic partial class Form1 : Form\r\n{\r\n    public Form1()\r\n    {\r\n        this.Activated += (_, __) => Application.Exit();\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n</details>\n\n### Expected behavior\n\n```console\nThe reported time is correct, at least within the same order of magnitude.\n```\n\n\n### Actual behavior\n\n```console\nThe reported time is grossly inaccurate.\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.22621.608\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.22621.608\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n\r\n----\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.7\r\nPSEdition                      Core\r\nGitCommitId                    7.2.7\r\nOS                             Microsoft Windows 10.0.22621\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "What does say the `Get-History`?   `(h)[-1].Duration`",
      "created_at": "2022-10-25T08:48:00Z",
      "updated_at": "2022-10-25T08:48:00Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "` Measure-Command {notepad.exe} `  Will start notepad, and return to the PowerShell prompt. The time reported is the time to return from launching notepad, - the command doesn't wait for notepad to terminate  \r\nto do that you need to use \r\n` Measure-Command {start -wait notepad.exe} `\r\n",
      "created_at": "2022-10-25T09:07:10Z",
      "updated_at": "2022-10-25T09:07:10Z"
    },
    {
      "author": "RussKie",
      "author_association": "NONE",
      "body": "Thank you @jhoneill, but this still doesn't appear to provide a comparable result\r\n\r\n* PS 7.2\r\n```\r\n> Measure-Command { start -wait .\\bin\\Release\\net6.0-windows\\winforms-nativeaot.exe }\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 1\r\nMilliseconds      : 62\r\nTicks             : 10621881\r\nTotalDays         : 1.229384375E-05\r\nTotalHours        : 0.00029505225\r\nTotalMinutes      : 0.017703135\r\nTotalSeconds      : 1.0621881\r\nTotalMilliseconds : 1062.1881\r\n```\r\n\r\n* PS 5.1\r\n```\r\n>  Measure-Command { start -wait .\\bin\\Release\\net6.0-windows\\winforms-nativeaot.exe }\r\n\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 1\r\nMilliseconds      : 25\r\nTicks             : 10252342\r\nTotalDays         : 1.18661365740741E-05\r\nTotalHours        : 0.000284787277777778\r\nTotalMinutes      : 0.0170872366666667\r\nTotalSeconds      : 1.0252342\r\nTotalMilliseconds : 1025.2342\r\n```\r\n\r\n* cmd\r\n```\r\n>cmd /v:on /c \"echo !TIME! & .\\bin\\Release\\net6.0-windows\\winforms-nativeaot.exe & echo !TIME!\"\r\n13:48:08.82\r\n13:48:09.03\r\n```\r\n\r\n* bash\r\n```\r\n$ time ./bin/Release/net6.0-windows/winforms-nativeaot.exe\r\n\r\nreal    0m0.241s\r\nuser    0m0.000s\r\nsys     0m0.000s\r\n```\r\n\r\nFor the these run the app's diagnostics reported between 129ms and 150ms.",
      "created_at": "2022-10-26T02:53:00Z",
      "updated_at": "2022-10-26T02:53:00Z"
    },
    {
      "author": "RussKie",
      "author_association": "NONE",
      "body": "> What does say the `Get-History`? `(h)[-1].Duration`\r\n\r\nThis doesn't appear to produce any result.\r\n```\r\nPS D:\\Development\\throwaway\\winforms-nativeaot> (Get-History)[0]\r\n\r\n  Id CommandLine\r\n  -- -----------\r\n   1  Measure-Command { .\\bin\\Release\\net7.0-windows\\win-x64\\winforms-nativeaot.exe }\r\n\r\n\r\nPS D:\\Development\\throwaway\\winforms-nativeaot> (Get-History)[0].Duration\r\nPS D:\\Development\\throwaway\\winforms-nativeaot>\r\n```",
      "created_at": "2022-10-26T02:55:01Z",
      "updated_at": "2022-10-26T02:55:01Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "`(h)[-1].Duration`\r\n\r\nWorks alone   (h is an alias for get history)\r\n\r\nThe time in cmd will be the time to return to the prompt - again try it with notepad - you'll get a time before the app has closed.  It's likely there is some overhead starting the process and I suspect start process polls to see if the process ID is still running so it won't give super accurate times. \r\n\r\n```\r\n$p = new-object System.Diagnostics.Process\r\n# Start info has other properties which to get process exactly as desired.  \r\n$p.StartInfo.FileName = \"C:\\Windows\\System32\\notepad.exe\" \r\n$p.start()\r\n$p.WaitForExit()\r\n$p.ExitTime - $p.StartTime\r\n\r\n```\r\nShould be more accurate.   \r\n",
      "created_at": "2022-10-26T08:48:54Z",
      "updated_at": "2022-10-26T08:48:54Z"
    }
  ],
  "created_at": "2022-10-25T03:40:18Z",
  "number": 18371,
  "state": "open",
  "title": "`Measure-Command` reports incorrect results",
  "updated_at": "2022-10-26T08:48:54Z"
}