{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3973",
  "author": "daxian-dbw",
  "body": "Task 2 of #3649\r\n\r\nNow powershell doesn't need a custom assembly load context. Instead, it can directly depend on the default loader and thus the WinRM remoting plugin shall be updated to directly call into `System.Management.Automation`.\r\n\r\nI have verified that powershell core remoting works fine with this change:\r\n```\r\nPS:6> $s = New-PSSession -ComputerName . -ConfigurationName powershell.6.0.0-beta.2\r\n[C:\\WINDOWS\\system32]\r\nPS:7> $s\r\n\r\n Id Name            ComputerName    ComputerType    State         ConfigurationName     Availability\r\n -- ----            ------------    ------------    -----         -----------------     ------------\r\n  2 WinRM2          localhost       RemoteMachine   Opened        powershell.6.0.0-...     Available\r\n\r\n\r\n[C:\\WINDOWS\\system32]\r\nPS:8> Enter-PSSession $s\r\n[localhost]: PS C:\\Users\\user\\Documents> cd $Pshome\r\n[localhost]: PS E:\\PowerShell\\src\\powershell-win-core\\bin\\Debug\\netcoreapp2.0\\win10-x64\\publish>\r\n[localhost]: PS E:\\PowerShell\\src\\powershell-win-core\\bin\\Debug\\netcoreapp2.0\\win10-x64\\publish> exit\r\n``` \r\n\r\nNote that `CssMainEntry.cpp` is also updated similarly, but it's not used by the Github PowerShell Core.",
  "closed_at": "2017-06-13T00:44:14Z",
  "comments": [],
  "created_at": "2017-06-09T05:20:53Z",
  "number": 3973,
  "state": "closed",
  "title": "Update WinRM remoting plugin to directly call into System.Management.Automation without going through PowerShell assembly load context",
  "updated_at": "2017-06-13T00:44:20Z"
}