{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7145",
  "author": "daxian-dbw",
  "body": "## PR Summary\r\n\r\nThe major refactoring changes are:\r\n- In `ModuleIntrisic.cs`, remove unneeded Windows-PowerShell-only code.\r\n- In `ModuleUtils.cs`\r\n   - use the new API `Directory.GetDirectories(string path, string searchPattern, EnumerationOptions enumerationOptions)` and `Directory.GetFiles(string path, string searchPattern, EnumerationOptions enumerationOptions)` to enumerate files and sub-directories within a directory path.\r\n   - remove the unused parameter `bool force` from `GetDefaultAvailableModuleFiles(bool force, bool isForAutoDiscovery, ExecutionContext context)`\r\n   - refactor the method `GetModuleVersionsFromAbsolutePath`. Add more comments and rename the method name.\r\n- In `ModuleCmdletBase.cs`, refactor the method `GetModuleForNonRootedPaths` to `GetModuleForNames` to simply its implementation.\r\n- In `PSModuleInfo.cs`\r\n   - group the declarations of `Declared*Exports` fields together\r\n   - rename `_detected*Exports` fields to `Detected*Exports` to group them together. They are internal fields and used outside `PSModuleInfo`.\r\n\r\n### Pref improvement\r\n\r\n> NOTE: Use Windows PowerShell default module paths to exercies the code with more modules.\r\n> The following measurement are done without the crossgen'ed assemblies.\r\n\r\nThere is some perf improvement after this refactoring change:\r\n- For `Get-Module -ListAvailable`, there is about 36% speed improvement for 94 default modules.\r\n- For `Get-Module -ListAvailable -All`, there is about 14% speed improvement for totally 600 module files.\r\n- For `Get-Module <name> -ListAvailable -List`, there is over 17x speed improvement for finding 13 modules from 600 modules. This is because we now filter names using the module file before creating a `PSMdouleInfo` object.\r\n\r\n#### Before\r\n\r\n```powershell\r\nPS> $env:PSModulePath = \"C:\\Users\\dongbow\\Documents\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\windows\\system32\\WindowsPowerShell\\v1.0\\Modules\"\r\nPS> $time = foreach ($i in 1..20) { Measure-Command { gmo -ListAvailable } | % TotalMilliseconds }\r\nPS> $time | Measure-Object -Maximum -Minimum -Average | select Count, Maximum, Minimum, Average\r\n\r\nCount  Maximum  Minimum    Average\r\n-----  -------  -------    -------\r\n   20 701.3139 623.5225 642.628685\r\n\r\nPS> $time = foreach ($i in 1..20) { Measure-Command { gmo -ListAvailable -All } | % TotalMilliseconds }\r\nPS> $time | Measure-Object -Maximum -Minimum -Average | select Count, Maximum, Minimum, Average\r\n\r\nCount   Maximum   Minimum     Average\r\n-----   -------   -------     -------\r\n   20 1369.1893 1243.1195 1310.147175\r\n\r\nPS> $time = foreach ($i in 1..20) { Measure-Command { gmo windows* -ListAvailable -All } | % TotalMilliseconds }\r\nPS> $time | Measure-Object -Maximum -Minimum -Average | select Count, Maximum, Minimum, Average\r\n\r\nCount   Maximum   Minimum    Average\r\n-----   -------   -------    -------\r\n   20 1535.3805 1292.2188 1353.62972\r\n```\r\n\r\n#### After\r\n\r\n```powershell\r\nPS> $env:PSModulePath = \"C:\\Users\\dongbow\\Documents\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\windows\\system32\\WindowsPowerShell\\v1.0\\Modules\"\r\nPS> $time = foreach ($i in 1..20) { Measure-Command { gmo -ListAvailable } | % TotalMilliseconds }\r\nPS> $time | Measure-Object -Maximum -Minimum -Average | select Count, Maximum, Minimum, Average\r\n\r\nCount Maximum  Minimum  Average\r\n----- -------  -------  -------\r\n   20 438.338 393.7476 410.62353\r\n\r\nPS> $time = foreach ($i in 1..20) { Measure-Command { gmo -ListAvailable -All } | % TotalMilliseconds }\r\nPS> $time | Measure-Object -Maximum -Minimum -Average | select Count, Maximum, Minimum, Average\r\n\r\nCount   Maximum   Minimum Average\r\n-----   -------   -------   -------\r\n   20 1341.5443 1055.1771 1120.4748\r\n\r\nPS> $time = foreach ($i in 1..20) { Measure-Command { gmo windows* -ListAvailable -All } | % TotalMilliseconds }\r\nPS> $time | Measure-Object -Maximum -Minimum -Average | select Count, Maximum, Minimum, Average\r\n\r\nCount Maximum Minimum Average\r\n----- ------- -------   -------\r\n   20 78.0931 61.9288 66.194415\r\n```\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [ ] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed - Issue link:\r\n- **Testing - New and feature**\r\n    - [ ] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [x] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2018-07-02T18:00:28Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@rjmholt I have reverted the breaking change I made to the scenario of `Get-Module <Path-to-directory> -ListAvailable` (please see details in #7160). Now the changes introduce no change to the current behaviors. Can you please continue the review?",
      "created_at": "2018-06-28T22:51:23Z",
      "updated_at": "2018-06-28T22:58:22Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Added tests for different scenarios of `Get-Module -ListAvailable` and `Get-Module -ListAvailable -All`. All those tests pass in `pwsh` with or without changes in this PR.",
      "created_at": "2018-06-29T17:48:44Z",
      "updated_at": "2018-06-29T17:49:01Z"
    }
  ],
  "created_at": "2018-06-22T19:42:00Z",
  "number": 7145,
  "state": "closed",
  "title": "Refactor module code related to 'Get-Module -ListAvailable'",
  "updated_at": "2018-07-02T18:00:33Z"
}