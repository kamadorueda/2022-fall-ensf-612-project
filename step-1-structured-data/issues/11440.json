{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11440",
  "author": "jackdcasey",
  "body": "# Increase output detail of Test-Connection when performing a tcp connection test \r\n\r\nMy proposed change is to provide more detail when using `Test-Connection` cmdlet with the `-TCPPort` option. This would bring the command more in line with the classic `Test-NetConnection` cmdlet. \r\n\r\nCurrently, the returned value when performing this test is a boolean true / false. This provides some insight into if the connection was successful but not too much else. Here's an example output:\r\n\r\n    Test-Connection google.com -TCPPort 443\r\n\r\n    True\r\n\r\nMy proposed changes would provide more detail to the output. Here's an example of what that output might look like:\r\n\r\n    Test-Connection google.com -TCPPort 443\r\n\r\n    Source             : Jack-PC\r\n    SourceAddress      : 192.168.1.1\r\n    Destination        : google.com\r\n    DestinationAddress : 216.58.217.46\r\n    Port               : 443\r\n    Latency            : 16\r\n    TestResult         : Success\r\n\r\nTo provide the original behaviour, we can implement the existing -quiet option:\r\n\r\n    Test-Connection google.com -TCPPort 443 -Quiet\r\n\r\n    True\r\n\r\nIn my dayjob, I use the classic `Test-NetConnection` cmdlet all the time to troubleshoot network connectivity issues. I find the added output incredibly valuable. I believe this would increase the usability of this command by a fair bit.  \r\n\r\nI have forked the repository and have these changes implemented. However, before submitting any pull request I wanted to engage the community, as this is changing an existing implementation. \r\n\r\nPlease let me know what you think! I am new to this community, and would love any feedback of any kind :) \r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Love it!\r\n\r\nWe should probably look to format the output similarly to how the existing output type are formatted (table format, possibly with multiple connection attempts so that if there's a transient failure it doesn't give the wrong impression).\r\n\r\nI would also add a `Mode` column, since from memory the cmdlet also supports `-UdpPort`, and then you could use this some output type for each of them. `Mode` would be a custom enum type where the available values (currently, at least) are `TCP` and `UDP` (or if there's a .NET core enum that has a similar purpose we can always use that).",
      "created_at": "2019-12-27T11:48:19Z",
      "updated_at": "2019-12-27T11:48:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> also supports -UdpPort\r\n\r\nYou can not connect to UDP port. UDP nature is \"send and forget\".",
      "created_at": "2019-12-27T13:52:07Z",
      "updated_at": "2019-12-27T13:52:07Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Ah, my mistake, I was under the impression we'd already done a `-UdpPort`. Feel free to disregard that part. \ud83d\ude42 \r\n\r\nI did look into that at some point, though, since some folx were wanting that. Apparently typical UDP port test tools just do the reverse of the TCP port test -- send a UDP packet, if any response is received, it is assumed that port is closed. Otherwise you have to assume it's open. Naturally that leads to a lot of false positives, but given then nature of UDP that's about as good as you can get. :joy:",
      "created_at": "2019-12-27T15:36:08Z",
      "updated_at": "2019-12-27T15:36:08Z"
    },
    {
      "author": "jackdcasey",
      "author_association": "CONTRIBUTOR",
      "body": "Thank you for the feedback \ud83d\ude42!\r\n\r\nI was looking at formatting it a bit more like the ping. However, in the current implementation the connection test is only sent once, then the result is returned. Do you reckon we change the logic to perform multiple connectivity tests? \r\n\r\nLet me know what you think! \r\n\r\n",
      "created_at": "2019-12-27T16:47:14Z",
      "updated_at": "2019-12-27T16:47:14Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I think that would be worth doing. It's always better to test a few times in case it hits a transient failure, imo. \ud83d\ude42 \r\n\r\nIt makes more sense that we do that for this too, I think.",
      "created_at": "2019-12-27T17:09:57Z",
      "updated_at": "2019-12-27T17:09:57Z"
    },
    {
      "author": "jackdcasey",
      "author_association": "CONTRIBUTOR",
      "body": "Sounds like a plan! \r\n\r\nI guess for the `-quiet` option we can keep at a single test, as it's only returning a single bool. I'll make the changes to run the test multiple times. \ud83d\ude42\r\n\r\nPardon my ignorance on the subject, I'm fairly new with contributing to open source. The workflow at my workplace is totally different! Once we are happy with our changes, would we just submit this as a normal pull request? As we're changing an existing cmdlet, are there any other steps required? \r\n\r\nMy understanding is it would look like this:\r\n\r\n1. Make changes to the command\r\n2. Update tests to reflect changes\r\n3. Update documentation to reflect changes\r\n4. Submit pull request\r\n\r\nPlease let me know if I am missing anything! \ud83d\ude0a \r\n\r\nThanks! ",
      "created_at": "2019-12-27T18:22:52Z",
      "updated_at": "2019-12-27T18:22:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> However, in the current implementation the connection test is only sent once, then the result is returned. \r\n\r\nI think follow attempts make sense only on failure.\r\n\r\n> Please let me know if I am missing anything! \r\n\r\nEvery PR in the repo should has tests to cover code changes.\r\nYou could look already merged PRs and our contribution docs.",
      "created_at": "2019-12-27T18:43:20Z",
      "updated_at": "2019-12-27T18:43:20Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Sounds good to me @jackdcasey! As Ilya mentions, make sure to have tests that cover it.\r\n\r\nAs to the repeated tests for TCP with `-Quiet`, I think it makes sense to simply do 4 attempts, and then return `true` the first time you're able to connect. Then you'd only return `false` if all 4 attempts failed to connect, similar to how the ICMP `-Quiet` mode works, if I recall correctly. \ud83d\ude42 ",
      "created_at": "2019-12-27T19:41:42Z",
      "updated_at": "2019-12-27T19:41:42Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Really there is two scenario:\r\n- TCP send SYN timeout (could be from 20 to 60 seconds (calculated dynamically))\r\n- target application response time\r\n\r\nWhat we want to address?\r\n For first case it makes no sense to do second attempts",
      "created_at": "2019-12-28T05:47:26Z",
      "updated_at": "2019-12-28T05:48:47Z"
    },
    {
      "author": "jackdcasey",
      "author_association": "CONTRIBUTOR",
      "body": "Working on the formatting a bit today, is this what you guys had in mind?\r\n```\r\nTest-Connection google.com -tcpport 443\r\n\r\n   Destination: google.com\r\n\r\nTest Source           Destination      DestinationAddress    Port Latency Result\r\n                                                                     (ms)\r\n---- ------           -----------      ------------------    ---- ------- ------\r\n   1 Jacks-MBP        google.com       172.217.3.174          443      26 Success\r\n   2 Jacks-MBP        google.com       172.217.3.174          443       9 Success\r\n   3 Jacks-MBP        google.com       172.217.3.174          443      23 Success\r\n   4 Jacks-MBP        google.com       172.217.3.174          443      18 Success\r\n```\r\nIn regards to the `-quiet` logic, I reckon we err on the side of caution, and only return true if all 4 tests are successful. As soon as we hit a failed request, we return false. \r\n\r\nLet me know what you guys think! ",
      "created_at": "2019-12-28T05:55:00Z",
      "updated_at": "2019-12-28T05:55:00Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Looks good to me! \r\n\r\nI think that the method we use for `-Quiet` should match the existing logic used for `-Quiet` in the standard ICMP ping mode. I don't remember exactly how that one works, but I think it makes the most sense to use the same logic for both modes so that users know what to expect.\r\n\r\n@iSazonov I'll be first to admit I have limited experience with exactly what can cause a one-off connection error, but I think that since hardware is never perfect we should always attempt a few times to give a reasonably complete picture of how the connection behaves.",
      "created_at": "2019-12-28T07:00:07Z",
      "updated_at": "2019-12-28T07:02:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "TCP is a connection-based and reliable protocol. To establish a connection the protocol does a conversation which may take a long time, specially if the connection is blocked by firewall. For this reason I'd use default Count = 1.\r\nCount > 1 could be useful for WAIT scenario: \"ping\" a service until it start and response. This assumes that we stop at first successful connection.\r\nIf we want get a latency we should measure from sending first IP to getting last (connection) IP package.\r\nSince establishing TCP connection is OS level, not application, I thing it makes no sense to measure some successful connections.",
      "created_at": "2019-12-28T17:45:37Z",
      "updated_at": "2019-12-28T17:45:37Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov I suppose I was just thinking it would probably make the most sense for users if both tests behaved somewhat similarly on the surface. But you're right, different protocol, different rules.\r\n\r\nSo we should make it clear in our documentation that the default for `-TcpPort` tests is one connection, but still allow the use of `-Count $number` or `-Repeat` options for users to make more extensive tests as they need, as well as `-Quiet` if needed.",
      "created_at": "2019-12-28T18:38:21Z",
      "updated_at": "2019-12-28T18:38:21Z"
    },
    {
      "author": "jackdcasey",
      "author_association": "CONTRIBUTOR",
      "body": "I think this is an awesome idea! It makes sense to have the default behaviour be a single test, with added tests added using the `-count` or `-repeat` option.\r\n\r\nI also really like wait scenario you mentioned @iSazonov! In a ton of scenarios we are waiting for services to come online that have icmp totally blocked. Having another reliable option is fantastic!\r\n\r\nI'll make those changes soon, it should be fairly straightforward! ",
      "created_at": "2019-12-28T20:20:22Z",
      "updated_at": "2019-12-28T20:20:22Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "one question for @jackdcasey - is the 'latency' a one way measurement, or RTT time? If the latter, would the property be better named 'RTT' or 'RTTTime'?",
      "created_at": "2019-12-28T20:26:22Z",
      "updated_at": "2019-12-28T20:26:22Z"
    },
    {
      "author": "jackdcasey",
      "author_association": "CONTRIBUTOR",
      "body": "It's measuring the time taken to establish the connection, I reckon measurement of the syn-ack-synack would err on the RTT side. I'd be happy to give a more descriptive label. \r\n\r\nI wasn't super familiar with the acronym RTT, and had to look it up \ud83d\ude02. How would you feel about RoundTripTime as the label? ",
      "created_at": "2019-12-28T21:53:46Z",
      "updated_at": "2019-12-28T21:53:46Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I'm not opposed to it, but I will mention that having such a long column name doesn't look very nice in the table formats. Lot of whitespace in the table with a header name that long, and generally maybe 2-3 characters in a given cell in the column.\r\n\r\nThat's one of the reasons I chose the name `Latency` in the `PingStatus` and `TraceStatus` outputs over `RoundtripTime` (which is, from memory, what the actual underlying property on a `PingReply` object is in .NET Core). I would probably err on the side of consistency there and keep the same name, unless there's a need for a different name here. ",
      "created_at": "2019-12-28T22:34:11Z",
      "updated_at": "2019-12-28T22:35:33Z"
    },
    {
      "author": "jackdcasey",
      "author_association": "CONTRIBUTOR",
      "body": "I agree, keeping it labeled as `Latency` may be the best option. Consistency between tests may be nice to have. A nice compromise may be to specify these details in the documentation. What do you guys think about this? ",
      "created_at": "2019-12-29T04:52:12Z",
      "updated_at": "2019-12-29T04:52:26Z"
    },
    {
      "author": "jackdcasey",
      "author_association": "CONTRIBUTOR",
      "body": "I've made the changes mentioned above. By default, the tcp test will only run once, unless specified with `-count` or `-repeat`. Here are some sample outputs:\r\n```\r\nTest-Connection google.com -tcpport 443\r\n\r\n   Destination: google.com\r\n\r\nTest Source           Destination      DestinationAddress    Port Latency Result\r\n                                                                     (ms)\r\n---- ------           -----------      ------------------    ---- ------- ------\r\n   1 Jacks-MBP        google.com       172.217.3.174          443      15 Success\r\n```\r\n```\r\nTest-Connection google.com -tcpport 443 -count 4\r\n\r\n   Destination: google.com\r\n\r\nTest Source           Destination      DestinationAddress    Port Latency Result\r\n                                                                     (ms)\r\n---- ------           -----------      ------------------    ---- ------- ------\r\n   1 Jacks-MBP        google.com       172.217.3.174          443      13 Success\r\n   2 Jacks-MBP        google.com       172.217.3.174          443      10 Success\r\n   3 Jacks-MBP        google.com       172.217.3.174          443      16 Success\r\n   4 Jacks-MBP        google.com       172.217.3.174          443      16 Success\r\n```\r\n```\r\nTest-Connection google.com -tcpport 443 -repeat \r\n\r\n   Destination: google.com\r\n\r\nTest Source           Destination      DestinationAddress    Port Latency Result\r\n                                                                     (ms)\r\n---- ------           -----------      ------------------    ---- ------- ------\r\n   1 Jacks-MBP        google.com       172.217.3.174          443      15 Success\r\n   2 Jacks-MBP        google.com       172.217.3.174          443      15 Success\r\n   3 Jacks-MBP        google.com       172.217.3.174          443      10 Success\r\n   4 Jacks-MBP        google.com       172.217.3.174          443      16 Success\r\n   5 Jacks-MBP        google.com       172.217.3.174          443      16 Success\r\n   6 Jacks-MBP        google.com       172.217.3.174          443      15 Success\r\n   7 Jacks-MBP        google.com       172.217.3.174          443      18 Success\r\n   8 Jacks-MBP        google.com       172.217.3.174          443      16 Success\r\n   9 Jacks-MBP        google.com       172.217.3.174          443      16 Success\r\n  10 Jacks-MBP        google.com       172.217.3.174          443      17 Success\r\n   ...\r\n```\r\nLet me know if this matches what you guys had in mind! ",
      "created_at": "2019-12-29T06:20:59Z",
      "updated_at": "2019-12-29T06:20:59Z"
    },
    {
      "author": "jackdcasey",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov To play with the wait scenario you mentioned earlier, I ran a `-repeat` tcp test against a web server, while rebooting it. The results were pretty neat! \r\n```\r\nTest-Connection jacktest.com -tcpport 443 -repeat        \r\n\r\n   Destination: jacktest.com\r\n\r\nTest Source           Destination      DestinationAddress    Port Latency Result\r\n                                                                     (ms)\r\n---- ------           -----------      ------------------    ---- ------- ------\r\n\r\n~ omitted ~\r\n\r\n  35 Jacks-MBP        jacktest.com     35.233.210.37          443      15 Success\r\n  36 Jacks-MBP        jacktest.com     35.233.210.37          443      16 Success\r\n  37 Jacks-MBP        jacktest.com     35.233.210.37          443      23 Success\r\n  38 Jacks-MBP        jacktest.com     35.233.210.37          443       0 Failed\r\n  39 Jacks-MBP        jacktest.com     35.233.210.37          443       0 Failed\r\n  40 Jacks-MBP        jacktest.com     35.233.210.37          443       0 Failed\r\n  41 Jacks-MBP        jacktest.com     35.233.210.37          443       0 Timeout\r\n  42 Jacks-MBP        jacktest.com     35.233.210.37          443       0 Timeout\r\n  43 Jacks-MBP        jacktest.com     35.233.210.37          443       0 Timeout\r\n  44 Jacks-MBP        jacktest.com     35.233.210.37          443       0 Timeout\r\n  45 Jacks-MBP        jacktest.com     35.233.210.37          443       0 Failed\r\n  46 Jacks-MBP        jacktest.com     35.233.210.37          443       0 Failed\r\n  47 Jacks-MBP        jacktest.com     35.233.210.37          443       0 Failed\r\n  48 Jacks-MBP        jacktest.com     35.233.210.37          443       0 Failed\r\n  49 Jacks-MBP        jacktest.com     35.233.210.37          443      23 Success\r\n  50 Jacks-MBP        jacktest.com     35.233.210.37          443      21 Success\r\n  51 Jacks-MBP        jacktest.com     35.233.210.37          443      21 Success\r\n  52 Jacks-MBP        jacktest.com     35.233.210.37          443      15 Success\r\n```\r\nI will definitely use this in the future when waiting for a server to come up! ",
      "created_at": "2019-12-29T06:31:37Z",
      "updated_at": "2019-12-29T06:31:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@jackdcasey I'd prefer to keep a PR as small as possible for fast review and merge. So please start with implementing only \"default Count = 1 for TCPPort\". The scenario could be in 7.0 GA I hope. In follow PRs we could address other scenarios.",
      "created_at": "2019-12-29T07:00:57Z",
      "updated_at": "2019-12-29T07:02:03Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov I have my doubts that any of this will make it in for 7.0 GA at this point in time... but yeah, keeping it short and sweet will give it the best shot.\r\n\r\n@jackdcasey looks awesome, nice work!",
      "created_at": "2019-12-29T07:11:09Z",
      "updated_at": "2019-12-29T07:11:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I have my doubts\r\n\r\nLater this will be a breaking change _after_ 7.0 release but now - before 7.0.",
      "created_at": "2019-12-29T07:15:47Z",
      "updated_at": "2019-12-29T07:15:47Z"
    },
    {
      "author": "jackdcasey",
      "author_association": "CONTRIBUTOR",
      "body": "I see what you mean! I'll try to boil things down to just the necessary changes so far. The biggest change was the output formatting, most of the other features were already part of the command with some small tweaks.\r\n\r\nI'll get that done, and submit the request, unless you guys have any other suggestions \ud83d\ude01\r\n\r\nAppreciate all the insight! ",
      "created_at": "2019-12-29T07:28:08Z",
      "updated_at": "2019-12-29T07:28:08Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "> It's measuring the time taken to establish the connection, I reckon measurement of the syn-ack-synack would err on the RTT side. I'd be happy to give a more descriptive label.\r\n> \r\n> I wasn't super familiar with the acronym RTT, and had to look it up \ud83d\ude02. How would you feel about RoundTripTime as the label?\r\n\r\nSeems to me that anyone serious about networks and using Test-Connection probably knows what RTT is! :-) ANd it's fewer characters!\r\n",
      "created_at": "2019-12-29T10:45:02Z",
      "updated_at": "2019-12-29T10:45:02Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@doctordns you're not wrong, but in general I think it best to avoid abbreviations there. Abbreviations tend to be hard to Google for those who don't already know them. ^^",
      "created_at": "2019-12-29T16:34:21Z",
      "updated_at": "2019-12-29T16:34:21Z"
    },
    {
      "author": "copdips",
      "author_association": "NONE",
      "body": "@jackdcasey \r\n\r\nI cannot wait to see this can be released, love it.\r\nJust a little suggestion, maybe in the future, people will add the feature to test the UDP port. so the column name `Port` in the output might be not precise enough.\r\nThe parameter name is `-TcpPort`, why not use the same name ?\r\nOr two columns: `Port` and `Protocol`\r\n",
      "created_at": "2019-12-31T21:41:57Z",
      "updated_at": "2019-12-31T21:41:57Z"
    },
    {
      "author": "jackdcasey",
      "author_association": "CONTRIBUTOR",
      "body": "@copdips I think the ability to test udp ports would be awesome! \r\n\r\nHowever as udp is a bit more fire-and-forget compared with tcp, this may be difficult to implement. I've done a bit of research, many methods I've found used to test UDP ports are a bit less reliable. \r\n\r\nI'm trying to keep the scope on this one as minimal as possible, however would be more than excited to play with that idea in the future! \ud83d\ude01",
      "created_at": "2020-01-01T23:00:34Z",
      "updated_at": "2020-01-01T23:00:34Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "@jackdcasey any sort of UDP test would be near impossible. If an app sends a server a UDP datagram, many (most?) services do not return a response.  And the few that do return a response are not consistent. \r\n\r\nYou could hard code a few special cases (eg DNS, NFS. and maybe a few more) where you know what the service would do if you sent it an appropriate UDP 'command'. You could even add a -**CommonUDPPort** parameter (to mirror the **-CommonTCPPort** parameter in **Test-NetConnection**), and create specific tests for DNS, etc.\r\n\r\nWith DNS, for example, send the target server a query for foo.local, and time the NXDomain response. Report back how long the return took.  You could do something similar for NTP (Network Time Protocol), BOOTP/DHCP. NNP (Network News Protocol), and maybe even Quote of the day protocol., TFTP, RTSP, RIP, and OSPF. It's been a while since I studied these protocols, but some of these could be tested/measured using carefully constructed UDP packets that return a specific expected response. \r\n\r\nNot sure it's worth it, but testing UDP services like this would be very cool. Testing UDP has never been easy! :-)\r\n",
      "created_at": "2020-01-02T12:18:49Z",
      "updated_at": "2020-01-02T12:18:49Z"
    },
    {
      "author": "jackdcasey",
      "author_association": "CONTRIBUTOR",
      "body": "Hey guys, just commenting here too see if there's still any interest in this! \r\n\r\nI have PR #11452 still open, and haven't been able to get much traction \ud83d\ude04 ",
      "created_at": "2020-11-09T06:07:06Z",
      "updated_at": "2020-11-09T06:07:06Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We expect 7.1 release in weeks and after that I hope MSFT team will have a time to review community PRs.",
      "created_at": "2020-11-09T09:40:38Z",
      "updated_at": "2020-11-09T09:40:38Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "I'd love to see this PR make it into 7.2, if only as an wxoerime feature.",
      "created_at": "2020-11-09T10:39:27Z",
      "updated_at": "2020-11-09T10:39:27Z"
    }
  ],
  "created_at": "2019-12-27T05:27:36Z",
  "number": 11440,
  "state": "open",
  "title": "Increase output detail of Test-Connection when performing a tcp connection test ",
  "updated_at": "2020-11-09T10:39:27Z"
}