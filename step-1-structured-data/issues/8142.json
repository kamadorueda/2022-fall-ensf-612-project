{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8142",
  "author": "rjmholt",
  "body": "## PR Summary\r\n\r\nFixes https://github.com/PowerShell/PowerShell/issues/8125.\r\n\r\nTakes out the optimisation to skip directories named like cultures when listing modules. If we have a better way to preserve some of the performance benefits, I can happily implement!\r\n\r\nAlso generalised some of the test code a bit. Realised afterward that it wasn't as helpful as I thought, but it's done now at least. Commits are separate, so that can be dumped if we want.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed - Issue link:\r\n- **Testing - New and feature**\r\n    - [ ] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [x] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n\r\nI haven't marked \"Not Breaking\" yet, since technically this is a change in outward behaviour. But I don't think this behaviour is documented and I doubt anyone knew about it let alone relied upon it. But want to leave that judgement for others to decide.",
  "closed_at": "2018-12-19T19:17:17Z",
  "comments": [
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "Restarted `PowerShell-CI-linux` & `PowerShell-CI-macos` test runs.",
      "created_at": "2018-10-29T20:50:14Z",
      "updated_at": "2018-10-29T20:50:14Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@rjmholt can you do a perf test on Windows to see if there's any noticeable degradation?",
      "created_at": "2018-10-29T20:50:40Z",
      "updated_at": "2018-10-29T20:50:40Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "IIRC, this was pretty important for performance. The culture directories sometimes have a bunch of `psd1` files which we analyze as a module manifest and bail when we realize they aren't.\r\n\r\nSome options I can think of\r\n1. Check the folder depth first, skipping the culture check only for folders immediately below a path in PSModulePath.\r\n1. Process culture folders, but cache the \"failure\" somehow - messy and not helpful for first ever start, e.g. in a container\r\n1. Whitelist `az`\r\n1. Rename the `az` module\r\n\r\nI'm curious, does the `az` module have localized resources for the `az` culture? It'd be good to test that works as well.",
      "created_at": "2018-10-30T01:46:11Z",
      "updated_at": "2018-10-30T01:46:11Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@lzybkr renaming the `Az` module isn't really an option.  Whitelisting may be best option now since it's the only instance we're aware of and a highly used module.",
      "created_at": "2018-10-30T03:21:51Z",
      "updated_at": "2018-10-30T03:21:51Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Given the commonality of the `Az` module I wouldn't be surprised if someone else creates a module with a similarly-styled name, if one or more doesn't already exist. Folks tend to copy anything with any kind of an 'official' stamp on it, after all.\n\nWhitelisting may be the simplest option for now, but unless we want to *forbid* future modules with such short names / folder names, is there a more elegant and generalisable solution available?",
      "created_at": "2018-10-30T04:13:24Z",
      "updated_at": "2018-10-30T04:13:48Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Noted about the perf.\r\n\r\nTwo lines of questioning so I can try and understand the general problem better:\r\n- Why does this \"lots of culture dirs on the module path\" phenomenon occur? Is it a specific other scenario/application that's using them? Why do they contain `psd1` files (and are they not PowerShell manifests)? Is any of this written up or coded anywhere?\r\n- Is there an example anyone has of such a directory that has both modules and culture dirs I could look at?",
      "created_at": "2018-10-30T05:16:04Z",
      "updated_at": "2018-10-30T05:16:04Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Does this just affect autoloading?\r\n\r\nAnd what servicing 5.1?",
      "created_at": "2018-10-30T05:43:15Z",
      "updated_at": "2018-10-30T05:43:15Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@lzybkr I don't believe this qualifies to service 5.1.  The Az module is still loaded and works, this only affects listing the loaded modules.",
      "created_at": "2018-10-30T05:48:19Z",
      "updated_at": "2018-10-30T05:48:19Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr The issue seems to be with `Get-Module -ListAvailable` (see https://github.com/Azure/azure-powershell/issues/7563), although I wouldn't be surprised if that meant there are issues elsewhere.",
      "created_at": "2018-10-30T05:50:09Z",
      "updated_at": "2018-10-30T05:50:09Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "It is unlikely I would have added that code to make `Get-Module -ListAvailable` faster, I was focused on first ever PowerShell startup when that code was written.\r\n\r\nI'm pretty sure that code is called during module analysis for module auto-loading.",
      "created_at": "2018-10-30T19:48:57Z",
      "updated_at": "2018-10-30T19:48:57Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Ok, I'm personally leaning toward whitelisting just `Az` at the moment, although I'm not a huge fan of hardcoding it.",
      "created_at": "2018-10-30T20:22:29Z",
      "updated_at": "2018-10-30T20:22:29Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "I've implemented a whitelist. I've left a note on the whitelist describing a workaround for other modules in future if needed.",
      "created_at": "2018-10-31T02:53:44Z",
      "updated_at": "2018-10-31T02:53:44Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@rjmholt  Please have a look at CodeFactor issue.",
      "created_at": "2018-10-31T16:59:03Z",
      "updated_at": "2018-10-31T16:59:03Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "Restarted CI to pick up build failure test fix.",
      "created_at": "2018-10-31T16:59:40Z",
      "updated_at": "2018-10-31T16:59:51Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Code Factor issues are from the `s_` in `private static readonly HashSet<string> s_whitelist` -- was under the impression this is our standard convention?",
      "created_at": "2018-10-31T17:26:35Z",
      "updated_at": "2018-10-31T17:26:35Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "The `s_` prefix was introduced when running the Roslyn code formatter and it seems to still be used heavily, so I'm not sure why Code Factor wins out on this one.",
      "created_at": "2018-10-31T21:21:35Z",
      "updated_at": "2018-10-31T21:21:35Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "I also like (*prefer*) `s_`. I find it very informative, we use it everywhere, and it meshes nicely with `_` for non-static Private.",
      "created_at": "2018-10-31T22:31:33Z",
      "updated_at": "2018-10-31T22:31:33Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Maybe we ought to add a StyleCop exemption for this sort of thing? I've run into it before as well.",
      "created_at": "2018-10-31T23:46:21Z",
      "updated_at": "2018-10-31T23:46:21Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I believe CodeFactor is using the [StyleCop](https://github.com/PowerShell/PowerShell/blob/53e6ec6eadc2f363fc671e96b34ade4dda3fe8eb/Settings.StyleCop) rules we've set.  I'm ok with changing the rules to allow for `s_`.  My main desire is to have consistency so if most of the code is using `s_` we should adopt that.",
      "created_at": "2018-11-01T03:06:17Z",
      "updated_at": "2018-11-01T03:06:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@rjmholt Please use `s_` and we'll look which rules we should fix. ",
      "created_at": "2018-11-01T06:45:54Z",
      "updated_at": "2018-11-01T06:45:54Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Thanks @iSazonov!",
      "created_at": "2018-11-02T17:41:40Z",
      "updated_at": "2018-11-02T17:41:40Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "Restarted appveyor test pass for WebListener failure.",
      "created_at": "2018-11-02T20:33:38Z",
      "updated_at": "2018-11-02T20:33:38Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Only remaining checks are the CodeFactor rules we agreed to ignore.",
      "created_at": "2018-11-05T22:09:57Z",
      "updated_at": "2018-11-05T22:09:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Because of we do `new CultureInfo(dir)`  my suggestion is to use on-demand cache for GetCultureInfo() (we could reuse it in Get-Culture cmdlet and vise versa) and then build a HashSet for culture names.  \r\n\r\n@mklement0 Could you please look the PR? Again cultureinfo is here :-)",
      "created_at": "2018-11-06T06:15:24Z",
      "updated_at": "2018-11-06T06:15:24Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "Sorry but this is an absolutely atrocious Idea and IMO should not be merged.\r\n\r\nPlease stop putting bandaids around actual problems that will then lead to further issues down the line.\r\n\r\nAt the end of the day the AzureRM PowerShell team found this issue with their wise minds to change their module name in the first place, and is inherently their issue, and whilst this issue affects any module with 2 chars for the name this is not the correct long term fix to implement\r\n\r\n\r\n@lzybkr first suggestion is a much better suggestion for the longer term and that should be the one that is favoured especially for those that may want an `IT` Module or an `EN` module in future.\r\n",
      "created_at": "2018-11-06T11:21:37Z",
      "updated_at": "2018-11-06T11:21:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If  AzureRM PowerShell team is ready to rename the module the issue is converted to Docs issue - we should document that module names can not match culture names.",
      "created_at": "2018-11-06T12:25:59Z",
      "updated_at": "2018-11-06T12:25:59Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "In case it wasn't clear, my list was ordered by my preference.",
      "created_at": "2018-11-06T15:58:28Z",
      "updated_at": "2018-11-06T15:58:28Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Ok, I'll see if I can rework this to account for depth. The problem I imagine might occur there is with nested modules, particularly in `Get-Module -ListAvailable -All`.\r\n\r\nThe caching idea doesn't help the performance scenario this optimisation was introduced to help I don't think, so going that route would mean a fair amount of complexity to do something slightly better than just removing the optimisation.\r\n\r\nThe whitelist option at least means you can always fix the problem by adding to the whitelist. In this situation, everything is a bandaid, but only one of the solutions is an expandable bandaid. The reality is that it took years before anybody hit this and even after the Az module was published it took some time for anyone to notice. But I agree that it's far from ideal.\r\n\r\n@kilasuit FWIW putting your criticism more constructively would be appreciated. Comments in these repos can get heated, and seeing them every day they can start to add up.",
      "created_at": "2018-11-06T17:09:15Z",
      "updated_at": "2018-11-06T17:22:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@rjmholt Why you think that culture name caching doesn't help?\r\nPlease look all culture name formats with `[cultureinfo]::GetCultures(0xf)`. There is names like `sr-Latn-RS`, `sms-FI`, `vo-001`, `zgh`. Seems a cache would be more simple and faster then a parser or regex.",
      "created_at": "2018-11-06T17:41:14Z",
      "updated_at": "2018-11-06T17:41:14Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "The caching only comes *after* a module has determined to be a module. At first run, you have to read *every* directory and only add them to the cache if they are both (1) a module and (2) a culture name. \r\n\r\nThe cache will slow down first startup and speed up later runs. But the whole culture name skip optimisation was made to improve startup time. So going the cache route will undo the original optimisation scenario.\r\n\r\nThere's nothing wrong with the idea though -- it's probably worth adding.",
      "created_at": "2018-11-06T18:02:53Z",
      "updated_at": "2018-11-06T18:02:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "My suggestion is to filter directories here https://github.com/PowerShell/PowerShell/blob/4f8814031bf7c4c13bf04c376565a077ca9be2fd/src/System.Management.Automation/engine/Modules/ModuleUtils.cs#L90\r\nAlso we could use predefined culture name list (without call GetCultures() at start time because the list is changed rarely.\r\nAnd we could use DirectoryInfo/FileInfo classes to exclude extra kernel calls if we want increase startup performance.",
      "created_at": "2018-11-07T03:28:42Z",
      "updated_at": "2018-11-07T03:28:42Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@rjmholt Please resolve merge conflict.",
      "created_at": "2018-11-12T19:10:25Z",
      "updated_at": "2018-11-12T19:10:25Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "It should be very rare for a locale folder, such as `en-us`, to contains a resource `psd1` file named `en-us.psd1`. A resource `psd1` file usually is named as `xxx.Resource.psd1` or `xxx.Resources.psd1` file. So I think we can follow the checking rules for an ordinary folder -- for folder `en-us`, if there is none of `en-us\\en-us.psd1`, `en-us\\en-us.psm1`, `en-us\\en-us.dll` (etc.) exists, then it's not considered as a module folder.",
      "created_at": "2018-11-13T02:09:07Z",
      "updated_at": "2018-11-13T02:09:07Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@daxian-dbw - that could still require enumerating many files which isn't always fast. I think the depth check is perfectly reasonable.\r\n\r\n",
      "created_at": "2018-11-13T17:24:31Z",
      "updated_at": "2018-11-13T17:24:31Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> that could still require enumerating many files which isn't always fast.\r\n\r\n@lzybkr Totally agree.\r\n@rjmholt's concern on the depth check is when `-All` is specified. In that case, we want to find all modules nested in a module folder, where we will need to check the `az` folder under a module folder, and the depth check is not sufficient anymore. I admit that `-All` is not commonly used, but since we want to have a general fix, I guess we need to take that switch into account as well.",
      "created_at": "2018-11-13T17:34:48Z",
      "updated_at": "2018-11-13T17:34:48Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Does `-All` even work? I tried it in Windows PowerShell saw no results for as long as I was willing to wait.",
      "created_at": "2018-11-13T17:57:21Z",
      "updated_at": "2018-11-13T17:57:21Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yep. \r\n\r\nTakes about 1.5x as long as PowerShell 6.1, but Windows PowerShell does work. Both of them successfully listed all modules with `Get-Module -List -All`",
      "created_at": "2018-11-13T18:31:10Z",
      "updated_at": "2018-11-13T18:31:10Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "To perhaps offer a solution for future modules:\r\n\r\nWe could add support for placing localization folders in a dedicated subfolder of a module's root folder with a then-reserved name (the introduction of which can in itself be problematic), such as `Resources`.\r\n\r\nModules written for that new convention then wouldn't have the ambiguity problem, and the presence of the reserved folder would mean that everything else can assumed to be non-localization folders.\r\n\r\nIf there are concerns about folder-hierarchy depth / path length, the suboptimal alternative would be a reserved folder-name extension, the way that macOS uses `.lproj`, for instance (though the `.app` bundles there _also_ use a `Resources` subfolder).\r\n\r\n",
      "created_at": "2018-11-13T19:12:44Z",
      "updated_at": "2018-11-13T19:12:44Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 +1 on dedicated folder (or a manifest configuration to avoid being opinionated, but that's a backcompat breaker I suppose). A similar implementation detail to this one [lead to dotfiles on UNIX](https://plus.google.com/+RobPikeTheHuman/posts/R58WgWwN9jp) and the official solution is to have a [standard directory/location for those files](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html).",
      "created_at": "2018-11-13T19:18:01Z",
      "updated_at": "2018-11-13T19:18:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I see that _CoreFX_ files is placed in locale folders. Currently it is Microsoft.CodeAnalysis*.\r\n",
      "created_at": "2018-11-14T04:56:39Z",
      "updated_at": "2018-11-14T04:56:39Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@rjmholt Please have a look at the merge conflict.",
      "created_at": "2018-11-28T18:57:32Z",
      "updated_at": "2018-11-28T18:57:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@rjmholt Could you indicate the reason for closing?",
      "created_at": "2018-12-20T17:27:33Z",
      "updated_at": "2018-12-20T17:27:33Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> @rjmholt Could you indicate the reason for closing?\r\n\r\nWe haven't settled on an implementation and this branch is stale.\r\n\r\nIt will be easier to open a new PR with a minimal change I think.",
      "created_at": "2018-12-20T19:07:36Z",
      "updated_at": "2018-12-20T19:07:50Z"
    }
  ],
  "created_at": "2018-10-29T18:27:53Z",
  "number": 8142,
  "state": "closed",
  "title": "Whitelist Az module for culture directory skipping",
  "updated_at": "2019-01-17T04:40:54Z"
}