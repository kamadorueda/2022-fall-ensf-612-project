{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13651",
  "author": "jantari",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\n## Steps to reproduce\r\n\r\nIt is very simple:\r\n\r\n```powershell\r\n[Nullable[bool]]$variable = if ($false) { 1 }\r\n```\r\n\r\n## Expected behavior\r\n\r\nIt should just assign `$null` to the variable:\r\n\r\n```powershell\r\nPS> # This doesn't work, it's just for illustration what SHOULD happen\r\nPS> [Nullable[bool]]$variable = if ($false) { 1 }\r\nPS> $variable -eq $null\r\nTrue\r\n```\r\n\r\n## Actual behavior\r\n\r\nThe assignment fails with an error, it's apparently getting a PSCustomObject from somewhere (?) and trying to cast that to a bool.\r\n\r\n```powershell\r\nPS> [Nullable[bool]]$variable = if ($false) { 1 }\r\nMetadataError: Cannot convert value \"System.Management.Automation.PSCustomObject\" to type \"System.Nullable`1[System.Boolean]\". Boolean parameters accept only Boolean values and numbers, such as $True, $False, 1 or 0.\r\n```\r\n\r\nWorth noting however, that these work as expected:\r\n\r\nWith dynamic typing:\r\n\r\n```powershell\r\nPS> $variable = if ($false) { 1 }\r\nPS> $variable -eq $null\r\nTrue\r\n```\r\n\r\nDirectly assigning `NULL` without shenanigans:\r\n\r\n```powershell\r\nPS> [Nullable[bool]]$variable = $null\r\nPS> $variable -eq $null\r\nTrue\r\n```\r\n\r\n## Environment data\r\n\r\nBoth stable and preview PowerShell 7 affected:\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.3\r\nPSEdition                      Core\r\nGitCommitId                    7.0.3\r\nOS                             Microsoft Windows 10.0.20215\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.0-preview.7\r\nPSEdition                      Core\r\nGitCommitId                    7.1.0-preview.7\r\nOS                             Microsoft Windows 10.0.20215\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nPossibly worth noting, Windows PowerShell 5.1 is also affected.",
  "closed_at": "2020-09-19T20:00:07Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "This is _probably_ because assigning the result of `if ($false) { ... }` to anything results in assigning the value from `[System.Management.Automation.Internal.AutomationNull]::Value` to the variable.\r\n\r\nI get the same error doing that directly:\r\n```\r\nPS C:\\Users\\joelp> [nullable[bool]]$var = [System.Management.Automation.Internal.AutomationNull]::Value\r\nMetadataError: Cannot convert value \"System.Management.Automation.PSCustomObject\" to type \"System.Nullable`1[System.Boolean]\". Boolean parameters accept only Boolean values and numbers, such as $True, $False, 1 or 0.\r\n```\r\n\r\nThis is something we should probably handle in the LanguagePrimitives conversion methods; we do checks that treat null and automation null the same, but we should be doing similar when the expected type result is Nullable<bool> that we're probably only doing for just plain bool.",
      "created_at": "2020-09-17T23:01:08Z",
      "updated_at": "2020-09-17T23:01:08Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Indeed,  @vexx32. \r\n\r\nMore generally speaking, the problem is that type-constraining to `[bool]` - whether nullable or not - applies _parameter_ semantics, not _expression_  semantics:\r\n\r\n```powershell\r\n# OK - assigns $true\r\nPS> $var = [bool] 'convert-me-too-bool'\r\n\r\n# !! BREAKS\r\nPS> [bool] $var = 'convert-me-too-bool'\r\n```\r\n\r\nIn other words: this is a duplicate of #10426,\r\n\r\n",
      "created_at": "2020-09-17T23:23:12Z",
      "updated_at": "2020-09-17T23:23:12Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as duplicate and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-09-19T20:00:06Z",
      "updated_at": "2020-09-19T20:00:06Z"
    }
  ],
  "created_at": "2020-09-17T22:20:14Z",
  "labels": [
    "Resolution-Duplicate",
    "Issue-Question"
  ],
  "number": 13651,
  "state": "closed",
  "title": "MetadataError when assigning null to nullable type",
  "updated_at": "2020-09-19T20:00:07Z"
}