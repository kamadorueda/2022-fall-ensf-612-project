{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10973",
  "author": "anmenaga",
  "body": "# PR Summary\r\n\r\nImplementation for ['Importing Windows PowerShell modules in PowerShell Core' RFC](https://github.com/PowerShell/PowerShell-RFC/pull/226).\r\n\r\n* Modules, that are non-compatible with PS Core and were previously generating `PSEditionNotSupported` error, are now loaded into a background Windows PowerShell process connected to PS Core using a `WinPSCompatSession` PS remoting session using redirected process streams transport (same one used by PS jobs).\r\n* Behaviour can be forced using `Import-Module -UseWindowsPowerShell`\r\n* Module autoload during command discovery is supported\r\n* a warning is displayed when a module is loaded into compat Windows PS.\r\n* a new telemetry type is added and reported when a module is loaded into compat Windows PS.\r\n* operations that do not work on de/serialized objects can be done in `WinPSCompatSession` remoting session `$s = Get-PSSession -Name WinPSCompatSession; Invoke-Command -Session $s -ScriptBlock {Get-WinPSLiveObject | Set-WinPSLiveObject}`\r\n* new functionality is under `PSWinCompat` experimental feature.\r\n\r\n\r\nExample:\r\n![WinCompatCapture](https://user-images.githubusercontent.com/11860095/68060097-2f5a2980-fcbc-11e9-9442-034cb0837dd7.png)\r\n\r\n\r\n## PR Context\r\n\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\n\r\n## PR Checklist\r\n\r\n- [X] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [X] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [X] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [X] Experimental feature name(s): `PSWinCompat`\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [X] Documentation needed\r\n        - [X] Issue filed: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/5092\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [X] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [X] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2019-11-18T18:44:56Z",
  "comments": [
    {
      "author": "alexbuzzbee",
      "author_association": "NONE",
      "body": "This PR might impact tooling, because it might be necessary to debug a module imported via compat.",
      "created_at": "2019-11-02T02:17:24Z",
      "updated_at": "2019-11-02T02:17:24Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> $s = Get-PSSession -Name WinPSCompatSession; Invoke-Command -Session $s -ScriptBlock {Get-WinPSLiveObject | Set-WinPSLiveObject}\r\n\r\nGiven that this is to be a builtin feature, the user experience might be better if encapsulated:\r\n\r\n```powershell\r\nInvoke-InWinPSCompatibilitySession { Get-WinPSLiveObject | Set-WinPSLiveObject }\r\n```",
      "created_at": "2019-11-02T04:56:01Z",
      "updated_at": "2019-11-02T04:56:01Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> This PR might impact tooling, because it might be necessary to debug a module imported via compat.\r\n\r\n@alexbuzzbee  could you expand on this with an example? What scenario are you envisaging here? Also, it might be best to have this discussion in the RFC.",
      "created_at": "2019-11-02T04:57:10Z",
      "updated_at": "2019-11-02T04:57:10Z"
    },
    {
      "author": "alexbuzzbee",
      "author_association": "NONE",
      "body": "Say you have a script module that was written as Windows-specific (because it uses Windows P/Invokes, COM, or Windows-specific .NET APIs), but need to use it in a modern script. A problem is happening inside the Windows-specific module. You need to debug inside it, so the debugging tools need to be able to see and work inside the Windows PowerShell compat session.\r\n\r\nYes, it might be possible to reproduce the issue using a Windows PowerShell script instead, but that would usually be significantly more effort than just debugging the module.\r\n\r\nIt might be correct that this should go in the RFC; I was just going off the tooling checkboxes and noted that they might not be accurately filled.",
      "created_at": "2019-11-04T01:50:52Z",
      "updated_at": "2019-11-04T01:50:52Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "@alexbuzzbee Do these examples fall into scenario that you describe?\r\n\r\nDebugging from the same PS process:\r\n![Dbg1](https://user-images.githubusercontent.com/11860095/68157363-5b66ec00-ff02-11e9-85fc-0e0141804130.png)\r\n\r\nDebugging from another PS process:\r\n![Dbg2](https://user-images.githubusercontent.com/11860095/68157117-e4315800-ff01-11e9-97f2-85a75efbc89a.png)\r\n",
      "created_at": "2019-11-04T20:56:58Z",
      "updated_at": "2019-11-04T20:56:58Z"
    },
    {
      "author": "alexbuzzbee",
      "author_association": "NONE",
      "body": "@anmenaga All I was trying to point out is that the \"I have considered the user experience from a tooling perspective and enumerated concerns in the summary\" box should probably be checked instead of \"I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\"",
      "created_at": "2019-11-05T13:11:15Z",
      "updated_at": "2019-11-05T13:11:15Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@anmenaga Is this PR ready for review? If so, please remove the `WIP:` prefix from the title so we can pull in more reviewers.",
      "created_at": "2019-11-06T18:24:55Z",
      "updated_at": "2019-11-06T18:24:55Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@anmenaga Can you please resolve the conflict, again :)",
      "created_at": "2019-11-16T01:30:20Z",
      "updated_at": "2019-11-16T01:30:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Great work @anmenaga !",
      "created_at": "2019-11-19T04:20:18Z",
      "updated_at": "2019-11-19T04:20:18Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.0.0-preview.6` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.6)\n",
      "created_at": "2019-11-21T22:35:56Z",
      "updated_at": "2019-11-21T22:35:56Z"
    }
  ],
  "created_at": "2019-11-01T22:31:14Z",
  "number": 10973,
  "state": "closed",
  "title": "Importing Windows PowerShell modules in PowerShell Core",
  "updated_at": "2019-11-21T22:35:57Z"
}