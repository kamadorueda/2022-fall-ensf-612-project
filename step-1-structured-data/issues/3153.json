{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3153",
  "author": "mklement0",
  "body": "Steps to reproduce\r\n------------------\r\n\r\n```powershell\r\n'[ 1, 2 ]' | ConvertFrom-Json | ConvertTo-Json\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```\r\n[\r\n    1,\r\n    2\r\n]\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```\r\n{\r\n    \"value\":  [\r\n                  1,\r\n                  2\r\n              ],\r\n    \"Count\":  2\r\n}\r\n```\r\n\r\nI believe the root cause is that `ConvertFrom-Json` sends arrays _as a whole_ through the pipeline instead of unwrapping them.\r\n\r\nAnalysis, more examples, and workaround here: http://stackoverflow.com/a/38212718/45375\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nPowerShell v6.0.0-alpha (v6.0.0-alpha.15) on Darwin Kernel Version 16.4.0: Thu Dec 22 22:53:21 PST 2016; root:xnu-3789.41.3~3/RELEASE_X86_64\r\nPowerShell v5.1.14393.693 on Microsoft Windows 10 Pro (64-bit; v10.0.14393)\r\n```\r\n",
  "closed_at": "2017-03-16T18:45:46Z",
  "comments": [
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "Workaround: `Remove-TypeData -TypeName System.Array`.",
      "created_at": "2017-02-26T21:11:07Z",
      "updated_at": "2017-02-26T21:11:07Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Fixed in alpha.17 via #3231",
      "created_at": "2017-03-16T18:45:46Z",
      "updated_at": "2017-03-16T19:36:58Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT: The example in this bug report now works as intended in alpha.17, but ` ConvertFrom-Json` still unexpectedly sends an output array _as a whole_ through the pipeline:\r\n\r\n```powershell\r\n> '[ 1, 2 ]' | ConvertFrom-Json | % GetType | % Name\r\nObject[]\r\n```\r\nContrast this with a regular array:\r\n\r\n```powershell\r\n> 1, 2 | % GetType | % Name\r\nInt32\r\nInt32\r\n```\r\n\r\n\r\n",
      "created_at": "2017-03-16T19:50:27Z",
      "updated_at": "2017-03-16T19:50:27Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 can you open a new issue?  thanks!",
      "created_at": "2017-03-16T19:57:05Z",
      "updated_at": "2017-03-16T19:57:05Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "@mklement0\r\nShould\r\n```powershell\r\n'[ 1 ]' | ConvertFrom-Json | ConvertTo-Json\r\n```\r\nreturn `[ 1 ]`?",
      "created_at": "2017-03-16T20:04:00Z",
      "updated_at": "2017-03-16T20:04:00Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@PetSerAl: It's a fair point - if you unwrap the array, information is lost. \r\n\r\nBut that equally applies to:\r\n\r\n```powershell\r\n, 1 | ForEach-Object { $_ }  # or even:  , 1 | ForEach-Object { , $_ }\r\n```\r\n\r\nSo it's weighing PowerShell's normal collection handling against preserving information about the input.\r\n\r\nPerhaps if no one ever notices _in practice_ that the collection is passed _as a whole_, the alpha.17 behavior is fine.\r\n\r\nNot sure what the right answer is.\r\n\r\n@SteveL-MSFT: Thanks; I will, once I have clarity over whether that's indeed a problem.",
      "created_at": "2017-03-16T20:50:09Z",
      "updated_at": "2017-03-16T21:35:45Z"
    },
    {
      "author": "JohnLBevan",
      "author_association": "NONE",
      "body": "NB: Noticed this in practice... passing the output of `ConvertFrom-Json` down the pipeline to a function with arguments `ValueFromPipelineByPropertyName` gives error `The input object cannot be bound to any parameters for the command either because the command does not take pipeline input or the input and its properties do not match any of the parameters that take pipeline input`.\r\n\r\n@PetSerAl's comment is valid though; so perhaps a switch is required `-UnwrapCollection` to select preferred behaviour at runtime?",
      "created_at": "2018-02-15T16:52:31Z",
      "updated_at": "2018-02-15T16:52:31Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@JohnLBevan: Let's continue the conversation at #3424, which is still open (and where you've previously commented too ).\r\n\r\nIn short, my suggestion is to make `ConvertFrom-Json`'s behavior PowerShell-friendly _by default_ (by _unwrapping, as usual_), while giving users the ability to opt into array-as-single-output-object behavior with `-NoEnumerate`, if needed.\r\n\r\nThus, the above example would become:\r\n\r\n    '[ 1 ]' | ConvertFrom-Json -NoEnumerate | ConvertTo-Json\r\n\r\n\r\n",
      "created_at": "2018-02-17T18:25:56Z",
      "updated_at": "2018-02-17T18:25:56Z"
    }
  ],
  "created_at": "2017-02-15T16:09:22Z",
  "number": 3153,
  "state": "closed",
  "title": "ConvertFrom-Json doesn't unwrap arrays on output, resulting in an extraneous wrapper JSON object with `Count` and `Value` properties on reconversion",
  "updated_at": "2018-02-17T18:25:57Z"
}