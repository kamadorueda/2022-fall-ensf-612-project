{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9381",
  "author": "kvdw",
  "body": "For a project I'm trying to parse data from an API. I've been struggling with strange behavior from Invoke-RestMethod.\r\nWhen you want to filter right away, the where-object doesn't work. During troubleshooting I found a strange occurrence when using Invoke-RestMethod, it doesn't always return a powershell object. You can 'fix' it in your code by using round brackets, or putting the data in a variable.\r\n\r\n\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n(Invoke-RestMethod https://jsonplaceholder.typicode.com/users) | gm\r\n-> returns pscustomobject\r\n\r\n$a = Invoke-RestMethod https://jsonplaceholder.typicode.com/users\r\n$a | gm\r\n-> returns pscustomobject\r\n\r\n Invoke-RestMethod https://jsonplaceholder.typicode.com/users | gm\r\n-> returns system.object[] -> WRONG\r\n```\r\n\r\n# Expected behavior\r\n\r\n```powershell\r\n Invoke-RestMethod https://jsonplaceholder.typicode.com/users | gm\r\nshould return a pscustomobject, instead of a system.object[]\r\n\r\n```\r\n\r\n# Actual behavior\r\n\r\n\r\nIf you don't use rounded brackets or put the output in a variable first, you get a system.object[], which you cannot use to filter with f.e. where-object.\r\n\r\nI've also found out this only happens when the results of the API is an array of json objects, if you use f.e. endpoint https://jsonplaceholder.typicode.com/posts/1 , all 3 examples below all give a pscustomobject back\r\n\r\nI don't have access to another PC with PSCore, so I cannot confirm if it's on other platforms besides Windows Server 2019\r\n\r\n# Environment data\r\n\r\n```\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.0\r\nPSEdition                      Core\r\nGitCommitId                    6.2.0\r\nOS                             Microsoft Windows 10.0.17763 (= Windows 2019)\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0..}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2019-04-16T14:33:05Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "This is intentional behaviour, as @markekraus describes in his [blog post](https://get-powershellblog.blogspot.com/2018/06/why-invoke-restmethod-and-convertfrom.html) on the subject. Essentially, it's to preserve the nature of the response object in as close-to-the-actual-object form as possible, because in JSON requests whether or not the object is wrapped in an outer array _is_ often important (unlike PowerShell).\r\n\r\nAs mentioned in the blog post, you can simply pipe through a `ForEach-Object {$_}` statement to force the collection to be unrolled every time.\r\n\r\nThis _is_ slated to be changed, per the committee's decision in #3424, but it's pending a full RFC write up and process before we can do any code changes. And, at present, it doesn't seem like anyone has full agreement on exactly how this should be handled through downstream cmdlets.",
      "created_at": "2019-04-16T14:09:32Z",
      "updated_at": "2019-04-16T14:15:42Z"
    },
    {
      "author": "kvdw",
      "author_association": "NONE",
      "body": "Hi @vexx32 , thank you. I wasn't aware of this issue. Thank you for the information!",
      "created_at": "2019-04-16T14:33:05Z",
      "updated_at": "2019-04-16T14:33:05Z"
    }
  ],
  "created_at": "2019-04-16T13:50:21Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 9381,
  "state": "closed",
  "title": "Invoke-RestMethod wrong return type",
  "updated_at": "2019-05-07T17:08:53Z"
}