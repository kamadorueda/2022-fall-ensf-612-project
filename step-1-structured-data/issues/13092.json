{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13092",
  "author": "spKhan00",
  "body": "I built CoreCLRHost for communication between Java-c++-Dotnet to establish ExchangeOnline session. Followed steps provided from Microsoft docs for sample coreclr host. i got the below exception\r\n```This parameter set requires WSMan, and no supported WSMan client library was found. WSMan is either not installed or unavailable for this system.```\r\n\r\nBased on my understanding we need to include dlls while coreclr_initialize 'TRUSTED_PLATFORM_ASSEMBLIES'. is there any way to include Shared libraries(libpsrpclient.so) as well. i guess that's the cause for this exception.\r\n\r\n## Steps to reproduce\r\n1. published donet library as self-contained\r\n2. c++ shared library to establish connection with dotnetcore\r\n3. used that shared library in java.\r\n\r\n\r\n## Environment data\r\nOS: Centos 7\r\n$PSVersionTable \r\nPSVersion.6.2.4\r\nPSEdition.Core\r\nGitCommitId.6.2.4\r\nOS.Linux 3.10.0-957.21.3.el7.x86_64 #1 SMP Thu Sep 19 19:59:54 IST 2019\r\nPlatform.Unix\r\nPSCompatibleVersions.System.Version[]\r\nPSRemotingProtocolVersion.2.3\r\nSerializationVersion.1.1.0.1\r\nWSManStackVersion.3.0",
  "closed_at": "2021-03-01T18:57:47Z",
  "comments": [
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "I don't have any knowledge on the CoreCLRHost part or even around the Java -> C++ -> .NET interop side but PowerShell itself includes the `libpsrpclient.so` inside it's folder. On Fedora the PowerShell files are at `/opt/microsoft/powershell/7` and I would assume Centos is similar but we can see that the compiled library is there as well as the deps it requires by running this `ldd` command:\r\n\r\n```bash\r\nldd /opt/microsoft/powershell/7/libpsrpclient.so\r\n```\r\n\r\nThis produces the following output on my host\r\n\r\n```text\r\nldd: warning: you do not have execution permission for `/opt/microsoft/powershell/7/libpsrpclient.so'\r\n        linux-vdso.so.1 (0x00007fffd8851000)\r\n        libmi.so => /opt/microsoft/powershell/7/libmi.so (0x00007f987e546000)\r\n        libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f987e504000)\r\n        libc.so.6 => /lib64/libc.so.6 (0x00007f987e33a000)\r\n        libdl.so.2 => /lib64/libdl.so.2 (0x00007f987e333000)\r\n        libpam.so.0 => /lib64/libpam.so.0 (0x00007f987e321000)\r\n        libssl.so.1.0.0 => /opt/microsoft/powershell/7/libssl.so.1.0.0 (0x00007f987e2af000)\r\n        libcrypto.so.1.0.0 => /opt/microsoft/powershell/7/libcrypto.so.1.0.0 (0x00007f987e042000)\r\n        /lib64/ld-linux-x86-64.so.2 (0x00007f987e96b000)\r\n        libaudit.so.1 => /lib64/libaudit.so.1 (0x00007f987e016000)\r\n        libz.so.1 => /lib64/libz.so.1 (0x00007f987dffc000)\r\n        libcap-ng.so.0 => /lib64/libcap-ng.so.0 (0x00007f987dff4000)\r\n```\r\n\r\nWe can see that all the dependencies are installed and present so the library should load properly if it's on the correct path. PowerShell will do that work for you when starting up but if you are trying to do something from pure .NET you probably need to set `LD_LIBRARY_PATH` to the PowerShell folder so the process can actually see that binary. Even then I don't even know if that will solve your problem.",
      "created_at": "2020-07-03T19:16:55Z",
      "updated_at": "2020-07-03T19:16:55Z"
    },
    {
      "author": "spKhan00",
      "author_association": "NONE",
      "body": "Thanks for your input. The thing is in production environment there wont be powersell installed. thats why i used sellf-containted publish method. Since there is no powershell installed in that machine i may need to include the shared libraries as well while colreclr initialization. i have set java.library.path instead of LD_LIBRARY_PATH . ",
      "created_at": "2020-07-04T05:22:37Z",
      "updated_at": "2020-07-04T05:22:37Z"
    },
    {
      "author": "spKhan00",
      "author_association": "NONE",
      "body": "Adding another point: I figured everyone told to create symlink for libssl.so and libcrypto.so in /usr/local/lib. \r\nIs this necessary?",
      "created_at": "2020-07-05T17:01:52Z",
      "updated_at": "2020-07-05T17:01:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "WSMan lib is deprecated. Recommendation is to use SSH remoting in new projects.\r\nIf you still want to use WSMan you could review related issues in the repo. There are workarounds to get WSMan working (specially with SSH versions).",
      "created_at": "2020-07-06T06:27:17Z",
      "updated_at": "2020-07-06T06:27:17Z"
    },
    {
      "author": "spKhan00",
      "author_association": "NONE",
      "body": "@iSazonov  thanks for your suggestion. can you please give an example of how to connect to Exchange Online using ssh in powershell. i did the all the steps mentioned in [here](https://docs.microsoft.com/en-us/powershell/scripting/learn/remoting/ssh-remoting-in-powershell-core?view=powershell-7#set-up-on-an-ubuntu-1604-linux-computer)",
      "created_at": "2020-07-09T06:13:21Z",
      "updated_at": "2020-07-09T06:13:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@spKhan00 It is still under development https://twitter.com/gregtaylor_msft/status/1280657888642392064\n\n<blockquote><img src=\"https://pbs.twimg.com/media/EcXPc0YUYAA1wFU.png:large\" width=\"48\" align=\"right\"><div>Twitter</div><div><strong><a href=\"https://twitter.com/gregtaylor_msft/status/1280657888642392064\">Greg Taylor on Twitter</a></strong></div><div>\u201cWell take a look at this. #MSExchange Online is working on adding #Linux and #powershell v7.0 Support to the Exchange Online V2 PowerShell Module. https://t.co/70YZGQQ7U4 #MSFTExchange #Office365\u201d</div></blockquote>",
      "created_at": "2020-07-09T18:04:16Z",
      "updated_at": "2020-07-09T18:04:18Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "You can distribute the libmi and libpsrp assemblies in your app since they are MIT licensed. We agree that you should continue to pursue the SSH solution.",
      "created_at": "2021-03-01T18:57:47Z",
      "updated_at": "2021-03-01T18:57:47Z"
    }
  ],
  "created_at": "2020-07-03T17:33:12Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered",
    "WG-DevEx-SDK"
  ],
  "number": 13092,
  "state": "closed",
  "title": "WSMan client library was not found while using CoreCLRHost",
  "updated_at": "2021-03-01T18:57:47Z"
}