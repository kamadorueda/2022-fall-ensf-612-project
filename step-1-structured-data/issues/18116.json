{
  "_url": "https://github.com/PowerShell/PowerShell/issues/18116",
  "author": "dkaszews",
  "body": "### Summary of the new feature / enhancement\n\n`Set-Clipboard` does not really work over SSH, as it always sets the clipboard of the target machine, not the host. This means that if you SSH e.g. from your PC to a server, then `Set-Clipboard` will set the server's clipboard, not your PCs, so you cannot paste it anywhere.\r\n\r\nThis can be resolved by using ANSI escape sequence (same mechanism as for setting colors) [OSC52](https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h3-Operating-System-Commands:~:text=Ps%20%3D%205%202%20%20%E2%87%92%C2%A0%20Manipulate%20Selection%20Data), which sets the clipboard of the host machine, which in our example is the PC, so you can paste it anywhere. This sequence is supported by most terminals, including [Microsoft Terminal](https://github.com/microsoft/terminal/issues/2946).\r\n\r\nExample:\r\n```pwsh\r\nfunction Set-RemoteClipboard($text) {\r\n    Write-Host \"`e]52;;$([System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($text)))`a\"\r\n}\r\n# Copy \"original\" into a clipboard from anywhere\r\n> Set-Clipboard 'changed'\r\n# Press Ctrl+Shift+V to see clipboard still \"original\"\r\n> Set-RemoteClipboard 'changed'\r\n# Press Ctrl+Shift+V to see clipboard now \"changed\"\r\n```\r\n\r\nOSC also has similar `Get-Clipboard -Remote` sequence, but no terminal implements it as it is rightly considered a security and privacy risk, and you ca simply \"get\" the host clipboard with Ctrl+Shift+V.\r\n\r\nOpens:\r\n1. Should we autodetect when to use the OSC52 instead of xclip or other OS target-implementation? E.g. SSH can be detected by presence of environment variables `$env:SSH_CLIENT` and `$env:SSH_TTY`. I would say no, as it could be potentially breaking behavior in case of false positives on terminals which don't support the OSC. If user wants such behavior, they can add `$PSDefaultParameters['Set-Clipboard:Remote'] = $env:SSH_CLIENT -or $env:SSH_TTY` to their `$PROFILE`.\r\n2. Some terminal multiplexers like screen and tmux may require wrapping OSC52 into a different escape, as can be seen in the [vim plugin implementation](https://github.com/ojroques/vim-oscyank/blob/main/plugin/oscyank.vim). Should we detect and handle those cases? tmux can be forced to work with default escape by setting `set -s set-clipboard on`. I would say keep it simple for now, then maybe add `-RemoteMethod = auto | osc52 | tmux | screen` in separate issue if required.\n\n### Proposed technical implementation details (optional)\n\nSee example for the escape sequence format.",
  "closed_at": null,
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "OSC52 does not work on local linux in either pwsh or bash. At least in those virtual terminals that I use. And which base64-string is in correct format?\r\n```\r\n$a = \"test\" | base64   \r\n$b = [convert]::ToBase64String([text.encoding]::UTF8.GetBytes(\"test\"))\r\n$a\r\n$b\r\n\r\n# dGVzdAo=\r\n# dGVzdA== \r\n```",
      "created_at": "2022-09-17T14:08:30Z",
      "updated_at": "2022-09-17T14:08:30Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "I was just about to say something similar to @237dmitry  \r\n\r\nThis is a good idea, but there doesn't appear to be any way for the remote session to know what OSC commands are supported (see also https://github.com/PowerShell/PowerShell/issues/18098#issuecomment-1249224249 ) . It is a useful thing to _add_ but may cause wrong expectations if it is the _default_ \r\n\r\n@237dmitry  the two formats \r\n\r\n`dGVzdAo=`     <--- Contains \"test\" with a trailing Line feed     \r\n` dGVzdA==`    <---  Contains \"test\" only. \r\n\r\nI'm guessing the latter is preferred but the former is mostly harmless.\r\n\r\n",
      "created_at": "2022-09-17T14:31:55Z",
      "updated_at": "2022-09-17T14:32:20Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "@237dmitry [Vim plugin lists supported terminals](https://github.com/ojroques/vim-oscyank), unfortunately GNOME and Konsole which are two popular Linux ones don't support it.\r\n\r\n@jhoneill Agreed that without universal support using it as default is not a good idea. However the support is broad enough (I may be biased because Windows Terminal and Chromebook hterm are the only two I use) it would be useful to have it. Just put in help that it may not work on all terminals, so test before relying on it. ",
      "created_at": "2022-09-17T14:40:50Z",
      "updated_at": "2022-09-17T14:40:50Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/wg-powershell-cmdlets We see utility, although perhaps not common, with this feature.  We propose adding a -AsOSC52 switch to enable this behavior.  Since not all terminals support this and those that do may require additional setting change to enable it, the switch name makes it easier to find relevant documentation.",
      "created_at": "2022-10-05T16:49:25Z",
      "updated_at": "2022-10-05T16:49:25Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "I'm working on implementation, got stuck on a stupid issue - how do I write directly to console from `PSCmdlet`? I need to circumvent all redirections.",
      "created_at": "2022-10-05T18:19:47Z",
      "updated_at": "2022-10-05T18:19:47Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "Stole the code from `Write-Host`, tested it to work",
      "created_at": "2022-10-05T19:17:20Z",
      "updated_at": "2022-10-05T19:17:20Z"
    }
  ],
  "created_at": "2022-09-17T10:23:20Z",
  "number": 18116,
  "state": "open",
  "title": "Set-Clipboard -Remote with OSC52",
  "updated_at": "2022-10-05T19:19:15Z"
}