{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14956",
  "author": "Northman-de",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\nFor no other reason than to challenge myself, I tried to make one of my scripts to use as less bytes as possible.\r\n\r\nI need to find all double closing brackets and separate them:\r\n```powershell\r\nwhile($l.Contains(\"))\")){$l=$l.Replace(\"))\",\")`t)\")}\r\n# ))  -> )`t)\r\n# ))) -> )`t)`t)\r\n```\r\nTo describe this here I use a TAB to have a visible character. In my code I pasted a ```[char]7``` (that will never be in the input text).\r\nThis works in 5.1, 6.2 and 7.1\r\n\r\nTo make my code shorter I used this:\r\n```powershell\r\nwhile($l-ne($l=$l.Replace(\"..\",\".`t\"))){}\r\n```\r\nThis also works in 5, 6 and 7 if you use a TAB (pasted, not `t).\r\nWith ```[char]7``` it's OK in Powershell 5 and 6, but fails in 7.\r\n\r\n## Actual behavior in PS7\r\n\r\n```powershell\r\n$code = '$l = \"#####\" ; while($l-ne($l=$l.Replace(\"##\",\"#Q#\"))){} ; $l.Split(\"Q\") -join \"-\"'\r\n1..31 | %{\"{0:00} - {1}\" -f $_, (Invoke-Expression $code.Replace(\"Q\",[char]$_))}\r\n\r\n 1 - #-##-##\r\n 2 - #-##-##\r\n 3 - #-##-##\r\n 4 - #-##-##\r\n 5 - #-##-##\r\n 6 - #-##-##\r\n 7 - #-##-##\r\n 8 - #-##-##\r\n 9 - #-#-#-#-#\r\n10 - #-#-#-#-#\r\n11 - #-#-#-#-#\r\n12 - #-#-#-#-#\r\n13 - #-#-#-#-#\r\n14 - #-##-##\r\n15 - #-##-##\r\n16 - #-##-##\r\n17 - #-##-##\r\n18 - #-##-##\r\n19 - #-##-##\r\n20 - #-##-##\r\n21 - #-##-##\r\n22 - #-##-##\r\n23 - #-##-##\r\n24 - #-##-##\r\n25 - #-##-##\r\n26 - #-##-##\r\n27 - #-##-##\r\n28 - #-##-##\r\n29 - #-##-##\r\n30 - #-##-##\r\n31 - #-##-##\r\n```\r\nThe results of bytes 9 to 13 are as expected. In PS5 or PS6 all bytes result in the correct output.\r\n\r\nWhy does this behave different for specific values?\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.2\r\nPSEdition                      Core\r\nGitCommitId                    7.1.2\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n",
  "closed_at": "2022-03-18T18:48:23Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "The short of it:\r\n\r\n* PowerShell is not to blame here: the change in behavior is the result of a change in the underlying .NET runtime.\r\n\r\n*  Whether that change was intentional or should be reported as a bug there, I don't know.\r\n\r\n---\r\n\r\nThe problem boils down to this:\r\n\r\n* With string operands, PowerShell's `-eq` operator (and its inverse, `-ne`), performs case-insensitive, culture-invariant string comparison (`StringComparison.InvariantCultureIgnoreCase`).\r\n\r\n* As of .NET 5.0.3, the runtime underlying PowerShell 7.1.2, this method appears to _ignore non-printing control characters_, which explains your symptom. Earlier versions, including  up to (at least) 3.1.2 (underlying PowerShell 7.0.5) and the .NET Framework version underlying Windows PowerShell do _not_.\r\n\r\nFor instance:\r\n\r\n```powershell\r\n# Escape sequence \"`a\" is [char] 7\r\n'Food' -eq \"Foo`ad\"   # !! $true in .NET 5+ - the non-printing control character is *ignored*\r\n```\r\n\r\n```csharp\r\n// C# equivalent\r\n\"Food\".Equals(\"Foo\\ad\", StringComparison.InvariantCultureIgnoreCase)\r\n```\r\n\r\n\r\n",
      "created_at": "2021-03-07T20:40:27Z",
      "updated_at": "2021-03-07T20:42:48Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That's an interesting change to be made. Do you happen to know if that was documented anywhere? Seems like it should have been considered a breaking change and doc'd somewhere as a result.",
      "created_at": "2021-03-07T22:27:13Z",
      "updated_at": "2021-03-07T22:27:13Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I agree, @vexx32 - a cursory web search didn't provide any clues.\r\n\r\nSearching the issues at https://github.com/dotnet/runtime/issues I did find this, which _may_ explain the change (I haven't dug deeper):\r\n\r\nhttps://github.com/dotnet/runtime/issues/43736#issuecomment-714779040\r\n\r\n> in .NET 5.0 we have switched to using ICU instead of NLS. You can look at https://docs.microsoft.com/en-us/dotnet/standard/globalization-localization/globalization-icu for more details.\r\n\n\n<blockquote><img src=\"https://avatars.githubusercontent.com/u/9141961?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/dotnet/runtime\">dotnet/runtime</a></strong></div><div>.NET is a cross-platform runtime for cloud, mobile, desktop, and IoT apps. - dotnet/runtime</div></blockquote>\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/dotnet/standard/globalization-localization/globalization-icu\">Globalization and ICU</a></strong></div><div>Learn more about: .NET globalization and ICU</div></blockquote>",
      "created_at": "2021-03-07T22:36:30Z",
      "updated_at": "2021-03-07T22:36:32Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "WG-Engine:\r\n\r\nWe reviewed this issue and agreed to document the behavior changes to `-eq`, `-ne`, `-in`, `-notin`, `-contains`, `-notcontains`, and even `-gt`, `-ge`, `-lt`, `-le` due to the [breaking change](https://github.com/PowerShell/PowerShell/issues/14956#issuecomment-792348700) in .NET 5+.\r\n\r\n@sdwheeler Would it be OK to document this in https://docs.microsoft.com/en-us/powershell/scripting/whats-new/what-s-new-in-powershell-72?view=powershell-7.2#breaking-changes-and-improvements? \n\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/scripting/whats-new/what-s-new-in-powershell-72\">What's New in PowerShell 7.2 - PowerShell</a></strong></div><div>New features and changes released in PowerShell 7.2</div></blockquote>",
      "created_at": "2022-03-18T00:33:33Z",
      "updated_at": "2022-03-18T00:33:35Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The document update PR is out: https://github.com/MicrosoftDocs/PowerShell-Docs/pull/8672\r\nThanks @sdwheeler!",
      "created_at": "2022-03-18T18:47:49Z",
      "updated_at": "2022-03-18T18:47:49Z"
    }
  ],
  "created_at": "2021-03-07T18:32:28Z",
  "labels": [
    "WG-Engine",
    "Resolution-By Design"
  ],
  "number": 14956,
  "state": "closed",
  "title": "Strange behavior in PS7 with replacing specific bytes in While-clause",
  "updated_at": "2022-03-18T18:48:23Z"
}