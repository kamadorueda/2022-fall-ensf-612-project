{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7468",
  "author": "bergmeister",
  "body": "## PR Summary\r\n\r\nRelated: #7408\r\nIn order to avoid a PR with a big diff, this PR brings back Windows PowerShell code from the source-depot branch in order to allow for future multi-targeted compilation against fullclr again.\r\nIt bring back PSM1 and WindowsErrorReporting files and the `CommandProcessorBase.CheckForSevereException` method. The new code is not compiled for coreclr.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed - Issue link:\r\n- **Testing - New and feature**\r\n    - [x] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [ ] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2018-08-07T20:50:04Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "As I commented in #7408 I think that the right way is .Net Core 3.0. Also we could try to remove Parser code dependencies from other code and put it in separate assembly. I don't agree to add FullCLR code back. We will be forced to add the code, compilation, tests, make daily, night and release builds, publish new package. It's too much work. Also it is block us to use new .Net Core features.\r\n",
      "created_at": "2018-08-07T05:22:40Z",
      "updated_at": "2018-08-07T05:26:45Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Let's continue the discussion in issue #7408 but since neither `netstandard2.1` nor `netcoreapp3.0` are not even in preview, multi-targeting for full .Net is much easier and something that can be done now. The prototype in my working branch [here](https://github.com/bergmeister/PowerShell/tree/SMAOnFullDotnet) needed only very few modifications to compile against fullclr again. I don't expect support from MSFT for fullclr but having it in the mainstream branch and just compiling against fullclr without running tests sounds like a compromise. Or will compilation against full .net and also defining the `CORECLR` be fine?",
      "created_at": "2018-08-07T06:12:37Z",
      "updated_at": "2018-08-07T17:25:09Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I agree with @iSazonov. Adding FullCLR-only code is a burden to the PowerShell Core code base.\r\nSome of the removed FullCLR-only code is not even needed for Windows PowerShell, for example, `PSMI` related code has never been used in Windows PowerShell.",
      "created_at": "2018-08-07T17:18:41Z",
      "updated_at": "2018-08-07T17:18:41Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@bergmeister  my particular issue here is the DLLImports.  They require additional review when the PR is ready to be merged.",
      "created_at": "2018-08-07T20:10:38Z",
      "updated_at": "2018-08-07T20:10:38Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "Ok, Thanks for the feedback. I will close this PR then as the main sentiment is to not bring fullclr code back, which is also backed by Steve's comment [here](https://github.com/PowerShell/PowerShell/issues/7408#issuecomment-411193773). I am happy to accept this decision since I can understand the reasoning for it.",
      "created_at": "2018-08-07T20:50:04Z",
      "updated_at": "2018-08-07T20:50:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@bergmeister if you need standalone Parser you could open the feature request issue.",
      "created_at": "2018-08-09T09:58:17Z",
      "updated_at": "2018-08-09T09:58:17Z"
    }
  ],
  "created_at": "2018-08-06T22:42:50Z",
  "number": 7468,
  "state": "closed",
  "title": "WIP: Bring back PSMI, WindowsErrorReporting and CommandProcessorBase.CheckForSevereException code in SMA from source-depot branch for fullCLR compilation",
  "updated_at": "2018-08-09T09:58:17Z"
}