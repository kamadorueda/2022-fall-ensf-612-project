{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3840",
  "author": "lipkau",
  "body": "### Description\r\nimplementing `[CmdletBinding(SupportsPaging = $true)]` does no generate the help of the parameters for Paging\r\n\r\n### Steps to reproduce\r\n1. load the following function to the session:\r\nhttps://github.com/Microsoft/Windows-classic-samples/blob/master/Samples/PowerShell/SupportsPaging/SupportsPaging01/cs/SupportsPaging01.ps1\r\n2. `Get-Help Get-Numbers`\r\n\r\n### Expected behavior\r\nSee the doc on the parameters `-Skip`, `-IncludeTotalCount` and `-First`\r\n\r\n### Actual behavior\r\nHelp is not generated",
  "closed_at": null,
  "comments": [
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Same problem with `SupportsShouldProcess` -- the optional but well-known \"common\" parameters are added, but help isn't automatically generated. You _could_ write the help yourself...\r\n\r\nBut since there is inherent meaning, and inherent default values (`-Skip` defaults to `0`, and `-First` defaults to `[UInt64]::MaxValue` etc., it would make sense if these parameters had automatic help. At least for script functions, at least when the help is comment-based...\r\n\r\nFor what it's worth, an example with help:\r\n\r\n```posh\r\nfunction Test-Paging {\r\n<#\r\n  .Synopsis\r\n    Generates lots of numbers, depending on the common paging parameters\r\n  .Parameter Skip\r\n    Controls how many things will be skipped before starting output. Defaults to 0.\r\n  .Parameter First\r\n    Indicates how many items to return. Defaults to 100.\r\n  .Parameter IncludeTotalCount\r\n    Causes an extra output of the total count at the beginning.\r\n    Note this is actually a uInt64, but with a custom string representation.\r\n#>\r\n[CmdletBinding(SupportsPaging)]\r\nparam()\r\nend {\r\n    if ($PSCmdlet.PagingParameters.First -eq [uint64]::MaxValue) {\r\n        $PSCmdlet.PagingParameters.First = 100\r\n    }\r\n\r\n    if ($PSCmdlet.PagingParameters.IncludeTotalCount) {\r\n        $PSCmdlet.PagingParameters.NewTotalCount( [uint64]::MaxValue, 1.0)\r\n    }\r\n\r\n    $i = $PSCmdlet.PagingParameters.Skip\r\n    foreach ($x in 1 .. $PSCmdlet.PagingParameters.First) {\r\n        ($i++)\r\n    }\r\n\r\n}\r\n}\r\n```",
      "created_at": "2017-05-22T19:21:56Z",
      "updated_at": "2017-05-22T19:36:03Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Anyone who has understood how `-IncludeTotalCount` is supposed to be used?",
      "created_at": "2017-05-23T15:56:07Z",
      "updated_at": "2017-05-23T15:56:07Z"
    },
    {
      "author": "lipkau",
      "author_association": "NONE",
      "body": "@powercode it prints a line with the total count of entries.\r\nIn case of `[double]$Accuracy = 0.0`, it will print a line saying that the total count is unknown",
      "created_at": "2017-05-23T18:35:36Z",
      "updated_at": "2017-05-23T18:35:36Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "@powercode yeah, `-IncludeTotalCount` determines whether you're supposed to try to figure out how many total items there are, and output that with your page of results. You implement it by calling `$PSCmdlet.PagingParameters.NewTotalCount(` --and as @lipkau mentioned, you can indicate that you don't know, if you don't know.",
      "created_at": "2017-06-28T16:36:53Z",
      "updated_at": "2017-06-28T16:36:53Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@Jaykul Well, that is how to implement it, but how can you make real world use of it as a caller?\r\nA stray integer in the beginning of a sequence of objects doesn't help me much.",
      "created_at": "2017-06-28T18:35:22Z",
      "updated_at": "2017-06-28T18:35:22Z"
    }
  ],
  "created_at": "2017-05-22T19:02:24Z",
  "number": 3840,
  "state": "open",
  "title": "SupportsPaging does not generate help",
  "updated_at": "2017-06-28T18:35:22Z"
}