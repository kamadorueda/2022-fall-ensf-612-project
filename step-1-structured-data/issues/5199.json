{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5199",
  "author": "bergmeister",
  "body": "If the JSON contains duplicate keys with the same casing, then  only the last key is used and the others are silently thrown away. The code in `JsonObject.cs` [here](https://github.com/PowerShell/PowerShell/blob/50f6667bdb0739a315f13b3dd013dc0fb96103cb/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/JsonObject.cs#L103) actually caters for this case and would throw an error but it never gets to that stage because `JsonConvert.DeserializeObject` [here](https://github.com/PowerShell/PowerShell/blob/50f6667bdb0739a315f13b3dd013dc0fb96103cb/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/JsonObject.cs#L62) does not throw when there are duplicate keys and simply decides to take the last one.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n'{ \"key\":\"value1\", \"key\":\"value2\" }' | ConvertFrom-Json\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nEither a warning that duplicated keys were disregarded or an error stating that duplicate keys are not allowed unless e.g something like. a `-Force` switch is used. Given that this would be a breaking change, it will probably have to be a warning.\r\n\r\nActual behavior\r\n---------------\r\nOnly the last key is used when there are duplicate keys\r\n```powershell\r\nkey\r\n---\r\nvalue2\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-beta.8\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-beta.8-20-g0d5a6fbd71c31043d0eda82f7b0e2d4fb0431322\r\nOS                             Microsoft Windows 10.0.15063\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It is really bug - Json don't allow duplicate keys with the same case.",
      "created_at": "2017-10-23T03:33:49Z",
      "updated_at": "2017-10-23T03:33:49Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "As best as I can tell JSON doesn't require member names to be unique, only [recommended](https://tools.ietf.org/html/rfc7159#section-4).",
      "created_at": "2017-10-25T03:27:09Z",
      "updated_at": "2017-10-25T03:27:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ":-) I believe implementations \"MUST\" follow \"SHOULD recommendations\".\r\n\r\nIn any case I think `JsonConvert.DeserializeObject` works incorrectly.\r\n\r\n",
      "created_at": "2017-10-25T06:40:28Z",
      "updated_at": "2017-10-25T06:40:28Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "I found the first 2 answers [here](https://stackoverflow.com/questions/21832701/does-json-syntax-allow-duplicate-keys-in-an-object) interesting and their statement is basically that although it is valid JSON from a puristic point of view, JSON parsing libraries have and can choose different behaviours without conflicting with the standard. Normally one should trust the foundation, which is `Newtonsoft.Json`, but I am with @iSazonov that it's behaviour is sub-optimal. If there is a way of at least detecting the duplicates then at least a warning would be nice. A detection should be possible using a custom converter type when calling `JsonConvert.DeserializeObject` but it might result in a higher computational cost.",
      "created_at": "2017-10-25T07:06:05Z",
      "updated_at": "2017-10-25T07:06:29Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If the standard say \"SHOULD\" it allows for a _reasonable_ deviation from the standard. This means that the API must have the option to turn on or off duplicate keys.",
      "created_at": "2017-10-25T07:34:35Z",
      "updated_at": "2017-10-25T07:34:35Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "According to the author of `Newtonsoft.Json` in his comment [here](https://github.com/JamesNK/Newtonsoft.Json/issues/931#issuecomment-224104005) it does not seem to be possible, therefore a different library might need to be used unfortunately.",
      "created_at": "2017-10-25T18:00:20Z",
      "updated_at": "2017-10-25T18:01:22Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Is there a known use case that depends on duplicate keys?  Otherwise, based on the standard's recommendation, I don't think we must support it and warning the user is sufficient.",
      "created_at": "2017-10-26T11:27:34Z",
      "updated_at": "2017-10-26T11:27:34Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Neton.Json is very popular library - if they don't fix (won't fix) we can ignore this in code and only add notes in docs.",
      "created_at": "2017-10-26T13:21:31Z",
      "updated_at": "2017-10-26T13:21:31Z"
    }
  ],
  "created_at": "2017-10-22T20:21:10Z",
  "labels": [
    "Breaking-Change",
    "WG-Cmdlets-Utility"
  ],
  "number": 5199,
  "state": "open",
  "title": "ConvertFrom-Json silently throws away duplicated keys with identical casing",
  "updated_at": "2017-10-26T13:21:31Z"
}