{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2290",
  "author": "thezim",
  "body": "This is common task I see across many PowerShell modules and think it would add value for cross platform tasks.\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Do you mean this?\nhttp://poshcode.org/2059\nhttps://gist.github.com/jpoehls/2406504\n\nThis suggests that need the following cmdlets: Convert-FileEncoding and Convert-StringEncoding\n\nAnd the RFC is required.\n",
      "created_at": "2016-09-28T13:20:55Z",
      "updated_at": "2016-09-28T13:26:55Z"
    },
    {
      "author": "thezim",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Yes. The additional cmdlets are nice to haves as well.\n",
      "created_at": "2016-09-28T23:10:07Z",
      "updated_at": "2016-09-28T23:10:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> This is common task I see across many PowerShell modules \n> @thezim Could you give examples of such modules?\n",
      "created_at": "2016-09-29T11:51:36Z",
      "updated_at": "2016-09-29T11:51:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I investigated this field. It is questionable. We need the reference algorithm from experts in the field.\nSample http://gnuwin32.sourceforge.net/packages/file.htm\n",
      "created_at": "2016-10-06T10:58:18Z",
      "updated_at": "2016-10-06T10:58:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "For compatibility we need to use the ported [file utility](http://gnuwin32.sourceforge.net/packages/file.htm). Can we rewrite it on C# and include in the repo as cmdlet?",
      "created_at": "2016-12-07T19:48:04Z",
      "updated_at": "2016-12-07T19:48:04Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Posted by @sdwheeler in our Community Call, this is a version from Lee: http://poshcode.org/2153  ",
      "created_at": "2016-12-08T17:17:28Z",
      "updated_at": "2016-12-08T17:17:28Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee discussed this and recommendation is to have a cmdlet that supports this capability instead of adding to FileInfo.  Usage will be more common now that we are cross platform and should be part of the Utility module.  Get-FileEncoding and Convert-FileEncoding makes sense from a discovery standpoint.  Seems we can just review the parameters at PR time rather than requiring RFC for this one.",
      "created_at": "2016-12-08T17:22:45Z",
      "updated_at": "2016-12-08T17:22:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@joeyaiello If we do a different algorithm then `file`, it may be misleading Unix users.\r\n\r\n@SteveL-MSFT Could you please clarify about the possibility of porting of `file` utility?",
      "created_at": "2016-12-08T18:28:51Z",
      "updated_at": "2016-12-08T18:28:51Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov porting file as a cmdlet makes sense (assuming appropriate licensing).  alternatively since I see the `file` is ported to Windows already, perhaps it's not worth the effort to port file to c# and instead just wrap it in a cmdlet?",
      "created_at": "2016-12-08T20:32:03Z",
      "updated_at": "2016-12-08T20:32:03Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Our conclusion on this issue was specifically about wanting better support for encodings, nothing more.\r\n\r\nI think we also questioned the value in porting `file` to PowerShell because extensions are the primary way of understanding file types on Windows.",
      "created_at": "2016-12-08T23:31:08Z",
      "updated_at": "2016-12-08T23:31:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT We cannot expect that there is the `file` utility on each Unix system especially on OsX.\r\n\r\nToday I am more deeply researched how `file` utility works. Encoding detection is very simple (yes, file type detection is overkill for us) and can be easily ported to C#. Thus we can easily achieve compliance with the de facto Unix standard. The bad news is that the code is very old and should be brought into line with modern standards (from FSS-UTF (1992) / UTF-8 (1993) to UTF8 (2003)).\r\n\r\nAnother bad news is that this utility does not detect codepages. Do we want to make detection of codepages? If so, do we want high-speed heuristics ([sample](http://www-archive.mozilla.org/projects/intl/UniversalCharsetDetection.html)) or will use simpler but slower ways?\r\n\r\nNow about the conversion. Simple test:\r\n```powershell\r\n[text.encoding]::GetEncodings().count\r\n```\r\nreturn \r\nin Powershell 5.1 - 140 codepages\r\nin Powershell 6.0 (alfa 13) - 8 codepages\r\n(Unix iconv - ~300 codepages)\r\n\r\nShould we completely rely on .Net Core in the expectation that there will be support for multiple charsets? Or should we make our implementation?",
      "created_at": "2016-12-09T18:09:29Z",
      "updated_at": "2016-12-09T18:18:06Z"
    },
    {
      "author": "thezim",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT for me I was just looking for detection of encodings that existing cmdlets currently accept such as Out-File. No code page usage. I do see the value in a full set of encoding cmdlets though.",
      "created_at": "2016-12-09T23:15:39Z",
      "updated_at": "2016-12-09T23:15:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Opened - Initial discussion about encoding cmdlets https://github.com/PowerShell/PowerShell-RFC/issues/67",
      "created_at": "2017-02-06T10:07:42Z",
      "updated_at": "2017-02-06T10:07:42Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: As an aside re:\r\n\r\n> We cannot expect that there is the file utility on each Unix system especially on OsX.\r\n\r\n[`file`](http://pubs.opengroup.org/onlinepubs/9699919799/utilities/file.html) is POSIX-mandated utility and therefore available on most (all?) modern Unix platforms, including macOS (OS X).\r\n\r\nThat said, the focus of the POSIX `file` utility spec is on classifying files by *content* - encodings aren't even mentioned.\r\n\r\nIn practice, however, both the GNU and the BSD/macOS implementations _do_ report a text file's encoding, including the presence/absence of the UTF-8 pseudo-BOM.\r\n",
      "created_at": "2017-03-02T13:55:11Z",
      "updated_at": "2017-03-02T13:55:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 Thank you mentioned this utility as POSIX. In most cases, however, it is installed as part of a _separate_ package. This should encourage us to require the installation of this utility when installing PowerShell Core. I believe it is unacceptable for us.\r\nI recently did a little review of GNU `file` utility and found that its code is too out of date.\r\nI suppose we should not rely on it. Perhaps there is a more modern version, but I don't known about it.\r\n\r\nAnd welcome to discussion https://github.com/PowerShell/PowerShell-RFC/issues/67\r\n",
      "created_at": "2017-03-02T14:42:41Z",
      "updated_at": "2017-03-02T14:42:41Z"
    },
    {
      "author": "roysubs",
      "author_association": "NONE",
      "body": "I'm not (nearly) as advanced a PowerShell user as you guys, and I have a weak understanding of file encoding (I don't have a clue what the point of a `BOM` is honestly) but once every year or two, I get stung by file encoding, and the last time (a few days ago), cost us a Production migration as we were scratching our heads why our automation tool could not run batch scripts (the reason was that the batch scripts were generated by PowerShell which defaults to UTF-8 which made the batch scripts broken, but the errors made us think that it was the automation tool that was failing in some way). Such a scenario might all be very trivial/obvious to you guys, but it is *not* to most users (a \"text file\" has no deeper complexity than \"text file\" to most people, most of the time).\r\n\r\nBoth required tools (`Get-FileEncoding` and `Convert-FileEncoding` in https://github.com/PowerShell/PowerShell-RFC/issues/67) are long-overdue as core components of PowerShell. `Get-` would greatly enhance appreciation of file encoding issues (and the more information the better in my mind, codepages etc), while `Convert-` becomes more and more important in making PowerShell a useful cross-platform tool. Would really appreciate if this two-years-since-last-comment thread was *un-mothballed*?",
      "created_at": "2020-11-21T07:41:31Z",
      "updated_at": "2020-11-21T09:33:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Would really appreciate if this two-years-since-last-comment thread was _un-mothballed_?\r\n\r\n@roysubs This was approved and you can grab the work.",
      "created_at": "2020-11-21T12:20:23Z",
      "updated_at": "2020-11-21T12:20:23Z"
    },
    {
      "author": "roysubs",
      "author_association": "NONE",
      "body": "I really wish that I had the ability to do that @iSazonov ! \r\n\r\nI know that @mklement0 has a very deep understanding of file encoding, I'm hoping that he might have the time to build this... \ud83d\ude42",
      "created_at": "2020-11-21T12:42:15Z",
      "updated_at": "2020-11-21T12:42:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 is a great analytic but not a fan of coding :-)\r\n\r\nImplementation is simple with using [StreamReader.CurrentEncoding ](https://docs.microsoft.com/en-us/dotnet/api/system.io.streamreader.currentencoding?view=net-5.0). Of cause later we could make the cmdlet more \"powershel-ly\" smart with an heuristics.",
      "created_at": "2020-11-21T13:43:30Z",
      "updated_at": "2020-11-21T13:43:30Z"
    },
    {
      "author": "roysubs",
      "author_association": "NONE",
      "body": "Sounds great, and I'll help if I can, but presumably you'd have to do this in C# (I'm more of just a SysAdmin / DevOps type scripter, I just use PowerShell and Python to manage some tasks on my work environments). I want to see PowerShell take over on Linux though, it's just a much better language imo \ud83d\ude42.",
      "created_at": "2020-11-21T18:44:57Z",
      "updated_at": "2020-11-21T18:44:57Z"
    }
  ],
  "created_at": "2016-09-17T16:35:57Z",
  "number": 2290,
  "state": "open",
  "title": "Add Get-FileEncoding cmdlet or function.",
  "updated_at": "2020-11-21T18:44:57Z"
}