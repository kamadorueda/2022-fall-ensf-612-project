{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12774",
  "author": "mziyabo",
  "body": "# Steps to reproduce\r\n\r\nWhen calling `Import-Module` and using tab-completion to complete the name of  module, pwsh seem to allocate quite a large chunk of WS/working set memory as compared to a scenario when you just type out the name of your module without tab-completion\r\n\r\nE.g. I have a large module here `AWSCompleter` in the PSGallery, the psmi is 2mb and it appears as though this is used to determine the amount of allocated memory when using tab-completion - I could be wrong here.\r\n\r\nTo illustrate, after starting pwsh with `no-profile` flag  **WS** ~48mb\r\nHere are the comparisons of then attempting Import-Module AWSCompleter with and w/o module name tab-completion:\r\n\r\n|After Import-Module| ~WS(mb) |\r\n|-----------------------|-----|\r\n|W/o tab-completion| 90 |\r\n|With tab-completion|136|\r\n\r\nA difference of 46mb in the WS- pretty significant (for me). \r\n> Note, I'm aware the module is large and am working on breaking it down but the question remains about memory allocation with the above scenarios:\r\n\r\n- Last but, also important, if you don't actually hit **Enter** after the `Import-Module <Tab-Completed Module Name>`\r\nThe WS memory is already allocated and gone up to 136 despite the fact that the module hasn't actually been imported or loaded into the Session.\r\nIn other words to reproduce simply tab-complete and don't hit enter and observe the memory, it is quite observable with a large module like `AWSCompleter` or any module I'd think that has a file size in that 2mb range.\r\n# Expected behavior\r\n\r\n- I would expect the memory allocated to be the same whether tab-completion was used or otherwise. \r\n- Also if I don't hit **Enter** I would expect that there not be any WS allocation or spike without the module being actually loaded into the Session.\r\n\r\n# Actual behavior\r\n\r\n- High WS for tab-completed module-name when using  Import-Module\r\n\r\n# Environment data\r\n\r\n$PSVersionTable:\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.1\r\nPSEdition                      Core\r\nGitCommitId                    7.0.1\r\nOS                             Microsoft Windows 10.0.19041\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "A lot of tab completers do Get-ThingToComplete.  So tab completing a command seems to do get-command which triggers evaluating the dynamic parameters of loaded commands. \r\nIf tab-completing a module name works in the same lots of module metadata may be loaded, and if you have many modules (e.g. the whole Azure set), or very large modules, then that would come with a similar hit. \r\n",
      "created_at": "2020-05-26T11:33:43Z",
      "updated_at": "2020-05-26T11:33:43Z"
    },
    {
      "author": "mziyabo",
      "author_association": "NONE",
      "body": "Either way tab-completion of Module Names should not use 100Mb of WS memory before the actual Import-Module command itself is executed, i.e. before the module is loaded in the session or memory\r\nThis isn't a hit, it is memory that is preallocated regardless of the module being in the session- why preallocate in this way? Also if I abort then what? When does this get Garbage Collected because the memory remains as claimed for quite some time after\r\n",
      "created_at": "2020-06-03T10:11:56Z",
      "updated_at": "2020-06-03T10:12:48Z"
    }
  ],
  "created_at": "2020-05-24T18:18:24Z",
  "number": 12774,
  "state": "open",
  "title": "Import-Module memory allocation when using module name tab-completion ",
  "updated_at": "2021-01-16T13:58:40Z"
}