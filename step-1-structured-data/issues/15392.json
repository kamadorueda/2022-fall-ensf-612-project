{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15392",
  "author": "sdwheeler",
  "body": "## Summary of the new feature/enhancement\r\n\r\n`Set-AuthenticodeSignature` and `Get-AuthenticodeSignature` are both derived from the base class `SignatureCommandsBase`. The parameters are defined in the base class but implemented in the cmdlet class. `Get-AuthenticodeSignature` implements the **SourcePathOrExtension** and **Content** parameters, but `Set-AuthenticodeSignature` does not.\r\n\r\nThe problem is that `Get-Command` shows that parameters even though they are not implemented, causing confusion to the users and in the documentation.\r\n\r\n## Proposed technical implementation details (optional)\r\n\r\n<!-- \r\nA clear and concise description of what you want to happen.\r\nConsider providing an example PowerShell experience with expected result.\r\n-->\r\nWe have update the docs to explain that the parameters are not implemented. \r\n\r\nThe code should be changed. The parameters should be moved out of the base class and into the cmdlet class `GetAuthenticodeSignatureCommand`. That way, the parameters only apply to that cmdlet.\r\n\r\nSee related Docs issue https://github.com/MicrosoftDocs/PowerShell-Docs/issues/7564.\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "A breaking change.",
      "created_at": "2021-05-13T02:23:21Z",
      "updated_at": "2021-05-13T02:23:21Z"
    },
    {
      "author": "sdwheeler",
      "author_association": "COLLABORATOR",
      "body": "@BrucePay  It is a breaking change in that the parameter will not appear for `Set-AuthenticodeSignature` but since they are not implemented for that cmdlet there is no impact. Unless I am missing your point. Can you elaborate?",
      "created_at": "2021-05-13T13:08:27Z",
      "updated_at": "2021-05-13T13:08:27Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@sdwheeler Even if a parameter does nothing, removing a parameter from a cmdlet is a breaking change.",
      "created_at": "2021-05-15T00:18:17Z",
      "updated_at": "2021-05-15T00:18:17Z"
    },
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "How far should Powershell go to maintain backwards compatibility though? I can't imagine any actual scenario where you would use an unimplemented parameter (that apparently throws an error if used).",
      "created_at": "2021-05-17T17:48:29Z",
      "updated_at": "2021-05-17T17:48:29Z"
    },
    {
      "author": "sdwheeler",
      "author_association": "COLLABORATOR",
      "body": "I agree that it would be a breaking change. But I think it falls into the category of minimal risk and impact, since it was never implemented. We take changes like that all the time. Ultimately, it's the committee's decision.  ",
      "created_at": "2021-05-17T19:03:03Z",
      "updated_at": "2021-05-17T19:03:03Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "The only real concern I can see with this is not really so much the removal of parameters that throw anyway (great, they'll just throw generic parameter binding errors instead, not really a big deal), but moreso that modifying the parent class may break some other code that isn't owned or controlled by PowerShell.\r\n\r\nThe `SignatureCommandsBase` class is a public API itself, so changes to that may impact folks inheriting from it. I've not taken a close look to see what the real impact would be if those properties were removed, but it's possible that it may be of a little more concern than simply removing non-functioning parameters from the affected command.\r\n\r\nI would generally agree that this suggested change is a good idea, though. I suspect the likelihood of breaking something else is fairly minimal, but it might be worth taking a closer look before making a final decision. \ud83d\ude42 ",
      "created_at": "2021-05-17T20:36:54Z",
      "updated_at": "2021-05-17T20:36:54Z"
    },
    {
      "author": "jdhitsolutions",
      "author_association": "COLLABORATOR",
      "body": "I would say that if this is well documented and a user can learn this from running `Get-Help` that we leave this alone. A potentially confused user is not enough to warrant making these types of changes, especially when nobody can definitively say what the result might be. I'd say that's why this type of change is considered breaking.",
      "created_at": "2021-06-14T18:47:49Z",
      "updated_at": "2021-06-14T18:47:49Z"
    }
  ],
  "created_at": "2021-05-12T20:52:05Z",
  "number": 15392,
  "state": "open",
  "title": "Remove unimplemented parameters from Set-AuthenticodeSignature",
  "updated_at": "2021-06-14T18:47:49Z"
}