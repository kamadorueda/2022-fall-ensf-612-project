{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10997",
  "author": "msftrncs",
  "body": "# Steps to reproduce\r\n\r\nCreate an executable file with PowerShell wildcard characters in its name, say `a[hello].ps1`, place it somewhere in the PATH, and then try to execute it from PowerShell.\r\n\r\n```\r\nDescribe \"Execute scripts by file name only via `$env:PATH.\" {\r\n  BeforeAll {\r\n\t$originalPath= $env:PATH\r\n    $dir = Convert-Path TestDrive:\r\n    \"'hi1'\" | Set-Content -LiteralPath $dir/script.ps1\r\n    \"'hi2'\" | Set-Content -LiteralPath $dir/script[1].ps1\r\n    $env:PATH += [IO.Path]::PathSeparator + $dir\r\n  }\r\n  AfterAll {\r\n    $env:PATH = $originalPath\r\n  }\r\n  It \"Finds and executes a script with a vanilla file name.\" {\r\n    script.ps1 | Should -Be 'hi1'\r\n  }\r\n  It \"Finds and executes a script whose file name looks like a wildcard.\" {\r\n    script[1].ps1 | Should -Be 'hi2'\r\n  }\r\n}\r\n```\r\n\r\n# Expected behavior\r\n\r\nThe file executes\r\n\r\n# Actual behavior\r\n\r\nIt doesn't, but is suggested as a possible similar command.\r\n\r\nThere is no escaping of the wildcard characters that works.\r\n\r\n# Environment data\r\n\r\nAll version of PowerShell, on Windows 10, specifically 5.1, 6.2.3, and 7.0.0-preview5 were tested.\r\n\r\n# Reason - Determined from Debug\r\n\r\nBecause the command contains wildcard characters, it is rejected from a PATH search by `CommandSearcher.CanDoPathLookup()` in `CommandSearcher.setupPathSearcher()`.   If the command had been in the immediate path, using `.\\a[hello].ps1` would have successfully worked.\r\n\r\n@mklement0, I believe you may have touched on this subject before, but I could not immediately find an existing issue for this.\r\n\r\nI believe this can be corrected, by only sending an escaped version of the path to `CommandSearcher.CanDoPathLookup()`, as I cannot find any reason that the path should not be treated literal at this point.  Or, maybe the wildcard character check can be removed entirely, it appears this is the only place where the function `CanDoPathLookup()` is used.",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Good find, @msftrncs  - yes, this originally came up in #4726, at which time paths that happened to be invalid when interpreted _as wildcards_ broke invocation.\r\n\r\nThis aspect of mistakenly even attempting wildcard resolution _on invocation_ has been fixed in https://github.com/PowerShell/PowerShell/pull/9202 (note that the _redirection_ aspect is still broken), but, as this issue shows, there are still contexts where the executable name is mistakenly treated as a wildcard pattern.\r\n",
      "created_at": "2019-11-06T13:45:11Z",
      "updated_at": "2019-11-06T13:45:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @TravisEz13 For information.",
      "created_at": "2019-11-06T14:44:45Z",
      "updated_at": "2019-11-06T14:44:45Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "This issue was fixed in PowerShell 7.  We will not backport  this to previous versions.\r\n\r\nPlease fill out the issue template completely with all required details if you would like use to re-evaluate (An actual repro, the actual environment you repro'ed it in, the actual expected result)",
      "created_at": "2019-11-06T19:07:30Z",
      "updated_at": "2019-11-06T19:11:03Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13: \r\n\r\n* A _related_ problem was fixed, as detailed in my previous comment, but not this one, which still exists in PowerShell Core 7.0.0-preview.5, on all platforms.\r\n\r\n* This problem, as detailed by @msftrncs in the OP,  is specifically about executables with file names that _look like_ wildcard expressions _not being looked for in `$env:PATH`_ - an edge case, certainly, but still a bug.\r\n\r\n```powershell\r\nDescribe \"Execute scripts by file name only via `$env:PATH.\" {\r\n  BeforeAll {\r\n\t$originalPath= $env:PATH\r\n    $dir = Convert-Path TestDrive:\r\n    \"'hi1'\" | Set-Content -LiteralPath $dir/script.ps1\r\n    \"'hi2'\" | Set-Content -LiteralPath $dir/script[1].ps1\r\n    $env:PATH += [IO.Path]::PathSeparator + $dir\r\n  }\r\n  AfterAll {\r\n    $env:PATH = $originalPath\r\n  }\r\n  It \"Finds and executes a script with a vanilla file name.\" {\r\n    script.ps1 | Should -Be 'hi1'\r\n  }\r\n  It \"Finds and executes a script whose file name looks like a wildcard.\" {\r\n    script[1].ps1 | Should -Be 'hi2'\r\n  }\r\n}\r\n```\r\n\r\nThe 2nd test fails with:\r\n\r\n```\r\nCommandNotFoundException: The term 'script[1].ps1' is not recognized as the name of a cmdlet, function, script file, or operable program.\r\n```\r\n\r\nThat is, `script.ps1` was found, as expected, but `script[1].ps1` was unexpectedly not, due to the name containing wildcard characters.\r\n",
      "created_at": "2019-11-06T19:39:09Z",
      "updated_at": "2019-11-06T20:10:44Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "I have some edits available for a PR.  It involves removing the test for wildcard characters in `CommandSearcher.CanDoPathLookup()`.  I can produce a PR in a little bit.",
      "created_at": "2019-11-06T20:44:18Z",
      "updated_at": "2019-11-06T20:44:18Z"
    }
  ],
  "created_at": "2019-11-06T07:25:14Z",
  "labels": [
    "Issue-Bug",
    "WG-Engine",
    "Up-for-Grabs"
  ],
  "number": 10997,
  "state": "open",
  "title": "command with wildcard characters on path cannot be executed",
  "updated_at": "2019-11-09T15:06:35Z"
}