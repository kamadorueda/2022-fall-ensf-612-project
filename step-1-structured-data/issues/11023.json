{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11023",
  "author": "FusionCarcass",
  "body": "# Summary of the new feature/enhancement\r\n\r\nRequest internal helper class SignatureHelper be publicly exposed so that the methods can be referenced outside of PowerShell environments in .NET projects. This will enable easier use and integration when not in a PowerShell context.\r\n\r\nImplementing digital signature verification is difficult to do within .NET when it comes to handling both Catalog and Embedded signatures. You all have solved this problem through the use of calling native methods. It would be a lot of work for me to do the same thing. Unfortunately, the helper class is internal which forces me to reference your implementation via Reflection. The goal of this request is to enable me as a developer to directly reference the SignatureHelper class and its methods.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\n- The SignatureHelper class and methods inside of the Authenticode.cs file be made public instead of internal.\r\n\r\nCurrently, I have to use reflection in order to reference this method in a C# project, which makes it difficult to use and wastes processing and memory. Publicly exposed methods would simplify this process.\r\n\r\n```csharp\r\npublic static class AuthenticodeTools {\r\n        static AuthenticodeTools() {\r\n            try {\r\n                string path = System.IO.Path.Combine(SimpleEndpointManagerCore.Utility.AssemblyDirectory, \"System.Management.Automation.dll\");\r\n                Assembly assembly = Assembly.LoadFile(path);\r\n                Type asmType = assembly.GetType(\"System.Management.Automation.SignatureHelper\");\r\n                AuthenticodeTools._methodGetSignature = asmType.GetMethod(\"GetSignature\", BindingFlags.NonPublic | BindingFlags.Static);\r\n            } catch(Exception ex) {\r\n                string error = \"An exception occurred while looking up the System.Management.Automation.SignatureHelper.GetSignature() method.\" + ex.Message;\r\n                Log.Error.AddEntry(new ErrorLogEntry(error));\r\n            }\r\n        }\r\n\r\n        public static SignatureInfo GetSignature(string path) {\r\n            if(AuthenticodeTools._methodGetSignature == null) {\r\n                return null;\r\n            }\r\n\r\n            object signature = AuthenticodeTools._methodGetSignature.Invoke(null, new object[] { path, null });\r\n            Type type = signature.GetType();\r\n            SignatureInfo result = new SignatureInfo();\r\n            result.IsOSBinary = (bool)type.GetProperty(\"IsOSBinary\").GetValue(signature);\r\n            result.SignatureType = (SignatureType)type.GetProperty(\"SignatureType\").GetValue(signature);\r\n            result.SignerCertificate = (X509Certificate)type.GetProperty(\"SignerCertificate\").GetValue(signature);\r\n            result.Status = (SignatureStatus)type.GetProperty(\"Status\").GetValue(signature);\r\n            result.StatusMessage = (string)type.GetProperty(\"StatusMessage\").GetValue(signature);\r\n            result.TimeStamperCertificate = (X509Certificate)type.GetProperty(\"TimeStamperCertificate\").GetValue(signature);\r\n\r\n            return result;\r\n        }\r\n\r\n        private static MethodInfo _methodGetSignature;\r\n    }\r\n```\r\n\r\nSource code:\r\nhttps://github.com/PowerShell/PowerShell/blob/c679536bb80445134c6b3f03b5127d22aa858816/src/System.Management.Automation/security/Authenticode.cs#L46-L646",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Why do you need to reference PowerShell? \r\n.Net Core now supports on all platforms the old API https://blogs.msdn.microsoft.com/windowsmobile/2006/05/17/programmatically-checking-the-authenticode-signature-on-a-file/\r\n\r\n\r\n<blockquote><img src=\"https://blogs.msdn.microsoft.com/windowsmobile/wp-content/themes/microsoft-msdn/images/favicon-msdn.png\" width=\"48\" align=\"right\"><div>Windows Mobile Team Blog</div><div><strong><a href=\"https://blogs.msdn.microsoft.com/windowsmobile/2006/05/17/programmatically-checking-the-authenticode-signature-on-a-file/\">Programmatically checking the Authenticode signature on a file</a></strong></div><div>While I was at MEDC 2006, someone asked me if there was a way to find out programatically what certificate a file is signed with. The answer is yes, and it is really easy using the cryptography libraries on the .Net Framework. (This is desktop code). Don\u2019t forget to add a reference to the cryptography...</div></blockquote>",
      "created_at": "2019-11-09T16:36:34Z",
      "updated_at": "2019-11-09T16:37:33Z"
    },
    {
      "author": "FusionCarcass",
      "author_association": "NONE",
      "body": "There are two types of digital signatures: (1) Catalog and (2) Embedded or\nAuthenticode. The code referenced in the link you provided does not support\ncatalog signatures, but the internal class SignatureHelper in the power\nshow library supports both catalog and embedded signatures. That is why I\nwould like that API exposed so I don't have to reimplement all of the ugly\nnative interrupt that you all already solved with the SignatureHelper class.\n\nI mean, I still reference it now using reflection, but it's kind of an ugly\nhack and it's not quite as important.\n\nOn Sat, Nov 9, 2019, 10:37 AM Ilya <notifications@github.com> wrote:\n\n> Why do you need to reference PowerShell?\n> .Net Core now support on all platforms the old API\n> https://blogs.msdn.microsoft.com/windowsmobile/2006/05/17/programmatically-checking-the-authenticode-signature-on-a-file/\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/PowerShell/PowerShell/issues/11023?email_source=notifications&email_token=ABTLRFPTENWNOW3W5C4IS4DQS3RMHA5CNFSM4JLAKW5KYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEDUJ5SY#issuecomment-552115915>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ABTLRFI67RDCDLYN3YZXJJTQS3RMHANCNFSM4JLAKW5A>\n> .\n>\n",
      "created_at": "2019-11-09T18:31:06Z",
      "updated_at": "2019-11-09T18:31:06Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If you project is PowerShell-based you could use  GetAuthenticodeSignatureCommand cmdlet.",
      "created_at": "2019-11-09T18:46:33Z",
      "updated_at": "2019-11-09T18:46:33Z"
    },
    {
      "author": "FusionCarcass",
      "author_association": "NONE",
      "body": "My project is a .NET Framework library. I thought about loading up the\nPowerShell runtime within my library, but that was even more overhead than\nthe reflection technique I posted.\n\nOn Sat, Nov 9, 2019, 12:47 PM Ilya <notifications@github.com> wrote:\n\n> If you project is PowerShell-based you could use\n> GetAuthenticodeSignatureCommand cmdlet.\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/PowerShell/PowerShell/issues/11023?email_source=notifications&email_token=ABTLRFLBWY4MVF4YXSRO3ETQS4ATVA5CNFSM4JLAKW5KYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEDUMQJI#issuecomment-552126501>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ABTLRFL27NOYIGIRDBZP67TQS4ATVANCNFSM4JLAKW5A>\n> .\n>\n",
      "created_at": "2019-11-09T18:59:32Z",
      "updated_at": "2019-11-09T18:59:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think your request would make sense for PowerShell related project but otherwise no.\r\nThe code is under MIT and you could fork and create new library.",
      "created_at": "2019-11-09T19:33:19Z",
      "updated_at": "2019-11-09T19:33:19Z"
    }
  ],
  "created_at": "2019-11-08T23:16:02Z",
  "number": 11023,
  "state": "open",
  "title": "[Feature Request] Expose Internal Helper Class SignatureHelper to Reference Outside of PowerShell",
  "updated_at": "2019-11-09T19:33:19Z"
}