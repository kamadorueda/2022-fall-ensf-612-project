{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16018",
  "author": "doctordns",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nI am using PowerShell 7.x on a Win 11 box. I am using the Active Directory cmdlets to manage an AD and have observed a very weird behaviour (tested on 7.1.4 and 7.2.preview9. If I use ``Get-ADUser`` to return an AD user, I can store the returned object in a variable and use the variables properties (as you would expect). However, if I type a property name wrong (you all know how lousy my typing is), I discover that PowerShell creates a property of the same name. LIke this:\r\n\r\n```powershell-console\r\nPS C:\\Foo> $PSVersionTable.PSVersion.tostring()\r\n7.2.0-preview.9\r\nPS C:\\Foo> $User = Get-ADUser -Identity JerryG\r\nPS C:\\Foo> $User.Name\r\nJerry Garcia\r\nS C:\\Foo> $User | Get-Member n*\r\n\r\n   TypeName: Microsoft.ActiveDirectory.Management.ADUser\r\n\r\nName                                MemberType Definition\r\n----                                ---------- ----------\r\nName                                Property   System.String Name {get;}\r\n\r\nPS C:\\Foo> $User.nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAme      # now for the fun\r\nPS C:\\Foo> $User | Get-Member n*\r\n\r\n   TypeName: Microsoft.ActiveDirectory.Management.ADUser\r\n\r\nName                                MemberType Definition\r\n----                                ---------- ----------\r\nnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAme Property   Microsoft.ActiveDirectory.Management.ADPropertyValueCollection nAAAAAAA\u2026\r\nName                                Property   System.String Name {get;}\r\n```\r\n\r\nShould PowerShell be adding properties to an object when the property did not previously exist? Or is this some arcane behaviour on the part of the AD objects? \r\n\r\nI am baffled!\n\n### Expected behavior\n\n```console\nPS C:\\Foo> $User.nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAme      # now for the fun\r\nPS C:\\Foo> $User | Get-Member n*\r\n\r\n   TypeName: Microsoft.ActiveDirectory.Management.ADUser\r\n\r\nName                                MemberType Definition\r\n----                                ---------- ----------\r\nName                                Property   System.String Name {get;}\n```\n\n\n### Actual behavior\n\n```console\nSee above - accessing any non-existant property name results in a new property of that name being added to the object.\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nPS C:\\Foo> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0-preview.9\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0-preview.9\r\nOS                             Microsoft Windows 10.0.22000\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0, 5.0, 5.1.10032.0, 6.0.0, 6.1.0, 6.2.0, 7.0.0, 7.1.0, 7.2.0-preview\u2026\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2021-09-01T13:00:38Z",
  "comments": [
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "The underlying type appears to be some form of dictionary/collection.  \r\n```\r\nPS> $adUser.psobject.typenames\r\nMicrosoft.ActiveDirectory.Management.ADUser\r\nMicrosoft.ActiveDirectory.Management.ADAccount\r\nMicrosoft.ActiveDirectory.Management.ADPrincipal\r\nMicrosoft.ActiveDirectory.Management.ADObject\r\nMicrosoft.ActiveDirectory.Management.ADEntity\r\nMicrosoft.ActiveDirectory.Management.ADPropertyCollection  <<===\r\nSystem.Object\r\n```\r\nI suppose it is not too surprising that PS allows you to modify that collection.  Whatever properties you add, show up in the `ModifiedProperties` property and `GetEnumerator()` output.",
      "created_at": "2021-08-30T21:12:57Z",
      "updated_at": "2021-08-30T21:12:57Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "The AD objects are odd, at best. Whatever behaviour this is, it's something defined by the AD module itself.",
      "created_at": "2021-08-30T23:17:43Z",
      "updated_at": "2021-08-30T23:17:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What behavior is in Windows PowerShell?",
      "created_at": "2021-08-31T04:26:06Z",
      "updated_at": "2021-08-31T04:26:06Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "> What behavior is in Windows PowerShell?\r\n\r\nWhile the output is slightly different, it does the same thing. :-( \r\n\r\nThus, I suspect this is a 'feature' of the module - but I've never seen this behaviour on any object before. I'm curious as to how accessing a non-existent property causes the property to be created and populated? ",
      "created_at": "2021-08-31T08:51:36Z",
      "updated_at": "2021-08-31T08:51:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I guess the cmdlet read limited set of properties and if user want change a property which is not in the list the module would have to do a request of AD schema that is a performance lost. So they postpone the check until change request is sent to server.",
      "created_at": "2021-08-31T10:58:49Z",
      "updated_at": "2021-08-31T10:58:49Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as external and has not had any activity for **1 day**. It has been be closed for housekeeping purposes.",
      "created_at": "2021-09-01T13:00:37Z",
      "updated_at": "2021-09-01T13:00:37Z"
    }
  ],
  "created_at": "2021-08-30T15:21:02Z",
  "labels": [
    "Issue-Question",
    "Resolution-External"
  ],
  "number": 16018,
  "state": "closed",
  "title": "AD Cmdlets add properties to AD Objects when accessing non-existent properties",
  "updated_at": "2021-09-01T13:00:38Z"
}