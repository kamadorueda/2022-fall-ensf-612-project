{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11185",
  "author": "silijon",
  "body": "# PR Summary\r\n\r\nCreates a dotnet core native implementation of the CryptoUtils key exchange enabling cross-platform remote sessions to successfully serialize SecureString.\r\n\r\n## PR Context\r\n\r\nCurrently, after importing a remote session between a Windows and a Linux host (in either direction), any imported cmdlets parameterized with SecureString are broken-by-design. There is a lazily triggered operation that happens during a SecureString serialization that uses the windows native CAPI crypto functions (e.g. CryptGenKey) to do the following:\r\n\r\n1. Generate a public/private keypair.\r\n2. Export/import the public key.\r\n3. Generate a symmetric session key.\r\n4. Encrypt and exchange the session key.\r\n5. Encrypt the SecureString for transit.\r\n\r\nThe implementation of this protocol is conditioned on the UNIX compile flag and, for non-Windows builds, it simply throws a PSCryptoException. The result is that any and all cmdlets that use a SecureString parameter are broken for cross-platform importation/invocation.\r\n\r\nThis PR fixes this problem by doing the following:\r\n\r\n1. Extracts an interface from _PSRSACryptoServiceProvider_.\r\n\r\n2. Re-names the current _PSRSACryptoServiceProvider_ to _Win32PSRSACryptoServiceProvider_.\r\n\r\n3. Implements _CorePSRSACryptoServiceProvider_ with the same external semantics as _Win32PSRSACryptoServiceProvider_ but uses the core-compatible AES and RSA classes to do key generation, importation, exportation, encrypt, and decrypt.\r\n\r\n4. Uses a small set of conversions to enable _CorePSRSACryptoServiceProvider_ to return/digest the key blob formats to/from the documented CAPI formats so as to retain compatibility with native windows systems.\r\n\r\n5. Conditions the use of _CorePSRSACryptoServiceProvider_ on the UNIX compile flag.\r\n\r\n*Notes* \r\n\r\n- I looked for an issue specifically for this problem and, while there are a number of closed issues relating to more general SecureString problems (having to do with the DPAPI and other things) I didn't see one directly related to this. Would be happy to tag an issue in here if I just missed it.\r\n\r\n- This PR fixes the same issue raised with the PS team in discussion with the SkyKick team.  Specifically @PaulHigin (via email) and @TylerLeonhardt (on his livestream).\r\n\r\n## PR Checklist\r\n\r\n- [X] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [X] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [X] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [X] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [X] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [X] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-02-19T20:28:44Z",
  "comments": [
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "[![CLA assistant check](https://cla.opensource.microsoft.com/pull/badge/signed)](https://cla.opensource.microsoft.com/PowerShell/PowerShell?pullRequest=11185) <br/>All CLA requirements met.",
      "created_at": "2019-11-24T23:42:51Z",
      "updated_at": "2019-12-12T18:26:37Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "This will likely fix the local debugging experience for Azure Functions on macOS and Linux which catastrophically fails when you store a SecureString to a variable which triggers the key exchange.\r\n\r\nIm excited at the impact this change could have!",
      "created_at": "2019-11-25T05:13:24Z",
      "updated_at": "2019-11-25T05:13:24Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "SecureString is not implemented with encryption on non-Windows platforms.  So encryption with the symmetric key over the wire seems unneeded.  It may be better to remove it entirely.  Adding committee review tag.",
      "created_at": "2019-11-25T16:48:19Z",
      "updated_at": "2019-11-25T16:48:19Z"
    },
    {
      "author": "silijon",
      "author_association": "CONTRIBUTOR",
      "body": "Yeah, session encryption during serialization is entirely redundant if the transport is encrypted. Here I was trying to make the smallest change possible while maintaining compatibility with older version remote shells.\r\n\r\nAnother thing for consideration: I think the core AES/RSA classes fall back on the windows native libraries in their implementation?  If so, you may consider just dropping Win32PSRSACryptoServiceProvider altogether. ",
      "created_at": "2019-11-25T17:12:17Z",
      "updated_at": "2019-11-25T17:12:17Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Yeah, I am beginning to see your point.  This may be the best way moving forward and keeping backward compatibility.  There is still the deadlock issue when server initiates key exchange, but I think that can be fixed separately.\r\n\r\nI would like to get rid of `Win32PSRSACryptoServiceProvider`.  Even if dotNet core implementation does not fall back, is there a reason to keep it?  Isn't the core version compatible ... it would need to be for full x-plat compatibility to older versions of PowerShell.",
      "created_at": "2019-11-25T23:55:34Z",
      "updated_at": "2019-11-25T23:55:34Z"
    },
    {
      "author": "silijon",
      "author_association": "CONTRIBUTOR",
      "body": "Personally, I think getting rid of `Win32PSRSACryptoServiceProvider` is the right move but I wasn't sure if you guys had a reason to leave the native windows crypto stuff in.  So I tried to do as light a touch as possible.\r\n\r\nI'd be happy to refactor it out.  It'll allow a lot of code and compiler conditions to be removed from `CryptoUtils` and simplify the whole thing.  I think it's a good trade-off to ensure backward compat but clean some of this stuff up.",
      "created_at": "2019-11-26T06:38:39Z",
      "updated_at": "2019-11-26T06:38:39Z"
    },
    {
      "author": "silijon",
      "author_association": "CONTRIBUTOR",
      "body": "I updated this PR to completely remove the native windows dll references and change the entire key exchange over to using dotnet core compatible aes and rsa classes.  I also consolidated the CAPI conversion code into CryptoUtils.cs and used the existing pattern of byte constant naming to be more explicit about the structure of the keyblob format conversions.  Let me know what you think.",
      "created_at": "2019-11-29T22:12:40Z",
      "updated_at": "2019-11-29T22:12:40Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Thanks @silijon, I'll take a look this week.",
      "created_at": "2019-12-02T22:32:02Z",
      "updated_at": "2019-12-02T22:32:02Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Removing `Review - Committee`, after discussing with @PaulHigin this seems like a good change to have, just need security sign-off",
      "created_at": "2019-12-04T18:21:16Z",
      "updated_at": "2019-12-04T18:21:16Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Key exchange was broken because of remaining #ifdefs in code for non-Windows platform.  Just need to change `OutOfProcServerMediator.cs and serverremotesession.cs` files to get non-Windows support.\r\nWe can do that in this PR or a separate one.",
      "created_at": "2019-12-04T23:01:43Z",
      "updated_at": "2019-12-04T23:01:43Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@silijon I have created a PR that addresses my CR comments above, and also enables key exchange for non-Windows platforms.  If you can merge my PR I think we can accept this PR.\r\n\r\nhttps://github.com/SkyKick/PowerShell/pull/1\r\n\r\nThanks for your work on this!",
      "created_at": "2019-12-06T22:31:46Z",
      "updated_at": "2019-12-06T22:31:46Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PoshChan please retry linux",
      "created_at": "2019-12-09T17:39:02Z",
      "updated_at": "2019-12-09T17:39:02Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT, successfully started retry of `PowerShell-CI-Linux`",
      "created_at": "2019-12-09T17:39:28Z",
      "updated_at": "2019-12-09T17:39:28Z"
    },
    {
      "author": "silijon",
      "author_association": "CONTRIBUTOR",
      "body": "@PoshChan please retry windows",
      "created_at": "2019-12-10T23:18:14Z",
      "updated_at": "2019-12-10T23:18:14Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@silijon, you are not authorized to request a rebuild",
      "created_at": "2019-12-10T23:18:29Z",
      "updated_at": "2019-12-10T23:18:29Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@PoshChan please retry windows",
      "created_at": "2019-12-11T04:55:04Z",
      "updated_at": "2019-12-11T04:55:04Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@vexx32, successfully started retry of `PowerShell-CI-Windows`",
      "created_at": "2019-12-11T04:55:20Z",
      "updated_at": "2019-12-11T04:55:20Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13  Where are we on this PR?  Is there anything preventing the merge?",
      "created_at": "2020-02-18T16:49:28Z",
      "updated_at": "2020-02-18T16:49:28Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@silijon Thanks for your contribution!",
      "created_at": "2020-02-20T03:35:34Z",
      "updated_at": "2020-02-20T03:35:34Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.1.0-preview.1` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.1)\n",
      "created_at": "2020-03-26T17:47:39Z",
      "updated_at": "2020-03-26T17:47:39Z"
    }
  ],
  "created_at": "2019-11-24T23:42:37Z",
  "number": 11185,
  "state": "closed",
  "title": "Allow cross-platform CAPI-compatible remote key exchange",
  "updated_at": "2020-03-26T17:47:39Z"
}