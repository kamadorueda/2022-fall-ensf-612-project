{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7262",
  "author": "iSazonov",
  "body": "PsUtils.GetModuleManifestProperties() throws an exception that is not used. Suggesion is to convert the method to PsUtils.TryModuleManifestProperties()",
  "closed_at": "2022-10-04T07:02:38Z",
  "comments": [
    {
      "author": "Jawz84",
      "author_association": "CONTRIBUTOR",
      "body": "I looked into this because it looked like an easy issue to do. I found three files where `PsUtils.GetModuleManifestProperties` is called from:  \r\n1. [/DscSupport/CimDSCParser.cs#L839](https://github.com/PowerShell/PowerShell/blob/bd6fdae73520931f0d27a29d6290e18761772141/src/System.Management.Automation/DscSupport/CimDSCParser.cs#L839)\r\n2. [/engine/Modules/AnalysisCache.cs#L103](https://github.com/PowerShell/PowerShell/blob/bd6fdae73520931f0d27a29d6290e18761772141/src/System.Management.Automation/engine/Modules/AnalysisCache.cs#L103)\r\n3. [/engine/Modules/ModuleIntrinsics.cs](https://github.com/PowerShell/PowerShell/blob/a96b4c040492e4e8f79ba243af6d43206fcd8791/src/System.Management.Automation/engine/Modules/ModuleIntrinsics.cs)\r\n\r\nIn the `ModuleIntrinsics` file, the calls are in a `try` block with an empty `catch` block. In the other two files, the error _is_ used, and written to tracer or to log: \r\n\r\nIn the `CimDSCParser` file:\r\n\r\n```csharp\r\n            catch (PSInvalidOperationException ex)\r\n            {\r\n                s_tracer.WriteLine(\r\n                    \"DSC GetModuleVersion: Error evaluating module manifest file '{0}', with error '{1}'. Skip the module '{2}'.\",\r\n                    manifestPath, ex, moduleName);\r\n            }\r\n```\r\n\r\nIn the `AnalysisCache` file:\r\n\r\n```csharp\r\n            catch (Exception e)\r\n            {\r\n                if (etwEnabled) CommandDiscoveryEventSource.Log.ModuleManifestAnalysisException(modulePath, e.Message);\r\n                // Ignore the errors, proceed with the usual module analysis\r\n                ModuleIntrinsics.Tracer.WriteLine(\"Exception on fast-path analysis of module {0}\", modulePath);\r\n            }\r\n```\r\n\r\nBased on this, I'm unsure what should be done. Options I see:\r\n- This issue should maybe just be closed.\r\n- Maybe it is an option to add a comment in the empty `catch` block in `ModuleIntrinsics` file with an explanation why the error is just suppressed?\r\n\r\nWhat do you think @iSazonov ?",
      "created_at": "2019-07-14T19:05:24Z",
      "updated_at": "2019-07-14T19:08:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@Jawz84 the idea is to replace try-catch with condition block like:\r\n```c#\r\nif ( !TryGetModuleManifestProperties() && etwEnabled )\r\n{\r\n    CommandDiscoveryEventSource.Log.ModuleManifestAnalysisException(modulePath, e.Message);\r\n    // Ignore the errors, proceed with the usual module analysis\r\n    ModuleIntrinsics.Tracer.WriteLine(\"Exception on fast-path analysis of module {0}\", modulePath);\r\n}",
      "created_at": "2019-07-15T04:26:57Z",
      "updated_at": "2019-07-15T04:26:57Z"
    },
    {
      "author": "Jawz84",
      "author_association": "CONTRIBUTOR",
      "body": "Ok thanks for giving an example. Will look at that.",
      "created_at": "2019-07-15T16:21:14Z",
      "updated_at": "2019-07-15T16:21:14Z"
    }
  ],
  "created_at": "2018-07-11T04:32:31Z",
  "labels": [
    "Issue-Code Cleanup"
  ],
  "number": 7262,
  "state": "closed",
  "title": "Cleanup throw in PsUtils.GetModuleManifestProperties",
  "updated_at": "2022-10-04T07:02:38Z"
}