{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13361",
  "author": "SteveL-MSFT",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nBased on @PowerShell/powershell-committee discussion, we agreed that stderr should not be treated as an `ErrorRecord` as many native commands use that as an alternate stream from stdout and it does not signify an error (like verbose or progress information).  Stderr output is still wrapped as ErrorRecords, but the runtime no longer applies `$ErrorActionPreference` if the ErrorRecord comes from a native command.  The diff makes the change look bigger than it is, but it's simply wrapping existing code that applies `$ErrorActionPreference` and writing to `$Error` to not apply if the ErrorRecord is simply wrapping stderr.\r\n\r\nUpdated `TestExe` to have a switch to write output to stderr.\r\n\r\n## PR Context\r\n\r\nFix https://github.com/PowerShell/PowerShell/issues/3996\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [x] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [x] Experimental feature name(s): `PSNotApplyErrorActionToStderr`\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [x] Issue filed: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/6466\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-08-07T21:19:18Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "CodeFactor is an existing issue complaining about the complexity of the method that was updated.  Not going to change in this PR.",
      "created_at": "2020-08-06T02:28:58Z",
      "updated_at": "2020-08-06T02:28:58Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "Can the stderr ErrorRecords still be captured with `-ErrorVariable`?",
      "created_at": "2020-08-08T08:19:03Z",
      "updated_at": "2020-08-08T08:19:03Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@felixfbecker No it cannot be captured by `-ErrorVariable` after this change. I believe this is intentional but @SteveL-MSFT can clarify it.",
      "created_at": "2020-08-10T21:24:22Z",
      "updated_at": "2020-08-10T21:24:22Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "Basically my question is: How can a user still run a native command, get the stdout output if it was successful, but also get access to the stderr output if it was unsuccessful? That's a very important use case.\r\nMaybe this is solved in conjunction with #3415, e.g. the stderr output would be available on the exception object?",
      "created_at": "2020-08-11T07:47:04Z",
      "updated_at": "2020-08-11T07:47:04Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> How can a user still run a native command, get the stdout output if it was successful, but also get access to the stderr output if it was unsuccessful? That's a very important use case.\r\n\r\nI'm curious how this is done today in console before this PR? In console, unless we redirect the stderr stream, the message written to stderr from the native command will always handled by the console (print on console).\r\n\r\n> Maybe this is solved in conjunction with #3415, e.g. the stderr output would be available on the exception object?\r\n\r\nThe discussion on it so far is that the exception only has the exit code, not the content from stderr.\r\nThe idea is: many native commands write to stderr not as error messages, but an alternate stream for additional information that doesn't make sense to write to stdout. This includes content such as verbose or progress output.\r\nBut that can be further discussed in #3415.",
      "created_at": "2020-08-11T22:36:54Z",
      "updated_at": "2020-08-11T22:36:54Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.1.0-preview.6` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.6)\n",
      "created_at": "2020-08-17T22:21:46Z",
      "updated_at": "2020-08-17T22:21:46Z"
    }
  ],
  "created_at": "2020-08-06T00:08:14Z",
  "number": 13361,
  "state": "closed",
  "title": "Change `$ErrorActionPreference` to not affect stderr output",
  "updated_at": "2020-08-17T22:21:46Z"
}