{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1762",
  "author": "SteveL-MSFT",
  "body": "## Steps to reproduce\r\n\r\nset-StrictMode -Version 'Latest'\r\n$PSDefaultParameterValues['*:ErrorAction'] = 'Stop'\r\n\r\nclass TestAttribute : System.Attribute {\r\n}\r\nclass TestClass {\r\n[int] [TestAttribute()] $i = 5\r\n}\r\n\r\n S C:\\Users\\scbaker> Import-Module E:\\tmp\\Test-Module2.psm1\r\n\r\nImport-Module : The invoked member is not supported before the type is created.\r\nAt line:1 char:1\r\n- Import-Module E:\\tmp\\Test-Module.psm1\r\n- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n- CategoryInfo : NotSpecified: (:) [Import-Module], NotSupportedException\r\n- FullyQualifiedErrorId : System.NotSupportedException,Microsoft.PowerShell.Commands.ImportModuleCommand\r\n\r\nScotia Baker:\r\n\r\nBecause class names aren't visible outside their defining module, the only workaround I've found is using Add-Type.  Defining the attribute in another module using PS5 class support does not work due to lexical scoping of class names.\r\n\r\nISSUE:\r\n\r\nA custom attribute class cannot be defined and used within the same PowerShell module.\r\n\r\nIMPACT:\r\n\r\n(1) Debug time diagnosing the issue.  The import failure does not say what member or type is involved, making debugging difficult.\r\n\r\n(2) An extra module must be created to define attribute classes regardless of logical code layout.\r\n\r\nThe primary impact is in the debugging time; an extra module may be ugly but it's easy enough.  A fix for the issue is of course preferred.\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "TFS:7336218\n",
      "created_at": "2016-09-29T20:24:57Z",
      "updated_at": "2016-09-29T20:24:57Z"
    },
    {
      "author": "wisemoth",
      "author_association": "NONE",
      "body": "In advance of a fix can the workaround be clarified?\r\n> the only workaround I've found is using Add-Type (zip of files attached). \r\n\r\nI can't see an attachment.\r\n\r\n> (2) An extra module must be created to define attribute classes regardless of logical code layout.\r\n\r\nI've tried several ways to get my `[Attribute]`-derived class to be used by my function without success (WindowsPowershell 5.1.17763). The only way that works for me is to paste the class definition into my shell, and import modules containing functions using the attribute class.",
      "created_at": "2019-01-16T14:26:28Z",
      "updated_at": "2019-01-16T14:26:28Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "This is perfectly doable. I do this to great effect in PSKoans. However, it has some caveats.\r\n\r\nhttps://github.com/vexx32/PSKoans/blob/eac7d8250dfe49e85e12b7432ad687dcf5470f78/PSKoans/PSKoans.psm1#L16-L26\r\n\r\nYou'll notice I duplicate the definition _with_ and _without_ the `Attribute` name suffix, one inheriting from the other.\r\n\r\nI found that unlike in C# where you can _consistently_ drop the `Attribute` portion of a class name when actually using it as an attribute, you can't always do this in PS. I don't know why, but in some circumstances (e.g., class being available in _global_ scope) you can define a class called `KoanAttribute` and refer to it with `[Koan()]`. In others, you instead have to use the _actual_ name of the class. To get around this weirdness, I duplicate the class name with a short name and just use it to directly inherit the original class. Whichever it picks, I'll get it more or less correct. You have to be careful when examining attributes manually, if you ever need to do that, though.\r\n\r\nI also use this for my transform attributes in PSWordCloud:\r\n\r\nhttps://github.com/vexx32/PSWordCloud/blob/55723befc757eae27fb20dfb7dd273360c150655/PSWordCloud/Public/New-WordCloud.ps1#L7-L58\r\n\r\nAnd its use adheres to the aforementioned restriction -- its _full_ name has to be used, not the short name lacking the `Attribute` suffix on the name in the definition.\r\n\r\nhttps://github.com/vexx32/PSWordCloud/blob/55723befc757eae27fb20dfb7dd273360c150655/PSWordCloud/Public/New-WordCloud.ps1#L307-L326\r\n\r\n@SteveL-MSFT @lzybkr I'm not sure why this happens, but it's weirdly inconsistent. As I mentioned, if the type is made available in global scope (e.g., by including it as a `ScriptsToProcess` file in the module manifest), then the attribute can be referred to as `[SizeTransform()]` instead of `[SizeTransformAttribute()]`",
      "created_at": "2019-01-16T14:45:36Z",
      "updated_at": "2019-01-16T14:47:36Z"
    },
    {
      "author": "wisemoth",
      "author_association": "NONE",
      "body": "@vexx32 Thank you so much for the detailed and super-quick response.\r\n\r\n> I found that unlike in C# where you can consistently drop the Attribute portion of a class name when actually using it as an attribute, you can't always do this in PS. \r\n\r\nThis.  It had always bothered me how the \"magic\" naming worked, and I was just pondering on this further when your post appeared.  Your information has really helped me.",
      "created_at": "2019-01-16T14:58:45Z",
      "updated_at": "2019-01-16T14:58:45Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Glad I could help!\r\n\r\nYeah, the rules here are a bit funky, and the unclear errors aren't a lot of help either, unfortunately.",
      "created_at": "2019-01-16T15:39:55Z",
      "updated_at": "2019-01-16T15:39:55Z"
    }
  ],
  "created_at": "2016-08-12T19:47:14Z",
  "labels": [
    "WG-Language",
    "Up-for-Grabs"
  ],
  "number": 1762,
  "state": "open",
  "title": "Classes inheriting from [System.Attribute] cannot be defined and used in the same PowerShell module",
  "updated_at": "2019-01-16T18:30:52Z"
}