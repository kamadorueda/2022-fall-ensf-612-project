{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14692",
  "author": "JamesWTruher",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\nThis adds a new behavior for native executables which uses ArgumentList as the command arguments for the native executable.\r\n\r\n# PR Summary\r\n\r\n<!-- Summarize your PR between here and the checklist. -->\r\nThe experimental feature PSNativeCommandArgumentPassing when enabled will use the `ArgumentList` property of the `StartProcessInfo` object rather than our current mechanism of reconstructing a string when invoking a native executable.\r\n`$PSNativeCommandArgumentPassing` is a new automatic variable which allows for runtime selection of behavior. `$PSNativeCommandArgumentPassing` may be set to either `Legacy` or `Standard`, `Legacy` is the historic behavior. The default when the experimental feature is enabled is the new `Standard` behavior. \r\n\r\nThis new behavior *is a breaking change* from current behavior. This may break scripts and automation which work-around the various issues when invoking native applications. Historically, quotes must be escaped and it is not possible to provide empty arguments to a native application. This PR attempts to address these issues.\r\n\r\nnew behaviors made available by this change\r\n\r\n- literal or expandable strings with embedded quotes the quotes are now preserved\r\n```powershell\r\nPS > $a = 'a\" \"b'\r\nPS > $PSNativeCommandArgumentPassing = \"Legacy\"\r\nPS > testexe -echoargs $a 'a\" \"b' a\" \"b    \r\nArg 0 is <a b>\r\nArg 1 is <a b>\r\nArg 2 is <a b>\r\nPS > $PSNativeCommandArgumentPassing = \"Standard\"\r\nPS > testexe -echoargs $a 'a\" \"b' a\" \"b    \r\nArg 0 is <a\" \"b>\r\nArg 1 is <a\" \"b>\r\nArg 2 is <a b>\r\n```\r\n\r\n- empty strings as arguments are now preserved:\r\n```powershell\r\nPS>  $PSNativeCommandArgumentPassing = \"Legacy\"\r\nPS> testexe -echoargs '' a b ''           \r\nArg 0 is <a>\r\nArg 1 is <b>\r\nPS> $PSNativeCommandArgumentPassing = \"Standard\"\r\nPS> testexe -echoargs '' a b ''           \r\nArg 0 is <>\r\nArg 1 is <a>\r\nArg 2 is <b>\r\nArg 3 is <>\r\n```\r\n\r\nthe new behavior does not change invocations which look like this:\r\n\r\n```powershell\r\nPS> $PSNativeCommandArgumentPassing = \"Legacy\"                                            \r\nPS> testexe -echoargs -k com:port=\\\\devbox\\pipe\\debug,pipe,resets=0,reconnect          \r\nArg 0 is <-k>\r\nArg 1 is <com:port=\\\\devbox\\pipe\\debug,pipe,resets=0,reconnect>\r\nPS> $PSNativeCommandArgumentPassing = \"Standard\"                                  \r\nPS> testexe -echoargs -k com:port=\\\\devbox\\pipe\\debug,pipe,resets=0,reconnect\r\nArg 0 is <-k>\r\nArg 1 is <com:port=\\\\devbox\\pipe\\debug,pipe,resets=0,reconnect>\r\n```\r\n\r\nAdditionally, parameter tracing is now provided so `Trace-Command` will provide useful information for debugging\r\n\r\n```powershell\r\nPS> $PSNativeCommandArgumentPassing = \"Legacy\"                                           \r\nPS> trace-command -PSHOST -Name ParameterBinding { testexe -echoargs $a 'a\" \"b' a\" \"b }\r\nDEBUG: 2021-02-01 17:19:53.6438 ParameterBinding Information: 0 : BIND NAMED native application line args [/Users/james/src/github/forks/jameswtruher/PowerShell-1/test/tools/TestExe/bin/testexe]\r\nDEBUG: 2021-02-01 17:19:53.6440 ParameterBinding Information: 0 :     BIND argument [-echoargs a\" \"b a\" \"b \"a b\"]\r\nDEBUG: 2021-02-01 17:19:53.6522 ParameterBinding Information: 0 : CALLING BeginProcessing\r\nArg 0 is <a b>\r\nArg 1 is <a b>\r\nArg 2 is <a b>\r\nPS> $PSNativeCommandArgumentPassing = \"Standard\"                                            \r\nPS> trace-command -PSHOST -Name ParameterBinding { testexe -echoargs $a 'a\" \"b' a\" \"b }\r\nDEBUG: 2021-02-01 17:20:01.9829 ParameterBinding Information: 0 : BIND NAMED native application line args [/Users/james/src/github/forks/jameswtruher/PowerShell-1/test/tools/TestExe/bin/testexe]\r\nDEBUG: 2021-02-01 17:20:01.9829 ParameterBinding Information: 0 :     BIND cmd line arg [-echoargs] to position [0]\r\nDEBUG: 2021-02-01 17:20:01.9830 ParameterBinding Information: 0 :     BIND cmd line arg [a\" \"b] to position [1]\r\nDEBUG: 2021-02-01 17:20:01.9830 ParameterBinding Information: 0 :     BIND cmd line arg [a\" \"b] to position [2]\r\nDEBUG: 2021-02-01 17:20:01.9831 ParameterBinding Information: 0 :     BIND cmd line arg [a b] to position [3]\r\nDEBUG: 2021-02-01 17:20:01.9908 ParameterBinding Information: 0 : CALLING BeginProcessing\r\nArg 0 is <a\" \"b>\r\nArg 1 is <a\" \"b>\r\nArg 2 is <a b>\r\n```\r\n\r\n## PR Context\r\n\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\n\r\nInvoking native applications is sometimes very problematic because of how the application is invoked. A new property is available on the `ProcessStartInfo` object which hopes to improve the experience. This PR takes advantage of this new property.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [x] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): PSNativeCommandArgumentPassing\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [x] Issue filed: https://github.com/PowerShell/PowerShell/issues/13068\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [x] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n\r\nThe impact on completions may be affected if those completers are calling native applications.",
  "closed_at": "2021-04-01T21:54:10Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @mklement0 Please look the PR.",
      "created_at": "2021-02-02T18:34:49Z",
      "updated_at": "2021-02-02T18:34:49Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "* While switching to `.ArgumentList` is definitely called for and fully solves the problem _on Unix-like platforms_, _on Windows_ there are _also_ vital accommodations that we need to make for common use cases, notably calling _batch files_ and _`misexec`-style CLIs_, as detailed in ~~[this comment](https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-738073284)~~ [_update_: see #15143].\r\n\r\n  * If there's disagreement about these accommodations, let's have a discussion, but none has happened yet (except with other community members), so, yes, perhaps an RFC is necessary.\r\n\r\n* Both improvements should be part of the _same_ PR, to once and for all solve 100% of all argument-passing problems on Unix, and 99% of all problems on Windows (the remaining problems cannot be fixed generically, and must be addressed by users via `--%`).\r\n\r\n* That is, only _one_ (opt-in) breaking change should be made, and it should be controlled by a _single_ preference variable (which is the next best solution if the breaking change is deemed unacceptable).\r\n\r\n* As for the preference variable:\r\n\r\n  * First, the name `$PSNativeApplicationUsesArgumentList` is too technical to begin with (end users who expect argument-passing in their shell to \"just work\" cannot be expected not know about plumbing details such as `.Arguments` vs. `.ArgumentList`, which would make discovery difficult); also, the variable should be `[bool]`-typed (while assigning `1` works through implicit conversion, we should show `$true` / `$false` in the docs).\r\n\r\n  * Second, with the PR encompassing the Windows-only accommodations too, a broader name is called for. I'm struggling to come up with a good suggestion. `$PSFixNativeArgumentPassing`?",
      "created_at": "2021-02-03T20:55:38Z",
      "updated_at": "2021-04-07T12:39:39Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "For the variable, I prefer `$PSNativeCommandArgumentParsing` as an enum with values `ArgumentList`, and `String` (can't think of something better...).",
      "created_at": "2021-02-03T23:38:46Z",
      "updated_at": "2021-02-03T23:38:46Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT:\r\n\r\n>  I prefer `$PSNativeCommandArgumentParsing`\r\n\r\nNot sure if it's just a typo, but to be clear: this isn't about argument _parsing_, it's about argument _passing_ (which, on Windows only, also involves _encoding_, as a single string - which `.ArgumentList` will do for us, but the suggested accommodations will have to be coded manually).\r\n\r\n> an enum with values `ArgumentList`, and `String` (can't think of something better...).\r\n\r\nI can see why you would want to avoid the word \"fix\" in the variable name - even though that's what it comes down to.\r\n\r\nAgain, what matters to the user is only the following - not _technical_ characterizations based on plumbing users may not even know of:\r\n\r\n* Is the *old* behavior in effect, where I need to apply *workarounds*?\r\n* Or is the *new* behavior in effect, where things work as expected?\r\n\r\nThus, if you do want an `enum`, I suggest a `$PSNativeCommandArgumentPassing` variable with the following enumeration values, corresponding to the above:\r\n\r\n* `Legacy`\r\n* `Standard` (or similar)\r\n\r\n\r\n",
      "created_at": "2021-02-04T15:25:23Z",
      "updated_at": "2021-02-04T15:52:43Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, we agreed on automatic variable `$PSNativeCommandArgumentPassing` as an enum with values `Legacy` and `Standard` (default).  This feature needs to be an ExperimentalFeature.",
      "created_at": "2021-03-03T23:41:17Z",
      "updated_at": "2021-03-03T23:41:17Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@daxian-dbw  Can you update your review?",
      "created_at": "2021-03-24T22:03:49Z",
      "updated_at": "2021-03-24T22:03:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 Do you want to review the PR?",
      "created_at": "2021-03-31T18:36:48Z",
      "updated_at": "2021-03-31T18:36:48Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@PoshChan Please remind me in 1 hour",
      "created_at": "2021-03-31T19:10:48Z",
      "updated_at": "2021-03-31T19:10:48Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13, this is the reminder you requested 1 hour ago",
      "created_at": "2021-03-31T20:11:06Z",
      "updated_at": "2021-03-31T20:11:06Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Since this PR introduces a _breaking_ change anyway and is being implemented as an _experimental_ feature, I would like to understand why don't we implement mklement0's proposal in full as an experimental feature and _close the long history_?\r\nSee:\r\n- https://github.com/PowerShell/PowerShell/pull/14692#issuecomment-772816850\r\n- https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-738073284\r\n- https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-738073284\r\n\r\nAlso I asked previously and still wonder why @mklement0 is not in a PowerShell Committee.  I believe MSFT team would have saved a lot of time and effort in this case. ",
      "created_at": "2021-04-01T13:33:31Z",
      "updated_at": "2021-04-01T13:33:31Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@iSazonov  can you open a new issue w.r.t. https://github.com/PowerShell/PowerShell/pull/14692#issuecomment-811911407 and mark it for committee review?",
      "created_at": "2021-04-01T20:30:35Z",
      "updated_at": "2021-04-01T20:30:35Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@PoshChan Please remind me in 1 Hour",
      "created_at": "2021-04-01T20:31:20Z",
      "updated_at": "2021-04-01T20:31:20Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "The (hopefully) final proposal is now in https://github.com/PowerShell/PowerShell/issues/14747#issuecomment-782892238",
      "created_at": "2021-04-01T20:36:13Z",
      "updated_at": "2021-04-01T20:36:13Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13, this is the reminder you requested 1 Hour ago",
      "created_at": "2021-04-01T21:31:40Z",
      "updated_at": "2021-04-01T21:31:40Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.2.0-preview.5` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0-preview.5)\n",
      "created_at": "2021-04-14T23:59:47Z",
      "updated_at": "2021-04-14T23:59:47Z"
    }
  ],
  "created_at": "2021-02-02T01:23:03Z",
  "number": 14692,
  "state": "closed",
  "title": "Native invocation using `ArgumentList`",
  "updated_at": "2021-04-15T05:39:04Z"
}