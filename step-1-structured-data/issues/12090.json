{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12090",
  "author": "he852100",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\nThere is no way to create a persistent local task, the session will be closed or disconnected and the task will terminate.\r\n\r\nIn addition, `nohup` has `&` characters and cannot be used in powershell\r\n# Steps to reproduce\r\n\r\n```powershell\r\n\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\n\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\n\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\n\r\n```\r\n",
  "closed_at": "2020-03-10T14:32:22Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "If you would like to see a PowerShell-native solution, I suggest you flesh out your proposal with more details and use cases.\r\nGenerally, please use the right issue template, and fill in the section templates.\r\n\r\n> In addition, nohup has & characters and cannot be used in powershell\r\n\r\nThe `nohup` utility doesn't itself use `&`; it is typically called with _Bash_'s postpositional `&` operator so as to launch the program passed to `nohup` _in the background_, given that `nohup` itself executes synchronously.\r\n\r\nWhile using _PowerShell's_ `&` background operator (or `Start-Job`) isn't an option, because terminating the job will also terminate child processes launched from it, you can use `Start-Process` to achieve the desired effect.\r\n\r\nThe following example launches a background PowerShell instance that stays alive even after you close the launching terminal; it emits a `.`  every second, and `nohup` collects both stdout and stderr output in file `nohup.out` in the current directory:\r\n\r\n```powershell\r\n# Runs for 2 minutes, and collects both stdout and stderr output in ./nohup.out\r\nStart-Process nohup 'pwsh -nop -c \"1..120 | % { write-host . -nonewline; sleep 1 }\"'\r\n```",
      "created_at": "2020-03-10T13:32:03Z",
      "updated_at": "2020-08-26T14:51:10Z"
    },
    {
      "author": "he852100",
      "author_association": "NONE",
      "body": "It does not have a consistent experience, so what is the significance of the existence of powershell?",
      "created_at": "2020-03-10T14:08:14Z",
      "updated_at": "2020-03-10T14:08:14Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "To recap:\r\n\r\n* Your initial post contained a cursory reference to a scenario that currently isn't natively supported in PowerShell (and generally has no direct, tool-based implementation _on Windows_).\r\n\r\n   * I encouraged you to detail the scenario, make a case for it, and perhaps suggest a design / implementation. I personally can see that providing PowerShell-specific, cross-platform support (including in Windows) for this scenario could be useful.\r\n\r\n* Your initial post also contained misleading information about `nohup`, which I've tried to correct, along with showing how to make `nohup` work in PowerShell, after all.\r\n\r\n  * If you disagree with the correction or have a problem with the workaround, please argue specific points.\r\n\r\nAs you can see, there are constructive ways to respond to the feedback you've been given; your previous comment doesn't fall into that category.\r\n\r\n\r\n\r\n",
      "created_at": "2020-03-10T14:26:39Z",
      "updated_at": "2020-08-26T11:05:24Z"
    },
    {
      "author": "kasini3000",
      "author_association": "NONE",
      "body": "@mklement0 \r\n\r\n1 Why should I use \u2018nohup + bash\u2019 in powershell?\r\nMy main powershell process needs to exit, and keep subprocess run\uff08bash\uff09\r\nusing bash -c instead of pwsh -c, mainly because pwsh occupies more memory.\r\n\r\n2 How to use nohup + & in powershell?\r\n$nohupargs = @\"\r\nbash -c \"docker pull xxx\"> /dev/null 2>&1 &\r\n\"@\r\nStart-Process -FilePath /usr/bin/nohup -ArgumentList $nohupargs\r\n\r\n3 What's wrong with this use?\r\nThis usage is not perfect, \"> /dev/null\" does not work,\"nohup.out\" file always found.\r\nif main process is bash ,\"> /dev/null\" will work.",
      "created_at": "2020-08-26T08:04:03Z",
      "updated_at": "2020-08-26T08:04:03Z"
    },
    {
      "author": "kasini3000",
      "author_association": "NONE",
      "body": "oh,I was the one who just got stuck. With start-process, nohup is not needed.",
      "created_at": "2020-08-26T10:57:29Z",
      "updated_at": "2020-08-26T10:57:29Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@kasini3000 \r\n\r\nYou _do_ need `nohup` if you want the process to stay alive after exiting the originating shell.\r\n\r\nIt is only on Windows you don't need it, because `Start-Process` can create separate console windows there, which you can hide with `-WindowStyle Hidden`; e.g.:\r\n\r\n```powershell\r\n# Runs for 2 minutes and collects all output in ./out.txt\r\nStart-Process -WindowStyle Hidden pwsh '-c \"1..120 | % { Write-Output . >> out.txt; sleep 1 }\"'\r\n```\r\n\r\n---\r\n\r\nThere's no need to involve `bash` in your example, assuming you don't mind collecting output in `nohup.out`:\r\n\r\n```powershell\r\n# Short for: Start-Process -FilePath /usr/bin/nohup -Args 'docker pull xxx'\r\nStart-Process /usr/bin/nohup 'docker pull xxx'\r\n```\r\n\r\nIf you do want to suppress all output, you can do what you did, except you don't need the trailing `&`, and you must place the redirections inside the `-c` argument:\r\n\r\n```powershell\r\nStart-Process /usr/bin/nohup 'bash -c \"docker pull xxx >/dev/null 2>&1\"'\r\n```\r\n\r\nHowever, note that `nohup` _always_ creates a `nohup.out` file - even if no output is produced.\r\n(If there _is_ output and a `nohup.out` file already exists, it is _appended_ to.)\r\n\r\n",
      "created_at": "2020-08-26T15:03:26Z",
      "updated_at": "2020-08-26T15:03:26Z"
    },
    {
      "author": "kasini3000",
      "author_association": "NONE",
      "body": "It turned out to be so, thank you",
      "created_at": "2020-08-28T13:48:14Z",
      "updated_at": "2020-08-28T13:48:14Z"
    }
  ],
  "created_at": "2020-03-09T18:10:17Z",
  "number": 12090,
  "state": "closed",
  "title": "Tasks in linux",
  "updated_at": "2020-08-28T13:48:15Z"
}