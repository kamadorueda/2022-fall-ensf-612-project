{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13204",
  "author": "mklement0",
  "body": "Note: This idea was first proposed by @bergmeister and fleshed out by @lzybkr in https://github.com/PowerShell/PowerShell/issues/2337#issuecomment-391152107, but only in the context of a proposal focused on something different (allowing indentation of the closing delimiter of here-strings).\r\n\r\n## Summary of the new feature/enhancement\r\n\r\nTo complement the existing raw / semi-raw, invariably _multi-line_ here-string literals (`@'<newline>...<newline>'@` /  `@\"<newline>...<newline>\"@`), it would be convenient  to have a _single-line_ variant.\r\n\r\nFor lack of a better term I'll call the new variant a _raw string literal_.\r\n\r\nFor instance, here's how you could express verbatim string `6' 2\"`:\r\n\r\n```powershell\r\n# Note: leading and trailing whitespace inside the value will be ignored.\r\n\r\n# single-quoted\r\n@' 6' 2\" '@\r\n\r\n# double-quoted - as with double-quoted here-strings, string interpolation and `-escaping would work.\r\n@\" $feet' 2\" \"@\r\n```\r\n\r\nTo avoid the need for escaping, allow a _variable_ number of quotes in the delimiter to avoid the need for escaping; e.g.:\r\n\r\n```powershell\r\n@'' using @' in here is now fine ''@\r\n```\r\n\r\nA use case that would benefit is wanting to pass a command line written for the native shell _as-is_ to it (see also: #13068); e.g. (on Unix):\r\n\r\n```powershell\r\n# WISHFUL THINKING\r\nsh -c @' python -c 'print(\"hi\")' | cat -n '@\r\n```\r\n\r\n## Proposed technical implementation details (optional)\r\n\r\n**Backward compatibility assessment:**\r\n\r\nSince with the current here-string literals no (non-whitespace) characters are allowed on the same line after the opening delimiter, and given that trying to do that is currently a _syntax error_, this new string-literal variant is safe to introduce.\r\n\r\n**Disambiguation:**\r\n\r\nAnything that starts with `@'` or `@\"` and is _followed by non-whitespace characters on the same line_ is interpreted as the new _raw_ string literal, requiring the closing delimiter to be _on the same line_.\r\n\r\n   * Note: Conceivably, we could let the new variant span multiple lines as well, but it strikes me as conceptually cleaner to restrict the multi-line forms to the established here-string syntax.\r\n\r\n**Insignificant leading and trailing whitespace:**\r\n\r\nIgnoring whitespace surrounding the value serves two purposes:\r\n\r\n* It makes it easier to visually distinguish the delimiters from the enclosed value (e.g., `@' 6' 2\" '@` vs. `@'6' 2\"'@`)\r\n* Since supporting a _variable_ number of quotes in the delimiter is desirable (e.g., `@'' @' is fine ''@`), ignoring surrounding whitespace solves the problem of enclosed values _starting or ending with a quote_ that would otherwise break the syntax (e.g., to embed verbatim `'hi`, `@''hi'@` wouldn't work syntactically, but `@' 'hi '@` - with surrounding whitespace stripped on parsing - does.\r\n\r\n@TSlivede proposes the following alternatives, which consider all whitespace significant, albeit at the expense of the visual separation between the delimiters and the value:\r\n  * limiting the number of quotes to _3 at most_ - see [below](https://github.com/PowerShell/PowerShell/issues/13204#issuecomment-660361402).\r\n  * instead of making the number of _quotes_ variable, duplicate the `@` symbol - see [below](https://github.com/PowerShell/PowerShell/issues/13204#issuecomment-660363144).\r\n\r\n\r\n**Values that need surrounding whitespace to be significant:**\r\n\r\nIn cases where you need the enclosed values _start and/or end with whitespace_, the following solutions are possible:\r\n\r\n* Use the _double-quoted_ form, where `` ` ``-escaping can be used to escape the spaces.\r\n  * E.g., to get verbatim `<space>a\"b'<space>`, you'd use ``@\"` a\"b'` \"@``.\r\n\r\n * Alternatively, @TSlivede proposes considering only _one_ leading/trailing space insignificant, in which case you merely need to add one extra space each to values with significant whitespace, in both the single- and double-quoted forms; e.g., `@'<space>  a\"b <space>'@` and ``@\"<space> a\"b <space>\"@``. However, a concern is that user may not expect that only a _specific number_ (i.e., one) of spaces is insignificant; see [below](https://github.com/PowerShell/PowerShell/issues/13204#issuecomment-660344486).\r\n\r\n* Alternatively, use the established multi-line here-string forms, where all whitespace is significant.\r\n\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "TSlivede",
      "author_association": "NONE",
      "body": "Thanks for creating an explicit issue for this!\r\n\r\nAlternative suggestion regarding the removal of \"Insignificant leading and trailing whitespace\":\r\n\r\nHow about considering only a maximum of one leading space and one trailing space as \"insignificant\" and remove it?\r\n\r\nThis would still allow this:\r\n> - It makes it easier to visually distinguish the delimiters from the enclosed value (e.g., `@' 6' 2\" '@` vs. `@'6' 2\"'@`)\r\n> - Since supporting a variable number of quotes in the delimiter is desirable (e.g., `@'' @' is fine ''@`), ignoring surrounding whitespace solves the problem of enclosed values starting or ending with a quote that would otherwise break the syntax (e.g., to embed verbatim `'hi`, `@''hi'@` wouldn't work syntactically, but `@' 'hi '@` - with surrounding whitespace stripped on parsing - does.\r\n\r\nAnd it would also improve \"Values that need surrounding whitespace to be significant\":    \r\nJust put one more space to the beginning and one more to the end.",
      "created_at": "2020-07-17T20:31:29Z",
      "updated_at": "2020-07-17T21:07:44Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @TSlivede, I've folded your suggestion into the OP. I like it, but a slight concern is that the fact that the  behavior is tied to a _specific number_ of spaces, i.e., exactly one, could be a bit obscure, and that people may be more used to _any number_ of leading/trailing spaces being insignificant, such as in inline code elements enclosed in `` ` `` in Markup.",
      "created_at": "2020-07-17T20:50:13Z",
      "updated_at": "2020-07-17T21:31:13Z"
    },
    {
      "author": "TSlivede",
      "author_association": "NONE",
      "body": "> people may be more used to any number of leading/trailing spaces being are insignificant\r\n\r\nYes you are right, the syntax I suggested might be very surprising to new users, maybe it's not such a good idea after all.\r\n\r\nIt could for example be especially problematic, if someone wants a string leading with e.g. 4 spaces. To test if spaces are preserved he enters ```@'\u00a0\u00a0\u00a0\u00a0test string'@``` (4 spaces) and powershell prints `\u00a0\u00a0\u00a0test string` (three spaces), which looks very similar to four leading spaces. That user would probably not notice the missing space and would now have a very subtle bug in his code...",
      "created_at": "2020-07-17T21:26:21Z",
      "updated_at": "2020-07-17T21:46:03Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Good points. I take it then that this would require at least the initial leading space to be escaped with `` ` ``?",
      "created_at": "2020-07-17T21:29:32Z",
      "updated_at": "2020-07-17T21:29:40Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32, yes, but note that the use of `` ` `` for escaping requires a switch to the _double-quoted_ form, because in the single-quoted one the `` ` `` would be a literal that is retained. Using a single-quoted (invariably multi-line) here-string instead avoids that.",
      "created_at": "2020-07-17T21:34:30Z",
      "updated_at": "2020-07-17T21:35:04Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@TSlivede :) I've [unindented](https://en.wiktionary.org/wiki/unindent) the paragraph, and I've also added our (later) concern about the suggestion expressed therein.\r\n",
      "created_at": "2020-07-17T21:42:41Z",
      "updated_at": "2020-07-17T21:44:14Z"
    },
    {
      "author": "TSlivede",
      "author_association": "NONE",
      "body": "Another alternative idea:\r\n\r\nAllow only a maximum of three quotes in the delimiters and don't remove leading/trailing whitespace.\r\n\r\nThis way we would lose the visual advantage\r\n> - It makes it easier to visually distinguish the delimiters from the enclosed value (e.g., `@' 6' 2\" '@` vs. `@'6' 2\"'@`)\r\n\r\n(`@' 6' 2\" '@` and `@'6' 2\"'@` would not be equivalent)\r\n\r\nBut we would gain an easy option for leading or trailing significant whitespace.\r\n\r\nLeading quotes would also be easy: As only a maximum of three quotes are considered part of the string delimiter, the fourth quote would be a literal quote. \r\n\r\ne.g., to embed verbatim `'hi` one could use `@''''hi'''@`\r\n\r\nAs with my previous suggestion *the behavior is tied to a **specific number** of* quotes (not *spaces* in this case \ud83d\ude09). But three quotes is something users might already have seen for here strings: [python](https://lofic.github.io/tips/python-heredoc.html), [kotlin](https://kotlinlang.org/docs/reference/basic-types.html#string-literals), [scala](https://scala-lang.org/files/archive/spec/2.13/01-lexical-syntax.html#multi-line-string-literals), [groovy](https://groovy-lang.org/syntax.html#_triple_single_quoted_string)\r\n",
      "created_at": "2020-07-17T22:20:40Z",
      "updated_at": "2020-07-17T22:23:28Z"
    },
    {
      "author": "TSlivede",
      "author_association": "NONE",
      "body": "Addition to that suggestion: To allow embedding literal `'''@` maybe allow multiple (unlimited?) `@` symbols in the string delimiters. E.g.:\r\n```\r\n@@'some string containing >>>'@<<< - delimited with multiple @-symbols'@@\r\n```",
      "created_at": "2020-07-17T22:26:37Z",
      "updated_at": "2020-07-17T22:27:06Z"
    }
  ],
  "created_at": "2020-07-17T16:56:07Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Language",
    "In-PR"
  ],
  "number": 13204,
  "state": "open",
  "title": "Introduce a new, single-line raw string literal (single-line here-string alternative)",
  "updated_at": "2022-07-25T17:50:16Z"
}