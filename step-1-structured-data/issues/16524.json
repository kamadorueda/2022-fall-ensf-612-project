{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16524",
  "author": "mklement0",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nThis probably won't arise too often in the real world, but is still a confusing bug worth fixing.\r\n\r\nScenario: You have a custom object for which you want to _rename_ a property while keeping all the others:\r\n\r\n```powershell\r\n[pscustomobject] @{ one = 1; two = 2; three = 3 } | \r\n  Select-Object -ExcludeProperty one -Property @{ n='uno'; e='one' }, *\r\n```\r\n\r\nThat is, property `one` should be renamed to `uno`, keeping its value.\r\n\r\nNote that the problem only occurs when the `e` (`Expression`) entry refers to the `one` object _by name string_ (`e='one'`).\r\n\r\nBy contrast, using a _script block_ works fine (`e={ $_.one }`)\r\n\r\n\r\n### Expected behavior\r\n\r\n```console\r\nuno two three\r\n--- --- -----\r\n  1   2     3\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\ntwo three\r\n--- -----\r\n  2     3\r\n```\r\n\r\nThat is, the calculated property was _quietly ignored_, due to the `-ExcludeProperty one` argument unexpectedly also preventing access to the excluded property's _value_ by _name_.\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nPowerShell Core 7.2.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "scriptingstudio",
      "author_association": "NONE",
      "body": "`e` for `expression`\r\n```powershell\r\n[pscustomobject] @{ one = 1; two = 2; three = 3 } | \r\nSelect-Object -ExcludeProperty one -Property @{ n='uno'; e='one' }, *\r\n\r\ntwo three\r\n--- -----\r\n  2     3\r\n\r\n[pscustomobject] @{ one = 1; two = 2; three = 3 } | \r\nSelect-Object -ExcludeProperty one -Property @{ n='uno'; e={$_.one} }, *\r\n\r\nuno two three\r\n--- --- -----\r\n  1   2     3\r\n```",
      "created_at": "2021-11-26T19:52:18Z",
      "updated_at": "2021-11-26T19:52:18Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@scriptingstudio, all of this information is in the OP, as far as I can tell.",
      "created_at": "2021-11-26T19:53:40Z",
      "updated_at": "2021-11-26T19:53:40Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@scriptingstudio  e / expression can be either a string holding a property name or a script block. \r\nWhat Mike's saying is -excludeproperty doesn't just remove it from the ones included by *,\r\n\r\n```\r\n[pscustomobject] @{ one = 1; two = 2; three = 3 } | \r\nSelect-Object -ExcludeProperty o* -Property @{ n='uno'; e='one' }, @{ n='dos'; e='two' }, *e\r\n```\r\n*e includes one and three; -excludeproperty take one out; so three is in, two is included by name rather than script block. Most people would expect one to be included as well. \r\n ",
      "created_at": "2021-11-26T21:29:25Z",
      "updated_at": "2021-11-26T21:30:53Z"
    }
  ],
  "created_at": "2021-11-26T18:28:38Z",
  "number": 16524,
  "state": "open",
  "title": "Select-Object: properties excluded with -ExcludeProperty are ignored when referenced by name string in calculated properties",
  "updated_at": "2021-11-29T03:35:20Z"
}