{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15974",
  "author": "jamesr42",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nI have a desktop.ini file that somehow got attributes 1572902:\r\n\r\n```\r\n$file1 = gi -force .\\bin\\desktop.ini\r\n$file1.Attributes\r\n1572902\r\n```\r\n\r\nWhich according to WinNT.h is: FILE_ATTRIBUTE_HIDDEN, FILE_ATTRIBUTE_SYSTEM, FILE_ATTRIBUTE_ARCHIVE (expected) and also 0x80000 and 0x100000 which are unknown.\r\n\r\nNormal desktop.ini files return this:\r\n\r\n```\r\n$file2 = gi -force .\\desktop.ini\r\n$file2.Attributes\r\nHidden, System, Archive\r\n```\r\n\r\nTrouble is, the first file does not return the correct answer from a test like this:\r\n\r\n```\r\n$file1.Attributes -match 'hidden'\r\nFalse\r\n```\r\n\r\nWhere the normal file does:\r\n\r\n```\r\n$file2.Attributes -match 'hidden'\r\nTrue \r\n```\r\n\r\nEven though the problem file has strange attributes, should not the \"known\" attributes return properly?\n\n### Expected behavior\n\n```console\n$file2.Attributes -match 'hidden'\r\nTrue\n```\n\n\n### Actual behavior\n\n```console\n$file1.Attributes -match 'hidden'\r\nFalse\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2021-08-25T00:00:34Z",
  "comments": [
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Looking at the raw value you have the following flags set:\r\n\r\n* FILE_ATTRIBUTE_HIDDEN - 0x00000002\r\n* FILE_ATTRIBUTE_SYSTEM - 0x00000004\r\n* FILE_ATTRIBUTE_ARCHIVE - 0x00000020\r\n* FILE_ATTRIBUTE_PINNED - 0x00080000\r\n* FILE_ATTRIBUTE_UNPINNED - 0x00100000\r\n\r\n```powershell\r\nPS /home/jborean> 1572902 -eq (0x00000002 -bor 0x00000004 -bor 0x00000020 -bor 0x00080000 -bor 0x00100000)\r\nTrue\r\n```\r\n\r\nThe latter two seem to be somewhat undocumented in places and aren't defined as part of the [System.IO.FileAttributes](https://docs.microsoft.com/en-us/dotnet/api/system.io.fileattributes?view=net-5.0) enum so instead of getting a nice and friendly human readable label the value is just a pure int. You cannot even cast it yourself as it will fail saying some values aren't valid\r\n\r\n```powershell\r\nPS /home/jborean> [System.IO.FileAttributes]1572902\r\nInvalidArgument: Cannot convert value \"1572902\" to type \"System.IO.FileAttributes\" due to enumeration values that are not valid. Specify one of the following enumeration values and try again. The possible enumeration values are \"ReadOnly,Hidden,System,Directory,Archive,Device,Normal,Temporary,SparseFile,ReparsePoint,Compressed,Offline,NotContentIndexed,Encrypted,IntegrityStream,NoScrubData\".\r\n```\r\n\r\nWhen I say it's undocumented there is an entry for these masks under [MS-FSCC](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-fscc/ca28ec38-f155-4768-81d6-4bfeb8586fc9)\r\n\r\n> FILE_ATTRIBUTE_PINNED   0x00080000\r\n> This attribute indicates user intent that the file or   directory should be kept fully present locally even when not being actively   accessed. This attribute is for use with hierarchical storage management   software.<165>\r\n\r\n> FILE_ATTRIBUTE_UNPINNED   0x00100000\r\n> This attribute indicates that the file or directory   should not be kept fully present locally except when being actively accessed.   This attribute is for use with hierarchical storage management software.<166>\r\n\r\nWhy you have both masks set I have no idea as they seem complimentary but that's what the filesystem is returning. To fix this problem these flags need to be added to the .NET FileAttributes class so that PowerShell can represent them correctly. I  see an open issue about it https://github.com/dotnet/runtime/issues/39831 but there hasn't been much activity on it recently.\r\n\r\nFor your test I recommend using bitwise flags operations to test the present of the mask instead\r\n\r\n```powershell\r\n$attr = 1572902\r\n\r\nif ($attr -band [System.IO.FileAttributes]::Hidden) { $true } else { $false }\r\n```\r\n\r\nThis works in both situations where the attributes is the enum value and when it's the raw integer.",
      "created_at": "2021-08-22T19:08:27Z",
      "updated_at": "2021-08-22T19:08:27Z"
    },
    {
      "author": "jamesr42",
      "author_association": "NONE",
      "body": "Well, this is a good work-around, not a solution.",
      "created_at": "2021-08-23T12:33:50Z",
      "updated_at": "2021-08-23T12:33:50Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "The solution would be to add these values to the `FileAttributes` enum but that type is in the `.NET Runtime` repo here:  https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/IO/FileAttributes.cs\n\n<blockquote><img src=\"https://opengraph.githubassets.com/feba5cdbb19b17541da19fe4beb024f7b3930235248362213081b3eafb14716c/dotnet/runtime\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/dotnet/runtime\">runtime/FileAttributes.cs at main \u00b7 dotnet/runtime</a></strong></div><div>.NET is a cross-platform runtime for cloud, mobile, desktop, and IoT apps. - runtime/FileAttributes.cs at main \u00b7 dotnet/runtime</div></blockquote>",
      "created_at": "2021-08-23T15:54:21Z",
      "updated_at": "2021-08-23T15:54:22Z"
    },
    {
      "author": "jamesr42",
      "author_association": "NONE",
      "body": "Well, problem is that is not future-proof ... if Windows starts using new attributes, then the call fails again. Perhaps Powershell should only return values that are actually in the enum.",
      "created_at": "2021-08-23T15:57:08Z",
      "updated_at": "2021-08-23T15:57:08Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "> that is not future-proof\r\n\r\nIt is **if** you use @jborean93 suggestion:\r\n```powershell\r\n$file2.Attributes -band [System.IO.FileAttributes]::Hidden\r\n# OR\r\n($attr -band [System.IO.FileAttributes]::Hidden) -ne 0\r\n```\r\nAs for `-match` not working in this scenario, I suppose that is the crux of your issue here, right?  That might be worth opening in a separate issue or  you could rename it this issue.  \r\n\r\nI see that C# handles this situation better than PowerShell e.g.:\r\n\r\n![image](https://user-images.githubusercontent.com/5177512/130482625-4f9525e9-c5c2-4afe-af2a-5c4d54815c77.png)\r\n\r\nSpecifically, note that C# does not error on the typecast of 1572901 to `FileAttributes`.  Also note that even though a typecast in PS fails, you can create this enum:\r\n```powershell\r\nPS> $attr = [enum]::ToObject([System.IO.FileAttributes], 1572902); $attr.GetType().FullName\r\nSystem.IO.FileAttributes\r\n```\r\n`-band` works on the result but `-match` does not.\r\n```\r\nPS> $attr -band [System.IO.FileAttributes]::Hidden\r\nHidden\r\n\r\nPS> $attr -match 'Hidden'\r\nFalse\r\n```",
      "created_at": "2021-08-23T16:37:05Z",
      "updated_at": "2021-08-23T16:37:05Z"
    },
    {
      "author": "jamesr42",
      "author_association": "NONE",
      "body": "I think it should return the enum's that it knows, but whatever ... yes, I have fixed my code to assume int return.",
      "created_at": "2021-08-23T17:28:45Z",
      "updated_at": "2021-08-23T17:28:45Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2021-08-25T00:00:32Z",
      "updated_at": "2021-08-25T00:00:32Z"
    },
    {
      "author": "puxu-msft",
      "author_association": "NONE",
      "body": "Got a similar problem for FILE_ATTRIBUTE_PINNED 0x00080000\r\n\r\nI found the docs here, but nowhere else: https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-fscc/ca28ec38-f155-4768-81d6-4bfeb8586fc9\n\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-fscc/ca28ec38-f155-4768-81d6-4bfeb8586fc9\">[MS-FSCC]: File Attributes</a></strong></div><div>The following attributes are defined for files and directories. They can be used in any combination unless noted in the description of the</div></blockquote>",
      "created_at": "2022-04-08T08:41:45Z",
      "updated_at": "2022-04-08T08:41:47Z"
    }
  ],
  "created_at": "2021-08-22T16:46:14Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered",
    "Needs-Triage"
  ],
  "number": 15974,
  "state": "closed",
  "title": "Get-Item file attributes numeric",
  "updated_at": "2022-04-08T08:41:47Z"
}