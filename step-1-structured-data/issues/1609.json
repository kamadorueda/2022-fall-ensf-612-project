{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1609",
  "author": "TravisEz13",
  "body": "<!--\n\nIf it is a bug report:\n- make sure you are able to repro it on the latest released version. \nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\n- Search the existing issues.\n- Refer to the [FAQ](../docs/FAQ.md).\n- Refer to the [known issues](../docs/KNOWNISSUES.md).\n- Fill out the following repro template\n\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\n-->\n## Steps to reproduce\n\n`Get-PSSession -ComputerName localhost`\n## Expected behavior\n\nshould return sessions\n## Actual behavior\n\n```\nThe 'New-WSManSessionOption' command was found in the module 'Microsoft.WSMan.Management', but the module could not be\nloaded. For more information, run 'Import-Module Microsoft.WSMan.Management'.\n    + CategoryInfo          : ObjectNotFound: (New-WSManSessionOption:String) [Get-PSSession], CommandNotFoundExceptio\n   n\n    + FullyQualifiedErrorId : CouldNotAutoloadMatchingModule,Microsoft.PowerShell.Commands.GetPSSessionCommand\n```\n## Additional Information\n\n```\n> Import-Module Microsoft.WSMan.Management\n> gcm new-wsmansessionoption\n\nCommandType     Name                                               Version    Source\n-----------     ----                                               -------    ------\nCmdlet          New-WSManSessionOption                             3.0.0.0    Microsoft.WSMan.Management\n\n```\n## Environment data\n\n<!-- provide the output of $PSVersionTable -->\n\n``` powershell\n\nName                           Value\n----                           -----\nCLRVersion\nWSManStackVersion              3.0\nPSRemotingProtocolVersion      2.3\nPSEdition                      PowerShellCore\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\nSerializationVersion           1.1.0.1\nPSVersion                      6.0.0-alpha\nBuildVersion                   3.0.0.0\nGitCommitId                    v6.0.0-alpha.7-123-g28acd1acc3d5757a3208bc650bb3dbaa8a6e6b3b-dirty\n\n```\n",
  "closed_at": "2016-08-05T21:04:42Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Root Cause:\n`Microsoft.WSMan.Management` and `Microsoft.PowerShell.Commands.Diagnostics` are not put in the default snapin list for win-ops. `PORTABLE` should be changed to `UNIX`.\nThis prevents those two from being loaded by default when RunspaceConfiguration is being used, e.g. when using PS API `$ps = [powershell]::create(); $ps.AddScript(...); $ps.Invoke()`.\n\nThis is why the behavior is different compared to Nano PS.\n\n```\n        private static IList<DefaultPSSnapInInformation> DefaultMshSnapins\n        {\n            get\n            {\n                if (s_defaultMshSnapins == null)\n                {\n                    lock (s_syncObject)\n                    {\n                        if (s_defaultMshSnapins == null)\n                        {\n                            s_defaultMshSnapins = new List<DefaultPSSnapInInformation>()\n                            {\n#if !PORTABLE\n                                new DefaultPSSnapInInformation(\"Microsoft.PowerShell.Diagnostics\", \"Microsoft.PowerShell.Commands.Diagnostics\", null,\n                                    \"GetEventResources,Description\", \"GetEventResources,Vendor\"),\n#endif\n                                new DefaultPSSnapInInformation(\"Microsoft.PowerShell.Host\", \"Microsoft.PowerShell.ConsoleHost\", null,\n                                    \"HostMshSnapInResources,Description\",\"HostMshSnapInResources,Vendor\"),\n\n                                s_coreSnapin,\n\n                                new DefaultPSSnapInInformation(\"Microsoft.PowerShell.Utility\", \"Microsoft.PowerShell.Commands.Utility\", null,\n                                    \"UtilityMshSnapInResources,Description\",\"UtilityMshSnapInResources,Vendor\"),\n\n                                new DefaultPSSnapInInformation(\"Microsoft.PowerShell.Management\", \"Microsoft.PowerShell.Commands.Management\", null,\n                                    \"ManagementMshSnapInResources,Description\",\"ManagementMshSnapInResources,Vendor\"),\n\n                                new DefaultPSSnapInInformation(\"Microsoft.PowerShell.Security\", \"Microsoft.PowerShell.Security\", null,\n                                    \"SecurityMshSnapInResources,Description\",\"SecurityMshSnapInResources,Vendor\")\n                            };\n\n#if !PORTABLE\n                            if (!Utils.IsWinPEHost())\n                            {\n                                s_defaultMshSnapins.Add(new DefaultPSSnapInInformation(\"Microsoft.WSMan.Management\", \"Microsoft.WSMan.Management\", null,\n                                    \"WsManResources,Description\", \"WsManResources,Vendor\"));\n                            }\n#endif\n                        }\n                    }\n                }\n\n                return s_defaultMshSnapins;\n            }\n        }\n```\n\n@SandeepSutari can you please triage based on the investigation? Fix should be as simple as replacing `PORTABLE` with `UNIX`.\n",
      "created_at": "2016-08-05T00:26:43Z",
      "updated_at": "2016-08-05T00:27:27Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Fixed via #1661 \n",
      "created_at": "2016-08-05T21:04:42Z",
      "updated_at": "2016-08-05T21:04:42Z"
    }
  ],
  "created_at": "2016-08-02T20:23:19Z",
  "number": 1609,
  "state": "closed",
  "title": "Get-PSSession -computername fails on nano",
  "updated_at": "2016-11-10T00:55:29Z"
}