{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2790",
  "author": "lucdekens",
  "body": "The Split method shows OverloadDefinitions in this order\r\nOverloadDefinitions\r\n\r\nstring[] Split(char separator)\r\nstring[] Split(char separator, System.StringSplitOptions options)\r\nstring[] Split(char separator, int count, System.StringSplitOptions options)\r\nstring[] Split(Params char[] separator)\r\nstring[] Split(char[] separator, int count)\r\nstring[] Split(char[] separator, System.StringSplitOptions options)\r\nstring[] Split(char[] separator, int count, System.StringSplitOptions options)\r\nstring[] Split(string separator)\r\nstring[] Split(string separator, System.StringSplitOptions options)\r\nstring[] Split(string separator, int count, System.StringSplitOptions options)\r\nstring[] Split(string[] separator, System.StringSplitOptions options)\r\nstring[] Split(string[] separator, int count, System.StringSplitOptions options)\r\n\r\nWhen one tries to use the Count parameter, it is first interpreted as a System.StringSplitOptions value.\r\nSince enum values are [int] under the cover I guess.\r\n\r\nAs a result, this $t.Split(' ',6) will produce the following error:\r\n\r\nCannot convert argument \"options\", with value: \"6\", for \"Split\" to type \"System.StringSplitOptions\": \"Cannot convert value \"6\" to type\r\n\"System.StringSplitOptions\" due to enumeration values that are not valid. Specify one of the following enumeration values and try again. The\r\npossible enumeration values are \"None,RemoveEmptyEntries\".\"\r\nAt line:1 char:1\r\n+ $t.split(' ',6)\r\n+ ~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [], MethodException\r\n    + FullyQualifiedErrorId : MethodArgumentConversionInvalidCastArgument\r\n\r\nWhen the Count parameter is cast to [int], no issue ($t.Split(' ',[int]6)\r\n\r\nIn PS v5.1, the overloaddefinitions have a different order, and this issue doesn't appear.\r\nOverloadDefinitions                                                                                                                              \r\n                                                                                                                             \r\nstring[] Split(Params char[] separator)                                                                                                          \r\nstring[] Split(char[] separator, int count)                                                                                                      \r\nstring[] Split(char[] separator, System.StringSplitOptions options)                                                                              \r\nstring[] Split(char[] separator, int count, System.StringSplitOptions options)                                                                   \r\nstring[] Split(string[] separator, System.StringSplitOptions options)                                                                            \r\nstring[] Split(string[] separator, int count, System.StringSplitOptions options)  \r\n\r\nThe Crontab demo module experiences this error as well in line 38 in Crontab.psm1.\r\n\r\nI tested with v6.0.0-alpha.13",
  "closed_at": "2016-11-28T20:39:05Z",
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "We will likely have to call this by design.\r\n\r\nIt looks like .Net added some overloads to `String.Split` - I've listed the interesting ones here:\r\n\r\n```\r\nstring[] Split(char[] separator, int count)\r\nstring[] Split(string separator, System.StringSplitOptions options)\r\n```\r\n\r\nThe second one is new. PowerShell ranks conversions of each argument to try and disambiguate which overload you really meant.\r\n\r\nBecause PowerShell tries extra hard to convert anything to anything, we needed a way to disambiguate overloads in a reasonable way that felt natural. After analyzing many different overloaded apis, we found that method parameters are typically specified in order of decreasing importance, so we decided that we would weight the conversion rankings in a similar manner.\r\n\r\nIn your example, we have arguments `string, int` and are attempting to match `char[], int` and `string, StringSplitOptions`.\r\n\r\nBecause we weight the first parameter/argument higher than the second and because the first argument is an exact match, we attempt to call this new overload.\r\n\r\nSo I'm not sure there is a good solution. If PowerShell had a character literal, that might help.",
      "created_at": "2016-11-28T19:06:37Z",
      "updated_at": "2016-11-28T19:06:37Z"
    },
    {
      "author": "lucdekens",
      "author_association": "NONE",
      "body": "Thanks Jason, I can live with that explanation, sounds indeed \"by design\".\r\nAnd besides casting, to force the intended overload, I can't think of a good solution either.\r\n\r\nBut it can cause some not-so-obvious errors.\r\n\r\nThe Crontab demo module (line 38 in Crontab.psm1) suffers from such an error for example.\r\nAt least the Crontab demo would need to be corrected.",
      "created_at": "2016-11-28T20:26:58Z",
      "updated_at": "2016-11-28T20:26:58Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Fortunately the `-split` operator avoids the need for a cast.\r\n\r\nThanks for reporting the error in crontab - here is the fix: https://github.com/PowerShell/PowerShell/pull/2796",
      "created_at": "2016-11-28T20:39:05Z",
      "updated_at": "2016-11-28T20:39:05Z"
    }
  ],
  "created_at": "2016-11-27T17:24:13Z",
  "number": 2790,
  "state": "closed",
  "title": "[String] Split method overloaddefinitions order causes error",
  "updated_at": "2016-11-29T18:19:14Z"
}