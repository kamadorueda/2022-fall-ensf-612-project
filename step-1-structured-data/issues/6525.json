{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6525",
  "author": "white-bee",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://github.com/PowerShell/PowerShell/blob/master/docs/KNOWNISSUES.md).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\nI was trying to get all the data from REST endpoint that paginated. But it running in the loop on the last page. I would expect it should exit after the last page processed. It works as expected with MaximumFollowRelLink specified, But I can not get the number of the pages in total in Invoke-RestMethod.\r\n\r\n\r\n```powershell\r\n $Results = Invoke-RestMethod @Params -Verbose | ForEach-Object {$_}\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nto return data from all pages\r\n```\r\n\r\nActual behavior\r\n---------------\r\nkeep running in a loop on the last page \r\n```none\r\n\r\n```\r\n\r\nEnvironment data\r\n----------------\r\nPSVersion                      6.1.0-preview.1\r\nPSEdition                      Core\r\nGitCommitId                 v6.1.0-preview.1\r\nOS                                 Microsoft Windows 10.0.16299\r\nPlatform                                 Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion   2.3\r\nSerializationVersion                 1.1.0.1\r\nWSManStackVersion                3.0\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\n```\r\n",
  "closed_at": "2019-01-24T01:57:29Z",
  "comments": [
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Edit: see my other response instead.\r\n\r\n@white-bee Can you provide what you have supplied in the `@params` hash? Also, How many pages does the API return? \r\n\r\n~~The default for `-MaximumFollowRelLink` is [5 pages](https://docs.microsoft.com/en-us/powershell/module/Microsoft.PowerShell.Utility/Invoke-RestMethod?view=powershell-5.1#optional-parameters).~~\r\n\r\nOnce either the the API has no more pages to return or the `-MaximumFollowRelLink` the looping stops.\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/5da5a4bf62fcd628d16a50aaf2acf5a85738e064/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/Common/WebRequestPSCmdlet.Common.cs#L1507-L1515",
      "created_at": "2018-03-29T09:30:10Z",
      "updated_at": "2018-03-29T12:29:48Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Oops.. too early. I should not respond to things before coffee..\r\n\r\nThe default for `-MaximumFollowRelLink` is `[int]:MaxValue` ([correct link](https://docs.microsoft.com/en-us/powershell/module/Microsoft.PowerShell.Utility/Invoke-RestMethod?view=powershell-6#optional-parameters)). \r\n\r\nWhat will happen when `-MaximumFollowRelLink` is not present is that the cmdlet will continue to grab the next link until either 2147483647 pages have been pulled or until the API no longer supplies a `next` link.\r\n\r\nfor example:\r\n\r\n```powershell\r\n$res = Invoke-RestMethod -Uri 'https://api.github.com/repositories/49609581/issues' -FollowRelLink\r\n```\r\n\r\nThere are currently 46 pages so the cmdlet pulls in all 46 pages and then exist.\r\n\r\nIf you have an API that is looping on the last page, it is possible that the API is providing a `next` link on the last page even though there is no next page. To test this, get the URL of the last page and use the following:\r\n\r\n```powershell\r\n$res = Invoke-WebRequest -Uri $uri\r\n$null -eq $res.RelationLink.next\r\n```\r\n\r\nIf the above is True, then the API is not returning a next link and we would need more details about the API to investigate.\r\n\r\nIf the above returns False, then the API is returning a next link. In that case there is nothing we can do. The server says there is a next page and you have told us to grab the next page until we reach `2147483647`. It's up the the API to provide us accurate information. Some APIs do use the same URL for `next` over and over, so there is no reasonable way for us to determine if we should ignore the `next` link. All we can do is trust  the server and your settings.",
      "created_at": "2018-03-29T09:47:56Z",
      "updated_at": "2018-03-29T12:26:44Z"
    },
    {
      "author": "KevinMarquette",
      "author_association": "CONTRIBUTOR",
      "body": "This question may be out of scope for this issue, but is `[int]::MaxValue` an appropriate default?",
      "created_at": "2018-03-29T11:44:44Z",
      "updated_at": "2018-03-29T11:44:44Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@KevinMarquette The idea being that when the user does not supply `-MaximumFollowRelLink`, It grabs all the pages (well, assuming the API has -le  2147483647 pages anyway). \r\n\r\nI think the current default is fitting for the Principle of Least Astonishment. If I only know about `-FollowRelLink`, didn't know about `-MaximumFollowRelLink`, and ran `Invoke-RestMethod -Uri $Uri -FollowRelLink`, then I would expect it to grab all the available pages from the API. If it only grabbed 5 by default, I might assume there were only 5 pages on the endpoint when I only receive 5 pages. That would break PoLA, in my opinion.",
      "created_at": "2018-03-29T12:15:50Z",
      "updated_at": "2018-03-29T12:15:50Z"
    },
    {
      "author": "white-bee",
      "author_association": "NONE",
      "body": "thank you @KevinMarquette for the prompt reply.\r\n\r\n> If you have an API that is looping on the last page, it is possible that the API is providing the next link on the last page even though there is no next page. \r\n\r\nI think you are right. I was going thru RFC and could not find specifics as to what next should be on the last page before I talk to the vendor of the API. Would it make sense to add an additional check like next <> last of something to cover cases like this?\r\n\r\n$res.RelationLink\r\nnext  https://---?limit=500&offset=18000\r\nprev  https://---?limit=500&offset=17500\r\nlast  https://---?limit=500&offset=18000\r\nfirst https://---?limit=500&offset=0\r\n\r\nI also noticed that $res.RelationLink does not return all properties from  $res.Headers.Link (eg. title) \r\nI could probably have some workaround with using Invoke-WebRequest and get a number of pages and then use it for -MaximumFollowRelLink but that would not make code cleaner...",
      "created_at": "2018-03-29T15:13:54Z",
      "updated_at": "2018-03-29T15:25:11Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "If there is no `next` page there should be no `next` link. Next is explicit that there is a next page.\r\n\r\nAs I mentioned, some APIs purposely use the current URL as the next URL. We cannot assume that just because the URL for first page, previous page, and last page is the same as the next page that we are looping needlessly. \r\n\r\nFor example:\r\n\r\n```none\r\nnext https://api.contoso.com/v2/batch/report?id=4f45db04-6517-4de6-88fc-924a807dc578\r\nfirst https://api.contoso.com/v2/batch/report?id=4f45db04-6517-4de6-88fc-924a807dc578\r\nlast https://api.contoso.com/v2/batch/report?id=4f45db04-6517-4de6-88fc-924a807dc578\r\nprev next https://api.contoso.com/v2/batch/report?id=4f45db04-6517-4de6-88fc-924a807dc578\r\n```\r\n\r\nThe API returns the same `next` link multiple times until the entire batch has been grabbed. When the entire batch is complete, no `next` link is returned. This decreases processing as the backend may not have a page count or it may not be possible to obtain a page count. The batch may be forward-only processing so no `prev` is supplied nor possible.\r\n\r\nIf your API is supplying a next page and there is no next page, then using `-FollowRelLink` may not be the best solution. You may have to do your own looping:\r\n\r\n```powershell\r\n$Pages = do {\r\n    $Response = Invoke-WebRequest -Uri $Uri\r\n    $Response.Content | ConvertFrom-Json\r\n} while ($Response.RelationLink.Next -ne $Response.RelationLink.Last)\r\n```\r\n```",
      "created_at": "2018-03-29T15:38:46Z",
      "updated_at": "2018-03-29T15:38:46Z"
    },
    {
      "author": "white-bee",
      "author_association": "NONE",
      "body": "thank you @markekraus . I will try to figure out what API vendor have to say and if not will go back looping (with background jobs probably to make it more fun)\r\n\r\nBut for the  Invoke-RestMethod  sake how do you safeguard for cases like this so it will not go into a long journey for 2 147 483 647 pages?",
      "created_at": "2018-03-29T16:08:02Z",
      "updated_at": "2018-03-29T16:08:02Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@white-bee As said, when there is no next page, an API does not normally provide a `next` link. You have hit an edge case that is, as I understand it anyway, and incorrect use of the `next` link. There really is nothing we can realistically do to prevent that. Decreasing the default `-MaximumFollowRelLink` would break the Principle of Least Astonishment and we can't make any assumptions about links matching. We are at the mercy of API authors to follow RFCs and best practices.\r\n\r\nAs a general API access rule, one should avoid grabbing all pages blindly. Best practice would be to pull in X number of pages at a time. There are other scenarios where grabbing all pages can lead to unexpected results and API throttling. In my own code, I batch pull no more than 10 pages at a time even when I need to pull all pages. In that case, I would recommend always supplying a `-MaximumFollowRelLink`.",
      "created_at": "2018-03-29T17:15:25Z",
      "updated_at": "2018-03-29T17:15:25Z"
    },
    {
      "author": "KevinMarquette",
      "author_association": "CONTRIBUTOR",
      "body": "I think I am more astonished at this behavior than I would be with a default limit of say 1000. A sane default with a warning message when you hit that default limit would be ideal.\r\n\r\nThe current experience of grabbing 100% of all data no matter how much there is or causing the shell to \"hang\" by default does not feel like a good user experience.",
      "created_at": "2018-03-29T17:40:54Z",
      "updated_at": "2018-03-29T17:40:54Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@KevinMarquette That's not the default experience, as I understand it. This is the first I've heard of an API returning a `next` link when there is no next page. I believe that is is an edge case or I have been really lucky with the many APIs I work with not doing this.\r\n\r\nFor clarity, I didn't design this API and it was added before I was active in the project. If I had designed it or been around when it was being designed, I probably would have recommended `-FollowRelLink` be an not-null-int and not even included `-MaximumFollowRelLink` to avoid the confusion and surprises. That would have also enforced best practices of grabbing results in batches instead of everything at once. \r\n\r\nFor example:\r\n\r\n```powershell\r\n$Pages = Invoke-RestMethod -Uri $uri -FollowRelLink 10\r\n```\r\n\r\nHowever, since the max count is now separate from enabling the behavior, the default mode of most commands is to return everything when there is no filter or limit present. So stopping at X pages would be unexpected if the user was unaware of `-MaximumFollowRelLink` in the context of PowerShell cmdlets. Given the design choice to separate the enabling and filtering, I think the max value was the right decision. \r\n\r\nAs for warnings, they are generally frowned on as they are not useful (by default, anyway) in unattended scenarios. If someone was running the command fine with 999 pages, and suddenly there are 1000 or 10001 pages, and the automator is not watching for warnings, they may end up working with incomplete data without even knowing.\r\n\r\nThe Exchange cmdlets (such as `Get-Mailbox`) are notorious for causing problems because they return a limited number of results by default and a warning. This haunts many automation processes for O365 as orgs suddenly grow past the default threshold and automation is running on incomplete data sets.\r\n\r\nIntroducing a reduction in this default for `-MaximumFollowRelLink` now would be a [Bucket 1 breaking change](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md#bucket-1-public-contract). So that's not something we can consider lightly and would require an RFC.\r\n\r\nA new feature could be added of some kind to address a scenario where an API might do this, but unless I'm convinced it's a common occurrence for API's to return a `next` link where there is no next page, I personally wouldn't want to spend time investigating, designing, and coding possible workarounds.",
      "created_at": "2018-03-29T18:18:08Z",
      "updated_at": "2018-03-29T18:18:08Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Closing as this appears to be a 3rd party issue.",
      "created_at": "2019-01-24T01:57:29Z",
      "updated_at": "2019-01-24T01:57:29Z"
    }
  ],
  "created_at": "2018-03-29T06:12:48Z",
  "labels": [
    "Issue-Question",
    "Resolution-External",
    "WG-Cmdlets-Utility"
  ],
  "number": 6525,
  "state": "closed",
  "title": "Invoke-RestMethod $uri -FollowRelLink without -MaximumFollowRelLink specified keep running in the loop on the last page.",
  "updated_at": "2019-01-24T01:57:29Z"
}