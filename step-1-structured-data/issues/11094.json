{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11094",
  "author": "TobiasPSP",
  "body": "Select-Object reports an error when -ExpandProperty is used on a hashtable member that is not a key.\r\n\r\nVersion:\r\nPowerShell 7 Preview 5\r\n\r\nReproduce:\r\n$PSVersionTable | Select-Object -expandProperty Keys\r\n\r\nExpected Result:\r\n[list of hashtable keys]\r\n\r\nActual Result:\r\nException:\r\nSelect-Object: Property \"count\" cannot be found.\r\n\r\nWorkaround:\r\n$PSVersionTable | ForEach-Object { $_.Keys }\r\n\r\nDetails:\r\nhttps://powershell.one/bugs/powershell-7/select-object",
  "closed_at": "2020-06-19T22:46:55Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@TobiasPSP, was this issue created by an automated process from the linked page?\r\n\r\nEither way, it would help if the OP (original post) used proper code formatting.\r\n\r\nAnd, just to clarify (as also explained in the linked page), the issue is not specific to the `-ExpandProperty` parameter - it just fails more noisily in that case - `Select-Object [-Property]` is equally affected.\r\n\r\nOmitting `-ExpandProperty` (implied or explicit `-Property`) simply creates a `$null`-valued property due to not consulting the .NET-type-native properties:\r\n\r\n```powershell\r\nPS> $PSVersionTable | Select-Object Keys\r\n\r\nKeys\r\n----\r\n                # Property value is $null\r\n``` \r\n\r\n",
      "created_at": "2019-11-17T22:09:07Z",
      "updated_at": "2019-11-17T22:09:07Z"
    },
    {
      "author": "TobiasPSP",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 : the issue was not autogenerated. I was working on https://powershell.one/tricks/performance/group-object when I came across the bug and opened an issue here. After I posted the issue, later I realized that the bug affects Select-Object in general and not just -expandProperty. After updating the article, I returned here to update the issue but you already took care of it.\r\n\r\nWhat do you mean by \"it would help if the OP used proper code formatting\"? [EDITED: meanwhile I guess I figured out what you meant: adding markdown to format the code. That too would be an excellent bullet point for detailed instructions as suggested below. It's not ignorance but rather lack of routine to know about the required markdown or the editing commands.}\r\n\r\nTo be honest, I had a hard time finding a place to submit the issue in the first place. My natural first stop was at https://github.com/PowerShell/PowerShell. In the section \"Developing and Contributing\", I eventually followed the link to the \"Contribution Guide\", then followed the steps outlined in \"Contributing to Issues\", and finally clicked \"open a new issue\".\r\n\r\nThis left me with a blank form w/o any instructions, so I did my best to describe the problem properly. I remember when I opened the issue https://github.com/PowerShell/PowerShell/issues/10982, I followed a different link with a helpful issue template but was unable to find that link again anywhere.\r\n\r\nIMHO it would be helpful if the landing page https://github.com/PowerShell/PowerShell had a distinct section about feature requests and issue reporting, including the link to the issue template. This would help everyone and ensure reported issues are formatted correctly and contain all required information.\r\n\r\n<blockquote><div><strong><a href=\"https://powershell.one/tricks/performance/group-object\">Speeding Up Group-Object - powershell.one</a></strong></div><div>There is a design flaw in Group-Object. With a workaround, your scripts can be up tp 50x faster and still 2x faster on PowerShell Core.</div></blockquote>\r\n<blockquote><img src=\"https://repository-images.githubusercontent.com/49609581/96590180-07d7-11ea-89b1-2f719dc4bb9c\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell\">PowerShell/PowerShell</a></strong></div><div>PowerShell for every system! Contribute to PowerShell/PowerShell development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2019-11-18T00:36:52Z",
      "updated_at": "2019-11-18T00:52:33Z"
    },
    {
      "author": "TobiasPSP",
      "author_association": "COLLABORATOR",
      "body": "> Omitting `-ExpandProperty` (implied or explicit `-Property`) simply creates a `$null`-valued property due to not consulting the .NET-type-native properties:\r\n> \r\n> ```powershell\r\n> PS> $PSVersionTable | Select-Object Keys\r\n> \r\n> Keys\r\n> ----\r\n>                 # Property value is $null\r\n> ```\r\n\r\nAgree, the NULL value is expected behavior for any property not found on the original object:\r\n```powershell\r\nPS C:\\Users\\tobia> $PSVersionTable  | Select-Object -Property Test, Tobias\r\n\r\nTest Tobias\r\n---- ------\r\n```\r\nSo the issue seems to be related specifically to the dual nature of Hashtables where properties can originate from native .NET properties exposed by the hashtable plus the dynamically added props from hashtable keys. Apparently, Select-Object priorizes the dynamically added props and \"forgets\" about the native hashtable props. This also explains the behavior with -ExpandProperty.\r\n",
      "created_at": "2019-11-18T00:46:38Z",
      "updated_at": "2019-11-18T00:46:38Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I think I can take a look at this, sounds like it should be a relatively straightforward fix to do. \ud83d\ude42 ",
      "created_at": "2019-11-18T02:10:49Z",
      "updated_at": "2019-11-18T02:10:49Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@TobiasPSP I think that should do it. I have a hunch it won't make it in preview6 but as a bug fix it might still scrape by and make it in for 7.0 GA ^^",
      "created_at": "2019-11-18T05:41:58Z",
      "updated_at": "2019-11-18T05:41:58Z"
    },
    {
      "author": "TobiasPSP",
      "author_association": "COLLABORATOR",
      "body": "Awesome response time, I am honestly impressed! Many thanks for the great work.",
      "created_at": "2019-11-18T11:56:49Z",
      "updated_at": "2019-11-18T11:56:49Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@TobiasPSP, re reporting issues:\r\n\r\nThanks for the pointer regarding the new-issue link in https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md - this is now fixed, and points to https://github.com/PowerShell/PowerShell/issues/new/choose, where you're offered templates for various issue types, which do have fenced code blocks for proper code rendering (` ```powershell\\n...\\n``` `).\r\n\r\n> I had a hard time finding a place to submit the issue in the first place. My natural first stop was at https://github.com/PowerShell/PowerShell.\r\n\r\nYes, and the `Issues` tab (`<repo-url>/issues`) is a standard part of every repo page on GitHub; clicking on the `New Issue` button there also takes you to https://github.com/PowerShell/PowerShell/issues/new/choose, the page with the issue templates.\r\n\r\nHowever, I've just submitted two more PRs: \r\n\r\n* One to link to the issues page from the read-me in section \"Windows PowerShell vs. PowerShell Core\" - https://github.com/PowerShell/PowerShell/pull/11100\r\n\r\n* Another one to fix the new-issues link to show the issue-type templates too in https://github.com/PowerShell/PowerShell/blob/master/.github/SUPPORT.md, which the read-me links to from section \"Support\" - https://github.com/PowerShell/PowerShell/pull/11101\n\n<blockquote><img src=\"https://repository-images.githubusercontent.com/49609581/96590180-07d7-11ea-89b1-2f719dc4bb9c\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell\">PowerShell/PowerShell</a></strong></div><div>PowerShell for every system! Contribute to PowerShell/PowerShell development by creating an account on GitHub.</div></blockquote>\n<blockquote><img src=\"https://github.githubassets.com/images/modules/open_graph/github-logo.png\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com\">Build software better, together</a></strong></div><div>GitHub is where people build software. More than 40 million people use GitHub to discover, fork, and contribute to over 100 million projects.</div></blockquote>\n<blockquote><img src=\"https://repository-images.githubusercontent.com/49609581/96590180-07d7-11ea-89b1-2f719dc4bb9c\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell\">PowerShell/PowerShell</a></strong></div><div>PowerShell for every system! Contribute to PowerShell/PowerShell development by creating an account on GitHub.</div></blockquote>\n<blockquote><img src=\"https://repository-images.githubusercontent.com/49609581/96590180-07d7-11ea-89b1-2f719dc4bb9c\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell\">PowerShell/PowerShell</a></strong></div><div>PowerShell for every system! Contribute to PowerShell/PowerShell development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2019-11-18T13:54:53Z",
      "updated_at": "2019-11-18T13:54:55Z"
    },
    {
      "author": "TobiasPSP",
      "author_association": "COLLABORATOR",
      "body": "That's great - fixing the links will help everyone. Thanks for looking into this so quickly!",
      "created_at": "2019-11-18T15:26:37Z",
      "updated_at": "2019-11-18T15:26:37Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "My pleasure, @TobiasPSP. Note that I'm just a fellow contributor myself and that's it pretty easy to create PRs to propose such simple documentation changes.",
      "created_at": "2019-11-18T16:12:04Z",
      "updated_at": "2019-11-18T16:12:04Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #11097, which has now been successfully released as `v7.1.0-preview.4`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.4)\n",
      "created_at": "2020-06-25T19:07:20Z",
      "updated_at": "2020-06-25T19:07:20Z"
    }
  ],
  "created_at": "2019-11-17T17:50:36Z",
  "labels": [
    "Issue-Bug",
    "WG-Cmdlets-Utility"
  ],
  "number": 11094,
  "state": "closed",
  "title": "Select-Object -ExpandProperty does not work with Hashtable members",
  "updated_at": "2020-06-25T19:07:20Z"
}