{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14739",
  "author": "sv158",
  "body": "To reproduce this case, first, write a cmd script called `echotest.cmd` with the following code:\r\n\r\n```cmd\r\necho %1 %2 %3\r\n```\r\n\r\nSecond, open PowerShell at its place, then call the script with three arguments:\r\n\r\n```powershell\r\n.\\echotest.cmd a b c\r\n```\r\n\r\nFinally, it will get a result: `a %2 c`. However, what I expected is `a b c` as the result.\r\n\r\n----\r\nEnvironment:\r\nOS: Windows 10 x64, version 10.0.19042\r\nPowershell version: 7.0.3, also tested with 5.1.19041.610\r\nCode page: 65001(Unicode), by default I first tested this under 936(GBK) but get an error encoding text with `%2`.\r\n",
  "closed_at": "2021-02-09T06:49:45Z",
  "comments": [
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "I cannot seem to replicate this with v5.1 and v7.1, they both output the arguments passed into the script. Do the same thing happen when you run `cmd.exe /c echotest.cmd a b c`?\r\n\r\nCould you also try the following?\r\n\r\nIn Windows PowerShell run this to generate an executable that prints out the raw argv passed to a process. Note this only works in Windows PowerShell so you need to generate the .exe there first.\r\n\r\n```powershell\r\n$exePath = Join-Path -Path $pwd.Path -ChildPath 'PrintArgv.exe'\r\n\r\n$addParams = @{\r\n    TypeDefinition = @'\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace PrintArgv\r\n{\r\nclass Program\r\n{\r\n    [DllImport(\"Kernel32.dll\")]\r\n    public static extern IntPtr GetCommandLineW();\r\n\r\n    static void Main(string[] args)\r\n    {\r\n        IntPtr cmdLinePtr = GetCommandLineW();\r\n        string cmdLine = Marshal.PtrToStringUni(cmdLinePtr);\r\n\r\n        Console.WriteLine(cmdLine);\r\n\r\n        for (int i = 0; i < args.Length; i++)\r\n            Console.WriteLine(String.Format(\"[{0}] {1}\", i + 1, args[i]));\r\n    }\r\n}\r\n}\r\n'@\r\n    OutputType = 'ConsoleApplication'\r\n    OutputAssembly = $exePath\r\n}\r\nAdd-Type @addParams\r\n```\r\n\r\nThen in both Windows PowerShell and PowerShell run the following (you need to be in the same dir as when you ran the script above)\r\n\r\n```powershell\r\n.\\PrintArgv.exe a b c\r\n```\r\n\r\nIn my case I get the output which indicates the arguments are correctly being passed through:\r\n\r\n```\r\n\"C:\\temp\\PrintArgv.exe\" a b c\r\n[1] a\r\n[2] b\r\n[3] c\r\n```",
      "created_at": "2021-02-09T04:29:19Z",
      "updated_at": "2021-02-09T04:29:19Z"
    },
    {
      "author": "sv158",
      "author_association": "NONE",
      "body": "@jborean93 Thanks. I tried it inside two virtual machines, one is Windows 10 en-us, another is Windows 10 zh-cn, both of them can get the correct result with the command line. Now I almost confirmed it was my system's trouble, maybe I need to reinstall it later. ",
      "created_at": "2021-02-09T06:49:45Z",
      "updated_at": "2021-02-09T06:50:49Z"
    }
  ],
  "created_at": "2021-02-09T04:09:27Z",
  "number": 14739,
  "state": "closed",
  "title": "Error result when passing second argument to a cmd script",
  "updated_at": "2021-02-09T06:50:49Z"
}