{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2110",
  "author": "ffeldhaus",
  "body": "The `Get-Credential` works well for interactive sessions, but to execute scripts non-interactively, credentials often need to get stored in a secure place, which is a challenge for most PowerShell users. As at least Windows and Mac OS X (Keychain) offer secure credential stores, it would be great if Cmdlets could be added to PowerShell to securely store credentials in the OS credential store. [PowerShell Credentials Manager, an implementation for Windows PowerShell can be found in the Technet Gallery](https://gallery.technet.microsoft.com/scriptcenter/PowerShell-Credentials-d44c3cde).\n\nThis would increase usability of PowerShell for non-interactive scripting and enhance security for the average user.\n",
  "closed_at": "2019-09-29T07:08:34Z",
  "comments": [
    {
      "author": "devblackops",
      "author_association": "CONTRIBUTOR",
      "body": "I think @Jaykul implements what you are asking for in his [BetterCredentials](https://github.com/Jaykul/BetterCredentials) module. That module adds some extra functionality to `Get-Credential`.\n\n``` powershell\nGet-Credential UserName -Store\n```\n\n> If you haven't stored the password for \"UserName\", you'll be prompted with the regular PowerShell credential prompt, otherwise it will read the stored password.\n> In either case, it will store (update) the credentials in the Vault \n\nPerhaps that type of behavior should be added to the native `Get-Credential` cmdlet.\n",
      "created_at": "2016-09-02T06:46:39Z",
      "updated_at": "2016-09-02T06:46:39Z"
    },
    {
      "author": "ffeldhaus",
      "author_association": "CONTRIBUTOR",
      "body": "BetterCredentials looks interesting, but it also relies on the `Advapi32.dll` for storing credentials which is Windows specific. Secure Credential Management is essential and enabline PowerShell to use the Credential stores Microsoft and Apple recommends would be a great way to increase security for PowerShell scripts (especially non-interactive ones). \n",
      "created_at": "2016-09-02T07:30:58Z",
      "updated_at": "2016-09-02T07:30:58Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Although I'd theoretically like to make mine cross-platform, I don't have a MacBookPro anymore, so I won't be implementing that myself...\n\nSince even the credential prompt OS-specific -- they might as well implement cross-platform native storage in the core.\n\nFor better or worse, I've actually been considering going the opposite direction, and making the storage pluggable, so that it can use something that's not user+machine specific, maybe KeePass or Thycotic SecretServer etc.\n",
      "created_at": "2016-09-19T03:50:30Z",
      "updated_at": "2016-09-19T03:50:30Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "macOS Keychain can be accessed through a CLI command, which could be easily wrapped in BetterCredentials. But shelling out in core commands is kind of weird.",
      "created_at": "2018-09-21T15:25:44Z",
      "updated_at": "2018-09-21T15:25:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "RFC https://github.com/PowerShell/PowerShell-RFC/pull/208\r\nPlease discuss there.",
      "created_at": "2019-09-29T07:08:33Z",
      "updated_at": "2019-09-29T07:08:33Z"
    }
  ],
  "created_at": "2016-08-28T19:18:04Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets",
    "Up-for-Grabs",
    "Resolution-Answered"
  ],
  "number": 2110,
  "state": "closed",
  "title": "Add Cmdlets for storing Credentials in OS credential store",
  "updated_at": "2019-09-29T07:08:49Z"
}