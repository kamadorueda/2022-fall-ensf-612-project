{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7572",
  "author": "powercode",
  "body": "I have an intermittent crash in \r\n```\r\n Microsoft.PowerShell.TaskbarJumpList.CreateElevatedEntry(System.String)\r\n```\r\n\r\non process startup. \r\n```\r\n0:009> !pe\r\nException object: 000002a22d6b11f8\r\nException type:   System.ExecutionEngineException\r\nMessage:          <none>\r\nInnerException:   <none>\r\nStackTrace (generated):\r\n<none>\r\nStackTraceString: <none>\r\nHResult: 80131506\r\n```\r\n\r\nWith symbols available, it had been a lot easier to provide better debug info.\r\n\r\n```\r\n0:009> !clrstack\r\nOS Thread Id: 0x5f3c (9)\r\n        Child SP               IP Call Site\r\n000000b2b7d7ebb0 00007ffbc04100f4 [GCFrame: 000000b2b7d7ebb0] \r\n000000b2b7d7ed20 00007ffbc04100f4 [GCFrame: 000000b2b7d7ed20] \r\n000000b2b7d7ee48 00007ffbc04100f4 [HelperMethodFrame_1OBJ: 000000b2b7d7ee48] \r\n000000b2b7d7ef80 00007ffb305bf033 Microsoft.PowerShell.TaskbarJumpList.CreateElevatedEntry(System.String)\r\n000000b2b7d7f0f0 00007ffb305c18a4 Microsoft.PowerShell.ConsoleHost+<>c.<Start>b__4_0()\r\n000000b2b7d7f120 00007ffb2a84cb49 System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object) [E:\\A\\_work\\31\\s\\src\\mscorlib\\shared\\System\\Threading\\ExecutionContext.cs @ 167]\r\n000000b2b7d7f1a0 00007ffb2a8ff517 System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef) [E:\\A\\_work\\31\\s\\src\\mscorlib\\src\\System\\Threading\\Tasks\\Task.cs @ 2440]\r\n000000b2b7d7f240 00007ffb2a9366bc System.Threading.ThreadPoolWorkQueue.Dispatch() [E:\\A\\_work\\31\\s\\src\\mscorlib\\src\\System\\Threading\\ThreadPool.cs @ 588]\r\n000000b2b7d7f690 00007ffb2d071573 [DebuggerU2MCatchHandlerFrame: 000000b2b7d7f690] \r\n```\r\n\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.4\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0-preview.4\r\n```\r\n~~OS                             Microsoft Windows 10.0.17134~~\r\n```\r\nOS                             Microsoft Windows 10.0.16299\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n@bergmeister Is this something you recognize?",
  "closed_at": "2018-08-27T21:41:51Z",
  "comments": [
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "`ExecutionEngineException` usually mean that we have messed up unmanaged memory somehow.",
      "created_at": "2018-08-20T12:10:44Z",
      "updated_at": "2018-08-20T12:10:44Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "In TaskbarJumpList.cs\r\n\r\n![image](https://user-images.githubusercontent.com/3505151/44340408-0e296680-a485-11e8-87fa-485a555b3131.png)\r\n",
      "created_at": "2018-08-20T12:27:07Z",
      "updated_at": "2018-08-20T12:27:07Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@powercode Yes, but I have never seen a problem despite using/testing it on multiple OSs, which version of Windows are you using exactly? This code creates the Jumplist entry in the taskbar and was added in PR #6985 by converting unmanaged C++ code from the  unmanaged Windows PowerShell ConsoleHost to partially managed C# code in the managed PowerShell Core ConsoleHoist\r\nCan you retry to build and repro locally:\r\n```powershell\r\nImport-Module .\\build.psm1\r\nStart-PSBootStrap\r\nStart-PSBuild\r\nInvoke-Item \"$pwd/src\\powershell-win-core\\bin\\Debug\\netcoreapp2.1\\win7-x64\\publish\\pwsh.exe\"\r\n```",
      "created_at": "2018-08-20T12:28:06Z",
      "updated_at": "2018-08-20T12:28:06Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@powercode Sorry, I saw your screenshot only now after writing the response. To convert the C++ code, I took some code of the WindowsApiPack that wrap calls to the Windows API and it turned out now special treatment was needed for the conversion (the WindowsApiPack was written for full .Net and is only maintained by the community at the moment as it got integrated into the GUI frameworks of .Net like WPF and WinForms, therefore I expect that some code can be simplified/removed once .Net Core 3 is out).\r\nThe only thing that I could suggest is to wrap the code into a try/catch block but as the exception does not contain details about what went wrong I can only speculate it is a problem with the Windows API. cc @SteveL-MSFT ",
      "created_at": "2018-08-20T12:28:41Z",
      "updated_at": "2018-08-20T12:42:49Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@bergmeister After some investigations, it seems I actually only have machines with 1709 that manifest the problem. I updated the version info in the original description.",
      "created_at": "2018-08-20T12:52:00Z",
      "updated_at": "2018-08-20T12:52:00Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "I cannot reproduce the problem when I run without the Task, and neither with a debug build. \r\n",
      "created_at": "2018-08-20T13:49:39Z",
      "updated_at": "2018-08-20T13:49:39Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "In ComInterfaces.cs, we have \r\n```\r\n[DllImport(\"kernel32.dll\", SetLastError = true, EntryPoint = \"GetStartupInfoA\")]\r\n        internal static extern void GetStartupInfo(out StartUpInfo lpStartupInfo);\r\n```\r\nbut \r\n```\r\n[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]\r\n        internal struct StartUpInfo\r\n```\r\n\r\nSo we pass the Unicode struct to the ansi function. ",
      "created_at": "2018-08-20T13:54:40Z",
      "updated_at": "2018-08-20T13:54:40Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Could lead to strange marshalling behavior for our strings.",
      "created_at": "2018-08-20T14:04:06Z",
      "updated_at": "2018-08-20T14:04:06Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@powercode Does it repro when you compile using `-Configuration Release` and/or `-CrossGen` (the released version uses both)? The COM code that you referenced is from the WindowsCompatibiltyPack. We could check what the COM code in the WPF workspace looks like by decompiling it, maybe we can improve it that way. We could also look for the documentation of the Windows API in question to figure out an improved COM interface\r\nAlso, keep in mind that the code path that you reached gets only executed if the elevated start entry has never been created (i.e. it runs only the first time pwsh is being executed the very first time), this means that you should also copy the publish folder to a new path before launching pwsh.exe in order to be able to reproduce",
      "created_at": "2018-08-20T14:11:50Z",
      "updated_at": "2018-08-20T14:15:17Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@powercode the discrepancy between `GetStartupInfo` calling the Ansi version of the API and the `StartUpInfo` struct being Unicode seems suspect and wrong.  By chance are you using a language on your machine other than English?",
      "created_at": "2018-08-20T14:57:29Z",
      "updated_at": "2018-08-20T14:57:29Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "It not my machine - I see it out in the wild. Have to check tomorrow if it was a Swedish locale, but I don't think it was.",
      "created_at": "2018-08-20T16:27:36Z",
      "updated_at": "2018-08-20T16:27:36Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "I suggest using IntPtr instead of the strings. We don't need them anyway.\r\n\r\nEdit:\r\nIn the StartupInfo struct, that is.",
      "created_at": "2018-08-20T16:28:12Z",
      "updated_at": "2018-08-20T16:38:15Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@bergmeister Yes, I reprod on crossgen:ed. Could not repro on debug. Maybe the marshaller works different in debug? \r\n@SteveL-MSFT We could you IntPtr for the strings. That would make the struct blittable, with a much simpler marshaller. And we don't use them anyway.\r\n",
      "created_at": "2018-08-21T06:25:36Z",
      "updated_at": "2018-08-21T06:25:36Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "I haven't been able to reproduce the crash with the marshalling changes in #7580. I think the incorrect marshalling resulted in a heap corruption that later lead to a somewhat unrelated crash. ",
      "created_at": "2018-08-21T07:04:13Z",
      "updated_at": "2018-08-21T07:05:16Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@powercode  My final fix (spinning up the thread in STA instead of MTA mode) for this issue has been back-ported to the recent release of `6.2.2`, please update and provide feedback if it fixed it. If you use the preview you will have to wait for `7.0.0-preview.2` or use the daily build instead (or build from `master`)\r\nhttps://github.com/PowerShell/PowerShell/releases/tag/v6.2.2",
      "created_at": "2019-07-16T18:50:35Z",
      "updated_at": "2019-07-16T18:51:04Z"
    }
  ],
  "created_at": "2018-08-20T12:09:22Z",
  "labels": [
    "Issue-Bug",
    "WG-Interactive-Console",
    "Resolution-Fixed"
  ],
  "number": 7572,
  "state": "closed",
  "title": "Crash in Microsoft.PowerShell.TaskbarJumpList.CreateElevatedEntry(System.String)",
  "updated_at": "2019-07-16T18:51:04Z"
}