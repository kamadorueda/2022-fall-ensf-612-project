{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13304",
  "author": "daxian-dbw",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nFix #12842\r\n\r\nRefresh and enable the `ComInterop` code in PowerShell to get significant perf improvement in COM related operations.\r\n\r\n## Perf Comparison\r\n\r\nHere is the perf difference shown by running the real world script provided in https://github.com/PowerShell/PowerShell/issues/12842#issuecomment-636313386\r\nIt's 20x faster with this PR.\r\n\r\nPowerShell 7.0.3\r\n```\r\nStarted script\r\n\r\nould not find Timezones.csv in C:\\arena\\tmp\\comInterop\\testing.\r\nScript will continue, ID will be used instead of time-zone name.\r\nConfig system global line found.\r\nSection done.\r\nConfig system interface line found.\r\nSection done.\r\nConfig router static line found.\r\nSection done.\r\nCreating Table of Contents\r\nWriting Excelfile C:\\arena\\tmp\\comInterop\\testing\\PerfTest_20200526_0942.xls\r\nScript done in 2 Minute(s) and 6 Second(s).\r\n```\r\n\r\nPrivate build with this PR\r\n```\r\nStarted script\r\n\r\nould not find Timezones.csv in C:\\arena\\tmp\\legacy-comInterop-code\\real-world-test-script.\r\nScript will continue, ID will be used instead of time-zone name.\r\nConfig system global line found.\r\nSection done.\r\nConfig system interface line found.\r\nSection done.\r\nConfig router static line found.\r\nSection done.\r\nCreating Table of Contents\r\nWriting Excelfile C:\\arena\\tmp\\legacy-comInterop-code\\real-world-test-script\\PerfTest_20200526_0942.xls\r\nScript done in 0 Minute(s) and 6 Second(s).\r\n```\r\n\r\n## ComInterop Context\r\n\r\n> **NOTE: _This comes from the content in `engine/ComInterop/README.md`, please review for the detailed information._**\r\n\r\nThe ComInterop code shipped in PowerShell comes from [dotnet/runtime](https://github.com/dotnet/runtime) with _a considerable amount of refactoring work_ to make it work properly with PowerShell.\r\n\r\nThere are 3 sources of the ComInterop code as our references:\r\n\r\n1. [The .NET Framework version](https://github.com/IronLanguages/main/tree/ipy-2.7-maint/Runtime/Microsoft.Dynamic/ComInterop).\r\n   The code was archived in 2012.\r\n\r\n2. [The .NET 5.0 version](https://github.com/dotnet/runtime/tree/master/src/libraries/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/ComInterop).\r\n   It was merged into .NET 5.0 in May 2020 through the PR [dotnet/runtime#33060](https://github.com/dotnet/runtime/pull/33060).\r\n   It's based on the .NET Framework version code with quite amount of refactoring work.\r\n\r\n3. [The legacy ComInterop code from Windows PowerShell](https://github.com/PowerShell/PowerShell/tree/v7.0.0/src/System.Management.Automation/engine/ComInterop).\r\n   The legacy code has always been in the repository, but it was excluded from compilation.\r\n   It was based on the .NET Framework version code with a considerable amount of refactoring work to make it work properly with Windows PowerShell.\r\n\r\n### Code Refreshing\r\n\r\nThe ComInterop code was refreshed and enabled in compilation in PowerShell 7.1, August 2020.\r\nIt was done manually by:\r\n\r\n- A careful **three-way comparison** across all the code sources listed above:\r\n  - Compare (3) to (1) to get the PowerShell specific changes\r\n  - Compare (2) to (1) to get the .NET 5.0 changes\r\n\r\n- Applying the PowerShell specific changes from (3) to (2), with necessary further refactoring\r\n\r\n- A careful review of the new PowerShell specific changes applied to (2), again using the three-way comparison:\r\n  - Compare the refreshed ComInterop code with (3) to get the differences\r\n  - Analyze the differences to make sure they are either the pure .NET 5.0 changes over the .NET Framework code,\r\n    or the refactoring changes that is necessary to apply the PowerShell specific changes.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-08-07T23:24:12Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We borrow .Net code from several places such as Interpreter and ComInterop. Make sense to ask .Net team to enhance .Net API so that we can use _public_ code without copy-paste?\r\n",
      "created_at": "2020-08-06T03:55:11Z",
      "updated_at": "2020-08-06T03:55:11Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "We had the conversation with the .NET team and the conclusion so far is to keep it as is today, due to 2 main reasons:\r\n1. Both the expression interpreter and the COM binder code are archived components in .NET, there is no activity in those components (except for the needed changes to get them in .NET Core/5.0).\r\n2. It's not a sheer copy of the .NET code. There are additional PowerShell specific changes to those code in PowerShell repo. Take [this commit](https://github.com/PowerShell/PowerShell/pull/13304/commits/373116c613f6b533c05d4120c241cb23eaf6fb3e) as an example to see the PowerShell specific changes to COM binder on top of the .NET 5.0 code.",
      "created_at": "2020-08-06T16:43:26Z",
      "updated_at": "2020-08-06T19:08:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Both the expression interpreter and the COM binder code are archived components in .NET\r\n\r\nClear about COM binder but can you share more information about Interpreter? The \"archived\" sounds like one step before obsolete and two step before removing. Is C# scripting future? :-)",
      "created_at": "2020-08-06T17:08:37Z",
      "updated_at": "2020-08-06T17:08:37Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> Clear about COM binder but can you share more information about Interpreter?\r\n\r\nTo the expression interpreter, the additional changes includes `UpdatePositionInstruction` and the changes to `LightLambda` to JIT compile powershell loop and script block when the threshold is met, and some more that I cannot recall now.\r\n\r\n> The \"archived\" sounds like one step before obsolete and two step before removing. Is C# scripting future? :-)\r\n\r\n`archived` means the code is relatively pretty stable and there is no new feature planned for the component. It doesn't imply `obsolete` -- bringing back COM binder in .NET 5.0 is a clear evidence that the com binder is supported.\r\n\r\nFor the expression interpreter, `System.Linq.Expression` and `Microsoft.CSharp` are where the code lives, and they are now the archived components. But those 2 libraries are obviously important building blocks for many other components.\r\n\r\nHere is the area doc if you are interested: https://github.com/dotnet/runtime/blob/master/docs/area-owners.md",
      "created_at": "2020-08-06T18:50:37Z",
      "updated_at": "2020-08-06T19:00:54Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.1.0-preview.6` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.6)\n",
      "created_at": "2020-08-17T22:21:25Z",
      "updated_at": "2020-08-17T22:21:25Z"
    }
  ],
  "created_at": "2020-07-29T19:07:44Z",
  "number": 13304,
  "state": "closed",
  "title": "Refresh and enable the ComInterop code in PowerShell",
  "updated_at": "2020-08-17T22:21:25Z"
}