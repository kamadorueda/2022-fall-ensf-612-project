{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13659",
  "author": "Fooughhy",
  "body": "I am trying to schedule TNUC to run at login. I do not believe there is an option to do so, and would simply like to try this out. I think I've previously put a shortcut in the Startup folder, but don't see why this shouldn't work. I am also doing this as I want the window to stay open. Therefore I want to run it through powershell, with the '-NoExit' parameter.\r\n\r\n## Steps to reproduce\r\n\r\n(Download TinyNvidiaUpdateChecker)\r\nCreate a new scheduled task. I have set it to use the highest privilege and to configure for \"Windows 10\". The trigger is \"At login\" and the actual task is to start a program.\r\n\r\nUse \"pwsh.exe\" as the program. Powershell 7.0.3 is on my path, so this will open that (I have checked manually). You can point to it directly, it doesn't matter.\r\nThen add the `-NoExit` and `-File \"path-to-TinyNvidiaUpdateChecker\"` arguments as the optional arguments. Click \"Ok\" and complete the task.\r\n\r\n## Expected behavior\r\n\r\nTinyNvidiaUpdateChecker is run (in a console window) and the console expects an input when the script is done (As a result of the `NoExit` tag).\r\n\r\n## Actual behavior\r\n\r\nWhen this task is run, the following window appears. This seems like a weird error. [Powershell Window][1]\r\n\r\nIn Task Scheduler, the task has the error 0x40 if I use the full path for powershell, or 0xC000013A if I just use \"pwsh.exe\" as the application.\r\n\r\nWhat am I doing wrong?\r\n\r\n[1]: https://i.stack.imgur.com/s06wN.png\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.3\r\nPSEdition                      Core\r\nGitCommitId                    7.0.3\r\nOS                             Microsoft Windows 10.0.19041\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-09-19T16:19:51Z",
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "The `-File` parameter is for PowerShell scripts, so it's trying to parse the executable you're pointing it to as a plain text PowerShell script (or at least `pwsh` is, `powershell` is just failing immediately because the extension isn't `ps1`).  Try `-Command` instead.",
      "created_at": "2020-09-19T13:02:31Z",
      "updated_at": "2020-09-19T13:02:31Z"
    },
    {
      "author": "Fooughhy",
      "author_association": "NONE",
      "body": "Thank you for the fast and short answer! Sorry that I didn't see that solution before. That seems to have fixed the issue.",
      "created_at": "2020-09-19T15:34:45Z",
      "updated_at": "2020-09-19T15:34:45Z"
    }
  ],
  "created_at": "2020-09-19T11:35:36Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 13659,
  "state": "closed",
  "title": "Scheduled powershell task ends with '0xC000013A' error code",
  "updated_at": "2020-09-19T16:19:51Z"
}