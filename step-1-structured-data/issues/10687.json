{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10687",
  "author": "mklement0",
  "body": "The root cause is that a string returned from a cmdlet call or external program has an invisible extra `[psobject]` wrapper, and the `Invoke-Command` cmdlet fails to take that possibility into account.\r\n\r\nIn short: The command below breaks, because `(hostname)` has such an invisible wrapper, as evidenced by `(hostname)  -is [psobject]` being `$true`.\r\n\r\nThis is yet another manifestation of our old friend #5579.\r\n\r\nThe specific problem in `Invoke-Command` is [here](https://github.com/PowerShell/PowerShell/blob/77ddec161417f98f8f2e57e9e9ef57d00cdc4c98/src/System.Management.Automation/engine/remoting/commands/PSRemotingCmdlet.cs#L1063).\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n{ icm -SSHConnection @{ Hostname = (hostname) } -ScriptBlock { 'hi' }  } | \r\n  Should -not -Throw\r\n```\r\n\r\n# Expected behavior\r\n\r\nThe test should succeed, if the local computer is set up for being a SSH remoting target.\r\n\r\n# Actual behavior\r\n\r\nThe test fails:\r\n\r\n```\r\nExpected no exception to be thrown, but an exception \r\n\"The provided SSHConnection hashtable parameter name or element is null or empty.\" was thrown from line:1 char:3\r\n```\r\n\r\nNote that using `(hostname).psobject.BaseObject` or `\"$(hostname)\"` or `(hostname).ToString()` makes the problem go away.\r\n\r\nAs an aside: if the host name were truly invalid due not being a string, the error message would be misleading, because the problem is that the entry is of the _wrong type_, not that it is _null or empty_.\r\n\r\nA further aside: The comment above the `SSHConnection` parameter definition is incomplete: keys `Port` and `Subsystem` are missing.\r\n\r\n# Environment data\r\n\r\n\r\n```none\r\nPowerShell Core v7.0.0-preview.4\r\n```\r\n",
  "closed_at": "2019-10-15T17:16:50Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We have `LanguagePrimitives.TryConvertTo`. Question is should we accept only PSObject with base string type or we need to try convert any PSObject to string?\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/950e4ba0820406a451c83fbc3ac75bf7cc840029/src/System.Management.Automation/engine/remoting/commands/PSRemotingCmdlet.cs#L1061-L1069",
      "created_at": "2019-10-03T09:04:55Z",
      "updated_at": "2019-10-03T09:07:49Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: \r\n\r\nThe current code accepts string only, and I think that's reasonable.\r\n\r\nI don't think that users will gain anything if we support other types here - at least I don't see what other types might be useful in this scenario.\r\n\r\nIf we stick with the current approach, I recommend implementing amending the existing error message to say something like \"element is null, empty, _or of the wrong type_\".\r\n\r\n\r\n",
      "created_at": "2019-10-03T12:38:32Z",
      "updated_at": "2019-10-03T12:38:32Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "I think it should follow the same path that a normal parameter binding would, so `LanguagePrimitives.ConvertTo` makes the most sense imo (probably don't need `TryConvertTo`, everything can be converted to a string in some way).",
      "created_at": "2019-10-03T12:50:05Z",
      "updated_at": "2019-10-03T12:50:05Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "That makes sense, @SeeminglyScience - I expect the only real problem for end users to be the scenario detailed in this report.\r\n\r\nHowever, the point about amending the error message still applies, because there's also `GetSSHConnectionIntParameter` for `int` values - where it's definitely possible to pass the wrong type.\r\n\r\nSpeaking of: The latter currently accepts an `int` value _only_; passing a ` long` breaks, for instance.\r\nThus, I suggest modifying `GetSSHConnectionIntParameter` to use `LanguagePrimitives.ConvertTo` as well - see https://github.com/PowerShell/PowerShell/blob/950e4ba0820406a451c83fbc3ac75bf7cc840029/src/System.Management.Automation/engine/remoting/commands/PSRemotingCmdlet.cs#L1078\r\n",
      "created_at": "2019-10-03T13:42:38Z",
      "updated_at": "2019-10-03T13:42:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SeeminglyScience Can you grab this? I already have over 15 opened PRs but I'd prefer to get the null reference exception fixed before GA.",
      "created_at": "2019-10-03T14:09:16Z",
      "updated_at": "2019-10-03T14:09:16Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov Yeah I can grab it",
      "created_at": "2019-10-03T15:45:40Z",
      "updated_at": "2019-10-03T15:45:40Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #10720, which has now been successfully released as `v7.0.0-preview.5`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.5)\n",
      "created_at": "2019-10-23T19:07:58Z",
      "updated_at": "2019-10-23T19:07:58Z"
    }
  ],
  "created_at": "2019-10-02T20:34:33Z",
  "labels": [
    "Issue-Bug",
    "Resolution-Fixed",
    "Hacktoberfest",
    "WG-Cmdlets-Core"
  ],
  "number": 10687,
  "state": "closed",
  "title": "Invoke-Command -SSHConnection breaks if the HostName string is [psobject]-wrapped ",
  "updated_at": "2019-10-23T19:07:58Z"
}