{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10626",
  "author": "daxian-dbw",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nUnregister the event handler from `AppDomain.CurrentDomain.ProcessExit` when uninitializing AMSI.\r\n\r\nThe event handler was registered when opening a Runspace, but not unregistered when closing.\r\nIn the hosting scenario, every time a Runspace is opened/closed, an instance of the `EventHandler` will be left behind linked to the `AppDomain.CurrentDomain`. In a dump file provided by a partner team, there are 588017 such `EventHandler` instances leaked.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2019-09-26T21:45:48Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I tried to add a test, but I cannot find a way to get the `EventHandler` methods from the `event` member `AppDomain.ProcessExit` ...",
      "created_at": "2019-09-25T21:48:55Z",
      "updated_at": "2019-09-25T21:54:03Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I can get the invocation method list in .NET, but not in .NET Core. The following works in Windows PowerShell\r\n```powershell\r\n$f = [System.AppDomain].GetFields([System.Reflection.BindingFlags]::Instance -bor [System.Reflection.BindingFlags]::NonPublic -bor [System.Reflection.BindingFlags]::GetField) | ? name -eq '_processExit'\r\n$v = $f.GetValue([System.AppDomain]::CurrentDomain)\r\n$v.GetInvocationList()\r\n\r\nMethod                                                          Target\r\n------                                                          ------\r\nVoid DisposeOnShutdown(System.Object, System.EventArgs)\r\nVoid CurrentDomain_ProcessExit(System.Object, System.EventArgs)\r\nVoid SingletonDomainUnload(System.Object, System.EventArgs)     {System.EventHandler}\r\n```\r\n\r\nSo at least I can add a test when porting this change to Windows PowerShell.",
      "created_at": "2019-09-26T17:55:28Z",
      "updated_at": "2019-09-26T17:55:28Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "<!--[AutoMerge]-->\nHello @daxian-dbw!\n\nBecause this pull request has the `AutoMerge` label, I will be glad to assist with helping to merge this pull request once all check-in policies pass.\n\nDo note that I've been instructed to only help merge pull requests of this repository that have been opened for at least **24 hours**, a condition that will be fulfilled in about 1 hour 59 minutes. No worries though, I will be back when the time is right! :wink:\n\n##### p.s. you can customize the way I help with merging this pull request, such as holding this pull request until a specific person approves. Simply @mention me (`@msftbot`) and give me an instruction to get started! Learn more [here](https://github.com/OfficeDev/office-ui-fabric-react/wiki/Advanced-auto-merge).",
      "created_at": "2019-09-26T19:46:01Z",
      "updated_at": "2019-09-26T19:46:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw I got it (\"static\" is key):\r\n```powershell\r\n$f = [System.AppContext].GetFields([System.Reflection.BindingFlags]::Instance -bor [System.Reflection.BindingFlags]::NonPublic -bor [System.Reflection.BindingFlags]::GetProperty -bor [System.Reflection.BindingFlags]::Static) | ? name -eq 'ProcessExit'\r\n$v = $f.GetValue([System.AppDomain]::CurrentDomain)\r\n# or $f.GetValue([System.AppContext]::ProcessExit)\r\n\r\n$v.GetInvocationList()\r\n```",
      "created_at": "2019-09-27T04:56:41Z",
      "updated_at": "2019-09-27T04:57:06Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov This is very strange, and feels to me may randomly stop working in future .NET Core \ud83d\ude04",
      "created_at": "2019-09-30T21:38:29Z",
      "updated_at": "2019-09-30T21:38:29Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw AppContext is public API and the property is static - it is not likely that this public API will be changed.\r\n",
      "created_at": "2019-10-01T03:02:25Z",
      "updated_at": "2019-10-01T03:02:25Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Ahh, I thought it was `[System.AppDomain]`. Just realized you were using `[System.AppContext]`.\r\n> $f.GetValue([System.AppDomain]::CurrentDomain)\r\n\r\nThis is wrong, should pass in `$null` as argument. I will submit a test for this change then.",
      "created_at": "2019-10-09T23:35:36Z",
      "updated_at": "2019-10-09T23:35:36Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Hmm, I cannot write a Pester test for this, because the leak won't happen as long as a Runspace still opens. Need to do it in xUnit.",
      "created_at": "2019-10-09T23:46:14Z",
      "updated_at": "2019-10-09T23:46:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> This is wrong, should pass in $null as argument.\r\n\r\nI don't understand your thought. It seem works well in the example I posted.",
      "created_at": "2019-10-10T03:36:27Z",
      "updated_at": "2019-10-10T03:36:27Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "It's a static field, so should pass `null` when calling `GetValue`. Your code works but that may be because the dotnet implementation just ignored the passed in argument, which could change to check for `null` in future.",
      "created_at": "2019-10-10T18:39:07Z",
      "updated_at": "2019-10-10T18:39:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Sorry, if I noisy but I always wonder how in-depth you look.\r\nDo you mean that `[System.AppDomain]::CurrentDomain` can be null? I see it is non-nullable and initialized with `new AppDomain()`.\r\nAlso we can use `$f.GetValue([System.AppContext]::ProcessExit)` as I mentioned in example above.",
      "created_at": "2019-10-10T18:51:17Z",
      "updated_at": "2019-10-10T18:51:17Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I was not clear in my above statement. Today, you can pass anything to `$f.GetValue()` when it's a static field. For example:\r\n```\r\nPS:32> $f = [System.AppContext].GetFields([System.Reflection.BindingFlags]::NonPublic -bor [System.Reflection.BindingFlags]::GetProperty -bor [System.Reflection.BindingFlags]::Static) | ? name -eq 'ProcessExit'\r\nPS:33> $f.GetValue(\"fff\")\r\n\r\nTarget Method\r\n------ ------\r\n       Void CurrentDomain_ProcessExit(System.Object, System.EventArgs)\r\n```\r\nIt may be because today the .net implementation ignore the argument when the field is static, but this could change in future so that exception would be thrown if the passed in argument is not null.",
      "created_at": "2019-10-10T19:09:30Z",
      "updated_at": "2019-10-10T19:09:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Thanks for clarify! \r\nIt would be a breaking change which is incredible for dotnet runtime.\r\n",
      "created_at": "2019-10-10T19:41:34Z",
      "updated_at": "2019-10-10T19:41:34Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.0.0-preview.5` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.5)\n",
      "created_at": "2019-10-23T19:08:12Z",
      "updated_at": "2019-10-23T19:08:12Z"
    }
  ],
  "created_at": "2019-09-25T21:45:45Z",
  "number": 10626,
  "state": "closed",
  "title": "Unregister the event handler from 'AppDomain.CurrentDomain.ProcessExit' when uninitializing AMSI",
  "updated_at": "2019-10-23T19:08:13Z"
}