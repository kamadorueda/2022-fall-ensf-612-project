{
  "_url": "https://github.com/PowerShell/PowerShell/issues/18522",
  "author": "wisemoth",
  "body": "### Summary of the new feature / enhancement\r\n\r\naliased parameters are hard to discover in `get-help`.  I recently [raised](https://github.com/MicrosoftDocs/PowerShell-Docs/issues/9423) what I thought was a documentation issue, only to see that in fact the documentation was present, but that the *presentation* of it was confusing.\r\n\r\n### Proposed technical implementation details (optional)\r\n\r\nWhen attempting to discover Parameters all should be provided (certainly in `-Detailed` form), and so in the \"documentation issue\" I raised concerning the help for `Invoke-Command` I would think something like this would be useful in `get-help` output:\r\n```\r\n...\r\n-Disconnected : alias, see InDisconnectedSession\r\n...\r\n```\r\n\r\nIn other words allow the alias to be a first-class parameter for the purposes of enumerating the parameters, but add a cross-link to the \"other\" parameter for the actual documentation.\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "I agree with the issue, aliases are hard to distinguish in help topics. For myself, I wrote a simple function to find out the parameter aliases:\r\n\r\n```powershell\r\nfunction Find-ParametersAliases\r\n{\r\n    param (\r\n\r\n        [Parameter(Mandatory)]\r\n        [string]\r\n        $command\r\n    )\r\n\r\n    foreach ($k in ($param = (Get-Command $command).Parameters).Keys) {\r\n\r\n        [pscustomobject] @{\r\n            Parameter = $param.$k.Name\r\n            Aliases = $param.$k.Aliases -join ', '\r\n        }\r\n    }\r\n}\r\n```",
      "created_at": "2022-11-10T18:50:33Z",
      "updated_at": "2022-11-10T18:50:33Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "@wisemoth Get-Help will, when the cmdlet help is complete (which only happens in an ideal world), show you aliases on individual parameters like so\r\n\r\n`Get-Help Get-ChildItem -Parameter Recurse`\r\n![image](https://user-images.githubusercontent.com/6355225/201193942-61656699-cc62-48ac-8d1e-e5bb715a7050.png)\r\n\r\nHowever as @237dmitry mentions above you actually can get this information when the help isn't complete by using `Get-Command`\r\nThis is one of the reasons why we've tried in the community to teach people to make use of the \"holy trio\" of Cmdlets for working out what you can do in PowerShell, `Get-Help`, `Get-Command` & `Get-Member`\r\nAlso as we don't have everything in an ideal world, the above techniques are the best way that we have. \r\n\r\nYou are best using the above function although I'd call it `Find-ParameterAlias` like so\r\n```powershell\r\nfunction Find-ParameterAlias {\r\n    [cmdletbinding()] # Not technically needed when a parameter is defined with [Parameter()] \r\n    [Alias('fpa')] # Added to be lazy and technically complete\r\n    param (\r\n        [Parameter(Mandatory)]\r\n        [Alias('c')] # Technically not required but useful to know of & to be complete\r\n        [string] \r\n        $command\r\n    )\r\n    $cmd = Get-Command $command \r\n    if ($cmd.CommandType -match 'Cmdlet|Function') {\r\n        foreach ($k in ($param = $cmd.Parameters).Keys) {\r\n            [pscustomobject] @{\r\n                Parameter = $param.$k.Name\r\n                Aliases = $param.$k.Aliases -join ', '\r\n            }\r\n        }\r\n    } else {\r\n            Write-Warning \"Command $cmd is not a PowerShell Function or Cmdlet - Please refer to its own help/man pages\"\r\n    }\r\n}\r\n```\r\nso then you can be even lazier and just run `fpa gcm` for get-command as an example\r\nor if I run `fpa Find-ParameterAlias` it'll now show this \r\n![image](https://user-images.githubusercontent.com/6355225/201200626-f7abeb3b-f376-432a-a351-1dc722089c75.png)\r\n\r\n\r\nHope this helps and as mentioned that due to not all cmdlets/functions having complete help this is currently as designed and I can't see this being something that can or ever will be able to be changed\r\n\r\n",
      "created_at": "2022-11-10T20:52:40Z",
      "updated_at": "2022-11-10T20:54:24Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> [Alias('fpa')]\r\n\r\nI set the same alias in $profile )) This alias is obvious. ",
      "created_at": "2022-11-10T21:11:30Z",
      "updated_at": "2022-11-10T21:11:30Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "@237dmitry - personally I think that it's better to set it in the function definition rather than outside of it as it automatically creates the alias though totally up to you how you manage your aliases for cmdlets/functions ",
      "created_at": "2022-11-10T21:31:36Z",
      "updated_at": "2022-11-10T21:31:36Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> personally I think that it's better to set it in the function definition rather than outside of it\r\n\r\nI agree, this function used to be a script.",
      "created_at": "2022-11-10T21:51:56Z",
      "updated_at": "2022-11-10T21:51:56Z"
    },
    {
      "author": "wisemoth",
      "author_association": "NONE",
      "body": "We shouldn't need to write functions to better understand command help/parameters.\r\n\r\nIn this case I saw `-Disconnect` for `invoke-command` mentioned in an article, so I wanted to find out more.  It seems I have to either \"reverse search\" or direct my help inquiry to the level of a parameter, rather than the command, to:\r\n\r\na) learn that `-Disconnect` is an alias\r\nb) find the \"source\" parameter for the alias.\r\n\r\nMy intention with this ticket is to seek _presentational_ improvement in the output of `get-help` (and perhaps `get-command -syntax` and others) to improve the experience.",
      "created_at": "2022-11-11T10:56:38Z",
      "updated_at": "2022-11-11T10:56:38Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "> We shouldn't need to write functions to better understand command help/parameters.\r\n\r\nI agree however that's the ideal world and not the current real world. Whilst I'd also like us to get to the ideal world, I was being realistic in my adding of the resolution labels, but not closing the issue, because for now currently that is the right resolution to the issue raised, I did so, as to keep a historical trial of things that we have a resolution to, even if it isn't ideal. \r\nBut I am also glad that this issue was also reviewed by @SeeminglyScience because he's right that this is an enhancement to the interactive help system - I was just providing additional clarity for others that may read this issue in future & was also why I didn't close this issue as I do think we can improve things.\r\n\r\n> My intention with this ticket is to seek presentational improvement in the output of get-help (and perhaps get-command -syntax and others) to improve the experience.\r\n\r\nI don't see us being unable to get there, however it isn't going to be an easy journey based on my experience of how things currently are.\r\nSome thoughts though is that the help text should be improved as such that it comes as closely from the command definition as possible, which is why comment based help tends to be the best for this.\r\nThis isn't going to be an easy fix, but I am sure that it can be done. ",
      "created_at": "2022-11-13T08:36:49Z",
      "updated_at": "2022-11-13T08:36:49Z"
    }
  ],
  "created_at": "2022-11-10T16:19:47Z",
  "number": 18522,
  "state": "open",
  "title": "get-help: Improve presentation of aliased parameters",
  "updated_at": "2022-11-13T08:36:49Z"
}