{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4825",
  "author": "dantraMSFT",
  "body": "The purpose of this function is to encapsulate verifying a non-terminating error just as ShouldBeErrorId verifies terminating errors.\r\n\r\nThe reason for the function is to avoid tests using -ErrorAction Stop to leverage ShouldBeErrorId.  While this works, it does not verify that the error is, in fact non-terminating and an intentional or unintentional in the underlying API would be unnoticed.\r\n\r\nit also clarifies that the test is expecting a non-terminating error.",
  "closed_at": "2018-02-25T21:27:11Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If we add a property as requested in #4781 we can easy check that an error is terminating error:\r\n```powershell\r\n$exc = { Select-XML -ErrorAction Stop } | ShouldBeErrorId \"...\"\r\nif ($exc.IsTerminating) { ... }\r\n```\r\nWith this approach, we can continue to use one pattern but be more accurate in tests.\r\nI think that using a new function and a new pattern will complicate our tests. While the new property `IsTerminating` will give us more opportunities.",
      "created_at": "2017-09-13T08:17:00Z",
      "updated_at": "2017-09-13T08:17:00Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Perhaps:\r\n\r\n```powershell\r\n{ select-xml whatever } | ShouldBeErrorId \"...\" | ShouldBeTerminatingError\r\n```\r\n\r\nAgree it should be built upon #4781 which isn't planned for 6.0.0.  ",
      "created_at": "2017-09-13T18:49:06Z",
      "updated_at": "2017-09-13T18:49:06Z"
    },
    {
      "author": "dantraMSFT",
      "author_association": "CONTRIBUTOR",
      "body": "I was thinking along the lines of the following:\r\n\r\n{ select-xml whatever } | ShouldBeErrorId \"...\" -Nonterminating \r\n",
      "created_at": "2017-09-13T19:02:57Z",
      "updated_at": "2017-09-13T19:02:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I guess Pester unlike parameters `-Nonterminating` for `Should`.\r\n(Also next version of Pester have a implementation of `ShouldBeErrorId`. )",
      "created_at": "2017-09-14T04:05:42Z",
      "updated_at": "2017-09-14T04:05:42Z"
    },
    {
      "author": "dantraMSFT",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: I have to disagree with the  IsTerminating property for solving this problem (test verifying non-terminating errors).  If the error is non-terminating, the error stream contains the error; otherwise, the error is thrown. For both cases, the property is moot from a test perspective.  Of course, a function for testing terminating or non-terminating errors should be prepared for detecting the incorrect error pattern. \r\n\r\nCurrently, ShouldBeErrorId does not do that.  \r\n\r\nAdditionally, I feel it's incorrect to use -ErrorAction Stop to artificially raise an exception for an error since it aborts the execution of the rest of the function.\r\n",
      "created_at": "2017-09-14T17:27:39Z",
      "updated_at": "2017-09-14T17:28:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@dantraMSFT Good point! I agree that  IsTerminating property don't resolve the problem and we should think about new pattern.\r\n\r\nSo what is a conclusion? - use current pattern until we start to resolve #4781?",
      "created_at": "2017-09-14T17:57:03Z",
      "updated_at": "2017-09-14T17:57:03Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "For now, I think we should continue to use the pattern until we resolve #4781 so that we can easily find these occurrences in the future and fix them in bulk",
      "created_at": "2017-09-14T18:05:51Z",
      "updated_at": "2017-09-14T18:05:51Z"
    },
    {
      "author": "dantraMSFT",
      "author_association": "CONTRIBUTOR",
      "body": "My opinion is it should be independent; the testing requirement can be solved without a product change.  I've mocked up -Nonterminating and extended ShouldBeErrorId to handle both as well as fixing a subtle problem with the try/catch.  If people don't like the -Nonterminating switch, a new function could be created.\r\nBoth should handle the case where the test expects terminating/non-terminating errors but the product does the opposite; though.",
      "created_at": "2017-09-14T18:07:56Z",
      "updated_at": "2017-09-14T18:07:56Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "cc @JamesWTruher your thoughts on the switch?",
      "created_at": "2017-09-14T18:32:29Z",
      "updated_at": "2017-09-14T18:32:29Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "I find the already existing `ShouldBeErrorId` assertion function odd because it is not part of vanilla Pester. If any additional assertion function is generally useful (and I think at least `ShouldBeErrorId`  is), then you should rather open a PR and add it to Pester itself. The assertion function not being part of vanilla Pester makes it harder to run tests locally by just running `Invoke-Pester` against the test file. You must also think of the use case that someone only wants to make a small contribution and repro a failing test in CI locally without having to do too much setup work and look for documentation.",
      "created_at": "2018-02-08T12:58:29Z",
      "updated_at": "2018-02-08T12:58:29Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@bergmeister all tests in this project depend on using `Start-PSPester` to ensure shared code, binaries, paths, and modules are present. I don't think there is currently any expectation to run project tests with `Invoke-Pester` directly.  You can call a specific test or tag directly with `Start-PSPester`. \r\n\r\nI use this often when testing the web cmdlet changes on Windows:\r\n\r\n```PowerShell\r\nStart-PSPester -powershell .\\src\\powershell-win-core\\bin\\Release\\netcoreapp2.0\\win7-x64\\publish\\pwsh.exe -binDir .\\src\\powershell-win-core\\bin\\Release\\netcoreapp2.0\\win7-x64\\publish\\  -Path .\\test\\powershell\\Modules\\Microsoft.PowerShell.Utility\\WebCmdlets.Tests.ps1 -Terse\r\n```",
      "created_at": "2018-02-08T13:54:49Z",
      "updated_at": "2018-02-08T13:55:12Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "On another note, I think that both functionalities should be a part of Pester and not something we and 100's of other projects have to re-invent the wheel on.",
      "created_at": "2018-02-08T13:57:55Z",
      "updated_at": "2018-02-08T13:57:55Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@markekraus by default, `Start-PSPester` should automatically figure out the location of your last build, so you shouldn't need to use the `-powershell` switch or the `-bindir` switch.\r\n\r\nI agree that the validation of errors is generic and we should have this discussion in Pester repo and (hopefully) eventually remove our custom function.",
      "created_at": "2018-02-08T17:27:58Z",
      "updated_at": "2018-02-08T17:27:58Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "It should... but doesn't all of the time. I'm not sure why. Rather than dig into it I just keep that handy in my history.",
      "created_at": "2018-02-08T17:39:21Z",
      "updated_at": "2018-02-08T17:39:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What is Perter repo Issue number?",
      "created_at": "2018-02-09T05:34:27Z",
      "updated_at": "2018-02-09T05:34:27Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@dantraMSFT can you open a new issue in Pester repo specifically to handle terminating and non-terminating errors with `Should -Throw`?",
      "created_at": "2018-02-09T15:13:23Z",
      "updated_at": "2018-02-09T15:13:23Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT  In pester 4.2 (see blog [here](http://jakubjares.com/2017/12/19/using-should-throw/)) it is now possible to assert against the errorId, which means that the custom assertion operator of this repo against the errorid should be dropped now (example taken from blog):\r\n````powershell\r\n    It 'throws argument exception when given $null' {\r\n        { Get-Computer `$null } |\r\n            Should -Throw `\r\n                -ExceptionType ([ArgumentException]) `\r\n                -ErrorId 'SpecificErrorId'\r\n    }\r\n````\r\nAlso, I cannot see an issue being raised about terminating vs non-terminating errors in Pester (but I do approve that this would be very helpful). Therefore I do not see why this issue was closed.",
      "created_at": "2018-02-25T16:55:59Z",
      "updated_at": "2018-02-25T16:58:00Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@bergmeister yea. We need to update our guidance and then begin the process of refactoring. When the the project switched PSGallery Pester we did the minimal just to get the existing tests working under the new pester, but, we should also refactor existing tests to fit the new ways of doing things. (I.e. using `-Be` instead of `Be` and some of the newer options like `-HaveCount`, `-BeTrue`, and `-BeFalse` and `-Throw -ErrorId`)",
      "created_at": "2018-02-25T17:09:15Z",
      "updated_at": "2018-02-25T17:09:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Is it style changes or we get any benefits (performance, remove deprecated Pester patterns)?",
      "created_at": "2018-02-25T17:25:24Z",
      "updated_at": "2018-02-25T17:25:24Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Refactoring tests for consistency, enforcement of best practices, and the ability to publish and enforce guidance are my concern. I'm tired of the excuse that we have to shove new ways of doing things into old and rusted code patterns just because refactoring doesn't \"provide any benefits\". I can understand not refactoring the code base for those reasons, but tests? We don't need to justify doing things correctly, IMO.",
      "created_at": "2018-02-25T17:58:44Z",
      "updated_at": "2018-02-25T17:59:08Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "the benefit to me is to move away rather than more into a home-grown test framework so that the majority of tests can be executed using vanilla Pester. I have already upgraded all `PSScriptAnalyzer` operators to v4 syntax and to the new operators in 4.2 and can say that they work fine except for edge cases with  `-HasCount`, which I raised an issue.",
      "created_at": "2018-02-25T18:02:46Z",
      "updated_at": "2018-02-25T18:03:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think we need a new tracking Issue with the rationales to get confirmation from MSFT team.",
      "created_at": "2018-02-25T18:18:45Z",
      "updated_at": "2018-02-25T18:18:45Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "We probably need a new issue for some of the stuff that we discussed but this issue should also be re-opened because it seemed to be closed by accident.",
      "created_at": "2018-02-25T18:27:23Z",
      "updated_at": "2018-02-25T18:27:23Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Now, I remember.  I closed this as we should discuss validating terminating vs non-terminating in the Pester repo rather than having another custom function.  I agree with the other statements that we should move away from custom functions as much as possible.  Less code for us to maintain and also community contributors can use existing patterns from Pester rather than learning something unique to this project.  We should convert our existing tests to use the new Pester support for error validation.  Their latest release supports `-PassThru` so I think everything is needed to remove `ShouldBeErrorId`.  Closing again.",
      "created_at": "2018-02-25T21:27:11Z",
      "updated_at": "2018-02-25T21:27:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Clear about \"We should convert our existing tests to use the new Pester support for error validation.\" but not clear about other - should we convert `Should Be` to `Should -Be` and so on?",
      "created_at": "2018-02-26T14:08:40Z",
      "updated_at": "2018-02-26T14:08:40Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov I think we should be good citizens and adopt Pester's recommended syntax which is `-Be`, but I would have that as a separate PR.  I'll create two issues to track this.",
      "created_at": "2018-02-26T15:18:44Z",
      "updated_at": "2018-02-26T15:18:44Z"
    }
  ],
  "created_at": "2017-09-13T03:35:39Z",
  "number": 4825,
  "state": "closed",
  "title": "Create a Pester function ShouldBeNonTerminatingErrorId to complement ShouldBeErrorId",
  "updated_at": "2018-02-26T15:18:44Z"
}