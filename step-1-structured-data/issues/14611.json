{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14611",
  "author": "bergmeister",
  "body": "# PR Summary\r\n\r\n- Display total download size and show progress\r\n- Show current download in human readable format. Because PowerShell treats `1 KB` as 1024, it should probably use 1024 as the base for KB, MB, etc. The number of significant digits is 1 for KB, 2 for MB, 3 for GB, etc.\r\n\r\nNote that because of the `-Resume` parameter, there can be special edge cases where the number of downloaded bytes is greater than the total download size, hence why `Math.Min(x, 100)` has to be used when setting the `PercentComplete` property of the `ProgressRecord`.\r\n\r\nDemo:\r\n![progress](https://user-images.githubusercontent.com/9250262/104775655-9e605880-5770-11eb-8c71-8e4e2e1d3031.gif)\r\n\r\n\r\n## PR Context\r\n\r\nFixes #14610\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2022-09-19T18:16:21Z",
  "comments": [
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2021-01-29T02:00:06Z",
      "updated_at": "2021-01-29T02:00:06Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@PoshChan please retry macos",
      "created_at": "2021-04-24T22:25:05Z",
      "updated_at": "2021-04-24T22:25:05Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@bergmeister, did not find matching build context: `PowerShell-CI-macOS`; allowed contexts: PowerShell-CI-SSH",
      "created_at": "2021-04-24T22:25:24Z",
      "updated_at": "2021-04-24T22:25:24Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@bergmeister can you rebase and force push to force rerunning CI?\r\n\r\nEdit: Nevermind, got it restarted.",
      "created_at": "2021-06-26T22:12:08Z",
      "updated_at": "2021-06-26T22:16:00Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov this is ready to be merged",
      "created_at": "2021-06-27T00:34:45Z",
      "updated_at": "2021-06-27T00:34:45Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@bergmeister sorry this took so long, I had this tab opened and was lost in a sea of tabs which I'm slowly going through...",
      "created_at": "2021-06-27T00:41:02Z",
      "updated_at": "2021-06-27T00:41:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT My comment https://github.com/PowerShell/PowerShell/pull/14611#discussion_r588886011 is not addressed. ",
      "created_at": "2021-06-27T15:03:59Z",
      "updated_at": "2021-06-27T15:03:59Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2021-07-05T02:00:46Z",
      "updated_at": "2021-07-05T02:00:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> So looking at this and reading over @iSazonov's performance concerns:\r\n\r\nI could bet with your feedbacks if you want. :-)\r\n\r\nBut my main request is https://github.com/PowerShell/PowerShell/pull/14611#discussion_r588886011",
      "created_at": "2021-08-26T05:21:18Z",
      "updated_at": "2021-08-26T05:21:18Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> But my main request is #14611 (comment)\r\n\r\nHonestly I think converting it all to MB defeats the purpose of human readability here. Personally I find anything with more than three digits is hard to follow, especially if it's being updated constantly.\r\n\r\nAnd once we're printing MB, we're formatting strings anyway -- the switch is going to be pretty cheap in comparison.\r\n\r\n> I could bet with your feedbacks if you want. :-)\r\n\r\nI mean we're ultimately having a perf discussion; some measurements would be useful (would welcome any from @bergmeister as well). This is ultimately an interactive/UI change, so I think one thing to keep in mind is that we can freely revert it or otherwise change it if we find performance issues.",
      "created_at": "2021-08-26T17:39:13Z",
      "updated_at": "2021-08-26T17:39:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Honestly I think converting it all to MB defeats the purpose of human readability here. Personally I find anything with more than three digits is hard to follow, especially if it's being updated constantly.\r\n\r\nIt seems you do formal answer without analyzing. We read the stream in chunks of 10 Kbytes. Why do we need formatting code for bytes?! \r\nThen also consider the normal speed for modern channels and the size of common files... Or do you really download 1EB size files everyday? :-) And so on ...\r\n\r\n> I mean we're ultimately having a perf discussion; some measurements would be useful (would welcome any from @bergmeister as well). This is ultimately an interactive/UI change, so I think one thing to keep in mind is that we can freely revert it or otherwise change it if we find performance issues.\r\n\r\n1. We already have an experience about progress bar slow down extremely the cmdlet. My fix was a minor workaround. Ideally we should re-design and re-implement the code based on the experience. At the very least, we should not ignore this experience and repeat past mistakes.\r\n2. I don't understand why do we use old school patterns if we can freely benefit from modern C# and Runtime features. (They may be unfamiliar but quite readable.)\r\n3. For me, PowerShell is a base platform for other applications. We cannot know what is critical for these applications. So any code should not consume more resources than necessary - we have no right to waste other people's money.\r\n4. The classic requirement for an interactive scenario is that the time the user receives a response should not exceed 5 seconds, otherwise it is no longer an interactive scenario. So progress bar is a helper to transform non-interactive scenario to interactive one.  The purpose of the progress bar is to give the user answers to two questions at least once every 5 seconds - (1) does the process continue well?, (2) how much longer do we have to wait?\r\nIf we follow these simple requirements, we do not need to make additional efforts to revert PR. :-)",
      "created_at": "2021-08-26T18:59:37Z",
      "updated_at": "2021-08-26T18:59:37Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov What was your original perf fix for write-progress?  The original code here looks like it would write progress records on every chunk read.  So wasn't this a perf issue before this PR?  Or was your perf fix in `Write-Progress`?  If that is the case, then to prevent unnecessary heap allocs in code **calling** Write-Progress, we need an API something like `bool ShouldWriteProgress()`.  Then you'd only compute the percent displayed strings if the progress was actually going to be written.  But ... I'm way out on a branch here since I don't really know how the perf of write-progress was originally addressed.",
      "created_at": "2021-08-26T19:20:04Z",
      "updated_at": "2021-08-26T19:20:04Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "I'm kicking this PR to the cmdlet WG, since it seems there's some ongoing controversy",
      "created_at": "2021-08-26T22:59:37Z",
      "updated_at": "2021-08-26T22:59:37Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks @rjmholt .\r\n\r\nThe original fix of the slowness of `Invoke-Webrequest` was to refresh progress pane only every 200ms in PR #2822 as this was naturally a very expensive operation. However, here we are discussing the performance impact of something much less expensive. Originally I did some maths (logarithm, etc.) to figure out whether it's KB vs MB and was willing to change it to this hard-coded switch statement, which should be super fast now since the compiler can build jump tables. Yet, this does not seem to be enough and we are discussing whether to use a static formatting string or different one depending on size and whether to cater for one order of magnitude more or less. I already did a small perf test with the original implementation and could not find an easily measurable difference in my comment https://github.com/PowerShell/PowerShell/pull/14611#discussion_r558571942, therefore only a micro-benchmark would be able to tell the difference, which would imply that we are talking about micro-optimization in an area that is used by a cmdlet and not something generic and highly re-used in the engine.\r\n\r\nWhat I am looking for from the PowerShell team or committee is an agreement on the actions that are needed for merging this PR because I and others seem to disagree on some points so want to avoid making changes that are not actually wanted or needed or changing back and forth.",
      "created_at": "2021-08-26T23:24:50Z",
      "updated_at": "2021-08-26T23:24:50Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "@bergmeister Thanks for PR link! I see the perf fix was way down in the `PSHostUserInterface` impl.\r\n\r\n>  some measurements would be useful\r\n\r\nAgreed. Moving a large (multi GB) file over a fast (1/10 GBs) network seems like it would be a good stress test.",
      "created_at": "2021-08-27T00:06:14Z",
      "updated_at": "2021-08-27T00:06:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Moving a large (multi GB) file over a fast (1/10 GBs) network seems like it would be a good stress test.\r\n\r\nAs joke, we need old 50 bod modem to test bytes branch and 1000 Gbs network to test PBs branch, and so on. :-)\r\n\r\n> I'm kicking this PR to the cmdlet WG, since it seems there's some ongoing controversy\r\n\r\nAs I said, my main request is to remove **dead** code.",
      "created_at": "2021-08-27T06:17:27Z",
      "updated_at": "2021-08-27T06:17:27Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2021-09-03T14:00:37Z",
      "updated_at": "2021-09-03T14:00:37Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "So I've done a simple perf test on a standard 4 core Azure VM and download a 1GB test file, with networking speeds of around 1 GB/s and most of the time is actually spent in some after-processing after the download progress bar has finished). Due to high networking fluctuations, results did vary quite a bit but I could not notice a difference. I ran the below command\r\n```pwsh\r\n(1..10 | foreach { measure-command { $null = Invoke-WebRequest 'https://speed.hetzner.de/1GB.bin'}; [gc]::Collect(); sleep 2 }).Milliseconds | measure -AllStats\r\n```\r\nResults were for current master:\r\n```\r\nCount             : 10\r\nAverage           : 472.4\r\nSum               : 4724\r\nMaximum           : 817\r\nMinimum           : 233\r\nStandardDeviation : 194.58628477419\r\nProperty          :\r\n```\r\nResult for my branch (rebased to latest master):\r\n```\r\nCount             : 10\r\nAverage           : 412.8\r\nSum               : 4128\r\nMaximum           : 872\r\nMinimum           : 189\r\nStandardDeviation : 208.655377756402\r\nProperty          :\r\n```\r\n\r\nTherefore to me that is proof anything that any other micro-optimization would not be noticeable, running a micro-benchmark of this is out of scope for me.\r\n\r\nThe last concern was around so called dead code for the KB and EB entries in the switch statement. First of all, originally, this piece of code was a private function just for this cmdlet but I was asked to move it to the SMA project (which I didn't agree with at the time anyway as it will make it harder to create a lightweight version of PowerShell with fewer out of the box modules...) and therefore I had to make it internal, meaning any other consumers could use this utility function and could trip over by a missing range functionality. As the compiler builds jump tables for such switch statements anyway, I think the performance impact of having additional entries is negligible and performance is something that should be analyzed for rather being prematurely optimized, I also think we are comparing apples with pears as the previous reason for the slowness of `Invoke-Webrequest` was a very expensive operation, which was the refresh of the progress pane/",
      "created_at": "2021-09-21T21:25:58Z",
      "updated_at": "2021-09-21T21:25:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I also think we are comparing apples with pears\r\n\r\nIf you want to be convincing, just provide screenshots of actual scenarios where you are loading petabytes per second or at least bytes per second. That's much more useful than wasting time measuring dead code.",
      "created_at": "2021-09-22T04:59:14Z",
      "updated_at": "2021-09-22T04:59:14Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2021-09-29T14:00:40Z",
      "updated_at": "2021-09-29T14:00:40Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "This is much more an Interactive UX decision than core cmdlets and personally whilst I can see where @iSazonov is coming from re the `\"dead code\"` we cannot be sure that PowerShell is not already being used with that amount of data via web requests, plus we also have a need to ensure that we also future proof PowerShell as we go, as not to need an additional PR to implement them in future.\r\n\r\nTherefore I'd happily approve this PR on behalf of the Interactive UX Working Group.\r\n\r\nI would however ask to see the differences in end package size to this PR and one based on the comments that @iSazonov is concerned about because honestly I can't see it making enough of a difference to not allow this PR through as it is",
      "created_at": "2022-09-01T06:44:56Z",
      "updated_at": "2022-09-01T06:52:37Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@bergmeister I know it's been a long time, and you may have lost the interest in updating this PR. But, if not, could you please address https://github.com/PowerShell/PowerShell/pull/14611#discussion_r696894517? Or, I can help updating the PR.",
      "created_at": "2022-09-13T00:48:37Z",
      "updated_at": "2022-09-13T00:48:37Z"
    },
    {
      "author": "pull-request-quantifier[bot]",
      "author_association": "NONE",
      "body": "### ![](https://img.shields.io/static/v1?label=Quantified&message=Small&color=green)\r\n\r\nThis PR has `81` quantified lines of changes. In general, a change size of upto `200` lines is ideal for the best PR experience!\r\n\r\n------\r\n\r\n<details >\r\n    <summary display=\"inline\"> <strong>Quantification details</strong></summary>\r\n    <p />\r\n\r\n```\r\nLabel      : Small\r\nSize       : +60 -21\r\nPercentile : 32.4%\r\n\r\nTotal files changed: 7\r\n\r\nChange summary by file extension:\r\n.cs : +56 -17\r\n.resx : +4 -4\r\n```\r\n> Change counts above are quantified counts, based on the [PullRequestQuantifier customizations](https://github.com/microsoft/PullRequestQuantifier/blob/main/docs/prquantifier-yaml.md).\r\n    \r\n</details>\r\n\r\n\r\n<details>\r\n    <summary display=\"inline\"> <strong>Why proper sizing of changes matters</strong> </summary>\r\n    <p/>\r\n    <p/>\r\n\r\nOptimal pull request sizes drive a better predictable PR flow as they strike a\r\nbalance between between PR complexity and PR review overhead. PRs within the\r\noptimal size (typical small, or medium sized PRs) mean:\r\n\r\n- Fast and predictable releases to production:\r\n  - Optimal size changes are more likely to be reviewed faster with fewer\r\niterations.\r\n  - Similarity in low PR complexity drives similar review times.\r\n- Review quality is likely higher as complexity is lower:\r\n  - Bugs are more likely to be detected.\r\n  - Code inconsistencies are more likely to be detected.\r\n- Knowledge sharing is improved within the participants:\r\n  - Small portions can be assimilated better.\r\n- Better engineering practices are exercised:\r\n  - Solving big problems by dividing them in well contained, smaller problems.\r\n  - Exercising separation of concerns within the code changes.\r\n\r\n#### What can I do to optimize my changes\r\n\r\n- Use the PullRequestQuantifier to quantify your PR accurately\r\n  - Create a context profile for your repo using the [context generator](https://github.com/microsoft/PullRequestQuantifier/releases)\r\n  - Exclude files that are not necessary to be reviewed or do not increase the review complexity. Example: Autogenerated code, docs, project IDE setting files, binaries, etc. Check out the `Excluded` section from your `prquantifier.yaml` context profile. \r\n  - Understand your typical change complexity, drive towards the desired complexity by adjusting the label mapping in your `prquantifier.yaml` context profile.\r\n  - Only use the labels that matter to you, [see context specification](./docs/prquantifier-yaml.md) to customize your `prquantifier.yaml` context profile.\r\n- Change your engineering behaviors\r\n  - For PRs that fall outside of the desired spectrum, review the details and check if:\r\n    - Your PR could be split in smaller, self-contained PRs instead\r\n    - Your PR only solves one particular issue. (For example, don't refactor and code new features in the same PR).\r\n\r\n#### How to interpret the change counts in git diff output\r\n\r\n- One line was added: `+1 -0`\r\n- One line was deleted: `+0 -1`\r\n- One line was modified: `+1 -1` (git diff doesn't know about modified, it will\r\ninterpret that line like one addition plus one deletion)\r\n- Change percentiles: Change characteristics (addition, deletion, modification)\r\nof this PR in relation to all other PRs within the repository.\r\n\r\n</details>\r\n\r\n<p />\r\n\r\n------\r\n\r\nWas this comment helpful? <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiYmVyZ21laXN0ZXIiLCJSZXBvc2l0b3J5TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwiLCJQdWxsUmVxdWVzdExpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsL3B1bGwvMTQ2MTEiLCJFdmVudFR5cGUiOiJUaHVtYnNVcCJ9&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs up\"><strong>:thumbsup:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiYmVyZ21laXN0ZXIiLCJSZXBvc2l0b3J5TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwiLCJQdWxsUmVxdWVzdExpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsL3B1bGwvMTQ2MTEiLCJFdmVudFR5cGUiOiJOZXV0cmFsIn0=&amp;anonymous=True\" target=\"_blank\" title=\"Neutral\"><strong>&nbsp;:ok_hand:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiYmVyZ21laXN0ZXIiLCJSZXBvc2l0b3J5TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwiLCJQdWxsUmVxdWVzdExpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsL3B1bGwvMTQ2MTEiLCJFdmVudFR5cGUiOiJUaHVtYnNEb3duIn0=&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs down\"><strong>&nbsp;:thumbsdown:</strong></a> (<a href=\"MAILTO:prquantifier@microsoft.com\" title=\"Mail to prquantifier@microsoft.com\">Email</a>)\r\n[Customize PullRequestQuantifier](https://github.com/PowerShell/PowerShell/blob/master/.github/prquantifier.yaml) for this repository.\r\n\r\n",
      "created_at": "2022-09-13T09:08:42Z",
      "updated_at": "2022-09-13T09:08:42Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "> @bergmeister I know it's been a long time, and you may have lost the interest in updating this PR. But, if not, could you please address [#14611 (comment)](https://github.com/PowerShell/PowerShell/pull/14611#discussion_r696894517)? Or, I can help updating the PR.\r\n\r\nDefinitely still interested, I just addressed that comment from Keith that you wanted me to do https://github.com/PowerShell/PowerShell/pull/14611/commits/e8532db8a1f880928e517c968a856784fbb0a7e4",
      "created_at": "2022-09-13T09:10:43Z",
      "updated_at": "2022-09-13T09:10:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Have you already looked at the animation in the description of this PR or have you done an actual experiment? Do you see how the bar flickers? How the scale changes? After that, do you really think it's great UX? This is a nightmare.",
      "created_at": "2022-09-14T03:02:11Z",
      "updated_at": "2022-09-14T03:02:11Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov I built and played with the changes in this PR, and it looks pretty nice to me. As for the blinking cursor bar, that's out of the scope of this PR, but something powershell can handle, for example, make the cursor invisible when rendering the progress bar.\r\n\r\n> How the scale changes? After that, do you really think it's great UX? This is a nightmare.\r\n\r\nI'm not sure what you mean by \"_scale changes_\", but the new UX is much better than the old UX in my opinion.\r\n\r\n### Old `Classic` and `Minimal` View\r\n![old-classic](https://user-images.githubusercontent.com/127450/190533979-b48d9a7f-6ef4-4629-b887-e2caccc051eb.gif)\r\n![old-minimal](https://user-images.githubusercontent.com/127450/190533987-135471bd-45d5-4f86-8615-5c219a0dce63.gif)\r\n\r\n### New `Classic` and `Minimal` View\r\n\r\n![new-classic](https://user-images.githubusercontent.com/127450/190534045-eb20c48c-7a87-4c27-89ef-c7d7aec7c0e4.gif)\r\n![new-minimal](https://user-images.githubusercontent.com/127450/190534054-30358fc4-fab9-4f7c-9cd0-56e4c4fe608c.gif)\r\n",
      "created_at": "2022-09-16T01:02:39Z",
      "updated_at": "2022-09-16T01:02:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Could you please also share screenshots for bytes, TB and PB too? I would really like to see how this code works.\r\n\r\nIf it can't be done, why this dead code? MB is the only thing we need.",
      "created_at": "2022-09-16T03:36:48Z",
      "updated_at": "2022-09-16T03:38:56Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I agree it should be super rare to download a package with the TB or PB size, but I'm fine keeping those switch branches in `DisplayHumanReadableFileSize` for completeness, because:\r\n1. Those switch branches are very simple, and thus won't cause any problem to maintenance.\r\n2. You can never say for 100% that no one will download a package with such large size. Maybe someone is using a [Terabit Ethernet](https://en.wikipedia.org/wiki/Terabit_Ethernet), and then downloading a TB/PB size package may not be that impossible :)",
      "created_at": "2022-09-16T05:28:25Z",
      "updated_at": "2022-09-16T05:29:18Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "> @daxian-dbw Could you please also share screenshots for bytes, TB and PB too? I would really like to see how this code works.\r\n> \r\n> If it can't be done, why this dead code? MB is the only thing we need.\r\n\r\n@iSazonov, I'm not sure that this comment is useful, especially considering that we aren't just trying to get rid of \"dead code\" but trying to have code that is useful now and in the future too",
      "created_at": "2022-09-16T17:08:23Z",
      "updated_at": "2022-09-16T17:08:54Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov Given the discussion above, I will merge this PR as is.",
      "created_at": "2022-09-19T18:14:27Z",
      "updated_at": "2022-09-19T18:14:27Z"
    }
  ],
  "created_at": "2021-01-14T19:32:06Z",
  "number": 14611,
  "state": "closed",
  "title": "Invoke-WebRequest: Display downloaded bytes in human readable format and display total expected download size",
  "updated_at": "2022-09-19T18:16:22Z"
}