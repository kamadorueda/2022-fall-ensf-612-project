{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2327",
  "author": "iSazonov",
  "body": "<!--\n\nIf it is a bug report:\n- make sure you are able to repro it on the latest released version. \nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\n- Search the existing issues.\n- Refer to the [FAQ](../docs/FAQ.md).\n- Refer to the [known issues](../docs/KNOWNISSUES.md).\n- Fill out the following repro template\n\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\n-->\n\nThis is UserVoice issue - https://windowsserver.uservoice.com/forums/301869-powershell/suggestions/15969436-get-winevent-filterhashtable-query-is-wrong\n## Steps to reproduce\n\nBelow test for PrintService log but you can test for any event log.\nReplace printer names and server name with actual in your environment.\n`# Test 1a`\n`# Result: Get-WinEvent : No events were found that match the specified selection criteria.`\n`$ef = @{Logname=\"Microsoft-Windows-PrintService/Operational\";Param5=\"PS-PRN1\"}`\n`$a=Get-WinEvent -MaxEvents 25 -FilterHashtable $ef -Debug -ComputerName ps1`\n\n`# Test 1b`\n`# Query from Test 1a`\n`# Result: Get-WinEvent : The specified query is invalid`\n`$ed=@\"`\n`<QueryList>`\n`<Query Id=\"0\" Path=\"microsoft-windows-printservice/operational\">`\n`<Select Path=\"microsoft-windows-printservice/operational\">`\n`*[([EventData[Data[@Name='Param5']='PS-PRN1']] or [UserData/*/Param5='PS-PRN1'])]`\n`</Select>`\n`</Query>`\n`</QueryList>`\n`\"@`\n`$a=Get-WinEvent -MaxEvents 25 -FilterXml $ed -Debug -ComputerName ps1`\n\n`# Test 2a`\n`# Result: Get-WinEvent : No events were found that match the specified selection criteria.`\n`$ef = @{Logname=\"Microsoft-Windows-PrintService/Operational\";Param5=@(\"PS-PRN1\",\"PS-PRN2\")}`\n`$a=Get-WinEvent -MaxEvents 25 -FilterHashtable $ef -Debug -ComputerName ps1`\n\n`# Test 2b`\n`# Query from Test 2a`\n`# Result: Get-WinEvent : The specified query is invalid`\n`$ed=@\"`\n`<QueryList>`\n`<Query Id=\"0\" Path=\"microsoft-windows-printservice/operational\">`\n`<Select Path=\"microsoft-windows-printservice/operational\">`\n`*[([EventData[Data[@Name='Param5']='System.Object[]']] or [UserData/*/Param5='System.Object[]'])]`\n`</Select>`\n`</Query>`\n`</QueryList>`\n`\"@`\n`$a=Get-WinEvent -MaxEvents 25 -FilterXml $ed -Debug -ComputerName ps1`\n## Expected behavior\n\nGet-WinEvent return event or list of events (which really is in the log).\n## Actual behavior\n1. Get-WinEvent return for 1a and 2a tests (FilterHashtable):\n   Get-WinEvent : No events were found that match the specified selection criteria.\n2.  Get-WinEvent return for 1b and 2b tests (FilterXml):\n   Result: Get-WinEvent : The specified query is invalid\n3. If copy-paste generated filter (query) into Eventvwr.msc then Eventvwr.msc show \"The specified query is invalid\"\n\n[Help Get-WinEvent ](https://technet.microsoft.com/library/5fe94870-ed6b-4ce2-9500-93846cc65c95%28v=wps.630%29.aspx) say that the parameter's format is `*=<String[]>` but the cmdlet don't process string array in this place absolutely.\n## Environment data\n\n<!-- provide the output of $PSVersionTable -->\n\n``` powershell\n> $PSVersionTable\nPS C:\\Windows\\system32> $PSVersionTable\n\nName                           Value\n----                           -----\nPSVersion                      5.0.10240.16384\nWSManStackVersion              3.0\nSerializationVersion           1.1.0.1\nCLRVersion                     4.0.30319.42000\nBuildVersion                   10.0.10240.16384\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\nPSRemotingProtocolVersion      2.3\n\nPS C:\\> $PSVersionTable\n\nName                           Value\n----                           -----\nPSVersion                      5.1.14915.1000\nPSEdition                      Desktop\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\nBuildVersion                   10.0.14915.1000\nCLRVersion                     4.0.30319.42000\nWSManStackVersion              3.0\nPSRemotingProtocolVersion      2.3\nSerializationVersion           1.1.0.1\n```\n",
  "closed_at": "2016-10-07T18:48:09Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I am ready to make the fix. Assign me @powershell/powershell @PowerShellTeam \n",
      "created_at": "2016-09-28T06:18:23Z",
      "updated_at": "2016-09-28T06:18:23Z"
    },
    {
      "author": "brianreitz",
      "author_association": "NONE",
      "body": "This issue seems to be back. `Get-WinEvent -FilterHashTable` does not appear to support named event data fields despite the pull request.\r\n\r\n# Steps to reproduce #\r\nBased on the description of this parameter, let's create some data that we want to match. I am using the \"Microsoft-Windows-Windows Defender\" log, and will create a log entry for a 'malicious' threat. Here, we use a known signatured string of \"amsiutils\", which Windows Defender will flag and block.\r\n```\r\nPS C:\\Users\\brian> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.18362.145\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.18362.145\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n\r\nPS C:\\Users\\brian> 'amsiutils'                                                                                                                                                   At line:1 char:1\r\n+ 'amsiutils'\r\n+ ~~~~~~~~~~~\r\nThis script contains malicious content and has been blocked by your antivirus software.\r\n+ FullyQualifiedErrorId : ScriptContainedMaliciousContent\r\n```\r\n\r\nAfterwards, an event will be created similar to the following:\r\n```\r\n<Event xmlns=\"http://schemas.microsoft.com/win/2004/08/events/event\">\r\n  <System>\r\n    <Provider Name=\"Microsoft-Windows-Windows Defender\" Guid=\"{11cd958a-c507-4ef3-b3f2-5fd9dfbd2c78}\" />\r\n    <EventID>1116</EventID>\r\n    <Version>0</Version>\r\n    <Level>3</Level>\r\n    <Task>0</Task>\r\n    <Opcode>0</Opcode>\r\n    <Keywords>0x8000000000000000</Keywords>\r\n    <TimeCreated SystemTime=\"2019-07-12T19:26:20.618937800Z\" />\r\n    <EventRecordID>972</EventRecordID>\r\n    <Correlation ActivityID=\"{72c595a8-b626-48e6-aa39-eae5f5598ed9}\" />\r\n    <Execution ProcessID=\"8168\" ThreadID=\"8772\" />\r\n    <Channel>Microsoft-Windows-Windows Defender/Operational</Channel>\r\n    <Computer>flexo</Computer>\r\n    <Security UserID=\"S-1-5-18\" />\r\n  </System>\r\n  <EventData>\r\n    <Data Name=\"Product Name\">%%827</Data>\r\n    <Data Name=\"Product Version\">4.18.1906.3</Data>\r\n    <Data Name=\"Detection ID\">{0A9F34E6-A5C4-493A-953A-98724D5169EF}</Data>\r\n    <Data Name=\"Detection Time\">2019-07-12T19:26:20.604Z</Data>\r\n    <Data Name=\"Unused\"></Data>\r\n    <Data Name=\"Unused2\"></Data>\r\n    <Data Name=\"Threat ID\">2147728399</Data>\r\n    <Data Name=\"Threat Name\">Trojan:Win32/AmsiTamper.A!ams</Data>\r\n    <Data Name=\"Severity ID\">5</Data>\r\n    <Data Name=\"Severity Name\">Severe</Data>\r\n    <Data Name=\"Category ID\">8</Data>\r\n    <Data Name=\"Category Name\">Trojan</Data>\r\n    <Data Name=\"FWLink\">https://go.microsoft.com/fwlink/?linkid=37020&amp;name=Trojan:Win32/AmsiTamper.A!ams&amp;threatid=2147728399&amp;enterprise=0</Data>\r\n    <Data Name=\"Status Code\">1</Data>\r\n    <Data Name=\"Status Description\"></Data>\r\n    <Data Name=\"State\">1</Data>\r\n    <Data Name=\"Source ID\">10</Data>\r\n    <Data Name=\"Source Name\">%%897</Data>\r\n    <Data Name=\"Process Name\">C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</Data>\r\n    <Data Name=\"Detection User\">FLEXO\\brian</Data>\r\n    <Data Name=\"Unused3\"></Data>\r\n    <Data Name=\"Path\">amsi:_C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</Data>\r\n    <Data Name=\"Origin ID\">0</Data>\r\n    <Data Name=\"Origin Name\">%%844</Data>\r\n    <Data Name=\"Execution ID\">1</Data>\r\n    <Data Name=\"Execution Name\">%%813</Data>\r\n    <Data Name=\"Type ID\">0</Data>\r\n    <Data Name=\"Type Name\">%%822</Data>\r\n    <Data Name=\"Pre Execution Status\">0</Data>\r\n    <Data Name=\"Action ID\">9</Data>\r\n    <Data Name=\"Action Name\">%%887</Data>\r\n    <Data Name=\"Unused4\"></Data>\r\n    <Data Name=\"Error Code\">0x00000000</Data>\r\n    <Data Name=\"Error Description\">The operation completed successfully. </Data>\r\n    <Data Name=\"Unused5\"></Data>\r\n    <Data Name=\"Post Clean Status\">0</Data>\r\n    <Data Name=\"Additional Actions ID\">0</Data>\r\n    <Data Name=\"Additional Actions String\">No additional actions required</Data>\r\n    <Data Name=\"Remediation User\"></Data>\r\n    <Data Name=\"Unused6\"></Data>\r\n    <Data Name=\"Security intelligence Version\">AV: 1.297.951.0, AS: 1.297.951.0, NIS: 1.297.951.0</Data>\r\n    <Data Name=\"Engine Version\">AM: 1.1.16100.4, NIS: 1.1.16100.4</Data>\r\n  </EventData>\r\n</Event>\r\n```\r\n\r\nIf we look at the XML for this event, we can see several named data fields, such as \"Threat Name\", \"Severity ID\", \"Severity Name\", \"Detection User\", etc.\r\nAccording to about_Hash_Tables, strings are a valid key type, so we should be able to use spaces in a key name to query these fields:\r\n```\r\nPS C:\\Users\\brian> Get-WinEvent -MaxEvents 5 -FilterHashtable @{ LogName=\"Microsoft-Windows-Windows Defender/Operational\"; Id=1116; \"Severity Name\"=\"Severe\" }\r\nGet-WinEvent : No events were found that match the specified selection criteria.\r\nAt line:1 char:1\r\n+ Get-WinEvent -MaxEvents 5 -FilterHashtable @{ LogName=\"Microsoft-Wind ... \r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : ObjectNotFound: (:) [Get-WinEvent], Exception\r\n+ FullyQualifiedErrorId : NoMatchingEventsFound,Microsoft.PowerShell.Commands.GetWinEventCommand\r\n```\r\n\r\nIf we pick a named data field that is only one word (besides Path, which is already reserved), we still get no results.\r\n```\r\nPS C:\\Users\\brian> Get-WinEvent -MaxEvents 5 -FilterHashtable @{ LogName=\"Microsoft-Windows-Windows Defender/Operational\"; Id=1116; State=1 }\r\nGet-WinEvent : No events were found that match the specified selection criteria.\r\nAt line:1 char:1\r\n+ Get-WinEvent -MaxEvents 5 -FilterHashtable @{ LogName=\"Microsoft-Wind ... \r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : ObjectNotFound: (:) [Get-WinEvent], Exception\r\n+ FullyQualifiedErrorId : NoMatchingEventsFound,Microsoft.PowerShell.Commands.GetWinEventCommand\r\n```\r\n\r\nChecking the PowerShell tests for this, these appear to load events from a file rather than the live log. I'm not sure how this could affect things, but just in case, I export the event to a file and try again:\r\n\r\n```\r\nPS C:\\Users\\brian> Get-WinEvent -MaxEvents 5 -FilterHashtable @{ Path='C:\\Users\\brian\\Documents\\defender_test.evtx'; Id=1116; \"Severity ID\"=1 }\r\nGet-WinEvent : No events were found that match the specified selection criteria.\r\nAt line:1 char:1\r\n+ Get-WinEvent -MaxEvents 5 -FilterHashtable @{ Path='C:\\Users\\brian\\Do ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : ObjectNotFound: (:) [Get-WinEvent], Exception\r\n+ FullyQualifiedErrorId : NoMatchingEventsFound,Microsoft.PowerShell.Commands.GetWinEventCommand\r\n```\r\n\r\nUsing the `Data` key to search for the value we want across all fields works. However, you can't have multiple Data keys if you want to specify multiple named fields to filter against (e.g. all events where \"Detected User\" is \"flexo\\brian\" and \"Severity Name\"=\"Severe\").\r\n```\r\nPS C:\\Users\\brian> Get-WinEvent -MaxEvents 5 -FilterHashtable @{ LogName=\"Microsoft-Windows-Windows Defender/Operational\"; Id=1116; Data=\"flexo\\brian\" }\r\n\r\n    ProviderName: Microsoft-Windows-Windows Defender\r\n\r\nTimeCreated                     Id LevelDisplayName Message\r\n-----------                     -- ---------------- -------\r\n7/12/2019 3:26:20 PM          1116 Warning          Windows Defender Antivirus has detected malware or other potentially unwanted software.... \r\n```\r\n\r\nYou can use `FilterXPath` instead of `FilterHashTable` and it works just fine, with multiple named fields that can be searched. Writing XPath queries are far more error-prone and less human-readable than hashtables.\r\n```\r\nPS C:\\Users\\brian> Get-WinEvent -MaxEvents 5 -LogName \"Microsoft-Windows-Windows Defender/Operational\" -FilterXPath \"*[System[EventID=1116] and EventData[Data[@Name='Detection User']='flexo\\brian' and Data[@Name='Severity Name']='Severe']]\"\r\n\r\n   ProviderName: Microsoft-Windows-Windows Defender\r\n\r\nTimeCreated                     Id LevelDisplayName Message\r\n-----------                     -- ---------------- -------\r\n7/12/2019 3:26:20 PM          1116 Warning          Windows Defender Antivirus has detected malware or other potentially unwanted software....\r\n```\r\n\r\n# Expected Behavior #\r\nGet-WinEvent should return the matching events from the event log.\r\n\r\n# Actual Behavior #\r\nGet-WinEvent : No events were found that match the specified selection criteria.",
      "created_at": "2019-07-15T17:47:33Z",
      "updated_at": "2019-07-15T17:47:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@brianreitz You report is for 5.1.18362.145 Windows PowerShell - current repository is for PowerShell Core (you can check that this works on it). Please use UserVoice or Windows 10 Feedback tool to report the issue for Windows PowerShell.",
      "created_at": "2019-07-16T05:43:42Z",
      "updated_at": "2019-07-16T05:43:42Z"
    }
  ],
  "created_at": "2016-09-21T07:59:55Z",
  "number": 2327,
  "state": "closed",
  "title": "Get-WinEvent with FilterHashtable generate broken query (filter)",
  "updated_at": "2019-07-16T05:43:43Z"
}