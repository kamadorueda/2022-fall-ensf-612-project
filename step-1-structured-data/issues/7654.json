{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7654",
  "author": "deadlydog",
  "body": "Problem Description\r\n------------------\r\nIf you are using the `using module` statement, it will load the module without any issues. However, if you make a change to the module and run the `using module` statement again without restarting your PowerShell session, it will not load the new modified module into memory, and instead will continue to use the old existing module that was loaded. This makes doing development with `using module` statements very tedious as you must continually reload your PowerShell session whenever you make changes to the module.\r\n\r\nIdeally we would just use `Import-Module -Name [module name] -Force` to avoid this issue, but that does not work for importing `class`es, so the `using module` statement **must** be used.\r\n\r\n**Update:** This problem also exists in Windows PowerShell (not Core). Go [here to upvote](https://windowsserver.uservoice.com/forums/301869-powershell/suggestions/35237182--using-module-statement-does-not-reload-module-af) that it gets fixed there too.\r\n\r\nSteps to reproduce\r\n------------------\r\nCreate the following module and script files:\r\n\r\nIn `TestModule.psm1`:\r\n```powershell\r\nclass TestClass \r\n{\r\n\t[string] $ClassPropertyText = \"Initial text\"\r\n}\r\n\r\nfunction Get-ModuleFunctionText()\r\n{\r\n\treturn \"Initial text\"\r\n}\r\n\r\nExport-ModuleMember -Function Get-ModuleFunctionText\r\n```\r\n\r\nIn `Test.ps1`:\r\n```powershell\r\nusing module '.\\TestModule.psm1'\r\n\r\n$instance = [TestClass]::new()\r\n$instance.ClassPropertyText\r\n\r\nGet-ModuleFunctionText\r\n```\r\n\r\nRun `Test.ps1` and it will output:\r\n```\r\nInitial text\r\nInitial text\r\n```\r\n\r\nThen modify `TestModule.psm1` to:\r\n```powershell\r\nclass TestClass \r\n{\r\n\t[string] $ClassPropertyText = \"Updated text\"\r\n}\r\n\r\nfunction Get-ModuleFunctionText()\r\n{\r\n\treturn \"Updated text\"\r\n}\r\n\r\nExport-ModuleMember -Function Get-ModuleFunctionText\r\n```\r\n\r\nRun `Test.ps1` again and it will still output:\r\n```\r\nInitial text\r\nInitial text\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nWhen running `Test.ps1` the 2nd time, it should output:\r\n```none\r\nUpdated text\r\nUpdated text\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.17134.228\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.17134.228\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n\r\nAdditional Info\r\n----------------\r\nThe problem can be somewhat reduced by using _both_ the `using module` statement and `Import-Module -Force` statement, like this:\r\n```powershell\r\nusing module '.\\TestModule.psm1'\r\nImport-Module -Name '.\\TestModule.psm1' -Force\r\n\r\n$instance = [TestClass]::new()\r\n$instance.ClassPropertyText\r\n\r\nGet-ModuleFunctionText\r\n```\r\n\r\nThis code would result in the following output:\r\n```\r\nInitial text\r\nUpdated text\r\n```\r\n\r\nSo here the module code was updated, but the `class` code was not.\r\n\r\nProposed Solution\r\n----------------\r\nTo fix this issue I propose adding a `-Force` flag to the `using module` statement that forces the module to be reloaded into memory; the same way that the `-Force` flag works for the `Import-Module` cmdlet. This will allow developing code that uses the `class` construct to work much smoother.",
  "closed_at": null,
  "comments": [
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Please remember, this Github repository is only for PowerShell Core and not Windows PowerShell.  If you have a Window PowerShell, submit the issue at the Uservoice forum: https://windowsserver.uservoice.com/forums/301869-powershell\r\n\r\nAs stated in the PowerShell Core landing page in the section \"Windows PowerShell vs PowerShell Core\": https://github.com/PowerShell/PowerShell#windows-powershell-vs-powershell-core\r\n\r\nThis way the issue will reach the correct support team .\r\n\r\nNow, if you can use PowerShell Core to reproduce the issue you're experiencing, then provide which version of PowerShell Core: GA or RC1.\r\n\r\nAny enhancements will be done on PowerShell Core only.\r\n\r\nThanks",
      "created_at": "2018-08-29T00:36:55Z",
      "updated_at": "2018-08-29T00:36:55Z"
    },
    {
      "author": "deadlydog",
      "author_association": "NONE",
      "body": "Thanks @MaximoTrinidad I didn't realize that this repo was only for PowerShell Core. I've now submitted [this issue in the Windows PowerShell UserVoice as well here](https://windowsserver.uservoice.com/forums/301869-powershell/suggestions/35237182--using-module-statement-does-not-reload-module-af).\r\n\r\nI was able to reproduce the problem on PowerShell Core as well. Here's the version info for PowerShell Core:\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.4\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.4\r\nOS                             Microsoft Windows 10.0.17134\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
      "created_at": "2018-08-29T01:18:03Z",
      "updated_at": "2018-08-29T01:18:24Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "\r\n@deadlydog \r\n\r\nThanks a lot!!  Yes this repo is only for PowerShell Core but your contribution help identifying issues that have been carried from the Windows PowerShell product code is valuable.\r\n\r\nPlease keep submitting anything you find. \r\n\r\nGreatly Appreciated!",
      "created_at": "2018-08-29T01:22:22Z",
      "updated_at": "2018-08-29T01:22:22Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@deadlydog,\r\n\r\nBy the way!! Cool finding.  \r\n\r\nYes!! I can reproduce the issue on PowerShell Core version 6.1.0-rc1.\r\n\r\n```\r\nPS [20] > $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-rc.1\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0-rc.1\r\nOS                             Microsoft Windows 10.0.17746\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n",
      "created_at": "2018-08-29T01:45:54Z",
      "updated_at": "2018-08-29T01:45:54Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Since this is a dev-mode problem, I would suggest having a dev-mode flag for PowerShell such that modules are always reloaded when referenced. The problem with `-force` on `using` is that it's fragile. Miss one location and you can't figure out what's going on. Running in this mode is likely to be slow (or slower) but reloading is guaranteed. (Note: this is the solution that the DSC team settled on years ago.)",
      "created_at": "2018-08-29T04:14:36Z",
      "updated_at": "2018-08-29T04:14:36Z"
    },
    {
      "author": "datenschieber",
      "author_association": "NONE",
      "body": "Is it already covered in #2505?",
      "created_at": "2018-08-29T07:21:17Z",
      "updated_at": "2018-08-29T07:21:17Z"
    },
    {
      "author": "deadlydog",
      "author_association": "NONE",
      "body": "@datenschieber I saw #2505 as well, but it is a different issue.\r\n\r\nI didn't read the entire thread, but I believe #2505 is about how using `Import-Module -Force` does not also reload submodules referenced by the specified module, so they are considering adding a `-Recurse` parameter as a way to to ensure that submodules get reloaded as well.\r\n\r\nThis issue is that `using module` does not reload the specified module. It would be a good idea though when this is implemented to have it automatically reload submodules as well, or else implement both `-Force` and `-Recurse` switches from the start so that you don't end up with a new issue similar to #2505, but for `using module` instead of `Import-Module`.",
      "created_at": "2018-08-29T14:00:21Z",
      "updated_at": "2018-08-29T16:08:11Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@deadlydog Having to change your code and add `-Force -Recurse` everywhere during development then removing it for production sounds unappealing. Having a universal `DevMode` flag seems more manageable. ",
      "created_at": "2018-08-30T17:59:15Z",
      "updated_at": "2018-08-30T17:59:15Z"
    },
    {
      "author": "deadlydog",
      "author_association": "NONE",
      "body": "@BrucePay I suggested `-Force` (and potentially also `-Recurse`) for consistency with `Import-Module` and many other native cmdlets.\r\n\r\nPerhaps a combination of both approaches would be best. Add in the `-Force` (and `-Recurse` if that gets added to `Import-Module`) so they can be used natively/explicitly, but also add in a dev-mode flag that would implicitly provide those parameters even if you don't provide them. The reason I mention having both is I imagine there will be other changes people would expect dev-mode to toggle on, such as providing `-Force` and `-Recurse` whenever `Import-Module` is called, and I'm sure there would be some people upset if certain things could _only_ be enabled by having the dev-mode toggle turned on; e.g. there might be a reason why people want to use `using module ... -Force` in production code without also turning on all of the other things that dev-mode might turn on.\r\n\r\nHaving a dev-mode toggle that simply sets some defaults like that would be nice, but I think the scope of that request is beyond this issue. Plus, if all of the options are available to set natively/explicitly, then we wouldn't need to rely on the PowerShell team to provide the dev-mode toggle. Anybody would be able to write their own \"dev-mode\" module that could be imported and simply hides the native cmdlets and exposes theirs instead, where there's simply delegate the work to the native cmdlets, but with additional parameters provided (e.g. the decorator pattern).\r\n\r\nFor those reasons, I would still propose simply adding `-Force` (and `-Recurse` if needed) to `using module`. Dev-mode could be it's own new feature request, since it would apply to many more cmdlets than just `using module`.",
      "created_at": "2018-08-31T03:01:09Z",
      "updated_at": "2018-08-31T03:01:09Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@deadlydog  Some context: `using module` and `Import-Module` are two very different things. The `using` statement is part of the PowerShell language, just like `if`, `while` etc. Characteristically keywords do not take parameters (with a few exceptions e.g. `switch -regex` (which was a mistake - sorry - it seemed like a good idea at the time)). `Import-Module`, on the other hand, is \"just\" a cmdlet and so, like all cmdlets, it takes parameters. Behaviorally, keywords are processed once at parse time. This is why you have to use `using` when importing a class definition that you are deriving from. Cmdlets are processed at runtime and are evaluated each time they are encountered during script execution. So you can, for example, put `Import-Module` in a loop like:\r\n```powershell\r\nforeach ($m in 'module1\", \"module2\", \"module3\") { Import-Module $m }\r\n```\r\nwhereas `using` statements have to be the first non-comment lines in a compile unit (script) and will be executed only once when the compile unit is parsed. This is important to why we don't want parameters on keywords. In PowerShell, parameters take arguments that are evaluated at runtime e.g. `Import-Module -force:$foo bar`. Keywords are processed at parse time and so can only take constant arguments (usually no arguments at all). For example `switch` takes `-regex` so you can write\r\n```powershell\r\nswitch -regex ('aaa') { a+ {'Eh!'} b+ {\"Bee!\"}}\r\n```\r\nbut you can't write\r\n```powershell\r\nswitch -regex:$foo ('aaa') { a+ {'Eh!'} b+ {\"Bee!\"}}\r\n```\r\nbecause `switch` is processed entirely at parse time.\r\n\r\nSo in summary, `using namespace` is a keyword and keywords, as a rule, don't take parameters. And even if they had parameters the behavior would be inconsistent with cmdlets. \r\n\r\nAnother point to consider is that much of the time, people don't explicitly import modules, they let the autoloader do it. How do you pass a switch to the autoloader? Dev-mode fixes that.\r\n\r\n> Having a dev-mode toggle that simply sets some defaults like that would be nice, but I think the scope of that request is beyond this issue. Plus, if all of the options are available to set natively/explicitly, then we wouldn't need to rely on the PowerShell team to provide the dev-mode toggle.\r\n\r\nSince, per the above, we are talking about making changes to the PowerShell language, either way, dev-mode or -force require changes to be made to the core engine, typically (but no longer exclusively) the domain of the PowerShell team. (Also, don't confuse _dev-mode_ with _strict-mode_. The types of behaviours defined by strict mode are definitely something you'd want to leave on in production. On the other hand, dev-mode - forcing modules to be reloaded every time - will be a significant performance hit that you would definitely _not_ want in production.)\r\n\r\nFinally, you can use `$PSDefaultParameterValues` to make module imports `-Force` by default, so sort of a dev-mode switch:\r\n```powershell\r\n$PSDefaultParameterValues.\"Import-Module:Force\" = $true\r\n```\r\n",
      "created_at": "2018-08-31T06:28:52Z",
      "updated_at": "2018-08-31T06:28:52Z"
    },
    {
      "author": "deadlydog",
      "author_association": "NONE",
      "body": "Thanks for the explanation and clarification @BrucePay \ud83d\udc4d  I hadn't considered that `using` was a language keyword while `Import-Module` was a cmdlet, and as such the two adhere to different rules/conventions. Given that and what you mentioned above, the `dev-mode` flag makes more sense than adding `-Force` parameters.\r\n\r\nSo I guess I see 3 potential ways to go here:\r\n1. Introduce a new dev-mode flag as previously described.\r\n2. Simply change the existing `using` statement to automatically reload modules; I _think_ that would be backward compatible, but if it would incur a performance hit at run-time that's probably not the way to go.\r\n3. Introduce a new language keyword (e.g. `using reloaded module` or some such thing) that removes the module before loading it.\r\n\r\nOf those options, if it's possible and doesn't introduce any backward compatibility issues or performance costs then I think 2. would be the way to go. Otherwise, the dev-mode flag may be the best \ud83d\ude42",
      "created_at": "2018-09-02T03:49:35Z",
      "updated_at": "2018-09-02T03:49:35Z"
    },
    {
      "author": "LosManos",
      "author_association": "NONE",
      "body": "Can we solve the problem by having `Import-Module` import _class_ and _enum_?\r\n\r\nTL:DR\r\n\r\nIf `using` cannot be extended to force loading of a module, then we should be able to have `Import-Module` also import _enums_ and _classes_. At the time of writing I am forced to use `using` as my psm1-file uses enums and classes but like wise forced to use `Import-Module .. -Force` since I am developing.\r\nPractically it means I have to do every development iteration run twice, the first to fail and load the new module and the second for the real run. \r\n \r\nFWIW I have a [Stackoverflow question](https://stackoverflow.com/questions/52413490/powershell-forcing-reload-for-using-module) for answers outside of this forum.",
      "created_at": "2018-09-25T06:41:28Z",
      "updated_at": "2018-09-25T06:41:28Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I would also prefer that to be the case. The fact that it doesn't import classes into the current scope makes it very difficult to, for example, discover what is valid input for cmdlets with a custom typed parameter.\n\nPerhaps one of the only ways might be `& (GMO 'module') {$host.EnterNestedPrompt()}`\n\nThe difficulty is, however that reloading classes seems to be an order of magnitude more difficult to accomplish. :/",
      "created_at": "2018-09-25T10:18:39Z",
      "updated_at": "2018-09-25T10:18:39Z"
    },
    {
      "author": "deadlydog",
      "author_association": "NONE",
      "body": "Just curious if this one is getting anymore attention or is perhaps on the roadmap to be addressed in the near future? I'm not terribly picky about which implementation gets chosen, just that the developer experience gets improved. As it is currently, I'm shying away from using `class`es in my PowerShell code because it makes for a bad development experience.",
      "created_at": "2018-11-09T07:47:04Z",
      "updated_at": "2018-11-09T07:47:04Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@deadlydog I think most of us works around the issue by launching a new process each time we debug. VS Code makes this not horrible. \r\n\r\nNote that I agree that this should be fixed!",
      "created_at": "2018-11-12T10:37:41Z",
      "updated_at": "2018-11-12T10:37:41Z"
    },
    {
      "author": "deadlydog",
      "author_association": "NONE",
      "body": "Hey @powercode I do use VS Code for my PowerShell development. How can I go about launching a new process each time I debug? Is it modifying some setting or json file somewhere? Or do you manually reload the workspace every time before hitting F5? Thanks.",
      "created_at": "2018-11-16T08:16:22Z",
      "updated_at": "2018-11-16T08:17:32Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "No need to manually reload the workspace. Simply shut down the integrated terminal completely (with the trash bin icon to remove the terminal session) and then let the PS extension restart it.",
      "created_at": "2018-11-16T10:06:25Z",
      "updated_at": "2018-11-16T10:06:25Z"
    },
    {
      "author": "deadlydog",
      "author_association": "NONE",
      "body": "Oh, I guess that's not toooooo bad @vexx32. I was hoping for a way to have pressing F5 do that automagically. There probably is a way to do it; I'll just need to look into overriding keybindings and running custom scripts in VS Code. Thanks for the stopgap solution for now though.\r\n\r\nSide note: I wish GitHub had a way of having these \"side\" conversations easily without needing to pollute the main thread. Like how Slack has threads. Since MS owns GitHub now, maybe you guys can advocate to get that feature put in :P ",
      "created_at": "2018-11-16T16:33:00Z",
      "updated_at": "2018-11-16T16:33:18Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, there's a config setting to always run in a new session in the POwerShell extension settings I think.",
      "created_at": "2018-11-16T17:07:04Z",
      "updated_at": "2018-11-16T17:07:04Z"
    },
    {
      "author": "deadlydog",
      "author_association": "NONE",
      "body": "Yup, you're right @vexx32 . I found the `File` ->`Preferences` -> `Settings` -> `PowerShell > Debugging: Create Temporary Integrated Console` setting that's off by default. Just what I was looking for \ud83d\udc4d \r\n\r\n![image](https://user-images.githubusercontent.com/1187140/48651892-85a65d80-e9c2-11e8-95bb-d5c0bb729eac.png)\r\n\r\nSome users may not like having this on all the time, as it automatically wipes the console output from any previous runs. So they can just turn this on when working with classes, or use the manual \"trash can\" method you mentioned above; at least until this issue gets resolved :)",
      "created_at": "2018-11-16T23:14:15Z",
      "updated_at": "2018-11-16T23:14:15Z"
    },
    {
      "author": "AlfiCode",
      "author_association": "NONE",
      "body": "One year gone and we still have this issue in PS 7.0.\r\nI could also think of an export parm like -Function/-Variable just -Class\r\ne.g. in psm1 \"Export-ModuleMember -Class MyClass\" and then I should see it in ps1\r\nPleas could anyone in charge developing Powershell tell us the plans about it or practical solution.\r\nUntil now I see only workarouds which cause effort without benefit",
      "created_at": "2020-04-08T10:27:56Z",
      "updated_at": "2020-04-08T10:28:33Z"
    },
    {
      "author": "holylander",
      "author_association": "NONE",
      "body": "> \r\n> \r\n> Yup, you're right @vexx32 . I found the `File` ->`Preferences` -> `Settings` -> `PowerShell > Debugging: Create Temporary Integrated Console` setting that's off by default. Just what I was looking for \ud83d\udc4d\r\n> \r\n> ![image](https://user-images.githubusercontent.com/1187140/48651892-85a65d80-e9c2-11e8-95bb-d5c0bb729eac.png)\r\n> \r\n> Some users may not like having this on all the time, as it automatically wipes the console output from any previous runs. So they can just turn this on when working with classes, or use the manual \"trash can\" method you mentioned above; at least until this issue gets resolved :)\r\n\r\nThanks so much! this solved my issue. The `remove-module` approach never worked",
      "created_at": "2020-07-02T15:25:22Z",
      "updated_at": "2020-07-02T15:25:22Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "I just noticed this issue and want to link to a similar discussion we had some time ago: https://github.com/PowerShell/PowerShell/issues/2505#issuecomment-385066132",
      "created_at": "2021-06-29T17:51:31Z",
      "updated_at": "2021-06-29T17:51:31Z"
    },
    {
      "author": "justintoo",
      "author_association": "NONE",
      "body": "I have the same issue. This slows me down because I have to run a script (that uses `using module`) in a new shell that takes a while to load a bunch of other things first. So every time I make a change, I have to wait a minute or two before I can test the change.",
      "created_at": "2021-08-06T23:26:47Z",
      "updated_at": "2021-08-06T23:26:47Z"
    }
  ],
  "created_at": "2018-08-28T23:54:19Z",
  "labels": [
    "WG-Engine",
    "Issue-Discussion"
  ],
  "number": 7654,
  "state": "open",
  "title": "\"Using module\" statement does not reload module after changes are made",
  "updated_at": "2021-08-06T23:26:47Z"
}