{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9159",
  "author": "tetrismasters",
  "body": "# Windows PowerShell\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n",
  "closed_at": "2019-03-29T03:49:49Z",
  "comments": [
    {
      "author": "tetrismasters",
      "author_association": "NONE",
      "body": "Your documentation is a piece of garbage made for kinder-garden children/geniuses.\r\n\r\nWhen you suggest me searching System.Diagnostics.Process to get better understanding of how Get-member works - like, why?\r\n\r\nBasically to work with PS you either need to be a programmer that understands .NET or a moron that can copy and paste.\r\n\r\nI got the idea that it's object oriented - cool. Now there's no way for me to understand how those objects are built or breaking them up for my custom use unless I learn .NET. Cause there's no information on this regard except .NET documentation and some kinder-garden help for Powershell that allows you to understand how copy-paste works. What an awesome tool.",
      "created_at": "2019-03-18T13:53:47Z",
      "updated_at": "2019-03-19T09:34:55Z"
    },
    {
      "author": "DWSR",
      "author_association": "NONE",
      "body": "> # Windows PowerShell\r\n> \r\n> For Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n> Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n> \r\n> This repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\nWhat is the purpose of commenting this snippet from the Readme?\r\n\r\n> Your documentation is a piece of garbage made for kinder-garden children/geniuses.\r\n\r\nIf we could stop with the insults and get to the actual feedback, that would be great.\r\n\r\n> When you suggest me searching System.Diagnostics.Process to get better understanding of how Get-member works - like, what the actual fuck?\r\n\r\nI think you're misunderstanding the documentation. The examples on the [Get-Member](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/get-member?view=powershell-6) page show how you can use `Get-Member` on various different output types. [System.Diagnostics.Process](https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.process?view=netcore-2.2) is the output type of the `Get-Process` cmdlet.\r\n \r\n> Basically to work with PS you either need to be a programmer that understands .NET or a moron that can copy and paste.\r\n>\r\n> I got the idea that it's object oriented - cool. Now there's no way for me to understand how those objects are built or breaking them up for my custom use unless I learn .NET. Cause there's no information on this regard except .NET documentation and some kinder-garden help for Powershell that allows you to understand how copy-paste works. What an awesome tool.\r\n\r\nBeing a language and utility that's based on .NET, what were you expecting? There is a tremendous amount of help content around PowerShell of which the MSDN site is a central part. This is the same as learning Python and being expected to understand the modules provided as part of the standard distribution or at least where to get information on them. The only real difference is that the standard library for Powershell is all of .NET",
      "created_at": "2019-03-18T14:05:52Z",
      "updated_at": "2019-03-18T14:06:53Z"
    },
    {
      "author": "tetrismasters",
      "author_association": "NONE",
      "body": "The purpose is me ranting. No good reason, just needed a place to spill it\nout.\nNVM, great documentation + all and all intuitive to understand.\n\nWith all honesty - sorry for the rant, but to be quiet frank this is\nnowhere real to be better than BASH, as advertised by creators who trash\nBASH both in the book and in the video-course. In reality the core audience\nof the product are people who know how to copy-paste. And people who know\n.Net. I'm done, if you can delete it that would be great.\n\nOn Mon, 18 Mar 2019 at 16:06, Brandon McNama <notifications@github.com>\nwrote:\n\n> Windows PowerShell\n>\n> For Windows PowerShell 5.1 issues, suggestions, or feature requests please\n> use the following link instead:\n> Windows PowerShell UserVoice\n> <https://windowsserver.uservoice.com/forums/301869-powershell>\n>\n> This repository is *ONLY* for PowerShell Core 6 issues.\n>\n> What is the purpose of commenting this snippet from the Readme?\n>\n> Your documentation is a piece of garbage made for kinder-garden\n> children/geniuses.\n>\n> If we could stop with the insults and get to the actual feedback, that\n> would be great.\n>\n> When you suggest me searching System.Diagnostics.Process to get better\n> understanding of how Get-member works - like, what the actual fuck?\n>\n> I think you're misunderstanding the documentation. The examples on the\n> Get-Member\n> <https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/get-member?view=powershell-6>\n> page show how you can use Get-Member on various different output types.\n> System.Diagnostics.Process\n> <https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.process?view=netcore-2.2>\n> is the output type of the Get-Process cmdlet.\n>\n> Basically to work with PS you either need to be a programmer that\n> understands .NET or a moron that can copy and paste.\n>\n> I got the idea that it's object oriented - cool. Now there's no way for me\n> to understand how those objects are built or breaking them up for my custom\n> use unless I learn .NET. Cause there's no information on this regard except\n> .NET documentation and some kinder-garden help for Powershell that allows\n> you to understand how copy-paste works. What an awesome tool.\n>\n> This is the same Being a language and utility that's based on .NET, what\n> exactly were you expecting? There is a tremendous amount of help content\n> around PowerShell of which the MSDN site is a central part. This is the\n> same as learning Python and being expected to understand the modules\n> provided as part of the standard distribution or at least where to get\n> information on them. The only real difference is that the standard library\n> for Powershell is all of .NET\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/PowerShell/PowerShell/issues/9159#issuecomment-473923580>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AoSfIxH5sRee30YcYuyqJS7QE3kR2TFSks5vX51mgaJpZM4b50f2>\n> .\n>\n",
      "created_at": "2019-03-18T15:13:35Z",
      "updated_at": "2019-03-18T15:13:35Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@tetrismasters I can understand the frustration to some degree, but wouldn't it be much better served by pointing out where it could be made better? \ud83d\ude42 ",
      "created_at": "2019-03-18T15:27:25Z",
      "updated_at": "2019-03-18T15:27:25Z"
    },
    {
      "author": "tetrismasters",
      "author_association": "NONE",
      "body": "Well, first of all I'm new to PS and I can simply be wrong. So I beg an\napology in advance. Though to my understanding the way objects and tools\nprovided to work with those objects are presented a bit copy-pasty. At\nleast as far as \"Powershell in depth\" and help go describing them. Like -\nI'm trying to understand what I'm not understanding and I'm failing to do\nso. Basically you can give Get-Member and output of a cmdlett that will be\nparsed as objects and combined all together as methods, properties, etc but\nto parse a specific object to get-member - nah, let's not even mention this\npossibility. We only work in bulks apparently :). Like - isn't it the next\nquestion that is popping in your head when you are learning it - how do I\ntransfer a single object to \"gm\" instead of the whole group of objects\n(get-process/get-service/import/etc) which I have zero ways defining what\ngoes in (except filters I guess?) - so the information \"gm\" gives me is\ngeneralized to say it kindly :).\n\nthe core reason of the rant - Jeffrey and Don trashing BASH openly again\nand again while it's so much more convenient than Powershell. Yes, its text\nand not objects and objects are way cooler - I agree. But as long as you\ndon't shove at me the way I can separate a single object from\n\"get-service/get-process\" and pipe it to get-member - as far as I'm\nconcerned the object oriented part is useless - at best. I don't want to\nremember what sticks where (and I have a pretty good memory - it's not what\nbugs me). I want to understand and cut to the flash. As far as I saw it is\npresented to some degree, and I could be wrong generally, but again as far\nas I saw, those aren't the things that a thrown at you as a student of PS\nand those are most important things to understand, cause those are the\nbasics of the PS. Those are the building bricks. Instead of it PS is\npresented as \"something you don't need to be a programmer to use\" and it\nfeels really flat to me - cause it seems as the explanations are simplified\nto not fear \"non programmer\" folk away (and I didn't know what IP address\nis three years ago working at construction. So if this feels flat to me -\neither I'm a moron (possible) or it was simplified too much (my bet)). So\nnow I have to stop and try to understand - am I a moron, who doesn't\nunderstand the written English or those things are simply not being\nmentioned at the the needed depth both in the help and in the book written\nby authors of PS. Which is - frustrating :). Cause I don't want to move\nfurther if I missed the basics. It feels like I did but nothing it the book\nsays so - except as I've said \"kindly\" in the first place - \"for more\nunderstanding search: <system.diagnostics.process>\". And the only result\nyou get is related to .Net. So the idea of not being a programmer (have\nnothing against of being a programmer for using PS) is quite misleading :)\n\nOn Mon, 18 Mar 2019 at 17:28, vexx32 <notifications@github.com> wrote:\n\n> @tetrismasters <https://github.com/tetrismasters> I can understand the\n> frustration to some degree, but wouldn't it be much better served by\n> pointing out where it could be made better? \ud83d\ude42\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/PowerShell/PowerShell/issues/9159#issuecomment-473959481>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AoSfIybAxYjw8AUHWd0yEHstU5d55a88ks5vX7CigaJpZM4b50f2>\n> .\n>\n",
      "created_at": "2019-03-18T16:14:48Z",
      "updated_at": "2019-03-18T16:14:48Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Okay, let's see....\r\n\r\nSo, with `Get-Member`, the way you'd give it a single object is essentially identical to how you'd give it multiple. Really, the only difference is what you choose to give it. `Get-Member` gives you an outline of everything that object can get for you, but it doesn't typically get that data for you.\r\n\r\nIf you're looking for, for example, \"I want a list of the object(s) properties and what the value is for each of them\", Get-Member can only really tell you the property _name_. If you want name and value all neatly laid out for you to see, it might be more effective to look at it by piping to `Format-List`. And if you just want to select a single item from a collection there are several ways to do so. Here's one:\r\n\r\n```powershell\r\n# (or pipe to `Get-Member` if you prefer!)\r\nGet-Process | Select-Object -First 1 | Format-List\r\n```\r\n\r\nIn short... `Get-Member` doesn't control what goes in, the cmdlets before it do, and in many ways you do. It can definitely be a bit much at first, I agree, and reading through documentation isn't for everyone. (I personally enjoy just reading docs endlessly and have done so for PowerShell, .NET, SkiaSharp, etc., etc. but that's really not an approach most people find friendly.)\r\n\r\nBash is a great tool, but in a sense it can't do a whole lot. Take away the discrete binaries, and Bash itself is pretty limited. In comparison, PowerShell has a _ton_ built in, and if you want to call back to the native utilities and do the text processing instead, that's still available. I've not really heard that many folks openly _trashing_ Bash, but I can definitely see that in some ways a few folks tend towards speaking that way and it can be very easily misunderstood without further context. Without knowing exactly what you've heard and who you've seen, I can't really say more. \ud83d\ude42 \r\n\r\nI disagree that PowerShell is something you \"don't need to be a programmer to use\".... _sort of_. It's a **fantastic** entry point, even if you've never learnt any programming before. It's very flexible, you don't need to go through the hassle of compiling anything, it's largely a standalone tool with all its dependencies built in, very little to worry about from the user end.... but you _will_ end up learning bits and pieces of programming as you go, and you'll need to. \r\n\r\nIn many ways, you can't progress beyond certain points in learning PS until you've grasped some concepts. And, largely, I think that's OK-- it's better to require some understanding of the tool. PS is a _ridiculously_ powerful tool, and it needs to be understood on a certain level before you know enough to completely wreck a system in most cases, and I think that's probably _wise_.\r\n\r\nIf you happen to be the sort of fellow who learns most effectively by doing and experimenting, I've put together a bit of a guided tour of the things PowerShell can do and how you can work with it, if you're interested.\r\n\r\nhttp://aka.ms/pskoans\r\n\r\nOf course, if you have any questions... don't hesitate to ask. \ud83d\ude04 ",
      "created_at": "2019-03-18T16:27:42Z",
      "updated_at": "2019-03-18T16:27:42Z"
    },
    {
      "author": "DWSR",
      "author_association": "NONE",
      "body": "> Basically you can give Get-Member and output of a cmdlett that will be parsed as objects and combined all together as methods, properties, etc but to parse a specific object to get-member - nah, let's not even mention this possibility. We only work in bulks apparently :)\r\n\r\nIn this specific example, what is the goal of splitting out a single object? All objects returned are expected to be of the same type, so whether you use `gm` on an entire collection of `[System.Diagnostics.Process]` or a single one will yield you the same result.\r\n\r\n> Jeffrey and Don trashing BASH openly again and again while it's so much more convenient than Powershell.\r\n\r\nIt is more convenient than Bash. What you're thinking of Bash and what Bash actually is are two separate things. Bash does not include commands like `find`, for example. Those are usually packaged up as part of `coreutils` or, more generally, GNU Utils. Whether you find Bash + gnutils to be more convenient than pwsh is, of course, subjective.\r\n\r\n> But as long as you don't shove at me the way I can separate a single object from \"get-service/get-process\" and pipe it to get-member - as far as I'm concerned the object oriented part is useless - at best.\r\n\r\nAgain, I don't see what the purpose of getting a single object out of the pipeline is. Perhaps you could elaborate?\r\n\r\nThe pipeline (chains of commands) is always assumed to be working on collections of objects that flow from left to right. If you want to inspect the contents of a collection, you can easily save the output to a variable and then iterate over that variable. For example:\r\n\r\n```pwsh\r\n$ps = Get-Process\r\n$ps[0] # Get details of the first process\r\n```\r\n\r\nHowever, you could also do this to get the same result:\r\n\r\n```pwsh\r\nGet-Process | Select -First 1\r\n```\r\n\r\nOr even something fun like this:\r\n```pwsh\r\n# Get all processes with an ID greater than 80.\r\nGet-Process | Where-Object { $_.Id -gt 80 }\r\n```\r\n\r\n> I want to understand and cut to the flash. As far as I saw it is presented to some degree, and I could be wrong generally, but again as far as I saw, those aren't the things that a thrown at you as a student of PS and those are most important things to understand, cause those are the basics of the PS.\r\n\r\nYou seem to be trying to run before you can walk (which I can understand to be frustrating!). The pipeline in `pwsh` is a very powerful tool and you seem to be trying to tease it apart without fully understanding it. Perhaps some further reading may help? @vexx32 may have some suggestions there.",
      "created_at": "2019-03-18T16:28:29Z",
      "updated_at": "2019-03-18T16:28:29Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@tetrismasters Maybe you can fill us in with what you have read so far when trying to learn PowerShell. That way we can be more helpful in suggesting the next step.",
      "created_at": "2019-03-18T16:42:19Z",
      "updated_at": "2019-03-18T16:42:19Z"
    },
    {
      "author": "tetrismasters",
      "author_association": "NONE",
      "body": "Guys, I truly appreciate your replies. I don't think PS is bad - quite the\nopposite. I was actually surprised that it's not as bad as I thought it\nwould be - more than that it seems kinda good and therefore I want to learn\nit properly. I'm not comparing BASH to PS - Jeffrey and Don do - the guys\nwho are responsible for PS3 if I'm not mistaken :)\n\nwhy would I want to put a single object to get-member instead of the array\nthat \"get-process\" gives me - just as a proof of a concept. To assure that\nI'm understanding correctly what's happening. The problem is not how it\nworks but how it is mentioned in docs. The results being the same for a\nsingle object and for the collection of objects of the same type was my\nfinal guess but here's the problem - it was a guess :). It's not mentioned.\nQuite the opposite (unless - English bad), in \"Powershell in Depth\" its\ndescribed as get-member gives you all the methods and properties of objects\nthat get-service/whatever is piping to it. That makes you think that\nservices/processes can have different attributes and get-member will give\nyou the combined results of all the different methods and properties of the\nobjects that were piped to it. So the next logical thing for you (as a\nstudent) to do is piping a single process to get-member (which I've\ndescribed as \"I guess you can make it with a filter\") and check if it gives\nyou a different result. And you totally described how it can be done and\nI'm totally gonna try it tomorrow :)\n\nThe book I'm reading is \"Powershell in Depth\" by Don Jones and Jeffrey\nHicks. It's not bad, but as I've said it feels a bit of an \"under-kill\".\n\nAnyway, sorry for the rant, thank you for your time. Brandon answered my\nquestion - the results being the same for a single process and for\nget-process. Which is, again, not something you cannot think of - it's just\nnot something that is not mentioned and to me, it was the first thing\npopping in my mind - will it work the same for a single object. M.b. I'm\nthe only one who's brain is twisted like that or I'm just dumb not\nunderstanding the obvious things. Or too Russian :). It is all a\npossibility.\n\nAnd I guess I'm being annoying regarding this part, because to me this\nfeels like a cornerstone of PowerShell. As the most important concept to\nunderstand.\n\nAgain thank you all for your time and - I do enjoy PowerShell itself :)\n\nOn Mon, 18 Mar 2019 at 18:43, Staffan Gustafsson <notifications@github.com>\nwrote:\n\n> @tetrismasters <https://github.com/tetrismasters> Maybe you can fill us\n> in with what you have read so far when trying to learn PowerShell. That way\n> we can be more helpful in suggesting the next step.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/PowerShell/PowerShell/issues/9159#issuecomment-473998150>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AoSfI-3OgZP6uRytS8pyqdjkKNBJ6rbsks5vX8I2gaJpZM4b50f2>\n> .\n>\n",
      "created_at": "2019-03-18T18:03:04Z",
      "updated_at": "2019-03-18T18:03:04Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "> That makes you think that services/processes can have different attributes and get-member will give\r\nyou the combined results of all the different methods and properties of the\r\nobjects that were piped to it.\r\n\r\nAs a better example of this, find a folder that has both files and subfolders in it and then execute:\r\n```\r\nGet-ChildItem <path-to-that-folder> | Get-Member\r\n```\r\nYou should see output for `FileInfo` and `DirectoryInfo` objects - one for each `type` of object - **not** each instance of object.  That IMO would actually be very annoying.  I only need to see object members once for each type.\r\n\r\nBTW if you want to see type info for **every object instance** you can do this (which I do from time to time):\r\n```\r\nGet-ChildItem <path-to-that-folder> | Foreach-Object GetType\r\n```",
      "created_at": "2019-03-18T18:14:22Z",
      "updated_at": "2019-03-18T18:15:05Z"
    },
    {
      "author": "tetrismasters",
      "author_association": "NONE",
      "body": "Thanks, Keith, appreciated!\n\nOn Mon, 18 Mar 2019 at 20:15, Keith Hill <notifications@github.com> wrote:\n\n> That makes you think that services/processes can have different attributes\n> and get-member will give\n> you the combined results of all the different methods and properties of the\n> objects that were piped to it.\n>\n> As a better example of this, find a folder that has both files and\n> subfolders in it and then execute:\n>\n> Get-ChildItem <path-to-that-folder> | Get-Member\n>\n> You should see output for FileInfo and DirectoryInfo objects - one for\n> each type of object - *not* each instance of object. That IMO would\n> actually be very annoying. I only need to see object members once for each\n> type.\n>\n> BTW if you want to see type info (just name) for every object you can do\n> this (which I do from time to time):\n>\n> Get-ChildItem <path-to-that-folder> | Foreach-Object GetType\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/PowerShell/PowerShell/issues/9159#issuecomment-474039249>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AoSfI87ncNXFW1-qylshZwSE6yfRSoW-ks5vX9exgaJpZM4b50f2>\n> .\n>\n",
      "created_at": "2019-03-18T19:18:31Z",
      "updated_at": "2019-03-18T19:18:31Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "And if you really want it for the object you have, you can bypass the pipeline by using\r\n\r\n```powershell\r\nGet-Member -InputObject $yourVariable\r\n```\r\nThat may be useful when you need the type of a collection.\r\n",
      "created_at": "2019-03-18T20:14:47Z",
      "updated_at": "2019-03-18T20:14:47Z"
    },
    {
      "author": "tetrismasters",
      "author_association": "NONE",
      "body": "Staffan, I've tried this on but only now I see how it is different from\nget-service | gm.\nguys thanks a lot! I needed this confirmation.\nsorry for the rant. I thought it's more of \"internal use\" feedback that no\none reads. It wasn't my intent to create a giant shit storm.\n\nOn Mon, 18 Mar 2019 at 22:15, Staffan Gustafsson <notifications@github.com>\nwrote:\n\n> And if you really want it for the object you have, you can bypass the\n> pipeline by using\n>\n> Get-Member -InputObject $yourVariable\n>\n> That may be useful when you need the type of a collection.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/PowerShell/PowerShell/issues/9159#issuecomment-474082794>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AoSfIxS2z7TLDCPsRpkrCw_TS_vgoP8Iks5vX_PfgaJpZM4b50f2>\n> .\n>\n",
      "created_at": "2019-03-19T07:57:49Z",
      "updated_at": "2019-03-19T07:57:49Z"
    },
    {
      "author": "pougetat",
      "author_association": "NONE",
      "body": "Hey @tetrismasters,\r\n\r\nYep we do read it and we try to help out when we can :). The powershell team is a great open source community and I've tried joining a few so I have some (albeit limited) experience in how tough it can be to find one that is truly \"open\".\r\n\r\nIt's great to see that this conversation ended on a higher note than it started on and I learned a lot reading the responses from my fellow collaborators.\r\n\r\nWith that in mind could you change the name of the issue to perhaps something a bit more positive ? :)\r\nPerhaps something along the lines of \"Documentation could be improved\" ?\r\n\r\nCheers \ud83d\ude03 ",
      "created_at": "2019-03-19T08:43:23Z",
      "updated_at": "2019-03-19T08:43:23Z"
    },
    {
      "author": "tetrismasters",
      "author_association": "NONE",
      "body": "Sure. And thank you again :)\n\nOn Tue, 19 Mar 2019 at 10:44, pougetat <notifications@github.com> wrote:\n\n> Hey @tetrismasters <https://github.com/tetrismasters>,\n>\n> Yep we do read it and we try to help out when we can :). The powershell\n> team is a great open source community and I've tried joining a few so I\n> have some (albeit limited) experience in how tough it can be to find one\n> that is truly \"open\".\n>\n> It's great to see that this conversation ended on a higher note than it\n> started on and I learned a lot reading the responses from my fellow\n> collaborators.\n>\n> With that in mind could you change the name of the issue to perhaps\n> something a bit more positive ? :)\n> Perhaps something along the lines of \"Documentation could be improved\" ?\n>\n> Cheers \ud83d\ude03\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/PowerShell/PowerShell/issues/9159#issuecomment-474248299>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AoSfIxz5Luobu2-YtZeUqLRmrHvECV8Hks5vYKNogaJpZM4b50f2>\n> .\n>\n",
      "created_at": "2019-03-19T09:34:34Z",
      "updated_at": "2019-03-19T09:34:34Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "It's really great to see all the community members help out new users where it can be frustrating learning something new.  One of the downsides to PowerShell team members writing documentation is that we don't see it from a beginner's point of view and will leave out details we've internalized.\r\n\r\nI would suggest using https://powershell.org/forums/ for general PowerShell usage questions.",
      "created_at": "2019-03-29T03:49:49Z",
      "updated_at": "2019-03-29T03:49:49Z"
    }
  ],
  "created_at": "2019-03-18T13:47:10Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 9159,
  "state": "closed",
  "title": "A bit confused by documentation regarding working with objects via \"gm\"",
  "updated_at": "2019-03-29T03:49:49Z"
}