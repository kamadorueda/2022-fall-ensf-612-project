{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9228",
  "author": "vexx32",
  "body": "# Summary of the new feature/enhancement\r\n\r\nIn [this comment](https://github.com/PowerShell/PowerShell/issues/3240#issuecomment-476438224) @kfsone touches upon an interesting concept. I'd thought there was an existing issue on this, but I can't find one specifically on StrictMode scopes.\r\n\r\nMany of the issues with Strict Mode stem from it tending to cross boundaries that it shouldn't, e.g., into script modules that aren't expecting to be operating in strict mode. This has most likely affected adoption of it, as although it is a useful tool at times, it becomes cumbersome to actually go through and verify that the modules you _want_ to use are actually compatible with Strict Mode. In _most cases_, they're not.\r\n\r\nPerhaps this could be alleviated by implementing strict mode as a scope-level attribute, to be applied at similar points as `[CmdletBinding()]` (or even a property of CmdletBindingAttribute itself), indicating that strict mode should be in effect during that scope and (optionally?) child scopes only. It should not propagate into module scopes, however.\r\n\r\n```powershell\r\n[CmdletBinding()]\r\n[Strict()]\r\nparam()\r\n\r\n& {\r\n    [Strict(Enabled = $false)]\r\n    # non-strict code\r\n}\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "kfsone",
      "author_association": "NONE",
      "body": "I think it should be based on the parse ast, and not the execution ast.\r\n\r\n```powershell\r\nFunction A()\r\n{\r\n   $foo = $bar  # strict error\r\n}\r\n\r\nFunction B()\r\n{\r\n  [CmdletBinding()]\r\n  [Strict()]\r\n  Param([Switch] $Condition)\r\n\r\n  $foo = \"hello\"\r\n  A()  # no error, despite bar being undefined, because A is not strict\r\n  if ($Condition) {\r\n    [Strict(Enabled = $false)]\r\n    $foo = $baz  # no error\r\n  }\r\n\r\n  if ($foo) {\r\n    $bar = $world  # error because strictness inherited from parent ast/parse scope\r\n  }\r\n}\r\n```\r\n\r\nBut it might be possible to runtime opt-in to strictness:\r\n\r\n```powershell\r\n# NAUSEA WARNING: THE FOLLOW IS JUST CHEESY PSEUDO CODE\r\n[Strict(Enabled = (Get-PSCallStack)[1].Strictness)]\r\n```\r\n",
      "created_at": "2019-03-26T18:57:25Z",
      "updated_at": "2019-03-26T19:05:11Z"
    },
    {
      "author": "kfsone",
      "author_association": "NONE",
      "body": "Not quite *that* dynamic, it should probably have a fairly simple constraint that it ought to reference a value somewhere, e.g. for testing you might want:\r\n\r\n```powershell\r\nFunction A()\r\n{\r\n  [Strict(Enabled=$module:WantStrict)]\r\n  return $bar\r\n}\r\n\r\nFunction Setup-Mock\r\n{\r\n  Write-Host \"Mocks mocked\"\r\n}\r\n\r\n$module:WantStrict = $false\r\n\r\nSetup-Mock\r\nA()  # fine\r\n\r\n$module:WantStrict = $true\r\nA()  # error\r\n\r\n",
      "created_at": "2019-03-26T19:01:06Z",
      "updated_at": "2019-03-26T19:02:02Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I'm not sure I follow the initial example you have there? It looks like you might be mixing up the A()/B()  function calls? I'm not sure. \ud83d\ude04 \r\n\r\nI'm also not really sure a dynamic value for strict mode is the best idea. \ud83d\ude0b ",
      "created_at": "2019-03-26T19:03:39Z",
      "updated_at": "2019-03-26T19:03:39Z"
    },
    {
      "author": "kfsone",
      "author_association": "NONE",
      "body": "@vexx32 Fixed the A/B and see the follow up reply - some dynamism has some appeal but I agree it shouldn't be an up-front requirement.",
      "created_at": "2019-03-26T19:04:49Z",
      "updated_at": "2019-03-26T19:04:49Z"
    },
    {
      "author": "kfsone",
      "author_association": "NONE",
      "body": "I'm also thinking that this allows:\r\n\r\n```powershell\r\nFunction AStrict($codeblock)\r\n{\r\n  [Strict()]\r\n  Invoke-Command -ea continue $codeblock\r\n}\r\n\r\nFunction AFree($codeblock)\r\n{\r\n  [Strict(Enabled=$false)]  # Note: this is a subtle nuance\r\n  Invoke-Command -ea continue $codeblock\r\n}\r\n\r\n$freecode = { $foo = $bar }   # definition legal, execution invalid in strict\r\n$strictcode = { [Strict] $foo = $bar }\r\n\r\nInvoke-Command $freecode  # no error\r\nInvoke-Command -ea cont $strictcode # error\r\n\r\n[Strict()]\r\n{\r\n  Invoke-Command $freecode  # no error, the code itself wasn't tagged strict\r\n  Invoke-Command $strict_code -ea continue # error\r\n}\r\n\r\nAStrict $freecode # no error\r\nAStrict $strictcode # error\r\nAFree $freecode  # no error\r\nAFree $strictcode  # error even though AFree explicitly says Strict(Enabled=$false)\r\n```\r\n",
      "created_at": "2019-03-26T19:10:18Z",
      "updated_at": "2019-03-26T19:11:09Z"
    },
    {
      "author": "kfsone",
      "author_association": "NONE",
      "body": "Yeah, a better alternative to dynamic `strict` that has better precedent would be some form of ErrorAction handling..\r\n```powershell\r\n$StrictPreference = [System.Management.Automation.ActionPreference].SilentlyContinue\r\nSetup-Mock\r\n$StrictPreference = [System.Management.Automation.ActionPreference].DieInAFire\r\n```",
      "created_at": "2019-03-26T19:15:45Z",
      "updated_at": "2019-03-26T19:16:27Z"
    }
  ],
  "created_at": "2019-03-26T13:27:13Z",
  "number": 9228,
  "state": "open",
  "title": "Scope-Restricted Strict Mode",
  "updated_at": "2019-03-26T19:16:27Z"
}