{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12322",
  "author": "TylerLeonhardt",
  "body": "# Summary of the new feature/enhancement\r\n\r\nThis is similar to https://github.com/PowerShell/PowerShell/issues/11223 but a bit broader...\r\n\r\nThe cache and config are internal:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/b1e998046e12ebe5da9dee479f20d479aa2256d7/src/System.Management.Automation/CoreCLR/CorePsPlatform.cs#L143-L150\r\n\r\nIf a Host needs to implement `$PROFILE` support, they have to [implement all of it from scratch](https://github.com/dotnet/interactive/blob/b69bd7f82801a3ce8cbc908638a457825e13f1be/Microsoft.DotNet.Interactive.PowerShell/Host/DollarProfileHelper.cs#L15-L54).\r\n\r\nWe can expose Cache, Config and even a way to get the Profile. Every host shouldn't need to implement this on their own.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nMake cache and config public... and consider making something like this public too:\r\nhttps://github.com/PowerShell/PowerShell/blob/b1e998046e12ebe5da9dee479f20d479aa2256d7/src/System.Management.Automation/engine/hostifaces/HostUtilities.cs#L225-L252\r\n\r\nAnd other utilities in that class that other hosts would love.",
  "closed_at": null,
  "comments": [
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Given that the body text here doesn't really capture https://github.com/PowerShell/PowerShell/issues/11223, I should add that these concepts are essentially something proposed to be added to the PSHost API as something that should have a sane default and be overridable, providing a way both for the host to communicate its configuration of certain common locations, but also for modules to query those locations.\r\n\r\nExamples are:\r\n\r\n- CurrentUser/AllUser module directories\r\n- CurrentUser/AllUser profile paths\r\n- Cache directory\r\n- Config directory\r\n\r\nMy feeling is that these make sense as host APIs because hosts operate at the level of being built for a particular environment.\r\n\r\nMy proposed API is essentially something like:\r\n\r\n```csharp\r\npublic class PSHost\r\n{\r\n...\r\n\r\n    // I know a boolean parameter is used above, but I'm conscious that boolean parameters are warned against in design literature\r\n    public virtual string GetCurrentUserProfilePath() => DefaultGetCurrentUserProfilePath();\r\n\r\n    ...\r\n}\r\n```",
      "created_at": "2020-04-15T23:08:39Z",
      "updated_at": "2020-04-15T23:08:39Z"
    },
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "@rjmholt Cache and config are engine features, so not host specific nor are the SpecialFolders host-specific.\r\n\r\n@TylerLeonhardt It would be nice to fix this for both C# and PowerShell users. @JamesWTruher and I thought using `~` notation would work of scripters.  For example, `~cache/zork` would expand to `<pathToCache>/zork`. This would also be available to C# users through the existing `Path` APIs.",
      "created_at": "2020-04-16T21:42:10Z",
      "updated_at": "2020-04-16T21:42:10Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> Cache and config are engine features, so not host specific nor are the SpecialFolders host-specific.\r\n\r\nIn that case, it sounds like we need a well known static surface within the engine. ",
      "created_at": "2020-04-16T21:46:24Z",
      "updated_at": "2020-04-16T21:46:24Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah. Exposing it via paths is a nice-to-have for scripters, but there should also be a concrete surface within the engine it gets exposed directly in. Perhaps something in ExecutionContext or InvocationInfo?",
      "created_at": "2020-04-17T03:19:39Z",
      "updated_at": "2020-04-17T03:19:39Z"
    }
  ],
  "created_at": "2020-04-15T20:35:48Z",
  "number": 12322,
  "state": "open",
  "title": "Expose easier way to get common locations: Cache, Config, Profile",
  "updated_at": "2020-04-17T03:19:39Z"
}