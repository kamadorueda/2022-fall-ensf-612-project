{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15338",
  "author": "vexx32",
  "body": "## Summary of the new feature/enhancement\r\n\r\nCurrently Strict Mode is very difficult to use effectively, as there isn't really a good way to safeguard code against errors that may arise from objects not having certain properties. Given how mutable objects can be in powershell, this makes working in strict mode more frustrating than it needs to be.\r\n\r\n## Proposed technical implementation details (optional)\r\n\r\nCurrently the only real way to check this is with the somewhat obscure `$object.PSObject.Properties.Name -contains $propName` -- an operator should be provided that checks whether the property exists in a similar way (can we be more thorough than this? Should we?) and safely returns a null or false so that these expressions are easier to write.\r\n\r\nTemporarily borrowing the `?.` operator for now (we don't _have_ to use this operator, but at least to me it sort of makes sense here), it would look something like this:\r\n\r\n```powershell\r\n$value = if ($myObj?.Property) {\r\n    $myObj.Property\r\n}\r\nelse {\r\n    $safeDefault\r\n}\r\n\r\n# nice and neat if we use null coalescing too\r\n\r\n$value = $myObject?.Property ?? $safeDefault\r\n```\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2021-05-03T12:10:41Z",
  "number": 15338,
  "state": "open",
  "title": "Add an operator to allow safe checking for property names in Strict Mode",
  "updated_at": "2021-05-03T17:15:45Z"
}