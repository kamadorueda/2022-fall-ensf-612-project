{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14892",
  "author": "Xpyder",
  "body": "## Summary of the new feature/enhancement\r\nCurrently powershell is unable to implement [Composition Over Inheritance](https://www.makeuseof.com/tag/basic-programming-principles/#composition-over-inheritance) because of a lack of support for custom \"interfaces\"\r\n\r\nThere is a way to get it to work, but it only works when running the code by hand, not in automated scripts\r\n\r\n## Proposed technical implementation details (optional)\r\nThe issue with the workaround boils down to a problem in the parser error: InterfaceNameExpected\r\nIt fails to recognize that using Add-Type will add types, instead it incorrectly assumes the given type will not be available\r\n\r\nI think we should either allow a keyword to override this error, or educate the parser on the usage of Add-Type\r\n\r\n## Examples\r\nI have included 3 examples:\r\nA single file script that fails when run as a whole, but works if you manually run it line by line\r\nA split that works, but is forced to have an incorrect dependency tree\r\nA split that fails, because it's using a correct dependency tree\r\n\r\nNote: The splits use dot sourcing, you'll need to adjust the paths to the appropriate folders on your computer\r\n[Fail - Single File.zip](https://github.com/PowerShell/PowerShell/files/6031780/Fail.-.Single.File.zip)\r\n[Success - Bad Dependancy layout.zip](https://github.com/PowerShell/PowerShell/files/6031781/Success.-.Bad.Dependancy.layout.zip)\r\n[Fail - Good Dependency Layout.zip](https://github.com/PowerShell/PowerShell/files/6031782/Fail.-.Good.Dependency.Layout.zip)\r\n\r\n\r\n## Related issues\r\nhttps://github.com/PowerShell/PowerShell-RFC/pull/152\r\nhttps://github.com/PowerShell/PowerShell/issues/2223",
  "closed_at": "2021-05-06T17:13:20Z",
  "comments": [
    {
      "author": "Xpyder",
      "author_association": "NONE",
      "body": "I've included a readme.txt with each set giving a summary of what it's showing and why it's meaningful",
      "created_at": "2021-02-23T20:52:12Z",
      "updated_at": "2021-02-23T20:52:12Z"
    },
    {
      "author": "Xpyder",
      "author_association": "NONE",
      "body": "A possible work around for this might be to have the parser pause while the dot sources are run\r\n\r\nso for example:\r\n- Main.ps1 parsing starts\r\n- Main.ps1 parsing pauses while dot sources are run\r\n  - Tests.ps1 parsing starts\r\n  - Tests.ps1 parsing pauses while dot sources are run\r\n    - Classes.ps1 parsing starts\r\n    - Classes.ps1 parsing pauses while dot sources are run\r\n      - Interfaces.ps1 parsing starts\r\n      - Add-Type is run\r\n      - Interfaces.ps1 finishes\r\n    - Classes.ps1 parsing continues\r\n    - Parser correctly recognizes CustomInterface exists",
      "created_at": "2021-02-23T21:42:19Z",
      "updated_at": "2021-03-01T23:32:13Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Language working group:\r\nThis issue is a duplicate of #2223. Allowing to define interface in powershell directly is the right way to go.",
      "created_at": "2021-05-06T17:13:20Z",
      "updated_at": "2021-05-06T17:13:20Z"
    }
  ],
  "created_at": "2021-02-23T20:50:46Z",
  "number": 14892,
  "state": "closed",
  "title": "Work Around for multiple inheritance",
  "updated_at": "2021-05-06T17:13:26Z"
}