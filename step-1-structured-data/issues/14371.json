{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14371",
  "author": "peppekerstens",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\n## Steps to reproduce\r\n\r\n[Documentation states](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_commonparameters?view=powershell-5.1#informationvariable):\r\n\r\n\"The information variable contains all information messages generated by the command, including information messages from calls to nested functions or scripts.\"\r\n\r\nWhich (to me) implies that the assigned variable by parameter informationvariable is somehow 'automagically' global and should not have to be explicitly defined as such. \r\n\r\nHowever, even when explicitly defining the assigned variable as 'global', the information is lost when called within a nested function. \r\n\r\n```powershell\r\n>>New-Variable 'Log' -Scope 'global'\r\n>>function logtest {\r\n    Get-Variable 'Log'\r\n    Write-Information -MessageData \"This is a test\" -InformationAction 'SilentlyContinue' -InformationVariable 'Log' -Tag 'Test'\r\n    Get-Variable 'Log'\r\n}\r\n```\r\n\r\n## Expected behavior\r\n\r\n```powershell\r\n>>Get-Variable 'Log'\r\nName                           Value\r\n----                           -----\r\nLog\r\n>>logtest\r\nName                           Value\r\n----                           -----\r\nLog\r\nLog                            {This is a test}\r\n>>Get-Variable 'Log'\r\nName                           Value\r\n----                           -----\r\nLog                            {This is a test}\r\n```\r\n\r\n## Actual behavior\r\n\r\n```powershell\r\n>>Get-Variable 'Log'\r\nName                           Value\r\n----                           -----\r\nLog\r\n>>logtest\r\nName                           Value\r\n----                           -----\r\nLog\r\nLog                            {This is a test}\r\n>>Get-Variable 'Log'\r\nName                           Value\r\n----                           -----\r\nLog\r\n```\r\n\r\n## Environment data\r\n\r\nIssue is not Powershell version specific as I can reproduce this in both PS5.1 and PS7.1. Did not test preview releases.\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n $psversiontable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.0\r\nPSEdition                      Core\r\nGitCommitId                    7.1.0\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n```powershell\r\n$psversiontable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.19041.610\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.19041.610\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```",
  "closed_at": "2020-12-11T06:51:52Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Just like  direct variable assignments (e.g, `$Log = ...`), common `-*Variable` parameters create a _local_ variable by that name, irrespective of wether a variable by that name exists in an ancestral scope.\r\n\r\nTo explicitly  target the _global_ `$Log` variable in your example, use a _scope modifier_ (`global:Log` as an `-*Variable` argument, `$global:Log` in direct assignment):\r\n\r\n```powershell\r\nWrite-Information -MessageData \"This is a test\" -InformationVariable global:Log -Tag Test -InformationAction 'SilentlyContinue' \r\n```",
      "created_at": "2020-12-10T17:17:05Z",
      "updated_at": "2020-12-10T17:17:05Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> However, even when explicitly defining the assigned variable as 'global', the information is lost when called within a nested function.\r\n\r\nIt's referring to nested as in other calls to `Write-Information` within the function you're tagging, not nested as in \"any scope that isn't global\".\r\n\r\ne.g.\r\n\r\n```powershell\r\nfunction Test {\r\n    [CmdletBinding()]\r\n    param()\r\n\r\n    Test2\r\n    Test3\r\n}\r\n\r\nfunction Test2 {\r\n    [CmdletBinding()]\r\n    param()\r\n\r\n    Write-Information 'test2'\r\n}\r\n\r\nfunction Test3 {\r\n    [CmdletBinding()]\r\n    param()\r\n\r\n    Write-Information 'test3'\r\n}\r\n\r\nTest -InformationVariable infos\r\n$infos\r\n```",
      "created_at": "2020-12-10T17:27:11Z",
      "updated_at": "2020-12-10T17:27:11Z"
    },
    {
      "author": "peppekerstens",
      "author_association": "NONE",
      "body": "@mklement0, omfg should have known that...done it before...man... \r\n@SeeminglyScience very clear on usage!\r\nThank you both very much! Was lost in a thinking loophole (apparently)",
      "created_at": "2020-12-11T06:51:52Z",
      "updated_at": "2020-12-11T06:51:52Z"
    }
  ],
  "created_at": "2020-12-10T10:04:06Z",
  "number": 14371,
  "state": "closed",
  "title": "InformationVariable not behaving as described",
  "updated_at": "2020-12-11T06:54:41Z"
}