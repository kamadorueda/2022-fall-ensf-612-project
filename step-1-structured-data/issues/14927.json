{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14927",
  "author": "SteveL-MSFT",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nAdd new `$PSStyle.Progress.UseOSCIndicator` setting to use conemu's OSC indicator to show progress in the terminal window, which is also supported by Windows Terminal.  Since this is a custom OSC that isn't widely supported, it defaults to `$false`.  Since this is an advanced setting not supported by many terminals, had to give it a technical name.  iTerm2, for example, uses `ESC]9;` as a notification OSC sequence so you get a pop-up dialog instead of progress.\r\n\r\nThis is enabled as part of `PSAnsiProgress` experimental feature\r\n\r\n![image](https://i.imgur.com/WJYh2OB.gif)\r\n\r\ncc @dhowett\r\n\r\n## PR Context\r\n\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [x] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [x] Experimental feature name(s): `PSAnsiProgress`\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [x] Issue filed: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/7304\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and opened an issue in the relevant tool repository. This may include:\r\n        - [ ] Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode\r\n        (which runs in a different PS Host).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n",
  "closed_at": "2021-03-12T01:29:18Z",
  "comments": [
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "Whilst one wouldn't want things special cased and hard-coded to terminals, one can actually detect if PowerShell is hosted within ConEmu via environment variables.\r\nTherefore what do you think about a best effort approach of trying to detect well known terminals like ConEmu or the Windows terminal and have a different default if and only if it can be detected with confidence.",
      "created_at": "2021-03-01T18:58:32Z",
      "updated_at": "2021-03-01T18:58:32Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@bergmeister does ConEmu have a big enough customer base to warrant such code?  Also, does every version of ConEmu support it?  In the case of Windows Terminal, we'd have to check that it's newer than a specific version to turn it on by default.",
      "created_at": "2021-03-01T21:12:41Z",
      "updated_at": "2021-03-01T21:12:41Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT @bergmeister  I worry about doing automatic terminal detection being a slippery slope of the team having to support all kinds of terminal quirks long-term, when it's easy enough to do the detection in a user profile. Especially when being done with something as arbitrary as environment variables vs. some sort of standard cross-platform terminal feature detection process (which doesn't exist to my knowledge)\r\n\r\nThis kind of detection could also easily be done in a separate module that manages PSStyle, I don't think it should be part of the core PS codebase however.",
      "created_at": "2021-03-02T22:23:24Z",
      "updated_at": "2021-03-02T22:25:32Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT It would be nice if you can add screenshot or GIF to show how this looks in Windows Terminal.",
      "created_at": "2021-03-11T00:35:13Z",
      "updated_at": "2021-03-11T00:35:13Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@daxian-dbw added a gif, you can see it in the upper left of the tab.  It's just a little circle that fills in based on % complete",
      "created_at": "2021-03-11T06:39:17Z",
      "updated_at": "2021-03-11T06:39:17Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "Changed PR title so that changelog generation script won't have problems with it.",
      "created_at": "2021-03-12T01:28:49Z",
      "updated_at": "2021-03-12T01:28:49Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.2.0-preview.4` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0-preview.4)\n",
      "created_at": "2021-03-16T23:40:12Z",
      "updated_at": "2021-03-16T23:40:12Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Given that the OSC progress indicator is a \"write-only\" thing, there are a number of scenarios where the result is not what one would expect IMVHO:\r\n\r\n1. `a;b;c;d` one-liner where `a` sets the indicator to \"indeterminate\" using `OSC9;4;3;100BEL`, `b` launches a script that uses `Write-Progress`, `c` performs some time-consuming actions, and `d` resets the indicator using `OSC9;4;0;100BEL`: the \"indeterminate\" indicator is overwritten by the `Write-Progress` so during the execution of `c`  the indicator is not the \"indeterminate\" one but the \"0%\" one\r\n2. If a script shows its progress using `Write-Progress` and uses `Compress-Archive`, the indicator set by the former is overwritten by the one set by the latter, so the indicator that's visible most of the time is 0% since that's what it's reset to at the end of the `Compress-Archive`\r\n\r\nThis can be experimented with something like this:\r\n\r\n```powershell\r\nparam([int] $Count = 10, [int] $Delay = 10, [switch] $Archive)\r\n\r\nfor ($i=0; $i -lt $Count; $i++)\r\n{\r\n    Write-Host (\"{0}/{1}\" -f $i, $Count)\r\n    Write-Progress -Activity 'Activity' -Status 'Status' -PercentComplete (100 * ($i+1) / $Count)\r\n    if ($Archive)\r\n    {\r\n        Remove-Item c:/tmp/foo.zip -ea 0\r\n        Compress-Archive -destination c:/tmp/foo.zip C:\\Users\\steph\\OneDrive\\Images\\*.cr2\r\n    }\r\n    Start-Sleep -Seconds $Delay\r\n}\r\nWrite-Progress -Activity 'Activity' -Status 'Status' -Completed\r\n\r\n```\r\n\r\nI think what we need is some global stack-based encapsulation of the indicator, where the latest desired indicator is \"pushed\" to the top of the stack, and the indicator is restored to the previous state on a \"pop\" operation.",
      "created_at": "2021-04-18T08:52:29Z",
      "updated_at": "2021-04-18T08:52:29Z"
    },
    {
      "author": "DHowett",
      "author_association": "NONE",
      "body": "This needs to be solved for all nested and coterminous progress operations regardless of OSC indication. OSC indication being mixed up is only one symptom of the underlying issue. :smile:",
      "created_at": "2021-04-18T16:55:00Z",
      "updated_at": "2021-04-18T16:55:00Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "> This needs to be solved for all nested and coterminous progress operations regardless of OSC indication. OSC indication being mixed up is only one symptom of the underlying issue. \ud83d\ude04\r\n\r\nWhere is discussed / tracked?\r\n\r\nAre the `a` / `d` parts of my scenario #1 covered?  ",
      "created_at": "2021-04-19T16:28:44Z",
      "updated_at": "2021-04-19T16:28:44Z"
    }
  ],
  "created_at": "2021-03-01T15:04:00Z",
  "number": 14927,
  "state": "closed",
  "title": "Add UseOSCIndicator setting to enable progress indicator in terminal",
  "updated_at": "2021-04-19T16:28:44Z"
}