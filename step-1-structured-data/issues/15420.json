{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15420",
  "author": "JohnLudlow",
  "body": "DSC resources and configurations are kind of... opaque in terms of what they tell you when they are running. They don't tell you much unless you pass `-Verbose` which can feel like opening the floodgates.\r\n\r\n## Summary of the new feature/enhancement\r\n\r\nAs a configuration user I would like better feedback (such as indications of progress and success) while running my configuration in a console window so that I can understand the state of my configuration.\r\n\r\nAs a resource developer I would like better feedback (in particular, success indication) while running and testing my resources so that I can tell whether they are working or not.\r\n\r\n## Proposed technical implementation details (optional)\r\n\r\n* Invoke-DscResource *should* output an failed result object if the resource failed and a successful result object if it succeeded\r\n* Invoke-DscResource *could* show a progress banner while running. Perhaps long-running resources could use `Write-Progress` as a matter of convention.\r\n* Start-DscConfiguration *should* show a progress bar while running, showing how far through the configuration you are and the name of the currently running resource\r\n* Start-DscConfiguration *should* output the result objects of each resource it processes (either as it goes, or at the end)",
  "closed_at": null,
  "comments": [
    {
      "author": "gaelcolas",
      "author_association": "NONE",
      "body": "Bear in mind that **in PowerShell** (pwsh) Configuration documents are not usable (they can only be compiled). So currently there's no such thing as _state of configuration_, and there's no command like `Start-DscConfiguration` (PS 4 up to 5.1).\r\n\r\nImplementing it _would_ be a valid request, but that's a different one.  \r\nWorth noting that GuestConfiguration does it in some way, but that's neither Open Sourced, nor Supported outside of the whole Azure Policy Guest Configuration service (but we're working on making this available in the GuestConfiguration module for testing purposes, and as experimental feature for now).\r\n\r\nFinally, resource's `Set` method don't return anything (in case of success).\r\nThat's the job of the `Get` method, and for you to run after to see if it's compliant. \r\nTo throw errors when running the `Set()` is the responsibility the resource implementation, not PowerShell (so open the issue in the resource repository, or discuss with the DSC Community if something needs to be addressed across all resources the DSC Community manage).\r\nIf a resource throws when running a Set, I'm pretty sure using `Invoke-DscResource` will throw the exception when invoking it (if not it's a bug to raise).\r\n\r\nAs a side note, as per [the Guest Configuration requirements](https://docs.microsoft.com/en-us/azure/governance/policy/how-to/guest-configuration-create#get-targetresource-requirements), we're introducing `Reasons` to explicitly describe when a resource is not compliant (when running the Get). As you've noted, that's a much better experience than using verbose (you can check `JeaDsc` as an example).\r\n",
      "created_at": "2021-05-21T19:34:09Z",
      "updated_at": "2021-05-21T19:34:09Z"
    },
    {
      "author": "JohnLudlow",
      "author_association": "NONE",
      "body": "Ahhh I kind of assumed the core cmdlets had been carried over to core already. I can raise another issue to implement something like `Start-DscConfiguration` if you like\r\n\r\nI should clarify - I wasn't saying the `Set` method or the `Set-TargetResource` function would return anything. Rather, the thing that's calling the resource (`Invoke-DscResource` for example) should emit an object indicating whether the `Set` method or the `Set-TargetResource` function threw an error. \r\n\r\nI'll test whether Invoke-DscResource throws. It probably does.\r\n\r\nReasons will definitely help, but when is `Get` called? Is that called after `Set`, or just when doing a consistency check before applying?",
      "created_at": "2021-05-24T08:18:34Z",
      "updated_at": "2021-05-24T08:18:34Z"
    }
  ],
  "created_at": "2021-05-18T09:21:03Z",
  "number": 15420,
  "state": "open",
  "title": "Better experience running DSC resources and configurations interactively",
  "updated_at": "2021-05-24T08:18:34Z"
}