{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11142",
  "author": "SteveL-MSFT",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nFix https://github.com/PowerShell/PowerShell/issues/11067\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2019-12-11T23:40:41Z",
  "comments": [
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "should this be marked as rc.1-consider milestone?",
      "created_at": "2019-12-03T19:45:14Z",
      "updated_at": "2019-12-03T19:45:14Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Need to update PR based on @PowerShell/powershell-committee decision that `-Force` on `ConvertTo-SecureString` shouldn't be mandatory",
      "created_at": "2019-12-05T01:35:58Z",
      "updated_at": "2019-12-05T01:35:58Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Codacy appears to be wrong, VSCode complains if I remote the assignment since the finally block may use an unassigned variable.",
      "created_at": "2019-12-05T01:56:21Z",
      "updated_at": "2019-12-05T01:56:21Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "I think removing the hard requirement for `-Force` when using `ConvertTo-SecureString -AsPlainText` is a bad idea. I also think `ConvertFrom-SecureString -AsPlainText` should require `-Force` to use it.\r\n\r\nThe reason is really simple: someone looking for how to perform such a task in PowerShell is `-Force`d to consider the ramifications/risk and think twice about what they are trying to do (there may be a more secure way to do so).\r\n\r\nEase of use is less important than guiding scripters towards a better understanding of the security implications when working with plain-text passwords in scripts.\r\n\r\nPeople are lazy. Make it too easy for them, and they'll take the easy way without thinking about why they shouldn't do that.\r\n\r\nAlso, FWIW, if the @PowerShell/powershell-committee thinks `-Force` shouldn't be mandatory in this case, I would like that put in front of the PowerShell Community at large via an RFC rather than just forced in quietly.",
      "created_at": "2019-12-05T01:58:53Z",
      "updated_at": "2019-12-05T02:03:07Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "What's the point on non-Windows platforms where \"SecureString\" is a bit of a lie anyway?  Requiring `-Force` on those platforms would be misleading IMO because those strings aren't really that secure.  See https://docs.microsoft.com/en-us/dotnet/api/system.security.securestring?view=netcore-3.0#HowSecure and the recommendation to not use this type anymore: https://github.com/dotnet/platform-compat/blob/master/docs/DE0001.md\r\n\r\nThat said, once we get the Secrets management module, I don't see the `*-SecureString` cmdlets being that useful anymore.\r\n\r\n>  guiding scripters towards a better understanding of the security implications guiding scripters towards a better understanding of the security implications\r\n\r\nWouldn't PSScriptAnalyzer serve this purpose better?\n\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.security.securestring\">SecureString Class (System.Security)</a></strong></div><div>Represents text that should be kept confidential, such as by deleting it from computer memory when no longer needed. This class cannot be inherited. </div></blockquote>\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/9141961?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/dotnet/platform-compat\">dotnet/platform-compat</a></strong></div><div>Roslyn analyzer that finds usages of APIs that will throw PlatformNotSupportedException on certain platforms. - dotnet/platform-compat</div></blockquote>",
      "created_at": "2019-12-05T02:24:04Z",
      "updated_at": "2019-12-05T02:24:06Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "> What's the point on non-Windows platforms where \"SecureString\" is a bit of a lie anyway? Requiring `-Force` on those platforms would be misleading IMO because those strings aren't really that secure. See https://docs.microsoft.com/en-us/dotnet/api/system.security.securestring?view=netcore-3.0#HowSecure and the recommendation to not use this type anymore: https://github.com/dotnet/platform-compat/blob/master/docs/DE0001.md\r\n\r\nIn my mind it's not about `SecureString` and whether or not it is a bit of a lie since you can pull the text out of the string using APIs. It's about interactions between PowerShell and other things -- files on disk, credentials being sent in plain text over a connection, etc. Raising awareness of the potential risk with those type of activities is helpful, as is discouraging use of secrets in plain text.\r\n\r\n> That said, once we get the Secrets management module, I don't see the `*-SecureString` cmdlets being that useful anymore.\r\n\r\nAgreed.\r\n \r\n> > guiding scripters towards a better understanding of the security implications guiding scripters towards a better understanding of the security implications\r\n> \r\n> Wouldn't PSScriptAnalyzer serve this purpose better?\r\n\r\nPSScriptAnalyzer could and should raise warnings for various things related to plain text passwords, but that's only helpful if folks use PSSA. In my opinion, from a security/awareness perspective, pairing `-AsPlainText` with `-Force` is helpful.",
      "created_at": "2019-12-05T02:32:50Z",
      "updated_at": "2019-12-05T02:35:10Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "My motivation for adding this capability is specifically for Secrets Management module.  Secrets Management will always return a SecureString type.  You would use this cmdlet to convert to plain text, if needed.  As for `-Force`, the discussion in @PowerShell/powershell-committee is that the noun `SecureString` is already an indicator that care should be taken when using these cmdlets.  The user already has to specify `-AsPlainText` to get plain text.  Having them also add a superfluous `-Force` is unnecessary and just adds to annoyance or worst invites users to add `Force = true` in PSDefaultParameters.",
      "created_at": "2019-12-05T02:40:30Z",
      "updated_at": "2019-12-05T02:40:30Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "> Secrets Management will always return a SecureString type\r\n\r\nEven though the CoreFx team is clearly recommending not to use this type for new development? ",
      "created_at": "2019-12-05T02:43:18Z",
      "updated_at": "2019-12-05T02:43:18Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@rkeithhill Until corefx provides a SensitiveString type to replace SecureString, we still need a type that doesn't implement `ToString()` and dump the contents accidentally to a transcript or the screen.  And it doesn't make sense for PowerShell to define its own type for this purpose.",
      "created_at": "2019-12-05T02:44:27Z",
      "updated_at": "2019-12-05T02:44:50Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "> As for `-Force`, the discussion in @PowerShell/powershell-committee is that the noun `SecureString` is already an indicator that care should be taken when using these cmdlets. The user already has to specify `-AsPlainText` to get plain text. Having them also add a superfluous `-Force` is unnecessary and just adds to annoyance or worst invites users to add `Force = true` in PSDefaultParameters.\r\n\r\nFor the uncommon occurrence where you want to convert plain text into a `SecureString`, requiring `-Force` isn't superfluous. It's a safety precaution -- a reminder to think twice about what you're doing. And it only requires 6 extra characters.\r\n\r\nWhen you say it's unnecessary and just adds to annoyance or invites users to add `$PSDefaultParameterValues['ConvertTo-SecureString:Force'] = $true`, do you have evidence that users are really annoyed by this or using `$PSDefaultParameterValues` to do that? There are zero open/closed issues in this GitHub repository complaining about `ConvertTo-SecureString` requiring `-Force` when it is used with `-AsPlainText`. Plus, when it comes to `$PSDefaultParameterValues`, by the time a user would apply a default value to change the way they invoke `ConvertTo-SecureString` when working with it interactively, they're likely knowledgeable enough that we should have no problem with them making that decision if they want to. I'm sure `-Force` might annoy a few people who don't want the reminder. I've spoken with others who appreciate the cmdlet drawing their attention to what they're doing.\r\n\r\n> @rkeithhill Until corefx provides a SensitiveString type to replace SecureString, we still need a type that doesn't implement `ToString()` and dump the contents accidentally to a transcript or the screen...\r\n\r\n...or into a file as a stored secret, or pull plain text from a file to use as a secret. `-Force` in these scenarios helps discourage such accidents.\r\n\r\nIMHO the change in behavior of `-Force` is out of scope for this PR, unjustified, and undesirable.\r\n",
      "created_at": "2019-12-05T18:56:06Z",
      "updated_at": "2019-12-05T18:59:47Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@TravisEz13 Is this ready to merge?",
      "created_at": "2019-12-10T17:56:22Z",
      "updated_at": "2019-12-10T17:56:22Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.0.0-rc.1` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-rc.1)\n",
      "created_at": "2019-12-16T21:37:46Z",
      "updated_at": "2019-12-16T21:37:46Z"
    }
  ],
  "created_at": "2019-11-21T01:48:28Z",
  "number": 11142,
  "state": "closed",
  "title": "Add `-AsPlainText` to `ConvertFrom-SecureString`",
  "updated_at": "2019-12-16T21:37:46Z"
}