{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1635",
  "author": "lzybkr",
  "body": "<!--\n\nIf it is a bug report:\n- make sure you are able to repro it on the latest released version. \nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\n- Search the existing issues.\n- Refer to the [FAQ](../docs/FAQ.md).\n- Refer to the [known issues](../docs/KNOWNISSUES.md).\n- Fill out the following repro template\n\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\n-->\n## Steps to reproduce\n\n```\n$PSVersionTable.OS\n```\n## Expected behavior\n\nSomething useful\n## Actual behavior\n\nempty string\n## Environment data\n\n<!-- provide the output of $PSVersionTable -->\n\n``` powershell\n> $PSVersionTable\n\n```\n",
  "closed_at": "2017-05-02T04:04:49Z",
  "comments": [
    {
      "author": "oising",
      "author_association": "CONTRIBUTOR",
      "body": "Host sniffing is bad; testing for features is good. Is this something we envisage being useful information in the grand scheme things? Esp. since there's an issue somewhere else tracking a desire for a `Get-OperatingSystemInfo` cmdlet/function.\n",
      "created_at": "2016-08-04T18:36:06Z",
      "updated_at": "2016-08-04T18:36:06Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Good point - I was thinking more from a \"how can I repro\" perspective, but folks would likely start using the property in scripts thinking it's useful.\n\nMaybe we need a `Get-PowerShellReproEnvironment` cmdlet that we ask folks to run instead.\n",
      "created_at": "2016-08-04T20:15:11Z",
      "updated_at": "2016-08-04T20:15:11Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "And it might be helpful for such an environment to list loaded module names & version numbers as well.  Might also be nice to have list the architecture (x86, x64, ARM32) of the OS and PowerShell (for those cases where x86 PS is running on x64 Windows).\n",
      "created_at": "2016-08-05T05:09:10Z",
      "updated_at": "2016-08-05T05:09:10Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "@oising: testing for features **is** good, but you don't want to test for features to decide simple things like what library to load.  E.g. if I ship System.Data.SqlClient in my module, it has .Net452, .Net46, and _separate_ .NetStandard assemblies for Windows and for Unix.  Just to be able to load the right one I need to know OS and Arch.  I think it would be enough to know:\n1. OS: Windows or Unix\n2. Architecture: ARM, amd64, x86\n",
      "created_at": "2016-08-21T22:12:59Z",
      "updated_at": "2016-08-21T22:12:59Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Just do it.  It will make it easier for scripts to know where to look for environmental info and it will make it easier for you to get bug reports with that same environment info.\n",
      "created_at": "2016-09-29T22:40:15Z",
      "updated_at": "2016-09-29T22:40:15Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Yeah, I used to agree with @oising's opinion here that we shouldn't expose this because it encourages people to \"do the wrong thing\" when checking for certain kinds of compat at runtime. \r\n\r\nUntil I saw the kind of lengths people will go to in order to check for these sorts of things anyway. They'll do it one way or another, and at least this way it's easier to understand when and why people are checking for OS so we can mitigate it in the future. (E.g. I want to know that @Jaykul is testing for OS because of x-CLR assembly issues, so that I know we need to adopt .NET Standard 2.0). \r\n\r\nThat being said, I still agree that checking for features is generally the right thing to do, and we should absolutely have a PSSA rule to throw warnings on checks against $PSVersionTable.OS at runtime. \r\n\r\nOh, and of course, we still need to design this thing. Is it `Windows, Mac, Linux`? Or do we get down to the distro level? Nano Server? Linux kernel version? Probably needs an RFC...",
      "created_at": "2016-12-14T21:29:46Z",
      "updated_at": "2016-12-14T21:30:55Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "But please ... get rid of the top level `$IsWindows`, `$IsLinux` variables, that's ... icky. ",
      "created_at": "2017-01-14T05:57:11Z",
      "updated_at": "2017-01-14T05:57:11Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@PowerShell/powershell-committee I agree w/ @Jaykul on this one. We should try and move to CoreFX's `Environment.OSVersion` when it's available (looks like 2.0 timeframe): https://github.com/dotnet/corefx/pull/9851\r\n\r\nThe next question is whether or not we should propagate `$PSVersionTable` with `Environment.OSVersion` or make users search the web to learn about it (leaning towards the former, but I'm open to being told I'm wrong here). ",
      "created_at": "2017-01-23T17:59:45Z",
      "updated_at": "2017-01-23T17:59:45Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, we agree that $psversiontable should use Environment.OSVersion to populate the new OS property.  On the topic of $IsWindows/$IsLinux/$IsMac, we agree that the capability to check for the OS via a variable is needed, but should consider implemented in a different way (ie, a prefix to avoid collision or make them members of a feature check variable like $PSFeature.IsWindows).  Recommendation is we should have a RFC for the OS check variable.  @joeyaiello to author.",
      "created_at": "2017-01-26T00:50:45Z",
      "updated_at": "2017-01-26T00:50:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I looked CoreFX and didn't found results of Unix tests for Environment.OSVersion under code coverage. CoreFX parse a kernel's `uname` (see [here](https://github.com/dotnet/corefx/blob/f0ccd9742065ee2aa296448fe3dd38ef6ff77af9/src/System.Runtime.Extensions/src/System/Environment.Unix.cs#L320) and [here](https://github.com/dotnet/corefx/blob/master/src/Native/Unix/System.Native/pal_runtimeinformation.cpp#L17)) so we can get bad UX if it will be not tested on all supported Unix distributives.\r\n\r\nAlso we use in `Build.psm1` information from `/etc/os-release`. It is Linux [\"standart\"](https://www.freedesktop.org/software/systemd/man/os-release.html). We would use this if we would map Windows properties to `/etc/os-release` properties.",
      "created_at": "2017-03-08T15:26:51Z",
      "updated_at": "2017-03-08T15:40:46Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "`System.Environment.OSVersion` is back in `netstandard2.0`, but it's not very useful on unix platform. For example, on `Ubuntu 16.04`:\r\n```\r\nPS /> [System.Environment]::OSVersion | fl *                                                        \r\n\r\nPlatform      : Unix\r\nServicePack   : \r\nVersion       : 4.8.0.41\r\nVersionString : Unix 4.8.0.41\r\n```\r\n`System.Runtime.InteropServices.RuntimeInformation.OSDescription` may be a potential substitution:\r\n```\r\nPS /> [System.Runtime.InteropServices.RuntimeInformation]::OSDescription                            \r\nLinux 4.8.0-41-generic #44~16.04.1-Ubuntu SMP Fri Mar 3 17:11:16 UTC 2017\r\n```",
      "created_at": "2017-04-13T16:52:10Z",
      "updated_at": "2017-04-13T16:52:10Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "`OSDescription` looks like part of the output from `uname -a`.  Seems like the way to go.  ",
      "created_at": "2017-04-13T17:29:29Z",
      "updated_at": "2017-04-13T17:29:29Z"
    },
    {
      "author": "chunqingchen",
      "author_association": "CONTRIBUTOR",
      "body": "taking a look on this",
      "created_at": "2017-04-14T00:11:20Z",
      "updated_at": "2017-04-14T00:11:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If the next what we want, then we could ask CoreFX team:\r\n```\r\nPS /> [System.Environment]::OSVersion | fl *                                                        \r\n\r\nPlatform      : Unix\r\nServicePack   : \r\nVersion       : 4.8.0.41\r\nVersionString : Ubuntu 16.04 \r\n```\r\n\r\n```\r\nPS /> [System.Environment]::OSVersion | fl *                                                        \r\n\r\nPlatform      : Windows\r\nServicePack   : \r\nVersion       : 10.0.15063\r\nVersionString : Windows 10 Creator \r\n```\r\n",
      "created_at": "2017-04-14T04:32:24Z",
      "updated_at": "2017-04-14T04:32:24Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "I think `OSVersion.Platform` and `OSVersion.Version` are both super useful as they don't require any string parsing to get at Windows v. non-Windows and the kernel version. Beyond that, I think we should expose `[System.Runtime.InteropServices.RuntimeInformation]::OSDescription` as our own `uname -a` string as well. \r\n\r\nI know this might be ballooning `$PSVersionTable`, but it all feels like useful info. ",
      "created_at": "2017-04-14T17:09:20Z",
      "updated_at": "2017-04-14T17:09:20Z"
    },
    {
      "author": "chunqingchen",
      "author_association": "CONTRIBUTOR",
      "body": "@joeyaiello  could you give me a mock information $PSVersionTable.OS should give out?\r\nfor example, should $PSVersionTable.OS looks like this? (combine the osversion and osdescription)\r\n$PSVersionTable.OS\r\nPlatform      : Unix\r\nServicePack   : \r\nVersion       : 4.8.0.41\r\nVersionString : Unix 4.8.0.41\r\nOSDescription: Linux 4.8.0-41-generic #44~16.04.1-Ubuntu SMP Fri Mar 3 17:11:16 UTC 2017",
      "created_at": "2017-04-18T22:32:02Z",
      "updated_at": "2017-04-18T22:32:02Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@joeyaiello Do we really want `Platform` since we're keeping $IsUnix/$IsWindows/etc... for automation purposes?  Seems like `OSDescription` is the only thing we really need here primarily for logging purposes.",
      "created_at": "2017-04-18T23:01:29Z",
      "updated_at": "2017-04-18T23:01:29Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@chunqingchen Yeah, I guess just make `$PSVersionTable.OS` equivalent to `[System.Environment]::OSVersion` for now. That's fine. \r\n\r\nI'm not super sold on `$IsUnix`/`$IsWindows`, but I'd like to understand .NET Core 2.0's platform differentiation a little better before I form a strong opinion. ",
      "created_at": "2017-04-19T16:47:06Z",
      "updated_at": "2017-04-19T16:47:06Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "BTW the longer you wait, the more modules get published that rely on $Is*.  :-)  posh-git aleady relies on these variables but we could switch to the \"preferred way\" of testing for the OS platform.",
      "created_at": "2017-04-19T17:00:05Z",
      "updated_at": "2017-04-19T17:00:05Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@joeyaiello did you really mean `[System.Environment]::OSVersion` (which is not really useful) or `[System.Runtime.InteropServices.RuntimeInformation]::OSDescription` which is equivalent to `uname -a`?  I was saying the latter makes sense",
      "created_at": "2017-04-19T17:50:42Z",
      "updated_at": "2017-04-19T17:50:42Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Per our discussion today, I'm on board with the recommendation from @SteveL-MSFT. \r\n\r\nWe also agreed that `OSVersion.Platform` should probably be included as well. It's possible that `$IsWindows` and its ilk should become \"dumb accelerators\" and query that directly. ",
      "created_at": "2017-04-19T18:24:33Z",
      "updated_at": "2017-04-19T18:24:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Is ` [System.Runtime.InteropServices.RuntimeInformation]::OSDescription` really always different?\r\nI mean can we distinguish between Ubuntu LTS, Release and so on? Windows Desktop, Server, Core, IoT? ",
      "created_at": "2017-04-20T05:22:03Z",
      "updated_at": "2017-04-20T05:22:03Z"
    }
  ],
  "created_at": "2016-08-04T00:27:37Z",
  "number": 1635,
  "state": "closed",
  "title": "PSVersionTable should have entry for OS",
  "updated_at": "2017-05-02T04:41:01Z"
}