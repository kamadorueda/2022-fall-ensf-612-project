{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10769",
  "author": "vexx32",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nInitial implementation of IsNullLike used a slightly less optimal order of evaluation. The expected most common cases are (in order): `null`, `AutomationNull.Value`, `DBNull.Value`, `NullString.Value`\r\n\r\nThis also changes `IsNull()` to use `obj is null` instead of `obj == null`.\r\n\r\n## PR Context\r\n\r\nSee #10422 and #10704 (this PR could be made a part of either of those, but is a smaller change and easier to get in first, so that we can focus on more important outstanding issues and review comments in the other PRs)\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2019-10-12T19:21:33Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@PoshChan please retry macos",
      "created_at": "2019-10-11T02:39:37Z",
      "updated_at": "2019-10-11T02:39:37Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@vexx32, successfully started retry of `PowerShell-CI-macOS`",
      "created_at": "2019-10-11T02:39:58Z",
      "updated_at": "2019-10-11T02:39:58Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "In case someone looking at this PR wants to know, the reason for comparing against null using `is null` instead of `== null` is explained by Mads Torgersen [here](https://www.youtube.com/watch?v=TJiLhRPgyq4&feature=youtu.be&list=PLReL099Y5nRd04p81Q7p5TtyjCrj9tz1t&t=373).",
      "created_at": "2019-10-11T11:54:35Z",
      "updated_at": "2019-10-11T11:54:35Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> In case someone looking at this PR wants to know, the reason for comparing against null using `is null` instead of `== null` is explained by Mads Torgersen [here](https://www.youtube.com/watch?v=TJiLhRPgyq4&feature=youtu.be&list=PLReL099Y5nRd04p81Q7p5TtyjCrj9tz1t&t=373).\r\n\r\nJust to clarify, it's often considered a good practice in general but it doesn't actually make a difference when both sides are typed as object ([SharpLab example](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxAgrgOwD4AECMAbAAS4BMp+A7ALABQA3vcS5SbgCzECyEAlpgAUASmasmdVlIIA6AgE5BAIgAqATwAOcACbFoxAPbAAVnADGqYgwAMAXyVJigo6YvDMcAO7EAogEd0CAAbPhg1FThYRBFiAF5Y4kx0IKDhAG4xKUo5fEVVTR09KD0LQKCQKzsHRK9fAODQ8Mj4BBj4xOTUjMlWW3o+unpcAGZSCn8yxoiohHoJaVGCEmADAyDDLQQIGAMEONjBCYaw6ZbiIIALKEcjkJPmxGIEK+E4gD5iGAw4bqlM0kWRGIKzWG0Q212xAAhAdblMHntLtc6pN7jMni93sQAGbBKA/ej/EaGABuiAQfG0cGBq3WtygzhM5hghhMr1iHy+6AJgx6LGJBjJCApVOIAhZAHE4DAABLQC4AYQMVLaH2A0DgMilsvlSpV6X6QA)).  I like the change, just want to point that out because it can be confusing and I didn't hear that covered in the link.",
      "created_at": "2019-10-11T13:40:15Z",
      "updated_at": "2019-10-11T14:59:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> This also changes IsNull() to use obj is null instead of obj == null.\r\n\r\nAs maintainer I don't like such sporadic changes. If this is a best practice we should keep our code base clean and fix all code base in one step. This should be well-documented (youtube is not document) and approved by maintainers. I suggest to open new issue for this.",
      "created_at": "2019-10-11T18:25:26Z",
      "updated_at": "2019-10-11T18:25:26Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I see what you mean. I can revert that part for now if we'd rather do these separately; this may be a wider-reaching change we need to account for across the entire codebase, and perhaps it's best to do that all at once.\r\n\r\nThat said... I also don't see the harm in updating the code practices here and there as we make other changes anyway to gradually reduce the instances of the less advisable practice as well.\r\n\r\nAlso, I know @KirkMunro was wanting that change to be in `IsNull` specifically, because that will affect a majority of user-facing PowerShell use cases, as far as I know. The rest of the codebase isn't immediately suffering for it, so in general I would consider it more akin to a style change except where public API is concerned, where it will directly (though likely subtly) impact users.",
      "created_at": "2019-10-11T20:33:57Z",
      "updated_at": "2019-10-11T20:35:22Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "> As maintainer I don't like such sporadic changes. If this is a best practice we should keep our code base clean and fix all code base in one step. This should be well-documented (youtube is not document) and approved by maintainers. I suggest to open new issue for this.\r\n\r\n@iSazonov: This isn't sporadic. It's about updating a shared piece of code that is used by both the `-is/-isnot` operators and comparison operators in PowerShell, and there are two other open PRs that reference this code. Since multiple PRs are referencing this code that each have ongoing discussions, and since the update is so simple, it made sense to isolate it in its own PR so that it could go in more easily (the irony). It is a focused, and well-founded change about checking if PowerShell objects are null, that should be reviewed and merged.\r\n\r\nDo I think that using `is null` instead of `== null` is a best practice in C# 7 or later?\r\n\r\nYes.\r\n\r\nDo I think we should use `is null` instead of `== null` in new code that is written in the PowerShell code base?\r\n\r\nYes, because it's a best practice.\r\n\r\nDo I think this is a best practice to follow to the point where we should update our entire code base?\r\n\r\nNo way. We haven't run into a problem with `== null` in our C# code yet that I am aware of, so why take on that effort and slow down everything else unnecessarily?\r\n\r\nAs for how well or not well documented you think that YouTube video is, well, Mads leads the C# design team, and what he said was pretty clear in that video. I can't find it in official docs though, because docs aren't always updated by the people who understand what should be said. The only Microsoft doc I found simply said you could use `is null` to check if something is null, with no mention at all of why they added this. That's not too surprising given that the doc update came from a community PR, and not the C# design team. We'll just have to deal with the imperfect world with open source community contributions and people having too much to do that we live in, I guess.",
      "created_at": "2019-10-11T23:31:09Z",
      "updated_at": "2019-10-12T15:22:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I am not against the best practices and new features that appeared just to help us. If I'll get understanding that this is great for PowerShell I'll first who ready to review all code base for this.\r\nBut as @vexx32 said:\r\n>  that will affect a _majority_ of user-facing PowerShell use cases, as far as I know. The rest of the codebase isn't immediately suffering for it, so in general I would consider it more akin to a style change\r\n\r\nIf it is important (do you insist on it?) here then why? Scripts have been malfunctioning for the past 15 (!) years and we should fix this? _Such change of a public API is a breaking change in red area._ It is unbelievable that such a change will be accepted.\r\nDid you any investigation and can point scripts on GitHub where this is so critical that we must accept the breaking change?\r\n\r\nOn the other incredible side, what if there is code or scripts that are based on virtual Equals? And again we will break them.\r\n\r\nAs maintainer I'd want at first update our code style convention guideline and get MSFT docs so that we make reasonable requests to contributors at PR time review and not embarrass them and not waste time discussing this.\r\n",
      "created_at": "2019-10-12T12:32:54Z",
      "updated_at": "2019-10-12T12:32:54Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> > that will affect a _majority_ of user-facing PowerShell use cases, as far as I know. The rest of the codebase isn't immediately suffering for it, so in general I would consider it more akin to a style change\r\n>\r\n> If it is important (do you insist on it?) here then why? Scripts have been malfunctioning for the past 15 (!) years and we should fix this? Such change of a public API is a breaking change in red area. It is unbelievable that such a change will be accepted.\r\nDid you any investigation and can point scripts on GitHub where this is so critical that we must accept the breaking change?\r\n\r\nJust to be completely clear here, when the LHS is typed as `object` both styles generate [the exact same IL](https://sharplab.io/#v2:C4LglgNgPgAgTARgLACgYGYAE9MGFMDeqmJ2WARgPaUSYCyAFJeQFYCmAxsJsABZgA7AOYBKQsVKSYAdh79hmALyLMAgK4QIAbgkkAvrsyGMmKjUwB5Jq07c+g0eJSSps+wrABnVRu2GDKHpAA==).  The only time it doesn't generate the same IL is when the LHS is typed as a class that defines the `op_Equality` operator.  And by \"typed as\" I mean statically.  The run-time type doesn't matter, only the design time declaration.  In the vast majority of situations, it's just a style choice.\r\n\r\nI have no strong personal opinions about whether PowerShell should or shouldn't prefer `is null`, just trying to clear up what it does.",
      "created_at": "2019-10-12T15:48:24Z",
      "updated_at": "2019-10-12T15:49:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> The only time it doesn't generate the same IL is when the LHS is typed as a class that defines the op_Equality operator. \r\n\r\n@SeeminglyScience Please share an example on Sharplab for my education.",
      "created_at": "2019-10-12T16:11:04Z",
      "updated_at": "2019-10-12T16:11:04Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov \r\n\r\n[Here ya go](https://sharplab.io/#v2:C4LglgNgPgAgTARgLACgYGYAE9MGFMDeqmJ2WMCAbJgEYD2dEmAkgM4ByArhBABQASAQ1a5OrYHQC2AUQCOnQRDDAAnpggALVgEpMAXgB86rZjCtMAO24QA3MVL2SGbFVoMmchRA7WBw0eJSnorKapo6+kbh+nqW1nYoAL6oqM44QiJiEjLyIaqoRCikZC7U9IyYdAAOAKYAToISdTF+mYE5XqHGrAA0lTQAVjUAxsCYdVq6hpjAdZw1CcWOJRRl7pW1DU2YAIR6rQHZwUqq3X10gyNjExHTAGaKrAspRaTOdABu9XVgACY1bgqx1YvAuQ1G/QGUyMNGENQAdMDQYNtAllu8vnUfv9TBYxgBxGrADIaXB0f68aG0OHwwnE4Sk8k1SkJRJAA=).  The first generates IL that specifically tests for a null reference, the second calls out to the custom equality operator.  It's important to reiterate there is no virtual dispatch here. Because operators are static, it doesn't matter what the actual run-time type is, only the design time typing.",
      "created_at": "2019-10-12T17:15:54Z",
      "updated_at": "2019-10-12T17:15:54Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "I understand the points you made @iSazonov.\r\n\r\nOne question I've been asking myself today based on this discussion is whether or not it is worth distinguishing between the two. If by changing `IsNull` to actually use `is null` we are changing `-eq $null` to actually use `is null` as well, it makes sense to ask if that is what we actually want to do or not. As you point out, we lose the ability to decisively use the a custom equality operator if all equality comparisons to `$null` end up using `is null` internally.\r\n\r\nI'll also point out that I dislike that our `IsNull` public method (that is documented right above it as internal...when did that go public anyway) doesn't really check `is null`, but instead checks `== null`. Otherwise I was thinking it may make sense to have `EqualsNull` as well as `IsNull` if we want the distinction, but existing code is written to use `IsNull` so without wanting to change that, would we have `IsNull` and `ReallyIsNull`? \ud83d\ude1d \r\n\r\nUltimately I just want to get obstacles out of the way of adding `-is $null` and `-isnot $null` support in PR #10704 which adds immediate value, even if all equality comparisons against `$null` use `is null` under the covers, because it makes it possible to check if a property or variable referencing a collection is actually null in PowerShell.\r\n\r\nTo remove the friction that seems to have come up from this, I'm tempted to go back to that PR and not use `IsNullLike`, since it calls `IsNull` which really checks \"equals null or AutomationNull.Value\", and instead just perform the checks myself in a different helper method that actually uses `is null`.",
      "created_at": "2019-10-12T18:10:18Z",
      "updated_at": "2019-10-12T18:39:27Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> One question I've been asking myself today based on this discussion is whether or not it is worth distinguishing between the two. If by changing IsNull to actually use is null we are changing -eq $null to actually use is null as well, it makes sense to ask if that is what we actually want to do or not. As you point out, we lose the ability to decisively use the a custom equality operator if all equality comparisons to $null end up using is null internally.\r\n\r\nThere's no difference between `is null` and `== null` when the LHS is `object`.  Check my other comments in this thread for examples/explanation.",
      "created_at": "2019-10-12T18:16:09Z",
      "updated_at": "2019-10-12T18:16:09Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Aye. And since we're talking about comparing against a parameter that _is_ typed as `object`, this difference is purely stylistic here. There is no functional change in this instance.\r\n\r\nOther usages _within_ the PowerShell engine can be evaluated differently. But as with this one, anything that uses `object` as the compile-time type will be unaffected (this covers a majority of our public API).",
      "created_at": "2019-10-12T18:25:49Z",
      "updated_at": "2019-10-12T18:25:49Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@SeeminglyScience Thanks, apologies for missing that in your earlier comments.\r\n\r\nGiven that's the case, there is no reason not to merge this PR in as is, right, because it's just enhancing performance and making a very small style change. Either that or remove the style change and merge the perf change in, because it won't matter either way.",
      "created_at": "2019-10-12T18:37:37Z",
      "updated_at": "2019-10-12T18:37:37Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yup, I'm good with either. \ud83d\ude42 ",
      "created_at": "2019-10-12T18:52:25Z",
      "updated_at": "2019-10-12T18:52:25Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "I also removed my dependency on this from #10704 because it isn't a requirement for that to be reviewed and merged in.",
      "created_at": "2019-10-12T18:57:22Z",
      "updated_at": "2019-10-12T18:57:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SeeminglyScience Many thanks!\r\n\r\nWith @SeeminglyScience's samples my understanding is that the issue can be only with custom classes with wrong Equals implementation.\r\nI found only 5 classes in PowerShell repo where we define Equals and equality operator. We could review the classes but it is old classes and I guess they is well-tested.\r\n\r\nThe samples also explicitly show that IL code is the same - no performance benefits.\r\n\r\nThen I found that PowerShell repo contains 5599 of `== null` pattern. And, as @vexx32 mentioned, all is about `object` and standard Core classes. While I do not see where the use of this feature would be _necessary_.\r\n\r\nAll custom classes which could be passed to PowerShell and which have wrong design cannot be fixed in PowerShell engine with the feature. (We can\u2019t even predict that there is a right design for these classes.)\r\n\r\nThen I make quick search in CoreFX. I hoped to find useful examples and was very wonder that I find a few ones although this feature was mentioned two years ago (!). At first look they used it to fix very thin bugs (in unsafe code - that I saw). After that, I'm not surprised that this feature is undocumented.\r\n\r\nSo my current conclusion is that the PR doesn't add any value.\r\n\r\n",
      "created_at": "2019-10-12T19:05:00Z",
      "updated_at": "2019-10-12T19:05:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 Blue labels is for issues. Yellow is for PRs (they is used to generate changelog automatically)",
      "created_at": "2019-10-12T19:06:14Z",
      "updated_at": "2019-10-12T19:14:46Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov the `is null` portion of the PR can be removed if we don't want/need it. The primary purpose of the PR is to tidy up the execution order of `IsNullLike()` so that it checks for the most common values first, rather than wasting time checking `DBNull.Value` and `NullString.Value` first (which are, relatively, less common cases).",
      "created_at": "2019-10-12T19:12:49Z",
      "updated_at": "2019-10-12T19:13:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 I suggest to open new PR for null ordering. Our discussion about `is null` will distract from reviewing the functional change.",
      "created_at": "2019-10-12T19:20:23Z",
      "updated_at": "2019-10-12T19:20:23Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "No problem, will do. \ud83d\ude42 ",
      "created_at": "2019-10-12T19:21:30Z",
      "updated_at": "2019-10-12T19:21:30Z"
    }
  ],
  "created_at": "2019-10-11T02:09:40Z",
  "number": 10769,
  "state": "closed",
  "title": "Use better order of evaluation in IsNull/IsNullLike",
  "updated_at": "2019-10-12T19:21:33Z"
}