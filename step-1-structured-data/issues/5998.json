{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5998",
  "author": "bergmeister",
  "body": "I get an error when running `Enable-PSRemoting` not only on my Win10 dev machine but also on a clean WinServer 2016 Azure VM. I am sure someone can explain the error and how to resolve, but this is not what the issue is about! The issue that stuff has to work out of the box on on standard environment like Windows images that one gets in Azure.\r\nThis is also related to issue #5979 which is the upcoming feature of running `Enable-PSRemoting` in the installer. I do not think it would be good having to always suppress the error just because of that.\r\n\r\nSteps to reproduce\r\n------------------\r\nOpen pwsh as an Admin (cmdlet requires it)\r\n```powershell\r\n> Enable-PSRemoting\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nNo error. I cannot say what the correct behaviour is because it depends on what is 'wrong' here.\r\n\r\nActual behavior\r\n---------------\r\n\r\nError is thrown\r\n````powershell\r\n> Enable-PSRemoting\r\nWinRM is already set up to receive requests on this computer.\r\nSet-WSManQuickConfig : <f:WSManFault xmlns:f=\"http://schemas.microsoft.com/wbem/wsman/1/wsmanfault\"\r\nCode=\"2150859113\" Machine=\"localhost\"><f:Message><f:ProviderFault provider=\"Config provider\" path=\r\n\"%systemroot%\\system32\\WsmSvc.dll\"><f:WSManFault xmlns:f=\"http://schemas.microsoft.com/wbem/wsman/1/wsmanfault\"\r\n Code=\"2150859113\" Machine=\"VSTS2\"><f:Message>WinRM firewall exception will not work since one of the network\r\n connection types on this machine is set to Public. Change the network connection type to either Domain or Private and try again. \r\n</f:Message></f:WSManFault></f:ProviderFault></f:Message></f:WSManFault>\r\nAt line:116 char:17\r\n+                 Set-WSManQuickConfig -force\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidOperation: (:) [Set-WSManQuickConfig], InvalidOperationException\r\n+ FullyQualifiedErrorId : WsManError,Microsoft.WSMan.Management.SetWSManQuickConfigCommand\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-rc\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-rc\r\nOS                             Microsoft Windows 10.0.16299\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT Could you comment on this please since it is related to your suggested feature.",
      "created_at": "2018-01-23T23:05:34Z",
      "updated_at": "2018-01-23T23:19:10Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "`Enable-PSRemoting` uses `Set-WSManQuickConfig` which fails if any of the network connections are set to `Public`.  The way to fix this in Windows PowerShell is something like: `Get-NetConnectionProfile | Set-NetConnectionProfile -NetworkCategory Private` (although you should really do this per net connection profile, this is only for testing purposes on a private network you trust...).\r\n\r\nThe \"good news\" is that if you add the Windows PowerShell PSModulePath, the *-NetConnectionProfile cmdlets work with PSCore6 (at least for this purpose, haven't tested it beyond that).\r\n\r\n`Enable-SSHRemoting` would not depend on `Set-WSManQuickConfig` so it wouldn't encounter this issue.  However, it seems that we should still respect public vs private network connection profiles so that `-AllowRemotingOverPublicNetworks` type of switch would allow manual override.\r\n\r\nI don't think there's much we can do about `Set-WSManQuickConfig` as the actual implementation of that cmdlet functionality is within WinRM.",
      "created_at": "2018-01-24T01:21:18Z",
      "updated_at": "2018-01-24T01:21:18Z"
    },
    {
      "author": "alexandair",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT Enable-PSRemoting has the -SkipNetworkProfileCheck parameter. You don't need to manually change net connection profile.",
      "created_at": "2018-01-24T11:28:19Z",
      "updated_at": "2018-01-24T11:28:19Z"
    },
    {
      "author": "craiglandis",
      "author_association": "NONE",
      "body": "@SteveL-MSFT is the \"WinRM firewall exception will not work since one of the network\r\n connection types on this machine is set to Public\" error intended to be a security warning so people are mindful of using remoting with Public network connection profile?\r\n\r\n@bergmeister mentioned it reproduced on both Win10 and WS16. But in my testing, only Win10 threw that error, while both WS16 and WS19 ran Enable-PSRemoting successfully even though they were using Public network connection profile.\r\n\r\nIf the error is intended to be a security warning, shouldn't it be thrown on all Windows SKUs when using Public network connection profile? And shouldn't it be more clearly worded to be a security warning, and mention that -SkipNetworkProfileCheck will skip the check? The existing wording \"WinRM firewall exception will not work...\" seems misleading/confusing, since it will work if you add -SkipNetworkProfileCheck. \r\n",
      "created_at": "2019-10-29T16:08:51Z",
      "updated_at": "2019-10-29T16:08:51Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@craiglandis on Server SKUs, PowerShell remoting is enabled by default, so `Enable-PSRemoting` I believe sees that it's enabled and doesn't do anything.  The Firewall Exception for Public networks should still be there so by default won't accept connections from the Public connection.  The error is intended to give a warning like if you are on some Public network.  The wording is about the current state.  I think in general, we don't want to promote `-SkipNetworkProfileCheck` and leave it as an advanced user option to be discovered.",
      "created_at": "2019-10-30T00:46:29Z",
      "updated_at": "2019-10-30T00:46:29Z"
    }
  ],
  "created_at": "2018-01-23T22:59:18Z",
  "number": 5998,
  "state": "open",
  "title": "Enable-PSRemoting throws error",
  "updated_at": "2019-10-30T00:46:29Z"
}