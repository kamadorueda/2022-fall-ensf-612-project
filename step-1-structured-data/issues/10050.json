{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10050",
  "author": "rjmholt",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nAdds support for the `-Login` flag to PowerShell, execs /bin/sh to run the login profile, which then execs PowerShell.\r\n\r\n## PR Context\r\n\r\nThis implements https://github.com/PowerShell/PowerShell-RFC/pull/186.\r\n\r\nFix https://github.com/PowerShell/PowerShell/issues/975\r\n\r\nThe startup performance can be profiled with the script [here](https://gist.github.com/rjmholt/1ec87842e1ab4655bac34405c7a719e2).\r\n\r\nSome implementation details:\r\n\r\n- The argument parsing for this is done as early as possible\r\n- This passes the arguments through `exec` and through `/bin/sh` (`/bin/bash` on macOS) with `\"$@\"`\r\n- I've tried to avoid any allocation or other unneccessary computations, but there might be other opportunities to improve\r\n\r\n**NOTE**: This supersedes `-LoadProfile`, which is a breaking change, but of a feature that only exists in preview (and is for the same use case as `-Login`).\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [x] Issue filed: https://github.com/MicrosoftDocs/PowerShell-Docs/pull/4528\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n",
  "closed_at": "2019-08-14T20:18:44Z",
  "comments": [
    {
      "author": "ExE-Boss",
      "author_association": "NONE",
      "body": "I don\u2019t think we\u00a0need to\u00a0remove `\u2011LoadProfile`, we\u2019ll\u00a0just need to\u00a0change the\u00a0abbreviation to\u00a0something like\u00a0`\u2011lp`.\r\n\r\nThis is\u00a0so\u00a0that we\u00a0can\u00a0override an\u00a0alias that passes `-NoProfile`.",
      "created_at": "2019-07-04T03:29:20Z",
      "updated_at": "2019-07-04T03:32:11Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> I don\u2019t think we need to remove \u2011LoadProfile, we\u2019ll just need to change the abbreviation to something like \u2011lp.\r\n>\r\n> This is so that we can override an alias that passes -NoProfile.\r\n\r\n`-LoadProfile` was only added to be compatible with `-Login` and was supposed to be a no-op, but was actually more confusingly order dependent. I personally don't think it's really something we want in PowerShell, and I think we should try to keep exe options to a minimum",
      "created_at": "2019-07-04T03:54:13Z",
      "updated_at": "2019-07-04T03:54:13Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@rjmholt please make corresponding doc change for PS7 and link to this PR",
      "created_at": "2019-07-08T16:06:48Z",
      "updated_at": "2019-07-08T16:06:48Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "https://github.com/MicrosoftDocs/PowerShell-Docs/pull/4528/files\r\n",
      "created_at": "2019-07-08T18:03:24Z",
      "updated_at": "2019-07-08T18:03:24Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@rjmholt \ud83e\udd47",
      "created_at": "2019-07-09T01:32:51Z",
      "updated_at": "2019-07-09T01:32:51Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@PoshChan please retry",
      "created_at": "2019-07-12T21:42:19Z",
      "updated_at": "2019-07-12T21:42:19Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@rjmholt, I do not understand: please retry\n\nCommands available in this repo for you:\n  - `retry <target>` this will attempt to retry only the failed jobs for the target pipeline\n  - `rebuild <target>` this will perform a complete rebuild of the target pipeline, `rerun` can be used in place of `rebuild`\n    Supported values for \\<target\\> which can be a comma separated list are: `static`,`windows`,`macos`,`linux`,`all`\n  - `get failures` this will attempt to get the latest failures for all of the target pipelines\n  - `remind me in <value> <units>` this will create a reminder that will be posted after the specified duration\n    \\<value\\> is a number, and \\<units\\> can be `minutes`, `hours`, or `days` (singular or plural)\n",
      "created_at": "2019-07-12T21:42:39Z",
      "updated_at": "2019-07-12T21:42:39Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@PoshChan please retry PowerShell-CI-static-analysis",
      "created_at": "2019-07-12T21:44:40Z",
      "updated_at": "2019-07-12T21:44:40Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@rjmholt, I do not understand the build target(s) `PowerShell-CI-static-analysis`; I only allow `static`, `windows`, `macos`, `linux`, `all`",
      "created_at": "2019-07-12T21:44:47Z",
      "updated_at": "2019-07-12T21:44:47Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@PoshChan thanks for playing",
      "created_at": "2019-07-12T21:47:13Z",
      "updated_at": "2019-07-12T21:47:13Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@rjmholt, all requests start with the magic word: `Please`\n\nCommands available in this repo for you:\n  - `retry <target>` this will attempt to retry only the failed jobs for the target pipeline\n  - `rebuild <target>` this will perform a complete rebuild of the target pipeline, `rerun` can be used in place of `rebuild`\n    Supported values for \\<target\\> which can be a comma separated list are: `static`,`windows`,`macos`,`linux`,`all`\n  - `get failures` this will attempt to get the latest failures for all of the target pipelines\n  - `remind me in <value> <units>` this will create a reminder that will be posted after the specified duration\n    \\<value\\> is a number, and \\<units\\> can be `minutes`, `hours`, or `days` (singular or plural)\n",
      "created_at": "2019-07-12T21:47:48Z",
      "updated_at": "2019-07-12T21:47:48Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> I suggest to move most of the code in PowerShell-Native\r\n\r\nI spoke to @SteveL-MSFT and for now I think the preference is to keep this here to keep things relatively simple. I would prefer to implement this all natively as well (ideally before loading/running .NET at all) but that poses complexity and maintenance challenges. Adding this functionality to PowerShell-Native is something that requires more investigation, but I think the hope is that we will eventually be able to do away with PowerShell-Native as well.",
      "created_at": "2019-07-15T06:25:00Z",
      "updated_at": "2019-07-15T06:25:00Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> Also we could use the here-docs to run bash http://tldp.org/LDP/abs/html/here-docs.html without escaping arguments.\r\n\r\nThat's a nice idea, although we only have to escape a single argument to `exec` and it sits between other arguments, making that a challenge. For now, the escaping logic is done. We can change it later if there are advantages to that.",
      "created_at": "2019-07-15T06:26:49Z",
      "updated_at": "2019-07-15T06:26:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Perhaps worth it to automatically publish PowerShell-Native prerelease nuget package versions. In the case we could easily reference its in the repo and test with CIs.\r\nI think we still have time before 7.0 release \"to make things right\".",
      "created_at": "2019-07-15T07:07:04Z",
      "updated_at": "2019-07-15T07:07:13Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "@adityapatwardhan any thoughts on @iSazonov's proposal?\r\n@rjmholt new commandline parameter needs doc updates; please open an issue in doc repo and link it here in PR summary under 'Documentation needed'.",
      "created_at": "2019-07-25T21:10:28Z",
      "updated_at": "2019-07-25T21:10:28Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@anmenaga please see https://github.com/MicrosoftDocs/PowerShell-Docs/pull/4528 for docs",
      "created_at": "2019-07-25T22:04:50Z",
      "updated_at": "2019-07-25T22:04:50Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@iSazonov - We do release `Micrsoft.PowerShell.Native` previews when there are changes. Example: https://www.nuget.org/packages/Microsoft.PowerShell.Native/7.0.0-preview.1\r\n\r\n`PowerShell` and `PowerShell-Native` are separated on purpose to reduce build complexity. If there is a need to release `Microsoft.PowerShell.Native` earlier than the next release of `PowerShell` that is possible too.\n\n<blockquote><img src=\"https://github.com/PowerShell/PowerShell/blob/master/assets/Powershell_black_64.png?raw=true\" width=\"48\" align=\"right\"><div><strong><a href=\"https://www.nuget.org/packages/Microsoft.PowerShell.Native/\">Microsoft.PowerShell.Native 7.0.0-preview.1</a></strong></div><div>Native binaries for PowerShell Core</div></blockquote>",
      "created_at": "2019-08-01T21:40:57Z",
      "updated_at": "2019-08-01T21:40:59Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "Considering:\r\n1) long-term plans for PowerShell-Native;\r\n2) important part of this PR is that it adds a required functionality (with not-perfect, but ok-for-now implementation that can be changed later if necessary);\r\n3) there is already 1 approval;\r\nI don't think discussion about moving/not-moving this to PowerShell-Native should be blocking this PR. I plan to merge this in a couple of days unless there are strong objections.\r\n\r\n@rjmholt please fix the `ManagedEntranceStrings.resx` conflict.\r\n",
      "created_at": "2019-08-06T21:03:33Z",
      "updated_at": "2019-08-06T21:03:33Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> please fix the ManagedEntranceStrings.resx conflict.\r\n\r\nDone",
      "created_at": "2019-08-06T22:10:12Z",
      "updated_at": "2019-08-06T22:10:12Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PoshChan please restart static",
      "created_at": "2019-08-06T22:47:45Z",
      "updated_at": "2019-08-06T22:47:45Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT, I do not understand: please restart static\n\nCommands available in this repo for you:\n  - `retry <target>` this will attempt to retry only the failed jobs for the target pipeline\n  - `rebuild <target>` this will perform a complete rebuild of the target pipeline, `rerun` can be used in place of `rebuild`\n    Supported values for \\<target\\> which can be a comma separated list are: `static`,`windows`,`macos`,`linux`,`all`\n  - `get failures` this will attempt to get the latest failures for all of the target pipelines\n  - `remind me in <value> <units>` this will create a reminder that will be posted after the specified duration\n    \\<value\\> is a number, and \\<units\\> can be `minutes`, `hours`, or `days` (singular or plural)\n",
      "created_at": "2019-08-06T22:48:25Z",
      "updated_at": "2019-08-06T22:48:25Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PoshChan please retry static",
      "created_at": "2019-08-06T22:48:39Z",
      "updated_at": "2019-08-06T22:48:39Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT, successfully started retry of `PowerShell-CI-static-analysis`",
      "created_at": "2019-08-06T22:48:50Z",
      "updated_at": "2019-08-06T22:48:50Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PoshChan please retry static",
      "created_at": "2019-08-07T15:50:21Z",
      "updated_at": "2019-08-07T15:50:21Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT, successfully started retry of `PowerShell-CI-static-analysis`",
      "created_at": "2019-08-07T15:51:11Z",
      "updated_at": "2019-08-07T15:51:11Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Spoke to @daxian-dbw offline about p/invokes vs native code. We agreed that the current implementation is good enough for now and we want to investigate moving the underlying logic into PSNative for performance benefits",
      "created_at": "2019-08-08T17:34:28Z",
      "updated_at": "2019-08-08T17:34:28Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> Spoke to @daxian-dbw offline about p/invokes vs native code. We agreed that the current implementation is good enough for now and we want to investigate moving the underlying logic into PSNative for performance benefits\r\n\r\nYes, talked with Rob on this. P/Invoke itself is expensive, plus Jitting the P/Invoke code possibly will be more expensive than non-P/Invoke code.\r\nBy moving some of the P/Invoke heavy code (e.g. the code to get the first byte of the executable name and the executable path) to native code and simply calling one P/Invoke from managed code to get what we need would be more efficient.\r\nBut that can happen in a follow-up PR, not this one.\r\n\r\nSee [PInvoke Performance Considerations](https://docs.microsoft.com/en-us/cpp/dotnet/calling-native-functions-from-managed-code?view=vs-2019#performance-considerations):\r\n> PInvoke has an overhead of between 10 and 30 x86 instructions per call. In addition to this fixed cost, marshaling creates additional overhead. There is no marshaling cost between blittable types that have the same representation in managed and unmanaged code. For example, there is no cost to translate between int and Int32.\r\n>\r\n> For better performance, have fewer PInvoke calls that marshal as much data as possible, instead of more calls that marshal less data per call.",
      "created_at": "2019-08-08T19:29:29Z",
      "updated_at": "2019-08-08T19:34:31Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "I've amended the logic here to only recognise `-Login` when it's the first argument. This is so we don't have to reimplement all of argument parsing at this early stage. When we work on a native implementation, we can have a look at whether improving that is feasible.",
      "created_at": "2019-08-08T21:12:08Z",
      "updated_at": "2019-08-08T21:12:08Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@PoshChan please retry static",
      "created_at": "2019-08-08T22:06:42Z",
      "updated_at": "2019-08-08T22:06:42Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw, successfully started retry of `PowerShell-CI-static-analysis`",
      "created_at": "2019-08-08T22:07:03Z",
      "updated_at": "2019-08-08T22:07:03Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT Can you please take another look to see if you are OK with the updates?",
      "created_at": "2019-08-14T18:11:59Z",
      "updated_at": "2019-08-14T18:11:59Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "No blocking issues; merging so it would get into next release.",
      "created_at": "2019-08-14T20:18:33Z",
      "updated_at": "2019-08-14T20:18:33Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.0.0-preview.3` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.3)\n",
      "created_at": "2019-08-20T22:37:13Z",
      "updated_at": "2019-08-20T22:37:13Z"
    }
  ],
  "created_at": "2019-07-02T23:18:10Z",
  "number": 10050,
  "state": "closed",
  "title": "pwsh -Login support",
  "updated_at": "2019-08-20T22:37:14Z"
}