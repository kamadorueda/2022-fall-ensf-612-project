{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4133",
  "author": "mklement0",
  "body": "Steps to reproduce\r\n------------------\r\n\r\n```powershell\r\nSplit-Path -Parent /\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nThe empty string (current behavior on Windows), but, ideally, `/` - see #4131\r\n\r\nActual behavior\r\n---------------\r\n\r\nAn error occurs.\r\n\r\n```none\r\nSplit-Path : Cannot process argument because the value of argument \"path\" is not valid. Change the value of the \"path\" argument and run the operation again.\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta.3 on macOS 10.12.5\r\nPowerShell Core v6.0.0-beta.3 on Ubuntu 16.04.1 LTS\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT: A general question re labeling: \r\n\r\nGiven that macOS is affected too, is label `OS-Linux` sufficient?\r\n\r\nWhen I refer to \"Unix\" in my issues, I mean both macOS and Linux (all Unix-based platforms).\r\n\r\nIs there a label that covers both?\r\n",
      "created_at": "2017-06-28T18:26:39Z",
      "updated_at": "2017-06-28T18:26:39Z"
    },
    {
      "author": "thorstenkampe",
      "author_association": "NONE",
      "body": "Not just `-Path / -Parent`  is broken but also `-Leaf`:  `Split-Path -Path / -Leaf` returns an empty string instead of `/`.",
      "created_at": "2018-02-12T18:33:17Z",
      "updated_at": "2018-02-12T18:33:58Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "So on Windows, `split-path c:\\ -parent` returns empty string and `split-path c:\\ -leaf` returns `c:\\`.  If we want symmetry, then on Unix-based systems, `split-path / -parent` would be empty string and `split-path / -leaf` should be `/`, right?",
      "created_at": "2018-02-12T18:48:43Z",
      "updated_at": "2018-02-12T18:48:43Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "That `Split-Path -Leaf /` should return `/` indeed does make sense, and is in line with `basename /`, as [per POSIX](http://pubs.opengroup.org/onlinepubs/9699919799/utilities/basename.html).\r\n\r\nAs for Windows: `Split-Path -Leaf c:\\` looks broken.\r\nThe _drive spec_ should definitely not be part of the return value, given that the intent is to return a filesystem item's _name_, so, analogously, `\\` would seem more appropriate.\r\n\r\n(There will forever be confusion stemming from the root directory having no name of its own and instead being identified by the _path separator_.)\r\n",
      "created_at": "2018-02-12T19:41:06Z",
      "updated_at": "2018-02-12T19:59:31Z"
    },
    {
      "author": "thorstenkampe",
      "author_association": "NONE",
      "body": "@SteveL-MSFT If you want consistency: yes. But please be aware that other implementations handle it differently or exact oppositely:\r\n```bash\r\n# Linux GNU coreutils return `/` for parent and leaf\r\npwsh> dirname /\r\n/\r\npwsh> basename /\r\n/\r\n```\r\n```python\r\n# Python returns '/' with or without drive for parent and empty string for leaf\r\n>>> pathlib.Path('F:\\\\').parent\r\nWindowsPath('F:/')\r\n>>> pathlib.Path('F:\\\\').name\r\n''\r\n\r\n>>> pathlib.Path('/').parent\r\nPosixPath('/')\r\n>>> pathlib.Path('/').name\r\n''\r\n```",
      "created_at": "2018-02-12T19:49:59Z",
      "updated_at": "2018-02-12T19:49:59Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@thorstenkampe: \r\n\r\n(I got confused in my previous post (`dirname` vs. `basename`) - now corrected.)\r\n\r\nIt makes more sense for PowerShell to follow the example of other _shells_.\r\n\r\nYour Unix-utility-based examples - `dirname /` (equivalent of `Split-Path [-Parent] /`) and `basename /` (equivalent of `Split-Path -Leaf /`) go beyond just _implementations_ - such as the GNU coreutil implementations you reference - they are actually codified in the POSIX _standard_.\r\n\r\nSo, yes, from that perspective, _both_:\r\n\r\n* `Split-Path -Parent /` a.k.a. `Split-Path /`\r\n\r\n* and `Split-Path -Leaf /`\r\n\r\n should return `/`.\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-02-12T20:07:52Z",
      "updated_at": "2018-02-12T20:07:52Z"
    },
    {
      "author": "thorstenkampe",
      "author_association": "NONE",
      "body": "@mklement0 I agree.\r\n\r\nBut please acknowledge that other cross platform high level programming languages like Python have chosen a different route. Python's `pathlib` is a recent implementation So it's not like that was a rookie mistake. They know what they were doing. Would be interesting to find their reasoning for doing so.",
      "created_at": "2018-02-12T21:23:35Z",
      "updated_at": "2018-02-12T21:23:59Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I think it's fine to not have symmetry for the sake of symmetry.  On Unix, if the expectation is that the `-Leaf` and `-Parent` of / is `/`, then I think that would be ok and just documented.  On Windows, I don't think we'll change it as it would be a breaking change w/o clear benefit to warrant the change.  Will have @PowerShell/powershell-committee review.",
      "created_at": "2018-02-12T22:10:38Z",
      "updated_at": "2018-02-12T22:10:38Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this.  Expectation is that scripts using the current Windows PowerShell behavior to parse a file path would need to special case Unix if we have non-symmetric behavior.  For example:\r\n\r\n```powershell\r\n$path = \"/\"; while ($path -ne \"\") { $path = split-path -parent $path;$path }\r\n```\r\n\r\nThis loops forever since the ending state is never hit.  To support the same scripts working on Windows and Unix, we need to fix the behavior on Unix so that:\r\n\r\nsplit-path -leaf / => returns /\r\nsplit-path -parent / => returns \"\"\r\n",
      "created_at": "2018-03-01T00:04:29Z",
      "updated_at": "2018-03-01T00:04:29Z"
    }
  ],
  "created_at": "2017-06-28T16:22:03Z",
  "number": 4133,
  "state": "open",
  "title": "Split-Path -Parent / currently broken on Unix",
  "updated_at": "2018-03-01T00:04:36Z"
}