{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9098",
  "author": "dmitriyse",
  "body": "# Summary of the new feature/enhancement\r\n## Motivation: \r\n1) Separated package/module environments for different working folders.\r\n2) Automated install of all modules requested by artifacts in a working folder (analog to package.json)\r\n## Current state\r\nCurrently we have only \"AllUsers\" and \"CurrentUser\" installation scopes.\r\n## Typical scenario:\r\nFor example you have some repository with the collection of powershell scripts which service this repository. These PowerShell scripts are requires big amount of modules.\r\nTypical expected scenario (almost the same as with npm and package.json):\r\n1) Clone repository with the powershell staff \r\n2) Install required PowerShell modules to subfolder \"ps_modules\"  (by executing Install-Dependencies command at the working direcotry.\r\n3) Work with repo including execution of repo-local scripts which in turn uses locally installed modules from \"ps_modules\"\r\n4) Delete working directory\r\n5) Default folders for \"CurrentUser\" and \"AllUsers\" scopes do not contains short-term usage modules\r\n\r\n# Proposed technical implementation details\r\n## `$PSCurrentModulePath` variable\r\n`$PSCurrentModulePath` - a read-only variable that chenges behavior of all PowerShellGet commands.\r\nOnce this variable is not `$null`, Import-Module searches modules from `$PSCurrentModulePath/ps_modules` first.\r\n## `Select-CurrentModule` cmdlet\r\n1) if `$PSCurrentModulePath` is not `$null` than the command unloads all modules that already loaded from the `$PSCurrentModulePath`\r\n2) Switches `$PSCurrentModulePath` to the new location\r\n3) Auto-load modules from the `$PSCurrentModulePath/ps_modules` when commands from `$PSCurrentModulePath/ps_modules` are invoked\r\n## `Install-Module` defaults and and `CurrentModule` scope\r\n1) The new `CurrentModule` scope changes behavior of the `Install-Module` cmdlet and forces it to install module to `$PSCurrentModulePath/ps_modules`\r\n2) if `$PSCurrentModulePath` is not $null then `Install-Module` uses 'CurrentModule` scope by default\r\n## `Install-Module` and additional syntax for `package.psm1` files\r\n1) `package.psm1` should contain metadata with it module requirements like `dependencies` section in an `package.json`\r\n2) When `$PSCurrentModulePath` is not `$null` then Install-Module beside installation of module to `$PSCurrentModulePath/ps_modules` also adds record to the metadat in the `$PSCurrentModulePath/package.psm1`\r\n## `Install-Dependencies` cmdlet\r\nif `$PSCurrentModulePath` is not `$null` than this command should download and install dependencies from the `$PSCurrentModulePath/package.psm1` to the `$PSCurrentModulePath/ps_modules`\r\n\r\n# Alternative approach\r\nUtilize npm infrastructure with publishing powershell modules as npm packages and implement the current \"node_modules\" provider for the PowerShellGet.",
  "closed_at": "2019-03-16T11:56:34Z",
  "comments": [
    {
      "author": "GeeLaw",
      "author_association": "NONE",
      "body": "Have you tried `Save-Module`/`Import-Module`?\r\n\r\n```powershell\r\nFunction Import-ModuleForDirectory\r\n{\r\n    Get-ChildItem -LiteralPath .\\ps_modules\\ -Filter *.psm1 -File -Recurse -Force -ErrorAction Ignore |\r\n        Import-Module;\r\n}\r\n\r\nFunction Get-ModuleForDirectory\r\n{\r\n    Get-Content .\\package.json | ConvertFrom-Json | Write-Output |\r\n        ForEach-Object {\r\n            Save-Module $_.Name -Path .\\ps_modules\\ # blah blah blah\r\n        };\r\n}\r\n```\r\n\r\nAlso, I'm not sure how `node_modules` work. One problem I find unintuitive: What if you `cd`-ed out of the current folder? Do the modules get automatically unloaded?",
      "created_at": "2019-03-15T03:03:15Z",
      "updated_at": "2019-03-15T03:03:15Z"
    },
    {
      "author": "dmitriyse",
      "author_association": "NONE",
      "body": "Yes, I know the current capabilities of PowerShell. \r\nBut it misses two good conceptions from its competitors (Node.Js, Python):\r\n1) Virtual Environments\r\n2) Dependency list to install automatically into virtual environments.\r\n\r\nI am working on some solution that solves these pitfalls (after some time I will describe it here).\r\nAlso, you can inspect this solution http://ramblingcookiemonster.github.io/PSDepend",
      "created_at": "2019-03-15T03:13:32Z",
      "updated_at": "2019-03-15T03:13:32Z"
    },
    {
      "author": "GeeLaw",
      "author_association": "NONE",
      "body": "I read your solutions. There're a few wheels already there.\r\n\r\n- You could write a module manifest for your repository to list all the modules you need as the dependencies. It's `requirements.txt` in a different format.\r\n- You can then use `Find-Module -IncludeDependencies`/`Save-Module` to download them into your directory (recursing on the dependencies).\r\n- Set `$env:PSModulePath` environment variable changes the order of module searching. This is the wheel for your proposed `$PSCurrentModulePath`.\r\n- You can then `Import-Module` the repo's module manifest. It will honor the priority set by `$env:PSModulePath`.\r\n\r\nThe only thing that's not here is the ability to use specific GitHub repos as the source of modules. This, however, could be solved easily by making that repo **a submodule of your git repo**.",
      "created_at": "2019-03-15T03:27:11Z",
      "updated_at": "2019-03-15T03:29:15Z"
    },
    {
      "author": "dmitriyse",
      "author_association": "NONE",
      "body": "Yes, there are enough existing PS features to build \"PowerShell Virtual Environments\" as a Module.\r\nThere is a number of some solution but they are not widely used and actively supported.\r\nI think PowerShell requires some \"standard\" solution. \r\nI will update this proposal with the working prototype after a week or two.\r\nP.S.\r\n@GeeLaw, thank you for pieces of advice, I exactly used `Find-Module -IncludeDependencies`/`Save-Module` + `$end:PSModulePath`",
      "created_at": "2019-03-15T03:39:03Z",
      "updated_at": "2019-03-15T03:39:03Z"
    },
    {
      "author": "dmitriyse",
      "author_association": "NONE",
      "body": "In general, PowerShell requires more efforts to bring to itself best practices and features from other scripting languages: Python, Node.js. Now PowerShell resides also on the same territory (general cross-platform scripting).\r\n\r\nFor example, some tool to filter files over directories and subdirectories, Like `Gulp.src()` include/exclude patterns.\r\n\r\nGet-ChildItem is very limited and ugly compared to simple and powerfull Gulp.src.\r\n",
      "created_at": "2019-03-15T03:44:21Z",
      "updated_at": "2019-03-15T03:45:47Z"
    },
    {
      "author": "GeeLaw",
      "author_association": "NONE",
      "body": "I don't fully understand the benefit of making this part of PowerShell instead of, what you already mentioned, \"a module\". I think publishing this as a module on PSGallery/GitHub and advocating it in the community is a better idea.\r\n\r\nMaking this package manager part of PowerShell **couples** the package manager with PowerShell. The package manager is updated only when PowerShell itself is updated. Making this a module available from PSGallery/GitHub allows faster iteration of the package manager, e.g., adding more sources of packages.\r\n\r\nIf you compare this to `pip`, you have to install Python per-user to update `pip` without administrator privilege. (I don't know whether you could install a per-user version of pip if you installed Python machine-wide, because I never installed it machine-wide...) However, I don't think people update modules that come with PowerShell.",
      "created_at": "2019-03-15T04:01:36Z",
      "updated_at": "2019-03-15T04:01:36Z"
    },
    {
      "author": "dmitriyse",
      "author_association": "NONE",
      "body": ">I don't fully understand the benefit of making this part of PowerShell instead of, what you already mentioned, \"a module\". \r\n\r\nIt was my first attempt to solve the problem. Before I found `$env:PSModulePath` and become familar with all existing functions.\r\nI totally agree with you, It would be better to just create new module with additional features.\r\n\r\nSome additional function would be great to see for example `Save-Modules -IncludeDependencies` wich inputs \"Name, Version\" pairs. We have https://github.com/PowerShell/PowerShellGet for that kind of requrests.\r\n\r\nI going to close this issue soon with transfer discussion to another repos/issues.",
      "created_at": "2019-03-15T04:17:05Z",
      "updated_at": "2019-03-15T04:17:05Z"
    },
    {
      "author": "GeeLaw",
      "author_association": "NONE",
      "body": "+1 for `Save-Module -IncludeDependencies`. I was surprised it didn't exist in the first place.",
      "created_at": "2019-03-15T04:44:44Z",
      "updated_at": "2019-03-15T04:44:44Z"
    },
    {
      "author": "dmitriyse",
      "author_association": "NONE",
      "body": "Good News. `Save-Module` already saves all dependencies to a target path.\r\n",
      "created_at": "2019-03-16T11:53:45Z",
      "updated_at": "2019-03-16T11:53:45Z"
    },
    {
      "author": "dmitriyse",
      "author_association": "NONE",
      "body": "This proposal should be implemented as an additional module.\r\nI have created the first usable version of the proposed feature:\r\nhttps://www.powershellgallery.com/packages/PSSolutions\r\n\r\nThis discussion should be transferred to this repo https://github.com/ClrCoder/PSSolutions",
      "created_at": "2019-03-16T11:56:34Z",
      "updated_at": "2019-03-16T11:56:34Z"
    }
  ],
  "created_at": "2019-03-09T06:57:55Z",
  "labels": [
    "Issue-Enhancement",
    "Resolution-External"
  ],
  "number": 9098,
  "state": "closed",
  "title": "Feature Request \"ps_modules\" as full analogy for \"node_modules\" and package.psm1 (analogy for package.json)",
  "updated_at": "2019-04-02T06:21:49Z"
}