{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5148",
  "author": "RickFlist",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://github.com/PowerShell/PowerShell/blob/master/docs/KNOWNISSUES.md).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\nSave this to a file with a .ps1 extension and run it\r\n```powershell\r\nfunction Test-DebugMessage\r\n{\r\n     [CmdletBinding()]\r\n     [OutputType()]\r\n\r\n     param ()\r\n\r\n     process\r\n     {\r\n         Write-Debug ( 'Test Message' )\r\n     }\r\n}\r\n\r\nTest-DebugMessage -Debug\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nThe following message is emitted \r\n```none\r\nDEBUG: Test Message\r\n```\r\n\r\nActual behavior\r\n---------------\r\nPrompted to continue for every Write-Debug statement. A for \"Yes to All\" does nothing\r\n```none\r\nDEBUG: Test Message\r\n\r\nConfirm\r\nContinue with this operation?\r\n[Y] Yes  [A] Yes to All  [H] Halt Command  [S] Suspend  [?] Help (default is \"Y\"): a\r\n\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable.GetEnumerator() | ForEach-Object { Write-Host ('{0,26} : {1,-20}' -f $PSItem.Key,($PSItem.Value -join ', ') ) }\r\n                 PSVersion : 5.1.15063.674\r\n                 PSEdition : Desktop\r\n      PSCompatibleVersions : 1.0, 2.0, 3.0, 4.0, 5.0, 5.1.15063.674\r\n              BuildVersion : 10.0.15063.674\r\n                CLRVersion : 4.0.30319.42000\r\n         WSManStackVersion : 3.0\r\n PSRemotingProtocolVersion : 2.3\r\n      SerializationVersion : 1.1.0.1\r\n```\r\n",
  "closed_at": "2017-10-17T21:48:02Z",
  "comments": [
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I believe that is by deisgn. you can instead do the following:\r\n\r\n```powershell\r\nfunction Test-DebugMessage {\r\n     [CmdletBinding()]\r\n     [OutputType()]\r\n     param ()\r\n     process\r\n     {\r\n         Write-Debug 'Test Message'\r\n     }\r\n}\r\n$DebugPreference = 'Continue'\r\nTest-DebugMessage \r\n```\r\n\r\nAnd the debug messages will appear without stopping and prompting.\r\n\r\nsee [about_CommonParamters](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_commonparameters?view=powershell-5.1) and [about_preference_variables](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_preference_variables?view=powershell-5.1)",
      "created_at": "2017-10-17T21:02:33Z",
      "updated_at": "2017-10-17T21:02:33Z"
    },
    {
      "author": "RickFlist",
      "author_association": "NONE",
      "body": "Okay... Why? What use case demands that all script execution stop when emitting debug messages? How does that use-case compare with the use case of being able to use -Debug without script execution being interrupted?  Why doesn't -Verbose cause the same behavior?\r\n\r\nThere is no way to tell if this is actually a bug or not, so I don't know if I need to continue harping here or take it to User Voice",
      "created_at": "2017-10-17T21:12:05Z",
      "updated_at": "2017-10-17T21:13:00Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "To distinguish it from `write-verbose`. If it acted exactly as `write-verbose` what purpose would it serve? Generally you wouldn't keep `write-debug` statements in code outside of development. You only put it in development to code so you can perform suspend.\r\n\r\n```powershell\r\nfunction Test-DebugMessage {\r\n     [CmdletBinding()]\r\n     [OutputType()]\r\n     param ()\r\n     process\r\n     {\r\n         $a = 5\r\n         Write-Debug 'First a'\r\n         $a = 10\r\n         Write-Debug 'Second a'\r\n     }\r\n}\r\nTest-DebugMessage -Debug\r\n```\r\n\r\nwhen it prompts choose suspend then run `$a` and see that it is `5`. run `exit` and chose the option to continue. At the next prompt choose suspend and run `$a` and see that it is `10`. run `exit` and then chose the option to continue. This provides an easy way to break into the debugger and check the state of or manipulat variables in your code for the purposes of debugging.\r\n\r\nIf you just want information on the screen you have `Write-Verbose` and `Write-Information`.",
      "created_at": "2017-10-17T21:30:00Z",
      "updated_at": "2017-10-17T21:30:00Z"
    },
    {
      "author": "RickFlist",
      "author_association": "NONE",
      "body": "Oh also, can you define \"By design\"?  When I hear \"by design\" I think there is a specification somewhere that says \"when you use -Debug we're going to inquire for every single message emission\". Is that the case ? What is \"By design\"?",
      "created_at": "2017-10-17T21:31:24Z",
      "updated_at": "2017-10-17T21:31:24Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@RickFlist I mean it is probably by design because it is officially documented behavior. That's usually a good indication of the design. If the behavior differed from the documented behavior, that would like not be by design or possible a documentation issue.",
      "created_at": "2017-10-17T21:33:09Z",
      "updated_at": "2017-10-17T21:33:09Z"
    },
    {
      "author": "RickFlist",
      "author_association": "NONE",
      "body": "Oh. Yes, it's usually an excellent indicator. Whoops. :\\\r\n\r\nThe reasoning is actually there as well, which is awesome. \r\n\"The Debug parameter overrides the value of the $DebugPreference variable for the current command, setting the value of $DebugPreference to Inquire. Because the default value of the $DebugPreference variable is SilentlyContinue, debugging messages are not displayed by default.\"\r\n\r\nAny information as to why this doesn't occur with -Verbose? Ostensibly they would work the same way but I don't get prompted with -Verbose. Just curious",
      "created_at": "2017-10-17T21:36:47Z",
      "updated_at": "2017-10-17T21:36:47Z"
    },
    {
      "author": "RickFlist",
      "author_association": "NONE",
      "body": "And what about the fact that \"A\" for \"Yes to All\" doesn't actually work? e.g. if I have multiple write-debug statements and hit \"A\" for the first one, I am still prompted for the second one. By design or bug? If the latter I will submit a new bug.",
      "created_at": "2017-10-17T21:38:11Z",
      "updated_at": "2017-10-17T21:38:11Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "That's also `by design`. the \"yes to all\" works with this usage:\r\n\r\n```powershell\r\nfunction Test-DebugMessage\r\n{\r\n     [CmdletBinding()]\r\n     [OutputType()]\r\n     param ()\r\n     process\r\n     {\r\n         1,2,3,4 | Write-Debug \r\n     }\r\n}\r\n```\r\n\r\nIt's not for all calls to `Write-Debug`, just for all objects passed to the current call to `Write-Debug`.",
      "created_at": "2017-10-17T21:43:45Z",
      "updated_at": "2017-10-17T21:43:45Z"
    },
    {
      "author": "RickFlist",
      "author_association": "NONE",
      "body": "I'll open up a couple User Voice request. Danke. ",
      "created_at": "2017-10-17T21:47:16Z",
      "updated_at": "2017-10-17T21:47:16Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Hey @RickFlist, just FYI, my PR that fixes this behavior was just merged, so in an upcoming release -Debug will simply enable debug message output without any of the prompting that was there before.",
      "created_at": "2018-11-30T17:22:23Z",
      "updated_at": "2018-11-30T17:22:23Z"
    },
    {
      "author": "RobinWPollard",
      "author_association": "NONE",
      "body": "You can switch it to output the debug, but not pause ...\r\n```powershell\r\nif ($DebugPreference -eq \"Inquire\") {\r\n    $DebugPreference = 'Continue'\r\n    Write-Debug \"We are running with Debug active. Expect lots of logging\"\r\n}\r\n```",
      "created_at": "2019-06-07T12:41:52Z",
      "updated_at": "2019-06-07T12:42:03Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@RobinWPollard For older releases, that workaround works. In PowerShell 6.2 and later though, there is no need for that workaround.",
      "created_at": "2019-06-07T14:32:15Z",
      "updated_at": "2019-06-07T14:32:15Z"
    },
    {
      "author": "HQJaTu",
      "author_association": "NONE",
      "body": "Thanks for that @KirkMunro.\r\nSince the pre 6.2 behaviour was very annoying, I simply upgraded to 6.2.1 and continued working with much less friction.",
      "created_at": "2019-06-20T06:12:05Z",
      "updated_at": "2019-06-20T06:12:05Z"
    }
  ],
  "created_at": "2017-10-17T20:17:27Z",
  "number": 5148,
  "state": "closed",
  "title": "Write-Debug Prompts for Confirmation Stopping All Script Execution When Using -Debug For Some Reason",
  "updated_at": "2019-06-20T06:12:05Z"
}