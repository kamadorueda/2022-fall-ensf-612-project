{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16306",
  "author": "IISResetMe",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nWildcardPattern.Escape() does not escape `` ` ``, and as a result it's unreliable for escaping input for use in wildcard comparisons:\r\n\r\nDefine a string literal containing a single backtick character:\r\n\r\n    $string = 'abc`def'\r\n\r\nCreate an escaped copy of the string value:\r\n\r\n    $escaped = [WildcardPattern]::Escape($string)\r\n\r\nPerform wildcard comparison and observe that it does not yield `$true` as expected:\r\n\r\n    $string -like $escaped\r\n\r\n(That is: `[WildcardPattern]::Escape($string)` should produce a string value equivalent to ```'abc``def'```, not return it as-is)\n\n### Expected behavior\n\n```console\nPS> $string -like $escaped\r\nTrue\n```\n\n\n### Actual behavior\n\n```console\nPS> $string -like $escaped\r\nFalse\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.4\r\nPSEdition                      Core\r\nGitCommitId                    7.1.4\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "lukeb1961",
      "author_association": "NONE",
      "body": "Wildcards in LIKE meant the DOS wildcard chars.  Things like ?,*,[]  right?  I doubt back-tick is considered a wildcard needing escaping.",
      "created_at": "2021-10-27T06:50:50Z",
      "updated_at": "2021-10-27T06:51:13Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "I'm aware that `` ` `` isn't a wildcard char in DOS, but PowerShell isn't DOS. \r\n\r\nIf it doesn't need escaping, then you'd expect `` 'a`b' -like 'a`b' `` to work, no?",
      "created_at": "2021-10-27T12:39:04Z",
      "updated_at": "2021-10-27T12:39:04Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Yeah it means \"treat the next character as a literal\" regardless of whether the next character would otherwise be treated as a literal or a wildcard.",
      "created_at": "2021-10-27T12:53:49Z",
      "updated_at": "2021-10-27T12:53:49Z"
    },
    {
      "author": "lukeb1961",
      "author_association": "NONE",
      "body": "right. but my feeling is that it's not the [WildcardPattern] method at fault, but the -LIKE operation.  It is broken.",
      "created_at": "2021-10-27T23:13:14Z",
      "updated_at": "2021-10-27T23:13:14Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I mean... both WildcardPattern.Escape() and -like are wildcard methods (`-like` maps to `WildcardPattern.IsMatch()` from memory). So while one is clearly broken, it's still WildcardPattern that's broken, either way. ",
      "created_at": "2021-10-28T12:26:53Z",
      "updated_at": "2021-10-28T12:26:53Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "And you can't really change the wildcard behavior without it being a rather large breaking change.  Fixing the escape method should be bucket 3 I think.",
      "created_at": "2021-10-28T14:53:07Z",
      "updated_at": "2021-10-28T14:53:07Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "/cc @bpayette ",
      "created_at": "2021-10-28T22:13:54Z",
      "updated_at": "2021-10-28T22:13:54Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Engine WG discussed this today, we spent a little time digging into the code to try to figure out what's going on. We think the crux of the issue is likely to be that we're doing essentially the same check two slightly different ways, depending on which API you're calling for WildcardPattern.\r\n\r\nThe first is here (note that backtick is included here):\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/4ae539fed46b7403e95f65e605cef645b207642f/src/System.Management.Automation/engine/regex.cs#L64\r\n\r\nAnd the second is here:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/4ae539fed46b7403e95f65e605cef645b207642f/src/System.Management.Automation/engine/regex.cs#L401-L404\r\n\r\nThe latter is used by `Escape()`, along with a few other places, while the former is used when constructing the pattern object. There needs to be more investigation and testing, but it looks like the issue here may be caused by that discrepancy.",
      "created_at": "2021-10-28T23:01:43Z",
      "updated_at": "2021-10-28T23:01:43Z"
    }
  ],
  "created_at": "2021-10-26T15:30:50Z",
  "labels": [
    "Issue-Question",
    "WG-Engine",
    "Needs-Investigation"
  ],
  "number": 16306,
  "state": "open",
  "title": "WildcardPattern.Escape() does not escape lone backticks correctly",
  "updated_at": "2021-10-29T03:22:06Z"
}