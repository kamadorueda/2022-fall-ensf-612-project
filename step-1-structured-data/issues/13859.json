{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13859",
  "author": "BillyONeal",
  "body": "Hi there folks! We are experiencing a failure that seems to occur only in some locales on PowerShell 7.0.3, but we have similar failures at least as far back as PowerShell 5.1.\r\n\r\nEffectively, something blows up while PowerShell is starting (in `AppDomain.Setup`) which tries to throw an exception, which needs an `AppDomain` for the exception type, which fails again, etc.\r\n\r\nWe aren't sure if this is actually a PowerShell bug or something that might be .NET or .NET Core's fault, but we know it isn't getting to our script, that it only occurs in some locales, and none of us have been able to repro the problem ourselves. Has anyone on the PowerShell team seen similar call stacks and/or do you all have further troubleshooting ideas?\r\n\r\nThanks!\r\n\r\nSee https://github.com/microsoft/vcpkg/issues/12849\r\n\r\n```\r\nFailFast:\r\nInfinite recursion during resource lookup within System.Private.CoreLib. This may be a bug in System.Private.CoreLib, or potentially in certain extensibility points such as assembly resolve events or CultureInfo names. Resource name: Arg_AccessViolationException\r\n\r\nat System.Environment.FailFast(System.String)\r\nat System.SR.InternalGetResourceString(System.String)\r\nat System.SR.GetResourceString(System.String, System.String)\r\nat System.AccessViolationException..ctor()\r\nat System.SpanHelpers.IndexOf(Char ByRef, Char, Int32)\r\nat System.Globalization.CultureData.InitCultureData()\r\nat System.Globalization.CultureData.CreateCultureData(System.String, Boolean)\r\nat System.Globalization.CultureData.GetCultureData(System.String, Boolean)\r\nat System.Globalization.CultureInfo.InitializeFromName(System.String, Boolean)\r\nat System.Globalization.CultureInfo..ctor(System.String, Boolean)\r\nat System.Globalization.CultureInfo.GetCultureInfoHelper(Int32, System.String, System.String)\r\nat System.Globalization.CultureInfo.GetCultureInfo(System.String)\r\nat System.Resources.ManifestBasedResourceGroveler.GetNeutralResourcesLanguage(System.Reflection.Assembly, System.Resources.UltimateResourceFallbackLocation ByRef)\r\nat System.Resources.ResourceManager.CommonAssemblyInit()\r\nat System.Resources.ResourceManager..ctor(System.Type)\r\nat System.SR.InternalGetResourceString(System.String)\r\nat System.SR.GetResourceString(System.String, System.String)\r\nat System.AccessViolationException..ctor()\r\nat System.SpanHelpers.SequenceEqual(Byte ByRef, Byte ByRef, UInt32)\r\nat System.String.Equals(System.String, System.String)\r\nat System.AppDomain.Setup(System.Object)\r\nFailFast:\r\nInfinite recursion during resource lookup within System.Private.CoreLib. This may be a bug in System.Private.CoreLib, or potentially in certain extensibility points such as assembly resolve events or CultureInfo names. Resource name: Arg_AccessViolationException\r\n\r\nat System.Environment.FailFast(System.String)\r\nat System.SR.InternalGetResourceString(System.String)\r\nat System.SR.GetResourceString(System.String, System.String)\r\nat System.AccessViolationException..ctor()\r\nat System.SpanHelpers.IndexOf(Char ByRef, Char, Int32)\r\nat System.Globalization.CultureData.InitCultureData()\r\nat System.Globalization.CultureData.CreateCultureData(System.String, Boolean)\r\nat System.Globalization.CultureData.GetCultureData(System.String, Boolean)\r\nat System.Globalization.CultureInfo.InitializeFromName(System.String, Boolean)\r\nat System.Globalization.CultureInfo..ctor(System.String, Boolean)\r\nat System.Globalization.CultureInfo.GetCultureInfoHelper(Int32, System.String, System.String)\r\nat System.Globalization.CultureInfo.GetCultureInfo(System.String)\r\nat System.Resources.ManifestBasedResourceGroveler.GetNeutralResourcesLanguage(System.Reflection.Assembly, System.Resources.UltimateResourceFallbackLocation ByRef)\r\nat System.Resources.ResourceManager.CommonAssemblyInit()\r\nat System.Resources.ResourceManager..ctor(System.Type)\r\nat System.SR.InternalGetResourceString(System.String)\r\nat System.SR.GetResourceString(System.String, System.String)\r\nat System.AccessViolationException..ctor()\r\nat System.SpanHelpers.SequenceEqual(Byte ByRef, Byte ByRef, UInt32)\r\nat System.String.Equals(System.String, System.String)\r\nat System.AppDomain.Setup(System.Object)\r\n```\r\n",
  "closed_at": "2020-10-28T00:57:19Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> at System.AppDomain.Setup(System.Object)\r\n\r\nThe API presents only .Net Framework so the callstack comes from **Windows PowerShell**. The repository is only for developing of PowerShell Core. I suggest to continue a discussion in https://github.com/microsoft/vcpkg/issues/12849. If the problem is really with Windows PowerShell @BillyONeal you could communicate with MSFT PowerShell team internally.",
      "created_at": "2020-10-26T06:45:08Z",
      "updated_at": "2020-10-26T06:45:08Z"
    },
    {
      "author": "BillyONeal",
      "author_association": "NONE",
      "body": "Interesting, we attempt to make sure powershell core is used rather than powershell from the system but apparently something somewhere isn't cooperating. Sorry for bothering you :)",
      "created_at": "2020-10-27T02:17:37Z",
      "updated_at": "2020-10-27T02:17:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I set `Resolution-External` until we get a confirmation that the issue can be reproduced on latest PowerShell 7.1 build.",
      "created_at": "2020-10-27T03:39:42Z",
      "updated_at": "2020-10-27T03:39:42Z"
    },
    {
      "author": "BillyONeal",
      "author_association": "NONE",
      "body": "@iSazonov Sounds good, thanks!",
      "created_at": "2020-10-28T00:57:19Z",
      "updated_at": "2020-10-28T00:57:19Z"
    }
  ],
  "created_at": "2020-10-23T19:42:47Z",
  "labels": [
    "Issue-Question",
    "Resolution-External"
  ],
  "number": 13859,
  "state": "closed",
  "title": "Failure to launch PowerShell in some locales",
  "updated_at": "2020-10-28T00:57:20Z"
}