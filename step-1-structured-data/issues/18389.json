{
  "_url": "https://github.com/PowerShell/PowerShell/issues/18389",
  "author": "mklement0",
  "body": "### Summary of the new feature / enhancement\r\n\r\nCurrently, the `System.IComparable` interface is honored when `Sort-Object` compares two input objects.\r\n\r\nIt would be beneficial to also honor the `System.Collections.IStructuralComparable` interface for collection-like types that implement it, notably `[array]`s.\r\n\r\nThat is, the following should work as expected:\r\n\r\n```powershell\r\n# SHOULD be '[10 42]', '[9 42]', but currently isn't, because the input arrays are effectively\r\n# *stringified* and then compared.\r\n(9, 42), (10, 42) |  Sort-Object -Descending | ForEach-Object { \"[$_]\" }\r\n```\r\n\r\nNote that there are collection-like types that implement _both_ interfaces, in which case sorting  does work, notably `System.ValueTuple`:\r\n\r\n```powershell\r\n# OK ->  '[10 42]', '[9 42]'\r\n(9, 42), (10, 42) |  Sort-Object -Descending { [ValueTuple]::Create.Invoke($_) }  | ForEach-Object { \"[$_]\" }\r\n```\r\n\r\n\r\n### Proposed technical implementation details (optional)\r\n\r\nNote that, more generally, the change to support `IStructuralComparable` should be made to whatever engine logic is at the heart of trivalent object comparisons, irrespective of a specific context such as `Sort-Object`  - perhaps [`PSObject.CompareTo()`](https://learn.microsoft.com/en-us/dotnet/api/system.management.automation.psobject.compareto)? \r\n\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2022-10-26T02:05:28Z",
  "number": 18389,
  "state": "open",
  "title": "Sort-Object should use the IStructuralComparable interface, if implemented",
  "updated_at": "2022-10-26T20:36:08Z"
}