{
  "_url": "https://github.com/PowerShell/PowerShell/issues/924",
  "author": "andschwa",
  "body": "Per #833 and #917, we now have PSReadLine available as a default module, with most of its functionality. However, this means that as soon as a PSReadLine function is used, PSReadLine becomes the key handler, and we need to ensure a good user experience by fixing these issues:\n\n``` powershell\n> Set-PSReadlineOption -EditMode Emacs\n```\n- [x] backspace is not handled, instead prints `^?`\n- [ ] should we set the default edit mode to Emacs instead of Windows?\n- [x] ~~Ctrl-D kills window (as an exit signal) when there is nothing to delete (it probably shouldn't)~~\n",
  "closed_at": "2016-05-03T23:59:21Z",
  "comments": [
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@lzybkr Can you test things out and add to this list?\n",
      "created_at": "2016-04-28T18:31:04Z",
      "updated_at": "2016-04-28T18:31:04Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "I think we should add:\n\n``` powershell\nif ($IsLinux -or $IsOSX) {\n    Set-PSReadlineOption -EditMode Emacs\n} else {\n    Set-PSReadlineOption -EditMode Windows\n}\n```\n\nOr just default to Emacs everywhere?\n",
      "created_at": "2016-04-28T18:45:33Z",
      "updated_at": "2016-04-28T18:45:33Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Emacs everywhere will upset a lot of Windows users.\nPlease don't add any code to PSReadline.psm1 if possible - for best performance, that file needs to be a minimal as possible. Find another way to initialize to Emacs mode in C#.\n",
      "created_at": "2016-04-28T19:00:13Z",
      "updated_at": "2016-04-28T19:00:13Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "No, this would be in the PowerShell profile, not the module. We could do it directly in the host too.\n",
      "created_at": "2016-04-28T19:02:13Z",
      "updated_at": "2016-08-17T23:50:09Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "So we have a system wide profile script already? I'm not sure I like that idea either - again because it's not that fast.\n",
      "created_at": "2016-04-28T19:09:59Z",
      "updated_at": "2016-04-28T19:09:59Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Yeah, it's been around for a long time. All it does now is set the prompt.\n\nIs this a speed issue of PowerShell? Most of our cmdlets are written in PowerShell code.\n\nI'm not convinced we should worry about this. If running PowerShell code is inordinately slow, we should make it faster; not avoid using PowerShell.\n",
      "created_at": "2016-04-28T19:13:51Z",
      "updated_at": "2016-04-28T19:13:51Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "You're both right and wrong.  Should make it fast - yes, but it's far easier to move stuff to build time - and almost infinitely faster too (e.g. instead of parsing every time, you don't do parse at all.)\n\nPut another extreme way - it can't be a forcing function to make PowerShell fast enough to be written in PowerShell - we'd be setting ourselves up for failure.\n",
      "created_at": "2016-04-28T19:20:51Z",
      "updated_at": "2016-04-28T19:20:51Z"
    },
    {
      "author": "palladia",
      "author_association": "CONTRIBUTOR",
      "body": "@andschwa I cannot repro the backspace problem.  As for ctrl-d, for emacs-mode, it's bound to function \"DeleteCharOrExit\", which according to its comments \"Delete the character under the cursor, or if the line is empty, exit the process\n",
      "created_at": "2016-04-28T21:15:09Z",
      "updated_at": "2016-04-28T21:15:09Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "``` csharp\n+                HistorySavePath = System.IO.Path.Combine(\n+                                                         Environment.GetEnvironmentVariable(\"HOME\"),\n+                                                         \".psreadline\",\n+                                                         hostName + \"_history.txt\");\n```\n\nThis shouldn't be `~/.psreadline`, but `~/.powershell/PSReadLine/`.\n",
      "created_at": "2016-04-28T23:19:57Z",
      "updated_at": "2016-04-28T23:19:57Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "``` csharp\n+#if CORECLR\n+            if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))\n+            {\n+                Enter = new ConsoleKeyInfo((char)10, ConsoleKey.Enter, false, false, false);\n+            }\n```\n\nThis can't be just a check for Linux, there's OS X too.\n",
      "created_at": "2016-04-28T23:21:32Z",
      "updated_at": "2016-04-28T23:21:32Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "``` csharp\n-using System.Windows.Forms;\n+//using System.Windows.Forms;\n```\n\nI don't think this was supposed to be commented out.\n",
      "created_at": "2016-04-28T23:21:59Z",
      "updated_at": "2016-04-28T23:21:59Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "The major problem I'm seeing is the handling of `Keys.cs`. We cannot assume we know what every `ConsoleKeyInfo` is supposed to be; that's the entire point of using `System.Console` (which reads from termcap for us).\n\nThe reason backspace isn't working for me (but is for you) is because key codes vary among terminal setups, and we cannot account for this ourselves.\n\n.NET Core has already done the [hard work](https://github.com/dotnet/corefx/blob/master/src/System.Console/src/System/ConsolePal.Unix.cs#L610) for dealing with that, and we need PSReadLine to leverage this instead of trying to redo it.\n\nThe original implementation worked for Windows because there were only the one set of key codes. Linux is a different beast.\n",
      "created_at": "2016-04-28T23:35:51Z",
      "updated_at": "2016-04-28T23:35:51Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I'm not sure it works perfectly on Windows either - considering different keyboards - but I haven't had many complaints.  I've always felt like it was wrong, but it worked. ;)\n\nJust checking - but you're seeing different values in KeyChar?  I would hope the Key property is correct.  If I'm correct, we can try normalizing by setting Key to 0 always.\n",
      "created_at": "2016-04-28T23:40:24Z",
      "updated_at": "2016-04-28T23:40:24Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@lzybkr thank you a _million_ for using `ConsoleKeyInfoComparer`; I've fixed it.\n",
      "created_at": "2016-04-29T00:09:01Z",
      "updated_at": "2016-04-29T00:09:01Z"
    },
    {
      "author": "palladia",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr I have no permission to push to PSReadLine repo, so please pull the undo/redo fix from #922 or #934.\n\n#andschwa Not sure where your ConsoleKeyInfoComparer fix is, so I added it to #934.  Please try/review it.\n",
      "created_at": "2016-04-29T16:03:06Z",
      "updated_at": "2016-04-29T16:03:06Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Strange thing on Windows, tab completion:\n\n``` powershell\n~ |-/ Set-PSReadLineOp\nSet-PSReadlineOption  Set-PSReadlineOption\n~ |-/ Set-PSReadLineOp\n```\n\nIt thinks there are two options and so won't complete, but it's the same option.\n",
      "created_at": "2016-04-29T21:33:47Z",
      "updated_at": "2016-04-29T21:33:47Z"
    },
    {
      "author": "palladia",
      "author_association": "CONTRIBUTOR",
      "body": "I've seen this too, but not always.  If you can repro this consistently, let me know.\n",
      "created_at": "2016-04-29T21:35:57Z",
      "updated_at": "2016-04-29T21:35:57Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I've long been annoyed by this, but haven't tracked down what causes it.\n\nThere are 2 different completions - the text we display is not the actual completion.  In some cases I know exactly what's going on, but in this case, I don't.\n",
      "created_at": "2016-04-29T21:37:31Z",
      "updated_at": "2016-04-29T21:37:31Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "And oh - this kind of stuff should go on the public repo.\n",
      "created_at": "2016-04-29T21:37:48Z",
      "updated_at": "2016-04-29T21:37:48Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Tab-completion needs to be file-system agnostic.\n",
      "created_at": "2016-04-30T22:41:08Z",
      "updated_at": "2016-04-30T22:41:08Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "I think MVP is done. I'll get a PR to the public repo issued tomorrow.\n",
      "created_at": "2016-05-03T23:59:21Z",
      "updated_at": "2016-05-03T23:59:21Z"
    }
  ],
  "created_at": "2016-04-28T18:28:35Z",
  "labels": [
    "Usability"
  ],
  "number": 924,
  "state": "closed",
  "title": "PSReadLine MVP",
  "updated_at": "2016-08-17T23:50:09Z"
}