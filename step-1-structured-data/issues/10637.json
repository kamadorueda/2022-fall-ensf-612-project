{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10637",
  "author": "janegilring",
  "body": "# Steps to reproduce\r\n\r\n```powershell\r\nGet-WinEvent\r\n```\r\n# Expected behavior\r\n\r\nA user friendly error message when running from a non-elevated session, stating that elevated permissions is needed.\r\n\r\nI would suggest that the behavior of the default parameter set prompts for required parameters rather than returning cryptic error messages. For example, prompt for the -LogName parameter if no parameters is supplied.\r\n\r\n# Actual behavior\r\n\r\n```none\r\nGet-WinEvent : Could not retrieve information about the Security log. Error: Attempted to perform an unauthorized operation..\r\nAt line:1 char:1\r\n+ Get-WinEvent\r\n+ ~~~~~~~~~~~~\r\n+ CategoryInfo          : NotSpecified: (:) [Get-WinEvent], Exception\r\n+ FullyQualifiedErrorId : LogInfoUnavailable,Microsoft.PowerShell.Commands.GetWinEventCommand\r\n\r\nGet-WinEvent : The data is invalid\r\nAt line:1 char:1\r\n+ Get-WinEvent\r\n+ ~~~~~~~~~~~~\r\n+ CategoryInfo          : NotSpecified: (:) [Get-WinEvent], EventLogInvalidDataException\r\n+ FullyQualifiedErrorId : The data is invalid,Microsoft.PowerShell.Commands.GetWinEventCommand        \r\n```\r\n\r\nThe \"Get-WinEvent : The data is invalid\" error is repeated many times, regardless of running elevated or not.\r\n\r\n# Environment data\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.3\r\nPSEdition                      Core\r\nGitCommitId                    6.2.3\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0                         \r\n```\r\n",
  "closed_at": "2019-10-14T17:02:36Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Really here is two issues.\r\n- Get-WinEvent bad error message if not elevated.\r\n- Get-WinEvent writes something to output even if error was (it is `Get-WinEvent : The data is invalid` case)",
      "created_at": "2019-09-27T15:12:25Z",
      "updated_at": "2019-09-27T15:12:25Z"
    },
    {
      "author": "janegilring",
      "author_association": "NONE",
      "body": "Ok, should I edit this issue to only include the first, and create a separate issue for the latter? ",
      "created_at": "2019-09-27T16:15:20Z",
      "updated_at": "2019-09-27T16:15:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "~~@janegilring You could open new issue for your suggestion~~\r\n> I would suggest that the behavior of the default parameter set prompts for required parameters rather than returning cryptic error messages. For example, prompt for the -LogName parameter if no parameters is supplied.",
      "created_at": "2019-09-27T18:55:21Z",
      "updated_at": "2019-09-30T06:56:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I pulled #10639 to reword the first error message.\r\n",
      "created_at": "2019-09-27T19:16:24Z",
      "updated_at": "2019-09-27T19:16:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Second message \"The data is invalid\" comes from underlying API. Perhaps we generate a huge query. I found that ReadEvent() returns the error if our query contains number of logs more then 256.\r\nI think the design was ok for Windows XP with 3 logs, perhaps it worked on Windows 7 but it has already lost all meaning - now Windows 10 has over 400 logs and the query is no longer even executed.\r\n\r\nI did not find that 256 limit is documented. Nevertheless, we can verify that the filter returns more 256 log names and issue an appropriate message.\r\n",
      "created_at": "2019-09-27T20:12:11Z",
      "updated_at": "2019-09-27T20:12:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "As for \"prompt for the -LogName parameter if no parameters is supplied.\"\r\n\r\n@janegilring  Design is to get snapshot of all events from all logs for a time lot to analyze them. You could open new issue to discuss the design but I do not see the point.",
      "created_at": "2019-09-30T07:01:23Z",
      "updated_at": "2019-09-30T07:01:23Z"
    },
    {
      "author": "KevinMarquette",
      "author_association": "CONTRIBUTOR",
      "body": "I ran `Get-WinEvent` with no parameters and got 1665 errors saying the data is invalid. ",
      "created_at": "2019-10-03T02:35:47Z",
      "updated_at": "2019-10-03T02:35:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@KevinMarquette See #10648",
      "created_at": "2019-10-03T04:32:38Z",
      "updated_at": "2019-10-03T04:32:38Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #10639, which has now been successfully released as `v7.0.0-preview.5`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.5)\n",
      "created_at": "2019-10-23T19:07:52Z",
      "updated_at": "2019-10-23T19:07:52Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #10648, which has now been successfully released as `v7.0.0-preview.6`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.6)\n",
      "created_at": "2019-11-21T22:35:48Z",
      "updated_at": "2019-11-21T22:35:48Z"
    },
    {
      "author": "Robo210",
      "author_association": "CONTRIBUTOR",
      "body": "> As for \"prompt for the -LogName parameter if no parameters is supplied.\"\r\n> \r\n> @janegilring Design is to get snapshot of all events from all logs for a time lot to analyze them. You could open new issue to discuss the design but I do not see the point.\r\n\r\n@iSazonov In case there is any interest the behavior again in the future, it would probably be best to simply check the event count for each channel and skip adding channels with 0 events to the query. This will cause new events that get logged to one of these empty channels during the query execution to get \"missed\", but if you consider the design to be to get all the events that were present at the exact moment the user ran the command, this should be fine.\r\n\r\n> I did not find that 256 limit is documented.\r\n\r\nNeither could I, nor could I find any rationale for the limitation in the code. Perhaps a future version of Windows can remove this limit, though you'd still have to deal with older versions that error-out.\r\n\r\n> now Windows 10 has over 400 logs and the query is no longer even executed.\r\n\r\nThe query is actually running hundreds or thousands of times, which is why it prints so many error messages. In fact, I believe every single requested event is being retrieved from the Event Log service, and the error is being printed for every batch of 64 events being retrieved.\r\n\r\n```C#\r\nprivate void ReadEvents(EventLogQuery logQuery)\r\n{\r\n    using (EventLogReader readerObj = new EventLogReader(logQuery))\r\n    {\r\n        Int64 numEvents = 0;\r\n        EventRecord evtObj = null;\r\n\r\n        while (true)\r\n        {\r\n            try\r\n            {\r\n                evtObj = readerObj.ReadEvent();\r\n            }\r\n            catch (Exception exc)\r\n            {\r\n                WriteError(new ErrorRecord(exc, exc.Message, ErrorCategory.NotSpecified, null));\r\n                continue;\r\n            }\r\n```\r\n\r\nThe error occurs in readerObj.ReadEvent(), and when the exception is thrown it just continues to the next event.\r\n\r\nThe exception is getting thrown from the call to GetNextBatch within EventLogReader.ReadEvent. When it gets thrown this.currentIndex is not incremented, so the next call to ReadEvent causes it to retrieve a new batch of events, and so on until the service (which is independently tracking the current index) says there are no more events and GetNextBatch succeeds and sets this.eventCount to 0, causing ReadEvent to gracefully exit with this.isEof == true.\r\n\r\n```C#\r\npublic EventRecord ReadEvent(TimeSpan timeout) {\r\n\r\n    EventLogPermissionHolder.GetEventLogPermission().Demand();\r\n\r\n    if (this.isEof)\r\n        throw new InvalidOperationException();\r\n\r\n    if (this.currentIndex >= this.eventCount) {\r\n        // buffer is empty, get next batch.\r\n        GetNextBatch(timeout);\r\n\r\n        if (this.currentIndex >= this.eventCount) {\r\n            this.isEof = true;\r\n            return null;\r\n        }\r\n    }\r\n\r\n    EventLogRecord eventInstance = new EventLogRecord(new EventLogHandle(this.eventsBuffer[currentIndex], true), this.eventQuery.Session, this.cachedMetadataInformation);\r\n    currentIndex++;\r\n    return eventInstance;\r\n}\r\n```",
      "created_at": "2019-11-25T00:46:18Z",
      "updated_at": "2019-11-25T00:46:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@Robo210 Thanks! \r\nAs soon as we get feedback with a real scenario, we can improve something.\r\n",
      "created_at": "2019-11-25T03:12:38Z",
      "updated_at": "2019-11-25T03:12:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@Robo210 Thanks! \r\nAs soon as we get feedback with a real scenario, we can improve something.\r\n",
      "created_at": "2019-11-25T03:14:41Z",
      "updated_at": "2019-11-25T03:14:41Z"
    }
  ],
  "created_at": "2019-09-27T12:30:33Z",
  "labels": [
    "Issue-Bug",
    "WG-Cmdlets",
    "Resolution-Fixed"
  ],
  "number": 10637,
  "state": "closed",
  "title": "Get-WinEvent - Suggested enhancements",
  "updated_at": "2019-11-25T03:14:41Z"
}