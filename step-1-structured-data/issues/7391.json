{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7391",
  "author": "mklement0",
  "body": "Steps to reproduce\r\n------------------\r\n\r\nRun from a filesystem location.\r\n\r\n```powershell\r\n# Inspect Get-ChildItem directly and look for the \r\n# dynamic, filesystem-provider-specific -Directory parameter.\r\n((Get-Command Get-ChildItem).ParameterSets.Parameters.Name | Select-String Directory)[0]\r\n'---'\r\n# Inspect Get-ChildItem indirectly via its gci alias and .ResolvedCommand\r\n((Get-Command gci).ResolvedCommand.ParameterSets.Parameters.Name | Select-String Directory)[0]\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nDirectory\r\n---\r\nDirectory\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nDirectory\r\n---\r\nCannot index into a null array.\r\n...\r\n```\r\n\r\nThat is, no `Directory` parameter was present in the output from `(Get-Command gci).ResolvedCommand`, even though by itself it appears to produce the same output as `Get-Command Get-ChildItem`\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.1.0-preview.4 on macOS 10.13.6\r\nPowerShell Core v6.1.0-preview.4 on Ubuntu 16.04.4 LTS\r\nPowerShell Core v6.1.0-preview.4 on Microsoft Windows 10 Pro (64-bit; Version 1803, OS Build: 17134.165)\r\n\\Windows PowerShell v5.1.17134.165 on Microsoft Windows 10 Pro (64-bit; Version 1803, OS Build: 17134.165)\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Dynamic parameters are dynamic i.e. based on some condition. This condition typically takes the form of an argument to the cmdlet which is why `Get-Command` has a `-ArgumentList` parameter. In the case of `Get-ChildItem` that argument is a path. So if you do\r\n```powershell\r\n((get-command get-childitem -ArgumentList c:\\).ParameterSets.Parameters.Name  | Select-String Directory)[0]\r\n```\r\nyou will get the expected output.",
      "created_at": "2018-07-28T01:06:57Z",
      "updated_at": "2018-07-28T01:06:57Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@BrucePay: \r\n\r\nYes, but that is not what this issue is about, as it is my understanding that in the _absence_ of `-ArgumentList` it is the _provider underlying what happens to the be the current location_ whose dynamic parameters are returned.\r\n\r\nThat is the reason the steps to reproduce state, \"Run from a filesystem location.\"\r\n\r\nThus, _when invoked from a filesystem location_ (a current location that is provided by the `FileSystem` provider), the following commands should be - and are - equivalent:\r\n\r\n```powershell\r\n# *Implicit* use of the FileSystem provider, based on the current location.\r\n((Get-Command Get-ChildItem).ParameterSets.Parameters.Name | Select-String Directory)[0]\r\n\r\n# *Explicit* use of the FileSystem provider, via -ArgumentLIst / (Unix; on Windows, use C:\\).\r\n((Get-Command Get-ChildItem -ArgumentList /).ParameterSets.Parameters.Name | Select-String Directory)[0]\r\n```\r\n\r\nSo, to return to the original question:\r\n\r\nWhy shouldn't \r\n\r\n```powershell\r\n((Get-Command gci).ResolvedCommand.ParameterSets.Parameters.Name | Select-String Directory)[0]\r\n```\r\n\r\nbe equivalent? \r\n\r\n* Is the implicit provider context lost due to the level of indirection (resolving `gci` to `Get-ChildItem`)?\r\n\r\n* If so, does this behavior make sense to you?\r\n\r\n\r\n",
      "created_at": "2018-07-28T02:21:51Z",
      "updated_at": "2018-07-28T02:23:14Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@BrucePay: Given that your answer doesn't address the issue at hand, can you please remove the `Resolution-Answered` label?",
      "created_at": "2018-07-29T03:24:19Z",
      "updated_at": "2018-07-29T03:24:19Z"
    }
  ],
  "created_at": "2018-07-27T20:33:01Z",
  "labels": [
    "Issue-Question",
    "WG-Engine"
  ],
  "number": 7391,
  "state": "open",
  "title": "Inspecting parameters via a CmdletInfo instance obtained via an AliasInfo's ResolvedCommand property is missing dynamic parameters",
  "updated_at": "2018-07-31T19:47:19Z"
}