{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13164",
  "author": "yecril71pl",
  "body": "## Summary of the new feature/enhancement\r\n\r\n<!-- \r\nA clear and concise description of what the problem is that the new feature would solve.\r\nTry formulating it in user story style (if applicable):\r\n'As a user I want X so that Y.' with X being the being the action and Y being the value of the action.\r\n-->\r\nAs a user I want to read a process identifier stored in a file without risking a denial of service of the console. \r\n```powershell\r\n\r\n```\r\n\r\n## Proposed technical implementation details (optional)\r\n\r\n<!-- \r\nA clear and concise description of what you want to happen.\r\nConsider providing an example PowerShell experience with expected result.\r\n-->\r\nPowerShell \r\n```powershell\r\n[INT] ('?' * 4096)\r\n```\r\nexperience \r\n```\r\nInvalidArgument: Cannot convert valueto type \"System.Int32\". Error: \"Input string was not in a correct format.\"\r\n```\r\nexpected \r\n```\r\nInvalidArgument: Cannot convert value \"?????????????????????????????????????\u2026\" to type \"System.Int32\". Error: \"Input string was not in a correct format.\"\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We could implement this in ConciseView by default and add new switch to Get-Error to get a full message.",
      "created_at": "2020-07-13T11:02:28Z",
      "updated_at": "2020-07-13T11:02:28Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "By the time it gets to the error formatting, it's already too late for this kind of work because error formatting just use the error messages from the error record or the exception and it's impossible for the formatter to _reliably_ tell which part of the error string should be truncated.\r\n\r\n@yecril71pl What is your real use case?",
      "created_at": "2020-07-13T16:57:48Z",
      "updated_at": "2020-07-13T17:35:28Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "> By the time it gets to the error formatting, it's already too late for this kind of work because error formatting just use the error messages from the error record or the exception and it's impossible for the formatter to tell which part of the error string should be truncated.\r\n> \r\n> @yecril71pl What is your real use case?\r\n\r\nWhy don\u2019t you believe me?\r\nAlso, I thought of detecting a long message, finding the quotation in it and truncating it for display.  It does not look like rocket science to me.",
      "created_at": "2020-07-13T17:17:28Z",
      "updated_at": "2020-07-13T17:19:01Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Checking the string length before casting to `[int]` also doesn't look like rocket science. That's why a real use case is asked so we can understand the scenario better.",
      "created_at": "2020-07-13T17:33:54Z",
      "updated_at": "2020-07-13T17:34:17Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "I considered this possibility and dismissed it because it puts the burden onto the user (who need not even be a developer).  Why do you consider my use case unreal?",
      "created_at": "2020-07-13T18:00:17Z",
      "updated_at": "2020-07-13T18:01:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "For long path I prefer to put the value at end like `Path not found: log path.`\r\nWe could use such pattern for most of error messages. Only not always can this be done.\r\n\r\n",
      "created_at": "2020-07-14T04:47:33Z",
      "updated_at": "2020-07-14T04:47:33Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "We could also store the offending value(s) in the error record in the `TargetObject`, leaving the message itself clean.",
      "created_at": "2020-07-14T08:29:57Z",
      "updated_at": "2020-07-14T08:59:43Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "If this needs to be truncated, it should be done in the exception message when the `PSInvalidCastException` is created.  The actual value would be kept in `TargetObject` as @yecril71pl suggested.\r\n\r\nI don't really have an opinion on whether it should be done though.",
      "created_at": "2020-07-14T13:16:46Z",
      "updated_at": "2020-07-14T13:16:46Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "https://github.com/dotnet/runtime/issues/39270#issue-656600583",
      "created_at": "2020-07-14T13:25:59Z",
      "updated_at": "2020-07-14T13:25:59Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@yecril71pl I meant when the `PSInvalidCastException` is created.  That's done in PowerShell (probably in `LanguagePrimitives` somewhere).\r\n\r\n`PSInvalidCastException` implements `IContainsErrorRecord`, so it can provide it's own `ErrorRecord` with `TargetObject` specified.",
      "created_at": "2020-07-14T14:05:10Z",
      "updated_at": "2020-07-14T14:05:10Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "Moreover, according to the .NET Team, we should rather use `TryParse`, without triggering the inner exception.",
      "created_at": "2020-07-21T09:30:01Z",
      "updated_at": "2020-07-21T09:30:01Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Moreover, according to the .NET Team, we should rather use `TryParse`, without triggering the inner exception.\r\n\r\nYeah the change definitely doesn't belong in .NET.  If something needs to be changed regarding this it would take place in this repo.\r\n\r\nAlso FWIW the \"PowerShell-y\" version of `TryParse` is `'some string' -as [int]`.",
      "created_at": "2020-07-21T14:33:29Z",
      "updated_at": "2020-07-21T14:33:29Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "I still need to get the PowerShell exception, I cannot get that from using `-as` unless I throw one myself, which is beyond verbose.\r\n",
      "created_at": "2020-07-21T14:47:49Z",
      "updated_at": "2020-07-21T14:47:49Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Well yeah, the point of it (and `TryParse`) is to not throw.",
      "created_at": "2020-07-21T15:35:01Z",
      "updated_at": "2020-07-21T15:35:01Z"
    }
  ],
  "created_at": "2020-07-13T10:38:13Z",
  "number": 13164,
  "state": "open",
  "title": "Rein in excessive values in error messages",
  "updated_at": "2020-07-21T15:35:01Z"
}