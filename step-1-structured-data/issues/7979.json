{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7979",
  "author": "pulkjr",
  "body": "Steps to reproduce\r\n------------------\r\n\r\n1. Create a .psd1 file with 3231 lines in it.\r\n2. Attempt to import with Import-PowerShellDataFile. It should fail stating that there is a dynamic ScriptBlock.\r\n3. Delete one line from the file. It should import successfully.\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```powershell\r\n> Import-PowerShellDataFile -Path largeConfiguration.psd1\r\nNo Error just results\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```powershell\r\n> Import-PowerShellDataFile -Path largeConfiguration.psd1\r\nException calling \"SafeGetValue\" with \"0\" argument(s): \"Cannot generate a Windows PowerShell object for a ScriptBlock evaluating dynamic\r\nexpressions. Dynamic expression:\r\n```\r\n\r\nEnvironment data\r\n----------------\r\nAttempted from multiple different environments without success\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0\r\nOS                             Darwin 17.4.0 Darwin Kernel Version 17.4.0: Sun Dec 17 09:19:54 PST 2017; root:xnu-4570.41.2~1/RELEASE_X86_64\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n> $PSVersionTable                                                      \r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-rc.1\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0-rc.1\r\nOS                             Darwin 17.4.0 Darwin Kernel Version 17.4.0: Sun Dec 17 09:19:54 PST 2017; root:xnu-4570.41.2~1/RELEASE_X86_64\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.17134.228\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.17134.228\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n",
  "closed_at": "2020-12-09T19:07:09Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@pulkjr is this a real scenario or a test scenario?  Trying to understand how important this is.  ",
      "created_at": "2018-10-09T21:07:23Z",
      "updated_at": "2018-10-09T21:07:23Z"
    },
    {
      "author": "39Delta",
      "author_association": "NONE",
      "body": "\r\n[records.txt](https://github.com/PowerShell/PowerShell/files/2473515/records.txt)\r\n\r\nI just ran into this myself as I am also seeing this issue with storing record objects in a psd1 file.  At about 3000 lines it returns the error complaining about the presence of a dynamic expression.  My example psd1 attached fails when passed to 'Import-PowerShellDataFile' command.  If you remove one table from the array it imports fine in my environment.  Running powershell version 5.1.14409.1005.\r\n\r\nThis is related to a real scenario in which we are trying to store domain record data in a psd1 file but are unable to import the file after creation unless we decrease the number of records stored.  In total after all records are stored the psd1 is 12k+ lines long.\r\n\r\n\r\n\r\n",
      "created_at": "2018-10-12T14:43:11Z",
      "updated_at": "2018-10-12T15:08:33Z"
    },
    {
      "author": "pulkjr",
      "author_association": "NONE",
      "body": "@SteveL-MSFT this is a real scenario where I am building configuration data for DSC dynamically and archiving them for use in testing later. When I attempt to import them for pester testing I am unable to with this command. Import-LocalizedData has been working for me as a work around.",
      "created_at": "2018-10-12T16:26:05Z",
      "updated_at": "2018-10-12T16:26:05Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The problem seems to be that PowerShell has some hardcoded limits in the AST and for hashtables [here](https://github.com/PowerShell/PowerShell/blob/53e6ec6eadc2f363fc671e96b34ade4dda3fe8eb/src/System.Management.Automation/engine/parser/SafeValues.cs#L58).  I did a private build increasing the `MaxVisitCount` to 10000 (from 5000) and was able to import @39Delta `records.txt` sample.  \r\n\r\n@lzybkr what is the impact if we remove these limits altogether?  Seems like it would just be local memory/cpu consumption for a large AST?",
      "created_at": "2018-10-12T17:09:06Z",
      "updated_at": "2018-10-12T17:09:06Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Check with @LeeHolmes and/or @JamesWTruher - I think that limit exists to help avoid a DOS style attack.\r\n\r\nI suppose it makes sense to add a parameter to the cmdlet to increase the limits.",
      "created_at": "2018-10-12T17:57:35Z",
      "updated_at": "2018-10-12T17:57:35Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I couldn't get a definitive conclusion it's safe to completely remove the limits, so we should go with a parameter to set the limits, however, I don't think the user can guess what value to put as it's not the number of lines in the file.  So my proposal is to have a `-NoLimit` switch that removes the limit check altogether but it's opt-in.",
      "created_at": "2018-10-31T20:20:12Z",
      "updated_at": "2018-10-31T20:20:12Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this and recommends `-SkipLimitCheck`",
      "created_at": "2020-09-23T22:56:34Z",
      "updated_at": "2020-09-23T22:58:45Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #13672, which has now been successfully released as `v7.2.0-preview.2`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0-preview.2)\n",
      "created_at": "2020-12-15T21:38:03Z",
      "updated_at": "2020-12-15T21:38:03Z"
    }
  ],
  "created_at": "2018-10-09T13:04:07Z",
  "labels": [
    "Issue-Discussion",
    "Committee-Reviewed",
    "WG-Cmdlets-Utility"
  ],
  "number": 7979,
  "state": "closed",
  "title": "Import-PowerShellDataFile Errors on files over 3230 lines",
  "updated_at": "2020-12-15T21:38:03Z"
}