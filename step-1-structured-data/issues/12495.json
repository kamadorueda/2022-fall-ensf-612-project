{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12495",
  "author": "vexx32",
  "body": "# PR Summary\r\n\r\nCurrently, we have some flawed assumptions around what defines a mutable value type. Rather than make a more complicated series of checks and making assumptions, we can simply look at whether the type is defined with the `IsReadOnlyAttribute` that the compiler uses to guarantee a value type is immutable.\r\n\r\nAs a fallback, it's much safer and less complex to enumerate all public and private fields on the type, and verify whether they're all read-only.\r\n\r\n## PR Context\r\n\r\nResolves #12430. See the issue for discussion and further context.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-12-10T20:34:19Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@PoshChan please retry all\r\n",
      "created_at": "2020-04-26T17:15:45Z",
      "updated_at": "2020-04-26T17:15:45Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@vexx32, successfully started retry of `PowerShell-CI-static-analysis, PowerShell-CI-Windows, PowerShell-CI-macOS, PowerShell-CI-Linux`",
      "created_at": "2020-04-26T17:16:33Z",
      "updated_at": "2020-04-26T17:16:33Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@PoshChan please retry all",
      "created_at": "2020-05-01T16:46:24Z",
      "updated_at": "2020-05-01T16:46:24Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@vexx32, did not find any matching pull request checks",
      "created_at": "2020-05-01T16:46:39Z",
      "updated_at": "2020-05-01T16:46:39Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMainainer, Please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-05-27T02:00:56Z",
      "updated_at": "2020-05-27T02:00:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 Do you want to continue?",
      "created_at": "2020-05-27T07:12:18Z",
      "updated_at": "2020-05-27T07:12:18Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I'm unsure. Can we tag this for committee review, please?\r\n\r\nLet me explain as best I can. @SeeminglyScience may be able to explain the bits I'm not especially clear on, I'm painfully aware I don't have a thorough understanding of everything that's going on.\r\n\r\n1. **Currently**, our detection of mutable value types is simply broken. There's no other conclusion in my mind, it's literally completely broken;\r\n2. Any but the very simplest and most basic structs will register as mutable and end up being copied unnecessarily, so we're wasting a decent amount of cycles copying value types we simply don't need to.\r\n\r\n---\r\n\r\nThis is complicated by the fact that one of the methods that are using this mutable struct detection method treats them more differently than it should. In short:\r\n\r\n1. If it reads the value type as mutable, it _unwraps PSObjects_ as part of the copy operation before passing it along to whatever's using it, and it is never rewrapped before being handed back.\r\n    - I don't understand the full implications of this, but as I understand it this will cause performance degradation since there are many times we have to then look up the PSObject wrapper for that struct value/instance from the resurrection tables.\r\n2. It doesn't do that for immutable structs, so these end up remaining wrapped in PSObject.\r\n\r\nSo, in other words... whether a struct is considered mutable or not (and we have a _lot_ of false positives) determines whether we waste potentially quite a lot of cycles looking up PSObject wrappers in the resurrection table for it _repeatedly_.\r\n\r\n---\r\n\r\nI'm of the opinion this should just be fixed; both code paths should be returning values the same way. Not sure if that should be wrapped or not, but both should be the same. Currently I'd say that ensuring all structs returned should be returned wrapped as that'll result in better performance overall.\r\n\r\n_But_ since most structs currently are (incorrectly) registered as mutable, they end up being returned unwrapped. So some compiled cmdlets may notice the change -- actually, that's what's causing the CI failures. It's expecting a raw DateTime value when it should be checking for PSObject wrappers and grabbing the base object out of it to get the DateTime value. I don't know how long it's worked like this.\r\n\r\n---\r\n\r\nFinally, It's a little bit of an edge case for cmdlets to ever notice the difference; in order to see this difference, you have to be taking as input some kind of object that has `DateTime` as a type-unrestricted property. If you take in `DateTime` as a parameter value, you'll never see this difference, it will always be unwrapped by the time you see it. The cmdlet in the repo that is registering this change accepts a PSObject as input and expects a `DateTime` property on it; handling this the way that seems sensible currently breaks that as it ends up with a `PSObject` wrapped around it in that instance.\r\n\r\n---\r\n\r\nI'm also going to tag @daxian-dbw for review as well. In my opinion, this is reasonably safe to change and save the performance cycles, but I'm also aware that it is a potentially noticeable change to the way this works, and it may break some compiled cmdlets that expect (for example) PSCustomObject / PSObject as input data, with one of the values being a struct that currently is incorrectly considered mutable.\r\n\r\nI'm aware that's a long and potentially unclear explanation, please ask if you have any questions, I'll attempt to clarify as best I can. \ud83d\udc96 ",
      "created_at": "2020-05-27T12:08:59Z",
      "updated_at": "2020-05-27T12:10:31Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 did a great job at explaining but let me try to summarize with an example\r\n\r\n```powershell\r\n# Current behavior that incorrectly detects DateTime as mutable\r\n(Get-Date) -is [psobject]\r\n# True\r\n$a = Get-Date\r\n$a -is [psobject]\r\n# False\r\n\r\n# Fixed behavior\r\n(Get-Date) -is [psobject]\r\n# True\r\n$a = Get-Date\r\n$a -is [psobject]\r\n# True\r\n```\r\n\r\nThe way that copy semantics are implemented, the `PSObject` is unwrapped, the struct is unboxed and boxed again, but **never rewrapped**.  In PowerShell this is meaningless, but a PowerShell aware (or focused) C# API may expect that a mutable struct (or rather, any non-primitive value type because detection is busted) will never be wrapped in a `PSObject`.  Personally I think such an API should *always* account for `PSObject`, but it's easy to imagine this behavior being accidently depended on.  Especially since PowerShell has at least one example of this.\r\n\r\nTechnically this behavior is undocumented and arguably not part of the breaking change contract, but it's also quite difficult to know exactly what the impact would be.  I do think it's worth the change though.  I'd also like to bring up the possibility of adding a rewrap step in the copy semantics if the mutable struct was originally wrapped in a `PSObject` (though maybe better suited for a new issue).",
      "created_at": "2020-05-27T13:37:40Z",
      "updated_at": "2020-05-27T13:38:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We put several dangerous things in one PR and this PR will have unpredictable consequences.\r\nI would explicitly separate them for discussion and conclusion:\r\n- make Datetime immutable\r\n- improve copy semantics for rewrapping in PSObject\r\n- improve mutable struct detection based on latest C# capabilities\r\n   - with/without taking into account old code\r\n- ?\r\n\r\nAlso it would be great to consider real scenarios we should address - without this it is very difficult to understand the PR impact.\r\n\r\nAfter that we could ask PowerShell Committee.\r\n\r\n",
      "created_at": "2020-05-27T17:29:38Z",
      "updated_at": "2020-05-27T17:31:41Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "> make Datetime immutable\r\n\r\nWhat? It _is_ immutable. There's nothing we need to do here. If we make an explicit exception for DateTime in our handling code we're simply monkey-patching the obvious case in a way that will have about the same impact for that type as it would if we just fixed the actual problem anyway.\r\n\r\nWe can't affect this without also needing to address the other issues. I'm all for making the _changes_ piecemeal if we can, but I don't think a meaningful decision can be had unless we have a plan to act on already in place.\r\n\r\nIf we were going to do this piecemeal, I'd recommend this:\r\n\r\n1. Improve copy semantics & rewrapping in PSObject\r\n2. Improve mutable struct detection to avoid extraneous copies.\r\n\r\nNote that even doing the first step would immediately cause the same potential breakage as actually fixing the issue, without the perf fixes/improvements.",
      "created_at": "2020-05-27T17:37:55Z",
      "updated_at": "2020-05-27T17:44:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> What? It is immutable. \r\n\r\nPowerShell detects it as mutable.",
      "created_at": "2020-05-27T17:47:12Z",
      "updated_at": "2020-05-27T17:47:12Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yes, and it's incorrect. We've covered this. Our flawed code doesn't change the fact that it's not mutable.",
      "created_at": "2020-05-27T17:47:36Z",
      "updated_at": "2020-05-27T17:48:01Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Just to clarify, this is the only issue that needs ruling on currently:\r\n\r\nIf we fix detection of mutability, structs that were previously (falsely) detected as mutable may in some cases be wrapped in a `PSObject` where they were previously just a boxed struct.  This could break some scenarios where a C# API traverses a psobject with a property containing one of these structs.\r\n\r\nFor example, a API like this:\r\n\r\n```csharp\r\nbool HasModifiedTime(PSObject pso)\r\n{\r\n     return pso.Properties[\"ModifiedTime\"]?.Value is DateTime;\r\n}\r\n```\r\n\r\nShould instead look like:\r\n\r\n```csharp\r\nbool HasModifiedTime(PSObject pso)\r\n{\r\n    var value = pso.Properties[\"ModifiedTime\"]?.Value;\r\n    return value is PSObject inner\r\n        ? inner.BaseObject is DateTime\r\n        : value is DateTime;\r\n}\r\n```\r\n\r\nOr really most cases will look something like (which will still work):\r\n\r\n```csharp\r\nbool GetModifiedTime(PSObject pso)\r\n{\r\n    return LanguagePrimitives.ConvertTo<DateTime>(pso.Properties[\"ModifiedTime\"]?.Value);\r\n}\r\n```\r\n\r\nBasically, is this change acceptable given that most code will (or should) look like the second or third example? All other points can be discussed in separate issues.",
      "created_at": "2020-05-27T17:52:52Z",
      "updated_at": "2020-05-27T17:54:02Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as stale because it has been marked as requiring author feedback but has not had any activity for **15 days**. It will be closed if no further activity occurs **within 10 days of this comment**.",
      "created_at": "2020-06-11T23:00:17Z",
      "updated_at": "2020-06-11T23:00:17Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I feel I've made my questions pretty clear... I think this either needs a committee review or perhaps @rjmholt and/or @daxian-dbw to take a close look and examine what best to do here (or whether we're better off leaving it as is).",
      "created_at": "2020-06-22T06:12:36Z",
      "updated_at": "2020-06-22T06:12:36Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-06-30T02:00:23Z",
      "updated_at": "2020-06-30T02:00:23Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "Open PRs should not be assigned to milestone, so they are not assigned to the wrong milestone after they are merged.  For backport consideration, use a `backport` label. ",
      "created_at": "2020-12-09T23:51:12Z",
      "updated_at": "2020-12-09T23:51:12Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Merging this in so we can get early validation for it in the next preview",
      "created_at": "2020-12-10T20:34:32Z",
      "updated_at": "2020-12-10T20:34:32Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.2.0-preview.2` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0-preview.2)\n",
      "created_at": "2020-12-15T21:38:47Z",
      "updated_at": "2020-12-15T21:38:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Merging this in so we can get early validation for it in the next preview\r\n\r\n@rjmholt Have you a plan for the validation? I still have concerns about the implementation.",
      "created_at": "2020-12-16T04:26:23Z",
      "updated_at": "2020-12-16T04:26:42Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov can you summarise your concerns here for other readers? With the changes in a release we might be able to get more users trying this out. We can then set up a decision on whether to revert this, require changes or leave it as is before the next release.",
      "created_at": "2020-12-16T05:13:23Z",
      "updated_at": "2020-12-16T05:14:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> @iSazonov can you summarize your concerns here for other readers?\r\n\r\nOh, every step in this change raises questions. You can see it in my comments above.\r\n- we did not measure performance on the hot path, we can get a regression.\r\n- we changed the current behavior without a conclusion\r\n- we added new behavior without impact analysis.\r\n\r\nIdeally, we should have seen good perf win in some scenarios. What is the scenarios and where is perf tests? Do we cover all new .Net features?",
      "created_at": "2020-12-16T05:53:39Z",
      "updated_at": "2020-12-16T05:53:39Z"
    }
  ],
  "created_at": "2020-04-26T03:27:36Z",
  "number": 12495,
  "state": "closed",
  "title": "(#12430) Improve detection of mutable value types",
  "updated_at": "2022-06-07T19:47:17Z"
}