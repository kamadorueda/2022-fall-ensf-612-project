{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5125",
  "author": "IISResetMe",
  "body": "This pull request adds RightToLeft support to the binary -split operator, as requested in #4765 \r\n\r\nI've added tests for negative integer input for the `Max-substrings` operand to work with both regex patterns and scriptblocks. ",
  "closed_at": "2017-10-29T09:37:17Z",
  "comments": [
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@iSazonov Can you update your review?   \r\n@PetSerAl and @powercode  Please feel free to comment if you think if this is ready to be merged or not.  And, thanks for your feedback.",
      "created_at": "2017-10-23T17:26:22Z",
      "updated_at": "2017-10-23T17:26:22Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "travis build on linux seems to have failed for reasons unrelated to the code, how to re-run without commiting?",
      "created_at": "2017-10-25T12:00:14Z",
      "updated_at": "2017-10-25T12:00:14Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "`buf` re-allocation, `maxSubstrings`/`limit` and whitespace issues have all been addressed now. \r\n\r\nI still disagree on `Reverse()` + `ExtendList()` v `ReverseExtendList()` - won't add any more clarity to the code and doesn't seem justifiable with this single very specific use case.\r\n\r\n---\r\n\r\nI'm still trying to work out an elegant way of doing `buf.Reverse()` - thought about an extension method, like:\r\n\r\n```\r\nprivate static StringBuilder Reverse(this StringBuilder chunk)\r\n{\r\n    string str = chunk.ToString();\r\n    if (str.Length < 2) \r\n        return chunk;\r\n    char[] charArray = str.ToCharArray();\r\n    Array.Reverse(charArray);\r\n\r\n    return new StringBuilder(new string(charArray));\r\n}\r\n```\r\n\r\nBut I'm not sure that's the best way to go about it for multiple reasons:\r\n\r\n1. Given I won't have access to the underlying array, I'll have to materialize the string before reversing it\r\n2. StringBuilder ctor doesn't take `char[]`, so need to construct a new string again after reversing (lesser concern) \r\n3. Unlike existing methods (`Append*()`, `Insert()`, `Remove()` etc) the extension method won't actually change state of existing `chunk`, only return a new (reversed) `StringBuilder`\r\n\r\nAny thoughts, recommendations?",
      "created_at": "2017-10-25T13:34:21Z",
      "updated_at": "2017-10-25T13:34:21Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "StringBuilder has an ```System.Text.StringBuilder Append(char[] value, int startIndex, int charCount)``` overload.\r\nIf you create the stringbuilder with value.Length as intialCapacity and use that append overload you get away from the allocation of the string\r\n\r\n",
      "created_at": "2017-10-25T14:05:13Z",
      "updated_at": "2017-10-25T14:05:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think in the context we can easy replace  StringBuilder  with  List<Char> .",
      "created_at": "2017-10-25T14:15:53Z",
      "updated_at": "2017-10-25T14:15:53Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "Nice one @powercode, hadn't considered that. I think @iSazonov is right though. There's no inherent value in using `StringBuilder` over `List<char>` in the current implementation, and `List<char>` gives us a fairly efficient `Reverse()` option for free",
      "created_at": "2017-10-25T14:20:27Z",
      "updated_at": "2017-10-25T14:20:27Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "`StringBuilder` replaced with `List<char>`, and I've removed the `Insert()` call in favor of `Reverse()` prior to adding the chunk to the list.",
      "created_at": "2017-10-25T16:17:04Z",
      "updated_at": "2017-10-25T16:17:04Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "I restarted travis-ci but I think you might need to rebase.",
      "created_at": "2017-10-25T16:37:35Z",
      "updated_at": "2017-10-25T16:37:35Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "Any quick advice on how to do it correctly @TravisEz13 ? Last time I tried [it went horribly wrong](https://github.com/PowerShell/PowerShell/pull/5026#issuecomment-336746060)",
      "created_at": "2017-10-25T16:48:01Z",
      "updated_at": "2017-10-25T16:48:01Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Honestly, I just run `git rebase <upstreambranch> <targetbranch>` and follow the instruction.  A good conflict solver (merge tool) is very important.  Run `git status` if you need to know what you are supposed to do next.\r\n\r\nThe end of this article has a link to some good tools [GitHowTo - 30. Resolving Conflicts](http://githowto.com/resolving_conflicts ).\r\n[Instructions to setup BC4, my favorite merge tool, but it's a paid product.](http://www.scootersoftware.com/support.php?zz=kb_vcs#gitwindows)",
      "created_at": "2017-10-25T17:44:26Z",
      "updated_at": "2017-10-25T17:44:26Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "Alright, I rebased like you suggested, then did a pull and a push (as there were no merge conflicts), but it still dragged all the intermediate commits from the master branch into my PR :-\\ is this normal/expected or am I overlooking something obvious? @TravisEz13 ",
      "created_at": "2017-10-25T18:10:25Z",
      "updated_at": "2017-10-25T18:12:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I use \r\n```\r\ngit chechout <branch>\r\ngit pull --rebase PowerShell master\r\n```\r\nI think you need remove the merge commit and try rebase again.",
      "created_at": "2017-10-26T06:15:52Z",
      "updated_at": "2017-10-26T06:15:52Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13 @iSazonov Tried to revert the last merge locally with \r\n\r\n    git revert c8eb3407ac839e5191b99c3a719a7629d9fdd746 -m 2\r\n\r\nbut this just adds a new commit reverting all the changes of the others at once, super messy. How can I \"reset\" the branch (`--reset hard [latest PR-speficic commit]` doesn't seem to work because of the previous rebase/fast-forwarding)? \r\n\r\nMaybe it's easier to just make a diff patch of the relevant files, create a new branch and submit a new PR?\r\n\r\nApologies for the git n00bness",
      "created_at": "2017-10-26T07:13:28Z",
      "updated_at": "2017-10-26T07:13:28Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@IISResetMe the easier thing is probably to copy off the files you changed, reset this branch to before your first commit, copy over your changed files, then rebase off upstream/master, and push those changes.\r\n\r\nIf you want to do it the `git` way, you should `git rebase -i HEAD~56` (for your 56 commits), drop all the commits that aren't yours.  As it rebases, you'll hit lots of merge conflicts.  You'll have to fix them, `git add <file>` then `git rebase --continue` until it's clean.  Then `git fetch upstream` and `git rebase upstream/master` and resolve any merge conflicts.",
      "created_at": "2017-10-26T11:21:30Z",
      "updated_at": "2017-10-26T11:21:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You can remove last commits by\r\n\r\ngit reset --hard ooooooo  ",
      "created_at": "2017-10-26T13:30:09Z",
      "updated_at": "2017-10-26T13:30:09Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "Talked to @SteveL-MSFT offline, and decided to start over and push the changes to a new branch with the following commits:\r\n\r\nhttps://github.com/IISResetMe/PowerShell/commit/81873b30f061056710a7417d7aafa4f091f6e1f9 (tests)\r\nhttps://github.com/IISResetMe/PowerShell/commit/5e5e3e2f3c643cef73cb21968c58f4f3fc0f5a6c (SplitWithPattern())\r\nhttps://github.com/IISResetMe/PowerShell/commit/cf47352d71d0e78d39fc634a2d1e659c1030a6ef (SplitWithPredicate())\r\n\r\nOnly concern is that we lose a bit of context from this PR, so wanted to check with you @TravisEz13 @iSazonov before submitting a new PR off the new branch",
      "created_at": "2017-10-28T09:27:17Z",
      "updated_at": "2017-10-28T09:27:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Ok, only please add a comment in new PR that it overload the PR.",
      "created_at": "2017-10-29T07:17:56Z",
      "updated_at": "2017-10-29T07:17:56Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "Re-submitted as https://github.com/PowerShell/PowerShell/pull/5270, please review. Thanks",
      "created_at": "2017-10-29T09:37:17Z",
      "updated_at": "2017-10-29T09:37:17Z"
    }
  ],
  "created_at": "2017-10-15T02:54:31Z",
  "number": 5125,
  "state": "closed",
  "title": "Enhance -split operator with RightToLeft splitting",
  "updated_at": "2017-10-29T09:37:17Z"
}