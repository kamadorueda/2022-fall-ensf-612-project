{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14127",
  "author": "anon-8142",
  "body": "I am encountering unexpected behavior either in the latest release of powershell or .net; I'm not sure which. \r\n\r\nDemonstration of unexpected behavior:\r\n\r\n    PS > \"`u{00001A}\" -eq \"\"\r\n    True\r\n\r\nI rely on user entering EOF to terminate between batches of input in a script.\r\n\r\nI tried reproducing the problem under different versions of .NET and powershell, shown below.  The best I can tell according to [System.Globalization.CompareOptions](https://docs.microsoft.com/en-us/dotnet/api/system.globalization.compareoptions?view=net-5.0), is that \"the default option settings for string comparisons [when CompareOptions.None is used]\" changed. However, I can't find any documentation on what \"the default option settings\" are.\r\n\r\n## Steps to reproduce\r\n\r\n- Open `pwsh.exe` and `powershell.exe`\r\n- Evaluate the expression ``\"`u{00001A}\" -eq \"\";`` in each\r\n- Note `pwsh` result of `True` and `powershell` result of `False`\r\n\r\n## Expected behavior\r\n\r\n```powershell\r\n# the following expressions all evaluate to false\r\n\"`u{00001A}\" -eq \"\";\r\n-not [String]::Compare(\"\", \"`u{00001A}\");\r\n-not [String]::Compare(\"\", \"`u{00001A}\", [CultureInfo]::CurrentCulture, \"None\");\r\n```\r\nAforementioned expressions should evaluate to false.\r\n\r\n## Actual behavior\r\n\r\n.NET:\r\n\r\n    using System;\r\n    using System.Globalization;\r\n\r\n    public class Test {\r\n    public static void Main() {\r\n        Console.WriteLine(\"\" == \"\\x1A\");\r\n        Console.WriteLine(String.Compare(\"\", \"\\x1A\"));\r\n        Console.WriteLine(String.Compare(\"\", \"\\x1A\", CultureInfo.CurrentCulture, CompareOptions.None));\r\n        Console.WriteLine(String.Compare(\"\", \"\\x1A\", CultureInfo.CurrentCulture, CompareOptions.Ordinal));\r\n    }\r\n    }\r\n\r\n    /* output:\r\n    False\r\n    -1\r\n    -1\r\n    -1\r\n    */\r\n\r\n\r\n\r\n`pwsh.exe -NoProfile`:\r\n\r\n    PS ~> \"$($PSVersionTable['PSVersion'])\"; `\r\n    $windows_eof = \"`u{00001A}\"; `\r\n    \"\" -eq $windows_eof; `\r\n    [String]::Compare(\"\", $windows_eof); `\r\n    [String]::Compare(\"\", $windows_eof, [CultureInfo]::CurrentCulture, \"None\"); `\r\n    [String]::Compare(\"\", $windows_eof, [CultureInfo]::CurrentCulture, \"Ordinal\");\r\n\r\n    <# output:\r\n    7.1.0\r\n    True\r\n    0\r\n    0\r\n    -1\r\n    #>\r\n\r\n`powershell.exe -NoProfile` output:\r\n\r\n    5.1.18362.1171\r\n    False\r\n    -1\r\n    -1\r\n    -9\r\n\r\n\r\n.NET Core under `pwsh.exe -NoProfile`:\r\n\r\n    Add-Type -TypeDefinition @\"\r\n    using System.Globalization;\r\n\r\n    public class Test {\r\n    public static System.String Main() {\r\n\r\n\r\n    System.String result = \"\";\r\n    result += \"\" == \"\\x1A\";\r\n    result += \"\\n\";\r\n    result += System.String.Compare(\"\", \"\\x1A\");\r\n    result += \"\\n\";\r\n    result += System.String.Compare(\"\", \"\\x1A\", CultureInfo.CurrentCulture, CompareOptions.None);\r\n    result += \"\\n\";\r\n    result += System.String.Compare(\"\", \"\\x1A\", CultureInfo.CurrentCulture, CompareOptions.Ordinal);\r\n    result += \"\\n\";\r\n\r\n    return result;\r\n\r\n    }\r\n    }\r\n    \"@ `\r\n    -ReferencedAssemblies System.Globalization `\r\n    -Language CSharp; `\r\n    [Test]::Main()\r\n\r\n    <# output:\r\n    False\r\n    0\r\n    0\r\n    -1\r\n    #>\r\n\r\n\r\n\r\n## Environment data\r\n\r\n\r\n    Name                           Value\r\n    ----                           -----\r\n    PSVersion                      7.1.0\r\n    PSEdition                      Core\r\n    GitCommitId                    7.1.0\r\n    OS                             Microsoft Windows 10.0.18363\r\n    Platform                       Win32NT\r\n    PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\n    PSRemotingProtocolVersion      2.3\r\n    SerializationVersion           1.1.0.1\r\n    WSManStackVersion              3.0\r\n",
  "closed_at": "2020-12-07T18:54:15Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Looking at the symptoms you're seeing, it sounds like this issue should be filed on the [dotnet/runtime](/dotnet/runtime) repository instead?",
      "created_at": "2020-11-18T20:48:38Z",
      "updated_at": "2020-11-18T20:48:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I see this in PowerShell 7.1 Preview3 - it is .Net 5.0 Preview.4.\r\n\r\nPlease open new issue in .Net Runtime repo and reference the issue for tracking.",
      "created_at": "2020-11-19T05:11:13Z",
      "updated_at": "2020-11-19T05:11:13Z"
    },
    {
      "author": "anon-8142",
      "author_association": "NONE",
      "body": "Following up.  This is an intended breaking change in .NET 5.0, according to:\r\n\r\n[Behavior changes when comparing strings on .NET 5+](https://docs.microsoft.com/en-us/dotnet/standard/base-types/string-comparison-net-5-plus)\r\n[.NET globalization and ICU](https://docs.microsoft.com/en-us/dotnet/standard/globalization-localization/globalization-icu)\r\n",
      "created_at": "2020-12-07T18:54:15Z",
      "updated_at": "2020-12-07T18:54:15Z"
    }
  ],
  "created_at": "2020-11-18T19:11:19Z",
  "number": 14127,
  "state": "closed",
  "title": "Empty string is equal to non-empty string",
  "updated_at": "2020-12-08T10:41:26Z"
}