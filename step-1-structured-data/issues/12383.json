{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12383",
  "author": "fireflycons",
  "body": "# Steps to reproduce\r\n\r\n```csharp\r\nusing (var powershell = PowerShell.Create())\r\n{\r\n      // script setup snipped\r\n\r\n      // This works and output is returned\r\n      var results = powershell.Invoke();\r\n\r\n      // This throws PlatformNotSupportedException on Linux (Ubuntu 18.04), but not on Windows\r\n      if  (powershell.HadErrors)\r\n      {\r\n          // This, if tested in isolation also throws PlatformNotSupportedException \r\n          //  on Linux (Ubuntu 18.04), but not on Windows\r\n          var errorRecord = powershell.Streams.Error.FirstOrDefault();\r\n      }\r\n}\r\n```\r\n\r\n# Expected behavior\r\nNo exception is thrown\r\n\r\n# Actual behavior\r\nException is thrown\r\n\r\n# Environment data\r\n\r\nOccurs with version 6.1.6 and version 7.0.0 of the System.Management.Automation nuget package\r\nMy project is compiled with NET Core 3.1 LTS\r\n\r\nComplete implementation of host can be found here: https://github.com/fireflycons/PSDynamicParameters/blob/appveyor/tests/Firefly.PowerShell.DynamicParameters.Tests/TestCmdletHost.cs",
  "closed_at": "2020-04-20T20:43:24Z",
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "The `Invoke` method is what's throwing, that happens when there is a terminating error. You would use `HadErrors` and/or `Streams.Error` to check for *non-terminating* errors.",
      "created_at": "2020-04-20T03:24:32Z",
      "updated_at": "2020-04-20T03:24:32Z"
    },
    {
      "author": "fireflycons",
      "author_association": "NONE",
      "body": "Hi @SeeminglyScience \r\n\r\nI've created a branch to specifically test this and have found that it's not the property accessors that are throwing. It is in fact that the cmdlet has thrown `PlatformNotSupportedException` as a non-terminating error, when the expected exception is `ParameterBindingException`\r\n\r\nI am now logging the progress of the host\r\nhttps://github.com/fireflycons/PSDynamicParameters/blob/issue-12383/tests/Firefly.PowerShell.DynamicParameters.Tests/TestCmdletHost.cs#L128\r\n\r\n...testing with this\r\nhttps://github.com/fireflycons/PSDynamicParameters/blob/issue-12383/tests/Firefly.PowerShell.DynamicParameters.Tests/Issue12383Tests.cs\r\n\r\nand the results can be seen here\r\nhttps://ci.appveyor.com/project/fireflycons/psdynamicparameters/builds/32297830\r\n\r\nThis happens everywhere I expect `ParameterBindingException`, but only in Linux\r\n\r\nWhere I skip the tests for exceptions, other tests execute correctly\r\nhttps://ci.appveyor.com/project/fireflycons/psdynamicparameters/builds/32291659\r\n\r\nUnless this helps you to shed some light on what's going on, next job for me will be to build to a local docker container and debug the tests within that.\r\n\r\n\n\n<blockquote><img src=\"https://avatars1.githubusercontent.com/u/34012094?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/fireflycons/PSDynamicParameters\">fireflycons/PSDynamicParameters</a></strong></div><div>Library for creating PowerShell dynamic parameters for binary cmdlets - fireflycons/PSDynamicParameters</div></blockquote>\n<blockquote><img src=\"https://avatars1.githubusercontent.com/u/34012094?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/fireflycons/PSDynamicParameters\">fireflycons/PSDynamicParameters</a></strong></div><div>Library for creating PowerShell dynamic parameters for binary cmdlets - fireflycons/PSDynamicParameters</div></blockquote>\n<blockquote><img src=\"/assets/images/favicon-blue.ico\" width=\"48\" align=\"right\"><div><strong><a href=\"https://ci.appveyor.com/project/fireflycons/psdynamicparameters/builds/32297830\">AppVeyor</a></strong></div></blockquote>\n<blockquote><img src=\"/assets/images/favicon-blue.ico\" width=\"48\" align=\"right\"><div><strong><a href=\"https://ci.appveyor.com/project/fireflycons/psdynamicparameters/builds/32291659\">AppVeyor</a></strong></div></blockquote>",
      "created_at": "2020-04-20T06:53:51Z",
      "updated_at": "2020-04-20T06:53:53Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@fireflycons Yeah that's correct.  That cmdlet throws `PlatformNotSupportedException` when invoked on non-Windows by design.  That exception is surfaced through the `PowerShell.Invoke` method.",
      "created_at": "2020-04-20T14:12:19Z",
      "updated_at": "2020-04-20T14:12:19Z"
    },
    {
      "author": "fireflycons",
      "author_association": "NONE",
      "body": "@SeeminglyScience Presumably `Set-ExecutionPolicy`\r\n\r\nIf you look at the links I posted above back to my project, the `PlatformNotSupportedException` is being received through the error stream. `PowerShell.Invoke()` is _not_ throwing directly. That's what initially led me to believe the get accessor was faulting, when in fact it was just returning the exception on the stream.\r\n\r\nHowever, I shall modify the code to only call `Set-ExecutionPolicy` if running on Windows and see if this improves things.\r\n",
      "created_at": "2020-04-20T14:51:46Z",
      "updated_at": "2020-04-20T18:22:44Z"
    },
    {
      "author": "fireflycons",
      "author_association": "NONE",
      "body": "Ha - it was indeed that!\r\n\r\nThanks v much for your assistance in helping me track this down. All good now, so I'll close.\r\n",
      "created_at": "2020-04-20T20:43:24Z",
      "updated_at": "2020-04-20T20:43:24Z"
    }
  ],
  "created_at": "2020-04-19T11:30:40Z",
  "labels": [
    "Issue-Question"
  ],
  "number": 12383,
  "state": "closed",
  "title": "System.Managment.Automation.PowerShell throws when accessing properties after Invoke() on Linux",
  "updated_at": "2020-04-20T20:43:24Z"
}