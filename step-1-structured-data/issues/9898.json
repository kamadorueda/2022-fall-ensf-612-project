{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9898",
  "author": "dmitriyse",
  "body": "# Summary of the new feature/enhancement\r\n\r\nIf you want to allow your cmdlet to input argument as from pipeline as from input array or from remaining arguments then you are in troubles.\r\n\r\n```PowerShell\r\nfunction Read-FancyInputArgumentsLogoCmdlet {\r\n    [cmdletbinding()]\r\n    param(\r\n        [Parameter(Position = 0, ValueFromRemainingArguments, ValueFromPipeline)]\r\n        $MyArgs) # Do not specify a type!\r\n\r\n    begin {\r\n        [System.Collections.Generic.List[string]]$inputArgs = @()\r\n    }\r\n    process {\r\n        if ($null -ne $MyArgs) {\r\n            if ($MyArgs -is [string]) {\r\n                $inputArgs.Add($MyArgs)\r\n            }\r\n            elseif ($MyArgs -is [System.Collections.IEnumerable]) {\r\n                # PowerShell <= 5.1 bug workaround\r\n                if ($PSVersionTable.PSVersion -lt \"6.0\" `\r\n                        -and $MyArgs -is [System.Collections.Generic.List[object]] `\r\n                        -and $MyArgs.Count -eq 1 `\r\n                        -and $MyArgs[0] -is [System.Collections.IEnumerable]) {\r\n                    $MyArgs = $MyArgs[0]\r\n                }\r\n\r\n                $MyArgs | % {\r\n                    $inputArgs.Add($_)\r\n                }\r\n            }\r\n            else {\r\n                $inputArgs.Add($MyArgs)\r\n            }\r\n        }\r\n    }\r\n    end {\r\n        Write-Host \"-------- Args -------\"\r\n        $inputArgs | % { Write-Host $_ }\r\n    }\r\n}\r\n\r\n# Usage tests:\r\nRead-FancyInputArgumentsLogoCmdlet # No args\r\nRead-FancyInputArgumentsLogoCmdlet \"SingleArg\"\r\nRead-FancyInputArgumentsLogoCmdlet \"Multi\" \"Args\"\r\n@(\"Pile\", \"line\") | Read-FancyInputArgumentsLogoCmdlet\r\n$null | Read-FancyInputArgumentsLogoCmdlet\r\n[System.Management.Automation.Internal.AutomationNull]::Value | Read-FancyInputArgumentsLogoCmdlet\r\n# Read-FancyInputArgumentsLogoCmdlet [System.Management.Automation.Internal.AutomationNull]::Value It's not supported\r\n@($null, \"123\") | Read-FancyInputArgumentsLogoCmdlet\r\n@(\"\", \"123\") | Read-FancyInputArgumentsLogoCmdlet\r\nRead-FancyInputArgumentsLogoCmdlet \"123\" \"\"\r\n\r\nRead-FancyInputArgumentsLogoCmdlet @(\"Args\", \"Array\")\r\n```\r\nOutput:\r\n```\r\n-------- Args -------\r\n-------- Args -------\r\nSingleArg\r\n-------- Args -------\r\nMulti\r\nArgs\r\n-------- Args -------\r\nPile\r\nline\r\n-------- Args -------\r\n-------- Args -------\r\n-------- Args -------\r\n123\r\n-------- Args -------\r\n\r\n123\r\n-------- Args -------\r\n123\r\n\r\n-------- Args -------\r\nArgs\r\nArray\r\n```\r\n\r\nThe provided code behaves similar in both PS Core and Windows PowerShell.\r\n\r\nPlease make all these tricks just like language construct\r\n```PowerShell\r\nfunction Read-FancyInputArgumentsLogoCmdlet {\r\n    [cmdletbinding()]\r\n    param(\r\n        [Parameter(ValuesFromEverywhere)]\r\n        [string]$MyArg)\r\n    begin {\r\n        [System.Collections.Generic.List[string]]$inputArgs = @()\r\n    }\r\n    process {\r\n        $inputArgs.Add($MyArg)\r\n    }\r\n    end {\r\n        Write-Host \"-------- Args -------\"\r\n        $inputArgs | % { Write-Host $_ }\r\n    }\r\n}\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@dmitriyse Could you please search in the repo - it seems we have some discussions about the problem",
      "created_at": "2019-06-15T19:12:50Z",
      "updated_at": "2019-06-15T19:12:50Z"
    }
  ],
  "created_at": "2019-06-14T08:17:01Z",
  "number": 9898,
  "state": "open",
  "title": "Clean way to define multi-value cmdlets for both PS Core and Windows PowerShell",
  "updated_at": "2019-06-15T19:12:50Z"
}