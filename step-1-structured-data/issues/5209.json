{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5209",
  "author": "powercode",
  "body": "#3400 \r\n\r\nAdding `TargetFramework` property to csprojs. This needs to be in each project to work around a visual studio issue where it doesn't react to TargetFramework set in an imported file.\r\nUpdating sln to reflect the change of project types to .net core\r\nremoving obsolete resources that makes the build fail.\r\n\r\nAt least I think the resources are obsolete :) \r\nHope reviewers can verify.\r\n",
  "closed_at": "2018-04-03T17:16:45Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think we should add `TargetFramework` property to `PowerShell.Common.props` not every csproj.",
      "created_at": "2017-10-25T06:46:37Z",
      "updated_at": "2017-10-25T06:46:37Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "The whole point of having it in every project is to work around the issue that visual studio issue doesn't understand TargetFramework from imported files.",
      "created_at": "2017-10-25T06:54:16Z",
      "updated_at": "2017-10-25T06:54:16Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "The property already is in `PowerShell.Common.props`. ",
      "created_at": "2017-10-25T06:55:59Z",
      "updated_at": "2017-10-25T06:55:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I wonder how and why the trick works.",
      "created_at": "2017-10-25T07:48:35Z",
      "updated_at": "2017-10-25T07:48:35Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "My guess is that they explicitly look for the property in the file, but using the full logic for evalutating it's value. ",
      "created_at": "2017-10-25T11:32:02Z",
      "updated_at": "2017-10-25T11:32:02Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "By doing this, we can at least keep the value consistent, and updatable in one place, while still being able to use Visual Studio. \r\n\r\nI agree it isn't ideal, and it should be removed if VS fixes the issue. \r\nI haven't checked where this can be reported.  @PowerShellTeam anyone got any good connections in devdiv?",
      "created_at": "2017-10-25T11:34:43Z",
      "updated_at": "2017-10-25T11:34:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It would be good to have a comment from VS team that is best way in the case.",
      "created_at": "2017-10-25T12:29:23Z",
      "updated_at": "2017-10-25T12:29:23Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "And maybe a comment in the csproj files why that strange construct is used.",
      "created_at": "2017-10-25T13:00:15Z",
      "updated_at": "2017-10-25T13:00:15Z"
    },
    {
      "author": "Bhaal22",
      "author_association": "CONTRIBUTOR",
      "body": "@This issue looks to be related to the issue experienced here: \r\n\r\nhttps://github.com/dotnet/project-system/issues/1358",
      "created_at": "2017-11-28T23:21:23Z",
      "updated_at": "2017-11-28T23:21:50Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@powercode \r\nI have tried your fork on my local machine. I ran `Start-PSBootStrap`, installed the .Net Core SDK 2.0.0 (since this is the state of your fork), ran a `dotnet restore` on the solution and had to pre-build it using `Start-PSBuild`. Then trying to build in VS still yields some errors:\r\n![image](https://user-images.githubusercontent.com/9250262/33521008-c8026a42-d7bd-11e7-9cdb-c4d4ac1aa732.png)\r\nAlso I have seen that all projects are practically empty in Solution Explorer because in all the projects source code is marked as `<Compile Remove=*.cs>`. We need to be able to see the source code files in VS in order for it to be useful. How does the whole build system work if the source code files are removed from compilation, does the `TypeCatalogGen` do all that work?\r\n\r\n",
      "created_at": "2017-12-02T23:52:09Z",
      "updated_at": "2017-12-03T10:41:25Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@bergmeister That is wierd. That reference is removed in c8e4192 \r\n\r\nAre you sure you are running on my branch? Without these changes, all source files are hidden in Visual Studio, but with the TargetFrameworkVersion, it seems to work as expected.\r\n",
      "created_at": "2017-12-15T13:05:54Z",
      "updated_at": "2017-12-15T13:07:42Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@powercode Sorry, I was caught out by cloning your fork but being on the wrong branch. I can see the files now in solution explorer but building only seems to work if the repo is pre-build via command line via `Start-PSBuild` (just running `Start-ResGen` is not sufficient). I am using using VS 15.5.2 on Win10.",
      "created_at": "2017-12-15T19:27:55Z",
      "updated_at": "2017-12-15T19:27:55Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@powercode : can you please downstream changes from master to your fork since GitHub does not allow to have [multiple forks](https://stackoverflow.com/a/40367495/1810304) so that people can start using it already. What timeline do we expect until this is merged into master @TravisEz13 ?\r\nDownstreaming can be done as follows:\r\n````powershell\r\ncd $PowerShellCheckout\r\ngit checkout vs-csproj\r\ngit remote add upstream https://github.com/PowerShell/PowerShell.git\r\ngit pull upstream master\r\ngit push\r\n````\r\n",
      "created_at": "2017-12-19T18:49:46Z",
      "updated_at": "2017-12-19T18:49:46Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@bergmeister , @daxian-dbw  is assigned to this PR.\r\nI've restarted Travis-CI linux due to markdown test failures due to out of date code.  hopefully github will remerge on it's own.",
      "created_at": "2017-12-20T20:11:11Z",
      "updated_at": "2017-12-20T20:11:11Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Rebased on master.",
      "created_at": "2018-01-24T20:39:19Z",
      "updated_at": "2018-01-24T20:39:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@markekraus Do you use Visual Studio? Could you review the PR?",
      "created_at": "2018-01-25T12:17:35Z",
      "updated_at": "2018-01-25T12:17:35Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov I have Visual Studio, but I'm not familiar with it (I use VS Code). You are better off asking for a review @rkeithhill and/or @bergmeister. I believe they are both familiar with Visual Studio.",
      "created_at": "2018-01-25T12:43:02Z",
      "updated_at": "2018-01-25T12:43:02Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "I can take a look again since I have to use VS nearly the whole day but my review from a user's perspective is already [here](https://github.com/PowerShell/PowerShell/pull/5209#issuecomment-352091250)\r\nBut it definitely makes sense if others chip in as well.",
      "created_at": "2018-01-25T12:59:07Z",
      "updated_at": "2018-01-25T12:59:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Could you please continue with the PR?",
      "created_at": "2018-01-25T13:23:53Z",
      "updated_at": "2018-01-25T13:23:53Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "We need to actually use the changes for a few days to get a feel. I suggest all active maintainers to try out the changes. /cc @PowerShell/powershell-maintainers \r\nAlso, for anyone who want/like this PR, please also try out the changes and help bring up issues. The more eyes the merrier :)",
      "created_at": "2018-01-25T20:22:16Z",
      "updated_at": "2018-01-25T20:22:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "1. Step\r\n\r\ngit clean -fdX\r\nrun Build in VS\r\n\r\n========== Rebuild All: 0 succeeded, 13 failed, 0 skipped ==========\r\n\r\nI found related https://github.com/dotnet/project-system/issues/2129\r\n\r\n2. Step\r\n\r\ndotenet restore\r\nrun Build in VS\r\n\r\nWe see two errors \"Invalid Resx file\" with xsd.\r\nsrc\\System.Management.Automation\\resources\\CmdletizationCoreResources.resx\r\nsrc\\Microsoft.PowerShell.Commands.Management\\resources\\CmdletizationResources.resx\r\n\r\n\r\n3.Step\r\n\r\nAfter fix this Resx files\r\nrun Build in VS\r\n\r\nvisual studio cannot start debugging because the debug target is missing exe\r\n\r\nWe haven't compiled resources.\r\n\r\n4. Step\r\n\r\nrun our RexGen\r\nrun Build in VS\r\n\r\nWe haven't \"InitializeTypeCatalog\"\r\n\r\n5. Step\r\n\r\nrun our TypeGen\r\nrun Build in VS\r\n\r\nNow we build well.\r\n\r\n6 Step\r\n\r\nrun from VS\r\nor\r\nrun debugging in VS\r\n\r\nGet error: visual studio cannot start debugging because the target '<Path>\\pwsh.exe' is missing \r\nReally there is no thefile - only pwsh.dll\r\n\r\n[VS2017trace.txt](https://github.com/PowerShell/PowerShell/files/1667105/VS2017trace.txt)\r\n\r\n",
      "created_at": "2018-01-26T08:30:35Z",
      "updated_at": "2018-01-26T08:31:52Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Until we move resource generation into a msbuild task, we will have to complete a cmdline build first.\r\n\r\nI set up a publishing rule to publish a build before debugging, and manually configured the debug target.\r\nDebugging is generally not something you share, since you often start with different arguments.\r\n",
      "created_at": "2018-01-26T13:27:13Z",
      "updated_at": "2018-01-26T13:27:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I already push PR #3870 for TypeGen but it don't approved a long time. I already patched our temp utility for ResGen in PR #3918 and ready to push PR to run it by MSBuild.",
      "created_at": "2018-01-26T16:04:45Z",
      "updated_at": "2018-01-26T16:04:45Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "I created a new PR based on this one.  #6546   I've verified it works and the fix is simpler.  I based it on your fix.  I think we should probably close this one.  Thanks, Travis . Thanks for your help.",
      "created_at": "2018-04-03T02:23:06Z",
      "updated_at": "2018-04-03T02:23:06Z"
    }
  ],
  "created_at": "2017-10-24T10:00:04Z",
  "number": 5209,
  "state": "closed",
  "title": "Build: Make powershell build in Visual Studio",
  "updated_at": "2018-04-03T17:16:45Z"
}