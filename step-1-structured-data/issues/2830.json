{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2830",
  "author": "PaulHigin",
  "body": "It would be good to have the ability to drop into the script debugger on error.  This is relatively easy for non-terminating errors since the PowerShell engine continues to run and so the debugger runs.  But exceptions are trickier since the process state is unknown.  For exceptions thrown by PowerShell (ErrorAction: \"Stop\") we could stop in the debugger before throwing the exception.  It might be possible to have an unhandled exception handler to allow inspection of the runspace on a thrown exception.",
  "closed_at": "2020-09-22T22:56:40Z",
  "comments": [
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I'd love to wire such a feature up to Visual Studio Code's exception breakpoints.",
      "created_at": "2016-12-01T23:45:12Z",
      "updated_at": "2016-12-01T23:45:12Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Consider exposing this as `set-psbreakpoint -breakonerror`",
      "created_at": "2017-02-10T17:56:30Z",
      "updated_at": "2017-02-10T17:56:30Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Seems like you could install an unhandled exception filter to catch the exception during the first pass - in which case, process state should still be known.  I particularly like this old Matt Pietrek article on the subject - https://www.microsoft.com/msj/0197/Exception/Exception.aspx",
      "created_at": "2017-02-10T18:18:40Z",
      "updated_at": "2017-02-10T18:18:40Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT  Agreed.\r\n@rkeithhill It turns out we already have this in the expression IL for exception handling routing (try/catch, trap) and we can use this to hook into the debugger.  Still lots of details to work out but this looks very doable.",
      "created_at": "2017-02-10T19:03:20Z",
      "updated_at": "2017-02-10T19:03:20Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Thanks to @lzybkr  for pointing this out.",
      "created_at": "2017-02-10T19:03:59Z",
      "updated_at": "2017-02-10T19:03:59Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT alternative:\r\n\r\n`Debug-Runspace -BreakOnError`\r\n`Set-RunspaceDebug -BreakOnError`",
      "created_at": "2019-05-22T14:38:53Z",
      "updated_at": "2019-05-22T14:39:07Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "EDIT: Moving my comments and vscode workaround to https://github.com/PowerShell/vscode-powershell/issues/298",
      "created_at": "2019-07-21T16:59:08Z",
      "updated_at": "2019-07-21T18:56:51Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "This has been implemented by Kirk as an experimental feature.",
      "created_at": "2020-09-22T22:56:40Z",
      "updated_at": "2020-09-22T22:56:40Z"
    }
  ],
  "created_at": "2016-12-01T23:39:20Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Interactive-Debugging"
  ],
  "number": 2830,
  "state": "closed",
  "title": "Add a script debugger \"break on error\"",
  "updated_at": "2020-09-22T22:56:40Z"
}