{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3671",
  "author": "mklement0",
  "body": "Treating scalars as if they were collections is a powerful feature that eliminated many bugs when it was introduced in PSv3: it means that even a single object returns meaningful values for `.Count` and `.Length` and allows indexing with `[0]`.\r\n\r\nUnfortunately, not _all_ scalar objects behave this way, a notable exception being custom objects (`[pscstomobject]`), such as the instances created by `Select-Object`.\r\n\r\nThe problem is the absence of the `.Count` / `.Length` properties.\r\nSimilarly, using _collection operators_ `.Where()` and `.ForEach()` also does _not_ work.\r\n\r\nBy contrast, _indexing_ custom objects with `[0]` _does_ work.\r\n\r\nI wonder if there are other cases where cmdlets return objects (other than `[pscustomobject]` instances) that behave the same way.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n$null.Count\r\n(Get-Item /).Count\r\n(Get-Item / | Select-Object Name).Count  # !! produces no output\r\n([pscustomobject] @{ foo = 'bar' }).Count # !! produces no output\r\n```\r\n\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```powershell\r\n0\r\n1\r\n1\r\n1\r\n```\r\n\r\n\r\nActual behavior\r\n---------------\r\n\r\n```powershell\r\n0\r\n1\r\n```\r\n\r\n^ 3rd and 4th command didn't produce output, because the implicitly and explicitly created `[pscustomobject]` instances have no `.Count` and `.Length` properties.\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-alpha (v6.0.0-alpha.18) on Darwin Kernel Version 16.5.0: Fri Mar  3 16:52:33 PST 2017; root:xnu-3789.51.2~3/RELEASE_X86_64\r\n```\r\n",
  "closed_at": "2018-01-05T18:54:31Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It is behavior of `pscustomobject`:\r\n```powershell\r\n([PSCustomObject]@{q=1}).Count\r\n<empty>\r\n\r\n([PSObject]@{q=1}).Count\r\n1\r\n\r\n```\r\n",
      "created_at": "2017-05-02T12:46:42Z",
      "updated_at": "2017-05-02T12:46:42Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov \r\n\r\nThanks for the clarification - that simplifies the issue.\r\nI've updated the title and the initial post accordingly. \r\n\r\n",
      "created_at": "2017-05-02T12:59:51Z",
      "updated_at": "2017-05-02T13:02:42Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Where can I start?",
      "created_at": "2017-05-03T14:05:22Z",
      "updated_at": "2017-05-03T14:05:22Z"
    },
    {
      "author": "KevinMarquette",
      "author_association": "CONTRIBUTOR",
      "body": "This is also an issue for `foreach` and `where` methods.\r\n\r\n    $test = [pscustomobject]@{a=1}\r\n    $test.foreach({$_})\r\n    Method invocation failed because [System.Management.Automation.PSCustomObject] does not contain a method named 'foreach'\r\n\r\nOther single objects and null have support for this method.\r\n\r\n    $null.foreach({$_})\r\n\r\n    $date = get-date\r\n    $date.foreach({$_})\r\n    Wednesday, December 20, 2017 11:03:18 AM\r\n\r\n\r\nI suspect they are the same underlying issue is why I didn't create a new issue for this.\r\n",
      "created_at": "2017-12-20T19:09:23Z",
      "updated_at": "2017-12-20T19:09:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr Could you please help - where is the magic code?",
      "created_at": "2017-12-21T13:08:02Z",
      "updated_at": "2017-12-21T13:08:02Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I think the magic code is [here](https://github.com/PowerShell/PowerShell/blob/c17a975683a0df639030521777d9cdc764784799/src/System.Management.Automation/engine/runtime/Binding/Binders.cs#L5299) but I'd need to debug to see what's going wrong because I don't see the bug with code inspection.",
      "created_at": "2017-12-21T17:42:57Z",
      "updated_at": "2017-12-21T17:42:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The code isn't called at all \ud83d\ude15 ",
      "created_at": "2017-12-22T13:26:34Z",
      "updated_at": "2017-12-22T13:26:34Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@iSazonov - I don't normally write code that isn't called :)  It is possible that the code I pointed to isn't reachable for `pscustomobject`, but it is definitely reachable.\r\n\r\nI will also point out - most of the code in binders.cs is generating code for an operation which is cached, so if some binding happened before you set a breakpoint, you'll never hit it again. For example, if you attach after startup, it's possible loading a module or even evaluating your prompt hit the code and you won't hit it again.\r\n\r\nStarting the process under the debugger helps, or you can resort to adding some trace output or a message box so you can attach and debug.",
      "created_at": "2017-12-22T20:47:30Z",
      "updated_at": "2017-12-22T20:47:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "\ud83d\ude04 Yes, I meant `pscustomobject` context. And yes, it is cache - after first call the code isn't called for \"Count\".\r\n\r\nI discover a difference in `GetPSMemberInfo` in [line](https://github.com/PowerShell/PowerShell/blob/c17a975683a0df639030521777d9cdc764784799/src/System.Management.Automation/engine/runtime/Binding/Binders.cs#L5499)\r\n- `([PSObject]@{q=1}).Count` - adapterSet is `DotNetAdapter` and canOptimize is true\r\n- `([PSCustomObject]@{q=1}).Count` - adapterSet is `PSObjectAdapter` and canOptimize is false\r\n\r\nIf I change  canOptimize to true in debuger I get right output - Count = 1.\r\n\r\nI don't know that is right fix.\r\n ",
      "created_at": "2017-12-23T19:11:31Z",
      "updated_at": "2017-12-23T19:11:31Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "That is not the right fix.\r\n\r\nI think the right fix is to change `PSGetMemberBinder.GetAdaptedValue` - before the check at the end to throw `PropertyNotFoundException`, check it the member name is `Count` and just return 1.",
      "created_at": "2017-12-24T05:04:03Z",
      "updated_at": "2017-12-24T05:04:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "First part was fixed - ([pscustomobject] @{ foo = 'bar' }).Count returns 1.",
      "created_at": "2017-12-28T09:01:59Z",
      "updated_at": "2017-12-28T09:01:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr I again don't know where right fix is for Foreach/Where.\r\nI found that if I changed `canOptimize` to `true` in [the line ](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/runtime/Binding/Binders.cs#L6494) the ([PSCustomObject]@{q=1}).Foreach({$_}) works due to [the line](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/runtime/Binding/Binders.cs#L6597). Also we have a special case for `$null.Where` in [the line](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/runtime/Binding/Binders.cs#L6403)\r\nCould you please help?\r\n",
      "created_at": "2017-12-28T11:31:14Z",
      "updated_at": "2017-12-28T11:31:14Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@iSazonov - the change will be similar to what you did for `Count`, but it will be in `PSInvokeMemberBinder.InvokeAdaptedMember` and would return an empty `Collection<object>` in both cases.",
      "created_at": "2017-12-28T17:05:26Z",
      "updated_at": "2017-12-28T17:05:26Z"
    }
  ],
  "created_at": "2017-05-01T18:19:17Z",
  "labels": [
    "Issue-Bug",
    "WG-Language",
    "Up-for-Grabs",
    "Resolution-Fixed"
  ],
  "number": 3671,
  "state": "closed",
  "title": "Treating scalars implicitly as collections doesn't fully work with custom objects ([pscustomobject]) - lacks a .Count property",
  "updated_at": "2018-02-08T07:26:29Z"
}