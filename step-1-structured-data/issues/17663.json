{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17663",
  "author": "mklement0",
  "body": "### Summary of the new feature / enhancement\r\n\r\nAs of this writing, https://aka.ms/install-powershell.ps1 (https://raw.githubusercontent.com/PowerShell/PowerShell/master/tools/install-powershell.ps1) hard-codes the architecture on non-Windows platforms to 'x64'.\r\n\r\nE.g.:\r\nhttps://github.com/PowerShell/PowerShell/blob/1ba64540542ab9f2743800f1e4e306a0672a8093/tools/install-powershell.ps1#L249-L250\r\n\r\nThus, for instance, if you call it on an M1 Mac (ARM64), the wrong build (that runs under the Rosetta 2 emulation) is installed.\r\n\r\nNote that the script isn't just handy for _installing_ PowerShell (which would present a bootstrapping problem on non-Windows platforms), but also for _later updates_.\r\n\r\n### Proposed technical implementation details (optional)\r\n\r\n[_Update_: `[System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture` is probably the best choice for detecting ARM platforms - see discussion below.]\r\n\r\n* <del>On macOS you can detect an M1 (ARM64) Mac as follows (note that `uname -m` does _not_ work reliably, because if you call it from a program running under Rosetta 2, the Intel emulation environment, it reports `x86_64`).</del>\r\n\r\n  * <del>`(uname -a) -cmatch '_ARM64_'`.</del>\r\n\r\n* <del>On Linux distros: TBD, though I would expect `uname -a` to contain similar information.</del>",
  "closed_at": null,
  "comments": [
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Using this to detect the process arch is probably a better idea.\r\n\r\n```powershell\r\n[System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture\r\n```\r\n\r\nThere's also `OSArchitecture` to detect the OS rather than the process one.",
      "created_at": "2022-07-11T23:13:52Z",
      "updated_at": "2022-07-11T23:13:52Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @jborean93: that is good to know in general, but a macOS process running under Rosetta 2 still misreports the architecture in this case.\r\n\r\nThat said, perhaps such a scenario isn't worth worrying about (it arose, because I had an x64 PowerShell installation on my M1 (ARM64) Mac).\r\n \r\n",
      "created_at": "2022-07-11T23:35:34Z",
      "updated_at": "2022-07-11T23:35:34Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "What is being misrepresented? The ProcessArchitecture should be the arch of the running process; x64 for Rosetta and Arm64 for native, and OSArchitecture should be foe the OS in general.",
      "created_at": "2022-07-12T00:01:05Z",
      "updated_at": "2022-07-12T00:01:05Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "```bash\r\nbash-5.1$ file /usr/local/bin/pwsh\r\n/usr/local/bin/pwsh: Mach-O 64-bit executable arm64\r\nbash-5.1$ pwsh -NoLogo -NoProfile -Command '[System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture'\r\nArm64\r\n\r\nbash-5.1$ file /tmp/pwsh/pwsh\r\n/tmp/pwsh/pwsh: Mach-O 64-bit executable x86_64\r\nbash-5.1$ /tmp/pwsh/pwsh -NoLogo -NoProfile -Command '[System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture'\r\nX64\r\n```\r\n\r\nWhen testing it locally. The `pwsh` in `/tmp/pwsh` is a just the extracted `pwsh` package for x64 on macOS.",
      "created_at": "2022-07-12T00:05:15Z",
      "updated_at": "2022-07-12T00:10:50Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I'm unsure about the design intent, but I was speaking from the perspective of: \"tell me the true CPU architecture of the _host OS_, irrespective of what emulation the _current process_ may be running under\", which is what `[System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture` does _not_ do when running under Rosetta 2: it reports `X64`, just as for the process.\r\n\r\nThis behavior seems inconsistent with the behavior of `[Environment]::Is64BitProcess` / `[Environment]::Is64BitOperatingSystem`, where the latter truly tells you something about the _OS_, not about an emulation framework that happens to be running on top of it.\r\n\r\nBut leaving this question about the behavior of a .NET API aside (which is worth resolving separately), at the end of the day this issue comes down to:\r\n \r\n* If `install-powershell.ps1` is invoked from a Rosetta 2 process, should it honor the _emulated_ world it is seeing and therefore install an x64 package, or honor the _true, underlying_ world, and therefore install an ARM64 package?\r\n\r\nI do see that my starting point was exotic, and I don't feel strongly either way.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2022-07-12T01:26:45Z",
      "updated_at": "2022-07-12T01:26:45Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Ah ok sorry, I assumed you were saying `ProcessArchitecture` was incorrect not `OSArchitecture`. I see a few issues on the latter but it's unclear whether it's by design or needs to be fixed.\r\n\r\nAs for your question I think it's a tricky one. Considering on non-Windows hosts you are expected to have PowerShell anyway you would assume it should just re-use the existing process architecture and have it act as an upgrade like tool. An extra switch could be added to allow people to opt into the \"native\" arch or a switch to select based on the user's desired.",
      "created_at": "2022-07-12T01:49:11Z",
      "updated_at": "2022-07-12T01:49:11Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thinking about this some more: my starting point (x64 package on an ARM OS) wasn't just exotic, but amounts to an _ill-advised_ configuration (unless there's a good reason for it that I'm missing).\r\n\r\nAs such, I don't think we need to worry about accommodating it, and there's probably not even a need for a switch.\r\n\r\nTherefore, your suggestion to use `[System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture` is probably the way to go, which is consistent with the script acting as an upgrade tool.\r\n\r\n(With this in place, the only way to get into trouble would then be to _initially_ install the wrong package.)\r\n\r\n---\r\n\r\nAs for the .NET API itself: I now think it is just the messenger here, presumably relaying information from a system call, given that `uname -m` - intended to return the \"machine hardware name\" - reports `x86_64` under Rosetta 2 as well.\r\n\r\n\r\n",
      "created_at": "2022-07-12T12:24:13Z",
      "updated_at": "2022-07-12T12:24:13Z"
    }
  ],
  "created_at": "2022-07-11T21:16:46Z",
  "number": 17663,
  "state": "open",
  "title": "Make https://aka.ms/install-powershell.ps1 support non-Windows ARM platforms",
  "updated_at": "2022-07-14T01:33:17Z"
}