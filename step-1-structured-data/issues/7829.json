{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7829",
  "author": "VortexUK",
  "body": "To be clear, all the above was done in PowerShell Core, however I can also reproduce this in PoSH. Almost Identical to #7193 \r\n\r\nSteps to reproduce\r\n------------------\r\n2 separate sessions required\r\n\r\nSession 1\r\n```\r\nNew-PSDrive -Name J -PSProvider FileSystem -Root \"\\\\contoso.com\\share\" -Description Test -Scope Global -Persist\r\n```\r\n\r\nSession 2\r\n```\r\n> get-psdrive -name J\r\n\r\nName           Used (GB)     Free (GB) Provider      Root                                               CurrentLocation\r\n----           ---------     --------- --------      ----                                               ---------------\r\nJ                   2.44      10237.44 FileSystem    \\\\contoso.com\\share\r\n\r\n\r\n> remove-psdrive -name J\r\n> get-psdrive -name J\r\n\r\nName           Used (GB)     Free (GB) Provider      Root                                               CurrentLocation\r\n----           ---------     --------- --------      ----                                               ---------------\r\nJ                   2.44      10237.44 FileSystem    \\\\contoso.com\\share\r\n\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nFor it to actually delete J, similar to 'net use J: /delete'\r\n```none\r\n\r\n```\r\n\r\nActual behavior\r\n---------------\r\nIt does not delete J, or error. running\r\n```none\r\nPS > net use J: /delete\r\nJ: was deleted successfully.\r\n```\r\nWorks as expected\r\n\r\nEnvironment data\r\n----------------\r\n\r\n\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0\r\nOS                             Microsoft Windows 10.0.14393\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Does it work using `Remove-PSDrive -Scope Global`?",
      "created_at": "2018-09-20T16:14:03Z",
      "updated_at": "2018-09-20T16:14:03Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@VortexUK,\r\n\r\nGreatly Appreciate submitting this issue.  \r\n:)",
      "created_at": "2018-09-20T16:18:08Z",
      "updated_at": "2018-09-20T16:18:08Z"
    },
    {
      "author": "thezim",
      "author_association": "CONTRIBUTOR",
      "body": "To be clear *-PSDrive cmdlets are not using the same API as `net use`. You can't cross that boundary are far as I'm aware.\r\n\r\nhttps://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/new-psdrive?view=powershell-6",
      "created_at": "2018-09-20T23:42:00Z",
      "updated_at": "2018-09-20T23:42:00Z"
    },
    {
      "author": "VortexUK",
      "author_association": "NONE",
      "body": "I wasn't suggesting they are the same @thezim , it was more showing that it was *possible* to delete the drive using other tools.\r\n\r\n@vexx32 - same issue:\r\n\r\n```\r\n> get-psdrive -name J\r\n\r\nName           Used (GB)     Free (GB) Provider      Root                                               CurrentLocation\r\n----           ---------     --------- --------      ----                                               ---------------\r\nJ                   2.44      10237.44 FileSystem    \\\\contoso.com\\share\r\n\r\n\r\n>  remove-psdrive -name J -Scope Global\r\n> get-psdrive -name J\r\n\r\nName           Used (GB)     Free (GB) Provider      Root                                               CurrentLocation\r\n----           ---------     --------- --------      ----                                               ---------------\r\nJ                   2.44      10237.44 FileSystem    \\\\contoso.com\\share\r\n```",
      "created_at": "2018-09-21T08:12:36Z",
      "updated_at": "2018-09-21T08:13:56Z"
    },
    {
      "author": "agoldenlife",
      "author_association": "NONE",
      "body": "For those finding this.  I went looking and found someone much smarter than I who knows how to do this properly.  There are several ways to create network drives and Remove-PSDrive is not a catch all to remove them.\r\n\r\nSource\r\nhttps://blogs.msmvps.com/russel/tag/remove-psdrive/\r\n\r\nHere is the code in case the link ever breaks\r\n```\r\n<#\r\n.SYNOPSIS\r\nUnmaps network drives\r\n.DESCRIPTION\r\nUnmapdrives removes all currently mapped network drives. It's smart enough to \r\nremove drives mapped with \"net use\", \"New-SmbMapping\" and \"New-PSDrive\". This \r\ncmdlet accepts no parameters and assumes -Force for all unmappings. \r\n\r\n.EXAMPLE\r\nUnMapDrives \r\nUnmaps all currently mapped network drives \r\n\r\n.NOTES\r\n    Author: Charlie Russel\r\n Copyright: 2015 by Charlie Russel\r\n          : Permission to use is granted but attribution is appreciated\r\n   Initial: 06/27/2015 (cpr)\r\n   ModHist:\r\n :\r\n#>\r\n[CmdletBinding()]\r\n\r\n# Build a dynamic list of currently mapped drives\r\n$DriveList = Get-WMIObject Win32_LogicalDisk `\r\n     | Where-Object { $_.DriveType -eq 4 }\r\n\r\n# Don't bother running this if we don't have any mapped drives\r\n if ($DriveList) { \r\n    $SmbDriveList = $DriveList.DeviceID\r\n } else {\r\n    Write-Host \"No mapped drives found\"\r\n    Return\r\n}\r\n\r\nWrite-host \"Unmapping drive: \" -NoNewLine\r\nWrite-Host $SmbDriveList\r\nWrite-Host \" \"\r\n\r\nForeach ($drive in $SmbDriveList) {\r\n    $psDrive = $drive -replace \":\" #remove unwanted colon from PSDrive name\r\n    Remove-SmbMapping -LocalPath $Drive -Force -UpdateProfile\r\n    If ( (Get-PSDrive -Name $psDrive) 2>$Null ) {\r\n       Remove-PSDrive -Name $psDrive -Force\r\n    }\r\n}\r\nWrite-Host \" \"\r\n\r\n# Report back all FileSystem drives to confirm that only local drives are present. \r\nGet-PSDrive -PSProvider FileSystem`\r\n```",
      "created_at": "2019-01-16T15:44:33Z",
      "updated_at": "2019-01-16T15:44:33Z"
    },
    {
      "author": "bitsnorbytes",
      "author_association": "NONE",
      "body": "Any updates on this issue? It's affecting my build pipelines. I have to use a `New-PSDrive` to add and `net use` to remove Network Drives. This inconsistency in my pipeline doesn't look great.   ",
      "created_at": "2019-05-20T20:45:51Z",
      "updated_at": "2019-05-20T20:45:51Z"
    },
    {
      "author": "mkanet",
      "author_association": "NONE",
      "body": "@agoldenlife  Thanks for the script.  But geez. I think it's a lot less hassle to just add the extra line below in (addition to Remove-PSDrive. if necessary) to accomplish removing the drive completely.  Pretty lame that they're interfering with one another.\r\n\r\nNET USE /del \\\\$Device 2>null",
      "created_at": "2019-06-11T16:41:56Z",
      "updated_at": "2019-06-11T16:41:56Z"
    },
    {
      "author": "agoldenlife",
      "author_association": "NONE",
      "body": "@mkanet I think you miss the point.  \r\n\r\nIn the code above you simply type \"unMapDrives\" and all of them are now removed.  I don't see how typing two commands (i.e. Remove-PSDrive and then net use /del \\$Device 2>null) is any easier.\r\n\r\nThe above code is written you so can load it into your powershell profile.   Once that is set you can use it as much as you want.  From then on out you just type the one command.  It is also nice because it gives you feedback and makes checks to ensure it all worked properly.  Your script outputs any errors to null so you have to check manually if it was successful or not.  Of course that may be what you want so... ymmv. \r\n\r\nThe nice thing about scripting is there are many ways to accomplish the same thing!  Thanks for commenting and showing what works for you.",
      "created_at": "2019-06-18T12:31:11Z",
      "updated_at": "2019-06-18T12:31:11Z"
    },
    {
      "author": "mkanet",
      "author_association": "NONE",
      "body": "@agoldenlife, I wasn't referring to the script you posted.  I meant using native PowerShell and ad-hoc cases; referring to to the OP of this thread.  Creating an UnMapDrives script, loading it, then execute the command would take significantly longer than just typing a couple of commands.  But yeah, if unMapDrives is already loaded in memory, it would be even quicker.",
      "created_at": "2019-06-18T14:55:53Z",
      "updated_at": "2019-06-18T14:55:53Z"
    },
    {
      "author": "erict-powersoft",
      "author_association": "NONE",
      "body": "Still broken on Windows 10  Enterprise 1809 build 17763.615",
      "created_at": "2019-08-15T15:48:51Z",
      "updated_at": "2019-08-15T15:48:51Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Hum! Although, it's broken in Windows PowerShell (no more changes here), and it hasn't been fix in PowerShell 7 (Core), there's a workaround.\r\n\r\nEither install the SMB components in the client machine, which seems to work flawlessly when using the New/Remove-SMBMapping cmdlets, or use the following command line:\r\n```\r\nGet-PSdrive -Name t | Remove-PSDrive\r\n```\r\nNow, this one-liner will give an error:\r\n```\r\nps> Get-PSdrive -Name t | Remove-PSDrive\r\nRemove-PSDrive : Cannot find drive. A drive with the name 't' does not exist.\r\nAt line:1 char:23\r\n+ Get-PSDrive -Name t | Remove-PSDrive\r\n+                       ~~~~~~~~~~~~~~\r\n    + CategoryInfo          : ObjectNotFound: (t:String) [Remove-PSDrive], DriveNotFoundException\r\n    + FullyQualifiedErrorId : DriveNotFound,Microsoft.PowerShell.Commands.RemovePSDriveCommand\r\n\r\nRemove-PSDrive : Cannot find drive. A drive with the name 't' does not exist.\r\nAt line:1 char:23\r\n+ Get-PSdrive -Name t | Remove-PSDrive\r\n+                       ~~~~~~~~~~~~~~\r\n    + CategoryInfo          : ObjectNotFound: (t:String) [Remove-PSDrive], DriveNotFoundException\r\n    + FullyQualifiedErrorId : DriveNotFound,Microsoft.PowerShell.Commands.RemovePSDriveCommand\r\n```\r\n![GetPSDrive_01_2019-08-15_18-42-53](https://user-images.githubusercontent.com/19892435/63131846-1f6c5c80-bf8d-11e9-835f-790ed700959f.png)\r\n\r\nBut, even with the error message, the drive is removed. \r\n\r\nSo, manually handle the error by including both the ErrorAction and ErrorVariable parameter to prevent the error to be displayed.\r\n```\r\nGet-PSdrive -Name t | Remove-PSDrive -ErrorAction SilentlyContinue -ErrorVariable rmDrive\r\n```\r\n![GetPSDrive_02_2019-08-15_18-42-53](https://user-images.githubusercontent.com/19892435/63132267-82122800-bf8e-11e9-8cf4-75fcb7154106.png)\r\n\r\nI know is just a workaround, and it does work in both versions of PowerShell (Windows and Core).\r\n\r\nWe'll have to wait for what the PowerShell Team decide to do about this one with PowerShell 7.\r\n\r\n:)\r\n\r\n",
      "created_at": "2019-08-15T22:57:47Z",
      "updated_at": "2019-08-15T22:59:07Z"
    },
    {
      "author": "dendy7h",
      "author_association": "NONE",
      "body": "Have you tried using the force? I had the same issue and found the answer in agoldenlife's script:\r\n```Remove-PSDrive -Name <drive_name> -Force```",
      "created_at": "2020-02-18T23:23:35Z",
      "updated_at": "2020-02-18T23:23:35Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Just an FYI.\r\n\r\nThis works in PowerShell 7 Preview RC2, even without using the -Force parameter.\r\n\r\n![PS7_removeDrive_2020-02-19_11-52-18](https://user-images.githubusercontent.com/19892435/74857234-69097b80-5311-11ea-977c-6c17cdfd4506.png)\r\n\r\nAnd, it also works in PowerShell 6.2.4:\r\n![PS624_removeDrive_2020-02-19_11-52-18](https://user-images.githubusercontent.com/19892435/74857547-d1585d00-5311-11ea-8756-b58e2db25b58.png)\r\n",
      "created_at": "2020-02-19T17:17:48Z",
      "updated_at": "2020-02-19T17:17:48Z"
    },
    {
      "author": "ScriptingPro",
      "author_association": "NONE",
      "body": "None of this working in PowerShell 5.1\r\n![image](https://user-images.githubusercontent.com/13045541/76897434-bf5ed100-6861-11ea-9d4a-5329e197f763.png)\r\n",
      "created_at": "2020-03-17T20:13:13Z",
      "updated_at": "2020-03-17T20:13:13Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@ScriptingPro \r\n\r\nKeep in mind! Windows PowerShell 5.1 is complete. So, any fixes are done against PowerShell 7 (or Greater). \r\n\r\nNo fixes will be done to Windows PowerShell 5.1.  Only security updates.\r\n:)\r\n\r\n ",
      "created_at": "2020-03-17T21:05:01Z",
      "updated_at": "2020-03-17T21:05:01Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Aye. If it's already fixed in PS 7, we can close this one. \ud83d\ude42",
      "created_at": "2020-03-17T22:05:54Z",
      "updated_at": "2020-03-17T22:05:54Z"
    },
    {
      "author": "justinsantoro",
      "author_association": "NONE",
      "body": "I don't think this is actually fixed. Like @MaximoTrinidad I am able to remove the drive if I had created it _within the same session_. However, like OP, If I create the persisted drive in one session then try to remove it in _another_ session, it does not work.\r\n\r\nAm I missing something?\r\n\r\n```Powershell\r\n> PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0\r\nOS                             Microsoft Windows 10.0.19041\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
      "created_at": "2020-03-19T15:30:16Z",
      "updated_at": "2020-03-19T15:30:16Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@justinsantoro \r\n\r\nI think it make sense that if the drive was created, and persisted, in session 1, that session 2 won't be able to remove it as it is still in use by session 1. \r\n\r\n:)",
      "created_at": "2020-03-19T18:00:24Z",
      "updated_at": "2020-03-19T18:00:24Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "If the first session is closed by the time session 2 tries to remove it, it should still be removable I would think. Is that the case @justinsantoro?",
      "created_at": "2020-03-19T21:22:34Z",
      "updated_at": "2020-03-19T21:22:34Z"
    },
    {
      "author": "simeyla",
      "author_association": "NONE",
      "body": "What a nightmare! (as Windows networking always seems to be)\r\n\r\nYou can also just right click on the drive in Explorer and click `Disconnect` :-) \r\nYou may need to reopen explorer.",
      "created_at": "2020-04-03T05:20:21Z",
      "updated_at": "2020-04-03T05:20:21Z"
    },
    {
      "author": "elliot-huffman",
      "author_association": "NONE",
      "body": "I have just reproduced this issue with PowerShell 7.0.0.",
      "created_at": "2020-04-24T14:33:55Z",
      "updated_at": "2020-04-24T14:33:55Z"
    },
    {
      "author": "VortexUK",
      "author_association": "NONE",
      "body": "> @justinsantoro\r\n> \r\n> I think it make sense that if the drive was created, and persisted, in session 1, that session 2 won't be able to remove it as it is still in use by session 1.\r\n> \r\n> :)\r\n\r\nThat doesn't make sense at all. The drive is a _persistent_ mapped drive, meaning it will continue well after a session has gone, through log outs and reboots. Conversely a session is exactly that - something temporary. The drive should be un-mappable from any session you chose with the right command, but, as shown in the original post, it is not. Also I should have mentioned in the original post, but -force, -scope etc have no affect on this bug. It... persists.\r\n\r\n\r\n> I have just reproduced this issue with PowerShell 7.0.0.\r\n\r\nThis is really disappointing!",
      "created_at": "2020-04-27T14:54:06Z",
      "updated_at": "2020-04-27T14:54:06Z"
    },
    {
      "author": "elliot-huffman",
      "author_association": "NONE",
      "body": "@vexx32 , can you please reopen this issue?\r\nThis is not fixed in 7.0.0",
      "created_at": "2020-04-27T15:45:45Z",
      "updated_at": "2020-04-27T15:45:45Z"
    },
    {
      "author": "TheBlaide",
      "author_association": "NONE",
      "body": "The issue still persists in pws 7.0.1.\r\n",
      "created_at": "2020-06-04T07:48:02Z",
      "updated_at": "2020-06-04T07:48:02Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@TheBlaide \r\n\r\nHum! It works for me! No issues at all.\r\n\r\n![PSDriveWorks_01_2020-06-05_10-28-14](https://user-images.githubusercontent.com/19892435/83890382-b58a9280-a719-11ea-85f6-12f77caf19c4.jpg)\r\n\r\n![PSDriveWorks_02_2020-06-05_10-28-14](https://user-images.githubusercontent.com/19892435/83890381-b4f1fc00-a719-11ea-9a19-42a04e27ffe1.jpg)\r\n\r\n```\r\nPS C:\\Users\\max_t> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.1\r\nPSEdition                      Core\r\nGitCommitId                    7.0.1\r\nOS                             Microsoft Windows 10.0.19041\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\nPS C:\\Users\\max_t>\r\n```\r\nWindows 10 Pro Version 2004\r\n```\r\nMicrosoft Windows [Version 10.0.19041.264]\r\n```\r\n:)",
      "created_at": "2020-06-05T14:46:26Z",
      "updated_at": "2020-06-05T14:48:27Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Reopening as some folks are still seeing this issue. Can we get environment data and exactly what code y'all are running to get the errors you're seeing as well, please? \ud83d\ude42 ",
      "created_at": "2020-06-05T14:49:48Z",
      "updated_at": "2020-06-05T14:49:48Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@vexx32 \r\n\r\nSure! Here's my code to repo:\r\n\r\n```\r\n## - Create new mapped drive \"W\":\r\nNew-PSDrive -Name \"W\" -psprovider FileSystem `\r\n\t-root \"\\\\SUN\\MyWinSvrSharedFiles\" -persist `\r\n\t-description \"Server Shared folder\" `\r\n\t-Credential (Get-Credential);\r\n\r\n## - Display all Filesystem Drives including the new mapped drive:\r\nGet-PSDrive -PSProvider FileSystem;\r\n\r\n## - Remove mapped drive \"W\":\r\nGet-PSDrive -Name \"W\" | Remove-PSDrive;\r\n\r\n## - Display all Filesystem Drives but mapped drive was removed:\r\nGet-PSDrive -PSProvider FileSystem;\r\n\r\n```\r\n:)",
      "created_at": "2020-06-05T15:52:28Z",
      "updated_at": "2020-06-05T15:52:28Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@MaximoTrinidad it looks like you're not using `-Scope Global` when you create that drive?",
      "created_at": "2020-06-05T16:04:25Z",
      "updated_at": "2020-06-05T16:04:25Z"
    },
    {
      "author": "VortexUK",
      "author_association": "NONE",
      "body": "@MaximoTrinidad didn't read the original problem and created/deleted the drive in the same session. This is still an issue.",
      "created_at": "2020-06-05T16:12:12Z",
      "updated_at": "2020-06-05T16:12:12Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Seems to be the case. @VortexUK out of curiosity does the same reproduce without `-Scope Global` or is it specifically an issue with that switch in combination with the others?",
      "created_at": "2020-06-05T16:42:51Z",
      "updated_at": "2020-06-05T16:42:51Z"
    },
    {
      "author": "VortexUK",
      "author_association": "NONE",
      "body": "It's been a while since I retested - I'll see if I can do it with the latest release I have and  get back to you",
      "created_at": "2020-06-05T16:47:32Z",
      "updated_at": "2020-06-05T16:47:32Z"
    },
    {
      "author": "VortexUK",
      "author_association": "NONE",
      "body": "Just confirmed on 7.0.0 (OS Windows 10.0.17134)\r\n\r\n`New-PSDrive -Name J -PSProvider FileSystem -Root \\\\contoso.com\\someshare -Scope Global -Persist`\r\n\r\nWorks as intended. When you then open another powershell session, you can see it doing\r\n\r\n`Get-PSDrive -Name J`\r\n\r\nHowever, the following have no affect, the drive remains:\r\n\r\n```\r\nGet-PSDrive -Name J | Remove-PSDrive\r\nGet-PSDrive -Name J | Remove-PSDrive -Force\r\n```\r\n\r\nGoing back to the original session and running the above will work.",
      "created_at": "2020-06-05T17:02:47Z",
      "updated_at": "2020-06-05T17:02:47Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@VortexUK \r\n\r\nJust in case!\r\nCan you try with the latest PowerShell GA is version 7.0.1?\r\n\r\n:)\r\n",
      "created_at": "2020-06-05T20:42:47Z",
      "updated_at": "2020-06-05T20:42:47Z"
    },
    {
      "author": "szymonos",
      "author_association": "NONE",
      "body": "PowerShell 7.1.1 and the problem still exists. The only way to remove persisted drive is to use \"net use X: /delete\"",
      "created_at": "2021-01-31T11:14:03Z",
      "updated_at": "2021-01-31T11:14:03Z"
    },
    {
      "author": "kborowinski",
      "author_association": "NONE",
      "body": "> Just confirmed on 7.0.0 (OS Windows 10.0.17134)\r\n> \r\n> `New-PSDrive -Name J -PSProvider FileSystem -Root \\\\contoso.com\\someshare -Scope Global -Persist`\r\n> \r\n> Works as intended. When you then open another powershell session, you can see it doing\r\n> \r\n> `Get-PSDrive -Name J`\r\n> \r\n> However, the following have no affect, the drive remains:\r\n> \r\n> ```\r\n> Get-PSDrive -Name J | Remove-PSDrive\r\n> Get-PSDrive -Name J | Remove-PSDrive -Force\r\n> ```\r\n> \r\n> Going back to the original session and running the above will work.\r\n\r\nThis is still happening in **PowerShell 7.2.0 Preview 9**. *Remove-PSDrive* cmdlet for *network drives* works only when executed in the same session on which the *New-PSDrive* was run before.",
      "created_at": "2021-09-16T11:28:56Z",
      "updated_at": "2021-09-16T11:28:56Z"
    },
    {
      "author": "AgostinoX",
      "author_association": "NONE",
      "body": "A bug that seems to be related to this and maybe it can help to find the solution.\r\nOn PS 5.1.19041.1320, OS: Win 10 Home; version 10.0.19043 N/D build 19043\r\nFirts of all: as others said, in the same session it's possible to remove the PSDrive: in the code below, after the Remove-PSDrive the Get-PSDrive doesn't return X anymore.\r\n\r\n```\r\nPS C:\\Users\\Agostino> New-PSDrive -Name X -PSProvider FileSystem \\\\localhost\\share -Persist -Scope global\r\n\r\nName           Used (GB)     Free (GB) Provider      Root                                               CurrentLocation\r\n----           ---------     --------- --------      ----                                               ---------------\r\nX                  93,08         11,41 FileSystem    \\\\localhost\\share\r\n\r\n\r\nPS C:\\Users\\Agostino> Get-PSDrive\r\n\r\nName           Used (GB)     Free (GB) Provider      Root                                               CurrentLocation\r\n----           ---------     --------- --------      ----                                               ---------------\r\nAlias                                  Alias\r\nC                  93,08         11,41 FileSystem    C:\\                                                 Users\\Agostino\r\nCert                                   Certificate   \\\r\nEnv                                    Environment\r\nFunction                               Function\r\nHKCU                                   Registry      HKEY_CURRENT_USER\r\nHKLM                                   Registry      HKEY_LOCAL_MACHINE\r\nVariable                               Variable\r\nWSMan                                  WSMan\r\nX                  93,08         11,41 FileSystem    \\\\localhost\\share\r\n\r\n\r\nPS C:\\Users\\Agostino> Remove-PSDrive X\r\nPS C:\\Users\\Agostino> Get-PSDrive\r\n\r\nName           Used (GB)     Free (GB) Provider      Root                                               CurrentLocation\r\n----           ---------     --------- --------      ----                                               ---------------\r\nAlias                                  Alias\r\nC                  93,08         11,41 FileSystem    C:\\                                                 Users\\Agostino\r\nCert                                   Certificate   \\\r\nEnv                                    Environment\r\nFunction                               Function\r\nHKCU                                   Registry      HKEY_CURRENT_USER\r\nHKLM                                   Registry      HKEY_LOCAL_MACHINE\r\nVariable                               Variable\r\nWSMan                                  WSMan\r\n\r\n```\r\n\r\nNow let's do something **strange**. I issue the same command-let again, but replacing X with Y (just to be sure to have a 'clean' situation) but using a non-existent scope option (\"dummyscope\"). \r\nIt obviously gives an error (sorry it's in italian, but it's just the classic invalid-argument error). \r\nThen something strange happens. The drive gets mapped the same (at system level too) but goes into the very state of non-removable drives that's the issue studied here.\r\nTo get this behavior I imagine that the -Scope parameter is not validated at the beginning of the function, but after something (the actual mapping) has already been done but the error sort of prevents the registration of the unit where it should be to get correctly removed after. \r\n\r\n```\r\nPS C:\\Users\\Agostino> New-PSDrive -Name Y -PSProvider FileSystem \\\\localhost\\share -Persist -Scope dummyscope\r\nNew-PSDrive : Non \u00e8 possibile elaborare l'argomento perch\u00e9 il valore dell'argomento \"scopeID\" non \u00e8 valido. I valori\r\nvalidi sono \"Global\", \"Local\", \"Script\" o un numero relativo all'ambito corrente (da 0 al numero di ambiti, dove 0 \u00e8\r\nl'ambito corrente e 1 \u00e8 il relativo padre). Modifica il valore dell'argomento \"scopeID\" ed esegui di nuovo\r\nl'operazione.\r\nIn riga:1 car:1\r\n+ New-PSDrive -Name Y -PSProvider FileSystem \\\\localhost\\share -Persist ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidArgument: (Y:PSDriveInfo) [New-PSDrive], PSArgumentException\r\n    + FullyQualifiedErrorId : NewDriveError,Microsoft.PowerShell.Commands.NewPSDriveCommand\r\n\r\nPS C:\\Users\\Agostino> Get-PSDrive\r\n\r\nName           Used (GB)     Free (GB) Provider      Root                                               CurrentLocation\r\n----           ---------     --------- --------      ----                                               ---------------\r\nAlias                                  Alias\r\nC                  93,08         11,41 FileSystem    C:\\                                                 Users\\Agostino\r\nCert                                   Certificate   \\\r\nEnv                                    Environment\r\nFunction                               Function\r\nHKCU                                   Registry      HKEY_CURRENT_USER\r\nHKLM                                   Registry      HKEY_LOCAL_MACHINE\r\nVariable                               Variable\r\nWSMan                                  WSMan\r\nY                  93,08         11,41 FileSystem    \\\\localhost\\share\r\n\r\n\r\nPS C:\\Users\\Agostino> Remove-PSDrive Y\r\nPS C:\\Users\\Agostino> Get-PSDrive\r\n\r\nName           Used (GB)     Free (GB) Provider      Root                                               CurrentLocation\r\n----           ---------     --------- --------      ----                                               ---------------\r\nAlias                                  Alias\r\nC                  93,08         11,41 FileSystem    C:\\                                                 Users\\Agostino\r\nCert                                   Certificate   \\\r\nEnv                                    Environment\r\nFunction                               Function\r\nHKCU                                   Registry      HKEY_CURRENT_USER\r\nHKLM                                   Registry      HKEY_LOCAL_MACHINE\r\nVariable                               Variable\r\nWSMan                                  WSMan\r\nY                  93,08         11,41 FileSystem    \\\\localhost\\share\r\n\r\n\r\n```\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2022-01-07T18:24:34Z",
      "updated_at": "2022-01-07T18:24:34Z"
    }
  ],
  "created_at": "2018-09-20T16:11:11Z",
  "labels": [
    "Issue-Question",
    "WG-Cmdlets-Management"
  ],
  "number": 7829,
  "state": "open",
  "title": "Remove-PSDrive does not work correctly for Networked Drives created using -persist and -scope Global",
  "updated_at": "2022-01-07T18:24:34Z"
}