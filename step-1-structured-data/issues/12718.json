{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12718",
  "author": "mhamri",
  "body": "![image](https://user-images.githubusercontent.com/8991783/82297192-e1510d00-99e4-11ea-9d37-92d6a6a5acb1.png)\r\n\r\n\r\nI noticed that the package release doesn't follow the correct naming. if the release is `7.0.1` the name shoudlnt' include `-1`. it cause our script break, when we only update an environment variable updating the PS version. our script is reading the ubuntu version and PS version dynamically based on the OS. ",
  "closed_at": "2020-05-21T12:00:06Z",
  "comments": [
    {
      "author": "mhamri",
      "author_association": "NONE",
      "body": "I noticed some release mark the package with `lts` some without it\r\nsome with `preview` prefix some doesn't \r\n\r\nI suggest define a format and follow that religiously. it makes it much more predictable for the end-user ",
      "created_at": "2020-05-19T07:30:30Z",
      "updated_at": "2020-05-19T07:30:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mhamri Can you point the official name convention you mean?",
      "created_at": "2020-05-19T09:33:52Z",
      "updated_at": "2020-05-19T09:34:11Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I think the typical expectation is that the version in the package name should be a semver format, just like it's shown in `$PSVersionTable.PSVersion`.",
      "created_at": "2020-05-19T14:09:52Z",
      "updated_at": "2020-05-19T14:09:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">  the typical expectation\r\n\r\nThis does not work. There is a history. See https://www.linuxtopia.org/online_books/linux_system_administration/debian_linux_guides/debian_linux_reference_guide/ch-system.en_019.html\n\n<blockquote><div><strong><a href=\"https://www.linuxtopia.org/online_books/linux_system_administration/debian_linux_guides/debian_linux_reference_guide/ch-system.en_019.html\">Debian GNU/Linux Reference - 2.2.3 Naming conventions for Debian package filenames</a></strong></div><div>Debian GNU/Linux Reference - 2.2.3 Naming conventions for Debian package filenames</div></blockquote>",
      "created_at": "2020-05-19T17:02:28Z",
      "updated_at": "2020-05-19T17:02:30Z"
    },
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "According to <https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-version>, if the upstream_version contains a hyphen (as in `7.1.0-preview.3`), then the syntax requires a debian_revision (such as `1.debian.11`).\n\n<blockquote><div><strong><a href=\"https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-version\">5. Control files and their fields \u2014 Debian Policy Manual v4.5.0.2</a></strong></div></blockquote>",
      "created_at": "2020-05-20T04:50:40Z",
      "updated_at": "2020-05-20T04:50:42Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-05-21T12:00:04Z",
      "updated_at": "2020-05-21T12:00:04Z"
    },
    {
      "author": "mhamri",
      "author_association": "NONE",
      "body": "@iSazonov \r\n\r\n> @mhamri Can you point the official name convention you mean?\r\n\r\nI don't have anything specific in mind. Just I see some release is adding 'preview' prefix some adding '-1' some has 'lts' some doesn't.  So my request is to follow a predictable pattern which we can write script based on that. So when you release a new package, we can without worrying about the naming just bump the package number and everything keep working without a need to refer to the release page.\r\n\r\nSo if you check my first post, it has an image which is showing the package 7.0.1 has a '-1' which none of the previous releases has",
      "created_at": "2020-06-10T16:42:45Z",
      "updated_at": "2020-06-10T16:42:45Z"
    },
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "> the package 7.0.1 has a '-1' which none of the previous releases has\r\n\r\nThere is `powershell_7.0.0-1.ubuntu.16.04_amd64.deb` in [v7.0.0 Release of PowerShell](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0).\r\nThere is `powershell_6.0.0-1.ubuntu.16.04_amd64.deb` in [v6.0.0 release of PowerShell Core](https://github.com/PowerShell/PowerShell/releases/tag/v6.0.0).\r\nIt looks like the `.deb` packages have `-1` in the file names quite consistently.",
      "created_at": "2020-06-10T16:59:21Z",
      "updated_at": "2020-06-10T16:59:21Z"
    },
    {
      "author": "mhamri",
      "author_association": "NONE",
      "body": "Yes, that is correct, but it's not consistent with other packages for other\nplatforms.\n\nWhen I'm building docker image for different platforms I expect to be able\nto build the release name as it's predictable instead of hardcoding some\nrules for specific platforms name. The deb versions are not following same\npattern as other platform.\n\nI also had issue with some releases doesn't include redhat which atm I am\nresolving it manually.\n\nSome distro has lts and none lts prefix. While none of windows versions has\nlts versions prefix. The tar.gz files are writing poweshell in lowercase,\nothers writing it in camel case.\n\nSo the whole idea is the release for different platforms should follow same\npattern.\n",
      "created_at": "2020-06-10T17:44:11Z",
      "updated_at": "2020-06-10T17:44:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> So the whole idea is the release for different platforms should follow same\r\npattern.\r\n\r\nPreviously we resolved some issues with package names because various distributions and repositories have specific requirements. So we can not unify the names and remove the `-1` in the specific name.\r\nIf you think it is critical we could try to fix this in new PR but before you _should_ check that you can publish packages in all repositories MSFT uses for publications. Also you can review a history in the repo - we have some issues and PRs in the area.\r\n",
      "created_at": "2020-06-11T06:23:26Z",
      "updated_at": "2020-06-11T06:24:19Z"
    },
    {
      "author": "mhamri",
      "author_association": "NONE",
      "body": "why not mix and match then?\r\n\r\nso the main idea is the release names follow a predictable pattern. I I don't have any preference with what that pattern would be,\r\n\r\nfor example \r\n- all the `lts` versions use `lts` prefix for all the platforms. \r\n- if one need to use `-1` , put -1 for all of them not only those that need. the problem isn't having `-1` or not. but not being consistent through different platforms. \r\n- if one of the releases require to be lowercase, make all of them lowercase.\r\n\r\na general pattern that is predictable and can apply to all the platforms. there should be a minimum that can be met by all the distros and platforms\r\n",
      "created_at": "2020-06-12T08:45:52Z",
      "updated_at": "2020-06-12T08:45:52Z"
    },
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "Instead of having your script parse or guess file names, can you use the [GitHub Releases API](<https://developer.github.com/v3/repos/releases/> \"Releases | GitHub Developer Guide\") to get the name of each file in each release?\r\n\r\n\u2026although the metadata available from there does not formally say which file is intended for which operating system, so the script would still have to rely on how that information is encoded in the file names.",
      "created_at": "2020-06-12T10:03:06Z",
      "updated_at": "2020-06-12T10:03:06Z"
    },
    {
      "author": "mhamri",
      "author_association": "NONE",
      "body": "I don't think it would be possible without hardcoding the rules... ",
      "created_at": "2020-06-15T04:44:39Z",
      "updated_at": "2020-06-15T04:44:39Z"
    }
  ],
  "created_at": "2020-05-19T07:27:14Z",
  "number": 12718,
  "state": "closed",
  "title": "Consistent release package naming",
  "updated_at": "2020-06-15T04:44:39Z"
}