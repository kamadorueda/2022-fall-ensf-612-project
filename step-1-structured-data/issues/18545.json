{
  "_url": "https://github.com/PowerShell/PowerShell/issues/18545",
  "author": "chrullrich",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\n1. Install PowerShell 7.3.0 x86 on a Windows x64 system.\r\n2. Start `pwsh.exe`.\r\n\r\nNo previous version of PowerShell 7 behaved in this way.\r\n\r\n### Expected behavior\r\n\r\n```console\r\nPowerShell 7.3.0\r\nPS C:\\Users\\Me>\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nPowerShell 7.3.0\r\nFatal error. 0xC0000005\r\n   at System.Management.Automation.Security.SystemPolicy+WldpNativeMethods.WldpCanExecuteFile(System.Guid, WLDP_EXECUTION_EVALUATION_OPTIONS, IntPtr, System.String, WLDP_EXECUTION_POLICY ByRef)\r\n   at System.Management.Automation.Security.SystemPolicy.GetFilePolicyEnforcement(System.String, System.IO.FileStream)\r\n   at System.Management.Automation.ExternalScriptInfo.ReadScriptContents()\r\n   at System.Management.Automation.ExternalScriptInfo.get_ScriptBlock()\r\n   at Microsoft.PowerShell.Commands.ModuleCmdletBase.LoadModuleManifestData(System.Management.Automation.ExternalScriptInfo, System.String[], ManifestProcessingFlags, Boolean ByRef)\r\n   at Microsoft.PowerShell.Commands.ModuleCmdletBase.LoadModuleManifestData(System.Management.Automation.ExternalScriptInfo, ManifestProcessingFlags, System.Collections.Hashtable ByRef, System.Collections.Hashtable ByRef, Boolean ByRef)\r\n   at Microsoft.PowerShell.Commands.ModuleCmdletBase.LoadModule(System.Management.Automation.PSModuleInfo, System.String, System.String, System.String, System.Management.Automation.SessionState, System.Object, ImportModuleOptions ByRef, ManifestProcessingFlags, Boolean ByRef, Boolean ByRef)\r\n   at Microsoft.PowerShell.Commands.ModuleCmdletBase.LoadUsingExtensions(System.Management.Automation.PSModuleInfo, System.String, System.String, System.String, System.String, System.String, System.Management.Automation.SessionState, ImportModuleOptions, ManifestProcessingFlags, Boolean ByRef, Boolean ByRef)\r\n   at Microsoft.PowerShell.Commands.ModuleCmdletBase.LoadUsingModulePath(System.Management.Automation.PSModuleInfo, System.Collections.Generic.IEnumerable`1<System.String>, System.String, System.Management.Automation.SessionState, ImportModuleOptions, ManifestProcessingFlags, System.Management.Automation.PSModuleInfo ByRef)\r\n   at Microsoft.PowerShell.Commands.ImportModuleCommand.ImportModule_LocallyViaName(ImportModuleOptions, System.String)\r\n   at Microsoft.PowerShell.Commands.ImportModuleCommand.ImportModule_LocallyViaName_WithTelemetry(ImportModuleOptions, System.String)\r\n   at Microsoft.PowerShell.Commands.ImportModuleCommand.ProcessRecord()\r\n   at System.Management.Automation.Cmdlet.DoProcessRecord()\r\n   at System.Management.Automation.CommandProcessor.ProcessRecord()\r\n   at System.Management.Automation.CommandProcessorBase.DoExecute()\r\n   at System.Management.Automation.Internal.PipelineProcessor.Inject(System.Object, Boolean)\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(System.Object)\r\n   at System.Management.Automation.Runspaces.LocalPipeline.InvokeHelper()\r\n   at System.Management.Automation.Runspaces.LocalPipeline.InvokeThreadProc()\r\n   at System.Management.Automation.Runspaces.LocalPipeline.InvokeThreadProcImpersonate()\r\n   at System.Management.Automation.Runspaces.PipelineThread.WorkerProc()\r\n   at System.Threading.Thread+StartHelper.Callback(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.Thread.StartCallback()\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nNot available because PowerShell crashes on startup.\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "chrullrich",
      "author_association": "NONE",
      "body": "I have looked for a statement on whether using the x86 version of PS on an x64 platform is supported, but could not find any.",
      "created_at": "2022-11-13T00:09:14Z",
      "updated_at": "2022-11-13T00:09:14Z"
    },
    {
      "author": "rhubarb-geek-nz",
      "author_association": "NONE",
      "body": "A few questions..\r\n\r\n- What operating system did you install it on?\r\n- How did you install it, `ZIP`, `MSI` or some other way?\r\n- If using the `MSI` did you add it to the global `PATH`?\r\n- Do you also have `x64` version installed?\r\n- How did you start `pwsh.exe`, from old `powershell`, from start menu or from 32bit or 64bit `cmd.exe`? \r\n\r\nI have just installed the PowerShell-7.3.0-win-x86.msi on Windows 10 Pro 22H2 and that installs in `\"C:\\\\Program Files (x86)\\\\PowerShell\\7\"`. That system also has the 64 bit version installed.\r\n\r\nI did not check the box to add to the global PATH, or any other option.\r\n\r\nI ran it from 64 bit `cmd.exe` after `cd` into `\"C:\\\\Program Files (x86)\\\\PowerShell\\7\"` , and it started cleanly and now sits waiting at the prompt.\r\n",
      "created_at": "2022-11-13T06:58:30Z",
      "updated_at": "2022-11-13T07:03:51Z"
    },
    {
      "author": "chrullrich",
      "author_association": "NONE",
      "body": "Sometimes I'm too impatient when writing bug reports.\r\n\r\n- Windows 11 22H2 x64, current updates\r\n- PowerShell-7.3.0-win-x86.zip\r\n- N/A\r\n- No\r\n- It crashes from 64-bit and 32-bit cmd, from 64-bit and 32-bit WPS 5.1.22621.608, and when run from Explorer, both by double-click and Run.\r\n\r\nReproduction:\r\n\r\n1. Have no version of PowerShell 7 installed (may not be necessary).\r\n2. Extract PowerShell-7.3.0-win-x86.zip .\r\n3. Open a command prompt window (i.e. tab in Terminal in 11 22H2 with October updates).\r\n4. `cd` to the directory just extracted.\r\n5. Run `pwsh.exe`.\r\n\r\nThe crash happens both with my regular cluttered PATH and with `PATH=C:\\windows\\system32;C:\\windows`, and when starting it from another directory with an absolute path on the command line. It also happens with the MSI installed the same way you describe (same path, same no options), both from command prompt and start menu. Installing the MSI had no effect on the behavior of the copy I unzipped earlier. It also happens when run from an elevated \"real\" command prompt window.\r\n\r\nI noticed that the delay, both before the first line of output and between the last line of the stack trace and the return of the prompt, is much shorter with the MSI (<< 1 s start, 1.5 s finish) than with the Zip (~2.5 s start, ~6 s finish).\r\n\r\nHope that's better :-)",
      "created_at": "2022-11-13T08:11:20Z",
      "updated_at": "2022-11-13T08:22:05Z"
    },
    {
      "author": "rhubarb-geek-nz",
      "author_association": "NONE",
      "body": "Does the 64-bit version from a zip work on your system? Given the CPU requirements for Windows 11, are there any x86 only Windows 11 installations?",
      "created_at": "2022-11-13T08:22:33Z",
      "updated_at": "2022-11-13T08:22:33Z"
    },
    {
      "author": "chrullrich",
      "author_association": "NONE",
      "body": "- 64-bit from Zip works.\r\n- No idea, but since I'm not aware of any x86 Windows 11 release, I rather doubt it.",
      "created_at": "2022-11-13T08:24:54Z",
      "updated_at": "2022-11-13T08:24:54Z"
    },
    {
      "author": "rhubarb-geek-nz",
      "author_association": "NONE",
      "body": "I just tried the 7.3.0 x86 zip on my Windows 11 Pro 22H2 and that throws exactly the same exception as you describe.\r\n",
      "created_at": "2022-11-13T08:35:08Z",
      "updated_at": "2022-11-13T08:37:36Z"
    },
    {
      "author": "chrullrich",
      "author_association": "NONE",
      "body": "The function it crashes in only exists in 11 22H2. That at least explains why it works on 10. Procmon shows no obvious smoking gun, not that I expected one. ",
      "created_at": "2022-11-13T08:35:28Z",
      "updated_at": "2022-11-13T08:35:28Z"
    },
    {
      "author": "chrullrich",
      "author_association": "NONE",
      "body": "If I had to guess, I would guess that https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/security/wldpNativeMethods.cs#L699 should be \"ref Guid\". But what do I know?\n\n<blockquote><img src=\"https://repository-images.githubusercontent.com/49609581/aad0ad80-cdec-11ea-8248-a37bc0571bfd\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell\">PowerShell/wldpNativeMethods.cs at master \u00b7 PowerShell/PowerShell</a></strong></div><div>PowerShell for every system! Contribute to PowerShell/PowerShell development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2022-11-13T08:44:18Z",
      "updated_at": "2022-11-13T08:44:20Z"
    },
    {
      "author": "rhubarb-geek-nz",
      "author_association": "NONE",
      "body": "https://learn.microsoft.com/en-us/previous-versions/troubleshoot/visualstudio/foxpro/c0000005-error-troubleshoot\r\n\r\nhttps://learn.microsoft.com/en-us/windows/win32/api/wldp/nf-wldp-wldpcanexecutefile\r\n\r\nDoes the export `WldpCanExecuteFile` exist in the x86 `wldp.dll`?\n\n<blockquote><img src=\"https://learn.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://learn.microsoft.com/en-us/previous-versions/troubleshoot/visualstudio/foxpro/c0000005-error-troubleshoot\">C0000005 error and troubleshoot - Visual Studio</a></strong></div><div>This article defines a C0000005 error and offers troubleshooting suggestions.</div></blockquote>\n<blockquote><img src=\"https://learn.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://learn.microsoft.com/en-us/windows/win32/api/wldp/nf-wldp-wldpcanexecutefile\">WldpCanExecuteFile - Win32 apps</a></strong></div><div>Queries whether the execution policy allows execution of the code in the supplied file.</div></blockquote>",
      "created_at": "2022-11-13T08:52:17Z",
      "updated_at": "2022-11-13T08:52:20Z"
    },
    {
      "author": "chrullrich",
      "author_association": "NONE",
      "body": "    C:\\Windows\\SysWOW64>dumpbin /exports wldp.dll | findstr WldpCanExecuteFile\r\n             17    2 000237A0 WldpCanExecuteFile\r\n\r\nThe code at the call site (line 120 of the same file I linked above; I hope it's the right one) catches `EntryPointNotFoundException` and continues with \"legacy system checks\".",
      "created_at": "2022-11-13T09:03:39Z",
      "updated_at": "2022-11-13T09:03:39Z"
    },
    {
      "author": "chrullrich",
      "author_association": "NONE",
      "body": "Adding `[MarshalAs(UnmanagedType.LPStruct)]` to the Guid argument (`ref` does not work here) fixes the crash when building the v7.3.0 tag. I'm getting unrelated compiler errors from the `master` branch. Whether this is the correct fix is beyond me.\r\n\r\nI can create a PR for adding the attribute, but I cannot be held responsible for it ...",
      "created_at": "2022-11-13T09:31:29Z",
      "updated_at": "2022-11-13T09:39:00Z"
    },
    {
      "author": "rhubarb-geek-nz",
      "author_association": "NONE",
      "body": "So how does the 64 bit code work if it goes through the same code path?",
      "created_at": "2022-11-13T09:53:50Z",
      "updated_at": "2022-11-13T09:53:50Z"
    },
    {
      "author": "chrullrich",
      "author_association": "NONE",
      "body": "Calling conventions. \r\n\r\nPer `wldp.h` the first argument is a `REFGUID`, also known as a `GUID*`. The Windows x64 calling convention says that values larger than 64 bits (that is, larger than a register) are passed by address (i.e. as pointers). This means that in C# terms, `Guid` and `ref Guid` look the same to the called native function (but I think in the non-`ref` case the Guid is probably copied somewhere in case the native function changes it).\r\n\r\nThe x86 calling conventions, in this case `__stdcall`, are more complicated. Here, structures (such as Guid) are passed on the stack, that is, the compiler copies the structure to the stack instead of just pushing a pointer to it. This also means that the function will mistake the last four bytes of the GUID as a pointer to one, dereference it, and ... boom. I tried it from C, and this is exactly what happens.\r\n\r\nMy fix tells .NET to pass the Guid as a pointer to a structure, and the fact that this changes the behavior at all is the best proof that it is correct: If it works when passing a pointer, then it must not have been passing one before, and _that_ is definitely wrong because we know the function expects a `REFGUID`.\r\n\r\nAlso note that a few lines down in the file, the declaration of `SHGetKnownFolderPath()` already uses the attribute, and that function's first argument is a `REFKNOWNFOLDERID`, another alternative spelling of `GUID*`.\r\n\r\nNow that I have convinced myself of that (and you, I hope), my next problem is how to create a PR for the fix if I cannot get `master` to build for testing.\r\n\r\nFor illustration, this is a call to `WldpCanExecuteFile(REFGUID, int, int, int, int)` (the exact types don't matter):\r\n\r\n\tpush\t0\r\n\tpush\t0\r\n\tpush\t0\r\n\tpush\t0\r\n\tpush\tOFFSET ?guid@?1??main@@9@9\r\n\tcall\t_WldpCanExecuteFile\r\n\r\nThis is `WldpCanExecuteFile(GUID, 0, 0, 0, 0)`:\r\n\r\n\tpush\t0\r\n\tpush\t0\r\n\tpush\t0\r\n\tpush\t0\r\n\tsub\tesp, 16\r\n\tmov\teax, esp\r\n\tmov\tecx, DWORD PTR ?guid@?1??main@@9@9\r\n\tmov\tDWORD PTR [eax], ecx\r\n\tmov\tedx, DWORD PTR ?guid@?1??main@@9@9+4\r\n\tmov\tDWORD PTR [eax+4], edx\r\n\tmov\tecx, DWORD PTR ?guid@?1??main@@9@9+8\r\n\tmov\tDWORD PTR [eax+8], ecx\r\n\tmov\tedx, DWORD PTR ?guid@?1??main@@9@9+12\r\n\tmov\tDWORD PTR [eax+12], edx\r\n\tcall\t_WldpCanExecuteFile\r\n",
      "created_at": "2022-11-13T11:30:43Z",
      "updated_at": "2022-11-13T11:32:49Z"
    },
    {
      "author": "chrullrich",
      "author_association": "NONE",
      "body": "I just found that `master` works on another system (no idea why). There, `Start-PSBuild -Runtime win7-x86 -Configuration Debug` itself fails with the same error when it calls its own just-built `pwsh.exe` somewhere along the way. This probably just means that the \"official\" release was created on something other than 11 22H2.",
      "created_at": "2022-11-13T11:47:46Z",
      "updated_at": "2022-11-13T11:47:46Z"
    },
    {
      "author": "sergeevabc",
      "author_association": "NONE",
      "body": "@chrullrich, my condolences. 7.3.0 crashes upon launch on your end, whereas its x64 zip bundle hangs my Windows 7 x64 system completely, until it is rebooted via hard reset (literally holding that reset button for a few seconds). I was [advised ](https://github.com/PowerShell/PowerShell/discussions/18494#discussioncomment-4124497)to try ```-NoProfile``` switch, no luck there. No such thing happens with 7.2.5, so I rolled back.",
      "created_at": "2022-11-13T13:12:53Z",
      "updated_at": "2022-11-13T13:12:53Z"
    },
    {
      "author": "rhubarb-geek-nz",
      "author_association": "NONE",
      "body": "> @chrullrich, No such thing happens with 7.2.5, so I rolled back.\r\n\r\nDoes 7.2.7 work?\r\n\r\n",
      "created_at": "2022-11-13T13:28:28Z",
      "updated_at": "2022-11-13T13:28:28Z"
    },
    {
      "author": "chrullrich",
      "author_association": "NONE",
      "body": "Yes, 7.2.7 works. It does not contain this particular bug anyway, that was introduced between v7.3.0-preview.3 and .4 according to git.",
      "created_at": "2022-11-13T13:44:48Z",
      "updated_at": "2022-11-13T13:44:48Z"
    },
    {
      "author": "sergeevabc",
      "author_association": "NONE",
      "body": "@rhubarb-geek-nz, not sure if you asked me or Christian, so let me reply as well.\r\nYes, 7.2.7 launches fine. Upgraded from 7.2.5 successfully. Thanks for mentioning it.\r\n\r\n**Edit.**\r\nHowever I am not happy it advises me to upgrade to 7.3.0 on every launch.\r\nToo intrusive, not to mention that very build is not that stable after all.\r\n```console\r\nC:\\APPS\\System\\PowerShell727>pwsh\r\nPowerShell 7.2.7\r\nCopyright (c) Microsoft Corporation.\r\n\r\nhttps://aka.ms/powershell\r\nType 'help' to get help.\r\n\r\n   A new PowerShell stable release is available: v7.3.0\r\n   Upgrade now, or check out the release page at:\r\n     https://aka.ms/PowerShell-Release?tag=v7.3.0\r\n\r\nPS C:\\APPS\\System\\PowerShell727>\r\n```",
      "created_at": "2022-11-13T13:50:05Z",
      "updated_at": "2022-11-13T13:57:01Z"
    },
    {
      "author": "chrullrich",
      "author_association": "NONE",
      "body": "@sergeevabc It can be turned off by setting an environment variable: `POWERSHELL_UPDATECHECK=Off`\r\n\r\nSource: https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_update_notifications?view=powershell-7.2\n\n<blockquote><img src=\"https://learn.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_update_notifications\">about Update Notifications - PowerShell</a></strong></div><div>Notifies users on startup of PowerShell that a new version of PowerShell has been released.</div></blockquote>",
      "created_at": "2022-11-13T13:55:32Z",
      "updated_at": "2022-11-13T13:55:35Z"
    }
  ],
  "created_at": "2022-11-13T00:08:40Z",
  "labels": [
    "Needs-Triage"
  ],
  "number": 18545,
  "state": "open",
  "title": "7.3.0 x86 crashes on startup on Windows 11 22H2",
  "updated_at": "2022-11-13T13:57:01Z"
}