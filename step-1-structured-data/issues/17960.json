{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17960",
  "author": "dkaszews",
  "body": "### Summary of the new feature / enhancement\n\nPowerShell 7 introduces null-coallescing operator `??` and its compound assignement counterpart `??=`. They can be used to conveniently provide default value for variables which may be null. It is however also possible for a variable to not be set at all, in which case `??` and `??=` throw a `StrictMode` error if enabled. This is often the case when using environment variables.\r\n\r\nThe current way to write it is a quite verbose `(Test-Path 'variable:x') ? $x : $y`, which is similar pattern to `$x -eq $null ? $x : $x` which `??` replaces, and which is usable when `StrictMode` is not enabled. This may tempt the user to disable `StrictMode` to write more compact code.\r\n\r\nProposition is to add `-DefaultValue` to `Get-Item` and `Get-Variable`, which transforms the code above into much more pleasant and readable `Get-Item 'variable:x' -Default $y` or `Get-Variable 'x' -Default $y`, avoiding repetition of the variable name.\r\n\r\nThe null compound assignment `??=` could be replicated by adding `-SkipIfExists` to `Set-Variable`, but this is beyond scope of this issue.\n\n### Proposed technical implementation details (optional)\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "The idea is not quite clear in the context of this syntax. Are you suggesting something similar?:\r\n\r\n```\r\n(Get-item variable:x -ea 0) ? $x : ($x = 10)\r\n```",
      "created_at": "2022-08-24T21:43:06Z",
      "updated_at": "2022-08-24T21:43:06Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "> The idea is not quite clear in the context of this syntax. Are you suggesting something similar?:\r\n> \r\n> ```\r\n> (Get-item variable:x -ea 0) ? $x : ($x = 10)\r\n> ```\r\n\r\nI don't follow, how is this different from the `(Test-Path 'variable:x') ? $x : $y` example I provided? Other than using `-ErrorAction SilentlyContinue` disguised under `-ea 0` completely hides the intent, while my proposal is to clearly state intent of providing a default value. ",
      "created_at": "2022-08-25T15:33:52Z",
      "updated_at": "2022-08-25T15:33:52Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> while my proposal is to clearly state intent of providing a default value.\r\n\r\n>> The idea is not quite clear in the context of this syntax.\r\n\r\nI was referring specifically to this syntax:  `a ? b : c`\r\nCould you give a conceptual example?",
      "created_at": "2022-08-25T16:13:58Z",
      "updated_at": "2022-08-25T16:13:58Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "Maybe a more real life example would be clearer. In my script, I want to be able to override the default settings by setting an environment variable, as is common on Linux. Use of what is essentially a global may not be great, but in case of scripts it is usually the easiest way to go.\r\n\r\nCurrently I have written the following:\r\n\r\n```pwsh\r\n$RetryCount = (Test-Path 'env:RETRY_COUNT') ? $env:RETRY_COUNT : 3\r\n$RetryTimeout = (Test-Path 'env:RETRY_TIMEOUT') ? $env:RETRY_TIMEOUT : 5000\r\n./run_tests.py -- repeat $RetryCount --timeout $RetryTimeout\r\n```\r\n\r\nIt's quite readable, as long as you know that `Test-Path` can be used for variables, but requires typing the environment variable name twice. With my proposal, this can nicely fit on a single line while being even more clear:\r\n\r\n```pwsh\r\n./run_tests.py -- repeat (Get-Item 'env:RETRY_COUNT' -Default 3) --timeout (Get-Item 'env:RETRY_TIMEOUT' -Default 5000)\r\n```",
      "created_at": "2022-08-25T16:36:14Z",
      "updated_at": "2022-08-25T16:36:14Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> Maybe a more real life example would be clearer\r\n\r\nYes, this explanation is quite clean. Perhaps it would be useful, but I am a supporter of the usual syntax with conditions and their checks even if it is longer.",
      "created_at": "2022-08-25T21:10:30Z",
      "updated_at": "2022-08-25T21:10:30Z"
    }
  ],
  "created_at": "2022-08-24T17:03:00Z",
  "number": 17960,
  "state": "open",
  "title": "Add `-DefaultValue` to Get-Item and Get-Variable",
  "updated_at": "2022-08-25T21:10:30Z"
}