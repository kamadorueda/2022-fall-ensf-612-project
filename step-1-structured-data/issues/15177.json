{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15177",
  "author": "daxian-dbw",
  "body": "This is an alternate implementation of the `Clean` block in PowerShell. The original PR is #9900.\r\nThis implementation doesn't rely on the `Dispose` method to run the `Clean` block, but instead makes `Clean` block more like a peer to `begin`, `process`, and `end` blocks.\r\n\r\nThe updated RFC is currently under review: https://github.com/PowerShell/PowerShell-RFC/pull/294\r\nThe doc issue for this feature: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/8090\r\nThe editor syntax PR: https://github.com/PowerShell/EditorSyntax/pull/208\r\n\r\nTo-do check list:\r\n\r\n- [x] initial design and implementation (thanks @vexx32!)\r\n- [x] error handling proposal\r\n- [x] new design and implementation\r\n    - [x] regarding `SynchronousExecutionEnumerate`\r\n    - [x] regarding steppable pipeline\r\n    - [x] variable analysis integration for 'Clean' block\r\n    - [x] how to handle `Exit` in `Clean` block?\r\n      - `Exit` from within a `Clean` block terminates the execution in the `Clean` block\r\n      - But the `ExitException` is not propagated out of the `Clean` block\r\n    - [x] how to handle <kbd>Ctrl+c</kbd> [mimic `finally` behavior *]\r\n    - [x] rename the new block from `cleanup` to `clean`\r\n    - [x] semantic check for `{ clean { } }`? No\r\n      - decide to not add the semantic check for now, maybe this should be a script analyzer rule instead.\r\n- [x] testing\r\n    - [x] error handling tests\r\n    - [x] functional tests\r\n    - [x] breakpoint in `clean` block [manually checked]\r\n- [x] update the original accepted RFC for this feature, with details functional behavior and error handling behavior.\r\n\r\n\\* The <kbd>Ctrl+c</kbd> behavior is still pending. The [updated RFC](https://github.com/PowerShell/PowerShell-RFC/pull/294) discusses two different behaviors in the event of pipeline stopping in details in the `Pipeline Stopping Behavior` section. The current implementation in this PR mimics the `finally` clause behavior, but it keeps the changes in `Stopper` that would be needed to support non-cancellable `clean` block execution.",
  "closed_at": "2021-10-11T21:49:10Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> * Terminating error when any of 'Begin/Process/End' throws non-terminating error\r\n> * Terminating error when any of 'Begin/Process/End' throws terminating error (duplicate error reports in $Error)\r\n\r\nIt is not clear after previous two:\r\n\r\n> * Non-terminating error when any of 'Begin/Process/End' throws terminating error (duplicate error reports in $Error)\r\n>   `function ooo { [cmdletbinding()]param() end { throw 'err'; 3 } cleanup { \"Yeah!\"; gcm blah; Write-Host 'host-4' } }`\r\n>   `function ooo { [cmdletbinding()]param() end { gcm eee -ErrorAction Stop; 3 } cleanup { \"Yeah!\"; gcm blah; Write-Host 'host-4' } }`\r\n> * Non-terminating error when any of 'Begin/Process/End' throws non-terminating error\r\n>   `function ooo { [cmdletbinding()]param() process { gcm eee; 3 } cleanup { \"Yeah!\"; gcm blah; Write-Host 'host-4' } }`\r\n>   ooo -ErrorVariable lv\r\n\r\n",
      "created_at": "2021-04-07T08:59:46Z",
      "updated_at": "2021-06-21T23:35:35Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> How to handle Exit in 'Clean'?\r\n\r\nIt would be amazing for cmdlets to terminate whole script or process but acceptable for script blocks.",
      "created_at": "2021-04-07T15:46:16Z",
      "updated_at": "2021-04-07T15:46:16Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "you suggest that errors in the clean block will be captured in `-ErrorVariable` but not generally emitted to the user as visible errors? Does that imply that the errors in the `cleanup` block will not be found in `$ERROR`? I'm a little nervous about that. I should think the clean up block runs in with implicit `SilentlyContinue` so errors are captured, but not displayed. What if the user explicitly sets `$ErrorActionPreference = \"Inquire\"` (or confirm), will we then prompt?",
      "created_at": "2021-04-21T20:59:54Z",
      "updated_at": "2021-04-21T20:59:54Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> you suggest that errors in the clean block will be captured in `-ErrorVariable` but not generally emitted to the user as visible errors? Does that imply that the errors in the cleanup block will not be found in `$ERROR`? I'm a little nervous about that.\r\n\r\nErrors in `Clean` block will be captured in `-ErrorVariable`, and also will be emitted to user as visible errors. All errors happen in `Clean` should (and can) be found in `$Error`.\r\n\r\n> I should think the clean up block runs in with implicit `SilentlyContinue` so errors are captured, but not displayed. What if the user explicitly sets `$ErrorActionPreference = \"Inquire\" (or confirm)`, will we then prompt?\r\n\r\nI personally prefer to not make the `Clean` block have a different default `ActionPreference` for error. I think it should just behave the same as other named blocks. That would also make it easier for the user to quickly know if there are any error in their `Clean` block.\r\n\r\n@JamesWTruher The proposed error handling behavior already works with the changes in this PR, so I think it will be helpful if you can build this PR and play with it. You can also download the build artifacts from CIs, for example, the windows build can be downloaded [here](https://dev.azure.com/powershell/_apis/resources/Containers/4302657/build?itemPath=build%2Fbuild.zip). Thanks for the review and I look forward to get more feedback from you!",
      "created_at": "2021-04-21T23:32:48Z",
      "updated_at": "2021-04-21T23:34:11Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee agrees with the proposed design and suggest we move towards getting this in as an experimental feature to get user feedback",
      "created_at": "2021-05-05T22:30:31Z",
      "updated_at": "2021-05-05T22:30:31Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@vexx32 @iSazonov @rjmholt @PaulHigin @JamesWTruher @adityapatwardhan @SteveL-MSFT \r\nThis PR is ready for review, the updated RFC can be found at https://github.com/PowerShell/PowerShell-RFC/pull/292.\r\nPlease take a look when you have time, and any feedback is welcome :)\r\n\r\nA few things to be noted:\r\n1. The PR description has been updated, which may be helpful to the review\r\n2. Extensive tests were added, especially around the error handling behavior. The `PipelineBehaviour.Tests.ps1` contains tests for the functional behaviors other than error handling, which may be helpful to the review.\r\n3. `InvokeWithPipeImpl` is made not support directly invoking the `clean` block of a script block because of the difference in semantics between `clean` and the other named blocks. The `.ForEach` magic method is also made not support a script block with the `clean` block, to keep parity with `ForEach-Object`.",
      "created_at": "2021-07-16T06:46:10Z",
      "updated_at": "2021-07-16T06:57:55Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@daxian-dbw  Please address comments from @iSazonov ",
      "created_at": "2021-07-28T19:37:21Z",
      "updated_at": "2021-07-28T19:37:21Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2021-08-05T14:00:53Z",
      "updated_at": "2021-08-05T14:00:53Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The regression protection tests have been moved to a separate PR #15919",
      "created_at": "2021-08-12T22:24:52Z",
      "updated_at": "2021-08-12T22:24:52Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2021-08-21T02:00:34Z",
      "updated_at": "2021-08-21T02:00:34Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@JamesWTruher @PaulHigin @rjmholt @vexx32 @adityapatwardhan @SteveL-MSFT \r\nCould you please review this PR when you have time? Thanks!",
      "created_at": "2021-08-24T18:24:17Z",
      "updated_at": "2021-08-24T18:24:17Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@PaulHigin and @vexx32 Thank you both for your review! I have responded and addressed all your comments.\r\n\r\n> I'm mostly just curious what folks think the desired behaviour for having the clean block be interruptible should be. Has the committee weighed in on that as yet?\r\n\r\n@vexx32 The committee had a brief discussion before but didn't take a deep dive. As I have captured in the RFC, the `finally` block's current behavior is unexpected and inconsistent to some extent. At the meantime, we want `clean` and `finally` to have consistent behaviors in the event of pipeline stopping. So, if we decide to have non-cancellable `clean` block, the `finally` behavior needs to be fixed too. There were concerns about the non-cancellable behavior too. In a nutshell, there was no conclusion in the previous committee discussion.\r\n\r\nFor this PR, I follows the current `finally` behavior, and we can leave the change of that behavior to a separate PR once there is a conclusion.",
      "created_at": "2021-08-26T18:06:11Z",
      "updated_at": "2021-08-26T18:22:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I set BreakingChange label because we introduce new keyword \"Clean\".",
      "created_at": "2021-09-01T05:13:12Z",
      "updated_at": "2021-09-01T05:13:25Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2021-09-15T02:00:36Z",
      "updated_at": "2021-09-15T02:00:36Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@rjmholt Can you please take some time review the changes? I'd like to get your feedback before merging this PR. Thanks!",
      "created_at": "2021-10-05T19:04:06Z",
      "updated_at": "2021-10-05T19:04:06Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Rebased the commits to resolve conflicts introduced by #16199",
      "created_at": "2021-10-11T18:45:51Z",
      "updated_at": "2021-10-11T18:45:51Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "SSH remoting test run was cancelled due to an issue in the test pipeline, which was fixed by #16225\r\nRe-open the PR to trigger all CIs.",
      "created_at": "2021-10-11T20:51:07Z",
      "updated_at": "2021-10-11T20:51:07Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.3.0-preview.1` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.3.0-preview.1)\n",
      "created_at": "2021-12-16T20:01:42Z",
      "updated_at": "2021-12-16T20:01:42Z"
    }
  ],
  "created_at": "2021-04-07T00:53:06Z",
  "number": 15177,
  "state": "closed",
  "title": "Add `clean` block to script block as a peer to `begin`, `process`, and `end` to allow easy resource cleanup",
  "updated_at": "2021-12-16T20:01:42Z"
}