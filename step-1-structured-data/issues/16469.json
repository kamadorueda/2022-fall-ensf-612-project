{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16469",
  "author": "zivkan",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\n```text\r\nC:\\Users\\zivkan> gci -Directory | Select-Object -First 1 | cd\r\nC:\\Users\\zivkan\\.android> dir \\\r\nGet-ChildItem: Cannot find path '' because it does not exist.\r\nC:\\Users\\zivkan\\.android> cd \\\r\nSet-Location: Cannot find path 'Microsoft.PowerShell.Core\\FileSystem::' because it does not exist.\r\nC:\\Users\\zivkan\\.android> cd\r\nC:\\Users\\zivkan> cd \\\r\nC:\\>\r\n```\r\n\r\nI was trying to be cleaver, reducing keystrokes, when creating a directory that I was going to use to test something, hoping I could use `mkdir myTest | cd `, but some things just act weird. In particular tab completion of paths no longer works.\r\n\n\n### Expected behavior\n\n```console\n`dir \\` and tab completion of `\\user` should work whether I `cd` into via a pipe or explicit argument.\n```\n\n\n### Actual behavior\n\n```console\nSee error messages reported in steps to reproduce.\n```\n\n\n### Error details\n\n```console\nException             :\r\n    Type                 : System.Management.Automation.ItemNotFoundException\r\n    ErrorRecord          :\r\n        Exception             :\r\n            Type    : System.Management.Automation.ParentContainsErrorRecordException\r\n            Message : Cannot find path '' because it does not exist.\r\n            HResult : -2146233087\r\n        CategoryInfo          : ObjectNotFound: (:String) [], ParentContainsErrorRecordException\r\n        FullyQualifiedErrorId : PathNotFound\r\n    SessionStateCategory : Drive\r\n    TargetSite           :\r\n        Name          : GetChildItems\r\n        DeclaringType : System.Management.Automation.SessionStateInternal, System.Management.Automation, Version=7.2.0.500, Culture=neutral, PublicKeyToken=31bf3856ad364e35\r\n        MemberType    : Method\r\n        Module        : System.Management.Automation.dll\r\n    Message              : Cannot find path '' because it does not exist.\r\n    Source               : System.Management.Automation\r\n    HResult              : -2146233087\r\n    StackTrace           :\r\n   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()\r\nCategoryInfo          : ObjectNotFound: (:String) [Get-ChildItem], ItemNotFoundException\r\nFullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand\r\nInvocationInfo        :\r\n    MyCommand        : Get-ChildItem\r\n    ScriptLineNumber : 1\r\n    OffsetInLine     : 1\r\n    HistoryId        : 60\r\n    Line             : dir \\\r\n    PositionMessage  : At line:1 char:1\r\n                       + dir \\\r\n                       + ~~~~~\r\n    InvocationName   : dir\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\nPipelineIterationInfo :\n```\n\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2021-12-09T23:52:11Z",
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "This happens in multiple cases when you pipe a file or directory object into something, the PSPath parameter wins so you might think you have done \r\n`cd C:\\Users\\zivkan\\.android\"`\r\nIn fact you've done \r\n`cd microsoft.PowerShell.Core\\FileSystem::C:\\Users\\zivkan\\.android`\r\n\r\nFrustrating but not hard to work round\r\n",
      "created_at": "2021-11-14T23:44:44Z",
      "updated_at": "2021-11-14T23:44:44Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Hmm, this used to work in Windows PowerShell 5.1.  Seems like a regression.",
      "created_at": "2021-11-14T23:53:14Z",
      "updated_at": "2021-11-14T23:53:14Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@rkeithhill it doesn't work in 5.1 now\r\n\r\n![image](https://user-images.githubusercontent.com/16209593/141764830-de3455b2-79d9-4f2c-b4eb-767119835be4.png)\r\n\r\nThat prompt is an immediate giveaway, and it happens whether you use set-location (usual cd) or push-location (which I have for cd) \r\nbut \r\n```\r\n$d = gci -Directory | Select-Object -First 1\r\nset-location $d\r\n```\r\nIs Ok,  because $d is converted to a string, but it isn't the full path, so this  \r\n```\r\n$d = gci -Directory | Select-Object -First 1\r\nset-location C:\\\r\nset-location $d\r\n```\r\nGives\r\n```\r\nset-location : Cannot find path 'C:\\Modules' because it does not exist.\r\n```\r\n",
      "created_at": "2021-11-15T10:25:04Z",
      "updated_at": "2021-11-15T10:32:20Z"
    },
    {
      "author": "zivkan",
      "author_association": "NONE",
      "body": "> In fact you've done\r\n\r\nI'm not sure why customers using powershell should care about that subtle difference. Especially n00bs like me. Is there a reason why powershell itself shouldn't special case all paths starting with `microsoft.PowerShell.Core\\FileSystem::`, and strip it out?  Are there scenarios where `Set-Location` knowing the difference is actually useful?\r\n\r\n> Frustrating but not hard to work round\r\n\r\nI agree, but \"as a customer I thought this should work\", so I reported it. This gives the powershell team the opportunity to decide whether or not to fix it. Or maybe just improve the error message.\r\n\r\n",
      "created_at": "2021-11-15T14:23:58Z",
      "updated_at": "2021-11-15T14:23:58Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> > In fact you've done\r\n> \r\n> I'm not sure why customers using powershell should care about that subtle difference. Especially n00bs like me. \r\n\r\nTBH I agree with you. As an old hand rather than a self-identified n00b I learned the work round, usually use it and when I forget I say \"doh, that's stupid why was it never fixed\". \r\n\r\nIt doesn't need to be that way either\r\n``` \r\n[pscustomobject]@{path=\"c:\\windows\"} | set-location \r\n```\r\nShows that an object with a path property works for setting a location.  In fact it PATH has precedence over PSPath which is what CD is using, but files and directories have a `.fullname` property instead of `path`. \r\n\r\nYou can save this as \"mytypes.ps1xml\"\r\n```\r\n<Types><Type><Name>System.IO.DirectoryInfo</Name><Members><AliasProperty><Name>Path</Name><ReferencedMemberName>FullName</ReferencedMemberName></AliasProperty></Members></Type></Types>\r\n```\r\nand then run `Update-TypeData -AppendPath .\\mytypes.ps1xml` then directories support .Path , .Path trumps .PSPath and thing work the way they should. \r\n\r\nI've no idea why the onus is on you to do that, being broken for a long time turns into a reason to not fix I guess.   ",
      "created_at": "2021-11-15T18:41:20Z",
      "updated_at": "2021-11-15T18:41:20Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": " WG-Engine reviewed this issue, and we believe this issue is a duplicate of https://github.com/PowerShell/PowerShell/issues/9293.\r\n",
      "created_at": "2021-12-09T23:52:11Z",
      "updated_at": "2021-12-10T00:27:45Z"
    }
  ],
  "created_at": "2021-11-14T14:48:10Z",
  "number": 16469,
  "state": "closed",
  "title": "Strange behaviour after cd into piped directory object",
  "updated_at": "2021-12-10T00:27:45Z"
}