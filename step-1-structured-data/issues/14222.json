{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14222",
  "author": "stevenjudd",
  "body": "## Summary of the new feature/enhancement\r\n\r\nAs a Windows user I want to be able to use the Automatic Restart Sign-On functionality that is available using shutdown.exe with the /g and /sg switches. I want to be able to use a PowerShell native cmdlet instead of having to use a Windows executable to restart and auto sign-in. This feature is detailed at https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/manage/component-updates/winlogon-automatic-restart-sign-on--arso- \r\n\r\n## Proposed technical implementation details (optional)\r\n\r\nAdd a switch parameter to the existing cmdlets that enable the ARSO option for shut down or restart of a Windows system. Use \"EnableARSO\" or \"ARSO\" as the switch parameter name.\r\n",
  "closed_at": "2021-10-14T06:39:34Z",
  "comments": [
    {
      "author": "Windos",
      "author_association": "CONTRIBUTOR",
      "body": "This is PowerShell, with Tab Completion... as a user I have no idea what ARSO means and would much rather the switch be \"Auto(matic)RestartSignOn\" or something equally verbose and descriptive",
      "created_at": "2020-11-22T21:34:17Z",
      "updated_at": "2020-11-22T21:34:17Z"
    },
    {
      "author": "steviecoaster",
      "author_association": "CONTRIBUTOR",
      "body": "I'll see what I can do with this this week. ",
      "created_at": "2020-11-22T21:43:10Z",
      "updated_at": "2020-11-22T21:43:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We need a public API to implement this. Do you know such API?",
      "created_at": "2020-11-23T04:58:32Z",
      "updated_at": "2020-11-23T04:58:32Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "The public API (for Windows) that I know of is the AutoLogon registry keys https://docs.microsoft.com/en-us/troubleshoot/windows-server/user-profiles-and-logon/turn-on-automatic-logon. One big disadvantage of this is the password is encoded either in plaintext or in a reversible format. The plaintext option is the easiest as it's literally just setting the registry keys, the \"encrypted\" option is a lot more complicated and requires some PInvoking to call the LSA functions required to get the encrypted data to store in the registry. This is what I've done in [Ansible](https://github.com/ansible-collections/community.windows/blob/8193ce3f2369b1f89acb0a58a240549f50875633/plugins/modules/win_auto_logon.ps1#L52-L286) to create the encrypted data which is then stored in the registry key.\r\n\r\nWhile encrypted it is still reversible by any admin on that host so we should definitely be documenting this limitation.\n\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/troubleshoot/windows-server/user-profiles-and-logon/turn-on-automatic-logon\">Configure Windows to automate logon - Windows Server</a></strong></div><div>This article describes how to turn on the automatic logon feature in Windows by editing the registry.</div></blockquote>",
      "created_at": "2020-11-23T08:36:49Z",
      "updated_at": "2020-11-23T08:36:50Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@jborean93 I guess we cannot use this for security reasons. While PowerShell makes good use of the OS's capabilities, it remains secure as long as the OS is secure.\r\nThe only option is if MSFT makes ARSO public in Windows SDK.\r\n",
      "created_at": "2020-11-23T08:52:11Z",
      "updated_at": "2020-11-23T08:52:11Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "> The only option is if MSFT makes ARSO public in Windows SDK.\r\n\r\nI'm not sure how that would change the security aspects of this functionality. For Windows to log automatically it would need to access your password which means however it is stored it needs to be reversible. There are ways to limit this by making it encrypted and only reversible by admins on the host. Even if it was exposed as an API in Windows the end result will be the same, there are just less steps for us to take.\r\n\r\nI'm neither +1 or -1 on this feature. I can only talk about the Windows side of things and mention that this has some security risks but there are ways to slightly mitigate them.",
      "created_at": "2020-11-23T22:22:41Z",
      "updated_at": "2020-11-23T22:22:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> this has some security risks but there are ways to slightly mitigate them.\r\n\r\nIt is very sensitive area. It is a common rule to delegate such things to OS. If a security hole is found, it will be fixed there.",
      "created_at": "2020-11-24T03:10:06Z",
      "updated_at": "2020-11-24T03:10:06Z"
    },
    {
      "author": "stevenjudd",
      "author_association": "NONE",
      "body": "@jborean93, I think the security risks are assumed. The goal is to enable the same level of functionality available to shutdown.exe to the Restart-Computer and Stop-Computer cmdlets. This would allow someone to be able to get the expected functionality from PowerShell where as it stands now they must use shutdown.exe to get the functionality.",
      "created_at": "2021-01-26T06:31:01Z",
      "updated_at": "2021-01-26T06:31:01Z"
    },
    {
      "author": "TobiasPSP",
      "author_association": "COLLABORATOR",
      "body": "After thorough debate, the cmdlet WG concluded: \r\nA platform-specific feature for which a native command exists generally is easily accessible from within PowerShell as-is. For example, it is trivial on a Windows system to use shutdown.exe in a PowerShell script. \r\nUsing native commands may not be easily discoverable, though: the PowerShell help system wouldn't suggest this native command or provide help. This part could indeed be solved by adding the functionality to a core cmdlet.\r\nOn the down side, this would decrease consistency and user experience on non-targeted systems though. \r\nSo for platform specific features, the cmdlet WG recommends to continue to directly use appropriate native commands provided by the particular platform on the platforms where it is available. If additional PowerShell-specific functionality like risk mitigation (-whatif) etc is needed - native commands can easily be wrapped inside a PowerShell function. \r\nFor these reasons, the issue was closed, and we hope our reasoning resonates with the community.",
      "created_at": "2021-10-14T06:39:34Z",
      "updated_at": "2021-10-14T06:39:34Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Since it (ARSO) is public API it could be new cmdlet in a custom public project.",
      "created_at": "2021-10-14T08:40:02Z",
      "updated_at": "2021-10-14T08:40:02Z"
    }
  ],
  "created_at": "2020-11-22T19:53:43Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets-Management",
    "Resolution-Declined"
  ],
  "number": 14222,
  "state": "closed",
  "title": "Add ARSO option to Restart-Computer and Stop-Computer cmdlets",
  "updated_at": "2021-10-14T08:40:02Z"
}