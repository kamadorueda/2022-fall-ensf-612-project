{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7352",
  "author": "joeyaiello",
  "body": "Module auto-loading knows about the existence of incompatible commands, even when `Get-Command` does not, so when you try to execute a command in an Edition-incompatible module (without loading it first), it will complain about being unable to load the module. \r\n\r\nAlso note that `Get-Command Add-WindowsCapability` returns nothing here.\r\n\r\nWe may also want to extend `Get-Command` to support `-SkipEditionCheck`, but I'll file that issue as this one plays out.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nC:\\WINDOWS\\system32> Add-WindowsCapability\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nOne of these two:\r\n\r\n```none\r\nAdd-WindowsCapability : The 'Add-WindowsCapability' command was found in the module 'Dism', but 'Dism' does not support current PowerShell edition 'Core'. Its supported editions are 'Desktop'. Use 'Import-Module -SkipEditionCheck 'Dism'' to ignore the compatibility of this module.\r\nAt line:1 char:1\r\n+ Add-WindowsCapability\r\n+ ~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : ObjectNotFound: (Add-WindowsCapability:String) [], CommandNotFoundException\r\n+ FullyQualifiedErrorId : CouldNotAutoloadMatchingModule\r\n```\r\n\r\nless desirable, but still acceptable:\r\n\r\n```none\r\nAdd-WindowsCapability : The term 'Add-WindowsCapability' is not recognized as the name of a cmdlet, function, script file, or operable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\nAt line:1 char:1\r\n+ Add-WindowsCapability\r\n+ ~~~~~\r\n+ CategoryInfo          : ObjectNotFound: (Add-WindowsCapability:String) [], CommandNotFoundException\r\n+ FullyQualifiedErrorId : CommandNotFoundException\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nAdd-WindowsCapability : The 'Add-WindowsCapability' command was found in the module 'Dism', but the module could not be loaded. For more information, run 'Import-Module Dism'.\r\nAt line:1 char:1\r\n+ Add-WindowsCapability\r\n+ ~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : ObjectNotFound: (Add-WindowsCapability:String) [], CommandNotFoundException\r\n+ FullyQualifiedErrorId : CouldNotAutoloadMatchingModule\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.4\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0-preview.4\r\nOS                             Microsoft Windows 10.0.17134\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "So this is just an error message change, right?  Is this part really necessary?\r\n\r\n> Its supported editions are 'Desktop'",
      "created_at": "2018-07-25T01:37:18Z",
      "updated_at": "2018-07-25T01:37:18Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "I just copied the error message from `Import-Module`. \r\n\r\nSeems like it makes sense to have consistency between `Get-Command` and `Get-Module`, though, and autoloading seems like it should dovetail with `Get-Command`. ",
      "created_at": "2018-07-25T17:09:35Z",
      "updated_at": "2018-07-25T17:09:35Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "I'm trying to reproduce this, but haven't been able to yet. @joeyaiello, try nuking the module analysis cache (`rm $env:AppData\\..\\Local\\Microsoft\\PowerShell\\ModuleAnalysisCache` should do it) and see if this happens again.",
      "created_at": "2018-08-06T18:20:09Z",
      "updated_at": "2018-08-06T18:20:09Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "I get the second of my two \"Expected Behavior\" now, likely had to do with the command cache and my prior usage of `Add-WindowsPSModulePath`.\r\n\r\nThat being said, error message 1 under my Expected Behavior is still a way better error. We talked about this offline, I understand why #7366 wasn't the right fix (changed an error in more cases), but ultimately there may be a good reason to keep cache of incompatible modules as well as compatible. \r\n",
      "created_at": "2018-08-21T20:26:54Z",
      "updated_at": "2018-08-21T20:26:54Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Yeah I agree that we should use a more specific error message for diagnosability -- all abstractions are leaky, so we should be ready to expose some internals when something goes wrong",
      "created_at": "2018-08-21T20:37:57Z",
      "updated_at": "2018-08-21T20:37:57Z"
    }
  ],
  "created_at": "2018-07-25T00:31:37Z",
  "labels": [
    "WG-Engine",
    "WG-Cmdlets-Core"
  ],
  "number": 7352,
  "state": "open",
  "title": "Improve error message when autoloaded module fails the PSCompatibleEditions check",
  "updated_at": "2018-10-29T20:35:57Z"
}