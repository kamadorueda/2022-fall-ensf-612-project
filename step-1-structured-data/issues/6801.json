{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6801",
  "author": "mklement0",
  "body": "#6778 tracks porting the `Clear-RecycleBin` cmdlet to PowerShell Core, and it would be helpful to support other recycle-bin/trash-related functionality too, notably the ability to move filesystem items there.\r\n\r\nNote:\r\n\r\n* Windows calls the transient storage area for deleted-via-File Explorer files and folders the _recycle bin_. In the world of macOS and Linux, the same concept is known as the _trash_.  \r\nAs a real-world metaphor _trash_ makes more sense, because recovering an item from this storage area is not an act of _recycling_.  \r\nThe rest of this post uses the term _trash_, but it's worth creating _aliases_ so as to offer command and parameter names familiar on all supported platforms.\r\n\r\n* In the Linux world, only distros with freedesktop.org-compliant desktop environments have a [standardized trash interface](https://specifications.freedesktop.org/trash-spec/trashspec-latest.html), most easily accessibly via CLIs, as shown in #6778.\r\n\r\n### Support for moving (sending) filesystem items to the trash\r\n\r\n[As suggested by @geelaw](https://github.com/PowerShell/PowerShell/issues/6743#issuecomment-385472864), we could add a `-ToRecycleBin` / `-ToTrash` switch to the FileSystem provider's implementation of the `Remove-Item` cmdlet.\r\n\r\n@iSazonov suggests complementing the new switch with a _preference variable_ that sends items to the trash _by default_.  \r\nThe alternative is to use the generic `$PSDefaultParameterValues` mechanism:  \r\n`$PSDefaultParameterValues['Remove-Item:ToTrash']=$True`\r\n\r\n### Support for recovering items from the trash.\r\n\r\nProgrammatically recovering items from the trash is nontrivial and the question is whether _programmatic_ support for it is needed at all (say, via a `Recover-Item` cmdlet).\r\n\r\n@geelaw's thoughts:\r\n\r\n> One possible way for this is to let the cmdlet return a set of recycled items, where each item has an identifier (consistent across invocations but platform-dependent), date of removal, restoration path (sometimes might be unavailable) etc., and another cmdlet would restore items. I would suggest not having such cmdlets.\r\n\r\nThere's also the issue of feasibility - do all platforms have enough API / CLI support to support such a cmdlet? \r\nOn Windows, we can use `(New-Object -ComObject Shell.Application).NameSpace(0xA).Items()`\r\n\r\n### Support for opening the trash-folder GUI\r\n\r\nRecovering items from the trash is typically done interactively, via the platform's file manager's GUI.\r\n\r\nA cmdlet such as `Show-RecycleBin` / `Show-Trash` could facilitate that.\r\n\r\nThat said, perhaps such functionality doesn't add enough value to warrant implementation as a cmdlet, given that users can simply use the respective platform's GUI file manager and, as @geelaw points out, GUI-focused cmdlets are rare in PowerShell (and are typically only useful in command-line use).\r\n\r\nEnvironment data\r\n----------------\r\n\r\nWritten as of:\r\n\r\n```powershell\r\nPowerShell Core v6.0.2\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What about a preference variable to set remove to trash by default without `-ToTrash`?",
      "created_at": "2018-05-02T14:06:10Z",
      "updated_at": "2018-05-02T14:06:10Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: Good idea; I've added your suggestion to the OP, but note that we could get away with \r\n`$PSDefaultParameterValues['Remove-Item:ToTrash']=$True`",
      "created_at": "2018-05-02T14:11:44Z",
      "updated_at": "2018-05-02T14:11:44Z"
    },
    {
      "author": "GeeLaw",
      "author_association": "NONE",
      "body": "@iSazonov I was about to post what @mklement0 said. Side-note: it seems that `PSDefaultParameterValues` is not hierarchical. For `VerbosePreference`, it is possible to set a local version of it without affecting outer-scoped preference. However, it is not the same with `PSDefaultParameterValues`.\r\n\r\nIt doesn't seem to worth adding a preference variable just for removing items in the file system -- existing preference variables are all *widely applicable* (whenever the advanced function/script has `CmdletBinding`, and further, whenever it `SupportsShouldProcess`).",
      "created_at": "2018-05-02T14:16:53Z",
      "updated_at": "2018-05-02T14:16:53Z"
    },
    {
      "author": "fowl2",
      "author_association": "NONE",
      "body": "Various other `PSDriveProviders` have a \"Trash\" / soft delete concept - eg. AD (Recycle Bin, Tombstoning), Exchange (Soft delete), SharePoint (two stage recycle bin) - but as with files the \"restore\" operation is much harder to generalise between providers.\r\n\r\n`Restore-Item` (or is it `Undo-Item`?) does sounds fun though =]",
      "created_at": "2018-07-12T02:58:28Z",
      "updated_at": "2018-07-12T02:59:54Z"
    }
  ],
  "created_at": "2018-05-02T12:25:34Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets"
  ],
  "number": 6801,
  "state": "open",
  "title": "Extend support for the file-system recycle bin / trash",
  "updated_at": "2018-07-12T02:59:54Z"
}