{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8199",
  "author": "adamgauthier",
  "body": "## PR Summary\r\n\r\nThe `ConvertFrom-Json` cmdlet is currently limited to deserializing json objects with a maximum depth of 1024. An exception is thrown if the input's depth reaches that maximum.\r\n\r\nThis PR:\r\n- Adds an optional `-Depth` parameter to the cmdlet which lets the user to specify a maximum depth allowed for deserialization, which will overwrite the default maximum of `1024`.\r\n\r\nCloses #3182 \r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [x] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [x] Issue filed - Issue link: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/3736\r\n- **Testing - New and feature**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [x] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)",
  "closed_at": "2019-02-20T05:37:38Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, the design should be that there is a `-Depth` parameter (which aligns with `ConvertTo-Json`) which defaults to 1024 and the user can change as needed.  This is to preserve existing behavior.",
      "created_at": "2018-11-07T23:11:19Z",
      "updated_at": "2018-11-08T01:27:02Z"
    },
    {
      "author": "adamgauthier",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT with all due respect, may I ask to reconsider this decision? The `-Depth` parameter in `ConvertTo-Json` does not have the same behavior as the `-MaxDepth` I implemented here:\r\n\r\n`-Depth` in `ConvertTo-Json` will quietly suppress conversion after the depth level specified (2 by default), for example:\r\n```powershell\r\nPS C:\\> ConvertTo-Json (ConvertFrom-Json '{\"1\":{\"2\":{\"3\":{\"4\":{\"5\":1}}}}}')\r\n{\r\n  \"1\": {\r\n    \"2\": {\r\n      \"3\": \"@{4=}\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n`-MaxDepth` as implemented here strictly fails the conversion if the depth of the json exceeds the value, the same way `ConvertFrom-Json` currently fails if the depth is higher than 1024 **and** `ConvertTo-Json` currently fails if the depth is higher than 100. With this in mind, `-MaxDepth` could also be implemented for `ConvertTo-Json` and is not equivalent to its `-Depth` parameter.\r\n\r\nFurthermore, I believe the current `-Depth` parameter of `ConvertTo-Json` is not intuitive and has caused a lot of confusion for users in the past (there are lots of threads about it on StackOverflow, for example). What json serializer do you expect to stop serializing at third depth level by default? This leads to the user having to know beforehand what depth his input has in order for conversion to work properly (an unrealistic thing to expect). I don't think we should model new parameters aligning with it.\r\n\r\nI also think putting `1024` as the default is a bad idea. This would make it so there is no way to say \"I don't want a maximum depth\" (which is the most common scenario). It would also lead to the same problem `ConvertTo-Json` currently has: we expect the user to know beforehand what is the depth of his input.\r\n\r\nI know it would be a breaking change to have no maximum be the new default, but is it really a common scenario that someone is relying on the default behavior failing with input of depth higher than 1024? I think handling higher depth with this new parameter is the perfect opportunity to change the default behavior to something more intuitive: the cmdlets should handle whatever is thrown at them, if the user expects the input to cause a DoS in their system (which I assume was the reason for this default max depth), then they should specify a maximum depth optionally.",
      "created_at": "2018-11-08T02:42:55Z",
      "updated_at": "2018-11-08T02:42:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "So we should discuss:\r\n- Depth vs MaxDepth\r\n- Defaults\r\n- Nullable type for the parameter\r\n\r\nMy thoughts:\r\n- Depth name looks good to be consistent with ConvertTo-Json. \r\n- Current default is 2 in ConvertTo-Json. What is history why we use the value? Seems for ConvertFrom-Json the default should be larger. And defaults for both cmdlets should be the same for better UX: $source | ConvertFrom-Json | ConvertTo-Json is expected to return $source.\r\n-  I believe nullable type has no sense in scripts.\r\n\r\n/cc @markekraus @mklement0 What do you think?",
      "created_at": "2018-11-08T03:40:53Z",
      "updated_at": "2018-11-08T03:40:53Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@louistio to be clear, the decision regarding `-Depth` is simply the name of the parameter not the semantics.  At the time of discussion, we were not aware of the limitation of \"maxdepth\" would fail the entire operation rather than serialize up to 1024.  This (to me) seems broken, but would be a breaking change.  In light of that information, it's worth discussing again the the committee to see if there should be two parameters (which would be confusing to the user) or accept a breaking change at the limit.\r\n\r\nIt would also be useful if you can provide examples where the current limit of 1024 is insufficient.",
      "created_at": "2018-11-08T03:54:26Z",
      "updated_at": "2018-11-08T03:55:11Z"
    },
    {
      "author": "adamgauthier",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT Thank you! To be clear the naming is not a big concern to me, it's more about the bad user experience of having a default that I described later in my post. \ud83d\ude04",
      "created_at": "2018-11-08T04:23:26Z",
      "updated_at": "2018-11-08T04:23:26Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@PowerShell/powershell-committee had a *very* bikeshed conversation about this, and we understand the parallel concepts argument with this rough visualization:\r\n\r\n```\r\nConvertTo-Json          -Depth                               (MaxDepth is internal as 100)\r\n                   (produces partial)\r\nConvertFrom-Json        [-Depth]                             (MaxDepth is internal as 1024 and settable)\r\n   (doesn't make sense because we don't have types)          (could be called -MaxDepth, could be called -Depth for PS consistency)\r\n```\r\n\r\nDoes anyone else actually care? ",
      "created_at": "2018-11-15T00:29:37Z",
      "updated_at": "2018-11-15T00:29:37Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Two cents:\r\n- The `MaxDepth` internal value in `ConvertTo-Json` must have a low default because PowerShell must be secure by default -- omitting a parameter shouldn't open up a DoS attack, but setting it to a high (or negative - to turn off) value => you're on your own\r\n- `MaxDepth` makes sense as a settable parameter that a user can specify to avoid errors with large objects\r\n- Exposing that, it should be symmetric with anything on `ConvertFrom-Json` where symmetry makes sense",
      "created_at": "2018-11-15T01:54:39Z",
      "updated_at": "2018-11-15T01:54:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@markekraus @mklement0 Have you any thoughts about consistency of Depth parameters?",
      "created_at": "2018-11-15T03:57:32Z",
      "updated_at": "2018-11-15T03:57:32Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I agree with @rjmholt ",
      "created_at": "2018-11-18T14:12:36Z",
      "updated_at": "2018-11-18T14:12:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@joeyaiello @SteveL-MSFT Seems we can make final conclusion and continue the PR.",
      "created_at": "2018-11-18T16:16:20Z",
      "updated_at": "2018-11-18T16:16:20Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "In terms of _naming_, `-Depth` is currently consistently being used to denote a _maximum_ recursion depth.\r\n\r\nRegrettably, exceeding that maximum depth doesn't cause an _error_ in `ConvertTo-Json`, but results in near-useless `.psobject.ToString()` serialization of property values that exceed the depth.\r\nIn combination with the low default `-Depth` value of 2, that makes for frequent user frustration, as @louistio  notes - the current `ConvertTo-Json` behavior frequently amounts to _quiet de-facto failure_.\r\n\r\nIn a utopian world, unencumbered by backward-compatibility concerns:\r\n\r\n* Having a high-enough default that accommodates _most_ use cases, yet prevents DoS attacks, as @rjmholt suggests, makes sense.\r\n\r\n* Exceeding that default must _fail_.\r\n\r\n* You should be able to opt out of the default fail-if-exceeded limit with an explicit `-MaxDepth` value, again with _failure_ if exceeded; to avoid the awkwardness of `-MaxDepth ([int]::MaxValue)` or `-MaxDepth -1`, an additional `-NoMaxDepth` switch could be considered, if really needed.\r\n\r\n* You should be able to _intentionally cut off_ recursion with `-Depth`, similar to how `Get-ChildItem` uses the parameter: while there may be additional levels, you _choose_ to ignore them.\r\n\r\n\r\n\r\n",
      "created_at": "2018-11-18T22:36:43Z",
      "updated_at": "2018-11-18T22:36:43Z"
    },
    {
      "author": "adamgauthier",
      "author_association": "CONTRIBUTOR",
      "body": "@rjmholt Fair point about powershell being secure by default.\r\n\r\n@mklement0 I agree with everything you're saying, I think you basically put into words what I was struggling to convey. I like the idea of another switch for no `-NoMaxDepth`, more elegant than another invalid value!\r\n\r\nI would like to implement an equivalent to `-MaxDepth` for `ConvertTo-Json` too, to allow users to change the current default 100 value. If we're naming this parameter `-Depth`, it would conflict with the current `ConvertTo-Json` parameter, unless the team decides to break its backwards compatibility and make it explicitly fail from now on. In my opinion this is the best option because the current behavior of that parameter is a pain for powershell users for the reasons I explained above but I understand the backward compatibility concerns.",
      "created_at": "2018-11-18T22:44:13Z",
      "updated_at": "2018-11-18T22:44:13Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@louistio What would be the difference between `-Depth` and `-MaxDepth` on `ConvertTo-Json`",
      "created_at": "2018-11-19T00:07:32Z",
      "updated_at": "2018-11-19T00:07:32Z"
    },
    {
      "author": "adamgauthier",
      "author_association": "CONTRIBUTOR",
      "body": "@markekraus As mentioned above, the behavior difference resides in the cmdlet failing on input exceeding the maximum depth. `-Depth` silently suppresses exceeding depth (soft) and `-MaxDepth` fails the execution (hard). \r\n\r\nCurrently `ConvertTo-Json` has a default soft depth of 2 (configurable with `-Depth`) and default hard max depth of 100 (non configurable). `ConvertFrom-Json` has no concept of soft max depth and a default hard max depth of 1024 (non configurable - what this PR adds).\r\n\r\nWhat I'm saying is I'd be fine with changing `ConvertTo-Json`'s `-Depth` into a hard max depth but I know this is compatibility breaking.",
      "created_at": "2018-11-19T00:13:30Z",
      "updated_at": "2018-11-19T00:13:36Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I think it would be confusing to have both Depth and Max Depth. We should have one for the depth and one to adjust the behavior of that depth.",
      "created_at": "2018-11-19T00:34:46Z",
      "updated_at": "2018-11-19T00:34:46Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "True, having both `-MaxDepth` and `-Depth` could be confusing; on further reflection, **all we need is <br>`-Depth`**:\r\n\r\n`-Depth` can be the opt-in, I-know-that-many-levels-is-all-I-need-or-I-really-want-that-many-levels parameter.\r\n\r\n(What is conceptually) `-MaxDepth` _needn't be user-facing_ (but needs to be documented): it can a  _fixed, documented limit_ that is chosen high enough to (a) accommodate most use cases while (b) preventing DoS attacks - and exceeding that limit causes an _error_.\r\n\r\n`-Depth` then does double duty:\r\n\r\n* You use it for data whose depth falls below the documented, fixed max. depth, in case you intentionally want to cut it off at the specified depth.\r\n\r\n* You also use it for data that you do want whose depth happens to exceed the internal (but documented) max. depth that you do want to serialize/deserialize in full nonetheless.\r\n\r\nI personally then don't see a need for any other parameters - I think opting into levels beyond the fixed limit with an explicit number or even with `-Depth ([int]::MaxValue)` (without the need for an abstract `-NoMaxDepth` switch) strikes me as acceptable, because I presume this to be a rare use case.\r\n\r\nIn the _absence_ of using `-Depth` in a given command:\r\n\r\n* You either live happily ever after, given that most commands won't hit the fixed limit.\r\n\r\n* You are alerted to a problem through the error that is reported if your data unexpectedly exceeds the fixed limit (in which case you'll need to use `-Depth`, if using that many levels is really your intent).\r\n\r\nAs for required changes and backward compatibility:\r\n\r\n* Remove the default `-Depth` of 2 from `ConvertTo-Json` (from what I understand, it already has a fixed, internal limit of 100 beyond which it _fails_).\r\n\r\n* Document the fixed limits.\r\n\r\n* The only way in which existing code could be impacted is in that payloads generated with `ConvertTo-Json` could now increase, if users previously implied on the implicit cut-off at depth 2 - that strikes me as a [Bucket 3: Unlikely Grey Area](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md#bucket-3-unlikely-grey-area) change.\r\n\r\n\r\n\r\n",
      "created_at": "2018-11-19T03:11:11Z",
      "updated_at": "2018-11-19T03:20:07Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "There are 2 things: 1) The maximum depth you want to convert and 2) the behavior of that conversion. They **both** need to be configurable, IMO and just relying on a single param for both would be a pain. \r\n\r\nThere are a very large number of objects passed to `ConvertTo-Json` where only having a max depth that errors would make them impossible objects to convert. We _need_ the ability to squash. This includes object types that have parent child mappings. There would no way to convert those without squashing.\r\n\r\nConsider the Current behavior:\r\n\r\n| cmdlet | Max depth | Default Depth | Depth Configurable | Default Behavior | Behavior Configurable |\r\n|--------|------------|----------------|---------------------|------------------|------------------------|\r\n| ConvertTo-Json | 100 | 2 | yes | Silently Squash | no |\r\n| ConvertFrom-Json | 1024 | 1024 | no | Error | no |\r\n\r\nI would ultimately like to see it as this:\r\n\r\n| cmdlet | Max depth | Default Depth | Depth Configurable | Default Behavior | Behavior Configurable |\r\n|--------|------------|----------------|---------------------|------------------|------------------------|\r\n| ConvertTo-Json | Int32.MaxValue | 2 | yes | Error | yes |\r\n| ConvertFrom-Json | Int32.MaxValue | 1024 | yes | Error | yes |\r\n\r\nIdeally we would would want a `-Depth` param that sets the max depth and an `-Squash` ( or something). we still need default depths (2 for `ConvertTo-Json` and 1024 for `ConverFrom-Json`). it would be nice to add the ability to change the behavior of `ConvertTo-Json`, but that's a bit out of scope for this PR. It would also be nice to be able to squash with `ConvertFrom-Json` but that i also a bit out of scope for this PR (or maybe it is easier than I think?).\r\n\r\nBut, keeping in mind that we _could_ add parameters to control the behavior later, for this PR all we need is to add `-Depth` to `ConvertFrom-Json` with a default of 1024, of type Int, with a ValidateRange of 1 to Int32.MaxValue. I don't see a pressing need to change the behavior of `ConvertTo-Json` in the same PR, but if it was I would recommend changing the internal max depth from 100 to Int.MaxValue (Keeping Depth at a default of 2). That way we are safe from DoS by default, but let the user hold their fate in their own hands should they wish to try an absurdly deep object.\r\n\r\nA bit of flavor text: A JSON object over 1024 in depth is an outlier. Other than abused/broken APIs or contrived examples, I have rarely seen a legit JSON objet that is deeper than ~30. On the flip-side, infinitely deep objects are very commonly thrown at ConvertTo-Json. (Based on my experience, YMMV.)",
      "created_at": "2018-11-19T03:49:15Z",
      "updated_at": "2018-11-19T03:49:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">  I don't see a pressing need to change the behavior of ConvertTo-Json in the same PR, but if it was I would recommend\r\n\r\nI think it is better to make both changes for Depth in the PR to get clean history and continue with rest ideas in follow PRs.",
      "created_at": "2018-11-19T04:14:35Z",
      "updated_at": "2018-11-19T04:14:35Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the analysis, @markekraus, but I still think `-Depth` is enough, for both `ConvertTo-Json` and `ConvertFrom-Json`:\r\n\r\n* In the absence of `-Depth`, exceeding the _documented, hard-coded_ max. depth will result in an _error_.\r\n\r\n* Use of `-Depth` never results in an error, and is used _intentionally_ to:\r\n   * truncate the object tree at the specified level (whether or not that level is below or above the hard-coded max. depth)\r\n  * opt-into object trees that are deeper than the hard-coded max. depth\r\n\r\nTo put it differently: the hard-coded max. depth is then no longer a  _default value_ for `-Depth`, it is a _built-in safety mechanism_ that can be overridden with `-Depth`, if needed (which, with reasonably high defaults, will rarely be necessary).\r\n\r\nIf you have a \"runaway\" tree of infinite depth, then the hard-coded max. will save you.\r\nIf you actually do need more depth, you can opt in with `-Depth`.",
      "created_at": "2018-11-26T20:27:24Z",
      "updated_at": "2018-11-26T20:29:01Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee appreciates the discussion and we still suggest that we have the single `-Depth` defaulting to 1024 on `ConvertFrom-Json` to preserve existing behavior and not have any changes to erroring out vs truncation as it seems that there is no practical reason to force symmetry between the two while incurring a breaking change.",
      "created_at": "2018-11-28T23:10:58Z",
      "updated_at": "2018-11-28T23:10:58Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT, just to clarify what the decision was:\r\n\r\n* A `-Depth` parameter will be introduced to `ConvertFrom-Json` that allows deserializing from object trees with _greater_ depth than the internal limit of `1024`, which will stay in place. Correct?\r\n\r\nFor symmetry with how `-Depth` works in `Convert*To*-Json`, that would also requiring _truncating_ the deserialization at the specified (max.) depth, (typically) for deserializing object trees of lesser depth that only need to be deserialized to a given depth.\r\n\r\nIs that the plan too?\r\n\r\nIf so, we need to decide how to represent the truncated properties, which is where @iRon7's suggestion from #8381 can come in, namely to represent the truncated values with `\u2026`, an ellipsis.\r\n\r\nE.g.:\r\n\r\n```powershell\r\n'{\r\n  \"p0\": {\r\n    \"p1a\": 42,\r\n    \"p1b\": {\r\n      \"p2\": \"not of interest\"\r\n    }\r\n  }\r\n}' | ConvertFrom-Json -Depth 1\r\n```\r\n\r\nshould then create something like\r\n`[pscustomobject] @{ p0 = [pscustomobject] @{ p1a = 42; p1b = '\u2026' }  }`\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-12-04T05:06:39Z",
      "updated_at": "2018-12-04T05:06:39Z"
    },
    {
      "author": "adamgauthier",
      "author_association": "CONTRIBUTOR",
      "body": "@mklement0 That's not how I interpret the decision at all, it says \"preserve existing behavior\" and \"there is no practical reason to force symmetry between the two\" which I assume means no truncating.\r\n\r\nI don't even really see the value of truncating on deserialization and doubt it's easily implementable without rewriting a json parser/deserializer.",
      "created_at": "2018-12-04T05:13:40Z",
      "updated_at": "2018-12-04T05:15:42Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@louistio: \r\n\r\nI thought that \"preserve existing behavior\" referred to keeping the hard-coded internal limit in place.\r\n\r\nAs for \"there is no practical reason to force symmetry between the two\": I'm unsure what that means, hence my request for clarification, but maybe you're right.\r\n\r\n> I don't even really see the value of truncating on deserialization\r\n\r\nTrue, it's  of less practical importance, given that the input is a string of limited length, so there's no concern about cycles and infinite depth the way that to-JSON serialization entails.\r\n\r\nBut then we're back to the awkward semantic asymmetry: `-Depth` meaning different things in the two cmdlets.\r\n\r\nPerhaps it's sufficient to document that, however.\r\n\r\n\r\n",
      "created_at": "2018-12-04T05:35:34Z",
      "updated_at": "2018-12-04T05:35:34Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "As for the `-Depth 2` problem in `Convert*To*-Json`: please see #8393",
      "created_at": "2018-12-04T06:08:35Z",
      "updated_at": "2018-12-04T06:08:35Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 to clarify, the recent @PowerShell/powershell-committee decision is to reaffirm the [original](https://github.com/PowerShell/PowerShell/pull/8199#issuecomment-436811967) decision which is to simply add a `-Depth` parameter that sets the internal `MaxDepth` variable that defaults to 1024 thereby preserving existing behavior.  ",
      "created_at": "2018-12-07T23:11:54Z",
      "updated_at": "2018-12-07T23:11:54Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for clarifying, @SteveL-MSFT. \r\n\r\nI see that the 'Documentation needed' is already checked - but I wanted to point that the description of the new parameter should clearly indicate how its logic differs from its `ConvertTo-Json` counterpart (max. depth with error vs. fixed depth with truncation).\r\n",
      "created_at": "2018-12-08T04:34:41Z",
      "updated_at": "2018-12-08T04:36:40Z"
    },
    {
      "author": "stale[bot]",
      "author_association": "NONE",
      "body": "This PR has been automatically marked as stale because it has not had activity in the last 30 days. It will be closed if no further activity occurs within 10 days.\nThank you for your contributions.\nCommunity members are welcome to grab these works.\n",
      "created_at": "2019-01-07T07:20:14Z",
      "updated_at": "2019-01-07T07:20:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@louistio Could you please continue? \r\nWe need to rebase.",
      "created_at": "2019-01-09T04:45:44Z",
      "updated_at": "2019-01-09T04:45:44Z"
    },
    {
      "author": "adamgauthier",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov yep sorry, life got in the way. I'll get around to it soon.",
      "created_at": "2019-01-09T04:47:26Z",
      "updated_at": "2019-01-09T04:47:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@markekraus @mklement0 @SteveL-MSFT Please update your review.\r\n\r\n@louistio Please fix StyleCop issues.",
      "created_at": "2019-01-10T03:14:06Z",
      "updated_at": "2019-01-10T03:14:06Z"
    },
    {
      "author": "adamgauthier",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Hey! Sorry, I wasn't aware of the colon convention \ud83d\ude05 I applied your suggestions through GitHub's integrated tool, but there seems to be error when running the tests without the colons! I get errors like:\r\n```\r\nConvertFrom-Json : The input object cannot be bound to any parameters for the command either because the command does not take pipeline input or the input and its properties do not match any of the parameters that take pipeline input.\r\n```\r\n\r\nI'm not super familiar as to why removing colons would cause this, could you point me into the right direction? Thanks!",
      "created_at": "2019-02-09T07:03:14Z",
      "updated_at": "2019-02-09T07:03:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@louistio Sorry, colons is needed for asHashtable but not for Depth.",
      "created_at": "2019-02-09T09:36:34Z",
      "updated_at": "2019-02-09T09:36:34Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT @markekraus  Please update your review.",
      "created_at": "2019-02-10T09:47:34Z",
      "updated_at": "2019-02-10T09:47:34Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Please update your review.",
      "created_at": "2019-02-11T13:08:36Z",
      "updated_at": "2019-02-11T13:08:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@louistio Please update the PR description and we'll merge.",
      "created_at": "2019-02-20T04:32:57Z",
      "updated_at": "2019-02-20T04:32:57Z"
    },
    {
      "author": "adamgauthier",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov description updated, I believe this still requires documentation changes, not sure if that prevents from merging.",
      "created_at": "2019-02-20T04:37:53Z",
      "updated_at": "2019-02-20T04:37:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@louistio Please open new Issue in PowerShell-Docs repo and add a reference to the PR description.",
      "created_at": "2019-02-20T04:41:18Z",
      "updated_at": "2019-02-20T04:41:18Z"
    },
    {
      "author": "adamgauthier",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov done!",
      "created_at": "2019-02-20T04:54:56Z",
      "updated_at": "2019-02-20T04:54:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@louistio Thanks for great work! ",
      "created_at": "2019-02-20T05:37:57Z",
      "updated_at": "2019-02-20T05:37:57Z"
    }
  ],
  "created_at": "2018-11-07T05:46:51Z",
  "number": 8199,
  "state": "closed",
  "title": "Add configurable maximum depth in ConvertFrom-Json with `-Depth`",
  "updated_at": "2019-02-20T05:37:57Z"
}