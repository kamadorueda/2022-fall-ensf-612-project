{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4286",
  "author": "mklement0",
  "body": "Bash has an expressive feature called [brace expansion](https://www.gnu.org/software/bash/manual/html_node/Brace-Expansion.html#Brace-Expansion), which elegantly supports generating \"Cartesian products\" to **generate multiple arguments** from a single expression **based on token lists and ranges**.\r\n\r\n<sup>As an aside: The `bash` implementation is actually severely hampered by the inability to base brace-expansion expressions on _variables_, but the `ksh` and `zsh` implementations do support that.</sup>\r\n\r\nSome Bash examples:\r\n\r\n```sh\r\n$ printf '%s\\n'  a{1,2,3}  # list form\r\na1\r\na2\r\na3\r\n```\r\n\r\n```sh\r\n$ printf '%s\\n'  a{1..3}  # range form\r\na1\r\na2\r\na3\r\n```\r\n\r\n```sh\r\n$ printf '%s\\n'  {a,b}-{1..3}  # multiple expressions can be combined\r\na-1\r\na-2\r\na-3\r\nb-1\r\nb-2\r\nb-3\r\n```\r\n\r\nNote: While the range form is reminiscent of PowerShell's `..` operator, it supports additional features:\r\n\r\n```sh\r\n$ printf '%s\\n' {a..c}.   # character ranges\r\na.\r\nb.\r\nc.\r\n\r\n$ printf '%s\\n' a{01..03}.   # padded number ranges (Bash v4+)\r\na01.\r\na02.\r\na03.\r\n\r\n$ printf '%s\\n' a{1..5..2}.   # number ranges with custom stepping (Bash v4+)\r\na1.\r\na3.\r\na5.\r\n```\r\n\r\n### A potential PowerShell approach:\r\n\r\nEmulation with PowerShell's current capabilities is somewhat cumbersome and definitely slow:\r\n\r\n```powershell\r\n1..3 | % { \"a$_\" }  # Equivalent of Bash `a{1..3}`\r\n```\r\n\r\nIn Bash, brace expansion is applied to _unquoted_ (parts of) tokens on the command line, which, for reasons of backward compatibility and different `{...}` semantics, is not an option in PowerShell, so **perhaps a new array-valued unary operator, such as `-x`**,  is the solution:\r\n\r\n```powershell\r\n# Wishful thinking; equivalent of Bash `a{1..3}`\r\n-x \"a\", (1..3)  # -> 'a1', 'a2', 'a3'\r\n```\r\n\r\n\r\n\r\n---\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta.4\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We have a format operator `-f`. So we would have \"cycled\" variant of `-f`:\r\n```powershell\r\n\"a\" -x (1..3)  # -> 'a1', 'a2', 'a3'\r\n$var = \"Hello\"\r\n\"a{0} $var {1}\" -x (1..3), \"World!\"  # -> 'a1 Hello World!', 'a2 Hello World!', 'a3 Hello World!'\r\n```",
      "created_at": "2017-07-19T13:02:48Z",
      "updated_at": "2017-07-19T13:10:06Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov:  A _binary_ operator is too limiting in this case, which is why a suggested an _array-valued_ _unary_ operator:\r\n\r\n```powershell\r\n# The equivalent of {a,b}-{1..3}\r\n-x ('a', 'b'), '-', (1..3)  # -> 'a-1', 'a-2', 'a-3', 'b-1', 'b-2', 'b-3'\r\n```\r\n",
      "created_at": "2017-07-19T13:05:51Z",
      "updated_at": "2017-07-19T13:05:51Z"
    }
  ],
  "created_at": "2017-07-18T19:09:08Z",
  "number": 4286,
  "state": "open",
  "title": "Suggestion: support Bash-style brace expansions",
  "updated_at": "2017-07-19T13:10:06Z"
}