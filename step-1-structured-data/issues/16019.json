{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16019",
  "author": "mklement0",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nPossibly related:  #9204\r\n\r\nUsing namespace variable notation in combination with the `$using:` scope works as expected with _jobs_; e.g.:\r\n\r\n```powershell\r\n$env:FOO = 'bar'\r\n# Outputs 'bar', as expected.\r\nStart-Job { $using:env:FOO } | Receive-Job -Wait -AutoRemoveJob\r\n```\r\n\r\nBy contrast, in the context of _remoting_ it fails quietly (the reference evaluates to `$null`):\r\n\r\n```powershell\r\n# Run from an elevated session on a machine with remoting enabled.\r\n$env:FOO = 'bar'\r\nInvoke-Command -ComputerName . { $using:env:FOO }\r\n```\r\n\r\n\r\n\r\n\r\n### Expected behavior\r\n\r\n`'bar'` should print.\r\n\r\n\r\n### Actual behavior\r\n\r\nNothing is output.\r\n\r\n\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nPowerShell Core 7.2.0-preview.9\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": "2021-10-06T17:43:57Z",
  "comments": [
    {
      "author": "dwtaber",
      "author_association": "CONTRIBUTOR",
      "body": "Huh, this is interesting.  When using the `-Session` parameter rather than `-ComputerName`, `Invoke-Command {$using:env:foo}` _does_ return the expected value.\r\n\r\nEdit: same for `$using:function:foo`, `$using:global:foo`, and `$using:variable:foo`.",
      "created_at": "2021-09-10T17:55:22Z",
      "updated_at": "2021-09-10T18:20:23Z"
    },
    {
      "author": "dwtaber",
      "author_association": "CONTRIBUTOR",
      "body": "I've identified the proximate cause of this issue, but not yet the root cause.  If you're using the `-ComputerName` parameter, because the remote runspace isn't opened yet, the PowerShell version on the remote computer is assumed to be PowerShell v2:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/dad7a34ee743c81dd96e742ed5516ac782388972/src/System.Management.Automation/engine/remoting/commands/PSRemotingCmdlet.cs#L1900-L1945\r\n\r\nBecause PowerShell v2 doesn't understand `$Using:` expressions, [`GetPowerShellForPSv2()`](https://github.com/PowerShell/PowerShell/blob/dad7a34ee743c81dd96e742ed5516ac782388972/src/System.Management.Automation/engine/remoting/commands/PSRemotingCmdlet.cs#L2167-L2229) is supposed to alter the script before sending to the remote computer.  I'd guess that whatever parsing happens in [`GetConvertedScript`](https://github.com/PowerShell/PowerShell/blob/dad7a34ee743c81dd96e742ed5516ac782388972/src/System.Management.Automation/engine/remoting/commands/PSRemotingCmdlet.cs#L2343-L2401) doesn't properly account for cases like `$using:env:foo`, but I haven't had a chance to dig in yet.\r\n\r\nTo test whether I was on the right track, I modified [`CreatePipeline`](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/remoting/commands/PSRemotingCmdlet.cs#L1870-L1898), replacing the conditional expression on lines 1882\u20131884 with `GetPowerShellForPSv3OrLater(PSv5OrLater)` to ignore version checking and assume the remote computer would use PowerShell v5 or later.  Sure enough, `Invoke-Command` started returning values for `$using:env:foo`, `$env:variable:foo`, etc.  Obviously it's not acceptable for production to just do away with version checking, but it at least helps pin down the cause.  I'll keep digging.",
      "created_at": "2021-09-13T18:17:26Z",
      "updated_at": "2021-09-13T18:17:26Z"
    },
    {
      "author": "dwtaber",
      "author_association": "CONTRIBUTOR",
      "body": "Looks like it's not just an issue with namespace variable notation.  The following also returns null:\r\n```powershell\r\n$Foo = [datetime]\r\nInvoke-Command -ComputerName $ComputerName {$using:Foo::Now}\r\n```",
      "created_at": "2021-09-13T23:33:12Z",
      "updated_at": "2021-09-13T23:33:12Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "WG-Remoting\r\n",
      "created_at": "2021-09-17T18:31:46Z",
      "updated_at": "2021-09-17T18:31:46Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #16113, which has now been successfully released as `v7.3.0-preview.1`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.3.0-preview.1)\n",
      "created_at": "2021-12-16T19:58:45Z",
      "updated_at": "2021-12-16T19:58:45Z"
    }
  ],
  "created_at": "2021-08-30T18:06:08Z",
  "labels": [
    "Issue-Bug",
    "Resolution-Fixed",
    "WG-Remoting"
  ],
  "number": 16019,
  "state": "closed",
  "title": "In remoting calls, combining the $using: scope with namespace variable notation is quietly ignored",
  "updated_at": "2021-12-16T19:58:45Z"
}