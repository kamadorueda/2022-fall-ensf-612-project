{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10257",
  "author": "KirkMunro",
  "body": "# PR Summary\r\n\r\nThis PR is Windows-only (for now -- if folks want it cross platform, I'm happy to update it).\r\n\r\nIt adds support for a PSUserRoot user environment variable. If the environment variable is set when PowerShell is launched, the path it defines will be used as the base path for the current user's PowerShell profile. This allows users to move their PowerShell content out of their OneDrive (see linked issue for details) and into some other location where they want that content stored/managed. The PR affects how `$env:PSModulePath` is initialized, how `$profile.CurrentUserCurrentHost` and `$profile.CurrentUserAllHosts` are initialized, and the location where the config file is read from.\r\n\r\nA matching PR will need to be submitted against PowerShellGet so that it works with this environment variable when installing modules to the user profile. I'll do that work soon.\r\n\r\nAny tooling that works directly with the current user's PowerShell folder will need to take this environment variable into account.\r\n\r\n## PR Context\r\n\r\nSee issue #8069, and in particular, [this comment about the PowerShell Committee's decision on the matter](https://github.com/PowerShell/PowerShell/issues/8069#issuecomment-504124566).\r\n\r\n## PR Checklist\r\n\r\n- [X] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [X] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [X] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [X] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [X] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [X] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2019-09-04T22:18:03Z",
  "comments": [
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "I'm confused. This doesn't seem in the spirit of what @joeyaiello wrote the committee had decided on the issue:\r\n\r\n>  we believe the risk of changing the \"user PowerShell folder\" across versions/editions of PowerShell and downlevel versions of the OS is too high to take the chance\r\n...\r\n>  it might be worth creating an automatic variable in PowerShell that points to the \"user PowerShell folder\" across platforms.\r\n\r\nI would have expected something more like: \r\n```PowerShell\r\n$ProfileDir = Split-Path $Profile.CurrentUserAllHosts\r\n```\r\n\r\nAnd I would expect it to work the same way _across platforms_ ... why would a feature like this be Windows only?\r\n\r\nInstead, you're going ahead with changes it seems like they ruled out, and making it only work on one OS?",
      "created_at": "2019-07-30T04:21:18Z",
      "updated_at": "2019-07-30T04:21:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Since this change was not discussed in original issue, concerns different platforms and affects other products this should be designed as an RFC.",
      "created_at": "2019-07-30T05:23:14Z",
      "updated_at": "2019-07-30T05:23:14Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "> This doesn't seem in the spirit of what @joeyaiello wrote the committee had decided on the issue...\r\n\r\n@Jaykul: I can't speak for @joeyaiello, but I think you're reading what he said wrong. The PowerShell Team believes the risk of changing the \"user PowerShell folder\" within PowerShell (7), i.e. in the product itself, as a change for everyone, to be too high to take the chance. He goes on to suggest an automatic variable in PowerShell that points to the user PowerShell folder across platforms, which puts the responsibility on the individual. If users change that variable, that's their call.\r\n\r\n> I would have expected something more like:\r\n>\r\n> $ProfileDir = Split-Path $Profile.CurrentUserAllHosts\r\n\r\nThe reason I went with an environment variable instead of a PowerShell automatic variable here is simple: PowerShell profiles and configuration information are both read from the PowerShell user profile folder on PowerShell startup, so it needs to be set _before_ those files are read so that they can be read from the user's desired location. Environment variables are the logical solution for that, so that's how I went.\r\n\r\n> And I would expect it to work the same way across platforms ... why would a feature like this be Windows only?\r\n\r\nI have a use case for this on Windows. I don't have a use case for this on macOS or Linux (other than consistency). I'm not opposed to making the environment variable available for both environments so that users can move their profiles on any system. My decision to stick with Windows was twofold:\r\n\r\n1. It's what was discussed in the issue.\r\n1. When it comes to getting PRs accepted, it has become very clear that a minimalist approach results in less friction...usually.\r\n\r\nThat said, if we want this to be supported universally across all platforms, I will be happy to make that change.\r\n\r\n> Since this change was not discussed in original issue, concerns different platforms and affects other products this should be designed as an RFC.\r\n\r\n@iSazonov: This change absolutely was discussed in the original issue. @joeyaiello just closed the issue afterwards without responding [to the additional comments that were added about the environment variable approach](https://github.com/PowerShell/PowerShell/issues/8069#issuecomment-504178274), probably due to some of the unnecessary noise that showed up on that discussion thread, but regardless, it seems crystal clear (to me at least) that an environment variable is the right way to go to avoid a chicken-and-egg problem due to when files are loaded from the user profile path.\r\n\r\nAs for affecting other products, I have absolutely zero evidence that this will affect other products. I checked the checkbox because in theory it could affect other products, if they're written to use the hardcoded path. Unlike the 6.2.1 and previous scenario, where there is no option for choosing the user profile path to use in PowerShell, and where there is no static property you can look at on some class to see what is chosen (it's just hardcoded internally), this approach gives an environment variable that toolmakers can work with, if they even need to. But as I said, I have no evidence that they need to, and I don't believe the user profile path to be contractual (if it was, why would it be ok that it is being changed between 5.1 and 6.2.1+).",
      "created_at": "2019-07-30T17:48:38Z",
      "updated_at": "2019-07-30T17:54:53Z"
    },
    {
      "author": "ctmcisco",
      "author_association": "NONE",
      "body": "I am seeing an issue where I would like to hard remove the PSModulePath location for my Windows Profile but regenerates after launching a new PowerShell Console. Is this something being worked on in PowerShell 7?",
      "created_at": "2019-08-30T22:49:49Z",
      "updated_at": "2019-08-30T22:49:49Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@ctmcisco: I would share that comment on PR #10300.",
      "created_at": "2019-08-31T02:57:04Z",
      "updated_at": "2019-08-31T02:57:04Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "My intent in #8069 when describing an automatic variable was not to make it settable. I know that sounds like desirable behavior to some people, but I worry greatly about the complexity of having your profile location moved from one place to another. Quoting myself:\r\n\r\n> Additionally, migration logic on upgrades (and/or moving/linking to existing folders) is extremely hard to get right 100%, and we don't want to leave users in a broken state\r\n\r\nYou brought up the point about PowerShellGet needing to be updated, and I worry further about having that logic work between versions of PowerShell where this proposed variable is respected and is not respected.\r\n\r\nQuoting @BrucePay: \"when you already have 20 knobs to tweak, adding another knob seems undesirable\". \r\n\r\nAs a workaround, you can detach your home folder from OneDrive, or you can add symlinks to other areas of your filesystem.\r\n\r\nAnd apologies on the mixed language with regard to consensus. It really wasn't my intent in the original statement to give the go-ahead on implementing something. \r\n\r\n@PowerShell/powershell-committee looked over this today, and I don't think it's a path we want to go down for the aforementioned reasons. ",
      "created_at": "2019-09-04T22:18:03Z",
      "updated_at": "2019-09-04T22:18:03Z"
    }
  ],
  "created_at": "2019-07-30T03:20:53Z",
  "number": 10257,
  "state": "closed",
  "title": "Add PSUserRoot environment variable to control where the current user PowerShell profile is stored and managed",
  "updated_at": "2019-09-04T23:57:39Z"
}