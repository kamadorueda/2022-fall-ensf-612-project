{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10510",
  "author": "martinprikryl",
  "body": "Using the latest PowerShell 6.2.2:\r\n```\r\nC:\\Test>pwsh -File Test.ps1 -\r\nC:\\Test\\Test.ps1 : Cannot process argument because the value of argument \"name\" is not valid. Change the value of the \"name\" argument and run the operation again.\r\n+ CategoryInfo          : InvalidArgument: (:) [Test.ps1], PSArgumentException\r\n+ FullyQualifiedErrorId : Argument,Test.ps1\r\n```\r\n\r\nThe `Test.ps1` is simple\r\n\r\n```sh\r\necho \"foo\"\r\n```\r\n\r\nThe error does not make any sense to me. I suspect it's a bug in command-line parsing.\r\n\r\n---\r\n\r\nPowerShell 5.1 also processes the dash strangely (although it manifests differently):\r\n[What does hyphen/dash parameter mean to PowerShell?](https://stackoverflow.com/q/57199565/850848)\r\n\r\nPowerShell 2.0 works as expected.",
  "closed_at": "2019-09-14T12:00:37Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> __Cannot process argument__ because the value of argument \"name\" is not valid\r\n\r\nThe error message clearly says that you have a typo in argument name. Dash in command line always assumes an argument.",
      "created_at": "2019-09-11T11:01:25Z",
      "updated_at": "2019-09-11T11:01:25Z"
    },
    {
      "author": "martinprikryl",
      "author_association": "NONE",
      "body": "@iSazonov  OK, thanks for your answer. But that's a \"new\" behavior, right? Because in PowerShell 2.0, it is valid to provide a dash as a parameter value. And is there a way in PowerShell 6.0/5.1 to provide a dash as a parameter value?",
      "created_at": "2019-09-11T11:12:31Z",
      "updated_at": "2019-09-11T11:12:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@martinprikryl Please use our issue template - add repo steps, expected behavior and used pwsh version.\r\n\r\nPerhaps there is inconsistency\r\n```powershell\r\npwsh -command 'echo $args[0]' -\r\n\r\n# Output -\r\n\r\n# $args[0] in test.ps1\r\n pwsh -file C:\\temp\\test.ps1 -\r\n\r\n# Output\r\nC:\\temp\\test.ps1 : Cannot process argument because the value of argument \"name\" is not valid. Change the value of the \"name\" argument and run the operation again.",
      "created_at": "2019-09-11T11:31:15Z",
      "updated_at": "2019-09-11T11:31:15Z"
    },
    {
      "author": "martinprikryl",
      "author_association": "NONE",
      "body": "I'm not sure what steps you ask me for.\r\n\r\nBut let me try.\r\n\r\nLet's have this script:\r\n\r\n```\r\necho $args[0]\r\n```\r\n\r\nI want to be able to provide a value `-` to the argument.\r\n\r\nIn PowerShell 2.0, I can simply do:\r\n\r\n```\r\npowershell.exe -File Test.ps1 -\r\n```\r\n\r\nAnd I get:\r\n\r\n```\r\n-\r\n```\r\n\r\n---\r\n\r\nIn PowerShell 6.2.2 (as well as 5.1) I get the above mentioned error message:\r\n\r\n> Cannot process argument because the value of argument \"name\" is not valid.\r\n\r\nIs this an intentional change? Or is it a bug?\r\n\r\n---\r\n\r\nIf it is an intentional change, is there a way to escape the `-` to provide a literal value `-` to the argument in PowerShell Core 6?\r\n\r\nI have tried a backslash, a backtick, single and double quotes, a double dash, a caret, but neither does that.\r\n\r\n```\r\nC:\\>pwsh -File Test.ps1 -\r\nC:\\Test.ps1 : Cannot process argument because the value of argument \"name\" is not valid. Change the value of the \"name\" argument and run the operation again.\r\n+ CategoryInfo          : InvalidArgument: (:) [Test.ps1], PSArgumentException\r\n+ FullyQualifiedErrorId : Argument,Test.ps1\r\n\r\nC:\\>pwsh -File Test.ps1 `-\r\n`-\r\n\r\nC:\\>pwsh -File Test.ps1 \\-\r\n\\-\r\n\r\nC:\\>pwsh -File Test.ps1 '-'\r\n'-'\r\n\r\nC:\\>pwsh -File Test.ps1 \"-\"\r\nC:\\Test.ps1 : Cannot process argument because the value of argument \"name\" is not valid. Change the value of the \"name\" argument and run the operation again.\r\n+ CategoryInfo          : InvalidArgument: (:) [Test.ps1], PSArgumentException\r\n+ FullyQualifiedErrorId : Argument,Test.ps1\r\n\r\nC:\\>pwsh -File Test.ps1 -- -\r\nC:\\Test.ps1 : Cannot process argument because the value of argument \"name\" is not valid. Change the value of the \"name\" argument and run the operation again.\r\n+ CategoryInfo          : InvalidArgument: (:) [Test.ps1], PSArgumentException\r\n+ FullyQualifiedErrorId : Argument,Test.ps1\r\n\r\nC:\\>pwsh -File Test.ps1 ^-\r\n^-\r\n```\r\n\r\n```\r\nPS C:\\> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.2\r\nPSEdition                      Core\r\nGitCommitId                    6.2.2\r\nOS                             Microsoft Windows 10.0.18362\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
      "created_at": "2019-09-12T06:21:31Z",
      "updated_at": "2019-09-12T06:25:29Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@martinprikryl \r\n\r\nThe problem exists in _Windows PowerShell_ and (no longer) in PowerShell Core as of the current preview (Core 7.0.0-preview.3). I do see it in 6.2.2, though (not sure what the policy re fixes is there).\r\n\r\nI'm not sure how likely back-porting of fixes to Windows PowerShell is at this point, but you can also report the issue at Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nAs for a **workaround**: use `-Command` instead of `-File`; while that changes the semantics of how the command line is parsed, in simple cases such as this one it should be fine:\r\n\r\n```\r\nC:\\> pwsh -Command ./Test.ps1 -  # note the \"./\" - should work in both WinPS and PS Core\r\n```\r\n\r\nNote the `./`, because using `-Command` (`-c`) makes PowerShell parse the arguments as if they were PowerShell code, and the usual restrictions re executing scripts by filename only apply.\r\n\r\nIf your script file path needed quoting, you'd have to use  enclosing and nested quoting and  prepend `&`; e.g.:\r\n\r\n```\r\nC:\\> pwsh -Command \"& \\\"./Test.ps1\\\" -\"\r\n```\r\n\r\n",
      "created_at": "2019-09-12T14:37:31Z",
      "updated_at": "2019-09-12T16:49:36Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2019-09-14T12:00:36Z",
      "updated_at": "2019-09-14T12:00:36Z"
    },
    {
      "author": "martinprikryl",
      "author_association": "NONE",
      "body": "OK, so this is not going to get fixed in 6.x?",
      "created_at": "2019-09-14T14:45:33Z",
      "updated_at": "2019-09-14T14:45:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I guess we haven't direct commit for the issue, it was a side effect from adding new parameters. So it is not easy backport the change.",
      "created_at": "2019-09-16T04:11:00Z",
      "updated_at": "2019-09-16T04:11:00Z"
    }
  ],
  "created_at": "2019-09-11T07:39:44Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 10510,
  "state": "closed",
  "title": "Using hyphen/dash parameter produces \"Cannot process argument because the value of argument \u201cname\u201d is not valid\"",
  "updated_at": "2019-09-16T04:11:01Z"
}