{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6174",
  "author": "dustinmoris",
  "body": "This is an extremely weird one...\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n> \"GiraffeTestsPaketApp\".Trim(\"App\").Trim(\"Paket\").Trim(\"Tests\")\r\nGiraff\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nGiraffe\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nGiraff\r\n```\r\n\r\nThis only happens when the last letter of the remaining string has an \"e\". If I'd change the initial string to \"DogTestsPaketApp\" then it would work as expected:\r\n\r\n```powershell\r\n> \"DogTestsPaketApp\".Trim(\"App\").Trim(\"Paket\").Trim(\"Tests\")\r\nDog\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-rc\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-rc\r\nOS                             Darwin 17.4.0 Darwin Kernel Version 17.4.0: Sun Dec 17 09:19:54 PST 2017; root:xnu-4570.41.2~1/RELEASE_X86_64\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nUpdated to the latest release and still get the same wrong behaviour:\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.1\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.1\r\nOS                             Darwin 17.4.0 Darwin Kernel Version 17.4.0: Sun Dec 17 09:19:54 PST 2017; root:xnu-4570.41.2~1/RELEASE_X86_64\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nWorkaround\r\n----------------\r\n\r\nI can currently work around this issue by running:\r\n\r\n```powershell\r\n> \"GiraffeTestsPaketApp\".Replace(\"App\", \"\").Replace(\"Paket\", \"\").Replace(\"Tests\", \"\")\r\nGiraffe\r\n```",
  "closed_at": "2018-02-17T14:50:59Z",
  "comments": [
    {
      "author": "thezim",
      "author_association": "CONTRIBUTOR",
      "body": "This is by [design](https://docs.microsoft.com/en-us/dotnet/api/system.string.trim?view=netframework-4.7.1#System_String_Trim) in .NET and not a PowerShell issue.\r\n\r\n> The Trim method removes from the current string all leading and trailing characters that are in the trimChars parameter. Each leading and trailing trim operation stops when a character that is not in trimChars is encountered. For example, if the current string is \"123abc456xyz789\" and trimChars contains the digits from \"1\" through \"9\", the Trim method returns \"abc456xyz\".\r\n\r\nThe `e` is being trimmed because it being matched by one of the provided characters in the array `T`,`e`,`s`,`t`,`s`.",
      "created_at": "2018-02-17T14:40:11Z",
      "updated_at": "2018-02-17T14:40:11Z"
    },
    {
      "author": "dustinmoris",
      "author_association": "NONE",
      "body": "Oh wow.. this was unexpected. I thought a string would be treated as a whole string, otherwise I would have passed in a char array if I wanted to trim individual chars. Weird design choice IMHO...",
      "created_at": "2018-02-17T14:50:57Z",
      "updated_at": "2018-02-17T14:50:57Z"
    }
  ],
  "created_at": "2018-02-17T11:43:58Z",
  "number": 6174,
  "state": "closed",
  "title": "Method `.Trim()` removes additional \"e\" from string",
  "updated_at": "2018-03-24T18:02:04Z"
}