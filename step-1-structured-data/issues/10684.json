{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10684",
  "author": "mklement0",
  "body": "From _within_ PowerShell, running `pwsh -c ''` (`pwsh -Command ''`) provides a helpful error message (followed by the CLI syntax):\r\n\r\n```\r\nCannot process the command because of a missing parameter. A command must follow -Command.\r\n```\r\n\r\nBy contrast, when `pwsh` is called _from the outside_, it _crashes_.\r\n\r\n# Steps to reproduce\r\n\r\nRun from either `cmd.exe` or  `bash`:\r\n\r\n```powershell\r\npwsh -c \"\"\r\n```\r\n\r\n# Expected behavior\r\n\r\nThe following should print to stderr and a nonzero exit code should be reported, analogous to what happens when calling from PowerShell.\r\n\r\n```none\r\nCannot process the command because of a missing parameter. A command must follow -Command.\r\n\r\n(CLI syntax diagram)\r\n```\r\n\r\n# Actual behavior\r\n\r\nThe `pwsh` process crashes as follows:\r\n\r\n```none\r\nUnhandled exception. System.ArgumentNullException: Value cannot be null. (Parameter 'value')\r\n   at System.String.IndexOf(String value, Int32 startIndex, Int32 count, StringComparison comparisonType)\r\n   at System.String.IndexOf(String value, StringComparison comparisonType)\r\n   at Microsoft.PowerShell.CommandLineParameterParser.MatchSwitch(String switchKey, String match, String smallestUnambiguousMatch)\r\n   at Microsoft.PowerShell.CommandLineParameterParser.EarlyParse(String[] args)\r\n   at Microsoft.PowerShell.UnmanagedPSEntry.Start(String consoleFilePath, String[] args, Int32 argc)\r\n   at Microsoft.PowerShell.ManagedPSEntry.Main(String[] args)\r\n```\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core 7.0.0-preview.4\r\n```\r\n",
  "closed_at": "2020-10-19T05:03:03Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We send null to MatchSwitch()\r\nhttps://github.com/PowerShell/PowerShell/blob/77ddec161417f98f8f2e57e9e9ef57d00cdc4c98/src/Microsoft.PowerShell.ConsoleHost/host/msh/CommandLineParameterParser.cs#L523-L541\r\n\r\nWe need to issue common user-friendly message.",
      "created_at": "2019-10-03T03:39:17Z",
      "updated_at": "2019-10-03T03:39:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@chuanjiao10 I think it is one issue.",
      "created_at": "2019-10-03T09:14:06Z",
      "updated_at": "2019-10-03T09:14:06Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@chuanjiao10: \r\n\r\nYour original issue had a misconception about how POSIX-like shells such as Bash evaluate `pwsh -c \"$pid\"`.\r\n\r\nhttps://github.com/PowerShell/PowerShell/issues/10410#issuecomment-537570864 explains the misconception in detail and offers solutions.\r\n\r\nIn short: When you call from Bash, `pwsh -c \"$pid\"`  is effectively the same as `pwsh -c \"\"`, because _Bash_ expands `$pid` and - given that the variable doesn't exist - expands it to the empty string.\r\n\r\n**It is _only_ `pwsh -c \"\"` that is the problem** - that is, passing what (ultimately evaluates to) an _empty string_ to `-c` (`-Command`) from _outside of PowerShell_  - and that's why this issue was created: to focus on the real problem.\r\n\r\n\r\n",
      "created_at": "2019-10-03T12:28:01Z",
      "updated_at": "2019-10-03T12:30:31Z"
    },
    {
      "author": "mbpreble",
      "author_association": "NONE",
      "body": "This doesn't appear to crash on `pwsh -c \"\"` currently but the process exits with 0 with no helpful information.\r\n\r\n`pwsh -c`, however, exits with a code of 64 and a message. The behavior of `pwsh -c \"\"` (empty argument) could be made more consistent with the behavior with no argument (and when invoked from inside of PowerShell).",
      "created_at": "2020-10-17T22:30:26Z",
      "updated_at": "2020-10-17T22:30:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> The behavior of pwsh -c \"\" (empty argument) could be made more consistent with the behavior with no argument (and when invoked from inside of PowerShell).\r\n\r\nBut \"\" is valid command.",
      "created_at": "2020-10-19T04:37:48Z",
      "updated_at": "2020-10-19T04:37:48Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Agreed, @iSazonov.\r\n\r\nOn further reflection, I think I was wrong about the expected behavior in the OP:\r\n\r\nSince an argument _is_ passed to `-c` in this case, the syntax requirements are met, so we shouldn't treat this the same as neglecting to pass an argument to `-c`.\r\n\r\nAfter the `\"\"` are stripped by PowerShell's CLI, a verbatim empty string remains (as opposed to a string literal representing the empty string). This is effectively the _absence_ of any statement.\r\n\r\nAs a no-op, it is by definition successful, and the exit should be `0`.\r\nThis is consistent with how POSIX-compatible shells handle this case.\r\n\r\nSince the current preview already exhibits this behavior, I think we can close this issue.\r\n\r\nNote that the only reason it behaves differently when called _from PowerShell_ is the broken handling of quoted arguments as described in #1995, which causes empty-string literals not to be passed at all, so that `pwsh -c \"\"` is unexpectedly the same as `pwsh -c`",
      "created_at": "2020-10-19T05:03:03Z",
      "updated_at": "2020-10-19T05:06:21Z"
    }
  ],
  "created_at": "2019-10-02T16:20:15Z",
  "number": 10684,
  "state": "closed",
  "title": "Calling the CLI from the outside with an empty command string (-c '') crashes PowerShell",
  "updated_at": "2020-10-19T05:08:19Z"
}