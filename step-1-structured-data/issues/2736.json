{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2736",
  "author": "Daniel15",
  "body": "The output from `ConvertTo-Json` is pretty ugly at the moment:\r\n```powershell\r\n@{\r\n  foo = @{\r\n    first = 'a'\r\n    second = 'bbbbbbbb'\r\n  }\r\n  barbarbarbar = @{\r\n    first = 'a'\r\n    second = 'bbbbbbbb'\r\n  }\r\n  dan = 15\r\n} | ConvertTo-Json\r\n```\r\nResults in:\r\n```json\r\n{\r\n    \"dan\":  15,\r\n    \"foo\":  {\r\n                \"second\":  \"bbbbbbbb\",\r\n                \"first\":  \"a\"\r\n            },\r\n    \"barbarbarbar\":  {\r\n                         \"second\":  \"bbbbbbbb\",\r\n                         \"first\":  \"a\"\r\n                     }\r\n}\r\n```\r\n\r\nThe formatting is all over the place. On the other hand, pretty much every other JSON library will produce something like this:\r\n```json\r\n{\r\n  \"dan\": 15,\r\n  \"foo\": {\r\n    \"second\": \"bbbbbbbb\",\r\n    \"first\": \"a\"\r\n  },\r\n  \"barbarbarbar\": {\r\n    \"second\": \"bbbbbbbb\",\r\n    \"first\": \"a\"\r\n  }\r\n}\r\n```\r\n\r\nThe standard JSON.NET pretty printing (`Newtonsoft.Json.Formatting.Indented`) may be useful, as it formats the JSON \"correctly\".\r\n\r\nThis is my current workaround to properly formatting JSON in PowerShell, it's a bit messy though:\r\n```powershell\r\n# Formats JSON in a nicer format than the built-in ConvertTo-Json does.\r\nfunction Format-Json([Parameter(Mandatory, ValueFromPipeline)][String] $json) {\r\n  $indent = 0;\r\n  ($json -Split '\\n' |\r\n    % {\r\n      if ($_ -match '[\\}\\]]') {\r\n        # This line contains  ] or }, decrement the indentation level\r\n        $indent--\r\n      }\r\n      $line = (' ' * $indent * 2) + $_.TrimStart().Replace(':  ', ': ')\r\n      if ($_ -match '[\\{\\[]') {\r\n        # This line contains [ or {, increment the indentation level\r\n        $indent++\r\n      }\r\n      $line\r\n  }) -Join \"`n\"\r\n}\r\n```\r\n(usage is like `$foo | ConvertTo-Json | Format-Json`)\r\n\r\nThis looks consistent across both PowerShell 5 and 6\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.14965.1001\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.14965.1001\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-alpha\r\nPSEdition                      Core\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   3.0.0.0\r\nGitCommitId                    v6.0.0-alpha.12\r\nCLRVersion\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n",
  "closed_at": "2017-03-09T17:32:03Z",
  "comments": [
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT @HemantMahawar are you guys okay adding `6.0.0` milestone to this one? ",
      "created_at": "2016-11-21T18:50:27Z",
      "updated_at": "2016-11-21T18:50:27Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@joeyaiello considering we're targeting cloud/REST scenarios, it makes sense",
      "created_at": "2016-11-21T19:53:04Z",
      "updated_at": "2016-11-21T19:53:04Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Got fixed with that commit ^",
      "created_at": "2017-03-01T19:27:13Z",
      "updated_at": "2017-03-01T19:27:13Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@mirichmo, is this issue fixed by #2787? If so, please close this issue.",
      "created_at": "2017-03-08T20:53:30Z",
      "updated_at": "2017-03-08T20:53:30Z"
    },
    {
      "author": "hamidshahid",
      "author_association": "NONE",
      "body": "I see that this was done? Can we have an sample of how to use the Formatting parameter please.",
      "created_at": "2017-10-06T23:39:35Z",
      "updated_at": "2017-10-06T23:39:35Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@hamidshahid there's no new parameter, the output should just be prettier:\r\n\r\n```powershell\r\nget-module pester -listavailable | convertto-json\r\n```\r\n",
      "created_at": "2017-10-07T00:10:25Z",
      "updated_at": "2017-10-07T00:10:25Z"
    },
    {
      "author": "hamidshahid",
      "author_association": "NONE",
      "body": "Thanks Steve, I was expecting formatting to be similar to the one we get with Formatting.Indented option in NewtonSoft Json library but it's cool",
      "created_at": "2017-10-07T01:43:37Z",
      "updated_at": "2017-10-07T01:43:37Z"
    }
  ],
  "created_at": "2016-11-20T04:29:17Z",
  "number": 2736,
  "state": "closed",
  "title": "Use prettier formatting for ConvertTo-Json",
  "updated_at": "2017-10-07T01:43:37Z"
}