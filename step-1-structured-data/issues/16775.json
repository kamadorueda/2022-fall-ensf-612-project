{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16775",
  "author": "PatTheMav",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\n* Have Git for Windows installed\r\n* Run Powershell 7.21 (either in ConHost or the new Terminal app, bug is reproducible in both)\r\n* Create the following simple function:\r\n```\r\nfunction Test-Ansi {\r\n    $VerbosePreference = 'Continue'\r\n    Write-Verbose '------ Before ------'\r\n    & \"$Env:ProgramFiles\\Git\\usr\\bin\\patch.exe\" --help > $null\r\n    Write-Verbose '------ After ------'\r\n}\r\n```\r\n* Observe properly formatted coloring for the line before\r\n* Observe line after being uncolored and ANSI sequences instead printed verbatim\r\n\r\n# Additional Notes\r\n\r\nThis behaviour was only observed in PowerShell 7 - running the same function on PowerShell 5 yields the expected behaviour with no breaking changes to the ANSI output. \r\n\r\nIt also doesn't make a difference whether the redirection is done via `| Out-Null` or doing a `$null` assignment. Even just redirecting stderr via `2>$null` triggers the issue. _Not_ redirecting the command is the only way to have it run without breaking.\r\n\r\nThe issue also occurs independent of invocation, `Invoke-Expression` results in this bug as does using `Start-Command`.\r\n\r\nAlso running this slightly tweaked function:\r\n```\r\nfunction Test-Ansi-Async {\r\n    $VerbosePreference = 'Continue'\r\n    Write-Verbose '------ Before ------'\r\n    Start-Process -FilePath \"C:\\Program Files\\Git\\usr\\bin\\patch.exe\" -RedirectStandardOutput NUL -ArgumentList '--help' -NoNewWindow\r\n    Write-Verbose '------ After ------'\r\n}\r\n```\r\nwill yield different bugs in ConHost or Windows Terminal:\r\n\r\n* In ConHost browsing through command history will have corrupted output, with characters remaining on screen between history items\r\n* In Windows Terminal the ANSI color codes of the next command will be corruped\r\n\r\n(See screenshots for each case).\r\n\r\nIn both cases pressing \"Enter\" without any input restores proper output at the prompt.\n\n### Expected behavior\n\n```console\nVERBOSE: ------ Before ------\r\nVERBOSE: ------ After ------\n```\n\n\n### Actual behavior\n\n```console\nVERBOSE: ------ Before ------\r\n\u2190[33;1mVERBOSE: ------ After ------\u2190[0m\n```\n\n\n### Error details\n\n```console\nPS C:\\Windows\\System32\u203a Get-Error\r\nPS C:\\Windows\\System32\u203a\n```\n\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.1\r\nPSEdition                      Core\r\nGitCommitId                    7.2.1\r\nOS                             Microsoft Windows 10.0.22000\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n# Visual Corruption in ConHost\r\n\r\n![2022-01-20_ConHost-ANSI-Bug](https://user-images.githubusercontent.com/9436503/150246602-cb223f99-dd1d-48d4-b0b4-a640910e4801.png)\r\n\r\n# Broken ANSI Codes in Windows Terminal\r\n\r\n![2022-01-20_Terminal-ANSI-Bug](https://user-images.githubusercontent.com/9436503/150246904-8c27fbb4-e203-490b-a272-66bfbbc3b0a1.png)\r\n\r\n",
  "closed_at": "2022-01-22T05:00:42Z",
  "comments": [
    {
      "author": "PatTheMav",
      "author_association": "NONE",
      "body": "Possible duplicate of https://github.com/PowerShell/PowerShell/issues/16741 (it even uses the companion tool `diff.exe` from the same package).\r\n\r\nShould've searched for \"ANSI\" instead of just \"color\" or \"redirection\" in the issue navigator.. \ud83d\ude23",
      "created_at": "2022-01-20T02:04:27Z",
      "updated_at": "2022-01-20T02:04:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@jhoneill Is this dup?",
      "created_at": "2022-01-20T04:03:56Z",
      "updated_at": "2022-01-20T04:03:56Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@iSazonov   \r\n\r\nIt's very similar to #16741   everything looks similar enough for me to think they are probably the same cause and same fix. \r\n\r\nThe one difference is that the case I had the effect only lasted as for one command (if that was a function or script other statements in the same function were impacted), and after control came back to the prompt the next command was OK.  With this one the effect continues.  \r\n\r\n",
      "created_at": "2022-01-20T10:21:59Z",
      "updated_at": "2022-01-20T10:21:59Z"
    },
    {
      "author": "PatTheMav",
      "author_association": "NONE",
      "body": "The key is in the original issue and its solution: https://github.com/PowerShell/PowerShell/pull/14413\r\n\r\nAs mentioned, the tools shipped as part of Git For Windows disable console VT mode. The PR added code that will reactivate it, but its trigger was implemented in `InputLoop.Run`.\r\n\r\nWhich fixes the issue for interactive prompt sessions, but not for script runs (which is how I found the issue originally). So if `patch` or `diff` is run as part of a script, there is no work for the `InputLoop` and VT mode stays deactivated for the remainder of the script's run.\r\n\r\nhttps://github.com/PowerShell/PowerShell/pull/16612 fixes this to re-enable VT mode (if it was enabled before) in `NotifyEndApplication`, which should run after `patch` or `diff` have finished and before any other Cmdlets or other commands are run within the script (e.g. in my case `Write-Verbose`).\r\n\r\nEDIT: It _is_ interesting, as @jhoneill mentioned, that the issue persists in my tests - the async execution means that VT is disabled in the background while the prompt is active, but browsing through the command history with `key up`/`key down` doesn't seem to trigger the implementation in the `InputLoop` even though keyboard input happens.",
      "created_at": "2022-01-20T11:33:12Z",
      "updated_at": "2022-01-20T11:39:06Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "Windows Terminal and Alacritty do not reproduce this behavior. ConHost does.\r\n\r\n![Screenshot 2022-01-20 173112](https://user-images.githubusercontent.com/78153320/150358364-206aefa1-b246-4b58-850a-6b574869e484.png)\r\n",
      "created_at": "2022-01-20T14:33:21Z",
      "updated_at": "2022-01-20T14:33:21Z"
    },
    {
      "author": "PatTheMav",
      "author_association": "NONE",
      "body": "FWIW I did encounter this issue in Windows Terminal first - what it doesn't exhibit is the ANSI sequences remaining on the screen (see the screenshots in the issue posting).",
      "created_at": "2022-01-20T16:54:12Z",
      "updated_at": "2022-01-20T16:54:12Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> see the screenshots in the issue posting\r\n\r\nOf course I looked first\r\n\r\n![Screenshot 2022-01-20 203437](https://user-images.githubusercontent.com/78153320/150391685-48a4fd7a-ab2a-45c7-be1c-92522c4d2cb7.png)\r\n\r\n",
      "created_at": "2022-01-20T17:36:30Z",
      "updated_at": "2022-01-20T17:36:30Z"
    },
    {
      "author": "PatTheMav",
      "author_association": "NONE",
      "body": "That's weird - here's my run of the same commands in Windows Terminal 1.11.3471.0 (happens with `OutputRendering` set to Host and Ansi:\r\n\r\n<img width=\"1006\" alt=\"2022-01-20_Terminal-ANSI-Bug\" src=\"https://user-images.githubusercontent.com/9436503/150392906-83ff7ac4-8777-46bb-b73a-fabb6d8fc792.png\">\r\n\r\nAs a bit of hack, wrapping the command in `cmd.exe /c './patch.exe --help > NUL'` avoids the disabling of VT for the PowerShell session as the redirection happens elsewhere.",
      "created_at": "2022-01-20T17:45:50Z",
      "updated_at": "2022-01-20T17:45:50Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> 1.11.3471.0\r\n\r\nPerhaps this is a reason. I am using Preview (1.12.3472.0).",
      "created_at": "2022-01-20T17:52:40Z",
      "updated_at": "2022-01-20T17:52:40Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@237dmitry   this demonstrates it in Windows Terminal  - at least for me .\r\n\r\n![image](https://user-images.githubusercontent.com/16209593/150396451-bc9f2c96-396b-4ca7-aad8-9e4a4d2698a0.png)\r\n\r\n```\r\n$x= & \"C:\\Program Files\\Git\\usr\\bin\\diff.exe\" --help; $y = \"`e[31m Red Text `e[0m\"; $Y\r\n```\r\n\r\nif I run `$y ` as the next command it outputs correctly.\r\n\r\n",
      "created_at": "2022-01-20T18:09:02Z",
      "updated_at": "2022-01-20T18:09:02Z"
    },
    {
      "author": "PatTheMav",
      "author_association": "NONE",
      "body": "Yeah that makes sense, as running the command triggers the InputLoop which restores the VT setting.",
      "created_at": "2022-01-20T18:17:55Z",
      "updated_at": "2022-01-20T18:17:55Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "\r\nI think it depends more on the terminal (as an application) in which to run it than on PowerShell. There is no problem in Alacritty too. \r\n\r\n![Screenshot 2022-01-20 212517](https://user-images.githubusercontent.com/78153320/150399057-3e26e754-e4a2-437b-8136-a1f5bdba10df.png)\r\n",
      "created_at": "2022-01-20T18:26:56Z",
      "updated_at": "2022-01-20T18:26:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Dup #16741",
      "created_at": "2022-01-21T04:07:58Z",
      "updated_at": "2022-01-21T04:07:58Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as duplicate and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-01-22T05:00:41Z",
      "updated_at": "2022-01-22T05:00:41Z"
    }
  ],
  "created_at": "2022-01-20T01:40:52Z",
  "number": 16775,
  "state": "closed",
  "title": "Redirection of external command output breaks ANSI sequences",
  "updated_at": "2022-01-22T05:00:42Z"
}