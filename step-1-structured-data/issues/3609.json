{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3609",
  "author": "daxian-dbw",
  "body": "See the failed test in https://travis-ci.org/PowerShell/PowerShell/jobs/223817346\r\nThe test `\"[Console]::ReadKey() implementation on non-Windows\"` uses the `expect` utility to check the prompt, feed the input and check the output.\r\nAfter moving to `netcoreapp2.0`, the implementation of `PSHost.UI.Prompt` starts to write out some ANSI terminal control codes, which cause the test to fail because the second expect `expect \"input\\r\\ninput\\r\"` in the tests would test all output until the spawned powershell process exit. This change fixes the test.\r\n\r\nNote the `Read-Host prompt` works as expected with `netcoreapp2.0` on Linux/OSX/Windows:\r\n```\r\n## Linux\r\nbash:99> /home/dongbo/PowerShell/src/powershell-unix/bin/Linux/netcoreapp2.0/ubuntu.16.04-x64/publish/powershell -nologo -noprofile Read-Host prompt\r\nprompt: input\r\ninput\r\n\r\n## OSX\r\nPowerShells-MacBook:assets psbuildacct$ /Users/psbuildacct/PowerShell/src/powershell-unix/bin/Linux/netcoreapp2.0/osx.10.12-x64/publish/powershell -nologo -noprofile Read-Host prompt\r\nprompt: input\r\ninput\r\n\r\n## Windows\r\nPS:1> D:\\PowerShell\\src\\powershell-win-core\\bin\\Debug\\netcoreapp2.0\\win10-x64\\publish\\powershell.exe -nologo -noprofile\r\nRead-Host prompt\r\nprompt: input\r\ninput\r\n```",
  "closed_at": "2017-04-20T22:12:31Z",
  "comments": [],
  "created_at": "2017-04-20T19:08:27Z",
  "number": 3609,
  "state": "closed",
  "title": "Fix the Read-Host test that fails in OSX",
  "updated_at": "2017-04-20T22:12:35Z"
}