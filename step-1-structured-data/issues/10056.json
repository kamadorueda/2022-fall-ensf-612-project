{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10056",
  "author": "KirkMunro",
  "body": "When a user provides an invalid value to a parameter, the error message that they receive should be crystal clear. Today, that is not the case. For example, consider these empty command definitions:\r\n\r\n```powershell\r\nfunction Test-Mandatory {\r\n    param(\r\n        [Parameter(Mandatory, ParameterSetName='StringTest')]\r\n        [string]\r\n        $String,\r\n\r\n        [Parameter(Mandatory, ParameterSetName='ObjectTest')]\r\n        [object]\r\n        $Object\r\n    )\r\n}\r\n\r\nfunction Test-Validator {\r\n    param(\r\n        [ValidateNotNullOrEmpty()]\r\n        [string]\r\n        $String,\r\n\r\n        [ValidateNotNull()]\r\n        [object]\r\n        $Object\r\n    )\r\n}\r\n```\r\n\r\nWhen a parameter is marked as `Mandatory`, if it's a string, it cannot be empty. If it's a non-value type object, it cannot be null. That's built in behavior. Command authors can also add `ValidatNotNullOrEmpty` or `ValidateNotNull` validators that ensure that a parameter is not null or empty, or not null, respectively. These are more or less the same thing: logic to ensure that non-null or non-empty values are provided to parameters; however, the error messages returned to users are not consistent and not necessarily as clear as they should be. Below are some command invocations along with the errors that are produced in PowerShell Core 6.2.1 today. Note that these are just the error message -- the command name, position and other details have been stripped.\r\n\r\n|Command|Error Message|\r\n|--|--|\r\n|`Test-Mandatory -String $null`|`Cannot bind argument to parameter 'String' because it is an empty string.`|\r\n|`Test-Mandatory -Object $null`|`Cannot bind argument to parameter 'Object' because it is null.`|\r\n|`Test-Validator -String $null`|`Cannot validate argument on parameter 'String'. The argument is null or empty. Provide an argument that is not null or empty, and then try the command again.`|\r\n|`Test-Validator -Object $null`|`Cannot validate argument on parameter 'Object'. The argument is null. Provide a valid value for the argument, and then try running the command again.`|\r\n\r\nThe message that each of these errors tries to convey to the caller is that they provided an invalid value into a parameter, and sometimes they suggest what should be done while encouraging them to try again. Unfortunately, the error message that appears does not actually convey that message very well.\r\n\r\n`Cannot bind argument to parameter...`\r\n\r\nWhile it is true that the parameter binder was unable to bind the value provided to a certain parameter, the end user doesn't need to know those technical details.\r\n\r\n`Cannot validate argument on parameter...`\r\n\r\nThese error messages are misleading, and could sound like PowerShell was unable to perform the validation on a parameter value.\r\n\r\n`...because it is an empty string.`\r\n\r\nThis does not properly cover the case where `$null` is accidentally passed into a mandatory string parameter, which is not helpful to end users.\r\n\r\nAlso, the `Mandatory` error messages do not suggest the user try again, but the `Validator` error messages do.\r\n\r\nIn all cases, these error messages should be clear, consistent, and since PowerShell is used interactively in a shell, directed towards the end user so that they can more easily correct the problem.\r\n\r\nI propose that we change the error messages for the commands shown above to the messages shown below instead.\r\n\r\n|Command|Error Message|\r\n|--|--|\r\n|`Test-Mandatory -String $null`|`The null or empty value provided for the 'String' parameter is invalid. Try running the command again with a value for the 'String' parameter that is not null or empty.`|\r\n|`Test-Mandatory -Object $null`|`The null value provided for the 'Object' parameter is invalid. Try running the command again with a value for the 'Object' parameter that is not null.`|\r\n|`Test-Validator -String $null`|`The null or empty value provided for the 'String' parameter is invalid. Try running the command again with a value for the 'String' parameter that is not null or empty.`|\r\n|`Test-Validator -Object $null`|`The null value provided for the 'Object' parameter is invalid. Try running the command again with a value for the 'Object' parameter that is not null.`|\r\n\r\nThese messages are targeted towards the end user who is invoking the command, consistent regardless of whether the parameter is `Mandatory` or using a `ValidateNotNull` or `ValidateNotNullOrEmpty` validator, they clearly identify the problem, and they tell the user what to do to fix the problem.\r\n\r\nBetter, yes?\r\n\r\n# Environment data\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.1\r\nPSEdition                      Core\r\nGitCommitId                    6.2.1\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It would still be nice to have differences in the messages for the mandatory parameters (to identity source)",
      "created_at": "2019-07-04T15:54:26Z",
      "updated_at": "2019-07-04T15:54:26Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "I disagree, because I think that information just adds potential confusion for the end user, and these messages are really meant for the end user.\r\n\r\nIf someone invokes a command and does not meet the command requirements according to parameter binding or validation, they need to know what was wrong. I don't think they need to know if a parameter they used was mandatory, because they used it, so who cares.\r\n\r\nIf they did not use a mandatory parameter, then they need to be told that parameter such-and-such is required, but in that case they are prompted for input, so again, who cares, because for the end user it doesn't really need to be part of the error message.\r\n\r\nBehind the scenes the category info or the fully qualified error id can indicate the actual source of the issue so that a command author can identify where the error comes from.",
      "created_at": "2019-07-04T16:39:38Z",
      "updated_at": "2019-07-04T16:39:38Z"
    }
  ],
  "created_at": "2019-07-03T16:36:38Z",
  "labels": [
    "Issue-Question",
    "WG-Engine"
  ],
  "number": 10056,
  "state": "open",
  "title": "Inconsistent and unclear error messaging",
  "updated_at": "2019-10-13T17:30:03Z"
}