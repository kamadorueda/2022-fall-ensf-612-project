{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8998",
  "author": "berny275",
  "body": "# Steps to reproduce\r\n\r\nI can do the following from the powershell prompt or from cmd and I get the same output.\r\n\r\n```\r\nnmap -sn -n -oX - 10.128.77.0/24\r\n```\r\n\r\nThis gives me a list of the 19 hosts on my dev network.\r\n\r\nThe same command in powershell (I've checked this with procmon to make sure):\r\n```\r\n$remotenmapserver = \"localhost\"\r\n$nmaparg1 = \"-sn\"\r\n$nmaparg2 = \"-n\"\r\n$nmaparg3 = \"-oN\"\r\n$nmaparg4 = \"-\"\r\n$nmaparg5 = \"10.128.77.0/24\"\r\n\r\n\r\n$ScriptBlockContent =\r\n                            {\r\n                                $nmaparg1 = $args[0]\r\n                                $nmaparg2 = $args[1]\r\n                                $nmaparg3 = $args[2]\r\n                                $nmaparg4 = $args[3]\r\n                                $nmaparg5 = $args[4]\r\n                                nmap $nmaparg1 $nmaparg2 $nmaparg3 $nmaparg4 $nmaparg5\r\n\r\nInvoke-Command -AsJob -ComputerName $remotenmapserver -ScriptBlock $ScriptBlockContent -ArgumentList $nmaparg1,$nmaparg2,$nmaparg3,$nmaparg4,$nmaparg5\r\n```\r\nI get 7 hosts.\r\n\r\n# Expected behavior\r\n\r\nnmap being executed as an external command under powershell and powershell remoting should yield the same results\r\n\r\n\r\n# Actual behavior\r\n\r\nThe powershell remoting environment seems to be limited in some way but I can't find any documentation as to how or why and I can't seem to find any way to work around it either.\r\n\r\n\r\n# Environment data\r\n\r\n```\r\nName                           Value\r\n\r\n\r\nPSVersion                      6.1.3\r\nPSEdition                      Core\r\nGitCommitId                    6.1.3\r\nOS                             Microsoft Windows 10.0.17134\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "thezim",
      "author_association": "CONTRIBUTOR",
      "body": "I see that in your PowerShell version you are using `-oN` while in the native version you are using `-oX`. I can\u2019t recall the zillion args of nmap but perhaps this was a mistake?",
      "created_at": "2019-02-27T20:54:48Z",
      "updated_at": "2019-02-27T20:54:48Z"
    },
    {
      "author": "berny275",
      "author_association": "NONE",
      "body": "Sorry, that's probably just me debugging it. Output Normal vs Output XML. I was playing with Windows Firewall at that stage trying to see if I had outbound traffic restrictions on a per application basis that were affecting it somehow.\r\n\r\nI've asked the nmap crew what it's doing as well, and I'm awaiting an answer for that one. I think it's trying to do raw sockets and controlling ethernet / IP frames directly, but if it works from Powershell why not from Powershell remoting?",
      "created_at": "2019-02-27T21:33:35Z",
      "updated_at": "2019-02-27T21:40:12Z"
    },
    {
      "author": "berny275",
      "author_association": "NONE",
      "body": "If I use:\r\n\r\necho \"& nmap -sn -n -oX - 10.128.77.0/24\" > c:\\temp\\nmap.ps1\r\n\r\n$ScriptBlockContent =\r\n                             {\r\n                                 $nmaparg1 = $args[0]\r\n                                 $nmaparg2 = $args[1]\r\n                                 $nmaparg3 = $args[2]\r\n                                 $nmaparg4 = $args[3]\r\n                                 $nmaparg5 = $args[4]\r\n                                 powershell.exe $nmaparg1 $nmaparg2 $nmaparg3 $nmaparg4 $nmaparg5 \r\n                             }\r\n$nmaparg1 = \"-noprofile\"\r\n$nmaparg2 = \"-file\"\r\n$nmaparg3 = \"c:\\temp\\nmap.ps1\"\r\n$nmaparg4 = \"-verb\"\r\n$nmaparg5 = \"RunAs\"\r\n\r\nInvoke-Command -AsJob -ComputerName $remotenmapserver -ScriptBlock $ScriptBlockContent -ArgumentList $nmaparg1,$nmaparg2,$nmaparg3,$nmaparg4,$nmaparg5\r\n\r\nAnd run it from a administrator powershell prompt, it works, I get all 19 hosts.\r\n\r\nIf I run that without administrator privs, again, I get 7 hosts\r\n\r\nIf I run it without admin privs and don't use powershell remoting, I get 19 hosts. So there's definitely something in permissions inherited with powershell remoting.",
      "created_at": "2019-02-28T03:05:41Z",
      "updated_at": "2019-02-28T04:31:25Z"
    }
  ],
  "created_at": "2019-02-27T01:17:11Z",
  "number": 8998,
  "state": "open",
  "title": "NMAP not working in powershell remoting",
  "updated_at": "2021-01-15T08:40:09Z"
}