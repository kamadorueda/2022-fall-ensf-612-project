{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5834",
  "author": "TravisEz13",
  "body": "Instructions are here\r\nhttps://msdn.microsoft.com/en-us/library/windows/desktop/aa370840(v=vs.85).aspx\r\n\r\nUpdate: per @bergmeister , the msi already prevents downgrades.\r\n\r\nWe should also consider if we need to block downgrade to prerelease versions.",
  "closed_at": "2018-01-24T01:30:16Z",
  "comments": [
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13 Should be as easy as (taken from official WiX documentation [here](http://wixtoolset.org/documentation/manual/v3/howtos/updates/major_upgrade.html))\r\n`<MajorUpgrade DowngradeErrorMessage=\"A later version of $(var.ProductName) is already installed. Setup will now exit.\">`",
      "created_at": "2018-01-09T23:52:57Z",
      "updated_at": "2018-01-09T23:52:57Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13  I just built a couple of test MSIs and when trying to install a version that is older by either a digit in the minor or patch version, one already gets the following out of the box:\r\n![image](https://user-images.githubusercontent.com/9250262/34846262-7cc5521c-f70f-11e7-9ef8-fe4bd8ec95b4.png)\r\nUnless we want to customise the message as per my above comment, I think we can close this one. WDYT?",
      "created_at": "2018-01-11T20:42:24Z",
      "updated_at": "2018-01-11T20:42:24Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "sounds good.",
      "created_at": "2018-01-11T21:09:09Z",
      "updated_at": "2018-01-11T21:09:09Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Do we want to enable preventing downgrades to preview releases?\r\n",
      "created_at": "2018-01-11T21:10:03Z",
      "updated_at": "2018-01-11T21:10:03Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "I personally do not see the need/value of that, therefore it's up to you.",
      "created_at": "2018-01-11T22:12:34Z",
      "updated_at": "2018-01-11T22:12:34Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We get this for preview versions automatically if we add the feature in master branch. I see no problems - we can install previews side-by-side from zip distributives in any time.",
      "created_at": "2018-01-12T19:07:48Z",
      "updated_at": "2018-01-12T19:07:48Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "The problem is the version is the same between previews and the final version.  So downgrades from the final to preview is allowed.  We would have to do something like adding a 4th place to the version which we increment at release.",
      "created_at": "2018-01-12T21:55:44Z",
      "updated_at": "2018-01-12T21:55:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I believe we could increment 1th, 2nd or/and 3rd places at releases and use 4th place for daily preview builds. But the 4th (revision) is only in Version type, SemVer hasn't a revision place. It seems we need a map of the types.\r\n\r\nMaybe we better use [GitVersion](http://gitversion.readthedocs.io/en/latest/more-info/version-increments/)? \r\nI think the tool can help to resolve many version problems, e.g #5846 by alpha/beta channels /cc @SteveL-MSFT ",
      "created_at": "2018-01-13T10:09:35Z",
      "updated_at": "2018-01-13T10:09:35Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "I think we would update the 4th only for the milestone preview builds, but otherwise it shoulds correct.",
      "created_at": "2018-01-15T18:05:54Z",
      "updated_at": "2018-01-15T18:05:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Implementation of 4th will require a lot of work.\r\nThe use of 4th looks too difficult for the modern servicing model we use.\r\nI reread GitVersion docs and believe we could do the following way:\r\n1. Turn on auto increment PATCH per commit in 6.0.0 master branch.\r\n2. At the release time manually create release branch with 6.1.0 version and switch to 6.1.x version in master branch with again auto increment PATCH per commit.\r\n\r\nOr we could make odd versions as development versions:\r\n1. Switch to 6.1.x version and turn on auto increment PATCH per commit.\r\n2. At the release time manually create release branch with 6.2.0 version and switch to 6.3.x version in master branch with auto increment PATCH per commit.\r\n\r\nIt seems such model resolve all problems with upgrades and simplified release process.\r\n\r\nUpdate: I think we should consider to switch from [GitHubFlow](http://gitversion.readthedocs.io/en/latest/git-branching-strategies/githubflow-examples/) to [GitFlow](http://gitversion.readthedocs.io/en/latest/git-branching-strategies/gitflow-examples/)",
      "created_at": "2018-01-16T05:26:49Z",
      "updated_at": "2018-01-16T11:26:38Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Using the third digit during previews is not needed.  I don't believe there is a good reason to capture the information we are putting in the 4th digit in the SemVer.  I'd rather just live with the downgrade issue or manually change the 3rd digit before release.\r\n\r\nOr, make the odd versions the development versions.\r\n\r\n\r\n",
      "created_at": "2018-01-17T00:42:21Z",
      "updated_at": "2018-01-17T01:07:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The 4th digit  should be reflected somehow in the package name - as a build number.\r\nAlso the current model don't  reflect servicing packages - I believe Gitflow is a flexible enough model to solve such problems.",
      "created_at": "2018-01-17T05:14:50Z",
      "updated_at": "2018-01-17T05:14:50Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "If the consensus is that if we change the 4th digit, it should be reflected in the name, I don't think we should change the 4th digit.  But I think we can use the 4th digit.  I could be a system much simpler than you are thinking of.  As simple as for release builds the 4th digit is always 1 and for a pre-release build, the 4th digit is always 0.  This would prevent any pre-release build from installing over the release build, without the user uninstalling which is the primary goal.\r\n\r\nTo summarize:\r\n`MAJOR.MINOR.PATCH.RELEASEFLAG`\r\nWhere `MAJOR.MINOR.PATCH` follower https://semver.org/\r\n`RELEASEFLAG` = 0 mean the SemVer has a prerelease identifier (https://semver.org/ point 9)\r\n`RELEASEFLAG` = 1 means the SemVer does not have a prerelease identifier\r\n\r\nBecause, all information is based on the SemVer and SerVer is in the package Name, no change to the package name is needed.",
      "created_at": "2018-01-17T21:05:19Z",
      "updated_at": "2018-01-17T21:05:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Ah, do you suggest not to increase 4th every prerelease?",
      "created_at": "2018-01-18T14:48:53Z",
      "updated_at": "2018-01-18T14:48:53Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "I wouldn't.  As you suggest, it would add hidden information that would be confusing.  The main goal is to prevent people from downgrading from the release build to a pre-release build, without a warning.",
      "created_at": "2018-01-20T01:18:18Z",
      "updated_at": "2018-01-20T01:19:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "From @bergmeister link above:\r\n>Increment the Version value in your Product element to be higher than any previous versions that you have shipped. Windows Installer only uses the first 3 parts of the version in upgrade scenarios, so make sure to increment your version such that one of the first 3 parts is higher than any previously shipped version. For example, if your version 1 uses Version value 1.0.1.0, then version 2 should have a Version value of 1.0.2.0 or higher (1.0.1.1 will not work here).\r\n\r\nWe skip that MSI don't support 4th part.",
      "created_at": "2018-01-20T17:09:59Z",
      "updated_at": "2018-01-20T17:09:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Solution for 4th requires a custom action and  looks complicate https://stackoverflow.com/questions/16642518/can-we-upgrade-1-0-0-0-to-1-0-0-1-while-changing-product-code\r\n\r\n ",
      "created_at": "2018-01-20T18:19:56Z",
      "updated_at": "2018-01-20T18:19:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think we need to use the experience of other teams:\r\nhttps://github.com/stuartleeks/dotnet-cli/blob/master/Documentation/cli-installation-scenarios.md#channels\r\nhttps://support.google.com/chromebook/answer/1086915\r\n\r\nIf we use channels, we do not need to worry about their conflicts - ordinary users will only use the product channel, testers and developers will use either the beta channel or the development channel. Those who want to combine versions of different channels can use AppImages.\r\n\r\nAs for the version numbering, we need to go back to my comment above.",
      "created_at": "2018-01-20T19:04:34Z",
      "updated_at": "2018-01-20T19:04:34Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "It seems you are suggesting we can close this.",
      "created_at": "2018-01-22T23:17:43Z",
      "updated_at": "2018-01-22T23:17:43Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I don't think it's worth the effort to prevent downgrades to prerelease versions.",
      "created_at": "2018-01-24T01:30:16Z",
      "updated_at": "2018-01-24T01:30:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Should we fix this for release versions? (Disable downgrade for release versions)\r\n\r\nAlso what do you think about using the channels and branches - release, beta, develop?",
      "created_at": "2018-01-24T03:50:57Z",
      "updated_at": "2018-01-24T03:52:53Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I don't know if we should disable downgrade for release versions.  If someone installs 6.1 and we made a mistake introducing a regression, they may want to roll back to 6.0 until we fix it in a newer version.\r\n\r\nI believe we discussed having multiple branches for stable vs experimental, but decided against it unless there's a real need for it.",
      "created_at": "2018-01-24T04:12:39Z",
      "updated_at": "2018-01-24T04:12:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">they may want to roll back to 6.0 until we fix it in a newer version\r\n\r\nThey'll to have first uninstall new version and only then install previous. This protects against silent downgrade.\r\n\r\n>but  decided against it unless there's a real need for it\r\n\r\nWas it internal discussion? In recent days I'm looking at the CoreFX model - it seems more flexible and consume less resources after we have the release and we need the servicing.\r\n",
      "created_at": "2018-01-24T04:32:36Z",
      "updated_at": "2018-01-24T04:32:36Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Per @bergmeister  Downgrade for release versions is already blocked. https://github.com/PowerShell/PowerShell/issues/5834#issuecomment-357055050",
      "created_at": "2018-01-24T17:41:37Z",
      "updated_at": "2018-01-24T17:41:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Yes, I skipped that this is enabled by default.",
      "created_at": "2018-01-24T18:00:34Z",
      "updated_at": "2018-01-24T18:00:34Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "I checked and WiX does what the article says by default.  I think the property mentioned only changes the error.",
      "created_at": "2018-01-26T18:53:56Z",
      "updated_at": "2018-01-26T18:53:56Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "Yes, the property is only a customisation of the error message.",
      "created_at": "2018-01-26T23:40:57Z",
      "updated_at": "2018-01-26T23:40:57Z"
    }
  ],
  "created_at": "2018-01-09T18:49:53Z",
  "number": 5834,
  "state": "closed",
  "title": "Prevent old version of PowerShell MSI from installing over newer versions",
  "updated_at": "2018-01-26T23:40:57Z"
}