{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17191",
  "author": "wmentha",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nAdds `ValidateNotNullOrWhiteSpace` to `System.Management.Automation`\r\n\r\n## PR Context\r\n\r\nCloses #10010\r\n\r\nCurrently, users who want to validate a string or collection of strings will add the `[ValidateNotNullOrEmpty()]` attribute to it and then manually validate the string with `[String]::IsNullOrWhiteSpace(my_string)`.\r\n\r\n```powershell\r\n[ValidateNotNullOrEmpty()]\r\n[String[]]\r\n$string_collection = @(\"a\", \"b\", \" \", \"d\")\r\n\r\nforeach ($str in $string_collection)\r\n{\r\n    if (-not [String]::IsNullOrWhiteSpace($str))\r\n    {\r\n        throw [System.ArgumentNullException] \"Element consisted entirely of white-space characters\"\r\n    }\r\n}\r\n```\r\n\r\nAlternate implentation @vexx32 suggested could have been a bool argument to ValidateNotNullOrEmpy: `ValidateNotNullOrEmpty(WhiteSpace)`. However I have chosen to implement this as a seperate attribute as users who work with strings know to use a seperate attribute when validating them: `ValidateNotNullOrEmpty` as opposed to `ValidateNotNull`. `ValidateNotNullOrEmpty` adds a further requirement for the validation over `ValidateNotNull`. Likewise `ValidateNotNullOrWhiteSpace` adds the further requirement of no strings consisting entirely of white-space over `ValidateNotNullOrEmpty`. \r\n\r\nAlso, this is my first commit \ud83d\ude0a\r\n\r\n### Class Diagram Before\r\n```mermaid\r\nclassDiagram\r\n    ValidateArgumentsAttribute <|-- NullValidationAttributeBase\r\n    NullValidationAttributeBase <|-- ValidateNotNullAttribute\r\n    NullValidationAttributeBase <|-- ValidateNotNullOrEmptyAttribute\r\n    class ValidateArgumentsAttribute {\r\n        <<abstract>>\r\n        #Validate(object arguments, EngineIntrinsics engineIntrinsics)* void\r\n    }\r\n    class NullValidationAttributeBase {\r\n        <<abstract>>\r\n        #IsArgumentCollection(Type argumentType, out bool isElementValueType) bool\r\n    }\r\n    class ValidateNotNullAttribute{\r\n        #Validate(object arguments, EngineIntrinsics engineIntrinsics) void\r\n    }\r\n    class ValidateNotNullOrEmptyAttribute{\r\n        #Validate(object arguments, EngineIntrinsics engineIntrinsics) void\r\n    }\r\n```\r\n### Class Diagram After\r\n```mermaid\r\nclassDiagram\r\n    ValidateArgumentsAttribute <|-- NullValidationAttributeBase\r\n    NullValidationAttributeBase <|-- ValidateNotNullAttribute\r\n    NullValidationAttributeBase <|-- ValidateNotNullOr\r\n    ValidateNotNullOr <|-- ValidateNotNullOrEmptyAttribute\r\n    ValidateNotNullOr <|-- ValidateNotNullOrWhiteSpaceAttribute\r\n    class ValidateArgumentsAttribute {\r\n        <<abstract>>\r\n        #Validate(object arguments, EngineIntrinsics engineIntrinsics)* void\r\n    }\r\n    class NullValidationAttributeBase {\r\n        <<abstract>>\r\n        #IsArgumentCollection(Type argumentType, out bool isElementValueType) bool\r\n    }\r\n    class ValidateNotNullAttribute{\r\n        #Validate(object arguments, EngineIntrinsics engineIntrinsics) void\r\n    }\r\n    class ValidateNotNullOr{\r\n        <<abstract>>\r\n        #bool _whiteSpace\r\n        #ValidateNotNullOr(bool whiteSpace)*\r\n        #Validate(object arguments, EngineIntrinsics engineIntrinsics) void\r\n    }\r\n    class ValidateNotNullOrEmptyAttribute {\r\n        +ValidateNotNullOrEmptyAttribute(bool whiteSpace)\r\n    }\r\n    class ValidateNotNullOrWhiteSpaceAttribute {\r\n        +ValidateNotNullOrWhiteSpaceAttribute(bool whiteSpace)\r\n    }\r\n```\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n- **User-facing changes**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.",
  "closed_at": "2022-08-09T17:48:09Z",
  "comments": [
    {
      "author": "microsoft-cla-retired[bot]",
      "author_association": "NONE",
      "body": "[![CLA assistant check](https://cla.opensource.microsoft.com/pull/badge/signed)](https://cla.opensource.microsoft.com/PowerShell/PowerShell?pullRequest=17191) <br/>All CLA requirements met.",
      "created_at": "2022-04-25T07:35:08Z",
      "updated_at": "2022-04-25T14:30:00Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@JamesWTruher Can you please take a look and see if this change is something we want to take? My concern is that any commands using this attribute won't work on downlevel PowerShell versions, which may make this attribute less interesting to module authors, until all downlevel versions are out of support.",
      "created_at": "2022-04-27T17:36:47Z",
      "updated_at": "2022-04-27T17:37:05Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2022-05-05T02:00:44Z",
      "updated_at": "2022-05-05T02:00:44Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@JamesWTruher gentle ping :)",
      "created_at": "2022-05-05T16:08:15Z",
      "updated_at": "2022-05-05T16:08:15Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2022-05-13T02:00:47Z",
      "updated_at": "2022-05-13T02:00:47Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "I think this is fine. We have plenty of examples of new behaviors which will not be available down level.",
      "created_at": "2022-05-23T18:55:53Z",
      "updated_at": "2022-05-23T18:55:53Z"
    },
    {
      "author": "wmentha",
      "author_association": "CONTRIBUTOR",
      "body": "@daxian-dbw gentle ping \ud83d\ude0a",
      "created_at": "2022-07-26T07:51:51Z",
      "updated_at": "2022-07-26T07:51:51Z"
    },
    {
      "author": "pull-request-quantifier[bot]",
      "author_association": "NONE",
      "body": "### ![](https://img.shields.io/static/v1?label=Quantified&message=Small&color=green)\r\n\r\nThis PR has `76` quantified lines of changes. In general, a change size of upto `200` lines is ideal for the best PR experience!\r\n\r\n------\r\n\r\n<details >\r\n    <summary display=\"inline\"> <strong>Quantification details</strong></summary>\r\n    <p />\r\n\r\n```\r\nLabel      : Small\r\nSize       : +67 -9\r\nPercentile : 30.4%\r\n\r\nTotal files changed: 7\r\n\r\nChange summary by file extension:\r\n.cs : +32 -4\r\n.resx : +6 -0\r\n.ps1 : +28 -5\r\n.csv : +1 -0\r\n```\r\n> Change counts above are quantified counts, based on the [PullRequestQuantifier customizations](https://github.com/microsoft/PullRequestQuantifier/blob/main/docs/prquantifier-yaml.md).\r\n    \r\n</details>\r\n\r\n\r\n<details>\r\n    <summary display=\"inline\"> <strong>Why proper sizing of changes matters</strong> </summary>\r\n    <p/>\r\n    <p/>\r\n\r\nOptimal pull request sizes drive a better predictable PR flow as they strike a\r\nbalance between between PR complexity and PR review overhead. PRs within the\r\noptimal size (typical small, or medium sized PRs) mean:\r\n\r\n- Fast and predictable releases to production:\r\n  - Optimal size changes are more likely to be reviewed faster with fewer\r\niterations.\r\n  - Similarity in low PR complexity drives similar review times.\r\n- Review quality is likely higher as complexity is lower:\r\n  - Bugs are more likely to be detected.\r\n  - Code inconsistencies are more likely to be detected.\r\n- Knowledge sharing is improved within the participants:\r\n  - Small portions can be assimilated better.\r\n- Better engineering practices are exercised:\r\n  - Solving big problems by dividing them in well contained, smaller problems.\r\n  - Exercising separation of concerns within the code changes.\r\n\r\n#### What can I do to optimize my changes\r\n\r\n- Use the PullRequestQuantifier to quantify your PR accurately\r\n  - Create a context profile for your repo using the [context generator](https://github.com/microsoft/PullRequestQuantifier/releases)\r\n  - Exclude files that are not necessary to be reviewed or do not increase the review complexity. Example: Autogenerated code, docs, project IDE setting files, binaries, etc. Check out the `Excluded` section from your `prquantifier.yaml` context profile. \r\n  - Understand your typical change complexity, drive towards the desired complexity by adjusting the label mapping in your `prquantifier.yaml` context profile.\r\n  - Only use the labels that matter to you, [see context specification](./docs/prquantifier-yaml.md) to customize your `prquantifier.yaml` context profile.\r\n- Change your engineering behaviors\r\n  - For PRs that fall outside of the desired spectrum, review the details and check if:\r\n    - Your PR could be split in smaller, self-contained PRs instead\r\n    - Your PR only solves one particular issue. (For example, don't refactor and code new features in the same PR).\r\n\r\n#### How to interpret the change counts in git diff output\r\n\r\n- One line was added: `+1 -0`\r\n- One line was deleted: `+0 -1`\r\n- One line was modified: `+1 -1` (git diff doesn't know about modified, it will\r\ninterpret that line like one addition plus one deletion)\r\n- Change percentiles: Change characteristics (addition, deletion, modification)\r\nof this PR in relation to all other PRs within the repository.\r\n\r\n</details>\r\n\r\n<p />\r\n\r\n------\r\n\r\nWas this comment helpful? <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoid21lbnRoYSIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xNzE5MSIsIkV2ZW50VHlwZSI6IlRodW1ic1VwIn0=&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs up\"><strong>:thumbsup:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoid21lbnRoYSIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xNzE5MSIsIkV2ZW50VHlwZSI6Ik5ldXRyYWwifQ==&amp;anonymous=True\" target=\"_blank\" title=\"Neutral\"><strong>&nbsp;:ok_hand:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoid21lbnRoYSIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xNzE5MSIsIkV2ZW50VHlwZSI6IlRodW1ic0Rvd24ifQ==&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs down\"><strong>&nbsp;:thumbsdown:</strong></a> (<a href=\"MAILTO:prquantifier@microsoft.com\" title=\"Mail to prquantifier@microsoft.com\">Email</a>)\r\n[Customize PullRequestQuantifier](https://github.com/PowerShell/PowerShell/blob/master/.github/prquantifier.yaml) for this repository.\r\n\r\n",
      "created_at": "2022-08-09T02:44:28Z",
      "updated_at": "2022-08-09T02:44:28Z"
    },
    {
      "author": "wmentha",
      "author_association": "CONTRIBUTOR",
      "body": "@daxian-dbw Apologies for the mess of commits. I got tripped up on the new `$totalAccelerators` count since the addition of the `ordered` type accelerator for `OrderedDictionary` #17804",
      "created_at": "2022-08-09T03:12:14Z",
      "updated_at": "2022-08-09T03:12:14Z"
    }
  ],
  "created_at": "2022-04-25T07:34:55Z",
  "number": 17191,
  "state": "closed",
  "title": "Add ValidateNotNullOrWhiteSpace Attribute",
  "updated_at": "2022-08-10T23:11:53Z"
}