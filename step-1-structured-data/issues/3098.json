{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3098",
  "author": "vors",
  "body": "https://travis-ci.org/PowerShell/PowerShell/jobs/198247453\r\n\r\n```\r\nDescribing Get-Help -Online opens the default web browser and navigates to the cmdlet help content\r\n [-] Error occurred in Describe block 40ms\r\n   The type initializer for 'Microsoft.Win32.Registry' threw an exception.\r\n   At /home/travis/build/PowerShell/PowerShell/src/powershell-unix/bin/Linux/netcoreapp1.1/ubuntu.14.04-x64/publish/Modules/Pester/Functions/Describe.ps1:100 char:13\r\n```",
  "closed_at": "2017-03-21T18:13:47Z",
  "comments": [
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Same on OSX build\r\nhttps://travis-ci.org/PowerShell/PowerShell/jobs/198247454",
      "created_at": "2017-02-04T05:48:10Z",
      "updated_at": "2017-02-04T05:48:10Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "I investigated it a little and found a minimal repro\r\n\r\n```powershell\r\nDescribe '[Microsoft.Win32.Registry]::ClassesRoot failure' {\r\n    \r\n    if ($IsWindows) {\r\n        [Microsoft.Win32.Registry]::ClassesRoot # this code is not executed, but throws in type initializer\r\n    }\r\n\r\n    It 'works on windows' -Skip:(!$IsWindows) {\r\n        [Microsoft.Win32.Registry]::ClassesRoot # inside 'it' ClassesRoot doesn't cause problems\r\n    }\r\n}\r\n```\r\n\r\nOr even simpler\r\n\r\n```\r\nPS /Users/vors/dev/PowerShell> [Microsoft.Win32.Registry]::ClassesRoot                                                \r\nAn error occurred while creating the pipeline.\r\n    + CategoryInfo          : NotSpecified: (:) [], ParentContainsErrorRecordException\r\n    + FullyQualifiedErrorId : RuntimeException\r\n```\r\n\r\nThe main problem is that it throws exception (probably in TypeResolver?) without executing the code.",
      "created_at": "2017-02-04T21:11:07Z",
      "updated_at": "2017-02-04T21:11:07Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "I don't see it happens again, which is weird.",
      "created_at": "2017-02-09T22:53:58Z",
      "updated_at": "2017-02-09T22:53:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Get-Help test failed in \"Describe\" and before \"It\".\r\nI guess it is line \r\n```powershell\r\n    $skipTest = -not ([System.Management.Automation.Platform]::IsIoT -or [System.Management.Automation.Platform]::IsNanoServer)\r\n```\r\nBut it is working well in WSL.\r\nMay the [System.Management.Automation.Platform] call cause the loading of some dll?\r\n\r\nI unpack .deb package and see multiple files with links to Win32 Registry. Why? For remoting?\r\n",
      "created_at": "2017-02-10T10:27:30Z",
      "updated_at": "2017-02-10T10:27:30Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Accessing any static properties of `Microsoft.Win32.Registry` will raise `PlatformNotSupportedException` exception. For script like `if ($false) { [Microsoft.Win32.Registry]::ClassesRoot }`, even though it won't be hit at run time, powershell needs to access the property via reflection at compilation time, and thus will trigger this exception. This means users cannot have the uses of this type in script even if it won't run on unix, sucks \ud83d\ude26 \r\n\r\n@adityapatwardhan can you please fix the test? An option is to put the real logic in a string, and call `[ScriptBlock]::Create` to create the script block and run it.",
      "created_at": "2017-02-14T00:21:02Z",
      "updated_at": "2017-02-14T00:21:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Can we somehow log this exception and get a call stack?",
      "created_at": "2017-02-14T03:22:53Z",
      "updated_at": "2017-02-14T03:22:53Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Yes we can, by using `$Error`\r\n```\r\nPS /home/pi> [Microsoft.Win32.Registry]::ClassesRoot\r\nAn error occurred while creating the pipeline.\r\n    + CategoryInfo          : NotSpecified: (:) [], ParentContainsErrorRecordException\r\n    + FullyQualifiedErrorId : RuntimeException\r\n\r\nPS /home/pi> $Error[0].InnerException.InnerException.InnerException\r\nOperation is not supported on this platform.\r\nPS /home/pi> $Error[0].InnerException.InnerException.InnerException.StackTrace\r\n   at Microsoft.Win32.RegistryKey.OpenBaseKeyCore(RegistryHive hKey, RegistryView view)\r\n   at Microsoft.Win32.Registry..cctor()\r\n```",
      "created_at": "2017-02-14T19:04:46Z",
      "updated_at": "2017-02-14T19:04:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Sorry for the inaccuracy, my question was - can we somehow do it in _CI_?",
      "created_at": "2017-02-15T05:14:56Z",
      "updated_at": "2017-02-15T05:14:56Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Why in CI? I can repro it locally. Can you?",
      "created_at": "2017-02-15T06:06:34Z",
      "updated_at": "2017-02-15T06:06:34Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vors The test \"Describing Get-Help -Online opens the default web browser and \" work well locally for me.\r\nAs I understand the problem occurs randomly in CI only.",
      "created_at": "2017-02-15T06:10:08Z",
      "updated_at": "2017-02-15T06:10:08Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "> the problem occurs randomly in CI\r\n\r\nYes, that's correct!\r\n\r\n> only\r\n\r\nNope, both me and Dongbo can repro it locally.\r\nI'm using macOS.\r\nIt's interesting that it doesn't repro in WSL.\r\n\r\n~~Another very interesting question is \"why it sometimes succeed in CI?\"~~\r\n\r\n",
      "created_at": "2017-02-15T06:27:03Z",
      "updated_at": "2017-02-15T06:31:00Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Ah, ok the second mystery is not a mystery: it's a nightly build (that includes Feature) vs CI.\r\nFor example: \r\n\r\n- CI build https://travis-ci.org/PowerShell/PowerShell/jobs/201617482\r\n- subsequent nightly: https://travis-ci.org/PowerShell/PowerShell/builds/201743741\r\n",
      "created_at": "2017-02-15T06:30:36Z",
      "updated_at": "2017-02-15T06:30:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "\ud83d\ude15 I only tested on Windows and WSL.\r\nIt's not my train. See you later  :smiley:",
      "created_at": "2017-02-15T08:06:11Z",
      "updated_at": "2017-02-15T08:06:11Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> Describing Get-Help -Online opens the default web browser and navigates to the cmdlet help content\r\n\r\n@vors It looks like we don't run this test in nightly test pass \u2639\ufe0f Just search it in the log of a [successful nightly run](https://travis-ci.org/PowerShell/PowerShell/jobs/201617482), and cannot find it.",
      "created_at": "2017-02-15T17:15:39Z",
      "updated_at": "2017-02-15T17:15:39Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I haven't seen the `Get-Help -Online` tests failing recently, @vors do we still need this issue open?  We had failures due to an issue with a remoting test, but that's not related to this topic.",
      "created_at": "2017-03-20T20:24:46Z",
      "updated_at": "2017-03-20T20:24:58Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT it's there, take a look at this yesterday build\r\nhttps://travis-ci.org/PowerShell/PowerShell/jobs/212862882#L1395\r\n\r\nIt's pretty confusing to hunt down the nightly builds in all the builds, but you can filter by branch (master) and distinguish them by the much longer execution time. And red status :P.",
      "created_at": "2017-03-20T20:41:10Z",
      "updated_at": "2017-03-20T20:41:10Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT @vors For Travis builds, you can search for `Executing travis.ps1 $isPR='False' $isFullBuild='True'` to tell if it's a nightly build. The combinations are:\r\n`Executing travis.ps1 $isPR='True' $isFullBuild='False'`  -- PR build\r\n`Executing travis.ps1 $isPR='False' $isFullBuild='False'` -- push build\r\n`Executing travis.ps1 $isPR='False' $isFullBuild='True'`  -- nightly build",
      "created_at": "2017-03-20T20:49:59Z",
      "updated_at": "2017-03-20T20:49:59Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Fixed this specific issue changing usage of registry to psprovider",
      "created_at": "2017-03-21T18:13:47Z",
      "updated_at": "2017-03-21T18:14:12Z"
    }
  ],
  "created_at": "2017-02-04T05:47:23Z",
  "labels": [
    "OS-macOS",
    "WG-Quality-Test",
    "OS-Linux",
    "Area-Maintainers-Build",
    "Resolution-Fixed"
  ],
  "number": 3098,
  "state": "closed",
  "title": "Test fails in nightly build (master, Linux)",
  "updated_at": "2017-03-21T18:14:12Z"
}