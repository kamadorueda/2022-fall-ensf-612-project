{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12941",
  "author": "kumbham",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\n## Steps to reproduce\r\nI'm running into the following error while trying to use `System.Collections.Immutable` reference package in PowerShell binary module.\r\n\r\n```none\r\nImport-Module : Could not load file or assembly 'System.Collections.Immutable, Version=1.2.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\r\nAt line:1 char:1\r\n+ Import-Module ./CmdletPacking.psd1\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidOperation: (:) [Import-Module], FileLoadException\r\n+ FullyQualifiedErrorId : FormatXmlUpdateException,Microsoft.PowerShell.Commands.ImportModuleCommand\r\n```\r\n\r\ncsproj contents:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <AssemblyName>SampleCmdlet</AssemblyName>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"PowerShellStandard.Library\" Version=\"5.1.0-preview-06\" />\r\n    <PackageReference Include=\"System.Collections.Immutable\" Version=\"1.6.0\"/>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\npsd1 file contents:\r\n```\r\n@{\r\n\r\n# Script module or binary module file associated with this manifest.\r\nRootModule = 'bin/CmdletPacking.dll'\r\nRequiredAssemblies = 'bin/System.Collections.Immutable.dl'\r\n}\r\n```\r\n\r\nbin contents:\r\n```\r\nCmdletPacking.deps.json\t\t\t\tCmdletPacking.pdb\t\t\t\tSystem.Collections.Immutable.dll\t\tSystem.Memory.dll\t\t\t\tSystem.Runtime.CompilerServices.Unsafe.dll\r\nCmdletPacking.dll\t\t\t\tSystem.Buffers.dll\t\t\t\tSystem.Management.Automation.dll\t\tSystem.Numerics.Vectors.dll\r\n```\r\n## Expected behavior\r\n\r\n```none\r\n\r\n```\r\n\r\n## Actual behavior\r\n\r\n```none\r\n\r\n```\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.4\r\nPSEdition                      Core\r\nGitCommitId                    6.2.4\r\nOS                             Darwin 18.7.0 Darwin Kernel Version 18.7.0: Tue Aug 20 16:57:14 PDT 2019; root:xnu-4903.271.2~2/RELEASE_X86_64\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nThis happens with System.Collections.Immutable version > = 1.6.0.",
  "closed_at": "2020-06-11T09:10:14Z",
  "comments": [
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "It's likely that PowerShell can't load `System.Collections.Immutable.dll` because it already has that assembly loaded. You should see it in `$PSHOME`. Let us know what the output of the following is:\r\n\r\n```powershell\r\ngci $PSHOME | ? { $_.Name -eq 'System.Collections.Immutable.dll' } | % { [System.Reflection.Assembly]::LoadFile($_.FullName).GetName() }\r\n```\r\n\r\nYou won't be able to load your version and PowerShell's version at the same time, and since PowerShell uses its version very early on, it's always going to win. The best solution is probably to pin your version to the lowest version used by any of the PowerShell versions you want to support.\r\n\r\nAlso, if you're putting together a binary module (i.e. using the DLL dependency from C#/.NET rather than from PowerShell script), you probably don't want `RequiredAssemblies` but instead should put your DLL next to the `RootModule` and let PowerShell's assembly resolve event handler do the dependency resolution for you.\r\n\r\nFinally, since in this case the DLL is present in PowerShell, you probably don't want to include it in your module at all. When you build your module, try just omitting it.\r\n\r\nI'm actually about to publish a blog post relevant to this.\r\n\r\nA few extra points:\r\n\r\n- PS 6.2.4 is out of support; you should upgrade to either 6.2.5 or preferably 7.0.1\r\n- PSStandard is now available with version 5.1.1 too\r\n- If you can provide the full stack trace of the error, it will be much easier to determine specifically what's going on. In PS 6 you'll need to do `$error[0] | fl * -force`, in PS 7 it's as simple as `Get-Error`.",
      "created_at": "2020-06-11T01:22:05Z",
      "updated_at": "2020-06-11T01:24:11Z"
    },
    {
      "author": "kumbham",
      "author_association": "NONE",
      "body": "@rjmholt thanks for the response. Yes, you're correct. Seems like PS has installed a version of `System.Immutable.Collections`.\r\n```\r\ngci $PSHOME | ? { $_.Name -eq 'System.Collections.Immutable.dll' } | % { [System.Reflection.Assembly]::LoadFile($_.FullName).GetName() }\r\n\r\nVersion        Name\r\n-------        ----\r\n1.2.3.0        System.Collections.Immutable\r\n```\r\n\r\nBy removing the Required assemblies, I was able to import the module. However, when I try to execute the cmdlet the execution fails with the same error.\r\n\r\nCmdlet Code:\r\n```\r\n    [Cmdlet(VerbsDiagnostic.Test,\"SampleCmdlet\")]\r\n    [OutputType(typeof(FavoriteStuff))]\r\n    public class TestSampleCmdletCommand : PSCmdlet\r\n    {\r\n        [Parameter(\r\n            Mandatory = true,\r\n            Position = 0,\r\n            ValueFromPipeline = true,\r\n            ValueFromPipelineByPropertyName = true)]\r\n        public int FavoriteNumber { get; set; }\r\n        \r\n        public static readonly ImmutableList<string> BODY_HEADERS = new string[] { \"string1\", \"string2\" }.ToImmutableList();\r\n\r\n       ....\r\n```\r\n\r\nCmdlet invocation:\r\n```powershell\r\nImport-Module ./CmdletPacking.psd1\r\nTest-SampleCmdlet -FavoriteNumber 22 -Verbose\r\nVERBOSE: Beginsss!\r\nTest-SampleCmdlet : Could not load file or assembly 'System.Collections.Immutable, Version=1.2.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. Could not find or load a specific file. (Exception from HRESULT: 0x80131621)\r\nAt line:1 char:1\r\n+ Test-SampleCmdlet -FavoriteNumber 22 -Verbose\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : NotSpecified: (:) [Test-SampleCmdlet], FileLoadException\r\n+ FullyQualifiedErrorId : System.IO.FileLoadException,CmdletPacking.TestSampleCmdletCommand\r\n```\r\n\r\nComplete Error message:\r\n```powershell\r\n$error[0] | fl * -force\r\n\r\nPSMessageDetails      :\r\nException             : System.IO.FileLoadException: Could not load file or assembly 'System.Collections.Immutable, Version=1.2.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. Could not find or l\r\n                        oad a specific file. (Exception from HRESULT: 0x80131621)\r\n                        File name: 'System.Collections.Immutable, Version=1.2.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' ---> System.IO.FileLoadException: Could not load file or assembly 'Sys\r\n                        tem.Collections.Immutable, Version=1.2.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\r\n                           at System.Runtime.Loader.AssemblyLoadContext.LoadFromPath(IntPtr ptrNativeAssemblyLoadContext, String ilPath, String niPath, ObjectHandleOnStack retAssembly)\r\n                           at System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyPath(String assemblyPath)\r\n                           at System.Reflection.Assembly.LoadFrom(String assemblyFile)\r\n                           at System.Reflection.Assembly.LoadFromResolveHandler(Object sender, ResolveEventArgs args)\r\n                           at System.AppDomain.InvokeResolveEvent(ResolveEventHandler eventHandler, RuntimeAssembly assembly, String name)\r\n                           at CmdletPacking.TestSampleCmdletCommand.ProcessRecord()\r\n                           at System.Management.Automation.Cmdlet.DoProcessRecord()\r\n                           at System.Management.Automation.CommandProcessor.ProcessRecord()\r\n\r\n\r\nTargetObject          :\r\nCategoryInfo          : NotSpecified: (:) [Test-SampleCmdlet], FileLoadException\r\nFullyQualifiedErrorId : System.IO.FileLoadException,CmdletPacking.TestSampleCmdletCommand\r\nErrorDetails          :\r\nInvocationInfo        : System.Management.Automation.InvocationInfo\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\nPipelineIterationInfo : {}\r\n```\r\nWe plan to support PowerShell modules for the Powershell >=6.0 version. Is there a way we could make this work with my current package configuration? ",
      "created_at": "2020-06-11T04:11:18Z",
      "updated_at": "2020-06-11T04:11:18Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> Is there a way we could make this work with my current package configuration?\r\n\r\nThere is, but the ease of it depends on the circumstances.\r\n\r\nThe easiest way to fix the issue is to downgrade your dependency versions to support System.Collections.Immutable v 1.2.3.\r\n\r\nOtherwise, I'm planning to publish a blog post on the PowerShell Team blog in the next week that goes over a number of other ways to make this work. All the other techniques are more complicated though.\r\n\r\nPS 6 is planned to go out of support in about 3 months (by 2020-06-01), so it might be worth evaluating whether implementing a more complex solution is worth it for that kind of support duration.\r\n\r\nWorth taking a look at https://github.com/PowerShell/PowerShell/issues/12920.\r\n\r\nI'll mark this as a duplicate of https://github.com/PowerShell/PowerShell/issues/2083.",
      "created_at": "2020-06-11T04:18:36Z",
      "updated_at": "2020-06-11T04:19:22Z"
    },
    {
      "author": "kumbham",
      "author_association": "NONE",
      "body": "@rjmholt \r\n\r\n>  The best solution is probably to pin your version to the lowest version used by any of the PowerShell versions you want to support.\r\n\r\nI tried testing `System.Collection.Immutable` 1.5.0 on PS 6 and PS 7 versions, Powershell is able to import the assembly in both the versions whereas if I upgrade the version to 1.7.0, the Import breaks on Powershell 6. Based on this can we safely assume that Powershell modules with `System.Collection.Immutable` dependent assembly works if `System.Collections.Immutable` version <= Powershell's `System.Collection.Immutable` version?\r\n\r\nCould you please share your doc link here when you publish it? Thanks a lot for the quick response, very much appreciated :) ",
      "created_at": "2020-06-11T19:38:19Z",
      "updated_at": "2020-06-11T19:38:35Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Another thing to try is building your module against the Microsoft.PowerShell.Sdk package -- the only problem is that that will mean you'll have to target netcoreapp3.1",
      "created_at": "2020-06-12T16:50:49Z",
      "updated_at": "2020-06-12T16:50:49Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Blog post has been published: https://devblogs.microsoft.com/powershell/resolving-powershell-module-assembly-dependency-conflicts/\n\n<blockquote><img src=\"https://camo.githubusercontent.com/f17d35e8f68b08827695727f7eb8d0a599ec43cb/68747470733a2f2f646576626c6f67732e6d6963726f736f66742e636f6d2f706f7765727368656c6c2f77702d636f6e74656e742f75706c6f6164732f73697465732f33302f323032302f30362f6d6f64756c65636f6e666c6963742e706e67\" width=\"48\" align=\"right\"><div><img src=\"https://devblogs.microsoft.com/powershell/wp-content/uploads/sites/30/2019/02/Powershell_2561.png\" height=\"14\"> PowerShell</div><div><strong><a href=\"https://devblogs.microsoft.com/powershell/resolving-powershell-module-assembly-dependency-conflicts/\">Resolving PowerShell Module Assembly Dependency Conflicts | PowerShell</a></strong></div><div>When writing a PowerShell module, especially a binary module (i.e. one written in a language like C# and loaded into PowerShell as an assembly/DLL), it\u2019s natural to take dependencies on other packages or libraries to provide functionality. Taking dependencies on other libraries is usually desirable for code reuse.</div></blockquote>",
      "created_at": "2020-06-17T00:39:47Z",
      "updated_at": "2020-06-17T00:39:50Z"
    }
  ],
  "created_at": "2020-06-10T23:52:04Z",
  "number": 12941,
  "state": "closed",
  "title": "Import-Module : Could not load file or assembly System.Collections.Immutable",
  "updated_at": "2020-06-17T00:39:50Z"
}