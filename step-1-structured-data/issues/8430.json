{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8430",
  "author": "mklement0",
  "body": "## PR Summary\r\n\r\nImplements #8429.\r\n\r\nDefines short alias names for all keys supported in calculated-property definitions, so that these aliases can be used safely, without fear of keys introduced in the future making previously unambiguous name prefixes ambiguous.\r\n\r\nNote: \r\n\r\n* A single internal class, `CalculatedPropertyDefinitionKeys`, now defines all supported keys (entries) across all cmdlets, and all future keys should be added there as well.\r\n\r\n* Most alias names are single-character names:\r\n  * `l` for `label`\r\n  * `n` for `name`\r\n  * `e` for `expression`\r\n  * `f` for `formatString`\r\n  * `d` for `depth`\r\n  * `a` for `alignment`\r\n  * `w` for `width`\r\n\r\n* The only exceptions:\r\n   * `asc` for `ascending`\r\n   * `desc` for `descending`\r\n\r\nShould the latter two just be `a` and `d` too? It's a possibility, given that the conflicting names, `d(epth)` and `a(lignment)` only apply to _other_ cmdlets, or is cross-cmdlet consistency more important?\r\n\r\n* Tests: Currently, no two keys for a given cmdlet start with the same letter, so how would we write a test that ensures, for instance, that adding an `example` key still unambiguously maps `e` to `expression`, whereas using the ambiguous `ex` should throw an exception?\r\n\r\n* As before, there is no formal check for duplicate names / aliases; while maintaining all constants in class `CalculatedPropertyDefinitionKeys` helps, I wonder if we need a formal check to prevent duplicates - ideally as part of testing.\r\n\r\n* Includes the changes for #8426 and #8427.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed - Issue link:\r\n- **Testing - New and feature**\r\n    - [ ] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [x] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2019-01-16T23:22:07Z",
  "comments": [
    {
      "author": "stale[bot]",
      "author_association": "NONE",
      "body": "This PR has been automatically marked as stale because it has not had activity in the last 30 days. It will be closed if no further activity occurs within 10 days.\nThank you for your contributions.\nCommunity members are welcome to grab these works.\n",
      "created_at": "2019-01-10T06:39:00Z",
      "updated_at": "2019-01-10T06:39:00Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@PowerShell/powershell-committee had a long discussion on this: a couple of us are ambivalent, and a couple feel like \"canonicalizing\" these aliases might encourage their usage in scripts (prompting the need to write a PSSA rule that no one wants to write).\r\n\r\nFurthermore, no one expects any new keys to be added to this syntax in the future. (Though, personally, I might feel differently if you were planning on adding a host of new keys soon.)\r\n\r\nAnother possible option would be to add support for tab completion inside of the expression syntax, and everyone agrees that this would solve the meta problem of wanting to be relatively pithy on the command line, even if single-letter collisions occur after the addition of new keys.",
      "created_at": "2019-01-16T23:22:03Z",
      "updated_at": "2019-01-16T23:22:03Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the feedback, @joeyaiello.\r\n\r\n> a couple feel like \"canonicalizing\" these aliases might encourage their usage in scripts\r\n\r\nWell, **\"canonicalizing\" these aliases was the primary motivation for this PR**: the intent was to _future-proof_ the existing practice of using just `n` / `l` and `e` in scripts, based on a preponderance of such usage online.\r\n\r\nDoing so **follows the existing practice of providing parameter aliases** such as `-h` for `-Hidden` in `Get-ChildItem` and the recently introduced (disclaimer: suggested by yours truly) `-lp` for `-LiteralPath`; similarly, the CLI offers [`-c` as an alias for `-command`](https://github.com/PowerShell/PowerShell/blob/52546f57f2da1fa12d348746a107328d8edd671c/src/Microsoft.PowerShell.ConsoleHost/host/msh/CommandLineParameterParser.cs#L776), ... \r\n\r\nAs an aside: Regrettably, these aliases are _undocumented_.\r\n\r\nOn a related note: it's worth entertaining a simpler syntax for calculated properties - see #8107\r\n\r\n---\r\n\r\nLeaving the alias aspect aside, **this PR offered a worthwhile consolidation of all calculated-property keys in a single place, across all cmdlets**.\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2019-01-17T03:42:40Z",
      "updated_at": "2019-01-17T03:42:40Z"
    }
  ],
  "created_at": "2018-12-08T21:09:20Z",
  "number": 8430,
  "state": "closed",
  "title": "[Feature] Define short alias names for all keys supported in calculated-property definitions",
  "updated_at": "2019-01-17T03:42:40Z"
}