{
  "_url": "https://github.com/PowerShell/PowerShell/issues/18022",
  "author": "iRon7",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nPaste the following 3 lines into PowerShell (same for Windows PowerShell and VS Code):\r\n```PowerShell\r\n1..3 |\r\n# I do 't expect an error here\r\nForEach-Object { $_ }\r\n```\r\n\r\n### Expected behavior\r\n\r\nNo errors, the commented line (`# ...`) to be neglected.\r\nSimilar to putting the comment directly after the pipe character:\r\n\r\n```PowerShell\r\n1..3 | # I don 't expect an error here\r\nForEach-Object { $_ }\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\nError\r\n\r\n\r\n### Error details\r\n\r\n```console\r\n>> # I don 't expect an error here\r\nParserError:\r\nLine |\r\n   1 |  1..3 |\r\n     |        ~\r\n     | An empty pipe element is not allowed.\r\n```\r\n\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.6\r\nPSEdition                      Core\r\nGitCommitId                    7.2.6\r\nOS                             Microsoft Windows 10.0.22000\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n<img width=\"252\" alt=\"2022-09-03_19h55_01\" src=\"https://user-images.githubusercontent.com/8080834/188282675-bb297e19-5785-4e58-bfdf-ab512a097dd6.png\">\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "I think it's broken line continuation after a comment. I can reproduce this simpler case for any trailing binary operator:\r\n\r\n```pwsh\r\n> 1 +\r\n>> 2\r\n3\r\n> 1 +\r\n>> # comment\r\nParserError:\r\nLine |\r\n   1 |  1 +\r\n     |     ~\r\n     | You must provide a value expression following the '+' operator.\r\n```\r\n\r\nIn all cases I am doing shift+enter to continue the line, but after the comment it treats it like I just typed enter.\r\n\r\nInterestingly, it works without problem in a script:\r\n```pwsh\r\n> @\"\r\n>> 1 +\r\n>> 2\r\n>> \"@ | Invoke-Expression\r\n3\r\n> @\"\r\n>> 1 +\r\n>> # comment\r\n>> 2\r\n>> \"@ | Invoke-Expression\r\n3\r\n```\r\n\r\nSo my guess is that one should look like at code handling shift+enter or pasted code specifically, not the interpreter itself.",
      "created_at": "2022-09-03T18:38:17Z",
      "updated_at": "2022-09-03T18:38:17Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "It seems to me that a similar issue has already been. Discussed workaround like:\r\n```powershell\r\nPS > & {\r\n1..3 |\r\n# I do 't expect an error here\r\nForEach-Object { $_ }\r\n}\r\n```",
      "created_at": "2022-09-03T18:55:35Z",
      "updated_at": "2022-09-03T18:55:35Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "@237dmitry Doesn't that create a separate scope? So that `$x = 3; & { $x = 5 }; $x | Should -Be 5` will fail? ",
      "created_at": "2022-09-03T19:01:12Z",
      "updated_at": "2022-09-03T19:01:12Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> Doesn't that create a separate scope?\r\n\r\nYes, this is separate scope. IMHO, the most comfortable construction to script in the console in order to not killing variables.",
      "created_at": "2022-09-03T19:09:09Z",
      "updated_at": "2022-09-03T19:09:09Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "This is dependant on how you paste to the console & where you have it running\r\n\r\nIn Windows Terminal\r\nNeither `CTRL + V`, `CTRL + SHIFT + V`, `SHIFT + INSERT` or right click paste worked for me\r\n\r\nNot in Windows Terminal, i.e. in a pwsh spawned console\r\nright click paste seems to fail whilst for me where as CTRL + V worked fine\r\n\r\nIn VSCode\r\nright click paste seems to fail whilst for me where as CTRL + V worked fine\r\n\r\nTested using 7.3.0-preview.7 & 7.2.6",
      "created_at": "2022-09-03T21:42:47Z",
      "updated_at": "2022-09-03T21:44:01Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "I think this is how this should work as PSReadline gave us right click paste as well as the existing CTRL + V paste method, and they have always worked differently \r\n\r\nFrom an WG Interactive Console & PSReadline perspective I think this is as it should be & don't think this needs review by the Engine WG but will let them review\r\n",
      "created_at": "2022-09-03T22:02:16Z",
      "updated_at": "2022-09-03T22:02:16Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "Couldn't reproduce this issue on Linux (tilix terminal).\r\n\r\nPS. By pasting full block. If type each line the issue is reproduced.",
      "created_at": "2022-09-04T06:29:50Z",
      "updated_at": "2022-09-04T07:13:04Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "Can reproduce this on Linux (Chromebook terminal ssh'ed into Ubuntu) ",
      "created_at": "2022-09-04T06:35:08Z",
      "updated_at": "2022-09-04T06:35:08Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> > Doesn't that create a separate scope?\r\n> \r\n> Yes, this is separate scope. IMHO, the most comfortable construction to script in the console in order to not killing variables.\r\n\r\nOr use `.` instead of `&`",
      "created_at": "2022-09-04T09:34:27Z",
      "updated_at": "2022-09-04T09:34:27Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Indeed this relates to the specific pasting method being employed: simulated typing (which breaks) vs. pasting the multi-line string as a whole, and the issue is being tracked in:\r\n\r\n*  https://github.com/PowerShell/PSReadLine/issues/579\r\n   * Pasting works as intended with <kbd>Ctrl-V</kbd>, but not with right-clicking.\r\n* The solution for Unix terminals will be to use _paste bracketing_:\r\n  * https://github.com/PowerShell/PSReadLine/issues/1471\r\n\r\nTo recap briefly:\r\n\r\n* On Windows, you can avoid the issue by using <kbd>Ctrl-V</kbd> for pasting; a fix being discussed for right-clicking - should it ever be implemented - would have to _guess_ what constitutes a single paste action based on which simulated keystrokes occur in rapid succession.\r\n* On Unix-like platforms: I think we'll have to wait for PSReadLine to support paste bracketing (at least in my macOS terminals I currently see the problem).\r\n\r\n\r\n",
      "created_at": "2022-09-07T14:33:51Z",
      "updated_at": "2022-09-07T14:33:51Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "As an aside: It is a separate issue, but it is curious that parsing stops _after the comment line_ and considers the statement complete, given that it would make more sense to keep reading, based on the pending `|`.\r\n\r\nA more obvious example would be to try to paste the following (PS Core now allows placing the `|` on the _next_ line):\r\n\r\n```powershell\r\n# Breaks when pasted with right-clicking on Windows and in Unix terminals\r\n1..3\r\n  | Write-Output\r\n```",
      "created_at": "2022-09-07T14:37:25Z",
      "updated_at": "2022-09-07T14:37:48Z"
    }
  ],
  "created_at": "2022-09-03T17:56:57Z",
  "number": 18022,
  "state": "open",
  "title": "Can't paste a comment (`#`) after a pipe (`|`) and a newline ",
  "updated_at": "2022-10-03T20:47:48Z"
}