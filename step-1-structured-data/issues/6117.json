{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6117",
  "author": "alx9r",
  "body": "This arose from #5942.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n#### UsingTest.psm1\r\n\r\n```PowerShell\r\n@(\r\n    'fileA.ps1'\r\n    'fileB.ps1'\r\n) |\r\n    % { . \"$(Split-Path -Path $MyInvocation.MyCommand.Path)\\$_\" }\r\n```\r\n\r\n#### fileA.ps1\r\n\r\n```PowerShell\r\nusing namespace UsingTest.A\r\n\r\nAdd-Type @'\r\nnamespace UsingTest { namespace A {\r\n    public enum MyEnum {\r\n        One = 1,\r\n        Two\r\n    }\r\n}\r\n}\r\n'@\r\n\r\nfunction GetA1 { return [int][MyEnum]::One }\r\n```\r\n\r\n#### fileB.ps1\r\n\r\n```PowerShell\r\nusing namespace UsingTest.B\r\n\r\nAdd-Type @'\r\nnamespace UsingTest { namespace B {\r\n    public enum MyEnum {\r\n        One = 101,\r\n        Two\r\n    }\r\n}\r\n}\r\n'@\r\n\r\nfunction GetB1 { [int][MyEnum]::One }\r\n```\r\n\r\n#### Invoke these Commands\r\n\r\n```PowerShell\r\nImport-Module UsingTest; GetA1; GetB1\r\n```\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\n1\r\n101\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\n101\r\n1\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value                                            \r\n----                           -----                                            \r\nPSVersion                      6.0.0                                            \r\nPSEdition                      Core                                             \r\nGitCommitId                    v6.0.0                                           \r\nOS                             Microsoft Windows 6.3.9600                       \r\nPlatform                       Win32NT                                          \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                          \r\nPSRemotingProtocolVersion      2.3                                              \r\nSerializationVersion           1.1.0.1                                          \r\nWSManStackVersion              3.0                                              \r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Hi @alx9r - dot sourcing a file results in that file executing in the current scope so any definitions in the dot sourced file will overwrite existing definitions in the current scope. It's like concatenating the two files then executing the result. Later definitions override earlier definitions.",
      "created_at": "2018-03-09T00:43:48Z",
      "updated_at": "2018-03-09T00:43:48Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": ">It's like concatenating the two files then executing the result. Later definitions override earlier definitions.\r\n\r\n@BrucePay I thought that at first, too.  That explanation, however, is inconsistent with `GetB1` returning `1` in the repro.  If it were simply a matter of later definitions overriding earlier definitions, then `GetB1` would return `101`.",
      "created_at": "2018-03-10T01:46:56Z",
      "updated_at": "2018-03-10T01:46:56Z"
    }
  ],
  "created_at": "2018-02-06T19:53:27Z",
  "number": 6117,
  "state": "open",
  "title": "`using namespace` in two dot-sourced .ps1 files causes the namespace named in the other file to be used",
  "updated_at": "2018-03-10T01:46:56Z"
}