{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3425",
  "author": "iSazonov",
  "body": "From UserVoice https://windowsserver.uservoice.com/forums/301869-powershell/suggestions/18580849-bug-sort-is-incorrect-for-strings-containing-the \r\n\r\nSteps to reproduce\r\n------------------\r\n\"somefile1\",\"somefile2\",\"s-abc\",\"s-little\",\"s-foo\",\"s-poo\",\"s-wtf\" | sort \r\n\r\nExpected behavior\r\n-----------------\r\ns-abc \r\ns-foo \r\ns-little \r\ns-poo \r\ns-wtf\r\nsomefile1 \r\nsomefile2 \r\n\r\nActual behavior\r\n---------------\r\ns-abc \r\ns-foo \r\ns-little \r\nsomefile1 \r\nsomefile2 \r\ns-poo \r\ns-wtf\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSVersion                      6.0.0-alpha\r\nPSEdition                      Core\r\nBuildVersion                   3.0.0.0\r\nSerializationVersion           1.1.0.1\r\nPSRemotingProtocolVersion      2.3\r\nCLRVersion\r\nWSManStackVersion              3.0\r\nGitCommitId                    v6.0.0-alpha.17\r\n```\r\n",
  "closed_at": "2021-08-25T04:05:11Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It looks as .Net issue (tested on Windows PowerShell and PowerShell Core):\r\n```powershell\r\nPS C:\\WINDOWS\\system32> using namespace System.Collections.Generic\r\nPS C:\\WINDOWS\\system32> $a = New-Object List[string]\r\nPS C:\\WINDOWS\\system32> \"somefile1\",\"somefile2\",\"s-abc\",\"s-little\",\"s-foo\",\"s-poo\",\"s-wtf\" | % {$a.Add($_)}\r\nPS C:\\WINDOWS\\system32> $a\r\nsomefile1\r\nsomefile2\r\ns-abc\r\ns-little\r\ns-foo\r\ns-poo\r\ns-wtf\r\nPS C:\\WINDOWS\\system32> $a.Sort()\r\nPS C:\\WINDOWS\\system32> $a\r\ns-abc\r\ns-foo\r\ns-little\r\nsomefile1\r\nsomefile2\r\ns-poo\r\ns-wtf\r\n```",
      "created_at": "2017-03-25T18:32:19Z",
      "updated_at": "2017-03-25T18:32:19Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "Then it is Windows issue, because for displaying purposes Windows sort filenames in the same order.",
      "created_at": "2017-03-25T18:42:22Z",
      "updated_at": "2017-03-25T18:42:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "\r\n```powershell\r\nPS C:\\WINDOWS\\system32> [string]::Compare(\"som\",\"s-l\")\r\n1\r\nPS C:\\WINDOWS\\system32> [string]::Compare(\"som\",\"s-m\")\r\n1\r\nPS C:\\WINDOWS\\system32> [string]::Compare(\"som\",\"s-p\")\r\n-1\r\n```",
      "created_at": "2017-03-25T19:58:50Z",
      "updated_at": "2017-03-25T19:58:50Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "From MSDN [String.Compare Method](https://msdn.microsoft.com/en-us/library/zkcaxw5y(v=vs.110).aspx):\r\n>Character sets include ignorable characters. The Compare(String,\u2002String,\u2002Boolean) method does not consider such characters when it performs a culture-sensitive comparison. For example, if the following code is run on the .NET Framework 4 or later, a culture-sensitive, case-insensitive comparison of \"animal\" with \"Ani-mal\" (using a soft hyphen, or U+00AD) indicates that the two strings are equivalent.\r\n\r\n[Unicode Default_Ignorable_Code_Point](https://github.com/mathiasbynens/unicode-data/blob/master/data/6.1.0-derivedcoreproperties.txt#L8348)\r\n\r\n[Best Practices for Using Strings in the .NET Framework](https://msdn.microsoft.com/en-us/library/dd465121.aspx)\r\n\r\nBased on this we should re-label the problem as internal. ",
      "created_at": "2017-05-01T17:49:44Z",
      "updated_at": "2017-05-01T17:49:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@joeyaiello @stephentoub The Issue is internal. It seems we need PowerShell-Committee review.",
      "created_at": "2017-06-04T08:43:39Z",
      "updated_at": "2017-06-04T08:43:39Z"
    },
    {
      "author": "JohnLBevan",
      "author_association": "NONE",
      "body": "Agree that this is not a bug, but a design choice.\r\nHowever it is confusing behaviour to many who don't expect this, and is not the desirable behaviour in a number of use cases.\r\n\r\nAmending this default behaviour would be a breaking change.\r\nHowever, adding a parameter to allow users to define the sort behaviour, or adding some field to the `property` parameter's hash table would resolve this limitation without negatively affecting existing behaviour, and would help people realise that the current behaviour is the designed behaviour.\r\n\r\n**Proposal**\r\n\r\nThe `Property` parameter accepts a collection of hash tables, where the hash table accepts keys `Expression`, `Ascending` and `Descending`.\r\nAdding another key, `SortOrderComparer`, which takes a property of type `IComparer` would allow custom sort behaviour to be specified for each property.  Thus to get the behaviour most people would expect, they could do something like this:\r\n\r\n```\r\n[string[]]$list = @(\"somefile1\",\"somefile2\",\"s-abc\",\"s-little\",\"s-foo\",\"s-poo\",\"s-wtf\") \r\n$list | sort -Property @{Expression={$_}; SortOrderComparer=[System.StringComparer]::Ordinal}\r\n```\r\n\r\n\r\n\r\n",
      "created_at": "2017-06-26T09:39:04Z",
      "updated_at": "2017-06-26T09:42:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I agree that we could resolve the Issue by means of adding a new parameter to set a comparer options. It seems we should be more general then StringComparer.",
      "created_at": "2017-06-26T17:47:30Z",
      "updated_at": "2017-06-26T17:47:30Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Great idea, @JohnLBevan.\r\n\r\nI suggest also supporting [`Comparison<T>` delegates](https://docs.microsoft.com/en-us/dotnet/api/system.comparison-1)  as the `SortOrderComparer` value (polymorphically), so you can pass script blocks directly (e.g., `{ param([string]$x, [string]$y) <# return -1, 0, or 1 #> }` and perhaps shortening `SortOrderComparer` to `Comparer`.\r\n\r\nWith a `Comparer` key present, `Expression` should be optional and default to the whole input object.\r\n\r\n",
      "created_at": "2018-07-15T17:09:58Z",
      "updated_at": "2018-07-15T17:09:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "For reference https://github.com/PowerShell/PowerShell-RFC/pull/167",
      "created_at": "2019-07-12T08:48:53Z",
      "updated_at": "2019-07-12T08:48:53Z"
    },
    {
      "author": "chamons",
      "author_association": "NONE",
      "body": "For anyone hitting this looking for a work around, this appears to work for at least our use case:\r\n\r\n```\r\n# Sorting file names that include '-' and '.' is broken in powershell - https://github.com/PowerShell/PowerShell/issues/3425\r\n# So map each to characters invalid for file system use '?' and '|', sort, and then map back\r\nfunction Sort-FileSafe ($names) {\r\n    return $names | % {$_.replace(\"-\",\"?\")} | % {$_.replace(\".\",\"|\")} | Sort-Object |  % {$_.replace(\"?\",\"-\")} | % {$_.replace(\"|\",\".\")}\r\n}\r\n```\r\n\r\nWe had two different Windows machine consistently generating different ordered lists of file names with those characters.",
      "created_at": "2021-04-22T15:49:19Z",
      "updated_at": "2021-04-22T15:49:19Z"
    },
    {
      "author": "chamons",
      "author_association": "NONE",
      "body": "Was this fixed, or considered invalid? I don't see any reasoning here, or on the RFC.",
      "created_at": "2021-08-25T13:14:20Z",
      "updated_at": "2021-08-25T13:14:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We see near-zero activity and complete indifference from MSFT team.\r\nSo I have no desire to keep track of dead issue.",
      "created_at": "2021-08-26T04:15:56Z",
      "updated_at": "2021-08-26T04:15:56Z"
    }
  ],
  "created_at": "2017-03-25T18:30:11Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets-Utility"
  ],
  "number": 3425,
  "state": "closed",
  "title": "Sort is incorrect for strings containing the '-' character",
  "updated_at": "2021-08-26T04:15:56Z"
}