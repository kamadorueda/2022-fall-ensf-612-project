{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7044",
  "author": "jszabo98",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\ntest-path -pathtype seems to fail in strange ways over the pipe.  \"$_  | test-path -pathtype container\" works ok.  I actually first noticed this in writing a script with a process block.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nmkdir foo\\foo2\\foo3\r\nls -r foo | foreach { test-path $_ -pathtype container }\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nTrue\r\nTrue\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nTrue\r\nFalse\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.2\r\nPSEdition                      Core\r\nGitCommitId                    v6.1.0-preview.2\r\nOS                             Microsoft Windows 10.0.15063\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2018-08-28T13:47:37Z",
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "The `-Path` parameter on `Test-Path` takes a string as it's argument and the `.ToString()` on a `DirectoryInfo` is the _base_ name of the directory. This means that you are testing the paths \"foo2\" and \"foo3\". \"foo2\" exists in the current directory and so `Test-Path` returns true but \"foo3\" doesn't exist in the current directory and so returns false. If you use the `FullName` property instead:\r\n```powershell\r\nPSCore >  ls -rec foo | foreach { test-path $_.fullname -PathType Container }\r\nTrue\r\nTrue\r\n```\r\nyou will get the result you expect. Alternatively you can just pipe directly into `Test-Path` and it will work:\r\n```powershell\r\nPSCore (1:135) >  ls -rec foo | test-path -PathType Container\r\nTrue\r\nTrue\r\n```\r\nThis is because the parameter binder binds to `PSPath` on the input object which is the full path to the  target.",
      "created_at": "2018-06-13T19:37:54Z",
      "updated_at": "2018-06-13T19:37:54Z"
    },
    {
      "author": "jszabo98",
      "author_association": "NONE",
      "body": "Thanks.  I should have caught what string $_ was becoming.  Although I think it tends to throw people off that the get-childitem directoryinfo object only becomes the basename when converted to a string.  (As a result of \"get-childitem . | where name -eq somedir\".  \"get-item somedir\" gets the full path in the string version of the object.  The type is the same in both.)  A similar thing happens with fileinfo objects.",
      "created_at": "2018-06-27T21:39:57Z",
      "updated_at": "2018-07-07T14:53:31Z"
    }
  ],
  "created_at": "2018-06-11T17:32:09Z",
  "number": 7044,
  "state": "closed",
  "title": "test-path -pathtype seems to fail in strange ways over the pipe",
  "updated_at": "2018-08-28T13:47:37Z"
}