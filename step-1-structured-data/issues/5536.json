{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5536",
  "author": "ZSkycat",
  "body": "Steps to reproduce\r\n------------------\r\n\r\n```powershell\r\n# ** careful \"\\\" and \"/\" **\r\n# initialization\r\nNew-Item 'registry::HKEY_CURRENT_USER/test'\r\nNew-ItemProperty 'registry::HKEY_CURRENT_USER\\test' -Name test1 -Value test1\r\n\r\n# read item.\r\nGet-Item 'registry::HKEY_CURRENT_USER/test'\r\nSet-ItemProperty 'registry::HKEY_CURRENT_USER/test' -Name test2 -Value abcde\r\n\r\n# read and create item\r\nCopy-Item 'registry::HKEY_CURRENT_USER/test' 'registry::HKEY_CURRENT_USER/test/t1'\r\nCopy-Item 'registry::HKEY_CURRENT_USER\\test' 'registry::HKEY_CURRENT_USER/test/t1'\r\n\r\n# clear\r\nRemove-Item 'registry::HKEY_CURRENT_USER\\test' -Recurse -Force\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nno errors\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nGet-Item : Cannot find path 'HKEY_CURRENT_USER/test' because it does not exist.\r\nAt line:1 char:1\r\n+ Get-Item 'registry::HKEY_CURRENT_USER/test'\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : ObjectNotFound: (HKEY_CURRENT_USER/test:String) [Get-Item], ItemNotFoundException\r\n+ FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.GetItemCommand\r\n\r\nSet-ItemProperty : Cannot find path 'HKEY_CURRENT_USER/test' because it does not exist.\r\nAt line:1 char:1\r\n+ Set-ItemProperty 'registry::HKEY_CURRENT_USER/test' -Name test2 -Valu ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : ObjectNotFound: (HKEY_CURRENT_USER/test:String) [Set-ItemProperty], ItemNotFoundException\r\n+ FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.SetItemPropertyCommand\r\n\r\nCopy-Item : Cannot find path 'HKEY_CURRENT_USER/test' because it does not exist.\r\nAt line:1 char:1\r\n+ Copy-Item 'registry::HKEY_CURRENT_USER/test' 'registry::HKEY_CURRENT_ ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : ObjectNotFound: (HKEY_CURRENT_USER/test:String) [Copy-Item], ItemNotFoundException\r\n+ FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.CopyItemCommand\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-rc\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-rc\r\nOS                             Microsoft Windows 10.0.16299\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n## Summary\r\nafter trying, I found the law.\r\n1. can handle \"/\" correctly when creating item.\r\n2. can not handle \"/\" correctly when reading item.\r\n\r\nrelated cmdlets\r\n```powershell\r\nNew-Item\r\nNew-ItemPropert\r\nGet-ChildItem\r\nGet-Item\r\nGet-ItemProperty\r\nGet-ItemPropertyValue\r\nSet-Item\r\nSet-ItemProperty\r\nClear-Item\r\nClear-ItemProperty\r\nRemove-Item\r\nRemove-ItemProperty\r\nRename-Itemre\r\nRename-ItemProperty\r\nCopy-Item\r\nCopy-ItemProperty\r\nMove-Item\r\nMove-ItemProperty\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "ZSkycat",
      "author_association": "NONE",
      "body": "This bug also exists in Windows PowerShell (no core)",
      "created_at": "2017-11-24T03:56:05Z",
      "updated_at": "2017-11-24T03:56:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "'/' is allowed in registry key names. Can you to try escape '/'?",
      "created_at": "2017-11-24T04:47:22Z",
      "updated_at": "2017-11-24T04:47:22Z"
    },
    {
      "author": "ZSkycat",
      "author_association": "NONE",
      "body": "@iSazonov \r\nI am using `\\` to avoid this bug.\r\n\r\nbut I like automatic processing slash in powershell. (like file path)",
      "created_at": "2017-11-24T06:32:06Z",
      "updated_at": "2017-11-24T06:32:25Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "To be clear: The real bug is that `/` is supported at all as a path separator with the registry provider (even though the desire to use `/` and `\\` interchangeably, as with the filesystem provider, is understandable).\r\n\r\nAs @iSazonov points out, `/` is a valid character in a registry key (or value) name; therefore, it cannot function as the path separator, which in the registry provider's case should _only_ be `\\`.\r\n\r\n(Unfortunately, the objects returned by `Get-PSProvider` have no property that indicates a provider's path separator(s).)\r\n\r\nUsing one of your examples:\r\n\r\nThat `New-Item 'registry::HKEY_CURRENT_USER/test'` succeeds and functions the same as `New-Item 'registry::HKEY_CURRENT_USER\\test'` is a manifestation of the _bug_.\r\n\r\n",
      "created_at": "2017-11-25T04:14:34Z",
      "updated_at": "2017-11-25T04:14:34Z"
    },
    {
      "author": "ZSkycat",
      "author_association": "NONE",
      "body": "@mklement0 I understand.\r\n\r\nitem name allow use '/' is too bad\r\n\r\n\ud83d\ude02\ud83d\ude02\ud83d\ude02",
      "created_at": "2017-11-25T05:30:58Z",
      "updated_at": "2017-11-25T05:36:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">(Unfortunately, the objects returned by Get-PSProvider have no property that indicates a provider's path separator(s).)\r\n\r\nThat's why I'm more inclined to think that we need to optimize providers and use types instead of strings.",
      "created_at": "2017-11-25T19:43:40Z",
      "updated_at": "2017-11-25T19:43:40Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: What do you mean by using types instead of strings?",
      "created_at": "2017-11-25T19:56:33Z",
      "updated_at": "2017-11-25T19:56:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Providers work with strings and do parsing its on every operation. This results in poor performance and problems like this.",
      "created_at": "2017-11-25T20:00:13Z",
      "updated_at": "2017-11-25T20:00:13Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Tracing this, it looks like there has already been some consideration of this in the `NavigationProvider` base class [here](https://github.com/PowerShell/PowerShell/blob/c1c5344a8897262433141ecbc13bb06ac2c4bbef/src/System.Management.Automation/namespaces/NavigationProviderBase.cs#L980).\r\n\r\nThe comment seems to indicate that unless both back and forwards slashes are used, we want to treat forward slashes as back slashes. That seems a bit strange to me, but looking for input.",
      "created_at": "2018-03-07T17:34:33Z",
      "updated_at": "2018-03-07T17:34:33Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Running `New-Item 'registry::HKEY_CURRENT_USER\\test\\/'`, it turns out that the path that gets to the `NavigationProvider` is still `'registry::HKEY_CURRENT_USER\\\\test'`, since the `SessionStateContainer` [already normalizes the path](https://github.com/PowerShell/PowerShell/blob/c1c5344a8897262433141ecbc13bb06ac2c4bbef/src/System.Management.Automation/engine/SessionStateContainer.cs#L3761).",
      "created_at": "2018-03-07T17:56:39Z",
      "updated_at": "2018-03-07T17:56:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Related #6833 - seems it is really problem.",
      "created_at": "2018-05-08T10:57:05Z",
      "updated_at": "2018-05-08T10:57:05Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "It seems like the fix for this would be to make providers responsible for path handling and manage their own directory char separators.\r\n\r\nSo that way a registry provider can recognise `/` as an ordinary name char and a filesystem provider can recognise it as a path separator. It might also provide some ability to differentiate UNIX filesystems and Windows ones, although that's less clear.\r\n\r\nWhile there's some consideration about ease of use for users, I think that fidelity to the native environment takes priority there.\r\n\r\nMy concern is that this could constitute a spiritual breaking change in PowerShell, whereby it's no longer \"PowerShell handles cross-platform paths\" but \"providers are responsible for their paths and the filesystem provider treats `/` and `\\` equally\". There might not be any significant change in user experience, so maybe it's not worth worrying about. But since `SessionStateContainer` does path normalisation before hitting any providers, I thought it might be worth discussing.",
      "created_at": "2018-05-08T16:38:32Z",
      "updated_at": "2018-05-08T16:38:32Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@rjmholt From MSDN on the [structure of the registry](https://msdn.microsoft.com/en-us/library/ms724946(VS.85).aspx)\r\n\r\n> Each key has a name consisting of one or more printable characters. Key names are not case sensitive. Key names cannot include the backslash character (\\), but any other printable character can be used. Value names and data can include the backslash character\r\n\r\nSo the natural path separator is  `\\` (and it's what `reg.exe` uses exclusively) like everywhere else in Windows. However, for the convenience of the people coming to PowerShell from a *nix background (and the idea that we'd port to *nix someday), we chose to also allow `/` in paths and then normalize as appropriate.",
      "created_at": "2018-05-08T16:41:17Z",
      "updated_at": "2018-05-08T16:41:17Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Right, with the tricky bit being \"as appropriate\".\r\n\r\nThe definite bug above is that reading a registry key behaves inconsistently with creating a registry key with respect to path normalisation.\r\n\r\nBut the question remains: do we always do the normalisation and possibly hide some native corner cases (and ideally provide a well-documented way to escape paths), or do we only normalise paths when it doesn't collide with the native implementation?\r\n\r\nUNIX filenames allow (ASCII) `\\` and the Windows registry allows `/` in keys, so a single path-normalisation policy won't fit everywhere. (A brief look at `wsman:` and `cert:` suggests they don't have this problem, but worth checking).",
      "created_at": "2018-05-08T17:16:47Z",
      "updated_at": "2018-05-08T17:16:47Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Tagging this for committee review so that it can be discussed alongside https://github.com/PowerShell/PowerShell/issues/6833.",
      "created_at": "2018-05-11T16:26:24Z",
      "updated_at": "2018-05-11T16:26:24Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this and similar to #6833, path normalization should happen within the provider.  If the registry provider is inappropriately normalizing the path, that is a bug that should be fixed.",
      "created_at": "2018-05-23T22:12:56Z",
      "updated_at": "2018-05-23T22:12:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "In Registry provider we need \r\n- to define an override for `protected virtual string MakePath(string parent, string child)`\r\n- make and call there customized `protected string MakePath(string parent, string child, bool childIsLeaf)` (from NavigationProviderBase.cs)\r\n- make and call there customized `private string NormalizePath(string path)` (from NavigationProviderBase.cs)\r\n\r\nI am not sure that it is all that we should make to fix the bug.",
      "created_at": "2019-10-14T14:00:35Z",
      "updated_at": "2019-10-14T14:00:35Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Taking in account #10215 (PowerShell crash) please weigh the issue.",
      "created_at": "2019-10-14T14:03:07Z",
      "updated_at": "2019-10-14T14:03:07Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov since the recursion issue repros with 5.1, this is not a regression.  It's also an unlikely user scenario and I haven't seen many reports of this.  I would like to have this fixed, but I don't think it changes the priority.",
      "created_at": "2019-10-14T16:33:03Z",
      "updated_at": "2019-10-14T16:33:03Z"
    },
    {
      "author": "vanillaSprinkles",
      "author_association": "NONE",
      "body": "> \r\n> \r\n> @PowerShell/powershell-committee reviewed this and similar to #6833, path normalization should happen within the provider. If the registry provider is inappropriately normalizing the path, that is a bug that should be fixed.\r\n\r\nIt absolutely is inappropriately normalizing the path and causes a few other problems, I realize now I should've posted to this thread a fix, but I believe `result = path.Replace(StringLiterals.AlternatePathSeparator, StringLiterals.DefaultPathSeparator);` is the culprit and would likely remove quite a few issues (issue above references the correct line number).\r\n\r\nThe registry allows slashes `/` in key names, plain and simple. Take a look at the `EdgeExtensions` within and look at those beautiful key-names:\r\n`HKEY_CURRENT_USER\\Software\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\CurrentVersion\\AppContainer\\Storage\\microsoft.microsoftedge_8wekyb3d8bbwe\\EdgeExtensions\\Configuration\\EdgeExtensions\\ConfigurationStore\\Extensions`\r\n\r\n\r\n\r\n",
      "created_at": "2021-05-16T08:47:17Z",
      "updated_at": "2021-05-16T08:47:17Z"
    }
  ],
  "created_at": "2017-11-24T03:53:06Z",
  "number": 5536,
  "state": "open",
  "title": "Bug: can not handle \"/\" correctly when reading registry item",
  "updated_at": "2021-11-29T17:51:49Z"
}