{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11719",
  "author": "scotthardwick",
  "body": "Yesterday I posted a suggestion that we have a new special format for Get-Date that creates the SecondsSinceEpoch (aka UnixTime) for users.\r\n\r\nAdditionally I think we should have built into the language the ability to easily parse a UnixEpoch timestamp back into a DateTime.\r\n\r\nVarious existing parsing that works today:\r\n```\r\n$aDate = [DateTime]\"2020-01-28T17:32:18.4986003-06:00\" #  (conversion back from the format of Format \"o\")\r\n$bDate = [DateTime]\"2020-01-28T17:36:39\" #  (conversion back from the format of Format \"s\")\r\n$cDate = [DateTime]\"Tue, 28 Jan 2020 17:37:43 GMT\" #  (conversion back from the format of Format \"r\")\r\n$dDate = [DateTime]\"2020-01-28 17:38:24Z\" #  (conversion back from the format of Format \"u\")\r\n$eDate = [DateTime]\"7/25/2013 6:37:31 PM\" \r\n$fDate = [DateTime]\"2013-07-25 14:26:00\" \r\n$gDate = [DateTime]\"7/25/2013 14:26:00\"\r\n$hDate = [DateTime]\"2013-07-25 6:37:31 PM\"\r\n```\r\nBut we can't currently put in $AUnixDate = [DateTime]\"1374755180\" and end up with a valid DateTime object (which would be of UTC kind)\r\n\r\nA discussion by Randy James at https://stackoverflow.com/questions/17859421/parse-datetime-in-multiple-formats suggests perhaps something along these lines for processing this in another language:\r\n```\r\npublic DateTime ParseRequestDate()\r\n{\r\n    // https://stackoverflow.com/questions/2883576/how-do-you-convert-epoch-time-in-c\r\n\r\n    CultureInfo enUS = new CultureInfo(\"en-US\");\r\n\r\n    var dt = \"1374755180\";\r\n    //var dt = \"7/25/2013 6:37:31 PM\";\r\n    //var dt = \"2013-07-25 14:26:00\";\r\n\r\n    DateTime dateValue;\r\n    long dtLong;\r\n\r\n    // Scenario #1\r\n    if (long.TryParse(dt, out dtLong))\r\n        return dtLong.FromUnixTime();\r\n\r\n    // Scenario #2 & #3\r\n    var formatStrings = new string[] { \"MM/dd/yyyy hh:mm:ss tt\", \"yyyy-MM-dd hh:mm:ss\" };\r\n    if (DateTime.TryParseExact(dt, formatStrings, enUS, DateTimeStyles.None, out dateValue))\r\n        return dateValue;\r\n\r\n    throw new SomeException(\"Don't know how to parse...\");\r\n}\r\n\r\n```\r\n",
  "closed_at": "2020-04-07T20:25:04Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Looks good for me but I'd put the code for 1 scenario in last place.\r\n\r\n@SteveL-MSFT Please triage.",
      "created_at": "2020-01-30T03:35:06Z",
      "updated_at": "2020-01-30T03:35:06Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Using .NET methods, you parse Unix epoch time values as follows (given PowerShell's flexible type conversions, you can also use a _string_ in the following method call):\r\n\r\n```powershell\r\nPS> [datetimeoffset]::FromUnixTimeSeconds(1374755180).UtcDateTime\r\nThursday, July 25, 2013 12:26:20 PM\r\n```\r\n\r\n---\r\n\r\nAs for making that easier:\r\n\r\nNote that PowerShell's casts translate to looking for and invoking, as appropriate, the following behind the scenes:\r\n\r\n* a single-parameter constructor on the target type whose parameter is of the same type as the operand\r\n* with _string_ operands, a call to `.Parse(<operand>[, <invariantCulture>)`\r\n\r\n---\r\n\r\n* `[datetime] <string>` translates to the latter, and it doesn't recognize Unix epoch time, and we shouldn't try to add magic there.\r\n\r\n* With a _numeric_ operand, `[datetime] <num>` maps onto constructor `DateTime(long ticks)`; ticks are very fine-grained units with a starting point in the year 1 (sic); try `[datetime] 0`.\r\n  * The same happens when you call `Get-Date 0` (short for: `Get-Date -Date 0`)\r\n  * We shouldn't try to change this logic.\r\n\r\n---\r\n\r\nTherefore, if we want to make this easier, I suggest adding a new parameter to `Get-Date`, along the lines of `-FromUnixTime <long>`, which would be mutually exclusive with `-Date`.\r\n",
      "created_at": "2020-02-01T22:25:15Z",
      "updated_at": "2020-02-06T17:59:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> We shouldn't try to change this logic.\r\n\r\nIt would be a breaking change. @mklement0 Thanks! `-FromUnixTime` is best compromise to address the request.",
      "created_at": "2020-02-02T08:23:01Z",
      "updated_at": "2020-02-02T08:23:01Z"
    },
    {
      "author": "scotthardwick",
      "author_association": "NONE",
      "body": "@mklement0 Thank you for suggesting this. I like your idea MUCH better.  I think it has the added benefit that by being part of Get-Date, its implementation will be documented in the Get-Date documentation which is where I think most people would look if trying to figure out if PowerShell can convert UnixEpoch times.  +1 for -FromUnixTime",
      "created_at": "2020-02-02T14:54:39Z",
      "updated_at": "2020-02-02T14:54:39Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Agree with @mklement0's proposal",
      "created_at": "2020-02-06T17:42:07Z",
      "updated_at": "2020-02-06T17:42:07Z"
    },
    {
      "author": "jackdcasey",
      "author_association": "CONTRIBUTOR",
      "body": "I believe this would be super handy! I'd be happy to take a swing at it \ud83d\ude01",
      "created_at": "2020-03-23T07:36:21Z",
      "updated_at": "2020-03-23T07:36:21Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #12179, which has now been successfully released as `v7.1.0-preview.2`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.2)\n",
      "created_at": "2020-04-23T18:02:32Z",
      "updated_at": "2020-04-23T18:02:32Z"
    }
  ],
  "created_at": "2020-01-29T15:07:01Z",
  "number": 11719,
  "state": "closed",
  "title": "Add One New DateTime Parsing Format",
  "updated_at": "2020-04-23T18:02:32Z"
}