{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13755",
  "author": "fMichaleczek",
  "body": "**transferred from** [dotnet/aspnetcore#25844](https://github.com/dotnet/aspnetcore/issues/25844)\r\n\r\nWhen using the preview of AspNetCore Blazor WebAssembly and attempting to utilize the Microsoft.PowerShell.SDK package, Blazor WebAssembly is unable to load the System.Management.Automation.dll\r\n\r\n# Steps to reproduce\r\n* Create new Blazor WASM project. (net5-preview.7)\r\n* Update project file according to [this guide.](https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-5-preview-7/)\r\n* Add `Microsoft.PowerShell.SDK` package reference\r\n* Do something with a `PowerShell` host [Example repo](https://github.com/jrhodnik/PowerShellTests)\r\n\r\n\r\n## Expected behavior\r\n\r\nit works\r\n\r\n## Actual behavior\r\n\r\nExceptions: \r\n```none\r\nCould not load file or assembly 'System.Management.Automation, Version=7.0.3.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies.\r\n```\r\n\r\n## Environment data\r\n\r\n* PowerShell 7.0.3\r\n* AspNetCore Blazor WebAssembly 5.0 Preview 7\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Could you test with Microsoft.PowerShell.SDK 7.1 RC1?",
      "created_at": "2020-10-07T11:07:49Z",
      "updated_at": "2020-10-07T11:07:49Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@iSazonov In april, I put a demo on twitter of a working prototype on [Mono.Wasm/PowerShell 7](https://fmichaleczek.github.io/PowerShellLab/) hosted on Github Pages.\r\n\r\nI will submit a working PR soon for net5.0 RC1, but there is a lot of subjects like fileless (on startup, help system, module), trimming, preprocessor, async, sdk etc... Wasm is an embedded stack so most of the time, it's not a question, it's a behaviour : the minimal path/size/features. \r\n\r\nFor example, the PowerShell master repo is not well compatible with this kind of restriction :  `<ThreadPoolMaxThreads>1</ThreadPoolMaxThreads>`, so the HttpClient is unusable from the API which is async only.\r\n\r\nYou can try on my previous github page demo :\r\n```\r\nif (-not $task) {\r\n  $task = [Net.Http.HttpClient]::new().GetStringAsync(\"https://gist.githubusercontent.com/IISResetMe/bcbee5f504c25b166003/raw/4ad303f09088ef38aa363863a93c33969080f6ae/Get-AST.ps1\")\r\n  $task.Wait()\r\n}\r\n$task.Result\r\n# 1st Execution : Exception calling \"Wait\" with \"0\" argument(s): \"Cannot wait on monitors on this runtime.\"\r\n# 2nd execution : OK\r\n```\r\n\r\nI will use this issue as a home to publish technical informations and read community's suggestions.\r\n",
      "created_at": "2020-10-07T12:32:43Z",
      "updated_at": "2020-10-07T12:32:43Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "### Why there is no TFM for WebAssembly\r\n- WebAssembly is more like an instruction set (such as x86 or x64) than like an operating system. And we generally don\u2019t offer divergent APIs between different architectures.\r\n- WebAssembly\u2019s execution model in the browser sandbox is a key differentiator, but we decided that it makes more sense to only model this as a runtime check. Similar to how you check for Windows and Linux, you can use the OperatingSystem type. Since this isn\u2019t about instruction set, the method is called IsBrowser() rather than IsWebAssembly().\r\n- There are runtime identifiers (RID) for WebAssembly, called browser and browser-wasm. They allow package authors to deploy different binaries when targeting WebAssembly in a browser. This is especially useful for native code which needs to be compiled to web assembly beforehand.\r\n\r\n### New patterns \r\n\r\n**guard the call** :\r\n```\r\nprivate static string GetLoggingDirectory()\r\n{\r\n    //...\r\n\r\n    if (!OperatingSystem.IsBrowser())\r\n    {\r\n        string exePath = Process.GetCurrentProcess().MainModule.FileName;\r\n        string folder = Path.GetDirectoryName(exePath);\r\n        return Path.Combine(folder, \"Logging\");\r\n    }\r\n    else\r\n    {\r\n        return string.Empty;\r\n    }\r\n}\r\n```\r\n\r\n**mark the member as being unsupported** : \r\n```\r\n[UnsupportedOSPlatform(\"browser\")]\r\nprivate static string GetLoggingDirectory()\r\n{\r\n    //...\r\n\r\n    string exePath = Process.GetCurrentProcess().MainModule.FileName;\r\n    string folder = Path.GetDirectoryName(exePath);\r\n    return Path.Combine(folder, \"Logging\");\r\n}\r\n```\r\nYou have to explicitly indicate that you intend to support your project in Blazor Web Assembly by adding the <SupportedPlatform> item to your project file:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net5.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <SupportedPlatform Include=\"browser\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n### Microsoft.NetCore.App APIs unsupported by Blazor WebAssembly\r\n\r\n**Entire assemblies :** \r\n- System.Diagnostics.FileVersionInfo\r\n- System.Diagnostics.Process\r\n- System.IO.Compression.Brotli\r\n- System.IO.FileSystem.Watcher\r\n- System.IO.IsolatedStorage\r\n- System.IO.Pipes\r\n- System.Net.Mail\r\n- System.Net.NameResolution\r\n- System.Net.NetworkInformation\r\n- System.Net.Ping\r\n- System.Net.Requests\r\n- System.Net.Security\r\n- System.Net.Sockets\r\n- System.Net.WebClient\r\n- System.Security.Cryptography.Csp\r\n- System.Security.Cryptography.Encoding\r\n- System.Security.Cryptography.Primitives\r\n- System.Security.Cryptography.X509Certificates\r\n\r\n**Partial / Limited / Restrictions :** \r\n- System.Console\r\n- System.ComponentModel\r\n- System.Net\r\n- System.Net.Http\r\n- System.Net.WebSockets\r\n- System.Security.Authentication.ExtendedProtection\r\n- System.Security.Cryptography\r\n- System.Threading\r\n\r\nSource :\r\n- [The future of .NET Standard/dotnet team](https://devblogs.microsoft.com/dotnet/the-future-of-net-standard/)\r\n- [Marking APIs that are unsupported by Blazor WebAssembly](https://github.com/dotnet/designs/blob/main/accepted/2020/blazor-unsupported-apis/blazor-unsupported-apis.md)\r\n",
      "created_at": "2020-10-07T13:06:59Z",
      "updated_at": "2020-10-07T13:58:38Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "### General Trimming Options\r\n\r\n MSBuild Property Name | Default Value | Type | Description\r\n-|-|-|-\r\nPublishTrimmed | false | bool | Enable/Disable Trimming\r\nTrimMode | CopyUsed | enum:CopyUsed/Link | CopyUsed: Assembly trimming, Link: Member trimming\r\nSuppressTrimAnalysisWarnings | true| bool | Suppress trim analysis warnings \r\nILLinkWarningLevel | 999 | int | ILLink Warning Level\r\nILLinkTreatWarningsAsErrors | false | bool | ILLink treat warnings as errors\r\n\r\n### Framework Feature Switches\r\n\r\nMSBuild Property Name | Description | Trimmed when | Blazor Specific\r\n-- | -- | -- | --\r\nDebuggerSupport | Any dependency that enables better debugging experience | False | No\r\nEnableUnsafeUTF7Encoding  | Insecure UTF-7 encoding | False | No\r\nEnableUnsafeBinaryFormatterSerialization | BinaryFormatter serialization | False | No\r\nEventSourceSupport | Any EventSource related code or logic | False | No\r\nInvariantGlobalization | All globalization specific code and data | True | No\r\nUseSystemResourceKeys| Any localized resources for system assemblies, such as error messages | True | No\r\nHttpActivityPropagationSupport | Any dependency related to diagnostics support for System.Net.Http | False  | No\r\nTrimmerRemoveSymbols | Remove Symbols | False | No\r\nBlazorEnableTimeZoneSupport | Remove TimeZone Support | False | **Yes**\r\n\r\nMSBuild Property Name | AppContext Setting\r\n-- | --\r\nDebuggerSupport | System.Diagnostics.Debugger.IsSupported\r\nEnableUnsafeUTF7Encoding | System.Text.Encoding.EnableUnsafeUTF7Encoding\r\nEnableUnsafeBinaryFormatterSerialization | System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization\r\nEventSourceSupport | System.Diagnostics.Tracing.EventSource.IsSupported\r\nInvariantGlobalization | System.Globalization.Invariant\r\nUseSystemResourceKeys | System.Resources.UseSystemResourceKeys\r\nHttpActivityPropagationSupport | System.Net.Http.EnableActivityPropagation\r\nBlazorEnableTimeZoneSupport | ?\r\n\r\nsource : \r\n- [App Trimming in net 5](https://devblogs.microsoft.com/dotnet/app-trimming-in-net-5/)\r\n- [Customizing Trimming in .NET 5](https://devblogs.microsoft.com/dotnet/customizing-trimming-in-net-core-5)\r\n- [Trimming Feature Switches](https://github.com/dotnet/runtime/blob/master/docs/workflow/trimming/feature-switches.md)",
      "created_at": "2020-10-07T13:48:15Z",
      "updated_at": "2020-10-16T14:46:26Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@SteveL-MSFT I will need some advices/directions about LogProvider. It's maybe a good candidat for your plugin system ? \r\nWith the new features in msbuild, we could add an external logger library, mark the consumer with UnsupportedOSPlatform and trim the library out to the other platforms when publish.( I will ask again for Android on PWSH7.2/net6.0 timeline, logprovider is a wall in the boot startup)\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/16cc9aaaf825db79eeba65fd0fdc3f43c0c6a8d8/src/System.Management.Automation/utils/tracing/PSEtwLog.cs#L13-L31\r\n\r\nTemporary Workaround\r\n```    \r\ninternal class PSSysLogProvider : LogProvider\r\n {\r\n        private static bool isBrowser;\r\n\r\n        private static SysLogProvider s_provider;\r\n\r\n        static PSSysLogProvider()\r\n        {\r\n            if (OperatingSystem.IsBrowser())\r\n            {\r\n                isBrowser = true;\r\n            }\r\n            else \r\n            {\r\n                s_provider = new SysLogProvider(PowerShellConfig.Instance.GetSysLogIdentity(),\r\n                                                PowerShellConfig.Instance.GetLogLevel(),\r\n                                                PowerShellConfig.Instance.GetLogKeywords(),\r\n                                                PowerShellConfig.Instance.GetLogChannels());\r\n            }\r\n        }\r\n\r\n        internal void WriteEvent(PSEventId id, PSChannel channel, PSOpcode opcode, PSTask task, LogContext logContext, string payLoad)\r\n        {\r\n            if (isBrowser)\r\n            {\r\n                Console.WriteLine($\"Id:       {id}\\n\" + \r\n                                  $\"Channel:  {channel}\\n\" + \r\n                                  $\"Task:     {task}\\n\" + \r\n                                  $\"OpCode:   {opcode}\\n\" +\r\n                                  $\"Severity: {GetPSLevelFromSeverity(logContext.Severity)}\\n\" +\r\n                                  $\"Context: \\n{LogContextToString(logContext)}\" +\r\n                                  $\"PayLoad:  {payLoad}\"  +\r\n                                  $\"UserData: {GetPSLogUserData(logContext.ExecutionContext)}\\n\");\r\n            }\r\n            else\r\n            {\r\n                s_provider.Log(id, channel, task, opcode, GetPSLevelFromSeverity(logContext.Severity), DefaultKeywords,\r\n                           LogContextToString(logContext),\r\n                           GetPSLogUserData(logContext.ExecutionContext),\r\n                           payLoad);\r\n            }\r\n        }\r\n}\r\n```",
      "created_at": "2020-10-07T14:32:21Z",
      "updated_at": "2020-10-07T14:32:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">  I will need some advices/directions about LogProvider. It's maybe a good candidat for your plugin system ?\r\n\r\nWe could think about [`ILogger`](https://docs.microsoft.com/en-us/dotnet/core/diagnostics/logging-tracing#ilogger-and-logging-frameworks)",
      "created_at": "2020-10-07T18:43:55Z",
      "updated_at": "2020-10-07T18:43:55Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "> We could think about ILogger\r\n\r\nWith a dependency injection system or by adding an internal static property Provider to PSEtwLog ?\r\nThe problem is more about this area than ILogger. Logger is the second thing in a DI after Configuration, so it's maybe an interesting point for a plugin system in SMA.\r\n\r\n@iSazonov About trimming, I know it's an area than interest you, I need a script to benchmark size/performance/GC of each MSBuild Property (there is too much properties, I need raw data to choose). Do you know if something already exists ? I will have a look of DotNetBenchmark.",
      "created_at": "2020-10-07T19:52:00Z",
      "updated_at": "2020-10-07T19:52:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> With a dependency injection system or by adding an internal static property Provider to PSEtwLog ?\r\n\r\nWe have no need to use DI. I guess it will be simple custom implementation of the ILogger.\r\nExisting PowerShell logging/tracing looks very expensive. With migrating to ILogger PowerShell would get better performance. It also fits well with the idea of PowerShell \u200b\u200b_subsystems_ that MSFT team is developing.\r\n\r\n> Do you know if something already exists ? I will have a look of DotNetBenchmark.\r\n\r\n- DotNetBenchmark\r\n- PerfView\r\n- WPR/WPA\r\n- dotnet trace\r\n- VS Profiler\r\n- experimental PowerShell script profiler (draft PR)\r\n",
      "created_at": "2020-10-08T06:00:07Z",
      "updated_at": "2020-10-08T06:00:07Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "After reading how works this plugin system [DotNetCorePlugins](https://github.com/natemcmaster/DotNetCorePlugins), I'm afraid that the compatibility with Wasm will be an extra cost to implement.\r\n\r\nFI, this is a sample for lazy load assemblies in wasm (through the router and url browsing).\r\n```\r\n@inject Microsoft.AspNetCore.Components.WebAssembly.Services.LazyAssemblyLoader assemblyLoader\r\n\r\n<Router AppAssembly=\"@typeof(Program).Assembly\" AdditionalAssemblies=\"@lazyLoadedAssemblies\" OnNavigateAsync=\"@OnNavigateAsync\">...</Router>\r\n\r\n@code {\r\n    private List<Assembly> lazyLoadedAssemblies = new List<Assembly>();\r\n\r\n    private async Task OnNavigateAsync(NavigationContext args)\r\n    {\r\n            if (args.Path.EndsWith(\"/robot\"))\r\n            {\r\n                LazyLoadedAssemblies.AddRange(await assemblyLoader.LoadAssembliesAsync(new List<string>() { \"robot.dll\" }));\r\n            }\r\n    }\r\n}\r\n```\r\nsource : [Lazy load assemblies in ASP.NET Core Blazor WebAssembly](https://docs.microsoft.com/en-us/aspnet/core/blazor/webassembly-lazy-load-assemblies?view=aspnetcore-5.0)\r\n\r\nAbout ILogger, I will continue for Blazor to use Console.WriteLine inside SMA Logger code until the new logger will be available. There is only one destination to ILogger and Console : the browser console, the difference is only about formatting, so it doesn't matter now.\r\n\r\n ",
      "created_at": "2020-10-08T10:58:07Z",
      "updated_at": "2020-10-08T10:58:07Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "For browser scenario, it seems that logging should just be disabled as it's not obvious to me where the logs would go to be something you can inspect later.  Sending it to the console (which presumably would show up in output) might be ok for development purposes, but not general usage.",
      "created_at": "2020-10-13T16:11:25Z",
      "updated_at": "2020-10-13T16:11:25Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That just tells me that we need to have a pluggable logging destination, then. It not being obvious is a reason to leave it to the person implementing it in nonstandard scenarios, not disabling it entirely.",
      "created_at": "2020-10-13T16:15:48Z",
      "updated_at": "2020-10-13T16:15:48Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "On logging, here's the \"best practice\" apparently: https://docs.microsoft.com/en-us/aspnet/core/blazor/fundamentals/logging?view=aspnetcore-3.1#blazor-webassembly\n\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/aspnet/core/blazor/fundamentals/logging\">ASP.NET Core Blazor logging</a></strong></div><div>Learn about logging in Blazor apps, including log level configuration and how to write log messages from Razor components.</div></blockquote>",
      "created_at": "2020-10-13T16:20:36Z",
      "updated_at": "2020-10-13T16:20:38Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "Microsoft.Extensions.* are the librairies from aspnetcore team, but starting net5.0, they are splitted into runtime and aspnetcore\r\n[dimportant update on dotnet/extensions](https://github.com/dotnet/extensions#-important-updates-)\r\n\r\nWe need a layer with ILogger, and a way to specify an already ILogger to SMA in App Mode (through InitialSessionState ?).\r\n\r\nThe only one logger extension for Blazor is BlazorExtensions.Logging. It's an interesting Logger because it implements the JS API [Console.Table](https://developer.mozilla.org/en/docs/Web/API/Console/table). \r\nhttps://github.com/BlazorExtensions/Logging\r\n\r\n@SteveL-MSFT AspNetCore use the logger to write error in the console (developper tools) like Javascript. To debug the C# code, we use the Browser debugger, it's very weird,  you trace C# powershell source inside the browser tools. More informations here : [Blazor Client Side Debugging](https://stackoverflow.com/questions/56267303/blazor-client-side-debugging)\r\n\r\n\r\n\r\n\n\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/38994076?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/BlazorExtensions/Logging\">BlazorExtensions/Logging</a></strong></div><div>Microsoft Extension Logging implementation for Blazor - BlazorExtensions/Logging</div></blockquote>",
      "created_at": "2020-10-13T16:37:17Z",
      "updated_at": "2020-10-13T16:37:19Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "Working : \r\n```\r\n$PSVersionTable | Out-String\r\nGet-ChildItem -Path / -Recurse | Out-String\r\nGet-ChildItem env: | Out-String\r\nGet-Variable | Out-String\r\nGet-Module -ListAvailable | Out-String\r\nGet-Command | Out-String\r\n$PSVersionTable | ConvertTo-Json | Out-String\r\nConvertFrom-Markdown -InputObject \"test\" | Out-String\r\nGet-Module | ConvertTo-Html -Fragment | Out-String\r\nGet-Help -Name Get-Command | Out-String\r\n```\r\n\r\nNot Working : Update Help + Web Cmdlets + More\r\n```\r\n# click two times on the Run as a workaround. Need 2 invocations to handle the async task.\r\nif (-not $task) {\r\n    $task = [Net.Http.HttpClient]::new().GetStringAsync(\"https://gist.githubusercontent.com/IISResetMe/bcbee5f504c25b166003/raw/4ad303f09088ef38aa363863a93c33969080f6ae/Get-AST.ps1\")\r\n}\r\ntry {\r\n   $task.Wait() # Cannot wait on monitors on this runtime \r\n}\r\ncatch {\r\n   $_ | Out-String\r\n}\r\n$task.Result | Out-String\r\n```",
      "created_at": "2020-10-13T16:57:26Z",
      "updated_at": "2020-10-13T16:57:26Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "There is some work going on in https://github.com/OmniSharp/csharp-language-server-protocol/issues/456 to allow the library that we use in [PowerShellEditorServices](https://github.com/PowerShell/PowerShellEditorServices) to work in Blazor WASM. With that work + work to PowerShell to get it working in Blazor WASM, we can create a PowerShell editing experience that's entirely in the browser like what the Bicep team did here:\n\nhttps://bicepdemo.z22.web.core.windows.net/experiment/lsp/index.html\n\n<blockquote><div><strong><a href=\"https://bicepdemo.z22.web.core.windows.net/experiment/lsp/index.html\">Bicep Playground 0.2.124-g06606bd8ca</a></strong></div></blockquote>",
      "created_at": "2020-12-06T02:37:06Z",
      "updated_at": "2020-12-06T02:37:08Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@TylerLeonhardt Nice ! I started a new job, and we are confined in Paris. I will try to make an update the next week.",
      "created_at": "2020-12-07T10:11:19Z",
      "updated_at": "2020-12-07T10:11:19Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "@TylerLeonhardt that Bicep POC is really inspiring! Thanks for sharing.",
      "created_at": "2020-12-07T16:52:24Z",
      "updated_at": "2020-12-07T16:52:24Z"
    }
  ],
  "created_at": "2020-10-07T11:00:24Z",
  "labels": [
    "Issue-Meta",
    "WG-DevEx-SDK",
    "Needs-Triage"
  ],
  "number": 13755,
  "state": "open",
  "title": "Microsoft.PowerShell.SDK doesn't work in a AspNetCore Blazor WebAssembly project",
  "updated_at": "2021-02-25T22:05:06Z"
}