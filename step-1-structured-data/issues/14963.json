{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14963",
  "author": "p0W3RH311",
  "body": "hi guys !!\r\n\r\n```\r\nPS> 1.000.000.000\r\nPS> # NOT RETURN ANYTHGING\r\n\r\nPS> perl6 -e 'say 1_000_000_000'\r\n1000000000\r\n\r\n\r\nPS> @'\r\n>> fn main() {\r\n>>  let s = 1_000_000_000;\r\n>>  println!(\"{}\",s);\r\n>> }\r\n>> '@ > ./num.rs\r\n\r\nPS> rustc .\\num.rs\r\n\r\nPS> ./num.exe\r\n1000000000\r\n```\r\n\r\nin this example i compared between rust, raku and PS....like you see rust and raku use \"_\" underscore to separate betwwen number and its much clean...but in PS with \".\" dot it not return anything.",
  "closed_at": "2021-03-12T12:00:05Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "PowerShell doesn't have a number separator like that. I have previously proposed to add an underscore numeral separator, but it was vetoed during review of the PR a year or two back, I think.\r\n\r\nWhen you do `1.000` PowerShell sees that as a floating point number with the value `1.000`. If you then attempt to use another dot, PowerShell assumes you want to access a property, but `1.000` as a numeric value has no property named `.000` and so it will return $null, and further property access from that point will continue to return $null.\r\n\r\n`1.000.000.000` tells PowerShell:\r\n\r\n1. make a number, `1.000` (floating point, double)\r\n2. access the property of that number called `000` (null)\r\n3. access the property of that value called `000` (null again)",
      "created_at": "2021-03-07T23:05:53Z",
      "updated_at": "2021-03-07T23:05:53Z"
    },
    {
      "author": "p0W3RH311",
      "author_association": "NONE",
      "body": "its crazy\r\n```\r\n\r\nPS C:\\> [string]::IsNullOrWhiteSpace(1.000.000.000)\r\nTrue\r\nPS C:\\>\r\n```\r\n\r\nthe code its writtin to human not to machine...the parser is not intelligent ",
      "created_at": "2021-03-07T23:26:37Z",
      "updated_at": "2021-03-07T23:26:37Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@p0W3RH311, no: that's just a consequence of the behavior that @vexx32 explained: your command is in effect equivalent to:\r\n\r\n```powershell\r\n[string]::IsNullOrWhiteSpace($null)\r\n```\r\n\r\nClearly, `.` is unsuitable as a culture-invariant _thousands-grouping_ separator, given that `.` is the culture-invariant _decimal mark_.\r\n\r\nBy contrast, `_` as the thousands-grouping separator in _number literals_ indeed would make sense - but has apparently been rejected.\r\n",
      "created_at": "2021-03-07T23:28:26Z",
      "updated_at": "2021-03-07T23:28:46Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "For reference: https://github.com/PowerShell/PowerShell/pull/7993#issuecomment-442651543\r\n\r\nYou might still find the implementation code in the older commits there, if there is interest in revisiting it.",
      "created_at": "2021-03-08T00:45:00Z",
      "updated_at": "2021-03-08T00:45:00Z"
    },
    {
      "author": "ShrykeWindgrace",
      "author_association": "NONE",
      "body": "@mklement0 FYI, `.` is most definitely **not** a culture-invariant decimal mark. Judging by the number of countries in different sections in https://en.wikipedia.org/wiki/Decimal_separator#Hindu-Arabic_numerals, comma and dot are both in widespread use.\n\n<blockquote><img src=\"https://upload.wikimedia.org/wikipedia/commons/1/18/Common_decimal_separators_-_Decimal_point_and_decimal_comma.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://en.wikipedia.org/wiki/Decimal_separator#Hindu-Arabic_numerals\">Decimal separator</a></strong></div></blockquote>",
      "created_at": "2021-03-10T16:06:23Z",
      "updated_at": "2021-03-10T16:06:25Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@ShrykeWindgrace, I think you misunderstood my comment: by _culture-invariant_ I was referring to a property of the [_invariant culture_](https://docs.microsoft.com/en-US/dotnet/api/System.Globalization.CultureInfo.InvariantCulture), which PowerShell frequently uses, notably in number _literals_:\r\n\r\nIn PowerShell number literals, `.` _always_ serves as the decimal mark, irrespective of the culture currently in effect (`Get-Culture`). As such, it cannot _also_ be used to group thousands, whereas `_` - again, not tied to any particular culture - seems perfectly reasonable.\r\n\r\n\r\n\r\n",
      "created_at": "2021-03-10T16:13:58Z",
      "updated_at": "2021-03-10T16:35:37Z"
    },
    {
      "author": "ShrykeWindgrace",
      "author_association": "NONE",
      "body": "@mklement0 Indeed, I forgot about the context here, and my comment was harsh - and uncalled for; please accept my apologies.",
      "created_at": "2021-03-11T09:09:21Z",
      "updated_at": "2021-03-11T09:09:21Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2021-03-12T12:00:04Z",
      "updated_at": "2021-03-12T12:00:04Z"
    }
  ],
  "created_at": "2021-03-07T22:49:40Z",
  "number": 14963,
  "state": "closed",
  "title": "why i hate the dot",
  "updated_at": "2021-03-12T12:00:05Z"
}