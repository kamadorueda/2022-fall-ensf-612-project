{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12589",
  "author": "Schwanowski",
  "body": "Hi there,\r\n\r\nin powershell v7 (I think) I found an issue with Arraylists. When I create an arraylist and then destroy it after conversation, it throws an exception. I think this is a bug, isnt it?\r\n\r\nThanks,\r\n\r\nAlex\r\n\r\n```\r\n$myAl = New-Object System.Collections.ArrayList\r\n   $myAl.Add('15')\r\n   [array]$myAl = $myAl\r\n   $myAl = $null\r\n   $myAl = New-Object System.Collections.ArrayList\r\n   $myAl.Add('15')\r\n```\r\nException:\r\n\r\nMethodInvocationException: \r\nLine |\r\n   6 |     $myAl.Add('15')\r\n     |     ~~~~~~~~~~~~~~~\r\n     | Exception calling \"Add\" with \"1\" argument(s): \"Collection was of a fixed size.\"",
  "closed_at": "2020-05-06T19:58:56Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Hmm... nah, this is expected behaviour. \ud83d\ude42 \r\n\r\nSo, when you declare a variable with the type cast on the left like this:\r\n```ps1\r\n[array]$myVar = 1\r\n```\r\n\r\nThat type cast is recorded as an attribute against the variable itself, and will persist until a new type cast is declared, or you remove the variable explicitly with `Remove-Variable`.\r\n\r\nAny new value you set to that variable will automatically be cast to that type (or an error will be reported if there is no cast possible).\r\n\r\nYour ArrayList is only arraylist until it hits that variable which you're defining to be a simple array. Once it's an array, it's a fixed-size collection and cannot be modified.",
      "created_at": "2020-05-06T16:51:35Z",
      "updated_at": "2020-05-06T16:51:35Z"
    },
    {
      "author": "scriptingstudio",
      "author_association": "NONE",
      "body": "@vexx32 your explanation is right but $myAl has `add` method and it does  not work\r\n```\r\n,$myAl | gm\r\n\r\n\r\n   TypeName: System.Object[]\r\n\r\nName           MemberType            Definition\r\n----           ----------            ----------\r\nCount          AliasProperty         Count = Length\r\nAdd            Method                int IList.Add(System.Object value)\r\nAddress        Method                System.Object&, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a...\r\nClear          Method                void IList.Clear()\r\nClone          Method                System.Object Clone(), System.Object ICloneable.Clone()\r\nCompareTo      Method                int IStructuralComparable.CompareTo(System.Object other, System.Collections.ICo...\r\nContains       Method                bool IList.Contains(System.Object value)\r\nCopyTo         Method                void CopyTo(array array, int index), void CopyTo(array array, long index), void...\r\nEquals         Method                bool Equals(System.Object obj), bool IStructuralEquatable.Equals(System.Object ...\r\nGetEnumerator  Method                System.Collections.IEnumerator GetEnumerator(), System.Collections.IEnumerator ...\r\nGetHashCode    Method                int GetHashCode(), int IStructuralEquatable.GetHashCode(System.Collections.IEqu...\r\nGetLength      Method                int GetLength(int dimension)\r\nGetLongLength  Method                long GetLongLength(int dimension)\r\nGetLowerBound  Method                int GetLowerBound(int dimension)\r\nGetType        Method                type GetType()\r\nGetUpperBound  Method                int GetUpperBound(int dimension)\r\nGetValue       Method                System.Object GetValue(Params int[] indices), System.Object GetValue(int index)...\r\nIndexOf        Method                int IList.IndexOf(System.Object value)\r\nInitialize     Method                void Initialize()\r\nInsert         Method                void IList.Insert(int index, System.Object value)\r\nRemove         Method                void IList.Remove(System.Object value)\r\nRemoveAt       Method                void IList.RemoveAt(int index)\r\nSet            Method                void Set(int , System.Object )\r\nSetValue       Method                void SetValue(System.Object value, int index), void SetValue(System.Object valu...\r\nToString       Method                string ToString()\r\nItem           ParameterizedProperty System.Object IList.Item(int index) {get;set;}\r\nIsFixedSize    Property              bool IsFixedSize {get;}\r\nIsReadOnly     Property              bool IsReadOnly {get;}\r\nIsSynchronized Property              bool IsSynchronized {get;}\r\nLength         Property              int Length {get;}\r\nLongLength     Property              long LongLength {get;}\r\nRank           Property              int Rank {get;}\r\nSyncRoot       Property              System.Object SyncRoot {get;}\r\n```",
      "created_at": "2020-05-06T18:04:33Z",
      "updated_at": "2020-05-06T18:04:33Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "We're getting much more into .NET territory here than what PowerShell has any control over, but to explain somewhat...\r\n\r\n`System.Array` (which is the base class for `System.Object[]` as well as every other type that is a basic array) implements the `IList` interfaces which, among other things, demands that it provides an `Add()` method. So it does, to comply with the interface. However, the interface only states it has to support the method, not that the method needs to _work_.\r\n\r\nThere's another IList member that it implements, you'll note that there's an `IsFixedSize` member property in your Get-Member result there; the expectation is that if `IsFixedSize` is `true`, the `Add()` and similar methods are expected to throw / error out instead of doing something to the list.",
      "created_at": "2020-05-06T18:20:46Z",
      "updated_at": "2020-05-06T18:20:46Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Adding onto what @vexx32 said, `IList.Add` is an *explicit* interface implementation.  PowerShell doesn't surface this distinction very well, but in C# that method can't be used unless you are explicitly casting the array as `IList`\r\n\r\n```csharp\r\nobject[] myArray = new object[0];\r\n\r\n// Compiles\r\n((IList)myArray).Add(0);\r\n\r\n// Doesn't compile\r\nmyArray.Add(0);\r\n```",
      "created_at": "2020-05-06T18:24:43Z",
      "updated_at": "2020-05-06T18:24:43Z"
    },
    {
      "author": "scriptingstudio",
      "author_association": "NONE",
      "body": "but some other methods like `IList.Clear`, `IList.IndexOf` work and it gets confused.",
      "created_at": "2020-05-06T18:28:22Z",
      "updated_at": "2020-05-06T18:28:44Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@scriptingstudio Yeah `Clear` works because it's of a fixed size, not read only (it doesn't change the size of the array, it just `null`s out every item).  Why wouldn't `IndexOf` work?",
      "created_at": "2020-05-06T18:41:25Z",
      "updated_at": "2020-05-06T18:41:25Z"
    },
    {
      "author": "scriptingstudio",
      "author_association": "NONE",
      "body": "I would suggest that inactive methods should be hidden.",
      "created_at": "2020-05-06T18:49:18Z",
      "updated_at": "2020-05-06T18:49:18Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "It's not inactive, it throws by design.  There's no way for PowerShell to determine that.",
      "created_at": "2020-05-06T18:51:40Z",
      "updated_at": "2020-05-06T18:51:40Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "I get the frustration, I really do.  When I first ran into this I was incredibly confused by it.  Sometimes design patterns that make a lot of sense in C# are going to be surfaced in PowerShell in a really unavoidably bad way, there's not much that can really be done about it.  I wish when they were initially designing the binder they required a cast to access explicitly implemented members, but they already didn't do that.  Unfortunately if they changed it to work like that now it would be a pretty large breaking change.",
      "created_at": "2020-05-06T18:57:45Z",
      "updated_at": "2020-05-06T18:57:45Z"
    },
    {
      "author": "Schwanowski",
      "author_association": "NONE",
      "body": "Thank you guys for all your patient support and explanations.\r\n\r\n\r\nthis code Works\r\n\r\n```$myAl = New-Object System.Collections.ArrayList\r\n   $myAl.Add('15')\r\n   [array]$myAl = $myAl\r\n   Remove-Variable myAl\r\n   $myAl = New-Object System.Collections.ArrayList\r\n   $myAl.Add('15')",
      "created_at": "2020-05-06T19:58:56Z",
      "updated_at": "2020-05-06T20:04:37Z"
    }
  ],
  "created_at": "2020-05-06T15:36:59Z",
  "number": 12589,
  "state": "closed",
  "title": "Arraylist converts to Array but after destruction cannot be re-created",
  "updated_at": "2020-05-06T20:04:37Z"
}