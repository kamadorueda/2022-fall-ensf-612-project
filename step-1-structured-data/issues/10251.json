{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10251",
  "author": "SteveL-MSFT",
  "body": "Is there a need for new module manifest properties?  Please indicate the proposed name of the property, description, and also examples of how it would be used?\r\n\r\nThis discussion came up during @PowerShell/powershell-committee review of https://github.com/PowerShell/PowerShell-RFC/pull/188 and we do not anticipate many new members, if any, being added to the module manifest.",
  "closed_at": "2021-06-01T19:37:55Z",
  "comments": [
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "If a new member is proposed as part of an RFC, should it be listed here as well?",
      "created_at": "2019-07-29T20:55:37Z",
      "updated_at": "2019-07-29T20:55:37Z"
    },
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "`CompatibleOS` from https://github.com/PowerShell/PowerShell/issues/9784 and https://github.com/PowerShell/PowerShell-RFC/pull/122\r\n\r\nMax PS version support per https://github.com/PowerShell/PowerShell-RFC/pull/122. I expect it should be an enhancement of `PowerShellVersion` property to accept a hashtable like `RequiredModules`.",
      "created_at": "2019-07-30T03:32:35Z",
      "updated_at": "2019-07-30T03:43:31Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@KirkMunro yes, let's have a complete list here to discuss their merits",
      "created_at": "2019-08-16T01:02:17Z",
      "updated_at": "2019-08-16T01:02:17Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "From [PowerShell/PowerShell-RFC#220](https://github.com/PowerShell/PowerShell-RFC/pull/220):\r\n\r\n|PropertyName|Type|Description|\r\n|--|--|--|\r\n|`OptionalFeatures`|`string[]`|Names of optional features that will be enabled within the scope of the script module|\r\n|`DisabledOptionalFeatures`|`string[]`|Names of optional features that will be disabled within the scope of the script module|\r\n\r\nThe rationale behind these manifest entries is to allow optional features to be enabled or disabled by tool makers and module authors without impacting individual PowerShell users who want to use those tools. They allow module authors to guarantee their module behave a certain way regardless of what system they are run on, with one or more specific optional features enabled or disabled.\r\n\r\nFor more details why these are needed, read [PowerShell/PowerShell-RFC#220](https://github.com/PowerShell/PowerShell-RFC/pull/220).\r\n\r\nFor examples of possible optional features that module authors would care about, read [PowerShell/PowerShell-RFC#221](https://github.com/PowerShell/PowerShell-RFC/pull/221) and [PowerShell/PowerShell-RFC#187](https://github.com/PowerShell/PowerShell-RFC/pull/187).\r\n",
      "created_at": "2019-08-18T02:55:49Z",
      "updated_at": "2019-08-18T02:57:09Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "In addition to the above properties, it would be helpful if a manifest could be used without `psm1` files as much. For example, many modules include a `psm1` file whose sole purpose is to dot-source a bunch of `ps1` files.\r\n\r\nTo make that easier, module authors often just dot-source all `ps1` files in a folder (e.g. public or private). That could be dangerous though, because someone could drop a `ps1` file in a module folder resulting in additional code that is executed when a module is loaded. I've worked around that by only dot-sourcing files that have a signature that matches the signature on the `psm1` file, and reusing that code in a shared snippet in SnippetPx, but that's just creating more work to put things in place to make it easier to define modules.\r\n\r\nIt would be much better to identify the cases where a `psm1` file really shouldn't be necessary, and enhance `psd1` files so that they support those cases, making module authoring easier. That won't happen though, as long as we're stuck in legacy support mode.",
      "created_at": "2019-11-14T02:58:02Z",
      "updated_at": "2019-11-14T02:58:02Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "From [uservoice](https://windowsserver.uservoice.com/forums/301869-powershell/suggestions/11088036-add-requires-runasadministrator-ability-to-modul) and it just came up for me with a module I'm working on:\r\n\r\n|PropertyName|Type|Description|\r\n|--|--|--|\r\n|`RunAsAdministrator`|`bool`|Identifies that the module can only be loaded in an elevated session. Only applies when run on Windows systems|\r\n\r\nWe have `#requires -RunAsAdministrator`, but that setting is the only `#requires` option that is not available in a manifest, so it should be made available there as well.\r\n",
      "created_at": "2019-12-09T16:36:14Z",
      "updated_at": "2019-12-09T16:36:14Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I don't think there are a great many cases where loading a whole module _needs_ that, but I'm sure there are some. Having that info in the manifest would be a good idea, it makes it easier to determine the requirement before executing commands / importing the module.",
      "created_at": "2019-12-09T20:39:15Z",
      "updated_at": "2019-12-09T20:39:15Z"
    },
    {
      "author": "logicalextreme",
      "author_association": "NONE",
      "body": "Just to pipe up here \u2014 I lost about half a day yesterday to investigating `#Requires -Assembly` having not been implemented, and only realised at the last moment before opening an issue that I'd written out that there were already issues for it which have all been closed (with the result that I can't tell whether the intention was to implement it, ignore it, or replace `#Requires` with module manifests entirely).\r\n\r\nMy feeling looking through the codebase for the first time was that it would make sense to have both `#Requires` and module manifests use the same validation (and loading, if applicable) methods for any shared functionality, as it seems like an obvious thing to abstract.\r\n\r\nHowever my question is this \u2014 as I now haven't raised my issue for `#Requires -Assembly`, is anybody able to clarify that the intent is _not_ to implement it so that I can instead amend the documentation? I get the feeling it's not just me that's wasted time chasing a ghost that's been implemented as a parameter, documented and then not implemented.\r\n\r\nApologies for not raising a new issue but as I say there seem to be enough of them on the subject and they all pretty much lead to this one.",
      "created_at": "2020-02-06T10:03:04Z",
      "updated_at": "2020-02-06T10:03:39Z"
    }
  ],
  "created_at": "2019-07-29T20:00:02Z",
  "number": 10251,
  "state": "closed",
  "title": "Discussion: New properties to add to module manifest?",
  "updated_at": "2021-06-01T19:37:55Z"
}