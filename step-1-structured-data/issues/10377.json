{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10377",
  "author": "HumanEquivalentUnit",
  "body": "# Steps to reproduce\r\n\r\nJoining 100kb random numbers, the operator is much slower, ~13x here:\r\n\r\n```powershell\r\n[string[]]$nums = Get-Random -Minimum 1 -Maximum 100 -Count 100kb\r\n\r\nmeasure-command { $nums -join ','            } |% TotalMilliseconds\r\nmeasure-command { [string]::join(',', $nums) } |% TotalMilliseconds\r\n\r\n234.82690000000002\r\n14.497100000000001\r\n```\r\n\r\nStranger, with [a big wordlist text file](https://github.com/dolph/dictionary/blob/master/enable1.txt?raw=true), loading it two different ways seems to make a difference:\r\n\r\n```powershell\r\n$w1 = Get-Content d:\\test\\wordlist.txt;   $w1.Count\r\n$w2 = ${D:\\test\\wordlist.txt};            $w2.Count\r\n\r\nmeasure-command { $w1 -join \"`r`n\" } |% TotalMilliseconds\r\nmeasure-command { $w2 -join \"`r`n\" } |% TotalMilliseconds\r\n\r\nmeasure-command { [string]::join(\"`r`n\", $w1) } |% TotalMilliseconds\r\nmeasure-command { [string]::join(\"`r`n\", $w2) } |% TotalMilliseconds\r\n\r\n172823\r\n172823        # same word count\r\n\r\n254.6534\r\n423.63100000000003    # <-- slower?\r\n\r\n183.01510000000002\r\n16.148400000000002    # <-- how come this one is SO fast?\r\n```\r\n\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nPS D:\\> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-preview.1\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-preview.1\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2019-10-29T13:26:46Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I can confirm.\r\n```powershell\r\nmeasure-command { for ($i=1; $i -le 100; $i++) { $w1 -join \"`r`n\" } } | Select-Object -ExpandProperty TotalMilliseconds\r\nmeasure-command { for ($i=1; $i -le 100; $i++) { $w2 -join \"`r`n\" } } | Select-Object -ExpandProperty TotalMilliseconds\r\nmeasure-command { for ($i=1; $i -le 100; $i++) { [string]::join(\"`r`n\", $w1) } } | Select-Object -ExpandProperty TotalMilliseconds\r\nmeasure-command { for ($i=1; $i -le 100; $i++) { [string]::join(\"`r`n\", $w2) } } | Select-Object -ExpandProperty TotalMilliseconds\r\n\r\n8171,9807\r\n10849,47\r\n8893,1133\r\n6298,2773\r\n```\r\nI wonder there is very large deviations.",
      "created_at": "2019-08-19T11:58:16Z",
      "updated_at": "2019-08-19T11:58:29Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I have similar results. Very odd.\r\n\r\n```ps\r\n 3  Z:  Root  PS>  $w1 = Get-Content Z:\\enable1.txt; $w1.Count\r\n>> $w2 = ${Z:\\enable1.txt}; $w2.Count\r\n>> measure-command { $w1 -join \"`r`n\" } |% TotalMilliseconds\r\n>> measure-command { $w2 -join \"`r`n\" } |% TotalMilliseconds\r\n>> measure-command { [string]::join(\"`r`n\", $w1) } |% TotalMilliseconds\r\n>> measure-command { [string]::join(\"`r`n\", $w2) } |% TotalMilliseconds\r\n172823\r\n172823\r\n355.6246\r\n320.0242\r\n242.2418\r\n16.8466\r\n```",
      "created_at": "2019-08-19T14:55:49Z",
      "updated_at": "2019-08-19T14:55:49Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "The `-join` operator does more \"stuff\" - it works on enumerables of objects not just arrays of strings - so there's conversion logic overhead, etc. but I'm surprised to see such a big difference. ",
      "created_at": "2019-08-19T17:49:36Z",
      "updated_at": "2019-08-19T17:49:36Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "The source for the `-join` operator implementation is [here.](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/lang/parserutils.cs#L805)",
      "created_at": "2019-08-19T17:56:14Z",
      "updated_at": "2019-08-19T17:56:14Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Hmm - did some profiling for `-join`. Lotta time spend in PSObject.ToString()...\r\n\r\n![image](https://user-images.githubusercontent.com/6876108/63289356-be39d700-c273-11e9-894e-7faf187cf06e.png)\r\n\r\n",
      "created_at": "2019-08-19T18:24:48Z",
      "updated_at": "2019-08-19T18:24:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I very wonder that results for `$w1`  and `$w2` notably differ",
      "created_at": "2019-08-20T03:12:37Z",
      "updated_at": "2019-08-20T03:12:37Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> I very wonder that results for `$w1` and `$w2` notably differ\r\n\r\nThe former is a `object[]` containing `PSObject`'s, the latter is a `object[]` containing `string`'s.",
      "created_at": "2019-08-20T03:21:14Z",
      "updated_at": "2019-08-20T03:21:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I pulled PR for `$w2 = ${D:\\test\\wordlist.txt};` scenario but it seems also fix the first scenario for random numbers.",
      "created_at": "2019-08-20T09:18:12Z",
      "updated_at": "2019-08-20T09:18:12Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "By _first scenario for random numbers_, do you mean `[string[]]$nums = Get-Random -Minimum 1 -Maximum 100 -Count 100kbB` in the PR repro? `$num` is also a string array.",
      "created_at": "2019-08-23T06:16:04Z",
      "updated_at": "2019-08-23T06:16:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> $num is also a string array.\r\n\r\nYes, my comment for the issue description only.",
      "created_at": "2019-08-23T06:39:57Z",
      "updated_at": "2019-08-23T06:39:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "After discussion in #10389 we close this as \"by-design\".\r\n\r\nThe bottom line is we don\u2019t want to lose ETS although it makes us to wrap all in PSObject-s that cause a performance degradation. Recommendation is to use [string]::join() if needed.\r\n\r\nWe could add an option to -join operator to bypass ETS (PSObject wrapping). If you have an interest please open new issue with feature request. \r\n\r\nAlso we discovered an possible inconsistency in string operators (-join, -like, -match, etc.) \r\nin how they relate to ETS. Perhaps @mklement0 will be interested to investigate this.\r\n",
      "created_at": "2019-10-29T13:26:46Z",
      "updated_at": "2019-10-29T13:28:21Z"
    }
  ],
  "created_at": "2019-08-19T04:31:44Z",
  "number": 10377,
  "state": "closed",
  "title": "Performance: -join slower than [string]::Join()",
  "updated_at": "2019-10-29T13:28:21Z"
}