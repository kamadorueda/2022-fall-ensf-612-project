{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3049",
  "author": "vors",
  "body": "<!--\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](../docs/FAQ.md).\r\n- Refer to the [known issues](../docs/KNOWNISSUES.md).\r\n- Fill out the following repro template\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nOn macOS run\r\n```\r\nosascript -e 'display notification \"FOO\" with title \"TITLE\"'\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nShow notification, just like in bash\r\n\r\nActual behavior\r\n---------------\r\n\r\n```\r\nPS /> osascript -e 'display notification \"FOO\" with title \"TITLE\"'                                                             \r\n21:24: execution error: The variable FOO is not defined. (-2753)\r\nPS /> bash                                                                                                                     \r\nbash-3.2$ osascript -e 'display notification \"FOO\" with title \"TITLE\"'\r\nbash-3.2$\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value                                                                                                                   \r\n----                           -----                                                                                                                   \r\nPSVersion                      6.0.0-alpha                                                                                                             \r\nPSEdition                      Core                                                                                                                    \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                                                 \r\nBuildVersion                   3.0.0.0                                                                                                                 \r\nGitCommitId                    v6.0.0-alpha.14                                                                                                         \r\nCLRVersion                                                                                                                                             \r\nWSManStackVersion              3.0                                                                                                                     \r\nPSRemotingProtocolVersion      2.3                                                                                                                     \r\nSerializationVersion           1.1.0.1  \r\n```\r\n",
  "closed_at": "2017-05-24T14:47:28Z",
  "comments": [
    {
      "author": "thezim",
      "author_association": "CONTRIBUTOR",
      "body": "The following change does work.\r\n```powershell\r\nosascript -e 'display notification \\\"FOO\\\" with title \\\"TITLE\\\"'\r\n```\r\n\r\nPer the man page.\r\n\r\n    -e statement\r\n           Enter one line of a script.  If -e is given, osascript will not look for a filename in the argument list.\r\n           Multiple -e options may be given to build up a multi-line script.  Because most scripts use characters that\r\n           are special to many shell programs (for example, AppleScript uses single and double quote marks, ``('',\r\n           ``)'', and ``*''), the statement will have to be correctly quoted and escaped to get it past the shell\r\n           intact.\r\n\r\n",
      "created_at": "2017-01-27T00:59:43Z",
      "updated_at": "2017-01-27T00:59:43Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "@thezim good to know, thank you!\r\nI still think there is an issue, because it's super unintitive for me, why I need to escape these quotes, when the whole parameter is already wrapped in the single-quoted string.\r\n\r\nAlso it related to the pillar of \"making PS more compatible with existing shells to allow more commands work thru copy-paste\".",
      "created_at": "2017-01-27T01:16:33Z",
      "updated_at": "2017-01-27T01:16:33Z"
    },
    {
      "author": "thezim",
      "author_association": "CONTRIBUTOR",
      "body": "@vor I agree. I would prefer your example to work too.",
      "created_at": "2017-01-27T01:22:25Z",
      "updated_at": "2017-01-27T01:22:25Z"
    },
    {
      "author": "thezim",
      "author_association": "CONTRIBUTOR",
      "body": "Invoke-AppleScript would be a nice cmdlet for macOS. Following would lead me to believe is could be done.\r\n\r\nhttp://jonathanpeppers.com/Blog/xamarin-ios-under-the-hood-calling-objective-c-from-csharp\r\nhttps://docs.microsoft.com/en-us/dotnet/articles/standard/native-interop",
      "created_at": "2017-01-28T01:55:03Z",
      "updated_at": "2017-01-28T01:55:03Z"
    },
    {
      "author": "thezim",
      "author_association": "CONTRIBUTOR",
      "body": "@vors This works too.\r\n\r\n```powershell\r\n'display notification \"FOO\" with title \"TITLE\"' | osascript\r\n```",
      "created_at": "2017-01-28T02:00:36Z",
      "updated_at": "2017-01-28T02:00:36Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Repro (using test code in our repo):\r\n```\r\nPS> cd test/tools/EchoArgs\r\nPS> dotnet run 'a \"b\" c'\r\nArg 0 is <a b c>\r\nPS> bash\r\n$ dotnet run 'a \"b\" c'\r\nArg 0 is <a \"b\" c>\r\n```",
      "created_at": "2017-01-28T02:30:23Z",
      "updated_at": "2017-01-28T02:30:23Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Note that the behavior is consistent with Windows, but maybe it shouldn't be.",
      "created_at": "2017-01-28T02:31:09Z",
      "updated_at": "2017-01-28T02:31:09Z"
    },
    {
      "author": "DemiMarie",
      "author_association": "NONE",
      "body": "Why is it this way on Windows?  If I recall correctly, this behavior was a major annoyance.",
      "created_at": "2017-02-03T20:08:12Z",
      "updated_at": "2017-02-03T20:08:12Z"
    },
    {
      "author": "TSlivede",
      "author_association": "NONE",
      "body": "Correct me if I'm wrong, but isn't this a duplicate of https://github.com/PowerShell/PowerShell/issues/1995 ?\r\n\r\n@lzybkr I think it absolutely must be consistent with Windows, but double escaping should not be necessary on any platform.",
      "created_at": "2017-02-08T14:10:24Z",
      "updated_at": "2017-02-08T14:10:24Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@vors Note that in the workaround on macOS, the double quotes are being escaped with '\\'. PowerShell doesn't treat \\ as the escape character so clearly osascript is doing it's own escape processing. \r\n@lzybkr the value of argv[0] is exactly what I'd expect it to be. Since windows CreateProcess passes arguments as a simple string, process startup code needs to break that string up into individual arguments. It does this by processing the quotes that are passed, doing quote removal for string arguments.",
      "created_at": "2017-02-17T20:29:03Z",
      "updated_at": "2017-02-17T20:29:03Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@BrucePay - The annoyance is that calling a process differs from calling a command:\r\n\r\n```\r\n#437 PS> function myechoargs { for($i = 0; $i -lt $args.Length; $i++) { \"arg ${i}: <$($args[$i])>\"}}\r\n#438 PS> myechoargs 'a \"b\" c'\r\narg 0: <a \"b\" c>\r\n#439 PS> echoargs.exe 'a \"b\" c'\r\narg 0: <a b c>\r\n```\r\n\r\nAdd to this - the behavior of bash differs from windows - it is more like calling a script/function than an executable.\r\n\r\nI don't see a perfect solution. As I see it, the incompatible goals are:\r\n\r\n1. be more bash like\r\n2. be less surprising\r\n3. write portable PowerShell scripts\r\n4. not break existing PowerShell scripts\r\n\r\nPeople do find the behavior on Windows confusing.\r\nPeople do find many command lines for cmd/bash and should just work in PowerShell - this is one example where it doesn't.\r\n\r\nPowerShell Core could chose to break compatibility with Windows PowerShell to deliver on goals 1, 2, and 3.\r\nWe could make no changes, and we've delivered on 3 and 4.",
      "created_at": "2017-02-17T21:25:01Z",
      "updated_at": "2017-02-17T21:25:01Z"
    },
    {
      "author": "TSlivede",
      "author_association": "NONE",
      "body": "@BrucePay Although Windows does only send a single Commandline to the new Process, almost every CLI-App splits this Commandline according to [these](https://msdn.microsoft.com/en-us/library/17w5ykft.aspx) rules. Therefore Powershell should build the Commandline in a way, that matches those rules instead of just sometimes adding quotes around arguments.\r\nAlmost every other modern Commandshell on windows does this:\r\n- https://www.hamiltonlabs.com/Cshell.htm (not documented)\r\n- [Cygwin](https://cygwin.com/git/gitweb.cgi?p=newlib-cygwin.git;a=blob;f=winsup/cygwin/winf.cc;hb=HEAD) (see `linebuf::fromargv`)\r\n- [Python](https://svn.python.org/projects/python/trunk/Lib/subprocess.py) (see `list2cmdline`)\r\n- [Tcl](https://github.com/tcltk/tcl/blob/master/win/tclWinPipe.c) (see `BuildCommandLine`, Comment: \"N backslashes followed a quote -> insert N * 2 + 1 backslashes then a quote.\")\r\n\r\nPeople also expect this from Powershell. See:\r\n- [\"This seems like a bug to me. If I am passing the correct escaped strings to PowerShell, then PowerShell should take care of whatever escaping may be necessary for however it invokes the command.\"](http://stackoverflow.com/questions/6714165/powershell-stripping-double-quotes-from-command-line-arguments)\r\n- [\"... and I think this is a bug Powershell doesn't escape any double quotes that appear inside the arguments.\"](http://stackoverflow.com/a/21334121/2770331)\r\n\r\n@lzybkr I think `4.` is not really a Problem, as it never really worked on Windows and even changed from time to time. For example in Powershell on Windows 10 (PSVersion: 5.1.14393.693; PSEdition: Desktop; BuildVersion: 10.0.14393.693) it's completely impossible to send `a\"b c` to the `argv[1]` of the next Process via a normal call:\r\n- PS: `echoargs 'a\\\"b c'` -> Commandline: `\\path\\to\\echoargs.exe  a\\\"b c`\r\n- PS: `echoargs '\"a\\\"b c\"'` -> Commandline: `\\path\\to\\echoargs.exe  \"\"a\\\"b c\"\"`\r\n\r\nNecessary Commandline for `argv[1]`=`a\"b c`: `\\path\\to\\echoargs.exe  \"a\\\"b c\"`\r\nThe only option to accomplish this is via `--%`, but that gets really botched, if one needs to pass content from calculations or variables.",
      "created_at": "2017-02-17T22:10:31Z",
      "updated_at": "2017-02-17T22:10:31Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@TSlivede - I feel comfortable saying somebody depends on the current behavior.\r\n\r\nThat said, compatibility can't really be guaranteed (different runtimes amongst other big differences), so it's really a best effort.\r\n\r\nPersonally I'm in favor of the breaking change - far too many people avoid the easy way of running an external command because of issues like this.",
      "created_at": "2017-02-17T22:20:24Z",
      "updated_at": "2017-02-17T22:20:24Z"
    },
    {
      "author": "TSlivede",
      "author_association": "NONE",
      "body": "@vors asked in https://github.com/PowerShell/PowerShell/issues/1995 if anybody wants to start an RFC process.\r\nI wrote a draft, [here](https://github.com/TSlivede/PowerShell-RFC/blob/master/1-Draft/RFC%23%23%23%23-Improve-generation-of-argument-string-for-executables.md) it is.",
      "created_at": "2017-05-14T14:30:31Z",
      "updated_at": "2017-05-14T14:30:45Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Dupe of https://github.com/PowerShell/PowerShell/issues/1995",
      "created_at": "2017-05-24T14:47:28Z",
      "updated_at": "2017-05-24T14:47:28Z"
    },
    {
      "author": "jeff-hykin",
      "author_association": "NONE",
      "body": "For anyone looking for an essentially bulletproof workaround to the original issue, here's one:\r\n\r\n### Example Usage\r\n```powershell\r\nexecute osascript -e 'display notification \"FOO\" with title \"TITLE\"'\r\n\r\n# better/safer usage\r\nexecute 'osascript' '-e' 'display notification \"FOO\" with title \"TITLE\"'\r\n```\r\n\r\n### Code\r\n```powershell\r\n# example: execute 'echo' 'hello \"world\"' 'I am free \"finally don''t need to worry about escaping\"' \r\n# fixes: https://github.com/PowerShell/PowerShell/issues/3049\r\nfunction execute {\r\n    # \r\n    # argument processing\r\n    # \r\n    $all_args = $PsBoundParameters.Values + $args\r\n    \r\n    # \r\n    # escape all of them\r\n    # \r\n    $escaped_arg_string = \"&\"\r\n    $partly_escaped_arg = \"&\"\r\n    $is_first_arg = $true\r\n    ForEach ($item in $args) {\r\n        # single quotes escape everything... everything except \r\n        $escaped_item = $item\r\n        $escaped_item = ($escaped_item -replace \"'\", \"''\")\r\n        $escaped_twice_item = ($escaped_item -replace '\"', '\"\"')\r\n        \r\n        # the command name/path is handled different\r\n        if ($is_first_arg) {\r\n            $is_first_arg = $false\r\n            # powershell doens't escape the double quotes of the command name\r\n            # so we dont double escape them this one time\r\n            $escaped_twice_item = $escaped_item\r\n        }\r\n        $escaped_arg_string = $escaped_arg_string + \" '\" + $escaped_twice_item + \"'\"\r\n        # post-7.1\r\n        $partly_escaped_arg = $partly_escaped_arg + \" '\" + $escaped_item + \"'\"\r\n    }\r\n    \r\n    # all this because sometimes its an array, sometimes its not\r\n    $results = (Get-Command -CommandType \"All\" -Name $args[0] -ErrorAction SilentlyContinue).Source\r\n    if ($results -is [array]) {\r\n        $results = $results[0]\r\n    }\r\n    $main_item_source = $results\r\n    \r\n    # all this because sometimes its an array, sometimes its not\r\n    $results = (Get-Command -CommandType \"Application\" -Name $args[0] -ErrorAction SilentlyContinue).Source\r\n    if ($results -is [array]) {\r\n        $results = $results[0]\r\n    }\r\n    $main_application_source = $results\r\n    \r\n    # if on older version, note: https://github.com/PowerShell/PowerShell/issues/13089\r\n    # and if it is calling an Application (not a script/function)\r\n    if (($PSVersionTable.PSVersion) -lt ([version]\"7.2.0\") -and ($main_item_source -eq $main_application_source)) {\r\n        # use the fix\r\n        return (Invoke-Expression $escaped_arg_string)\r\n    # if on newer version or calling an Application\r\n    } else {\r\n        return (Invoke-Expression $partly_escaped_arg)\r\n    }\r\n}\r\n```\r\n\r\nThis should always escape the arguments correctly, even when taking into account the planned 7.2 change [here](https://github.com/PowerShell/PowerShell/issues/13089).\r\n\r\n### Comparison\r\n```powershell\r\n#\r\n# system echo (linux)\r\n#\r\n\r\n# broken version\r\n& '/bin/echo' 'hello \"world\"' 'I am free \"finally don''t need to worry about escaping\"'       \r\n# >>> hello world I am free finally don't need to worry about escaping\r\n\r\n# fixed version\r\nexecute '/bin/echo' 'hello \"world\"' 'I am free \"finally don''t need to worry about escaping\"' \r\n# >>> hello \"world\" I am free \"finally don't need to worry about escaping\"\r\n\r\n\r\n#\r\n# powershell's echo\r\n#\r\n\r\n# default behavior\r\n& 'echo' 'hello \"world\"' 'I am free \"finally don''t need to worry about escaping\"' \r\n# >>> hello \"world\"\r\n# >>> I am free \"finally don't need to worry about escaping\"\r\n\r\n# backwards compatible behavior (doesn't double-escape)\r\nexecute 'echo' 'hello \"world\"' 'I am free \"finally don''t need to worry about escaping\"' \r\n# >>> hello \"world\"\r\n# >>> I am free \"finally don't need to worry about escaping\"\r\n```",
      "created_at": "2021-05-09T00:19:58Z",
      "updated_at": "2021-05-09T00:25:10Z"
    }
  ],
  "created_at": "2017-01-25T23:34:42Z",
  "number": 3049,
  "state": "closed",
  "title": "double quotes in string literal arguments get removed when calling native commands",
  "updated_at": "2021-05-09T00:25:10Z"
}