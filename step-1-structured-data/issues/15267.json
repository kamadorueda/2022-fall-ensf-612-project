{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15267",
  "author": "Stroniax",
  "body": "## Summary of the new feature/enhancement\r\n\r\n<!-- \r\nA clear and concise description of what the problem is that the new feature would solve.\r\nTry formulating it in user story style (if applicable):\r\n'As a user I want X so that Y.' with X being the being the action and Y being the value of the action.\r\n-->\r\n\r\nFor many types, the path argument completion will never be useful. I have found myself wishing that I could define a default argument completer for a specific type. Any parameter of that type would use this as its argument completer, unless an argument completer was explicitly defined for the type.\r\n\r\nThe default argument completer should accept `ScriptBlock`, `IArgumentCompleter`, or `IArgumentCompleterFactory`.\r\n\r\n## Proposed technical implementation details (optional)\r\n\r\n<!--\r\nA clear and concise description of what you want to happen.\r\nConsider providing an example PowerShell experience with expected result.\r\n-->\r\n\r\nUse case would be similar to the following.\r\n```\r\nfunction Get-MyUser {\r\n    [OutputType([MyNamespace.MyUser])]\r\n   param(\r\n      [System.String]$UserName,\r\n      [MyNamespace.PhoneNumber]$PhoneNumber\r\n    )\r\n    process {\r\n        # call API to retrieve instance of MyNamespace.MyUser\r\n    }\r\n}\r\nUpdate-TypeData -TypeName MyNamespace.PhoneNumber -MemberType DefaultArgumentCompleter -Value ([MyNamespace.PhoneNumberCompleter])\r\n\r\n# Should have the same result as if the $PhoneNumber parameter was decorated with \r\n# [ArgumentCompleter([MyNamespace.PhoneNumberCompleter])]\r\nGet-MyUser -PhoneNumber <tab>\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "There is an issue to remove the file completion fallback and introduce new attribute for Path parameters so that explicitly mark parameters where file completion is useful.",
      "created_at": "2021-04-19T06:16:30Z",
      "updated_at": "2021-04-19T06:16:30Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "I like the idea. `DateTime` could have completions for `a day ago`, `two days ago` ... `a year ago` etc.",
      "created_at": "2021-04-19T06:59:23Z",
      "updated_at": "2021-04-19T06:59:41Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I definitely like the idea of type-level argument completers:\r\n\r\nTo paraphrase what you said in an earlier exchange:\r\n\r\n* Defining completions at the type level makes them automatically available to all functions / scripts that use that type to declare parameters, instead of having to decorate each parameter with `ArgumentCompleter()` or having to register command-specific completions with `Register-ArgumentCompleter`\r\n\r\n* If necessary, a parameter-specific `ArgumentCompleter()` / command[-and-parameter]-specific `Register-ArgumentCompleter` override can still be used.\r\n\r\n\r\n<details>\r\n<summary>Tangentially related thoughts about improving filename tab-completion.</summary>\r\n\r\n* The issue that asks for filename tab-completion _not_ to be applied to non-`[string]` (but specifically typed) parameters is #14147.\r\n\r\n* But, indeed, having a way to explicitly designate parameters as representing a PS provider path (of which _file-system_ paths are one example) and limiting filename completion to those would be even more helpful:\r\n  * https://github.com/PowerShell/PowerShell/issues/14745#issuecomment-776282779 proposes a `[PSPathInfo]` type that could also be used in parameter declarations to both provide useful functionality _and_ to signal the fact that it represents a provider path for the purpose of tab completion.\r\n  \r\n* For backward compatibility and as more helpful _fallback_ behavior, in case no other completer is in effect and the parameter is `[string]` or untyped:\r\n  * Applying filename completion could be _inferred_ from the  presence of the words `File` or `Path` in a parameter's _name_ (which wouldn't work for localized parameter names).\r\n  * Otherwise, use filename completion only if the user typed a `.` or `/` or, on Windows additionally something like `C:`, before pressing the Tab key.\r\n\r\n</details>\r\n",
      "created_at": "2021-04-20T13:40:34Z",
      "updated_at": "2021-04-20T17:04:45Z"
    },
    {
      "author": "Stroniax",
      "author_association": "NONE",
      "body": "I think there\u2019s too much focus on what I mentioned about the path argument completer. This suggestion isn\u2019t about removing it at all - I have no problem with it being a fallback, but for some types - when the only helpful completion is custom to the type - the only current options (`[ArgumentCompleter()]` and `Register-ArgumentCompleter`, which each apply to a single parameter of a single command at a time) don\u2019t provide a great way of doing this.",
      "created_at": "2021-04-20T14:27:29Z",
      "updated_at": "2021-04-20T14:34:56Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> I think there\u2019s too much focus\r\n\r\nThat's why I said \"tangent alert\"; it was in response to @iSazonov's mentioning of an existing issue re filename completion, which in turn was prompted by this statement in your initial post: \"for many types, the path argument completion will never be useful.\"\r\n\r\nBut, point taken, and I've hidden my tangential thoughts inside a collapsible element. Similarly, I encourage you to hide your previous comment, as I will hide this one.\r\n\r\n",
      "created_at": "2021-04-20T14:32:28Z",
      "updated_at": "2021-04-20T14:35:40Z"
    }
  ],
  "created_at": "2021-04-19T05:21:28Z",
  "number": 15267,
  "state": "open",
  "title": "TypeData member: DefaultArgumentCompleter",
  "updated_at": "2021-04-20T17:04:45Z"
}