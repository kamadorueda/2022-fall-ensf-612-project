{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7417",
  "author": "FriedrichWeinmann",
  "body": "Hi guys, got something weird going on here ...\r\nI'm currently playing with serialization of objects and there's something ... odd happening here with noteproperties on collections and wondered whether somebody knew what hit me and how to work around it.\r\n\r\nSetting up the collection:\r\n\r\n```powershell\r\n$list = 'a', 'b', 'c'\r\nAdd-Member -InputObject $list -MemberType NoteProperty -Name Foo -Value Bar\r\n```\r\n\r\nA simple array of three characters, then add some arbitrary property _to the collection_ .\r\nNow, if I export it using `Export-Clixml`, the added noteproperty will be correctly serialized as intended:\r\n\r\n```powershell\r\nExport-Clixml -InputObject $list -Path .\\test.xml\r\n```\r\n\r\nIf however I serialize the list using the PSSerializer, it will _not_ be part of the xml:\r\n\r\n```powershell\r\n[System.Management.Automation.PSSerializer]::Serialize($list)\r\n```\r\n\r\nWhat makes this so bloody confusing is that beneath the hood, both lead to the exact same serializer as far as I can see, called with the same constructor parameters.\r\n\r\nAnybody understand where the difference is coming from?\r\n\r\n> Note: I am aware that adding noteproperties to collection objects themselves is generally ... not an awesome idea. My current quest is knowledge on why it happens, because some of my users already use this and it works just fine on Export-Clixml, but not my custom tools\r\n\r\n> Note2: This behavior exists from the oldest PowerShell console I could scrap up into the latest PS6 build I have installed somewhere ...",
  "closed_at": "2018-08-06T05:14:21Z",
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Looks like method resolution is unwrapping the `PSObject` because the parameter type is `object`.  Here is proof/a workaround.\r\n\r\n```powershell\r\nusing namespace System.Linq.Expressions\r\nusing namespace System.Management.Automation\r\n\r\n$list = 'a', 'b', 'c'\r\nAdd-Member -InputObject $list -MemberType NoteProperty -Name Foo -Value Bar\r\n\r\n# Returns clixml for the BaseObject\r\n[System.Management.Automation.PSSerializer]::Serialize($list)\r\n\r\n# Create a delegate that takes a PSObject and passes it directly to Serialize,\r\n# bypassing PowerShell's argument conversion.\r\n$serializeMethodInfo = [PSSerializer].GetMethod('Serialize', [type[]][object])\r\n$parameter = [Expression]::Parameter([psobject], 'pso')\r\n$lambda = [Expression]::Lambda(\r\n    [Expression]::Call($serializeMethodInfo, $parameter),\r\n    $parameter)\r\n\r\n# Returns clixml for the PSObject, including the `Foo` property\r\n$lambda.Compile().Invoke($list)\r\n```",
      "created_at": "2018-08-01T12:58:08Z",
      "updated_at": "2018-08-01T12:58:08Z"
    },
    {
      "author": "FriedrichWeinmann",
      "author_association": "NONE",
      "body": "@SeeminglyScience thank you for that explanation and sample, makes sense and works perfectly! \ud83d\udc4d ",
      "created_at": "2018-08-06T05:14:21Z",
      "updated_at": "2018-08-06T05:14:21Z"
    }
  ],
  "created_at": "2018-07-31T21:20:10Z",
  "labels": [
    "Issue-Discussion",
    "Resolution-Answered",
    "WG-Cmdlets-Utility"
  ],
  "number": 7417,
  "state": "closed",
  "title": "Clixml Serialization Inconsistencies",
  "updated_at": "2018-08-06T06:03:29Z"
}