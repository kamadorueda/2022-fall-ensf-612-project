{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9927",
  "author": "vexx32",
  "body": "# Summary of the new feature/enhancement\r\n\r\nCurrently there are a couple ways to get a module root folder path:\r\n\r\n- One is $PSScriptRoot, but only reliably within the PSM1 itself; modules that separate functions out into other files and folders and import via dot-source can't use $PSScriptRoot directly.\r\n- Another is `$myinvocation.MyCommand.Module.ModuleBase` which suffers from being highly undiscoverable and messy to use. \r\n- A third possible option is to pull the PSModuleInfo of the desired module with Get-Module and check the ModuleBase property.\r\n\r\nIf we can add the $PSModuleRoot variable it will offer a very concise and reliable way to get this information without these methods.\r\n\r\n<!-- \r\nA clear and concise description of what the problem is that the new feature would solve.\r\nTry formulating it in user story style (if applicable):\r\n'As a user I want X so that Y.' with X being the being the action and Y being the value of the action.\r\n-->\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nWe need to ensure this value is accessible from both the module functions (regardless of if they're split out as separate files which get dot-sourced in the psm1) as well as the PSM1 itself.\r\n\r\nPossibly it should also be available in the PSD1 as one of the approved variables there?\r\n\r\n<!-- \r\nA clear and concise description of what you want to happen.\r\nConsider providing an example PowerShell experience with expected result.\r\n-->\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "I'm agree with this feature request, we can use $PSModuleRoot inside function and if functions are compiled in a one script module script, PSModuleRoot's value is still valid.\r\n\r\nAs a PowerShell developper, it will give me more flexibility when i begin a new module developpement.\r\n\r\n> Possibly it should also be available in the PSD1 as one of the approved variables there?\r\n\r\nI don't think $myinvocation.MyCommand.Module value is accessible when you parse the psd1 to load the module. $PSScriptRoot is not event necessary ( ./ is shorter )\r\n\r\n",
      "created_at": "2019-06-18T15:34:02Z",
      "updated_at": "2019-06-18T15:34:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It is not clear why we need this. What is the use cases? What is scenarios we need address?",
      "created_at": "2019-06-19T06:49:40Z",
      "updated_at": "2019-06-19T06:49:40Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Mainly, the ability to reference additional files kept in the module folder more easily. There are many such potential uses here: configuration files, additional libraries, script files (in the case of modules which lead their functions from individual files) etc.",
      "created_at": "2019-06-19T10:14:55Z",
      "updated_at": "2019-06-19T10:15:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> the ability to reference additional files kept in the module folder\r\n\r\nIt looks like .PSD1 is not functional enough to do the job. I would look how we can enhance the manifest \r\ninstead of hacks in code.",
      "created_at": "2019-06-19T10:41:39Z",
      "updated_at": "2019-06-19T10:41:39Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I don't think that's a complete solution, but it would certainly help. ",
      "created_at": "2019-06-19T11:49:13Z",
      "updated_at": "2019-06-19T11:49:13Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> > the ability to reference additional files kept in the module folder\r\n> \r\n> It looks like .PSD1 is not functional enough to do the job. I would look how we can enhance the manifest\r\n> instead of hacks in code.\r\n\r\nWhile I agree, that doesn't necessarily eliminate the need for something like this.  You probably wouldn't want anything loaded conditionally (or lazily) to be in the manifest for instance.\r\n\r\nThat said, I'm not sure how often it would be needed, and if that would be often enough to be warranted.  You can get the same effect by adding `$PSModuleRoot = $PSScriptRoot` in the `.psm1`.",
      "created_at": "2019-06-19T15:38:37Z",
      "updated_at": "2019-06-19T15:38:37Z"
    }
  ],
  "created_at": "2019-06-18T15:21:21Z",
  "labels": [
    "Issue-Enhancement"
  ],
  "number": 9927,
  "state": "open",
  "title": "Feature Request: $PSModuleRoot",
  "updated_at": "2019-06-19T15:38:37Z"
}