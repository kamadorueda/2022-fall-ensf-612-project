{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2381",
  "author": "Jaykul",
  "body": "Since [the Windows console now has 24bit color support](https://blogs.msdn.microsoft.com/commandline/2016/09/22/24-bit-color-in-the-windows-console/), it seems obvious to me that PowerShell needs to build support for that in the same release timeframe.\n\nAs a reminder, 24-bit color means 256 values each for red, green, blue -- without an alpha channel. \n\nFor the sake of argument, let's assume that at a minimum, Write-Host needs to support Foreground and Background colors as 24bit values ...\n## What should the syntax be for 24bit color?\n\nThe most obvious suggestion is the HTML `#rrggbb` syntax -- but that would be a comment. We could pass it as a quoted string, but we could also choose to accept simple unadorned `rrggbb` ... \n\nA richer choice would be to add a `[Color]` type, which would allow for syntax like: `[color]\"336699\"` or even RGB values like `[color](51, 102, 153)` or even `[color]@{h=210; s=50; l=40}` (all of which represent the same color)... \n\nAny other thoughts?\n## Where should colors work?\n\nThe most obvious place where this is _definitely_ needed is in the `Write-Host` command.\n\nHowever, I would also like support in the colors that are specified for `$Host.PrivateData` ... where I think it would be particularly helpful to be able to pick colors that **are not** one of the 16 colors, and of course, it would be wonderful if the core 16 colors could be available there as well, so that we could theme our console by just setting those values ;-)\n\nAdditionally, we need to be able to support colors in format files, perhaps we need foreground/background settings on the table/row/column/cell elements, or perhaps we just need a function like `Get-AnsiCode`, or a property on a type like the aforementioned `[Color]` so we could put the VT escape sequences into a string, like: `Write-Host \"$(([color](51, 102, 153)).Foreground)This is blue$([Color]::reset) and this isn't\"` ...\n\nFinally, many modules (like PSReadLine and PowerLine) need to support colors, and I would really like them to all support the same syntax for setting colors (and/or the same `Color` type).\n## Have I missed anything?\n\nIs there a better syntax? Other commands or classes that need colors? Do you wish I would just go off and do this in a module instead of asking for it in the core shell? Please speak up here!\n",
  "closed_at": "2021-11-12T16:00:47Z",
  "comments": [
    {
      "author": "bobfrankly",
      "author_association": "NONE",
      "body": "I feel like a [color] type supporting RGB and HSL would be the most functional option, and agree that Write-Host is the obvious target for this. I would already be using it if it was available.\n<img src=\"http://cultofthepartyparrot.com/parrots/boredparrot.gif\">\n",
      "created_at": "2016-09-28T23:48:23Z",
      "updated_at": "2016-09-28T23:48:23Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "This all looks pretty sound to me. Support casting multiple string and collection formats into a `[Color]` type. \n\nIf you're ready to implement this, @Jaykul, feel free to submit it as an RFC. \n",
      "created_at": "2016-09-29T01:53:50Z",
      "updated_at": "2016-09-29T01:53:50Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "If folks want to use 24-bit color with `Write-Host` then it seems that PowerShell and/or .NET Core would have to adapt.  Right now `System.ConsoleColor` is an enum defined as:\n\n```\n    [Serializable]\n    public enum ConsoleColor\n    {\n        Black = 0,\n        DarkBlue = 1,\n        DarkGreen = 2,\n        DarkCyan = 3,\n        DarkRed = 4,\n        DarkMagenta = 5,\n        DarkYellow = 6,\n        Gray = 7,\n        DarkGray = 8,\n        Blue = 9,\n        Green = 10,\n        Cyan = 11,\n        Red = 12,\n        Magenta = 13,\n        Yellow = 14,\n        White = 15\n    }\n```\n\nWhere the int values identify a index in the current 16-color palette for the console.  \n\nIn the blog post announcing 24-bit color support for the Windows Console, they mentioned they have not updated the Console property page to support 24-bit color yet.  It would be good to know what they have planned especially when it comes to surfacing this functionality through Win32 API and/or .NET Core.\n\nThat said, I could imagine new parameter sets on `Write-Host` with new parameters like `-Background` and `-Foreground` (or maybe `-Back/ForegroundTrueColor`) that are of type [System.Drawing.Color](https://github.com/dotnet/corefx/blob/93470c7590b38a509f0bcdd75ec2d7114da5f819/src/System.Drawing.Primitives/src/System/Drawing/Color.cs).  PowerShell already knows how to convert int values to that type:\n\n```\n97> [System.Drawing.Color]0xff0000\n\n\nR             : 255\nG             : 0\nB             : 0\nA             : 0\nIsKnownColor  : False\nIsEmpty       : False\nIsNamedColor  : False\nIsSystemColor : False\nName          : ff0000\n```\n\nAnd this type supports known color names:\n\n```\n98> [System.Drawing.Color]::AliceBlue\n\n\nR             : 240\nG             : 248\nB             : 255\nA             : 255\nIsKnownColor  : True\nIsEmpty       : False\nIsNamedColor  : True\nIsSystemColor : False\nName          : AliceBlue\n```\n\nIt has methods to return Hue, Saturation and Brightness.  Unfortunately, I don't see a ctor or static method to construct an object from those values.\n\nNow for coloring strings _not_ using Write-Host, then a class to help with the ANSI esc sequence would be very nice to have.  Not sure what exactly that would look like but we should take a peek to see what the folks in the node community (chalk, ansi-256-colors, ansi-escapes) have done.  I could see the community building modules to provide this functionality.  No need for integration into PowerShell Core AFAICT.\n",
      "created_at": "2016-09-29T02:03:51Z",
      "updated_at": "2016-09-29T02:03:51Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Doh! Looks like `System.Drawing.Color` is available only in .NET Core App >= 1.1.  I assume PowerShell Core is currently .NET Core App 1.0?\n",
      "created_at": "2016-09-29T02:08:42Z",
      "updated_at": "2016-09-29T06:00:04Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Also, FWIW I would want to specify unnamed colors like so `0xe90c1b` but I think it would be easy to make most approaches accept this as it _is_ the actual color value.\n",
      "created_at": "2016-09-29T02:12:17Z",
      "updated_at": "2016-09-29T02:12:36Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "I suppose that using the existing type (that most of us are familiar with) is worth putting up with the useless alpha value, especially since it can already cast `0xrrggbb` and names. \n\nI assume that PowerShell will update it's .Net Core eventually, but we _could_ always just copy the code from the [CoreFx repo](https://github.com/dotnet/corefx/blob/93470c7590b38a509f0bcdd75ec2d7114da5f819/src/System.Drawing.Primitives/src/System/Drawing/Color.cs). We could also add the type adapters or constructors or `From___` methods etc. -- there are MIT licensed conversion routines on [Colourful](https://github.com/tompazourek/Colourful) (and also [ColorMine](https://github.com/THEjoezack/ColorMine)).\n\nWe also need an XtermConsoleColor table. We could use that _in place of_ the ConsoleColor since the first 16 of the Xterm color table are the same as the basic 16 ... \n\nHowever, the crucial part is a we also need to be able to map RGB values to the XtermConsoleColors, and even to the basic 16, because, you know ... not every terminal supports full color. I have to think about how to do that right. [Colourful has a few difference implementations](https://github.com/tompazourek/Colourful/tree/master/src/Colourful/Difference), but this would need to be fast...\n\nAnd yes, @rkeithhill, there is, in fact, no API or anything that allows using the new colors in the Console currently, _except_ VT ANSI escape sequences ... and that's really the only way I can see to implement it in format files anyway -- unless we extend them to support a color attribute all over the place.\n\nI'm ok with that. In fact I have already used them in file table formats the hard way, and that's how I implemented colors for [PowerLine](/Jaykul/PowerLine) obviously.\n",
      "created_at": "2016-09-29T04:59:05Z",
      "updated_at": "2016-09-29T04:59:05Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@rkeithhill thanks for the heads up on Core's type. That seems like the way to go. \n\n> we _could_ always just copy the code from the CoreFx repo. \n\nI'd much rather we upgrade PowerShell Core to use .NET Core 1.1. Unless we're absolutely blocked and something is critical on a short time-span, we should avoid duplicating code as a general rule of thumb. \n",
      "created_at": "2016-09-29T16:32:57Z",
      "updated_at": "2016-09-29T16:32:57Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Regarding the Win32 API - we shouldn't care, it's not portable. That said, I believe the plan is no 24bit color support in the api, escapes sequences are the new api.\n\nThere is mapping support in `conhost` to support the screen scraping apis which only have 4 bit color support. Maybe it's possible to use that code somehow, but maybe the right api is to report errors if the terminal doesn't support the colors you ask for.\n",
      "created_at": "2016-09-29T17:59:18Z",
      "updated_at": "2016-09-29T17:59:18Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Well @lzybkr, I think the right thing to do is probably to (copy what chalk does in this situation and) [convert down](https://github.com/chalk/ansi-styles#256--16-million-truecolor-support). They use a javascript [color-convert](https://github.com/Qix-/color-convert) library for that, which has a [nice simple down-sampling algorithm](https://github.com/Qix-/color-convert/blob/master/conversions.js#L555).\r\n\r\nOr just borrow from [ObscureWare/Console.Core](https://github.com/ObscureWare/Console.Core)",
      "created_at": "2016-09-30T04:07:14Z",
      "updated_at": "2017-03-06T03:37:47Z"
    },
    {
      "author": "be5invis",
      "author_association": "NONE",
      "body": "@lzybkr \n\nJust a mention, Example code used to produce colors:\n\n``` C\nbool EnableVTMode()\n{\n    // Set output mode to handle virtual terminal sequences\n    HANDLE hOut = GetStdHandle(STD_OUTPUT_HANDLE);\n    if (hOut == INVALID_HANDLE_VALUE)\n    {\n        return false;\n    }\n\n    DWORD dwMode = 0;\n    if (!GetConsoleMode(hOut, &dwMode))\n    {\n        return false;\n    }\n\n    dwMode |= ENABLE_VIRTUAL_TERMINAL_PROCESSING;\n    if (!SetConsoleMode(hOut, dwMode))\n    {\n        return false;\n    }\n    return true;\n}\nint __cdecl wmain(int argc, WCHAR* argv[])\n{   \n    argc; // unused\n    argv; // unused\n    //First, enable VT mode\n    bool fSuccess = EnableVTMode();\n    if (!fSuccess)\n    {\n        printf(\"Unable to enter VT processing mode. Quitting.\\n\");\n        return -1;\n    }\n    int red = 0; // set these to whatever\n    int green = 0;\n    int blue = 0;\n    printf(\"\\x1b[38;2;%d;%d;%dm\", red, green, blue); // produces RGB foreground\n    printf(\"\\x1b[48;2;%d;%d;%dm\", red, green, blue); // produces RGB background\n\n    int index = 0;\n    printf(\"\\x1b[38;5;%dm\", index); // produces xterm color table index foreground\n    printf(\"\\x1b[48;5;%dm\", index); // produces xterm color table index background\n}\n```\n\ncc. @zadjii-msft\n",
      "created_at": "2016-10-26T08:06:19Z",
      "updated_at": "2016-10-26T08:17:16Z"
    },
    {
      "author": "zadjii-msft",
      "author_association": "NONE",
      "body": "Just to add my comments, I'm backing up @lzybkr on what he said. We're not going to extend the Console API to add support for this. That just creates another API that .NET and others would have to try and translate manually when they port to other platforms. Emitting VT sequences is the new standard for console features (and it has been for decades, Windows is finally on the train).\n\nIt's also notoriously tricky to determine what kind of actual color support a particular terminal provides. Most terminals set themselves as `TERM=xterm`, but then also support all the way to 24-bit color, while some applications like tmux only support 256color. I haven't found a good way to pick which of the sequences to go with, or determine what's possible, so I usually stick to just emitting xterm table sequences. \n\nThat's my 2 cents.\n",
      "created_at": "2016-10-27T16:10:48Z",
      "updated_at": "2016-10-27T16:10:48Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Hey, @lzybkr and @zadjii-msft -- I'm working on research for this, and was looking at related console APIs and the IShellLink API.\r\n\r\nDo either of you know if it's possible to determine (from within a PowerShell instance) whether a process was launched from a link or not, and if so, which link? That is, specifically, the \"link\" one was launched from, so as to change the properties (for future instances) the way the property dialog does?\r\n\r\nFor instance, [this MSDN page](https://technet.microsoft.com/en-us/library/mt427362.aspx) documents new shell features which have registry settings... _unless_ the shell was launched from a shortcut. How could I tell this was the case?",
      "created_at": "2017-03-07T03:24:46Z",
      "updated_at": "2017-03-07T03:24:46Z"
    },
    {
      "author": "zadjii-msft",
      "author_association": "NONE",
      "body": "@Jaykul I don't actually know if that's possible from within Powershell, though PS isn't really my area of expertise. @adiviness may know better if it's possible.\r\n\r\nFrom a cursory glance at the API, there's nothing that you can query if the properties at launch came from a link or the registry.  We only know at launch if we were launched from a link or not, but that value isn't exposed externally at all. Unless their's something else that powershell might expose, I'd guess it's not possible.",
      "created_at": "2017-03-07T18:15:05Z",
      "updated_at": "2017-03-07T18:15:05Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks @zadjii-msft that's what I figured. It just means that knowing when to customize the PowerShell shortcut in the start menu is a pain \ud83d\ude16",
      "created_at": "2017-03-07T20:12:40Z",
      "updated_at": "2017-03-07T20:12:40Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "The way console settings are persisted (registry, lnk) is a mess.  I wish the conhost.exe folks could come up with something more manageable.",
      "created_at": "2017-03-07T22:29:34Z",
      "updated_at": "2017-03-07T22:29:34Z"
    },
    {
      "author": "zadjii-msft",
      "author_association": "NONE",
      "body": "@rkeithhill We're very well aware of the mess. The problem is that there's not a clear solution - either we end up breaking a lot of people's workflows (bad) or we introduce another system for managing it ([relevant xkcd](https://xkcd.com/927/)). \r\n\r\nWe'd love to fix it. Absolutely. But it's a big problem and will likely not get prioritized for a while :(\r\n",
      "created_at": "2017-03-07T23:00:55Z",
      "updated_at": "2017-03-07T23:00:55Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Could **PowerShell 6** fix this problem by putting settings in the registry *instead of* in the shortcut, so there's only one source of truth (unless users modify the shortcut deliberately)? Or would using the property pages _still_ change the shortcut instead?",
      "created_at": "2017-03-08T01:08:59Z",
      "updated_at": "2017-03-08T01:09:42Z"
    },
    {
      "author": "zadjii-msft",
      "author_association": "NONE",
      "body": "@Jaykul Nope. The settings are handled by conhost itself, and they're persisted based on how you launched it.\r\n\r\nFor example, if you launch powershell by using Win+X, I (or Win+X, A), then no matter what, the settings are going to be saved to the shortcut. This is the same shortcut that (by default) is used for launching powershell from the start menu. Because these types of launches use the shortcut to launch, conhost will only ever put any changes back in that shortcut. It's not something that's configurable per-app. \r\n\r\nAnd no matter what, using Win+R \"powershell\" will persist to the registry, never knowing about the existence of that link.",
      "created_at": "2017-03-08T17:30:27Z",
      "updated_at": "2017-03-08T17:30:27Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Well that `splains why my registry-based conhost theming only seems to work via Win+R.  ",
      "created_at": "2017-03-08T17:36:15Z",
      "updated_at": "2017-03-08T17:36:15Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Can I submit my [Pansies module](https://github.com/poshcode/pansies) ([gallery](https://www.powershellgallery.com/packages/Pansies/1.0.0)) as a RFC? ;-) \r\n\r\nIt's purely about the user interface and how you can specify colors (and use them in format files), and I'm still thinking hard about how to make this work in down-level Windows *and* Linux when you only have 16 (or even 8?) colors. \r\n\r\nAnyway, my first few thoughts are in code at this point:\r\n\r\n- An RgbColor class for parameter types\r\n- A Text class that supports coloring so you can do it in format files\r\n- A rough version of Write-Host that uses the RgbColor and respects a static property that controls downsampling to xterm256 or the 16 console colors...\r\n\r\nNote that currently I'm using ColorMine, but that's purely for the fun of supporting color spaces -- in PowerShell we'd presumably only have RgbColor (and I would rebuild Pansies to use and extend that so you can do color space shifting and palette generating, etc).",
      "created_at": "2017-05-11T05:40:18Z",
      "updated_at": "2017-05-11T05:40:18Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "How do we perform feature detection to determine the underlying platforms capabilities?",
      "created_at": "2017-05-11T09:12:03Z",
      "updated_at": "2017-05-11T09:12:03Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@Jaykul - you can propose any RFC as you see fit, but I think in this area, the preference is not a new module, but new apis and parameters to existing cmdlets.\r\n\r\n@powercode - feature detection often isn't easy, sometimes impossible. Here's a good discussion for *nix platforms: https://gist.github.com/XVilka/8346728",
      "created_at": "2017-05-11T17:01:51Z",
      "updated_at": "2017-05-11T17:01:51Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr yeah -- I absolutely intend to put the RgbColor class into the core and update the relevant cmdlets. I just wanted a way to try out some ideas -- and in any case, I want a module for PS5 where I expect I'll still be spending most of my day, for a while :wink:\r\n\r\n@powercode Currently I'm not even trying to do feature detection. I just put a static property in that you can set. My intention is to change the _default_ based on testing the OS, but allow you to change either the static property or an environment variable.\r\n\r\nWindows would default to 16 except on Windows 10: build 1607 (AU) 256color, build 1703 (CU) 24bit.\r\nLinux and OSX would probably default to 256 colors.  Not totally sure whether it's worth checking for an environment variable like `$Env:TERM` or just using a preference variable like `$PSColorDepth`.",
      "created_at": "2017-05-13T04:31:27Z",
      "updated_at": "2017-05-13T04:31:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Related https://github.com/PowerShell/PowerShell/issues/3611",
      "created_at": "2017-05-13T14:46:38Z",
      "updated_at": "2017-05-13T14:46:38Z"
    },
    {
      "author": "zadjii-msft",
      "author_association": "NONE",
      "body": "@Jaykul actually, just to be clear, I don't think 1607 supported 256 color. We had a dumb translator from 256/rgb to the 16 color table, but real support for both 256color and 24 bit came with the Creator's Update, 1703.",
      "created_at": "2017-05-15T16:32:58Z",
      "updated_at": "2017-05-15T16:32:58Z"
    },
    {
      "author": "9Rune5",
      "author_association": "NONE",
      "body": "I recently had to reacquaint myself with bash, and to my delight discovered a repository of colours for various file extensions: https://github.com/trapd00r/LS_COLORS\r\n\r\nI'd love to see support for that in PS, even if it is limited to \"only\" 256 colours. OTOH, I'm sure a converter would be easy to implement, no matter what scheme you guys land on. ",
      "created_at": "2018-06-06T08:31:07Z",
      "updated_at": "2018-06-06T08:31:07Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "@9Rune5 This exists.  Install the `DirColors` module for the PSGallery.  It even supports a LS_COLORS style configuration.",
      "created_at": "2018-06-06T14:34:10Z",
      "updated_at": "2018-06-06T14:34:10Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "UPDATE: As of Windows 10 build 18298, when you open the properties page of any Console window, you\u2019ll notice [an additional \u201cTerminal\u201d tab](https://blogs.msdn.microsoft.com/commandline/2018/12/10/new-experimental-console-features/) -- which among other things, allows one to set the _default_ ForegroundColor and BackgroundColor to RGB values which are _separate_ from the 16 color \"ConsoleColor\" palette.\r\n\r\nIf these are set, then the PowerShell `$Host.UI.RawUI` values `BackgroundColor` and  `ForegroundColor` are just plain wrong, and basically impossible to get right, since they only allow setting to ConsoleColor values (i.e. 0-16)\r\n\r\nBy adding this setting, the Windows team has really thrown down the gauntlet on support for VT and RGB values instead of ConsoleColors -- there's no possible value for the current `[ConsoleColor]` properties that won't be wrong.",
      "created_at": "2018-12-11T04:43:38Z",
      "updated_at": "2018-12-11T04:43:38Z"
    },
    {
      "author": "ExE-Boss",
      "author_association": "NONE",
      "body": "I use the [Pansies](https://github.com/PoshCode/Pansies) module, which allows for using objects to\u00a0store ANSI escape sequence data.",
      "created_at": "2019-04-19T00:25:49Z",
      "updated_at": "2019-04-19T00:25:49Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "@joeyaiello regarding your comments on the community call -- color is **NOT** something you can leave to the terminal. The terminal is built on top of the console. It supports and uses RGB color values and the XTerm 216-color (web-safe palette) but there's no API for them except VT escape sequences.\r\n\r\nPowerShell currently only supports the base 16 \"ConsoleColors\" for any of it's color parameters and properties, and switching to RGB requires using the VT escape sequences, which is not backwards-compatible with older versions of Windows.\r\n\r\nFor instance, see what happens when the default foreground color is changed, in my stream:\r\nhttps://www.twitch.tv/videos/424738436?t=00h05m36s",
      "created_at": "2019-05-16T17:23:01Z",
      "updated_at": "2019-05-16T17:27:52Z"
    },
    {
      "author": "Delta456",
      "author_association": "NONE",
      "body": "Currently with the latest release of Powershell 7. I can do 24 bit color via `echo` but it doesn't via `os.system` function of Python or `print()`.\r\n\r\n![pwsh_community](https://user-images.githubusercontent.com/28479139/95671872-3c181a80-0bb9-11eb-806d-ea0c18a36730.png)\r\n\r\nI am working on Powershell 7 24 bit support of my [module](https://github.com/Delta456/box-cli-maker) and I am stuck on this limitation :c Will love to see this fully supported.",
      "created_at": "2020-10-11T06:31:25Z",
      "updated_at": "2020-10-11T06:31:25Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Given that the new `$PSStyle` in 7.2 supports generating VT sequences for RGB color representation, can we consider this feature request done? /cc @SteveL-MSFT \r\nExample:\r\n\r\n![image](https://user-images.githubusercontent.com/127450/141204188-8585b444-57c9-4350-9cff-7470aab3fad2.png)\r\n",
      "created_at": "2021-11-10T22:29:52Z",
      "updated_at": "2021-11-10T22:29:52Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "> Given that the new `$PSStyle` in 7.2 supports generating VT sequences for RGB color representation, can we consider this feature request done?\r\n\r\nSure. It's not (in my opinion) a great implementation, still does not feel fully featured -- but since it's released, obviously the answer to how PowerShell will support color is:\r\n1. There is a built-in `$PSStyles` object with Foreground and Background properties that have nested `FromRgb` helper functions to generate full RGB ANSI escape sequences...\r\n2. The built-in `$PSStyles` object includes a few hashtables of arbitrary colors they can theme\r\n3. Users can figure out whether their terminal supports full RGB, 16 colors, or 256 colors and set `$PSStyle` colors appropriately as they wish in their profile on every load.\r\n\r\nIt could be **a lot** more usable. In particular, burying the support for `FromRgb` in properties of the $PSStyle object is obscure, and not supporting that syntax directly on `Write-Host` is disappointing, and I'm frustrated that you **broke all existing code** that changed colors on warnings/errors etc. #16441",
      "created_at": "2021-11-11T04:35:55Z",
      "updated_at": "2021-11-11T04:41:05Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as fixed and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2021-11-12T16:00:46Z",
      "updated_at": "2021-11-12T16:00:46Z"
    }
  ],
  "created_at": "2016-09-28T23:37:55Z",
  "labels": [
    "WG-Interactive-Console",
    "Up-for-Grabs",
    "Issue-Discussion",
    "Resolution-Fixed"
  ],
  "number": 2381,
  "state": "closed",
  "title": "Discussion: PowerShell needs to support 24bit color. Where? How?",
  "updated_at": "2021-11-12T16:00:49Z"
}