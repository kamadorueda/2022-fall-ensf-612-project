{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10511",
  "author": "Zastai",
  "body": "# Steps to reproduce\r\n1. Open an ssh connection using PuTTY (keypad setting is \"Normal\", login shell is bash)\r\n2. Ensure the numeric keypad works (`0`-`9`, `/*-+.` and `Enter`)\r\n3. Run pwsh\r\n4. Try the numeric keypad keys again\r\n5. Exit pwsh (whether via `Ctrl-D` or `exit`)\r\n6. Try the numeric keypad keys once more\r\n\r\n# Expected behavior\r\n\r\n1. Keypad keys work the same in pwsh as in bash (just like they do in ksh, dash, ...)\r\n2. Keypad keys still work when returning to bash from pwsh\r\n\r\n# Actual behavior\r\n\r\n1. Only the `Enter` key works normally. `/*-` do nothing, `+` inserts `l`, and `0`-`9` insert `p`-`y`.\r\n2. All keypad keys (including `Enter` are non-functional in bash when returning from pwsh.\r\n\r\nThat PowerShell doesn't handle the keypad is one thing, but that it messes it up for everyone else is Real Bad(tm). It also means that it's not a case of just reading things differently - it seems to be changing the tty's mode without changing it back on exit.\r\n\r\n# Environment data\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.2\r\nPSEdition                      Core\r\nGitCommitId                    6.2.2\r\nOS                             Linux 4.19.0-5-amd64 #1 SMP Debian 4.19.37-3 (2019-05-15)\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-02-01T22:00:12Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Is it PSReadline issue?",
      "created_at": "2019-11-26T10:28:45Z",
      "updated_at": "2019-11-26T10:28:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @daxian-dbw ping",
      "created_at": "2020-01-31T11:51:23Z",
      "updated_at": "2020-01-31T11:51:23Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "This is an issue in .NET Core, as `Console.ReadKey()` generates unexpected `ConsoleKeyInfo` for key pressing from numeric keypad when ssh'ed through PuTTY.\r\nFor example, you will the following when pressing `0` on the numeric keypad:\r\n```\r\nPS:1> [System.Console]::ReadKey()\r\nO\r\nKeyChar Key  Modifiers\r\n------- ---  ---------\r\n      O   O Alt, Shift\r\n```\r\n>That PowerShell doesn't handle the keypad is one thing, but that it messes it up for everyone else is Real Bad(tm).\r\n\r\nIt's messed up by the .NET Core runtime. As soon as you start any dotnet application, you will be left in this \"Real Bad\" situation.\r\nFor example, just run `pwsh -help`, which only prints out the help content and exit. Then you will find all keypad keys are non-functional in bash.\r\n\r\nOpened https://github.com/dotnet/runtime/issues/25735",
      "created_at": "2020-01-31T20:33:43Z",
      "updated_at": "2020-01-31T20:41:29Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as external and has not had any activity for **1 day**. It has been be closed for housekeeping purposes.",
      "created_at": "2020-02-01T22:00:11Z",
      "updated_at": "2020-02-01T22:00:11Z"
    }
  ],
  "created_at": "2019-09-11T13:50:37Z",
  "number": 10511,
  "state": "closed",
  "title": "PowerShell on (Debian) Linux messes up numeric keypad support",
  "updated_at": "2020-02-01T22:00:12Z"
}