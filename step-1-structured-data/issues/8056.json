{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8056",
  "author": "KirkMunro",
  "body": "## PR Summary\r\n\r\nIt is much easier to deal with asynchronous invocation of PowerShell using async and await, but the S.M.A.PowerShell class only exposes BeginInvoke and EndInvoke methods for async support. This PR adds 5 InvokeAsync overloads (one for each BeginInvoke method) to S.M.A.PowerShell to facilitate async invocation of PowerShell commands from .NET.\r\n\r\n## PR Checklist\r\n\r\n- [X] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [X] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [X] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [X] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [X] Issue filed - Issue link: https://github.com/PowerShell/PowerShell-Docs/issues/3129\r\n- **Testing - New and feature**\r\n    - [ ] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [ ] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2019-03-06T18:06:12Z",
  "comments": [
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Note that I have not added unit tests yet for this PR. I looked to see where BeginInvoke and EndInvoke were tested, and they are included as part of a Pester test; however, PowerShell does not support async/await, so Pester does not appear to be an appropriate test framework for these changes. Please identify how these new methods should be automatically tested. I haven't added C# unit tests to this repo yet, so I'm not sure how I should proceed. Thank you. ",
      "created_at": "2018-10-17T01:56:36Z",
      "updated_at": "2018-10-17T01:56:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@KirkMunro Have you any gists with demo? It would help to document the enhancement.",
      "created_at": "2018-10-17T07:07:40Z",
      "updated_at": "2018-10-17T07:07:40Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "I don't have examples showing how complicated this can be using BeginInvoke/EndInvoke, because I just went straight to defining these locally in projects where I have used async PowerShell invocation since they are just so much simpler, so I don't have a before/after example to show for comparison. Also, the code is so short, I'll just share it here instead of in a gist. Here's a snippet showing what use of this looks like when you want async invocation of PowerShell from a .NET assembly with these additional methods in place:\r\n\r\n```csharp\r\nusing (var ps = PowerShell.Create())\r\n{\r\n    ps.AddCommand(\"Connect-AzureRmAccount\")\r\n      .AddParameter(\"ServicePrincipal\")\r\n      .AddParameter(\"TenantId\", tenantName)\r\n      .AddParameter(\"Subscription\", subscriptionId)\r\n      .AddParameter(\"Credential\", credential);\r\n\r\n    var results = await ps.InvokeAsync();\r\n    // Process results\r\n}\r\n```",
      "created_at": "2018-10-17T11:46:16Z",
      "updated_at": "2018-10-17T11:46:16Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@KirkMunro You can add C# tests here: https://github.com/PowerShell/PowerShell/tree/master/test/csharp",
      "created_at": "2018-10-18T19:15:15Z",
      "updated_at": "2018-10-18T19:15:15Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee agree that we should expose a task model for async PowerShell, leaving implementation details to PR review",
      "created_at": "2018-10-24T22:43:36Z",
      "updated_at": "2018-10-24T22:43:36Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@BrucePay Can you please review the signature of the proposed task-based async APIs?\r\n\r\nIn committee's discussion on this, there are proposals that we might want to re-implement the async invocation in the task-based model instead of wrapping the `Begin/End Invoke`. But as long as the API signatures are reviewed and approved, I guess we can go with wrapping the existing async APIs for now, and replace the implementation of those task-based APIs at later time, if we want to.",
      "created_at": "2018-10-24T23:05:51Z",
      "updated_at": "2018-10-24T23:05:51Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Regarding c# unit tests, I didn't get to them before going on vacation this week, so I'll come back to this PR next week and catch up.",
      "created_at": "2018-10-27T00:27:16Z",
      "updated_at": "2018-10-27T00:27:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@powershell-maintainers The `test/csharp` folder is targeted as Linux-only tests. Suggestion is to put new tests in `test/xUnit/System.Management.Automation`. Sample https://github.com/iSazonov/PowerShell/tree/add-unicode3/test/xUnit/System.Management.Automation ",
      "created_at": "2018-11-05T07:25:23Z",
      "updated_at": "2018-11-05T07:25:23Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov I'll move the tests over. Thanks for letting me know the correct path for those tests.",
      "created_at": "2018-11-05T14:51:02Z",
      "updated_at": "2018-11-05T14:51:02Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Wait. @iSazonov, that path doesn't exist in master, so this is a new process then? How are tests under that path executed locally for verification?",
      "created_at": "2018-11-05T14:53:17Z",
      "updated_at": "2018-11-05T14:53:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@KirkMunro We haven't such tests at all.  And my question is for MSFT team where we should place these tests. I point my new unmerged code which have engine API xUnit tests too. I look how CoreFX places API tests and do the same.",
      "created_at": "2018-11-05T17:34:58Z",
      "updated_at": "2018-11-05T17:35:42Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Ok, thanks. I'll wait until the other maintainers discuss with you what should be done with these then, and follow the process accordingly.",
      "created_at": "2018-11-05T18:07:17Z",
      "updated_at": "2018-11-05T18:07:17Z"
    },
    {
      "author": "stale[bot]",
      "author_association": "NONE",
      "body": "This PR has been automatically marked as stale because it has not had activity in the last 30 days. It will be closed if no further activity occurs within 10 days.\nThank you for your contributions.\nCommunity members are welcome to grab these works.\n",
      "created_at": "2018-12-15T19:17:17Z",
      "updated_at": "2018-12-15T19:17:17Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@KirkMunro Looks like @iSazonov has created a place for the xUnit tests in #8356 \ud83d\ude04 ",
      "created_at": "2018-12-16T00:40:08Z",
      "updated_at": "2018-12-16T00:40:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Yes, binary tests was moved to new folder. Now all tests run parallel (excluding macOS).",
      "created_at": "2018-12-16T09:01:42Z",
      "updated_at": "2018-12-16T09:01:42Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Before I spend time creating unit tests, I'd like to get buy in from @BrucePay as @daxian-dbw requested above.",
      "created_at": "2018-12-17T15:40:42Z",
      "updated_at": "2018-12-17T15:40:42Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "https://github.com/PowerShell/PowerShell/pull/8056#issuecomment-432857764:\r\n> In committee's discussion on this, there are proposals that we might want to re-implement the async invocation in the task-based model instead of wrapping the `Begin/End Invoke`. But as long as the API signatures are reviewed and approved, I guess we can go with wrapping the existing async APIs for now, and replace the implementation of those task-based APIs at later time, if we want to.\r\n\r\n@BrucePay Can you please review the signature of the proposed task-based async APIs?\r\n",
      "created_at": "2019-01-10T03:39:56Z",
      "updated_at": "2019-01-10T03:39:56Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "@KirkMunro I added 'Work in progress / WIP' keyword to the subject. Please remove it when you think this PR is ready for another review round. Thanks.",
      "created_at": "2019-01-17T20:32:54Z",
      "updated_at": "2019-01-17T20:32:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "From @BrucePay \r\n> It would probably be (marginally) more efficient to implement them directly rather than on top of BeginInvoke/EndInvoke but that doesn't affect the APIs design.\r\n\r\nWe need to open new tracking issue to enhance async APIs.",
      "created_at": "2019-03-01T05:14:32Z",
      "updated_at": "2019-03-01T05:14:32Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "> \r\n> \r\n> You xUnit tests were failing in CIs. Please fix them. I'm also fine that you remove the xUnit tests for this PR.\r\n\r\nI removed them since they were just duplicates of the Pester tests, and I'm not set up at the moment to easily test C# Unit tests (hence the issues with the CI not working).",
      "created_at": "2019-03-04T00:44:52Z",
      "updated_at": "2019-03-04T00:44:52Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Pending any further feedback, I think this PR is good to go with enough tests to cover the new Async APIs well enough.",
      "created_at": "2019-03-04T00:52:47Z",
      "updated_at": "2019-03-04T00:52:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@KirkMunro Thanks for your contribution!",
      "created_at": "2019-03-06T18:42:42Z",
      "updated_at": "2019-03-06T18:42:42Z"
    }
  ],
  "created_at": "2018-10-17T01:54:23Z",
  "number": 8056,
  "state": "closed",
  "title": "Add 5 'InvokeAsync' overloads and 'StopAsync' to the 'PowerShell' type",
  "updated_at": "2019-03-11T21:26:15Z"
}