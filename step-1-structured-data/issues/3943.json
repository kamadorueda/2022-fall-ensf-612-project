{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3943",
  "author": "masaeedu",
  "body": "The raw text story in Powershell is kind of annoying right now. There's lots of gotchas with newlines and encodings, so a simple command like `type foo.txt > bar.txt` ends up turning into `type foo.txt | out-file -encoding ascii -nonewline bar.txt` (and I might still be missing some edge cases).\r\n\r\nIf an object isn't already a string array, I usually don't want it to be implicitly coerced into one, since:\r\n\r\n - This can be a lossy transformation, and can [introduce subtle data corruption](https://github.com/PowerShell/PowerShell/issues/2145)\r\n - I'm usually piping stuff from one file descriptor to another (exe to exe, stdout to exe, exe to stdin, etc.), so all the string encoding/decoding roundtrip does is slow things down\r\n\r\nIt would be useful if decoding I/O streams could be turned into an opt-in feature of certain operators and cmdlets, instead of being implicitly applied to every external data source. Specifically, the result of ``(echo.exe \"foo`nbar\").gettype()`` should be some kind of `Stream` type instead of a string array. \r\n\r\nWithout any other changes, this would massively break existing Powershell code that pipes to/from executables and files. However, it is possible to greatly mitigate this issue if the task of guessing a byte stream's encoding and splitting by newline is instead shifted to the pipe operator and cmdlets. In other words, while ``echo.exe \"foo`nbar\"`` is a stream, ``echo.exe \"foo`nbar\" | % { $_ }`` is still an array of lines, as in previous versions, and each `$_` is a string.\r\n\r\nPiping without decoding the stream can then be provided as an additional binary operator (perhaps `|>`). If the RHS of the expression is an invocation of an external process, the stream returned from the LHS should simply be fed into the stdin of the new process invocation. If the RHS is a cmdlet/function, the stream should be passed to it as some well-specified variable, similarly to how `$input` works now.",
  "closed_at": "2017-06-06T21:14:57Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I believe it is duplicate https://github.com/PowerShell/PowerShell/issues/1908 ",
      "created_at": "2017-06-06T12:48:06Z",
      "updated_at": "2017-06-06T12:48:06Z"
    },
    {
      "author": "masaeedu",
      "author_association": "NONE",
      "body": "@iSazonov Yup, dupe",
      "created_at": "2017-06-06T21:14:57Z",
      "updated_at": "2017-06-06T21:14:57Z"
    }
  ],
  "created_at": "2017-06-06T00:46:27Z",
  "labels": [
    "Resolution-Duplicate"
  ],
  "number": 3943,
  "state": "closed",
  "title": "Represent output from external executables as raw byte streams",
  "updated_at": "2017-06-06T21:14:57Z"
}