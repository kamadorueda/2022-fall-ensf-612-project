{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5007",
  "author": "alx9r",
  "body": "Steps to reproduce\r\n------------------\r\n\r\nCreate new file in ISE.  Save as `utf-8-bom.txt`.  Commit and push to github.  Download and inspect the file as follows:\r\n\r\n```powershell\r\n$content = Invoke-WebRequest https://raw.githubusercontent.com/alx9r/BootstraPS/master/Resources/utf-8-bom.txt |\r\n    % Content\r\n[int]$content[0]\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\n116\r\n```\r\n116 is the decimal integer representation of the charact \"t\".\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\n65279\r\n```\r\n\r\n65279 is the decimal integer representation of the Unicode byte order mark.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value                                           \r\n----                           -----                                           \r\nPSVersion                      6.0.0-beta                                      \r\nPSEdition                      Core                                            \r\nGitCommitId                    v6.0.0-beta.7                                   \r\nOS                             Microsoft Windows 6.3.9600                      \r\nPlatform                       Win32NT                                         \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                         \r\nPSRemotingProtocolVersion      2.3                                             \r\nSerializationVersion           1.1.0.1                                         \r\nWSManStackVersion              3.0                                             \r\n```\r\n",
  "closed_at": "2017-10-04T21:47:56Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Since the file has a BOM, the output should have a BOM, right?   The first file here is currently saved as UTF-8 w/ BOM and the second as UTF-8 no BOM:\r\n\r\n```powershell\r\nPS C:\\> [int](iwr https://raw.githubusercontent.com/PowerShell/PowerShell/master/test/powershell/Modules/\r\nMicrosoft.PowerShell.Utility/WebCmdlets.Tests.ps1).Content[0]\r\n65279\r\nPS C:\\> [int](iwr https://raw.githubusercontent.com/PowerShell/PowerShell/master/test/powershell/Modules/\r\nMicrosoft.PowerShell.Utility/Write-Error.Tests.ps1).Content[0]\r\n68\r\n```\r\n\r\nSeems to be working as expected to me?  Note that this test will fail in the future as we'll be converting all our sources on GitHub to have no BOM.",
      "created_at": "2017-10-04T21:05:31Z",
      "updated_at": "2017-10-04T21:06:21Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Hmm I can't repro this with the example provided either. \r\n\r\n```powershell\r\n$content = Invoke-WebRequest https://raw.githubusercontent.com/alx9r/BootstraPS/master/Resources/utf-8-bom.txt |\r\n% Content\r\n[int]$content[0]\r\n```\r\n\r\nIn windows 10 this is give me `65279`\r\n\r\nedit: oh, I see. I had it backwards. I thought they said the BOM was missing. This looks like it's working as intended to me.",
      "created_at": "2017-10-04T21:12:24Z",
      "updated_at": "2017-10-04T21:14:01Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@alx9r please add more details if you think it's behaving incorrectly.  Thanks!",
      "created_at": "2017-10-04T21:47:56Z",
      "updated_at": "2017-10-04T21:47:56Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "> Since the file has a BOM, the output should have a BOM, right?\r\n\r\nI suppose that depends on what, exactly, is meant by \"Content\" for a text file.  I don't have a strong opinion about whether \"Content\" should include the BOM when present or not.  I do feel fairly strongly, however, that the inclusion or exclusion of a BOM should be consistent across the PowerShell built-in APIs.  Consider that\r\n\r\n```PowerShell\r\n[System.IO.Path]::GetTempFileName() |\r\n    % {\r\n        Invoke-WebRequest https://raw.githubusercontent.com/alx9r/BootstraPS/master/Resources/utf-8-bom.txt -OutFile $_\r\n        [int](Get-Content $_)[0]\r\n    }\r\n```\r\noutputs 116.  In other words, if you download the file to the file system and retrieve it the \"Contents\" does not include a BOM but if you download the file to memory and inspect the \"Contents\" there is a BOM.  It seems like either both should include the BOM or neither should include the BOM.",
      "created_at": "2017-10-04T22:51:50Z",
      "updated_at": "2017-10-04T22:51:50Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "That's `Get-Content` not returning the BOM. The BOM should be there in the file:\r\n\r\n```powershell\r\nInvoke-WebRequest https://raw.githubusercontent.com/alx9r/BootstraPS/master/Resources/utf-8-bom.txt -OutFile c:\\temp\\utf-8-bom.txt\r\n$fileStream = [System.IO.FileStream]::new(\"c:\\temp\\utf-8-bom.txt\", \"Open\", \"Read\")\r\n[byte[]]$UTF8BOM = 0xEF, 0xBB, 0xBF\r\n[byte[]]$bytes = [byte[]]::New(3)\r\n$null = $fileStream.Read($bytes,0,$bytes.Length)\r\nCompare-Object $UTF8BOM $bytes -PassThru\r\n```\r\n\r\nThis should come back with no output if `$bytes` and `$UTF8BOM` are the same.\r\n\r\nYou can get it with `Get-Content` using `\u2013Encoding Byte`:\r\n\r\n```powershell\r\nInvoke-WebRequest https://raw.githubusercontent.com/alx9r/BootstraPS/master/Resources/utf-8-bom.txt -OutFile c:\\temp\\utf-8-bom.txt\r\n[byte[]]$UTF8BOM = 0xEF, 0xBB, 0xBF\r\n[byte[]]$bytes = Get-Content c:\\temp\\utf-8-bom.txt \u2013Encoding Byte -TotalCount 3\r\nCompare-Object $UTF8BOM $bytes -PassThru\r\n```\r\n",
      "created_at": "2017-10-04T23:15:43Z",
      "updated_at": "2017-10-04T23:19:05Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "@markekraus I think you've missed my point.  My point isn't about whether the BOM does or does not exist in the file's byte stream.  My point is that two built-in APIs treat BOM byte sequences that appear in the byte stream differently:\r\n\r\n* `Get-Content` omits the BOM character on decoding\r\n* `HtmlWebResponseObject.Content` includes the BOM character on decoding\r\n\r\nThe reason I opened this issue is that this inconsistency has consequences for user code.  The inconsistency means that user code has to handle the same file arriving by web request differently from reading it from the file system.",
      "created_at": "2017-10-05T01:23:09Z",
      "updated_at": "2017-10-05T01:23:09Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@alx9r we have two issues that I think addresses your valid concern.  One is for file encoding to default to UTF8NoBOM https://github.com/PowerShell/PowerShell/issues/4878, the second is for outputencoding to default to UTF8NoBOM https://github.com/PowerShell/PowerShell/issues/4681.  However, Invoke-WebRequest should return whatever the server returned so if it has a BOM, it should be there.",
      "created_at": "2017-10-05T01:28:26Z",
      "updated_at": "2017-10-05T01:28:26Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "I thought #4878 and #4681 would only alter the way files are encoded.  Am I misunderstanding those?  This issue is about decoding files.  I can't really control the encoding I encounter in files in the wild which is why consistent decoding matters. \r\n\r\n>...Invoke-WebRequest should return whatever the server returned so if it has a BOM, it should be there.\r\n\r\nThe Content property that `Invoke-WebRequest` returns is rather far from the \"whatever the server returned\":\r\n\r\n * the headers are stripped (compare with RawContent)\r\n * the byte stream is decoded to what seems to be a UTF-16-like .Net string\r\n\r\nIt seems strange to me to do all that and leave the byte order mark.  \r\n\r\nIf `Invoke-WebRequest` \"should return the server returned\" then by the same doctrine, `Get-Content` should return \"whatever is in the file\".  I don't think that makes sense in either case.",
      "created_at": "2017-10-05T01:53:55Z",
      "updated_at": "2017-10-05T01:53:55Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The `Content` property is the file that is being served which is what I meant by \"whatever the server returned\" which would not contain the headers.  The file contains a BOM (see my examples above).  In the case where the file itself doesn't contain a BOM, no BOM is returned.  Perhaps what you want is the ability to re-encode to some target encoding.",
      "created_at": "2017-10-05T05:41:57Z",
      "updated_at": "2017-10-05T05:41:57Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "It looks like the discrepancy between the decoding behavior of `Invoke-WebRequest` and `Get-Content` lies in the way that they decode the byte stream to a string.  Specifically, the difference is as follows:\r\n\r\n* the file contents read from the filesystem using `Get-Content` [is decoded](https://github.com/PowerShell/PowerShell/blob/c1c5344a8897262433141ecbc13bb06ac2c4bbef/src/System.Management.Automation/namespaces/FileSystemContentStream.cs#L884) by [`System.IO.StreamReader`](https://msdn.microsoft.com/en-us/library/system.io.streamreader(v=vs.110).aspx)\r\n* the file contents read from an http response using `Invoke-WebRequest` is decoded by the [PowerShell project's `StreamToString`](https://github.com/PowerShell/PowerShell/blob/d20d53eaacafd4645ea668bd46e62093d3f3e503/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/StreamHelper.cs#L362)\r\n\r\n`StreamReader` is aware of the byte-order mark and seems to honor endianness during conversion.  `StreamToString`, on the other hand, uses [`System.Text.Encoding`](https://msdn.microsoft.com/en-us/library/system.text.encoding(v=vs.110).aspx).  While `System.Text.Encoding` includes support for decoding different endianness, `StreamToString` does not interpret a byte order mark at the beginning of the stream to adjust the decoding to match.\r\n\r\n### Workaround\r\nByte-order mark aware conversion using `Invoke-WebRequest` and `System.IO.StreamReader` can be achieved as follows:\r\n\r\n```PowerShell\r\n$response = Invoke-WebRequest https://raw.githubusercontent.com/PowerShell/PowerShell/404e876740aa65b1bdd17ce614060eb88e3e7da9/test/powershell/Modules/Microsoft.PowerShell.Utility/WebCmdlets.Tests.ps1\r\n\r\n# this uses StreamToString which ignores the byte-order-mark, so it is the first character\r\n[int]$response.Content[0] # 65279\r\n\r\n# StreamReader interprets the byte-order-mark strips it, so the first character is the pound symbol\r\n[int][System.IO.StreamReader]::new($response.RawContentStream).ReadToEnd()[0] # 35\r\n```\r\n\r\n### Implications for Endianness Mismatch\r\n\r\nThere seems to be another implication to `Invoke-WebRequest`'s use of `StreamToString`.  Because `StreamToString` decodes without considering the byte-order-mark it should be expected that the `.Content` property of the object returned by `Invoke-WebRequest` would contain incorrect data in the case of an endianness mismatch between whatever computer wrote the file that is served to `Invoke-WebRequest` and the computer invoking `Invoke-WebRequest`.",
      "created_at": "2018-03-30T23:32:00Z",
      "updated_at": "2018-03-30T23:32:00Z"
    }
  ],
  "created_at": "2017-10-04T20:30:43Z",
  "number": 5007,
  "state": "closed",
  "title": "Invoke-WebRequest includes byte order mark in content for files encoded as UTF-8-BOM (a la ISE)",
  "updated_at": "2018-03-30T23:32:00Z"
}