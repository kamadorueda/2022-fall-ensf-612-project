{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11695",
  "author": "p0W3RH311",
  "body": "to create a variable inside a variable for example:\r\n\r\n```\r\n$a = 'a var'\r\n$b = 'a'\r\n```\r\n\r\n\r\nnext if we want to display variable a we use simply $a. but suppose we want display the content of variable a from variable b ? \r\n\r\n### steps to reprduce\r\n\r\n```\r\n$a = 'powershell'\r\n$b = 'a'\r\n$c = 'b'\r\n$d = 'c'\r\n\r\n\"$a\" # normal expansion \r\nInvoke-Expression \"`$$($b)\"\r\nInvoke-Expression ('$' + (Invoke-Expression \"`$$($c)\"))\r\nInvoke-Expression ('$' +  (Invoke-Expression ('$' + (Invoke-Expression \"`$$($d)\"))))\r\n```\r\n\r\n### actual behaviour\r\n\r\n```\r\npowershell\r\npowershell\r\npowershell\r\npowershell\r\n```\r\n\r\n\r\nit will be nice if we add for each expansion dollar $ example:\r\n\r\n```\r\n$a\r\n$$b\r\n$$$c\r\n$$$$d\r\n```",
  "closed_at": "2020-01-31T00:00:12Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "This already exists. You can use Get-Variable to retrieve a variable by name.\r\n\r\nI'm not sure I see how recursively resolving strings to variable names would be especially helpful, but I suppose in theory you could add a -Recurse switch to Get-Variable to do so.\r\n\r\nWithout a compelling reason to do so, though, and a thorough example, I can't say that I'd want this to be implemented, though. You can already implement your own recursive function to do something like this, so I don't see a great need to add something native to the language.\r\n\r\nLooking up all those variable references would almost certainly have a pretty hefty perf impact at scale, too. ",
      "created_at": "2020-01-27T20:43:52Z",
      "updated_at": "2020-01-27T20:43:52Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Agreed, and let's not forget that [`Invoke-Expression` should generally be avoided](https://blogs.msdn.microsoft.com/powershell/2011/06/03/invoke-expression-considered-harmful/); how to better communicate that to users is currently being discussed in #11662",
      "created_at": "2020-01-27T21:46:09Z",
      "updated_at": "2020-01-27T21:46:09Z"
    },
    {
      "author": "scriptingstudio",
      "author_association": "NONE",
      "body": "@p0W3RH311\r\n$a = 'a var'\r\n$b = '$a'\r\n$ExecutionContext.InvokeCommand.ExpandString($b)\r\n```\r\nfunction Expand-String ($template) {\r\n\t$ExecutionContext.InvokeCommand.ExpandString($template)\r\n}\r\n```",
      "created_at": "2020-01-28T05:12:37Z",
      "updated_at": "2020-01-28T07:05:22Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Good point, @scriptingstudio, that's a more flexible alternative to `Get-Variable b -ValueOnly` (while neither satisfies the recursive requirement, I, like @vexx32, think that's not worth providing as a built-in feature).\r\n\r\nYou may be interested in #11693, which suggests providing a (more sophisticated version of) `Expand-String` as an official cmdlet.",
      "created_at": "2020-01-28T13:46:18Z",
      "updated_at": "2020-01-28T13:46:18Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-01-31T00:00:11Z",
      "updated_at": "2020-01-31T00:00:11Z"
    }
  ],
  "created_at": "2020-01-27T19:37:18Z",
  "labels": [
    "Issue-Enhancement",
    "Resolution-Answered"
  ],
  "number": 11695,
  "state": "closed",
  "title": "support nested expansion for variable",
  "updated_at": "2020-01-31T00:00:12Z"
}