{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6714",
  "author": "mklement0",
  "body": "Note: This is technically a breaking change; if it is deemed too risky, keep it on file for PowerShell vNext.\r\n\r\nCurrently, output-to-file cmdlets such as `Out-File` and `Set-Content` do support wildcard expression passed to their `-Path` parameter.\r\n\r\nThis behavior is problematic in two respects:\r\n\r\n* Overwriting existing files should be a very deliberate act; the use of wildcards to target _whatever happens to match_  contradicts that.\r\n\r\n* The utility of targeting an output file implicitly by wildcard is very limited:\r\n\r\n   * If no existing file matches the wildcard expressions, an error occurs.\r\n   * If more than one file matches the wildcard expression, the behavior is _inconsistent_:\r\n       * With _some_ cmdlets, an error occurs (e.g., `Out-File`, `Export-FormatData`\r\n           * In other words: only if the wildcard expression happens to match _one_ existing file does the operation succeed - at which point the clearer and safer choice is to target that file with a _literal_ path.\r\n      * Other cmdlets (e.g.`Set-Content`) output to _all_ matching files, which is also problematic.\r\n\r\nErgo: output-to-file cmdlets should treat `-Path` as an alias of `-LiteralPath` (similar to how `-Path` in `New-Item` is effectively `-LiteralPath`).\r\n\r\nEnvironment data\r\n----------------\r\n\r\nWritten as of:\r\n\r\n```powershell\r\nPowerShell Core v6.0.2\r\n```\r\n",
  "closed_at": "2018-04-25T16:51:11Z",
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Wildcard use is very handy in interactive scenarios. In scripting scenarios, you can use -Literalpath to be precise and avoid wildcard processing. ",
      "created_at": "2018-04-24T02:17:02Z",
      "updated_at": "2018-04-24T02:17:02Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "While it makes sense to distinguish between interactive and script use with respect to _syntax_, I think extending that distinction to _features_ is problematic.\r\n\r\nYes, you can view doing something like\r\n\r\n```powershell\r\n'hi' | Set-Content *.txt\r\n```\r\n\r\nto overwrite _all_ `*.txt` files in the current folder as _convenient_, but I think of it as _risky_, and the use case strikes me as too exotic to outweigh the risks.\r\n\r\nAt the very least, all output-to-file cmdlets should act _consistently_ in such a scenario, in favor of the only-output-to-ONE-file behavior (as `Out-File` currently does) ; even documenting the differences won't do, in my opinion,  because it's just too hard to remember which cmdlet behaves how.\r\n",
      "created_at": "2018-04-24T03:01:15Z",
      "updated_at": "2018-04-25T15:56:04Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "The wildcard need not  be in the leaf of the path. Consider\r\n```\r\n'hi' | setcontent longdir*/foo.txt\r\n```\r\nI definitely agree that having `Set-Content` write to multiple files seems dubious at best.  @khansen00 may remember why we decided to do this.\r\n\r\nWildcard expansion everywhere is intended to mimic traditional shell behaviour. Since it was the shell that did expansion, commands had no control of it and the user had to do explicit quoting. Quoting wildcards in paths in PowerShell is problematic since the expansion is handled in the API, not the shell directly and so you have to double-quote all wildcards. This was such a pain we ended up adding `-LiteralPath` in V2 (not my favourite thing)\r\n \r\n\r\n",
      "created_at": "2018-04-24T16:18:21Z",
      "updated_at": "2018-04-24T16:18:21Z"
    },
    {
      "author": "ThreeFive-O",
      "author_association": "CONTRIBUTOR",
      "body": "I once started a similar discussion #3174 which was committee reviewed therefore.\r\n\r\nWhile my personal preference would be to treat them as literal paths, I think the current behavior is valid for scripting.\r\n\r\nHaving wildcard support for input and output even makes it more consistent.\r\n\r\nBUT, all cmdlets should behave the same! Apart from file path wildcards, literal paths should be available too. I would go as far to say -Path is ALWAYS with wildcard support and -LiteralPath is a mandatory override.\r\n\r\nI have lots of files with square brackets. The way PS handles paths with wildcards always gets me. But that was the initial design of PS and people are using it that way. Maybe something to re-consider in PS7 \ud83d\ude00",
      "created_at": "2018-04-24T21:10:29Z",
      "updated_at": "2018-04-24T21:10:29Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@BrucePay: Good point about the wildcard in a _directory_ component; that's perhaps a better use case.\r\n\r\nI'll close this issue to discuss the problematic `Set-Content` behavior separately.\r\n\r\n@ThreeFive-O:\r\n\r\n> BUT, all cmdlets should behave the same!\r\n\r\nAgreed.\r\n\r\n> -Path is ALWAYS with wildcard support and -LiteralPath is a mandatory override.\r\n\r\nThis distinction is worth observing in general, but there are exceptions, such as with `New-Item`, where wildcards aren't supported (and make no sense); however, `-LiteralPath` should be introduced as an _alias_ parameter name there.\r\n\r\n> The way PS handles paths with wildcards always gets me. But that was the initial design of PS and people are using it that way. Maybe something to re-consider in PS7\r\n\r\n@ThreeFive-O, @BrucePay:\r\n\r\nYes, the great `-LiteralPath` / `-Path` schism is unfortunate and a perennial pain point.\r\n\r\n>  so you have to double-quote all wildcards. \r\n\r\n@BrucePay, I assume you meant `` ` ``-escaping individual wildcard characters inside a _single_-quoted string or _doubly_ escaping them inside an _unquoted_ or _double-quoted_ string (the alternative is to use `[System.Management.Automation.WildcardPattern]::Escape()`):\r\n\r\n```powershell\r\nNew-Item -Type File 'tmp[a].txt'  # create file whose name *looks* like a wildcard pattern\r\n\r\n# BROKEN, because even though the path matches literally, it is interpreted as a wildcard pattern (by default, `-Path` implied).\r\n# What matters is what Get-Item ends up seeing *after* string expansion / quote removal.\r\nGet-Item tmp[a].txt    # same as: Get-Item -Path tmp[a].txt\r\nGet-Item 'tmp[a].txt'  # same\r\nGet-Item \"tmp[a].txt\"  # same\r\n\r\n# OK: All of the following target file 'tmp[a].txt' by its exact, literal name:\r\nGet-Item -Path        'tmp`[a`].txt' # Note the '...' and the individually `-escaped wildcard chars.\r\nGet-Item -Path        \"tmp``[a``].txt\" # Note the '\"...\" and the *doubly* individually `-escaped wildcard chars.\r\nGet-Item -Path         tmp``[a``].txt # ditto with no outer quoting, which is like implicit \"...\"\r\nGet-Item -LiteralPath  tmp[a].txt    # No quoting necessary\r\nGet-Item -Path ([System.Management.Automation.WildcardPattern]::Escape('tmp[a].txt')) # API use\r\n```\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-04-25T16:43:10Z",
      "updated_at": "2018-04-25T17:37:32Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Closed in favor of #6729.",
      "created_at": "2018-04-25T16:51:11Z",
      "updated_at": "2018-04-25T16:51:11Z"
    }
  ],
  "created_at": "2018-04-24T01:49:22Z",
  "labels": [
    "Issue-Discussion",
    "Resolution-Answered"
  ],
  "number": 6714,
  "state": "closed",
  "title": "Output-to-file cmdlets should not support wildcards with -Path",
  "updated_at": "2018-05-26T18:36:16Z"
}