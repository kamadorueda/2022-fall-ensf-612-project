{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11823",
  "author": "SeeminglyScience",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n0xACEDs\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\n-21267\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nParserError:\r\nLine |\r\n   1 |  0xACEDs\r\n     |         ~\r\n     | The numeric constant 0xACEDs is not valid.\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-rc.2\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-rc.2\r\nOS                             Microsoft Windows 10.0.18362\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-04-20T23:51:41Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The same in 7.0.0-preview.1.\r\nI wonder how we lost the test.",
      "created_at": "2020-02-11T09:27:14Z",
      "updated_at": "2020-02-11T09:28:54Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I could be misremembering, but to my memory, this behaviour was asked for by the PS team when I was implementing this feature.\r\n\r\nI didn't agree with it then, I don't agree with it now, and I'd very much like to have this work. IIRC the reasoning back then was effectively \"we shouldn't have hex parsing differ based on the type suffix\" or something along those lines. It's been a while, but that's what I can remember at the moment. The current parsing behaviour for hex literals mimics the pre-existing behaviour for parsing hex, where originally the `int.Parse()` and `long.Parse()` methods were used, which came with an implicit width restriction/assumption.\r\n\r\nGiven that yes, these will cause parse errors otherwise, I'm more than happy to go back and fix it if that's something folx want. It's certainly a more useful feature that way. \ud83d\ude42 ",
      "created_at": "2020-02-11T13:25:15Z",
      "updated_at": "2020-02-11T13:53:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 Can you point the PR or comment?",
      "created_at": "2020-02-11T15:26:09Z",
      "updated_at": "2020-02-11T15:26:09Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Would have been in #7993 somewhere I'd imagine. \ud83d\ude42 ",
      "created_at": "2020-02-11T16:08:54Z",
      "updated_at": "2020-02-11T16:08:54Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Historically (and somewhat counter-intuitively), suffix-less hex. literals are always parsed into _signed_ types, automatically chosen as either `[int]` or `[long]`, depending on whether the _bit pattern_ implied by the hex digits fits, which leads to surprising behavior such as the following:\r\n\r\n```powershell\r\nPS> 0x7fffffff\r\n 2147483647  # [int]\r\n\r\nPS> 0x80000000\r\n-2147483648  # bit pattern still fits into [int], but the result is now  a *negative* number\r\n```\r\n\r\nNow, if I'm _explicitly asking_ for a _signed_ type with suffix `S`,  I see no reason why the same bit-pattern logic should _not_ apply:\r\n\r\n```powershell\r\nPS> 0x7fffS\r\n32767\r\n\r\nPS> 0x8000S  # !! BOOM - even though the bit pattern clearly fits. \r\nThe numeric constant 0x8000S is not valid.\r\n```\r\n\r\n`0x8000S` should be the equivalent of `[int16]::Parse('8000', 'AllowHexSpecifier')`, which correctly yields `-32768` (and `[int16]::Parse('ACED', 'AllowHexSpecifier')` yields `-21267`, as requested in the OP).\r\n\r\n\r\n",
      "created_at": "2020-02-11T20:56:50Z",
      "updated_at": "2020-02-11T21:08:14Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Historically (and somewhat counter-intuitively), suffix-less hex. literals are always parsed into _signed_ types, automatically chosen as either `[int]` or `[long]`, depending on whether the _bit pattern_ implied by the hex digits fits, which leads to surprising behavior such as the following:\r\n> \r\n> ```powershell\r\n> PS> 0x7fffffff\r\n>  2147483647  # [int]\r\n> \r\n> PS> 0x80000000\r\n> -1  # bit pattern still fits into [int], but the result is now  a *negative* number\r\n> ```\r\n\r\nThe latter returns `-2147483648` FYI.  `0xFFFFFFFF` is `-1`.  I wouldn't call it surprising though, all literals are signed by default.\r\n\r\n**Edit**: Marking off-topic since it isn't really related to the issue.",
      "created_at": "2020-02-11T21:07:01Z",
      "updated_at": "2020-02-11T21:15:54Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Yeah, sorry about pasting the wrong result in my previous comment- fixed now.\r\n\r\n> I wouldn't call it surprising though,\r\n\r\nIt's surprising if you come from a C# background (or JavaScript, or Perl, or Bash, or ...), where hex literals are always _positive_ numbers, with _unsigned_ types chosen as needed (`0x80000000` -> `2147483648` (`[uint32]`).\r\n\r\nBut that was really just an aside, given that that ship has sailed a long time ago.\r\n\r\nAs is hopefully clear from my previous comment, I fully agree that parsing something like `0xACEDs` should work and should return `-21267`.",
      "created_at": "2020-02-11T21:12:03Z",
      "updated_at": "2020-02-13T02:52:10Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I have an implementation-based question... Currently whether a literal is considered signed or unsigned is literally a single boolean toggle switch when parsing the number.\r\n\r\nDo you think it makes sense to just assume a given hex literal is unsigned if the target type (specified by the type suffix) is an unsigned type (byte, ushort, ulong)?",
      "created_at": "2020-02-12T18:35:28Z",
      "updated_at": "2020-02-12T18:35:56Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "That makes sense to me, @vexx32; not having looked into the current implementation, I'm asking innocently: wouldn't `<targetType>.Parse(<input>, System.Globalization.NumberStyles.AllowHexSpecifier)` give us that desired behavior? (In the case of `U` you'd have to try `UInt32` first, and then retry with `UInt64`).",
      "created_at": "2020-02-13T02:58:56Z",
      "updated_at": "2020-02-13T02:58:56Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeap, but on the whole when working in that area of the code I found it was much easier to handle everything via BigInteger (where you have full control of whether a given literal is considered signed or not) than shuffling into different variables constantly, because as you alluded to, there are some cases where you have to automatically figure out the right type to use -- and when there's no suffix specified, it can be a bit tricky to try to juggle everything in separate types. \ud83d\ude42 ",
      "created_at": "2020-02-13T03:55:04Z",
      "updated_at": "2020-02-13T03:55:04Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I have submitted #11844 which will adjust the hex parsing to allow literals as described. \ud83d\ude42 ",
      "created_at": "2020-02-13T05:01:52Z",
      "updated_at": "2020-02-13T05:01:52Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #11844, which has now been successfully released as `v7.1.0-preview.2`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.2)\n",
      "created_at": "2020-04-23T18:03:11Z",
      "updated_at": "2020-04-23T18:03:11Z"
    }
  ],
  "created_at": "2020-02-10T18:22:59Z",
  "number": 11823,
  "state": "closed",
  "title": "Negative hex literal int16 throws parse error",
  "updated_at": "2020-04-23T18:03:11Z"
}