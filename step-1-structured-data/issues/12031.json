{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12031",
  "author": "DanteNahuel",
  "body": "\r\n\r\nSystem Details Output\r\n```\r\n### VSCode extensions:\r\neamodio.gitlens@10.2.1\r\nms-vscode.powershell@2020.1.0\r\nms-vscode.powershell-preview@2020.2.0    \r\nmsazurermtools.azurerm-vscode-tools@0.8.4\r\n\r\n\r\n### PSES version: 1.13.3.0\r\n\r\n### PowerShell version:\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0\r\nOS                             Microsoft Windows 10.0.18362\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n### Issue Description\r\n\r\nWhen trying to use Windows Forms in a Powershell script I get errors that I don't get when running the same script/lines in Powershell ISE\r\n\r\n#### Expected Behaviour\r\n\r\nRunning this:\r\n```\r\n# Init PowerShell Gui\r\nAdd-Type -AssemblyName System.Windows.Forms\r\n\r\n# Create a new form\r\n$LocalForm                    = New-Object system.Windows.Forms.Form\r\n\r\n# Define the size, title and background color\r\n$LocalForm.ClientSize         = '500,300'\r\n$LocalForm.text               = \"LazyAdmin - PowerShell GUI Example\"\r\n$LocalForm.BackColor          = \"#ffffff\"\r\n\r\n# Display the form\r\n[void]$LocalForm.ShowDialog()\r\n```\r\nShould run smoothly without any errors.\r\n\r\n#### Actual Behaviour\r\n\r\nHowever, I get the following errors:\r\n```\r\n\r\nSetValueInvocationException:\r\nLine |\r\n   8 |  $LocalForm.ClientSize         = '500,300'\r\n     |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     | Exception setting \"ClientSize\": \"Cannot convert the \"500,300\" value of type \"System.String\" to type \"System.Drawing.Size\".\"\r\n\r\nSetValueInvocationException:\r\nLine |\r\n  10 |  $LocalForm.BackColor          = \"#ffffff\"\r\n     |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     | Exception setting \"BackColor\": \"Cannot convert the \"#ffffff\" value of type \"System.String\" to type \"System.Drawing.Color\".\"\r\n```\r\n\r\nI get it to work with the following changes :\r\n```\r\n$LocalForm.ClientSize         = New-Object System.Drawing.Size(500,300)\r\n$LocalForm.text               = \"Azure VM Decommission\"\r\n$LocalForm.BackColor          = [System.Drawing.Color]::White\r\n\r\n```\r\n\r\nNotice that if I tried to use:\r\n`$LocalForm.BackColor          = New-Object System.Drawing.Color(\"White\")\r\n`\r\nI would get:\r\n` A constructor was not found. Cannot find an appropriate constructor for type System.Drawing.Color.`\r\n\r\nSo I had to use\r\n`$LocalForm.BackColor          = [System.Drawing.Color]::White`\r\n\r\n\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @TylerLeonhardt Have you any thoughts about the issue?",
      "created_at": "2020-03-05T16:12:49Z",
      "updated_at": "2020-03-05T16:12:49Z"
    },
    {
      "author": "TylerLeonhardt",
      "author_association": "MEMBER",
      "body": "@DanteNahuel do you get the same result running your code in a PowerShell 7 console outside of VS Code? ",
      "created_at": "2020-03-05T16:22:30Z",
      "updated_at": "2020-03-05T16:22:30Z"
    },
    {
      "author": "DanteNahuel",
      "author_association": "NONE",
      "body": "@TylerLeonhardt \r\nIndeed, same errors.",
      "created_at": "2020-03-05T17:00:41Z",
      "updated_at": "2020-03-05T17:00:41Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "This seems to be a type system thing; PowerShell isn't automatically processing the type lookup to coerce the constructor arguments to constructor calls.\r\n\r\nIn the case of `System.Drawing.Size` there is a constructor, so I wonder if this occurs because it's a struct.\r\n\r\nIn the case of `System.Drawing.Color`, there's no constructor but there is a [ColorConverter](https://docs.microsoft.com/en-us/dotnet/api/system.drawing.colorconverter?view=netframework-4.8).\r\n\r\n@SteveL-MSFT and @daxian-dbw and possibly @vexx32 might know if changes have been made for coercions relating to this.",
      "created_at": "2020-03-05T17:38:30Z",
      "updated_at": "2020-03-05T17:38:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Sorry, It is known issue in .Net Core 3.1 and we get the fix with .Net Core 5.0 only. See #10869",
      "created_at": "2020-03-05T17:41:55Z",
      "updated_at": "2020-03-05T17:41:55Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I wonder if it's related to the TypeConverter changes that we ran into before with some of the `System.Drawing.Point` casts from string?",
      "created_at": "2020-03-05T17:44:15Z",
      "updated_at": "2020-03-05T17:44:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 In the repo is a link to .Net Core 3 code where we can see full list affected Type converters.",
      "created_at": "2020-03-05T17:53:00Z",
      "updated_at": "2020-03-05T17:53:00Z"
    },
    {
      "author": "DanteNahuel",
      "author_association": "NONE",
      "body": "@iSazonov so there's no fix currently?\r\nOr do we fix it by installing .net core 5.0 in the running system?\r\nI'm sorry if this is a silly question, I'm very new to Dev\r\n\r\nedit: I stand corrected. There's no current Net Core 5.0 available\r\nSo I assume there's no fix for this if I'm running PS 7?",
      "created_at": "2020-03-05T18:08:42Z",
      "updated_at": "2020-03-05T18:12:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@DanteNahuel While I am working on fix .Net Core team fixed this for 5.0 and I stopped my work.\r\n\r\nYes, we get 5.0 release in October.\r\n \r\nI still have no understanding how we could move PS 7.1 to .Net 5.0 since it is not LTS. So MSFT team should make a conclusion about #10869 /cc @SteveL-MSFT ",
      "created_at": "2020-03-05T18:27:41Z",
      "updated_at": "2020-03-05T18:27:41Z"
    },
    {
      "author": "DanteNahuel",
      "author_association": "NONE",
      "body": "@iSazonov  so even if .Net Core 5.0 releases in October, PS 7.1 has yet to use it?\r\nSo this could be a long lasting bug?\r\nThat's bad...Not having an easy, linear way of using WinForms in new scripts is bad enough, but not having backwards compatibility for this functionality is huge. ",
      "created_at": "2020-03-05T18:35:24Z",
      "updated_at": "2020-03-05T18:35:24Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> PS 7.1 has yet to use it\r\n\r\nPS 7.1 will use it, but PS 7 set to the LTS channel won't get that update",
      "created_at": "2020-03-05T18:37:32Z",
      "updated_at": "2020-03-05T18:37:32Z"
    },
    {
      "author": "DanteNahuel",
      "author_association": "NONE",
      "body": "@rjmholt so the only workaround is the way I did it?\r\nNew-Object System.Drawing.Font(\"Microsoft Sans Serif\",13)\r\nand\r\n[System.Drawing.Color]::White\r\n?\r\n",
      "created_at": "2020-03-05T18:41:05Z",
      "updated_at": "2020-03-05T18:41:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "#10869 is not a breaking change and could be in 7.0 as servicing update otherwise we will get many feedback about issues with WinForms.",
      "created_at": "2020-03-05T18:53:59Z",
      "updated_at": "2020-03-05T18:53:59Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> not having backwards compatibility for this functionality is huge.\r\n\r\nUnfortunately type-level APIs like this are out of our control; we rely on .NET's implementation completely.\r\n\r\nIt may turn out that this is something we can fix in PowerShell, but there are some things that are changed at the fundamental .NET layer.\r\n\r\n> so the only workaround is the way I did it?\r\n\r\nIf you're targeting 5.1 I'd recommend:\r\n\r\n```powershell\r\n[System.Drawing.Font]::new(\"Microsoft Sans Serif\", 13)\r\n```\r\n\r\nBut the `New-Object` syntax is compatible with PowerShell 3 and up (compared to 5 and up), so it depends on the versions you're targeting.\r\n\r\nConverting scripts to that syntax will work will all PowerShells.\r\n\r\nIs there another kind of workaround you're looking for?",
      "created_at": "2020-03-05T18:56:29Z",
      "updated_at": "2020-03-05T18:56:29Z"
    },
    {
      "author": "DanteNahuel",
      "author_association": "NONE",
      "body": "@rjmholt No, no, I understand this is completely dependant on .Net's implementation since it's an API call. But it still a big deal.\r\nThat workaround works, but the main problem is that the code is inconsistant which makes it a lot harder to read. ",
      "created_at": "2020-03-05T19:44:23Z",
      "updated_at": "2020-03-05T19:44:23Z"
    }
  ],
  "created_at": "2020-03-05T15:28:40Z",
  "labels": [
    "Issue-Bug",
    "WG-Engine"
  ],
  "number": 12031,
  "state": "open",
  "title": "Using Windows Forms in PS 7 Unexpected behaviour and errors",
  "updated_at": "2020-03-05T19:44:24Z"
}