{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6697",
  "author": "FriedrichWeinmann",
  "body": "# Introduction\r\nOne of the things I have seen that always bugged me in PowerShell was the fact, that string operators cannot be used on a pipeline. A simple example:\r\n```powershell\r\n(2,3,1,4 | Sort-Object) -join \".\"\r\n```\r\nNot convenient, especially for interactive console use where you often need to go back and add the braces. The default string operators obviously aren't cmdlets and won't work on the pipeline - instead they are fast.\r\n\r\nIn one of my modules (`PSUtil`) I have functions that emulate this functionality:\r\n```powershell\r\n2,3,1,4 | sort | join \".\"\r\n```\r\nHowever I think this would make sense as part of the default command set, as virtually every user of PowerShell has to handle strings.\r\n\r\n# Weighing the scales\r\n## Advantages\r\n\r\n - More convenient to use for end user on the pipeline\r\n - Additional suitable features can be added through parameters (See implementation proposal below)\r\n\r\n## Disadvantages\r\n\r\n - Clobber list of commands available by default with more commands.\r\n\r\n# On Implementation\r\n\r\nI am willing to implement all commands involved, their tests and documentation, all by myself, if this feature is deemed worthwhile.\r\n\r\n# Proposed commands & features\r\n## Add-String (Alias: 'wrap')\r\n\r\nDoes not have an operator equivalent. Command that allows you to easily add to a string on the pipeline.\r\n\r\n### Example\r\n```powershell\r\nPS> 1..4 | wrap '\"' '\"'\r\n\r\n\"1\"\r\n\"2\"\r\n\"3\"\r\n\"4\"\r\n```\r\n\r\n### Parameters\r\n\r\n - InputString (`string[]` | Pipeline), the string(s) being added to\r\n - Before (`string`), the string to add before the input\r\n - Behind (`string`), the string to add behind the input\r\n - PadLeft (`char`), character to pad left with\r\n - PadRight (`char`), character to pad right with\r\n - PadWidth (`int`), up to how many characters the string should be padded with\r\n\r\n## Format-String (Alias: 'format')\r\n\r\nEquivalent to `-f`. Command that allows you to use the format operator on the pipeline.\r\n\r\n### Example\r\n```powershell\r\nPS> 1..4 | format \"{0:N2} - {1:D3}\" -Count 2\r\n\r\n1,00 - 002\r\n3,00 - 004\r\n```\r\n\r\n### Parameters\r\n\r\n - InputObject (`object` | Pipeline), objects to be formatted\r\n - Format (`string`), the format definition\r\n - Count (`int`), the number of items to store up before formating them in bulk (optional, default 1)\r\n\r\n## Get-Substring\r\n\r\nAllows trimming and picking a substring from specified strings.\r\n\r\n### Example\r\n\r\n```powershell\r\nPS> \"abc def ghi\" | substring -trim \"abi\"\r\n\r\nc def gh\r\n\r\nPS> \"abc def ghi\" | substring 2 4\r\n\r\nc de\r\n```\r\n\r\n### Parameters\r\n\r\n - InputString (`string[]` | Pipeline), the strings to pick from\r\n - Trim (`string`), what characters to trim\r\n - TrimStart (`string`), what characters to trim at the start of the string\r\n - TrimEnd (`string`), what characters to trim at the end of the string\r\n - Start (`int`), the start index to pick the substring from\r\n - Length (`int`), how long a substring to pick\r\n\r\n## Join-String (Alias: 'join')\r\n\r\nEquivalent to `-join`. Command that allows you to join items on the pipeline\r\n\r\n### Example\r\n```powershell\r\nPS> 1..4 | join \",\"\r\n\r\n1,2,3,4\r\n\r\nPS> 1..4 | join \",\" -Count 2\r\n\r\n1,2\r\n3,4\r\n```\r\n\r\n### Parameters\r\n\r\n - InputString (`string[]` | Pipeline), the strings to join\r\n - Separator (`string`), what string to join them with. Defaults to `([System.Environment]::NewLine)`\r\n - Count (`int`), the number of items to join together. (Defaults to all items)\r\n\r\n## Set-String ('replace')\r\n\r\nEquivalent to the `-replace` operator _and_ the `.Replace()` string method\r\n\r\n### Example\r\n```powershell\r\nPS> \"abc def ghi\" | replace \"d\\w+\" \"zzz\"\r\n\r\nabc zzz ghi\r\n\r\nPS> \"abc def ghi\" | replace \"d\\w+\" { 1..4 | join \".\" }\r\n\r\nabc 1.2.3.4 ghi\r\n\r\nPS> \"abc (def) ghi\" | replace \"(def)\" \"def\" -DoNotUseRegex\r\n\r\nabc def ghi\r\n```\r\n\r\n### Parameters\r\n\r\n - InputString (`string[]` | Pipeline), the strings to replace within\r\n - OldValue (`string`), what sequence to replace\r\n - NewValue (`object`), what to replace with. Can be a string or a scriptblock\r\n - DoNotUseRegex (`switch`), switches from regex replace to using the string method `Replace()`\r\n - Options (`RegexOptions`), the regex options to use on replace, defaults to `IgnoreCase`\r\n\r\n## Split-String ('split')\r\n\r\nEquivalent to the `-split` operator _and_ the `.Split()` string method\r\n\r\n### Example\r\n\r\n```powershell\r\nPS> \"abc def ghi\" | split \" d\\w+ \"\r\n\r\nabc\r\nghi\r\n\r\nPS> \"abc def ghi | split \" d\\w+ \" -DoNotUseRegex\r\n\r\nabc\r\n\r\nef\r\nghi\r\n```\r\n\r\n### Parameters\r\n\r\n - InputString (`string[]` | Pipeline), the strings to split\r\n - Separator (`object`), what to split with.\r\n - DoNotUseRegex (`switch`), switches from regex split to using the string method `Split()`\r\n - Options (`RegexOptions`), the regex options to use on split, defaults to `IgnoreCase`\r\n - Count (`int`), the maximum number of items to split into (equivalent to `-split \".\",2`)\r\n\r\n# Concluding\r\n\r\nI believe these commands to improve the interactive console experience of most users, without having significant drawbacks and am perfectly willing to do the implementation myself, pending the approval of the court of public opinion :)\r\n\r\nOpinions / comments / refinements, anybody?\r\n\r\n`2018-04-27` - Updated parameter names, replaced `Remove-String (trim)`  with `Get-SubString`",
  "closed_at": null,
  "comments": [
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "I already implemented my own join-item, so I definitely saw the use case for it! ",
      "created_at": "2018-04-22T06:10:37Z",
      "updated_at": "2018-04-22T06:10:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We could combine them all into one cmdlet: \r\n`Convert-String -Join`\r\n`Convert-String -Split`\r\n`Convert-String -Replace`",
      "created_at": "2018-04-22T13:57:56Z",
      "updated_at": "2018-04-22T13:57:56Z"
    },
    {
      "author": "FriedrichWeinmann",
      "author_association": "NONE",
      "body": "Technically possible, but would make it a lot more of a pain to maintain if convenience of use with aliases mimicking the operators is to be maintained (and convenience is one of the core benefits here).\r\n\r\nFurthermore, it would be less useful from a discovery perspective:\r\n```powershell\r\nGet-Command *-String\r\n```\r\nThis would list all of them per action. With `Convert-String` this would pretty much require previous knowledge (in which case discovery is really a moot point). Add in that it would violate the definition of the `convert` verb and I'd argue against fusing them into a single command, under that verb or any other.\r\n\r\nCheers,\r\nFred\r\n\r\nLink to definition, in case somebody wants to look it up:\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.management.automation.verbsdata.convert?redirectedfrom=MSDN&view=powershellsdk-1.1.0",
      "created_at": "2018-04-22T14:42:00Z",
      "updated_at": "2018-04-22T14:42:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We have several discussions aliases. Aliases greatly depend on personal preferences and create conflicts. Most likely we will delete them all #5870 and allow users to add the ones they want. So I wouldn't consider aliases here at all.\r\n\r\nDiscovery perspective is nothing. User discovery process is \"How I can do this?\" not \"What?\".\r\nHaving `Convert-String` you free to create any aliases or helper functions in your profile.\r\n\r\nRe `Convert`. We have another definition `Get-Verb convert | ft -Wrap` in PowerShell Core. In any case PowerShell Committee  should make the conclusion.",
      "created_at": "2018-04-22T17:50:39Z",
      "updated_at": "2018-04-22T17:50:39Z"
    },
    {
      "author": "FriedrichWeinmann",
      "author_association": "NONE",
      "body": "> In any case PowerShell Committee should make the conclusion.\r\n\r\nOh absolutely - I prefer having a discussion on it first, in order to inspire that conclusion, but there's no question about who has the final voice on it :)\r\n\r\n> Re Convert. We have another definition Get-Verb convert | ft -Wrap in PowerShell Core\r\n\r\nThanks for pointing that out - hadn't noticed the description is built in there \ud83d\udc4d . Still, this wouldn't be a change of representation of the same data - it would be a change to that data, so I still claim the verb would not fit.\r\n\r\n> Discovery perspective is nothing. User discovery process is \"How I can do this?\" not \"What?\".\r\n\r\nHaving spent copious hours digging for \"What?\", having discussed it with other users at conferences and user groups and spending quite a bit of time teaching, my experience is that both happens. So I really disagree with a blank dismissal of one side of the process.\r\n\r\n> We have several discussions aliases. Aliases greatly depend on personal preferences and create conflicts. Most likely we will delete them all #5870 and allow users to add the ones they want. So I wouldn't consider aliases here at all.\r\n\r\nHm, can't say I fully agree with that position, but the solution @jaykul proposed makes sense (shipping them as/within automatically included modules, rather than core). In that context I totally _would_ consider aliases, with the mid-term goal of having them as part of one of those modules (Whether they are created right away or introduced as part of that implementation). Given the design goal of convenience, I believe aliases are certainly a justified part of the discussion/deliberations ( _especially_ in cases where the functionality directly maps a string operator).",
      "created_at": "2018-04-22T19:19:36Z",
      "updated_at": "2018-04-22T19:19:36Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov Cmdlets are much more discoverable (see `get-help *string*`) than operators and parameter sets (though perhaps that's just because of the way we present them.) I don't see convert(to) being the right verb since it's usually convertto a format and joining a string isn't a format per se. Finally aliases are an important part of the shell experience so simply getting rid of them seems undesirable.\r\n\r\n@FriedrichWeinmann I really **like** this proposal. I've always thought that we missed the boat by not providing core data manipulation commands. I started similar commands back in v1 but they didn't make it into the product. Over the years, we've periodically revisited them (see [Join-Object](https://blogs.msdn.microsoft.com/powershell/2012/07/13/join-object/)) but again, they didn't get into the product. It would be nice to actually do it this time :-) \r\n\r\n@powercode Would you be willing to contribute your Join-Item (though perhaps renamed `Join-Object`) ? I've seen a number of requests for this type of functionality on StackOverflow.\r\n\r\nOther notes:\r\n\r\n`Split-String` should probably have a `-Count` parameter like the `-Split` operator.\r\nWhat about addressing `.Substring()` scenarios? Maybe have `-start` and `-count` parameters on `split-string`?\r\n\r\n",
      "created_at": "2018-04-22T21:38:01Z",
      "updated_at": "2018-04-22T21:38:01Z"
    },
    {
      "author": "FriedrichWeinmann",
      "author_association": "NONE",
      "body": "Heya Bruce, thank you for the encouragement :)\r\nAlso thank you for that `-Count` parameter that I missed when assembling the set \ud83d\udc4d \r\n\r\nRegarding SubString():\r\nI'm not ... quite comfortable hitching that to `Split-String` since that verb kind of implies turning one into multiple objects. I'd be more comfortable with `Remove-String`, but that one already has `-Start` occupied with a clearly named precedence on the trim side.\r\nHow about placing it there and adding a second parameterset for substring, with the following names:\r\n\u00b4-SubStringStart` (`int`, alias: `-ss`)\r\n`-SubStringLength` (`int`, alias: `-sl`)",
      "created_at": "2018-04-22T23:35:27Z",
      "updated_at": "2018-04-22T23:35:27Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "The thing about `Remove` is that it's a perspective i.e. what you want to remove instead of what you want to keep:\r\n```\r\nRemove-String -First 3  -Last 10\r\n```\r\nThis certainly works for the `trim` scenario but for the positive perspective, how about `Get-Substring`? Different noun but still discoverable when looking for strings.\r\n```\r\nGet-Substring -Start 4 -Length 5\r\n```\r\nOf course this could also work with `-Trim`, `-TrimStart`, `-TrimEnd`.  Or even `-Remove`  taking a string, regex, or scriptblock.\r\n```\r\nGet-Substring -Remove {$_ -eq ' '}\r\n```\r\n ",
      "created_at": "2018-04-22T23:52:31Z",
      "updated_at": "2018-04-22T23:52:31Z"
    },
    {
      "author": "FriedrichWeinmann",
      "author_association": "NONE",
      "body": "I like the `Get-Substring` idea!\r\nAlso agree with rolling in the `trim` commands (basically removing `Remove-String`)\r\n\r\nDon't think the `-Remove` parameter would make it though, considering what you can do with replace (and how it's already being used for this)\r\nWould probably be also somewhat counter-intuitive for those used to the string method.",
      "created_at": "2018-04-23T02:53:53Z",
      "updated_at": "2018-04-23T02:55:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@BrucePay \r\n>Cmdlets are much more discoverable (see get-help *string*) than operators and parameter sets (though perhaps that's just because of the way we present them.)\r\n\r\nWe should improve this if we see bad UX. Seems we have some related Issues.\r\n\r\nI'd prefer to have one power cmdlet for string manipulations in pipes then many ones. For Windows PowerShell I see hundreds of modules on my system and thousands of cmdlets. Finding the right cmdlets becomes a serious problem and adding new cmdlet bundles does not make the situation easier.",
      "created_at": "2018-04-23T06:30:34Z",
      "updated_at": "2018-04-23T06:30:34Z"
    },
    {
      "author": "FriedrichWeinmann",
      "author_association": "NONE",
      "body": "> I'd prefer to have one power cmdlet for string manipulations in pipes then many ones. For Windows PowerShell I see hundreds of modules on my system and thousands of cmdlets. Finding the right cmdlets becomes a serious problem and adding new cmdlet bundles does not make the situation easier.\r\n\r\nI agree with the drawback of command inflation being a consideration.\r\n\r\nStill I disagree with rolling them into a single, big command. Frankly, I had hoped the times of `netsh` style syntax trees are over. Admittedly, this wouldn't be _that_ bad, but the usability would ... suck. To the point of defeating most of the purpose and value I see in this update.\r\nGiven the simplicity of the naming, I doubt discoverability of other commands will be affected though.",
      "created_at": "2018-04-23T14:06:33Z",
      "updated_at": "2018-04-23T14:06:33Z"
    },
    {
      "author": "dragonwolf83",
      "author_association": "NONE",
      "body": "We should stay away from `Join-Object` in this context. These are string manipulations which is a very different use case. For `Join-Object` we want to combine 2 Objects together based on matching properties from each Object. That logic won't use any string functions like `-join`. A separate issue and RFC should be used for that discussion.",
      "created_at": "2018-04-24T03:27:23Z",
      "updated_at": "2018-04-24T03:27:23Z"
    },
    {
      "author": "ThatNateGuy",
      "author_association": "NONE",
      "body": "I would absolutely love to see PowerShell given more string manipulation features. ",
      "created_at": "2018-04-24T14:15:50Z",
      "updated_at": "2018-04-24T14:15:50Z"
    },
    {
      "author": "RamblingCookieMonster",
      "author_association": "NONE",
      "body": "@iSazonov \r\n> I'd prefer to have one power cmdlet for string manipulations in pipes then many ones\r\n\r\nHiyo!\r\n\r\nI might be misinterpreting things, but it seems like the idea of a variety of narrowly scoped, descriptive `verb-noun` commands stems from monad manifesto?  From what I can tell, it's one of the reasons many find the language so approachable.  I'll throw my vote in for independent functions/cmdlets any day.\r\n\r\nAlso - @FriedrichWeinmann awesome idea.  Every time I find myself doing this at the CLI or in a script it feels obtuse and painful.  Hope to see these or some of these built in : ) \r\n\r\nCheers!",
      "created_at": "2018-04-27T01:27:33Z",
      "updated_at": "2018-04-27T01:28:28Z"
    },
    {
      "author": "FriedrichWeinmann",
      "author_association": "NONE",
      "body": "Alright, I've got a first version up and running:\r\nUp for review in this PR: https://github.com/PowerShell/PowerShell/pull/6753\r\n\r\nNotes on changes from original design:\r\n - Renamed a few parameters to be more in line with current naming practices\r\n - Renamed all instances of `-Simple` parameter with `-DoNotUseRegex` to be more self-explanatory about what they do.",
      "created_at": "2018-04-27T07:12:56Z",
      "updated_at": "2018-04-27T07:23:09Z"
    },
    {
      "author": "FriedrichWeinmann",
      "author_association": "NONE",
      "body": "Filed a proper RFC now, after being asked to on the PR linked above:\r\nhttps://github.com/PowerShell/PowerShell-RFC/pull/127",
      "created_at": "2018-05-04T15:41:48Z",
      "updated_at": "2018-05-04T15:41:48Z"
    }
  ],
  "created_at": "2018-04-21T21:51:49Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets-Utility"
  ],
  "number": 6697,
  "state": "open",
  "title": "New Feature: Commands for string methods & operators on the pipeline",
  "updated_at": "2018-05-04T15:41:48Z"
}