{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16940",
  "author": "SeeminglyScience",
  "body": "### Summary of the new feature / enhancement\n\nLets take the API `Enumerable.Select`\r\n\r\n```powershell\r\n[Linq.Enumerable]::Select\r\n\r\nOverloadDefinitions\r\n-------------------\r\npublic static IEnumerable<TResult> Select<TSource, TResult>(IEnumerable<TSource> source, Func<TSource, TResult> selector);\r\npublic static IEnumerable<TResult> Select<TSource, TResult>(IEnumerable<TSource> source, Func<TSource, int, TResult> selector);\r\n```\r\n\r\nIn order to use this API from PowerShell, you *must* explicitly cast your scriptblock as the target delegate type. Otherwise it is ambiguous which of the two overloads you want.\r\n\r\nIf PowerShell's binder was altered to use the param block of the scriptblock as a hint for overload resolution, you would be able to specify which overload you want, e.g.\r\n\r\n```powershell\r\n# First overload\r\n[Linq.Enumerable]::Select[object, object](\r\n    0..10,\r\n    { param($source) })\r\n\r\n# Second overload\r\n[Linq.Enumerable]::Select[object, object](\r\n    0..10,\r\n    { param($source, $index) })\r\n```\r\n\r\nTo avoid breaking changes, this should only be a *hint* for overload resolution. It should not affect binding outside of otherwise ambiguous overload choice.\n\n### Proposed technical implementation details (optional)\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "It probably depends on the specific task. How does the API know what will be as a delegate? A common mechanism is provided, this is a function. I understand it this way.\r\n```powershell\r\n[Linq.Enumerable]::Select(0..10, [func[object,object]] { if ($args[0] % 2) { $args[0] } } )\r\n```",
      "created_at": "2022-03-01T15:47:53Z",
      "updated_at": "2022-03-01T15:47:53Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> It probably depends on the specific task. How does the API know what will be as a delegate? A common mechanism is provided, this is a function. I understand it this way.\r\n\r\nSo if by API you mean the overload, they're asking for a delegate. If you mean the engine, we know that we're attempting to bind to a parameter typed as a delegate. If there were only one overload in this situation, we would be able to bind successfully. It only fails because we don't try to determine which overload is desired based on the scriptblock provided.",
      "created_at": "2022-03-01T15:58:59Z",
      "updated_at": "2022-03-01T15:58:59Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "For example, this works fine currently:\r\n\r\n```powershell\r\n[Linq.Enumerable]::ToDictionary[object, string]((Get-ChildItem), { $args[0].Name })\r\n```",
      "created_at": "2022-03-01T16:02:01Z",
      "updated_at": "2022-03-01T16:02:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> If PowerShell's binder was altered to use the param block of the scriptblock as a hint for overload resolution, you would be able to specify which overload you want, e.g.\r\n\r\nDo you mean to use parameter count or types too?",
      "created_at": "2022-03-02T07:15:30Z",
      "updated_at": "2022-03-02T07:15:30Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Do you mean to use parameter count or types too?\r\n\r\nSo **ideally** I'd say types too. It's possible that is just as easy, but I worry that it might drastically increase complexity. I would think parameter count alone would be reasonable in complexity and still solve a significant chunk of ambiguity issues. C# APIs tend to shy away from overloads with delegates of the same parameter count but differing types because typing lambdas is kinda awkward UX.",
      "created_at": "2022-03-02T14:06:36Z",
      "updated_at": "2022-03-02T14:06:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SeeminglyScience Thanks for clarify! I totally agree. We can start with count.\r\n\r\n",
      "created_at": "2022-03-02T16:36:32Z",
      "updated_at": "2022-03-02T16:36:32Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "The Engine WG reviewed this today. We agree it would be a useful change and are marking it as up for grabs (meaning I'll probably not it out some weekend unless someone beats me to it).",
      "created_at": "2022-03-31T23:15:29Z",
      "updated_at": "2022-03-31T23:15:29Z"
    }
  ],
  "created_at": "2022-03-01T14:23:52Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine",
    "Up-for-Grabs"
  ],
  "number": 16940,
  "state": "open",
  "title": "Method overload selection involving delegates should use scriptblock parameters for selection hints",
  "updated_at": "2022-03-31T23:15:41Z"
}