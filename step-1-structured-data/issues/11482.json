{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11482",
  "author": "iSazonov",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nPreviously we had to make workarounds in #6025 and #7631 to enable logging as early as possible.\r\nA root of the problem is that command line parser has a dependency on ConsoleHost being initialized late.\r\n\r\nMain change in the PR is to refactor CommandLineParameterParser and remove the dependency on ConsoleHost. \r\nNow we create CommandLineParameterParser at startup as static and can run the parser immediately after pwsh launch. Later, after ConsoleHost is initialized, we write the parser's errors, banner and helps.\r\n\r\nNow we call PSEtwLog.LogConsoleStartup() early in one place for both Unix and Windows.\r\n\r\nWhile refactoring and testing the parser I discovered NRE in an edge case: `pwsh -removeworkingdirectorytrailingcharacter` throws NRE. As result I added `#nullable enable` in some files to make the code more reliable.\r\n\r\nUnmanagedPSEntry.Start() uses still old signature. It was refactored too: new method create with removed unneeded parameters and old one was marked with Obsolete attribute.\r\n\r\nCommandLineParameterParser.WriteCommandLineError() method was renamed to SetCommandLineError().\r\n\r\nIn CommandLineParameterParser.ParseHelper() was added fast return if pwsh started with no parameters (args.Length == 0).\r\n\r\nUnused parameters was removed from the parser - iss, isswait and modules.\r\n\r\nWaiting a debugger in remoting scenario was moved in WaitingRemoteDebugger() method that called later after ConsoleHost initialized.\r\n\r\nCommandLineParameterParser.EarlyParse() was removed - now main parser is called in the place.\r\n\r\nNullHostUserInterface was not fully refactored for nullable reference types because PSHostUserInterface base class must be refactored first. We can defer the work.\r\n\r\nAfter the change that we can finally add xUnix tests in follow PR.\r\n\r\n## PR Context\r\n\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-08-12T16:58:48Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT @rjmholt @daxian-dbw It seems MSFT team has plans for the area. I believe the PR should be merged and then xUnit tests should be created.",
      "created_at": "2020-03-29T07:02:01Z",
      "updated_at": "2020-03-29T07:02:01Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMainainer, Please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-05-27T02:02:08Z",
      "updated_at": "2020-05-27T02:02:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT @rjmholt @daxian-dbw Please review.",
      "created_at": "2020-05-27T11:11:11Z",
      "updated_at": "2020-05-27T11:11:11Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMainainer, Please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-06-10T02:00:26Z",
      "updated_at": "2020-06-10T02:00:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Rebased to move latest .Net version.",
      "created_at": "2020-06-10T05:17:03Z",
      "updated_at": "2020-06-10T05:17:03Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMainainer, Please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-06-17T14:00:17Z",
      "updated_at": "2020-06-17T14:00:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT @rjmholt @daxian-dbw Could you please review? We change the code from time to time without any test.  I hope to add xUnit tests in follow PR.",
      "created_at": "2020-07-16T07:43:28Z",
      "updated_at": "2020-07-16T07:43:44Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> add xUnit tests in follow PR.\r\n\r\nI think the best plan would be to add them in a side-by-side PR that we can merge first, so that they can monitor any regressions introduced by refactoring.\r\n\r\nOtherwise, if those tests depend on APIs added in this PR, I think it's best to add them in this PR.",
      "created_at": "2020-07-16T15:55:55Z",
      "updated_at": "2020-07-16T16:00:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think we can not add xUnit test before because the code is integrated with conhost. The PR removes the dependency.\r\n\r\nReally the PR does not change a behavior.",
      "created_at": "2020-07-16T16:50:50Z",
      "updated_at": "2020-07-16T16:51:42Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> Really the PR does not change a behavior.\r\n\r\nWell I think testing is the best way to prove that. I think testing should be added in this PR",
      "created_at": "2020-07-16T16:57:22Z",
      "updated_at": "2020-07-16T16:57:22Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-08-01T02:00:17Z",
      "updated_at": "2020-08-01T02:00:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Any noticeable improvements in startup time?\r\n\r\nI do not think so - all code is the same. This was not the goal.\r\n",
      "created_at": "2020-08-04T03:20:45Z",
      "updated_at": "2020-08-04T03:20:45Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I thought you made synchronous steps now parallel, hence the question. I will continue my review.",
      "created_at": "2020-08-04T05:15:24Z",
      "updated_at": "2020-08-04T05:15:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw I added some commits and don't see more issues I can fix.\r\n",
      "created_at": "2020-08-09T08:10:32Z",
      "updated_at": "2020-08-09T19:56:24Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov Why mixing style/formatting changes with functionality changes? This makes it harder to review and thus the risk of regression is higher, especially for a large refactoring PR like this one ... ~Can you please revert the style/formatting changes?~\r\n\r\nIt looks some of confusing changes were from other merged/reverted PRs, so never mind reverting the style/formatting changes. But please avoid mixing functionality changes with unrelated style changes in future PRs.",
      "created_at": "2020-08-10T19:05:27Z",
      "updated_at": "2020-08-10T22:20:15Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov I depend on a tool called CodeFlow to review the changes in this PR and it won't work if there are more than 63 commits in the PR. So please don't use too many commits when addressing my comments. I would prefer 1 commit to address all my comments if possible. Also, please don't make changes to the existing commits and force push, or I will lose track of my review state.",
      "created_at": "2020-08-10T22:19:28Z",
      "updated_at": "2020-08-10T22:19:28Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Why mixing style/formatting changes with functionality changes?\r\n\r\nSorry, I misunderstand your previous request. :-(",
      "created_at": "2020-08-11T06:53:31Z",
      "updated_at": "2020-08-11T06:53:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Oh man, it's not easy for both you and me\r\n\r\nSorry, again. As I said the original plan was only to get rid of the workarounds with \"early parsing\"...\r\nOn the other hand, it is good that this work is done - it will save us a lot of time in the future as PowerShell becomes more popular and requires more launching features (like pwshw, login shell and so on).\r\n\r\nAdditional notices:\r\n- I see I skipped some code paths in _xUnit_ tests (but Pester tests exist). But it is minor and new tests can be added later.\r\n- If you think we can/should investigate performance of the parser please ask me or open new tracking issue.",
      "created_at": "2020-08-12T04:36:40Z",
      "updated_at": "2020-08-12T04:36:40Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov Don't get me wrong, I appreciate you taking on refactoring work like this one, which usually would require a lot patience to get through the long review process. To be honest, I admit that I'm kinda afraid of PRs like this one -- it obviously has values but also has a high risk of regression -- which would take me a lot efforts to review to get to the point where I'm sort of confident to accept the PR. That's why I said \"_it's not easy for both you and me_\" \ud83d\ude04\r\n\r\n> I see I skipped some code paths in xUnit tests (but Pester tests exist). But it is minor and new tests can be added later.\r\n\r\nAgreed.\r\n\r\n> If you think we can/should investigate performance of the parser please ask me or open new tracking issue.\r\n\r\nNo, I don't think the argument parsing is the bottleneck, so don't waste your time there.",
      "created_at": "2020-08-12T16:57:26Z",
      "updated_at": "2020-08-12T16:57:26Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.1.0-preview.6` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.6)\n",
      "created_at": "2020-08-17T22:21:37Z",
      "updated_at": "2020-08-17T22:21:37Z"
    }
  ],
  "created_at": "2020-01-03T18:09:08Z",
  "number": 11482,
  "state": "closed",
  "title": "Refactor command line parser to do early parsing",
  "updated_at": "2020-08-17T22:21:37Z"
}