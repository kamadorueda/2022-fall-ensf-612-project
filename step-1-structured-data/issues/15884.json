{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15884",
  "author": "aolszowka",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nAttempt to execute the following script; you will need at least one remote machine:\r\n\r\n```powershell\r\nfunction Test-SwitchRemoteBehavior {\r\n    [CmdletBinding()]\r\n    param (\r\n        [Parameter(Mandatory = $false, ValueFromPipelineByPropertyName = $true)]\r\n        [System.Management.Automation.SwitchParameter]$Force\r\n    )\r\n    process {\r\n        # In these cases the -Force switch works as expected\r\n        Write-Host \"###########################################################\"\r\n        Write-Host \"# Show how this works locally                             #\"\r\n        Write-Host \"###########################################################\"\r\n        Write-Host \"Force was false: $($Force -eq $false)\"\r\n        Write-Host \"Force was NOT present: $($Force.IsPresent -eq $false)\"\r\n\r\n        # In these cases the -Force switch works as expected still\r\n        Invoke-Command -ScriptBlock {\r\n            param([System.Management.Automation.SwitchParameter]$Force)\r\n            process {\r\n                Write-Host \"###################################################\"\r\n                Write-Host \"# Show on the local Computer via Invoke-Command   #\"\r\n                Write-Host \"###################################################\"\r\n                Write-Host \"Force was false: $($Force -eq $false)\"\r\n                Write-Host \"Force was NOT present: $($Force.IsPresent -eq $false)\"\r\n            }\r\n        } -ArgumentList @($Force)\r\n\r\n        # In this case the value of the -Force switch is lost for some reason\r\n        # it appears to be a bug\r\n        Invoke-Command -ComputerName 'SomeRemoteMachineHere' -ScriptBlock {\r\n            param([System.Management.Automation.SwitchParameter]$Force)\r\n            process {\r\n                Write-Host \"###################################################\"\r\n                Write-Host \"# Show on a Remote Computer via Invoke-Command    #\"\r\n                Write-Host \"###################################################\"\r\n                Write-Host \"Force was false: $($Force -eq $false)\"\r\n                Write-Host \"Force was NOT present: $($Force.IsPresent -eq $false)\"\r\n            }\r\n        } -ArgumentList @($Force)\r\n    }\r\n}\r\n\r\nTest-SwitchRemoteBehavior -Force\r\n```\r\n\r\nFor what its worth this behavior is also present in PowerShell 5.1 and several others have encountered it as seen around the Internet:\r\n\r\nStackOverflow: https://stackoverflow.com/questions/24011684/powershell-pass-a-switch-to-a-function-with-invoke-command\r\nVMWare Post: https://communities.vmware.com/t5/VMware-PowerCLI-Discussions/How-to-past-Boolean-variables/td-p/2820126\r\n\r\nThe work around is to pass this using `$Force.IsPresent` but it would be great to understand why this quirk exists, as far as I can tell there was never a bug report or even an explanation of why this behavior differs.\n\n### Expected behavior\n\n```console\n###########################################################\r\n# Show how this works locally                             #\r\n###########################################################\r\nForce was false: False\r\nForce was NOT present: False\r\n###################################################\r\n# Show on the local Computer via Invoke-Command   #\r\n###################################################\r\nForce was false: False\r\nForce was NOT present: False\r\n###################################################\r\n# Show on a Remote Computer via Invoke-Command    #\r\n###################################################\r\nForce was false: False\r\nForce was NOT present: False\n```\n\n\n### Actual behavior\n\n```console\n###########################################################\r\n# Show how this works locally                             #\r\n###########################################################\r\nForce was false: False\r\nForce was NOT present: False\r\n###################################################\r\n# Show on the local Computer via Invoke-Command   #\r\n###################################################\r\nForce was false: False\r\nForce was NOT present: False\r\n###################################################\r\n# Show on a Remote Computer via Invoke-Command    #\r\n###################################################\r\nForce was false: True\r\nForce was NOT present: True\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Microsoft Windows 6.3.9600\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0.}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Switch parameters _explicitly_ and _inherently_ cannot be bound positionally. The workarounds are legion.\r\n\r\n- use `$using:force` instead of passing a parameter at all\r\n- use a boolean parameter instead of a switch when you're writing an Invoke-Command scriptblock, since you know all the parameters _must_ be bound positionally...\r\n- prefix it with `[Parameter(Position=0)]` to make it positional",
      "created_at": "2021-08-23T04:47:50Z",
      "updated_at": "2021-08-23T04:48:31Z"
    },
    {
      "author": "aolszowka",
      "author_association": "NONE",
      "body": "@Jaykul I appreciate the response; can you expound upon how you gained this knowledge? Are there other parameters that are affected by this?\r\n\r\n> Switch parameters explicitly and inherently cannot be bound positionally.\r\n\r\nI was attempting to do more research on my own to find where this might be documented and ran across this old post: \r\n\r\nhttps://devblogs.microsoft.com/powershell/how-and-why-to-use-splatting-passing-switch-parameters/\r\n\r\nI suspect that it works because even though it is using [splatting](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_splatting?view=powershell-7.1), it is using the `HashTable` behavior as opposed to the `Array` behavior which would have made it positional.\r\n\r\nAs far as this issue itself, not sure what to do here. I think this is `by-design` and perhaps just closing the issue with a comment to that effect is good enough? Would it be worth documenting anywhere?\n\n<blockquote><img src=\"https://devblogs.microsoft.com/wp-content/uploads/sites/30/2018/09/Powershell_256.png\" width=\"48\" align=\"right\"><div><img src=\"https://devblogs.microsoft.com/powershell/wp-content/uploads/sites/30/2019/02/Powershell_2561.png\" height=\"14\"> PowerShell Team</div><div><strong><a href=\"https://devblogs.microsoft.com/powershell/how-and-why-to-use-splatting-passing-switch-parameters/\">How and Why to Use Splatting (passing [switch] parameters)</a></strong></div><div>On our internal discussion list, someone just asked about how to pass switch parameters from one function to another.\u00a0 This person asked this as \"Why can\u2019t [switch] parameters be passed as parameters?\". My short answer was simple: \"They Can Be\" Answering this question is a great way to illustrate the value of a PowerShell V2 feature called Splatting.\u00a0</div></blockquote>",
      "created_at": "2021-08-23T12:55:08Z",
      "updated_at": "2021-08-23T12:55:10Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "It might be worth documenting in one of the remoting articles, or even for Invoke-Command itself. Would also bear mentioning here as well: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_functions_advanced_parameters?view=powershell-7.1#switch-parameters\n\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_functions_advanced_parameters\">about Functions Advanced Parameters - PowerShell</a></strong></div><div>Explains how to add parameters to advanced functions.</div></blockquote>",
      "created_at": "2021-08-23T18:01:42Z",
      "updated_at": "2021-08-23T18:01:44Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "WG-Remoting:\r\nMarking this as needing documentation.",
      "created_at": "2021-08-23T20:44:14Z",
      "updated_at": "2021-08-23T20:44:14Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Hmm. That's always a fun question: how do you know that?\r\n\r\nI'm honestly not sure how I learned that initially. I noticed it again recently while prototyping ... I was working on something recently in Pester where I needed to replicate positional parameters. I \"knew\" how it worked, but as usual, I prototyped in the terminal to validate my knowledge, and I wrote something like this:\r\n\r\n```PowerShell\r\nfunction Test-Parameter {\r\n  [CmdletBinding()]param(\r\n    [string]$Path,\r\n    [switch]$Force,\r\n    [string]$Destination\r\n  )\r\n}\r\n```\r\n\r\nAnd then ran this to get positional parameters:\r\n\r\n```PowerShell\r\n(Get-Command Test-Parameter).Parameters.Values.Where{ $_.Attributes.Position -ge 0 }\r\n```\r\n\r\n```output\r\n\r\nName            : Path\r\nParameterType   : System.String\r\nParameterSets   : {[__AllParameterSets, System.Management.Automation.ParameterSetMetadata]}\r\nIsDynamic       : False\r\nAliases         : {}\r\nAttributes      : {, System.Management.Automation.ArgumentTypeConverterAttribute}\r\nSwitchParameter : False\r\n\r\nName            : Destination\r\nParameterType   : System.String\r\nParameterSets   : {[__AllParameterSets, System.Management.Automation.ParameterSetMetadata]}\r\nIsDynamic       : False\r\nAliases         : {}\r\nAttributes      : {, System.Management.Automation.ArgumentTypeConverterAttribute}\r\nSwitchParameter : False\r\n\r\n```\r\n\r\nIf you run that without the `.Where` filter, you'll see all the \"built in\" parameters and switch(es), but when you filter for positional parameters, it skips over the `Force` switch. PowerShell adds implicit `[Parameter()]` and `[ArguymentTypeConverter()]` attributes on all parameters, but the implicit ParameterAttribute does not include a Position value for switches (or rather, it's set to `[int]::MinValue`). I was relieved by that (and slightly surprised by the \"ExperimentName\" and \"ExperimentAction\" fields that I had never seen before) and it stuck with me.\r\n\r\nI also know that in C# [the type documentation](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.switchparameter?view=powershellsdk-7.0.0) says it \"can **only** be used as a switch\" (emphasis mine), so that's clearer than the PowerShell about doc.\r\n\r\nI just opened [a PR against the about topic](https://github.com/MicrosoftDocs/PowerShell-Docs/pull/8027) to make it clearer there.",
      "created_at": "2021-08-28T17:36:18Z",
      "updated_at": "2021-08-28T17:36:18Z"
    }
  ],
  "created_at": "2021-08-06T13:04:02Z",
  "number": 15884,
  "state": "open",
  "title": "`System.Management.Automation.SwitchParameter` is not properly passed to Remote `Invoke-Command` Sessions",
  "updated_at": "2021-08-28T17:36:18Z"
}