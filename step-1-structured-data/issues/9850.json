{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9850",
  "author": "SeeminglyScience",
  "body": "# Summary of the new feature/enhancement\r\n\r\nMember binding should respect `EditorBrowsable(EditorBrowsableState.Never)`, hiding them from member completion and `Get-Member` (when `-Force` is not specified).\r\n\r\nCurrently it has no effect, which could give the illusion that an API is supported when it isn't (e.g. `System.Runtime.CompilerServices.CallSiteOps`)\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nCheck for `EditorBrowsableAttribute` when looking for `HiddenAttribute` ([here](https://github.com/PowerShell/PowerShell/blob/7e423e7451a4530060422aff1c821c0dc0712372/src/System.Management.Automation/engine/CoreAdapter.cs#L3615-L3623) and [here](https://github.com/PowerShell/PowerShell/blob/7e423e7451a4530060422aff1c821c0dc0712372/src/System.Management.Automation/engine/CoreAdapter.cs#L3580-L3582))\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@SeeminglyScience Here is my thought process on this. This attribute is used to hide properties from the _graphical property editor_ in Visual Studio. They are, however, still public properties that can be accessed in code. Given that they are public they are in fact supported so if you are using PowerShell to investigate an object with such properties you probably want to see them.  That said, given the scenario, i don't think many people will ever encounter them so it probably doesn't matter much. But, implementing such checks will probably  add overhead (a cost) to the property handling code for every member reference. So in the end, this seems like a pervasive cost for little benefit. Have i missed something?",
      "created_at": "2019-06-08T07:04:32Z",
      "updated_at": "2019-06-08T07:04:32Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> This attribute is used to hide properties from the graphical property editor in Visual Studio.\r\n\r\nAnd also from intellisense (in VSCode at least, haven't checked VS)\r\n\r\n> Given that they are public they are in fact supported\r\n\r\nWell not necessarily, but I will admit on second look `EditorBrowsableState.Never` doesn't *neccessarily* mean it's not supported.  I could have sworn it decorated members were excluded by roslyn for member resolution *period*,  but the one I tested must have been a special case (or I was mistaken \ud83e\udd37\u200d\u2642)\r\n\r\nThough, I think that makes a stronger case for it to be treated as `Hidden` since they seem to work the exact same way.  \r\n\r\n> But, implementing such checks will probably add overhead (a cost) to the property handling code for every member reference.\r\n\r\nI admit I don't know off hand exactly how heavy it is to check for an attribute.  Would it be of concern to check for that attribute once during `PSMethod`/`PSProperty` creation? (It wouldn't be every binding or even binder, `isHidden` is an arg on the constructors for the `PSMemberInfo` dotnet adapter variants)\r\n\r\nIf it is a concern though, does that check necessarily need to happen at `PSMemberInfo` creation?  I think you'd agree that checking for the attribute would be a non-issue during completion analysis and/or `Get-Member` invocation.",
      "created_at": "2019-06-08T12:15:50Z",
      "updated_at": "2019-06-08T12:31:09Z"
    },
    {
      "author": "Herrmel",
      "author_association": "NONE",
      "body": "I also would really appreciate this feature and hope you could reconsider this. We integrated the Powershell as a consoleinterface via the SDK into our programm. Since our programm is pretty modular it consist of many solutions and projects. To hide specific Members from the Powershell every project would need the SDK as a dependency only to get access to the Hidden-Attribute. It would feel way better if the PowerShell also supported an Attribute of the framework to avoid this unnecessary dependency and I think the EditorBrowsableAttribute would be a good choice for this.",
      "created_at": "2021-07-28T07:14:14Z",
      "updated_at": "2021-07-28T07:14:14Z"
    }
  ],
  "created_at": "2019-06-07T12:07:21Z",
  "number": 9850,
  "state": "open",
  "title": "Members decorated with EditorBrowsableState.Never should be treated like Hidden",
  "updated_at": "2021-07-28T07:14:14Z"
}