{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6793",
  "author": "vors",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://github.com/PowerShell/PowerShell/blob/master/docs/KNOWNISSUES.md).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nCSV supports multiline entries with quoting escaping.\r\nWhen a file is streamed as a collection of strings and not a single one, it will result in incorrect treating of such entries.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n \r\n1. create a `test.csv` file with the following content\r\n\r\n```\r\na,b\r\n\"1\r\n2\r\n3\",x\r\n```\r\n\r\n```powershell\r\ncat ./test.csv | ConvertFrom-Csv\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\na     b\r\n-     -\r\n1...  x\r\n```\r\n\r\nThis is the output of `cat ./test.csv -Raw | ConvertFrom-Csv`\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\na b\r\n- -\r\n1 \r\n2 \r\n3 x\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.1\r\nPSEdition                      Core\r\nGitCommitId                    v6.1.0-preview.1\r\nOS                             Darwin 17.5.0 Darwin Kernel Version 17.5.0: Mon Mar  5 22:24:32 PST 2018; root:xnu-4570.51.1~1/RELEASE_X...\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "mbaju",
      "author_association": "NONE",
      "body": "$PSVersionTable.GetEnumerator() | Select-Object -Property name , value | Export-Csv -Encoding UTF8   -Delimiter ';' -Path C:\\file1.csv -NoTypeInformation -Append\r\n\r\nImport-Csv -Path C:\\file1.csv -Delimiter ';' |Select-Object -Property *",
      "created_at": "2018-05-02T10:18:53Z",
      "updated_at": "2018-05-02T10:18:53Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@mbaju: What is your example meant to demonstrate? Note that `Import-Csv` is not affected by the bug.\r\n\r\nJust to add some additional information regarding the incorrect behavior:\r\n\r\n`ConvertFrom-Csv` currently blindly converts _each line_ of one-line-at-a-time input (from an array of strings or `Get-Content` without `-Raw`) into an object, which breaks with data rows that span multiple lines.\r\n\r\nIn the case at hand you therefore get _3_ output objects; the equivalent of (also note the inconsistent treatment of `\"`):\r\n\r\n```powershell\r\n[pscustomobject] @{\r\n  a = '1'\r\n  b = $null\r\n},\r\n\r\n[pscustomobject] @{\r\n  a = '2'\r\n  b = $null\r\n},\r\n\r\n[pscustomobject] @{\r\n  a = '3\"'\r\n  b = 'x'\r\n}\r\n```\r\n\r\ninstead of the expected _single_ object:\r\n\r\n```powershell\r\n[pscustomobject] @{\r\n  a = \"1`n2`n3\"\r\n  b = 'x'\r\n}\r\n```",
      "created_at": "2018-05-02T13:58:45Z",
      "updated_at": "2018-05-02T13:58:45Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@vors So doing `Get-Content -Raw` works properly?",
      "created_at": "2018-05-02T16:13:39Z",
      "updated_at": "2018-05-02T16:13:39Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@BrucePay: Yes, it does, given that a scalar multi-line string works too:\r\n\r\n```powershell\r\n@'\r\na,b\r\n\"1\r\n2\r\n3\",x\r\n'@ | ConvertFrom-Csv | Measure-Object\r\n```\r\n\r\nThe above yields a count of `1`,  as expected.",
      "created_at": "2018-05-02T16:42:30Z",
      "updated_at": "2018-05-02T16:42:30Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "@BrucePay yes, as @mklement0 mentioned. But there should not be the semantical difference imo.",
      "created_at": "2018-05-04T01:10:06Z",
      "updated_at": "2018-05-04T01:10:06Z"
    },
    {
      "author": "aggieben",
      "author_association": "NONE",
      "body": "Using `Get-Content -Raw` doesn't work in a particular circumstance where this problem is affecting me:\r\n\r\n```\r\ngc -wait postgresql-2020-02-10_182428.csv | ConvertFrom-Csv -Header $csvHeader -Delimiter ','\r\n```\r\n\r\nThe `-Raw` flag on `Get-Content` cannot be used with `-Wait`.",
      "created_at": "2020-02-11T01:33:18Z",
      "updated_at": "2020-02-11T01:33:18Z"
    }
  ],
  "created_at": "2018-05-02T06:48:50Z",
  "labels": [
    "WG-Cmdlets-Utility"
  ],
  "number": 6793,
  "state": "open",
  "title": "ConvertFrom-Csv multiline entries",
  "updated_at": "2020-02-11T01:33:18Z"
}