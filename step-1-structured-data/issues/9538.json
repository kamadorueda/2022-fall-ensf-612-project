{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9538",
  "author": "SteveL-MSFT",
  "body": "# Summary of the new feature/enhancement\r\n\r\nCurrently, if you produce a ps1xml, you can create custom views (or override existing views) of a type (like System.IO.FileInfo).  However, many types have common properties of the same type like `TimeStamp` being a `DateTime` but the format of that `TimeStamp` is specific to that type (including column width when used in a table).  Would be great to be able to specify partial formatting so that you could keep the current format for the type, but just override a property.  This way if formatting gets updated for that type, you inherit those changes, but your custom formatting for that property is retained.  Similarly, you may want to override formatting for all `DateTime` properties of all types.",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We could resolve this with PSMore #7857",
      "created_at": "2019-05-05T17:04:48Z",
      "updated_at": "2019-05-05T17:04:48Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "RE `TimeSpan`, PS 7 really, really needs a better default format for this this type because this is a bit of a spew:\r\n```\r\n05-05 11:27:19 1> Measure-Command { 6 * 7 }\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 0\r\nMilliseconds      : 6\r\nTicks             : 64564\r\nTotalDays         : 7.47268518518518E-08\r\nTotalHours        : 1.79344444444444E-06\r\nTotalMinutes      : 0.000107606666666667\r\nTotalSeconds      : 0.0064564\r\nTotalMilliseconds : 6.4564\r\n```\r\nI would prefer to see this:\r\n```\r\n05-05 11:38:01 26> [TimeSpan]\"1.15:22:15.003\",[TimeSpan]\"0.0:0:0.015\" | % { $_.ToString(\"G\"); }\r\n\r\n1:15:22:15.0030000\r\n0:00:00:00.0150000\r\n```\r\nOr maybe the humanized version:\r\n```\r\n05-05 11:42:25 36> [TimeSpan]\"1.15:22:15.003\",[TimeSpan]\"0.0:0:0.015\" | % {[Humanizer.TimeSpanHumanizeExtensions]::Humanize($_,5)}\r\n\r\n1 day, 15 hours, 22 minutes, 15 seconds, 3 milliseconds\r\n15 milliseconds\r\n```\r\nAlthough by default I think it should be the previous (more regular) version.  If you want the humanized version, maybe there should be a `Format-Humanized` command? \r\n\r\nThis is related to #9518 but more general.  ",
      "created_at": "2019-05-05T17:50:48Z",
      "updated_at": "2019-05-05T17:51:13Z"
    },
    {
      "author": "jzabroski",
      "author_association": "NONE",
      "body": "1 googolplex of YESes.\r\n\r\nWhile my following example only works on PowerShell 5, I frequently want to use `Format-Custom` to view complex objects in reasonable ways.  For example:\r\n\r\n```powershell\r\nget-eventlog -LogName system -source \"Service Control Manager\"  | where eventid -cin  @(7000, 7038)  | select eventid,message,timewritten -Last 2 | format-custom\r\n```\r\n\r\nThe problem here is that the default serialization of DateTime in PowerShell is ridiculous.  I end up with 142 useless lines of text. Compare the following brief log message to the one `Format-Custom` produces:\r\n\r\n### Ideal\r\n```\r\nclass EventLogEntry\r\n{\r\n  EventID = 7000\r\n  Message = The SSISScaleOutWorker140 service failed to start due to the following error:\r\n  %%1053\r\n  TimeWritten = Monday, July 8, 2019 12:08:46 PM\r\n}\r\n```\r\n\r\n### Actual\r\n```\r\nclass EventLogEntry\r\n{\r\n  EventID = 7000\r\n  Message = The SSISScaleOutWorker140 service failed to start due to the following error:\r\n  %%1053\r\n  TimeWritten =\r\n    class DateTime\r\n    {\r\n      Date =\r\n        class DateTime\r\n        {\r\n          Date =\r\n            class DateTime\r\n            {\r\n              Date =\r\n                class DateTime\r\n                {\r\n                  Date =\r\n                    class DateTime\r\n                    {\r\n                      Date = 7/8/2019 12:00:00 AM\r\n                      Day = 8\r\n                      DayOfWeek = Monday\r\n                      DayOfYear = 189\r\n                      Hour = 0\r\n                      Kind = Local\r\n                      Millisecond = 0\r\n                      Minute = 0\r\n                      Month = 7\r\n                      Second = 0\r\n                      Ticks = 636981408000000000\r\n                      TimeOfDay = 00:00:00\r\n                      Year = 2019\r\n                      DateTime = Monday, July 8, 2019 12:00:00 AM\r\n                    }\r\n                  Day = 8\r\n                  DayOfWeek = Monday\r\n                  DayOfYear = 189\r\n                  Hour = 0\r\n                  Kind = Local\r\n                  Millisecond = 0\r\n                  Minute = 0\r\n                  Month = 7\r\n                  Second = 0\r\n                  Ticks = 636981408000000000\r\n                  TimeOfDay =\r\n                    class TimeSpan\r\n                    {\r\n                      Ticks = 0\r\n                      Days = 0\r\n                      Hours = 0\r\n                      Milliseconds = 0\r\n                      Minutes = 0\r\n                      Seconds = 0\r\n                      TotalDays = 0\r\n                      TotalHours = 0\r\n                      TotalMilliseconds = 0\r\n                      TotalMinutes = 0\r\n                      TotalSeconds = 0\r\n                    }\r\n                  Year = 2019\r\n                  DateTime = Monday, July 8, 2019 12:00:00 AM\r\n                }\r\n              Day = 8\r\n              DayOfWeek = Monday\r\n              DayOfYear = 189\r\n              Hour = 0\r\n              Kind = Local\r\n              Millisecond = 0\r\n              Minute = 0\r\n              Month = 7\r\n              Second = 0\r\n              Ticks = 636981408000000000\r\n              TimeOfDay =\r\n                class TimeSpan\r\n                {\r\n                  Ticks = 0\r\n                  Days = 0\r\n                  Hours = 0\r\n                  Milliseconds = 0\r\n                  Minutes = 0\r\n                  Seconds = 0\r\n                  TotalDays = 0\r\n                  TotalHours = 0\r\n                  TotalMilliseconds = 0\r\n                  TotalMinutes = 0\r\n                  TotalSeconds = 0\r\n                }\r\n              Year = 2019\r\n              DateTime = Monday, July 8, 2019 12:00:00 AM\r\n            }\r\n          Day = 8\r\n          DayOfWeek = Monday\r\n          DayOfYear = 189\r\n          Hour = 0\r\n          Kind = Local\r\n          Millisecond = 0\r\n          Minute = 0\r\n          Month = 7\r\n          Second = 0\r\n          Ticks = 636981408000000000\r\n          TimeOfDay =\r\n            class TimeSpan\r\n            {\r\n              Ticks = 0\r\n              Days = 0\r\n              Hours = 0\r\n              Milliseconds = 0\r\n              Minutes = 0\r\n              Seconds = 0\r\n              TotalDays = 0\r\n              TotalHours = 0\r\n              TotalMilliseconds = 0\r\n              TotalMinutes = 0\r\n              TotalSeconds = 0\r\n            }\r\n          Year = 2019\r\n          DateTime = Monday, July 8, 2019 12:00:00 AM\r\n        }\r\n      Day = 8\r\n      DayOfWeek = Monday\r\n      DayOfYear = 189\r\n      Hour = 12\r\n      Kind = Local\r\n      Millisecond = 0\r\n      Minute = 8\r\n      Month = 7\r\n      Second = 46\r\n      Ticks = 636981845260000000\r\n      TimeOfDay =\r\n        class TimeSpan\r\n        {\r\n          Ticks = 437260000000\r\n          Days = 0\r\n          Hours = 12\r\n          Milliseconds = 0\r\n          Minutes = 8\r\n          Seconds = 46\r\n          TotalDays = 0.506087962962963\r\n          TotalHours = 12.1461111111111\r\n          TotalMilliseconds = 43726000\r\n          TotalMinutes = 728.766666666667\r\n          TotalSeconds = 43726\r\n        }\r\n      Year = 2019\r\n      DateTime = Monday, July 8, 2019 12:08:46 PM\r\n    }\r\n}\r\n```",
      "created_at": "2019-07-29T15:25:22Z",
      "updated_at": "2019-07-29T15:25:22Z"
    },
    {
      "author": "jzabroski",
      "author_association": "NONE",
      "body": "> We could resolve this with PSMore #7857\r\n\r\nIt is hard to unpack this comment as an outsider without spending a day playing around with PSMore.\r\n\r\nI want a way to:\r\n1. UnParse: data type -> string:\r\n    * improve `Format-Custom` so that data types that contain cycles print succinctly/efficiently (either indirectly like DateTime.Date or directly like some domain object models implemented via ORM navigations) \r\n2. Parse: string -> data type:\r\n    * Take output and convert it back into .NET / PowerShell objects\r\n    * This is really a bonus feature\r\n\r\nSeparately, I requested the Windows Console team implement \"call by intention\" escape code handling, such that console streams are structured objects and pipelines to-from programs are basically complex event processing engines.  PSMore seems to tackle the problem \"from within PowerShell\" but not \"across Programs\", which was the original promise of \"COM Object-Linking-and-Embedding\".",
      "created_at": "2019-07-29T16:01:39Z",
      "updated_at": "2019-07-29T16:01:39Z"
    }
  ],
  "created_at": "2019-05-05T14:13:11Z",
  "number": 9538,
  "state": "open",
  "title": "Allow custom partial formatting",
  "updated_at": "2019-07-29T16:01:39Z"
}