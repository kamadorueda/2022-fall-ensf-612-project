{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11421",
  "author": "spongemike2",
  "body": "# PR Summary\r\n\r\nRegarding `Invoke-WebRequest`:\r\n\r\nA change was made to PowerShell Core with commit `2285ece613` that changes the way web request headers are handled when the web request has no body. Previously, they would be ignored. Now, they are processed anyway, including the `ContentType` header, which makes no sense when there's no body. Now, the headers are processed anyway, and if there's a `ContentType` header with an empty string value, it will fail.\r\n\r\nWhen a customer tries to pass in a blank (i.e., `$null`) `ContentType` to a function that takes a `string` because they have no body, it gets treated as an empty string, not `$null`.\r\n\r\nThis works fin in Windows PowerShell (PS5 and earlier) and PowerShell Core 6, because their code bases don't have commit `2285ece613`.\r\n\r\nWhen it fails, they get a message saying that they can avoid this by passing `-SkipHeaderValidation`, but this flag isn't available in Windows PowerShell, and using it would require a crude hard-coded version check to see if you're on Windows PowerShell or PowerShell Core.\r\n\r\nThis change merely skips adding headers to the request if the header value is nothing (null or whitespace).\r\n\r\n**Question**: Should we only do this *skip* for the `ContentType` header?\r\n\r\nFix https://github.com/PowerShell/PowerShell/issues/11396\r\n\r\n## PR Context\r\n\r\nWithout this, PS scripts that run fine in Windows PowerShell and PowerShell Core 6 break. \r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-01-06T20:11:56Z",
  "comments": [
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "[![CLA assistant check](https://cla.opensource.microsoft.com/pull/badge/signed)](https://cla.opensource.microsoft.com/PowerShell/PowerShell?pullRequest=11421) <br/>All CLA requirements met.",
      "created_at": "2019-12-21T18:08:33Z",
      "updated_at": "2019-12-21T18:47:44Z"
    },
    {
      "author": "spongemike2",
      "author_association": "CONTRIBUTOR",
      "body": "One option to make it even more future-proof would be to add another condition to this check, and only ignore blank headers if the body is also empty or non-existent. Then, it will actually behave closer to the PS6 version of the code, which doesn't allow *any* custom headers if there's no body.",
      "created_at": "2019-12-21T20:32:27Z",
      "updated_at": "2019-12-21T20:32:27Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@spongemike2 I may lack some context or experience in this area, but from memory there are some perfectly valid requests that can be made with headers and no body, aren't there?",
      "created_at": "2019-12-21T21:03:55Z",
      "updated_at": "2019-12-21T21:03:55Z"
    },
    {
      "author": "spongemike2",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32, I am not an expert in this area, but if I had to guess, I would say *yes*, which is presumably why the change was made that broke this. However, headers that have no value? I think that's unlikely to be useful. Rather than specifying a header with a blank value, which dotnetcore doesn't allow, one could get effectively the same information conveyed by omitting the header altogether. Which is why I think (even though I'm not 100% sure) that my change should be safe.\r\n",
      "created_at": "2019-12-21T21:31:26Z",
      "updated_at": "2019-12-21T21:31:26Z"
    },
    {
      "author": "spongemike2",
      "author_association": "CONTRIBUTOR",
      "body": "Test added. Verified that the new test fails prior to this change, and succeeds with it.",
      "created_at": "2019-12-28T07:12:02Z",
      "updated_at": "2019-12-28T07:12:02Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@spongemike2 could you edit the PR title summary to something a bit more descriptive? Thanks! \ud83d\ude0a ",
      "created_at": "2019-12-28T07:20:28Z",
      "updated_at": "2019-12-28T07:20:28Z"
    },
    {
      "author": "spongemike2",
      "author_association": "CONTRIBUTOR",
      "body": "> @spongemike2 could you edit the PR title summary to something a bit more descriptive? Thanks!\r\n\r\nDone.",
      "created_at": "2019-12-28T07:31:47Z",
      "updated_at": "2019-12-28T07:31:47Z"
    },
    {
      "author": "spongemike2",
      "author_association": "CONTRIBUTOR",
      "body": "Anything else needed?\r\n",
      "created_at": "2020-01-01T01:35:52Z",
      "updated_at": "2020-01-01T01:35:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think It is a breaking change and we should add CL-BreakingChange",
      "created_at": "2020-01-06T20:19:21Z",
      "updated_at": "2020-01-06T20:19:21Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "It looks to me a regression we made in 7.0 time frame and we are fixing it before 7.0 GA. It's a behavior changes only comparing with 7.0 previews, so I think it's not a breaking change. But do let me know if I'm missing something.",
      "created_at": "2020-01-06T20:36:45Z",
      "updated_at": "2020-01-06T20:36:45Z"
    },
    {
      "author": "spongemike2",
      "author_association": "CONTRIBUTOR",
      "body": "> It looks to me a regression we made in 7.0 time frame and we are fixing it before 7.0 GA. It's a behavior changes only comparing with 7.0 previews, so I think it's not a breaking change. But do let me know if I'm missing something.\r\n\r\nI agree. It _would_ have been an unknown breaking change if it wasn't fixed before GA, but we caught it and fixed it.",
      "created_at": "2020-01-06T20:42:50Z",
      "updated_at": "2020-01-06T20:42:50Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I agree if this will be in GA.",
      "created_at": "2020-01-07T04:29:07Z",
      "updated_at": "2020-01-07T04:29:07Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.0.0-rc.2` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-rc.2)\n",
      "created_at": "2020-01-16T23:38:23Z",
      "updated_at": "2020-01-16T23:38:23Z"
    }
  ],
  "created_at": "2019-12-21T18:08:20Z",
  "number": 11421,
  "state": "closed",
  "title": "Allow a blank/empty ContentType to be passed to Invoke-WebRequest for compatibility with PS6 and earlier",
  "updated_at": "2020-01-16T23:38:23Z"
}