{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14457",
  "author": "plastikfan",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\n## Steps to reproduce\r\n\r\nJust define a function with cross field parameter validation on 1 or more of its parameters eg:\r\n\r\n```powershell\r\nfunction Get-InverseSubString {\r\n  param(\r\n    [Parameter(Position = 0, Mandatory)]\r\n    [string]$Source,\r\n\r\n    [Parameter()]\r\n    [ValidateScript( { $_ -lt $Source.Length })]\r\n    [int]$StartIndex = 0,\r\n\r\n    [Parameter()]\r\n    [ValidateScript( { $_ -le ($Source.Length - $StartIndex ) })]\r\n    [int]$Length = 0,\r\n\r\n    [Parameter()]\r\n    [switch]$Split,\r\n\r\n    [Parameter()]\r\n    [char]$Marker\r\n  )\r\n\r\n  ... implementation omitted, because it's irrelevant\r\n}\r\n```\r\n\r\nnow invoke via splatted parameters:\r\n\r\n```powershell\r\n      [System.Collections.Hashtable]$parameters = @{\r\n        'Source' = $Source;\r\n        'StartIndex' = $m.Index;\r\n        'Length'     = $m.Length;\r\n      }\r\n      [string]$remainder = Get-InverseSubString @parameters;\r\n```\r\n\r\n## Expected behavior\r\n\r\nno error should be reported. If we invoke **Get-InverseSubString** directly, then the execution proceeds without error:\r\n\r\n```powershell\r\n      [string]$remainder = $PSBoundParameters.ContainsKey('Marker') `\r\n        ? $(Get-InverseSubString -Source $Source -StartIndex $m.Index -Length $m.Length -Marker $Marker) `\r\n        : $(Get-InverseSubString -Source $Source -StartIndex $m.Index -Length $m.Length);\r\n```\r\n\r\nBut the above is just a work-around for a scenario in which splatting should be ok.\r\n\r\n## Actual behavior\r\n\r\n```none\r\n[-] Split-Match.given: Pattern does match.and: multiple matches.and: NOT CapturedOnly.and: First.should: Get first Occurrence 4ms (3ms|1ms)\r\n RuntimeException: The variable '$StartIndex' cannot be retrieved because it has not been set.\r\n ParameterBindingValidationException: Cannot validate argument on parameter 'Length'. The variable '$StartIndex' cannot be retrieved because it has not been set.\r\n at Split-Match, C:\\Users\\Plastikfan\\dev\\github\\PoSh\\Loopz\\Elizium.Loopz\\Output\\Elizium.Loopz\\Elizium.Loopz.psm1:3148\r\n at <ScriptBlock>, C:\\Users\\Plastikfan\\dev\\github\\PoSh\\Loopz\\Elizium.Loopz\\Tests\\Public\\Split-Match.tests.ps1:26\r\n```\r\n\r\n## Environment data\r\n\r\n\u03bb $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.0\r\nPSEdition                      Core\r\nGitCommitId                    7.1.0\r\nOS                             Microsoft Windows 10.0.19041\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```none\r\n\r\n```\r\n",
  "closed_at": "2021-01-27T19:23:42Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Your approach is conceptually flawed, because **you cannot - and should not - rely on the _order_ in which parameters are bound**.\r\n\r\nThat is, while the following _happens to_ work:\r\n\r\n```powershell\r\nGet-InverseSubString -Source 'foo' -StartIndex 0 \r\n```\r\n\r\nthe following does _not_ (note the reversal of the argument order):\r\n\r\n```powershell\r\nGet-InverseSubString -StartIndex 0 -Source 'foo'\r\n```\r\n\r\nWhen _named_ arguments (values preceded by the target parameter name) are used, users are and should be free to choose the order in which those values are passed.\r\n",
      "created_at": "2020-12-19T23:08:03Z",
      "updated_at": "2020-12-19T23:08:03Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "To summarize:\r\n\r\n* For your function to work _robustly_, it mustn't make assumptions about the order in which parameters are bound.\r\n* You can therefore not solve your problem in your parameter declarations and must perform the desired validation in your function _body_.\r\n\r\nIf you nonetheless wanted to rely on the order in which parameters are bound, your splatting hashtable must be an _ordered_ hash table to guarantee the the ordering of entries (`[hashtable]` does _not_ guarantee entry order):\r\n\r\n```powershell\r\n$parameters = [ordered] @{\r\n  'Source' =  'src'\r\n  'StartIndex' = 0\r\n  'Length'     = 1\r\n}\r\n```\r\n\r\nNote that the fact that it is typically _unordered_ hashtables that are used for splatting is an indication that parameter-binding order should _not_ matter.",
      "created_at": "2020-12-21T14:40:30Z",
      "updated_at": "2020-12-21T14:42:17Z"
    },
    {
      "author": "plastikfan",
      "author_association": "NONE",
      "body": "Ok thanks for your insight and your point duely noted. The only thing I would ask to counter your argument is, is there a chance that the validation process is being activated too soon? There should not be an issue of parameter order. The validation of individual parameters should only be taking place once all parameters have been bound in. I suspect the way this is working is some kind of iteration which immediately invokes the parameter validator, rather than bind all the parameters first then invoke the validators. In my opinion, the order of parameters should not matter and the only reason they do is because of an internal implementation detail.\n\nPlease take this as constructive criticism,\n\nThanks\n\n",
      "created_at": "2020-12-21T14:47:33Z",
      "updated_at": "2020-12-21T14:47:36Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Yes, the current design is that validation is performed at the moment a given parameter is bound.\r\n\r\nI can see how supporting cross-parameter validation as part of the parameter declaration can be beneficial, but changing to what you propose - collect all values first and _then_ validate - would be a substantial change that would require careful design and evaluation for potential backward-compatibility issues.\r\n\r\nFor instance - and I'm not saying that that's necessarily a reason _not_ to do it - say you have multiple mandatory parameters that the user doesn't bind on invocation, alongside an argument that is invalid. The user will go through a series of interactive prompts to supply the mandatory arguments only to be told about the invalid argument _afterwards_.\r\n\r\nIf you would like to see this change, I encourage you to open a _new_ issue, of type Feature Request/Idea, and make a focused case there. You can then close this issue.\r\n\r\n\r\n",
      "created_at": "2020-12-21T15:02:57Z",
      "updated_at": "2020-12-21T15:03:25Z"
    },
    {
      "author": "plastikfan",
      "author_association": "NONE",
      "body": "Ok thank you\n",
      "created_at": "2020-12-21T15:04:48Z",
      "updated_at": "2020-12-21T15:04:51Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@plastikfan, in case you want to pursue this further with a proposal:\r\n\r\nOne conceivable solution that wouldn't change the existing behavior is to introduce a `PostValidateScript` property whose script-block value is only evaluated after _all_ parameters have been bound.\r\n\r\n",
      "created_at": "2021-01-27T20:14:56Z",
      "updated_at": "2021-01-27T20:14:56Z"
    },
    {
      "author": "plastikfan",
      "author_association": "NONE",
      "body": "Ok thanks for that, sounds useful, cheers",
      "created_at": "2021-01-27T21:22:43Z",
      "updated_at": "2021-01-27T21:22:43Z"
    }
  ],
  "created_at": "2020-12-18T15:37:29Z",
  "labels": [
    "Issue-Question",
    "WG-Engine"
  ],
  "number": 14457,
  "state": "closed",
  "title": "Cross field parameter validation fails when invoked by splatted parameters",
  "updated_at": "2021-01-27T21:22:44Z"
}