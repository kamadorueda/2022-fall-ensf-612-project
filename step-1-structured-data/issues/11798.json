{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11798",
  "author": "SteveL-MSFT",
  "body": "# Summary of the new feature/enhancement\r\n\r\nPowerShell engine adds `.Where` and `.ForEach` extension methods to IEnumerable collections.  There is code to support tab completion, but when a user inspects an object via `Get-Member`, they don't show up.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nSince we know these extension methods are available on IEnumerable collections, we should just expose them via `Get-Member` and call the MemberType `ExtensionMethod`.  Formatting would need to increase the column width by 1 to accommodate.\r\n\r\nAlso return the overload definitions like other methods:\r\n\r\n```powershell\r\nPS> @(1).GetType\r\n\r\nOverloadDefinitions\r\n-------------------\r\ntype GetType()\r\n\r\nPS> @(1).ForEach\r\nPS>\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> Since we know these extension methods are available on IEnumerable collections\r\n\r\nActually, they're (sensibly) available on _any_ object  and even on `$null` - in the interest of unified treatment of scalars and collections:\r\n\r\n```powershell\r\nPS> (1).foreach({ $_ + 1 })\r\n2\r\n```\r\n\r\n```powershell\r\n# Produces no output, because there's nothing to enumerate,\r\n# but the fact that invoking the method doesn't produce an exception is evidence\r\n# that the method is supported\r\nPS> $null.foreach({ 'move along, nothing to see here' })\r\n```\r\n\r\nTab completion indeed currently seems limited  to `IEnumerable`s.\r\n\r\nAlso, calling them _extension methods_ invites confusion with actual .NET extension methods (which aren't supported at all in PowerShell at this point).\r\n",
      "created_at": "2020-02-07T03:53:03Z",
      "updated_at": "2020-02-07T03:53:03Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "> Also, calling them extension methods invites confusion with actual .NET extension methods (which aren't supported at all in PowerShell at this point).\r\n\r\nYeah. Probably a good idea to not conflate the terms there. They're ETS methods, aren't they?",
      "created_at": "2020-02-07T04:07:33Z",
      "updated_at": "2020-02-07T04:07:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Should we generalize this for all ETS methods?",
      "created_at": "2020-02-07T07:25:03Z",
      "updated_at": "2020-02-07T07:25:03Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Yeah. Probably a good idea to not conflate the terms there. They're ETS methods, aren't they?\r\n\r\nETS members are also a different thing. These are currently most commonly referred to as \"magic\" methods, they exist mostly in the `InvokeMember` binder itself.  They... could use a better name though probably.",
      "created_at": "2020-02-07T13:15:08Z",
      "updated_at": "2020-02-07T13:15:47Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "`IntrinsicMethod` maybe? Or does that imply that it's intrinsic to the object rather than to PowerShell? I guess extrinsic would make more sense but that word probably isn't used often enough to be useful.",
      "created_at": "2020-02-07T13:30:22Z",
      "updated_at": "2020-02-07T13:34:04Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for confirming the hard-wired nature of these members, @SeeminglyScience.\r\n\r\nTrue ETS methods - those associated with specific types - do already show in `Get-Member`'s output, and you can ask for them in isolation with `Get-Member -View Extended`:\r\n\r\n```powershell\r\nPS> [xml]::new() | Get-Member -View Extended\r\n\r\n   TypeName: System.Xml.XmlDocument\r\n\r\nName     MemberType Definition\r\n----     ---------- ----------\r\nToString CodeMethod static string XmlNode(psobject instance)\r\n```\r\n\r\nAs an aside: The \"magic\" members `.ForEach()`, `.Where()`, `.Count` and `.Length`, as well as the indexer you can apply to any object as well as to `$null`, in addition to being hard-wired, regrettably do not even _behave_ like ETS members, at least not always, which has the very unfortunate manifestation that you cannot invoke `.Count` on an object while `Set-StrictMode -Version 2` or higher is in effect - see #2798 (note that the \"magic\" indexer still works in that scenario).\r\n\r\nPerhaps we can come up with a new `-View` enumeration value to show the magic, if you will, which also forces us to come up with a better name.\r\n\r\n* `-View Engine`?\r\n* `-View BuiltIn`?\r\n* `-View PanTypical`, `-View Monad`? (jk)\r\n\r\nShowing them in `Get-Member`'s _default_ output may be too distracting, however , so we could restrict them to `-Force` and `-View  All` use (in addition to the \"magic\"-specific view).\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2020-02-07T13:31:48Z",
      "updated_at": "2020-02-07T13:32:45Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": ">  it's intrinsic to the object rather than to PowerShell?\r\n\r\nYes, I think that's a problematic ambiguity; also, we want to talk about _members_ in general, not just methods.\r\n\r\n\"extrinsic\" is probably too arcane, yes.\r\n\r\nI guess \"engine(-supplied) member\" would tell us that these are members are provided by PowerShell itself - or is \"engine\" itself too general a word?\r\n",
      "created_at": "2020-02-07T13:37:54Z",
      "updated_at": "2020-02-07T13:37:54Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "If I was not very familiar with PowerShell and I saw a member marked as \"engine\" I think I would assume I'm not supposed to use it.",
      "created_at": "2020-02-07T13:58:46Z",
      "updated_at": "2020-02-07T13:58:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Why do we need special view for the ForEach() and Where() methods? We could add them to Extended view.",
      "created_at": "2020-02-07T14:19:30Z",
      "updated_at": "2020-02-07T14:19:30Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "First, my vote is not to limit the display to these two methods, but to also show that `.Count`,` .Length` and indexing are available - show _all_ the magic, at least on demand.\r\n\r\n`Get-Member` currently includes ETS members _by default_ in its output.\r\n\r\nIf we treat magic members like ETS members, they will also show up _by default_.\r\n\r\nDo we want that? I personally think it would be too distracting, because the magic isn't _type-specific_.\r\n\r\nI suppose we could show them only with `Get-Member -View Extended`, but that would be a somewhat obscure distinction, given that \"The default is Adapted, Extended.\" Why would `-View Extended`  _alone_ then show additional members?\r\n\r\nIndependently, I still think we should come up with a descriptive name for the magic, even if only for the sake of _documenting_ them.\r\n",
      "created_at": "2020-02-07T14:40:52Z",
      "updated_at": "2020-02-07T14:40:52Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Do we want that? I personally think it would be too distracting, because the magic isn't _type-specific_.\r\n\r\nAgreed.  Also because it kind of limits how many can be made.  I think there's a lot of room for some more LINQ-esque magic methods, and if they're all shown by default that'll be a lot of noise.\r\n\r\n> I suppose we could show them only with `Get-Member -View Extended`, but that would be a somewhat obscure distinction, given that \"The default is Adapted, Extended.\" Why would `-View Extended` _alone_ then show additional members?\r\n\r\nAh I didn't realize that.  Yeah that doesn't make sense then.\r\n\r\n> Independently, I still think we should come up with a descriptive name for the magic, even if only for the sake of _documenting_ them.\r\n\r\n\ud83d\udc4d ",
      "created_at": "2020-02-07T14:47:12Z",
      "updated_at": "2020-02-07T14:47:12Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Re terminology:\r\n\r\nAs an aside: I just noticed that [the `Get-Member` topic](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/get-member) uses \"intrinsic\" to refer to the <del>type-native properties.</del> (in fact, the term does refer to _engine_-supplied members such as `.psobject`; in that sense they are intrinsic to helper type `[psobject]`; still, the name is ambiguous).\r\n\r\nIt occurred to me that there is a well-established term that could fit: _automatic_, as used in the name for the built-in variables.\r\n\r\nSo how about \"automatic [type] members\" and `-View Automatic`?\r\n\r\n",
      "created_at": "2020-02-07T14:56:15Z",
      "updated_at": "2020-02-15T17:03:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If LINQ was mentioned why do not use the name?",
      "created_at": "2020-02-07T16:13:24Z",
      "updated_at": "2020-02-07T16:13:24Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Because these automatic members (hint, hint) have nothing to do with LINQ (note that @SeeminglyScience  said LINQ-_esque_, i.e., LINQ-_like_)",
      "created_at": "2020-02-07T16:16:36Z",
      "updated_at": "2020-02-07T16:16:36Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Please see https://github.com/MicrosoftDocs/PowerShell-Docs/issues/5627 for a proposal to establish an official term for these automatic members and to document in them in a dedicated conceptual topic.",
      "created_at": "2020-03-24T03:20:06Z",
      "updated_at": "2020-03-24T03:20:06Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I noticed that _some_ of the automatic members - namely the reflection-related ones (`.psobject`, `.pstyenames`, ...) - already _do_ show up with `-Force`, so showing them _all_ with `-Force` makes sense, complemented by a dedicated `-View Automatic`.",
      "created_at": "2020-03-24T12:43:06Z",
      "updated_at": "2020-03-24T12:43:06Z"
    }
  ],
  "created_at": "2020-02-07T03:16:45Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets-Utility"
  ],
  "number": 11798,
  "state": "open",
  "title": "Get-Member should show extension methods",
  "updated_at": "2020-03-24T12:43:07Z"
}