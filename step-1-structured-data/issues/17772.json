{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17772",
  "author": "Zetanova",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nThe execution of a RemotePipeline to a linux system does not set `remotePipe.HasErrors` property correctly. \r\nA local `Pipeline` does set its `localPipe.HasErrors` on child-process exit code != 0 to true\r\n\r\n```csharp\r\n//hack for remote connection\r\n            if (Runspace.DefaultRunspace == null)\r\n            {\r\n                var defaultRunspace = RunspaceFactory.CreateRunspace();\r\n                defaultRunspace.Open();\r\n\r\n                Runspace.DefaultRunspace = defaultRunspace;\r\n            }\r\n\r\n            var localRs = RunspaceFactory.CreateRunspace();\r\n\r\n            var localPipe = localRs.CreatePipeline(\"pwsh -c 'exit 123'\");\r\n\r\n            localRs.Open();\r\n\r\n            var localResult = localPipe.Invoke();\r\n\r\n            Assert.True(localPipe.HadErrors);\r\n            Assert.Empty(localResult);\r\n\r\n            localRs.Close();\r\n\r\n\r\n            var connectionInfo = new SSHConnectionInfo(\"root\", \"lnx1513\", null);\r\n            var remoteRS = RunspaceFactory.CreateRunspace(connectionInfo);\r\n\r\n            var remotePipe = remoteRS.CreatePipeline(\"pwsh -c 'exit 123'\");\r\n\r\n            remoteRS.Open();\r\n\r\n            var remoteResult = remotePipe.Invoke();\r\n\r\n            Assert.True(remotePipe.HadErrors);\r\n            Assert.Empty(remoteResult);\r\n\r\n            remoteRS.Close();\r\n```\n\n### Expected behavior\n\n```console\n`remotePipe.HadErrors == true`\n```\n\n\n### Actual behavior\n\n```console\n`remotePipe.HadErrors == false`\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nnet6, Microsoft.PowerShell (SDK.7.2.5)\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2022-08-14T00:01:19Z",
  "comments": [
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "First, you should use the `System.Management.Automation.PowerShell` type instead of the `System.Management.Automation.RemotePipeline` type, which has been deprecated.\r\n\r\n```csharp\r\nvar connectionInfo = new SSHConnectionInfo(\"root\", \"lnx1513\", null);\r\nvar remoteRS = RunspaceFactory.CreateRunspace(connectionInfo);\r\nremoteRS.Open();\r\n\r\nvar ps = System.Management.Automation.PowerShell::Create(remoteRS);\r\nps.AddScript(\"pwsh -c 'exit 123'\").Invoke();\r\nps.HadErrors\r\n```\r\n\r\nBut the above example still does not work for a native command exiting with non-success return code.  The remoting system sets the `PowerShell.HadErrors` property only if a PowerShell `ErrorRecord` is returned over the remoting error stream.  But PowerShell does not currently emit an ErrorRecord if a native command returns a non-success code.  There has been some discussion about changing PowerShell to include native command return codes as ErrorRecords, and if I remember correctly, there are complications with doing something like this.\r\n\r\nI'll tag this for committee review for awareness.  ",
      "created_at": "2022-08-08T20:29:19Z",
      "updated_at": "2022-08-08T20:29:19Z"
    },
    {
      "author": "Zetanova",
      "author_association": "NONE",
      "body": "`System.Management.Automation.Pipeline` is depricated?\r\nI am using Pipeline to create an `IObservable` or `IAsyncEnumeration` see:\r\nhttps://github.com/Zetanova/hyperv-csi-driver/blob/master/src/hyperv-csi-driver/Automation/PNetPipeExtensions.cs\r\n\r\nThe current problem with `System.Management.Automation.PowerShell` is that it basically does not support\r\nto stream input in and stream output out and abort in between. `Pipeline` does this over `PipelineReader` and `PipelineWriter` \r\n\r\n\r\n\n\n<blockquote><img src=\"https://opengraph.githubassets.com/c37fd833b1453cf74714ac18376599ca5095676c3f0635d634d36052a49c23e5/Zetanova/hyperv-csi-driver\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/Zetanova/hyperv-csi-driver\">hyperv-csi-driver/PNetPipeExtensions.cs at master \u00b7 Zetanova/hyperv-csi-driver</a></strong></div><div>hyperv csi-driver for kubernetes persistence. Contribute to Zetanova/hyperv-csi-driver development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2022-08-09T07:37:37Z",
      "updated_at": "2022-08-09T07:37:39Z"
    },
    {
      "author": "Zetanova",
      "author_association": "NONE",
      "body": "About this issue, it would already be helpful and sufficient to create an Cmdlet in the base library to generate an ErrorRecord from $LastExitCode \r\n\r\nExample:\r\n```csharp\r\nps.AddScript(\"pwsh -c 'exit 123' | Out-Error\").Invoke();\r\n//The result would be an ErrorRecord containing something with 'ErrorCode 123'\r\n```\r\n\r\n\r\n\r\n",
      "created_at": "2022-08-09T07:45:21Z",
      "updated_at": "2022-08-09T07:45:21Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "The `PowerShell` object does indeed support streaming pipeline input/output via the `PSDataCollection` class.  See the overloads for `PowerShell.Invoke`, `PowerShell.BeginInvoke`, `PowerShell.InvokeAsync`.",
      "created_at": "2022-08-09T15:08:00Z",
      "updated_at": "2022-08-09T15:08:00Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Regarding native command error handling, there has been a lot of discussion about it.  I hadn't followed the discussions much, but I think the main problem is that native commands are inconsistent in how they return error codes (especially on Windows).  I think @theJasonHelmick has done some work on this.",
      "created_at": "2022-08-09T15:16:19Z",
      "updated_at": "2022-08-09T15:16:19Z"
    },
    {
      "author": "Zetanova",
      "author_association": "NONE",
      "body": "Yes you are correct, I didn't see the overloads of `PowerShell.InvokeAsync` that are accepting an output collection as a param,\r\nonly that `PowerShell.InvokeAsync` and `PowerShell.EndInvoke` returning one collection.\r\n\r\nBut still for long running pipes like log-tail or a monitor it will be useless, \r\nbecause all output items are stored in the output `PSDataCollection` and cannot be removed.\r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\n",
      "created_at": "2022-08-10T08:36:24Z",
      "updated_at": "2022-08-10T08:36:24Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "`PSDataCollection` is a streaming collection that provides events for data added notifications or can be used as a blocking enumerator.",
      "created_at": "2022-08-10T16:01:39Z",
      "updated_at": "2022-08-10T16:01:39Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "A non-zero exit code doesn't always mean error, but the remote behavior should try to be like the local behavior.  If locally a non-zero is interpreted as an error condition, then it makes sense to have the same for remote. ",
      "created_at": "2022-08-10T16:37:51Z",
      "updated_at": "2022-08-10T16:37:51Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT  The remote case is quite a bit different than the local case, and currently only ErrorRecords affect `HadErrors`, by design.  Changing this would require updating the protocol which means updating versions, documentation, and compatibility tracking.  I feel it is better to address the issue of how native return codes are handled in PowerShell, in general.  But in either case it would be a potential breaking change.",
      "created_at": "2022-08-10T17:08:35Z",
      "updated_at": "2022-08-10T17:08:35Z"
    },
    {
      "author": "Zetanova",
      "author_association": "NONE",
      "body": "@PaulHigin  Can the `PowerShell` output of `PSDataCollection` be used for a command that executes over 7-300 days\r\nand generates 100MB / day ?",
      "created_at": "2022-08-11T05:19:54Z",
      "updated_at": "2022-08-11T05:19:54Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@Zetanova \r\nAre you saying it cannot and that the collection object fills up with data?  If so then you are not using it as a streaming collection, where it acts as a temporary buffer.  You need to remove the data being collected and stream it to wherever the final destination is.  If you allow the data to only be collected then you will eventually run out of system resources, which is a limitation of the system not the collection object.",
      "created_at": "2022-08-11T15:26:38Z",
      "updated_at": "2022-08-11T15:26:38Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@WG-Committee\r\nThe committee discussed this and agrees that ideally the remote case of `HadErrors` should work as it does in the local case, regarding how native command return codes are reported.  However, it currently does not and changing the behavior means updating the remoting protocol, which is something we would not do for such a small change.\r\n\r\nThe workaround is to write the remoting script such that it gets and examines native command return codes and reports back to the client via normal PowerShell error reporting.",
      "created_at": "2022-08-11T15:35:45Z",
      "updated_at": "2022-08-11T15:35:45Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@Zetanova  In case I am not being clear, here is a simple example of using the streaming collection.\r\n\r\n```csharp\r\n            using (var ps = System.Management.Automation.PowerShell.Create(RunspaceMode.NewRunspace))\r\n            {\r\n                ps.AddScript(@\"1..10 | foreach { sleep 1; \"\"Streaming $_\"\"}\");\r\n                PSDataCollection<string> streamingIn = null;\r\n                var streamingOut = new PSDataCollection<string>();\r\n                var async = ps.BeginInvoke(streamingIn, streamingOut);\r\n                // Remove streaming data from streamingOut collection as data becomes available.\r\n                foreach (string item in streamingOut)\r\n                {\r\n                    Console.WriteLine(item);\r\n                }\r\n                ps.EndInvoke(async);\r\n            }\r\n```",
      "created_at": "2022-08-11T15:59:57Z",
      "updated_at": "2022-08-11T15:59:57Z"
    },
    {
      "author": "Zetanova",
      "author_association": "NONE",
      "body": "@PaulHigin  thanks for explanation, I didn't see it.  I bit strange that the enumerator has the side effect of removing the items from the list. If the `steamingOut.EnumeratorNeverBlocks = true` and subscribe to `steamingOut.DataAdded` to then enumerate all buffered item, I assume that it would be non blocking.\r\n\r\n",
      "created_at": "2022-08-11T21:01:12Z",
      "updated_at": "2022-08-11T21:01:12Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Yes, it can be used more or less as a normal collection as well.  But really it was designed to support pipeline streaming for the API.",
      "created_at": "2022-08-11T21:59:15Z",
      "updated_at": "2022-08-11T21:59:15Z"
    },
    {
      "author": "Zetanova",
      "author_association": "NONE",
      "body": "The base concept should not require mutex locking, the naming and design of `PipelineReader<>` is much better. \r\nI am already fine that the `PSDataCollection` does not store the enumerated items (untested) \r\n",
      "created_at": "2022-08-12T12:24:55Z",
      "updated_at": "2022-08-12T12:24:55Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-08-14T00:01:18Z",
      "updated_at": "2022-08-14T00:01:18Z"
    }
  ],
  "created_at": "2022-07-26T10:53:06Z",
  "number": 17772,
  "state": "closed",
  "title": "RemotePipeline does not transfer exit code",
  "updated_at": "2022-08-14T00:01:19Z"
}