{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9779",
  "author": "vors",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n@(1.1) * 10 | measure -Sum  \r\n```\r\n\r\n# Expected behavior\r\nThis is 6.2.0 behavior\r\n```none\r\nCount             : 10\r\nAverage           : \r\nSum               : 11\r\nMaximum           : \r\nMinimum           : \r\nStandardDeviation : \r\nProperty          : \r\n```\r\n\r\n# Actual behavior\r\nThis is 7.0.0-preview.1\r\n```none\r\nCount             : 10\r\nAverage           : \r\nSum               : 10.999999999999998\r\nMaximum           : \r\nMinimum           : \r\nStandardDeviation : \r\nProperty          : \r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-preview.1\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-preview.1\r\nOS                             Darwin 18.6.0 Darwin Kernel Version 18.6.0: Thu Apr 25 23:16:27 PDT 2019; root:xnu-4903.261.4~2/RELEASE_X86_64\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2019-06-19T03:56:44Z",
  "comments": [
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "I guess it may be the dotnet 3.0 thing because it repros even for normal addition\r\n\r\n```\r\nPS > 1.1 + 1.1 + 1.1\r\n3.3000000000000003\r\n```\r\n",
      "created_at": "2019-05-31T05:22:35Z",
      "updated_at": "2019-05-31T05:22:35Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Yeah, .NET Core 3.0 made changes to how it handles precision.  ",
      "created_at": "2019-05-31T05:56:24Z",
      "updated_at": "2019-05-31T05:56:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems come from https://github.com/dotnet/coreclr/pull/22040\r\n\r\nPerhaps we need to change output format (like ToString(\"g\"))\r\n> This variant is chosen for \"R\" and when no precision specifier is given.",
      "created_at": "2019-05-31T06:40:57Z",
      "updated_at": "2019-05-31T06:50:43Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "I think `G9` would be the old behavior equivalent\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings?view=netframework-4.8\r\n\r\n> For Double types, use \"G17\"; for Single types, use \"G9\".  \r\n\r\n```\r\nPS /Users/vors> [string]::Format(\"{0:G9}\", (1.1 + 1.1 + 1.1)) \r\n3.3\r\nPS /Users/vors> [string]::Format(\"{0:G17}\", (1.1 + 1.1 + 1.1))\r\n3.3000000000000003\r\n```",
      "created_at": "2019-06-01T20:51:03Z",
      "updated_at": "2019-06-01T20:51:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems it is for PowerShell Committee review.",
      "created_at": "2019-06-03T06:29:12Z",
      "updated_at": "2019-06-03T06:29:12Z"
    },
    {
      "author": "jzeiders",
      "author_association": "NONE",
      "body": "I discussed this with @rjmholt , @JamesWTruher and @TravisEz13.\r\n\r\nHere's an example from PS Core 6.2:\r\n\r\n```\r\n> 1.1 + 1.1 + 1.1\r\n3.3\r\n\r\n> 3.3\r\n3.3\r\n\r\n> 1.1 + 1.1 + 1.1 -eq 3.3\r\nFalse\r\n```\r\n\r\nSafe to say that's confusing at best.\r\n\r\nCompare this to the current behavior in PS 7:\r\n\r\n```\r\n> 1.1 + 1.1 + 1.1\r\n3.3000000000000003\r\n\r\n> 3.3\r\n3.3\r\n\r\n> 1.1 + 1.1 + 1.1 -eq 3.3\r\nFalse\r\n```\r\nIt seems like the new behavior is less misleading and no functionality except formatting has changed (i.e. this is not a break). So this change is desirable.\r\n\r\n\r\nWe also discussed a bit how to mitigate it, with one suggestion being to default to decimal for real number representations. But that would be a pretty big breaking change, and quite unusual; no other mainstream language uses fixed-point by default, and many scripting languages *only* have floating-point arithmetic.\r\n",
      "created_at": "2019-06-03T22:48:50Z",
      "updated_at": "2019-06-03T23:31:11Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "This is the nature of floating point arithmetic and [such issues have existed for decades](https://en.wikipedia.org/wiki/Floating-point_arithmetic) in various languages that allow you to compare floating point numbers.  Back in the 90's I worked on a graphical programming language that had a special operator for this `~=` (read as \"almost equals\") which performed this comparison for \"close enough equality\": `abs(lhs - rhs) < epsilon`.  I don't remember the exact value we used for epsilon but it was in the area of 1E-13.  \r\n\r\nI doubt the parser would support this syntax but `~eq` would be pretty nifty.  :-)  If not that, then maybe an `-fpeq` or `-eqfp` operator (for floating point equal).",
      "created_at": "2019-06-04T01:06:52Z",
      "updated_at": "2019-06-04T01:07:46Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Hmm. `-eq~` isn't bad either syntax wise... Might be worth looking at, for sure. Technically a separate issue though.\r\n\r\nI think that pretty much puts this issue solidly in the WontFix category. Though the change is confusing at first, I'm glad there is some visual confirmation of the results we would see anyway when checking with comparison operators. :)",
      "created_at": "2019-06-04T01:16:55Z",
      "updated_at": "2019-06-04T01:16:55Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "There's always `-feq`... \ud83d\ude04 ",
      "created_at": "2019-06-04T02:57:38Z",
      "updated_at": "2019-06-04T02:57:38Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Of course floating point arithmetic needs to use `abs(a - b) < eps` for the equality check.\r\nI don't see how it justifies the new behavior, which I'd consider somewhat breaking. \r\nI have few simple powershell scripts that run reporting and sum a bunch of floats like `1.1`, `0.8`. Now I'm just constantly have to round things up in my head. I'd say that a float format.xml or some analog should be provided so precision in the double / float display could be controlled.",
      "created_at": "2019-06-04T04:31:09Z",
      "updated_at": "2019-06-04T04:31:09Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "I'd say the @PowerShell/powershell-committee should review this issue to be sure, but I think there are a few factors in favour of not trying to go back to the old behaviour:\r\n- The most noticeable part of the change is interactive, which isn't classed as breaking change\r\n- This change happened at the .NET Core 3 level, would be quite involved to mitigate, and I suspect we'd never quite restore the old behaviour. (We looked into this today and this is beyond a formatter issue; there are places that PowerShell doesn't hook into where this change happens, in fact `(3*1.1).ToString()` has changed behaviour (the real breaking change) and I very much doubt we could fix that in a consistent way)\r\n- The old behaviour was totally misleading. Floating point math is hard enough for those trained to be wary of it, and PowerShell needs to be accessible to casual scripters\r\n\r\nFor a reporting script, that seems like a good candidate for `'{0:g5}' -f $value`",
      "created_at": "2019-06-04T04:56:17Z",
      "updated_at": "2019-06-04T04:56:17Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": ">  PowerShell needs to be accessible to casual scripters\r\n\r\nThat's why `1.1 + 1.1 + 1.1` should be `3.3` :D \r\n\r\nThanks for the `-f` suggestion, is there a way to apply it to all the output of `@(1.1) * 10 | measure -Sum` ? In the sense of, I still want to see both `Count` and `Sum`. The only way I see with `-f` is to print them by hands, which is tedious.",
      "created_at": "2019-06-04T05:02:35Z",
      "updated_at": "2019-06-04T05:04:29Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vors Above I referenced CoreFX PR where the change come from. But I did not read all discussions about this. While Core 3.0 is preview we could make a request to enhance an API in CoreFX to set default behavior for the formatting.",
      "created_at": "2019-06-04T12:34:19Z",
      "updated_at": "2019-06-04T12:34:19Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov I like that idea.\r\n\r\nLet me add a little more color to the original bug report, so it's in the context.\r\nHere is the output of my self-made-reporting script on \r\n\r\n## 6.2.0\r\n\r\n```\r\n== HIGH ==\r\n\r\nCount             : 14\r\nAverage           : \r\nSum               : 5.9\r\nMaximum           : \r\nMinimum           : \r\nStandardDeviation : \r\nProperty          : \r\n\r\n\r\n\r\ncount points project\r\n----- ------ -------\r\n    1    0.2 \r\n    5    2.1 xxxx\r\n    1    1.5 xxxxxxxxxx\r\n    6    1.7 xxxx\r\n    1    0.4 xxxxxxx\r\n\r\n\r\n== ALL ==\r\n\r\nCount             : 22\r\nAverage           : \r\nSum               : 8.8\r\nMaximum           : \r\nMinimum           : \r\nStandardDeviation : \r\nProperty          : \r\n\r\n\r\n\r\n\r\n== NORMAL ==\r\nCount             : 8\r\nAverage           : \r\nSum               : 2.9\r\nMaximum           : \r\nMinimum           : \r\nStandardDeviation : \r\nProperty          : \r\n```\r\n\r\n## 7.0.0-preview1\r\n\r\n```\r\n== HIGH ==\r\n\r\nCount             : 14\r\nAverage           : \r\nSum               : 5.9\r\nMaximum           : \r\nMinimum           : \r\nStandardDeviation : \r\nProperty          : \r\n\r\n\r\n\r\n            points project       count\r\n            ------ -------       -----\r\n               0.2                   1\r\n               2.1 xxxx              5\r\n               1.5 xxxxxxxxxxxxx     1\r\n1.6999999999999997 xxxxx             6\r\n               0.4 xxxxxxx           1\r\n\r\n\r\n== ALL ==\r\n\r\nCount             : 22\r\nAverage           : \r\nSum               : 8.8\r\nMaximum           : \r\nMinimum           : \r\nStandardDeviation : \r\nProperty          : \r\n\r\n\r\n\r\n\r\n== NORMAL ==\r\nCount             : 8\r\nAverage           : \r\nSum               : 2.9000000000000004\r\nMaximum           : \r\nMinimum           : \r\nStandardDeviation : \r\nProperty          : \r\n```\r\n\r\n\r\nInside of the script that generates it, I just use `(... | measure-object -Sum).Sum` for all the things. I hope that adds a little bit of color to the issue. I'd expect that to come up in many other people workflows, but don't have any data to prove it.",
      "created_at": "2019-06-04T16:55:12Z",
      "updated_at": "2019-06-04T16:55:12Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee discussed this, we agree to change the formatting of PSObject be consistent with Windows PowerShell 5.1.  It appears from the [corefx change](https://github.com/dotnet/coreclr/pull/22040/files#diff-37631fe33cc7e94eacd4f41d57c11ed6L247), it used to be 15.",
      "created_at": "2019-06-12T22:11:11Z",
      "updated_at": "2019-06-12T22:11:11Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT awesome, thank you",
      "created_at": "2019-06-13T01:40:22Z",
      "updated_at": "2019-06-13T01:40:22Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Just want to add that this is a by design change in .NET Core to fix the previously broken round-trippable string returned by `double.ToString()`.\r\nExample:\r\n```\r\n$a = 1.1 * 3\r\n$b = [double]::Parse($a.ToString())\r\n$a -eq $b\r\n```\r\nIn pwsh-7.0.0-preview.1, you will see `$a -eq $b` returns `True`, while in pwsh-6.2 you will see `False`.\r\n\r\nTo mitigate the unfriendly string representation in PowerShell, we will need to change [the `ToString` method](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/MshObject.cs#L1270) in `MshObject.cs`, so that during formatting, all double/float values can be converted to string using the old precision specifiers (`G15` for double and `G7` for float).\r\nAlso, the explicit conversion from double/float to `[string]` also needs to be changed to honor the old precision specifiers.",
      "created_at": "2019-06-13T15:43:06Z",
      "updated_at": "2019-06-13T15:43:06Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #9893, which has now been successfully released as `v7.0.0-preview.2`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.2)\n",
      "created_at": "2019-07-17T20:56:25Z",
      "updated_at": "2019-07-17T20:56:25Z"
    }
  ],
  "created_at": "2019-05-31T05:20:53Z",
  "number": 9779,
  "state": "closed",
  "title": "Float sum precision regression on 7.0.0-preview1",
  "updated_at": "2019-07-17T20:56:25Z"
}