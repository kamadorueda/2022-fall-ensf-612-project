{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8401",
  "author": "Genbox",
  "body": "\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\nGet-AuthenticodeSignature c:\\Windows\\System32\\ApplyTrustOffline.exe\r\n\r\n    Directory: C:\\Windows\\System32\r\n\r\n\r\nSignerCertificate                         Status                    StatusMessage             Path\r\n-----------------                         ------                    -------------             ----\r\n84EC67B9AC9D7789BAB500503A7862173F432ADB  Valid                     Signature verified.       ApplyTrustOffline.exe\r\n```\r\n\r\n# Expected behavior\r\n\r\nShould return 458D803A5CF470DD3F01A475214938D97A5051E8 as evident by running sigcheck. This can also be verified by right-clicking the c:\\Windows\\System32\\ApplyTrustOffline.exe, select 'Properties' and check the \"Digital Signatures\" tab.\r\n\r\n```none\r\nsigcheck64.exe -i c:\\Windows\\System32\\ApplyTrustOffline.exe\r\n\r\nSigcheck v2.70 - File version and signature viewer\r\nCopyright (C) 2004-2018 Mark Russinovich\r\nSysinternals - www.sysinternals.com\r\n\r\nc:\\windows\\system32\\ApplyTrustOffline.exe:\r\n        Verified:       Signed\r\n        Signing date:   8:38 AM 11/1/2018\r\n        Signing date:   8:38 AM 11/1/2018\r\n        Catalog:        c:\\windows\\system32\\ApplyTrustOffline.exe\r\n        Signers:\r\n           Microsoft Windows Publisher\r\n                Cert Status:    Valid\r\n                Valid Usage:    Protected Process Light Signing, NT5 Crypto, Code Signing\r\n                Cert Issuer:    Microsoft Windows Production PCA 2011\r\n                Serial Number:  33 00 00 01 A9 0F 2D 80 C9 A9 29 38 7C 00 00 00 00 01 A9\r\n                Thumbprint:     458D803A5CF470DD3F01A475214938D97A5051E8\r\n                Algorithm:      sha256RSA\r\n                Valid from:     7:57 PM 6/6/2018\r\n                Valid to:       7:57 PM 5/29/2019\r\n           Microsoft Windows Production PCA 2011\r\n                Cert Status:    Valid\r\n                Valid Usage:    All\r\n                Cert Issuer:    Microsoft Root Certificate Authority 2010\r\n                Serial Number:  61 07 76 56 00 00 00 00 00 08\r\n                Thumbprint:     580A6F4CC4E4B669B9EBDC1B2B3E087B80D0678D\r\n                Algorithm:      sha256RSA\r\n                Valid from:     7:41 PM 10/19/2011\r\n                Valid to:       7:51 PM 10/19/2026\r\n           Microsoft Root Certificate Authority 2010\r\n                Cert Status:    Valid\r\n                Valid Usage:    All\r\n                Cert Issuer:    Microsoft Root Certificate Authority 2010\r\n                Serial Number:  28 CC 3A 25 BF BA 44 AC 44 9A 9B 58 6B 43 39 AA\r\n                Thumbprint:     3B1EFD3A66EA28B16697394703A72CA340A05BD5\r\n                Algorithm:      sha256RSA\r\n                Valid from:     10:57 PM 6/23/2010\r\n                Valid to:       11:04 PM 6/23/2035\r\n        Counter Signers:\r\n           Microsoft Time-Stamp Service\r\n                Cert Status:    Valid\r\n                Valid Usage:    Timestamp Signing\r\n                Cert Issuer:    Microsoft Time-Stamp PCA 2010\r\n                Serial Number:  33 00 00 00 D1 98 CF E4 3C 99 25 64 84 00 00 00 00 00 D1\r\n                Thumbprint:     4A5CCCD24EAFE96B11027A86975D51B976B654F1\r\n                Algorithm:      sha256RSA\r\n                Valid from:     9:26 PM 8/23/2018\r\n                Valid to:       9:26 PM 11/23/2019\r\n           Microsoft Time-Stamp PCA 2010\r\n                Cert Status:    Valid\r\n                Valid Usage:    All\r\n                Cert Issuer:    Microsoft Root Certificate Authority 2010\r\n                Serial Number:  61 09 81 2A 00 00 00 00 00 02\r\n                Thumbprint:     2AA752FE64C49ABE82913C463529CF10FF2F04EE\r\n                Algorithm:      sha256RSA\r\n                Valid from:     10:36 PM 7/1/2010\r\n                Valid to:       10:46 PM 7/1/2025\r\n           Microsoft Root Certificate Authority 2010\r\n                Cert Status:    Valid\r\n                Valid Usage:    All\r\n                Cert Issuer:    Microsoft Root Certificate Authority 2010\r\n                Serial Number:  28 CC 3A 25 BF BA 44 AC 44 9A 9B 58 6B 43 39 AA\r\n                Thumbprint:     3B1EFD3A66EA28B16697394703A72CA340A05BD5\r\n                Algorithm:      sha256RSA\r\n                Valid from:     10:57 PM 6/23/2010\r\n                Valid to:       11:04 PM 6/23/2035\r\n        Company:        Microsoft Corporation\r\n        Description:    \"ApplyTrustOffline.PROGRAM\"\r\n        Product:        Microsoft\u00ab Windows\u00ab Operating System\r\n        Prod version:   10.0.17134.407\r\n        File version:   10.0.17134.407 (WinBuild.160101.0800)\r\n        MachineType:    64-bit\r\n```\r\nNote the first certificate in the chain has the thumbprint 458D803A5CF470DD3F01A475214938D97A5051E8.\r\n\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\n$PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.0-preview.2\r\nPSEdition                      Core\r\nGitCommitId                    6.2.0-preview.2\r\nOS                             Microsoft Windows 10.0.17134\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nThe issue seems to be here: https://github.com/PowerShell/PowerShell/blob/a11810bf3328a400347b17c14eec968e7ebda241/src/System.Management.Automation/security/Authenticode.cs#L295\r\n\r\nThe WTGetSignatureInfo method is completely undocumented, but from running the code it seems to return a different certificate than the one the file is actually signed with.",
  "closed_at": "2018-12-07T23:26:14Z",
  "comments": [
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "I verified that `Get-AuthenticodeSignature c:\\Windows\\System32\\ApplyTrustOffline.exe` is returning the correct signature.  The file is catalog signed and catalog signature take precedence over embedded signatures in signing built-in Windows files.\r\n\r\n`(Get-AuthenticodeSignature c:\\Windows\\System32\\ApplyTrustOffline.exe).SignatureType` will give you where the cmdlet is getting the signature from.\r\n\r\nFeel free to file a feature request to add a switch to force the cmdlet to use the embedded signature, but the default behavior needs to match Windows Authenticode behavior.",
      "created_at": "2018-12-07T23:26:06Z",
      "updated_at": "2018-12-07T23:26:06Z"
    },
    {
      "author": "Genbox",
      "author_association": "NONE",
      "body": "@TravisEz13 Sigcheck and Windows properties verify the signature using a catalog as well. It seems that calling WTGetSignatureInfo (used in Powershell - undocumented) instead of CryptCATAdminAcquireContext2 (used everywhere else and documented) produces different results.\r\n\r\nThis can potentially lead to a security vulnerability when Powershell is used to verify files. Is this really intended behavior?\r\n\r\nI looked for the signer certificate based on the thumbprint provided by WTGetSignatureInfo in the certificate store (both user and machine) and there is no certificate with the thumbprint 84EC67B9AC9D7789BAB500503A7862173F432ADB and it does not even produce a single result on Google. This is unexpected as Windows seems to have explicit trust on a certificate that is neither in the trust store or documented elsewhere.",
      "created_at": "2018-12-08T19:13:29Z",
      "updated_at": "2018-12-08T19:13:29Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@Genbox \tIf you believe this is a security issue, please report the issue as described [here](https://github.com/PowerShell/PowerShell/blob/master/docs/maintainers/issue-management.md#security-vulnerabilities).\r\n\r\nSorry, I'm a bit busy today.  I don't have more for you than I verified the `84EC67B9AC9D7789BAB500503A7862173F432ADB` cert comes from a catalog file under `C:\\windows\\system32\\catroot` and the cert is chained to a trusted CA, `3B1EFD3A66EA28B16697394703A72CA340A05BD5`.",
      "created_at": "2018-12-11T02:27:28Z",
      "updated_at": "2018-12-11T02:27:28Z"
    },
    {
      "author": "Denis1983",
      "author_association": "NONE",
      "body": "> I verified that `Get-AuthenticodeSignature c:\\Windows\\System32\\ApplyTrustOffline.exe` is returning the correct signature. The file is catalog signed and catalog signature take precedence over embedded signatures in signing built-in Windows files.\r\n> \r\n> `(Get-AuthenticodeSignature c:\\Windows\\System32\\ApplyTrustOffline.exe).SignatureType` will give you where the cmdlet is getting the signature from.\r\n> \r\n> Feel free to file a feature request to add a switch to force the cmdlet to use the embedded signature, but the default behavior needs to match Windows Authenticode behavior.\r\n\r\n@TravisEz13 \r\nThen this behavior shall be described for the Get-AuthenticodeSignature cmdlet.\r\n\r\nhttps://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.security/get-authenticodesignature?view=powershell-7.1\n\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.security/get-authenticodesignature\">Get-AuthenticodeSignature (Microsoft.PowerShell.Security) - PowerShell</a></strong></div><div>The Get-AuthenticodeSignature cmdlet gets information about the Authenticode signature for a file or file content as a byte array. If the file is not signed, the information is retrieved, but the fields are blank. </div></blockquote>",
      "created_at": "2021-02-18T14:10:24Z",
      "updated_at": "2021-02-18T14:10:26Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Exactly, that's what the docs describe.  Thanks for clarifying that the docs already doc what you want documented.",
      "created_at": "2021-02-18T18:21:58Z",
      "updated_at": "2021-02-18T18:21:58Z"
    },
    {
      "author": "Genbox",
      "author_association": "NONE",
      "body": "> Exactly, that's what the docs describe. Thanks for clarifying that the docs already doc what you want documented.\r\n\r\nI think he wants the catalog behavior described, which is not in the documentation.",
      "created_at": "2021-02-18T18:33:54Z",
      "updated_at": "2021-02-18T18:33:54Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@Genbox This is standard Windows Authenticode behavior and implied. \r\nHe's asking to say that it doesn't only look at the embedded signature, but Windows allows multiple ways to Authenticode sign.\r\n\r\nAnyone can file a documentation issue.",
      "created_at": "2021-02-18T19:09:37Z",
      "updated_at": "2021-02-18T19:11:18Z"
    },
    {
      "author": "Denis1983",
      "author_association": "NONE",
      "body": "> @Genbox This is standard Windows Authenticode behavior and implied.\r\n> He's asking to say that it doesn't only look at the embedded signature, but Windows allows multiple ways to Authenticode sign.\r\n> \r\n> Anyone can file a documentation issue.\r\n\r\nHow?",
      "created_at": "2021-02-18T19:13:05Z",
      "updated_at": "2021-02-18T19:13:05Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "I created a PR for the docs here:  https://github.com/MicrosoftDocs/PowerShell-Docs/pull/7271.  Issues can be filed in the same repo.",
      "created_at": "2021-02-18T19:33:32Z",
      "updated_at": "2021-02-18T19:34:04Z"
    },
    {
      "author": "Denis1983",
      "author_association": "NONE",
      "body": "Hi here ist the workaround:\r\n```\r\n$certificate = New-Object -TypeName System.Security.Cryptography.X509Certificates.X509Certificate\r\n$certificate = [System.Security.Cryptography.X509Certificates.X509Certificate]::CreateFromSignedFile(\"c:\\Windows\\System32\\ApplyTrustOffline.exe\")\r\n\r\n$certificate2 = New-Object -TypeName System.Security.Cryptography.X509Certificates.X509Certificate2 -ArgumentList $certificate\r\n```\r\n\r\nI but it still would be nice to have an additional option for Get-AuthenticodeSignature cmdlet telling that embedded signature shall be checked.",
      "created_at": "2021-02-23T08:11:38Z",
      "updated_at": "2021-02-23T08:13:09Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@Denis1983 You could ask for a feature request to only get the embedded signature to Get-AuthenticodeSignature.  Perhaps `-EmbeddedOnly` switch would do this.  File an new feature request if you want this.",
      "created_at": "2021-02-24T18:45:51Z",
      "updated_at": "2021-02-24T18:45:51Z"
    }
  ],
  "created_at": "2018-12-05T10:44:05Z",
  "labels": [
    "Issue-Question",
    "WG-Cmdlets",
    "Resolution-Answered"
  ],
  "number": 8401,
  "state": "closed",
  "title": "Get-AuthenticodeSignature returns the wrong signer certificate",
  "updated_at": "2021-02-24T18:45:51Z"
}