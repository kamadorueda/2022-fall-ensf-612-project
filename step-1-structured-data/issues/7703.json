{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7703",
  "author": "KirkMunro",
  "body": "I've run into a number of modules recently that use static variable storage or the local file system to cache login details. This causes problems for any multi-runspace use (or even multi-process when file caching is used) of those modules in scripts. The worst part is that some of these modules don't offer any alternative or workaround that allows you to use them in multiple runspaces without stepping on each other because of the caching.\r\n\r\nThe modules I've had issues with in this area are both from Microsoft: Azure PowerShell (which has workarounds that let you use it with multiple runspaces without one runspace influencing the other) and AzureAD (which does not have any workaround and simply uses static variables to cache the login, bleeding into other runspaces).\r\n\r\nI've shared feedback ([here](https://github.com/Azure/azure-powershell/issues/6054), [here](https://github.com/Azure/azure-powershell/issues/6472) and [here](https://github.com/Azure/azure-powershell/issues/6186) with the Azure PowerShell team on GitHub and there have already been improvements there plus more are planned, and for the AzureAD team I just [logged a comment on the Connect-AzureAD docs page](https://docs.microsoft.com/en-us/powershell/module/azuread/connect-azuread#lf-content=200288235:807401796)), but this is all post-release, based on community members coming back to teams to get them to correct their modules so that they properly respect multiple runspaces (and multiple threads), and make caching optional so that you can run PowerShell in environments where you need to think about such things (like Azure Functions -- ironic that the \"serverless\" platform is where I keep running into issues that make me need to think about the server/architecture where the scripts are run).\r\n\r\nWhat we really need is pre-emptive guidance/documentation (and maybe specific functionality that is built-in to PowerShell) that helps developers avoid these pitfalls in the first place, by following design patterns and best practices that address session caching and multi-runspace/multi-threaded use of PowerShell. This should describe how to use runspace-scoped caching (maybe there's something the PowerShell SDK could provide to make this easier for module authors), why you should not use process-scoped caching with static variables, why you should only cache on disk as a well documented option (users need to know what is cached and when), and why you must always include options to avoid caching entirely and let the PowerShell scripter pass around the token/artifact needed to reuse a session in multiple calls in their script.\r\n\r\nIn a world where we consume web services and often wrap web APIs in PowerShell modules, I feel making sure people get this right by providing the appropriate guidance is really important.\r\n\r\nThoughts?",
  "closed_at": null,
  "comments": [
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Something that could help here, that has been suggested in the past but has yet to see some tech investment: PowerShell module analyzer or code analyzers for binary modules that could sniff-out things to avoid like static variables in binary modules. [This](https://marketplace.visualstudio.com/items?itemName=VisualStudioPlatformTeam.MicrosoftCodeAnalysis2017), but for binary modules, would be wonderful.",
      "created_at": "2018-09-11T15:27:44Z",
      "updated_at": "2018-09-11T15:27:44Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "I had a conflict and could not attend the community call yesterday. Has this been discussed internally or raised on the community call at all?",
      "created_at": "2018-09-26T15:25:40Z",
      "updated_at": "2018-09-26T15:25:40Z"
    }
  ],
  "created_at": "2018-09-04T17:13:48Z",
  "number": 7703,
  "state": "open",
  "title": "Publish guidance for module authors on how to prepare for multi-runspace or multi-threaded PowerShell use",
  "updated_at": "2018-11-08T14:40:58Z"
}