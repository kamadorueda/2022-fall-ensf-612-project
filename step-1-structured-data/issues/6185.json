{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6185",
  "author": "alx9r",
  "body": "It appears that `[ValidateScript()]` performs conditional enumeration on the argument before invoking the validation script.  Is there a way to access the unenumerated argument from the validation script?\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nfunction f {\r\n    param\r\n    (\r\n        [ValidateScript({($_[0] -eq 1) -and ($_[1] -eq 2)})]$x\r\n    )\r\n    'success'\r\n}\r\n\r\nf -x 1,2\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nsuccess\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nf : Cannot validate argument on parameter 'x'. The \"($_[0] -eq 1) -and ($_[1] -e\r\nq 2)\" validation script for the argument with value \"1\" did not return a result\r\nof True. Determine why the validation script failed, and then try the command ag\r\nain.\r\nAt C:\\test.ps1:9 char:6\r\n+ f -x 1,2\r\n+      ~~~\r\n+ CategoryInfo          : InvalidData: (:) [f], ParameterBindingValidationExcept\r\nion\r\n+ FullyQualifiedErrorId : ParameterArgumentValidationError,f\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value                                            \r\n----                           -----                                            \r\nPSVersion                      6.0.0                                            \r\nPSEdition                      Core                                             \r\nGitCommitId                    v6.0.0                                           \r\nOS                             Microsoft Windows 6.3.9600                       \r\nPlatform                       Win32NT                                          \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                          \r\nPSRemotingProtocolVersion      2.3                                              \r\nSerializationVersion           1.1.0.1                                          \r\nWSManStackVersion              3.0                                              \r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Interesting find.\r\n\r\nI'd say that the right behavior is to pass the bound parameter value _as-is_, whether it happens to be a scalar or an array; no enumeration should be applied, so the current behavior is definitely unexpected.\r\n\r\nJust to state it explicitly: In your example, the validation script block is unexpectedly called _once for each array element_, with `$_` bound to that element, even though you're passing the array as a single value.\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-02-18T23:03:45Z",
      "updated_at": "2018-02-18T23:03:45Z"
    },
    {
      "author": "rmbolger",
      "author_association": "NONE",
      "body": "The mind boggling thing is that it happens even when the parameter is explicitly typed as an array. It has been this way since at least PowerShell 3. I haven't personally tested any further back. It makes validating an array as a whole basically impossible with ValidateScript which is annoying for things like byte arrays that are used a ton in crypto stuff.\r\n\r\nHere's a more visual example.\r\n\r\n```powershell\r\nfunction Test-ByteArray {\r\n    [CmdletBinding()]\r\n    param(\r\n        [Parameter(Mandatory,Position=0)]\r\n        [ValidateScript({\r\n            Write-Verbose \"(Validate)     Type: $($_.GetType())\"\r\n            Write-Verbose \"(Validate)   Length: $($_.Length)\"\r\n            Write-Verbose \"(Validate) Contents: $($_ -join ',')\"\r\n            return $true\r\n\r\n        })]\r\n        [byte[]]$InputObject\r\n    )\r\n\r\n    Write-Verbose \"(Function)     Type: $($InputObject.GetType())\"\r\n    Write-Verbose \"(Function)   Length: $($InputObject.Length)\"\r\n    Write-Verbose \"(Function) Contents: $($InputObject -join ',')\"\r\n\r\n}\r\n\r\n$VerbosePreference = 'Continue'\r\n$bytes = [byte[]]@(27,42,35)\r\nTest-ByteArray $bytes\r\n```\r\n\r\nOutput:\r\n\r\n```\r\nVERBOSE: (Validate)     Type: byte\r\nVERBOSE: (Validate)   Length: 1\r\nVERBOSE: (Validate) Contents: 27\r\nVERBOSE: (Validate)     Type: byte\r\nVERBOSE: (Validate)   Length: 1\r\nVERBOSE: (Validate) Contents: 42\r\nVERBOSE: (Validate)     Type: byte\r\nVERBOSE: (Validate)   Length: 1\r\nVERBOSE: (Validate) Contents: 35\r\nVERBOSE: (Function)     Type: byte[]\r\nVERBOSE: (Function)   Length: 3\r\nVERBOSE: (Function) Contents: 27,42,35\r\n```\r\n\r\n",
      "created_at": "2019-08-12T21:09:47Z",
      "updated_at": "2019-08-12T21:09:47Z"
    }
  ],
  "created_at": "2018-02-18T16:14:14Z",
  "labels": [
    "WG-Language",
    "Issue-Discussion"
  ],
  "number": 6185,
  "state": "open",
  "title": "Is there a way to access the unenumerated argument in [ValidateScript()]?",
  "updated_at": "2019-08-12T21:09:47Z"
}