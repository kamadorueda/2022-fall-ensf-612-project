{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16943",
  "author": "alexbuzzbee",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\n```\r\nPS> 1/0\r\nRuntimeException: Attempted to divide by zero.\r\nPS> Get-Error | Out-String > out-string.txt\r\n```\n\n### Expected behavior\n\n```console\nException             : \r\n    Type           : System.Management.Automation.RuntimeException\r\n    ErrorRecord    : \r\n        Exception             : \r\n            Type    : System.Management.Automation.ParentContainsErrorRecordException\r\n            Message : Attempted to divide by zero.\r\n            HResult : -2146233087\r\n        CategoryInfo          : NotSpecified: (:) [], ParentContainsErrorRecordException\r\n        FullyQualifiedErrorId : RuntimeException\r\n        InvocationInfo        : \r\n            ScriptLineNumber : 1\r\n            OffsetInLine     : 1\r\n            HistoryId        : -1\r\n            Line             : 1/0\r\n            PositionMessage  : At line:1 char:1\r\n                               + 1/0\r\n                               + ~~~\r\n            CommandOrigin    : Internal\r\n        ScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\n    TargetSite     : \r\n        Name          : Divide\r\n        DeclaringType : System.Management.Automation.IntOps, System.Management.Automation, Version=7.2.1.500, Culture=neutral, PublicKeyToken=31bf3856ad364e35\r\n        MemberType    : Method\r\n        Module        : System.Management.Automation.dll\r\n    Message        : Attempted to divide by zero.\r\n    Data           : System.Collections.ListDictionaryInternal\r\n    InnerException : \r\n        Type    : System.DivideByZeroException\r\n        Message : Attempted to divide by zero.\r\n        HResult : -2147352558\r\n    Source         : System.Management.Automation\r\n    HResult        : -2146233087\r\n    StackTrace     : \r\n   at System.Management.Automation.IntOps.Divide(Int32 lhs, Int32 rhs)\r\n   at System.Dynamic.UpdateDelegates.UpdateAndExecute2[T0,T1,TRet](CallSite site, T0 arg0, T1 arg1)\r\n   at System.Management.Automation.Interpreter.DynamicInstruction`3.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\nCategoryInfo          : NotSpecified: (:) [], RuntimeException\r\nFullyQualifiedErrorId : RuntimeException\r\nInvocationInfo        : \r\n    ScriptLineNumber : 1\r\n    OffsetInLine     : 1\r\n    HistoryId        : -1\r\n    Line             : 1/0\r\n    PositionMessage  : At line:1 char:1\r\n                       + 1/0\r\n                       + ~~~\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\n```\n\n\n### Actual behavior\n\n```console\n\u001b[92mException             : \u001b[0m\r\n    \u001b[92mType           : \u001b[0mSystem.Management.Automation.RuntimeException\r\n    \u001b[92mErrorRecord    : \u001b[0m\r\n        \u001b[92mException             : \u001b[0m\r\n            \u001b[92mType    : \u001b[0mSystem.Management.Automation.ParentContainsErrorRecordException\r\n            \u001b[92mMessage : \u001b[0m\u001b[31;1mAttempted to divide by zero.\r\n            \u001b[92mHResult : \u001b[0m-2146233087\r\n        \u001b[92mCategoryInfo          : \u001b[0mNotSpecified: (:) [], ParentContainsErrorRecordException\r\n        \u001b[92mFullyQualifiedErrorId : \u001b[0mRuntimeException\r\n        \u001b[92mInvocationInfo        : \u001b[0m\r\n            \u001b[92mScriptLineNumber : \u001b[0m1\r\n            \u001b[92mOffsetInLine     : \u001b[0m1\r\n            \u001b[92mHistoryId        : \u001b[0m-1\r\n            \u001b[92mLine             : \u001b[0m1/0\r\n            \u001b[92mPositionMessage  : \u001b[0mAt line:1 char:1\r\n                               + 1/0\r\n                               + \u001b[31;1m~~~\r\n            \u001b[92mCommandOrigin    : \u001b[0mInternal\r\n        \u001b[92mScriptStackTrace      : \u001b[0mat <ScriptBlock>, <No file>: line 1\r\n    \u001b[92mTargetSite     : \u001b[0m\r\n        \u001b[92mName          : \u001b[0mDivide\r\n        \u001b[92mDeclaringType : \u001b[0mSystem.Management.Automation.IntOps, System.Management.Automation, Version=7.2.1.500, Culture=neutral, PublicKeyToken=31bf3856ad364e35\r\n        \u001b[92mMemberType    : \u001b[0mMethod\r\n        \u001b[92mModule        : \u001b[0mSystem.Management.Automation.dll\r\n    \u001b[92mMessage        : \u001b[0m\u001b[31;1mAttempted to divide by zero.\r\n    \u001b[92mData           : \u001b[0mSystem.Collections.ListDictionaryInternal\r\n    \u001b[92mInnerException : \u001b[0m\r\n        \u001b[92mType    : \u001b[0mSystem.DivideByZeroException\r\n        \u001b[92mMessage : \u001b[0m\u001b[31;1mAttempted to divide by zero.\r\n        \u001b[92mHResult : \u001b[0m-2147352558\r\n    \u001b[92mSource         : \u001b[0mSystem.Management.Automation\r\n    \u001b[92mHResult        : \u001b[0m-2146233087\r\n    \u001b[92mStackTrace     : \u001b[0m\r\n   at System.Management.Automation.IntOps.Divide(Int32 lhs, Int32 rhs)\r\n   at System.Dynamic.UpdateDelegates.UpdateAndExecute2[T0,T1,TRet](CallSite site, T0 arg0, T1 arg1)\r\n   at System.Management.Automation.Interpreter.DynamicInstruction`3.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n\u001b[92mCategoryInfo          : \u001b[0mNotSpecified: (:) [], RuntimeException\r\n\u001b[92mFullyQualifiedErrorId : \u001b[0mRuntimeException\r\n\u001b[92mInvocationInfo        : \u001b[0m\r\n    \u001b[92mScriptLineNumber : \u001b[0m1\r\n    \u001b[92mOffsetInLine     : \u001b[0m1\r\n    \u001b[92mHistoryId        : \u001b[0m-1\r\n    \u001b[92mLine             : \u001b[0m1/0\r\n    \u001b[92mPositionMessage  : \u001b[0mAt line:1 char:1\r\n                       + 1/0\r\n                       + \u001b[31;1m~~~\r\n    \u001b[92mCommandOrigin    : \u001b[0mInternal\r\n\u001b[92mScriptStackTrace      : \u001b[0mat <ScriptBlock>, <No file>: line 1\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nPS> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.1\r\nPSEdition                      Core\r\nGitCommitId                    7.2.1\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "alexbuzzbee",
      "author_association": "NONE",
      "body": "I understand that this may sometimes be desired behavior, however it would be very helpful to have a switch causing PowerShell to generate plain text output without ANSI escape sequences for an individual `Out-String` command.\r\n\r\nI use `Out-String` for logging the streams output by PowerShell scripts, and I have to work around the current behavior by using regular expressions to match the escape sequences and remove them so that the log content is readable.\r\n\r\nIf there is a better alternative, I would appreciate information about it from the community, as I couldn't find one myself.",
      "created_at": "2022-03-01T17:38:45Z",
      "updated_at": "2022-03-01T17:38:52Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> If there is a better alternative\r\n```\r\n$PSStyle.OutputRendering = 'Host'\r\n```",
      "created_at": "2022-03-01T18:39:38Z",
      "updated_at": "2022-03-01T18:39:38Z"
    },
    {
      "author": "alexbuzzbee",
      "author_association": "NONE",
      "body": "`$PSStyle.OutputRendering = 'Host'` has global effects. I don't want to make changes to the global environment, with potential unexpected consequences and implications, to work around an issue I'm encountering at a single-command level.",
      "created_at": "2022-03-01T18:50:03Z",
      "updated_at": "2022-03-01T18:50:03Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> I don't want to make changes to the global environment\r\n\r\nWrite function or script to switch OutputRendering mode. Something like:\r\n```powershell\r\nfunction out\r\n{\r\n  $PSStyle.OutputRendering = 'Host'\r\n  $input | Out-String                   \r\n  $PSStyle.OutputRendering = 'Ansi'\r\n }      \r\n```\r\n```powershell     \r\n dir -Force /var/cache/pacman/pkg/ | out > ./Desktop/pkg.txt\r\n```",
      "created_at": "2022-03-01T19:27:42Z",
      "updated_at": "2022-03-01T19:27:42Z"
    },
    {
      "author": "alexbuzzbee",
      "author_association": "NONE",
      "body": "I don't want to get into a long argument about `OutputRendering`. While it is a valid workaround, even when reverted quickly, it is still a global state change and thus rather complex to use correctly (requiring saving the previous state and using a `finally` block to avoid leaving the changed state in place if an exception occurs). PowerShell should still provide a solution to this problem that doesn't require such a workaround.",
      "created_at": "2022-03-01T19:59:05Z",
      "updated_at": "2022-03-01T19:59:05Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> PowerShell should still provide a solution to this problem that doesn't require such a workaround.\r\n\r\nThis discussion has been going on since the release of 7.2.1. I hope that the developers will come up with something.",
      "created_at": "2022-03-01T20:22:39Z",
      "updated_at": "2022-03-01T20:22:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "All these Out-* cmdlets belong to the formatting subsystem so formatted output is the expected behavior.\r\n\r\n> This discussion has been going on since the release of 7.2.1. I hope that the developers will come up with something.\r\n\r\nI agree we need redesign this. (No one actually designed this in depth.)",
      "created_at": "2022-03-02T16:49:54Z",
      "updated_at": "2022-03-02T16:49:54Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "The WG agrees that a reasonable ask for a new parameter `-OutputRendering` to be added to the applicable `Out` cmdlets would be useful. While it is possible to change the preference variable, it is a little clunky if you want it just for one invocation of `out-string` ",
      "created_at": "2022-03-04T00:06:44Z",
      "updated_at": "2022-03-04T00:06:44Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "We've had some changes to ANSI output so the original repro doesn't repro for me in 7.3 anymore",
      "created_at": "2022-10-04T17:13:10Z",
      "updated_at": "2022-10-04T17:13:10Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "I was thinking about adding `-StripAnsiFormatting` to `Out-File` and `Out-String` for this very reason, will gladly take a stab at implementation. I frequently use vim as a pager with `Select-String $pattern $files | vim -` getting cluttered with formatting escapes.",
      "created_at": "2022-10-05T20:46:44Z",
      "updated_at": "2022-10-05T20:48:59Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> I was thinking about adding `-StripAnsiFormatting` to `Out-File` and `Out-String` for this very reason, will gladly take a stab at implementation. I frequently use vim as a pager with `Select-String $pattern $files | vim -` getting cluttered with formatting escapes.\r\n\r\nFYI you can sort of do this already, I have the inverse set up as [Out-AnsiFormatting](https://github.com/SeeminglyScience/dotfiles/blob/f94bf2c279a514e2facb9c9bad65e170607d251e/Documents/PowerShell/Utility.psm1#L5423-L5492) in my profile. You can copy the code and set `OutputFormatting` to `PlainText` instead.\r\n\r\n(not weighing in on whether the switch should exist, just offering a workaround)",
      "created_at": "2022-10-06T16:26:13Z",
      "updated_at": "2022-10-06T16:26:13Z"
    }
  ],
  "created_at": "2022-03-01T17:35:13Z",
  "number": 16943,
  "state": "open",
  "title": "Out-String includes ANSI escape sequences",
  "updated_at": "2022-10-06T16:26:13Z"
}