{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15892",
  "author": "ArnoCan",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nThe behaviour of an escaped double quote depends on the call context and is inconsistent. This issue is technically  related to #15888 and #15889. The specifications and definitions are:\r\n\r\n* [PowerShell-7.1 - B. Grammar](https://docs.microsoft.com/en-us/powershell/scripting/lang-spec/chapter-15?view=powershell-7.1) - see *escaped-character*\r\n* [about_Quoting_Rules](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_quoting_rules?view=powershell-7.1) - PowerShell-7.1\r\n\r\n\r\n1. The pure evaluation from the PowerShell prompt behaves as stated in [about_Quoting_Rules](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_quoting_rules?view=powershell-7.1):\r\n   ```\r\n   PS C:\\PowerShell-7.1.3> \"`\"a\"\r\n   \"a\r\n   PS C:\\PowerShell-7.1.3>\r\n   ```\r\n2. The call of a PowerShell script\r\n   ```\r\n   write-host -NoNewline \"[\"\r\n   for ( $i = 0; $i -lt $args.count; $i++ ) {\r\n       write-host -NoNewline \"'$($args[$i])', \"\r\n   }\r\n   write-host \"]\"\r\n   ```\r\n   behaves the same way:\r\n   ```\r\n   PS C:\\PowerShell-7.1.3> X:\\print_argv_list.ps1 \"`\"a\"\r\n   ['\"a', ]\r\n   PS C:\\PowerShell-7.1.3>\r\n   ```\r\n3. The call of an executable such as another PowerShell:\r\n   ```\r\n   PS C:\\PowerShell-7.1.3> powershell.exe -noprofile -executionpolicy bypass -file  X:\\print_argv_list.ps1  \"`\"a\"\r\n   ['a', ]\r\n   PS C:\\PowerShell-7.1.3>\r\n   ```\r\n   or Python\r\n   ```\r\n   PS C:\\PowerShell-7.1.3> C:\\Python371\\python.exe -c \"import sys;print(sys.argv[1:])\" \"`\"a\"\r\n   ['a']\r\n   PS C:\\PowerShell-7.1.3>\r\n   ```\r\n   drops the escaped double quote.\r\n\r\nSome trials for a work-around with a PowerShell script:\r\n```\r\nPS> powershell.exe -noprofile -executionpolicy bypass -file  X:\\print_argv_list.ps1  \"`\"a\"\r\n['a', ]\r\nPS> powershell.exe -noprofile -executionpolicy bypass -file  X:\\print_argv_list.ps1  \"```\"a\"\r\n['`a', ]\r\nPS> powershell.exe -noprofile -executionpolicy bypass -file  X:\\print_argv_list.ps1  \"\"\"a\"\r\n['a', ]\r\nPS> powershell.exe -noprofile -executionpolicy bypass -file  X:\\print_argv_list.ps1  \"\\\"\"a\"\r\n['\"a', ]\r\nPS>\r\n```\r\n\r\nsame with Python:\r\n```\r\nPS> C:\\Python371\\python.exe -c \"import sys;print(sys.argv[1:])\" \"\"\"a\"\r\n['a']\r\nPS> C:\\Python371\\python.exe -c \"import sys;print(sys.argv[1:])\" \"```\"a\"\r\n['`a']\r\nPS> C:\\Python371\\python.exe -c \"import sys;print(sys.argv[1:])\" \"\\\"\"a\"\r\n['\"a']\r\nPS>\r\n```\r\nWhere the final trials produced the originally expected result - even though the backslash is not specified in the grammar [PowerShell-7.1 - B. Grammar](https://docs.microsoft.com/en-us/powershell/scripting/lang-spec/chapter-15?view=powershell-7.1) by *escaped-character*.\r\n\r\nThe latter leads me to the assumption, that the execution is actually performed in a DOS/cmd.exe like environment, thus escaped and quoted in accordance to the DOS/cmd.exe command line syntax rules. But I called a PowerShell executable at a PowerShell prompt. So I do not expect an intermediary DOS exec call with it's native command line syntax, which has significant differences.\r\n\r\nIn my case for example, when writing a scanner/lexer/tokenizer this would resultingly mean that in those cases:\r\n\r\nA. The raw command line call string has to be parsed (at least?) twice:\r\n\r\n   1. by a PowerShell syntax scanner\r\n   2. the result again by a DOS/cmd.exe syntax scanner\r\n   3. basically once again for the target process which expects to be executed within a PowerShell environment\r\n\r\nB. The ARGV has to be expected as pre-parsed result from a pure PowerShell environment.\r\n\r\nIf this is true, this makes it actually a bit difficult to estimate the required command line for an less experienced user, if not for all. In particular for complex application calls.\r\n\r\nThe original call should pass the escaped double quote '`\"' as a dumb character '\"' to the subcall when this is an *escaped-character* as specified in the grammar specification. The command line call syntax should not change during the call process. At least it should be protected and/or transformed appropriately and passed transparently to the target executable. The user should have to apply one command line syntax only - PowerShell.\r\n\n\n### Expected behavior\n\n```console\nPS> powershell.exe -noprofile -executionpolicy bypass -file  X:\\print_argv_list.ps1  \"`\"a\"\r\n['\"a', ]\r\n\r\nPS> C:\\Python371\\python.exe -c \"import sys;print(sys.argv[1:])\" \"`\"a\"\r\n['\"a']\n```\n\n\n### Actual behavior\n\n```console\nPS> powershell.exe -noprofile -executionpolicy bypass -file  X:\\print_argv_list.ps1  \"`\"a\"\r\n['a', ]\r\n\r\nPS> C:\\Python371\\python.exe -c \"import sys;print(sys.argv[1:])\" \"`\"a\"\r\n['a']\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2021-08-13T17:00:40Z",
  "comments": [
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Duplicate of #1995",
      "created_at": "2021-08-12T15:24:34Z",
      "updated_at": "2021-08-12T15:24:34Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as duplicate and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2021-08-13T17:00:39Z",
      "updated_at": "2021-08-13T17:00:39Z"
    }
  ],
  "created_at": "2021-08-09T12:02:59Z",
  "labels": [
    "Resolution-Duplicate"
  ],
  "number": 15892,
  "state": "closed",
  "title": "Escape of double quote behaves call context dependent inconsistent, and basically erroneous.",
  "updated_at": "2021-08-13T17:00:40Z"
}