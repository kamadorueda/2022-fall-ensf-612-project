{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12522",
  "author": "erenturkm",
  "body": "I am writing a multi-platform c# command line application using .NET Core 3.1 that will need to work as a single executable. I am using Visual Studio 2019 (16.5.4). My OS is Windows 10.0.18363.778 and I intentionally did NOT install Powershell 7.  Added Microsoft.Powershell.SDK 7.0.0 nuget package to the project. \r\n# Steps to reproduce\r\n1) Compile the project with a specific rid (Win-x64) : If I do NOT add a RID there is no problem.\r\n2) Inside Code block\r\n```\r\nusing (PowerShell PowerShellInst = PowerShell.Create())\r\n{\r\nPowerShellInst.Invoke(); \r\n}\r\n```\r\n# Expected behavior\r\nInvokes Powershell and runs the script block created.\r\n```none\r\n\r\n```\r\n\r\n# Actual behavior\r\nThrows FileNotFound Execption for  Microsoft.Management.Infrastructure file.\r\n```none\r\n\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\nSingle I dont have the shell installed, I am copying info from debuging my application.\r\nPSVersion=7.0.0\r\nPSEdition=Core\r\nWSManStackVersion=3.0\r\nPSRemotingProtocolVersion=2.3\r\n\r\nWhen I check the directory for non RID specified build output, I fnd the Microsoft.Management.Infrastructure under runtimes whereas, when build with Win-x64 file is not there.\r\n",
  "closed_at": "2020-05-07T10:48:48Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Try Win7-x64.",
      "created_at": "2020-04-30T14:38:25Z",
      "updated_at": "2020-04-30T14:38:25Z"
    },
    {
      "author": "erenturkm",
      "author_association": "NONE",
      "body": "RID Win7-x64 works, however I do not want to use it for long.   Since it creates binaries specific to Win 7/Win Server 2008 and these OS's are unsupported by .net core 3.1.\r\n \r\nWhen can we expect this limitation to be lifted?",
      "created_at": "2020-04-30T15:35:34Z",
      "updated_at": "2020-04-30T15:35:34Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "https://docs.microsoft.com/en-us/dotnet/core/rid-catalog#windows-rids\r\n\r\nI think win-x64 is for .Net Core only but MMI is Windows-only.\n\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/dotnet/core/rid-catalog\">.NET Core Runtime IDentifier (RID) catalog</a></strong></div><div>Learn about the Runtime IDentifier (RID) and how RIDs are used in .NET Core.</div></blockquote>",
      "created_at": "2020-04-30T15:47:52Z",
      "updated_at": "2020-04-30T15:47:54Z"
    },
    {
      "author": "erenturkm",
      "author_association": "NONE",
      "body": "iSazanov, I couldnt understand what you intended to say. I have several other packages in my application not just PS. Its quite possible that they will stop supporting Win7-x64 platform for their packages since it is not supported by .net core 3.1. PS team will have to upgrade Microsoft.Management.Infrastructure.dll and related resources for newer/supported OS's. I am asking when we can expect this?",
      "created_at": "2020-05-01T07:55:52Z",
      "updated_at": "2020-05-01T07:55:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "MMI is deprecated and you shouldn't use it in new projects if possible. MSFT has no plan invest in MMI or port it on Linux or MacOS. Also I believe MMI package is linked to Win7-x64 RID.\r\nWe have to accept this as-is for now.\r\n\r\nPerhaps @adityapatwardhan could add more info.\r\n\r\n",
      "created_at": "2020-05-01T17:02:47Z",
      "updated_at": "2020-05-01T17:02:47Z"
    },
    {
      "author": "erenturkm",
      "author_association": "NONE",
      "body": "I am not using MMI intentionally, here is what I do:\r\nI have the latest  Microsoft.Powershell.SDK Nuget package (7.0.0) installed as a dependency per advice from [this blog](https://devblogs.microsoft.com/powershell/depending-on-the-right-powershell-nuget-package-in-your-net-project/).\r\nI am using \"using System.Management.Automation\" at the start of my code.\r\nI am using below 2 lines to call PS:\r\nPowerShell PowerShellInst = PowerShell.Create()\r\nPSOutput = PowerShellInst.Invoke()\r\n\r\nIs there anything else I can do to NOT use MMI?",
      "created_at": "2020-05-02T15:39:25Z",
      "updated_at": "2020-05-02T15:39:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "SMA has dependency on MMI and compile RID is Win7-x64. If you compile a project with another RID and get File not found exception you could manually copy MMI dll to home folder.\r\nPerhaps MMI will be removed in future.",
      "created_at": "2020-05-02T16:22:42Z",
      "updated_at": "2020-05-02T16:22:42Z"
    },
    {
      "author": "erenturkm",
      "author_association": "NONE",
      "body": "Currently Powershell SDK is forcing us to create unsupported binaries for our .net Core 3.1 applications. I see this is not fixed in Ver 7.1 Preview2. Can we get an indicative timeline on when we can expect this to happen?",
      "created_at": "2020-05-03T09:17:40Z",
      "updated_at": "2020-05-03T09:17:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "PowerShell 7.0 is LTS - it will be supported while .Net Core 3.1 is supported.",
      "created_at": "2020-05-03T09:30:38Z",
      "updated_at": "2020-05-03T09:30:38Z"
    },
    {
      "author": "erenturkm",
      "author_association": "NONE",
      "body": "It's not support of Powershell or .NET Core itself. Since .net Core 3.1 is not supported on Win7/Win Server 2008R2, Nobody  (.net Core team, all 3rd party library authors such as myself) is testing their code when compiled with Win7-x64. When I am forced to compile MY code under this RID, I will probably be stuck getting support from other nuget package vendor/authors.  ",
      "created_at": "2020-05-03T09:40:50Z",
      "updated_at": "2020-05-03T09:40:50Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You can see supported OS [here ](https://github.com/dotnet/core/blob/master/release-notes/3.1/3.1-supported-os.md#windows). Win7 SP1+ is supported.\r\n\r\nYou can compile your code with another RID (Win81-x64, Win10-x64) and also put MMI dll manually.",
      "created_at": "2020-05-03T10:21:47Z",
      "updated_at": "2020-05-03T10:21:47Z"
    },
    {
      "author": "erenturkm",
      "author_association": "NONE",
      "body": "1) You are correct for Win7 SP1+ support, I wasnt clear. I ment Win Server 2008 R2 since this app is for servers. So argument is still valid.\r\n2) I tested with Win-x64 with copying MMI manually it works. I can live with that. The only side effect is for Single exe publishing. Is there a way to tell dotnet.exe to add this dll with publish command?   ",
      "created_at": "2020-05-04T08:27:22Z",
      "updated_at": "2020-05-04T08:27:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Is there a way to tell dotnet.exe to add this dll with publish command?\r\n\r\nI think yes. You could ask in MSBuild repo.",
      "created_at": "2020-05-04T16:59:12Z",
      "updated_at": "2020-05-04T16:59:12Z"
    },
    {
      "author": "drmcclelland",
      "author_association": "NONE",
      "body": "My application is a .NET Core 3.1 console application, and for anyone else running into this issue: (System.IO.FileNotFoundException - Could not load file or assembly 'Microsoft.Management.Infrastructure, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.)\r\n\r\nThe key takeaway is the CSPROJ has to have the following value:\r\n\r\n`<RuntimeIdentifier>win7-x64</RuntimeIdentifier>`\r\n\r\nI am using the following nuget package:\r\n\r\n`<PackageReference Include=\"Microsoft.PowerShell.SDK\" Version=\"7.0.3\" />`\r\n\r\nHere's the sample PowerShell code I was running:\r\n\r\n```\r\n                using (var ps = PowerShell.Create())\r\n                {\r\n                    var re = ps.AddScript(\"Get-Process\");\r\n                    var results = re.Invoke();\r\n                }\r\n\r\n```",
      "created_at": "2020-09-09T17:24:36Z",
      "updated_at": "2020-09-09T17:24:36Z"
    }
  ],
  "created_at": "2020-04-29T15:30:41Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered",
    "WG-DevEx-SDK"
  ],
  "number": 12522,
  "state": "closed",
  "title": "Can not find Microsoft.Management.Infrastructure error",
  "updated_at": "2020-09-09T17:24:37Z"
}