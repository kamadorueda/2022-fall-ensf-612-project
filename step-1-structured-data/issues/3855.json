{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3855",
  "author": "mklement0",
  "body": "`Get-Content -Delimiter` can be used to read text records with an arbitrary (literally matching) terminator into an array of strings, as an alternative to reading line by line.\r\n\r\nTo complement this functionality, the general-purpose text-_outputting_ cmdlets should support the same parameter for _creating_ such files:\r\n\r\n* `Set-Content` / `Add-Content`\r\n* `Out-File`\r\n* `Out-String`\r\n\r\n(`ConvertTo-Csv` and `Export-Csv` already have a `-Delimiter` parameter, but there it is a _field_ separator (line-internal), and a newline is implied as the _record_ separator.)\r\n\r\nNote:\r\n\r\n* `-Delimiter ''` would effectively behave the same way as `-NoNewline` (which is currently missing from `Out-String` - see #3684).\r\n\r\n* `` -Delimiter \"`n\" `` on Windows and `` -Delimiter \"`r`n\" `` on Unix would then allow creating text files with the respective other platform's newline sequence on demand - which would also cover #2145.\r\n\r\n * The term _delimiter_ is problematic and already ambiguous in terms of what is currently implemented:\r\n\r\n   * In the context of `*-Csv*` cmdlets, `-Delimiter` refers to a _separator_ - something placed _between_ elements (fields), but _not after the last_.\r\n\r\n   * In the context of `Get-Content`, `-Delimiter` refers to an (optional) _terminator_, something (expected to be placed _after every element_ (record), _including the last_.  \r\n`Get-Content -Delimiter` treats input that differs only with respect to a trailing delimiter identically - to signal an empty trailing element _two_ trailing delimiters are needed.\r\n\r\n   * This `Get-Content -Delimiter` behavior implies that `Set-Content`, `Out-File`, ... should also treat `-Delimiter` to mean _terminator_, and add a trailing delimiter instance to the last record.\r\n\r\nDesired behavior\r\n-----------------\r\n\r\n```powershell\r\n'one', 'two' | Set-Content t.txt -Delimiter '@'\r\nget-content t.txt\r\n'---'\r\nget-content t.txt -Delimiter '@' | % { \"[$_]\" }\r\n```\r\n\r\n```powershell\r\none@two@\r\n---\r\n[one]\r\n[two]\r\n```\r\n\r\nEnvironment Data\r\n------------------\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta (v6.0.0-beta.1)\r\n```\r\n",
  "closed_at": "2021-07-08T21:01:05Z",
  "comments": [
    {
      "author": "tats-u",
      "author_association": "NONE",
      "body": "@iSazonov \r\n`-Delimiter` option is compatible with an option for new lines.\r\nIn Bash, redirection of a line to a file inserts one LF to the end of file.\r\n\r\n```\r\n$ echo a b c > test.txt\r\n$ hexyl ./test.txt\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u250200000000\u2502 61 20 62 20 63 0a       \u250a                         \u2502a b c_  \u250a        \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nIt is required options to reproduce this in PowerShell for Windows:\r\n\r\n- Whether a set of EOL character(s) (LF or CRLF) is inserted just before EOF (`echo -n` in Linux)\r\n- What the set is (LF, CRLF, or native one)\r\n\r\nlike:\r\n\r\n```pwsh\r\n\"a\",\"b\",\"c\" | Out-File text.txt -Encoding utf8NoBOM -Delimiter \" \" -FinalNewLine \"`n\"\r\n\r\n# equals to \r\n\"a\", \"b\", \"c\" -join \" \" | Out-File text.txt -Encoding utf8NoBOM -Delimiter \"`n\"\r\n```",
      "created_at": "2020-05-26T16:17:43Z",
      "updated_at": "2020-05-26T16:17:43Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Setting a newline option is only really applicable for the writing cmdlets rather than the reading ones, but yeah.\r\n\r\nI'm wondering if we should have a base class implement the `-Delimiter` and then have a base class inherit that and add `-NoNewline` to omit the trailing newline (trailing newline would be default -- I think it is currently default, actually?)\r\n\r\nSo it would look something like this:\r\n\r\n1. Base class `DelimitedContentBase` inherits `PSCmdlet` and implements a `[Parameter]` for `Delimiter` (IMO this should also be aliased to something like `-NewlineStyle` or something)\r\n2. `Get-Content` inherits `DelimitedContentBase` and does everything else it needs to.\r\n3. `DelimitedContentWriterBase` inherits `DelimitedContentBase` and extends it with a `[Parameter]` for `-NoNewline` (a switch parameter) (IMO aliased to `-SkipTrailingNewline`, or vice versa)\r\n4. `Set-Content`, `Out-File`, `Out-String`, and `Write-Host` all inherit `DelimitedContentWriterBase`\r\n\r\nThis will involve a bit of refactoring, but it will avoid quite a bit of duplication of code. Some of the base classes may also end up adding methods for stitching the text together, if needed.",
      "created_at": "2020-05-26T17:14:08Z",
      "updated_at": "2020-05-26T17:14:32Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The `-join` operator already covers the case of creating strings with arbitrary delimiters so it doesn't seem necessary to add to the other cmdlets just for symmetry.",
      "created_at": "2021-06-08T20:04:39Z",
      "updated_at": "2021-06-08T20:04:39Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as won't fix and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2021-07-08T21:01:04Z",
      "updated_at": "2021-07-08T21:01:04Z"
    },
    {
      "author": "tats-u",
      "author_association": "NONE",
      "body": "@SteveL-MSFT \r\nLet me make sure of this.  Are you saying that we must take such a ugly approach to force PowerShell to use LF?  I suppose that there are too many parentheses:\r\n\r\n```\r\ntatsu@TATSU-NB-4TH \ue0b0 \ue606 base \ue0b0 ~ \ue0b0 ((echo a b c) -join \"`n\") + \"`n\" | Out-File -NoNewline -Encoding utf8NoBOM test.txt\r\ntatsu@TATSU-NB-4TH \ue0b0 \ue606 base \ue0b0 ~ \ue0b0 hexyl test.txt\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u250200000000\u2502 61 0a 62 0a 63 0a       \u250a                         \u2502a_b_c_  \u250a        \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nCould you tell me how you feel about it?",
      "created_at": "2021-07-08T23:16:24Z",
      "updated_at": "2021-07-08T23:16:24Z"
    },
    {
      "author": "ShivnarenSrinivasan",
      "author_association": "NONE",
      "body": "I found a good solution to this; hopefully it helps you and others @tats-u \r\n\r\nSet `PSDefaultParameterValues` in your profile, and it will automatically modify the `>` operator. (*as it merely aliases* `Out-File`)\r\n\r\n```powershell\r\n$Global:PSDefaultParameterValues[\"Out-File:Encoding\"] = \"utf8\"\r\n$Global:PSDefaultParameterValues['Out-File:NoNewLine'] = $true\r\n```\r\nThe `NoNewLine` fixes both extra new line char, and the unwanted carriage return.\r\n",
      "created_at": "2021-10-02T17:43:36Z",
      "updated_at": "2021-10-02T17:43:36Z"
    },
    {
      "author": "tats-u",
      "author_association": "NONE",
      "body": "@ShivnarenSrinivasan This fixes just the half of the issues.  This just allows us to use the operator `>` instead of piping the cmdlet `Out-File`.\r\nWe still have to take an ugly way ```((Some-Cmdlet) -join \"`n\") + \"`n\"```.",
      "created_at": "2021-10-03T13:05:43Z",
      "updated_at": "2021-10-03T13:05:43Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT Please reconsider, the `-join` is a really ugly hack just to make something as basic as file redirection to work. I daily drive both Linux and Windows, and the same simple command creating different files is really bothering me.\r\n\r\nTo not make this feature a duplicate of `-join` and make it more precise solution, I suggest not making it a generic string but instead an enum `-NewlineSequence Native | CRLF | LF`. ",
      "created_at": "2022-10-13T10:48:22Z",
      "updated_at": "2022-10-13T10:48:22Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "Additional three arguments why the ugly `-join` hack is not an acceptable solution, beyond just syntax:\r\n1. It breaks streaming, requiring potentially a very big string to be created in memory. Go ahead, try ``(Get-Content input.txt | %{ $_ -replace $from, $to }) -join \"`n\" | Out-File output.txt`` on a couple-gig file\r\n2. Line endings are arguably part of encoding, so `-NewlineSequence` fits together with `-Encoding`\r\n3. Making it a parameter of `Out-File` allows use of `$PSDefaultParameters` so that you can set it in your `$PROFILE` and never have to worry about it across all your systems",
      "created_at": "2022-10-13T18:14:12Z",
      "updated_at": "2022-10-13T18:14:12Z"
    }
  ],
  "created_at": "2017-05-24T19:10:10Z",
  "number": 3855,
  "state": "closed",
  "title": "Add parameter -Delimiter to Set-Content, Out-File, Out-String to complement Get-Content -Delimiter",
  "updated_at": "2022-10-13T18:14:12Z"
}