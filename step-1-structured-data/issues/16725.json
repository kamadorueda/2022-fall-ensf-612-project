{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16725",
  "author": "iRon7",
  "body": "### Summary of the new feature / enhancement\r\n\r\nImplementing the `IList` interface to the [Range Operator](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_operators?view=powershell-7.2#range-operator-) would (presumably) require a easier syntax in case it is used for a (non-pipeline) parameter.\r\n\r\n```PowerShell\r\n$Table = @'\r\n1,6,6,2,9,4\r\n8,4,3,9,5,7\r\n1,0,9,5,4,0\r\n'@\r\n```\r\n\r\nCurrently it is required to used the [Array subexpression operator `@( )`](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_operators?view=powershell-7.2#array-subexpression-operator--) to use a range as argument:\r\n\r\n```PowerShell\r\nConvertFrom-Csv $Table -Header @('a'..'f') \r\n```\r\n\r\nWith the `IList` interface implemented, I expect the syntax to be simplified to:\r\n```PowerShell\r\nConvertFrom-Csv $Table -Header 'a'..'f'\r\n```\r\n\r\nRelated StackOverflow question/answer: [OrderedDictionary key name at specified index](https://stackoverflow.com/a/70618275/1701026)",
  "closed_at": "2022-01-10T15:23:19Z",
  "comments": [
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "Actually, I think my suggested lack of the `IList` interface  implementation suggestion is incorrect as the [grouping operator](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_operators?view=powershell-7.2#grouping-operator--) also works: for this\r\n```PowerShell\r\nConvertFrom-Csv $Table -Header ('a'..'f')\r\n```\r\nIt is probably a syntax issue (also reading the related error closely):\r\n\r\n> ConvertFrom-Csv: Cannot bind parameter 'Delimiter'. Cannot convert value \"..f\" to type \"System.Char\". Error: \"String must be exactly one character long.\r\n\r\nAnd this:\r\n```PowerShell\r\nConvertFrom-Csv $Table -Header 1..6\r\n```\r\nResults in:\r\n```PowerShell\r\n1..6\r\n----\r\n1\r\n8\r\n1\r\n```\r\n\r\nAnyhow, it would be nice it the range operator would get precedent in an unquoted string (or resolved in case of a character range) so that it can be used be used without any parenthesis in an argument as syntax sugar.\r\n\r\nHmmm, I am not sure anymore about the is request myself and considering to close it...",
      "created_at": "2022-01-10T15:12:43Z",
      "updated_at": "2022-01-10T15:21:07Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "It's more to do with how the command line parses  operators  \r\n`ConvertFrom-Csv $Table -Header (' @('a','b','c') + @('d','e','f') ` \r\nWill fail because the + operator morphs into a value. You can do this \r\n`convertFrom-Csv $Table -Header .., ++ , -f, 2+3, 5..6 `    \r\n you'll get silly headings but it's valid.  \r\n\r\nYou might want \r\n\r\n`ConvertFrom-Csv $Table -Header  \"a b c d e f\" -split \" \" \r\n\r\nbut (of course) the - operators (split, replace and so on) look like parameters names.  So anything parameter which is an operation needs to be written   `( operands and operator)`\r\n",
      "created_at": "2022-01-10T15:21:20Z",
      "updated_at": "2022-01-10T15:24:17Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "`Resolution answered`",
      "created_at": "2022-01-10T15:23:19Z",
      "updated_at": "2022-01-10T15:23:19Z"
    }
  ],
  "created_at": "2022-01-10T12:34:13Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Language"
  ],
  "number": 16725,
  "state": "closed",
  "title": "Add `IList` interface to the Range Operator",
  "updated_at": "2022-01-12T08:28:25Z"
}