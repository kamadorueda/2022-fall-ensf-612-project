{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8802",
  "author": "grandmasterv",
  "body": "I'm new to Powershell so please be kind if this issue is being addressed elsewhere.  I looked and could not find any discussion about this problem.\r\n\r\nI started using powershell core v6.1 stock install (no additional modules installed) to script across platforms (Win, Lin, Mac) as its being touted as a great solution for this. However shortly after I began to use it I quickly ran into a problem where one cmdlet is available on one platform (Win of course) but not another (Mac). I was shocked that this is the case as I would consider that behaviour NOT cross platform. I feel these cmdlets should be placed in a different module like the Windows Compatibility Module if they are to only be available on that platform.  There could be a separate compatibility module for each platform but they should not be included in the core if not supported across all platforms.\r\n\r\nI found that this has caused problems on platforms like Linux in the issue here:\r\nhttps://github.com/PowerShell/PowerShell/issues/3577\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\nGet-ComputerInfo\r\n```\r\n\r\n# Expected behavior\r\n\r\nWorks on Windows, Mac, and Linux\r\n\r\n# Actual behavior\r\n\r\nOnly works on Windows.\r\n\r\n```powershell\r\nget-computerinfo\r\nget-computerinfo : The term 'get-computerinfo' is not recognized as the name of a cmdlet, function, script file, or operable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\nAt line:1 char:1\r\n+ get-computerinfo\r\n+ ~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : ObjectNotFound: (get-computerinfo:String) [], CommandNotFoundException\r\n+ FullyQualifiedErrorId : CommandNotFoundException\r\n\r\n```\r\n\r\n# Environment data\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.2\r\nPSEdition                      Core\r\nGitCommitId                    6.1.2\r\nOS                             Darwin 17.7.0 Darwin Kernel Version 17.7.0: Thu Jun 21 22:53:14 PDT 2018; root:xn...\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2019-02-02T14:32:40Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@grandmasterv Our goal is to port ALL the cmdlets. \r\nCurrently this is not possible for two reasons. Firstly, not all API are ported in .Net Core. With each subsequent .Net Core release, ported APIs become more and after .Net Core 3 we will get a lot of new ported APIs. This open ways to port other cmdlets. Secondly, some API are missing in Unix systems. Certainly .Net Core team will look for solutions. \r\nThis also explains why PowerShell Core on Windows has fewer cmdlets than Windows PowerShell.\r\nAs for your proposal, it has already been discussed. This will not give benefits to Unix users since these cmdlets do not exist, but it will complicate the lives of Windows users.\r\n\r\nRight solution is to contribute (feel free!) to .Net Core and PowerShell Core to get its full featured. \r\n ",
      "created_at": "2019-02-02T14:32:40Z",
      "updated_at": "2019-03-18T12:27:47Z"
    },
    {
      "author": "grandmasterv",
      "author_association": "NONE",
      "body": "Hello Illya,\r\n\r\nThanks for shining some light on the reason behind the cmdlets existing on one platform and not another. It seems this problem started in .net core. I feel that .net core should also not make an API function available unless it can be used on all supported platforms as it\u2019s touted as a cross-platform library.  Powershell should not be replicating their problem. What I\u2019m getting at is the overall design decision to release for one platform only instead of waiting till all the parts are available to support a release on ALL platforms.  Your correct in that removing the ones that exist now in windows that don\u2019t exist in other platforms would complicate things and the best way to address that gap is to contribute (still a newb here but I\u2019ll work towards it) but no new cmdlets should be released that are single platform only.",
      "created_at": "2019-02-07T16:35:45Z",
      "updated_at": "2019-02-07T16:35:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I believe we all want to have .Net Core on all platforms with full API set. This is such a huge job that it will take several more years before we get closer to this. This is a convergent process. We will have to move step by step. And all this time we will experience various inconveniences. It's unavoidable. Create more feedback and contribute to speed up the process!",
      "created_at": "2019-02-07T17:21:28Z",
      "updated_at": "2019-02-07T17:21:28Z"
    }
  ],
  "created_at": "2019-01-31T19:19:30Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 8802,
  "state": "closed",
  "title": "Remove cmdlets not available on all platforms from core",
  "updated_at": "2019-03-18T12:27:47Z"
}