{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8192",
  "author": "KirkMunro",
  "body": "Related to #7703, different module teams are taking different approaches to credential caching, with no proper direction or guidance available to make sure they design their modules properly.\r\n\r\nKey things to think about when caching credentials are:\r\n\r\n1. Multi-runspace use of a module (when working with multiple tenants, you must ensure that cached credentials in one runspace are not available in another runspace -- the AzureAD module currently suffers from this).\r\n1. Caching credentials in memory vs. on disk (some modules such as Azure PowerShell cache credentials to disk, sometimes not even documenting that they do so, which influences other runspaces).\r\n1. Multi-tenant use within a single runspace (how do you properly set up a module so that multiple sets of cached credentials can be used easily within a single runspace, while minimizing the amount of code required in scripts that use those cached credentials).\r\n\r\nI'm sure there are others, but these are the top three that come to mind for me. Performing automation at scale against multiple tenants in the many ways we can run scripts today (locally, in the cloud/Cloud Shell, in containers, in automation tools like Azure Automation, in serverless architectures such as Azure Functions or AWS Lambda, etc.) requires significant thought and planning, and as a community we're not doing the right work upstream (properly identifying how this should be done) so that the entire community has a model to follow that enables PowerShell to be easily used in any of these environments when managing multiple tenants in a highly performant fashion, regardless of which module you use.\r\n\r\nThe PSDefaultParameterValues feature helps in this area, but only a little because its design makes it easy to apply parameters to cmdlets that you don't want to apply default parameter values to, and it is too slow for multi-threaded/multi-runspace environments because it's just a hashtable that isn't thread-safe behind the scenes, so the addition of thousands of entries is too slow.\r\n\r\nSpeaking with others in the community about this, some have suggested that individual module teams need to step up and make this work; however, the reality is that they aren't doing it right, and while it may be possible to have some correct their mistakes, others will make the same mistakes later because of the lack of proper guidance. We really need documented best practices/recommendations/rules on how to do this properly, and/or new features added to PowerShell to make this work well regardless of which module is being used. Ultimately I think a combination of the two is the right way to go.\r\n\r\nCan we please get some investment from the PS team on this as well as on #7703 so that we can start putting these issues behind us?",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @joeyaiello  for information.",
      "created_at": "2018-11-07T03:57:40Z",
      "updated_at": "2018-11-07T03:57:40Z"
    }
  ],
  "created_at": "2018-11-06T15:16:32Z",
  "labels": [
    "Area-Maintainers-Documentation",
    "Issue-Discussion"
  ],
  "number": 8192,
  "state": "open",
  "title": "Publish guidance for module authors on how to properly handle credential caching",
  "updated_at": "2018-11-08T13:21:02Z"
}