{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9080",
  "author": "mklement0",
  "body": "This [`PSModuleInfo` constructor](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.psmoduleinfo.-ctor?view=powershellsdk-1.1.0#System_Management_Automation_PSModuleInfo__ctor_System_Boolean_) when passed `$false`, purports to create a module that opts out of the default behavior of linking a module's scope domain (session state) to the global scope.\r\n\r\nAs an aside: What are the use cases for this behavior? It appears to be rarely used in practice, if ever.\r\n\r\nHowever, the link still _partially_ exists:\r\n\r\n* It does not exist - as requested - when using the `$global:` scope modifier or `Set-Variable` /` Get-Variable -Scope Global`\r\n\r\n* It unexpectedly does exist when using _no_ scope modifier / omitting `-Scope Global`\r\n\r\n```powershell\r\n# WITH link to global scope.\r\nPS> $global:var = 42; . ([psmoduleinfo]::new($true)) { $global:var }\r\n42  # OK\r\n\r\n# WITHOUT link to global scope.\r\nPS> $global:var = 42; . ([psmoduleinfo]::new($false)) { $global:var }\r\n  # OK - no output; similarly, `Get-Variable -Scope Global var` would fail.\r\n\r\n# WITHOUT link to global scope, but REFERENCE WITHOUT SCOPE QUALIFIER\r\nPS> $global:var = 42; . ([psmoduleinfo]::new($false)) { $var }\r\n42  # !! Unexpectedly still seen.\r\n# Ditto with `Get-Variable var` (without -Scope) and `Get-Variable -Scope 1 var`\r\n```\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core 6.2.0-preview.4\r\n```\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2019-03-06T21:44:28Z",
  "labels": [
    "Issue-Question",
    "WG-Engine"
  ],
  "number": 9080,
  "state": "open",
  "title": "A module created with opt-out of being linked to the global scope still sees global variables implicitly",
  "updated_at": "2019-03-07T12:13:00Z"
}