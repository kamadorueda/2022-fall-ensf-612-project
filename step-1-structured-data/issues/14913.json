{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14913",
  "author": "SteveL-MSFT",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nWhen using `Move-Item` between DFS paths, the FileSystemProvider will decide whether to use the .NET `Move()` or a `Copy()` and `Delete()` operation based on comparing the root path of the source and destination.  This will work whenever the source and destination are on the same volume, but results in an Access Denied error message if not.  In the case of DFS paths, they look like SMB share paths but typically are on different volumes so the move fails with Access Denied.\r\n\r\nThere is a Win32 API that could be used to determine if a UNC path is DFS, but it appears there is a timeout of around 1 second when the path is NOT DFS, so that's too big of an impact for normal usage. \r\n\r\nFix is to try `MoveTo()` as that is much faster on the same volume.  If that fails, we check the HResult to see if it's Access Denied (0x80070005) and if so (as this is what is returned in DFS scenario) we fallback to `CopyAndDelete()`.\r\n\r\nTested manually on a VM with DFS shares.\r\n\r\n## PR Context\r\n\r\nReported through Microsoft customer support\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and opened an issue in the relevant tool repository. This may include:\r\n        - [ ] Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode\r\n        (which runs in a different PS Host).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n",
  "closed_at": "2021-03-08T23:01:32Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Going to change this to try Move() first, then if AccessDenied, then try CopyDelete().",
      "created_at": "2021-03-01T17:23:51Z",
      "updated_at": "2021-03-01T17:23:51Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Making this a draft PR for now, the customer tried a private and still had initial problem after latest change. Trying to determine if they got a different HResult.",
      "created_at": "2021-03-02T19:49:19Z",
      "updated_at": "2021-03-02T19:49:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Looking Directory.MoveTo() implementation https://github.com/dotnet/runtime/blob/79ae74f5ca5c8a6fe3a48935e85bd7374959c570/src/libraries/System.IO.FileSystem/src/System/IO/FileSystem.Windows.cs#L119-L137\r\nI think we can throw for ERROR_PATH_NOT_FOUND and ERROR_ALREADY_EXISTS but fall back for other exceptions.",
      "created_at": "2021-03-03T06:42:16Z",
      "updated_at": "2021-03-03T06:42:16Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@isazonov Looks like there can be different HResult for DFS, so can't rely on that.  Based on https://github.com/dotnet/runtime/blob/79ae74f5ca5c8a6fe3a48935e85bd7374959c570/src/libraries/System.IO.FileSystem/src/System/IO/FileSystem.Windows.cs#L133, I think we can just try copydelete on an IOException.",
      "created_at": "2021-03-03T15:09:09Z",
      "updated_at": "2021-03-03T15:17:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If we look GetExceptionForWin32Error()\r\nhttps://github.com/dotnet/runtime/blob/79ae74f5ca5c8a6fe3a48935e85bd7374959c570/src/libraries/Common/src/System/IO/Win32Marshal.cs#L25\r\nI think we should fall back for IOException and do not fall back for FileNotFoundException, DirectoryNotFoundException, PathTooLongException which is IOException too.\n\n<blockquote><img src=\"https://avatars.githubusercontent.com/u/9141961?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/dotnet/runtime\">dotnet/runtime</a></strong></div><div>.NET is a cross-platform runtime for cloud, mobile, desktop, and IoT apps. - dotnet/runtime</div></blockquote>",
      "created_at": "2021-03-03T17:32:08Z",
      "updated_at": "2021-03-03T17:32:10Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov I see, that makes sense, will update.",
      "created_at": "2021-03-03T18:05:01Z",
      "updated_at": "2021-03-03T18:05:01Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Need to think about this some more, the FQErrorID is now different on Linux vs Windows which is not acceptable.  Maybe I can find out if there is a limited set of HResult we can check against.",
      "created_at": "2021-03-03T19:47:28Z",
      "updated_at": "2021-03-03T19:47:28Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We already discussed this with @rjmholt . See https://github.com/PowerShell/PowerShell/pull/13044/files#r446770600\r\n\r\n[I guess .Net unify the behavior (exceptions)](https://github.com/dotnet/runtime/blob/79ae74f5ca5c8a6fe3a48935e85bd7374959c570/src/libraries/Common/src/Interop/Unix/Interop.IOErrors.cs#L110) and we can have one code path for all platforms.\r\n\r\nI see the test `It \"Verify Move-Item across devices for directory\"` is not correct too. It came from from #13044 . I suggest to re-review #13044 now since the code doesn't work and isn't tested correctly neither Windows nor Unix.\r\n\r\n<blockquote><img src=\"https://avatars.githubusercontent.com/u/7009879?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell/pull/13044\">Fix FS moves across Unix mounts by rjmholt \u00b7 Pull Request #13044 \u00b7 PowerShell/PowerShell</a></strong></div><div>PR Summary\r\nFixes #13039.\r\nCurrently Move-Item does not support cross-mount moves on Unix, because it doesn&#39;t check properly whether given paths lie on the same filesystem.\r\nThis PR fixes the chec...</div></blockquote>",
      "created_at": "2021-03-04T05:15:22Z",
      "updated_at": "2021-03-04T05:16:08Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov can you be specific on your concerns about that test?",
      "created_at": "2021-03-04T22:06:08Z",
      "updated_at": "2021-03-04T22:06:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> @iSazonov can you be specific on your concerns about that test?\r\n\r\nI'd expect ` Move-Item -Path $dir -Destination $destination -ErrorAction Stop` throws in the test.\r\n\r\nhttps://github.com/rjmholt/PowerShell/blob/7a2c1fb06cfddff1bb9f2535197154ff143aeefa/test/powershell/Modules/Microsoft.PowerShell.Management/FileSystem.Tests.ps1#L134-L152\r\n\r\n---\r\nAnd I guess .Net team unified exceptions in the API for all platforms and we could have one code path here. Both return codes fall in IOException and we need only to ignore  FileNotFoundException, DirectoryNotFoundException, PathTooLongException.\r\n\r\nWe must take into account that there are many ways to mount a different file system / volume and they may have different return codes.",
      "created_at": "2021-03-05T06:24:30Z",
      "updated_at": "2021-03-05T06:24:44Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov so that test case relies on a testhook to simulate doing a move across devices/volumes.  It succeeds because the test hook forces it to throw the exception that results in CopyAndDelete() to be used.\r\n\r\nIn one of my commits, I tried the approach of ignoring FileNotFoundException, DirectoryNotFoundException, PathTooLongException but that resulted in another FullyQualifiedErrorId to change whereas the current implementation checking for specific HResult which is specific to the Unix error of moving across devices and Windows error of moving across volumes has less impact.  I was also concerned that other specific IOExceptions beyond those ignored types would fallback to CopyAndDelete() when it didn't in the past and might cause unintended side effects.",
      "created_at": "2021-03-05T22:05:17Z",
      "updated_at": "2021-03-05T22:05:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> @iSazonov so that test case relies on a testhook to simulate doing a move across devices/volumes. It succeeds because the test hook forces it to throw the exception that results in CopyAndDelete() to be used.\r\n> \r\n\r\nSorry, my bad. With `-Stop` parameter I expect  `-Should -Not -Throw -Because \"\"`\r\n\r\n> In one of my commits, I tried the approach of ignoring FileNotFoundException, DirectoryNotFoundException, PathTooLongException but that resulted in another FullyQualifiedErrorId to change whereas the current implementation checking for specific HResult which is specific to the Unix error of moving across devices and Windows error of moving across volumes has less impact. I was also concerned that other specific IOExceptions beyond those ignored types would fallback to CopyAndDelete() when it didn't in the past and might cause unintended side effects.\r\n\r\nWe had similar discussion in https://github.com/PowerShell/PowerShell/pull/13634#issuecomment-692897217\r\nI tried to make minimal changes. But after some conversations we concluded that driver error codes is not reliable way in that context and I made more large refactoring.\r\nSo here I also expect that using driver codes is the last thing we should do.\r\nWe could think about moving to OneDrive but this works. WebDav? Other Cloud services? Etc.?\r\nIt is good if a driver supports moving, but if not? What code will it return? We do not know. I suppose you could always try copying.\r\n\r\nMy proposal:\r\n```c#\r\n        private void MoveDirectoryInfoUnchecked(DirectoryInfo directory, string destinationPath, bool force)\r\n        {\r\n            try\r\n            {\r\n                if (InternalTestHooks.ThrowExdevErrorOnMoveDirectory)\r\n                {\r\n                    throw new IOException(\"Invalid cross-device link\", hresult: TEST_CODE);\r\n                }\r\n\r\n                directory.MoveTo(destinationPath);\r\n            }\r\n            catch (Exception exception)\r\n            {\r\n                switch (exception)\r\n                {\r\n                    case FileNotFoundException:\r\n                    case DirectoryNotFoundException:\r\n                    case PathTooLongException:\r\n                        throw;\r\n                    case IOException:\r\n                        CopyAndDelete(directory, destinationPath, force);\r\n                        break;\r\n                    default:\r\n                        throw;\r\n                }\r\n            }\r\n        }\r\n```\r\n\r\n",
      "created_at": "2021-03-06T08:58:16Z",
      "updated_at": "2021-03-06T08:58:16Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.2.0-preview.4` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0-preview.4)\n",
      "created_at": "2021-03-16T23:40:03Z",
      "updated_at": "2021-03-16T23:40:03Z"
    }
  ],
  "created_at": "2021-02-27T06:18:32Z",
  "number": 14913,
  "state": "closed",
  "title": "Fix `Move-Item` for FileSystemProvider to use copy-delete instead of move for DFS paths",
  "updated_at": "2021-03-16T23:40:03Z"
}