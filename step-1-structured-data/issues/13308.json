{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13308",
  "author": "wembleyford",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\nI'm attempting to use test-json to validate some ARM template code I'm working up to push resources into Azure.  The simplest test's I'm doing are to validate the paramter json files which provide parameter name/value pairs.  The schema for which is provided by MS.\r\n\r\nUnfortuntely, test-json appears to not be able to even parse the schema json, let alone validate my (valid) json parameter files.\r\n\r\nWhat is particularly curious is that test-json $schema returns $true, but test-json -json \"some-valid-json\" -schema $schema errors,  This might suggest that test-json is actually able to parse the json of the schema, but is not able to interpret the content correctly.  This is rather disappointing given the schema is from Microsoft themselves. Naturally, I'm open to suggestions that this is a bug in the schema, rather than the cmdlet, but it also occurs with other ARM/Azure related schemas.\r\n\r\n## Steps to reproduce\r\n\r\nDownloaded schema from https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json\r\nAnd saved to schema.json - checked file and the json is formatted as expected, compressed onto a single line.\r\n\r\nAttempted to test validity of basic parameter json: \r\n\r\n```\r\n$json = '{\"$schema\":\"https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#\",\"contentVersion\":\"1.0.0.0\",\"parameters\":{\"foo\":{\"value\":\"bar\"}}}'\r\n$schema = get-content deploymentParameters.json\r\ntest-json -json $json -schema $schema\r\n```\r\n\r\n## Expected behavior\r\n\r\n```\r\nTrue\r\n```\r\n\r\n## Actual behavior\r\n\r\nThe error\r\n```\r\nTest-Json: Cannot parse the JSON schema.\r\n```\r\nWhich seems odd given that \r\n```\r\nTest-json -json $schema\r\n```\r\n\r\nreturns True as you might expect. \r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\nPSVersion 7.0.3 on linux. Also same behaviour on 7.0.0\r\n\r\nI've also noted that using the validation tool at https://www.liquid-technologies.com/online-json-schema-validator is able to validate the json+schema as expected but the validation tool at https://www.jsonschemavalidator.net/ is not.  \r\n\r\n",
  "closed_at": "2020-08-01T00:00:09Z",
  "comments": [
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Having tried this myself, the issue comes in two places:\r\n\r\n- The ARM schemas are missing fields, so they have some invalid parts\r\n- NJsonSchema, which is the 3rd party library `Test-JsonSchema` uses, does not tolerate partially valid schemas and throws at the first instance of a schema issue\r\n\r\nYou can test this with:\r\n\r\n```powershell\r\n[NJsonSchema.JsonSchema]::FromUrlAsync('https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#').GetAwaiter().GetResult()\r\n```\r\n\r\n(In this particular case, notice there's no `#/definitions/parameterValueTypes` field in the schema at that URI)",
      "created_at": "2020-07-30T00:14:40Z",
      "updated_at": "2020-07-30T00:17:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think it is better to ask in NJsonSchema repository.",
      "created_at": "2020-07-30T07:24:15Z",
      "updated_at": "2020-07-30T07:24:15Z"
    },
    {
      "author": "wembleyford",
      "author_association": "NONE",
      "body": "Surely the cmdlet should be returning an 'False' if the schema is missing segments rather than an error message saying the schema cannot be parsed.    If this is a bug in the underlying libraries as ISazonov suggests, I'm left wondering why Powershell is exposing the functionality if it's broken.",
      "created_at": "2020-07-30T08:20:53Z",
      "updated_at": "2020-07-30T08:20:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">  the cmdlet should be returning an 'False' if the schema is missing segments \r\n\r\nI do not think we should ignore exceptions.\r\n\r\n>  I'm left wondering why Powershell is exposing the functionality if it's broken.\r\n\r\nWe use the external library and we don't know whether there are bugs in the library.\r\n\r\nIf you have an interest please open new issue in NJsonSchema repository. We get the fix automatically for next version if it will be created.",
      "created_at": "2020-07-30T08:40:52Z",
      "updated_at": "2020-07-30T08:40:52Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> Surely the cmdlet should be returning an 'False' if the schema is missing segments rather than an error message saying the schema cannot be parsed\r\n\r\nThe documented behaviour is for `Test-Json` to write an error and return false when the JSON being tested is invalid or does not comply with the schema. An invalid schema should at least do that, but it's not clear whether it should return anything (how can it give an answer when the schema it's comparing against is invalid) or whether the error it throws should be terminating or non-terminating.\r\n\r\n> If this is a bug in the underlying libraries as ISazonov suggests, I'm left wondering why Powershell is exposing the functionality if it's broken.\r\n\r\nI don't think it's a bug in NJsonSchema, just how NJsonSchema works; it throws when given an invalid schema like the ARM schema you've pointed it at.\r\n\r\n`Test-Json` should appropriately catch and wrap the error and either return false or throw a terminating error.",
      "created_at": "2020-07-30T16:17:43Z",
      "updated_at": "2020-07-30T16:25:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Test-Json should appropriately catch and wrap the error and either return false or throw a terminating error.\r\n\r\nWe catch all exceptions from NJsonSchema and wrap them as common PowerShell pattern.\r\n",
      "created_at": "2020-07-30T16:36:47Z",
      "updated_at": "2020-07-30T16:36:47Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Interesting, here's the relevant code:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/c22ccbebd2955ff67c03574ec26d252955e8ea6d/src/Microsoft.PowerShell.Commands.Utility/commands/utility/TestJsonCommand.cs#L163-L171",
      "created_at": "2020-07-30T17:15:23Z",
      "updated_at": "2020-07-30T17:15:50Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Ohhh, I've reread the original issue...\r\n\r\n`Test-Json -Json $schema` returns `$true`. That's by design, since the schema is valid JSON.\r\n\r\n`test-json -json $json -schema $schema` writes an error. Also by design, since the schema is broken; it's valid JSON but an invalid JSON schema.",
      "created_at": "2020-07-30T17:17:12Z",
      "updated_at": "2020-07-30T17:17:12Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-08-01T00:00:08Z",
      "updated_at": "2020-08-01T00:00:08Z"
    }
  ],
  "created_at": "2020-07-30T00:09:49Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered",
    "WG-Cmdlets-Utility"
  ],
  "number": 13308,
  "state": "closed",
  "title": "Test-Json unable to parse MS ARM Schemas",
  "updated_at": "2020-08-01T00:00:09Z"
}