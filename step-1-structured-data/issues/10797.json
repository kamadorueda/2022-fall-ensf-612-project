{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10797",
  "author": "ivanshen",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\nChanges implemented from [RFC0035](https://github.com/PowerShell/PowerShell-RFC/blob/master/2-Draft-Accepted/RFC0035-%23Requires-Additions.md).\r\n\r\nAdd support for the following new parameters:\r\n\r\n* `-OS {Windows | Linux | MacOS}` where an operating system (or possibly combination of them) can be specified as required. \r\n* `-MaximumPSVersion <V>[.<v>]`, where a maximum PowerShell version can be specified as required.\r\n\r\n## PR Context\r\nIn [about_Requires](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_requires?view=powershell-6), it is stated that:\r\n\r\n> You can use #Requires statements in any script. You cannot use them in functions, cmdlets, or snap-ins.\r\n\r\nCurrently however, this is untrue, as `#requires` statements are allowed by the parser/tokenizer anywhere in a script and then effectively hoisted to the top of that script to be checked before any part of the script is executed, no matter where they are placed. To warn users of unexpected behaviour, `#requires` statements appearing after any line that is not blank or a comment (i.e. any semantic statement) will generate a warning at parse-time about being hoisted to the top of the script. Other comments, such as hashbangs, and blank lines preceding a #requires will not generate this warning.\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "[![CLA assistant check](https://cla.opensource.microsoft.com/pull/badge/signed)](https://cla.opensource.microsoft.com/PowerShell/PowerShell?pullRequest=10797) <br/>All CLA requirements met.",
      "created_at": "2019-10-15T18:49:46Z",
      "updated_at": "2019-10-15T18:56:07Z"
    },
    {
      "author": "ivanshen",
      "author_association": "NONE",
      "body": "Summary of new changes:\r\n\r\n- Changed terminology of \"OS versions\" to \"OS types\"\r\n- Added new test cases for `#requires` OS and MaximumPSVersion\r\n- Warnings now are written via the UI rather than with Console.WriteLine\r\n- Added test cases for requires warning\r\n- Various code refactoring",
      "created_at": "2019-10-30T16:01:11Z",
      "updated_at": "2019-10-30T16:01:11Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "I've played around with the warnings a bit and there's no easy way I can see to get them to write to a stream. So some possibilities I can imagine possibilities are:\r\n\r\n- We forget about writing warnings, since it's a small addition externally but a big change to the code, is hard to test and doesn't work well with how the parser is designed\r\n- We turn them into runtime ~~errors~~ **warnings** by checking the `ScriptRequirements` property on the AST when it's run\r\n- We make it easier for the static parser instance to pick up the current runspace and write warnings to streams\r\n- We look into what the right test hook solution would be",
      "created_at": "2019-11-12T00:58:34Z",
      "updated_at": "2019-11-12T01:11:17Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Tailing off your second idea there, couldn't we also then equally just make them runtime _warnings_ in the same way we could make them runtime errors? \ud83e\udd14 \r\n",
      "created_at": "2019-11-12T01:04:47Z",
      "updated_at": "2019-11-12T01:04:47Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Oh sorry I meant warnings! Will edit",
      "created_at": "2019-11-12T01:11:00Z",
      "updated_at": "2019-11-12T01:11:00Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "That also prevents issues like script caching meaning no warning gets output",
      "created_at": "2019-11-12T01:12:05Z",
      "updated_at": "2019-11-12T01:12:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@rjmholt Please update you review.",
      "created_at": "2019-11-23T10:37:57Z",
      "updated_at": "2019-11-23T10:37:57Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMainainer, Please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-05-27T02:02:56Z",
      "updated_at": "2020-05-27T02:02:56Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "Open PRs should not be assigned to milestone, so they are not assigned to the wrong milestone after they are merged.  For backport consideration, use a `backport` label. ",
      "created_at": "2020-12-09T23:20:07Z",
      "updated_at": "2020-12-09T23:20:07Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT we might want a label or similar here?",
      "created_at": "2020-12-09T23:29:35Z",
      "updated_at": "2020-12-09T23:29:35Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-12-17T02:00:11Z",
      "updated_at": "2020-12-17T02:00:11Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2021-09-23T02:01:14Z",
      "updated_at": "2021-09-23T02:01:14Z"
    }
  ],
  "created_at": "2019-10-15T18:49:33Z",
  "number": 10797,
  "state": "open",
  "title": "RFC0035: Warning Emissions, -OS parameter, and -MaximumPSVersion parameter ",
  "updated_at": "2021-11-11T22:00:52Z"
}