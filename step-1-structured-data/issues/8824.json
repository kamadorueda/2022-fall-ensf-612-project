{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8824",
  "author": "adamedx",
  "body": "When I use sort-object on PowerShell Core on Windows vs. Ubuntu 18.04, the results are sorted differently using the operating systems out of the box. IMO, the Windows behavior is correct, if for no other reason that it is consistent with PowerShell Desktop. In general, if a language such as Javascript were to suddenly release a change that made sorting primitives native to the language behave differently on Windows vs. Linux / Mac, the web as we know it would break completely.\r\n\r\n# Steps to reproduce\r\nRun the following command on PowerShell Core 6.2.0 preview3 on Windows, and on Ubuntu 18.04:\r\n\r\n```powershell\r\n$PSVersionTable.Platform;('a', 'ab', 'aC' | Sort-Object ) -join ','\r\n```\r\n\r\n# Expected behavior\r\nThe only difference should be the Platform string, Windows vs. Linux, that is output -- the sorted object output should be the same on both platforms, like this:\r\n\r\n```powershell\r\n# The first line below is executed on Windows, the second on Ubuntu 18.04\r\nPS> $PSVersionTable.Platform;('a', 'ab', 'aC' | Sort-Object ) -join ','\r\nWin32NT\r\na,ab,aC\r\nPS> $PSVersionTable.Platform;('a', 'ab', 'aC' | Sort-Object ) -join ','\r\nUnix\r\na,ab,aC\r\n```\r\n# Actual behavior\r\nNot only are the platforms different, but Windows returns the objects in a different (correct IMO) order than on Linux!\r\n\r\n```powershell\r\n# The first line below is executed on Windows, the second on Ubuntu 18.04\r\nPS> $PSVersionTable.Platform;('a', 'ab', 'aC' | Sort-Object ) -join ','\r\nWin32NT\r\na,ab,aC\r\nPS> $PSVersionTable.Platform;('a', 'ab', 'aC' | Sort-Object ) -join ','\r\nUnix\r\na,aC,ab\r\n```\r\n# Impact\r\nThis is pretty serious -- by default, scripts running on Windows and Linux will return different results for something as canonical as sorting text strings. This breaks modules in some obvious ways for me at the moment (in my case, parameter completion is broken as it relies on sorting), but it also means there are subtle changes to fundamental assumptions of scripts that may result in seemingly non-deterministic behavior that is difficult to reproduce and apparently random. Diagnosing the root cause may also be difficult as few people would expect a built-in function like `sort-object` to exhibit this behavior.\r\n\r\nCertainly the precedent set by other dynamic languages such as Javascript, Python, or Ruby is that the behavior is consistent when using built-in language primitives to sort.\r\n\r\n# Notes\r\nPer [this comment on issue 8604](https://github.com/PowerShell/PowerShell/issues/8064#issuecomment-460127076), I tried the suggestion that configuring the LC_ALL variable on Linux would affect this, and it turns out that this is indeed the case, as demonstrated by running the following commands on `bash` on Linux:\r\n\r\n```sh\r\n# Works fine\r\nLC_ALL=en_US.UTF-8 pwsh-preview -noprofile -c \"echo \\$PSVer\r\nsionTable.PSVersion;('a', 'ab', 'aC' | Sort-Object ) -join ','\"\r\n\r\nMajor  Minor  Patch  PreReleaseLabel BuildLabel\r\n-----  -----  -----  --------------- ----------\r\n6      2      0      preview.3\r\na,ab,aC\r\n\r\n# Broken!\r\nLC_ALL=C pwsh-preview -noprofile -c \"echo \\$PSVersionTable.PSVersion;('a', 'ab', 'aC' | Sort-Object ) -join ','\"\r\n\r\nMajor  Minor  Patch  PreReleaseLabel BuildLabel\r\n-----  -----  -----  --------------- ----------\r\n6      2      0      preview.3\r\na,aC,ab\r\n```\r\n# Environment data\r\nPSVersionTable Output:\r\n\r\n```powershell\r\nPS /mnt/c/Users/adamed/src/sdk/autographps-sdk> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.0-preview.3\r\nPSEdition                      Core\r\nGitCommitId                    6.2.0-preview.3\r\nOS                             Linux 4.4.0-17763-Microsoft #253-Microsoft Mon Dec 31 17:49:00 PST 2018\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\nIn general I would agree with [the comment on issue 8604](https://github.com/PowerShell/PowerShell/issues/8064#issuecomment-460127076) that the unix `sort` command doesn't exhibit this behavior even with `LC=C`. I would think that if the issue comes from .net core, it should be fixed there (what does `mono` do?), but if not, it seems like a fix is needed on PowerShell Core -- this is a huge portability problem and also goes against what JavaScript, Python, and Ruby have set as a standard.",
  "closed_at": "2019-09-29T10:07:24Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "From https://github.com/dotnet/corefx/issues/28611 comments it is \"by design\".",
      "created_at": "2019-09-29T10:07:24Z",
      "updated_at": "2019-09-29T10:07:24Z"
    }
  ],
  "created_at": "2019-02-04T15:15:02Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 8824,
  "state": "closed",
  "title": "Sort-Object returns different results on default OS configs for Windows vs. Ubuntu 18.04",
  "updated_at": "2019-09-29T10:07:39Z"
}