{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13726",
  "author": "jjanuszkiewicz",
  "body": "## Steps to reproduce\r\n\r\n```powershell\r\n\"1x2y3\".Split(@('x', 'y'))\r\n```\r\n\r\n## Expected behavior\r\n\r\n```none\r\n1\r\n2\r\n3\r\n```\r\n\r\n## Actual behavior\r\n\r\n```none\r\n1x2y3\r\n```\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.3\r\nPSEdition                      Core\r\nGitCommitId                    7.0.3\r\nOS                             Microsoft Windows 10.0.19041\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n## Comments\r\n\r\nWorks correctly in Windows Powershell 5.1.19041.1 (the same command returns the result described in **Expected behavior**).\r\nRespective method in .NET Core 3.1 also splits the string correctly:\r\n\r\n```csharp\r\nforeach (var item in \"1x2y3\".Split(new[] { 'x', 'y' }))\r\n    Console.WriteLine(item);\r\n```\r\n\r\noutput:\r\n\r\n```none\r\n1\r\n2\r\n3\r\n```\r\nA single separator works correctly in PS 7.0.3:\r\n\r\n```powershell\r\n\"1x2y3\".Split(@('x'))\r\n```\r\n\r\noutput:\r\n\r\n```none\r\n1\r\n2y3\r\n```\r\n\r\nAlso in this syntax:\r\n\r\n```powershell\r\n\"1x2y3\".Split('x')\r\n```\r\n\r\noutput:\r\n\r\n```none\r\n1\r\n2y3\r\n```\r\n\r\nI'm not sure if this is also a bug (and in which PS version), but there is one more difference between PS 5 and PS 7: PS 5 seems to treat `\"xy\"` as an array of two separators while PS 7 seems to treat it as one 2-character separator (PS 7 behavior seems more correct here):\r\n\r\nPS 5:\r\n\r\n```powershell\r\n\"1x2y3xy4\".Split(\"xy\")\r\n```\r\n\r\noutput:\r\n```none\r\n1\r\n2\r\n3\r\n\r\n4\r\n```\r\n\r\nPS 7:\r\n\r\n```powershell\r\n\"1x2y3xy4\".Split(\"xy\")\r\n```\r\n\r\noutput:\r\n```none\r\n1x2y3\r\n4\r\n```",
  "closed_at": "2020-10-03T20:00:08Z",
  "comments": [
    {
      "author": "jjanuszkiewicz",
      "author_association": "NONE",
      "body": "My gut feeling is that `@('x', 'y')` is converted to a string and an incorrect overload of `String.Split` from the runtime is called - i.e. one accepting a `string` separator instead of one accepting `char[]` or `params char[]`. But I might be totally wrong, haven't tried looking at the code.",
      "created_at": "2020-10-01T09:46:10Z",
      "updated_at": "2020-10-01T09:46:10Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I think the issue here is just that .NET added new overloads to the Split() method since .NET Framework 4.8, so you're getting different methods selected because there are now new ones available. The available overloads in pwsh 7.1 are:\r\n\r\n```\r\nOverloadDefinitions\r\n-------------------\r\nstring[] Split(char separator, System.StringSplitOptions options)\r\nstring[] Split(char separator, int count, System.StringSplitOptions options)\r\nstring[] Split(Params char[] separator)\r\nstring[] Split(char[] separator, int count)\r\nstring[] Split(char[] separator, System.StringSplitOptions options)\r\nstring[] Split(char[] separator, int count, System.StringSplitOptions options)\r\nstring[] Split(string separator, System.StringSplitOptions options)\r\nstring[] Split(string separator, int count, System.StringSplitOptions options)\r\nstring[] Split(string[] separator, System.StringSplitOptions options)\r\nstring[] Split(string[] separator, int count, System.StringSplitOptions options)\r\n```\r\n\r\nSo you're most likely getting the `string` or `string[]` overload there, but I'm unsure which is more likely to be selected in this case. @SeeminglyScience probably remembers (or knows how to find out; I don't recall).\r\n\r\nYou'll most likely need to explicitly cast to `[char[]]` in order to get the correct overload selected for your use case:\r\n\r\n```ps1\r\n\"1x2y3\".Split([char[]](\"x\",\"y\"))\r\n```\r\n\r\nThe `.Split(\"xy\")` not working as expected in PS 7 is likely due to the new `string` overload being added where previously PS wouldn't have that option and would instead convert it to a `char[]` during the process of choosing which method to call.",
      "created_at": "2020-10-01T11:51:50Z",
      "updated_at": "2020-10-01T11:52:40Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> So you're most likely getting the `string` or `string[]` overload there, but I'm unsure which is more likely to be selected in this case. @SeeminglyScience probably remembers (or knows how to find out; I don't recall).\r\n\r\nYeah it's the `string` one.\r\n\r\n> You'll most likely need to explicitly cast to `[char[]]` in order to get the correct overload selected for your use case:\r\n\r\n\ud83d\udc4d \r\n\r\n---\r\n\r\nAlso related/dupe: #11720\r\n",
      "created_at": "2020-10-01T12:19:56Z",
      "updated_at": "2020-10-01T12:19:56Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Hmm, so the binder's preferring `object[]` -> `string` over `object[]` -> `string[]` / `char[]`. That seems a little odd to me tbh, but I'm unsure if changing that would have wide implications that might be undesirable (or if changing it is even really feasible).\r\n\r\nImportant to note as well that a conversion from the array to string isn't splitting the string because that conversion will result in a string with spaces between each character by default, so these two calls are equivalent:\r\n\r\n```ps1\r\n\"1x2y3\".Split(@('x', 'y'))\r\n\r\n\"1x2y3\".Split('x y')\r\n```\r\n\r\nWhich as you saw with your `.Split(\"xy\")` example, .NET (in current versions) looks for the complete string to split on rather than a set of characters.\r\n\r\nAn option that will work the same way in both PS versions is to use `-split '[xy]'` which uses PS's own (regex) operator rather than relying on the .NET API, which is subject to changes / additions that PowerShell can't control across different versions. \r\n\r\nI'll mark this as a duplicate of #11720",
      "created_at": "2020-10-01T12:26:42Z",
      "updated_at": "2020-10-01T12:27:30Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Hmm, so the binder's preferring `object[]` -> `string` over `object[]` -> `string[]` / `char[]`. That seems a little odd to me tbh, but I'm unsure if changing that would have wide implications that might be undesirable (or if changing it is even really feasible).\r\n\r\nFeasible for sure, but yeah... who knows what that would break.\r\n\r\nAlso just to demo/prove it a little more:\r\n\r\n```powershell\r\n'1x y2z3'.Split(@('x', 'y'))\r\n# 1\r\n# 2z3\r\n```",
      "created_at": "2020-10-01T12:56:26Z",
      "updated_at": "2020-10-01T12:56:26Z"
    },
    {
      "author": "jjanuszkiewicz",
      "author_association": "NONE",
      "body": "Thanks for the explanations, I now better understand what's happening here.\r\n\r\nI still think that `@('x', 'y')` getting converted/bound to `string` rather than to `string[]`, resulting in a \"wrong\" overload being called, could be considered a bug. Is this because `@('x', 'y')` is an `object` array in PS, so the conversion to `char` or `string` array is not possible and the default \"to string\" conversion takes place? However, the non-Core Powershell is somehow able to call one of the `Split` overloads which accept `char[]` or `string[]` - and if a call like that is possible then shouldn't one of those methods be also chosen as a better-matching overload in PS Core? Or is this a known/documented breaking change? I'd appreciate a link to the docs if so.\r\n\r\nI know that the built-in `-split` works fine, I've actually moved on to using it already, but it took me some time. I was adapting an existing script to PS Core and that change in behavior surprised me.",
      "created_at": "2020-10-01T13:18:32Z",
      "updated_at": "2020-10-01T13:23:07Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I wouldn't say it's not _possible_ to select a `string[]` or `char[]` overload instead, but as @SeeminglyScience mentioned, it's quite hard to know if changing it to improve this one case might make others fall down where they were previously working just fine, or if it might create performance concerns in some scenarios. \r\n\r\nBut yes, currently the overload resolution / casting behaviour will prefer to transform `object[]` to `string` in that way rather than try to match it to an appropriate array type like `char[]` or `string[]`.\r\n\r\nThe non-Core powershell doesn't actually have a `string` overload on `.Split()` from memory, so it's forced back to `char[]` or `string[]` because there isn't a \"better\" option in the older .NET runtimes.\r\n\r\nThe logic hasn't changed in PowerShell, it's just that .NET added more overloads for that method, and that causes PowerShell to select one of the new ones preferentially due to the existing logic.",
      "created_at": "2020-10-01T13:38:14Z",
      "updated_at": "2020-10-01T13:38:24Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@jjanuszkiewicz\r\n\r\n> Is this because `@('x', 'y')` is an object array in PS\r\n\r\nA quick aside: Yes, PowerShell array literals are always `[object[]]`-typed, though `@(...)` isn't really an array literal, it is an - conceptually unnecessary - application of the array-subexpressions operator (even though it may get optimized away), whose purpose isn't to _create_ arrays, but to _guarantee_ that command output is an array, by wrapping a single output object in one. That said, it too always outputs `[object[]]`).\r\n\r\nIn principle, the advice from https://github.com/PowerShell/PowerShell/issues/11720#issuecomment-579866445 applies here as well; to recap:\r\n\r\n* A new overload added to a .NET method may cause the PowerShell engine to select it in situations where it previously selected a _different_ overload, due to the new overload now being a _better_ fit.\r\n\r\n* This is an _unavoidable_ consequence of PowerShell being a _late-bound_ language, and it is why you should generally prefer PowerShell-native solutions to .NET method calls (`-split` vs. `.Split()`, for instance).\r\n\r\n* The - cumbersome and possibly non-obvious - alternative is to match the method signature _precisely_, using _casts_ - only this guarantees longterm stability.\r\n\r\nHowever,  I do wonder if there are problematic overload resolution behaviors we need to address:\r\n\r\n* Generally, I don't think converting any array implicitly to `[string]` is useful in method-parameter binding - we don't even allow it in advanced functions (`function foo { [CmdletBinding()]param([string] $foo) $foo }; foo -foo one, two` fails)\r\n\r\n  * In particular, _how_ the conversion is performed is non-obvious (it's the same mechanism as in expandable strings: space-concatenated elements by default, separator configurable via `$OFS`).\r\n \r\n  * While changing that would certainly be a breaking change, I wonder how much existing code actually relies on this.\r\n\r\n* ~~In the particular case of the `String.Split()` overloads there is an oddity that I can't explain~~: notably, a `[string[]]` cast only works in the _2+_ argument form; @SeeminglyScience, perhaps you can shed some light on this:\r\n\r\n_Update_: The reason is that there's no `string[]`-_only_ overload, all such overloads have additional parameters - see [below](https://github.com/PowerShell/PowerShell/issues/13726#issuecomment-702345898).\r\n\r\n```powershell\r\n# !! MALFUNCTIONS, despite exact type match with [string[]], still binds to the [string] overload\r\nPS> '0foo 1bar2'.Split([string[]] ('foo', '1')) # !! Same as: '0foo 1bar2'.Split('foo 1')\r\n0\r\nbar2\r\n\r\n# OK: With exact type match *and an additional argument (`options`)*\r\nPS> '0foo1bar2'.Split([string[]] ('bar', 'foo'), 'None')\r\n0\r\n1\r\n2\r\n```\r\n",
      "created_at": "2020-10-01T18:46:11Z",
      "updated_at": "2020-10-01T19:34:47Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> * In the particular case of the `String.Split()` overloads there is an oddity that I can't explain: notably, a `[string[]]` cast only works in the _2+_ argument form; @SeeminglyScience, perhaps you can shed some light on this:\r\n\r\nSo method invocation constraints will only help guide binding, it can't force an invalid overload. More specifically in this case, there is no `Split(string[])` overload so it reverts to ~~`Split(params char[])`~~ `Split(string, StringSplitOptions = default)`.",
      "created_at": "2020-10-01T19:20:32Z",
      "updated_at": "2020-10-01T19:33:21Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "No, I think you're correct, @SeeminglyScience: while _some_ overloads have optional parameters, the `string[]` overloads do not, and I mistakenly assumed they did.\r\n\r\nThe `string[]` overloads as of 3.1 / 5.0RC - _no_ optional parameters:\r\n```csharp\r\npublic string[] Split (string[]? separator, int count, StringSplitOptions options);\r\npublic string[] Split (string[]? separator, StringSplitOptions options);\r\n```\r\n",
      "created_at": "2020-10-01T19:30:53Z",
      "updated_at": "2020-10-01T19:34:16Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Yeah sorry I meant wrong about the overload it falls back to, I corrected it.",
      "created_at": "2020-10-01T19:32:53Z",
      "updated_at": "2020-10-01T19:43:31Z"
    },
    {
      "author": "jjanuszkiewicz",
      "author_association": "NONE",
      "body": "I think it boils down to this:\r\n> I don't think converting any array implicitly to [string] is useful in method-parameter binding\r\n\r\nTo my taste, conversion of array to `string` could be dropped at all and an exception about a missing method overload could be thrown. At least it would tell you immediately what's going on. But I guess this is just how PS is supposed to work. I'll be happy to see an improvement in this area, I know I'm not the only one finding this confusing.\r\n\r\nShall I close this issue, or does anyone want to add something or propose a change here?",
      "created_at": "2020-10-02T08:42:38Z",
      "updated_at": "2020-10-02T08:42:38Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@jjanuszkiewicz, I agree.\r\n\r\n> But I guess this is just how PS is supposed to work.\r\n\r\nWell, it works _inconsistently_ in that regard: cmdlets and advanced scripts/functions do _not_ perform this conversion, but method calls and non-advanced scripts/functions do, so I'd say that this _helps_ the argument that we _consistently shouldn't_ do it.\r\n\r\nThe crux, as it frequently is, is backward compatibility:\r\n\r\nWhile I personally find it hard to imagine that someone actually _relies_ on the current behavior, the challenge is that analyzing existing code for such uses is a non-trivial undertaking.\r\n\r\nNote that we do have a [\"bucket\" system to categorize breaking changes](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md), and notably among them is [Bucket 3: Unlikely Grey Area](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md#bucket-3-unlikely-grey-area), which permits breaking changes if the benefit of the change outweighs the risk of breaking a _small_ number of scripts.\r\n\r\nAnother, less desirable option is to make a change opt-in, such as via `Set-StrictMode`, though the lack of granularity there is problematic.\r\n\r\nIn short: I encourage you to close _this_ issue and instead create a new one, of type \"Feature Request/Idea\", in which you ask for the change you propose.\r\n\r\n",
      "created_at": "2020-10-02T14:53:37Z",
      "updated_at": "2020-10-02T18:06:14Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as duplicate and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-10-03T20:00:07Z",
      "updated_at": "2020-10-03T20:00:07Z"
    }
  ],
  "created_at": "2020-10-01T09:38:50Z",
  "labels": [
    "Resolution-Duplicate",
    "Issue-Question"
  ],
  "number": 13726,
  "state": "closed",
  "title": "string.Split doesn't work with multiple separator characters",
  "updated_at": "2020-10-03T20:00:08Z"
}