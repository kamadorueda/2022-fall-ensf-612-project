{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8035",
  "author": "archmangler",
  "body": "Powershell doesn't seem to support non-interactive provision of password+username with the New-PSSession and -HostName parameters. This makes it virtually impossible to script a non-interactive PSSession solution meant to operate within a larger automated system (e.g Terraform or Ansible wrapper).\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nPS /home/gmonkey/scripts> $session = New-PSSession -HostName windns -Credential $cred -SSHTransport\r\nNew-PSSession : Parameter set cannot be resolved using the specified named parameters. One or more parameters issued cannot be used together or an insufficient number of parameters were provided.\r\nAt line:1 char:12\r\n+ $session = New-PSSession -HostName windns -Credential $cred -SSHTrans ...\r\n+            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidArgument: (:) [New-PSSession], ParameterBindingException\r\n+ FullyQualifiedErrorId : AmbiguousParameterSet,Microsoft.PowerShell.Commands.NewPSSessionCommand\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nFollowing credential creation like this:\r\n\r\n$cred = new-object -typename System.Management.Automation.PSCredential -argumentlist \"Administrator\",$pw\r\n\r\nThe following command should accept credentials non-interactively:\r\n\r\n$session = New-PSSession -HostName windns -Credential $cred -SSHTransport\r\n\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```\r\nNew-PSSession doesn't accept credentials with the  -HostName parameter, which makes it difficult to script PSSremoting solutions interactively.\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0\r\nOS                             Linux 4.4.0-137-generic #163-Ubuntu SMP Mon Sep 24 13:14:43 UTC 2018\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```\r\n",
  "closed_at": "2018-10-18T07:12:00Z",
  "comments": [
    {
      "author": "Justiii3",
      "author_association": "NONE",
      "body": "Hello,\r\n\r\nAs per my knowledge so far about PS remoting over SSH -Credentials is not supported, not sure when this will be fixed, however my workaround is to enable public key authentication, creating SSH RSA key from the source server and using it to connect this way(removes the need for credentials). Please be advised that If you try to host Powershell core remoting scripts in dotnet core console app using C# this may not work because in my case AddScript Method does nothing and does not execute the remoting  scripts . Have an issue raised for this https://github.com/PowerShell/PowerShell/issues/7984 . \r\n\r\nHere is a guide that will help you configure key based authentication: http://www.centinosystems.com/blog/powershell/using-passwordless-powershell-remoting-using-openssh-on-windows/\r\n\r\nFYI: Once you have this configured you can just move the keyfile somewhere and ask the remoting command to use it by using -KeyFilePath parameter.\r\n\r\nHope this helps.",
      "created_at": "2018-10-16T08:49:18Z",
      "updated_at": "2018-10-16T08:49:18Z"
    },
    {
      "author": "archmangler",
      "author_association": "NONE",
      "body": "@Justiii3 - thanks for the feedback. I was hoping to avoid key based authentication (though in my opinion it is much better). The problem is that in many large organisations, the teams responsible for managing windows systems are not familiar with key-based authentication, their operations are limited purely to passwords and username based credentials allocated via AD. Which means that all access they're willing to provide will be in the form of a username and password.",
      "created_at": "2018-10-16T13:59:09Z",
      "updated_at": "2018-10-16T13:59:09Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Public key auth is the recommended way to go.  To support `-Credential` for username/password, we need https://github.com/PowerShell/PowerShell/issues/5782",
      "created_at": "2018-10-18T07:11:52Z",
      "updated_at": "2018-10-18T07:11:52Z"
    },
    {
      "author": "ShowMeTheGita",
      "author_association": "NONE",
      "body": "This issue is still up. I cannot use the solution proposed by @Justiii3 due to having my script on an Azure Automation runbook. Locally, via prompt credentials it works perfectly. Using -HostName and -Credential flag does not:\r\n`New-PSSesion -HostName $hostpublicip -Credentials $creds`\r\n\r\nEnds with error:\r\n`New-PSSession: Parameter set cannot be resolved using the specified named parameters. One or more parameters issued cannot be used together or an insufficient number of parameters were provided.`",
      "created_at": "2021-03-03T18:50:22Z",
      "updated_at": "2021-03-03T18:50:22Z"
    },
    {
      "author": "niko-la-petrovic",
      "author_association": "NONE",
      "body": "@ShowMeTheGita Same issue here. Running \r\n```\r\nPSVersion                      7.1.2\r\nPSEdition                      Core\r\nGitCommitId                    7.1.2\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
      "created_at": "2021-03-04T18:07:02Z",
      "updated_at": "2021-03-04T18:07:53Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "#5782 is what you folks want",
      "created_at": "2021-03-05T03:00:44Z",
      "updated_at": "2021-03-05T03:00:44Z"
    },
    {
      "author": "G31st",
      "author_association": "NONE",
      "body": "This must be a joke right ? How can they not support credentials via variable ?! ",
      "created_at": "2021-07-09T14:35:37Z",
      "updated_at": "2021-07-09T14:35:37Z"
    }
  ],
  "created_at": "2018-10-15T18:27:26Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered",
    "WG-Remoting"
  ],
  "number": 8035,
  "state": "closed",
  "title": "PS Remoting: New-PSSession with -HostName and -SSHTransport doesn't support non-interactive credentials",
  "updated_at": "2021-07-09T14:35:37Z"
}