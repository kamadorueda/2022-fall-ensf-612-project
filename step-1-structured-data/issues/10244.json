{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10244",
  "author": "iSazonov",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nRelated #9884 \r\n\r\nRemove extra check that the system dll exists. We need only one check, which is performed during first attempt to load this assembly.\r\n\r\n## PR Context\r\n\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2019-08-05T16:52:19Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov Three questions:\r\n1. Is P/Invoke in general becomes slower or only the P/Invoke calls to `wldp.dll` becomes slower?\r\n2. the trace you collected, are they from Windows PowerShell 5.1 or the latest PowerShell Core?\r\n3. how much improvement do you get with this change?\r\n",
      "created_at": "2019-07-30T16:10:44Z",
      "updated_at": "2019-07-30T23:04:25Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov  I can contact the wldp team but I need more information.  Can you clearly summarize how you ran your perf tests and obtained the traces?  I don't know what 'with bp' and 'without bp' means...  We can't cache filepath information and need to rely on wldp APIs to be performant.  Thanks!",
      "created_at": "2019-07-30T16:16:31Z",
      "updated_at": "2019-07-30T16:16:31Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> I don't know what 'with bp' and 'without bp' means...\r\n\r\nI believe it's `with breakpoint` and `without breakpoint`.\r\n\r\nBut @iSazonov did you share your test script somewhere?",
      "created_at": "2019-07-30T16:18:05Z",
      "updated_at": "2019-07-30T16:18:40Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "I took a look at the original issue (#9884), and found the problem.   The issue is not related to the wldp.dll, however I still feel this fix is correct and should be taken.\r\n\r\nThe problem is the debugger disabling work that went into the current preview builds.  The script debugger is now disabled if the system is locked down, and any attempt to change debugger state is guarded by a system lock down check.  System lock down state is normally cached, but for the (normal) case where no policy is applied then a check is always performed for debug hooks (__PSLockdownPolicy) for testing purposes, and these checks include environment and registry settings.  Note that this perf problem only occurs when a debug breakpoint is set.\r\n\r\nI'll work on a fix for this and create a new PR.\r\n\r\n",
      "created_at": "2019-07-30T22:33:52Z",
      "updated_at": "2019-07-30T22:33:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I used a test script from original issue:\r\nFile c:\\temp\\b.ps1\r\n```powershell\r\nGet-PSBreakpoint | Remove-PSBreakpoint\r\n$sw = [System.Diagnostics.StopWatch]::startnew()\r\n#\"Without bp:`t$($sw.Elapsed.Ticks)\"\r\n$null = Set-PSBreakpoint -Line 2 -Script $PSCommandPath\r\n$sw = [System.Diagnostics.StopWatch]::startnew()\r\n#\"With bp:`t$($sw.Elapsed.Ticks)\"\r\n```\r\nYou can uncomment lines to see elapsed times.\r\n\r\nTest with breakpoint:\r\n1. Run pwsh\r\n2. Run PerfView\r\n3. Start collect in PerfVew\r\n4. Run in PowerShell Core session:\r\n```powershell\r\nfor ($i = 0 ; $i -lt 1000; $i++) {\r\n     c:\\temp\\b.ps1\r\n}\r\n```\r\n5. Wait for the end of the script block and then stop collect\r\n\r\nNow comment \"$null = Set-PSBreakpoint -Line 2 -Script $PSCommandPath\" line in the test file and repeat the test steps  for testing without breakpoint.\r\n",
      "created_at": "2019-07-31T03:22:55Z",
      "updated_at": "2019-07-31T03:22:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw \r\n> Is P/Invoke in general becomes slower or only the P/Invoke calls to wldp.dll becomes slower?\r\n\r\nI don't know. I guess if P/Invoke were the case then we would see a slowdown in other places too.\r\n\r\n> the trace you collected, are they from Windows PowerShell 5.1 or the latest PowerShell Core?\r\n\r\nIt is for latest PowerShell Core (my local build - I collect for debug (to see code paths) and release (to see real delays)). \r\n\r\n> how much improvement do you get with this change?\r\n\r\nVisually the test script (b.ps1 file) runs ~3x faster in with-breakpoint case but still 4-5x slower than without-breakpoint case.\r\n",
      "created_at": "2019-07-31T03:31:45Z",
      "updated_at": "2019-07-31T03:31:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@PaulHigin \r\n>I took a look at the original issue (#9884), and found the problem. The issue is not related to the wldp.dll, however I still feel this fix is correct and should be taken.\r\nThe problem is the debugger disabling work that went into the current preview builds.\r\n\r\nIt is not clear why mentioned Windows security fix cause the original issue.  It seems you found another issue. \r\nTrace for the PR build shows\r\n![image](https://user-images.githubusercontent.com/22290914/62108726-32600b00-b2c4-11e9-8049-07dacbef30c2.png)\r\n that we spend a lot of time in  SecuritySupport.GetSaferPolicy() that is advapi32.SaferIdentifyLevel P/Invoke. Perhaps the security patch did slow down the API, not wldp.dll.",
      "created_at": "2019-07-31T04:08:55Z",
      "updated_at": "2019-07-31T04:08:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I look `Get-Module -ListAvailable -All` - it seems it is slower now too (SaferIdentifyLevel  consumes up too 48% time in debug build).\r\nAlso we have #10264.",
      "created_at": "2019-07-31T09:00:41Z",
      "updated_at": "2019-07-31T09:04:57Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov  No, the issue I found is the same as #9884.  I simply repro'd that issue (setting debug break point causes serious perf problem) and found it was a regression from the debugger disabling change.  I think there is also a PInvoke perf problem as well, apparently due to a Windows security fix.  But this particular issue is due to a regression caused by a previous code change.\r\n\r\nI'll create a PR with the fix.",
      "created_at": "2019-07-31T15:13:11Z",
      "updated_at": "2019-07-31T15:31:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13 The PR is ready to merge.",
      "created_at": "2019-08-01T04:27:54Z",
      "updated_at": "2019-08-01T04:27:54Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.0.0-preview.3` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.3)\n",
      "created_at": "2019-08-20T22:36:35Z",
      "updated_at": "2019-08-20T22:36:35Z"
    }
  ],
  "created_at": "2019-07-29T09:29:12Z",
  "number": 10244,
  "state": "closed",
  "title": "Remove extra check that the system dll exists",
  "updated_at": "2019-08-20T22:36:35Z"
}