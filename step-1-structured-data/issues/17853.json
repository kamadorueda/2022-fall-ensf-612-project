{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17853",
  "author": "chscott",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nI have a custom (proprietary) module that gets installed as part of every AWS instance we create. When I launch PowerShell and attempt to run a command _for the first time_, the command is found well enough to tab-complete the parameters. I don't experience any problem there. However, when I try to run the command, I get a sequence like this:\r\n\r\n```\r\nPS C:\\Windows\\System32> Build-ArtifactArchive -ArtifactType Customer -Verbose\r\nBuild-ArtifactArchive: The term 'Build-ArtifactArchive' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\nPS C:\\Windows\\System32> Get-Module\r\n\r\nModuleType Version    PreRelease Name                                ExportedCommands\r\n---------- -------    ---------- ----                                ----------------\r\nManifest   7.0.0.0               Microsoft.PowerShell.Management     {Add-Content, Clear-Content, Clear-Item, Clear-ItemProperty\u2026}\r\nBinary     2.1.0.0               Microsoft.PowerShell.PSReadLine2    {Get-PSReadLineOption, Set-PSReadLineOption, Set-PSReadLineKeyHandler, Get-PSReadLineKeyHandler\u2026}\r\nManifest   7.0.0.0               Microsoft.PowerShell.Utility        {Add-Member, Add-Type, Clear-Variable, Compare-Object\u2026}\r\nScript     2.1.0                 PSReadLine                          {Get-PSReadLineKeyHandler, Get-PSReadLineOption, Remove-PSReadLineKeyHandler, Set-PSReadLineKeyHandle\u2026\r\nScript     1.0.1353.0            TMCTools                            {Build-ArtifactArchive, Build-ExceptionReport, Build-FolderReport, Build-JobReport\u2026}\r\nBinary     1.0.1353              TMCTools\r\n\r\nPS C:\\Windows\\System32> Remove-Module TMCTools\r\nPS C:\\Windows\\System32> Build-ArtifactArchive -ArtifactType Customer -Verbose\r\n2022-08-05_09:49:56 No license key was detected.\r\nException: Unable to initialize function\r\n```\r\n\r\nAs you can see, the module is loaded in the session and the command is recognized as an exported command, yet it can't be found. But then simply removing the module from the session and repeating the command (this autoloads it again, right?) works.\r\n\r\nNote that the module appears as both Script and Binary. This is because I use PSProtector to compile it to DLL.\n\n### Expected behavior\n\n```console\nThe command should work on the first invocation via autoload.\n```\n\n\n### Actual behavior\n\n```console\nPowerShell says the command cannot be found even though Get-Module shows it is loaded.\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nPS C:\\Windows\\System32> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.5\r\nPSEdition                      Core\r\nGitCommitId                    7.2.5\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2022-08-05T16:34:32Z",
  "comments": [
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@chscott I think it's out-of-the scope of an issue for the source code of PowerShell, the problem is on the side of the module TMCTools. You should move it to discussions or ask help on stackoverflow ",
      "created_at": "2022-08-05T14:30:40Z",
      "updated_at": "2022-08-05T14:30:40Z"
    },
    {
      "author": "chscott",
      "author_association": "NONE",
      "body": "> @chscott I think it's out-of-the scope of an issue for the source code of PowerShell, the problem is on the side of the module TMCTools. You should move it to discussions or ask help on stackoverflow\r\n\r\nHow is it a module issue?",
      "created_at": "2022-08-05T14:31:56Z",
      "updated_at": "2022-08-05T14:31:56Z"
    },
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "> > @chscott I think it's out-of-the scope of an issue for the source code of PowerShell, the problem is on the side of the module TMCTools. You should move it to discussions or ask help on stackoverflow\r\n> \r\n> How is it a module issue?\r\n\r\nThere is the same module loaded with 2 versions. I think there is a problem on the psd1",
      "created_at": "2022-08-05T14:34:13Z",
      "updated_at": "2022-08-05T14:34:13Z"
    },
    {
      "author": "chscott",
      "author_association": "NONE",
      "body": "As I said, it's not really two versions. It just appears that way because I use PSProtector. I'm not saying that's definitely not the issue, but this has never been a problem for me until recently, though I couldn't tell you the last version of PowerShell where this wasn't a problem. Is there a way to trace the module loading bit? I thought -Verbose might do it, but I don't get anything there.",
      "created_at": "2022-08-05T14:38:30Z",
      "updated_at": "2022-08-05T14:38:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Is there a way to trace the module loading bit?\r\n\r\nhttps://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/trace-command?view=powershell-7.2\r\nhttps://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/get-tracesource?view=powershell-7.2\n\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/trace-command\">Trace-Command (Microsoft.PowerShell.Utility) - PowerShell</a></strong></div><div>The Trace-Command cmdlet configures and starts a trace of the specified expression or command. It works like Set-TraceSource, except that it applies only to the specified command. </div></blockquote>\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/get-tracesource\">Get-TraceSource (Microsoft.PowerShell.Utility) - PowerShell</a></strong></div><div>The Get-TraceSource cmdlet gets the trace sources for PowerShell components that are currently in use. You can use the data to determine which PowerShell components you can trace. When tracing, the component generates detailed messages about each step in its internal processing. Developers use the trace data to monitor data flow, program execution, and errors. The tracing cmdlets were designed for PowerShell developers, but they are available to all users. </div></blockquote>",
      "created_at": "2022-08-05T16:34:20Z",
      "updated_at": "2022-08-05T16:34:22Z"
    }
  ],
  "created_at": "2022-08-05T14:03:27Z",
  "number": 17853,
  "state": "closed",
  "title": "Automatic module import isn't working correctly",
  "updated_at": "2022-08-05T16:34:38Z"
}