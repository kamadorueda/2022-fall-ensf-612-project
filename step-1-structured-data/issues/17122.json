{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17122",
  "author": "Raffaello",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nUsing PS 7.2\r\n\r\nfor eg running this 1 line script:\r\n```powershell\r\nPS C:\\> $host.Version | Where-Object {$_.Major -eq 7} && exit 1  \r\n```\r\n\r\nit will result in the following error output:\r\n```powershell\r\n\r\nMajor  Minor  Build  Revision\r\n-----  -----  -----  --------\r\n7      2      2      -1\r\nexit: The term 'exit' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again\r\n```\r\n\r\n### Expected behavior\r\n\r\n```powershell\r\nMajor  Minor  Build  Revision\r\n-----  -----  -----  --------\r\n7      2      2      -1\r\n[process exited with code 1 (0x00000001)]\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```powershell\r\nIt doesn't recognize exit keyword\r\n```\r\n\r\n\r\n### Error details\r\n\r\n```powershell\r\nPS C:\\>Get-Error\r\n\r\nException             :\r\n    Type        : System.Management.Automation.CommandNotFoundException\r\n    ErrorRecord :\r\n        Exception             :\r\n            Type    : System.Management.Automation.ParentContainsErrorRecordException\r\n            Message : The term 'exit' is not recognized as a name of a cmdlet, function, script file, or executable\r\nprogram.\r\n                      Check the spelling of the name, or if a path was included, verify that the path is correct and\r\ntry again.\r\n            HResult : -2146233087\r\n        TargetObject          : exit\r\n        CategoryInfo          : ObjectNotFound: (exit:String) [], ParentContainsErrorRecordException\r\n        FullyQualifiedErrorId : CommandNotFoundException\r\n        InvocationInfo        :\r\n            ScriptLineNumber : 1\r\n            OffsetInLine     : 50\r\n            HistoryId        : 1\r\n            Line             : $host.Version | Where-Object {$_.Major -eq 7} && exit\r\n            PositionMessage  : At line:1 char:50\r\n                               + $host.Version | Where-Object {$_.Major -eq 7} && exit\r\n                               +                                                  ~~~~\r\n            InvocationName   : exit\r\n            CommandOrigin    : Internal\r\n        ScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\n    CommandName : exit\r\n    TargetSite  :\r\n        Name          : LookupCommandInfo\r\n        DeclaringType : System.Management.Automation.CommandDiscovery, System.Management.Automation,\r\nVersion=7.2.2.500, Culture=neutral, PublicKeyToken=31bf3856ad364e35\r\n        MemberType    : Method\r\n        Module        : System.Management.Automation.dll\r\n    Message     : The term 'exit' is not recognized as a name of a cmdlet, function, script file, or executable\r\nprogram.\r\n                  Check the spelling of the name, or if a path was included, verify that the path is correct and try\r\nagain.\r\n    Data        : System.Collections.ListDictionaryInternal\r\n    Source      : System.Management.Automation\r\n    HResult     : -2146233087\r\n    StackTrace  :\r\n   at System.Management.Automation.CommandDiscovery.LookupCommandInfo(String commandName, CommandTypes commandTypes,\r\nSearchResolutionOptions searchResolutionOptions, Com\r\n```\r\n\r\n\r\n### Environment data\r\n\r\n```powershell\r\nPS C:\\> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.2\r\nPSEdition                      Core\r\nGitCommitId                    7.2.2\r\nOS                             Microsoft Windows 10.0.19044\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": "2022-04-08T08:19:45Z",
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Duplicate of #10967",
      "created_at": "2022-04-08T00:48:31Z",
      "updated_at": "2022-04-08T00:48:31Z"
    },
    {
      "author": "Raffaello",
      "author_association": "NONE",
      "body": "well actually through the duplicate i found that in this way works:\r\n```powershell\r\n $host.Version | Where-Object {$_.Major -eq 7} && $(exit 1)\r\n\r\nMajor  Minor  Build  Revision\r\n-----  -----  -----  --------\r\n7      2      2      -1\r\n\r\n[process exited with code 1 (0x00000001)]\r\n```\r\n\r\nso, yes it could be more a design discusion rather than a bug.\r\n\r\nI am closing this ticket as i am not considering it a bug anymore, but rather it was my lack of knowledge in PS. :) ",
      "created_at": "2022-04-08T08:19:45Z",
      "updated_at": "2022-04-08T08:20:41Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "What comes after && must be a valid as pipeline so  if/while/do/switch/exit/return statements won't work - There's plenty at #10967 but if it doesn't work with the |  it won't work with || or &&\r\n\r\nI was about to post the $()  solution but as I was typing your reply appeared \r\n\r\nYou do realise that where-object _successfully_ running includes returning _nothing_ so the right hand side always runs in your example :-)  \r\n\r\n\r\n\r\n\r\n",
      "created_at": "2022-04-08T08:31:51Z",
      "updated_at": "2022-04-08T08:31:51Z"
    },
    {
      "author": "Raffaello",
      "author_association": "NONE",
      "body": "> What comes after && must be a valid as pipeline so if/while/do/switch/exit/return statements won't work - There's plenty at #10967 but if it doesn't work with the | it won't work with || or &&\r\n> \r\n> I was about to post the $() solution but as I was typing your reply appeared\r\n> \r\n> You do realise that where-object _successfully_ running includes returning _nothing_ so the right hand side always runs in your example :-)\r\n\r\nyeah right. My example it was really too much Bash biased. \r\nBut i tried different exmaples also wrapping the whole expression and using count etc, but thre is no way to make return error code or something if something you are looking for is missing, it will be just missing and operation succesful.\r\nthe only way is to have multiple lines to achieve the same result so that operator `&&` is quite not so much useful yet, but still nice introduction in v7.\r\n\r\nin brief:\r\nUsing powershell for some simple operations to return != 0 to report something not ok, it is really challenging or might be verbose.\r\n\r\nBut it could be also the case that I have still a lot to learn around PS. \ud83d\ude04 \r\n\r\n@jhoneill   \r\ndo you know, based on my silly example, how to achieve that kind of results?\r\nfor eg, when powershell is major version 7 return an exit code of 1.\r\n\r\n\r\n",
      "created_at": "2022-04-08T09:13:25Z",
      "updated_at": "2022-04-08T09:13:25Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "I'd use an if  - anything which isn't null, 0, empty or $false will be treated as true. (So it's rare to need .count etc)\r\n \r\n`if ($host.Version.Major -eq 7) { exit 1 }`   \r\nor better\r\n`if ($host.Version -ge 6.0.0 ) { exit 1 }`   \r\n\r\nThis will exit if the version is 5.0, 6.0, or 7.0\r\n`if (-not $host.Version.Minor) { exit 1 }`   \r\n\r\nIf it is something complicated I can put a pipeline in the () \r\n\r\n`if ($host.Version | Where-Object {$_.Major -eq 7}) { exit 1 } `\r\n\r\nThis pattern is quite common\r\n``` $fileList = get-item *.ps1```\r\n```if (-not $fileList)   ```\r\nfollowed by  one of\r\n``` \r\n{Write-Warning \"No files \" ; return}\r\n{throw \"no files\" }\r\n{exit 2}  # error for 'file not found'\r\n```\r\nand then \r\n```\r\nforeach ($f in $fileList}\r\n```\r\n\r\nExit as some strange behaviour  have a look at the end of this which I wrote after someone I was talking to was going made working out  why they didn't get an exit code back.   https://jhoneill.github.io/powershell/2019/08/21/ExitThrowReturnEtc.html \r\n\r\n\r\n\n\n<blockquote><img src=\"/assets/james.jpg\" width=\"48\" align=\"right\"><div><strong><a href=\"https://jhoneill.github.io/powershell/2019/08/21/ExitThrowReturnEtc.html\">Exit, Throw, Return, Break and Continue. A Round up.</a></strong></div><div>PowerShell (or PWSH if you prefer). Devops (especially Azure Devops), Photography, and general thoughts</div></blockquote>",
      "created_at": "2022-04-08T10:11:58Z",
      "updated_at": "2022-04-08T10:12:00Z"
    }
  ],
  "created_at": "2022-04-08T00:23:28Z",
  "number": 17122,
  "state": "closed",
  "title": "[PS 7.2] operator && doesn't recognize exit",
  "updated_at": "2022-04-08T10:12:00Z"
}