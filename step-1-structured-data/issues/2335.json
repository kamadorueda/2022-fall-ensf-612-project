{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2335",
  "author": "mirichmo",
  "body": "I updated the filter to conform to Pester guidance.\n",
  "closed_at": "2016-09-27T23:30:25Z",
  "comments": [
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "Hi **@mirichmo**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    <p>\n        It looks like you're a Microsoft contributor (Mike Richmond). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    </p>\n\nTTYL, MSBOT;\n",
      "created_at": "2016-09-21T21:48:14Z",
      "updated_at": "2016-09-21T21:48:14Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "@mirichmo can you provide a link to this guidelines?\nI find this way of skipping them questionable and potentially leading to problems. Would like to discuss.\n",
      "created_at": "2016-09-21T21:52:48Z",
      "updated_at": "2016-09-21T21:52:48Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "The guidance is in Jim's PR: https://github.com/JamesWTruher/PowerShell-1/blob/f8db6811a267e8cb7b58ee0b37181716d4317316/docs/testing-guidelines/WritingPesterTests.md\n",
      "created_at": "2016-09-21T22:39:04Z",
      "updated_at": "2016-09-21T22:39:04Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "The current approach is definitely better then what it used to be. The problem that I see is that it's too verbose. There are a lot of Describe blocks with few It blocks inside and it creates an overwhelmingly verbose massaging to achieve the goal. I think it's appropriate to use a modification of this technique here: it could be done once per file, at the beginning, and then the rest of the file can be wrapped in try-finally, where previous parameters are restored in finally. It's less idiomatic, but saves a lot of copy-paste.\n",
      "created_at": "2016-09-22T03:02:43Z",
      "updated_at": "2016-09-22T03:02:43Z"
    },
    {
      "author": "mirichmo",
      "author_association": "MEMBER",
      "body": "The motivation for using this technique is that the tests are tracked consistently across all platforms. The original method caused these tests to disappear when run on non-Windows platforms. Now they can at least be tracked as skipped.\n",
      "created_at": "2016-09-22T17:12:30Z",
      "updated_at": "2016-09-22T17:12:30Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Exactly, that's why I said it's better then it used to be. I'm just proposing to use a less verbose variation of the skipping, do it as a top-level thing on the file. @JamesWTruher can you comment?\n",
      "created_at": "2016-09-22T17:29:29Z",
      "updated_at": "2016-09-22T17:29:29Z"
    },
    {
      "author": "mirichmo",
      "author_association": "MEMBER",
      "body": "I uncovered one wrinkle to this test skipping technique when fixing the tests. It becomes less clean when tests need to do actual work in the BeforeAll, AfterAll, BeforeEach, and AfterEach. Even Sergei's suggestion suffers from the same checking requirement. Following the existing guidance, you end up with something like this:\n\n``` powershell\n    BeforeAll {\n        #skip all tests on non-windows platform\n        $originalDefaultParameterValues = $PSDefaultParameterValues.Clone()\n        $PSDefaultParameterValues[\"it:skip\"] = ($IsWindows -eq $false)\n\n        if ($PSDefaultParameterValues[\"it:skip\"] -eq $false) {\n            <work>\n        }\n    }\n    AfterAll {\n        if ($PSDefaultParameterValues[\"it:skip\"] -eq $false) {\n            <work>\n        }\n        $global:PSDefaultParameterValues = $originalDefaultParameterValues\n    }\n    BeforeEach {\n        if ($PSDefaultParameterValues[\"it:skip\"] -eq $false) {\n            <work>\n        }\n    }\n\n    AfterEach {\n        if ($PSDefaultParameterValues[\"it:skip\"] -eq $false) {\n            <work>\n        }\n    }\n```\n",
      "created_at": "2016-09-22T18:15:37Z",
      "updated_at": "2016-09-22T18:20:42Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "We could use a convention like:\n\n``` powershell\nBeforeAll {\n        #skip all tests on non-windows platform\n        $originalDefaultParameterValues = $PSDefaultParameterValues.Clone()\n        $skipIt = ($IsWindows -eq $false)\n        $PSDefaultParameterValues[\"it:skip\"] = $skipIt\n\n        if ($skipIt) {\n            # work\n        }\n    }\n    AfterAll {\n        if ($skipIt) {\n            # work\n        }\n        $global:PSDefaultParameterValues = $originalDefaultParameterValues\n    }\n    BeforeEach {\n        if ($skipIt) {\n            # work\n        }\n    }\n\n    AfterEach {\n        if ($skipIt) {\n            # work\n        }\n    }\n```\n\nI'm not really a fan of `PSDefaultParameterValues` though, so if enough people prefer to explicitly specify `-Skip:$skipIt`, I think I'd +1 that proposal.\n",
      "created_at": "2016-09-22T18:27:00Z",
      "updated_at": "2016-09-22T18:27:00Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "I prefer explicit, because PSDefaultParameters contains global state and if something goes wrong it can mess-up the rest of execution royally. But for the bulk skip, explicit skip is too verbose.\n",
      "created_at": "2016-09-22T18:36:49Z",
      "updated_at": "2016-09-22T18:36:49Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Maybe the right solution is to work with Pester to provide `-Skip` on `Describe` in such a way that reports everything we want. In the shorter term, we can live with this solution.\n",
      "created_at": "2016-09-22T20:01:48Z",
      "updated_at": "2016-09-22T20:01:48Z"
    },
    {
      "author": "mirichmo",
      "author_association": "MEMBER",
      "body": "@vors or @lzybkr it is ready for final review. Please take a look\n",
      "created_at": "2016-09-23T21:20:28Z",
      "updated_at": "2016-09-23T21:20:28Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "We talked offline about the approach with @JamesWTruher and he agreed that it's too verbose. Please implement the top level try-finally. \n",
      "created_at": "2016-09-23T21:26:20Z",
      "updated_at": "2016-09-23T21:26:20Z"
    },
    {
      "author": "mirichmo",
      "author_association": "MEMBER",
      "body": "A top-level try-finally doesn't really shrink it all that much. This is what you end up with:\n\n``` powershell\ntry {\n  #skip all tests on non-windows platform\n  $originalDefaultParameterValues = $PSDefaultParameterValues.Clone()\n  $skipIt = ($IsWindows -eq $false)\n  $PSDefaultParameterValues[\"it:skip\"] = $skipIt\n\n  Describe \"Example for skipping a whole file\" {\n    BeforeAll {\n        if ($skipIt) {\n            # work\n        }\n    }\n    AfterAll {\n        if ($skipIt) {\n            # work\n        }\n    }\n    BeforeEach {\n        if ($skipIt) {\n            # work\n        }\n    }\n\n    AfterEach {\n        if ($skipIt) {\n            # work\n        }\n    }\n  }\n}\nfinally {\n  $global:PSDefaultParameterValues = $originalDefaultParameterValues\n}\n```\n\n@JamesWTruher Please confirm this is what you want\n",
      "created_at": "2016-09-23T21:48:18Z",
      "updated_at": "2016-09-23T21:48:18Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "A benefit for this approach is that if you have multiple describe blocks in a single file, it becomes a bit more manageable as you'll have less duplicated code. I don't have a problem with the try/catch approach, and depending on circumstances, I would probably prefer it.\n",
      "created_at": "2016-09-26T17:29:01Z",
      "updated_at": "2016-09-26T17:29:01Z"
    },
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "Hi **@mirichmo**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    <p>\n        It looks like you're a Microsoft contributor (Mike Richmond). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    </p>\n\nTTYL, MSBOT;\n",
      "created_at": "2016-09-26T17:29:08Z",
      "updated_at": "2016-09-26T17:29:08Z"
    },
    {
      "author": "mirichmo",
      "author_association": "MEMBER",
      "body": "@vors I made the try-catch change. It's ready for review now\n",
      "created_at": "2016-09-26T22:28:42Z",
      "updated_at": "2016-09-26T22:28:42Z"
    }
  ],
  "created_at": "2016-09-21T21:48:11Z",
  "number": 2335,
  "state": "closed",
  "title": "Fixing how the LocalAcccounts tests are skipped in Pester",
  "updated_at": "2016-09-27T23:30:25Z"
}