{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7971",
  "author": "edyoung",
  "body": "In pwsh on linux, hold down a key, and observe the rate at which characters are added. Then run Read-Host and observe the rate at which characters are added - it is much slower. In both cases I'm just holding down the f key. This is even slower in Cloud Shell, but the issue is reproducible in a regular terminal on ubuntu. The characters are also buffered differently - if you hold down a key and then release it in the normal terminal, input stops quickly after you release it. In Read-Host, the characters are still being added to the input and displayed several seconds after you release the key.\r\n\r\nWhy does it matter? Several customers have complained. This also shows up when using Get-Credential.\r\n\r\nScreen recording below\r\n\r\n![read-host](https://user-images.githubusercontent.com/45578/46621935-bd75d780-cadd-11e8-8e77-887e49ac942e.gif)\r\n\r\n```powershell\r\n> $PSVersionTable\r\nPSVersion 6.1.0\r\nPSEdition Core\r\nOS Linux 4.15.0-20-generic #21-Ubuntu SMP Tue Apr 24 06:16:15 UTC 2018\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "dend",
      "author_association": "NONE",
      "body": "This is affecting the customers' experience with the Cloud Shell on docs.microsoft.com, especially in cases where we work with them to provision Azure resources and they need to specify information such as VM names, passwords or resource group.",
      "created_at": "2018-10-08T16:48:20Z",
      "updated_at": "2018-10-08T16:48:20Z"
    },
    {
      "author": "jianyunt",
      "author_association": "CONTRIBUTOR",
      "body": "I think I discussed it with @BrucePay before. We also observed the issue. \r\n\r\nThese interactive cmdlets including read-host, get-credential are handled by pwsh, yes?\r\nI noticed that if you remove-module psreadline, regular stdout becomes lagging too. The behavior is much like read-host and get-cred. Does this mean the lagging could be caused by powershell engine? Of course pwsh depends PSReadline which should not be removed. \r\n",
      "created_at": "2018-10-08T23:18:33Z",
      "updated_at": "2018-10-08T23:19:20Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The issue here is that PowerShell Core ConsoleHost has a very simple synchronous readline implementation.  When you use `Read-Host`, it calls back into the host's `ReadLine()` implementation which is not designed to be performant.  PSReadLine on the other hand is what you use in the console when not using `Read-Host`.  PSReadLine buffers the input asynchronously and renders them on a different thread.  ",
      "created_at": "2018-10-09T01:05:18Z",
      "updated_at": "2018-10-09T01:05:18Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "In the efforts of a (hopefully) simple fix, is it possible for PSReadLine to override the Read-Host with a function/cmdlet/alias that works in a similar fashion to how it handles standard input?",
      "created_at": "2018-10-09T03:08:10Z",
      "updated_at": "2018-10-09T03:08:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I started some ConHost optimizations, but my PR for ConHost has been awaiting a review for _several months_. I could continue these optimizations, but reviews is required.",
      "created_at": "2018-10-09T03:44:25Z",
      "updated_at": "2018-10-09T03:44:25Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "`PSReadLine` could be modified to support `Read-Host`, but it might be simpler and/or smarter to better understand why `Console.ReadLine` is so slow.\r\n\r\nTo modify PSReadLine to support `Read-Host`, you'd need to:\r\n\r\n* Not use the PowerShell syntax coloring\r\n* Not share history, possibly not use history at all\r\n* Add support for reading a secure string\r\n* Disable completion\r\n\r\nI've briefly considered a readline implementation that implements parts of the [LSP](https://langserver.org/) for reuse in other tools like `csi` and `fsi`, if that ever gets built, then I think `Read-Host` would be a great use case.",
      "created_at": "2018-10-22T16:31:30Z",
      "updated_at": "2018-10-22T16:31:30Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I don't think it's Console.ReadLine itself that is slow, but the ReadLine loop in ConsoleHost that is slow.  It's single threaded and does a bunch of processing per key press.",
      "created_at": "2018-10-24T00:05:08Z",
      "updated_at": "2018-10-24T00:05:08Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "It's been brought up that when pwsh prompts for mandatory parameters, the experience is not great and typically users ctrl+c and retype the command with the parameter to get tab completion.  We should support using PSReadLine for prompting (which should also cover this read-host case) while still supporting tab completion for a parameter while also resolving the issues @lzybkr brought up above for general ReadLine for strings.",
      "created_at": "2020-06-10T14:25:45Z",
      "updated_at": "2020-06-10T14:25:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "A tracking issue in .Net Runtime repo https://github.com/dotnet/runtime/issues/800",
      "created_at": "2020-06-11T07:55:30Z",
      "updated_at": "2020-06-11T07:55:30Z"
    }
  ],
  "created_at": "2018-10-08T16:44:00Z",
  "number": 7971,
  "state": "open",
  "title": "Enable pwsh ReadLine to use PSReadLine",
  "updated_at": "2020-12-07T19:41:51Z"
}