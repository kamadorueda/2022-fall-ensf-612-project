{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12225",
  "author": "brwilkinson",
  "body": "Is there an argument where it's possible to Enable_psremoting, however flag for a reboot instead of restarting winrm?\r\n\r\narguments are specified here:\r\nhttps://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-core-on-windows?view=powershell-7\r\n\r\nE.g.\r\n'ADD_EXPLORER_CONTEXT_MENU_OPENPOWERSHELL=1 ENABLE_PSREMOTING=1 REGISTER_MANIFEST=1'\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @heaths for information.",
      "created_at": "2020-03-30T11:46:05Z",
      "updated_at": "2020-03-30T11:46:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I guess it is possible if we would use Set-WSManQuickConfig cmdlet (See https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/enable-psremoting?view=powershell-7) instead of Enable-PSRemoting.\r\n\r\n/cc @PaulHigin \n\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/enable-psremoting\">Enable-PSRemoting (Microsoft.PowerShell.Core)</a></strong></div><div><p sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"1\">The <code sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"1\">Enable-PSRemoting</code> cmdlet configures the computer to receive PowerShell remote commands that\nare sent by using the WS-Management technology. WS-Management based PowerShell remoting is currently\nsupported only on Windows platform.</p>\n<p sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"5\">PowerShell remoting is enabled by default on Windows Server platforms. You can use\n<code sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"6\">Enable-PSRemoting</code> to enable PowerShell remoting on other supported versions of Windows and to\nre-enable remoting if it becomes disabled.</p>\n<p sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"9\">You have to run this command only one time on each computer that will receive commands. You do not\nhave to run it on computers that only send commands. Because the configuration starts listeners to\naccept remote connections, it is prudent to run it only where it is needed.</p>\n<p sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"13\">Enabling PowerShell remoting on client versions of Windows when the computer is on a public network\nis normally disallowed, but you can skip this restriction by using the <strong sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"14\">SkipNetworkProfileCheck</strong>\nparameter. For more information, see the description of the <strong sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"15\">SkipNetworkProfileCheck</strong> parameter.</p>\n<p sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"17\">Multiple PowerShell installations can exist side-by-side on a single computer. Running\n<code sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"18\">Enable-PSRemoting</code> will configure a remoting endpoint for the specific installation version that\nyou are running the cmdlet in. So if you run <code sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"19\">Enable-PSRemoting</code> while running PowerShell 6.2, a\nremoting endpoint will be configured that runs PowerShell 6.2. If you run <code sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"20\">Enable-PSRemoting</code> while\nrunning PowerShell 7-preview, a remoting endpoint will be configured that runs PowerShell 7-preview.</p>\n<p sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"23\"><code sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"23\">Enable-PSRemoting</code> creates two remoting endpoint configurations as needed. If the endpoint\nconfigurations already exist, then they are simply ensured to be enabled. The created configurations\nare identical but have different names. One will have a simple name corresponding to the PowerShell\nversion that hosts the session. The other configuration name contains more detailed information\nabout the PowerShell version which hosts the session. For example, when running <code sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"27\">Enable-PSRemoting</code>\nin PowerShell 6.2, you will get two configured endpoints named <strong sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"28\">PowerShell.6</strong>, <strong sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"28\">PowerShell.6.2.2</strong>.\nThis allows you to create a connection to the latest PowerShell 6 host version by using the simple\nname <strong sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"30\">PowerShell.6</strong>. Or you can connect to a specific PowerShell host version by using the longer\nname <strong sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"31\">PowerShell.6.2.2</strong>.</p>\n<p sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"33\">To use the newly enabled remoting endpoints, you must specify them by name with the\n<strong sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"34\">ConfigurationName</strong> parameter when creating a remote connection using the\n<code sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"35\">Invoke-Command</code>,<code sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"35\">New-PSSession</code>,<code sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"35\">Enter-PSSession</code> cmdlets. For more information, see Example 4.</p>\n<p sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"37\">The <code sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"37\">Enable-PSRemoting</code> cmdlet performs the following operations:</p>\n<ul sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"39\">\n<li sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"39\">Runs the <a href=\"~/7.0/Microsoft.WSMan.Management/Set-WSManQuickConfig.md\" sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"39\">Set-WSManQuickConfig</a> cmdlet,\nwhich performs the following tasks:\n<ul sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"41\">\n<li sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"41\">Starts the WinRM service.</li>\n<li sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"42\">Sets the startup type on the WinRM service to Automatic.</li>\n<li sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"43\">Creates a listener to accept requests on any IP address.</li>\n<li sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"44\">Enables a firewall exception for WS-Management communications.</li>\n<li sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"45\">Creates the simple and long name session endpoint configurations if needed.</li>\n<li sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"46\">Enables all session configurations.</li>\n<li sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"47\">Changes the security descriptor of all session configurations to allow remote access.</li>\n</ul>\n</li>\n<li sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"48\">Restarts the WinRM service to make the preceding changes effective.</li>\n</ul>\n<p sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"50\">To run this cmdlet on the Windows platform, start PowerShell by using the Run as administrator\noption. This cmdlet is not available on Linux or MacOS versions of PowerShell.</p>\n<div class=\"CAUTION\" sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"53\">\n<p>Caution</p>\n<p sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"54\">This cmdlet does not affect remote endpoint configurations created by Windows PowerShell.\nIt only affects endpoints created with PowerShell version 6 and greater. To enable and\ndisable PowerShell remoting endpoints that are hosted by Windows PowerShell, run the\n<code sourcefile=\"7.0/Microsoft.PowerShell.Core/Enable-PSRemoting.md\" sourcestartlinenumber=\"57\">Enable-PSRemoting</code> cmdlet from within a Windows PowerShell session.</p>\n</div>\n</div></blockquote>",
      "created_at": "2020-03-30T11:51:00Z",
      "updated_at": "2020-03-30T11:51:02Z"
    },
    {
      "author": "heaths",
      "author_association": "CONTRIBUTOR",
      "body": "Admins and users alike generally hate reboots, though they are a fact of the way Windows puts files in use. Why would you want to force a reboot (even if optional) rather than restart WinRM? Rebooting the machine will also down WinRM for a time - longer even. What's the use-case for supporting this?",
      "created_at": "2020-03-30T17:09:05Z",
      "updated_at": "2020-03-30T17:09:05Z"
    },
    {
      "author": "brwilkinson",
      "author_association": "NONE",
      "body": "@heaths \r\n\r\nWe deploy using DSC (Desired State Configuration) . . So the upgrade of PowerShell breaks the DSC deployment since it restarts WINRM.\r\n\r\nIn DSC the philosophy is to set the reboot flag and then handle it later in the PendingReboot resource. Similar how packages have /norestart. This would also work well for and ENABLE_PSREMOTING=1 RESTART_WINRM=0",
      "created_at": "2020-03-30T17:30:41Z",
      "updated_at": "2020-03-30T17:33:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT @TravisEz13 Makesense to support the DSC install scenario?",
      "created_at": "2020-03-30T17:36:42Z",
      "updated_at": "2020-03-30T17:36:42Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "It seems ok to add a `-NoWinRmRestart` type switch to `Enable-PSRemoting` cmdlet to skip the restart of WinRM and expose that as a MSI arg.",
      "created_at": "2020-03-31T15:00:05Z",
      "updated_at": "2020-03-31T15:00:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@brwilkinson Do you want to pull PR?",
      "created_at": "2020-03-31T15:35:34Z",
      "updated_at": "2020-03-31T15:35:34Z"
    },
    {
      "author": "brwilkinson",
      "author_association": "NONE",
      "body": "I have not contributed to date, however I pulled down the repo and built the project yesterday.\r\n\r\nI would likely need a mentor to get me through the process end to end... however I can make a start at looking into the code for the PSRemoting.\r\n\r\nFeedback on the build process...(only a small thing).\r\nNot sure why I had to create the emtpy nuget directories for the Modules that are built within the project . .. C:\\Users\\<user>\\.nuget\\packages.. e.g. psreadline,theadjob,psdesiredstateconfiguration,microsoft.powershell.archive,packagemanagement,powershellget.    <-- not sure if this is a bug on the build to create these dirs or not ? ",
      "created_at": "2020-04-01T20:09:09Z",
      "updated_at": "2020-04-01T20:09:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I would likely need a mentor to get me through the process end to end... however I can make a start at looking into the code for the PSRemoting.\r\n\r\nYes, maintainers will help you. Look merged PRs as examples. Also we need test(s) but I don't see tests for Enable-PSRemoting. Maybe a manual check is enough for us. /cc @PaulHigin \r\n\r\nCurrently you need find sources for Enable-PSRemoting and add new parameter NoWinRmRestart.",
      "created_at": "2020-04-02T05:42:53Z",
      "updated_at": "2020-04-02T05:42:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Feedback on the build process...(only a small thing).\r\n\r\nI never saw this. I'd expect that `dotnet restore` creates the folders. `Start-PSBuild -Restore` runs  `dotnet restore` for all projects.\r\nMy experience - I always install latest Visual Studio and needed .Net Core from msi. This ensures stable build for .Net Core previews on VS Code.",
      "created_at": "2020-04-02T05:50:25Z",
      "updated_at": "2020-04-02T05:50:40Z"
    },
    {
      "author": "timoline",
      "author_association": "NONE",
      "body": "Any progress on this?\r\n\r\nsame proble here, the upgrade of PowerShell breaks the DSC deployment ",
      "created_at": "2021-11-03T04:50:38Z",
      "updated_at": "2021-11-03T04:50:38Z"
    }
  ],
  "created_at": "2020-03-30T03:11:04Z",
  "labels": [
    "Issue-Enhancement",
    "Area-Maintainers-Build",
    "Up-for-Grabs"
  ],
  "number": 12225,
  "state": "open",
  "title": "Install PowerShell and ENABLE_PSREMOTING without service restart",
  "updated_at": "2021-11-03T04:50:38Z"
}