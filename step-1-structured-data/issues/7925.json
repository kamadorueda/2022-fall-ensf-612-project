{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7925",
  "author": "p0W3RH311",
  "body": "\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n$a = $true,$true,$false\r\n$b = $false,$false,$false\r\n\r\n# Not one False\r\nPS> $a -all $true\r\n$false\r\n\r\n# Not one True\r\nPS> $b -all $false\r\n$true \r\n\r\nPS> $a -notall $true\r\n$true\r\n\r\nPS> $b -notall $false\r\n$false \r\n\r\n# At least one True\r\nPS> $a -any $true\r\n$true\r\n\r\n# At least one True\r\nPS> $b -any $true\r\n$false\r\n\r\n```\r\nanother example:\r\n\r\n```powershell\r\nif ($a -any $true -and $a -notall $true) {\r\n   \"At least one True and one False\"\r\n}\r\n```\r\nmaybe a short syntax like this:\r\n```powershell\r\nif (-any $a -and -notall $a) {\r\n   \"At least one True and one False\"\r\n}\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "Powershell-User",
      "author_association": "NONE",
      "body": "-any is the -contains operator\r\n-notany is the -contains operator\r\n\r\nFor all, just use -notcontains if its binary:\r\n```\r\n#For -Any or -All\r\n\r\n($a -notcontains $true)\r\n\r\n#if any are $true, it returns false, if none are $true (all $false), it returns $true\r\n\r\n($a -notcontains $false)\r\n\r\n#if any are $false, it returns false, if none are $false (all $true), it returns $true\r\n```\r\n\r\n-notall is also ambiguous, does it mean that at least one is and at least one is not? in which case:\r\n```\r\n($a -contains $true -and $a -contains $false)\r\n\r\n#inherently has the notall property\r\n```\r\n\r\nFor objects containing multiple values (other than true/false), you can use Group-Object, Sort-Object and a few other cmdlets. I don't see where these operators would improve things.",
      "created_at": "2018-10-02T20:21:55Z",
      "updated_at": "2018-10-02T20:23:30Z"
    },
    {
      "author": "kvprasoon",
      "author_association": "CONTRIBUTOR",
      "body": "looks interesting !!!",
      "created_at": "2018-10-02T21:31:14Z",
      "updated_at": "2018-10-02T21:31:14Z"
    },
    {
      "author": "p0W3RH311",
      "author_association": "NONE",
      "body": "> \r\n> \r\n> -any is the -contains operator\r\n> -notany is the -contains operator\r\n> \r\n> For all, just use -notcontains if its binary:\r\n> \r\n> ```\r\n> #For -Any or -All\r\n> \r\n> ($a -notcontains $true)\r\n> \r\n> #if any are $true, it returns false, if none are $true (all $false), it returns $true\r\n> \r\n> ($a -notcontains $false)\r\n> \r\n> #if any are $false, it returns false, if none are $false (all $true), it returns $true\r\n> ```\r\n> \r\n> -notall is also ambiguous, does it mean that at least one is and at least one is not? in which case:\r\n> \r\n> ```\r\n> ($a -contains $true -and $a -contains $false)\r\n> \r\n> #inherently has the notall property\r\n> ```\r\n> \r\n> For objects containing multiple values (other than true/false), you can use Group-Object, Sort-Object and a few other cmdlets. I don't see where these operators would improve things.\r\n\r\n($a -in $collection) is the same ($collection -contains $a) \r\nin other case -all -notall and -any is easy to read and also simplified syntax   ",
      "created_at": "2018-10-03T00:28:02Z",
      "updated_at": "2018-10-03T00:28:02Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I would argue that `$array -contains $item` is far easier to read than `$array -any $item` (at least for those of us perhaps who are most accustomed to English over other languages and/or have it as our birth-tongue).\r\n\r\nAnd really, the only thing you *can't* currently do with a single operator that you're suggesting is the `-notall`, which would be most neatly solved, I think with a fairly simple expression that arguably makes *more* semantic sense than the overly-shortened `-notall` operator suggested:\r\n```powershell\r\n@($Array -eq $Item).Count -ne $Array.Count\r\n```\r\n\r\n(And, of course, @Powershell-User's suggestion also has merit there, although I am unsure which is \"better\", at least performance-wise.)\r\n\r\nWhile I do like the idea, as @Powershell-User mentions, the functionality is already present, and I think the existing operators are more than sufficiently clear in intention.",
      "created_at": "2018-10-03T00:38:34Z",
      "updated_at": "2018-10-03T00:43:04Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "> `$array -contains $item` is far easier to read than `$array -any $item`\r\n\r\nAgreed but if `any` accepts (or by default uses) a filter expression it becomes a **tiny bit** more interesting. This would be kind of like the `.Where{}` method e.g. `(2,4,6,7).Where{$_ -le 4}`.  An `Any` **method** would accept a filter e.g. `(2,4,6,7).Any{$_ % 2}` which in this case, detects if there are any odd numbers in the array.  Or as an operator `(2,4,6,7) -any {$_ % 2}`.   You can do this today with LINQ:\r\n```\r\n[int[]]$arr = 2,4,6,7\r\n[System.Func[int,bool]]$func = {param($val) return ($val % 2) }\r\n[System.Linq.Enumerable]::Any($arr, $func)\r\n```\r\nBut it's kind of a PITA.  \r\n\r\nI suppose you could do the same with `-all` e.g. `(2,4,6,7) -all {$_ -lt 10}` would return $true.  \r\n\r\nOr maybe it would be better if PowerShell just worked more easily with the various LINQ `Enumerable` methods?",
      "created_at": "2018-10-03T02:07:22Z",
      "updated_at": "2018-10-03T03:37:21Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "As you state, `.Where{}` is perfectly capable of this.\r\n\r\nI believe there have been discussions about whether or not to add `-where` and `foreach` *operators* as well, which it appears may be more useful to you in this kind of scenario.",
      "created_at": "2018-10-03T02:18:37Z",
      "updated_at": "2018-10-03T02:18:37Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "When we get around to supporting  LINQ, these operations will be covered and it will simply be\r\n```powershell\r\n(2,4,6).All{$_ % s -eq 0}\r\n(1,2,3,4,5,6).Any{$_ -gt 5}\r\n```\r\n",
      "created_at": "2018-10-03T03:35:10Z",
      "updated_at": "2018-10-03T03:35:10Z"
    },
    {
      "author": "HumanEquivalentUnit",
      "author_association": "CONTRIBUTOR",
      "body": "> When we get around to supporting LINQ\r\n\r\nWhere's the GoFundMe for LINQ support? ;) \ud83d\udc4d ",
      "created_at": "2018-10-03T22:09:36Z",
      "updated_at": "2018-10-03T22:10:15Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "If I knew *anything* about LINQ I'd be all over that, but I think it's a bit over my head for the present moment. \ud83d\ude04 \r\n",
      "created_at": "2018-10-04T00:16:29Z",
      "updated_at": "2018-10-04T00:16:29Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "Was looking for interesting issues to work on last night and stumbled on this. \r\n\r\nWhat @rkeithhill suggests (lambda containment operators) makes much more sense, and can easily be implemented with a few modifications to the existing `-contains` op implementation, like [in this branch](https://github.com/IISResetMe/PowerShell/commit/eea5675e2e91a004402ad17a55fd4305862dfb6b):\r\n\r\n![image](https://user-images.githubusercontent.com/7413755/52902493-b2605000-3211-11e9-9d15-91ca070bbcec.png)\r\n\r\n----\r\n\r\n@BrucePay are there any active efforts to pursue LINQ/extension methods any time soon? No need to add this if that's on the roadmap",
      "created_at": "2019-02-16T16:48:34Z",
      "updated_at": "2019-02-16T16:48:34Z"
    }
  ],
  "created_at": "2018-10-02T18:36:12Z",
  "number": 7925,
  "state": "open",
  "title": "add new binary (unary?) operator -ALL and -NOTALL and -ANY ",
  "updated_at": "2019-02-16T16:48:34Z"
}