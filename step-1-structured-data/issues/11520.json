{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11520",
  "author": "egnirra",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\nBoth versions use basically the same code, the stringbuilder.\r\nAm i doing this the wrong way in powershell perhaps?\r\nOr is it something else causing the slow performance.\r\n\r\nAs a side note, the same code in ps5.1 is way slower so at least some improvements have been made \ud83d\udc4d \r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n# get any large file as bytes, mine is 1.5mb\r\n$data=[system.io.file]::ReadAllBytes(\"c:\\foo\\bar.data\")\r\n$data.Length\r\n1507431\r\n\r\n# Slow version \r\nFunction Convert-ByteArrayToHex {\r\n\r\n    [cmdletbinding()]\r\n\r\n    param(\r\n        [parameter(Mandatory=$true)]\r\n        [Byte[]]\r\n        $Bytes\r\n    )\r\n\r\n    $HexString = [System.Text.StringBuilder]::new($Bytes.Length * 2)\r\n\r\n    ForEach($byte in $Bytes){\r\n        $HexString.AppendFormat(\"{0:x2}\", $byte) | Out-Null\r\n    }\r\n\r\n    $HexString.ToString()\r\n}\r\nMeasure-Command {\r\n    $test = Convert-ByteArrayToHex -Bytes $data\r\n}\r\n\r\n# Fast version using C#\r\nFunction Convert-ByteArrayToHex {\r\n\r\n    [cmdletbinding()]\r\n\r\n    param(\r\n        [parameter(Mandatory = $true)]\r\n        [Byte[]]\r\n        $Bytes\r\n    )\r\n  \r\n    $code = @\"\r\nusing System;\r\nusing System.Text;\r\nnamespace Builder\r\n{\r\n    public class String\r\n    {\r\n        public byte[] InBytes\r\n        { get; set; }\r\n\r\n        public string StringBuild()\r\n        {\r\n            StringBuilder sb = new StringBuilder(InBytes.Length * 2);\r\n            foreach (byte b in InBytes)\r\n            {\r\n                sb.AppendFormat(\"{0:x2}\", b);\r\n            }\r\n            return sb.ToString();\r\n        }\r\n    }\r\n}\r\n\"@\r\n    $Assem = (\r\n        \"System\",\r\n        \"System.Collections\"\r\n    )\r\n\r\n    if (-not ([System.Management.Automation.PSTypeName]'Builder.String').Type) {\r\n        Add-Type -TypeDefinition $code -ReferencedAssemblies $Assem -Language CSharp\r\n    }\r\n    $StringBuilder = [Builder.String]::new()\r\n    $StringBuilder.InBytes = $Bytes\r\n    return $StringBuilder.StringBuild()\r\n}\r\n\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nFast execution as the C# version has\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 0\r\nMilliseconds      : 204\r\nTicks             : 2043716\r\nTotalDays         : 2,36541203703704E-06\r\nTotalHours        : 5,67698888888889E-05\r\nTotalMinutes      : 0,00340619333333333\r\nTotalSeconds      : 0,2043716\r\nTotalMilliseconds : 204,3716\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nMuch slower execution\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 8\r\nMilliseconds      : 498\r\nTicks             : 84980517\r\nTotalDays         : 9,83570798611111E-05\r\nTotalHours        : 0,00236056991666667\r\nTotalMinutes      : 0,141634195\r\nTotalSeconds      : 8,4980517\r\nTotalMilliseconds : 8498,0517\r\n\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.3\r\nPSEdition                      Core\r\nGitCommitId                    6.2.3\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-01-09T07:24:47Z",
  "comments": [
    {
      "author": "scriptingstudio",
      "author_association": "NONE",
      "body": "`Out-null` is very slow. Try this `$null = $HexString.AppendFormat(\"{0:x2}\", $byte)`",
      "created_at": "2020-01-08T12:00:06Z",
      "updated_at": "2020-01-08T12:00:06Z"
    },
    {
      "author": "egnirra",
      "author_association": "NONE",
      "body": "> `Out-null` is very slow. Try this `$null = $HexString.AppendFormat(\"{0:x2}\", $byte)`\r\n\r\nThank you!\r\nVery interesting, i didn't know Out-null was so slow.\r\nIt's indeed faster, fast enough perhaps.\r\n\r\nStill it's ~3x slower then c# example, i can live with this however.\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 0\r\nMilliseconds      : 706\r\nTicks             : 7061125\r\nTotalDays         : 8,17259837962963E-06\r\nTotalHours        : 0,000196142361111111\r\nTotalMinutes      : 0,0117685416666667\r\nTotalSeconds      : 0,7061125\r\nTotalMilliseconds : 706,1125",
      "created_at": "2020-01-08T12:24:46Z",
      "updated_at": "2020-01-08T12:24:46Z"
    },
    {
      "author": "egnirra",
      "author_association": "NONE",
      "body": "> > `Out-null` is very slow. Try this `$null = $HexString.AppendFormat(\"{0:x2}\", $byte)`\r\n> \r\n> Thank you!\r\n> Very interesting, i didn't know Out-null was so slow.\r\n> It's indeed faster, fast enough perhaps.\r\n> \r\n> Still it's ~3x slower then c# example, i can live with this however.\r\n> \r\n> Days : 0\r\n> Hours : 0\r\n> Minutes : 0\r\n> Seconds : 0\r\n> Milliseconds : 706\r\n> Ticks : 7061125\r\n> TotalDays : 8,17259837962963E-06\r\n> TotalHours : 0,000196142361111111\r\n> TotalMinutes : 0,0117685416666667\r\n> TotalSeconds : 0,7061125\r\n> TotalMilliseconds : 706,1125\r\n\r\nI used on accident the wrong version of PS in vscode, with v6 it's ~2x difference between c# and PS\r\n\r\nGuess I'll never use Out-Null again then.",
      "created_at": "2020-01-08T12:30:35Z",
      "updated_at": "2020-01-08T12:30:35Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Oh, out-null hasn't been significantly slow for quite a while now.\r\n\r\nIn v6 and above out-null should be about the same as other methods of discarding the unwanted output.\r\n\r\nIhard to say exactly where the slowdown comes, but PS will always be slightly slower than equivalent c#",
      "created_at": "2020-01-08T12:33:47Z",
      "updated_at": "2020-01-08T12:33:47Z"
    },
    {
      "author": "egnirra",
      "author_association": "NONE",
      "body": "Hm interesting.\r\nWhen i use Out-Null -InputObject $HexString.AppendFormat(\"{0:x2}\", $byte)\r\nI get the same slow result as piping it to Out-Null.\r\n\r\nUsing [void]$HexString.AppendFormat(\"{0:x2}\", $byte) is just as fast as $null =\r\nAnd $HexString.AppendFormat(\"{0:x2}\", $byte) > $null \r\nIs almost as fast as [void] and $null =\r\n",
      "created_at": "2020-01-08T12:44:23Z",
      "updated_at": "2020-01-08T12:49:03Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I've seen that discussion quite a bit, haha. In most cases I usually see...\r\n\r\n1. Fastest: $null =\r\n2. \\> $null\r\n3. [void]\r\n4. Slowest: | Out-Null\r\n\r\nThey're usually pretty close though, with the exception of Out-Null being _much_ slower if you pipe to it on PS 5 and earlier.\r\n\r\nI'm not sure if there's a difference between how output from PS functions and output from .NET methods behaves when applying [void] though.",
      "created_at": "2020-01-08T13:00:53Z",
      "updated_at": "2020-01-08T13:01:10Z"
    },
    {
      "author": "egnirra",
      "author_association": "NONE",
      "body": "Good to know, it would be fun to know what's causing Out-Null to be so amazingly slow or perhaps it's because of the pipeline being used.\r\n\r\nBut is this not avoided when using the -inputObject parameter?",
      "created_at": "2020-01-08T13:26:40Z",
      "updated_at": "2020-01-08T13:26:40Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "The pipeline overhead is bypassed in 6.0+ from what I remember, an exception was added specifically for Out-Null.\r\n\r\nI would imagine most of the rest of the extra time for Out-Null is likely spent in the parameter binder when it's called directly. \ud83e\udd14 ",
      "created_at": "2020-01-08T13:33:04Z",
      "updated_at": "2020-01-08T13:33:04Z"
    },
    {
      "author": "egnirra",
      "author_association": "NONE",
      "body": "Yes this can be seen when i use the same code in 5.1, it takes 48s instead of 8s :)\r\n",
      "created_at": "2020-01-08T13:39:32Z",
      "updated_at": "2020-01-08T13:39:32Z"
    }
  ],
  "created_at": "2020-01-08T09:34:55Z",
  "labels": [
    "Issue-Question"
  ],
  "number": 11520,
  "state": "closed",
  "title": "Stringbuilder is slower then using native C# in Powershell",
  "updated_at": "2020-01-09T07:24:47Z"
}