{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11419",
  "author": "iSazonov",
  "body": "If WinCompat feature is enabled and loaded a Windows PowerShell module ,cmdlets from the module have a priority over PowerShell Core cmdlets.\r\n/cc @anmenaga \r\n\r\n# Steps to reproduce\r\n\r\n`Get-Date -UFormat \"%s\"` was changed in PowerShell Core and we use this in follow demo. \r\n\r\n![image](https://user-images.githubusercontent.com/22290914/71308305-86f35680-241c-11ea-937e-7c7a192c7981.png)\r\n\r\n# Expected behavior\r\n\r\nGet-Date from PowerShell Core is involved.\r\n\r\nI'd expect that PowerShell Core cmdlets have a priority or it is better WinCompat feature exports only requested cmdlet which explicitly presents in a feature list. Perhaps we could do `Enable/Disable-WindowsPowerShellCmdlet -Module <name> -Cmdlet <name>`\r\n\r\n# Actual behavior\r\n\r\nGet-Date from Windows PowerShell is involved.\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-preview.6\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-preview.6-71-g36d3b3c0e45937d56650b2747effde94c20b42aa\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-04-16T23:57:55Z",
  "comments": [
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "Yup, this is because proxy commands are Functions [which precede Cmdlets during execution](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_command_precedence?view=powershell-7):\r\n\r\n> If you do not specify a path, PowerShell uses the following precedence order when it runs commands:\r\n> 1. Alias\r\n> 2. Function\r\n> 3. Cmdlet\r\n> 4. Native Windows commands\r\n\r\n`Enable/Disable-WindowsPowerShellCmdlet -Module <name> -Cmdlet <name` is an interesting idea.\r\n",
      "created_at": "2020-01-14T03:29:38Z",
      "updated_at": "2020-01-14T03:29:38Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "Not convinced that Enable/Disable is needed. If you want fine-grained delegation, I'd suggest using JEA (once that starts to work properly in PowerShell 7).",
      "created_at": "2020-01-14T11:32:06Z",
      "updated_at": "2020-01-14T11:32:06Z"
    },
    {
      "author": "alexandair",
      "author_association": "CONTRIBUTOR",
      "body": "@doctordns What is a problem with JEA in PowerShell 7?",
      "created_at": "2020-01-14T11:40:48Z",
      "updated_at": "2020-01-14T11:40:48Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The user shouldn't have to manage the experience through enable/disable cmdlets.  Ideally, if the cmdlet exists in PS7, that one should be used.  However, we still want to support selective proxy generation so that `ConvertFrom-String` is available.",
      "created_at": "2020-01-14T15:17:29Z",
      "updated_at": "2020-01-14T15:17:29Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "> @doctordns What is a problem with JEA in PowerShell 7?\r\n\r\nIn my case, it does not work properly in practice in RC1. See  #11538 \r\n\r\nIt sounds like this is an issue, the team are aware of it, and it should be resolved by RTM (and hopefully earlier),",
      "created_at": "2020-01-14T15:20:45Z",
      "updated_at": "2020-01-14T15:26:28Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "While the fix is being worked on, here is a temporary workaround that can be used:\r\nLocal Core-native cmdlet can be called instead of the proxy function using call operator; e.g.:\r\n`&(Get-Command -Name Import-Csv -CommandType Cmdlet) .\\TestColumn.csv`\r\nor\r\n```\r\n$ImportCsv = Get-Command -Name Import-Csv -CommandType Cmdlet\r\n&($ImportCsv) .\\TestColumn.csv\r\n```",
      "created_at": "2020-03-05T19:58:07Z",
      "updated_at": "2020-03-05T19:58:07Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #12269, which has now been successfully released as `v7.1.0-preview.2`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.2)\n",
      "created_at": "2020-04-23T18:03:35Z",
      "updated_at": "2020-04-23T18:03:35Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #12269, which has now been successfully released as `v7.0.1`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.1)\n",
      "created_at": "2020-05-14T22:53:03Z",
      "updated_at": "2020-05-14T22:53:03Z"
    }
  ],
  "created_at": "2019-12-21T13:22:50Z",
  "number": 11419,
  "state": "closed",
  "title": "Windows PowerShell modules have a priority if WinCompat feature is enabled",
  "updated_at": "2020-05-14T22:53:03Z"
}