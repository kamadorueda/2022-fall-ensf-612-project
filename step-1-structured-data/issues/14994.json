{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14994",
  "author": "iRon7",
  "body": "As the *verb-noun* convention suggests, I think that there are a lot of developers looking for a common way to join objects (lists).\r\nSee StackOverflow: [In Powershell, what's the best way to join two tables into one?](https://stackoverflow.com/a/45483110) \r\nPersonally, I am convinced that a `Join-Object` cmdlet will generally result in a better syntax were an object (list) join is required (in comparison with alternative cmdlets along with `Group-Object`) and better performance (then using obvious iterators like `ForEach-Object` together with `Where-Object` or similar cmdlets and methods).\r\nFor that reason I am maintaining a **`Join-Object`** [script](https://www.powershellgallery.com/packages/Join)/[module](https://www.powershellgallery.com/packages/JoinModule) for more than 3 years now. I *don't* think that my `Join-Object` version should be added to the standard PowerShell package (for one thing, it is written in **PowerShell** and not **C#** \ud83e\udd14), but it might serve as an example for what I would expect from a syntax that comes together with a `Join-Object` cmdlet.\r\n\r\n### What do I expect from a \"internal\" `Join-Object` cmdlet?\r\n\r\n* An Intuitive syntax\r\n  The syntax should be PowerShell like and include features similar to the [SQL Join clause](https://en.wikipedia.org/wiki/Join_(SQL)) where it basically joins (a list of) objects or items based on related properties (`-On` parameter) or a simple side-by-side list join (by omitting the `-On` parameter) as a specific PowerShell cmdlet feature (see: [`#14732`](https://github.com/PowerShell/PowerShell/issues/14732#issuecomment-796740079)) .\r\n* Ability to do similar Join types as SQL, along with `InnerJoin`, `LeftJoin`, `RightJoin`, `FullJoin`\r\n* Ability to join based on multiple property relations, e.g.: `-On Column1, Column2`\r\n* Smart property merging (e.g. if a properly is defined as related, it should only appear ones in the result)\r\n* Respect the PowerShell pipeline (for the left object supplied through pipeline)\r\n* A reasonable performance by using a binary search (`HashTable`) on the right object (knowing that it needs to be iterated multiple times).\r\n  Also note the [Linq `Join-Object` solution](https://www.powershellgallery.com/packages/Join-Object) by [@ili101](https://github.com/ili101)\r\n* Calculated properties\r\n* ...",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "An aside re:\r\n\r\n> And it could even prevent to invest too much in traditional operators as shown here.\r\n\r\nAs I've argued in detail in https://github.com/PowerShell/PowerShell/issues/14724#issuecomment-777801399, there is no reason to pit _cmdlet-based_ solutions against _expression / statement-based_ solutions: _both_ are necessary, and in certain cases use of one over the other is the _only_ option. Instead, we should strive for _feature parity_, to the extent that is feasible.\r\n\r\n\r\n",
      "created_at": "2021-03-11T13:56:33Z",
      "updated_at": "2021-03-11T14:01:16Z"
    }
  ],
  "created_at": "2021-03-11T13:36:08Z",
  "number": 14994,
  "state": "open",
  "title": "Add a `Join-Object` cmdlet to the standard PowerShell equipment",
  "updated_at": "2021-06-11T12:23:09Z"
}