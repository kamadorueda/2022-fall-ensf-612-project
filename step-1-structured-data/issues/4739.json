{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4739",
  "author": "mklement0",
  "body": "A parameter alias is designed to give an _unambiguous_ alternative name - typically shorter than the original name - to a parameter.\r\n\r\nFor instance, `Get-ChildItem`'s `-Directory` parameter (switch) has two aliases: `-ad` and `-d`.\r\n\r\nThus, both `Get-ChildItem -ad` and `Get-ChildItem -d` should work the same as `Get-ChildItem -Directory`.\r\n\r\nHowever, `Get-ChildItem -d` is currently misinterpreted as the `-Depth` parameter.\r\n\r\nThe same problem _may_ affect other cmdlets analogously.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nGet-ChildItem -ad\r\nGet-ChildItem -d\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nBoth commands should list the subdirectories of the current directory.\r\n\r\nActual behavior\r\n---------------\r\n\r\n`Get-ChildItem -ad` succeeds, but `Get-ChildItem -d` fails with the following error:\r\n\r\n```none\r\nGet-ChildItem : Missing an argument for parameter 'Depth'. Specify a parameter of type 'System.UInt32' and try again.\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta.6 on macOS 10.12.6\r\nPowerShell Core v6.0.0-beta.6 on Ubuntu 16.04.3 LTS\r\nPowerShell Core v6.0.0-beta.6 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\nWindows PowerShell v5.1.15063.502 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\n```\r\n",
  "closed_at": "2021-02-03T18:46:29Z",
  "comments": [
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "`-Directory` is not a parameter of `Get-ChildItem` cmdlet, while `-Depth` is. `-Directory` is dynamic parameter of `FileSystem` provider. Thus when PowerShell bind static parameters of `Get-ChildItem` cmdlet `-d` is unambiguously resolved to `-Depth`. PowerShell does not try to find better match for already bound static parameters.\r\n\r\n```powershell\r\nfunction f {\r\n    [CmdletBinding()]\r\n    param($A1)\r\n    dynamicparam {\r\n        Write-Host \"A1 paramter have value '$A1'\"\r\n        $DynParams = [System.Management.Automation.RuntimeDefinedParameterDictionary]::new()\r\n        $A2Param = [System.Management.Automation.RuntimeDefinedParameter]::new('A2', [object], ([Parameter]::new(), [Alias]::new('A', 'B')))\r\n        $DynParams.Add('A2', $A2Param)\r\n        $DynParams\r\n    }\r\n    end {\r\n        \"A1 parameter: '$A1'\"\r\n        \"A2 parameter: '$($A2Param.Value)'\"\r\n    }\r\n}\r\nf -A 42\r\nf -B 42\r\n```",
      "created_at": "2019-04-07T18:42:14Z",
      "updated_at": "2019-04-07T18:42:14Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "As usual, thanks for digging deeper, @PetSerAl.\r\n\r\nGiven the current behavior, the actionable conclusions are:\r\n\r\n* Remove the `d` alias from the `Directory` parameter declaration, because it is effectively _inaccessible_.\r\n\r\n* Update the documentation accordingly.\r\n\r\nLeaving it at that is an option, but the bigger question is:\r\n\r\nCan dynamic parameters be considered alongside the static ones when looking for ambiguity / unambiguous aliases?\r\n\r\nFrom a UX perspective, this seems preferable.\r\n\r\nOr are there good (a) conceptual or (b) technical reasons not to do that?\r\n\r\n\r\n\r\n",
      "created_at": "2019-04-07T19:41:59Z",
      "updated_at": "2019-04-09T15:28:50Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Closed in favor of #14700.",
      "created_at": "2021-02-03T18:46:28Z",
      "updated_at": "2021-02-03T18:46:28Z"
    }
  ],
  "created_at": "2017-09-01T22:31:35Z",
  "labels": [
    "WG-Engine",
    "Issue-Discussion"
  ],
  "number": 4739,
  "state": "closed",
  "title": "Cmdlets may ignore parameter aliases in case of naming collisions with other parameters; e.g., \"Get-ChildItem -d\"",
  "updated_at": "2021-02-03T18:46:29Z"
}