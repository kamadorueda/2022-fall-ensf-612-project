{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16123",
  "author": "BouwenMA",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nI am trying to script to recursively search file systems, and 7.2 preview 9 aborts the Get-ChildItem command with file paths>MAX_PATH (260) chars.  This issue does not happen with prior versions.\r\n\r\nExample folder seen in Win 10 that will cause this:\r\n`\"C:\\ProgramData\\Microsoft\\Windows\\Containers\\BaseImages\\61be50b1-e59b-45c7-9460-020d3f6bc848\\BaseLayer\\Files\\Program Files (x86)\\WindowsPowerShell\\Modules\\Microsoft.PowerShell.Operation.Validation\\1.0.1\\Test\\Modules\\Example2.Diagnostics\\1.0.1\\Diagnostics\\Simple\"`\r\n\r\n- Found initially when searching for files using:  gci -Path C:\\ -Recurse -Force -ErrorAction SilentlyContinue\r\n - The \"Simple\" child folder exceeds MAX_PATH (260) chars and is where it bombs out\r\n - It seems to ignore -ErrorAction SilentlyContinue\r\n\r\n\r\nTo rule out permission issues, I created a separate test folder structure on my D: drive with the same length and had the same results with it:\r\n\r\n```\r\nB:\\Batch>mkdir \"\\\\?\\D:\\DrogramTest\\Microsoft\\Windows\\Containers\\BaseImages\\283a08b6-ccbf-4c2d-a79e-cab35a294e78\\BaseLayer\\Files\\Program Files (x86)\\WindowsPowerShell\\Modules\\Microsoft.PowerShell.Operation.Validation\\1.0.1\\Test\\Modules\\Example2.Diagnostics\\1.0.1\\Diagnostics\\Simple\"\r\n\r\nB:\\Batch>dir \"\\\\?\\D:\\DrogramTest\\Microsoft\\Windows\\Containers\\BaseImages\\283a08b6-ccbf-4c2d-a79e-cab35a294e78\\BaseLayer\\Files\\Program Files  (x86)\\WindowsPowerShell\\Modules\\Microsoft.PowerShell.Operation.Validation\\1.0.1\\Test\\Modules\\Example2.Diagnostics\\1.0.1\\Diagnostics\\Simple\"\r\n Volume in drive \\\\?\\D: is Toshiba5TB\r\n Volume Serial Number is 625A-B5E5\r\n\r\n Directory of \\\\?\\D:\\DrogramTest\\Microsoft\\Windows\\Containers\\BaseImages\\283a08b6-ccbf-4c2d-a79e-cab35a294e78\\BaseLayer\\Files\\Program Files (x86)\\WindowsPowerShell\\Modules\\Microsoft.PowerShell.Operation.Validation\\1.0.1\\Test\\Modules\\Example2.Diagnostics\\1.0.1\\Diagnostics\\Simple\r\n\r\n2021.09.19  18:23    <DIR>          .\r\n2021.09.19  18:23    <DIR>          ..\r\n               0 File(s)              0 bytes\r\n```\r\n\r\nSimply then attempting gci D:\\DrogramTest -Recurse -Force will result in it aborting with the error.\r\n\r\n\r\n\n\n### Expected behavior\n\n```console\nBehavior With 7.2.0 Preview 8 (and prior versions)\r\n\r\nPowerShell 7.2.0-preview.8\r\nCopyright (c) Microsoft Corporation.\r\n\r\nhttps://aka.ms/powershell\r\nType 'help' to get help.\r\n\r\nPS B:\\PSH\\PowerShell-7.2.0-preview.8-win-x64> Get-ChildItem -Path \"C:\\ProgramData\\Microsoft\\Windows\\Containers\\BaseImages\\283a08b6-ccbf-4c2d-a79e-cab35a294e78\\BaseLayer\\Files\\Program Files (x86)\\WindowsPowerShell\\Modules\\Microsoft.PowerShell.Operation.Validation\\1.0.1\\Test\\Modules\\Example2.Diagnostics\\1.0.1\\\" -Recurse -ErrorAction SilentlyContinue -Force\r\n\r\n    Directory:\r\nC:\\ProgramData\\Microsoft\\Windows\\Containers\\BaseImages\\283a08b6-ccbf-4c2d-a79e-cab35a294e78\\BaseLayer\\Files\\Program\r\nFiles\r\n(x86)\\WindowsPowerShell\\Modules\\Microsoft.PowerShell.Operation.Validation\\1.0.1\\Test\\Modules\\Example2.Diagnostics\\1.0.1\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\nd----          2021.05.22    09:54                Diagnostics\r\n\r\n    Directory:\r\nC:\\ProgramData\\Microsoft\\Windows\\Containers\\BaseImages\\283a08b6-ccbf-4c2d-a79e-cab35a294e78\\BaseLayer\\Files\\Program\r\nFiles (x86)\\WindowsPowerShell\\Modules\\Microsoft.PowerShell.Operation.Validation\\1.0.1\\Test\\Modules\\Example2.Diagnostics\r\n\\1.0.1\\Diagnostics\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\nd----          2021.05.22    09:54                Simple\r\n\r\nPS B:\\PSH\\PowerShell-7.2.0-preview.8-win-x64>\n```\n\n\n### Actual behavior\n\n```console\nBehavior With 7.2.0 Preview 9\r\n\r\nPowerShell 7.2.0-preview.9\r\nCopyright (c) Microsoft Corporation.\r\n\r\nhttps://aka.ms/powershell\r\nType 'help' to get help.\r\n\r\nPS B:\\PSH\\PowerShell-7.2.0-preview.9-win-x64> Get-ChildItem -Path \"C:\\ProgramData\\Microsoft\\Windows\\Containers\\BaseImages\\283a08b6-ccbf-4c2d-a79e-cab35a294e78\\BaseLayer\\Files\\Program Files (x86)\\WindowsPowerShell\\Modules\\Microsoft.PowerShell.Operation.Validation\\1.0.1\\Test\\Modules\\Example2.Diagnostics\\1.0.1\\\" -Recurse -ErrorAction SilentlyContinue -Force\r\n\r\n    Directory:\r\nC:\\ProgramData\\Microsoft\\Windows\\Containers\\BaseImages\\283a08b6-ccbf-4c2d-a79e-cab35a294e78\\BaseLayer\\Files\\Program\r\nFiles\r\n(x86)\\WindowsPowerShell\\Modules\\Microsoft.PowerShell.Operation.Validation\\1.0.1\\Test\\Modules\\Example2.Diagnostics\\1.0.1\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\nd----          2021.05.22    09:54                Diagnostics\r\n\r\n    Directory:\r\nC:\\ProgramData\\Microsoft\\Windows\\Containers\\BaseImages\\283a08b6-ccbf-4c2d-a79e-cab35a294e78\\BaseLayer\\Files\\Program\r\nFiles (x86)\\WindowsPowerShell\\Modules\\Microsoft.PowerShell.Operation.Validation\\1.0.1\\Test\\Modules\\Example2.Diagnostics\r\n\\1.0.1\\Diagnostics\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\nd----          2021.05.22    09:54\r\nGet-ChildItem: The system cannot find the path specified.\r\n\r\nPS B:\\PSH\\PowerShell-7.2.0-preview.9-win-x64>\n```\n\n\n### Error details\n\n```console\nPS B:\\> Get-Error\r\n\r\nException             :\r\n    Type            : System.ComponentModel.Win32Exception\r\n    NativeErrorCode : 3\r\n    ErrorCode       : -2147467259\r\n    TargetSite      :\r\n        Name          : IsReparsePointLikeSymlink\r\n        DeclaringType : Microsoft.PowerShell.Commands.InternalSymbolicLinkLinkCodeMethods\r\n        MemberType    : Method\r\n        Module        : System.Management.Automation.dll\r\n    Message         : The system cannot find the path specified.\r\n    Source          : System.Management.Automation\r\n    HResult         : -2147467259\r\n    StackTrace      :\r\n   at Microsoft.PowerShell.Commands.InternalSymbolicLinkLinkCodeMethods.IsReparsePointLikeSymlink(FileSystemInfo\r\nfileInfo) in System.Management.Automation.dll:token 0x60016fa+0x6d\r\n   at Microsoft.PowerShell.Commands.FileSystemProvider.Dir(DirectoryInfo directory, Boolean recurse, UInt32 depth,\r\nBoolean nameOnly, ReturnContainers returnContainers, InodeTracker tracker) in System.Management.Automation.dll:token\r\n0x6001657+0x31b\r\n   at Microsoft.PowerShell.Commands.FileSystemProvider.Dir(DirectoryInfo directory, Boolean recurse, UInt32 depth,\r\nBoolean nameOnly, ReturnContainers returnContainers, InodeTracker tracker) in System.Management.Automation.dll:token\r\n0x6001657+0x34f\r\n   at Microsoft.PowerShell.Commands.FileSystemProvider.GetPathItems(String path, Boolean recurse, UInt32 depth,\r\nBoolean nameOnly, ReturnContainers returnContainers) in System.Management.Automation.dll:token 0x6001656+0x5a\r\n   at Microsoft.PowerShell.Commands.FileSystemProvider.GetChildItems(String path, Boolean recurse, UInt32 depth) in\r\nSystem.Management.Automation.dll:token 0x6001653+0x0\r\n   at System.Management.Automation.SessionStateInternal.GetChildItems(CmdletProvider providerInstance, String path,\r\nBoolean recurse, UInt32 depth, CmdletProviderContext context) in System.Management.Automation.dll:token 0x6003a8e+0x7\r\nCategoryInfo          : NotSpecified: (:) [Get-ChildItem], Win32Exception\r\nFullyQualifiedErrorId : System.ComponentModel.Win32Exception,Microsoft.PowerShell.Commands.GetChildItemCommand\r\nInvocationInfo        :\r\n    MyCommand        : Get-ChildItem\r\n    ScriptLineNumber : 1\r\n    OffsetInLine     : 1\r\n    HistoryId        : 1\r\n    Line             : Get-ChildItem -Path\r\n\"C:\\ProgramData\\Microsoft\\Windows\\Containers\\BaseImages\\283a08b6-ccbf-4c2d-a79e-cab35a294e78\\BaseLayer\\Files\\Program\r\nFiles (x86)\\WindowsPowerShell\\Modules\\Microsoft.PowerShell.Operation.Validation\\1.0.1\\Test\\Modules\\Example2.Diagnostics\r\n\\1.0.1\\\" -Recurse -ErrorAction SilentlyContinue -Force\r\n    PositionMessage  : At line:1 char:1\r\n                       + Get-ChildItem -Path \"C:\\ProgramData\\Microsoft\\Windows\\Containers\\Base \u2026\r\n                       + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    InvocationName   : Get-ChildItem\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\n```\n\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0-preview.9\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0-preview.9\r\nOS                             Microsoft Windows 10.0.21390\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u0393\u00c7\u00aa}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2021-11-19T23:48:27Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Please load latest daily build from https://github.com/PowerShell/PowerShell and check again.\n\n<blockquote><img src=\"https://repository-images.githubusercontent.com/49609581/aad0ad80-cdec-11ea-8248-a37bc0571bfd\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell\">GitHub - PowerShell/PowerShell: PowerShell for every system!</a></strong></div><div>PowerShell for every system! Contribute to PowerShell/PowerShell development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2021-09-20T05:04:52Z",
      "updated_at": "2021-09-20T05:04:54Z"
    },
    {
      "author": "BouwenMA",
      "author_association": "NONE",
      "body": "I tested with the latest daily as suggested.  The results were the same when using the commands I showed above for recreating the condition.  \r\n\r\nWith more testing today, I found that **this only occurs if the length of one of the directories is exactly equal to MAX_PATH**.  _Anything less or greater does not result in this issue_.  It just so happens that the C:\\ProgramData structure I first found this with, as well as the example folder I created above, had a path where one of the child folders came to exactly 260 chars.  I updated the title today of this issue to better indicate the problem.\r\n\r\nI created a quick script that can be used to show this in action, and allow easily running from different PS versions called \"ShowPSH_Bug.ps1\" with the contents listed below:\r\n\r\n# \"ShowPSH_Bug.ps1\"\r\n```\r\n# Show the PowerShell Version\r\n$PSVersionTable.PSVersion.ToString()\r\n\r\n# Pick top level to create test folder\r\n$Base = $ENV:USERPROFILE\r\n# Generate name for long test folder to create that is close to MAX_PATH, but under, leaving room to create child folders\r\n$FoldParent = \"A\" * (260 - $Base.Length - 9 - 2)  # 9 = \"Fold03Bad\" length and 2 = 2x \"\\\"\r\n\r\n# Create test folder structure, with a \"SubFolder\" underneath each test child folder\r\nCmd.exe /C MkDir \"\\\\?\\$Base\\$FoldParent\\Fold01Good\\SubFolder\"\t# Parent of \"SubFolder\" Will be 261 chars long\r\nCmd.exe /C MkDir \"\\\\?\\$Base\\$FoldParent\\Fold02Good02\"\t        # Folder Will be 263 chars long - No subfolders created\r\nCmd.exe /C MkDir \"\\\\?\\$Base\\$FoldParent\\Fold03OK\\SubFolder\"\t# Parent of \"SubFolder\" Will be 259 chars long\r\nCmd.exe /C MkDir \"\\\\?\\$Base\\$FoldParent\\Fold04Bad\\SubFolder\"\t# Parent of \"SubFolder\" Will be exactly 260 chars long (MAX_PATH) - This will be the problematic one!\r\nCmd.exe /C MkDir \"\\\\?\\$Base\\$FoldParent\\Fold05___OK\\SubFolder\"\t# Parent of \"SubFolder\" Will be 262 chars long\r\n\r\n# Now Perform First Test - Simply Using Get-ChildItem To Display The Output\r\nWrite-Host(\"`r`nTest One: gci\")\r\n# With PSH 7.2 preview 9 and newer this bombs out right when enumerating the \"Fold04Bad\" folder\r\nGet-ChildItem -Recurse -Force -ErrorAction SilentlyContinue \"$Base\\$FoldParent\"\r\n\r\n# Now Perform Second Test - Using Get-ChildItem Piping To ForEach-Object\r\nWrite-Host(\"`r`nTest Two: gci + ForEach\")\r\nGet-ChildItem -Recurse -Force -ErrorAction SilentlyContinue -Path \"$Base\\$FoldParent\" | ForEach-Object {\r\n\t# With PSH 7.2 preview 9 and newer this bombs out right when enumerating the \"Fold04Bad\" folder, aborting the ForEach, and ignoring the ErrorAction\r\n\t\"Curr Folder: $($_.Name)\"\r\n}\r\n\r\n# Remove the test folder structure\r\nWrite-Host(\"Removing test folder structure...\")\r\nCmd.exe /C RD /S /Q \"\\\\?\\$Base\\$FoldParent\"\r\n\r\n```\r\n\r\nI ran that script above in several PS versions, and pasted results below to show how the latest preview 9 and newer seem to have introduced an issue when this scenario occurs.\r\n \r\n# Output for PowerShell 7.2 preview 8 (I also validated PowerShell 7.1.4 matched this) \r\n\r\n```\r\nPS C:\\> Z:\\ShowPSH_Bug.ps1\r\n7.2.0-preview.8\r\n\r\nTest One: gci\r\n\r\n    Directory: C:\\Users\\matt\\AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\nd----          2021.09.25    01:55                Fold01Good\r\nd----          2021.09.25    01:55                Fold02Good02\r\nd----          2021.09.25    01:55                Fold03OK\r\nd----          2021.09.25    01:55                Fold04Bad\r\nd----          2021.09.25    01:55                Fold05___OK\r\n\r\n    Directory: C:\\Users\\matt\\AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAA\\Fold01Good\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\nd----          2021.09.25    01:55                SubFolder\r\n\r\n    Directory: C:\\Users\\matt\\AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAA\\Fold03OK\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\nd----          2021.09.25    01:55                SubFolder\r\n\r\n    Directory: C:\\Users\\matt\\AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAA\\Fold04Bad\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\nd----          2021.09.25    01:55                SubFolder\r\n\r\n    Directory: C:\\Users\\matt\\AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAA\\Fold05___OK\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\nd----          2021.09.25    01:55                SubFolder\r\n\r\nTest Two: gci + ForEach\r\nCurr Folder: Fold01Good\r\nCurr Folder: Fold02Good02\r\nCurr Folder: Fold03OK\r\nCurr Folder: Fold04Bad\r\nCurr Folder: Fold05___OK\r\nCurr Folder: SubFolder\r\nCurr Folder: SubFolder\r\nCurr Folder: SubFolder\r\nCurr Folder: SubFolder\r\nRemoving test folder structure...\r\n\r\nPS C:\\>\r\n```\r\n\r\n\r\n\r\n\r\n# Output for PowerShell 7.2 preview 9 and newer including latest daily\r\n```\r\n\r\nPS C:\\> Z:\\ShowPSH_Bug.ps1\r\n7.2.0-daily20210923.1\r\n\r\nTest One: gci\r\n\r\n    Directory: C:\\Users\\matt\\AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\nd----          2021.09.25    01:56                Fold01Good\r\nd----          2021.09.25    01:56                Fold02Good02\r\nd----          2021.09.25    01:56                Fold03OK\r\nd----          2021.09.25    01:56\r\nd----          2021.09.25    01:56                Fold05___OK\r\n\r\n    Directory: C:\\Users\\matt\\AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAA\\Fold01Good\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\nd----          2021.09.25    01:56                SubFolder\r\n\r\n    Directory: C:\\Users\\matt\\AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAA\\Fold03OK\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\nd----          2021.09.25    01:56                SubFolder\r\nGet-ChildItem: Z:\\ShowPSH_Bug.ps1:19\r\nLine |\r\n  19 |  Get-ChildItem -Recurse -Force -ErrorAction SilentlyContinue \"$Base\\$F \u2026\r\n     |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     | The system cannot find the path specified.\r\n\r\n\r\nTest Two: gci + ForEach\r\nCurr Folder: Fold01Good\r\nCurr Folder: Fold02Good02\r\nCurr Folder: Fold03OK\r\nCurr Folder: Fold04Bad\r\nCurr Folder: Fold05___OK\r\nCurr Folder: SubFolder\r\nCurr Folder: SubFolder\r\nGet-ChildItem: Z:\\ShowPSH_Bug.ps1:23\r\nLine |\r\n  23 |  Get-ChildItem -Recurse -Force -ErrorAction SilentlyContinue -Path \"$B \u2026\r\n     |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     | The system cannot find the path specified.\r\n\r\nRemoving test folder structure...\r\n\r\nPS C:\\>\r\n\r\n```\r\n\r\nAbove it can be seen that preview 9 and newer abort when attempting to enumerate the \"Fold04Bad\" folder structure for the simple gci recurse operation.  \r\nNotice also in the fist part of the gci output above, where it lists the first set of folders before it starts recursing, that the listing has the placeholder with date/time stamp for the \"Fold04Bad\" folder, but _the name is missing from the list_... as seen in this excerpt here:\r\n\r\n```\r\nd----          2021.09.25    01:56                Fold03OK\r\nd----          2021.09.25    01:56\r\nd----          2021.09.25    01:56                Fold05___OK\r\n\r\n```\r\n\r\nWhen attempting to pipe the gci to ForEach-Object, the failure completely aborts seemingly ignoring the specified ErrorAction, making the error more of a terminating error vs non-terminating.\r\n\r\n\r\n# PS 5.1 Behavior\r\nIt should be noted that PS 5.1 does not enumerate the folders longer than MAX_PATH.  However, as long as I use the ErrorAction shown, it at least continues with the operation and does not abort it:\r\n\r\n\r\n```\r\nPS C:\\> Z:\\ShowPSH_Bug.ps1\r\n5.1.19041.1237\r\n\r\nTest One: gci\r\n\r\n\r\n    Directory: C:\\Users\\matt\\AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\n    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\n\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\nd-----        2021.09.25     02:21                Fold01Good\r\nd-----        2021.09.25     02:21                Fold02Good02\r\nd-----        2021.09.25     02:21                Fold03OK\r\nd-----        2021.09.25     02:21                Fold04Bad\r\nd-----        2021.09.25     02:21                Fold05___OK\r\n\r\nTest Two: gci + ForEach\r\nCurr Folder: Fold01Good\r\nCurr Folder: Fold02Good02\r\nCurr Folder: Fold03OK\r\nCurr Folder: Fold04Bad\r\nCurr Folder: Fold05___OK\r\nRemoving test folder structure...\r\n\r\n\r\nPS C:\\>\r\n```\r\n\r\nTo confirm I removed the -ErrorAction and ran again in 5.1..  Where I saw an error displayed for each folder as it tried to enumerate...  However it still didn't completely abort the operation trying either as seen with preview 9 and newer of 7.2.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2021-09-25T06:34:06Z",
      "updated_at": "2021-09-25T06:34:06Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@BouwenMA Thanks for your investigations!\r\n\r\nThe fix is easy. In:\r\nhttps://github.com/PowerShell/PowerShell/blob/3ed7571f94705a81b861efca7854dbcd9c2225bd/src/System.Management.Automation/namespaces/FileSystemProvider.cs#L8270-L8273\r\nwe should replace the condition with `if (fullPath.Length >= MAX_PATH)`.\r\n",
      "created_at": "2021-09-27T08:10:16Z",
      "updated_at": "2021-09-27T08:10:16Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #16487, which has now been successfully released as `v7.3.0-preview.1`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.3.0-preview.1)\n",
      "created_at": "2021-12-16T20:00:09Z",
      "updated_at": "2021-12-16T20:00:09Z"
    }
  ],
  "created_at": "2021-09-19T22:40:27Z",
  "number": 16123,
  "state": "closed",
  "title": "Get-ChildItem -Recurse -Force Aborts With File Paths When Directory Structure Has At Least One Level Exactly Equal To MAX_PATH For Length - And Ignores ErrorAction Options / Introduced With PowerShell 7.2.0-preview.9",
  "updated_at": "2021-12-16T20:00:09Z"
}