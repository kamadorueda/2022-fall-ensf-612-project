{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10618",
  "author": "crabtruckington",
  "body": "I am trying to use the Microsoft.Management.Infrastructure.dll as a reference in a c# project. I have downloaded the package from nuget (https://www.nuget.org/packages/Microsoft.Management.Infrastructure/) which gives me version 1.0.0.0 . I have the reference included in the build as \"Copy Local: True\", and it is properly copied to my /bin/ directory.\r\n\r\n\r\nEverything works in my development environment without issue. However, when I move the compiled output to another machine, I receive an error:\r\n\r\n```\r\nSystem.IO.FileLoadException: Could not load file or assembly\r\n'Microsoft.Management.Infrastructure, Version=`1.0.0.0. Culture=neutral,\r\nPublicKeyToken=31bf3856ad364e35' or one of its dependencies. Strong name validation failed\r\n```\r\n\r\nI checked the signing with sn.exe and it shows the following:\r\n\r\n```\r\n`.\\Microsoft.Management.Infrastructure.dll is a delay-signed or test-signed assembly`\r\n```\r\n\r\nI see that new preview versions are available on the nuget page, but I have a lot of code that relies on the methods in this .dll, and this code is targeting production, so I am very hesitant to include non-release code.",
  "closed_at": "2020-01-31T18:57:49Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@crabtruckington I am not sure that the repo is right place to report the issue. Also the API was deprecated and you should use alternatives.\r\n\r\n@TravisEz13 Could you comment about signing MMI?",
      "created_at": "2019-09-25T14:29:47Z",
      "updated_at": "2019-09-25T14:29:47Z"
    },
    {
      "author": "crabtruckington",
      "author_association": "NONE",
      "body": "Whats it been deprecated by? The microsoft docs recommend using Microsoft.Management.Infrastructure over what I was using before, System.Management ( https://docs.microsoft.com/en-us/windows/win32/wmisdk/connecting-to-wmi-remotely-with-c- ). Docs seem to correspond with the publish date of the assembly on nuget.\r\n\r\nIs there something else I should be using to connect to WMI? Target machines are Windows Server 2008 R2 or Server 2012 if that makes a difference. No plans to update them in the near future.\r\n\r\nIf theres a more appropriate place to report this, my apologies, but the nuget page points to the owner being the Powershell team, and the .dll seems to be included in this repo, though I may be misunderstanding the relationship there. \r\n\r\n*edit* The only 2 objects im using from the assembly are CimInstance and CimSession, so if theres something better that includes those, i'm more than willing to try it. \r\n\r\n<blockquote><div><strong><a href=\"https://docs.microsoft.com/en-us/windows/win32/wmisdk/connecting-to-wmi-remotely-with-c-\">Connecting to WMI Remotely with C# - Windows applications</a></strong></div><div>As with other languages such as PowerShell, VBScript, or C++, you can use C# to remotely monitor the hardware and software on remote computers.</div></blockquote>",
      "created_at": "2019-09-25T15:00:14Z",
      "updated_at": "2019-09-25T15:10:54Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "cc @adityapatwardhan about this issue",
      "created_at": "2019-09-25T19:33:14Z",
      "updated_at": "2019-09-25T19:33:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @SteveL-MSFT Can we close the issue?",
      "created_at": "2020-01-30T14:39:04Z",
      "updated_at": "2020-01-30T14:39:04Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "We should probably strong name sign this assembly",
      "created_at": "2020-01-31T05:00:31Z",
      "updated_at": "2020-01-31T05:00:31Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT The error indicates that this was targeting the full framework.  We typically don't strong name sign assemblies when we are intending the binary for .NET Core.",
      "created_at": "2020-01-31T18:55:29Z",
      "updated_at": "2020-01-31T18:55:29Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Ok, then let's close this",
      "created_at": "2020-01-31T18:57:49Z",
      "updated_at": "2020-01-31T18:57:49Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@crabtruckington When targeting full framework, you should use the binary built into Windows.",
      "created_at": "2020-01-31T18:59:28Z",
      "updated_at": "2020-01-31T18:59:28Z"
    },
    {
      "author": "olek539",
      "author_association": "NONE",
      "body": "Hey guys,\r\n > @crabtruckington When targeting full framework, you should use the binary built into Windows.\r\n\r\nwhat if that binary is lacking in Windows?\r\n\r\nTo clarify: the library in question is also provided by Powershell 3.x installation (correct me here please) - there are systems that do not have it installed out of the box.\r\n\r\nThis is a real-world situation (problem) where the OS complains about it not being strong-named properly (delay-signed) when I supply that library from your nuget repo.\r\n\r\nCould you please refer to that?\r\n",
      "created_at": "2020-07-24T11:00:38Z",
      "updated_at": "2020-07-27T09:17:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@olek539 Powershell 3.x is EOL and is not supported.\r\nMMI nuget is a limited version for PowerShell Core only. ",
      "created_at": "2020-07-24T18:09:40Z",
      "updated_at": "2020-07-24T18:09:40Z"
    },
    {
      "author": "olek539",
      "author_association": "NONE",
      "body": "Thanks for the reply.\r\nAs I understand - Microsoft no longer assigns strong-name to their .Net Core libs.\r\n\r\nBut the problem still persists - If we choose to provide that library (via nuget) and refer that library (Microsoft.Management.Infrastructure.dll) in our code - when there is no such library provided by the OS, the application will try to load the one provided from nuget. And then the CLR will then throw:\r\n`Strong name validation failed`\r\n\r\nIn such case: should we be using the (discouraged) System.Managament namespace instead of Management.Infrastructure?",
      "created_at": "2020-07-27T09:25:14Z",
      "updated_at": "2020-07-27T09:25:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "For more information see https://github.com/dotnet/runtime/issues/24803\r\n\r\nAs workaround you could use mmi.dll from PowerShell distrib.",
      "created_at": "2020-07-27T11:38:01Z",
      "updated_at": "2020-07-27T11:40:17Z"
    }
  ],
  "created_at": "2019-09-24T21:47:40Z",
  "number": 10618,
  "state": "closed",
  "title": "Microsoft.Management.Infrastructure.dll is delay-signed or test-signed",
  "updated_at": "2020-07-27T11:40:17Z"
}