{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15209",
  "author": "mklement0",
  "body": "## Summary of the new feature/enhancement\r\n\r\nUsing the `-ReadCount` parameter is a way of _batching_ content being read, which, with the default, line-based _text_ input also results in _improved performance_.\r\n\r\nWith `-AsByteStream`, however, using `-ReadCount` results in poor performance, especially when contrasted with `-Raw`.\r\n\r\nWhile `-AsByteStream -Raw` is an efficient way to read an entire file _in full_ as a byte array, the arguably equivalent `-AsByteStream -ReadCount 0` performs much worse.\r\n\r\nTo demonstrate, first create a 32MB file as input:\r\n\r\n```powershell\r\n[IO.File]::WriteAllBytes(\"$pwd/tmp.bin\", [byte[]]::new(32mb))\r\n```\r\n\r\nThen contrast the following two commands:\r\n\r\n```powershell\r\n$bytes = Get-Content -AsByteStream -Raw tmp.bin\r\n```\r\n\r\nvs. \r\n\r\n```powershell\r\n$bytes = Get-Content -AsByteStream -ReadCount 0 tmp.bin\r\n```\r\n\r\nThe first command - which efficiently returns a `[byte[]]` array -  finishes virtually instantaneously on my machine, whereas   the `-ReadCount 0` command  takes around 6 seconds(!).\r\n\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2021-04-12T23:59:58Z",
  "number": 15209,
  "state": "open",
  "title": "Get-Content: Improve the performance of -ReadCount in combination with -AsByteStream",
  "updated_at": "2021-04-13T17:22:36Z"
}