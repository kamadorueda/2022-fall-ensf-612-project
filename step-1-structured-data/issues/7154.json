{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7154",
  "author": "alx9r",
  "body": "I've been using this conversion to pass objects to `PowerShell.Invoke()` like this:\r\n```PowerShell\r\nPowerShell.Invoke([System.Collections.ObjectModel.Collection[psobject]]$obj)\r\n``` \r\nI'm puzzled by this conversion from `[int32]` to `[string]`.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n([System.Collections.ObjectModel.Collection[psobject]]1)[0].GetType().Name\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nI expected `1` to remain an `[int32]`.\r\n\r\n```none\r\nint32\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n`1` is converted to a `[string]`\r\n\r\n```none\r\nstring\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.688\r\nPSEdition                      Core\r\nGitCommitId                    v6.1.0-preview.688\r\nOS                             Microsoft Windows 6.3.9600\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I have no explanation, but 2 quick additional observations:\r\n\r\n* It only happens when you cast a _scalar_; `([System.Collections.ObjectModel.Collection[psobject]] (, 1))[0].GetType().Name` yields `Int32`, as expected.\r\n\r\n\r\n* It also happens with `[System.Collections.Generic.List[object]]`; by contrast:\r\n  * casting a scalar to `[System.Collections.ArrayList]` _fails_,\r\n  * but works _correctly_ with `[object[]]`",
      "created_at": "2018-06-24T12:31:45Z",
      "updated_at": "2018-06-24T12:31:45Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "It looks like `{ Write-Object $obj -NoEnumerate }.Invoke()` is a more reliable way to convert to `[Collection[psobject]]`.  Or at least is was before #2038, and (hopefully) will be again once those issues are corrected.  In the meantime `Write-Output2` from [6451(comment)](https://github.com/PowerShell/PowerShell/issues/6451#issuecomment-375111813) seems to work.",
      "created_at": "2018-06-24T15:14:26Z",
      "updated_at": "2018-06-24T15:14:26Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "If you're not concerned about the intermediate, transient `[object[]]` array that is invariably constructed, you can also do `[System.Collections.Generic.List[object]] @($obj)`",
      "created_at": "2018-06-24T16:06:19Z",
      "updated_at": "2018-06-24T16:06:19Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "It seems that given conversion covered here:\r\nhttps://github.com/PowerShell/PowerShell/blob/bbb4f2ea84f6c4a8e8775978178826b61db20bda/src/System.Management.Automation/engine/LanguagePrimitives.cs#L5399\r\nAnd `ConvertNumericIConvertible` specifically do conversion thru string:\r\nhttps://github.com/PowerShell/PowerShell/blob/bbb4f2ea84f6c4a8e8775978178826b61db20bda/src/System.Management.Automation/engine/LanguagePrimitives.cs#L3858-L3859",
      "created_at": "2018-06-24T16:53:59Z",
      "updated_at": "2018-06-24T16:53:59Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "```none\r\n // If the original object was a number, then try and do a conversion on the string \r\n // equivalent of that number... \r\n```\r\n\r\nInteresting.  That is clearly deliberate.  But why do that?",
      "created_at": "2018-06-24T17:07:09Z",
      "updated_at": "2018-06-24T17:07:09Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I'm not sure this really is deliberate, I think another explanation is that this is just a symptom of PowerShell being especially permissive with conversions.\r\n\r\nBased on this check: https://github.com/PowerShell/PowerShell/blob/bbb4f2ea84f6c4a8e8775978178826b61db20bda/src/System.Management.Automation/engine/LanguagePrimitives.cs#L5395 it feels like an oversight to have allowed the conversion to collections other than array.",
      "created_at": "2018-06-25T15:01:40Z",
      "updated_at": "2018-06-25T15:02:29Z"
    },
    {
      "author": "KnowledgeNerd",
      "author_association": "NONE",
      "body": "I feel like this isn't purposeful and some if going on weird here.   This is a PowerShell code showing the same and other weird issues.\r\n\r\n\r\nCode\r\n------------------------------------------------------------------------------------------------------------\r\n$orig_notworking = ([System.Collections.ObjectModel.Collection[psobject]]1)\r\necho \"orig_notworking - $($orig_notworking[0].GetType().Name)\"\r\n\r\n$orig_working = (New-Object -TypeName System.Collections.ObjectModel.Collection[psobject])\r\n$orig_working.Add([psobject]1)\r\necho \"orig_working - $($orig_working[0].GetType().Name)\"\r\n\r\n##  Removed a incorrect example showing a different error.  Was my fault.\r\n\r\n#Shows that the original creation of the psobject is equivalent\r\necho '(New-Object -TypeName PSObject  -ArgumentList @(1)) -eq [psobject]1)'\r\n(New-Object -TypeName PSObject  -ArgumentList @(1)) -eq [psobject]1\r\n\r\n$notworking = ([System.Collections.ObjectModel.Collection[psobject]](New-Object -TypeName PSObject  -ArgumentList @(1)))\r\necho \"notworking - $($notworking[0].GetType().Name)\"\r\n \r\n$working = (New-Object -TypeName System.Collections.ObjectModel.Collection[psobject])\r\n$working.Add((New-Object -TypeName PSObject  -ArgumentList @(1)))\r\necho \"working - $($working[0].GetType().Name)\"\r\n\r\n\r\nOutput\r\n----------------------------------------------------------------------------------------\r\norig_notworking - String\r\norig_working - Int32\r\n#Removed output from my mistake code above from this list\r\n(New-Object -TypeName PSObject  -ArgumentList @(1)) -eq [psobject]1)\r\nTrue\r\nnotworking - String\r\nworking - Int32\r\n\r\n\r\nSorry for the terrible code and the old post revival, but I got interested. It feels like the constructor and/or assignment operator is doing something weird. ",
      "created_at": "2022-06-03T07:18:06Z",
      "updated_at": "2022-06-03T18:35:27Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "@KnowledgeNerd, you assign to `$orig_work_but_not_working` the result of calling `Add`, which is `void`, and not the collection.",
      "created_at": "2022-06-03T10:44:59Z",
      "updated_at": "2022-06-03T10:44:59Z"
    },
    {
      "author": "KnowledgeNerd",
      "author_association": "NONE",
      "body": "Ohhh nice catch.  I'll remove that one example.  Still interesting that the add doesn't convert the int to string but instantiating it  using the constructor with initial values does.",
      "created_at": "2022-06-03T18:28:09Z",
      "updated_at": "2022-06-03T18:36:07Z"
    }
  ],
  "created_at": "2018-06-23T17:31:00Z",
  "number": 7154,
  "state": "open",
  "title": "Why is ([System.Collections.ObjectModel.Collection[psobject]]1)[0] a string?",
  "updated_at": "2022-06-03T18:36:07Z"
}