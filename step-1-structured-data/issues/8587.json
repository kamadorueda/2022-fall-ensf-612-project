{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8587",
  "author": "renehernandez",
  "body": "## PR Summary\r\n\r\nFix #5544.\r\n\r\nAdd two properties in `ProviderInfo` class: `ItemSeparator` and `AltItemSeparator`.\r\nOn windows, the default values for those two properties are `ItemSeparator = '\\'` and `AltItemSeparator = '/'`.\r\nOn unix, the default values for those two properties are `ItemSeparator = '/'` and `AltItemSeparator = '\\'`.\r\n\r\nRegistry provider is the only exception, both properties for it have the value `\\`.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [ ] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed - Issue link:\r\n- **Testing - New and feature**\r\n    - [ ] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [ ] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2019-04-02T16:59:37Z",
  "comments": [
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "[![CLA assistant check](https://cla.opensource.microsoft.com/pull/badge/signed)](https://cla.opensource.microsoft.com/PowerShell/PowerShell?pullRequest=8587) <br/>All CLA requirements met.",
      "created_at": "2019-01-03T02:49:38Z",
      "updated_at": "2019-01-03T02:55:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@renehernandez Thanks for your contribution!\r\n\r\nI added 'Fix #5544' to link the issue and auto close it after we merge.\r\n\r\nThe public API should be approved by PowerShell Committee.",
      "created_at": "2019-01-03T08:51:54Z",
      "updated_at": "2019-01-03T08:51:54Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this and is ok with adding `PathSeparator` ",
      "created_at": "2019-01-09T23:57:50Z",
      "updated_at": "2019-01-09T23:57:50Z"
    },
    {
      "author": "stale[bot]",
      "author_association": "NONE",
      "body": "This PR has been automatically marked as stale because it has not had activity in the last 30 days. It will be closed if no further activity occurs within 10 days.\nThank you for your contributions.\nCommunity members are welcome to grab these works.\n",
      "created_at": "2019-03-03T23:50:44Z",
      "updated_at": "2019-03-03T23:50:44Z"
    },
    {
      "author": "renehernandez",
      "author_association": "CONTRIBUTOR",
      "body": "@daxian-dbw Is this going to be merged at all? The changes are pretty small and they shouldn't be to hard to review.\r\n\r\nOr is there anything left that should be addressed??",
      "created_at": "2019-03-04T10:43:47Z",
      "updated_at": "2019-03-04T10:43:47Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@renehernandez Sorry for having this PR slip off my radar. I will do the review later today.",
      "created_at": "2019-03-04T22:23:29Z",
      "updated_at": "2019-03-04T22:23:29Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@renehernandez When you are addressing my comments, can you please add the `[Feature]` tag to the last commit's message? I would like the CI to run all feature tests for this PR.",
      "created_at": "2019-03-05T02:03:56Z",
      "updated_at": "2019-03-05T02:03:56Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@renehernandez I think we need to implement the `PathSeparator` property in a different way.\r\nHere is my suggestion:\r\nAdd a `public virtual` get-only property `PathSeparators` in `CmdletProvider`. The default implementation can be this:\r\n```\r\npublic virtual ReadOnlyCollection<string> PathSeparators => Utils.EmptyReadOnlyCollection<string>();\r\n```\r\nThen, add a public-getter-private-setter property `PathSeparators` in `ProviderInfo`. The default implementation can be this:\r\n```\r\npublic ReadOnlyCollection<string> PathSeparators { get; private set; }\r\n```\r\nThen, in the `ProviderInfo.CreateInstance`, after casting `providerInstance` to `CmdletProvider`, we set the `PathSeparators` property in the Provider instance:\r\n```\r\nProvider.CmdletProvider result = providerInstance as Provider.CmdletProvider;\r\nPathSeparators = result.PathSeparators;\r\n```\r\nThen, in each provider implementation, override that property to provide the supported separators.",
      "created_at": "2019-03-10T21:12:25Z",
      "updated_at": "2019-03-10T21:12:25Z"
    },
    {
      "author": "renehernandez",
      "author_association": "CONTRIBUTOR",
      "body": "@daxian-dbw Are you suggesting a rename as part of the change? Should the property be plural, i.e. `PathSeparators`?",
      "created_at": "2019-03-11T13:58:38Z",
      "updated_at": "2019-03-11T13:58:38Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "```\r\nPS:28> [System.IO.Path] | gm -Static\r\n...\r\nAltDirectorySeparatorChar   Property   static char AltDirectorySeparatorChar {get;}\r\nDirectorySeparatorChar      Property   static char DirectorySeparatorChar {get;}\r\nInvalidPathChars            Property   static char[] InvalidPathChars {get;}\r\nPathSeparator               Property   static char PathSeparator {get;}\r\nVolumeSeparatorChar         Property   static char VolumeSeparatorChar {get;}\r\n```\r\n\r\n@renehernandez If we look at how `System.IO.Path` name those properties, I think plural would be better as we return a collection. But let me check with the committee before we move forward.",
      "created_at": "2019-03-11T16:55:31Z",
      "updated_at": "2019-03-11T16:55:31Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee Need your another review on three items:\r\n1. Since the new property `PathSeparator` returns a collection (ReadOnlyCollection), shall we rename it to `PathSeparators` (plural)?\r\n2. Do we allow a string of more than 2 characters used as a path separator in PowerShell providers? If not, maybe make the property return `ReadOnlyCollection<char>`?\r\n3. Is it OK to add a public virtual get-only property `PathSeparators` in the public abstract class `CmdletProvider`? Implementation looks like this:\r\n```c#\r\npublic virtual ReadOnlyCollection<string> PathSeparators => Utils.EmptyReadOnlyCollection<string>();\r\n```\r\n",
      "created_at": "2019-03-11T17:00:20Z",
      "updated_at": "2019-03-11T17:02:51Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Here's my 2\u00a2:\r\n\r\n* Re 1: I know it's late in the game, but, seeing the CoreFx approach of providing `DirectorySeparatorChar` and `AltDirectorySeparatorChar` separately, I wonder if we should similarly provide two _scalar_ properties, `PathSeparator` and `AltPathSeparator` - given that my guess is that users will typically want _the_ official separator, even though there _may_ be an alternative (which, as far as native data stores go, really only applies to the filesystem on Windows).\r\n\r\n  * As an aside: `\\` currently _de facto_ works on Unix too, but shouldn't, because `\\` is a legal filename character -  see #3666\r\n\r\n* Re 2: My vote is for `string` rather than `char`, for the following reasons:\r\n  * Given that the property will (also) be consumed from PowerShell code, there is no advantage to using `char` over `string`, given that `char` is not a first-class type in PowerShell code, where even single characters are by default represented as `string`s.\r\n  * It leaves the door open for providers with multi-character separators - though that is admittedly not very likely to happen.\r\n\r\n\r\n",
      "created_at": "2019-03-11T17:36:07Z",
      "updated_at": "2019-03-11T17:36:07Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, based on the current [code](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/Utils.cs#L1226), PowerShell expects separators to be chars so supporting it as string would add more changes.  We suggest with just DirectorySeparator and AltDirectorySeparator (default should be same as IO.Path.DirectorySeparatorChar and IO.Path.AltDirectorySeparatorChar to match OS).  We are also ok with adding the new virtual member with default implementation as the impact is expected to be minimal, but fix is clear.",
      "created_at": "2019-03-11T19:44:29Z",
      "updated_at": "2019-03-11T19:55:32Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @SteveL-MSFT, just to clarify re _naming_: \r\n\r\nThe previously agreed-upon name was `PathSeparator`, so that means the name pair should be `PathSeparator` and `AltPathSeparator`, correct?\r\n\r\nThe names `[Alt]DirectorySeparatorChar` wouldn't be provider-neutral; there are no _directories_ in the registry, for instance. \r\n\r\nBy contrast, what the property returns is the character used to separate the items forming a _path_  (which is a provider-neutral concept, the potential for confusion with the poorly named `[IO.Path]::PathSeparator` notwithstanding - see the original discussion in #5544)",
      "created_at": "2019-03-11T20:06:18Z",
      "updated_at": "2019-03-11T20:14:25Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT: Or did I misread the following?\r\n\r\n> We suggest with just DirectorySeparator and AltDirectorySeparator (default should be same as IO.Path.DirectorySeparatorChar and IO.Path.AltDirectorySeparatorChar to match OS).\r\n\r\nPlease clarify if there should be only a single, array-valued property or whether there should be two scalar properties.",
      "created_at": "2019-03-11T20:09:51Z",
      "updated_at": "2019-03-11T20:09:51Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 Two scalar properties that replace the need for a single collection.  The affinity to calling it DirectorySeparator (sans Char) is that it is more similar to DirectorySeparatorChar than PathSeparator in how they function.  We briefly considered other names, but nothing was a clear winner.",
      "created_at": "2019-03-11T20:59:27Z",
      "updated_at": "2019-03-11T20:59:27Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the clarification, @SteveL-MSFT.\r\n\r\nAllow me another thought regarding the names chosen:\r\n\r\n* The very motivation for creating the property/ies at hand was to provide a _provider-neutral_ way to determine the character that is used to separate any given provider's item names when forming a path.\r\n\r\n* Having the name `Directory` in the property name directly contradicts that goal and is likely to cause confusion.\r\n\r\n* If avoiding confusing with the poorly named `[System.IO.Path]::PathSeparator` is a must (I personally don't think it is - it's CoreFx's mistake, and many PowerShell users may never even learn of its existence) the provider-neutral abstraction from `[Alt]DirectorySeparator` would be **`[Alt]ItemSeparator`**.\r\n\r\n\r\n",
      "created_at": "2019-03-11T21:24:00Z",
      "updated_at": "2019-03-11T21:24:00Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 We appreciate your feedback.  @PowerShell/powershell-committee discussed this further and given that the `*-Item` cmdlets work against PSProviders, calling it `ItemSeparator` and `AltItemSeparator` makes sense and ok with adding those two scalars.",
      "created_at": "2019-03-11T23:30:35Z",
      "updated_at": "2019-03-11T23:30:35Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Given the approval from the committee, the implementation recommended from https://github.com/PowerShell/PowerShell/pull/8587#issuecomment-471345280 needs to be updated:\r\n\r\nAdd two `public virtual` get-only properties in `CmdletProvider` with the default implementation:\r\n```\r\npublic virtual char ItemSeparator => Path.DirectorySeparatorChar;\r\npublic virtual char AltItemSeparator => Path.AltDirectorySeparatorChar;\r\n```\r\nThen, add two public-getter-private-setter properties in `ProviderInfo`:\r\n```\r\npublic char ItemSeparator { get; private set; }\r\npublic char AltItemSeparator { get; private set; }\r\n```\r\nThen, in the `ProviderInfo.CreateInstance`, after casting `providerInstance` to `CmdletProvider`, we set the above two properties in the Provider instance:\r\n```\r\nProvider.CmdletProvider result = providerInstance as Provider.CmdletProvider;\r\nItemSeparator = result.ItemSeparator;\r\nAltItemSeparator = result.AltItemSeparator;\r\n```\r\nThen, in each provider implementation, override that two properties to provide the supported separators.",
      "created_at": "2019-03-11T23:45:28Z",
      "updated_at": "2019-03-11T23:45:28Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@renehernandez Could you implement the proposal? If you need a help feel free to ask.",
      "created_at": "2019-03-12T05:52:07Z",
      "updated_at": "2019-03-18T12:36:45Z"
    },
    {
      "author": "renehernandez",
      "author_association": "CONTRIBUTOR",
      "body": "@daxian-dbw The only question with the changes is: What should be the value for `AltItemSeparator` be for the `RegistryProvider`? The empty char?",
      "created_at": "2019-03-12T10:12:48Z",
      "updated_at": "2019-03-12T10:12:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I'd expect that AltItemSeparator is the same ItemSeparator.",
      "created_at": "2019-03-12T10:16:18Z",
      "updated_at": "2019-03-12T10:16:18Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Agreed, @iSazonov. It is what CoreFx's `[IO.Path]::AltDirectorySeparatorChar` does on Unix (it reports `/` in both `DirectorySeparatarChar` and `AltDirectorySeparatorChar`); from the [docs](https://docs.microsoft.com/en-us/dotnet/api/system.io.path.altdirectoryseparatorchar?view=netcore-2.2):\r\n\r\n> This field can have the same value as `DirectorySeparatorChar`.",
      "created_at": "2019-03-12T11:53:33Z",
      "updated_at": "2019-03-12T11:54:03Z"
    },
    {
      "author": "renehernandez",
      "author_association": "CONTRIBUTOR",
      "body": "@daxian-dbw All the 16 codefactor issues are categorized as **style** and they were not introduced by my changes. What is the action there?",
      "created_at": "2019-03-20T11:44:22Z",
      "updated_at": "2019-03-20T11:44:22Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@renehernandez Thanks for getting back and finishing up this PR! No action needed. The `Hungarian notation` rule is not useful in most cases. ",
      "created_at": "2019-03-20T19:05:23Z",
      "updated_at": "2019-03-20T19:05:23Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, we should keep use of ItemSeparator = / and AltItemSeparator = \\ by default on Unix and vice versa on Windows.  Registry Provider has a bug and should be fixed (as seperate PR).  Filesystem accepting both / and \\ on all systems is an explicit cross platform experience decision for PowerShell.",
      "created_at": "2019-03-27T22:45:17Z",
      "updated_at": "2019-03-27T22:46:44Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT: Please see #9244",
      "created_at": "2019-03-28T17:11:01Z",
      "updated_at": "2019-03-28T17:11:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> today the registry provider also accepts and normalizes / and \\. But we agreed that's not right and should be corrected in future. \r\n\r\nHave we a tracking issue?",
      "created_at": "2019-04-02T08:21:08Z",
      "updated_at": "2019-04-02T08:21:08Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The issue tracking registry provider is https://github.com/PowerShell/PowerShell/issues/5536",
      "created_at": "2019-04-02T16:47:22Z",
      "updated_at": "2019-04-02T16:47:22Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@renehernandez Thank you again for your contribution and patience!",
      "created_at": "2019-04-02T17:03:04Z",
      "updated_at": "2019-04-02T17:03:04Z"
    }
  ],
  "created_at": "2019-01-03T02:49:27Z",
  "number": 8587,
  "state": "closed",
  "title": "Add support for PathSeparator property in Providers",
  "updated_at": "2019-04-02T17:22:33Z"
}