{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14932",
  "author": "jclariviere",
  "body": "## Steps to reproduce\r\n\r\nThe easiest way to reproduce is by using `unbuffer`\r\n\r\n```sh\r\n$ unbuffer pwsh\r\n```\r\n\r\nIt can also be reproduced by using python's `pty` module.\r\n\r\n```python\r\nimport pty, os, select\r\n\u200b\r\n\u200b\r\ndef waitfor(fd, str):\r\n    poll = select.poll()\r\n    poll.register(fd, select.POLLIN)\r\n    while True:\r\n        evt = poll.poll()\r\n        r = os.read(fd, 1024)\r\n        print(r.decode())\r\n        if str in r:\r\n            return\r\n\u200b\r\n\u200b\r\npid, fd = pty.fork()\r\n\u200b\r\n# executed in child\r\nif pid == 0:\r\n    os.execvp(\"pwsh\", [\"pwsh\"])\r\n\u200b\r\n# executed in parent\r\nelif pid > 0:\r\n    waitfor(fd, b\"> \")\r\n```\r\n\r\nOr by using [pexpect](https://pexpect.readthedocs.io/en/stable/) (which is actually where I first found the issue):\r\n\r\n```python\r\np = pexpect.spawn(\"pwsh\", encoding='utf-8', timeout=60)\r\np.logfile_read = sys.stdout\r\np.expect(\"PS .+> \")\r\np.sendline(\"echo test\")\r\np.expect(\"PS .+> \")\r\n```\r\n\r\n## Expected behavior\r\n\r\n```sh\r\n$ pwsh\r\nPowerShell 7.1.2\r\nCopyright (c) Microsoft Corporation.\r\n\r\nhttps://aka.ms/powershell\r\nType 'help' to get help.\r\n\r\nPS /home/vagrant>\r\n```\r\n\r\n## Actual behavior\r\n\r\nIt's a little hard to put here because the the screen gets overwritten at some point, but here's an example.\r\n\r\nFirst it starts printing out some escape characters:\r\n\r\n```sh\r\n$ unbuffer pwsh\r\nPowerShell 7.1.2\r\nCopyright (c) Microsoft Corporation.\r\n\r\nhttps://aka.ms/powershell\r\nType 'help' to get help.\r\n\r\n^[[8;1R^[[8;8RPS /home/vagrant> ^[[8;33R^[[8;41R\r\n```\r\n\r\nThen the top starts getting overwritten:\r\n\r\n```sh\r\n\ufffd@@\ufffd *\ufffd@@p_*\ufffd@@\ufffd\ufffd\ufffdU@@x\ufffd<\ufffd@@x\ufffd<\ufffd@@` *\ufffd@@y\ufffdK\ufffd@@@@@\ufffd\ufffd@@@9\ufffd\ufffd\ufffd\ufffd,8T@@@@\ufffd\ufffd\ufffdU@@@@@@@@@@h *\ufffd@@@@@@@@@@@8,J\ufffdmu\ufffdh *\ufffd@\ufffd\ufffdU@@-\ufffd\ufffdU@\ufffd\ufffdU@@\ufffd-\ufffd\ufffd@@\ufffd_*\ufffd@@\ufffd\ufffdK\ufffd@@\ufffd\ufffd\r\nCopyright (c) Microsoft Corporation.\r\n\r\nhttps://aka.ms/powershell\r\nType 'help' to get help.\r\n\r\n^[[8;1R^[[8;8RPS /home/vagrant> ^[[8;33R^[[8;41R\r\n```\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nPS /home/vagrant> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.2\r\nPSEdition                      Core\r\nGitCommitId                    7.1.2\r\nOS                             Linux 5.7.0-kali1-amd64 #1 SMP Debian 5.7.6-1kali2 (2020-07-01)\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "What is `unbuffer`?\r\n\r\n```\r\n> Get-Command unbuffer\r\nGet-Command: The term 'unbuffer' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n\r\n > uname -a\r\nLinux mymsi 5.10.15-172.current #1 SMP PREEMPT Fri Feb 12 16:35:57 UTC 2021 x86_64 GNU/Linux\r\n\r\n > lsb_release -a\r\nLSB Version:\t1.4\r\nDistributor ID:\tSolus\r\nDescription:\tSolus\r\nRelease:\t4.2\r\nCodename:\tfortitude\r\n\r\n > (Get-Host).Version.ToString()\r\n7.1.2\r\n```\r\n",
      "created_at": "2021-03-03T07:55:23Z",
      "updated_at": "2021-03-03T07:55:23Z"
    },
    {
      "author": "jclariviere",
      "author_association": "NONE",
      "body": "It is a program that uses `expect` to remove the buffering from a program. It comes from the `expect` package. http://manpages.ubuntu.com/manpages/hirsute/en/man1/expect_unbuffer.1.html\r\n\r\nI'm not 100% certain but I think `expect` spawns a TTY in order to do its magic. The same problematic behavior can be replicated by using `expect` at least.\r\n\r\nCreate this script:\r\n\r\n```sh\r\nspawn pwsh\r\nexpect '>'\r\n```\r\n\r\nThen run it: `expect test.sh`.\n\n<blockquote><div><strong><a href=\"http://manpages.ubuntu.com/manpages/hirsute/en/man1/expect_unbuffer.1.html\">Ubuntu Manpage:\n\n       unbuffer - unbuffer output</a></strong></div></blockquote>",
      "created_at": "2021-03-03T15:18:46Z",
      "updated_at": "2021-03-03T15:18:48Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This looks like a dupe of https://github.com/PowerShell/PowerShell/issues/11215?",
      "created_at": "2021-03-04T01:06:50Z",
      "updated_at": "2021-03-04T01:06:50Z"
    },
    {
      "author": "jclariviere",
      "author_association": "NONE",
      "body": "I think it's similar but in #11215 , the issue seems to happen when you start a subprocess from a powershell console. Here, the issue happens when you start a powershell console as a subprocess from another shell.\r\n\r\nI have made two other observations that I think will help pinpointing the problem:\r\n\r\n- I get similar issues if I connect to a Windows SSH server (connect to a Windows SSH server with python's pexpect for example). The remote shell type I get seems to be cmd.exe and not powershell, so it may not be a powershell-specific issue.\r\n- I don't get the issue if the powershell subprocess is not in a TTY. So it works with python's `subprocess` module for example, but not with `pexpect`. So it seems to be an issue specific to TTYs.",
      "created_at": "2021-03-08T16:32:44Z",
      "updated_at": "2021-03-08T16:32:44Z"
    },
    {
      "author": "DHowett",
      "author_association": "NONE",
      "body": "The output here looks very similar to that caused by https://github.com/PowerShell/PSReadLine/issues/1376. Perhaps similar?",
      "created_at": "2021-03-11T04:30:48Z",
      "updated_at": "2021-03-11T04:30:48Z"
    },
    {
      "author": "jclariviere",
      "author_association": "NONE",
      "body": "It does seem very similar! TTYs likely don't control a cursor so it could be the same problem. That PSReadLine issue also points to it being a .NET problem and not powershell directly, which would confirm my earlier finding with a Windows SSH server.",
      "created_at": "2021-03-11T16:59:45Z",
      "updated_at": "2021-03-11T16:59:45Z"
    }
  ],
  "created_at": "2021-03-02T23:22:14Z",
  "number": 14932,
  "state": "open",
  "title": "pwsh not working properly when run from a Linux pty",
  "updated_at": "2021-03-11T16:59:45Z"
}