{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8028",
  "author": "indented-automation",
  "body": "Enumerations in PowerShell appear to be limited to Int32. Ideally enums should allow inheritance-style setting of the underlying type.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nPowerShell does not appear to allow an underlying type to be defined for an enum. All values are coerced to Int32.\r\n\r\nThe statement below will raise an exception:\r\n```powershell\r\nenum Fruit { Apple = 0x0FFFFFFFFFFFFFFF }\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nAn enumeration wiith underlying type set to [Int64] to be created.\r\n\r\n```powershell\r\nenum Fruit { Apple = 0x0FFFFFFFFFFFFFFF }\r\n[Fruit].GetEnumUnderlyingType() -eq [Int64]\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\nAn exception is throw when the attempt to cast fails.\r\n\r\n```none\r\nEnumerator value is too large for a System.Int.\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0\r\nOS                             Microsoft Windows 10.0.17134\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2019-01-17T22:22:11Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I'd recommend reusing the class inheritance syntax, which would be similar to C# syntax for specifying an enum type:\r\n\r\n```\r\nenum MyEnum : Int64 {\r\n    Val1\r\n    Val2\r\n    Val3\r\n}\r\n```",
      "created_at": "2018-10-15T13:29:37Z",
      "updated_at": "2018-10-15T13:29:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@rjmholt For your classes collection. :-)",
      "created_at": "2018-10-16T09:05:20Z",
      "updated_at": "2018-10-16T09:05:20Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "I suspect this was a deliberate design decision when `enum`s were introduced. How clean was the error message @indented-automation?",
      "created_at": "2018-10-16T15:50:23Z",
      "updated_at": "2018-10-16T15:50:23Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Looks like this @rjmholt \r\n\r\n```\r\nAt line:2 char:8\r\n+ Val1 = 0x7FFFFFFFFFFFFFFF\r\n+        ~~~~~~~~~~~~~~~~~~\r\nEnumerator value is too large for a System.Int.\r\n+ CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException\r\n+ FullyQualifiedErrorId : EnumeratorValueTooLarge\r\n```\r\n\r\nAnd it may have been a deliberate decision, but given that class inheritance is a thing anyway, I don't see any particular reason to arbitrarily restrict enums in this fashion?",
      "created_at": "2018-10-16T15:53:43Z",
      "updated_at": "2018-10-16T15:53:43Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Yes I just tested it myself. Agreed that there's no particular reason to not support it other than because it makes the language more complicated. I suspect the original reasoning was that smaller enum values work already (and can be cast without effort) and larger enum values are a pretty obscure use case, especially when flag usage is not a primary use case.",
      "created_at": "2018-10-16T15:58:05Z",
      "updated_at": "2018-10-16T15:58:05Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That's fair, I suppose, but `[Flags()]` *is* a supported enum attribute, so it makes the most sense to provide the frameworks that might be necessary to use it, even if the overall need isn't immensely huge. \ud83d\ude04 \r\n\r\n(also, the inconsistency just *bothers* me somehow that class inheritance syntax exists but can't be used for `enum` specifically, idk)",
      "created_at": "2018-10-16T16:01:07Z",
      "updated_at": "2018-10-16T16:01:07Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Yeah there might be the odd .NET API out there that requires it maybe. The inheritance thing is more an expectation set by C#'s syntactic sugar -- `enum`s can't really \"inherit\" (playing with the metadata, it's diabolical trying to find out what the underlying type of an `enum` is -- you need to look at the [`value__` field](https://stackoverflow.com/a/22830894)).",
      "created_at": "2018-10-16T16:18:51Z",
      "updated_at": "2018-10-16T16:18:51Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "I just wanted to comment that sometimes its not about larger values, but smaller ones, and smaller storage space.  This is more important if an enum was packed in to a structure, which is more common with small controller platforms than PC applications.  If an enum only needs a byte (8 bits) to express all its values, why should it consume any further space.\r\n\r\nRegarding determining the type, the enum class offers 'getUnderlyingType' or 'getEnumUnderlyingType'.\r\n\r\nIts nice to see this was just added.   I'll add it to the syntax I have been working on for PowerShell/EditorSyntax.",
      "created_at": "2019-01-23T01:17:12Z",
      "updated_at": "2019-01-23T01:17:12Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Struct packing is the kind of thing that's better suited to C#. I'm personally wary of turning PowerShell into C#, since it'll never be better than C# at such things, but it's much better/more ergonomic than C# at other things. And maintaining all the different features doesn't come for free.\r\n\r\n> Regarding determining the type, the enum class offers 'getUnderlyingType' or 'getEnumUnderlyingType'.\r\n\r\nOnce you've loaded it you get methods, yes. But I meant looking at the DLL binary metadata -- enums aren't just their backing word type in IL.",
      "created_at": "2019-01-23T02:14:42Z",
      "updated_at": "2019-01-23T02:14:42Z"
    }
  ],
  "created_at": "2018-10-15T13:18:09Z",
  "number": 8028,
  "state": "closed",
  "title": "enum: Underlying type",
  "updated_at": "2019-01-23T02:14:42Z"
}