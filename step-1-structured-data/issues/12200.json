{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12200",
  "author": "p0W3RH311",
  "body": "the parameter -destination is <string> its better to change to <string[]>\r\n\r\nEXAMPLE:\r\n```\r\n\r\n# copy 1.txt and 2.txt in d:\\foo and e:\\bar\\lol\r\ncopy-item -Path c:\\1.txt,C:\\Users\\2.txt -Destination d:\\foo\\,e:\\bar\\lol\\\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I don't see a lot of use for this myself, but I also don't really see a need to disallow this behaviour. Seems like a pretty straightforward addition if we'd like to take it. \r\n\r\nCopying items to multiple locations is certainly something a decent number of folks would have a use for, I'd think.",
      "created_at": "2020-03-25T13:01:35Z",
      "updated_at": "2020-03-25T13:01:35Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "If we do this, we'd need to make clear that _all_ input items are copied to _each_ destination path (users could have the expectation that copying happens _in pairs_ (`1.txt` only to `foo`, `2.txt` only to `bar`)).\r\n\r\nA fairly low-ceremony way to do this with the current features is to use a delay-bind script block:\r\n\r\n```powershell\r\n'd:\\foo\\', 'e:\\bar\\lol\\' | copy-item -Path c:\\1.txt,C:\\Users\\2.txt -Destination { $_ }\r\n```\r\n\r\n",
      "created_at": "2020-03-26T12:59:18Z",
      "updated_at": "2020-03-26T13:55:53Z"
    }
  ],
  "created_at": "2020-03-25T10:58:20Z",
  "number": 12200,
  "state": "open",
  "title": "copy-item with multiple destination ",
  "updated_at": "2022-06-06T18:47:17Z"
}