{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15379",
  "author": "adityapatwardhan",
  "body": "`ExternalScriptInfo` object should expose the property for `CmdletBinding` like `CmdletInfo` or `FunctionInfo`.\r\n\r\nThe only was to find if the `ExternalScriptioInfo` object has `CmdletBinding` attribute is to look through the attributes on the `ScriptBlock`.\r\n\r\nBut in the case of the following example, it is considered that the object has `CmdletBinding` with the explicit attribute.\r\n\r\n```Powershell\r\nparam(\r\n  [parameter()]\r\n  $Path\r\n)\r\n```\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "A more concrete example:\r\n```\r\nPS:17> cat .\\test.ps1\r\n##[CmdletBinding()]\r\nparam(\r\n  [parameter()]\r\n  $Path\r\n)\r\nPS:18>\r\nPS:18> gcm .\\test.ps1 -Syntax\r\n.\\test.ps1 (alias) -> C:\\arena\\tmp\\playground\\test.ps1\r\n\r\n.\\test.ps1 [[-Path] <Object>] [<CommonParameters>]\r\n\r\nPS:19> $c = gcm .\\test.ps1\r\nPS:20> $c.ScriptBlock.Attributes\r\nPS:21>\r\n```\r\nWe can still get this information by enumerating all parameters from `$c.Parameters` and try to find a `ParameterAttribute` from any of them, but that's just too much efforts. I think it would be nice to add the `CmdletBinding` property to `ExternalScriptInfo`, just like `CmdletInfo` and `FunctionInfo`.",
      "created_at": "2021-05-13T18:12:21Z",
      "updated_at": "2021-05-13T18:14:42Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "your example commented out the CmdletBinding attribute, so I wouldn't expect to see the attribute\r\n\r\nhere's what I see\r\n```\r\nPS> cat /tmp/test.ps1\r\n[CmdletBinding()]\r\nparam (\r\n[Parameter(Mandatory=$true,Position=0)]\r\n$Path\r\n)\r\nEND {\r\n    \"Path is $Path\"\r\n}\r\nPS> $es = gcm /tmp/test.ps1\r\nPS> $es.ScriptBlock.Attributes\r\n\r\nPositionalBinding       : True\r\nDefaultParameterSetName : \r\nSupportsShouldProcess   : False\r\nSupportsPaging          : False\r\nSupportsTransactions    : False\r\nConfirmImpact           : None\r\nHelpUri                 : \r\nRemotingCapability      : PowerShell\r\nTypeId                  : System.Management.Automation.CmdletBindingAttribute\r\n\r\n\r\nPS> $es.ScriptBlock.Ast.ParamBlock.Parameters[0].Attributes\r\n\r\nPositionalArguments : {}\r\nNamedArguments      : {Mandatory, Position}\r\nTypeName            : Parameter\r\nExtent              : [Parameter(Mandatory=$true,Position=0)]\r\nParent              : [Parameter(Mandatory=$true,Position=0)]\r\n                      $Path\r\n\r\n```",
      "created_at": "2021-05-13T19:53:57Z",
      "updated_at": "2021-05-13T19:53:57Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@JamesWTruher Yeah that's part of the point. A scriptblock is considered to have cmdletbinding if:\r\n- It actually has the [CmdletBinding()] attribute, OR\r\n- It has *any* `[Parameter()]` attributes on any of its parameters.\r\n\r\nIn other words, it's quite a pain to find the information properly without the proper helper properties that are provided on FunctionInfo and CmdletInfo.",
      "created_at": "2021-05-13T20:07:58Z",
      "updated_at": "2021-05-13T20:07:58Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "I guess I'm just not seeing the pain\r\n\r\n`$es.ScriptBlock.Attributes` vs `$es.Attributes` ???\r\n\r\nmaybe getting parameter data could be made more easily, but really, I'm not sure I see the usage where this would be a problem that it wouldn't be fairly easy to get at this data.",
      "created_at": "2021-05-13T21:47:26Z",
      "updated_at": "2021-05-13T21:49:41Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "While trying to look for `CmdletBinding` in an `ExternalScriptInfo` for platyPS, it proved to be a challenge. For checking if the `CmdletBinding` attribute exists, I have to iterate over the attributes to find if a `CmdletBindingAttribute` is found. This can be an expensive operation as compared to looking up a property on the `ExternalScriptInfo` object. \r\n\r\nFor platyPS scenarios, there can be multiple ExternalScriptInfo object that have to be processed and iterating over the attributes for each of them will degrade performance.\r\n\r\nMoreover, if there is no `CmdletBindingAttribute` but a `ParameterAttribute`, we must assume it has `CmdletBinding`. I would consider this as tribal knowledge. Having an explicit property on ExternalScriptInfo makes it clear.",
      "created_at": "2021-05-13T23:55:37Z",
      "updated_at": "2021-05-13T23:55:37Z"
    }
  ],
  "created_at": "2021-05-11T18:40:38Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine"
  ],
  "number": 15379,
  "state": "open",
  "title": "`ExternalScriptInfo` does not have property for `CmdletBinding` like `CmdletInfo`",
  "updated_at": "2021-05-13T23:55:37Z"
}