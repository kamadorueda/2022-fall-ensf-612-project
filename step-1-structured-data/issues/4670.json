{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4670",
  "author": "jwilczek",
  "body": "The Get-Credential cmdlet only shows the first certificate listed on the smart card in the dialog. This makes it impossible to use cards with multiple certificates.",
  "closed_at": null,
  "comments": [
    {
      "author": "milesgratz",
      "author_association": "NONE",
      "body": "Well, I'm a bit sad I didn't bother to test `Get-Credential` before we finalized our new PKI setup that has our root domain and child domain on a single smart card. We use PowerShell religiously and this is going to be a huge problem. Is anyone aware of a workaround? I am exploring the .NET class [System.Security.Cryptography.X509Certificates](https://msdn.microsoft.com/en-us/library/system.security.cryptography.x509certificates(v=vs.110).aspx) but haven't found any examples I can steal online. \r\n\r\nI found this - but haven't figured out how to convert it into [PSCredential](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.pscredential?view=powershellsdk-1.1.0) class. \r\n```\r\nAdd-Type -AssemblyName System.Security\r\n$ValidCerts = [System.Security.Cryptography.X509Certificates.X509Certificate2[]](dir Cert:\\CurrentUser\\My)\r\n$Cert = [System.Security.Cryptography.X509Certificates.X509Certificate2UI]::SelectfromCollection($ValidCerts,'Choose a certificate','Choose a certificate',0\r\n```",
      "created_at": "2017-10-31T22:20:24Z",
      "updated_at": "2017-10-31T22:20:24Z"
    },
    {
      "author": "MarcusLerch",
      "author_association": "NONE",
      "body": "Hitting the same bug in customer environment. Any updates on a solution or workaround would be highly appreciated",
      "created_at": "2018-06-07T08:50:48Z",
      "updated_at": "2018-06-07T08:50:48Z"
    },
    {
      "author": "jwilczek",
      "author_association": "NONE",
      "body": "I have a solution, but it's not pretty. I punted on doing this solely in PS and opted for c# (although my c# mostly calls PS -- meaning that although I do this in c# it could be done in PS). \r\n\r\nBasically, the process is to import CredUIPromptForWindowsCredentials and CredUnPackAuthenticationBuffer from credui.dll. CredUIPromptForWindowsCredentials  will prompt for the smart card and  you can pick the cert, then you can use CredUnPackAuthenticationBuffer to pull out username, password, etc. With this info, you can create a NetworkCredential object which can be used to create a PSCredential object, which can be used as any other PSCredential object.\r\n\r\n",
      "created_at": "2018-06-07T14:20:03Z",
      "updated_at": "2018-06-07T14:20:03Z"
    },
    {
      "author": "jscudder",
      "author_association": "NONE",
      "body": "jwilczek, I am working on the code solution you discussed. I made a DLL with C# using the native functions you mentioned. Unfortunately, I can get the smart card pin prompt to show, but not the prompt to select one of the certificates. Would you be willing to post your code, specifically the lines that allow the user to select one of the certificates? Regardless, thank you for the solid tip.",
      "created_at": "2018-06-12T14:28:07Z",
      "updated_at": "2018-06-12T14:28:07Z"
    },
    {
      "author": "jimmy58663",
      "author_association": "NONE",
      "body": "Hello, I came across this working on grabbing a credential from a smart card and it doesn't look like it has been completely fixed yet. Below is the code that I am using to accomplish grabbing any certificate that is on a smart card and creating a PSCredential object out of it. If you have any questions about it let me know.\r\n\r\n    Function Get-SmartCardCred{\r\n    <#\r\n    .SYNOPSIS\r\n    Get certificate credentials from the user's certificate store.\r\n\r\n    .DESCRIPTION\r\n    Returns a PSCredential object of the user's selected certificate.\r\n\r\n    .EXAMPLE\r\n    Get-SmartCardCred\r\n    UserName                                           Password\r\n    --------                                           --------\r\n    @@BVkEYkWiqJgd2d9xz3-5BiHs1cAN System.Security.SecureString\r\n\r\n    .EXAMPLE\r\n    $Cred = Get-SmartCardCred\r\n\r\n    .OUTPUTS\r\n    [System.Management.Automation.PSCredential]\r\n\r\n    .NOTES\r\n    Author: Joshua Chase\r\n    Last Modified: 01 August 2018\r\n    C# code used from https://github.com/bongiovimatthew-microsoft/pscredentialWithCert\r\n    #>\r\n    [cmdletbinding()]\r\n    param()\r\n\r\n        $SmartCardCode = @\"\r\n    // Copyright (c) Microsoft Corporation. All rights reserved.\r\n    // Licensed under the MIT License.\r\n\r\n    using System;\r\n    using System.Management.Automation;\r\n    using System.Runtime.InteropServices;\r\n    using System.Security;\r\n    using System.Security.Cryptography.X509Certificates;\r\n\r\n\r\n    namespace SmartCardLogon{\r\n\r\n        static class NativeMethods\r\n        {\r\n\r\n            public enum CRED_MARSHAL_TYPE\r\n            {\r\n                CertCredential = 1,\r\n                UsernameTargetCredential\r\n            }\r\n\r\n            [StructLayout(LayoutKind.Sequential)]\r\n            internal struct CERT_CREDENTIAL_INFO\r\n            {\r\n                public uint cbSize;\r\n                [MarshalAs(UnmanagedType.ByValArray, SizeConst = 20)]\r\n                public byte[] rgbHashOfCert;\r\n            }\r\n\r\n            [DllImport(\"advapi32.dll\", CharSet = CharSet.Unicode, SetLastError = true)]\r\n            public static extern bool CredMarshalCredential(\r\n                CRED_MARSHAL_TYPE CredType,\r\n                IntPtr Credential,\r\n                out IntPtr MarshaledCredential\r\n            );\r\n\r\n            [DllImport(\"advapi32.dll\", SetLastError = true)]\r\n            public static extern bool CredFree([In] IntPtr buffer);\r\n\r\n        }\r\n\r\n        public class Certificate\r\n        {\r\n\r\n            public static PSCredential MarshalFlow(string thumbprint, SecureString pin)\r\n            {\r\n                //\r\n                // Set up the data struct\r\n                //\r\n                NativeMethods.CERT_CREDENTIAL_INFO certInfo = new NativeMethods.CERT_CREDENTIAL_INFO();\r\n                certInfo.cbSize = (uint)Marshal.SizeOf(typeof(NativeMethods.CERT_CREDENTIAL_INFO));\r\n\r\n                //\r\n                // Locate the certificate in the certificate store \r\n                //\r\n                X509Certificate2 certCredential = new X509Certificate2();\r\n                X509Store userMyStore = new X509Store(StoreName.My, StoreLocation.CurrentUser);\r\n                userMyStore.Open(OpenFlags.ReadOnly);\r\n                X509Certificate2Collection certsReturned = userMyStore.Certificates.Find(X509FindType.FindByThumbprint, thumbprint, false);\r\n                userMyStore.Close();\r\n\r\n                if (certsReturned.Count == 0)\r\n                {\r\n                    throw new Exception(\"Unable to find the specified certificate.\");\r\n                }\r\n\r\n                //\r\n                // Marshal the certificate \r\n                //\r\n                certCredential = certsReturned[0];\r\n                certInfo.rgbHashOfCert = certCredential.GetCertHash();\r\n                int size = Marshal.SizeOf(certInfo);\r\n                IntPtr pCertInfo = Marshal.AllocHGlobal(size);\r\n                Marshal.StructureToPtr(certInfo, pCertInfo, false);\r\n                IntPtr marshaledCredential = IntPtr.Zero;\r\n                bool result = NativeMethods.CredMarshalCredential(NativeMethods.CRED_MARSHAL_TYPE.CertCredential, pCertInfo, out marshaledCredential);\r\n\r\n                string certBlobForUsername = null;\r\n                PSCredential psCreds = null;\r\n\r\n                if (result)\r\n                {\r\n                    certBlobForUsername = Marshal.PtrToStringUni(marshaledCredential);\r\n                    psCreds = new PSCredential(certBlobForUsername, pin);\r\n                }\r\n\r\n                Marshal.FreeHGlobal(pCertInfo);\r\n                if (marshaledCredential != IntPtr.Zero)\r\n                {\r\n                    NativeMethods.CredFree(marshaledCredential);\r\n                }\r\n            \r\n                return psCreds;\r\n            }\r\n        }\r\n    }\r\n    \"@\r\n\r\n        Add-Type -TypeDefinition $SmartCardCode -Language CSharp\r\n        Add-Type -AssemblyName System.Security\r\n\r\n        $ValidCerts = [System.Security.Cryptography.X509Certificates.X509Certificate2[]](Get-ChildItem 'Cert:\\CurrentUser\\My')\r\n        $Cert = [System.Security.Cryptography.X509Certificates.X509Certificate2UI]::SelectFromCollection($ValidCerts, 'Choose a certificate', 'Choose a certificate', 0)\r\n\r\n        $Pin = Read-Host \"Enter your PIN: \" -AsSecureString\r\n\r\n        Write-Output ([SmartCardLogon.Certificate]::MarshalFlow($Cert.Thumbprint, $Pin))\r\n    }",
      "created_at": "2018-08-01T17:53:31Z",
      "updated_at": "2018-08-01T17:53:31Z"
    },
    {
      "author": "Qiangong2",
      "author_association": "NONE",
      "body": "@jimmy58663 \r\n\r\nI keep getting this error on Powershell 5.1 when I try to run Get-SmartCardCred: https://paste.ubuntu.com/p/PtqKqwbNgR/\r\n\r\nAny help would be greatly appreciated\n\n<blockquote><div><strong><a href=\"https://paste.ubuntu.com/p/PtqKqwbNgR/\">Ubuntu Pastebin</a></strong></div></blockquote>",
      "created_at": "2020-07-08T19:27:05Z",
      "updated_at": "2020-07-08T19:27:07Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@Qiangong2 \r\n> I keep getting this error on Powershell 5.1 \r\nWindows PowerShell issues should be reported at https://windowsserver.uservoice.com/forums/301869-powershell\r\n",
      "created_at": "2021-04-05T21:06:23Z",
      "updated_at": "2021-04-05T21:06:23Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Security Working Group: We use Windows/.NET for this.  Is this still an issue?",
      "created_at": "2021-04-05T21:10:42Z",
      "updated_at": "2021-04-05T21:10:42Z"
    },
    {
      "author": "Qiangong2",
      "author_association": "NONE",
      "body": "We ended up using a different product overall. I no longer know if it's an issue or not",
      "created_at": "2021-04-05T22:02:39Z",
      "updated_at": "2021-04-05T22:02:39Z"
    },
    {
      "author": "jimmy58663",
      "author_association": "NONE",
      "body": "@TravisEz13 Sorry, not sure how I missed @Qiangong2 commenting last year. I rewrote the function and continue to use it for any smart card needs. I have it located at: https://github.com/jimmy58663/pscredentialWithCert.\r\n\r\nTo my knowledge, get-credential is still limited to 1 cert per smart card. My function works to alleviate that, but there are some PowerShell cmdlets that still do not like the cred object like Start-Process.\r\n\r\nI have a work around for Start-Process, but I believe the underlying issue is a smart card cred starts out with @@ and Start-Process tries to split a username by the @ assuming it is in the format of user@domain. \n\n<blockquote><img src=\"https://avatars.githubusercontent.com/u/39251362?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/jimmy58663/pscredentialWithCert\">jimmy58663/pscredentialWithCert</a></strong></div><div>Handle PSCredentials that use a certficiate (smartcard) for logon - jimmy58663/pscredentialWithCert</div></blockquote>",
      "created_at": "2021-04-05T22:42:26Z",
      "updated_at": "2021-04-05T22:42:28Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "https://github.com/jimmy58663/pscredentialWithCert/blob/master/PowerShell/ReadFromAnySmartcard.ps1\r\nlooks most related.\r\nI verified the APIs are documented.\r\nThe source is MIT licensed:  https://github.com/jimmy58663/pscredentialWithCert/blob/master/LICENSE\r\nOne question to the working group is does this belong in the core cmdlet or in another module.\n\n<blockquote><img src=\"https://avatars.githubusercontent.com/u/39251362?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/jimmy58663/pscredentialWithCert\">jimmy58663/pscredentialWithCert</a></strong></div><div>Handle PSCredentials that use a certficiate (smartcard) for logon - jimmy58663/pscredentialWithCert</div></blockquote>\n<blockquote><img src=\"https://avatars.githubusercontent.com/u/39251362?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/jimmy58663/pscredentialWithCert\">jimmy58663/pscredentialWithCert</a></strong></div><div>Handle PSCredentials that use a certficiate (smartcard) for logon - jimmy58663/pscredentialWithCert</div></blockquote>",
      "created_at": "2021-04-08T20:03:57Z",
      "updated_at": "2021-04-08T20:03:59Z"
    },
    {
      "author": "jimmy58663",
      "author_association": "NONE",
      "body": "@TravisEz13 that is the correct .ps1 containing the updated function I use. That was written by me and as such is technically releasable in the public domain, the MIT license was brought over with the fork of the original project that included the original function, also written by me.\r\n\r\nI would say that the capability should be a built-in part of Get-Credential that it is able to access any certificate on a smart card rather than the existing capability it has to just utilize the first certificate that appears on a smart card. My function utilizes the Windows credential prompt and will also work for username/password.\r\n\r\nI am not familiar enough with this codebase or the Get-Credential cmdlet to say if you can just replace its code with the C# from my function, if there are issues the original cmdlet addressed over time, or if it would be a lot of work to incorporate the changes my function provides. I assume there would be a bit of work as I wrote it under the assumption it is working from PowerShell 5.1 on a Windows machine. I assume trying to translate it to .NET Core/*NIX would have issues.\r\n\r\nIf you have any questions about the function I am more than happy to answer what I can.",
      "created_at": "2021-04-08T21:21:12Z",
      "updated_at": "2021-04-08T21:21:12Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "> I am not familiar enough with this codebase or the Get-Credential cmdlet to say if you can just replace its code with the C# from my function, if there are issues the original cmdlet addressed over time, or if it would be a lot of work to incorporate the changes my function provides. I assume there would be a bit of work as I wrote it under the assumption it is working from PowerShell 5.1 on a Windows machine. I assume trying to translate it to .NET Core/*NIX would have issues.\r\n\r\nI don't think this would replace the code, but it certainly is a starting point.  Mainly I was just checking all the checks we have to do when we take external code that does p/Invokes.",
      "created_at": "2021-04-08T21:24:07Z",
      "updated_at": "2021-04-08T21:24:07Z"
    },
    {
      "author": "saeckl",
      "author_association": "NONE",
      "body": "@jimmy58663\r\nIs it possible to read only the user of the certificate on the smart card. (Powershell) Without the popup for pin query?",
      "created_at": "2021-04-09T19:45:14Z",
      "updated_at": "2021-04-09T19:45:14Z"
    },
    {
      "author": "jimmy58663",
      "author_association": "NONE",
      "body": "@saeckl it is possible, but not really related to the above. In Windows the smart card public certs are loaded into the certificate store. You can get the certificates front the store and check their attributes. I believe the Subject Alternative Name is typically used to map a Username, but I am not sure if that is a requirement.",
      "created_at": "2021-04-09T22:53:41Z",
      "updated_at": "2021-04-09T22:53:41Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Security working group:  I think integrating the example implementation into get-credential would be good.",
      "created_at": "2021-04-12T20:41:23Z",
      "updated_at": "2021-04-12T20:41:23Z"
    },
    {
      "author": "Sunderbraze",
      "author_association": "NONE",
      "body": "> I have a work around for Start-Process, but I believe the underlying issue is a smart card cred starts out with @@ and Start-Process tries to split a username by the @ assuming it is in the format of user@domain.\r\n\r\n@jimmy58663 Hi, are you able to elaborate on your workaround for Start-Process? \r\n\r\nCurrently if I run **$cred = Get-SmartCardCred** and then **Start-Process powershell -Credential $cred** it throws an error claiming \"Username or password is incorrect.\" That doesn't give us much information, but in event viewer I see a Logon Failure that seems to explain it \u2014 if we assume that my **$cred.UserName** is **@@123456789ABCDEF** then the event details would show up as follows:\r\n\r\nAccount For Which Logon Failed:\r\n    Security ID: NULL SID\r\n    Account Name: @\r\n    Account Domain: 123456789ABCDEF\r\n\r\nStart-Process is definitely assuming that @@123456789ABCDEF is user \"@\" from the domain \"123456789ABCDEF\" which makes it seem like that crucial cmdlet has no idea what to do with smartcard credentials. Any way around that could be a miracle. Thanks!",
      "created_at": "2021-05-13T21:31:10Z",
      "updated_at": "2021-05-13T21:31:10Z"
    },
    {
      "author": "jimmy58663",
      "author_association": "NONE",
      "body": "@Sunderbraze Sure, you can see below an example. It is basically just utilizing the .Net Process class instead of Start-Process cmdlet.\r\n\r\n```\r\n$Cred = Get-SmartCardCred\r\n$StartInfo = New-Object System.Diagnostics.ProcessStartInfo\r\n$StartInfo.FileName = 'powershell.exe'\r\n$StartInfo.UseShellExecute = $false\r\n$StartInfo.UserName = $Cred.Username\r\n$StartInfo.Password = $Cred.Password\r\n$StartInfo.Arguments = 'Start-Process powershell'\r\n$StartInfo.WorkingDirectory = $env:windir\r\n\r\n$Process = New-Object System.Diagnostics.Process\r\n$Process.StartInfo = $StartInfo\r\n$Process.Start()\r\n\r\n$Cred = $null\r\n```\r\n\r\nIt is a little strange that doing so I manually call PowerShell with .Net classes and provide arguments to launch powershell again with Start-Process, but the .Net call closes immediately afterwards and I did not do any research into that. Since the Start-Process call is called from a shell that has the smart card credentials though, the final spawned PowerShell session is with those credentials. Lastly, iirc you can spawn an elevated shell by changing to `$StartInfo.Arguments = 'Start-Process powershell -Verb runas`.",
      "created_at": "2021-05-14T00:03:38Z",
      "updated_at": "2021-05-14T00:03:38Z"
    },
    {
      "author": "AlbertsMTG",
      "author_association": "NONE",
      "body": "Hi all.\r\n\r\n@jimmy58663 \r\nSay, do you see a way to change the script, so that for PIN entry, it utilizes the PIN-Pad of my SmartCard reader instead of the computer keyboard?",
      "created_at": "2022-04-11T08:10:38Z",
      "updated_at": "2022-04-11T08:10:38Z"
    },
    {
      "author": "jimmy58663",
      "author_association": "NONE",
      "body": "@AlbertsMTG that would be outside of my scope. The input to the credential window is handled by Windows and its IO devices.",
      "created_at": "2022-04-12T18:51:44Z",
      "updated_at": "2022-04-12T18:51:44Z"
    },
    {
      "author": "AlbertsMTG",
      "author_association": "NONE",
      "body": "Too bad, I hoped you would know. I have searched for a while already to find a script that is able to invoke the PIN-Pad entry to no avail. It seems no one else wants to do that.",
      "created_at": "2022-04-13T06:43:55Z",
      "updated_at": "2022-04-13T06:43:55Z"
    },
    {
      "author": "AlbertsMTG",
      "author_association": "NONE",
      "body": "@jimmy58663 \r\nJust found the solution. Your script can be used, after all. When the PIN is asked for, just leave it blank and press enter - this will activate the PIN-Pad!",
      "created_at": "2022-04-13T15:22:10Z",
      "updated_at": "2022-04-13T15:22:10Z"
    }
  ],
  "created_at": "2017-08-25T14:01:36Z",
  "number": 4670,
  "state": "open",
  "title": "Get-Credential does not work for smart cards with multiple certificates.",
  "updated_at": "2022-04-13T15:22:10Z"
}