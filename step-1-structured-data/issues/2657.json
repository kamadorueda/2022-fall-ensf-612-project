{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2657",
  "author": "MathiasMagnus",
  "body": "Steps to reproduce\r\n------------------\r\nChoose a directory with a fair amount of beefy executables and issue Get-ChildItem on the directory.\r\n\r\nExpected behavior\r\n-----------------\r\nObtain a directory listing in a reasonable amount of time.\r\n\r\nActual behavior\r\n---------------\r\nIn reality it takes far longer than it should, mostly because displaying the directory listing triggers the Antimalware Service Executable which burns a CPU core but more importantly, takes a significant amount of time to finish scaling with the size of the directory.\r\n\r\n```powershell\r\nPS C:\\Users\\Matty\\Downloads> ls | measure -Property Length -Sum\r\n\r\n\r\nCount    : 83\r\nAverage  :\r\nSum      : 7041940346\r\nMaximum  :\r\nMinimum  :\r\nProperty : Length\r\n```\r\n\r\n83 files and 7 Gigs of Downloads with a fair amount of .exe, .iso and what not.\r\n\r\n```powershell\r\nPS C:\\Users\\Matty\\Downloads> Measure-Command {$list = Get-ChildItem; foreach ($elem in $list) {Write-Host $elem}}\r\n...\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 2\r\nMilliseconds      : 631\r\nTicks             : 26310762\r\nTotalDays         : 3,04522708333333E-05\r\nTotalHours        : 0,0007308545\r\nTotalMinutes      : 0,04385127\r\nTotalSeconds      : 2,6310762\r\nTotalMilliseconds : 2631,0762\r\n```\r\n\r\nSo just ordinarily printing the name of the files takes 2 seconds and 631 milliseconds (already not quite what I'd expect, but ok). Now, executing the following script block (forgive me, I couldn't devise a better solution to demo the artifact)\r\n\r\n```powershell\r\n$start = Get-Date;\r\nls ~\\Downloads\r\n$end = Get-Date;\r\n$span = $end - $start;\r\nWrite-Host $span;\r\n```\r\n\r\nPrints out the following:\r\n\r\n```PowerShell\r\n\"Exactly what I'd see if invoking Get-ChildItem plain from the console\"\r\n00:00:07.8705418\r\n```\r\nThis is fishy.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\nLatest nightly.\r\n\r\n```powershell\r\nPS C:\\Users\\Matty\\Downloads> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-alpha\r\nSerializationVersion           1.1.0.1\r\nGitCommitId                    v6.0.0-alpha.12-21-g2077e42b52cd431a9097cf6673f9b4d5f4e4f391\r\nPSEdition                      Core\r\nBuildVersion                   3.0.0.0\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nCLRVersion\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "MathiasMagnus",
      "author_association": "NONE",
      "body": "I understand that this is not a \"valuable\" feature request, but its such core functionality that I was hoping to see this addressed sooner. Simply navigating the filesystem is immensely subpar to a native Linux experience.\r\n\r\nIt is not just the the pathological large `~\\Downloads` folder that suffers from this, but most Windows `bin` folders (Cygwin, Git, Visual Studio, Qt, etc.) so any install that has a fair amount of `.exe` and `.dll` in it. It is fairly common for a sysadmin to list folders for files. On Linux, it's roughly as fast as the console can spew out characters.\r\n\r\nAnd I haven't even talked about `locate somehing` vs. `gci C:\\ -R -Fil something -Err SilentlyContinue`. Prior takes 1 second at most, while the latter is a multi-minute command. Powershell could really improve on its interactive part.",
      "created_at": "2017-11-05T14:28:11Z",
      "updated_at": "2017-11-05T14:28:11Z"
    },
    {
      "author": "MathiasMagnus",
      "author_association": "NONE",
      "body": "I did some more research, AMSE triggers and as such slows down dir listings of files that were downloaded and have not yet been targets of `Unblock-File`. (If I download a ZIP file and expand it, the result is the same. Unzipped content also need to be Unblocked, if the ZIP has not been prior to unzipping.)",
      "created_at": "2017-11-05T14:51:37Z",
      "updated_at": "2017-11-05T14:51:37Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Can you add a stack where AMSE triggers? That could save someone a bit of work and possibly get a fix in faster.",
      "created_at": "2017-11-05T15:22:12Z",
      "updated_at": "2017-11-05T15:22:12Z"
    },
    {
      "author": "MathiasMagnus",
      "author_association": "NONE",
      "body": "What do you mean \"add a stack where AMSE triggers\"? For me, _stack_ means _call stack_, but I have no idea how to obtain something like that. You mean write a short script?",
      "created_at": "2017-11-05T16:27:47Z",
      "updated_at": "2017-11-05T16:27:47Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Yes, I meant call stack. I guessed incorrectly that you were looking at call stacks to see that AMSE was triggered.",
      "created_at": "2017-11-05T16:42:45Z",
      "updated_at": "2017-11-05T16:42:45Z"
    },
    {
      "author": "MathiasMagnus",
      "author_association": "NONE",
      "body": "No, `Get-ChildItem` on my `~\\Downloads` dir takes 7 seconds (now actually 14 seconds, was 7 when I reported). That is totally enough to see AMSE dominate the CPU usage in Task Manager.",
      "created_at": "2017-11-05T16:46:32Z",
      "updated_at": "2017-11-05T16:46:32Z"
    },
    {
      "author": "MathiasMagnus",
      "author_association": "NONE",
      "body": "For future reference, how can I get a call stack that has demonstrative power as to what's happening? AMSE I thought is a constantly running service, and as such it should not be directly associated with any of my processes.",
      "created_at": "2017-11-05T16:54:15Z",
      "updated_at": "2017-11-05T16:54:15Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "[Perfview](https://github.com/Microsoft/perfview) is great for collecting etw traces, though the UI is hard to use.\r\n\r\nWindows Performance Toolkit has `wpa` which is good for analyzing traces. This [blog post](https://randomascii.wordpress.com/2015/09/24/etw-central/) has lots of good references on getting started.\r\n\r\nI will say these tools are not exactly beginner friendly - but they are super powerful.",
      "created_at": "2017-11-05T17:15:21Z",
      "updated_at": "2017-11-05T17:15:21Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr And Bruce is also unicycling :)",
      "created_at": "2017-11-06T12:19:07Z",
      "updated_at": "2017-11-06T12:19:07Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@powercode - Bruce Dawson is somewhat well known for unicycling a popular bike ride from Seattle to Portland - 200 miles. 10,000 riders do it every year, most take 2 days. I saw him training for that ride commuting to work - so he was actually part of how I got started unicycling.\r\n\r\nAs long as you brought it up - @LeeHolmes and @vors can also ride a unicycle - so it's highly recommended if you want to be one of the cool PowerShell peeps :)",
      "created_at": "2017-11-06T15:18:41Z",
      "updated_at": "2017-11-06T15:18:41Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Seems like we could improve on the Console output. For each line we write, we make PInvoke calls to GetConsoleScreenBufferInfo, GetConsoleMode and WriteConsole. Do we really have to to the first two calls for each line?",
      "created_at": "2017-11-06T19:46:47Z",
      "updated_at": "2017-11-06T19:46:47Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Lol, what a thread. I probably would not be able to unicycle after that long.",
      "created_at": "2017-11-09T04:40:48Z",
      "updated_at": "2017-11-09T04:40:48Z"
    }
  ],
  "created_at": "2016-11-10T12:51:50Z",
  "labels": [
    "WG-Engine",
    "WG-Engine-Performance"
  ],
  "number": 2657,
  "state": "open",
  "title": "Get-ChildItem triggers Antimalware Service Executable",
  "updated_at": "2018-07-22T00:30:27Z"
}