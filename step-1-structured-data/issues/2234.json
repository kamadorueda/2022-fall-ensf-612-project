{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2234",
  "author": "RamblingCookieMonster",
  "body": "## Steps to reproduce\n\nInstall a module to a PSModulePath, look for it:\n\n``` powershell\nInstall-Package -Name PoshRSJob, PSSlack `\n                -Source https://www.powershellgallery.com/api/v2 `\n                -ProviderName NuGet `\n                -ExcludeVersion `\n                -Destination ~/.local/share/powershell/Modules/ `\n                -Force\n\nGet-Module -ListAvailable\n```\n## Expected behavior\n\n`Get-Module -ListAvailable` returns module information for modules in PSModulePath paths\n## Actual behavior\n\nInstalled modules (PoshRSJob and WFTools in this case) are not listed.\n\nNotes:\n- Tab completion for Import-Module does list these modules\n- Modules import by name alone (no need for full path) without issue\n- Modules are listed with `Get-Module` after import\n- Modules are still unlisted with `Get-Module -ListAvailable` switch after import\n## Environment data\n\nmacOS (El Capitan):\n\n``` powershell\n> $PSVersionTable\n\nName                           Value\n----                           -----\nPSVersion                      6.0.0-alpha\nPSEdition                      Core\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\nBuildVersion                   3.0.0.0\nGitCommitId                    v6.0.0-alpha.9\nCLRVersion\nWSManStackVersion              3.0\nPSRemotingProtocolVersion      2.3\nSerializationVersion           1.1.0.1\n```\n\nCentos 7:\n\n``` powershell\n> $PSVersionTable\n\nName                           Value\n----                           -----\nPSVersion                      6.0.0-alpha\nPSEdition                      Core\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\nBuildVersion                   3.0.0.0\nGitCommitId                    v6.0.0-alpha.9\nCLRVersion\nWSManStackVersion              3.0\nPSRemotingProtocolVersion      2.3\nSerializationVersion           1.1.0.1\n```\n\nCheers!\n",
  "closed_at": "2017-05-25T18:13:58Z",
  "comments": [
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "Have you tried with the -Refresh Parameter as I believe that this is by design due to the module command cache\n\n``` powershell\nGet-Module -ListAvailable -Refresh\n```\n",
      "created_at": "2016-09-12T05:01:14Z",
      "updated_at": "2016-09-12T05:02:31Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "@chuanjiao10 - Please refrain from referencing issues that don't relate to the issue that you are commenting on.\n",
      "created_at": "2016-09-12T07:01:27Z",
      "updated_at": "2016-09-12T07:01:27Z"
    },
    {
      "author": "RamblingCookieMonster",
      "author_association": "NONE",
      "body": "@kilasuit - that's more around command discovery, no?  I would assume `-ListAvailable` should always list every valid module in a PSModulePath path.\n\nNo dice on using `Get-Module -ListAvailable -Refresh` though - does it work for you if you download or just create a module in there?\n\nMore notes:\n- Manually creating a 'wtf' module results in same behavior:\n\n```\nmkdir /Users/wframe/.local/share/powershell/Modules/wtf\nNew-ModuleManifest -Path /Users/wframe/.local/share/powershell/Modules/wtf/wtf.psd1\n```\n\nCheers!\n",
      "created_at": "2016-09-12T13:00:38Z",
      "updated_at": "2016-09-12T13:00:38Z"
    },
    {
      "author": "damnsalvation",
      "author_association": "NONE",
      "body": "I also have this problem, but the modules I'm trying to load are Microsoft's - specifically Configuration Manager and Security Client (though I don't really care about that one).\r\n\r\nMy PSModulePath statement is:\r\n%SystemRoot%\\system32\\WindowsPowerShell\\v1.0\\Modules\\;C:\\Program Files (x86)\\Microsoft SQL Server\\110\\Tools\\PowerShell\\Modules\\;C:\\Program Files\\Microsoft Security Client\\MpProvider\\;C:\\Program Files (x86)\\Microsoft Configuration Manager\\AdminConsole\\bin\\;\r\n(in $env:PSModulePAth it is prepended with (my profile)\\Documents\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;)\r\n\r\nGet-Module -ListAvailable shows everything through SQL, but not MpProvider or Config Manager.  \r\n\r\nI saw elsewhere that the .psd1 or binary has to have the same name as the folder it's in to be listed.  This is the case for MpProvider.psd1, so by all rights it should show up.  It is not the case for the Config Manager module, which I take to be a silly mistake on the CM team's part or completely irrelevant because the security client module does conform but doesn't show.\r\n\r\nUnlike the OP, importing by name without the full path does not work.\r\n\r\nI wouldn't worry about it if it didn't take so dang long to type - import-module \"c:\\program files(x86)\\microsoft configuration manager\\adminconsole\\bin\\configurationmanager.psd1\".\r\n\r\nOh, and if you had not guessed, I'm having this issue on Server 2012r2.  ",
      "created_at": "2017-05-04T14:26:17Z",
      "updated_at": "2017-05-04T14:26:17Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Hum! I think the issue is that PowerShell Open Source is not meant to recognize any of the Windows PowerShell Modules as they are different. I don't think PowerShell OSS will be replacing Windows PowerShell as it will take a long time because of its differences.\r\n\r\n:) ",
      "created_at": "2017-05-04T14:45:34Z",
      "updated_at": "2017-05-04T14:45:34Z"
    },
    {
      "author": "damnsalvation",
      "author_association": "NONE",
      "body": "...Am I in the wrong place?\r\nCrap.",
      "created_at": "2017-05-04T16:32:46Z",
      "updated_at": "2017-05-04T16:32:46Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Hey @damnsalvation!\r\n\r\nNot really!  If the cmdlet having issue is part of PowerShell Core Module then it matter to take a look at.  If the issues only relates to Windows PowerShell v5.x then is better to log the issue under Windows PowerShell UserVoice forum.    All issues will be looked at and taken care of in either UserVoice or GitHub respectively.\r\n\r\n:) \r\n\r\nIn case you need the UserVoice link, here it is: \r\nWindows PowerShell UserVoice:\r\nhttps://windowsserver.uservoice.com/forums/301869-powershell \r\n",
      "created_at": "2017-05-04T17:38:42Z",
      "updated_at": "2017-05-04T17:38:42Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This is worth investigating.",
      "created_at": "2017-05-05T05:08:26Z",
      "updated_at": "2017-05-05T05:08:26Z"
    },
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT - I may be wrong but this looks to be due to the rework of the module analysis cache that came in with v5 and I think that Get-Command and Get-Module will not fully update until a new session gets opened but I'm stabbing at a guess there as I did look into this ages ago but then this dropped off the radar somewhere. \r\n\r\n@RamblingCookieMonster - this leads me to ask if you get the same issue on a v4 windows box at all? or a fresh v5/v5.1 windows box? If it doesnt happen on v4 then I'm betting that its likely to do with the module analysis cache but that's just my thoughts.",
      "created_at": "2017-05-10T14:00:13Z",
      "updated_at": "2017-05-10T14:00:13Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@kilasuit yes, the analysis cache was reworked to improve performance in v5 by @lzybkr ",
      "created_at": "2017-05-10T17:01:34Z",
      "updated_at": "2017-05-10T17:01:34Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "The performance work went into v5.1.\r\n\r\nI don't think I'm seeing the problem with v5.1, though I ran `Install-Module` instead of `Install-Package` and I ran on Windows.\r\n\r\nI also don't recall any old (before my changes) or new code that would explain the described behavior - which is my way of saying, it should just work, I'm surprised it didn't.",
      "created_at": "2017-05-10T17:10:53Z",
      "updated_at": "2017-05-10T17:10:53Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "This doesn't repro anymore on `6.0.0-beta.1`, so I'm marking as fixed. (Plus, Install-Module works on Linux/macOS now.) ",
      "created_at": "2017-05-25T18:13:58Z",
      "updated_at": "2017-05-25T18:13:58Z"
    },
    {
      "author": "grongrilla",
      "author_association": "NONE",
      "body": "I realize this issue is closed, however I currently encounter a (maybe?) similar problem.\r\n\r\nI'm experimenting with Hosting PowerShell Core. I build a custom host (implementing PSHost, PSHostUserInterface, PSHostWarUserInterface). I am executing a script by loading it from a file and running it with `PowerShell.AddScript(...)` and `PowerShell.Invoke()`. I am glancing over most of the details, but I am happy to elaborate more. In short, executing works and I see the output of commads in my dontnetcore 2.1 console application.\r\n\r\nThis is the script\r\n\r\n```\r\n$PSVersionTable\r\n\"---\"\r\n$env:PSModulePath\r\n\"---\"\r\nGet-Command -Module \"Microsoft.PowerShell.Core\" | select modulename, name | ForEach-Object { \"$($_.modulename).$($_.name)\" }\r\n\"---\"\r\nGet-Module -ListAvailable | foreach {Get-Command -Module $_.name | select modulename, name} | ForEach-Object { \"$($_.modulename).$($_.name)\" }\r\n\"---\"\r\n```\r\n\r\nThis is what I get:\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0\r\nOS                             Microsoft Windows 10.0.16299\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n---\r\nD:\\DEV\\<...>\\netcoreapp2.1\\publish\r\n---\r\nMicrosoft.PowerShell.Core.Add-History\r\n... (omited)\r\nMicrosoft.PowerShell.Core.Where-Object\r\n---\r\n---\r\n```\r\n\r\nAs you can see, there is just a \"`null`\"-line between the last two `---`. What I would have expected would a long list like I get when I execute the corresponding command in pwsh.exe:\r\n\r\n```\r\nCimCmdlets.Get-CimAssociatedInstance\r\n... (omited)\r\nPSReadLine.Set-PSReadLineOption\r\nThreadJob.Start-ThreadJob\r\n```\r\n\r\nMy runspace is the created using `CreateRunspace(_host, InitialSessionState.CreateDefault())`. After I `Open()` the runspace, I change `PSModulePath` to only point to the directory where I publish my console app. All the referenced Powershell SDK DLLs are available there (Microsoft.PowerShell.Commansd.Diagnostics and so on).\r\n\r\nAm I missing something? Is this intended behaviour? I can use all the Cmdlets from those Assemblies, f.ex. `Get-Process` or `Get-ItemProperty` just fine in my Host...",
      "created_at": "2018-10-22T14:55:31Z",
      "updated_at": "2018-10-22T14:55:31Z"
    },
    {
      "author": "grongrilla",
      "author_association": "NONE",
      "body": "oh, and \r\n```\r\nGet-Command -Module \"Microsoft.PowerShell.Management\" | select modulename, name | ForEach-Object { \"$($_.modulename).$($_.name)\" }\r\n```\r\nalso doesn't output anything in my hosted PowerShell Core....",
      "created_at": "2018-10-22T14:57:38Z",
      "updated_at": "2018-10-22T14:57:38Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "> After I Open() the runspace, I change PSModulePath to only point to the directory where I publish my console app. All the referenced Powershell SDK DLLs are available there \r\n\r\nHave you also moved the .PSD1 files for these modules into subfolders in this new location? Otherwise I doubt PowerShell has a means to obtain the metadata you're looking for. \ud83d\ude15 ",
      "created_at": "2018-10-22T15:07:33Z",
      "updated_at": "2018-10-22T15:07:47Z"
    },
    {
      "author": "grongrilla",
      "author_association": "NONE",
      "body": "@vexx32\r\n\r\nThanks, yes, you are correct. The assemblies are in the publish directory and I pull them directly (via Assembly Reference) from the \"root\" of the PS 6 SDK Dir. I did not realize that psd1 files are necessary and that there is a \"module\" dir in the SDK, where the Assemblies and psd1 files are located. So, mystery solved...\r\n\r\nRaises another question for me... how do you deploy a PS 6 Host as .net core console application in a \"self contained\" way? For my use case I need a copy-deployable \".exe\", that can run PS1-Scripts, and does not rely on anything beeing installed on the target machine... \r\n\r\nShould I pull in the assemblies I need via Assembly reference AND copy the \"modules\" dir manually and use that as my `PSDModulePath`? Is there a better or correct way? Do I need to use nuget packages of the PS SDK so have everything working automatically?\r\n\r\nIf this is not the right place for this I'll head over to StackOverflow :)",
      "created_at": "2018-10-23T15:22:46Z",
      "updated_at": "2018-10-23T15:22:46Z"
    }
  ],
  "created_at": "2016-09-12T01:12:08Z",
  "number": 2234,
  "state": "closed",
  "title": "Get-Module -ListAvailable not listing modules",
  "updated_at": "2018-10-23T15:22:46Z"
}