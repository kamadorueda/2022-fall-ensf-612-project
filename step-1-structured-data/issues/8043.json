{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8043",
  "author": "masaeedu",
  "body": "In order to manipulate some config files, I need to deserialize some JSON that represents an array of strings, apply a transformation to each string, and serialize the resulting array back to JSON.\r\n\r\nMost of my time on this task has been spent discovering the many wonderful surprises in Powershell's system of coercions between arrays of various lengths, non-arrays, and nulls.\r\n\r\n```powershell\r\n#!/usr/bin/env pwsh\r\n# Let's try an array with two elements\r\n$x = '[\"foo\", \"bar\"]'\r\n$result = ConvertTo-Json ((ConvertFrom-Json $x) | % { \"Hello, $_\" })\r\necho $result\r\n# [\r\n#  \"Hello, foo\",\r\n#  \"Hello, bar\"\r\n# ]\r\n\r\n# So far so good\r\n\r\n# But what about a 1-element array?\r\n$x = '[\"foo\"]'\r\n$result = ConvertTo-Json ((ConvertFrom-Json $x) | % { \"Hello, $_\" })\r\necho $result\r\n# \"Hello, foo\"\r\n\r\n# So apparently a 1-element array of strings just turns into a string\r\n\r\n# 0-element arrays?\r\n$x = '[]'\r\n$result = ConvertTo-Json ((ConvertFrom-Json $x) | % { \"Hello, $_\" })\r\necho $result\r\n# <no output>\r\n\r\n# A 0-element array turns into $null, which in turn can't be serialized at all\r\n```\r\n\r\nI appreciate that a scripting language has slightly different concerns than a full blown programming language, but this is basically bizarro-world. I don't know what the solution is exactly, but a sense of consistency and type-safety in the primitive data structures is sorely missing when trying to use PowerShell for non-trivial tasks.",
  "closed_at": "2019-07-17T15:17:02Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "It's well known that pipelines unwrap arrays and enumerate the contents. If you want to operate on the array itself, you will need... *not* use the pipeline -- that's what it's meant to do.\r\n\r\nIn your second example, if you force the data back into an array, it will convert to json as you expect:\r\n```\r\nPS> $x = '[\"foo\"]'\r\nPS> ConvertTo-Json @((ConvertFrom-Json $x) | % { \"Hello, $_\" })\r\n[\r\n  \"Hello, foo\"\r\n]\r\n```\r\n\r\nAnd yes, an empty array when enumerated doesn't do anything. The same is true if you enumerate such an item in a more conventional manner.\r\n\r\nIf you wish to retain the original array structure you will need to manually enumerate the contents, just like you would for any other programming language. You wouldn't expect the enumerator variable in a `foreach` loop to contain an array value unless each individual entry in the array *is* itself an array -- the same is true of PowerShell's pipeline.",
      "created_at": "2018-10-16T12:27:09Z",
      "updated_at": "2018-10-16T12:28:41Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "To add to @vexx32's comments:\r\n\r\nIn a nutshell, the price of using PowerShell's pipeline - both on input and output processing - is that you lose the distinction between:\r\n\r\n* a single item and single-element array\r\n* nothing / `$null` and an empty array\r\n\r\nIt is a slight irony that `ConvertFrom-Json` is _not_ a good pipeline citizen in that it actually sends arrays as a _single object_ through the pipeline as opposed to _enumerating its elements_, the way cmdlets usually do:\r\n\r\n```powershell\r\nPS>  '[]' | ConvertFrom-Json | ConvertTo-Json\r\n[]  # !! empty array was preserved\r\n```\r\n\r\nBecause `%` (`ForEach-Object`) was also involved in your case, however, you saw the usual enumeration behavior; also note that even enclosing a command in `(...)` by itself forces enumeration too:\r\n\r\n```powershell\r\nPS>  ('[]' | ConvertFrom-Json) | ConvertTo-Json\r\n # !! No output - (...) forced enumeration, so no element was sent to ConvertTo-Json\r\n```\r\n\r\nWhile you could argue that  `ConvertFrom-Json`'s current behavior is valuable for its ability to round-trip without loss of information, that ability is easy to disrupt, as demonstrated here, and overall it is more important for `ConvertFrom-Json` to exhibit _standard_ behavior - though a change may not be made for the sake of backward compatibility - see https://github.com/PowerShell/PowerShell/issues/3424\r\n\r\n@vexx32  has already mentioned `@(....)`, the array-subexpression operator that forces interpretation of a result as an array, unless it already is one.\r\n\r\n`ConvertTo-Json` has recently gained a similar ability with its `-AsArray` switch:\r\n\r\n```powershell\r\nPS> 1 | ConvertTo-Json -AsArray -Compress\r\n[1]\r\n```\r\n\r\nApplied to your command:\r\n\r\n```powershell\r\nPS> ConvertFrom-Json $x | % { \"Hello, $_\" } | ConvertTo-Json -AsArray\r\n[\r\n  \"Hello, foo\"\r\n]\r\n```\r\n\r\nWhile this is not automatic round-trip behavior, at least you can predictably output JSON arrays if you know that they're expected.\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-10-17T03:36:25Z",
      "updated_at": "2018-10-19T22:49:26Z"
    },
    {
      "author": "masaeedu",
      "author_association": "NONE",
      "body": "@vexx32\r\n\r\n> You wouldn't expect the enumerator variable in a foreach loop to contain an array value unless each individual entry in the array is itself an array -- the same is true of PowerShell's pipeline.\r\n\r\nIn the example: `$result = @(\"foo\") | % { \"Hello, $_\" }`, the enumerator variable is `$_`, not `$result`. I'm not asking `$_` to be an iterable container, but for `$result` to be an iterable container, which is the behavior you see when you transform the elements of some container in basically every other programming language.\r\n\r\nHere are some examples for you to try out for yourself:\r\n\r\nC#:\r\n\r\n```c#\r\nvar input = new [] { \"foo\" }\r\nvar result = input.Select(x => $\"Hello, {x}\")\r\n```\r\n\r\nJS:\r\n\r\n```js\r\nconst input = [\"foo\"]\r\nconst result = input.map(x => `Hello, ${x}`)\r\n```\r\n\r\nPython:\r\n\r\n```python\r\ninput = [\"foo\"]\r\nresult = [\"Hello, \" + x for x in input]\r\n```\r\n\r\nHaskell:\r\n\r\n```haskell\r\ninput = [\"foo\"]\r\nresult = (\\x -> \"Hello, \" <> x) <$> input\r\n```\r\n\r\nPHP, Java, Ruby, Clojure, etc. are left as an exercise to the interested reader.\r\n\r\n> And yes, an empty array when enumerated doesn't do anything. The same is true if you enumerate such an item in a more conventional manner.\r\n\r\nSimply enumerating an array never \"does\" anything, regardless of how many items it contains. We're talking about two totally orthogonal things here. Iterating over an array and performing some side effects is just that: a sequence of side effects. It has no result value. Mapping an array using some transformation produces a transformed array and no side effects.\r\n\r\nWe can of course encode mapping of the array using incremental mutation of an output array. We'd implement this in let's say JS, like so:\r\n\r\n```js\r\nconst input = [\"foo\"]\r\n\r\nconst result = []\r\nfor (const x of input)\r\n{\r\n  result.push(`Hello, ${x}`)\r\n}\r\n\r\n// The result is:\r\n// [\"Hello, foo\"]\r\n```\r\n\r\nThe output is still, quite straightforwardly, an array. To precisely replicate the PowerShell behavior using a loop in another language takes a considerable amount of effort on our part:\r\n\r\n```js\r\nconst input = [\"foo\"]\r\n\r\nlet result = null\r\nfor (const x of input)\r\n{\r\n  // If this is the first element, we want to produce it as the result\r\n  // directly\r\n  if (result === null)\r\n  {\r\n    result = `Hello, ${x}`;\r\n    continue;\r\n  }\r\n\r\n  // If this is the second element, we want to insert the first element and\r\n  // the current element into an array\r\n  if (!Array.isArray(result))\r\n  {\r\n    result = [result, `Hello, ${x}`];\r\n    continue;\r\n  }\r\n\r\n  // If this is any other element, we want to append it to the array\r\n  result.push(`Hello, ${x}`);\r\n}\r\n\r\nconsole.log(result)\r\n\r\n// The result is:\r\n// \"Hello, foo\"\r\n```",
      "created_at": "2018-10-19T22:26:25Z",
      "updated_at": "2018-10-19T22:26:25Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "In all your examples from other languages, this is only doable on values that *are already collections* at every part of the sequence. \r\n\r\nPowerShell fundamentally isn't like that with its pipeline. Collections are broken apart, and there *is fundamentally no difference* between one item and a 1-length array.\r\n\r\nConsider:\r\n\r\n```powershell\r\n$Value = 1\r\n$Result = $Value | ForEach-Object {$_}\r\n\r\n$Value = @(1)\r\n$Result = $Value | ForEach-Object {$_}\r\n```\r\nWhat you're suggesting is for *both* of these to result in arrays, even when the original item is *not* an array.\r\n\r\nC#, Haskell, none of the other languages do *this*.\r\n\r\nPowerShell, frankly, isn't particularly comparable to them in this regard. It is not C#, not F#, not Haskell. All languages have their nuances, and this simply is one peculiar to PowerShell.\r\n\r\nIf you *require* an array to be returned for whatever reason, then PowerShell allows you to specify this in the ways discussed above.",
      "created_at": "2018-10-19T22:39:02Z",
      "updated_at": "2018-10-19T22:46:08Z"
    },
    {
      "author": "masaeedu",
      "author_association": "NONE",
      "body": "> ```\r\n> $Value = 1\r\n> $Result = $Value | ForEach-Object {$_}\r\n> ...\r\n> ```\r\n> What you're suggesting is for both of these to result in arrays, even when the original item is not an array.\r\n\r\nWrong. I am not suggesting that `1 | ForEach-Object {$_}` should be an array. I am suggesting that `@(1) | ForEach-Object {$_}` should be an array. In other words, whenever it is the case that the output of `$x.GetType()` is:\r\n\r\n```\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     True     Object[]                                 System.Array\r\n```\r\n\r\nthen the output of `$x | % {$_}` should similarly have type `Array`. You can apply this check yourself to `@(1)` and `1` to see the difference.\r\n\r\n> In all your examples from other languages, this is only doable on values that can be confirmed to be collections at every part of the sequence.\r\n\r\nThis sounds like nonsense. There's no repeated confirmation of the input value being an array in any of the examples I posted above. `[].map(x => x * 2).map(x => x * 3)` works identically to `[1].map(x => x * 2).map(x => x * 3)` works identically to `[1, 2, 3].map(x => x * 2).map(x => x * 3)`: all three examples produce an array.",
      "created_at": "2018-10-19T22:47:45Z",
      "updated_at": "2018-10-19T22:47:45Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Correct. All of those methods, however, are only valid on collections themselves. You cannot take a scalar value as you can in PowerShell and apply such a method.\r\n\r\nPowerShell *intentionally* doesn't keep track of the fact that the original item is an array or not. I don't think there is a solution to your quandary, save keeping track of it yourself. \ud83d\ude04 ",
      "created_at": "2018-10-19T22:55:00Z",
      "updated_at": "2018-10-19T22:55:00Z"
    },
    {
      "author": "masaeedu",
      "author_association": "NONE",
      "body": "To make this more precise, currently neither `$Result` in:\r\n\r\n```\r\n$Value = 1\r\n$Result = $Value | ForEach-Object {$_}\r\n\r\n$Value = @(1)\r\n$Result = $Value | ForEach-Object {$_}\r\n```\r\n\r\nis an array. The second should be, the first should not. Since this isn't the case, it should at least be possible to construct your own `map` function to provide the desired behavior as `@(1) ?? map(...) ?? map(...)`. If we try to use `|` we're foiled again, since PowerShell won't leave arrays alone.\r\n\r\nSo we should perhaps have some other operator that acts as simple function application to allow working around this behavior in userland libraries.",
      "created_at": "2018-10-19T22:58:32Z",
      "updated_at": "2018-10-19T22:59:00Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "There is such a thing, sort of, and it's quite close to hand.\r\n\r\nYou're looking for `.ForEach{}` and `.Where{}` -- PowerShell magic methods. They can be applied to literally any object in PowerShell, just like their pipeline cousins. However, they too are not *perfect*.\r\n\r\nCounter to the pipeline, using these methods will *always* result in a collection. Seems to be a generic collection, from what I can see.\r\n\r\nExample:\r\n```powershell\r\nPS> @(1).ForEach{$_}.GetType().FullName\r\nSystem.Collections.ObjectModel.Collection`1[[System.Management.Automation.PSObject, System.Management.Automation, Version=6.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]\r\n\r\nPS> (1).ForEach{$_}.GetType().FullName\r\nSystem.Collections.ObjectModel.Collection`1[[System.Management.Automation.PSObject, System.Management.Automation, Version=6.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]\r\n```\r\nAlthough both cases require parentheses due to how PS handles parsing on decimal numerals (yes, that also is weird and strangely not exhibited by hexadecimal literals, but that's a story for another time), only the first is actually an array.\r\n\r\nAnd yes, both result in a generic `Collection[PSObject]`. Effectively the inverse of the pipeline methods.\r\n\r\nIn *this* case, perhaps you could argue that PS could remember if the value was scalar and return a scalar value, but it's also not possible to know whether or not in the `.ForEach{}` method you opt to return multiple values for each input until the script is being executed... so, I suppose, it's the most elegant solution to simply return a collection.",
      "created_at": "2018-10-19T23:07:41Z",
      "updated_at": "2018-10-19T23:09:44Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> You're looking for `.ForEach{}` and `.Where{}` -- PowerShell magic methods. They can be applied to literally any object in PowerShell\r\n\r\nSmall note here, they can also be applied to `$null` (e.g. `$null.ForEach{}.GetType().FullName` returns the same)\r\n\r\nAlso they can't be applied to objects that already have a `Where` or `ForEach` method (e.g. using `ForEach` on `List<>`  will call `List<T>.ForEach(Action<T>)` instead of the magic method)",
      "created_at": "2018-10-22T13:44:35Z",
      "updated_at": "2018-10-22T13:44:35Z"
    }
  ],
  "created_at": "2018-10-16T05:57:15Z",
  "number": 8043,
  "state": "closed",
  "title": "Introduce some kind of sanity to coercions",
  "updated_at": "2019-07-17T15:17:02Z"
}