{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2980",
  "author": "AspenForester",
  "body": "Steps to reproduce\r\n------------------\r\nGet-ChildItem \\\\server\\share\\dir_doesnt_exist\r\nGet-ChildItem \\\\server\\share\\dir_doesnt_exist -Recurse\r\n\r\nExpected behavior\r\n-----------------\r\nBoth cases should return an ItemNotFoundException\r\n\r\nActual behavior\r\n---------------\r\nNon-recursive case behaves correctly\r\nRecursive case just appears to hang / run forever\r\n\r\n@juneb confirmed the behavior\r\n\r\nEnvironment data\r\n----------------\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.14393.576\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.14393.576\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Just to check - maybe it's not hung, but it might be enumerating the share.\r\n\r\nI tried\r\n\r\n1. server that doesn't exist\r\n2. server exists, share doesn't\r\n3. server and share exist, top folder doesn't exit\r\n4. server, share, and top folder exists, first child doesn't\r\n\r\nOnly case 3 seems to hang, but I noticed I eventually got a `DirUnauthorizedAccessError` on a file/directory that I wouldn't have expected to see, so it looks like we're just enumerating the file system.",
      "created_at": "2017-01-10T22:15:59Z",
      "updated_at": "2017-01-10T22:15:59Z"
    },
    {
      "author": "KevinMarquette",
      "author_association": "CONTRIBUTOR",
      "body": "We just ran into this today on a local drive. With a little testing, the results got even stranger. I was able to identify 2 scenarios with unexpected behavior.   \r\n\r\nThe first is trying to get a folder that does not exist with a trailing backslash.\r\n\r\n    PS:> Get-ChildItem -Path C:\\Windows\\missing_folder\\ -Recurse\r\n    Get-ChildItem : Cannot find path 'C:\\Windows\\m' because it does not exist.\r\n\r\n    PS:> Get-ChildItem -Path C:\\Windows\\other_missing_folder\\ -Recurse\r\n    Get-ChildItem : Cannot find path 'C:\\Windows\\o' because it does not exist.\r\n\r\nYou will notice that it failed to find a folder called `C:\\Windows\\m` that I did not specify. The name of the folder is always the first character of the missing folder name. If the folder `C:\\Windows\\m` does exist, it will not throw an error and instead silently finish with no results. (It will not return the contents of that folder though).\r\n\r\nThe second unexpected behavior is when you don't use the trailing slash. The entire parent folder is recursively walked.\r\n\r\n    PS:> Get-ChildItem -Path C:\\Windows\\missing_folder -Recurse\r\n    Get-ChildItem : Access to the path 'C:\\Windows\\appcompat\\Programs' is denied.\r\n    Get-ChildItem : Access to the path 'C:\\Windows\\CSC' is denied.\r\n    Get-ChildItem : Access to the path 'C:\\Windows\\Logs\\SystemRestore' is denied.\r\n\r\nI used the `c:\\windows` folder in this example because there are several subfolders that will give you an access denied.",
      "created_at": "2018-06-20T03:11:19Z",
      "updated_at": "2018-06-20T03:11:19Z"
    }
  ],
  "created_at": "2017-01-09T15:16:53Z",
  "labels": [
    "Issue-Bug",
    "WG-Cmdlets-Management",
    "Area-FileSystem-Provider"
  ],
  "number": 2980,
  "state": "open",
  "title": "Get-ChildItem -Recurse hangs with -path \\\\server\\share\\dir_doesnt_exist",
  "updated_at": "2021-11-29T17:56:16Z"
}