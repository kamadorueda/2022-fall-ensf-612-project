{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10231",
  "author": "SeeminglyScience",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n# Parameterless constructor isn't the best example since you can't\r\n# do that in C# either, but it also repros with parameters.\r\nclass Test : ValueType {\r\n    Test() { }\r\n}\r\n\r\n[Test]::new()\r\n```\r\n\r\n# Expected behavior\r\n\r\nEither\r\n\r\n1. Parse error when `ValueType` is the base class\r\n1. Special handling for value types when generating constructors. I'm guessing this has to do with `$this` needing to be explicitly boxed, but I haven't looked into it\r\n\r\n# Actual behavior\r\n\r\n```none\r\nInternal CLR error. (0x80131506)\r\n   at DynamicClass.Test(System.Runtime.CompilerServices.Closure, System.Management.Automation.Language.FunctionContext)\r\n   at System.Management.Automation.ScriptBlock.InvokeWithPipeImpl(System.Management.Automation.ScriptBlockClauseToInvoke, Boolean, System.Collections.Generic.Dictionary`2<System.String,System.Management.Automation.ScriptBlock>, System.Collections.Generic.List`1<System.Management.Automation.PSVariable>, ErrorHandlingBehavior, System.Object, System.Object, System.Object, System.Management.Automation.Internal.Pipe, System.Management.Automation.InvocationInfo, System.Object[])\r\n   at System.Management.Automation.ScriptBlock.InvokeWithPipe(Boolean, ErrorHandlingBehavior, System.Object, System.Object, System.Object, System.Management.Automation.Internal.Pipe, System.Management.Automation.InvocationInfo, Boolean, System.Collections.Generic.List`1<System.Management.Automation.PSVariable>, System.Collections.Generic.Dictionary`2<System.String,System.Management.Automation.ScriptBlock>, System.Object[])\r\n   at System.Management.Automation.ScriptBlock.InvokeAsMemberFunction(System.Object, System.Object[])\r\n   at System.Management.Automation.Internal.ScriptBlockMemberMethodWrapper.InvokeHelper(System.Object, System.Object, System.Object[])\r\n   at System.RuntimeTypeHandle.CreateInstance(System.RuntimeType, Boolean, Boolean, Boolean ByRef, System.RuntimeMethodHandleInternal ByRef, Boolean ByRef)\r\n   at System.RuntimeType.CreateInstanceDefaultCtorSlow(Boolean, Boolean, Boolean)\r\n   at System.RuntimeType.CreateInstanceDefaultCtor(Boolean, Boolean, Boolean, Boolean)\r\n   at System.Activator.CreateInstance(System.Type, Boolean, Boolean)\r\n   at System.Activator.CreateInstance(System.Type)\r\n   at System.Management.Automation.Interpreter.InitializeLocalInstruction+MutableValue.Run(System.Management.Automation.Interpreter.InterpretedFrame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(System.Management.Automation.Interpreter.InterpretedFrame)\r\n   at System.Management.Automation.Interpreter.Interpreter.Run(System.Management.Automation.Interpreter.InterpretedFrame)\r\n   at System.Management.Automation.Interpreter.LightLambda.RunVoid1[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon)\r\n```\r\n\r\nThe above stack trace minus the first two lines repeats for about 5,000 lines before PowerShell crashes.  Sometimes the stack trace isn't included, and it's just the first line.\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-preview.2\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-preview.2\r\nOS                             Microsoft Windows 10.0.18362\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @rjmholt for your class issue collection.",
      "created_at": "2020-01-31T07:28:28Z",
      "updated_at": "2020-01-31T07:28:28Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Marking for triage so the Engine WG can pick it up.",
      "created_at": "2022-06-02T23:01:50Z",
      "updated_at": "2022-06-02T23:01:50Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "Engine WG reviewed this issue, and agree the current behavior is less than ideal. \r\n\r\nGiven no immediate plans exist to introduce support for emitting value types, we should actively prevent `System.ValueType` from being used as a base class and instead emit a more helpful error at parse-time (\"Subclassing ValueType is not supported\" or similar).",
      "created_at": "2022-07-21T21:21:24Z",
      "updated_at": "2022-07-21T21:21:24Z"
    }
  ],
  "created_at": "2019-07-26T12:08:04Z",
  "labels": [
    "Issue-Question",
    "WG-Engine"
  ],
  "number": 10231,
  "state": "open",
  "title": "Subclassing ValueType with custom constructor crashes with internal CLR error",
  "updated_at": "2022-07-21T21:22:19Z"
}