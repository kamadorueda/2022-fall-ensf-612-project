{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13660",
  "author": "PrzemyslawKlys",
  "body": "There seems to be an oversight of what ConvertTo-JSON allows when it comes to nesting. Since the default value is 2 (not 0) it's impossible to set it to 0, as minimal value is 1.  \r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\n[PSCustomObject] @{\r\n    Test  = 1\r\n    Test2 = 2\r\n    Test3 = [PSCustomObject] @{\r\n        IdontWantThat = 1\r\n    }\r\n} | ConvertTo-Json -Depth 0\r\n```\r\n\r\n## Expected behavior\r\n\r\n```powershell\r\n[PSCustomObject] @{\r\n    Test  = 1\r\n    Test2 = 2\r\n    Test3 = [PSCustomObject] @{\r\n        IdontWantThat = 1\r\n    }\r\n} | ConvertTo-Json -Depth 0\r\n```\r\n\r\nShould be:\r\n```\r\n{\r\n\"Test\":\"1\",\r\n\"Test2\":\"2\",\r\n\"Test3\":\"@{IDontWantThat=1}\"}\r\n```\r\nor similar\r\n\r\n## Actual behavior\r\n\r\n```none\r\n[PSCustomObject] @{\r\n    Test  = 1\r\n    Test2 = 2\r\n    Test3 = [PSCustomObject] @{\r\n        IdontWantThat = 1\r\n    }\r\n} | ConvertTo-Json -Depth 0\r\n```\r\n\r\n```none\r\nConvertTo-Json : Cannot validate argument on parameter 'Depth'. The 0 argument is less than the minimum allowed range of 1. Supply an argument that is greater than or equal to 1 and then try the command again.\r\n```\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\n\r\n```\r\n",
  "closed_at": "2021-04-09T02:53:27Z",
  "comments": [
    {
      "author": "kvprasoon",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov  Are we okay to change min to 0 ?\r\n",
      "created_at": "2020-09-24T16:32:15Z",
      "updated_at": "2020-09-24T16:32:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I hope we will to move to new .Net JSON API in next milestone (7.2 LTS). In the time we will review all JSON cmdlet's issues. I expect we will get many minor and major (breaking) changes.\r\n\r\nIf the request is to make a shift 1->0, 2->1 and so on it is a breaking change. I don't see a value in the change as standalone but among many other breaking changes, this could be favored.\r\n",
      "created_at": "2020-09-25T04:01:11Z",
      "updated_at": "2020-09-25T04:01:11Z"
    },
    {
      "author": "kvprasoon",
      "author_association": "CONTRIBUTOR",
      "body": "I think the request is just only to make min depth value to 0.",
      "created_at": "2020-09-25T05:19:47Z",
      "updated_at": "2020-09-25T05:20:19Z"
    },
    {
      "author": "PrzemyslawKlys",
      "author_association": "NONE",
      "body": "Yep, the request is allow 0 instead of 1 as minimum value. Pretty sure it's not breaking change as long as it behaves correctly. ",
      "created_at": "2020-09-25T06:30:18Z",
      "updated_at": "2020-09-25T06:30:18Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, allowing a lower minimum shouldn't break anything.",
      "created_at": "2020-09-25T17:18:54Z",
      "updated_at": "2020-09-25T17:18:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "With Depth 2 we get\r\n```\r\n{\r\n  \"Test\": 1,\r\n  \"Test2\": 2,\r\n  \"Test3\": {\r\n    \"IdontWantThat\": 1\r\n  }\r\n}\r\n```\r\nWith Depth 1\r\n```\r\n{\r\n  \"Test\": 1,\r\n  \"Test2\": 2,\r\n  \"Test3\": {\r\n    \"IdontWantThat\": 1\r\n  }\r\n}\r\n```\r\nSo with Depth 0:\r\n```\r\n{\r\n}\r\n```",
      "created_at": "2020-09-25T17:23:26Z",
      "updated_at": "2020-09-25T17:23:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Yeah, allowing a lower minimum shouldn't break anything.\r\n\r\nIt seems we already discussed this - truncating is data lost - it is bad.",
      "created_at": "2020-09-25T17:25:16Z",
      "updated_at": "2020-09-25T17:25:16Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Depth 0 should have:\r\n```\r\n{\r\n  \"Test\": 1,\r\n  \"Test2\" : 2,\r\n  \"Test3\": \"{IdontWantThat=1}\"\r\n}\r\n```\r\n\r\nAs for truncating data, sure. This is an opt in mechanism. Nothing existing will break.",
      "created_at": "2020-09-25T17:26:03Z",
      "updated_at": "2020-09-25T17:26:23Z"
    },
    {
      "author": "kvprasoon",
      "author_association": "CONTRIBUTOR",
      "body": "Depth 0 with code change has\r\n```\r\n{\r\n  \"Test\": 1, \r\n  \"Test2\": 2,\r\n  \"Test3\": \"@{IdontWantThat=1}\"\r\n}\r\n```",
      "created_at": "2020-09-25T17:34:55Z",
      "updated_at": "2020-09-25T17:34:55Z"
    },
    {
      "author": "PrzemyslawKlys",
      "author_association": "NONE",
      "body": "I am using ConvertTo-Json to generate javascript data. \r\n\r\n```powershell\r\n$Data = [PSCustomObject] @{\r\n    Test  = 1\r\n    Test2 = 2\r\n    Test3 = [PSCustomObject] @{\r\n        IdontWantThat = 1\r\n    }\r\n}\r\n\r\nNew-HTML {\r\n    New-HTMLTable -DataTable $Data -DataStore JavaScript\r\n} -FilePath $Env:USERPROFILE\\Desktop\\test.html -ShowHTML\r\n```\r\n\r\nAside from having unusable data - that is not displayed anyway, the file size gets much larger. \r\n\r\n![image](https://user-images.githubusercontent.com/15063294/94298539-9cc31880-ff66-11ea-9fb3-a4fbcb3bcdf8.png)\r\n\r\nI've rolled out my own ConvertTo-JsonLiteral which solves this in 5.1 but I would appreciate the issue being fixed in PowerShell 7 so in the future users can decide what to do. \r\n\r\nThis is how it looks inside HTML\r\n![image](https://user-images.githubusercontent.com/15063294/94298951-3ee30080-ff67-11ea-898e-a7f0600de437.png)\r\n\r\nAs @vexx32 said this is opt-in so no loss of data unless you specifically ask for it. One could argue that putting default at 2, makes anything over 2 at the same disadvantage as having 0 for nesting of 1. ",
      "created_at": "2020-09-25T17:44:49Z",
      "updated_at": "2020-09-25T17:44:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What is an output difference in Depth 0 and Depth 1?",
      "created_at": "2020-09-27T18:12:03Z",
      "updated_at": "2020-09-27T18:12:03Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Depth 1:\r\n```\r\n{\r\n  \"Test\": 1,\r\n  \"Test2\": 2,\r\n  \"Test3\": {\r\n    \"IdontWantThat\": 1\r\n  }\r\n}\r\n```\r\n\r\nDepth 0:\r\n```\r\n{\r\n  \"Test\": 1, \r\n  \"Test2\": 2,\r\n  \"Test3\": \"@{IdontWantThat=1}\"\r\n}\r\n```",
      "created_at": "2020-09-27T18:20:26Z",
      "updated_at": "2020-09-27T18:20:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 Thanks! I don't see a value in this. From other discussions current intention is to follow new .Net API behavior - remove default depth, throw on truncating by default.",
      "created_at": "2020-09-27T18:27:32Z",
      "updated_at": "2020-09-27T18:27:32Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "\ud83e\udd37 clearly someone does, or we wouldn't have this issue. \ud83d\ude02 ",
      "created_at": "2020-09-27T18:30:07Z",
      "updated_at": "2020-09-27T18:30:07Z"
    },
    {
      "author": "PrzemyslawKlys",
      "author_association": "NONE",
      "body": "It's even worse for DateTime...\r\n\r\n```powershell\r\n[PSCustomObject] @{\r\n    Test  = 1\r\n    Test2 = 2\r\n    Test3 = [PSCustomObject] @{\r\n        IdontWantThat = Get-Date\r\n    }\r\n} | ConvertTo-Json -Depth 1\r\n```\r\n\r\n```\r\n{\r\n    \"Test\":  1,\r\n    \"Test2\":  2,\r\n    \"Test3\":  {\r\n                  \"IdontWantThat\":  {\r\n                                        \"value\":  \"\\/Date(1601231994118)\\/\",\r\n                                        \"DisplayHint\":  2,\r\n                                        \"DateTime\":  \"niedziela, 27 wrze\u015bnia 2020 20:39:54\"\r\n                                    }\r\n              }\r\n}\r\n```\r\n\r\nIt's useless to my use case. While I understand you don't want to truncate data I have no way to show this data in one dimension view outside of PowerShell. It just adds junk that I don't need. \r\n\r\nThis is what my version of ConvertTo-JsonLiteral does\r\n\r\n```\r\n{\r\n\"Test\":1,\r\n\"Test2\":2,\r\n\"Test3\":{\r\n\"IdontWantThat\":\"2020-09-27 20:42:01\"}}\r\n```\r\n\r\nAnd with depth 0\r\n```\r\n{\r\n\"Test\":1,\r\n\"Test2\":2,\r\n\"Test3\":\"@{IdontWantThat=09/27/2020 20:42:27}\"}\r\n```\r\n\r\nAnd this is also an idea for what I would like from New Convert-ToJson. Ability to define DateTime format just like you have added the ability for enum.\r\n\r\n\r\nOutput for Depth 1 for Date or INT:\r\n\r\n![image](https://user-images.githubusercontent.com/15063294/94373035-da5ca880-0102-11eb-9bfe-5b65e1944407.png)\r\n\r\nOutput for Depth 0\r\n\r\n![image](https://user-images.githubusercontent.com/15063294/94373054-0841ed00-0103-11eb-806c-3a16c6712a79.png)\r\n\r\nAt least I can see something and act. I want ConvertTo-JSON to act a bit like ConvertTo-HTML where it does what I'm asking for.",
      "created_at": "2020-09-27T18:50:41Z",
      "updated_at": "2020-09-27T18:52:19Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "What is the value of this behavior?",
      "created_at": "2021-03-22T18:44:51Z",
      "updated_at": "2021-03-22T18:44:51Z"
    },
    {
      "author": "PrzemyslawKlys",
      "author_association": "NONE",
      "body": "I explained it multiple times already - is it not clear? I even responded to your question in the old pull request. I also show the problem above.\r\n\r\n- https://github.com/PowerShell/PowerShell/pull/13700",
      "created_at": "2021-03-22T18:54:47Z",
      "updated_at": "2021-03-22T18:56:25Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@PrzemyslawKlys I see no explanation of the value of the behavior.  Just the fact that it can generate a flat json.  What would you do with the flat json?  Why?  When?\r\n",
      "created_at": "2021-03-23T17:41:10Z",
      "updated_at": "2021-03-23T17:41:10Z"
    },
    {
      "author": "PrzemyslawKlys",
      "author_association": "NONE",
      "body": "@TravisEz13 You already allow setting depth. You also specify it to a default value. I want to be able to choose that. Does `Depth 2` for an object that is nested 5 levels deep is any different than what I requested? \r\n\r\nI already showed you the HTML example above. I have a PowerShell module called [PSWriteHTML](https://github.com/EvotecIT/PSWriteHTML). By default, it uses ConvertTo-HTML which uses depth 0. However, pushing 50k users into HTML makes browsers cry when trying to show it. So I'm using the javascript approach of storing data which prevents autoloading of all 50k rows before displaying them.\r\n\r\n![image](https://user-images.githubusercontent.com/15063294/112193618-5a724f80-8c08-11eb-84fd-7251344cfb9c.png)\r\n\r\nSince JavaScript is very similar to JSON I'm using ConverTo-JSON to store it within an HTML file. I only require flat JSON. While I guess I could store 5 or 10 or 50 levels deep in there it doesn't make sense for me as I want to display it as a Table (so flat storage). Now imagine 50k adobjects objects each having 5 levels deep of which 4 are useless to display. While the display would still work, the size of the generated HTML would go from 80MB to 120 or 160MB in size. I don't need that. \r\n\r\nThis is just one use case. A similar use case is used within the [PSTeams](https://github.com/EvotecIT/PSTeams) Powershell module. I sometimes don't want to get 2 levels deep when I require just 0. \r\n\r\nSince it takes ages to implement this little change I wrote my own `ConvertTo-JSONLiteral` which happens to work in PS5+ and allows me to also define how Arrays are treated (for example join them with defined char), how DateTime is converted - for example to a specific format, how numbers are treated, how enums are treated. I got a greater control for display purposes. \r\n\r\nWhile you specifically are thinking JSON use case is very limited I've found that JSON is really similar to JavaScript or CSS with some exceptions or small changes and I use it frequently in ways you would not expect. I don't care if I lose data, as long as I am doing this explicitly. \r\n\r\n\r\nThis change just adds the ability to go from 0 to 100, not from 1-2 to 100. It's trivial, and just fixes something that should have been there from the beginning. The bigger problem is going to remove the default Depth which is set to 2 now, but it's outside of the scope of this change.",
      "created_at": "2021-03-23T18:05:08Z",
      "updated_at": "2021-03-23T18:05:08Z"
    }
  ],
  "created_at": "2020-09-19T15:22:11Z",
  "labels": [
    "Issue-Question",
    "Resolution-Fixed",
    "WG-Cmdlets-Utility"
  ],
  "number": 13660,
  "state": "closed",
  "title": "ConvertTo-JSON should allow nesting 0",
  "updated_at": "2021-04-09T02:53:42Z"
}