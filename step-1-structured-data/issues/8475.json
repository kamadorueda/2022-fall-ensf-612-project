{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8475",
  "author": "vexx32",
  "body": "`using module` _only_ works on modules in $env:PSModulePath, i.e., it is _impossible_ to target already-loaded modules.\r\n\r\nThis can be frustrating when developing and testing modules that make use of custom types in some shape or form that expect them to be exportable from the module.\r\n\r\n# Steps to reproduce\r\n\r\n## Create two files\r\n\r\n1. A simple module file defining a custom attribute. Save as `TestModule.psm1`\r\n\r\n```powershell\r\nclass CustomAttribute : Attribute {\r\n    CustomAttribute() {}\r\n}\r\n```\r\n\r\n2. A file with script-level attribute and `using module` attached. Save as `BrokenFile.ps1`\r\n\r\n```powershell\r\nusing module TestModule\r\n[Custom()]\r\nparam()\r\n\r\nWrite-Host \"hello!\"\r\n```\r\n\r\n## Attempt to have PowerShell parse the file\r\n\r\nWe can use `Get-Command` for this; if the parse fails, the resulting object's `ScriptBlock` property is empty.\r\n\r\n```\r\nPS> Import-Module .\\TestModule.psm1\r\nPS> $Command = Get-Command .\\BrokenFile.ps1\r\nPS> $Command.ScriptBlock\r\n```\r\n\r\n# Expected behavior\r\n\r\nThe scriptblock property should be populated, and output the contents to console, as the `using module`  directive is targeting a named module already loaded in the current session.\r\n\r\n```none\r\nPS> $Command.ScriptBlock\r\nusing module TestModule\r\n[Custom()]\r\nparam()\r\n\r\nWrite-Host \"hello!\"\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nPS> $Command.ScriptBlock\r\n<no output>\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n/cc @rjmholt ",
  "closed_at": null,
  "comments": [
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Absolute path should work.\r\n\r\nWe will need to loop in @lzybkr, @daxian-dbw and @brucepay, because this may be by-design behaviour. `using module` may be deliberately intended for runtime-state-invariant behaviour.",
      "created_at": "2018-12-17T16:17:55Z",
      "updated_at": "2018-12-17T16:17:55Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I can understand if that is the intent, however I would probably think that sort of behaviour may be better reserved for strict-mode states only, perhaps?\r\n\r\nWould be nice to be able to `using module` in development environments, at least, without having to edit PSModulePath or actually install the module \u2014 **especially** because there isn't really another way to do this sort of thing (apart from dot-sourcing, I guess, but that is a bit too much for most use cases)",
      "created_at": "2018-12-17T16:22:13Z",
      "updated_at": "2018-12-17T17:00:31Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "`using module` should support relative paths but not non-constant paths.\r\n\r\nI think we discussed allowing `using module $PSScriptRoot\\whatever` but decided it wasn't necessary as the language constructed was defined to look for paths relative to the file as though you'd used `$PSScriptRoot` **and** allowing a variable implied you could use non-constant paths.",
      "created_at": "2018-12-17T18:23:30Z",
      "updated_at": "2018-12-17T18:23:30Z"
    }
  ],
  "created_at": "2018-12-16T20:50:22Z",
  "number": 8475,
  "state": "open",
  "title": "`using module` fails to check already-loaded modules for available custom types",
  "updated_at": "2018-12-17T18:30:47Z"
}