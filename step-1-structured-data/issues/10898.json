{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10898",
  "author": "daxian-dbw",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nImprove processing of the powershell built-in type data from `types.ps1xml`, `typesV3.ps1xml` and `GetEvent.types.ps1xml`.\r\n\r\nA few changes to speed up the processing of the built-in PowerShell type data.\r\n1. Refactor `TypeTable.cs` a little to make it more efficiently at collection allocations.\r\n    - Remove a few internal methods that are not used anywhere.\r\n    - Update some code that does collection allocations to use a specific capacity, so as to avoid resizing or wasted allocations.\r\n    - Add an new overload to `ProcessStandardMembers`, which takes an instance of `PSMemberInfoInternalCollection<PSMemberInfo>` directly that contains the standard members.\r\n    - Separate out `ProcessTypeConverter` and `ProcessTypeAdapter` from `ProcessTypeDataToAdd`.\r\n2. Add two overloads constructors to `PSMemberSet` and `PSPropertySet` that are used from `TypeTable`, which skip argument checks and reuse the passed in collection argument.\r\n3. Generate code to register the built-in type information directly to the `TypeTable` without going through the `TypeData` representation as the intermediate step.\r\n    - Currently the type information is represented by `TypeData` objects constructed in `Types_Ps1Xml`, `TypesV3_Ps1Xml` and `GetEvent_Types_Ps1Xml`. Then the `TypeData` objects are processed by `TypeTable.ProcessTypeDataToAdd` one by one.\r\n    - I wrote a tool to go through the `TypeData` objects from `Types_Ps1Xml.Get()`, `TypesV3_Ps1Xml.Get()` and `GetEvent_Types_Ps1Xml.Get()` and generate the code that directly register the type information into `TypeTable`, so we can get rid of the intermediate step.\r\n    - The tool can be found [here](https://github.com/PowerShell/PowerShell/pull/10898/commits/94f8cf65e7bab137e75084585f7a41d344ca2224#diff-7288d104358d798705e4f6eb22392a9cR167). It's in one of the commits here, but was removed in a later commit as part of the cleanup work.\r\n    - The new code are in `TypeTable_Types_Ps1Xml.cs`, `TypeTable_Types_TypesV3_Ps1Xml.cs` and `TypeTable_GetEvent_Types_Ps1Xml`. `TypeTable` is now declared as partial class, and spread in `TypeTable.cs` and the aforementioned 3 files.\r\n4. Some more minor optimizations to the generated code, for example, use the cached `ValueFactory` delegate instance instead of create a new one for every duplicate one.\r\n\r\nAfter this change, creating a default `TypeTable` instance those 3 built-in PowerShell type files takes about 47% less time at a stable state.\r\n```none\r\n### 7.0.0-preview.5\r\nPS> [string[]] $file = @(\"$PSHOME\\types.ps1xml\", \"$PSHOME\\typesv3.ps1xml\", \"$PSHOME\\GetEvent.types.ps1xml\")\r\n>> Measure-Command { foreach($i in 1..100) { [System.Management.Automation.Runspaces.TypeTable]::new($file) } }\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 0\r\nMilliseconds      : 150\r\nTicks             : 1501009\r\nTotalDays         : 1.73727893518519E-06\r\nTotalHours        : 4.16946944444444E-05\r\nTotalMinutes      : 0.00250168166666667\r\nTotalSeconds      : 0.1501009\r\nTotalMilliseconds : 150.1009\r\n```\r\n```none\r\n### After Change\r\nPS> [string[]] $file = @(\"$PSHOME\\types.ps1xml\", \"$PSHOME\\typesv3.ps1xml\", \"$PSHOME\\GetEvent.types.ps1xml\")\r\n>> Measure-Command { foreach($i in 1..100) { [System.Management.Automation.Runspaces.TypeTable]::new($file) } }\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 0\r\nMilliseconds      : 82\r\nTicks             : 827806\r\nTotalDays         : 9.58108796296296E-07\r\nTotalHours        : 2.29946111111111E-05\r\nTotalMinutes      : 0.00137967666666667\r\nTotalSeconds      : 0.0827806\r\nTotalMilliseconds : 82.7806\r\n```\r\n`Runspace.Open()` is about 10% faster with the change at a stable state:\r\n```\r\n### 7.0.0-preview.5\r\nPS> $iss = [initialsessionstate]::CreateDefault()\r\n>> Measure-Command { foreach($i in 1..100) { $rs = [runspacefactory]::CreateRunspace($iss); $rs.Open(); $rs.Dispose() } }\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 0\r\nMilliseconds      : 495\r\nTicks             : 4954424\r\nTotalDays         : 5.73428703703704E-06\r\nTotalHours        : 0.000137622888888889\r\nTotalMinutes      : 0.00825737333333333\r\nTotalSeconds      : 0.4954424\r\nTotalMilliseconds : 495.4424\r\n```\r\n\r\n```\r\n### After Change\r\nPS> $iss = [initialsessionstate]::CreateDefault()\r\n>> Measure-Command { foreach($i in 1..100) { $rs = [runspacefactory]::CreateRunspace($iss); $rs.Open(); $rs.Dispose() } }\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 0\r\nMilliseconds      : 442\r\nTicks             : 4428146\r\nTotalDays         : 5.12516898148148E-06\r\nTotalHours        : 0.000123004055555556\r\nTotalMinutes      : 0.00738024333333333\r\nTotalSeconds      : 0.4428146\r\nTotalMilliseconds : 442.8146\r\n```\r\n\r\n**Memory allocation comparison**\r\nThe profiling was taken using `pwsh.exe -noprofile -c exit`. The left side was built from master branch before this PR. The right side was built with the changes in this PR.\r\n\r\nAs the image below shows, the right side has less memory allocations in general.\r\n\r\n![image](https://user-images.githubusercontent.com/127450/67889388-fbd89d00-fb0b-11e9-820e-f47154eb3d98.png)\r\n\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2019-11-01T17:36:06Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@PoshChan Please retry windows",
      "created_at": "2019-10-28T17:51:46Z",
      "updated_at": "2019-10-28T17:51:46Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw, successfully started retry of `PowerShell-CI-Windows`",
      "created_at": "2019-10-28T17:52:12Z",
      "updated_at": "2019-10-28T17:52:12Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@PoshChan Please retry Linux and macOS",
      "created_at": "2019-10-28T23:38:31Z",
      "updated_at": "2019-10-28T23:38:31Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw, I do not understand the build target(s) `Linux and macOS`; I only allow `static`, `windows`, `macos`, `linux`, `all`",
      "created_at": "2019-10-28T23:39:02Z",
      "updated_at": "2019-10-28T23:39:02Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@PoshChan Please retry Linux",
      "created_at": "2019-10-28T23:42:56Z",
      "updated_at": "2019-10-28T23:42:56Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@PoshChan Please retry macos",
      "created_at": "2019-10-28T23:43:06Z",
      "updated_at": "2019-10-28T23:43:06Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw, successfully started retry of `PowerShell-CI-Linux`",
      "created_at": "2019-10-28T23:43:23Z",
      "updated_at": "2019-10-28T23:43:23Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw, successfully started retry of `PowerShell-CI-macOS`",
      "created_at": "2019-10-28T23:43:24Z",
      "updated_at": "2019-10-28T23:43:24Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Almost 90% of the CodeFactor issues are existing ones in `TypeTable.cs`. The rest are complaining using `#region`/`#endregion` in the generated code, which can be ignored (maybe disable that rule?).",
      "created_at": "2019-10-28T23:46:43Z",
      "updated_at": "2019-10-28T23:46:43Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@PoshChan Please retry macOS",
      "created_at": "2019-10-29T23:25:57Z",
      "updated_at": "2019-10-29T23:25:57Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw, successfully started retry of `PowerShell-CI-macOS`",
      "created_at": "2019-10-29T23:26:22Z",
      "updated_at": "2019-10-29T23:26:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw I expect that the PR reduce significantly allocations. Can you share PerfView info in the PR description if you have?",
      "created_at": "2019-10-30T03:43:29Z",
      "updated_at": "2019-10-30T03:43:29Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov I added the PrefView screenshot. With the changes in this PR, the memory allocation is less in general.",
      "created_at": "2019-10-30T19:02:45Z",
      "updated_at": "2019-10-30T19:02:45Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Is it not possible to speed up the public api?\r\n\r\nOne of the motivations for using the public api was to enable external modules to load their types in a similar manner.\r\nAnother motivation was to avoid adding features that can't be expressed via the public api. This was a big problem with remoting.\r\n\r\nWe could share the source to the tool I wrote to convert a ps1xml file to the public C# api.",
      "created_at": "2019-10-31T21:48:53Z",
      "updated_at": "2019-10-31T21:48:53Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> Is it not possible to speed up the public api?\r\n\r\n@lzybkr Are you referring to the `TypeData` and the related types?\r\nWe possibly can improve the code that processing `TypeData`, but `TypeData` and its family types themselves are essentially just property bags that don't have much room for improvement.\r\nThe current way of handling built-in type information uses the `TypeData` representation as an intermediate layer, which can be removed to get improved processing of the built-in type info.\r\n\r\nI strongly agree it's important that the `TypeData` should always be updated when new type members are introduced in future, and I think that can be enforced by the `Get-TypeData` command, because any new type members should be reflected by the `TypeData` objects returned from `Get-TypeData`, and similarly, `TypeTable` should be able to handle those `TypeData` objects when they are used in `Update-TypeData`, or in `InitialSessionState` for creating a new Runspace.",
      "created_at": "2019-11-01T00:10:03Z",
      "updated_at": "2019-11-01T00:13:40Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@daxian-dbw Have you reviewed CodeFactor issues? All of them in old code?",
      "created_at": "2019-11-01T17:18:30Z",
      "updated_at": "2019-11-01T17:18:30Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@adityapatwardhan I have reviewed all CodeFactory issues. 90% of them are about the existing code in `TypeTable.cs`, and the rest are complaining about having `#region/#endregion` in the methods, which can be ignored.",
      "created_at": "2019-11-01T17:25:20Z",
      "updated_at": "2019-11-01T17:25:20Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.0.0-preview.6` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.6)\n",
      "created_at": "2019-11-21T22:35:51Z",
      "updated_at": "2019-11-21T22:35:51Z"
    }
  ],
  "created_at": "2019-10-25T21:32:24Z",
  "number": 10898,
  "state": "closed",
  "title": "Improve processing of the powershell built-in type data from 'types.ps1xml', 'typesV3.ps1xml' and 'GetEvent.types.ps1xml'",
  "updated_at": "2019-11-21T22:35:51Z"
}