{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7897",
  "author": "kvprasoon",
  "body": "I know we are fixing performance issues here and there. Below is one observation from @JBorean when using PSCore via ansible.\r\n\r\nhttps://github.com/ansible/ansible/issues/46300#issuecomment-425682646",
  "closed_at": "2018-10-02T23:59:03Z",
  "comments": [
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "cc me @jborean93",
      "created_at": "2018-09-30T08:56:18Z",
      "updated_at": "2018-09-30T08:56:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Please add more information and repo steps. (It seems I guess what the problem is, but everyone should clearly see this and understand if we want to resolve it)",
      "created_at": "2018-09-30T18:20:47Z",
      "updated_at": "2018-09-30T18:20:47Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "No worries, the easiest way for you to test this right now is to install the latest release candidate for [Ansible 2.7](https://pypi.org/project/ansible/2.7.0rc4/). You have to use the release candidate or checkout straight from devel as the `psrp` connection plugin was only recently added.\r\n\r\nFrom there create a file called `inventory.ini` with the following contents;\r\n\r\n```\r\n[windows]\r\nwindows-server\r\n\r\n[windows:vars]\r\nansible_user=username\r\nansible_password=password\r\nansible_connection=psrp\r\nansible_port=5986\r\n# only needed if using https (port 5986) and self signed certs\r\nansible_psrp_cert_validation=ignore\r\n\r\n# if you want to use basic auth for a more stable timing test add the following\r\nansible_psrp_auth=basic\r\n```\r\n\r\nFrom there you can test out the timings with the following commands\r\n\r\n```\r\n# test out against the Microsoft.PowerShell (PSDesktop) endpoint\r\ntime ansible -i inventory.ini windows -m win_ping\r\n\r\n# out out against the PowerShell.6 (PSCore) endpoint\r\ntime ansible -i inventory.ini windows -m win_ping -e ansible_psrp_configuration_name=PowerShell.6\r\n```\r\n\r\nI found that there was roughly a .5 second slowdown when working against the PSCore configuration. I was also able to replicate this when using the basic winrm connection plugin and changing the PS executable called to the PSCore one and it was also slower than PSDesktop.\r\n\r\nI'm unsure what the cause is and this was very preliminary tests that I ran but it was consistent.",
      "created_at": "2018-10-01T10:17:50Z",
      "updated_at": "2018-10-01T10:17:50Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@jborean93 Thanks for repo with Ansible but it will be more easy for MSFT team and community to investigate the problem with repo steps on pure PowerShell. Do you use New-PSSession cmdlet?",
      "created_at": "2018-10-01T11:07:16Z",
      "updated_at": "2018-10-01T11:07:16Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "I do but I haven't really gone into testing it with the native PS cmdlets, I was merely commenting on the other issue that I came across some performance issues when using PSCore. I was asked to provide some reproducers and that's all I have right now.\r\n\r\nWhile I agree reproducing this using the native cmdlets is the next step, so far I've merely observed running an Ansible command over the `PowerShell.6` endpoint compared to the `Microsoft.PowerShell` is slower. This is also true of running a native command through `pwsh.exe` vs `powershell.exe`.\r\n\r\nA really simple example is to look at the startup time of pwsh vs powershell;\r\n\r\n```\r\nC:\\Users\\vagrant-domain>C:\\temp\\ptime.exe powershell.exe -NoProfile -NonInteractive -ExecutionPolicy Unrestricted -Command Write-Output abc\r\n\r\nptime 1.0 for Win32, Freeware - http://www.pc-tools.net/\r\nCopyright(C) 2002, Jem Berkes <jberkes@pc-tools.net>\r\n\r\n===  powershell.exe -NoProfile -NonInteractive -ExecutionPolicy Unrestricted -Command Write-Output abc ===\r\nabc\r\n\r\nExecution time: 0.401 s\r\n\r\nC:\\Users\\vagrant-domain>C:\\temp\\ptime.exe pwsh.exe -NoProfile -NonInteractive -ExecutionPolicy Unrestricted -Command Write-Output abc\r\n\r\nptime 1.0 for Win32, Freeware - http://www.pc-tools.net/\r\nCopyright(C) 2002, Jem Berkes <jberkes@pc-tools.net>\r\n\r\n===  pwsh.exe -NoProfile -NonInteractive -ExecutionPolicy Unrestricted -Command Write-Output abc ===\r\nabc\r\n\r\nExecution time: 0.811 s\r\n```\r\n\r\nWe can see that pwsh is ~.4 seconds slower to startup compared to PowerShell. This isn't much but this really adds up in Ansible.",
      "created_at": "2018-10-01T11:27:21Z",
      "updated_at": "2018-10-01T11:38:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> We can see that pwsh is ~.4 seconds slower to startup compared to PowerShell.\r\n\r\n@jborean93 The slower startup issue is investigated by @daxian-dbw at the present time. Can you confirm that this is the only problem or do you see another problem in remoting? Also I still don't understand how Ansible use \"remoting\" - simply start PowerShell on remote host or use PowerShell remoting (PSRP) which you found slower?",
      "created_at": "2018-10-01T13:43:57Z",
      "updated_at": "2018-10-01T13:43:57Z"
    },
    {
      "author": "kvprasoon",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Ansible can use both and the observation is using both the approach.\r\n\r\n@jborean93 ?",
      "created_at": "2018-10-01T19:06:00Z",
      "updated_at": "2018-10-01T19:06:00Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "That's correct we use both methods. Traditionally, the `winrm` connection plugin uses WinRS to create a shell and execute modules with `PowerShell -NoProfile -NonInteractive -ExecutionPolicy Unrestricted -Command -` and we send the module through the stdin pipe of this process. More recently we've added in the `psrp` connection plugin which uses PSRP (over WinRM) to start a Runspace Pool and execute the module over a PowerShell pipeline. Between the 2, `winrm` is what 99% of Windows users use right now as `psrp` is more experimental and quite new. I found that both `winrm` and `psrp` took longer to execute when using the PSCore equivalents, pwsh.exe for winrm and PowerShell.6 for psrp.\r\n\r\nWe created the `psrp` connection plugin as we found that creating a new pool and pipeline was slightly faster than the overhead that WinRS has. There are also other issues in the Python WinRM library that `winrm` uses which `psrp` is designed to overcome but that's unrelated to this conversation. We are also looking into persisted connections so we can share the pool between Ansible tasks to speed up execution even more but have hit some roadblocks in Ansible itself that has stopped us so far.",
      "created_at": "2018-10-01T19:43:35Z",
      "updated_at": "2018-10-01T19:43:35Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@jborean93 Thanks for clarify!\r\n\r\n> I found that both winrm and psrp took longer to execute when using the PSCore equivalents, pwsh.exe for winrm and PowerShell.6 for psrp.\r\n\r\n/cc @PaulHigin @SteveL-MSFT  for your information.",
      "created_at": "2018-10-02T04:43:51Z",
      "updated_at": "2018-10-02T04:43:51Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "When you use the term \"psrp\", I assume you mean the OMI/WinRM bridge for Linux platforms?  \"PSRP\" is for PowerShell Remoting Protocol and is implementation dependent.  It is unfortunate that psrp is also used for the OMI implementation, which causes confusion.\r\n\r\nAnyway, OMI/WinRM is not supported on Windows PowerShell, only on PSCore6.  If you are seeing a performance difference using WinRM (Windows platform only) based PowerShell remoting between Windows PowerShell and PSCore6, then that certainly needs investigating.  But I expect OMI/WinRM to be noticeably slower than WinRM since it includes another translation layer.",
      "created_at": "2018-10-02T22:08:17Z",
      "updated_at": "2018-10-02T22:08:17Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "When I say psrp I mean a Python library that uses the PSRP layer over WinRM/WSMan to open a runspace pool. The performance issue seems apparent when running the powershell.exe vs pwsh.exe executables locally so it seems like there is some overhead when starting up the engine.",
      "created_at": "2018-10-02T22:19:39Z",
      "updated_at": "2018-10-02T22:19:39Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The startup perf issue is being tracked in https://github.com/PowerShell/PowerShell/issues/6443",
      "created_at": "2018-10-02T23:44:53Z",
      "updated_at": "2018-10-02T23:44:53Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Thanks @SteveL-MSFT, feel free to close this issue if it's being tracked elsewhere. We don't have any immediate plans to official support PSCore but can always come back in the future if there's still a performance hit.",
      "created_at": "2018-10-02T23:52:43Z",
      "updated_at": "2018-10-02T23:52:43Z"
    }
  ],
  "created_at": "2018-09-30T08:16:33Z",
  "number": 7897,
  "state": "closed",
  "title": "Perf issues in PSCore",
  "updated_at": "2018-10-02T23:59:03Z"
}