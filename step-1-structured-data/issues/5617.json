{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5617",
  "author": "dantraMSFT",
  "body": "Various SAL annotations were either incorrect or not backed up by code. This PR address these issues.\r\n\r\nNOTE: By default, Start-BuildNativeWindowsBinaries does not enable code analysis and issues detected by SAL annotations are not reported.  To identify these issues, run Start-BuildNativeWindowsBinaries to generate the solution and vcxproj files.  Launch a Visual Studio developer prompt,  cd to src\\powershell-native and run msbuild manually. \r\n\r\n```\r\nmsbuild PowerShellNative.sln /p:RunCodeAnalysis=true /p:Configuration=RelWithDebInfo /p:Platform=x64\r\n```\r\n\r\nThe following changes address all code analysis warnings:\r\n* GetRegistryInfo in NativeMsh had incorrect out annotations, remove __opt\r\n* Fix handling of various out parameters - check for non-null and initialize\r\n* Update and Align  SAL annotations for GetFormattedErrorMessage overloads\r\n* Allow PluginException to accept NULL message.",
  "closed_at": "2018-01-06T00:53:28Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Note that the `psrp.windows` nuget package needs to be regenerated. Make sure that the binaries are signed before using them to create the nuget package.",
      "created_at": "2017-12-04T19:00:42Z",
      "updated_at": "2017-12-04T19:00:42Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@dantraMSFT  Can you please investigate test failures?",
      "created_at": "2017-12-04T23:26:28Z",
      "updated_at": "2017-12-04T23:26:28Z"
    },
    {
      "author": "dantraMSFT",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13: The failures in these two runs are unrelated to the change; they are timing issues.  I've created https://github.com/PowerShell/PowerShell/issues/5627 to track the issue.",
      "created_at": "2017-12-05T01:08:46Z",
      "updated_at": "2017-12-05T01:08:46Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "I've restarted windows and mac CI.",
      "created_at": "2017-12-05T01:52:01Z",
      "updated_at": "2017-12-05T01:52:01Z"
    },
    {
      "author": "dantraMSFT",
      "author_association": "CONTRIBUTOR",
      "body": "@daxian-dbw: I don't expect to be able to get the nuget package signed and published before I leave for vacation (EOD today).  ",
      "created_at": "2017-12-05T19:34:30Z",
      "updated_at": "2017-12-05T19:34:30Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT @TravisEz13 Can you please reivew this PR to see if it's needed for RC2 or GA?",
      "created_at": "2017-12-06T18:43:18Z",
      "updated_at": "2017-12-06T18:43:18Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@mirichmo Can you please review this PR?",
      "created_at": "2017-12-06T18:49:03Z",
      "updated_at": "2017-12-06T18:49:03Z"
    },
    {
      "author": "dantraMSFT",
      "author_association": "CONTRIBUTOR",
      "body": "@mirichmo: If you take a look at the code again, you'll see that szMessage is used to populate a placeholder error when when GetFormattedErrorMessage fails. It does not truncate an arbitrary error string.\r\n\r\nAs far as a possible leak, there isn't one.\r\n\r\nWhen GetFormattedErrorMessage returns zero; pwszErrorMessage is null and, szMessage is used instead; thus, the delete call only frees memory when pwszErrorMessage is non-null and not szMessage.\r\n\r\nAre you seeing something that I have missed?",
      "created_at": "2017-12-20T01:35:31Z",
      "updated_at": "2018-01-02T23:13:04Z"
    },
    {
      "author": "dantraMSFT",
      "author_association": "CONTRIBUTOR",
      "body": "@mirichmo, @SteveL-MSFT  \r\nI've updated ReportOperationComplete to clarify the stack buffer usage.\r\nAfter another review, I found that GetFormattedErrorMessage was still not reliably returning zero for all error paths.  I've rewritten it to be explicit in each case and avoid the nested If statements by leveraging the existing do/while(false)  construct and moving the localfree call for wszSystemErrorMessage to the end of the function.",
      "created_at": "2018-01-03T22:59:13Z",
      "updated_at": "2018-01-03T22:59:13Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@dantraMSFT Can you open an issue to publish a new package before I merge this so we don't lose the work?",
      "created_at": "2018-01-05T22:29:44Z",
      "updated_at": "2018-01-05T22:29:44Z"
    },
    {
      "author": "dantraMSFT",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13 See https://github.com/PowerShell/PowerShell/issues/5802",
      "created_at": "2018-01-05T22:58:33Z",
      "updated_at": "2018-01-05T22:58:33Z"
    }
  ],
  "created_at": "2017-12-04T18:50:15Z",
  "number": 5617,
  "state": "closed",
  "title": "SAL annotation updates & fix warnings",
  "updated_at": "2018-03-08T19:14:02Z"
}