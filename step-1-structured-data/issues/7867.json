{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7867",
  "author": "mklement0",
  "body": "`-match` is a handy regex-matching operator, but it is limited to finding (at most) _one_ match, as afterwards reflected in the automatic `$Matches` variable (with a scalar LHS) or directly returned (with an array-valued LHS).\r\nAdditionally, the ability to retrieve the matching part of the input and any capture-group values is lost with an array-valued LHS, because `$Matches` is then not populated.\r\n\r\nIn order to find _all_ matches of a given regex, you currently have two options:\r\n\r\n* Pipe to `Select-String -AllMatches`, but that is inefficient for matching (collections of) strings already in memory.\r\n\r\n* Use .NET directly, via the [`[regex]::Matches()`](https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.matches#System_Text_RegularExpressions_Regex_Matches_System_String_System_String_) method, but that makes for an awkward transition from the PowerShell-native `-match` operator.\r\n\r\nTherefore, a `-matchall` (`-imatchall`, `-cmatchall`) operator could be introduced, as a PowerShell-friendly wrapper for the `[regex]::Matches()` method\r\n\r\n```powershell\r\n# WISHFUL THINKING\r\n\r\n# Scalar LHS; returns a collection of 2 matches\r\n'foo' -matchall 'o'\r\n# Array LHS; returns 2 collections of 2 matches each\r\n'foo', 'baa' -matchall 'o|a'\r\n```\r\n\r\ncould be the equivalent of:\r\n\r\n```powershell\r\n# Scalar LHS\r\n[regex]::matches('foo', 'o')\r\n# Array LHS\r\n[regex]::matches('foo', 'o|a'), [regex]::matches('baa', 'o|a')\r\n```\r\n\r\nThat is, the output would be either a single [`[System.Text.RegularExpressions.MatchCollection]`](https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.matchcollection) instance, or an array of them, each of which contains one [`[System.Text.RegularExpressions.Match]`](https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.match) instance _per match_. \r\nA `[System.Text.RegularExpressions.Match]` instance stringifies to the matching part of the input string, if any, and contains capture-group values as well as additional metadata about the match.\r\n\r\nIn essence, this is also what you get when you access the `.Matches` property of the `[Microsoft.PowerShell.Commands.MatchInfo]` instances returned by `Select-String -AllMatches` (though in the case of `Select-String` an `[object[]]` array of `[System.Text.RegularExpressions.Match]` is returned instead of a `[System.Text.RegularExpressions.MatchCollection]`  instance).\r\n\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\nWritten as of:\r\n\r\n```powershell\r\nPowerShell Core 6.1.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "100% yes, this would be awesome to have!",
      "created_at": "2018-09-26T15:29:31Z",
      "updated_at": "2018-09-26T15:29:31Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "I agree!  That would be VERY Useful!!\r\n:)",
      "created_at": "2018-09-26T15:45:29Z",
      "updated_at": "2018-09-26T15:45:29Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Just to complete the specification for this:\r\n \r\n1. Everyone is OK with returning the raw match collections and don't expect anything additional being done to the collections/objects correct? (I just want to make sure.) \r\n\r\n2. Question: in the case where there is an array on the LHS, what should be the result type of the collection of `MatchCollection`s?  `Collection<MatchCollection>` ?\r\n\r\n3. The `Matches` method takes up to 4 arguments, including Regex options and a timeout. We should support those as well so it would look like:\r\n```powershell\r\n$strings -matchall 'pattern'[,<options>[,<timeout>]]\r\n```\r\n\r\n4. The \"default\" operator `-matchall`  would be case insensitive unless overridden through options, with `-imatchall` and `-cmatchall` variants. \r\n\r\n5. Not matching is not considered a failure so `$?` is always true afterwards.\r\n\r\n6. `$Matches` is not set by this operator.\r\n\r\n7. TBD - we need to figure out which language modes this operator is available in. Probably the same as `-match` but we should still think about it.\r\n\r\nHave I missed anything?\r\n",
      "created_at": "2018-09-27T22:50:56Z",
      "updated_at": "2018-09-27T22:50:56Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "1. Unless there's something especially useful we could add on, I think the match collections has it pretty well covered.\r\n\r\n2. Yeah, I think that makes some sense. Not sure if you'd want to pack them all in the same collection, but I guess if you needed that you could make it work regardless, so it's safer to have each MatchCollection separated.\r\n\r\n3. Is it worth including an additional argument to just output an array of the matched strings?\r\n\r\n4 & 5. Following established patterns. \ud83d\udc4d \r\n\r\n6. Yep, sensible.\r\n\r\n7. I'd echo the modes available to `-match`; introducing any disparity is liable to create obscure and almost always poorly-documented and poorly-understood edge cases.\r\n\r\nYou missed 8 -- there's a bunch of documentation that'd need to be written up, at least covering probably a brief overview of the object types that it's returning and how to get your precious match strings out, etc. \ud83d\ude09 ",
      "created_at": "2018-09-27T23:23:18Z",
      "updated_at": "2018-09-27T23:23:43Z"
    },
    {
      "author": "p0W3RH311",
      "author_association": "NONE",
      "body": "\r\n```\r\nPS> 'abc' -matchall '(.)'\r\nPS> $matches[0] # abc\r\nPS> $matches[1] # a\r\nPS> $matches[2] # b\r\nPS> $matches[3] # c\r\n```\r\n",
      "created_at": "2018-10-01T21:37:01Z",
      "updated_at": "2018-10-01T21:37:01Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for helping to flesh this out, @BrucePay.\r\n\r\n**Re 1, output type:**\r\n\r\nOutputting a `MatchCollection` instance (loosely speaking, an array of `Match` instances)  is certainly easiest and fastest, but perhaps for consistency with the automatic `$Matches` variable that it should be an _array of `[hashtable]`s_ (whose entry `0` contains the full match, and the other entries the capture-group matches, as in `$Matches`).\r\n\r\nOn the flip side:\r\n\r\n* Not all metadata will be available - but perhaps that won't be a problem in practice.\r\n* `[hashtable]`s, unlike `Match` instances, do not stringify meaningfully, so the individual matches cannot be used as-is in expandable strings - though @vexx32's suggestion of having an option to return strings only could address that (see below).\r\n\r\n**Re 2, collection output type with array-valued LHS:**\r\n\r\nAgain, for consistency, I suggest outputting a regular `[object[]]` array (which, combined with the suggestion above, would yield an array whose elements are hashtable arrays).\r\n\r\n**Re 3, optional operands:**\r\n\r\nMy vote is _not_ to implement the options parameter (and, by extension, the timeout parameter), because it introduces complexity that may be confusing and not worth the effort:\r\n\r\n* For instance, the `IgnoreCase` option could cause confusion with the implied case-insensitivity of `-matchall` and even be at odds with using `-cmatchall`; ditto for `CultureInvariant`.\r\n\r\n* For those in the know, using _inline options_ as _part of the regex_ also provides access to the options (at least the most important ones), if desired (e.g., `` \"a`nb\" -match '(?s)^.*$' `` yielding `$True` due to inline option `(?s)` causing `.` to match newlines too).\r\n\r\n* The timeout option strikes as too obscure a feature to warrant inclusion in PowerShell.\r\n\r\nHowever, @vexx32 's suggestion of introducing an optional operand to return strings only is worth considering:\r\n\r\n@vexx32, can you elaborate on that? Have each match be an array of strings whose 1st element is the overall match, with subsequent elements containing the capture-group matches? Note that you'd lose access to capture-group matches by _name_ that way (if applicable).  \r\nSo with a scalar LHS and multiple matches you'd get an array of string arrays?\r\n\r\n**Re 4, case-insensitivity by default:**\r\n\r\n\ud83d\udc4d\r\n\r\n**Re 5., setting `$?` to `$True`:**\r\n\r\n\ud83d\udc4d- it is consistent with `-match`.\r\n\r\n**Re 6, not setting `$Matches`:**\r\n\r\n\ud83d\udc4d\r\n\r\n\r\n",
      "created_at": "2018-10-02T16:27:26Z",
      "updated_at": "2018-10-02T16:27:26Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@p0W3RH311 \r\n\r\nIndexing into `$Matches` is already being used with `-match` to access the capture-group matches of a _single_ match:\r\n\r\n```powershell\r\nPS> $null = 'abc' -match '(.)'; $matches\r\n\r\nName                           Value\r\n----                           -----\r\n1                              a\r\n0                              a\r\n```\r\n",
      "created_at": "2018-10-02T16:36:41Z",
      "updated_at": "2018-10-02T16:36:41Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 I was thinking that for simplicity it would be lovely to simply have an optional second param or a secondary parameter (e.g., `-rawmatches`/`-rmatchall` perhaps?) that simply outputs an array of matched strings. So, as a very basic example:\r\n\r\n```powershell\r\n$String = \"testing, testing\"\r\n$String -rmatchall '.'\r\n# outputs: @('t', 'e', 's', 't', 'i', 'n', 'g' ...) (etc)\r\n```\r\nThis would allow almost the mirror operation to `-split` where instead of targeting pieces to remove in order to break apart a string, you target pieces you want to keep, and it gives you the pieces in a nice and simple array. \r\n\r\nFor array valued LHS (in *both* this raw-case and the above initial idea) I would defer to `-split`'s default handling of LHS array for consistency. I believe that would generally result in a flat array.\r\n\r\nYou are correct in that having a \"raw matches\" sort of parameter would remove the ability to target matches by name, but if you're using it specifically there's unlikely to be a reason to name your matches.  (You may of course choose to do so regardless for clarity in the regex, but that's another story.) \ud83d\ude04 ",
      "created_at": "2018-10-02T16:37:53Z",
      "updated_at": "2018-10-02T16:38:08Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32:\r\n\r\nGenerally, my vote would be for an _optional operand_ rather than a _new operator_ - aside from avoiding the proliferation of operators, it leaves the door open for implementing _multiple_ alternative output forms.\r\n\r\nYes, returning just strings would be handy, but it sounds like for predictability of processing we'd have to omit capture groups altogether in this case, right? \r\nAnd leave it to users to use the richer default results if they do need capture-group access.\r\n\r\nBut note that we would _almost_ get the same if we passed the `Match` instances out as-is, given that they _stringify_ to what a given match captured in full:\r\n\r\n```powershell\r\n# Would become: 'fo1o2' -matchall '.\\d' | % tostring\r\nPS> [regex]::matches('fo1o2', '.\\d') | % tostring \r\no1\r\no2\r\n```\r\n\r\nIn other words: with a single syntax, you get objects that:\r\n\r\n* in a string context conveniently expand to the full match\r\n* still provide access to capture groups and position information, if needed\r\n\r\nBut, as stated, it would be a departure from how `-match` reports match information in `$Matches`.\r\n\r\nThat said, perhaps we can enhance the type of `$Matches` in a backward-compatible way that would allow use of the same type as  `-matchall` return instances:\r\n\r\n* Make `$Matches` stringify to `$Matches[0]`, i.e., the full match (I don't think anyone will miss the current stringification behavior, which is expansion to literal `'System.Collections.Hashtable'`.)\r\n* Make `$Matches` an _ordered_ dictionary, while we're at it (just so that it _displays_ as expected).\r\n\r\nOf course, this transformation from `Match` instances carries a performance cost.\r\n\r\n---\r\n\r\nAs for producing a flat array with an array LHS: You're right, that is indeed what `-split` does:\r\n\r\n```powershell\r\nPS> ('a,b', 'c,d' -split ',').count\r\n4\r\n```\r\n\r\n",
      "created_at": "2018-10-02T19:06:19Z",
      "updated_at": "2018-10-23T01:10:38Z"
    },
    {
      "author": "ivanshen",
      "author_association": "NONE",
      "body": "Is this issue still available? I would like to work on this issue.",
      "created_at": "2019-11-15T20:02:22Z",
      "updated_at": "2019-11-15T20:02:22Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "It's all yours! \ud83d\udc96 ",
      "created_at": "2019-11-15T20:03:32Z",
      "updated_at": "2019-11-15T20:03:41Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Following up from #11755: If `-matchall` returns `[System.Text.RegularExpressions.Match]` instances (at least by default), you'll also be able to use it indirectly to get detailed information about a _single_ (the first) match, which `-match` with the `$Matches` variable won't give you:\r\n\r\n```powershell\r\nPS> ('hello' -matchall 'e')[0]  # same as: [regex]::Match('hello', 'e')\r\n\r\nGroups   : {0}\r\nSuccess  : True\r\nName     : 0\r\nCaptures : {0}\r\nIndex    : 1\r\nLength   : 1\r\nValue    : e\r\n```\r\n\r\n\r\n",
      "created_at": "2020-02-04T03:27:02Z",
      "updated_at": "2021-03-26T15:46:55Z"
    }
  ],
  "created_at": "2018-09-26T15:13:22Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Language",
    "Hacktoberfest-Accepted"
  ],
  "number": 7867,
  "state": "open",
  "title": "Introduce a -matchall operator that finds *all* regex matches, to complement -match",
  "updated_at": "2021-07-12T21:18:37Z"
}