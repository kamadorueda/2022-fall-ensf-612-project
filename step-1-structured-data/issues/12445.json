{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12445",
  "author": "p0W3RH311",
  "body": "Hi\r\n\r\nin traditional way  if  we want export history:\r\n```\r\n\r\n Get-History | Export-Csv c:\\testing\\history.csv\r\n Import-Csv c:\\testing\\history.csv | Add-History\r\n```\r\nits great but  it will  better if we add  export-History specific for history\r\n\r\nforr example:\r\n```\r\n\r\nExport-History [-Path] <string>  [[-Id] <long[]>] [[-Count] <int>] [-AsXml] [-AsCSV] [<CommonParameters>]\r\n\r\nExport-History [Inputobject]  [-Path] <string>  [[-Id] <long[]>] [[-Count] <int>] [-AsXml] [-AsCSV] [<CommonParameters>]\r\n```\r\n\r\nthis command is  more clean :\r\n```\r\n\r\nPS > get-history -count 5 | export-history -asxml  -path  ./foo.xml\r\nPS> export-history -ascsv  -count 4 -path  ./hh.csv\r\n\r\n```",
  "closed_at": "2020-04-27T00:00:15Z",
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "So. You know that thing in PowerShell where you have small composable cmdlets ? And you put two or more together to get the result you want. That's the reason we don't have Export-Process. Export-Service, Export-AdUser etc. If you need frequently it is the work of a moment to add it to your profile. \r\n\r\n\r\n\r\n ",
      "created_at": "2020-04-23T16:26:25Z",
      "updated_at": "2020-04-23T16:26:25Z"
    },
    {
      "author": "p0W3RH311",
      "author_association": "NONE",
      "body": "@jhoneill \r\n\r\nthanks,\r\n\r\na lots of command have an exportable composite form\r\n\r\n```\r\nPS C:\\> gcm export-*\r\n\r\nCommandType     Name                                               Version    Source\r\n-----------     ----                                               -------    ------\r\nFunction        Export-BCCachePackage                              1.0.0.0    BranchCache\r\nFunction        Export-BCSecretKey                                 1.0.0.0    BranchCache\r\nFunction        Export-ODataEndpointProxy                          1.0        Microsoft.PowerShe\u2026\r\nFunction        Export-ScheduledTask                               1.0.0.0    ScheduledTasks\r\nCmdlet          Export-Alias                                       7.0.0.0    Microsoft.PowerShe\u2026\r\nCmdlet          Export-BinaryMiLog                                 7.0.0.0    CimCmdlets\r\nCmdlet          Export-Certificate                                 1.0.0.0    PKI\r\nCmdlet          Export-Clixml                                      7.0.0.0    Microsoft.PowerShe\u2026\r\nCmdlet          Export-Counter                                     3.0.0.0    Microsoft.PowerShe\u2026\r\nCmdlet          Export-Csv                                         7.0.0.0    Microsoft.PowerShe\u2026\r\nCmdlet          Export-FormatData                                  7.0.0.0    Microsoft.PowerShe\u2026\r\nCmdlet          Export-ModuleMember                                7.0.0.0    Microsoft.PowerShe\u2026\r\nCmdlet          Export-PfxCertificate                              1.0.0.0    PKI\r\nCmdlet          Export-PSSession                                   7.0.0.0    Microsoft.PowerShe\u2026\r\nCmdlet          Export-StartLayout                                 1.0.0.0    StartScreen\r\nCmdlet          Export-TlsSessionTicketKey                         2.0.0.0    TLS\r\nCmdlet          Export-WindowsDriver                               3.0        Dism\r\nCmdlet          Export-WindowsImage                                3.0        Dism\r\n```\r\n\r\n\r\nand this not break the rule you have mentioned ",
      "created_at": "2020-04-23T16:59:43Z",
      "updated_at": "2020-04-23T16:59:43Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "Export-Csv, Export-Clixml are cmdlets for doing the export. \r\n\r\n Export-PSSession are is not the same as Get-PsSession | export-Csv \r\nI don't know every one of those commands from memory, but since you quoted them which `Export-THING` cmdlets are equivalent to  `Get-THING  |  Out-File`  or `Get-THING | export-Csv`\r\n\r\n",
      "created_at": "2020-04-24T13:19:14Z",
      "updated_at": "2020-04-24T13:19:14Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, I'm pretty sure all of those are each a specific format for the data needed or expected.",
      "created_at": "2020-04-24T13:28:18Z",
      "updated_at": "2020-04-24T13:28:18Z"
    },
    {
      "author": "p0W3RH311",
      "author_association": "NONE",
      "body": "@jhoneill \r\n\r\nthen we must delete, for example,  **export-alias** or if its breaking change say its a mistacke from the team of powershell.\r\n\r\nyou have to generalize in all situations",
      "created_at": "2020-04-25T09:53:26Z",
      "updated_at": "2020-04-25T09:56:47Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> you have to generalize in all situations\r\ngeneralization are general. Exceptions are specific. Between them the cover everything. \r\nExport-Alias is not the same as\r\n` get-alias |  export-csv `\r\nor \r\n`get-alias | out-file`\r\nBecause it outputs with a header.  And it has a companion `Import-Alias` which can read that format and skip the header.\r\nIt's value is absolutely tiny and if it were proposed now I imagine it wouldn't be accepted. Taking it out would upset someone. But it certainly doesn't amount to a precedent\r\nGeneralizing would mean every object which has a Get-Thing command should also implement Import-Thing and Export-Thing. \r\n  \r\nTo me this is another case of your use of this _issues_ area not to log an issue which is either a _bug_ or or an _enhancement_ which the project needs to take on but as a _chat_ area for your own knowledge development.  I'll just quietly salute the official team members for being open to this - other projects would ask that such things be taken somewhere else.\r\n",
      "created_at": "2020-04-25T10:51:36Z",
      "updated_at": "2020-04-25T10:51:36Z"
    },
    {
      "author": "p0W3RH311",
      "author_association": "NONE",
      "body": "Hi @jhoneill \r\n\r\n _Generalizing would mean every object which has a Get-Thing command should also implement Import-Thing and Export-Thing._\r\n\r\nno i mean..export-* must be generalize but at the same time must be in a command family like *-alias ...etc. and *-history because history also has a family but which is not complete\r\n\r\nPS C:\\> gcm  -noun history\r\n```\r\n\r\nCommandType     Name\r\n-----------     ----\r\nCmdlet          Add-History\r\nCmdlet          Clear-History\r\nCmdlet          Get-History\r\nCmdlet          Invoke-History\r\n```\r\nif you find that this has no value, others will see the opposite ... everything will have value sooner or later\r\n",
      "created_at": "2020-04-25T11:49:04Z",
      "updated_at": "2020-04-25T11:49:04Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "Sooner or later. Well I think I started with PowerShell in 2006. I worked for Microsoft at the time, and met Jeffrey Snover at Tech-ed before I had any idea who he was. In 14 years - 4 of them still at Microsoft evangelizing PowerShell, through setting up some of the first user groups speaking  at more conferences than I can count. This is the first time someone has expressed any desire for this function. Now OK, I've spent those years talking people who get that it is both OK and expected to join Get-X  to Export-Csv, because there's no built in command for that. \r\n \r\nJust as an aside my prompt has looked something like this for at least 8 or 9 years\r\n![image](https://user-images.githubusercontent.com/16209593/80283339-aa9e1480-870e-11ea-8056-0bebad673f48.png)\r\nThe number is the history number so I can do \\[\\#\\]540[tab] to get a line back, and long before it was in PSreadline it had persistent history so my history starts at 500. \r\n\r\nI have this in my profile which I blogged about in 2012\r\n```powershell \r\nImport-Csv -Path $logfile | Select-Object -last $truncateLogLines  | tee-object -variable history | Add-History -ErrorAction silentlyContinue\r\n$history | Export-Csv -path $logfile -encoding unicode -NoTypeInformation\r\nRemove-Item -Path variable:\\History\r\n```\r\n\r\nAnd my prompt has this \r\n```Powershell\r\n$hid       = $myinvocation.HistoryId\r\nif    ($hid -gt 1 -and -not $debugging) {Get-History -Id ($hid -1 ) | ConvertTo-Csv | Select-Object -last 1 | Add-Content -Encoding ascii -Path $logfile}\r\n```\r\n\r\nSo I have probably called Get-History | convertTo-CSV more times than anyone else alive!\r\nI must have called Add-history tens of thousands of times. So if someone says exporting history needs a special command. No, it does not. \r\n\r\nThey only way to add items to the History is with the Add command. And the only way to delete from the history is with the clear command. (Again if one is a purist removing one item by ID should really be remove-history)\r\nOut of four basic operations Create, read, update, Delete, we have 3 and update doesn't make sense, and then we have invoke you can't do `Get-History | invoke-Command `   (A purist would say Invoke-command is broken and needs fixing). And if you know the ID  \\[\\#\\] ID [tab] [enter] is two fewer keystrokes than [i][h][y][space]id[enter].  The only thing you'd want Invoke to do is run multiple items... \r\nIf you want to find something in the history there isn't a Select-History because you use get-history | where. And so on. \r\nSimilarly we don't have export-service , though often on a server we want a file with a list of services. Do we think the service family is missing a member it has get- new- remove- restart- set- start- stop- suspend- , why no export ? Because it doesn't need it. \r\nLocal user has enable- disable- get- net- remove- rename- set- but - oh, the horror - no export ? Seeing a pattern ? \r\nYou raised aliases , which might go back a  long way to people wanting to share aliases in PS V1 - but there is no Export-PSDrives, or export-Variables ? \r\nAnd if you do have an export-Thing command it's always going to be the wrong format. I do a lot of work on the export- part of the importExcel module. OK not everyone wants their stuff in .XLSx . But people want it in .CSV, XML, HTML, JSON and YAML.  Hence Get | Convertto-Format  or Get | export-Format. \r\n\r\nLike I say, fundamental stuff.  I like to quote this from Snover, and he was talking about what was wrong with piping in unix\r\n_You pipe A to B to C \u2026 because A doesn't do what you want it to do. [Why \u2026?] Because A tightly couples three separate steps into one. A gets a set of objects, it processes those objects, it outputs the objects as text. So, when you say A doesn't do what you want it to do what you're really saying is \u201cI didn't get the right objects\u201d, \u201cI didn't process them the way I wanted to\u201d or \u201cI didn't output them to text the way I wanted to\u201d. So, then piping it to B and C is really the process of trying to take the text and reverse engineer your way back to the beginning of the pipeline to do one of the steps differently. And the heart of PowerShell was [to keep the pipeline model] and output text only when you need to._\r\n\r\nThe founding philosophy is not to do the tight coupling you're asking for. \r\n\r\n\r\n\r\n\r\n \r\n",
      "created_at": "2020-04-25T15:46:22Z",
      "updated_at": "2020-04-25T15:46:22Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-04-27T00:00:14Z",
      "updated_at": "2020-04-27T00:00:14Z"
    }
  ],
  "created_at": "2020-04-23T15:10:07Z",
  "labels": [
    "Issue-Question",
    "WG-Cmdlets",
    "Resolution-Answered"
  ],
  "number": 12445,
  "state": "closed",
  "title": "add  Export-History",
  "updated_at": "2020-04-27T00:00:15Z"
}