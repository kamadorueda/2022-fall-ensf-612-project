{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11287",
  "author": "PrzemyslawKlys",
  "body": "\r\n\r\n\r\n\r\n# Steps to reproduce\r\n\r\n1. Unpack [Test.zip](https://github.com/PowerShell/PowerShell/files/3935105/Test.zip)\r\n2. There's Test.xml in it\r\n3. Content looks like this:\r\n\r\n```xml\r\n<Objs Version=\"1.1.0.1\" xmlns=\"http://schemas.microsoft.com/powershell/2004/04\">\r\n  <Obj RefId=\"0\">\r\n    <TN RefId=\"0\">\r\n      <T>System.Management.Automation.PSCustomObject</T>\r\n      <T>System.Object</T>\r\n    </TN>\r\n    <MS>\r\n      <S N=\"Products and services\">Virtual Machines</S>\r\n      <S N=\"*Non-Regional\">Blank</S>\r\n      <S N=\"North Europe\">Good</S>\r\n      <S N=\"West Europe\">Good</S>\r\n      <S N=\"France Central\">Good</S>\r\n      <S N=\"France South\">Good</S>\r\n      <S N=\"UK West\">Good</S>\r\n      <S N=\"UK South\">Good</S>\r\n      <S N=\"Switzerland North\">Good</S>\r\n      <S N=\"Switzerland West\">Good</S>\r\n      <S N=\"Norway East\">Good</S>\r\n      <S N=\"Norway West\">Good</S>\r\n      <S N=\"\u2021Germany North\">Good</S>\r\n      <S N=\"\u2021Germany West Central\">Good</S>\r\n      <S N=\"*Germany Non-Regional\">Blank</S>\r\n      <S N=\"Germany Central\">Good</S>\r\n      <S N=\"Germany Northeast\">Good</S>\r\n    </MS>\r\n  </Obj>\r\n</Objs>\r\n```\r\n4. Execute\r\n\r\n```powershell\r\n$Import = Import-Clixml -LiteralPath $PSScriptRoot\\Test.xml\r\n$Import | Format-Table -Autosize\r\n$Import | ConvertTo-html -Fragment\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/15063294/70375484-8c21b300-18fe-11ea-8ea7-f44ac7b45aca.png)\r\n\r\n\r\n# Expected behavior\r\n\r\nProper HTML with wildcard not affecting values in 1st column.\r\n\r\n# Environment data\r\n\r\nAffected 5.1, 6.2.3 and 7.0.0-preview 6\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.18362.145\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.18362.145\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n\r\nAnd \r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-preview.6\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-preview.6\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nand\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.3\r\nPSEdition                      Core\r\nGitCommitId                    6.2.3\r\nOS                             Microsoft Windows 10.0.18363 \r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "PrzemyslawKlys",
      "author_association": "NONE",
      "body": "Simpler way to reproduce:\r\n\r\n```powershell\r\n$Test = [PSCustomObject] @{\r\n    \"Products and services\" = \"Virtual Machines\"\r\n    \"*Non-Regional\"         = \"Blank\"\r\n    \"North Europe\"          = \"Good\"\r\n    \"West Europe\"           = \"Good\"\r\n    \"France Central\"        = \"Good\"\r\n    \"France South\"          = \"Good\"\r\n    \"UK West\"               = \"Good\"\r\n    \"UK South\"              = \"Good\"\r\n    \"Switzerland North\"     = \"Good\"\r\n    \"Switzerland West\"      = \"Good\"\r\n    \"Norway East\"           = \"Good\"\r\n    \"Norway West\"           = \"Good\"\r\n    \"\u2021Germany North\"        = \"Good\"\r\n    \"\u2021Germany West Central\" = \"Good\"\r\n    \"*Germany Non-Regional\" = \"Blank\"\r\n    \"Germany Central\"       = \"Good\"\r\n    \"Germany Northeast\"     = \"Good\"\r\n}\r\n$Test | ConvertTo-Html -Fragment\r\n```\r\n\r\nOutput:\r\n\r\n```html\r\n                                                                          <table>\r\n<colgroup><col/><col/><col/><col/><col/><col/><col/><col/><col/><col/><col/><col/><col/><col/><col/><col/><col/></colgroup>\r\n<tr><th>Products and services</th><th>*Non-Regional</th><th>North Europe</th><th>West Europe</th><th>France Central</th><th>France South</th><th>UK West</th><th>UK South</th><th>Switzerland North</th><th>Switzerland West</th><th>Norway East</th><th>Norway West</th><th>\u2021Germany North</th><th>\u2021Germany West Central</th><th>*Germany Non-Regional</th><th>Germany Central</th><th>Germany Northeast</th></tr>\r\n<tr><td>Virtual Machines</td><td>Blank, Blank</td><td>Good</td><td>Good</td><td>Good</td><td>Good</td><td>Good</td><td>Good</td><td>Good</td><td>Good</td><td>Good</td><td>Good</td><td>Good</td><td>Good</td><td>Blank</td><td>Good</td><td>Good</td></tr>\r\n</table>\r\n```",
      "created_at": "2019-12-07T13:50:45Z",
      "updated_at": "2019-12-07T13:51:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Yes, the properties are being processed as Regex.\r\nSo it is not surprise that the second \"Blank\" comes from \"*Germany Non-Regional\" property.\r\nRoot of the issue is that the properties have the same nature as arguments in -Property parameter - it is PSPropertyExpression.\r\nAs result property's names can be executable script. In the case I think we should not escape the calculated property name (and delegate this to the script - we cannot know the author\u2019s intentions\r\n). If the property name is not script but simple literal string we could safely escape it (in InitializeResolvedNameMshParameters() method).\r\nhttps://github.com/PowerShell/PowerShell/blob/bcc565603cee552b10244be82a2797da2ff38cab/src/Microsoft.PowerShell.Commands.Utility/commands/utility/ConvertTo-Html.cs#L384-L386\r\n\r\n/cc @mklement0 What do you think?",
      "created_at": "2019-12-08T18:00:48Z",
      "updated_at": "2019-12-08T18:05:24Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "My understanding of the internals is superficial, but it definitely sounds like the wrong thing to do to subject the actual property names of the input objects to another round of interpretation as wildcard expression (not regexes) when the property _values_ are retrieved.\r\n\r\nTo provide an even simpler repro:\r\n\r\n```powershell\r\nPS> [pscustomobject] @{ '*b'=1; 'a*b' = 2 } | convertto-html -fragment | sls tr\r\n\r\n<tr><th>*b</th><th>a*b</th></tr>\r\n<tr><td>1, 2</td><td>2</td></tr>  # !! Note the `1, 2` in column `*b`\r\n```\r\n\r\nIf I understand correctly, the property _names_  - `*b`, `a*b` - are initially derived from the first input object, and then mistakenly interpreted as wildcard expressions when it comes to extracting the property _values_, so that wildcard expression `*b` extracts the values from _both_ properties, given that both property names match (whereas `a*b` as a wildcard expression only matches `a*b` itself).\r\n",
      "created_at": "2019-12-13T03:15:13Z",
      "updated_at": "2019-12-13T03:15:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> If I understand correctly\r\n\r\nCorrectly.\r\n\r\nI referenced a code above where is two paths. My proposal add the fix only in one code path for strings and leave second one as-is (it is script expressions). Do you see any problems with the second one?",
      "created_at": "2019-12-13T05:07:06Z",
      "updated_at": "2019-12-13T05:07:06Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I think that should be fine - the script-block case should never be hit if the property names are derived from the input objects. I assume you're aware of it, but just to spell it out: You will have to distinguish between property names derived from the input object (literals) and string `-Property` arguments (wildcards).\r\n\r\nThe whole approach sounds convoluted and inefficient, though, but I'm not familiar enough with the code to judge if there's a good reason for that.\r\n",
      "created_at": "2019-12-13T05:21:48Z",
      "updated_at": "2019-12-13T05:21:48Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "There is an additional problem, and it presumably affects all cmdlets that use `PSPropertyExpression`:\r\n\r\nIn the case where you want a `-Property` string argument to be treated as a literal rather than as a wildcard, the usual embedded `` ` ``-escaping doesn't work:\r\n\r\n```powershell\r\n# !! The following two commands do NOT select property '*b' correctly:\r\n@{ '*b'=1; 'a*b' = 2 } | ConvertTo-Html '`*b'\r\n@{ '*b'=1; 'a*b' = 2 } | Select-Object '`*b'\r\n```",
      "created_at": "2019-12-13T05:27:48Z",
      "updated_at": "2019-12-13T05:27:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Yes. I don't know can we fix this in generic way. Perhaps @bpayette could suggest. \r\n- can we always escape if PSPropertyExpression is simple string?\r\n- can we always escape if PSPropertyExpression is a script?",
      "created_at": "2019-12-13T06:03:02Z",
      "updated_at": "2019-12-13T06:03:11Z"
    }
  ],
  "created_at": "2019-12-07T13:36:37Z",
  "number": 11287,
  "state": "open",
  "title": "ConvertTo-HTML incorrectly converting values when 1st column header has wildcard",
  "updated_at": "2019-12-13T06:03:11Z"
}