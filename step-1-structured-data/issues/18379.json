{
  "_url": "https://github.com/PowerShell/PowerShell/issues/18379",
  "author": "alexbuckgit",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nUsing the sample code provided at [Regex.MatchTimeout Property - Remarks](https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.matchtimeout?view=net-6.0#remarks) to set REGEX_DEFAULT_MATCH_TIMEOUT in a console app results in the expected behavior. But when using the same code in a class library and invoking it from PowerShell 7.2.7, REGEX_DEFAULT_MATCH_TIMEOUT is set properly but the value is ignored by Regex operations.\r\n\r\nWhy is this happening?\n\n### Expected behavior\n\n```console\nPS> .\\ConsoleApp.exe\r\n\r\nDefault regex match timeout: 00:00:02\r\nRegular expression pattern: [aeiouy]\r\nTimeout interval for this regex: 2 seconds\n```\n\n\n### Actual behavior\n\n```console\nPS> Import-Module .\\ClassLibrary.dll; [ClassLibrary.Timeout]::SetRegexTimeout()\r\n\r\nDefault regex match timeout: 00:00:02\r\nRegular expression pattern: [aeiouy]\r\nTimeout interval for this regex: -0.001 seconds\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.7\r\nPSEdition                      Core\r\nGitCommitId                    7.2.7\r\nOS                             Microsoft Windows 10.0.22000\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "dwtaber",
      "author_association": "CONTRIBUTOR",
      "body": "I haven't found a more official source directly addressing this point, but [this blog post](https://kendaleiv.com/setting-regex-timeout-globally-using-dotnet-6_0-with-csharp/) seems to explain it:\r\n>[setting the global default timeout] needs to happen as early as possible (first statement in Main would work), prior to any usage of `Regex` that causes this value to be read and cached. Once it\u2019s cached it cannot be changed without restarting the application.\r\n\r\nMore specifically, it looks like once the default timeout value is set, you can still set new values via `domain.SetData` and read those values with `domain.GetData` without throwing errors, but new `Regex` objects won't actually use the new values.  Here's a console app I tested with:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Text.RegularExpressions;\r\n\r\npublic class Example\r\n{\r\n    public static void Main()\r\n    {\r\n        AppDomain domain = AppDomain.CurrentDomain;\r\n\r\n        Console.WriteLine(\"Creating object regexBefore\");\r\n        Regex regexBefore = new Regex(\"foo\");\r\n        Console.WriteLine($\"regexBefore timeout: {regexBefore.MatchTimeout}\\n\");\r\n\r\n        Console.WriteLine(\"Setting to 1 seconds.\");\r\n        domain.SetData(\"REGEX_DEFAULT_MATCH_TIMEOUT\", TimeSpan.FromSeconds(1));\r\n        Console.WriteLine($\"GetData Result: {domain.GetData(\"REGEX_DEFAULT_MATCH_TIMEOUT\")}\\n\");\r\n\r\n        Console.WriteLine(\"Creating object regexAfter\");\r\n        Regex regexAfter = new Regex(\"foo\");\r\n        Console.WriteLine($\"regexAfter timeout: {regexAfter.MatchTimeout}\\n\");\r\n\r\n        Console.WriteLine(\"Setting to 2 seconds.\");\r\n        domain.SetData(\"REGEX_DEFAULT_MATCH_TIMEOUT\", TimeSpan.FromSeconds(2));\r\n        Console.WriteLine($\"GetData Result: {domain.GetData(\"REGEX_DEFAULT_MATCH_TIMEOUT\")}\\n\");\r\n    }\r\n}\r\n\r\n// Output:\r\n// Creating object regexBefore.\r\n// regexBefore timeout: -00:00:00.0010000\r\n// \r\n// Setting to 1 seconds.\r\n// GetData Result: 00:00:01\r\n// \r\n// Creating object regexAfter\r\n// regexAfter timeout: -00:00:00.0010000\r\n// \r\n// Setting to 2 seconds.\r\n// GetData Result: 00:00:02\r\n```\r\n\r\nSo I think what's probably happening is that some private/internal usage of `Regex` causes `REGEX_DEFAULT_MATCH_TIMEOUT` to be cached before your class library has a chance to set it to something else.",
      "created_at": "2022-10-25T23:40:39Z",
      "updated_at": "2022-10-25T23:40:39Z"
    }
  ],
  "created_at": "2022-10-25T18:17:51Z",
  "number": 18379,
  "state": "open",
  "title": "REGEX_DEFAULT_MATCH_TIMEOUT behaves differently in console app vs. class library called via PowerShell",
  "updated_at": "2022-10-25T23:40:40Z"
}