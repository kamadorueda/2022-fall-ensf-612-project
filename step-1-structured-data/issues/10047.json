{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10047",
  "author": "daxian-dbw",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nMake `Foreach-Object` 2x faster by reducing unnecessary allocations and boxing.\r\n\r\n1. Memory profiling of `$null = 1..3e5 | % { 1+1 }` shows huge allocation of ``System.Tuple`2`` and the boxed enum type `S.M.A.ConfigScope`. (See below)\r\nThey are resulted by the policy setting cache we chose for GPO: `ConcurrentDictionary<Tuple<ConfigScope, string>, PolicyBase>`. Every time we query for the GPO policy settings, an instance of `Tuple<ConfigScope, string>` has to be created. The created `Tuple` object is also short-living, only for the querying purpose. When the tuple is used as a key for querying, the enum value gets boxed for equality comparison and hash code calculation, because ``Tuple`2`` uses `EqualityComparer<object>.Default` as the comparer which treat items of the tuple as `object` (see [``Tuple`2.Equals()``](https://source.dot.net/#System.Private.CoreLib/shared/System/Tuple.cs,219) and [``Tuple`2.GetHashCode()``](https://source.dot.net/#System.Private.CoreLib/shared/System/Tuple.cs,259)).\r\nTo avoid those unnecessary allocations, the cache for GPO is changed to `ConcurrentDictionary<ConfigScope, ConcurrentDictionary<string, PolicyBase>>` to avoid using `Tuple` as the key.\r\n\r\n2. Add code in `CompiledScriptBlock.cs` to skip calling `LogScriptBlockCreation` when logging is skipped.\r\n\r\n3. Add a secondary cache for `ScriptBlockLogging` setting in `CompiledScriptBlock.cs` and a secondary cache for `Transcription` setting in `MshHostUserInterface.cs`, because they are used very frequently.\r\n\r\n4. Memory profiling shows `28 mb` allocation of `System.Boolean`. This is caused by passing a bool value to a `object` type parameter when writing tracing message in `ParameterBinder`.\r\n\r\n5. Memory profiling shows `28 mb` allocation of a closure class `<>c_DisplayClass55_0`. This is caused by [this piece of code](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/lang/scriptblock.cs#L978-L989). This is a hot code path and thus results in a lot allocation of the auto-generated closure. The `RunActionIfNoRunningPipelinesWithThreadCheck` method is refactored to avoid passing a delegate around.\r\n\r\n#### Before the changes\r\n\r\n![image](https://user-images.githubusercontent.com/127450/60524110-d55f3e00-9ca0-11e9-93c7-578545f3db99.png)\r\n\r\n```\r\nPS> Measure-Command { 1..1e5 | % { 1+1 } > $null }\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 0\r\nMilliseconds      : 508\r\nTicks             : 5085940\r\nTotalDays         : 5.88650462962963E-06\r\nTotalHours        : 0.000141276111111111\r\nTotalMinutes      : 0.00847656666666667\r\nTotalSeconds      : 0.508594\r\nTotalMilliseconds : 508.594\r\n```\r\n\r\n#### After the changes\r\n\r\n![image](https://user-images.githubusercontent.com/127450/60528874-41926f80-9caa-11e9-852a-fbec2baebb55.png)\r\n\r\n```\r\nPS> Measure-Command { 1..1e5 | % { 1+1 } > $null }\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 0\r\nMilliseconds      : 254\r\nTicks             : 2545267\r\nTotalDays         : 2.94591087962963E-06\r\nTotalHours        : 7.07018611111111E-05\r\nTotalMinutes      : 0.00424211166666667\r\nTotalSeconds      : 0.2545267\r\nTotalMilliseconds : 254.5267\r\n```\r\n\r\n### BUT ...\r\n\r\n```\r\nPS> Measure-Command { 1..1e5 | & { process { 1+1 } } > $null }\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 0\r\nMilliseconds      : 42\r\nTicks             : 426360\r\nTotalDays         : 4.93472222222222E-07\r\nTotalHours        : 1.18433333333333E-05\r\nTotalMinutes      : 0.0007106\r\nTotalSeconds      : 0.042636\r\nTotalMilliseconds : 42.636\r\n```\r\n\r\n`Foreach-Object` is still 4 - 6 times slower than a filter function. This is mainly because:\r\n1. `Foreach-Object` requires parameter binding for pipeline input while a filter function like the above one doesn't.\r\n2. `Foreach-Object` calls into `ScriptBlock.InvokeUsingCmdlet` over and over again for every pipeline input. `InvokeUsingCmdlet` needs to do necessary setups/cleanup before/after invoking the script block and `Foreach-Object` has to pay that tax over and over again. While for a filter, the setup and cleanup is done only once because the invocation stays in the same function.\r\n3. `Foreach-Object` runs the script block in the current scope so the compilation of the script block is un-optimized. While for a filter function, it runs in its own local scope and optimization is turned on.\r\n\r\n### Next Step\r\n\r\nInvestigate to avoid unnecessary parameter binding for pipeline objects by using binders.\r\n\r\n## PR Context\r\n\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n",
  "closed_at": "2019-07-08T17:21:48Z",
  "comments": [
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.0.0-preview.2` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.2)\n",
      "created_at": "2019-07-17T20:55:50Z",
      "updated_at": "2019-07-17T20:55:50Z"
    }
  ],
  "created_at": "2019-07-02T16:38:18Z",
  "number": 10047,
  "state": "closed",
  "title": "Make `Foreach-Object` 2x faster by reducing unnecessary allocations and boxing",
  "updated_at": "2019-07-17T20:55:50Z"
}