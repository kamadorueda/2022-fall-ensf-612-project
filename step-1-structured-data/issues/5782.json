{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5782",
  "author": "SteveL-MSFT",
  "body": "For some scenarios (AzureRM auth or hosted in VS), it may be better to support the SSH ASKPASS model to use a GUI for auth and pass the creds back to PowerShell\r\n\r\nUpdate: Security Working Group\r\nThe scenario discussed with Steve is PowerShell acting like an ask pass implementation during session creation.",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Basically, SSH doesn't support the concept of just sending username/password as it's not considered secure.  The default is to require keyboard-interactive auth which the server (sshd) sends a  prompt back to the client (ssh) and the user types their password.  SSH does have a concept of ASKPASS as a way to prompt for username/password for GUIs (where there isn't a console to receive the prompt).  We could piggy back on this and simply pass the username/password from a PSCredential as though the user typed it.  ",
      "created_at": "2018-10-18T07:14:14Z",
      "updated_at": "2018-10-18T07:14:14Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I think the primary scenario users have been asking for is to be able to use `-Credential` with `-Hostname` (aka SSH).  `ssh` doesn't support a way to pass in username/password, however, it can use the exe pointed to by `SSH_ASKPASS` to prompt for the password and that exe would send that password as cleartext to stdout which `ssh` would receive and use.\r\n\r\nThe `New-PSSession` cmdlet would need a new parameter set for SSH where it's mutually exclusive from `-UserName` called `-Credential`.  At this point, the cmdlet would have both the username and password (as securestring).  To pass that to `ssh`, I think the way to do it is when we [start the `ssh` process](https://github.com/PowerShell/PowerShell/blob/9ea718f1719e54e81ae8c704f9b1bd2357ad90bc/src/System.Management.Automation/engine/remoting/common/RunspaceConnectionInfo.cs#L2099) we need to set the [EnvironmentVariables](https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.processstartinfo.environmentvariables?view=net-5.0) to include `SSH_ASKPASS` to point to `echo` (or equivalent command) where the argument is the password.  `DISPLAY` env var will probably also need to be explicitly set to empty for this process.",
      "created_at": "2021-03-05T19:23:55Z",
      "updated_at": "2021-03-05T19:23:55Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT Can your write a demo script?  How would this be used in PowerShell?  Why would this be better than the existing implementation?",
      "created_at": "2021-03-08T21:52:11Z",
      "updated_at": "2021-03-08T21:52:11Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@TravisEz13 currently, if using SSH-based PowerShell remoting, there is NO `-Credential` parameter and that is what I've seen users request.  Since `ssh` does not accept username/password directly, we need to leverage `SSH_ASKPASS` as the way to pass that through.  Currently you cannot use username/password with SSH-based PowerShell remoting as only keyboard-interactive is currently supported so automation cannot use it.",
      "created_at": "2021-03-09T22:36:41Z",
      "updated_at": "2021-03-09T22:36:41Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT  I still don't understand the scenario we are trying to fix here.  There are too many places that passwords are prompted for and most askpass provides no value.  Can you be more explicit about what we are trying to solve.  `-Credential` on what cmdlet?  From the client or server?  A demo script would be really useful here.\r\n\r\nIf we set `DISPLAY` to empty, we would not have a GUI prompt.  We would have a CLI prompt if the askpass CLI supports it, then the password on stdout.  What would happen then?\r\n",
      "created_at": "2021-03-11T20:25:23Z",
      "updated_at": "2021-03-11T20:25:23Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@TravisEz13 I believe the specific case is:\r\n\r\n```powershell\r\nNew-PSSession -Hostname foo -Credential $cred\r\n```\r\n",
      "created_at": "2021-03-19T23:30:38Z",
      "updated_at": "2021-03-19T23:30:38Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Security Working Group: wrt PowerShell acting like an ask pass implementation during session creation, this seems reasonable\r\n\r\nScenarios\r\n\r\n## Action\r\n\r\n```powershell\r\nNew-PSSession -Hostname foo -Credential $cred\r\n```\r\nThe server is configured to accept credentials and will use askpass.\r\n\r\n## expected\r\n\r\nmaybe SSH can configured to accept the askpass format credentials\r\nand PowerShell can authenticate based on the credentials from `new-psession`\r\n\r\n## Action\r\n\r\nInvestigate if this is possible.",
      "created_at": "2021-04-05T20:51:44Z",
      "updated_at": "2021-04-05T20:51:44Z"
    },
    {
      "author": "G31st",
      "author_association": "NONE",
      "body": "Is there any tracking on this ? 2 years later ? ",
      "created_at": "2021-07-09T14:37:43Z",
      "updated_at": "2021-07-09T14:37:43Z"
    },
    {
      "author": "niko-la-petrovic",
      "author_association": "NONE",
      "body": "Assuming we have a credentials object in `$cred`, for UNIX we can do something like\r\n```bash\r\n# convert $cred.Password to plaintext and store in temp bash script file that echo-es it to stdin\r\nDISPLAY= SSH_ASKPASS=\"$pathToScript\" setsid ssh \"$cred.UserName@$host\"\r\nrm $pathToScript\r\n```\r\nAnd a similar approach for Windows.\r\nHowever, are the security considerations worth this approach?",
      "created_at": "2021-07-10T11:19:46Z",
      "updated_at": "2021-07-10T11:20:07Z"
    }
  ],
  "created_at": "2018-01-03T20:38:01Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Security"
  ],
  "number": 5782,
  "state": "open",
  "title": "Support ASKPASS for credential prompt",
  "updated_at": "2021-07-10T11:20:07Z"
}