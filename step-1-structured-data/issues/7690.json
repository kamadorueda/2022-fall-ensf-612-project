{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7690",
  "author": "felixfbecker",
  "body": "I've recently tried to write a cmdlet that had to use `async` APIs. Doing so turned out to be incredibly difficult, and with help I found an `AsyncCmdlet` class that lets you override `processRecordAsync` etc. as async functions that get `CancellationTokens`:\r\nhttps://github.com/felixfbecker/PSKubectl/blob/master/src/AsyncCmdlet.cs\r\nhttps://github.com/felixfbecker/PSKubectl/blob/master/src/ThreadAffinitiveSynchronizationContext.cs\r\n\r\nCould PowerShell provide this out of the box? ",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@felixfbecker So if I understand you correctly, you'd like to see an in-box variant of the `PSCmdlet` base class possibly called `PSAsyncCmdlet` that lets you write synchronous cmdlets that use asynchronous APIs and the `await` keyword including built-in cancellation support? (Note: cmdlets are always synchronous WRT the pipeline but may have asynchronous implementations). I'm currently working on some stuff to let you do write asynchronous task-based _scripts_ but I don't think this overlaps that. This is really an SDK request instead of an end-user feature - right?",
      "created_at": "2018-09-02T18:59:09Z",
      "updated_at": "2018-09-02T18:59:09Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "Yep",
      "created_at": "2018-09-02T19:00:10Z",
      "updated_at": "2018-09-02T19:00:10Z"
    },
    {
      "author": "jackbond",
      "author_association": "NONE",
      "body": "I found this thread after looking at some .Result instances in our Powershell library. I'm actually amazed that PSAsyncCmdlet doesn't already exist, and that it isn't the default / recommended base class. ",
      "created_at": "2019-04-06T03:06:09Z",
      "updated_at": "2019-04-06T03:06:09Z"
    },
    {
      "author": "michsco",
      "author_association": "NONE",
      "body": "I just ran into the exact same thing. When I tried to implement a solution, it got pretty messy with Tasks blocking when awaiting.",
      "created_at": "2019-04-12T23:43:47Z",
      "updated_at": "2019-04-12T23:43:47Z"
    },
    {
      "author": "henning-krause",
      "author_association": "NONE",
      "body": "I'd like to see this feature as well since more and more libraries are async-only...",
      "created_at": "2019-10-14T19:29:27Z",
      "updated_at": "2019-10-14T19:29:27Z"
    },
    {
      "author": "pcgeek86",
      "author_association": "NONE",
      "body": "Just came across this issue today. Thanks for posting @felixfbecker.",
      "created_at": "2019-12-04T09:20:00Z",
      "updated_at": "2019-12-04T09:20:00Z"
    },
    {
      "author": "tig",
      "author_association": "NONE",
      "body": "Ditto. In my case I am finding weird situations where the pipeline exits when I invoke a method with `await`.",
      "created_at": "2020-03-17T19:10:31Z",
      "updated_at": "2020-03-17T19:10:31Z"
    },
    {
      "author": "tig",
      "author_association": "NONE",
      "body": "This seems to work well. I just submitted a PR to it to use dotnetcore. \r\n\r\nhttps://github.com/ttrider/PowerShellAsync\r\n\r\nMaybe this could be a starting point for official support in PS?\n\n<blockquote><img src=\"https://avatars2.githubusercontent.com/u/2633705?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/ttrider/PowerShellAsync\">ttrider/PowerShellAsync</a></strong></div><div>create async cmdlets for PowerShell. Contribute to ttrider/PowerShellAsync development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2020-03-18T21:01:14Z",
      "updated_at": "2020-03-18T21:01:17Z"
    },
    {
      "author": "tig",
      "author_association": "NONE",
      "body": "> This seems to work well. I just submitted a PR to it to use dotnetcore.\r\n> \r\n> https://github.com/ttrider/PowerShellAsync\r\n> \r\n> Maybe this could be a starting point for official support in PS?\r\n> \r\n> > <img alt=\"\" width=\"48\" src=\"https://avatars2.githubusercontent.com/u/2633705?s=400&amp;v=4\"><img alt=\"\" height=\"14\" src=\"https://camo.githubusercontent.com/4908d9947135e4536ef61d61512ee575f869bf6f/68747470733a2f2f6769746875622e6769746875626173736574732e636f6d2f66617669636f6e2e69636f\"> GitHub**[ttrider/PowerShellAsync](https://github.com/ttrider/PowerShellAsync)**create async cmdlets for PowerShell. Contribute to ttrider/PowerShellAsync development by creating an account on GitHub.\r\n\r\nI take it back. I'm finding `ttrider/PowerShellAsync` actually doesn't work as expected. I'm not savvy enough to debug it. It's pretty easy to repro what I'm experiencing by doing something like this:\r\n\r\n```csharp\r\n        protected override async Task EndProcessingAsync() {\r\n            _cancellationToken = new CancellationTokenSource();\r\n            var version = await ServiceLocator.Current.UpdateService.GetLatestStableVersionAsync(_cancellationToken.Token);\r\n            Debug.WriteLine($\"Version: {version}\");\r\n            var path = await ServiceLocator.Current.UpdateService.StartUpgradeAsync();\r\n            Debug.WriteLine($\"path: {path}\");\r\n            ShouldContinue(\"my message.\", \"Exit this Powershell instance?\");\r\n            Debug.WriteLine($\"done.\");\r\n            await base.EndProcessingAsync();\r\n        }\r\n```\r\n\r\n`ShouldContinue` wedges and \"done\" is never written to the debug console.\r\n\r\nThe two async methods I call are really just wrappers around `WebClient`, so nothing fancy.\n\n<blockquote><img src=\"https://avatars2.githubusercontent.com/u/2633705?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/ttrider/PowerShellAsync\">ttrider/PowerShellAsync</a></strong></div><div>create async cmdlets for PowerShell. Contribute to ttrider/PowerShellAsync development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2020-04-03T04:33:03Z",
      "updated_at": "2020-04-03T04:33:05Z"
    },
    {
      "author": "felixfbecker",
      "author_association": "CONTRIBUTOR",
      "body": "@tig are you seeing the same problem with https://github.com/felixfbecker/PSKubectl/blob/master/src/AsyncCmdlet.cs too? If not, maybe we could use that as a starting point instead.\n\n<blockquote><img src=\"https://avatars3.githubusercontent.com/u/10532611?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/felixfbecker/PSKubectl\">felixfbecker/PSKubectl</a></strong></div><div>kubectl with the power of the object pipeline. Contribute to felixfbecker/PSKubectl development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2020-04-03T08:43:17Z",
      "updated_at": "2020-04-03T08:43:19Z"
    },
    {
      "author": "tig",
      "author_association": "NONE",
      "body": "> @tig are you seeing the same problem with https://github.com/felixfbecker/PSKubectl/blob/master/src/AsyncCmdlet.cs too? If not, maybe we could use that as a starting point instead.\r\n> \r\n\r\nI'll take a look at.\r\n\r\nFor now, FWIW, a bunch of debugging last night gave me SOME insight into the problem with PowerShellAsync, but not enough for me to actually suggest how to fix it.\r\n\r\nIf I do this:\r\n\r\n     var path = await ServiceLocator.Current.UpdateService.StartUpgradeAsync();\r\n     ShouldContinue(\"my message.\", \"Exit this Powershell instance?\");\r\n\r\nThe deadlock happens here:\r\n\r\nhttps://github.com/ttrider/PowerShellAsync/blob/66eb99e33516532749cdd81ced3faf210361a9ee/PowerShellAsync/AsyncCmdlet.cs#L294\r\n\r\nHowever, if I do this:\r\n\r\n     var path = await ServiceLocator.Current.UpdateService.StartUpgradeAsync();\r\n     await Task.Run(() => ShouldContinue(\"my message.\", \"Exit this Powershell instance?\"));\r\n\r\nThat `Wait` doesn't block, but instead the task gets pulled off the queue and invoked via:\r\n\r\nhttps://github.com/ttrider/PowerShellAsync/blob/66eb99e33516532749cdd81ced3faf210361a9ee/PowerShellAsync/AsyncCmdlet.cs#L200\r\n\r\nI think there's probably something that could be done to how methods like `ShouldContinue` are wrapped by `PowerShellAsync` to fix this:\r\n\r\nhttps://github.com/ttrider/PowerShellAsync/blob/66eb99e33516532749cdd81ced3faf210361a9ee/PowerShellAsync/AsyncCmdlet.cs#L117\r\n\r\nFor now, I'm moving forward by just wrapping `CmdLet` calls like `ShouldContinue` and `WriteProgress` which appear to not be correctlyl wrapped by `PowerShellAsync` with `Task.Run` calls. \r\n",
      "created_at": "2020-04-03T15:14:21Z",
      "updated_at": "2020-04-03T15:14:50Z"
    },
    {
      "author": "tig",
      "author_association": "NONE",
      "body": "@felixfbecker I need help. I just can't get my head around this stuff enough to actually fix the problem. I'm currently using your version and things are mostly working. However, `WriteDebug/Error` etc... need to run on the main `cmdlet` thread and I'm not smart enough to modify your code to do so.\r\n\r\nNot sure if this Issue is the right place for me to get educated. Please send me elsewhere if there's a better forum for this topic. I'm putting it here for now because a) you are here and b) this really is all about building async cmdlets....\r\n\r\nTo set context, I've built a `Serilog` sink for PowerShell CmdLets. My libraries use `Serilog` logging throughout for other clients (mainly a Winforms app) and I want to redirect `Log.Debug` -> `WriteDebug`, `Log.Information` -> `WriteVerbose`, etc... in my PowerShell cmdlet.\r\n\r\nI discovered along the way that Serilog's singleton pattern makes running within a shared host like Powershell challenging, but I've worked around it via a registration model from my CmdLet. \r\n\r\nSee https://github.com/tig/winprint/blob/master/src/WinPrint.Console/PowerShellSink.cs\r\n\r\n`Emit` is often called from threads other than the `cmdlet` thread. Thus I get exceptions like:\r\n\r\n```\r\nException thrown: 'System.Management.Automation.PSInvalidOperationException' in System.Management.Automation.dll\r\nThe WriteObject and WriteError methods cannot be called from outside the overrides of the BeginProcessing, ProcessRecord, and EndProcessing methods, and they can only be called from within the same thread. Validate that the cmdlet makes these calls correctly, or contact Microsoft Customer Support Services.\r\n```\r\n\r\nAnd `WriteDebug` just fails silently when on the wrong thread (apparently).\r\n\r\nIt seems the solution should be simple:\r\n\r\nWrap `PSCmdLet.WriteDebug` et. al. in `SynchronizationContext.Post` calls. If I'm understanding this right, the message pump in `ThreadAffinitiveSynchronizationContext` will pick these up and run them on the right thread. \r\n\r\nI don't think the combination of your `AsyncCmdlet` and `ThreadAffinitiveSynchronizationContext` are fully baked because when I do this:\r\n\r\n        public new void WriteDebug(string text) {\r\n            \r\n            ThreadAffinitiveSynchronizationContext.Current.Post(new SendOrPostCallback((o) => {\r\n                base.WriteDebug(text);\r\n            }), null);\r\n        }\r\n\r\n`Current` is null on those calls and I obviously need to prime the pump somehow, this is where I need a hint. \r\n\r\nI won't feel too bad if y'all just tell me to go really study how to do threading right. I'm actually doing all this specifically to learn. So... \n\n<blockquote><img src=\"https://repository-images.githubusercontent.com/220096599/3e1f1900-5278-11ea-98cb-03572eb39e44\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/tig/winprint\">tig/winprint</a></strong></div><div>WinPrint 2.0 - A modern take on the the classic source code printing app from 1988.  WinPrint is the perfect tool for printing source code, web pages, reports generated by legacy systems, documenta...</div></blockquote>",
      "created_at": "2020-04-12T23:32:40Z",
      "updated_at": "2020-04-12T23:32:42Z"
    },
    {
      "author": "chausner",
      "author_association": "NONE",
      "body": "Any updates on async cmdlet support?\r\n\r\n@tig Have you ever found a solution to the problem you described?",
      "created_at": "2021-03-16T21:16:44Z",
      "updated_at": "2021-03-16T21:16:44Z"
    },
    {
      "author": "tig",
      "author_association": "NONE",
      "body": "> Any updates on async cmdlet support?\r\n> \r\n> @tig Have you ever found a solution to the problem you described?\r\n\r\nI don't really remember how I worked around all this. Sorry.",
      "created_at": "2021-03-17T00:27:29Z",
      "updated_at": "2021-03-17T00:27:29Z"
    },
    {
      "author": "jamie-tillman",
      "author_association": "NONE",
      "body": "2021 and still no official support for async cmdlets, 4 years after this post was first made.  To me, that says it's not a priority, and if async operations aren't a priority for powershell cmdlets, then powershell cmdlets aren't a priority.",
      "created_at": "2021-09-04T19:21:03Z",
      "updated_at": "2021-09-04T19:21:03Z"
    },
    {
      "author": "jackbond",
      "author_association": "NONE",
      "body": "\"Async all the way\" is some pretty awesome hypocrisy on Microsoft's part.\r\n\r\n",
      "created_at": "2021-09-06T00:34:58Z",
      "updated_at": "2021-09-06T00:34:58Z"
    },
    {
      "author": "alphaleonis",
      "author_association": "NONE",
      "body": "> @tig are you seeing the same problem with https://github.com/felixfbecker/PSKubectl/blob/master/src/AsyncCmdlet.cs too? If not, maybe we could use that as a starting point instead.\r\n> \r\n> > <img alt=\"\" width=\"48\" src=\"https://avatars3.githubusercontent.com/u/10532611?s=400&amp;v=4\"><img alt=\"\" height=\"14\" src=\"https://camo.githubusercontent.com/b6a12909f1e31185a69a73d59208c507a992236d3230f9fc18e85058ae3d19e7/68747470733a2f2f6769746875622e6769746875626173736574732e636f6d2f66617669636f6e732f66617669636f6e2e737667\"> GitHub**[felixfbecker/PSKubectl](https://github.com/felixfbecker/PSKubectl)**kubectl with the power of the object pipeline. Contribute to felixfbecker/PSKubectl development by creating an account on GitHub.\r\n\r\nFor anyone coming across this discussion:\r\n[PowerShellAsync](https://github.com/ttrider/PowerShellAsync) does not seem to be maintained, and suffers from the deadlock issue that @tig mentioned. \r\n\r\nI recommend instead using the implementation from [PSKubectl](https://github.com/felixfbecker/PSKubectl/blob/master/src/AsyncCmdlet.cs) as mentioned by @felixfbecker as this does not seem to suffer from these problems.\r\n\r\nThe deadlock problem can be reproduced simply by the following code:\r\n```cs\r\n   [Cmdlet(\"Test\", \"AsyncCmdlet\")]\r\n   public class TestAsyncCmdletCommand : AsyncCmdlet\r\n   {\r\n      protected override async Task BeginProcessingAsync()\r\n      {\r\n         await Task.Delay(500);\r\n         ShouldContinue(\"my message.\", \"Exit this Powershell instance?\");\r\n      }\r\n   }\r\n```\r\n\r\nOf course getting this into the PowerShell library itself would be even better.\n\n<blockquote><img src=\"https://opengraph.githubassets.com/7e2f913ff06d3bc69132404c8ffc791bcc02b133da7ff9040a65877b7e40e151/felixfbecker/PSKubectl\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/felixfbecker/PSKubectl\">PSKubectl/AsyncCmdlet.cs at master \u00b7 felixfbecker/PSKubectl</a></strong></div><div>kubectl with the power of the object pipeline. Contribute to felixfbecker/PSKubectl development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2022-05-14T16:36:46Z",
      "updated_at": "2022-05-14T16:36:48Z"
    },
    {
      "author": "yodasad",
      "author_association": "NONE",
      "body": "We already have an async version of Main in console applications, it would be great to have the async support in PowerShell.",
      "created_at": "2022-09-02T07:51:45Z",
      "updated_at": "2022-09-02T07:51:45Z"
    }
  ],
  "created_at": "2018-09-02T16:58:28Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets"
  ],
  "number": 7690,
  "state": "open",
  "title": "Async cmdlets",
  "updated_at": "2022-09-02T07:51:45Z"
}