{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15997",
  "author": "mklement0",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nNote: This problem won't arise often in real-world usage, given that the very point of using a _generic_ dictionary is to use _specific_ types rather than `[object]`. Still, the behavior is surprising.\r\n\r\nWith non-generic dictionary types, dot notation can be used as syntactic sugar for index notation; e.g., `@{ foo = 42}.foo` in lieu of `@{ foo = 42 }['foo']`\r\n\r\nWith a generic dictionary _whose key type is `[object]`_, this doesn't work, however (it does work with `[string]` and `[int]`, for instance, and index notation works in all cases):\r\n\r\n```powershell\r\n# Note: $dict['foo'] works fine.\r\n#       $dict.foo would work only if the key type were changed to [string]\r\n(($dict = [System.Collections.Generic.Dictionary[object, object]]::new()).Add('foo', 42)); $dict.foo\r\n```\r\n\r\n### Expected behavior\r\n\r\n```console\r\n42\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\nNo output.\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nPowerShell Core 7.2.0-preview.9\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Key with `object` type works with dynamic member access (except when the dynamic member's value is of string type). check this out:\r\n```\r\n$dict = [System.Collections.Generic.Dictionary[object, object]]::new()\r\n$s = [System.IO.FileInfo]::new('bar')\r\n$dict.Add($s, 888)\r\n$dict.$s\r\n> 888\r\n```\r\nwhen the dynamic member is of the `string` type, it will fall back to the non-dynamic get member binder, where it differentiates `IDictionary` from `IDictionary<,>`. See the code here: https://github.com/PowerShell/PowerShell/blob/6de53f89cf68d957f3c235d847264308ea31ff5a/src/System.Management.Automation/engine/runtime/Binding/Binders.cs#L5333-L5354\r\n\r\nit's not clear to me why we are dealing with `IDictionary<,>` specially instead of let `IDictionary` to cover it all, just like how dynamic member binder works: https://github.com/PowerShell/PowerShell/blob/6de53f89cf68d957f3c235d847264308ea31ff5a/src/System.Management.Automation/engine/runtime/Binding/Binders.cs#L1345-L1356\r\n\r\nanyways, when it goes through the `IDictionary<,>` code path, it explicitly handles `IDictionary<string,T>` only.\r\nso in summary, there is inconsistency for sure, as if `$dict.$s` from the above snippet works, I would expect the following works too:\r\n```\r\n$dict.Add('foo', 42)\r\n$v = 'foo'\r\n$dict.$v\r\n```\r\nhowever, it doesn't",
      "created_at": "2021-08-31T22:27:40Z",
      "updated_at": "2021-08-31T22:27:40Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw likely we need to deal with both because not all `IDictionary<,>` objects also implement `IDictionary`. Probably both code paths should handle both.",
      "created_at": "2021-08-31T22:33:28Z",
      "updated_at": "2021-08-31T22:34:31Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Good point, @vexx32 (`ExpandoObject` is an example of such a type - see #15204).",
      "created_at": "2021-08-31T22:36:15Z",
      "updated_at": "2021-08-31T22:36:15Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@vexx32 But today we have a check before differentiating `IDictionary<,>` from `IDictionary`:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/6de53f89cf68d957f3c235d847264308ea31ff5a/src/System.Management.Automation/engine/runtime/Binding/Binders.cs#L5330-L5333\r\n\r\nThat means we are ignoring types that doesn't implement `IDictionary` today, and hence, #15204\r\nGiven that, I don't know why `IDictionary<string, T>` is handled specially.",
      "created_at": "2021-08-31T22:38:11Z",
      "updated_at": "2021-08-31T22:42:17Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The Engine WG discussed and agreed that there is a consistency issue in how `PSGetMemberBinder` and `PSGetDynamicMemberBinder` deal with generic dictionary object. More investigation is needed to understand why `IDictionary<string, T>` is differentiated from `IDictionary` in `PSGetMemberBinder`.",
      "created_at": "2021-09-03T18:06:12Z",
      "updated_at": "2021-09-03T18:06:28Z"
    }
  ],
  "created_at": "2021-08-25T17:31:59Z",
  "number": 15997,
  "state": "open",
  "title": "Dot notation (use of the member-access) operator doesn't work with a generic dictionary with [object]-typed keys",
  "updated_at": "2021-09-03T18:06:28Z"
}