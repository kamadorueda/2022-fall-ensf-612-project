{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12188",
  "author": "SteveL-MSFT",
  "body": "# Summary of the new feature/enhancement\r\n\r\nIf a cmdlet takes an apikey as a string, then currently you would need to know to use `Get-Secret -AsPlainText` (if using SecretManagement module) or `ConvertFrom-SecureString -AsPlainText` if the secret is stored as a SecureString.  If you forget to use `-AsPlainText`, then PowerShell will convert the object to a string (to match the parameter type) by using `ToString()`, this will result in the typename to be passed as the apikey.\r\n\r\nAs more people use the SecretManagement module, this may make it easier.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nProposal is to add a `[SecureStringToString]` attribute (hopefully someone comes up with a better name) that indicates to the parameter binder that this parameter accepts SecureStrings but automatically converts it to the plaintext string.  This prevents a `SecureString` type from accidentally being written to the console or logs and makes this conversion explicit requested by the cmdlet.\r\n\r\nExample:\r\n\r\n```csharp\r\n[Parameter(ConvertFromSecureString)]\r\nstring NugetApiKey;\r\n```\r\n\r\nor\r\n\r\n```csharp\r\n[Parameter()]\r\n[SecureStringToString]\r\nstring NugetApiKey;\r\n```\r\n\r\n",
  "closed_at": "2020-04-01T22:16:16Z",
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "Sounds like a good use for argument transformer classes. \r\n",
      "created_at": "2020-03-24T11:37:55Z",
      "updated_at": "2020-03-24T11:37:55Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Hmm. I _would_ tend to prefer this were implemented as a standard transformation attribute, but that would mean the parameter's target type will show up as `[string]` rather than `[securestring]` which seems a little counter to the goal here.\r\n\r\nPerhaps the argument transformation attribute could be extended to allow for it to define a \"presenting\" type, which represents expected input, which can be shown in the help preferentially to the actual parameter type and how it behaves internally in the cmdlet or function.",
      "created_at": "2020-03-24T12:48:54Z",
      "updated_at": "2020-03-24T12:48:54Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@vexx32 that's another reasons to prefer leaving parameters untyped. Specifying [string] or [secureString] and then passing the other gives bad results (type name or error). \r\nA transformer means you can say \"Here's a string\" or \"Heres a secure string\" and not worry about what is going on inside the function. ` ",
      "created_at": "2020-03-24T15:55:45Z",
      "updated_at": "2020-03-24T15:55:45Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "In my opinion @jhoneill an untyped parameter does the user a disservice. They can't make reasonable deductions about what input it expects without reading the help. And as much as I encourage folks to read the help when they're not sure, seeing an `[object]` typed parameter is just being unkind to users having a bad day, imo. \ud83d\ude42 ",
      "created_at": "2020-03-24T17:02:46Z",
      "updated_at": "2020-03-24T17:02:46Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> In my opinion @jhoneill an untyped parameter does the user a disservice. They can't make reasonable deductions about what input it expects without reading the help. And as much as I encourage folks to read the help when they're not sure, seeing an `[object]` typed parameter is just being unkind to users having a bad day, imo. \ud83d\ude42\r\n\r\nAh, perhaps you have spent too long in real programming\r\nThe user should not have to care ... they expect to be able to do something like \r\n`Stop-Vm $V `\r\n\r\nIf $V _must_ be a VM name, or the GUID which represents a VM or an object which represents the VM **that** is doing the user a disservice because they have to know they must write \r\n`Stop-VM (Get-VMObject -Name $V) `\r\nor \r\n`Stop-VM $V.ID`\r\n\r\nIt's the programmer's job to write cmdlets and functions which serve their users , not the users job to learn how functions work on the inside in order to give the input the programmer first thought of.  And PowerShell sets that expectation. \r\nYou can do \r\n```\r\n$p = resolve-path '..\\builds to workitems.txt'                                                                                                                              \r\n$q = Get-ChildItem ..\\DeadBranches.xlsx  \r\n$r = '..\\pipelines.xlsx'                                                                                                                                                    \r\ncopy $p,$q,$r -Destination temp \r\n```\r\nAnd pass an array with a string, a fileinfo and a path Info. \r\nSetting the type of FileInfo causes a bunch of failures. \"foo.txt\"  will convert to a read-only non-existent file in a system directory if you say [FileInfo]$TextFile and the user assumes they can pass a string holding a relative path. \r\n\r\nTyping parameters used wisely can help both user and programmer. If there is a command which takes a count saying the $count is [int32] is fine because there is no way it could be a secure string. But often they are a sign of someone who hasn't considered that the people who will use the finished code will want flexibility. In the end it comes down to are functions APIs or User interfaces ? Of course they are both, but an acceptable API can be a horrible and frustrating UI. A good UI rarely makes a poor API\r\n\r\n[end rant] \r\n",
      "created_at": "2020-03-24T18:23:24Z",
      "updated_at": "2020-03-24T18:24:50Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Flexibility is a good thing @jhoneill but there are limits, depending on how the code is designed. As you mentioned, you're not going to throw a securestring at an int32 parameter. That's example my point. \r\n\r\nMy point is not that there _shouldn't_ be flexibility -- I make extensive use of transformation attributes for better UX in my own modules. However, I do think that the help metadata attached to a cmdlet (which the parameter type is _always_ a part of, whether you like it or not; it's reported by Get-Help and forms part of the implicit documentation for a command).\r\n\r\nI'm a fan of it being as flexible as is reasonably possible, but I'd also prefer as specific a type given to the cmdlet parameter from a user perspective as is reasonable. Users that see `[securestring]` typically can infer the purpose of the input and that it will require potentially sensitive information passed in. \r\n\r\nAllowing the flexibility to input a string is great for some applications (and yes, securestring isn't secure, that's a whole other topic; I'm talking about user expectations here), but if we type the parameter itself as `[string]` or `[object]` and that's what shows up in the `Get-Help` or `Get-Command -Syntax` result for that parameter, we're doing the user a disservice by not properly communicating that the command may be handling sensitive data.",
      "created_at": "2020-03-24T18:40:18Z",
      "updated_at": "2020-03-24T18:41:11Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I like an attribute to make it explicit on the cmdlet side, which is safer and less surprising in good or bad way. But the down side is, in order for any existing `[string] $Token` parameters to take advantage of this, the code/script needs to be updated.\r\n\r\nAlways allowing a `SecureString` object to be converted to a string during parameter binding might be too loose.\r\nImagining a helper function `Write-Log [-message] <string>`, the auto SecureString-to-string conversion in parameter binding could accidentally result in plain text password being written to the log.\r\n \r\nHow about having a heuristic check on the parameter name, just like what Lee did to [scrub sensitive command lines from history](https://twitter.com/Lee_Holmes/status/1172640465767682048)?\r\nSo the auto conversion happens only when the parameter name looks like something that accepts a sensitive string.",
      "created_at": "2020-03-24T19:05:41Z",
      "updated_at": "2020-03-24T19:17:17Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "Can we get a real example on how you think this should look? What does the user have, and what does he type, and how does he use it? How would it deal with being handed a real `securestring`?",
      "created_at": "2020-03-25T21:59:00Z",
      "updated_at": "2020-03-25T21:59:00Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Example of a case where transformation would improve the experience:\r\n\r\nCurrently:\r\n```powershell\r\nPublish-Module -Name foo -NugetApiKey (Get-Secret mykey -AsPlainText)\r\n```\r\n\r\nDesired:\r\n```powershell\r\nPublish-Module -Name foo -NugetApiKey (Get-Secret mykey)\r\n```\r\n\r\nWith my proposal, in this example, `Publish-Module` would need to be updated with the new attribute.  The big downside is that only modules that support 7.1+ would be able to support this severely limiting adoption.",
      "created_at": "2020-03-25T22:20:02Z",
      "updated_at": "2020-03-25T22:31:16Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Alternate proposal would to automatically, within the parameter binder, always convert a `SecureString` to a `string` by extracting the plain text secret rather than using `ToString()`.  This does mean that scripts would not be portable between 7.1+ and downlevel, but users may decide this tradeoff is worthwhile and have a `#requires -version 7.1` at the top of script.  However, it seems that there may be some security concerns doing this but I don't have any specific examples where this could be a problem.  Thoughts?",
      "created_at": "2020-03-25T22:38:07Z",
      "updated_at": "2020-03-25T22:38:07Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, we have some concerns:\r\n\r\n- requiring an attribute limits adoption to module authors that only target 7.1+\r\n- allowing automatic conversion from SecureString to String means you can't share scripts with older versions of PowerShell so also limits usage to 7.1+ runtime\r\n- requiring `-AsPlainText` makes it clear for anyone reading the script that the output will be a string\r\n\r\nDecision is to not make any changes for this.",
      "created_at": "2020-04-01T22:16:16Z",
      "updated_at": "2020-04-01T22:16:16Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "I will might work the following up into a blog post, unless someone tells me it is a very bad idea. \r\n\r\n```Powershell\r\nclass UnSecureString : System.Management.Automation.ArgumentTransformationAttribute  {\r\n    [object] Transform([System.Management.Automation.EngineIntrinsics]$EngineIntrinsics, [object] $InputData) {\r\n        if ($InputData -is [securestring]) {\r\n            $InputData =  New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList 'Placeholder', $InputData\r\n        }\r\n        if ($InputData -is  [pscredential]) {\r\n            $InputData =  $InputData.GetNetworkCredential().password\r\n        }\r\n        return ($InputData)\r\n    }\r\n}\r\n\r\nFunction Demo {\r\n   [cmdletBinding()]\r\n   param(\r\n   [UnSecureString()]\r\n   [string]$ApiKey\r\n   )\r\n\r\n   \"Your API key is $ApiKey\"\r\n\r\n}\r\n```\r\n\r\nResults:\r\n\r\n```\r\n>demo \"api12345key\"\r\n\r\nYour API key is api12345key\r\n\r\n>$ss = ConvertTo-SecureString -AsPlainText \"api34567key\" -Force\r\n>demo $ss\r\n\r\nYour API key is api34567key\r\n\r\n>$cred = New-Object pscredential \"NoRealName\", $ss\r\n>demo $cred\r\n\r\nYour API key is api34567key\r\n\r\n```\r\n\r\nWorks on 7.0 and 5.1 :-) \r\n",
      "created_at": "2020-04-02T11:24:24Z",
      "updated_at": "2020-04-02T11:24:24Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "\ud83d\udc4d \r\n\r\n@SteveL-MSFT you could just make a small binary module and ship that to the gallery since it can work for both versions. It'd just be in-box in 7.1+",
      "created_at": "2020-04-02T13:19:01Z",
      "updated_at": "2020-04-02T13:19:01Z"
    }
  ],
  "created_at": "2020-03-23T23:17:52Z",
  "labels": [
    "Issue-Enhancement",
    "Committee-Reviewed"
  ],
  "number": 12188,
  "state": "closed",
  "title": "Automatically convert SecureString to String in parameter binder",
  "updated_at": "2020-04-02T13:19:01Z"
}