{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9566",
  "author": "rjmholt",
  "body": "Bash has a nice in-string DSL for substitutions and manipulations such as:\r\n\r\n```sh\r\n> str=abcABC123ABCabc\r\n\r\n# Strip out shortest match between 'a' and 'C'.\r\n> echo ${str#a*C}\r\n123ABCabc\r\n```\r\n\r\nThese are detailed here: https://www.tldp.org/LDP/abs/html/string-manipulation.html\r\n\r\nSome of these might not apply to PowerShell because of methods already on `[string]` or because they're not useful enough to justify what's probably a breaking change. But worth considering.",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "The perhaps not so obvious name of this feature is _shell parameter expansion_.\r\nWhile the feature is [POSIX-mandated](http://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html#tag_02_06_02), Bash implements several extensions: http://mywiki.wooledge.org/BashGuide/Parameters#Parameter_Expansion has a concise overview, and the manual page is at  https://www.gnu.org/software/bash/manual/bashref.html#Shell-Parameter-Expansion \r\n\r\nGenerally, while parameter expansion is definitely convenient and concise, on the flip side the syntax is cryptic and hard to remember.\r\n\r\nAt least technically it is definitely a breaking change, because `#` is a legal character in PowerShell variable names; while perhaps unlikely that such names are used in the wild, the likelihood increases with the several other characters used in the various parameter-expansion features, namely, `-`, `=`, `:`, `?`, `+`, `!`, `@`, `/`.\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2019-05-09T16:23:21Z",
      "updated_at": "2019-05-09T16:23:21Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Yes I deliberately avoided conflating this with parameter expansion, since despite overlap in bash, there's no good reason for PowerShell to relate them and PowerShell arguably handles parameters much better.\r\n\r\nMy intent here is to discuss whether bash's string manipulation functionality is useful enough to consider implementing in PowerShell (be it as an in-string DSL, in string formatting, or as script methods).\r\n\r\nI actually opened the issue after @JamesWTruher sent me a very old list of feature ideas for Monad. This and &&/|| are the only things left on it that aren't in PowerShell.",
      "created_at": "2019-05-09T16:31:38Z",
      "updated_at": "2019-05-09T16:31:38Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the clarification, @rjmholt, but note that _parameter_ is simply the name that POSIX-like shells give to _both_ arguments and variables - the former are _positional_ parameters (e.g, `$1`), the latter are _named_ parameters (e.g, `$var`), and the parameter expansion works equally with both.\r\n\r\nIn other words: your example _is_ an instance of _parameter expansion_, as are the features in the document you link to.\r\n\r\nTo help with fleshing out what features PowerShell may benefit from, here's the list (from http://mywiki.wooledge.org/BashGuide/Parameters#Parameter_Expansion):\r\n\r\nSyntax | Description\r\n-- | --\r\n${parameter:-word} | Use Default Value. If 'parameter' is unset or null, 'word' (which may be an expansion) is substituted. Otherwise, the value of 'parameter' is substituted.\r\n${parameter:=word} | Assign Default Value. If 'parameter' is unset or null, 'word' (which may be an expansion) is assigned to 'parameter'. The value of 'parameter' is then substituted.\r\n${parameter:+word} | Use Alternate Value. If 'parameter'\u00a0is null or unset, nothing is substituted, otherwise 'word' (which may be an expansion) is substituted.\r\n${parameter:offset:length} | Substring Expansion. Expands to up to 'length' characters of 'parameter' starting at the character specified by 'offset' (0-indexed). If ':length' is omitted, go all the way to the end. If 'offset' is negative (use parentheses!), count backward from the end of 'parameter' instead of forward from the beginning. If 'parameter' is @ or an indexed array name subscripted by @ or *, the result is 'length' positional parameters or members of the array, respectively, starting from 'offset'.\r\n${#parameter} | The length in characters of the value of 'parameter' is substituted. If 'parameter' is an array name subscripted by @ or *, return the number of elements.\r\n${parameter#pattern} | The 'pattern' is matched against the\u00a0beginning\u00a0of 'parameter'. The result is the expanded value of 'parameter' with the shortest match deleted.\u00a0If 'parameter' is an array name subscripted by @ or *, this will be done on each element. Same for all following items.\r\n${parameter##pattern} | As above, but the\u00a0longest\u00a0match is deleted.\r\n${parameter%pattern} | The 'pattern' is matched against the\u00a0end\u00a0of 'parameter'. The result is the expanded value of 'parameter' with the shortest match deleted.\r\n${parameter%%pattern} | As above, but the\u00a0longest\u00a0match is deleted.\r\n${parameter/pat/string} | Results in the expanded value of 'parameter' with the\u00a0first\u00a0(unanchored) match of 'pat' replaced by 'string'. Assume null string when the '/string' part is absent.\r\n${parameter//pat/string} | As above, but\u00a0every\u00a0match of 'pat' is replaced.\r\n${parameter/#pat/string} | As above, but matched against the\u00a0beginning. Useful for adding a common prefix with a null pattern:\u00a0\"${array[@]/#/prefix}\".\r\n${parameter/%pat/string} | As above, but matched against the\u00a0end. Useful for adding a common suffix with a null pattern.\r\n\r\nA few thoughts:\r\n\r\n* I think we can ignore `${#parameter}`, given that `$var.Length` can be used on string variables (and arrays, though it's better to use `.Count` for collections).\r\n\r\n* The `${parameter:-word}`, `${parameter:=word}` and `${parameter:+word}` features could conceivably be covered by ternary conditionals and null-conditional operators - see #3239 and #3240 \r\n\r\n* `${parameter//pat/string}` is covered by `-replace`, but variant `${parameter/pat/string}`, which replaces only the _first_ occurrence, has no counterpart.\r\n  * While `-replace` offers more flexibility through use of regexes, _literal_ use is currently cumbersome (`[regex]::Escape()`), so we could think about either a new operator or a syntax for verbatim regexes / wildcard patterns; related discussion: #9308\r\n\r\n* Arguably, `-replace` also has the various prefix (`#`) and suffix (`%`) stripping/substitution features covered.\r\n\r\n* That leaves us with `${parameter:offset:length}` for positional _substring_ extraction, which would be nice to have.\r\n  * For _arrays_, the existing `[...]` syntax is already pretty flexible, though there's room for improvement - see #7940 and #7928\r\n  * With the above indexing improvements, we could consider borrowing the array indexing syntax along the lines of: \r\n\r\n```powershell\r\n$var = 'abcde'\r\n# Wishful thinking\r\n${var[1..]} # -> 'bcde'; equivalent of: ${var:1}\r\n${var[1:2]} # -> 'bc'; equivalent of: ${var:1:2}\r\n${var[-2..]} # -> 'de'; equivalent of: ${var: -2}\r\n${var[1..@-1]} # -> 'bcd'; equivalent of: ${var:1:-1}\r\n```\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2019-05-09T17:41:09Z",
      "updated_at": "2019-05-09T17:43:48Z"
    }
  ],
  "created_at": "2019-05-08T20:04:04Z",
  "number": 9566,
  "state": "open",
  "title": "Bash-style string manipulation",
  "updated_at": "2019-05-11T18:09:20Z"
}