{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6653",
  "author": "rjmholt",
  "body": "See #3641. Types needed in PowerShell classes must be available at parse-time (i.e. not loaded with `Import-Module` or `Add-Type`) to be able to compile classes to IL.\r\n\r\nTo be able to resolve these types, we want to support the `using assembly` statement. However, the most available way to do this involves loading a DLL and possibly executing some of its code, presenting a vector for arbitrary code execution.\r\n\r\n~~Instead, we should analyse a DLL's metadata to discover the types it exports, using a [`System.Reflection.Metadata.MetadataReader`](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.metadata.metadatareader?view=netcore-2.0). Example code for this is in PR #3169. The entry point for this analysis would be the [`PowerShellModuleAssemblyAnalyzer` class](https://github.com/PowerShell/PowerShell/blob/feb38cff707aec8a68f53153008af6233c9e202b/src/System.Management.Automation/CoreCLR/CorePsStub.cs#L639).~~\r\n\r\nThe right way to do this is now to use a [MetadataLoadContext](https://docs.microsoft.com/en-us/dotnet/standard/assembly/inspect-contents-using-metadataloadcontext)",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Should we thing about PowerShell classes too? I mean getting PowerShell classes at parse time from PowerShell modules.",
      "created_at": "2018-04-15T12:57:40Z",
      "updated_at": "2018-04-15T12:57:40Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov\r\n>Should we thing about PowerShell classes too? I mean getting PowerShell classes at parse time from PowerShell modules.\r\n\r\nIs not `using module` already do that?",
      "created_at": "2018-04-15T13:25:48Z",
      "updated_at": "2018-04-15T13:25:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I don't know.",
      "created_at": "2018-04-15T13:40:25Z",
      "updated_at": "2018-04-15T13:40:25Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov when you say \"getting PowerShell classes at parse time\" do you mean loading?\r\n\r\nThat's basically what happens with `using module`. Since we have a nice PowerShell parser that we know doesn't run any code, we read in the class definitions with it and then compile them to .NET IL. So the parser is already able to resolve PowerShell-class-defined types at parse time.\r\n\r\nThe problem is that we don't have a nice .NET IL parser that we know doesn't run any code (and we only need the IL metadata anyway, to discover what types are available). corefx [ships one](https://github.com/dotnet/corefx/tree/c45c7a7439ab2925d1a6e17e80f396a6bd35c17b/src/System.Reflection.Metadata), but it's pretty low level and documentation on it is sparse. Last time I wrote something using it, I used their tests for guidance. But it should be relatively straightforward.",
      "created_at": "2018-05-02T21:49:15Z",
      "updated_at": "2018-05-02T21:49:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@rjmholt You could look our new `Add-Type` cmdlet - it has a code to retrieve types from assemblies (to check duplications). ",
      "created_at": "2018-05-03T04:57:25Z",
      "updated_at": "2018-05-03T04:57:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It makes sense to use MetadataReader in our TypeResolver too - it seems we load dozens of assemblies unnecessarily.",
      "created_at": "2019-06-28T14:57:55Z",
      "updated_at": "2019-06-28T14:57:55Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "The metadata reader implementation from us is no longer required, since https://github.com/dotnet/corefx/pull/33201. We should now just use that",
      "created_at": "2020-07-28T17:31:00Z",
      "updated_at": "2020-07-28T17:33:10Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "This might not be that useful to `using assembly` since `using assembly` needs to make the assembly actually loaded for its types to be used in IL emitting. But this will be very useful to module analysis, e.g. the [`PowerShellModuleAssemblyAnalyzer`](https://github.com/PowerShell/PowerShell/blob/feb38cff707aec8a68f53153008af6233c9e202b/src/System.Management.Automation/CoreCLR/CorePsStub.cs#L639) class which is not implemented today. ",
      "created_at": "2021-06-10T16:28:01Z",
      "updated_at": "2021-06-10T16:28:01Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> This might not be that useful to using assembly since using assembly needs to make the assembly actually loaded for its types to be used in IL emitting\r\n\r\nI think the scenario here was to make class definition that depends on `using assembly` and `using module` still safe, so that script files can be parsed and type check successfully without the risk of running an arbitrary DLL on the filesystem.\r\n\r\nMuch of this [isn't actually required](https://github.com/PowerShell/PowerShell/issues/6722), but the discussion in that issue seems to indicate a preference for going down that path.\r\n\r\nI suspect a lot of these implementation discussions should really be had secondary to a design review of classes in some sense, but the available tooling in .NET has moved to a point that makes more things possible.",
      "created_at": "2021-06-10T16:51:41Z",
      "updated_at": "2021-06-10T16:51:41Z"
    }
  ],
  "created_at": "2018-04-14T00:45:58Z",
  "number": 6653,
  "state": "open",
  "title": "Use the MetadataLoadContext to restore reflection-only type discovery for mechanisms like using assembly",
  "updated_at": "2021-06-10T16:51:42Z"
}