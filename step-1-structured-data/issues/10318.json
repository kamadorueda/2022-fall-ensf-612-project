{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10318",
  "author": "KirkMunro",
  "body": "# PR Summary\r\n\r\nCleanup of workflow code that has been deprecated. In particular:\r\n\r\n- deprecation of `workflow` keyword\r\n- deprecation of `parallel` keyword (used for parallel activities in workflow)\r\n- deprecation of `sequence` keyword (used for sequential activities in workflow)\r\n- deprecation of `inlinescript` activity (used for activities outside of workflow)\r\n- removal of some related methods\r\n- removal of deprecated resource strings\r\n- updates to non-deprecated resource strings\r\n- removal of the use of \"workflow\" in many comments\r\n\r\nThe keywords in question have been preserved, but will now generate parser errors because they are deprecated.\r\n\r\n## PR Context\r\n\r\nSee issue #9570.\r\n\r\n## PR Checklist\r\n\r\n- [X] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [X] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [X] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [X] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [X] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [X] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2021-04-24T13:18:14Z",
  "comments": [
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT The two Pester errors that occur on each platform happen because `Fabrikam-ServerScript` in `www.poshtestgallery.com` defines a workflow. Since workflow does not parse with this PR in place, and since PowerShellGet wasn't designed with deprecated features that generate parse errors in mind, there's a chicken-and-egg problem with these tests.\r\n\r\nSince I can use `Find-Script` in the same PowerShellGet module in a build with this PR to find the script and pull script metadata, which includes workflows that are in the script, we could update PowerShellGet to check for the presence of workflow as part of `Install-Script` (the information is obviously retrievable, and if workflow is found), and prevent the installation from continuing since it is not supported on 7.0+. We could then update the failing tests to verify that scenario fails properly, and to test that installing a different script that does not have workflow works. This will allow the Pester tests to pass.\r\n\r\nLonger term, we could also update PowerShellGet to recognize parser errors about deprecated keywords. The parser error that is being generated by the parser in this PR is very specific, and clearly identifies when a keyword is deprecated. The keyword token also has a flag indicating that it is deprecated. In the case where a deprecated keyword is found, PowerShellGet could simply ignore that error since it shouldn't care.\r\n\r\nYou can see both the descriptive error id and the keyword `Deprecated` flag in the output below:\r\n\r\n```none\r\nPS C:\\> $tokens = $null\r\n>> $errors = $null\r\n>> [System.Management.Automation.Language.Parser]::ParseInput(\r\n>>     'workflow foo {''bar''}; Get-Date',\r\n>>      [ref]$tokens,\r\n>>      [ref]$errors)\r\n\r\nAttributes         : {}\r\nUsingStatements    : {}\r\nParamBlock         :\r\nBeginBlock         :\r\nProcessBlock       :\r\nEndBlock           : workflow foo {'bar'}; Get-Date\r\nDynamicParamBlock  :\r\nScriptRequirements :\r\nExtent             : workflow foo {'bar'}; Get-Date\r\nParent             :\r\n\r\n\r\nPS C:\\> $errors | fl *\r\n\r\nExtent          : workflow\r\nErrorId         : DeprecatedKeywordNotAllowed\r\nMessage         : The 'workflow' keyword has been deprecated and is no longer supported.\r\nIncompleteInput : False\r\n\r\n\r\nPS C:\\> $tokens\r\n\r\nText       : workflow\r\nTokenFlags : Keyword, Deprecated\r\nKind       : Workflow\r\nHasError   : False\r\nExtent     : workflow\r\n\r\nText       : foo\r\nTokenFlags : CommandName\r\nKind       : Identifier\r\nHasError   : False\r\nExtent     : foo\r\n\r\nText       : {\r\nTokenFlags : ParseModeInvariant\r\nKind       : LCurly\r\nHasError   : False\r\nExtent     : {\r\n\r\nValue      : bar\r\nText       : 'bar'\r\nTokenFlags : ParseModeInvariant\r\nKind       : StringLiteral\r\nHasError   : False\r\nExtent     : 'bar'\r\n\r\nText       : }\r\nTokenFlags : ParseModeInvariant\r\nKind       : RCurly\r\nHasError   : False\r\nExtent     : }\r\n\r\nText       : ;\r\nTokenFlags : ParseModeInvariant\r\nKind       : Semi\r\nHasError   : False\r\nExtent     : ;\r\n\r\nValue      : Get-Date\r\nText       : Get-Date\r\nTokenFlags : CommandName\r\nKind       : Generic\r\nHasError   : False\r\nExtent     : Get-Date\r\n\r\nText       :\r\nTokenFlags : ParseModeInvariant\r\nKind       : EndOfInput\r\nHasError   : False\r\nExtent     :\r\n\r\n\r\nPS C:\\>\r\n```\r\n\r\nPlease let me know how you would like to proceed.",
      "created_at": "2019-08-08T19:52:00Z",
      "updated_at": "2019-08-09T13:54:28Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "/cc @SteveL-MSFT \r\nI am not sure if it is worth the effort.  Perhaps we should continue with other workflow cleanup.",
      "created_at": "2019-08-08T23:22:04Z",
      "updated_at": "2019-08-08T23:22:04Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "If we do want these keywords deprecated, the simple solution for PowerShellGet is to check if a script/module has workflow in it _before_ installing it, and prevent that installation from happening if that is the case in PowerShell 7+. That's logical, necessary, and the right thing to do. Users can still save the script, which does not do any parsing checks, and that is the most they would want to do in a version of PowerShell that doesn't support workflow anyway. They shouldn't be able to install a script that is incompatible even with -Force (why would I be able to install something I can't use -- installers prevent such things, and rightly so). Since that change should probably happen regardless, and since that change fixes these issues, we could move forward with little effort with that change plus splitting the tests in question into two, so that they test for success and failure when it comes to workflow.",
      "created_at": "2019-08-09T02:05:03Z",
      "updated_at": "2019-08-09T13:56:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Today the cleanup is not critical and we could do not break PowerShellGet in the PR. Although we need an understanding of how to proceed in future",
      "created_at": "2019-08-09T11:52:33Z",
      "updated_at": "2019-08-09T11:52:33Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "For now, perhaps we should have an issue opened in PowerShellGet repo to produce an error if a script is incompatible.  For this PR, we can wait on this since it's desirable, but not critical.",
      "created_at": "2019-08-19T16:25:04Z",
      "updated_at": "2019-08-19T16:25:04Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Issue [PowerShell/PowerShellGet#528](https://github.com/PowerShell/PowerShellGet/issues/528) has been logged so that the issue can be fixed in PowerShellGet.",
      "created_at": "2019-08-19T16:54:27Z",
      "updated_at": "2019-08-19T16:54:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I set WIP until we PowerShellGet issue will be resolved. ",
      "created_at": "2019-08-24T15:36:27Z",
      "updated_at": "2019-08-24T15:36:27Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as stale because it has been marked as requiring author feedback but has not had any activity for **30 days**. It will be closed if no further activity occurs **within 10 days of this comment**.",
      "created_at": "2020-03-24T13:00:05Z",
      "updated_at": "2020-03-24T13:00:05Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "I'm just bumping this to keep it alive.",
      "created_at": "2020-04-15T02:13:48Z",
      "updated_at": "2020-04-15T02:13:48Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@KirkMunro If this is ready for merging, please remove the `WIP` from the title.\r\n\r\n@PoshChan please rebuild all",
      "created_at": "2020-04-18T00:05:19Z",
      "updated_at": "2020-04-18T00:05:19Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@PoshChan please rebuild all",
      "created_at": "2020-04-18T00:08:40Z",
      "updated_at": "2020-04-18T00:08:40Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@adityapatwardhan, could not find build at: , error: Invoke-RestMethod : {\"$id\":\"1\",\"innerException\":null,\"message\":\"The requested build 36162 could not be found.\",\"typeName\":\"Microsoft.TeamFoundation.Build.WebApi.BuildNotFoundException, Microsoft.TeamFoundation.Build2.WebApi\",\"typeKey\":\"BuildNotFoundException\",\"errorCode\":0,\"eventId\":3000}\r\nAt D:\\home\\site\\wwwroot\\Modules\\AzDevOps\\AzDevOps.psm1:7 char:9\r\n+         Invoke-RestMethod -Uri $url -Authentication Basic -Credential ...\r\n+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidOperation: (Method: GET, Reques\\u2026PowerShell/6.2.4\r\n}:HttpRequestMessage) [Invoke-RestMethod], HttpResponseException\r\n+ FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeRestMethodCommand\r\n",
      "created_at": "2020-04-18T00:09:13Z",
      "updated_at": "2020-04-18T00:09:13Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "Closing and opening PR to trigger CI rebuild",
      "created_at": "2020-04-18T00:10:08Z",
      "updated_at": "2020-04-18T00:10:08Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@KirkMunro Please fix CI issues and remove `WIP` from title when ready.",
      "created_at": "2020-04-24T18:36:50Z",
      "updated_at": "2020-04-24T18:36:50Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as stale because it has been marked as requiring author feedback but has not had any activity for **15 days**. It will be closed if no further activity occurs **within 10 days of this comment**.",
      "created_at": "2020-06-06T20:00:16Z",
      "updated_at": "2020-06-06T20:00:16Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@adityapatwardhan Here are the problems with this PR:\r\n\r\n1. This PR was dependent on another issue (issue [PowerShell/PowerShellGet#528](https://github.com/PowerShell/PowerShellGet/issues/528)). That issue disappeared. I didn't delete it, so how do we find out what happened to that???\r\n1. Assuming that issue gets recovered (or relogged), this PR can't be finished until that issue is addressed (which obviously won't happen if the issue that was logged was deleted).\r\n\r\nThat is why this was marked WIP: because it is dependent on an issue that I just discovered is missing. I'd like to know what happened to that issue, because issues should not be deleted.",
      "created_at": "2020-06-13T02:17:09Z",
      "updated_at": "2020-06-13T02:17:09Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMainainer, Please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-06-20T14:00:15Z",
      "updated_at": "2020-06-20T14:00:15Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@alerickson - Can you have a look why the issue in PowerShellGet disappeared? ",
      "created_at": "2020-06-29T17:20:49Z",
      "updated_at": "2020-06-29T17:20:49Z"
    },
    {
      "author": "alerickson",
      "author_association": "MEMBER",
      "body": "@adityapatwardhan @KirkMunro the name of the PSGet repository for versions below 3 is now called PowerShellGetv2, the issue is still there though: [PowerShell/PowerShellGetv2/issues/528](https://github.com/PowerShell/PowerShellGetv2/issues/528).  We won't address non-security related issues in that repo, but I'll transfer the issue over to the new repo so we can check before installing scripts in v3. ",
      "created_at": "2020-06-29T17:52:12Z",
      "updated_at": "2020-06-29T17:52:12Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-07-07T02:00:25Z",
      "updated_at": "2020-07-07T02:00:25Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@KirkMunro I guess we will have to wait till the version of PSGet that fixes the issue is included in PowerShell release. \r\n@alerickson Is the fix for the issue going to be part of PSGet v3? or does it not repro in v3 at all?",
      "created_at": "2020-07-21T00:24:08Z",
      "updated_at": "2020-07-21T00:24:08Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-07-28T02:00:19Z",
      "updated_at": "2020-07-28T02:00:19Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Closing. See https://github.com/PowerShell/PowerShell/pull/10238#issuecomment-826091414.",
      "created_at": "2021-04-24T13:18:14Z",
      "updated_at": "2021-04-24T13:18:14Z"
    }
  ],
  "created_at": "2019-08-08T15:05:29Z",
  "number": 10318,
  "state": "closed",
  "title": "WIP: Deprecate workflow-related keywords (workflow, sequence, parallel, and inlinescript)",
  "updated_at": "2021-04-24T13:18:15Z"
}