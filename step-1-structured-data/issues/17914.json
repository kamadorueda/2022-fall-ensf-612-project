{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17914",
  "author": "pirion",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nI am missing elements during a ForEach-Object parallel run. I expect to see all runs succeed, but I am missing random items.\r\n\r\n``\r\n$result = @{\"start\"=0; \"end\"=100000; \"count\"= 0; \"concurrent\" = 100};\r\n($result.start)..($result.end) | ForEach-Object -Parallel {\r\n    ($using:result).count += 1;\r\n} -ThrottleLimit $result.concurrent\r\nStart-Sleep -Seconds 2\r\nWrite-Host \"Total # of elements: $($result.count); Expected # of elements: $($result.end - $result.start + 1)\" -ForegroundColor Blue\r\nif($result.count -ne ($result.end - $result.start + 1)) {\r\n    Write-Host \"Missing Element Detected\" -ForegroundColor Red\r\n}\r\n``\r\n\r\n\r\n\r\n\n\n### Expected behavior\n\n```console\nTotal # of elements: 100001; Expected # of elements: 100001\n```\n\n\n### Actual behavior\n\n```console\nTotal # of elements: 99995; Expected # of elements: 100001\r\nMissing Element Detected\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.5\r\nPSEdition                      Core\r\nGitCommitId                    7.2.5\r\nOS                             Microsoft Windows 10.0.19044\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2022-08-20T00:01:17Z",
  "comments": [
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "It could be a threading issue where doing `($using:result).count += 1` is encountering a race condition where\r\n\r\n* Thread A gets value of result.count (1)\r\n* Thread B gets value of result.count (1) - this happens before Thread A increments the value but after it gets the original value\r\n* Thread A increments and sets value (2)\r\n* Thread B increments and sets value (2)\r\n\r\nNotice how instead of the value being 3 it's still 2.\r\n\r\nThe += is not an atomic operation so you can have threads stepping over each other at any point in time. The only real way to avoid such a thing is to use a locking mechanism, like a mutex, to ensure that the counter stages are incremented exclusively.\r\n\r\n```powershell\r\n$result = @{\r\n    start = 0\r\n    end = 100000\r\n    count = 0\r\n    concurrent = 100\r\n    lock = [System.Threading.Mutex]::new($false)\r\n}\r\n\r\n($result.start)..($result.end) | ForEach-Object -Parallel {\r\n    $null = ($using:result).lock.WaitOne()\r\n    try {\r\n        ($using:result).count += 1\r\n    }\r\n    finally {\r\n        ($using:result).lock.ReleaseMutex()\r\n    }\r\n} -ThrottleLimit $result.concurrent\r\n\r\n$result.count\r\n```\r\n\r\nThe downside of this approach is it slows down the parallel work because they need to essentially wait and run the things step by step rather than in parallel. If you can avoid it I will but if you need to access the same resource exclusively in parallel you have no other way.",
      "created_at": "2022-08-17T19:12:44Z",
      "updated_at": "2022-08-17T19:12:44Z"
    },
    {
      "author": "ALIENQuake",
      "author_association": "NONE",
      "body": "@jborean93 \r\nDoes using ConcurrentDictionary from [Thread Safe Collections](http://msdn.microsoft.com/en-us/library/dd997305(v=vs.110).aspx) and then TryGetValue,TryUpdate methods could work here? My attempt failed but I'm feeling that my code is just wrong.\r\n\r\nMore info: https://devblogs.microsoft.com/powershell/powershell-foreach-object-parallel-feature/\n\n<blockquote><img src=\"https://devblogs.microsoft.com/powershell/wp-content/uploads/sites/30/2018/09/Powershell_256.png\" width=\"48\" align=\"right\"><div><img src=\"https://devblogs.microsoft.com/powershell/wp-content/uploads/sites/30/2019/02/Powershell_2561.png\" height=\"14\"> PowerShell Team</div><div><strong><a href=\"https://devblogs.microsoft.com/powershell/powershell-foreach-object-parallel-feature/\">PowerShell ForEach-Object Parallel Feature</a></strong></div><div>PowerShell ForEach-Object Parallel Feature PowerShell 7.0 Preview 3 is now available with a new ForEach-Object Parallel Experimental feature. This feature is a great new tool for parallelizing work, but like any tool, it has its uses and drawbacks. This article describes this new feature,</div></blockquote>",
      "created_at": "2022-08-18T00:28:08Z",
      "updated_at": "2022-08-18T00:28:10Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "At least here I don't think so, `+=` isn't an atomic operation, the code still needs to:\r\n\r\n* Get the original value from the dict\r\n* Increment the value\r\n* Set the new value to the dict\r\n\r\nThe problem is the getting and setting are 2 distinct operations. If those types had something like `($using:result).TryUpdate('count', {$_ + 1})` where the TryUpdate is doing the locking internally and calling the delegate to update the value but AFAIK this isn't possible through any builtin type.\r\n\r\nWhat you could do is use something like a `ConcurrentBag` and just add a random value and get the final count at the end\r\n\r\n```powershell\r\n$result = @{\r\n    start = 0\r\n    end = 100000\r\n    count = [System.Collections.Concurrent.ConcurrentBag[Object]]::new()\r\n    concurrent = 100\r\n}\r\n\r\n($result.start)..($result.end) | ForEach-Object -Parallel {\r\n    ($using:result).count.Add($null)\r\n} -ThrottleLimit $result.concurrent\r\n\r\n$result.count.Count\r\n```\r\n\r\nThe downside is you now have a collection storing useless values and taking up memory for no reason. It still does the locking for you internally so technically simpler code.\r\n\r\nDepending on OPs use case it may be possible, it sounds like this is just an example to reproduce their problem and they have an actual scenario that may find some use using some of the thread safe collections. But without knowing what the actual scenario is it's hard to recommend something.",
      "created_at": "2022-08-18T00:39:53Z",
      "updated_at": "2022-08-18T00:41:29Z"
    },
    {
      "author": "pirion",
      "author_association": "NONE",
      "body": "> Depending on OPs use case it may be possible, it sounds like this is just an example to reproduce their problem and they have an actual scenario that may find some use using some of the thread safe collections. But without knowing what the actual scenario is it's hard to recommend something.\r\n\r\nExactly as you said, use case of what we're doing here calling a child script with various parameters. Co-worker running this was using latest and was finding that various instances were missing, so this was an attempt to put together a test case that would show the issue without all the overhead. I've made note of the thread safety issue and will reattempt with that in place to ensure it is still occurring in our environment. ",
      "created_at": "2022-08-18T12:53:15Z",
      "updated_at": "2022-08-18T12:53:15Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-08-20T00:01:16Z",
      "updated_at": "2022-08-20T00:01:16Z"
    }
  ],
  "created_at": "2022-08-17T15:36:10Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered",
    "Needs-Triage"
  ],
  "number": 17914,
  "state": "closed",
  "title": "ForEach-Object -parallel missing elements during durn",
  "updated_at": "2022-08-20T00:01:17Z"
}