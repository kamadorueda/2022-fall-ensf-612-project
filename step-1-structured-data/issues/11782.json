{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11782",
  "author": "RG255",
  "body": "```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-rc.2\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-rc.2\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nThe code in the attached script runs OK on V5 but generates the following error on V7:\r\n```\r\nMethodInvocationException: S:\\PowerShellScripts\\TestUserIngroup_1.ps1:5\r\nLine |\r\n   5 |  \u2026 t -Process {$_.GetType().InvokeMember('Name', 'GetProperty', $null, $ \u2026\r\n     |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     | Exception calling \"InvokeMember\" with \"5\" argument(s): \"Unknown name. (0x80020006 (DISP_E_UNKNOWNNAME))\"\r\n```\r\n#### The script:\r\n```powershell\r\n$user = $env:USERNAME\r\n$group = 'Users'\r\n$groupObj = [ADSI]\"WinNT://./$group,group\"\r\n$membersObj = @($groupObj.psbase.Invoke('Members'))\r\n$members = ($membersObj | ForEach-Object -Process {$_.GetType().InvokeMember('Name', 'GetProperty', $null, $_, $null)})\r\n\r\nIf ($members -contains $user) \r\n{Write-Host -Object \"$user exists in the group $group\"}\r\nElse \r\n{Write-Host -Object \"$user does not exists in the group $group\"}\r\n```\r\n\r\n[TestUserIngroup_1.zip](https://github.com/PowerShell/PowerShell/files/4160919/TestUserIngroup_1.zip)\r\n",
  "closed_at": "2020-02-10T21:24:51Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SeeminglyScience Have you any thoughts?",
      "created_at": "2020-02-06T11:19:51Z",
      "updated_at": "2020-02-06T11:19:51Z"
    },
    {
      "author": "RG255",
      "author_association": "NONE",
      "body": "I am somewhat new to GitHub so I am not sure what you are expecting when you say \"Have you any thoughts\" My only thought at this time would be expecting it to work on PSV7* or there to be a better/alternative way to achieve the same result?",
      "created_at": "2020-02-06T12:12:44Z",
      "updated_at": "2020-02-06T12:12:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@RG255 References like \"@RG255\" means contacting the owner of this name. So my question was for @SeeminglyScience who could share useful thoughts about the issue.\r\nYou could look other issues/discussion in the repo to get more experience about workflows.",
      "created_at": "2020-02-06T12:32:13Z",
      "updated_at": "2020-02-06T12:33:23Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov Looks like PowerShell isn't able to determine that [`IADsMembers`](https://docs.microsoft.com/en-us/windows/win32/api/iads/nn-iads-iadsmembers) (the collection returned by `Members`) is enumerable.  So instead of `$membersObj` enumerating into member objects like in Windows PowerShell, the attempt is made to call a `Name` property on the `IADsMembers` interface which doesn't exist.\r\n\r\nYou can kinda see this by attempting to get the property `Count` instead, which will throw not implemented instead of unknown name.",
      "created_at": "2020-02-06T14:51:55Z",
      "updated_at": "2020-02-06T14:51:55Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "So playing with it a bit, my guess is that this happens because if you query `IDispatch.GetIDsOfNames` with the names `_NewEnum` and `ppEnumerator` then that exception is thrown.  *However*, if you *manually* invoke `GetIDsOfNames` with a preserved sig (no automatic HResult handling) you'll see the HResult above returned, but it'll also show [`DISPID_NEWENUM`](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/automat/dispid-constants) for `_NewEnum`.  If `_NewEnum` was really not found, it would be `-1`.\r\n\r\nNot sure atm where this needs to be fixed though.\r\n\r\n<details>\r\n<summary>Tested with this code, click to expand</summary>\r\n\r\n```powershell\r\nAdd-Type -TypeDefinition '\r\n    using System;\r\n    using System.Runtime.InteropServices;\r\n    using System.Runtime.InteropServices.ComTypes;\r\n\r\n    namespace Testing\r\n    {\r\n        public class DispatchWrapper\r\n        {\r\n            private readonly IDispatch _real;\r\n\r\n            internal DispatchWrapper(IDispatch real) => _real = real;\r\n\r\n            public static DispatchWrapper Create(object obj) => new DispatchWrapper((IDispatch)obj);\r\n\r\n            public int GetTypeInfoCount(out int info) => _real.GetTypeInfoCount(out info);\r\n\r\n            public int GetTypeInfo(int iTInfo, int lcid, out ITypeInfo ppTInfo) => _real.GetTypeInfo(iTInfo, lcid, out ppTInfo);\r\n\r\n            public int GetIDsOfNames(Guid iid, string[] rgszNames, int cNames, int lcid, int[] rgDispId)\r\n                => _real.GetIDsOfNames(iid, rgszNames, cNames, lcid, rgDispId);\r\n\r\n            public void Invoke(\r\n                int dispIdMember,\r\n                Guid iid,\r\n                int lcid,\r\n                INVOKEKIND wFlags,\r\n                DISPPARAMS[] paramArray,\r\n                out object pVarResult,\r\n                out EXCEPINFO pExcepInfo,\r\n                out uint puArgErr)\r\n                => _real.Invoke(\r\n                    dispIdMember,\r\n                    iid,\r\n                    lcid,\r\n                    wFlags,\r\n                    paramArray,\r\n                    out pVarResult,\r\n                    out pExcepInfo,\r\n                    out puArgErr);\r\n        }\r\n\r\n        [Guid(\"00020400-0000-0000-c000-000000000046\")]\r\n        [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]\r\n        [ComImport]\r\n        internal interface IDispatch\r\n        {\r\n            [PreserveSig]\r\n            int GetTypeInfoCount(out int info);\r\n\r\n            [PreserveSig]\r\n            int GetTypeInfo(int iTInfo, int lcid, out ITypeInfo ppTInfo);\r\n\r\n            [PreserveSig]\r\n            int GetIDsOfNames(\r\n                [MarshalAs(UnmanagedType.LPStruct)] Guid iid,\r\n                [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPWStr)] string[] rgszNames,\r\n                int cNames,\r\n                int lcid,\r\n                [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.I4)] [Out] int[] rgDispId);\r\n\r\n            void Invoke(\r\n                int dispIdMember,\r\n                [MarshalAs(UnmanagedType.LPStruct)] Guid iid,\r\n                int lcid,\r\n                INVOKEKIND wFlags,\r\n                [MarshalAs(UnmanagedType.LPArray)] [In] [Out] DISPPARAMS[] paramArray,\r\n                out object pVarResult,\r\n                out EXCEPINFO pExcepInfo,\r\n                out uint puArgErr);\r\n        }\r\n    }'\r\n\r\n$group = 'Users'\r\n$groupObj = [ADSI]\"WinNT://./$group,group\"\r\n$membersObj = @($groupObj.psbase.Invoke('Members'))\r\n$disp = [Testing.DispatchWrapper]::Create($membersObj[0])\r\n$nullGuid = [activator]::CreateInstance([guid])\r\n$enUS = [cultureinfo]::CurrentCulture.LCID\r\n$namesToQuery = '_NewEnum', 'ppEnumerator'\r\n$dispIds = [int[]]::new($namesToQuery.Length)\r\n$hr = $disp.GetIDsOfNames($nullGuid, $namesToQuery, $namesToQuery.Length, $enUS, $dispIds)\r\n\r\n'HResult: 0x{0:X}' -f $hr\r\nfor ($i = 0; $i -lt $namesToQuery.Length; $i++) {\r\n    '{0} ID: {1}' -f $namesToQuery[$i], $dispIds[$i]\r\n}\r\n```\r\n\r\nShould return:\r\n\r\n```raw\r\nHResult: 0x80020006\r\nDispIDs: -4, -1\r\n```\r\n</details>",
      "created_at": "2020-02-06T16:09:44Z",
      "updated_at": "2020-02-06T16:09:44Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Another update, here's the code that needs to change:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/e2f838e3c5baabffc4d14fa747902d18628044bc/src/System.Management.Automation/engine/COM/ComUtil.cs#L426-L439\r\n\r\n\r\nIt fails because `IADsMembers` implements `IDispatch`, but throws `E_NOTIMPL` when trying to get type info.  The other members work fine though.\r\n\r\nInstead of (or in addition to) querying type info, it needs to directly invoke `GetIDsOfNames` with two names. The first has to be `_NewEnum` and the second can apparently be anything.  It needs two though, otherwise it returns unknown. If the first ID is `DISPID_NEWENUM` then `_NewEnum` can be invoked. The `GetIDsOfNames` implementation *needs* `PreserveSig` and it's return type changed to `int`.  If `DISPID_NEWENUM` is found and the HResult is `DISP_E_UNKNOWNNAME`, then the `HResult` should be ignored.\r\n\r\nExample invoke using the above code in the `details` pane:\r\n\r\n```powershell\r\n$results = $null\r\n$excep = [Activator]::CreateInstance([Runtime.InteropServices.ComTypes.EXCEPINFO])\r\n$argErr = 0u;\r\n$disp.Invoke(-4, $nullGuid, $enUS, 'INVOKE_PROPERTYGET', @(), [ref] $res, [ref] $excep, [ref] $argErr)\r\n\r\n# yield\r\n$results\r\n```\r\n\r\nWhich returns:\r\n\r\n```raw\r\nSystem.__ComObject\r\nSystem.__ComObject\r\nSystem.__ComObject\r\nSystem.__ComObject\r\nSystem.__ComObject\r\nSystem.__ComObject\r\n```",
      "created_at": "2020-02-06T16:43:35Z",
      "updated_at": "2020-02-06T17:05:47Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "/cc @SteveL-MSFT I'm pretty sure I've seen quite a few folks on with similar issues on the PS slack.  This might be the first issue for it here, but it's potentially very impactful for folks still using COM objects frequently (and who aren't super likely to be vocal here). If possible, it may be worth resolving before 7.0 GA.",
      "created_at": "2020-02-06T16:53:38Z",
      "updated_at": "2020-02-06T16:53:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SeeminglyScience Thanks for your investigations! \r\nI think we need to have more tests for COM interactions.\r\n",
      "created_at": "2020-02-06T17:00:49Z",
      "updated_at": "2020-02-06T17:00:49Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Thanks @SeeminglyScience for analyzing the issue and pinpoint the cause \u2764\ufe0f \r\n\r\nThe `ComEnumerator` was introduced back in early .NET Core 2.0 preview period of time (#4553), because `GetEnumerator()` didn't work on COM object even if the object can be cast to `IEnumerable` and .NET Core team said it was by design at the time (https://github.com/dotnet/runtime/issues/21690).\r\nWith .NET Core 3.1, `GetEnumerator()` works on the COM objects that can be cast to `IEnumerable` \ud83c\udf89\r\n\r\nHowever, for the COM object that can be cast to `IEnumerator`, exception is thrown when calling `MoveNext()` on it. \r\nSo we still need the `ComEnumerator`, but much simplified to just cover the case where the COM object implements `COM.IEnumVARIANT` interface.\r\n\r\nPR was submitted: #11795",
      "created_at": "2020-02-07T00:05:31Z",
      "updated_at": "2020-02-07T00:20:36Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #11795, which has now been successfully released as `v7.0.0-rc.3`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-rc.3)\n",
      "created_at": "2020-02-21T23:55:48Z",
      "updated_at": "2020-02-21T23:55:48Z"
    }
  ],
  "created_at": "2020-02-05T17:00:05Z",
  "labels": [
    "WG-Engine",
    "Resolution-Fixed"
  ],
  "number": 11782,
  "state": "closed",
  "title": "Code OK on V5.1 does not run on V7.0.0RC2",
  "updated_at": "2020-02-21T23:55:48Z"
}