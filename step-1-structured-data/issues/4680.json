{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4680",
  "author": "bigboy-pdb-spam",
  "body": "Steps to reproduce\r\n------------------\r\n\r\n```powershell\r\nPS> touch ab.txt 'a b.txt'\r\n\r\n# Question mark character works\r\n\r\nPS> find -name 'a?.txt'\r\nab.txt\r\n\r\nPS> find -name 'a??.txt'\r\na b.txt\r\n\r\n# Asterisk appears to be being expanded into file names\r\n\r\nPS> find -name 'a*b.txt'\r\n/usr/bin/find: paths must precede expression: ab.txt\r\nUsage: /usr/bin/find [-H] [-L] [-P] [-Olevel] [-D help|tree|search|stat|rates|opt|exec|time] [path...] [expression]\r\n\r\n# Escaping asterisk doesn't work\r\n\r\nPS> find -name 'a`*b.txt'\r\n# No output, which indicates the parameters were accepted, but the search produced no results.\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```powershell\r\nPS> find -name 'a*b.txt'\r\n./ab.txt\r\n./a b.txt\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```powershell\r\nPS> find -name 'a*b.txt'\r\n/usr/bin/find: paths must precede expression: ab.txt\r\nUsage: /usr/bin/find [-H] [-L] [-P] [-Olevel] [-D help|tree|search|stat|rates|opt|exec|time] [path...] [expression]\r\n```\r\nIt appears that the command is being converted into: find -name 'a b.txt' 'ab.txt'\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value                                           \r\n----                           -----                                           \r\nPSVersion                      6.0.0-beta                                      \r\nPSEdition                      Core                                            \r\nGitCommitId                    v6.0.0-beta.6                                   \r\nOS                             Linux 4.4.0-92-generic #115-Ubuntu SMP Thu Au...\r\nPlatform                       Unix                                            \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                         \r\nPSRemotingProtocolVersion      2.3                                             \r\nSerializationVersion           1.1.0.1                                         \r\nWSManStackVersion              3.0 \r\n```\r\n",
  "closed_at": "2017-11-19T00:34:59Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Yes, globbing currently mistakenly also kicks in when the pattern is _quoted_.\r\nA simpler example:\r\n\r\n```powershell\r\nprintf '%s\\n' '*'  # '*' is expanded despite being quoted; in Bash, a literal '*' would print.\r\n```\r\n\r\nThis was previously reported in #3931, and a fix is pending: #4489\r\n",
      "created_at": "2017-08-27T12:55:19Z",
      "updated_at": "2017-08-27T12:55:19Z"
    },
    {
      "author": "bigboy-pdb-spam",
      "author_association": "NONE",
      "body": "According to that issue, the asterisk can be escaped using the backquote character, which appears to work for that case:\r\n\r\n```powershell\r\nPS> echo '11:1' | grep '.`*:.'\r\n11:1\r\n```\r\n\r\nHowever, in the examples that were listed for this issue, using the backquote produced no results, but the command should have displayed the two newly created files.\r\n\r\n```powershell\r\nPS> touch ab.txt 'a b.txt'\r\nPS> find -name 'a`*b.txt'\r\n# No output, but should output the file names:\r\n# ./ab.txt\r\n# ./a b.txt\r\n```\r\n\r\nI'll try this example in the next beta and close this issue if the problem is solved.\r\n\r\n**EDIT**: I've changed the name of this isssue to highlight the problem involving the quoted and escaped asterisk. If there's a better name, please let me know, or you can update the title if you'd like.",
      "created_at": "2017-08-27T16:21:42Z",
      "updated_at": "2017-08-27T16:26:14Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "`'...'` in PS encloses _literals_, and the newly introduced native globbing feature should treat them as such too. Not doing so is a _bug_.\r\n(As is the interpretation of globbing patterns inside _double-quoted_ PS strings).\r\n\r\nIn short: **Using `` ` `` inside `'...'` before wildcard metacharacters is not a general workaround, nor should it be.**\r\n\r\nAdding a `` ` `` (backtick) before `*` disrupts the newly introduced PS-side globbing, but the `` ` `` character is _passed through_ to the target utility, which is undesired.  \r\n(In PS, backticks only function as escape characters in _unquoted_ or _double-quoted_ strings.)\r\n\r\n```powershell\r\nPS> printf '%s\\n' '`*'\r\n`*   # ` was retained\r\n```\r\n\r\nIt explains why your `` find -name 'a`*b.txt' `` workaround attempt didn't work.\r\n\r\n\r\nThe `` ` `` is also passed through in your `grep` example - it just _happens_ to work even with the `` ` `` present, but that is _unrelated to the issue at hand_; you get the same behavior in `bash`:\r\n\r\n```powershell\r\n# PS\r\nPS> echo 'a' | grep '.`*'\r\na\r\n\r\n# Bash\r\n$ echo 'a' | grep '.`*'  # !! effectively treated as '.*'\r\na\r\n```\r\n\r\nFor reasons I don't understand, placing a `` ` ``  before regex duplication symbols `*` and `?` causes the `` ` `` to be ignored.\r\n",
      "created_at": "2017-08-27T17:48:14Z",
      "updated_at": "2017-08-27T18:03:50Z"
    }
  ],
  "created_at": "2017-08-27T02:47:45Z",
  "labels": [
    "Resolution-Duplicate"
  ],
  "number": 4680,
  "state": "closed",
  "title": "In Linux, Find Command Fails Even With Quoted and Escaped Asterisk",
  "updated_at": "2017-11-19T00:34:59Z"
}