{
  "_url": "https://github.com/PowerShell/PowerShell/issues/716",
  "author": "jpsnover",
  "body": "So we should implement it.\n",
  "closed_at": "2017-05-19T20:16:17Z",
  "comments": [
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Like Bash's background job ampersand, or PowerShell's call operator ampersand? I thought we had the latter.\n",
      "created_at": "2016-03-21T15:37:59Z",
      "updated_at": "2016-03-21T15:37:59Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "like Bash's; Today the token '&' at the end of a line results in the following:\nAt line:1 char:4\n- ls &\n-    ~\n  The ampersand (&) character is not allowed. The & operator is reserved for future use; wrap an ampersand in double quotation marks (\"&\") to pass it as part of a string.\n  - CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException\n  - FullyQualifiedErrorId : AmpersandNotAllowed\n\nHowever, I think that '&' on its own is not as interesting as real job control. It would be nice to take this opportunity to implement _that_ :)\n",
      "created_at": "2016-03-21T16:55:33Z",
      "updated_at": "2016-03-21T16:55:33Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Ah, this isn't even supported in full PowerShell. Gotcha.\n",
      "created_at": "2016-03-21T16:58:11Z",
      "updated_at": "2016-03-21T16:58:11Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Fish-shell doesn't have this capability.\nRelated issue in their repo https://github.com/fish-shell/fish-shell/issues/563\n",
      "created_at": "2016-05-15T06:34:18Z",
      "updated_at": "2016-07-30T02:22:29Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Summary of UX sync discussion:\n- The complete solution Ctrl+Z, job control (fg/bg support) is an uncosted work item and can't be done by MVP (even though we'd absolutely like to do it eventually). @BrucePay is going to cost the full work.  \n- The full solution won't work on Windows (no SIGSTOP/SIGHUP). \n- If the uncosted \"full solution\" can't be done by MVP, one option is to just add some syntactic sugar that invokes Start-Process when the `&` is caught. This would also work on Windows \n- Another option is to change the current error thrown when a trailing `&` is used to tell the user to use Start-Process/`start`. This would also work on Windows.\n\nIn the event that the uncosted work is too expensive, would either of these alternatives be acceptable for an MVP? \n",
      "created_at": "2016-05-16T18:26:01Z",
      "updated_at": "2016-05-16T18:26:01Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "FWIW the latest insiders build of VS Code forks and execs properly, so it doesn't block the shell.\n",
      "created_at": "2016-05-18T22:06:27Z",
      "updated_at": "2016-05-18T22:06:27Z"
    },
    {
      "author": "oising",
      "author_association": "CONTRIBUTOR",
      "body": "Hah... I remember a couple of years ago trying to see how this kind of thing could be hacked into v2 - it's a little tricky it seems to be consistent about this given that cmdlets are inproc and stuff like the gnu utils run out of process. That's not the say there might not be a away to manage both styles of commands with a trailing ampersand. \n\nWhat I took out of my tinkering was that to support emulation of bg/fg, you'd have to implement a way to detach busy runspaces from the host UI, effectively letting them buffer into their streams collections (debug, verbose, warning, error, output etc.) until reattached. Wrap detached runspaces up as Jobs, and allow enumeration of them via a jobsourceadapter. The unix equivalent command for showing bg procs is \"jobs\" which also could alias to get-job. A detached runspace might host a native binary (out of proc) or an inproc (cmdlet) running in a pipeline and when I say native binary, I'm generally thinking about text-emitting commands rather than GUI-mode binaries (which I think on windows powershell should always run asynchronously by default.)\n\nWith respect to on-demand suspending with ctrl+z, I think this could be emulated with a global hook on windows or some kind of watchdog thread, but I think due to the lack of sighup, windows bg'd runspaces would not suspend, but instead go straight into the background. I think this is a tolerable difference. Thread.Suspend is obsolete and non-deterministic/passive anyway from a job-control perspective - you've no idea when a child thread might be ready to yield. \n\nI'd imagine that the trailing ampersand token may well just be handled with a parser hack or some extension to psreadline's line parsing, but the latter wouldn't handle ampersands in scripts, but it might be a good first stab for prototyping (e.g. only support interactive fg/fg/&) \n",
      "created_at": "2016-08-01T18:54:35Z",
      "updated_at": "2016-08-17T08:28:35Z"
    },
    {
      "author": "pirate",
      "author_association": "NONE",
      "body": "Apart from seeming a bit hacky, are there real, practical downsides to implementing `&` in fish using bash as a subshell spawner?\n\n``` bash\nfunction background --description \"Run a fish command in the background using a bash subshell\"\n    bash -c \"fish -c '\"\"$argv\"\"' &\"\nend\n\nbackground \"sleep 5; echo hi\"\n```\n\nThis `background` implementation appears to have exactly the behavior I'd expect from native `&`.\n",
      "created_at": "2016-10-28T01:43:27Z",
      "updated_at": "2016-10-28T01:43:27Z"
    },
    {
      "author": "jombooth",
      "author_association": "NONE",
      "body": "@pirate yes; the process launched by \"background\" will not have access to unexported variables or user-defined functions in fish. Same would apply to a PowerShell implementation that worked this way.\r\n\r\n```shell\r\nuser@user /> function background\r\n                        bash -c \"fish -c '\"\"$argv\"\"' &\"\r\n                      end\r\n\r\nuser@user /> function sayhello\r\n                        echo hello\r\n                      end\r\n\r\nuser@user /> sayhello\r\nhello\r\nuser@user /> background sayhello\r\n... fish: Unknown command \u201csayhello\u201d\r\nStandard input: sayhello\r\n```",
      "created_at": "2017-02-06T03:24:41Z",
      "updated_at": "2017-02-06T03:24:41Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "This has been merged #3360 ",
      "created_at": "2017-05-19T20:16:17Z",
      "updated_at": "2017-05-19T20:16:17Z"
    },
    {
      "author": "oising",
      "author_association": "CONTRIBUTOR",
      "body": "Looking forward to trying this out!\n\nSent from my Windows 10 phone\n\nFrom: Bruce Payette<mailto:notifications@github.com>\nSent: Friday, May 19, 2017 4:16 PM\nTo: PowerShell/PowerShell<mailto:PowerShell@noreply.github.com>\nCc: Oisin Grehan<mailto:oising@gmail.com>; Comment<mailto:comment@noreply.github.com>\nSubject: Re: [PowerShell/PowerShell] Implement the use of `&` to background a command (#716)\n\n\nThis has been merged #3360<https://github.com/PowerShell/PowerShell/pull/3360>\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub<https://github.com/PowerShell/PowerShell/issues/716#issuecomment-302801021>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ABwjIVzZi9ul-Ls7_tHLVu5fCgGIsI7sks5r7fidgaJpZM4H1PoD>.\n",
      "created_at": "2017-05-20T18:34:58Z",
      "updated_at": "2017-05-20T18:34:58Z"
    }
  ],
  "created_at": "2016-03-21T15:13:47Z",
  "number": 716,
  "state": "closed",
  "title": "Implement the use of `&` to background a command",
  "updated_at": "2017-05-20T18:34:59Z"
}