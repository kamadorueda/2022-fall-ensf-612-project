{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5818",
  "author": "ffeldhaus",
  "body": "`Invoke-RestMethod` fails if the Header Value contains semicolons. This is true for the Amazon Webservice Authorization header (see SignedHeaders in https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html) used in all requests against AWS. This was working  in PowerShell before version 6.\r\n\r\nThe issue probably results from stricter checking in the [Add() method of the .NET Core HttpHeaders](https://github.com/dotnet/corefx/blob/c54cf8989aebe539ac9c7929fea14c4a0b62c721/src/System.Net.Http/src/System/Net/Http/Headers/HttpHeaders.cs#L67). Probably because there are many web services which use invalid characters in the header fields, [.NET Core allows to try adding headers without validation using TryAddWithoutValidation() method](https://github.com/dotnet/corefx/blob/c54cf8989aebe539ac9c7929fea14c4a0b62c721/src/System.Net.Http/src/System/Net/Http/Headers/HttpHeaders.cs#L145) which bypasses the issue.\r\n\r\nThe behavior of PowerShell is probably correct, but it is a deviation from the PowerShell 5 behavior and can cause PowerShell code which ran before failing with PowerShell 6. It should at least be considered to use TryAddWithoutValidation() instead of Add() for HTTP headers or give users an option to add invalid headers similar to what .NET Core provides.\r\n\r\nThe issue occurs on Windows and on Mac OS X, I haven't tested Linux, but should be the same.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nPS C:\\Program Files\\PowerShell\\6.0.0-rc.2> Invoke-RestMethod -Headers @{Authorization=\"AWS4-HMAC-SHA256 Credential=BKIAIFZADXUH5CBPUKVA/20180108/us-east-1/s3/aws4_request,SignedHeaders=host;x-amz-content-sha256;x-amz-date,Signature=4aa67ca58c1f619b11e8ec79293606f234f8875d3c9429cdb84864f9f65afe1a\"} -Uri https://httpbin.org/headers                                                                                                                                             \r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```powershell\r\nPS C:\\Program Files\\PowerShell\\6.0.0-rc.2> Invoke-RestMethod -Headers @{Authorization=\"AWS4-HMAC-SHA256 Credential=BKIAIFZADXUH5CBPUKVA/20180108/us-east-1/s3/aws4_request,SignedHeaders=host;x-amz-content-sha256;x-amz-date,Signature=4aa67ca58c1f619b11e8ec79293606f234f8875d3c9429cdb84864f9f65afe1a\"} -Uri https://httpbin.org/headers  | ConvertTo-Json                                                                                                                                                                                                                               \r\n{\r\n  \"headers\": {\r\n    \"Accept\": \"*/*\",\r\n    \"Authorization\": \"AWS4-HMAC-SHA256 Credential=BKIAIFZADXUH5CBPUKVA/20180108/us-east-1/s3/aws4_request,SignedHeaders=host;x-amz-content-sha256;x-amz-date,Signature=4aa67ca58c1f619b11e8ec79293606f234f8875d3c9429cdb84864f9f65afe1a\",\r\n    \"Connection\": \"close\",\r\n    \"Host\": \"httpbin.org\",\r\n    \"User-Agent\": \"Mozilla/5.0 (Macintosh; Darwin 17.3.0 Darwin Kernel Version 17.3.0: Thu Nov  9 18:09:22 PST 2017; root:xnu-4570.31.3~1/RELEASE_X86_64; de-DE) PowerShell/6.0.0\"\r\n  }\r\n}\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```powershell\r\nPS C:\\Program Files\\PowerShell\\6.0.0-rc.2> Invoke-RestMethod -Headers @{Authorization=\"AWS4-HMAC-SHA256 Credential=BKIAIFZADXUH5CBPUKVA/20180108/us-east-1/s3/aws4_request,SignedHeaders=host;x-amz-content-sha256;x-amz-date,Signature=4aa67ca58c1f619b11e8ec79293606f234f8875d3c9429cdb84864f9f65afe1a\"} -Uri https://httpbin.org/headers                                                                                                                                                                                                                                                 \r\nInvoke-RestMethod : The format of value 'AWS4-HMAC-SHA256 Credential=BKIAIFZADXUH5CBPUKVA/20180108/us-east-1/s3/aws4_request,SignedHeaders=host;x-amz-content-sha256;x-amz-date,Signature=4aa67ca58c1f619b11e8ec79293606f234f8875d3c9429cdb84864f9f65afe1a' is invalid.\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPS C:\\Program Files\\PowerShell\\6.0.0-rc.2> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-rc.2\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-rc.2\r\nOS                             Microsoft Windows 10.0.16299\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
  "closed_at": "2018-01-08T13:59:06Z",
  "comments": [
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "For RFC defined headers, strict header parsing is now enabled by default. You can disable strict header validation with the `-SkipHeaderValidation` parameter on both `Invoke-WebRequest` and `Invoke-RestMethod`.\r\n\r\nYou can read more about this and more of the differences in PSCore's Web Cmdlets here https://get-powershellblog.blogspot.com/2017/11/powershell-core-web-cmdlets-in-depth.html#L08\r\n  ",
      "created_at": "2018-01-08T13:59:06Z",
      "updated_at": "2018-01-08T13:59:27Z"
    },
    {
      "author": "ffeldhaus",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the answer. Makes sense to do a stricter header validation, I just didn't know about `-SkipHeaderValidation` and enabling it by default may break a few scripts / modules.\r\n\r\nFor the documentation, if someone else hits this issue, existing Scripts / Modules can globally enable header validation skipping to bring back the same behaviour as in PowerShell before version 6 with\r\n\r\n    if ($PSVersionTable.PSVersion.Major -ge 6) {\r\n        $PSDefaultParameterValues.Add(\"Invoke-RestMethod:SkipHeaderValidation\",$true)\r\n    }",
      "created_at": "2018-01-10T08:08:07Z",
      "updated_at": "2018-01-10T08:08:07Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": ">  enabling it by default may break a few scripts / modules.\r\n\r\nCorrect. But, this is one of many breaking changes between PSCore and Windows PowerShell.\r\n\r\nAlso, The conditional logic is not even needed. As I pointed out in my blog you can just do this:\r\n\r\n```powershell\r\n$PSDefaultParameterValues['Invoke-RestMethod:SkipHeaderValidation'] = $true\r\n$PSDefaultParameterValues['Invoke-WebRequest:SkipHeaderValidation'] = $true\r\n```\r\n\r\nin both 6.0.0 and 5.1. `$PSDefaultParameterValues` options will be ignored when a parameter doesn't exist.",
      "created_at": "2018-01-10T10:18:53Z",
      "updated_at": "2018-01-10T10:18:53Z"
    }
  ],
  "created_at": "2018-01-08T13:20:56Z",
  "number": 5818,
  "state": "closed",
  "title": "Invoke-RestMethod fails when Header Value includes Semicolon",
  "updated_at": "2018-01-10T10:18:53Z"
}