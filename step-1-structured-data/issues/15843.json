{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15843",
  "author": "iRon7",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nIndexing keys in a hash table does make much sense as the keys are unordered by design.\r\nBut are expected to work on an [`[ordered]`](https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_hash_tables#creating-ordered-dictionaries) dictionary.\r\n\r\n```PowerShell\r\n$a = [ordered]@{ a = 1; b = 2; c = 3 }\r\n$a.Keys[0] # $a.get_Keys()[0]\r\n$a.Keys[1] # $a.get_Keys()[1]\r\n```\r\n\r\n\r\n\r\n\r\n\r\n### Expected behavior\r\n\r\n```console\r\n# Index 0 return a\r\n$a.Keys[0] # $a.get_Keys()[0]\r\na\r\n\r\n# Index 1 return b\r\n$a.Keys[1] # $a.get_Keys()[1]\r\nb\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\n# Index 0 returns all keys\r\n$a.Keys[0] # $a.get_Keys()[0]\r\na\r\nb\r\nc\r\n\r\n# Index 1 and successive indices return $Null\r\n$a.Keys[1] # $a.get_Keys()[1]\r\n```\r\n\r\n\r\n### Error details\r\n\r\n```console\r\nNo errors (unless strict mode is set)\r\n```\r\n\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nThe same issue exists in **Windows PowerShell 5.1**\r\nRelated:\r\n\r\n- [`#2861` Deserialized Ordered Dictionary via Import-Clixml is not numerically indexable](https://github.com/PowerShell/PowerShell/issues/2861)\r\n- [`#14791` [Ordered] doesn't fully support numeric keys](https://github.com/PowerShell/PowerShell/issues/14791)\r\n",
  "closed_at": "2021-07-30T08:45:29Z",
  "comments": [
    {
      "author": "scriptingstudio",
      "author_association": "NONE",
      "body": "a workaround\r\n```\r\n@($a.Keys)[0]\r\na\r\n```",
      "created_at": "2021-07-29T09:36:43Z",
      "updated_at": "2021-07-29T09:36:43Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "This would be a .NET issue, anyway; OrderedDictionary is a .NET type.\r\n\r\nThe type of the Keys property is `OrderedDictionaryKeyValueCollection` which apparently doesn't implement an indexer, so unless .NET adds one, there's only so much PowerShell can do there, I think.",
      "created_at": "2021-07-29T14:55:51Z",
      "updated_at": "2021-07-29T14:55:51Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "> This would be a .NET issue, anyway;\r\n\r\nDoes that mean that you like me to open a new issue at the .Net repository and close this one?",
      "created_at": "2021-07-29T15:01:40Z",
      "updated_at": "2021-07-29T15:01:40Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "You'd have to ask them to change the return type of `IDictionary.Keys` to `IList`.  You're welcome to open that issue, but fair warning that that is very unlikely.  It'd be a massive breaking change to a sort of out dated API.\r\n\r\nSome workarounds:\r\n\r\n```powershell\r\n([object[]]$dict.Keys)[0]\r\n\r\n$dict.Keys.ForEach{ $_ }[0]\r\n\r\n$keys = [object[]]::new($dict.Keys.Count)\r\n$dict.Keys.CopyTo($keys, 0)\r\n$keys[0]\r\n```",
      "created_at": "2021-07-29T17:09:53Z",
      "updated_at": "2021-07-29T17:09:53Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "I have transferred this into a .Net issue: [`#6517` Change the return type of `IDictionary.Keys` to `IList`](https://github.com/dotnet/core/issues/6517)",
      "created_at": "2021-07-30T08:45:29Z",
      "updated_at": "2021-07-30T08:45:29Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "@vexx32, can you/*the pwsh team* confirm my assumptions at related **.Net** issue: [`#6517` Change the return type of `IDictionary.Keys` to `IList`](https://github.com/dotnet/core/issues/6517)?",
      "created_at": "2021-10-15T14:04:32Z",
      "updated_at": "2021-10-15T14:04:32Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, pretty much anything that implements IList would be able to be indexed in PowerShell, so adding it to any ordered/sorted collection like that does make sense from our perspective.",
      "created_at": "2021-10-15T14:26:06Z",
      "updated_at": "2021-10-15T14:26:06Z"
    }
  ],
  "created_at": "2021-07-29T07:46:27Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 15843,
  "state": "closed",
  "title": "Ordered Dictionary keys are not numerically indexable",
  "updated_at": "2021-10-15T14:26:06Z"
}