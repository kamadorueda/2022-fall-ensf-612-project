{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9959",
  "author": "bigboy-pdb-spam",
  "body": "# Steps to reproduce\r\n\r\n```powershell\r\n1 | Out-File Script.ps1\r\n( ./Script.ps1; ./Script.ps1 ) | % { $_ } # Generates error\r\n# PS> $( ./Script.ps1; ./Script.ps1 ) | % { $_ } # Works (hack)\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\n1\r\n1\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nAt line:1 char:15\r\n+ ( ./Script.ps1; ./Script.ps1 ) | % { $_ }\r\n+               ~\r\nMissing closing ')' in expression.\r\nAt line:1 char:30\r\n+ ( ./Script.ps1; ./Script.ps1 ) | % { $_ }\r\n+                              ~\r\nUnexpected token ')' in expression or statement.\r\nAt line:1 char:32\r\n+ ( ./Script.ps1; ./Script.ps1 ) | % { $_ }\r\n+                                ~\r\nAn empty pipe element is not allowed.\r\n+ CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException\r\n+ FullyQualifiedErrorId : MissingEndParenthesisInExpression\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.1\r\nPSEdition                      Core\r\nGitCommitId                    6.2.1\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2019-06-20T18:44:01Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "The pipe isn't the problem here.\r\n\r\n>```( ./Script.ps1; ./Script.ps1 )```\r\n\r\nThis isn't valid syntax. Explicit linebreaks (semicolons) are not permitted inside parentheses _unless_ those parentheses form a subexpression `$( ... )` or an array subexpression `@( ... )`\r\n\r\nThis would work in a scriptblock as well, but you'd need to invoke the scriptblock with `&`:\r\n\r\n```& { ./script.ps1; ./script.ps1 } | % { $_ }```",
      "created_at": "2019-06-20T03:12:40Z",
      "updated_at": "2019-06-20T03:24:47Z"
    },
    {
      "author": "bigboy-pdb-spam",
      "author_association": "NONE",
      "body": "@vexx32 Thank you for the response.\r\n\r\nI would have expected that I can use semi-colons within brackets since I can use pipes within them. For example, `( ./Script.ps1 | ./Script.ps1 )`.",
      "created_at": "2019-06-20T18:43:44Z",
      "updated_at": "2019-06-20T18:43:44Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Understandable... Not sure what the rationale is there to be honest. Perhaps @bpayette could speak to that. :smile:",
      "created_at": "2019-06-20T18:50:40Z",
      "updated_at": "2019-06-20T18:50:53Z"
    }
  ],
  "created_at": "2019-06-20T02:43:38Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 9959,
  "state": "closed",
  "title": "Pipe Generates Error From Multiple Script Outputs",
  "updated_at": "2019-06-28T12:55:35Z"
}