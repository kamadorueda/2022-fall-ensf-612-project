{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8745",
  "author": "sba923",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->  \r\n\r\n## PR Summary\r\n\r\nFix #8315.\r\n\r\nPowerShell Core must \"expose\" the OneDrive placeholders so as to make all their attributes visible\r\n\r\nThis is done by changing the \"placeholder compatibility mode\" to PHCM_EXPOSE_PLACEHOLDERS\r\n\r\n## PR Context  \r\n\r\nWithout this change, PowerShell Core isn't backwards-compatible with Windows PowerShell: the attributes returned for OneDrive placeholders are not the same as in PS5.1\r\n\r\n## PR Checklist\r\n\r\n- [X] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [X] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [X] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.  \r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**  \r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [X] can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [ ] [Add `[feature]` to your commit messages if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2019-02-04T20:11:47Z",
  "comments": [
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "[![CLA assistant check](https://cla.opensource.microsoft.com/pull/badge/signed)](https://cla.opensource.microsoft.com/PowerShell/PowerShell?pullRequest=8745) <br/>All CLA requirements met.",
      "created_at": "2019-01-25T18:16:16Z",
      "updated_at": "2019-01-25T18:27:36Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Strange: I've updated the code, and CodeFactor (still) reports issues that refer to the previous version of the code... What am I missing?\r\n",
      "created_at": "2019-01-25T18:38:41Z",
      "updated_at": "2019-01-25T18:38:41Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Hmm... Looks like it's complaining mainly about the constants not being marked as internal/private/public. I think Ilya recommended they should all be `internal`?\r\n\r\nYou can probably ignore the complaints about names with underscores, though; I think that's a common style in this repo and they'll probably adjust the style rules for it sooner or later. \ud83d\ude04 ",
      "created_at": "2019-01-25T18:54:43Z",
      "updated_at": "2019-01-25T18:54:43Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "I was actually fighting... my git ignorance.\r\n\r\nNow that my changes have been pushed again, CodeFactor has run again and reports only 8 issues.\r\n\r\nChecking them out.",
      "created_at": "2019-01-25T19:03:29Z",
      "updated_at": "2019-01-25T19:03:29Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "My understanding of what I see is that CodeFactor issues are _blocking_, so I will have to get rid of those underscores!\r\n",
      "created_at": "2019-01-25T19:25:19Z",
      "updated_at": "2019-01-25T19:25:19Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@sba923 most of the time, yeah, but this isn't the first time I've seen it come up with issues that the PS team and maintainers don't necessarily agree with.\r\n\r\nIf you're more or less done (check that failing test on the Windows CI and see if you can figure that one out and resolve if it's something your changes might have affected), just remove the WIP flag and ping the codeowners for further review.\r\n\r\nIf those issues are a problem they'll let you know. \ud83d\ude42 ",
      "created_at": "2019-01-25T20:14:22Z",
      "updated_at": "2019-01-25T20:14:22Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "This is getting tough. I've tried commenting out the core of the change... and Windows CI doesn't fail anymore.\r\n\r\nThis means the \"placeholder mode\" has an impact on the behavior of `New-Item -Type Symboliclink`\u2026\r\n\r\nI'm going back to my C# test tool for the placeholder issue and see what I can understand from there.\r\n",
      "created_at": "2019-01-26T07:30:13Z",
      "updated_at": "2019-01-26T07:30:13Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "I think I'm gonna need some help...\r\n\r\n```\r\nCurrent placeholder compatibility mode: 1 (PHCM_DISGUISE_PLACEHOLDER)\r\nAttributes for 'C:\\Users\\steph\\OneDrive\\test\\alwaysavailable.xml': 0x00080020\r\nCreation of symbolic link 'c:\\temp\\link1' to 'd:\\tmp' with flags 1 FAILED\r\nCreation of symbolic link 'c:\\temp\\link2' to 'd:\\tmp' with flags 3 SUCCEEDED\r\nSetting placeholder compatibility mode to: 2 (PHCM_EXPOSE_PLACEHOLDERS)\r\nAttributes for 'C:\\Users\\steph\\OneDrive\\test\\alwaysavailable.xml': 0x00080420\r\nCreation of symbolic link 'c:\\temp\\link3' to 'd:\\tmp' with flags 1 FAILED\r\nCreation of symbolic link 'c:\\temp\\link4' to 'd:\\tmp' with flags 3 SUCCEEDED\r\n```\r\nEverything's expected (my machine has developer mode enabled).\r\n\r\nThe behavior of the `CreateSymlink()` is unaffected by the placeholder mode.\r\n\r\nHow could I debug that failing test in CI?",
      "created_at": "2019-01-26T07:54:26Z",
      "updated_at": "2019-01-26T07:54:48Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "??? reverted to the initial code, Windows CI now succeeds...\r\n",
      "created_at": "2019-01-26T09:13:04Z",
      "updated_at": "2019-01-26T09:13:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@sba923 \r\nCodeFactor is not mandatory.\r\nPlease use our code guidelines https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/coding-guidelines.md#naming-conventions\r\nMaintainers will ask you to fix style issues if needed.\r\n",
      "created_at": "2019-01-26T13:50:43Z",
      "updated_at": "2019-01-26T13:50:43Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "I've changed the code to get rid of the last two issues with underscores, but I could revert to the names from the SDK #define's to make the code more understandable. What do you think?",
      "created_at": "2019-01-26T13:57:07Z",
      "updated_at": "2019-01-26T13:57:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@sba923  Yes, our guidelines say:\r\n> The only exception is for interop code where the constant should exactly match the name and value of the code you are calling via interop (e.g. const int ERROR_SUCCESS = 0).",
      "created_at": "2019-01-26T14:00:27Z",
      "updated_at": "2019-01-26T14:00:27Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "OK, will change that back (which will bring two CodeFactor issues back).\r\n\r\nBTW you asked me earlier to change `sbyte` to `char` because https://docs.microsoft.com/en-us/cpp/dotnet/calling-native-functions-from-managed-code?view=vs-2017 says the managed type for `CHAR` is `char`. But for these particular APIs, some return values (that I don't use in the code for now) are negative, something `char` doesn't allow--that's why my prototype C# code was using `sbyte` (I was also following https://manski.net/2012/06/pinvoke-tutorial-passing-parameters-part-3/#marshalling-primitive-data-types . Should I stick to `char `or revert to `sbyte` to be \"more compatible with the underlying native APIs\" and more \"future proof\"?",
      "created_at": "2019-01-26T14:42:14Z",
      "updated_at": "2019-01-27T09:29:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@sba923 My understanding is that C++ CHAR is C# char and has 2 byte length so we can not use sbyte. I am ok with using char - we can always use cast to int to check result code.",
      "created_at": "2019-01-26T18:19:40Z",
      "updated_at": "2019-01-26T18:19:40Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov if the C++ CHAR has 2-byte length and as @sba923 says is returning some negative values in this instance, wouldn't a `short` type be preferable here?",
      "created_at": "2019-01-26T19:32:03Z",
      "updated_at": "2019-01-26T19:32:03Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "IIRC CHAR is a typedef for C/C++ char which is a signed 8-bit type, so *not* the same as C# char which is a UTF-16 2-byte character. TBC once I'm in front of my PC \ud83d\ude1c ",
      "created_at": "2019-01-26T21:12:06Z",
      "updated_at": "2019-01-26T21:12:06Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I expected that there is auto marshalling for char but it is not blittable. So you are right and it should be sbyte.",
      "created_at": "2019-01-27T09:31:44Z",
      "updated_at": "2019-01-27T09:31:44Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "OK. I'll revert to the initial code then ;-)",
      "created_at": "2019-01-27T10:13:59Z",
      "updated_at": "2019-01-27T10:13:59Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Outcome: 6 CodeFactor issues, status says \"1 failing check.\"\r\n\r\nThe PR is now waiting for the codeowners to review the change.\r\n",
      "created_at": "2019-01-27T12:23:32Z",
      "updated_at": "2019-01-27T12:23:32Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "IMVHO this is executed only once at provider initialization, so can't that remain as is?",
      "created_at": "2019-01-28T09:04:41Z",
      "updated_at": "2019-01-28T09:04:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> this is executed only once at provider initialization\r\n\r\nYes, it will be good but the class is created for every operation. I'd leave previous code with \"if\".",
      "created_at": "2019-01-28T10:19:29Z",
      "updated_at": "2019-01-28T10:21:28Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "I think you've lost me with \"the class is created for every operation.\"\r\n\r\nI've checked (with tracing) that this code (the `Start()` method of the filesystem provider) is called only once at PowerShell initialization.\r\n\r\nSo there's no performance impact of calling this `new()` to create the non-static `Version` object.\r\n\r\nIf by \"previous code with if\" you mean:\r\n\r\n```\r\n            if (((Environment.OSVersion.Version.Major == 10) && (Environment.OSVersion.Version.Build >= 17134)) ||\r\n                (Environment.OSVersion.Version.Major >= 11))\r\n```\r\n\r\nYes, this is probably slightly cheaper because this doesn't create a `Version` object and doesn't invoke `Version`'s overloaded `>=` operator.\r\n\r\nI made the change because someone made a similar change elsewhere in the very same file, and I found this more readable / elegant.",
      "created_at": "2019-01-28T19:40:27Z",
      "updated_at": "2019-01-28T19:40:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@sba923 FileSystemProvider is created for every file operation. ProviderInfo is create once per session. You put the fix in ProviderInfo so the fix is LGTM.",
      "created_at": "2019-01-29T06:54:23Z",
      "updated_at": "2019-01-29T06:54:23Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Everything's green, except for CodeFactor.\r\n\r\nWhat's still blocking the PR from merging?",
      "created_at": "2019-01-30T12:48:19Z",
      "updated_at": "2019-01-30T12:48:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@sba923 CodeFactor is not mandatory. @anmenaga was assigned so wait for his conclusion - merge or ask additional review.",
      "created_at": "2019-01-30T13:01:57Z",
      "updated_at": "2019-01-30T13:01:57Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "OK, fine.\r\n",
      "created_at": "2019-01-30T13:03:02Z",
      "updated_at": "2019-01-30T13:03:02Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "I've come up with the following crude test script to be used for non-CI / interactive testing:\r\n\r\n```\r\n# test fix for PowerShell Core issue #8315\r\n# https://github.com/PowerShell/PowerShell/issues/8315\r\n#\r\n# fix implemented by PR #8745\r\n# https://github.com/PowerShell/PowerShell/pull/8745\r\n#\r\n# Can't be tested by Windows CI since it lacks the proper environment\r\n# (OneDrive desktop client sync directory)\r\n\r\n$iswinps = ($null, 'Desktop') -contains $PSVersionTable.PSEdition\r\nif ($iswinps)\r\n{\r\n    Write-Host(\"This script requires PowerShell Core\")\r\n    Exit(1)\r\n}\r\n\r\n\r\nif ( `\r\n    ($null -ne $env:OneDrive) `\r\n    -and ($env:OneDrive -ne '') `\r\n    -and (Test-Path -LiteralPath $env:OneDrive -PathType Container) `\r\n)\r\n{\r\n    # create a test file under the OneDrive sync folder\r\n    $testfile = Join-Path -Path $env:OneDrive -ChildPath (\"pwsh-8315-test-file-{0:yyyyMMddHHmmss}.txt\" -f [datetime]::Now)\r\n    if (!(Test-Path -LiteralPath $testfile))\r\n    {\r\n        \"some data\" | Out-File -LiteralPath $testfile -Encoding utf8\r\n    }\r\n\r\n    # make the testfile \"Always available on this device\"\r\n    & attrib +P -U $testfile\r\n\r\n    # wait until end of sync so that attributes don't change between the two times they're retrieved below\r\n    Start-Sleep  -Seconds 15\r\n\r\n    # get the attributes using the current (PowerShell Core) host\r\n    $pscoreattributes = \"0x{0:x8}\" -f ([int](Get-Item -LiteralPath $testfile).Attributes)\r\n\r\n    # get the attributes using Windows PowerShell\r\n    $winpsattributes = & powershell -noprofile -command ('\"{0x{0:x8}}\" -f ([int] (Get-Item -LiteralPath \"' + $testfile + '\").Attributes)')\r\n\r\n    # check they're identical\r\n    if ($pscoreattributes -ne $winpsattributes)\r\n    {\r\n        Write-Host -ForegroundColor Red (\"FAILURE: PowerShell Core attributes for '{0}' = {1}, Windows PowerShell attributes = {2}\" -f $testfile, $pscoreattributes, $winpsattributes)\r\n    }\r\n    else\r\n    {\r\n        Write-Host -ForegroundColor Green (\"SUCCESS: PowerShell Core attributes for '{0}' = {1}, Windows PowerShell attributes = {2}\" -f $testfile, $pscoreattributes, $winpsattributes)\r\n    }\r\n\r\n    Remove-Item -Force -LiteralPath $testfile\r\n}\r\n\r\n```\r\nWould there be a way to add this to the codebase?\r\n",
      "created_at": "2019-01-31T06:10:07Z",
      "updated_at": "2019-01-31T06:10:07Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Code changes made.\r\n\r\n`.\\test\\common\\markdown\\markdown-link.tests.ps1` fails in CI but succeeds locally. What's going on?",
      "created_at": "2019-01-31T06:31:32Z",
      "updated_at": "2019-01-31T06:31:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I can not open https://blogs.msdn.microsoft.com/kebab/2013/06/09/an-introduction-to-error-handling-in-powershell/ - seems the site temporary broken in the time.",
      "created_at": "2019-01-31T06:57:25Z",
      "updated_at": "2019-01-31T06:57:25Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "How's that related to the failing test?",
      "created_at": "2019-01-31T07:00:41Z",
      "updated_at": "2019-01-31T07:00:41Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "How's that related to the failing test?",
      "created_at": "2019-01-31T07:00:44Z",
      "updated_at": "2019-01-31T07:00:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The link is from the fail test. Please ignore this - we'll restart the test later.",
      "created_at": "2019-01-31T07:04:53Z",
      "updated_at": "2019-01-31T07:04:53Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Oops... Hadn't checked what those links were...",
      "created_at": "2019-01-31T08:08:36Z",
      "updated_at": "2019-01-31T08:08:36Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Codacy has been pending for 7 hours... anything wrong there?\r\n\r\nWhat about my test script question?",
      "created_at": "2019-01-31T13:23:14Z",
      "updated_at": "2019-01-31T13:23:14Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Looking at a few other PRs, it seems Codacy reviews might have been disabled for the time being.\r\n\r\nNot sure about any kind of interactive test scripts, though. It might be worth looking into whether you can manually create a filesystem object with the placeholder attributes set, and then testing that the cmdlets properly retrieve that data back.",
      "created_at": "2019-01-31T13:26:13Z",
      "updated_at": "2019-01-31T13:26:13Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Codacy doesn't look disabled to me, it says \"Pending  \u2014 Hang in there, Codacy is reviewing your Pull request.\"\r\n\r\nI will look into the testing approach you're suggesting. The code I shared earlier assumes the test file is created under the OneDrive sync folder, which causes the OneDrive plumbing to set some of the attributes that get maskes by the \"placeholder compatibility\" mechanism. I could indeed try to create a file \"anywhere\" with those bits set, and see what PSCore and WinPS return for that same file.\r\n\r\n",
      "created_at": "2019-01-31T13:31:13Z",
      "updated_at": "2019-01-31T13:31:13Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, I'm sure if you push another commit it probably will go away. It's just an issue of Github only updating those when a commit is made, or the tool itself updates the status (which it won't if it's been disabled).",
      "created_at": "2019-01-31T13:36:56Z",
      "updated_at": "2019-01-31T13:36:56Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "Restarted 'PowerShell-CI-static-analysis' as the error is unrelated and was fixed by another PR.",
      "created_at": "2019-02-04T19:57:31Z",
      "updated_at": "2019-02-04T19:57:31Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "@sba923 Thank you for your contribution!",
      "created_at": "2019-02-04T20:12:55Z",
      "updated_at": "2019-02-04T20:12:55Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "You're very welcome!\r\n\r\nWe haven't addressed the question of potentially keeping my (interactive) test script somewhere in the source tree.... ",
      "created_at": "2019-02-04T20:25:36Z",
      "updated_at": "2019-02-04T20:25:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@adityapatwardhan Could you please help with the test? Make sense to add it?",
      "created_at": "2019-02-05T03:01:34Z",
      "updated_at": "2019-02-05T03:01:34Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Note that I haven't been able to find a way to create test files with the appropriate attributes, outside of the OneDrive client's sync folder, from the test script (yet). Without this, it's not possible to run the test in an automated way.\r\n\r\nFWIW, here's the current version of the script:\r\n\r\n```\r\n# test fix for PowerShell Core issue #8315\r\n# https://github.com/PowerShell/PowerShell/issues/8315\r\n#\r\n# fix implemented by PR #8745\r\n# https://github.com/PowerShell/PowerShell/pull/8745\r\n#\r\n# Can't be tested by Windows CI since it lacks the proper environment\r\n# (OneDrive desktop client sync directory)\r\n\r\n$iswinps = ($null, 'Desktop') -contains $PSVersionTable.PSEdition\r\nif ($iswinps)\r\n{\r\n    Write-Host -ForegroundColor Yellow (\"This script requires PowerShell Core\")\r\n    Exit(1)\r\n}\r\n\r\n\r\nif ($null -eq (Get-Process -Name 'OneDrive' -ErrorAction SilentlyContinue))\r\n{\r\n    Write-Host -ForegroundColor Yellow (\"OneDrive not running\")\r\n    Exit(1)\r\n}\r\n\r\nif ( `\r\n    ($null -ne $env:OneDrive) `\r\n        -and ($env:OneDrive -ne '') `\r\n        -and (Test-Path -LiteralPath $env:OneDrive -PathType Container) `\r\n)\r\n{\r\n    # create a test file under the OneDrive sync folder\r\n    $testfile = Join-Path -Path $env:OneDrive -ChildPath (\"pwsh-8315-test-file-{0:yyyyMMddHHmmss}.txt\" -f [datetime]::Now)\r\n    if (!(Test-Path -LiteralPath $testfile))\r\n    {\r\n        \"some data\" | Out-File -LiteralPath $testfile -Encoding utf8\r\n    }\r\n\r\n    # make the testfile \"Always available on this device\"\r\n    & attrib +P -U $testfile\r\n\r\n    # wait until end of sync so that attributes don't change between the two times they're retrieved below\r\n    Start-Sleep  -Seconds 15\r\n\r\n    # get the attributes using the current (PowerShell Core) host\r\n    $pscoreattributes = \"0x{0:x8}\" -f ([int](Get-Item -LiteralPath $testfile).Attributes)\r\n\r\n    # get the attributes using Windows PowerShell\r\n    $winpsattributes = & powershell -noprofile -command ('\"{0x{0:x8}}\" -f ([int] (Get-Item -LiteralPath \"' + $testfile + '\").Attributes)')\r\n\r\n    # check that the attributes contain at least one of the bits that are masked off if the placeholder mode is set to PHCM_DISGUISE_PLACEHOLDER\r\n    if (($winpsattributes -band ([System.IO.FileAttributes]::SparseFile -bor [System.IO.FileAttributes]::ReparsePoint)) -eq 0)\r\n    {\r\n        Write-Host -ForegroundColor Red (\"FAILURE: Cannot create suitable test file: attributes for '{0}' = {1}\", $testfile, $winpsattributes)\r\n    }\r\n    else\r\n    {\r\n        # check they're identical\r\n        if ($pscoreattributes -ne $winpsattributes)\r\n        {\r\n            Write-Host -ForegroundColor Red (\"FAILURE: PowerShell Core attributes for '{0}' = {1}, Windows PowerShell attributes = {2}\" -f $testfile, $pscoreattributes, $winpsattributes)\r\n        }\r\n        else\r\n        {\r\n            Write-Host -ForegroundColor Green (\"SUCCESS: PowerShell Core attributes for '{0}' = {1}, Windows PowerShell attributes = {2}\" -f $testfile, $pscoreattributes, $winpsattributes)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    Remove-Item -Force -LiteralPath $testfile\r\n}\r\n\r\n```",
      "created_at": "2019-02-05T06:05:01Z",
      "updated_at": "2019-02-05T06:05:01Z"
    }
  ],
  "created_at": "2019-01-25T06:27:38Z",
  "number": 8745,
  "state": "closed",
  "title": "Expose file attributes of OneDrive placeholders",
  "updated_at": "2019-02-05T06:05:01Z"
}