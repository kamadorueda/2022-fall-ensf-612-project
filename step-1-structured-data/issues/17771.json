{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17771",
  "author": "daxian-dbw",
  "body": "\r\n<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nThis is a follow-up change of #16355.\r\nThe strong reference to `Microsoft.PowerShell.Security` is not needed anymore after merging #16355.\r\n\r\nThere are whitespace only changes in the PR, so it's easier to review by ignoring the whitespaces:\r\nhttps://github.com/PowerShell/PowerShell/pull/17771/files?w=1\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/main/reference/7.3/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n",
  "closed_at": "2022-08-01T17:11:00Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems there are more dependences on the module :-) Easy to remove.",
      "created_at": "2022-07-26T05:20:15Z",
      "updated_at": "2022-07-26T05:23:58Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "/cc @iSazonov @SteveL-MSFT @JamesWTruher \r\n\r\nIt turns out **it's sort-of intentional** to load `Microsoft.PowerShell.Security.dll` eagerly.\r\nAfter this change (and #16355), loading of the `Microsoft.PowerShell.Security` module fails with the following error (see the [same failure in CI](https://dev.azure.com/powershell/PowerShell/_build/results?buildId=104943&view=logs&j=99798060-e5bf-55b9-b3b5-109e6acacce3&t=0050f0b1-14ee-5c4d-b4b0-da6405e3eaf0&l=1064)):\r\n\r\n```\r\nPS:1> Import-Module Microsoft.PowerShell.Security\r\nImport-Module: The following error occurred while loading the extended type data file:\r\n, C:\\arena\\Modules\\Microsoft.PowerShell.Security\\Security.types.ps1xml(19) : Error in type \"System.Security.AccessControl.ObjectSecurity\": The \"Type\" node must have \"Members\", \"TypeConverters\", or \"TypeAdapters\".\r\n, C:\\arena\\Modules\\Microsoft.PowerShell.Security\\Security.types.ps1xml(52) : Error: CodeProperty should use a getter or setter method.\r\n, C:\\arena\\Modules\\Microsoft.PowerShell.Security\\Security.types.ps1xml(53) : Error: Unable to find type [Microsoft.PowerShell.Commands.SecurityDescriptorCommandsBase].\r\n, C:\\arena\\Modules\\Microsoft.PowerShell.Security\\Security.types.ps1xml(45) : Error: CodeProperty should use a getter or setter method.\r\n, C:\\arena\\Modules\\Microsoft.PowerShell.Security\\Security.types.ps1xml(46) : Error: Unable to find type [Microsoft.PowerShell.Commands.SecurityDescriptorCommandsBase].\r\n, C:\\arena\\Modules\\Microsoft.PowerShell.Security\\Security.types.ps1xml(38) : Error: CodeProperty should use a getter or setter method.\r\n, C:\\arena\\Modules\\Microsoft.PowerShell.Security\\Security.types.ps1xml(39) : Error: Unable to find type [Microsoft.PowerShell.Commands.SecurityDescriptorCommandsBase].\r\n, C:\\arena\\Modules\\Microsoft.PowerShell.Security\\Security.types.ps1xml(31) : Error: CodeProperty should use a getter or setter method.\r\n, C:\\arena\\Modules\\Microsoft.PowerShell.Security\\Security.types.ps1xml(32) : Error: Unable to find type [Microsoft.PowerShell.Commands.SecurityDescriptorCommandsBase].\r\n, C:\\arena\\Modules\\Microsoft.PowerShell.Security\\Security.types.ps1xml(24) : Error: CodeProperty should use a getter or setter method.\r\n, C:\\arena\\Modules\\Microsoft.PowerShell.Security\\Security.types.ps1xml(25) : Error: Unable to find type [Microsoft.PowerShell.Commands.SecurityDescriptorCommandsBase].\r\n```\r\nThis is because the processing of `type.ps1xml` and `format.ps1xml` happens **before** loading `NestedModules`, and hence when the `type.ps1xml` references a type from the nested module, the type cannot be resolved when processing the `type.ps1xml`.\r\n\r\nThe [use-nested-module.zip](https://github.com/PowerShell/PowerShell/files/9204179/use-nested-module.zip) is a simple repro of this behavior. Unzip it, and run `import-Module <path-to>\\conflict` will demonstrate the problem.\r\n\r\n![image](https://user-images.githubusercontent.com/127450/181390301-a7fea4be-810b-46fc-9a1a-4d227da0af14.png)\r\n\r\nHowever, it will work fine when using `RootModule = 'conflict.dll'` instead of `NestedModules = @('conflict.dll')` in the module manifest. I believe the root module is specially handled with eager loading. ([use-root-module.zip](https://github.com/PowerShell/PowerShell/files/9204192/use-root-module.zip))\r\n\r\n![image](https://user-images.githubusercontent.com/127450/181390259-a9f31a8e-229e-427a-aaf1-c80a90c0e2c6.png)\r\n\r\nBoth PowerShell 7.0 and 7.2 has the same behavior. But on Windows PowerShell, both `use-nested-module` and `use-root-module` will fail to process the `type.ps1xml` file.\r\n\r\n-------------\r\n\r\n**QUESTION:** Changing the loading order of nested module would be a non-trivial work which is quite risky. Given that, shall we revert #16355?",
      "created_at": "2022-07-27T23:40:52Z",
      "updated_at": "2022-07-27T23:40:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Your question raise more questions:\r\n1. Is PS team strategy to decouple built-in modules actual or it was deprecated?\r\n2. Should we keep circular dependencies #14095?\r\n3. Why do built-in modules use `NestedModules` instead of `RootModule` in psd1? Is it a bug?",
      "created_at": "2022-07-29T03:25:20Z",
      "updated_at": "2022-07-29T03:25:20Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "A workaround is to add `RequiredAssemblies = \"Microsoft.PowerShell.Security.dll\"` in addition to the `NestedModules`. Required assemblies are always loaded before processing type/format files, and this allows the module to remain a manifest module.\r\n\r\nI have pushed a commit with that change. Although it looks weirdly redundant, I think it should be acceptable.\r\n\r\n</br>\r\n\r\n>\\> _Why do built-in modules use NestedModules instead of RootModule in psd1? Is it a bug?_\r\n\r\nI don't think it's a bug or oversight. My guess is:\r\n1. Declaring the security.dll as a root module doesn't solve the problem in Widows PowerShell, as I mentioned above:\r\n   > But on Windows PowerShell, both use-nested-module and use-root-module will fail to process the type.ps1xml file.\r\n2. Back in Windows PowerShell time, some built-in modules contain both `.psm1` and `.dll` nested modules, and making the parent module a manifest module makes perfect sense.\r\n",
      "created_at": "2022-07-29T17:39:31Z",
      "updated_at": "2022-07-29T17:46:30Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.3.0-preview.7` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.3.0-preview.7)\n",
      "created_at": "2022-08-12T00:01:08Z",
      "updated_at": "2022-08-12T00:01:08Z"
    }
  ],
  "created_at": "2022-07-26T04:22:19Z",
  "number": 17771,
  "state": "closed",
  "title": "Stop referencing Microsoft.PowerShell.Security when the core snapin is used",
  "updated_at": "2022-08-12T00:01:08Z"
}