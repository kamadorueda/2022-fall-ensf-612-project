{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11177",
  "author": "LaurentDardenne",
  "body": "Is this feature documented ?\r\nHow to understand this : \r\n```powershell\r\n$t=$null\r\n$t.count\r\n#0\r\n${t}.count\r\n#0\r\n${t}?.count  # Return nothing\r\n\r\n$null -eq ${t}?.count # Return nothing\r\n\r\n$t=1..5\r\nforeach ( $i in ${t}?.count){\"$i\"} #Return nothing\r\n\r\niex 'foreach ( $i in ${t}?.count){ #$i\"}'\r\n# no ParseException\r\n```\r\n$psversiontable\r\n```powershell\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-preview.6\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-preview.6\r\nOS                             Microsoft Windows 10.0.18362\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0, 5.0, 5.1.10032.0, 6.0.0, 6.1.0, 6.2.0, 7.0.0-preview.6}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
  "closed_at": "2022-08-23T11:51:12Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "/cc @adityapatwardhan ",
      "created_at": "2019-11-23T12:55:12Z",
      "updated_at": "2019-11-23T12:55:12Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@LaurentDardenne  \r\nDoes this help ( though docs are still needed)\r\n```\r\n> $a = $home.ToString()\r\n> $a = $null.tostring()\r\nERROR: InvalidOperation: You cannot call a method on a null-valued expression.\r\n> $b = ${home}?.ToString()\r\n> $null -eq $b\r\nFalse\r\n# b holds the string for home\r\n> $b = ${null}?.ToString()\r\n#No error\r\n> $null -eq $b\r\nTrue\r\n# Expression returned null when the member did not exist \r\n\r\n$x = $null.count\r\n> $x -eq $null\r\nFalse\r\n> $x\r\n0\r\n# Count is a special case\r\n\r\n>$x = ${null}?.count\r\n> $x -eq $null\r\nTrue\r\n#  Expression returned null when the member did not exist \r\n\r\n\r\n```",
      "created_at": "2019-11-23T13:36:01Z",
      "updated_at": "2019-11-23T13:36:01Z"
    },
    {
      "author": "LaurentDardenne",
      "author_association": "NONE",
      "body": "On my computer :\r\n```Powershell\r\n$b = ${home}?.ToString()\r\n$null -eq $b\r\n#True\r\n\r\n$b = $home.ToString()\r\n$null -eq $b\r\n#False\r\n$b\r\n#C:\\Users\\Laurent\r\nrv b;$b = ${home}?.ToString();$null -eq $b;$b\r\n#nothing\r\n```\r\nWindows 10 Enterprise N - 1903 - Fr\r\nArchive used : PowerShell-7.0.0-preview.6-win-x64.zip\r\n",
      "created_at": "2019-11-25T18:06:22Z",
      "updated_at": "2019-11-25T18:06:22Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Have you enabled this experimental feature:\r\n```\r\n1-25 11:47:28 19ms 8> Get-ExperimentalFeature PSNull*\r\n\r\nName                                Enabled Source                              Description\r\n----                                ------- ------                              -----------\r\nPSNullConditionalOperators             True PSEngine                            Support the null conditional member a\u2026 \r\n````\r\nThat first test of yours returns `false` for me.\r\n```\r\n11-25 11:46:21 20ms 3> $b = ${home}?.ToString()\r\n11-25 11:46:28 27ms 4> $null -eq $b\r\nFalse\r\n```",
      "created_at": "2019-11-25T18:48:42Z",
      "updated_at": "2019-11-25T18:49:10Z"
    },
    {
      "author": "LaurentDardenne",
      "author_association": "NONE",
      "body": "_>>Have you enabled this experimental feature_\r\nWorks better with this :-)\r\nThanks.\r\n\r\nThat said the behavior without being activated is for me strange. Should not this syntax generate a parsing error if the experimental feature is disabled?",
      "created_at": "2019-11-25T19:13:04Z",
      "updated_at": "2019-11-25T19:13:04Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "/cc @adityapatwardhan on that one. My thought is that it absolutely should, but I haven't had a close look at the implementation.",
      "created_at": "2019-11-25T19:17:47Z",
      "updated_at": "2019-11-25T19:17:47Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Not sure what's going on with your setup @LaurentDardenne.  If I disable this feature, then I get a parse error:\r\n![image](https://user-images.githubusercontent.com/5177512/69571561-87b0de00-0f7f-11ea-8636-6113aa2c17fb.png)\r\nGotta love the new error formatting!  Maybe there's some interaction between experimental features.  What do you have enabled (post the output of `Get-ExperimentalFeature` here).  Also, can we assume you enabled only the PSNullConditionalOperators feature?",
      "created_at": "2019-11-25T19:34:41Z",
      "updated_at": "2019-11-25T19:34:41Z"
    },
    {
      "author": "LaurentDardenne",
      "author_association": "NONE",
      "body": ">>Not sure what's going on with your setup @LaurentDardenne.\r\n\r\nI get the error message after running this :\r\n```powershell \r\nEnable-ExperimentalFeature *\r\n```\r\nBy default only _PSCommandNotFoundSuggestion_ are enabled (I think so).\r\nI try with a new installation.",
      "created_at": "2019-11-25T19:49:25Z",
      "updated_at": "2019-11-25T19:49:25Z"
    },
    {
      "author": "LaurentDardenne",
      "author_association": "NONE",
      "body": "With this setup : https://github.com/PowerShell/PowerShell/releases/download/v7.0.0-preview.6/PowerShell-7.0.0-preview.6-win-x64.zip\r\n```powershell\r\nC:\\Temp> get-ExperimentalFeature\r\n\r\nName                                Enabled Source                              Description\r\n----                                ------- ------                              -----------\r\nPSCoalescingOperators                 False PSEngine                            Support the null coalescing operator a\u2026\r\nPSCommandNotFoundSuggestion            True PSEngine                            Recommend potential commands based on \u2026\r\nPSErrorView                            True PSEngine                            New formatting for ErrorRecord\r\nPSForEachObjectParallel               False PSEngine                            New parameter set for ForEach-Object t\u2026\r\nPSImplicitRemotingBatching            False PSEngine                            Batch implicit remoting proxy commands\u2026\r\nPSNullConditionalOperators            False PSEngine                            Support the null conditional member ac\u2026\r\nPSPipelineChainOperators              False PSEngine                            Allow use of && and || as operators be\u2026\r\nPSTernaryOperator                     False PSEngine                            Support the ternary operator in PowerS\u2026\r\nPSUpdatesNotification                 False PSEngine                            Print notification message when new re\u2026\r\nPSWindowsPowerShellCompatibility      False PSEngine                            Load non-PSCore-compartible modules in\u2026\r\nMicrosoft.PowerShell.Utility.PSGet\u2026   False C:\\tools\\powershellcore\\Modules\\Mi\u2026 Enable Get-Error cmdlet that displays \u2026\r\nMicrosoft.PowerShell.Utility.PSMan\u2026   False C:\\tools\\powershellcore\\Modules\\Mi\u2026 Enables -BreakAll parameter on Debug-R\u2026\r\nPSDesiredStateConfiguration.Invoke\u2026   False C:\\tools\\powershellcore\\Modules\\PS\u2026 Enables the Invoke-DscResource cmdlet \u2026\r\n\r\nC:\\Temp> rv b;$b = ${home}?.ToString();$null -eq $b;$b\r\n```\r\nActivation (relaunch ps) followed by disabling (relaunch PS) the feature does not display the error message.\r\n\n\n<blockquote></blockquote>",
      "created_at": "2019-11-25T20:11:59Z",
      "updated_at": "2019-11-25T20:12:02Z"
    },
    {
      "author": "LaurentDardenne",
      "author_association": "NONE",
      "body": "The feature _PSCoalescingOperators_ must be enabled to have a parse error :\r\n```Powershell\r\nC:\\Temp> get-ExperimentalFeature *\r\n\r\nName                                Enabled Source                              Description\r\n----                                ------- ------                              -----------\r\nPSCoalescingOperators                  True PSEngine                            Support the null coalescing operator a\u2026\r\nPSCommandNotFoundSuggestion           False PSEngine                            Recommend potential commands based on \u2026\r\nPSErrorView                           False PSEngine                            New formatting for ErrorRecord\r\nPSForEachObjectParallel               False PSEngine                            New parameter set for ForEach-Object t\u2026\r\nPSImplicitRemotingBatching            False PSEngine                            Batch implicit remoting proxy commands\u2026\r\nPSNullConditionalOperators            False PSEngine                            Support the null conditional member ac\u2026\r\nPSPipelineChainOperators              False PSEngine                            Allow use of && and || as operators be\u2026\r\nPSTernaryOperator                     False PSEngine                            Support the ternary operator in PowerS\u2026\r\nPSUpdatesNotification                 False PSEngine                            Print notification message when new re\u2026\r\nPSWindowsPowerShellCompatibility      False PSEngine                            Load non-PSCore-compartible modules in\u2026\r\nMicrosoft.PowerShell.Utility.PSGet\u2026   False C:\\tools\\powershellcore\\Modules\\Mi\u2026 Enable Get-Error cmdlet that displays \u2026\r\nMicrosoft.PowerShell.Utility.PSMan\u2026   False C:\\tools\\powershellcore\\Modules\\Mi\u2026 Enables -BreakAll parameter on Debug-R\u2026\r\nPSDesiredStateConfiguration.Invoke\u2026   False C:\\tools\\powershellcore\\Modules\\PS\u2026 Enables the Invoke-DscResource cmdlet \u2026\r\n\r\nC:\\Temp> rv b;$b = ${home}?.ToString();$null -eq $b;$b0\r\n# At line:1 char:18\r\n# + rv b;$b = ${home}?.ToString();$null -eq $b;$b0\r\n# +                  ~~~~~~~~~~\r\n# Unexpected token '?.ToString' in expression or statement.\r\n# At line:1 char:29\r\n# + rv b;$b = ${home}?.ToString();$null -eq $b;$b0\r\n# +                             ~\r\n# An expression was expected after '('.\r\n# + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException\r\n# + FullyQualifiedErrorId : UnexpectedToken\r\n\r\n\r\nC:\\Temp> iex 'foreach ( $i in ${t}?.count){ #$i\"}'\r\n# iex : At line:1 char:21\r\n# + foreach ( $i in ${t}?.count){ #$i\"}\r\n# +                     ~~~~~~~\r\n# Unexpected token '?.count' in expression or statement.\r\n# At line:1 char:21\r\n# + foreach ( $i in ${t}?.count){ #$i\"}\r\n# +                     ~\r\n# Missing closing ')' after expression part of foreach loop.\r\n# The correct form is: foreach ($a in $b) {...}\r\n...\r\n```",
      "created_at": "2019-11-25T21:09:52Z",
      "updated_at": "2019-11-25T21:09:52Z"
    },
    {
      "author": "LaurentDardenne",
      "author_association": "NONE",
      "body": "And out of curiosity, each of [these tests](https://github.com/PowerShell/PowerShell/blob/2579c00a20ca74d4ec02ed85c5754610b17ff7ee/test/powershell/Language/Parser/Parsing.Tests.ps1#L316) is done in a single Powershell session or is every test done in a new Powershell session?\r\n\r\n",
      "created_at": "2019-11-25T21:22:03Z",
      "updated_at": "2019-11-25T21:22:03Z"
    }
  ],
  "created_at": "2019-11-23T12:33:39Z",
  "number": 11177,
  "state": "closed",
  "title": "Documentation of 'Null Conditional Member Property and Method Access'",
  "updated_at": "2022-08-23T11:51:12Z"
}