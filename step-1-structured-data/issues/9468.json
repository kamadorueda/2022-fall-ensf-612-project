{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9468",
  "author": "msftrncs",
  "body": "Edit: Adding hints from the conversation\r\n\r\n# Steps to reproduce\r\n\r\nFirst, insure you do not have the test subject file in your path:\r\n\r\n```PowerShell\r\n.test.html # should produce a 'not recognized' error\r\n```\r\nIf the above did not produce an error, change the command so that the file name still starts with a `.` but produces the said error, and change the below example accordingly.\r\n\r\nIf the above produced an error, then try the following:\r\n\r\n```powershell\r\n@'\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <title>foo</title>\r\n  </head>\r\n  <body>\r\n    <div>Hello</div>\r\n  </body>\r\n</html>\r\n'@ > .test.html # generate a sample file\r\n\r\n.test.html # invoke sample file\r\n```\r\n\r\n# Expected behavior\r\n\r\nI would expect an error saying '.test.html' is not recognized as \u2026 but does exist in the current location.\r\n\r\n# Actual behavior\r\n\r\nThe default browser will open the file.\r\n\r\nIt appears that the '.' that begins the file name is enough to satisfy the 'dot path' rule for executing files in the current working directory.   I did not expect this.\r\n\r\n# Environment data\r\n\r\nPowerShell Core 6.2.0 on Windows 10 1809.  Also confirmed in Windows PowerShell 5.1, same OS.\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "~~You're not _executing_ `.test.html`, you're applying the Windows shell's _default verb_ to it - something that has always worked this way.~~\r\n\r\nIn other words: you're _opening document_ `.test.html`  rather than _invoking an executable_ [_update: while that is technically true, PowerShell doesn't make that distinction_].\r\n",
      "created_at": "2019-04-25T21:03:03Z",
      "updated_at": "2019-04-25T21:46:23Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "But it doesn't work for 'test.html'  Instead I get an error saying not recognized ..., but exists in the current location.   \r\n\r\nOpening a document is the same as invoking an executable in Windows, for all intents and purposes.",
      "created_at": "2019-04-25T21:11:02Z",
      "updated_at": "2019-04-25T21:16:39Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "To be clear, if I have two files, '.test.html' and 'test.html',\r\n```PowerShell\r\n.test.html # succeeds opening default browser\r\ntest.html # reports 'not recognized, but exists in the current location'\r\n.\\test.html # succeeds opening default browser\r\n```",
      "created_at": "2019-04-25T21:20:38Z",
      "updated_at": "2019-04-25T21:20:38Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Good point - ~~I'd  used `*.txt` in my tests, which PowerShell happily opens even without the `.\\` prefix.~~\r\n\r\n~~I don't know what explains the difference (haven't looked at other extensions), but it's certainly an inconsistency~~, and from a security and predictability standpoint it makes sense to _always_ require an explicit path reference to open/execute a file in the _current_ location (tab completion assists with that by automatically prepending `.\\` / `./` for a file that exists in the current dir.)\r\n\r\nComplementarily, it makes sense to _only_ support locating _executables_ via `$env:Path` (as defined via `$env:PATHEXT`), not also _documents_ (i.e., files with names whose extensions aren't marked as executable) - PowerShell doesn't currently make this distinction (and neither does `cmd.exe`).",
      "created_at": "2019-04-25T21:30:18Z",
      "updated_at": "2019-04-26T02:24:23Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "I am not seeing the behavior of `.txt` files acting any differently.  Without the `.\\` prefix I get the same message, 'not recognized... but exists in the current location', unless the file name starts with a dot.",
      "created_at": "2019-04-25T21:34:59Z",
      "updated_at": "2019-04-25T21:36:03Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@msftrncs: \r\n\r\nYou are correct: My mistake was that  I had a `t.txt` located somewhere in `$env:PATH`, which is what actually was opened, not my current-directory-local copy.\r\n\r\nTo summarize:\r\n\r\n* What your OP reports is indeed a bug: a filename starting with `.` bypasses the need to open/execute a file located in the current directory with a _path_ (whether relative or absolute).\r\n\r\n* Separately, it is problematic that PowerShell allows opening even _non-executable_ files by filename only, as long as they're located in `$env:PATH`.\r\n  * See #9469\r\n\r\n\r\n\r\n",
      "created_at": "2019-04-25T21:44:38Z",
      "updated_at": "2019-04-25T22:11:07Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "I want to clarify that I tested deleting the `.test.html` file, and tried to run it, to validate that I did not have such a file on my PATH somewhere.  I wanted to make sure I wasn't making that mistake,",
      "created_at": "2019-04-25T21:45:43Z",
      "updated_at": "2019-04-25T21:45:43Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Understood, @msftrncs - which takes me to my 2nd point above: please see #9469.",
      "created_at": "2019-04-25T22:11:33Z",
      "updated_at": "2019-04-25T22:11:49Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "Also, confirming that the same issue occurs with the use of dot-source `.` or the call `&` operators or the `invoke-expression` cmdlet and a string value, in a variable or quoted literal.\r\n\r\n```PowerShell\r\n$a = '.test.html'\r\n$b = 'test.html'\r\n.$a # opens (not expected)\r\n.$b # errors (as expected)\r\n&$a # opens (not expected)\r\n&$b # errors (as expected)\r\ninvoke-expression '.test.html' # opens (not expected)\r\ninvoke-expression 'test.html' # errors (as expected)\r\n```\r\n\r\nThe fact that all invocation methods work the same would be expected.",
      "created_at": "2019-04-25T23:29:49Z",
      "updated_at": "2019-04-25T23:29:49Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "As this is existing 5.1 behavior, this is considered an enhancement (different rules for fixing.)  cc @iSazonov ",
      "created_at": "2019-04-26T23:21:05Z",
      "updated_at": "2019-04-26T23:22:31Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13, does it change it any if my example of an HTML file was replaced with a script file `.test.ps1`.   The same behavior happens, (and protective feature bypassed) if the example was a script file.  Fixing this would seem to be a defense-in-depth condition.",
      "created_at": "2019-04-27T00:06:24Z",
      "updated_at": "2019-04-27T00:06:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13 It is not clear for me why it is \"enhancement\" if we see unexpected (and possibly dangerous) behavior. From my understanding \"enhancement\" is \"add new useful functionality\".",
      "created_at": "2019-04-27T08:47:22Z",
      "updated_at": "2019-04-27T08:47:22Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov I think he just meant that the request to fix this would be considered an enhancement of the existing behaviour, rather than a bug. Tricky wording. ",
      "created_at": "2019-04-27T12:43:00Z",
      "updated_at": "2019-04-27T12:43:09Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "I'm sorry.  I miss read the repro.  This is by design.  `./` or `.\\` is not required to execute a file.  Not all scenarios work, but we have explicit tests to verify that similar scenarios actually work.\r\n\r\nFixing this would break existing scenarios that are expected to work by other customers and since you said to invoke the exact file we actually start, I don't see a security risk.\r\n\r\nAdditionally, please follow our [Security vulnerability](https://github.com/PowerShell/PowerShell/blob/master/docs/maintainers/issue-management.md#security-vulnerabilities) issues filing guidelines.  Future mentions of security issues may be deleted from GitHub.",
      "created_at": "2019-04-27T18:02:27Z",
      "updated_at": "2019-04-27T18:13:15Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "I thought about this more. This is not a good design.  I remember arguing for changing it myself when fixing a recent Defense in Depth issue.",
      "created_at": "2019-04-28T01:42:02Z",
      "updated_at": "2019-04-28T01:42:02Z"
    }
  ],
  "created_at": "2019-04-25T19:51:41Z",
  "number": 9468,
  "state": "open",
  "title": "'.\\filename' (dot-path local execution) requirement not required for files '.file'",
  "updated_at": "2019-04-28T01:42:18Z"
}