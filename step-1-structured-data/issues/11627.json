{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11627",
  "author": "xtqqczze",
  "body": "# PR Summary\r\n\r\nEnable support for EditorConfig in OmniSharp.\r\n\r\n## PR Context\r\n\r\nOmniSharp has this support since omnisharp-roslyn v1.33.0:\r\n\r\n* https://github.com/OmniSharp/omnisharp-roslyn/blob/master/CHANGELOG.md#1330---2019-07-01\r\n* #7357\r\n* https://github.com/OmniSharp/omnisharp-roslyn/pull/1526\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-01-24T20:22:28Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov I've used the `enableRoslynAnalyzers` setting as a good tool to work with when doing a cleanup / refactor of an individual file. It will probably be quite a while before we get all those analyzer recommendations into the codebase, but the majority of them do look like great suggestions to take on board.",
      "created_at": "2020-01-19T21:40:16Z",
      "updated_at": "2020-01-19T21:40:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "My concern is that it takes a lot of computer resources. Perhaps we could enable subset of the analyzer to highlight our code conventions.",
      "created_at": "2020-01-20T03:43:09Z",
      "updated_at": "2020-01-20T03:43:09Z"
    },
    {
      "author": "xtqqczze",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32 I too am using `enableRoslynAnalyzers`, with additional PackageReference `Roslynator.Analyzers` added to a csproj of interest. I have submitted PR #11640 based on one of the analyzer recommendations, but it seems like a huge amount of work to fix all issues.\r\n\r\n@iSazonov Currently Omnisharp queues all documents in the solution for code analysis, rather than running on demand, so this uses a lot of resources when developing in vscode.",
      "created_at": "2020-01-20T16:09:02Z",
      "updated_at": "2020-01-20T16:09:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@xtqqczze  Can we configure the code analysis? ",
      "created_at": "2020-01-20T17:13:51Z",
      "updated_at": "2020-01-20T17:13:51Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.1.0-preview.1` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.1)\n",
      "created_at": "2020-03-26T17:45:12Z",
      "updated_at": "2020-03-26T17:45:12Z"
    }
  ],
  "created_at": "2020-01-19T00:13:47Z",
  "number": 11627,
  "state": "closed",
  "title": "vscode: Enable EditorConfig support in OmniSharp",
  "updated_at": "2020-03-26T17:45:12Z"
}