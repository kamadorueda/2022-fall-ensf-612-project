{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3616",
  "author": "PaulHigin",
  "body": "We need an Enable-SSHRemoting cmdlet, similar to existing Enable-PSSession cmdlet for WinRM based remoting, to set up SSH remoting on supported platforms.  This would make using SSH remoting easier to use and also allow automated testing of SSH remoting.\r\n\r\nhttps://github.com/PowerShell/PowerShell-RFC/blob/master/1-Draft/RFC0012-Enable-SSH-Remoting.md\r\n\r\n",
  "closed_at": "2020-02-05T16:48:13Z",
  "comments": [
    {
      "author": "RichardSiddaway",
      "author_association": "NONE",
      "body": "Agreed\r\n\r\nConfiguring SSH for remoting is tsk that is better automated if at all possible ",
      "created_at": "2017-04-21T18:29:59Z",
      "updated_at": "2017-04-21T18:29:59Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Per conversation with @SteveL-MSFT, we might want to push this out depending on how the Win32-OpenSSH work lands. \r\n\r\nIt might even make sense to push this work out to after the OpenSSH work lands to make sure that we don't end up having to do breaking changes if/when the configuration mechanisms for Win32-OpenSSH change. ",
      "created_at": "2017-08-22T21:37:36Z",
      "updated_at": "2017-08-22T21:37:36Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I think what we may end up doing is just having a setup script in the demo folder and we can blog about it to inform users of it's existence who don't work out of GitHub",
      "created_at": "2017-08-28T21:54:22Z",
      "updated_at": "2017-08-28T21:54:22Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "I am working on a set up script right now as a prototype for the Cmdlet.  I don't think we should worry about Win32-OpenSSH breaking PowerShell remoting since it is intended to be closely compatible with other platform versions of SSH.",
      "created_at": "2017-08-28T22:10:58Z",
      "updated_at": "2017-08-28T22:10:58Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I think we can publish this in PowerShellGallery initially and target inclusion in the package for 6.1.0",
      "created_at": "2017-09-21T01:23:36Z",
      "updated_at": "2017-09-21T01:23:36Z"
    },
    {
      "author": "soul4soul",
      "author_association": "NONE",
      "body": "Two years later I'm still hoping this is implemented. I just had to write PS scripts to do this while provisioning Windows 7 and Windows 10 PCs. For windows 10 I followed several articles on docs.microsoft.com [[1]](https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-core-on-windows?view=powershell-6#how-to-create-a-remoting-endpoint)[[2]](https://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse). For Windows 7 I used chocolatey.\r\n\r\nFor configuring the keys I followed the guide at https://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_keymanagement. It'd be nice to see `Repair-AuthorizedKeyPermission` fixed with this effort too.\n\n<blockquote><div><strong><a href=\"https://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_keymanagement\">OpenSSH Server Configuration for Windows</a></strong></div></blockquote>",
      "created_at": "2019-12-06T18:44:25Z",
      "updated_at": "2019-12-06T18:44:27Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PaulHigin has a working version, just need to publish to PSGallery.  Won't be in PS7, but can be in 7.1.",
      "created_at": "2019-12-09T22:40:02Z",
      "updated_at": "2019-12-09T22:40:02Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "A version 0.1.0 of PowerShell remoting tools module has been published, and which contains the Enable-SSHRemoting cmdlet.\r\n\r\nhttps://www.powershellgallery.com/packages/Microsoft.PowerShell.RemotingTools/0.1.0\r\n\n\n<blockquote><img src=\"https://powershellgallery.com/Content/Images/Branding/PackageDefaultIcon.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://powershellgallery.com/packages/Microsoft.PowerShell.RemotingTools/\">Microsoft.PowerShell.RemotingTools 0.1.0</a></strong></div><div>\r\nThis module contains remoting tool cmdlets.\r\n\r\nEnable-SSHRemoting cmdlet:\r\n--------------------------\r\nPowerShell SSH remoting was implemented in PowerShell 6.0 but requries SSH (client) and SSHD (service) components \r\nto be installed.  In addition the sshd_config configuration file must be updated to define a PowerShell endpoint\r\nas a subsystem.  Once this is done PowerShell remoting cmdlets can be used to establish a PowerShell remoting\r\nsession over SSH that works across platforms.\r\n\r\n$session = New-PSSession -HostName LinuxComputer1 -UserName UserA -SSHTransport\r\n\r\nThere are a number of requirements that must be satisfied for PowerShell SSH based remoting:\r\n  a. PowerShell 6.0 or greater must be installed on the system.\r\n       Since multiple PowerShell installations can appear on a single system, a specific installation can be selected.\r\n  b. SSH client must be installed on the system as PowerShell uses it for outgoing connections.\r\n  c. SSHD (ssh daemon) must be installed on the system for PowerShell to receive SSH connections.\r\n  d. SSHD must be configured with a Subsystem that serves as the PowerShell remoting endpoint.\r\n\r\nThe Enable-SSHRemoting cmdlet will do the following:\r\n  a. Detect the underlying platform (Windows, Linux, macOS).\r\n  b. Detect an installed SSH client, and emit a warning if not found.\r\n  c. Detect an installed SSHD daemon, and emit a warning if not found.\r\n  d. Accept a PowerShell (pwsh) path to be run as a remoting PowerShell session endpoint.\r\n       Or try to use the currently running PowerShell.\r\n  e. Update the SSHD configuration file to add a PowerShell subsystem endpoint entry.\r\n\r\nIf all of the conditions are satisfied then PowerShell SSH remoting will work to and from the local system.\r\n</div></blockquote>",
      "created_at": "2020-02-05T16:48:12Z",
      "updated_at": "2020-02-05T16:48:16Z"
    }
  ],
  "created_at": "2017-04-21T16:20:44Z",
  "number": 3616,
  "state": "closed",
  "title": "Implement Enable-SSHRemoting cmdlet",
  "updated_at": "2020-02-05T16:48:16Z"
}