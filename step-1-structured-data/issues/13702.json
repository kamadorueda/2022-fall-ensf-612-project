{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13702",
  "author": "jazzdelightsme",
  "body": "A perhaps little-known trick is that script modules (.psm1) can accept parameters (they can have a `param` block at the top). I have occasionally used this as a way to enable non-standard (test, debug, or experimental) behavior for a module (I add something like `param( [switch] $EnableSpecialThing )` at the top of my .psm1, and then I can `Import-Module MyModule -Arg @( $true )` to light up the special thing).\r\n\r\nI recently tried to employ this little trick again, by adding a `[string]` parameter, and it completely blew up--I could no longer load my module.\r\n\r\nIt turned out that what was happening is that my module employs a nested module--from a third party; it's code that I do not control, but I package it with my module. And that nested module *also* used this modules-can-take-parameters trick. And the first parameter of this nested module was a `[switch]` parameter. And when I passed a string to my module-import, (and this is the part I did not know about or expect) **that parameter was also passed to the nested module**, and the `[string]` could not be converted to a `[switch]`, and so it exploded.\r\n\r\nIt seems to have been this way since 5.1, so it's not new, and may be \"By Design\". But it was completely unexpected and surprising to me. And if it's \"By Design\", it doesn't seem like a great design... what this means is that any modules packaged together, if they accept parameters, they all have to accept the same parameters (same types, same meanings). Following that logic further, it means that if *any* module accepts parameters, they all have to accept the same parameters (same types, same meanings). Unless all modules in a package come from the same author, it seems unlikely this requirement can be met. (Maybe that's why nobody uses this \"trick\"/feature...)\r\n\r\nIf this were to be changed, it would probably be a breaking change... but not \"*very*\" breaking, since I can't imagine many people using this feature. And not passing the parameters to nested modules would then bring up the question \"but then how do we pass parameters to nested modules?\" And I don't know what the answer should be. But this was a problem for me, and more than just a one-time, bit-my-backside problem--I usually use `[switch]` parameters, and I've used this trick with this module before, and it means I was **unknowingly** passing a parameter to the nested module. Yikes! Realizing this shocked and scared me.\r\n\r\n(and now I also need to come up with an alternate way to enable private/test/debug/experimental behavior for my modules)\r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\nNew-ModuleManifest -Path .\\Repro.psd1 -RootModule Repro.psm1 -NestedModules Secondary.psm1\r\n\r\necho @'\r\nparam( [switch] $MySwitch, [string] $MyString )\r\n\r\nWrite-Host \"MySwitch: $MySwitch\" -Fore Cyan\r\nWrite-Host \"MyString: $MyString\" -Fore Cyan\r\n'@ > Repro.psm1\r\n\r\necho @'\r\nparam( [switch] $MySwitch, [switch] $MyOtherSwitch )\r\n\r\nWrite-Host \"MySwitch: $MySwitch\" -Fore Magenta\r\nWrite-Host \"MyOtherSwitch: $MyString\" -Fore Magenta\r\n'@ > Secondary.psm1\r\n\r\nImport-Module .\\Repro.psd1 -ArgumentList @( $true )\r\n\r\nRemove-Module Repro\r\nWrite-Host ''\r\n\r\nImport-Module .\\Repro.psd1 -ArgumentList @( $true, 'hello' )\r\n```\r\n\r\n## Expected behavior\r\n\r\n```none\r\nSecondary: MySwitch:\r\nSecondary: MyOtherSwitch:\r\nRoot module: MySwitch: True\r\nRoot module: MyString:\r\n\r\nSecondary: MySwitch:\r\nSecondary: MyOtherSwitch:\r\nRoot module: MySwitch: True\r\nRoot module: MyString: hello\r\n```\r\n\r\n## Actual behavior\r\n\r\n```none\r\nSecondary: MySwitch: True\r\nSecondary: MyOtherSwitch:\r\nRoot module: MySwitch: True\r\nRoot module: MyString:\r\n\r\nMetadataError: Cannot convert value \"System.String\" to type \"System.Management.Automation.SwitchParameter\". Boolean parameters accept only Boolean values and numbers, such as $True, $False, 1 or 0.\r\nImport-Module:\r\nLine |\r\n  21 |  Import-Module .\\Repro.psd1 -ArgumentList @( $true, 'hello' )\r\n     |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     | The module to process 'Secondary.psm1', listed in field 'NestedModules' of module manifest 'E:\\Scratch\\reproPsModuleParameters\\Repro.psd1' was not processed because no valid module was found in any module directory.\r\n```\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.0-preview.7\r\nPSEdition                      Core\r\nGitCommitId                    7.1.0-preview.7\r\nOS                             Microsoft Windows 10.0.20222\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n(also repro's in 5.1, so this is not new)",
  "closed_at": null,
  "comments": [],
  "created_at": "2020-09-26T19:42:18Z",
  "labels": [
    "Issue-Question",
    "Up-for-Grabs",
    "WG-Cmdlets-Core"
  ],
  "number": 13702,
  "state": "open",
  "title": "Unexpected: ArgumentList params passed to Import-Module are also given to NestedModule",
  "updated_at": "2021-01-18T06:55:58Z"
}