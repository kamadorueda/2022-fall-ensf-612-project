{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9320",
  "author": "sdwheeler",
  "body": "This issue is copied from https://github.com/MicrosoftDocs/PowerShell-Docs/issues/4127.\r\nOriginally submitted by @rwlangeveld.\r\n\r\n---\r\n\r\n<!--\r\nIf this doc issue is for content OUTSIDE of /reference folder (such as DSC, WMF etc.), there is no need to fill this template. Please delete the template before submitting the PR.\r\n\r\nIf this doc issue is for content UNDER /reference folder, please fill out this template:\r\n-->\r\nIssue Details\r\n-----------------\r\n\r\nConverting from UTC to local time with DST (being CEST in my case) seems to give unexpected results.\r\nI ran into this issue while converting Unix (epoch) time to a PowerShell/.Net datetime object. I take \r\n00:00:00 AM, January 1, 1970 (UTC) as a starting point, and add the given Unix time (in seconds) to it. Then I want to translate that to the correct local time.\r\nIn winter, this works fine in multiple ways. In summer, using DST, this seems not to give me the expected results in most ways. Only one way, I got this to work. Which at least seems to be very inconsistent...\r\n\r\nExamples\r\n-----------------\r\n_NB. I translated the day- and month names in the examples from Dutch to English manually._\r\n\r\nI start with specifying the begin date as '01-01-1970 00:00:00Z', with 'Z' denoting this as being UTC.\r\nWhen adding only one second, and converting to local time, all seems find.\r\nSince January 1 is in the winter, no DST is involved in local time (CET = UTC+1). UTC does not have DST.\r\n\r\nPS H:\\> (Get-Date '01-01-1970 00:00:00Z').AddSeconds(1).TolocalTime()\r\nThursdag 1 January 1970 01:00:01\r\n\r\nPS H:\\> (Get-Date '01-01-1970 00:00:00Z').TolocalTime().AddSeconds(1)\r\nThursdag 1 January 1970 01:00:01\r\n\r\nWhen not specifying UTC. The time region is unspecified, therefore should be assumed to be UTC, when translating to local time, I expect. This seems to be true:\r\n\r\nPS H:\\> (Get-Date '01-01-1970 00:00:00').AddSeconds(1).TolocalTime()\r\nThursdag 1 January 1970 01:00:01\r\n\r\nPS H:\\> (Get-Date '01-01-1970 00:00:00').TolocalTime().AddSeconds(1)\r\nThursdag 1 January 1970 01:00:01\r\n\r\nWhen adding enough seconds to enter DST in local time (CEST = UTC+2), however, things get a little unexpected... \r\nI add exactly 181 days (181d * 24h/d * 60m/h * 60s/m = 15638400 seconds).\r\nIn UTC I expect to be at midnight again. But since this new date is in the summer, in local time, I expect to be 2 hours later.. (Since local time is CE**S**T now, being CET+DST, being UTC+2.)\r\n\r\nPS H:\\> (Get-Date '01-01-1970 00:00:00Z').AddSeconds(15638400).TolocalTime()\r\nWednesday 1 July 1970 0**1**:00:00\r\nSeems to be a bug to me...! Converting UTC to CEST here, should be **+2** hours!\r\n\r\nPS H:\\> (Get-Date '01-01-1970 00:00:00Z').TolocalTime().AddSeconds(15638400)\r\nWednesday 1 July 1970 0**1**:00:00\r\nSeems to be a bug to me...! Converting UTC to CET here, should be +1 hour. However, **adding enough time to enter CEST (CET+DST) this should have been corrected by +1 hour**...\r\n\r\nPS H:\\> (Get-Date '01-01-1970 00:00:00').AddSeconds(15638400).TolocalTime()\r\nWednesday 1 July 1970 02:00:00\r\n**CORRECT!**\r\n\r\nPS H:\\> (Get-Date '01-01-1970 00:00:00').TolocalTime().AddSeconds(15638400)\r\nWednesday 1 July 1970 0**1**:00:00\r\nWrong again...\r\n\r\nThis seems to be a bug in the (lack of) implementation of DST conversion in time calculations to me.\r\n\r\nAny help, feedback or bugfix would be appreciated.\r\nThank you in advance.\r\n\r\nRogier Langeveld\r\n\r\nVersion(s) of document impacted\r\n------------------------------\r\n- [?] Impacts 6.next document\r\n- [?] Impacts 6 document\r\n- [X] Impacts 5.1 document\r\n- [?] Impacts 5.0 document\r\n- [?] Impacts 4.0 document\r\n- [?] Impacts 3.0 document\r\n\r\n<!--\r\nIf you are selecting only a subset of document version(s), please help us understand why you selected a subset\r\nIf the PR is fixing all the document version(s), please delete the list/options below\r\n-->\r\nReason(s) for not selecting all version of documents\r\n----------------------------------------------------\r\n- [ ] The documented feature was introduced in selected version of PowerShell\r\n- [ ] This issue only shows up in selected version of the document\r\n\r\n\r\n",
  "closed_at": "2019-04-08T17:36:08Z",
  "comments": [
    {
      "author": "sdwheeler",
      "author_association": "COLLABORATOR",
      "body": "Some more results...:\r\n\r\nPS H:\\> (Get-Date '01-01-1970 00:00:00Z')\r\ndonderdag 1 januari 1970 01:00:00\r\n_as expected. Automatically converted to local time, being in CET = UTC+1_\r\n\r\nPS H:\\> (Get-Date '01-01-1970 00:00:00Z').ToLocalTime()\r\ndonderdag 1 januari 1970 01:00:00\r\n_as expected. Automatically converted to local time, being in CEST = UTC+1, manually converted to local time, staying the same_\r\n\r\nPS H:\\> (Get-Date '01-07-1970 00:00:00Z')\r\nwoensdag 1 juli 1970 02:00:00\r\n_exactly 181 days after '01-01-1970 00:00:00Z'_\r\n_as expected. Automatically converted to local time, being in CEST = CET+DST = UTC+2_\r\n\r\nPS H:\\> (Get-Date '01-07-1970 00:00:00Z').ToLocalTime()\r\nwoensdag 1 juli 1970 02:00:00\r\n_exactly 181 days after '01-01-1970 00:00:00Z'_\r\n_as expected. Automatically converted to local time, being in CEST = CET+DST = UTC+2, manually converted to local time, staying the same_\r\n\r\nPS H:\\> (Get-Date '01-01-1970 00:00:00Z').AddSeconds(15638400)\r\nwoensdag 1 juli 1970 01:00:00\r\nNOT as expected. Being exactly 181 days after '01-01-1970 00:00:00Z'_, but in CEST now. Should be as above.\r\n\r\nPS H:\\> (Get-Date '01-01-1970 00:00:00Z').AddSeconds(15638400).ToLocalTime()\r\nwoensdag 1 juli 1970 01:00:00\r\nNOT as expected. Being exactly 181 days after '01-01-1970 00:00:00Z'_, but in CEST now. Should be as above.\r\n\r\n(15638400 seconds = 181 days)\r\nJust to be sure...:  \r\n\r\nPS H:\\> Get-TimeZone\r\nId                         : W. Europe Standard Time\r\nDisplayName                : (UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna\r\nStandardName               : W. Europe Standard Time\r\nDaylightName               : W. Europe Summer Time\r\nBaseUtcOffset              : 01:00:00\r\nSupportsDaylightSavingTime : True\r\n",
      "created_at": "2019-04-08T15:48:11Z",
      "updated_at": "2019-04-08T15:48:11Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Looking into this, a problem is that being in UTC+1 leads to deceptive examples (I'm running in UTC-8).\r\n\r\nThese actual behaviours are in .NET rather than in PowerShell.\r\n\r\n```\r\n> ([datetime]'01-01-2018 00:00:00')\r\n\r\nMonday, January 1, 2018 12:00:00 AM\r\n\r\n```\r\n\r\n```\r\n> ([datetime]'01-01-2018 00:00:00').AddSeconds(15638400)\r\n\r\nSunday, July 1, 2018 12:00:00 AM\r\n\r\n```\r\n\r\n```\r\n> ([datetime]'01-01-2018 00:00:00').AddSeconds(15638400).ToLocalTime()\r\n\r\nSaturday, June 30, 2018 5:00:00 PM\r\n\r\n```\r\n\r\nThe part to watch here is the [`Kind`](https://docs.microsoft.com/en-us/dotnet/api/system.datetime.kind?view=netcore-2.2):\r\n\r\n```\r\n> (Get-Date '01-01-2018 00:00:00').Kind\r\nUnspecified\r\n\r\n> ([datetime]'01-01-2018 00:00:00').Kind\r\nUnspecified\r\n\r\n> (Get-Date '01-01-2018 00:00:00Z').Kind\r\nLocal\r\n\r\n> ([datetime]'01-01-2018 00:00:00Z').Kind\r\nLocal\r\n```\r\n\r\nIt looks like a `DateTime` value will retain its kind and will behave and be displayed appropriately. `Unspecified` seems to behave the same as `Utc`, but I think the distinction exists to record that the timezone was not explicitly given.\r\n\r\nWhen a `Local` time is not DST, it **will not be converted to DST** when time is added. It keeps its original timezone (where the DST timezone is treated as distinct from the standard one). But when `ToLocalTime()` is used, it converts the time to the appropriate geographically local timezone that applies *at the time of the datetime value*:\r\n\r\n```\r\n> ([datetime]'01-01-2018 00:00:00')\r\n\r\nMonday, January 1, 2018 12:00:00 AM\r\n\r\n> ([datetime]'01-01-2018 00:00:00').ToLocalTime()\r\n\r\nSunday, December 31, 2017 4:00:00 PM\r\n\r\n> ([datetime]'01-01-2018 00:00:00').AddSeconds(15638400)\r\n                                                                     \r\nSunday, July 1, 2018 12:00:00 AM\r\n\r\n> ([datetime]'01-01-2018 00:00:00').AddSeconds(15638400).ToLocalTime()\r\n\r\nSaturday, June 30, 2018 5:00:00 PM\r\n\r\n> ([datetime]'01-01-2018 00:00:00Z')\r\n\r\nSunday, December 31, 2017 4:00:00 PM\r\n\r\n> ([datetime]'01-01-2018 00:00:00Z').ToLocalTime()\r\n\r\nSunday, December 31, 2017 4:00:00 PM\r\n\r\n> ([datetime]'01-01-2018 00:00:00Z').AddSeconds(15638400)\r\n\r\nSaturday, June 30, 2018 4:00:00 PM\r\n\r\n> ([datetime]'01-01-2018 00:00:00Z').AddSeconds(15638400).ToLocalTime()\r\n\r\nSaturday, June 30, 2018 4:00:00 PM\r\n\r\n```\r\n\r\nIn any event, the actual semantics of `System.DateTime` are determined by .NET -- we can't really fix them.",
      "created_at": "2019-04-08T17:36:08Z",
      "updated_at": "2019-04-08T17:45:29Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "But there's not great documentation of this stuff in the .NET docs. May with worth opening an issue with them.",
      "created_at": "2019-04-08T17:42:40Z",
      "updated_at": "2019-04-08T17:42:40Z"
    }
  ],
  "created_at": "2019-04-08T15:47:42Z",
  "labels": [
    "Issue-Question",
    "Resolution-External"
  ],
  "number": 9320,
  "state": "closed",
  "title": "Get-Date and .AddSeconds() inconsistent with UTC-local time conversion",
  "updated_at": "2019-05-07T17:16:05Z"
}