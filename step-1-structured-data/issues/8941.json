{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8941",
  "author": "mklement0",
  "body": "Note: This isn't a _bug_ per se, but a _performance issue_.\r\n\r\nNote that `-creplace` and `switch -regex -casesensitive` appear NOT to be affected.\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n$strArray = , 'foo' * 1e5  # an array with N elements containing 'foo'\r\n# Contrast the performance of -match vs. -cmatch\r\n$scriptBlocks = \r\n { foreach ($str in $strArray) { $null = $str -match  'f?(o)' } },\r\n { foreach ($str in $strArray) { $null = $str -cmatch 'f?(o)' } }\r\n\r\n$scriptBlocks | % { (Measure-Command $_).TotalSeconds }\r\n```\r\n\r\n# Expected behavior\r\n\r\nRoughly the same execution time in both cases - `-cmatch` should actually be slightly _faster_.\r\n\r\n# Actual behavior\r\n\r\nSample result from my macOS 10.14.3 machine:\r\n\r\n```none\r\n0.6651756\r\n1.3135713\r\n```\r\n\r\nThat is, `-cmatch` unexpectedly took about _twice as long_.\r\n\r\nThat this may be related to unexpectedly _bypassing_  .NET's  automatic caching of on-demand-compiled regexes is evidenced by the fact that if you _force_ caching as follows, the problem goes away:\r\n\r\n```powershell\r\n# Forces caching of the regex; running the above code again then performs as expected.\r\n$null = switch -casesensitive -regex ($null) { 'f?(o)' { } }\r\n```\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core v6.2.0-preview.4 on macOS 10.14.2\r\nPowerShell Core v6.2.0-preview.4 on Ubuntu 18.04.1 LTS\r\nPowerShell Core v6.2.0-preview.4 on Microsoft Windows 10 Pro (64-bit; Version 1803, OS Build: 17134.471)\r\nWindows PowerShell v5.1.17134.407 on Microsoft Windows 10 Pro (64-bit; Version 1803, OS Build: 17134.471)\r\n```\r\n",
  "closed_at": "2019-11-01T18:14:31Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It's funny :-)\r\n\r\nWe only use a Regex cache if IgnoreCase option presents.\r\nSee `internal static Regex NewRegex(string patternString, RegexOptions options)`\r\n\r\nI guess it is because we want to keep the cache simple and fast. We could add second cache as simple solution. @daxian-dbw Thoughts? Make sense use ConcurrentDictionary?\r\n\r\n",
      "created_at": "2019-09-29T10:47:17Z",
      "updated_at": "2019-09-29T10:57:14Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #10657, which has now been successfully released as `v7.0.0-preview.6`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.6)\n",
      "created_at": "2019-11-21T22:35:54Z",
      "updated_at": "2019-11-21T22:35:54Z"
    }
  ],
  "created_at": "2019-02-21T17:04:45Z",
  "number": 8941,
  "state": "closed",
  "title": "Performance problem: -cmatch prevents automatic caching of on-demand-compiled regexes",
  "updated_at": "2019-11-21T22:35:54Z"
}