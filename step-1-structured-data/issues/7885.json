{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7885",
  "author": "Artem-av-st",
  "body": "I have .NET core console app and try to execute PS commands from it. Following code correctly works on windows machine, but stucks on Linux (Ubuntu 18.04) machine. \r\n\r\n```\r\nvar pipeLine = _runspace.CreatePipeline();\r\n\r\nvar myCommand = new Command(script, true);            \r\npipeLine.Commands.Add(myCommand);            \r\npipeLine.Input.Close();\r\n\r\nConsole.WriteLine(\"Running pipeline...\");\r\npipeLine.InvokeAsync();\r\n\r\nwhile (pipeLine.PipelineStateInfo.State != PipelineState.Completed)\r\n{\r\n     Thread.Sleep(100);\r\n     Console.WriteLine(pipeLine.PipelineStateInfo.State.ToString());//Status is still 'Running' infinitely on linux machine\r\n}\r\nSystem.Console.WriteLine(\"PipeLine finished\");\r\nwhile (!pipeLine.Output.EndOfPipeline)\r\n    commandResults.Add(pipeLine.Output.Read());\r\n\r\n```\r\nBoth machines have the same version of .NET core (2.1.3).",
  "closed_at": "2020-05-07T16:34:05Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Which PowerShell nupkg are you referencing?",
      "created_at": "2018-09-28T19:56:17Z",
      "updated_at": "2018-09-28T19:56:17Z"
    },
    {
      "author": "Artem-av-st",
      "author_association": "NONE",
      "body": ">           Which PowerShell nupkg are you referencing?\r\n\r\nMicrosoft.PowerShell.SDK 6.1.0",
      "created_at": "2018-10-01T05:31:00Z",
      "updated_at": "2018-10-01T05:31:00Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@Artem-av-st what is in your script that you're running?  ",
      "created_at": "2018-10-01T22:43:05Z",
      "updated_at": "2018-10-01T22:43:05Z"
    },
    {
      "author": "Artem-av-st",
      "author_association": "NONE",
      "body": "@SteveL-MSFT I have got the same result, running Get-Help and Get-Mailbox commandlets",
      "created_at": "2018-10-02T05:54:04Z",
      "updated_at": "2018-10-02T05:54:04Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@Artem-av-st I tried this on macOS and Ubuntu 18.04 and this worked for me:\r\n\r\npipeline.csproj\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.PowerShell.SDK\" Version=\"6.1.0\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nprogram.cs\r\n```csharp\r\nusing System;\r\nusing System.Management.Automation;\r\nusing System.Management.Automation.Runspaces;\r\nusing System.Threading;\r\n\r\nnamespace pipeline\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Runspace runspace = RunspaceFactory.CreateRunspace();\r\n            runspace.Open();\r\n            var pipeLine = runspace.CreatePipeline();\r\n\r\n            string script = \"Get-Help Get-Command\";\r\n            var myCommand = new Command(script, true);\r\n            pipeLine.Commands.Add(myCommand);\r\n            pipeLine.Input.Close();\r\n\r\n            Console.WriteLine(\"Running pipeline...\");\r\n            pipeLine.InvokeAsync();\r\n\r\n            while (pipeLine.PipelineStateInfo.State != PipelineState.Completed)\r\n            {\r\n                Thread.Sleep(100);\r\n                Console.WriteLine(pipeLine.PipelineStateInfo.State.ToString());//Status is still 'Running' infinitely on linux machine\r\n            }\r\n            System.Console.WriteLine(\"PipeLine finished\");\r\n            while (!pipeLine.Output.EndOfPipeline)\r\n            {\r\n                Console.WriteLine(pipeLine.Output.Read());\r\n            }\r\n            runspace.Close();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nNote that the `CreatePipeline()` API is deprecated.  You should use [PowerShell]::Create() instead:\r\n\r\n```csharp\r\n            PowerShell ps = PowerShell.Create();\r\n            ps.AddScript(\"Get-Help Get-Command\");\r\n            var output = new PSDataCollection<PSObject>();\r\n            var async = ps.BeginInvoke();\r\n            while (ps.InvocationStateInfo.State != PSInvocationState.Completed)\r\n            {\r\n                Thread.Sleep(100);\r\n                Console.WriteLine(ps.InvocationStateInfo.State.ToString());\r\n            }\r\n            output = ps.EndInvoke(async);\r\n            foreach (PSObject obj in output)\r\n            {\r\n                Console.WriteLine(obj.ToString());\r\n            }\r\n```\r\n",
      "created_at": "2018-10-03T19:32:28Z",
      "updated_at": "2018-10-03T19:32:28Z"
    },
    {
      "author": "Artem-av-st",
      "author_association": "NONE",
      "body": "@SteveL-MSFT Thanks for your investigation, Steve.  I guess that my issue related  to the fact that I am creating a runspace on a remote machine. Perhaps the environment settings are made incorrectly. Do you have any idea what might be done wrong?\r\n\r\n\r\n```\r\nvar securePassword = CreateSecurePassword(configuration.Password);\r\nPSCredential credential = new PSCredential(configuration.User, securePassword);\r\n\r\n_connectionInfo = new WSManConnectionInfo(\r\n    new Uri(configuration.Sever),\r\n    \"http://schemas.microsoft.com/powershell/Microsoft.Exchange\",\r\n    credential);           \r\n                      \r\n_connectionInfo.SkipCNCheck = true; \r\n_connectionInfo.SkipRevocationCheck = true; \r\n_connectionInfo.SkipCACheck = true;            \r\n_connectionInfo.AuthenticationMechanism = AuthenticationMechanism.Basic\r\n\r\nusing (var runSpace = RunspaceFactory.CreateRunspace((RunspaceConnectionInfo)_connectionInfo))\r\n{\r\n    runSpace.OpenAsync();\r\n    while(runSpace.RunspaceStateInfo.State != RunspaceState.Opened){}\r\n    PowerShell ps = PowerShell.Create();           \r\n    ps.Runspace = runspace;\r\n    ps.AddScript(\"Get-Command\");            \r\n    var async = ps.BeginInvoke();            \r\n    var output = ps.EndInvoke(async);                    \r\n    runSpace.CloseAsync();\r\n}\r\n```",
      "created_at": "2018-10-04T08:44:33Z",
      "updated_at": "2018-10-04T08:44:33Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@Artem-av-st ah, that was a critical missing piece of information.  Can you confirm on your client machine it works connecting to Exchange and running Get-Command from pwsh?",
      "created_at": "2018-10-04T16:28:59Z",
      "updated_at": "2018-10-04T16:28:59Z"
    },
    {
      "author": "Artem-av-st",
      "author_association": "NONE",
      "body": "@SteveL-MSFT Apologize for this omission. This script works correctly on windows client machine and stops on EndInvoke method on Linux (Ubuntu) machine. I am trying to find a way to manage MS exchange using .net core application.",
      "created_at": "2018-10-04T16:37:43Z",
      "updated_at": "2018-10-04T16:37:43Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@Artem-av-st I understand you are trying to do this from a custom .Net Core app, but I want to make sure there isn't a problem with the cmdets themselves that allow connecting to Exchange which I expected to be working (and works for me) before trying to investigate this at the C# level.",
      "created_at": "2018-10-04T21:34:08Z",
      "updated_at": "2018-10-04T21:34:08Z"
    },
    {
      "author": "Artem-av-st",
      "author_association": "NONE",
      "body": "@SteveL-MSFT I also have an issue when execute scripts from powershell.\r\nFollowing script works fine on windows machine and the last command stucks on linux machine. \r\n```\r\n$cred = Get-Credential\r\n$uri = 'https://host/powershell'\r\n$opt = New-Object System.Management.Automation.Remoting.PSSessionOption -Property @{'SkipRevocationCheck' = 'true'; 'SkipCACheck' = 'true'; 'SkipCNCheck' = 'true'}\r\n$session = new-pssession -connectionuri $uri -authentication basic -credential $cred -ConfigurationName Microsoft.Exchange -sessionoption $opt\r\nInvoke-Command  -session $session -scriptblock {Get-Mailbox} \r\n```\r\nI hope it makes sense.",
      "created_at": "2018-10-05T06:07:02Z",
      "updated_at": "2018-10-05T06:07:22Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This works fine for me on my Ubuntu 18.04 box:\r\n\r\n```powershell\r\n$session = New-PSSession -ConnectionUri https://outlook.office365.com/powershell-liveid/ -ConfigurationName Microsoft.Exchange -Credential $cred -Authentication Basic\r\nInvoke-Command -Session $session -ScriptBlock { get-mailbox }\r\n```\r\n\r\nAre you connecting to a Windows machine running Exchange Server?",
      "created_at": "2018-10-05T16:54:34Z",
      "updated_at": "2018-10-05T16:54:34Z"
    },
    {
      "author": "Artem-av-st",
      "author_association": "NONE",
      "body": " @SteveL-MSFT  Yes I am.",
      "created_at": "2018-10-05T16:57:30Z",
      "updated_at": "2018-10-08T05:26:09Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@Artem-av-st I need to prepare for PSConfAsia so I won't be able to investigate this until after that",
      "created_at": "2018-10-08T17:18:32Z",
      "updated_at": "2018-10-08T17:18:32Z"
    },
    {
      "author": "Artem-av-st",
      "author_association": "NONE",
      "body": "@SteveL-MSFT I am still investigating this issue and have found following.\r\nMy application stucks on EndInvoke method of AsyncResult class when calls WaitHandle.WaitAny(...):\r\n\r\n```\r\ninternal void EndInvoke()\r\n        {\r\n            _invokeOnThreadEvent = new AutoResetEvent(false);\r\n\r\n            // Start the thread wait loop.\r\n            WaitHandle[] waitHandles = new WaitHandle[2] { AsyncWaitHandle, _invokeOnThreadEvent };\r\n            bool waiting = true;\r\n            while (waiting)\r\n            {\r\n                //Stucks there\r\n                int waitIndex = WaitHandle.WaitAny(waitHandles);\r\n                \r\n                if (waitIndex == 0)\r\n                {\r\n                    waiting = false;\r\n                }\r\n                else\r\n                {\r\n                    // Invoke callback on thread.\r\n                    try\r\n                    {   \r\n                        _invokeCallback(_invokeCallbackState);                        \r\n                    }\r\n                    catch (Exception)\r\n                    {\r\n                    }\r\n                }\r\n            }\r\n\r\n            AsyncWaitHandle.Dispose();\r\n            _completedWaitHandle = null;  // Allow early GC\r\n\r\n            _invokeOnThreadEvent.Dispose();\r\n            _invokeOnThreadEvent = null;  // Allow early GC\r\n\r\n            // Operation is done: if an exception occured, throw it\r\n            if (Exception != null)\r\n            {\r\n                throw Exception;\r\n            }\r\n        }\r\n```\r\nI will be glad to see your ideas after  PSConfAsia. Thanks",
      "created_at": "2018-10-18T14:32:38Z",
      "updated_at": "2018-10-18T14:32:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Can we close the old issue?",
      "created_at": "2020-01-30T12:46:38Z",
      "updated_at": "2020-01-30T12:46:38Z"
    }
  ],
  "created_at": "2018-09-28T05:50:37Z",
  "number": 7885,
  "state": "closed",
  "title": "PowerShell pipeline stucks",
  "updated_at": "2020-05-07T16:34:30Z"
}