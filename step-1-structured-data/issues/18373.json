{
  "_url": "https://github.com/PowerShell/PowerShell/issues/18373",
  "author": "kimipsen",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nWhen trying to output unicode characters with Write-Progress, they all show up as `?`-marks. Using the same text/variable with Write-Host works fine.\n\n### Expected behavior\n\n```console\n$str = '\ud83e\udd84\u2764\ufe0f\ud83c\udf08\u9633\u5c71\u4f1f\u4f1f'\r\n$count = 1\r\nWhile ($count -lt 100) {\r\n\tWrite-Progress -Status $str -PercentComplete $count -Activity \"`u{1F4A9}\"\r\n\t$count++\r\n\tStart-Sleep -Milliseconds 10\r\n}\n```\n\n\n### Actual behavior\n\n```console\nBoth -Status and -Activity texts output `?` instead of the actual characters.\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.7\r\nPSEdition                      Core\r\nGitCommitId                    7.2.7\r\nOS                             Microsoft Windows 10.0.22623\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n![image](https://user-images.githubusercontent.com/11664553/197714416-b7989fcc-9847-4613-bac3-c8efe2c0fe40.png)\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "![Screenshot 2022-10-25 113418](https://user-images.githubusercontent.com/78153320/197725053-a38d977a-c875-42d1-b26a-8806d71046ab.png)\r\n",
      "created_at": "2022-10-25T08:35:05Z",
      "updated_at": "2022-10-25T08:35:05Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "There is  / was a known problem with percent complete in write progress  - IIRC it is fixed in 7.3 preview  and it causes strings to be truncated. This looks like 0x1f4a9  will be UTF 16 encoded over two 16-bit words and if the truncation happens in the wrong place I think it will give the result shown.   @237dmitry  Is it working for you on 7.3 preview ? \r\n",
      "created_at": "2022-10-25T09:02:01Z",
      "updated_at": "2022-10-25T09:02:01Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> Is it working for you on 7.3 preview ?\r\n\r\npwsh: 7.2.7\r\nWindow Terminal: 1.16.2642.0\r\nOS: Win 11 22H2\r\nOS locale: UTF8\r\n\r\nIn conhost works too but emojies are monochrome.\r\n\r\n",
      "created_at": "2022-10-25T09:32:37Z",
      "updated_at": "2022-10-25T09:32:37Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "Yeah I've just tried it in a couple of versions, I can't repro the original symptoms. \r\n",
      "created_at": "2022-10-25T10:36:16Z",
      "updated_at": "2022-10-25T10:36:16Z"
    },
    {
      "author": "kimipsen",
      "author_association": "NONE",
      "body": "I am really sorry to have waisted time on this issue - based on @237dmitry 's answer with extra debug information, it turns out I was missing this setting in windows for it to work:\r\n<img width=\"359\" alt=\"image\" src=\"https://user-images.githubusercontent.com/11664553/197832956-c4c838b9-6861-4665-b9b8-674e43bc6a9b.png\">\r\n\r\nOther than that, I was using a similar setup: \r\nWindows 11 (22H2, build 22623.870)\r\npwsh 7.2.7\r\nWindows Terminal 1.15.2875.0. \r\nOS Locale: Danish.",
      "created_at": "2022-10-25T16:43:11Z",
      "updated_at": "2022-10-25T16:43:11Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@kimipsen  Actually that does indicate a problem.  **Can you please edit the title** (see below) And thanks for doing the extra step to find the cause. \r\n\r\nThis should not depend on the codepage selected. On one computer I have that setting and can't repro the issue. \r\nOn the computer I am using now (provide by the client I'm working for and set up by their IT people without giving me admin rights) the issue DOES repro and chcp says I'm using code page 437 - just like I used on DOS 3.1 in the 1980s :-)  \r\n\r\nThere if I select **classic view** for progress\r\n![image](https://user-images.githubusercontent.com/16209593/197982718-145d625c-b3bb-4994-9e44-8220410c7b4a.png)\r\n\r\nall good. The terminal , powershell, and Write-Progress can all display UTF 16 strings correctly. \r\nIf I switch to minimal view something like the \u20ac sign which is not in code page 437 or the ellipsis (\u2026) which is a two-byte unicode character both cause failures with the **minimal view** \r\n\r\n![image](https://user-images.githubusercontent.com/16209593/197985849-d9767954-8ba0-47da-8913-19e294282be3.png)\r\n \r\nThis issue should be have title like **Minimal view in Write-progress should not depend on code page settings** . It can't output characters which classic view CAN output I would say that is a bug. \r\n \r\n\r\n",
      "created_at": "2022-10-26T09:18:42Z",
      "updated_at": "2022-10-26T09:18:42Z"
    },
    {
      "author": "kimipsen",
      "author_association": "NONE",
      "body": "@jhoneill Thanks for the great explanation. I did not realize that there are differing views for Write-Progress. I've been experimenting a bit further now that I've atleast gotten unicode characters to show, and ran into this: \r\n<img width=\"233\" alt=\"image\" src=\"https://user-images.githubusercontent.com/11664553/198013369-05b30e6d-9f30-42e3-acbc-6ae2e99d16af.png\">\r\n\r\n```powershell\r\n& {\r\n\t$args = @{\r\n\t\tActivity = \"Demo\"\r\n\t\tStatus = \"\ud83d\udc83\ud83d\udd7a\ud83d\udc83\ud83d\udd7a\ud83d\udc83\ud83d\udd7a\ud83d\udc83\ud83d\udd7a\"\r\n\t\tPercentComplete = 10\r\n\t}\r\n\r\n\tWhile ($count -lt 100) {\r\n\t\tWrite-Progress @args\r\n\t\t$count++\r\n\t\tStart-Sleep -Milliseconds 100000\r\n\t}\r\n}\r\n```\r\nI have a feeling it's also somewhat related to this overall issue. It seems the Write-Progress does not like to draw unicode characters either, when the progress \"overlaps\".",
      "created_at": "2022-10-26T11:23:50Z",
      "updated_at": "2022-10-26T11:23:50Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "Yes that is going be part of the same problem.  \r\nInternally .NET strings are UTF16 \r\nSomething like \ud83d\udc83 which is  0x01f483  can't be represented as a 16 bit number so it becomes two 16 bit ones.  0xd83d\r\n and 0xdc83   - this range identifies numbers which need to be combined - the we subtract d800 from one and dc00 from the other and the output is 0x10000 + 0x400 * 3d + 83 \r\n\r\nWhen the string with  [0xd83d] [0xdc83] is output it's merged back to  [0x01f483] and  \ud83d\udc83  is printed. \r\nHowever if something says \"I need to insert an ANSI escape Sequence after the first character\" then we get  \r\n``` `e[7m   [0xd83d]  `e[0m  [0xdc83]  ```\r\nFor reverse, first char,  reset, second char. Which gives nonsense output. This doesn't impact most unicode because most of the characters are 16 bit values, but it will hit unicode emojis \r\n\r\n\r\n",
      "created_at": "2022-10-26T12:38:50Z",
      "updated_at": "2022-10-27T09:55:06Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Yes that is going be part of the same problem. Internally .NET strings are UTF16 Something like \ud83d\udc83 which 0x01f483 can't be represented as a 16 bit number so it becomes two 16 bit ones. 0xd83d and 0xdc83\r\n\r\nThat's true, but we could also use the `EnumerateRunes` API (or at least just check for surrogate pairs) to determine when to not split a rune with VT escapes. Opening to the Interactive WG",
      "created_at": "2022-10-26T20:47:04Z",
      "updated_at": "2022-10-26T20:47:04Z"
    }
  ],
  "created_at": "2022-10-25T07:49:18Z",
  "labels": [
    "WG-Interactive-Console",
    "Needs-Triage"
  ],
  "number": 18373,
  "state": "open",
  "title": "Minimal view in Write-progress should not depend on code page settings",
  "updated_at": "2022-10-27T09:55:06Z"
}