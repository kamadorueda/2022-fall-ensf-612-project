{
  "_url": "https://github.com/PowerShell/PowerShell/issues/732",
  "author": "vors",
  "body": "There are 2 functions:\n- New-MappingFile - creates mapping.json from project.json files\n  (one is included in this commit)\n- Copy-SubmoduleFiles - enables copying files back and forth from\n  submodule to src/<projects> based on mapping.json file\n\n<!-- Reviewable:start -->\n\n---\n\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"35\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/powershell/powershell/732)\n\n<!-- Reviewable:end -->\n",
  "closed_at": "2016-03-31T04:24:58Z",
  "comments": [
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Reviewed 2 of 2 files at r1.\nReview status: all files reviewed at latest revision, 9 unresolved discussions.\n\n---\n\n_[mapping.json, line 0 [r1]](https://reviewable.io:443/reviews/powershell/powershell/732#-KDZRL8P5vDJdr-er1s3:-KDZRL8P5vDJdr-er1s4:-975076958) ([raw file](https://github.com/powershell/powershell/blob/892d13d09913d8a2c322be030f616357c2d8993c/mapping.json#L0)):_\nI hate littering the root directory with more stuff. Do we want to add a folder for things like this? We have a lot of scripts in the top level too; but OTOH, moving them means fixing the scripts to run from the right directory. I might just need to ignore this.\n\n---\n\n_[PowerShellGitHubDev.psm1, line 349 [r1]](https://reviewable.io:443/reviews/powershell/powershell/732#-KDZSStrkpg743ghG4jf:-KDZSStrkpg743ghG4jg:-103503660) ([raw file](https://github.com/powershell/powershell/blob/892d13d09913d8a2c322be030f616357c2d8993c/PowerShellGitHubDev.psm1#L349)):_\nI've been here... You might be a lot happier just using Json.NET, like [so](https://github.com/PowerShell/PowerShell/blob/master/test/powershell/Json.Tests.ps1).\n\n---\n\n_[PowerShellGitHubDev.psm1, line 395 [r1]](https://reviewable.io:443/reviews/powershell/powershell/732#-KDZW6PpOmPxz7bG6fKo:-KDZW6PpOmPxz7bG6fKp:-995646024) ([raw file](https://github.com/powershell/powershell/blob/892d13d09913d8a2c322be030f616357c2d8993c/PowerShellGitHubDev.psm1#L395)):_\nBackslash won't work on Linux.\n\n---\n\n_[PowerShellGitHubDev.psm1, line 398 [r1]](https://reviewable.io:443/reviews/powershell/powershell/732#-KDZVEr_3QgfezfKFueK:-KDZVEr_3QgfezfKFueL:-193572539) ([raw file](https://github.com/powershell/powershell/blob/892d13d09913d8a2c322be030f616357c2d8993c/PowerShellGitHubDev.psm1#L398)):_\nCan we have a _loud_ confirmation/warning that these are destructive operations, and will overwrite all existing files and their modifications?\n\nPerhaps a check to `git status` to see if the tree is dirty, and if so, abort.\n\n---\n\n_[PowerShellGitHubDev.psm1, line 412 [r1]](https://reviewable.io:443/reviews/powershell/powershell/732#-KDZViXm44VXy5Wumt-y:-KDZViXm44VXy5Wumt-z:-1400077339) ([raw file](https://github.com/powershell/powershell/blob/892d13d09913d8a2c322be030f616357c2d8993c/PowerShellGitHubDev.psm1#L412)):_\nWe should probably handle file encodings here. Let's get everything into the superproject in a consistent, correct encoding (which makes copying them back a pain since the source files' encodings are inconsistent; we may need to track this in `mapping.json`).\n\n---\n\n_[PowerShellGitHubDev.psm1, line 436 [r1]](https://reviewable.io:443/reviews/powershell/powershell/732#-KDZW1lg_kf3Ks95SLbQ:-KDZW1lg_kf3Ks95SLbR:-995646024) ([raw file](https://github.com/powershell/powershell/blob/892d13d09913d8a2c322be030f616357c2d8993c/PowerShellGitHubDev.psm1#L436)):_\nBackslash won't work on Linux.\n\n---\n\n_[PowerShellGitHubDev.psm1, line 441 [r1]](https://reviewable.io:443/reviews/powershell/powershell/732#-KDZWBxpl7_y0BIkp8KY:-KDZWBxpl7_y0BIkp8KZ:1509196379) ([raw file](https://github.com/powershell/powershell/blob/892d13d09913d8a2c322be030f616357c2d8993c/PowerShellGitHubDev.psm1#L441)):_\nIs this manually skipping these? There is a new project in #734, `TypeCatalogParser`.\n\nI wanted to suggest using `Microsoft.DotNet.ProjectModel` to get the `compileFiles` more easily; but really it just makes all of `SourceFiles` available; and you're needing to exclude things in `compile` but not `compileFiles`.\n\n---\n\n_[PowerShellGitHubDev.psm1, line 450 [r1]](https://reviewable.io:443/reviews/powershell/powershell/732#-KDZYWsOsmjfcUyYWO-Z:-KDZYWsOsmjfcUyYWO-_:1515719009) ([raw file](https://github.com/powershell/powershell/blob/892d13d09913d8a2c322be030f616357c2d8993c/PowerShellGitHubDev.psm1#L450)):_\nDo you need to skip the Microsoft.PowerShell.Linux.Host and SecureString projects too?\n\n---\n\n_[PowerShellGitHubDev.psm1, line 466 [r1]](https://reviewable.io:443/reviews/powershell/powershell/732#-KDZYhH8UOD3xDetUJ60:-KDZYhH8UOD3xDetUJ61:-1582197410) ([raw file](https://github.com/powershell/powershell/blob/892d13d09913d8a2c322be030f616357c2d8993c/PowerShellGitHubDev.psm1#L466)):_\nI'm surprised you had AssemblyInfo files in `compileFiles`, that shouldn't be.  AFAIK they exist in the project directories, and so are implicitly globbed by the `compile` default pattern.\n\n---\n\n_Comments from the [review on Reviewable.io](https://reviewable.io:443/reviews/powershell/powershell/732)_\n\n<!-- Sent from Reviewable.io -->\n",
      "created_at": "2016-03-23T17:40:12Z",
      "updated_at": "2016-03-23T17:40:12Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Review status: all files reviewed at latest revision, 9 unresolved discussions.\n\n---\n\n_[mapping.json, line  [r1]](https://reviewable.io:443/reviews/powershell/powershell/732#-KDZRL8P5vDJdr-er1s3:-KDZaG8rYOe1bjezD-Ay:-576145819) ([raw file](https://github.com/powershell/powershell/blob/892d13d09913d8a2c322be030f616357c2d8993c/mapping.json#L)):_\nI don't like it eather, but the hope is it would not be around for the long time. I would keep it there\n\n---\n\n_[PowerShellGitHubDev.psm1, line 349 [r1]](https://reviewable.io:443/reviews/powershell/powershell/732#-KDZSStrkpg743ghG4jf:-KD_rd-t8HMVkjLFfV6O:-2024610031) ([raw file](https://github.com/powershell/powershell/blob/892d13d09913d8a2c322be030f616357c2d8993c/PowerShellGitHubDev.psm1#L349)):_\nIt's primarily for windows (Full PS developers). Json.NET is not a part of standard distro, so current version is more generic.\n\n---\n\n_[PowerShellGitHubDev.psm1, line 395 [r1]](https://reviewable.io:443/reviews/powershell/powershell/732#-KDZW6PpOmPxz7bG6fKo:-KD_s9wyIgt7-6vcJlCM:-499146009) ([raw file](https://github.com/powershell/powershell/blob/892d13d09913d8a2c322be030f616357c2d8993c/PowerShellGitHubDev.psm1#L395)):_\nDone.\n\n---\n\n_[PowerShellGitHubDev.psm1, line 398 [r1]](https://reviewable.io:443/reviews/powershell/powershell/732#-KDZVEr_3QgfezfKFueK:-KD_sIZTO9hk2_aAf0p6:-371657453) ([raw file](https://github.com/powershell/powershell/blob/892d13d09913d8a2c322be030f616357c2d8993c/PowerShellGitHubDev.psm1#L398)):_\nAll this tools assume people know what they are doing.\nI'm not a big fun built-in protections, that will affect perf (call to git is not cheap).\n\n---\n\n_[PowerShellGitHubDev.psm1, line 412 [r1]](https://reviewable.io:443/reviews/powershell/powershell/732#-KDZViXm44VXy5Wumt-y:-KD_smCtaL3KBrbpRzb4:-1741310688) ([raw file](https://github.com/powershell/powershell/blob/892d13d09913d8a2c322be030f616357c2d8993c/PowerShellGitHubDev.psm1#L412)):_\nYes, that would be the right place to do that.\nNothing rushes us to do encoding conversion right now, we can as well do it later to keep this step simpler.\n\n---\n\n_[PowerShellGitHubDev.psm1, line 436 [r1]](https://reviewable.io:443/reviews/powershell/powershell/732#-KDZW1lg_kf3Ks95SLbQ:-KD_t-bbEQbmfom_Hu67:-499146009) ([raw file](https://github.com/powershell/powershell/blob/892d13d09913d8a2c322be030f616357c2d8993c/PowerShellGitHubDev.psm1#L436)):_\nDone.\n\n---\n\n_[PowerShellGitHubDev.psm1, line 441 [r1]](https://reviewable.io:443/reviews/powershell/powershell/732#-KDZWBxpl7_y0BIkp8KY:-KD_t1qCg-FppWcWtDlh:981712577) ([raw file](https://github.com/powershell/powershell/blob/892d13d09913d8a2c322be030f616357c2d8993c/PowerShellGitHubDev.psm1#L441)):_\nNo it's getting the mapping path pattern\n\n---\n\n_[PowerShellGitHubDev.psm1, line 450 [r1]](https://reviewable.io:443/reviews/powershell/powershell/732#-KDZYWsOsmjfcUyYWO-Z:-KDZwIYObjaqKk1ejkWq:-1318933896) ([raw file](https://github.com/powershell/powershell/blob/892d13d09913d8a2c322be030f616357c2d8993c/PowerShellGitHubDev.psm1#L450)):_\nIt's not a skip, it's a different pattern.\nThese two projects will be skipped, because there are no files in `compileFiles` section.\n\n---\n\n_[PowerShellGitHubDev.psm1, line 466 [r1]](https://reviewable.io:443/reviews/powershell/powershell/732#-KDZYhH8UOD3xDetUJ60:-KDZwXh_6HYWY7JOr488:-391250340) ([raw file](https://github.com/powershell/powershell/blob/892d13d09913d8a2c322be030f616357c2d8993c/PowerShellGitHubDev.psm1#L466)):_\nThere was one case like that.\n\n---\n\n_Comments from the [review on Reviewable.io](https://reviewable.io:443/reviews/powershell/powershell/732)_\n\n<!-- Sent from Reviewable.io -->\n",
      "created_at": "2016-03-23T23:52:05Z",
      "updated_at": "2016-03-23T23:52:05Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "We'll need to add the `resx` files into the mapping too now.\n",
      "created_at": "2016-03-28T18:27:44Z",
      "updated_at": "2016-03-28T18:27:44Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Regarding #529, with the `ps1xml` files eliminated, all that's left to deploy from PowerShell are the default `Modules`. These actually make sense to be owned by the host instead of SMA, since each host may deploy different modules.\n\nDoes this support mapping the default Modules files into the superproject?\n",
      "created_at": "2016-03-28T18:44:17Z",
      "updated_at": "2016-03-28T18:44:17Z"
    }
  ],
  "created_at": "2016-03-23T01:24:02Z",
  "number": 732,
  "state": "closed",
  "title": "Add mapping to enable psl-monad submodule removal",
  "updated_at": "2016-03-31T04:25:03Z"
}