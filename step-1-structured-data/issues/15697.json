{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15697",
  "author": "strawgate",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nThis PR is a \"child\" PR to: https://github.com/PowerShell/PowerShell/pull/15695\r\n\r\nThis PR is in good shape but needs tests for the additional parameter on invoke-restmethod for -ashashtable\r\n\r\nEssentially if the streaming approach from that PR is approved we can make new methods which take a stream directly instead of the string body. We can then wire up invoke-restmethod so that it takes the response stream and sends it directly to newtonsoft.\r\n\r\nThis should improve all use-cases of invoke-restmethod but will particularly improve cases where the source API has an array as its root element.\r\n\r\n<!-- Summarize your PR between here and the checklist. -->\r\n\r\n## PR Context\r\n\r\nThis should greatly reduce the memory usage of the invoke-restmethod cmdlets and somewhat reduce the execution time/cpu time.\r\n\r\nBenchmarks for a 100MB JSON Response with Array root element (Time to first byte from the API is about 8s so for realistic times subtract 8000ms from each runtime number)\r\n\r\n7.1.3:\r\n- Memory Usage: **1597 MB**\r\n- Runtime: **20679.9797 ms**\r\n- Est Runtime: **12679.9797 ms**\r\n\r\nThisPR:\r\n- Memory Usage: 718.55 MB\r\n- Runtime: 16323.1985 ms\r\n- Est Runtime: 8323.1985 ms\r\n\r\nThisPR -AsHashtable:\r\n- Memory Usage: **415.41 MB**\r\n- Runtime: **13592.6211 ms**\r\n- Est Runtime: **5592.6211 ms**\r\n\r\nBenchmarks for a 100MB JSON response with Object root element\r\n7.1.3\r\n- Memory Usage: 1672.84765625 MB\r\n- Runtime: 12771.3602 ms\r\n- Est Runtime: 12771.3602 ms\r\n\r\nThis PR:\r\n- Memory Usage: 1489.90625 MB\r\n- Runtime: 12222.5628 ms\r\n\r\nThis PR -AsHashtable\r\n- Memory Usage: 1146.078125 MB\r\n- Runtime: 11367.9809 ms\r\n\r\n\r\nBenchmarks for a 12MB JSON Response\r\n7.1.3:\r\n- Memory Usage: 268.9921875 MB\r\n- Runtime: 2553.9797 ms\r\n\r\nThisPR:\r\n- Memory Usage: 100.05078125 MB\r\n- Runtime: 1950.1985 ms\r\n\r\nRuntime is misleading as I am hitting a real API\r\n\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and opened an issue in the relevant tool repository. This may include:\r\n        - [ ] Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode\r\n        (which runs in a different PS Host).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n",
  "closed_at": "2021-07-12T20:32:39Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@strawgate I believe we have had a consensus that we froze current Json cmdlets based on NewtonSoft and implement new ones based on .Net API as experimental feature.",
      "created_at": "2021-06-30T03:41:41Z",
      "updated_at": "2021-06-30T03:42:27Z"
    },
    {
      "author": "strawgate",
      "author_association": "CONTRIBUTOR",
      "body": "I looked around a fair amount for information on the status of System.Text.Json and all I found was a couple 2 year old PRs that haven't moved.\r\n\r\nMy goal was to offer a highly-compatible set of changes that make a big impact on performance while we wait for System.Text.Json. The changes outlined here cut memory usage to 1/4 of what it was previously if the root element is an array and ~75% of what it was if it's an object.\r\n\r\nThe high memory usage of Powershell with API use-cases was the primary reason we moved most of our projects to C#. I've talked with a lot of people who have moved to C# or Python due to the overhead related to parsing JSON. Instead of complaining I figured i'd take a stab at it and get some experience working with the codebase.\r\n\r\nIf you guys don't want to merge the changes that's totally fine!",
      "created_at": "2021-06-30T03:58:12Z",
      "updated_at": "2021-06-30T04:53:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@strawgate The main problem is that the MSFT team is too small to review everything PR quickly.\r\nThey introduced Working Groups to get more developers from the community. If you want to work on commandlets in this repository, you can join one of the working groups.\r\n\r\nThe current strategic direction in the C# community is migration from NewtonSoft.JsonNet to System.Text.Json API. NewtonSoft has been found to be out of development. All new developers should be on System.Text.Json API.\r\n\r\nIt doesn't make sense to invest much in code based on NewtonSoft.JsonNet, only security issues, simple bugs/perfs. \r\n\r\nIf you are interested in working on these commandlets, the current conclusion is to implement new commandlets based on the System.Text.Json API as experimental features. You can grab my PRs then I could review your PRs.\r\n",
      "created_at": "2021-06-30T04:55:25Z",
      "updated_at": "2021-06-30T04:55:25Z"
    },
    {
      "author": "strawgate",
      "author_association": "CONTRIBUTOR",
      "body": "I've been using https://www.mockaroo.com/ to generate random json data with numbers, dates, etc and have been using http://www.jsondiff.com/ to do a semantic compare between the 7.1.3 cmdlets and the ones in this PR by converting it from json and then back to json and comparing the two. So far so good!",
      "created_at": "2021-06-30T15:43:53Z",
      "updated_at": "2021-06-30T15:44:10Z"
    },
    {
      "author": "strawgate",
      "author_association": "CONTRIBUTOR",
      "body": "> @strawgate The main problem is that the MSFT team is too small to review everything PR quickly.\r\n> They introduced Working Groups to get more developers from the community. If you want to work on commandlets in this repository, you can join one of the working groups.\r\n> \r\n> The current strategic direction in the C# community is migration from NewtonSoft.JsonNet to System.Text.Json API. NewtonSoft has been found to be out of development. All new developers should be on System.Text.Json API.\r\n> \r\n> It doesn't make sense to invest much in code based on NewtonSoft.JsonNet, only security issues, simple bugs/perfs.\r\n> \r\n> If you are interested in working on these commandlets, the current conclusion is to implement new commandlets based on the System.Text.Json API as experimental features. You can grab my PRs then I could review your PRs.\r\n\r\nI can't find information on joining a specific working group, is that info available somewhere?",
      "created_at": "2021-07-01T22:59:20Z",
      "updated_at": "2021-07-01T22:59:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I can't find information on joining a specific working group, is that info available somewhere?\r\n\r\nYou could e-mail directly @joeyaiello and @SteveL-MSFT.",
      "created_at": "2021-07-02T05:06:54Z",
      "updated_at": "2021-07-02T05:06:54Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2021-07-09T14:00:43Z",
      "updated_at": "2021-07-09T14:00:43Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Converted to draft, please marks as ready for review when the parent PR is merged.\r\n",
      "created_at": "2021-07-12T19:17:30Z",
      "updated_at": "2021-07-12T19:17:30Z"
    },
    {
      "author": "strawgate",
      "author_association": "CONTRIBUTOR",
      "body": "I think this PR will be abandoned as there is no interest in improving the performance of the existing cmdlets due to backwards compatibility concerns.",
      "created_at": "2021-07-12T20:32:39Z",
      "updated_at": "2021-07-12T20:32:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I think this PR will be abandoned as there is no interest in improving the performance of the existing cmdlets due to backwards compatibility concerns.\r\n\r\nAll this could be in new experimental cmdlets based on System.Text.Json API.",
      "created_at": "2021-07-13T04:35:06Z",
      "updated_at": "2021-07-13T04:35:06Z"
    }
  ],
  "created_at": "2021-06-30T01:26:09Z",
  "number": 15697,
  "state": "closed",
  "title": "Use new JSON Streaming methods for Invoke-RestMethod",
  "updated_at": "2021-07-13T04:35:06Z"
}