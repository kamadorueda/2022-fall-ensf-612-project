{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1273",
  "author": "vors",
  "body": "## Steps to reproduce\n\nOn Linux or OS X\n- create a folder `Foo`\n- type `cd foo` and hit `Tab`\n## Expected behavior\n\nCompletion will correct `cd foo` into `cd ./Foo`\n## Actual behavior\n\nNothing happens\n## Environment data\n\n<!-- provide the output of $PSVersionTable -->\n\n``` powershell\n> $PSVersionTable\nName                           Value                                                                                                        \n----                           -----                                                                                                        \nPSVersion                      5.1.10032.0                                                                                                  \nPSEdition                      Linux                                                                                                        \nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                                      \nBuildVersion                   3.0.0.0                                                                                                      \nGitCommitId                    v0.5.0                                                                                                       \nCLRVersion                                                                                                                                  \nWSManStackVersion              1.0                                                                                                          \nPSRemotingProtocolVersion      2.3                                                                                                          \nSerializationVersion           1.1.0.1   \n```\n## Reasoning\n- we already do that with `/` and `\\` on all systems.\n- fish shell does it and it's very convinient.\n",
  "closed_at": "2018-10-28T06:17:28Z",
  "comments": [
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "GNU Readline (and hence Bash) does this do with `set completion-ignore-case on`. I think most Linux developers probably use this (I certainly do).\n",
      "created_at": "2016-07-05T17:28:42Z",
      "updated_at": "2016-07-05T17:28:42Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@vors do you think this would be a good Hacktoberfest project? It seems pretty reasonable and non-breaking, as it's an improvement to interactivity of PowerShell completion. I'm not certain, but I don't think this would actually require touching PSReadLine. I don't know much about the tab-completion system though.\n",
      "created_at": "2016-10-07T20:47:41Z",
      "updated_at": "2016-10-07T20:47:41Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "@andschwa yes, that's a very good proposition! I think that implementation would need to be in the engine, but the user preference should be exposed thru PSReadLine.\n",
      "created_at": "2016-10-07T21:52:01Z",
      "updated_at": "2016-10-07T21:52:01Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Yes, the implementation must be in the engine. As for non-breaking, I agree, but the implementation likes needs to use the file globber that is used for everything else, so care is required.\n\nThe engine already has some options which are passed in via a [Hashtable](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/CommandCompletion/CompletionAnalysis.cs#L28).\n\nTabExpansionPlusPlus exposes setting those options [here](https://github.com/lzybkr/TabExpansionPlusPlus/blob/master/TabExpansionPlusPlus.psm1#L603)\n\nIt's reasonable to also add an option to PSReadline though, or really, just make it the default and not configurable, because it's really not that useful for tab completion to be case sensitive.\n",
      "created_at": "2016-10-07T23:15:42Z",
      "updated_at": "2016-10-07T23:15:42Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "I agree. Can hardly imagine anybody wanting switch to case-sensitive behavior \n",
      "created_at": "2016-10-08T01:49:09Z",
      "updated_at": "2016-10-08T01:49:09Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "I agree that this needs to be moved out to PSReadline. In any case, given that no one else has complained, I think people actually prefer the case-sensitive behavior. For now, I'm moving it out to 6.1.0 (with the intention of making an issue in the PSReadline repo). I'm also adding it to the Linux/Mac UX project so we can triage it against everything else. ",
      "created_at": "2017-05-22T23:30:39Z",
      "updated_at": "2017-05-22T23:30:39Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "PSReadline does not generate completions, it just displays them. This is a core PowerShell issue.",
      "created_at": "2017-05-23T18:49:28Z",
      "updated_at": "2017-05-23T18:49:28Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Weird, I don't know how I read the thread and saw \"people want this out on PSReadline\".\r\n\r\nEverything else remains, though. Let's solve this later. ",
      "created_at": "2017-06-06T22:36:51Z",
      "updated_at": "2017-06-06T22:36:51Z"
    },
    {
      "author": "jackfruh",
      "author_association": "NONE",
      "body": "I want case insensitive as well - I've already set it for my shell on OSX - is there a way to set it in powershell? I'm ok if it's not a default so long as I can configure it.",
      "created_at": "2017-08-06T20:59:33Z",
      "updated_at": "2017-08-06T20:59:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr Please comment for `Up-for-Grabs` - what is a right code place (line) for the fix? ",
      "created_at": "2017-08-07T04:36:05Z",
      "updated_at": "2017-08-07T04:36:38Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I think this is the relevant code: https://github.com/PowerShell/PowerShell/blob/99236b18bbfeeeb4165c69028698b9ef92c29965/src/System.Management.Automation/engine/CommandCompletion/CompletionCompleters.cs#L4126\r\n\r\nBecause we use `Resolve-Path` (which we pretty much need because of PSDrives), maybe we need a new parameter to allow case insensitive resolution.\r\n\r\nIt's definitely `Up-for-Grabs`.\r\n\r\n",
      "created_at": "2017-08-07T15:29:30Z",
      "updated_at": "2017-08-07T15:29:30Z"
    },
    {
      "author": "mrsauravsahu",
      "author_association": "NONE",
      "body": "The issue seems to be the `Dir` method in the `FileSystemProvider.cs` file. There are calls to `EnumerateDirectories` and `EnumerateFiles` which compare names of the files and directory against the wilcard in the location. Unfortunately, they do not ignore case. I'm having trouble implement this.\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/cfe173ac0e90d1bc189c469464fd589f3f16ac3b/src/System.Management.Automation/namespaces/FileSystemProvider.cs#L1611\r\n\r\n(sorry, new to markdown)\r\n\r\n",
      "created_at": "2017-08-22T20:26:28Z",
      "updated_at": "2017-08-23T15:39:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@saurav-sahu You can left click on line number and GitHub will be generate URL for the line. \r\n\r\n@lzybkr  As @saurav-sahu mentioned we use CoreFX enumerations - they is case-sensitive on Unix without switch option. We could make a tricky workaround for Unix to fix the Issue or close as \"by design\" but It seems other Unix shells has an option to switch globally case-sensitivity (/cc @mklement0 ) - What is our way? ",
      "created_at": "2017-08-23T13:03:10Z",
      "updated_at": "2017-08-23T13:03:10Z"
    },
    {
      "author": "jackfruh",
      "author_association": "NONE",
      "body": "@iSazonov has a good point - I wonder if looking at source code from one of the existing Unix shells would be helpful?  ",
      "created_at": "2017-08-23T13:07:57Z",
      "updated_at": "2017-08-23T13:07:57Z"
    },
    {
      "author": "mrsauravsahu",
      "author_association": "NONE",
      "body": "For Unix, the match for filename is done using the fnmatch function. Calls to which are here:\r\n\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.IO.FileSystem/src/System/IO/UnixFileSystem.cs#L644\r\n\r\nand\r\n\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.IO.FileSystem/src/System/IO/UnixFileSystem.cs#L644\r\n\r\n(The preview doesn't show up if it is a different repository)\r\n\r\nIf you look up the fnmatch function's signature, the last parameter `flag` does take the value `FNM_CASEFOLD`, which does case insensitive filename matching. All we have to do is implement an overloaded function in the corefx `UnixFileSystem.cs` to pass the `FNM_CASEFOLD` flag and the issue should be fixed. ",
      "created_at": "2017-08-23T16:29:33Z",
      "updated_at": "2017-08-23T16:29:33Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I can't offer spelunking in the `bash` source code, but I can provide some additional context:\r\n\r\nThere are two distinct, but related aspects of filesystem case-sensitivity:\r\n\r\n* Interactively: How _tab completion_ works.\r\n\r\n* Programmatically: How _globbing_ works.\r\n\r\nIn `bash` the two aspects are controlled _separately_:\r\n\r\n* Tab completion (programmable completion): As @andschwa notes, it is the readline library that controls the behavior. You can place `set completion-ignore-case on` in your `~/.inputc` file (or even system-wide, in `/etc/inputrc`) to persistently activate case-insensitive completion, or, ad hoc, with a more limited scope, you can run `bind \"set completion-ignore-case on\"`\r\n\r\n* Globbing (filename expansion): This is part of `bash` itself, and is controlled via shell option `nocaseglob`: `shopt -s nocaseglob` makes globbing case-INsensitive. (There's a related `nocasematch` option, but it applies to _string_ comparisons only.)\r\n\r\n`bash` categorically defaults to case-sensitive behavior, even on platforms where it _typically_ makes no sense, such as macOS.\r\n(Ultimately, whether case-sensitive behavior makes sense comes down to a given _filesystem_'s intrinsic [non]-case-sensitivity.)\r\n\r\nAn important thing to note that even though `shopt -s nocaseglob` takes effect globally for the _current_ shell, _scripts_ do _not_ see it, because `bash` runs scripts in _child processes_ that do not inherit the parent shell's state.\r\n\r\n---\r\n\r\nReturning to PowerShell:\r\n\r\nFor case-*in*sensitive filesystems, you'll likely want *both* tab completion and globbing to be case-insensitive, such as on macOS.\r\n\r\nFor case-*sensitive* filesystems, such as on Linux, _conceivably_ you want insensitivity for tab completion, for convenience and discoverability, while retaining sensitivity in globbing for stringency.\r\n\r\nCertainly with respect to _globbing_, we must not mask the case-sensitivity of an underlying filesystem, at least not by default, so making both behaviors _opt-in_ sounds sensible.\r\n\r\nThe flip side is that having to opt in every time on a platform where not doing so wouldn't make sense is a nuisance.\r\n\r\nHaving _platform-dependent defaults_ is an option (Windows, macOS: case-INsensitive; Linux: case-SENSITIVE) - though you could argue that _consistent_ default behavior across platforms is more important.\r\n\r\n(As stated, you could argue that the behavior should depend on the specific _filesystem_ being targeted, _situationally_, but I think that would be too obscure and confusing.)\r\n\r\nAnother aspect to consider: In PowerShell, scripts run in-process (unless you use an executable, extension-less script file with a shebang line), so a setting analogous to `shopt -s nocaseglob` (say, via a new preference variable such as `$ps:NoCaseGlobbing`) would then affect all scripts invoked in the session too, unlike  in `bash`.\r\n\r\n(This fundamental difference in how scripts are run will likely cause confusion in other cases too.)\r\n",
      "created_at": "2017-08-23T17:01:20Z",
      "updated_at": "2018-04-26T03:53:21Z"
    },
    {
      "author": "pcgeek86",
      "author_association": "NONE",
      "body": "Guys, can we prioritize this for 6.0? Looks like some effort has already gone into fixing this, but I'm ramming into this issue on nearly a daily basis. I really hope we can get this in for 6.0 release. @SteveL-MSFT @joeyaiello ",
      "created_at": "2017-12-08T20:42:48Z",
      "updated_at": "2017-12-08T20:42:48Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@pcgeek86 given that the PR hasn't moved forward, this is not something that will make it into 6.0.0.  ",
      "created_at": "2017-12-09T01:45:25Z",
      "updated_at": "2017-12-09T01:45:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The PR is a solution and ready but it is only _slow_ workaround. We could merge it if we really want to have it now.",
      "created_at": "2017-12-09T16:12:59Z",
      "updated_at": "2017-12-09T16:12:59Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov at this time, we are only taking targeted fixes for RC2 and risk averse to introducing regression.  Given the extent of the changes in this PR, I don't think we should take it for 6.0.0.  ",
      "created_at": "2017-12-11T17:31:26Z",
      "updated_at": "2017-12-11T17:31:26Z"
    },
    {
      "author": "jazzdelightsme",
      "author_association": "CONTRIBUTOR",
      "body": "This may already be covered, but: in addition to tab completion and globbing, I would hope this could also fix the situation where I just pass the path directly. Example:\r\n\r\n1. `mkdir Foo`\r\n1. `cd foo`\r\n\r\n**Expected result:** \r\n    Working directory ends in `\\Foo`.\r\n\r\n**Actual result:**\r\n    Working directory ends in `\\foo`.\r\n\r\nOne way this can really trip you up is in git: if you `cd`ed using the wrong directory casing and then run git commands (like \"`git log .`\"), git will think you have no files/history there. :(\r\n\r\n(that's how I ended up here today)\r\n\r\nI should also note that the steps above work as expected in cmd.exe on Windows.\r\n",
      "created_at": "2017-12-11T19:44:51Z",
      "updated_at": "2017-12-11T20:02:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@jazzdelightsme If your scenario is on Unix, with the change you'll can do:\r\n```powershell\r\nmkdir Foo\r\ncd f<Tab>\r\ncd Foo<Enter>\r\n```",
      "created_at": "2017-12-12T12:51:01Z",
      "updated_at": "2017-12-12T12:51:01Z"
    },
    {
      "author": "jazzdelightsme",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Tab completion will also work that way on Windows. It's just if you enter the complete path yourself, PowerShell keeps it as-is.\r\n\r\nI previously thought this problem belonged as part of this issue, but on second thought, this issue seems to more particularly track tab completion and globbing on non-Windows... so I'll open a separate issue for it: #5678",
      "created_at": "2017-12-12T20:15:33Z",
      "updated_at": "2017-12-12T20:15:33Z"
    },
    {
      "author": "pcgeek86",
      "author_association": "NONE",
      "body": "@SteveL-MSFT Can we fix this for 6.0.1?",
      "created_at": "2018-01-18T20:45:34Z",
      "updated_at": "2018-01-18T20:45:34Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@pcgeek86 we're only taking critical fixes for servicing releases.  We should have a 6.1.0-preview release in early Feb.  However #4699 isn't merged yet.",
      "created_at": "2018-01-25T01:22:47Z",
      "updated_at": "2018-01-25T01:22:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "#4699 is \"stupid\" solution - I explore another way.",
      "created_at": "2018-01-25T03:27:28Z",
      "updated_at": "2018-02-20T11:41:42Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "In .Net Core we'll have https://github.com/dotnet/corefx/issues/25873",
      "created_at": "2018-02-20T11:46:44Z",
      "updated_at": "2018-02-20T11:46:44Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Working with test build of dotnetcore 2.1-rc1, this just works on macOS.  Will add tests.",
      "created_at": "2018-04-26T03:42:59Z",
      "updated_at": "2018-04-26T03:42:59Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Just tried it on Ubuntu and, as expected, will need to add code to make it work on a case sensitive filesystem.  However, the experience on macOS is SO much better!",
      "created_at": "2018-04-29T22:42:34Z",
      "updated_at": "2018-04-29T23:59:09Z"
    },
    {
      "author": "pcgeek86",
      "author_association": "NONE",
      "body": "This is great news. :)",
      "created_at": "2018-04-30T14:13:56Z",
      "updated_at": "2018-04-30T14:13:56Z"
    },
    {
      "author": "SRGOM",
      "author_association": "CONTRIBUTOR",
      "body": "This is now in Powershell 6.2 released last week.",
      "created_at": "2019-03-30T04:21:53Z",
      "updated_at": "2019-03-30T04:21:53Z"
    },
    {
      "author": "SRGOM",
      "author_association": "CONTRIBUTOR",
      "body": "Is there a way to disable this too?",
      "created_at": "2019-03-30T04:29:59Z",
      "updated_at": "2019-03-30T04:29:59Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@SRGOM Just to be clear, you want an option for tab-completion to be case-sensitive?  If so, please open a new issue.",
      "created_at": "2019-03-30T15:07:10Z",
      "updated_at": "2019-03-30T15:07:10Z"
    },
    {
      "author": "lihuelworks",
      "author_association": "NONE",
      "body": "I want exactly that",
      "created_at": "2019-07-28T05:57:29Z",
      "updated_at": "2019-07-28T05:57:29Z"
    }
  ],
  "created_at": "2016-07-04T18:45:33Z",
  "labels": [
    "OS-macOS",
    "OS-Linux",
    "Usability",
    "WG-Interactive-IntelliSense",
    "Resolution-Fixed"
  ],
  "number": 1273,
  "state": "closed",
  "title": "Location completion should be case-insensitive",
  "updated_at": "2019-07-28T05:57:29Z"
}