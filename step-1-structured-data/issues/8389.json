{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8389",
  "author": "mklement0",
  "body": "_Update_:\r\n\r\nThis issue was originally about `Update-ModuleManifest`, which is maintained in the PowerShellGet repository. However, `Update-ModuleManifest` calls this repository's `New-ModuleManifest` cmdlet, which itself exhibits problematic behavior:\r\n\r\n```powershell\r\nNew-ModuleManifest tmp.psd1 -RootModule '\\/'  # invalid value is quietly accepted.\r\n```\r\n---\r\n\r\nThis is a regression from Windows PowerShell.\r\n\r\nI've only tried with one entry, `RootModule`, where the bug only surfaces if the input manifest file does _not_ have the entry being updated yet.\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n# Important: create the manifest *without* -RootModule\r\nNew-ModuleManifest tmp.psd1\r\n# Try to update (add) the RootModule entry with an invalid value.\r\nUpdate-ModuleManifest tmp.psd1 -RootModule '\\/'\r\n'---'\r\n# Extract the now-current RootModule entry.\r\nSelect-String ^RootModule tmp.psd1\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nMicrosoft.PowerShell.Core\\Test-ModuleManifest : The module manifest '\\/' could not be processed because it is not a valid PowerShell module manifest file.\r\n...\r\n---\r\n```\r\n\r\nThat is, an error should be reported, and the manifest file should remain unaltered, i.e., still have no `RootModule` entry.\r\n\r\n# Actual behavior\r\n\r\n```none\r\nMicrosoft.PowerShell.Core\\Test-ModuleManifest : The module manifest '\\/' could not be processed because it is not a valid PowerShell module manifest file.\r\n...\r\n---\r\n\r\ntmp.psd1:12:RootModule = '\\/'\r\n\r\n```\r\n\r\nThat is, the manifest file was unexpectedly still updated with the invalid entry.\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core 6.2.0-preview.1 on macOS 10.14.1\r\nPowerShell Core 6.2.0-preview.1 on Ubuntu 16.04.5 LTS\r\nPowerShell Core 6.2.0-preview.1 on Microsoft Windows 10 Pro (64-bit; Version 1803, OS Build: 17134.345)\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "pougetat",
      "author_association": "NONE",
      "body": "Hey @mklement0 ,\r\nDo you mind if I work on this ? :)",
      "created_at": "2019-01-07T15:58:45Z",
      "updated_at": "2019-01-07T15:58:45Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for being willing to take this on, @pougetat.\r\n\r\nIt's certainly OK with me personally, but let's ask @SteveL-MSFT: Is this up for grabs?",
      "created_at": "2019-01-07T16:06:50Z",
      "updated_at": "2019-01-07T16:06:50Z"
    },
    {
      "author": "pougetat",
      "author_association": "NONE",
      "body": "@mklement0  If I understand correctly, this cmdlet is implemented as a part of PowerShellGet. I'll at least take the liberty of recreating this issue in that repo ? :)",
      "created_at": "2019-01-07T16:45:57Z",
      "updated_at": "2019-01-07T16:47:03Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@pougetat. Oops! Didn't even realize that - please do.",
      "created_at": "2019-01-07T16:57:19Z",
      "updated_at": "2019-01-07T16:57:19Z"
    },
    {
      "author": "pougetat",
      "author_association": "NONE",
      "body": "@mklement0 \r\n\r\nHey I started looking into this and the issue is not actually within PowerShellGet which works correctly but rather in here : \r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/4a63201139ce1625b43f1d5b7fb0d5c4b6d80cd5/src/System.Management.Automation/engine/Modules/NewModuleManifestCommand.cs#L1046\r\n\r\nI'm not really sure why NewModuleManifest gets called when running Update-ModuleManifest instead of the script from PowershellGet that's included as a nuget package.\r\n\r\nI think it would be a good idea to reopen this issue in this repo and can I close the one I opened in PowerShellGet ?",
      "created_at": "2019-01-08T12:31:08Z",
      "updated_at": "2019-01-08T12:31:08Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the sleuthing, @pougetat.\r\n\r\nIt sounds like you think that the proper fix is for `Update-ModuleManifest` not to call `New-ModuleManifest`. If so, then the issue belongs in the PowerShellGet repository after all, right?\r\n",
      "created_at": "2019-01-08T12:38:54Z",
      "updated_at": "2019-01-08T12:38:54Z"
    },
    {
      "author": "pougetat",
      "author_association": "NONE",
      "body": "Hey @mklement0 ,\r\n\r\nFrom my debugging I notice : \r\n- First NewModuleManifest is called with the RootModule parameter (NewModuleManifest isn't a part of PowerShellGet)\r\n- Later the actual PowerShellGet Update-ModuleManifest commandlet gets called.\r\n\r\nNewModuleManifest does not check whether or not RootModule is valid so the issue is indeed within this method.\r\n\r\nWe could : \r\n- Not call NewModuleManifest when running Update-ModuleManifest in which case an invalid RootModule would not be added to the manifest. Unfortunately this means that there is still an issue when creating a new manifest with an invalid RootModule (I'm guessing this is indeed an issue)\r\n\r\nOR\r\n\r\n- Add a verification within NewModuleManifest that checks for a valid RootModule.",
      "created_at": "2019-01-08T12:46:38Z",
      "updated_at": "2019-01-08T12:47:28Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @pougetat.\r\n\r\nIt sounds like `New-ModuleManifest` should be fixed in its own right, so I've reopened this issue with an updated description.\r\n\r\nKnowing little about either cmdlet, I'm a bit confused: `New-ModuleManifest` itself seems capable of _updating_ existing manifests as well, so why was `Update-ModuleManifest` created (with different / additional functionality?)\r\n",
      "created_at": "2019-01-08T13:17:10Z",
      "updated_at": "2019-01-08T13:17:10Z"
    },
    {
      "author": "pougetat",
      "author_association": "NONE",
      "body": "@mklement0 \r\nVery good question to which I don't know the answer. I also know little about these commandlets.",
      "created_at": "2019-01-08T14:51:11Z",
      "updated_at": "2019-01-08T14:51:11Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "/cc @SteveL-MSFT @vors as it seems they've worked with this file in the past and may be aware of some of the reasoning behind it. \ud83d\ude42 ",
      "created_at": "2019-01-08T15:06:22Z",
      "updated_at": "2019-01-08T15:06:22Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Regarding `New-ModuleManifest`, this seems vaguely familiar and I think the reasoning is that you may use `New-ModuleManifest` before authoring rootmodule.psm1 so it shouldn't fail if the file doesn't exist.  `Update-ModuleManifest`, however implies everything is working (and thus existing), so it seems that a fix would be to have `Update-ModuleManifest` do the verification rather than making any change in `New-ModuleManifest`.",
      "created_at": "2019-01-08T18:32:56Z",
      "updated_at": "2019-01-08T18:32:56Z"
    },
    {
      "author": "pougetat",
      "author_association": "NONE",
      "body": "Hey @SteveL-MSFT  \r\n\r\nThe issue is that simply executing Update-ModuleManifest in PowerShell calls first NewModuleManifest which modifies the current manifest without making verifications and then calls the actual Update-ModuleManifest cmdlet script. \r\n\r\nThe Update-ModuleManifest cmdlet does the required verifications and indicates that '\\\\/' is an invalid root module but once we enter this script it is too late since NewModuleManifest has already been run as part of the same execution flow and has added an inexisting RootModule.\r\n\r\nI was wondering why NewModuleManifest gets called as a part of the Update-ModuleManifest flow and more specifically why the line mentionned above gets executed. :)\r\n\r\nI'll continue to investigate this tomorrow. :)",
      "created_at": "2019-01-08T20:56:47Z",
      "updated_at": "2019-01-08T21:19:32Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "`Update-ModuleManifest` using `New-ModuleManifest` is an implementation detail.  I can't say whether that is the right thing to do since I'm not familiar with the `Update-ModuleManifest` code.  My suggestion is to have this conversation in the PSGet repo since that cmdlet belongs to PSGet.  If the expectation is that `New-ModuleManifest` needs a `-Verify` type switch, we could add that, but if it's only used by `Update-ModuleManifest`, it may be better to do something specific in that code.",
      "created_at": "2019-01-08T21:31:35Z",
      "updated_at": "2019-01-08T21:31:35Z"
    },
    {
      "author": "pougetat",
      "author_association": "NONE",
      "body": "@SteveL-MSFT Yes you're right. I got mixed up in the method calls and it seems that all important code pertaining to this issue is actually self-contained within Update-ModuleManifest within the PowerShellGet repo including a call to New-ModuleManifest. Sorry for wasting people's time :(.",
      "created_at": "2019-01-08T21:58:34Z",
      "updated_at": "2019-01-08T21:58:34Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT:\r\n\r\n> you may use New-ModuleManifest before authoring rootmodule.psm1 so it shouldn't fail if the file doesn't exist.\r\n\r\nDeferring the _existence check_ is perfectly fine, but accepting _syntactically invalid_ values is  a problem that should be fixed.",
      "created_at": "2019-01-08T23:08:13Z",
      "updated_at": "2019-01-08T23:08:13Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 that is valid, doing a check if a FileInfo can be created with that name would be ok, however, \"\\/\" is valid on Unix as it resolves to \"/\".  Of course it won't actually work, but the name itself is valid.",
      "created_at": "2019-01-09T22:34:44Z",
      "updated_at": "2019-01-09T22:34:44Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT: You're right, I didn't realize that `\\/` resolves to `/`, but the check that should be applied is whether the value is _formally_ a valid _file_ name or path.\r\n\r\nSo, yes, `/` wouldn't work and neither would anything _ending_ in `/`, or, on Windows, anything with embedded `\\ / : * ? \" < > |` or embedded newlines, with multiple `:`, ... - and these cases should be caught.",
      "created_at": "2019-01-09T22:51:58Z",
      "updated_at": "2019-01-09T22:51:58Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 actually, I take it back \"\\/\" doesn't resolve to \"/\", but rather `FileInfo` allows this name:\r\n\r\n```powershell\r\nPS /Users/steve/repos/PowerShell> [System.IO.FileInfo]::new(\"\\/\") | fl *\r\n\r\nMode              : darhs-\r\nVersionInfo       : \r\nBaseName          : \r\nTarget            : \r\nLinkType          : \r\nLength            : \r\nDirectoryName     : /Users/steve/\\\r\nDirectory         : /Users/steve/\\\r\nIsReadOnly        : True\r\nFullName          : /Users/steve/\\/\r\nExtension         : \r\nName              : \r\nExists            : False\r\nCreationTime      : 1/1/01 9:18:00 AM\r\nCreationTimeUtc   : 1/1/01 12:00:00 AM\r\nLastAccessTime    : 1/1/01 9:18:00 AM\r\nLastAccessTimeUtc : 1/1/01 12:00:00 AM\r\nLastWriteTime     : 1/1/01 9:18:00 AM\r\nLastWriteTimeUtc  : 1/1/01 12:00:00 AM\r\nAttributes        : -1\r\n```\r\n\r\nIn fact, it seems `[FileInfo]` doesn't do any validation which I thought it would so we can't rely on that.  If there is some API in .Net to validate the filename is valid, I can see this being implemented.",
      "created_at": "2019-01-10T00:44:01Z",
      "updated_at": "2019-01-10T00:44:01Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT at least from a cursory glance, would the APIs leveraged in `Test-Path -IsValid` be a good start? Really the only thing missing _there_ is that a \"filename\" that ends in a trailing slash isn't really valid because it would be a folder path instead.",
      "created_at": "2019-01-10T01:02:08Z",
      "updated_at": "2019-01-10T01:02:08Z"
    },
    {
      "author": "pougetat",
      "author_association": "NONE",
      "body": "@SteveL-MSFT, @mklement0  \r\nAfter some more investigations I have the following conclusion : \r\n\r\nUpdate-ModuleManifest is still updating RootModule because of a call to Test-ModuleManifest wich is writing an error due to the new RootModule being invalid but is not throwing a terminating error. Therefore Update-ModuleManifest can't actually catch the error and not write the new module manifest to disk.\r\n\r\nA solution (which I have already tested locally) is to make Test-ModuleManifest (which is a part of the PowerShell repo and not PowerShellGet) throw a terminating error upon finding an invalid root module instead of simply writing an error. I can open a PR today for it.",
      "created_at": "2019-01-10T12:42:39Z",
      "updated_at": "2019-01-10T12:44:23Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@pougetat that would be considered a breaking change, alternatively, when `Update-ModuleManifest` calls `Test-ModuleManifest`, it can use `-ErrorAction Stop` to make it terminating",
      "created_at": "2019-01-11T03:59:34Z",
      "updated_at": "2019-01-11T03:59:34Z"
    },
    {
      "author": "pougetat",
      "author_association": "NONE",
      "body": "@SteveL-MSFT , @mklement0 \r\n\r\nI have opened a PR in the PowerShellGet repo to address this issue. :)",
      "created_at": "2019-01-11T13:52:13Z",
      "updated_at": "2019-01-11T13:52:13Z"
    }
  ],
  "created_at": "2018-12-03T23:31:13Z",
  "labels": [
    "Issue-Bug",
    "WG-Cmdlets-Core"
  ],
  "number": 8389,
  "state": "open",
  "title": "New-ModuleManifest accepts invalid entry values / Update-ModuleManifest complains when adding an invalid entry value, yet still updates the manifest.",
  "updated_at": "2019-01-11T13:52:13Z"
}