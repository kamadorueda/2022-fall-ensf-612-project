{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8113",
  "author": "the-ress",
  "body": "Steps to reproduce\r\n------------------\r\n\r\n```powershell\r\nSet-PSDebug -Trace 1\r\n\r\nWrite-Output \"foo `\r\nbar\"\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nSomething like:\r\n```none\r\nDEBUG:    3+  >>>> Write-Output \"foo `\r\nDEBUG:    4+  >>>> bar\"\r\n\r\nfoo\r\nbar\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nDEBUG:    3+  >>>> Write-Output \"foo `\r\n\r\nfoo\r\nbar\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.0-preview.1\r\nPSEdition                      Core\r\nGitCommitId                    6.2.0-preview.1\r\nOS                             Microsoft Windows 10.0.17134\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@the-ress Can you repo without PSReadline loaded?",
      "created_at": "2018-10-25T05:56:17Z",
      "updated_at": "2018-10-25T05:56:17Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "It repros without PSReadLine.  Seems like it should be outputting the logical line and not the physical line",
      "created_at": "2018-10-25T19:22:42Z",
      "updated_at": "2018-10-25T19:22:42Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The problem is [here](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/debugger/debugger.cs#L3939).  Basically it only traces the line at the start of the extent.",
      "created_at": "2018-10-26T02:37:33Z",
      "updated_at": "2018-10-26T02:37:33Z"
    },
    {
      "author": "dwalleck",
      "author_association": "NONE",
      "body": "I'd be interested in picking this issue up if it's still available. Based on @SteveL-MSFT 's previous comment, it looks like the `BriefMessage` method of `PositionUtilities` needs to be multi-line aware. Does that sound about right?",
      "created_at": "2018-10-26T06:45:22Z",
      "updated_at": "2018-10-26T06:45:22Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@dwalleck yes, seems correct.  Consider it yours!",
      "created_at": "2018-10-26T15:04:44Z",
      "updated_at": "2018-10-26T15:04:44Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "It will take some smarts to provide a better experience. Most statements have multiple lines, e.g. an `if` statement. If you make a change, compare the output to the following and decide if it's an improvement or not.\r\n\r\n```\r\nPS> dir $env:TEMP | ForEach-Object {\r\n>>     if ((Get-Random -Maximum 15) -lt 1) {\r\n>>         \"Lucky file is $_\"\r\n>>         break\r\n>>     }\r\n>> }\r\nDEBUG:    1+  >>>> dir $env:TEMP | ForEach-Object {\r\nDEBUG:     ! CALL function '<ScriptBlock>'\r\nDEBUG:    1+ dir $env:TEMP | ForEach-Object  >>>> {\r\nDEBUG:     ! CALL function '<ScriptBlock>'\r\nDEBUG:    2+     if ( >>>> (Get-Random -Maximum 15) -lt 1) {\r\nDEBUG:    6+  >>>> }\r\nDEBUG:    1+ dir $env:TEMP | ForEach-Object  >>>> {\r\nDEBUG:     ! CALL function '<ScriptBlock>'\r\nDEBUG:    2+     if ( >>>> (Get-Random -Maximum 15) -lt 1) {\r\nDEBUG:    6+  >>>> }\r\nDEBUG:    1+ dir $env:TEMP | ForEach-Object  >>>> {\r\nDEBUG:     ! CALL function '<ScriptBlock>'\r\nDEBUG:    2+     if ( >>>> (Get-Random -Maximum 15) -lt 1) {\r\nDEBUG:    6+  >>>> }\r\nDEBUG:    1+ dir $env:TEMP | ForEach-Object  >>>> {\r\nDEBUG:     ! CALL function '<ScriptBlock>'\r\nDEBUG:    2+     if ( >>>> (Get-Random -Maximum 15) -lt 1) {\r\nDEBUG:    6+  >>>> }\r\nDEBUG:    1+ dir $env:TEMP | ForEach-Object  >>>> {\r\nDEBUG:     ! CALL function '<ScriptBlock>'\r\nDEBUG:    2+     if ( >>>> (Get-Random -Maximum 15) -lt 1) {\r\nDEBUG:    6+  >>>> }\r\nDEBUG:    1+ dir $env:TEMP | ForEach-Object  >>>> {\r\nDEBUG:     ! CALL function '<ScriptBlock>'\r\nDEBUG:    2+     if ( >>>> (Get-Random -Maximum 15) -lt 1) {\r\nDEBUG:    6+  >>>> }\r\nDEBUG:    1+ dir $env:TEMP | ForEach-Object  >>>> {\r\nDEBUG:     ! CALL function '<ScriptBlock>'\r\nDEBUG:    2+     if ( >>>> (Get-Random -Maximum 15) -lt 1) {\r\nDEBUG:    6+  >>>> }\r\nDEBUG:    1+ dir $env:TEMP | ForEach-Object  >>>> {\r\nDEBUG:     ! CALL function '<ScriptBlock>'\r\nDEBUG:    2+     if ( >>>> (Get-Random -Maximum 15) -lt 1) {\r\nDEBUG:    6+  >>>> }\r\nDEBUG:    1+ dir $env:TEMP | ForEach-Object  >>>> {\r\nDEBUG:     ! CALL function '<ScriptBlock>'\r\nDEBUG:    2+     if ( >>>> (Get-Random -Maximum 15) -lt 1) {\r\nDEBUG:    3+          >>>> \"Lucky file is $_\"\r\nLucky file is wct721E.tmp\r\nDEBUG:    4+          >>>> break\r\n```",
      "created_at": "2018-10-26T18:11:15Z",
      "updated_at": "2018-10-26T18:11:15Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Based on @lzybkr's feedback on the PR, it seems that we should conclude on what we think is the optimal expected output for multiline.  I would also suggest that it should be enabled via a parameter on `Set-PSDebug` rather than changing existing default behavior as some people may prefer the existing single line.",
      "created_at": "2018-11-01T16:18:06Z",
      "updated_at": "2018-11-01T16:18:06Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I should point that the original repo sample is about multiline with _backtick_.",
      "created_at": "2018-11-02T05:05:08Z",
      "updated_at": "2018-11-02T05:05:08Z"
    },
    {
      "author": "the-ress",
      "author_association": "NONE",
      "body": "The actual code I was debugging looked like this: (Note the extra backtick on line 3.)\r\n```powershell\r\nmsbuild /m /restore MyApp.sln `\r\n    /p:Configuration=\"$Configuration\" `\r\n    /p:Platform=\"$Platform\" `\r\nif ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }\r\n```\r\n\r\nSeeing only the first line of the command wasn't really helpful.",
      "created_at": "2018-11-02T06:53:20Z",
      "updated_at": "2018-11-02T06:53:20Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov thanks for pointing that out!  We should focus on when a single logical line is multiple physical lines and not the general multi line case",
      "created_at": "2018-11-02T14:53:24Z",
      "updated_at": "2018-11-02T14:53:24Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "We should be able to simply check if the line referenced *ends* with a backtick, and if it does, grab the next line as well, loop until we find a line that doesn't end in a backtick.\r\n\r\n",
      "created_at": "2018-11-02T14:57:54Z",
      "updated_at": "2018-11-02T14:57:54Z"
    },
    {
      "author": "ElvenSpellmaker",
      "author_association": "NONE",
      "body": "This is still an issue to this day...\r\n\r\nPowerShell 7.1.0",
      "created_at": "2021-01-21T16:37:06Z",
      "updated_at": "2021-01-21T16:37:06Z"
    }
  ],
  "created_at": "2018-10-24T11:15:42Z",
  "number": 8113,
  "state": "open",
  "title": "Set-PSDebug -Trace 1 prints only first line of a multiline command",
  "updated_at": "2021-01-21T16:37:06Z"
}