{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12229",
  "author": "krishnayalavarthi",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\nPS D:\\> @('{\"common\":[1,2]}' | ConvertFrom-Json).Length\r\nPS D:\\> @('','{\"common\":[1,2]}' | ConvertFrom-Json).Length\r\nPS D:\\> @('','','{\"common\":[1,2]}' | ConvertFrom-Json).Length\r\nPS D:\\> @('{\"common\":','[1,2]}' | ConvertFrom-Json).Count\r\n```\r\n\r\n# Expected behavior\r\n\r\n```\r\nPS D:\\> @('{\"common\":[1,2]}' | ConvertFrom-Json).Length\r\n1\r\n\r\nPS D:\\> @('','{\"common\":[1,2]}' | ConvertFrom-Json).Length\r\n1\r\n\r\nPS D:\\> @('','','{\"common\":[1,2]}' | ConvertFrom-Json).Length\r\n1\r\n\r\nPS D:\\> @('{\"common\":','[1,2]}' | ConvertFrom-Json).Count\r\n1\r\n```\r\n\r\n# Actual behavior\r\n\r\n```\r\nPS D:\\> @('{\"common\":[1,2]}' | ConvertFrom-Json).Length\r\n1\r\n\r\nPS D:\\> @('','{\"common\":[1,2]}' | ConvertFrom-Json).Length\r\n2\r\n\r\nPS D:\\> @('','','{\"common\":[1,2]}' | ConvertFrom-Json).Length\r\n2\r\n\r\nPS D:\\> @('{\"common\":','[1,2]}' | ConvertFrom-Json).Count\r\n1\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\n\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "strawgate",
      "author_association": "CONTRIBUTOR",
      "body": "As far as I can tell this is by-design for the json cmdlets.\r\n\r\nEssentially they can operate in two modes:\r\n1. What you've passed is a series of stringified json elements that you'd like each converted from json into objects\r\n2. What you've passed is a series of \"lines\" of a json document that you'd like concatenated and converted from json into objects\r\n\r\nThis allows you to do things like:\r\n`Get-Content .\\file.json | convertfrom-json`\r\n\r\nWithout having to first join the \"lines\" of the file.\r\n\r\nTo do this, the cmdlet tries to convert the first element you passed it and if that element is valid json on its own then it assumes every element you pass is valid json on its own. If it is not valid json it assumes you want the cmdlet to concatenate the results and convert that to json.\r\n\r\nPerhaps the next step would be to document this fact in the json cmdlet documentation?",
      "created_at": "2021-07-02T00:29:44Z",
      "updated_at": "2021-07-02T01:51:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I guess main question is for 3d case - we send 2 empty string but get result as for 2d case with 1 empty string. Then `@('','' | ConvertFrom-Json).Length` return 2 too.",
      "created_at": "2021-07-02T05:05:01Z",
      "updated_at": "2021-07-02T05:05:01Z"
    },
    {
      "author": "strawgate",
      "author_association": "CONTRIBUTOR",
      "body": "I see the bug -- there is a bug in the logic when there is more than 1 element passed in and the first element in the sequence is a null.\r\n\r\nBasically the code tests the first element that is passed in to decide whether it should treat each entry as a json object or if it should join them. It gets the first element and attempts to convert it from json, this works so it emits the first object into the pipeline (a null).\r\n\r\nThe current logic, slightly shortened:\r\n\r\n```\r\n                        // Try to deserialize the first element.\r\n                        successfullyConverted = ConvertFromJsonHelper(_inputObjectBuffer[0]);\r\n                        // if this is passed a json null it will write that null to the pipeline\r\n                        // but it will fail the next if check and pass to a function that doesnt know you already wrote something to the pipeline\r\n                   \r\n                    if (successfullyConverted)\r\n                    {\r\n                        for (int index = 1; index < _inputObjectBuffer.Count; index++)\r\n                        {\r\n                            ConvertFromJsonHelper(_inputObjectBuffer[index]);\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        // Process the entire input as a single Json content.\r\n                        ConvertFromJsonHelper(string.Join(System.Environment.NewLine, _inputObjectBuffer.ToArray()));\r\n                    }\r\n```\r\n\r\n\r\nNow that the first entry has worked we proceed to the next step. The next step checks to see if the first step worked by checking what it returned. Under normally circumstances this would be a 5 or something and then it would proceed to treating all the other entries as discrete json objects. But when the first json value is actually a null it thinks this means it failed the conversion and then it concatenates all of the entries and converts them together. It has no idea that the test-parse emitted a null into the pipeline.\r\n\r\nSo the 2 count is it writing the first null element into the pipeline and then followed by the object that was emitted.\r\n\r\nIf the null isnt the first element it works just fine:\r\n\r\n```\r\nPS C:\\Users\\we> $result = @('5','','','','','') | convertfrom-json\r\nPS C:\\Users\\we> $result.count\r\n6  // this is correct\r\n\r\nPS C:\\Users\\we> $result = @('','5','','','','') | convertfrom-json\r\nPS C:\\Users\\we> $result.count\r\n2 // this is not correct, first element is null\r\n```\r\n\r\nIt looks like this could be fixed by adding an `out error` to `ConvertFromJsonHelper` and that would allow `EndProcessing()` to check the error state instead of checking the value returned from json parsing. I'll make a PR with tests for this.",
      "created_at": "2021-07-02T06:23:29Z",
      "updated_at": "2021-07-02T06:28:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I believe current magic behavior was designed for multi-line Json input - scenario like `Get-Content | ConvertFrom-Json`.\r\nAnother common scenario - every input string is full and correct Json.\r\nI think we should preserve the scenarios.\r\n\r\nAre there other so popular scenarios we should preserve too? I do not know such ones.\r\n\r\nCurrent heuristic is very buggy. The issue demonstrate this. We can easily think other broken scenarios. Automatic merging of input objects may also be undesirable. Then I see the cmdlet can throw terminating error while enumerating - it is wrong behavior.\r\n\r\nThis force me think we should add new switch to disable auto merge input strings - NoInputCollect.\r\n\r\n/cc @mklement0 Have you thoughts?\r\n\r\n",
      "created_at": "2021-07-02T07:30:28Z",
      "updated_at": "2021-07-02T07:30:28Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Makes sense, @iSazonov; alternative name suggestion for the new switch: `-Each`?\r\n\r\nAs a general tip: Using `Get-Content -Raw .\\file.json | ConvertFrom-Json` both eliminates ambiguity and noticeably improves performance.\r\n",
      "created_at": "2021-07-02T16:47:37Z",
      "updated_at": "2021-07-02T16:47:37Z"
    },
    {
      "author": "strawgate",
      "author_association": "CONTRIBUTOR",
      "body": "How do we decide when we add a parameter to the cmdlet versus just providing a workaround?\r\n\r\nI believe something like:\r\n`@('','5','','','','') | %{ convertfrom-json $_}`\r\n\r\nWould prevent the auto-merging of input strings if that were desirable\r\n\r\n",
      "created_at": "2021-07-02T18:14:05Z",
      "updated_at": "2021-07-02T18:14:05Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "That certainly works, but amounts to a significant slowdown - though perhaps that's not a concern in practice (I have no good sense of how common this use case is, and I don't feel strongly either way).\r\n\r\n",
      "created_at": "2021-07-02T18:18:39Z",
      "updated_at": "2021-07-02T18:18:39Z"
    },
    {
      "author": "strawgate",
      "author_association": "CONTRIBUTOR",
      "body": "The current behavior is that it only concatenates them if there is an issue with the first element. So an -each would print an error for the first element and continue deserializing the remaining elements?",
      "created_at": "2021-07-02T18:32:38Z",
      "updated_at": "2021-07-02T18:32:38Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Yes, that would be in line with the error-handling guidelines: an error with _one_ input object that doesn't prevent processing additional input objects should result in a _non-terminating_ error.",
      "created_at": "2021-07-02T18:39:07Z",
      "updated_at": "2021-07-02T18:39:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Thinking more about the cmdlet I concluded we need to make a mandatory breaking change.\r\n\r\n_Main reason is the cmdlet has unpredictable behavior in a pipeline._\r\n\r\nAlthough the intention of the current design is clear - it covers scenarios like `Get-Content \"file.json\" | ConvertFrom-Json` - in all other scenarios the heuristics used leads to unpredictable and broken behavior.\r\nExamples:\r\n1. See OP\r\n```powershell\r\n@('','{\"common\":[1,2]}' | ConvertFrom-Json).Length    # Returns 2\r\n@('','','{\"common\":[1,2]}' | ConvertFrom-Json).Length  # Returns 2 (!)\r\n```\r\n2. Process many files\r\n```powershell\r\ndir -Path \"file*.json\" | Get-Content | ConvertFrom-Json\r\n```\r\nSome files will be merged in unpredictable ways depending on their contents!\r\n\r\nIt would be even worse if the files were sorted before processing:\r\n```powershell\r\ndir -Path \"file*.json\" | Sort-Object -Property LastWriteTime | Get-Content | ConvertFrom-Json\r\n```\r\n\r\nLet's see [Json standard](https://datatracker.ietf.org/doc/html/rfc8259#section-2). `JSON text` is defined by two conditions:\r\n1. A JSON text is a sequence of `tokens`.\r\n2. A JSON text is a serialized `value`.\r\n\r\nNote the `value` is in the _singular_.\r\nThus, each input string (including a multiline string) must contain a single JSON value.\r\n\r\nThe key question is, are there any well known scenarios (other than `Get-Content | ConvertFrom-Json`) where a string like this is broken into parts?\r\nI don't know of any and can't find of any. All known configuration files are `JSON object`-s. If someone does serialization, they get a whole single string and we should expect it to be deserialized in its entirety.\r\n\r\nSo my proposal is:\r\n1. Remove the heuristic at all\r\n2. Process every input string separately as an JSON value.\r\n2.1 We get predictable, standard-compliant behavior \r\n2.2 We can write correct non-terminating errors for broken input strings\r\n3. If there is a concern that `Get-Content | ConvertFrom-Json` scenario is too frequent we could directly address it in code and documentation.\r\n(Although the following will work differently `$a = Get-Content; $a | ConvertFrom-Json` - would be documented too).\r\n\r\n\r\n\r\n",
      "created_at": "2021-07-05T07:56:35Z",
      "updated_at": "2021-07-05T07:56:35Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Two real-world impressions from my Stack Overflow activities:\r\n\r\n* `Get-Content ... | ConvertFrom-Json` is common, unfortunately - even though the intended semantics (treat all lines _together_ as the JSON text to parse) - and performance - would call for `-Raw` (it is similar to the likewise inefficient, but also functional `[xml] (Get-Content ...)` idiom), so I'd say that breaking that is a no.\r\n  * [This query](https://stackoverflow.com/search?q=%5Bpowershell%5D+get-content+convertfrom-json)  should give you a sense (though note that it includes false positives).\r\n\r\n* I've personally never come across a use case where _multiple_ files are being sent to a single `ConvertFrom-Json` call.\r\n\r\n---\r\n\r\nWhat we could consider, as bucket 3 breaking changes, are tweaks to the heuristic:\r\n\r\n* Do not emit a `$null` if there are one or more leading empty or blank input strings, because they trigger collect-all-input-first mode in which such lines should be considered incidental whitespace.\r\n\r\n* In treat-each-input-as-self-contained-JSON mode, report _non_-terminating errors for each malformed input.\r\n\r\n\r\n\r\n",
      "created_at": "2021-07-05T20:39:42Z",
      "updated_at": "2021-07-05T20:41:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I've personally never come across a use case where multiple files are being sent to a single ConvertFrom-Json call.\r\n\r\nBecause this cmdlet doesn't work in this scenario :-)\r\nAlthough JSON is designed more for configurations, people are using it more and more to represent data, replacing other formats (primarily XML). So the scenario with multiple file processing is quite realistic.\r\n\r\nAs for breaking changes I think current design and used heuristic are _fundamentally_ broken. The only real scenario that falls under the breaking change `Get-Content | ConvertFrom-Json`, but we can add a special processing for it.",
      "created_at": "2021-07-06T04:18:18Z",
      "updated_at": "2021-07-06T04:18:18Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> Because this cmdlet doesn't work in this scenario :-)\r\n\r\nGood point, but I've never even seen people _try_.\r\n\r\nSo - anecdotally speaking -  no, I don't think this scenario is realistic, and even with increasing use of JSON for config files I don't see the need for processing _multiple_ ones. But if someone really needs it, it can easily be made to work by adding `-Raw`.\r\n\r\n> I think current design and used heuristic  are _fundamentally broken_.\r\n\r\nNo argument there, but given that I think _removing_ it is not an option, what I proposed in my previous comment at least makes it work more consistently and predictably.\r\n\r\n",
      "created_at": "2021-07-06T04:26:37Z",
      "updated_at": "2021-07-06T04:26:37Z"
    },
    {
      "author": "strawgate",
      "author_association": "CONTRIBUTOR",
      "body": "So to summarize:\r\n1. Remove the heuristic\r\n2. No longer coalesce inputs and stop processing them in the endprocess() block\r\n3. Process every input string separately as an JSON value\r\n4. Convert the cmdlet to not throw terminating errors\r\n5. Update documentation to suggest using -raw with get-content.\r\n6. Look into adding special handling (using the NoteProperties get-content adds?) specifically for get-content and convertfrom-json to remain backwards compatible\r\n\r\nWould a `-join` switch on the cmdlet make sense to allow a user to select the behavior they are interested in if they are using something other than get-content?",
      "created_at": "2021-07-12T22:29:13Z",
      "updated_at": "2021-07-12T22:29:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> 1. Remove the heuristic\r\n\r\nCurrent proposal from @mklement0 is to improve the heuristic with minimal risk of a breaking change. https://github.com/PowerShell/PowerShell/issues/12229#issuecomment-874319626\r\n\r\n\r\nRemoving the heuristic we could consider later for new implementation of the cmdlet.\r\n",
      "created_at": "2021-07-13T05:45:55Z",
      "updated_at": "2021-07-13T05:45:55Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @iSazonov, though I do think we should consider strawgate's proposal, _if_ 6. allows for a non-breaking, backward-compatible solution:\r\n\r\n`Get-Content` adds instance ETS properties to each line it emits: `PSPath`, `PSParentPath`, `PSChildName`, `PSDrive`, `PSProvider`, `ReadCount`.\r\n\r\nOf these, `ReadCount` (the line number) is distinctive, and falling back to the heuristic (with the tweaks proposed in https://github.com/PowerShell/PowerShell/issues/12229#issuecomment-874319626) _only if the first input object is of type `[string]` and has this NoteProperty_ sounds promising to me.\r\n\r\nThe question is: are there _other_ common must-collect-all-strings-first scenarios where this property is _not_ present?\r\n\r\n---\r\n\r\nAs for whether a `-Join` switch makes sense: \r\n\r\nI think that may not be necessary, given how easy it is to perform this joining separately (`... | Out-String | ConvertFrom-Json`, `` (...) -join \"`n\" | ConvertFrom-Json ``). It would still make sense if this scenario were common, but given that adding `-Raw` to `Get-Content` is the simplest and most efficient solution, my sense is that it isn't.\r\n\r\n---\r\n\r\nOn a meta note:  An `Import-Json` cmdlet, as proposed in #9233, would bypass the `Get-Content` woes.\r\n\r\n\r\n",
      "created_at": "2021-07-13T12:38:43Z",
      "updated_at": "2021-07-13T13:38:06Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Thanks, @iSazonov, though I do think we should consider strawgate's proposal, if #6 allows for a non-breaking, backward-compatible solution:\r\n\r\nI reviewed manually some pages in GitHub search and found other scenarios where this could be broken: (1) cmdlets from Az module, (2) there are native exe-s with `-json` switch - PowerShell enumerates their output in pipeline.\r\nOn the other hand, surprisingly Get-Content is used more often with `-Raw` switch in `Get-Content -Raw | ConvertFrom-Json`. ",
      "created_at": "2021-07-13T13:22:13Z",
      "updated_at": "2021-07-13T13:22:13Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Excellent point, @iSazonov; I hadn't considered that PowerShell always reports a native executable's stdout output as a _stream of lines_.\r\n\r\nSo if we were to get rid of the heuristics (with special-casing for backward compatibility), the consistent default behavior would have to be collect-all-strings-first, and a previously discussed `-Each` switch would be required for (unconditional) per-input-object parsing.\r\n\r\nBut the question is whether that is worth the effort and special-casing. \r\n\r\nI'm now again inclined to think that the tweaks to the existing heuristic proposed above (https://github.com/PowerShell/PowerShell/issues/12229#issuecomment-874319626) are sufficient.\r\n\r\nA compromise would be to combine the tweaks with a new `-Each` switch, so that _unconditional_ per-input-object parsing can be requested (which you'd get with a correctly formed (self-contained) first input string anyway, however); otherwise, the only advantages would be a clear signaling of the intent and error messages that better match that intent).\r\n\r\n",
      "created_at": "2021-07-13T13:57:24Z",
      "updated_at": "2021-07-13T13:57:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I'm now again inclined to think that the tweaks to the existing heuristic proposed above ([#12229 (comment)](https://github.com/PowerShell/PowerShell/issues/12229#issuecomment-874319626)) are sufficient.\r\n\r\nI think the tweak is best fix for _current_ cmdlet.\r\nFor new experimental cmdlet I'd start with simple rule: one string - one JSON, without any complications with heuristics and new switches.\r\n",
      "created_at": "2021-07-13T14:26:55Z",
      "updated_at": "2021-07-13T14:26:55Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> For new experimental cmdlet I'd start with simple rule: one string - one JSON\r\n\r\nThat is tempting, for consistency's sake, but your native-executable example convinced me that defaulting to collecting all strings is the better default for  this _particular_ cmdlet - even though it deviates from the usual pipeline-input handling.\r\n\r\nFor instance, say I use a `curl` call (`curl.exe` on Windows) to retrieve JSON; with the proposed per-input-object processing, the following would then malfunction, and require inserting an `Out-String` call, which is both cumbersome and obscure:\r\n\r\n```powershell\r\ncurl ... | Convert-FromJson # !! Can break with per-input-line parsing\r\n```",
      "created_at": "2021-07-13T14:43:08Z",
      "updated_at": "2021-07-13T14:46:21Z"
    },
    {
      "author": "jessehouwing",
      "author_association": "NONE",
      "body": "Bumped into this issue yesterday. Out of 100s of json documents, one started with a comment and blew up my logic. Adding `-raw` fixed things, but it's a bit non-obvious. It's probably worth a suggestion in Vscode to add that extra switch as it looks like that's the intended behavior in most cases.\n\nhttps://stackoverflow.com/q/71025659/736079\n\n<blockquote><img src=\"https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded\" width=\"48\" align=\"right\"><div>Stack Overflow</div><div><strong><a href=\"https://stackoverflow.com/questions/71025659/set-property-value-on-object-loaded-from-json-containing-comments\">Set property value on object loaded from json containing comments</a></strong></div><div>When loading an object from a json file one can normally set the value on properties and write the file back out like so:\n$manifest = (gc $manifestPath) | ConvertFrom-Json -AsHashtable\n$manifest.na...</div></blockquote>",
      "created_at": "2022-02-09T18:57:04Z",
      "updated_at": "2022-08-30T21:44:00Z"
    },
    {
      "author": "seansaleh",
      "author_association": "NONE",
      "body": "I just ran into this issue by following the Powershell Docs. If I understand this issue properly my fix, https://github.com/MicrosoftDocs/PowerShell-Docs/pull/9184 should help others avoid it in the future.\r\n\r\n\r\nDoes anyone from this thread see an issue with updating the suggested docs from:\r\n```powershell\r\nGet-Content JsonFile.JSON | ConvertFrom-Json\r\n```\r\nto\r\n```powershell\r\nGet-Content -Raw JsonFile.JSON | ConvertFrom-Json\r\n```",
      "created_at": "2022-08-30T21:24:27Z",
      "updated_at": "2022-08-30T21:24:27Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "That's a good idea, @seansaleh , because using `-Raw` not only avoids the issue at hand but is preferable from a _performance_ standpoint as well.\r\n",
      "created_at": "2022-08-30T21:41:37Z",
      "updated_at": "2022-08-30T21:41:37Z"
    }
  ],
  "created_at": "2020-03-30T18:59:38Z",
  "number": 12229,
  "state": "open",
  "title": "ConvertFrom-Json includes $null element on output if input starts with blank line",
  "updated_at": "2022-08-30T21:44:00Z"
}