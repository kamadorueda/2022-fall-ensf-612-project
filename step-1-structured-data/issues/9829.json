{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9829",
  "author": "Liturgist",
  "body": "# Steps to reproduce\r\n\r\n```\r\nPS C:\\Users\\lit> Push-Location 'W:\\home'\r\nPS W:\\home> (Get-Location).Path\r\nW:\\home\r\nPS W:\\home> Write-Host ([System.Environment]::CurrentDirectory)\r\nC:\\WINDOWS\\System32\r\nPS W:\\home> $PSVersionTable.PSVersion.ToString()\r\n6.2.1\r\n```\r\n\r\n# Expected behavior\r\n\r\n```\r\n[Environment]::CurrentDirectory would have the value 'W:\\home'.\r\n```\r\n\r\n# Actual behavior\r\n\r\n```\r\n [Environment]::CurrentDirectory contains 'C:\\WINDOWS\\System32'.\r\n```\r\n\r\n# Environment data\r\n\r\n```\r\nPSVersion                      6.2.1\r\nPSEdition                      Core\r\nGitCommitId                    6.2.1\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0```",
  "closed_at": "2019-06-12T20:13:39Z",
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@Liturgist This is actually by design. PowerShell supports multiple runspaces per process, each of which has its own notion of the \"current directory\". Even if set/push-location did set the process-wide current directory, you couldn't depend on it because another runspace might change it at any time. As a result, you have to use the provider APIs to perform path-based operations using the current working directory specific to the current runspace.",
      "created_at": "2019-06-05T16:47:17Z",
      "updated_at": "2019-06-05T16:47:17Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "Ok, then. It appears that `[Environment]::CurrentDirectory` is not necessarily the `CurrentDirectory` in a given runspace. I guess that means using `Resolve-Path` for any references.\r\n\r\nGiven that, what are some use cases for using `[Environment]::CurrentDirectory`?\r\n\r\nAlso, why does `[Environment]::CurrentDirectory` get set in ISE after doing a `Push-Location`?\r\n\r\n`Push-Location` is clearly not equivalent to PUSHD in cmd.exe.",
      "created_at": "2019-06-05T18:00:21Z",
      "updated_at": "2019-06-05T18:00:21Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "There's also the issue where you could do `Push-Location -Path HKLM:\\SOFTWARE` but that does not translate into an actual file system path.",
      "created_at": "2019-06-06T03:17:40Z",
      "updated_at": "2019-06-06T03:17:40Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "> @Liturgist This is actually by design. PowerShell supports multiple runspaces per process, each of which has its own notion of the \"current directory\". Even if set/push-location did set the process-wide current directory, you couldn't depend on it because another runspace might change it at any time. As a result, you have to use the provider APIs to perform path-based operations using the current working directory specific to the current runspace.\r\n\r\nWhat would be applicable uses for the process-wide current directory?",
      "created_at": "2019-06-07T16:57:13Z",
      "updated_at": "2019-06-07T16:57:13Z"
    },
    {
      "author": "MovGP0",
      "author_association": "NONE",
      "body": "Have you tried `Get-Location` instead? ",
      "created_at": "2019-06-08T20:31:46Z",
      "updated_at": "2019-06-08T20:31:46Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "I am find with runspaces all having their own \"current\" working directory.\r\n\r\nWhat I would like to know is appropriate uses for the process-wide current directory? `[Environment]::CurrentDirectory`",
      "created_at": "2019-06-11T19:46:55Z",
      "updated_at": "2019-06-11T19:46:55Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Spawning new processes, or checking the dir for .NET function calls would be my guess.",
      "created_at": "2019-06-11T19:56:04Z",
      "updated_at": "2019-06-11T19:56:04Z"
    },
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "@Liturgist \r\n\r\n >What I would like to know is appropriate uses for the process-wide current directory?\r\n\r\nIn PowerShell? Basically none. Processes are spawned using the `Runspace` CWD so the process CWD doesn't matter. You _could_ set the CWD if you're using the .NET filesystem APIs as long as you can guarantee that there are no other Runspaces being used which is only possible for personal scripts. But even then, the .NET APIs don't understand PowerShell paths so you're better off using the Provider APIs to resolve the path before passing it to `File.ReadAllText()`. Ultimately, `[Environment]::CurrentDirectory` is exposed because PowerShell exposes .NET and that API is part of .NET. \r\n\r\n",
      "created_at": "2019-06-12T00:29:27Z",
      "updated_at": "2019-06-12T00:29:27Z"
    },
    {
      "author": "Liturgist",
      "author_association": "NONE",
      "body": "Ok, I will take it that `[System.Environment]::CurrentDirectory` is not of much use in PowerShell.\r\n\r\nWould it be expected to reflect the current directory at the time PowerShell was started (assuming that no PowerShell code has use a .NET call to change it)?",
      "created_at": "2019-06-12T20:13:39Z",
      "updated_at": "2019-06-12T20:13:39Z"
    }
  ],
  "created_at": "2019-06-05T14:51:40Z",
  "number": 9829,
  "state": "closed",
  "title": "Push-Location does not set [Environment]::CurrentDirectory",
  "updated_at": "2019-06-28T13:00:31Z"
}