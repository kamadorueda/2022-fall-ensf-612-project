{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7000",
  "author": "LethiferousMoose",
  "body": "Steps to reproduce\r\n------------------\r\n\r\n```powershell\r\n# Listen for the event.\r\nRegister-EngineEvent -SourceIdentifier SomethingChanged -MessageData 'Not Hello World' -Action {\r\n    Write-Host $event.MessageData \r\n}\r\n\r\n# Now raise the event.\r\nNew-Event -SourceIdentifier 'SomethingChanged' -MessageData 'Hello World'\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nThe MessageData value provided from Register-EngineEvent should be retrievable in the Action block.\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nThe $event.MessageData is always the value provided from New-Event.  In this case it is always \"Hello Word\" from the New-Event call.\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.2\r\nPSEdition                      Core\r\nGitCommitId                    v6.1.0-preview.2\r\nOS                             Microsoft Windows 10.0.16299\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nIs there some different way to retrieve the MessageData provided by Register-EngineEvent? The documentation on both Register-EngineEvent and New-Event both say that is provided in the event object.",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@LethiferousMoose Please add working repo steps. We could use them as a test.",
      "created_at": "2018-06-05T16:46:27Z",
      "updated_at": "2018-06-05T16:46:27Z"
    },
    {
      "author": "LethiferousMoose",
      "author_association": "NONE",
      "body": "I rearranged the cmdlets into the correct order. That should be all that's needed.",
      "created_at": "2018-06-05T22:02:34Z",
      "updated_at": "2018-06-05T22:02:34Z"
    },
    {
      "author": "LethiferousMoose",
      "author_association": "NONE",
      "body": "For more context this is what I am doing with ```Register-ObjectEvent``` (note this is a stripped down version):\r\n```powershell\r\nclass BaseConfiguration {\r\n    # Properties\r\n    [bool] $CacheInvalidated;\r\n    \r\n    # Hidden Properties\r\n    hidden [System.IO.FileInfo] $CurrentConfig;\r\n    hidden [System.IO.FileSystemWatcher] $Watcher;\r\n    hidden [System.Management.Automation.PSEventJob] $FileChangedEventJob;\r\n\r\n    hidden [void] AddConfigurationFileChangedListener([string] $configPath) {\r\n        if ($null -eq $this.FileChangedEventJob) {\r\n            $this.Watcher = [System.IO.FileSystemWatcher]::new($configPath, '*.json')\r\n            $this.Watcher.NotifyFilter = [System.IO.NotifyFilters]::FileName, [System.IO.NotifyFilters]::LastWrite\r\n            $this.Watcher.IncludeSubdirectories = $true\r\n            \r\n            $this.FileChangedEventJob = Register-ObjectEvent -InputObject $this.Watcher -MessageData $this `\r\n                                                             -EventName Changed -Action {\r\n                [BaseConfiguration] $config = $event.MessageData\r\n                [string] $fileName = $event.SourceEventArgs.Name\r\n\r\n                if ($null -ne $config.CurrentConfig -and $config.CurrentConfig.Name -eq $fileName) {\r\n                    $event.MessageData.CacheInvalidated = $true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nBased on the documentation for ```Register-EngineEvent``` is sounded like the same behavior I used for ```Register-ObjectEvent``` was possible with ```Register-EngineEvent```.\r\n\r\nFor example:\r\n```powershell\r\nclass BaseConfiguration {\r\n    # Properties\r\n    [bool] $CacheInvalidated;\r\n    \r\n    # Hidden Properties\r\n    hidden [System.Management.Automation.PSEventJob] $ConfigurationChangedEventJob;\r\n\r\n    hidden [void] AddConfigurationChangedListener() {\r\n        if ($null -eq $this.ConfigurationChangedEventJob) {\r\n            $this.ConfigurationChangedEventJob = Register-EngineEvent -SourceIdentifier 'ConfigurationChanged' `\r\n                                                                      -MessageData $this -SupportEvent -Action {\r\n            $event.MessageData.CacheInvalidated = $true\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThen I could call:\r\n```powershell\r\nNew-Event -SourceIdentifier 'ConfigurationChanged'\r\n```\r\n\r\nFrom a different module to update all derived configuration classes.\r\n\r\nAccording to https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/register-engineevent?view=powershell-6#optional-parameters\r\n\r\n```Register-EngineEvent```'s ```MessageData``` property is defined as:\r\n\r\n> Specifies additional data associated with the event. The value of this parameter appears in the MessageData property of the event object.\r\n\r\nAlso confusingly, if we look at ```New-Event```'s documentation we find the same definition:\r\nhttps://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/new-event?view=powershell-6#optional-parameters\r\n\r\nSo if this gets fixed, it is going to have to be determined how the two different ```MessageData``` parameters live together from both ```New-Event``` and ```Register-EngineEvent```.",
      "created_at": "2018-06-06T19:52:30Z",
      "updated_at": "2018-06-06T19:57:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr Could you please clarify - should we resolve the request?",
      "created_at": "2018-06-07T03:42:33Z",
      "updated_at": "2018-06-07T03:42:33Z"
    },
    {
      "author": "Kungfoowiz",
      "author_association": "NONE",
      "body": "I am also experiencing this problem when working with PS events. I expected it to use the original event subscription's MessageData, but it looks like I need to provide its MessageData object each time New-Event is called. I am using -Forward parameter to forward the event to the main subscribed event.\r\n\r\n**Simplified code**\r\n\r\n**Main script:**\r\n$testEventData = New-Object PSObject -property @{someValue = $someValue}\r\nRegister-EngineEvent -SourceIdentifier Test.Event -MessageData $testEventData -Action { ... }\r\n\r\n**In another script:**\r\nRegister-EngineEvent -SourceIdentifier Test.Event -Forward\r\nNew-Event Test.Event\r\n\r\n---\r\n\r\n$event.MessageData.someValue is null when the event is called in another script, even though I have set that event to forward to the main event.",
      "created_at": "2018-12-14T16:17:12Z",
      "updated_at": "2018-12-14T16:17:38Z"
    }
  ],
  "created_at": "2018-06-05T14:23:40Z",
  "number": 7000,
  "state": "open",
  "title": "Register-EngineEvent -MessageData 'Value' seemingly has no effect",
  "updated_at": "2018-12-14T16:17:38Z"
}