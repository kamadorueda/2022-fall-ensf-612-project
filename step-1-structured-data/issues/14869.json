{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14869",
  "author": "LeeHolmes",
  "body": "The provider APIs have a 'ConvertPath' overload that lets providers offload some wildcards to the underlying implementation when it is correct to do so. This is a benefit for basic PowerShell commands like:\r\n\r\n`Get-ChildItem *.txt`\r\n\r\nWhere the native APIs can fully support that wildcard syntax, and the native APIs have vastly higher performance. The ConvertPath overload converts this to the equivalent of: `Get-ChildItem -Filter *.txt`.\r\n\r\nThis is the magnitude of performance this introduced when it was initially implemented:\r\n\r\n````\r\nV1\r\n\r\n[C:\\Program Files\\PowerShell]\r\nPS:1 > Measure-Command { dir c:\\windows\\system32\\t* }\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 1\r\nMilliseconds      : 412\r\nTicks             : 14126986\r\nTotalDays         : 1.63506782407407E-05\r\nTotalHours        : 0.000392416277777778\r\nTotalMinutes      : 0.0235449766666667\r\nTotalSeconds      : 1.4126986\r\nTotalMilliseconds : 1412.6986\r\n \r\nV2\r\n\r\n[C:\\temp\\]\r\nPS:2 > Measure-Command { dir c:\\windows\\system32\\t* }\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 0\r\nMilliseconds      : 24\r\nTicks             : 248595\r\nTotalDays         : 2.87725694444444E-07\r\nTotalHours        : 6.90541666666667E-06\r\nTotalMinutes      : 0.000414325\r\nTotalSeconds      : 0.0248595\r\nTotalMilliseconds : 24.8595\r\n````\r\n\r\nUnfortunately, one major dodge with this implementation was that it STILL had to apply PowerShell globbing even if the filters were compatible. This is because the native filtering language would match against 8.3 short filenames and introduce all kinds of cruft.\r\n\r\n````\r\n(In Windows PowerShell v5)\r\nPS C:\\temp\\scratch2> cmd /c dir /x\r\n Volume in drive C has no label.\r\n Volume Serial Number is B635-A3D8\r\n\r\n Directory of C:\\temp\\scratch2\r\n\r\n02/20/2021  01:21 PM    <DIR>                       .\r\n02/20/2021  01:21 PM    <DIR>                       ..\r\n02/20/2021  01:21 PM                 7 ALONGF~2.TXT A long file name with spaces also.txt\r\n02/20/2021  01:21 PM                 7 ALONGF~1.TXT A long file name with spaces.txt\r\n               2 File(s)             14 bytes\r\n               2 Dir(s)  152,866,050,048 bytes free\r\nPS C:\\temp\\scratch2> dir -filter *2*\r\n\r\n    Directory: C:\\temp\\scratch2\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\n-a----         2/20/2021   1:21 PM              7 A long file name with spaces also.txt\r\n\r\nPS C:\\temp\\scratch2> [IO.Directory]::GetFiles(\"c:\\temp\\scratch2\", \"*2*\")\r\nc:\\temp\\scratch2\\A long file name with spaces also.txt\r\n````\r\n\r\nThe implementation in the Filesystem provider is here: https://github.com/PowerShell/PowerShell/blob/24facfb03db8cdb201dd8deb46a372ba7f6f4e8e/src/System.Management.Automation/namespaces/FileSystemProvider.cs#L1604\r\n\r\nHowever, with .NET Core, that appears to be resolved in the .NET APIs themselves. Now, in PowerShell:\r\n\r\n````\r\nPS > [IO.Directory]::GetFiles(\"c:\\temp\\scratch2\", \"*2*\")\r\nPS >\r\n\r\nPS > [IO.Directory]::GetFiles(\"c:\\temp\\scratch2\", \"*.txtify\")\r\nc:\\temp\\scratch2\\test.txtify\r\n\r\nPS > [IO.Directory]::GetFiles(\"c:\\temp\\scratch2\", \"test.txt\")\r\nPS > (used to return \"txtify\" files)\r\n````\r\nWith this now addressed by .NET Core, we can probably revisit the ConvertPath method to actually do a true conversion (rather than just a pre-filter), and improve many tab expansion and directory listing scenarios by 13x:\r\n\r\n````\r\n[C:\\Windows\\System32]\r\nPS:61 > Measure-Command { dir *.dll }\r\n\r\nMilliseconds      : 462\r\n\r\n[C:\\Windows\\System32]\r\nPS:62 > Measure-Command { dir -Filter *.dll }\r\n\r\nMilliseconds      : 34\r\n````",
  "closed_at": null,
  "comments": [],
  "created_at": "2021-02-20T22:02:44Z",
  "number": 14869,
  "state": "open",
  "title": "Performance: Tab Expansion / directory listings: FileSystem's ConvertPath overload can now simplify provider offloading",
  "updated_at": "2021-11-30T07:36:22Z"
}