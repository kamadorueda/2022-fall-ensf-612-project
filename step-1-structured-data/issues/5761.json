{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5761",
  "author": "daxian-dbw",
  "body": "## PR Summary\r\nAn attempt to address #5643 \r\n\r\nThis design adds the `ListLiteralExpression '[]'` to PowerShell, which is similar to the `ArrayLiteralExpression`. They are different in mainly two ways:\r\n- `ListLiteralExpression` always returns a `List<object>`\r\n- When there is only one element expression, `ListLiteralExpression` unwraps the value of the expression while `ArrayLiteralExpression` directly uses the value as the first element of the returned array.\r\n\r\nPlease review with #5762 as a comparison, where list is supported as a `ListExpression '@[]'`, similar to `ArrayExpression '@()'`.\r\n\r\n### Example\r\n```\r\n# an empty list\r\n> $l = []\r\n> $l.GetType()\r\n\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     True     List`1                                   System.Object\r\n```\r\n```\r\n# one element list, the element is a type\r\n> $l = [[string]]\r\n> $l.Count\r\n1\r\n> $l[0]\r\n\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     True     String                                   System.Object\r\n```\r\n```\r\n# multi-element list\r\n> $l = [$pid,2,$home,4]\r\n> $l.Count\r\n4\r\n```\r\n```\r\n# unwrap the only expression element in a list literal expression, like '@()'\r\n> $l = [(dir)]\r\n> $l.GetType()\r\n\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     True     List`1                                   System.Object\r\n\r\n> $l.Count\r\n30\r\n\r\n# as a comparison, see the behavior of ArrayLiteralExpression\r\n> $a = ,(dir)\r\n> $a.Count\r\n1\r\n```\r\n\r\n## PR Checklist\r\n\r\nNote: Please mark anything not applicable to this PR `NA`.\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - [x] Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] User facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - [x] Issue filed - Issue link:\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n    - [x] [Add `[feature]` if the change is significant or affectes feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n",
  "closed_at": "2018-01-08T20:07:26Z",
  "comments": [
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "~why `[]` and not `@[]`? seeing just `[]` is confusing compared to types. also `[()]` is weird... I'd expect something similar to `@()`:~\r\n\r\nNevermind.. missed the other PR.\r\n",
      "created_at": "2017-12-29T22:33:27Z",
      "updated_at": "2017-12-29T22:35:38Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@markekraus My first design attempt is to support `@[]`, behaving like `@()`, see PR #5762. However, unlike character `')'` that always starts a new token, the character `']'` doesn't force to start a new token and therefore can be included in `GenericToken`, meaning command names, arguments, function names and etc. It makes impossible to determine where `'@[]'` ends and I cannot find an elegant solution without breaking changes.\r\n\r\nWe need more discussions on the design, and that is why I submitted 2 PRs for the list support: #5762 to add `@[]`, and this one to add `[]`.\r\n",
      "created_at": "2017-12-29T22:42:03Z",
      "updated_at": "2017-12-29T22:42:03Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Per the discussions in #5643, it's commonly agreed that we want `ListExpressionAst` which behaves similar to `@()` instead of a `ListLiteralAst`. Therefore, I will close this PR.\r\n  ",
      "created_at": "2018-01-08T20:07:26Z",
      "updated_at": "2018-01-08T20:07:54Z"
    }
  ],
  "created_at": "2017-12-29T21:53:54Z",
  "number": 5761,
  "state": "closed",
  "title": "[WIP] Support ListLiteralExpression '[]' in PowerShell",
  "updated_at": "2018-04-03T19:24:07Z"
}