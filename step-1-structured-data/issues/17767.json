{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17767",
  "author": "mklement0",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nNote:\r\n\r\n* The problem applies to all-(decimal)-digit parameter names (e.g., `-1`) as well as those that _start with_ a digit (e.g., `-1a`)\r\n* Not allowing all-digit names makes more sense, so as not create ambiguity between them and _negative numbers_.\r\n* While you cannot bind such parameters _by name_ in direct invocation, it _is_ possible:\r\n   * via _splatting_\r\n   * due to what is arguably a bug when calling the CLI with `-File` - see #17519\r\n\r\nArguably, given the current behavior of the _typical_ use case - direct invocation - use of all-digit parameter names should be _categorically_ prevented, ideally in the _parsing_ stage. However, there is at least a hypothetical backward-compatibility concern.\r\n\r\n```\r\n# BREAKS: \"-1\" is interpreted as a positional argument:\r\n#  -> A positional parameter cannot be found that accepts argument 'foo'\r\n & { [CmdletBinding()] param([string]$1) \"[$1]\" } -1 foo\r\n\r\n# DOES WORK with SPLATTING\r\n# -> '[foo]'\r\n$ht = @{ '1'='foo' }; & { [CmdletBinding()] param([string]$1) \"[$1]\" } @ht\r\n```\r\n\r\n### Expected behavior\r\n\r\nConsistent prevention of `-1` / `$1` as a parameter name / variable.\r\n\r\n\r\n### Actual behavior\r\n\r\nError `A positional parameter cannot be found that accepts argument 'foo'`\r\nString `[foo]`\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nPowerShell Core 7.3.0-preview.6\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "It always puzzled me that this is also allowed\r\n```\r\nfunction test {\r\n\r\nparam (\r\n    ${foo bar}\r\n    )\r\n\r\n    $PSBoundParameters\r\n}\r\n```\r\n\r\nthe parameter can be passed by position\r\n```\r\n> test 1\r\n\r\nKey     Value\r\n---     -----\r\nfoo bar     1\r\n```\r\n\r\nbut tab completion builds `test -foo bar `   where `-foo` is sufficient to identify the parameter and `bar`  will become its value. \r\n\r\nYou just know that out in the world someone who always passes parameters by position has a param block\r\n`param ($1, $2, $3 )`  to write things very close to old style batch files.   Tightening up rules for parameter names will break those. So we may be stuck allowing people to pick stupid names, but relying on them not to do so  \r\n\r\n ",
      "created_at": "2022-07-26T10:02:16Z",
      "updated_at": "2022-07-26T10:02:16Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> `${foo bar}`\r\n\r\nYou just need to call it correctly (I'm kidding): `` test -foo` bar hi `` \r\nAs a bonus, such a parameter doesn't require an argument anymore: `` test -foo` bar `` (quiet no-op).\r\n\r\nWell, I'd say that at least preventing something like `${foo bar}` at parse time is a prime candidate for a bucket 3 change - as is #17519 in my estimation (even though it has already been declined for fear of breaking things, but I think that fear is unfounded).\r\n\r\nFair point about the possibility of `param ($1, $2, $3)` - perhaps someone is willing to look at real-world scripts to see how common that is.\r\n\r\nIn general, this kind of permissiveness in naming that has only downsides appears to be a recurring theme - I'm reminded of #14025.\r\n\r\nIf something must not be broken, a PSScriptAnalyzer rule is the next best thing.\r\n",
      "created_at": "2022-07-26T12:58:35Z",
      "updated_at": "2022-07-26T12:58:35Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "Definitely should be a script analyzer rule if nothing else. \r\nI doubt if the the `param ($1, $2, $3)` is common - even in batch files converted to PowerShell scripts, because I think people would tend to use `$args`  but the original Murphy's law had it that if can be done wrongly, someone will do that,  so if the syntax allows it, the script that _relies_ on it is out there somewhere - as I say, probably not common, but I'd guess more likely to break than #17519 ",
      "created_at": "2022-07-27T08:17:25Z",
      "updated_at": "2022-07-27T08:17:25Z"
    }
  ],
  "created_at": "2022-07-25T19:50:24Z",
  "number": 17767,
  "state": "open",
  "title": "Parameter declarations are accepted with names that cannot be bound with named arguments, such as those that look like negative numbers",
  "updated_at": "2022-08-22T20:44:11Z"
}