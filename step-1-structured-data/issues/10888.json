{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10888",
  "author": "KirkMunro",
  "body": "# Summary of the new feature/enhancement\r\n\r\nAs a scripter,\r\nI want `-bset` and `-bnset` operators that allow me to test if one or more bits are set or not set\r\nso that I can use more descriptive and simplified logic when I need to test bitwise flag state.\r\n\r\n# Proposed technical implementation details\r\n\r\nI'm logging this issue because every time I come back to it, it bothers me.\r\n\r\nLet's say you need to make sure one or more flags are enabled or disabled in a system that you are managing via automation. For example, consider the SSL flags on a website in IIS. You might write some logic that looks like this to make sure the appropriate flags are enabled:\r\n\r\n```powershell\r\n$webconfig = Get-WebConfiguration -Location $websiteName -Filter system.webserver/security/access\r\n$sslFlagValue = $webconfig.Attributes.where{$_.Name -eq 'sslFlags'}.Value\r\n$requiredFlags = 104\r\nif (($sslFlagValue -band $requiredFlags) -ne $requiredFlags) {\r\n    Set-WebConfiguration -Location $websiteName -Filter system.webserver/security/access -Value ($sslFlagValue -bor $requiredFlags)\r\n}\r\n```\r\n\r\nThat works, but the syntax used to check if bitwise flags are set is annoyingly awkward and cumbersome. If you're only testing one bitwise flag, you can simply use the `-band` operator, and let the result be converted to `bool`; however, if you are testing multiple bitwise flags at the same time, you need to use `-band` to separate out the flags you are testing, wrap that in parentheses, and then compare the result of that against the flags you are testing. If you have a match, all flags are set. If not, you're missing a flag.\r\n\r\nInstead, I'd like to replace this:\r\n\r\n`if (($something -band $flags) -eq $flags) {...}`\r\n\r\nwith this:\r\n\r\n`if ($something -bset $flags) {...}`\r\n\r\nThis would return true only if all of the flags on the right-hand side were set.\r\n\r\nI would also add a `-bnset` operator that would return true if all flags on the right-hand side were not set (e.g. it would be the equivalent of `if (($something -band $flags) -ne $flags)`).\r\n\r\nIt's a little syntax sugar to simplify the logic that is required when you want to check to see if one or more flags are set.\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Isn't this available as `$something.HasFlag($flags)`? \ud83d\ude42 ",
      "created_at": "2019-10-25T02:10:44Z",
      "updated_at": "2019-10-25T02:10:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Isn't this available as $something.HasFlag($flags)? \r\n\r\nYes, it is first question - how frequently do we manipulate enum flags?\r\n\r\nProposed names is cryptic. -bset implies \"set\", not \"check/test\" flag. I'd expect that the names is derived  from \"the enum has flags\", ex.: -flags, -hasflags, -enumflags, -enumhasflag\r\n\r\nWhat is preffered syntax:\r\n```\r\n$enumVar -flags Flag1,Flag2,Flag3\r\n$enumVar -flags Flag1+Flag2+Flag3\r\n$enumVar -flags [EnumType]::Flag1,[EnumType]::Flag2,[EnumType]::Flag3\r\n$enumVar -flags [EnumType]::Flag1+[EnumType]::Flag2+[EnumType]::Flag3\r\n```",
      "created_at": "2019-10-25T03:41:39Z",
      "updated_at": "2019-10-25T03:41:39Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "> Isn't this available as `$something.HasFlag($flags)`? \ud83d\ude42\r\n\r\nYou're assuming that you actually have an enumeration to work with. Sometimes you don't. In the case of IIS and the example I provided, I don't have the `HasFlag` method available to me.\r\n\r\n> Proposed names is cryptic. -bset implies \"set\", not \"check/test\" flag. I'd expect that the names is derived from \"the enum has flags\", ex.: -flags, -hasflags, -enumflags, -enumhasflag\r\n\r\nPowerShell already uses many short operator names, and since this is a bitwise operation it made sense (to me at least) to keep the same prefix as `-band`, `-bor`, `-bxor`, and `-bnot`. In the context of bitwise operations, `-bor` is already \"set (bit)\". The proposal of `-bset` was meant to represent \"bit (is) set\", not \"set bit\". I also considered `-btest`, but when looking at the negative check (if a bit is not set), I didn't like `-bntest` as much as I liked `-bnset` (\"bit (is) not set\").\r\n\r\nUltimately I would like to keep these short, without the word \"enum\" in them (because they are not necessarily enumerations), consistent with other bitwise operators, and with both positive and negative test variants. With those goals in mind I still prefer `-bset` and `-bnset` over the other proposals you suggested @iSazonov, but I'm not attached to those operator names personally.\r\n\r\nOne alternative that just came to mind: `-bon` and `-boff`. I think I still prefer `-bset` and `-bnset` over this alternative as well though.\r\n\r\nRegardless of which name we choose, these are conditional bitwise operators, and a quick check of the docs will identify them as such. Since they are conditional, they don't change any values. They just check values for a condition. That's a really simple concept to learn and remember, so I don't think the operator name has to be really long and descriptive just to stop someone from learning that concept once and then having that knowledge in hand to apply it when required.",
      "created_at": "2019-10-25T10:53:13Z",
      "updated_at": "2019-10-25T11:06:22Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "> Yes, it is first question - how frequently do we manipulate enum flags?\r\n\r\nPersonally for me, not very frequently. Yet we have `-band`, `-bor`, `-bnot`, and `-bxor` operators to work with flags because ultimately, it comes up in programming. And when it does, if you don't have an enumerated type to work with or if you don't realize that there is a `HasFlags` method available to you when you do have an enumerated type to work with, testing if flags are set (or not set) is a pain.",
      "created_at": "2019-10-25T10:55:58Z",
      "updated_at": "2019-10-25T10:56:09Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Yet we have `-band`, `-bor`, `-bnot`, and `-bxor` operators to work with flags\r\n\r\nThose make sense to me because without them, you just can't do that operation.  Even as someone who uses them *very* frequently, I have a hard time seeing the benefit in adding syntactic sugar for it directly in the language. ",
      "created_at": "2019-10-25T12:11:31Z",
      "updated_at": "2019-10-25T12:11:31Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "> Those make sense to me because without them, you just can't do that operation. Even as someone who uses them _very_ frequently, I have a hard time seeing the benefit in adding syntactic sugar for it directly in the language.\r\n\r\nThis is more than syntactic sugar.\r\n\r\nLet me share a short, non-contrived transcript that demonstrates exactly why I think the combination of the current set of bitwise operators and the `HasFlag` enumeration method is insufficient for general scripters when they need to work with flags.\r\n\r\n```none\r\n# Create a flag\r\nPS C:\\> $x = [System.Management.Automation.CommandTypes]'Cmdlet,Alias'\r\n\r\n# Get the full type name of the flag\r\nPS C:\\> $x.GetType().FullName\r\nSystem.Management.Automation.CommandTypes\r\n\r\n# Use the HasFlag method to check if multiple flags are set on the flag\r\nPS C:\\> $x.HasFlag('Cmdlet,Function')\r\nCannot convert argument \"flag\", with value: \"Cmdlet,Function\", for \"HasFlag\" to type \"System.Enum\": \"Cannot convert value \"Cmdlet,Function\" to type \"System.Enum\". Error: \"Late bound operations cannot be performed on types or methods for which ContainsGenericParameters is true.\"\"\r\nAt line:1 char:1\r\n+ $x.HasFlag('Cmdlet,Function')\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : NotSpecified: (:) [], MethodException\r\n+ FullyQualifiedErrorId : MethodArgumentConversionInvalidCastArgument\r\n\r\n# Since that didn't work, look at HasFlag to see why\r\nPS C:\\> $x.HasFlag\r\n\r\nOverloadDefinitions\r\n-------------------\r\nbool HasFlag(System.Enum flag)\r\n\r\n# Peachy, it isn't a generic method, so you can't just use string enumeration\r\n# values in PowerShell like you can in most other places. :|\r\n\r\n# Ok, let's just use the bitwise operators to check if our flags are set\r\nPS C:\\> $x -band 'Cmdlet,Function'\r\nCmdlet\r\n\r\n# Ok, I see that one of them is set. Now let's try that in an if statement\r\nPS C:\\> if ($x -band 'Cmdlet,Function') {'They are set'}\r\nThey are set\r\n\r\n# Well, that's not sufficient because that tells me they're set, but really only\r\n# one of them is set, so I really should check if the result is the set of\r\n# enumerations that I need to test\r\nPS C:\\> if ($x -band 'Cmdlet,Function' -eq 'Cmdlet,Function') {'They are set'}\r\nThey are set\r\n\r\n# Ok, so what's going on now? It says they are set, but they're clearly not.\r\n\r\n# Let's look more closely\r\nPS C:\\> $x -band 'Cmdlet,Function' -eq 'Cmdlet,Function'\r\nAlias\r\n\r\n# Huh?\r\n# This looks like I just identified the flags that are not set.\r\n\r\n# I suppose I should test to see if the flags are not set, since that's really\r\n# what I want to know\r\nPS C:\\> if ($x -band 'Cmdlet,Function' -ne 'Cmdlet,Function') {'They are not set'}\r\n\r\n# Looking more closely again\r\nPS C:\\> $x -band 'Cmdlet,Function' -ne 'Cmdlet,Function'\r\n0\r\n\r\n# Now it looks like none of the flags are set.\r\n\r\n# At some point in the commands above the scripter may realize that\r\n# their -eq and -ne operators appear to be returning non-boolean values,\r\n# and discover that they have a higher precedence than the bitwise\r\n# operators, realizing they need to use parentheses.\r\n\r\nPS C:\\> ($x -band 'Cmdlet,Function') -ne 'Cmdlet,Function'\r\nTrue\r\n\r\nPS C:\\> if (($x -band 'Cmdlet,Function') -ne 'Cmdlet,Function') {'They are not set'}\r\nThey are not set\r\n\r\nPS C:\\> ($x -band 'Cmdlet,Function') -eq 'Cmdlet,Function'\r\nFalse\r\n\r\nPS C:\\> if (($x -band 'Cmdlet,Function') -eq 'Cmdlet,Function') {'They are set'}\r\n\r\nPS C:\\>\r\n```\r\n\r\nThis is a realistic scenario that a scripter might go through when working with bitwise flags in PowerShell. We focus on so many things to make scripting easier, but these operators are definitely not the easiest to work with. It would be much easier and less error prone (especially since certain scenarios demonstrated above show how easy it could be to have conditional tests pass incorrectly) if we had:\r\n\r\n1. A conditional operator that returns true if a collection of bits are set in a flag.\r\n1. A conditional operator that returns true if a collection of bits are not set in a flag.\r\n\r\nThat's my opinion on this, but I fully respect if others disagree.\r\n",
      "created_at": "2019-10-25T15:07:58Z",
      "updated_at": "2019-10-25T15:10:57Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "I should have phrased that differently - I definitely see the potential benefit, but it's going to be pretty rare for a scripter to require exhaustive checks of bit flags.  Personally I do not think the impact would be broad enough to warrant additional operators.\r\n\r\nSide note, `HasFlag` does work as long you explicitly type the string, e.g. `$flags.HasFlag([Reflection.BindingFlags]'Public, Instance')` (which is my preference to do in general as I find the string by itself kind of hard to follow).  Also I almost never use multiple flags on the RHS, this type of pattern seems to work well:\r\n\r\n```powershell\r\nif (($flags -band 'Instance') -ne 0 -and ($flags -band 'NonPublic') -ne 0)\r\n{\r\n}\r\n```",
      "created_at": "2019-10-25T15:48:30Z",
      "updated_at": "2019-10-25T15:48:30Z"
    }
  ],
  "created_at": "2019-10-25T01:15:18Z",
  "number": 10888,
  "state": "open",
  "title": "New -bset and -bnset operators for simplified and more descriptive flag checking",
  "updated_at": "2019-10-25T15:48:30Z"
}