{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11569",
  "author": "gerardog",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\nPowerShell\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\nC:\\> pwsh -Command \"echo 1 \\\"2 3\\\"\"\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\n1\r\n2 3\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\n1\r\n2\r\n3\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nMajor  Minor  Patch  PreReleaseLabel BuildLabel\r\n-----  -----  -----  --------------- ----------\r\n7      0      0      rc.1\r\n```\r\n",
  "closed_at": "2020-01-31T21:41:19Z",
  "comments": [
    {
      "author": "jantari",
      "author_association": "NONE",
      "body": "No version of PowerShell or cmd has ever used the backslash `\\` as the escape character.\r\n\r\nIt's the caret `^` for cmd, and the backtick `` ` `` for PowerShell (all versions).\r\n\r\nEither way, the behavior of this mostly depends on how the calling shell interprets the quotes `\"`.\r\nI cannot replicate this.\r\n\r\nWhen calling from cmd.exe:\r\n```\r\njantari@AMDESKTOP:C:\\Users\\jantari\r\n\u2514\u2500 cmd> pwsh-preview -Command \"echo 1 \\\"2 3\\\"\"\r\n1\r\n2 3\r\n\r\njantari@AMDESKTOP:C:\\Users\\jantari\r\n\u2514\u2500 cmd> powershell -Command \"echo 1 \\\"2 3\\\"\"\r\n1\r\n2 3\r\n```\r\n\r\nWhen calling from PowerShell 7:\r\n```\r\njantari@AMDESKTOP:~ > powershell -Command \"echo 1 \\\"2 3\\\"\"\r\n1\r\n\\\r\n2\r\n3\\\r\njantari@AMDESKTOP:~ > pwsh-preview -Command \"echo 1 \\\"2 3\\\"\"\r\n1\r\n\\\r\n2\r\n3\\\r\n```\r\n\r\nWhen calling from Windows PowerShell:\r\n```\r\njantari@AMDESKTOP:~\r\n\u2514\u2500 PS> powershell -Command \"echo 1 \\\"2 3\\\"\"\r\nThe string is missing the terminator: \".\r\n    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException\r\n    + FullyQualifiedErrorId : TerminatorExpectedAtEndOfString\r\n\r\njantari@AMDESKTOP:~\r\n\u2514\u2500 PS> pwsh-preview -Command \"echo 1 \\\"2 3\\\"\"\r\njantari@AMDESKTOP:~\r\n\u2514\u2500 PS>\r\n```\r\n\r\nWindows PowerShell: 5.1.19041.1\r\nPowerShell Core: 7.0.0-rc.1",
      "created_at": "2020-01-13T20:06:52Z",
      "updated_at": "2020-01-13T20:10:03Z"
    },
    {
      "author": "gerardog",
      "author_association": "NONE",
      "body": "You are right about \\\\\"\". However, I can still repro this with \"\". \r\nI have a another, clean, Windows Insider VM where I can also reproduced it:\r\nThis may be related to how you install pwsh, in my case using `dotnet tool install powershell --global --version 7.0.0-rc.1`\r\n\r\n```\r\nC:\\Users\\Gerardo>ver\r\n\r\nMicrosoft Windows [Version 10.0.19541.1000]\r\n\r\nC:\\Users\\Gerardo>dotnet\r\n'dotnet' is not recognized as an internal or external command,\r\noperable program or batch file.\r\n\r\nC:\\Users\\Gerardo>pwsh\r\n'pwsh' is not recognized as an internal or external command,\r\noperable program or batch file.\r\n\r\nC:\\Users\\Gerardo>curl https://download.visualstudio.microsoft.com/download/pr/639f7cfa-84f8-48e8-b6c9-82634314e28f/8eb04e1b5f34df0c840c1bffa363c101/dotnet-sdk-3.1.100-win-x64.exe\r\n(...)\r\n\r\nC:\\Users\\Gerardo>dotnet-sdk-3.1.100-win-x64.exe \r\n(...)\r\n\r\nC:\\Users\\Gerardo>dotnet tool install powershell --global --version 7.0.0-rc.1\r\nSince you just installed the .NET Core SDK, you will need to reopen the Command Prompt window before running the tool you installed.\r\nYou can invoke the tool using the following command: pwsh\r\nTool 'powershell' (version '7.0.0-rc.1') was successfully installed.\r\n(...)\r\n\r\nC:\\Users\\Gerardo>pwsh -Version\r\nPowerShell 7.0.0-rc.1\r\n\r\nC:\\Users\\Gerardo>pwsh -Command \"echo 1 \"\"2 3\"\"\"\r\n1\r\n2\r\n3\r\n\r\nC:\\Users\\Gerardo>powershell -Command \"echo 1 \"\"2 3\"\"\"\r\n1\r\n2 3\r\n```\r\n",
      "created_at": "2020-01-13T20:48:40Z",
      "updated_at": "2020-01-13T20:48:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @mklement0 It seems it is dup?",
      "created_at": "2020-01-31T14:36:50Z",
      "updated_at": "2020-01-31T14:36:50Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I _think_ the issue is related to installation of PowerShell as a dotnet global tool, because the regularly installed PowerShell does _not_ exhibit these problems.\r\n\r\nSome general background information below (applies to the regularly installed version):\r\n\r\n----\r\n\r\n> No version of PowerShell or cmd has ever used the backslash \\ as the escape character.\r\n\r\nThe PowerShell _CLI_ has always supported `\\` for escaping `\"`, for consistency with other console applications (even though PowerShell-_internally_ you must escape them as `` `\" `` or `\"\"` (inside `\"...\"` only)).\r\n\r\nOn Windows, the majority of - but not all - console applications support `\"\"` for escaping `\"` as an alternative to `\\\"`.\r\n\r\nWindows PowerShell did _not_ support this properly, but PowerShell Core now does.\r\n\r\nTherefore, _when executed from `cmd.exe`_, both the following commands work:\r\n\r\n```sh\r\n# Also works on Unix-like platforms, from a POSIX-like shell such as Bash.\r\n# (For literal strings you can also use '...' quoting there, without the need to \r\n#  escape embedded \" chars.)\r\n# Situationally, this can break on Windows.\r\nC:>pwsh -noprofile -c \"echo 1 \\\"2 3\\\"\"\r\n\r\n# Windows only, but works robustly.\r\nC:>pwsh -noprofile -c \"echo 1 \"\"2 3\"\"\"\r\n```\r\n\r\nOn Windows, the `\\\"`-escaped command can break, since `cmd.exe` itself doesn't recognize `\\\"` as an _escaped_ `\"`, so what follows it is considered _unquoted_ and breaks with chars. such as `&`; e.g.: \r\n`C:>pwsh -noprofile -c \"echo 1 \\\"2 & 3\\\"\"`.\r\nSince `cmd.exe` _does_ recognize `\"\"` as an escaped, `\"`, it is therefore safer to use `\"\"` _on Windows_ - but, unfortunately, that doesn't work on Unix.\r\n\r\nThe upshot:\r\n\r\n* Use `\"\"` on Windows, but know that it won't work on Unix.\r\n* Use `\\\"` on Unix and if you need to be cross-platform, but know that it _may_ break on Windows (probably not too frequently)\r\n\r\n\r\n\r\n",
      "created_at": "2020-01-31T15:07:04Z",
      "updated_at": "2020-01-31T21:31:10Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I can reproduce the problem with PowerShell Core 7.0.0-rc.2 _when installed as a .NET global tool_, @gerardog, and to present it in a more focus manner I've created #11747.\r\nIf you agree with the new presentation, please close this issue.",
      "created_at": "2020-01-31T21:01:33Z",
      "updated_at": "2020-01-31T21:01:33Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "P.S.: It's a reasonable assumption that all `pwsh` executables with a given version number are created equal, irrespective of the installation method, but that is unfortunately not true for the `dotnet tool`-installed version, which has exhibited other problems in the past.",
      "created_at": "2020-01-31T21:30:01Z",
      "updated_at": "2020-01-31T21:30:01Z"
    },
    {
      "author": "gerardog",
      "author_association": "NONE",
      "body": "Fair enough. Thanks!",
      "created_at": "2020-01-31T21:41:19Z",
      "updated_at": "2020-01-31T21:41:19Z"
    }
  ],
  "created_at": "2020-01-13T17:47:44Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 11569,
  "state": "closed",
  "title": "CLI: escaped command line quotes \"\" difference with powershell 5.1",
  "updated_at": "2020-02-01T05:19:17Z"
}