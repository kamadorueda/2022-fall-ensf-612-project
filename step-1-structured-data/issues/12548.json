{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12548",
  "author": "lebartha",
  "body": "Hi,\r\n\r\nWe had this issue since PowerShell v1. The < character is always reserved for future use, but that future never arrives.\r\n\r\n< and > are using by many command line utilities, such as mysql and mysqldump for example. But can never use it with powershell.\r\n\r\nhttps://bugs.mysql.com/bug.php?id=73481",
  "closed_at": null,
  "comments": [
    {
      "author": "ThomasNieto",
      "author_association": "CONTRIBUTOR",
      "body": "Have you try using the stop-parsing symbol `--%`?\r\n\r\nhttps://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_parsing?view=powershell-7\r\n\r\n```\r\nmysql.exe --% < backup.sql\r\n```\n\n<blockquote><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_parsing\">about_Parsing - PowerShell</a></strong></div></blockquote>",
      "created_at": "2020-05-02T01:06:26Z",
      "updated_at": "2020-05-02T01:06:28Z"
    },
    {
      "author": "lebartha",
      "author_association": "NONE",
      "body": "Gives me the error:  Couldn't find table: \">\"",
      "created_at": "2020-05-02T03:02:11Z",
      "updated_at": "2020-05-02T03:02:11Z"
    },
    {
      "author": "jcotton42",
      "author_association": "CONTRIBUTOR",
      "body": "@ThomasNieto the issue here isn't that PowerShell is swallowing `<`, it's that PowerShell doesn't support input redirection (setting the stdin of a native command to be from a file), so the stop parsing symbol won't help.",
      "created_at": "2020-05-06T15:16:53Z",
      "updated_at": "2020-05-06T15:16:53Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Given the token has been labeled as reserved for several versions, I'd be inclined to assume that if someone wanted to implement the feature it would probably be largely welcomed.\r\n\r\nIt's probably just a matter of priorities and having the time to implement it; the number of binaries that _require_ that form of input aren't huge, at least on Windows, and many of them can work with the output provided with a more standard input pipe, though that requires manually pulling the content from the relevant file manually if you want to pass file contents in...\r\n\r\nThe broader question would simply be what is the expected behaviour if you use `<` on a cmdlet, pipeline, or expression. Sensible behaviour for a first implementation might just be to throw an error in those cases, and only allow it to be used when invoking native commands.",
      "created_at": "2020-05-06T15:20:24Z",
      "updated_at": "2020-05-06T15:21:57Z"
    },
    {
      "author": "jcotton42",
      "author_association": "CONTRIBUTOR",
      "body": "> The broader question would simply be what is the expected behaviour if you use `<` on a cmdlet, pipeline, or expression. Sensible behaviour for a first implementation might just be to throw an error in those cases, and only allow it to be used when invoking native commands.\r\n\r\nIMO the intuitive behavior there would be that `cmdlet < file` would be semantically equivalent to `Get-Content file | cmdlet`. I don't think it would make sense for an expression, or in the middle of a pipeline.",
      "created_at": "2020-05-06T15:26:59Z",
      "updated_at": "2020-05-06T15:27:45Z"
    },
    {
      "author": "lebartha",
      "author_association": "NONE",
      "body": "So, what I am hearing (or reading), is that MySQL tools are the issue here and not powershell. I mean there is a workaround to wrap the commands with cmd /c \"...\", but its sad that it has to be done that way :(",
      "created_at": "2020-05-12T00:11:09Z",
      "updated_at": "2020-05-12T00:11:09Z"
    },
    {
      "author": "jcotton42",
      "author_association": "CONTRIBUTOR",
      "body": "@lebartha no the issue really is ultimately PowerShell, in that it doesn't support input redirection.",
      "created_at": "2020-05-12T00:13:14Z",
      "updated_at": "2020-05-12T00:13:14Z"
    },
    {
      "author": "Phil-Factor",
      "author_association": "NONE",
      "body": "The MySQL commandline tools work perfectly fine with PowerShell. PowerShell does support input redirection (setting the stdin of a native command to be from a file). The syntax is different. The flow always goes from left to right. It is a much better idea, more intuitive,  than the classic batch left-chevron  input redirection. Here is code for reading SQL from a file\r\n$Result = ([IO.File]::ReadAllText(\"$MyInputFile\") | mysql \"--host=$myhost\" \"--password=$myPassword\"  \"--user=$MyUser\")\r\nor for use with a query as a string ...\r\n 'SHOW VARIABLES LIKE \"version\"'|mysql \"--host=$myhost\" \"--password=$myPassword\"  \"--user=$MyUser\"",
      "created_at": "2022-03-24T17:30:13Z",
      "updated_at": "2022-03-24T17:31:33Z"
    }
  ],
  "created_at": "2020-05-01T22:03:46Z",
  "number": 12548,
  "state": "open",
  "title": "Powershell and < character with mysql and mysqldump",
  "updated_at": "2022-03-24T17:31:33Z"
}