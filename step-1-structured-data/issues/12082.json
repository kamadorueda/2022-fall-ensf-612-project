{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12082",
  "author": "jszabo98",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\nI was looking for a regex to match non-ascii characters (not within 0-127), and found an expression here:  https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-classes-in-regular-expressions .  But weirdly capital and small letter 'i' match as non-ascii.  \"\\P\" means \"not\".\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n'i' -match '\\P{IsBasicLatin}'\r\n'I' -match '\\P{IsBasicLatin}'\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nFalse\r\nFalse\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nTrue\r\nTrue\r\n```\r\nNo other ascii character matches.\r\n\r\n```powershell\r\n0..127 | foreach { if ([char]$_ -match '\\P{IsBasicLatin}') { [char]$_ } }\r\nI\r\ni\r\n```\r\n\r\nA workaround is to use -cmatch:\r\n\r\n```powershell\r\n'i' -cmatch '\\P{IsBasicLatin}'\r\nFalse\r\n```\r\nAh, 'i' matches some some Turkish character (0x130) without case sensitivity.  There's a little dot over the capital I.\r\n\r\n```\r\n'i' -match '\u0130'\r\nTrue\r\n```\r\nAlso, Kelvin \u212a matches as ascii when case is ignored:\r\n\r\n```powershell\r\n[char]0x212a | select-string '\\p{IsBasicLatin}'\r\n\r\n\u212a\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0\r\nOS                             Microsoft Windows 10.0.14393\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-03-14T17:33:57Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "This will be dependent on system culture settings and whether you use case sensitive or insensitive matching. Also, any perceived or actual discrepancies there are entirely down to how the regex processor in .NET Core is handling it. While we can document such discrepancies, we cannot fix them here; if we need them fixed or there are corrections to be made, we'll need to file issues in the https://github.com/dotnet/runtime repo. \ud83d\ude42 ",
      "created_at": "2020-03-09T01:35:34Z",
      "updated_at": "2020-03-09T01:35:44Z"
    },
    {
      "author": "jszabo98",
      "author_association": "NONE",
      "body": "The culture is irrelevant.  My culture is en-US, and somehow the Turkish `\u0130` gets conflated with small i and capital I when case is ignored.  I'm not sure what culture the kelvin sign `\u212a` is.  I posted a little about it on stackoverflow:  https://stackoverflow.com/questions/30805741/match-high-ascii-characters-but-not-the-letter-i/60590324#60590324\n\n<blockquote><img src=\"https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded\" width=\"48\" align=\"right\"><div>Stack Overflow</div><div><strong><a href=\"https://stackoverflow.com/questions/30805741/match-high-ascii-characters-but-not-the-letter-i\">Match high ASCII characters (but not the letter i)</a></strong></div><div>I'm trying to match all high ASCII and special utf-8 characters using powershell:\n\ngc $file -readcount 0 | select-string -allmatches -pattern \"[\\x80-\\uffff]\"\r\nwhich should find all the characters I...</div></blockquote>",
      "created_at": "2020-03-09T21:22:37Z",
      "updated_at": "2020-03-09T21:22:39Z"
    },
    {
      "author": "jszabo98",
      "author_association": "NONE",
      "body": "It's funny how this kind of thing happens even outside .net.  Maybe I should make a ticket with the unicode consortium.\r\n\r\n```\r\necho i | findstr /i \u0130\r\ni\r\n```\r\n",
      "created_at": "2020-03-15T16:38:16Z",
      "updated_at": "2020-03-15T16:38:16Z"
    },
    {
      "author": "tenatus",
      "author_association": "NONE",
      "body": "It is a bug that \\P{IsBasicLatin} != [^\\p{IsBasicLatin}] in powershell. E.g., this command will remove all i's [bug]:\r\n`(get-content 'c:\\file.txt') -replace '\\P{IsBasicLatin}', ''`\r\nwhile this won't [correct]:\r\n`(get-content 'c:\\file.txt') -replace '[^\\p{IsBasicLatin}]', ''`",
      "created_at": "2022-09-28T19:00:28Z",
      "updated_at": "2022-09-28T19:00:28Z"
    }
  ],
  "created_at": "2020-03-08T15:34:06Z",
  "number": 12082,
  "state": "closed",
  "title": "regex '\\P{IsBasicLatin}' (non-ascii) matches the letter 'i'",
  "updated_at": "2022-09-28T19:00:28Z"
}