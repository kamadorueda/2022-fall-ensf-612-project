{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7159",
  "author": "jszabo98",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nCan't use a bypropertyvalue parameter in a pipe when a parameter that can be byvalue in a pipe is not supplied.  Powershell ends up converting the bypropertyvalue parameter into a string that looks like a hash table, which is never useful, in this case '@{type=cmdlet}'.  get-command is a good example of this.  A lot of its parameters can be sent over the pipe bypropertyvalue.  -name can be sent byvalue.  So the -name parameter is \"greedy\" in the pipeline, to the point of messing up the -type parameter.\r\n\r\n```powershell\r\n[pscustomobject]@{type='cmdlet'}  | get-command       \r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```\r\nCommandType     Name                                               Version    Source\r\n-----------     ----                                               -------    ------\r\nCmdlet          Add-Content                                        3.1.0.0    Microsoft.PowerShell.Management\r\nCmdlet          Add-History                                        6.1.0.0    Microsoft.PowerShell.Core\r\nCmdlet          Add-Member                                         3.1.0.0    Microsoft.PowerShell.Utility\r\n...\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```\r\nget-command : The term '@{type=cmdlet}' is not recognized as the name of a cmdlet, function, script file, or operable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\nAt line:1 char:37\r\n+ [pscustomobject]@{type='cmdlet'}  | get-command\r\n+                                     ~~~~~~~~~~~\r\n+ CategoryInfo          : ObjectNotFound: (@{type=cmdlet}:String) [Get-Command], CommandNotFoundException\r\n+ FullyQualifiedErrorId : CommandNotFoundException,Microsoft.PowerShell.Commands.GetCommandCommand\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.2\r\nPSEdition                      Core\r\nGitCommitId                    v6.1.0-preview.2\r\nOS                             Darwin 16.7.0 Darwin Kernel Version 16.7.0: Tue Jan 30 11:27:06 PST 2018; root:xnu-3789.73.11~1/RELEASE_...\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Get-Process is another one that has an issue with this, from memory. It's very frustrating -- there's no good reason that after the byvalue fails, a bypropertyname shouldn't be attempted.",
      "created_at": "2018-06-24T21:32:49Z",
      "updated_at": "2018-06-24T21:32:49Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32:\r\n\r\nThe problem isn't that the by-property-name parameter _isn't_ bound - it is - it's that the by-value parameter is _also_ bound, which, with `[string]` / `[object]` / `[psobject]` by-value parameters happens _invariably_ - unless you bind these parameters by _argument_ rather than via the pipeline (as @jszabo98 implies).\r\n\r\nJust to spell it out for the example command:\r\n\r\n```powershell\r\n# Binding -Name *by argument* makes the problem go away. \r\n[pscustomobject]@{type='cmdlet'}  | get-command -Name * \r\n```\r\n\r\nThe parameter binder is designed to bind input to _all_ suitable pipeline-binding parameters, even though the typical use case is for pipeline input to bind to just _one_ parameter.\r\n\r\n---\r\n\r\nThe behavior is certainly frustrating, and the workaround isn't obvious, but a generic solution would require changes to the parameter binder, which, apart from backward-compatibility concerns, raises tricky conceptual issues:\r\n\r\n* For `[object]` / `[psobject]`-typed parameters, there is no solution -  by their nature (everything is derived from them), they should continue to bind everything.\r\n\r\n   * Cmdlet authors should simply not bind such parameters by value if they also want to support other pipeline parameters that should bind in isolation.\r\n\r\n* For `[string]`-typed parameters and other specific types, conceivably a `StrictType` attribute argument could be introduced that binds only if the input object already is of the target type (or a derived type) rather than just being _convertible_ to it; e.g.:  \r\n`[Parameter(ValueFromPipeline, StrictType)] [string] $Name]`, which would then only bind `[string]` input objects, and not also instances of other types, such as `[pscustomobject]@{type='cmdlet'}`.\r\n\r\n---\r\n\r\nFor now, the only options I see are:\r\n\r\n* For cmdlets that do use `[string]` / `[object]` / `[psobject]` by-value parameters alongside other, conceptually independent pipeline-binding parameters, _document_ the pitfall and workaround.\r\n   * Among the cmdlets affected are `Get-Command`, as demonstrated here, and, on Windows PowerShell, `Get-Service` which also has a `-ComputerName` parameter there that clashes with `-Name` - see this [SO question](https://stackoverflow.com/a/50341501/45375).\r\n   * Others?\r\n\r\n* When authoring new cmdlets, avoid use of such parameters, if possible.\r\n\r\n* Document guidelines for cmdlet authors.\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-06-25T15:23:11Z",
      "updated_at": "2018-06-25T15:31:17Z"
    }
  ],
  "created_at": "2018-06-24T20:09:51Z",
  "number": 7159,
  "state": "open",
  "title": "basic problem mixing byvalue and bypropertyname parameters in pipes",
  "updated_at": "2018-06-25T15:31:17Z"
}