{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11889",
  "author": "p0W3RH311",
  "body": "steps to reproduce\r\n\r\n`icacls X:\\VMS --% /grant Dom\\HVAdmin:(CI)(OI)F ---% ; write-host hello`\r\n\r\nreturn-parsing symbol _---%_  directs PowerShell to return interpreting input as PowerShell commands or expressions.",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "What benefit does this provide? \ud83e\udd14 \r\n\r\nI can't say I've ever needed to worry about what I'm putting after a stop-parsing symbol other than a line break.",
      "created_at": "2020-02-19T22:37:54Z",
      "updated_at": "2020-02-19T22:37:54Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32, the potential benefit is in overcoming the following limitations of current `--%` syntax (I'm not advocating for the change, just providing background information; to me, the only truly problematic limitation is the redirection case).\r\n\r\n* You cannot use redirections  such as `> out.txt` - they are passed as _literal arguments_ to the target program (if the target program happens to be a shell, _it_ would interpret it).\r\n* You cannot enclose the command line in `(...)` - because the closing `)` is interpreted as a literal part of the command line.\r\n* (As implied in the OP) You cannot follow the command line with `;` and another statement - because the `;` is interpreted as a literal part of the command line.\r\n* You cannot use `--%` inside a _single-line_ script block - because the closing `}` is interpreted as a literal part of the command line.\r\n",
      "created_at": "2020-02-20T20:48:17Z",
      "updated_at": "2020-02-20T20:48:45Z"
    }
  ],
  "created_at": "2020-02-19T18:55:57Z",
  "number": 11889,
  "state": "open",
  "title": "implement return-parsing symbol",
  "updated_at": "2020-02-20T20:48:45Z"
}