{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11452",
  "author": "jackdcasey",
  "body": "# Test-Connection: Increase output detail when performing a tcp test\r\n\r\nThese changes provide more detail when using `Test-Connection` cmdlet with the `-TCPPort` option. This will provide functionality more in line with the ping test, and the classic `Test-NetConnection` cmdlet.\r\n\r\nCurrently, the returned value when performing this test is a boolean true / false. This provides some insight into if the connection was successful but not much else. \r\n\r\nHere's the current output:\r\n\r\n```\r\nTest-Connection google.com -TCPPort 443\r\n\r\nTrue\r\n```\r\nHere is an example of the same command, with the changes:\r\n\r\n```\r\nTest-Connection google.com -TCPPort 443\r\n\r\n   Destination: google.com\r\n\r\nTest Source           Destination      DestinationAddress    Port Latency Result\r\n                                                                     (ms)\r\n---- ------           -----------      ------------------    ---- ------- ------\r\n   1 Jacks-MBP        google.com       172.217.3.174          443      15 Success\r\n```\r\nThe `-Count` and `-Repeat` options are also implemented, as seen below:\r\n```\r\nTest-Connection google.com -TCPPort 443 -Count 4\r\n\r\n   Destination: google.com\r\n\r\nTest Source           Destination      DestinationAddress    Port Latency Result\r\n                                                                     (ms)\r\n---- ------           -----------      ------------------    ---- ------- ------\r\n   1 Jacks-MBP        google.com       172.217.3.174          443      13 Success\r\n   2 Jacks-MBP        google.com       172.217.3.174          443      10 Success\r\n   3 Jacks-MBP        google.com       172.217.3.174          443      16 Success\r\n   4 Jacks-MBP        google.com       172.217.3.174          443      16 Success\r\n```\r\n```\r\nTest-Connection google.com -TCPPort 443 -Repeat \r\n\r\n   Destination: google.com\r\n\r\nTest Source           Destination      DestinationAddress    Port Latency Result\r\n                                                                     (ms)\r\n---- ------           -----------      ------------------    ---- ------- ------\r\n   1 Jacks-MBP        google.com       172.217.3.174          443      15 Success\r\n   2 Jacks-MBP        google.com       172.217.3.174          443      15 Success\r\n   3 Jacks-MBP        google.com       172.217.3.174          443      10 Success\r\n   4 Jacks-MBP        google.com       172.217.3.174          443      16 Success\r\n   5 Jacks-MBP        google.com       172.217.3.174          443      16 Success\r\n   6 Jacks-MBP        google.com       172.217.3.174          443      15 Success\r\n   7 Jacks-MBP        google.com       172.217.3.174          443      18 Success\r\n   8 Jacks-MBP        google.com       172.217.3.174          443      16 Success\r\n   9 Jacks-MBP        google.com       172.217.3.174          443      16 Success\r\n  10 Jacks-MBP        google.com       172.217.3.174          443      17 Success\r\n   ...\r\n```\r\nTo provide a boolean output, the `-Quiet` option is used:\r\n```\r\nTest-Connection google.com -TCPPort 443 -Quiet\r\n\r\nTrue\r\n```\r\nMost of the code changes are implementing a new TcpTestStatus class to facilitate the output. A few changes to existing code to implement the existing switches.\r\n\r\n## PR Context\r\n\r\nThis opens up a lot more functionality with `Test-Connection` when working with TCP. Often, while working on connectivity issues, we need more detail than just if the connection is established, or not.\r\n\r\nThese changes should provide much of the fundamental TCP functionality from the classic `Test-NetConnection`.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n\r\nFix: #11440",
  "closed_at": null,
  "comments": [
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "[![CLA assistant check](https://cla.opensource.microsoft.com/pull/badge/signed)](https://cla.opensource.microsoft.com/PowerShell/PowerShell?pullRequest=11452) <br/>All CLA requirements met.",
      "created_at": "2019-12-29T09:34:32Z",
      "updated_at": "2020-09-07T04:48:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We are waiting #11517.",
      "created_at": "2020-01-15T04:03:37Z",
      "updated_at": "2020-01-15T04:03:37Z"
    },
    {
      "author": "jackdcasey",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Now that #11517 is merged, are there any further changes to make before proceeding?\r\n\r\nI'm super excited to move forward \ud83d\ude01 ",
      "created_at": "2020-01-22T03:49:04Z",
      "updated_at": "2020-01-22T03:49:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@jackdcasey Thanks! I think you should rebase to get latest updates.",
      "created_at": "2020-01-22T04:51:03Z",
      "updated_at": "2020-01-22T04:51:03Z"
    },
    {
      "author": "jackdcasey",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Good point, I've brought things up to date!",
      "created_at": "2020-01-22T05:08:56Z",
      "updated_at": "2020-01-22T05:08:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Please rebase to pass static analysis.",
      "created_at": "2020-01-22T16:48:13Z",
      "updated_at": "2020-01-22T16:48:13Z"
    },
    {
      "author": "jackdcasey",
      "author_association": "CONTRIBUTOR",
      "body": "Quick follow up on this \ud83d\ude0a Is there anything else that I can do to help move things forward? \r\n\r\nThanks! ",
      "created_at": "2020-01-29T21:57:37Z",
      "updated_at": "2020-01-29T21:57:37Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "When was the current behavior introduced?",
      "created_at": "2020-01-31T22:22:20Z",
      "updated_at": "2020-01-31T22:22:20Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "The current -TcpPort behaviour? Would have been introduced I think during or not long after the initial `Test-Connection` port was done by @iSazonov ",
      "created_at": "2020-01-31T23:03:39Z",
      "updated_at": "2020-01-31T23:03:39Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "I verified that the behavior is in 6.2, which makes this a breaking change.",
      "created_at": "2020-01-31T23:06:29Z",
      "updated_at": "2020-01-31T23:06:29Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee Can you review the new output as the output change is a breaking change?",
      "created_at": "2020-01-31T23:08:21Z",
      "updated_at": "2020-01-31T23:08:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The cmdlet is not ready for production (some issues in the repo, some issue in Core repo), it was published _only_ for getting feedbacks. Until Core team fixes underlying API the cmdlet can not be \"production ready\".",
      "created_at": "2020-02-01T05:26:54Z",
      "updated_at": "2020-02-01T05:26:54Z"
    },
    {
      "author": "jackdcasey",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov are you able to elaborate a bit on your comment? I feel I'm a bit out of the loop on this one \ud83d\ude05\r\n\r\nThank you! ",
      "created_at": "2020-02-02T22:52:28Z",
      "updated_at": "2020-02-02T22:52:28Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@jackdcasey See https://github.com/dotnet/runtime/issues/927",
      "created_at": "2020-02-03T03:08:35Z",
      "updated_at": "2020-02-03T03:08:35Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@iSazonov if it is not ready for production, it should be marked as experimental, but that itself would be a breaking change.  Unless we left the original implementation, when not using the experimental feature.",
      "created_at": "2020-02-03T17:54:09Z",
      "updated_at": "2020-02-03T18:29:54Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@TravisEz13 I would say it's more beneficial to have it this way. I'd ask that the committee review whether the breaking change is sufficiently beneficial to make.\r\n\r\nIf the committee is against it, we always have the option of implementing the experimental feature as you say. \r\n\r\nHowever, given that the cmdlet's ICMP behaviour has already been changed prior to v7 (RFCs were submitted and approved for those changes) I would be inclined to think that this change simply complements the already accepted changes to the cmdlet. :slightly_smiling_face: ",
      "created_at": "2020-02-03T18:21:40Z",
      "updated_at": "2020-02-03T18:21:40Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, our proposal to not introduce a breaking change is:\r\n\r\n- By default keep the current behavior returning a single boolean (if `-Count` isn't specified)\r\n- Add noteproperty with the additional information to be rendered by a change to formatting\r\n- If `-Count` is specified, then still return a boolean with noteproperty for each test and formatting will render it appropriately\r\n",
      "created_at": "2020-02-05T23:53:16Z",
      "updated_at": "2020-02-05T23:53:16Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "To give a little more context, our reasoning was primarily around:\r\n\r\n* A desire to add this useful functionality (thank you!)\r\n* Avoiding breaking changes: while `-TCPPort` only just shipped in 6.2, it's already going out in 7.0, and will be supported for ~3 years. This includes\r\n  - keeping the default return as a single object\r\n  - keeping the return type the same (Boolean) so folks can still use it as such\r\n\r\n",
      "created_at": "2020-02-05T23:55:37Z",
      "updated_at": "2020-02-05T23:55:37Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I... appreciate the reasoning, but I'd be _super_ wary of trying to add data to a primitive like that. Most primitives don't go so well with things like that. We already have a few issues around primitives with noteproperties thanks to Add-Member selectively supporting it.\r\n\r\nIt's also starkly different to what currently is provided as output from any other cmdlet whatsoever and would set a very odd precedence and preference to decorate output data rather than changing it at all, which (in my opinion) is liable to discourage changes to any existing cmdlet's output, period, regardless of how much utility it may provide.\r\n\r\nFinally, as @iSazonov mentioned, the `Test-Connection` cmdlet was that was shipped in 6.x.x was always going to be subject to change, and should still be considered such. Yes, improvements have been made -- awesome! As Ilya noted, though, we're still effectively at the whim of the .NET Core team here on this one and the network APIs they're providing. Until those APIs are more complete, I don't think we should be assuming this cmdlet will always behave as is.\r\n\r\nFor these reasons, I think trying to cram all that data onto a _primitive_ as the output type is a bad idea. Now, perhaps the _default_ behaviour should still be to return a primitive to maintain compatibility for now (I'd recommend at **least** an experimental feature to opt-in to entirely new output here though) but when explicitly asking for additional results, it should switch to a different output type.\r\n\r\nAdding additional data **to a primitive** _in some cases_ is almost certainly guaranteed to end up being a huge pitfall in some case or another, and we really don't need to be confusing users here. \ud83d\ude42 ",
      "created_at": "2020-02-06T01:20:27Z",
      "updated_at": "2020-02-06T01:20:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I'd expect we explicitly document that the cmdlet is a subject to change and not production ready until .Net Core team fix the based API.",
      "created_at": "2020-02-06T10:07:25Z",
      "updated_at": "2020-02-06T10:07:25Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Marking a cmdlet as experimental is now our way of saying that it subject to change, but this does not fundamentally solve the question of if we should have a breaking change in this cmdlet.",
      "created_at": "2020-02-06T21:19:16Z",
      "updated_at": "2020-02-06T21:19:16Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Totally appreciate the response, @vexx32. I wasn't aware we had any issues like that, nor were those suggesting this proposal, I suspect. Would you mind linking through to any of those issues you know about off the top of your head? (If not, no worries, I can be not lazy and search for them too). \r\n\r\nThat being said, I'm not sure you've addressed the fact that PS7 is stuck with a Boolean return here for ~3 years, and that changing the behavior between 7.0 and 7.1 is very breaking....",
      "created_at": "2020-02-06T21:27:00Z",
      "updated_at": "2020-02-06T21:27:00Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Last I checked, PS7 isn't _technically_ released yet. \ud83d\ude09 \r\n\r\nI did a cursory search, but the only issues I can find at the moment are these two:\r\n- https://github.com/PowerShell/PowerShell/issues/11169\r\n- https://github.com/PowerShell/PowerShell/issues/11171\r\n\r\nI know I've seen others... but I'm probably not searching quite the right terms to get them at the moment. I'll have to think on it some more.\r\n\r\nMy thoughts are... thus:\r\n\r\n1. The current state of the cmdlet has always been in flux ever since the work to port it in 6.x. If this was ever planned to change... I don't think that was ever communicated.\r\n2. The APIs backing this cmdlet up are, not to put too fine a point on it, completely unfinished. Giving users the expectation that the cmdlet will be stable and usable on all platforms even most of the time is unrealistic, and we'll just end up with a slew of issues raised that we literally won't be able to solve unless we want to write .NET's networking APIs from scratch in a hotfix at some point and patch it in.\r\n3. _If_ the choice here is to leave the less usable behaviour here, I would probably advise we not go the route of adding noteproperties to Boolean values. Every complex type in PS current casts to `$true` if you do something like `if ($output) { ... }` -- these would be the only exception. It breaks the long-held assumption by many that if there's data in it, it's truthy. And the way we're framing this suggestion seems to indicate that there won't be a whole lot of indicators to clue users in until a script doesn't work as intended.\r\n    - Note also that it is by design impossible to change how any comparison / cast treats Boolean values directly. It's built into the engine as a number of explicit exceptions so that no amount of PSTypeConverters or meticulously-written Equals() overloads can change how casts and comparisons to Boolean behave, so users can't interact with this kind of output other than by checking PSTypeNames and property values directly.\r\n\r\nIf we _must_ keep the boolean output here, I think we're all far better off tucking these features away behind an experimental feature flag completely, so that users who _do_ want it can go ahead and use it, without having to worry about nonsensical behaviour when using the data much like any other cmdlets' output.\r\n\r\n(also, semi-related: it might be a better option at some point to move most / all of this cmdlet's functionality into one with a more appropriate verb name; `Get-ConnectionInfo` might be a decent-ish idea. Then we can confine the true/false output to this cmdlet, where it belongs with the `Test` verb.)",
      "created_at": "2020-02-07T01:00:47Z",
      "updated_at": "2020-02-07T01:02:20Z"
    },
    {
      "author": "jackdcasey",
      "author_association": "CONTRIBUTOR",
      "body": "Just wanted to make sure I'm in the loop. This is my first PR in this project, and I'm still learning the etiquette \ud83d\ude01\r\n\r\nEarlier it was mentioned there are a few modifications that can be made, to prevent this from being a breaking change. However, the recent conversation seems like we're steering a bit in the opposite direction. \r\n\r\nAre we looking to make the non-breaking changes? If so, I'd be happy to implement them. \r\n\r\nIf not, is there anything I might be able to do from my end to help out? \r\n\r\nThank you! \r\n\r\n",
      "created_at": "2020-02-21T05:07:56Z",
      "updated_at": "2020-02-21T05:07:56Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMainainer, Please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-05-27T02:02:11Z",
      "updated_at": "2020-05-27T02:02:11Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@jackdcasey I think the ask now is to make this an experimental feature.",
      "created_at": "2020-05-28T18:20:39Z",
      "updated_at": "2020-05-28T18:20:39Z"
    },
    {
      "author": "jackdcasey",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13 Thank you for the response!\r\n\r\nI'm not totally sure how to implement this as an experimental feature. I looked through the contribution guide and wasn't able to find much. Do you have any documentation to help get me pointed in the right direction? \r\n\r\nAny insight is greatly appreciated! \r\n\r\n",
      "created_at": "2020-06-01T05:55:09Z",
      "updated_at": "2020-06-01T05:55:09Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "This is the docs, also someone else can make a PR to your repo to help you.\r\nhttps://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_experimental_features?view=powershell-7#:~:text=The%20Experimental%20Features%20support%20in,to%20test%20and%20provide%20feedback.\n\n<blockquote><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_experimental_features\">About experimental features - PowerShell</a></strong></div></blockquote>",
      "created_at": "2020-06-02T18:48:03Z",
      "updated_at": "2020-06-02T18:48:05Z"
    },
    {
      "author": "jackdcasey",
      "author_association": "CONTRIBUTOR",
      "body": "@TravisEz13 Thank you for the documentation, I'll look into getting this implemented! ",
      "created_at": "2020-06-03T06:51:14Z",
      "updated_at": "2020-06-03T06:51:14Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMainainer, Please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-06-10T14:00:26Z",
      "updated_at": "2020-06-10T14:00:26Z"
    },
    {
      "author": "sdwheeler",
      "author_association": "COLLABORATOR",
      "body": "@PowerShell/powershell-committee I am concerned about the security aspects of this change. Using the `-Count` and `-Repeat` options on a TCP connection test could be considered a denial-of-service attack. Should this change have a security review?",
      "created_at": "2020-06-18T20:01:15Z",
      "updated_at": "2020-06-18T20:01:15Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "There are comments alluding to that concern also in the standard Ping test modes, which appear to have addressed the issue by adding deliberate sleeps between queries to limit the potential impact of any kind of DDoS. If something similar is put in place here that'd make sense, I think.",
      "created_at": "2020-06-18T20:39:01Z",
      "updated_at": "2020-06-18T20:39:01Z"
    },
    {
      "author": "sdwheeler",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 The difference between pings and TCP connections is that TCP connections continue to use system resources during the TIME_WAIT state after the connection is closed. So even if there is a throttle on how fast they are created, they will still exist for 4 minutes. See https://docs.microsoft.com/en-us/windows/client-management/troubleshoot-tcpip-port-exhaust\n\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/windows/client-management/troubleshoot-tcpip-port-exhaust\">Troubleshoot port exhaustion issues - Windows Client Management</a></strong></div><div>Learn how to troubleshoot port exhaustion issues.</div></blockquote>",
      "created_at": "2020-06-18T20:58:13Z",
      "updated_at": "2020-06-18T20:58:15Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "sending back to the committee for https://github.com/PowerShell/PowerShell/pull/11452#issuecomment-646302094",
      "created_at": "2020-06-18T21:22:32Z",
      "updated_at": "2020-06-18T21:22:32Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, we are concerned about a breaking change from 7.0 which is an LTS release.\r\n\r\nProposed parameter sets:\r\n\r\n```powershell\r\nTest-Connection -TCPPort <port>\r\nTest-Connection -TCPPort <port> -Detailed\r\nTest-Connection -TCPPort <port> -Count <count>\r\nTest-Connection -TCPPort <port> -Repeat\r\n```\r\n\r\nTherefore, `Test-Connection -TCPPort <port>` would continue to return a boolean and `-Detailed` must be specified to return an object.\r\n\r\n`-Count` and `-Repeat` are likely used interactively so returning objects is fine and can still be handled by automation.",
      "created_at": "2020-06-24T22:39:28Z",
      "updated_at": "2020-06-24T22:39:47Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-07-07T02:00:18Z",
      "updated_at": "2020-07-07T02:00:18Z"
    },
    {
      "author": "jackdcasey",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT Thank you for the update! \r\n\r\nI've made the changes to implement the parameter sets you've described. As mentioned, the default return with `-TCPPort` will be boolean, and will be an object if using `-Detailed`, `-Repeat`, and `-Count`. \r\n\r\nPlease let me know if these changes align with what's expected \ud83d\ude01",
      "created_at": "2020-07-09T06:55:32Z",
      "updated_at": "2020-07-09T06:55:32Z"
    },
    {
      "author": "jackdcasey",
      "author_association": "CONTRIBUTOR",
      "body": "Commenting to bump, is there anything else required to merge these changes? I'm very excited to move things forward! ",
      "created_at": "2020-09-10T18:55:12Z",
      "updated_at": "2020-09-10T18:55:12Z"
    },
    {
      "author": "pull-request-quantifier[bot]",
      "author_association": "NONE",
      "body": "### ![](https://img.shields.io/static/v1?label=Quantified&message=Medium&color=yellow)\r\n\r\nThis PR has `144` quantified lines of changes. In general, a change size of upto `200` lines is ideal for the best PR experience!\r\n\r\n------\r\n\r\n<details >\r\n    <summary display=\"inline\"> <strong>Quantification details</strong></summary>\r\n    <p />\r\n\r\n```\r\nLabel      : Medium\r\nSize       : +126 -18\r\nPercentile : 48.8%\r\n\r\nTotal files changed: 3\r\n\r\nChange summary by file extension:\r\n.cs : +98 -17\r\n.ps1 : +28 -1\r\n```\r\n> Change counts above are quantified counts, based on the [PullRequestQuantifier customizations](https://github.com/microsoft/PullRequestQuantifier/blob/main/docs/prquantifier-yaml.md).\r\n    \r\n</details>\r\n\r\n\r\n<details>\r\n    <summary display=\"inline\"> <strong>Why proper sizing of changes matters</strong> </summary>\r\n    <p/>\r\n    <p/>\r\n\r\nOptimal pull request sizes drive a better predictable PR flow as they strike a\r\nbalance between between PR complexity and PR review overhead. PRs within the\r\noptimal size (typical small, or medium sized PRs) mean:\r\n\r\n- Fast and predictable releases to production:\r\n  - Optimal size changes are more likely to be reviewed faster with fewer\r\niterations.\r\n  - Similarity in low PR complexity drives similar review times.\r\n- Review quality is likely higher as complexity is lower:\r\n  - Bugs are more likely to be detected.\r\n  - Code inconsistencies are more likely to be detetcted.\r\n- Knowledge sharing is improved within the participants:\r\n  - Small portions can be assimilated better.\r\n- Better engineering practices are exercised:\r\n  - Solving big problems by dividing them in well contained, smaller problems.\r\n  - Exercising separation of concerns within the code changes.\r\n\r\n#### What can I do to optimize my changes\r\n\r\n- Use the PullRequestQuantifier to quantify your PR accurately\r\n  - Create a context profile for your repo using the [context generator](https://github.com/microsoft/PullRequestQuantifier/releases)\r\n  - Exclude files that are not necessary to be reviewed or do not increase the review complexity. Example: Autogenerated code, docs, project IDE setting files, binaries, etc. Check out the `Excluded` section from your `prquantifier.yaml` context profile. \r\n  - Understand your typical change complexity, drive towards the desired complexity by adjusting the label mapping in your `prquantifier.yaml` context profile.\r\n  - Only use the labels that matter to you, [see context specification](./docs/prquantifier-yaml.md) to customize your `prquantifier.yaml` context profile.\r\n- Change your engineering behaviors\r\n  - For PRs that fall outside of the desired spectrum, review the details and check if:\r\n    - Your PR could be split in smaller, self-contained PRs instead\r\n    - Your PR only solves one particular issue. (For example, don't refactor and code new features in the same PR).\r\n\r\n#### How to interpret the change counts in git diff output\r\n\r\n- One line was added: `+1 -0`\r\n- One line was deleted: `+0 -1`\r\n- One line was modified: `+1 -1` (git diff doesn't know about modified, it will\r\ninterpret that line like one addition plus one deletion)\r\n- Change percentiles: Change characteristics (addition, deletion, modification)\r\nof this PR in relation to all other PRs within the repository.\r\n\r\n</details>\r\n\r\n<p />\r\n\r\n------\r\n\r\nWas this comment helpful? <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiamFja2RjYXNleSIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xMTQ1MiIsIkV2ZW50VHlwZSI6IlRodW1ic1VwIn0=&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs up\"><strong>:thumbsup:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiamFja2RjYXNleSIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xMTQ1MiIsIkV2ZW50VHlwZSI6Ik5ldXRyYWwifQ==&amp;anonymous=True\" target=\"_blank\" title=\"Neutral\"><strong>&nbsp;:ok_hand:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiamFja2RjYXNleSIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xMTQ1MiIsIkV2ZW50VHlwZSI6IlRodW1ic0Rvd24ifQ==&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs down\"><strong>&nbsp;:thumbsdown:</strong></a> (<a href=\"MAILTO:prquantifier@microsoft.com\" title=\"Mail to prquantifier@microsoft.com\">Email</a>)\r\n[Customize PullRequestQuantifier](https://github.com/PowerShell/PowerShell/blob/master/.github/prquantifier.yaml) for this repository.\r\n\r\n",
      "created_at": "2022-05-12T20:54:48Z",
      "updated_at": "2022-05-12T20:54:48Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "/azp run PowerShell-CI-windows",
      "created_at": "2022-05-13T22:54:53Z",
      "updated_at": "2022-05-13T22:54:53Z"
    },
    {
      "author": "azure-pipelines[bot]",
      "author_association": "NONE",
      "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
      "created_at": "2022-05-13T22:55:04Z",
      "updated_at": "2022-05-13T22:55:04Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2022-05-21T02:00:43Z",
      "updated_at": "2022-05-21T02:00:43Z"
    }
  ],
  "created_at": "2019-12-29T09:34:19Z",
  "number": 11452,
  "state": "open",
  "title": "Test-Connection: Increase output detail when performing a tcp test",
  "updated_at": "2022-05-21T02:00:43Z"
}