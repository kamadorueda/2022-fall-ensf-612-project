{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5609",
  "author": "javaptgl",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://github.com/PowerShell/PowerShell/blob/master/docs/KNOWNISSUES.md).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\nCall Invoke-RestMethod more than 1 million times.\r\n```powershell\r\ntry\r\n{\r\n    $reader = New-Object System.IO.StreamReader(\"input.csv\") # 5,000,000 Lines\r\n    $writer = New-Object System.IO.StreamWriter(\"output.csv\"), ([System.IO.FileMode]::Append)\r\n    for($count = 0;;$count++)\r\n    {\r\n        $line = $reader.ReadLine()\r\n        if($line -eq $null) { break }\r\n        $data = $line.Split(\",\")\r\n        $input_variable = $data[0]\r\n        \r\n        $result = Invoke-RestMethod -Uri http://localhost:5000/api/compute_something/$input_variable # Result of api is an integer number.\r\n        if($result -gt 0)\r\n        { $writer.WriteLine($line + \",$result\") }\r\n    }         \r\n}\r\nfinally\r\n{\r\n    $reader.Close()\r\n    $writer.Close()\r\n}\r\n\r\n```\r\n\r\n\r\nExpected behavior\r\n-----------------\r\nMinimum memory usage.\r\n\r\nActual behavior\r\n---------------\r\nHigh memory usage. Uses 900MB-1GB for a 5 million line file.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value                                                                                                                        \r\n----                           -----                                                                                                                        \r\nPSVersion                      6.0.0-rc                                                                                                                     \r\nPSEdition                      Core                                                                                                                         \r\nGitCommitId                    v6.0.0-rc                                                                                                                    \r\nOS                             Darwin 16.7.0 Darwin Kernel Version 16.7.0: Thu Jun 15 17:36:27 PDT 2017; root:xnu-3789.70.16~2/RELEASE_X86_64               \r\nPlatform                       Unix                                                                                                                         \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                                                      \r\nPSRemotingProtocolVersion      2.3                                                                                                                          \r\nSerializationVersion           1.1.0.1                                                                                                                      \r\nWSManStackVersion              3.0  \r\n```\r\n",
  "closed_at": "2017-12-11T14:11:43Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Is the problem only on MacOS?",
      "created_at": "2017-12-02T19:13:33Z",
      "updated_at": "2017-12-02T19:13:33Z"
    },
    {
      "author": "javaptgl",
      "author_association": "NONE",
      "body": "I'll check it on windows 8 and post the results here in a day,",
      "created_at": "2017-12-03T05:05:55Z",
      "updated_at": "2017-12-03T05:05:55Z"
    },
    {
      "author": "javaptgl",
      "author_association": "NONE",
      "body": "No issue on Windows 8. Average Memory Usage Was 40MB\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-rc\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-rc\r\nOS                             Microsoft Windows 6.3.9600\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
      "created_at": "2017-12-03T14:29:59Z",
      "updated_at": "2017-12-03T14:29:59Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Does the problem reproduce for something simpler? Like maybe this:\r\n\r\n```powershell\r\n$Url = \"http://localhost:5000/api/compute_something/1\"\r\n1..5000000 | ForEach-Object { \r\n    $result = Invoke-RestMethod -uri $Uri\r\n}\r\n```\r\n\r\nWhere you use the same URI every time and aren't trying to do any other logic. I would need something I can actually do myself to look into it. ",
      "created_at": "2017-12-03T14:39:44Z",
      "updated_at": "2017-12-03T14:39:44Z"
    },
    {
      "author": "javaptgl",
      "author_association": "NONE",
      "body": "Yes. The issue can be reproduced for something simple as:\r\n```powershell\r\nfor($count = 1;$count -le 5000000;$count++)\r\n{\r\n    $result=Invoke-RestMethod -Uri http://localhost:5001/api\r\n}  \r\n```\r\n\r\nWeb server in express.js\r\n```javascript\r\nconst express = require('express')\r\nconst app = express()\r\n\r\napp.get('/api', function (req, res)\r\n{ \r\n    res.send('0')\r\n})\r\n\r\napp.listen(5001, function ()\r\n{\r\n    console.log('Example app listening on port 5001')\r\n})\r\n```",
      "created_at": "2017-12-05T06:02:03Z",
      "updated_at": "2017-12-05T06:02:03Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I'm not familiar with express.js. What character encoding and contet-type does it return for that? Does it do any content encoding (gzip, deflate, chunked?).\r\n\r\nI'm testing with an ASP.NET Core 2.0 API app and memory usage is not rising fast enough to hit 1G. after about 30 minutes it's only at 150M. It could be that the encoding and content-type are different though which would make it hi different .NET APIs.",
      "created_at": "2017-12-05T11:31:41Z",
      "updated_at": "2017-12-05T11:31:41Z"
    },
    {
      "author": "javaptgl",
      "author_association": "NONE",
      "body": "Response Header\r\nX-Powered-By: Express\r\nContent-Type: text/html; charset=utf-8\r\nContent-Length: 1\r\n\r\nMemory usage 100-250MB after 1 Million Calls and hits 1GB after 4 Million Calls.\r\nIssue does not exist for windows 8 but exists on MacOS. Don't know about linux.\r\n\r\n\r\n\r\n",
      "created_at": "2017-12-05T12:28:46Z",
      "updated_at": "2017-12-05T12:28:46Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@javaptgl thanks. I will set my test environment to match and test to the full 5 million requests when I can get back to my macOS system. In the meantime, can you see if the same thing happens with \r\n\r\n```powershell\r\n$null = Invoke-RestMethod -Uri http://localhost:5001/api\r\n```\r\n\r\nI'm trying to narrow down where the issue is exactly and trying to eliminate as many as many variables as possible.\r\n\r\nAs another thing to try... This emulates the calls made under the hood skipping the JSON and XML conversion attempts and going straight to the string fallback:\r\n\r\n```powershell\r\n$Handler = [System.Net.Http.HttpClientHandler]::New()\r\n$HttpClient = [System.Net.Http.HttpClient]::New($Handler)\r\n$Response = $HttpClient.GetAsync('http://localhost:5001/api').GetAwaiter().GetResult()\r\n$Stream = $Response.Content.ReadAsStreamAsync().GetAwaiter().GetResult()\r\n$reader = [System.IO.StreamReader]::new($Stream)\r\n$result = $reader.ReadToEnd()\r\n$reader.Dispose()\r\n```\r\n\r\nIf memory usage there is normal, that will point us to something in the JSON and XML conversion process.",
      "created_at": "2017-12-05T12:49:44Z",
      "updated_at": "2017-12-05T12:49:44Z"
    },
    {
      "author": "javaptgl",
      "author_association": "NONE",
      "body": "I ran the above two snippets simultaneously in separate processes for 2 hours.\r\nThe results were similar. 280MB and 300MB usage.\r\n\r\n",
      "created_at": "2017-12-05T15:59:54Z",
      "updated_at": "2017-12-05T15:59:54Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "hmm but not the 1GB you were seeing with `$result=Invoke-RestMethod -Uri http://localhost:5001/api`?",
      "created_at": "2017-12-05T17:23:37Z",
      "updated_at": "2017-12-05T17:23:37Z"
    },
    {
      "author": "javaptgl",
      "author_association": "NONE",
      "body": "API calls on powershell are really slow. About 130/s. It'll take more than 10hrs unless I use some kind of concurrency like background jobs.\r\n",
      "created_at": "2017-12-05T17:58:22Z",
      "updated_at": "2017-12-05T17:58:22Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "ok. So we need to go with a lower number than 5,000,000 so we can check across versions and platforms and not take an eternity then.\r\n\r\nWas the 280MBB-300MB usage after 2 hours with the to the consumption in the first to hours of the 5,000,000 run? was it more? was it less?",
      "created_at": "2017-12-05T18:33:50Z",
      "updated_at": "2017-12-05T18:33:50Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "after testing this in windows and WSL I can see that mac definitely has higher memory usage. If your test with the `HttpClient` was that high, than I'm afraid this is likely a .NET issue. I will have to work up a C# reproduction of the issue to confirm.",
      "created_at": "2017-12-05T21:09:07Z",
      "updated_at": "2017-12-05T21:09:36Z"
    },
    {
      "author": "javaptgl",
      "author_association": "NONE",
      "body": "Both snippets finished with memory usage of around 900MB each. The memory wasn't released until I quit the powershell processes. ",
      "created_at": "2017-12-06T02:32:49Z",
      "updated_at": "2017-12-06T02:32:49Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@javaptgl I'm still gathering data to try and track down where this is happening, but here are some observations so far.\r\n\r\n* The raw C# .NET HttpClient calls do not grow in memory size\r\n* running `pwsh -noni -nop -file` seems to only have negligible memory growth.\r\n* adding a call to `[Microsoft.PowerShell.Commands.JsonObject]::ConvertFromJson($result,[ref]$null)` in the `[System.Net.Http.HttpClient]` example appears to grow at the same rate as `$result=Invoke-RestMethod`\r\n* adding a call to [System.GC]::Collect() in every loop appears to keep the memory growth in check, but comes at the cost of increasing the runtime by 8 or 9 times.\r\n\r\nThese are the scripts I'm working with https://gist.github.com/markekraus/b16f0991a843d2d2459aa4178dfe55b5",
      "created_at": "2017-12-06T09:25:29Z",
      "updated_at": "2017-12-06T09:27:30Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@javaptgl how are you measuring memory usage on macOS? can you provide some output? I want to make sure we are not chasing a ghost by looking at the wrong numbers. My tests indicate that beetween 10,000 and 500,000 iterations there is no significant increase in resident memory. some methods use more than others, but between iterations it is fairly static per method. For example:\r\n\r\n\r\n| Iterations | Invoke-RestMethod | HttpClient  | dotnet |\r\n| ---------- | ----------------- | ----------- | ------ |\r\n| 10,000     | 79.20             | 62.30       | 52.3   |\r\n| 100,000    | 79.15             | 63.10       | 52.4   |\r\n| 500,000    | 79.35             | 62.40       | 52.2   |",
      "created_at": "2017-12-06T13:23:46Z",
      "updated_at": "2017-12-06T13:23:46Z"
    },
    {
      "author": "javaptgl",
      "author_association": "NONE",
      "body": "I'm using the MacOS activity monitor (Equivalent of Windows Task Manager) to check the usage. \r\nI'll provide the screenshot here in a day.",
      "created_at": "2017-12-06T16:07:54Z",
      "updated_at": "2017-12-06T16:14:59Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You could use https://github.com/dotnet/coreclr/blob/027180d8ef4a8a0e50f4cba3ad985af38882f5ef/Documentation/coding-guidelines/cross-platform-performance-and-eventing.md",
      "created_at": "2017-12-06T18:01:14Z",
      "updated_at": "2017-12-06T18:01:14Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "After learning that macOS has an \"internal memory size\" metric which doesn't map to anything in Windows or Linux, and figuring out how to reliably get the actual memory usage of `pwsh` in macOS, I'm satisfied that there is no memory leak here. \r\n\r\nThe \"internal memory size\" of the process grows over time up to 1GB, however, the actual resident memory and virtual memory of the process do not grow past a certain peak. On my macOS at both 500,000 and 1,000,000 iterations of `$result = Invoke-RestMethod -uri $Uri` (with `$uri` is the uri of the express.js microservice), the actual usage never goes beyond ~80MB. There is no significant difference between 10,000 iterations, 100,000 iterations, 500,000 iterations, or 1,000,000 iterations. This memory usage is consistent with the same test in Windows, WSL ubuntu, and ubuntu server with a margin of about +/-2MB between all of them\r\n\r\n@javaptgl either I'm not able to reproduce your problem, or, perhaps you are looking at this \"internal memory size\" that macOS reports (as I was when initially trying to reproduce the issue). In `top` this is the `MEM` column. If that is the case, I do not believe this to be a reliably accurate view of the process's memory usage. instead use `ps` or `htop` to get the RSS/RES and VIRT/VSZ values.",
      "created_at": "2017-12-06T22:27:29Z",
      "updated_at": "2017-12-06T22:28:59Z"
    },
    {
      "author": "javaptgl",
      "author_association": "NONE",
      "body": "This was taken at 3,670,000th call. Activity Monitor \"Memory\" column reported 860MB Usage.\r\n```\r\nApple:~ air$ ps v\r\nPID STAT      TIME  SL  RE PAGEIN      VSZ    RSS   LIM     TSIZ  %CPU %MEM COMMAND\r\n9170 S+   232:10.61   0   0      0  5758660 154564     -        0   8.4  3.7 pwsh irm_test.ps1\r\n9695 S      0:00.17   0   0      0  2461044    984     -        0   0.4  0.0 -bash\r\n3504 S      0:00.10   0   0      0  2461044    504     -        0   0.0  0.0 -bash\r\n1108 S      0:00.07   0   0      0  2461044    428     -        0   0.0  0.0 -bash\r\n```\r\nDo you have a reference link to the \"internal memory size\" metric used in MacOS?\r\n\r\nI posted this issue because I have run other powershell scripts(such as sql access and log parsing) for days and none have crossed 100MB Memory as reported by the activity monitor.\r\n\r\nI'm going to post the screenshot  of the activity monitor window after completing 10 million calls.",
      "created_at": "2017-12-07T13:01:54Z",
      "updated_at": "2017-12-07T13:01:54Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@javaptgl ok so your `ps` is showing the RSS and VSZ are way higher than mine ever get. At 2 million I was still at ~80MB \r\ncan you run your test with `pwsh -nop -file irm_test.ps1` to eliminate any potential profile issues?\r\n\r\nAlso, what version of macOS are you on? My test machine is at 10.13.1\r\nWhich install method did you use (brew, pkg, or Start-PSBuild)?\r\nCan you please also run the code from this and post the results? https://github.com/markekraus/PowerShell/blob/TestMacosFails/test/powershell/Libcurl.Tests.ps1\r\n\r\n> Do you have a reference link to the \"internal memory size\" metric used in MacOS? \r\n\r\nhttps://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/top.1.html\r\n\r\nThe description for `MEM` column. then just googling around to try and find out what that is and coming across people trying and failing to compare it to metrics in linux and windows. However, that's not a concern now. Your RSS and VSZ are what I was suing to test with myself and yours are way higher than mine.\r\n\r\n",
      "created_at": "2017-12-07T13:51:04Z",
      "updated_at": "2017-12-07T13:51:04Z"
    },
    {
      "author": "javaptgl",
      "author_association": "NONE",
      "body": "I'm using MacOS Sierra, Version 10.12.6\r\n\r\n> Which install method did you use (brew, pkg, or Start-PSBuild)?\r\n\r\nA month ago I installed Powershell v6.0.0-beta.7 for the first time on my mac using the mac pkg and found this issue. A week ago I uninstalled this and installed the v6.0.0-rc using homebrew cask.\r\n\r\n> Can you please also run the code from this and post the results? https://github.com/markekraus/PowerShell/blob/TestMacosFails/test/powershell/Libcurl.Tests.ps1\r\n```\r\nLIBCURl=====================================================\r\nLIBCURL GetSslVersionDescription(): SecureTransport\r\nLIBCURL GetSupportedFeatures(): CURL_VERSION_IPV6, CURL_VERSION_SSL, CURL_VERSION_LIBZ, CURL_VERSION_NTLM, CURL_VERSION_ASYNCHDNS, CURL_VERSION_SPNEGO, CURL_VERSION_LARGEFILE, CURL_VERSION_NTLM_WB, CURL_VERSION_GSSAPI, CURL_VERSION_KERBEROS5, CURL_VERSION_UNIX_SOCKETS\r\nLIBCURL GetSupportsHttp2Multiplexing(): False\r\nLIBCURL GetVersionDescription(): 7.54.0\r\nLIBCURl=====================================================\r\n```\r\n\r\n> can you run your test with pwsh -nop -file irm_test.ps1 to eliminate any potential profile issues?\r\n\r\nJust started with the script now.\r\n\r\n",
      "created_at": "2017-12-08T06:38:51Z",
      "updated_at": "2017-12-08T06:38:51Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@javaptgl thank you!\r\n\r\ncan you please also do a test with the following:\r\n\r\n```bash\r\nbrew install openssl\r\nbrew install curl --with-openssl --with-gssapi\r\nexport DYLD_LIBRARY_PATH=/usr/local/opt/curl/lib:/usr/local/opt/openssl/lib:${DYLD_LIBRARY_PATH};\r\npwsh irm_test.ps1\r\n```\r\n\r\nI have recently seen some issues with 10.12.6's system supplied 7.54.0 libcurl, which is what your pwsh appears to be using based on the output. This forces pwsh to use the libcurl+openssl+gssapi installed by brew.",
      "created_at": "2017-12-08T09:24:51Z",
      "updated_at": "2017-12-08T09:24:51Z"
    },
    {
      "author": "javaptgl",
      "author_association": "NONE",
      "body": "```\r\nLIBCURl=====================================================\r\nLIBCURL GetSslVersionDescription(): OpenSSL/1.0.2n\r\nLIBCURL GetSupportedFeatures(): 3064733\r\nLIBCURL GetSupportsHttp2Multiplexing(): False\r\nLIBCURL GetVersionDescription(): 7.57.0\r\nLIBCURl=====================================================\r\n```\r\n\r\nAfter 6,860,000 calls:\r\n```\r\nApple:~ air$ ps v\r\n  PID STAT      TIME  SL  RE PAGEIN      VSZ    RSS   LIM     TSIZ  %CPU %MEM COMMAND\r\n11740 R+   436:07.64   0   0      0  6360868  27564     -        0   6.4  0.7 pwsh -nop -file irm_test.ps1\r\n34581 S+     0:00.10   0   0      0  2461044   3244     -        0   0.0  0.1 -bash\r\n```\r\n\r\n![activity_monitor_mem_use](https://user-images.githubusercontent.com/20641653/33796622-86e61142-dd1e-11e7-99c9-179ae726c296.png)\r\n",
      "created_at": "2017-12-09T14:52:46Z",
      "updated_at": "2017-12-09T14:52:46Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Here is mine after 6,000,0000.\r\n\r\n![2017-12-09-macoutput](https://user-images.githubusercontent.com/6509955/33799807-ac449402-dcf8-11e7-8cbf-3926992d6310.png)\r\n\r\nI'm not sure. it could be something in your environment that is different than mine. You are basically seeing the same memory increase over time no matter what method we've tried too. So I'm not even sure where to look. If you would be willing to install the .NET Core 2.0.2 SDK (https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.2-sdk-download.md) and then run\r\n\r\n```bash\r\nmkdir MemLeakRepro\r\ncd MemLeakRepro\r\ndotnet new console\r\n```\r\n\r\nThen replace the contents of `Program.cs` with this https://gist.github.com/markekraus/b16f0991a843d2d2459aa4178dfe55b5#file-program-cs\r\nthen run\r\n\r\n```bash\r\ndotnet restore\r\ndotnet run http://localhost:5001/api 6000000\r\n```\r\n\r\nand watch the memory usage. that will eliminate anything to do with PowerShell.\r\n\r\nAlso, just to be sure, you're not outputting anything to the console in these tests, right? Output to the console could skew the results.",
      "created_at": "2017-12-09T22:19:38Z",
      "updated_at": "2017-12-09T22:19:38Z"
    },
    {
      "author": "javaptgl",
      "author_association": "NONE",
      "body": "```\r\nApple:MemLeakRepro air$ dotnet run http://localhost:5001/api 6000000\r\nStart: 12/10/2017 09:23:05\r\nEnd: 12/11/2017 01:11:15\r\nRun: 15:48:10.0077740\r\nMemory: 491.00 mb\r\nPress any key to exit...\r\nApple:MemLeakRepro air$\r\n```\r\n\r\n![memleakrepro](https://user-images.githubusercontent.com/20641653/33817860-cde3f8ee-de67-11e7-90d9-0bb0066cd29c.png)\r\n",
      "created_at": "2017-12-11T06:09:15Z",
      "updated_at": "2017-12-11T06:09:15Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@javaptgl Thanks! This makes it clear to me that the problem is not with PowerShell or the web cmdlets. You see the same behavior with a simple .NET app. That leads me to believe there is an issue with either .NET Core or your environment. I recommend taking this simple program and opening an issue on [dotnet/corefx](https://github.com/dotnet/corefx/issues/). There is no reason for that program to balloon like that. On my 10.13.1 mac it never gets above 55mb.",
      "created_at": "2017-12-11T09:52:11Z",
      "updated_at": "2017-12-11T09:52:11Z"
    },
    {
      "author": "javaptgl",
      "author_association": "NONE",
      "body": "Thank you. I'll be linking this issue to the dotnet/corefx repo.",
      "created_at": "2017-12-11T12:38:43Z",
      "updated_at": "2017-12-11T12:38:43Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@javaptgl You're welcome! Since we have determined the problem is outside of PowerShell I'm closing this issue. We can always reopen it later if the situation changes.",
      "created_at": "2017-12-11T14:11:38Z",
      "updated_at": "2017-12-11T14:11:38Z"
    },
    {
      "author": "benaadams",
      "author_association": "NONE",
      "body": "The [`HttpResponseMessage`](https://github.com/PowerShell/PowerShell/blob/f5f3fab1ea8a51dd2e5d34e0e580ab39176eb696/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/CoreCLR/WebRequestPSCmdlet.CoreClr.cs#L546) in `WebRequestPSCmdlet.ProcessRecord` should be disposed?",
      "created_at": "2017-12-11T14:36:39Z",
      "updated_at": "2017-12-11T14:36:39Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@benaadams my understanding is that `reader.Dispose()` disposes the reader, the content stream, and the HttpResponseMessage. ",
      "created_at": "2017-12-11T14:44:15Z",
      "updated_at": "2017-12-11T14:44:15Z"
    },
    {
      "author": "benaadams",
      "author_association": "NONE",
      "body": "The [Stream returned from `GetResponseStream`](https://github.com/PowerShell/PowerShell/blob/f5f3fab1ea8a51dd2e5d34e0e580ab39176eb696/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/CoreCLR/WebRequestPSCmdlet.CoreClr.cs#L565) via [`response.Content.ReadAsStreamAsync()`](https://github.com/PowerShell/PowerShell/blob/f5f3fab1ea8a51dd2e5d34e0e580ab39176eb696/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/StreamHelper.cs#L479) doesn't look like it necessarily has a link to the Content or Message e.g. [it can just be a MemoryStream over an array](https://github.com/dotnet/corefx/blob/master/src/System.Net.Http/src/System/Net/Http/HttpContent.cs#L280-L286)",
      "created_at": "2017-12-11T14:58:38Z",
      "updated_at": "2017-12-11T14:59:08Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "https://github.com/dotnet/corefx/blob/6b5ef121ebea45b14f489a177e2e3f27fce86781/src/System.Net.Http/src/System/Net/Http/HttpResponseMessage.cs#L203\r\n\r\n`HttpResponseMessage.Dspose()` calls `Dispose()` on `HttpResponseMessage.Content` which gets called when `reader.Dispose()` is called because it is the stream from `HttpResponseMessage.Content`.",
      "created_at": "2017-12-11T15:23:04Z",
      "updated_at": "2017-12-11T15:23:48Z"
    },
    {
      "author": "benaadams",
      "author_association": "NONE",
      "body": "The stream returned from `HttpResponseMessage.Content` is usually either a `LimitMemoryStream` or a `MemoryStream` and has no reference to anything else, so Disposing it doesn't Dispose the classes that create it (e.g. `HttpContent` or `HttpResponseMessage`) and only disposes the stream.",
      "created_at": "2017-12-11T16:10:40Z",
      "updated_at": "2017-12-11T16:10:40Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "`HttpResponseMessage.Dspose()` Calls `HttpContent.Dispose()` Which calls `HttpContent.Dispose(bool disposing)` which checks if the content stream has been created, then calls dispose on the content stream. Every thing points to  `HttpResponseMessage.Dspose()` being no different than calling `reader.Dispose()` which disposes the exact same stream.",
      "created_at": "2017-12-11T16:39:07Z",
      "updated_at": "2017-12-11T16:41:18Z"
    }
  ],
  "created_at": "2017-12-02T12:59:12Z",
  "labels": [
    "WG-Engine-Performance",
    "Resolution-External",
    "WG-Cmdlets-Utility"
  ],
  "number": 5609,
  "state": "closed",
  "title": "Invoke-RestMethod High Memory Usage",
  "updated_at": "2017-12-11T16:41:18Z"
}