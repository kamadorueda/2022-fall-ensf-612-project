{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14972",
  "author": "andybirenzi",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\n## Steps to reproduce\r\n\r\n```\r\nImport-Module ExchangeOnlineManagement; \r\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList $username, $secureStringPwd\r\n\r\nConnect-ExchangeOnline -Credential $creds\r\n\r\n```\r\n\r\n## Expected behavior\r\n\r\n```\r\nI'm running Powershell on MacOS and it works fine there. But when I deploy it on AWS Lambda, I'm getting below error:\r\n\r\n```\r\n\r\n## Actual behavior\r\nERROR:\r\n\r\n```\"errorType\": \"PSRemotingTransportException\",\r\n  \"errorMessage\": \"This parameter set requires WSMan, and no supported WSMan client library was found. WSMan is either not installed or unavailable for this system.\",\r\n  \"stackTrace\": [\r\n    \"at Amazon.Lambda.PowerShellHost.PowerShellFunctionHost.ExecuteFunction(Stream inputStream, ILambdaContext context)\",\r\n    \"at lambda_method(Closure , Stream , Stream , LambdaContextInternal )\"\r\n  ],\r\n  \"cause\": {\r\n    \"errorType\": \"DllNotFoundException\",\r\n    \"errorMessage\": \"Unable to load shared library 'libpsrpclient' or one of its dependencies. In order to help diagnose loading problems, consider setting the LD_DEBUG environment variable: liblibpsrpclient: cannot open shared object file: No such file or directory\",\r\n    \"stackTrace\": [\r\n      \"at System.Management.Automation.Remoting.Client.WSManNativeApi.WSManInitialize(Int32 flags, IntPtr& wsManAPIHandle)\",\r\n      \"at System.Management.Automation.Remoting.Client.WSManClientSessionTransportManager.WSManAPIDataCommon..ctor()\"\r\n    ]\r\n  }\r\n```\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```Name                           Value\r\n----                           -----\r\nPSVersion                      7.1.2\r\nPSEdition                      Core\r\nGitCommitId                    7.1.2\r\nOS                             Darwin 18.7.0 Darwin Kernel Version 18.7.0: Thu Jun 20 18:42:21 PDT 2019; root:xnu-4903.270.47~4/RELEASE_\u2026\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```\r\n",
  "closed_at": "2021-03-19T00:00:05Z",
  "comments": [
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Based on the `$PSVersionTable` this is running on a macOS host which is surprising to me as I didn't know you could do that with AWS Lambda (I know very little about it really). The `mi` library shipped with PowerShell on macOS has it's own unique problems compared to the Linux distributions. It is dynamically linked to OpenSSL 1.0.x at `/usr/local/opt/openssl/lib/libssl.1.0.0.dylib` and `/usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib`. To get the builtin version running on macOS you need to install a copy of OpenSSL 1.0.x (1.1.x won't work) and make sure those dylibs are in those locations. If you can run this on a Linux host it will be easier to set up as some distros still package that OpenSSL version and it should just work out of the box.\r\n\r\nThe alternative is to use a fork of `mi` and `psrpclient` that I maintain https://github.com/jborean93/omi. This fixes a few problems with the builtin copy of `mi` in particular for this use case\r\n\r\n* Links to OpenSSL 1.1.x\r\n  * Uses newer and stronger cryptographic features not available in 1.0.0x\r\n  * Easier to install on hosts like macOS where OpenSSL 1.0.x is no longer available in the default repositories\r\n  * Still supported and continues to have security fixes released by OpenSSL\r\n* Enables HTTPS certificate verification\r\n  * Version included by PowerShell does not validate the CA or CN of the HTTPS endpoint\r\n* Increases the password length to support larger JWT tokens\r\n  * This is important for modern auth as I've encountered tokens that exceed the arbitrary password limit set in the builtin `mi` library shipped by PowerShell\r\n\r\nI am in no way affiliated with Microsoft or the PowerShell team so there is no support guaranteed if things go wrong. I try my best to help people who post issues on my forked repo but I can't gurantee a turnaround time or that I will fix the problem. If you wish to use this fork you will have to install it like this (run as root)\r\n\r\n```powershell\r\nInstall-Module -Name PSWSMan -Scope AllUsers\r\nInstall-WSMan\r\n```\r\n\r\nOnce installed you can close and reopen PowerShell for the new library to be in place and picked up by PowerShell.\n\n<blockquote><img src=\"https://avatars.githubusercontent.com/u/8462645?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/jborean93/omi\">jborean93/omi</a></strong></div><div>Open Management Infrastructure. Contribute to jborean93/omi development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2021-03-08T22:40:21Z",
      "updated_at": "2021-03-08T22:40:23Z"
    },
    {
      "author": "andybirenzi",
      "author_association": "NONE",
      "body": "Thank you for responding to this. The environment data shared above was from my MacOS environment, where the powershell ExchangeOnline connection is working fine, with no issues at this point. The problem is when I deploy the same function in Lambda, that's when I get the following error:  \"errorMessage\": \"This parameter set requires WSMan, and no supported WSMan client library was found. WSMan is either not installed or unavailable for this system.\",\r\n  \"stackTrace\": [\r\n    \"at Amazon.Lambda.PowerShellHost.PowerShellFunctionHost.ExecuteFunction(Stream inputStream, ILambdaContext context)\",\r\n    \"at lambda_method(Closure , Stream , Stream , LambdaContextInternal )\"\r\n  ],\r\n  \"cause\": {\r\n    \"errorType\": \"DllNotFoundException\",\r\n    \"errorMessage\": \"Unable to load shared library 'libpsrpclient' or one of its dependencies. In order to help diagnose loading problems, consider setting the LD_DEBUG environment variable: liblibpsrpclient: cannot open shared object file: No such file or directory\",\r\n    \"stackTrace\": [\r\n      \"at System.Management.Automation.Remoting.Client.WSManNativeApi.WSManInitialize(Int32 flags, IntPtr& wsManAPIHandle)\",\r\n      \"at System.Management.Automation.Remoting.Client.WSManClientSessionTransportManager.WSManAPIDataCommon..ctor()\"\r\n    ]\r\n  }\r\n\r\n\r\nI will try installing these two modules and see how this works. \r\nInstall-Module -Name PSWSMan -Scope AllUsers\r\nInstall-WSMan\r\n\r\nThank you so much for taking the time to respond to this",
      "created_at": "2021-03-09T15:41:36Z",
      "updated_at": "2021-03-09T15:41:36Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2021-03-19T00:00:04Z",
      "updated_at": "2021-03-19T00:00:04Z"
    }
  ],
  "created_at": "2021-03-08T20:46:21Z",
  "number": 14972,
  "state": "closed",
  "title": "Powershell on AWS Lambda running failing with following error: Unable to load shared library 'libpsrpclient' or one of its dependencies",
  "updated_at": "2021-03-19T00:00:05Z"
}