{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12997",
  "author": "nickwesselman",
  "body": "I know why this is happening given how #11057 was implemented. Is there any sort of workaround, other than explicitly resetting the PSModulePath in the Windows Powershell script?\r\n\r\n## Steps to reproduce\r\n\r\n1. Set up invocation of powershell.exe in some sort of non-PS tool. In my case, a post-action on a `dotnet new` template.\r\n\r\n```\r\n    {\r\n      \"actionId\": \"3A7C4B45-1F5D-4A30-959A-51B88E82B5D2\",\r\n      \"args\": {\r\n        \"executable\": \"powershell\",\r\n        \"args\": \"-File init.ps1 \"\r\n      },\r\n      \"manualInstructions\": [{\r\n         \"text\": \"Run 'init.ps1'\"\r\n      }],\r\n      \"continueOnError\": false,\r\n      \"description \": \"Initializes something.\"\r\n    }\r\n```\r\n1. Invoke the above from pwsh.\r\n\r\n## Expected behavior\r\n\r\npowershell.exe has correct PSModulePath.\r\n\r\n## Actual behavior\r\n\r\npowershell.exe still has PS7 values in PSModulePath.\r\n\r\n```none\r\nC:\\path\\to\\init.ps1 : C:\\Users\\nwe\\Documents\\PowerShell\\Modules;C:\\Program Files\\PowerShell\\Modules;c:\\program\r\nfiles\\powershell\\7\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules;C:\\Program Files (x86)\\Microsoft SQL\r\nServer\\140\\Tools\\PowerShell\\Modules\\\r\n```\r\n\r\n## Environment data\r\n\r\n```none\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.2\r\nPSEdition                      Core\r\nGitCommitId                    7.0.2\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@nickwesselman When you directly invoke `powershell` from `pwsh`, PS 7 has special logic to detect that you are about to launch Windows PowerShell and thus it strips off the PS 7 specific module paths from the environment variable when starting the `powershell` process. But in your case, it's not PS 7 that starts `powershell`, but `dotnet.exe`. `dontet.exe` inherits the environment variables and so did `powershell` when it starts.\r\n\r\nWe can potentially always strip off the PS 7 specific module paths when starting a native executable, but it may cause a similar issue where people expect the PS 7 module paths to be there but not ... /cc @SteveL-MSFT @joeyaiello ",
      "created_at": "2020-07-10T18:05:38Z",
      "updated_at": "2020-07-10T18:05:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I still don't understand why we need to use this variable as an external exclusive storage. Ideally, we would always use it as a source for additional custom paths and always add service paths internally. This approach seems to solve all problems of side-by-side coexistence in any combination of versions and in any nesting.",
      "created_at": "2021-01-16T18:29:26Z",
      "updated_at": "2021-01-16T18:29:26Z"
    }
  ],
  "created_at": "2020-06-19T13:52:02Z",
  "labels": [
    "Issue-Question",
    "WG-Engine"
  ],
  "number": 12997,
  "state": "open",
  "title": "powershell.exe still receives PSModulePath for pwsh when called indirectly",
  "updated_at": "2021-01-16T18:29:27Z"
}