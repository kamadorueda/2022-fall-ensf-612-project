{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9861",
  "author": "SeeminglyScience",
  "body": "# Summary of the new feature/enhancement\r\n\r\nWhen developing a module that has a mix of C# and PowerShell elements, it's often desirable to have some classes accessible in PowerShell that are not necessarily part of the supported public API's.  Currently this is done either via reflection or just documentation. Allowing `HiddenAttribute` to decorate classes would provide a nice way to telegraph that it's not part of the public contract.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\n1. Add the following `AttributeTargets` to `HiddenAttribute`'s `AttributeUsage` decoration.\r\n    * Class\r\n    * Struct\r\n    * Enum\r\n    * Interface\r\n    * Delegate\r\n\r\n1. Add a check for `HiddenAttribute` to `CompletionCompleters.CompleteType(CompletionContext, string, string)`.  Or in `InitializeTypeCache`, but it seems better to store some extras then to check every type at once for the attribute.\r\n\r\n1. Add an `IsHidden` ETS member to `System.Type` and *maybe* add it to formatting.",
  "closed_at": null,
  "comments": [
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "@SeeminglyScience \r\n> often desirable to have some classes accessible in PowerShell that are not necessarily part of the supported public API's\r\n\r\nI didn't understand this. Can you provide an example?  Thanks.\r\n",
      "created_at": "2019-06-10T17:55:24Z",
      "updated_at": "2019-06-10T17:55:24Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@bpayette Yeah that sentence got away from me a bit.\r\n\r\nLets say I'm building a module that has a mix of cmdlets and functions, and I have some utility classes on the C# side that I might typically make `internal`.  If I want to reuse those utility classes in the PowerShell portion of the module, then I either need to use reflection or make the class public.\r\n\r\nIf the proposed change was made, I would be able to do this instead:\r\n\r\n```csharp\r\n// Utils.cs\r\nnamespace MyModule.Internal\r\n{\r\n    [Hidden, EditorBrowsable(EditorBrowsableState.Never)]\r\n    public static class Utils\r\n    {\r\n        // Some utility method to handle path resolution and error handling uniformly.\r\n        public static string TransformPath(PSCmdlet cmdlet, string path) => null;\r\n    }\r\n}\r\n```\r\n\r\n```powershell\r\n# MyModule.psm1\r\nfunction Test-Something {\r\n    [CmdletBinding()]\r\n    param(\r\n        [Parameter()]\r\n        [string] $Path\r\n    )\r\n    end {\r\n        $fullPath = [MyModule.Internal.Utils]::TransformPath($PSCmdlet, $Path)\r\n    }\r\n}\r\n```",
      "created_at": "2019-06-10T18:21:04Z",
      "updated_at": "2019-06-10T18:21:04Z"
    }
  ],
  "created_at": "2019-06-10T12:20:08Z",
  "labels": [
    "Issue-Enhancement"
  ],
  "number": 9861,
  "state": "open",
  "title": "Expand HiddenAttribute to work with classes",
  "updated_at": "2019-06-10T18:21:04Z"
}