{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16084",
  "author": "89z",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nIf I have a file with a typographic quote:\r\n\r\n~~~\r\nDON\u2019T LOOK UP.txt\r\n~~~\r\n\r\n### Expected behavior\r\n\r\nand I try to tab complete\r\n\r\n### Actual behavior\r\n\r\n~~~\r\nGet-Content '.\\DON\u2019T LOOK UP.txt'\r\n~~~\r\n\r\nthat looks correct enough, but for some reason, PowerShell thinks a typographic quote is also a **programmatic quote**, and so PowerShell thinks the string ends with the typographic quote. This issue can be fixed two ways:\r\n\r\n1. Stop treating typographic quotes as special. Only single quote (U+0027) or double quote (U+0022) should be recognized as string terminators.\r\n\r\n2. If typographic quotes are going to be used as programmatic quotes, then in the example above, tab complete should use double quotes instead.\r\n\r\n### Environment data\r\n\r\n~~~\r\nPSVersion                      7.1.4\r\nPSEdition                      Core\r\nGitCommitId                    7.1.4\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n~~~",
  "closed_at": null,
  "comments": [
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "> If typographic quotes are going to be used as programmatic quotes, then in the example above, tab complete should use double quotes instead.\r\n\r\nI feel like this should be the way to go forward, tab completion should be able to handle the various quoting types. The other option has the potential to fail existing code even if it's a pretty rare occurrence.",
      "created_at": "2021-09-11T21:54:27Z",
      "updated_at": "2021-09-11T21:54:27Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "> I dont think I should have even given this as an option, as its so obviously wrong.\r\n\r\nYou may thing it's wrong but others may feel differently. I've seen a few websites in the past where it turns text into the \"smart\" variant and things like `-` becomes an em-dash and quotes become their \"smart\" variants. You only have to search [powershell em-dash encoding](https://www.google.com/search?hl=en&q=powershell%20em%2Ddash%20encoding) to see people falling afoul of the unicode variants of the ASCII characters and I wouldn't think it's a stretch to consider quotes being part of this umbrella. Storing code in a word document, while not very ideal, is something I've seen people do and word typically likes to change the characters to the smart variant as well.\r\n\r\nJust wanting to put it out there that if the decision is made to stop treating [these chars](https://github.com/PowerShell/PowerShell/blob/b7cb335f03fe2992d0cbd61699de9d9aafa1d7c1/src/System.Management.Automation/engine/parser/CharTraits.cs#L18-L24) as quotes then we need to be aware that this could break existing code. This has been in place since the Windows PowerShell days so it's something that's lived with PowerShell since the early days.\r\n\r\nOf course I'm just a lone voice here, it's up to the working group to decide the next step forward :)",
      "created_at": "2021-09-11T22:19:17Z",
      "updated_at": "2021-09-11T22:21:09Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> In my opinion, it shouldnt be PowerShells job to sanitize input from Microsoft Word. In fact generally speaking I dont think Microsoft Word should be mentioned in the same breath as PowerShell, as they are wholly different platforms.\r\n\r\nA lot of blogs did as well, at least at the time.  I believe it was to make it easier to copy and paste examples from blogs like that. PowerShell early on had a lot of \"wouldn't it be cool if __ just *worked*?\" that was not vetted to the same degree it would be today.\r\n\r\n> If the PowerShell group insist on supporting Microsoft Word, then fine thats their business. But its just making it more difficult on them, as the code is more complex, and more prone to error. For example without that code you linked, the issue I posted here would never exist.\r\n\r\nNot gonna weigh in on if it was or wasn't a good idea, but the ship has sailed on that.  Too much code relies on it now unfortunately, I've seen *a lot* of scripts that would break.\r\n\r\n",
      "created_at": "2021-09-13T16:04:00Z",
      "updated_at": "2021-09-13T16:04:00Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Its also upsetting that not only was this (in my opinion) pointless change made, but it was done in such a careless way, that even the most basic testing would have caught.\r\n\r\nDo you mean there was a specific recent break in the way tab completion works? Or are you referring to acceptance of curved quotes in general which has always been the case (or at least since version 2).\r\n",
      "created_at": "2021-09-14T14:12:28Z",
      "updated_at": "2021-09-14T14:12:28Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Yes I read the issue.\r\n\r\n> **pointless change made, but it was done in such a careless way, that even the most basic testing would have caught.**\r\n\r\nThe above implies that something worked previously and no longer works.  That's what I'm asking when I say this:\r\n\r\n> Do you mean there was a specific recent break in the way tab completion works?\r\n\r\nIt's important to know if it's a regression or just a bug that hasn't been filed until now.",
      "created_at": "2021-09-14T16:19:24Z",
      "updated_at": "2021-09-14T16:19:24Z"
    },
    {
      "author": "alexandair",
      "author_association": "CONTRIBUTOR",
      "body": "@89z You won't go far with that kind of attitude in this community. Your tone isn't nice from the start. People here try to help and understand your issue. ",
      "created_at": "2021-09-14T19:39:44Z",
      "updated_at": "2021-09-14T19:39:44Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "The fix we'd want to make is here:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/55ccbb6803162965eead3a08aace37f11ea7630b/src/System.Management.Automation/engine/CommandCompletion/CompletionCompleters.cs#L4442-L4472\r\n\r\nEverywhere there where quotes are tested for and replaced, we should be looking for all the kinds of quotes the tokeniser accepts.\r\n\r\nIn the tab completion code, the most efficient and readable way to do that is probably to use a regex that tests for all the quote types.\r\n\r\nWe should also be doing this for double quotes.",
      "created_at": "2021-09-14T21:16:02Z",
      "updated_at": "2021-09-14T21:16:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> The fix we'd want to make is here:\r\n\r\n~15 such patterns are in the file :-)",
      "created_at": "2021-09-15T03:46:43Z",
      "updated_at": "2021-09-15T03:46:43Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> ~15 such patterns are in the file :-)\r\n\r\nYeah the way we generally handle quotation in the completers is badly done and ideally we would fix it all.\r\n\r\nBut I debugged the actual reported issue and that's the specific part of the code we'd want to change to fix this issue.",
      "created_at": "2021-09-15T17:21:39Z",
      "updated_at": "2021-09-15T17:21:56Z"
    },
    {
      "author": "GigaScratch",
      "author_association": "CONTRIBUTOR",
      "body": "Do we have a record of all characters that can cause this? Writing a script that tests every unicode character for tab completion seems like overkill but I can't think of another way. ",
      "created_at": "2022-10-21T06:12:01Z",
      "updated_at": "2022-10-21T06:12:01Z"
    }
  ],
  "created_at": "2021-09-11T16:47:13Z",
  "labels": [
    "WG-Interactive-IntelliSense",
    "Up-for-Grabs",
    "Needs-Triage"
  ],
  "number": 16084,
  "state": "open",
  "title": "Tab completion should escape exotic quotes",
  "updated_at": "2022-10-21T06:12:02Z"
}