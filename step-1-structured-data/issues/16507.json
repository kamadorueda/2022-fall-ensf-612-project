{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16507",
  "author": "FireInWinter",
  "body": "### Summary of the new feature / enhancement\n\nThere are a number of cases currently that can cause ForEach-Object -Parallel to hang indefinitely.  Some of these are side effects from the actually command you are running, but should be possible to get around it by ending all the runspaces asynchronously.  Here's an example using the SqlServer module.  \r\n\r\n```\r\n'DBServer1', 'DBServer2' | ForEach-Object -Parallel { Invoke-Sqlcmd -ServerInstance $_ -Database master -Query \"waitfor delay '00:01:00'\" -QueryTimeout 600 }\r\n```\r\nYou cannot end execution of this until the SQL query has completed.  While in this case it is just 1 minute, other cases could be a lot longer.  To be truthful, this can happen in a normal ForEach-Object, but having it run in parallel amplifies the problem, but also gives options for a better solution.\r\n\r\nThere isn't anything much more painful than to be waiting for hours for a final task in the pipeline to finish and there is nothing you can do to stop it other then closing PowerShell, potentially losing a lot of work you have done in that session sitting in your variables/state.\n\n### Proposed technical implementation details (optional)\n\nThere I can think of 2 possible ways to address this, but I would prefer both of them to be done.\r\n1. Add a parameter called ParallelTimout that will cause a async close when the total elapsed time of the ForEach-Object has reached the timeout.\r\n2. Allow Ctrl-C/Break to interupt the ForEach-Object -Parellel regardless of what is running and have it then do a async close.\r\n\r\nIn both cases a warning should be emitted to alert you that something might be running in the background if it isn't possible to totally close the runspace.  Of course if you can actually terminate them immediately that would be even better.  \r\n\r\n```\r\n'DBServer1', 'DBServer2' | ForEach-Object -Parallel { Invoke-Sqlcmd -ServerInstance $_ -Database master -Query \"waitfor delay '00:01:00'\" -QueryTimeout 600 } -ParallelTimeout 10\r\n\r\nWARNING: Parallel runspace still running.  The active tasks might still be running in the background.  Runspaces: PSTask:1007, PSTask:1008.  You can see the status of these using Get-Runspace\r\n```\r\nThis would allow you to set a max duration of the parallel task or be able to interrupt it as needed.",
  "closed_at": null,
  "comments": [],
  "created_at": "2021-11-23T19:50:15Z",
  "number": 16507,
  "state": "open",
  "title": "ForEach-Object -Parallel should allow Ctrl-C or timeout regardless of what it is running",
  "updated_at": "2021-11-24T03:46:24Z"
}