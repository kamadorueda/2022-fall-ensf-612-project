{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13752",
  "author": "mklement0",
  "body": "This bug also affects Windows PowerShell.\r\n\r\nNormally, trying to access a non-existent property on an array makes member enumeration return `$null`.\r\n\r\nHowever, if the array contains at least two `[pscustomobject]` instances, an _array_ of `$null` values - one for each `[pscustomobject]` array element - is unexpectedly returned.\r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\n# OK: $null is returned, so .Count is 0\r\n(1, [pscustomobject] @{ foo = 1 }).NoSuchProperty.Count | Should -Be 0\r\n\r\n# !! FAILS: ($null, $null) is returned, whose .Count is 2\r\n(1, [pscustomobject] @{ foo = 1 },  [pscustomobject] @{ foo = 2 }).NoSuchProperty.Count | Should -Be 0\r\n```\r\n\r\n## Expected behavior\r\n\r\nBoth tests should succeeds\r\n\r\n## Actual behavior\r\n\r\nThe second test fails:\r\n\r\n```none\r\n Expected 0, but got 2.\r\n```\r\n\r\n## Environment data\r\n\r\n```none\r\nPowerShell 7.1.0-rc.1\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Hmm, interesting... judging from the behaviour with something like `(1, 2, 3, 4).NoSuch.Count` it _seems_ like the difference might be that normal objects return AutomationNull.Value rather than true null for nonexistent properties, unless there's some code specifically handling cases like this somewhere.",
      "created_at": "2020-10-06T18:09:41Z",
      "updated_at": "2020-10-06T18:09:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It's even worse:\r\n```\r\n(1, [pscustomobject] @{ foo = 1 }, 12, [pscustomobject] @{ NoSuchProperty = 22 }).foo.Count\r\n2\r\n```",
      "created_at": "2020-10-07T10:37:56Z",
      "updated_at": "2020-10-07T10:37:56Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "It indeed appears to include `$Null` values for nonexistent properties:\r\n```PowerShell\r\nConvertTo-Json (1, [pscustomobject] @{ foo = 1 }, 12, [pscustomobject] @{ NoSuchProperty = 22 }).foo\r\n[\r\n  1,\r\n  null\r\n]\r\n```\r\n",
      "created_at": "2020-10-09T13:51:24Z",
      "updated_at": "2020-10-09T13:52:20Z"
    },
    {
      "author": "nickkimbrough",
      "author_association": "NONE",
      "body": "I just ran into this as well. Here is another example to reproduce:\r\n\r\n```Powershell\r\nSet-StrictMode -Version 'Latest'\r\n\r\n$results = @(1,2) | ForEach-Object {\r\n [System.Collections.Generic.List[string]]$array = @()\r\n    [PSCustomObject]@{\r\n        Array = [string[]]$array\r\n    }\r\n}\r\n\r\n# This will not throw\r\nforeach($result in $results) {\r\n    $result.Array\r\n}\r\n\r\n# This will throw\r\n$results.Array\r\n```\r\n\r\nThis behavior does not throw if StrictMode is not enabled.",
      "created_at": "2021-09-22T17:06:59Z",
      "updated_at": "2021-09-22T17:06:59Z"
    }
  ],
  "created_at": "2020-10-06T15:37:21Z",
  "labels": [
    "Issue-Bug",
    "WG-Engine"
  ],
  "number": 13752,
  "state": "open",
  "title": "Member enumeration malfunctions with array that contains 2 or more [pscustomobject] instances",
  "updated_at": "2021-09-22T17:06:59Z"
}