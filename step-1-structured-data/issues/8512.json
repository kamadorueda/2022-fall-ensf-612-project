{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8512",
  "author": "jszabo98",
  "body": "It's just surprising to me that Powershell doesn't give a greater precedence to -and over -or, like in other languages like C# or vbscript.  I guess there's some technical reason for it.\r\n\r\n<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nC:\\> $true -or $true -and $false\r\nTrue\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nC:\\> $true -or $true -and $false\r\nFalse\r\n\r\nC:\\> $true -or ($true -and $false)\r\nTrue\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0\r\nOS                             Microsoft Windows 10.0.16299\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2022-08-02T21:01:20Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Don't know the history behind this but it would certainly be a breaking change to change it",
      "created_at": "2018-12-21T17:51:45Z",
      "updated_at": "2018-12-21T17:51:45Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I agree that the behavior is surprising.\r\n\r\nIt is documented in [`about_Operator_Precedence`](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_operator_precedence), though without a design rationale.\r\n\r\nAs @SteveL-MSFT notes, changing it now would be a breaking change.",
      "created_at": "2018-12-22T23:52:18Z",
      "updated_at": "2018-12-22T23:52:18Z"
    },
    {
      "author": "E3V3A",
      "author_association": "NONE",
      "body": ":face_with_head_bandage: This is crazy! Not that this comment it will change anything, but certainly explains why I've had such random outcomes when trying to set/extract and pass various booleans/parameters. Since, I'm mostly using the Internal Preview Fast track, I have often blamed various boolean incoherent behavior on buggy builds and such. Now I know why! It would be interesting what crazy story is behind, not following the standard of most (java, js, ruby, python, c, c++ etc) languages since the invention of computers.\r\n\r\nPerhaps it would be a welcome *break* one day. (*Legacy* is our enemy.)",
      "created_at": "2018-12-23T00:46:48Z",
      "updated_at": "2018-12-23T00:47:04Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Perhaps add this to https://github.com/PowerShell/PowerShell/issues/6745",
      "created_at": "2018-12-23T00:49:00Z",
      "updated_at": "2018-12-23T00:49:00Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT any chance of considering this for PS7, or is it still too soon? \ud83d\ude04 ",
      "created_at": "2019-06-02T22:32:19Z",
      "updated_at": "2019-06-02T22:32:19Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "Adding myself to the list of people badly bitten by it... Was porting simple cmdlet from C# to PowerShell, was not expecting such a breaking issue! Especially since both are so interoperable. ",
      "created_at": "2022-07-28T11:09:22Z",
      "updated_at": "2022-07-28T11:09:22Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "What about making `Set-StrictMode -Version 4.0` error when `-or` is on the same level and to the left of `-and`? You could just put parentheses and make it work **without a breaking change**, but it would not report errors if putting parentheses does not change result:\r\n\r\n```pwsh \r\n1 -or 1 -and 0    # Expected 1, actual 0, Strict error\r\n(1 -or 1) -and 0  # Expected 0, actual 0, no Strict error\r\n1 -or (1 -and 0)  # Expected 1, actual 1, no Strict error\r\n\r\n# If `-and` is to left, it doesn't matter if its higher precedence or same ltr\r\n1 -and 0 -or 1    # Expected 1, actual 1, no error\r\n(1 -and 0) -or 1  # Expected 1, actual 1, no error\r\n```",
      "created_at": "2022-07-28T12:31:17Z",
      "updated_at": "2022-07-28T12:31:17Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "To change the default precedence order would be a major breaking change.  I would be reluctant ti see this change in PowerShell 7.x.\r\n\r\nIf this is worth changing, then perhaps in the PowerShell 8 timescales??\r\n\r\nAs an aside, I have been surprised by the order. like many on this issue - for me the solution is use parenthies so as to be explicit:\r\n```powershell\r\n# as opposed to this\r\n$true -or $true -and $false\r\n# I would use:\r\n$true -or ($true -and $false)\r\n```\r\nThis makes explicit what I am testing for and NOT relying on defaults. I started programming in Fortran IV in 1968, and afterprobably over 100 languages later - my expectations are not always realised ihn the next language. I learned to be more explicit, and workmanlike and spelling things out. I would hope the code that results has been easier for others to maintain. :-)\r\n\r\n\r\n",
      "created_at": "2022-07-28T13:50:49Z",
      "updated_at": "2022-07-28T13:50:49Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Marking as by design. This can't really be changed today as it would be a large breaking change. A separate mode for breaking changes is already tracked in the linked issue above.",
      "created_at": "2022-08-01T20:30:02Z",
      "updated_at": "2022-08-01T20:30:02Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as by-design and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-08-02T21:01:19Z",
      "updated_at": "2022-08-02T21:01:19Z"
    }
  ],
  "created_at": "2018-12-21T16:23:32Z",
  "number": 8512,
  "state": "closed",
  "title": "precedence of -and and -or is the same",
  "updated_at": "2022-08-02T21:01:20Z"
}