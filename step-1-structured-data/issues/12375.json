{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12375",
  "author": "he852100",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n\r\n```\r\n\r\n# Expected behavior\r\n215 |  ($instances|Get-Member -MemberType NoteProperty).name|%{$instances.$_ \u2026\r\n     | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     | You must specify an object for the Get-Member cmdlet.\r\ndebug:  215+ ($instances|Get-Member -MemberType NoteProperty).name|% >>>> {$instances.$_|add-member \"id\" $_}\r\ndebug:  215+ ($instances|Get-Member -MemberType NoteProperty).name|%{ >>>> $instances.$_|add-member \"id\" $_}\r\n```none\r\n\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nDEBUG:    1+ &  >>>> { Set-StrictMode -Version 1; $this.Exception.InnerException.PSMessageDetails }\r\nDEBUG:    1+ & {  >>>> Set-StrictMode -Version 1; $this.Exception.InnerException.PSMessageDetails }\r\nDEBUG:    1+ & { Set-StrictMode -Version 1;  >>>> $this.Exception.InnerException.PSMessageDetails }\r\nDEBUG:    1+ & { Set-StrictMode -Version 1; $this.Exception.InnerException.PSMessageDetails  >>>> }\r\n\r\n215 |  ($instances|Get-Member -MemberType NoteProperty).name|%{$instances.$_ \u2026\r\n     | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     | You must specify an object for the Get-Member cmdlet.\r\ndebug:  215+ ($instances|Get-Member -MemberType NoteProperty).name|% >>>> {$instances.$_|add-member \"id\" $_}\r\ndebug:  215+ ($instances|Get-Member -MemberType NoteProperty).name|%{ >>>> $instances.$_|add-member \"id\" $_}\r\ndebug:    5+ function Get-ConciseViewPositionMessage  >>>> {\r\ndebug:    7+ >>>> $resetColor = ''\r\ndebug:    8+ if ( >>>> $Host.UI.SupportsVirtualTerminal -and !(Test-Path env:__SuppressAnsiEscapeSequences)) {\r\ndebug:    9+ >>>> $resetColor = [System.Management.Automation.VTUtility]::GetEscapeSequence(   \r\nDEBUG:   46+ >>>> $errorColor = ''\r\ndebug:   47+ >>>> $accentColor = ''\r\ndebug:   49+ if ( >>>> $null -ne $Host.PrivateData) {\r\ndebug:   50+ >>>> $errorColor = Get-VT100Color $Host.PrivateData.ErrorForegroundColor\r\ndebug:   14+ function Get-VT100Color([ConsoleColor] $color)  >>>> {\r\ndebug:   15+ if ( >>>> !$Host.UI.SupportsVirtualTerminal -or (Test-Path env:__SuppressAnsiEscapeSequences)) {\r\ndebug:   19+ return  >>>> [System.Management.Automation.VTUtility]::GetEscapeSequence($color)\r\ndebug:   20+ >>>> }\r\ndebug:   51+ >>>> $accentColor = Get-VT100Color ($Host.PrivateData.ErrorAccentColor ?? $errorColor)\r\ndebug:   14+ function Get-VT100Color([ConsoleColor] $color)  >>>> {\r\ndebug:   15+ if ( >>>> !$Host.UI.SupportsVirtualTerminal -or (Test-Path env:__SuppressAnsiEscapeSequences)) {\r\ndebug:   19+ return  >>>> [System.Management.Automation.VTUtility]::GetEscapeSequence($color)\r\ndebug:   20+ >>>> }\r\n\r\ndebug:   54+ >>>> $posmsg = ''\r\ndebug:   55+ >>>> $headerWhitespace = ''\r\n\r\ndebug:   56+ >>>> $offsetWhitespace = '' \r\nDEBUG:   57+ >>>> $message = ''\r\ndebug:   58+ >>>> $prefix = ''\r\ndebug:   60+ if ( >>>> $myinv -and $myinv.ScriptName -or $myinv.ScriptLineNumber -gt 1 -or $err.CategoryInfo.Category -eq 'ParserError') {\r\n\r\ndebug:   61+ >>>> $useTargetObject = $false\r\ndebug:   64+ if ( >>>> $_.TargetObject.Line -and $_.TargetObject.LineText) {\r\n\r\ndebug:   68+ elseif ( >>>> $myinv.ScriptName) {\r\n\r\ndebug:   69+ if ( >>>> $env:TERM_PROGRAM -eq 'vscode') {\r\ndebug:   74+ >>>> $posmsg = \"${resetcolor}$($myinv.ScriptName):$($myinv.ScriptLineNumber)${newline}\"\r\ndebug:   74+ $posmsg = \"${resetcolor}$( >>>> $myinv.ScriptName):$($myinv.ScriptLineNumber)${newline}\"\r\n\r\ndebug:   74+ $posmsg = \"${resetcolor}$($myinv.ScriptName):$( >>>> $myinv.ScriptLineNumber)${newline}\"\r\n\r\ndebug:   81+ if ( >>>> $useTargetObject) { \r\nDEBUG:   86+ >>>> $scriptLineNumber = $myinv.ScriptLineNumber \r\nDEBUG:   87+ >>>> $scriptLineNumberLength = $myinv.ScriptLineNumber.ToString().Length\r\ndebug:   90+ if ( >>>> $scriptLineNumberLength -gt 4) { \r\nDEBUG:   94+ >>>> $lineWhitespace = ''\r\ndebug:   95+ if ( >>>> $scriptLineNumberLength -lt 4) {\r\ndebug:   96+ >>>> $lineWhitespace = ' ' * (4 - $scriptLineNumberLength)\r\ndebug:   99+ >>>> $verticalBar = '|'\r\ndebug:  100+ >>>> $posmsg += \"${accentColor}${headerWhitespace}Line ${verticalBar}${newline}\"\r\ndebug:  102+ >>>> $highlightLine = ''\r\ndebug:  103+ if ( >>>> $useTargetObject) {\r\n\r\ndebug:  109+ >>>> $positionMessage = $myinv.PositionMessage.Split($newline)\r\ndebug:  110+ >>>> $line = $positionMessage[1].Substring(1) # skip the '+' at the start     \r\nDEBUG:  111+ >>>> $highlightLine = $positionMessage[$positionMessage.Count - 1].Substring(1)\r\ndebug:  112+ >>>> $offsetLength = $highlightLine.Trim().Length\r\ndebug:  113+ >>>> $offsetInLine = $highlightLine.IndexOf('~')\r\n\r\ndebug:  116+ if ( >>>> -not $line.EndsWith($newline)) {\r\ndebug:  117+ >>>> $line += $newline\r\n\r\ndebug:  121+ if ( >>>> $offsetLength -lt $line.Length - 1) {\r\ndebug:  122+ >>>> $line = $line.Insert($offsetInLine + $offsetLength, $resetColor).Insert($offsetInLine, $accentColor)\r\ndebug:  125+ >>>> $posmsg += \"${accentColor}${lineWhitespace}${ScriptLineNumber} ${verticalBar} ${resetcolor}${line}\"\r\ndebug:  126+ >>>> $offsetWhitespace = ' ' * $offsetInLine\r\ndebug:  127+ >>>> $prefix = \"${accentColor}${headerWhitespace}     ${verticalBar} ${errorColor}\"\r\ndebug:  128+ if ( >>>> $highlightLine -ne '') {\r\ndebug:  129+ >>>> $posMsg += \"${prefix}${highlightLine}${newline}\"\r\ndebug:  131+ >>>> $message = \"${prefix}\"\r\n\r\ndebug:  134+ if ( >>>> ! $err.ErrorDetails -or ! $err.ErrorDetails.Message) {\r\ndebug:  135+ if ( >>>> $err.CategoryInfo.Category -eq 'ParserError' -and $err.Exception.Message.Contains(\"~$newline\")) {\r\ndebug:  139+ elseif ( >>>> $err.Exception) {\r\ndebug:  140+ >>>> $message += $err.Exception.Message\r\ndebug:  154+ if ( >>>> $myinv -and $myinv.ScriptName -or $err.CategoryInfo.Category -eq 'ParserError') {\r\n\r\nDEBUG:  155+ >>>> $prefixLength = Get-RawStringLength -string $prefix \r\nDEBUG:   23+ function Get-RawStringLength($string)  >>>> {\r\ndebug:   24+ >>>> $vtCodes = \"`e[0m\", \"`e[2;30m\", \"`e[2;31m\", \"`e[2;32m\", \"`e[2;33m\", \"`e[2;34m\",\r\ndebug:   28+ >>>> $newString = $string\r\n\r\ndebug:   29+ foreach ($vtCode in  >>>> $vtCodes) {\r\ndebug:   29+ foreach ( >>>> $vtCode in $vtCodes) {\r\ndebug:   30+ >>>> $newString = $newString.Replace($vtCode, '')\r\ndebug:   29+ foreach ( >>>> $vtCode in $vtCodes) {\r\ndebug:   30+ >>>> $newString = $newString.Replace($vtCode, '')\r\ndebug:   29+ foreach ( >>>> $vtCode in $vtCodes) {\r\ndebug:   30+ >>>> $newString = $newString.Replace($vtCode, '')\r\n\r\ndebug:   29+ foreach ( >>>> $vtCode in $vtCodes) {\r\n\r\ndebug:   30+ >>>> $newString = $newString.Replace($vtCode, '')\r\ndebug:   29+ foreach ( >>>> $vtCode in $vtCodes) {\r\ndebug:   30+ >>>> $newString = $newString.Replace($vtCode, '')\r\ndebug:   29+ foreach ( >>>> $vtCode in $vtCodes) {\r\ndebug:   30+ >>>> $newString = $newString.Replace($vtCode, '') \r\nDEBUG:   29+ foreach ( >>>> $vtCode in $vtCodes) {\r\ndebug:   30+ >>>> $newString = $newString.Replace($vtCode, '')\r\ndebug:   29+ foreach ( >>>> $vtCode in $vtCodes) {\r\ndebug:   30+ >>>> $newString = $newString.Replace($vtCode, '') \r\nDEBUG:   29+ foreach ( >>>> $vtCode in $vtCodes) { \r\nDEBUG:   30+ >>>> $newString = $newString.Replace($vtCode, '') \r\nDEBUG:   29+ foreach ( >>>> $vtCode in $vtCodes) {\r\ndebug:   30+ >>>> $newString = $newString.Replace($vtCode, '') \r\nDEBUG:   29+ foreach ( >>>> $vtCode in $vtCodes) {\r\ndebug:   30+ >>>> $newString = $newString.Replace($vtCode, '')\r\ndebug:   29+ foreach ( >>>> $vtCode in $vtCodes) {\r\ndebug:   30+ >>>> $newString = $newString.Replace($vtCode, '')\r\ndebug:   29+ foreach ( >>>> $vtCode in $vtCodes) {\r\ndebug:   30+ >>>> $newString = $newString.Replace($vtCode, '')\r\ndebug:   29+ foreach ( >>>> $vtCode in $vtCodes) {\r\ndebug:   30+ >>>> $newString = $newString.Replace($vtCode, '')\r\ndebug:   29+ foreach ( >>>> $vtCode in $vtCodes) {\r\ndebug:   30+ >>>> $newString = $newString.Replace($vtCode, '')\r\ndebug:   29+ foreach ( >>>> $vtCode in $vtCodes) {\r\ndebug:   30+ >>>> $newString = $newString.Replace($vtCode, '')\r\ndebug:   29+ foreach ( >>>> $vtCode in $vtCodes) {\r\ndebug:   30+ >>>> $newString = $newString.Replace($vtCode, '')\r\ndebug:   29+ foreach ( >>>> $vtCode in $vtCodes) {\r\ndebug:   33+ return  >>>> $newString.Length\r\ndebug:   34+ >>>> }\r\ndebug:  156+ >>>> $prefixVtLength = $prefix.Length - $prefixLength\r\ndebug:  159+ >>>> $message = $message.Replace($newline, ' ').Replace(\"`t\", ' ')\r\ndebug:  161+ >>>> $windowWidth = 120\r\ndebug:  162+ if ( >>>> $Host.UI.RawUI -ne $null) {\r\ndebug:  163+ >>>> $windowWidth = $Host.UI.RawUI.WindowSize.Width\r\ndebug:  166+ if ( >>>> $windowWidth -gt 0 -and ($message.Length - $prefixVTLength) -gt $windowWidth) {\r\ndebug:  167+ >>>> $sb = [Text.StringBuilder]::new()\r\ndebug:  168+ >>>> $substring = Get-TruncatedString -string $message -length ($windowWidth + $prefixVTLength) \r\nDEBUG:   37+ function Get-TruncatedString($string, [int]$length)  >>>> {\r\ndebug:   39+ if ( >>>> $string.Length -le $length) {\r\ndebug:   43+ return  >>>> ($string.Substring(0,$length) -split '\\s',-2)[0]\r\ndebug:   44+ >>>> }\r\ndebug:  169+ >>>> $null = $sb.Append($substring)\r\ndebug:  170+ >>>> $remainingMessage = $message.Substring($substring.Length).Trim()\r\ndebug:  171+ >>>> $null = $sb.Append($newline)\r\ndebug:  172+ while ( >>>> ($remainingMessage.Length + $prefixLength) -gt $windowWidth) {\r\ndebug:  187+ >>>> $null = $sb.Append($prefix + $remainingMessage.Trim())\r\ndebug:  188+ >>>> $message = $sb.ToString()\r\ndebug:  191+ >>>> $message += $newline\r\ndebug:  194+ >>>> $posmsg += \"${errorColor}\" + $message\r\ndebug:  196+ >>>> $reason = 'Error'\r\ndebug:  197+ if ( >>>> $err.Exception -and $err.Exception.WasThrownFromThrowStatement) {\r\n\r\ndebug:  201+ elseif ( >>>> $myinv.MyCommand -and (Get-Command -Name $myinv.MyCommand -ErrorAction Ignore))\r\ndebug:  203+ >>>> $reason = $myinv.MyCommand \r\nDEBUG:  222+ >>>> $errorMsg = 'Error' \r\nDEBUG:  224+ >>>> \"${errorColor}${reason}: ${posmsg}${resetcolor}\"\r\ndebug:  225+ >>>> }\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nPSVersion                      7.1.0-daily.20200410                   PSEdition                      Core                                   GitCommitId                    7.1.0-daily.20200410                   OS                             Linux 4.9.112-perf #1 SMP PREEMPT Mon\u2026 Platform                       Unix\r\n```\r\n",
  "closed_at": "2020-04-18T11:15:54Z",
  "comments": [],
  "created_at": "2020-04-18T11:07:12Z",
  "number": 12375,
  "state": "closed",
  "title": "set-psdebug -Trace 1 Too much useless information",
  "updated_at": "2020-04-18T11:15:54Z"
}