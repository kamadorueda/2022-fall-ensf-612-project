{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7324",
  "author": "adityapatwardhan",
  "body": "Windows PowerShell started from a pwsh.exe from preview.4 gives preference to pwsh module path.\r\nAs an effect, module load fails with `Modules_InsufficientPowerShellVersion,Microsoft.PowerShell.Commands.ImportModuleCommand`\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nPS D:\\> powershell\r\nWindows PowerShell\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nPS D:\\> Write-Verbose \"Test\" -verbose\r\nWrite-Verbose : The 'Write-Verbose' command was found in the module 'Microsoft.PowerShell.Utility', but the module could not be loaded. For more information, run 'Import-Module\r\nMicrosoft.PowerShell.Utility'.\r\nAt line:1 char:1\r\n+ Write-Verbose \"Test\" -verbose\r\n+ ~~~~~~~~~~~~~\r\n    + CategoryInfo          : ObjectNotFound: (Write-Verbose:String) [], CommandNotFoundException\r\n    + FullyQualifiedErrorId : CouldNotAutoloadMatchingModule\r\n\r\nPS D:\\> Import-Module Microsoft.PowerShell.Utility\r\nImport-Module : The version of Windows PowerShell on this computer is '5.1.18200.1000'. The module 'C:\\program\r\nfiles\\powershell\\6-preview\\Modules\\Microsoft.PowerShell.Utility\\Microsoft.PowerShell.Utility.psd1' requires a minimum Windows PowerShell version of '6.1' to run. Verify that you have the minimum\r\nrequired version of Windows PowerShell installed, and then try again.\r\nAt line:1 char:1\r\n+ Import-Module Microsoft.PowerShell.Utility\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : ResourceUnavailable: (C:\\program file...ll.Utility.psd1:String) [Import-Module], InvalidOperationException\r\n    + FullyQualifiedErrorId : Modules_InsufficientPowerShellVersion,Microsoft.PowerShell.Commands.ImportModuleCommand\r\n```\r\n\r\n**Workaround**\r\nAfter starting Windows PowerShell adjust the PSModulePath\r\n\r\n```PowerShell\r\n$env:Psmodulepath = \"C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules;$env:PSModulePath\"\r\n```\r\n\r\ncc @rjmholt \r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nWrite-Verbose should work\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nModules_InsufficientPowerShellVersion,Microsoft.PowerShell.Commands.ImportModuleCommand\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.4\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0-preview.4\r\nOS                             Microsoft Windows 10.0.18200\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2018-07-26T17:10:21Z",
  "comments": [
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "To document some offline discussions further:\r\n\r\nThis is a consequence of adding the Windows PowerShell System32 module directory to the pwsh module path:\r\n\r\n* Start WindowsPowerShell\r\n* It sees the System32 module path already on the PSModulePath\r\n* The System32 module path is not prepended (even secretly) to the Windows PowerShell PSModulePath\r\n* Modules attempt to be (auto)loaded from (e.g.) Microsoft.PowerShell.Utility\r\n* The first module seen is a PowerShell Core 6 Microsoft.PowerShell.Utility\r\n* The version check fails\r\n* Loading fails and `gci` doesn't work\r\n\r\nPossible long-term workarounds are:\r\n\r\n1. Check native executions for `powershell.exe` and if so, remove System32 from the module path, or\r\n2. Treat the System32 module path as a \"hidden\" PSModulePath component in PowerShell Core, so that it doesn't actually get added to the PSModulePath, but is just treated as such, so it isn't inherited.\r\n",
      "created_at": "2018-07-20T22:06:59Z",
      "updated_at": "2018-07-20T22:06:59Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Worth noting that (2) would also solve #7327.\r\n\r\nAlso, any solution to this would need to work with any flags `powershell.exe` might be started with, like `-noprofile`",
      "created_at": "2018-07-20T22:10:41Z",
      "updated_at": "2018-07-20T22:10:41Z"
    },
    {
      "author": "BradBarnich",
      "author_association": "NONE",
      "body": "I hit this too. Was using pwsh as my main shell on windows, but some of our build scripts are hardcoded to powershell. \r\n\r\nWith preview 4, they fail with messages like:\r\n`Get-Date : The 'Get-Date' command was found in the module 'Microsoft.PowerShell.Utility', but the module could not be loaded. For more information, run 'Import-Module Microsoft.PowerShell.Utility'.`",
      "created_at": "2018-07-24T16:41:15Z",
      "updated_at": "2018-07-24T16:41:15Z"
    },
    {
      "author": "BradBarnich",
      "author_association": "NONE",
      "body": "Another scenario, running VS code from pwsh ,`code .`, then opening the integrated terminal. Same issue",
      "created_at": "2018-07-24T16:44:53Z",
      "updated_at": "2018-07-24T16:44:53Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@rjmholt I'm afraid adding the `System32` module path to the end of `env:PSModulePath` is not the root cause. If your run `import-module Microsoft.PowerShell.Management`, you will see the following error:\r\n\r\n```\r\nPS C:\\Users\\dongbow\\Downloads\\PowerShell-6.1.0-preview.4-win-x64> import-module Microsoft.PowerShell.Management\r\nimport-module : The version of Windows PowerShell on this computer is '5.1.17134.165'. The module 'C:\\users\\dongbow\\dow\r\nnloads\\powershell-6.1.0-preview.4-win-x64\\Modules\\Microsoft.PowerShell.Management\\Microsoft.PowerShell.Management.psd1'\r\n requires a minimum Windows PowerShell version of '6.1' to run. Verify that you have the minimum required version of\r\nWindows PowerShell installed, and then try again.\r\nAt line:1 char:1\r\n+ import-module Microsoft.PowerShell.Management\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : ResourceUnavailable: (C:\\users\\dongbo...Management.psd1:String) [Import-Module], Invalid\r\n   OperationException\r\n    + FullyQualifiedErrorId : Modules_InsufficientPowerShellVersion,Microsoft.PowerShell.Commands.ImportModuleCommand\r\n```\r\n\r\nThe error indicates that the modules are failing because we changed `PowerShellVersion=\"3.0\"` to `PowerShellVersion=\"6.1\"`.\r\n\r\nThe root problem is that PSCore and Windows PowerShell use the same `PSModulePath` environment variable. We have the RFC https://github.com/PowerShell/PowerShell-RFC/pull/133 submitted to address this issue by introducing a new environment variable representing `PSModulePath` for PSCore. Once we implement that RFC, this problem will go away.\r\n\r\nBut for now, we will change the built-in modules' manifest files back to `PowerShellVersion=\"3.0\"` to work around the root problem. This is a temporary workaround, and will be reverted when the RFC is implemented.",
      "created_at": "2018-07-25T22:29:51Z",
      "updated_at": "2018-07-25T23:28:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I wonder why do we even look for standart/core modules by `env:PSModulePath`? If we hard-code the path to <pwsh.exe dir>\\Modules internally and remove it from  `env:PSModulePath`  the problem will go away.\r\nSeems it helps for side-by-side scenarios too.",
      "created_at": "2018-07-26T03:57:29Z",
      "updated_at": "2018-07-26T03:58:33Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov I think you should put that feedback in https://github.com/PowerShell/PowerShell-RFC/pull/133",
      "created_at": "2018-07-26T04:49:04Z",
      "updated_at": "2018-07-26T04:49:04Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Will do. \r\nHere my comment is for #7365 ",
      "created_at": "2018-07-26T05:15:07Z",
      "updated_at": "2018-07-26T05:15:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Fix in #7365 is temporary and it will be replaced later.",
      "created_at": "2018-07-27T03:45:08Z",
      "updated_at": "2018-07-27T03:45:08Z"
    }
  ],
  "created_at": "2018-07-20T21:29:57Z",
  "number": 7324,
  "state": "closed",
  "title": "powershell.exe started from pwsh.exe give preference to pwsh modules and fails module version compatiblity check",
  "updated_at": "2018-07-27T03:45:08Z"
}