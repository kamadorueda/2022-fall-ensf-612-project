{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8632",
  "author": "PetSerAl",
  "body": "# Steps to reproduce\r\n\r\n```powershell\r\nclass C: System.Collections.IEnumerable {\r\n    [string] ToString() { return 'Correct' }\r\n    [System.Collections.IEnumerator] GetEnumerator() { return ('Not', 'Correct').GetEnumerator() }\r\n}\r\n[C]::new(), [C]::new(), [C]::new() -join ', '\r\n[C]::new(), [C]::new(), [C]::new() | Join-String -Separator ', '\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nCorrect, Correct, Correct\r\nCorrect, Correct, Correct\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nCorrect, Correct, Correct\r\nNot Correct, Not Correct, Not Correct\r\n```\r\n\r\n# Environment data\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.0-preview.3\r\nPSEdition                      Core\r\nGitCommitId                    6.2.0-preview.3-104-ge399b06cd23a8d9a7df9be5ed329471ba5b8eb82\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0, 5.0, 5.1.10032.0, 6.2.0-preview.3}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I don't think this is really avoidable. By the time the cmdlet receives input, the `GetEnumerator()` has _already been called_ by the pipeline logic. \ud83d\ude41 ",
      "created_at": "2019-01-12T16:26:44Z",
      "updated_at": "2019-01-12T16:26:44Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32 \r\n\r\n>By the time the cmdlet receives input, the `GetEnumerator()` has *already been called* by the pipeline logic.\r\n\r\nAny evidence to support this claim?\r\n\r\n```powershell\r\nfunction My-Join-String { @($input) -join ', ' }\r\n[C]::new(), [C]::new(), [C]::new() | My-Join-String\r\n```\r\n",
      "created_at": "2019-01-12T16:34:10Z",
      "updated_at": "2019-01-12T16:34:10Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@PetSerAl Ah, I see! Okay, I misunderstood the original point.\r\n\r\nLooks like it's enumerating each pipeline item, likely in an attempt to make pipeline input behave the same as `Join-String -InputObject ([C]::new(), [C]::new(), [C]::new())`\r\n\r\n@mklement0 and I have discussed this a bit and have a code pattern that could help rectify it outlined in #4242 as you've seen. ",
      "created_at": "2019-01-12T16:44:29Z",
      "updated_at": "2019-01-12T16:44:53Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32 If it enumerating each pipeline item, the it should produce `Not, Correct, Not, Correct, Not, Correct` instead of `Not Correct, Not Correct, Not Correct`.",
      "created_at": "2019-01-12T16:49:38Z",
      "updated_at": "2019-01-12T16:49:38Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Not quite. It calls the enumerator of your object to enumerate it, and receives back a two element array for each item. It doesn't then enumerate each of those arrays, that would be an extra level of enumeration. \ud83d\ude42 \r\n\r\nI would guess that somewhere in its logic it converts these either implicitly or explicitly to string, which presumably forces PS to call `ToString()` on the resulting array.",
      "created_at": "2019-01-12T17:02:25Z",
      "updated_at": "2019-01-12T17:03:16Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "That is the problem. `Join-String` should not do `[C] -> [Array] -> [String]` instead of `[C] -> [String]`.",
      "created_at": "2019-01-12T17:31:37Z",
      "updated_at": "2019-01-12T17:31:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Are other cmdlets affected by this?",
      "created_at": "2019-01-12T18:56:01Z",
      "updated_at": "2019-01-12T18:56:01Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I don't think a lot of cmdlets will be. Most cmdlets implement `-InputObject` strictly for pipeline use, so they can make some generally safe assumptions.\r\n\r\nThere may be some, but I don't know of any affected in the same way as this one is... Yet :smile:",
      "created_at": "2019-01-12T19:40:11Z",
      "updated_at": "2019-01-12T19:40:11Z"
    }
  ],
  "created_at": "2019-01-12T16:09:43Z",
  "labels": [
    "Issue-Discussion",
    "WG-Cmdlets-Utility"
  ],
  "number": 8632,
  "state": "open",
  "title": "Join-String does not produce the same result as -join",
  "updated_at": "2019-01-12T19:40:11Z"
}