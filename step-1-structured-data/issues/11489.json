{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11489",
  "author": "p0W3RH311",
  "body": "its possible to do this\r\n\r\n'2019-01-01'..'2020-01-05' \r\n'monday'..'saturday'\r\n'march'..'april'\r\n'192.168.1.1'..'192.168.1.100'",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "How could we pick up a step for DateTime? Year? Month? Day? Minute? Seconds? \r\n",
      "created_at": "2020-01-04T17:32:25Z",
      "updated_at": "2020-01-04T17:33:01Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Probably could go by the smallest unit specified by the user. Would be interesting to see a POC for that.",
      "created_at": "2020-01-04T17:38:46Z",
      "updated_at": "2020-01-04T17:38:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> smallest unit specified by the user\r\n\r\nHow do you can detect this if original object is a string type?",
      "created_at": "2020-01-04T17:40:11Z",
      "updated_at": "2020-01-04T17:40:11Z"
    },
    {
      "author": "p0W3RH311",
      "author_association": "NONE",
      "body": "PowerRange operator this reduce a lot of  code. and here implementation probably could detect if string match a pattern of ip or date next convert type in specified  type before loop",
      "created_at": "2020-01-04T17:49:32Z",
      "updated_at": "2020-01-04T17:50:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "In any case you must have:\r\n- a type\r\n- a step\r\nI think it is impossible to detect these in common. As result we can not use the proposed syntax.\r\n\r\nYou could resolve step and type problems with \"-range\" operator:\r\n```powershell\r\n\"StartString\" -range \"EndString\", <step>, [Type]\r\n$StartTypedObject -range $EndTypedObject, <step>\r\n```",
      "created_at": "2020-01-04T18:00:03Z",
      "updated_at": "2020-01-04T18:00:34Z"
    },
    {
      "author": "p0W3RH311",
      "author_association": "NONE",
      "body": "i think with day/month because the values its _static_ probably the solution is with  _enum_ \r\n\r\n```\r\n'monday'..'saturday'\r\n'march'..'april'\r\n```\r\n\r\nwith date and ip\r\n\r\nuse regex to detect the model next the step\r\n\r\n",
      "created_at": "2020-01-04T18:09:39Z",
      "updated_at": "2020-01-04T18:10:29Z"
    },
    {
      "author": "p0W3RH311",
      "author_association": "NONE",
      "body": "with ip in ps code probably\r\n\r\n```\r\n$isip = @'\r\n(?x)\r\n ^\r\n   (?:[1-9]|1\\d|[2-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\r\n   (?:\r\n     [.]\r\n     (?:[1-9]|1\\d|[2-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\r\n   ){3}\r\n $\r\n'@\r\n\r\n@('198.2.3.100','1.1.1.300','255.256.255.255','1.2.3.4') -match $isip\r\n```",
      "created_at": "2020-01-04T18:29:58Z",
      "updated_at": "2020-01-04T18:29:58Z"
    },
    {
      "author": "p0W3RH311",
      "author_association": "NONE",
      "body": "with date probably this the regex must be more robust and flexible\r\n\r\n```\r\n$isdate = @'\r\n(?x)\r\n ^\r\n (?:\r\n   (?: 19\\d\\d | 20\\d\\d )        # year 1900..2099\r\n   [/-]                         # separator - or /\r\n   (?: 0[1-9] | 2\\d | 3[01])    # day 01..02..31\r\n   [/-]                         # separator - or /\r\n   (?: 0[1-9] | 1[12])          # month 01..02..12\r\n  )               \r\n $\r\n'@\r\n\r\n@('1987-01-12','2020/01/12','1999/13/13') -match $isdate\r\n```",
      "created_at": "2020-01-04T18:43:40Z",
      "updated_at": "2020-01-04T18:43:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> use regex to detect the model next the step\r\n\r\nYou ask about __operator__. Language operator must work for __all__ types. You can not use Regex.",
      "created_at": "2020-01-04T18:52:56Z",
      "updated_at": "2020-01-04T18:52:56Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "It would be nice to have, but for date it would need to be two date objects, _not_ two strings because there is already a problem with US dates being wrong in every other country. 6/1/2020 to 7/2/2020 refers to Jan and Feb except in the States. Processing to date uses fixed (US) processing to string uses local culture. Days would need to look at the local culture and uses choice of first day of the week. lu..ve only makes sense if you have French set as a your culture. Does Fri..Mon make sense ? Sun..Sat _doesn't_ if you consider the week as starting on Monday, but is fine if you use Sunday. Etc \r\n\r\n  A..Z would be helpful, but is A..z 26 items, 52 items (A..Z a..z) or 62items (ASCII 65-122 , including [ \\ ] ^ + ` ) \r\n\r\nIP addresses are probably wishful thinking. If I ask for 192.168.1.100 - 192.168.2.100 do you could 1.255 and 2.0 ? Etc. (they are valid addresses but with special uses). \r\n\r\nMost people have learned how to do what they need with integers (e.g. 0..30    DateTime.add() ) so the need is fairly  small and the complexity - and ability to create confusion - is relatively large.  \r\n\r\n",
      "created_at": "2020-01-06T09:25:49Z",
      "updated_at": "2020-01-06T09:25:49Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@jhoneill `'a'..'z'` is already a thing ^^",
      "created_at": "2020-01-06T12:07:11Z",
      "updated_at": "2020-01-06T12:07:24Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> @jhoneill `'a'..'z'` is already a thing ^^\r\n\r\n`\"a\"..\"z\"`\r\ngives  `Cannot convert value \"a\" to type \"System.Int32\".  `In 5   \r\n\r\nI never picked up that it had changed by 7 RC1 \r\n'a'..'Z' \r\nis not exactly intuitive.  \r\n\r\n",
      "created_at": "2020-01-06T14:01:01Z",
      "updated_at": "2020-01-06T14:01:01Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, I don't remember exactly when it became a thing, it was sometime in 6.x from memory, maybe 6.1?",
      "created_at": "2020-01-06T15:01:42Z",
      "updated_at": "2020-01-06T15:01:42Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It was in https://github.com/PowerShell/PowerShell/pull/5026",
      "created_at": "2020-01-06T17:30:09Z",
      "updated_at": "2020-01-06T17:30:09Z"
    },
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "Ranges of chars is pretty common in languages that have a range concept (but they usually also have a char literal type). Supporting date or IP literals would be interesting except it would be a breaking change. (Heck - we don't even have regex literals to date.) ",
      "created_at": "2020-01-06T18:53:46Z",
      "updated_at": "2020-01-06T18:53:46Z"
    },
    {
      "author": "p0W3RH311",
      "author_association": "NONE",
      "body": "an eaxmple of implementation but maybe is more robust with switch with other type\r\n\r\n```\r\nPS C:\\> $ExecutionContext.SessionState.InvokeCommand.PreCommandLookupAction = $null\r\n$ExecutionContext.SessionState.InvokeCommand.PreCommandLookupAction = {\r\n   param(\r\n      $cmd,\r\n      [System.Management.Automation.CommandLookupEventArgs]\r\n      $eventargs\r\n   )\r\n     if($cmd -imatch '(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday)\\.\\.(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday)') {\r\n        $eventargs.StopSearch = $true\r\n        $eventargs.CommandScriptBlock = {\r\n          $ldow = $Matches[1]\r\n          $rdow = $Matches[2]\r\n          $dowk = ([int][dayofweek]\"$ldow\")..([int][dayofweek]\"$rdow\") -as [dayofweek[]]\r\n          Microsoft.PowerShell.Utility\\Write-Output $dowk\r\n       }.GetNewClosure()\r\n    }\r\n}\r\n\r\n\r\nPS C:\\> sunday..monday\r\nSunday\r\nMonday\r\n\r\nPS C:\\> sunday..saturday\r\nSunday\r\nMonday\r\nTuesday\r\nWednesday\r\nThursday\r\nFriday\r\nSaturday\r\n\r\nPS C:\\> \r\n```\r\n\r\nwith date \r\n\r\n```\r\n[datetime]$ldate =  $Matches[1]  # 06/01/2020\r\n[datetime]$rdate =  $Matches[2]  # 18/01/2020\r\nif((get-date $rdate) -gt (get-date $ldate)) {\r\n   (1..(($rdate-$ldate).days)).foreach{$ldate.AddDays($_).ToShortDateString()}\r\n } else {\r\n  (1..(($ldate -$rdate).days)).foreach{$rdate.AddDays($_).ToShortDateString()}\r\n }\r\n```",
      "created_at": "2020-01-06T19:08:10Z",
      "updated_at": "2020-01-06T19:08:10Z"
    },
    {
      "author": "p0W3RH311",
      "author_association": "NONE",
      "body": "same concept with month:\r\n\r\n```\r\n$ExecutionContext.SessionState.InvokeCommand.PreCommandLookupAction = $null\r\n$ExecutionContext.SessionState.InvokeCommand.PreCommandLookupAction = {\r\n   param(\r\n      $cmd,\r\n      [System.Management.Automation.CommandLookupEventArgs]\r\n      $eventargs\r\n   )\r\n     $month = @{\r\n        January = 1\r\n        February = 2\r\n        March = 3\r\n        April = 4\r\n        May = 5\r\n        June = 6\r\n        July = 7\r\n        August = 8\r\n        September = 9\r\n        October = 10\r\n        November = 11\r\n        December = 12\r\n  }\r\n     if($cmd -imatch '(January|February|March|April|May|June|July|August|September|October|November|December)\\.\\.(January|February|March|April|May|June|July|August|September|October|November|December)') {\r\n        $eventargs.StopSearch = $true\r\n        $eventargs.CommandScriptBlock = {\r\n          $lm = $Matches[1]\r\n          $rm = $Matches[2]\r\n          if($month[$lm] -lt $month[$rm]) {\r\n          $mth = $month[$lm]..$month[$rm]\r\n          } else {\r\n          $mth = $month[$rm]..$month[$lm]\r\n          }\r\n          $mth | % {(Get-Culture).DateTimeFormat.GetMonthName($_) }\r\n       }.GetNewClosure()\r\n    }\r\n}\r\n\r\n\r\nPS C:\\> December..August\r\nAugust\r\nSeptember\r\nOctober\r\nNovember\r\nDecember\r\n\r\nPS C:\\>\r\n```\r\n\r\n",
      "created_at": "2020-01-06T19:38:04Z",
      "updated_at": "2020-01-06T19:38:04Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "\r\nIt would have to work in every supported language.  You can not hard code names of months, days etc. \r\n\r\nIt would also need to accept a culture so that on a French machine, I could request Spanish days and months. \r\n\r\nIn the end it becomes far more sensible to implement this as a function not an operator \r\n\r\n\r\n\r\n> PS C:\\> December..August\r\n> August\r\n> September\r\n> October\r\n> November\r\n> December\r\n\r\nThis is wrong in multiple ways : does December..August mean December 2019 to August 2020, in which case it has selected the wrong months, or does it mean December, November, October in that order. \r\n\r\n",
      "created_at": "2020-01-07T13:36:42Z",
      "updated_at": "2020-01-07T13:36:42Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "> @vexx32: 'a'..'z' is already a thing ^^\r\n\r\nIt's a thing because `[char]` (in most cases) \"naturally\" map onto an integer sequence (so we know how to step) and it seemed like an obvious target use case. The decision to accept strings as valid operands was based on the assumption that we would never attempt to implement \"string range\" functionality - Should it produce the cartesian product of all permutations? what alphabet would we pick - just visible ASCII chars, latin alphabet or exhaust all supported unicode planes? Does it even make sense from a space-complexity perspective? \r\n\r\nSo the key here is that `..` doesn't need to \"know\" anything about the alphabet or what the host application renders on screen - it just needs boundary values from which it produces a directed range of values.\r\n\r\nEven if we ignore the localization issue @jhoneill points out here, it's impossible to infer the behavior of a meaningful range expansion for months or weekdays exactly because they're cyclic in nature:\r\n\r\nRange expansion behavior (which is directional) would dictate:\r\n\r\n```\r\nPS ~> December..August\r\nDecember\r\nNovember\r\nOctober\r\nSeptember\r\nAugust\r\n```\r\n\r\nWhich is probably not what you want, and therefore not useful at all, 90% of the time - except for those 10% cases where it is, which we wouldn't be able to consistently implement if we were to respect the cyclic nature of time",
      "created_at": "2020-09-22T12:54:18Z",
      "updated_at": "2020-09-22T12:54:18Z"
    }
  ],
  "created_at": "2020-01-04T17:22:48Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Language"
  ],
  "number": 11489,
  "state": "open",
  "title": "Range Operator work with date and ip",
  "updated_at": "2020-09-22T12:54:18Z"
}