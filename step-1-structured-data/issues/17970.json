{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17970",
  "author": "pcroland",
  "body": "I was trying to save my tool's output to a txt\r\n![img](https://telegra.ph//file/c49c502f584b3b557831d.png)\r\nBut despite specifying `-Width 150` all lines has been wrapped at 80:\r\n![img](https://telegra.ph//file/6566809cfacca377e11fb.png)\r\nIs there any way to actually disable line wrapping?\r\n\r\nPowershell version: 7.2.6",
  "closed_at": null,
  "comments": [
    {
      "author": "kasini3000",
      "author_association": "NONE",
      "body": "Weird bug, I can reproduce the problem.\r\n```powershell\r\n$a = '123456789-' * 6\r\nOut-File -InputObject $a -FilePath \"${PSScriptRoot}/a.txt\"  -Width 11 -Encoding ASCII\r\nOut-File -InputObject $a -Append -FilePath \"${PSScriptRoot}/a.txt\"  -Width 12 -Encoding ASCII\r\nOut-File -InputObject $a -Append -FilePath \"${PSScriptRoot}/a.txt\"  -Width 21 -Encoding ASCII\r\n```\r\n\r\nBut at the same time, I found that the commands in the manual are normal:\r\n$Procs = Get-Process\r\nOut-File -FilePath .\\Process.txt -InputObject $Procs -Encoding ASCII -Width 50",
      "created_at": "2022-08-26T04:55:39Z",
      "updated_at": "2022-08-26T04:55:39Z"
    },
    {
      "author": "johnhuang1984",
      "author_association": "NONE",
      "body": "maybe is works only in array",
      "created_at": "2022-08-26T07:51:56Z",
      "updated_at": "2022-08-26T07:51:56Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> Is there any way to actually disable line wrapping?\r\n\r\nI don't use `Width` parameter, output did not wrap, the longest line is 1536 symbols:\r\n```powershell\r\nPS > ffmpeg --help 2>&1 | Out-File help.txt\r\nPS > [Linq.Enumerable]::Max( [int[]] (gc help.txt).foreach{ $_.Length } )\r\n1536\r\n```",
      "created_at": "2022-08-26T08:08:17Z",
      "updated_at": "2022-08-26T08:12:48Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@pcroland  the wrapping at 80 is coming from the original app.  And looking at the way the text is indented, where re-wrapping it would be mean stripping out  _some_ `[line break][spaces]` combinations, and keeping others is going to be painful. \r\n\r\nI think the help text is wrong or at least misleading.  Your app is sending back strings and let's see what PowerShell does when formatting stuff that is already a string....  \r\n\r\n```\r\n> \"123456789 \" * 5 | out-string -Width 30\r\n123456789 123456789 123456789 123456789 123456789\r\n```\r\n\r\nSo input is one or more strings `Out-String` just outputs them, but with objects... \r\n\r\n```dir |  out-string -Width 30\r\n\r\nMode             LastWriteTime\r\n----             -------------\r\nla---      18/10/2021    08:39\r\nla---      20/05/2022    15:00\r\n```\r\n\r\nNon-strings are **formatted** with a maximum width\r\n\r\nTo prepare stuff for writing to a file, I think `Out-File`  pushes its input through `Out-String` . So the strings from your app won't have any formatting done to them. \r\n\r\nThere are plenty of word wrapping regular expressions out there.   But you could try this (with the caveat that the formatting in that text is going to be nasty )\r\n\r\n``` \r\nMyApp | Foreach-object {$_  -replace  \"([^\\n]{1,49}\\S)(\\s+|$)|(\\S{50})(?=\\S)\",\"`$1`$3`r`n\" }\r\n```\r\nthe regular expression says  \r\nif you find (49 non-newline characters, followed by a non-space) then either spaces or the end of the line\r\nOR you find (50 non-spaces)  followed by a 51st non space. \r\nthe Put a CR LF after (whichever you found)  \r\n\r\nYou MIGHT find that putting spaces after the `r`n at the end gives you workable formatting. \r\n",
      "created_at": "2022-08-26T11:08:36Z",
      "updated_at": "2022-08-26T11:08:36Z"
    }
  ],
  "created_at": "2022-08-26T01:13:18Z",
  "labels": [
    "Issue-Bug",
    "WG-Cmdlets-Utility",
    "Needs-Triage",
    "WG-Engine-Format"
  ],
  "number": 17970,
  "state": "open",
  "title": "[BUG] `Out-File`'s `-Width` doesn't do anything",
  "updated_at": "2022-09-19T15:41:21Z"
}