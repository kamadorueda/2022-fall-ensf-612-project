{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3302",
  "author": "FriedrichWeinmann",
  "body": "Verified on 5.0 and 5.1\r\nWhen testing an enumerated value that has the numeric value of 0, this will be evaluated as false.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nPaste this into the console:\r\n```powershell\r\nif ([DayOfWeek]::Sunday) { \"It Works\" }\r\nelse { \"It doesn't work\" }\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nOutput:\r\n`It Works`\r\n\r\nActual behavior\r\n---------------\r\n\r\nOutput:\r\n`It doesn't work`\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nPSVersion                      5.1.14393.693\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.14393.693\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n",
  "closed_at": "2018-09-18T21:26:14Z",
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "This is by design. Enums are simply integer values and In a PowerShell Boolean context, 0 evaluates to false.",
      "created_at": "2017-03-10T20:41:40Z",
      "updated_at": "2017-03-10T20:41:40Z"
    },
    {
      "author": "FriedrichWeinmann",
      "author_association": "NONE",
      "body": "No offense, but that's very much a matter of perspective. The system treats them like numbers, yes. But _logically_ they represent a specific thing. A day of week. A color. A mode or type of action.\r\n\r\nSo yeah, right from the programmatic background it might make sense. But from a human's perspective it's totally counterintuitive.\r\nI haven't been able to explain this to a single admin colleague yet without his scratching his head and calling it insanity.",
      "created_at": "2017-03-10T20:55:50Z",
      "updated_at": "2017-03-10T20:55:50Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "If we had a better story for breaking changes, I would have changed this behavior years ago because I think the design is wrong.\r\n\r\nIf we could statically detect code that would be broken by changing this, it would be easier for us to make an informed decision on the trade-offs. As it stands, changing behaviors might be as bad as leaving things as is.",
      "created_at": "2017-03-12T20:36:46Z",
      "updated_at": "2017-03-12T20:36:46Z"
    },
    {
      "author": "FriedrichWeinmann",
      "author_association": "NONE",
      "body": "Actually, I was rather surprised you _introduced_ this change in 5.0.\r\n\r\nI had lots of failing functions that used these sub-optimal - but previously working - notations to check whether a parameter was bound at all:\r\n```PowerShell\r\nif ($DayOfWeek) { }\r\nif ($PSBoundParameters[\"DayOfWeek\"]) {}\r\n```\r\nStill lots of examples for this lying around the web, all of which will not work properly with most Enums. And especially the first one is one heck of a lot easier to read than always having to use\r\n```PowerShell\r\nif ($PSBoundParameters.ContainsKey(\"DayOfWeek\")) {}\r\n```",
      "created_at": "2017-03-12T21:44:27Z",
      "updated_at": "2017-03-12T21:44:27Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "In that case, we should revisit this.",
      "created_at": "2017-03-13T05:08:34Z",
      "updated_at": "2017-03-13T05:08:34Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee discussed this and this usage is something we agree to support so that enums are not $null and retain the previous behavior",
      "created_at": "2017-03-15T23:47:05Z",
      "updated_at": "2017-03-15T23:47:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Should we close \"by design\"?",
      "created_at": "2018-09-18T13:02:55Z",
      "updated_at": "2018-09-18T13:02:55Z"
    },
    {
      "author": "FriedrichWeinmann",
      "author_association": "NONE",
      "body": "I sure don't see this getting reversed anymore anyway, so it might as well be.\r\nStill think it was the wrong call, but I suppose that is over and done",
      "created_at": "2018-09-18T13:24:49Z",
      "updated_at": "2018-09-18T13:24:49Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Unfortunately, we've already shipped 6.0 and 6.1 like this and making a change now is even more risky from a compatibility standpoint.  As @lzybkr indicated, if there was some data on how much existing scripts would or would not be impacted by such a change, we can still consider it.  However, unless there's strong community push for this, I think we should close this as `by design`.",
      "created_at": "2018-09-18T21:26:13Z",
      "updated_at": "2018-09-18T21:26:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Perhaps we need \"Consider-For-Version-7\" label for such issues. We could re-review in time of 7.0 version planning.\r\n\r\n@FriedrichWeinmann The best way is to open issue in PSScriptAnalyzer repo. This will definitely reduce the number of scripts affected by this problem and allow it to be fixed here as proposed.",
      "created_at": "2018-09-19T04:44:28Z",
      "updated_at": "2018-09-19T04:44:28Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov the intent is to never have a v7 otherwise we'll end up fragmenting the PowerShell community further between 5.x and 6.  I've added the `Breaking-Change` label to make it easier to find this later if necessary.",
      "created_at": "2018-09-21T23:04:56Z",
      "updated_at": "2018-09-21T23:04:56Z"
    }
  ],
  "created_at": "2017-03-10T19:44:19Z",
  "labels": [
    "Issue-Bug",
    "WG-Engine",
    "Resolution-By Design",
    "Breaking-Change",
    "Committee-Reviewed"
  ],
  "number": 3302,
  "state": "closed",
  "title": "Enumerated Values with numeric value 0 are validated as false",
  "updated_at": "2018-09-21T23:04:56Z"
}