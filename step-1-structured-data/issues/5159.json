{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5159",
  "author": "alx9r",
  "body": "`Invoke-WebRequest` and `Invoke-RestMethod` are rather permissive compared to web browsers with respect to how the SSL/TLS connection is established.  #4899 would provide support for user-defined certificate validation in `Invoke-WebRequest` and `Invoke-RestMethod`.  That is an improvement but only affects part of the permissiveness.  Another part is the cipher suites.  \r\n\r\nThe cipher suites offered by `Invoke-WebRequest` and `Invoke-RestMethod` seem to be [determined by system-wide registry key changes](https://technet.microsoft.com/en-us/library/dn786418(v=ws.11).aspx#BKMK_SchannelTR_CipherSuites).  The discussion in dotnet/corefx#21577 includes [one example](https://github.com/dotnet/corefx/issues/21577#issuecomment-322321460) of why such a system-wide setting is problematic.  Basically it means that in practice all .Net things on a single computer end up offering all cipher suites needed by any .Net thing that needs to run on that computer. \r\nThe net result is lowest common denominator security with respect to cipher suites.  dotnet/corefx#21577 would make the cipher suites configurable per connection.  Once that is implemented, it would be great for that configurability to be exposed by `Invoke-WebRequest` and `Invoke-RestMethod`.",
  "closed_at": null,
  "comments": [
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "This is a dupe of #2662",
      "created_at": "2017-10-19T08:25:44Z",
      "updated_at": "2017-10-19T08:25:44Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "@markekraus This doesn't seem like a duplicate of #2662 to me.  #2662 seems to be about restricting SSL/TLS _protocols_ and _protocol versions_.  This issue is about restricting the _cipher suites_ offered during SSL/TLS negotiation.  These are two different, but related aspects.  ([This page](https://msdn.microsoft.com/en-us/library/mt813794(v=vs.85).aspx) shows, for example, the cipher suites that _could_ be enabled on a Windows 10 computer for each version of TLS.) \r\n\r\nIt seems to me that in order for it to be possible for PowerShell automation using https to remain up-to-date with current policy (e.g. keep up with browsers) we need control over (at least) the following on a per-call basis:\r\n\r\n1. Certificate Validation (#4899)\r\n2. Permitted Protocols and Versions (#2662)\r\n3. Permitted Cipher Suites (this issue #5159)\r\n\r\n",
      "created_at": "2017-10-20T01:28:27Z",
      "updated_at": "2017-10-20T01:28:27Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Ah ok. \r\n\r\nThe problem being, this is currently not possible in CoreFX and from the threads you linked it's not even on the roadmap (yet), its all theoretical at this point, yes? We can't add the feature in PowerShell core until it is available in CoreFX and it's not clear that it will be available or not. \r\n\r\nI agree this would be a nice to have feature but it can't be implemented at this time. If it were clear this was being added in CoreFX I would reopen this issue. @alx9r let's watch those CoreFX issues and if they reach a point where it will be implemented we can either open a new issue or re-open this one.",
      "created_at": "2017-10-20T08:39:32Z",
      "updated_at": "2017-10-20T08:39:32Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "Got it.  Thanks @markekraus.",
      "created_at": "2017-10-20T16:13:58Z",
      "updated_at": "2017-10-20T16:13:58Z"
    },
    {
      "author": "petemounce",
      "author_association": "NONE",
      "body": "I would find it really useful to be able to specify cipher suites. I have automation that hits github via PowerShell invoke-webrequest that stopped working yesterday.\r\n\r\nGoogling picked up that github have disabled some weak cipher suites on 22/February: https://githubengineering.com/crypto-removal-notice/",
      "created_at": "2018-02-23T22:43:22Z",
      "updated_at": "2018-02-23T22:43:22Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": ">I agree this would be a nice to have feature but it can't be implemented at this time. If it were clear this was being added in CoreFX I would reopen this issue. @alx9r let's watch those CoreFX issues and if they reach a point where it will be implemented we can either open a new issue or re-open this one.\r\n\r\nPer [dotnet/corefx#21577](https://github.com/dotnet/corefx/issues/21577#issuecomment-482764961):\r\n\r\n>We have just merged support for changing cipher suites in SslStream: dotnet/corefx#24588 - currently Linux with OpenSsl 1.1.1 is or OSX is required.\r\n\r\n@iSazonov Can you reopen this issue?  My OP is still on-point AFAICT, and corefx now seems to have the support to make this possible.",
      "created_at": "2019-05-01T16:42:31Z",
      "updated_at": "2019-05-01T16:42:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We can continue after moving to .Net Core 3.0.",
      "created_at": "2019-05-01T18:06:24Z",
      "updated_at": "2019-05-01T18:06:24Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Looks like it still needs to be surfaced in HttpClient/HttpClientHandler. Also, I'm not a fan of implementing this if it's not supported on all platforms and it is currently not supported on windows in SslStream. Might be something that could be managed as an experimental feature once available in HttpClient. ",
      "created_at": "2019-05-04T20:08:10Z",
      "updated_at": "2019-05-04T20:08:10Z"
    }
  ],
  "created_at": "2017-10-19T03:01:39Z",
  "number": 5159,
  "state": "open",
  "title": "Support changing cipher suites offered by Invoke-WebRequest and Invoke-RestMethod",
  "updated_at": "2019-05-04T20:08:10Z"
}