{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13152",
  "author": "JustinGrote",
  "body": "## Summary of the new feature/enhancement\r\n\r\nUsing modern types such as List/OrderedList/SortedList/etc. is becoming more common for performance reasons, but the array manipulation operators reconstruct these as `[Object[]]` which is not ideal for many already discussed reasons, and using other syntax such as `.Add()` is awkward especially for newer Powershell Users. `Dictionary` does not have this issue as the property assignment operators work fine.\r\n\r\nI propose that, if a class implements `IList` and does not have `op_Addition` or `op_Subtraction` already defined, that the operators will use the standard `IList` `Add` and `Remove` methods to manipulate the array and preserve it rather than recasting all the contents into a new `[Object[]]`.\r\n\r\nThis will allow users who want to use more advanced types for performance to be able to do so without breaking any behavior of `@()` syntax or  normal powershell user experience.\r\n\r\nNOTE: https://github.com/PowerShell/PowerShell/issues/5643 proposed a lot of syntactic sugar around lists or replacing the default type with lists. This Feature Request is smaller in scope but compatible and is less likely to cause breaking regressions.\r\n\r\n\r\n## Potential Breaking Changes\r\n1. Scripts that anticipate the existing behavior of casting to an `[Object[]]` and work around it could break, but it would have to be very specific and very rare edge case, for instance something that recasts it to a list would simply just cast a list to a list and not break. Could be controlled with a preference variable\r\n\r\n\r\n## EDITS\r\n\r\n1. Narrowed scope to just `+=` and `-=` operators due to @SeeminglyScience's valid concerns",
  "closed_at": "2020-07-10T18:34:45Z",
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "It's worth noting that this would be the only instance afaik where the `+=` operator would actually mutate the object on the LHS instead of creating a new object and assigning it.\r\n\r\nI don't know if that's necessarily a good reason to object, I'm on the fence about it personally.",
      "created_at": "2020-07-10T16:43:57Z",
      "updated_at": "2020-07-10T16:43:57Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "@SeeminglyScience well you could always type the result to `[Object[]]` if you want to preserve the existing behavior for wahtever reason :)",
      "created_at": "2020-07-10T17:02:14Z",
      "updated_at": "2020-07-10T17:02:14Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "I mean from the perspective of the language this would be the only instance where the LHS actually gets mutated.  It's a little inconsistent since it's mostly syntactic sugar for `$a = $a + $b`.  Also how would this interact with variable write breakpoints?",
      "created_at": "2020-07-10T17:17:54Z",
      "updated_at": "2020-07-10T17:17:54Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "It'd be similar to what I'm doing here: https://github.com/PowerShell/PowerShell/pull/12930?notification_referrer_id=MDE4Ok5vdGlmaWNhdGlvblRocmVhZDkyNjkxODY3NzozMjQwNzg0MA%3D%3D#issuecomment-648817845\r\n\r\nAt least in terms of effectively mutating the LHS. We can pretty much check for IList, then do a check for `IsFixedSize` -- if that's true, we just fallback to existing behaviour. If it's not, we call `Add()` and attempt to insert the items.\r\n\r\nI would _prefer_ not to have to deal with merge conflicts in those code paths though, the very thought is painful \ud83d\ude2d, so if we can get that either merged or rejected first..... \ud83d\ude4f ",
      "created_at": "2020-07-10T17:20:25Z",
      "updated_at": "2020-07-10T17:20:25Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "I agree probably should block on #12930, good call on checking for `IsFixedSize`",
      "created_at": "2020-07-10T17:24:28Z",
      "updated_at": "2020-07-10T17:24:52Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "There's some surrounding discussion of this in https://github.com/PowerShell/PowerShell/issues/5643 as well, it seems.",
      "created_at": "2020-07-10T17:31:03Z",
      "updated_at": "2020-07-10T17:31:03Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> It'd be similar to what I'm doing here: #12930 \r\n\r\nThat still mostly fits with the existing `$a = $a + $b` rules.  Only difference is with an event the actual value of `$a` is hidden from the caller.  At the end of the day it's still usually `$delegate1 = $delegate1 + $delegate2`.  Also nothing is mutated here, if the event implementer holds onto a copy of the original delegate, it'll still be that original delegate.\r\n\r\n> At least in terms of effectively mutating the LHS. We can pretty much check for IList, then do a check for `IsFixedSize` -- if that's true, we just fallback to existing behaviour. If it's not, we call `Add()` and attempt to insert the items.\r\n\r\nRight but what I'm saying is that all existing support for addition adds two things together and returns a new object.  Even the existing array support basically does `$array = $array + [object[]]$item`.",
      "created_at": "2020-07-10T17:42:20Z",
      "updated_at": "2020-07-10T17:52:22Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "> There's some surrounding discussion of this in #5643 as well, it seems.\r\nI referenced this in  my original post, the goal here was to narrow the scope to just the operators, that post has gone into changing away from Array as the default.",
      "created_at": "2020-07-10T17:51:52Z",
      "updated_at": "2020-07-10T17:51:52Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Just so it's crystal clear what I mean, here's an example:\r\n\r\n```powershell\r\n$a = 1..10\r\n$b = $a\r\n$b += 11\r\n\r\n$a.Length # 10\r\n$b.Length # 11\r\n\r\n$a = [System.Collections.Generic.List[int]](1..10)\r\n$b = $a\r\n# What `$b += 11` would translate to\r\n$b.Add(11)\r\n\r\n$a.Count # 11\r\n$b.Count # 11\r\n```\r\n\r\nThe `+=` syntax does not currently imply that the LHS will be mutated.  I understand that the mutation is the point, that's what makes it faster.  That said, mutation isn't free in terms of design.  If you don't *know* you're mutating the LHS that could end up being just as problematic in the long term.  Calling `List<>.Add` explicitly makes it very clear what's happening.",
      "created_at": "2020-07-10T18:08:35Z",
      "updated_at": "2020-07-10T18:08:35Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "@SeeminglyScience sure, totally get your point, I'm just trying to envision a scenario where if your logical flow is that you want a new array but preserve the old array and this is the syntax you would be using vs. just creating a new array.\r\nE.g. why would you do \r\n```powershell\r\n$a = 1..10\r\n$b = $a\r\n$b += 11\r\n```\r\ninstead of \r\n```powershell\r\n$a = 1..10\r\n$b = $a + 11\r\n```\r\nand \r\n```powershell\r\n$a = 1..10\r\n$a += 11\r\n```\r\n\r\n\r\nFrom just a logical standpoint, the fact that $a is still associated to $b because you did $a = $b is a side effect that you explicity called out, so I think you would know that it's doing it. Regardless, still not a problem that I think documentation wouldn't solve, it wouldn't be a completely new phenomenom in Powershell (e.g. lots of commands/etc. act differently depending on if you are passing a string vs. an object vs. a hashtable, etc.\r\n\r\nEDIT: I can see a case for $b = $a + 11 still returning a brand new `object[]` to be important, as one reasonably may not expect that $a would change as a result of this operation, maybe the scope should be narrowed to specifically the `+=` and `-=` operators only.",
      "created_at": "2020-07-10T18:22:03Z",
      "updated_at": "2020-07-10T18:26:40Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@JustinGrote, this looks what I've originally proposed in #5805 (except for the `-` / `-=` part), but then @PetSerAl raised valid concerns, similar to @SeeminglyScience's - the relevant part of the discussion starts at https://github.com/PowerShell/PowerShell/issues/5805#issuecomment-367866807\r\n\r\n",
      "created_at": "2020-07-10T18:30:07Z",
      "updated_at": "2020-07-10T18:31:18Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "@mklement0 agreed, and what is in that issue is close enough in scope to this one that I'm going to close it as a dupe of that one.\r\n\r\nClosing in favor of continued #5805 discussion",
      "created_at": "2020-07-10T18:34:45Z",
      "updated_at": "2020-07-10T18:34:45Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> I'm just trying to envision a scenario where if your logical flow is that you want a new array but preserve the old array and this is the syntax you would be using vs. just creating a new array.\r\n\r\nSo mutation is most problematic when it comes to arguments. Here's an example of where things can go poorly:\r\n\r\n```powershell\r\nusing namespace System.Collections.Generic\r\n\r\nfunction Invoke-SomeExecutable {\r\n    param([List[string]] $ArgumentList)\r\n    end {\r\n        if ($ArgumentList[-1] -ne '/silent') {\r\n            # Mutates the *caller's* copy of `$ArgumentList`\r\n            $ArgumentList.Add('/silent')\r\n        }\r\n\r\n        # The real line would be something like:\r\n        # & something.exe @ArgumentList\r\n        Write-Host ($ArgumentList -join ' ')\r\n    }\r\n}\r\n\r\n# Pretend this was built iteratively based on conditions to justify it being a list\r\n$commandLineArgs = [List[string]]('/computer', 'servername')\r\n$serverList = 1..5 | ForEach-Object { \"DC$_\" }\r\nforeach ($server in $serverList) {\r\n    $commandLineArgs[-1] = $server\r\n    Invoke-SomeExecutable $commandLineArgs\r\n}\r\n```\r\n\r\nwhich returns\r\n\r\n```raw\r\n/computer DC1 /silent\r\n/computer DC1 DC2 /silent\r\n/computer DC1 DC2 DC3 /silent\r\n/computer DC1 DC2 DC3 DC4 /silent\r\n/computer DC1 DC2 DC3 DC4 DC5 /silent\r\n```\r\n\r\n> E.g. why would you do\r\n> \r\n> ```powershell\r\n> $a = 1..10\r\n> $b = $a\r\n> $b += 11\r\n> ```\r\n> \r\n> instead of\r\n> \r\n> ```powershell\r\n> $a = 1..10\r\n> $b = $a + 11\r\n> ```\r\n\r\nWhat would that example do though? If `$a` was a `List<>`, what would `$b` contain? Would it be\r\nthe same list as `$a` (if so the same issue occurs) or would it be `$null` because `List<>.Add` has a void return?",
      "created_at": "2020-07-10T18:39:16Z",
      "updated_at": "2020-07-10T18:39:16Z"
    }
  ],
  "created_at": "2020-07-10T16:29:11Z",
  "number": 13152,
  "state": "closed",
  "title": "Feature Request: Support +/-/+=/-= operators for all IList types",
  "updated_at": "2020-07-10T18:39:16Z"
}