{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6989",
  "author": "mklement0",
  "body": "Note: Fixing this inconsistency is probably not an option so as not to break existing code.\r\nIf so, it should be _documented_.\r\n\r\nPowerShell by design applies the _invariant_ culture when converting from a string, which applies to both explicit conversions with casts and implicit ones during parameter binding in _functions_.\r\n\r\nBy contrast, a _culture-sensitive_ conversion is performed during parameter binding for _compiled cmdlets_.\r\n\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n# Create a cmdlet that accepts a [datetime] argument.\r\nAdd-Type @'\r\n  using System;\r\n  using System.Management.Automation;\r\n  [Cmdlet(\"Get\", \"Foo_Cmdlet\")]\r\n  public class GetFooCmdlet : Cmdlet {\r\n\r\n    [Parameter(Position=0)]\r\n    public DateTime Date { get; set; }\r\n\r\n    protected override void ProcessRecord() {\r\n      WriteObject(Date);      \r\n    }\r\n  }\r\n'@ -PassThru | % Assembly | Import-Module\r\n\r\n# Define a seemingly equivalent function.\r\nfunction Get-Foo_Func {\r\n  param(\r\n    [DateTime] $Date\r\n  )\r\n  process {\r\n    $Date\r\n  }\r\n}\r\n\r\n$prevCulture = [cultureinfo]::CurrentCulture\r\n[cultureinfo]::CurrentCulture = 'de-DE'\r\n\r\n# This German-format date string doesn't work with the invariant culture.\r\n# E.g., [datetime] '19-06-2018' breaks.\r\n$dateStr = '19-06-2018'\r\n\r\n# Pass the string to a [datetime]-typed parameter to force implicit conversion.\r\n\r\n# Function: INVARIANT CULTURE is applied -> breaks.\r\nGet-Foo_Func $dateStr\r\n\r\n# Cmdlet: CURRENT CULTURE is applied -> succeeds.\r\nGet-Foo_Cmdlet $dateStr\r\n\r\n[cultureinfo]::CurrentCulture = $prevCulture\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n_Both_ calls (`Get-Foo_Func`) and (`Get-Foo_Cmdlet`) should fail with:\r\n\r\n```none\r\nGet-Foo_Func : Cannot process argument transformation on parameter 'Date'. Cannot convert value \"19-06-2018\" to type \"System.DateTime\". Error: \"String was not recognized as a valid DateTime.\"\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n`Get-Foo_Func` fails, and `Get-Foo_Cmdlet` succeeds:\r\n```none\r\nGet-Foo_Func : Cannot process argument transformation on parameter 'Date'. Cannot convert value \"19-06-2018\" to type \"System.DateTime\". Error: \"String was not recognized as a valid DateTime.\"\r\n#...\r\n\r\nDienstag, 19. Juni 2018 00:00:00\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nPowerShell Core v6.0.2 on macOS 10.13.4\r\nPowerShell Core v6.0.2 on Ubuntu 16.04.4 LTS\r\nPowerShell Core v6.0.2 on Microsoft Windows 10 Pro (64-bit; Version 1709, OS Build: 16299.371)\r\nWindows PowerShell v5.1.16299.251 on Microsoft Windows 10 Pro (64-bit; Version 1709, OS Build: 16299.371)\r\n```\r\n",
  "closed_at": "2018-11-24T23:17:20Z",
  "comments": [
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "One question is: should these both fail, or both work? It would make sense to me if they both worked in a given locale, although I can imagine that making scripts much harder to make portable.",
      "created_at": "2018-06-04T18:03:06Z",
      "updated_at": "2018-06-04T18:03:06Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@rjmholt:\r\n\r\nGiven that in the vast majority of to-and-from string conversion cases PowerShell - by design - applies the  invariant culture, I think both should _fail_.\r\n\r\nFor instance, the following fails, irrespective of what the current culture is:\r\n\r\n```powershell\r\n[datetime] '19-06-2018'  # always fails\r\n```\r\n\r\nTo get culture-sensitive behavior in this case, you need to call a .NET method directly:\r\n\r\n```powershell\r\n[datetime]::Parse('19-06-2018')  # only works in certain cultures; e.g., 'de-DE'\r\n[datetime]::Parse('19-06-2018', [cultureinfo] 'de-DE') # OK \r\n```\r\n\r\nNote that string interpolation also always applies culture-_invariant_ behavior:\r\n\r\n```powershell\r\n\"$(1.2)\"  # *always* yields '1.2'\r\n```\r\n\r\n\r\nThe issue at hand is another instance of written-in-PowerShell code behaving correctly (as far as I can tell), in contrast with compiled cmdlets.\r\nUnfortunately,  when another such inconsistency was recently resolved, the wrong behavior was chosen - see #2035.",
      "created_at": "2018-06-04T20:34:47Z",
      "updated_at": "2018-06-04T20:34:47Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "Looks like a dup #3348.",
      "created_at": "2018-06-24T15:53:00Z",
      "updated_at": "2018-06-24T15:53:00Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@PetSerAl: \r\n\r\nIndeed it is, thank you; I'm sorry to hear that it was decided then that it wouldn't be fixed. \r\n\r\nI'm hoping this can be revisited.\r\n",
      "created_at": "2018-06-24T16:07:55Z",
      "updated_at": "2018-06-24T16:07:55Z"
    }
  ],
  "created_at": "2018-06-04T17:17:01Z",
  "number": 6989,
  "state": "closed",
  "title": "Compiled cmdlets - unlike functions - perform culture-sensitive type conversion during parameter binding",
  "updated_at": "2018-11-24T23:17:20Z"
}