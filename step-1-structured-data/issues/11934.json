{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11934",
  "author": "beatcracker",
  "body": "# PR Summary\r\n\r\nAdd parameter `SchemaFile` to the `Test-Json` cmdlet.\r\n\r\n## PR Context\r\n\r\nCurrent implementation allows JSON schema to be only passed as string. This makes it impossible to validate JSON files against the schema that includes definitions from separate files: https://json-schema.org/understanding-json-schema/structuring.html#reuse\r\n\r\n```json\r\n{ \"$ref\": \"definitions.json#/address\" }\r\n```\r\n\r\nThe new parameter accepts literal path to the JSON schema file and allows JSON files to be validated against such schemas.\r\n\r\n## Notes\r\n\r\n1. I don't have much experience with C#, so please, bear with me.\r\n2. ~This PR currently lacks tests. I think that I need to extend [Test-Json.Tests.ps1](https://github.com/PowerShell/PowerShell/blob/master/test/powershell/Modules/Microsoft.PowerShell.Utility/Test-Json.Tests.ps1), but I'm not sure where to put JSON schema files with includes. Would [assets](https://github.com/PowerShell/PowerShell/tree/master/test/powershell/Modules/Microsoft.PowerShell.Utility/assets) folder be ok?~\r\n3. @iSazonov is the author of the original `Test-Json` implementation and there is #11397 that should be taken into account.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [x] Issue filed: https://github.com/MicrosoftDocs/PowerShell-Docs/pull/6134\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).",
  "closed_at": "2020-06-02T20:51:58Z",
  "comments": [
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "[![CLA assistant check](https://cla.opensource.microsoft.com/pull/badge/signed)](https://cla.opensource.microsoft.com/PowerShell/PowerShell?pullRequest=11934) <br/>All CLA requirements met.",
      "created_at": "2020-02-23T22:37:38Z",
      "updated_at": "2020-05-29T06:07:52Z"
    },
    {
      "author": "beatcracker",
      "author_association": "CONTRIBUTOR",
      "body": "Signed CLA, added tests.",
      "created_at": "2020-02-24T16:32:57Z",
      "updated_at": "2020-02-24T16:32:57Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "We may also want to consider #11999 in tandem with this PR and the overall behaviour when a JSON input fails validation / schema.",
      "created_at": "2020-03-04T18:34:10Z",
      "updated_at": "2020-03-04T18:34:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "My initial thoughts was and I still believe that users want to see errors of the JSON validation. ",
      "created_at": "2020-03-04T19:01:43Z",
      "updated_at": "2020-03-04T19:01:43Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov I would agree that there is potential value in being able to see that, but I think that having that as an explicit opt-in would be more useful. There's a lot of cases where you just want to test whether some input JSON is valid or not, and not do much else.\r\n\r\nFor the cases where the full feedback is asked for, I would expect we output a rich object indicating success status and a proper list of structured data indicating any validation failures that were encountered, all on the one output object. The current state of having two separate and simultaneous modes of outputting data across two separate streams is, I think, much more difficult for folks to work with.",
      "created_at": "2020-03-05T04:34:40Z",
      "updated_at": "2020-03-05T04:34:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">  I think that having that as an explicit opt-in would be more useful. There's a lot of cases where you just want to test whether some input JSON is valid or not, and not do much else.\r\n\r\nI don't know what is a primary scenario. In interactive scenario users could get verbose output without extra switches and in script scenario we could do `Test-Json -Quite` like we do in Test-Connection cmdlet - it would be non-breaking change.",
      "created_at": "2020-03-05T15:54:16Z",
      "updated_at": "2020-03-05T15:54:16Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov I don't think that changing behaviours between interactive use and script is ever a good idea. It should _always_ be an option for the user to specify. Any kind of black magic like that will simply confuse users and make it more difficult to appropriately diagnose issues.\r\n\r\nCmdlet behaviours should be consistent.",
      "created_at": "2020-03-05T17:58:51Z",
      "updated_at": "2020-03-05T17:58:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I don't think that changing behaviours between interactive use and script is ever a good idea.\r\n\r\nI wonder you say this after investigating in Test-Connection :-)",
      "created_at": "2020-03-05T18:56:21Z",
      "updated_at": "2020-03-05T18:56:21Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov If you see a different behaviour between script and interactive use there, let me know. \ud83d\ude42 ",
      "created_at": "2020-03-05T19:08:02Z",
      "updated_at": "2020-03-05T19:08:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 I say that Test-Json probably should works like Test-Connection.\r\nTest-Connection returns some results, Test-Connection  -Quite returns only true/false. Test-Json returns  some results. Test-Json -Quite returns only true/false.",
      "created_at": "2020-03-05T19:13:30Z",
      "updated_at": "2020-03-05T19:13:30Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov if it wasn't a significant breaking change I'd recommend heavily for `Test-Connection` to be only true/false output to align with things like `Test-Path`, and add a new cmdlet for the full information (e.g., `Get-ConnectionInfo` or something along those lines).\r\n\r\nBut in practice as long as there is a way to get both the rich result and the quiet one, whether it's a switch or another cmdlet entirely, I think it'll be OK overall. I do think there's more value in a rich output object than outputting errors, though. \ud83d\ude42 ",
      "created_at": "2020-03-05T19:17:03Z",
      "updated_at": "2020-03-05T19:17:53Z"
    },
    {
      "author": "beatcracker",
      "author_association": "CONTRIBUTOR",
      "body": "My 2 cents: I use Test-Json in Pester tests and I would prefer if there was a way to display validation errors or at least get them all from underlying exception without too much hassle. I'm not sure if implementing `-Detailed` parameter is in the scope of this PR, but I could take shot at it if needed.",
      "created_at": "2020-03-07T17:49:59Z",
      "updated_at": "2020-03-07T17:49:59Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "If you'd like to take a stab at it in this PR, or even as a follow up PR, it'd be greatly appreciated either way! \ud83d\ude0a ",
      "created_at": "2020-03-07T18:51:12Z",
      "updated_at": "2020-03-07T18:51:12Z"
    },
    {
      "author": "beatcracker",
      "author_association": "CONTRIBUTOR",
      "body": "Sorry, folks haven't been able to work on this lately.\r\n\r\n> If you'd like to take a stab at it in this PR, or even as a follow up PR, it'd be greatly appreciated either way! \ud83d\ude0a\r\n\r\nI'd prefer the `-Detailed` switch to be a separate PR, since I don't have a clear idea of how this should work and I'll need help to figure it out. Meanwhile this PR is small backwards compatible change which could be merged as soon as everybody is happy with my code.\r\n\r\nWhat do you say?",
      "created_at": "2020-03-14T15:57:01Z",
      "updated_at": "2020-03-14T15:57:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@beatcracker Please ignore discussion about additional parameters and keep current behavior.",
      "created_at": "2020-03-14T16:26:10Z",
      "updated_at": "2020-03-14T16:26:10Z"
    },
    {
      "author": "beatcracker",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov, sure we can talk about it later. Anything else I could do to improve this PR?",
      "created_at": "2020-03-14T23:09:01Z",
      "updated_at": "2020-03-14T23:09:01Z"
    },
    {
      "author": "beatcracker",
      "author_association": "CONTRIBUTOR",
      "body": "Folks, what else can I do to move this forward?",
      "created_at": "2020-04-25T21:12:02Z",
      "updated_at": "2020-04-25T21:12:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I hope somebody from MSFT team will look the PR.",
      "created_at": "2020-04-26T06:50:10Z",
      "updated_at": "2020-04-26T06:50:10Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@PoshChan please rebuild all",
      "created_at": "2020-05-01T18:14:51Z",
      "updated_at": "2020-05-01T18:14:51Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@adityapatwardhan, successfully started rebuild of `PowerShell-CI-static-analysis, PowerShell-CI-Windows, PowerShell-CI-macOS, PowerShell-CI-Linux`",
      "created_at": "2020-05-01T18:15:56Z",
      "updated_at": "2020-05-01T18:15:56Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "Sorry for the delay, I will have a look today. \r\n\r\n@beatcracker Can you please have a look at the CodeFactor issues.",
      "created_at": "2020-05-01T18:15:59Z",
      "updated_at": "2020-05-01T18:15:59Z"
    },
    {
      "author": "beatcracker",
      "author_association": "CONTRIBUTOR",
      "body": "@adityapatwardhan \r\n\r\n> Can you please have a look at the CodeFactor issues\r\n\r\nI did and something strange is going on there:\r\n\r\n![image](https://user-images.githubusercontent.com/7583050/80831755-14795b00-8bf4-11ea-8eb7-71ddc1b8fb96.png)\r\n\r\n1. ` The property's documentation summary text must begin with: Gets or sets`\r\n  Should I fix it only for `SchemaFile` or comments for other properties should be fixed too? For some reason CodeFactor doesn't flag them.\r\n2. `Invalid spacing around the closing parenthesis` link doesn't even points to the top commit on the branch and that issue should be fixed there.\r\n3. `A single-line comment must be preceded by a blank line or another single-line comment` - ditto.",
      "created_at": "2020-05-01T18:38:52Z",
      "updated_at": "2020-05-01T18:41:31Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@beatcracker in general, definitely fix it for code where you've added something. If you'd like, I'm sure nobody will make a fuss if you improve the rest as well for consistency's sake. \ud83d\ude42 \r\n\r\nIn general, CodeFactor makes an effort only to flag issues with the code you're adding or changing. It'll still show the others if you dig through the overall report (which you can get at by clicking on the CodeFactor ranking badge in the README on the main page of the repo).\r\n\r\nFor the other two, just double check they're correct in the current commit, sometimes CodeFactor seems to cache results or target the wrong commit once in a while. If it's all good in your code, that's what matters ultimately. \ud83d\ude42 ",
      "created_at": "2020-05-01T19:02:17Z",
      "updated_at": "2020-05-01T19:02:17Z"
    },
    {
      "author": "beatcracker",
      "author_association": "CONTRIBUTOR",
      "body": "I've fixed docs issue for properties, the other two issues should be fixed too: CodeFactor flags them in 5a183bc1b982e45316642a172faed57042d41e1a, but they don't exist (at least in the previous form) in the current branch tip (80e0006c7f740c3526d372797af629a61d472150).",
      "created_at": "2020-05-01T22:14:19Z",
      "updated_at": "2020-05-01T22:14:19Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMainainer, Please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-05-27T02:01:38Z",
      "updated_at": "2020-05-27T02:01:38Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@beatcracker If the PR is ready for review, please remove the WIP from the title. That helps me prioritize things.",
      "created_at": "2020-05-28T19:03:00Z",
      "updated_at": "2020-05-28T19:03:00Z"
    },
    {
      "author": "beatcracker",
      "author_association": "CONTRIBUTOR",
      "body": "@adityapatwardhan I think it is. I've removed `[ WIP ]`, thanks.",
      "created_at": "2020-05-28T19:52:38Z",
      "updated_at": "2020-05-28T19:52:38Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@beatcracker Can you also respond to comment about not rethrowing and writing error instead.",
      "created_at": "2020-05-28T20:06:37Z",
      "updated_at": "2020-05-28T20:06:37Z"
    },
    {
      "author": "beatcracker",
      "author_association": "CONTRIBUTOR",
      "body": "@adityapatwardhan, Sure, I just did that. As far as I understand, in that case we're supposed to throw. because this is invalid input.",
      "created_at": "2020-05-28T20:31:13Z",
      "updated_at": "2020-05-28T20:31:13Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@PoshChan Please remind me in 1 hour",
      "created_at": "2020-05-29T20:14:08Z",
      "updated_at": "2020-05-29T20:14:08Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@adityapatwardhan, this is the reminder you requested 1 hour ago",
      "created_at": "2020-05-29T21:14:44Z",
      "updated_at": "2020-05-29T21:14:44Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@PoshChan please rebuild windows",
      "created_at": "2020-06-01T20:19:30Z",
      "updated_at": "2020-06-01T20:19:30Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@adityapatwardhan, successfully started rebuild of `PowerShell-CI-Windows`",
      "created_at": "2020-06-01T20:20:00Z",
      "updated_at": "2020-06-01T20:20:00Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@beatcracker Thank you for your contribution!",
      "created_at": "2020-06-02T20:52:12Z",
      "updated_at": "2020-06-02T20:52:12Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@adityapatwardhan @beatcracker did we get an issue filed in the docs repo to ensure this is documented in time for 7.1.0?",
      "created_at": "2020-06-06T21:24:27Z",
      "updated_at": "2020-06-06T21:24:27Z"
    },
    {
      "author": "beatcracker",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32 I don't think so. If you point me in the right direction, I could do that. Are we talking about PR to update [Test-Json.md](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/7.1/Microsoft.PowerShell.Utility/Test-Json.md)?",
      "created_at": "2020-06-06T21:36:44Z",
      "updated_at": "2020-06-06T21:36:44Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@beatcracker yep! You can either submit a PR to add the information directly or file an issue so the docs team are aware and can sort it out as they're able. \ud83d\ude42 ",
      "created_at": "2020-06-06T21:52:06Z",
      "updated_at": "2020-06-06T21:52:06Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.1.0-preview.4` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.4)\n",
      "created_at": "2020-06-25T19:06:56Z",
      "updated_at": "2020-06-25T19:06:56Z"
    }
  ],
  "created_at": "2020-02-23T22:37:25Z",
  "number": 11934,
  "state": "closed",
  "title": "Add parameter `SchemaFile` to `Test-Json` cmdlet",
  "updated_at": "2020-06-25T19:06:56Z"
}