{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16382",
  "author": "jessecarbon",
  "body": "### Steps to reproduce\r\n\r\nInstall/upgrade Powershell on CentOS 7.9 (ours was handled by Puppet) to `7.2.0`, which was released today to the `https://packages.microsoft.com/rhel/7/prod/` yum repo:\r\n```\r\nNov  5 13:55:37 Docker-1 yum[23463]: Updated: powershell-7.2.0-1.rh.x86_64\r\nNov  5 13:55:37 Docker-1 puppet-agent[23019]: (/Stage[main]/Profile::Base::Linux::jenkins_node/Exec[install pwsh]/returns) executed successfully (corrective)\r\n```\r\n\r\nInvoke `New-PSSession` to Windows DC:\r\n```\r\nPS> New-PSSession -ComputerName dc-01.mydomain.com -Credential $cred -Authentication Negotiate\r\n```\r\n\r\n### Expected behavior\r\n\r\nSuccessful connection, as with `7.1.5`:\r\n```console\r\nPS> New-PSSession -ComputerName dc-01.mydomain.com -Credential $cred -Authentication Negotiate\r\n\r\n Id Name            Transport ComputerName    ComputerType    State         ConfigurationName     Availability\r\n -- ----            --------- ------------    ------------    -----         -----------------     ------------\r\n  1 Runspace1       WSMan     englab-dc-01.c\u2026 RemoteMachine   Opened        Microsoft.PowerShell     Available\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\nFailed connection:\r\n```console\r\nPS> New-PSSession -ComputerName dc-01.mydomain.com -Credential $cred -Authentication Negotiate\r\nNew-PSSession: This parameter set requires WSMan, and no supported WSMan client library was found. WSMan is either not installed or unavailable for this system.\r\n```\r\n\r\n\r\n### Error details\r\n\r\nAdditional error from `/var/log/messages`:\r\n```console\r\nNov  5 13:59:02 Docker-1 powershell[24057]: (7.2.0:D:80) [TransportError:None.Open.Error] Runspace Id: WSManAPIDataCommon.ctor Pipeline Id: WSManInitialize. WSMan reported an error with error code: -2146233052.#012 Error message: Unable to load shared library 'libpsrpclient' or one of its dependencies. In order to help diagnose loading problems, consider setting the LD_DEBUG environment variable: liblibpsrpclient: cannot open shared object file: No such file or directory#012 StackTrace:    at System.Management.Automation.Remoting.Client.WSManNativeApi.WSManInitialize(Int32 flags, IntPtr& wsManAPIHandle)#012   at System.Management.Automation.Remoting.Client.WSManClientSessionTransportManager.WSManAPIDataCommon..ctor()\r\n```\r\n\r\nIf I downgrade Powershell back to `7.1.5` with `yum downgrade`, it works again. Upgrade to `7.2.0`, it breaks.\r\n\r\n\r\n### Environment data\r\n\r\n```powershell\r\nPS /home/jjarzynka_a> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0\r\nOS                             Linux 3.10.0-1160.42.2.el7.x86_64 #1 SMP Tue Sep 7 14:49:57 UTC 2021\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
  "closed_at": "2022-04-07T18:01:46Z",
  "comments": [
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "The WSMan operation rely on PowerShell being able to load `libpsrpclient` and then subsequently `libmi` in the `pwsh` directory. This has gotten harder over time as `libmi.so` is reliant on OpenSSL 1.0.2 and and failures loading a dependency will cause a failure trying to load the parent library itself. On a brand new Docker image of CentOS 7 here are some of the details I can find\r\n\r\n```\r\n[root@7dc31d837336 /]# ldd /opt/microsoft/powershell/7/libpsrpclient.so\r\nldd: warning: you do not have execution permission for `/opt/microsoft/powershell/7/libpsrpclient.so'\r\n        linux-vdso.so.1 =>  (0x00007ffc279de000)\r\n        libmi.so => /opt/microsoft/powershell/7/libmi.so (0x00007f0cc6092000)\r\n        libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f0cc5bd9000)\r\n        libc.so.6 => /lib64/libc.so.6 (0x00007f0cc580b000)\r\n        libdl.so.2 => /lib64/libdl.so.2 (0x00007f0cc5607000)\r\n        libpam.so.0 => /lib64/libpam.so.0 (0x00007f0cc53f8000)\r\n        libssl.so.1.0.0 => /opt/microsoft/powershell/7/libssl.so.1.0.0 (0x00007f0cc5186000)\r\n        libcrypto.so.1.0.0 => /opt/microsoft/powershell/7/libcrypto.so.1.0.0 (0x00007f0cc4d23000)\r\n        /lib64/ld-linux-x86-64.so.2 (0x00007f0cc6045000)\r\n        libaudit.so.1 => /lib64/libaudit.so.1 (0x00007f0cc4afa000)\r\n        libgssapi_krb5.so.2 => /lib64/libgssapi_krb5.so.2 (0x00007f0cc48ad000)\r\n        libkrb5.so.3 => /lib64/libkrb5.so.3 (0x00007f0cc45c4000)\r\n        libcom_err.so.2 => /lib64/libcom_err.so.2 (0x00007f0cc43c0000)\r\n        libk5crypto.so.3 => /lib64/libk5crypto.so.3 (0x00007f0cc418d000)\r\n        libz.so.1 => /lib64/libz.so.1 (0x00007f0cc3f77000)\r\n        libcap-ng.so.0 => /lib64/libcap-ng.so.0 (0x00007f0cc3d71000)\r\n        libkrb5support.so.0 => /lib64/libkrb5support.so.0 (0x00007f0cc3b61000)\r\n        libkeyutils.so.1 => /lib64/libkeyutils.so.1 (0x00007f0cc395d000)\r\n        libresolv.so.2 => /lib64/libresolv.so.2 (0x00007f0cc3743000)\r\n        libselinux.so.1 => /lib64/libselinux.so.1 (0x00007f0cc351c000)\r\n        libpcre.so.1 => /lib64/libpcre.so.1 (0x00007f0cc32ba000)\r\n\r\n[root@7dc31d837336 /]# ldd /opt/microsoft/powershell/7/libmi.so\r\nldd: warning: you do not have execution permission for `/opt/microsoft/powershell/7/libmi.so'\r\n        linux-vdso.so.1 =>  (0x00007fff8bbdd000)\r\n        libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f3ec871f000)\r\n        libdl.so.2 => /lib64/libdl.so.2 (0x00007f3ec851b000)\r\n        libpam.so.0 => /lib64/libpam.so.0 (0x00007f3ec830c000)\r\n        libssl.so.1.0.0 => /opt/microsoft/powershell/7/libssl.so.1.0.0 (0x00007f3ec809a000)\r\n        libcrypto.so.1.0.0 => /opt/microsoft/powershell/7/libcrypto.so.1.0.0 (0x00007f3ec7c37000)\r\n        libc.so.6 => /lib64/libc.so.6 (0x00007f3ec7869000)\r\n        /lib64/ld-linux-x86-64.so.2 (0x00007f3ec893b000)\r\n        libaudit.so.1 => /lib64/libaudit.so.1 (0x00007f3ec7640000)\r\n        libgssapi_krb5.so.2 => /lib64/libgssapi_krb5.so.2 (0x00007f3ec73f3000)\r\n        libkrb5.so.3 => /lib64/libkrb5.so.3 (0x00007f3ec710a000)\r\n        libcom_err.so.2 => /lib64/libcom_err.so.2 (0x00007f3ec6f06000)\r\n        libk5crypto.so.3 => /lib64/libk5crypto.so.3 (0x00007f3ec6cd3000)\r\n        libz.so.1 => /lib64/libz.so.1 (0x00007f3ec6abd000)\r\n        libcap-ng.so.0 => /lib64/libcap-ng.so.0 (0x00007f3ec68b7000)\r\n        libkrb5support.so.0 => /lib64/libkrb5support.so.0 (0x00007f3ec66a7000)\r\n        libkeyutils.so.1 => /lib64/libkeyutils.so.1 (0x00007f3ec64a3000)\r\n        libresolv.so.2 => /lib64/libresolv.so.2 (0x00007f3ec6289000)\r\n        libselinux.so.1 => /lib64/libselinux.so.1 (0x00007f3ec6062000)\r\n        libpcre.so.1 => /lib64/libpcre.so.1 (0x00007f3ec5e00000)\r\n\r\n[root@7dc31d837336 /]# ls -al /opt/microsoft/powershell/7/libssl.so.1.0.0\r\nlrwxrwxrwx. 1 root root 19 Nov  8 22:07 /opt/microsoft/powershell/7/libssl.so.1.0.0 -> /lib64/libssl.so.10\r\n\r\n[root@7dc31d837336 /]# ls -al /opt/microsoft/powershell/7/libcrypto.so.1.0.0\r\nlrwxrwxrwx. 1 root root 22 Nov  8 22:07 /opt/microsoft/powershell/7/libcrypto.so.1.0.0 -> /lib64/libcrypto.so.10\r\n```\r\n\r\nIn particular I can see that `libcrypto` and `libssl` are pointed to the OpenSSL 1.0.2 install of OpenSSL on the system. This is usually the cause of a failure when trying to load `libmi` but your `ldd` outputs might show another problem.\r\n\r\nYou might be interested in my [PSWSMan](https://www.powershellgallery.com/packages/PSWSMan/2.2.1) module which ships with a patched copy of `libpsrpclient` and `libmi` that fixes a few problems and also adds support for OpenSSL 1.1.x and 3.x removing the need for the older OpenSSL version altogether. This is not supported by Microsoft or the PowerShell team but in the current state of OMI I would argue neither is the one shipped by PowerShell. Ultimately it's up to you to decide what you are happy to use. You can find more details of my fork at https://github.com/jborean93/omi.\n\n<blockquote><img src=\"https://opengraph.githubassets.com/bd7d507a6ec8b4ba8461f2fc65b2d90216323600125143a3c6d375acf634e22c/jborean93/omi\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/jborean93/omi\">GitHub - jborean93/omi: Open Management Infrastructure</a></strong></div><div>Open Management Infrastructure. Contribute to jborean93/omi development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2021-11-08T22:13:21Z",
      "updated_at": "2021-11-08T22:13:24Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@WG-Remoting\r\nRemoting working group confirms that WinRM/OMI remoting on non-Windows platforms is no longer supported since OMI is no longer supported (#15310).  Our hope is that support will be picked up by community members using the new custom remoting connections (#16923).",
      "created_at": "2022-04-07T18:01:15Z",
      "updated_at": "2022-04-07T18:01:15Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Closing and resolving as answered.",
      "created_at": "2022-04-07T18:01:46Z",
      "updated_at": "2022-04-07T18:01:46Z"
    }
  ],
  "created_at": "2021-11-05T20:23:07Z",
  "labels": [
    "Resolution-Answered",
    "WG-Remoting"
  ],
  "number": 16382,
  "state": "closed",
  "title": "7.2.0 breaks New-PSSession on Centos 7.9 - Unable to load shared library 'libpsrpclient'",
  "updated_at": "2022-04-07T18:01:47Z"
}