{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16712",
  "author": "rkitover",
  "body": "### Summary of the new feature / enhancement\r\n\r\nThe default format for `gci` looks terrible, it looks much better as `gci | ft -autosize`, I will post a few screenshots here.\r\n\r\nThis is `gci` on my Windows system:\r\n\r\n![gci on Windows](https://i.imgur.com/3WgxsoE.png)\r\n\r\nThis is `gci | ft -autosize` on my Windows system:\r\n\r\n![gci with ft -autosize on Windows](https://i.imgur.com/jsu97gM.png)\r\n\r\nThis is `gci` on my Linux system, this is especially horrible, I can't even see the file names!\r\n\r\n![gci on Linux](https://i.imgur.com/M30Xy4X.png)\r\n\r\nThis is `gci | ft -autosize` on my Linux system, it looks pretty good, not quite as good as `ls --color=auto -lh`, but close, your color selections are also less than ideal (especially for directories.)\r\n\r\n![gci | ft -autosize on Linux](https://i.imgur.com/ussV2Su.png)\r\n\r\nthis is the top part with directories, to show you what I mean about the colors:\r\n\r\n![gci | ft -autosize on Linux (directories)](https://i.imgur.com/K8rIw2A.jpg)\r\n\r\nthis `ls --color=auto -lh` output on my Linux system for comparison (GNU coreutils ls of course):\r\n\r\n![ls -lh output on Linux](https://i.imgur.com/dqnXXjf.jpg)\r\n\r\nand here is `ls --color=auto` output:\r\n\r\n![ls output on Linux](https://i.imgur.com/yARZqtD.png)\r\n\r\nfor a couple more comparisons, here is `lsd -lh`:\r\n\r\n![lsd -lh on Linux](https://i.imgur.com/Lj8BsZr.png)\r\n\r\nand here is `lsd`:\r\n\r\n![lsd on Linux](https://i.imgur.com/cp0ZBse.png)\r\n\r\nand here is `exa -lh`:\r\n\r\n![exa -lh on Linux](https://i.imgur.com/07TO9Fg.png)\r\n\r\nand here is `exa`:\r\n\r\n![exa on Linux](https://i.imgur.com/ohKZOcq.png)\r\n\r\n### Proposed technical implementation details (optional)\r\n\r\nIf using an autosize format for File/Dir info has negative implications like performance, it should still be possible to make a compact format with fixed widths for just about all the fields except name. Name would be the last field and can wrap. In case e.g. a username or length is too long, it could be truncated.\r\n\r\nA lot can be said about file listing presentation, and this is not a strong point for this project.\r\n\r\nThe default format on Windows is OK. I like the autosize format better, but the default works more or less.\r\n\r\nOn Linux the default format is unusable at smaller widths because there are two extra columns for user and group with an unnecessarily huge amount of spacing. I suppose you did this to make listing closer to things like `ls -l` on Linux, but on Windows you do not show ACL/owner information in file listings, and for most of the work users do on Linux, they do not need this information either. Which is why they generally just use `ls` and not `ls -l`.\r\n\r\n`gci -n` is closer to how `ls` works, actually closer to how `ls -1` works, but then you don't get the colors.\r\n\r\nThe permission bits are also generally not very interesting. On Windows the attributes column shows useful information like whether the filesystem object is a directory or readonly etc.. So why not have an attributes column on Linux with actually useful indicators of some sort? And hide the user/group columns?\r\n\r\nBut this is a digression.\r\n\r\nThis issue is specifically about the column spacing.\r\n\r\nYou will probably say \"override the format\", and I will definitely do that, even though that's not particularly pleasant to do and involves XML files etc.. But I am opening this issue about the default experience for users.\r\n\r\nYou might say \"make your own function\", this is also extremely unpleasant, because I cannot make a function that has all of the completion magic of `gci` without doing a lot of really horrible things. Also if I make a function that just pipes to `ft -autosize` it will destroy the objects and I would not be able to use it in pipelines.",
  "closed_at": null,
  "comments": [
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "Not related to this issue, but I enabled:\r\n\r\n```powershell\r\nenable-experimentalfeature PSAnsiRenderingFileInfo\r\n```\r\n\r\nin my pwsh on Windows which is version 7.2.1, and the directory color bleed is also present:\r\n\r\n![gci directory color bleed](https://i.imgur.com/4In65fB.png)",
      "created_at": "2022-01-07T06:41:19Z",
      "updated_at": "2022-01-07T06:41:19Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "\r\n\r\nThe bleed problem is something I mentioned here https://github.com/PowerShell/PowerShell/issues/16700#issuecomment-1005932973   the because the text just doesn't wrap onto a new line, - the table formatter tries to keep it in its column - the  format opens before \"windows-dev-guide\" and remains is in effect all the way to the end of \"x11-packages\"  \r\n\r\n\r\nThe rest is solved with a custom format xml file  : default listings don't need to be listings don't need to be re-arranged for all users because one person has a 40 column screen :-) \r\n\r\nIf you're creating your own format file there are multiple things which you can do which out of the box PowerShell does not. \r\nChanging the format of the length and last-write columns depending on the value would be an obvious one. \r\n\r\n",
      "created_at": "2022-01-07T19:57:21Z",
      "updated_at": "2022-01-07T19:57:21Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "So, the default table format will remove columns from right when the terminal size is not big enough on Linux. This is pretty bad for cmdlets like `Get-ChildItem`, because the last column in the table view is the file/directory names, and cutting that column will make the formatting meaningless.",
      "created_at": "2022-01-07T22:31:27Z",
      "updated_at": "2022-01-07T22:31:27Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "I posted  a gist https://gist.github.com/jhoneill/4b74aa82cb5b4608687b24dddef293f8  with the XML  to create your own format.  Load it with `Update-FormatData -PrependPath files.ps1xml`\r\n\r\nI've forced 24 hour clock to save 3 spaces for \" AM\" / \" PM\" in cultures where the default clock is 12 hours , and convert length to TB / GB / MB  / KB. (Lines 43 to 48) \r\n\r\nOn  Windows I might dump the `mode` column and put `<DIR>` instead of a blank space at line 43 \r\nOn Linux the` mode` column wants to be the property `UnixMode` and you can add `User` and `Group` \r\n\r\nIf you're using ANSI formatting you might want to replace `name`  at line 50 with `NameString`\r\n\r\n\r\n<blockquote><img src=\"https://github.githubassets.com/images/modules/gists/gist-og-image.png\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> Gist</div><div><strong><a href=\"https://gist.github.com/jhoneill/4b74aa82cb5b4608687b24dddef293f8\">files.ps1xml1</a></strong></div><div>GitHub Gist: instantly share code, notes, and snippets.</div></blockquote>",
      "created_at": "2022-01-08T11:04:20Z",
      "updated_at": "2022-01-08T11:06:53Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "@jhoneill Thank you very much for the XML file, I will definitely use this with some changes and in my guide as well.\r\n\r\nBut my point was exactly about the fact that the default format sucks and could be improved.\r\n\r\nI have 68 columns btw not 40, which is a bit small but generally adequate.",
      "created_at": "2022-01-08T15:27:02Z",
      "updated_at": "2022-01-08T15:27:02Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "On the subject of terminal widths, the standard width for a terminal is `80` columns. The Linux format does not work with this either. Here is a screenshot of `gci` on Linux at 80 columns:\r\n\r\n![gci on Linux at 80 columns](https://i.imgur.com/bIRS0ZH.jpg)",
      "created_at": "2022-01-08T15:39:30Z",
      "updated_at": "2022-01-08T15:39:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Interesting, can you try more old pwsh versions (starting with 6) and share results? I want to know if we have a regression.",
      "created_at": "2022-01-08T17:04:12Z",
      "updated_at": "2022-01-08T17:04:12Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> @jhoneill Thank you very much for the XML file, I will definitely use this with some changes and in my guide as well.\r\n> \r\n> But my point was exactly about the fact that the default format sucks and could be improved.\r\n> \r\n> I have 68 columns btw not 40, which is a bit small but generally adequate.\r\n\r\n\r\nYou're welcome. The very first VDU I used was 40 columns wide so \"40 + smiley\" is my shorthand for unusually narrow. \r\n\r\nThe original design of PowerShell set some formats which we're still using 15 years later.  I said in another thread that just because it's been in places for years doesn't mean it can't be improved. **I** think it's fine as it is, but I _would think that_ because I've grown used to it :-)     \r\nWhat the default templates should optimize for is a valid question, but I think a typical screen is at least 120 characters wide and many are heading up towards 200 using only half or 1/3 of the screen is tough to sell. \r\n\r\n\r\n\r\n\r\n",
      "created_at": "2022-01-08T17:10:17Z",
      "updated_at": "2022-01-08T17:10:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> What the default templates should optimize for is a valid question, but I think a typical screen is at least 120 characters wide and many are heading up towards 200 using only half or 1/3 of the screen is tough to sell.\r\n\r\nModern Microsoft design direction is that the same application should work on any device from smartphone to mainframe.",
      "created_at": "2022-01-08T17:15:22Z",
      "updated_at": "2022-01-08T17:15:22Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> Interesting, can you try more old pwsh versions (starting with 6) and share results? I want to know if we have a regression.\r\n\r\nJust a quick thing for linux I've still got 7.1 in wsl \r\n```\r\nLabel         Alignment Width\r\n-----         --------- -----\r\nUnixMode           Left    10\r\nUser               Left    16\r\nGroup              Left    16\r\nLastWriteTime     Right    18\r\nSize              Right    14\r\nName               Left     0\r\n```\r\nYou need to add 1 to each of those widths, because there is a space between each column - so the 5 columns before name take 79 chars of space. \r\n\r\n7.2.1 on windows is \r\n```\r\n (Get-FormatData System.IO.FileInfo).FormatViewDefinition[0].control.headers\r\n\r\nLabel         Alignment Width\r\n-----         --------- -----\r\nMode               Left     7\r\nLastWriteTime     Right    26\r\nLength            Right    14\r\nName               Left     0\r\n```\r\nSo that's only 50. \r\n\r\n",
      "created_at": "2022-01-08T17:19:35Z",
      "updated_at": "2022-01-08T17:19:35Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> > What the default templates should optimize for is a valid question, but I think a typical screen is at least 120 characters wide and many are heading up towards 200 using only half or 1/3 of the screen is tough to sell.\r\n> \r\n> Modern Microsoft design direction is that the same application should work on any device from smartphone to mainframe.\r\n\r\nAnd PowerShell's \"Only convert objects to print-out at the last possible moment\" design helps that, the application doesn't change, only the formatting instructions do :-)   \r\nBut I've built quite a lot of formatting files in my time and for some I've assumed the user has a terminal window as wide as the one I'm using - bad choice! - when you use PowerShell in a Jupyter notebook, width assumptions break.    I think assuming a width of 80 chars (or fewer) may also be a bad choice. \r\n\r\nI ran this to find out how wide the built in formats are \r\n```powerShell\r\nGet-FormatData | % FormatViewDefinition  | where {$_.control -is [System.Management.Automation.TableControl] } | % {$n = $_.name;  $_.control.headers | measure -sum width | select @{n='name';e={$n}}, Count, sum} | sort sum \r\n```\r\nThere are quite a few more than 80.   Usually with a format we want to keep adding information, and make columns wider so text doesn't need to wrap (which causes problems with coloration ), while cutting off the smallest number of people  with demands for excessively wide screens. It's often a compromise. \r\n\r\n",
      "created_at": "2022-01-08T17:52:01Z",
      "updated_at": "2022-01-08T17:52:01Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "Just wanted to mention that the default format on Windows is not too terrible, it also works fine at 68 columns for me.\r\n\r\nThe issue is on linux is the two extra columns.",
      "created_at": "2022-01-08T20:25:51Z",
      "updated_at": "2022-01-08T20:25:51Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> If you're using ANSI formatting you might want to replace name at line 50 with NameString\r\n\r\nHow to replace `NameString` with `Name` but save the colorization?\r\n```\r\n$PSStyle.FileInfo.Extension.Keys.Count  # 65 + 3 (Directory, Executable and SymbolicLink)\r\n```\r\nI was trying:\r\n```\r\n<TableColumnItem>\r\n  <PropertyName><ScriptBlock>\r\n    @{ Name = 'Name'; Expression = { $_.NameString }}\r\n  </ScriptBlock></PropertyName>\r\n</TableColumnItem>\r\n```",
      "created_at": "2022-01-11T10:25:29Z",
      "updated_at": "2022-01-11T10:53:52Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": " > How to replace `NameString` with `Name` but save the colorization?\r\n> \r\n\r\n\r\n```\r\n    <TableColumnItem><PropertyName>Name</PropertyName></TableColumnItem>\r\n```\r\nshould just become \r\n```\r\n    <TableColumnItem><PropertyName>NameString</PropertyName></TableColumnItem>\r\n```\r\n\r\nIn those Table Column _Item_  blocks you  have  either  `<propertyName>   </propertyName> `   or `<scriptblock>   </scriptblock> `   and  the label, width, and alignment go in Table Column _Header_\r\n  \r\nThere must be as many headers as items, but a header can just be \"all defaults\" and I didn't notice when I posted the gist that the last header - line 33 is doing that so it picks up the property name.\r\n\r\n```\r\n    <TableColumnHeader><Label>Length</Label><Width>7</Width><Alignment>right</Alignment></TableColumnHeader>\r\n    <TableColumnHeader/>\r\n```\r\n\r\nSo if you _only_ change the property name you will get \"NameString\" as a label at the top of the column. Changing line 33 to\r\n```    \r\n<TableColumnHeader><Label>Name</Label></TableColumnHeader>\r\n```\r\nshould fix that.\r\n",
      "created_at": "2022-01-11T12:59:51Z",
      "updated_at": "2022-01-11T12:59:51Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> should fix that.\r\n\r\nThank you very much!",
      "created_at": "2022-01-11T13:31:17Z",
      "updated_at": "2022-01-11T13:31:17Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "How can I make `-AutoSize` the default? `$PSDefaultParameterValues['Format-Table:Autosize']` only works if I explicitly pipe `Get-ChildItem | Format-Table`, while I want it to work for simple `Get-ChildItem`.",
      "created_at": "2022-10-17T20:51:54Z",
      "updated_at": "2022-10-17T20:51:54Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "@dkaszews I believe this is not possible without defining an XML format.",
      "created_at": "2022-10-17T21:21:01Z",
      "updated_at": "2022-10-17T21:21:01Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@dkaszews  It's XML file only.  The first time you do a big dir -recurse you'll be glad you don't have autosize as the default. \r\n\r\nAutosize is masking a problem here. \r\n1. File name varies in length, and it appears on the right so that all the columns always start in the same place, some space is pre-allocated and filename has the rest - on windows it starts at column 50  and we assume screen width is at least 51+ (longest file name.).  In other words that anyone who selects 80 columns as a width for their terminal doesn't use 30+ characters for their file names. \r\nLength can cope with files heading towards exabytes in size (but the eye finds it hard to tell if a string of numbers is 8 , 9 or 10 digits so we can't gauge file size at a glance)  Last write date will handle even the longest local date formats, both are usally wasteful of space and auto size claims back 15 or 16 characters.  \r\n\r\nFor the case where narrow terminal meets wide file name we can make fields narrower or drop them altogether, or we can use autosize to get the best compromise for the each output. But that's always going to be matter of personal choices, sending people back to the XML file. (See my Gist above for a starter file). \r\n\r\n",
      "created_at": "2022-10-18T08:58:26Z",
      "updated_at": "2022-10-18T08:58:26Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "> @jhoneill The first time you do a big dir -recurse you'll be glad you don't have autosize as the default.\r\n\r\nThat's what I keep hearing, but I just run it and can't see why. I just run it on my `~/Downloads` where some folders have only files under 1K, while others have files >10GB (full memory dumps). Yeah, the name shifts around because of that, so what? I am fine with it, it's definitely better than all the wasted space.\r\n\r\nAnd I just noticed how much space is wasted by `LastWriteTime`, are the spaces between date and time to fit AM/PM? That's stupid.\r\n\r\nIs there really no more elegant way to redefine formatting of a single column other than keeping a (relatively) huge XML file in my config dir? I'd much rather do something like `$PSStyle.Formatting.Tables['FileInfo'].Columns['Length'].MinWidth = 0` instead of writing everything from scratch. ",
      "created_at": "2022-10-18T09:20:04Z",
      "updated_at": "2022-10-18T09:20:04Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "I would also be in favor of having an in-memory, modifiable object representing the format that would allow at least some layout adjustments in one's `$profile`.",
      "created_at": "2022-10-18T10:09:12Z",
      "updated_at": "2022-10-18T10:09:12Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "Agreed, I think a lot of complains could be resolved by providing a better API for modification. There is `Update-TypeData -DefaultDisplayPropertySet` but I could never get it to work, always errored out with `member already present` or was ignored.\r\n\r\nWe are currently moving a lot of stuff related to colors under `$PSStyle.Formatting`, I think it would be a good place to allow user to configure stuff like: default columns, format, width, extra calculated properties, etc. Surely PowerShell already has an in-memory object storing parsed format XML, so it's just a matter of making it public and cleaning it up. ",
      "created_at": "2022-10-18T10:18:04Z",
      "updated_at": "2022-10-18T10:18:04Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> > @jhoneill The first time you do a big dir -recurse you'll be glad you don't have autosize as the default.\r\n> \r\n> That's what I keep hearing, but I just run it and can't see why. \r\n\r\n\r\nTry `dir C:\\ -recurse <filename in your profile dir> | ft -auto`\r\nand then `dir C:\\ -recurse <filename in your profile dir> | ft `\r\n\r\nNotice when the output appears.  \r\n\r\n\r\n",
      "created_at": "2022-10-18T15:35:20Z",
      "updated_at": "2022-10-18T15:35:20Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "@jhoneill If this experiment was supposed to show that `-Autosize` has to wait for all data before it starts displaying any (like e.g sorting), then it completely failed. Data appears one by one without any noticeable delay, because autosize is on per-directory basis, that's why they may be misaligned which I said I'm completely fine.\r\n\r\nIf you have any points, please spell them out and try them yourself to see if they are actually valid instead of telling people to \"see yourself\" when there is nothing to see. It may have been the case in older PS, but is definitely not now. ",
      "created_at": "2022-10-18T15:50:12Z",
      "updated_at": "2022-10-18T15:50:50Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@dkaszews  \r\n\r\nI have just tested it to make sure I wasn't going mad \r\n`dir -Recurse -Force -ErrorAction 0 Photoshop.exe | ft   `\r\n\r\nOutput  the file on finding it and continued with the rest of my disk But   \r\n` dir -Recurse -Force -ErrorAction 0 Photoshop.exe | ft -AutoSize `\r\n\r\nhadn't  produced any output  when I stopped it (big disk / stupid number of files so dir -r takes forever) \r\n\r\n\r\n`dir -Recurse -Force -ErrorAction 0 pwsh.exe | ft -a`  \r\n\r\nOutputs the files in one directory when it finds a file in another.  \r\nSo It output  `C:\\Program Files\\PowerShell\\6` when it found a file in  `C:\\Program Files\\PowerShell\\7`   ;  but doesn't  output  `C:\\Program Files\\PowerShell\\7` until it finds one in ` C:\\Users\\me\\AppData\\Local\\Microsoft\\powershell`  etc. \r\n\r\nif I run it without the -a in a neighbouring pane that version is always one directory ahead of the one with -a until they finish. \r\n\r\n(BTW I don't mind your tone - I  sound like that myself sometimes - but others think we should all be super polite on these threads, so go carefully ) \r\n\r\n\r\n",
      "created_at": "2022-10-19T09:56:57Z",
      "updated_at": "2022-10-19T09:57:56Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "@jhoneill I rested it on my Windows machine and it looks like you're right - output from one folder does not appear until another one is printed, so the very last result does not appear until the command is done. Easiest to see when looking for file which appears multiple times close to each other, e.g. some built artifact in Debug/Release. Which does make sense from how the command is implemented, as it needs to be sure that the table is finished. Weird I could not see it on Ubuntu, maybe some filesystem oddity, or just other latencies influencing observation.\r\n\r\nI apologise for my tone, I am easily annoyed when people respond with \"see for yourself\" instead of providing explanation of the issue, especially stuff that may be harder to reproduce or observe. Mostly caused by people shutting down my ideas to remove sharp edges and/or improve diagnostics with \"RTFM\", or providing ugly workarounds that don't really work. I think we all sometimes lack empathy and ability to see somebody else's viewpoint, especially when vast differences in experience come to mind, and I will try to be more mindful of that myself. ",
      "created_at": "2022-10-19T10:12:14Z",
      "updated_at": "2022-10-19T10:12:14Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "@jhoneill @dkaszews \r\n\r\nLet's make a gallery module that will manage this XML file automatically on import from `$profile` and set a nice default format for filesystem ops, on both Windows and Linux/Mac.\r\n\r\nWe can also provide an API for modifying these formats in code, backed by the XML file.\r\n\r\nI could throw a prototype together fairly quickly using @jhoneill's XML example and link it here, I recently pushed my first module so I'm familiar with the process.\r\n\r\nWe could use this to prototype eventual core functionality, and if not it would still be a useful module to have.",
      "created_at": "2022-10-19T10:29:58Z",
      "updated_at": "2022-10-19T10:29:58Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@dkaszews  no apology needed from my side, I talk the same way to people :-) But the powers-that-be like to keep the atmosphere welcoming.   \r\n\r\nI hadn't even allowed for ubuntu looking different, and it depends on the example used. (And how much more there is to process after the last item). \r\n\r\n@rkitover  I'm a bit conditioned to what Update-FormatData and XML files do so I'd be interested to see the prototype of what some extra functionality might look like. \r\n",
      "created_at": "2022-10-19T10:54:31Z",
      "updated_at": "2022-10-19T10:54:31Z"
    },
    {
      "author": "dkaszews",
      "author_association": "CONTRIBUTOR",
      "body": "@rkitover I think something like `ConvertFrom/To-StyleXml` could work, good idea! My primary annoyance is that you need to create a copy of the default style just to modify a single thing. For example, I want to remove user and group on Unix (don't need it as a single user) and change the size to be human readable. With object notation, I can just do:\r\n\r\n```pwsh\r\n# Find loaded  ps1xml with `<TypeName>System.Io.FileInfo`, convert to object\r\n$style = Get-FormatData 'FileInfo'\r\n$style.Table.Remove('User')\r\n$style.Table.Remove('Group')\r\n$style.Table['Length'].ScriptBlock = 'Get-HumanReadableSize' \r\n# Convert back to XML and apply\r\nSet-FormatData $object\r\n```",
      "created_at": "2022-10-19T11:33:48Z",
      "updated_at": "2022-10-19T11:34:09Z"
    }
  ],
  "created_at": "2022-01-07T04:07:02Z",
  "labels": [
    "Issue-Bug",
    "Issue-Enhancement",
    "WG-Engine-Format"
  ],
  "number": 16712,
  "state": "open",
  "title": "Make default gci/gi output more like \"gci | ft -autosize\"",
  "updated_at": "2022-10-19T11:34:09Z"
}