{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5902",
  "author": "alx9r",
  "body": "I'm experimenting with writing unit tests that involve detecting whether an underlying object has a default indexer.  In other words, I'm trying to test whether `$obj[$index]` is a meaningful statement for a given `$obj`.  It seems like this should be possible based on [this article](https://msdn.microsoft.com/en-us/library/kz0a8sxy(v=vs.110).aspx) which includes the following statements:\r\n\r\n> ...Visual C# ... have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.\r\n>...\r\n>By default, a C# indexer appears in metadata as an indexed property named \"Item\".\r\n>...\r\n>To determine whether a type has a default property, use the GetCustomAttributes(Type,\u2002Boolean) method to test for the DefaultMemberAttribute attribute. If the type has DefaultMemberAttribute, the MemberName property returns the name of the default property.\r\n\r\nBased on that and some experimentation, it seems like `.GetDefaultMembers()` could be used to detect whether an object has a default indexer.  For example,\r\n\r\n```PowerShell\r\n[hashtable].GetDefaultMembers()\r\n[string].GetDefaultMembers()\r\n[int].GetDefaultMembers()\r\n```\r\n\r\noutputs `[MemberInfo]` for the `Item` and `Chars` properties of the `[hashtable]` and `[string]` types, respectively, and nothing for `[int]`.  This seems consistent with `[string]` and `[hashtable]` but not `[int]` being indexable. `[array].GetDefaultMembers()`, however, returns nothing despite that it supports indexing.\r\n\r\n1. Why is `[array].GetDefaultMembers()` empty?\r\n2. Is there a better general way to test whether an object has a default indexer in PowerShell?",
  "closed_at": "2018-02-03T18:24:21Z",
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I wasn't aware of `GetDefaultMembers`. It looks like it can help answer your question, but it's not sufficient, you'll have to check that you have a viable method considering the number of arguments vs. the number of parameters (and to be thorough, considering default arguments).\r\n\r\nPowerShell relies on the `DefaultMemberAttribute`\r\n\r\n```\r\nPS> ([string].GetCustomAttributes([System.Reflection.DefaultMemberAttribute], $false)).MemberName\r\nChars\r\nPS> ([hashtable].GetCustomAttributes([System.Reflection.DefaultMemberAttribute], $false)).MemberName\r\nItem\r\n```\r\n\r\nYou'll see that `Array` has no such attribute - because array indexing is implemented in IL, not by a method.\r\n\r\nYou can find PowerShell's logic [here](https://github.com/PowerShell/PowerShell/blob/c8ccb376b489bc17c76b94a60ce218f023c936bd/src/System.Management.Automation/engine/runtime/Binding/Binders.cs#L3888).\r\n\r\nI do see one corner case that is not an Array and there is no `DefaultMemberAttribute`. If the type implements `IDictionary<K,V>`, PowerShell will use `TryGetValue` - the type need not have a \"default member\" even though it commonly will.",
      "created_at": "2018-01-14T23:09:54Z",
      "updated_at": "2018-01-14T23:09:54Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "FWIW, I did not find a way to implement `IsIndexable` because I did not find a general way to determine whether `TryGetValue` would succeed _a priori_.  I did, however, implement `MightBeIndexable` which I'm finding almost as useful for my use (unit testing).  `MightBeIndexable` simply returns true iff an object is `[array]`, `[Generic.IDictionary]`, or has a default member attribute.",
      "created_at": "2018-02-03T18:24:21Z",
      "updated_at": "2018-02-03T18:24:21Z"
    }
  ],
  "created_at": "2018-01-14T18:31:49Z",
  "number": 5902,
  "state": "closed",
  "title": "Detecting Default Indexer: Why is [array].GetDefaultMembers() empty?",
  "updated_at": "2018-02-08T06:25:05Z"
}