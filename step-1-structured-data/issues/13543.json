{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13543",
  "author": "vexx32",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\n- Removed `using System.Linq;` for Compiler.cs\r\n- Replaced extension methods with more traditional and hopefully speedy logic\r\n- Replaced some `IEnumerable<T>` fields/variables/etc with `IReadOnlyList<T>` where appropriate\r\n- Reworked iterator methods that really didn't need to be iterator methods and had them return arrays or `IReadOnlyList<T>`\r\n- Added a new internal method for AST searching to avoid the need for LINQ usage in a couple cases\r\n- Replaced a couple usages of List<T> when the set size is already known with T[].\r\n- Internal API AstSearcher.FindAll() was changed to return List<Ast> rather than IEnumerable<Ast> as it was already returning a list anyway, and it made handling its results easier in a few places.\r\n\r\n## PR Context\r\n\r\nLINQ ain't the greatest for performance sensitive applications.\r\n\r\nRelated: #13474 \r\nSemi-related: #12930 and #12412, I'll probably end up with merge conflicts on this or those depending on which get merged first. Might also need to make some edits either here or in those PRs to ensure I'm not reintroducing LINQ in some fashion or another, I'll go over them once one is merged.\r\n\r\n/cc @rjmholt @SeeminglyScience\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2022-05-23T19:05:42Z",
  "comments": [
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@vexx32 Is there any noticeable difference in perf or parsing? Can you do a before / after comparison and add to the PR description. ",
      "created_at": "2020-08-31T18:24:47Z",
      "updated_at": "2020-08-31T18:24:47Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@adityapatwardhan let me know how to go about doing that and I'd be happy to. This isn't a particularly accessible area of the code to run benchmarks on (not that anything in PS is very easy to benchmark individually anyway, really).",
      "created_at": "2020-09-01T03:16:01Z",
      "updated_at": "2020-09-01T03:16:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 We have same options for perf measure:\r\n1. Take a large script/module from a repository\r\n2. Create custom targeted tests based on BenchmarkDotNet because Compiler is internal and could be directly referenced from tests. For example, we could call `public object VisitScriptBlock(ScriptBlockAst scriptBlockAst)`.\r\n3. Call `public PSScriptCmdlet(ScriptBlock scriptBlock, bool useNewScope, bool fromScriptFile, ExecutionContext context)` from `internal sealed class PSScriptCmdlet`\r\n\r\nPerhaps there are more simple options.",
      "created_at": "2020-09-01T04:22:22Z",
      "updated_at": "2020-09-01T04:22:22Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "One thing I never understood with BenchmarkDotNet is how to benchmark between commits properly without ripping out all the associated code into separate standalone classes.  Does anyone have experience with that?  Do you have to just run separate tests and calculate the ratios yourself (and is that even accurate) or does BenchmarkDotNet have support for that? Really hard to google for some reason.\r\n\r\nIf someone can provide a template or some clear steps towards getting the before and after into the same test run, I'll work with @vexx32 to setup the actual benchmark.",
      "created_at": "2020-09-01T14:44:56Z",
      "updated_at": "2020-09-01T14:51:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@AndreyAkinshin Could you please help PowerShell contributors to understand how compare performance different commits with  BenchmarkDotNet?",
      "created_at": "2020-09-02T05:10:39Z",
      "updated_at": "2020-09-02T05:10:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 @SeeminglyScience I think we could use a tool mentioned in https://github.com/dotnet/runtime/issues/41871",
      "created_at": "2020-09-09T10:49:03Z",
      "updated_at": "2020-09-09T10:49:03Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "It looks like that would have to be a significant effort, largely from the PS team themselves; it doesn't look like something an individual contributor could feasibly set up.",
      "created_at": "2020-09-09T17:08:43Z",
      "updated_at": "2020-09-09T17:08:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I mean that they use a simple tool for comparison with a base line.",
      "created_at": "2020-09-09T17:23:05Z",
      "updated_at": "2020-09-09T17:23:05Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-09-17T02:00:11Z",
      "updated_at": "2020-09-17T02:00:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 Can we split some changes to separate small PRs?",
      "created_at": "2020-11-06T11:16:36Z",
      "updated_at": "2020-11-06T11:16:36Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Eh... I mean, sure, I can if you want. Didn't think it was that large, but I can take a look later on and do things a bit more piecemeal, I suppose?",
      "created_at": "2020-11-06T14:09:17Z",
      "updated_at": "2020-11-06T14:09:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Didn't think it was that large\r\n\r\nYes, but it is very sensitive code and it would be better to keep the PR as a meta and split the work on small parts.",
      "created_at": "2020-11-06T17:05:37Z",
      "updated_at": "2020-11-06T17:05:37Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That is fair, I'll give it a look, thanks! \ud83d\ude42 ",
      "created_at": "2020-11-06T17:32:09Z",
      "updated_at": "2020-11-06T17:32:09Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-11-21T02:00:15Z",
      "updated_at": "2020-11-21T02:00:15Z"
    },
    {
      "author": "Samuli3682",
      "author_association": "NONE",
      "body": "I don't know...\n",
      "created_at": "2020-11-21T22:12:07Z",
      "updated_at": "2021-04-19T17:15:02Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@vexx32 Please resolve merge conflicts. Also please respond comments from Ilya and me.",
      "created_at": "2021-04-19T13:15:57Z",
      "updated_at": "2021-04-19T13:15:57Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@daxian-dbw .. this is something that would be interesting for the perf tests.",
      "created_at": "2021-04-19T13:18:35Z",
      "updated_at": "2021-04-19T13:18:35Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2021-04-27T02:00:11Z",
      "updated_at": "2021-04-27T02:00:11Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@vexx32 Please resolve merge conflicts.",
      "created_at": "2021-09-02T00:09:55Z",
      "updated_at": "2021-09-02T00:09:55Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@adityapatwardhan rebased and updated this branch, should be good to go I think. \ud83d\ude42 \r\n\r\nEDIT: Need to make a couple small changes per these comments. Will circle back sometime today as I'm able.\r\n\r\n- https://github.com/PowerShell/PowerShell/pull/13543#discussion_r700770962\r\n- https://github.com/PowerShell/PowerShell/pull/13543#discussion_r700767188",
      "created_at": "2021-09-02T02:11:29Z",
      "updated_at": "2021-09-02T16:13:13Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov @adityapatwardhan I think this one should be all good to go now, I've incorporated Ilya's suggestions and I think that's everything. \ud83d\udc96 ",
      "created_at": "2021-09-03T02:40:32Z",
      "updated_at": "2021-09-03T02:40:59Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "We now have the microbenchmark project at https://github.com/PowerShell/PowerShell/tree/master/test/perf/benchmarks. I will see if I can come up with one or two benchmarks to see if we get any noticeable speedup in compilation with this PR :)",
      "created_at": "2021-09-08T16:53:21Z",
      "updated_at": "2021-09-08T16:59:49Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I added a benchmark to test the compiler performance (PR is out: #16083). I ran the benchmark with and without changes from this PR, and the result with changes from this PR is even slightly worse.\r\n\r\nHere are the details:\r\n\r\n#### Preparation\r\n\r\nThe `benchmark` branch is checked out from the latest master branch.\r\nI checked out the `LinqBGone` branch, and rebased it against the `benchmark` branch. So the only difference between `benchmark` and `LinqBGone` branches are the new changes from this PR.\r\n\r\n#### Benchmarking\r\n\r\nTo run benchmark **without** changes from this PR, from the `benchmark` branch:\r\n- run `git clean -fdx`\r\n- run `cd .\\test\\perf`\r\n- run `Import-Module .\\perf.psm1 -Force`\r\n- run `Start-Benchmarking -Filter *Compile* -Artifacts C:\\arena\\tmp\\compiler-perf-2\\now\\` for 10 times, and collect the results.\r\n\r\nTo run benchmark **with** changes from this PR, from the `LinqBGone` branch:\r\n- run `git clean -fdx`\r\n- run `cd .\\test\\perf`\r\n- run `Import-Module .\\perf.psm1 -Force`\r\n- run `Start-Benchmarking -Filter *Compile* -Artifacts C:\\arena\\tmp\\compiler-perf-2\\new\\` for 10 times, and collect the results.\r\n\r\n#### Result Data\r\n\r\nResults **without** changes from this PR:\r\n\r\n<details>\r\n  <summary>Click to see the results from the 10 runs</summary>\r\n\r\n```ini\r\nBenchmarkDotNet=v0.12.1.1521-nightly, OS=Windows 10.0.19043\r\nIntel Core i7-1065G7 CPU 1.30GHz, 1 CPU, 8 logical and 4 physical cores\r\n.NET SDK=6.0.100-preview.6.21355.2\r\n  [Host]     : .NET 6.0.0 (6.0.21.35212), X64 RyuJIT\r\n  Job-XKBQFO : .NET 6.0.0 (6.0.21.35212), X64 RyuJIT\r\n\r\nEnvironmentVariables=POWERSHELL_TELEMETRY_OPTOUT=1  PowerPlanMode=00000000-0000-0000-0000-000000000000  Arguments=/p:DebugType=portable\r\n\r\nIterationTime=250.0000 ms  MaxIterationCount=20  MinIterationCount=15\r\nWarmupCount=1\r\n\r\n```\r\n|             Method |     Mean |    Error |   StdDev |   Median |      Min |      Max |   Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------- |---------:|---------:|---------:|---------:|---------:|---------:|--------:|------:|------:|----------:|\r\n| CompileBuildModule | 20.02 ms | 0.522 ms | 0.558 ms | 19.78 ms | 19.27 ms | 21.03 ms | 83.3333 |     - |     - |    456 KB |\r\n\r\n\r\n|             Method |     Mean |    Error |   StdDev |   Median |      Min |      Max |   Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------- |---------:|---------:|---------:|---------:|---------:|---------:|--------:|------:|------:|----------:|\r\n| CompileBuildModule | 21.30 ms | 0.716 ms | 0.825 ms | 21.00 ms | 20.22 ms | 23.08 ms | 90.9091 |     - |     - |    456 KB |\r\n\r\n\r\n|             Method |     Mean |    Error |   StdDev |   Median |      Min |      Max |   Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------- |---------:|---------:|---------:|---------:|---------:|---------:|--------:|------:|------:|----------:|\r\n| CompileBuildModule | 22.58 ms | 1.528 ms | 1.760 ms | 22.88 ms | 19.86 ms | 25.21 ms | 83.3333 |     - |     - |    458 KB |\r\n\r\n\r\n|             Method |     Mean |    Error |   StdDev |   Median |      Min |      Max |   Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------- |---------:|---------:|---------:|---------:|---------:|---------:|--------:|------:|------:|----------:|\r\n| CompileBuildModule | 20.61 ms | 0.512 ms | 0.569 ms | 20.66 ms | 19.52 ms | 21.62 ms | 83.3333 |     - |     - |    459 KB |\r\n\r\n\r\n|             Method |     Mean |    Error |   StdDev |   Median |      Min |      Max |   Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------- |---------:|---------:|---------:|---------:|---------:|---------:|--------:|------:|------:|----------:|\r\n| CompileBuildModule | 19.91 ms | 0.346 ms | 0.307 ms | 19.89 ms | 19.50 ms | 20.45 ms | 83.3333 |     - |     - |    459 KB |\r\n\r\n\r\n|             Method |     Mean |    Error |   StdDev |   Median |      Min |      Max |   Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------- |---------:|---------:|---------:|---------:|---------:|---------:|--------:|------:|------:|----------:|\r\n| CompileBuildModule | 21.11 ms | 0.948 ms | 1.092 ms | 20.67 ms | 19.73 ms | 23.43 ms | 90.9091 |     - |     - |    456 KB |\r\n\r\n\r\n|             Method |     Mean |    Error |   StdDev |   Median |      Min |      Max |   Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------- |---------:|---------:|---------:|---------:|---------:|---------:|--------:|------:|------:|----------:|\r\n| CompileBuildModule | 20.62 ms | 0.836 ms | 0.894 ms | 20.31 ms | 19.58 ms | 22.88 ms | 90.9091 |     - |     - |    458 KB |\r\n\r\n\r\n|             Method |     Mean |    Error |   StdDev |   Median |      Min |      Max |   Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------- |---------:|---------:|---------:|---------:|---------:|---------:|--------:|------:|------:|----------:|\r\n| CompileBuildModule | 22.19 ms | 1.049 ms | 1.208 ms | 22.17 ms | 20.05 ms | 24.68 ms | 83.3333 |     - |     - |    456 KB |\r\n\r\n\r\n|             Method |     Mean |    Error |   StdDev |   Median |      Min |      Max |   Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------- |---------:|---------:|---------:|---------:|---------:|---------:|--------:|------:|------:|----------:|\r\n| CompileBuildModule | 20.87 ms | 1.026 ms | 1.181 ms | 20.44 ms | 19.52 ms | 23.34 ms | 90.9091 |     - |     - |    456 KB |\r\n\r\n\r\n|             Method |     Mean |    Error |   StdDev |   Median |      Min |      Max |   Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------- |---------:|---------:|---------:|---------:|---------:|---------:|--------:|------:|------:|----------:|\r\n| CompileBuildModule | 20.75 ms | 0.918 ms | 0.982 ms | 20.74 ms | 19.44 ms | 22.87 ms | 83.3333 |     - |     - |    458 KB |\r\n</details>\r\n\r\n\r\nResults **with** changes from this PR:\r\n\r\n<details>\r\n  <summary>Click to see the results from the 10 runs</summary>\r\n\r\n```ini\r\nBenchmarkDotNet=v0.12.1.1521-nightly, OS=Windows 10.0.19043\r\nIntel Core i7-1065G7 CPU 1.30GHz, 1 CPU, 8 logical and 4 physical cores\r\n.NET SDK=6.0.100-preview.6.21355.2\r\n  [Host]     : .NET 6.0.0 (6.0.21.35212), X64 RyuJIT\r\n  Job-LKTXSI : .NET 6.0.0 (6.0.21.35212), X64 RyuJIT\r\n\r\nEnvironmentVariables=POWERSHELL_TELEMETRY_OPTOUT=1  PowerPlanMode=00000000-0000-0000-0000-000000000000  Arguments=/p:DebugType=portable\r\n\r\nIterationTime=250.0000 ms  MaxIterationCount=20  MinIterationCount=15\r\nWarmupCount=1\r\n```\r\n\r\n|             Method |     Mean |    Error |   StdDev |   Median |      Min |      Max |   Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------- |---------:|---------:|---------:|---------:|---------:|---------:|--------:|------:|------:|----------:|\r\n| CompileBuildModule | 22.30 ms | 0.612 ms | 0.655 ms | 22.40 ms | 20.89 ms | 23.69 ms | 90.9091 |     - |     - |    457 KB |\r\n\r\n\r\n|             Method |     Mean |    Error |   StdDev |   Median |      Min |      Max |   Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------- |---------:|---------:|---------:|---------:|---------:|---------:|--------:|------:|------:|----------:|\r\n| CompileBuildModule | 21.17 ms | 0.519 ms | 0.533 ms | 21.12 ms | 19.78 ms | 21.84 ms | 90.9091 |     - |     - |    456 KB |\r\n\r\n\r\n|             Method |     Mean |    Error |   StdDev |   Median |      Min |      Max |   Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------- |---------:|---------:|---------:|---------:|---------:|---------:|--------:|------:|------:|----------:|\r\n| CompileBuildModule | 20.93 ms | 1.056 ms | 1.216 ms | 20.97 ms | 18.90 ms | 22.87 ms | 76.9231 |     - |     - |    456 KB |\r\n\r\n\r\n|             Method |     Mean |    Error |   StdDev |   Median |      Min |      Max |   Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------- |---------:|---------:|---------:|---------:|---------:|---------:|--------:|------:|------:|----------:|\r\n| CompileBuildModule | 21.79 ms | 0.840 ms | 0.967 ms | 21.45 ms | 20.59 ms | 23.50 ms | 83.3333 |     - |     - |    456 KB |\r\n\r\n\r\n|             Method |     Mean |    Error |   StdDev |   Median |      Min |      Max |   Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------- |---------:|---------:|---------:|---------:|---------:|---------:|--------:|------:|------:|----------:|\r\n| CompileBuildModule | 21.05 ms | 0.914 ms | 1.053 ms | 20.97 ms | 19.24 ms | 22.96 ms | 83.3333 |     - |     - |    456 KB |\r\n\r\n\r\n|             Method |     Mean |    Error |   StdDev |   Median |      Min |      Max |   Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------- |---------:|---------:|---------:|---------:|---------:|---------:|--------:|------:|------:|----------:|\r\n| CompileBuildModule | 20.71 ms | 0.959 ms | 1.104 ms | 20.36 ms | 19.14 ms | 22.76 ms | 90.9091 |     - |     - |    456 KB |\r\n\r\n\r\n|             Method |     Mean |    Error |   StdDev |   Median |      Min |      Max |    Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------- |---------:|---------:|---------:|---------:|---------:|---------:|---------:|------:|------:|----------:|\r\n| CompileBuildModule | 21.44 ms | 1.061 ms | 1.180 ms | 21.60 ms | 19.41 ms | 23.83 ms | 100.0000 |     - |     - |    455 KB |\r\n\r\n\r\n|             Method |     Mean |    Error |   StdDev |   Median |      Min |      Max |   Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------- |---------:|---------:|---------:|---------:|---------:|---------:|--------:|------:|------:|----------:|\r\n| CompileBuildModule | 21.65 ms | 1.211 ms | 1.394 ms | 21.84 ms | 19.66 ms | 24.64 ms | 90.9091 |     - |     - |    456 KB |\r\n\r\n\r\n|             Method |     Mean |    Error |   StdDev |   Median |      Min |      Max |   Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------- |---------:|---------:|---------:|---------:|---------:|---------:|--------:|------:|------:|----------:|\r\n| CompileBuildModule | 19.94 ms | 0.207 ms | 0.184 ms | 19.95 ms | 19.60 ms | 20.29 ms | 90.9091 |     - |     - |    456 KB |\r\n\r\n\r\n|             Method |     Mean |    Error |   StdDev |   Median |      Min |      Max |   Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------- |---------:|---------:|---------:|---------:|---------:|---------:|--------:|------:|------:|----------:|\r\n| CompileBuildModule | 20.38 ms | 0.510 ms | 0.546 ms | 20.31 ms | 19.59 ms | 21.61 ms | 83.3333 |     - |     - |    456 KB |\r\n</details>\r\n\r\n#### Result Analysis\r\n\r\n- The mean times (`Mean` column) from the benchmarking runs **without** changes from this PR are slightly better than the benchmark runs **with** changes from this PR. (no significant differences, but slightly better, if you look into the data).\r\n\r\n- The gen-0 collects (`Gen 0` column) from the benchmarking runs **without** changes from this PR are also slightly better than that from the runs **with** changes from this PR.\r\n\r\n- The allocated memory (`Allocated` column) from the benchmarking runs **with** changes from this PR are slightly less than that from the runs **without** changes from this PR. (about 2-3kb less in 4 out of 10 runs, other runs have the same allocated memory)\r\n\r\nSo, only the allocated memory is slightly better with the changes in this PR, but somehow the `gen-0` collects is more, and thus the `mean` time is worse comparing with the existing code.\r\n\r\n------------------------------------------\r\n\r\n@vexx32 @iSazonov Please take a look at the benchmark PR #16083 and see if I missed anything in my benchmark. If not, please also try run the benchmark to see if you get similar results.",
      "created_at": "2021-09-11T00:21:18Z",
      "updated_at": "2021-09-13T16:26:17Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Hmmm, when increase the size of the test script, the results **with** the changes from this PR seems a little better. I chose to use the `PSModule.psm1` file from the `PowerShellGet` module, whose size is 1.3mb. Comparing to `build.psm1` (123kb), `PSModule.psm1` is way larger.\r\n\r\n#### Result Data\r\n\r\nResults **without** changes from this PR:\r\n\r\n<details>\r\n  <summary>Click to see the results from 6 runs</summary>\r\n\r\n```ini\r\nBenchmarkDotNet=v0.13.1, OS=Windows 10.0.19043.1165 (21H1/May2021Update)\r\nIntel Core i7-1065G7 CPU 1.30GHz, 1 CPU, 8 logical and 4 physical cores\r\n.NET SDK=6.0.100-preview.6.21355.2\r\n  [Host]     : .NET 6.0.0 (6.0.21.35212), X64 RyuJIT\r\n  Job-TLRODV : .NET 6.0.0 (6.0.21.35212), X64 RyuJIT\r\n\r\nEnvironmentVariables=POWERSHELL_TELEMETRY_OPTOUT=1  PowerPlanMode=00000000-0000-0000-0000-000000000000  Arguments=/p:DebugType=portable\r\n\r\nIterationTime=250.0000 ms  MaxIterationCount=20  MinIterationCount=15\r\nWarmupCount=1\r\n```\r\n\r\n|             Method |     Mean |   Error |  StdDev |   Median |      Min |      Max | Allocated |\r\n|------------------- |---------:|--------:|--------:|---------:|---------:|---------:|----------:|\r\n| CompileBuildModule | 103.0 ms | 2.88 ms | 3.31 ms | 101.7 ms | 98.39 ms | 109.8 ms |      1 MB |\r\n\r\n\r\n|             Method |     Mean |   Error |  StdDev |   Median |      Min |      Max | Allocated |\r\n|------------------- |---------:|--------:|--------:|---------:|---------:|---------:|----------:|\r\n| CompileBuildModule | 101.7 ms | 2.03 ms | 2.26 ms | 102.3 ms | 96.60 ms | 104.9 ms |      1 MB |\r\n\r\n\r\n|             Method |     Mean |    Error |   StdDev |   Median |      Min |      Max | Allocated |\r\n|------------------- |---------:|---------:|---------:|---------:|---------:|---------:|----------:|\r\n| CompileBuildModule | 99.28 ms | 1.612 ms | 1.507 ms | 99.02 ms | 97.11 ms | 101.5 ms |      1 MB |\r\n\r\n\r\n|             Method |     Mean |    Error |   StdDev |   Median |      Min |      Max | Allocated |\r\n|------------------- |---------:|---------:|---------:|---------:|---------:|---------:|----------:|\r\n| CompileBuildModule | 96.21 ms | 1.928 ms | 2.221 ms | 96.24 ms | 93.09 ms | 100.7 ms |      1 MB |\r\n\r\n\r\n|             Method |     Mean |    Error |   StdDev |   Median |      Min |      Max | Allocated |\r\n|------------------- |---------:|---------:|---------:|---------:|---------:|---------:|----------:|\r\n| CompileBuildModule | 97.41 ms | 3.572 ms | 3.970 ms | 95.29 ms | 93.68 ms | 106.5 ms |      1 MB |\r\n\r\n\r\n|             Method |     Mean |    Error |   StdDev |   Median |      Min |      Max | Allocated |\r\n|------------------- |---------:|---------:|---------:|---------:|---------:|---------:|----------:|\r\n| CompileBuildModule | 91.43 ms | 1.782 ms | 1.750 ms | 90.81 ms | 89.38 ms | 95.80 ms |      1 MB |\r\n\r\n\r\n|             Method |     Mean |    Error |   StdDev |   Median |      Min |      Max | Allocated |\r\n|------------------- |---------:|---------:|---------:|---------:|---------:|---------:|----------:|\r\n| CompileBuildModule | 95.05 ms | 2.192 ms | 2.524 ms | 94.01 ms | 91.74 ms | 100.0 ms |      1 MB |\r\n\r\n</details>\r\n\r\nResults **with** changes from this PR:\r\n\r\n<details>\r\n  <summary>Click to see the results from 6 runs</summary>\r\n\r\n```ini\r\nBenchmarkDotNet=v0.13.1, OS=Windows 10.0.19043.1165 (21H1/May2021Update)\r\nIntel Core i7-1065G7 CPU 1.30GHz, 1 CPU, 8 logical and 4 physical cores\r\n.NET SDK=6.0.100-preview.6.21355.2\r\n  [Host]     : .NET 6.0.0 (6.0.21.35212), X64 RyuJIT\r\n  Job-KKVGUA : .NET 6.0.0 (6.0.21.35212), X64 RyuJIT\r\n\r\nEnvironmentVariables=POWERSHELL_TELEMETRY_OPTOUT=1  PowerPlanMode=00000000-0000-0000-0000-000000000000  Arguments=/p:DebugType=portable\r\n\r\nIterationTime=250.0000 ms  MaxIterationCount=20  MinIterationCount=15\r\nWarmupCount=1\r\n```\r\n\r\n|             Method |     Mean |    Error |   StdDev |   Median |      Min |      Max | Allocated |\r\n|------------------- |---------:|---------:|---------:|---------:|---------:|---------:|----------:|\r\n| CompileBuildModule | 95.36 ms | 2.668 ms | 2.966 ms | 95.75 ms | 91.22 ms | 100.9 ms |      1 MB |\r\n\r\n\r\n|             Method |     Mean |    Error |   StdDev |   Median |      Min |      Max | Allocated |\r\n|------------------- |---------:|---------:|---------:|---------:|---------:|---------:|----------:|\r\n| CompileBuildModule | 92.41 ms | 1.843 ms | 2.123 ms | 92.43 ms | 89.01 ms | 97.16 ms |      1 MB |\r\n\r\n\r\n|             Method |     Mean |    Error |   StdDev |   Median |      Min |      Max | Allocated |\r\n|------------------- |---------:|---------:|---------:|---------:|---------:|---------:|----------:|\r\n| CompileBuildModule | 90.98 ms | 1.352 ms | 1.389 ms | 90.89 ms | 89.49 ms | 94.71 ms |      1 MB |\r\n\r\n\r\n|             Method |     Mean |    Error |   StdDev |   Median |      Min |      Max | Allocated |\r\n|------------------- |---------:|---------:|---------:|---------:|---------:|---------:|----------:|\r\n| CompileBuildModule | 92.70 ms | 1.769 ms | 2.037 ms | 92.96 ms | 89.41 ms | 95.92 ms |      1 MB |\r\n\r\n\r\n|             Method |     Mean |    Error |   StdDev |   Median |      Min |      Max | Allocated |\r\n|------------------- |---------:|---------:|---------:|---------:|---------:|---------:|----------:|\r\n| CompileBuildModule | 93.48 ms | 3.321 ms | 3.825 ms | 93.39 ms | 85.67 ms | 101.8 ms |      1 MB |\r\n\r\n\r\n|             Method |     Mean |    Error |   StdDev |   Median |      Min |      Max | Allocated |\r\n|------------------- |---------:|---------:|---------:|---------:|---------:|---------:|----------:|\r\n| CompileBuildModule | 93.23 ms | 2.341 ms | 2.696 ms | 92.56 ms | 89.67 ms | 98.06 ms |      1 MB |\r\n\r\n\r\n|             Method |     Mean |    Error |   StdDev |   Median |      Min |      Max |    Gen 0 | Allocated |\r\n|------------------- |---------:|---------:|---------:|---------:|---------:|---------:|---------:|----------:|\r\n| CompileBuildModule | 90.15 ms | 1.797 ms | 1.500 ms | 90.10 ms | 88.17 ms | 92.69 ms | 250.0000 |      1 MB |\r\n</details>\r\n\r\n#### Data Analysis\r\n\r\nThe average of `Mean` time to compile `PSMoudle.psm1` script with the current existing code is 97.726 ms, while the average `Mean` time for the same with the changes from this PR is 92.616 ms. So, it shows about 5% improvement.\r\n\r\nAllocated memory is about the same -- 1mb. But it's weird that there is no GC collects shown for most of the runs.",
      "created_at": "2021-09-11T06:06:20Z",
      "updated_at": "2021-09-11T06:13:27Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Interesting. I've not had time to run through myself but I'll give it a go this weekend. \r\n\r\nWould be curious whether there's a difference in compiling something class-heavy vs function-heavy vs general script as well.",
      "created_at": "2021-09-11T08:32:11Z",
      "updated_at": "2021-09-11T08:32:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I made some experiments with the code before and found the code very optimized (by Jason Shirk I guess \ud83d\udc4d ). And I'd be very wonder if we would have seen a marked increase in performance in such a large synthetic test (_milliseconds_) while doing some specific micro-optimizations (_nano-seconds_).\r\nWe would have to create script code for _each change from this PR_ so that the test shows a clearly visible performance gain.",
      "created_at": "2021-09-13T06:30:12Z",
      "updated_at": "2021-09-13T06:30:12Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2021-09-21T02:00:37Z",
      "updated_at": "2021-09-21T02:00:37Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "Closing and re-opening PR to get the new CIs working for this PR.",
      "created_at": "2021-12-09T01:18:39Z",
      "updated_at": "2021-12-09T01:18:39Z"
    },
    {
      "author": "pull-request-quantifier[bot]",
      "author_association": "NONE",
      "body": "### ![](https://img.shields.io/static/v1?label=Quantified&message=Large&color=red)\r\n\r\nThis PR has `369` quantified lines of changes. In general, a change size of upto `200` lines is ideal for the best PR experience!\r\n\r\n------\r\n\r\n<details >\r\n    <summary display=\"inline\"> <strong>Quantification details</strong></summary>\r\n    <p />\r\n\r\n```\r\nLabel      : Large\r\nSize       : +255 -114\r\nPercentile : 76.9%\r\n\r\nTotal files changed: 4\r\n\r\nChange summary by file extension:\r\n.cs : +255 -114\r\n```\r\n> Change counts above are quantified counts, based on the [PullRequestQuantifier customizations](https://github.com/microsoft/PullRequestQuantifier/blob/main/docs/prquantifier-yaml.md).\r\n    \r\n</details>\r\n\r\n\r\n<details>\r\n    <summary display=\"inline\"> <strong>Why proper sizing of changes matters</strong> </summary>\r\n    <p/>\r\n    <p/>\r\n\r\nOptimal pull request sizes drive a better predictable PR flow as they strike a\r\nbalance between between PR complexity and PR review overhead. PRs within the\r\noptimal size (typical small, or medium sized PRs) mean:\r\n\r\n- Fast and predictable releases to production:\r\n  - Optimal size changes are more likely to be reviewed faster with fewer\r\niterations.\r\n  - Similarity in low PR complexity drives similar review times.\r\n- Review quality is likely higher as complexity is lower:\r\n  - Bugs are more likely to be detected.\r\n  - Code inconsistencies are more likely to be detetcted.\r\n- Knowledge sharing is improved within the participants:\r\n  - Small portions can be assimilated better.\r\n- Better engineering practices are exercised:\r\n  - Solving big problems by dividing them in well contained, smaller problems.\r\n  - Exercising separation of concerns within the code changes.\r\n\r\n#### What can I do to optimize my changes\r\n\r\n- Use the PullRequestQuantifier to quantify your PR accurately\r\n  - Create a context profile for your repo using the [context generator](https://github.com/microsoft/PullRequestQuantifier/releases)\r\n  - Exclude files that are not necessary to be reviewed or do not increase the review complexity. Example: Autogenerated code, docs, project IDE setting files, binaries, etc. Check out the `Excluded` section from your `prquantifier.yaml` context profile. \r\n  - Understand your typical change complexity, drive towards the desired complexity by adjusting the label mapping in your `prquantifier.yaml` context profile.\r\n  - Only use the labels that matter to you, [see context specification](./docs/prquantifier-yaml.md) to customize your `prquantifier.yaml` context profile.\r\n- Change your engineering behaviors\r\n  - For PRs that fall outside of the desired spectrum, review the details and check if:\r\n    - Your PR could be split in smaller, self-contained PRs instead\r\n    - Your PR only solves one particular issue. (For example, don't refactor and code new features in the same PR).\r\n\r\n#### How to interpret the change counts in git diff output\r\n\r\n- One line was added: `+1 -0`\r\n- One line was deleted: `+0 -1`\r\n- One line was modified: `+1 -1` (git diff doesn't know about modified, it will\r\ninterpret that line like one addition plus one deletion)\r\n- Change percentiles: Change characteristics (addition, deletion, modification)\r\nof this PR in relation to all other PRs within the repository.\r\n\r\n</details>\r\n\r\n<p />\r\n\r\n------\r\n\r\nWas this comment helpful? <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoidmV4eDMyIiwiUmVwb3NpdG9yeUxpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsIiwiUHVsbFJlcXVlc3RMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbC9wdWxsLzEzNTQzIiwiRXZlbnRUeXBlIjoiVGh1bWJzVXAifQ==&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs up\"><strong>:thumbsup:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoidmV4eDMyIiwiUmVwb3NpdG9yeUxpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsIiwiUHVsbFJlcXVlc3RMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbC9wdWxsLzEzNTQzIiwiRXZlbnRUeXBlIjoiTmV1dHJhbCJ9&amp;anonymous=True\" target=\"_blank\" title=\"Neutral\"><strong>&nbsp;:ok_hand:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoidmV4eDMyIiwiUmVwb3NpdG9yeUxpbmsiOiJodHRwczovL2dpdGh1Yi5jb20vUG93ZXJTaGVsbC9Qb3dlclNoZWxsIiwiUHVsbFJlcXVlc3RMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbC9wdWxsLzEzNTQzIiwiRXZlbnRUeXBlIjoiVGh1bWJzRG93biJ9&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs down\"><strong>&nbsp;:thumbsdown:</strong></a> (<a href=\"MAILTO:prquantifier@microsoft.com\" title=\"Mail to prquantifier@microsoft.com\">Email</a>)\r\n[Customize PullRequestQuantifier](https://github.com/PowerShell/PowerShell/blob/master/.github/prquantifier.yaml) for this repository.\r\n\r\n",
      "created_at": "2021-12-09T01:18:46Z",
      "updated_at": "2021-12-09T01:18:46Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "I added 'Review-Maintainer' label to discuss whether we should take this change or not as the demonstrated benefit is not very large,",
      "created_at": "2021-12-09T01:32:38Z",
      "updated_at": "2021-12-09T01:32:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "My conclusion was https://github.com/PowerShell/PowerShell/pull/13543#issuecomment-917882084\r\nI always welcome the slightest improvement in performance and following the repo rules.",
      "created_at": "2021-12-09T04:28:07Z",
      "updated_at": "2021-12-09T04:28:07Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2021-12-16T14:00:47Z",
      "updated_at": "2021-12-16T14:00:47Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "I don't think we have demonstrated a substantial improvement as compared to the current code. We would like to reduce the risk on regressions in a sensitive piece of code and not take this PR.",
      "created_at": "2022-05-23T19:05:42Z",
      "updated_at": "2022-05-23T19:05:42Z"
    }
  ],
  "created_at": "2020-08-29T17:23:12Z",
  "number": 13543,
  "state": "closed",
  "title": "Cleanup/Optimization: Remove remaining LINQ usage in the compiler",
  "updated_at": "2022-06-07T19:35:35Z"
}