{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4682",
  "author": "janegilring",
  "body": "Steps to reproduce\r\n------------------\r\n\r\n```powershell\r\n#Add the following to the $profile file\r\n$PSDefaultParameterValues.Add('Get-Service:Name', 'spooler')\r\n#Open PowerShell Core and inspect the contents of $PSDefaultParameterValues\r\n$PSDefaultParameterValues\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n$PSDefaultParameterValues should contain the contents specified in the PowerShell profile file specified in $profile.\r\n\r\nActual behavior\r\n---------------\r\n\r\n$PSDefaultParameterValues is blank.\r\n\r\nThe same example works as expected on PowerShell Desktop 5.1.\r\n\r\nIs profile support removed from PowerShell Core?\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\name                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-beta\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-beta.4\r\nOS                             Microsoft Windows 10.0.15063\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```\r\n",
  "closed_at": "2017-08-27T19:54:40Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "It may not always make a difference, but generally please try to use the most recent release before reporting an issue - current is beta **6**.\r\n\r\nIn the current beta I cannot reproduce the issue.\r\nSilly questions, but did you make sure to either open a new session after changing `$PROFILE` or run `. $PROFILE` before testing? Is there code in the profile that runs later and perhaps clears the variable?\r\n",
      "created_at": "2017-08-27T12:45:17Z",
      "updated_at": "2017-08-27T12:45:17Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I'm not repro'ing this either in beta.6",
      "created_at": "2017-08-27T19:54:40Z",
      "updated_at": "2017-08-27T19:54:40Z"
    },
    {
      "author": "janegilring",
      "author_association": "NONE",
      "body": "I was sure I upgraded to beta 6 yesterday, but that turned out to be on a different machine.\r\nAnyway, I think I found the root cause.\r\n$profile points to C:\\Users\\<username>\\Documents\\PowerShell\\Microsoft.PowerShell_profile.ps1. I didn`t know that PowerShell Core does not leverage the same profile path as PowerShell Desktop (C:\\Users\\<username>\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1.)\r\n\r\nAfter creating a symbolic link to the WindowsPowerShell folder it works as expected:\r\n```powershell\r\nNew-Item -ItemType SymbolicLink -Path (Join-Path -Path $Env:USERPROFILE -ChildPath Documents) -Name PowerShell -Target (Join-Path -Path $Env:USERPROFILE -ChildPath Documents\\WindowsPowerShell)\r\n```",
      "created_at": "2017-08-27T20:16:16Z",
      "updated_at": "2017-08-27T20:16:52Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Yes, the `$PROFILE` paths are edition-specific, which generally makes sense (and, obviously, there's no _Windows_ PowerShell profile on Unix platforms).",
      "created_at": "2017-08-27T20:31:11Z",
      "updated_at": "2017-08-27T20:31:11Z"
    },
    {
      "author": "IanKemp",
      "author_association": "NONE",
      "body": "And if you already have the `Documents\\PowerShell` directory:\r\n\r\n`New-Item -ItemType SymbolicLink -Path (Join-Path -Path $Env:USERPROFILE -ChildPath Documents\\PowerShell) -Name Microsoft.PowerShell_profile.ps1 -Target (Join-Path -Path $Env:USERPROFILE -ChildPath Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1`",
      "created_at": "2018-06-15T05:34:39Z",
      "updated_at": "2018-06-15T05:34:39Z"
    },
    {
      "author": "jberezanski",
      "author_association": "NONE",
      "body": "The snippets above will not work correctly for users who have their Documents directory renamed or redirected out of the default location. Typical cases include redirection to OneDrive.\r\n\r\nThe robust way is to [ask the OS](https://docs.microsoft.com/en-us/dotnet/api/system.environment.getfolderpath) for the location of the Documents directory:\r\n```powershell\r\n# if pwsh profile directory does not exist yet\r\nNew-Item -ItemType SymbolicLink -Path ([Environment]::GetFolderPath('Personal')) -Name PowerShell -Target (Join-Path -Path ([Environment]::GetFolderPath('Personal')) -ChildPath WindowsPowerShell)\r\n\r\n# if pwsh profile directory already exists\r\nNew-Item -ItemType SymbolicLink -Path (Join-Path -Path ([Environment]::GetFolderPath('Personal')) -ChildPath PowerShell) -Name Microsoft.PowerShell_profile.ps1 -Target (Join-Path -Path ([Environment]::GetFolderPath('Personal')) -ChildPath WindowsPowerShell\\Microsoft.PowerShell_profile.ps1)\r\n```\r\n",
      "created_at": "2020-10-28T10:42:14Z",
      "updated_at": "2020-11-23T10:12:02Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Good point, @jberezanski.\r\n\r\nTwo asides:\r\n\r\n* I wish calling a .NET method weren't needed for this - see #6966\r\n\r\n* PowerShell's automatic `$HOME` variable is defined as the value of `%USERPROFILE%` (using `cmd` notation; for the profile and configuration information), though it should have been `%HOMEDRIVE%%HOMEPATH%` (for the user's _files_), because these two can be configured to point to different locations.\r\n\r\n\r\n\r\n",
      "created_at": "2020-10-28T13:06:05Z",
      "updated_at": "2020-10-28T13:06:05Z"
    },
    {
      "author": "jberezanski",
      "author_association": "NONE",
      "body": "Actually, several years ago I had created [a PS module](https://github.com/jberezanski/PSKnownFolders) for inspecting and manipulating [known folders](https://docs.microsoft.com/en-us/windows/win32/shell/known-folders) using the COM API (which provides much more functionality than the legacy API used internally by the .NET Environment class). I wanted to ease my pain of mass redirecting the folders (including the Public ones) out of the system drive when setting up multiple computers for several members of my family - by default possible only by clicking in the GUI (and requiring temporarily disabling UAC to move the Public folders). The goal was to be able to write\r\n```powershell\r\n# as any user\r\nGet-KnownFolder | Move-KnownFolder -Destination F:\\Profiles\\$Env:UserName\r\n# as admin\r\nGet-KnownFolder -Public | Move-KnownFolder -Destination F:\\Profiles\\Public\r\n```\r\n\r\nThe module is fully functional (I tend to use it any time I set up a new computer); I just ran out of free time and motivation to make the finishing touches - writing some docs/examples and publishing to PSGallery. I could probably make that effort if there is interest.\r\n\r\nHere we would use:\r\n```powershell\r\nPS C:\\> (Get-KnownFolder -Name Personal).Path\r\nF:\\Profiles\\jberezanski\\Documents\r\n```\r\n\r\nEdit: I skimmed your post and jumped straight to writing my answer without noticing the linked issue; I'll repost it there, maybe it will help someone.",
      "created_at": "2020-10-28T13:45:37Z",
      "updated_at": "2020-10-28T13:51:15Z"
    }
  ],
  "created_at": "2017-08-27T04:50:48Z",
  "number": 4682,
  "state": "closed",
  "title": "PowerShell profiles on PowerShell Core",
  "updated_at": "2020-11-23T10:12:02Z"
}