{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5592",
  "author": "markekraus",
  "body": "closes #5581 \r\n\r\n.NET 4.7.1 adds the APIs `Get-EnvironmentInformation` was using to determine if it is on CoreCLR or not. This is not `$IsCoreCLR`, but a part of the environment gathering used in the build and packaging. \r\n",
  "closed_at": "2017-12-02T11:39:05Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "How about changing the check to the following?\r\n```powershell\r\nif ($PSVersionTable.ContainsKey(\"PSEdition\") -and $PSVersionTable.PSEdition -eq \"Core\") {\r\n    $environment += @{'IsCoreCLR' = $true}\r\n    $environment += @{'IsLinux' = $IsLinux}\r\n    $environment += @{'IsMacOS' = $IsMacOS}\r\n    $environment += @{'IsWindows' = $IsWindows}\r\n} else {\r\n    $environment += @{'IsCoreCLR' = $false}\r\n    $environment += @{'IsLinux' = $false}\r\n    $environment += @{'IsMacOS' = $false}\r\n    $environment += @{'IsWindows' = $true}\r\n}\r\n```",
      "created_at": "2017-12-01T05:04:10Z",
      "updated_at": "2017-12-01T05:04:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We can remove `$PSVersionTable.ContainsKey(\"PSEdition\")`.",
      "created_at": "2017-12-01T05:11:34Z",
      "updated_at": "2017-12-01T05:11:34Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@daxian-dbw I thought the entire point of this was to not rely on `pwsh` for this information as much as possible. If I break PowerShell so that it reports `$IsWindows` and `$IsLinux` all kinds of trouble will happen. The environment from this function is for building and testing. It should be set apart. ideally we would using some .NET API to figure out it this is CoreCLR or not and _not_ rely on `$PSVersionTable.PSEdition`. Any ideas?",
      "created_at": "2017-12-01T09:39:07Z",
      "updated_at": "2017-12-01T09:39:07Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@markekraus If you break powershell, how would you trust the type resolution in powershell still works? So `[System.Runtime.InteropServices.RuntimeInformation]` could throw a unrelated exception and make the script believe it's in a Windows PowerShell environment \ud83d\ude04\r\nI think `$PSVersionTable.PSEdition` and variables like `$IsWindows`, `$IsLinux` and `$IsMacOS` are pretty static and would be quite unlikely to be changed. Also, I think the PowerShell session you use to build powershell usually is a comparatively stable version.\r\n",
      "created_at": "2017-12-01T17:27:46Z",
      "updated_at": "2017-12-01T17:27:46Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov We can remove `$PSVersionTable.ContainsKey(\"PSEdition\")` in build.psm1, but for a script that has `Set-Strict -version latest` at the top, this check will be needed in case it's running on PSv5 or earlier versions.",
      "created_at": "2017-12-01T17:30:46Z",
      "updated_at": "2017-12-01T17:30:46Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I think maybe `RuntimeInformation` was used initially because of the NanoServer PowerShell, which has `$PSVersionTable.PSEdition == Core` but doesn't have `$IsCoreCLR`, `$IsWindows`, `$IsLinux` and `$IsMacOS`. But I don't think anyone will build powershell in a NanoServer. Also, starting from RS3, the NanoServer image doesn't have the NanoServer PowerShell in it.",
      "created_at": "2017-12-01T17:44:44Z",
      "updated_at": "2017-12-01T17:44:44Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "\u00af\\\\\\_(\u30c4\\)_/\u00af\r\nupdated with the suggestions. ",
      "created_at": "2017-12-01T17:52:33Z",
      "updated_at": "2017-12-01T17:52:33Z"
    }
  ],
  "created_at": "2017-12-01T00:00:28Z",
  "number": 5592,
  "state": "closed",
  "title": "Fix Get-EnvironmentInformation IsCoreCLR logic",
  "updated_at": "2018-01-19T18:58:15Z"
}