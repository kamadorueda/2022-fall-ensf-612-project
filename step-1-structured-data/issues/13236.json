{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13236",
  "author": "rjmholt",
  "body": "Currently PowerShell uses a fair amount of generated code, for example:\r\n\r\n- [The default formatters are all autogenerated](https://github.com/PowerShell/PowerShell/tree/master/src/System.Management.Automation/FormatAndOutput/DefaultFormatters) and there's discussion about refactoring them to improve startup performance already\r\n- [Much of the core interpreter was generated in Python many years ago](https://github.com/PowerShell/PowerShell/tree/master/src/System.Management.Automation/engine/interpreter). There has been discussion in the past about updating our dependency on the LightCompiler\r\n\r\nInstead, we could keep generated code out of the checked-in files by defining it as generated at build time using [.NET Source Generators](https://devblogs.microsoft.com/dotnet/introducing-c-source-generators/).",
  "closed_at": null,
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Related: #12760",
      "created_at": "2020-07-22T01:42:00Z",
      "updated_at": "2020-07-22T01:42:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The issue looks like Meta. Could you add more info where you want to use RSG (Roslyn Source Generators)?\r\n\r\nI only know we use TypeGen utility at pre-build time.",
      "created_at": "2020-07-22T18:18:46Z",
      "updated_at": "2020-07-22T18:18:46Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Thinking about CDXML more, I think because that's a runtime code emission thing, that might be more a question of `Reflection.Emit`-type usages. AFAIK, Source Generators only occur at compile time, whereas CDXML files we must process when loaded at runtime",
      "created_at": "2020-07-22T19:40:12Z",
      "updated_at": "2020-07-22T19:40:12Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> CDXML files we must process when loaded at runtime\r\n\r\nThe idea would be instead of generating a PowerShell module based on the cdxml, generate a binary module at compile time and ship that instead.  afaik nothing changes based on the environment it's loaded into, just based on the cdxml.\r\n\r\nI know PowerShell doesn't specifically ship any cdxml (right?), but a PS team supported build time cmdletization API would be ideal.\r\n\r\n",
      "created_at": "2020-07-22T20:15:57Z",
      "updated_at": "2020-07-22T20:15:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> The default formatters are all autogenerated \r\n\r\nIn #10898 @daxian-dbw used internal tool to convert type files in optimal format. We could do the same for format files without creating RSGs. Or vice versa, use generators in both cases (and share them for other projects). Although I'm not sure if it will \u0437\u0443\u043a\u0430 win.\r\n\r\n> Much of the core interpreter was generated in Python many years ago. There has been discussion in the past about updating our dependency on the LightCompiler.\r\n\r\nDo you mean #2230? I believe the code was copy-pasted from old .Net with a little change.\r\n\r\n\r\n",
      "created_at": "2020-07-23T06:22:57Z",
      "updated_at": "2020-07-23T06:22:57Z"
    }
  ],
  "created_at": "2020-07-21T22:28:08Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine"
  ],
  "number": 13236,
  "state": "open",
  "title": "Consider using source generators for currently generated code",
  "updated_at": "2020-07-23T06:22:57Z"
}