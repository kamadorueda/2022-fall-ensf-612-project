{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4267",
  "author": "mklement0",
  "body": "Steps to reproduce\r\n------------------\r\n\r\n```powershell\r\nSet-Location /\r\n\r\n$j = $pwd & Receive-Job -AutoRemoveJob -Wait $j\r\n\r\n$j = Start-Job { $pwd }; Receive-Job -AutoRemoveJob -Wait $j\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\n/    # on Windows: C:\\\r\n/\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\n/\r\n/home/jdoe   # on Linux; on macOS: /User/jdoe; on Windows: C:\\Users\\jdoe\\Documents\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta.4 on macOS 10.12.5\r\nPowerShell Core v6.0.0-beta.4 on Ubuntu 16.04.2 LTS\r\nPowerShell Core v6.0.0-beta.4 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\n```\r\n",
  "closed_at": "2017-07-18T23:09:07Z",
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "This is by design. While & uses Start-Job under the covers, it is intended to mimic the *nix behavior which runs the background process in the current directory. ",
      "created_at": "2017-07-18T23:09:07Z",
      "updated_at": "2017-07-18T23:09:07Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Understood. Please make sure that the difference is documented.",
      "created_at": "2017-07-18T23:10:22Z",
      "updated_at": "2017-07-18T23:10:22Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Speaking of mimicking *nix behavior: more things worth documenting:\r\n\r\nFrom what I can tell, PowerShell's jobs are fundamentally different from Bash's (do tell if I'm missing something - I'm not too familiar with PS jobs):\r\n\r\n* They can only be run \"batch\"-style with no interactive user input supported (if you send a Bash script to the background with a PS job, for instance, and that script tries to read from (non-redirected) stdin, it will simply encounter EOF (nothing to read) and proceed with empty input. By contrast, Bash would \"stop\" (suspend) such a script, allowing it to be brought to the foreground via job control to then supply the input interactively.)\r\n\r\n* They never output directly to the invoking terminal.\r\n\r\nGenerally, PS has no equivalent to Bash's _job control_ with respect to bringing jobs to the foreground / sending them to the background / \"stopping\" (suspending) and resuming them.\r\n\r\n",
      "created_at": "2017-08-08T14:29:32Z",
      "updated_at": "2017-08-08T14:29:43Z"
    }
  ],
  "created_at": "2017-07-16T22:46:59Z",
  "labels": [
    "Resolution-By Design"
  ],
  "number": 4267,
  "state": "closed",
  "title": "Using postpositional & (control operator) rather than Start-Job results in different current location (working directory)",
  "updated_at": "2018-10-15T21:56:05Z"
}