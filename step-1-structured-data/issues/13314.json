{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13314",
  "author": "yecril71pl",
  "body": "## Summary of the new feature/enhancement\r\n\r\n<!-- \r\nA clear and concise description of what the problem is that the new feature would solve.\r\nTry formulating it in user story style (if applicable):\r\n'As a user I want X so that Y.' with X being the being the action and Y being the value of the action.\r\n-->\r\nProperties for sorting must be specified as strings.  Since the indices to arrays are integers, not strings, it is quite odd to have to specify them as strings.\r\n\r\n## Proposed technical implementation details (optional)\r\n\r\n<!-- \r\nA clear and concise description of what you want to happen.\r\nConsider providing an example PowerShell experience with expected result.\r\n-->\r\n```powershell\r\n(,2), (,12) | SORT 0 -T:1 | SHOULD -BE 2\r\n```\r\n",
  "closed_at": "2020-08-03T00:00:16Z",
  "comments": [
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "Hi @yecril71pl  If a string is specified for `-Property`, that string is used as the _name_ of the property to sort on. However, as well as a string, you can specify a `ScriptBlock` which will be used to compute the _value_ to sort on for each input item. For example,\r\n ```powershell\r\n @((1,2),(3,1)) | sort {$_[1]} # sort on the second element in a list of pairs.\r\n```\r\nThis is the most general solution and will let you do whatever you want. ",
      "created_at": "2020-07-31T22:50:32Z",
      "updated_at": "2020-07-31T22:50:32Z"
    },
    {
      "author": "yecril71pl",
      "author_association": "CONTRIBUTOR",
      "body": "Consider, however, the absurdity of the following call, which *does* work:\r\n```powershell\r\n(,2), (,12) | SORT '0' -T:1 | SHOULD -BE 2\r\n```\r\nAlso, I suppose that declarative calls should be preferred to procedural calls, as they are easier to understand and probably more efficient.",
      "created_at": "2020-08-01T05:43:27Z",
      "updated_at": "2020-08-01T05:46:59Z"
    },
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "@yecril71pl In fact, it doesn't actually work: replacing \"0\" with \"zork\" produces the same result. If you add more elements to the array, you'll see that it isn't sorting at all.  What's happening is that `sort` tries to access the property `0` on each object. Since there is no such property, the property accessor code returns null. It does this for each object so all objects are considered equal with the result that `sort` effectively does nothing.\r\n\r\n> Also, I suppose that declarative calls should be preferred to procedural calls, as they are easier to understand and probably more efficient.\r\n\r\nIt's actually not declarative. PowerShell is polymorphic but not generic so everything is resolved at runtime.\r\n\r\nNote 1: So why doesn't generate an error if the property is missing? Because PowerShell deals with heterogeneous streams. Consider `gci | sort length`. The `gci` command returns a mixture of `FileInfo` and `DirectoryInfo` object. `DirectoryInfo` objects don't have a `Length` property so generating an error on a missing property would cause the sort to fail. Ignoring missing properties makes the interactive experience generally much simpler.\r\n\r\nNote 2: Why do we allow `0` as a property name when it's not a legal .NET name? Because the PowerShell type system adapts arbitrary objects that don't have the same restrictions as .NET. For example, you can use dot notation to access XML elements.\r\n ",
      "created_at": "2020-08-01T23:42:30Z",
      "updated_at": "2020-08-01T23:42:30Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-08-03T00:00:13Z",
      "updated_at": "2020-08-03T00:00:13Z"
    }
  ],
  "created_at": "2020-07-30T06:25:48Z",
  "labels": [
    "Issue-Enhancement",
    "Resolution-Answered"
  ],
  "number": 13314,
  "state": "closed",
  "title": "Allow sorting jagged arrays by column numbers as integers",
  "updated_at": "2020-08-03T00:00:16Z"
}