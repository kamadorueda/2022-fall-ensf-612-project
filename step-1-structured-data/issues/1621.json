{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1621",
  "author": "jdhitsolutions",
  "body": "<!--\n\nIf it is a bug report:\n- make sure you are able to repro it on the latest released version. \nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\n- Search the existing issues.\n- Refer to the [FAQ](../docs/FAQ.md).\n- Refer to the [known issues](../docs/KNOWNISSUES.md).\n- Fill out the following repro template\n\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\n-->\n## Steps to reproduce\n\nStart a PowerShell session.\nRemove-Module PSReadline\nImport-Module PSReadline\n## Expected behavior\n\nExpect to be able to re-import PSReadline. This works with other modules.\n## Actual behavior\n\nError reporting module can't be found.\n\n<img width=\"362\" alt=\"psreadlineerror\" src=\"https://cloud.githubusercontent.com/assets/12089920/17369373/17b028fe-5966-11e6-9c62-f8ef8cefec58.png\">\n## Environment data\n\n<!-- provide the output of $PSVersionTable -->\n\n``` powershell\n> $PSVersionTable\nName                           Value\n----                           -----\nPSVersion                      5.1.10032.0\nPSEdition                      PowerShellCore\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\nBuildVersion                   3.0.0.0\nGitCommitId                    v6.0.0-alpha.7\nCLRVersion\nWSManStackVersion              3.0\nPSRemotingProtocolVersion      2.3\nSerializationVersion           1.1.0.1\n```\n",
  "closed_at": "2017-10-19T21:44:22Z",
  "comments": [
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "You look like you're running on Linux, which is case-sensitive. Try `Import-Module PSReadLine` with a capital L (or let tab-completion finish it).\n",
      "created_at": "2016-08-03T17:54:14Z",
      "updated_at": "2016-08-03T17:54:14Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "The Linux filesystem is case-sensitive but that doesn't \"necessarily\" mean PS Core should be case-sensitive WRT module names.  I get that module names are backed by directory names and that complicates things - what if an author creates two (or more) module folders that vary by case only e.g. Foo, foo, FOO.  If PS Core uses case-insensitive module names, what should `Import-Module foo` do in this scenario?  Perhaps it should error indicating multiple module names that vary only by case is not allowed (and is just dumb in the first place)?  Then again, this just might be my bias speaking i.e. I think this is one area that *nix got it wrong.  :-)\n",
      "created_at": "2016-08-03T18:23:34Z",
      "updated_at": "2016-08-03T18:24:27Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "This is #781, which as closed as duplicate of #706.\nI think we should re-open it and track separately, because #706 is too generic.\n",
      "created_at": "2016-08-03T18:32:18Z",
      "updated_at": "2016-08-03T18:32:18Z"
    },
    {
      "author": "alexandair",
      "author_association": "CONTRIBUTOR",
      "body": "@andschwa Another question is why is casing different in PowerShell 6.0.0.7? In PowerShell 5.1 the name is PSReadline. On PS Gallery the name is PSReadline. In PowerShell 6.0.0.7 is PSRead**L**ine.\n\n/cc @lzybkr\n",
      "created_at": "2016-08-03T18:45:24Z",
      "updated_at": "2016-08-03T19:05:27Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@andschwa and I discussed this - I was inconsistent in the naming (the code uses both PSRead_L_ine and PSRead_l_ine.)\n\nI'm slightly embarrassed about that, but we decided that if it's `Console.ReadLine`, and we're on an OS where case matters, it probably should have been `PSReadLine` and I should make it consistent.\n\nI suppose there is an argument against the cap L though - GNU readline isn't GNU read_line - so readline is one word, not two.\n\nSo... did I just convince myself @andschwa and I were wrong to use PSRead_L_ine?  Hmm...\n",
      "created_at": "2016-08-03T21:07:10Z",
      "updated_at": "2016-08-03T21:07:10Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@lzybkr I believe that we went with PSRead_L_ine since the source files (`PSReadLine.psm1` etc.), classes (`PSConsoleReadLine`), and repository (`lzybkr/PSReadLine`) were capitalized as such.\n\nIt was only a module name here or there that used PSRead_l_ine.\n",
      "created_at": "2016-08-03T21:13:54Z",
      "updated_at": "2016-08-03T21:14:14Z"
    },
    {
      "author": "alexandair",
      "author_association": "CONTRIBUTOR",
      "body": "@andschwa @lzybkr I would just like to see consistent naming with Windows. Especially because Linux cares about casing. I don't care if it's \"l\" or \"L\" as long as it's the same case everywhere.\n",
      "created_at": "2016-08-03T21:27:03Z",
      "updated_at": "2016-08-03T21:27:03Z"
    },
    {
      "author": "jdhitsolutions",
      "author_association": "COLLABORATOR",
      "body": "I thought I had tried a number of casings including what I see with Get-Module but I'll try again.\n",
      "created_at": "2016-08-03T22:08:34Z",
      "updated_at": "2016-08-03T22:08:34Z"
    },
    {
      "author": "jdhitsolutions",
      "author_association": "COLLABORATOR",
      "body": "Ok. Now that I was more careful I found import-module PSReadLine works. Interesting though Remove-Module psreadline works. Casing drives me crazy in Linux but I suppose I'll get used to it.\n",
      "created_at": "2016-08-03T22:11:39Z",
      "updated_at": "2016-08-03T22:11:39Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "That `Remove-Module psreadline` works is... very interesting.\n\nI'm in agreement that we should investigate making modules case-insensitive.\n",
      "created_at": "2016-08-03T22:12:34Z",
      "updated_at": "2016-08-03T22:12:34Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Easily explained - `Remove-Module` works against our internal list of module **names**.  That list is case-_in_sensitive.\n\nImport-Module imports via the path, which is search with a case sensitive search.  We do need to update the search.\n\nAt issue is how to do that search - case-insensitive from the start, or start case-sensitive, and if that fails, search again with case-insensitive.\n",
      "created_at": "2016-08-03T22:31:24Z",
      "updated_at": "2016-08-03T22:31:24Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "I think it's a bad idea to be case sensitive about module names.\n\nFirst, if core is case sensitive, it needs to be that everywhere, including\non Nano (even on Windows I can have multiple modules with the same name, if\nI put them in different folders).\n\nSecond, if we can make PSReadLine _and_ PSReadline, what happens when you\ntry to publish it, or, heck, have a conversation about it?\n\nSeems like the gold standard here is the existing modules (even if most of\nthem won't work in core) and gallery...\n\n### PostScript:\n\nI think if you actually wanted to keep things simple here, you would to the traditional route for things that must be unique in Linux (like user names) and force them to be all **lowercase** in the file system.\n",
      "created_at": "2016-08-03T23:58:00Z",
      "updated_at": "2016-08-06T20:14:27Z"
    },
    {
      "author": "oising",
      "author_association": "CONTRIBUTOR",
      "body": "I'm with Jaykul here. **A module name is NOT a folder**. It just happens to be backed by one, ergo, we shouldn't feel bound by the rules of the underlying FS. The behaviour that is correct is that of the remove-module command. What if modules and scripts were to come from devices other than those exposed by filesystemprovider? Let's say, on an embedded powershell, where instead there's a solidstatestorageprovider or something. (This is something I tried to raise a conversation about a few years ago on PSMVP: Why aren't we using the IContentReader indirection to source scripts and modules? I get it that the reason is about performance and it seems like overarchitecting to wrap streams in that interface, but I digress...  )\n",
      "created_at": "2016-08-05T00:41:59Z",
      "updated_at": "2016-08-08T12:51:11Z"
    },
    {
      "author": "jpsnover",
      "author_association": "CONTRIBUTOR",
      "body": "I believe that as a general principle, PowerShell should be as case-preserving/case insensitive as possible while not breaking the underlying OS.\n\nSo in the case of the Unix File system manipulation and environmental variables - these directly affect the underlying OS and integration with other tools so we have to be case sensitive.\n\nIn the case of PowerShell variable names - there is no interaction between them and the underlying OS so we should be case insensitive.\n\nSo then issue with Module Names is that they are a tweener.  On the one hand there is a strong mapping to an underlying OS - a foldername.  On the other hand, theyy refer to a pure PowerShell concept - a PowerShell Module.   So you could argue it either way.\n\nTo me, the thing that pushes this decisively to the Case Insensitive solution is the effect the issue has on Ecosystem sharing.  If module names are case sensitive in Unix, then Tom might publish Module TEST and Mary might publish Module test.  But then if a Windows users tries to use both these modules, they are going to collide and they fail.   \n\nI'm going to propose an acid test we need to apply:  Does case sensitivity break sharing artifacts between Windows and Linux?    If the answer is yes, then the prima facia answer should be that we should be case insensitive.\n\nErgo - Module names should be case insensitive. \n\nDoes that sound right?\n",
      "created_at": "2016-08-25T01:40:06Z",
      "updated_at": "2016-08-25T01:40:06Z"
    },
    {
      "author": "ForNeVeR",
      "author_association": "NONE",
      "body": "Guys, please note that it isn't about \"Windows is case-insensitive and Linux is not\". That's \"most common Windows file systems are case-insensitive\" and \"most common Linux file systems are case-sensitive\". And, AFAIK, macOS is case-insensitive too. You could switch this option either on Windows, on Linux or on macOS.\n\nThat decision (at least about the file names) shouldn't be tied to platform, but to underlying FS (and every OS could at once mount multiple file systems with different settings).\n",
      "created_at": "2016-08-25T03:10:15Z",
      "updated_at": "2016-08-25T03:10:25Z"
    },
    {
      "author": "Zsoldier",
      "author_association": "NONE",
      "body": "Noticing that $env variables are case-sensitive as well.  $env:PSMODULEPATH does not equal $env:PSModulePath  (On MacOS)\n",
      "created_at": "2016-09-01T19:36:13Z",
      "updated_at": "2016-09-01T19:36:32Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Environment variables on Linux are case sensitive.\n",
      "created_at": "2016-09-01T20:49:54Z",
      "updated_at": "2016-09-01T20:49:54Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "This needs to get fixed along with #706. Adding it to the usability project. ",
      "created_at": "2017-05-23T20:01:17Z",
      "updated_at": "2017-05-23T20:01:17Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Based on @jpsnover's reply and the logic that the @PowerShell/powershell-committee landed on in #706, we should close on the fact that importing two modules with the same case-insensitive names should have the same behavior as whatever happens when you import two modules with the same name from different paths (either an error, overwriting the existing one in memory, or silently doing nothing). ",
      "created_at": "2017-08-03T02:26:44Z",
      "updated_at": "2017-08-03T02:26:44Z"
    }
  ],
  "created_at": "2016-08-03T14:38:32Z",
  "labels": [
    "WG-DevEx-Portability",
    "Resolution-Fixed"
  ],
  "number": 1621,
  "state": "closed",
  "title": "Importing modules by name is case sensitive",
  "updated_at": "2017-10-20T04:12:10Z"
}