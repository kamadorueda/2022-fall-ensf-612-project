{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4292",
  "author": "mklement0",
  "body": "For the larger context, see [Our Error Handling, Ourselves - time to fully understand and properly document PowerShell's error handling](https://github.com/PowerShell/PowerShell-Docs/issues/1583).\r\n\r\n* The **documentation** (`about_Preference_Variables` and `about_Throw`)  only makes the distinction between non-terminating and terminating errors, **neglecting to distinguish between the two fundamentally different types of terminating errors**:\r\n\r\n   * **_statement_-terminating errors**, as generated by some cmdlets and by .NET exceptions\r\n   * **_script_-terminating errors**, as generated with the `Throw` keyword or potentially by escalation via `-ErrorAction` or `$ErrorActionPreference`.\r\n\r\n* The **documentation mistakenly claims that `$ErrorActionPreference` exclusively applies to _non-terminating errors_**, whereas it controls the behavior of both types of terminating errors too.\r\n\r\nOn a personal note, the conflation of the two types of terminating errors in the documentation has caused me years of confusion.\r\n\r\n---\r\n\r\n<sup>The sample cmdlet used below that generates a terminating error is courtesy of @PetSerAl.</sup>\r\n\r\n### Statement-terminating errors\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n# Define New-TerminatingError cmdlet whose sole purpose is to generate a \r\n# statement-terminating error.\r\nAdd-Type '\r\n using System.Management.Automation; \r\n [Cmdlet(\"New\", \"TerminatingError\")]\r\n public class NewTerminatingErrorCmdlet : Cmdlet { \r\n   protected override void ProcessRecord() { \r\n     ThrowTerminatingError(new ErrorRecord(new System.Exception(), \"Error\", ErrorCategory.NotSpecified, null));\r\n   } \r\n }' -PassThru | % Assembly | Import-Module\r\n\r\n# Per the documentation, this should only affect *non-terminating* errors.\r\n$ErrorActionPreference = 'Stop'\r\n\r\n# Should only terminate the statement (pipeline), not the script.\r\nNew-TerminatingError | % {} -End { 'end of pipeline' }\r\n\r\n'end of script'\r\n```\r\n\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nNote: Expected based on the current documentation - arguably, the actual behavior makes more sense.\r\n\r\n```none\r\nNew-TerminatingError : Exception of type 'System.Exception' was thrown.\r\n...\r\nend of script\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n`$ErrorActionPreference = 'Stop'` did take effect for the pipeline-terminating error and aborted the script:\r\n\r\n```none\r\nNew-TerminatingError : Exception of type 'System.Exception' was thrown.\r\n...\r\n```\r\n---\r\n\r\n### Script-terminating errors\r\n\r\n```powershell\r\n# Per the documentation, this should only affect *non-terminating* errors.\r\n$ErrorActionPreference = 'SilentlyContinue'\r\n\r\n# Should abort the script, irrespective of the $ErrorActionPreference value, according\r\n# to the documentation.\r\nThrow \"I'm outta here\"\r\n\r\n'end of script'\r\n```\r\n\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nThe script should be aborted, and the error message passed to `Throw` should be displayed.\r\n\r\n```none\r\nI'm outta here\r\n...\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n`$ErrorActionPreference = 'SilentlyContinue'` caused the `Throw` statement to be ignored.\r\n\r\nNote that, according to the documentation, `Ignore` is an invalid value for `$ErrorActionPreference` and should only be used with the `-ErrorAction` common _parameter_.  \r\nHowever, it _is_ accepted and _somewhat_ takes effect: it ignores the `Throw` error, yet still records it in `$Error`.\r\n\r\n```none\r\nend of script\r\n```\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta.4 on macOS 10.12.5\r\nPowerShell Core v6.0.0-beta.4 on Ubuntu 16.04.2 LTS\r\nPowerShell Core v6.0.0-beta.4 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\nWindows PowerShell v5.1.15063.413 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\n```\r\n\r\n",
  "closed_at": "2018-02-26T18:02:47Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Related comment https://github.com/PowerShell/PowerShell/issues/2860#issuecomment-294914902\r\n>For posterity, my understanding of terminating errors was wrong. A terminating error cancels execution of the *current pipeline or expression*, not of an entire script block. \r\n\r\n>A better way to check for terminating errors is to just use try/catch:\r\n\r\n```powershell\r\nC:\\Program Files\\PowerShell\\6.0.0-alpha.18> try {\"fdasf\" | convertfrom-json} catch {1}\r\n1\r\nC:\\Program Files\\PowerShell\\6.0.0-alpha.18> try {ls foo} catch {1}\r\nls : Cannot find path 'C:\\Program Files\\PowerShell\\6.0.0-alpha.18\\foo' because it does not exist.\r\nAt line:1 char:6\r\n+ try {ls foo} catch {1}\r\n+      ~~~~~~\r\n    + CategoryInfo          : ObjectNotFound: (C:\\Program File....0-alpha.18\\foo:String) [Get-ChildItem], ItemNotFound\r\n   Exception\r\n    + FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand\r\n```",
      "created_at": "2017-07-19T09:38:46Z",
      "updated_at": "2017-07-19T09:38:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 If we have this in docs repo I believe we could close the Issue.",
      "created_at": "2018-02-26T17:04:36Z",
      "updated_at": "2018-02-26T17:04:36Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: Sounds good. Longer-term, I wish we had a proposal to not just document the existing behavior properly, but to simplify error handling, which, needless to say, would be a major breaking change.",
      "created_at": "2018-02-26T18:02:47Z",
      "updated_at": "2018-02-26T18:02:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 I guess the best way is to collect such proposals/specifications as **RFC** to implement them in next version (7.0?).",
      "created_at": "2018-02-26T18:23:19Z",
      "updated_at": "2018-02-26T18:23:19Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "@mklement0 Do you have plans to draft such an RFC?  If so, I'd like to follow its progress.",
      "created_at": "2018-03-15T01:34:38Z",
      "updated_at": "2018-03-15T01:34:38Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@alx9r: \r\n\r\nNo immediate plans, given the ongoing discussions, but I'll keep you posted (or vice versa, if you feel inclined to take it on).\r\n\r\nI'd first like to better understand what the original design was (and where things went wrong) and if there's even a fundamental willingness to entertain the thought of a change by the powers that be - which would obviously a massively breaking change.\r\n",
      "created_at": "2018-03-15T02:15:30Z",
      "updated_at": "2018-03-15T02:16:04Z"
    }
  ],
  "created_at": "2017-07-18T23:34:53Z",
  "labels": [
    "Area-Maintainers-Documentation",
    "Issue-Discussion",
    "Resolution-Answered"
  ],
  "number": 4292,
  "state": "closed",
  "title": "Clarify the intended behavior/documentation/terminology of terminating errors",
  "updated_at": "2018-03-24T17:32:31Z"
}