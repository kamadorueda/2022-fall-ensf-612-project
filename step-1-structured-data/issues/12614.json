{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12614",
  "author": "onriv",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n[void][System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic')\r\n$name = [Microsoft.VisualBasic.Interaction]::InputBox(\"Enter your name\", \"Name\", \"Lastname\")\r\n```\r\n\r\nor \r\n\r\n```powershell\r\nGet-WmiObject win32_physicalmemory\r\n```\r\n\r\n# Expected behavior\r\n\r\nworking as in windows powershell, basically anything related to com or windows api cant be used in pwsh7\r\n\r\n```powershell\r\n# Get-WmiObject win32_physicalmemory\r\n>>\r\n\r\n\r\n__GENUS              : 2\r\n__CLASS              : Win32_PhysicalMemory\r\n__SUPERCLASS         : CIM_PhysicalMemory\r\n... others\r\n```\r\n\r\n```none\r\n[void][System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic')\r\n$name = [Microsoft.VisualBasic.Interaction]::InputBox(\"Enter your name\", \"Name\", \"Lastname\")\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/1629055/81488935-4cdb0200-92a2-11ea-97ea-c3aa293e80ba.png)\r\n\r\n\r\n# Actual behavior\r\n\r\n```powershell\r\n# Get-WmiObject win32_physicalmemory\r\n>>\r\nGet-WmiObject: The term 'Get-WmiObject' is not recognized as the name of a cmdlet, function, script file, or operable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n\r\n~\r\n# [void][System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic')\r\n\r\n~\r\n# $name = [Microsoft.VisualBasic.Interaction]::InputBox(\"Enter your name\", \"Name\", \"Lastname\")\r\nInvalidOperation: Method invocation failed because [Microsoft.VisualBasic.Interaction] does not contain a method named 'InputBox'.\r\n```\r\n\r\n\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-05-11T13:54:55Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Please read and fill out the proper issue template for your question. There is't enough information here to really make any kind of meaningful determination as to what the problem actually is.\r\n\r\nI will, however, note that neither of your listed commands work in Windows PowerShell either. Not sure where you got those from.",
      "created_at": "2020-05-10T01:31:29Z",
      "updated_at": "2020-05-10T01:31:41Z"
    },
    {
      "author": "onriv",
      "author_association": "NONE",
      "body": "@vexx32 I'm sorry and the question should have been clarified and followed the template now.\r\n\r\nAnd though I used \r\n\r\n```powershell\r\n Import-Module Microsoft.PowerShell.Management -UseWindowsPowerShell\r\nWARNING: Module Microsoft.PowerShell.Management is loaded in Windows PowerShell using WinPSCompatSession remoting session; please note that all input and output of commands from this module will be deserialized objects. If you want to load this module into PowerShell Core please use 'Import-Module -SkipEditionCheck' syntax.\r\n\r\n\r\n~\r\n# Get-WmiObject win32_physicalmemory\r\n>>\r\nGet-WmiObject: The term 'Get-WmiObject' is not recognized as the name of a cmdlet, function, script file, or operable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n```\r\n\r\nit's still not working",
      "created_at": "2020-05-10T01:48:42Z",
      "updated_at": "2020-05-10T01:48:42Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@onriv thanks for updating the issue!\r\n\r\nWe're conflating a few separate issues here, but ultimately I think you could resolve them all without too much difficulty.\r\n\r\nThe `*-WmiObject` cmdlets were deprecated in PowerShell version **3**. Please use the `Get-CimInstance` cmdlet as a replacement; for most tasks they are a drop-in replacement, parameters are all very similar or identical in a lot of cases. Some things previously directly referenced as methods on the objects may need to be handled with `Invoke-CimMethod` instead, however.\r\n\r\nYou will most likely not be able to reliably import a Windows PowerShell core module in pwsh, or if you can I would expect reduced functionality as it is over a remoting connection. I wouldn't count on it, and it's better to use the CIM cmdlets in pwsh instead.\r\n\r\nAs for the Visual Basic issue, not really sure where to begin on that, but I'd check the documentation for those libraries to see what's changed in the .NET Core versions of those. In a lot of cases, the GUI functionalities of many libraries were removed. That's neither here nor there, it's far beyond what PowerShell has any control over.",
      "created_at": "2020-05-10T01:50:58Z",
      "updated_at": "2020-05-10T01:50:58Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@onriv For more info on `Get-WmiObject`, see [Breaking Changes for PowerShell 6 -  WMI v1 cmdlets](https://docs.microsoft.com/en-us/powershell/scripting/whats-new/breaking-changes-ps6?view=powershell-7#wmi-v1-cmdlets).",
      "created_at": "2020-05-10T01:52:43Z",
      "updated_at": "2020-05-10T01:52:43Z"
    },
    {
      "author": "onriv",
      "author_association": "NONE",
      "body": "@SeeminglyScience thanks, the document would solve my probelm for the wmi api\r\n\r\n@vexx32 And I can't use .Net framework in pwsh7? I tried to add the dll of .Net but it didn't work neither:\r\n\r\n```powershell\r\n~\r\n# Add-Type -Path C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Microsoft.VisualBasic.dll\r\n\r\n\r\n~\r\n# $name = [Microsoft.VisualBasic.Interaction]::InputBox(\"Enter your name\", \"Name\", \"Lastname\")\r\nInvalidOperation: Method invocation failed because [Microsoft.VisualBasic.Interaction] does not contain a method named 'InputBox'.\r\n```\r\n\r\nmostly this part is for using com-object (like excel/outlook/vb). Sometimes switching from pwsh7 console to powershell and then switching back is not very convenient, especially if having to share some variables.  ",
      "created_at": "2020-05-10T02:01:49Z",
      "updated_at": "2020-05-10T02:01:49Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "You can use the .NET API, it's just subject to it's own breaking changes outside of PowerShell's control.  That library no longer contains the `InputBox` API and it's not controlled by the PowerShell team.  See the discussion in #11513 about `MsgBox` in the same library.\r\n\r\nAlso note that it doesn't affect COM interop.",
      "created_at": "2020-05-10T02:07:20Z",
      "updated_at": "2020-05-10T02:07:20Z"
    },
    {
      "author": "onriv",
      "author_association": "NONE",
      "body": "@SeeminglyScience @vexx32 thanks a lot ! Since the information have been enough for me, I closed the issue.",
      "created_at": "2020-05-10T02:25:04Z",
      "updated_at": "2020-05-10T02:25:04Z"
    },
    {
      "author": "onriv",
      "author_association": "NONE",
      "body": "@SeeminglyScience @vexx32 Hello~ I still got a problem:\r\n\r\nI got the dll version that windows powershell is using:\r\n\r\n```powershell\r\n# [Microsoft.VisualBasic.Interaction].Assembly\r\n\r\nGAC    Version        Location\r\n---    -------        --------\r\nTrue   v4.0.30319     C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\Microsoft.VisualBasic\\v4.0_10.0.0.0__b03f5f7f11d50a3a\\Microsoft.VisualBasic.dll\r\n```\r\n\r\nAnd try to add the dll to pwsh7:\r\n\r\n```powershell\r\n~\r\n# [Microsoft.VisualBasic.Interaction].Assembly\r\n\r\nGAC    Version        Location\r\n---    -------        --------\r\nFalse  v4.0.30319     D:\\Users\\sha*****\\Apps\\PowerShell-7.0.0-win-x64\\Microsoft.VisualBasic.Core.dll\r\n\r\n\r\n\r\n~\r\n# Add-Type -Path C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\Microsoft.VisualBasic\\v4.0_10.0.0.0__b03f5f7f11d50a3a\\Microsoft.VisualBasic.dll\r\n\r\n\r\n~\r\n# $name = [Microsoft.VisualBasic.Interaction]::InputBox(\"Enter your name\", \"Name\", \"Lastname\")\r\nInvalidOperation: Method invocation failed because [Microsoft.VisualBasic.Interaction] does not contain a method named 'InputBox'.\r\n\r\n\r\n~\r\n# [Microsoft.VisualBasic.Interaction].Assembly\r\n\r\nGAC    Version        Location\r\n---    -------        --------\r\nFalse  v4.0.30319     D:\\Users\\sha*****\\Apps\\PowerShell-7.0.0-win-x64\\Microsoft.VisualBasic.Core.dll\r\n```\r\n\r\nbut anyway it still use the version that pwsh7 port with?",
      "created_at": "2020-05-11T03:00:40Z",
      "updated_at": "2020-05-11T03:00:40Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@onriv in your last example, you've already loaded `D:\\Users\\sha*****\\Apps\\PowerShell-7.0.0-win-x64\\Microsoft.VisualBasic.Core.dll` when you import the GAC's `C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\Microsoft.VisualBasic\\v4.0_10.0.0.0__b03f5f7f11d50a3a\\Microsoft.VisualBasic.dll`. It's loaded because you've already used the `Microsoft.VisualBasic.Interaction` assembly in your first command. That means you can't load the second assembly; you get the first one, whose `Interaction` has no `InputBox` method.\r\n\r\nIf you start a fresh PowerShell session, this will work:\r\n\r\n```powershell\r\nAdd-Type -Path C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\Microsoft.VisualBasic\\v4.0_10.0.0.0__b03f5f7f11d50a3a\\Microsoft.VisualBasic.dll\r\n[Microsoft.VisualBasic.Interaction]::InputBox(\"Enter your name\", \"Name\", \"Lastname\")\r\n```'\r\n\r\nIn this case though, I would recommend using [a WinForms solution](https://docs.microsoft.com/en-us/powershell/scripting/samples/creating-a-custom-input-box?view=powershell-7), since that's supported by the DLLs that come with PowerShell (so no Add-Type from the GAC needed).",
      "created_at": "2020-05-11T15:47:20Z",
      "updated_at": "2020-05-11T15:48:37Z"
    },
    {
      "author": "DenisBalan",
      "author_association": "NONE",
      "body": "@onriv there is a hack to get it working in pwsh7 core\r\nload it as a dynamic assembly and invoke static method InputBox\r\n\r\n$v = [System.Reflection.Assembly]::LoadFile('C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Microsoft.VisualBasic.dll')\r\n#instead of directly referencing InputBox\r\n#[Microsoft.VisualBasic.Interaction]::InputBox(\"Title\", \"File data\", \"\")\r\n$hh = $v.GetExportedTypes() |? { $_.Name -eq 'Interaction'}\r\n$to = $hh.GetMethod('InputBox')\r\n$to.Invoke($null, @(\"Title\", \"File data\", \"\", -1, -1))",
      "created_at": "2020-07-14T08:45:50Z",
      "updated_at": "2020-07-14T08:45:50Z"
    }
  ],
  "created_at": "2020-05-10T01:19:49Z",
  "number": 12614,
  "state": "closed",
  "title": "Use Windows Powershell in Pwsh7",
  "updated_at": "2020-07-14T08:45:50Z"
}