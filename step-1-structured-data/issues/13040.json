{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13040",
  "author": "kasini3000",
  "body": "## Steps to reproduce\r\n\r\n```powershell\r\nPS /root> get-date\r\n2020\u5e746\u670827\u65e5\u661f\u671f\u516d \u4e0a\u534811:43:43\r\n\r\nPS /root> (get-date) - [timespan]::FromHours(11)    \r\n2020\u5e746\u670827\u65e5\u661f\u671f\u516d \u4e0a\u534812:44:01\r\n\r\nPS /root> (get-date) - [timespan]::FromHours(10)    \r\n2020\u5e746\u670827\u65e5\u661f\u671f\u516d \u4e0a\u53481:44:06\r\n```\r\n\r\n\r\n## Expected behavior\r\n11-11 return 0\r\n\r\n## Actual behavior\r\n11-11 return 12\r\n\r\n\r\n## Environment data\r\npowershell v7.02 on linux\r\npowershell v7.1.4 on win\r\n\r\n\r\n\r\n",
  "closed_at": "2020-06-28T04:18:14Z",
  "comments": [
    {
      "author": "KalleOlaviNiemitalo",
      "author_association": "NONE",
      "body": "The problem must be in how the time is displayed, not in how it is computed. What do these output?\r\n\r\n- `[DateTime]::new(2020, 6, 27, 0, 44, 6).ToString(\"F\")`\r\n- `$PSCulture`\r\n- `[CultureInfo]::CurrentCulture.DateTimeFormat.FullDateTimePattern`\r\n- `[CultureInfo]::GetCultureInfo($PSCulture).DateTimeFormat.FullDateTimePattern`\r\n\r\nThe last two would normally be the same unless there is a user-specific override.",
      "created_at": "2020-06-27T12:25:04Z",
      "updated_at": "2020-06-27T12:25:04Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@KalleOlaviNiemitalo is correct: in AM/PM-based date/time formats (_12_-hour-based formats), the hour from midnight to 1 AM is expressed as `12:mm`.\r\n\r\nTherefore, what is `00:44:01` in 24-hour format (44 minutes and 1 second past midnight) corresponds to `12:44:01` in AM/PM format.\r\n\r\nThe default output formatting of [`[datetime]`](https://docs.microsoft.com/en-US/dotnet/api/System.DateTime) instances, as output by `Get-Date` cmdlet, for instance, is determined as follows (`$this` represent the `[datetime]` instance at hand):\r\n\r\n```powershell\r\n\"{0} {1}\" -f $this.ToLongDateString(), $this.ToLongTimeString()\r\n```\r\n\r\nThe [`.ToLongDateString()`](https://docs.microsoft.com/en-US/dotnet/api/system.datetime.tolongdatestring) / [`.ToLongTimeString()`](https://docs.microsoft.com/en-US/dotnet/api/system.datetime.tolongtimestring) methods correspond to the `\"D\"` / `\"T\"` [standard date and time format strings](https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings) (e.g., `(Get-Date).ToString(\"D\")`, `(Get-Date).ToString(\"T\")`), as determined by the _current culture_, and as also reflected in `(Get-Culture).DateTimeFormat.LongDatePattern` and `(Get-Culture).DateTimeFormat.LongTimePattern`.\r\n\r\nIt is formatting data (`Get-FormatData System.DateTime`) associated with type `System.DateTime` (`[datetime]`) that tells PowerShell to use the `DateTime` property of  instances of that type for display output. `DateTime` is a script-block-based property (type `ScriptProperty`)  that  PowerShell attaches to `[datetime]` instances via its ETS (Extended Type System; `Get-TypeData System.DateTime`); the expression above is the relevant part of the script block for the default display, which can be modified by changing an instance's `DisplayHint` ETS property, which, however only `[datetime]` instances directly output by `Get-Date` have.\r\n\r\n---\r\n\r\nNote that if you _implicitly stringify_ a `[datetime]` instance inside an _expandable string_ (`\"...\"`; e.g., `\"$(Get-Date)\"`), you get a _different_ representation, namely the one output by  a call to `.ToString([cultureinfo]::InvariantCulture)`.\r\nIn string interpolation contexts and when casting, PowerShell uses the  [_invariant_ culture](https://docs.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo.invariantculture), which means that the resulting format is _always the same_, irrespective of what the culture currently in effect is. \r\nThat is, `\"$(Get-Date)\"` is _always_ equivalent to `(Get-Date).ToString([cultureinfo]::InvariantCulture)`.\r\n\r\nIn the absence of an explicit date/time format string passed to the `.ToString()` method, `\"G\"` is the default, which \"represents a combination of the short date (`\"d\"`) and long time (`\"T\"`) patterns, separated by a space\". In an expandable string in PowerShell, the format string used for `[datetime]` instances is therefore _always_ `[cultureinfo]::InvariantCulture.DateTimeFormat.ShortDatePattern + ' ' + [cultureinfo]::InvariantCulture.DateTimeFormat.LongTimePattern` which results in `MM/dd/yyyy HH:mm:ss`.\r\n\r\nNote the use of `HH` to format the hours, which means that you _always_ get _24-hour_ format, unlike with the culture-sensitive direct display output (where it is the current culture that determines whether 24-hour or AM/PM format is used).\r\n\r\n(By contrast, if you _explicitly_ call `.ToString()` on a `[datetime]` instance - without arguments - you get the _current culture_'s `\"G\"` formatting (all `.ToString()` calls that don't specify a culture default to the _current_ culture).\r\nThat is, `(Get-Date).ToString()` is the same as `(Get-Date).ToString('G')`, which is the same as `(Get-Date).ToString('G', [cultureinfo]::CurrentCulture)`.)\r\n\r\n---\r\n\r\nTherefore, placing your command inside an expandable string would have displayed the hours in 24-hour format, where the correct subtraction of the time span is immediately obvious:\r\n\r\n```powershell\r\n# Output format is the same, irrespective of what culture is current.\r\nPS> \"$(([datetime] '2020-06-27T11:44:01') - [timespan]::FromHours(11))\"\r\n06/27/2020 00:44:01\r\n```",
      "created_at": "2020-06-27T20:33:42Z",
      "updated_at": "2020-06-27T20:51:26Z"
    },
    {
      "author": "kasini3000",
      "author_association": "NONE",
      "body": "woo\uff0cAnti-human design\uff0clinux date same.\r\n\r\nthanks for answer\uff0cKalleOlaviNiemitalo\uff0cmklement0 \r\n\r\n0hour:\r\n[DateTime]::new(2020, 6, 27, 0, 44, 6).ToString(\"F\")\r\n2020\u5e746\u670827\u65e5\u661f\u671f\u516d \u4e0a\u534812:44:06\r\n\r\n12hour:\r\n [DateTime]::new(2020, 6, 27, 12, 44, 6).ToString(\"F\")\r\n2020\u5e746\u670827\u65e5\u661f\u671f\u516d \u4e0b\u534812:44:06\r\n\r\n23hour:\r\n[DateTime]::new(2020, 6, 27, 23, 44, 6).ToString(\"F\")\r\n2020\u5e746\u670827\u65e5\u661f\u671f\u516d \u4e0b\u534811:44:06\r\n\r\n",
      "created_at": "2020-06-28T04:18:14Z",
      "updated_at": "2020-06-28T04:18:14Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Well, it is _human_ design: it reflects a deeply engrained cultural convention that _humans_ are familiar with, despite its inconsistency.\r\n\r\nHowever, this only applies if the convention used is indeed _culture-appropriate_, and it sounds like that is the real problem here (I'm assuming `zh-Hans-CN` (Chinese, Simplified (China mainland)) as the current culture):\r\n\r\n```powershell\r\n# PowerShell Core, all platforms: *12-hour time format.\r\nPS> pwsh -noprofile { [cultureinfo]::CurrentCulture = 'zh-Hans-CN'; [DateTime]::new(2020, 6, 27, 0, 44, 6).ToString(\"F\") }\r\n2020\u5e746\u670827\u65e5 \u661f\u671f\u516d \u4e0a\u534812:44:06\r\n\r\n# Windows PowerShell: *24*-hour time format.\r\nPS> pwsh -noprofile { [cultureinfo]::CurrentCulture = 'zh-Hans-CN'; [DateTime]::new(2020, 6, 27, 0, 44, 6).ToString(\"F\") }\r\n2020\u5e746\u670827\u65e5 0:44:06\r\n```\r\n\r\n.NET Core uses a different source of culture information than the legacy Windows-only .NET framework, it seems, and in .NET Core the Chinese time format is defined as a _12_-hour (AM/PM) format.\r\n\r\n**_If_ the PowerShell Core / .NET Core behavior is incorrect, I encourage you to file a [.NET Core bug report](https://github.com/dotnet/runtime/issues/new/choose)**, though this _may_ ultimately have to be reported as a [CLDR bug](http://cldr.unicode.org/index/bug-reports) - I am not sure (and, if .NET Core is indeed based on CLDR, there's also a possibility that a CLDR release in which this has been fixed may already exist, but hasn't been integrated into .NET Core yet).\r\n\r\n\r\n",
      "created_at": "2020-06-28T16:25:16Z",
      "updated_at": "2020-06-28T16:26:15Z"
    }
  ],
  "created_at": "2020-06-27T03:56:08Z",
  "labels": [
    "Issue-Question"
  ],
  "number": 13040,
  "state": "closed",
  "title": "Date and time calculation \uff1a11-11=12\uff1f",
  "updated_at": "2020-06-28T16:26:15Z"
}