{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9445",
  "author": "mklement0",
  "body": "While it _is_ possible to define implicit / explicit conversion operators as static `op_implicit` and `op_explicit` methods, they are currently subject to the same rules as _regular_ methods, which means that you can define only _one_ conversion operator per operator type and  input type.\r\n\r\nThat is, trying to define a second conversion operator with a different target type is interpreted the same way as a regular method, which results in the same error message you'd get if you tried to define a method overload that differs by return type only (which isn't permitted).\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n& {\r\n  class Foo {\r\n\r\n    # Implicit conversion to [int]\r\n    static [int] op_Implicit([Foo] $Instance) {\r\n      return 42\r\n    }\r\n\r\n    # Implicit conversion to [long]\r\n    static [long] op_Implicit([Foo] $Instance) {\r\n        return 666l\r\n    }\r\n\r\n  }\r\n  1 + [Foo]::new()\r\n} | Should -Be 42\r\n```\r\n\r\n# Expected behavior\r\n\r\nThe test should succeed.\r\n\r\n# Actual behavior\r\n\r\nThe test fails with `The member 'op_Implicit' is already defined.`\r\n\r\n# Environment data\r\n\r\n\r\n```none\r\nWindows PowerShell v5.1 / PowerShell Core 6.2.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": "@mklement0 Something to add to the long list [#6652](https://github.com/PowerShell/PowerShell/issues/6652)",
      "created_at": "2019-04-22T22:23:50Z",
      "updated_at": "2019-04-22T22:23:50Z"
    }
  ],
  "created_at": "2019-04-22T22:20:58Z",
  "number": 9445,
  "state": "open",
  "title": "PowerShell class syntax doesn't support multiple conversion operators with the same input type",
  "updated_at": "2019-09-29T13:25:58Z"
}