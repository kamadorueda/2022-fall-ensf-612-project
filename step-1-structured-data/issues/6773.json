{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6773",
  "author": "SteveL-MSFT",
  "body": "```powershell\r\ncd /Users/steve/test\r\nmkdir Users\r\nNew-PSDrive -PSProvider FileSystem -Root /Users/steve/test -Name steve\r\ncd steve:\r\ncd /Users\r\n```\r\n\r\nWhat should happen?  Today, if the path starts with a directory separator on Unix systems, we always treat it as a filesystem path so you would end up in `/Users` instead of `steve:/Users`.  Workaround if you're in the PSDrive is to use `./Users` (on Unix, on Windows the workaround isn't needed since every drive starts with a drive letter so there's no ambiguity, but cross-platform scripts would need to be aware of this).\r\n\r\nDoesn't seem like much we can do here as assuming a root path means filesystem makes sense.  However, as more PSProviders become availble (since SHiPS makes it much easier now to author them), this experience may or may not cause confusion.\r\n\r\nFor example, if `Azure:/myfolder` exists and you try `cd /myfolder` while in the `Azure:` drive, but `/myfolder` doesn't exist in the filesystem, you'll get an error.  We don't try (and shouldn't) to find it in the psdrive if we don't find it it the filesystem.  Instead, you get a `cd : Cannot find path '/myfolder' because it does not exist` error message (again, on Unix only).\r\n\r\nSeeing if anyone in the community has any ideas on how to potentially improve this experience.",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "How about allowing an initial `:` to represent the current location's drive, without having to name it in full?\r\n\r\n```powershell\r\n# While the current location is on drive steve:, this would be the \r\n# equivalent of Set-Location steve:/Users\r\nSet-Location :/Users   \r\n```\r\n\r\nIn other words: start a path with `:/` rather than just `/` if you want it to refer to the root of the current drive.\r\n\r\n---\r\n\r\nThe small caveat is that on Unix-like platforms it would take away the ability to directly target a subdir. literally named `:`, which currently works:\r\n\r\n```powershell\r\nPS> mkdir -p ':/Users'; Set-Location -LiteralPath ':/Users'; $pwd.Path\r\n/Users/jdoe/:/Users\r\n```\r\nTo truly target a subdir. named `:` in this case, prefixing with `./` would then be required (`Set-Location ./:/Users`)\r\n\r\nI don't think that's a real-world concern, however, especially given that this is already a problem with files / subdirs. whose names _look_ like they start with a drive spec; e.g.:\r\n\r\n```powershell\r\nPS> mkdir -p 'ab:cd'; Set-Location -LiteralPath 'ab:cd'\r\nSet-Location : Cannot find drive. A drive with the name 'ab' does not exist.\r\n```\r\n\r\nIn this scenario prefixing with `./` already _is_ a requirement.\r\n\r\n---\r\n\r\nGiven the rarity of `:` in filenames, I think introducing support for `:/` is an acceptable solution.\r\n\r\n(Note that `:` serves as the entry separator in `$env:PATH` on Unix-like platforms, even though `:` is a legal filename character in the typical Linux / macOS filesystems.\r\nOn a side note: classic Mac OS used `:` as the path separator, and that heritage is still reflected in Finder, which translates `:` in filenames into `/`(!) in its GUI.)\r\n\r\n\r\n\r\n",
      "created_at": "2018-04-29T16:03:34Z",
      "updated_at": "2018-04-29T16:03:34Z"
    }
  ],
  "created_at": "2018-04-28T23:48:35Z",
  "number": 6773,
  "state": "open",
  "title": "Inconsistent experience when access root of psdrive",
  "updated_at": "2018-04-29T16:03:34Z"
}