{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5242",
  "author": "nightroman",
  "body": "- This issue happens on a Windows 7 machine. All works fine on Windows 8.1 and 10.\r\n- This issue is new in v6-beta.9. All was fine in previous betas and is fine in v5.\r\n\r\n**Problem case:**\r\n\r\n```powershell\r\nInvoke-RestMethod https://api.github.com/users/nightroman/repos\r\n```\r\n\r\n**Expected result:**\r\n\r\nThe command returns the requested data.\r\n\r\n**Actual result:**\r\n\r\nThe command fails:\r\n\r\n```\r\nInvoke-RestMethod : Version string portion was too short or too long.\r\nAt line:1 char:1\r\n+ Invoke-RestMethod https://api.github.com/users/nightroman/repos\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Invoke-RestMethod], ArgumentException\r\n    + FullyQualifiedErrorId : System.ArgumentException,Microsoft.PowerShell.Commands.InvokeRestMethodCommand\r\n```\r\n\r\nSome info about the inner exception:\r\n\r\n```\r\nPS> $error.Exception.ToString()\r\nSystem.ArgumentException: Version string portion was too short or too long.\r\n   at System.Version.VersionResult.SetFailure(ParseFailureKind failure, String argument)\r\n   at System.Version.TryParseVersion(String version, VersionResult& result)\r\n   at System.Version.Parse(String input)\r\n   at System.Version..ctor(String version)\r\n   at Microsoft.PowerShell.Commands.PSUserAgent.get_PlatformName()\r\n   at Microsoft.PowerShell.Commands.PSUserAgent.get_UserAgent()\r\n   at Microsoft.PowerShell.Commands.WebRequestSession..ctor()\r\n   at Microsoft.PowerShell.Commands.WebRequestPSCmdlet.PrepareSession()\r\n   at Microsoft.PowerShell.Commands.WebRequestPSCmdlet.ProcessRecord()\r\n   at System.Management.Automation.Cmdlet.DoProcessRecord()\r\n   at System.Management.Automation.CommandProcessor.ProcessRecord()\r\n```\r\n\r\n**Environment:**\r\n\r\n```\r\nPS> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-beta.9\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-beta.9\r\nOS                             Microsoft Windows 6.1.7601 S\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2017-11-01T06:22:19Z",
  "comments": [
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "It looks like this is related to the change in #4937",
      "created_at": "2017-10-26T09:54:32Z",
      "updated_at": "2017-10-26T09:54:32Z"
    },
    {
      "author": "thezim",
      "author_association": "CONTRIBUTOR",
      "body": "Note that most web server can and should limit length of individual headers lengths it accepts, I\u2019ve had to do this to adhere to best practices and organizational security requirements on my servers. Usually the request is returned as a 400 series http status code. This might be the case in this instance. For Windows 7 it might be crossing that threshold. If that is the case then the workaround would be to explicitly set the user agent or default the parameter.\r\n\r\n",
      "created_at": "2017-10-26T10:56:20Z",
      "updated_at": "2017-10-26T10:56:20Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@thezim this is occurring during the generation of the User-Agent header before it is even sent to the remote server. This is related to a change where we made the User-Agent platform aware instead of always reporting `Win NT`. The underlying .NET would complain on a non-compliant User-Agent (at least for the default generated User-Agent). ",
      "created_at": "2017-10-26T11:04:36Z",
      "updated_at": "2017-10-26T11:06:02Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "The change in #4937 is using `System.Runtime.InteropServices.RuntimeInformation.OSDescription` which on Windows 7 produces something like `Microsoft Windows 6.1.7601 S` and on Windows 10 `Microsoft Windows 10.0.15063`. The offending code is here:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/4df703616ae7f3fe2e11484702dbc84b89c21a52/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/PSUserAgent.cs#L134-L135\r\n\r\nSince windows 7 is using an extra space after the version number its capturing `S` as the substring and then failing to parse that as a `Version`",
      "created_at": "2017-10-27T12:20:57Z",
      "updated_at": "2017-10-27T12:20:57Z"
    }
  ],
  "created_at": "2017-10-26T09:49:46Z",
  "number": 5242,
  "state": "closed",
  "title": "Invoke-RestMethod started to fail in v6-beta.9 on a Windows 7 machine",
  "updated_at": "2017-11-12T18:26:36Z"
}