{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15186",
  "author": "lxscaut",
  "body": "## Background\r\n\r\nPR #10034 that fixes issue #9473 and has been introduced in `7.0.0-preview.2`.\r\nThis sets a `String.Empty` body for GET requests in `Invoke-WebRequest` and `Invoke-RestMethod` which usually do not have a body.\r\n\r\nUnfortunately this also leads .NET to add a `Content-Length: 0` header because of the `String.Empty` HTTP request body.\r\n\r\nAnd this breaks RFC7230, see the official RFC7230 Section 3.3.2: https://tools.ietf.org/html/rfc7230#section-3.3.2 \r\n```\r\n   A user agent SHOULD NOT send a\r\n   Content-Length header field when the request message does not contain\r\n   a payload body and the method semantics do not anticipate such a\r\n   body.\r\n```\r\nWhy is this a problem?\r\n* To prevent HTTP Request Smuggling attacks Cloud Service Providers such as AWS and vendors of Application Load Balancers have implemented so-called \"HTTP Desync Mitigation modes\".\r\n* On AWS the \"Strictest Mode\" for example blocks all requests that are not RFC7230 conform.\r\n** See https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#desync-mitigation-mode for explanation\r\n* Here is a list of classification reasons that are not RFC7230 conform: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html#classification-reasons\r\n** `GetHeadZeroContentLength` - There is a `Content-Length` header with a value of 0 for a GET or HEAD request.\r\n** This classifies the request as `Acceptable` which is being blocked in \"Strictest Mode\"\r\n* You cannot use `Invoke-WebRequest` or `Invoke-RestMethod` on AWS hosted websites where this setting has been set\r\n* This will result in a HTTP 400 - Bad Request\r\n* This might also affect other Cloud Service Providers like Azure or Google Cloud Platform, but I cannot confirm that, as I'm only using AWS.\r\n\r\n\r\n## Steps to reproduce\r\n\r\n* On an AWS Application Load Balancer set the HTTP Desync Mitigation Mode to \"Strictest Mode\"\r\n* Then try a simple `Invoke-WebRequest` on `PowerShell 7.0.0-preview.2` or above:\r\n```powershell\r\nMY C:\\> Invoke-WebRequest -Uri \"https://mywebsite.example.com/\"\r\nInvoke-WebRequest:\r\n400 Bad Request\r\n400 Bad Request\r\n```\r\n\r\n## Expected behavior\r\n\r\n* Do not set a `Content-Length: 0` header as it is not RFC7230 conform if you do not have a HTTP Request body\r\n\r\n## Actual behavior\r\n\r\n* PowerShell 7 always sets the HTTP header `Content-Length: 0` for GET/HEAD requests without HTTP Request body and therefore violates RFC7230\r\n\r\n## Environment data\r\n\r\n* This is reproducible on AWS Lambda with `PowerShell 7.0.0` on Linux as well as on Windows 10 with `PowerShell 7.1.0`\r\n",
  "closed_at": "2022-01-03T19:20:33Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> PR #10034 that fixes issue #9473 and has been introduced in `7.0.0-preview.2`.\r\n\r\nI hope this was fixed in .Net HttpClient and we can remove the workaround.",
      "created_at": "2021-04-08T16:44:26Z",
      "updated_at": "2021-04-08T16:44:26Z"
    },
    {
      "author": "TU-OB-GW",
      "author_association": "NONE",
      "body": "+1 for raising this issue - why is it still awaiting triage 3 months later???\r\nI am developing/supporting APIs where we have to reject GET requests with a Content-Length header so it's not very helpful not being able to test them using PowerShell cmdlets.\r\n\r\nSurely all that's needed is put a check of the HTTP method (POST, PUT, PATCH?) in here and fix up the unit tests: https://github.com/PowerShell/PowerShell/blob/88d38b88b3c21e85d9822072dc11ebd65b3aba1c/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/Common/WebRequestPSCmdlet.Common.cs#L1264",
      "created_at": "2021-07-02T08:34:36Z",
      "updated_at": "2021-07-02T08:34:36Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> why is it still awaiting triage 3 months later???\r\n\r\nWe haven't experts who could investigate the issue and prepare right fix.\r\n #10034 fixed particular issue #9473 and we don't want a regression but both scenarios, #9473 and that, are based on non-public sites and it is impossible to have live tests and to do live investigations.",
      "created_at": "2021-07-02T13:51:19Z",
      "updated_at": "2021-07-02T13:51:19Z"
    },
    {
      "author": "Stanislava27-zz",
      "author_association": "NONE",
      "body": "\r\n> We haven't experts who could investigate the issue and prepare right fix.\r\n\r\nCan you share, how long do you expect it to take?",
      "created_at": "2021-07-29T13:12:01Z",
      "updated_at": "2021-07-29T13:12:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Can you share, how long do you expect it to take?\r\n\r\nUntil someone takes it on :-)",
      "created_at": "2021-07-29T18:19:21Z",
      "updated_at": "2021-07-29T18:19:21Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #16587, which has now been successfully released as `v7.3.0-preview.2`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.3.0-preview.2)\n",
      "created_at": "2022-02-24T23:33:13Z",
      "updated_at": "2022-02-24T23:33:13Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #16587, which has now been successfully released as `v7.2.4`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.4)\n",
      "created_at": "2022-05-17T18:03:50Z",
      "updated_at": "2022-05-17T18:03:50Z"
    }
  ],
  "created_at": "2021-04-08T14:40:55Z",
  "labels": [
    "Resolution-Fixed",
    "WG-Cmdlets-Utility"
  ],
  "number": 15186,
  "state": "closed",
  "title": "Invoke-WebRequest/Invoke-RestMethod: PR #10034 violates RFC7230 and therefore breaks HTTP Desync Mitigation modes",
  "updated_at": "2022-05-17T18:03:50Z"
}