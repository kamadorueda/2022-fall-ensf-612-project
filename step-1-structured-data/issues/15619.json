{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15619",
  "author": "SirTwsted",
  "body": "While implementing a PowerShell theme on both PowerShells on Windows, [Windows PowerShell & PowerShell v7+\r\nI was looking at the list of PowerShell execution policies:  Because I needed to turn off some security in order to get a PowerShell them going..?? \ud83d\ude12\ud83e\udd14\ud83d\udc40\r\nAnd it seems to me that this leaves a huge hole in security on Windows Desktop users.\r\nMicrosoft needs to implement another policy called \"secured user\" that allows the user to run theme scripts locally such as this Theming script,  but in order to implement,\r\nit would need the user to type a password to allow THAT specific particular file to always run while protecting the user from other scripts running wild in the system, like Linux does.  \r\npreventing any malicious scripting to just run wild on peoples computers.\r\nWith the current types of execution policies list,  it would seem that its either [Open-All] or [nothing]........  but nothing in-between to protect a user.\r\nIts either open all permissions or close all permissions.  - I have tried all of the PowerShell execution policies \r\n[ AllSigned,  Default,  Bypass,  RemoteSigned,  Restricted,, Undefined,  Unrestricted ] --------  Is there a way to have certain policies set while allowing only certain permitted files on a system to have permission?\r\nI would love to know that.......\r\n\r\nAll I want is a nice theme for ALL my powershell versions and CMD thats on my computer.\r\nI dont want to put security-holes on my computer just to enjoy some nice themes to enjoy my computer.  \ud83e\udd37\u200d\u2642\ufe0f",
  "closed_at": "2021-06-20T23:13:17Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Execution policy is explicitly _not_ a security feature. At most, it's a safeguard against accidental changes by users who don't know what they're doing, nothing more. Execution policy can be bypassed simply by providing a command line argument to powershell.exe / pwsh.exe, regardless of which level it's set at.",
      "created_at": "2021-06-20T02:15:33Z",
      "updated_at": "2021-06-20T02:15:33Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Adding to this, PowerShell doesn't allow a user to do something it doesn't already have the rights to. You cannot use PowerShell to elevate your rights beyond what they have already been granted, PowerShell is just another means to do what you can already with the benefit of it running as a script.",
      "created_at": "2021-06-20T07:12:02Z",
      "updated_at": "2021-06-20T07:12:02Z"
    },
    {
      "author": "SirTwsted",
      "author_association": "NONE",
      "body": "Ok Thank you, \ud83d\ude1c\ud83d\udc4c  So its not just actually opening up security holes to the world for anything to just use PowerShell...\r\n.\r\nI am also wondering,  I don't know if you guys have seen this, and what measures do you guys have against this.\r\nIts using PowerShell / CLI to do what it wants.  https://www.youtube.com/watch?v=msO-gmd3Qyg\r\nIts one of the main reasons why I previously asked my question. \r\n\r\nAnything you guys can do to prevent anything like this from just executing things without the express permission of the owner.?\r\nI'm just curiously asking.  Because to me, this is a serious security issue.\r\nAnyways, I hope you guys sit down and have a conversation about this and how to mitigate this to protect users.\r\n\r\nOnly wishing \ud83d\ude09\ud83e\udd1e\n\n<blockquote><img src=\"https://i.ytimg.com/vi/msO-gmd3Qyg/maxresdefault.jpg\" width=\"48\" align=\"right\"><div><img src=\"https://www.youtube.com/s/desktop/d53e3d89/img/favicon_144x144.png\" height=\"14\"> YouTube</div><div><strong><a href=\"https://www.youtube.com/watch?v=msO-gmd3Qyg\">Security Myths: Your locked laptop keeps you safe</a></strong></div><div>So you think locking your laptop will keep you safe? Well, think again.Need help? Join my Discord here: https://discord.com/invite/usKSyzbMenu:Demo of auto l...</div></blockquote>",
      "created_at": "2021-06-20T08:41:40Z",
      "updated_at": "2021-06-20T08:41:42Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> Its using PowerShell / CLI to do what it wants\r\n\r\nWhere is PowerShell in the video clip?",
      "created_at": "2021-06-20T11:53:39Z",
      "updated_at": "2021-06-20T11:53:39Z"
    },
    {
      "author": "SirTwsted",
      "author_association": "NONE",
      "body": "> \r\n> \r\n> > Its using PowerShell / CLI to do what it wants\r\n> \r\n> Where is PowerShell in the video clip?\r\n\r\nRubber Ducky and Bash Bunny was specifically built to infiltrate and use PowerShell.\r\nIf you google it, you will see.  This is just 1 cyber security site out of thousands that shows it.\r\nhttps://cyberarms.wordpress.com/2017/03/27/bash-bunny-windows-remote-shell-using-metasploit-powershell/\r\n\r\n![picture-4](https://user-images.githubusercontent.com/15247713/122673465-916fe700-d19e-11eb-91d4-0ec58e237437.png)\r\n\r\n![picture-3](https://user-images.githubusercontent.com/15247713/122673469-96349b00-d19e-11eb-8493-19c50fa821af.png)\r\n\r\n\r\nThe vulnerability is from from several major windows security problems. \r\n1 - USB port being triggered by USB and activating PowerShell from USB.\r\n     The operating system & PowerShell can not tell the difference between a payload automated typing of text within PowerShell or\r\n     Someone actually physically typing on the keyboard.  Which is why USB-malicious payload can abuse PowerShell.  \r\n2 - Windows doesnt have a proper way of securing account users passwords, its either in plain text or hash which can both be extremely easily broken, as shown in the video by a world known network engineer with CCIE certification. \r\nThere are even tiny programs that are portable apps used for windows, that you double click to trigger, it uses PowerShell to go into registry of the computer, and pull out the account users password.\r\n\r\nIf PowerShell in some way can actually determine when an actual key on a keyboard is physically being pressed by the motion of the actual key itself from pressing down and released from key going back up.  (onPress, onRelease).\r\nMaybe PowerShell devs can figure out a way to negate this, and also prevent USB payloads from acting as a person.\r\n\r\nI dont know I am just trying to open minds so we can live more secure & happier.....  thats all  \ud83e\udd37\u200d\u2640\ufe0f\ud83d\ude09\r\n\r\n<blockquote><img src=\"https://cyberarms.files.wordpress.com/2017/03/picture-6.png\" width=\"48\" align=\"right\"><div><img src=\"https://secure.gravatar.com/blavatar/2526283909cc72f430c00ff1195346a1?s=32\" height=\"14\"> CYBER ARMS - Computer Security</div><div><strong><a href=\"https://cyberarms.wordpress.com/2017/03/27/bash-bunny-windows-remote-shell-using-metasploit-powershell/\">Bash Bunny: Windows Remote Shell using Metasploit & PowerShell</a></strong></div><div>In this article, we will see how to use the Bash Bunny to get a full reverse shell on a Windows system using Kali Linux, PowerShell and the Metasploit Web Delivery module. The USB Bash Bunny is the\u2026</div></blockquote>",
      "created_at": "2021-06-20T12:15:49Z",
      "updated_at": "2021-06-20T12:26:46Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> powershell.exe\r\n\r\nThis is Windows PowerShell. And this code does not work in either `powershell.exe` neither in `pwsh.exe`:\r\n```\r\n$nc = [net.WebClient]::new()\r\n$nc.proxy = [net.WebRequest]::GetSystemWebProxy()\r\n$nc.proxy.Credentials = [net.CredentialCache]::defaultCredentials\r\n$nc.proxy.Credentials\r\n```",
      "created_at": "2021-06-20T13:06:18Z",
      "updated_at": "2021-06-20T13:17:57Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I don't really know what you expect PowerShell to do about Windows' vulnerability issues, tbh. That's like asking zsh to fix MacOS security vulnerabilities.\r\n\r\nThe OS is responsible for fixing those. :shrug:",
      "created_at": "2021-06-20T15:04:29Z",
      "updated_at": "2021-06-20T15:04:29Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I agree with @vexx32.  These are mostly OS issues you'd have if you were using another shell on Windows e.g. CMD or cygwin bash.  Consider using the Windows Feedback tool to raise these issues on Windows security.\r\n\r\nPowerShell does provide some security \"speed bumps\" such as:\r\n\r\n* Script signing support (requires execution policy AllSigned or RemoteSigned)\r\n* PS will not execute from the current dir unless the user specifies the current dir e.g.:  .\\foo.ps1 instead of foo.ps1\r\n* PS does not define an \"Open\" verb to prevent users from getting into trouble by double-clicking .ps1 email attachments.  This avoids I LOVE YOU.vbs virus type issues.\r\n* JEA remoting endpoints - this is for using a remote server but it limits what commands users have access to on the remote server.\r\n\r\nAlso, you can disable PSRemoting if that is a concern.\r\n",
      "created_at": "2021-06-20T18:16:15Z",
      "updated_at": "2021-06-20T18:16:15Z"
    }
  ],
  "created_at": "2021-06-20T02:07:45Z",
  "number": 15619,
  "state": "closed",
  "title": "Feature Request - Better Detailed Security for End-Users.",
  "updated_at": "2021-06-20T23:13:19Z"
}