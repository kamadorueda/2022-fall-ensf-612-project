{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6814",
  "author": "eosfor",
  "body": "Function returns nothing but should return an empty list\r\n\r\n![image](https://user-images.githubusercontent.com/9363027/39588003-8860841a-4f03-11e8-80f9-df89134b437b.png)\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/9363027/39588082-b2617530-4f03-11e8-892c-53529c3f027a.png)\r\n",
  "closed_at": "2018-05-03T17:10:59Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "By default, function outputs are _enumerated_ if they are collections, and enumerating an empty list yields \"nothing\" (more precisely, a special \"null collection\" value,  `[System.Management.Automation.Internal.AutomationNull]::Value`).\r\n\r\nIn order to output your list as-is, as a _single object_, wrap it in an auxiliary array:\r\n\r\n```powershell\r\nfunction foo { \r\n    $ret = [System.Collections.Generic.List[long]]::new()\r\n    , $ret  # construct a single-element wrapper array around the list\r\n}\r\n\r\n$k = foo\r\n$k.GetType().Name\r\n```\r\n\r\nThe above yields ``List`1``, proving that the list was returned.\r\nThe aux. wrapper array was enumerated, outputting just the list.\r\n\r\nDo note that the conceptually cleaner approach would be to use `Write-Output -NoEnumerate`, but `Write-Output` is currently broken - see #5955 \r\n\r\n```powershell\r\nfunction foo { \r\n    $ret = [System.Collections.Generic.List[long]]::new()\r\n    # This SHOULD work, but is currently BROKEN - see #5955 \r\n    Write-Output -NoEnumerate $ret\r\n}\r\n```\r\n\r\nAs of PowerShell Core v6.0.2, the above yields an empty `[psobject[]]` array in lieu of the list.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-05-03T16:32:57Z",
      "updated_at": "2018-05-03T16:32:57Z"
    },
    {
      "author": "eosfor",
      "author_association": "NONE",
      "body": "Hm, ok, seems reasonable. But to me using either one is kind of unexpected. I'd prefer it to return a value, even it is is an empty collection.",
      "created_at": "2018-05-03T16:41:52Z",
      "updated_at": "2018-05-03T16:41:52Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@eosfor:\r\n\r\nYour being surprised is understandable if you're used to function semantics from other languages, but in PowerShell, functions integrate tightly with the _pipeline_, a salient feature of which is _implicit_ enumeration of collections.\r\n\r\nThus, unlike in other languages, you have to _opt out_ of this automatic enumeration.\r\n\r\nNote that _expressions_, by contrast, are _not_ automatically enumerated:\r\n\r\n```powershell\r\n$k = [System.Collections.Generic.List[long]]::new()\r\n$k.GetType().Name\r\n```\r\n\r\nThe above yields ``List`1``; that is, no enumeration was performed.\r\n",
      "created_at": "2018-05-03T16:57:15Z",
      "updated_at": "2018-05-03T17:06:39Z"
    },
    {
      "author": "eosfor",
      "author_association": "NONE",
      "body": "Yes, i agree. I know about this feature. However when you create a collection and expect it to be returned as is, wrapping it into a single-value array is, kind of, counterintuitive, IMHO.\r\n\r\nI'd say, the solution you proposed in #5955 is a good idea.",
      "created_at": "2018-05-03T17:17:35Z",
      "updated_at": "2018-05-03T17:18:05Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@eosfor:  \r\n\r\nYes, the wrapper-array solution is obscure (though conveniently short).\r\n\r\nNote that #5955 describes a _regression_ bug. That is, `Write-Output -NoEnumerate` has always worked (and has always been the conceptually cleaner approach) - and still does in _Windows PowerShell_ v5.1.",
      "created_at": "2018-05-03T17:23:43Z",
      "updated_at": "2018-05-03T17:23:43Z"
    }
  ],
  "created_at": "2018-05-03T15:56:51Z",
  "number": 6814,
  "state": "closed",
  "title": "Strange behavior of the function",
  "updated_at": "2018-05-03T17:23:43Z"
}