{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9029",
  "author": "iSazonov",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nRelated #9016\r\n\r\nUse GetMethod overload which allow to specify types of parameters.\r\n\r\n## PR Context\r\n\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\n\r\n## PR Checklist\r\n\r\n- [ ] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [ ] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [ ] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [ ] [Add `[feature]` to your commit messages if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2019-03-10T03:05:11Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov I replied to your comment in the issue https://github.com/PowerShell/PowerShell/issues/9016#issuecomment-469052955. The update should focus on operations with public members of public types. I don't see a need to do the same for internal types. And furthermore, maybe we can ignore such operations on public interfaces too.",
      "created_at": "2019-03-03T19:20:28Z",
      "updated_at": "2019-03-03T19:20:28Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Thanks! I already have done. It was a lot of work. \r\nSeem there is very few public methods. So I leave this at your discretion.\r\n\r\nOne additional thought. While I was working on it, it turned out that these changes are very sensitive, while the diagnosis is very scanty. If someone changes an internal api, then pwsh can fall with a non-informative error and it will be very difficult to find the cause of the problem. The change doesn't add more information in error message but reduces the likelihood of conflicts and as a result simplify diagnostic.",
      "created_at": "2019-03-04T04:54:43Z",
      "updated_at": "2019-03-04T04:54:43Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov I appreciate the effort you put behind this PR, thanks!\r\n\r\nI'm not too worried about the internal types. Say you are adding an overload to one of the methods used here, then you definitely need to understand what the existing method is used for. Therefore, you will see how it's used in `CachedReflectionInfo` and gets it updated appropriately as part of your new code.\r\n\r\nI'm mainly worried about the .NET public types, because we have no control on changes to them in future version of .NET Core.",
      "created_at": "2019-03-05T01:39:38Z",
      "updated_at": "2019-03-05T01:39:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> then you definitely need to understand what the existing method is used for.\r\n\r\nYes, but some our namespace is so large that we have the same problem as with public.\r\n\r\nSo you request is to leave only public (without interfaces)?\r\n\r\nAdditional: looking how difficult to make signatures for reflection I am thinking about request to enhance .Net Core like:\r\n```c#\r\n static readonly MethodInfo stringIndex =  typeof(System.String).GetMethod(\"public int IndexOf(char value, StringComparison comparisonType)\")\r\n``",
      "created_at": "2019-03-05T05:05:30Z",
      "updated_at": "2019-03-05T05:05:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw I found only one public type.",
      "created_at": "2019-03-08T12:44:54Z",
      "updated_at": "2019-03-08T12:44:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw It was a useful mindful exercise. :-) Besides, I learned that refletion is sometimes very confusing.\r\nWhat do think make sense ask Core team add something like:\r\n```c#\r\n static readonly MethodInfo stringIndex =  typeof(System.String).GetMethod(\"public int IndexOf(char value, StringComparison comparisonType)\")\r\n```\r\nor\r\n```c#\r\n public delegate int IndexOfDelegate(char value, StringComparison comparisonType)\r\n static readonly MethodInfo stringIndex =  typeof(System.String).GetMethod(IndexOfDelegate)\r\n```",
      "created_at": "2019-03-10T05:46:09Z",
      "updated_at": "2019-03-10T05:46:09Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I don't think they will accept these proposals. The reflection APIs have been there for a long time, and I double they will do any enhancement on them now.\r\n\r\n> static readonly MethodInfo stringIndex =  typeof(System.String).GetMethod(\"public int IndexOf(char value, StringComparison comparisonType)\")\r\n\r\nThis means the string has to be parsed to the real signature, meaning that the compiler-ish thing needs to kick in ... that's a lot work for not much value.\r\n\r\n> public delegate int IndexOfDelegate(char value, StringComparison comparisonType)\r\n\r\nThis means you have to define a delegate for the reflection operation, it's almost same as constructing the `type[]` you need for the call.",
      "created_at": "2019-03-10T22:10:46Z",
      "updated_at": "2019-03-10T22:10:46Z"
    }
  ],
  "created_at": "2019-03-02T17:00:01Z",
  "number": 9029,
  "state": "closed",
  "title": "Update CachedReflectionInfo class with parameter types",
  "updated_at": "2019-03-10T22:10:46Z"
}