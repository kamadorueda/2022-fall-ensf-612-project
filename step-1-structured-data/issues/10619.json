{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10619",
  "author": "daxian-dbw",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nAvoid wrapping return result to `PSObject` when converting ScriptBlock to delegate.\r\nWhen a `ScriptBlock` is converted to a delegate type, it's supposed to be used in C# context, and wrapping the result to `PSObject` brings unneeded troubles:\r\n- When the value can be converted to the delegate return type, the `PSObject` essentially gets unwrapped, so we basically creates `PSObject` in vain.\r\n- When the delegate return type is `object`, the `PSObject` is returned, making it hard to work with the true return value in C# code.\r\n\r\nThis is a breaking change for the delegate types with the `object` return type:\r\n- Before this change, the returned object will always be an `PSObject` instance.\r\n- After this change, the returned object is the underlying object, which could still be an `PSObject` if that's what the script actually returns.\r\n\r\nBut I think this would fall in the `Bucket 3 Grey Area`.\r\nWith this change, when setting `AddToHistoryHandler` to `{ param($line) $line -notmatch '^\\s+|ToSecureString|AsPlainText' }`, the time to load history entries from the history file reduces about `100` ms on my dev machine (from `~1750` to `~1650` ) for `213226` history records in the file.\r\n\r\n## PR Context\r\n\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-03-30T16:46:13Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "It's fine to reject this PR if we consider it too risky.\r\nI submit the PR only because the change is so simple.",
      "created_at": "2019-09-25T00:13:39Z",
      "updated_at": "2019-09-25T00:13:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> it's supposed to be used in C# context,\r\n\r\nCan a (enhanced) telemetry help to discover where (projects) and how it is used?\r\nOur PR template mentions only PowerShell Editor Services, Completions, PSScriptAnalyzer, EditorSyntax. What other projects could be impacted by this change? These should be projects already ported to .Net Core and PowerShell Core. Have MSFT such projects internally to test the change and weight a impact?\r\nI guess that there are not many projects that we could break. In addition, it will be a new major SDK version, which suggests the admissibility of such breaking changes - developers will in any case test new version.\r\n\r\n\r\n",
      "created_at": "2019-09-25T03:36:03Z",
      "updated_at": "2019-09-25T03:36:03Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The only case I can think of that will be affected is that the target delegate type has the return type `object`, and the user is casting the return value to `PSObject` directly, like `var psobj = (PSObject) MyHandler()`.\r\nI think for someone using it this way, he/she might actually assume the script block to write out `PSObject` instead of knowing that the output is always wrapped into `PSObject`.\r\n",
      "created_at": "2019-09-25T23:34:53Z",
      "updated_at": "2019-09-25T23:34:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Looking the code\r\nhttps://github.com/PowerShell/PowerShell/blob/6965ba723f9798fd0651e4bf02a8ee2f56aea87a/src/System.Management.Automation/engine/lang/scriptblock.cs#L777-L789\r\n\r\nWhat does the code return still unwrapped object or already PSObject? (I mean PSConvertBinder)",
      "created_at": "2019-09-26T06:38:08Z",
      "updated_at": "2019-09-26T06:38:59Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov Can you please rephrase your question? I'm not sure I understand it.",
      "created_at": "2019-09-26T17:27:07Z",
      "updated_at": "2019-09-26T17:27:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The code I referenced calls a code you modified in the PR. I guess that `PSConvertBinder.Get(invokeMethod.ReturnType)` wrap results in PSObject too. If so your change is not a breaking change.",
      "created_at": "2019-09-26T17:32:55Z",
      "updated_at": "2019-09-26T17:33:38Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "`PSConvertBinder` doesn't wrap results in `PSObject`. It does the right thing :)",
      "created_at": "2019-09-26T22:46:31Z",
      "updated_at": "2019-09-26T22:46:31Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@daxian-dbw Is this ready? ",
      "created_at": "2019-12-10T18:00:25Z",
      "updated_at": "2019-12-10T18:00:25Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "No, this is not ready. I don't think this should be in rc.1. Nobody really reviews it and it might be rejected by the committee.",
      "created_at": "2019-12-10T18:32:51Z",
      "updated_at": "2019-12-10T18:32:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think it is right direction. Delegates look good for future optimizations and this cleanup once can simplify our lives.\r\n\r\n",
      "created_at": "2019-12-10T18:40:09Z",
      "updated_at": "2019-12-10T18:40:09Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this PR and believes the possible breaking case described in https://github.com/PowerShell/PowerShell/pull/10619#issuecomment-535265557 is unlikely and it falls into the `Bucket 3: Unlikely Grey Area`. Therefore, this PR is approved. ",
      "created_at": "2019-12-12T00:00:49Z",
      "updated_at": "2019-12-12T00:00:49Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov I just reviewed this PR and think it's ready for official review. Can you please take a look when you have time? Thanks!",
      "created_at": "2020-03-26T18:41:37Z",
      "updated_at": "2020-03-26T18:41:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SeeminglyScience Perhaps you are interesting to review the PR.",
      "created_at": "2020-03-27T04:38:38Z",
      "updated_at": "2020-03-27T04:38:38Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@rjmholt please also review this PR. Thanks!",
      "created_at": "2020-03-27T05:08:23Z",
      "updated_at": "2020-03-27T05:08:23Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov I think this is ready to merge. Thanks!",
      "created_at": "2020-03-30T16:26:14Z",
      "updated_at": "2020-03-30T16:26:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Should we have a doc issue?",
      "created_at": "2020-03-30T16:46:56Z",
      "updated_at": "2020-03-30T16:46:56Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Good point. I don't think we have a doc about the `ScriptBlock-casting-to-delegate` behavior, but I could be wrong.",
      "created_at": "2020-03-30T18:10:24Z",
      "updated_at": "2020-03-30T18:10:24Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.1.0-preview.2` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.2)\n",
      "created_at": "2020-04-23T18:03:50Z",
      "updated_at": "2020-04-23T18:03:50Z"
    }
  ],
  "created_at": "2019-09-24T23:06:11Z",
  "number": 10619,
  "state": "closed",
  "title": "Do not wrap return result to `PSObject` when converting ScriptBlock to delegate",
  "updated_at": "2020-04-23T18:03:50Z"
}