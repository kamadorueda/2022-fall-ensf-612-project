{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1616",
  "author": "andschwa",
  "body": "## Steps to reproduce\r\n\r\n``` powershell\r\n$source = @\"\r\nusing System;\r\nnamespace Foo {\r\npublic static class Bar {\r\npublic static void Test() {\r\nConsole.BackgroundColor = (Console.ConsoleColor) -1;\r\n}\r\n}\r\n}\r\n\"@\r\nAdd-Type -TypeDefinition $source -Language CSharp -ReferencedAssemblies System.Console\r\n```\r\n## Expected behavior\r\n\r\nThe type to be added.\r\n## Actual behavior\r\n\r\n```\r\nAdd-Type : (5) : The type 'Console' exists in both 'System.Console, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' and\r\n'System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e'\r\n(4) : public static void Test() {\r\n(5) : >>> System.Console.BackgroundColor = (System.Console.ConsoleColor) -1;\r\n(6) : }\r\nAt line:1 char:1\r\n+ Add-Type -TypeDefinition $source -Language CSharp -ReferencedAssembli ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidData: (Microsoft.Power...peCompilerError:AddTypeCompilerError) [Add-Type], Exception\r\n    + FullyQualifiedErrorId : SOURCE_CODE_ERROR,Microsoft.PowerShell.Commands.AddTypeCommand\r\n\r\nAdd-Type : (5) : The type 'Console' exists in both 'System.Console, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' and\r\n'System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e'\r\n(4) : public static void Test() {\r\n(5) : >>> System.Console.BackgroundColor = (System.Console.ConsoleColor) -1;\r\n(6) : }\r\nAt line:1 char:1\r\n+ Add-Type -TypeDefinition $source -Language CSharp -ReferencedAssembli ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidData: (Microsoft.Power...peCompilerError:AddTypeCompilerError) [Add-Type], Exception\r\n    + FullyQualifiedErrorId : SOURCE_CODE_ERROR,Microsoft.PowerShell.Commands.AddTypeCommand\r\n\r\nAdd-Type : Cannot add type. Compilation errors occurred.\r\nAt line:1 char:1\r\n+ Add-Type -TypeDefinition $source -Language CSharp -ReferencedAssembli ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidData: (:) [Add-Type], InvalidOperationException\r\n    + FullyQualifiedErrorId : COMPILER_ERRORS,Microsoft.PowerShell.Commands.AddTypeCommand\r\n```\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n``` powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.10032.0\r\nPSEdition                      PowerShellCore\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   3.0.0.0\r\nGitCommitId                    v6.0.0-alpha.7\r\nCLRVersion\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n\r\n```\r\n\r\n/cc @vors \r\n",
  "closed_at": "2017-05-23T20:11:31Z",
  "comments": [
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "That is really weird. \ud83d\ude22\n\n```\nPS>[Console].AssemblyQualifiedName\nSystem.Console, System.Console, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n```\n\n[There's even a test for that class being there](https://github.com/PowerShell/PowerShell/blob/3ecac72bafdc281236bc7b4bc621010f52b954bf/test/powershell/Language/Interop/DotNet/DotNetInterop.Tests.ps1) \n\nWhich of course, means that if you don't use the `-ReferencedAssemblies` parameter (which is strangely plural), you get an error: `'Console' does not contain a definition for 'BackgroundColor'` ... but...\n\n```\nPS> [Console]::BackgroundColor = \"White\"\nPS> [Console]::BackgroundColor\nWhite\n```\n",
      "created_at": "2016-08-16T04:23:19Z",
      "updated_at": "2016-08-16T04:27:16Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Is there any _workaround_ for this? It's currently blocking my PowerLine module from working on Core :wink: \n",
      "created_at": "2016-09-19T22:14:25Z",
      "updated_at": "2016-09-19T22:14:25Z"
    },
    {
      "author": "Iristyle",
      "author_association": "NONE",
      "body": "A similar issue is described in Roslyn at https://github.com/dotnet/roslyn/issues/13267\n\nWe're running into this problem as we expand our Puppet PowerShell module to be cross-platform, as we use a custom host.\n\nIn the 6.0 alpha 10 release, it was necessary to add more `ReferencedAssemblies` to the `Add-Type` call on OSX with `-ReferencedAssemblies @('System.Collections', 'System.Console', 'System.Management.Automation', 'System.Globalization')`.  On Windows WMF 5.1, this was not necessary.\n\nIt's my understanding that `System.Management.Automation` should not be necessary to explicitly include based on the `Add-Type` documentation at https://technet.microsoft.com/en-us/library/hh849914.aspx \n",
      "created_at": "2016-10-05T17:22:05Z",
      "updated_at": "2016-10-05T18:33:43Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "According to @tmat it's a bug in CoreFX.\nThey exporting the same public type from both assemblies.\n\nThere is a workaround: an internal Roslyn API that allows compiling such cases.\nI will send a PR with it, but we need to discuss, do we want to use it or not.\n\nAlso, this API will become public at some point, this work is tracked in https://github.com/dotnet/roslyn/issues/5855\n",
      "created_at": "2016-11-17T00:54:28Z",
      "updated_at": "2016-11-17T00:54:28Z"
    },
    {
      "author": "tmat",
      "author_association": "NONE",
      "body": "See https://github.com/dotnet/corefx/issues/5540 for the CoreFX issue.\n",
      "created_at": "2016-11-17T01:03:53Z",
      "updated_at": "2016-11-17T01:03:53Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Some things we discussed with @tmat for future context.\n1. It's a bad idea to mix **contract** assemblies and **implementation** assemblies in the reference assmemblies. It will confuse Roslyn and things will break.\n2. In the PowerShell self-contained package, we don't ship any **contract** assemblies. We can consider doing it just for `Add-Type` but it's definitely will complicate our build process.\n3. The ideal solution would be to get https://github.com/dotnet/corefx/issues/5540 fixed and switch to the newer coreclr packages.\n",
      "created_at": "2016-11-17T22:15:41Z",
      "updated_at": "2016-11-17T22:16:04Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Blocked on https://github.com/dotnet/corefx/issues/5540\n",
      "created_at": "2016-11-18T22:45:21Z",
      "updated_at": "2016-11-18T22:45:21Z"
    },
    {
      "author": "Iristyle",
      "author_association": "NONE",
      "body": "It's unclear based on the commentary in https://github.com/dotnet/coreclr/issues/4651 whether or not https://github.com/dotnet/coreclr/pull/9269 was / will be successful in fixing this issue completely or not.\r\n\r\nIf you could follow up on this thread when a new build based on the https://github.com/dotnet/coreclr/pull/9269 merge has shipped, that would be great @vors \r\n\r\nThanks!",
      "created_at": "2017-02-06T22:25:36Z",
      "updated_at": "2017-02-06T22:25:36Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr @vors for my own knowledge, is a \"contract assembly\" the same as what @lzybkr has been referring to as a \"facade assembly\" (per #3095)? ",
      "created_at": "2017-02-07T21:12:46Z",
      "updated_at": "2017-02-07T21:12:46Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "A contract assembly is analogous to a header file in C++ - it defines the api implemented by the assembly, but it does not provide an implementation.\r\n\r\nA facade assembly is a fake implementation that points to the real implementation.\r\n\r\nFor a concrete example, consider a commonly used type `System.String`:\r\n\r\nWhen building against `netstandard1`, you will reference `System.Runtime.dll`. This is (or should be) a **contract** assembly that contains no implementation.\r\n\r\nWhen you build your application (not a library, but an exe), you will target a specific runtime, e.g. `net45` or `netcoreapp1.0`, the build system will copy the **implementation** assembly to your build directory and you will deploy that **implementation** assembly, not the **contract** assembly.\r\n\r\nIf your assembly targets `netstandard*`, the build system does not copy your referenced assemblies - it's assumed the application provides those because it knows which runtime you are targeting.\r\n\r\nIf your assembly targets `netcoreapp*`, the build system will copy `System.Runtime.dll` from .Net Core - and it will contain the implementation of `System.String`.\r\n\r\nIf your assembly targets `net45`, the build system will copy a *facade* assembly for System.Runtime.dll. This *facade* assembly has a type forward that says `System.String` is really in `mscorlib.dll`.\r\n\r\nIt turns out that the *facade* assembly `System.Runtime.dll` is installed on Windows 10, so maybe the build system won't copy this one, I haven't tried it. But many facade assemblies are not installed, so the build system will help you copy the necessary assemblies if your application targets a specific runtime and not `netstandard*`.",
      "created_at": "2017-02-08T01:54:44Z",
      "updated_at": "2017-02-08T01:54:44Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Got it. Thanks for the detailed explanation. We just had a great conversation with the .NET folks today, and this dovetails nicely with some similar info I got from them. ",
      "created_at": "2017-03-02T21:37:18Z",
      "updated_at": "2017-03-02T21:37:18Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Apologies in asking this question!!\r\n\r\nIs it a \"Requirement\" to install .NET Core in order for PowerShell Open Source to work in Linux distribution??  This is been bugging me for some time.\r\n\r\n:)",
      "created_at": "2017-03-03T18:08:59Z",
      "updated_at": "2017-03-03T18:08:59Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@MaximoTrinidad in a sense, no, the PowerShell end-user packages are self-contained (they bring the components of .NET Core that are necessary along with themselves; _having_ those components is necessary, but you do not have to install them separately). It _is_ required in order to develop on PowerShell, but that's a separate story.",
      "created_at": "2017-03-03T18:35:42Z",
      "updated_at": "2017-03-03T18:35:42Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "@andschwa ,  Thanks for the quick reply! \r\n\r\nSo, would it make any difference if I install .NET Core? I mean, It should be fine along side PowerShell. Right!\r\n\r\n:)",
      "created_at": "2017-03-03T19:01:10Z",
      "updated_at": "2017-03-03T19:01:10Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@MaximoTrinidad installing .NET Core separately shouldn't affect PowerShell whatsoever \ud83d\ude04 ",
      "created_at": "2017-03-03T19:30:35Z",
      "updated_at": "2017-03-03T19:30:35Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "Thanks @andschwa! Greatly Appreciated!\r\n:)",
      "created_at": "2017-03-03T19:34:47Z",
      "updated_at": "2017-03-03T19:34:47Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Given that the repro in #3264 is working, I played around with the original example (note that I suspected that Console.ConsoleColor should have been System.ConsoleColor). I *think* it's working now (adding @SteveL-MSFT to verify):\r\n\r\n```powershell\r\n$source = @\"\r\nusing System;\r\nnamespace Foo {\r\npublic static class Bar {\r\npublic static void Test() {\r\nConsole.BackgroundColor = (System.ConsoleColor) (-1);\r\n}\r\n}\r\n}\r\n\"@\r\nAdd-Type -TypeDefinition $source -Language CSharp -ReferencedAssemblies System.Console\r\n```",
      "created_at": "2017-05-23T19:56:41Z",
      "updated_at": "2017-05-23T19:56:49Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Yes, it looks to be working.",
      "created_at": "2017-05-23T20:11:31Z",
      "updated_at": "2017-05-23T20:11:31Z"
    }
  ],
  "created_at": "2016-08-02T22:21:57Z",
  "labels": [
    "Issue-Bug",
    "Blocked",
    "WG-Cmdlets",
    "Resolution-Fixed"
  ],
  "number": 1616,
  "state": "closed",
  "title": "Add-Type reference assembly bug",
  "updated_at": "2017-05-23T20:11:31Z"
}