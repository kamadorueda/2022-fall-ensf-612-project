{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13598",
  "author": "mklement0",
  "body": "Follow-up from #13592:\r\n\r\n## Summary of the new feature/enhancement\r\n\r\nIntroduce a new `-DateKind` parameter as an enumeration value as follows:\r\n\r\n```\r\nConvertFrom-Json -DateKind { Local | Utc | Unspecified | Offset | None }\r\n```\r\n\r\nThe goal is to parse timestamps in the input JSON as `[datetime]` /  `[datetimeoffset]` instances of the given kind - irrespective of the specific formatting of those timestamps.\r\n\r\n* `Local` / `Utc` / `Unspecified` should create `[datetime]` instances with the given `.Kind` value.\r\n\r\n  * A timestamp without time-zone information (UTC offset or `Z` suffix) should be assumed to be `Local` (a pitfall is that on calling `.ToLocalTime()` on something that was parsed as `Unspecified`, it is assumed to be a UTC value - `[datetime]::new(<unspecified-datetime>.Ticks, 'Local')` is the solution).\r\n  * If `Unspecified` is requested, any UTC offset / `Z` suffix should be ignored.\r\n  \r\n* `Offset` should create a `[datetimeoffset]` instance instead, which preserves the exact UTC offset as specified or implied in the input.\r\n\r\n  * A timestamp without time-zone information (UTC offset or `Z` suffix) should be assumed to be a caller-local timestamp.\r\n\r\n* `None` should not create a date a `[datetime]` /  `[datetimeoffset]` at all and instead pass the _original string values_ through.\r\n\r\nNote that on _serializing_, with `ConvertTo-Json`, both `Utc` and `Local` `[datetime]` instances serialize with the appropriate UTC offset (e.g., `\"2020-09-08T16:24:21.577822-04:00\"`), whereas `Unspecified` serializes without an offset (e.g., \"2020-09-08T16:24:21.577822\").\r\n\r\n**Motivation**:\r\n\r\nSince v6, the Json.NET-based `ConvertTo-Json` automatically deserializes _strings_ that contain an `\"o\"`-formatted (roundtrip format) date/time string (e.g., `\"2020-09-07T09:44:13.769Z\"`) or a _prefix_ of it that at least includes everything up to the _seconds_ part (e.g., `\"2020-09-07T09:44:13:`) as `[datetime]` instances.\r\n\r\nHowever, the resulting `[datetime]` instances' `.Kind` property (`Local`, `Utc`, or `Unspecified`) is determined by the specifics of the string value as follows:\r\n\r\n* `Unspecified`, if there is no time-zone information in the input string.\r\n* `Utc`, if the time-zone information is a trailing `Z`\r\n* `Local`, if the time-zone information is given as a trailing UTC _offset_ (e.g., `+02:00`), in which case the offset is properly converted to the caller-local equivalent.\r\n\r\nNote that the new `System.Text.Json` API that is being considered as the future underpinning of the `*-Json` cmdlets - see #11198 - exhibits the same behavior.\r\n\r\nThere are two problems with this behavior:\r\n\r\n* A `Utc` instance _gives no indication that it is a UTC timestamp_ in its default output formatting (applies both to PowerShell's formatting and `.ToString()` - verify with  `[datetime]::UtcNow` and `[datetime]::UtcNow.ToString()`).\r\n\r\n* Specific UTC offsets in the input are lost, because they are translated to a _caller-local_ `Local` instance.\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Queued for review within Cmdlets WG",
      "created_at": "2022-10-11T16:20:48Z",
      "updated_at": "2022-10-11T16:20:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Important https://learn.microsoft.com/en-US/dotnet/standard/datetime/system-text-json-support\n\n<blockquote><img src=\"https://learn.microsoft.com/dotnet/media/dot-net-cross-platform.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://learn.microsoft.com/en-us/dotnet/standard/datetime/system-text-json-support\">DateTime and DateTimeOffset support in System.Text.Json</a></strong></div><div>An overview of how DateTime and DateTimeOffset types are supported in the System.Text.Json library.</div></blockquote>",
      "created_at": "2022-10-11T16:54:39Z",
      "updated_at": "2022-10-11T16:54:41Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Losing the offsets that were in the input data (re: second problem listed above) might be a no-go for me in some scenarios.",
      "created_at": "2022-10-11T18:19:09Z",
      "updated_at": "2022-10-11T18:19:09Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@sba923, just to be clear: The proposed `-DateKind Offset` would preserve the offsets, due to using [`[datetimeoffset]`](https://docs.microsoft.com/en-US/dotnet/api/System.DateTimeOffset); `-DateKind None` would return the timestamp strings as-is.",
      "created_at": "2022-10-11T21:39:08Z",
      "updated_at": "2022-10-11T21:39:08Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "@PowerShell/wg-powershell-cmdlets discussed this and we would like a better understanding of the real world scenarios where this behavior would be used.",
      "created_at": "2022-11-02T16:41:47Z",
      "updated_at": "2022-11-02T16:41:47Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Simple\r\n\r\n```powershell\r\nConvertFrom-Json -InputObject '{\"Date\": \"2022-11-02T12:01:44.5801388-04:00\"}' | ConvertTo-Json\r\n```\r\n\r\nWhen you use ConvertFrom-Json on this field it gives you a Local Kind DateTime object which has a correct value but you no longer know the original value is `-04:00`. It would only work if your local time zone was also `-04:00`.\r\n\r\nIf you were able to do `-DateKind Offset` you should be able to get a `DateTimeOffset` value back where the time zone offset is preserved allowing you to round trip the data back but also be able to know what the input value's time zone was. Same with `-DateKind None` as you would just get the raw string back.",
      "created_at": "2022-11-02T18:44:03Z",
      "updated_at": "2022-11-02T18:44:03Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Please note that whatever improvements are made to `ConvertFrom-Json` must ripple over to other cmdlets that perform the same conversions, such as `Invoke-RestMethod`.",
      "created_at": "2022-11-07T09:36:23Z",
      "updated_at": "2022-11-07T09:36:23Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "I did some investigation in the newtonsoft json parser and it looks to me that although it is possible use a setting as `DateParseHandling = DateParseHandling.None` for serialization, there no easy way do something like that for deserializing. Besides, the `JValue` is already converted to a `DateTime` object (based on the current localization) which probably means that you have to retrieve the raw string from the parent (which might be either a `JArray` or `JObject` possibly along with other values).\r\nTherefore, I think that would be more feasible to have two additional parameters as:\r\n\r\n### `-DateFormat`\r\nWhich won't change the `DateTime` type to a `String` but instead add a **custom format** to the `DateTime` values as in: `Get-Date $JObject.Value -Format $DateFormat` so that it will correctly type cast to the expected string and also roundtrip. It might default to [ISO 8601, which appears to be the default format for NewtonSoft](https://www.newtonsoft.com/json/help/html/datesinjson.htm)\r\n\r\n### `-AsLocalTime`\r\nAs apposed to `-AsUTC` which would be the default.\r\n\r\nFor a prototype see: [Powershell 7.2: ConvertFrom-Json - Date Handling](https://stackoverflow.com/a/74352656/1701026), ",
      "created_at": "2022-11-08T11:32:05Z",
      "updated_at": "2022-11-08T11:49:13Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iRon7, to recap the key benefit of the `-DateKind` proposal, as also summarized in [@jborean93's comment](https://github.com/PowerShell/PowerShell/issues/13598#issuecomment-1301068480): it is the ability to _avoid loss of information_, by:\r\n\r\n* either: suppressing conversion to a date type altogether (`-DateKind None`), leaving interpretation of the original string value up to the caller. \r\n* or: converting to `[datetimeoffset]`, which preserves the original UTC offset (`-DateKind Offset`)\r\n\r\nThe secondary benefit, if loss of offset information isn't a concern, is the ability to choose whether the resulting `[datetime]` instances should be expressed in _local_ time or in _UTC_, or even as _unspecified_ in that regard (`-DateKind Local` / `-DateKind Utc`, `-DateKind Unspecified`).\r\n\r\n---\r\n\r\nBy contrast:\r\n\r\n* `-AsLocalTime` wouldn't provide the key benefit, and only part of the secondary benefit.\r\n\r\n* `-DateFormat` amounts to an unrelated proposal: the ability to control the format of string representations that are used on serialization / recognized on deserialization as timestamp values.\r\n  * I personally don't see the need for such a feature, but if you feel strongly about it, I encourage you to create a separate issue.\r\n\r\nAlso with respect to discussing potential implementations, we should keep in mind that a move from Newtonsoft's JSON parser to the new, .NET-native parser may be ahead (not sure what the plans are; https://github.com/PowerShell/PowerShell/pull/11198 is now closed).\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2022-11-08T18:08:59Z",
      "updated_at": "2022-11-08T18:08:59Z"
    }
  ],
  "created_at": "2020-09-08T20:32:25Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets-Utility"
  ],
  "number": 13598,
  "state": "open",
  "title": "Add a -DateKind parameter to ConvertFrom-Json to control how System.DateTime / System.DateTimeOffset values are constructed",
  "updated_at": "2022-11-08T18:08:59Z"
}