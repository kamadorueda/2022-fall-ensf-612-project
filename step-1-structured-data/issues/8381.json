{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8381",
  "author": "iRon7",
  "body": "This enhancement request is related to:\r\n[Make ConvertTo-Json detect circular references](https://github.com/PowerShell/PowerShell/issues/6638)\r\n[In ConvertTo-Json the max allowed depth is 100. However, we should add code to dynamically check if we are running out of stack, and serialize objects with bigger depths](\r\nhttps://github.com/PowerShell/PowerShell/issues/3181)\r\n\r\nApparently almost every programmer goes through the pitfall of the default limited `-Depth` of the `ConvertTo-Json` cmdlet,\r\nSee  Sackoverflow: [Unexpected ConvertTo-Json results? Answer: it has a default -Depth of 2](https://stackoverflow.com/questions/53583677/unexpected-convertto-json-results-answer-it-has-a-default-depth-of-2)\r\n\r\nI guess this goes along with the fact that  `ConvertTo-Json` terminates branches that are deeper than the default `-Depth` (2) with a (.Net) full type name. Therefore programmers assume a bug or a cmdlet limitation and do not read the help or about. \r\nTo my opinion, adding a full type name to a terminated branch doesn\u2019t add much value, knowing that:\r\n- Json hardly preserves any (.Net) type names at all\r\n- You can\u2019t rebuild the object from the type name without its data.\r\n\r\nMeaning, that a simple [ellipsis]( https://en.wikipedia.org/wiki/Ellipsis) (three dots: `...`) at the end of the cut off branch could suffice and have a clearer meaning that indicates an *intentional* omission of additional child properties.\r\n\r\nDefinition of an ellipsis (from [Wikipedia]( https://en.wikipedia.org/wiki/Ellipsis)):\r\n\r\n> An ellipsis (plural ellipses; from the Ancient Greek: \u1f14\u03bb\u03bb\u03b5\u03b9\u03c8\u03b9\u03c2, \u00e9lleipsis, 'omission' or 'falling short') is a series of dots (typically three, such as `\u2026`) that usually indicates an intentional omission of a word, sentence, or whole section from a text without altering its original meaning.\r\n\r\nFor compatibility, I would not use the Unicode ellipses character  (U+2026) but simply 3 (ascii) dots: \u2026\r\n\r\nTaken the following commands:\r\n```\r\n$Test = @{Guid = New-Guid}\r\n$Test.Parent = $Test\r\n$Test | ConvertTo-Json\r\n```\r\nIn stead of producing:\r\n```\r\n{\r\n    \"Guid\":  \"a274d017-5188-4d91-b960-023c06159dcc\",\r\n    \"Parent\":  {\r\n                   \"Guid\":  \"a274d017-5188-4d91-b960-023c06159dcc\",\r\n                   \"Parent\":  {\r\n                                  \"Guid\":  \"a274d017-5188-4d91-b960-023c06159dcc\",\r\n                                  \"Parent\":  \"System.Collections.Hashtable\"\r\n                              }\r\n               }\r\n}\r\n```\r\nIt should produce:\r\n```\r\n{\r\n    \"Guid\":  \"a274d017-5188-4d91-b960-023c06159dcc\",\r\n    \"Parent\":  {\r\n                   \"Guid\":  \"a274d017-5188-4d91-b960-023c06159dcc\",\r\n                   \"Parent\":  {\r\n                                  \"Guid\":  \"a274d017-5188-4d91-b960-023c06159dcc\",\r\n                                  \"Parent\":  \"...\"\r\n                              }\r\n               }\r\n}\r\n```",
  "closed_at": "2018-12-06T04:49:08Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Related https://github.com/PowerShell/PowerShell/pull/8199\r\n/cc @louistio ",
      "created_at": "2018-12-03T04:37:17Z",
      "updated_at": "2018-12-03T04:37:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Formally it is a breaking change and should be approved by PowerShell Committee. /cc @SteveL-MSFT ",
      "created_at": "2018-12-03T04:38:51Z",
      "updated_at": "2018-12-03T04:38:51Z"
    },
    {
      "author": "adamgauthier",
      "author_association": "CONTRIBUTOR",
      "body": "My understanding is that this change wouldn't really fix the root problem with `ConvertTo-Json` (the fact that default `Depth` is `2`). However, it may help a user understanding what's happening? Not even sure, I have no strong opinion about this. @markekraus might?",
      "created_at": "2018-12-03T04:44:45Z",
      "updated_at": "2018-12-03T04:44:45Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@louistio: Indeed it wouldn't fix the default `-Depth` problem, but the proposal makes sense independently of that.\r\n\r\nYes, it would provider a clearer (though not unambiguous) visual signal that something was truncated.\r\n",
      "created_at": "2018-12-04T05:15:53Z",
      "updated_at": "2018-12-04T05:15:53Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "As for the `-Depth 2` problem in `Convert*To*-Json`: please see #8393",
      "created_at": "2018-12-04T06:09:22Z",
      "updated_at": "2018-12-04T06:09:22Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this and it appears that the typename is the result of ToString() not being implemented so the type name is returned.  Also, one can override ToString() to serialize to something more useful whereas producing \"...\" would limit this.",
      "created_at": "2018-12-05T23:55:53Z",
      "updated_at": "2018-12-05T23:55:53Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT for clarity, what is the recommended implimentation?\r\n\r\nif the type has ToString(), use that. If not, use ...\r\n\r\nor\r\n\r\nalways use ...\r\n\r\nIt is not clear from your comment.",
      "created_at": "2018-12-06T00:29:37Z",
      "updated_at": "2018-12-06T00:29:37Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@markekraus, I think the recommendation is _not to make any changes_, based on the rationale that `.ToString()` representation _may_ be meaningful.\r\n\r\nThat said, for _programmatic_ processing, `.ToString()` output should never be relied upon.\r\n\r\nTherefore, it comes down to:\r\n\r\n* If I _am_ interested in the objects at a given level, I need to adjust `-Depth` accordingly, as only that gives me _parseable_ output (within the limits of JSON).\r\n\r\n* Otherwise,  how the objects at that level stringify is - by definition -  of _no interest_, which is why a generic `\u2026` representation makes sense as a clear visual signal that the input had additional depth that was _intentionally ignored_.",
      "created_at": "2018-12-06T02:10:33Z",
      "updated_at": "2018-12-06T02:10:33Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Sorry if not clear, but the recommendation as @mklement0 stated is to not make any change.",
      "created_at": "2018-12-06T02:38:10Z",
      "updated_at": "2018-12-06T02:38:10Z"
    }
  ],
  "created_at": "2018-12-02T18:40:45Z",
  "labels": [
    "Issue-Enhancement",
    "Resolution-By Design",
    "Breaking-Change",
    "Committee-Reviewed",
    "WG-Cmdlets-Utility"
  ],
  "number": 8381,
  "state": "closed",
  "title": "`ConvertTo-Json`: terminate cut off branches with a ellipsis string  rather than a full (.Net) type name",
  "updated_at": "2018-12-06T04:49:08Z"
}