{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6598",
  "author": "mklement0",
  "body": "Just as the current _Windows PowerShell_ File Explorer context-menu integration (with Shift-right-click) is broken with paths with embedded `'` chars. , as described [here](https://superuser.com/q/1310258/139307), so is PowerShell Core's.\r\n\r\nThe following two lines must be revised in accordance with the linked instructions:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/77f36498e613037babcc99029ca386e36f3b7b59/assets/Product.wxs#L204\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/77f36498e613037babcc99029ca386e36f3b7b59/assets/Product.wxs#L212\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.1.0-preview.1\r\n```\r\n",
  "closed_at": "2018-04-25T00:03:15Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@bergmeister do you want to take this?",
      "created_at": "2018-04-09T12:44:43Z",
      "updated_at": "2018-04-09T12:44:43Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT I will try to take a look at this but cannot promise anything at the moment (I will be at psconf.eu next week and after that on holiday for 2 weeks so if I cannot fix/investigate it until psconf, then others will need to take a look at it). But it seems @mklement0 has already found the required fix in the linked superuser thread to handle this special case, thanks for the initial investigation.\r\nI am glad people actually use it and find it generally useful  :-)",
      "created_at": "2018-04-09T14:25:02Z",
      "updated_at": "2018-04-09T16:25:44Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@mklement0 I have tried your suggestion of using `\\\"` instead of the `'` and various other variations with quotes and it does not work for me. This bug exist also with the native Windows PowerShell integration in Windows as you said. The reason is because `%V` gets replaced with the actual path and I could not quickly find a way of making the command work because escaping a single quote inside a single quote means that it needs to appear twice. I also tried double quotes, no success but double quotes are not good from a security perspective because folder names can contain `$`  and therefore you would open up a hole for script injection...\r\n@SteveL-MSFT This would be much simpler if `pwsh` had a startup path option and then we could also solve the other issue of starting pwsh in the user folder instead of the installation folder.",
      "created_at": "2018-04-09T18:58:14Z",
      "updated_at": "2018-04-09T22:16:28Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@bergmeister: \r\n\r\n> folder names can contain $ and therefore you would open up a hole for script injection...\r\n\r\nThat's a good point.\r\n\r\nI suppose the only way to avoid this to use `-File` rather than `-Command`, because the arguments would then be treated as _literals_ by PowerShell, but that would require us to ship a helper script.\r\n\r\n\r\n\r\n",
      "created_at": "2018-04-09T19:03:55Z",
      "updated_at": "2018-04-09T19:26:49Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@mklement0 I am not sure if `-File` would solve it because how do you pass the literal string to the function then, I imagine you would run into the same problem. To me it seems to be rather a language problem because adding just one single quote inside a single quote make it invalid syntax. Maybe an expert in batch syntax or Windows could help out?\r\nWhat do the powershell language experts think @lzybkr or @BrucePay ?",
      "created_at": "2018-04-09T19:35:18Z",
      "updated_at": "2018-04-09T19:41:34Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> I imagine you would run into the same problem\r\n\r\nNo, you wouldn't - any argument passed to `-File` from the outside is a _literal_.\r\n\r\nThus, something like the following would be safe:\r\n\r\n```cmd\r\npowershell.exe -noexit -File  /path/to/helper-script.ps1 \"%V\"\r\n```\r\n\r\nAs an aside: The way that `-Command` parsing works is [really unfortunate](https://github.com/PowerShell/PowerShell/issues/4024#issuecomment-311541803), but the decision was made to keep the old behavior.\r\n\r\n---\r\n\r\nThe alternative is to _document_ the hypothetical vulnerability (I've already added a note to my superuser.com answer)  and rely on users being savvy enough to recognize a malicious folder name when they see one.\r\n\r\n",
      "created_at": "2018-04-09T19:42:59Z",
      "updated_at": "2018-04-09T19:54:42Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@mklement0 A sophisticated attack could involve launching an interactive process (a bit like a Ranorex/Selenium test) but by this time the machine is already exploited I guess.\r\nMy vote goes for having a `-Path` option in `pwsh` because it would also help to fix #5705, which already failed to be solved once.\r\nP.S. I just realised that you're Austrian as well ;)",
      "created_at": "2018-04-09T19:50:19Z",
      "updated_at": "2018-04-09T21:09:00Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@bergmeister: Servas ;)\r\n\r\nI definitely like the idea of the `pwsh` CLI having a `-Path` parameter (though we should think about the specific name, given that `Start-Process` calls the analogous parameter `-WorkingDirectory`, for instance; perhaps `-WorkingDirectory` / `-wd`?).\r\n\r\nIs there an issue for this suggestion yet?\r\n",
      "created_at": "2018-04-09T21:06:08Z",
      "updated_at": "2018-04-09T21:06:08Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I'm thinking a `-WorkingDirectory` parameter makes sense.  I'll work on a PR for this.",
      "created_at": "2018-04-09T22:09:21Z",
      "updated_at": "2018-04-09T22:10:33Z"
    }
  ],
  "created_at": "2018-04-09T03:00:19Z",
  "number": 6598,
  "state": "closed",
  "title": "File Explorer context-menu integration fails with directory names with embedded apostrophes (single quotes)",
  "updated_at": "2018-04-25T00:03:15Z"
}