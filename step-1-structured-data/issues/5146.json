{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5146",
  "author": "0xfeeddeadbeef",
  "body": "Please provide ability to invoke generic methods with explicit type parameters.\r\n\r\nSteps to demonstrate\r\n------------------\r\n\r\n```powershell\r\n[Array]::Empty[string]()\r\n```\r\n\r\nor using a class:\r\n\r\n```powershell\r\nclass A {\r\n    static [string] GetTypeName[T]() { return [T].Name }\r\n}\r\n\r\n[A]::GetTypeName[string]()\r\n```\r\n\r\n(`Array.Empty` was chosen as a simplest possible example. In scripts I\u02bcd use `@()`)\r\n\r\nCurrent behavior\r\n---------------\r\n\r\n```none\r\nAt line:1 char:16\r\n+ [Array]::Empty[string]()\r\n+                ~\r\nArray index expression is missing or not valid.\r\nAt line:1 char:16\r\n+ [Array]::Empty[string]()\r\n+                ~~~~~~~\r\nUnexpected token 'string]' in expression or statement.\r\nAt line:1 char:24\r\n+ [Array]::Empty[string]()\r\n+                        ~\r\nAn expression was expected after '('.\r\n    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException\r\n    + FullyQualifiedErrorId : MissingArrayIndexExpression\r\n```\r\n\r\nRuminations\r\n---------------\r\n\r\nI understand that it\u02bcs not important to have full support of generics in a scripting language or to have 100% feature parity with C#  (I might be wrong, \u2014 now we have `classes` in PowerShell after all :thinking:)\r\n\r\nHere are some _not-very-elegant_ workarounds from the Interwebs:\r\n\r\n- [Workaround to call to a generic method OfType<T>() in PowerShell, when PowerShell cannot figure out <T> from the context](https://gist.github.com/vors/d6a70e5d3439e928e603) by @vors\r\n- [PSGenericMethods module](https://github.com/dlwyatt/PSGenericMethods/blob/master/GenericMethods.psm1) by @dlwyatt\r\n- [Invoking Generic Methods on Non-Generic Classes in PowerShell](http://www.leeholmes.com/blog/2007/06/19/invoking-generic-methods-on-non-generic-classes-in-powershell/) by @LeeHolmes\r\n- [How do I call a parameterless generic method from Powershell v3?](https://stackoverflow.com/a/18775448)\r\n\r\nHere are my questions:\r\n\r\n- **Is it possible to implement this at all? How hard it could be?**\r\n- **Anyone tried to implement this before?**\r\n- **Is it worthwhile?**\r\n\r\nJust posting this here for discussion. Didn\u02bct find any mentions of this problem in other issues.",
  "closed_at": "2022-01-27T17:55:54Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "At first glance, this is not worthwhile because the main asset of PowerShell is to hide complex details - Powershell automatically calls the correct methods.\r\n\r\nAs for implementation it seems is a lot of work but not so difficult.",
      "created_at": "2017-10-20T07:37:55Z",
      "updated_at": "2017-10-20T07:38:21Z"
    },
    {
      "author": "0xfeeddeadbeef",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Problem is that PowerShell **can not** automatically call correct methods when there is no way to deduce generic type parameter automatically (as seen in \"Steps to demonstrate\"). It must be specified explicitly. This is true for other CLR languages too.\r\nWe are forced to dig through all the complex details using reflection (see list of workarounds).",
      "created_at": "2017-10-20T09:49:56Z",
      "updated_at": "2017-10-20T09:49:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I mean that the implementation of the general case is likely to be redundant. On the other hand, if there are specific popular scenarios, maybe we could implement them natively in PowerShell.\r\nWe also have to take into account that PowerShell performs many implicit type conversions - we may encounter insurmountable hurdles.",
      "created_at": "2017-10-20T12:18:39Z",
      "updated_at": "2017-10-20T12:18:39Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "This is totally a reasonable thing to add, and a perfect example of why I'm excited PowerShell is open source.\r\n\r\nPeople do want this feature, but as you point out, it's not critical for a shell. With limited bandwidth, this feature was never quite important enough for a small team to implement, but that's not an issue anymore - there are plenty of motivated and capable people who might add this feature now.\r\n\r\nFor anyone willing to tackle this:\r\n\r\n* I think the proposed (and obvious) syntax should work, but you must be careful to not break array references, e.g.\r\n```powershell\r\n$t = [System.Collections.Generic.Dictionary[string,int]]\r\n$t.GenericTypeArguments[0]\r\n```\r\nWhen you first see the `[`, you can't know if you are expecting an expression or a type argument list.\r\n* We will need a new property in [MemberAst](https://github.com/PowerShell/PowerShell/blob/053d1808171dd08927554243c2bf665e1121bf48/src/System.Management.Automation/engine/parser/ast.cs#L2864). It might not be obvious why here and not `InvokeMemberAst`, but sometimes you refer to a method without arguments so you can call it later, e.g.\r\n```powershell\r\n$op = \"hello\".PadLeft\r\n$op.Invoke(15)\r\n```\r\nIt's probably not important to support the equivalent for generic methods in the initial implementation, but it is important that the representation support it should we want that in the future.\r\n* This [type](https://github.com/PowerShell/PowerShell/blob/fb286e6cf8480fe6df8a5a96311d6758e5c2b9f3/src/System.Management.Automation/engine/MshMemberInfo.cs#L1919) probably needs a new property to hold the specified type arguments, which would get added from the Ast [here](https://github.com/PowerShell/PowerShell/blob/4c29f5768de7a3c5baec932c697d8281adfd3735/src/System.Management.Automation/engine/parser/Compiler.cs#L5430).\r\n\r\nHopefully this is enough to get someone started, if more help is needed, just ask.",
      "created_at": "2017-10-20T17:18:57Z",
      "updated_at": "2017-10-20T17:18:57Z"
    },
    {
      "author": "dlwyatt",
      "author_association": "CONTRIBUTOR",
      "body": "I'll take a look when I have some time.  It'll certainly be easier than writing PSGenericMethods was, since I can just use the type conversion / binding code / overload identification that's already there instead of having to reinvent it.",
      "created_at": "2017-10-20T20:32:54Z",
      "updated_at": "2017-10-20T20:32:54Z"
    },
    {
      "author": "dlwyatt",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr , how would you feel about this syntax for the PSMethod reference option:\r\n\r\n```posh\r\n$op = \"Hello\".SomeGenericMethod\r\n$op.InvokeGeneric([someType], $arg1, $arg2)\r\n```\r\n\r\nThis makes it easier to see what's happening at parse-time, and we only need to modify InvokeMemberExpressionAst to support it.  If we modify MemberExpressionAst instead (allowing for `$op = \"Hello\".SomeGenericMethod[someType]`), it's tricker to distinguish between a property followed by an array index versus a method with a generic type.  By looking for `MethodName[type](args)`, it's not ambiguous (parser currently will complain about the open parenthesis).",
      "created_at": "2017-10-20T22:39:06Z",
      "updated_at": "2017-10-20T22:41:44Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Because a pipeline isn't allowed as the index expression, I don't think there is any ambiguity - one token of look ahead is sufficient - if could be a type argument list, it is, otherwise it must be an expression.\r\n\r\nIf a pipeline was allowed, a bare word is ambiguous - is it a type or an command invocation.\r\n\r\nNote that one token look ahead doesn't mean there is only one token to look for, there is at least a bare word and an '[', e.g.\r\n\r\n```powershell\r\n[Array]::Empty[string]()\r\n[Array]::Empty[[string]]()\r\n```\r\n\r\nThe extra square brace is there for a corner case where you want to specify the assembly name along with multiple type arguments, e.g.\r\n\r\n```powershell\r\n[System.Collections.Generic.Dictionary[[string, mscorlib], string]]\r\n```",
      "created_at": "2017-10-20T23:14:54Z",
      "updated_at": "2017-10-20T23:14:54Z"
    },
    {
      "author": "dlwyatt",
      "author_association": "CONTRIBUTOR",
      "body": "Hmm... playing devil's advocate for a second, do we want to support variables in the type expression?\r\n\r\n```posh\r\n$something.MethodName[$typeInAVariable]()\r\n```\r\n\r\nIf so, then this could be ambiguous:\r\n\r\n```posh\r\n$something.MethodName[$typeInAVariable] # Array index or method with generic type params?\r\n```",
      "created_at": "2017-10-20T23:28:38Z",
      "updated_at": "2017-10-20T23:28:38Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "That seemed useful in V2, but it's been that long since I've seriously considered it.\r\n\r\nAnd honestly, if we wanted to support that, I'd look for a different syntax for explicit type parameters.",
      "created_at": "2017-10-21T00:09:31Z",
      "updated_at": "2017-10-21T00:09:31Z"
    },
    {
      "author": "dlwyatt",
      "author_association": "CONTRIBUTOR",
      "body": "ok, cool.  I'll be on a plane for 4-5 hours tomorrow morning; if I'm not feeling too groggy (waking up at 4am, bleh), I'll plug away at it a bit.",
      "created_at": "2017-10-21T00:19:42Z",
      "updated_at": "2017-10-21T00:19:42Z"
    },
    {
      "author": "dlwyatt",
      "author_association": "CONTRIBUTOR",
      "body": "I might be biting off more than I can chew on this one.  I've tweaked the parser and AST to support the syntax, but I'm having trouble wrapping my head around the compiler and binders to see where to make use of the new information from the AST.  Will sleep on it.",
      "created_at": "2017-10-23T04:03:55Z",
      "updated_at": "2017-10-23T04:03:55Z"
    },
    {
      "author": "dlwyatt",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr \r\n\r\nCan I pick your brain a bit about this one?  Updating the parser was fairly straightforward, and when I look at the Adapter / DotNetAdapter / PSMethod classes, it's very similar to what I wrote in PSGenericMethods (easy to add some new overloads that accept a list of generic type arguments).\r\n\r\nBetween those, however, I'm getting lost in the Binders / DLR expression tree stuff, trying to figure out the best way to get the new information from the AST over to either DotNetAdapter or PSMethod.  Should there be new fields on binder class(es)?  Do we need to uniquely identify a binder based on the generic type arguments, or just use one binder instance per method / property name (the way it works now) and somehow pass on the generic type arguments so eventually PSMethod.Invoke can identify the right overload?\r\n\r\nWhile looking into this, I came across another possiblity for syntax:\r\n\r\n```posh\r\n# Imaginary generic method that takes one T and two other arguments\r\n$psmethod = [SomeClass]::SomeMethod\r\n$psmethod.InvokeGeneric(@([string]), 'Argument 1', 'Argument 2')\r\n```\r\n\r\n(Names don't matter here, just saying that we'll probably be adding new input to PSMethod's Invoke* method(s) anyway, and may not need to support the `$method = [SomeClass]::SomeMethod[string]` syntax as a result.  `$emptyStringArray = [array]::Empty[string]()` could still be a convenient shortcut for calling it, though. )",
      "created_at": "2017-10-24T14:33:00Z",
      "updated_at": "2017-10-24T14:33:00Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Look at `PSMethodInvocationConstraints` - I think that's the right place - just be sure to update the hashing so you don't reuse the same binder in different dynamic sites.\r\n\r\nAnd FYI - I'll be slow to respond over the next week.",
      "created_at": "2017-10-24T16:49:08Z",
      "updated_at": "2017-10-24T16:49:08Z"
    },
    {
      "author": "mikeTWC1984",
      "author_association": "CONTRIBUTOR",
      "body": "Was there any change? Or maybe some better option rather than using \"MakeGenericMethods\"? Generics are widely used in .net assemblies that deal with data, like entity framework or ML.NET, where classes are used to defined data schema. It's extremely tedious to port such methods to PS. I think it would be great to have <> operator  in PS too.",
      "created_at": "2019-05-23T17:20:24Z",
      "updated_at": "2019-05-23T17:20:24Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Some allowances for casting operations would be nice as well. For example, if you're casting to `[List[int]]`, the following does not currently work without an intermediate cast:\r\n```powershell\r\nusing namespace System.Collections.Generic\r\n\r\n[List[int]]@(1..10)\r\n```\r\n\r\nCurrently you must have an intermediary cast of `[int[]]` before that will go through. It would be nice if we could have the parser / conversion methods check if the target type is, e.g., `IEnumerable<T>` (where `T` is the same generic type parameter given to the target type we're casting to), and then automatically attempt to first convert anything that is `[object[]]` to `[T[]]` first to ensure the cast will succeed if it is able to. \r\n\r\nIn short, when given:\r\n```\r\n[List[int]] 1..10\r\n```\r\n\r\nThe parser should infer that `[List[int]]` requires a cast to `[int[]]` first and automatically apply the intermediary conversion.\r\n\r\nGiven #11768, we may also want to special case certain types, since `Memory<T>` itself isn't `IEnumerable<T>` but it does contain `Span<T>` which is, and you can already cast `T[]` to `Memory<T>` (I think?).",
      "created_at": "2020-02-04T16:52:15Z",
      "updated_at": "2020-02-04T16:57:57Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32, `[System.Collections.Generic.List[int]] @(1..10)` currently works fine, or are you talking about optimizations behind the scenes? Also note that `(...)` is preferable to `@(...)`, as the latter would enumerate and reassemble an already strongly typed array as an `[object[]]` array.\r\n\r\nNote that enclosure of the input array in `()` in something like  `[System.Collections.Generic.List[int]] (1..10)` is a _syntactic_ necessity, because the cast operator has higher precedence than the range operator.\r\n\r\n>  you can already cast T[] to Memory<T> (I think?).\r\n\r\nYou can, but just to spell it out: only if it is the _exact_ target type:\r\n\r\n```powershell\r\n# OK - exact type match; omitting [int[]] or using [long[]] wouldn't work.\r\n[Memory[int]] [int[]] (1..3)\r\n```\r\n\r\n",
      "created_at": "2020-02-04T19:14:59Z",
      "updated_at": "2020-02-04T19:14:59Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Huh, I didn't recall casting directly to List working. Odd. Good to know that does work, though.\r\n\r\nBut yeah, the last one there is the one I'd look to improve specifically, then, perhaps.",
      "created_at": "2020-02-04T19:22:34Z",
      "updated_at": "2020-02-04T19:22:34Z"
    },
    {
      "author": "mikeTWC1984",
      "author_association": "CONTRIBUTOR",
      "body": "To continue discussion on #12341, just realized same idea was suggested here. I had this issue in mind, but somehow thought it's about new syntax only.\r\nSo speaking of $obj.Method.Invoke - at a glance it's not obvious how it's implemented, but I guess it should use TypeInfo.GetMethod behind the scene. If so, shouldn't we be a step away form getting InvokeGeneric ( basically adding MethodInfo.MakeGenericMethod(types) in the chain)? @vexx32  you mentioned adding such method might need some change in .net core itself, does it mean that PSMethodInfo is using some different mechanism?",
      "created_at": "2020-04-17T03:22:36Z",
      "updated_at": "2020-04-17T03:22:36Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I was thinking the MethodInfo was coming from .NET Core directly, but it looks like we have a PSMethodInfo class I was forgetting about which we're already using. So adding something like your suggestion to it would probably be fairly easy, if you could figure out the necessary code to handle the generic method invocation directly. \ud83d\ude42 \r\n\r\nIt'd be a public API so at least probably require committee review, but beyond that I don't see anything too difficult about getting that added.\r\n\r\nI would _prefer_ personally just having generic methods work correctly in PS and be able to provide type args with a more c#-like syntax directly, but that's still a step in the right direction; when we eventually get to that point, we'll then have an available method to use to make it work directly that we can just reuse.",
      "created_at": "2020-04-17T03:27:02Z",
      "updated_at": "2020-04-17T03:27:02Z"
    },
    {
      "author": "dlwyatt",
      "author_association": "CONTRIBUTOR",
      "body": "I never did figure out how to properly get the info from the AST through the binders / etc. The code updates I did for the parser are still in my fork though, if someone wants to pick up where I left off:  https://github.com/dlwyatt/PowerShell/commit/74809e0080106926907085d80adea59d6844f070",
      "created_at": "2020-04-17T06:51:42Z",
      "updated_at": "2020-04-17T06:51:42Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "Binders are passed what they need and in general they don't need the AST. [PSMethodInvocationConstraints](https://github.com/PowerShell/PowerShell/blob/5f210c7eebd97b7aecab0a9fb057b3c1dd700b89/src/System.Management.Automation/engine/MshMemberInfo.cs#L1902) encapsulates this extra information (beyond the types of arguments) needed to nudge overload resolution in the desired way.",
      "created_at": "2020-04-17T15:40:14Z",
      "updated_at": "2020-04-17T15:40:14Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Would it make sense to create a new `PSGenericMethodInvocationConstraints` to store the additional type arguments needed for a generic method as a separate value to the types of the method parameters?",
      "created_at": "2020-04-17T15:41:55Z",
      "updated_at": "2020-04-17T15:41:55Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@vexx32 - probably not - just add a new field to the existing type.",
      "created_at": "2020-04-17T15:49:01Z",
      "updated_at": "2020-04-17T15:49:01Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@lzybkr, @dlwyatt, I'm unclear on what the consensus ended up being regarding the syntax:\r\n\r\n```powershell\r\n[Array]::Empty[string](...)\r\n```\r\n\r\nvs. \r\n\r\n```powershell\r\n[Array]::Empty.InvokeGeneric([string], ...)\r\n```\r\n\r\nor _both_?\r\n\r\nIf it's either / or, the first seems much preferable; if we only support type _literals_, then confusion with numeric indexing shouldn't be a concern (`[Array]::Empty[0]`); also, even multiple overloads are reported as a _single_ `` PSMethod`1 `` object, so indexing isn't useful anyway.\r\n\r\n",
      "created_at": "2020-04-17T16:06:13Z",
      "updated_at": "2020-04-17T16:35:13Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I think that the latter is simpler to implement as it doesn't require parser changes. It could be implemented as a halfway measure, handling the actual logic of invoking the generic method first, and then we can tackle the parser challenge afterwards.\r\n\r\n@lzybkr summarised the possible challenges better than I can in his comment: https://github.com/PowerShell/PowerShell/issues/5146#issuecomment-338268805",
      "created_at": "2020-04-17T16:32:05Z",
      "updated_at": "2020-04-17T16:33:00Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@vexx32 - the sharing of logic between invoking methods on a `PSMethod` and invoking methods the normal way is less than ideal. That's not to say you shouldn't bother implementing the former, just don't get your hopes up that the problem is half solved if you go that route.",
      "created_at": "2020-04-17T18:59:24Z",
      "updated_at": "2020-04-17T18:59:24Z"
    },
    {
      "author": "dlwyatt",
      "author_association": "CONTRIBUTOR",
      "body": "The first syntax is what's in the branch I linked earlier\n",
      "created_at": "2020-04-18T02:10:36Z",
      "updated_at": "2020-04-18T02:10:38Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@dlwyatt thanks for that! After resolving a few merge conflicts I was able to get that code rebased on top of the current master branch, and with a few nudges from @SeeminglyScience here and there on some of the more confusing bits, I've got a working implementation.\r\n\r\nTidying it up and figuring out some tests to write, and then I'll throw up a PR.",
      "created_at": "2020-04-19T16:27:13Z",
      "updated_at": "2020-04-19T16:27:13Z"
    },
    {
      "author": "oising",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32 Bump!",
      "created_at": "2021-05-03T23:01:47Z",
      "updated_at": "2021-05-03T23:01:47Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "This is already sorted in #12412, it's pending a followup on the review. As far as I know, I've sorted all the outstanding comments out, unless I missed something.",
      "created_at": "2021-05-03T23:05:51Z",
      "updated_at": "2021-05-03T23:05:51Z"
    },
    {
      "author": "oising",
      "author_association": "CONTRIBUTOR",
      "body": "Nice work man!",
      "created_at": "2021-05-03T23:06:43Z",
      "updated_at": "2021-05-03T23:06:43Z"
    },
    {
      "author": "mikeTWC1984",
      "author_association": "CONTRIBUTOR",
      "body": "Wondering, what is the status of #12412 ? Is it dead?",
      "created_at": "2021-07-21T20:51:54Z",
      "updated_at": "2021-07-21T20:51:54Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I've rebased it & asked the other members of the Engine working group to give it a look over. \ud83d\ude42 ",
      "created_at": "2021-07-29T00:17:20Z",
      "updated_at": "2021-07-29T00:17:20Z"
    }
  ],
  "created_at": "2017-10-17T19:01:47Z",
  "number": 5146,
  "state": "closed",
  "title": "Enhancement: Ability to invoke generic methods with explicit type parameters when PowerShell cannot figure out <T> from the context",
  "updated_at": "2022-01-27T17:55:59Z"
}