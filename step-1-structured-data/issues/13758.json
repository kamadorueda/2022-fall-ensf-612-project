{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13758",
  "author": "SteveL-MSFT",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nSee https://github.com/PowerShell/PowerShell/issues/13071 for details.\r\n\r\n- Expose `$PSStyle` automatic variable to get or set ANSI escape sequences associated with text decoration\r\n- Formatters for `$PSStyle` to help users see what the output would look like using one of the colors/attributes.  Note that current design choice is to automatically show nested types in `$PSStyle` as I expect users dumping that variable are interested in all the choices.\r\n- Update formatting engine to support stripping ANSI escape sequences if not supported or explicitly disabled\r\n- To preserve existing behavior, redirected output (from pwsh) is always plaintext\r\n\r\nAfter this is merged:\r\n\r\n- Remove `__SuppressAnsiExscapeSequences` code as it's no longer needed\r\n- Update existing ErrorRecord and Get-Error formatting to use `$PSStyle`\r\n\r\n## PR Context\r\n\r\nFix https://github.com/PowerShell/PowerShell/issues/13071\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [x] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [x] Experimental feature name(s): `PSAnsiRendering`\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [x] Issue filed: https://github.com/MicrosoftDocs/PowerShell-Docs/issues/7009\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [x] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-12-11T18:33:59Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Still need to add tests",
      "created_at": "2020-10-26T00:22:59Z",
      "updated_at": "2020-10-26T00:22:59Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as stale because it has been marked as requiring author feedback but has not had any activity for **15 days**. It will be closed if no further activity occurs **within 10 days of this comment**.",
      "created_at": "2020-11-23T08:00:06Z",
      "updated_at": "2020-11-23T08:00:06Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Still need to have WriteVerbose, etc... use the $PSStyle settings before taking this out of draft",
      "created_at": "2020-11-25T23:17:06Z",
      "updated_at": "2020-11-25T23:17:06Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "I really like this PR! It will be super useful to me!",
      "created_at": "2020-12-01T10:31:37Z",
      "updated_at": "2020-12-01T10:31:37Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "How do you envision C# developers to access the styles?\r\n\r\nCan we provide a strongly typed property, so we don't have to go through the SessionState?",
      "created_at": "2020-12-07T10:34:19Z",
      "updated_at": "2020-12-07T10:34:19Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@powercode I think Steve is going to make the `PSStyle` a singleton, so accessing it could be something like `PSStyle.Instance`. How do you think about it?",
      "created_at": "2020-12-08T05:37:33Z",
      "updated_at": "2020-12-08T05:37:33Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Remaining codefactor issues are by-design",
      "created_at": "2020-12-11T05:04:29Z",
      "updated_at": "2020-12-11T05:04:29Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "So\r\n```\r\nPS>\"$($PSStyle.Formatting.Error)custom error message\"`\r\n```\r\nwill output red colored string. \r\n\r\nIn time of evaluating the string we already know values of all constants - SupportsVirtualTerminal, isHost, Console.IsOutputRedirected. If so why do we need the filtering at all if we can return $null at the evaluating time if we do not need the ANSI value?",
      "created_at": "2020-12-11T16:36:34Z",
      "updated_at": "2020-12-11T16:36:34Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov `Error` is currently a special case due to the custom formatting that happens.  After this gets merged, I'll update the error formatting to use `$PSStyle.Formatting.Error`.",
      "created_at": "2020-12-11T17:50:12Z",
      "updated_at": "2020-12-11T17:50:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT I say that $PSStyle could not be a const and _be evaluated_ - as result we have no need to filter out escapes because $PSStyle would return $null if user turns off coloring or terminal does not support escapes and so on.",
      "created_at": "2020-12-11T18:00:57Z",
      "updated_at": "2020-12-11T18:01:22Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> In time of evaluating the string we already know values of all constants - SupportsVirtualTerminal, isHost, Console.IsOutputRedirected.\r\n\r\n@iSazonov The PowerShell engine doesn't know if the output/error is being reidrected. It cannot depedn on `Console.IsOutputRedirected` because it may be hosted in a Windows GUI applicatioin which doesn't have a console at all.\r\nThe information about _whether the output/error is redirected_ or _whether ANSI sequences should be stripped off because the process's output/error is redirected_ should be decided only by the host implementation.\r\n\r\nTake the host implementation of the PowerShell sub kernel (jupyter kernel) in .NET Interactive as an instance, it's a console application, and the process's output/error streams are always redirected to send to the frontend -- jupyter notebook, which is capable of handling ANSI sequences. So, in this case, even thought `Console.IsOutputRedirected` and `Console.IsErrorRedirected` return `true`, the ANSI sequences shouldn't be stripped off.\r\n\r\nTo summarize, the host implementation has the final call on whether ANSI sequences should be stripped off or not, and that's why I opened #14387.",
      "created_at": "2020-12-11T18:15:22Z",
      "updated_at": "2020-12-11T18:15:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> To summarize, the host implementation has the final call on whether ANSI sequences should be stripped off or not\r\n\r\nWhy can't PowerShell engine get this information from the host implementation?\r\n\r\n>  because it may be hosted in a Windows GUI applicatioin which doesn't have a console at all.\r\n\r\nSo PowerShell engine can get get this information from the host implementation?",
      "created_at": "2020-12-11T18:21:34Z",
      "updated_at": "2020-12-11T18:24:04Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I don't know how that would work and how well that would work if it works.\r\n- From a design point of view, I like to decouple engine and host instead of more coupling.\r\n- From an implementation point of view, a host may dynamically change how it want the ANSI sequences to be handled.",
      "created_at": "2020-12-11T18:27:44Z",
      "updated_at": "2020-12-11T18:27:44Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov I will merge this PR to make the cut of 7.2.0-preview.2 release build. Feel free to comment in https://github.com/PowerShell/PowerShell/issues/14387 about how you think this feature can be improved.",
      "created_at": "2020-12-11T18:32:22Z",
      "updated_at": "2020-12-11T18:32:22Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.2.0-preview.2` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0-preview.2)\n",
      "created_at": "2020-12-15T21:38:35Z",
      "updated_at": "2020-12-15T21:38:35Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "These changes don't seem to work in the Integrated Console: https://github.com/PowerShell/PowerShell/issues/14435",
      "created_at": "2020-12-16T06:00:45Z",
      "updated_at": "2020-12-16T06:00:45Z"
    }
  ],
  "created_at": "2020-10-07T21:43:19Z",
  "number": 13758,
  "state": "closed",
  "title": "Enable simpler ANSI formatting via `$PSStyle` and support suppressing ANSI output",
  "updated_at": "2020-12-16T06:00:45Z"
}