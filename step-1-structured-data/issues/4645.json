{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4645",
  "author": "mklement0",
  "body": "I'm making the following assumptions about how `Start-Transcript` is designed to work (can't tell from the documentation):\r\n\r\n* Whatever streams are neither captured nor redirected are transcribed, and preference variables with respect to which `Write-*` cmdlets should actually produce output are honored; another way of putting it: Whatever output displays in the console, across all streams, is also what should get transcribed.\r\n\r\nCurrently, `Start-Transcript` doesn't always work that way:\r\n\r\n* Even with `*>$null` applied to a script that uses `Start-Transcript`, which should keep _all_ streams out of the transcript, _errors_ (stream 2) and `Write-Host` output (stream 6) are still transcribed.\r\n\r\n   * You can _partially_ keep error output out of the transcript If you use `$ErrorActionPreference = 'SilentlyContinue'`: outside of a transcript that would silence _all_ errors (non-terminating, statement-terminating, script-terminating - albeit the latter two against documented behavior), but in a transcript _cmdlet-triggered_ statement-terminating errors are unexpectedly still transcribed.\r\n\r\n   * Errors that do get transcribed are transcribed *twice* by default.\r\n\r\n   * _Cmdlet-triggered_ statement-terminating errors are preceded by an _extra line_  repeating the error message, with a prefix such as `>>TerminatingError(<command>): <message>` \r\nIt is this line that shows in the transcript even with `$ErrorActionPreference = 'SilentlyContinue'` in effect.\r\n\r\n   * Unlike outside of a transcript, with `$ErrorActionPreference` at its default, `$Continue`:\r\n     * a _cmdlet-triggered_ statement-terminating error acts like a _script_-terminating one.\r\n     * a script-terminating error prints neither to the console nor records the error in the transcript.\r\n     * the transcript is _aborted_ in both cases, however.\r\n\r\n* ~~Even though `Write-Information` output (stream 6) is by default _not_ printed to the console `$InformationAction` is `'SilentlyContinue'` by default), it is still transcribed.~~ [_Update_: This appears to have been fixed, but I don't know where and when (the problem persists in _Windows PowerShell_)]\r\n\r\n\r\n\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nCreate script `t.ps1` with the following content:\r\n\r\n```powershell\r\n$null = Start-Transcript t.log\r\n\r\nwrite-warning 'warn'\r\nwrite-verbose 'verbose'\r\n\r\nwrite-information 'info'\r\nwrite-host 'host'\r\n\r\nwrite-output 'data'\r\n\r\n# Generate a non-terminating error\r\nWrite-Error 'error'\r\n\r\n# Generate an expression-based statement-terminating error.\r\n1/0\r\n\r\n# Generate a cmdlet-based statement-terminating error.\r\nGet-Item -NoSuchParam\r\n\r\n$null = Stop-Transcript\r\n```\r\n\r\nThen run the following commands, one after the other:\r\n\r\nA)\r\n```powershell\r\n./t.ps1\r\n```\r\n\r\nB)\r\n```powershell\r\n./t.ps1 *>$null\r\n```\r\n\r\nC) \r\n```powershell\r\n& { $ErrorActionPreference = 'SilentlyContinue'; ./t.ps1 }\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nInspect output file `t.log`:\r\n\r\nA)\r\nColoring aside, whatever printed to the console should appear in the transcript (sandwiched between a header and a footer).\r\n\r\nB)\r\nExcept for the header and footer, the transcript should be empty (all streams were suppressed).\r\n\r\nC)\r\nNo errors of any kind should be transcribed.\r\n\r\nActual behavior\r\n---------------\r\n\r\nA)\r\n\r\n* ~~`INFO: info` shows in the transcript, even though it doesn't show in the console (with `$InformationPreference` at its default value, `SilentlyContinue`).\r\nAs an aside: Non-suppressed `Write-Information` output in the _console_ has _no_ `INFO: ` prefix , but does in the _transcript_ (whereas `Write-Warning`, `Write-Verbose` and `Write-Debug` print a prefix in _both_ scenarios).~~\r\n\r\n[_Update_: This appears to have been fixed, but I don't know where and when (the problem persists in _Windows PowerShell_)]\r\n\r\n* All errors show _twice_ in the transcript.\r\n   * The _first_ instance of the cmdlet-triggered statement-terminating error is preceded by an extra line duplicating the regular error representation:  \r\n`>> TerminatingError(Get-Item): \"A parameter cannot be found that matches parameter name 'NoSuchParam'.\"`\r\n\r\nB)\r\n\r\n* `host` (`Write-Host` output) still shows in the transcript.\r\n\r\n* All errors still show in the transcript (now only _once_).\r\n\r\nC)\r\n\r\nWhile the non-terminating error and the expression-triggered error were successfully suppressed, the _cmdlet-triggered_ _terminating_ error still shows in the transcript, but only by the extra line:  \r\n`PS>TerminatingError(Get-Item): \"A parameter cannot be found that matches parameter name 'NoSuchParam'.\"`\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta.5 on macOS 10.12.6\r\nPowerShell Core v6.0.0-beta.5 on Ubuntu 16.04.3 LTS\r\nPowerShell Core v6.0.0-beta.5 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\nWindows PowerShell v5.1.15063.483 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "nowakca",
      "author_association": "NONE",
      "body": "I've found that if I get a 404 from an Invoke-WebRequest inside a Try/Catch handler (which catches the error and provides no output, squelching it), I don't see anything on screen (which is as it should be), but I do see a \"TerminatingError(Invoke-WebRequest)\" and response content in the Transcript (which should not be)",
      "created_at": "2018-10-27T18:32:36Z",
      "updated_at": "2018-10-27T18:32:36Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "OK this is a bit evil IMO.  Enabling transcription should not fundamentally change the behavior of the script.  I ran into this last Friday and took me a while to figure out this transcription bug was biting me.  Here's my simple repro on a Linux machine using GNU make.  There are two files (put in the same dir).  Here is my simplified `makefile`:\r\n```\r\n# make wants tabs insteads of spaces so when copying this, replace the four spaces before \r\n# the warning message with a single tab.\r\nfoo:\r\n    $(warning SOME WARNING TEXT)\r\n```\r\nAnd here is my `test.ps1` file - be sure to `chmod +x ./test.ps1` to make it executable:\r\n```\r\n#!/usr/bin/env pwsh\r\n\r\n$ErrorActionPreference = \"Stop\"\r\n$Transcribe = 0\r\n\r\nif ($Transcribe) { Start-Transcript test.log }\r\n\r\ntry {\r\n    make -f makefile foo\r\n    if ($LASTEXITCODE) { throw \"make failed with $LASTEXITCODE\" }\r\n\r\n    \"should get here - we do without transcription\"\r\n}\r\ncatch {\r\n    \"should not get here\"\r\n    throw $_\r\n}\r\nfinally {\r\n    if ($Transcribe) { Stop-Transcript }\r\n}\r\n```\r\nWith the above settings, I can execute this script and it works as I expect it to:\r\n```\r\nmakefile:4: SOME WARNING TEXT\r\nmake: 'foo' is up to date.\r\nshould get here - we do without transcription\r\n```\r\nNow set the `$Transcribe` variable to `1` and re-run the script.  Just enabling transcription causes the script to crash now (the error handling behavior has fundamentally changed):\r\n```\r\nTranscript started, output file is test.log\r\nmake: 'foo' is up to date.\r\nshould not get here\r\nTranscript stopped, output file is /home/hillr/pwsh-bug/test.log\r\n```\r\nBTW this issue does not crop up on Windows - adding to its \"evilness\".",
      "created_at": "2019-04-29T17:50:24Z",
      "updated_at": "2019-04-29T18:01:40Z"
    }
  ],
  "created_at": "2017-08-22T22:05:50Z",
  "number": 4645,
  "state": "open",
  "title": "Inconsistent Start-Transcript behavior with respect to the error and information streams",
  "updated_at": "2019-04-29T18:01:40Z"
}