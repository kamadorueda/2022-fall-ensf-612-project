{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9278",
  "author": "SteveL-MSFT",
  "body": "# Summary of the new feature/enhancement\r\n\r\nFor Snap and AppX packages of PSCore6, $PSHOME is effectively read-only.  Any configuration stored in $PSHOME needs to be in a different location.  On Windows 10, it would make sense to be in $env:SystemDrive\\ProgramData.\r\n\r\n`Register-PSSessionConfiguration` stores the config file in [$PSHOME\\SessionConfig](https://github.com/PowerShell/PowerShell/search?l=C%23&q=%22sessionconfig%22) folder.\r\n\r\n`powershell.config.json` for the system is stored in $PSHOME, this means that admins can't set system wide config and cmdlets like `Enable-ExperimentalFeature -Scope AllUsers` won't work.\r\n\r\n`Update-Help -Scope AllUsers` also won't work as it's stored in $PSHOME.\r\n\r\nWhen this is fixed, test changes relying on `Test-CanWriteToPsHome` should be reverted.",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Long time Windows exposes UAC virtualization for registry keys and file system. \r\nIf we could use it it would solve this problem.",
      "created_at": "2019-04-28T06:09:37Z",
      "updated_at": "2019-04-28T06:09:37Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov that would potentially work for Windows, but doesn't solve the same problem with Snaps.",
      "created_at": "2019-04-29T23:37:12Z",
      "updated_at": "2019-04-29T23:37:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I like the way for Windows. I think it is right way. \r\nI guess there is a solution in Snaps too - PowerShell is not single application with such behavior. My quick search https://forum.snapcraft.io/t/snap-layouts/7207 \"Creating new files and directories in read-only spaces\". So I believe Snaps has that we need.",
      "created_at": "2019-04-30T05:07:46Z",
      "updated_at": "2019-04-30T05:07:46Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "What parts of snap would we map?  Just because we can, doesn't mean we should.  We should not make any part of $PSHome writable on linux.",
      "created_at": "2019-05-06T03:37:09Z",
      "updated_at": "2019-05-06T03:37:09Z"
    },
    {
      "author": "bcdady",
      "author_association": "NONE",
      "body": "See also https://github.com/PowerShell/PowerShell-Snap/issues/32",
      "created_at": "2019-06-11T01:42:50Z",
      "updated_at": "2019-06-11T01:42:50Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Can we just use `/etc/` for this? Or does Snap \"classic\" et al not have a way to do this? ",
      "created_at": "2019-07-08T19:48:10Z",
      "updated_at": "2019-07-08T19:48:10Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@joeyaiello The problem is this should be done in PowerShell. `/etc` is where the file should be for all PowerShell installations.",
      "created_at": "2019-07-09T00:33:58Z",
      "updated_at": "2019-07-09T00:33:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "For reference #4080",
      "created_at": "2019-07-12T14:01:18Z",
      "updated_at": "2019-07-12T14:01:18Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Known locations that write into $PSHOME - In-progress\r\n\r\n| Item                                                      | Location|  CurrentUser Version exists| Resolution |\r\n|------------------------------------| ----------|--|-|\r\n|`Register-PSSessionConfiguration`|`$PSHOME\\SessionConfig` | ? | |\r\n|~~`Update-Help -scope currentuser`~~ | [~~$pshome\\powershell.config.json~~](https://github.com/PowerShell/PowerShell/issues/7452#issuecomment-440007064) | ~~Yes (buggy #7452)~~ | Fixed in 7.0.0 |\r\n|`Update-Help -scope AllUsers` | `$PSHome\\en-US` |  Yes |  |\r\n|`Enable-ExperimentalFeature -Scope AllUsers`| `$pshome\\powershell.config.json` | Yes | |\r\n|`Set-ExecutionPolicy -Scope LocalMachine`| `$pshome\\powershell.config.json` | Yes |  |\r\n",
      "created_at": "2019-11-04T20:27:50Z",
      "updated_at": "2020-03-06T00:35:10Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "## Proposal\r\n\r\n### Rational\r\n\r\nIt looks like the majority of the problem is writing to the configuration file.  We should move it under `/etc` for Linux and macOS, and `%programdata% for Windows.\r\n\r\nWe can make similar changes for `$PSHome\\SessionConfig` and `$PSHome\\en-US` (and related folders) later.\r\n\r\n### Details\r\n\r\n#### Security\r\n\r\nThese folders should be secured similarly to the currently location the file is located at when the product is installed via DEB, RPM, or MSI.\r\n\r\nThe configuration file is system wide configuration and only system administrators should be able to modify it.  This also eliminates pwsh creating it on first launch.\r\n\r\n#### Linux and macOS\r\n\r\nWe would move the system configuration to `/etc/powershell/powershell.config.json`\r\nWe would use the folder so that any addition items will be group together.\r\n\r\nPackages would have to be updated to create this and the zip instruction would have to be update or a script created.\r\n\r\n#### Windows\r\n\r\nWe would move the system configuration to `%programdata%\\Microsoft\\PowerShell\\powershell.config.json`\r\n\r\nMSI could be update to create the file.\r\nMSIX - @stevel-msft?\r\nzip - instructions would have to be updated\r\n\r\n### Issues\r\n\r\n1. What do you do on upgrade?  Currently we overwrite the file, but this is not the correct behavior.\r\n2. Not sure how to set the default config after MSIX install.\r\n   * Possible solution is to include a script that admins can run after install.  This would simplify zip and tar.gz install as well.\r\n",
      "created_at": "2019-11-04T21:41:37Z",
      "updated_at": "2019-11-04T21:41:37Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "For PowerShell.config.json, it might be better to have cmdlet(s) to manage that file with `-Scope AllUsers/CurrentUser`.  This would work cross-platform.",
      "created_at": "2019-11-04T21:57:37Z",
      "updated_at": "2019-11-04T21:57:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Cmdlets is an option. The presence of configs implies supporting direct editing.",
      "created_at": "2019-11-05T04:18:32Z",
      "updated_at": "2019-11-05T04:18:32Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT  I don't understand your point at all.  Most of those already exist.  The problem is that the AllUser file needs to be writable, at least by admins.  Otherwise there is no point in this issue, we just go fix the bugs in the individual cmdlets, and say the system wide configuration doesn't exist when the file system is read only.\r\n\r\nI updated the table, in https://github.com/PowerShell/PowerShell/issues/9278#issuecomment-549532222 to show where the Current User Version does not exist, showing that this is not really the problem.\r\n\r\nAlthough #7452, probably should be re-opened and fixed",
      "created_at": "2019-11-05T18:42:19Z",
      "updated_at": "2019-11-05T18:52:23Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@TravisEz13 system wide config can exist, but needs to be under ProgramData (on Windows) and requires elevation to set.  My point of the cmdlets isn't for setting individual settings, but something like `Get-PowerShellConfig` which returns an object representing the config and `Set-PowerShellConfig` to save it, but with `-Scope` parameter so the user doesn't need to know where in the filesystem it goes.",
      "created_at": "2019-11-05T18:55:53Z",
      "updated_at": "2019-11-05T18:55:53Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> We would move the system configuration to /etc/powershell/powershell.config.json\r\nWe would move the system configuration to %programdata%\\Microsoft\\PowerShell\\powershell.config.json\r\n\r\nThis means different versions of `pwsh` will share the same configuration file, which is problematic. Even with sub-folder named after the version, it means different instances of the same version will share the same configuration file, which is still a breaking change from today's behavior.",
      "created_at": "2019-11-06T00:26:24Z",
      "updated_at": "2019-11-06T00:26:24Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT I still don't see how this addresses this issue at all.  I think you have a fundamental mis-understanding of the problem.  That might be a useful new feature, but it doesn't help solve this problem.",
      "created_at": "2019-11-06T00:36:17Z",
      "updated_at": "2019-11-06T00:36:17Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@daxian-dbw System wide configuration should be actually system wide, this is a reason to move it into a common folder.  I can see reason to have different files for preview and stable.",
      "created_at": "2019-11-06T00:37:18Z",
      "updated_at": "2019-11-06T00:37:18Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, we agree not to take any changes for RC.  We should relnote the limitations and address post 7.0.  The proposal moving the system level config to /etc and %programdata% makes sense.",
      "created_at": "2019-12-04T23:34:27Z",
      "updated_at": "2019-12-04T23:34:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "In last days I make some experiments with the config and new Core Json API (to remove dependency from Newtonsoft Json.NET) and discover some inconsistencies in the config file format and serialization/deserialization. I hope we fix this too in 7.1.",
      "created_at": "2019-12-05T03:27:12Z",
      "updated_at": "2019-12-05T03:27:12Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "I think we need to make this a priority for 7.1, but particularly implementing the `/etc/powershell/powershell.config.json` . The scenario is essentially that, as on Windows with the GP store, Unix admins need to be confident that Computer-wide Policy is applied to all PowerShells on a box, irrespective of whether they were bin-dropped as portable copies or installed to XDG-compliant locations via a package.\r\n\r\nI can follow up with offline justification if needed",
      "created_at": "2020-02-14T19:20:03Z",
      "updated_at": "2020-02-14T19:20:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Now .Net Core 5.0 has new enhancements in JSON implementation and this raises a question - will we move on .Net Core 5.0 in 7.1 timeframe and benefit from new .Net Core enhancements and improvements? \r\nPowerShell Core 7.0 LTS is based on .Net Core 3.1 LTS - release in 2020 year\r\nPowerShell Core 7.1 GA is based on .Net Core 5.0 GA - release in 2021 year\r\nPowerShell Core 8.0 LTS is based on .Net Core 6.0 LTS - release in 2022 year\r\n\r\n",
      "created_at": "2020-02-15T08:33:59Z",
      "updated_at": "2020-02-15T08:33:59Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov the plan is to move to .NET 5 for 7.1 as soon as they have a public preview.",
      "created_at": "2020-02-19T20:24:46Z",
      "updated_at": "2020-02-19T20:24:46Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT - would you release a 7.1 on a pre-release version of .NET core 5?\r\n",
      "created_at": "2020-02-19T22:15:32Z",
      "updated_at": "2020-02-19T22:15:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@doctordns Release 7.1 will be on release .Net Core 5.",
      "created_at": "2020-02-20T04:20:59Z",
      "updated_at": "2020-02-20T17:09:27Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "https://github.com/PowerShell/PowerShell/issues/9278#issuecomment-487822446\r\nThe suggested workaround here does not work with snaps in classic containment (full access to the host)\r\n\r\nhttps://forum.snapcraft.io/t/alternative-to-layout-for-classic-confinement/15376/2",
      "created_at": "2020-03-06T00:30:23Z",
      "updated_at": "2020-03-06T00:30:55Z"
    },
    {
      "author": "BouwenMA",
      "author_association": "NONE",
      "body": "Not seeing much reference to also being unable to create a global profile.ps1 due to $PSHome being unwritable for Windows.  I found issue #[12519](https://github.com/PowerShell/PowerShell/issues/12519) \"Unable to create profile.ps1\" that was opened about this, and later closed referencing this issue, but never had feedback noted here...  So adding that here now myself as I've also come across the same problems as well..  \r\n\r\nEdit: Also noting that if the limitation will continue, the documentation does not reflect that:\r\n- https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-7.2\r\n- https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-7.3",
      "created_at": "2022-05-25T22:32:51Z",
      "updated_at": "2022-05-25T22:36:53Z"
    }
  ],
  "created_at": "2019-04-03T02:42:07Z",
  "number": 9278,
  "state": "open",
  "title": "Some cmdlets and config require writing to $PSHOME\\SessionConfig folder",
  "updated_at": "2022-05-25T22:36:53Z"
}