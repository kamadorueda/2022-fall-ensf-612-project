{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3610",
  "author": "SteveL-MSFT",
  "body": "To address https://github.com/PowerShell/PowerShell/issues/929 we removed aliases that collided with native tools.  However, some customers may want the legacy Windows PowerShell aliases because they are consistent with what they are used to.  Proposal that has been discussed is to have a module that only contains aliases that users can import to get back that previous experience.",
  "closed_at": "2018-01-25T02:08:30Z",
  "comments": [
    {
      "author": "dchristian3188",
      "author_association": "CONTRIBUTOR",
      "body": "Where should this new module go? ",
      "created_at": "2017-04-21T02:03:31Z",
      "updated_at": "2017-04-21T02:03:31Z"
    },
    {
      "author": "Gaelan",
      "author_association": "NONE",
      "body": "It's not about \"what we're used to.\" I'm a Mac user that has barely used PowerShell at all on windows. If I switched to powershell, it would be for the object-oriented model. My expectation is that `ls` gives me a stream of objects, because that is powershell's killer feature. Without that, PS is nothing. ",
      "created_at": "2017-04-21T02:47:17Z",
      "updated_at": "2017-04-21T02:47:17Z"
    },
    {
      "author": "bgshacklett",
      "author_association": "NONE",
      "body": "@Gaelan for your use case, I would suggest using `Get-ChildItem` or `gci` as the short form, meant for interactive usage. I understand that it can be difficult to retrain muscle memory (I'm having trouble myself), but being explicit with what your asking the shell to give you is almost always going to give you a better experience than relying on aliases which were not originally intended for your platform. The decision to remove these aliases has not removed any functionality in PowerShell, but only changed the way the commands need to be invoked.\r\n\r\n`ls` certainly falls into a grey area, as it's a built-in in both PowerShell and Bash, but in the case of commands such as `curl`, `wget`, etc. which mask functionality that already exists on the system, I don't think there was really any question of what the \"correct\" behavior is, only the least disruptive. There was no solution that was going to be ideal for everyone. At least with this solution you will have an easy option to re-enable the aliases you wish to have in your environment.",
      "created_at": "2017-04-21T04:46:35Z",
      "updated_at": "2017-04-21T04:46:35Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@dchristian3188 If your question was about a module place I believe it is https://github.com/PowerShell/PowerShell/tree/master/src/Modules/Shared",
      "created_at": "2017-04-21T08:28:46Z",
      "updated_at": "2017-04-21T08:28:46Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Putting them in a module is only one proposal. The point is that there needs to be an interactive (and possibly also parse-time) mechanism for turning GNU/POSIX colliding aliases on and off. (Side note: it's not just *nix users who may want to turn them on, Windows users may also want to turn these aliases *off*.)",
      "created_at": "2017-04-21T18:27:03Z",
      "updated_at": "2017-04-21T18:27:03Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Also, current thinking is that this might be blocked on PowerShell/PowerShell-RFC#48, which is why I'm removing `up-for-grabs` and personally prioritizing driving that RFC to completion (it's blocking other usability issues as well).  ",
      "created_at": "2017-04-21T18:28:24Z",
      "updated_at": "2017-04-21T18:28:24Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@chuanjiao10 for cmdlet name collision, we already support that today:\r\n\r\n```powershell\r\nMicrosoft.PowerShell.Management\\Get-ChildItem\r\n```",
      "created_at": "2017-04-21T20:13:50Z",
      "updated_at": "2017-04-21T20:13:50Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@chuanjiao10: That might be the behavior you want, but you received far too much feedback on day one that people want things like `ls -la` to just work out of the box. (Side note: the full path to the binary will always work, no matter what path we take here.)\r\n\r\nThe fact that you have a preference is why we're proposing that there be an opt-in mechanism for exactly the behavior you're describing. \r\n\r\nSound reasonable? \r\n\r\nAlso, the reason your example is failing is because we need to implement globbing with #954 ",
      "created_at": "2017-04-24T16:41:23Z",
      "updated_at": "2017-04-24T16:41:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Is here a way to explicitly start external (OS) command?\r\nThis is start cmdlet:\r\n```powershell\r\n&\"where\"\r\n```\r\nCan we do somethink like:\r\n```powershell\r\n$nativecommand:where\r\n```\r\nIt can help with globbing and native pipes.",
      "created_at": "2017-04-26T07:08:49Z",
      "updated_at": "2017-04-26T07:27:42Z"
    },
    {
      "author": "bielawb",
      "author_association": "NONE",
      "body": "@iSazonov - I believe that can be done with Get-Command:\r\n\r\n```powershell\r\n$where = Get-Command -Name where -CommandType Application\r\n& $where\r\n```\r\n",
      "created_at": "2017-05-10T12:18:49Z",
      "updated_at": "2017-05-10T12:18:49Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@chuanjiao10 the globbing issue you have above should be fixed in beta.1",
      "created_at": "2017-05-10T13:45:18Z",
      "updated_at": "2017-05-10T13:45:18Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Closing this as the work will be done in https://github.com/PowerShell/WindowsPowerShellCompatibilityPack",
      "created_at": "2018-01-25T02:08:30Z",
      "updated_at": "2018-01-25T02:08:30Z"
    }
  ],
  "created_at": "2017-04-20T21:08:34Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets"
  ],
  "number": 3610,
  "state": "closed",
  "title": "Need a way to bring back legacy Windows aliases for consistent experience",
  "updated_at": "2018-01-25T02:08:30Z"
}