{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6157",
  "author": "rkeithhill",
  "body": "Sometimes when you have a link that is a bit.ly/t.co, you just want to see the actual URL it refers to.  With IWR in Windows PowerShell 5.1, I can do this and it works as I expect (sort of):\r\n\r\n```\r\n2:9ms> $res = iwr https://t.co/4OAcNMg9kv -MaximumRedirection 0\r\niwr : The maximum redirection count has been exceeded. To increase the number of redirections allowed, supply a higher\r\nvalue to the -MaximumRedirection parameter.\r\nAt line:1 char:8\r\n+ $res = iwr https://t.co/4OAcNMg9kv -MaximumRedirection 0\r\n+        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: (System.Net.HttpWebRequest:HttpWebRequest) [Invoke-WebRequest], Invali\r\n   dOperationException\r\n    + FullyQualifiedErrorId : MaximumRedirectExceeded,Microsoft.PowerShell.Commands.InvokeWebRequestCommand\r\n\r\n3:5ms> $res\r\n\r\nStatusCode        : 301\r\nStatusDescription : Moved Permanently\r\nContent           : {}\r\nRawContent        : HTTP/1.1 301 Moved Permanently\r\n                    strict-transport-security: max-age=0\r\n                    vary: Origin\r\n                    x-connection-hash: 94474df9124c65999989ad64a0f38026\r\n                    x-response-time: 17\r\n                    Content-Length: 0\r\n                    Cache-Control: private,...\r\nHeaders           : {[strict-transport-security, max-age=0], [vary, Origin], [x-connection-hash,\r\n                    94474df9124c65999989ad64a0f38026], [x-response-time, 17]...}\r\nRawContentLength  : 0\r\n\r\n5:9ms> $res.Headers\r\n\r\nKey                       Value\r\n---                       -----\r\nstrict-transport-security max-age=0\r\nvary                      Origin\r\nx-connection-hash         94474df9124c65999989ad64a0f38026\r\nx-response-time           17\r\nContent-Length            0\r\nCache-Control             private,max-age=300\r\nDate                      Wed, 14 Feb 2018 19:13:29 GMT\r\nExpires                   Wed, 14 Feb 2018 19:18:29 GMT\r\nLocation                  https://github.com/PowerShell/PowerShell/releases/download/v6.0.1/powershell-6.0.1-linux-a...\r\nSet-Cookie                muc=d3b55e8c-d0af-472a-8000-bc59b67e290f; Expires=Fri, 14 Feb 2020 19:13:29 UTC; Domain=t.co\r\nServer                    tsa_a\r\n```\r\nAnd the Location header gives me the final destination.  The only thing I don't like about this experience is the error I get for the 301.  I'm not sure I buy that redirection status codes represent errors.\r\n\r\nAnyway, this same scenario does not work on PS Core 6.0.0:\r\n\r\n```\r\n74:114ms> $res = iwr https://t.co/4OAcNMg9kv -MaximumRedirection 0\r\niwr : Response status code does not indicate success: 301 (Moved Permanently).\r\nAt line:1 char:8\r\n+ $res = iwr https://t.co/4OAcNMg9kv -MaximumRedirection 0\r\n+        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidOperation: (Method: GET, Re...rShell/6.0.0\r\n}:HttpRequestMessage) [Invoke-WebRequest], HttpResponseException\r\n+ FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand\r\n\r\n[user/hillr/borrow-update-to-new-api] C:\\Git\\BitBucket\\FLO\r\n75:119ms> $res\r\n\r\n\r\nStatusCode        : 200\r\nStatusDescription : OK\r\nContent           : {31, 139, 8, 0...}\r\nRawContent        : HTTP/1.1 200 OK\r\n                    Date: Wed, 14 Feb 2018 19:04:42 GMT\r\n                    Accept-Ranges: bytes\r\n                    ETag: \"62af342f4264243bca3173c241d19f21\"\r\n                    Server: AmazonS3\r\n                    x-amz-id-2: PjFeSMrUze+kswdPjRLgY22ISsjZl88k1HKFvKGRQ16UuI0JMG2T...\r\nHeaders           : {[Date, System.String[]], [Accept-Ranges, System.String[]], [ETag, System.String[]], [Server,\r\n                    System.String[]]...}\r\nRawContentLength  : 25675274\r\nRelationLink      : {}\r\n\r\n\r\n\r\n[user/hillr/borrow-update-to-new-api] C:\\Git\\BitBucket\\FLO\r\n76:113ms> $res.Headers\r\n\r\nKey                 Value\r\n---                 -----\r\nDate                {Wed, 14 Feb 2018 19:04:42 GMT}\r\nAccept-Ranges       {bytes}\r\nETag                {\"62af342f4264243bca3173c241d19f21\"}\r\nServer              {AmazonS3}\r\nx-amz-id-2          {PjFeSMrUze+kswdPjRLgY22ISsjZl88k1HKFvKGRQ16UuI0JMG2TlvEeS2rjpoH96CDukGNZgRc=}\r\nx-amz-request-id    {06FB9DA9874CEF99}\r\nContent-Length      {25675274}\r\nContent-Type        {application/octet-stream}\r\nLast-Modified       {Thu, 25 Jan 2018 19:21:10 GMT}\r\nContent-Disposition {attachment; filename=powershell-6.0.1-linux-arm32.tar.gz}\r\n74:114ms> $res = iwr https://t.co/4OAcNMg9kv -MaximumRedirection 0\r\niwr : Response status code does not indicate success: 301 (Moved Permanently).\r\nAt line:1 char:8\r\n+ $res = iwr https://t.co/4OAcNMg9kv -MaximumRedirection 0\r\n+        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidOperation: (Method: GET, Re...rShell/6.0.0\r\n}:HttpRequestMessage) [Invoke-WebRequest], HttpResponseException\r\n+ FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand\r\n\r\n[user/hillr/borrow-update-to-new-api] C:\\Git\\BitBucket\\FLO\r\n75:119ms> $res\r\n\r\n\r\nStatusCode        : 200\r\nStatusDescription : OK\r\nContent           : {31, 139, 8, 0...}\r\nRawContent        : HTTP/1.1 200 OK\r\n                    Date: Wed, 14 Feb 2018 19:04:42 GMT\r\n                    Accept-Ranges: bytes\r\n                    ETag: \"62af342f4264243bca3173c241d19f21\"\r\n                    Server: AmazonS3\r\n                    x-amz-id-2: PjFeSMrUze+kswdPjRLgY22ISsjZl88k1HKFvKGRQ16UuI0JMG2T...\r\nHeaders           : {[Date, System.String[]], [Accept-Ranges, System.String[]], [ETag, System.String[]], [Server,\r\n                    System.String[]]...}\r\nRawContentLength  : 25675274\r\nRelationLink      : {}\r\n\r\n\r\n\r\n[user/hillr/borrow-update-to-new-api] C:\\Git\\BitBucket\\FLO\r\n76:113ms> $res.Headers\r\n\r\nKey                 Value\r\n---                 -----\r\nDate                {Wed, 14 Feb 2018 19:04:42 GMT}\r\nAccept-Ranges       {bytes}\r\nETag                {\"62af342f4264243bca3173c241d19f21\"}\r\nServer              {AmazonS3}\r\nx-amz-id-2          {PjFeSMrUze+kswdPjRLgY22ISsjZl88k1HKFvKGRQ16UuI0JMG2TlvEeS2rjpoH96CDukGNZgRc=}\r\nx-amz-request-id    {06FB9DA9874CEF99}\r\nContent-Length      {25675274}\r\nContent-Type        {application/octet-stream}\r\nLast-Modified       {Thu, 25 Jan 2018 19:21:10 GMT}\r\nContent-Disposition {attachment; filename=powershell-6.0.1-linux-arm32.tar.gz}\r\n```\r\nNote that even though I specified max redirect of 0 - it still redirected so I don't get the location info I wanted and I have to wait while it downloads the file in order to find this out.\r\n\r\nBTW curl has a pretty elegant way of handling this scenario:\r\n```\r\n$ curl -v https://t.co/4OAcNMg9kv\r\n*   Trying 199.59.150.44...\r\n* Connected to t.co (199.59.150.44) port 443 (#0)\r\n* found 148 certificates in /etc/ssl/certs/ca-certificates.crt\r\n* found 592 certificates in /etc/ssl/certs\r\n* ALPN, offering http/1.1\r\n* SSL connection using TLS1.2 / ECDHE_RSA_AES_128_GCM_SHA256\r\n*        server certificate verification OK\r\n*        server certificate status verification SKIPPED\r\n*        common name: t.co (matched)\r\n*        server certificate expiration date OK\r\n*        server certificate activation date OK\r\n*        certificate public key: RSA\r\n*        certificate version: #3\r\n*        subject:\r\n*        start date: Thu, 15 Dec 2016 00:00:00 GMT\r\n*        expire date: Thu, 20 Dec 2018 12:00:00 GMT\r\n*        issuer: C=US,O=DigiCert Inc,OU=www.digicert.com,CN=DigiCert SHA2 Extended Validation Server CA\r\n*        compression: NULL\r\n* ALPN, server accepted to use http/1.1\r\n> GET /4OAcNMg9kv HTTP/1.1\r\n> Host: t.co\r\n> User-Agent: curl/7.47.0\r\n> Accept: */*\r\n>\r\n< HTTP/1.1 301 Moved Permanently\r\n< cache-control: private,max-age=300\r\n< content-length: 0\r\n< date: Wed, 14 Feb 2018 19:21:18 GMT\r\n< expires: Wed, 14 Feb 2018 19:26:18 GMT\r\n< location: https://github.com/PowerShell/PowerShell/releases/download/v6.0.1/powershell-6.0.1-linux-arm32.tar.gz\r\n< server: tsa_a\r\n< set-cookie: muc=cc75759f-1809-439f-9055-708995ce87a7; Expires=Fri, 14 Feb 2020 19:21:18 UTC; Domain=t.co\r\n< strict-transport-security: max-age=0\r\n< vary: Origin\r\n< x-connection-hash: f78970e680cc89a5598d292530b213cf\r\n< x-response-time: 6\r\n<\r\n* Connection #0 to host t.co left intact\r\n```",
  "closed_at": "2018-04-17T14:03:44Z",
  "comments": [
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "This has come up a few times. `HttpClient` treats 300 level responses as an unsuccessful response. The web cmdlets interpret that as a failure and produces a terminating error. It's not that `MaximumRedirection 0` is ignored, it's that it is producing an error and your `$res` is stale with the previous succesful `$res = irw ...` call. Toe verify, please run `$res = $null` before your `$res = irw ...` call\r\n\r\n```powershell\r\n$res = $null\r\n$res = Invoke-WebRequest -uri 'https://t.co/4OAcNMg9kv' -MaximumRedirection 0\r\n$null -eq $res\r\n```\r\n\r\nShould be `True`.\r\n\r\n\r\nYou can get the location like this:\r\n\r\n```powershell\r\nInvoke-WebRequest -uri 'https://t.co/4OAcNMg9kv' -MaximumRedirection 0 -ErrorVariable Err\r\n$err[0].InnerException.Response.Headers.Location\r\n```\r\n\r\nor\r\n\r\n```powershell\r\nTry {\r\n    Invoke-WebRequest -uri 'https://t.co/4OAcNMg9kv' -MaximumRedirection 0\r\n} catch {\r\n    $_.Exception.Response.Headers.Location\r\n}\r\n```\r\n\r\nIn previous discussions, I leaned on this actually being a correction of bad behavior, If I tell the command I want it to not redirect by supplying `-MaximumRedirection 0`, then I expect it to error if it tries to redirect, The behavior in 5.1 is odd to me...  it displays an error but still populates the variable with a result. To me, this is a terminating error and the behavior in 6.0.0 is correct.",
      "created_at": "2018-02-14T22:06:29Z",
      "updated_at": "2018-02-14T22:06:29Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "It's nice to have a workaround but really, this is a bit of spew don't you think?\r\n```posh\r\nInvoke-WebRequest -uri 'https://t.co/4OAcNMg9kv' -MaximumRedirection 0 -ErrorVariable Err\r\n$err[0].InnerException.Response.Headers.Location\r\n```\r\nBy specifying `-MaximumRedirection 0` in this scenario, I'm indicating that I **want** the 301 redirect response (headers and content).  That's not that uncommon of a thing to do especially when you're trying to resolve the target of bit.ly style URL.  FWIW I much prefer the PowerShell 5.1 behavior in this case.  At the very least, there should be a way to accomplish this in PS Core without having to root around in exception info.  That just not intuitive at all.  Could we special case the `-MaximumRedirection 0` scenario - catch the HttpClient exception and if a 3xx status, not report as an error?  Or maybe we should have another parameter??  What I'm after is something like `curl -v <url>` provides.  Our verbose output is, well, lacking.  Maybe we should have a `-Trace` switch that writes out at least request/response header info?",
      "created_at": "2018-02-14T23:03:09Z",
      "updated_at": "2018-02-14T23:03:09Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Yea, This is a difference of opinion. I have times where I don't want to redirect.. and in those times I'm specifying `-MaximumRedirection 0`. In 5.1 this behavior was bad...\r\n\r\n```powershell\r\nTry { \r\n    Invoke-WebRequest -uri 'https://t.co/4OAcNMg9kv' -MaximumRedirection 0\r\n} catch {\r\n    'Caught'\r\n}\r\n```\r\n\r\ndoesn't catch, spits out both the response and an error.\r\n\r\n```powershell\r\nTry { \r\n    Invoke-WebRequest -uri 'https://t.co/4OAcNMg9kv' -MaximumRedirection 0 -ErrorAction Stop\r\n} catch {\r\n    'Caught'\r\n}\r\n```\r\n\r\nJust spits out the response... what?\r\n\r\nIn 6.0.0 it at least makes sense now. it's a terminating error so it catches. \r\n\r\n> At the very least, there should be a way to accomplish this in PS Core without having to root around in exception info.\r\n\r\nI'd have to dig around for the other issue on this, but on option would be to add an option to treat all responses as successful. There are times when you want to test a 404 page, for example, and doing that currently is a serious pain. Especially when that 404 is a JSON object. That, or allow specifying a collection of response codes to be considered successful... something like `-SuccessStatusCodes 200, 301` that way a 404 would still be a terminating error, but 200 and 301 would be successful and return the response object.\r\n\r\nI don't think removing the terminating error nature as it exists in core is the right direction. `-MaximumRedirection 0` and a single redirect should be an error and nothing more by default, IMO.\r\n\r\n>  What I'm after is something like curl -v <url>\r\n\r\nIt's been suggested. Some of that output is possible, some if it is not (for example, we cannot get the SSL information). The general consensus is that the verbose output needs work. Implementing some of that is trivial.. and some of it is not. There are several ways in which we make the HTTP calls and in some of those scenarios, we don't even have access to the intermediary headers (for example, hop 2 of 3). To implement it we would have to step back from the default behavior of HttpClient and not allow it to redirect at all and handle all the redirects manually ourselves (which introduces some overhead). This all also gets complicated by some of the other features. Automatic retries, for example. \r\n\r\nI don't have a good solution to all of this. I agree the verbosity needs work, but improving it will likely introduce bugs as we will need to reinvent the wheel and mimic much of the default behavior if HttpClient. This is already causes issues when we introduced the removal of authorization headers on redirect. ",
      "created_at": "2018-02-15T01:04:52Z",
      "updated_at": "2018-02-15T01:04:52Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "`-SuccessStatusCodes 200, 301` or something to that effect sounds reasonable to me.  RE improved verbose output - I'll try to be patient.  :-)",
      "created_at": "2018-02-15T01:13:34Z",
      "updated_at": "2018-02-15T01:14:22Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Closing as is duplicate of #4534 ",
      "created_at": "2018-04-17T14:03:44Z",
      "updated_at": "2018-04-17T14:03:44Z"
    }
  ],
  "created_at": "2018-02-14T19:22:03Z",
  "labels": [
    "Issue-Discussion",
    "WG-Cmdlets-Utility"
  ],
  "number": 6157,
  "state": "closed",
  "title": "Invoke-WebRequest is ignoring -MaximumRedirection 0",
  "updated_at": "2018-04-17T14:03:44Z"
}