{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2631",
  "author": "wjk",
  "body": "I noticed that there is a copy of `libmi` in the OS X build of PowerShell (both one built by hand and the official alpha-11 download), yet it is an ELF file and not a Mac dynamic library. Since Macs don\u2019t know how to load ELF files, this will inevitably cause problems later, once functionality that references it is invoked. I notice that this DLL is likely a build artifact of the [Microsoft/omi](https://github.com/Microsoft/omi) project; is this the case?\r\n\r\nI also noticed that the `Microsoft.Management.Infrastructure` DLL that calls into `libmi` is, as far as I can tell, closed-source. If Microsoft/omi is used to produce the native component of WMI on non-Windows platforms, is there any any change that this DLL could be (rewritten and) open-sourced?\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-alpha\r\nPSEdition                      Core\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   3.0.0.0\r\nGitCommitId                    v6.0.0-alpha.11\r\nCLRVersion\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n",
  "closed_at": "2017-03-16T18:55:45Z",
  "comments": [
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Hi @wjk \n\nYou right, `libmi.so` is build from https://github.com/Microsoft/omi for Linux and repackaged in nuget package. Currently, we don't distinguish macOS from Linux in our build process (same build files), so it's ended up in the macOS package as well.\nThe only code-path that currently uses it is DSC configuration MOF compilation, which works on Linux, but not yet on macOS.\n\nOMI is currently at the early development stage, and supports some, but not all APIs provided by wmi (windows closed-source version).\n\nOne of the options that we are considering is to switch PowerShell core edition to https://github.com/Microsoft/omi on Windows as well. To do it, omi needs to become more mature.\n",
      "created_at": "2016-11-07T18:53:32Z",
      "updated_at": "2016-11-07T18:53:32Z"
    },
    {
      "author": "HemantMahawar",
      "author_association": "CONTRIBUTOR",
      "body": "Need to close on this by PSCore beta.",
      "created_at": "2017-02-21T22:41:02Z",
      "updated_at": "2017-02-21T22:41:02Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Most of what @vors has said is true, but I should clarify on a couple points: \r\n\r\n* OMI is actually a mature, fully functioning product (they're at 1.1) intended to serve as a functional replacement for WMI on *nix platforms (they support a bunch of flavors of Linux, BSD, and Unix). \r\n* I believe we actually need `libmi.so` for some remoting constructs (among other things...hopefully @paulcallen can add some context)\r\n* The thing in the \"early stages of development\" is actually [MMI](https://github.com/powershell/mmi), which is also what we use for local DSC Configuration/MOF compilation with PowerShell on Linux. MMI is a *managed* (read: C#) interface for MI that's sometimes referred to as MI.NET. You can look at the official Windows docs for it [here](https://msdn.microsoft.com/en-us/library/dn313202(v=vs.85).aspx). \r\n* Finishing MMI is required for CDXML/CIM-based cmdlets on non-Windows platforms. As @HemantMahawar says, that's not something we're closed on supporting right now. It makes sense to have from a platform-completion standpoint, but if the same underlying CIM classes aren't available on both Windows/Linux, it's kind of useless in practice. ",
      "created_at": "2017-02-22T01:27:18Z",
      "updated_at": "2017-02-22T01:27:18Z"
    },
    {
      "author": "paulcallen",
      "author_association": "MEMBER",
      "body": "The latest versions of powershell on OSX packages has libmi.dylib, along with libpsrpclient.dylib. Both are needed for powershell remoting from OSX to Windows.\r\nMMI on OSX will depend on OMI's libmi.dylib, and in fact it does partially today, MMI is just not fully implemented with Windows parity.  \r\nlibmi.dylib does not have quite the same parity with Windows mi.dll, but it does support most of the CIM operations that are there on Windows. It supports WSMan for remoting and a local binary protocol for CIM operations. We are extending authentication support to spnego and Kerberos. It does not support CIM Indications, and powershell extensions to CIM over WSMAN as they are not implemented.\r\nOMI server has been used on Linux/Unix for some time now, although the client is relatively new regarding the WSMan support.",
      "created_at": "2017-02-22T01:51:08Z",
      "updated_at": "2017-02-22T01:51:08Z"
    }
  ],
  "created_at": "2016-11-05T02:41:31Z",
  "labels": [
    "Issue-Question",
    "Area-Maintainers-Build",
    "Resolution-Answered"
  ],
  "number": 2631,
  "state": "closed",
  "title": "libmi on OS X?",
  "updated_at": "2017-03-16T18:57:07Z"
}