{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7334",
  "author": "SteveGilham",
  "body": "This assembly provides the primary API for customization via compiled cmdlets; in the original Windows PowerShell, this was acknowledged by keeping the assembly version at 1.0.0.0 through several releases (adhering to the Open/Closed principle), so that cmdlets written to that API could continue to be used without being bound to that version.\r\n\r\nI discovered this by having recently upgraded from 6.0.2 to 6.0.3 and attempting to import a module built against 6.0.2, which promptly failed with the assembly version mismatch for this assembly.  Assembly versioning, alas, does not understand the concept of semantic versioning, and considers any change breaking, so should only be stepped at major breaking versions.\r\n\r\nWith the situation we are in at the moment, having the expected stable 6.0.0.0 version is not possible, but a stable 6.#.#.# version should be chosen and stuck with until it is time to move to 7.0.0.0 instead.\r\n\r\nMeanwhile, I'm having to downgrade back to 6.0.2\r\n",
  "closed_at": "2019-09-28T19:34:24Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@adityapatwardhan @daxian-dbw What is recommended practice? Compile a  custom module against SMA _>=6.0.*_ / `>=6.*`? ",
      "created_at": "2018-07-23T05:32:03Z",
      "updated_at": "2018-07-23T05:32:03Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@SteveGilham I tried to repro the issue but couldn't. Can you please provide repro steps for the reported issue?\r\n\r\nIn my attempt, I built a simple assembly targeting the `System.Management.Automation 6.0.2` Nuget package:\r\n\r\n#### templib.csproj\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Management.Automation\" Version=\"6.0.2\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n#### Class1.cs\r\n\r\n```c#\r\nusing System;\r\nusing System.Management.Automation;\r\n\r\nnamespace templib\r\n{\r\n    [Cmdlet(\"Test\", \"MyCommand\")]\r\n    public class MyCommand : PSCmdlet\r\n    {\r\n        [Parameter(Mandatory = true)]\r\n        public string Name { get; set; }\r\n\r\n        protected override void ProcessRecord()\r\n        {\r\n            WriteObject($\"Hello {Name}\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n#### build `templib.dll`\r\n```none\r\n[E:\\arena\\dotnetApp\\test\\templib]\r\nPS:119> dotnet build\r\nMicrosoft (R) Build Engine version 15.7.177.53362 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 49 ms for E:\\arena\\dotnetApp\\test\\templib\\templib.csproj.\r\n  templib -> E:\\arena\\dotnetApp\\test\\templib\\bin\\Debug\\netcoreapp2.0\\templib.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:02.53\r\n```\r\n\r\nAs shown in `ILDasm`, the generated `templib.dll` references `System.Management.Automation 6.0.2.0`:\r\n![image](https://user-images.githubusercontent.com/127450/43286137-f5357938-90d5-11e8-8e84-9a76b44d211d.png)\r\n\r\nAnd importing the assembly in PSCore 6.0.3 works fine:\r\n\r\n```none\r\nPS:1> $PSVersionTable.PSVersion.ToString()\r\n6.0.3\r\nPS:2> Import-Module E:\\arena\\dotnetApp\\test\\templib\\bin\\Debug\\netcoreapp2.0\\templib.dll\r\nPS:3> Test-MyCommand -Name Joe\r\nHello Joe\r\n```\r\n",
      "created_at": "2018-07-26T20:17:45Z",
      "updated_at": "2018-07-26T20:17:45Z"
    },
    {
      "author": "SteveGilham",
      "author_association": "NONE",
      "body": "Sorry for the delay.  I have some good news and some not so good news from this particular corner of DLL Hell --\r\n\r\nFirst, the good news : I've not been able to repro the original issue after a number of upgrade/reinstall cycles and a few reboots for other reasons -- it may have been something banal like needing a reboot at the time because of other changes built up on the machine (physical, rather than a VM I could have rewound), or a stale environment in the pwsh launch from the installer, or some other, separate and harmless seeming, change, now discarded.\r\n\r\nHowever, having gone round the loop of various version upgrades a number of times, I do have a robust result that goes against the spirit of semantic versioning for patch releases, and it's the complete opposite one.  Linking a compiled module against 6.0.3 for the definition of `PSCmdlet` and running against 6.0.2 fails with\r\n```\r\nERR : Import-Module : Could not load file or assembly 'System.Management.Automation, Version=6.0.3.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n```\r\nThis has the unpleasant effect that if the developer is keeping project dependencies updated, especially with some of the automation from things like dotnet-outdated or NuKeeper, that will also drag the minimum supported user version forwards, unless explicitly reverted for this one case.",
      "created_at": "2018-07-29T09:03:44Z",
      "updated_at": "2018-07-29T09:03:44Z"
    }
  ],
  "created_at": "2018-07-22T19:11:34Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 7334,
  "state": "closed",
  "title": "System.Management.Automation assembly version is not stable but should be",
  "updated_at": "2019-09-28T19:34:36Z"
}