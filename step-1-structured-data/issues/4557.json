{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4557",
  "author": "mklement0",
  "body": "<sup>Follow-up to #4545.</sup>\r\n\r\nNote: It sounds like this won't get fixed, in which case the behavior should be documented.\r\n\r\n@lzybkr's [assessment of this bug](https://github.com/PowerShell/PowerShell/issues/4545#issuecomment-321656251):\r\n\r\n> The bug is assuming the culture won't change between compilation and execution. This is a mostly reasonable assumption, fixing this might hurt performance and not fix any real customer issue.\r\n\r\n**Background:** \r\n\r\nNumber literals passed to unconstrained parameters (in argument mode) are by designed represented _exactly as specified_ in the default output - despite getting implicitly typed as a number. (Unconstrained means either having no type constraint at all, or having an `[object]` / `[psobject]` type constraint.)\r\n\r\nIn line with the behavior of traditional shells, a number literal passed to an unconstrained parameter should be treated like a string with respect to its _default output representation_ - even though _when used in expressions_ PowerShell will treat it as an actual number.\r\n\r\n```powershell\r\nPS>  & { param($n) $n.GetType().Name, $n } 01.2; 02.3\r\nDouble # literal was interpreted as [double]\r\n01.2  # due to use as unconstrained *parameter*, output as-is, leading '0' retained \r\n2.3 # due to use in *expression context*, default stringification (culture-sensitive) is used\r\n```\r\n<sup>Note: if you used `param([double] $n)` above - i.e., if you specified the inferred type _explicitly_ as the _parameter type_ - you'd get default stringification output for `01.2` too: `1.2`.</sup>\r\n\r\nThe bug can arise if the code above is _compiled_ (which also happens for PowerShell code, behind the scenes) with one culture in effect and then _executed_ in the context of another, stemming from optimizing behavior when a number-literal parameter value is wrapped in order to package it together with its raw input token: wrapping only happens when the `.ToString()` representation differs from the raw input token.\r\n\r\nThat optimization happens _at compilation time_, based on the - culture-sensitive - `.ToString()` output that is in effect _then_. If the raw input token is identical to that representation, only the (unwrapped) number-type instance is passed (see [source code](https://github.com/PowerShell/PowerShell/blob/1a8563336a1a7f297c05fe06d732994f8efa8691/src/System.Management.Automation/engine/parser/Compiler.cs#L3456)), based on the assumption that the `.ToString()` representation will later faithfully recreate the raw input token on output.\r\n\r\nHowever, this assumption does NOT hold in case a different culture takes effect _at runtime_, because the other culture's culture-sensitive `.ToString()` representation may differ with respect to the decimal mark (`.` vs. `,`).\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nExecute the command from a session whose current culture uses `.` as the decimal mark, such as `en-US` (US-English system).\r\n\r\n```powershell\r\n# Culture 'de-DE' (German - Germany) uses \",\" as the decimal mark.\r\n# Note that default stringification of '1.2' converted to [double] results again in '1.2' in the en-US\r\n# culture, which is what makes the bug surface; '01.2', by contrast, would work fine.\r\n[cultureinfo]::CurrentCulture = 'de-DE'; & { param($n) $n } 1.2\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```powershell\r\n1.2  # exactly as specified, even though culture de-DE uses \",\" as the decimal mark\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```powershell\r\n1,2 # the representation unexpectedly changed to a culture-sensitive one\r\n```\r\n\r\nNote: \r\n\r\nIf you execute the command _again_ in the same session, the problem goes away, because on re-execution culture `de-DE` is then already in effect at compilation time.\r\n\r\nHowever, if you change the culture temporarily inside a script, the bug will continue to surface there.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta.5 on macOS 10.12.6\r\nPowerShell Core v6.0.0-beta.5 on Ubuntu 16.04.3 LTS\r\nPowerShell Core v6.0.0-beta.5 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\nWindows PowerShell v5.1.15063.483 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\n```\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2017-08-11T20:17:19Z",
  "number": 4557,
  "state": "open",
  "title": "Number literal passed as an unconstrained parameter can result in culture-sensitive default output",
  "updated_at": "2018-06-04T16:31:27Z"
}