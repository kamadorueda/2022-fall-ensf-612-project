{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8482",
  "author": "strawgate",
  "body": "# Steps to reproduce\r\n\r\n```powershell\r\nfunction test {}\r\nmeasure-command { foreach($i in 1..1000000) { test }}\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nFunction calls do not exhibit high overhead\r\n```\r\n\r\n# Actual behavior\r\n```none\r\nmeasure-command { foreach($i in 1..1000000) { test }}\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 23\r\nMilliseconds      : 547\r\nTicks             : 235471577\r\nTotalDays         : 0.000272536547453704\r\nTotalHours        : 0.00654087713888889\r\nTotalMinutes      : 0.392452628333333\r\nTotalSeconds      : 23.5471577\r\nTotalMilliseconds : 23547.1577\r\n```\r\n\r\nFunction calls (even empty functions) exhibit very high overhead\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.4\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.4\r\nOS                             Microsoft Windows 10.0.17134\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "strawgate",
      "author_association": "CONTRIBUTOR",
      "body": "This kind of overhead makes powershell unsuitable for code which requires hundreds of thousands or millions of simple function calls.\r\n\r\nIn-lining the function call shows the difference in overhead of function call vs inline in these scenarios:\r\n\r\n```\r\nmeasure-command { foreach($i in 1..1000000) { $i = 0; $i++ }}\r\n\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 1\r\nMilliseconds      : 63\r\nTicks             : 10638564\r\nTotalDays         : 1.23131527777778E-05\r\nTotalHours        : 0.000295515666666667\r\nTotalMinutes      : 0.01773094\r\nTotalSeconds      : 1.0638564\r\nTotalMilliseconds : 1063.8564\r\n```\r\n\r\n```\r\nfunction test {$i = 0; $i++}\r\nmeasure-command { foreach($i in 1..1000000) { test }}\r\n\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 24\r\nMilliseconds      : 23\r\nTicks             : 240235646\r\nTotalDays         : 0.000278050516203704\r\nTotalHours        : 0.00667321238888889\r\nTotalMinutes      : 0.400392743333333\r\nTotalSeconds      : 24.0235646\r\nTotalMilliseconds : 24023.5646\r\n```\r\n",
      "created_at": "2018-12-18T01:18:25Z",
      "updated_at": "2018-12-18T01:18:44Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "This is a scripting system (high latency), not a programming language that is compiled to native code (low latency).  I found better mileage if I can keep loops to small counts, by utilizing the cmdlets or operators to do all the work.  I had an instance where I needed to break a Base64String in to 80 character indented lines in to an XML document.  A typical programming loop construct took 20 seconds to break the blob in to approximately 40,000 lines.  A REGEX (-replace) pattern did it in under a second in a single command.",
      "created_at": "2018-12-21T08:37:51Z",
      "updated_at": "2018-12-21T08:37:51Z"
    },
    {
      "author": "strawgate",
      "author_association": "CONTRIBUTOR",
      "body": "A similar test in python shows overhead of about 0.11s over 1 million calls so id argue that the overhead is significantly higher than comparable languages.\r\n\r\nThere are ways around it like inlining functions and using native C# calls",
      "created_at": "2018-12-21T19:05:39Z",
      "updated_at": "2018-12-21T19:05:39Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "You have run into the parameter binder. Some of the features that make PowerShell nice to use as a shell makes it harder to create efficient functions.\r\n\r\nBut your example is using the simplest and oldest of the parameter binders, and it should be possible to make at least that one faster.\r\n\r\nIn the general case, where the parameter binder has to handle input from the pipeline etc., there will always be overhead compared to much simpler environments, such as Python.\r\n\r\nThat said, I think there are things that could be done to speed up those scenarios to, but the code is complex, to say the least.\r\n\r\nA workaround you can try is to create a class, and call methods on it - that is much faster than invoking functions:\r\n```powershell\r\nclass Test { \r\n    static [void] TestMethod(){}\r\n}\r\nmeasure-command { foreach($i in 1..1000000) { [Test]::TestMethod() }} | % TotalSeconds\r\n```\r\n```output\r\n5,0407504\r\n```",
      "created_at": "2019-01-24T20:39:07Z",
      "updated_at": "2019-01-24T20:39:07Z"
    },
    {
      "author": "HumanEquivalentUnit",
      "author_association": "CONTRIBUTOR",
      "body": "@msftrncs but PowerShell is JIT compiled, for loops which happen more than 16 times ( https://stackoverflow.com/a/34236617 )",
      "created_at": "2019-03-19T05:27:17Z",
      "updated_at": "2019-03-19T05:27:17Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Parameter set resolution is not part of that. It still happens at runtime.\r\n\r\nWe are looking into improving the performance of the parameter binder, but it's quite a complex piece of code.",
      "created_at": "2019-03-19T05:32:56Z",
      "updated_at": "2019-03-19T05:32:56Z"
    },
    {
      "author": "eythort-mm",
      "author_association": "NONE",
      "body": "I've stumbled on this Powershell performance bug two many times, and it's quite embarrassing. Calling a function within a large loop absolutely kills the performance of the script, and I'm forced to copy the contents of the function into the for loop to restore the performance.\r\nFixing embarrassing performance issues like this one (and the ProgressPreference on Invoke-WebRequest/RESTMethod) is necessary if you want to drive further adoption of Powershell",
      "created_at": "2019-04-02T15:08:55Z",
      "updated_at": "2019-04-02T15:08:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> and the ProgressPreference on Invoke-WebRequest/RESTMethod\r\n\r\n@eythort-mm It was fixed. If you still see the problem in latest builds please open new issue with repo steps.",
      "created_at": "2019-04-02T18:02:58Z",
      "updated_at": "2019-04-02T18:03:13Z"
    },
    {
      "author": "eythort-mm",
      "author_association": "NONE",
      "body": "yeah it's probably fixed in the latest builds, but that was more of a side note, being an equally embarrassing performance issue",
      "created_at": "2019-04-03T08:39:30Z",
      "updated_at": "2019-04-03T08:39:30Z"
    }
  ],
  "created_at": "2018-12-18T01:15:00Z",
  "number": 8482,
  "state": "open",
  "title": "Very high function call overhead",
  "updated_at": "2019-04-03T08:39:30Z"
}