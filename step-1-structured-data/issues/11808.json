{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11808",
  "author": "swinster",
  "body": "# Ability to test for alternative PowerShell versions \r\n\r\n\r\nWith PowerShell core, many CmdLets perform better than those available in Windows PowerShell (e.g. `Invoke-RestMethod`). In the past, I have run a simple test to see if an exe (on a Windows system) was available at a given path, but with the ability to install PS Core as an App (using the MSXI), I'm no longer sure how I can test for this. For example, if a script was run using PS 5.1, and PS Core v7 was available, then I might wish to run my script in that environment for better performance.\r\n\r\nThis may already be available, however I couldn't find a simple way to check in all possible cases. ",
  "closed_at": "2020-02-11T00:00:13Z",
  "comments": [
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "Looks like both MSI and MSIX PS Core v7 packages (by default) add path to `pwsh.exe` to system-wide `PATH` environment variable, so it should be possible to attempt to start `pwsh.exe` (without specifying path) and if it fails then fall back to using `PS 5.1` / `%WinDir%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe`.\r\nThough this won't start the *latest/newest* `pwsh.exe` if multiple versions are installed.\r\n\r\n@rjmholt , how does VS Code extension solve this, when it needs to find the latest PS Core installed?",
      "created_at": "2020-02-07T21:38:43Z",
      "updated_at": "2020-02-07T21:39:32Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "The PowerShell extension [looks for known places where PowerShell might be installed](https://github.com/PowerShell/vscode-powershell/blob/67017cb552af5f85862c5897f23052c6796a0189/src/platform.ts#L158-L217).\r\n\r\nWe *would* use the PATH, but that means we need to start PowerShell to find out what version it is. Whereas, well-known installation locations correspond to particular versions.",
      "created_at": "2020-02-07T21:42:27Z",
      "updated_at": "2020-02-07T21:42:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Self discovery :-)\r\n```powershell\r\nGet-Command -CommandType Application pwsh\r\n```",
      "created_at": "2020-02-08T17:22:17Z",
      "updated_at": "2020-02-08T17:22:17Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Just to add to my comment before, if you're only on Windows, `gcm -Type Application pwsh` will report the version from the PE metadata, meaning you can reliably determine the version of PowerShell without starting it (the same is true of `powershell.exe`).\r\n\r\nBut executable formats on other platforms have no such metadata field, so you're out of luck there.\r\n\r\nPerhaps PowerShell installations do/should have a simple metadata file that we could use to check such information without incurring the cost of a startup?",
      "created_at": "2020-02-08T18:03:09Z",
      "updated_at": "2020-02-08T18:03:09Z"
    },
    {
      "author": "swinster",
      "author_association": "NONE",
      "body": "@rjmholt and @iSazonov fwiw, here is the output of ` gcm -Type Application pwsh` from PS v5.1 Currently, I only have PSCore v7 rc2 installed using MSXI.\r\n\r\n```\r\nCommandType     Name                                               Version    Source\r\n-----------     ----                                               -------    ------\r\nApplication     pwsh.exe                                           0.0.0.0    C:\\Users\\me\\AppData\\Local\\Microsoft\\...\r\n```\r\n\r\nSo, whilst the this seem to show that at least one PSCore instance is install, it don't show the version. Perhaps this is because this is a preview version?",
      "created_at": "2020-02-08T22:25:42Z",
      "updated_at": "2020-02-08T22:26:52Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "It looks like the MSIX doesn't have a verison in it:\r\n\r\n```\r\n> gcm -Type Application pwsh\r\n\r\nCommandType     Name                                               Version    Source\r\n-----------     ----                                               -------    ------\r\nApplication     pwsh.exe                                           7.0.0.0    C:\\Program Files\\PowerShell\\7-preview\\pw\u2026\r\nApplication     pwsh.exe                                           6.2.3.0    C:\\Program Files\\PowerShell\\6\\pwsh.exe\r\nApplication     pwsh.exe                                           0.0.0.0    C:\\Users\\rjmho\\AppData\\Local\\Microsoft\\W\u2026\r\nApplication     pwsh.exe                                           6.2.2.0    C:\\Users\\rjmho\\.dotnet\\tools\\pwsh.exe\r\n\r\n```",
      "created_at": "2020-02-09T02:03:11Z",
      "updated_at": "2020-02-09T02:03:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> It looks like the MSIX doesn't have a verison in it:\r\n\r\nIs it a bug? Should we track this in new issue?\r\n\r\n> Perhaps PowerShell installations do/should have a simple metadata file that we could use to check such information without incurring the cost of a startup?\r\n\r\nIs this important for tools?\r\n\r\nWe could add a versions fields in powershell.config.json.",
      "created_at": "2020-02-09T04:37:26Z",
      "updated_at": "2020-02-09T04:37:26Z"
    },
    {
      "author": "DHowett-MSFT",
      "author_association": "NONE",
      "body": "The MSIX looks like it doesn\u2019t have a version in it because `pwsh.exe` is an app execution alias reparse point. Same problem as the issue (I can\u2019t find it easily from my phone) where PowerShell doesn\u2019t return to the prompt for app execution aliases: it tries to crack the PE file to read something out of it, and it fails because it\u2019s not a normal file at all.\r\n\r\nPerhaps worth adding to the existing bug and coming up with a holistic solution. Probably not necessary to file another?",
      "created_at": "2020-02-09T07:49:26Z",
      "updated_at": "2020-02-09T07:49:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@DHowett-MSFT Do you mead #9970 ?",
      "created_at": "2020-02-09T11:12:17Z",
      "updated_at": "2020-02-09T11:12:17Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "> Self discovery :-)\r\n> \r\n> ```powershell\r\n> Get-Command -CommandType Application pwsh\r\n> ```\r\n\r\nUnfortunately, that does not actually find any of the Daily builds or builds not on the execution path.",
      "created_at": "2020-02-09T11:28:13Z",
      "updated_at": "2020-02-09T11:28:13Z"
    },
    {
      "author": "DHowett-MSFT",
      "author_association": "NONE",
      "body": "> @DHowett-MSFT Do you mead #9970 ?\r\n\r\nYep! Thanks!",
      "created_at": "2020-02-09T18:08:28Z",
      "updated_at": "2020-02-09T18:08:28Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> Unfortunately, that does not actually find any of the Daily builds or builds not on the execution path.\r\n\r\nYes, there's no automatic mechanism for that. PowerShell can be installed with `xcopy` or `unzip`; there's no registration mechanism. So you can treat the PATH as being the \"discoverable\" PowerShells and just use that, and/or you can search well known installation paths. But if you really need to find all possible PowerShell installations on a machine, you're going to have to scour the whole directory structure.",
      "created_at": "2020-02-09T21:34:42Z",
      "updated_at": "2020-02-09T21:34:42Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-02-11T00:00:12Z",
      "updated_at": "2020-02-11T00:00:12Z"
    }
  ],
  "created_at": "2020-02-07T21:02:25Z",
  "number": 11808,
  "state": "closed",
  "title": "Is it possible to test for the availability of other PowerShell versions on Windows",
  "updated_at": "2020-02-11T00:00:14Z"
}