{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8420",
  "author": "mklement0",
  "body": "Note: The issue isn't specific to Unix, as originally stated - see #15329\r\n\r\n`... | Select-Object -First 1` stops the upstream command after receiving the 1st input object, but the same is not true when the sink is an _external program_:\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n1..10 | Write-Output -ov result | head -n 1; $result.Count\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\n1\r\n1\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\n1\r\n10\r\n```\r\n\r\nThat is, `Write-Output` unexpectedly ran to completion, even though `head` exited after receiving the first input line, making it pointless to send additional objects to the pipeline.\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core v6.2.0-preview.2 on macOS 10.14.1\r\nPowerShell Core v6.2.0-preview.2 on Ubuntu 18.04.1 LTS\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "KevinMarquette",
      "author_association": "CONTRIBUTOR",
      "body": "In this case, `Select-Object` manipulating the pipeline to make this happen. I'm not sure if an external program would be able to do the same. In the current implementation it looks like it would be up to the external program to handle this.\r\n\r\n[src/Microsoft.PowerShell.Commands.Utility/commands/utility/select-object.cs#L692](https://github.com/PowerShell/PowerShell/blob/a1299cd6d4e649b5e42edbbdc23a5bb1c74d82a0/src/Microsoft.PowerShell.Commands.Utility/commands/utility/select-object.cs#L692)",
      "created_at": "2018-12-08T07:45:52Z",
      "updated_at": "2018-12-08T07:45:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I am not sure that the external command terminates after reading first item. I guess it collects all input. Can we use our TestExe for check?",
      "created_at": "2018-12-08T13:29:52Z",
      "updated_at": "2018-12-08T13:29:52Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: `head` is designed to exit once it has received enough input; doing so leaves the pipe broken, and when the process on the writing end tries to write to the pipe the next time, it normally receives a `SIGPIPE` _signal_, or, if `SIGPIPE` is unexpectedly ignored (see #8421 ), the system call returns error _code_ `EPIPE`.\r\n\r\n@KevinMarquette: Yes, as you say,`Select-Object` uses internal class `StopUpstreamCommandsException` to stop upstream cmdlets, and, as an aside, it would be nice for user code to have that ability too - see #3821 and #6070.\r\n\r\nIn the case at hand, however, it would have to be PowerShell that does the `SIGPIPE` / `EPIPE` detection and translates it into PowerShell-appropriate termination of the upstream commands.\r\n\r\nI haven't looked into the implementation side of things yet.\r\n\r\n\r\n",
      "created_at": "2018-12-08T13:47:39Z",
      "updated_at": "2018-12-08T13:47:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Thanks @mklement0 - I did not read #8421 before commented here.\r\n\r\nFor reference https://github.com/PowerShell/PowerShell/pull/2450\r\n",
      "created_at": "2018-12-08T14:00:57Z",
      "updated_at": "2018-12-08T14:01:22Z"
    }
  ],
  "created_at": "2018-12-07T04:54:57Z",
  "number": 8420,
  "state": "open",
  "title": "PowerShell commands run to completion even with a broken pipe to an external (native) program",
  "updated_at": "2021-11-13T04:26:17Z"
}