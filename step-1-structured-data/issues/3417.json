{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3417",
  "author": "daxian-dbw",
  "body": "PowerShell Core builds separately for Windows and Unix, so the assemblies are different between Windows and Unix platforms. All PowerShell Core packages we published so far contain windows assemblies only.\r\n\r\nThe ideal solution is to have one package that contains assemblies for both Windows and Unix platforms. But `dotnet pack` doesn't seem to support this.\r\n\r\nThis is blocking hosting powershell in .NET Core applications on Linux/OSX.\r\nThe [discussion](https://github.com/PowerShell/PowerShell/pull/3409#issuecomment-288934991) of this issue originates from #3409",
  "closed_at": "2018-02-26T23:35:10Z",
  "comments": [
    {
      "author": "mirichmo",
      "author_association": "MEMBER",
      "body": "We need to publish the Windows version of the packages to NuGet as well.\r\n\r\nNote: This issue seems very similar to #1152 ",
      "created_at": "2017-03-25T01:00:45Z",
      "updated_at": "2017-03-25T01:00:45Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I think we want a single set of reference assemblies for portability. If we have platform specific APIs, then hopefully there is a way to refactor those into another assembly if need be.",
      "created_at": "2017-03-26T19:00:06Z",
      "updated_at": "2017-03-26T19:00:06Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Take `System.Management.Automation` as an example, I think we will eventually end up with 2 set of NuGet packages:\r\n1. A NuGet package that only contains the reference assembly. This will be the __*PowerShell Standard*__ reference assembly, which exposes an API surface that is supported by both Windows PowerShell and PowerShell Core. But the API surface will a subset of the actual publish APIs exposed in Windows PowerShell or PowerShell Core.\r\n    - This reference assembly is an abstraction that doesn't have any runtime implementation that exactly maps to it, so there won't be any runtime DLLs in this NuGet package.\r\n    - This NuGet package is the friend of powershell binary module authors. Binary modules targeting this NuGet package and `netstandard2.0` will theoretically work on both Windows PowerShell and PowerShell Core.\r\n\r\n2. A NuGet package that is specific for PowerShell Core. It contains the reference assembly that exposes all public APIs from the latest `System.Management.Automation.dll` in PowerShell Core, as well as the runtime assemblies for both Win and Unix platforms, including the native dynamic library `libpsl.so` that powershell depends on in Unix plats.\r\n    - This NuGet package is supposed to be used by any `netcoreapp2.0` application that needs to host PowerShell Core.",
      "created_at": "2017-05-11T00:24:37Z",
      "updated_at": "2017-05-11T00:24:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Can we move the Issue to #3961 ?",
      "created_at": "2017-06-11T17:22:42Z",
      "updated_at": "2017-06-11T17:22:42Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov #3961 is tracking the task to create new release packages of powershell core for Linux. .NET Core is moving to support generic Linux RID for future Linux distros -- for example, there will be no RID for Ubuntu 17 and you need to use `Linux-64` as the RID. This issue is tracking the NuGet packages which are different, so I think we should keep this one separate.",
      "created_at": "2017-06-12T16:36:01Z",
      "updated_at": "2017-06-12T16:36:01Z"
    },
    {
      "author": "Qowy",
      "author_association": "NONE",
      "body": "Is there a way to manually circumvent this for the moment. For example manually copying files to the publish directory or something similar?",
      "created_at": "2017-10-17T08:29:47Z",
      "updated_at": "2017-10-17T08:29:47Z"
    },
    {
      "author": "windischb",
      "author_association": "NONE",
      "body": "So for now, it's not possible to host Powershell in a Process on Linux?  \r\nOr is there a workaround?  \r\nCopy files manually, install other packages before, or something?  ",
      "created_at": "2017-10-26T10:22:03Z",
      "updated_at": "2017-10-26T10:22:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@Qowy @windischb Sorry, it seems all experts is busy.\r\n\r\n@adityapatwardhan Could you help please? Is there a workaround?",
      "created_at": "2017-10-26T13:15:37Z",
      "updated_at": "2017-10-26T13:15:37Z"
    },
    {
      "author": "ianByrne",
      "author_association": "NONE",
      "body": "@iSazonov @adityapatwardhan @daxian-dbw - any updates on this yet? Or is there a workaround? Thanks.",
      "created_at": "2017-11-18T12:33:39Z",
      "updated_at": "2017-11-18T12:33:39Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The Issue milestone is GA so I think we get solution soon.\r\nWorkaround from @daxian-dbw :\r\n>There is a workaround. Build your application using the existing powershell core NuGet packages, but replace the powershell assemblies with those from a Linux/OSX package. That hopefully would work.",
      "created_at": "2017-11-18T14:27:05Z",
      "updated_at": "2017-11-18T14:27:05Z"
    },
    {
      "author": "windischb",
      "author_association": "NONE",
      "body": "Should this work now with v6.0.0-rc.2?\r\n\r\nEdit:\r\nI have tried the sample from the docs.\r\nhttps://github.com/PowerShell/PowerShell/tree/master/docs/host-powershell\r\nDoesn't work on Linux for me...\r\n",
      "created_at": "2017-12-15T06:52:59Z",
      "updated_at": "2017-12-15T07:07:11Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@windischb this issue will be fixed in GA build.",
      "created_at": "2017-12-18T18:59:09Z",
      "updated_at": "2017-12-18T18:59:09Z"
    },
    {
      "author": "ianByrne",
      "author_association": "NONE",
      "body": "@daxian-dbw thanks for the update; do you have an ETA of when GA is happening?\r\n\r\n@iSazonov also thanks for the workaround, although I'm not too sure where to get \"powershell assemblies from a Linux package\". Is there a stash of DLLs somewhere that I can copy across, or will I need to somehow build them myself?",
      "created_at": "2017-12-19T16:57:10Z",
      "updated_at": "2017-12-19T16:57:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@ianByrne You can download and unzip Linux package. Although it is no longer meaningful - GA will be released in three weeks!",
      "created_at": "2017-12-19T18:20:49Z",
      "updated_at": "2017-12-19T18:20:49Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@ianByrne You can click on the `6.0.0-GA` milestone on the right side to see the due date, which is 1/10/2018.",
      "created_at": "2017-12-19T18:26:15Z",
      "updated_at": "2017-12-19T18:26:15Z"
    },
    {
      "author": "windischb",
      "author_association": "NONE",
      "body": "Just tried it with the Release Version 6.0.0 and still get following error:\r\n![image](https://user-images.githubusercontent.com/6182311/34819985-9e9f483e-f6bf-11e7-913e-2e9f628bca6c.png)\r\n",
      "created_at": "2018-01-11T10:07:53Z",
      "updated_at": "2018-01-11T10:07:53Z"
    },
    {
      "author": "ianByrne",
      "author_association": "NONE",
      "body": "[Looks like they're still working on that bit for 6.0.0](https://github.com/PowerShell/PowerShell/issues/5833) - this is the only remaining open issue of the milestone, so hopefully will be finished up soon.\r\n\r\n![image](https://user-images.githubusercontent.com/1918098/34820898-dcd96036-f6b9-11e7-917d-1af115dd3d11.png)\r\n",
      "created_at": "2018-01-11T10:27:20Z",
      "updated_at": "2018-01-11T10:27:20Z"
    },
    {
      "author": "windischb",
      "author_association": "NONE",
      "body": "Ah ok, thanks!",
      "created_at": "2018-01-11T10:49:14Z",
      "updated_at": "2018-01-11T10:49:14Z"
    },
    {
      "author": "ianByrne",
      "author_association": "NONE",
      "body": "@daxian-dbw is there any update on the status of this issue? Is it no longer to be part of the 6.0.0 release?",
      "created_at": "2018-01-13T11:22:57Z",
      "updated_at": "2018-01-13T11:22:57Z"
    },
    {
      "author": "lukemcdo",
      "author_association": "NONE",
      "body": "^Assumed it was complete based on the release notes and couldn't understand what I was doing wrong. Glad it wasn't a configuration error.\r\n\r\nIf I follow the steps for Windows, can I assume that at some release relatively soon (next year?) Linux will get support?",
      "created_at": "2018-01-13T11:48:08Z",
      "updated_at": "2018-01-13T11:48:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Guys, be patient some days - our team still works on publishing GA packages.",
      "created_at": "2018-01-13T16:23:22Z",
      "updated_at": "2018-01-13T16:37:46Z"
    },
    {
      "author": "mi-hol",
      "author_association": "NONE",
      "body": "@iSazonov on MacOS brew tries to install version 6.0.0_rc2 over an working but manually installed 6.0.0, might this be related to this open issue?",
      "created_at": "2018-01-23T15:00:30Z",
      "updated_at": "2018-01-23T15:00:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mi-hol No, You should new Issue.",
      "created_at": "2018-01-24T06:40:54Z",
      "updated_at": "2018-01-24T06:40:54Z"
    },
    {
      "author": "ianByrne",
      "author_association": "NONE",
      "body": "> Guys, be patient some days - our team still works on publishing GA packages.\r\n\r\n@iSazonov sorry for the constant pestering, but are there any updates on this?",
      "created_at": "2018-01-27T10:54:41Z",
      "updated_at": "2018-01-27T10:54:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@ianByrne I haven't news \ud83d\ude15 ",
      "created_at": "2018-01-27T15:43:35Z",
      "updated_at": "2018-01-27T15:43:35Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@ianByrne Thanks for your patience, I am actively working on it right now. Hopefully will be done in just a few days.",
      "created_at": "2018-01-27T15:46:40Z",
      "updated_at": "2018-01-27T15:46:40Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "I have seen any type of tags in NuGet packages to help identify Linux (or .NET Core) ones.\r\nNuGet need to implement a way to stop installation on Linux systems.\r\n\r\nAt least, in PowerShell Gallery you can use the -Tag parameter to identify Linux modules.\r\n\r\n:)",
      "created_at": "2018-01-27T22:23:52Z",
      "updated_at": "2018-01-27T22:23:52Z"
    },
    {
      "author": "dinesarun",
      "author_association": "NONE",
      "body": "I am eagerly waiting for this as my modules forcefully depends on PowerShell",
      "created_at": "2018-01-31T14:03:34Z",
      "updated_at": "2018-01-31T14:03:34Z"
    },
    {
      "author": "michaelrajece",
      "author_association": "NONE",
      "body": "As per @daxian-dbw  workaround, I have replaced the powershell assemblies with those from a Linux/OSX package. But, I am getting the following error when starting the application. \r\n`Unhandled Exception: System.TypeInitializationException: The type initializer for 'System.Management.Automation.Runspaces.RunspaceFactory' threw an exception. ---> System.IO.FileLoadException: Could not load file or assembly 'Microsoft.PowerShell.CoreCLR.Eventing, Version=6.0.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)`\r\n\r\nWhen checking the powershell assemblies of Linux/OSX package, all are having file version 1.0.0.0. Please help me on this issue?",
      "created_at": "2018-01-31T16:40:59Z",
      "updated_at": "2018-01-31T16:40:59Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@michaelrajece Maybe it's because you are still building your application targeting a Windows System.Management.Automation ref assembly. The `Eventing` dll is only available on Windows platform.\r\n\r\n@adityapatwardhan is about to finish this nuget packaging work. Hopefully, we will be able to use it soon.",
      "created_at": "2018-02-01T02:55:31Z",
      "updated_at": "2018-02-01T02:55:31Z"
    },
    {
      "author": "michaelrajece",
      "author_association": "NONE",
      "body": "@daxian-dbw Thanks for your update. When Replacing the System.Management.Automation dll with those from a Linux/OSX package is also failed with the same assembly's manifest definition mismatch error.\r\n`Unhandled Exception: System.IO.FileLoadException: Could not load file or assembly 'System.Management.Automation, Version=6.0.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)`\r\n\r\nSo, How can I overcome this issue?",
      "created_at": "2018-02-01T04:23:56Z",
      "updated_at": "2018-02-01T04:23:56Z"
    },
    {
      "author": "ianByrne",
      "author_association": "NONE",
      "body": "> I am actively working on it right now. Hopefully will be done in just a few days.\r\n\r\n@adityapatwardhan are there any updates on when this may be available?",
      "created_at": "2018-02-08T16:55:24Z",
      "updated_at": "2018-02-08T16:55:24Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@ianByrne Sorry for the late response. I am currently testing the nuget packages and we are targeting a release by the end of next week (2/23).",
      "created_at": "2018-02-14T20:04:28Z",
      "updated_at": "2018-02-14T20:04:28Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@ianByrne The PR for the required script changes is out #6167. Once this is merged, I will release the nuget packages.",
      "created_at": "2018-02-15T23:45:52Z",
      "updated_at": "2018-02-15T23:45:52Z"
    },
    {
      "author": "ianByrne",
      "author_association": "NONE",
      "body": "Thanks @adityapatwardhan and @daxian-dbw for implementing this fix. I have tried my application with these new versions, however am still having some issues - are they related to this? Or am I doing something completely wrong.\r\n\r\nError:\r\n> This parameter set requires WSMan, and no supported WSMan client library was found. WSMan is either not installed or unavailable for this system.: Unable to load DLL 'libpsrpclient': The specified module or one of its dependencies could not be found\r\n\r\nCode:\r\n```c#\r\nWSManConnectionInfo connectionInfo = new WSManConnectionInfo(new Uri(\"https://outlook.office365.com/powershell-liveid\"), \"http://schemas.microsoft.com/powershell/Microsoft.Exchange\", new PSCredential(username, password));\r\nconnectionInfo.AuthenticationMechanism = AuthenticationMechanism.Basic;\r\nconnectionInfo.MaximumConnectionRedirectionCount = 2;\r\n\r\nusing (PowerShell ps = PowerShell.Create())\r\n{\r\n    ps.Runspace = RunspaceFactory.CreateRunspace(connectionInfo); // Exception gets thrown here\r\n}\r\n```\r\n\r\ncsproj:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n    <RuntimeIdentifiers>linux-x64</RuntimeIdentifiers>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.PowerShell.SDK\" Version=\"6.0.1.1\" /> \r\n    <PackageReference Include=\"Microsoft.PowerShell.Commands.Diagnostics\" Version=\"6.0.1.1\" />\r\n    <PackageReference Include=\"Microsoft.WSMan.Management\" Version=\"6.0.1.1\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```",
      "created_at": "2018-02-28T11:09:51Z",
      "updated_at": "2018-03-03T14:15:41Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@ianByrne Thanks for the feedback. I am having a look.",
      "created_at": "2018-02-28T18:30:35Z",
      "updated_at": "2018-02-28T18:30:35Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "/cc @dantraMSFT \r\n\r\n@ianByrne The `libpsrpclient.so` and `libmi.so` seem to be placed under the `runtimes/linux-x64/native` folder during the `dotnet publish` step.\r\n\r\nA workaround for the issue is to use: \r\n`dotnet publish --runtime linux-x64`\r\n\r\nIf a specific runtime is chosen at build time, then the issue with runtimes folder is mitigated.",
      "created_at": "2018-02-28T21:22:51Z",
      "updated_at": "2018-02-28T21:22:51Z"
    },
    {
      "author": "ianByrne",
      "author_association": "NONE",
      "body": "@adityapatwardhan I ran `dotnet publish -c Release --runtime linux-x64` but these two files do not seem to get created. Am I missing a reference or some other dependency?\r\n\r\nThis is the contents of my `/bin/Release/netcoreapp2.0/linux-x64/publish` dir:\r\n\r\n> libpsl-native.so\r\n> linuxtest.deps.json\r\n> linuxtest.dll\r\n> linuxtest.pdb\r\n> Microsoft.ApplicationInsights.dll\r\n> Microsoft.CodeAnalysis.CSharp.dll\r\n> Microsoft.CodeAnalysis.dll\r\n> Microsoft.Management.Infrastructure.dll\r\n> Microsoft.Management.Infrastructure.Native.dll\r\n> Microsoft.PowerShell.Commands.Management.dll\r\n> Microsoft.PowerShell.Commands.Utility.dll\r\n> Microsoft.PowerShell.ConsoleHost.dll\r\n> Microsoft.PowerShell.CoreCLR.Eventing.dll\r\n> Microsoft.PowerShell.SDK.dll\r\n> Microsoft.PowerShell.Security.dll\r\n> Microsoft.Win32.Registry.AccessControl.dll\r\n> Newtonsoft.Json.dll\r\n> System.Data.SqlClient.dll\r\n> System.IO.Packaging.dll\r\n> System.Management.Automation.dll\r\n> System.Net.Http.WinHttpHandler.dll\r\n> System.Private.ServiceModel.dll\r\n> System.Security.AccessControl.dll\r\n> System.Security.Cryptography.Pkcs.dll\r\n> System.Security.Permissions.dll\r\n> System.Security.Principal.Windows.dll\r\n> System.ServiceModel.dll\r\n> System.ServiceModel.Duplex.dll\r\n> System.ServiceModel.Http.dll\r\n> System.ServiceModel.NetTcp.dll\r\n> System.ServiceModel.Primitives.dll\r\n> System.ServiceModel.Security.dll\r\n> System.ServiceProcess.ServiceController.dll\r\n> System.Text.Encoding.CodePages.dll\r\n> System.Text.Encodings.Web.dll\r\n> System.Threading.AccessControl.dll",
      "created_at": "2018-02-28T22:24:22Z",
      "updated_at": "2018-02-28T22:24:22Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@ianByrne Sorry I forgot to mention. Add the package `psrp` to your csproj. https://powershell.myget.org/feed/powershell-core/package/nuget/psrp",
      "created_at": "2018-02-28T22:37:51Z",
      "updated_at": "2018-02-28T22:37:51Z"
    },
    {
      "author": "ianByrne",
      "author_association": "NONE",
      "body": "Thanks @adityapatwardhan - I am now seeing those files. However, the application continues to throw at the same point with the same error, that the DLL is missing.",
      "created_at": "2018-02-28T23:41:18Z",
      "updated_at": "2018-02-28T23:41:18Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@ianByrne Found the root cause. Filed issue https://github.com/PowerShell/PowerShell/issues/6281",
      "created_at": "2018-03-01T02:14:59Z",
      "updated_at": "2018-03-01T02:14:59Z"
    }
  ],
  "created_at": "2017-03-24T22:59:14Z",
  "number": 3417,
  "state": "closed",
  "title": "Publish PowerShell NuGet packages for Linux/OSX platforms",
  "updated_at": "2018-03-03T14:15:41Z"
}