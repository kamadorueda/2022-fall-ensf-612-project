{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7402",
  "author": "jazzdelightsme",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n$iter = 10\r\n$env:PSModulePath = 'Custom PSModulePath'\r\n\r\nMeasure-Command {\r\n    for( $i = 0; $i -lt $iter; $i++ )\r\n    {\r\n        $job = start-job -ScriptBlock { Write-Host $env:PSModulePath }\r\n    }\r\n}\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nI should be able to kick off ten jobs in just a few seconds (maybe 2 or 3). When the results of the job come in, I should see `Custom PSModulePath`. This is the behavior in 5.1.\r\n\r\nActual behavior\r\n---------------\r\nIt takes between 12 and 20 seconds. That's longer than a second per job! (and I'm not waiting for the job to finish; this is just the time for `Start-Job` to return) And then the output is the default module path.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.4\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0-preview.4-26-g668ce91ddb14d71177b4de4f94d99c3e429e4ff7\r\nOS                             Microsoft Windows 10.0.17692\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "The performance is concerning, but note that the overriding of `$env:PSModulePath` is a more fundamental issue not specific to jobs - see #6850",
      "created_at": "2018-07-30T13:46:03Z",
      "updated_at": "2018-07-30T13:46:03Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "I can Not repro the Perf problem.\r\nIn my case time to start jobs in PSCore is in-line with `PS Desktop / 5.1` on the same machine.\r\n```\r\nTotalSeconds      : 1.8481092\r\n\r\nPS C:\\WINDOWS\\system32> $psversiontable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.4\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0-preview.4\r\nOS                             Microsoft Windows 10.0.16299\r\n```\r\n\r\n@jazzdelightsme Your PSVersionTable looks like a manual PS build. Can you please try this repro on [official packages](https://github.com/PowerShell/PowerShell/releases) on your hardware?",
      "created_at": "2018-07-30T20:53:50Z",
      "updated_at": "2018-07-30T20:53:50Z"
    },
    {
      "author": "MaximoTrinidad",
      "author_association": "NONE",
      "body": "In my system both in Windows and Core took 1 sec to execute the script.\r\n\r\n![pscorejob_2018-07-30_18-24-20](https://user-images.githubusercontent.com/19892435/43427032-e47eb7dc-9425-11e8-9fb4-fdf39a8d4254.jpg)\r\n\r\nTotal milliseconds there are small difference:\r\nWindows: 1011.9632 vs Core: 1837.473\r\n\r\nBut, you're correct about the PSModulePath as it didn't took the new value in PSCore.  But, I won't ever mess with the original value in PSModulePath.  \r\n\r\nI would rather append another path than completely change it.\r\n\r\nReceive-Job results:\r\nPSCore \r\n```\r\nPS [55] > receive-job -id 1 -keep\r\nC:\\Users\\max_t\\Documents\\PowerShell\\Modules;c:\\temp;C:\\Program Files\\PowerShell\\Modules;c:\\program files\\powershell\\6-preview\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules\r\n```\r\nWindows PowerShell\r\n```\r\nPS [78] > Receive-Job -id 1 -keep\r\nc:\\temp\r\n```\r\nPowerShell Core version:\r\n```\r\nPS [66] > $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.4\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0-preview.4\r\nOS                             Microsoft Windows 10.0.17723\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n",
      "created_at": "2018-07-30T22:26:54Z",
      "updated_at": "2018-07-30T22:26:54Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "The PSModulePath behaviour is currently by design. I have an RFC for how we might change it. [Version Specific $ENV:PSModulePath Variables](https://github.com/PowerShell/PowerShell-RFC/pull/133)",
      "created_at": "2018-07-31T19:52:32Z",
      "updated_at": "2018-07-31T19:52:32Z"
    },
    {
      "author": "jazzdelightsme",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks @BrucePay. I've been wondering how people are handling the schism between the v5 module path and v6. What I did to try to make my life simpler was to use `mklink` to create directory junctions between the `WindowsPowerShell` and `PowerShell` directories (in the user docs and program files dirs) so I can have all my modules in both places. I am not using pwsh a ton yet, so I'm not sure how bad an idea that is. Is there a better way?\r\n\r\n@anmenaga and @MaximoTrinidad : I tried the latest binary release ([this one](https://github.com/PowerShell/PowerShell/releases/download/v6.1.0-preview.4/PowerShell-6.1.0-preview.4-win-x64.zip)), and it was indeed faster than my privately-built bits. (I was building and testing using the 'Release' config). Now it is \"only\" 2x slower. On my system (an old Lenovo X1 Carbon laptop), win5.1 is 2-2.5 seconds, whereas pwsh is 5-6.",
      "created_at": "2018-08-01T14:00:29Z",
      "updated_at": "2018-08-01T14:00:29Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@jazzdelightsme is this still an issue with PS7?",
      "created_at": "2019-11-04T18:52:56Z",
      "updated_at": "2019-11-04T18:52:56Z"
    },
    {
      "author": "jazzdelightsme",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT : yes, it is still a problem. In fact it's even worse from 6.2.2.0.\r\n\r\nOn my current hardware (Lenovo X1 Yoga (Intel Core i7, 4 cores, 16 GB RAM)), **5.1** takes about 1.8 or 1.9 seconds to start ten jobs. **6.2.2.0** takes about 3.7 to 3.8 seconds. **7.0.0-preview.5** takes between 4.5 and 5.0 seconds to start ten jobs.\r\n\r\n(this is all using binary releases downloaded from github; not my own builds, of course)\r\n\r\nActually, that was on battery power. On AC, the difference is a little less:\r\n\r\nversion | time\r\n---------|-----------\r\n5.1 | 1.4 - 1.5 seconds\r\n6.2.2.0 | 2.4 - 2.6 seconds\r\n7.0.0-preview.5 | 3.3 - 3.5 seconds\r\n\r\nBut it's still clear that it's getting significantly slower.",
      "created_at": "2019-11-05T17:44:25Z",
      "updated_at": "2019-11-05T17:44:25Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "`Start-Job` starts up a new `pwsh` process, so this is just a symptom showing that there is a degradation in the startup time of `pwsh`.\r\nI don't find an issue tracking the degradation in the startup time of `pwsh`, but it's sort of a known issue internally.\r\n\r\nFrom 5.1 to 6.0/6.1/6.2, the worse startup time was mainly because of the use of `crossgen` vs. `ngen`. `ngen`, which is used by `powershell.exe`, generates more efficient code as it's targeting the particular machine the code runs on; while `crossgen` has to target a wide range of machines and thus generates code that's less efficient but more resilient.\r\nIn 6.2 time frame, #8341 improved the startup time by about 25% comparing with 6.1.\r\n\r\nFrom 6.2 to 7.0, the startup time regressed mainly because .NET Core started to use the Ready-to-Run format for `System.Private.CoreLib.dll` and maybe a few other core libraries. They were ngen'ed previously.\r\nWe probably should open an issue in GitHub tracking the startup time of `pwsh`, just to make it more transparent to the community.",
      "created_at": "2020-01-21T23:59:11Z",
      "updated_at": "2020-01-23T22:13:30Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The startup perf issue is https://github.com/PowerShell/PowerShell/issues/6443",
      "created_at": "2020-01-22T23:11:15Z",
      "updated_at": "2020-01-22T23:11:15Z"
    }
  ],
  "created_at": "2018-07-30T05:57:51Z",
  "labels": [
    "WG-Engine-Performance",
    "Issue-Discussion"
  ],
  "number": 7402,
  "state": "open",
  "title": "Start-Job is now 6-10x slower, and does not preserve $env:PSModulePath",
  "updated_at": "2020-07-30T22:48:43Z"
}