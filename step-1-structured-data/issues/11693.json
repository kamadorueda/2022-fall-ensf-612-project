{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11693",
  "author": "mklement0",
  "body": "# Summary of the new feature/enhancement\r\n\r\nNote: This suggestion fleshes out the suggestion initially made by @sheldonhull in #11412.\r\n\r\nPowerShell's expandable strings offer a flexible way of integrating both variable values and the output from expression and even entire commands in strings:\r\n\r\n```powershell\r\nPS> $foo = 'bar'; \"Variable `$foo contains '$foo' and contains $($foo.Length) character(s).\"\r\nVariable $foo contains 'bar' and contains 3 character(s).\r\n```\r\n\r\nExpandable strings expand _instantly_, whereas **it would be helpful to also be able to define them as _templates_, for later _on-demand_ expansion based on _then-current_ variable values / expression or command output**.\r\n\r\nWhile this functionality  _is_ currently available, it somewhat obscurely requires the use of `$ExecutionContext.InvokeCommand.ExpandString()`:\r\n\r\n```powershell\r\n# Define the template string, with *single quotes*, to avoid instant expansion.\r\n# E.g., such a string could be read from a *file*.\r\n$template = 'Variable `$foo contains ''$foo'' and contains $($foo.Length) character(s).'\r\n# Give $foo different values in sequence, and expand the template with each.\r\nforeach ($foo in 'bar', 'none') {\r\n  $ExecutionContext.InvokeCommand.ExpandString($template) \r\n} \r\n```\r\nResult:\r\n```none\r\nVariable $foo contains 'bar' and contains 3 character(s).\r\nVariable $foo contains 'none' and contains 4 character(s).\r\n```\r\n\r\nThe main advantage over using an expandable string is that _you can be given a string from an outside source_, such as a template string _read from a file_, which then obviously cannot be an expandable string _literal (`\"...\"`).\r\n\r\n**I suggest exposing `$ExecutionContext.InvokeCommand.ExpandString($template)` as a cmdlet named `Expand-String`**, which would enable the following, with the same output as above:\r\n\r\n```powershell\r\n$template = 'Variable `$foo contains ''$foo'' and contains $($foo.Length) character(s).'\r\nforeach ($foo in 'bar', 'none') {\r\n   # WISHFUL THINKING\r\n   Expand-String $template\r\n} \r\n\r\n# Or, via the pipeline:\r\n# WISHFUL THINKING\r\n'bar', 'none' | Expand-String 'Variable `$_ contains ''$_'' and contains $($_.Length) character(s).'\r\n``` \r\n\r\n**Security considerations**:\r\n\r\nGiven that it is conceivable that template strings may come from an outside source (user-supplied), it is desirable to be able to  _prevent evaluation of arbitrary expressions and commands_.\r\n\r\n* With a switch named, say, `-NoExpressions` specified, the presence of `$(...)` constructs _other than the following_ should refuse expansion and result in a non-terminating error:\r\n    * Mere variable references: e.g., `$($var)` (same as just `$var`)\r\n    * Variable _property_ references (but not method calls): e.g., `$($var.Foo)`)\r\n\r\nIf evaluating expressions and commands _by default_ is considered too risky, the logic could be reversed:\r\n\r\n* Require a switch named, say, `-AllowExpressions` as an opt-in.\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "@mklement0 I've always thought that this API was an under-appreciated feature given that template reification is such a common task in this business. Historically, since `ExpandString` is \"eval equivalent\" it was left as API only for \"security-ish\" reasons.  So +1 for suggesting it. As for naming, how about `Expand-Template` as a more evocative name? `Expand-Template -path template.json`. ",
      "created_at": "2020-04-19T19:07:06Z",
      "updated_at": "2020-04-19T19:07:06Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "FYI, one of the things we did in `Plaster` to make template expansion safer was to create a constrained runspace with just a few commands we figured folks needed for template expansion within the context of Plaster.  See https://github.com/PowerShell/Plaster/blob/16787a8fed9f425a35c4af6f89ba852d177094e2/src/InvokePlaster.ps1#L229-L302\r\n\r\nI wonder if this could be applied to an `Expand-Template` command (at least by default) to make it safer?  You could always provide some sort of `-Force` parameter to allow access to the current runspace and all commands.\r\n\n\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/11524380?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/Plaster\">PowerShell/Plaster</a></strong></div><div>Plaster is a template-based file and project generator written in PowerShell. - PowerShell/Plaster</div></blockquote>",
      "created_at": "2020-04-19T19:49:51Z",
      "updated_at": "2020-04-19T19:49:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The `ExpandString()` returns just null for untrusted source. Since we have Ast for the template we should do a check in Begin block of the Expand-Template with a \"security\" Visitor. If we add a list of trusted variable names in Expand-Template with a parameter the \"security\" Visitor can do very strong check on the template Ast.\r\n\r\nAnybody with Visitor creation experience could easily create a Expand-Template prototype on PowerShell script.",
      "created_at": "2020-09-23T06:27:18Z",
      "updated_at": "2020-09-23T06:27:18Z"
    }
  ],
  "created_at": "2020-01-27T18:07:18Z",
  "number": 11693,
  "state": "open",
  "title": "Make string templating a first-class feature by exposing $ExecutionContext.InvokeCommand.ExpandString() as cmdlet Expand-String",
  "updated_at": "2020-09-26T17:31:12Z"
}