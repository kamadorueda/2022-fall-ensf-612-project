{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11123",
  "author": "mklement0",
  "body": "# Summary of the new feature/enhancement\r\n\r\n_Update_: The issue is primarily that a nested `ErrorRecord:` prints duplicate information, which results in \"noisy\" output that is hard to parse; see the discussion in the comments.\r\n\r\n----\r\n\r\nCurrently, when `Get-Error` pretty-prints an error, the information about the error record's `.Exception` and `Exception.InnerException` values are pretty far apart.\r\n\r\nIt would be helpful if they were grouped together in the output.\r\n\r\nCurrently (look for `<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<` markers; note that in this simple example the messages happen to be the same, but that's not typical):\r\n\r\n```powershell\r\nException             :\r\n    ErrorRecord    :\r\n        Exception             :   <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\r\n            Message : Attempted to divide by zero.\r\n            HResult : -2146233087\r\n        CategoryInfo          : NotSpecified: (:) [], ParentContainsErrorRecordException\r\n        FullyQualifiedErrorId : RuntimeException\r\n        InvocationInfo        :\r\n            ScriptLineNumber : 1\r\n            OffsetInLine     : 1\r\n            HistoryId        : -1\r\n            Line             : 1/0\r\n            PositionMessage  : At line:1 char:1\r\n                               + 1/0\r\n                               + ~~~\r\n            CommandOrigin    : Internal\r\n        ScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\n    TargetSite     :\r\n        Name          : Divide\r\n        DeclaringType : System.Management.Automation.IntOps\r\n        MemberType    : Method\r\n        Module        : System.Management.Automation.dll\r\n    StackTrace     :\r\n   at System.Management.Automation.IntOps.Divide(Int32 lhs, Int32 rhs)\r\n   at System.Dynamic.UpdateDelegates.UpdateAndExecute2[T0,T1,TRet](CallSite site, T0 arg0, T1 arg1)\r\n   at System.Management.Automation.Interpreter.DynamicInstruction`3.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n    Message        : Attempted to divide by zero.\r\n    Data           : System.Collections.ListDictionaryInternal\r\n    InnerException :  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\r\n        Message : Attempted to divide by zero.\r\n        HResult : -2147352558\r\n\r\n```\r\n\r\nDesired:\r\n\r\n```powershell\r\nException             :\r\n    ErrorRecord    :\r\n        Exception             :   <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\r\n            Message : Attempted to divide by zero.\r\n            HResult : -2146233087\r\n            InnerException     :  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\r\n                Message : Attempted to divide by zero.\r\n                HResult : -2147352558\r\n        CategoryInfo          : NotSpecified: (:) [], ParentContainsErrorRecordException\r\n        FullyQualifiedErrorId : RuntimeException\r\n        InvocationInfo        :\r\n            ScriptLineNumber : 1\r\n            OffsetInLine     : 1\r\n            HistoryId        : -1\r\n            Line             : 1/0\r\n            PositionMessage  : At line:1 char:1\r\n                               + 1/0\r\n                               + ~~~\r\n            CommandOrigin    : Internal\r\n        ScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\n    TargetSite     :\r\n        Name          : Divide\r\n        DeclaringType : System.Management.Automation.IntOps\r\n        MemberType    : Method\r\n        Module        : System.Management.Automation.dll\r\n    StackTrace     :\r\n   at System.Management.Automation.IntOps.Divide(Int32 lhs, Int32 rhs)\r\n   at System.Dynamic.UpdateDelegates.UpdateAndExecute2[T0,T1,TRet](CallSite site, T0 arg0, T1 arg1)\r\n   at System.Management.Automation.Interpreter.DynamicInstruction`3.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n    Message        : Attempted to divide by zero.\r\n    Data           : System.Collections.ListDictionaryInternal\r\n```\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "In your example, `InnerException` is a child of the top level `Exception` so it wouldn't be under `ErrorRecord/Exception`.  At best, `InnerException` could follow `ErrorRecord` or be ahead of it.",
      "created_at": "2019-11-19T19:24:34Z",
      "updated_at": "2019-11-19T19:24:34Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT, I think I'm missing something:\r\n\r\n* The _whole object_ is an `ErrorRecord` instance, so why is there a top-level `Exception : ` label with a nested `ErrorRecord: ` label at all?\r\n\r\n* Isn't `.Exception` _always_  a direct property of the `ErrorRecord` instance, and `.InnerException` always nested in it?\r\n\r\n",
      "created_at": "2019-11-19T19:35:22Z",
      "updated_at": "2019-11-19T19:35:22Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 \r\n\r\n> * The _whole object_ is an `ErrorRecord` instance, so why is there a top-level `Exception : ` label with a nested `ErrorRecord: ` label at all?\r\n\r\nExceptions that inherit `RuntimeException` or implement the `IContainsErrorRecord` interface then they construct their own error record.  That's what this `ErrorRecord` constructor is for iirc: `ErrorRecord(ErrorRecord errorRecord, Exception replaceParentContainsErrorRecordException)`.\r\n\r\nIt's so some non-cmdlet API's can throw an exception and still control the error record if uncaught.\r\n\r\n",
      "created_at": "2019-11-19T20:04:23Z",
      "updated_at": "2019-11-19T20:05:10Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 in your specific example, it's an exception wrapped by an errorrecord wrapped by an exception.  `$error` can contain both Exceptions and ErrorRecords",
      "created_at": "2019-11-19T20:12:31Z",
      "updated_at": "2019-11-19T20:12:31Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @SeeminglyScience and @SteveL-MSFT.\r\n\r\nStill trying to wrap my head around this, but it appears to me that the nested `ErrorRecord:` block contains only _duplicated_ information and could therefore simply be omitted (the only extra information is `ParentContainsErrorRecordException` in `.CategoryInfo`, which I think is not of interest to end users, and neither are the implementation details of how exceptions / error records can be nested / wrapped).\r\n\r\nAdditionally, in the specific case at hand, the inner exception is virtually useless, because it is of the same type as the outer one, so it could be omitted too.\r\n\r\nWith the error record at hand, with my property-reordering suggestion from https://github.com/PowerShell/PowerShell/issues/11121#issuecomment-555712295 applied, as well as with a `Type:` line reflecting the exception's full type name added (per #11076), this would give us a much simplified:\r\n\r\n```\r\nException          :\r\n    Type           : System.Management.Automation.RuntimeException \r\n    Message        : Attempted to divide by zero.\r\n    Source         : System.Management.Automation\r\n    HResult        : -2146233087\r\n    Data           : System.Collections.ListDictionaryInternal\r\n    TargetSite     :\r\n        Name          : CheckActionPreference\r\n        DeclaringType : System.Management.Automation.ExceptionHandlingOps\r\n        MemberType    : Method\r\n        Module        : System.Management.Automation.dll\r\n    StackTrace     :\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\nCategoryInfo          : NotSpecified: (:) [], RuntimeException\r\nFullyQualifiedErrorId : RuntimeException\r\nInvocationInfo        :\r\n    ScriptLineNumber : 1\r\n    OffsetInLine     : 7\r\n    HistoryId        : -1\r\n    Line             : try { 1/0 } catch {}; $Error[0].GetType().FullName | scb\r\n    PositionMessage  : At line:1 char:7\r\n                       + try { 1/0 } catch {}; $Error[0].GetType().FullName | scb\r\n                       +       ~~~\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\n```\r\n\r\nAlso note that the `.Data` property is currently uselessly represented by its `.ToString()` stringification. Its entries should be represented individually; alternatively, the property could be omitted altogether.\r\n",
      "created_at": "2019-11-19T23:09:24Z",
      "updated_at": "2019-11-19T23:09:24Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 The nested ErrorRecord and InnerException is simply what is in the actual error object itself.  I don't think the formatter should be making a check to see if any information is duplicate and omitting it.  The ordering looks fine so I can update that.",
      "created_at": "2019-11-20T17:26:46Z",
      "updated_at": "2019-11-20T17:26:46Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @SteveL-MSFT.\r\n\r\n> I don't think the formatter should be making a check to see if any information is duplicate and omitting it.\r\n\r\nI don't have the full picture, but it seems to me that whenever I see `ParentContainsErrorRecordException` in the nested `ErrorRecord: ` block's `CategoryInfo`, the information is duplicated - and all the extra information generates so much noise that it's easy to get confused. \r\n\r\nTherefore:\r\n\r\n* Assuming that the presence of `ParentContainsErrorRecordException` reliably indicates duplication, it can be tested for in order to then omit the nested `ErrorRecord: ` block.\r\n\r\n* Are there cases where this duplication does _not_ occur? If so, to satisfy my own curiosity, can you give me an example command that provokes such an error?\r\n\r\n   * I've tried `1 / 0`, `[int]::Parse('foo')`, `Get-Item /NoSuch` and `Get-Item /NoSuch -ea Stop`, and they all have the duplication.\r\n",
      "created_at": "2019-11-20T17:52:16Z",
      "updated_at": "2019-11-20T17:52:16Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 \r\n\r\n> * Are there cases where this duplication does _not_ occur? If so, to satisfy my own curiosity, can you give me an example command that provokes such an error?\r\n\r\n- Exceptions thrown during prompt level pipeline creation, such as entering `[type]::psobject` directly into an interactive prompt.\r\n- Any other API that throws an `IContainsErrorRecord` exception in a circumstance where the engine the engine will not catch it (or will not specifically check for `IContainsErrorRecord`) and reform the record correctly\r\n\r\n`ParentContainsErrorRecordException` is the exception you're supposed to use when creating the error record stored by `IContainsErrorRecord.ErrorRecord`.\r\n\r\nHere's a basic example:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Management.Automation;\r\n\r\npublic class MyRuntimeException : Exception, IContainsErrorRecord\r\n{\r\n    private ErrorRecord _errorRecord;\r\n\r\n    public MyRuntimeException(string message) : base(message)\r\n    {\r\n    }\r\n\r\n    public ErrorRecord ErrorRecord => _errorRecord ??= new ErrorRecord(\r\n        new ParentContainsErrorRecordException(Message),\r\n        \"MySpecialErrorId\",\r\n        ErrorCategory.LimitsExceeded,\r\n        targetObject: null);\r\n}\r\n\r\n[Cmdlet(VerbsDiagnostic.Test, \"Exception\")]\r\npublic class TestExceptionCommand : PSCmdlet\r\n{\r\n    protected override void BeginProcessing()\r\n    {\r\n        throw new MyRuntimeException(\"My message!\");\r\n    }\r\n\r\n    public static void ThrowMyException() => throw new MyRuntimeException(\"My message!\");\r\n}\r\n```\r\n\r\nIf you call `Test-Exception`, the error record will be correct.  If you call `ThrowMyException`, it'll instead be wrapped in a `MethodInvocationException`.  In the case of the latter, the details of the inner `ErrorRecord` are not duplicated.",
      "created_at": "2019-11-20T18:19:32Z",
      "updated_at": "2019-11-20T22:18:39Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thank you, @SeeminglyScience - a helpful peek behind the curtain, as usual. It'll take me a while to fully digest these intricacies.\r\n\r\nAs an aside: Why does `[type]::psobject` fail?\r\n\r\nUsing the intentional ordering of the properties will help, but I'm still concerned about the volume and structural complexity of the output.\r\n\r\nDo you see a way to algorithmically simplify the output in a manner that is more helpful to end users (hides implementation details) while avoiding omission of important information?\r\n",
      "created_at": "2019-11-20T20:41:32Z",
      "updated_at": "2019-11-20T20:41:32Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> As an aside: Why does `[type]::psobject` fail?\r\n\r\nJust a bug.  I have an issue open about it, but tbh it doesn't really affect anyone so it probably won't be fixed.  If it ever does I guess I'll have to find another example \ud83d\ude09\r\n\r\nIf you're curious, it fails because member binding expects that members with a reserved member name always exist, but it doesn't check if it's a static invocation.  So it sees `PSObject` and says \"oh I know that member, that's literally always there\" and then it tries to use it.\r\n\r\nOr... at least that's my guess. I can't remember if I actually looked at the code to see if I was right...\r\n \r\n> Using the intentional ordering of the properties will help, but I'm still concerned about the volume and structural complexity of the output.\r\n> \r\n> Do you see a way to algorithmically simplify the output in a manner that is more helpful to end users (hides implementation details) while avoiding omission of important information?\r\n\r\nMaybe you could keep a hash set of `ErrorId`'s and avoid recursing when there's a match?  Dunno, I'll think about it.",
      "created_at": "2019-11-20T22:18:24Z",
      "updated_at": "2019-11-20T22:18:24Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Side note, if it currently recurses infinitely there should probably be some protection. I've definitely accidently used `this` instead of `ParentContainsErrorRecordException` when creating the `IContainsErrorRecord.ErrorRecord`, which would be a fun stack overflow to debug \ud83d\ude42 ",
      "created_at": "2019-11-20T22:22:07Z",
      "updated_at": "2019-11-20T22:22:07Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I had the same issue trying to add a Suggestion member to ErrorRecord. CommandNotFoundException can get fun to debug when you accidentally trigger it recursively. \ud83d\ude01 ",
      "created_at": "2019-11-21T03:21:31Z",
      "updated_at": "2019-11-21T03:21:31Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "`Get-Error` currently stops recursion at 10 (hard coded).\r\n\r\n@mklement0 the current code for the formatting already special cases the object types to expand into.  It's basically Exceptions, ErrorRecords, and anything in [a fixed list](https://github.com/PowerShell/PowerShell/blob/9b71696e3384cf10d84108d98c1bac3dd974cb8a/src/System.Management.Automation/FormatAndOutput/DefaultFormatters/PowerShellCore_format_ps1xml.cs#L780).   `TargetSite` is [treated specially](https://github.com/PowerShell/PowerShell/blob/9b71696e3384cf10d84108d98c1bac3dd974cb8a/src/System.Management.Automation/FormatAndOutput/DefaultFormatters/PowerShellCore_format_ps1xml.cs#L823) as I think it's useful, but contains many properties that are not so they aren't shown.\r\n\r\nSo if there's other types to include or exclude, it can be done.",
      "created_at": "2019-11-21T19:52:40Z",
      "updated_at": "2019-11-21T19:52:40Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Maybe rather than hard-code `10`, add a parameter `MaxDepth` or `RecursionLimit` and default it to `10`?",
      "created_at": "2019-11-21T21:03:31Z",
      "updated_at": "2019-11-21T21:03:31Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Is there a scenario where someone would change the MaxDepth?  Seems like a parameter that would never get used.  In my experience, 10 is already way bigger than probably necessary.  Limiting MaxDepth to 1 would just be dumping $Error[0] to Format-List.  A MaxDepth of 2 or 3 is going to be most cases anyways as I haven't encountered any Exceptions/ErrorRecords that are more than 4 deep anyways.  The 10 was just a protective measure against infinite recursion.",
      "created_at": "2019-11-21T21:14:32Z",
      "updated_at": "2019-11-21T21:14:50Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Fair point. and yeah, you're likely right on this. It's just that hard-coded values that the user can't change make me a bit nervous.  :-)  I guess if it turns out to be an issue, you can always add such a parameter later.",
      "created_at": "2019-11-21T21:43:59Z",
      "updated_at": "2019-11-21T21:43:59Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "The only reason I can think to make it configurable is that there may potentially be cases where a user would like to ensure that as much detail as possible is logged (e.g., in a CI runner) and there may be cause to need over 10. It would definitely be an edge case, but it could still be helpful to have such a parameter.\r\n\r\nConversely, users may want to explicitly limit depth in the case of recursing exceptions to something much lower to improve the readability of the output.",
      "created_at": "2019-11-21T22:27:06Z",
      "updated_at": "2019-11-21T22:27:24Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@vexx32 such a param is easily added, but once added nearly impossible to remove.  Let's wait until there's a real customer ask for this :)",
      "created_at": "2019-11-22T20:47:23Z",
      "updated_at": "2019-11-22T20:47:23Z"
    }
  ],
  "created_at": "2019-11-19T18:52:29Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets-Utility"
  ],
  "number": 11123,
  "state": "open",
  "title": "Get-Error: Avoid duplicate information contained in nested ErrorRecord blocks",
  "updated_at": "2019-11-22T20:47:23Z"
}