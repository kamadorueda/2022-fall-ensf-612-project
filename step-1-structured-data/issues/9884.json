{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9884",
  "author": "fadanner",
  "body": "Since May 2019 Security Rollup for Windows Server 2016, access to .net object via powershell is very slow, when a powershell variable breakpoint is set in the powershell.\r\n\r\nFor example loading speed of [System.Environment] takes over ten times with breakpoint set against no breakpoint set.\r\n\r\nSince the behavior only occurs with latest security updates installed (May 2019 (KB4494440) or June 2019 (KB4503267)) i think it is related to the update.\r\n\r\nDid some troubleshooting with procmon until now. For me it looks like when PSBreakpoint is set, there are multiple reads from `HKLM\\System\\CurrentControlSet\\Control\\Session Manager\\Environment\\__PSLockdownPolicy` can't repoduce this when there is no breakpoint set and can't reproduce this effect without one of the updates installed.\r\n\r\nFollowing powershell code runs more than 10 times slower when i install Windows Security Rollup update Mai / June 2019 on my Windows Server 2016.\r\n```\r\n\r\n$measure1 = measure-command{\r\n  foreach($i in 1..10000){\r\n    [System.Environment]\r\n  }\r\n} |select -ExpandProperty TotalSeconds\r\n\r\nSet-PSBreakpoint -Variable \"test\" -Action {$null}\r\n\r\n$measure2 = measure-command{\r\n  foreach($i in 1..10000){\r\n    [System.Environment]\r\n  }\r\n} |select -ExpandProperty TotalSeconds\r\n\r\nWrite-Host \"First measurement took $measure1 seconds, Second measurement took $measure2\"\r\n\r\n>>First measurement took 0.0482474 seconds, Second measurement took 0.8722697\r\n```\r\nTested on:\r\n                                                                            \r\nPSVersion: 5.1.14393.2969                                                                          \r\nPSEdition: Desktop                                                                                 \r\nPSCompatibleVersions: {1.0, 2.0, 3.0, 4.0...}                                                                 \r\nBuildVersion:10.0.14393.2969                                                                         \r\nCLRVersion:4.0.30319.42000                                                                         \r\nWSManStackVersion:3.0                                                                                     \r\nPSRemotingProtocolVersion:2.3                                                                                     \r\nSerializationVersion:1.1.0.1                                                                                 \r\n\r\n\r\n\r\nCan anyone observe this behavior as well?\r\n\r\nDo you have any suggestions to workaround this problem?\r\n\r\nIs it related to some settings or installed software?\r\n\r\n\r\n",
  "closed_at": "2019-12-12T00:00:18Z",
  "comments": [
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "Please fill in the issue template as things like the PS Version are very relevant to this.",
      "created_at": "2019-06-13T17:01:15Z",
      "updated_at": "2019-06-13T17:01:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @KirkMunro @PaulHigin ",
      "created_at": "2019-06-14T06:04:29Z",
      "updated_at": "2019-06-14T06:04:29Z"
    },
    {
      "author": "fadanner",
      "author_association": "NONE",
      "body": "Added $PSVersionTable to the issue",
      "created_at": "2019-06-14T08:12:19Z",
      "updated_at": "2019-06-14T08:12:19Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "@fadanner This repository is not for Windows PowerShell as the issue template says, I assume the issue does not apply for PowerShell Core?",
      "created_at": "2019-06-14T09:06:24Z",
      "updated_at": "2019-06-14T09:06:24Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@fadanner Thank you for explaining the issue you were seeing so clearly. I love it when someone indicates they took the time to isolate the problem, in this case trying with/without the OS updates, using procmon, etc. That is very much appreciated.\r\n\r\nAs @bergmeister suggested, it would be most helpful to know if this is an issue for PowerShell Core or not. Are you able to try that out on a test server, with PowerShell 6.2 installed? It can be installed side-by-side with PowerShell 5.1.\r\n\r\nAlso, you suggested that you don't see the slowdown without the OS updates. Using the same PowerShell versions, can you share those times as well to illustrate how much of a difference we're looking at before/after the update, based on your tests?",
      "created_at": "2019-06-14T14:55:15Z",
      "updated_at": "2019-06-14T14:55:15Z"
    },
    {
      "author": "nohwnd",
      "author_association": "NONE",
      "body": "@bergmeister @KirkMunro I think we are seeing the same bug in pester/Pester#1318. The impact does not seem to be limited to accessing classes, but instead all code slows down when even a single breakpoint is present. \r\n\r\nI can see that the problem impacts both Windows PowerShell 5.1 and PowerShell Core 6.2.2 and [have a simple repro and measurements](https://github.com/pester/Pester/issues/1318#issuecomment-514772904). \r\n\r\nI was able to replicate this on Windows 10 Bussiness version 1903 (updated July 2019), straight from MSDN (gwmi win32_operatingsystem -> version 10.0.18362).\r\n\r\nI can make more tests in case you need them, to confirm what the problem is, and to try possible solutions. \r\n\r\n",
      "created_at": "2019-07-25T07:38:49Z",
      "updated_at": "2019-07-25T07:38:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@nohwnd If you have a test environment you could collect traces (before appling the security patch and after) with PerfView utility and share traces - I expect that it will very simple to find the expensive system call.\r\nUpdate: Perhaps it is more easy to get traces for Windows PowerShell - we can use WPR/WPA from Windows Performance Toolkit",
      "created_at": "2019-07-25T07:59:47Z",
      "updated_at": "2019-07-25T08:47:24Z"
    },
    {
      "author": "DavidGibsonNorth",
      "author_association": "NONE",
      "body": "> Can anyone observe this behavior as well?\r\n@fadanner Yes, replicated by me\r\n\r\n`First measurement took 0.0102665 seconds, Second measurement took 1.6129433`\r\n\r\n```\r\n$PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.14393.3053\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.14393.3053\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n\r\n.",
      "created_at": "2019-07-25T10:58:58Z",
      "updated_at": "2019-07-25T10:58:58Z"
    },
    {
      "author": "nohwnd",
      "author_association": "NONE",
      "body": "@iSazonov I never used PerfView is there anything specific that I should setup / measure. Or just running Collect > Run with `Powershell.exe -f repro.ps1` and then sharing the merged logs is enough?\r\n\r\nI don't have a version of the vm before patches becasue I was never able to update from a clean station, and so I was able to replicate only on the build that I mention above, that already has the patch installed.  But I have a second workstation that does not have the problem, will collecting the same thing on both be useful for you? ",
      "created_at": "2019-07-25T11:03:27Z",
      "updated_at": "2019-07-25T11:03:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@nohwnd We need _compare_ two traces to find regression.\r\n\r\n> Or just running Collect > Run with Powershell.exe -f repro.ps1\r\n\r\nNo need start PowerShell every time. You can start PowerShell, prepare test, then start collect by Collect > Collect, run test, after the test done press Stop collection, save zip file and repeat all steps for new test in the same PowerShell session.\r\n",
      "created_at": "2019-07-25T11:41:05Z",
      "updated_at": "2019-07-25T11:41:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Tracing says a lot:\r\n![image](https://user-images.githubusercontent.com/22290914/61948886-82885600-afc2-11e9-8b97-b5a421f06fe0.png)\r\n\r\n![image](https://user-images.githubusercontent.com/22290914/61948963-bbc0c600-afc2-11e9-9563-92da2966fe0e.png)\r\n",
      "created_at": "2019-07-26T11:29:39Z",
      "updated_at": "2019-07-26T11:30:59Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "I suspect this was the fix for `CVE-2018-12130`, a.k.a. the [Zombie Load Attack](https://zombieloadattack.com), that was fixed as part of the May Security update. Details about the specific KB numbers in which it was included can be found here: https://portal.msrc.microsoft.com/en-us/security-guidance/advisory/adv190013\r\nIt was mentioned that this fix brings a performance degradation of up to 40%, so I'm not surprised that one can generate more extreme outliers.",
      "created_at": "2019-07-26T12:31:26Z",
      "updated_at": "2019-07-26T12:31:26Z"
    },
    {
      "author": "Glober777",
      "author_association": "NONE",
      "body": "@SteveL-MSFT, will the fix for the issue be back-ported to Windows PowerShell as is, or should a related record still be created in UserVoice?",
      "created_at": "2019-08-05T09:42:21Z",
      "updated_at": "2019-08-05T09:42:21Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@Glober777 I expect #10269 to be back-ported to 5.1.  The root issue of the general perf impact isn't understood yet so can't comment on that.",
      "created_at": "2019-08-05T16:33:13Z",
      "updated_at": "2019-08-05T16:33:13Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as fixed and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2019-12-12T00:00:17Z",
      "updated_at": "2019-12-12T00:00:17Z"
    }
  ],
  "created_at": "2019-06-13T14:16:33Z",
  "labels": [
    "Issue-Question",
    "WG-Interactive-Debugging",
    "Resolution-Fixed"
  ],
  "number": 9884,
  "state": "closed",
  "title": "Powershell .net class loads slow since MS-Security Update April 2019",
  "updated_at": "2019-12-12T00:00:18Z"
}