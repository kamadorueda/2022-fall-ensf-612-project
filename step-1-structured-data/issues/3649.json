{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3649",
  "author": "daxian-dbw",
  "body": "Issue Summary\r\n----------------\r\nThe API `AppDomain.GetAssemblies` is brought back in .NET Core 2.0 which returns the loaded assemblies from the default loader. Therefore it's possible now for powershell to just depend on the default CoreCLR loader without having our own assembly load context getting in the picture. This would greatly simplify the scenario of hosting powershell in applications.\r\n\r\nCoreFX Fixes needed\r\n-----------------------\r\n- [x] https://github.com/dotnet/corefx/issues/18989 - `AssemblyLoadContext.GetLoadContext` crashes when pass in a dynamic assembly. **[Verified Fixed]**\r\n- [x] https://github.com/dotnet/corefx/issues/18877 - `AppDomain.GetAssemblies` doesn't return dynamic assemblies that are emitted on the fly. **[Verified Fixed]**\r\n- [x] https://github.com/dotnet/corefx/issues/18791 - For an assembly loaded via 'Assembly.LoadFrom', the assembly it referenced cannot be loaded even if they are in the same folder. **[Verified Fixed]**\r\n- [x] OmniSharp/omnisharp-vscode#1495 - Preview 2 builds are not yet supported by VS Code C#. **[Verified Fixed] -- `v1.11.0` VSCode C# extension has been publicly released**\r\n- [x] https://github.com/dotnet/corefx/issues/21095 - [Regression] ResourceManager.GetString(string) throw System.IO.FileNotFoundException. **[Verified Fixed]**\r\n\r\nTasks\r\n-----\r\n- [x] Refactor the code to make PowerShell Core depend on the default CoreCLR loader. Fixed via #3903\r\n- [x] Update the hosting code in [pwrshclrhost.cpp](https://github.com/PowerShell/PowerShell/blob/309bf603f9aff9009dce7e725d42b2d4f99f58c9/src/powershell-native/nativemsh/pwrshplugin/pwrshclrhost.cpp#L62)\r\n- [x] Update the host code in [Shell.cs](https://github.com/PowerShell/psl-omi-provider/blob/master/src/Shell.c#L446) in psl-omi-provider (submitted PR https://github.com/PowerShell/psl-omi-provider/pull/99. PR has been merged and it's verified that PSRP with this fix works with beta.3 powershell)\r\n- [x] Remove `Microsoft.PowerShell.CoreCLR.AssemblyExtensions.LoadFrom(string assemblyPath)` once the `PackageManagement` module is migrated to .NET Core 2.0. **Tracked by #4149**\r\n- [x] Move PowerShell Core to the latest .NET Core to get all fixes we need. (~via #3887~ Ran into a regression in the latest .NET Core, so moved back to 2.0.0-preview1 via #4026)\r\n- [x] Think about removing `Microsoft.PowerShell.CoreCLR.AssemblyLoadContext.dll` completely. **Tracked by #4149**",
  "closed_at": "2017-06-30T20:07:14Z",
  "comments": [],
  "created_at": "2017-04-26T06:22:13Z",
  "labels": [
    "WG-Engine"
  ],
  "number": 3649,
  "state": "closed",
  "title": "Avoid using powershell assembly load context with netcoreapp2.0",
  "updated_at": "2017-06-30T20:22:12Z"
}