{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17195",
  "author": "moerwald",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\n\r\n\r\nIn the following example I'm calling a script block on a remote server. The scriptblock receives an `$Inventory` parameter, which is a nested C#  object (depth > 1). It seems that the parameter is only serialized with `depth=1`. Based on `$Inventory | Export-Clixml \"$env:TEMP\\f2.txt\"` I can see that the CLI-XML doesn't contain nested information.\r\n\r\n```\r\nvar wsManInfo = new WSManConnectionInfo();\r\nvar runSpace = RunspaceFactory.CreateRunspace(wsManInfo);\r\nrunSpace.Open();\r\nvar powerShell = PowerShell.Create();\r\npowerShell.Runspace = runSpace;\r\npowerShell.AddScript(@\"\r\nParam($Inventory)\r\n\r\n\r\n$Inventory | Export-Clixml \"\"$env:TEMP\\f2.txt\"\"\r\n\r\n\r\n$Inventory.SoftwareInventory.Groups[0].Software\r\n\r\n\").AddParameter(\"Inventory\", variables);\r\nvar results = powerShell.Invoke();\r\n```\r\n\r\nWould be great to create an option to set the serialization depth of custom objects.\r\n\r\nActually the depth is `1`, based on `PSObject`:\r\n\r\n```\r\n  public virtual void GetObjectData(SerializationInfo info, StreamingContext context)\r\n        {\r\n            if (info == null)\r\n            {\r\n                throw PSTraceSource.NewArgumentNullException(nameof(info));\r\n            }\r\n\r\n            // We create a wrapper PSObject, so that we can successfully deserialize it\r\n            string serializedContent;\r\n            if (this.ImmediateBaseObjectIsEmpty)\r\n            {\r\n                PSObject serializeTarget = new PSObject(this);\r\n                serializedContent = PSSerializer.Serialize(serializeTarget);\r\n            }\r\n            else\r\n            {\r\n                serializedContent = PSSerializer.Serialize(this);\r\n            }\r\n\r\n            info.AddValue(\"CliXml\", serializedContent);\r\n        }\r\n```\r\n\r\nIs it possible to set the serialization depth via the API?\r\n\r\n\r\n### Expected behavior\r\n\r\n```console\r\nA custom object shall be serialized in required depth.\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nA custom object is serialized with depth=1.\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nMicrosoft.PowerShell.SDK 7.2.2\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": "2022-05-07T00:00:45Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "You can set the serialization depth to 2 on the client side. The `SerializationDepth` is a setting in the ETS (type system).\r\nYou can set it either by `Update-TypeData`, such as `Update-TypeData -TypeName 'OuterObject' -SerializationDepth 2`, or by having a `.ps1xml` file for the new type settings -- an example can be found here: https://github.com/PowerShell/PowerShell/issues/3549#issuecomment-293844899",
      "created_at": "2022-05-05T22:19:19Z",
      "updated_at": "2022-05-05T22:19:19Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-05-07T00:00:44Z",
      "updated_at": "2022-05-07T00:00:44Z"
    }
  ],
  "created_at": "2022-04-26T05:54:38Z",
  "number": 17195,
  "state": "closed",
  "title": "Microsoft.PowerShell.SDK: Custom script parameters are not fully serialized, when invoked via remote session",
  "updated_at": "2022-05-07T00:00:45Z"
}