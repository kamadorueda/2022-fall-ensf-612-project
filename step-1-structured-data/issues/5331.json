{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5331",
  "author": "LethiferousMoose",
  "body": "Steps to reproduce\r\n------------------\r\n```none\r\nCreate a class that contains a method with a return value, add a call to Write-Error in the method. Call the method. (see attached script snippet for reproduction)\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n```none\r\nThe error should be displayed.\r\n```\r\n\r\nActual behavior\r\n---------------\r\n```none\r\nThe Write-Error cmdlet does nothing and no error is shown.\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-beta.9\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-beta.9\r\nOS                             Microsoft Windows 10.0.15063\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@LethiferousMoose Could you please add full repo steps with code samples.",
      "created_at": "2017-11-03T17:37:37Z",
      "updated_at": "2017-11-03T17:37:37Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I believe this is `by design`. PowerShell classes do not leak they either `return` or `Throw`\r\n\r\n```powershell\r\nclass Test \r\n{\r\n    Test(){}\r\n\r\n    static [string] WriteError()\r\n    {\r\n        Write-Error 'This is an error.'\r\n        return 'String'\r\n    }\r\n\r\n    static [string] ThrowError()\r\n    {\r\n        Throw 'This is a throw'\r\n        return 'String'\r\n    }\r\n}\r\n\r\n[Test]::WriteError()\r\n[Test]::ThrowError()\r\n```\r\n\r\nresult:\r\n\r\n```\r\nString\r\nThis is a throw\r\nAt line:20 char:9\r\n+         Throw 'This is a throw'\r\n+         ~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : OperationStopped: (This is a throw:String) [], RuntimeException\r\n    + FullyQualifiedErrorId : This is a throw\r\n```\r\n\r\n`Write-Error` does not \"leak\" out of the method. it does still populate `$Error`.  You could make errors become terminating errors by setting `$ErrorActionPreference`\r\n\r\n```powershell\r\nclass Test2\r\n{\r\n    Test2() {}\r\n\r\n    static [string] WriteTerminatingError()\r\n    {\r\n        $ErrorActionPreference = 'stop'\r\n        Write-Error 'This is a terminating error.'\r\n        return 'String'\r\n    }\r\n}\r\n\r\n[Test2]::WriteTerminatingError()\r\n```\r\n\r\nresult:\r\n```\r\nThis is a terminating error.\r\nAt line:13 char:1\r\n+ [Test2]::WriteTerminatingError()\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\r\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException\r\n```\r\n\r\nBasically, Class methods either return an object of the specified type or they throw. ",
      "created_at": "2017-11-03T17:53:14Z",
      "updated_at": "2017-11-03T17:53:14Z"
    },
    {
      "author": "LethiferousMoose",
      "author_association": "NONE",
      "body": "I suppose that makes sense, but Write-Error does not terminate by default. It simply writes the error to the error channel and displays it on the console. If I am doing class initiation and I encounter some some of non-terminating error in a method with a return type, I have no way to display that error.\r\n\r\nIn my scenario, I am loading up a configuration file and populating an object and would like to alert the user if certain configurations will be skipped because they are malformed (in my case a JSON attribute containing environment variables that are not set). When I have a return type of List<> (i.e. the method the populates the list of configurations) I cannot write errors to the console. I had to workaround this by passing the list in as a parameter to the method.\r\n\r\nSee attached simplified class [SampleClass.txt](https://github.com/PowerShell/PowerShell/files/1442059/SampleClass.txt) (external custom cmdlets and classes not included.)\r\n\r\nIn this example this is where the error is written:\r\n```Sample\r\nif (Test-EnvironmentVariablePath $product.directory) {\r\n    continue\r\n}\r\n```\r\nTest-EnvironmentVariablePath does some checks and writes an error if a potentially unexpanded environment variable is detected.\r\n\r\nNote: this is the modified code using a list as a parameter with a void return signature so that it works.",
      "created_at": "2017-11-03T18:09:57Z",
      "updated_at": "2017-11-03T18:20:12Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "whoops.. wrong button... sorry. issue reopened.",
      "created_at": "2017-11-03T18:32:03Z",
      "updated_at": "2017-11-03T18:32:03Z"
    },
    {
      "author": "LethiferousMoose",
      "author_association": "NONE",
      "body": "So why does return type [void] bypass this behavior. If methods are designed to not \"leak\" why does this have a mixed behavior? Also your reply must have gotten erased when you re-opened this issue.",
      "created_at": "2017-11-03T18:48:32Z",
      "updated_at": "2017-11-03T18:49:18Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "that is a good question, one for which I do not have an answer.",
      "created_at": "2017-11-03T19:12:54Z",
      "updated_at": "2017-11-03T19:12:54Z"
    },
    {
      "author": "mawett",
      "author_association": "NONE",
      "body": "I just ran into this issue and finally found my way here. Can anybody explain why this behaviour is different when returning [void] vs. e.g. [bool]?\r\nMy use case is that I have a function that verifies some files exist before signing them. When everything succeeded, it will return true. However, when the files do not exist, I want to use Write-Error to display which file was missing and then return false to indicate to the calling script that the sign process failed. However, at the moment, I only get \"false\" back, but no output from Write-Error.",
      "created_at": "2019-09-20T07:13:30Z",
      "updated_at": "2019-09-20T07:13:30Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "As mentioned above, @mawett, the expected design process when using classes is to `throw` an exception if an operation in a class method fails. If you have a method like Int32.TryParse() that returns a bool to indicate status you'd typically just return $false and do nothing else.\r\n\r\nThe problem here, I think, is that classes don't really operate in the PowerShell pipeline like functions do. This means that they're restricted to the same model of output as other .NET classes, which don't have the many streams that PowerShell does.\r\n\r\nPerhaps @daxian-dbw can answer why this is not being maintained for [void] methods. I suspect that's actually a _bug_ more than anything.",
      "created_at": "2019-09-20T12:33:45Z",
      "updated_at": "2019-09-20T12:36:01Z"
    },
    {
      "author": "mawett",
      "author_association": "NONE",
      "body": "Ah I see, so it's rather a bug that class methods returning void actually work with Write-Error than the other way around. In that case I will have to clean up some of my Powershell classes :-) Thanks for the clarification",
      "created_at": "2019-09-23T04:43:50Z",
      "updated_at": "2019-09-23T04:43:50Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> it's rather a bug that class methods returning void actually work with Write-Error \r\n\r\n@SteveL-MSFT @daxian-dbw @rjmholt Could you please make a conclusion about the issue? Should we fix this for void class methods (that could be a breaking change)?",
      "created_at": "2019-09-23T06:28:08Z",
      "updated_at": "2019-09-23T06:28:08Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Implementation wise, this is because different `errorHandlingBehavior` is used for method that has a `non-void` return type and method that has a `void` return type.\r\n[`WriteToExternalErrorPipe` used in `non-void` return method](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/lang/scriptblock.cs#L535) **vs.** [`WriteToCurrentErrorPipe` used in `void` return method](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/lang/scriptblock.cs#L565)\r\n\r\nThis feels like an oversight to me. @lzybkr, do you remember if it's intentional?",
      "created_at": "2019-09-24T00:07:21Z",
      "updated_at": "2019-09-24T00:07:21Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "There was no design work around alternate streams in functions defined in classes - the existing behavior is simply a side effect of code reuse.",
      "created_at": "2019-09-24T00:39:53Z",
      "updated_at": "2019-09-24T00:39:53Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "See also the discussion in #9702, which is a since-closed effective duplicate.\r\n\r\nTo summarize:\r\n\r\n* Writing to stream `1` (success output) by design requires  `return`, not `Write-Output` / implicit output.\r\n\r\n* Writing to `2` by design requires exceptions, not `Write-Error`.\r\n\r\n   *  Except in `[void]` methods, where `Write-Error` output surfaces, which is an inconsistency that should be fixed.\r\n\r\n  * In non-void methods, which function as designed, the implication is that non-terminating errors emitted by cmdlets called from methods are silently ignored; e.g.,\r\n` class Foo { [string] Bar(){ Get-Item /NoSuch; return '' } }; [Foo]::new().Bar()`\r\n\r\n*  Streams `3` - `6` can be targeted as in non-class code (`Write-Warning`, ...) and are _passed through_.\r\n\r\nEven with the immediate inconsistency fixed, this bifurcation of stream behavior is counter-intuitive (except for the `return` vs. `Write-Output`/implicit output distinction) and requires documenting  - see https://github.com/MicrosoftDocs/PowerShell-Docs/issues/4497",
      "created_at": "2019-10-11T13:22:55Z",
      "updated_at": "2019-10-11T13:24:25Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "The necessary change here seems relatively simple. Should we mark it for hacktoberfest? \ud83d\ude42 ",
      "created_at": "2019-10-11T14:14:06Z",
      "updated_at": "2019-10-11T14:14:06Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">  Should we mark it for hacktoberfest? \ud83d\ude42\r\n\r\nIn the case if nobody fixes the issue until October, 31 your duty will take it upon yourself \ud83d\ude38 ",
      "created_at": "2019-10-11T15:20:38Z",
      "updated_at": "2019-10-11T15:20:38Z"
    }
  ],
  "created_at": "2017-11-03T16:44:02Z",
  "number": 5331,
  "state": "open",
  "title": "Write-Error fails to work in class methods that return a non-void value",
  "updated_at": "2019-10-11T20:56:01Z"
}