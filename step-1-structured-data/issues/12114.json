{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12114",
  "author": "agowa338",
  "body": "After updating to powershell 7 converting secure strings to unsecure plaintext passwords is broken\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n$APIKey = ConvertTo-SecureString -AsPlainText -Force -String \"FooBar\"\r\n$BSTR = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($APIKey)\r\nWrite-Host -Message ([System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR))\r\n[Runtime.InteropServices.Marshal]::ZeroFreeBSTR($BSTR)\r\n```\r\n\r\n# Expected behavior\r\n\r\n```powershell\r\n[System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)\r\n```\r\nreturning `FooBar`\r\n\r\n# Actual behavior\r\n\r\n```powershell\r\n[System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)\r\n```\r\nreturns only `F`\r\n\r\n# Workaround\r\n\r\n```powershell\r\n$APIKey = ConvertTo-SecureString -AsPlainText -Force -String \"FooBar\"\r\nWrite-Host -Message ([System.Net.NetworkCredential]::new(\"\", $APIKey).Password)\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0\r\nOS                             Linux 5.5.8-arch1-1 #1 SMP PREEMPT Fri, 06 Mar 2020 00:57:33 +0000\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-03-14T17:35:18Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "The code is conceptually flawed: `PtrToStringAuto` should be `PtrToStringBSTR` - on Windows, your code happens to work, because the `Auto` translates to UTF-16, which is what BSTRs are; on Unix-like platforms, it translates to UTF-8, which is why the code breaks.\r\n\r\nNote that you should avoid `SecureString` on Unix-like platforms altogether, because _no encryption_ is used.\r\n\r\nEven on Windows its use is no longer recommended.\r\n\r\nSee https://github.com/dotnet/platform-compat/blob/master/docs/DE0001.md for more.\r\n\r\nYour workaround is arguably the better approach to begin with, though note that obtaining a plain-text copy is problematic even on Windows.\r\n\r\n\r\n\r\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/9141961?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/dotnet/platform-compat\">dotnet/platform-compat</a></strong></div><div>Roslyn analyzer that finds usages of APIs that will throw PlatformNotSupportedException on certain platforms. - dotnet/platform-compat</div></blockquote>",
      "created_at": "2020-03-12T13:42:46Z",
      "updated_at": "2020-03-12T13:44:25Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "It doesn't help that a majority of code written like this will use the `Auto` method and the pattern is very common in solutions on SO and blog posts all over the place.\r\n\r\nBut that's because they're all written on Windows, and most of them just copied the solution they found -- @mklement0 is 100% correct. It's unfortunate that the popular solution is the one that only works on WIndows, but I suppose that's just how it goes seeing as how for over a decade PowerShell was a Windows-only tool. \ud83d\ude42 ",
      "created_at": "2020-03-12T15:00:22Z",
      "updated_at": "2020-03-12T15:00:22Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "@agowa338 You can also use the new built-in functionality to do this:\r\n\r\n```\r\nConvertFrom-SecureString $APIKey -AsPlainText\r\n```",
      "created_at": "2020-03-12T15:52:40Z",
      "updated_at": "2020-03-12T15:52:40Z"
    },
    {
      "author": "klemmestad",
      "author_association": "NONE",
      "body": "I still think this is a breaking change. `PtrToStringAuto` worked on all platforms on PowerShell version 6.2 (at least). Upgrading to PowerShell 7 broke my code and installing PowerShell 7 replaces version 6, thus forcing me to downgrade by uninstall/install until I could figure out a fix. Switching to `PtrToStringUni` solved it for me. I probably should have used it from the start, but all examples I found for reverting securestrings to plaintext were using `PtrToStringAuto`.",
      "created_at": "2020-03-12T18:11:43Z",
      "updated_at": "2020-03-12T18:12:30Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@klemmestad it's not a change at all. The method works the same way it always did. \r\n\r\nThe difference is that it doesn't work _as you expected_, because different operating systems have different default encodings for certain types of memory.\r\n\r\nThat's not a breaking change, that's just a difference from the underlying platform. PowerShell cannot magically change the .NET method (the documentation for which is [here](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.ptrtostringauto?view=netcore-3.1)).\r\n\r\nIf you want to argue .NET Core should change the behaviour at some point, you're more than free to. But I doubt they'd agree. There's nothing wrong with the method, it's just not the appropriate method for the desired task on all platforms.\r\n",
      "created_at": "2020-03-12T18:16:58Z",
      "updated_at": "2020-03-12T18:16:58Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32, actually, there was a change, namely in .NET Core 3.0, but that change was a _bug fix_; in short:\r\n\r\n* `PtrToStringAuto` was _broken in .NET Core 2.x_, because it incorrectly assumed UTF-16 on Unix platforms too - as a _lucky side effect_ of this bug , the conceptually flawed `PtrToStringAuto` code _happened to_ work on Unix-like platforms too in PowerShell Core 6.x.\r\n\r\n* .NET Core 3.x, which PowerShell 7 is based on, fixed that - which just so happened to expose the conceptual flaw.\r\n\r\nSee https://github.com/PowerShell/PowerShell/issues/11953#issuecomment-591572070 for details.\r\n",
      "created_at": "2020-03-12T18:21:59Z",
      "updated_at": "2020-03-12T18:21:59Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Thanks for the clarification @mklement0! \ud83d\ude42 ",
      "created_at": "2020-03-12T18:23:32Z",
      "updated_at": "2020-03-12T18:23:32Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@klemmestad, as @vexx32 has stated, it's unfortunate that there are so many flawed examples with `PtrtToStringAuto` out there.\r\n\r\nThere was never a good reason to use it, and, similarly, there's no good reason to use `PtrToStringUni` (though the latter is unlikely to break) - only [`PtrToStringBSTR`](https://docs.microsoft.com/en-US/dotnet/api/System.Runtime.InteropServices.Marshal.PtrToStringBSTR) should ever have been used.\r\n\r\nGoing forward, the method suggested by @rkeithhill is the way to go (`ConvertFrom-SecureString -AsPlainText`), but, to reiterate the warning, on _Unix_ `SecureString` offers virtually no protection to begin with.",
      "created_at": "2020-03-12T18:31:11Z",
      "updated_at": "2020-03-12T18:36:16Z"
    },
    {
      "author": "klemmestad",
      "author_association": "NONE",
      "body": "@mklement0, thank you for explaining so clearly! I will use `PtrToStringBSTR`. I need to support earlier PowerShell versions, so `ConvertFrom-SecureString -AsPlainText` is out of my reach for now \ud83d\ude22\r\n\r\nMy use case is simple, a password and an API key that are used to authenticate to a SOAP API using `BasicHttpsBinding` with basic authentication. I suspect my use of `SecureString` does not add any real security on any platform \ud83d\ude48\r\n\r\nAny pointers I could use to improve my game would be very welcome.",
      "created_at": "2020-03-12T21:09:11Z",
      "updated_at": "2020-03-12T21:09:11Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "This is not very performant but it is simple:\r\n```\r\n03-12 15:43:13 1> $ss = Read-Host -AsSecureString\r\n***********\r\n03-12 15:43:31 2> $cred = [pscredential]::new('a', $ss)\r\n03-12 15:43:58 3> $cred.GetNetworkCredential().Password\r\nopen sesame\r\n```",
      "created_at": "2020-03-12T21:44:27Z",
      "updated_at": "2020-03-12T21:44:50Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "> on Unix `SecureString` offers virtually no protection to begin with\r\n\r\nThere are at least two protections provided (indirectly) by using SecureString:\r\n\r\n1. Hiding input as it is typed or pasted onto the console.\r\n2. Hiding secret text when you output a SecureString to the console.\r\n\r\nWhenever `Read-Host` supports a `-MaskInput` parameter, that would mitigate #1 to some extent.  The better mitigation appears to be the proposal for a `SensitiveString` in .NET Core where PowerShell could key off that type to provide the two features listed above.",
      "created_at": "2020-03-12T21:52:05Z",
      "updated_at": "2020-03-12T21:52:24Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@rkeithhill, yes, but you can cut out the middleman to use what @agowa338's original post shows (I originally missed it too):\r\n\r\n```powershell\r\n$ss = Read-Host -AsSecureString; [Net.NetworkCredential]::new('', $ss).Password\r\n```\r\n\r\n> There are at least two protections\r\n\r\nYes, using `SecureString`  is _better_ than dealing with plain-text strings, but I wanted to point out that _no encryption_ is involved on Unix, which is especially problematic if you _persist_ a `SecureString` instance (by saving the output from `ConvertFrom-SecureString` to a file / using `Export-CliXml` with a `[pscredential]` object), in which case the resulting file can be trivially decoded to reveal its \"secret\" - see https://stackoverflow.com/a/55797281/45375\r\n\r\n> the proposal for a `SensitiveString` in .NET Core\r\n\r\nWhat proposal is that?\r\n\r\n\r\n\r\n<blockquote><img src=\"https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded\" width=\"48\" align=\"right\"><div>Stack Overflow</div><div><strong><a href=\"https://stackoverflow.com/questions/55782846/are-there-any-implicit-assumptions-in-import-clixml-when-importing-credentials\">Are there any implicit assumptions in Import-Clixml when importing credentials?</a></strong></div><div>I wonder if there are any implicit assumptions that I've taken that may make the code malfunction?\r\n\r\nThere is a reason I want to avoid using Import-Clixml cmdlet?\r\nHence, I've developed an alternativ...</div></blockquote>",
      "created_at": "2020-03-12T21:59:18Z",
      "updated_at": "2020-03-12T22:03:30Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Found the reference to `SensitiveString` and it's not a proposal, just @SteveL-MSFT thinking out loud.  Sorry.  https://github.com/PowerShell/PowerShell/issues/11067#issuecomment-554143830",
      "created_at": "2020-03-12T22:38:10Z",
      "updated_at": "2020-03-12T22:38:10Z"
    }
  ],
  "created_at": "2020-03-12T13:31:26Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 12114,
  "state": "closed",
  "title": "Getting unsecure password of securestring is broken",
  "updated_at": "2020-03-14T17:35:18Z"
}