{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4113",
  "author": "daxian-dbw",
  "body": "Repro\r\n------\r\nModule folder structure:\r\n```\r\nPS:18> tree F:\\tmp\\test /F\r\nF:\\TMP\\TEST\r\n    test.psd1\r\n    test.psm1\r\n```\r\n`test.psm1` uses the powershell class `Foo`:\r\n```\r\nPS:20> cat .\\test.psm1\r\nclass Bar {\r\n    [string] $Bar = \"bar\"\r\n    [void] Print()\r\n    {\r\n        Write-Host ($this.Bar)\r\n    }\r\n}\r\n```\r\n`test.psm1` is a nested module defined in `test.psd1`\r\n```\r\nPS:21> cat .\\test.psd1\r\n@{\r\nModuleVersion = '1.0'\r\nGUID = 'e812e452-6a43-4fe7-9738-375c2fbdd577'\r\nNestedModules = @(\"test.psm1\")\r\nFunctionsToExport = @()\r\nCmdletsToExport = @()\r\nVariablesToExport = '*'\r\nAliasesToExport = @()\r\n}\r\n```\r\nRun the following scripts in global scope\r\n```\r\nusing module F:\\tmp\\test\r\n[Bar]\r\n```\r\nAnd then run the following scripts\r\n```\r\nusing module F:\\tmp\\test\\test.psm1\r\n[Bar]\r\n```\r\nCompare the results\r\n\r\nExpected Behavior\r\n--------------------\r\n`[Bar]` should be resolved successfully in both case\r\n\r\nActual Behavior\r\n-----------------\r\n```none\r\nPS:2> using module F:\\tmp\\test\r\n[F:\\]\r\nPS:3> [Bar]\r\nUnable to find type [Bar].\r\nAt line:1 char:1\r\n+ [Bar]\r\n+ ~~~~~\r\n    + CategoryInfo          : InvalidOperation: (Bar:TypeName) [], RuntimeException\r\n    + FullyQualifiedErrorId : TypeNotFound\r\n\r\n[F:\\]\r\nPS:4> using module F:\\tmp\\test\\test.psm1\r\n[F:\\]\r\nPS:5> [Bar]\r\n\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     False    Bar                                      System.Object\r\n```\r\n\r\nMore Information\r\n-------------------\r\nHowever, when put the following repro scripts in a .ps1 file, say `run.ps1`\r\n```\r\nusing module F:\\tmp\\test\r\n[Bar]\r\n```\r\nor\r\n```\r\nusing module F:\\tmp\\test\\test.psm1\r\n[Bar]\r\n```\r\nthen `run.ps1` works as expected in both cases:\r\n```\r\nPS:16> cat .\\run.ps1\r\nusing module F:\\tmp\\test\r\n[Bar]\r\n[F:\\tmp]\r\nPS:17> .\\run.ps1\r\n\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     False    Bar                                      System.Object\r\n```\r\nand \r\n```\r\nPS:19> cat .\\run.ps1\r\nusing module F:\\tmp\\test\\test.psm1\r\n[Bar]\r\n[F:\\tmp]\r\nPS:20> .\\run.ps1\r\n\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     False    Bar                                      System.Object\r\n```\r\n\r\nSummary\r\n----------\r\nAs you can see from the above behavior, it's inconsistent and confusing.\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2017-06-27T00:50:02Z",
  "labels": [
    "Issue-Bug",
    "WG-Engine"
  ],
  "number": 4113,
  "state": "open",
  "title": "Running `using module f:\\tmp\\test` in global scope doesn't load the powershell class defined in the module to the global scope, while `using module f:\\tmp\\test\\test.psm1` does",
  "updated_at": "2017-06-28T09:26:40Z"
}