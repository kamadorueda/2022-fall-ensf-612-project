{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17129",
  "author": "brandoncomputer",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nWhen run the first time, this form becomes DPI aware. The proper math will adjust the form to the users monitor scale.\r\nUpon running the second time, the form is DPI aware at the start of the session, meaning $vscreen already returns the monitors height instead of the legacy scale height.\r\n\r\n**_Any .Net form presented on the system afterwards will be DPI aware which is not the intent._** \r\n\r\n```\r\nAdd-Type -AssemblyName System.Windows.Forms, System.Drawing, presentationframework\r\n$vscreen = [System.Windows.Forms.SystemInformation]::VirtualScreen.height\r\n\r\n[xml]$xml = @\"\r\n            <Window\r\n                    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n                    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">\r\n            </Window>\r\n\"@\r\n$dum = (New-Object System.Xml.XmlNodeReader $xml)\r\n$win = [Windows.Markup.XamlReader]::Load($dum)\r\n\r\n$screen = [System.Windows.Forms.SystemInformation]::VirtualScreen.height\r\n\r\n$global:ctscale = ($screen/$vscreen)\r\n    \r\n$Form = New-Object System.Windows.Forms.Form\r\n\t$Form.Text=\"Form\"\r\n\t$Form.Width = 600 * $ctscale\r\n\t$Form.Height = 480 * $ctscale\r\n    \r\n\r\n\t$Button1 = New-Object System.Windows.Forms.Button\r\n\t\t$Button1.Text=\"Button1\"\r\n\t\t$Button1.Width=75 * $ctscale\r\n\t\t$Button1.Height=23 * $ctscale\r\n\t\t$Button1.Top=84 * $ctscale\r\n\t\t$Button1.Left=144 * $ctscale\r\n        $Form.Controls.Add($Button1)\r\n\t\t#$Button1.add_Click({[System.Windows.Forms.MessageBox]::Show(\"Button1 click!\",\"Example Event\",\"OK\",64) | Out-Null})\r\n[System.Windows.Forms.Application]::Run($Form) | Out-Null\r\n\t#For consecutive forms use $Form.Show() or modal $Form.ShowDialog(). Only use Run once.\r\n```\n\n### Expected behavior\n\n```console\n.Net Form DPI awarness from the session should not stick after .Net Form is closed for other .Net Forms.\n```\n\n\n### Actual behavior\n\n```console\n.Net Form DPI awarness from the session sticks after .Net Form is closed for other .Net Forms.\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.2\r\nPSEdition                      Core\r\nGitCommitId                    7.2.2\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n### Expected Appearance after above script is run for second script that is not using the WPF scaling trick\r\n![image](https://user-images.githubusercontent.com/3017980/162585310-ec5b6291-3438-41a0-b792-5cfbfc4d242d.png)\r\n\r\n### Actual Appearance after above script is run for second script that is not using the WPF scaling trick\r\n![image](https://user-images.githubusercontent.com/3017980/162585324-160060d4-6091-44f1-bab6-c45ccd83f437.png)\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "brandoncomputer",
      "author_association": "NONE",
      "body": "Using the \"Run with Powershell 7\" context verb reliably produces the results above on scripts ran after the trick is conducted. Dot sourcing the script from the console works a few times until the issue is fully ingrained ~ it eventually does still break.",
      "created_at": "2022-04-09T17:50:48Z",
      "updated_at": "2022-04-09T17:50:48Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "While this is reproducible with PowerShell it's entirely using .NET APIs here, so I don't think there's anything PowerShell can reasonably do to make this more usable.\r\n\r\nYou're probably better off filing an issue in the [dotnet/wpf](https://github.com/dotnet/wpf) repository where the actual code for these APIs is maintained. They may be able to offer suggestions on better ways to do what you're after, or fix any relevant bugs. PowerShell simply consumes and exposes the API for use, we can't change what it's doing.",
      "created_at": "2022-04-09T17:55:57Z",
      "updated_at": "2022-04-09T17:55:57Z"
    },
    {
      "author": "brandoncomputer",
      "author_association": "NONE",
      "body": "I do appreciate vexx32's comment here, and likely this will take some collaboration between the WPF, Forms, Runtime and Powershell teams to resolve, however I arrived at this difficulty from experiences with PowerShell specifically between 5.1 and 7.2.2.\r\n\r\nRather than get the run around on the stack carousel, I'll instead have the realization that ultimately either the PowerShell team cares about user experience, or they do not.  Ultimately users that run the code above will cause trauma to their _Powershell 7.2.2_ installation that will cause unexpected behaviors, so I think this is the best place for the issue to remain.",
      "created_at": "2022-04-09T20:54:48Z",
      "updated_at": "2022-04-09T20:54:48Z"
    },
    {
      "author": "brandoncomputer",
      "author_association": "NONE",
      "body": "Further evidence is a cure exists, uninstall Powershell 7.2.2, reboot and reinstall Powershell 7.2.2, the UX experience is restored.",
      "created_at": "2022-04-09T21:00:54Z",
      "updated_at": "2022-04-09T21:00:54Z"
    }
  ],
  "created_at": "2022-04-09T17:41:13Z",
  "number": 17129,
  "state": "open",
  "title": ".NET Forms DPI Awarness Trick Involving WPF Breaks .NET Forms Legacy Scale Mode for all Forms Presented after Trick is Conducted One Time",
  "updated_at": "2022-04-09T21:00:54Z"
}