{
  "_url": "https://github.com/PowerShell/PowerShell/issues/18469",
  "author": "237dmitry",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nThere is too much difference in the readings of the `/usr/bin/uptime` and the `Get-Uptime` cmdlet\r\n\r\n```powershell\r\n PS > uptime -p\r\nup 2 days, 16 hours, 26 minutes\r\n \r\nPS > (Get-Uptime).ToString()\r\n1.13:45:12\r\n```\r\n\r\n### Expected behavior\r\n\r\n```console\r\nExpected equal values\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nDifferent values\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.3.0-rc.1\r\nPSEdition                      Core\r\nGitCommitId                    7.3.0-rc.1\r\nOS                             Linux 6.0.6-arch1-1 #1 SMP PREEMPT_DYNAMIC Sat, 29 Oct 2022 14:08:39 +0000\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```\r\n\r\n### Visuals\r\n\r\n![up](https://user-images.githubusercontent.com/78153320/200090691-424452a1-26ab-4c19-8f64-c32ed99a533c.png)\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "From what I can tell, the current implementation is simply relying on .NET which calls the [native `clock_gettime()` function](https://github.com/dotnet/runtime/blob/c4341d45acca3ea662cd8d71e7d71094450dd045/src/coreclr/gc/unix/gcenv.unix.cpp#L1474-L1512).  However, it may request `CLOCK_MONOTONIC` which gives the time since the system booted, but does NOT include any time when the system was suspended.  It seems that it should be `CLOCK_BOOTTIME` which includes any suspended time.  Looking through the .NET source, they only use `CLOCK_BOOTTIME` to calculate the start time of processes and is not public.  So it seems the best option is to P/Invoke the API on non-Windows.",
      "created_at": "2022-11-05T01:05:02Z",
      "updated_at": "2022-11-05T01:05:02Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I think it might depend on your distro as the reference code does have different API calls depending on what is available on the system.  On my Ubuntu 22.04 install, `uptime -p` and `get-uptime` match.",
      "created_at": "2022-11-05T02:25:33Z",
      "updated_at": "2022-11-05T02:25:33Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> but does NOT include any time when the system was suspended.\r\n\r\nYes, after reboot values was identical, when I closed the lid of laptop for three minutes I got the difference in values.\r\nPerhaps it would be correct to take timespan from the last boot time?\r\n```\r\n $ who -b\r\n         system boot  2022-11-05 11:39\r\n\r\n $ (last -x reboot)[0]\r\nreboot   system boot  6.0.7-arch1-1    Sat Nov  5 11:39   still running\r\n```",
      "created_at": "2022-11-05T09:17:44Z",
      "updated_at": "2022-11-05T09:27:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Looking through the .NET source, they only use `CLOCK_BOOTTIME` to calculate the start time of processes and is not public. So it seems the best option is to P/Invoke the API on non-Windows.\r\n\r\nThis doesn't work on all platforms.\r\n\r\nBest option is to request new API in .Net `System.Environment.Uptime`.\r\nUntil that, since it is not critical, we could add a workaround for Linux systems and use `/proc/uptime`.",
      "created_at": "2022-11-05T09:41:53Z",
      "updated_at": "2022-11-05T09:41:53Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> we could add a workaround for Linux systems and use /proc/uptime\r\n\r\nThis works.\r\n```powershell\r\n $ [timespan]::FromMilliseconds(([int](gc /proc/uptime).Split()[0] * 1000)).ToString()\r\n01:33:18\r\n \r\n $ uptime -p\r\nup 1 hour, 33 minutes\r\n```",
      "created_at": "2022-11-05T10:16:09Z",
      "updated_at": "2022-11-05T10:16:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We use `Stopwatch.GetTimestamp()` and if it takes into account suspend time on Windows but not on Unix this looks like a bug. It makes sense to open new issue in .Net Runtime repository.",
      "created_at": "2022-11-05T14:51:05Z",
      "updated_at": "2022-11-05T14:51:05Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov I tend to agree that this seems like a bug that should be fixed in .NET",
      "created_at": "2022-11-07T02:00:21Z",
      "updated_at": "2022-11-07T02:00:21Z"
    }
  ],
  "created_at": "2022-11-04T23:55:35Z",
  "number": 18469,
  "state": "open",
  "title": "Uptime Linux",
  "updated_at": "2022-11-07T02:00:21Z"
}