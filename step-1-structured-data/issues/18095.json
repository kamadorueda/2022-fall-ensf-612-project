{
  "_url": "https://github.com/PowerShell/PowerShell/issues/18095",
  "author": "daxian-dbw",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nOnly return types that are not auto-generated by compiler with `Add-Type -PassThru`.\r\n\r\nAn improvement was made to `Microsoft.CodeAnalysis.CSharp` to allow compiler to generate private helper class sometimes for performance reason (see an example below). Passing through all types from the assembly cause one of our tests to fail:\r\n\r\nhttps://dev.azure.com/powershell/PowerShell/_build/results?buildId=108821&view=logs&j=77295986-da6b-5a15-d60e-dfb16acd57ef&t=a58f8c58-10a4-5f19-f6fe-df1d6acdd5db&l=685\r\n\r\nThis PR makes `-PassThru` to only return types that are not compiler generated. It's technically a breaking change, but should be in \"Bucket 3 - gray area\".\r\n\r\n```\r\n$classDefinition = @'\r\nusing System;\r\nusing System.Management.Automation;\r\nusing System.Management.Automation.Runspaces;\r\nusing System.Threading;\r\nnamespace StackTest {\r\n    public class StackDepthTest {\r\n        public static PowerShell ps;\r\n        public static int size = 512 * 1024;\r\n        public static void CauseError() {\r\n            Thread t = new Thread(RunPS, size);\r\n            t.Start();\r\n            t.Join();\r\n        }\r\n\r\n        public static void RunPS() {\r\n            InitialSessionState iss = InitialSessionState.CreateDefault2();\r\n            iss.ThreadOptions = PSThreadOptions.UseCurrentThread;\r\n            ps = PowerShell.Create(iss);\r\n            ps.AddScript(\"function recurse { recurse }; recurse\").Invoke();\r\n        }\r\n\r\n        public static void GetPSError() {\r\n            if ( ps.Streams.Error.Count > 0) {\r\n                throw ps.Streams.Error[0].Exception.InnerException;\r\n            }\r\n        }\r\n    }\r\n}\r\n'@\r\n\r\nAdd-Type -PassThru -TypeDefinition $classDefinition\r\n\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     False    StackDepthTest                           System.Object\r\nFalse    False    <>O                                      System.Object\r\n```\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [ ] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/main/reference/7.3/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n",
  "closed_at": "2022-09-15T20:34:09Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@SeeminglyScience Can you please take a look and see if this will cause any problem to VSCode Extension? ",
      "created_at": "2022-09-14T23:58:58Z",
      "updated_at": "2022-09-14T23:58:58Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> @SeeminglyScience Can you please take a look and see if this will cause any problem to VSCode Extension?\r\n\r\nI think all is good on the VSCode side \ud83c\udf89\r\n\r\nThough, I can imagine someone generating p/invokes as internal and doing `(Add-Type -Passthru)[0]::PInvokeName()` or something like that to avoid polluting type resolution.\r\n\r\nWould definitely be slower, but maybe worth considering looking for `CompilerGeneratedAttribute` decorations as a filter",
      "created_at": "2022-09-15T01:38:15Z",
      "updated_at": "2022-09-15T01:38:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> A breaking change is made to new versions of `Microsoft.CodeAnalysis.CSharp` to make the compiler generate private helper class sometimes (see an example below).\r\n\r\nLooks like a bug. Why should we hide it?\r\n\r\nThe fix looks like very sensitive breaking change in the cmdlet. ",
      "created_at": "2022-09-15T05:20:23Z",
      "updated_at": "2022-09-15T05:20:23Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> > A breaking change is made to new versions of `Microsoft.CodeAnalysis.CSharp` to make the compiler generate private helper class sometimes (see an example below).\r\n> \r\n> Looks like a bug. Why should we hide it?\r\n> \r\n> The fix looks like very sensitive breaking change in the cmdlet.\r\n\r\nRoslyn has always created private helper types in certain conditions, typically for performance reasons. I don't think they would consider this change breaking, they expect all tooling that reads types to ignore anything decorated with `CompilerGeneratedAttribute` when the exclusion of them is required.",
      "created_at": "2022-09-15T16:13:23Z",
      "updated_at": "2022-09-15T16:13:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> > > A breaking change is made to new versions of `Microsoft.CodeAnalysis.CSharp` to make the compiler generate private helper class sometimes (see an example below).\r\n> > \r\n> > \r\n> > Looks like a bug. Why should we hide it?\r\n> > The fix looks like very sensitive breaking change in the cmdlet.\r\n> \r\n> Roslyn has always created private helper types in certain conditions, typically for performance reasons. I don't think they would consider this change breaking, they expect all tooling that reads types to ignore anything decorated with `CompilerGeneratedAttribute` when the exclusion of them is required.\r\n\r\nMaybe they lost the attribute for member we see? :-)\r\n\r\nAnd your comment raises the same question - why should we hide if they don't?",
      "created_at": "2022-09-15T16:18:16Z",
      "updated_at": "2022-09-15T16:18:16Z"
    },
    {
      "author": "pull-request-quantifier[bot]",
      "author_association": "NONE",
      "body": "### ![](https://img.shields.io/static/v1?label=Quantified&message=Extra%20Small&color=green)\r\n\r\nThis PR has `5` quantified lines of changes. In general, a change size of upto `200` lines is ideal for the best PR experience!\r\n\r\n------\r\n\r\n<details >\r\n    <summary display=\"inline\"> <strong>Quantification details</strong></summary>\r\n    <p />\r\n\r\n```\r\nLabel      : Extra Small\r\nSize       : +4 -1\r\nPercentile : 2%\r\n\r\nTotal files changed: 1\r\n\r\nChange summary by file extension:\r\n.cs : +4 -1\r\n```\r\n> Change counts above are quantified counts, based on the [PullRequestQuantifier customizations](https://github.com/microsoft/PullRequestQuantifier/blob/main/docs/prquantifier-yaml.md).\r\n    \r\n</details>\r\n\r\n\r\n<details>\r\n    <summary display=\"inline\"> <strong>Why proper sizing of changes matters</strong> </summary>\r\n    <p/>\r\n    <p/>\r\n\r\nOptimal pull request sizes drive a better predictable PR flow as they strike a\r\nbalance between between PR complexity and PR review overhead. PRs within the\r\noptimal size (typical small, or medium sized PRs) mean:\r\n\r\n- Fast and predictable releases to production:\r\n  - Optimal size changes are more likely to be reviewed faster with fewer\r\niterations.\r\n  - Similarity in low PR complexity drives similar review times.\r\n- Review quality is likely higher as complexity is lower:\r\n  - Bugs are more likely to be detected.\r\n  - Code inconsistencies are more likely to be detected.\r\n- Knowledge sharing is improved within the participants:\r\n  - Small portions can be assimilated better.\r\n- Better engineering practices are exercised:\r\n  - Solving big problems by dividing them in well contained, smaller problems.\r\n  - Exercising separation of concerns within the code changes.\r\n\r\n#### What can I do to optimize my changes\r\n\r\n- Use the PullRequestQuantifier to quantify your PR accurately\r\n  - Create a context profile for your repo using the [context generator](https://github.com/microsoft/PullRequestQuantifier/releases)\r\n  - Exclude files that are not necessary to be reviewed or do not increase the review complexity. Example: Autogenerated code, docs, project IDE setting files, binaries, etc. Check out the `Excluded` section from your `prquantifier.yaml` context profile. \r\n  - Understand your typical change complexity, drive towards the desired complexity by adjusting the label mapping in your `prquantifier.yaml` context profile.\r\n  - Only use the labels that matter to you, [see context specification](./docs/prquantifier-yaml.md) to customize your `prquantifier.yaml` context profile.\r\n- Change your engineering behaviors\r\n  - For PRs that fall outside of the desired spectrum, review the details and check if:\r\n    - Your PR could be split in smaller, self-contained PRs instead\r\n    - Your PR only solves one particular issue. (For example, don't refactor and code new features in the same PR).\r\n\r\n#### How to interpret the change counts in git diff output\r\n\r\n- One line was added: `+1 -0`\r\n- One line was deleted: `+0 -1`\r\n- One line was modified: `+1 -1` (git diff doesn't know about modified, it will\r\ninterpret that line like one addition plus one deletion)\r\n- Change percentiles: Change characteristics (addition, deletion, modification)\r\nof this PR in relation to all other PRs within the repository.\r\n\r\n</details>\r\n\r\n<p />\r\n\r\n------\r\n\r\nWas this comment helpful? <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiZGF4aWFuLWRidyIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xODA5NSIsIkV2ZW50VHlwZSI6IlRodW1ic1VwIn0=&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs up\"><strong>:thumbsup:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiZGF4aWFuLWRidyIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xODA5NSIsIkV2ZW50VHlwZSI6Ik5ldXRyYWwifQ==&amp;anonymous=True\" target=\"_blank\" title=\"Neutral\"><strong>&nbsp;:ok_hand:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiZGF4aWFuLWRidyIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xODA5NSIsIkV2ZW50VHlwZSI6IlRodW1ic0Rvd24ifQ==&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs down\"><strong>&nbsp;:thumbsdown:</strong></a> (<a href=\"MAILTO:prquantifier@microsoft.com\" title=\"Mail to prquantifier@microsoft.com\">Email</a>)\r\n[Customize PullRequestQuantifier](https://github.com/PowerShell/PowerShell/blob/master/.github/prquantifier.yaml) for this repository.\r\n\r\n",
      "created_at": "2022-09-15T17:44:54Z",
      "updated_at": "2022-09-15T17:44:54Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> Would definitely be slower, but maybe worth considering looking for `CompilerGeneratedAttribute` decorations as a filter\r\n\r\nI like this\ud83d\udc4d\r\nIt's about 60 ms slower when filtering on `CompilerGeneratedAttribute` than calling `GetTypes()/ExportedTypes` for the assembly `System.Management.Automation`. But in practice, I believe when `-PassThru` is specified, the assembly to be inspected will most likely contain a small number of types, so the additional perf cost won't be much.",
      "created_at": "2022-09-15T18:00:26Z",
      "updated_at": "2022-09-15T18:23:41Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> Maybe they lost the attribute for member we see? :-)\r\nAnd your comment raises the same question - why should we hide if they don't?\r\n\r\nNope, nothing is hidden. It's an improvement to the emitted code.\r\n- The assembly generated from the same source code in PS 7.2.6 doesn't do any optimization around wrapping `RunPS` to a delegate -- every time `CauseError` is called, the static method `RunPS` will be wrapped to a new delegate.\r\n- With the improvement in the new `Microsoft.CodeAnalysis.CSharp`, a helper class is generated to hold the delegate, so the delegate gets created only once.\r\n\r\nI have updated the PR description to say it's an improvement, instead of a breaking change :)",
      "created_at": "2022-09-15T18:51:42Z",
      "updated_at": "2022-09-15T19:09:03Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "/backport to release/v7.3.0-rc.1",
      "created_at": "2022-09-15T21:15:29Z",
      "updated_at": "2022-09-15T21:15:29Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.3.0-preview.8` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.3.0-preview.8)\n",
      "created_at": "2022-09-20T19:41:43Z",
      "updated_at": "2022-09-20T19:41:43Z"
    }
  ],
  "created_at": "2022-09-14T23:52:44Z",
  "number": 18095,
  "state": "closed",
  "title": "Filter out compiler generated types for `Add-Type -PassThru`",
  "updated_at": "2022-09-20T19:41:43Z"
}