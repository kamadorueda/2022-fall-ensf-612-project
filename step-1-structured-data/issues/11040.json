{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11040",
  "author": "rjmholt",
  "body": "# PR Summary\r\n\r\nThis PR alters the way we compile subpipelines `(...)`, subexpressions `$(...)` and array expressions `@()` so that `$?` is not automatically true after them in the pipeline, but instead depends on the pipeline or statements they executed.\r\n\r\nI've added tests for the various behaviours of this, plus some extra tests for pipeline chain operators, which this aids the UX of.\r\n\r\nI've structured my changes by commit, so you'll probably find it easier to read this PR from commit to commit.\r\n\r\n## PR Context\r\n\r\nIn https://github.com/PowerShell/PowerShell/pull/9849, the `&&` and `||` operators were introduced, but currently suffer from the implementation of `$?`. Specifically:\r\n\r\n```powershell\r\nWrite-Error \"Bad\" || Write-Output \"Hi\" # Outputs \"Hi\"\r\n\r\n(Write-Error \"Bad\") || Write-Output \"Hi\" # Outputs only the error\r\n```\r\n\r\nThis makes pipeline chain operators hard to use insofar as they can't be rearranged conveniently by means of parentheses.\r\n\r\nIn this PR, we change the implementation so that expression-only pipelines only have `$?` forcibly set when they are a pure value, expressions that actually execute their commands with `$?` set by the subpipeline.\r\n\r\n## Further considerations\r\n\r\n- This PR likely requires an RFC, which I can begin authoring immediately and will link back here\r\n- Calling `Write-Error` from within another function still has that function leaving `$?` as true. I looked into changing that behaviour briefly and it would be fairly complicated.\r\n- This PR doesn't try to expose new mechanisms for cmdlets to set `$?`\r\n\r\nAs a final note, looking into how to change this, it seems that while this behaviour may or may not have been originally intended, it occurs because we fix an assumption where all expressions in the pipeline are treated like *pure* expressions, which are optimised to be evaluated without the pipeline so need a `$? = $true` added after them. So theoretically this change also is a small (very small) performance improvement.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2019-11-15T19:57:46Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@rjmholt don't start writing a RFC for this, I believe after @PowerShell/powershell-committee review, it'll just be an update to your existing RFC",
      "created_at": "2019-11-12T00:07:05Z",
      "updated_at": "2019-11-12T00:07:05Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@rjmholt does this also affect the behaviour of `@()` array subexpressions? :thinking: ",
      "created_at": "2019-11-12T11:32:03Z",
      "updated_at": "2019-11-12T11:32:03Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> @rjmholt does this also affect the behaviour of @() array subexpressions? \ud83e\udd14\r\n\r\nNot currently. I can add tests so we can establish what the behaviour is and then should be.",
      "created_at": "2019-11-12T16:27:48Z",
      "updated_at": "2019-11-12T16:27:48Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 @KirkMunro are there any other expressions you can think of that could conceivably contain a statement?",
      "created_at": "2019-11-13T17:41:55Z",
      "updated_at": "2019-11-13T17:41:55Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "> @vexx32 @KirkMunro are there any other expressions you can think of that could conceivably contain a statement?\r\n\r\nBrackets, array enclosures, subexpressions, and anonymous functions (script blocks that are dot-sourced or invoked) are the only things that come to mind for me.",
      "created_at": "2019-11-13T17:57:36Z",
      "updated_at": "2019-11-13T17:57:36Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah that's all I got, I think that about covers all the things we can do. Thanks for digging into this, Rob! \ud83d\ude0a \ud83d\udc96 ",
      "created_at": "2019-11-13T18:17:57Z",
      "updated_at": "2019-11-13T18:17:57Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this and agree this is the correct behavior of `$?` although it is a breaking change but unlikely to impact existing users",
      "created_at": "2019-11-14T00:42:40Z",
      "updated_at": "2019-11-14T00:42:40Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "One case I just thought of: `\"$(Write-Error \"Bad\")\"; $?`. Not sure what the right behaviour there is.\r\n\r\nThink for now we should leave it. Small (and strange) enough to address later.",
      "created_at": "2019-11-14T19:21:32Z",
      "updated_at": "2019-11-14T19:21:32Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I would be perfectly happy to just set `$?` to \"undefined\" at that point tbh Rob \ud83d\ude02 ",
      "created_at": "2019-11-14T19:31:34Z",
      "updated_at": "2019-11-14T19:31:34Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "> One case I just thought of: `\"$(Write-Error \"Bad\")\"; $?`. Not sure what the right behaviour there is.\r\n\r\nIf you're embedding the results of a subexpression inside of a string, my initial reaction is that the outermost string-building should influence dollar-hook as it does now, because the string still gets built in that case, and that's what `$?` is checking.\r\n\r\nThat said, should a scalar or string value ever influence dollar-hook? There isn't much value in that.",
      "created_at": "2019-11-14T19:32:05Z",
      "updated_at": "2019-11-14T19:35:55Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> If you're embedding the results of a subexpression inside of a string, my initial reaction is that the outermost string-building should influence dollar-hook as it does now, because the string still gets built in that case, and that's what $? is checking.\r\n\r\nGiven that the string value is returned, I very much agree. Have added tests for that.",
      "created_at": "2019-11-15T00:29:08Z",
      "updated_at": "2019-11-15T00:29:08Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.0.0-preview.6` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.6)\n",
      "created_at": "2019-11-21T22:36:09Z",
      "updated_at": "2019-11-21T22:36:09Z"
    }
  ],
  "created_at": "2019-11-11T22:48:56Z",
  "number": 11040,
  "state": "closed",
  "title": "Stop setting $? to true for subpipelines and subexpressions",
  "updated_at": "2021-06-16T21:19:58Z"
}