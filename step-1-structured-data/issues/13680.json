{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13680",
  "author": "PowershellScripter",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\n## Steps to reproduce\r\n\r\n```\r\n\r\nadding ADD_EXPLORER_CONTEXT_MENU_OPENPOWERSHELL=0 to msiexec options for \r\n\r\nPowershell 7.0.3\r\n&\r\nPowershell 7.1.0\r\n\r\ndoes not work, as context menu options are still added regardless of the value set.\r\n\r\n\r\n```\r\n\r\n## Expected behavior\r\n\r\n```\r\nPowershell installer should not add context menu option to registry if value is set to 0\r\n\r\n```\r\n\r\n## Actual behavior\r\n\r\n```\r\n\r\nPowershell installer is still adding context menu for powershell in explorer window \r\n\r\n```\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.3\r\nPSEdition                      Core\r\nGitCommitId                    7.0.3\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.0-preview.7\r\nPSEdition                      Core\r\nGitCommitId                    7.1.0-preview.7\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n\r\n\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Perhaps @heaths could comment the issue.",
      "created_at": "2020-09-24T07:09:14Z",
      "updated_at": "2020-09-24T07:09:14Z"
    },
    {
      "author": "heaths",
      "author_association": "CONTRIBUTOR",
      "body": "Property condition checks in Windows Installer are traditionally, is it set or not? 0 is not treated as false. This is true of Winodws Insatller standard properties as well. If you want to force a property to \"off\" (undefined), set it's value to nothing:\r\n\r\n```\r\nmsiexec /i powershell.msi /l*v \"%TEMP%\"\\install.log\" /qn ADD_EXPLORER_CONTEXT_MENU_OPENPOWERSHELL=\r\n```",
      "created_at": "2020-09-25T19:51:04Z",
      "updated_at": "2020-09-25T19:51:04Z"
    },
    {
      "author": "PowershellScripter",
      "author_association": "NONE",
      "body": "I have already tested every variation of this condition. I install MSI's all the time as im the IT Admin for my company. I have used all possible variations of this flag to test true and false and none work. The other 2 flags of the install do infact work. I have created the installer logs and used a difference comparison program to weed out the differences. As you will see from the raw logs themselves as well as the screenshots I have included, the first install (left) shows the True flag for context menu and the second install (right) shwos the False flag, and both show adding the context menu registry keys and the other screenshot is showing the context menu existing (after specifying dont add to context menu) for powershell 7.0.3 in file explorer. This exact same thing happens with the latest 7.1.x release of powershell preview.\r\n[powershell-install(ADD-CONTEXT).log](https://github.com/PowerShell/PowerShell/files/5293286/powershell-install.ADD-CONTEXT.log)\r\n[powershell-install2(DONT-ADD-CONTEXT).log](https://github.com/PowerShell/PowerShell/files/5293287/powershell-install2.DONT-ADD-CONTEXT.log)\r\n![regedit-diff](https://user-images.githubusercontent.com/71091773/94451700-9352cf80-0163-11eb-8fe0-282f3edcc9e3.png)\r\n![regedit-diff2](https://user-images.githubusercontent.com/71091773/94451705-93eb6600-0163-11eb-911e-6f77f7a8afea.png)\r\n![regedit-diff3](https://user-images.githubusercontent.com/71091773/94451707-93eb6600-0163-11eb-80df-b359915be1bd.png)\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2020-09-28T15:21:31Z",
      "updated_at": "2020-09-28T15:21:31Z"
    },
    {
      "author": "heaths",
      "author_association": "CONTRIBUTOR",
      "body": "Setting it to 0 still defines the property. Windows Installer only checks if the property is defined when using it in conditions like `PROPNAME` or `NOT PROPNAME`. As described above, to make sure a property is undefined in Windows Installer, simply set it to empty: `PROPNAME=` (no value).",
      "created_at": "2020-09-28T16:33:47Z",
      "updated_at": "2020-09-28T16:33:47Z"
    },
    {
      "author": "PowershellScripter",
      "author_association": "NONE",
      "body": "Okay, going based off what you said, that did not work as adding the property undefined still adds the context menu option\n\n\nMSI (s) (30:D0) [07:31:19:045]: Command Line: ADD_EXPLORER_CONTEXT_MENU_OPENPOWERSHELL=ENABLE_PSREMOTING=1 REGISTER_MANIFEST=1 CURRENTDIRECTORY=C:\\ CLIENTUILEVEL=3 CLIENTPROCESSID=4104\n\n\n\nBut, if I leave out the Property entirely, then it does not add the context menu option\n\n\n[cid:eaaf7faf-b2bb-45af-b9fe-92965a3dec67]\n\n\n\n\nCommand:\nInstall-GitPowershell -Version Preview -AddContextMenu $false -EnableRemoting $true -Manifest $true\n\n\nResult:\n\nMSI (s) (CC:70) [07:37:26:562]: Command Line: ENABLE_PSREMOTING=1 REGISTER_MANIFEST=1 CURRENTDIRECTORY=C:\\ CLIENTUILEVEL=3 CLIENTPROCESSID=16140\n\n\nThank you for the helpful advice. I am creating a powershell module to grab and install the latest powershell version based on stable and preview releases and this is the only part that did not work.\n\nSo, thank you!\n\n\n\n\n\n\n\n\n\n\nThanks,\n\nDennis Fair  |  I.T Systems Admin\nFour Peaks Landscape Management\np: 480-967-0376<tel:480-967-0376>  |  f: 480-967-0406\nm: 480-319-5345<tel:480-319-5345>\ne: it@fourpeakslandscape.com<mailto:it@fourpeakslandscape.com>\n[http://fourpeakslandscape.com/images/four-peaks-landscape-management.png]\n\n\n",
      "created_at": "2020-09-29T14:44:32Z",
      "updated_at": "2020-09-29T14:44:35Z"
    },
    {
      "author": "heaths",
      "author_association": "CONTRIBUTOR",
      "body": "There's no space in your property setting:\r\n```\r\nADD_EXPLORER_CONTEXT_MENU_OPENPOWERSHELL=ENABLE_PSREMOTING=1\r\n```\r\n\r\nThat's setting `ADD_EXPLORER_CONTEXT_MENU_OPENPOWERSHELL` to `ENABLE_PSREMOTING=1`.\r\n\r\nThis is always how conditions in Windows Installer have always worked. Even if custom properties did have to change to handle `0` as `false`, that not only complicates conditions everywhere - risking regressions - but is not possible for standard properties handled by Windows Installer itself. To undefine a property, you set it to an empty string (same with environment variables across platforms).",
      "created_at": "2020-09-29T17:36:20Z",
      "updated_at": "2020-09-29T17:36:20Z"
    },
    {
      "author": "PowershellScripter",
      "author_association": "NONE",
      "body": "I have corrected the error I made on my end as I did not add the null string concentrator to the property. I have added it as so\n\n[cid:75c6549e-7ea0-42b6-bbf7-142497611dc2]\n\n\nand the module uses boolean validate parametersets to distinguish null or enable for context menu\n\n\n[cid:18ae2e64-bee9-4f4c-ba6a-9e0d72de532d]\n\n\n\nThe other 2 flags handle $False as 0 with no issues though so im not understanding why thats the case for those 2 but not for the first one?\n\n\n[cid:fe617fb4-be95-496d-be45-6d477b250734]\n\nI changed the ENABLE_PSREMOTING to null as well\n\n[cid:2f836f66-57fe-47d3-a66d-f14e4c8f2e2e]\n\nand ran\n[cid:602e4a1a-2e5b-47e2-b106-8710b601c94c]\n\nAnd it still kept the install from applying PSRemoting\n\n\n\nAs best practices should I set the default $False value to a null concentrator?\n\n\n\nEither way, the null string works perfectly on the contextmenu property so thank you very much for your insight!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThanks,\n\nDennis Fair  |  I.T Systems Admin\nFour Peaks Landscape Management\np: 480-967-0376<tel:480-967-0376>  |  f: 480-967-0406\nm: 480-319-5345<tel:480-319-5345>\ne: it@fourpeakslandscape.com<mailto:it@fourpeakslandscape.com>\n[http://fourpeakslandscape.com/images/four-peaks-landscape-management.png]\n\n",
      "created_at": "2020-09-29T21:23:48Z",
      "updated_at": "2020-09-29T21:23:51Z"
    }
  ],
  "created_at": "2020-09-23T17:14:26Z",
  "labels": [
    "Issue-Question",
    "Area-Maintainers-Build"
  ],
  "number": 13680,
  "state": "open",
  "title": "\"ADD_EXPLORER_CONTEXT_MENU_OPENPOWERSHELL\" Does not work properly",
  "updated_at": "2020-09-29T21:23:51Z"
}