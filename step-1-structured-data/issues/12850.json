{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12850",
  "author": "SeeminglyScience",
  "body": "I don't really think this should change since it would be a big performance hit and you sort of need to abuse implementation details to do this.  Maybe it should be documented somewhere though?\r\n\r\n<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\nfunction Test-EnumMutation {\r\n    param([Reflection.BindingFlags] $Flags)\r\n    end {\r\n        $Flags.value__ = 30\r\n    }\r\n}\r\n\r\n$myFlags = [Reflection.BindingFlags]::CreateInstance\r\n$myFlags\r\nTest-EnumMutation -Flags $myFlags\r\n$myFlags\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nCreateInstance\r\nCreateInstance\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nCreateInstance\r\nDeclaredOnly, Instance, Static, Public\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.0-preview.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.0-preview.3\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "This may be a candidate for documentation in the [docs wiki](https://github.com/MicrosoftDocs/PowerShell-Docs/wiki), at least initially.\r\n",
      "created_at": "2020-05-31T21:16:00Z",
      "updated_at": "2020-05-31T21:16:00Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Honestly even if the \"documentation\" is just closing this issue as `wontfix` that's probably enough.  I just wanted it recorded somewhere.",
      "created_at": "2020-06-01T12:23:13Z",
      "updated_at": "2020-06-01T12:23:13Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Are we able to quantify the performance hit? \ud83e\udd14 \r\n\r\nIt bothers me just a tad that the copy semantics are so flawed. \ud83d\ude05 ",
      "created_at": "2020-06-01T12:50:49Z",
      "updated_at": "2020-06-01T12:50:49Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Are we able to quantify the performance hit? \ud83e\udd14\r\n\r\nTbh considering most actually immutable structs are copied and no one has noticed... \ud83e\udd37 \r\n\r\nBut changing the value of an enum via it's underlying field is not supported.  Technically, the field can be named whatever the compiler wants.\r\n\r\nI think PowerShell is doing the right thing because enums are supposed to be treated like constants, even if they're technically mutable structs.",
      "created_at": "2020-06-01T13:05:37Z",
      "updated_at": "2020-06-01T13:05:37Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Are enums treated like other value types (copied on assignment) in C#?",
      "created_at": "2020-06-01T13:19:02Z",
      "updated_at": "2020-06-01T13:19:02Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "enum's are basically treated the exact same as their underlying type.\r\n\r\nTake [this sharp lab for instance](https://sharplab.io/#v2:C4LglgNgPgAgTARgLACgYGYAE9MGFMDeqmJ2WMALJgLIAUAlIcaSwBK0AiAhgJ4DyAMwDqAUxEBrAHQAxAE5gAJr3oBuZiQC+6zNozYq7bv2FjxmBQHsA7oyIoWWlBqA):\r\n\r\n```csharp\r\n    public static void M() {\r\n        H(DayOfWeek.Friday);\r\n    }\r\n    \r\n    public static void H(DayOfWeek dow) {\r\n    }\r\n```\r\n\r\nTranslates to this in IL:\r\n\r\n```csharp\r\n// Push an int32 constant of the value 5 onto the stack\r\nIL_0000: ldc.i4.5\r\n\r\n// Call the static method, pulling arguments from values currently pushed on the stack\r\nIL_0001: call void C::H(valuetype [System.Private.CoreLib]System.DayOfWeek)\r\nIL_0006: ret\r\n```\r\n\r\nA struct with a single field of `int` is indistinguishable in memory from an `int` (until boxed).  The C# compiler makes full use of that.",
      "created_at": "2020-06-01T14:20:15Z",
      "updated_at": "2020-06-01T14:20:15Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "To add to that (correct me if I'm wrong, @SeeminglyScience):\r\n\r\n`System.Int32` is the _default_ type _underlying_ - but (of necessity) not _derived_ from - concrete `System.Enum` types, but it is possible to use a different underlying type (which should always be an _integer_ type) using _reflection_, according to [the docs](https://docs.microsoft.com/en-US/dotnet/api/System.Enum#creating-an-enumeration-type).\r\n\r\nTo learn what integer type underlies a given enum type, call `.GetTypeCode()` on any of its values; e.g.:\r\n\r\n```powershell\r\nPS> [System.PlatformID]::Unix.GetTypeCode()\r\nInt32\r\n```",
      "created_at": "2020-06-02T13:31:55Z",
      "updated_at": "2020-06-02T13:59:29Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 you don't need reflection to make an enum of a different underlying type; they use inheritance-style syntax to define that in C#:\r\n\r\n```cs\r\nenum MyEnum : long\r\n{\r\n    blah\r\n}\r\n```\r\n\r\nAnd at some point during 6.x we got a similar syntax added to PS as well:\r\n\r\n```ps\r\nenum Test : Int64 {\r\n    blah\r\n}\r\n```\r\n\r\nThe note in the docs about reflection is stating it's possible to use a non-integer type to create an enum, but it is not recommended and only available via reflection. \r\n\r\nEDIT:\r\n\r\nThe other way to get the underlying type out from an enum is `[enum]::GetUnderlyingType([enumtype])`",
      "created_at": "2020-06-02T13:52:44Z",
      "updated_at": "2020-06-02T14:06:31Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I appreciate the clarification, @vexx32 - I've hidden my previous comment; let me just re-state the part about determining the underlying type:\r\n\r\nTo learn what specific (integer) type underlies a given enum type, as an alternative to, e.g., `[enum]::GetUnderlyingType([System.PlatformID])`, you can call `.GetTypeCode()` on any of its values; e.g.:\r\n\r\n```powershell\r\n# Returns a [System.TypeCode] enum value\r\nPS> [System.PlatformID]::Unix.GetTypeCode()\r\nInt32\r\n```\r\n",
      "created_at": "2020-06-02T13:59:18Z",
      "updated_at": "2020-06-02T14:10:11Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> `System.Int32` is the _default_ type _underlying_ -\r\n\r\nThere isn't a true default as far as the runtime is concerned, but yeah that's the default for most compilers.\r\n\r\n> but (of necessity) not _derived_ from - concrete `System.Enum` types\r\n\r\nThe struct still derives from `Enum`.  My comment about how it appears in memory doesn't just apply to enums, it applies to all structs (that aren't boxed).  Take this struct for example:\r\n\r\n```csharp\r\npublic readonly struct MyWrapper\r\n{\r\n    public readonly int Value;\r\n\r\n    public MyWrapper(int value) => Value = value;\r\n}\r\n\r\npublic static class Show\r\n{\r\n    public static void Example()\r\n    {\r\n        var wrapper = new MyWrapper(10);\r\n        var value = 10;\r\n    }\r\n}\r\n```\r\n\r\nIn the above example, if you examined the byte value of both `wrapper` and `value` they would both look like `0xA, 0x0, 0x0, 0x0`.  If `MyWrapper` was a *class*, the byte value would be a memory address to a location on the heap.  If you were to follow that memory address, you would not only get the byte value of the field `Value`, but you'd also get a pointer to the method table for the class, the object header, etc.\r\n\r\nStructs have none of that, there's no identity information, there's no method table, no object header, and it's all stored on the *stack*.  Until it's boxed of course.\r\n\r\n> but it is possible to use a different underlying type (which should always be an _integer_ type)\r\n\r\nYeah, any [built-in integer type](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-335.pdf#page=98&zoom=100,116,216).  Though no compiler will let you use the native variants afaik.\r\n\r\nRequirements for enums are defined in [EMCA 335 \u00a7I.8.5.2](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-335.pdf#page=52&zoom=100,116,780).\r\n\r\n> To learn what integer type underlies a given enum type, call `.GetTypeCode()` on any of its values; e.g.:\r\n\r\nEcho what @vexx32 said.  Also I usually go with `[PlatformID].GetEnumUnderlyingType()`",
      "created_at": "2020-06-02T14:27:04Z",
      "updated_at": "2020-06-02T14:27:04Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @SeeminglyScience, that's helpful.\r\n\r\n> The struct still derives from Enum\r\n\r\nIndeed, but my point was that the enum doesn't - and cannot - derive _from the underlying (integer) type_.\r\n\r\n> Also I usually go with `[PlatformID].GetEnumUnderlyingType()`\r\n\r\nMakes sense - good simplification.",
      "created_at": "2020-06-02T15:08:08Z",
      "updated_at": "2020-06-02T15:08:08Z"
    }
  ],
  "created_at": "2020-05-31T00:35:41Z",
  "labels": [
    "Issue-Question",
    "WG-Engine"
  ],
  "number": 12850,
  "state": "open",
  "title": "Enums are considered immutable for copy semantics",
  "updated_at": "2021-01-16T15:55:18Z"
}