{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7128",
  "author": "mklement0",
  "body": "\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nclass Foo { [object] Bar() { return & {} } }; (new Foo).Bar()\r\n```\r\n\r\nNote that `& {}` outputs \"nothing\", i.e., the \"null collection\" `[System.Management.Automation.Internal.AutomationNull]::Value`\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nGiven that PowerShell allows casting _any_ value to `[object]` - including `$null` and `[System.Management.Automation.Internal.AutomationNull]::Value`, the operation should succeed and the `[System.Management.Automation.Internal.AutomationNull]::Value`) should be passed through.\r\n\r\n@BrucePay's take on the desired behavior differs, however (taken from [this SO answer](https://stackoverflow.com/a/50957388/45375) of his):\r\n\r\n> We should still generate an error but it should be \"non-void methods must return a value\" or some such\r\n\r\n\r\nActual behavior\r\n---------------\r\n\r\nThe following error occurs:\r\n\r\n```none\r\nIndex was out of range. Must be non-negative and less than the size of the collection.\r\nParameter name: Index\r\n...\r\n```\r\n\r\nAn analysis of the cause, courtesy of @BrucePay's previously linked answer:\r\n\r\n> [...] the code that invokes the scriptblock expects there to be an object in the result List i.e. `result.Count == 1`. There are no objects in the pipeline case so you get an index-out-of-range error. [...]\r\n> BTW - the [code in question is here](https://github.com/PowerShell/PowerShell/blob/c1c5344a8897262433141ecbc13bb06ac2c4bbef/src/System.Management.Automation/engine/lang/scriptblock.cs#L508).\r\n\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.1.0-preview.2 on macOS 10.13.4\r\nPowerShell Core v6.1.0-preview.2 on Ubuntu 16.04.4 LTS\r\nPowerShell Core v6.1.0-preview.2 on Microsoft Windows 10 Pro (64-bit; Version 1709, OS Build: 16299.371)\r\nWindows PowerShell v5.1.17134.48 on Microsoft Windows 10 Pro (64-bit; Version 1709, OS Build: 16299.371)\r\n```\r\n",
  "closed_at": "2018-07-02T19:58:43Z",
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "Rather than generating an error which wouldn't have been very useful, I changed the code to return default(T).",
      "created_at": "2018-06-21T23:40:16Z",
      "updated_at": "2018-06-21T23:40:16Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @BrucePay, that makes sense.\r\n\r\nTo spell it out, in the case of `[object]` - and any reference type - this will default to `$null` - see https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/default-value-expressions for the full story.",
      "created_at": "2018-06-22T01:45:13Z",
      "updated_at": "2018-06-22T01:45:13Z"
    },
    {
      "author": "winperec",
      "author_association": "NONE",
      "body": "Thanks @BrucePay \r\nThe one thing I don't like every time I should check for $null before iterating(in case if my method should return array) because:\r\n```\r\n$null | Foreach-Object { $_.someprop.prop = \"some value\" } # throws exception;\r\n\r\n&{} | Foreach-Object { $_.someprops.prop } # no throw because no iterating;\r\n```\r\nso it means that after each call which return enumerable. I should check like:\r\n```\r\nclass Foo { [object] Bar() { return $somedata | Where-Object { <# filter data #> } };\r\n\r\n$myarray = (new Foo).Bar()\r\nif($myarray){\r\n    $myarray | Foreach-Object { <# process data #> }\r\n}\r\n```\r\nbut it would be great to write just code in pipeline:\r\n`$myarray = (new Foo).Bar() | Foreach-Object { <# process data #> }`",
      "created_at": "2018-06-26T07:35:04Z",
      "updated_at": "2018-06-26T20:45:46Z"
    }
  ],
  "created_at": "2018-06-21T02:45:26Z",
  "number": 7128,
  "state": "closed",
  "title": "Returning nothing (Automation.Null) from an [object]-typed custom-class method breaks",
  "updated_at": "2018-07-03T05:54:20Z"
}