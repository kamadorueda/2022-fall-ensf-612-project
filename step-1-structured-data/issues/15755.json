{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15755",
  "author": "mklement0",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nNote: Renaming a _directory_ to a case variation of its current name is currently broken altogether - see #14903 - but the same behavior should apply to both directories and files.\r\n\r\nOn case-_insensitive_ file-systems (by default: Window, macOS), renaming a file to a _case variation_ of its current name works _in principle_, but there seems to be an optimization that situationally _prevents_ renaming:\r\n\r\n* If the `-Path` / `-LiteralPath` argument is case-identical to the `-NewName` argument, the call is a quiet _no-op_.\r\n\r\n* However, the `-Path` / `-LiteralPath` argument  may refer to a file-system item whose _actual_ case differs from the `-NewName` argument and therefore still requires renaming.\r\n\r\n```powershell\r\n# Create a temporary dir. to experiment in.\r\nPush-Location -ErrorAction Stop ($tmpDir = New-Item -Force -Type Directory (Join-Path temp: $PID))\r\n\r\ntry {\r\n\r\n  # Create a sample dir with an initial *uppercase* letter.\r\n  $null = New-Item -Type Directory -Force Foo\r\n\r\n  # Try to rename it to all-lowercase, incidentally using the all-lowercase form\r\n  # to match the current name too.\r\n  Rename-Item foo foo\r\n\r\n  (Get-Item foo).Name | Should -BeExactly foo\r\n\r\n} finally {\r\n  Pop-Location\r\n  Remove-Item $tmpDir -Recurse\r\n}\r\n```\r\n\r\n\r\n\r\n### Expected behavior\r\n\r\n```console\r\nThe test should succeed.\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nThe test fails, because no renaming was performed:\r\n\r\n\r\nString lengths are both 3. Strings differ at index 0. Expected: 'foo' But was:  'Foo'\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nPowerShell Core 7.2.0-preview.7\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": "2022-01-03T14:04:55Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Note: Renaming a _directory_ to a case variation of its current name is currently broken altogether - see #7829 - but the same behavior should apply to both directories and files.\r\n\r\nIt seems to be an wrong link.",
      "created_at": "2021-11-29T17:08:39Z",
      "updated_at": "2021-11-29T17:08:39Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @iSazonov - the link should have been to the following (also fixed in the OP now):\r\n\r\n* #14903",
      "created_at": "2021-11-29T18:09:24Z",
      "updated_at": "2021-11-29T18:09:34Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Closed in favor of:\r\n* #12483",
      "created_at": "2022-01-03T14:04:55Z",
      "updated_at": "2022-01-03T14:04:55Z"
    }
  ],
  "created_at": "2021-07-11T00:44:59Z",
  "labels": [
    "WG-Cmdlets-Management",
    "Area-FileSystem-Provider"
  ],
  "number": 15755,
  "state": "closed",
  "title": "Rename-Item optimization bug: renaming to a case variant is situationally quietly ignored in case-insensitive file-systems",
  "updated_at": "2022-01-03T14:04:58Z"
}