{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1929",
  "author": "chungy",
  "body": "## Steps to reproduce\n1. Use Arch Linux x86_64\n2. Install gtest, and dotnet-cli from AUR\n3. Try to build\n4. \"dotnet build --configuration Linux\" results in:\n\n```\nProject Microsoft.PowerShell.CoreCLR.AssemblyLoadContext (.NETStandard,Version=v1.6) will be compiled because expected outputs are missing\nCompiling Microsoft.PowerShell.CoreCLR.AssemblyLoadContext for .NETStandard,Version=v1.6\n/opt/dotnet/dotnet compile-csc @/tmp/powershell/src/PowerShell-6.0.0-alpha.9/src/Microsoft.PowerShell.CoreCLR.AssemblyLoadContext/obj/Linux/netstandard1.6/dotnet-compile.rsp returned Exit Code 1\n/tmp/powershell/src/PowerShell-6.0.0-alpha.9/src/Microsoft.PowerShell.CoreCLR.AssemblyLoadContext/CoreCLR/CorePsAssemblyLoadContext.cs(112,35): error CS0103: The name 'InitializeTypeCatalog' does not exist in the current context\n\nCompilation failed.\n    0 Warning(s)\n    1 Error(s)\n\nTime elapsed 00:00:03.4195229\n```\n\nThe PKGBUILD I've constructed as a WIP is here: https://github.com/chungy/powershell.aur\n## Expected behavior\n\nTo build PowerShell successfully\n## Actual behavior\n\nFailed to build\n## Environment data\n\n<!-- provide the output of $PSVersionTable -->\n\n``` powershell\n> $PSVersionTable\n\nN/A\n\n```\n",
  "closed_at": "2016-09-13T18:15:57Z",
  "comments": [
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "I'm sorry, our manual build steps are a bit out of date. We've recently switched to generating both the type catalog (Start-TypeGen) and resources (Start-ResGen) dynamically. The build.psm1 script is pretty much just a large set of convenience wrappers, to \"do the right thing\" for PowerShell developers working on supported platforms. When bootstrapping a new platform, a bit more work is involved (believe me, I know!).\n\nBoth the type catalog and resource generation should be pretty straight forward invocations of dotnet, the exact location and arguments encoded in the functions I referenced above (I'd link for you but am on mobile).\n",
      "created_at": "2016-08-19T17:01:24Z",
      "updated_at": "2016-08-19T17:01:24Z"
    },
    {
      "author": "willprice",
      "author_association": "NONE",
      "body": "Here's the code from build.psm1:\n\n``` powershell\nfunction Start-TypeGen\n{\n    [CmdletBinding()]\n    param()\n\n    # Add .NET CLI tools to PATH\n    Find-Dotnet\n\n    Push-Location \"$PSScriptRoot/src/TypeCatalogParser\"\n    try {\n        dotnet run\n    } finally {\n        Pop-Location\n    }\n\n    Push-Location \"$PSScriptRoot/src/TypeCatalogGen\"\n    try {\n        dotnet run ../Microsoft.PowerShell.CoreCLR.AssemblyLoadContext/CorePsTypeCatalog.cs powershell.inc\n    } finally {\n        Pop-Location\n    }\n}\n```\n\n``` powershell\nfunction Start-ResGen\n{\n    [CmdletBinding()]\n    param()\n\n    # Add .NET CLI tools to PATH\n    Find-Dotnet\n\n    Push-Location \"$PSScriptRoot/src/ResGen\"\n    try {\n        Start-NativeExecution { dotnet run } | Write-Verbose\n    } finally {\n        Pop-Location\n    }\n}\n\n```\n",
      "created_at": "2016-08-19T20:13:48Z",
      "updated_at": "2016-08-19T20:17:16Z"
    },
    {
      "author": "qrwteyrutiyoup",
      "author_association": "NONE",
      "body": "Last night I managed to build it on Arch, after taking a look at build.psm1. Here's a PKGBUILD: https://gist.github.com/qrwteyrutiyoup/1d06831e59728669632a55a33a690987\n\nIt become something like this, then:\n\n```\npushd src/libpsl-native\ncmake .\nmake\npopd\n\ndotnet restore\n\npushd src/ResGen\ndotnet run -c Linux\npopd\n\npushd src/TypeCatalogParser\ndotnet run -c Linux\npopd\n\npushd src/TypeCatalogGen\ndotnet run -c Linux  ../Microsoft.PowerShell.CoreCLR.AssemblyLoadContext/CorePsTypeCatalog.cs powershell.inc\npopd\n\ncd src/powershell-unix\ndotnet build -c Linux\n```\n\n**However**, it does seem to have some hardcoded checks for the runtime, which I was able to work around by using an Ubuntu-like _os-release_ file and _mount --bind_ it to _/etc/os-release_. Not pretty, but it did work. \n\nI also needed icu55 from the AUR.\n",
      "created_at": "2016-08-19T21:52:16Z",
      "updated_at": "2016-08-19T21:52:16Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Awesome work! And yes, the .NET CLI tools check the runtime too. I think it _might_ be possible to use a generic \"linux\" runtime, but haven't tried.\n\n@brthor do you know?\n",
      "created_at": "2016-08-19T22:35:19Z",
      "updated_at": "2016-08-19T22:35:19Z"
    },
    {
      "author": "jaseg",
      "author_association": "NONE",
      "body": "@qrwteyrutiyoup As a slightly less hacky alternative workaround to the os-release bind mount  you could try using fakeroot to replace /etc/os-release.\n",
      "created_at": "2016-08-20T09:01:45Z",
      "updated_at": "2016-08-20T09:01:45Z"
    },
    {
      "author": "qrwteyrutiyoup",
      "author_association": "NONE",
      "body": "@jaseg thanks, I will try looking into it. In the meantime, I have used [proot](https://wiki.archlinux.org/index.php/Proot), as someone in the AUR suggested. \n\nPKGBUILD here https://github.com/qrwteyrutiyoup/powershell-git.aur \n",
      "created_at": "2016-08-20T14:12:46Z",
      "updated_at": "2016-08-20T14:12:46Z"
    },
    {
      "author": "nlowe",
      "author_association": "NONE",
      "body": "c695d41 broke the `proot` workaround (according to  a `git bisect`):\n\n```\nc695d41c47c8baa48db1a590fe7378641a9e0ab9 is the first bad commit\ncommit c695d41c47c8baa48db1a590fe7378641a9e0ab9\nAuthor: Andrew Schwartzmeyer <andrew@schwartzmeyer.com>\nDate:   Thu Sep 1 16:24:11 2016 -0700\n\n    Use lowercase name for package folders (#2162)\n\n    .NET CLI build 3546 started placing packages in:\n\n        ~/.nuget/packages/microsoft.codeanalysis.common\n\n    instead of:\n\n        ~/.nuget/packages/Microsoft.CodeAnalysis.Common\n\n    Where the previous (capitalized) version corresponded directly to the\n    package's name. Now they are all lower-cased.\n\n:040000 040000 dbafd345af60c831d25551d9769a2e6b01481fe1 bfc7b206ad7c45a39ec25ac1d90862efa46e3a4e M  src\n```\n\nEven with proot, it's still throwing the error:\n\n```\nUnhandled Exception: System.IO.InvalidDataException: Reference assembly '/home/nathan/.nuget/packages/microsoft.codeanalysis.common/1.1.1/lib/portable-net45+win8/Microsoft.CodeAnalysis.dll' is declared in the reference list file '/home/nathan/.cache/pacaur/powershell-git/src/powershell/src/TypeCatalogGen/powershell.inc', but the assembly doesn't exist.\nat Microsoft.PowerShell.CoreCLR.TypeCatalogGen.ResolveReferenceAssemblies(String path)\nat Microsoft.PowerShell.CoreCLR.TypeCatalogGen.Main(String[] args)\n~/.cache/pacaur/powershell-git/src/powershell\nTelemetry is: Enabled\nProject Microsoft.PowerShell.CoreCLR.AssemblyLoadContext (.NETStandard,Version=v1.6) will be compiled because expected outputs are missing\n/home/nathan/.cache/pacaur/powershell-git/src/powershell/src/Microsoft.PowerShell.CoreCLR.AssemblyLoadContext/bin/Linux/netstandard1.6/Microsoft.PowerShell.CoreCLR.AssemblyLoadContext.dll\n/home/nathan/.cache/pacaur/powershell-git/src/powershell/src/Microsoft.PowerShell.CoreCLR.AssemblyLoadContext/bin/Linux/netstandard1.6/Microsoft.PowerShell.CoreCLR.AssemblyLoadContext.pdb\nCompiling Microsoft.PowerShell.CoreCLR.AssemblyLoadContext for .NETStandard,Version=v1.6\nRunning /opt/dotnet/dotnet /opt/dotnet/sdk/1.0.0-preview2-003121/csc.dll -noconfig @/home/nathan/.cache/pacaur/powershell-git/src/powershell/src/Microsoft.PowerShell.CoreCLR.AssemblyLoadContext/obj/Linux/netstandard1.6/dotnet-compile-csc.rsp\nProcess ID: 9389\n/opt/dotnet/dotnet compile-csc @/home/nathan/.cache/pacaur/powershell-git/src/powershell/src/Microsoft.PowerShell.CoreCLR.AssemblyLoadContext/obj/Linux/netstandard1.6/dotnet-compile.rsp returned Exit Code 1\n/home/nathan/.cache/pacaur/powershell-git/src/powershell/src/Microsoft.PowerShell.CoreCLR.AssemblyLoadContext/CoreCLR/CorePsAssemblyLoadContext.cs(112,35): error CS0103: The name 'InitializeTypeCatalog' does not exist in the current context\n\nCompilation failed.\n0 Warning(s)\n1 Error(s)\n\nTime elapsed 00:00:00.9760053\n\n==> ERROR: A failure occurred in build().\nAborting...\n:: failed to build powershell-git package(s)\n```\n\nI have a feeling that this is a case-sensitive filesystem issue, since if you don't run a `git clean -fxd` after checking out a working commit, `master` builds just fine.\n\nShould this be its own issue?\n",
      "created_at": "2016-09-04T23:15:17Z",
      "updated_at": "2016-09-04T23:15:33Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "You need to update .NET CLI. It's latest versions changed the package layout.\n",
      "created_at": "2016-09-04T23:17:34Z",
      "updated_at": "2016-09-04T23:17:34Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Proot might throw a kink in things since it sounds like it's grabbing unofficial packages and so has not yet picked up .NET's changes.\n",
      "created_at": "2016-09-04T23:18:22Z",
      "updated_at": "2016-09-04T23:18:22Z"
    },
    {
      "author": "nlowe",
      "author_association": "NONE",
      "body": "@andschwa You mean `v1.0.0-preview2.0.1` released 4 days ago? Or do I need a recent commit from `master`?\n",
      "created_at": "2016-09-04T23:29:52Z",
      "updated_at": "2016-09-04T23:29:52Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "The preview3 installed by Start-PSBootstrap; build 3546 or newer per my referenced commit above.\n",
      "created_at": "2016-09-04T23:39:49Z",
      "updated_at": "2016-09-04T23:39:49Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "https://github.com/dotnet/cli/issues/4141\n",
      "created_at": "2016-09-04T23:41:38Z",
      "updated_at": "2016-09-04T23:41:38Z"
    },
    {
      "author": "nlowe",
      "author_association": "NONE",
      "body": "Huh, that's unfortunate. Thanks, I'll take a look. Unfortunately I think this means the AUR build is broken unless we get a `dotnet-cli-git` package made.\n",
      "created_at": "2016-09-05T00:27:16Z",
      "updated_at": "2016-09-05T00:27:16Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Yeah, @nlowe this is entirely dependent not only on .NET Core supporting Arch Linux better, but also the build tool, .NET CLI. My guess is that it will continue to sometimes work; but until there's official support from both our language and build tool, there's not much we can do but point you in the right direction :/\n\nDon't get me wrong, I _love_ Arch and wish I could develop routinely on it. It's my favorite distribution. For what it's worth, you can use Docker containers to accomplish the same thing; in fact, I have a script way, way back in [the history](https://github.com/PowerShell/PowerShell/blob/649629a18fbaf61b54419e39609387d53340154f/monad-docker.sh) that I wrote to ease the pain. IIRC it lets you dynamically build and run your local repo in the context of the container, preserving your host user permissions too.\n",
      "created_at": "2016-09-13T18:15:57Z",
      "updated_at": "2016-09-13T18:15:57Z"
    }
  ],
  "created_at": "2016-08-19T02:37:33Z",
  "number": 1929,
  "state": "closed",
  "title": "Failure to build from source on Arch Linux",
  "updated_at": "2016-09-13T18:15:57Z"
}