{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4135",
  "author": "mklement0",
  "body": "<sup>Related: #4715 and #4626.</sup>\r\n\r\n\r\nCurrently, it is not easy to discover which of a given cmdlet's / advanced function's parameters accept pipeline input and how (by value and/or by property name):\r\n\r\nUsing the example of `Rename-Item`:\r\n\r\n* You can use `Get-Help Rename-Item -Full` and then browse the entire topic for `Accept pipeline input?` lines\r\n\r\n* You can use a nontrivial command such as the following:  \r\n`Get-Help Rename-Item -Parameter * | ? pipelineInput -like 'true*' | Select-Object Name, Type, pipelineInput`\r\n\r\nThe above yields:\r\n\r\n```none\r\n\r\nname        type                       pipelineInput                 \r\n----        ----                       -------------                 \r\nCredential  @{name=PSCredential; uri=} true (ByPropertyName)         \r\nLiteralPath @{name=String; uri=}       true (ByPropertyName)         \r\nNewName     @{name=String; uri=}       true (ByPropertyName)         \r\nPath        @{name=String; uri=}       true (ByValue, ByPropertyName)\r\n```\r\n\r\nNeither option is convenient.\r\n\r\nPerhaps the syntax diagrams could be enhanced with symbols that reflect pipeline-binding behavior? \r\n\r\nSomething along the lines of (these are mere examples; the idea is to be concise):\r\n\r\n* `|` ... by value (only)\r\n* `\u2320` ... by property name (only)\r\n* `|\u2320` ... by both value and property name\r\n\r\nApplied to the `Rename-Item` example, with the symbols placed inside `(...)` after the parameter (for example):\r\n\r\n```none\r\nRename-Item [-Path(|\u2320)] <String> [-NewName] <String> [-Credential(\u2320) <PSCredential>] [-Force] [-PassThru] [-Confirm] [-WhatIf] [-UseTransaction <SwitchParameter>] \r\n    [<CommonParameters>]\r\n    \r\nRename-Item [-NewName(\u2320)] <String> [-Credential(\u2320) <PSCredential>] [-Force] [-PassThru] -LiteralPath(\u2320) <String> [-Confirm] [-WhatIf] [-UseTransaction <SwitchParameter>] \r\n    [<CommonParameters>]\r\n\r\n```\r\n\r\n**Note: A crucial piece missing from the above is that parameters have _aliases_ and that binding by property name often happens via those aliases**; e.g., `Select-String`'s `-LiteralPath` has an alias of `PSPath`, and when you pipe `Get-ChildItem` output to `Select-String`, the objects bind by `.PSPath`, not `.LiteralPath`.\r\n\r\n\r\nWritten as of `PowerShell Core v6.0.0-beta.3`.",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I like the intent, not sure if I like the proposed syntax, but don't have an alternative off the top of my head",
      "created_at": "2017-06-28T19:50:28Z",
      "updated_at": "2017-06-28T19:50:28Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT: Glad to hear it; I'm not too thrilled with the specific syntax myself, but I wanted to get the conversation started.",
      "created_at": "2017-06-28T19:56:56Z",
      "updated_at": "2017-06-28T19:56:56Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "This is somewhat orthogonal to the `Get-Command -Syntax` request but a number of us PS users, rely on a command called `Get-Parameter` to get this info.  It comes with the PSCX module.  Here's the output from this command for `Rename-Item`:\r\n```\r\nPS C:\\> Get-Parameter Rename-Item\r\n\r\n    Command: Microsoft.PowerShell.Management/Rename-Item\r\n    Set:    ByPath *\r\n\r\n\r\nName                   Aliases      Position Mandatory Pipeline ByName Provider        Type\r\n----                   -------      -------- --------- -------- ------ --------        ----\r\nConfirm                {cf}         Named    False     False    False  All             SwitchParameter\r\nCredential             {Cr*}        Named    False     False    True   All             PSCredential\r\nForce                  {F*}         Named    False     False    False  All             SwitchParameter\r\nNewName                {N*}         1        True      False    True   All             String\r\nPassThru               {Pas*}       Named    False     False    False  All             SwitchParameter\r\nPath                   {Pat*}       0        True      True     True   All             String\r\nUseTransaction         {usetx}      Named    False     False    False  All             SwitchParameter\r\nWhatIf                 {wi}         Named    False     False    False  All             SwitchParameter\r\n\r\n\r\n    Command: Microsoft.PowerShell.Management/Rename-Item\r\n    Set:    ByLiteralPath\r\n\r\n\r\nName                   Aliases      Position Mandatory Pipeline ByName Provider        Type\r\n----                   -------      -------- --------- -------- ------ --------        ----\r\nConfirm                {cf}         Named    False     False    False  All             SwitchParameter\r\nCredential             {Cr*}        Named    False     False    True   All             PSCredential\r\nForce                  {F*}         Named    False     False    False  All             SwitchParameter\r\nLiteralPath            {PSPath, L*} Named    True      False    True   All             String\r\nNewName                {N*}         1        True      False    True   All             String\r\nPassThru               {Pas*}       Named    False     False    False  All             SwitchParameter\r\nUseTransaction         {usetx}      Named    False     False    False  All             SwitchParameter\r\nWhatIf                 {wi}         Named    False     False    False  All             SwitchParameter\r\n```\r\nPersonally, I find this **far easier** to parse than the output of `Get-Command -Syntax`.",
      "created_at": "2017-06-28T20:57:08Z",
      "updated_at": "2017-06-28T20:57:35Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@rkeithhill: \r\n\r\nThat's indeed a very nice representation, and perhaps integrating it via a different parameter,  such as `-ExtendedSyntax`, is the solution (as opposed to cramming more information into the existing diagrams - though the two aren't mutually exclusive).\r\n\r\nIncidentally, shouldn't `Get-Help` have a `-Syntax` parameter too? I was looking for it, not remembering that it exists for `Get-Command` only.\r\n\r\n(As an aside: I can install the `PSCX` module on macOS, but it won't load (`Could not load file or assembly 'Pscx.Core, Version=3.2.6024.39574, Culture=neutral, PublicKeyToken=null'. The system cannot find the file specified.`)).",
      "created_at": "2017-06-28T21:21:27Z",
      "updated_at": "2017-06-28T21:26:26Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "PSCX has not been ported to .NET Core yet.  It's on the backlog which just got a bit shorter with the Unicode esc seq PR going through.  :-)  I've also been waiting on .NET 2.0 to stabilize along with the required PS SDK for portable module development.  I got a bit burned by hopping on ASP.NET Core way too soon (alpha days) and almost every new build broke my code.  ",
      "created_at": "2017-06-28T21:28:26Z",
      "updated_at": "2017-06-28T21:28:26Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for letting me know; allow me to continue the tangent: on Windows, I get a warning about how`Expand-Archive,Get-Hash,prompt,Format-Hex,Get-Help,Get-Uptime` would be shadowed - any plans to not shadow built-in cmdlets, or is there a way to load only those commands that don't shadow built-in ones?",
      "created_at": "2017-06-28T21:42:36Z",
      "updated_at": "2017-06-28T21:42:36Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Yes.  This has been a continual issue (and a good one to have) with PSCX because we've introduced commands that over time have made their way into PowerShell (yay!).  \r\n\r\nAs for loading module specific commands you can always module-prefix a command e.g. `Microsoft.PowerShell.Archive\\Expand-Archive`.",
      "created_at": "2017-06-28T21:49:08Z",
      "updated_at": "2017-06-28T21:49:08Z"
    },
    {
      "author": "dragonwolf83",
      "author_association": "NONE",
      "body": "Prefixing the command doesn't help if another module uses it and didn't prefix it themselves. You could use `Import-Module -Prefix \"CX\" -Name PSCX` to explicitly load PSCX with a custom prefix, though that would not be good for code re-use.\r\n\r\nWhat I do is modify the PSD1 file in the module directory to comment it out from `CmdletsToExport`. However, it would be lost in an upgrade and need to be redone if that command is still there.\r\n",
      "created_at": "2017-06-29T02:44:11Z",
      "updated_at": "2017-06-29T02:44:11Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I should have more correctly stated that the example was using a `module qualified name` which is different from (user and module specified) prefixing.  Module qualified names should always work because PowerShell will not let you load two different modules with the same name.  Regardless, this thread is straying pretty far from the original issue.",
      "created_at": "2017-06-29T03:58:12Z",
      "updated_at": "2017-06-29T03:58:49Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "To get back on track: I realized that just marking the parameters by their declared names may not be enough, given that binding often happens via _aliases_, so a more verbose presentation that includes aliases - such as the PSCX `Get-Parameter` cmdlet's - is definitely (also) needed.",
      "created_at": "2017-06-30T23:13:51Z",
      "updated_at": "2017-06-30T23:13:51Z"
    }
  ],
  "created_at": "2017-06-28T19:14:31Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Interactive-HelpSystem"
  ],
  "number": 4135,
  "state": "open",
  "title": "Suggestion: make it easier to discover which cmdlet parameters accept pipeline input, via the syntax diagram",
  "updated_at": "2017-08-31T02:40:21Z"
}