{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6898",
  "author": "jazzdelightsme",
  "body": "## PR Summary\r\n\r\n<!-- summarize your PR between here and the checklist -->\r\nDynamic (DLR) objects work in some places today, but not others.  This\r\nchange expands that support to ForEach-Object, Where-Object and the\r\nfamily of cmdlets that use MshExpression (Select-Object, etc.). (see the\r\nlinked issue for the simple repro and explanation: fixes #6567)\r\n\r\n\r\nThis change addresses both wildcard and non-wildcard cases. In wildcard\r\ncases, it uses the existing support of generating PSDynamicMember\r\nobjects for names returned by GetDynamicMemberNames.\r\n\r\nIn non-wildcard cases, a dynamic property access is attempted whether or\r\nnot the name shows up in GetDynamicMemberNames, but a truly \"blind\"\r\naccess is only attempted if we see that the base object is an IDMOP. If\r\nthe dynamic access fails, you'll get the same or a similar error\r\nexperience as before (\"The property 'Blarg' cannot be found\", or no\r\nerror at all, depending on the cmdlet and the strict mode setting).\r\n\r\nThe included test coverage includes a stub for the .ForEach\r\noperator--once people are happy with this change, I can continue by\r\nadding support there.\r\n\r\nThis change should allegedly also have positive perf impact, though I\r\nhave not tested that assertion.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed - Issue link:\r\n- **Testing - New and feature**\r\n    - [ ] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [x] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2018-06-13T06:48:35Z",
  "comments": [
    {
      "author": "jazzdelightsme",
      "author_association": "CONTRIBUTOR",
      "body": "About the CodeFactor checks: it looks like most of these are not caused by my commit (although I exacerbated an existing issue--added another small helper class to a file that already contains multiple classes). What is the strategy for dealing with these? Ignore them? Take an IOU to fix them in a separate commit?",
      "created_at": "2018-05-28T17:11:56Z",
      "updated_at": "2018-05-28T17:11:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "CodeFactor issues is optional. Please fix only code you created/changed.",
      "created_at": "2018-05-28T17:23:27Z",
      "updated_at": "2018-05-28T17:23:27Z"
    },
    {
      "author": "jazzdelightsme",
      "author_association": "CONTRIBUTOR",
      "body": "Regarding the perf:\r\n\r\nUltimately the property access itself is such a small part of what goes on that I found it difficult to find any difference at all.\r\n\r\nHere's what I did:\r\n\r\nI added a switch to the code, `[danthom]::IsDynamicStuffEnabled`, to allow me to switch back and forth between the old and new behavior at runtime. Then I had a script to create an array of objects (normal ones, not dynamic) to run through a pipeline, and then had a `for` loop to repeatedly run the pipeline.\r\n\r\nThere was enough variability that I tried to eliminate the effect of GCs (by using `[gc]::TryStartNoGCRegion`), but that only worked for fairly small amounts of work (a handful of seconds), and besides, how much garbage each method produced would actually be an interesting and material effect on perf, so I just printed out the number of GCs along with the times.\r\n\r\nI tested `where`, `select`, and `foreach-object`, with and without wildcards (and for select, with wildcards to match multiple properties), and couldn't see much difference between them. The dynamic stuff seemed like it might be slightly faster (and generated a little less garbage--perhaps that's what made the difference).\r\n\r\nI tried adding artificial magnification--doing either the dynamic access or normal access in a `for` loop--but even that didn't make much of a difference. But in general, the dynamic access seemed ever-so-slightly faster, probably because it usually generated a little less garbage. (And as a result of my GC-consciousness, I also switched the `DynamicPropertyGetter` class to be a struct.)\r\n",
      "created_at": "2018-06-03T03:22:40Z",
      "updated_at": "2018-06-03T03:22:40Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@lzybkr Can you update your review?",
      "created_at": "2018-06-05T00:09:35Z",
      "updated_at": "2018-06-05T00:09:35Z"
    },
    {
      "author": "jazzdelightsme",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the reviews, people! @TravisEz13 what is the process for getting this merged? Is there any transparency to how you track proposed merges, or is it a \"it happens when it happens\" sort of thing?\r\n\r\nI don't mean to be impatient; I'm just wondering how it works, and I want to make sure there aren't any extra steps I need to do or anything like that.",
      "created_at": "2018-06-07T00:41:35Z",
      "updated_at": "2018-06-07T00:41:35Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@jazzdelightsme MSFT team has announced that they is actively working on porting Windows PowerShell modules with minimal activity on GitHub. So now some PRs is waiting reviews from MSFT experts.",
      "created_at": "2018-06-07T03:36:13Z",
      "updated_at": "2018-06-07T03:36:13Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Hey @jazzdelightsme, thanks for your contribution and patience!\r\nCan you please push another commit with  the `[feature]` tag at the beginning of the commit message? That way it will trigger the daily build run which runs more tests. I want the chagnes to be validated by the daily test run. Thanks!",
      "created_at": "2018-06-08T19:16:00Z",
      "updated_at": "2018-06-08T19:16:00Z"
    },
    {
      "author": "jazzdelightsme",
      "author_association": "CONTRIBUTOR",
      "body": "> Can you please push another commit with the [feature] tag at the beginning of the commit message?\r\n\r\nDid it work (to trigger the extra testing)?",
      "created_at": "2018-06-11T15:39:56Z",
      "updated_at": "2018-06-11T15:39:56Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@jazzdelightsme  The feature tag did work.",
      "created_at": "2018-06-11T22:06:22Z",
      "updated_at": "2018-06-11T22:06:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@jazzdelightsme Thanks for the great contribution!",
      "created_at": "2018-06-13T10:51:21Z",
      "updated_at": "2018-06-13T10:51:21Z"
    }
  ],
  "created_at": "2018-05-18T16:13:59Z",
  "number": 6898,
  "state": "closed",
  "title": "Make Select/ForEach/Where see dynamic properties",
  "updated_at": "2018-06-15T22:26:13Z"
}