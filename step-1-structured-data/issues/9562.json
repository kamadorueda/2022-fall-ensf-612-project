{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9562",
  "author": "Jaykul",
  "body": "Trying to write a ScriptAnalyzer rule, and needed to generate an Extent for the DiagnosticRecord which is slightly modified from the ones found in the AST object that are passed to me ...\r\n\r\nImagine my surprise when I tried to cast the .Extent on one of these AST objects to a `System.Management.Automation.Language.ScriptExtent` and got an exception saying PowerShell doesn't know how to convert a `System.Management.Automation.Language.InternalScriptExtent` to that.\r\n\r\nSo then I tried to just make one:\r\n\r\n```PowerShell\r\n[System.Management.Automation.Language.ScriptExtent]::new(\r\n   $FunctionAst.Extent.StartScriptPosition, \r\n   $FunctionAst.Extent.EndScriptPosition)\r\n```\r\n\r\nDid you know that `InternalScriptExtent.StartScriptPosition` and `EndScriptPosition` are _also_ internal classes? Of course! So now I get a giant wall of red which is best summarized as: \r\nCannot convert \"InternalScriptPosition\" to type \"ScriptPosition\"\r\n\r\nAll I wanted to do was increment the line numbers, so I had to write this:\r\n\r\n```PowerShell\r\n# Because we can't just modify $comment.Extent:\r\n# $comment.Extent.StartScriptPosition.LineNumber += $Extent.StartLineNumber -1\r\n# We have to create a whole new ScriptExtent object:\r\n$Extent = [System.Management.Automation.Language.ScriptExtent]::new(\r\n            [System.Management.Automation.Language.ScriptPosition]::new(\r\n            $FunctionAst.Extent.StartScriptPosition.File,\r\n            ($FunctionAst.Extent.StartScriptPosition.LineNumber + $comment.Extent.StartScriptPosition.LineNumber - 1),\r\n            $FunctionAst.Extent.StartScriptPosition.ColumnNumber,\r\n            $comment.Extent.StartScriptPosition.Line,\r\n            $FunctionAst.Extent.StartScriptPosition.GetFullScript()),\r\n\r\n            [System.Management.Automation.Language.ScriptPosition]::new(\r\n            $FunctionAst.Extent.EndScriptPosition.File,\r\n            ($FunctionAst.Extent.EndScriptPosition.LineNumber + $comment.Extent.EndScriptPosition.LineNumber - 1),\r\n            $FunctionAst.Extent.EndScriptPosition.ColumnNumber,\r\n            $comment.Extent.EndScriptPosition.Line,\r\n            $FunctionAst.Extent.EndScriptPosition.GetFullScript())\r\n        )\r\n```\r\n\r\nBut I found the output of this has the `StartOffset` and `EndOffset` always equal to zero -- and they are not settable in any way, because they're ReadOnly and not exposed to the constructors.\r\n\r\n1. Feature request: add a cast operator to the ScriptExtents please\r\n2. Feature request: add a cast operator to the ScriptPositions please\r\n3. Feature request: make all of the numbers on the public objects **settable**\r\n3. Bug: stop returning Internal objects from public APIs (in this case, `Parser.Parse`)\r\n\r\ncc @daxian-dbw ",
  "closed_at": null,
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Feature request: make all of the numbers on the public objects settable\r\n\r\nThe AST is immutable by design, allowing these properties to be set would be counter to that.  Even though the parser won't produce `ScriptExtent`'s, they can still be passed to the constructors of every AST. That said, creating `ScriptExtent`'s is definitely a chore.\r\n\r\n> Bug: stop returning Internal objects from public APIs (in this case, Parser.Parse)\r\n\r\nThey're internal only in implementation detail.  They implement `IScriptExtent`, and that's what the property returns.  They are used instead of `ScriptExtent` because they all access the same `PositionHelper` (a small class that stores the full script, and a map of line start offsets) which lets it reduce size per object and also save some common calculations (like the map of line start offsets).  If you want to cast it to something, cast it to the interface.\r\n\r\nI'd love for there to be a similar API for public use, or just better tools for managing extents. I believe `InternalScriptExtent` is non-public because it's pretty obtuse to use outside of the parser itself.",
      "created_at": "2019-05-09T15:47:43Z",
      "updated_at": "2019-05-09T15:49:38Z"
    }
  ],
  "created_at": "2019-05-08T15:02:12Z",
  "number": 9562,
  "state": "open",
  "title": "The Parser is handing out Internal objects like candy and (may be) poisoning children",
  "updated_at": "2019-05-10T04:55:49Z"
}