{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5417",
  "author": "Atamido",
  "body": "Steps to reproduce\r\n------------------\r\n\r\n```powershell\r\n[Byte[]]$Value = [System.IO.File]::ReadAllBytes('C:\\Some10MBfile')\r\n\r\n#  ~1000ms for 10MB array\r\n#  ~0.5ms for 1byte array\r\nfunction MandType {\r\n    Param (\r\n        [parameter(Mandatory=$True)]\r\n        [Byte[]]$Value\r\n    )\r\n}\r\n\r\n#  ~0.3ms for 10MB array\r\nfunction TypeOnly {\r\n    Param (\r\n        [parameter()]\r\n        [Byte[]]$Value\r\n    )\r\n}\r\n\r\n#  ~0.3 for 10MB array\r\nfunction MandOnly {\r\n    Param (\r\n        [parameter(Mandatory=$True)]\r\n        $Value\r\n    )\r\n}\r\n\r\n(Measure-Command { MandType $Value}).TotalMilliseconds\r\n(Measure-Command { MandType ([Byte[]]@(0))}).TotalMilliseconds\r\n(Measure-Command { TypeOnly $Value}).TotalMilliseconds\r\n(Measure-Command { MandOnly $Value}).TotalMilliseconds\r\n\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nAll versions of the above functions should behave identically and complete immediately, regardless of of parameter size as the functions perform no functions.\r\n```none\r\n1.1\r\n1.1\r\n1.1\r\n1.1\r\n```\r\n\r\nActual behavior\r\n---------------\r\nWhen setting a parameter to Mandatory, specifying its Type, and passing a large array in, the function will pause for some amount of time before starting.\r\n```none\r\n1000\r\n1.1\r\n1.1\r\n1.1\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPS C:\\> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-beta.9\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-beta.9\r\nOS                             Microsoft Windows 10.0.16299\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n\r\nPS C:\\> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.16299.19\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.16299.19\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n",
  "closed_at": "2017-11-30T22:46:10Z",
  "comments": [
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I can repro this in Core on Windows, macOS, and Linux. Very odd.\r\n\r\nalso, just to be thorough I tested with function below just to see if there was a difference between explicit or implicit `mandatory=$false` and did not see the same issue. \r\n\r\n```powershell\r\nfunction NoMandType {\r\n    Param (\r\n        [parameter(Mandatory=$false)]\r\n        [Byte[]]$Value\r\n    )\r\n}\r\n```",
      "created_at": "2017-11-11T00:14:00Z",
      "updated_at": "2017-11-11T00:14:00Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "`Mandatory` causes the parameter binder to check for NULL elements in an array argument (code [here](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/ParameterBinderBase.cs#L792)), which causes this perf issue.\r\n\r\nIt also happens when the `[ValidateNotNull]` attribute is applied to the parameter.\r\n\r\n```\r\nfunction NotNulOrEmtpy {\r\n     Param (\r\n         [ValidateNotNull()]\r\n         [Byte[]]$Value\r\n     )\r\n}\r\n## Long delay\r\nNotNulOrEmtpy -Value $Value\r\n```\r\n\r\nThe parameter binder shouldn't blindly check null elements. In the case of this repro, the element type of the argument array is value type, and thus cannot have null element.",
      "created_at": "2017-11-11T01:13:37Z",
      "updated_at": "2017-11-11T01:13:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Do we use new label `bug` instead of `Issue-Bug`?",
      "created_at": "2017-11-11T16:55:24Z",
      "updated_at": "2017-11-11T16:55:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What should the attributes be applied to? Argument or its elements? Collection or its elements?",
      "created_at": "2017-11-11T17:16:24Z",
      "updated_at": "2017-11-11T17:16:24Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "IMO, `[ValidateNotNull()]` and `[ValidateNotNullorEmpty()]` would apply to the collection, not its elements... but... erm... maybe not all types. like `[String[]]` for example.. that one I could see users assuming it applies to elements. but for `[Bytes[]]` I would expect that to work on the collection, not the elements..",
      "created_at": "2017-11-11T17:21:12Z",
      "updated_at": "2017-11-11T17:21:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We could disable recursion [here](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/ParameterBinderBase.cs#L561) to set last parameter in false and in ValidateNullOrEmptyArgument add empty collection check.",
      "created_at": "2017-11-11T18:29:30Z",
      "updated_at": "2017-11-11T18:29:30Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "For `ValueFromPipeline` arguments, it's important that `Validate...` applies to members of the collection because the recommended pattern is to always accept a collection so that the following work similarly:\r\n\r\n```PowerShell\r\n$collection | Do-Something\r\nDo-Something -InputObject $collection\r\n```\r\n\r\nIt would be a little weird if `Validate...` did not apply to members of a collection if the parameter were not `ValueFromPipeline`.",
      "created_at": "2017-11-11T19:12:33Z",
      "updated_at": "2017-11-11T19:12:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I'd expect that we _convert_ `Do-Something -InputObject $collection` to `$collection | Do-Something` if `InputObject ` is a scalar and that we apply `Validate...` to members in this case, otherwise if `InputObject ` is a collection we apply `Validate...` to the collection.",
      "created_at": "2017-11-11T19:36:37Z",
      "updated_at": "2017-11-11T19:36:37Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@iSazonov - do you mean `InputObject` is typed as a collection, or that the value is a collection?\r\n\r\nI believe conversions are performed before validation - as this example demonstrates:\r\n\r\n```powershell\r\nclass MyThing { [string]ToString() { return \"\" } }\r\nfunction foo {\r\n    param(\r\n        [ValidateNotNullOrEmpty()]\r\n        [Parameter(Mandatory, ValueFromPipeline)]\r\n        [string[]]$InputObject)\r\n    process { $InputObject.Count }\r\n}\r\nfoo -InputObject ([MyThing]::new(),[MyThing]::new())\r\n```\r\nBecause you git this error - showing clearly the conversion happened and validation failed on the empty strings:\r\n```\r\nfoo : Cannot validate argument on parameter 'InputObject'. The argument is null or empty. Provide an argument that is\r\nnot null or empty, and then try the command again.\r\nAt line:1 char:18\r\n+ foo -InputObject ([MyThing]::new(),[MyThing]::new())\r\n+                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidData: (:) [foo], ParameterBindingValidationException\r\n    + FullyQualifiedErrorId : ParameterArgumentValidationError,foo\r\n```\r\n\r\nSo when using the usual pattern for pipeline parameters - use a strongly typed collection for `InputObject`, it doesn't matter if you've passed a scalar or collection, the value will have been converted to a collection before validating.",
      "created_at": "2017-11-11T20:09:34Z",
      "updated_at": "2017-11-11T20:09:34Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I think we should skip checking elements for collections with a value-type element type. For collections with a value-type element type, the element cannot be `$null`, so in this case, just check if the collection is empty would be sufficient.",
      "created_at": "2017-11-12T07:00:58Z",
      "updated_at": "2017-11-12T07:02:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr \r\nMy thoughts was about:\r\n```powershell\r\nfunction foo1 {\r\n    param(\r\n        [ValidateNotNullOrEmpty()]\r\n        [Parameter(ValueFromPipeline)]\r\n        [string[]]$InputObject)\r\n    process { $InputObject.Count }\r\n}\r\n\r\nfunction foo2 {\r\n    param(\r\n        [ValidateNotNullOrEmpty()]\r\n        [Parameter(ValueFromPipeline)]\r\n        [string]$InputObject)\r\n    process { $InputObject.Count }\r\n}\r\n\r\nfoo1 -InputObject $scalar\r\n$scalar | foo1\r\nfoo1 -InputObject $collection\r\n$collection | foo1\r\n\r\nfoo2 -InputObject $scalar\r\n$scalar | foo2\r\nfoo2 -InputObject $collection\r\n$collection | foo2\r\n```\r\n\r\n`- if we convert `foo -InputObject $var` to `$var | foo` we could use one code path (to work precisely similarly) and eliminate the internal cycle in `ProcessRecord()` for `InputObject`.",
      "created_at": "2017-11-14T05:43:32Z",
      "updated_at": "2017-11-14T05:43:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr @daxian-dbw We have an inconsistence with `ValueFromPipeline` arguments.\r\n```powershell\r\nfunction MandType1 {\r\n    Param (\r\n        [parameter(Mandatory=$true, ValueFromPipeline)]\r\n        [Byte[]]$Value\r\n    )\r\n}\r\n\r\nfunction MandType2 {\r\n    Param (\r\n        [parameter(Mandatory=$true, ValueFromPipeline)]\r\n        $Value\r\n    )\r\n}\r\n\r\n# Validate every element in array\r\nMandType1 -Value $Value\r\n$Value | MandType1 \r\n\r\n# Validate only whole $Value as Object\r\nMandType2 -Value $Value\r\n# Validate every element in array\r\n$Value | MandType2\r\n```\r\n",
      "created_at": "2017-11-14T11:46:05Z",
      "updated_at": "2017-11-14T11:46:05Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The not-null-or-empty check of a mandatory parameter is based on the parameter type, while the check for `ValidateNotNullOrEmptyAttribute` or `ValidateNotNullAttribute` (and other validate attributes too) are based on the argument only (the attribute itself doesn't have the information about the type of the parameter/variable/property it applies to).",
      "created_at": "2017-11-14T18:41:10Z",
      "updated_at": "2017-11-14T18:41:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I believe we want \"works similarly\", don't we?",
      "created_at": "2017-11-15T04:35:55Z",
      "updated_at": "2017-11-15T04:35:55Z"
    }
  ],
  "created_at": "2017-11-10T23:46:51Z",
  "number": 5417,
  "state": "closed",
  "title": "Slow function when parameter is Mandatory its Type is specified",
  "updated_at": "2017-12-01T05:14:18Z"
}