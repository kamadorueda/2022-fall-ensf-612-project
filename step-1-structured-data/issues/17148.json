{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17148",
  "author": "iRon7",
  "body": "### Issue\r\n\r\nI am not sure whether this actually qualifies as a security vulnerability (especially because it is apparently accepted as normal behavior) but I think it is not correct that by default (for Windows servers and where the Execution Policy is lowered) the profile between a standard user account and elevated administrator account is unnoticeable shared and invoked.\r\n\r\n### [User Account Control](https://docs.microsoft.com/en-us/windows/security/identity-protection/user-account-control/user-account-control-overview)\r\n\r\n> *User Account Control (UAC) helps prevent malware from damaging a PC and helps organizations deploy a better-managed desktop. With UAC, apps and tasks always run in the security context of a non-administrator account, unless an administrator specifically authorizes administrator-level access to the system. UAC can block the automatic installation of unauthorized apps and prevent inadvertent changes to system settings.*\r\n\r\nFor Windows servers and where the Execution Policy is lowered, malware might easily copy itself to the user's profile (`$PROFILE.CurrentUserCurrentHost`) and proceed (unnoticed!) with elevated rights whenever the user starts PowerShell from the explorer '**Run as Administrator**' context menu.\r\n\r\n### Expected behavior\r\nForeign scripts should not be able to pass UAC and execute unseen by piggybacking on other domestic scripts as the `$Profile`.\r\n\r\n### Actual behavior\r\nPowerShell is able to silently copy and invoke (possible malicious) code accepted by the *standard user* account in an *elevated administrator* account.\r\n\r\n### Environment data\r\n```powershell\r\n$PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.1\r\nPSEdition                      Core\r\nGitCommitId                    7.2.1\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Propose\r\n\r\nAs a practical workaround, I would recommend to restrict the Execution Policy when PowerShell is ran as administrator by setting the `$PROFILE.AllUsersAllHosts` as a standard (knowing administrators should be able to consciously change this).\r\nBasically (from an elevated prompt):\r\n\r\n```PowerShell\r\nSet-Content $PROFILE.AllUsersCurrentHost { # or $PROFILE.AllUsersAllHosts?\r\n    $WindowsIdentity  = [System.Security.Principal.WindowsIdentity]::GetCurrent()\r\n    $WindowsPrincipal = [System.Security.Principal.WindowsPrincipal]::new($WindowsIdentity)\r\n    if ($WindowsPrincipal.IsInRole([System.Security.Principal.WindowsBuiltInRole]::Administrator)) {\r\n        Set-ExecutionPolicy -ExecutionPolicy AllSigned -Scope Process\r\n    }\r\n}\r\n```\r\nThis would require the user to (re)sign the $Profile when modified. Signing should be limited to a specific \"CodeSigners\" group and self-signing can only be done with elevated rights.  \r\n(Other possibilities to achieve the same results might be using a separate user/admin execution policies and/or changing the explorer context menu)\r\n\r\nThis will cause user profiles to be disabled if not signed when running as an elevated administrator:\r\n<img width=\"674\" alt=\"2022-04-13_17h25_53\" src=\"https://user-images.githubusercontent.com/8080834/163215538-44c5e935-11bb-4d42-8bb3-cccc248d5fe9.png\">\r\n\r\n<sub>(not sure how this whole issue would apply to other operating systems)</sub>",
  "closed_at": null,
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> Foreign scripts should not be able to pass UAC and execute unseen by piggybacking on other domestic scripts as the $Profile.\r\n\r\nThis is a very good aim.   \r\n\r\nHowever. \r\n1. What is the definition of \"Foreign\" and \"Domestic\".  We know it is common to use the _remote signed_ execution policy but how many unsigned scripts immediately have \"downloaded from the internet\" flag removed. If an attacker is inside already they can sign scripts, and make the them look \"domestic\": when I worked for the the Formula 1 team I gave this pseudo code example that I could put in a signed all-users-all-hosts script (And they said when I was leaving that if something clever and malicious happened they'd blame me!).  \r\n```\r\nif ((james acccount is not present or not enabled) -and (timing looks nasty) -and (account is priviledged) {\r\nget-adComputer | foreach-object -parallel -throttlelimit 10000 {stop-computer $_.name -force}\r\n}\r\n```\r\n2. If I have the access needed to modify your profile, then I can see that it is signed, and I probably have the access I need to sign my version with your certificate. A feature that adds work for me on the basis that if I'm attacked, the attacker will also need to do that work isn't going to win me over. And only a small subset of those who gain access for malice will use this kind of attack, a less oblique attack is much more likely ( IMHO )\r\n3. UAC edits the Administrators  group out of the access token on the shell when a user (other than the default admin) logs on interactively and \"run as admin\" creates a process with the _unedited_ token (some process are automatically trusted and others go via a UAC prompt). Things like scheduled tasks don't do UAC each time, and some roles give privileges to non admin accounts, so the UAC prompt isn't the be-all and end all.\r\n4. A group policy setting which allowed \"require AllSigned  for admin users\" would help: perhaps something which specified paths (with wildcards) which must be signed that could be applied to specific users or specific computers would be better. But we know the people who need it are the ones who don't do security well, and so they are the ones who won't use it. The ones who will use it are doing security well enough that they are very unlikely to need it. Catch-22 :-) \r\n\r\nNone of the above is meant to say this is non-problem, but there is a lot more to it, which needs to be considered in seeking a solution. ",
      "created_at": "2022-04-14T10:16:34Z",
      "updated_at": "2022-04-14T10:16:34Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@WG-Security\r\nSince you think this may be a security vulnerability, please report it through [Secure@](secure@microsoft.com).  Please see [PowerShell Security Policy](https://github.com/PowerShell/PowerShell/security/policy).\r\n",
      "created_at": "2022-04-18T20:51:07Z",
      "updated_at": "2022-04-18T20:51:07Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "> Since you think this may be a security vulnerability, please report it through [Secure@](secure@microsoft.com)\r\n\r\nDone.",
      "created_at": "2022-04-19T06:36:05Z",
      "updated_at": "2022-04-19T06:36:05Z"
    }
  ],
  "created_at": "2022-04-13T15:05:04Z",
  "number": 17148,
  "state": "open",
  "title": "Profiles shouldn't unnoticeable shared through UAC",
  "updated_at": "2022-05-02T20:35:55Z"
}