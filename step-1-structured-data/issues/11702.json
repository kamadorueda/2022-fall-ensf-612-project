{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11702",
  "author": "thepill",
  "body": "hello :wave: ,\r\n\r\nwe are encountering a strange/unexpected behaviour using the `-replace` method in combination with `$$` as the input.\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n\"hello world\" -replace \"world\", '$$powershell'\r\n\"hello world\".Replace(\"world\", '$$powershell')\r\n```\r\n\r\n# Expected behavior\r\n\r\n`-replace` and `.Replace()` should behave the same -> output should be `hello $$powershell`\r\n\r\n\r\n# Actual behavior\r\n\r\noutput includes only a single `$` character if `-replace` is used -> output is `hello $powershell`\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nPSVersion                      7.0.0-rc.2\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-rc.2\r\nOS                             Linux 4.19.76-linuxkit #1 SMP Thu Oct 17 19:31:58 UTC 2019\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n```none\r\nPSVersion                      6.2.4\r\nPSEdition                      Core\r\nGitCommitId                    6.2.4\r\nOS                             Linux 4.19.76-linuxkit #1 SMP Thu Oct 17 19:31:58 UTC 2019\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-01-28T15:31:38Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "`-replace` as an operator is entirely different to the `string.Replace()` method that is called when you invoke the method on strings. `-replace` supports regular expressions, and so is beholden to all the rules and oddities that entails.\r\n\r\nIn a regular expression replacement expression, `$$` is treated as an escaped (literal) `$` character. This is because replacement expressions can contain tokens such as `$1`, which would be replaced with the contents of a match group from the match pattern.\r\n\r\nSee here for a list of supported regular expression tokens and in which cases they can apply: https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference\n\n<blockquote><div><strong><a href=\"https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference\">Regular Expression Language - Quick Reference</a></strong></div></blockquote>",
      "created_at": "2020-01-28T15:22:23Z",
      "updated_at": "2020-01-28T15:22:25Z"
    },
    {
      "author": "thepill",
      "author_association": "NONE",
      "body": "Thank you @vexx32 !",
      "created_at": "2020-01-28T15:31:38Z",
      "updated_at": "2020-01-28T15:31:38Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "No worries \ud83d\ude42 \r\n\r\nDetails about specific operators can be found in the `Get-Help about_Operators` topic and a few of the other linked topics in there as well. There are a few operators that work mainly with regex. ^^",
      "created_at": "2020-01-28T17:26:54Z",
      "updated_at": "2020-01-28T17:26:54Z"
    }
  ],
  "created_at": "2020-01-28T15:06:32Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 11702,
  "state": "closed",
  "title": "Unexpected Behaviour using -replace vs. Replace() and inputs including $$",
  "updated_at": "2020-01-28T17:26:54Z"
}