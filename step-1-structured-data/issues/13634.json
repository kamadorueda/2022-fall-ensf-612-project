{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13634",
  "author": "iSazonov",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nFix #13605.\r\n\r\nWe should return null if ERROR_INVALID_FUNCTION - the error code in the context implicitly says that reparse points are not supported.\r\n\r\n## PR Context\r\n\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-12-03T19:24:50Z",
  "comments": [
    {
      "author": "DHowett",
      "author_association": "NONE",
      "body": "I'm slightly worried that since these error codes are provided by the filesystem driver, there might be an infinite amount of them. What if another filesystem driver we've not yet seen fails this question in a different way, like with `ERROR_INVALID_ARGUMENT` or something? Is it reasonable to log a non-fatal error somewhere and continue with the \"not a reparse point\" case for all errors?",
      "created_at": "2020-09-15T18:33:13Z",
      "updated_at": "2020-09-15T18:33:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@DHowett An alternative could be ignoring any error and return null but I think  it is not good practice to hide errors which we do not know.",
      "created_at": "2020-09-16T05:10:22Z",
      "updated_at": "2020-09-16T05:10:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Test confirmation https://github.com/PowerShell/PowerShell/issues/13605#issuecomment-694179592",
      "created_at": "2020-09-17T12:33:43Z",
      "updated_at": "2020-09-17T12:33:43Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Hmm. While _ignoring_ errors from this check may not be the best idea, the purpose of this check is just to verify if the path is a reparse point, right? So if it errors out, it might be OK to assume it's probably not and log the error the driver reports somewhere without outright failing the overall cmdlet operation?",
      "created_at": "2020-09-17T14:00:03Z",
      "updated_at": "2020-09-17T14:00:03Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-09-25T02:00:06Z",
      "updated_at": "2020-09-25T02:00:06Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "It sounds like we're not yet resolved on the right course of action for this PR. It feels to me like we need to be tolerant of errors at this level, but let the information that some error has occurred bubble up to the user in some way.\r\n\r\nWriting to the error stream would be misleading, if the actual intended action didn't fail. But if we experience a real failure, how will we know? Perhaps a real failure will surface in a later error, but we can ensure that this earlier failure is recorded somewhere.\r\n\r\nIs there anywhere we could consistently log that cross-platform, or is the warning stream a better place perhaps?",
      "created_at": "2020-09-28T12:57:45Z",
      "updated_at": "2020-09-28T12:57:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I agree that we can ignore the error in main code path but my concern is that we lost information in the problematic area (PowerShell does not work well with reparse points.). \r\nWe could add the information (check on reparse point) in tracing. Thoughts?",
      "created_at": "2020-09-28T16:18:57Z",
      "updated_at": "2020-09-28T16:19:35Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> We could add the information (check on reparse point) in tracing\r\n\r\nAs in showing it in `Trace-Command`? Is there also another more prominent place we could add it?",
      "created_at": "2020-09-28T16:23:09Z",
      "updated_at": "2020-09-28T16:23:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I don't think it makes sense to somehow inform the user about this situation. It only makes sense if _something goes wrong_ - user does not get expected result. In this case, tracing will help.\r\n",
      "created_at": "2020-09-28T16:30:13Z",
      "updated_at": "2020-09-28T16:30:13Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> It only makes sense if something goes wrong - user does not get expected result.\r\n\r\nRight. The question is, how reliably does PowerShell know if something goes wrong?\r\n\r\nIf possible I'd prefer this not to be a subtle behaviour that people are forced to use a trace to unravel. I suspect many users would be mystified by it, not use a trace, and either give up or open an issue, where they'll tell us that we should be throwing an error.\r\n\r\nRather, we can include it in the trace, but if we end up throwing an error at the end of the action, it might be nice to include the information from the reparse point processing.",
      "created_at": "2020-09-28T16:39:26Z",
      "updated_at": "2020-09-28T16:39:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We know that the scenario works well without the exception. Only concern is there is a scenario where it could not work because reparse point is generic and sometimes unpredictable from our experience. For diagnostic we have to use a debugger that could be complex but we could use more simple tracing as in other code paths in the file system provider.",
      "created_at": "2020-09-29T03:33:36Z",
      "updated_at": "2020-09-29T03:33:36Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-10-06T14:00:10Z",
      "updated_at": "2020-10-06T14:00:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I tried to do minimal changes but after looking more I think the original code confuses and we should simplify it - fast return if we can not read a reparse point and  it doesn't matter for whatever reason it happens - it is not a reparse point or the file system doesn't support reparse points or something else.\r\n",
      "created_at": "2020-10-08T17:50:32Z",
      "updated_at": "2020-10-08T17:50:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Is there the possibility of adding a log or trace before we return null?\r\n\r\n@rjmholt I think now it makes no sense. Before the fix we have a tricky code paths which made us think that there were unpredictable scenarios. In fact, the source code contained an error because it allowed handling an uninitialized structure (after `lastError == ERROR_NOT_A_REPARSE_POINT` we go to `switch`).\r\n",
      "created_at": "2020-10-09T03:21:39Z",
      "updated_at": "2020-10-09T03:21:39Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-10-16T14:00:10Z",
      "updated_at": "2020-10-16T14:00:10Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "I've requested some reviews so we can get more eyes on this",
      "created_at": "2020-10-16T16:51:42Z",
      "updated_at": "2020-10-16T16:51:42Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-10-27T02:00:07Z",
      "updated_at": "2020-10-27T02:00:07Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-11-09T14:00:06Z",
      "updated_at": "2020-11-09T14:00:06Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Looks like you can't execute native commands in WinPE w/o this fix",
      "created_at": "2020-12-02T01:37:30Z",
      "updated_at": "2020-12-02T01:37:30Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@PoshChan please remind me in 5 days",
      "created_at": "2020-12-02T21:55:55Z",
      "updated_at": "2020-12-02T21:55:55Z"
    },
    {
      "author": "PoshChan",
      "author_association": "COLLABORATOR",
      "body": "@rjmholt, this is the reminder you requested 5 days ago",
      "created_at": "2020-12-07T21:56:29Z",
      "updated_at": "2020-12-07T21:56:29Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.2.0-preview.2` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0-preview.2)\n",
      "created_at": "2020-12-15T21:37:41Z",
      "updated_at": "2020-12-15T21:37:41Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.1.1` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.1)\n",
      "created_at": "2021-01-14T23:50:43Z",
      "updated_at": "2021-01-14T23:50:43Z"
    }
  ],
  "created_at": "2020-09-15T11:49:41Z",
  "number": 13634,
  "state": "closed",
  "title": "Avoid an exception if file system does not support reparse points",
  "updated_at": "2021-01-14T23:50:43Z"
}