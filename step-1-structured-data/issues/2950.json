{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2950",
  "author": "DarwinJS",
  "body": "The Transcription policies are not only useful for audit, but also for debugging PowerShell code that is run in complex call stacks (like we experience in automation tool stacks).\r\n\r\nTranscription policies affect powershell engine execution in contexts where the powershell developer does not have the ability to specify command line parameters - so it seems these should be stored as settings.\r\n\r\nThe transcription policies are discussed here: https://blogs.msdn.microsoft.com/powershell/2015/06/09/powershell-the-blue-team/\r\n\r\nSeems like it would make sense that whatever approach is taken, that it allows for any other relevant PowerShell policies.  It would also be in the spirit of PowerShell to keep the settings names the same as the current registry value names so that it is easy to translate articles written about these settings under Windows.\r\n\r\nPerhaps it is time for /etc/powershell.conf ?",
  "closed_at": null,
  "comments": [
    {
      "author": "fMichaleczek",
      "author_association": "NONE",
      "body": " it is time for /etc/powershell/transcript.conf (or a Unix registry ^^)",
      "created_at": "2017-01-05T01:12:13Z",
      "updated_at": "2017-01-05T01:12:13Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "I have a personal theory that the whole concept of the registry has caused the IT industry billions.\r\n\r\nThis \"in memory only accessible\" configuration data store that is split between user and machine is a continual source of work around upon work around in automation code.\r\n\r\nUnix / Linux never had this problem because all config is on disk - so if you're an admin, you can just see it all and manipulate it all.  No \"loading user registry hives\" to complete setup tasks.\r\n\r\nTechnically we have IBM to thank for it as it was inherited from OS/2 into the first versions of Windows NT.",
      "created_at": "2017-01-05T01:33:05Z",
      "updated_at": "2017-01-05T01:33:05Z"
    },
    {
      "author": "mirichmo",
      "author_association": "MEMBER",
      "body": "I laid the foundation for this a few months ago when I added support to store [ExecutionPolicy values in configuration files](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/PropertyAccessor.cs). We have outstanding issues to cover moving additional values to configuration files (out of the registry), but not much time available to do it. I initially left all the GroupPolicy registry checks in place because we do not currently have support for those actions in PowerShell Core on non-Windows platforms.\r\n\r\nIn this specific instance of transcription, a bunch of new code would be needed to hook into logging mechanisms on the various non-Windows OSs that we support, so it is a much larger task than just storying the GroupPolicy value in a config file.",
      "created_at": "2017-01-05T16:39:05Z",
      "updated_at": "2017-01-05T16:39:05Z"
    },
    {
      "author": "ArieHein",
      "author_association": "NONE",
      "body": "Are you at least \"forcing\" a dual config policy for new code / options that rely on configuration from this point forward ? \r\n\r\nWould this be something in the \"best practices\" or \"how to\" manual for contributors ?",
      "created_at": "2017-01-05T16:46:21Z",
      "updated_at": "2017-01-05T16:46:21Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "Seems like it might be valuable to write something that redirects registry calls to a file based storage method on non-windows.  Then the approach could be used throughout powershell and maybe .NET apps.  I **don't** mean that the store would be some type of blob that needs special utilities to read - could just be a directory structure that emulates registry levels and files named with the \"value name\" that contain the data.  Only handle simple registry data types at first.\r\n\r\nIf it were simple like that it would also be easy to use any of the existing state management products to push the values.  Stuff like DSC on Linux, Chef, Puppet, Ansible, Salt, any scripting language, etc.",
      "created_at": "2017-01-05T17:26:59Z",
      "updated_at": "2017-01-05T17:28:31Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "Anyone know if registry redirection to the file system has been discussed on the .NET core project?\r\n",
      "created_at": "2017-01-05T17:30:18Z",
      "updated_at": "2017-01-05T17:30:18Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "I started a discussion which revealed there is some activity around registry API emulation / redirection on non-windows: https://github.com/dotnet/standard/issues/148",
      "created_at": "2017-01-05T18:01:22Z",
      "updated_at": "2017-01-05T18:01:22Z"
    },
    {
      "author": "mirichmo",
      "author_association": "MEMBER",
      "body": "@DarwinJS The current iteration of the code has two implementations of the interface: one for redirecting the request to the registry (on Windows PowerShell) and another for redirecting the request to JSON files (for PowerShell Core).\r\nYour idea of generalizing it within Microsoft.Win32.Registry is interesting, but would have to be produced by the .Net team for us to consume it.\r\n@ArieHein At the moment, enforcement is done by me via code review. Internally, we all have a mindset that whenever we add or modify PSCore, we need to do it in a cross-platform way.",
      "created_at": "2017-01-06T01:57:23Z",
      "updated_at": "2017-01-06T01:57:23Z"
    }
  ],
  "created_at": "2017-01-04T15:39:10Z",
  "labels": [
    "Area-SideBySide"
  ],
  "number": 2950,
  "state": "open",
  "title": "Support PowerShell Policies on Non-Windows Editions - especially Global Transcription Policies",
  "updated_at": "2017-01-06T01:57:24Z"
}