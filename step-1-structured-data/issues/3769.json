{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3769",
  "author": "iSazonov",
  "body": "\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nfunction Test-BadAttribute\r\n{\r\n    [CmdletBinding()]\r\n    Param\r\n    (\r\n        # Param1 help description\r\n        [Parameter]\r\n        [ValidateSet(\"a\",\"b\")]\r\n        $Param1,\r\n\r\n        [Parameter]\r\n        [ValidateSet()] # Bad attribute - the constructor is failed\r\n        $Param2\r\n    )\r\n\r\n    Begin\r\n    {\r\n    }\r\n    Process\r\n    {\r\n    }\r\n    End\r\n    {\r\n    }\r\n}\r\n\r\n1. Test-BadAttribute -Param1 <Press Tab>\r\n2. Test-BadAttribute -Param1 <Press Enter>\r\n3. Test-BadAttribute -Param1 \"a\" <Press Enter>\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n1. IntelliSenese work for Param1 and don't  work for Param2 with error message\r\nor IntelliSenese don't work for both parameters with appropriate error message.\r\n2. Show appropriate error message.\r\n3. Cmdlet work well or don't work with showing appropriate error message.\r\n\r\nActual behavior\r\n---------------\r\n1. No exception. No error message. IntelliSense don't work.\r\n2. Murky error message: it is impossible to understand that there is a problem with _any_ attribute, which is the attribute and which is the parameter.\r\n3. The same as 2. and the cmdlet don't work.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-beta\r\nPSEdition                      Core\r\nBuildVersion                   3.0.0.0\r\nCLRVersion\r\nGitCommitId                    v6.0.0-beta.1-7-g7fa53aedb3c7514cf1c2a19af6c26566661596d9-dirty\r\nOS                             Microsoft Windows 10.0.10240\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2021-08-25T04:05:42Z",
  "comments": [
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "Silent failure for the entire `param()` block also occurs when there is a typo in the attribute name.  For example, the following outputs nothing:\r\n\r\n```PowerShell\r\nfunction f { param([NonExistentAttribute()]$x,$y) }\r\n(Get-Command f).Parameters\r\n```",
      "created_at": "2017-09-10T14:01:38Z",
      "updated_at": "2017-09-10T14:02:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Possible place for the fix https://github.com/PowerShell/PowerShell/blob/e8bf6ca18a04ee04b290d2f01f5ef01750280d36/src/System.Management.Automation/engine/parser/Compiler.cs#L1702-L1705",
      "created_at": "2020-07-16T12:35:17Z",
      "updated_at": "2020-07-16T12:35:17Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I think this will be tricky to fix in a meaningful way. The function code isn't executed until it's actually invoked; the missing attribute type could well be added as a powershell class (for example) before the function is actually run.\r\n\r\nRunning the function yields the expected error, so I'm not sure there's anything we can really fix here?\r\n\r\n```ps1\r\nPS /Users/joelfrancis> function f { param([NonExistentAttribute()]$x,$y) }\r\nPS /Users/joelfrancis> f\r\nInvalidOperation: Cannot find the type for custom attribute 'NonExistentAttribute'. Make sure that the assembly\r\nthat contains this type is loaded.\r\n```",
      "created_at": "2020-07-16T13:46:56Z",
      "updated_at": "2020-07-16T13:47:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 Please look repro steps in the OP.",
      "created_at": "2020-07-16T14:52:42Z",
      "updated_at": "2020-07-16T14:52:42Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov gotcha, that's not clear at all and can be improved. Not sure about tab completion though \ud83e\udd14 ",
      "created_at": "2020-07-16T14:57:47Z",
      "updated_at": "2020-07-16T14:57:47Z"
    },
    {
      "author": "davidBar-On",
      "author_association": "CONTRIBUTOR",
      "body": "I have a proposed solution to the issue which will function as follows:\r\n1. `Test-BadAttribute -Param1 <Press Tab>`: the \"a b\" valid values are displayed.\r\n2. `Test-BadAttribute -Param1 <Press Enter>`: error message \"Missing an argument for parameter 'Param1' ...\",\r\n3. `Test-BadAttribute -Param1 \"a\" <Press Enter>`: works properly.\r\n4. `Test-BadAttribute -Param1 \"a\" -Param2<Press Tab>`: nothing happens.\r\n5. `Test-BadAttribute -Param1 \"a\" -Param2<Press Enter>`: error message \"Missing an argument for parameter 'Param2'. Specify a parameter of type 'System.Object' and try again.\".\r\n\r\nIn addition, on the first time `Test-BadAttribute` is activated, after the first Enter or Tab (which comes first), error message is displayed \"WARNING: Parameter $Param2 cannot be used since its ValidateSet is empty\".\r\n\r\nThe main issue I see with this approach is that the error message in step 5 suggests that `Param2` may have valid values, but I didn't find a better functioning approach.\r\n\r\n**Is this approach acceptable?**\r\n\r\nIf it is, then I need help with:\r\n1. **How should the above \"\"WARNING\" message be displayed?**  Currently I am using `Console.WriteLine` but I assume this is not the right way to do this.\r\n2. **Were should the test cases be added?**",
      "created_at": "2021-04-06T14:58:58Z",
      "updated_at": "2021-04-06T14:58:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> 4\\. `Test-BadAttribute -Param1 \"a\" -Param2<Press Tab>`: nothing happens.\r\n\r\nWhy nothing?\r\nWhat if there is a typo in the attribute name?",
      "created_at": "2021-04-06T16:08:12Z",
      "updated_at": "2021-04-06T16:08:12Z"
    },
    {
      "author": "davidBar-On",
      "author_association": "CONTRIBUTOR",
      "body": "\r\n\r\n>>    4. Test-BadAttribute -Param1 \"a\" -Param2<Press Tab>: nothing happens.\r\n\r\n>Why nothing?\r\n\r\nNothing, because in the suggested solution `GetRuntimeDefinedParameter()` adds `Param2` as legal `ValidateSetAttribute` parameter with empty list of valid values.\r\n\r\n>What if there is a typo in the attribute name?\r\n\r\nIn this case Tab shows the list of current directory files as the valid values.\r\n\r\n ",
      "created_at": "2021-04-06T17:51:17Z",
      "updated_at": "2021-04-06T17:51:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> as legal `ValidateSetAttribute` parameter with empty list of valid values.\r\n\r\nDo you change the attribute? I think it is nit right direction to address the issue. \r\nThe issue asks to add more information to script developer if there are errors/typos in using attributes.\r\n\r\nIn fact, there is already an exception. Now it is disguised, but it would be more correct to bring it to the user.",
      "created_at": "2021-04-07T07:54:51Z",
      "updated_at": "2021-04-07T07:56:58Z"
    },
    {
      "author": "davidBar-On",
      "author_association": "CONTRIBUTOR",
      "body": "The approach I took is:\r\n- In `validateValidateSetAttribute()` change the exception thrown in the following code to a new exception `ArgumentEmptyValidateSetException`, to make sure it is unique exception for this case: https://github.com/PowerShell/PowerShell/blob/3d49de134ea9b98ad5991bc7974575a7b242181d/src/System.Management.Automation/engine/Attributes.cs#L1702-L1704\r\n- In `GetRuntimeDefinedParameter()`, **catch** the `PSArgumentEmptyValidateSetException` exception in the following call to `GetAttribute()`: https://github.com/PowerShell/PowerShell/blob/3d49de134ea9b98ad5991bc7974575a7b242181d/src/System.Management.Automation/engine/parser/Compiler.cs#L1800\r\nIn the `catch` body a new `ValidateSetAttribute` attribute is created with an empty list of valid values.\r\n\r\nInitially, I planned that the `catch` body will just through the same exeception, but now with the real parameter name.  However, in this case Tab for `Param1` does not do anything, and even if `Param1` is set with a legal value, after the Enter the `Param2` exception is shown.  With the above approach the function can be used as long as `Param2` is not included in the command line.\r\n\r\nThe `catch` body also issues the \"WARNING\" message, and this is why I asked how to properly display this warning message.  As I wrote, I am also not sure were to add test cases (and examples of test cases for functions parameters will also help).",
      "created_at": "2021-04-07T11:01:05Z",
      "updated_at": "2021-04-07T11:01:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The issue is not exclusively about ValidateSetAttribute. Any wrong attribute should raise an user friendly message.",
      "created_at": "2021-04-07T11:45:34Z",
      "updated_at": "2021-04-07T11:45:34Z"
    },
    {
      "author": "davidBar-On",
      "author_association": "CONTRIBUTOR",
      "body": "> The issue is not exclusively about ValidateSetAttribute.\r\n\r\nThe specific error message in the issue is about ValidateSetAttribute - the `ArgumentOutOfRangeException` message thrown by `ValidateSetAttribute()`.  I am not sure it is related top other attribute types.\r\n\r\nThis is a \"Murky error message\" because `ValidateSetAttribute()` does not know the parameter name (and I didn't find a relatively easy way to pass it the parameter name).  As far as I understand, in all other cases it is called the list is from internal list, so the '\"_argument \"validValues_\"' in the message is o.k.",
      "created_at": "2021-04-07T13:11:16Z",
      "updated_at": "2021-04-07T13:11:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You can replace `ValidateSetAttribute` with `ValidateRange` for investigating.\r\nAgain, with `Test-BadAttribute -p<tab>` user should get an useful error message why IntelliSense does not work. Really there is an exception (we can see it if press <Enter> instead of <Tab>) but IntelliSense code hides it.",
      "created_at": "2021-04-07T16:30:33Z",
      "updated_at": "2021-04-07T16:30:33Z"
    },
    {
      "author": "davidBar-On",
      "author_association": "CONTRIBUTOR",
      "body": "> with `Test-BadAttribute -p<tab>` user should get an useful error message why IntelliSense does not work. Really there is an exception (we can see it if press instead of ) but IntelliSense code hides it.\r\n\r\nSeems I misunderstood the main issue.  I thought it is that _\"validValues\"_ should be _\"Param2\"_ in the error message '_InvalidArgument: Cannot process argument because the value of argument \"validValues\" is out of range._'.\r\n\r\nFrom the `ValidateRange` example and and using `bool` parameter I see that there are some issues with the auto complete:\r\n1. The above \\<tab\\> issue that \"should get an useful error message why IntelliSense does not work\".  I assume that the required fix is showing the exception error message that IntelliSense currently hides.\r\n\r\n2. When specifying empty `ValidateRange` parameter, after \\<enter\\> the following `MethodException` error is shown, but there is no such error message for empty `ValidateSet`.  I assume a fix is to show such `MethodException` error for empty `ValidateSet` (and maybe other attribute types).\r\n```\r\nMethodException:\r\nLine |\r\n  10 |          [ValidateRange()] # Bad attribute - the constructor is failed\r\n     |          ~~~~~~~~~~~~~~~~~\r\n     | MethodArgumentCountException Cannot find an overload for \".ctor\" and the argument count: \"0\".\r\n```\r\n\r\n3. When a parameter is defined as `bool`, `int`, etc., \\<tab\\> shows the current folder files as valid values, instead of something like \"_$True, $False, 1 or 0_\"  for `bool` and probably showing nothing for `int`.  I assume that this should be fixed for all parameter types, except for `switch`.\r\n\r\n**Should all these issues be fixed**?  If not, which of them (or other related issues that I didn't see) should be fixed?",
      "created_at": "2021-04-08T07:45:22Z",
      "updated_at": "2021-04-08T07:45:22Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> When a parameter is defined as bool, int, etc., <tab> shows the current folder files as valid values, instead of something like \"$True, $False, 1 or 0\" for bool and probably showing nothing for int. I assume that this should be fixed for all parameter types, except for switch.\r\n\r\nThis is a separate issue(s). We can find many such ones. Most from them could be fixed by improving a type inference.\r\n\r\nIn the issue we say only about improving the user experience with broken attributes:\r\n- typo in name\r\n- wrong attribute arguments\r\n- an exception in attribute implementation and so on.",
      "created_at": "2021-04-08T09:14:59Z",
      "updated_at": "2021-04-08T09:14:59Z"
    },
    {
      "author": "davidBar-On",
      "author_association": "CONTRIBUTOR",
      "body": "> In the issue we say only about improving the user experience with broken attributes:\r\n\r\nTo allow letting the use know about errors during tab-complete, an error message should be displayed to the user.  However, I did not find any `PSReadLine` method that allows to do that before <enter>.\r\n\r\nDid I miss something, or such method should be added to allow to show tab-completion errors?  I assume that just using `Console.WriteLine()` is not good enough, since the completion options may be shown in a GUI menu (unless such  menu is never used by PowerShell).",
      "created_at": "2021-04-13T07:04:14Z",
      "updated_at": "2021-04-13T07:04:14Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "There are a lot of WriteError() methods. We should find an appropriated one from current (execution) context.",
      "created_at": "2021-04-13T08:31:28Z",
      "updated_at": "2021-04-13T08:31:28Z"
    },
    {
      "author": "davidBar-On",
      "author_association": "CONTRIBUTOR",
      "body": "After further evaluation I now believe that a proper solution to this issue requires **changes to `PSReadLine`**.  This is assuming that after showing the tab-completion error message, the **PS prompt should be displayed again**.  E.g., case \"1.\" from the original issue description should look something like:\r\n```pwsh\r\nPS> Test-BadAttribute -Param1 <Tab>\r\nError: No completion options found since parameter \"$Param2\" ValidateSet is empty\r\n\r\nPS> Test-BadAttribute -Param1 \r\n```\r\nHowever, displaying the prompt after the error message should be done by `PSReadLine`, similar to the way the prompt is displayed after the completion options are displayed by [PSReadLine/Completion.cs PossibleCompletionsImpl()](https://github.com/PowerShell/PSReadLine/blob/dc38b451bee4bdf07f7200026be02516807faa09/PSReadLine/Completion.cs#L800-L801):\r\n```cs\r\n    menu.DrawMenu(null, menuSelect:false);\r\n    InvokePrompt(key: null, arg: _console.CursorTop);\r\n```\r\nFor this, `PSReadLine` should be able to receive the error message, display it and then re-display the prompt.  This is similar to the way it handles the received the completion options list (and maybe the error message can be implemented by returning the message as a special case of the completion options).\r\n\r\n**Does this approach seem reasonable?**  If it is, is it worth trying to implement it? (I am far from understanding the full process done for tab-completion between `PSRealLine` and `PowerShell`, but it seems that the required changes for this approach are relatively local, so I am willing to try.)",
      "created_at": "2021-04-20T06:01:37Z",
      "updated_at": "2021-04-20T06:01:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@davidBar-On Thanks for your research! I thought it was easier to fix than it turned out. \r\n\r\nI'd expect this works without PSReadline too in a way.\r\nPerhaps @daxian-dbw could comment how better the fix could be implemented.",
      "created_at": "2021-04-20T11:49:02Z",
      "updated_at": "2021-04-20T11:49:02Z"
    }
  ],
  "created_at": "2017-05-12T05:22:30Z",
  "number": 3769,
  "state": "closed",
  "title": "Attribute may silently crash",
  "updated_at": "2021-08-25T04:05:42Z"
}