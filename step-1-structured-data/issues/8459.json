{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8459",
  "author": "mklement0",
  "body": "Related: \r\n\r\n* #4988, which demonstrates that using `-Include` \\ `-Exclude` causes _non-existent_ input paths to be ignored.\r\n\r\n* #3304, which shows that `Get-ChildItem -Include` \\ `-Exclude` - _without `-Recurse`_ - unexpectedly apply to a - possibly implied input directory's name _itself_, not to the items _inside_ the directory.\r\n\r\nWhile adding `-Recurse` to `Get-ChildItem` fixes the problem, the same is not true for `Copy-Item`, which continues to apply `-Include` and `-Exclude` filters to the input directory name too, which is especially problematic with `-Include`:\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\nSet-Location $HOME\r\n'---'\r\n# Note: Wildcard *.* does NOT match 'Desktop', because it has no extension.\r\nCopy-Item -Recurse Desktop /tmp -Include *.*  -WhatIf\r\n'---'\r\nCopy-Item -Recurse Desktop /tmp -Exclude desk* -WhatIf\r\n```\r\n# Expected behavior\r\n\r\n```none\r\n---\r\nWhat if: Performing the operation \"Copy Directory\" on target \"Item: C:\\Users\\jdoe\\Desktop Destination: C:\\tmp\\Desktop\"\r\n---\r\nWhat if: Performing the operation \"Copy Directory\" on target \"Item: C:\\Users\\jdoe\\Desktop Destination: C:\\tmp\\Desktop\"\r\n```\r\nThat is, both commands should indicate that a copy operation will take place (even though the details aren't mentioned).\r\n\r\n# Actual behavior\r\n\r\n```none\r\n---\r\n---\r\n```\r\n\r\nThat is, both commands were unexpectedly _quiet no-ops_, because `-Include` filter `*.*` and  `-Exclude` filter `desk*` were both applied to `Desktop` itself, eliminating the one and only input path.\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core v6.2.0-preview.2 on macOS 10.14.1\r\nPowerShell Core v6.2.0-preview.2 on Ubuntu 18.04.1 LTS\r\nPowerShell Core v6.2.0-preview.2 on Microsoft Windows 10 Pro (64-bit; Version 1803, OS Build: 17134.407)\r\nWindows PowerShell v5.1.17134.407 on Microsoft Windows 10 Pro (64-bit; Version 1803, OS Build: 17134.407)\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "kvprasoon",
      "author_association": "CONTRIBUTOR",
      "body": "copy with `-Include *.*` in 6.2.0-Preview.3 works for me for this scenario. And isn't the `-Exclude` source path behaviour an expected one ? Problem occurs when there are items with similar matches and user need to exclude only those. Should be intelligent enough to exclude the source path...",
      "created_at": "2018-12-15T13:28:48Z",
      "updated_at": "2018-12-15T13:31:06Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> copy with -Include *.* in 6.2.0-Preview.3 works for me for this scenario\r\n\r\nIntriguing. I just tried on the following platforms with preview 3, and it does _not_ work for me, meaning that there's _no output_; what is your exact invocation scenario?\r\n\r\n```none\r\nPowerShell Core v6.2.0-preview.3 on macOS 10.14.2\r\nPowerShell Core v6.2.0-preview.3 on Ubuntu 18.04.1 LTS\r\nPowerShell Core v6.2.0-preview.3 on Microsoft Windows 10 Pro (64-bit; Version 1803, OS Build: 17134.471)\r\nWindows PowerShell v5.1.17134.407 on Microsoft Windows 10 Pro (64-bit; Version 1803, OS Build: 17134.471)\r\n```\r\n\r\n> Should be intelligent enough to exclude the source path...\r\n\r\nYes, if you provide a _container_ as the source path, combined with `-Recurse` (arguably, even without it, but that's a separate issue), the wildcard should not be applied to the container itself, only to its descendants - that's how it (sensibly) works with `Get-ChildItem`.\r\n\r\n> And isn't the -Exclude source path behaviour an expected one ? \r\n\r\nIn light of the above: what about the current behavior is expected?\r\n\r\n\r\n",
      "created_at": "2018-12-15T14:08:12Z",
      "updated_at": "2018-12-15T14:08:12Z"
    },
    {
      "author": "kvprasoon",
      "author_association": "CONTRIBUTOR",
      "body": "I didn't notice the term `directory` , I tried with file and worked\r\n```\r\n\u2665->copy -Recurse -Path .\\t.log -Include *.* -Verbose -Force -Destination C:\\Temp\\ -WhatIf \r\n\r\nWhat if: Performing the operation \"Copy File\" on target \"Item: C:\\Windows\\Temp\\testcopy\\t.log Destination: C:\\Temp\\t.log\".\r\n```\r\n\r\nand doesn't work for directory as you mentioned. And notice that the exclusion issue applies for both directory and path.\r\n\r\n```\r\n\u2665->copy -Recurse -Path .\\t.log -Exclude t* -Verbose -Force -Destination C:\\Temp\\ -WhatIf\r\n\r\n\u2665->\r\n```",
      "created_at": "2018-12-16T04:47:42Z",
      "updated_at": "2018-12-16T04:49:53Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "It's actually not about file vs. directory, it's that `*.*` only matches names _with an extension_, so `*.*` doesn't match `Desktop`, but matches `t.log`.\r\n\r\nI've updated the original post to make it clear that `*.*` was chosen _not_ to match input path `Desktop`, so as to demonstrate the problem.",
      "created_at": "2018-12-16T05:15:57Z",
      "updated_at": "2018-12-16T05:17:41Z"
    },
    {
      "author": "kvprasoon",
      "author_association": "CONTRIBUTOR",
      "body": "Got it, Thanks ! `*.*` matches with directory with `.` in its name too.",
      "created_at": "2018-12-16T06:31:27Z",
      "updated_at": "2018-12-16T06:31:27Z"
    }
  ],
  "created_at": "2018-12-13T19:30:26Z",
  "labels": [
    "WG-Cmdlets-Management",
    "WG-Engine-Providers",
    "Area-FileSystem-Provider"
  ],
  "number": 8459,
  "state": "open",
  "title": "Copy-Item -Include / -Exclude filters with -Recurse are unexpectedly applied to an input directory path itself",
  "updated_at": "2021-11-29T17:36:24Z"
}