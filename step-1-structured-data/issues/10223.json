{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10223",
  "author": "KirkMunro",
  "body": "# PR Summary\r\n\r\nCleanup of workflow code that has been deprecated. In particular:\r\n\r\n- deprecation of `workflow` keyword\r\n- deprecation of `parallel` keyword (used for parallel activities in workflow)\r\n- deprecation of `sequence` keyword (used for sequential activities in workflow)\r\n- deprecation of `inlinescript` activity (used for activities outside of workflow)\r\n- removal of `-parallel` parameter on `foreach` statement\r\n- removal of `-parallel` parameter on `switch` statement\r\n- removal of related classes/methods\r\n- removal of deprecated resource strings\r\n- updates to non-deprecated resource strings\r\n- removal of the use of \"workflow\" in many comments\r\n\r\nThis PR is not exhaustive -- there are still many more references to workflow, particularly in the following files:\r\n- src\\System.Management.Automation\\gen\\EventResource.cs\r\n- src\\System.Management.Automation\\utils\\tracing\\TracingGen.cs\r\n\r\nAlso the following files have a few more references to workflow that I wasn't sure what to do with:\r\n- src\\System.Management.Automation\\utils\\PowerShellETWTracer.cs\r\n- src\\System.Management.Automation\\utils\\PSTelemetryMethods.cs\r\n\r\nComments on those four files and whether or not their references to workflow can be removed would be appreciated.\r\n\r\nBeyond those, there will be very few references to workflow, mostly indicating that it's deprecated.\r\n\r\n## PR Context\r\n\r\nSee issue #9570.\r\n\r\n## PR Checklist\r\n\r\n- [X] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [X] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [ ] None\r\n    - **OR**\r\n    - [X] Yes, but they are approved for removal of workflow functionality (see #9570)\r\n- **Experimental features**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [X] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [X] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [X] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n\r\ncc: @iSazonov",
  "closed_at": "2019-08-08T20:50:29Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@KirkMunro We have a conclusion to do not remove `parallel` keyword (for future enhancement of \"for -parallel\").\r\nAs for `workflow` and `sequence` keywords in the time I believe we should do the same - to do not remove and inform users with message \"unsupported\". It is more user friendly than generic parser error message.",
      "created_at": "2019-07-25T03:24:21Z",
      "updated_at": "2019-07-25T03:24:21Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "> We have a conclusion to do not remove parallel keyword (for future enhancement of \"for -parallel\").\r\n> As for workflow and sequence keywords in the time I believe we should do the same - to do not remove and inform users with message \"unsupported\". It is more user friendly than generic parser error message.\r\n\r\nI'm confused @iSazonov, because that seems to contradict what was said in #9570, where the discussion suggests removing them entirely, unless I read it wrong. In that discussion, @SteveL-MSFT said the following:\r\n\r\n> Part of the reasoning by @PowerShell/powershell-committee to remove is to have the errors at parse time/compile time (for C# code) vs at runtime. There is no plan to ever bring back workflow.\r\n\r\nAlso there is a difference between the `parallel` block statement (which was solely a workflow construct) and the `-parallel` and `-throttlelimit` (which doesn't appear to be documented btw) parameters on `foreach` that only worked inside of a workflow. The `parallel` and `sequence` block statements are workflow-only, and that has been deprecated, so I believe they should remain removed as per the quote above.\r\n\r\nAs for foreach and `-parallel`, that RFC was removed in favor of `ForEach-Object -parallel`. Do we want a parseable foreach parameter that doesn't work because someday it might be in the foreach statement, or do we want parser errors to catch that it doesn't work, knowing we can implement parallelism support in the foreach keyword if/when we decide to do so, using whatever syntax we want at the time. I prefer the latter. Placeholders are only indicators of how long it actually takes before you do something, and since this is a keyword, there's no risk of conflict with 3rd party extensions, so better to have it result in a parser error as long as it won't work if you ask me.",
      "created_at": "2019-07-25T14:06:53Z",
      "updated_at": "2019-07-25T14:13:07Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Also @iSazonov, I did see your comment about the `IsWorkflow` property on #9570, and agree with your proposal to leave it there as a dummy property for now, updating PowerShellGet so that it will work without `IsWorkflow`, and then circling back and cleaning up that property. The PowerShellGet update should simply check the PowerShell version, and only use the `IsWorkflow` property if the PS Version is less than 7. That will allow it to continue to be updated and work across all versions.",
      "created_at": "2019-07-25T14:11:53Z",
      "updated_at": "2019-07-25T14:12:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@KirkMunro My thoughts is the same as @daxian-dbw https://github.com/PowerShell/PowerShell/issues/9570#issuecomment-515183744\r\n\r\nUntil Windows PowerShell EOL there is and will be a lot of scripts with workflow and we need to inform users with a message like \"Workflow is not supported in PowerShell 7.0 and above\". Otherwise users will get a generic parser message. \r\nAnd yes, it should be at parse time. If tokenizer recognize a keyword we can create a specific message for it. I hope @daxian-dbw can add more info.",
      "created_at": "2019-07-26T03:52:30Z",
      "updated_at": "2019-07-26T03:52:30Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "I think its more important that if a user develops a new script on the newest version, and that user uses the (should be) reserved keywords `workflow` or `parallel` or `sequence` or `inlinescript` for a function name, but then uses the script on an older version, the user's script wouldn't work (calling the function at the start of a pipeline would cause it to be treated as a keyword).   I think it would be better to reserve the keywords to prevent that kind of backward compatibility trouble for the user.\r\n\r\nThe `-parallel` parameter is probably not a concern.",
      "created_at": "2019-07-26T05:16:11Z",
      "updated_at": "2019-07-26T05:16:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@msftrncs We enabled using keywords for names in some day ago.",
      "created_at": "2019-07-26T05:19:25Z",
      "updated_at": "2019-07-26T05:19:25Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "You can always use keywords as function names \u2026 that has never been limited, but to use that function, it must either be invoked `& keyword` or not the first function in a pipeline.\r\n\r\n```PowerShell\r\nfunction switch {echo $args}\r\nswitch test # generates an error\r\n& switch test # echos 'test'\r\n'test' | switch test # also echos 'test'\r\n```",
      "created_at": "2019-07-26T05:30:55Z",
      "updated_at": "2019-07-26T05:30:55Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "I agree with the comments about parsing errors for keywords that have been deprecated. I have put those keywords back, and added specific tests to ensure that they are resulting in parsing errors that indicate they have been deprecated.",
      "created_at": "2019-08-04T17:55:11Z",
      "updated_at": "2019-08-04T17:55:11Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "The test failures that just occurred happen because `Uninstall-Module` fails in the `PowerShellGet` tests with an invalid index error. As far as I can tell, those issues come from outside of this set of changes. @SteveL-MSFT Any insight into these PowerShellGet errors causing the CI builds to fail?",
      "created_at": "2019-08-05T15:56:00Z",
      "updated_at": "2019-08-05T15:56:00Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "I am worried about removing so much old workflow functionality at once, without causing some regression issues.  For example Debug-Job no longer works correctly in PowerShell Core although it does in Windows PowerShell.  Since job debugging was created originally for workflow jobs, removing workflow functionality may have caused this (however I have not looked into it to know for sure).\r\n\r\nI'd like to get a committee review and opinion. /cc @SteveL-MSFT ",
      "created_at": "2019-08-05T21:11:04Z",
      "updated_at": "2019-08-05T21:11:04Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@PaulHigin When I saw you log the issue about job debugging, I looked into it because I was curious, and based on my assessment I don't believe that issue has anything to do with removal of workflow functionality.",
      "created_at": "2019-08-05T21:14:26Z",
      "updated_at": "2019-08-05T21:14:26Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Also I should call out that a lot of the changes here are just in code comments. There are code changes, sure, but there are a lot of changes in just code comments as well, bulking this up.",
      "created_at": "2019-08-05T21:17:18Z",
      "updated_at": "2019-08-05T21:17:18Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this:\r\n\r\n- We want to continue to reserve `-parallel` for `foreach` and `switch` so that should stay\r\n- We share concern that we have insufficient test coverage so such a large change may not reveal issues until much later when more people would be impacted\r\n\r\nAsk is to split this into smaller pieces that can be reviewed more completely to minimize any risk of regression.",
      "created_at": "2019-08-07T22:39:12Z",
      "updated_at": "2019-08-07T22:41:19Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Ok, I'll break it up into chunks.\r\n\r\nAlso, ignore the most recent change that I just pushed. I just tried something with rebase that I shouldn't have, need to roll that back.",
      "created_at": "2019-08-07T22:42:54Z",
      "updated_at": "2019-08-07T22:48:03Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "This PR has been superceded by the following PRs, and will be closed.\r\n\r\n#10317 \r\n#10318 \r\n#10319 \r\n#10320 \r\n#10321 \r\n#10326 \r\n#10328 \r\n",
      "created_at": "2019-08-08T20:50:28Z",
      "updated_at": "2019-08-08T20:50:28Z"
    }
  ],
  "created_at": "2019-07-24T21:32:28Z",
  "number": 10223,
  "state": "closed",
  "title": "Code cleanup: bulk removal of deprecated workflow code",
  "updated_at": "2019-08-08T20:50:29Z"
}