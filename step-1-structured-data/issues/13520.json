{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13520",
  "author": "ili101",
  "body": "## Summary of the new feature/enhancement\r\n\r\nIn C# you can call a method omitting the optional parameters and by name, I suggest adding the option to do the same thing in PowerShell.\r\nIn addition to being more compatible with C# Classes this is more in line with what PowerShell users expect as it's resembles the PowerShell Functions style where you already use optional and named parameters regularly.\r\nhttps://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/named-and-optional-arguments\r\n\r\n## Proposed technical implementation details (optional)\r\n\r\n``` powershell\r\n# Apparently defining default values doesn't throw an error so already works?\r\nclass ClassName {\r\n    ClassName([string]$sellerName, [int]$orderNum = 5, [string]$productName = 'Default') {\r\n        Write-Host \"Seller: $($sellerName), Order #: $($orderNum), Product: $($productName)\"\r\n    }\r\n}\r\n\r\n# Calling it normally:\r\n[ClassName]::new(\"Gift Shop\", 31, \"Red Mug\")\r\n\r\n# Doesn't Work but should work:\r\n[ClassName]::new(\"Gift Shop\")\r\n# EMethodException: Cannot find an overload for \"new\" and the argument count: \"1\".\r\n\r\n# Some syntax options for named parameters:\r\n# With name (C# style):\r\n[ClassName]::new(sellerName: \"Gift Shop\", 31, \"Red Mug\")\r\n[ClassName]::new(sellerName: \"Gift Shop\")\r\n# More of a Powershell style?\r\n[ClassName]::new(@{sellerName = \"Gift Shop\"}, 31, \"Red Mug\")\r\n# Powershell splat style?\r\n$Param = @{ sellerName = \"Gift Shop\" ; orderNum = 31 }\r\n[ClassName]::new(@Param)\r\n# Powershell function style?\r\n[ClassName]::new(-sellerName \"Gift Shop\")\r\n```\r\n\r\nI see that optional parameters are already reported in https://github.com/PowerShell/PowerShell/issues/9701 https://github.com/PowerShell/PowerShell/issues/7534\r\nBut I didn't find an issue for the Named part.",
  "closed_at": "2020-08-28T17:00:11Z",
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> ```powershell\r\n> # Apparently defining default values doesn't throw an error so already works?\r\n> ```\r\n\r\nI think it doesn't throw but also doesn't actually change the type metadata any.  Also note that iirc PowerShell doesn't honor the default value of optional parameters unless they happen to be the same as `default(TheType)`.\r\n\r\n> But I didn't find an issue for the Named part.\r\n\r\nI think there's two but #13307 is the one to track.",
      "created_at": "2020-08-26T11:29:53Z",
      "updated_at": "2020-08-26T11:29:53Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as duplicate and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-08-28T17:00:10Z",
      "updated_at": "2020-08-28T17:00:10Z"
    }
  ],
  "created_at": "2020-08-26T08:12:39Z",
  "number": 13520,
  "state": "closed",
  "title": "Feature Request Class Named and Optional Arguments",
  "updated_at": "2020-08-28T17:00:11Z"
}