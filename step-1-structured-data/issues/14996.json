{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14996",
  "author": "rjmholt",
  "body": "The public `ScriptPosition` object that PowerShell provides as an implementation of `IScriptPosition` always sets script offsets to 0:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/4b9b0788ed28ea6d463ce857d1ed81bd4a977a59/src/System.Management.Automation/engine/parser/Position.cs#L669-L672\r\n\r\nThis is opposed to the type that PowerShell itself uses, [`InternalScriptPosition`](https://github.com/PowerShell/PowerShell/blob/9b39f05557ef1c4fe51b14376a7c3abbcfaebff8/src/System.Management.Automation/engine/parser/Position.cs#L430), which does have an offset. Meaning that given an `IScriptPosition`, the offset can't be trusted to be correct. Which causes issues like https://github.com/PowerShell/PSScriptAnalyzer/issues/1591#issuecomment-703805488.\r\n\r\nThis weirdness forces tools that deal with these types to do things like [use reflection to construct `InternalScriptPosition`s instead](https://github.com/PowerShell/PowerShellEditorServices/blob/9e1a17a3ceabc1dc856ce90f4aac177c971c5c0a/src/PowerShellEditorServices/Services/Symbols/Vistors/AstOperations.cs#L26-L30) or [reimplement positions and extents from scratch](https://github.com/PowerShell/PowerShellEditorServices/blob/9e1a17a3ceabc1dc856ce90f4aac177c971c5c0a/src/PowerShellEditorServices/Extensions/EditorFileRanges.cs#L14-L86).\r\n\r\nNeither of those things should be necessary; PowerShell should expose a fully-functional position type that tooling can fully depend on.",
  "closed_at": null,
  "comments": [
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Related to https://github.com/PowerShell/PowerShell/issues/9562",
      "created_at": "2021-03-11T18:53:57Z",
      "updated_at": "2021-03-11T18:53:57Z"
    }
  ],
  "created_at": "2021-03-11T18:43:05Z",
  "labels": [
    "Needs-Triage"
  ],
  "number": 14996,
  "state": "open",
  "title": "Public ScriptPositon type always sets offsets to 0",
  "updated_at": "2021-03-11T21:50:14Z"
}