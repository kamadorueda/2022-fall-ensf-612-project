{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5535",
  "author": "nightroman",
  "body": "\r\n`[ref]` may be used for functions returning something via `[ref]` parameters in\r\naddition to the output or instead of the output.\r\n\r\nSee\r\n\r\n    help about_Ref\r\n\r\nThere may be problems though when by design `[ref]` is just one of the possible\r\nparameter types. In PowerShell such parameters are normally declared as\r\n`[object]` or `[object[]]`. Namely, `[ref]` may be unexpectedly unwrapped or\r\nexpectedly sent as `[ref]` depending (surprisingly) on using or omitting the\r\nparameter name.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nTest-1.lost.ref.object.ps1\r\n\r\n```powershell\r\nfunction Get-ParamType([object]$Param) {\r\n    $Param.GetType().Name\r\n}\r\n\r\n# [ref] object\r\n$var = [ref]'bar'\r\n\r\n# PSReference, expected\r\nGet-ParamType $var\r\n\r\n# String, UNEXPECTED\r\nGet-ParamType -Param $var\r\n```\r\n\r\nTest-2.lost.ref.array.ps1\r\n\r\n```powershell\r\nfunction Get-ParamType([object[]]$Param) {\r\n    $Param[0].GetType().Name\r\n}\r\n\r\n# [ref] object\r\n$var = [ref]'bar'\r\n\r\n# PSReference, expected\r\nGet-ParamType $var\r\nGet-ParamType -Param @($var)\r\n\r\n# String, UNEXPECTED\r\nGet-ParamType -Param $var\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nIn all cases the type of the received parameter is `PSReference`, i.e. `[ref]`\r\nis not unwrapped.\r\n\r\nActual behavior\r\n---------------\r\n\r\nIn some cases the type of the received parameter is `PSReference`, as expected,\r\nin others it is `String`, i.e. `[ref]` is unwrapped.\r\n\r\nAnother concern\r\n---------------\r\n\r\nThe result depends on whether we send the data as the positional or named\r\nparameter. Whatever the desired behaviour for `[ref]` is, the result must\r\nbe at least consistent.\r\n\r\nEnvironment data\r\n----------------\r\n\r\nv5, v6-rc\r\n\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.15063.674\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.15063.674\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-rc\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-rc\r\nOS                             Microsoft Windows 10.0.15063\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "[ref] is desined for using with COM-objects. So I'd want to see a repo more related to COM.",
      "created_at": "2017-11-24T04:15:55Z",
      "updated_at": "2017-11-24T04:16:08Z"
    },
    {
      "author": "nightroman",
      "author_association": "NONE",
      "body": "See\r\n\r\n    help about_Ref\r\n\r\nI do not know how this manual is related to COM-objects. It describes a totally different scenario.",
      "created_at": "2017-11-24T04:25:48Z",
      "updated_at": "2017-11-24T04:25:48Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "I'm told (this is before my time) that `[ref]` was added to support COM. By some luck, it also happened to work for C# `ref` and `out`, but it wasn't meant to be used in some of the ways people do use it today.\r\n\r\nI think it's more of an implementation artifact than a real design that you can use `[ref]` like a type. That doesn't mean it's not useful, just that the implementation never considered such usage.",
      "created_at": "2017-11-25T01:18:38Z",
      "updated_at": "2017-11-25T01:18:38Z"
    },
    {
      "author": "nightroman",
      "author_association": "NONE",
      "body": "I realize that I hit a scenario with not well defined behaviour. In reality\r\ncomplex systems often have such areas. This is fine if a user has a chance\r\nto feel that he is experimenting with something questionable and using on\r\nhis own risk.\r\n\r\nBut in PowerShell when I look at `[ref]` as a potential tool for a task then I see\r\nnothing that helps me to avoid the trap. I see a handy tool and PowerShell\r\nencourages me using `[ref]`, too.\r\n\r\n- It provides the type accelerator `[ref]` (use me!).\r\n- The .NET type behind it looks straightforward and innocent.\r\n- It provides the help topic `about_Ref` where it shows how `[ref]` is used as\r\n  a type for solving a typical task (get something from a command in addition\r\n  to normal output). Very good, I need exactly this.\r\n- It has no usage warnings in this topic and does not tell \"designed for COM\".\r\n- Finally, PowerShell even sometimes works with `[ref]` as one may expect, so\r\n  one may think \"fine, let's go for it\". That is what happened to me. My code\r\n  worked for a while (see examples). Then I realized that if the calls change\r\n  in some seemingly innocent way then the result changes (see examples).\r\n  It was not easy or fast to find the reason of the problem.\r\n",
      "created_at": "2017-11-25T10:10:27Z",
      "updated_at": "2017-11-26T14:07:04Z"
    },
    {
      "author": "nightroman",
      "author_association": "NONE",
      "body": "And another thing that looks suspicions is the difference of results.\r\n\r\nFor a command with a positional parameter there are must be no difference\r\nbetween calling with the parameter name specified or omitted,\r\nat least with the only parameter set. Is this correct?\r\n\r\nIf this is correct then something is not quite right in the current PowerShell\r\nbecause the examples show the difference.\r\n\r\nMaybe the difference is about `[ref]` only. But I cannot be sure anymore.\r\nI have the fact that processing is different. What else may cause the\r\ndifference? In my software, should I test both scenarios, in order to\r\nbe sure I covered different PowerShell code paths and processing?\r\n",
      "created_at": "2017-11-25T11:00:56Z",
      "updated_at": "2017-11-25T11:00:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">should I test both scenarios...?\r\n\r\nDo you have other scenarios (without `[ref]`) in which this distinction manifests itself?\r\n",
      "created_at": "2017-11-25T19:52:57Z",
      "updated_at": "2017-11-25T19:52:57Z"
    },
    {
      "author": "nightroman",
      "author_association": "NONE",
      "body": "> Do you have other scenarios (without [ref]) in which this distinction manifests itself?\r\n\r\nNo. The `[ref]` case if the first. As soon as I found it I reported it.\r\nI do not quite understand the reason for this question. If I knew something I would tell this right away.\r\n",
      "created_at": "2017-11-25T20:24:49Z",
      "updated_at": "2017-11-25T20:24:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We have to understand - is the problem only with this or more general?\r\n",
      "created_at": "2017-11-25T20:31:44Z",
      "updated_at": "2017-11-25T20:32:04Z"
    },
    {
      "author": "nightroman",
      "author_association": "NONE",
      "body": "I afraid somebody may have to look at the code and understand what it is doing.",
      "created_at": "2017-11-25T20:32:33Z",
      "updated_at": "2017-11-25T20:32:33Z"
    }
  ],
  "created_at": "2017-11-24T01:47:42Z",
  "number": 5535,
  "state": "open",
  "title": "[ref] may be unwrapped unexpectedly",
  "updated_at": "2017-11-26T14:07:04Z"
}