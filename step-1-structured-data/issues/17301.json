{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17301",
  "author": "inshua",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nThe problem is \r\n````\r\n[AppDomain]::CurrentDomain.GetAssemblies() | Where-Object { $_.Location.Length -And $_.Location.Split('\\')[-1].Equals(\"mscorlib.dll\") }\r\n````\r\nworks fine.\r\n\r\nbut\r\n````\r\n[AppDomain]::CurrentDomain.GetAssemblies() | Where-Object { $_.Location.Length -And $_.Location.Split('\\\\')[-1].Equals(\"mscorlib.dll\") }\r\n````\r\nfailed.\r\n\r\nfor '\\\\' not recognized as escaped string, and both them will output found item in Windows Powershell.\n\n### Expected behavior\n\n```console\nPS> [AppDomain]::CurrentDomain.GetAssemblies() | Where-Object { $_.Location.Length -And $_.Location.Split('\\\\')[-1].Equals(\"mscorlib.dll\") }\r\n\r\nGAC    Version        Location\r\n---    -------        --------\r\nTrue   v4.0.30319     C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\mscorlib.dll\n```\n\n\n### Actual behavior\n\n```console\nPS> [AppDomain]::CurrentDomain.GetAssemblies() | Where-Object { $_.Location.Length -And $_.Location.Split('\\\\')[-1].Equals(\"mscorlib.dll\") }\r\n\r\nNothing output.\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.3.0-preview.3\r\nPSEdition                      Core\r\nGitCommitId                    7.3.0-preview.3\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2022-05-12T00:00:42Z",
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "This is due to an additional overload in `String.Split`. In 7.3 it selects the new `String.Split(string)` overload where previously it converted to `char[]` and selected `String.Split(char[])`.\r\n\r\nNote that in neither version is it considered an escape character, it was just previously splitting on  any of the characters in the string rather than the exact string. You may be looking for a split that uses regex (`String.Split` does not), that would be either the split operator (`-split`) or the `[regex]::Split` method.",
      "created_at": "2022-05-10T21:28:57Z",
      "updated_at": "2022-05-10T21:28:57Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-05-12T00:00:41Z",
      "updated_at": "2022-05-12T00:00:41Z"
    },
    {
      "author": "inshua",
      "author_association": "NONE",
      "body": "Thank you @SeeminglyScience ",
      "created_at": "2022-05-12T10:32:42Z",
      "updated_at": "2022-05-12T10:32:42Z"
    }
  ],
  "created_at": "2022-05-10T16:14:28Z",
  "number": 17301,
  "state": "closed",
  "title": "Quoted slash problem",
  "updated_at": "2022-05-12T10:32:42Z"
}