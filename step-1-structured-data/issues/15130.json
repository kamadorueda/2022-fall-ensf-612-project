{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15130",
  "author": "yves-dolce",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\n## Steps to reproduce\r\nIssue this command on the last line of your window so that scrolling is taking place:\r\n```powershell\r\nWrite-Host \"Bebop\" -BackgroundColor Green -ForegroundColor Black\r\n```\r\n\r\n## Expected behavior\r\nThe line below the \"Bebop\" line is clean (i.e. what was done with `Write-Host` doesn't leak into the following line)\r\n\r\n## Actual behavior\r\n\r\nThe line is painted green\r\n![image](https://user-images.githubusercontent.com/1760825/113184538-23a0c880-920a-11eb-9b86-a2fd6108fe93.png)\r\n\r\n## Environment data\r\n\r\n```none\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Please make the title of the issue more descriptive.\r\n\r\nPlease check with latest PowerShell 7.2 Preview.",
      "created_at": "2021-04-02T06:49:32Z",
      "updated_at": "2021-04-02T06:49:32Z"
    },
    {
      "author": "yves-dolce",
      "author_association": "NONE",
      "body": "Still there in Preview 4:\r\n![image](https://user-images.githubusercontent.com/1760825/113765484-2f403380-96d1-11eb-93cc-f8d867bfe937.png)\r\n",
      "created_at": "2021-04-06T19:11:25Z",
      "updated_at": "2021-04-06T19:11:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@yves-dolce Please remove PSReadline (Remove-Module PSReadline) and check again. If you can not repro without PSReadline please install and check with latest PSReadline prerelease version.",
      "created_at": "2021-04-07T04:50:43Z",
      "updated_at": "2021-04-07T04:50:43Z"
    },
    {
      "author": "yves-dolce",
      "author_association": "NONE",
      "body": "I can repro without it.",
      "created_at": "2021-04-16T06:18:29Z",
      "updated_at": "2021-04-16T06:18:29Z"
    },
    {
      "author": "freMea",
      "author_association": "NONE",
      "body": "# Similar issues or duplicates\r\n\r\n#14686\r\n#11267\r\n\r\n# Setup\r\n\r\nI can reproduce.\r\n\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Microsoft Windows 10.0.19041\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\nTested with cleaned session from user installed modules and without PSReadline.\r\n```\r\nPS>gmo | select name, version\r\n\r\nName                            Version\r\n----                            -------\r\nMicrosoft.PowerShell.Management 7.0.0.0\r\nMicrosoft.PowerShell.Utility    7.0.0.0\r\n```\r\n\r\n# Step to reproduce\r\n\r\nI you run this below code directly or via a file.ps1, the result is the same.\r\n\r\n ```powershell\r\n[Enum]::GetValues([ConsoleColor]) |\r\nForEach-Object {\r\n\t$color = $_.ToString().Trim()\r\n\tif (($color -like 'dark*') -or ($color -like 'black')) {\r\n\t\tWrite-Host 'test' -BackgroundColor Black\r\n\t\tWrite-Host \"$color\" -ForegroundColor $color\r\n\t\tWrite-Host \"$color\" -ForegroundColor White -BackgroundColor $color\r\n\t} else {\r\n\t\tWrite-Host 'test' -BackgroundColor Black\r\n\t\tWrite-Host \"$color\" -ForegroundColor $color\r\n\t\tWrite-Host \"$color\" -ForegroundColor Black -BackgroundColor $color\r\n\t}\r\n}\r\n```\r\n\r\n# Results\r\nRendering in console or in WT. Look at the bottom of the window. I suspect the scroll cause the issue as mentioned in one of the issue mentioned before.\r\n![test](https://user-images.githubusercontent.com/22337329/120934212-b1fb6400-c6fd-11eb-8915-e232e0f6e5f7.gif)\r\n\r\nAs we can see, `write-host` with `-BackgroundColor` option fills the entire line with the color. For some reason, the line length seems to be longer than the console width and leak to the the next scroll line. This is solved when resizing console width.\r\n\r\nHere is running command [colortool -c](https://github.com/microsoft/terminal/releases/tag/1904.29002)\r\n![Gif Animate 2021-06-07 09h49 #335 _optimized](https://user-images.githubusercontent.com/22337329/120979754-325dab80-c776-11eb-81dd-f8809bbdef7d.gif)\r\n\r\n# Expectation\r\n\r\nFirst, documentation doesn\u2019t mention `write-host` with `-BackgroundColor`  is supposed to fill the entire line instead of the object alone. This needs to be clarified.\r\n\r\nSecondly, it seems that line length seen by `write-host`  is longer than the console width. In any case, background color should not line break.\r\n\r\n# Workaround (almost)\r\n\r\nUse `-NoNewline` if using `-BackgroundColor`.\r\n\r\n```powershell\r\n[Enum]::GetValues([ConsoleColor]) |\r\nForEach-Object {\r\n\t$color = $_.ToString().Trim()\r\n\tif (($color -like 'dark*') -or ($color -like 'black')) {\r\n\t\tWrite-Host \"`n$color\" -ForegroundColor $color\r\n\t\tWrite-Host \"$color\" -ForegroundColor White -BackgroundColor $color -NoNewline\r\n\t} else {\r\n\t\tWrite-Host \"`n$color\" -ForegroundColor $color\r\n\t\tWrite-Host \"$color\" -ForegroundColor Black -BackgroundColor $color -NoNewline\r\n\t}\r\n}\r\n```\r\n\r\nThis will produce non apparent bug. Only the object is filled with background color. But when resizing window, the all line is filled.\r\n![test](https://user-images.githubusercontent.com/22337329/120935224-01439380-c702-11eb-98ac-1c60623725ac.gif)\r\n\r\n# Note\r\n\r\nThis problem does not occur in the integrated terminal for VSCode.",
      "created_at": "2021-06-06T18:17:13Z",
      "updated_at": "2021-06-07T07:58:50Z"
    },
    {
      "author": "yves-dolce",
      "author_association": "NONE",
      "body": "It doesn't look like anybody cares... Thanks for the workaround and pointing to those duplicates.",
      "created_at": "2021-06-11T07:08:09Z",
      "updated_at": "2021-06-11T07:08:09Z"
    },
    {
      "author": "nmbell",
      "author_association": "NONE",
      "body": "As a workaround, you can try adding a call to ScrollDisplayDownLine before the call to Write-Host, .e.g.:\r\n```\r\n[Enum]::GetValues([ConsoleColor]) | ForEach-Object {\r\n\t[Microsoft.PowerShell.PSConsoleReadLine]::ScrollDisplayDownLine()\r\n\tWrite-Host 'some text' -BackgroundColor $_.ToString()\r\n\t# [Microsoft.PowerShell.PSConsoleReadLine]::ScrollDisplayUpLine()\r\n\tWrite-Host 'some more text'\r\n}\r\n```\r\n\r\nIt does create some upward scrolling until you hit the bottom of the console, though. You can call ScrollDisplayUpLine afterwards if this is an issue, but then that can cause some jerkiness in the display. Six of one... :man_shrugging:.",
      "created_at": "2021-11-16T06:06:02Z",
      "updated_at": "2021-11-16T06:06:02Z"
    },
    {
      "author": "fflaten",
      "author_association": "CONTRIBUTOR",
      "body": "Still an issue in 7.3 previews. Able to repro in vscode integrated console, conhost and windows terminal. This is one of the few things where Windows PowerShell 5.1 is superior \ud83d\ude42 ",
      "created_at": "2022-06-27T17:45:12Z",
      "updated_at": "2022-06-27T17:45:43Z"
    }
  ],
  "created_at": "2021-03-31T17:16:46Z",
  "labels": [
    "WG-Interactive-Console",
    "Needs-Triage"
  ],
  "number": 15130,
  "state": "open",
  "title": "Background color leaking to next scrolled line",
  "updated_at": "2022-06-27T17:45:43Z"
}