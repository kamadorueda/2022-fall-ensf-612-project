{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9889",
  "author": "bergmeister",
  "body": "PSScriptAnalyzer version of 1.18.0 or older sporadically encounter an exception when calling `Test-ModuleManifest` concurrently, it seems to be an issue of the PowerShell engine code itself, not the cmdlet\r\nThe issue applies to any PowerShell version (5, 6.2, 7.0-preview1)\r\n\r\nFor context, here is how PSSA calls `Test-ModuleManifest` in the `Singleton` `Helper` class by creating an instance of `PowerShell` each time (that gets disposed afterwards) but with a re-used runspace pool (previous versions did not re-use the runspace pool and suffered from the same issue as well though).\r\nhttps://github.com/PowerShell/PSScriptAnalyzer/blob/0bef1c8b8ddf5b570dd0b6c90f0d0257b94eb374/Engine/Helper.cs#L306-L315\r\n```csharp\r\nusing (var ps = System.Management.Automation.PowerShell.Create())\r\n{\r\n    ps.RunspacePool = _runSpacePool;\r\n    ps.AddCommand(\"Test-ModuleManifest\")\r\n        .AddParameter(\"Path\", filePath)\r\n        .AddParameter(\"WarningAction\", ActionPreference.SilentlyContinue);\r\n    try\r\n    {\r\n        psObj = ps.Invoke();\r\n    }\r\n    { ... }\r\n}\r\n```\r\nThe above code gets called from from different threads (each rule has its own thread) that are started as follows here:\r\nhttps://github.com/PowerShell/PSScriptAnalyzer/blob/a68b13956ab1136af91066d1ce61113574447945/Engine/ScriptAnalyzer.cs#L2075\r\n```csharp\r\nallowedRules.Select(scriptRule => Task.Factory.StartNew(() => .... );\r\n```\r\n\r\n# Steps to reproduce\r\n\r\nExtract the files in the below zip to a folder (yes, they are a bit artificial but are a good and simple way of making the race condition more reliably on most machines (my machine is a 4 core i7).\r\n[repro.zip](https://github.com/PowerShell/PowerShell/files/3287403/repro.zip)\r\n\r\n```powershell\r\nInstall-module PSScriptAnalyzer -RequiredVersion 1.18.0\r\n1..100 | Invoke-ScriptAnalyzer -Path $PathToReproPsd1\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nNo leaked errors\r\n```\r\n\r\n# Actual behavior\r\n\r\nPowerShell leaks errors that indicate a thread safety problem.\r\nPR #9860 offered a fix but the review concluded it was not the right fix/place.\r\n\r\nThe stack trace is below and I uploaded a minidump with heap [here](https://www.dropbox.com/s/pgblge4chymc8wc/pwsh.dmp?dl=0) from the latest `master` commit `bdc8548700118cea6c31420c2f7478785e6d84ac` of `PowerShell` for one of the most common exceptions (`CmdletInvocationException` with inner exception from `System.Collections.ListDictionaryInternal`:  `'Collection was modified; enumeration operation may not execute.'`)\r\n```\r\n   at System.Management.Automation.Runspaces.PipelineBase.Invoke(IEnumerable input) in C:\\Users\\chris\\PowerShell\\src\\System.Management.Automation\\engine\\hostifaces\\pipelinebase.cs:line 416\r\n   at System.Management.Automation.Runspaces.Pipeline.Invoke() in C:\\Users\\chris\\PowerShell\\src\\System.Management.Automation\\engine\\hostifaces\\Pipeline.cs:line 531\r\n   at System.Management.Automation.PowerShell.Worker.ConstructPipelineAndDoWork(Runspace rs, Boolean performSyncInvoke) in C:\\Users\\chris\\PowerShell\\src\\System.Management.Automation\\engine\\hostifaces\\PowerShell.cs:line 5619\r\n   at System.Management.Automation.PowerShell.Worker.CreateRunspaceIfNeededAndDoWork(Runspace rsToUse, Boolean isSync) in C:\\Users\\chris\\PowerShell\\src\\System.Management.Automation\\engine\\hostifaces\\PowerShell.cs:line 5466\r\n   at System.Management.Automation.PowerShell.CoreInvokeHelper[TInput,TOutput](PSDataCollection`1 input, PSDataCollection`1 output, PSInvocationSettings settings) in C:\\Users\\chris\\PowerShell\\src\\System.Management.Automation\\engine\\hostifaces\\PowerShell.cs:line 4588\r\n   at System.Management.Automation.PowerShell.CoreInvoke[TInput,TOutput](PSDataCollection`1 input, PSDataCollection`1 output, PSInvocationSettings settings) in C:\\Users\\chris\\PowerShell\\src\\System.Management.Automation\\engine\\hostifaces\\PowerShell.cs:line 4780\r\n   at System.Management.Automation.PowerShell.CoreInvoke[TOutput](IEnumerable input, PSDataCollection`1 output, PSInvocationSettings settings) in C:\\Users\\chris\\PowerShell\\src\\System.Management.Automation\\engine\\hostifaces\\PowerShell.cs:line 4530\r\n   at System.Management.Automation.PowerShell.Invoke(IEnumerable input, PSInvocationSettings settings) in C:\\Users\\chris\\PowerShell\\src\\System.Management.Automation\\engine\\hostifaces\\PowerShell.cs:line 2425\r\n   at System.Management.Automation.PowerShell.Invoke() in C:\\Users\\chris\\PowerShell\\src\\System.Management.Automation\\engine\\hostifaces\\PowerShell.cs:line 2296\r\n   at Microsoft.Windows.PowerShell.ScriptAnalyzer.BuiltinRules.AvoidUsingDeprecatedManifestFields.AnalyzeScript(Ast ast, String fileName)+MoveNext()\r\n```\r\nI wonder if the call to `return Output.NonBlockingRead(Int32.MaxValue);` in [pipelinebase.cs (line 416) ](https://github.com/PowerShell/PowerShell/blob/d80154430d600a52a1d1e3a9f3ecf032b36185d4/src/System.Management.Automation/engine/hostifaces/pipelinebase.cs#L416) would need to be blocking?\r\n\r\n\r\n# Environment data\r\n\r\nWindows (any version, e.g. 1903), Any version of PowerShell (5.1, 6.2, 7.0-prevew1, latest commit from master)",
  "closed_at": null,
  "comments": [],
  "created_at": "2019-06-13T17:48:37Z",
  "labels": [
    "Issue-Bug",
    "WG-Cmdlets-Core"
  ],
  "number": 9889,
  "state": "open",
  "title": "Test-ModuleManifest is not thread safe (exceptions thrown from deep inside PowerShell engine)",
  "updated_at": "2020-01-14T21:31:59Z"
}