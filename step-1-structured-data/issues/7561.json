{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7561",
  "author": "vexx32",
  "body": "Compare-Object's output is insanely obscure. The *very visually similar* nature of `<=`, `==`, and `=>` make it both difficult to determine which is meant to be which (it's *always* hard to remember off-hand which \"side\" is `-ReferenceObject` and which is `-DifferenceObject`.\r\n\r\nSee below for a more illustrative example -- which still isn't *perfect*, but it's a step in the right direction. Arguably, the `<=` style symbols should be dropped *completely* and replaced with an `[enum]` that has values (names up for discussion) for `ReferenceSet`, `DifferenceSet`, and `Both`. If we want to provide an implicit conversion from the old strings to and from appropriate new enum values, that would smooth the transition and allow older scripts to perhaps still operate normally with them.\r\n\r\nFact of the matter is, as discussed in #4316 Compare-Object needs some love and some work. It's simply not programmatically *useful* in many ways. It literally just returns a `PSCustomObject` with some strings lazily indicating which set the values or objects came from, and it *barely* functions with complex objects, if at all.\r\n\r\nIt's really more of a `Compare-Set` than it is `Compare-Object`.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n> $Set1 = 1..20\r\n> $Set2 = 1..40 | Where {$_ % 2 -eq 0}\r\n\r\n> Compare-Object $Set1 $Set2 -IncludeEqual\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```powershell\r\n\r\n   OriginSet: Both\r\n\r\nInputObject SideIndicator\r\n----------- -------------\r\n          2 ==\r\n          4 ==\r\n          6 ==\r\n          8 ==\r\n         10 ==\r\n         12 ==\r\n         14 ==\r\n         16 ==\r\n         18 ==\r\n         20 ==\r\n\r\n\r\n   OriginSet: DifferenceObject\r\n\r\nInputObject SideIndicator\r\n----------- -------------\r\n         22 =>\r\n         24 =>\r\n         26 =>\r\n         28 =>\r\n         30 =>\r\n         32 =>\r\n         34 =>\r\n         36 =>\r\n         38 =>\r\n         40 =>\r\n\r\n\r\n   OriginSet: ReferenceObject\r\n\r\nInputObject SideIndicator\r\n----------- -------------\r\n          1 <=\r\n          3 <=\r\n          5 <=\r\n          7 <=\r\n          9 <=\r\n         11 <=\r\n         13 <=\r\n         15 <=\r\n         17 <=\r\n         19 <=\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```powershell\r\n\r\nInputObject SideIndicator\r\n----------- -------------\r\n          2 ==\r\n          4 ==\r\n          6 ==\r\n          8 ==\r\n         10 ==\r\n         12 ==\r\n         14 ==\r\n         16 ==\r\n         18 ==\r\n         20 ==\r\n         22 =>\r\n         24 =>\r\n         26 =>\r\n         28 =>\r\n         30 =>\r\n         32 =>\r\n         34 =>\r\n         36 =>\r\n         38 =>\r\n         40 =>\r\n          1 <=\r\n          3 <=\r\n          5 <=\r\n          7 <=\r\n          9 <=\r\n         11 <=\r\n         13 <=\r\n         15 <=\r\n         17 <=\r\n         19 <=\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.3\r\nPSEdition                      Core\r\nGitCommitId                    v6.1.0-preview.3\r\nOS                             Microsoft Windows 10.0.17134\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "It would also be nice to have a view that showed inline diff and side-by-side diff of the object (think of Format-List type output, but side by side)",
      "created_at": "2018-08-17T16:20:23Z",
      "updated_at": "2018-08-17T16:20:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Seems we can remove header \"InputObject SideIndicator\" but add a good header comment that we show in the group. After that we can remove SideIndicator column at all.",
      "created_at": "2018-08-17T17:10:39Z",
      "updated_at": "2018-08-17T17:10:39Z"
    },
    {
      "author": "thezim",
      "author_association": "CONTRIBUTOR",
      "body": "I avoid `Compare-Object` at the console because of this and welcome a change, however this would breaking change for all in my scripts.",
      "created_at": "2018-08-17T19:49:42Z",
      "updated_at": "2018-08-17T19:50:24Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I would much prefer a cmdlet that has a better feature set over not having to rewrite a few scripts. :) \r\n\r\nAny other cmdlet, sure, we should worry about that. But imo, this one is so thoroughly not useful at the moment.",
      "created_at": "2018-08-17T19:53:13Z",
      "updated_at": "2018-08-17T19:53:13Z"
    },
    {
      "author": "thezim",
      "author_association": "CONTRIBUTOR",
      "body": "It is very useful to me and I'm sure to many others in its current state, it just has awkward console output as we all agree. Throw in collections of objects and you really will start to see it usefulness. At first I hated it too, and then realize the utility of it. At the console level I do avoid it but I shines at the script level which is where most of my enterpise PowerShell work is, hundreds of scripts if not more that use `Compare-Object`.",
      "created_at": "2018-08-17T22:31:16Z",
      "updated_at": "2018-08-17T22:31:16Z"
    },
    {
      "author": "dragonwolf83",
      "author_association": "NONE",
      "body": "I use `Compare-Object` extensively and is much better with `-PassThru` since that returns the original object referenced in the `SideIndicator`.\r\n\r\nFor this change, `SideIndicator` could be removed from the DefaultPropertySet so it still exists but not displayed. The new property could then be the `[enum]` with the desired values. That should prevent breaking scripts and make it easier for people to find the new property to use.",
      "created_at": "2018-08-18T04:30:24Z",
      "updated_at": "2018-08-18T04:30:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Expected behavior\r\n-----------------\r\n\r\n```powershell\r\n\r\n   Both  has (==):\r\n\r\nInputObject\r\n-----------\r\n          2\r\n          4\r\n          6\r\n          8\r\n         10\r\n         12\r\n         14\r\n         16\r\n         18\r\n         20\r\n\r\n\r\n   DifferenceObject has (=>):\r\n\r\nInputObject\r\n-----------\r\n         22\r\n         24 \r\n         26 \r\n         28 \r\n         30 \r\n         32 \r\n         34 \r\n         36 \r\n         38 \r\n         40 \r\n\r\n\r\n   ReferenceObject has (<=):\r\n\r\nInputObject\r\n-----------\r\n          1\r\n          3\r\n          5\r\n          7 \r\n          9 \r\n         11\r\n         13\r\n         15\r\n         17 \r\n         19 \r\n```\r\n",
      "created_at": "2018-08-20T03:58:44Z",
      "updated_at": "2018-08-20T03:58:44Z"
    }
  ],
  "created_at": "2018-08-17T15:29:05Z",
  "number": 7561,
  "state": "open",
  "title": "Improve Compare-Object's default display format",
  "updated_at": "2018-08-20T03:58:44Z"
}