{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14527",
  "author": "mklement0",
  "body": "\r\n## Steps to reproduce\r\n\r\n```powershell\r\n$o = [pscustomobject] @{ one = 1 }\r\n\r\n# OK: If the input object is forced to be an array, assigning works as expected.\r\n@($o).ForEach('one', 2); $o.one | Should -Be 2\r\n\r\n# !! BROKEN: If the input object happens to be a *scalar*, the assignment doesn't work, and behaves \r\n# !! like *retrieval* instead:\r\n$o.ForEach('one', 3); $o.one | Should -Be 3\r\n```\r\n\r\n## Expected behavior\r\n\r\nBoth tests should pass.\r\n## Actual behavior\r\n\r\nThe 2nd test fails, because the scalar input object unexpectedly simply _gets_ the existing `.one` value instead of _settings_ the new value, `3`:\r\n\r\n```powershell\r\n2  # existing value is unexpectedly output\r\nExpected 3, but got 2.    # Pester error message\r\n```\r\n\r\n## Environment data\r\n\r\n\r\n```none\r\nPowerShell Core 7.2.0-preview.2\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "scriptingstudio",
      "author_association": "NONE",
      "body": "@mklement0 because .foreach as well as .where apply to arrays by design",
      "created_at": "2021-01-02T11:57:36Z",
      "updated_at": "2021-01-02T11:57:36Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@scriptingstudio: No, both `.ForEach()` and `.Where()` are designed to work on scalars too, in the interest of unified treatment of scalars and collections - just like `(42).Count` reports `1` and  `(42)[0]` reports `42`,  for instance. \r\n\r\nThis is evidenced by the _equivalent_ operation working just fine:\r\n\r\n```powershell\r\n# Equivalent to: $o.ForEach('one', 2)\r\nPS> $o = [pscustomobject] @{ one = 1 }; $o.ForEach({ $_.one = 2 }); $o\r\n\r\none\r\n---\r\n  2\r\n```",
      "created_at": "2021-01-02T13:32:26Z",
      "updated_at": "2021-01-02T13:33:53Z"
    },
    {
      "author": "scriptingstudio",
      "author_association": "NONE",
      "body": "But there is incompatibility between PS5 and PS7.\r\n### PS5\r\n```\r\n$a=12\r\n$a.foreach{$_}\r\n12\r\n#\r\n$a = [pscustomobject]@{v=12}\r\n$a.foreach{$_}\r\nMethod invocation failed because [System.Management.Automation.PSCustomObject] does not contain a method named 'ForEach\r\n'.\r\nAt line:1 char:1\r\n+ $a.foreach{$_}\r\n+ ~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: (ForEach:String) [], RuntimeException\r\n    + FullyQualifiedErrorId : MethodNotFound\r\n```\r\n\r\n### PS7 \r\n```\r\n$a = [pscustomobject]@{v=12}\r\n$a.foreach{$_}\r\n\r\n v\r\n -\r\n12\r\n```\r\n\r\nI drives me crasy because I always should remember about that and use everywhere `@(var).foreach{}`\r\n",
      "created_at": "2021-01-02T13:51:46Z",
      "updated_at": "2021-01-02T13:51:46Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Interesting, @scriptingstudio - I didn't know about the v5.1 behavior.\r\n\r\nAs you demonstrate, it makes much more sense to make the methods also work on scalars, given that you don't always know  _situationally_ whether you're dealing with a scalar or a collection, and having to remember to use `@()` is cumbersome - and, with preexisting arrays, inefficient.\r\n\r\n_Mostly_, the two methods already do work on scalars in PS Core (another example: `$o = [pscustomobject] @{ one = 1 }; $o.Where({ $_.one -eq 1 })`), except for the one case in the OP, which should be considered a bug and therefore fixed (the symptom alone - behaving like a _get_ when _set_ is requested - indicates that something's wrong).\r\n\r\n\r\n\r\n",
      "created_at": "2021-01-02T13:58:35Z",
      "updated_at": "2021-01-02T13:58:35Z"
    },
    {
      "author": "scriptingstudio",
      "author_association": "NONE",
      "body": "It is not simply cumbersome and inefficient, it is crazy. Because `$var.count` and `@($var).count` sometimes give different results and I don't know in advance what type of object I'll get to work with.",
      "created_at": "2021-01-02T14:28:25Z",
      "updated_at": "2021-01-02T14:28:25Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Good point, @scriptingstudio: It only seems to affect scalars of _certain_ types, making it clear that even in Windows PowerShell the behavior is a _bug_ (in the case of `.Count`, `$null` is returned for the affected types, though, curiously, _indexing_ (e.g. `$o = [pscustomobject] @{ one = 1 }; $o[0]`) does work.\r\n\r\nI haven't tried to find them all, but notable types that are affected in Windows PowerShell are `[pscustomobject]` and `[xml]`; most others - including custom PowerShell classes - seem to be fine; e.g., `$itm = Get-Item /; $itm.ForEach('Name')` works just fine.\r\n\r\n(As an aside: with respect to _indexing_ the problem may be different, depending on type: if a _type-native_ indexer is present, it preempts the intrinsic indexing, even if it isn't `[int]`-typed, which notably happens with `[xml]` - see #11923.)\r\n\r\nI hope it is clear by now that:\r\n\r\n* the symptom described in the OP is a bug that should be fixed.\r\n* that Windows PowerShell is plagued by more serious manifestations of this bug.\r\n",
      "created_at": "2021-01-02T14:56:56Z",
      "updated_at": "2021-01-02T15:05:00Z"
    }
  ],
  "created_at": "2021-01-01T23:00:43Z",
  "number": 14527,
  "state": "open",
  "title": "Assigning property values with the .ForEach() array method fails if the input object is a scalar",
  "updated_at": "2021-01-02T15:53:55Z"
}