{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13025",
  "author": "robinmalik",
  "body": "I'm seeing an oddity on one desktop whereby the two module paths for PS7 are concatenated rather than split by a comma and this results in modules not being loaded.\r\n\r\n## Steps to reproduce\r\n\r\n```\r\n[Environment]::GetEnvironmentVariable(\"PSModulePath\", \"Process\") -split ';' | sort\r\n```\r\n\r\n## Expected behavior\r\n\r\n```\r\nC:\\Program Files\\PowerShell\\Modules\\\r\nc:\\program files\\powershell\\7\\Modules\r\n```\r\n\r\n## Actual behavior\r\n\r\n```\r\nC:\\Program Files\\PowerShell\\Modules\\c:\\program files\\powershell\\7\\Modules\r\n```\r\nor in full:\r\n```\r\nC:\\Users\\Robin\\Documents\\PowerShell\\Modules;C:\\Program Files\\PowerShell\\Modules\\c:\\program files\\powershell\\7\\Modules;;C:\\Program Files\\WindowsPowerShell\\Modules\\;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules;\r\n```\r\n- note the double ;;\r\n\r\n## Environment data\r\n\r\n```\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.2\r\nPSEdition                      Core\r\nGitCommitId                    7.0.2\r\nOS                             Microsoft Windows 10.0.19041\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u00d4\u00c7\u00aa}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "robinmalik",
      "author_association": "NONE",
      "body": "I have resolved this, by ensuring that every path in the machine level PSModulePath setting was **without** trailing backslashes.\r\n\r\nIf I put the backslashes back in, it breaks again.",
      "created_at": "2020-06-24T14:51:59Z",
      "updated_at": "2020-06-24T14:51:59Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That definitely sounds like a bug... can you check the results from the following two queries?\r\n\r\n```ps1\r\n[Environment]::GetEnvironmentVariable('PSModulePath', 'User')\r\n[Environment]::GetEnvironmentVariable('PSModulePath', 'Machine')\r\n```",
      "created_at": "2020-06-24T15:01:35Z",
      "updated_at": "2020-06-24T15:01:35Z"
    },
    {
      "author": "robinmalik",
      "author_association": "NONE",
      "body": "User is empty.\r\n\r\nMachine is: `C:\\Program Files\\PowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules;C:\\Program Files\\SharePoint Online Management Shell;C:\\Program Files (x86)\\NetApp\\NetApp PowerShell Toolkit\\Modules;C:\\Program Files (x86)\\Cisco\\Cisco UCS Manager PowerTool\\Modules;C:\\ProgramData\\Boxstarter;`\r\n\r\nAs I said, if backslashes are present it seems to break things. Infact, if I edit the system/machine environment variables to add a **single** backslash like this:\r\n\r\n![image](https://user-images.githubusercontent.com/8790561/85744012-7211bb80-b6fc-11ea-82f5-ca0a7b7c44c3.png)\r\n\r\nthen the output of `[Environment]::GetEnvironmentVariable('PSModulePath', 'Process') -split ';'`\r\n\r\nbecomes:\r\n\r\n```C:\\Users\\Robin\\Documents\\PowerShell\\Modules\r\nC:\\Program Files\\PowerShell\\Modules\\c:\\program files\\powershell\\7\\Modules\r\n\r\nC:\\Program Files\\WindowsPowerShell\\Modules\r\nC:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\r\nC:\\Program Files\\SharePoint Online Management Shell\r\nC:\\Program Files (x86)\\NetApp\\NetApp PowerShell Toolkit\\Modules\r\nC:\\Program Files (x86)\\Cisco\\Cisco UCS Manager PowerTool\\Modules\r\nC:\\ProgramData\\Boxstarter\r\n```\r\n\r\nand `[Environment]::GetEnvironmentVariable('PSModulePath', 'Machine')` remains the same but backslash is present:\r\n\r\n`C:\\Program Files\\PowerShell\\Modules\\;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules;C:\\Program Files\\SharePoint Online Management Shell;C:\\Program Files (x86)\\NetApp\\NetApp PowerShell Toolkit\\Modules;C:\\Program Files (x86)\\Cisco\\Cisco UCS Manager PowerTool\\Modules;C:\\ProgramData\\Boxstarter;`",
      "created_at": "2020-06-25T14:57:46Z",
      "updated_at": "2020-06-25T15:00:32Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah looks like we got some issues with how PS is concatenating existing environment variables and its own defaults for PSModulePath.\r\n\r\n@SteveL-MSFT this might be something you wanna take a look at? \ud83d\udc96 ",
      "created_at": "2020-06-25T17:20:19Z",
      "updated_at": "2020-06-25T17:20:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I can not reproduce in latest build 7.1.",
      "created_at": "2020-06-26T04:28:07Z",
      "updated_at": "2020-06-26T04:28:07Z"
    },
    {
      "author": "robinmalik",
      "author_association": "NONE",
      "body": "I'll test this on another machine, then upgrade PowerShell and try with that.",
      "created_at": "2020-07-06T15:09:22Z",
      "updated_at": "2020-07-06T15:09:22Z"
    },
    {
      "author": "robinmalik",
      "author_association": "NONE",
      "body": "On a Windows 10 machine with PowerShell 7.0.1 and PowerShell 7.1 preview 5:\r\n\r\n![image](https://user-images.githubusercontent.com/8790561/87050443-2da31700-c1f6-11ea-81e7-c0a3e4d94028.png)\r\n\r\nI then added `C:\\Program Files\\PowerShell\\Modules\\` and the output of `[Environment]::GetEnvironmentVariable('PSModulePath', 'Process') -split ';'` became:\r\n\r\n```\r\nC:\\Users\\Administrator\\Documents\\PowerShell\\Modules\r\nC:\\Program Files\\WindowsPowerShell\\Modules\r\nC:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules\r\nC:\\Program Files\\PowerShell\\Modules\\c:\\program files\\powershell\\7\\Modules\r\n```\r\n\r\nRemoving that entry then cleans that up:\r\n\r\n```\r\nC:\\Users\\Administrator\\Documents\\PowerShell\\Modules\r\nC:\\Program Files\\PowerShell\\Modules\r\nc:\\program files\\powershell\\7\\Modules\r\nC:\\Program Files\\WindowsPowerShell\\Modules\r\nC:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules\r\n```\r\n\r\nbut of course WindowsPowerShell doesn't see modules installed into `C:\\Program Files\\PowerShell\\Modules`.\r\n\r\nEither way, it's fixed by removing that trailing `\\` from the path.",
      "created_at": "2020-07-09T14:17:57Z",
      "updated_at": "2020-07-09T14:18:29Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I can reproduce.",
      "created_at": "2020-07-09T18:29:35Z",
      "updated_at": "2020-07-09T18:29:35Z"
    },
    {
      "author": "anmenaga",
      "author_association": "CONTRIBUTOR",
      "body": "This may be related:\r\nI've seen the double semicolon in PSModulePath on ARM-32 Windows 10 IoT Core in PS zip-based release package:\r\n```\r\nadministrator@piiot C:\\Data\\Users\\Administrator>.\\PS710P5\\pwsh\r\nPowerShell 7.1.0-preview.5\r\nCopyright (c) Microsoft Corporation.\r\n\r\nhttps://aka.ms/powershell\r\nType 'help' to get help.\r\n\r\nPS C:\\Data\\Users\\Administrator> $psversiontable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.0-preview.5\r\nPSEdition                      Core\r\nGitCommitId                    7.1.0-preview.5\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\nPS C:\\Data\\Users\\Administrator> $env:psmodulepath\r\nC:\\Data\\Users\\Administrator\\Documents\\PowerShell\\Modules;C:\\Program Files\\PowerShell\\Modules;c:\\data\\users\\administrator\\ps710p5\\Modules;;\r\nPS C:\\Data\\Users\\Administrator>\r\n```",
      "created_at": "2020-07-10T00:10:09Z",
      "updated_at": "2020-07-10T00:10:09Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The double semi-colon isn't related and is ok.  I found the problem, basically the current code tries to detect if something like the user path is already in PSModulePath to append a different shared path.  However, the comparison trims trailing whitespace and path separator, so the index being returned is off by any trimmed whitespace or path separator count.  Working on a fix.",
      "created_at": "2020-07-10T00:13:30Z",
      "updated_at": "2020-07-10T00:13:30Z"
    }
  ],
  "created_at": "2020-06-24T13:30:07Z",
  "number": 13025,
  "state": "open",
  "title": "Concatenated PSModulePath values for PS7 module paths",
  "updated_at": "2020-07-10T00:13:30Z"
}