{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5953",
  "author": "alx9r",
  "body": "Steps to reproduce\r\n------------------\r\n\r\n```powershell\r\nfunction f\r\n{\r\n    param([Parameter(ValueFromPipeline)]$x)\r\n    process {$x}\r\n}\r\n\r\nfunction g {\r\n    param(\r\n        [Parameter(ValueFromPipeline)] $InputObject,\r\n        [switch] $UseScriptblock\r\n    )\r\n    process { 1 | a -UseScriptblock:$UseScriptblock | b }\r\n}\r\n\r\nfunction a {\r\n    param (\r\n        [Parameter(ValueFromPipeline,Mandatory)] $InputObject,\r\n        [switch] $UseScriptblock\r\n    )\r\n    process {\r\n        if ( $UseScriptblock )\r\n        {\r\n            [pscustomobject]@{p=1} | % {$_.p} # <= shouldn't this...\r\n        }\r\n        else\r\n        {\r\n            [pscustomobject]@{p=1} | % p      # <= ...produce the same result as this?\r\n        }\r\n    }\r\n}\r\n\r\nfunction b\r\n{\r\n    param\r\n    (\r\n        [Parameter(ValueFromPipeline,Mandatory)]\r\n        $InputObject\r\n    )\r\n    process\r\n    {\r\n        throw 'function b'\r\n    }\r\n}\r\n\r\n1 | f | g \r\n1 | f | g -UseScriptblock\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nfunction b\r\nAt C:\\users\\un1\\Desktop\\test.ps1:41 char:9\r\n+         throw 'function b'\r\n+         ~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : OperationStopped: (function b:String) [], RuntimeExcep\r\ntion\r\n+ FullyQualifiedErrorId : function b\r\nfunction b\r\nAt C:\\users\\un1\\Desktop\\test.ps1:41 char:9\r\n+         throw 'function b'\r\n+         ~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : OperationStopped: (function b:String) [], RuntimeExcep\r\ntion\r\n+ FullyQualifiedErrorId : function b\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nb : Cannot bind argument to parameter 'InputObject' because it is null.\r\nAt C:\\users\\un1\\Desktop\\test.ps1:12 char:55\r\n+     process { 1 | a -UseScriptblock:$UseScriptblock | b }\r\n+                                                       ~\r\n+ CategoryInfo          : InvalidData: (:) [b], ParameterBindingValidationExcept\r\nion\r\n+ FullyQualifiedErrorId : ParameterArgumentValidationErrorNullNotAllowed,b\r\n\r\nfunction b\r\nAt C:\\users\\un1\\Desktop\\test.ps1:41 char:9\r\n+         throw 'function b'\r\n+         ~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : OperationStopped: (function b:String) [], RuntimeExcep\r\ntion\r\n+ FullyQualifiedErrorId : function b\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value                                            \r\n----                           -----                                            \r\nPSVersion                      6.0.0                                            \r\nPSEdition                      Core                                             \r\nGitCommitId                    v6.0.0                                           \r\nOS                             Microsoft Windows 6.3.9600                       \r\nPlatform                       Win32NT                                          \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                          \r\nPSRemotingProtocolVersion      2.3                                              \r\nSerializationVersion           1.1.0.1                                          \r\nWSManStackVersion              3.0                                              \r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "@iSazonov I see you have tagged this with \"Issue-Question\".  I'm not sure exactly what the PowerShell team's definition of \"Question\" and \"Bug\" is, but I consider this more of a bug than a question.  \r\n\r\nIf you need convincing, watch the control flow, `$InputObject`, and `$Error` through the first run through the `throw` statement.  Control flow enters function `b`, `$InputObject` is `1` and the exception is thrown.  However, instead of just one error record, two result:\r\n\r\n1. a complaint that the input to `b` was `$null`, and\r\n2. the exception from the line `throw 'function b'`\r\n\r\nThis seems consistent with a spurious null being output by `% p` prior to `1`.  `%{$null;$_.p}`, for example, seems to cause the same behavior as `% p`.  \r\n",
      "created_at": "2018-01-19T22:59:43Z",
      "updated_at": "2018-01-19T23:05:32Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "Here is a more succinct repro of the same problem:\r\n\r\n```PowerShell\r\nfunction z {\r\n    process {\r\n        try { 1 }\r\n        catch { Write-Host 'caught upstream' }\r\n    }\r\n}\r\n\r\nfunction a {\r\n    param ([Parameter(ValueFromPipeline,Mandatory)] $InputObject)\r\n    process {\r\n        [pscustomobject]@{p=1} | % p\r\n    }\r\n}\r\n\r\nfunction b {\r\n    param ([Parameter(ValueFromPipeline,Mandatory)] $InputObject)\r\n    process {\r\n        Write-Host \"InputObject $InputObject\"\r\n        throw 'function b'\r\n    }\r\n}\r\n\r\n$ErrorActionPreference = 'Stop'\r\nz | a | b\r\n```\r\n\r\n### Expected Behavior\r\nThe exception thrown by `b` is caught in `z`.\r\n\r\n```none\r\nInputObject 1\r\ncaught upstream\r\n```\r\n\r\n### Actual Behavior\r\nThe entire pipeline is terminated when `throw` is reached.\r\n\r\n```none\r\nInputObject 1\r\nb : Cannot bind argument to parameter 'InputObject' because it is null.\r\nAt C:\\users\\un1\\Desktop\\test3.ps1:17 char:9\r\n+ 1 | a | b\r\n+         ~\r\n    + CategoryInfo          : InvalidData: (:) [b], ParameterBindingValidationException\r\n    + FullyQualifiedErrorId : ParameterArgumentValidationErrorNullNotAllowed,b\r\n```\r\n",
      "created_at": "2018-01-19T23:29:30Z",
      "updated_at": "2018-01-19T23:29:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@alx9r  Don't worry about the label. I daresay to qualify an issue as a bug only in obvious (for me) cases. You made a wonderful reproduction, so label is `question`. Without it I would put `discussion` to get more opinions. Now we only need MSFT expert conclusion. Only experts can give the exact conclusion that it is a bug, that it is necessary to fix or leave as is. Then we will change the label to `bug`, `enhance` or `won't fix`.\r\n\r\n/cc @SteveL-MSFT I think we need to provide the community with a better understanding of the Issue process - can we update our documents?",
      "created_at": "2018-01-20T09:43:51Z",
      "updated_at": "2018-01-20T09:43:51Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "I'm not sure if this is related.  There seems also to be a spurious null appearing from a member of `[pscustomobject]` in #5607.",
      "created_at": "2018-01-20T19:39:42Z",
      "updated_at": "2018-01-20T19:39:42Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov I think the current [docs](https://github.com/PowerShell/PowerShell/blob/master/docs/maintainers/issue-management.md) make it clear what the issue types mean which in this case if it's not clear if a bug, it seems it should be `Discussion` if it's not clear if a bug or not.\r\n\r\ncc @daxian-dbw to help with clarity if this behavior is expected",
      "created_at": "2018-01-24T22:55:08Z",
      "updated_at": "2018-01-24T22:55:08Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "It seems that this is somehow related to the exception mechanism.  Removing the `throw` statement from [this repro](https://github.com/PowerShell/PowerShell/issues/5953#issuecomment-359118341) averts the spurious null.",
      "created_at": "2018-03-30T20:16:51Z",
      "updated_at": "2018-03-30T20:16:51Z"
    }
  ],
  "created_at": "2018-01-19T18:21:45Z",
  "labels": [
    "WG-Language",
    "Issue-Discussion"
  ],
  "number": 5953,
  "state": "open",
  "title": "Input to function incorrectly reported as null for `% p` but not `% {$_.p}`",
  "updated_at": "2018-03-30T20:16:51Z"
}