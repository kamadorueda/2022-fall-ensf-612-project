{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11608",
  "author": "mklement0",
  "body": "Usually, quoting a token ensures that it isn't interpreted as a parameter name; e.g.:\r\n\r\n```powershell\r\nPS> Write-Output '-InputObject' \r\n-InputObject\r\n```\r\n\r\nHowever, this approach doesn't work for the stop-parsing symbol (`--%`).\r\n\r\nNote: I'm  using a call to an external program to demonstrate, given that `--%` only makes sense in external-executable calls.\r\n\r\n# Steps to reproduce\r\n\r\nOn Windows:\r\n\r\n```powershell\r\n# OK: an unquoted --% is recognized as the stop-parsing symbol and therefore removed.\r\ncmd /c echo --% hi | Should -Be ' hi '\r\n\r\n# BROKEN: Due to quoting, '--%' should be passed through as-is, but it is still interpreted as the stop-parsing symbok.\r\ncmd /c echo '--%' hi| Should -Be '--% hi'\r\n```\r\n\r\n# Expected behavior\r\n\r\nBoth tests should pass.\r\n\r\n# Actual behavior\r\n\r\nThe 2nd test fails with the following error:\r\n\r\n```none\r\nExpected strings to be the same, but they were different.\r\nExpected length: 7\r\nActual length:   3\r\nStrings differ at index 0.\r\nExpected: '--% hi'\r\nBut was:  ' hi'\r\n```\r\n\r\n```none\r\nPowerShell Core 7.1.0-preview.5 # originally reported for PowerShell Core 7.0.0-rc.1\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Additionally, even though `--%` as an argument is _removed_, suggesting that the stop-parsing symbol _is_ (unexpectedly) recognized, its usual behavior does _not_ kick in, in that string interpolation still _does_ take place:\r\n\r\n```powershell\r\n# OK - literal use of --% causes the remainder of the command line to be passed as-is:\r\nPS> cmd /c echo --% $PSVersionTable.PSVersion\r\n $PSVersionTable.PSVersion\r\n```\r\n\r\n```powershell\r\n# !! The *quoted* --% is HALF treated as the stop-parsing symbol:\r\n# !!   * it is NOT passed to the target process\r\n# !!   * however, normal string interpolation still takes place.\r\nPS> cmd /c echo '--%' $PSVersionTable.PSVersion\r\n 7.2.0-preview.2\r\n```",
      "created_at": "2021-01-25T03:02:30Z",
      "updated_at": "2021-01-25T03:02:30Z"
    },
    {
      "author": "davidBar-On",
      "author_association": "CONTRIBUTOR",
      "body": "The only solution I was able to find that works well both for `PS echo` and `Linux /bin/echo` is the following workaround :\r\n\r\n1. In [GetCommandArgumentExpression](https://github.com/PowerShell/PowerShell/blob/8f8ddc3fb76a03dad93f5664314c2795dd69f390/src/System.Management.Automation/engine/parser/Compiler.cs#L4199): if the parameter is `--%` which is `SingleQuoted`, then return `'--%'` (i.e. add back the `'`).\r\n2. In [InvokePipeline](https://github.com/PowerShell/PowerShell/blob/8f8ddc3fb76a03dad93f5664314c2795dd69f390/src/System.Management.Automation/engine/runtime/Operations/MiscOps.cs#L416): if one of the parameters is `'--%'`, change it back to `--%` (i.e. remove the `'`).\r\n\r\nSince this is patchy and very specific solution (and may not be the right approach in any case) I understand that it may not  be worth considering.  I am still describing this solution as maybe it may help with finding a solution.",
      "created_at": "2021-04-29T11:46:24Z",
      "updated_at": "2021-04-29T11:46:24Z"
    }
  ],
  "created_at": "2020-01-16T23:06:51Z",
  "number": 11608,
  "state": "open",
  "title": "Stop-parsing symbol is unexpectedly half-interpreted as such when quoted: it is removed, yet string interpolation still takes place",
  "updated_at": "2021-04-30T15:39:10Z"
}