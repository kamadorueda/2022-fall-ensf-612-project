{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4199",
  "author": "iSazonov",
  "body": "We can setup multiple PowerShell Core versions on a system side-by-side (on Windows side-by-side with Windows PowerShell).\r\nWhat about to enhance `-Version` to get better UX?\r\n```powershell\r\npowershell -Version 5.1\r\npowershell -Version 6.0.0\r\npowershell -Version 6.0.0-Beta.4\r\npowershell -Version UserDefault\r\npowershell -Version SystemDefault\r\n```",
  "closed_at": "2021-05-25T06:24:30Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "We would also need `set-powershell` and `get-powershell` cmdlets to set the default and enumerate installed versions.  This should probably end up being an RFC.\r\n\r\ncc @joeyaiello ",
      "created_at": "2017-07-07T20:30:07Z",
      "updated_at": "2017-07-07T20:30:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We have so much defaults that the new cmdlets looks wasteful.\r\nI expect that only developers will have multiple installed versions, users - Windows PowerShell and one-two PowerShell Core. Also system services (daemons) can use specific version. A distributive provider can include a PowerShell Core version as system default. An application provider can make the same.\r\nThey must all have a predictable way to run the correct version.\r\nIf Windows PowerShell stops on 5 version (5.1, 5.2, ..., 5.12 ..) we would use `-Version` to run a correct version - PowerShell Core starts with 6 version.",
      "created_at": "2017-07-08T16:30:21Z",
      "updated_at": "2017-07-08T16:30:21Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I agree that most users won't likely have more than one version of PSCore6 installed which is why this issue isn't `High Priority` for me.  Current solution is to use the full path and advanced users will know what they are doing.  Apps that distribute PSCore6.x will treat it as a library not should not be expected to be used by the end user.  Some apps will be fine with any version of PSCore6 being available while others may have dependencies on specific versions for various reasons.  Apps should not change the system default.",
      "created_at": "2017-07-09T04:54:38Z",
      "updated_at": "2017-07-09T04:54:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Main thought is that we should have simple possibility to switch default Windows and Core versions user-wide and system-wide.\r\nIdeally PowerShell should take Version parameter and/or configuration option to run a desired version.",
      "created_at": "2017-07-09T07:41:54Z",
      "updated_at": "2017-07-09T07:41:54Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Yeah, there's really two issues that need to be addressed here:\r\n\r\n1. Shelling into Windows PowerShell vs. PowerShell Core. This one requires changes to Windows in some form or another, as Windows PowerShell needs to be aware of PowerShell Core's existence (system32 PATH wins over ProgramFiles PATH in the vast majority of cases). Unless we give powershell.exe an symbolic link in $PSHome for PS6 like `ps6.exe`, but that's a crappy band-aid I'd rather avoid.\r\n1. Managing future side-by-side versions of PowerShell Core. I predict one day we might need something `venv` or `rbenv`, but not until *at least* 6.1. \r\n\r\nI'm not sure we want to dive in on the former *just yet*, but it would ideally be addressed around (or just after) the \"RTM\" of PowerShell Core 6. The latter can wait.",
      "created_at": "2017-07-10T18:11:25Z",
      "updated_at": "2017-07-10T18:11:25Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "With PowerShell 7 offering [LTS versions with a 3 year support cycle](https://devblogs.microsoft.com/powershell/the-next-release-of-powershell-powershell-7/), some more discussions around SxS installations of PowerShell should be had soon so that if there are some changes that can be made in the current release timeframe, by the PS Team or the Community, there is time to do so. The notion of a 3 year support cycle without side-by-side support is a scary proposition.\r\n\r\nToday we can install stable and preview side-by-side, but we need to consider supporting multiple stable versions installed side by side so that scripters can take hard dependencies on one LTS version of PowerShell without locking that machine down to that version for 3 years! Can we please talk about this _now_ and see what can be done so that management solutions can be built on the reliability of a LTS release without an unnecessary system lockdown to just that version during that time?",
      "created_at": "2019-06-20T15:48:34Z",
      "updated_at": "2019-06-20T15:49:17Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@KirkMunro do you have a specific proposal in mind?  Current SxS support is via filepath.  Is the desire to have something like `pwsh -version 6.2.1`?",
      "created_at": "2019-06-20T15:59:40Z",
      "updated_at": "2019-06-20T15:59:40Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Yes, exactly that.\r\n\r\nThe management community is reticent to update management solutions. The development community moves forward much more quickly. I think we really need to consider a solution that allows management solutions to be maintained under LTS while not holding back additional solutions that leverage newer versions/functionality. This is especially important since PowerShell is interpreted and not compiled (we don't have the luxury of building independent executables from PowerShell that target different runtimes like a .NET developer has when building projects in C#, for example).",
      "created_at": "2019-06-20T16:05:41Z",
      "updated_at": "2019-06-20T16:05:41Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I would be ok with supporting `pwsh -version x` where x is one installed to a well known location on Windows, Linux, and macOS.  All it would do is shell out to `pwsh` for that version.  On Linux/macOS, we can use `exec`, but on Windows, you would have two `pwsh` processes.  Would also need a way to enumerate installed versions.  Seems like a RFC should be written for this.",
      "created_at": "2019-06-20T21:35:19Z",
      "updated_at": "2019-06-20T21:35:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Seems like a RFC should be written for this.\r\n\r\nWe already have  #4836 with PowerShell Committee conclusion to have the RFC. It was frozen \r\nat that time since side-by-side feature was not stable.\r\n",
      "created_at": "2019-06-21T05:20:47Z",
      "updated_at": "2019-06-21T05:20:47Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Do you want to push that forward then @iSazonov? If not, I'm happy to write the RFC but I don't want to take that away from you if you've already put thought into it. This needs to be done soon though to take advantage of the opportunity to get this done during the PS7 cycle. If I don't write it I'll definitely review it and share my thoughts.",
      "created_at": "2019-06-21T10:54:33Z",
      "updated_at": "2019-06-21T10:54:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@KirkMunro It is not easy for me to write large text (but a high quality) on non-native language. Feel free to pull the RFC. Many thanks!\r\n\r\n(It seems I keep a branch with the enumerating version prototype since then #4836 :-) It was ported from VS Code(!)  )",
      "created_at": "2019-06-21T11:42:13Z",
      "updated_at": "2019-06-21T11:42:13Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Here: https://github.com/PowerShell/PowerShell-RFC/pull/202. Please let me know what you think @iSazonov and @SteveL-MSFT.",
      "created_at": "2019-06-21T21:09:42Z",
      "updated_at": "2019-06-21T21:09:42Z"
    },
    {
      "author": "archmangler",
      "author_association": "NONE",
      "body": "Hi \r\n\r\nMay I ask about the progress of this?\r\n\r\nWe have a use-case for this: it is to switch between pwsh versions within our docker deployment container which serves multiple applications and which needs to support multiple pwsh versions (with their specific combination of powershell cmdlets and modules).\r\n\r\nIf we had something like virtualenv/venv available it would help a lot.\r\n",
      "created_at": "2020-05-05T10:11:02Z",
      "updated_at": "2020-05-05T10:11:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> which needs to support multiple pwsh versions \r\n\r\n@archmangler Really there are two main version - Windows PowerShell and PowerShell 7.0, and no needs to have more installed versions. If your scenario is more specific please open new issue to discuss.\r\n",
      "created_at": "2020-05-05T13:18:39Z",
      "updated_at": "2020-05-05T13:18:39Z"
    }
  ],
  "created_at": "2017-07-07T18:11:53Z",
  "labels": [
    "Area-SideBySide",
    "Issue-Discussion"
  ],
  "number": 4199,
  "state": "closed",
  "title": "Improve experience for side-by-side versions of PowerShell",
  "updated_at": "2021-05-25T06:24:30Z"
}