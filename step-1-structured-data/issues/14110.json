{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14110",
  "author": "hbuckle",
  "body": "It seems that Start-Process has a [hardcoded limit](https://github.com/PowerShell/PowerShell/blob/a0e9d7b04069da2de2cfa844459c2c859e363088/src/Microsoft.PowerShell.Commands.Management/commands/management/Process.cs#L2342) for the environment block, which I am hitting when running in Azure Pipelines (which sets lots of environment variables)\r\n\r\nAccording to the [documentation](https://docs.microsoft.com/en-gb/windows/win32/procthread/environment-variables) this limit only existed for Windows XP, is there any reason for it to remain?\r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\nStart-Process -FilePath \"myprocess.exe\"\r\n```\r\n\r\n## Expected behavior\r\n\r\nProcess is executed\r\n\r\n## Actual behavior\r\n\r\n```none\r\n2020-11-17T14:21:34.1311704Z Start-Process : EnvironmentBlockTooLong\r\n2020-11-17T14:21:34.1313656Z At C:\\Program Files\\PowerShell\\Modules\\PSDeployTools\\1.1.55\\Functions\\Invoke-Process.ps1:44 char:16\r\n2020-11-17T14:21:34.1315142Z +     $process = Start-Process @processParams\r\n2020-11-17T14:21:34.1316243Z +                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n2020-11-17T14:21:34.1317681Z + CategoryInfo          : NotSpecified: (:) [Start-Process], InvalidOperationException\r\n2020-11-17T14:21:34.1319184Z + FullyQualifiedErrorId : System.InvalidOperationException,Microsoft.PowerShell.Commands.StartProcessCommand\r\n```\r\n",
  "closed_at": "2021-03-02T23:05:56Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@hbuckle Do you want to pull PR?",
      "created_at": "2020-11-17T15:28:05Z",
      "updated_at": "2020-11-17T15:28:05Z"
    },
    {
      "author": "hbuckle",
      "author_association": "CONTRIBUTOR",
      "body": "Absolutely, if it's fine to remove the limit I'll create a PR",
      "created_at": "2020-11-17T15:34:58Z",
      "updated_at": "2020-11-17T15:34:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I believe we can remove the limit because Windows XP is out of support.\r\n\r\nSince the issue is related to Azure Pipelines I'd ask MSFT team to include the fix in servicing release 7.1.1.",
      "created_at": "2020-11-17T15:46:33Z",
      "updated_at": "2020-11-17T15:46:33Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "IIRC there's a limit of 32767 (0xFFFF as a signed Int16) on environment blocks defined by the user https://docs.microsoft.com/en-us/windows/win32/procthread/environment-variables on Windows. Removing this limit could potentially cause undefined errors.\n\n<blockquote><div><strong><a href=\"https://docs.microsoft.com/en-us/windows/win32/procthread/environment-variables\">Environment Variables - Win32 apps</a></strong></div><div>Every process has an environment block that contains a set of environment variables and their values. There are two types of environment variables: user environment variables (set for each user) and system environment variables (set for everyone).</div></blockquote>",
      "created_at": "2020-11-17T19:10:57Z",
      "updated_at": "2020-11-17T19:11:00Z"
    },
    {
      "author": "hbuckle",
      "author_association": "CONTRIBUTOR",
      "body": "@jborean93 - from that documentation \r\n\r\n> The maximum size of a user-defined environment variable is 32,767 characters. There is no technical limitation on the size of the environment block. \r\n\r\nSo the limit seems to be on the size of individual variables, not on the size of the block?",
      "created_at": "2020-11-17T21:52:21Z",
      "updated_at": "2020-11-17T21:52:21Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "That's true, It does also say\r\n\r\n> However, there are practical limits depending on the mechanism used to access the block. For example, a batch file cannot set a variable that is longer than the maximum command line length.\r\n\r\nBut it's definitely more on the side of it should work and it's up to the user of the environment block to handle it properly and not something PowerShell should limit.",
      "created_at": "2020-11-17T22:28:19Z",
      "updated_at": "2020-11-17T22:28:19Z"
    },
    {
      "author": "MattJeanes",
      "author_association": "NONE",
      "body": "This issue appeared in PowerShell 7.1.0 as part of https://github.com/PowerShell/PowerShell/pull/10830\r\n\r\nAnd appeared in Azure Pipelines for me today as the agent got updated to use PowerShell 7.1.0\r\n\r\nUntil the linked PR #14111 is in a workaround for some scenarios where you don't need to inherit environment variables from the process (or deployment pipeline in the case of Azure Pipelines) is to use `-NoNewEnvironment` which will as of 7.1.0 initialise a standard set of environment variables for the current user.\r\n\r\nThis fixed my issue trying to run an app inside of Azure Pipelines for now.",
      "created_at": "2020-11-19T17:54:18Z",
      "updated_at": "2020-11-19T17:54:18Z"
    },
    {
      "author": "hbuckle",
      "author_association": "CONTRIBUTOR",
      "body": "@MattJeanes - I don't think it was introduced in 7.1, I'm assuming it has been there since the days of Windows XP. I wonder if something changed in Azure Pipelines that meant they started creating more environment variables",
      "created_at": "2020-11-20T08:43:36Z",
      "updated_at": "2020-11-20T08:43:36Z"
    },
    {
      "author": "MattJeanes",
      "author_association": "NONE",
      "body": "The behaviour of PowerShell was changed to call `ConvertEnvVarsToByteArray` which contains the `EnvironmentBlockTooLong` check in 7.1 when *not* using `-UseNewEnvironment` as well, as the PR prepared PowerShell for the ability to pass in custom environment variable blocks.\r\n\r\nYou can see that change here: https://github.com/PowerShell/PowerShell/pull/10830/files#diff-a87e81856755f9e2a0f6002cf90c4cc3d0a4d1e81394bee7ac61543f71138b71R2464\r\n\r\n<blockquote><img src=\"https://avatars3.githubusercontent.com/u/22290914?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell/pull/10830\">Update UseNewEnvironment parameter behavior of Start-Process cmdlet on Windows by iSazonov \u00b7 Pull Request #10830 \u00b7 PowerShell/PowerShell</a></strong></div><div>PR Summary\r\nThe PR effects only Windows behavior.\r\n\r\nWith UseNewEnvironment parameter Start-Process run a child process with environment variables without modifications in current session (state befor...</div></blockquote>",
      "created_at": "2020-11-20T11:25:02Z",
      "updated_at": "2020-11-20T11:25:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Yes, this is a side effect from old code. The implementation was changed as first step to open a way for supporting new features (like adding new env vars on the fly by new parameter (I already forget approved name :-) ) and language feature like bash style `LC=ALL grep...`) but we stopped due to lack of resources :-( If you have an interest you can grab this work.\r\n",
      "created_at": "2020-11-20T17:32:15Z",
      "updated_at": "2020-11-20T17:32:15Z"
    },
    {
      "author": "MattJeanes",
      "author_association": "NONE",
      "body": "I have run into a situation where I needed to pass in environment variables to a process, so to work around the issue I essentially temporarily move a bunch of environment variables to a variable, run the processes and then move them back.\r\n\r\nHere are the scripts to do it, they remove all `RELEASE_*` environment variables but you can tweak for your own needs:\r\n\r\n```powershell\r\nfunction Clear-EnvironmentVariablesTemporary {\r\n    # TEMPORARY: https://github.com/PowerShell/PowerShell/issues/14110\r\n\r\n    $global:ClearedEnvironmentVariables = (Get-Item \"env:\").ForEach({\r\n        if ($_.Key.StartsWith(\"RELEASE_\")) {\r\n            return $_\r\n        }\r\n    })\r\n    $global:ClearedEnvironmentVariables | ForEach-Object { Remove-Item (Join-Path \"env:\" $_.Key) }\r\n    Write-Host \"Cleared $($global:ClearedEnvironmentVariables.Count) environment variables\"\r\n}\r\n\r\nfunction Restore-EnvironmentVariablesTemporary {\r\n    # TEMPORARY: https://github.com/PowerShell/PowerShell/issues/14110\r\n\r\n    if ($global:ClearedEnvironmentVariables) {\r\n        $global:ClearedEnvironmentVariables | ForEach-Object { Set-Item (Join-Path \"env:\" $_.Key) -Value $_.Value }\r\n    }\r\n    else {\r\n        Write-Warning \"No cleared environment variables saved, cannot restore\"\r\n    }\r\n\r\n    Write-Host \"Restored $($global:ClearedEnvironmentVariables.Count) environment variables\"\r\n    $global:ClearedEnvironmentVariables = $null\r\n}\r\n```",
      "created_at": "2020-11-24T16:59:17Z",
      "updated_at": "2020-11-24T16:59:17Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #14111, which has now been successfully released as `v7.1.3`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.3)\n",
      "created_at": "2021-03-11T23:30:47Z",
      "updated_at": "2021-03-11T23:30:47Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #14111, which has now been successfully released as `v7.2.0-preview.4`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0-preview.4)\n",
      "created_at": "2021-03-16T23:39:54Z",
      "updated_at": "2021-03-16T23:39:54Z"
    }
  ],
  "created_at": "2020-11-17T14:38:46Z",
  "number": 14110,
  "state": "closed",
  "title": "Start-Process fails with `EnvironmentBlockTooLong` error",
  "updated_at": "2021-03-16T23:39:54Z"
}