{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5798",
  "author": "Aorimn",
  "body": "Steps to reproduce\r\n------------------\r\n\r\nUse the following Configuration:\r\n```powershell\r\nConfiguration Blah {\r\n    Write-Host \"InformationPreference=$InformationPreference\"\r\n    Write-Host \"InformationVariable=$($PSBoundParameters['InformationVariable'])\"\r\n    Write-Information \"info test\"\r\n    Write-Warning \"warning test\"\r\n    Write-Error \"error test\"\r\n}\r\n```\r\n\r\nCompile it:\r\n```powershell\r\n> Blah -InformationAction Continue -InformationVariable info -WarningVariable warn -ErrorVariable err\r\nInformationPreference=Continue\r\nInformationVariable=info\r\ninfo test\r\nWARNING: warning test\r\nerror test\r\nAt line:1 char:1\r\n+ Blah -InformationAction Continue -InformationVariable info -WarningVa ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\r\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException\r\n```\r\n\r\nTry to access {Information,Warning,Error} variables:\r\n```powershell\r\n> $info; $warn; $err\r\n>\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nThe variables should contain their appropriate stream output, just as a function would do:\r\n```powershell\r\n> $info\r\ninfo test\r\n> $warn\r\nWARNING: warning test\r\n> $err\r\nerror test\r\nAt line:1 char:1\r\n+ Blah -InformationAction Continue -InformationVariable info -WarningVa ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\r\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\nAll variables are null:\r\n```powershell\r\n> $info\r\n> $warn\r\n> $err\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.14393.206\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.14393.206\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n\r\nNotes\r\n----------------\r\n\r\n* The `InformationAction` is taken into account, as the compilation step displays the `info test` string, but the `InformationVariable` isn't, even if the parameter is given to the Configuration.\r\n* The `[CmdletBinding()]param()` is required by a function to have common parameters available but doesn't seem to for Configurations.\r\n\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Note this is true for classes in general, too.",
      "created_at": "2019-12-27T20:43:36Z",
      "updated_at": "2019-12-27T20:43:36Z"
    },
    {
      "author": "gaelcolas",
      "author_association": "NONE",
      "body": "A side note to catch (and filter) errors as a hacky workaround:\r\n```\r\n$MOFFileAndErrors = &{\r\n    . $ConfigurationFile\r\n    &$ConfigName -OutputPath 'output'\r\n} 2>&1\r\n\r\n$CompilationErrors = @()\r\n$MOFFileAndErrors.Foreach{\r\n    if ($_ -isnot [System.Management.Automation.ErrorRecord])\r\n    {\r\n        $_\r\n    }\r\n    else\r\n    {\r\n        $CompilationErrors += $_\r\n    }\r\n}\r\n```",
      "created_at": "2021-05-21T22:06:25Z",
      "updated_at": "2021-05-21T22:06:25Z"
    }
  ],
  "created_at": "2018-01-05T12:56:45Z",
  "labels": [
    "Area-DSC"
  ],
  "number": 5798,
  "state": "open",
  "title": "Impossible to grab {information,warning,error} stream outputs in variables when written in a DSC Configuration",
  "updated_at": "2021-05-21T22:06:25Z"
}