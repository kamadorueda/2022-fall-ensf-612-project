{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12355",
  "author": "iSazonov",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nNow .Net SDK brought back a strong typed resource support so we can switch from our ResGen tool.\r\n\r\nFor WPF projects (`Microsoft.Management.UI.Internal`) the  .Net SDK support does not work OOB so we have to implement a workaround in csproj file.\r\n\r\n(Also I discovered that now all .Net dll-s is in ReadyToRun format and PowerShell distributive doubled in size. So we could turn on the feature too. It will add ~20Mb (10%). I removed this in last commit but could bring back.)\r\n\r\nDocs https://docs.microsoft.com/en-us/dotnet/core/compatibility/msbuild#net-core-30\r\n\r\n## PR Context\r\n\r\nFix #2882\r\n\r\nRelated #666\r\nRelated #5777\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2022-04-16T19:13:20Z",
  "comments": [
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Please add ready to run in a separate PR as it needs to be back ported.\r\ncc me.",
      "created_at": "2020-04-17T15:53:52Z",
      "updated_at": "2020-04-17T15:54:11Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@iSazonov master branch has moved to .NET 5 preview 3, do want to check if the workaround is still needed?",
      "created_at": "2020-04-18T00:43:40Z",
      "updated_at": "2020-04-18T00:43:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@adityapatwardhan Yes, we need (I checked).\r\n I do not see any progress in MSBuild repo. Tracking issue https://github.com/microsoft/msbuild/issues/4751",
      "created_at": "2020-04-18T07:44:59Z",
      "updated_at": "2020-04-18T07:45:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @mklement0 The PR is one step to resolve #666",
      "created_at": "2020-04-21T10:11:40Z",
      "updated_at": "2020-04-21T10:11:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Could you please merge?",
      "created_at": "2020-05-07T12:16:19Z",
      "updated_at": "2020-05-07T12:16:19Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMainainer, Please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-05-27T02:01:05Z",
      "updated_at": "2020-05-27T02:01:05Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov Can you please address @JoeRobich's comment?\r\nI notice this comment from the Ominisharp issue you opened: https://github.com/OmniSharp/omnisharp-vscode/issues/3781#issuecomment-630999837\r\nHave you guys reached to a conclusion on the issue and how to fix it?",
      "created_at": "2020-05-27T17:51:07Z",
      "updated_at": "2020-05-27T17:51:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw My current intention is to put generated files in custom `gen` folder. I will prepare the commit tomorrow. ",
      "created_at": "2020-05-27T17:54:40Z",
      "updated_at": "2020-05-27T17:54:40Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "As for OmniSharp behavior my understanding is:\r\n- .Net SDK targets explicitly define exclusions `obj/**/*.cs` from Compile.\r\nOmniSharp follow this - it ignores the files at startup\r\n- Strong Typed Resource Generator add strong typed generated files to Compile list on the fly.\r\nOnmiSharp follow this too - if we run `dotnet build` it discover the files.\r\n\r\nI don't know there general fix should be done (in OmniSharp to follow modern .Net SDK behavior or in .Net SDK). I will simply put the files in `gen` folder.",
      "created_at": "2020-05-27T18:06:15Z",
      "updated_at": "2020-05-27T18:06:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Now VS Code works well.",
      "created_at": "2020-05-28T16:35:04Z",
      "updated_at": "2020-05-28T16:35:04Z"
    },
    {
      "author": "JoeRobich",
      "author_association": "CONTRIBUTOR",
      "body": "> I don't know where the general fix should be done (in OmniSharp to follow modern .Net SDK behavior or in .Net SDK).\r\n\r\nHere are my thoughts on this. Generating the resource classes under a /gen folder to move them out of the /obj folder is the wrong fix.\r\n\r\nThe issue seems to be that you want design time intellisense for these resource files, which is understandable. The problem is that these backing files are only generated when the Build task is run in MSBuild. Design time builds do not run the Build task, instead they run the Compile task. Since these files aren't generated during when Compile is run, they are not considered part of the compilation and not added to the open Workspace.\r\n\r\nYou can add a short Target to run the resource generator before the Compile task (See https://github.com/OmniSharp/omnisharp-vscode/issues/3781#issuecomment-630999837). Now they will be part of the Compilation and will be part of the Workspace when working from an IDE. They will also be updated when they are changed within the IDE instead of requiring a full build. Since you likely do not want them to be regenerated constantly, defining the Inputs and Outputs for targets is the MSBuild mechanism so that targets are only run when changes have been made.\r\n\r\n",
      "created_at": "2020-05-28T18:10:12Z",
      "updated_at": "2020-05-28T18:10:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Generating the resource classes under a /gen folder to move them out of the /obj folder is the wrong fix.\r\n\r\nWe cannot create a \"fix\" in PowerShell repo. We can only create a \"workaround\".\r\nRight place for the fix is either OmniSharp repo or .Net SDK repo.\r\n\r\nAs I mentioned .Net explicitly moved generating strong typed resources from design time to build time - it is new standard. I don't think they will change this. So expectation is that OmniSharp will follow the new behavior too.\r\n\r\nAs for workarounds, we have two ones:\r\n- put new files in custom `gen` directory\r\n- add new target\r\n\r\nI don't like adding new target because this again changes standard .Net SDK behavior - it can have \r\n side effects and later we can catch other issues.\r\n",
      "created_at": "2020-05-29T07:01:22Z",
      "updated_at": "2020-05-29T07:01:22Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMainainer, Please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-06-05T14:00:12Z",
      "updated_at": "2020-06-05T14:00:12Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Hey @iSazonov, today @anmenaga @TravisEz13 @adityapatwardhan and I had a offline discussion on this PR, and we agreed the built-in resgen tool in MSBuild is what we should move forward with. Here are some but not all the benefits:\r\n1. No need to run `Start-ResGen` before the build when there is any new resource files/strings added.\r\n2. Other powershell projects can do the same in .csproj for their resource strings, without having to copy over the `src\\ResGen` code and the related build script.\r\n\r\nHowever, the built-in resgen tool is not ready yet for us to depend on, and hence your workaround in the `Microsoft.PowerShell.GraphicalHost.csproj` project.\r\nThe changes in `Microsoft.PowerShell.GraphicalHost.csproj` is what we felt most concerned. A proposal is to use a hybrid way moving toward our ultimate goal:\r\n1. for this PR, remove the changes to `Microsoft.PowerShell.GraphicalHost.csproj` and keep the rest\r\n1. keep `src\\Res` and make it only to generate `.cs` files for the `GraphicalHost.csproj`\r\n\r\nSo only the resources for `GraphicalHost.csproj` are generated using our existing tool, and all rest resources are handled by the built-in tool in MSBuild.\r\nDo you think that's feasible?",
      "created_at": "2020-06-09T22:06:20Z",
      "updated_at": "2020-06-09T22:08:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> The changes in Microsoft.PowerShell.GraphicalHost.csproj is what we felt most concerned. A proposal is to use a hybrid way moving toward our ultimate goal\r\n\r\nIf it is not a priority in days I'd ask MSFT team internally communicate with SDK team (they have low public activity) - they could tell how they plan to work with WPF projects and strongly typed resources. If they have a solution or workaround we could implement this and simplify our build.\r\n",
      "created_at": "2020-06-10T04:14:02Z",
      "updated_at": "2020-06-10T04:14:02Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-06-23T02:00:15Z",
      "updated_at": "2020-06-23T02:00:15Z"
    }
  ],
  "created_at": "2020-04-17T10:59:08Z",
  "number": 12355,
  "state": "closed",
  "title": "Use dotnet strong typed resource builder",
  "updated_at": "2022-04-16T19:13:23Z"
}