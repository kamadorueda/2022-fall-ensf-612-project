{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15242",
  "author": "daxian-dbw",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nAdd the performance benchmark project for PowerShell performance testing.\r\n\r\nThe structure of the `test\\perf` directory is\r\n```\r\n\u251c\u2500\u2500\u2500benchmarks\r\n\u2514\u2500\u2500\u2500dotnet-tools\r\n    \u251c\u2500\u2500\u2500BenchmarkDotNet.Extensions\r\n    \u251c\u2500\u2500\u2500Reporting\r\n    \u2514\u2500\u2500\u2500ResultsComparer\r\n```\r\n\r\nThe `benchmarks` folder contains the benchmark project, and will contain all the benchmarks we are going to write in future for testing PowerShell performance. It's targeting the .NET runtime `net6.0`, and is able to target different versions of PS sdk nuget packages. By default, it runs the tests targeting the current code base.\r\n\r\nThe `tools` folder contains projects that are copied from [dotnet/performance](https://github.com/dotnet/performance),\r\nthe performance testing repository for the .NET runtime and framework libraries.\r\n\r\n- [BenchmarkDotNet.Extensions](https://github.com/dotnet/performance/tree/main/src/harness/BenchmarkDotNet.Extensions)\r\n  - It provides the needed extensions for running benckmarks,\r\n    such as the `RecommendedConfig` which defines the set of recommended configurations for running the dotnet benckmarks (we use the same config).\r\n- [Reporting](https://github.com/dotnet/performance/tree/main/src/tools/Reporting)\r\n  - It provides additional result reporting support\r\n    which may be useful to us when running our benchmarks in lab.\r\n- [ResultsComparer](https://github.com/dotnet/performance/tree/main/src/tools/ResultsComparer)\r\n  - It's a tool for comparing different benchmark results.\r\n    It's very useful to show the regression of new changes by comparing its benchmark results to the baseline results.\r\n\r\nThe files that are copied from [dotnet/performance](https://github.com/dotnet/performance) are kept as is, without adding the copyright header used in PowerShell repository.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [x] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)",
  "closed_at": "2021-04-30T16:34:27Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "#Addressed. \r\nWe have `tools` folder, `test\\tools` and now `test\\perf\\tools`. Maybe rename last one to `perftools`?",
      "created_at": "2021-04-16T13:29:38Z",
      "updated_at": "2021-04-20T05:35:24Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov The `perf/tools` folder was renamed to `perf/dotnet-tools`, to differentiate it from other `tools` folders.\r\n\r\n> I wonder - has MSFT PowerShell team already internal perf LAB?\r\n\r\nNo, unfortunately :( We used to have perf and stressing tests before open source for Windows PowerShell, but not for the open-sourced PowerShell.\r\n\r\n> What is Baseline we should use? PowerShell 6.0? 7.0? Latest LTS version? Latest version?\r\n\r\nIt's based on what tests you are looking at. For CI regression tests, the baseline would be the results from the run without the PR changes. For high level regression tests, the base line would be the results from a previous preview, or a previous stable release.\r\n\r\n> Has MSFT team a roadmap for adding perf tests? I believe we need a perf test set with good code coverage.\r\n\r\nNo, we are still figuring things out. I also reached out to @adamsitnik for guidelines on performance testing in general.\r\n\r\n> Will perf tests be mandatory in new PRs to avoid perf regressions?\r\n\r\nIdeally, we will enable the perf test for CI, so that we know what's getting better/worse with the changes. We can leverage what dotnet team has for this, but the first thing for us is to have a good suite of perf tests.",
      "created_at": "2021-04-16T17:36:53Z",
      "updated_at": "2021-04-16T17:57:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> It's based on what tests you are looking at. For CI regression tests, the baseline would be the results from the run without the PR changes. For high level regression tests, the base line would be the results from a previous preview, or a previous stable release.\r\n\r\nIt would be great to have support of automatically creating these baselines in the scripts.\r\n\r\n> Ideally, we will enable the perf test for CI,\r\n\r\nIt seems it is impossible without a lab since a perf history can not be without the lab.",
      "created_at": "2021-04-18T10:21:08Z",
      "updated_at": "2021-04-18T10:21:08Z"
    },
    {
      "author": "adamsitnik",
      "author_association": "CONTRIBUTOR",
      "body": "@daxian-dbw @adityapatwardhan I've reopened the bug that you have hit today: https://github.com/dotnet/BenchmarkDotNet/issues/837",
      "created_at": "2021-04-28T16:34:48Z",
      "updated_at": "2021-04-28T16:34:48Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Currently there is one issue when running the benchmarks targeting the current code base (with `ProjectReference` takes effect). The step that runs `dotnet build -c Release` on the generated temporary project takes too long and always fail in the end. Then BDN attempts to [run `dotnet build` again with `--no-dependencies`](https://github.com/dotnet/BenchmarkDotNet/blob/63e28c100a42a6492d09a0b93a8a4c141061bb0d/src/BenchmarkDotNet/Toolchains/DotNetCli/DotNetCliCommand.cs#L63-L65), and that succeeds very fast:\r\n\r\n![temp](https://user-images.githubusercontent.com/127450/116593231-b8641800-a8d5-11eb-8cd7-dda5d1891abb.jpg)\r\n\r\nActually, when running benchmarks with the \u2018ProjectReference\u2019 setting, the very first `dotnet run` on our `powershell-perf.csporj` already built the dependency powershell/dotnet-tool projects, so there is no need to build those dependency projects again when running `dotnet build` on the generated temporary project, and thus directly applying `--no-dependencies` should be just fine. I already reached out to @adamsitnik for help and we will resolve it offline in a separate PR.",
      "created_at": "2021-04-29T17:31:52Z",
      "updated_at": "2021-04-29T17:31:52Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@adityapatwardhan I think this PR is ready to be merged. Improvement can come in separate PRs.",
      "created_at": "2021-04-29T17:32:56Z",
      "updated_at": "2021-04-29T17:32:56Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "Will look at it today",
      "created_at": "2021-04-29T18:00:03Z",
      "updated_at": "2021-04-29T18:00:03Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@adityapatwardhan Files in `dotnet-tools` are copied from `dotnet/performance` and we probably will need to sync them from time to time, so let's just keep them as they are.",
      "created_at": "2021-04-29T20:59:25Z",
      "updated_at": "2021-04-29T20:59:25Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@daxian-dbw - just noticed there are 4 CodeFactor issues not under dotnet-tools.. could you fix them please?",
      "created_at": "2021-04-29T22:27:31Z",
      "updated_at": "2021-04-29T22:27:31Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "Maybe we can ask @TravisEz13 or @SteveL-MSFT  to add the `test/perf/dotnet-tools/*` path in the ignore list for CodeFactor. \r\n\r\nInstructions here: https://support.codefactor.io/i15-ignoring-code-files\n\n<blockquote><div><strong><a href=\"https://support.codefactor.io/i15-ignoring-code-files\">Ignoring code files | CodeFactor.io</a></strong></div></blockquote>",
      "created_at": "2021-04-29T22:38:44Z",
      "updated_at": "2021-04-29T22:38:45Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:`v7.2.0-preview.6` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0-preview.6)\n",
      "created_at": "2021-05-27T17:31:56Z",
      "updated_at": "2021-05-27T17:31:56Z"
    }
  ],
  "created_at": "2021-04-15T22:40:54Z",
  "number": 15242,
  "state": "closed",
  "title": "Add the performance benchmark project for PowerShell performance testing",
  "updated_at": "2021-05-27T17:31:56Z"
}