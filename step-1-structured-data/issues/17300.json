{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17300",
  "author": "ssteiner",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nI'm working with the MicrosofTeams PS Module v4.3.0.\r\nMy software is using the PS SDK 7.2.2 to send commands to configure MS Teams, e.g. managing a users calling settings. So one command I'd like to run using the SDK is this\r\n\r\n`[Microsoft.Teams.ConfigAPI.Cmdlets.Generated.Models.ICallGroupMembershipDetails[]]$gmd = @(\r\n\t[Microsoft.Teams.ConfigAPI.Cmdlets.Generated.Models.ICallGroupMembershipDetails]@{CallGroupOwnerId='user20@contoso.com';NotificationSetting='Banner'}\r\n\t[Microsoft.Teams.ConfigAPI.Cmdlets.Generated.Models.ICallGroupMembershipDetails]@{CallGroupOwnerId='user30@contoso.com';NotificationSetting='Mute'}\r\n)\r\nSet-CsUserCallingSettings -Identity user10@contoso.com -GroupMembershipDetails $gmd`\r\n\r\nNow, if I run this in the SDK, instead of the real object with type `Microsoft.Teams.ConfigAPI.Cmdlets.Generated.Models.ICallGroupMembershipDetails` I'm getting a generated object. \r\n\r\nIs there a way to programmatically configure the `PSTypeSerializer` to get me the right object? So something along [these lines](https://devblogs.microsoft.com/powershell/how-objects-are-sent-to-and-from-remote-sessions/) but doing it programmatically so that the runspaces I'm opening with the PS SDK will get me the `Microsoft.Teams.ConfigAPI.Cmdlets.Generated.Models.ICallGroupMembershipDetails` filled out\r\n\r\n\n\n### Expected behavior\n\n```console\n(Get-CsUserCallingSettings -Identity user4@contoso.com).GroupMembershipDetails\r\ngets me an array of `Microsoft.Teams.ConfigAPI.Cmdlets.Generated.Models.ICallGroupMembershipDetails`\n```\n\n\n### Actual behavior\n\n```console\n(Get-CsUserCallingSettings -Identity user4@contoso.com).GroupMembershipDetails\r\n\r\ngets me an array of `Deserialized.Microsoft.Teams.ConfigAPI.Cmdlets.Generated.Models.ICallGroupMembershipDetails`\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.2\r\nPSEdition                      Core\r\nGitCommitId                    7.2.2\r\nOS                             Microsoft Windows 10.0.22000\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2022-05-13T19:00:42Z",
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "It's not clear if you're using remoting, or if this is a result of putting things in different runspaces on the same machine. \r\n\r\nSerialization has two benefits - firstly if you call a remote server which has the components installed to recognized a `[Microsoft.Teams.ConfigAPI.Cmdlets.Generated.Models.ICallGroupMembershipDetails]` object from a machine that does not, the Deserialized object is understood rather than causing an error.  And secondly even if the object type is understood, the caller does not have the session that was used to get the object so it can't (reliably) do something like \"get this object's parent\", or \"modify this object\" because those expect to be run in the same context as the object was fetched. Something like export-clixml / import-clixml will rehydrate as the same type of object but that isn't possible for every type of object - you need the equivalent of `New-Object  -property @{names=values}  ` (some properties are read-only, and some objects can't be conjured up with New-object) . \r\n\r\nYou haven't said what problem being serialized is causing, but the initial frustration is usually \"I got a widget _there_ and I want to to call it's \"foo\" method _here_ but the method has gone in the serialization process\". Whilst that is the symptom, the foo method often wouldn't work, even if widget objects are understood here.   \r\n\r\n",
      "created_at": "2022-05-10T11:18:58Z",
      "updated_at": "2022-05-10T11:18:58Z"
    },
    {
      "author": "ssteiner",
      "author_association": "NONE",
      "body": "I'm not sure what the PS Module this command is for ([MicrosoftTeams](https://www.powershellgallery.com/packages/MicrosoftTeams/4.3.0)) does. I just Import it using an `InitialSessionState` using\r\n\r\n```\r\n    var initial = InitialSessionState.CreateDefault();\r\n    initial.ImportPSModule(new string[] { path to module here });\r\n    initial.ExecutionPolicy = Microsoft.PowerShell.ExecutionPolicy.Unrestricted;\r\n    var myRunspacePool = RunspaceFactory.CreateRunspacePool(initialState);\r\n    myRunspacePool .Open();\r\n```\r\nI then connect using \r\n\r\n```\r\n    var ps = PowerShell.Create();\r\n    ps.RunspacePool = myRunspacePool ;\r\n    var myCommand = new Command(\"Connect-MicrosoftTeams\");\r\n    if (!string.IsNullOrEmpty(Config.Login) && Config.Password != null)\r\n    {\r\n         var cred = new PSCredential(Config.Login, Config.Password);\r\n         var param = new CommandParameter(\"Credential\", cred);\r\n          myCommand.Parameters.Add(param);\r\n     }\r\n    ps.Commands.AddCommand(myCommand);\r\n    var result = ps.Invoke();\r\n```\r\n\r\nSo your standard 'run PS command'.\r\n\r\nOnce connected I'd like to run the command I posted above.\r\n\r\nIf I run `Get-CsUserCallingSettings -Identity user4@contoso.com`, I get a PSObject back which has a bunch of properties. Most of them are simple, so they're easy to work with. The property `GroupMembershipDetails` is an array of Objects - that's where the problems start.\r\n\r\nI need to fetch the right item of that list, and modify one of it's property (setting it to another value) and then use the entire modified object that `Get-CsUserCallingSettings` returned as input to another commandlet `Set-CsUserCallingSettings`. The latter won't accept an input of `Deserialized.Whatnot`, but expects the same type that it gave me as return of `Get-CsUserCallingSettings`. No methods will be called... I just need to pick the right item from the list (the one having `CallGroupOwnerId` property equals some value, then set its other property, `NotificationSettings` to a different value), then send the the modified object back.",
      "created_at": "2022-05-10T18:27:09Z",
      "updated_at": "2022-05-10T18:29:15Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "It sounds the problem is with the `MicrosoftTeams` module, in that it doesn't support the scenario where result of the `Get-CsUserCallingSettings` can be used as input to another cmdlet `Set-CsUserCallingSettings`.\r\n\r\n@StevenBucher98 and @SydneyhSmith, do either of you knows how to provide feedback to the owner of `MicroosftTeams` about this?",
      "created_at": "2022-05-11T21:49:55Z",
      "updated_at": "2022-05-11T21:49:55Z"
    },
    {
      "author": "StevenBucher98",
      "author_association": "COLLABORATOR",
      "body": "I have submitted a contact owners form on PSGallery, hopefully that will get to them. I will do a little more digging to find out owners of `MicrosoftTeams`",
      "created_at": "2022-05-12T15:35:14Z",
      "updated_at": "2022-05-12T15:35:14Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@ssteiner I found that opening issue in https://github.com/MicrosoftDocs/office-docs-powershell can get the attention from the `MicrosoftTeams` module owner, one example issue: https://github.com/MicrosoftDocs/office-docs-powershell/issues/9420.\r\nSo, please open an issue about this in that repo, and you will be more likely to get help from the right folks.\n\n<blockquote><img src=\"https://opengraph.githubassets.com/9287505354c455452ceb75fab4f905752e0909851ce18e3ba49ce3768f4a1c75/MicrosoftDocs/office-docs-powershell\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/MicrosoftDocs/office-docs-powershell\">GitHub - MicrosoftDocs/office-docs-powershell: PowerShell Reference for Office Products - Short URL: aka.ms/office-powershell</a></strong></div><div>PowerShell Reference for Office Products - Short URL: aka.ms/office-powershell - GitHub - MicrosoftDocs/office-docs-powershell: PowerShell Reference for Office Products - Short URL: aka.ms/office-p...</div></blockquote>",
      "created_at": "2022-05-12T16:21:50Z",
      "updated_at": "2022-05-12T16:21:52Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as external and has not had any activity for **1 day**. It has been be closed for housekeeping purposes.",
      "created_at": "2022-05-13T19:00:41Z",
      "updated_at": "2022-05-13T19:00:41Z"
    },
    {
      "author": "JensTrier",
      "author_association": "NONE",
      "body": "@ssteiner Thanks for the feedback. \r\n\r\nSet-CsUserCallingSettings does support setting GroupMembershipDetails using the output from Get-CsUserCallingSettings, when run directly in PS. Example 6 in https://docs.microsoft.com/en-us/powershell/module/teams/set-csusercallingsettings?view=teams-ps shows how to do it (fyi, the Index cmd is wrong in the example, since sip: is missing from the user, but I'm in the process of updating the doc).\r\n\r\nI'm not sure why the returned object is different, when running the cmdlet in the SDK. Feel free to contact me offline with more details at jens.trier snablea microsoft.com\n\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/teams/set-csusercallingsettings\">Set-CsUserCallingSettings (MicrosoftTeamsPowerShell)</a></strong></div><div>This cmdlet sets the call forwarding, simultaneous ringing and call group settings for the specified user. When specifying settings you need to specify all settings with a settings grouping, for instance, you can't just change a forwarding target. Instead, you need to start by getting the current settings, making the necessary changes, and then setting/writing all settings within the settings group. </div></blockquote>",
      "created_at": "2022-05-16T07:20:27Z",
      "updated_at": "2022-05-16T07:20:29Z"
    }
  ],
  "created_at": "2022-05-10T10:01:04Z",
  "number": 17300,
  "state": "closed",
  "title": "Programmatically configure serialization rehydration",
  "updated_at": "2022-05-16T07:20:29Z"
}