{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13523",
  "author": "mklement0",
  "body": "Aborting (forcefully terminating) a script run via the CLI should result in a _nonzero_ exit code to reflect the manner of termination.\r\n\r\nWhile that works with `-Command`, it doesn't with `-File`, which reports `0`.\r\n\r\n(As an aside: `-Command` reports `1`, which is unfortunate, given that a dedicated, reserved exit code would be preferable, the way POSIX-compatible shell use (`130`) - however, backward-compatibility concerns prevent changing that now - see #13501).\r\n\r\n## Steps to reproduce\r\n\r\n```powershell\r\n# Create a temp. script that simply prompts for input.\r\n'read-host \"Press Ctrl-C to abort\"' > t.ps1\r\n\r\n# Run the script *and press Ctrl-C to abort it*.\r\npwsh -nop -file t.ps1\r\nRemove-Item t.ps1\r\n\r\n# The exit code should be *nonzero*, but currently is 0.\r\n$LASTEXITCODE | Should -Not -Be 0\r\n```\r\n\r\n## Expected behavior\r\n\r\nThe test should suceed.\r\n\r\n## Actual behavior\r\n\r\nThe test fails, because the exit code is unexpectedly `0`, mistakenly signaling success:\r\n\r\n```none\r\nExpected 0 to be different from the actual value, but got the same value.\r\n```\r\n\r\nThe bug exists in WinPS as well.\r\n\r\n## Environment data\r\n\r\n```none\r\nPowerShell Core 7.1.0-preview.6\r\n```\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2020-08-26T17:30:06Z",
  "number": 13523,
  "state": "open",
  "title": "CLI: aborting a *.ps1 script executed with -File with Ctrl-C unexpectedly reports 0 (zero) as the exit code",
  "updated_at": "2020-08-27T15:22:28Z"
}