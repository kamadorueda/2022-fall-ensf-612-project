{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3523",
  "author": "mopadden",
  "body": "Add preference to throw exception on $lastexitcode!=0, like bash \u2019set -e\u2019.\r\nOnly throw with commands *not* used in an expression/if/loop value.\r\n\r\n$NativeCommandPipeFailPreference=\u201ccontinue\u201d: like \u2018set -e;set +o pipefail\u2019.\r\nAn exception is thrown for a native command giving a non-zero exit code,\r\nif it is the the last command in the pipeline.\r\n\r\n$NativeCommandPipeFailPreference=\u201csilentlycontinue\u201d: like \u2018set +e\u2019.\r\nNo exception is thrown on non-zero exit codes. This is the default.\r\n\r\n$NativeCommandPipeFailPreference=\u201cstop\u201d: like \u2018set -e;set -o pipefail\u2019.\r\nAn exception is thrown for a native command giving a non-zero exit code.\r\n\r\nWith $NativeCommandExceptionPreference \"continue\" (the default),\r\na RuntimeException is thrown, handing off to PowerShell error handling.\r\n\r\nWith $NativeCommandExceptionPreference \u201cstop\u201d, an ExitException is thrown,\r\nterminating the shell regardless of other PowerShell error handling.\r\nNote: If PowerShell exits, the OS is given exit code 1 rather than forwarding the command exit code\r\n\r\nto resolve #3415\r\n",
  "closed_at": "2020-08-18T22:40:57Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee could you please review this change?",
      "created_at": "2017-04-11T16:41:54Z",
      "updated_at": "2017-04-11T16:41:54Z"
    },
    {
      "author": "HemantMahawar",
      "author_association": "CONTRIBUTOR",
      "body": "@PowerShell/powershell-committee discussed this briefly and has following observations:\r\n- The name of the variable should start with PS\r\n- Have 2 variables seems too many and we should consider a single variable\r\n\r\nGiving the larger implication of this change, committee feels we should have an RFC for this. The RFC should also consider other approaches as well, such as:\r\n- Lexical scoping vs dynamic scope\r\n- Reusing ErrorActionPreference (such as 'StopIncludingNativeCommand' or 'Stop','IncludeNativeCommand')\r\n- Add a new (boolean) variable (such as $PSIncludeNativeCommandInErrorActionPreference)\r\n- Update the Set-StrictMode",
      "created_at": "2017-04-12T23:28:10Z",
      "updated_at": "2017-04-12T23:28:10Z"
    },
    {
      "author": "mopadden",
      "author_association": "NONE",
      "body": "Thank you for reviewing this. I have begun compiling these details for a draft RFC as described. \r\nShould this be dropped in downstream of github.com/PowerShell/PowerShell-RFC?",
      "created_at": "2017-04-13T23:31:13Z",
      "updated_at": "2017-04-13T23:53:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mopadden Yes, PowerShell/PowerShell-RFC is right place. (Please read docs there.)",
      "created_at": "2017-04-14T04:16:39Z",
      "updated_at": "2017-04-14T04:16:39Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Waiting on the [RFC](https://github.com/PowerShell/PowerShell-RFC/pull/88) to be approved.",
      "created_at": "2018-03-14T16:51:47Z",
      "updated_at": "2018-03-14T16:51:47Z"
    },
    {
      "author": "stale[bot]",
      "author_association": "NONE",
      "body": "This PR has been automatically marked as stale because it has not had activity in the last 30 days. It will be closed if no further activity occurs within 10 days.\nThank you for your contributions.\nCommunity members are welcome to grab these works.\n",
      "created_at": "2018-04-13T17:35:39Z",
      "updated_at": "2018-04-13T17:35:39Z"
    },
    {
      "author": "stale[bot]",
      "author_association": "NONE",
      "body": "This PR has be automatically close because it is stale. If you wish to continue working on the PR, please first update the PR, then reopen it.\nThanks again for your contribution.\nCommunity members are welcome to grab these works.\n",
      "created_at": "2018-04-23T17:48:27Z",
      "updated_at": "2018-04-23T17:48:27Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT In place of this, how about providing the community with a hook ala `CommandNotFoundAction`.  Something like `PostNativeCommandInvocationAction` that would pass to the handler the exit code of the native command (along with the process args).  Then the community could experiment with approaches (functions/scripts/modules) that hook this action to cause a non-zero exit code to fail.  Could be as simple as a module with a function like `Enable-ThrowOnNativeCommandFailure ` e.g.:\r\n```powershell\r\nfunction Enable-ThrowOnNativeCommandFailure {\r\n    $global:ExecutionContext.InvokeCommand.PostNativeCommandInvocationAction= {\r\n        param($Name, $EventArgs)\r\n        if ($EventArgs.ExitCode) {\r\n            throw \"$Name $($EventArgs.Args) failed with exit code $($EventArgs.ExitCode)\"\r\n        }\r\n    }\r\n} \r\n```\r\nOr maybe instead of throwing directly in the action handler, there could be a property on `$EventArgs` we could set to indicate it should throw back to the invoker of the native command.  Might be nice if we could provide some aspects of the exception message. \r\n\r\nI have to say that as someone pushing PowerShell into `critical build systems`, I've gotten more than a few crusty looks when a PowerShell script has obviously failed when you look at the log file yet the build system (Jenkins, TFS Build) reports success.  This has been a **real** pain point for my dev team especially as other teams are trying to push Python for build scripts (blech!).",
      "created_at": "2019-06-12T06:06:46Z",
      "updated_at": "2019-06-12T06:14:01Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@rkeithhill Please  discuss in https://github.com/PowerShell/PowerShell-RFC/pull/88. Or better pull new RFC with your proposal - I like it.",
      "created_at": "2019-06-12T17:10:17Z",
      "updated_at": "2019-06-12T17:10:17Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Done https://github.com/PowerShell/PowerShell-RFC/pull/88#issuecomment-501386832",
      "created_at": "2019-06-12T17:57:59Z",
      "updated_at": "2019-06-12T17:57:59Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mopadden appears that @PowerShell/powershell-committee had closed on your RFC, can you continue with this PR?",
      "created_at": "2020-07-28T18:38:34Z",
      "updated_at": "2020-07-28T18:38:34Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Quoting myself here so we have context: \r\n\r\n> @PowerShell/powershell-committee agrees that the RFC as currently written is what we believe to be the correct behavior. We can proceed with an experimental feature, and we'd like to use that implementation as a testbed for validating that this is the correct behavior.\r\n\r\n> @mopadden were you looking to implement this? It looks like you already had a code PR open in PowerShell/PowerShell#3523. Would you be interested in updating that one? We'd really love for this to land in PowerShell 7.1, but we would need it to be landed (including through review) by end of August in order to make our RC release. If this isn't something you think you can commit to, let us know here, as we could potentially commit engineers from the PS team to work on it.",
      "created_at": "2020-07-28T19:30:58Z",
      "updated_at": "2020-07-28T19:30:58Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2020-08-05T02:00:11Z",
      "updated_at": "2020-08-05T02:00:11Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Closing this PR as it doesn't match the RFC",
      "created_at": "2020-08-18T22:40:57Z",
      "updated_at": "2020-08-18T22:40:57Z"
    }
  ],
  "created_at": "2017-04-10T21:06:53Z",
  "number": 3523,
  "state": "closed",
  "title": "Equivalent of bash 'set -e' (#3415)",
  "updated_at": "2020-08-18T22:41:00Z"
}