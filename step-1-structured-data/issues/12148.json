{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12148",
  "author": "JustinGrote",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\nfunction Test-Whatif {\r\n    [CmdletBinding(SupportsShouldProcess)]\r\n    param (\r\n        $String = 'Thing to do'\r\n    )\r\n    $target = 'Thing to Target'\r\n    $VerbosePreference ='continue'\r\n    if ($PSCmdlet.ShouldProcess($target,$string)){\r\n        \"Did $string to $target\"\r\n    }\r\n}\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nShouldProcess would show Verbose output if $VerbosePreference is set either at the parent or in-function level\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nOnly works if -Verbose parameter is explicity specified on the cmdlet\r\n```\r\n![image](https://user-images.githubusercontent.com/15258962/76994076-1c629180-690b-11ea-86d9-565e59896e92.png)\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0\r\nOS                             Microsoft Windows 10.0.19041\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "kilasuit",
      "author_association": "COLLABORATOR",
      "body": "Sorry @JustinGrote but as this stand the actual behaviour is the expected behaviour and has been since as far as I can remember. It perhaps could be better documented in how to pass preferences between scopes in a way that respects the users set preferences\r\n\r\nYou can however control this by passing `$VerbosePreference` to `-Verbose`  like so\r\n``` powershell\r\n$VerbosePreference = 'Continue'\r\nTest-Whatif -Verbose:$VerbosePreference\r\n```\r\n\r\nYou can confirm this by changing it back like so\r\n``` powershell\r\n$VerbosePreference = 'SilentlyContinue'\r\nTest-Whatif -Verbose:$VerbosePreference\r\n ```\r\n\r\nYou can ofc get round explictly setting this by adding this in your $PSDefaultParameterValues like so (if you want to be less verbose in your cmdlet/function calls)\r\n```powershell\r\n$PSDefaultParameterValues.Add('*:Verbose',$VerbosePreference)\r\n```\r\nand then changing the value as required in the top level scope just like I showed above but make sure to update the value in PSDefaultParameterValues like so\r\n``` powershell\r\n$PSDefaultParameterValues[\"*:Verbose\"]=$VerbosePreference\r\n```\r\nThe same logic as above also applies to other preference values and their respective parameters on advanced functions/cmdlets and also to Whatif/Confirm when they are enabled by the SupportsShouldProcess functionality.\r\n\r\nHowever under no circumstances should a function/nested function override any preferences that a user has specified in the top scope of thier current session without being prompted to do so for them, but it can be done with Set-Variable and it's scope parameter like so\r\n```powershell\r\n$ErrorActionPreference = 'Continue'\r\nfunction Test-WhatifAndUpdateParentErrorPreference {\r\n    [CmdletBinding(SupportsShouldProcess)]\r\n    param (\r\n        $String = 'Thing to do'\r\n    )\r\n    $target = 'Thing to Target'\r\n    $VerbosePreference ='continue'\r\n    $ErrorActionPreference = 'Inquire'\r\n    # Set variable in Parent scope \r\n    Set-Variable -Name ErrorActionPreference -Value $ErrorActionPreference -Scope 1   \r\nif ($PSCmdlet.ShouldProcess($target,$string)){\r\n        \"Did $string to $target\"\r\n    }\r\n    # Get variable in Parent scope\r\n    Get-Variable -Name ErrorActionPreference -Scope 1 \r\n}\r\nTest-WhatifAndUpdateParentErrorPreference\r\n$ErrorActionPreference\r\n```\r\nNote: if you do the above, please be a good citizen & ask to change it first, but if not you should remember to reset the value to what it was in the parent scope when you are done.\r\n\r\nAlso ShouldProcess only add's support for WhatIf/Confirm not verbose as [currently documented](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_functions_cmdletbindingattribute?view=powershell-7.2#supportsshouldprocess)\r\n\r\nIf this were to change it would IMO be a break to the User Experience that I can't see how much value this would bring when you can do the above (which I know is pure PowerShell but should be able to be replicated easily enough in other implementations)",
      "created_at": "2022-03-08T23:07:31Z",
      "updated_at": "2022-03-08T23:08:59Z"
    },
    {
      "author": "JustinGrote",
      "author_association": "CONTRIBUTOR",
      "body": "@kilasuit you did not interpret my issue correctly. My issue is specifically on the verbose output of `ShouldProcess` when `ShouldProcess` is used.\r\n\r\nHere's a better example:\r\n\r\n```powershell\r\nfunction VerboseOverride {\r\n  [CmdletBinding()]\r\n  param()\r\n  $verbosepreference = 'continue'\r\n  Write-Verbose \"Works even if silentlycontinue is set\"\r\n}\r\n\r\n$verbosePreference = 'silentlycontinue'\r\nVerboseOverride #Emits the verbose message\r\n\r\nfunction VerboseOverrideShouldProcess {\r\n  [CmdletBinding(SupportsShouldProcess)]\r\n  param()\r\n  $verbosepreference = 'continue'\r\n  $null = $PSCmdlet.ShouldProcess('target','action')\r\n}\r\n$verbosePreference = 'silentlycontinue'\r\nVerboseOverrideShouldProcess #Doesnt emit the verbose message unless -Verbose is explicitly specified\r\n\r\nVerboseOverrideShouldProcess -Verbose #Emits the message\r\n\r\n$verbosePreference = 'continue'\r\nVerboseOverrideShouldProcess #Still doesn't emit the verbose message unless -Verbose is explicitly specified even though *CALLER* verbose preference says 'continue'\r\n```\r\n\r\nDo you see the issue here now? It basically ignores verbosepreference entirely whether it is in caller scope or not, and ONLY emits a verbose message if the -Verbose parameter is specified. This leads to inconsistent output.",
      "created_at": "2022-03-08T23:43:55Z",
      "updated_at": "2022-03-08T23:44:59Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Yeah, and for the record, these also do not work:\r\n```PowerShell\r\n$verbose = $true\r\n$PSBoundParameters['Verbose'] = $true\r\n$MyInvocation.BoundParameters['Verbose'] = $True\r\n```\r\n\r\nThe only thing that does work:\r\n```PowerShell \r\nfunction VerboseOverrideShouldProcess {\r\n  [CmdletBinding(SupportsShouldProcess)]\r\n  param()\r\n  \r\n  # I'm just the messenger.\r\n  $PSCmdlet.CommandRuntime.GetType().GetProperty(\"Verbose\", [Reflection.BindingFlags]\"NonPublic,Instance\").SetValue($PSCmdlet.CommandRuntime, $True, $null)\r\n\r\n  $null = $PSCmdlet.ShouldProcess('target','action')\r\n}",
      "created_at": "2022-03-09T06:54:04Z",
      "updated_at": "2022-03-09T06:54:04Z"
    }
  ],
  "created_at": "2020-03-18T18:26:57Z",
  "number": 12148,
  "state": "open",
  "title": "ShouldProcess does not emit Verbose Output even if $VerbosePreference is set",
  "updated_at": "2022-03-09T06:54:04Z"
}