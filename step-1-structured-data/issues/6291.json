{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6291",
  "author": "mklement0",
  "body": "<sup>Related: #6292 and #6360</sup>\r\n\r\nNote that `.` should receive _no_ special treatment in tokens such as `-foo=bar.baz`, because the token is _unquoted_ and does _not_ start with a special char. (`$ @ ( ' \" `) and should therefore result in interpretation as an (expandable) _string_, according to [about_Parsing](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_parsing).\r\n\r\nIn reality, though, the unexpected special treatment stems from `-` being the 1st character, which causes interpretation as a _parameter name_, even though that doesn't apply in this case.\r\n\r\n_Workaround_: `` ` ``-escape the `-`: `` `-foo=bar.baz `` (or quote the entire argument: `'--foo=bar.baz'`, or even just any part of it).\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n# Helper function that echoes all arguments.\r\nfunction Out-Argument { $i = 0; $Args | % { 'arg[{0}]: {1}' -f $i++, $_ } }\r\n\r\n# Pass an unquoted argument that starts with \"-\" and has an embedded \".\" (outside of \"...\" or '...')\r\nOut-Argument -foo=bar.baz\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\narg[0]: -foo=bar.baz\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\narg[0]: -foo=bar\r\narg[1]: .baz\r\n```\r\n\r\nThe token was unexpectedly broken in two. Note that this equally applies when calling external utilities.\r\n\r\nAnd it is indeed in the context of calling external programs that an argument with such (non-PowerShell) syntax (`-<param-name>=<value>`) may need to be passed - see [this SO question](https://stackoverflow.com/q/49005749/45375) and [this one](https://stackoverflow.com/q/60487766/45375).\r\n\r\n(PSv2 exhibited a variation of the bug - see [this SO question](https://stackoverflow.com/q/49118108/45375).)\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.0.1 on macOS 10.13.3\r\nPowerShell Core v6.0.1 on Ubuntu 16.04.3 LTS\r\nPowerShell Core v6.0.1 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\nWindows PowerShell v5.1.15063.674 on Microsoft Windows 10 Pro (64-bit; v10.0.15063)\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Garrett hit this trying to use cmake with pwsh: https://twitter.com/fearthecowboy/status/1336758436583809026\r\n\n\n<blockquote><img src=\"https://pbs.twimg.com/media/Eo0eRXlU8AA_jOy.png:large\" width=\"48\" align=\"right\"><div>Twitter</div><div><strong><a href=\"https://twitter.com/fearthecowboy/status/1336758436583809026\">Garrett Serack\ud83e\udd20 on Twitter</a></strong></div><div>\u201cI just wandered across the absolute weirdest bug in powershell &amp; pwsh\n\nWhen using a parameter that starts with a dash, powershell will insert a space before a period in the command line:\n\nThis is bad when trying to execute a program (example here with cmd /c echo)\n\n@Steve_MSFT\u201d</div></blockquote>",
      "created_at": "2020-12-10T15:52:40Z",
      "updated_at": "2020-12-10T15:52:42Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Just to clarify, @SteveL-MSFT: it isn't that a _space_ is inserted - that's just how it manifests in a test command such as `cmd /c echo -foo=bar.none`; what happens is that the part of the argument starting with the (first) `.`  is passed _as a separate argument_.\r\n\r\n#14364 should be closed as a duplicate.\r\n",
      "created_at": "2020-12-10T16:02:04Z",
      "updated_at": "2020-12-10T16:03:01Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, we believe the treatment of the period as an argument separator is a bug that should be fixed.   A bucket 3 breaking change.",
      "created_at": "2020-12-16T23:35:26Z",
      "updated_at": "2021-01-06T23:16:25Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Glad to hear it, @SteveL-MSFT.\r\n\r\nI hope that fixing this will also address  #6292 and #6360.",
      "created_at": "2020-12-16T23:39:29Z",
      "updated_at": "2020-12-16T23:39:29Z"
    },
    {
      "author": "ceztko",
      "author_association": "NONE",
      "body": "Is this still on track for 7.2?",
      "created_at": "2021-10-06T13:31:05Z",
      "updated_at": "2021-10-06T13:31:05Z"
    },
    {
      "author": "ceztko",
      "author_association": "NONE",
      "body": "I stumbled again in the same issue after few months. It's so unexpected when it happens and it's a waste of time just to realize \"oh, yes: this is the weirdo behavior of powershell of the other time\". Is this officially recognized as a bug and, if so, when will it be fixed?",
      "created_at": "2022-05-06T15:11:37Z",
      "updated_at": "2022-05-06T15:11:37Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Per [the comment](https://github.com/PowerShell/PowerShell/issues/6291#issuecomment-747104988) on behalf of the committee it appears the official stance is that it's a bug. Unsure of timescale if there is one for this, but I can adjust the tags here appropriately at least.",
      "created_at": "2022-05-06T17:07:51Z",
      "updated_at": "2022-05-06T17:07:51Z"
    },
    {
      "author": "ceztko",
      "author_association": "NONE",
      "body": "The 7.2 milestone is gone and it may be late for 7.3. Maybe the fact fixing it is a breaking change is slowing the process?",
      "created_at": "2022-05-06T17:20:00Z",
      "updated_at": "2022-05-06T17:20:00Z"
    },
    {
      "author": "lloydjatkinson",
      "author_association": "NONE",
      "body": "I'd like to draw attention to this issue reported in another project that might be somewhat related to this https://github.com/npm/cli/issues/3136",
      "created_at": "2022-10-12T02:43:46Z",
      "updated_at": "2022-10-12T02:43:46Z"
    },
    {
      "author": "mcuee",
      "author_association": "NONE",
      "body": "Same issue here for the avrdude project.\r\n* https://github.com/avrdudes/avrdude/issues/1169",
      "created_at": "2022-11-06T13:32:39Z",
      "updated_at": "2022-11-06T13:32:39Z"
    }
  ],
  "created_at": "2018-03-02T14:14:33Z",
  "number": 6291,
  "state": "open",
  "title": "Parameter parsing/passing: an unquoted argument that starts with a \"-\" (hyphen) is broken in two at the first \".\" (period)",
  "updated_at": "2022-11-06T13:32:39Z"
}