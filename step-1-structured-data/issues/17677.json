{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17677",
  "author": "mklement0",
  "body": "### Summary of the new feature / enhancement\n\nAs @KalleOlaviNiemitalo pointed out in the conceptually related #17601, .NET 7 has decided to make `[IntPtr]` proper _numeric types_ with support for arithmetic, for better low-level support of working with pointers:\r\n\r\n```csharp\r\n// Error up to .NET 6, because '+' wasn't defined for pointer types.\r\n// In .NET 7, performs arithmetic and returns an IntPtr instance.\r\n IntPtr.Zero + IntPtr.Zero\r\n```\r\n\r\n(Previously, it was _C#_ that allowed arithmetic via its `nint` and `nuint` types, which, while mapped to `IntPtr` and `UIntPtr`, _overlaid_ them with arithmetic support. This behavior is now moving in the BCL/CLR, and going forward `nint` and `nuint` are mere _aliases_ for `IntPtr` and `UIntPtr` - see https://github.com/dotnet/csharplang/issues/6065)\r\n\r\nIn short: `IntPtr` will behave like `Int32` / `Int64` and `UIntPtr` like `UInt32` / `UInt64`  in 32-bit/64-bit processes\r\n\r\nPowerShell should align with these changes in two respects:\r\n\r\n* Allow arithmetic that preserves the pointer type, if possible.\r\n\r\n  * Currently, PowerShell does do arithmetic, but (a) it doesn't preserve the pointer type and (b) it is _broken_; e.g. `[IntPtr] 2147483648 + 0` causes an overflow exception(!) even in 64-bit processes (`2147483648` is `[int]::MaxValue+1`, which shouldn't cause an overflow in 64-bit processes where `IntPtr` is essentially `Int64` (`[long]`).\r\n\r\n* Treat `IntPtr.Zero` / `UIntPtr.Zero` _as a number_ that is therefore `$false` when coerced to a Boolean, as originally proposed in #17601\r\n  * Currently, `[bool] [IntPtr]::Zero` and `[bool] [UIntPtr]::Zero` are unexpectedly `$true`\r\n\r\n\r\n\r\n\n\n### Proposed technical implementation details (optional)\n\n_No response_",
  "closed_at": null,
  "comments": [],
  "created_at": "2022-07-13T18:12:15Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine",
    "Needs-Triage"
  ],
  "number": 17677,
  "state": "open",
  "title": "Align the behavior of IntPtr / UInPtr with .NET 7's new behavior of becoming numeric types (allowing pointer arithmetic)",
  "updated_at": "2022-10-31T20:59:58Z"
}