{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5001",
  "author": "iSazonov",
  "body": "Related #4357.\r\n\r\nCleanup Json cmdlets from FullCLR code.\r\nRemove ImportJsonDotNetModule.\r\nUpdate Newton.Json version 10.0.2 -> 10.0.3",
  "closed_at": "2017-10-06T16:03:54Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">Is it safe to assume that ImportJsonDotNetModule hasn't been needed for a while?\r\n\r\nI asked in Gitter and only @vors commented:\r\n```\r\nIlya @iSazonov Sep 07 07:16 \r\nI wonder why we explicitly load dll Newtonsoft.Json, Version=7.0.0.0 and why version is 7.0.0?\r\n\r\nSergei Vorobev @vors Sep 07 07:17 \r\n@iSazonov it\u2019s historical reason of the convertfrom-json port for nano server as far as I remember\r\nversion is whatever was latest available at the moment and went thru all the testing scrunities\r\nhardcoded version also can be an attemp to allow modules to load a newer versions and not affect the core cmdlets\r\n```\r\nAlso I guess it could have been because of the problems with loading dlls in the PowerShell Core early port phases.\r\n\r\nI tried to list loaded assemblies and don't see Newton.Json 7.0 - only 10 version was loaded.\r\n\r\n@vors @daxian-dbw Could you please comment too? Is it safe?",
      "created_at": "2017-10-05T06:26:10Z",
      "updated_at": "2017-10-05T06:26:10Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Yes, it's safe to remove it.\r\nBack in NanoServer time, the only way to ship Newton.json.dll is to wrap it into a module (Json.Net) and load that module when the Json cmdlet is in use. Now we don't even have the Json.Net module.\r\n\r\n@iSazonov Can you please change the last commit message to add `[Feature]` to trigger the full test run? Some Json cmdlet tests are marked with `-Tags Feature`.",
      "created_at": "2017-10-05T16:40:57Z",
      "updated_at": "2017-10-05T16:40:57Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "There is one known failure. It failed due to a race condition between the test and the test service, not related to this PR. I will merge this PR.\r\n```\r\n[-] Validate Invoke-RestMethod error with environment proxy set - 'http_proxy' 5.29s\r\n   Expected: {System.Threading.Tasks.TaskCanceledException,Microsoft.PowerShell.Commands.InvokeRestMethodCommand}\r\n   But was:  {}\r\n   at line: 1407 in /Users/travis/build/PowerShell/PowerShell/test/powershell/Modules/Microsoft.PowerShell.Utility/WebCmdlets.Tests.ps1\r\n   1407:         $result.Error.FullyQualifiedErrorId | Should Be \"System.Threading.Tasks.TaskCanceledException,Microsoft.PowerShell.Commands.InvokeRestMethodCommand\"\r\n```",
      "created_at": "2017-10-06T16:03:17Z",
      "updated_at": "2017-10-06T16:03:17Z"
    }
  ],
  "created_at": "2017-10-04T13:31:38Z",
  "number": 5001,
  "state": "closed",
  "title": "Cleanup Json cmdlets",
  "updated_at": "2017-10-06T19:00:51Z"
}