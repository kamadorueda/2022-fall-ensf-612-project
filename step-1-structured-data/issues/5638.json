{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5638",
  "author": "markekraus",
  "body": "CoreFX has moved away from the dependency on OpenSSL, however, the only way to achieve stable feature support on the web cmdlets across macOS versions is to us `brew install curl --with-openssl --with-gssapi`. the web cmdlets will work with out this, however, attempts to use `-SslProtocol` will result in different behavior depending on the version of macOS installed.\r\n\r\nWe should either create our own stable solution that does not rely on 3rd party packages, seek resolution from CoreFX, or block these features on macOS.",
  "closed_at": "2018-05-08T09:07:21Z",
  "comments": [
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "Rather than blocking these features, having something informative presented to the user when they try to use them may be worthwhile.\r\nAlso, if it's possible to look for the Homebrew installed OpenSSL libraries or the MacPorts installed versions, that would make it a lot easier for people to install using the package manager of their preference.",
      "created_at": "2017-12-06T02:07:02Z",
      "updated_at": "2017-12-06T02:07:02Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@kai-h it is possible for the user to chose the libcurl and openssl package using the `DYLD_LIBRARY_PATH` environment variable. the problem is that it is not sufficiently easy to get at what libcul the user is using in PowerShell and to make run time decisions based on that information to toggle features or present meaningful errors. Instead, the user just gets things randomly not working or partially supported. \r\n\r\nFrankly, this is a CoreFX stability problem that bubbles up to the web cmdlets. If we have to go look at the low-level ourselves to correct around CoreFX's stability problems, that leaves us with either rolling our own solution (which is a huge mess), providing an inconsistent user experience (bad UX), or removing the features on macOS until there is some kind of stability in CoreFX.",
      "created_at": "2017-12-06T02:14:59Z",
      "updated_at": "2017-12-06T02:16:59Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "For the 6.0.0 release, I think we just need to add documentation to the macOS install mentioning these libs as pre-requisites to get full functionality",
      "created_at": "2017-12-12T23:11:44Z",
      "updated_at": "2017-12-12T23:11:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Perhaps we should recreate the Issue to remove `curl` mention.",
      "created_at": "2018-05-08T09:02:15Z",
      "updated_at": "2018-05-08T09:02:15Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov this issue is no longer relevant with .NET Core 2.1 and the removal of the libcurl dependency. The `openssl+gssapi` were only relevant to libcurl.",
      "created_at": "2018-05-08T09:06:52Z",
      "updated_at": "2018-05-08T09:06:52Z"
    }
  ],
  "created_at": "2017-12-06T01:52:23Z",
  "number": 5638,
  "state": "closed",
  "title": "macOS Required libcurl+openssl+gssapi for stable Web Cmdlet advanced features",
  "updated_at": "2018-05-08T10:08:59Z"
}