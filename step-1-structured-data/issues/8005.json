{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8005",
  "author": "daxian-dbw",
  "body": "When a terminating error is thrown from the script, `PowerShell.EndInvoke(IAsyncResult)` will throw the exception and there is no way to get the partial results back (output from before the terminating error).\r\n\r\nIt would be good to make it able to return the partial results when a terminating error is thrown.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n$ps = [powershell]::Create()\r\n$ps.AddScript(\"'Hello World'; gcm blah -ea stop; 'yeah'\") > $null\r\n$a = $ps.BeginInvoke()\r\n$b = $Ps.EndInvoke($a)\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nThrow the exception, but at the same time allow the users to get the partial results back.\r\n\r\nActual behavior\r\n---------------\r\n\r\nException is thrown, `$b` is null, and the partial output is lost.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Move @PaulHigin's comment on this issue from https://github.com/PowerShell/PowerShell/pull/7917#discussion_r224256267\r\n\r\n> I feel this is fundamentally broken because if a terminating error occurs (including stop) then any data generated up to that point is lost ... a major sin in my book.\r\n>\r\n> Some ideas to remedy:\r\n>\r\n> - Catch pipeline stop exception and insert into Error stream as non-terminating error. But this doesn't address a general terminating exception.\r\n> - Catch all terminating exceptions (in EndInvoke) and insert into Error stream, marking the error as terminating in some way.\r\n> - Create a new \"EndInvoke\" exception class that is thrown, which wraps the actual terminating error and also provides the output buffer as a parameter.",
      "created_at": "2018-10-11T22:52:28Z",
      "updated_at": "2018-10-11T22:52:28Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Wouldn't that be expected behavior?  A script would work the same way\r\n\r\n```powershell\r\nfunction test { 'Hello World'; gcm blah -ea stop; 'yeah' }\r\n$result = test\r\n$result\r\n# no output\r\n```\r\n\r\nI would think you typically wouldn't want output from a failed invocation, but there's always this overload for when you do\r\n\r\n```powershell\r\n$ps = [powershell]::Create()\r\n$ps.AddScript(\"'Hello World'; gcm blah -ea stop; 'yeah'\") > $null\r\n$inputCollection = [System.Management.Automation.PSDataCollection[psobject]]::new()\r\n$output = [System.Management.Automation.PSDataCollection[psobject]]::new()\r\n$a = $ps.BeginInvoke($inputCollection, $output)\r\n$b = $Ps.EndInvoke($a)\r\n$output\r\n```",
      "created_at": "2018-10-12T02:34:18Z",
      "updated_at": "2018-10-12T02:34:18Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "-> I would think you typically wouldn't want output from a failed invocation\r\n\r\nIt seems to me to be just the opposite.  For a long running script I would want to get all output information occurring before a terminating error.  It would help understand what happened, what may have caused the error, and what state the machine is in.",
      "created_at": "2018-10-15T17:28:51Z",
      "updated_at": "2018-10-15T17:28:51Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> For a long running script I would want to get all output information occurring before a terminating error. It would help understand what happened, what may have caused the error, and what state the machine is in.\r\n\r\nI'm inclined to agree that having output information would be useful in the initial stages of development and testing.  Once the code is in use I think it would be more common to rethrow or change code paths (and if you *do* absolutely need it, the other overload is still available to you).\r\n\r\nThat said, my main concern isn't really about the output and more about changing the behavior of `EndInvoke`. \r\n\r\nSince the output collection is stored internally on the `PowerShellAsyncResult` returned by `BeginInvoke`, would it make sense to instead have a new method that can retrieve the output? e.g.\r\n\r\n```csharp\r\npublic PSDataCollection<PSObject> GetAsyncOutput(IAsyncResult);\r\n````",
      "created_at": "2018-10-15T19:51:20Z",
      "updated_at": "2018-10-15T19:51:20Z"
    },
    {
      "author": "lachlann562",
      "author_association": "NONE",
      "body": "i agree, this is very important to have a method to get the output so far, likewise there is no way to abort and still capture the output. if i issue EndInvoke it will wait for the job. but if i call stop to terminate it, i have no way to get the output up until that point. there should also be a way to get the breaking exception.",
      "created_at": "2019-01-15T19:12:40Z",
      "updated_at": "2019-01-15T19:12:40Z"
    }
  ],
  "created_at": "2018-10-11T22:50:30Z",
  "labels": [
    "WG-Engine",
    "Issue-Discussion"
  ],
  "number": 8005,
  "state": "open",
  "title": "PowerShell.EndInvoke(IAsyncResult) doesn't provide a way for users to get the partial results when a terminating error is thrown",
  "updated_at": "2019-01-15T19:12:40Z"
}