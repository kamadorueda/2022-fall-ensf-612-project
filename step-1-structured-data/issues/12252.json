{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12252",
  "author": "p0W3RH311",
  "body": "in powershell we can use **$ExecutionContext.InvokeCommand** to use different events\r\n\r\n```\r\nPS C:\\> $ExecutionContext.InvokeCommand\r\n\r\nCommandNotFoundAction   :\r\nPreCommandLookupAction  :\r\nPostCommandLookupAction :\r\nLocationChangedAction   :\r\n\r\n```\r\nits usefull  but it will be  great to generalize this to errors.\r\nexample\r\n\r\n```\r\n# execute lambda  if error occur\r\nPS C:\\> $ExecutionContext.InvokeCommand.errorCommandAction\r\n\r\n# execute lambda if error occur with  certain command type\r\nPS C:\\> $ExecutionContext.InvokeCommand.errorCommandbyTypeAction\r\n\r\n```\r\nfor example:\r\n\r\n ```\r\n$ExecutionContext.InvokeCommand.errorCommandbyTypeAction = $nulll\r\n $ExecutionContext.InvokeCommand.errorCommandbyTypeAction = {\r\n    param($cmd, $objsender)\r\n    \r\n    if($cmd.name  -eq 'kill-soomething' -and $cmd.commandtype -eq 'cmdlet' )   {\r\n           // todo\r\n     }\r\n }\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "This idea reminds me of something else I saw a while ago... not sure if I can find it now, but someone brought up the idea of allowing `-ErrorAction` to take a scriptblock to be invoked when an error is recorded, instead of just the usual ActionPreference values.",
      "created_at": "2020-04-03T18:41:32Z",
      "updated_at": "2020-04-03T18:41:32Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "This is similar to the suggestion I made on the RFC for Native Command Exit Error - https://github.com/PowerShell/PowerShell-RFC/pull/88#issuecomment-501386832",
      "created_at": "2020-04-03T20:10:35Z",
      "updated_at": "2020-04-03T20:10:35Z"
    },
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "I believe @jpsnover opened a related issue quite a while back along the lines of allowing the `-*action` parameter to take scriptblocks handlers instead of just enum values.  WRT this proposal, I'm not completely sure of the utility of what's being proposed. In most cases, `try/catch` or `trap` already address the majority of the scenarios. The one that isn't covered is creating a durable handler that survives for the whole session.  This might be interesting in an interactive session but as a global shared binding, it couldn't  be used in a reusable script safely (since more than one script might set it). Also, depending on what you're trying to do, there might be better ways to achieve it. @p0W3RH311  can you provide a practical (useful) example of how you see this being used and what problems it might solve? Thanks.  Oh - and one more clarification - would it work for non-terminating errors, terminating errors or both? Ok two clarifications - what happens after the handler runs - does the script resume, terminate or skip the remaining statements?",
      "created_at": "2020-04-05T23:10:39Z",
      "updated_at": "2020-04-05T23:10:39Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@bpayette I'd imagine whether the script resumes or terminates following the error handler would be based on what the handler does itself. If you throw in the error handler, treat it as terminating. If not, don't.",
      "created_at": "2020-04-06T11:58:15Z",
      "updated_at": "2020-04-06T11:58:15Z"
    },
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32 Currently `trap` allows you to use `break` and `continue` in the `trap` block. For example:\r\n```powershell\r\n trap { write-host \"trapped it\"; continue } 1/0; write-host \"Dude!\"\r\n```\r\nThis will catch the exception, print out the string and then resume execution _after the command that caused the exception._ On the other hand\r\n```powershell\r\n trap { write-host \"trapped it\"; break } 1/0; write-host \"Dude!\"\r\n```\r\nbreaks execution after the problematic command (this is the default behaviour).\r\n\r\n`try/catch` works differently with execution continuing after the `try/catch` statement instead of at the next line.\r\n\r\nThis proposal is yet another way of trapping errors. Without knowing the intended scenarios, it will be hard figuring out the right semantics. For example, is it involved in non-terminating errors or only terminating ones?",
      "created_at": "2020-04-07T22:23:58Z",
      "updated_at": "2020-04-07T22:23:58Z"
    }
  ],
  "created_at": "2020-04-03T16:01:10Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine"
  ],
  "number": 12252,
  "state": "open",
  "title": "use event handler to handle errors ",
  "updated_at": "2020-04-07T22:23:59Z"
}