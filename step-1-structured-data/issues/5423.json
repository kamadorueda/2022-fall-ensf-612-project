{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5423",
  "author": "abock",
  "body": "## Steps to reproduce\r\n\r\n```powershell\r\nWrite-Host $env:PATH\r\n```\r\n\r\n## Expected behavior\r\n\r\n`$env:PATH` should be built from paths defined in files under `/etc/paths.d` (where third parties may define custom paths) and the `/etc/paths` file (where macOS itself defines paths).\r\n\r\n#### Example Paths\r\n\r\n* **/etc/paths** (which is \"owned\" by macOS itself, third parties should not\r\n  write to it):\r\n  ```\r\n  /usr/local/bin\r\n  /usr/bin\r\n  /bin\r\n  /usr/sbin\r\n  /sbin\r\n  ```\r\n* **/etc/paths.d/dotnet**:\r\n  ```\r\n  /usr/local/share/dotnet\r\n  ```\r\n* **/etc/paths.d/mono-commands**:\r\n  ```\r\n  /Library/Frameworks/Mono.framework/Versions/Current/Commands\r\n  ```\r\n\r\n## Actual behavior\r\n\r\n`$env:PATH` contains seemingly hard-coded paths:\r\n\r\n```\r\n/usr/local/microsoft/powershell/6.0.0-beta.9:/usr/bin:/bin:/usr/sbin:/sbin\r\n```\r\n\r\n## Environment data\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.0-beta.9\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.0-beta.9\r\nOS                             Darwin 16.7.0 Darwin Kernel Version 16.7.0: T...\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n## Profile-based implementation\r\n\r\nI have implemented the following in my PowerShell profile which redefines `$env:PATH` as I would expect (don't judge - I've been using PowerShell for about a week \ud83d\ude2c).\r\n\r\n```powershell\r\nif ($IsMacOS) {\r\n  function Append-Path {\r\n    $allPaths = @()\r\n    for ($i = 0; $i -lt $args.length; $i++) {\r\n      $path = $args[$i];\r\n      if (Test-Path -PathType Leaf $path) {\r\n        [IO.File]::ReadAllLines($path) | Foreach-Object {\r\n          $allPaths += $_\r\n        }\r\n      } elseif (Test-Path -PathType Container $path) {\r\n        Get-ChildItem $path | Foreach-Object {\r\n          $allPaths += Append-Path($_.FullName)\r\n        }\r\n      }\r\n    }\r\n    return $allPaths\r\n  }\r\n\r\n  $path = @(\r\n    Get-Command pwsh | `\r\n      Select-Object -ExpandProperty Definition | `\r\n      Split-Path -parent\r\n  )\r\n\r\n  $path += Append-Path \"/etc/paths\" \"/etc/paths.d\"\r\n\r\n  $env:PATH = ($path -join \":\")\r\n\r\n  Remove-Variable -Name path\r\n  Remove-Item -Path Function:\\Append-Path\r\n}\r\n```\r\n\r\n`$env:PATH` is now fully populated as I'd expect when I start a new PowerShell session:\r\n\r\n```powershell\r\n> Write-Host $env:PATH\r\n/usr/local/microsoft/powershell/6.0.0-beta.9:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/share/dotnet:/Library/Frameworks/Mono.framework/Versions/Current/Commands\r\n```\r\n\r\n## Implementation using `path_helper -c`\r\n\r\nThanks to @markekraus for pointing out `path_helper` - we can make this a lot simpler:\r\n\r\n```powershell\r\nif ($IsMacOS -And (Test-Path -PathType Leaf /usr/libexec/path_helper)) {\r\n  function setenv ($variable, $value) {\r\n    [Environment]::SetEnvironmentVariable($variable, $value)\r\n  }\r\n  \r\n  Invoke-Expression $(/usr/libexec/path_helper -c)\r\n\r\n  Remove-Item -Path Function:\\setenv\r\n}\r\n```",
  "closed_at": "2017-11-15T09:47:45Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "[Related acticle](https://unix.stackexchange.com/questions/111496/etc-paths-in-os-x-and-other-unices).",
      "created_at": "2017-11-12T10:45:49Z",
      "updated_at": "2017-11-12T10:45:58Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Hmm, is it too much to ask Apple to add a `-p` option to `path_helper` and have PowerShell call the binary? \r\n\r\nI'm all for having `pwsh` support this, but, I'm somewhat against reinventing it within PowerShell.  If macOS updates their implementation to include something like `~./profile/paths.d/`, then we'd have to stay on top of that change and add it to our own implementation. It makes better sense to me to call out to `path_helper` and either parse or evaluate the result.",
      "created_at": "2017-11-12T14:03:15Z",
      "updated_at": "2017-11-12T14:03:15Z"
    },
    {
      "author": "abock",
      "author_association": "NONE",
      "body": "@markekraus nice, I was completely unaware of `path_helper`. If invoked with `-c` we can use it directly from PowerShell already (we just need to define `setenv` first):\r\n\r\n```powershell\r\nif ($IsMacOS -And (Test-Path -PathType Leaf /usr/libexec/path_helper)) {\r\n  function setenv ($variable, $value) {\r\n    [Environment]::SetEnvironmentVariable($variable, $value)\r\n  }\r\n  \r\n  Invoke-Expression $(/usr/libexec/path_helper -c)\r\n\r\n  Remove-Item -Path Function:\\setenv\r\n}\r\n```",
      "created_at": "2017-11-12T21:50:10Z",
      "updated_at": "2017-11-12T21:50:10Z"
    },
    {
      "author": "thezim",
      "author_association": "CONTRIBUTOR",
      "body": "@markekraus as PowerShell in Windows does pull in `PATH` the same equivalency should be afforded to macOS or any other OS. If you ask `Core` for PATH does it respect `/etc/paths` values?",
      "created_at": "2017-11-13T16:42:57Z",
      "updated_at": "2017-11-13T16:42:57Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@thezim the way `/etc/paths` and `/etc/paths.d/` is implemented is through a call to `path_helper` in `/etc/profile`. so this isn't the OS giving `PATH` to the login shell, its the login shell generating `PATH` on initialization through its profile. There are 2 possible switched to `path_helper`: `-c` and `-s`, `-c` generated a `csh` string that can be evaluated by `csh` to setup the path and likewise `-s` does the same for `sh` and friends. \r\n\r\nWhat I'm suggesting is the best ultimate path is to have Apple add a `-p` which emits a string that can  evaluated by `Invoke-Expression` and then we can implement it similar to the other shells in our own `pwsh` global profile. \r\n\r\nUntil then, I'm suggesting we parse the output of `path_helper -s` or `path_helper -c` rather than in our own code try to duplicate the logic of `path_helper`. That way we can avoid having to race to maintain our implementation when Apple possibly changes to either include new PATH definition locations or remove existing ones. Also, then we wont have to worry about differences that may exist between, say, macOS 10.12 and macOS 10.15, just as bash/sh/csh don't need to worry about such things.\r\n\r\nFor clarity, if you have bash/sh as your login shell and then launch pwsh, the PATH as defined in the parent shell IS respected in PowerShell. `/etc/paths` and `/etc/paths.d/` only auto loads for the login shell. if you were to log in with bash, add a new item to `/etc/paths.d/`, and then launch python, it would not see the new path. Same with pwsh. The reason you see new paths created since login in child sh/bash/csh shells is that they evaluate `/etc/profile` on launch too.\r\n\r\nThe reason pwsh as a login shell doesn't process `/etc/paths` and `/etc/paths.d/`  is because pwsh does not run `/etc/profile` and really couldn't because it is written for other shells that use a completely different language.",
      "created_at": "2017-11-13T17:00:06Z",
      "updated_at": "2017-11-13T17:07:14Z"
    },
    {
      "author": "abock",
      "author_association": "NONE",
      "body": "@markekraus @thezim as I commented/updated the issue for: by invoking `path_helper -c`, nothing needs to be parsed. The C-Shell command is syntactically valid PowerShell - we just need to temporarily define `setenv`:\r\n\r\n```powershell\r\nsetenv PATH \"... paths ...\";\r\n```\r\n\r\nIf anyone wants to lobby Apple for a `-p` option and if they ever implement it, that'd be great, but I certainly don't think PowerShell should block on that.",
      "created_at": "2017-11-14T01:38:29Z",
      "updated_at": "2017-11-14T01:38:29Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@abock I feel like creating a temporary function and then deleting it is a bit hacky. \r\n\r\nIn my experience, Environment variables are used way more heavily in *nix than Windows. With that in mind, I think it probably  makes sense to expose a `Set-EnvironmentVariable` with the `setenv` alias along with a `Get-EnvironmentVariable` with the `getenv` alias.  \r\n\r\n`Set-EnvironmentVariable` would take a `-Name` and `-Value` with `-Name`  as position 0 and `-Value` position 1. This would also help with some confusion about ENV vars only accepting strings as the `-Value` parameter would accept a String.\r\n\r\nWith that in place, the profile can work very similar to the csh: `Test-Path` for `path_helper`, execute with `-c`, and then evaluate with `Invoke-Expression`.\r\n\r\nThis, of course, means exposing 2 new cmdlets that will probably not see much heavy usage outside of macOS and possibly other *nix.  They are kind of redundant given powershell exposes the `$env:` variable prefix. But I still think this is the cleaner solution.\r\n\r\nAnother possibility is to have `setenv` as an alias of `Set-Variable` and some kind of logic to set an environment variable when the `setenv` alias is called. I'm not real thrilled with this solution. I dislike command behavior changing based on `InvocationName`. This is just as \"hacky\" to me as creating a temporary function and removing it.\r\n\r\n",
      "created_at": "2017-11-14T09:53:58Z",
      "updated_at": "2017-11-14T09:53:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If we run PowerShell from Bash why we don't get PATH extended by `path_helper` ?",
      "created_at": "2017-11-14T12:42:08Z",
      "updated_at": "2017-11-14T12:42:08Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov We do:\r\n\r\nIf you have something already in `/etc/paths` or `/etc/paths.d/` when you started your bash session, then PATH will be set with those settings and `pwsh` will receive them.\r\n\r\nIf you log in with bash and then add a file under  `/etc/paths.d/` with a new path and then start `pwsh` (without having first exited and relaunched bash), then you will *not* see the new path in pwsh.\r\n\r\nIf you log in with bash, add a file under  `/etc/paths.d/` with a new path, exit bash, log in with bash again, start pwsh you will see the new path.\r\n\r\nIf you log in with bash, add a file under  `/etc/paths.d/` with a new path, launch a child bash shell, and then start pwsh in the child bash shell you will see the new path.\r\n\r\nif you set pwsh as your login shell and start a console or ssh to the node, none of the paths in  `/etc/paths` or `/etc/paths.d/` are loaded (because pwsh is not running `path_helper`)\r\n\r\nSo long as PATH is set correctly before `pwsh` is launched it will work. The problem is that pwsh will not respect changes made to `/etc/paths` or `/etc/paths.d/` since the parent shell was launched and will also not respect them when `pwsh` is the login shell. ",
      "created_at": "2017-11-14T12:54:21Z",
      "updated_at": "2017-11-14T12:55:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@markekraus Thanks for clarify! \r\n\r\nIt is standard bevavior for environment variables on all platforms. All processes inherit them this way.\r\n\r\nAlso I believe we still never consider PowerShell as login shell on Unix because of incompatibility. /cc @mklement0 ",
      "created_at": "2017-11-14T13:35:48Z",
      "updated_at": "2017-11-14T13:36:00Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov \r\n\r\n> Also I believe we still never consider PowerShell as login shell on Unix because of incompatibility\r\n\r\nWell, if you are like me and don't run into native globing issues, it makes an excellent login shell. :)",
      "created_at": "2017-11-14T13:57:27Z",
      "updated_at": "2017-11-14T13:57:27Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@markekraus: Good analysis; clarification:\r\n\r\n> The reason you see new paths created since login in child sh/bash/csh shells is that they evaluate /etc/profile on launch too.\r\n\r\n\r\nPOSIX-compatible shells such as `bash` (including `bash` in disguise on macOS, `sh`)  and `ksh` (but _not_ `zsh`) source `/etc/profile` _only_ when (effectively) launched as a _login_ shell, with option `-l` or via `login` (see below).\r\nThis happens _implicitly_ when `Terminal.app`, the macOS terminal program, creates a new tab / window, but it doesn't happen when you, say, invoke `bash` (without `-l`) from an existing shell.\r\nThis behavior is specific to macOS: terminal programs on Linux create _non-login_ shells by default - see https://stackoverflow.com/a/23233967/45375\r\n\r\n`pwsh -l` would actually break (PowerShell neither knows `-l`, nor does it know the distinction between a login shell and a(n interactive) non-login shell), but `login`, which is what `Terminal.app` uses, employs a different, convention-based technique to signal to the shell invoked that it should consider itself a _login_ shell: it places the name of the shell preceded by `-` in the first argv argument (`$0`, in POSIX terms); e.g., `-bash`.\r\nThis is clearly something that PowerShell can - and does - ignore.\r\n\r\nArguably, though, PowerShell _should_ pay attention to that, and evaluate `/usr/libexec/path_helper` output only then.\r\n\r\nNot sure if this is _technically_ feasible: both `[environment]::CommandLine` and `[environment]::GetCommandLineArgs()` seem to only reflect the _PowerShell DLL name_ from within PowerShell; e.g., `/usr/local/microsoft/powershell/6.0.0-beta.9/pwsh.dll`.\r\n\r\n---\r\n\r\nAs for a simpler way to apply `/usr/libexec/path_helper` output, using PowerShell code, without requiring ephemeral functions:\r\n\r\n```powershell\r\nif ($IsMacOs) { $env:PATH=((/usr/libexec/path_helper) -split '\"')[1] }\r\n```\r\n\r\nNote that this assumes that there are no _escaped, embedded_ `\"` chars., but that's generally a reasonable assumption (which @abock's function-based,  `/usr/libexec/path_helper -c` relies on, too).\r\n\r\nArguably, this code belongs in `$profile.AllUsersAllHosts` - ideally, however, with a conditional that only applies it if `$0` starts with `-`.\r\n\r\n---\r\n\r\nMore generally, https://github.com/PowerShell/PowerShell/issues/975#issuecomment-331049792 discusses how PowerShell might fit into the world of POSIX-compatible shells.\r\n\r\n ",
      "created_at": "2017-11-14T21:32:53Z",
      "updated_at": "2017-11-14T21:32:53Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Hmm what is the mechanism that is making child bash sells pickup new additions to /etc/paths.d/ since login if it is not coming from `/etc/profile`?",
      "created_at": "2017-11-14T21:43:40Z",
      "updated_at": "2017-11-14T21:43:40Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "_Child_ `bash` shells do _not_ pick up new additions (unless you invoke them with `-l` or via `login`).\r\n\r\n_New terminal tabs / windows_, however, do - because they're invoked via `login`, as described.",
      "created_at": "2017-11-14T21:54:36Z",
      "updated_at": "2017-11-14T21:54:36Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "erm.. then something is off in my environment?? Child bash shells are picking up the changes. This is why I assumed the /etc/profile is being run (none of the other profile files have anything dealing with paths). I haven't done anything fancy with this mac since it was re-imaged and upgraded to sierra.\r\n\r\nrepro:\r\n\r\n1. ssh to macOS\r\n1. add new path to /etc/paths.d/newpath\r\n1. `echo $PATH` to verify path is not shown\r\n1. run `bash` with no arguments\r\n1. `echo $PATH` new path shown.\r\n\r\n*shrugs. I'll admit I have almost no clue what I'm doing in macOS \ud83d\ude04 It is quite possible I have done something wrong along the way. ",
      "created_at": "2017-11-14T22:02:06Z",
      "updated_at": "2017-11-14T22:02:06Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "`ssh` introduces additional behaviors, so where you `ssh` _from_ may matter.\r\n\r\nI just tried from a Ubuntu 16.04 system, and I do _not_ see the behavior you're describing - so: where _are_ you SSH-ing from?\r\n\r\nAnd, _without_ `ssh` in the picture: do you see behavior that differs from what I've described?",
      "created_at": "2017-11-15T00:30:31Z",
      "updated_at": "2017-11-15T00:30:31Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think we can close the Isuue as #975 dup.",
      "created_at": "2017-11-15T03:56:42Z",
      "updated_at": "2017-11-15T03:56:42Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov agreed. this looks like a dup.\r\n\r\n@mklement0 Not sure what the cause was but after re-imaging and upgrading again I can't repro it so there must have been something special about that environment. *shrugs",
      "created_at": "2017-11-15T09:47:45Z",
      "updated_at": "2017-11-15T09:47:45Z"
    }
  ],
  "created_at": "2017-11-11T20:00:06Z",
  "labels": [
    "Resolution-Duplicate",
    "OS-macOS",
    "WG-Interactive-Console",
    "Issue-Discussion"
  ],
  "number": 5423,
  "state": "closed",
  "title": "PowerShell should respect /etc/paths.d/* and /etc/paths on macOS",
  "updated_at": "2017-11-15T09:47:46Z"
}