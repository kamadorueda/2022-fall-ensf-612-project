{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8307",
  "author": "powercode",
  "body": "## PR Summary\r\n\r\nThis PR adds an interface \r\n```csharp\r\n    /// <summary>\r\n    /// A type specified by the <see cref=\"OutputTypeProviderAttribute\"/> must implement this interface.\r\n    /// </summary>\r\n    public interface IOutputTypeProvider\r\n    {\r\n        /// <summary>\r\n        /// Gets output types that the function annotated with the corresponding <see cref=\"OutputTypeProviderAttribute\"/> can produce.\r\n        /// </summary>\r\n        PSTypeName[] GetOutputTypes(CommandAst commandAst, PSTypeName[] pipelineInputTypes);\r\n    }\r\n```\r\n\r\nAnd an attribute, `OutputTypeProviderAttribute` that works very similar to ArgumentCompleterAttribute, but for output types.\r\n\r\n\r\nThe main use case is for wrapping native commands, like `docker`, or `kubectl`. I.E. programs that has lots of subcommands, each producing different output. \r\n\r\nThis mechanism enables writing a function `docker`, that delegates to docker.exe, but it can be annotated with the `OutputTypeProviderAttribute` and specify a class that provides the output types for each sub command (given that the implementer also provides a parser for the sub command.\r\n\r\nThis enables us to not force people to learn a new set of commands, and a quite nice workflow, were parsers can be added as needed over time.\r\n\r\nA complete native command wrapper would consist of \r\n* A tab completer\r\n* An OutputTypeProvider (this PR)\r\n* Parsers to project the string output to structured output\r\n* Formatters for the structured objects.\r\n\r\nThe other parts already have working solutions, even if we could make life easier  for the implementers by providing helper classes.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [ ] Not Applicable\r\n    - **OR**\r\n    - [x] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed - Issue link:\r\n- **Testing - New and feature**\r\n    - [ ] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [ ] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2018-12-30T14:26:18Z",
  "comments": [
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "The CI errors seems unrelated to my changes.",
      "created_at": "2018-11-19T09:00:39Z",
      "updated_at": "2018-11-19T09:00:39Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "There is another thing that needs to change for this to work well, and that is to be able to add an argumentcompleter to the param block.\r\n\r\n",
      "created_at": "2018-11-19T13:02:36Z",
      "updated_at": "2018-11-19T13:02:36Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@powercode how do you mean? Like this?\r\n```powershell\r\nfunction Do-Thing {\r\n  [CmdletBinding()]\r\n  [ArgumentCompleter( {\r\n      # stuff\r\n  } )]\r\n  param($a, $b)\r\n  #stuff \r\n}\r\n```\r\n\r\nBecause you can already add it to individual parameters. How would adding it to the param block as a whole be used? Isn't that simply a better place for `dynamicparam{}`?\r\n",
      "created_at": "2018-11-19T13:22:35Z",
      "updated_at": "2018-11-19T13:23:31Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 The point is to be able to create a function that wraps a native command, without having opinions on parameters. Hence I cannot add parameters, because the default mechanisms will kick in for completion etc.\r\n\r\nWith \r\n```powershell \r\nfunction X{\r\n   [OutputTypeGenerator([Gen])]\r\n   [ArgumentCompleter([Comp])]\r\n   param()\r\n\r\n   native.exe | parseOutput\r\n} \r\n```\r\n\r\nwe should be able to go all the completion without PowerShell messing with us.\r\n\r\nI basically want the completer of a native command, but on a function :)\r\n",
      "created_at": "2018-11-19T22:54:20Z",
      "updated_at": "2018-11-19T22:54:20Z"
    },
    {
      "author": "stale[bot]",
      "author_association": "NONE",
      "body": "This PR has been automatically marked as stale because it has not had activity in the last 30 days. It will be closed if no further activity occurs within 10 days.\nThank you for your contributions.\nCommunity members are welcome to grab these works.\n",
      "created_at": "2018-12-20T02:20:52Z",
      "updated_at": "2018-12-20T02:20:52Z"
    },
    {
      "author": "stale[bot]",
      "author_association": "NONE",
      "body": "This PR has be automatically close because it is stale. If you wish to continue working on the PR, please first update the PR, then reopen it.\nThanks again for your contribution.\nCommunity members are welcome to grab these works.\n",
      "created_at": "2018-12-30T14:26:17Z",
      "updated_at": "2018-12-30T14:26:17Z"
    }
  ],
  "created_at": "2018-11-18T21:32:06Z",
  "number": 8307,
  "state": "closed",
  "title": "OutputTypeProvider - a way to add output types for a fuction at runtime.",
  "updated_at": "2019-01-17T04:26:44Z"
}