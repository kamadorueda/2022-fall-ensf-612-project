{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11817",
  "author": "PrzemyslawKlys",
  "body": "While you're at improving ForEach-Object -Parallel please address this:\r\n\r\nDoesn't work\r\n\r\n```powershell\r\n$OhMy = 'Test'\r\n(1..100) | ForEach-Object -Parallel {\r\n    $Test = $Using:OhMy\r\n    (1..50) | ForEach-Object -Parallel {\r\n        $Test5 = $Using:Test\r\n    }\r\n}\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/15063294/74090909-8d638d80-4ab1-11ea-8f60-f55be0ae2792.png)\r\n\r\n\r\nWorks:\r\n```powershell\r\n$OhMy = 'Test'\r\n$Test = $null\r\n(1..100) | ForEach-Object -Parallel {\r\n    $Test = $Using:OhMy\r\n    (1..50) | ForEach-Object -Parallel {\r\n        $Test5 = $Using:Test\r\n    }\r\n}\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Just to make it more explicit what you're experiencing: there is an _inconsistency_ in that:\r\n\r\n* _nesting_ of `$using:` references _is_ effectively supported\r\n\r\n* but the variable-existence check behaves as if it weren't.\r\n\r\n```powershell\r\n# Fails, because the `$using:` check looks for a $test variable in the *script* scope, \r\n# not the *enclosing one*.\r\n1..2 | % -Parallel { $test = 'actual';  % -parallel { $using:test } }\r\n```\r\n\r\n```powershell\r\n# By formally satisfying the script-scope check, \r\n# the command is allowed to run, and the enclosing scope's value *is* used.\r\nPS> $test = 'dummy'; 1..2 | % -Parallel { $test = 'actual';  % -parallel { $using:test } }\r\nactual\r\nactual\r\n```\r\n\r\n",
      "created_at": "2020-02-09T23:02:54Z",
      "updated_at": "2020-02-09T23:02:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@PaulHigin Could you please look the issue?",
      "created_at": "2020-02-10T03:19:38Z",
      "updated_at": "2020-02-10T03:19:38Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "This is by design.  The `$using:` keyword is effective only for variables defined in the current scope.  The help document should be updated to make this clear.",
      "created_at": "2020-02-10T15:37:11Z",
      "updated_at": "2020-02-10T15:37:11Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I believe the request is that the design be _improved_ to accommodate managing nested jobs more easily from a script, no? \ud83d\ude42 ",
      "created_at": "2020-02-10T18:03:11Z",
      "updated_at": "2020-02-10T18:03:11Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "I wonder if there are any real world cases for running foreach -parallel nested like this.  If so then I question whether it is being used effectively.  This seems like a nice to have feature.  But I'll add the committee review tag so it can be considered.",
      "created_at": "2020-02-10T18:55:32Z",
      "updated_at": "2020-02-10T18:55:32Z"
    },
    {
      "author": "PrzemyslawKlys",
      "author_association": "NONE",
      "body": "I did use it - that's why I know about it.\r\n\r\nhttps://github.com/EvotecIT/Graphimo/blob/master/Examples/Example-DeletingCalendarEvents.ps1\r\n\r\nBasically I was calling MSGraph and iterating all users in Office 365 and all their calendars (each user having 3-20 calendars) and each calendar having 10k to 50k events and deleting those I didn't want. I couldn't easily overcome the issue of Graph by doing proper reconnection to avoid timeout as I am not so proficient with it. Instead, I just initiated new sessions for each calendar, rather than per user. \r\n\r\nIf it's supported, and it works and the only negative thing about it is the need to define a variable at the top I would like it to be fixed - as surely it's better to define variable only if it's necessary.\n\n<blockquote><img src=\"https://avatars2.githubusercontent.com/u/15376314?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/EvotecIT/Graphimo\">EvotecIT/Graphimo</a></strong></div><div>Contribute to EvotecIT/Graphimo development by creating an account on GitHub.</div></blockquote>",
      "created_at": "2020-02-10T19:04:38Z",
      "updated_at": "2020-02-10T19:04:40Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "This may be too naive a solution, but setting `searchNestedScriptBlocks ` to `false` in the following code at least gets rid of the overzealous variable-existence check (which is the real problem here).\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/f6a897331702a8f11f7447d3a77b46fd21286a5d/src/System.Management.Automation/engine/runtime/ScriptBlockToPowerShell.cs#L176-L183",
      "created_at": "2020-02-10T20:01:11Z",
      "updated_at": "2020-02-10T20:01:11Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "Sorry, I just now spent time looking into this more closely.  I thought this was passing one scope variable to other scopes.  But I agree that this should work:\r\n\r\n```powershell\r\n$Test = \"Test1\"\r\n1..2 | % -parallel {\r\n  \"Here is first: $using:Test\"\r\n  $Test2 = \"Test2\"\r\n  1..2 | % -parallel {\r\n    \"Here is second: $using:Test2\"\r\n  }\r\n}\r\n```\r\nAnd yes, I think @mklement0 fix is probably correct for Foreach-Object -Parallel case.  The using variable map should only apply to current scriptblock and not nested scriptblocks.  This may be an easy fix.",
      "created_at": "2020-02-10T22:34:27Z",
      "updated_at": "2020-02-10T22:34:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I wonder if there are any real world cases for running foreach -parallel nested like this.\r\n\r\nLanguage allows this. So options are:\r\n- explicitly block the nested scenario\r\n- fix the scenario.\r\n\r\nThis also brings general question: if user create nested job in a job is this supported?",
      "created_at": "2020-02-11T04:01:59Z",
      "updated_at": "2020-02-11T04:01:59Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov \r\nThere are a lot of things in PowerShell language that can cause trouble or is not necessarily good to use in particular cases.  I don't think restricting the language is the right answer, but enlightening users about pros and cons of patterns is much better.\r\n\r\nRunning nested ForEach -Parallel can greatly magnify resource usage and end up being far slower than expected, hence my question.  But as long as users are aware, nested foreach -Parallel may be an optimal solution.  It sounds like @PrzemyslawKlys has a legitimate need for the pattern.\r\n\r\nAnyway, I was in a hurry and misunderstood this issue (my bad and I do apologize), and this is indeed a bug.  I am working on a fix.",
      "created_at": "2020-02-11T15:58:25Z",
      "updated_at": "2020-02-11T15:58:25Z"
    }
  ],
  "created_at": "2020-02-09T21:33:07Z",
  "labels": [
    "Issue-Question",
    "WG-Cmdlets-Core",
    "Documentation Needed"
  ],
  "number": 11817,
  "state": "open",
  "title": "For ForEach-Object -Parallel, nested loops improvment",
  "updated_at": "2020-02-11T15:58:26Z"
}