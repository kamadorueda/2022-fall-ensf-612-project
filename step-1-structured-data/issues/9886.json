{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9886",
  "author": "Graham-Beer",
  "body": "# Summary of the new feature/enhancement\r\nThe C# language provides a convenient syntax that ensures the correct use of IDisposable objects. I believe this would be a great addition to the PowerShell language, as the 'Using statement' simplifies the code that you have to write to create a resource and then finally clean up the object. \r\n\r\nWithout the using statement you are required to ensure that Dispose() is called, then followed by the Close() method. By implementing the 'Using statement' you can assume that all kinds of streams are getting closed. \r\n\r\nI would like to see the PowerShell language use a similar syntax to C#, which would be `using (expression) statement`.\r\n PowerShell does make use of the `$using` variable, but I don't believe adding the 'using' keyword will cause any issues. \r\n\r\n```\r\nusing ($read = [system.io.StreamReader]::new('C:\\tmp\\test.txt')) {\r\n    $read.Read()\r\n}\r\n```\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Come to think of it, I think this has come up in discussions previously, where the idea that this could actually be a cmdlet as well surfaced. Compiled cmdlets already have the capability to properly implement disposable features, after all.\r\n\r\nDo you think a cmdlet would be better than a keyword? It might be possible to have it be pipeline-capable if it's a cmdlet, which could be interesting, depending on implementation, and cmdlets are a little more flexible than keywords...\r\n\r\nAlso, if it's a cmdlet we could package it in a separate module and put it on the PSGallery, too, so even PS5.1 could make use of it as well. \ud83e\udd14 ",
      "created_at": "2019-06-13T14:48:40Z",
      "updated_at": "2019-06-13T14:48:40Z"
    },
    {
      "author": "Graham-Beer",
      "author_association": "NONE",
      "body": "An interesting theory creating as a cmdlet. I'm still feeling its nicer if a keyword then it would be part of the language and get utilized more.",
      "created_at": "2019-06-13T14:58:24Z",
      "updated_at": "2019-06-13T14:58:24Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I think that makes sense. We do have the unfortunate consequence there of it being unavailable on downlevel powershell versions, though. \r\n\r\nAlso, keywords tend to be a bit less discoverable than cmdlets in general; keywords don't tab-complete, but functions and cmdlets do, and they're a bit easier to find in the help documents as well -- most language features are documented in a slew of `about_*` help topics and there can be some topics that cover multiple things, whereas each cmdlet gets its own discrete topic.\r\n\r\nI'm not against a keyword, despite all that. Keywords have a really nice no-nonsense simplicity about them that can be really nice to work with. Cmdlets can tend towards feature creep, among other things, and tend to be a bit slower to operate.\r\n\r\nI'm not really sure which approach is really better. Either way, though, we should have this implemented in some form or another. :smile:",
      "created_at": "2019-06-13T15:11:26Z",
      "updated_at": "2019-06-13T15:11:26Z"
    },
    {
      "author": "Graham-Beer",
      "author_association": "NONE",
      "body": "I think there is a good argument for both to be fair. I do get the backward compatibility but maybe it also encourages the use of PS 7 with shiny new features! Interesting to hear other peoples thoughts on this as well.  ",
      "created_at": "2019-06-13T15:18:15Z",
      "updated_at": "2019-06-13T15:18:15Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "It would be difficult to do `using` as a cmdlet without losing some safety.  There's many situations where a pipeline stop exception could be thrown before the cmdlet received the `IDisposable`.\r\n\r\nLast time this came up, @BrucePay suggested this syntax:\r\n\r\n```powershell\r\nUse-Object { [SomeDisposable]::new() } {\r\n    $PSItem.DoSomethingWithDisposable()\r\n}\r\n```\r\n\r\nThat could work, but I'd still be worried that a pipeline stop would be triggered before the cmdlet finished invoking the script block (that's assuming that `MshCommandRuntime.WriteObject` checks for pipeline stops, which I *think* it does). If it was a keyword then the compiler could generate a safer expression.  It also just doesn't look as nice imo for whatever that's worth.\r\n\r\n> Also, keywords tend to be a bit less discoverable than cmdlets in general\r\n\r\neh... if you know enough to know that something needs to be disposed, you probably know about `using`.",
      "created_at": "2019-06-13T17:16:53Z",
      "updated_at": "2019-06-13T17:19:20Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@Graham-Beer The `using` discussion comes every couple of years and then fades away. I suspect this is due to the fact that there really haven't a been lot of scenarios where you _need_ it in PowerShell and the few where it's required can be handled with try/finally. Otherwise the pipeline/cmdlets take care of disposing the resources for you. As a consequence, it has been hard to sustain much energy around this issue. I'm not against the idea (in fact I was quite keen on it at one point) but currently it's just kind of meh. So if you have some new scenarios where `using` is critical, please share them. Thanks!",
      "created_at": "2019-06-13T21:24:54Z",
      "updated_at": "2019-06-13T21:24:54Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": ">  just kind of meh\r\n\r\nThat sums it up nicely for me as well.",
      "created_at": "2019-06-13T21:44:10Z",
      "updated_at": "2019-06-13T21:44:10Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "Does a `finally` block run in a cmdlet/function even in the case of a pipeline stop exception?\r\n\r\nAs for the lack of sustained interest... I think the lack of decent `using` solution makes streams in PS awkward and discourages their use. I'm a HUGE fan of streams and have always felt they are a missed opportunity in PS. I have used them heavily in PHP, C#, and Python. Because they are clunky in PS, I will either `Add-Type` some C# in or write a library in C# to handle it for me. In a pinch I can use a try/finally, but it starts to get unruly and painful to read when you have multiple `IDisposable`s to work with at once.\r\n\r\nhere's an example from an earlier issue:\r\n\r\n```powershell\r\nfunction Get-RemoteCertificate {\r\n  [CmdletBinding()]\r\n  [OutputType([System.Security.Cryptography.X509Certificates.X509Certificate])]\r\n  param (\r\n    [Parameter(\r\n      Mandatory,\r\n      ValueFromPipeline\r\n    )]\r\n    [ValidateNotNull()]\r\n    [Uri]\r\n    $Uri\r\n  )\r\n  process {\r\n    try {\r\n      $TcpClient = [System.Net.Sockets.TcpClient]::new($Uri.Host, $Uri.Port)\r\n      try {\r\n        $SslStream = [System.Net.Security.SslStream]::new($TcpClient.GetStream())\r\n        $SslStream.AuthenticateAsClient($Uri.Host)\r\n        $SslStream.RemoteCertificate\r\n      } finally {\r\n        $SslStream.Dispose()\r\n      }\r\n    } finally {\r\n      $TcpClient.Dispose()\r\n    }\r\n  }\r\n}\r\n```",
      "created_at": "2019-06-13T23:33:29Z",
      "updated_at": "2019-06-13T23:33:29Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@markekraus \r\n\r\n> Does a finally block run in a cmdlet/function even in the case of a pipeline stop exception?\r\n\r\nYes, with some caveats.  If you place the assignment inside the `try`, there could be an exception or stop prior to the assignment.  If this happens in the `try`, the `finally` could still fire, potentially calling `Dispose` on an object from a previous scope.  If you place the assignment outside the `try`, a stop could occur before getting to the `try` block.\r\n\r\nSo I've taken to a pattern like this:\r\n\r\n```powershell\r\n$client = $null\r\ntry {\r\n    $client = [TcpClient]::new($uri.Host, $uri.Port)\r\n} finally {\r\n    if ($null -ne $client) {\r\n        $client.Dispose()\r\n    }\r\n}\r\n```\r\n\r\nIt's not pretty, but it's safe.",
      "created_at": "2019-06-13T23:45:37Z",
      "updated_at": "2019-06-13T23:45:53Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "oof... that's even more painful.",
      "created_at": "2019-06-13T23:58:43Z",
      "updated_at": "2019-06-13T23:58:43Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I have a PR in the works (#9900) to make this much easier for pipeline cmdlets (esp. those that need to keep the object around for the entire `process{}` sequence and only dispose it at the very end), but that scoping issue may well still be a bit of a problem. Not sure there's a neat solution to that one. \ud83e\udd14 \r\n\r\nThat's honestly one pretty clear case for a using keyword, I must say...",
      "created_at": "2019-06-14T00:12:21Z",
      "updated_at": "2019-06-16T15:18:33Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "If only we had `?.` then your `finally` statement becomes a bit more simpler `$client?.Dispose()`.  Man, love me some C#.  :-)",
      "created_at": "2019-06-14T00:37:05Z",
      "updated_at": "2019-06-14T00:37:05Z"
    },
    {
      "author": "Graham-Beer",
      "author_association": "NONE",
      "body": "I quite like the C# syntax of ?, @rkeithhill. How do we push this topic idea forward? ",
      "created_at": "2019-06-20T11:16:43Z",
      "updated_at": "2019-06-20T11:16:43Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I think there may be an existing issue for it, but if not create one -- if there already is one, add a comment.",
      "created_at": "2019-06-20T11:48:13Z",
      "updated_at": "2019-06-20T11:48:13Z"
    },
    {
      "author": "Cirzen",
      "author_association": "NONE",
      "body": "If there is an open issue for the `?.` / safe navigation operator, could you link it here please? I would very much like to upvote!",
      "created_at": "2019-07-08T16:37:57Z",
      "updated_at": "2019-07-08T16:37:57Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@Cirzen #3240 includes it.",
      "created_at": "2019-07-08T16:59:22Z",
      "updated_at": "2019-07-08T16:59:22Z"
    },
    {
      "author": "simonsabin",
      "author_association": "NONE",
      "body": "Any time one ends up in the world of .net objects not having clean disposal is a pain. This is especially bad for file manipulation when file handles don't get disposed of.  I needed to get the file entries in a zip file and resorting to system.io.compression and streams results in lots of ugly try catch finally and disposing",
      "created_at": "2022-04-12T09:44:21Z",
      "updated_at": "2022-04-12T09:44:21Z"
    }
  ],
  "created_at": "2019-06-13T14:38:27Z",
  "number": 9886,
  "state": "open",
  "title": "PS implementation of the C# Using statement",
  "updated_at": "2022-04-12T17:33:50Z"
}