{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7482",
  "author": "powercode",
  "body": "## PR Summary\r\n\r\nChanges to the `JsonObject` class to make conversions from json to `PSObject`s faster.\r\n\r\nThree main changes:\r\nConvert from JArray directly to object instead of creating a list and do list.ToArray().\r\nDo not use PSObject to check for existing members, since that is a very slow and allocation heavy (sic!)  code path.\r\nPreAllocation the members in PSObject by using the newly added constructor accepting an initial member count.\r\n\r\nThis amounts to a speed-up in the order of 7x.\r\n\r\nCmdlets that benefit are `Convertfrom-Json` and `Invoke-RestMethod`. \r\n\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed - Issue link:\r\n- **Testing - New and feature**\r\n    - [x] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [ ] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2018-08-10T17:28:16Z",
  "comments": [
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "```powershell\r\n$json = @'\r\n{\r\n    \"id\": \"string\",\r\n    \"data\": [\r\n        {                       \r\n        \"accountId\": 0,\r\n        \"productId\": 0,\r\n        \"resourceLocationId\": 0,\r\n        \"consumedServiceId\": 0,\r\n        \"departmentId\": 0,\r\n        \"accountOwnerEmail\": \"string\",\r\n        \"accountName\": \"string\",\r\n        \"serviceAdministratorId\": \"string\",\r\n        \"subscriptionId\": 0,\r\n        \"subscriptionGuid\": \"string\",\r\n        \"subscriptionName\": \"string\",\r\n        \"date\": \"2017-04-27T23:01:43.799Z\",\r\n        \"product\": \"string\",\r\n        \"meterId\": \"string\",\r\n        \"meterCategory\": \"string\",\r\n        \"meterSubCategory\": \"string\",\r\n        \"meterRegion\": \"string\",\r\n        \"meterName\": \"string\",\r\n        \"consumedQuantity\": 0,\r\n        \"resourceRate\": 0,\r\n        \"Cost\": 0,\r\n        \"resourceLocation\": \"string\",\r\n        \"consumedService\": \"string\",\r\n        \"instanceId\": \"string\",\r\n        \"serviceInfo1\": \"string\",\r\n        \"serviceInfo2\": \"string\",\r\n        \"additionalInfo\": \"string\",\r\n        \"tags\": \"string\",\r\n        \"storeServiceIdentifier\": \"string\",\r\n        \"departmentName\": \"string\",\r\n        \"costCenter\": \"string\",\r\n        \"unitOfMeasure\": \"string\",\r\n        \"resourceGroup\": \"string\"\r\n        }\r\n    ],\r\n    \"nextLink\": \"string\"\r\n}\r\n'@\r\n$json = 1..1000 | % { $json }\r\n$json = '[' + ($json -join ',') + ']'\r\nMeasure-Command {$Json | ConvertFrom-Json } | % TotalMilliseconds\r\n````\r\n\r\nRuns in 497.8867 miliseconds on the most recent build in this PR vs 1104.9008 ms in preview.4 and 318.1642ms in 5.1. Much better!! Thanks @powercode ",
      "created_at": "2018-08-08T13:43:15Z",
      "updated_at": "2018-08-08T13:43:15Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Did you test that with a crossgen build?\r\n\r\nI know numbers! I have a lot of numbers. A lot of people don't know that, but I have the best numbers!\r\n\r\nSame code but with 20000 iterations - I get 27091 ms on 6.0.3 and 3635 ms on the PR.\r\n\r\nCurious about the difference.\r\nMy crossgen:ed build has 177 ms for 1000 iterations vs 1312 ms on 6.0.3.\r\n\r\n```powershell\r\nStart-PSBuild -Crossgen -Configuration release\r\n```",
      "created_at": "2018-08-08T13:50:16Z",
      "updated_at": "2018-08-08T13:58:23Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Good perf work @powercode! The changes look good to me in general. Left a few minor comments.",
      "created_at": "2018-08-08T17:58:42Z",
      "updated_at": "2018-08-08T17:58:42Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "I looked a bit at the difference in perf to Windows PowerShell. \r\n\r\n`Newtonsoft.Json.JsonConvert.DeserializeObject` is slower than `System.Web.Script.Serialization.JavaScriptObjectDeserializer`. Looking at the code to see if I can figure out what the root cause is.",
      "created_at": "2018-08-08T18:36:03Z",
      "updated_at": "2018-08-08T18:36:03Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "Regarding the `as` controversy: how about using a type switch on the JTokens?\r\n\r\n```csharp\r\n                switch (entry.Value)\r\n                {\r\n                    case JArray list:\r\n                    {\r\n                        // Array\r\n                        var listResult = PopulateHashTableFromJArray(list, out error);\r\n                        if (error != null)\r\n                        {\r\n                            return null;\r\n                        }\r\n\r\n                        result.Add(entry.Key, listResult);\r\n                        break;\r\n                    }\r\n                    case JObject dic:\r\n                    {\r\n                        // Dictionary\r\n                        var dicResult = PopulateHashTableFromJDictionary(dic, out error);\r\n                        if (error != null)\r\n                        {\r\n                            return null;\r\n                        }\r\n\r\n                        result.Add(entry.Key, dicResult);\r\n                        break;\r\n                    }\r\n                    case JValue value:\r\n                    {\r\n                        result.Add(entry.Key, value.Value);\r\n                        break;\r\n                    }\r\n                }\r\n```\r\n\r\nDoesn't that clearly capture what we want to express?\r\n\r\n",
      "created_at": "2018-08-10T10:23:55Z",
      "updated_at": "2018-08-10T10:24:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Good catch! I agree with using a type switch.",
      "created_at": "2018-08-10T11:54:37Z",
      "updated_at": "2018-08-10T11:54:37Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov  I'm getting code factor errors on \r\n\r\n```csharp\r\n\r\nswitch (x)\r\n{\r\n    case 1:\r\n    {\r\n        break;\r\n    }\r\n    case 2:\r\n    {\r\n        break;\r\n    }\r\n}\r\n```\r\n\r\nIt seems to want it like \r\n```csharp\r\nswitch (x)\r\n{\r\n    case 1:\r\n    {\r\n        break;\r\n    }\r\n\r\n    case 2:\r\n    {\r\n        break;\r\n    }\r\n}\r\n```\r\n\r\n\r\nThat feels strange. Do you know if it is intentional or a side effect?\r\n",
      "created_at": "2018-08-10T12:04:47Z",
      "updated_at": "2018-08-10T12:05:02Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@powercode I believe that spacing rule is intentional. It is easier to read code when there is some white space separating the end of one code block and the beginning of another.",
      "created_at": "2018-08-10T13:05:34Z",
      "updated_at": "2018-08-10T13:05:34Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@markekraus Thanks for review!",
      "created_at": "2018-08-10T13:39:19Z",
      "updated_at": "2018-08-10T13:39:19Z"
    }
  ],
  "created_at": "2018-08-08T10:36:57Z",
  "number": 7482,
  "state": "closed",
  "title": "Improve performance on json to psobject conversion",
  "updated_at": "2019-03-29T22:49:10Z"
}