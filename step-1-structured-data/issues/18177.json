{
  "_url": "https://github.com/PowerShell/PowerShell/issues/18177",
  "author": "iRon7",
  "body": "### Summary of the new feature / enhancement\r\n\r\nAs a user I would expect the `Get-Variable -Scope <number>` to return  the (inherited) read scope of the concerned variable.\r\n(or at least have an easy way to do so with e.g. an extra parameter.)\r\n\r\n```PowerShell\r\nfunction Child {\r\n    Write-Host 'Parent DebugPreference:' (Get-Variable 'DebugPreference' -Scope 1 -ValueOnly)\r\n}\r\n\r\nfunction Parent {\r\n    Write-Host 'Parent DebugPreference:' $DebugPreference\r\n    Child\r\n}\r\nParent\r\n```\r\n\r\n### Expected:\r\n```Console\r\nParent DebugPreference: SilentlyContinue\r\nParent DebugPreference: SilentlyContinue\r\n```\r\n\r\n### Actual:\r\n```Console\r\nParent DebugPreference: SilentlyContinue\r\nGet-Variable: C:\\Users\\Gebruiker\\Scripts\\Test-Scope\\Test-Scope.ps1:10\r\nLine |\r\n  10 |  \u2026 ebugPreference:' (Get-Variable 'DebugPreference' -Scope 1 -ValueOnly)\r\n     |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     | Cannot find a variable with the name 'DebugPreference'.\r\n```\r\n\r\n\r\n### Proposed technical implementation details (workaround)\r\n```PowerShell\r\nfunction Child {\r\n    for ($i = 1; $i -lt (Get-PSCallStack).Count; $i++) {\r\n        $ParentDebugPreference = Get-Variable 'DebugPreference' -Scope $i -ValueOnly -ErrorAction SilentlyContinue\r\n        if ($Null -ne $ParentDebugPreference) { break }\r\n    }\r\n    Write-Host 'Parent DebugPreference:' $ParentDebugPreference\r\n}\r\n\r\nfunction Parent {\r\n    Write-Host 'Parent DebugPreference:' $DebugPreference\r\n    Child\r\n}\r\nParent\r\n```",
  "closed_at": null,
  "comments": [
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "You have to set variable in the scope of `Parent` function:\r\n\r\n```powershell\r\nfunction Child {\r\n    Get-Variable DebugPreference -Scope 1 -ValueOnly\r\n}\r\n\r\nfunction Parent {\r\n    $DebugPreference\r\n    $DebugPreference = 'Stop' \r\n    Child\r\n}\r\n\r\nParent\r\n\r\n# SilentlyContinue\r\n# Stop\r\n```\r\n\r\n\r\n",
      "created_at": "2022-09-28T13:24:42Z",
      "updated_at": "2022-09-28T13:43:33Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "@237dmitry\r\n> have to set variable in `Parent` function\r\n\r\nYes, I know but:\r\n1. As a user, I don't expect/want that to be required (I don't need to do that for the `Write-Host 'Parent DebugPreference:' $DebugPreference` in the parent function either, it just inherits from the `Global` scope).\r\n2. the [`Get-...`](https://learn.microsoft.com/powershell/scripting/developer/cmdlet/approved-verbs-for-windows-powershell-commands?view=powershell-7.2#get-vs-read) verb suggest that a user will ***read*** that variable in the specific scope (which might simply be inherited from a higher parent)\r\n3. Users might not have control over the parent function\r\n4. The parent function might be recursive\r\n\r\nNote that `$DebugPreference` is just an easy example, but the request/issue counts for any variable set in a higher scope.",
      "created_at": "2022-09-28T13:43:31Z",
      "updated_at": "2022-09-28T14:03:45Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "If you didn't set the variable then the parent scope will remain empty (there are no variables in it). Therefore, `Get-Variable` cannot return a value, does not find a variable in the parent scope.",
      "created_at": "2022-09-28T13:53:04Z",
      "updated_at": "2022-09-28T13:53:04Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "> If you didn't set the variable then the parent scope will remain empty (there are no variables in it). Therefore, `Get-Variable` cannot return a value, does not find a variable in the parent scope.\r\n\r\nI understand that, therefore I am requesting an enhancement to easily *get* the (inherited read) variable in the parent scope just as I would be able to retrieve that variable value in the actual parent scope by its `$<name>` (as e.g. `$DebugPreference`) without changing the parent function, similar to the **Proposed technical implementation details (workaround)**",
      "created_at": "2022-09-28T14:13:57Z",
      "updated_at": "2022-09-28T14:15:22Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "It's easier to call `Child` function with parameter.\r\n```powershell\r\n$Test = 'not in Parent'            \r\nfunction Child ($ParentVariables) {\r\n    $DebugPreference      \r\n    $ErrorActionPreference\r\n    $Test\r\n}                \r\n                                        \r\nfunction Parent {                         \r\n    $DebugPreference = 'Continue'  \r\n    $ErrorActionPreference = 'Stop'          \r\n    $Test = 'test'                           \r\n    $ScopeVariables = Get-Variable * -Scope 0\r\n    Child $ScopeVariables\r\n}     \r\n      \r\nParent\r\n$Test\r\n```",
      "created_at": "2022-09-28T14:36:00Z",
      "updated_at": "2022-09-28T14:36:00Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "> It's easier to call Child function with parameter.\r\n\r\nAs said, I am only in control of the child function (and not in control of the parent function). In my specific case, it concerns a \"`Write-Log`\" function where I want to get details of specific available (*inherited* preference) variables of the caller (and explicitly skip the current scope) but I imaging there are other similar use cases for this request.",
      "created_at": "2022-09-28T14:59:02Z",
      "updated_at": "2022-09-28T15:02:23Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> As said, I am only in control of the child function (and not in control of the parent function)\r\n\r\nGet WHOLE set of parent scope and use variables you need:\r\n```powershell\r\n$Test = 'not in Parent'\r\nfunction Child {\r\n    $null = Get-Variable * -Scope 1\r\n    $Test\r\n}\r\n\r\nfunction Parent {\r\n    $Test = 'in Parent Scope'               \r\n    Child                          \r\n}                 \r\n         \r\nParent\r\n$Test\r\n```",
      "created_at": "2022-09-28T16:39:05Z",
      "updated_at": "2022-09-28T16:39:05Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "> Get WHOLE set of parent scope and use variables you need:\r\n\r\nThat doesn't resolve anything for what I am requesting as there *might or **might not*** be a `$Test` assignment (change) in the `Parent` function.\r\n\r\n> [Unless you explicitly make the items private, the items in the parent scope are available to the child scope.](https://learn.microsoft.com/powershell/module/microsoft.powershell.core/about/about_scopes?view=powershell-7.2#parent-and-child-scopes)\r\n\r\n(in the example: the \"global\" `$test` is *available* in the `Parent` function)\r\n\r\n**Wishful thinking**\r\ne.g. using a additional or different parameter (like `-Available <scope>`)\r\n\r\n```PowerShell\r\n$Test = 'Test'\r\nfunction Child {\r\n    $Test = 'I do not want the $Test in this scope'\r\n    # in the statement below, I would like to retrieve the $Test ('Test') available in the parent function (scope)\r\n    Write-Host (Get-Variable Test -Available 1 -ValueOnly) |Should -be 'Test'\r\n}\r\n\r\nfunction Parent {\r\n    Write-Host '$Test is available in this scope:' $Test          \r\n    Child                          \r\n}                 \r\n         \r\nParent\r\n```\r\n",
      "created_at": "2022-09-28T17:16:49Z",
      "updated_at": "2022-09-28T17:59:37Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "The way I'd recommend implementing this is to place your function in a different module. e.g.\r\n\r\n```powershell\r\nNew-Module {\r\n    function Log {\r\n        [CmdletBinding()]\r\n        param()\r\n        end {\r\n            # This won't be found\r\n            $test = 'no'\r\n\r\n            # `$PSCmdlet.SessionState` refers to the *caller's* session state\r\n            $PSCmdlet.SessionState.PSVariable.Get('test')\r\n        }\r\n    }\r\n} | Import-Module\r\n\r\n$test = 'yes'\r\nfunction Caller {\r\n    Log\r\n}\r\n\r\nCaller\r\n```",
      "created_at": "2022-09-28T19:33:25Z",
      "updated_at": "2022-09-28T19:33:25Z"
    },
    {
      "author": "237dmitry",
      "author_association": "NONE",
      "body": "> `Get-Variable Test -Available 1 -ValueOnly`\r\n\r\nWhat this switch has to return, variable's value or boolean? What the difference with:\r\n```powershell\r\nGet-Variable Test -Scope 1 -ValueOnly -ErrorAction 'SilentlyContinue'\r\n```\r\n```powershell\r\nfunction Child {\r\n   $null = Get-Variable Test -Scope 1 -ValueOnly -ErrorAction 0 || Set-Variable Test 'child'\r\n   $Test\r\n}       \r\n \r\nfunction Parent {\r\n   $Test = 'parent'  \r\n   Child            \r\n}                 \r\nParent\r\n\r\n```",
      "created_at": "2022-09-28T22:05:43Z",
      "updated_at": "2022-09-28T22:05:43Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "@SeeminglyScience,\r\n\r\n> The way I'd recommend implementing this is to place your function in a different module\r\n\r\nThanks for the suggestion, this is indeed the way it should be implemented for my use case.\r\n\r\nUnfortunately, the environment concerned is a little more complex as the log script is a part of a larger module with about 20 other scripts that are imported. The CI/CD pipeline that is setup (pester) tests each function by dot-sourcing it where your suggestion acts slightly different than my workaround.\r\n\r\nAnyways, I am still interested in your view of this issue, whether:\r\n* The default **`Get`**`-Variable` behavior could be considered incorrect\r\n  * if yes, I presume the default behavior won't change as is might be a considered as a break change even it currently generates an error in the case the variable isn't (re)set in the concerned scope.\r\n * If `Get-Variable` could be fixed/improved with an extra parameter",
      "created_at": "2022-09-29T06:47:29Z",
      "updated_at": "2022-09-29T07:14:35Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> Anyways, I am still interested in your view of this issue, whether:\r\n> \r\n> * The default **`Get`**`-Variable` behavior could be considered incorrect\r\n>   \r\n>   * if yes, I presume the default behavior won't change as is might be a considered as a break change even it currently generates an error in the case the variable isn't (re)set in the concerned scope.\r\n> * If `Get-Variable` could be fixed/improved with an extra parameter\r\n\r\n\r\nI am trying to figure out _what the actual requirement is_  and if you need to use `get-variable` at all. If you want the inherited $x won't `$x` provide what you want in almost all cases ? \r\nSome example code to show why I think `Get-Variable` isn't needed. \r\n```\r\nfunction a {\r\n$x = 1 \r\n\"Local x in a is '$local:x' ; x is '$x'\"\r\nb\r\n}\r\n\r\nfunction b {\r\n\"Local x in b is '$local:x' ; x is '$x'\"\r\nc\r\n}\r\n\r\nfunction c {\r\n\"Local x in c is '$local:x' ; x is '$x'\"\r\n}\r\n\r\na\r\nLocal x in a is '1' ; x is '1'\r\nLocal x in b is '' ; x is '1'\r\nLocal x in c is '' ; x is '1'\r\n```\r\n\r\nThis shows that in B and C, we can test for  \"X was (not) set locally\", \"X has a value\" therefore it's simple to get to \"X was inherited\", _without caring where from_  If X is a parameter or a preference variable set via a parameter, I'm trying to think of a real-world use case for wanting to know what it was before it was set here. \"$x from all higher scopes but not this one\" is something I have never needed myself, so I'm having trouble imagining a use for it.   \r\n\r\nIn a more complicated example.\r\n```\r\nfunction c {\r\n## other code would be here\r\n    if     ($local:x )    {\"x was set in This function\"}    \r\n    elseif ($x -and     (Get-Variable -Name X -Scope 1 -ErrorAction SilentlyContinue) ) {\r\n          \"x was set in this function's parent\"\r\n    }\r\n    elseif ($global:x ) {\r\n          \"x was set in the Global scope\"\r\n    }\r\n    else  { \"x was set higher than this functions parent but not globally\"}\r\n}\r\n\r\nPS> a\r\nLocal x in a is '1' ; x is '1'\r\nLocal x in b is '' ; x is '1'\r\nx was set higher than this functions parent but not globally\r\n```\r\n\r\nThis shows an example where we don't want the present behaviour of `Get-Variable` to change (we want to know if a variable was or was not set in scope 1)  but **maybe** a \"AND ABOVE\"  switch could be helpful - but as a I said my imagination isn't giving me any cases. \r\n\r\n\r\nAs @SeeminglyScience  says variables don't inherit out of modules and I have a post about that, and how preference variables can be passed here:    \r\nhttps://devblogs.microsoft.com/powershell-community/how-to-have-more-control-of-preferences-in-functions-and-the-role-of-modules-on-inheritance/   it's not clear from the question if you are trying to solve a problem with `$DebugPreference` but that post might help if you are. \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n<blockquote><img src=\"https://devblogs.microsoft.com/powershell-community/wp-content/uploads/sites/69/2021/02/PSHero-240x240-1.png\" width=\"48\" align=\"right\"><div><img src=\"https://devblogs.microsoft.com/powershell-community/wp-content/uploads/sites/69/2021/02/Square150x150Logo.png\" height=\"14\"> PowerShell Community</div><div><strong><a href=\"https://devblogs.microsoft.com/powershell-community/how-to-have-more-control-of-preferences-in-functions-and-the-role-of-modules-on-inheritance/\">On Preferences and Scopes</a></strong></div><div>Progress in PowerShell: a tale of Verbosity and other preferences with lessons in Scopes and Proxies thrown in It started, as these things often do, with someone complaining. In PowerShell Version 7.2 the output of Invoke-WebRequest -Verbose and Invoke-RestMethod -Verbose look like this: VERBOSE: GET with 0-byte payload In all the earlier versions they look like the version below,</div></blockquote>",
      "created_at": "2022-09-29T11:51:56Z",
      "updated_at": "2022-09-29T11:51:59Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "@jhoneill,\r\n\r\n> I am trying to figure out *what the actual requirement is*\r\n\r\nOk, I guess, I need to be specific on my own use case (it actually pretty much ties into your blog post):\r\n\r\nIt concerns a `Write-Log` function with has some similarities with `Write-Host`, `Write-Verbose` and `Write-Debug` cmdlets *combined* meaning that it concerns a single cmdlet where the common `-Verbose` and `-Debug` _parameters_ are used instead of the corresponding cmdlets _nouns_ (knowing that the `Write-Log` cmdlet itself is an end-cmdlet). This comes down to:\r\n* By default `Write-Log` displays and logs messages (along with other stuff that doesn't apply to this issue)\r\n* If the command `Write-Log -Debug` is given, there is nothing shown/written unless it is in debug mode. Meaning that the `-Debug` parameter is also supplied to one of the (grand) parents. (Or the `$DebugPreference` is set other than `SilentlyContinue` in the higher scopes)\r\n* The same behavior counts for the `-Verbose` parameter\r\n\r\nFor this I need to known whether the `$DebugPreference` is set to anything else than `SilentlyContinue` by its caller (*and above*). I also need to specifically *exclude* the `Local` scope (`-Scope 0`) as that is changed by the local `-Debug` and `-Verbose` parameters.\r\nBtw. everything is working as designed with the workaround as laid out in the initial enhancement request, I was just looking for a syntactic sugar...\r\n\r\nI understand this is a quiet specific use case, but than, what says your imagination for a use case of `Get-Variable -Scope <number>` (that could possibly generate an error) in general?",
      "created_at": "2022-09-29T12:46:59Z",
      "updated_at": "2022-09-29T13:53:00Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "The number of times I've needed `Get-Variable` at all has been very small, and I've used `Set-variable` with `-Scope` to do something similar to `-OutVariable` / `-ErrorVariable` to leave something in a variable selected by the caller where that is different from the _output_.   \r\n\r\nBecause I have solved this problem for one case with the stuff in that post I would probably use hidden parameters prefixed with \"parent\" or similar to get the value when the function was called. That doesn't mean it is the perfect way to do it, but knowing a a solution for almost the same problem I would adapt it. You have another work round, and this is very specific - I wouldn't expect the extra parameter to be rejected as a bad idea, but I don't see it being treated as important enough to get time allocated to it. \r\n  ",
      "created_at": "2022-09-29T13:32:39Z",
      "updated_at": "2022-09-29T13:32:39Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "@jhoneill,\r\n\r\n> I wouldn't expect the extra parameter to be rejected as a bad idea, but I don't see it being treated as important enough to get time allocated to it\r\n\r\nThanks, I can live with that.",
      "created_at": "2022-09-29T13:49:27Z",
      "updated_at": "2022-09-29T13:49:27Z"
    }
  ],
  "created_at": "2022-09-28T09:55:07Z",
  "number": 18177,
  "state": "open",
  "title": "`Get-Variable -Scope <number>` should (possibly) return the (inherited) read scope",
  "updated_at": "2022-09-29T13:53:00Z"
}