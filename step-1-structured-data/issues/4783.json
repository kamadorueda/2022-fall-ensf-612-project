{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4783",
  "author": "RickFlist",
  "body": "Note: This is a resubmission of https://github.com/PowerShell/PowerShell/issues/4770. I posted my comment there but the bug did not switch back to open. I apologize if this is a double submission, not sure what happens to comments when a bug is closed\r\n\r\nThis #Requires statement does not throw an error when the only available version is v2.0. I have verified syntax is correct by fudging the GUID; it throws an error on import.\r\n\r\n#Requires -Modules @{ModuleName=\"Hyper-V\";ModuleVersion=\"1.1.0.0\";GUID=\"af4bddd0-8583-4ff2-84b2-a33f5c8de8a7\"}\r\n\r\nI want it to error if this is the only version on the system, but the above requires statement works if Hyper-V Module 2.0 is installed\r\n\r\n09/07 10:28:38 -|- [ADMIN] -|- History: 33\r\nCWD: D:\\Source\\MAX-CPUB-LAB\\Modules>\r\nPS>(Get-Module Hyper-V) | Select *\r\n\r\nName : Hyper-V\r\nPath : C:\\windows\\Microsoft.Net\\assembly\\GAC_MSIL\\Microsoft.HyperV.PowerShell.Cmdlets\\v4.0_10.0.0.0__31bf3856ad364e35\\Microsoft.HyperV.PowerShell.Cmdlets.dll\r\nImplementingAssembly : Microsoft.HyperV.PowerShell.Cmdlets, Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\r\nGuid : af4bddd0-8583-4ff2-84b2-a33f5c8de8a7\r\nHelpInfoUri : https://go.microsoft.com/fwlink/?linkid=390775\r\nModuleBase : C:\\windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Hyper-V\\2.0.0.0\r\nVersion : 2.0.0.0\r\nModuleType : Binary\r\nExportedCmdlets : {[Add-VMAssignableDevice, Add-VMAssignableDevice], [Add-VMDvdDrive, Add-VMDvdDrive], [Add-VMFibreChannelHba, Add-VMFibreChannelHba], [Add-VMGpuPartitionAdapter, Add-VMGpuPartitionAdapter]...}\r\nExportedCommands : {[Add-VMAssignableDevice, Add-VMAssignableDevice], [Add-VMDvdDrive, Add-VMDvdDrive], [Add-VMFibreChannelHba, Add-VMFibreChannelHba], [Add-VMGpuPartitionAdapter, Add-VMGpuPartitionAdapter]...}\r\nRootModule : Microsoft.HyperV.PowerShell.Cmdlets.dll\r\nExportedFormatFiles : {C:\\windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Hyper-V\\2.0.0.0\\Hyper-V.Format.ps1xml}\r\nExportedTypeFiles : {C:\\windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Hyper-V\\2.0.0.0\\Hyper-V.Types.ps1xml}\r\n\r\nSteps to reproduce\r\n------------------\r\nAdd this line to the top of a .psm1 file\r\n```powershell\r\n#Requires -Modules @{ModuleName=\"Hyper-V\";ModuleVersion=\"1.1.0.0\";GUID=\"af4bddd0-8583-4ff2-84b2-a33f5c8de8a7\"}\r\nExpected behavior\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nWhen I see the word \"require\" it says to me \"I require ONLY this version\". I'm not sure who says \"I REQUIRE chemotherapy but aspirin is OK because it is in the Pfizer bottle\". This makes even less sense when version numbers are so critical to grabbing the right dependent code. I'm also a little confused as to why the GUID usage of a single module should have any effect on the global use of a feature. When I state I require something I am not saying something similar is OK. I REQUIRE version 1.1 because version 2.0 breaks my module for whatever reason. I am also not sure why forcing me to add 2-6 lines of code to make sure the right version is available is REQUIRED (haha I kid) when I should get the same functionality in 1 (or less depending on how many modules I require). Who is being served by having this feature function in this fashion? Either way the documentation should either document the non-intuitive function of the feature or the feature should be changed, or better just rename it to \"MinimumVersion\" and sidestep the entire argument alltogther.\r\n\r\nAn error similar to the following is thrown\r\n```none\r\nipmo : The script 'CP-LocalVirtualMachines.psm1' cannot be run because the following modules that are specified by the \"#requires\" statements of the script are missing: Hyper-V.\r\nAt line:1 char:1\r\n+ ipmo .\\CP-LocalVirtualMachines -Force\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : ResourceUnavailable: (CP-LocalVirtualMachines.psm1:String) [Import-Module], ScriptRequires\r\n```\r\n\r\nActual behavior\r\n---------------\r\nNo error is thrown; no information indicating an error\r\n```none\r\n\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nPS>$PSVersionTable.GetEnumerator() | ForEach-Object { Write-Host ('{0,-26}: {1}' -f $PSItem.Key,($PSItem.Value -join \", \" ) ) } | Out-String\r\nPSVersion                 : 5.1.15063.502\r\nPSEdition                 : Desktop\r\nPSCompatibleVersions      : 1.0, 2.0, 3.0, 4.0, 5.0, 5.1.15063.502\r\nBuildVersion              : 10.0.15063.502\r\nCLRVersion                : 4.0.30319.42000\r\nWSManStackVersion         : 3.0\r\nPSRemotingProtocolVersion : 2.3\r\nSerializationVersion      : 1.1.0.1\r\n\r\n```\r\n",
  "closed_at": "2018-08-01T17:20:49Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "You can continue to comment on closed issues and if needed, they can be reopened.  Marking this as documentation.  Perhaps what you are looking for is adding support for `-RequiredVersion` since `Version` acts as `-MinimumVersion` today.",
      "created_at": "2017-09-08T17:59:45Z",
      "updated_at": "2017-09-08T17:59:45Z"
    },
    {
      "author": "RickFlist",
      "author_association": "NONE",
      "body": "Thanks Steve. I will remember that for the future.\r\n\r\n-RequiredVersion would suffice. Basically anything that supports getting the exact right version. I actually thought the GUID parameter was to differentiate between two modules of the same version, to support scenarios that require that level of specificity. I suspect many would also come to the same conclusion if all they had to go off off was the parameters and the \"spirit of intent\" implied by the word \"requires\".  But I'm ok if just the documentation gets updated; so long as other folks don' t spend the time I did trying to figure out why it's not working.\r\n",
      "created_at": "2017-09-08T18:14:36Z",
      "updated_at": "2017-09-08T18:14:36Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@RickFlist if the module author had used a different guid, it would have done what you expected.  In the case of Hyper-V, I looked and they used the same guid.",
      "created_at": "2017-09-08T18:25:25Z",
      "updated_at": "2017-09-08T18:25:25Z"
    },
    {
      "author": "RickFlist",
      "author_association": "NONE",
      "body": "I tried it with and without the GUID parameter, and it still passed even though the version was not 1.1. I am importing the module that ONLY has v2.0 available with a #Requires statement that states 1.1 and it still imports the module.",
      "created_at": "2017-09-08T19:56:35Z",
      "updated_at": "2017-09-08T19:56:35Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Removing the GUID parameter makes it even less specific, so the behavior is consistent (essentially without GUID specified, it'll take latest version found).",
      "created_at": "2017-09-08T20:21:46Z",
      "updated_at": "2017-09-08T20:21:46Z"
    },
    {
      "author": "RickFlist",
      "author_association": "NONE",
      "body": "Gotcha, makes sense. But to be clear it did not do what I expected; I expected it to tell me v1.1 wasn't found and error. :\\",
      "created_at": "2017-09-11T19:32:10Z",
      "updated_at": "2017-09-11T19:32:10Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "As noted above, if you require `-RequiredVersion`, please open a new issue requesting that enhancement.  The current behavior is `by-design` and probably needs better documentation.  It would be difficult to change this behavior as it's not only a `breaking change`, but would make it different from `import-module`",
      "created_at": "2017-09-11T22:33:04Z",
      "updated_at": "2017-09-11T22:33:04Z"
    },
    {
      "author": "RickFlist",
      "author_association": "NONE",
      "body": "I spent 4 hours figuring out that PowerShell's definition of \"Required\" is different than the Miriam Webster definition of \"Required\". This is a bug of some type, either it's a documentation error as the documentation did not tell me this was the behavior of #Requires or the documentation is correct and PowerShell has a bug. One of them is true, not both.\r\n\r\nRoughly 4 hours of my time costs  MS about $500 when you count equipment costs and office rentals and wages and whatnot. That is $500 of wasted money because documentation detailing how #Requires -Modules works was not available.\r\n\r\nFor your information, not a single person of the pshtalk alias at MS could glean the usage of this feature, and that DG contains over 1000 professionals. I am submitting this bug expressly because a large, smart and PowerShell-proficient group could not glean the correct behavior of this feature based on publicly available information.\r\n\r\nI am not going to submit an enhancement request when it is clearly a bug. If Microsoft is publicly stating it is OK to release products that waste time and resources of the companies using that technology because of poor guidance from Microsoft, then don't fix it. The only reason I submitted the bug is so no one else would have to waste the same time I did for an objectively bad reason. I've made a good faith effort so I am standing down.",
      "created_at": "2017-09-11T23:07:13Z",
      "updated_at": "2017-09-11T23:07:13Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@RickFlist Sorry if what I wrote was unhelpful, but that was not my intent.  I added the `Documentation` labels as there's clearly a deficiency in the documentation.  I agree that for a user, the behavior is surprising, however, the behavior is consistent with `Import-Module` so it would be a `breaking change` if we \"fixed it\".\r\n\r\n```powershell\r\nPS C:\\> get-module hyper-v -ListAvailable\r\n\r\n\r\n    Directory: C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules\r\n\r\n\r\nModuleType Version    Name                                ExportedCommands\r\n---------- -------    ----                                ----------------\r\nBinary     2.0.0.0    Hyper-V                             {Add-VMAssignableDevice, Add-VMDvdDrive, Add-VMFibreChannelHba, Add-VMGpuPartitionAdapter...}\r\nBinary     1.1        Hyper-V                             {Add-VMDvdDrive, Add-VMFibreChannelHba, Add-VMHardDiskDrive, Add-VMMigrationNetwork...}\r\n\r\n\r\nPS C:\\> import-module hyper-v -Version 1.1\r\nPS C:\\> get-module hyper-v\r\n\r\nModuleType Version    Name                                ExportedCommands\r\n---------- -------    ----                                ----------------\r\nBinary     2.0.0.0    hyper-v                             {Add-VMAssignableDevice, Add-VMDvdDrive, Add-VMFibreChannelHba, Add-VMGpuPartitionAdapter...}\r\n```\r\n\r\ncc @HemantMahawar ",
      "created_at": "2017-09-12T21:53:35Z",
      "updated_at": "2017-09-12T21:53:35Z"
    },
    {
      "author": "RickFlist",
      "author_association": "NONE",
      "body": "No worries. It seemed like we had reached an impasse on agreement so I just stepped away.  I was frustrated but that's not your fault.\r\n\r\nThat makes total sense when using the -Version parameter. But Import-Module has a -RequiredVersion which I am wondering may be broken. When I executed the following on a machine with only Hyper-V 2.0 installed:\r\n```\r\nImport-Module Hyper-V -RequiredVersion 1.1\r\n```\r\nIt did not throw the error I expected:\r\n```\r\nVERBOSE: Loading module from path 'C:\\windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Hyper-V\\1.1\\Hyper-V.psd1'.\r\nVERBOSE: Loading 'TypesToProcess' from path 'C:\\windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Hyper-V\\1.1\\Hyper-V.Types.ps1xml'.\r\nVERBOSE: Loading 'FormatsToProcess' from path 'C:\\windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Hyper-V\\1.1\\Hyper-V.Format.ps1xml'.\r\nImport-Module : The following error occurred while loading the extended type data file: Error in TypeData \"Microsoft.HyperV.PowerShell.VMReplicationServer\": The member AllowAnyServer is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMReplicationServer\": The member CertAuthPort is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMReplicationServer\": The member KerbAuthPort is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMReplicationServer\": The member AuthType is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMReplicationServer\": The member RepEnabled is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMReplicationAuthorizationEntry\": The member DefaultDisplayProperty is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMReplicationAuthorizationEntry\": The member StorageLoc is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMReplicationAuthorizationEntry\": The member AllowedPS is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMMeteringReportForResourcePool\": The member TotalDisk is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMMeteringReportForResourcePool\": The member MaxRAM is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMMeteringReportForResourcePool\": The member MinRAM is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMMeteringReportForResourcePool\": The member AvgRAM is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMMeteringReportForResourcePool\": The member AvgCPU is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMMeteringReportForVirtualMachine\": The member TotalDisk is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMMeteringReportForVirtualMachine\": The member MaxRAM is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMMeteringReportForVirtualMachine\": The member MinRAM is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMMeteringReportForVirtualMachine\": The member AvgRAM is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMMeteringReportForVirtualMachine\": The member AvgCPU is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMReplicationHealth\": The member DefaultKeyPropertySet is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMReplicationHealth\": The member DefaultDisplayPropertySet is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMReplicationHealth\": The member DefaultDisplayProperty is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMReplicationHealth\": The member SuccReplCount is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMReplicationHealth\": The member AvgReplSize is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMReplicationHealth\": The member AvgLatency is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMReplicationHealth\": The member PReplSize is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMReplicationHealth\": The member LReplTime is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMReplicationHealth\": The member Health is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMReplicationHealth\": The member State is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMReplicationHealth\": The member Id is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMReplicationHealth\": The member Name is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMReplication\": The member DefaultKeyPropertySet is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMReplication\": The member DefaultDisplayPropertySet is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMReplication\": The member DefaultDisplayProperty is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMReplication\": The member AuthType is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMReplication\": The member ReplicaPort is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMReplication\": The member ReplicaServer is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMReplication\": The member PrimaryServer is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMReplication\": The member RelationshipType is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMReplication\": The member FrequencySec is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMReplication\": The member Mode is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMReplication\": The member Health is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMReplication\": The member State is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMReplication\": The member Id is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMReplication\": The member Name is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMHost\": The member ComputerName is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMConnectAce\": The member DefaultKeyPropertySet is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMConnectAce\": The member DefaultDisplayPropertySet is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMConnectAce\": The member DefaultDisplayProperty is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMCurrentTask\": The member DefaultKeyPropertySet is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMCurrentTask\": The member DefaultDisplayPropertySet is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMCurrentTask\": The member DefaultDisplayProperty is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMCurrentTask\": The member Caption is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VMBootSource\": The member DefaultDisplayProperty is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VirtualMachine\": The member DefaultKeyPropertySet is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VirtualMachine\": The member DefaultDisplayPropertySet is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VirtualMachine\": The member DefaultDisplayProperty is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VirtualMachine\": The member VMId is already present.\r\nError in TypeData \"Microsoft.HyperV.PowerShell.VirtualMachine\": The member VMName is already present.\r\nError in TypeData \"Microsoft.Vhd.PowerShell.VirtualHardDisk\": The member Number is already present.\r\nAt line:1 char:1\r\n+ Import-Module Hyper-V -RequiredVersion 1.1\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidOperation: (:) [Import-Module], RuntimeException\r\n    + FullyQualifiedErrorId : FormatXmlUpdateException,Microsoft.PowerShell.Commands.ImportModuleCommand\r\n```\r\n\r\nGet-Help for that parameter says:\r\n```\r\n09/12 17:03:13 -|- [ADMIN] -|- History: 545\r\nCWD: D:\\Source\\MAX-CPUB-LAB\\>\r\nPS>Get-help Import-Module -Parameter RequiredVersion\r\n\r\n-RequiredVersion <Version>\r\n    Specifies a version of the module that this cmdlet imports. If the version is not installed, Import-Module generates an error.\r\n\r\n    By default, Import-Module imports the module without checking the version number.\r\n\r\n    To specify a minimum version, use the MinimumVersion parameter. You can also use the Module and Version parameters of the #Requires keyword to require a specific version of a module in a script.\r\n\r\n    This parameter was introduced in Windows PowerShell 3.0.\r\n\r\n    Scripts that use RequiredVersion to import modules that are included with existing releases of the Windows operating system do not automatically run in future releases of the Windows operating system. This is because Windows PowerShell module version numbers in\r\n    future releases of the Windows operating system are higher than module version numbers in existing releases of the Windows operating system.\r\n\r\n    Required?                    false\r\n    Position?                    named\r\n    Default value                None\r\n    Accept pipeline input?       False\r\n    Accept wildcard characters?  false\r\n```\r\n\r\nWhich to me says if the I tell it I only want v1.1, not v1.0 and not v2.0, it will error. My understanding is the -Version is the default parameterset that is used when you execute Import-Module, so that IPMO will always grab the latest version by design.",
      "created_at": "2017-09-13T00:01:58Z",
      "updated_at": "2017-09-13T00:01:58Z"
    },
    {
      "author": "RickFlist",
      "author_association": "NONE",
      "body": "Okay that error is a red herring. It was thrown because I already had v2.0 hyper-v module imported in my session. After removing v2.0 with Remove-Module and executed IPMO with the -RequiredVersion parameter not only imported the module successfully but says it is version 1.1, which is very confusing because I was unaware I had v1.1 prior to right now.\r\n\r\n```\r\n09/12 17:08:59 -|- [ADMIN] -|- History: 549\r\nCWD: D:\\Source\\MAX-CPUB-LAB\\>\r\nPS>Get-Module\r\n\r\nModuleType Version    Name                                ExportedCommands\r\n---------- -------    ----                                ----------------\r\nScript     3.3.1      AzureRM.Automation                  {Export-AzureRmAutomationDscConfiguration, Export-AzureRmAutomationDscNodeReportContent, Export-AzureRmAutomationRunbook, Get-AzureRmAutomationAccount...}\r\nScript     3.3.1      AzureRM.profile                     {Add-AzureRmAccount, Add-AzureRmEnvironment, Disable-AzureRmDataCollection, Enable-AzureRmDataCollection...}\r\nScript     4.3.1      AzureRM.Resources                   {Export-AzureRmResourceGroup, Find-AzureRmResource, Find-AzureRmResourceGroup, Get-AzureRmADAppCredential...}\r\nScript     1.0        CP-Azure                            {Add-CPHybridWorker, Add-CPSupportIpAddressToNsg, Get-CPExternalIpAddress, Get-CPResourceGroupIpAddresses...}\r\nManifest   1.0        CP-Core\r\nScript     0.0        CP-Credential                       {Add-Account, Get-AllAccounts, Get-CachedCredential, Install-EncryptionCertificate...}\r\nScript     0.0        CP-LocalVirtualMachines             {ConvertTo-VhdOnHost, Get-VmStorageLocation}\r\nScript     0.0        CP-PowerShell                       {Disable-PSScriptBlockLogging, Disable-PSTranscription, Enable-PSScriptBlockInvocationLogging, Enable-PSScriptBlockLogging...}\r\nManifest   1.0        CP-Utility\r\nManifest   1.0.0.0    DnsClient                           {Resolve-DnsName, Add-DnsClientNrptRule, Clear-DnsClientCache, Get-DnsClient...}\r\nManifest   2.0.0.0    FailoverClusters                    {Add-ClusterCheckpoint, Add-ClusterDisk, Add-ClusterFileServerRole, Add-ClusterGenericApplicationRole...}\r\nBinary     1.1        Hyper-V                             {Add-VMDvdDrive, Add-VMFibreChannelHba, Add-VMHardDiskDrive, Add-VMMigrationNetwork...}\r\nManifest   3.1.0.0    Microsoft.PowerShell.Management     {Add-Computer, Add-Content, Checkpoint-Computer, Clear-Content...}\r\nManifest   3.0.0.0    Microsoft.PowerShell.Security       {ConvertFrom-SecureString, ConvertTo-SecureString, Get-Acl, Get-AuthenticodeSignature...}\r\nManifest   3.1.0.0    Microsoft.PowerShell.Utility        {Add-Member, Add-Type, Clear-Variable, Compare-Object...}\r\nManifest   3.0.0.0    Microsoft.WSMan.Management          {Connect-WSMan, Disable-WSManCredSSP, Disconnect-WSMan, Enable-WSManCredSSP...}\r\nManifest   2.0.0.0    NetAdapter                          {Disable-NetAdapter, Disable-NetAdapterBinding, Disable-NetAdapterChecksumOffload, Disable-NetAdapterEncapsulatedPacketTaskOffload...}\r\nManifest   1.0.0.0    NetTCPIP                            {Find-NetRoute, Get-NetCompartment, Get-NetIPAddress, Get-NetIPConfiguration...}\r\nBinary     1.0.0.1    PackageManagement                   {Find-Package, Find-PackageProvider, Get-Package, Get-PackageProvider...}\r\nScript     1.0.0.1    PowerShellGet                       {Find-Command, Find-DscResource, Find-Module, Find-RoleCapability...}\r\nScript     1.2        PSReadline                          {Get-PSReadlineKeyHandler, Get-PSReadlineOption, Remove-PSReadlineKeyHandler, Set-PSReadlineKeyHandler...}\r\nManifest   2.0.0.0    SmbShare                            {Block-SmbShareAccess, Close-SmbOpenFile, Close-SmbSession, Disable-SmbDelegation...}\r\n```\r\n\r\nSo it's entirely possible that #Requires works exactly as intended but appeared not to be because I did in fact have the module version I said I wanted. Can you confirm this?",
      "created_at": "2017-09-13T00:07:48Z",
      "updated_at": "2017-09-13T00:08:12Z"
    },
    {
      "author": "RickFlist",
      "author_association": "NONE",
      "body": "Actually I don't think it was there previously... I KNOW I ran Get-Module -ListAvailable to make sure was not installed and this command showed only one version. Is it possible Import-Module downloaded it or something?\r\n\r\n```\r\n09/12 17:15:01 -|- [ADMIN] -|- History: 553\r\nCWD: D:\\Source\\MAX-CPUB-LAB\\>\r\nPS>Get-Module -ListAvailable Hyper-V\r\n\r\n\r\n    Directory: C:\\windows\\system32\\WindowsPowerShell\\v1.0\\Modules\r\n\r\n\r\nModuleType Version    Name                                ExportedCommands\r\n---------- -------    ----                                ----------------\r\nBinary     2.0.0.0    Hyper-V                             {Add-VMAssignableDevice, Add-VMDvdDrive, Add-VMFibreChannelHba, Add-VMGpuPartitionAdapter...}\r\nBinary     1.1        Hyper-V                             {Add-VMDvdDrive, Add-VMFibreChannelHba, Add-VMHardDiskDrive, Add-VMMigrationNetwork...}\r\n```",
      "created_at": "2017-09-13T00:10:27Z",
      "updated_at": "2017-09-13T00:10:27Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@RickFlist I believe Hyper-V ships both 1.1 and 2.0 inbox in Windows.  If it's downloaded (via PSGet), the modules are put in %ProgramFiles% since only TrustedInstaller can put modules under %windir%.",
      "created_at": "2017-09-13T00:16:50Z",
      "updated_at": "2017-09-13T00:16:50Z"
    },
    {
      "author": "RickFlist",
      "author_association": "NONE",
      "body": "I'll poke around tomorrow and see if I made a mistake somewhere or if it\nmagically appeared. I feel confident that I did make sure that v1.1 was not\non the system but I can't be sure there were too many things going on with\ntoo many systems for me to recall with certainty.\n\nOn Tue, Sep 12, 2017 at 5:17 PM, Steve Lee <notifications@github.com> wrote:\n\n> @RickFlist <https://github.com/rickflist> I believe Hyper-V ships both\n> 1.1 and 2.0 inbox in Windows. If it's downloaded (via PSGet), the modules\n> are put in %ProgramFiles% since only TrustedInstaller can put modules under\n> %windir%.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/PowerShell/PowerShell/issues/4783#issuecomment-329020590>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AHOUDV2vffhSKn_YYuQFGOgDOLtkKGamks5shx8DgaJpZM4PRTea>\n> .\n>\n",
      "created_at": "2017-09-13T00:27:53Z",
      "updated_at": "2017-09-13T00:27:53Z"
    },
    {
      "author": "sdwheeler",
      "author_association": "COLLABORATOR",
      "body": "This issue is fixed by https://github.com/PowerShell/PowerShell-Docs/pull/2757",
      "created_at": "2018-08-01T17:20:49Z",
      "updated_at": "2018-08-01T17:20:49Z"
    }
  ],
  "created_at": "2017-09-08T15:03:07Z",
  "number": 4783,
  "state": "closed",
  "title": "#Requires Statement Not Honoring Version (Possible Dupe of #4770)",
  "updated_at": "2018-10-15T21:53:54Z"
}