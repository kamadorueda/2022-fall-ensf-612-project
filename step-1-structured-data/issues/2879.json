{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2879",
  "author": "zjalexander",
  "body": "Need API/SDK documentation for hosting PowerShell runspaces in another application. ",
  "closed_at": null,
  "comments": [
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "There is now a [host app in the documentation](https://github.com/PowerShell/PowerShell/tree/master/docs/host-powershell) ... it's using PowerShell.Create() so it's the simplest possible host (and it's 82MB  and 250 files) ....\r\n\r\nDespite all that, there's no persistence, and it's missing many modules (CimCmdlets, Archive, Security, PackageManagment, PowerShelLGet, PSDiagnotics, etc) ...\r\n\r\n@joeyaiello not sure who to follow up with from the meeting last week ... \r\n\r\nWe need some help with the persistent hosting APIs because when I try to host using (for instance) `InitialSessionState.CreateDefault2` it gets **a lot** more complicated than hosting Windows PowerShell:\r\n\r\n1. I have to copy the Modules folders from my installed copy of PowerShell Core and ship them? I'm not sure if I need to ship different modules folders for each OS I support ... \r\n2. I'm not sure about PSModulePath -- based on my experience with Windows PowerShell, I assumed that my local path isn't in the PSModulePath, which probably means none of the core modules will load if you don't set it.\r\n3. ExecutionPolicy isn't inherited from my installed pwsh -- even Microsoft.PowerShell.Utility wouldn't import -- I'm going to have to look at what PowerShell.Create() is doing to bypass that...\r\n\r\nStill more experimenting for me.",
      "created_at": "2018-02-21T06:36:26Z",
      "updated_at": "2018-02-21T06:37:37Z"
    }
  ],
  "created_at": "2016-12-14T02:03:21Z",
  "number": 2879,
  "state": "open",
  "title": "Need documentation for SDK: Hosting PS runspace",
  "updated_at": "2018-02-21T06:37:37Z"
}