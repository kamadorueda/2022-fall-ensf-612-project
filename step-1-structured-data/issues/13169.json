{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13169",
  "author": "stdedos",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\n\r\n## Steps to reproduce\r\n\r\nI am using [dgreadiness_v3.6.zip](https://github.com/PowerShell/PowerShell/files/4915128/dgreadiness_v3.6.zip) (from https://www.microsoft.com/en-us/download/confirmation.aspx?id=53337)\r\n\r\n## Expected behavior\r\n\r\n```none\r\nPS C:\\Users> powershell.exe E:\\Desktop\\dgreadiness_v3.6\\DG_Readiness_Tool_v3.6.ps1 -ready\r\n###########################################################################\r\nReadiness Tool Version 3.4 Release.\r\nTool to check if your device is capable to run Device Guard and Credential Guard.\r\n###########################################################################\r\n###########################################################################\r\nOS and Hardware requirements for enabling Device Guard and Credential Guard\r\n 1. OS SKUs: Available only on these OS Skus - Enterprise, Server, Education, Enterprise IoT, Pro, and Home\r\n 2. Hardware: Recent hardware that supports virtualization extension with SLAT\r\nTo learn more please visit: https://aka.ms/dgwhcr\r\n###########################################################################\r\n\r\nCredential-Guard is not running.\r\nHVCI is not running.\r\nConfig-CI is not running. (Not Enabled)\r\nNot all services are running.\r\n```\r\n\r\nI assume that `PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}` also includes v5.\r\n\r\n## Actual behavior\r\n```none\r\nPS C:\\Users> pwsh E:\\Desktop\\dgreadiness_v3.6\\DG_Readiness_Tool_v3.6.ps1 -ready\r\n###########################################################################\r\nReadiness Tool Version 3.4 Release.\r\nTool to check if your device is capable to run Device Guard and Credential Guard.\r\n###########################################################################\r\nNote that this script is compatible with v5 PowerShell. YMMV.\r\nget-wmiobject: E:\\Desktop\\dgreadiness_v3.6\\DG_Readiness_Tool_v3.6.ps1:1013\r\nLine |\r\n1013 |  $isRunningOnVM = (get-wmiobject win32_computersystem).model\r\n     |                    ~~~~~~~~~~~~~\r\n     | The term 'get-wmiobject' is not recognized as the name of a cmdlet, function, script file, or operable\r\n     | program. Check the spelling of the name, or if a path was included, verify that the path is correct\r\n     | and try again.\r\n\r\nInvalidOperation: E:\\Desktop\\dgreadiness_v3.6\\DG_Readiness_Tool_v3.6.ps1:1014\r\nLine |\r\n1014 |  if($isRunningOnVM.Contains(\"Virtual\"))\r\n     |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     | You cannot call a method on a null-valued expression.\r\n\r\n###########################################################################\r\nOS and Hardware requirements for enabling Device Guard and Credential Guard\r\n 1. OS SKUs: Available only on these OS Skus - Enterprise, Server, Education, Enterprise IoT, Pro, and Home\r\n 2. Hardware: Recent hardware that supports virtualization extension with SLAT\r\nTo learn more please visit: https://aka.ms/dgwhcr\r\n###########################################################################\r\n\r\nCredential-Guard is not running.\r\nHVCI is not running.\r\nConfig-CI is not running. (Not Enabled)\r\nNot all services are running.\r\nPS C:\\Users> pwsh -version 5 E:\\Desktop\\dgreadiness_v3.6\\DG_Readiness_Tool_v3.6.ps1 -ready\r\nPowerShell 7.0.2\r\n\r\n```\r\n\r\nScript works out of luck\r\nhttps://docs.microsoft.com/en-us/powershell/scripting/windows-powershell/starting-the-windows-powershell-2.0-engine?view=powershell-7 does not seem to trigger \"v5 compatibility mode\" as extrapolated.\r\n\r\n\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\n> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.2\r\nPSEdition                      Core\r\nGitCommitId                    7.0.2\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-07-15T12:00:13Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "`Get-WmiObject` was considered _deprecated_ in PowerShell version 3.\r\n\r\nSince then, `Get-CimInstance` has been the replacement command. `Get-WmiObject` was officially dropped in v6.0. If this script hasn't been updated since v2, I wouldn't expect it to work.\r\n\r\nI'm not sure in what capacity, if any, `-Version 2` is expected to work, but I wouldn't expect it to function in pwsh myself.",
      "created_at": "2020-07-13T21:28:28Z",
      "updated_at": "2020-07-13T21:29:04Z"
    },
    {
      "author": "stdedos",
      "author_association": "NONE",
      "body": "What does, then, `PSCompatibleVersions` mean, if not _backwards compatibility with previous PS versions_?",
      "created_at": "2020-07-14T06:05:21Z",
      "updated_at": "2020-07-14T06:05:21Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "PSCompatibleVersions is, as far as I'm aware, only referenced for the purposes of `#Requires -PSVersion` statements. In other words, if the stated version is not in the PSCompatibleVersions list, PowerShell won't even _try_ to run the script. Many scripts are compatible, which is why later versions will still try to run scripts written for older versions. But not all, as you've seen here. Typically adjustments needed are minor, though; for instance, there's a good chance if you simply replace the `Get-WmiObject` calls with `Get-CimInstance` instead, it will probably work.\r\n\r\nIt's more about preventing earlier versions of PS from trying to run scripts which may contain language features that were introduced later on, to the best of my knowledge. \ud83d\ude42 ",
      "created_at": "2020-07-14T06:07:47Z",
      "updated_at": "2020-07-14T06:11:49Z"
    },
    {
      "author": "stdedos",
      "author_association": "NONE",
      "body": "In any case, \"in such a volatile environment\", I would expect that `#Requires -Version` (_and not `#Requires -PSVersion`_), would guard both ways: against old _and_ against new features.\r\n\r\nOr, would provide backwards-compatible interfaces.\r\n\r\nIn any case, I got what I expected by this thread. Thank you for the prompt responses.",
      "created_at": "2020-07-14T07:42:43Z",
      "updated_at": "2020-07-14T07:42:43Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-07-15T12:00:12Z",
      "updated_at": "2020-07-15T12:00:12Z"
    }
  ],
  "created_at": "2020-07-13T21:10:31Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 13169,
  "state": "closed",
  "title": "v5-compatible script cannot run in pwsh",
  "updated_at": "2020-07-15T12:00:13Z"
}