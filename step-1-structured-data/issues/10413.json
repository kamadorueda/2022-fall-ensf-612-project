{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10413",
  "author": "iSnackyCracky",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\nUsing the String.Replace() Method inside a subexpression to remove (replace with \"\") parts of a string gives unexpected results.\r\nFor me, this looks related to #3039 and #4543 \r\n\r\n# Steps to reproduce\r\n```powershell\r\n\"foo $( \"bar\".replace(\"bar\", \"\") )\"\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nfoo \r\n```\r\n\r\n# Actual behavior\r\nIn newer PS versions, the command doesn't even work, in older versions there are different error messages about missing ending characters (like '\"' and ')')\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nPS C:\\> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.2\r\nPSEdition                      Core\r\nGitCommitId                    6.2.2\r\nOS                             Microsoft Windows 10.0.18362\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n---\r\nThe line works though, if you replace the empty double quotes with single quotes, or add a third (or even fourth) double quote:\r\n```powershell\r\nC:\\> \"foo $( \"bar\".replace(\"bar\", '') )\" # single quotes\r\nfoo \r\nC:\\> \"foo $( \"bar\".replace(\"bar\", \"\"\") )\" # three double quotes\r\nfoo \r\nC:\\> \"foo $( \"bar\".replace(\"bar\", \"\"\"\") )\" # four double quotes\r\nfoo \r\n```\r\n\r\nSide note: to replace the string with one doublequote (without escaping or putting it inside single quotes) you need 7 double quotes in your replace() call:\r\n```powershell\r\nC:\\> \"foo $( \"bar\".replace(\"bar\", \"\"\"\"\"\"\") )\" # seven double quotes\r\nfoo \"\r\n```\r\n",
  "closed_at": "2021-12-31T08:00:42Z",
  "comments": [
    {
      "author": "UberKluger",
      "author_association": "NONE",
      "body": "Already commented about the cause of this in #10045 but comment here explains this observed behaviour (for those who like detailed explanations).\r\n\r\nThe problem appears to be that simple expandable strings are not treating an embedded subexpression as an independent syntactic context. Any pair of double quotes (\"\") anywhere within the string (even inside a subexpression) is assumed to represent an embedded singular double quote (\") and is replaced, apparently ***BEFORE*** evaluating (or even parsing) the subexpression. This explains the observations. Demonstration follows (the replaced paired \"s are highlighted between !!):\r\n```\r\n\"foo $( \"bar\".replace(\"bar\", !\"\"!) )\" # should be syntactically correct (ignoring the !s)\r\n```\r\nbecomes\r\n```\r\n\"foo $( \"bar\".replace(\"bar\", \") )\" # definitely not\r\n```\r\nand\r\n```\r\n\"foo $( \"bar\".replace(\"bar\", '') )\" # single quotes so no substitutions\r\n\r\n\"foo $( \"bar\".replace(\"bar\", !\"\"!\") )\" # three double quotes\r\nbecomes -> \"foo $( \"bar\".replace(\"bar\", \"\") )\" # looks better\r\n\r\n\"foo $( \"bar\".replace(\"bar\", !\"\"!!\"\"!) )\" # four double quotes\r\nbecomes -> \"foo $( \"bar\".replace(\"bar\", \"\") )\" # ok\r\n```\r\nand the final example\r\n```\r\n\"foo $( \"bar\".replace(\"bar\", !\"\"!!\"\"!!\"\"!\") )\" # seven double quotes\r\nbecomes -> \"foo $( \"bar\".replace(\"bar\", \"\"\"\") )\"\r\n# so when the subexpression is evaluated the replacement string is \"!\"\"!\" i.e. a single \"\r\n```\r\nThis is supported by the fact that 8 quotes also works. All even numbers of quotes are equivalent to the preceding odd number since the last quote in the odd sequence remains unpaired and so is not substituted.\r\n\r\nI hope that anyone reading this is now less confused about whatever problem they have that led them to this issue page. I would recommend looking also at #10045 since it deals with a slightly different issue with (apparently) the same root cause.",
      "created_at": "2021-12-30T05:07:02Z",
      "updated_at": "2021-12-30T05:07:02Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as duplicate and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2021-12-31T08:00:41Z",
      "updated_at": "2021-12-31T08:00:41Z"
    }
  ],
  "created_at": "2019-08-22T08:03:59Z",
  "number": 10413,
  "state": "closed",
  "title": "Double quotes inside subexpression",
  "updated_at": "2021-12-31T08:00:42Z"
}