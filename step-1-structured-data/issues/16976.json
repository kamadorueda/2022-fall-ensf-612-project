{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16976",
  "author": "dancojocaru2000",
  "body": "### Summary of the new feature / enhancement\r\n\r\nAs a user I want to be able to access the original string value of a converted DateTime so that it can be used in cases where an equivalent ISO 8601 representation would be considered a different value.\r\n\r\nI am using an API which returns ISO 8601 strings as IDs. However, PowerShell automatically converts those IDs to DateTime, and using something like `Get-Date -Format o $date` returns a different string that results in a different, invalid ID.\r\n\r\n### Proposed technical implementation details (optional)\r\n\r\nThere are two ways I can see this implemented:\r\n\r\n1. A `-NoDateConversion` flag to `Convert-FromJson` and cmdlets that use it such as `Invoke-RestMethod`\r\n2. The returned DateTime could have an `OriginalString` member, so that the original string can be accessed like `$date.OriginalString`\r\n3. The returned DateTime, when passed to `Get-Date -Format o $date`, would output the original string instead of a ISO 8601 equivalent reinterpretation.",
  "closed_at": null,
  "comments": [
    {
      "author": "dwtaber",
      "author_association": "CONTRIBUTOR",
      "body": "Maybe this concept should be applied to other types the cmdlet converts from strings as well, rather than making `DateTime` a special case.",
      "created_at": "2022-03-09T02:39:34Z",
      "updated_at": "2022-03-09T02:39:34Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Please repro steps and input file example.",
      "created_at": "2022-03-09T11:10:05Z",
      "updated_at": "2022-03-09T11:10:05Z"
    },
    {
      "author": "dancojocaru2000",
      "author_association": "NONE",
      "body": "> Maybe this concept should be applied to other types the cmdlet converts from strings as well, rather than making `DateTime` a special case.\n\nAgreed, DateTime was the first to get me in trouble so that's why I singled it out.",
      "created_at": "2022-03-09T11:11:49Z",
      "updated_at": "2022-03-09T11:11:49Z"
    },
    {
      "author": "dancojocaru2000",
      "author_association": "NONE",
      "body": "> Please repro steps and input file example.\r\n\r\n```pwsh\r\n$json = \"[{`\"id`\": `\"2022-03-09T09:11:04.254630+00:00`\", `\"otherData`\": true}]\"\r\n$converted = ConvertFrom-Json $json\r\n$converted[0].id | Get-Date -Format o\r\n```\r\n\r\nAs can be seen, the input string is `2022-03-09T09:11:04.254630+00:00`. The output of the last command on my machine is `2022-03-09T11:11:04.2546300+02:00`. Since the two strings aren't identical, using the 2nd one as the ID results in an error.\r\n\r\nI want to highlight that I don't want to obtain a `+00:00` ISO 8601 string! It just so happens that this time the input is `+00:00`. If the input would be `2022-03-09T11:11:04.2546300+02:00` and the output would be `2022-03-09T09:11:04.254630+00:00`, it would still be an error.",
      "created_at": "2022-03-09T11:18:05Z",
      "updated_at": "2022-03-09T11:18:05Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I see ConvertFrom-Json converts the string to _local_ datetime. It is how underlying NewtonSoft.NET works. So we can not change this. You have to do some manual steps to convert local datetime to string you need.",
      "created_at": "2022-03-09T12:31:13Z",
      "updated_at": "2022-03-09T12:31:13Z"
    },
    {
      "author": "dancojocaru2000",
      "author_association": "NONE",
      "body": "Is it not possible to somehow disable the automatic conversions and keep all strings as strings? Because this seems as a flaw to me (that should be perhaps fixed in NewtonSoft.NET), destructively converting data without an option to get the original back.\r\n\r\nEdit: I found this Stack Overflow question: [Json.NET Disable the deserialization on DateTime](https://stackoverflow.com/questions/11856694/json-net-disable-the-deserialization-on-datetime). Would it not possible to pass such options?",
      "created_at": "2022-03-09T12:35:50Z",
      "updated_at": "2022-03-09T12:40:20Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Edit: I found this Stack Overflow question: [Json.NET Disable the deserialization on DateTime](https://stackoverflow.com/questions/11856694/json-net-disable-the-deserialization-on-datetime). Would it not possible to pass such options?\r\n\r\nNo, it will be huge breaking change.\r\n\r\nIs your source string always in UTC? If yes, you could use an workaround otherwise it is a dead end.",
      "created_at": "2022-03-09T13:12:51Z",
      "updated_at": "2022-03-09T13:12:51Z"
    },
    {
      "author": "dancojocaru2000",
      "author_association": "NONE",
      "body": "Why would it be a breaking change?\n\nAnd no, the source string is not always following a certain format.",
      "created_at": "2022-03-09T13:14:44Z",
      "updated_at": "2022-03-09T13:14:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Why would it be a breaking change?\r\n\r\nThe cmdlet will return different result.\r\n\r\n> And no, the source string is not always following a certain format.\r\n\r\nIn the case you could pre-process the json so that \"hide/mask\" the datetime string.",
      "created_at": "2022-03-09T13:20:37Z",
      "updated_at": "2022-03-09T13:20:37Z"
    },
    {
      "author": "dancojocaru2000",
      "author_association": "NONE",
      "body": "> > Why would it be a breaking change?\n> \n> \n> \n> The cmdlet will return different result.\n\nThere could be a `-NoConversion` flag which would be a backwards compatible change.",
      "created_at": "2022-03-09T13:22:57Z",
      "updated_at": "2022-03-09T13:22:57Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "This is definitely possible to do without a breaking change. You can have an opt in parameter like `-DateTimeFormat None|DateTime|DateTimeOffset` that controls the [DateParseHandling](https://www.newtonsoft.com/json/help/html/P_Newtonsoft_Json_JsonSerializerSettings_DateParseHandling.htm) property in Newtonsoft. The default can be `DateTime` to preserve backwards compatibility if that is desired.\r\n\r\nPowerShell already https://github.com/PowerShell/PowerShell/blob/7dc4587014bfa22919c933607bf564f0ba53db2e/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/JsonObject.cs#L181-L187 passes in a settings class so it shouldn't be that hard to add. The only concern I would have is that it would tie `ConvertFrom-Json` more closely to `Newtonsoft` making it harder to potentially migrate to another JSON library in the future (if that's ever going to happen).\r\n\r\nThe current `DateTime` handling is a bit subpar because it always gives you a local kind `DateTime` object where you can loose information about the value like what TZ it was in. For example my local offset is +10:00 and this is what I see\r\n\r\n```powershell\r\n$json = '\"2022-03-09T09:11:04.25463+05:00\"'\r\n$converted = ConvertFrom-Json $json\r\n\r\n$converted\r\n\r\n# Wednesday, 9 March 2022 2:11:04 pm\r\n\r\n$converted.Kind\r\n# Local\r\n```\r\n\r\nI have no way to know with this deserialized value that the raw string had a `+05:00` offset, I just know what the value is in UTC and local time.",
      "created_at": "2022-03-10T06:16:28Z",
      "updated_at": "2022-03-10T06:17:55Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "See also:\r\n\r\n* Proposal: #13598\r\n\r\n* Relate discussion: #13592",
      "created_at": "2022-10-11T03:59:54Z",
      "updated_at": "2022-10-11T03:59:54Z"
    }
  ],
  "created_at": "2022-03-08T14:05:19Z",
  "number": 16976,
  "state": "open",
  "title": "Allow obtaining original string value from ConvertFrom-Json returned DateTime",
  "updated_at": "2022-10-11T03:59:54Z"
}