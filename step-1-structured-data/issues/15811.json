{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15811",
  "author": "SeeminglyScience",
  "body": "### Steps to reproduce\r\n\r\n```powershell\r\n$script = '([System.Collections.Generic.IList[System.Text.StringBuilder]]$null)[0].'\r\n$results = TabExpansion2 -inputScript $script -cursorColumn $script.Length\r\n$results.CompletionMatches\r\n```\r\n\r\nNote that changing `IList` to `List` in the above script will return the expected inferred members.\r\n\r\n### Expected behavior\r\n\r\n```console\r\nCompletionText  ListItemText   ResultType ToolTip\r\n--------------  ------------   ---------- -------\r\nCapacity        Capacity         Property int Capacity { get; set; }\r\nLength          Length           Property int Length { get; set; }\r\nMaxCapacity     MaxCapacity      Property int MaxCapacity { get; }\r\nAppend(         Append             Method System.Text.StringBuilder Append(System.Char*, System.Private.CoreLib, Version=6.0.0.0, Culture=\u2026\r\nAppendFormat(   AppendFormat       Method System.Text.StringBuilder AppendFormat(string format, System.Object arg0)\u2026\r\nAppendJoin(     AppendJoin         Method System.Text.StringBuilder AppendJoin(string separator, Params System.Object[] values)\u2026\r\nAppendLine(     AppendLine         Method System.Text.StringBuilder AppendLine()\u2026\r\nClear(          Clear              Method System.Text.StringBuilder Clear()\r\nCopyTo(         CopyTo             Method void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count)\u2026\r\nEnsureCapacity( EnsureCapacity     Method int EnsureCapacity(int capacity)\r\nEquals(         Equals             Method bool Equals(System.Text.StringBuilder sb)\u2026\r\nGetChunks(      GetChunks          Method System.Text.StringBuilder+ChunkEnumerator GetChunks()\r\nGetHashCode(    GetHashCode        Method int GetHashCode()\r\nGetObjectData(  GetObjectData      Method void ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Run\u2026\r\nGetType(        GetType            Method type GetType()\r\nInsert(         Insert             Method System.Text.StringBuilder Insert(int index, ulong value)\u2026\r\nRemove(         Remove             Method System.Text.StringBuilder Remove(int startIndex, int length)\r\nReplace(        Replace            Method System.Text.StringBuilder Replace(string oldValue, string newValue)\u2026\r\nToString(       ToString           Method string ToString()\u2026\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nCompletionText ListItemText  ResultType ToolTip\r\n-------------- ------------  ---------- -------\r\nCount          Count           Property int Count { get; }\r\nIsReadOnly     IsReadOnly      Property bool IsReadOnly { get; }\r\nAdd(           Add               Method void ICollection[StringBuilder].Add(System.Text.StringBuilder item)\r\nClear(         Clear             Method void ICollection[StringBuilder].Clear()\r\nContains(      Contains          Method bool ICollection[StringBuilder].Contains(System.Text.StringBuilder item)\r\nCopyTo(        CopyTo            Method void ICollection[StringBuilder].CopyTo(System.Text.StringBuilder[] array, int arrayIndex)\r\nForEach(       ForEach           Method ForEach(expression [, arguments...])\r\nGetEnumerator( GetEnumerator     Method System.Collections.Generic.IEnumerator[System.Text.StringBuilder] IEnumerable[StringBuilder].GetEnumerator()\u2026\r\nIndexOf(       IndexOf           Method int IList[StringBuilder].IndexOf(System.Text.StringBuilder item)\r\nInsert(        Insert            Method void IList[StringBuilder].Insert(int index, System.Text.StringBuilder item)\r\nRemove(        Remove            Method bool ICollection[StringBuilder].Remove(System.Text.StringBuilder item)\r\nRemoveAt(      RemoveAt          Method void IList[StringBuilder].RemoveAt(int index)\r\nWhere(         Where             Method Where({ expression } [, mode [, numberToReturn]])\r\n```\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0-preview.7\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0-preview.7\r\nOS                             Microsoft Windows 10.0.18362\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2022-06-13T17:04:35Z",
  "comments": [
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "File to modify is [here](https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/parser/TypeInferenceVisitor.cs)",
      "created_at": "2021-10-28T22:49:10Z",
      "updated_at": "2021-10-28T22:49:10Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Engine WG discussed this today. Our opinion is that there should be little harm in updating the type inference we currently have for `List<T>` to instead look for `IList<T>` when looking at inferencing the type for an indexed list. Doing so should retain the existing behaviour while also widening the potential capabilities of the type inference logic to encompass cases like this as well as any case where an object implements IList<T> and we're trying to infer the type of the elements.",
      "created_at": "2021-10-28T23:04:46Z",
      "updated_at": "2021-10-28T23:04:46Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "For anyone who picks this up, types are also decorated with `DefaultMemberAttribute(string propertyName)` when they have an indexer (may also need to check implemented interfaces).\r\n\r\nExample of what it sort of looks like at the metadata level:\r\n\r\n```csharp\r\npublic interface ITuple\r\n{\r\n    object this[int index] { get; }\r\n}\r\n\r\n// Is equivalent to \r\n\r\n[DefaultMember(\"Item\")]\r\npublic interface ITuple\r\n{\r\n    object get_Item(int index);\r\n}\r\n```",
      "created_at": "2021-10-29T15:16:32Z",
      "updated_at": "2021-10-29T15:16:32Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #16963, which has now been successfully released as `v7.3.0-preview.5`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.3.0-preview.5)\n",
      "created_at": "2022-06-22T20:27:30Z",
      "updated_at": "2022-06-22T20:27:30Z"
    }
  ],
  "created_at": "2021-07-21T14:08:34Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine",
    "Up-for-Grabs",
    "Resolution-Fixed"
  ],
  "number": 15811,
  "state": "closed",
  "title": "Type inference does not handle index of `IList<>`",
  "updated_at": "2022-06-22T20:27:31Z"
}