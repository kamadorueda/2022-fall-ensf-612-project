{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7712",
  "author": "mklement0",
  "body": "<sup>Related: #7713 and  #7867</sup>\r\n\r\nSometimes all you want `Select-String` to do is to output only the matching parts of the input lines as strings, similar to what `grep -o` does on Unix-like platforms; e.g.:\r\n\r\n```powershell\r\n# Extract only the parts that match the regex, each on its own line.\r\nPSonUnix> \"line1`nline2`nline3\" | grep -o '[0-9]'\r\n1\r\n2\r\n3\r\n```\r\n\r\nThe equivalent `Select-String` solution is currently cumbersome:\r\n\r\n```powershell\r\nPS> \"line1\", \"line2\", \"line3\" | Select-String '[0-9]' | ForEach-Object { $_.Matches[0].Value }\r\n1\r\n2\r\n3\r\n```\r\n\r\nIf we introduced a switch named, say, ~~`-MatchingPartOnly` (name TBD, could have an alias of `-o`)~~\r\n`-OnlyMatching` (see [decision below](https://github.com/PowerShell/PowerShell/issues/7712#issuecomment-436818795)), the command could be simplified to:\r\n\r\n```powershell\r\nPS> \"line1\", \"line2\", \"line3\" | Select-String '[0-9]' -OnlyMatching\r\n```\r\n\r\nAs an alias, `-om` could be considered (just `-o` could break existing code that used it for `-OutVariable`).\r\n\r\nThis would also speed up processing, because constructing `[Microsoft.PowerShell.Commands.MatchInfo]` instances can be bypassed.\r\n\r\nEnvironment data\r\n----------------\r\n\r\nWritten as of:\r\n\r\n```none\r\nPowerShell Core 6.1.0-preview.4\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Can you approve?",
      "created_at": "2018-09-06T06:57:17Z",
      "updated_at": "2018-09-06T06:57:17Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think this should works  for `-SimpleMatch` too.",
      "created_at": "2018-09-06T07:00:03Z",
      "updated_at": "2018-09-06T07:00:03Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, seems fine to add but should match the grep description of the parameter and call it `-OnlyMatching`",
      "created_at": "2018-11-07T23:41:42Z",
      "updated_at": "2018-11-07T23:41:42Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The OnlyMatching name doesn't correlate with \"output\" \ud83d\ude15 ",
      "created_at": "2018-11-08T04:51:45Z",
      "updated_at": "2018-11-08T04:51:45Z"
    },
    {
      "author": "HumanEquivalentUnit",
      "author_association": "CONTRIBUTOR",
      "body": "> Sometimes all you want Select-String to do is to output only the matching parts of the input lines as strings\r\n\r\nSeems like a lot of the time, that's all I want `-match` to do as well; and this would get roughly as close as my imaginary `-keep` operator (the inverse of `-replace`):\r\n\r\n```powershell\r\nPS C:\\> 'a word and here' | Select-String -AllMatches -MatchingPartOnly -Pattern'\\w{4}'\r\nword\r\nhere\r\nPS C:\\> 'a word and here' | sls -a -m '\\w{4}'\r\nword\r\nhere\r\nPS C:\\> 'a word and here' -keep '\\w{4}'\r\nword\r\nhere\r\n```\r\n\r\n\ud83d\ude03 Yay! ",
      "created_at": "2019-03-27T09:54:12Z",
      "updated_at": "2019-03-27T09:54:12Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@HumanEquivalentUnit, I quite like the idea of a `-keep` (or perhaps `-extract`) operator . Can I suggest you create a feature request for it?",
      "created_at": "2019-03-27T10:05:12Z",
      "updated_at": "2019-03-27T10:05:12Z"
    },
    {
      "author": "HumanEquivalentUnit",
      "author_association": "CONTRIBUTOR",
      "body": "@mklement0 I did; https://github.com/PowerShell/PowerShell/issues/7958 but it looked like a duplicate at the time, of your linked issue which is basically the same request.",
      "created_at": "2019-03-27T11:07:57Z",
      "updated_at": "2019-03-27T11:07:57Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Oops! Completely forgot about #7867's `-matchall` proposal, which is indeed the same in essence - thanks.",
      "created_at": "2019-03-27T11:14:37Z",
      "updated_at": "2019-03-27T11:14:37Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT There's one remaining design question to answer:\r\n\r\n`grep -o` returns _multiple_ matches on each line:\r\n\r\n```\r\n$ echo foo | grep -o o\r\no\r\no\r\n```\r\n\r\nIf we follow this logic, `-OnlyMatching` would effectively invariably imply `-AllMatches`.\r\n\r\nHowever, it may make more sense to have `-OnlyMatching` only report the _first_ match by default, with the option to report _all_ if `-AllMatches` is also specified.\r\n",
      "created_at": "2020-05-27T21:33:19Z",
      "updated_at": "2020-05-27T21:33:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It is related to question about SimpleMatch + AllMatches.",
      "created_at": "2020-05-28T08:46:27Z",
      "updated_at": "2020-05-28T08:46:27Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Yes: here we don't strictly have a backward-compatibility problem, because `-OnlyMatching` will be a new feature.\r\n\r\nTechnically we are therefore free to to support combining `-SimpleMatch` and  `-AllMatches` with `-OnlyMatching` to output all matching literal substrings (even multiple ones on a single line).\r\n\r\nHowever, given the [committee decision](https://github.com/PowerShell/PowerShell/pull/11102#issuecomment-634980498) _not_ to fix #11102 in order to support combining  `-SimpleMatch` and  `-AllMatches`  (in the default, non-`-OnlyMatching` case), this would lead to an awkward asymmetry.\r\n",
      "created_at": "2020-05-28T12:52:50Z",
      "updated_at": "2020-05-28T12:52:50Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "/cc @SteveL-MSFT ",
      "created_at": "2020-05-28T13:14:34Z",
      "updated_at": "2020-05-28T13:14:34Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I believe we could have an symmetry and PowerShell Committee could discuss both cases:\r\n- -SimpleMatch + -AllMatches\r\n- -OnlyMatching + -AllMatches",
      "created_at": "2020-05-28T14:23:28Z",
      "updated_at": "2020-05-28T14:23:28Z"
    },
    {
      "author": "vazome",
      "author_association": "NONE",
      "body": "If someone curious about a current way of doing so,  you can use this:\r\n\r\n```\r\n$value = 'aa' #or even [System.IO.File]::ReadLines($filename)\r\n$options = [Text.RegularExpressions.RegexOptions]::IgnoreCase -bor [Text.RegularExpressions.RegexOptions]::CultureInvariant\r\n$regex = 'REGEX'\r\n$properselectstring = [regex]::Matches($value,$regex,$options)\r\n$properselectstring.value\r\n```",
      "created_at": "2020-08-08T23:58:49Z",
      "updated_at": "2020-08-08T23:58:49Z"
    },
    {
      "author": "Kissaki",
      "author_association": "NONE",
      "body": "This issue is labeled Up-for-Grabs but PR #10696 seems to tackle it? If so, wouldn't it be adequate to remove the up for grabs label?",
      "created_at": "2021-10-16T14:54:01Z",
      "updated_at": "2021-10-16T14:54:01Z"
    }
  ],
  "created_at": "2018-09-05T17:30:34Z",
  "number": 7712,
  "state": "open",
  "title": "Add a switch to Select-String that returns the matching parts only, analogous to grep -o",
  "updated_at": "2021-10-16T14:54:01Z"
}