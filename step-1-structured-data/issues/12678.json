{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12678",
  "author": "vazome",
  "body": "# Summary of the new feature/enhancement\r\nTo bring Get-PowerShell and Update-PowerShell cmdlet that will be capable of downloading and upgrading existing version of PowerShell to the newest. For example: Upgrade from PowerShell 7 to PowerShell 7.1\r\n# Proposed technical implementation details (optional)\r\nCmdlets itself will check for the updates available online (or local repository) and give back an output like:\r\n```The Newest PowerShell update is available:\r\nNewPSVersion 7.0.1\r\nPSVersion 7.0.0\r\n```\r\nAnd some parameters `-silent` and `-whatif` or `-filetype` will do a trick.\r\n![image](https://user-images.githubusercontent.com/46573198/82231290-9deb9580-9935-11ea-8249-c56139c8b87e.png)\r\n\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "In effect you have this already. The PowerShell team have created a simple script you can download like this (doing it the long way!)\r\n```powershell\r\n# Download (once) this script\r\nURI = \"https://aka.ms/install-powershell.ps1\"\r\nInvoke-RestMethod -Uri $URI  |   Out-File -FilePath C:\\Foo\\Install-PowerShell.ps1\r\n# Then run it \r\n$EXTHT = @{\r\n  UseMSI                 = $true\r\n  Quiet                  = $true \r\n  AddExplorerContextMenu = $true\r\n  EnablePSRemoting       = $true\r\n}\r\nC:\\Foo\\Install-PowerShell.ps1 @EXTHT\r\n```\r\n\r\nJust run the script.\r\nYou could even add this to your PowerShell 7 $Profile:\r\n```powershell\r\nC:\\Foo\\Install-PowerShell.ps1 @EXTHT &\r\n```\r\nThat kicks off the install script as a batch job. The script takes only 30-40 seconds, so as long as you are in PowerShell 7, any updates get loaded in the background. Next time you start PowerShell it's upgraded. \r\n\r\nIMHO what would be nice is a simple, and built-in way to test for the update. PowerShell currently prints out a warning message at startup that says there is a new version. If there were a command to, in effect, recreate the test. SO something like **Test-PSVersion** that did the same test and returns true if there IS no newer version and false if there IS a newer version. You could get fancy and have the command determine if the build is preview or daily and do similar (test whether there is a newer daily build or whether there is a newer preview build",
      "created_at": "2020-05-15T10:41:19Z",
      "updated_at": "2020-05-15T10:44:58Z"
    },
    {
      "author": "vazome",
      "author_association": "NONE",
      "body": "It's still a crutch but a good solution!\r\n\r\n> IMHO what would be nice is a simple, and built-in way to test for the update. PowerShell currently prints out a warning message at startup that says there is a new version. If there were a command to, in effect, recreate the test. SO something like **Test-PSVersion** that did the same test and returns true if there IS no newer version and false if there IS a newer version. You could get fancy and have the command determine if the build is preview or daily and do similar (test whether there is a newer daily build or whether there is a newer preview build\r\n\r\nThis is make sense. I think having at least something for \"to do with PoSh updates\" will become useful",
      "created_at": "2020-05-15T12:59:45Z",
      "updated_at": "2020-05-15T13:00:17Z"
    },
    {
      "author": "brotherdust",
      "author_association": "NONE",
      "body": "I think the current warning that Powershell shows at startup when a new version is available is somewhat misleading. It gives you two options: go to this URL, or .... do a command? What command?\r\n\r\nIMO there's a gap in the user story here. The warning would be more helpful if it looked like the following (loose paraphrase):\r\n```\r\nA new version of Powershell, v7.x, has been released.\r\nWould you like update now? [Y/N/D]\r\n[Y]es, update now (you will be informed upon completion)\r\n[N]o, not now, but remind me next time I open Powershell\r\n[D]on't bother me until the next version comes out.\r\n```\r\n",
      "created_at": "2020-05-15T15:24:51Z",
      "updated_at": "2020-05-15T15:25:46Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "out of curiosity, how did you get that prompt? When I run PowerShell 7.0.0, I just get a warning, like this:\r\n![2020-05-16_11-16-11](https://user-images.githubusercontent.com/3630329/82117332-18b28600-9767-11ea-8a57-e8b29f15aef0.png)\r\n",
      "created_at": "2020-05-16T10:19:40Z",
      "updated_at": "2020-05-16T10:19:40Z"
    },
    {
      "author": "brotherdust",
      "author_association": "NONE",
      "body": "> out of curiosity, how did you get that prompt? When I run PowerShell 7.0.0, I just get a warning, like this:\n> \n> ![2020-05-16_11-16-11](https://user-images.githubusercontent.com/3630329/82117332-18b28600-9767-11ea-8a57-e8b29f15aef0.png)\n> \n> \n\nThat\u2019s the prompt I was paraphrasing. Upgrade now OR go to this site?\n\nThe implication here is that there\u2019s some way to upgrade without going to the site; at least that\u2019s what it looks like to me. If there\u2019s not some way to \u201cupgrade now\u201d without going to the site, then the prompt should say, \u201cUpgrade now by going to this site\u201d",
      "created_at": "2020-05-16T18:26:22Z",
      "updated_at": "2020-05-16T18:26:22Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "Ahh,I see.\r\nWell, when i see that message, I just run the Install-Powershell.ps1 file to install the upgrade.",
      "created_at": "2020-05-16T18:58:02Z",
      "updated_at": "2020-05-16T18:58:02Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "`Update` is an approved verb.  It would be very nice to have a built-in `Update-PowerShell` command.  It should support `-WhatIf`.  It should be smart about telling folks what pwsh processes are running on Windows that would necessitate a reboot after install.  It should allow the user the opportunity to close those processes and then proceed.  I would expect that the script suggests exiting the current shell once the installer has started.  It could also take parameters that the installer could use (like enable remoting, add to path, etc).  It could also take a `-Silent` parameter to do a silent install - in which case perhaps the session should end (on Windows at least) to prevent a reboot being required.",
      "created_at": "2020-05-16T20:15:36Z",
      "updated_at": "2020-05-16T20:15:36Z"
    },
    {
      "author": "vazome",
      "author_association": "NONE",
      "body": "> `Update` is an approved verb. It would be very nice to have a built-in `Update-PowerShell` command.\r\n\r\nI forgot about `Update` verb. I have changed the title according to the information you provided. ",
      "created_at": "2020-05-17T08:27:53Z",
      "updated_at": "2020-05-17T08:28:18Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "Update-PowerShell gets my vote. If so - then the command could update the fully installed version, but also be able to update build of the day and preview.  The proposed cmdlet should be able to update ANY install of PowerShell (release, preview, and daily), irrespective of how you install them (msi vs zip).  ",
      "created_at": "2020-05-17T09:06:51Z",
      "updated_at": "2020-05-17T11:44:10Z"
    },
    {
      "author": "vazome",
      "author_association": "NONE",
      "body": "The issue's description was updated to the current conclusion.",
      "created_at": "2020-05-18T15:32:39Z",
      "updated_at": "2020-05-18T15:32:39Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I think an `Update-PowerShell` cmdlet could be made that detects how that running instance was installed and use that same method to update: apt, yum, winget, brew, MS store, etc... in the case it cannot tell, it would just provide a link to the install PowerShell doc.  One potential problem on Windows is due to open file handles, if this cmdlet starts the MSI installer, you would have to close pwsh to update pwsh, but I think because the MSI process is a child process of pwsh, if you close pwsh, it will kill the MSI installer as well.",
      "created_at": "2020-11-17T23:38:27Z",
      "updated_at": "2020-11-17T23:38:27Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "Yes please!\r\n\r\nAnd if you use the MSI, you CAN kill the PowerShell console - and the MSI will continue to work just fine. I use this method all the time to update major versions. I just run Install-PowerShell.ps1 (from Gitub), specify -USEMSI. Then once the MSI has started, I just kill the PowerShell task and click through the installation. ",
      "created_at": "2020-11-18T12:09:40Z",
      "updated_at": "2020-11-18T12:09:40Z"
    },
    {
      "author": "peppekerstens",
      "author_association": "NONE",
      "body": "updated #11222 with a suggestion for a solution",
      "created_at": "2020-12-10T11:02:46Z",
      "updated_at": "2020-12-10T11:02:46Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@doctordns, even without `-UseMsi` a solution is possible on Windows, although the user experience won't be as smooth as on Unix-like platforms (where updating in-place works, even run from the version being replaced):\r\n\r\n* Let `Update-PowerShell` reinvoke itself asynchronously, in a new window, via `Start-Process powershell.exe`\r\n* `exit` the original PS Core session so that no files to be updated are locked.\r\n* If updating succeeds in the `powershell.exe` session, asynchronously launch `Start-Process pwsh` and `exit`.\r\n\r\n",
      "created_at": "2021-01-31T20:26:00Z",
      "updated_at": "2021-02-01T16:02:40Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "That could work.",
      "created_at": "2021-02-01T13:58:15Z",
      "updated_at": "2021-02-01T13:58:15Z"
    },
    {
      "author": "kirsan31",
      "author_association": "NONE",
      "body": "@doctordns\r\n> In effect you have this already. The PowerShell team have created a simple script you can download like this (doing it the long way!)\r\n> \r\n> ```powershell\r\n> # Download (once) this script\r\n> URI = \"https://aka.ms/install-powershell.ps1\"\r\n> Invoke-RestMethod -Uri $URI  |   Out-File -FilePath C:\\Foo\\Install-PowerShell.ps1\r\n> # Then run it \r\n> $EXTHT = @{\r\n>   UseMSI                 = $true\r\n>   Quiet                  = $true \r\n>   AddExplorerContextMenu = $true\r\n>   EnablePSRemoting       = $true\r\n> }\r\n> C:\\Foo\\Install-PowerShell.ps1 @EXTHT\r\n> ```\r\n> \r\n> Just run the script.\r\n> That kicks off the install script as a batch job. The script takes only 30-40 seconds, so as long as you are in PowerShell 7, any updates get loaded in the background. Next time you start PowerShell it's upgraded.\r\n\r\nI think there a small typo, must be `$URI = `.\r\nAlso, after successfully running this script from PS 7.1.1 (7.1.2 available and while script was working, I saw that the 7.1.2 was downloaded), I still have 7.1.1 installed...\r\n",
      "created_at": "2021-02-15T07:19:28Z",
      "updated_at": "2021-02-15T07:19:28Z"
    },
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "I have long used that install script to update my workstation and VMs. I also use it to install the latest preview edition and the latest daily build.  And for me, this is a work around. \r\n\r\nThat said, an `Update-PowerShell` command has long been requested and is likely to keep on being requested. Despite the many ways you can update PowerShell, the request for this feature remains constant. AND, VS Code manages to do it, so I guess the question is why not the console too?\r\n",
      "created_at": "2021-02-15T11:22:25Z",
      "updated_at": "2021-02-15T11:22:25Z"
    },
    {
      "author": "kirsan31",
      "author_association": "NONE",
      "body": "@doctordns \r\nIt worked for me from pure PS with admins rights. Previously attempt was from Windows Terminal PS without admin rights...",
      "created_at": "2021-02-15T11:34:31Z",
      "updated_at": "2021-02-15T11:34:31Z"
    },
    {
      "author": "GrosSacASac",
      "author_association": "NONE",
      "body": "Where is the new powershell located after running the command winget upgrade pwsh ?",
      "created_at": "2022-02-17T18:01:24Z",
      "updated_at": "2022-02-17T18:01:24Z"
    }
  ],
  "created_at": "2020-05-15T10:33:16Z",
  "number": 12678,
  "state": "open",
  "title": "Feature Request: Get-PowerShell and Update-PowerShell to update PoSh version right from CLI",
  "updated_at": "2022-02-17T18:01:24Z"
}