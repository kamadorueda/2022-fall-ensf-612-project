{
  "_url": "https://github.com/PowerShell/PowerShell/issues/726",
  "author": "vors",
  "body": "FlashExtact is MSR project.\n@LeeHolmes originally took code of the project instead of nuget dependencies, because of the Windows build requirements.\n\nWe should replace FlashExtract sources by Nuget packages and bring the code for `ConvertFrom-String`.\n",
  "closed_at": "2022-07-08T09:01:17Z",
  "comments": [
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "We also need to figure out licensing for this component.\n",
      "created_at": "2016-03-23T00:05:23Z",
      "updated_at": "2016-03-23T00:05:23Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Home page: https://microsoft.github.io/prose/\nNuget packages: https://www.nuget.org/packages/Microsoft.ProgramSynthesis/\n",
      "created_at": "2016-04-05T02:10:41Z",
      "updated_at": "2016-04-05T02:10:41Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "To be clear, this is what we need for `ConvertFrom-String`\n",
      "created_at": "2016-05-12T21:12:25Z",
      "updated_at": "2016-05-12T21:12:25Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Moving it to Future.\nWe are probably do it as a separate module and ship thru the gallery.\n",
      "created_at": "2016-07-15T00:08:27Z",
      "updated_at": "2016-07-15T00:08:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Home page: https://microsoft.github.io/prose/\n> Nuget packages: https://www.nuget.org/packages/Microsoft.ProgramSynthesis/\n\nIt seems this project for a long time had no updates. Is it frozen?\n",
      "created_at": "2016-09-21T08:55:49Z",
      "updated_at": "2016-09-21T08:56:25Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I see now ProgramSynthesis lives! Current version is 4.0.0.\r\nCan we get any progress with the Issue?",
      "created_at": "2017-10-07T18:28:43Z",
      "updated_at": "2017-10-07T18:28:43Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Don't think we'll get to this for 6.0.0, putting it in 6.1.0 for now",
      "created_at": "2017-10-07T23:45:41Z",
      "updated_at": "2017-10-07T23:45:41Z"
    },
    {
      "author": "AceHack",
      "author_association": "NONE",
      "body": "This is a really important feature, I am sad to see it moved to 6.2",
      "created_at": "2018-04-15T04:37:22Z",
      "updated_at": "2018-04-15T04:37:22Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@AceHack we need an OSS implementation of the FlashExtract engine before we can port this to PSCore6",
      "created_at": "2018-04-15T05:37:36Z",
      "updated_at": "2018-04-15T05:37:36Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Looks like https://www.nuget.org/packages/Microsoft.ProgramSynthesis/ has been getting regular updates, so this is viable.",
      "created_at": "2019-03-27T21:02:41Z",
      "updated_at": "2019-03-27T21:02:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Can MSFT share again the code of Convert-String and Convert-From-String that was removed from the repo?",
      "created_at": "2019-03-28T04:13:22Z",
      "updated_at": "2019-03-28T04:13:22Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov Let me see if I can add it back, the problem is making sure to remove any use of private APIs...",
      "created_at": "2019-03-28T06:04:59Z",
      "updated_at": "2019-03-28T06:04:59Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov I took a look at this.  The Windows PowerShell code for `ConvertFrom-String` and `Convert-String` is 90% proprietary code with 10% being the cmdlet code that calls a wrapper class to do the actual work.  It may be easier to just create a new set of cmdlets for similar functionality.",
      "created_at": "2019-03-28T20:59:41Z",
      "updated_at": "2019-03-28T20:59:41Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I'm not sure that's really worth the effort. In every case where I've tried to use that cmdlet for anything more than the simplest tasks, I've ended up giving up after a good hour or so and just using regex instead.\r\n\r\nA simple cmdlet to generate PSCustomObjects from strings via a regex pattern and match groups would be far more useful (if pretty straightforward) in my opinion.",
      "created_at": "2019-03-28T21:54:30Z",
      "updated_at": "2019-03-28T21:54:30Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Please clarify - can we re-implement the cmdlets (with same names) or we need create new cmdlets (with new names)? For first case we need you share Pester tests to ensure compatibility.",
      "created_at": "2019-03-29T03:55:17Z",
      "updated_at": "2019-03-29T03:55:17Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov It's not clear to me how many people actually used those cmdlets that we would need to retain syntax.  I've always found them difficult to use with inconsistent results, so I didn't use them much myself.  My suggestion would be to start with understanding the use cases and optimizing for that rather than focusing on compatibility.  Looking in the old code base, there isn't much tests besides some basic ones:\r\n\r\n```powershell\r\nDescribe \"DelimitedText\" -tags 'DRT' {\r\n\r\n    It \"verifies automatic property generation\" {\r\n            \r\n        $result = \"Hello 9\", \"Hello 10\", \"Hello 90\" | ConvertFrom-String\r\n        \r\n        ## Verify first properties got extracted\r\n        $result[0].P1 | Should be 'Hello'\r\n        $result[1].P1 | Should be 'Hello'\r\n        $result[2].P1 | Should be 'Hello'\r\n        \r\n        ## Verify second properties got extracted\r\n        $result[0].P2 | Should be 9\r\n        $result[1].P2 | Should be 10\r\n        $result[2].P2 | Should be 90\r\n\t}\r\n\r\n    It \"verifies property overflow generation\" {\r\n            \r\n        $result = \"Hello 9\" | ConvertFrom-String -PropertyNames A\r\n        \r\n        $result.A | Should be 'Hello'\r\n        $result.P2 | Should be 9\r\n\t}\r\n\r\n    It \"verifies property renaming\" {\r\n            \r\n        $result = \"Hello 9\" | ConvertFrom-String -PN B,C\r\n        \r\n        $result.B | Should be 'Hello'\r\n        $result.C | Should be '9'\r\n\t}\r\n\r\n    It \"verifies property typing of numbers\" {\r\n            \r\n        $result = \"Hello 9\" | ConvertFrom-String -Property B,C\r\n        $result.C.GetType().FullName | Should be 'System.Byte'\r\n\t}\r\n    \r\n    It \"verifies property typing of TimeSpan\" {\r\n            \r\n        $result = \"Hello 1:00\" | ConvertFrom-String -Property B,C\r\n        $result.C.GetType().FullName | Should be 'System.TimeSpan'\r\n\t}\r\n\r\n    It \"verifies property typing of DateTime\" {\r\n            \r\n        $result = \"Hello 1/1/2012\" | ConvertFrom-String -Property B,C\r\n        $result.C.GetType().FullName | Should be 'System.DateTime'\r\n\t}\r\n\r\n    It \"verifies property typing of Char\" {\r\n            \r\n        $result = \"Hello A\" | ConvertFrom-String -Property B,C\r\n        $result.C.GetType().FullName | Should be 'System.Char'\r\n\t}\r\n    \r\n    It \"verifies empty strings don't turn into INTs\" {\r\n            \r\n        $result = \"Hello\" | ConvertFrom-String -Delimiter 'l'\r\n        $result.P2.GetType().FullName | Should be 'System.String'\r\n\t}   \r\n\r\n    It \"verifies property typing of String\" {\r\n            \r\n        $result = \"Hello World\" | ConvertFrom-String -Property B,C\r\n        $result.C.GetType().FullName | Should be 'System.String'\r\n\t}\r\n    \r\n    It \"verifies the ability to change the delimiter\" {\r\n            \r\n        $result = \"Hello-World\" | ConvertFrom-String -Delimiter '-'\r\n        $result.P1 | Should be 'Hello'\r\n        $result.P2 | Should be 'World'\r\n\t}\r\n    \r\n    It \"verifies that only matching text gets parsed\" {\r\n            \r\n        $result = \"Foo1\",\"Hello1 World1\",\"Hello-World\" | ConvertFrom-String -Delimiter '-'\r\n        $result.P1 | Should be 'Hello'\r\n        $result.P2 | Should be 'World'\r\n        @($result).Count | Should be 1\r\n\t}\r\n    \r\n    It \"verifies that a good error message is returned from an invalid regular expression\" {\r\n            \r\n        try\r\n        {\r\n            $result = \"Hello World\" | ConvertFrom-String -Delimiter '['\r\n        }\r\n        catch\r\n        {\r\n            $errorRecord = $_\r\n        }\r\n        \r\n        $errorRecord.FullyQualifiedErrorId | Should be \"InvalidRegularExpression,Microsoft.PowerShell.Commands.StringManipulation.ConvertFromStringCommand\"\r\n\t}   \r\n}\r\n\r\n$here = Split-Path -Parent $MyInvocation.MyCommand.Path\r\n$data = Join-Path $here \"StringManipulationData\\ConvertString\"\r\n\r\nDescribe \"Convert-String test cases\" -tags 'DRT' {\r\n\t\r\n\tIt \"Changes first and last name with one Example\" {\r\n        \r\n        $result = \"Gustavo Soares\" | Convert-String -Example \"camilla araujo=araujo, c.\"\r\n        $result | Should be \"Soares, G.\"\r\n    }   \r\n\r\n\tIt \"Changes first and last name with one Example, and three inputs\" {\r\n        \r\n        $result = \"Lee Holmes\", \"Gustavo Soares\", \"Sumit Gulwani\", \"Vu Le\" |\r\n            Convert-String -Example \"camilla araujo=araujo, c.\"\r\n        \r\n        $result[0] | Should be \"Holmes, L.\"\r\n        $result[1] | Should be \"Soares, G.\"\r\n\t\t$result[2] | Should be \"Gulwani, S.\"\r\n\t\t$result[3] | Should be \"Le, V.\"\r\n    }\t\r\n\t\t\t\r\n    It \"Changes first and last name with two Examples\" {\r\n        \r\n        $examples = [PSCustomObject] @{ Before = 'camilla araujo'; After = 'araujo, c.' },\r\n            [PSCustomObject] @{ Before = 'lee holmes'; After = 'holmes, l.' }\r\n        $result = \"Gustavo Soares\" | Convert-String -Example $examples\r\n        \r\n        $result | Should be \"Soares, G.\"\r\n    }\r\n\t\r\n\tIt \"Changes first and last name with one dictionary example\" {\r\n\t\t$result = \"Gustavo Soares\" | Convert-String -Example @{ Before = \"camilla araujo\"; After = \"araujo, c.\" }\r\n\t}\r\n\t\r\n\tIt \"Changes first and last name with two dictionary example\" {\r\n\t\t$result = \"Gustavo Soares\" | Convert-String -Example @(@{ Before = \"camilla araujo\"; After = \"araujo, c.\" },@{ Before = \"vu le\"; After = \"le, v.\" })\r\n\t}\r\n\r\n\tIt \"Check invalid text example\" {    \r\n\t\t{ \"Gustavo Soares\" | Convert-String -Example \"camilla araujo\" } | Should Throw\r\n    }\r\n\r\n\tIt \"Check invalid psobject examples\" {\r\n        $examples = Import-Csv $data\\incorrect-examples.csv\r\n        { \"Gustavo Soares\" | Convert-String -Example $examples } | Should Throw        \r\n    }\t\r\n\r\n\tIt \"Replace by empty\" {\r\n        $examples = Import-Csv $data\\replace-name-by-empty.csv\r\n\t\t$result = \"Gustavo Soares\" | Convert-String -Example $examples\r\n        $result.length -eq 0 | Should be true        \r\n    }\t\r\n}\r\n```",
      "created_at": "2019-03-30T15:29:09Z",
      "updated_at": "2019-03-30T15:29:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Thanks! \r\n> My suggestion would be to start with understanding the use cases\r\n\r\nI agree. That the two cmdlets look like a small demo. [PROSE home site](https://microsoft.github.io/prose/) has more samples. Parsing log, trace, tabular files, JSON, YAML.\r\nPROSE implements still many great APIs.",
      "created_at": "2019-03-30T16:12:32Z",
      "updated_at": "2019-03-30T16:12:32Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "> I've always found them difficult to use with inconsistent results\r\n\r\nUnfortunately, that has been my experience as well.",
      "created_at": "2019-03-31T05:35:50Z",
      "updated_at": "2019-03-31T05:35:50Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "What do you have in mind? Remove or improve?",
      "created_at": "2019-03-31T16:31:40Z",
      "updated_at": "2019-03-31T16:31:40Z"
    },
    {
      "author": "AceHack",
      "author_association": "NONE",
      "body": "I would really like to see this or similar functionality in core.",
      "created_at": "2019-03-31T16:56:57Z",
      "updated_at": "2019-03-31T16:56:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The question is how to do it more conveniently.",
      "created_at": "2019-03-31T17:31:14Z",
      "updated_at": "2019-03-31T17:31:14Z"
    },
    {
      "author": "MartinHatch",
      "author_association": "NONE",
      "body": "Am I missing something or don't ConvertTo and ConvertFrom essentially solve the same problem?\r\n\r\ne.g.\r\n`$csv = ConvertFrom-String $stringValue -Format CSV`\r\n\r\nversus\r\n`$csv = ConvertTo-CSV $stringValue`\r\n\r\nI'm also not really that keen about a \"ConvertFrom-String\" given how common a string input can be as it ends up being a swiss-army-knife function .. it has to support a potentially massive number of potential output formats / types.\r\n\r\nMy initial thoughts (although I really haven't analysed this in detail) from a code management/quality perspective to have separate parsing functions from each object.. so it is clear which objects support parsing from a string (and other formats), and which ones do not. \r\n\r\nJust my $0.02 - but would be genuinely interested why it is thought \"ConvertFrom\" is a better approach?",
      "created_at": "2019-06-06T08:28:59Z",
      "updated_at": "2019-06-06T08:29:27Z"
    },
    {
      "author": "htwashere",
      "author_association": "NONE",
      "body": "Hi there, i wonder if there is a new update on this? will we have it in recent powershell version? I am porting some code into Azure function app and would be great to be able to continue to use this...thanks.",
      "created_at": "2019-09-12T13:15:48Z",
      "updated_at": "2019-09-12T13:15:48Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@htwashere You could use a proxing with https://github.com/PowerShell/WindowsCompatibility\n\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/11524380?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicon.ico\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/WindowsCompatibility\">PowerShell/WindowsCompatibility</a></strong></div><div>Module that allows Windows PowerShell Modules to be used from PSCore6 - PowerShell/WindowsCompatibility</div></blockquote>",
      "created_at": "2019-09-13T04:22:06Z",
      "updated_at": "2019-09-13T04:22:08Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "As a proxy solves this problem, but only for Windows. I just came looking for this because I wanted to look at the source code, since it could use some improvements.\r\n\r\nI agree that this cmdlet can be difficult to use; however, it is also of significant value when you are parsing string data, which you end up doing a lot with native executables, of which there are plenty these days on Windows, Linux, and macOS. It is much easier than using `regex` to do the same.\r\n\r\nAnyhow, I wanted to voice my opinion that I think this functionality should be brought forward in an open source command so that we can enhance it without reinventing the wheel.\r\n\r\nAlso for reference, places where I am using this cmdlet right now in Windows PowerShell:\r\n* docker version -- pulling out many details in object format so that I can use those values in automation\r\n* parsing contents of `.sln` and `.csproj` files -- tons of content here, all rich metadata about a solution, and I just want to pull it out and identify what exactly is in the solution so that I can automate the doc generation for that rather than do it manually and have to keep it current",
      "created_at": "2019-10-23T19:17:22Z",
      "updated_at": "2019-10-23T19:19:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">  I wanted to look at the source code\r\n\r\nIt is in `source-deport` git branch.\r\n\r\n> I agree that this cmdlet can be difficult to use\r\n\r\nPerhaps we could design some helper cmdlets.",
      "created_at": "2019-10-24T04:57:59Z",
      "updated_at": "2019-10-24T04:57:59Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "> It is in `source-deport` git branch.\r\n\r\nLink? I browsed to that branch, the only thing a search for `ConvertFromStringCommand` turns up is this issue.",
      "created_at": "2019-10-24T10:47:16Z",
      "updated_at": "2019-10-24T10:47:16Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ":-) You could look history before https://github.com/PowerShell/PowerShell/commit/0db07f84354ef661f2c1a33676e6346248a40e16\r\n\r\nI should say that this will help little because the PROSE engine has been completely rewritten.\r\n",
      "created_at": "2019-10-24T11:14:19Z",
      "updated_at": "2019-10-24T11:14:19Z"
    },
    {
      "author": "LeeHolmes",
      "author_association": "CONTRIBUTOR",
      "body": "I think there's a confusion about what ConvertFrom-String is. It has two modes: a regex / delimiter-based parser that does automatic heuristic type conversion, and a version that does this from templates.\r\n\r\n![image](https://user-images.githubusercontent.com/11475352/139304527-27a5ae33-39a7-4f46-9ea5-6e53a1e79e6b.png)\r\n\r\nWhile the team figures out how to use the new PROSE engine, what about just bringing back the regex / delimiter based mode initially so that the functionality exists, and the community can also enhance / extend it?",
      "created_at": "2021-10-28T17:24:24Z",
      "updated_at": "2021-10-28T17:24:24Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Now PROSE  is multiplatform and nothing blocks owner team to publish the cmdlet on PowerShellGet gallery.",
      "created_at": "2021-10-28T17:31:56Z",
      "updated_at": "2021-10-28T17:31:56Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "Besides the purposed #16257 [`String` >>>Regex>>> `PSCustomObject`](https://github.com/PowerShell/PowerShell/issues/16257), I just created a new request #16677 [Add table support to ConvertFrom-String](https://github.com/PowerShell/PowerShell/issues/16677) for a possible additional `ConvertFrom-String` feature.",
      "created_at": "2021-12-28T15:15:56Z",
      "updated_at": "2021-12-28T15:15:56Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "> It may be easier to just create a new set of cmdlets for similar functionality.\r\n\r\nIf it comes to a new set/cmdlet, `ConvertFrom-Text` might be a proper name.\r\n\r\n",
      "created_at": "2021-12-28T18:21:51Z",
      "updated_at": "2021-12-28T18:21:51Z"
    },
    {
      "author": "jdhitsolutions",
      "author_association": "COLLABORATOR",
      "body": "Under review by the Cmdlet Working Group.",
      "created_at": "2022-06-06T21:12:46Z",
      "updated_at": "2022-06-06T21:12:46Z"
    },
    {
      "author": "jdhitsolutions",
      "author_association": "COLLABORATOR",
      "body": "The Cmdlet Working Group has reviewed this issue. Unfortunately, the original Convert-FromString cmdlet includes proprietary Microsoft software which is not open source. It is not possible to release an open-source version of this command in PowerShell 7. The group would recommend a community contribution in the PowerShell Gallery to replace this cmdlet in PowerShell 7. We are marking this issue as Won't Fix.",
      "created_at": "2022-07-06T15:40:00Z",
      "updated_at": "2022-07-06T15:40:00Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "> It is not possible to release an open-source version of this command in PowerShell 7\r\n\r\nThis brings me to two legal questions:\r\n* Is it allowed to use the same cmdlet name (`ConvertFrom-String`) for a new cmdlet?\r\n* Is it allowed to build a wrapper around the `ConvertFrom-String` cmdlet (without changing the actual cmdlet)?\r\n\r\nI guess that there aren't any restrictions in reusing the cmdlet name (otherwise cmdlet names should be registered somewhere and [command spoofing](https://github.com/PowerShell/PowerShell/issues/17135) shouldn't be that easy)  and making use of the existing code as-is (by using a [proxy command](https://devblogs.microsoft.com/scripting/proxy-functions-spice-up-your-powershell-core-cmdlets/)) shouldn't illegal either.\r\n\r\nIn other words, why not building a *new* open source version of  `ConvertFrom-String` with [new features](https://github.com/PowerShell/PowerShell/issues/726#issuecomment-1002153246) that calls legacy Microsoft `Microsoft.PowerShell.Utility\\ConvertFrom-String` cmdlet version for downwards compatibility (and legal reasons.) of the current features.",
      "created_at": "2022-07-06T17:21:13Z",
      "updated_at": "2022-07-06T17:21:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> In other words, why not building a _new_ open source version of `ConvertFrom-String` with [new features](https://github.com/PowerShell/PowerShell/issues/726#issuecomment-1002153246) that calls legacy Microsoft `Microsoft.PowerShell.Utility\\ConvertFrom-String` cmdlet version for downwards compatibility (and legal reasons.) of the current features.\r\n\r\nThis already works with WinCompat feature.\r\n\r\n",
      "created_at": "2022-07-07T04:00:05Z",
      "updated_at": "2022-07-07T04:00:05Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as won't fix and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2022-07-08T09:01:16Z",
      "updated_at": "2022-07-08T09:01:16Z"
    }
  ],
  "created_at": "2016-03-22T18:14:50Z",
  "number": 726,
  "state": "closed",
  "title": "ConvertFrom-String is missing",
  "updated_at": "2022-07-08T09:01:18Z"
}