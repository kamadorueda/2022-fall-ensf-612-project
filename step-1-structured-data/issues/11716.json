{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11716",
  "author": "JrrRomeroJose",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\nHello all,\r\n\r\nSteps:\r\n\r\n1. load var from xml file.\r\n2. Get all the files on the scripts directory and start a job foreach file.\r\n\r\nso whats wrong?. If I use -parallel the value $SettingsXML.settings.ScriptsPath is gone while if I use -process this will work correctly, the jobs will start and finish without any problem \r\n\r\nExample value:\r\n$SettingsXML.settings.ScriptsPath = C:\\Users\\WhateverUser\\Desktop\\Powershell\\Scripts\r\n\r\n**not quite sure if i am miss using the -pararllel, if that is the case then just ignore this and close it**\r\nI feel like -parallel can only accede to $_.  which i do not know if this is the expected behavior.\r\n\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n#load settings.xml\r\n$path = $PSScriptRoot+\"\\settings.xml\"\r\n[xml]$SettingsXML = Get-Content -Path $path\r\n\r\nGet-ChildItem -Path $SettingsXML.settings.ScriptsPath | ForEach-Object -parallel  `\r\n{\r\n    #test var\r\n    $SettingsXML.Settings.ScriptsPath\r\n    $_.Name\r\n    #job command\r\n    Start-ThreadJob -Name ($_.Name.Replace(\".ps1\",\"\")) -FilePath \"$($SettingsXML.Settings.ScriptsPath)\\$($_.Name)\" -ArgumentList (,$ServerName)\r\n}\r\n```\r\n\r\n\r\n\r\n# Expected behavior\r\n\r\n```none\r\n  The jobs are created and executed.\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none \r\n   as the $SettingsXML.settings.ScriptsPath is gone inside -parallel the job won't start because the path to the others scripts will be wrong\r\n\r\nStart-ThreadJob: \r\nLine |\r\n   4 |      Start-ThreadJob -Name ($_.Name.Replace(\".ps1\",\"\")) -FilePath \"$($ \u2026\r\n\r\n     |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     | Cannot find path 'C:\\whatEverScript.ps1(the script name is correct so $_.name is working)' because it does not exist.\r\n\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0-rc.2\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-rc.2\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```\r\n",
  "closed_at": "2020-01-29T15:41:39Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Because `ForEach-Object -Parallel` executes in different runspaces, variables will typically not be directly available. I believe you can use `$using:varname` to access variables from the wider script. \r\n\r\nWord of warning: I don't know how threadsafe XmlDocument is. Most things work OK if you're just reading from them, but if you run into issues I'd pull the value you're using out into it's own variable rather than having it accessed through the XmlDocument every time. :slightly_smiling_face: ",
      "created_at": "2020-01-29T12:27:42Z",
      "updated_at": "2020-01-29T12:28:06Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Also, note that each execution of a script-block used with `ForEach-Object -Parallel` already _is_ a thread job of sorts, so there's probably no reason to call `Start-ThreadJob` from within it.\r\n\r\nPlease consider closing your question, @JrrRomeroJose; either way, for discoverability, please correct the typo in the title: `where-object` -> `foreach-object`",
      "created_at": "2020-01-29T13:00:35Z",
      "updated_at": "2020-01-29T14:05:26Z"
    },
    {
      "author": "JrrRomeroJose",
      "author_association": "NONE",
      "body": "@mklement0  100% right.",
      "created_at": "2020-01-29T15:41:39Z",
      "updated_at": "2020-01-29T15:41:39Z"
    }
  ],
  "created_at": "2020-01-29T11:37:58Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 11716,
  "state": "closed",
  "title": "foreach-object -parallel working weirdly??",
  "updated_at": "2020-01-29T15:42:17Z"
}