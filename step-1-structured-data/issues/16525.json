{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16525",
  "author": "asaf-frieder",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nI am trying to open a remote WMI session in a powershell script I'm running from a .Net project (using System.Management.Automation.Powershell)\r\nWhen running the script in powershell command line, or running the .net project directly from the visual studio the script works, however when publishing the .net project and running the published version it fails.\r\nI receive the error while attempting to bind a parameter to the New-CimSession cmdlet generated by the New-CimSessionOption cmdlet. The New-CimSessionOption generates an object of type DComSessionOptions which is inherits the expected CimSessionOptions however it seems that it got deserialized (lost fidelity) and therefore the parameter failed to bind.\r\nI have made several attempts to fix this using casting as well as create the dcom options my self and pass it explicitly as DComSessionOptions. In all cases attempting to run New-CimSession fails on the same error.\r\n\r\n`\r\n        $SessionOption = New-CimSessionOption -Culture $Script:InvariantCulture -UICulture $Script:InvariantCulture -Protocol DCOM\r\n        $sessionParameters = @{\r\n            ComputerName = $ComputerAddress\r\n            SessionOption = $DcomOptions\r\n            Credential = $credentials\r\n        }\r\n\r\n        # Create session\r\n        $session = New-CimSession @sessionParameters -ErrorAction SilentlyContinue`\r\n\r\nPublished using:\r\ndotnet publish  C:\\repos\\WMI\\WMITester\\WMITester.csproj -c Release -r win7-x64 -o .\\publish\\WMITester\\win\\Release\\x64 /p:PublishSingleFile=True /p:IncludeNativeLibrariesForSelfExtract=true /p:IncludeAllContentForSelfExtract=true /p:SelfContained=true /p:BuildNumber=8\n\n### Expected behavior\n\n```console\n$session has a valid CimSession\r\n(it happens this way in some modes of running the script)\n```\n\n\n### Actual behavior\n\n```console\n$session is null error detailed bellow.\n```\n\n\n### Error details\n\n```console\nCannot bind parameter 'SessionOption'. Cannot convert value \"Microsoft.Management.Infrastructure.Options.DComSessionOptions\" to type \"Microsoft.Management.Infrastructure.Options.CimSessionOptions\". Error: \"Cannot convert the \"Microsoft.Management.Infrastructure.Options.DComSessionOptions\" value of type \"Deserialized.Microsoft.Management.Infrastructure.Options.DComSessionOptions\" to type \"Microsoft.Management.Infrastructure.Options.CimSessionOptions\"\n```\n\n\n### Environment data\n\n```powershell\n$PSVersionTable.PSVersion 7.1.3\r\n.Net 5.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2021-12-01T10:47:32Z",
  "comments": [
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "It might be good to share your `csproj` file to see how you are referencing the PowerShell library in your dotnet application. What it looks like is you might be including the pwsh library but none of the extras that `pwsh` actually ships with which includes the assembly where the CIM cmdlets are implemented. In this case `pwsh` will automatically import the CIM cmdlets from the Windows PowerShell install through a PSRemoting setup on localhost which is why each individual command creates a deserialized instance.\r\n\r\nThis is mostly used as a backwards compatibility implementation for older cmdlets that haven't been updated to support .NET Core 3+ but in your case I think it's pulling in the older version that is included with Windows PowerShell rather than the ones shipped by PowerShell 7. To test this theory out I would run the following and provide back what it outputs:\r\n\r\n```powershell\r\nImport-Module CimCmdlets -PassThru | Select-Object Name, ModuleType, Path\r\n```\r\n\r\nIn a working case you should see the following:\r\n\r\n```\r\nName       ModuleType Path\r\n----       ---------- ----\r\nCimCmdlets     Binary C:\\Program Files\\PowerShell\\7\\Microsoft.Management.Infrastructure.CimCmdlets.dll\r\n```\r\n\r\nIn a broken case either the `Path` or `ModuleType` might be different meaning it's not picking up the actual `pwsh` shipped binary.",
      "created_at": "2021-11-28T18:52:20Z",
      "updated_at": "2021-11-28T18:52:20Z"
    },
    {
      "author": "asaf-frieder",
      "author_association": "NONE",
      "body": "[RunScript.zip](https://github.com/PowerShell/PowerShell/files/7619087/RunScript.zip)\r\nHi\r\nI have added Microsoft.Management.Infrastructure.CimCmdlets.dll as a dependency to the project (choosing 7.1.3 to match the powershell version) and it didn't help.\r\nI have attempted to print the output of \"Import-Module CimCmdlets -PassThru | Select-Object Name, ModuleType, Path\" but it did not show any output. However, when running the published executable it extracts all the dependencies into a library and the dll and properties->Details says it is of version 7.1.3 (both before and after the change).\r\nI have added a project that just runs a simplified script that attempts to create the session. Like the original the project works from visual studio and fails in the published version (the actual credentials/ip have been replaced but are not needed to reach the error). ",
      "created_at": "2021-11-29T15:29:04Z",
      "updated_at": "2021-11-29T15:29:04Z"
    },
    {
      "author": "jborean93",
      "author_association": "COLLABORATOR",
      "body": "Thanks for the reproducer that really helps. So when testing the output of `dotnet publish` vs the `dotnet publish` with the extra arguments I found that the dll no longer exists in the expected directory\r\n\r\n![image](https://user-images.githubusercontent.com/8462645/143946472-06f037e1-94e5-4672-b3ef-4d6ffbf3f8b6.png)\r\n\r\nThe left is just `dotnet publish` whereas the right is the publish step with your extra arguments. You can see that it no longer contains `Microsoft.Management.Infrastructure.CimCmdlets.dll` and thus it will fallback to `CimCmdlets` through Windows PowerShell through the implicit remoting session. This is why the CimSession options you get back is a serialized object and thus won't work with `New-CimSession`. Just to 100% verify this I can see the following when adding the following to the script being run\r\n\r\n```powershell\r\n[Console]::WriteLine((Get-Module -Name CimCmdlets | Select Name, ModuleType, Path | Out-String))\r\n```\r\n\r\n```\r\n# With your extra publish arguments\r\n# Notice how this is a Script and is a \"proxy\" module\r\nName       ModuleType Path\r\n----       ---------- ----\r\nCimCmdlets     Script C:\\Users\\vagrant-domain\\AppData\\Local\\Temp\\2\\remoteIpMoProxy_CimCmdlets_1.0.0.0_localhost_b61e21e.\r\n\r\n# Just dotnet publish by itself\r\n# This is a binary module pointing towards the dll as expected\r\nName       ModuleType Path\r\n----       ---------- ----\r\nCimCmdlets     Binary C:\\temp\\test\\bin\\Debug\\net5.0\\runtimes\\win\\lib\\net5.0\\Microsoft.Management.Infrastructure.CimCmdl.\r\n```\r\n\r\nUnfortunately at this point it's a bit beyond my understanding of how all this is meant to be done with `dotnet publish` but there certainly is a problem with your built artifact not containing the required assemblies. It might just need some extra tweaks to the `.csproj` but someone more knowledgeable in these matters would have to help with that.",
      "created_at": "2021-11-29T21:40:20Z",
      "updated_at": "2021-11-29T21:40:28Z"
    },
    {
      "author": "asaf-frieder",
      "author_association": "NONE",
      "body": "Thank you for your help. As soon as I add the parameter \"-r win7-x64\" with no other parameters the version reaches the Deserialized error. I have also checked the other runtimes that can be used of my machine (such as win10-x64 and win10-x86) and they all reach the same error.\r\n\r\nI have examined the difference between the folders created by publishing with a specific runtime, hence A, and without (which works), hence B) which works. In A Microsoft.Management.Infrastructure.CimCmdlets.dll does exist directly under the publish folder. In B it can be found **instead** under **publish\\runtimes\\win\\lib\\net5.0** (which fits the path you got from get-module*).\r\nWhen I look at the RunScript.deps.json for both B and **A** it says that the dll should be in:\r\nruntimes/win/lib/net5.0/Microsoft.Management.Infrastructure.CimCmdlets.dll\r\nalthough it wasn't put there in A by the publish. When attempting to copy the dlls from this location from B to A it didn't help. \r\n\r\nUnfortunately, I will not be able to use a publish without parameters. I'm adding the wmi connection to an existing project that is expected to remain self contained and that option does not exist without specifying a runtime.\r\n\r\n* I still can't see the output of [Console]::WriteLine((Get-Module -Name CimCmdlets | Select Name, ModuleType, Path | Out-String)) in my attempts to run the project.",
      "created_at": "2021-11-30T10:14:24Z",
      "updated_at": "2021-11-30T10:14:24Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@asaf-frieder This is because the modules are not correctly deployed to the publish folder when you specify `dotnet publish -r <RID>`. A few PowerShell built-in modules are shipped with the `Microsoft.PowerShell.SDK` nuget package, and when running `dotnet build` or `dotnet publish`, the modules will be deployed to `bin\\...\\runtimes\\win\\lib\\net5.0`, next to the `System.Management.Automation.dll`, whose location is `$PSHOME` for the powershell hosted by the application.\r\n\r\nHowever, when build with `dotnet publish -r <RID>`, all powershell assemblies are deployed in a flat list under `<RID>\\publish` folder, but the modules are still at `<RID>publish\\runtimes\\win\\lib\\net5.0`. So `$PSHOME` becomes `<RID>\\publish` and the `Modules` folder is missing from there.\r\n\r\nThis is a known issue, and it was done so because\r\n1. There was no way (at least at the time when doing this) for a nuget package to choose where to deploy some content files depending on whether or not `-runtime` is specified.\r\n2. Most applications that need to host PowerShell care more about `dotnet publish` scenario due to cross-platform portability.\r\n\r\nSo, the decision was made to accommodate `dotnet build` and `dotnet publish`, and leave `dotnet publish -r <RID>` broken.\r\n\r\nThe workaround is simple, just have a post-build script that copy the `Modules` folder from `<RID>publish\\runtimes\\win\\lib\\net5.0` to `<RID>publish`.",
      "created_at": "2021-11-30T23:06:36Z",
      "updated_at": "2021-11-30T23:32:57Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "/cc @adityapatwardhan ",
      "created_at": "2021-11-30T23:06:53Z",
      "updated_at": "2021-11-30T23:06:53Z"
    },
    {
      "author": "asaf-frieder",
      "author_association": "NONE",
      "body": "Thank you, copying the Modules directory solved the issue.",
      "created_at": "2021-12-01T10:47:32Z",
      "updated_at": "2021-12-01T10:47:32Z"
    },
    {
      "author": "ALIENQuake",
      "author_association": "NONE",
      "body": "@asaf-frieder You might want to take look at my attempt at post-build script: https://github.com/PowerShell/PowerShell/issues/15274#issuecomment-965668023\r\n\r\n@daxian-dbw Thanks for a detailed explanation, I was actually wondering why it works as it is. Is there a right place where documentation would mention this?",
      "created_at": "2021-12-01T18:38:35Z",
      "updated_at": "2021-12-01T18:38:35Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "That's a good question :)\r\nI'm not sure if this should be documented, because essentially, it's something we want to fix. But OTOH, documenting the current behavior may help people to avoid running into a weird error like this one ...\r\n\r\nCan you please open an issue in the [PowerShell Doc repo](https://github.com/MicrosoftDocs/PowerShell-Docs)? We will let the doc folks to triage to see if this should be documented.",
      "created_at": "2021-12-01T20:26:15Z",
      "updated_at": "2021-12-01T20:26:15Z"
    },
    {
      "author": "ALIENQuake",
      "author_association": "NONE",
      "body": "@daxian-dbw Done, https://github.com/MicrosoftDocs/PowerShell-Docs/issues/8382 , thanks!",
      "created_at": "2021-12-01T21:05:48Z",
      "updated_at": "2021-12-01T21:05:48Z"
    },
    {
      "author": "dnldelRey",
      "author_association": "NONE",
      "body": "<!--\n/* Font Definitions */\n@font-face\n\t{font-family:\"Cambria Math\";\n\tpanose-1:2 4 5 3 5 4 6 3 2 4;}\n@font-face\n\t{font-family:Calibri;\n\tpanose-1:2 15 5 2 2 2 4 3 2 4;}\n/* Style Definitions */\np.MsoNormal, li.MsoNormal, div.MsoNormal\n\t{margin:0cm;\n\tfont-size:11.0pt;\n\tfont-family:\"Calibri\",sans-serif;}\na:link, span.MsoHyperlink\n\t{mso-style-priority:99;\n\tcolor:blue;\n\ttext-decoration:underline;}\n.MsoChpDefault\n\t{mso-style-type:export-only;}\n@page WordSection1\n\t{size:612.0pt 792.0pt;\n\tmargin:70.85pt 3.0cm 70.85pt 3.0cm;}\ndiv.WordSection1\n\t{page:WordSection1;}\n-->\u00a0Thanks bby\u00a0Enviado desde Correo para Windows\u00a0De: ALIENQuakeEnviado: mi\u00e9rcoles, 1 de diciembre de 2021 01:07 p. m.Para: PowerShell/PowerShellCC: SubscribedAsunto: Re: [PowerShell/PowerShell] Cannot convert value, Deserialized when running powershell from a pulished .net project (Issue ***@***.*** Done, MicrosoftDocs/PowerShell-Docs#8382 , thanks!\u2014You are receiving this because you are subscribed to this thread.Reply to this email directly, view it on GitHub, or unsubscribe.Triage notifications on the go with GitHub Mobile for iOS or Android. \u00a0",
      "created_at": "2021-12-01T22:24:39Z",
      "updated_at": "2021-12-02T03:50:51Z"
    }
  ],
  "created_at": "2021-11-28T12:23:56Z",
  "number": 16525,
  "state": "closed",
  "title": "Cannot convert value, Deserialized when running powershell from a pulished .net project",
  "updated_at": "2021-12-15T22:28:57Z"
}