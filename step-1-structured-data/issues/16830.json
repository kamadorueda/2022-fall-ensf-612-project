{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16830",
  "author": "zett42",
  "body": "### Summary of the new feature / enhancement\r\n\r\nAs a script developer I would like to use statements such as `switch` at the beginning of a pipeline, e. g.:\r\n~~~powershell\r\n# Wishful thinking\r\n\r\nswitch -File 'input.txt' { \r\n    '--start--'  { $include = $true } \r\n    { $include } { $_ }   # Output included line\r\n    '--end--'    { $include = $false }\r\n} | Set-Content 'output.txt'\r\n~~~\r\n\r\nThis would allow me to use the output of such a statement in a _streaming_ fashion, without having to collect all output into a variable first.\r\n\r\nUnfortunately this produces a **ParserError**:\r\n~~~\r\nLine |\r\n   5 |  } | Set-Content 'output.txt'        \r\n     |    ~\r\n     | An empty pipe element is not allowed.\r\n~~~\r\n\r\nCurrently I have to resort to this **workaround**, which wraps the statement in a **scriptblock**:\r\n~~~powershell\r\n# Workaround\r\n\r\n& { switch -File 'input.txt' { \r\n    '--start--'  { $include = $true } \r\n    { $include } { $_ }   # Output included line\r\n    '--end--'    { $include = $false }\r\n}} | Set-Content 'output.txt'\r\n~~~\r\n\r\nWhile this works, it is not as clean as it could be. Inexperienced users stumbling upon such code have to learn about call operator and script blocks first, before understanding the code.\r\n \r\nThere is also some inconsistency compared to commands and expressions. While the output of a statement can be captured in a variable, it cannot be used _directly_ in a pipeline. Commands and expressions on the other hand have both abilities.\r\n\r\n### Proposed technical implementation details (optional)\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I guess you could use follow workaround:\r\n```powershell\r\n{ switch -File 'input.txt' { \r\n    '--start--'  { $include = $true } \r\n    { $include } { $_ }   # Output included line\r\n    '--end--'    { $include = $false }\r\n}} | Set-Content 'output.txt'\r\n```\r\nThis shows it makes no sense to allow operators in pipelines.",
      "created_at": "2022-02-02T17:33:31Z",
      "updated_at": "2022-02-02T17:33:31Z"
    },
    {
      "author": "zett42",
      "author_association": "NONE",
      "body": "> I guess you could use follow workaround:\r\n> \r\n> ```powershell\r\n> { switch -File 'input.txt' { \r\n>     '--start--'  { $include = $true } \r\n>     { $include } { $_ }   # Output included line\r\n>     '--end--'    { $include = $false }\r\n> }} | Set-Content 'output.txt'\r\n> ```\r\n> \r\n> This shows it makes no sense to allow operators in pipelines.\r\n\r\nNo, you need to use the call `&` or dot sourcing `.` operator in front of the script block, otherwise you will just pipe a `ScriptBlock` object, without executing it.",
      "created_at": "2022-02-02T19:36:59Z",
      "updated_at": "2022-02-02T19:36:59Z"
    },
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "You don't need a scriptblock, a subexpression is fine:\r\n\r\n```\r\n$(switch -File 'input.txt' { \r\n    '--start--'  { $include = $true } \r\n    { $include } { $_ }   # Output included line\r\n    '--end--'    { $include = $false }\r\n}) | Set-Content 'output.txt'\r\n```\r\n\r\n~~But regardless of which workaround you choose, you lose the main benefit of the pipeline where items are streamed as they are being processed.~~ I like the idea but I don't know how practical it is to implement.\r\n\r\n-Edit: I guess I was wrong about that part.",
      "created_at": "2022-02-02T20:34:01Z",
      "updated_at": "2022-02-02T21:15:54Z"
    },
    {
      "author": "zett42",
      "author_association": "NONE",
      "body": "> But regardless of which workaround you choose, you lose the main benefit of the pipeline where items are streamed as they are being processed.\r\n\r\nActually, with the scriptblock workaround, you do get the desired streaming behaviour. Here is a simpler (albeit contrived) example, that can be run as-is:\r\n~~~powershell\r\n'--- subexpression ---'\r\n$( foreach( $i in 0..1 ) { Write-Host \"produce $i\"; $i }\r\n) | ForEach-Object { \"consume $_\" }\r\n\r\n'--- scriptblock ---'\r\n& { foreach( $i in 0..1 ) { Write-Host \"produce $i\"; $i }\r\n} | ForEach-Object { \"consume $_\" }\r\n~~~\r\n\r\nOutput:\r\n~~~\r\n--- subexpression ---\r\nproduce 0\r\nproduce 1\r\nconsume 0\r\nconsume 1\r\n--- scriptblock ---  \r\nproduce 0\r\nconsume 0\r\nproduce 1\r\nconsume 1\r\n~~~\r\n\r\nThe subexpression collects all output into an array first, then passes the array elements one-by-one to the next command in the pipeline.\r\n\r\nThe scriptblock produces one element and the next command in the chain immediately consumes it - as desired. ",
      "created_at": "2022-02-02T21:03:09Z",
      "updated_at": "2022-02-02T21:06:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "My example was not workaround, sorry. My intention was to demonstrate we _have to convert_ a statement to something that PowerShell expects. Parser process the input a statement by statement. In your example, Parser eats `switch` statement and then start to process next statement and recognizes a pipeline with empty first element.\r\nPowerShell language defines [Pipeline](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_pipelines?view=powershell-7.2) as a series of _commands_ connected by pipeline operators. PowerShell expects an expression or an command on first place. Expression has one value (@MartinGC94's example). Command can write to pipeline many values (your workaround).\r\n\r\nSo you request is to auto convert an statement to a command. It is ~impossible~ questionable because this could break _shell_ language. `Enter` is a statement terminator - after you type full switch statement and press `Enter` PowerShell executes the statement. Forcing users to use only ';' as statement terminator is huge breaking change.\r\n",
      "created_at": "2022-02-03T06:19:39Z",
      "updated_at": "2022-02-03T18:26:14Z"
    },
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "> It is impossible because this breaks _shell_ language. `Enter` is a statement terminator\r\n\r\nIt's not impossible, PowerShell already does this with pipelines. This is valid code in newer versions of PowerShell:\r\n```\r\nls C:\\\r\n| Select -First 1\r\n```\r\nAlso, who said it needs to support new lines? The example the OP posted had the pipe on the same line as the closing brace of the switch.",
      "created_at": "2022-02-03T07:29:23Z",
      "updated_at": "2022-02-03T07:29:23Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@MartinGC94 Your example uses _command_ not _statement_.",
      "created_at": "2022-02-03T07:44:32Z",
      "updated_at": "2022-02-03T07:44:32Z"
    },
    {
      "author": "zett42",
      "author_association": "NONE",
      "body": "> So you request is to auto convert an statement to a command. It is impossible because this breaks _shell_ language. `Enter` is a statement terminator - after you type full switch statement and press `Enter` PowerShell executes the statement. Forcing users to use only ';' as statement terminator is huge breaking change.\r\n\r\n> Also, who said it needs to support new lines? The example the OP posted had the pipe on the same line as the closing brace of the switch.\r\n\r\nYes. This is not different from how it currently works for scriptblocks (or commands with scriptblock parameters) in the shell. When pressing Enter after `}`, you can't continue writing pipeline commands. So I don't see a breaking change when converting statement to command.\r\n\r\n~~~powershell\r\n# This doesn't work in shell\r\nForEach-Object { 42 }\r\n| Write-Host\r\n\r\n# But you can write\r\nForEach-Object { 42\r\n} | Write-Host\r\n\r\n# Wishful thinking - no big difference to previous sample\r\nforeach( $i in 0..1 ) { $i\r\n} | Write-Host\r\n~~~\r\n",
      "created_at": "2022-02-03T08:09:41Z",
      "updated_at": "2022-02-03T08:11:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@zett42 The same - your example uses _command_ not _statement_.",
      "created_at": "2022-02-03T08:13:38Z",
      "updated_at": "2022-02-03T08:13:38Z"
    },
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov you are missing the point we are trying to make here.  \r\nYour argument against adding this feature is that the interactive experience would suffer because linebreaks act as statement terminators and that people shouldn't have to use semicolons. We are saying that's not a good argument against this because A: Nobody said we needed it to work on new lines. B: If it should work on new lines then we already have an example of a good implementation of that feature.",
      "created_at": "2022-02-03T10:13:22Z",
      "updated_at": "2022-02-03T10:13:22Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "I remember asking this question a considerable time ago, and the response was that yes it would be nice to allow for / foreach / while / do / if / switch statements to be pipeable it requires a lot of change to make it happen. Too much for the benefit. \r\n\r\nIIRC the grammar of PowerShell says everything is either a _statement_  (loops, conditionals, try / catch , function, filter, break, continue, return, throw etc) or a _pipeline_ which  is either an expression or a command  or one of those two piped to a command.  And of course `& {xxx}`  and  `$( xxx )`  qualify as command and expression respectively even if `xxx` is a statement.  I think it was the changing the nature of statements which was the problem. \r\n\r\n",
      "created_at": "2022-02-03T17:02:44Z",
      "updated_at": "2022-02-03T17:02:44Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "This wouldn't be impossible, so I do think the language work group should discuss it.\r\n\r\n---\r\n\r\nThat said, it would be incredibly challenging. As these are language elements, the compiler generates code for the switch and switch body inline. Everything that would write to the current output pipe is written as `funcContext._outputPipe.Add(item)`.\r\n\r\nConversely, a pipeline is generated as a direct call to `PipelineOps.InvokePipeline` containing all of the pipeline elements (command names, arguments, etc) as raw expressions to be evaluated by that method. There is not an existing concise way (afaik) of spinning up a pipeline without an initial pipeline element and adding to it's input incrementally as the method execution continues (without behavioral changes).\r\n\r\nThat's not to say that it's not possible to add that, but it would take a considerable amount of effort in what is probably the most complicated part of the code base to make happen. Plus the grammar changes that @jhoneill brings up. The workaround of `& { }` is imo pretty ideal as far as workarounds go.\r\n\r\nSo I would personally say it's not worth the effort required.",
      "created_at": "2022-02-03T17:38:31Z",
      "updated_at": "2022-02-03T17:41:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> @iSazonov you are missing the point we are trying to make here.\r\n\r\nThis request comes from the lack of a clear description in the documentation of what a command, a statement, a pipeline and an expression are and how they relate to each other. That's what I tried to explain.\r\nAs for the implementation of this feature, we could implement anything as @SeeminglyScience point. But there are two main questions. To what extent will the request fit the design and the spirit of the language? Are there scenarios where it is very important to have this? I have no doubt that both answers are negative. At the same time, the alternative is well known and simple - `& { }` - as @SeeminglyScience said \" pretty ideal\".",
      "created_at": "2022-02-03T18:27:37Z",
      "updated_at": "2022-02-03T18:27:37Z"
    },
    {
      "author": "zett42",
      "author_association": "NONE",
      "body": "Thanks for the replies! This looked like a seemingly simple change (syntax-wise), but the implementation effort seems to be more than expected. I agree that the benefits do not justify this.",
      "created_at": "2022-02-04T10:03:06Z",
      "updated_at": "2022-02-04T10:03:06Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You could request new conceptual article in PowerShell Docs repository with explanations of fundamental PowerShell conceptions like command, expression, statement, pipeline... It is not so easy but anybody from community could write such guideline.",
      "created_at": "2022-02-04T10:43:41Z",
      "updated_at": "2022-02-04T10:43:41Z"
    },
    {
      "author": "zett42",
      "author_association": "NONE",
      "body": "There is already good article [about_Pipelines](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_pipelines?view=powershell-7.2).\r\nIt has examples how to use expressions as pipeline input.\r\nIt is just missing an example how you can use scriptblock to wrap statements and other complex code at the beginning of a pipeline.",
      "created_at": "2022-02-04T17:27:02Z",
      "updated_at": "2022-02-04T17:27:02Z"
    }
  ],
  "created_at": "2022-02-02T16:14:19Z",
  "number": 16830,
  "state": "open",
  "title": "Piping from statements (using a statement as the first \"command\" of a pipeline)",
  "updated_at": "2022-02-04T17:27:03Z"
}