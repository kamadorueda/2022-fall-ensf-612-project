{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8661",
  "author": "SeeminglyScience",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n$emptyResult = $null | ForEach-Object { }\r\n[Math]::Round($emptyResult)\r\n```\r\n\r\n# Expected behavior\r\n\r\n* Follows normal conversion rules and uses the default value for `int` in place of `$emptyResult`.\r\n\r\n* **Or** at the very least catch the exception from `Expression.Constant` and rethrow as a `nullToObjectInvalidCast` similar to this:\r\n\r\n```\r\n> [System.Reflection.Metadata.MethodDefinitionHandle]$null\r\nCannot convert null to type \"System.Reflection.Metadata.MethodDefinitionHandle\".\r\nAt line:1 char:1\r\n+ [System.Reflection.Metadata.MethodDefinitionHandle]$null\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidArgument: (:) [], RuntimeException\r\n+ FullyQualifiedErrorId : nullToObjectInvalidCast\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nArgument types do not match\r\nAt line:1 char:1\r\n+ [Math]::Round($emptyResult)\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : OperationStopped: (:) [], ArgumentException\r\n+ FullyQualifiedErrorId : System.ArgumentException\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.0-preview.1\r\nPSEdition                      Core\r\nGitCommitId                    6.2.0-preview.1\r\nOS                             Microsoft Windows 10.0.17134\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n# Other details\r\n\r\n```powershell\r\n> $Error[0].Exception.GetBaseException() | Format-List * -Force\r\n\r\nMessage        : Argument types do not match\r\nParamName      :\r\nData           : {System.Management.Automation.Interpreter.InterpretedFrameInfo}\r\nInnerException :\r\nTargetSite     : System.Linq.Expressions.ConstantExpression Constant(System.Object, System.Type)\r\nStackTrace     :    at System.Linq.Expressions.Expression.Constant(Object value, Type type)\r\n                    at System.Management.Automation.Language.DynamicMetaObjectExtensions.CastOrConvertMethodArgument(Dy\r\n                 namicMetaObject target, Type parameterType, String parameterName, String methodName, List`1 temps,\r\n                 List`1 initTemps)\r\n                    at System.Management.Automation.Language.PSInvokeMemberBinder.InvokeMethod(MethodBase mi,\r\n                 DynamicMetaObject target, DynamicMetaObject[] args, Boolean expandParameters, MethodInvocationType\r\n                 invocationInvocationType)\r\n                    at System.Management.Automation.Language.PSInvokeMemberBinder.InvokeDotNetMethod(CallInfo\r\n                 callInfo, String name, PSMethodInvocationConstraints psMethodInvocationConstraints,\r\n                 MethodInvocationType methodInvocationType, DynamicMetaObject target, DynamicMetaObject[] args,\r\n                 BindingRestrictions restrictions, MethodInformation[] mi, Type errorExceptionType)\r\n                    at\r\n                 System.Management.Automation.Language.PSInvokeMemberBinder.FallbackInvokeMember(DynamicMetaObject\r\n                 target, DynamicMetaObject[] args, DynamicMetaObject errorSuggestion)\r\n                    at System.Dynamic.DynamicMetaObject.BindInvokeMember(InvokeMemberBinder binder,\r\n                 DynamicMetaObject[] args)\r\n                    at System.Dynamic.DynamicMetaObjectBinder.Bind(Object[] args, ReadOnlyCollection`1 parameters,\r\n                 LabelTarget returnLabel)\r\n                    at System.Runtime.CompilerServices.CallSiteBinder.BindCore[T](CallSite`1 site, Object[] args)\r\n                    at System.Dynamic.UpdateDelegates.UpdateAndExecute2[T0,T1,TRet](CallSite site, T0 arg0, T1 arg1)\r\n                    at System.Management.Automation.Interpreter.DynamicInstruction`3.Run(InterpretedFrame frame)\r\n                    at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame\r\n                 frame)\r\nHelpLink       :\r\nSource         : System.Core\r\nHResult        : -2147024809\r\n\r\n```\r\n\r\nThis also reproduces in Windows PowerShell 5.1",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@SeeminglyScience Interestingly it does work properly in version 2:\r\n```powershell\r\nPS[2] (4) > $emptyResult = $null | ForEach-Object { }\r\nPS[2] (5) > [Math]::Round($emptyResult)\r\n0\r\n```\r\nThe original intent was that `AutomationNull` should never end up in a variable. It's supposed to be converted to `$null` during the assignment. V2 works properly so it might have been broken in the move to the DLR but it's such an obscure thing no one ever noticed. \r\n",
      "created_at": "2019-01-16T17:39:53Z",
      "updated_at": "2019-01-16T17:39:53Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> V2 works properly so it might have been broken in the move to the DLR but it's such an obscure thing no one ever noticed.\r\n\r\nAh yes, that would make sense since it throws here:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/1be3f4cc0e465ae11ad8e59e9060f5a59e4762eb/src/System.Management.Automation/engine/runtime/Binding/Binders.cs#L254-L257\r\n\r\nIt's not *immediately* apparent that `Expression.Constant` could throw there, very easy to miss.\r\n\r\nThat said, I'm not sure what the desired behavior is exactly.  My first instinct is it should follow conversion rules for `$null`, *but* `AutomationNull` does handle value types a little differently in conversions.\r\n\r\n```powershell\r\n# $null throws without a specific conversion rule (e.g. null to int)\r\n> [System.Reflection.Metadata.MethodDefinitionHandle]$null\r\nCannot convert null to type \"System.Reflection.Metadata.MethodDefinitionHandle\".\r\nAt line:1 char:1\r\n+ [System.Reflection.Metadata.MethodDefinitionHandle]$null\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidArgument: (:) [], RuntimeException\r\n+ FullyQualifiedErrorId : nullToObjectInvalidCast\r\n\r\n# AutomationNull seems to use Expression.Default(type)\r\n> [System.Reflection.Metadata.MethodDefinitionHandle][System.Management.Automation.Internal.AutomationNull]::Value\r\nIsNil\r\n-----\r\n True",
      "created_at": "2019-01-16T19:12:10Z",
      "updated_at": "2019-01-16T19:13:18Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "`AutomationNull` represents the absence of a value which really only makes sense in a stream (pipeline). In a value context, `AutomationNull` is intended to become a `null`. Now `null` in a numeric value context becomes 0 so I assume that the converter for `AutomationNull` skips the intermediate step and is going to the default value for the target type. IIRC we also (but I guess inconsistently) use `default()` for `null` conversion too so there may be a bug in the actual null conversions. @lzybkr might know more.",
      "created_at": "2019-01-17T19:20:46Z",
      "updated_at": "2019-01-17T19:20:46Z"
    }
  ],
  "created_at": "2019-01-16T13:02:41Z",
  "number": 8661,
  "state": "open",
  "title": "Using AutomationNull as a method argument for value type parameter throws incorrect exception",
  "updated_at": "2019-01-17T19:20:46Z"
}