{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16520",
  "author": "IISResetMe",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nThis PR modifies the .NET type adapter to respect [the `IsExternalInit` modifier](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-9.0/init#metadata-encoding) on property setters. \r\n\r\n`IsExternalInit` is the mechanism through which the C# 9.0 specification implements support for init-only setters - properties that can only be set during instantiation, after which they're considered read-only by the compiler.\r\n\r\nBy inspecting the property setter's return parameter we can similarly discover the `IsExternalInit` modifier on runtime types, and change the behavior of ETS to reject attempts to set init-only properties by having `Adapter.PropertyIsSettable()` reflect whether the modifier was found.\r\n\r\n<!-- Summarize your PR between here and the checklist. -->\r\n\r\n## PR Context\r\n\r\n<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->\r\n\r\nAs reported in https://github.com/PowerShell/PowerShell/issues/13819, PowerShell has no current facility for detecting init-only \r\n properties, and what the C# compiler would now treat as read-only properties are suddenly writable/settable at runtime:\r\n\r\n```\r\nPS ~> $PSVersionTable['PSVersion'] -as [string]\r\n7.2.0\r\nPS ~> Add-Type @'\r\n>> public class InitOnlyValue {public long Value {get; init;}}\r\n>> '@\r\nPS ~> $value = [InitOnlyValue]@{ Value = 123 }\r\nPS ~> $value\r\n\r\nValue\r\n-----\r\n  123\r\n\r\nPS ~> $value.Value = 456\r\nPS ~> $value\r\n\r\nValue\r\n-----\r\n  456\r\n\r\nPS ~> $value |Get-Member -MemberType Properties\r\n\r\n   TypeName: InitOnlyValue\r\n\r\nName  MemberType Definition\r\n----  ---------- ----------\r\nValue Property   long Value {get;set;}\r\n\r\n```\r\n\r\nAfter we apply the changes in this PR, PowerShell's behavior reflects that of [C#](https://github.com/dotnet/roslyn/blob/2da789af0f404e15871b6e6e17706185a2707ab4/src/Compilers/CSharp/Portable/Symbols/TypeSymbolExtensions.cs#L1931-L1966) (and [VB.NET](https://github.com/dotnet/roslyn/commit/0a39566fae0541423aa4c7ad3e0cae584f5dcd5c)):\r\n\r\n```\r\nPS ~> $value = [InitOnlyValue]@{ Value = 123 }\r\nPS ~> $value\r\n\r\nValue\r\n-----\r\n  123\r\n\r\nPS ~> $value.Value = 456\r\nInvalidOperation: 'Value' is a ReadOnly property.\r\nPS ~> $value |Get-Member -MemberType Property\r\n\r\n   TypeName: InitOnlyValue\r\n\r\nName  MemberType Definition\r\n----  ---------- ----------\r\nValue Property   long Value {get;}\r\n```\r\n\r\n## PR Checklist\r\n\r\n- [X] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [X] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [X] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [X] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [X] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [X] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and opened an issue in the relevant tool repository. This may include:\r\n        - [ ] Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode\r\n        (which runs in a different PS Host).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n        - [ ] Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n            - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n",
  "closed_at": "2022-02-15T14:42:50Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SeeminglyScience @JustinGrote Please review.",
      "created_at": "2021-11-26T03:19:26Z",
      "updated_at": "2021-11-26T03:19:26Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "> Looks great! I echo @iSazonov's comment about maybe omitting the `initOnly` field. Did the hashtable conversion path (aka object init) code path not need any changes?\r\n\r\nI'm reluctant since it makes the adapter code more readable to have the distinction IMO, but I'm happy to remove it if there are any arguments better than \"technically it's not strictly needed\" available.\r\n\r\nWRT hashtable-initialization: Nope - this is the beauty of using the type adapter - from a hashtable cast, the compiler will generate an expression tree that 1) invokes the default constructor on the target type and then 2) sets the properties and fields subsequently. Since this happens directly against the runtime and not via ETS, our new settability-restriction doesn't apply",
      "created_at": "2021-11-26T14:48:51Z",
      "updated_at": "2021-11-26T14:48:51Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2021-12-08T02:00:42Z",
      "updated_at": "2021-12-08T02:00:42Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "What are we waiting for here? Anything I can do to move it forward?",
      "created_at": "2021-12-31T00:28:33Z",
      "updated_at": "2021-12-31T00:28:33Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw  Can you please review?",
      "created_at": "2022-01-03T18:06:21Z",
      "updated_at": "2022-01-03T18:06:21Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "Looks like the last commit pushed the \"total complexity\" of `CoreAdapter.cs` over some arbitrary threshold determined by CodeFactor.\r\n\r\nJust to set expectations: I am **NOT** going to refactor 6000 lines of half-a-decade-old code as part of this PR ^_^",
      "created_at": "2022-01-07T16:00:34Z",
      "updated_at": "2022-01-07T16:00:57Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2022-01-15T02:00:42Z",
      "updated_at": "2022-01-15T02:00:42Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw \\*nudge nudge* :)",
      "created_at": "2022-01-20T20:50:05Z",
      "updated_at": "2022-01-20T20:50:05Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@IISResetMe Sorry about the delays. I will try to get to this PR next week.",
      "created_at": "2022-01-20T21:39:48Z",
      "updated_at": "2022-01-20T21:39:48Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@IISResetMe Sorry that I won't be able to get to this PR this week. All my pre-allocated PR review time will most likely be spent on https://github.com/PowerShell/PowerShell/pull/12412 this week (I started the review last week and it took more time than I thought). Hopefully, I will get to this PR the next week.",
      "created_at": "2022-01-26T20:27:34Z",
      "updated_at": "2022-01-26T20:28:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> @IISResetMe Sorry that I won't be able to get to this PR this week. All my pre-allocated PR review time will most likely be spent on #12412 this week (I started the review last week and it took more time than I thought). Hopefully, I will get to this PR the next week.\r\n\r\nAh! Who is the person who could double that time besides God? \ud83d\ude04 ",
      "created_at": "2022-01-27T05:21:26Z",
      "updated_at": "2022-01-27T05:21:26Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "Time to commence the @daxian-dbw cloning program :) \r\n\r\nThanks for the heads up, I fully understand",
      "created_at": "2022-01-27T12:41:16Z",
      "updated_at": "2022-01-27T12:41:16Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
      "created_at": "2022-02-03T14:00:48Z",
      "updated_at": "2022-02-03T14:00:48Z"
    },
    {
      "author": "pull-request-quantifier[bot]",
      "author_association": "NONE",
      "body": "### ![](https://img.shields.io/static/v1?label=Quantified&message=Extra%20Small&color=green)\r\n\r\nThis PR has `29` quantified lines of changes. In general, a change size of upto `200` lines is ideal for the best PR experience!\r\n\r\n------\r\n\r\n<details >\r\n    <summary display=\"inline\"> <strong>Quantification details</strong></summary>\r\n    <p />\r\n\r\n```\r\nLabel      : Extra Small\r\nSize       : +27 -2\r\nPercentile : 11.6%\r\n\r\nTotal files changed: 2\r\n\r\nChange summary by file extension:\r\n.cs : +8 -2\r\n.ps1 : +19 -0\r\n```\r\n> Change counts above are quantified counts, based on the [PullRequestQuantifier customizations](https://github.com/microsoft/PullRequestQuantifier/blob/main/docs/prquantifier-yaml.md).\r\n    \r\n</details>\r\n\r\n\r\n<details>\r\n    <summary display=\"inline\"> <strong>Why proper sizing of changes matters</strong> </summary>\r\n    <p/>\r\n    <p/>\r\n\r\nOptimal pull request sizes drive a better predictable PR flow as they strike a\r\nbalance between between PR complexity and PR review overhead. PRs within the\r\noptimal size (typical small, or medium sized PRs) mean:\r\n\r\n- Fast and predictable releases to production:\r\n  - Optimal size changes are more likely to be reviewed faster with fewer\r\niterations.\r\n  - Similarity in low PR complexity drives similar review times.\r\n- Review quality is likely higher as complexity is lower:\r\n  - Bugs are more likely to be detected.\r\n  - Code inconsistencies are more likely to be detetcted.\r\n- Knowledge sharing is improved within the participants:\r\n  - Small portions can be assimilated better.\r\n- Better engineering practices are exercised:\r\n  - Solving big problems by dividing them in well contained, smaller problems.\r\n  - Exercising separation of concerns within the code changes.\r\n\r\n#### What can I do to optimize my changes\r\n\r\n- Use the PullRequestQuantifier to quantify your PR accurately\r\n  - Create a context profile for your repo using the [context generator](https://github.com/microsoft/PullRequestQuantifier/releases)\r\n  - Exclude files that are not necessary to be reviewed or do not increase the review complexity. Example: Autogenerated code, docs, project IDE setting files, binaries, etc. Check out the `Excluded` section from your `prquantifier.yaml` context profile. \r\n  - Understand your typical change complexity, drive towards the desired complexity by adjusting the label mapping in your `prquantifier.yaml` context profile.\r\n  - Only use the labels that matter to you, [see context specification](./docs/prquantifier-yaml.md) to customize your `prquantifier.yaml` context profile.\r\n- Change your engineering behaviors\r\n  - For PRs that fall outside of the desired spectrum, review the details and check if:\r\n    - Your PR could be split in smaller, self-contained PRs instead\r\n    - Your PR only solves one particular issue. (For example, don't refactor and code new features in the same PR).\r\n\r\n#### How to interpret the change counts in git diff output\r\n\r\n- One line was added: `+1 -0`\r\n- One line was deleted: `+0 -1`\r\n- One line was modified: `+1 -1` (git diff doesn't know about modified, it will\r\ninterpret that line like one addition plus one deletion)\r\n- Change percentiles: Change characteristics (addition, deletion, modification)\r\nof this PR in relation to all other PRs within the repository.\r\n\r\n</details>\r\n\r\n<p />\r\n\r\n------\r\n\r\nWas this comment helpful? <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiSUlTUmVzZXRNZSIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xNjUyMCIsIkV2ZW50VHlwZSI6IlRodW1ic1VwIn0=&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs up\"><strong>:thumbsup:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiSUlTUmVzZXRNZSIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xNjUyMCIsIkV2ZW50VHlwZSI6Ik5ldXRyYWwifQ==&amp;anonymous=True\" target=\"_blank\" title=\"Neutral\"><strong>&nbsp;:ok_hand:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiSUlTUmVzZXRNZSIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xNjUyMCIsIkV2ZW50VHlwZSI6IlRodW1ic0Rvd24ifQ==&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs down\"><strong>&nbsp;:thumbsdown:</strong></a> (<a href=\"MAILTO:prquantifier@microsoft.com\" title=\"Mail to prquantifier@microsoft.com\">Email</a>)\r\n[Customize PullRequestQuantifier](https://github.com/PowerShell/PowerShell/blob/master/.github/prquantifier.yaml) for this repository.\r\n\r\n",
      "created_at": "2022-02-05T15:55:45Z",
      "updated_at": "2022-02-05T15:55:45Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "Closed based on @daxian-dbw's comments about consistency (and lack of consensus around what that means in the context of PowerShell for this specific feature)",
      "created_at": "2022-02-15T14:42:50Z",
      "updated_at": "2022-02-15T14:42:50Z"
    }
  ],
  "created_at": "2021-11-25T21:31:11Z",
  "number": 16520,
  "state": "closed",
  "title": "DotNetTypeAdapter - treat init-only properties as non-settable",
  "updated_at": "2022-02-15T14:42:50Z"
}