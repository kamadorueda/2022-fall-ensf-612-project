{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6163",
  "author": "mklement0",
  "body": "In the context of _implicit_ stringification as part of _expandable strings_, `[System.Management.Automation.PSCustomObject]` instances expand to a hashtable-_like_ representation.\r\n\r\nBy contrast, calling `.ToString()` _explicitly_ yields the _empty string_; only `.psobject.ToString()` results in the same representation as when string-expanding.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n$co = [pscustomobject] @{ one = 'for the road' }\r\n\"string-expanded: [$co]\"\r\n\".psobject.ToString: [{0}]\" -f $co.psobject.ToString()\r\n\".ToString: [{0}]\" -f $co.ToString()\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nstring-expanded: [@{one=for the road}]\r\n.psobject.ToString: [@{one=for the road}]\r\n.ToString: [@{one=for the road}]\r\n```\r\n\r\nAll three approaches should result in the same stringification.\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nstring-expanded: [@{one=for the road}]\r\n.psobject.ToString: [@{one=for the road}]\r\n.ToString: []\r\n```\r\n\r\nNote how `$co.ToString()` returned the empty string.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n```powershell\r\nPowerShell Core v6.0.1\r\nWindows PowerShell v5.1\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Just came across a real-world case where this bug can be quite confusing in [this Stack Overflow question](https://stackoverflow.com/q/59427516/45375):\r\n\r\nThe default output formatting for property values that contain `[pscustomobject]`s is a hashtable-_like_ representation:\r\n\r\n``` powershell\r\nPS> [pscustomobject] @{ prop = [pscustomobject] @{ one = 1; two = 2 } }\r\n\r\nprop\r\n----\r\n@{one=1; two=2}   # Note the hashtable-*like* representation\r\n```\r\n\r\nIf property `two`  is instead made to contain _another_ `[pscustomobject]` instance, the bug surfaces:\r\n\r\n```powershell\r\nPS> [pscustomobject] @{ prop = [pscustomobject] @{ one = 1; two = [pscustomobject] @{ three = 3 } } }\r\n\r\nprop\r\n----\r\n@{one=1; two=} # !! .two appears EMPTY now, even though it isn't.\r\n```\r\n\r\nIn the context of visually inspecting nested `[pscustomobject]` instances converted from JSON (see linked post), this gives the mistaken impression that data is missing.\r\n",
      "created_at": "2019-12-20T16:30:21Z",
      "updated_at": "2019-12-20T16:30:21Z"
    }
  ],
  "created_at": "2018-02-15T15:23:10Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Language"
  ],
  "number": 6163,
  "state": "open",
  "title": "Inconsistent stringification of [pscustomobject] instances - calling .ToString() on custom objects yields the empty string",
  "updated_at": "2020-02-07T03:59:36Z"
}