{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12498",
  "author": "mklement0",
  "body": "Input objects that implement `IEquatable<T>` but not also `IComparable<T>` aren't properly compared in terms of equality.\r\n\r\nThe root cause is that a comparison method is used that requires not just an _equality_ test, but one for _ordering_ values: if the `.Equals()` call in `.TryCompareValue()` indicates `false`, the result _isn't_ used (which is appropriate for `Object.Equals()`, but not for `IEquatable<T>.Equals()`) - instead, the code falls back to `.ToString()` comparison, which for types that don't override this method reports the same value - the full type name - for _all_ instances, causing all instances to compare as equal.\r\n\r\nSee https://github.com/PowerShell/PowerShell/blob/16ec1cc32f9e60c9d76b074c865c32a5d2acf5a2/src/System.Management.Automation/engine/LanguagePrimitives.cs#L883 and https://github.com/PowerShell/PowerShell/blob/16ec1cc32f9e60c9d76b074c865c32a5d2acf5a2/src/Microsoft.PowerShell.Commands.Utility/commands/utility/ObjectCommandComparer.cs#L222\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n# Define class Foo that wraps an integer and implements IEquatable<T>\r\n# to return true if two instances wrap the same integer value.\r\nAdd-Type 'public class Foo : System.IEquatable<Foo> { public int Bar = 0; public bool Equals(Foo other) { return Bar == other.Bar; } public override bool Equals(object o) { return o is Foo && Equals((Foo) o); } public override int GetHashCode() { return Bar; } }'\r\n\r\n$o1 = [Foo]::new(); $o1.Bar = 1\r\n$o2 = [Foo]::new(); $o2.Bar = 2\r\n\r\n# OK\r\n$o1.Equals($o2) | Should -BeFalse\r\n\r\n# FAILS, because $o1 and $o2 are unexpectedly considered equal.\r\nCompare-Object $o1 $o2 | Should -Not -BeNullOrEmpty\r\n```\r\n\r\n# Expected behavior\r\n\r\nBoth tests should succeed.\r\n\r\n# Actual behavior\r\n\r\nThe 2nd test fails, because `$o1` and `$o2` are unexpectedly considered equal, so `Compare-Object` produces no output. \r\n\r\n```none\r\nExpected a value, but got $null or empty.\r\n```\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core 7.1.0-preview.2\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "\"Ordering\" is a fundamental nature of the cmdlet. I wonder why you ask about equality for it. \r\nAlso if you implement a class a best practice is to implement ToString() method.",
      "created_at": "2020-04-28T06:36:50Z",
      "updated_at": "2020-04-28T06:36:50Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> \"Ordering\" is a fundamental nature of the cmdlet.\r\n\r\nThe cmdlet offers you to determine _equal_ and _different_ objects - where do you see _ordering_ (except in the _implementation_)?\r\n\r\n> Also if you implement a class a best practice is to implement ToString() method.\r\n\r\nEven if you do override `.ToString()`, signaling equality via instances' string representations is not the appropriate mechanism - that is what `IComparable` and / or `IEquatable` are for.\r\n",
      "created_at": "2020-04-28T06:50:43Z",
      "updated_at": "2020-04-28T07:03:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ":-) Sorry, my first thoughts was about output with \"=>\".",
      "created_at": "2020-04-28T07:22:54Z",
      "updated_at": "2020-04-28T07:23:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Windows PowerShell has the same behavior. Fixing `TryCompare()` would be a breaking change and not only in the scenario. There is a `Compare()` method too with the same behavior. I believe the design was to implement exactly `compare`, not `equality` in the methods and throw if objects are not comparable. I believe we could create Equals() methods in the call tree and use it in Compare-Object cmdlet.",
      "created_at": "2020-04-28T17:50:52Z",
      "updated_at": "2020-04-28T17:50:52Z"
    }
  ],
  "created_at": "2020-04-26T19:49:07Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets-Utility"
  ],
  "number": 12498,
  "state": "open",
  "title": "Compare-Object doesn't respect IEquatable<T>",
  "updated_at": "2021-01-16T10:48:51Z"
}