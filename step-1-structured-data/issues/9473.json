{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9473",
  "author": "Agazoth",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n $Header = @{\r\nAuthorization = \"Basic <MyToken>\"\r\n\"Content-Type\" =  \"application/json\"\r\n}\r\nInvoke-RestMethod -Uri https://MyOrg.freshservice.com/api/v2/assets/1511/delete_forever -headers $header -method PUT\r\n\r\n\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\n\r\n```\r\nThe API returns nothing when deleting an entry\r\n\r\n# Actual behavior\r\n\r\n```ps\r\nInvoke-RestMethod : {\"message\":\"Content-Type header should have application/json\",\"code\":\"invalid_content_type\"}\r\nAt line:1 char:1\r\n+ Invoke-RestMethod @Params\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidOperation: (Method: PUT, Reques\\u2026PowerShell/6.2.0\r\n}:HttpRequestMessage) [Invoke-RestMethod], HttpResponseException\r\n+ FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeRestMethodCommand\r\n```\r\n\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```ps\r\nPS C:\\> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.0\r\nPSEdition                      Core\r\nGitCommitId                    6.2.0\r\nOS                             Microsoft Windows 10.0.18362\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n![image](https://user-images.githubusercontent.com/15127301/56816761-7c100400-6844-11e9-95bd-46e8fcb5d1fb.png)\r\n\r\n    ",
  "closed_at": "2019-07-02T19:01:07Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "From what I remember, I think you need to specify the `-ContentType application/json` _parameter_ rather than supply it as a header. \ud83d\ude42 \r\n",
      "created_at": "2019-04-26T15:31:26Z",
      "updated_at": "2019-04-26T15:31:26Z"
    },
    {
      "author": "Agazoth",
      "author_association": "NONE",
      "body": "Nope. Same result:\r\n\r\n```ps\r\nPS C:\\> $header\r\n\r\nName                           Value\r\n----                           -----\r\nAuthorization                  Basic <My Token>\r\n\r\nPS C:\\> Invoke-RestMethod -Uri 'https://MyOrg.freshservice.com/api/v2/assets/1510/delete_forever' -Headers $Header -Method PUT -ContentType 'application/json'\r\nInvoke-RestMethod : {\"message\":\"Content-Type header should have application/json\",\"code\":\"invalid_content_type\"}\r\nAt line:1 char:1\r\n+ Invoke-RestMethod -Uri 'https://cloudeon.freshservice.com/api/v2/asse ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : InvalidOperation: (Method: PUT, Reques\\u2026PowerShell/6.2.0\r\n}:HttpRequestMessage) [Invoke-RestMethod], HttpResponseException\r\n+ FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeRestMethodCommand\r\n```",
      "created_at": "2019-04-26T15:51:31Z",
      "updated_at": "2019-04-26T15:51:31Z"
    },
    {
      "author": "kvprasoon",
      "author_association": "CONTRIBUTOR",
      "body": "Isn't `Delete` method to be used here to delete ?\r\nDoesn't `Put`  method required `-Body` ?\r\n",
      "created_at": "2019-04-26T16:35:59Z",
      "updated_at": "2019-04-26T16:35:59Z"
    },
    {
      "author": "Agazoth",
      "author_association": "NONE",
      "body": "@kvprasoon not on this particular API",
      "created_at": "2019-04-26T16:58:08Z",
      "updated_at": "2019-04-26T16:58:08Z"
    },
    {
      "author": "Agazoth",
      "author_association": "NONE",
      "body": "@kvprasoon I actually did test with a body, but got the same error. As you can ser, the exact same code works in Windows Powershell.",
      "created_at": "2019-04-26T17:00:07Z",
      "updated_at": "2019-04-26T17:00:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@Agazoth Could you look our Pester tests for the method and create repo test in the same way?",
      "created_at": "2019-04-26T17:08:39Z",
      "updated_at": "2019-04-26T17:08:39Z"
    },
    {
      "author": "Agazoth",
      "author_association": "NONE",
      "body": "@iSazonov would love to. Where do I find those?",
      "created_at": "2019-04-26T17:34:26Z",
      "updated_at": "2019-04-26T17:34:26Z"
    },
    {
      "author": "Agazoth",
      "author_association": "NONE",
      "body": "I would have to commit my API key to code repository for that to happen. ",
      "created_at": "2019-04-26T17:59:57Z",
      "updated_at": "2019-04-26T18:02:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Look `WebCmdlets.Tests.ps1` file and our test module in `test\\tools\\WebListener\\` - we use the module to emulate server side (and you have not to commit private API key).\r\n\r\n/cc @markekraus ",
      "created_at": "2019-04-26T20:02:18Z",
      "updated_at": "2019-04-26T20:02:44Z"
    },
    {
      "author": "Agazoth",
      "author_association": "NONE",
      "body": "Don't get the error there:\r\n\r\n```ps\r\nPS C:\\dev\\PowerShell> Invoke-RestMethod -Uri http://127.0.0.1:8083/Put -Method Put -Headers @{Authorization = \"Basic <MyToken>\";\"Content-Type\" =  \"application/json\"}\r\n\r\nargs    :\r\nheaders : @{User-Agent=Mozilla/5.0 (Windows NT 10.0; Microsoft Windows 10.0.17763; en-US) PowerShell/6.2.0;\r\n          Authorization=Basic <MyToken>; Content-Length=0; Host=127.0.0.1:8083}\r\norigin  : 127.0.0.1\r\nurl     : http://127.0.0.1:8083/Put\r\nmethod  : PUT\r\n```\r\nThat works in both Windows Powershell and Powershell",
      "created_at": "2019-04-26T20:45:02Z",
      "updated_at": "2019-04-26T20:45:02Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "But the `Content-Type` Header was not set, which is the error you are getting, unless the server puts that value somewhere else.",
      "created_at": "2019-04-26T23:10:49Z",
      "updated_at": "2019-04-26T23:10:49Z"
    },
    {
      "author": "Agazoth",
      "author_association": "NONE",
      "body": "@TravisEz13 good point. But it is included in the call.",
      "created_at": "2019-04-27T04:12:10Z",
      "updated_at": "2019-04-27T04:12:10Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "~This a docs issue... `Content-Type` is not supported in `-Headers` and must be supplied to the `-ContentType` parameter instead. Perhaps adding a warning when `Content-Type` is included in the headers dictionary could also be done.~",
      "created_at": "2019-04-27T15:20:42Z",
      "updated_at": "2019-04-27T15:34:57Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "On closer inspection... maybe not...\r\n\r\nI'm not seeing the content type being sent for any calls..... with or without the -ContentType param and on any method....\r\n\r\nLet me dig into this further",
      "created_at": "2019-04-27T15:31:15Z",
      "updated_at": "2019-04-27T15:31:15Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@Agazoth as a temporary work around, do the following:\r\n\r\n```powershell\r\n $Header = @{\r\n  Authorization = \"Basic <MyToken>\"\r\n  \"Content-Type\" =  \"application/json\"\r\n}\r\nInvoke-RestMethod -Uri https://MyOrg.freshservice.com/api/v2/assets/1511/delete_forever -headers $header -method PUT -body ''\r\n```\r\n\r\nCurrently, we do not set a content-type if there is no body present... but setting an empty string body tricks the cmdlet into creating content and applying the content-type header.",
      "created_at": "2019-04-27T15:53:01Z",
      "updated_at": "2019-04-27T15:53:01Z"
    },
    {
      "author": "Agazoth",
      "author_association": "NONE",
      "body": "Thanks Mark, the workaround works :-)",
      "created_at": "2019-04-28T00:21:57Z",
      "updated_at": "2019-04-28T00:21:57Z"
    },
    {
      "author": "50nar",
      "author_association": "NONE",
      "body": "Is there any ETA for this to be fixed?\r\nI cannot use a \"workaround\" with setting -body '' as my api requires Content-Length: 0 ! \r\n\r\nI really dont want to be rude but command for interacting with API is missing the basic functionality! How this got passed the testing is beyond me. I just convinced my whole department to use powershell core and now I will have to ask them to uninstall it because powershell API interaction commands are unable to interact with APIs . This is really sad taking to consideration that Azure reps from Microsoft will say PowereShell core is cool to use while it feels like alpha software and what's more sad is that this piece of software ships by default in cloud shell.",
      "created_at": "2019-06-30T09:55:25Z",
      "updated_at": "2019-06-30T09:57:56Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@yar05 \r\n\r\n> I cannot use a \"workaround\" with setting -body '' as my api requires Content-Length: 0 ! \r\n\r\nI'm not sure I follow. using `-body ''` does not send any body at all.",
      "created_at": "2019-06-30T19:11:57Z",
      "updated_at": "2019-06-30T19:11:57Z"
    },
    {
      "author": "50nar",
      "author_association": "NONE",
      "body": "Ok so In fact setting -body '' sets the Content-Type header I must have not looked properly at headers I am sending... The actual reason my code was failing was that I had Content-Length header set in my headers. Powershell 6.2.1 was converting it to \"Content-Length: 0, 0\" when I removed my own header it seems to work. However PowerShell 5 worked perfectly by just setting \"Content-Length: 0\" so this looks like yet another bug :/ ",
      "created_at": "2019-06-30T20:04:11Z",
      "updated_at": "2019-06-30T20:04:11Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@yar05 Re: `Content-Length: 0`, That's not a bug, that's an implementation difference between 5 and 6.",
      "created_at": "2019-06-30T20:16:51Z",
      "updated_at": "2019-06-30T20:16:51Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "I've submitted #10034 to address this.",
      "created_at": "2019-06-30T20:23:53Z",
      "updated_at": "2019-06-30T20:23:53Z"
    },
    {
      "author": "50nar",
      "author_association": "NONE",
      "body": "Is there any actual reasoning behind this behaviour ? If I set X number of headers to a request I expect them to be there while it seems pwsh is trying to be smart about it. Is there a way to run pwsh in some sort of compatibility mode with previous powershell versions?  With this implementation I am unable to write a script that will work both on version 5 and core. Calling the specific powershell version from within another powershell script is a bit ugly ... IMHO setting headers manually should ALWAYS overwrite whatever pwsh thinks should be set as a header.",
      "created_at": "2019-06-30T20:36:28Z",
      "updated_at": "2019-06-30T20:38:41Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@yar05 \r\n> Is there any actual reasoning behind this behaviour\r\n\r\nYes, The content length is determined by the body and is calculated for you by the .NET HttpContent API. You have no control over this header in .NET and therefore not control over this header in PowerShell.\r\n\r\n>  Is there a way to run pwsh in some sort of compatibility mode with previous powershell versions?\r\n\r\nNo. 6.0.0 was a major version release that introduced many breaking changes. For backwards compatible code you will need version gates. This can be made cleaner and easier with splatting.\r\n\r\n> IMHO setting headers manually should ALWAYS overwrite whatever pwsh thinks should be set as a header.\r\n\r\nAnd in all but `Content-Length`, it does (or should anyway if there are others not working, that would be a bug to address). You cannot control this header as it is automatically calculated.",
      "created_at": "2019-06-30T20:44:26Z",
      "updated_at": "2019-06-30T20:44:26Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #10034, which has now been successfully released as `v7.0.0-preview.2`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.2)\n",
      "created_at": "2019-07-17T20:56:05Z",
      "updated_at": "2019-07-17T20:56:05Z"
    }
  ],
  "created_at": "2019-04-26T14:58:40Z",
  "labels": [
    "Issue-Question",
    "Resolution-Fixed",
    "WG-Cmdlets-Utility"
  ],
  "number": 9473,
  "state": "closed",
  "title": "Invoke-RestMethod PUT fails",
  "updated_at": "2019-07-17T20:56:05Z"
}