{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12134",
  "author": "mklement0",
  "body": "Note: \r\n\r\n* There is no _functional_ problem.\r\n\r\n* However, the rationale for choosing `/bin/zsh` over `/bin/sh` suggested by a comment in the source code is misleading (see below).\r\n\r\nAt the very least, getting clarity on this issue would allows to amend the source-code comments to avoid confusion.\r\n\r\n----\r\n\r\nThe source code currently states: \r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/07962a9749ab50444ebe87101e5bacf5b5f47f88/src/powershell/Program.cs#L324\r\n\r\nAdditionally, @rjmholt  states in https://github.com/PowerShell/PowerShell/pull/12058/files#r393120683\r\n\r\n> No, we tried this. The version of bash it uses is too old to support `-l` in `sh`-compatibility mode and it wasn't starting properly.\r\n\r\n`bash` on macOS has been frozen at `v3.2.57` for many versions of macOS, for licensing reasons, and won't get updated.\r\nHowever, it definitely at least _formally_  supports `-l` (`--login`); from the `man` page:\r\n\r\n> If  `bash`  is  invoked  with  the name `sh`, it tries to mimic the startup\r\n       behavior of historical versions of sh as  closely  as  possible,  while\r\n       conforming  to the POSIX standard as well.  When invoked as an interac-\r\n       tive login shell, or a non-interactive shell with the  `--login` [alias `-l`]  option,\r\n       it  first  attempts  to read and execute commands from `/etc/profile` and\r\n       `~/.profile`, in that order.\r\n\r\nIndeed, running `/bin/sh -l` loads both `/etc/profile` and `~/.profile`.\r\n\r\nEven if `bash` ever gets removed from future macOS versions, `/bin/sh` (the _system_ default shell, as opposed to the _interactive user_ default shell, which is now `zsh`) must and will remain a (mostly) POSIX-compliant shell - whatever concrete shell act as `/bin/sh`.\r\n\r\nAs such, `/bin/sh` is the more stable long-term choice.\r\n\r\nOf course, if there _is_ a functional problem with using `/bin/sh -l` currently, using `/bin/zsh` is a sensible workaround - but then the source-code comment should be amended.\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core 7.0.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@rjmholt, here's some background information that hopefully paints the full picture.\r\n\r\nFWIW, I compiled a version with `/bin/sh` on macOS 10.15.3, and it worked fine. The system Bash version (`/bin/bash`), 3.2.57, hasn't changed since 10.10 (Yosemite), long before the oldest version supported by PowerShell (10.13, High Sierra)\r\n\r\nThe `-l` / `--login` option was introduced in Bash 2.0.\r\n\r\nThe short of it is: I recommend updating the incorrect comment in the source code to avoid confusion and to provide a brief rationale for the choice of `/bin/zsh`.\r\n\r\n----\r\n\r\n**macOS default user and system shells:**\r\n\r\n**Default interactive user shell (configurable by each user)**:\r\n* up to 10.14 (Mojave): `/bin/bash`, version 3.2.57(1) since 10.10 (Yosemite)\r\n* from 10.15 (Catalina): `/bin/zsh`\r\n\r\n**System default shell, `/bin/sh`**:\r\n* as of 10.15 (Catalina): `/bin/bash`, 3.2.57(1) (and the respective Bash versions on older macOS versions) - _for licensing reasons, Bash on macOS hasn't received updates since 10.10, and won't in the future_.\r\n\r\n    * Even though Bash automatically enters POSIX compatibility mode when invoked via a symlink named `sh` or with `$0` set to `/bin/sh`, `sh`, or `-sh` (to request a login shell), (e.g., via `exec -l -a <value-for-$0> /bin/bash`), _older_ macOS versions had a _custom build_ of Bash as stand-alone binary `/bin/sh`, which provided additional POSIX compliance, as presumably required by the UNIX 03 certification macOS has.\r\n\r\n  *  As of at least macOS 10.15, that is no longer the case: `/bin/sh` is a _stub_ executable that re-`exec`s itself as whatever the configurable symlink at `/private/var/select/sh` points to, which - according to `man sh` - is allowed to target `bash`, `dash`, or `zsh`, and by default targets `/bin/bash` (which itself is now the custom build for increased POSIX compliance); that is, 10.15 now allows reconfiguring what shell acts as `/bin/sh` by modifying symlink `/private/var/select/sh` (which requires `sudo`).\r\n\r\n* Will a different shell ever become `/bin/sh` on macOS?\r\n\r\n    * `/bin/zsh` too is capable of running in POSIX compatibility mode when invoked as discussed above for Bash (as currently used by PowerShell).\r\n\r\n    * Since no automatic startup process processes `/etc/profile` and `~/.profile` on macOS - only the individual user shell instances created on demand do - the capabilities of `/bin/sh` are primarily important for portable shell scripts that use a `#!/bin/sh` shebang line.\r\n\r\n        * Therefore, if macOS ever wants to support potential new POSIX shell-language features introduced after Bash 3.2.57, it'll have to replace `/bin/sh` with a more modern shell, which is now easy to do, given the `/private/var/select/sh`-based mechanism described above.\r\n\r\n",
      "created_at": "2020-03-27T20:42:06Z",
      "updated_at": "2020-03-27T21:50:15Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "As I say, I originally tried the /bin/sh invocation and it didn't work for me. But if you've tried it and it works, then perhaps you can open a PR and we can try out your changes?\r\n\r\nIs there any observable behavioural difference in using /bin/zsh that you've noted?",
      "created_at": "2020-03-28T18:49:26Z",
      "updated_at": "2020-03-28T18:49:26Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "My original concern was that use of `/bin/zsh` wasn't necessary, and that the ramifications of using it in lieu of `/bin/sh` weren't clear and that it's always better to avoid special-casing.\r\n\r\n> Is there any observable behavioural difference in using /bin/zsh that you've noted?\r\n\r\nThere are at least two I personally know of (detailed below), but there may be more.\r\nThat said, they may not matter in practice.\r\n\r\nTherefore, among the **solutions** below, I'd be personally fine with (a), but I hope that at least _that_ will be considered - fixing a misleading comment in the source code is simple and well worth it.\r\n\r\n* **Solution (a)**: Stick with `/bin/zsh`, but amend the source-code comment with a proper rationale / background info (and perhaps even a link to this conversation).\r\n\r\n* **Solution (b)**: Revert to `/bin/sh` (only if tests show that it works, of course).\r\n\r\n  * This means that responsibility for providing a modern-enough POSIX-compliant shell as `/bin/sh` rests on macOS itself. While it still is (a custom build) of `bash` as of macOS 10.15, they've laid the groundwork for easily switching to either `/bin/dash` or `/bin/zsh` in future versions. Also, users can already switch of their own accord in 10.15 (requires `sudo`) - though I think switching the _system_ shell on individual machines is asking for trouble.\r\n\r\n* **Solution (c)**: on macOS 10.15 and above, switch to `/bin/dash` for better performance:\r\n\r\n  * I haven't done any tests, and my guess is that in practice there's not much of a difference, but the no-frills `/bin/dash` is built for speed, and its binary size is also only about 1 / 5th to 1 / 6th of that of `bash` / `zsh`.\r\n\r\n  * Obviously, this amounts to special-casing too (macOS 10.14 and below do not come with `/bin/dash`).\r\n\r\n  * Thus, since macOS 10.14 and below can't use `/bin/dash` yet, this solution must be combined with either (a) or (b).\r\n\r\n---\r\n\r\n**Behavioral differences** between  Bash  (acting as `/bin/sh`) and `/bin/zsh` in POSIX compatibility mode:\r\n\r\n* The `echo` built-in _does_ interpret `\\` escape sequences in Bash running as `sh` (due to the macOS custom build of it), `zsh` does _not_; e.g, `echo 'a\\nb'` prints `a<newline>b` in Bash-as-sh (on macOS only), but `a\\nb` _verbatim_ in Zsh-as-sh. Additionally, `echo -n hi` prints `-n hi` _verbatim_ in Bash-as-sh (no options whatsoever are recognized), whereas it prints `hi` _without a trailing newline_  (due to option `-n`) in Zsh-as-sh.\r\n\r\n   * As stated, macOS goes out of its way for this behavior, with a custom Bash build, presumably for the  official UNIX 03 certification, as such systems that report as XSI-compliant (an optional superset of the standard that macOS implements) are required to exhibit this behavior.\r\n\r\n   * `/bin/dash` too exhibits this behavior, always (but not `/bin/zsh` when acting as `sh`).\r\n\r\n   * As of macOS 10.15, there isn't any code in the standard `etc/profile` / `~/.profile` files (and files sourced from the former) where this difference matters - though conceivably with user additions it could.\r\n\r\n* As a side effect of Bash acting as `/bin/sh`, the `$BASH` shell variable is set and there's conditional code in `/etc/profile` that sources additional, Terminal.app-specific code if `$BASH` is found to be set.\r\n\r\n   * That said, this code - intended for terminal session-specific state restoration on restart for Bash, via shell functions - doesn't matter to PowerShell and it's arguably better _not_ to waste time executing it, so use of `/bin/zsh` is actually an _advantage_ in this respect; `/bin/dash` would _not_ execute it either.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2020-03-30T12:55:01Z",
      "updated_at": "2020-03-30T13:05:38Z"
    }
  ],
  "created_at": "2020-03-16T17:45:54Z",
  "number": 12134,
  "state": "open",
  "title": "On macOS, PowerShell unexpectedly uses /bin/zsh rather than /bin/sh to re-invoke itself when launched as a login shell.",
  "updated_at": "2021-01-16T05:57:19Z"
}