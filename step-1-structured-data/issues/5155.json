{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5155",
  "author": "DarwinJS",
  "body": "OpenSSH just got a new parameter for specifying the default shell - but it appears it must be full path specified: https://github.com/PowerShell/Win32-OpenSSH/wiki/Install-Win32-OpenSSH\r\n\r\nIt is not clear whether it can receive an environment variable (but should be able to in my opinion).\r\n\r\nThis issue https://github.com/PowerShell/PowerShell/issues/1354 is asking for a pointer to the default powershell core remoting end point.\r\n\r\nI'm not sure I understand not enabling PowerShell Core's configuration to self-publish what active version or folder should be used for these activities.\r\n\r\nThe alternatives to these would seem to be confusion in one or more of these ways:\r\n\r\n- Everyone creating their own mechanisms for tracking the desired version of powershell core they want to be primary\r\n- Everyone creating their own mechanisms for probing the latest version of PowerShell core (e.g. when a full path is required like OpenSSH DefaultShell)\r\n- Inability to find latest PowerShell Core when running a bit of probing code does not work (OpenSSH DefaultShell)\r\n- Lack of simple coordination between wiring up various components to powershell core - even ones out of the same open source team.\r\n\r\nAmong other problems, relying on the path does not allow for Windows PowerShell to be the system level powershell while all stipulated uses of PowerShell Core have a way to easily find (a) that is present (especially if at a custom path) and (b) what is the active version.\r\n\r\nThe implementation does not need to be heavy handed, for instance:\r\n\r\n- Any pointers could be standardized environment variable names that are optional (but can be relied upon as the authoritative source when they do exist).  [That said I would prefer they always exist because it serves as a possible easy \"is Powershell core installed\" check - even when using custom install folders for powershell core (and yes I would assume the risk that someone uninstalled without cleaning the var by doing a test-path)]\r\n- They could (SHOULD) require a special switch in the PowerShell Core installer to be changed to the version being installed (so that one can push and test a prospective version before making it primary)\r\n- Any new, interface points like OpenSSH's \"DefaultShell\" would be more likely to be built the first time around to allow an environment variable if it was known that PowerShell Core had an authoritative one in which it published the active version.\r\n- If an individual chose to they could include the active powershell core environment variable on their path to prevent the need for constant path add/removes (something that is frequently done incorrectly)\r\n\r\nI am considering adding the ability to optionally set one or more \"active powershell core\" pointer environment variables (https://github.com/DarwinJS/ChocoPackages/issues/44) and it would be great if it was to a name agreed on this project - otherwise I can simply implement it as a custom value-add of using the chocolatey package to install powershell core.\r\n\r\nApologies if this has been handled somewhere and I've missed it.",
  "closed_at": "2018-10-21T12:42:11Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "In beta.9, the msi installer will add $pshome to %PATH% so you should be able to just rely on `pwsh` to start PSCore6.  In the future, we have a different [tracking issue](https://github.com/PowerShell/PowerShell/issues/4836) to determine how to support enumerating and starting side-by-side versions of PSCore6.",
      "created_at": "2017-10-18T17:56:32Z",
      "updated_at": "2017-10-18T17:56:32Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "Hmm - yeah I can't add the $pshome reference to the openssh key which claims it needs a full path.  The openssh installer also runs in Windows PowerShell by default - so also won't know what $pshome is.\r\n\r\nThis approach, nor the one in https://github.com/PowerShell/PowerShell/issues/4836, seems to allow an administrator to stipulate a system level version for compatibility - regardless of who might install new additional versions beyond a known compatible one.",
      "created_at": "2017-10-18T18:34:52Z",
      "updated_at": "2017-10-18T18:34:52Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@DarwinJS Can we close the issue? Seems we have a stable distribution model now.",
      "created_at": "2018-10-21T12:39:39Z",
      "updated_at": "2018-10-21T12:39:39Z"
    },
    {
      "author": "DarwinJS",
      "author_association": "CONTRIBUTOR",
      "body": "Yes it looks good now.  Thanks!",
      "created_at": "2018-10-21T12:42:11Z",
      "updated_at": "2018-10-21T12:42:11Z"
    }
  ],
  "created_at": "2017-10-18T10:31:44Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered",
    "WG-Remoting"
  ],
  "number": 5155,
  "state": "closed",
  "title": "Systemwide Pointers To Active Version of PowerShell Core",
  "updated_at": "2018-10-21T12:42:11Z"
}