{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12410",
  "author": "remenaker",
  "body": "When running the following code the wrong date/time is returned. Instead of returning the remote computers date/time it returns the date/time from the local computer. For instance if the remote computer has a different timezone configured then the local computer it returns the local computers time.\r\n\r\nI believe this to be a bug because this is not something I would expect to happen. If this is not a bug can you please explain why this happens? Thanks!\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\nInvoke-Command -ComputerName <remote_computer> -ScriptBlock {Get-Date}\r\n```\r\n\r\n# Expected behavior\r\n\r\nReturns the remote computers Date/Time\r\n\r\n# Actual behavior\r\n\r\nReturns the local computers Date/Time\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.0\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0\r\nOS                             Microsoft Windows 6.3.9600\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0.}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-04-24T00:00:08Z",
  "comments": [
    {
      "author": "p0W3RH311",
      "author_association": "NONE",
      "body": "can you try\r\n\r\ninvoke **get-timezone** in local and remote machine",
      "created_at": "2020-04-21T17:26:07Z",
      "updated_at": "2020-04-21T17:26:07Z"
    },
    {
      "author": "remenaker",
      "author_association": "NONE",
      "body": "That command works as expected. It returns the timezone of the remote computer.",
      "created_at": "2020-04-21T17:31:15Z",
      "updated_at": "2020-04-21T17:31:15Z"
    },
    {
      "author": "remenaker",
      "author_association": "NONE",
      "body": "Also forgot to mention that this happens on Powershell 5.1 as well. But wanted to test it with the current release of PS 7. ",
      "created_at": "2020-04-21T17:32:40Z",
      "updated_at": "2020-04-21T17:32:40Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "When PowerShell serializes `[datetime]` instances (on the remote end), it records them with their UTC offset; e.g.:\r\n\r\n```xml\r\n    <DT>2020-04-21T13:25:58.454524-04:00</DT>\r\n```\r\n\r\nOn deserialization (on the caller's end), the point in time is expressed in _caller-local_ time (as reflected in the `.Kind` property containing `Local`).\r\n\r\nThat is, you cannot derive remote time-zone / UTC-offset information from the date returned.\r\n\r\nIf you need this information, use `Get-TimeZone`, as suggested, or use `[datetimeoffset]::Now`.\r\n\r\nNote that `[datetimeoffset]` is currently not deserialized type-faithfully; that is, the return value is a custom object with static copies of the original object's property values; there is an open feature request to change that - see #3172\r\n\r\nThe following command shows how to retrieve the date expressed as the caller-local date, as the remote-relative local date, as well as the UTC offset on the remote machine in hours.\r\n\r\n```powershell\r\nInvoke-Command -ComputerName $computer { [datetimeoffset]::Now } |\r\n  Select-Object LocalDateTime, DateTime, @{ n='Offset'; e={ $_.Offset.TotalHours } }\r\n```\r\n\r\nHere's example output from my EDT machine talking to a PDT machine (EDT is 3 hours ahead of PDT):\r\n\r\n```none\r\nLocalDateTime        DateTime              Offset\r\n-------------        --------              ------\r\n4/21/2020 1:51:02 PM 4/21/2020 10:51:02 AM     -7\r\n```\r\n\r\n\r\n\r\n",
      "created_at": "2020-04-21T17:52:00Z",
      "updated_at": "2020-04-21T17:57:16Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "P.S.: In case it is not obvious from the above: there is no bug here, everything works as designed. It is an inherent limitation of the `[datetime]` type that it doesn't carry UTC-offset information, and deserializing the remote point in time to the equivalent _caller-local_ point in time makes sense, not least because that's what local `Get-Date` calls return too.",
      "created_at": "2020-04-21T18:07:15Z",
      "updated_at": "2020-04-21T18:07:15Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-04-24T00:00:07Z",
      "updated_at": "2020-04-24T00:00:07Z"
    }
  ],
  "created_at": "2020-04-21T17:09:10Z",
  "number": 12410,
  "state": "closed",
  "title": "Get-Date returns wrong date/time when using inside Invoke-Command",
  "updated_at": "2020-04-24T00:00:08Z"
}