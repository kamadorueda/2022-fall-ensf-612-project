{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3978",
  "author": "JohnLBevan",
  "body": "Currently PowerShell cmdlets support `Begin`, `Process`, and `End` blocks (i.e. per https://ss64.com/ps/syntax-function-input.html).\r\n\r\n`Begin` executes before any pipeline input is available; so cannot touch a pipeline variable.\r\n`Process` executes for every single element in the pipeline.\r\n\r\nThere are a number of scenarios where you need to inspect the first item in the pipeline; but don't want to execute for all; typically this means coding a pattern such as:\r\n```\r\n    Function Test-Example {\r\n        [CmdletBinding()]\r\n        param (\r\n            [Parameter(ValueFromPipeline = $true)]\r\n            $InputObject\r\n        )\r\n        begin {\r\n            [bool]$first = $true\r\n        }\r\n        process {\r\n            if ($first) {\r\n                #do something with the first $InputObject in the pipeline\r\n                $first = $false\r\n            }\r\n            #do whatever else\r\n        }\r\n        end {} #if needed\r\n    }\r\n```\r\n\r\nAn example scenario would be where we need to analyse what properties are available on the object; e.g. if writing a function to convert data from an array of PSObject to a DataTable.\r\n\r\nHaving support for syntax such as below would help made code more readable, and may aid optimisation (i.e. if there's a good way to skip the repeated IsFirst check on each iteration under the hood).\r\n\r\n```\r\n    Function Test-Example {\r\n        [CmdletBinding()]\r\n        param (\r\n            [Parameter(ValueFromPipeline = $true)]\r\n            $InputObject\r\n        )\r\n        begin {} #if needed\r\n        first {\r\n            #do something with the first $InputObject in the pipeline\r\n        }\r\n        process {\r\n            #do whatever else\r\n        }\r\n        end {} #if needed\r\n    }\r\n```\r\n \r\n\r\n",
  "closed_at": "2017-06-28T06:58:48Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Just to clarify: you're looking to have the first object processed by _both_ the `first` and `process` blocks?",
      "created_at": "2017-06-12T12:14:55Z",
      "updated_at": "2017-06-12T12:14:55Z"
    },
    {
      "author": "JohnLBevan",
      "author_association": "NONE",
      "body": "@mklement0 Good catch.  \r\nYes; I believe in most scenarios it makes sense for the first object to be included in both blocks.\r\n\r\ni.e. the process block contains code which should be applied to every item; generally there's nothing special about the first item in a list which means it should be excluded.\r\n\r\nThe reason for the proposed `first` block is for setup steps, which require any object from the pipeline to be available.  e.g. many scripts work on the assumption that all objects in an array will have the same properties, so may have something like this:\r\n\r\n```\r\n     Function Find-ObjectWithValue {\r\n        [CmdletBinding()]\r\n        param (\r\n            [Parameter(Mandatory = $true, ValueFromPipeline = $true)]\r\n            [PSObject]$InputObject\r\n            ,\r\n            [Parameter(Mandatory = $true, Position = 0)]\r\n            [PSObject]$Value\r\n        )\r\n        #begin {\r\n        #    [bool]$first = $true\r\n        #} \r\n        first {\r\n            [string[]]$props = $InputObject | Get-Member -MemberType @('NoteProperty','Property') | Select-Object -ExpandProperty Name | sort \r\n        }\r\n        process {\r\n            #if ($first) {\r\n            #    [string[]]$props = $InputObject | Get-Member -MemberType @('NoteProperty','Property') | Select-Object -ExpandProperty Name | sort \r\n            #    $first = $false\r\n            #}\r\n            $props | %{\r\n                (New-Object -TypeName PSObject -Property @{\r\n                    InputObject = $InputObject\r\n                    Property = $_\r\n                    Matched = ($Value -eq $InputObject.\"$_\")\r\n                })\r\n            }\r\n        }\r\n    }\r\n    [string[]]$users = @('samAccountName1','anotherUser')\r\n    $users | Get-AdUser -Properties * | Find-ObjectWithValue 'sipfed.online.lync.com' | ? Matched\r\n```\r\n",
      "created_at": "2017-06-16T09:56:14Z",
      "updated_at": "2017-06-16T10:16:27Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">An example scenario would be where we need to analyse what properties are available on the object; e.g. if writing a function to convert data from an array of PSObject to a DataTable.\r\n\r\nIn general, a pipeline allows different types of input objects and makes parameter bindings for every input object. From this perspective the \"first\" is a bad user experience. \r\nIn this particular example, we could pass an object type as an cmdlet argument to be able to work with it in \"Begin\" step.",
      "created_at": "2017-06-16T13:37:46Z",
      "updated_at": "2017-06-16T13:37:46Z"
    },
    {
      "author": "dragonwolf83",
      "author_association": "NONE",
      "body": "@JohnLBevan Your assuming that the first object has all the properties. That is not true in many cases. Each item in an object can have it's own set of properties as @iSazonov mentions above. So if you only check for the first item in the object, you lose properties if it wasn't specified in the first object.\r\n\r\nFor example, let's say that you have an object of people's names. You have First, Middle, Last, Suffix. First and Last is likely to be populated most of the time. However, Middle and Suffix are less reliable. Some people populate Middle, others don't and not everyone has a Suffix to their name. Let's represent this in PowerShell.\r\n\r\n````PowerShell\r\n$inputObject = @(\r\n   [PSCustomObject] @{ First=\"William\"; \"Last=\"Riker\" }\r\n   [PSCustomObject] @{ First=\"Robert\"; Last=\"Downy\"; Suffix=\"Jr.\" }\r\n   [PSCustomObject] @{ First=\"Sarah\"; Middle=\"Jessica\"; Last=\"Parker\" }\r\n)\r\n````\r\n\r\nAs you can see, the object we are accustomed to is really an array of hash tables cast as PSCustomObjects, with each having their own properties. This is very common when pulling data from APIs and Excel into PowerShell. \r\n\r\nPowerShell also uses heuristics to combine all Output and figure out the properties to output to you in Format-Table and Format-List, as well as Get-Member. The less used properties may not be found and displayed by default. \r\n\r\nYour not going to lose anything in trying to process the properties in a Process block, that is it's intended purpose. You need to go through each item to get the individual object and handle it anyway.\r\n\r\nBTW, I've actually ran into this recently with Get-Member not accurately giving me all properties when I was trying to compare properties of two objects and only get the unique columns. I had to loop through all objects to most accurately get the properties to prevent bugs.\r\n\r\nWhere Begin and End blocks become truly useful is when you think of how to read a DataReader object across multiple cmdlets in a pipeline....",
      "created_at": "2017-06-17T02:19:50Z",
      "updated_at": "2017-06-17T02:19:50Z"
    },
    {
      "author": "JohnLBevan",
      "author_association": "NONE",
      "body": "Fair points; the below can be used where the behaviour I describe is required; and by not having the `first` block you avoid people using it when they shouldn't (i.e. when the shape of each object being passed to the pipeline is inconsistent).\r\n\r\n```\r\n[psObject[]]$list = Get-Data()\r\n$list | Invoke-SomeMethod -TemplateObject $list[0]\r\n``` \r\nor\r\n```\r\n[psObject[]]$list = Get-Data()\r\n$list | Invoke-SomeMethod -TemplateObject (New-Object PSObject ([ordered]@{FirstName='';LastName='''}))\r\n```\r\n\r\nI'll close this request.",
      "created_at": "2017-06-28T06:58:48Z",
      "updated_at": "2017-06-28T06:58:48Z"
    }
  ],
  "created_at": "2017-06-09T17:28:59Z",
  "number": 3978,
  "state": "closed",
  "title": "Suggestion: New Function Input Processing Method: First",
  "updated_at": "2017-06-28T06:58:49Z"
}