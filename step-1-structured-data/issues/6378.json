{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6378",
  "author": "alx9r",
  "body": "This behavior is surprising to me.  I'm not sure if it is as intended, as neither the documentation for [ScopedItemOptions](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.scopeditemoptions?view=powershellsdk-1.1.0) nor [about_Scopes](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_scopes?view=powershell-6) seem to contemplate the behavior of `AllScope` variables in the context of multiple SessionStates.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n$m = New-Module {}\r\nSet-Variable v -Value 'v.1' -Option AllScope\r\n\r\n& $m { $v }\r\n& $m { $v = 'v.2'; $v }\r\n$v\r\n& {\r\n    $v = 'v.3'\r\n}\r\n$v\r\n& $m { $v }\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nI expected that \r\n\r\neither there really is only one `$v` and the output is\r\n```none\r\nv.1\r\nv.2\r\nv.2\r\nv.3\r\nv.3\r\n```\r\n\r\nor, there are two `$v` that are really unrelated and the output is\r\n\r\n```none\r\nv.1\r\nv.2\r\nv.1\r\nv.3\r\nv.2\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\nThe actual behavior seems to be consistent with two `$v` that are sort-of related.\r\n```none\r\nv.1\r\nv.2\r\nv.1\r\nv.3\r\nv.3\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value                                            \r\n----                           -----                                            \r\nPSVersion                      6.0.0                                            \r\nPSEdition                      Core                                             \r\nGitCommitId                    v6.0.0                                           \r\nOS                             Microsoft Windows 6.3.9600                       \r\nPlatform                       Win32NT                                          \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                          \r\nPSRemotingProtocolVersion      2.3                                              \r\nSerializationVersion           1.1.0.1                                          \r\nWSManStackVersion              3.0                                              \r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "The expected behaviour is that an `AllScope` variable be the same PSVariable object in all child scopes, module or not. The current behaviour is a bug.",
      "created_at": "2018-03-13T22:03:46Z",
      "updated_at": "2018-03-13T22:03:46Z"
    },
    {
      "author": "alx9r",
      "author_association": "NONE",
      "body": "Ideally, the rollout of this fix would occur after Pester/Pester#1007 is fixed.  I _think_ fixing this without fixing Pester/Pester#1007 would break all Pester tests involving mocks of commands whose parameters conflict with `AllScope` variables that are `Constant` or `ReadOnly`.  `Get-Module` is the most obvious affected command.  Currently, mocking `Get-Module` inside a module using Pester works because of this bug.",
      "created_at": "2018-03-14T00:48:46Z",
      "updated_at": "2018-03-14T00:48:46Z"
    },
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "@BrucePay\r\n>The expected behaviour is that an `AllScope` variable be the same PSVariable object in all child scopes, module or not. The current behaviour is a bug.\r\n\r\nDoes that applied to scopes which existed before `AllScope` variables was created in some parent to them scope?\r\n\r\n```powershell\r\n& {\r\n    & {\r\n        sv a 1 -Scope 1 -Option AllScope\r\n        $a = 2\r\n        gv a -Scope 1 -ValueOnly\r\n        $a\r\n        [object]::ReferenceEquals((gv a),(gv a -Scope 1))\r\n    }\r\n    & {\r\n        $a = 3\r\n        gv a -Scope 1 -ValueOnly\r\n        $a\r\n        [object]::ReferenceEquals((gv a), (gv a -Scope 1))\r\n    }\r\n}\r\n```\r\n\r\nCurrent behavior is that only new created scopes inherit `AllScope` variable from its parent scope.",
      "created_at": "2018-03-30T22:10:16Z",
      "updated_at": "2018-03-30T22:10:50Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "I have experienced a similar, related bug when putting the call to `Invoke-Pester` into a function of a `psm1` module broke PSSA tests. Examples were:\r\n- `$error[0]` was not defined any more in the local scope (I replaced it with $_ to fix it):\r\n````powershell\r\ntry\r\n{\r\n  CmdletThatThrows-NonTerminatingError -ErrorAction stop\r\n}\r\ncatch\r\n{\r\n  $Error[0].FullyQualifiedErrorId | Should -Match $expectedFullyQualfiedErrorId\r\n}\r\n````\r\n- Then I had tests that were testing that `Set-Variable` of a read-only automatic variable is throwing a non-terminating error. This did not work for some automatic variables such as e.g. `PSVersionTable`, therfore I had to change it to use global scope when setting the variable.",
      "created_at": "2018-04-07T17:33:04Z",
      "updated_at": "2018-04-07T17:34:22Z"
    }
  ],
  "created_at": "2018-03-13T17:27:00Z",
  "number": 6378,
  "state": "open",
  "title": "Modifying AllScope variable in \"global\" SessionState affects module but not vice versa",
  "updated_at": "2018-04-07T17:34:22Z"
}