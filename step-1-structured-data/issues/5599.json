{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5599",
  "author": "powercode",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://github.com/PowerShell/PowerShell/blob/master/docs/KNOWNISSUES.md).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nWhen the definition of `ToString` is spelled `toString`, we get the type name instead of the result of `ToString`. It works when spelled `ToString`.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\nclass X{\r\n    [string] $A\r\n    [string] toString() {return $this.A}\r\n}\r\n\r\n\r\ngci | foreach {[X] @{A = $_.Name}} | group A\r\n\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\nCount Name                      Group                                                                                                    \r\n----- ----                      -----                                                                                                    \r\n    1 file1                     {file1}                                                 \r\n    1 file2                     {file2}  \r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nCount Name                      Group                                                                                                    \r\n----- ----                      -----                                                                                                    \r\n    1 file1                     {X}                                                 \r\n    1 file2                     {X}  \r\n```\r\n\r\n\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nAll versions\r\n\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @daxian-dbw Could you please comment the Issue? How we resolve the conflict that PowerShell case-insensitive vs C# case-sensitive for type names?",
      "created_at": "2017-12-02T19:06:04Z",
      "updated_at": "2017-12-02T19:06:04Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I think this is by design. `toString()` in the repro is a different method from `ToString()`. The formatting code calls `ToString()`, and thus `toString()` won't be used for sure.\r\n\r\nIt's the same in C# code:\r\n```CSharp\r\n    public class Test\r\n    {\r\n        public string Name;\r\n        public string toString()\r\n        {\r\n            return Name;\r\n        }\r\n    }\r\n\r\n    public static void Main(string[] args)\r\n    {\r\n        Test test = new Test() { Name = \"YAY\" };\r\n        Console.WriteLine(test.toString());\r\n        Console.WriteLine(test);\r\n    }\r\n\r\n> YAY\r\n> ConsoleApp.Test\r\n```\r\n\r\nPowerShell populates method tables ignoring the cases of method names. So in case you have `toString()` and `ToString()`, only one of them will show up in the method table, which will be the first one returned by reflection.",
      "created_at": "2017-12-04T18:08:50Z",
      "updated_at": "2017-12-04T18:08:50Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "may be by design, but there is a fault with that. this is invalid:\r\n\r\n```powershell\r\nClass Test {\r\n    Test () {}\r\n    [string] toString() {\r\n        return 'lower case \"t\"'\r\n    }\r\n\r\n    [string] ToString() {\r\n        return 'lower case \"t\"'\r\n    }\r\n}\r\n```\r\n\r\nIt produces \r\n\r\n```none\r\nThe member 'ToString' is already defined.\r\n```\r\n\r\nbut of you use just `toString()` you get that there is no way in PowerShell to call the `ToString()` without reflection which makes it appear as though it is the only \"tostring\" available, until you get the unexpected results of the underlying .NET calling `ToString()`:\r\n\r\n```powershell\r\nClass Test {\r\n    Test () {}\r\n    [string] toString() {\r\n        return 'lower case \"t\"'\r\n    }\r\n}\r\n\r\n$Test = [Test]::new()\r\n$Test.toString()\r\n$Test.ToString()\r\n'{0}' -f $Test\r\n```\r\n\r\nResult:\r\n\r\n```none\r\nlower case \"t\"\r\nlower case \"t\"\r\nTest\r\n```\r\n\r\nSince case sensitivity is not a thing of concern in PowerShell, perhaps overriding an existing method with matching case would make sense... but then if the class has multiple methods with mixed casing, it would be ambiguous. :(\r\n\r\nI guess overriding methods is just an instance where case sensitivity has to matter....",
      "created_at": "2017-12-04T18:37:33Z",
      "updated_at": "2017-12-04T18:37:33Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I wonder - do we know any public popular APIs with methods in different cases? \r\nI believe .Net haven't such methods.",
      "created_at": "2017-12-05T05:26:45Z",
      "updated_at": "2017-12-05T05:26:45Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov Probably not. Arguably, anyone who made mixed cased method is \"doing it wrong\". In the rare instance that they do have mixed case, the class can be inherited by a PowerShell class, and the method can be overridden, then it would be ambiguous as to which methods PowerShell was overriding. While in PowerShell, it would only override the method is available in PowerShell, if that object gets passed to .NET it would not override all cased versions of the method.\r\n\r\nMaybe a PowerShell Method should override all cased versions of an existing method as well as add a new case if it doesn't exist? For example, `toString()` in PowerShell would override `ToString()` as well as create a `toString()` in .NET. \r\n\r\nIf a .NET class had `badMethod()` and `BadMethod()` and the PowerShell class had `badmethod()`, the PowerShell class would override `badMethod()` and `BadMethod()` and add a `badmethod()`.",
      "created_at": "2017-12-05T09:25:07Z",
      "updated_at": "2017-12-05T09:25:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think we shouldn't override all cased versions - really it is different methods. We shouldn't fix alien \"doing it wrong\". If anybody catch such bad API he can use reflection for workaround.",
      "created_at": "2017-12-05T10:50:47Z",
      "updated_at": "2017-12-05T10:50:47Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov it makes sense in PowerShell to do so, though. since there is only 1 method available in PowerShell if the user overrides a all of the cased methods, then it produces expected results form a PowerShell perspective. \r\n\r\nThe example in this issue of `toString()` is not the first I have seen this exact one come up. PowerShell's case insensitivity is great except in this area. To a PowerShell user it makes no sense. they access `$object.tostring()`,  `$object.toString()`, `$object.ToString()`, `$object.TOSTRING()`, and they get the same result. but they do \r\n\r\n```powershell\r\nclass X{\r\n    [string] $A\r\n    [string] toString() {return $this.A}\r\n}\r\n```\r\n\r\nand suddenly it doesn't play nice at all. PowerShell shows one thing and .NET another. \r\n\r\nSince mixed cased methods are probably and edge-case, it probably makes sense for PowerShell to override all of the methods as well as add one with the ps defined casing. in the rare case that someone has a ,NET class like this:\r\n\r\n```csharp\r\nusing System;\r\n\r\nnamespace Test\r\n{\r\n    public class Test\r\n    {\r\n        private bool init;\r\n\r\n        public Testy () { init = true; }\r\n        \r\n        public string test()\r\n        {\r\n            return \"test\";\r\n        }\r\n        \r\n        public string Test()\r\n        {\r\n            return \"Test\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nOverriding `Test()` and `test()` when inheriting would make the class behave the same in .NET and in PowerShell. ",
      "created_at": "2017-12-05T11:11:12Z",
      "updated_at": "2017-12-05T11:11:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I see:\r\n```powershell\r\nPS> [bigint]::Pow\r\n\r\nOverloadDefinitions\r\n-------------------\r\nstatic bigint Pow(bigint value, int exponent)\r\n\r\n\r\nPS> [bigint]::pow\r\n\r\nOverloadDefinitions\r\n-------------------\r\nstatic bigint Pow(bigint value, int exponent)\r\n",
      "created_at": "2017-12-05T13:12:08Z",
      "updated_at": "2017-12-05T13:12:08Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "```powershell\r\n$code = @'\r\nusing System;\r\n\r\nnamespace Test\r\n{\r\n    public class Test\r\n    {\r\n        private bool init;\r\n\r\n        public Test () { init = true; }\r\n        \r\n        public string testString()\r\n        {\r\n            return \"test\";\r\n        }\r\n        \r\n        public string TestString()\r\n        {\r\n            return \"Test\";\r\n        }\r\n    }\r\n}\r\n'@\r\nAdd-Type -Language CSharp -TypeDefinition $code -IgnoreWarnings\r\nClass MyTest : Test.Test {\r\n    MyTest () {}\r\n\r\n    [String] TESTString() {\r\n        return 'TEST'\r\n    }\r\n}\r\n$MyTest = [MyTest]::New()\r\n$code2 = @'\r\nusing System;\r\n\r\nnamespace Test\r\n{\r\n    static public class Test2\r\n    {\r\n        public static string GetString(object input)\r\n        {\r\n            dynamic test = input;\r\n            return String.Format(\"testString: {0}; TestString {1}; TESTString {2}\", test.testString(), test.TestString(), test.TESTString());\r\n        }\r\n    }\r\n}\r\n'@\r\nAdd-Type -Language CSharp -TypeDefinition $code2 -IgnoreWarnings -ReferencedAssemblies \"Microsoft.CSharp\"\r\n[Test.Test2]::GetString($MyTest)\r\n```\r\n\r\nresult:\r\n\r\n```none\r\ntestString: test; TestString Test; TESTString TEST\r\n```\r\n\r\nif what I'm proposing ere put in place:\r\n\r\n```none\r\ntestString: TEST; TestString TEST; TESTString TEST\r\n```",
      "created_at": "2017-12-05T14:10:40Z",
      "updated_at": "2017-12-05T14:10:40Z"
    },
    {
      "author": "pemo11",
      "author_association": "NONE",
      "body": "I would suggest that Add-Type should issue a warning when a class contains methods with the same name but different cases.\r\n\r\nHere is another example based on RC1 that shows that even both version of getInfo are listed as members only the first one can be called.\r\n\r\n```\r\n$Code = @\"\r\n    public class CSTest\r\n    {\r\n        // This one will be called by PowerShell\r\n        public string GetInfo() \r\n        {\r\n            return \"this is GetInfo()\";\r\n        }\r\n        public string getInfo()\r\n        {\r\n            return \"this is getInfo()\";\r\n        }\r\n    }\r\n\"@\r\n\r\nAdd-Type -TypeDefinition $Code  -PassThru\r\n\r\n# both getInfo and GetInfo get listed\r\n[CSTest].GetMethods().Name\r\n\r\n$ct = [CSTest]::new()\r\n# calls the first method in the class definition\r\n$ct.getInfo()\r\n$ct.GetInfo()\r\n```",
      "created_at": "2017-12-31T11:45:43Z",
      "updated_at": "2017-12-31T11:45:43Z"
    },
    {
      "author": "markekraus",
      "author_association": "CONTRIBUTOR",
      "body": "@pemo11 as that is separate from this issue, please open a new issue. I'd love to discuss this, but do not want to veer off topic with the issue addressed here.",
      "created_at": "2017-12-31T11:50:56Z",
      "updated_at": "2017-12-31T11:50:56Z"
    }
  ],
  "created_at": "2017-12-01T10:57:29Z",
  "number": 5599,
  "state": "open",
  "title": "'ToString' method is case sensitive when getting default rendering of a type",
  "updated_at": "2017-12-31T11:50:56Z"
}