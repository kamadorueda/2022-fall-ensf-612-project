{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7298",
  "author": "rjmholt",
  "body": "`Get-Module -ListAvailable` will list modules with badly formatted manifests or that have unmet requirements, but will not list modules that have incompatible PSEditions (as per the [RFC](https://github.com/PowerShell/PowerShell-RFC/pull/130)).\r\n\r\n`Get-Module -ListAvailable` should be consistent about whether modules that can be loaded in a current session can be listed.\r\n\r\nHere's a small repro for an unloadable module that is still listed by `Get-Module -ListAvailable`:\r\n```powershell\r\n> New-Item -Path $PowerShellDevDir\\src\\powershell-win-core\\bin\\Debug\\netcoreapp2.1\\win7-x64\\publish\\Modules\\BADMODULE -Value \"Banana\"\r\n\r\n> Get-Module -ListAvailable\r\n...\r\n\r\n    Directory:\r\n    C:\\users\\roholt\\documents\\dev\\powershell\\src\\powershell-win-core\\bin\\debug\\netcoreapp2.1\\win7-x64\\publish\\Modules\r\n\r\n\r\nModuleType Version    Name                                PSEdition ExportedCommands\r\n---------- -------    ----                                --------- ----------------\r\nManifest   6.1.0.0    CimCmdlets                          Core      {Get-CimAssociatedInstance, Get-CimClass, Get-CimInst...\r\nScript     0.0        LocalUnsignedModule                 Desk\r\nScript     0.0        LocalUntrustedModule                Desk\r\nManifest   1.1.0.0    Microsoft.PowerShell.Archive        Desk      {Compress-Archive, Expand-Archive}\r\nManifest   6.1.0.0    Microsoft.PowerShell.Diagnostics    Core      {Get-WinEvent, New-WinEvent}\r\nManifest   6.1.0.0    Microsoft.PowerShell.Host           Core      {Start-Transcript, Stop-Transcript}\r\nManifest   6.1.0.0    Microsoft.PowerShell.Management     Core      {Add-Content, Clear-Content, Clear-ItemProperty, Join...\r\nManifest   6.1.0.0    Microsoft.PowerShell.Security       Core      {Get-Acl, Set-Acl, Get-PfxCertificate, Get-Credential...\r\nManifest   6.1.0.0    Microsoft.PowerShell.Utility        Core      {Format-List, Format-Custom, Format-Table, Format-Wid...\r\nManifest   6.1.0.0    Microsoft.WSMan.Management          Core      {Disable-WSManCredSSP, Enable-WSManCredSSP, Get-WSMan...\r\nManifest   0.0        BADMODULE                           Desk\r\nScript     1.1.7.0    PackageManagement                   Desk      {Find-Package, Get-Package, Get-PackageProvider, Get-...\r\nScript     4.2.0      Pester                              Desk      {Describe, Context, It, Should...}\r\nScript     1.6.0      PowerShellGet                       Desk      {Install-Module, Find-Module, Save-Module, Update-Mod...\r\nScript     0.0        PSDesiredStateConfiguration         Desk      {Test-ModuleReloadRequired, ConvertTo-MOFInstance, In...\r\nScript     6.1.0.0    PSDiagnostics                       Core      {Disable-PSTrace, Disable-PSWSManCombinedTrace, Disab...\r\nScript     2.0.0      PSReadLine                          Desk      {Get-PSReadLineKeyHandler, Set-PSReadLineKeyHandler, ...\r\nBinary     1.1.1      ThreadJob                           Desk      Start-ThreadJob\r\n\r\n```\r\n\r\nEssentially, you can write a nonsense module in a file with the right extension, and if it's on the module path, it will be displayed by `Get-Module -ListAvailable`. But a psd1 that is correct but does not list `\"Core\"` under `\"CompatiblePSEditions\"` will not be displayed.\r\n\r\nA consequence of this is that if a module is not compatible with the current PSEdition and loaded from the System32 module path, **but** has another error in it that causes the manifest processing to fail earlier, the module will be listed when the CompatiblePSEditions RFC says it should not be.\r\n\r\nOne proposal might be, either:\r\n  * `Get-Module -ListAvailable` returns a list of all files that are plausibly PowerShell modules (including those incompatible with the current PSEdition), **OR**\r\n  * `Get-Module -ListAvailable` does not list modules that are unable to be loaded in the current PowerShell session (this would be a more significant breaking change).\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-preview.3\r\nPSEdition                      Core\r\nGitCommitId                    v6.1.0-preview.3-161-g6d72598bde08ca2507cd357b5723204ec4941541\r\nOS                             Microsoft Windows 10.0.17713\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The related discussion from #7183 : https://github.com/PowerShell/PowerShell/pull/7183#discussion_r201528579",
      "created_at": "2018-07-17T00:07:03Z",
      "updated_at": "2018-07-17T00:07:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @mklement0 What do you think?",
      "created_at": "2018-07-20T04:47:36Z",
      "updated_at": "2018-07-20T04:47:36Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I'm late to this and may not have the full picture, but just in the abstract it sounds like it's worth either reporting a non-terminating error or at least a warning for every malformed module,  given that it's fair to assume that locations in `$env:PSModulePath` should contain nothing _but_ (well-formed) modules.\r\n\r\nQuietly including malformed modules in the `-ListAvailable` results seems unhelpful: you'll get no indication that something's wrong at the time of listing, only to encounter failure when you later try to `Import-Module`.\r\n\r\n",
      "created_at": "2018-07-22T22:36:47Z",
      "updated_at": "2018-07-22T22:36:47Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I believe we should have the same behavior for _all_ paths and indicate that module (manifest) is broken. We could do this in  `PSEdition` field. I think it looks better in interactive sessions. In scripts we can filter output if we need.",
      "created_at": "2018-07-23T04:55:06Z",
      "updated_at": "2018-07-23T04:55:06Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov: Just to clarify: You're suggesting not to report an error / warning, but instead to populate the `PSEdition` property of the `ModuleInfo` objects representing malformed modules with a pseudo value that indicates the malformation?",
      "created_at": "2018-07-23T11:55:27Z",
      "updated_at": "2018-07-23T11:56:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Yes, in interactive session it looks better.",
      "created_at": "2018-07-24T03:46:12Z",
      "updated_at": "2018-07-24T03:46:12Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "If the module manifest is invalid, we shouldn't default to `Desktop`.  `Desktop` is only if `CompatiblePSEditions` contains `Desktop` or if `CompatiblePSEditions` doesn't exist at all (older module manifests pre-dating PS5).  I think it would be fine to have `???` as the `PSEdition` value when an invalid module manifest is encountered.  I'm also ok with a non-terminating error is this is likely going to only occur as a development scenario.",
      "created_at": "2018-07-24T04:57:22Z",
      "updated_at": "2018-07-24T04:58:15Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT: Agreed on not defaulting to `Desktop`.\r\n\r\nAs for what to do instead: the question comes down to how we defined an _available_ module:\r\n\r\n* (a) Anything that happens to be present in a dir. listed in `$env:PSModulePath`, whether it is a well-formed module or not.\r\n\r\n* (b) Something that's present in in a dir. listed in `$env:PSModulePath` that is also a well-formed module (though it may not be available to the platform at hand).\r\n\r\nIf (a), then perhaps reporting malformed modules as part of the success output with `???` as the `.PSEdition` property makes sense.\r\n\r\nIf (b), then malformed modules should be reported as _non-terminating errors_.\r\n\r\n---\r\n\r\nPersonally I'm not convinced that (a) makes sense:\r\n\r\n@iSazonov: Can you elaborate on  why you think that how things _look in an interactive session_ should be the driving factor?\r\n\r\nGranted, how PowerShell currently surfaces errors can be characterized as \"scary, noisy, lengthy information overload\" - see #3647 -  but that's a separate issue (the resolution of which is way overdue, by the way).\r\n\r\n",
      "created_at": "2018-07-25T02:37:53Z",
      "updated_at": "2018-07-25T02:37:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 \r\n1. Displaying the table is corrupted by error messages\r\n2. We must be consistent - if we display incompatible modules, then we must show the broken modules. If we want get only \"core\" compatible modules we need a filer like `-ListAvailable Core` (this can be default). I think it is better UX.",
      "created_at": "2018-07-25T03:30:12Z",
      "updated_at": "2018-07-25T03:30:12Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov \r\n\r\n> 1. Displaying the table is corrupted by error messages\r\n\r\nAn error is never pretty, but its job is to indicate an exceptional condition that needs attention.\r\n\r\n> 2. We must be consistent - if we display incompatible modules, then we must show the broken modules\r\n\r\nA malformed (broken) module is not an _incompatible_ module. You cannot meaningfully classify a malformed module beyond its \"brokenness\" - that is why it should be treated as an exception.\r\n\r\n",
      "created_at": "2018-07-25T04:07:03Z",
      "updated_at": "2018-07-25T04:07:03Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "I think one point worth mentioning is that for a module with an invalid manifest (e.g. malformed manifest, wrong PowerShell version, missing required module, etc.), you get the following behaviours:\r\n\r\n- `Get-Module -ListAvailable`: Module appears -- a \"fake\" PSModuleInfo is generated\r\n- `Import-Module`: An error is thrown (I think terminating, but not certain)\r\n\r\nWhereas, for a module with the wrong edition loaded from the System32 path:\r\n\r\n- `Get-Module -ListAvailable`: Module does not appear -- it effectively does not exist (I had to introduce an unpleasant hack to make this behaviour happen, since a `null` result from `LoadModuleManifest` in `Get-Module -ListAvailable` otherwise gets turned into the fake PSModuleInfo)\r\n- `Import-Module`: An error is thrown, just like in the above scenario.\r\n\r\nHaving the edition check use special behaviour seems a bit inconsistent to me, but more importantly, introduces complexity that we will need to continue to maintain forever.",
      "created_at": "2018-07-25T04:15:54Z",
      "updated_at": "2018-07-25T04:15:54Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@rjmholt: Not knowing the internals and possibly missing part of the picture, here's what makes sense to me:\r\n\r\n* `Get-Module -ListAvailable` ... list all (well-formed) _edition-compatible_ modules.\r\n\r\n* `Get-Module -ListAvailable -SkipEditionCheck` ... list _all_ (well-formed) available modules, including edition-incompatible ones.\r\n\r\nIrrespective of the specific parameters, any malformed module should generate a non-terminating error.\r\n\r\nRe `Import-Module`: the error it reports with a malformed module is _non-terminating_, which is consistent with PowerShell's guidelines in general (it accepts an _array_ of modules to import) - though debatable in this specific case.\r\n\r\n---\r\n\r\nAs an aside: An easy way to test if a command generates a terminating or non-terminating error, using the example of `Import-Module` (assume the presence of an invalid manifest at `./badModule/badModule.psd1`:\r\n\r\n```powershell\r\nPS> 'hi' -f (Import-Module ./badModule)\r\nImport-Module : The module manifest '...' could not be processed because it is not a valid PowerShell module manifest file\r\nhi\r\n```\r\n\r\n(With `$ErrorActionPreference` at its default, `Continue`), the fact that `hi` printed implies that the error is _non-terminating_.\r\n\r\n",
      "created_at": "2018-07-25T04:56:03Z",
      "updated_at": "2018-07-25T04:56:03Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this.  \r\n\r\n  - If `CompatiblePSEditions` is readable, but empty, it should default to `Desktop` explicitly.\r\n  - If it can't read the module manifest, then that value should be an empty string and not `Desktop`.  \r\n\r\nIn the case a malformed module manifest is found, a non-terminating error should be returned.",
      "created_at": "2018-07-25T22:32:34Z",
      "updated_at": "2018-07-25T22:32:34Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @SteveL-MSFT.\r\n\r\nI have trouble reconciling the following two statements, however:\r\n\r\n> 1. If it can't read the module manifest, then that value should be an empty string and not Desktop.\r\n> 2. In the case a malformed module manifest is found, a non-terminating error should be returned.\r\n\r\nThis makes it sound like a malformed module should _both_ (1) output a dummy module-info object as part of the success output stream with `.CompatiblePSEditions` set to `''` _and_ (2) return a non-terminating error to indicate the malformation.\r\n\r\nHowever, my expectation is that (2) is sufficient - what benefit is there in _also_ reporting a malformed module as part of the _success_ output?\r\n\r\n\r\n",
      "created_at": "2018-07-26T02:24:40Z",
      "updated_at": "2018-07-26T02:24:40Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 I think when I typed up the summary we were still in discussion between showing PSEdition as empty (and some other indicator it is invalid) or producing a non-terminating error.  We ended up with agreeing that a non-terminating error makes the most sense (with expectation that we improve the visual of non-terminating errors which is already another issue).\r\n\r\nSo to summarize, @PowerShell/powershell-committee agreed on throwing a non-terminating error if the module manifest is invalid.",
      "created_at": "2018-07-26T04:52:35Z",
      "updated_at": "2018-07-26T04:52:35Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT (& @PowerShell/powershell-committee), does `module manifest is invalid` **include** or **exclude** modules that rejected because of an incompatible PSEdition? (I assume exclude, but code-wise, the edition check is one of the validity checks and will require special handling)",
      "created_at": "2018-07-27T19:39:07Z",
      "updated_at": "2018-07-27T19:39:07Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@rjmholt `invalid` means the module manifest is not well-formed.  In the case where the module manifest is well-formed and `CompatiblePSEditions` indicates it is not compatible, that is still a valid module manifest and should follow existing behavior which is it doesn't show up (if under system32 path) without `-SkipEditionCheck`, otherwise, it should show as `Desktop` if explicitly stated or `Desktop` if `CompatiblePSEditions` is empty or doesn't exist.",
      "created_at": "2018-07-27T21:00:25Z",
      "updated_at": "2018-07-27T21:00:25Z"
    }
  ],
  "created_at": "2018-07-16T22:03:07Z",
  "labels": [
    "Issue-Discussion",
    "Breaking-Change",
    "WG-Cmdlets-Core"
  ],
  "number": 7298,
  "state": "open",
  "title": "Get-Module -ListAvailable hides edition-incompatible modules but lists otherwise incompatible modules",
  "updated_at": "2018-07-27T21:00:26Z"
}