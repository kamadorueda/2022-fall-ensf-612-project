{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8357",
  "author": "HumanEquivalentUnit",
  "body": "These don't work, but it would be nice if they did:\r\n\r\n    PS C:\\> 'test.txt', '', 'example.xml' | where -match 'txt'\r\n    where-object : The specified operator requires both the -Property and -Value parameters.\r\n\r\n    PS C:\\> 1..10 | ? -gt $x\r\n    ?: The specified operator requires both the -Property and -Value parameters.\r\n\r\nbut integers and strings have no -Property way to access their values. Select-String helps for text, but outputs MatchInfo not String. And doesn't help for any of the operators except -match.\r\n\r\nUsed without -Property it could implicitly use `$_` with whatever casting that implies, the same as if you'd written `{ $_ -operator 'value' }` as the filterscript.\r\n\r\nAnd then you could do:\r\n\r\n    PS C:\\> 'test.txt', '', 'example.xml' | ? | foreach { .. }\r\n\r\nand that would implicitly act like `? { $_ }` which does a boolean cast on the object and passes true ones.",
  "closed_at": null,
  "comments": [
    {
      "author": "jcotton42",
      "author_association": "CONTRIBUTOR",
      "body": "I like this proposal, but I'm very not sold on just `where-object` testing for truthiness, feels too cryptic",
      "created_at": "2018-11-29T05:26:53Z",
      "updated_at": "2018-11-29T05:26:53Z"
    },
    {
      "author": "HumanEquivalentUnit",
      "author_association": "CONTRIBUTOR",
      "body": "I'm not sold on that part either, but `where { $_ }` is pretty cryptic, and `where -property x -eq $true` casts the wrong way, $true gets cast to string, instead of the property being cast to bool, so that looks like it would work but it \"surprisingly\" doesn't.\r\n\r\nThe concept \"filter things which are truthy\" is useful, and it sort of falls out of this request - with a property it maps to `{$_.Prop -op $value}`, then with this request if you don't specify `-property` it works on \"the object in the pipeline\" and maps to `{$_ -op $value}`, and then if you don't specify the operation either it would map to just `{$_}`.  This part could be separated out into a different request for a way to say something like `where-object -Truthy`. ",
      "created_at": "2018-11-29T05:57:16Z",
      "updated_at": "2018-11-29T22:04:45Z"
    },
    {
      "author": "nohwnd",
      "author_association": "NONE",
      "body": "I would like to say that even though the operators already filter collections without using `where`:\r\n\r\n```powershell\r\nPS C:\\> 'test.txt', '', 'example.xml' -match 'txt'\r\nPS C:\\> 1..10 -gt $x \r\n```\r\n\r\nI am still missing the proposed syntax, because it would allow for using less parentheses. A command followed by a pipeline is not \"overloaded\", unlike a command followed by an operator. In that case the operator is considered a parameter of the command, and parentheses must be used:\r\n\r\n```powershell\r\nfunction Get-Range { 1..10 }\r\n$x = 5\r\n\r\n\r\n( Get-Range ) -gt $x\r\n\r\n# vs.\r\n\r\nGet-Range | where -gt $x\r\n```\r\n\r\nThe truthiness I am also not sold at. ",
      "created_at": "2018-11-29T08:27:14Z",
      "updated_at": "2018-11-29T09:39:32Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@HumanEquivalentUnit The inability to specify the whole object has annoyed me for years.  I'd always expected that we would use `-Property _` to mean the whole object but that never got implemented. Of course there's no reason not to do it now. So\r\n```powershell\r\n1..10 | where _ -gt 5\r\n```\r\nwould be equivalent to\r\n```powershell\r\n1..10 | where {$_ -gt 5}\r\n```",
      "created_at": "2018-11-29T13:23:29Z",
      "updated_at": "2018-11-29T13:23:29Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That's not a bad idea @BrucePay but it _does_ prevent anyone from making use of a _property_ actually _named_ `_` (i.e., `| where {$_._ -gt 5}` would be rendered impossible to work with using the parameter syntax).",
      "created_at": "2018-11-29T13:26:26Z",
      "updated_at": "2018-11-29T13:26:36Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 Practically speaking, the likelihood of a property named '_' is miniscule. And should it occur, you can always use the scriptblock form of the command. After all, the property syntax is a very small subset of what you can do in a scriptblock. Sso I don't see this as a significant concern.",
      "created_at": "2018-11-29T17:48:43Z",
      "updated_at": "2018-11-29T17:48:43Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Certainly, but I don't see why `Where _ -gt 5` is better than `Where-Object -gt 5`; arguably the latter is more clear in intent, and doesn't risk being confused for an (admittedly _unwise_) property name. \ud83d\ude04 ",
      "created_at": "2018-11-29T18:18:03Z",
      "updated_at": "2018-11-29T18:18:35Z"
    },
    {
      "author": "HumanEquivalentUnit",
      "author_association": "CONTRIBUTOR",
      "body": "@BrucePay I like the use of `_` well enough; right now, `gci | where length` filters on the property Length being truthy, so `|where _` is a valid instruction. Clashing with properties called `_` doesn't bother me, but special casing `-Property _` to mean \"the object\" feels weird, is there anywhere else that meaning exists? Would people then expect it to work with other cmdlets that have a -Property?\r\n\r\nWhat do you think of the idea of it being valid to use where-object with no parameters at all?\r\n\r\nIt's growing on me to treat the word \"object\" in \"where-object\" as implying `$_`; if we agree that the parameter form `-Property 'Foo' -oper -Value $bar` equals a scriptblock form `{ $_.Foo -oper $bar }`, then it makes sense to allow leaving any of those parts out in the parameter form and have the behaviour the same as if you left them out in the scriptblock form. The following patterns fall out of it, the first two are valid now, the last two are not, but seem fitting:\r\n\r\n    # param + operator\r\n    | where-object { $_.Foo -gt $bar }                  # scriptblock pattern becomes:\r\n    | where-object -Property Foo -gt -Value $bar        # parameter form.\r\n    | where-object Foo -gt $bar                         # binding without parameter names.\r\n    Import-Csv test.csv | where-object Quantity -gt 5   # example use.\r\n\r\n\r\n    # param only\r\n    | where-object { $_.Foo }                     # casting the property value to bool\r\n    | where-object -Property Foo                  # doing that by leving out -Value param\r\n    | where-object  Foo                           # and by positional binding\r\n    Import-Csv test.csv | where-object InStock\r\n\r\n\r\n    # Operator only\r\n    | where-object { $_ -gt $bar }     # no property specified, ->\r\n    | where-object -gt $bar            # $_ is implied by the \"object\" part of \"Where-Object\"\r\n    Get-Content test.txt | where-object -match 'baz'\r\n\r\n    # Neither\r\n    | where-object { $_ }        # implicitly casting the object to bool\r\n    | where-object               #  $_ is implied by the \"object\" part of \"where-object\"\r\n    Get-Content test.txt| Where-Object\r\n\r\nIf we did use `_` that also works, but it is a bit of a weird special case, and things seem to work neatly without that.",
      "created_at": "2018-11-29T18:25:39Z",
      "updated_at": "2018-11-29T22:04:12Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Good point re name collisions, @vexx32 and @HumanEquivalentUnit; omitting `-Property` altogether (`... | where -gt 5`), as @HumanEquivalentUnit  suggests, seems like a good solution.\r\n\r\nWhile omission may be slightly more obscure at first, proper documentation should address that.\r\n\r\nSimilarly, I feel that it should be sufficient to properly _document_ the implicit Boolean logic that `Where-Object` _already_ applies, obviating the need for something like `-Truthy`. \r\n\r\nAfter all, something like `'hi', '', 'there' | Where-Object Length` in lieu  of `'hi', '', 'there' | Where-Object Length -gt 0` works fine.\r\n\r\nI've created two doc issues:\r\n\r\n* Suggestion to create a conceptual topic that explains PowerShell's implicit to-Boolean coercion logic: https://github.com/PowerShell/PowerShell-Docs/issues/3356\r\n\r\n* Suggestion to link to that topic from the `Where-Object` topic and explain how implicit Boolean logic can be leveraged with `Where-Object`: https://github.com/PowerShell/PowerShell-Docs/issues/3357\r\n\r\n",
      "created_at": "2018-11-29T20:19:24Z",
      "updated_at": "2018-11-30T04:01:05Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 @HumanEquivalentUnit So I rolled some code to try this out, and it _sort of_ works. Well, truthiness does, at least:\r\n```\r\nPS> 0, 1, 0, 2, 0, 3 | Where-Object\r\n1\r\n2\r\n3\r\n```\r\n\r\nThe _problem_ arises with how parameters are defined. If you attempt to do the above with `Where-Object -gt 1` you hit an issue &mdash; the value `1` is assigned by position, and ends up being assigned to the `-Property` parameter, _not_ `-Value`.\r\n\r\nI'm considering whether simply dropping `-Value` as a parameter might be a better option, and having the \"value\" be taken by the selected operator parameter, rather than have them be switch parameters. This would be a breaking change as it would technically remove an operator, but I think is preferable to having a confusing and potentially unpredictable doubling up on the parameters. (And, at least in the scripts I see, people actually specifying `-Value` by name are _extremely_ rare.)\r\n\r\nThe alternative would be doing the above _without_ dropping `-Value` as a parameter, which means we have to do a runtime check to ensure users don't accidentally provide a value to _both_ parameters.\r\n\r\nEither method is fine, but I'd be interested to hear what y'all think of that. \ud83d\ude04 ",
      "created_at": "2018-12-01T14:50:13Z",
      "updated_at": "2018-12-01T14:50:13Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@HumanEquivalentUnit \r\nUpdate: Got a properly working implementation over here: https://github.com/vexx32/PowerShell/blob/093ef91fac588bb730a81ad2926166f23e4d08b5/src/System.Management.Automation/engine/InternalCommands.cs#L853\r\n\r\nBasically unless we want to do a _whole lot_ of really kludgy implementation special-casing here, the most elegant and effective solution is just to **completely drop** the `-Value` parameter and have the `-eq` and other parameters (which are currently switches) take the value themselves (causing them to be typed `object`) and snip out the frankly just-getting-in-the-way-at-this-point `-Value` parameter completely.\r\n\r\nThis allows the following new syntaxes:\r\n```powershell\r\n$Array | Where-Object # outputs only truthy inputobjects\r\n$Array | Where-Object -gt 3 # outputs only inputobjects that are numerically greater than 3\r\n```\r\nAs well, of course, as all current syntaxes, _except_ one:\r\n```powershell\r\n$Array | Where-Object -Property $Name -eq -Value 2\r\n```\r\nAny existing code instances where `-Value` is explicitly specified will unfortunately fail; and I don't really see an easy way around that issue. Without doing it like this, the `$Array | Where-Object -gt 3` assigns `3` to the `-Property` parameter by position instead.\r\n\r\n@BrucePay I'd appreciate your thoughts on this approach and/or any better alternatives if you are thinking of something I've missed. \ud83d\ude04 ",
      "created_at": "2018-12-02T04:43:37Z",
      "updated_at": "2018-12-02T06:40:19Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Well done, @vexx32. \r\n\r\nI too was hoping that eliminating `-Value` can be considered a [Bucket 3: Unlikely Grey Area](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md#bucket-3-unlikely-grey-area) change, but [a quick search](https://github.com/search?q=language%3Apowershell+where-object+-value&type=Code) tells me that it _is_ being used (I've gone through abut 20 pages' worth, which had many false positives, but I've encountered about a dozen distinct repos that use it).\r\n\r\nWe can work around that with a bit of a kludge that _simulates_ the presence of a `-Value` parameter, as in the following PowerShell PoC:\r\n\r\n```powershell\r\n[CmdletBinding()]\r\nparam(\r\n  # Operator with operand\r\n  [object] $GT\r\n  ,\r\n  # Ideally, we'd hide this parameter from the syntax diagrams\r\n  # See https://github.com/PowerShell/PowerShell/issues/7868\r\n  [Parameter(ValueFromRemainingArguments)]\r\n  [object[]] $LegacyRest\r\n)\r\n\r\nif ($LegacyRest.Count -gt 0) {\r\n  if ($LegacyRest.Count -eq 1 -and $GT -is [string] -and 0 -eq '-Value'.IndexOf($GT, [StringComparison]::InvariantCultureIgnoreCase)) {\r\n    # Direct operand was '-Value' (or an abbreviation), so we expect the true\r\n    # operand as the one and only element of $LegacyRest.\r\n    $GT = $LegacyRest[0]\r\n  } else { # Unexpected extra arguments.\r\n    # Should be a *statement*-terminating error.\r\n    Throw \"A parameter cannot be found that accepts '$LegacyRest'.\"\r\n  }\r\n}\r\n\r\n# Echo the effective operand.\r\n\"[$GT]\"\r\n```\r\n\r\nThe above would support `foo -GT 3` as well as `foo -GT -Value 3`.\r\n\r\nCaveats: \r\n\r\n* `foo 3 -gt -Value` would also work, but I don't think we need to worry about that.\r\n\r\n* Single-character abbreviation `-v` for `-Value` wouldn't work anymore, because in the absence of an actual `-Value` parameter `-v` unambiguously binds to `-Verbose` - again, not something I think we need to worry about.\r\n\r\n* Tab completion for `-Value` will go away, but I think that's fine, given that we want to steer users toward the operand syntax.\r\n\r\n* As suggested in #7868, it would be nice to be able to hide obsolete parameter or, as in this case, helper parameters that solely exist to preserve backward compatibility.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2018-12-02T17:59:51Z",
      "updated_at": "2018-12-02T17:59:51Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Hmm, with a ValueFromRemainingArguments...\r\n\r\nYou're right, it _is_ kind of a kludge. Considering the fact that `-Value` already exists I'd prefer to just keep it on as a parameter and have it determine which to use based on which is supplied.\r\n\r\nNot sure quite how to handle that in the actual code at the moment, though, due to how the parameters  interact with the getters and setters.",
      "created_at": "2018-12-02T18:32:09Z",
      "updated_at": "2018-12-02T18:32:09Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Yes, it's a kludge, but a good one at that, if I do say so myself:\r\n\r\n* Existing code will not break.\r\n\r\n* Given the rarity of current `-Value` use, few people will miss tab-completion for it.\r\n\r\n* On the implementation side, the burden of legacy support is _localized_ (aside from the parameter declaration, the single `if` statement above) and should _scale automatically_ (won't incur additional implementation effort when new operators are added in the future, as far as I can tell).\r\n\r\nThat said, if you find a non-kludgy solution that also doesn't encumber future extensibility, all the better.\r\n",
      "created_at": "2018-12-02T19:31:27Z",
      "updated_at": "2018-12-02T19:31:27Z"
    },
    {
      "author": "iRon7",
      "author_association": "NONE",
      "body": "Apparently, I created a (partly) duplicate (#11116) of something implied in this discussion:\r\n\r\nTo my opinion, by default (where no parameters are supplied except for the `$InputObject`), the `Where-Object` should filter-out just `$Null` \"<strike>objects</strike>\" (_not_ **falsey** inputobjects like empty strings, $False or zero's) which is a quiet common used case. Meaning, to filter out e.g. zero's, a suggested statement like  `0, 1, 0, 2, 0, 3 | Where-Object _ -ne 0` (or possibly just an underscore to refer to the whole current object: `0, 1, 0, 2, 0, 3 | Where-Object _`) is required.",
      "created_at": "2019-11-19T12:22:41Z",
      "updated_at": "2019-11-19T15:47:42Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> To my opinion, by default (where no parameters are supplied except for the `$InputObject`), the `Where-Object` should filter-out just `$Null`\r\n\r\nI think this will get a range of opinions. Just null ? Null and empty string / empty array.  \r\n\r\nCurrently Powershell allows this:\r\n `([PSCustomObject]@{Foo=$true}  ) | where -Property foo `\r\nand it returns the object if Foo is \"truthy\" (so if it is 0 it won't be returned.).  It is the equivalent of `where {$_.foo}` which makes sense. \r\n\r\nEffectively what is being proposed here says with no `-property` specified `where-object` should apply to the object.  Which I think works fine with `-ne \"\"` , `-gt 0`  , ` -ne $null` or `-is [object]`\r\n\r\nThe logical combination of those two would be `Where-object ` with _no parameters_ should pass through objects which are truthy - the same as running `Where-object {$_}`  dropping 0, empty string and empty array as well as null.   TBH dropping the zeros from a stream of numbers would help in some places and cause subtle, maddening bugs in others . Making the object and property behaviours different would not be good .\r\n\r\nI'd be inclined to allow <operator> <value> without -property for \"where the object\". And  keep the current -Property without <operator> <value> but require SOME parameter. \r\n\r\n\r\n",
      "created_at": "2019-11-19T15:26:25Z",
      "updated_at": "2019-11-19T15:26:25Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I agree that making `... | Where-Object` _not_ equal to `... | Where-Object { $_ }` is a problematic inconsistency we should avoid.\r\n\r\nHowever, having _some_ shorthand for `... | Where-Object { $null -ne $_ }` would be nice, but perhaps that is better implemented as a new switch, such as `-NotNull`; that is also problematic, however, in that it would be a departure from having all switches correspond to _operators_; additionally, it would be a separate discussion.\r\n\r\nHowever, perhaps that's not even needed, because, once the PR for `-is $null` / `-isnot $null` support is merged (#10704), in combination with _this_ proposal, it would allow the following, relatively concise solution:\r\n\r\n```powershell\r\n# WISHFUL THINKING\r\nPS>  0, 1, $null, 2 | Where-Object -IsNot $null \r\n0\r\n1\r\n2\r\n```\r\n\r\n",
      "created_at": "2019-11-19T17:06:31Z",
      "updated_at": "2019-11-19T17:07:20Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 I'm taking another stab at this one as we speak, hehe. Got my curiosity once again. I suspect the solution I was desperately trying to avoid will end up being the only sensible solution -- add more parameter sets. Fingers crossed. \ud83d\ude01 ",
      "created_at": "2019-11-19T17:07:51Z",
      "updated_at": "2019-11-19T17:07:51Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "I'd **love** to see this functionality!!",
      "created_at": "2019-11-19T18:51:39Z",
      "updated_at": "2019-11-19T18:51:39Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Running into parameter set issues again, I suppose that's predictable. I'd prefer to break it cleanly with my previous idea, but backwards compat would be a bit annoying to break I suppose. \ud83e\udd14 \r\n\r\nWill think on this some more this week/end and see if I can wrangle the parameter sets sensibly. So far that's a bit dicey to do. \ud83d\ude42 ",
      "created_at": "2019-11-19T19:02:05Z",
      "updated_at": "2019-11-19T19:02:05Z"
    },
    {
      "author": "jszabo98",
      "author_association": "NONE",
      "body": "I'm not surprised there's not a simple way to search object property names and values without resorting to findstr.  Select-string doesn't have the right effect.\r\n```powershell\r\nget-process cmd | findstr /i cmd\r\n```\r\nSure this works but it still returns all the properties:\r\n```powershell\r\nget-process cmd | where { $_ -match 'cmd' } \r\n```\r\nHere's my first attempt at a \"search-object\":\r\n\r\n```powershell\r\n# search-object.ps1\r\n\r\nparam ($pattern)\r\n\r\nbegin {\r\n  $hash = @{}\r\n}\r\n\r\nprocess {\r\n  $obj = $_\r\n\r\n  $obj | Get-Member | foreach name | \r\n  foreach {\r\n    $name = $_\r\n    $value = $obj.$name\r\n    if ($name -match $pattern -or $value -match $pattern) {\r\n      $hash += @{$name = $value}\r\n    }\r\n  }\r\n  [pscustomobject]$hash\r\n}\r\n```\r\n```powershell\r\nget-process cmd | search-object cmd\r\n```\r\n```powershell\r\n\r\n\r\nModules         : {System.Diagnostics.ProcessModule (cmd.exe), System.Diagnostics.ProcessModule (ntdll.dll),\r\n                  System.Diagnostics.ProcessModule (KERNEL32.DLL), System.Diagnostics.ProcessModule\r\n                  (KERNELBASE.dll)...}\r\nPath            : C:\\Windows\\System32\\cmd.exe\r\nMainModule      : System.Diagnostics.ProcessModule (cmd.exe)\r\nProcessName     : cmd\r\nName            : cmd\r\nMainWindowTitle : cmd - powershell\r\n```",
      "created_at": "2020-02-04T18:53:11Z",
      "updated_at": "2020-02-04T21:13:10Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@jszabo98, this issue is about making _object_-based filtering via `Where-Object` easier, not about _string_ searches; changing the currently unintuitive behavior of `Select-String` is the subject of the enhancement request in #10726.",
      "created_at": "2020-02-04T20:28:46Z",
      "updated_at": "2020-03-01T23:05:41Z"
    },
    {
      "author": "UberKluger",
      "author_association": "NONE",
      "body": "@jszabo98: the description of your intended results does not match with what the example commands are actually doing (suggesting that you perhaps don't \"*get*\" the way powershell works). You state that you are trying to search object property names and values but\r\n~~~\r\nget-process cmd | findstr /i cmd\r\n~~~\r\nsimply finds all the lines produced by `Get-Process` **AFTER** its output objects are converted to text by `Format-Table` (or maybe `Format-List` for other cmdlets with more default displayed properties). In this case that's every line except the column headers, since you restricted `Get-Process` to only produce output objects for processes named \"cmd\". So no \"selection\" of property names or values.  \r\n\r\nIn\r\n~~~\r\nget-process cmd | where { $_ -match 'cmd' }\r\n~~~\r\nyou are selecting `Get-Process` output objects which `-match` 'cmd' but `-match` only operates on `[String]` or `[String[]]` (i.e. single strings or arrays of string). Thus, every `Get-Process` output object is first converted to a `[String]` before the match is attempted. Since the `ToString()` method of `[System.Diagnostics.Process]` simply appends the process name to the type name (supplied by `[Object].ToString()`), `$_` gets converted to \"System.Diagnostics.Process (cmd)\" which then matches so the entire object is passed through `Where-Object`.  \r\n\r\nIf you had not restricted the output of `Get-Process`, the result would have been similar except that the output would have included any process that had a name which matched 'cmd' (i.e. if the name had 'cmd' *anywhere* in it).  \r\n\r\nIn 'search-object.ps1', (ignoring several possible optimizations) you set `$hash` to an empty hash table in the `-Begin` script block (executed only once *before* processing any input objects) and then add each found item in the `-Process` script block. This means that the hash table will try to accumulate the matched properties of the current object and **every** preceding object. The most likely result is that you will have two objects match on the values of properties with same name or just have the names match `$pattern`. Attempting to add an item with the same name as an existing item will throw an exception. You could change `$hash += @{$name = $value}` to `$hash[$name] = $value` thus overwriting the value for each new object processed (automatically creating an item if it doesn't exist), however you will still accumulate items from previously processed objects. Unless this is what you intended, you need to place the `$hash = @{}` at the beginning of the `-Process` script block to have an empty hash table for each object to be matched (this would also solve the duplicate name problem).\r\n",
      "created_at": "2020-07-05T07:09:22Z",
      "updated_at": "2020-07-05T07:09:22Z"
    },
    {
      "author": "UberKluger",
      "author_association": "NONE",
      "body": "Regarding the problem of accessing the object as a whole instead of a particular property, how about changing the allowed arguments to `-Property` to include methods? This would allow access to strings and value type objects as follows:\r\n~~~\r\nWhere-Object 'tostring()' -eq 'cmd' # trying to match a string object\r\n\r\nWhere-Object 'tostring(\"x\")' -match '00$' # trying to match a numeric value which is a multiple of 256\r\n# not the most efficient way, just a demonstration of the potential versatility available\r\n\r\nWhere-Object 'toint32($null)' -gt 1024 # checking the value of a numeric or parsed string\r\n# had to use $null since no overload of ToInt32 with 0 arguments\r\n\r\n# \"properties\" are verbatim quoted to prevent parser errors\r\n~~~\r\nThe main argument in favour of this is that it provides the desired functionality for strings (vast majority of cases) but does not introduce any special cases or break existing syntax. While not as compact as perhaps desired, there might be efficiency benefits to directly calling a method and processing the result within the cmdlet instead of calling a script block to do the work.",
      "created_at": "2020-07-05T07:38:53Z",
      "updated_at": "2020-07-05T07:38:53Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That would probably be best served as a completely separate feature request @UberKluger \ud83d\ude42 \r\n\r\nIt would need investigation before making that assumption, though. The ways cmdlets can bind dynamic properties/methods is complicated, and although `ForEach-Object` _does_ have a parameter that does that kind of thing (`-MemberName`) if my memory is decently reliable, it often ends up being slower than putting the method call in a scriptblock instead.",
      "created_at": "2020-07-05T08:19:54Z",
      "updated_at": "2020-07-05T08:19:54Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@vexx32, you're probably thinking of #7700, though I suspect that there's ultimately no good reason for, say, `Get-Item $PROFILE | ForEach-Object ToString` to be slower than `Get-Item $PROFILE / ForEach-Object { $_.ToString() }`.\r\n\r\n@UberKluger, I see searching  _string representations_ of objects as a separate use case and suggest sticking with the object/property scenario for `Where-Object`.\r\n\r\nIf there really is a need to call `.ToString()` with arguments and test against the result, the script-block syntax has that covered (`0x100 | Where-Object { $_.ToString(\"x\") -match '00$' }`)\r\n\r\nA related scenario is to have a quick-and-dirty way to search the string representations _as they would print to the console_ (the rich, user-friendly representations provided by the formatting system), line by line.\r\nThis _should_ be covered by `Select-String`, but currently isn't: e.g., you _should_ be able to run `Get-Date | Select-String July` and get a result (in July, with an English-based culture), but you currently must use `Get-Date | Out-String -Stream | Select-String July`, i.e. an explicit call to the formatting system, because `Select-String` currently operates on the typically-useless `.ToString()` representations - see https://github.com/PowerShell/PowerShell/issues/10726#issuecomment-567628146\r\n",
      "created_at": "2020-07-05T14:38:50Z",
      "updated_at": "2020-07-05T14:38:50Z"
    }
  ],
  "created_at": "2018-11-29T05:25:15Z",
  "labels": [
    "Issue-Discussion",
    "WG-Cmdlets-Core"
  ],
  "number": 8357,
  "state": "open",
  "title": "Request:  Where-Object used without -Property works on \"the object\"",
  "updated_at": "2020-07-05T14:38:50Z"
}