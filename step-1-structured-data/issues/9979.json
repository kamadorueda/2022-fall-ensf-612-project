{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9979",
  "author": "KnicKnic",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\nI am trying to progammatically \"dot source\" a script file (through c#). \r\n* According to https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_scopes?view=powershell-6#using-dot-source-notation-with-scope \r\n    * \"dot sourcing\" is equivalent to running the script in the local context. \r\n* https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.powershell.addscript?view=pscore-6.2.0#System_Management_Automation_PowerShell_AddScript_System_String_System_Boolean_ \r\n    * you can run the script in the local context by using AddScript with true for useLocalScope. \r\n\r\nHowever different results are produced, as it does not appear the script is executed in the local scope through **AddScript** function.\r\n\r\nWould love if a workaround exists.\r\n\r\n# Steps to reproduce\r\n## test.ps1\r\n```powershell\r\n\r\nwrite-host $localScope\r\n$localScope = \"local\"\r\n\r\nwrite-host $script:scriptScope\r\n$script:scriptScope = \"script\"\r\n\r\nwrite-host $global:globalScope\r\n$global:globalScope = \"global\"\r\n```\r\n## failing steps\r\n```powershell\r\n$psCommand = [System.Management.Automation.PowerShell]::Create([System.Management.Automation.RunspaceMode]::CurrentRunspace)\r\n$null = $psCommand.AddScript(\".\\test.ps1\", $true)\r\n$psCommand.Invoke()\r\n$psCommand = [System.Management.Automation.PowerShell]::Create([System.Management.Automation.RunspaceMode]::CurrentRunspace)\r\n$null = $psCommand.AddScript(\".\\test.ps1\", $true)\r\n$psCommand.Invoke()\r\n```\r\n\r\n# Expected behavior\r\n** Note: purposefully put in blank lines **\r\n```none\r\n\r\n\r\n\r\nlocal\r\nscript\r\nglobal\r\n```\r\n## Above is what is output when \"dot source\"\r\n```powershell\r\n. .\\test.ps1\r\n. .\\test.ps1\r\n```\r\n# Actual behavior\r\n\r\n```none\r\n\r\n\r\n\r\n\r\n\r\nglobal\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.1\r\nPSEdition                      Core\r\nGitCommitId                    6.2.1\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2019-06-22T18:59:56Z",
  "comments": [
    {
      "author": "bpayette",
      "author_association": "CONTRIBUTOR",
      "body": "@KnicKnic If `UseLocalScope` is set to true, the script will be run in a _new local scope_. If it's false then it will run in the global scope. So it works the opposite way you expect unfortunately. Also, `AddScript` is used to run a piece of PowerShell code in-line. If you want to run a script file (script command), you should use `AddCommand()` passing in the name of the file. Something like:\r\n```powershell\r\n [powerShell]::Create(\"CurrentRunspace\").AddCommand(\"./doit.ps1\", $false).Invoke()\r\n```\r\nshould work.",
      "created_at": "2019-06-22T18:18:18Z",
      "updated_at": "2019-06-22T18:18:18Z"
    },
    {
      "author": "KnicKnic",
      "author_association": "NONE",
      "body": "@bpayette thank you.\r\n\r\nI was confused by thinking false would be the default for the functions without the option. Thanks for clearing that up.\r\n\r\nAs for Add-Script, I now realize it can execute statements I would type into the shell where as add-command needs an actual command.\r\n```powershell\r\n[powerShell]::Create(\"CurrentRunspace\").AddScript(\"$some_variable = `\"value`\"\", $false).Invoke()\r\n[powerShell]::Create(\"CurrentRunspace\").AddScript(\"write-host $some_variable\", $false).Invoke()\r\n```\r\nWhat are the benefits of using AddCommand I assume it invokes less parsing?\r\n",
      "created_at": "2019-06-22T18:59:55Z",
      "updated_at": "2019-06-22T18:59:55Z"
    }
  ],
  "created_at": "2019-06-22T14:27:26Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 9979,
  "state": "closed",
  "title": "useLocalContext in AddScript not equivalent of \"dot sourcing\"",
  "updated_at": "2019-06-28T13:15:33Z"
}