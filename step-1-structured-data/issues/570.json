{
  "_url": "https://github.com/PowerShell/PowerShell/issues/570",
  "author": "vors",
  "body": "Windows PowerShell allows both `\\` and `/` be path delimiters.\n\nConsider\n\n```\n#  Full PS on Windows\nPS C:\\> 'foo' > bar\nPS C:\\> cat ./bar\nfoo\nPS C:\\> cat .\\bar\nfoo\n\n```\n\nVersus \n\n```\n# Linux version\nPSL /Users/vors/dev/PowerShell-Linux> 'foo' > bar\nPSL /Users/vors/dev/PowerShell-Linux> cat ./bar\nfoo\nPSL /Users/vors/dev/PowerShell-Linux> cat .\\bar\ncat : Cannot find path '/Users/vors/dev/PowerShell-Linux/.\\bar' because it does not exist.\n```\n\nIt's a problem for **porting**: there are scripts that could run as-is, but don't because of the wrong path delimiters.\n\nOn the other hand, on Linux you can create a folder `foo\\bar`, so adding `\\` as alternative path separator would make this corner case harder.\n\nThis problem can be solved with additional escaping \n\n```\ncd foo`\\bar\n```\n\n**Sidenote**: 'Set-Location' (`cd`) currently fails for it, but `Get-ChildItem` (`ls`) works\n\n```\nPSL /Users/vors/dev/PowerShell-Linux> ls ./foo\\bar/\n\n\n    Directory: /Users/vors/dev/PowerShell-Linux/foo\\bar\n\n\nMode                LastWriteTime         Length Name                                                                                                                    \n----                -------------         ------ ----                                                                                                                    \n------          2/20/16   9:38 PM              6 1   \n\n\nPSL /Users/vors/dev/PowerShell-Linux> cd ./foo\\bar/\ncd : An object at the specified path /Users/vors/dev/PowerShell-Linux/foo\\bar does not exist.\n```\n",
  "closed_at": "2016-06-15T19:55:36Z",
  "comments": [
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "I'll note that the original developer and PM both preferred _not_ supporting backslash, for various reasons that I can dig up if you wish.\n\nHowever, I support mapping backslash to slash and using PowerShell's escape character, backtick, to escape a backslash that is needed in an actual path name. But there is a LOT of code that deals with this, all of which would need to be fixed, and would likely better be a task for the PowerShell teams once we're on a unified code base.\n",
      "created_at": "2016-02-21T08:12:00Z",
      "updated_at": "2016-02-21T08:12:00Z"
    },
    {
      "author": "palladia",
      "author_association": "CONTRIBUTOR",
      "body": "Linux allows backslash as a valid character in file and directory names.  Allowing it to be a directory separator would make things complicated.  But interestingly, .NET supports both:  [altDirectorySeparatorChar](https://msdn.microsoft.com/en-us/library/system.io.path.altdirectoryseparatorchar%28v=vs.110%29.aspx)\n\nEven on Windows, the mixing of forward and backward slashes isn't as perfect as it could be.  We've had to modify many scripts and use Join-Path instead of hard-coded slashes.\n",
      "created_at": "2016-02-21T22:15:24Z",
      "updated_at": "2016-02-21T22:15:24Z"
    },
    {
      "author": "zach-folwick",
      "author_association": "CONTRIBUTOR",
      "body": "@vors \"foo\\bar\" is a valid filename in *nix.  It's also used for directories with spaces; e.g., \"Program Files (x86)\" would be \"Program\\ Files\\ (x86)\".\n",
      "created_at": "2016-02-22T18:16:59Z",
      "updated_at": "2016-02-22T18:16:59Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "@zach-folwick yes, I proposed tick for escaping them in names. For spaces escaping in PS somebody could use quotes around the name, instead of `\\` on every space.\n",
      "created_at": "2016-02-22T20:11:33Z",
      "updated_at": "2016-02-22T20:11:33Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "From @JamesWTruher \n\nfor example this should probably work:\n. $HOME/.powershell\\profile.ps1\n\nnew-item $HOME/.powershell\\foo\ncreates a file \".powershell\\foo\" in the HOME directory rather than a file \"foo\" in the $HOME/.powershell directory (additionally, it seems I can't remove this file from within powershell)\n\nAs \"\\\" is a valid filesystem character, it may be that those paths need to be escaped in some way, but we need to do something - our current users use \"\\\" or \"/\" indiscriminately\n",
      "created_at": "2016-03-01T20:33:57Z",
      "updated_at": "2016-03-01T20:33:57Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "I am all for reversing the previous decision to make PowerShell on Linux not slash agnostic. Can we do this @FawcettJohnW, @paulcallen?\n",
      "created_at": "2016-03-01T20:34:42Z",
      "updated_at": "2016-03-01T20:34:51Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "AFAICT we would need to add support for `\\ escaping the backslash, but once we had that, we could then just interpret unescaped backslashes as`DirectorySeparatorChar`.\n",
      "created_at": "2016-03-01T20:42:23Z",
      "updated_at": "2016-03-01T20:42:23Z"
    },
    {
      "author": "FawcettJohnW",
      "author_association": "NONE",
      "body": "If I understand the proposal correctly, we would, for Linux, change all \\ to /, unless it's escaped.  If the user wants xxx\\yyy, they can do xxx'\\yyy and move forward.  Is that correct?  If so, it is consistent with other shells and I'm fine with it.\n",
      "created_at": "2016-03-01T20:44:00Z",
      "updated_at": "2016-03-01T20:44:00Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "I think we normalize to \"/\", but allow \"\\\". If a user wants a file with a \"\\\" in it, they escape it with `\\\n\nj\n",
      "created_at": "2016-03-01T20:47:09Z",
      "updated_at": "2016-03-01T20:47:09Z"
    },
    {
      "author": "FawcettJohnW",
      "author_association": "NONE",
      "body": "Yep, sounds good to me.\n\nJohn\n",
      "created_at": "2016-03-01T20:50:34Z",
      "updated_at": "2016-03-01T20:50:34Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Great, this is a go. Editing title and labels.\n",
      "created_at": "2016-03-01T20:53:50Z",
      "updated_at": "2016-03-01T20:53:50Z"
    },
    {
      "author": "palladia",
      "author_association": "CONTRIBUTOR",
      "body": "Be careful, since \\ is an escape character for bash.   For example, \"ls test\\ file\" will look for a file \n\"test file\".\n",
      "created_at": "2016-03-01T21:00:45Z",
      "updated_at": "2016-03-01T21:00:45Z"
    },
    {
      "author": "JamesWTruher",
      "author_association": "MEMBER",
      "body": "It's not just bash, but all the *nix shells - it is something we have to be careful about, but we have far too many scripts where \"/\" and \"\\\" are used indiscriminately\n",
      "created_at": "2016-03-01T21:10:56Z",
      "updated_at": "2016-03-01T21:10:56Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "It would be different for PS, but conceptually consistent.\nPS uses backtick instead of `\\` for escaping, so somebody can write\n\n``` powershell\nls foo` bar\n```\n\nBut I don't use this. More idiomatic powershell is\n\n``` powershell\nls 'foo bar'\n```\n",
      "created_at": "2016-03-01T21:38:52Z",
      "updated_at": "2016-03-01T21:39:17Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "@JamesWTruher @vors I think we can at least start with reverting the changes that were made to get us here in the first place, and then work from there to ensure backslashes as valid characters are fully supported via escaping. I'm probably more familiar with the original changes than anyone else, shall I take this on?\n",
      "created_at": "2016-05-19T17:10:51Z",
      "updated_at": "2016-05-19T17:10:51Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Let me ask a more general question: can we track/tag all the changes that need to be made in some way so that if we receive strong user feedback to reverse the decision, we easily can? \n",
      "created_at": "2016-05-19T17:16:14Z",
      "updated_at": "2016-05-19T17:16:14Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Well, yes. They'll be in Git.\n",
      "created_at": "2016-05-19T17:25:09Z",
      "updated_at": "2016-05-19T17:25:09Z"
    }
  ],
  "created_at": "2016-02-21T05:45:49Z",
  "number": 570,
  "state": "closed",
  "title": "Enable backslash as alternative path delimiter",
  "updated_at": "2016-06-15T19:55:40Z"
}