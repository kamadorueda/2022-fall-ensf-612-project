{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12547",
  "author": "markm77",
  "body": "I have a local C# solution (clone of https://github.com/markm77/open-banking-connector-csharp) and I can't seem to be able to load the types of one of its projects. I am developing a PowerScript module to interface with the C# but and really need to have access to the types for cmdlet input/output.\r\n\r\n# Steps to reproduce\r\n\r\nI re-build the C# solution, then run the following in PowerShelll:\r\n\r\n```powershell\r\nadd-type -assemblyname C:\\Repos\\GitHub\\markm77\\open-banking-connector-csharp\\src\\OpenBanking.Library.Connector\\bin\\Debug\\netstandard2.1\\FinnovationLabs.OpenBanking.Library.Connector.dll -passthru\r\n```\r\n\r\n# Expected behavior\r\n\r\nTypes are loaded with no errors.\r\n\r\n# Actual behavior\r\n\r\nThe following errors are produced:\r\n\r\n```none\r\nAdd-Type: Unable to load one or more of the requested types.\r\nCould not load file or assembly 'Microsoft.EntityFrameworkCore, Version=5.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'. The system cannot find the file specified.\r\nCould not load file or assembly 'Microsoft.EntityFrameworkCore, Version=5.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'. The system cannot find the file specified.\r\nCould not load file or assembly 'FluentValidation, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7de548da2fbae0f0'. The system cannot find the file specified.\r\nCould not load file or assembly 'FluentValidation, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7de548da2fbae0f0'. The system cannot find the file specified.\r\nCould not load file or assembly 'FluentValidation, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7de548da2fbae0f0'. The system cannot find the file specified.\r\nCould not load file or assembly 'FluentValidation, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7de548da2fbae0f0'. The system cannot find the file specified.\r\nCould not load file or assembly 'FluentValidation, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7de548da2fbae0f0'. The system cannot find the file specified.\r\nCould not load file or assembly 'FluentValidation, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7de548da2fbae0f0'. The system cannot find the file specified.\r\nCould not load file or assembly 'FluentValidation, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7de548da2fbae0f0'. The system cannot find the file specified.\r\nCould not load file or assembly 'FluentValidation, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7de548da2fbae0f0'. The system cannot find the file specified.\r\nCould not load file or assembly 'FluentValidation, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7de548da2fbae0f0'. The system cannot find the file specified.\r\nCould not load file or assembly 'FluentValidation, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7de548da2fbae0f0'. The system cannot find the file specified.\r\nCould not load file or assembly 'FluentValidation, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7de548da2fbae0f0'. The system cannot find the file specified.\r\nCould not load file or assembly 'FluentValidation, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7de548da2fbae0f0'. The system cannot find the file specified.\r\nCould not load file or assembly 'FluentValidation, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7de548da2fbae0f0'. The system cannot find the file specified.\r\nCould not load file or assembly 'FluentValidation, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7de548da2fbae0f0'. The system cannot find the file specified.\r\nCould not load file or assembly 'FluentValidation, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7de548da2fbae0f0'. The system cannot find the file specified.\r\nCould not load file or assembly 'FluentValidation, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7de548da2fbae0f0'. The system cannot find the file specified.\r\nCould not load file or assembly 'FluentValidation, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7de548da2fbae0f0'. The system cannot find the file specified.\r\nCould not load file or assembly 'FluentValidation, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7de548da2fbae0f0'. The system cannot find the file specified.\r\nCould not load file or assembly 'FluentValidation, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7de548da2fbae0f0'. The system cannot find the file specified.\r\nCould not load file or assembly 'FluentValidation, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7de548da2fbae0f0'. The system cannot find the file specified.\r\nCould not load file or assembly 'AutoMapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=be96cd2c38ef1005'. The system cannot find the \r\nfile specified.\r\nCould not load file or assembly 'AutoMapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=be96cd2c38ef1005'. The system cannot find the \r\nfile specified.\r\nCould not load file or assembly 'AutoMapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=be96cd2c38ef1005'. The system cannot find the \r\nfile specified.\r\nCould not load file or assembly 'AutoMapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=be96cd2c38ef1005'. The system cannot find the \r\nfile specified.\r\nCould not load file or assembly 'AutoMapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=be96cd2c38ef1005'. The system cannot find the \r\nfile specified.\r\nCould not load file or assembly 'AutoMapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=be96cd2c38ef1005'. The system cannot find the \r\nfile specified.\r\nCould not load file or assembly 'AutoMapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=be96cd2c38ef1005'. The system cannot find the \r\nfile specified.\r\nCould not load file or assembly 'AutoMapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=be96cd2c38ef1005'. The system cannot find the \r\nfile specified.\r\nCould not load file or assembly 'AutoMapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=be96cd2c38ef1005'. The system cannot find the \r\nfile specified.\r\nCould not load file or assembly 'Microsoft.EntityFrameworkCore, Version=5.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'. The system cannot find the file specified.\r\n```\r\n\r\n# Environment data\r\n\r\n```none\r\name                           Value\r\n----                           -----\r\nPSVersion                      7.0.0\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-05-02T18:22:49Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Can you try with `Add-Type -Path` rather than `Add-Type -AssemblyName` @markm77 ?",
      "created_at": "2020-05-01T20:54:06Z",
      "updated_at": "2020-05-01T20:54:06Z"
    },
    {
      "author": "markm77",
      "author_association": "NONE",
      "body": "Thanks for the replies but yes I had already tried this with same result.",
      "created_at": "2020-05-01T23:38:43Z",
      "updated_at": "2020-05-01T23:38:43Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@markm77 when you just do `dotnet build`, the dependency assemblies aren't copied.  PowerShell doesn't look at the nuget cache, you need to do a full `dotnet publish` and import from the `$Configuration\\$Framework\\publish` directory.",
      "created_at": "2020-05-02T03:00:50Z",
      "updated_at": "2020-05-02T03:00:50Z"
    },
    {
      "author": "markm77",
      "author_association": "NONE",
      "body": "\r\nEdit: to help anyone else reading this, the other way to get the dependency assemblies is to add ```<CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>``` to the C# project file.\r\n\r\n---------------------------------------\r\n\r\nThanks @SeeminglyScience , great tip! That solved the errors. I believe the types are loaded now but wondering how to get a full list at any time to check? ```Get-TypeData``` seems to ignore types loaded from assemblies..... Also why do you guys recommend ```Add-Type -Path``` over ```Add-Type -AssemblyName``` as I couldn't see any differences?",
      "created_at": "2020-05-02T11:47:47Z",
      "updated_at": "2020-05-10T16:50:49Z"
    },
    {
      "author": "markm77",
      "author_association": "NONE",
      "body": "PS I will close this issue shortly as believe solved.",
      "created_at": "2020-05-02T11:48:18Z",
      "updated_at": "2020-05-02T11:48:18Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Thanks @SeeminglyScience , great tip! That solved the errors. I believe the types are loaded now but wondering how to get a full list at any time to check?\r\n\r\n```powershell\r\n[Runtime.Loader.AssemblyLoadContext]::Default.Assemblies.\r\n    Where{ $_.Location -like \"$publishDirectory*\" }.\r\n    ForEach('GetTypes').\r\n    Where{ $_.IsPublic }\r\n```\r\n\r\nOr\r\n\r\n```powershell\r\nInstall-Module ClassExplorer\r\nFind-Type\r\nGet-Assembly | ? Location -like \"$publishDirectory\" | Find-Type\r\nGet-Assembly OpenBanking* | Find-Type\r\nFind-Type -Namespace *OpenBanking*\r\n```\r\n\r\n> `Get-TypeData` seems to ignore types loaded from assemblies.....\r\n\r\nYeah that's just for PowerShell's extended type system.  You would use that to get information about loaded `.types.ps1xml`'s for instance.\r\n\r\n> Also why do you guys recommend `Add-Type -Path` over `Add-Type -AssemblyName` as I couldn't see any differences?\r\n\r\nAssembly name is meant for things like \r\n\r\n```raw\r\nSystem.Management.Automation, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\r\nSystem.Management.Automation\r\n```\r\n\r\nIt may work if you give it a path, but I wouldn't rely on that.  That *seems* like an accidental implementation detail, I'm not sure if it would be considered part of the change contact.  Either way `Path` is more explicit in intent. ",
      "created_at": "2020-05-02T12:22:43Z",
      "updated_at": "2020-05-02T12:22:43Z"
    },
    {
      "author": "markm77",
      "author_association": "NONE",
      "body": "Thanks again @SeeminglyScience . So I ran the following script to look at loaded types, either from ```Add-Type``` or ```using assembly```:\r\n\r\n```powershell\r\nstart-transcript -path .\\outputFileName.txt\r\n[Runtime.Loader.AssemblyLoadContext]::Default.Assemblies.\r\nWhere{ $_.Location -like \"$publishDir*\" }.\r\nForEach{ $_.GetTypes().\r\n  Where{ $_.IsPublic }\r\n} | Format-Table -Property IsPublic, Name, Namespace\r\nstop-transcript\r\n```\r\n\r\nand what I noticed was quite weird.\r\n\r\nFor ```using assembly``` when running the first time the dependent types were missing, the second time a block of them were added and the third time a much smaller final block was added. I tried waiting a while after issuing ```using assembly``` but no you really do need to run the script 3 times.\r\n\r\nFor ```Add-Type``` when running the first time the first two blocks mentioned above were present, and the second time the final block from above was added.\r\n\r\nSo I shall always run this command 3 times in future (very strange) to see all loaded types.\r\n\r\nI also ran the above command with a C# PS module project after loading the dot-published DLL with ```using module``` and ```using assembly```. There ```using module``` seemed to pull in all dependencies but ```using assembly``` pulled in none, not even those which were used by a ```PSCmdlet```. Since this is my actual use case, a cmdlet with .NET input and output types, seems like I simply need to prefix client PS scripts with ```using module```.\r\n\r\nAny thoughts appreciated even though I'll close this now.\r\n\r\n\r\n",
      "created_at": "2020-05-02T18:22:49Z",
      "updated_at": "2020-05-02T18:22:49Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "When you load an assembly dependencies are typically loaded when they're needed.  Often this is when a method is first jitted.  The only way to ensure that dependency assemblies are loaded *before* the dependent needs them is to import them yourself.\r\n\r\n`using module` will *incidentally* end up loading more because your assembly is crawled by PowerShell looking for cmdlets.  During that, some methods may be jitted, some static constructors may be called, but I wouldn't depend on that.",
      "created_at": "2020-05-02T18:44:41Z",
      "updated_at": "2020-05-02T18:44:41Z"
    },
    {
      "author": "markm77",
      "author_association": "NONE",
      "body": "Thanks @SeeminglyScience , I managed to get the same result from ```using module``` (3 runs) and ```using assembly``` (4 runs) by adding a non-PSCmdlet class with a dependency. So seems ```using assembly``` ignores PSCmdlet dependencies which is no good if these are the only dependencies and we want to expose .NET types related to these....\r\n\r\nI proved this by dot-publishing the PS binary module with only the PSCmdlet class (with a .NET class input coming from a dependency) and then trying to create an input (.NET class) for the cmdlet:\r\n```powershell\r\n[PSCmdletInputType]::new()\r\n```\r\n\r\nThis succeeded with ```using module``` but not ```using assembly``` (error: ```InvalidOperation: Unable to find type [PSCmdletInputType].```\r\n\r\nNot sure if this is a bug or design behaviour.\r\n",
      "created_at": "2020-05-02T20:20:52Z",
      "updated_at": "2020-05-02T20:20:52Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "`using assembly` doesn't do anything at parse time (never implemented, but also quite difficult to solve), which I'm guessing is where you're getting those errors (this for PS classes yeah?).  The only way to guarantee that an assembly will be available is to load it *before* parse time.  Everything else that works incidentally, I wouldn't recommend depending on.",
      "created_at": "2020-05-02T20:26:36Z",
      "updated_at": "2020-05-02T20:26:36Z"
    },
    {
      "author": "markm77",
      "author_association": "NONE",
      "body": "Are you saying it's not safe to do the following with .NET types ```TypeA``` and ```TypeB```?\r\n\r\n```powershell\r\nusing module ./x.dll # where x.dll depends on y.dll which contains TypeA, TypeB\r\n$a = [TypeA]::new()\r\n$b = MyCmdletFromBinaryModuleX $a # $b is of type TypeB\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2020-05-02T21:53:51Z",
      "updated_at": "2020-05-02T21:53:51Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Yeah.  Even if it happens to work, you would be depending on implementation details that are subject to change.",
      "created_at": "2020-05-02T22:15:13Z",
      "updated_at": "2020-05-02T22:15:13Z"
    },
    {
      "author": "markm77",
      "author_association": "NONE",
      "body": "Edit: I now believe below is actually how things should behave rather than being a workaround as it's like in C# needing references to two packages one of which depends on the other....\r\n\r\n-------------------------------------\r\n\r\nI believe you are right as now I have moved from a simple example to more realistic code the dependency assemblies are no longer loaded by ```using module``` and code above fails due to unknown type.\r\n\r\nIs the workaround below safe where we force the relevant dependency to load via ```using assembly```? It works in my testing.\r\n\r\nI don't really know what parse-time means but assume this is the first pass of the code by the interpreter?\r\n\r\n```powershell\r\nusing module ./x.dll # where x.dll depends on y.dll which contains TypeA, TypeB\r\nusing assembly ./y.dll # <-- WORKAROUND\r\n$a = [TypeA]::new()\r\n$b = MyCmdletFromBinaryModuleX $a # $b is of type TypeB\r\n\r\n```\r\n",
      "created_at": "2020-05-02T22:32:58Z",
      "updated_at": "2020-05-10T16:37:20Z"
    },
    {
      "author": "markm77",
      "author_association": "NONE",
      "body": "Sorry @SeeminglyScience for spamming you with so many questions! I believe actually the above code is okay as the parse-time issue relates to creation of PS types: https://github.com/PowerShell/PowerShell/issues/3641.\r\n\r\nEnjoy the rest of your weekend.",
      "created_at": "2020-05-02T23:34:16Z",
      "updated_at": "2020-05-02T23:34:16Z"
    },
    {
      "author": "markm77",
      "author_association": "NONE",
      "body": "In cases anyone is interested, in the end I decided it was user-unfriendly and fiddly to get users to create .NET types so I've created New cmdlets for their convenience. I can also now use the more flexible ```Import-Module``` command instead of ```using```. So the example above becomes\r\n\r\n```\r\nImport-Module ./x.dll # where x.dll depends on y.dll which contains TypeA, TypeB\r\n$a = New-TypeA\r\n$b = MyCmdletFromBinaryModuleX $a # $b is of type TypeB\r\n```\r\n\r\nEverything works so much better!",
      "created_at": "2020-05-10T16:42:06Z",
      "updated_at": "2020-05-10T16:43:52Z"
    }
  ],
  "created_at": "2020-05-01T19:52:52Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 12547,
  "state": "closed",
  "title": "Can't use add-type / \"using assembly\" to get types from local project assembly",
  "updated_at": "2020-05-10T16:50:49Z"
}