{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3744",
  "author": "lzybkr",
  "body": "People often use dynamic parameters so they can dynamically generate a `ValidateSet` attribute.\r\n\r\nWe should provide a simpler way to do this. One option is to accept a scriptblock:\r\n\r\n```powershell\r\nparam(\r\n    [ValidateSet( { Get-ChildItem -ah | ForEach-Object Name } )]\r\n    $HiddenFileName\r\n)\r\n```",
  "closed_at": "2017-07-14T04:28:33Z",
  "comments": [
    {
      "author": "lfshr",
      "author_association": "NONE",
      "body": "This is a much better solution. Well played @lzybkr like it!",
      "created_at": "2017-05-09T17:38:54Z",
      "updated_at": "2017-05-10T08:02:17Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "We should also consider binary cmdlets. One option is to accept a type that implements an interface, something like:\r\n\r\n```c#\r\npublic interface IValidateSetGenerator\r\n{\r\n    IEnumerable<string> Get();\r\n}\r\npublic class MyValidateSetGenerator : IValidateSetGenerator\r\n{\r\n    public IEnumerable<string> Get()\r\n    {\r\n        yield return \"Something\";\r\n    }\r\n}\r\n...\r\n    [Parameter()]\r\n    [ValidateSet(typeof(MyValidateSetGenerator)]\r\n    public string Something { get; set; }\r\n```\r\n\r\nThis could probably work in PowerShell too (the interface would be defined in System.Management.Automation.dll.\r\n\r\nI think we'd need a way of passing `$PSBoundParameters` to truly cover most of the scenarios where people are resorting to dynamic parameters today.",
      "created_at": "2017-05-09T17:49:00Z",
      "updated_at": "2017-05-09T17:49:00Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Recently I played with this and it seems like it might be too expensive  due to IntelliSense.",
      "created_at": "2017-05-09T18:02:27Z",
      "updated_at": "2017-05-09T18:02:27Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@iSazonov What is to expensive?",
      "created_at": "2017-05-09T18:19:19Z",
      "updated_at": "2017-05-09T18:19:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@powercode IntelliSense can call attributes very often. ValidateSet with script block becomes similar to ValidateScript (can run unpredictably long).\r\n\r\n\r\nPerhaps we should do only IValidateSetGenerator (not script block) because we want support interfaces in PowerShell classes.\r\n\r\nAlso could we add IValidateSetGenerator not only in ValidateSet attribute: ValidateScript, ValidatePattern, ... for IntelliSense support?\r\n\r\n\r\n",
      "created_at": "2017-05-10T04:33:11Z",
      "updated_at": "2017-05-10T09:13:01Z"
    },
    {
      "author": "lfshr",
      "author_association": "NONE",
      "body": "@iSazonov I don't think that would be much of a problem. Most people know not to have long-running commands in intellisense code. People are already working around this issue using the less-friendly dynamicparam block and passing a ValidateSetAttribute to the attribute collection.\r\n\r\nI feel the problem with using an interface for this is that a lot of PowerShell coders aren't programmers. It's one thing to support classes, it's another thing to force the user to use them. Just my opinion ofc. The 'PowerShell way' here is to support a ScriptBlock.\r\n\r\n@lzybkr would the following not be easier:\r\n```c#\r\npublic interface IValidateSetGenerator\r\n{\r\n    IEnumerable<string> Get();\r\n}\r\npublic class MyValidateSetGenerator : IValidateSetGenerator\r\n{\r\n    public IEnumerable<string> Get()\r\n    {\r\n        yield return \"Something\";\r\n    }\r\n}\r\n\r\n[Parameter()]\r\n[ValidateSet(MyValidateSetGenerator)]\r\npublic string Something { get; set; }\r\n```\r\n\r\nand just have a ValidateSet overload that takes in an IValidateSetGenerator, rather than using typeof?",
      "created_at": "2017-05-10T08:16:30Z",
      "updated_at": "2017-05-10T08:23:11Z"
    },
    {
      "author": "lfshr",
      "author_association": "NONE",
      "body": "So two new overloads for ValidateSetAttribute:\r\n```c#\r\nValidateSetAttribute(ScriptBlock sb)\r\n```\r\nand\r\n```c#\r\nValidateSetAttribute(IValidateSetGenerator g)\r\n```",
      "created_at": "2017-05-10T08:29:19Z",
      "updated_at": "2017-05-10T08:29:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "IValidateSetGenerator vs IValidateSetEnumerator ?",
      "created_at": "2017-05-10T09:24:31Z",
      "updated_at": "2017-05-10T09:24:31Z"
    },
    {
      "author": "lfshr",
      "author_association": "NONE",
      "body": "@iSazonov maybe even **IDynamicValidateSet**?\r\n\r\nEdit: Upon reflection I prefer **IValidateSetEnumerator**",
      "created_at": "2017-05-10T09:44:57Z",
      "updated_at": "2017-05-10T09:45:50Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It looks like it is from DynamicParams but it is not related directly. Also we have RFC for Dynamic Keywords so we should avoid \"Dynamic\" term to eliminate confusion.\r\n",
      "created_at": "2017-05-10T10:07:09Z",
      "updated_at": "2017-05-10T10:07:09Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@lfshr - C# requires `typeof(MyValidateSetGenerator)` because `MyValidateSetGenerator` is not an expression.\r\n\r\nThe interface name should probably not end in `Enumerator` because the interface does not define an enumerator.",
      "created_at": "2017-05-10T17:17:10Z",
      "updated_at": "2017-05-10T17:17:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Maybe IValidateSetValuesGetter",
      "created_at": "2017-05-10T18:56:09Z",
      "updated_at": "2017-05-10T18:56:09Z"
    },
    {
      "author": "lfshr",
      "author_association": "NONE",
      "body": "@lzybkr Sorry. Idiot moment.",
      "created_at": "2017-05-10T19:01:09Z",
      "updated_at": "2017-05-10T19:01:09Z"
    },
    {
      "author": "lfshr",
      "author_association": "NONE",
      "body": "I agree with @lzybkr, something like `IValidateSetGenerator` is a good shout.",
      "created_at": "2017-05-10T19:02:57Z",
      "updated_at": "2017-05-10T19:02:57Z"
    },
    {
      "author": "oising",
      "author_association": "CONTRIBUTOR",
      "body": "Is this still up for grabs? I'm looking for something small to start with.\r\n\r\nupdate: never mind, I see the PR is in progress :)",
      "created_at": "2017-05-31T19:35:31Z",
      "updated_at": "2017-05-31T19:39:21Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Welcome to code review!",
      "created_at": "2017-06-01T03:07:12Z",
      "updated_at": "2017-06-01T03:07:12Z"
    },
    {
      "author": "lordisp",
      "author_association": "NONE",
      "body": "maybe you can help me out with my challange. I like to set ValidateSet to run my \"example.ps1 -region eu-cental-1\" and get the AWS regions\r\n\r\nEg:\r\n`Param(`\r\n`    [parameter(Mandatory=$true)]`\r\n`    [ValidateSet((Get-AWSRegion).region)]`\r\n`    [String[]]`\r\n`    $region`\r\n`)`\r\n\r\n`process {`\r\n`# do whatever`\r\n`}`\r\n",
      "created_at": "2018-11-03T20:35:01Z",
      "updated_at": "2018-11-03T20:38:35Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I don't see any link to the relevant PR, but it appears to need a script block, so you would write:\n```\n[ValidateSet({ (Get-AwsRegion).Region })]\n```",
      "created_at": "2018-11-03T20:58:02Z",
      "updated_at": "2018-11-03T20:58:02Z"
    },
    {
      "author": "lordisp",
      "author_association": "NONE",
      "body": "you're right; it's not a PR; just a little script to automate my AWS stuff. Maybe I open one once it has some relevant features. \r\n\r\n> [ValidateSet({ (Get-AwsRegion).Region })]\r\n\r\nthis does not make any difference unfortunately",
      "created_at": "2018-11-03T21:22:17Z",
      "updated_at": "2018-11-03T21:22:17Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@lzybkr a PR is mentioned in this thread, but I don't see any links to it. Did this end up getting implemented?",
      "created_at": "2018-11-03T21:37:07Z",
      "updated_at": "2018-11-03T21:37:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "You need to implement `IValidateSetValuesGenerator`. See:\r\nhttps://github.com/iSazonov/PowerShell/blob/65349de2b25022092213d86cfc1f5dfe0c92cbc6/test/powershell/Language/Classes/Scripting.Classes.Attributes.Tests.ps1#L273",
      "created_at": "2018-11-04T09:17:02Z",
      "updated_at": "2018-11-04T09:17:02Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@rafaelc81 see here for the example that was merged into documentation after the PR was merged. \r\n\r\nhttps://github.com/PowerShell/PowerShell-Docs/pull/3133/files?short_path=8b392e6#diff-8b392e69e97629458a3c80ee54386057",
      "created_at": "2018-11-04T13:35:37Z",
      "updated_at": "2018-11-04T13:35:37Z"
    },
    {
      "author": "OlsonDev",
      "author_association": "NONE",
      "body": "The example in the docs looks nothing like the example the OP of this issue wanted. The OP asks for a script block, and the solution provided is a full on syntax-verbose class.\r\n\r\nI can't get an example like the script block to work. Was that implemented or only the syntax-verbose class version?\r\n\r\nIf not, are there any plans to support the significantly more terse syntax? Should another issue be opened?\r\n\r\nThanks!",
      "created_at": "2019-01-14T22:11:55Z",
      "updated_at": "2019-01-14T22:11:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@OlsonDev The issue description is misleading. We only implemented a variant based on `IValidateSetValuesGenerator` interface until we receive more feedback. Feel free open new issue with the description of the necessary feature.",
      "created_at": "2019-01-15T03:52:23Z",
      "updated_at": "2019-01-15T03:52:23Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Indeed. It should be possible to borrow portions of the code from `[ArgumentCompleter()]` for this purpose; it also takes a script block and apparently applies it to the method defined in `IArgumentCompleter`",
      "created_at": "2019-01-15T04:33:41Z",
      "updated_at": "2019-01-15T04:33:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@vexx32 There is samples in attributes.cs file how to use execution context. I assume that the tests will be most of this work and not the code itself. :-)",
      "created_at": "2019-01-15T04:42:30Z",
      "updated_at": "2019-01-15T04:42:30Z"
    },
    {
      "author": "OlsonDev",
      "author_association": "NONE",
      "body": "@iSazonov @vexx32 Thanks, I created [the aforementioned issue here](https://github.com/PowerShell/PowerShell/issues/8651).",
      "created_at": "2019-01-15T15:38:31Z",
      "updated_at": "2019-01-15T15:38:31Z"
    }
  ],
  "created_at": "2017-05-09T17:35:08Z",
  "number": 3744,
  "state": "closed",
  "title": "ValidateSet should support a dynamically generated set",
  "updated_at": "2019-01-15T15:38:32Z"
}