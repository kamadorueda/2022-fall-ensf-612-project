{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15105",
  "author": "rjmholt",
  "body": "## Summary of the new feature/enhancement\r\n\r\nFollows on somewhat from https://github.com/PowerShell/PowerShell/issues/15004.\r\n\r\nBoth the `PowerShell` and `ScriptBlock` APIs have some really useful invocation methods, but there's no one true API to rule them all.\r\n\r\n`ScriptBlock` has:\r\n\r\n- `InvokeWithContext()`, which allows passing in custom function and variable contexts, but it's not straightforward (possible?) to choose which runspace it's run on and it doesn't interact well with a `PowerShell` object\r\n- Cmdlets also have various APIs for taking in `ScriptBlock`-typed variables, but no direct support for `PowerShell`\r\n- However scriptblocks don't have good support for configuration around dot-sourcing, history, or named parameters\r\n\r\nConversely, with `PowerShell`:\r\n\r\n- It's really easy to structurally compose commands, including named parameters\r\n- Invoking `PowerShell` objects safely across threads is easier/possible\r\n- More configuration can be given around things like history and whether to dot-source\r\n- However, there's no way to add custom contextual definitions (and the `Invoke()` overloads do strange things with `input` when it's used the wrong way because it's an `IEnumerable`)\r\n- There's also no good interaction between `PowerShell` and a `ScriptBlock` object. It would be great if it had an `AddScript` overload that took a `ScriptBlock` instead of a string.\r\n\r\nMy primary ask here would be to augment the `PowerShell` API -- it should be the core API through which we do everything and it's a pretty well designed API so far I think. There are just some scenarios today where I'm forced to use `ScriptBlock`, even though `PowerShell` is clearly the intended way to do what I'm doing.\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> * `InvokeWithContext()`, which allows passing in custom function and variable contexts, but it's not straightforward (possible?) to choose which runspace it's run on and it doesn't interact well with a `PowerShell` object\r\n\r\nI think part of what makes it feasible for one and not the other is that these API's represent fundamentally different things. `PowerShell` is more or less just a friendly wrapper around `PipelineProcessor` and `CommandProcessor` where the `ScriptBlock` API represents a single anonymous command.\r\n\r\nFor example, if you were able to include context, where would it be defined? With `InvokeWithContext` you create a new scope, dump the state, and then it's automatically cleaned up when no longer in scope.  With `PowerShell`, would you define it in whatever the current scope is? Or would you attach it to `Add(Script|Command)`?\r\n\r\nFrom an implementation standpoint, the code path would probably need to change drastically.  Right now it's pretty close to a normal invocation, but afaik it would not have a way to pass state to the underlying `CommandProcessor`.  It may need to take a similar route that the `ScriptBlock.InvokeWithPipeImpl` API does which has a lot of performance issues and limitations.\r\n\r\n---\r\n\r\nPart of me wishes there was some ability to control scopes.  Something like this:\r\n\r\n```csharp\r\nusing var pwsh = PowerShell.Create(RunspaceMode.CurrentRunspace);\r\npwsh.PushScope()\r\n    .AddFunction(name, body)\r\n    .AddVariable(name, value)\r\n    .AddCommand(\"Invoke-MyThing\")\r\n    .PopScope();\r\n```\r\n\r\nI've wanted that for a while (probably a different design) but I'm unsure if it's worth it.\r\n\r\n- Scopes have mainly been an almost completely private implementation detail, with the exception of a few \"do or don't make a scope\" parameters\r\n- Modules greatly complicate that.  You'd potentially need to add a `PSModuleInfo` or `SessionState` parameter to `(Push|Pop)Scope`",
      "created_at": "2021-03-26T16:17:08Z",
      "updated_at": "2021-03-26T16:17:08Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Yeah you have a very good point around what does context mean here.\r\n\r\nI'd love to do something like take a scriptblock and a `PowerShell` instance and execute that scriptblock in that `PowerShell` context with some added private context of my own.",
      "created_at": "2021-03-26T21:22:19Z",
      "updated_at": "2021-03-26T21:22:19Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "I think it would be helpful with concrete examples to aid the discussion.",
      "created_at": "2021-03-30T13:30:42Z",
      "updated_at": "2021-03-30T13:30:42Z"
    }
  ],
  "created_at": "2021-03-25T23:56:48Z",
  "number": 15105,
  "state": "open",
  "title": "Parity between PowerShell.Invoke() and ScriptBlock.Invoke() APIs",
  "updated_at": "2022-05-16T16:34:29Z"
}