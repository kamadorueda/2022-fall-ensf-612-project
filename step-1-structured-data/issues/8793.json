{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8793",
  "author": "thorstenkampe",
  "body": "# Steps to reproduce\r\n\r\nSuggestions shown although command runs fine. This seems to occur only on Linux - not Windows or macOS.\r\n\r\n```powershell\r\npwsh --version\r\nPowerShell 6.2.0-preview.4\r\n\r\nSuggestion [4,General]: The most similar commands are: popd, sp, spps, ps, pip2, pip3, pip, pppd, apg, ps2ps.\r\n```\r\n\r\n# Expected behavior\r\n\r\n```powershell\r\npwsh --version\r\nPowerShell 6.2.0-preview.4\r\n```\r\n\r\n# Actual behavior\r\n\r\n```powershell\r\npwsh --version\r\nPowerShell 6.2.0-preview.4\r\n\r\nSuggestion [4,General]: The most similar commands are: popd, sp, spps, ps, pip2, pip3, pip, pppd, apg, ps2ps.\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.2.0-preview.4\r\nPSEdition                      Core\r\nGitCommitId                    6.2.0-preview.4\r\nOS                             Linux 4.18.0-13-generic #14-Ubuntu SMP Wed Dec 5 09:04:24 UTC 2018\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Perhaps this happens for all native commands.",
      "created_at": "2019-01-30T15:02:13Z",
      "updated_at": "2019-01-30T15:02:13Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@thorstenkampe: Does it indeed happen for all external programs in `$env:PATH`, as @iSazonov  suggests?\r\n\r\nI can't reproduce the problem on Ubuntu 18.04. What specific version are you on?",
      "created_at": "2019-01-30T20:02:49Z",
      "updated_at": "2019-01-30T20:02:56Z"
    },
    {
      "author": "thorstenkampe",
      "author_association": "NONE",
      "body": "I'm on Ubuntu 18.10. It actually does happen for all commands.",
      "created_at": "2019-01-30T22:29:15Z",
      "updated_at": "2019-01-30T22:29:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT Please look this feedback.",
      "created_at": "2019-01-31T05:49:04Z",
      "updated_at": "2019-01-31T05:49:04Z"
    },
    {
      "author": "thorstenkampe",
      "author_association": "NONE",
      "body": "I figured it out. It's caused by the following entry in my profile:\r\n```powershell\r\nGet-Command -Name pspg -CommandType Application -ErrorAction SilentlyContinue\r\n```\r\nOn my Linux machine the command `pspg`  is not available. The suggestions (popd, sp, spps, ps, pip2, pip3, pip, pppd, apg, ps2ps) actually do refer to `pspg` - not the command I entered manually.",
      "created_at": "2019-01-31T07:03:32Z",
      "updated_at": "2019-01-31T07:03:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Can we close the issue?",
      "created_at": "2019-01-31T07:06:14Z",
      "updated_at": "2019-01-31T07:06:14Z"
    },
    {
      "author": "thorstenkampe",
      "author_association": "NONE",
      "body": "This is obviously a bug. Suggestions are only meaningful in relation to manually entered commands - not commands in a script or profile file.\r\n\r\nIn my case I enter any command and in response I get a suggestion even though the command was successful. And the suggestion does not even relate to the command I entered.",
      "created_at": "2019-01-31T07:12:12Z",
      "updated_at": "2019-01-31T07:12:12Z"
    },
    {
      "author": "thorstenkampe",
      "author_association": "NONE",
      "body": "A general comment: the issue seems to be a misunderstanding of what suggestions are for. Suggestions should be a response to \"user entered a command but I, PowerShell cannot find that command. Did the user misspell that command?\" - not \"user entered a valid command but that command generated an error\".",
      "created_at": "2019-01-31T07:26:32Z",
      "updated_at": "2019-01-31T07:26:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@thorstenkampe Thanks for your great feedback!",
      "created_at": "2019-01-31T07:28:52Z",
      "updated_at": "2019-01-31T07:28:52Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@thorstenkampe: \r\n\r\nLet me try to summarize the bugs / undesired behavior:\r\n\r\n* Suggestions are triggered not only in an _interactive_ session, but unexpectedly also from _scripts_.\r\n\r\n* Use of `Get-Command` with a nonexistent command unexpectedly triggers suggestions too; arguably, only _direct invocation_ should do that (yes: `nosuch`; no: `Get-Command nosuch`).\r\n  * Additionally, the suggestion appears even with `-ErrorAction SilentlyContinue`, because the suggestion mechanism is apparently based on errors recorded in `$Error`; therefore, only `-ErrorAction Ignore`, which suppressed adding to `$Error`, is currently effective in silencing the suggestion.\r\n\r\n* A specific bug occurs when a failed lookup occurs anywhere in `$PROFILE` _and_ no unrelated errors are added to `$Error` _after that_ during the execution `$PROFILE`: in an _interactive session_, display of the suggestion is then _delayed until after `$PROFILE` has finished loading_, and is only printed whenever the _next command is executed_, whatever it is, and whether it is an external program or not (e.g., `Get-Date` would trigger it too).\r\n\r\n\r\n\r\n",
      "created_at": "2019-01-31T15:46:06Z",
      "updated_at": "2019-01-31T15:46:06Z"
    },
    {
      "author": "thorstenkampe",
      "author_association": "NONE",
      "body": "Perfect summary, well done.",
      "created_at": "2019-01-31T16:02:47Z",
      "updated_at": "2019-01-31T16:02:47Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 is correct that the current \"suggestions framework\" (which existed before my fuzzy matching suggestion feature) has a trigger based on an ErrorRecord being produced.  So in that sense, this is \"by-design\".  `-ErrorAction Ignore` is the correct way to suppress this.  Currently, the console host only knows if the session is interactive or not based on a command line switch and doesn't differentiate execution of `$profile` from when the user can start typing.  Since profile execution and suggestions are both in the console host, it seems that it should be easy to pass some data to suppress suggestions while profile is executing.  I'll take a look.",
      "created_at": "2019-01-31T18:18:38Z",
      "updated_at": "2019-01-31T18:18:38Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@thorstenkampe I'm actually not able to get this to repro.  I have this in my `$profile`:\r\n\r\n```powershell\r\ngcm fsdf -erroraction silentlycontinue\r\n```\r\n\r\nI start pwsh-preview --version:\r\n\r\n```output\r\nPowerShell 6.2.0-preview.4\r\n```\r\n\r\nIf I execute that script directly `. $profile`, I do get the suggestion shown.",
      "created_at": "2019-01-31T18:56:28Z",
      "updated_at": "2019-01-31T18:56:28Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "@SteveL-MSFT is the behaviour the same if you first open `pwsh-preview` and then at the prompt enter `pwsh-preview --version`?",
      "created_at": "2019-01-31T20:49:14Z",
      "updated_at": "2019-01-31T20:49:31Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@vexx32 I don't see the suggestion output that way either.  Does it repro for you?",
      "created_at": "2019-01-31T21:00:08Z",
      "updated_at": "2019-01-31T21:00:08Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Not on Windows, at least. I was just curious. :) ",
      "created_at": "2019-01-31T21:05:09Z",
      "updated_at": "2019-01-31T21:05:22Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Here's how you can reproduce the bug reliably on all platforms:\r\n\r\n* Add the following, intentionally nonexistent command _at the end_ of your `$PROFILE`: `nosuch`\r\n\r\n* Start a new interactive session - you'll see NO suggestion at that point (though you'll see the error).\r\n\r\n* Run _any_ command (e.g., `whoami`), at which the `nosuch`-related suggestion finally appears.\r\n",
      "created_at": "2019-01-31T21:12:23Z",
      "updated_at": "2019-01-31T21:12:23Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 thanks, that does repro it!",
      "created_at": "2019-01-31T21:19:56Z",
      "updated_at": "2019-01-31T21:19:56Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Looking at the code, this isn't so straight forward to fix and isn't just profile.  Simple repro:\r\n\r\n```powershell\r\n\"gcm asldfj -erroraction silentlycontinue\" > test.ps1\r\n./test.ps1\r\n```\r\n\r\nI would not expect the suggestion to be there, but the way the code currently works is that the console checks if the last command had any output and if so, it calls to evaluate suggestions.  Suggestions first checks of `$?` is `$false` otherwise no suggestion.  If something failed, it goes through the suggestion filters where one of them looks at the last ErrorRecord which is what the fuzzy match command uses.  Ideally, script invocation shouldn't show suggestions, but the console host doesn't know anything about what it is executing and just sends it to PowerShell to run.",
      "created_at": "2019-01-31T21:32:36Z",
      "updated_at": "2019-01-31T21:32:36Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "After discussing with @JamesWTruher and @PaulHigin it seems the best approach currently is to put the fuzzy suggestion behind an experimental flag because the proper fix is too complicated:\r\n\r\n1. Currently, suggestions are initiated by the host (consolehost in this case) and should be part of the ErrorRecord so that it works correctly remotely and in other hosts\r\n2. ErrorRecord has a member called RecommendedAction that should contain the suggestion\r\n3. The code to invoke getting suggestions needs to be moved out of consolehost and closer to where the ErrorRecord is created\r\n4. Formatter for ErrorRecord needs to be updated to show the RecommendedAction member\r\n5. Suggestions should be in its own stream or Information stream rather than written directly to the host\r\n",
      "created_at": "2019-01-31T22:05:16Z",
      "updated_at": "2019-01-31T22:51:58Z"
    }
  ],
  "created_at": "2019-01-30T07:36:04Z",
  "number": 8793,
  "state": "open",
  "title": "Suggestions shown without error",
  "updated_at": "2020-12-07T19:48:28Z"
}