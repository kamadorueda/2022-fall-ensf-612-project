{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13161",
  "author": "mklement0",
  "body": "## Summary of the enhancement\r\n\r\nThe most convenient way to represent `enum` values and their combinations in PowerShell is to use _strings_ rather than verbose explicit reference via the `enum` type.\r\nE.g., in a context where a `[System.IO.FileAttributes]` value is expected one can write simply `'Compressed, Directory'` instead of `[System.IO.FileAttributes]::Compressed -bor [System.IO.FileAttributes]::Directory`\r\n\r\nHowever, when a `[string]` instance is passed to a .NET method and there is (a) no exact match and (b) more than one overload candidate, an `enum`-based overload among the candidates is seemingly _never_ chosen (it is only chosen if it is the _only_ candidate).\r\n\r\nGiven how common it is to represent enum values as strings, I suggest we consider `enum` overloads _first_ - at least when competing against _numeric_ types:\r\n\r\n```powershell\r\n(Add-Type -PassThru @'\r\n  public class Foo {\r\n    public static string Bar (string p1, System.PlatformID p2) { return p2.GetType().FullName; }\r\n    public static string Bar (string p1, int p2)               { return p2.GetType().FullName; }\r\n  }\r\n'@)::Bar('dummy', 'Unix')  # call with string representation of [System.PlatformID]::Unix\r\n```\r\n\r\nCurrently, the `System.PlatformID` overload is ignored, the `int`-based one is chosen instead, and the invocation therefore fails:\r\n\r\n```none\r\nCannot convert argument \"p2\", with value: \"Unix\", for \"Bar\" to type \"System.Int32\"\r\n```\r\n\r\nWith the proposed change implemented, the `enum`-based overload would be chosen, and the call would return `'System.PlatformId'`.\r\n\r\n(Generally it seems that if the competing overload's parameter is a _numeric_ type, it takes precedence; other types, by contrast, such as `System.DateTime`, result in an _error_: `Multiple ambiguous overloads found for \"Bar\" and the argument count: \"2\"`; however other non-numeric types such as `System.Text.RegularExpressions.Regex` again take precedence.)\r\n\r\nNote: A problematic real-life example: the following call currently fails (without an explicit cast to `[StringSplitOptions]`):\r\n`'f|o||o'.Split('|', 'RemoveEmptyEntries')`\r\n\r\n**Backward-compatibility impact:**\r\n\r\nHypothetically, there could be existing code that calls methods that have _numeric_  parameters _with string arguments_ - but that strikes me as unlikely (a [Bucket 3: Unlikely Grey Area](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md#bucket-3-unlikely-grey-area) change).\r\n\r\n\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2020-07-12T21:09:29Z",
  "number": 13161,
  "state": "open",
  "title": "During method overload resolution, give precedence to enum overloads when given string arguments",
  "updated_at": "2020-07-13T10:41:15Z"
}