{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13319",
  "author": "samuelzamvil",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\n## Steps to reproduce\r\n\r\nInput:\r\n```powershell\r\necho -n \"test\" | shasum -a 512\r\n```\r\n\r\nOutput:\r\n```\r\n0e3e75234abc68f4378a86b3f4b32a198ba301845b0cd6e50106e874345700cc6663a86c1ea125dc5e92be17c98f9a0f85ca9d5f595db2012f7cc3571945c123  -\r\n```\r\n\r\nInput:\r\n```powershell\r\n\"test\" | shasum -a 512\r\n```\r\nOutput: \r\n```\r\n0e3e75234abc68f4378a86b3f4b32a198ba301845b0cd6e50106e874345700cc6663a86c1ea125dc5e92be17c98f9a0f85ca9d5f595db2012f7cc3571945c123  -\r\n```\r\n\r\nInput:\r\n```powershell\r\necho -n 'test' | openssl dgst -sha512\r\n```\r\nOutput:\r\n```\r\n0e3e75234abc68f4378a86b3f4b32a198ba301845b0cd6e50106e874345700cc6663a86c1ea125dc5e92be17c98f9a0f85ca9d5f595db2012f7cc3571945c123\r\n```\r\n\r\nInput:\r\n```powershell\r\necho -n 'test' | md5\r\n```\r\n\r\nOutput:\r\n```\r\nd8e8fca2dc0f896fd7cb4cb0031ba249\r\n```\r\n\r\n## Expected behavior\r\n\r\nWhen using zsh or bash I receive the correct output\r\nInput: \"test\" | shasum -a 512\r\nOutput: ee26b0dd4af7e749aa1a8ee3c10ae9923f618980772e473f8819a5d4940e0db27ac185f8a0e1d5f84f88bc887fd67b143732c304cc5fa9ad8e6f57f50028a8ff\r\n\r\nInput: echo -n 'test' | md5\r\nOutput: 098f6bcd4621d373cade4e832627b4f6\r\n\r\n\r\n\r\n## Actual behavior\r\n\r\nAttempting to use built in binaries for calculating the hashes of a string fails on Mac OS. I'm not sure if I am doing something wrong or if there's a way to strip the object metadata(not sure if this is the right terminology) from the string and pass it to a linux binary.\r\n\r\nUsing: md5 -s 'test' does work correctly so I assume the issue only occurs when the string is passed through the pipeline.\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.3\r\nPSEdition                      Core\r\nGitCommitId                    7.0.3\r\nOS                             Darwin 18.7.0 Darwin Kernel Version 18.7.0: Thu Jun 18 20:50:10 PDT 2020; root:xnu-4903.278.43~1/RELEASE_X86_64\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n",
  "closed_at": "2020-07-31T00:34:03Z",
  "comments": [
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "The results of these hash operations are going to depend heavily on encoding -- a string in either bash or PowerShell will have an implicit encoding and the \"correct\" behaviour depends on what you assume that encoding to be",
      "created_at": "2020-07-30T20:27:57Z",
      "updated_at": "2020-07-30T20:27:57Z"
    },
    {
      "author": "samuelzamvil",
      "author_association": "NONE",
      "body": "> The results of these hash operations are going to depend heavily on encoding -- a string in either bash or PowerShell will have an implicit encoding and the \"correct\" behaviour depends on what you assume that encoding to be\r\n\r\nThank you for the response, it being an encoding issue makes a ton of sense. However, after a bit more research it turned out to be powershell appending a new line to the piped string. I confirmed that the sha/md5 sums that I was computing were matched what powershell computed if I omitted the `-n` in echo when using a different shell.\r\n\r\nMy google-fu failed until I added encoding to my search and it looks like the exact same issue was discussed here.\r\nhttps://stackoverflow.com/questions/48371447/piping-text-to-an-external-program-appends-a-trailing-newline\r\n\r\nAlso there is an open issue here.\r\nhttps://github.com/PowerShell/PowerShell/issues/1908\r\n\n\n<blockquote><div><strong><a href=\"https://stackoverflow.com/questions/48371447/piping-text-to-an-external-program-appends-a-trailing-newline\">We are Offline</a></strong></div></blockquote>",
      "created_at": "2020-07-31T00:34:03Z",
      "updated_at": "2020-07-31T00:34:06Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> However, after a bit more research it turned out to be powershell appending a new line to the piped string\r\n\r\nAh! Yeah that also makes a lot of sense. @mklement0 has done good work describing issues like this.",
      "created_at": "2020-07-31T00:55:22Z",
      "updated_at": "2020-07-31T00:55:22Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Duplicate of https://github.com/PowerShell/PowerShell/issues/5974",
      "created_at": "2020-07-31T00:55:56Z",
      "updated_at": "2020-07-31T00:55:56Z"
    }
  ],
  "created_at": "2020-07-30T19:20:49Z",
  "number": 13319,
  "state": "closed",
  "title": "My bug report",
  "updated_at": "2020-07-31T00:55:56Z"
}