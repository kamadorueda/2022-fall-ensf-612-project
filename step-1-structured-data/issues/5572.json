{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5572",
  "author": "Bhaal22",
  "body": "I mention PowerShell.SDK, but it is maybe related to System.Management.Automation dependencies.\r\nLet's see how to reproduce.\r\n\r\nSteps to reproduce\r\n------------------\r\n * create a new dotnetcore 2.0 project\r\n * install PowerShell.SDK nuget package\r\n\r\n```\r\ndotnet add package Microsoft.PowerShell.SDK --version 6.0.0-rc --source https://powershell.myget.org/F/powershell-core/api/v3/index.json \r\n```\r\n\r\n```Program.cs\r\nusing System;\r\nusing System.Management.Automation.Runspaces;\r\n\r\nnamespace test_powershell\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var runspace = RunspaceFactory.CreateRunspace();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis code throws an exception of type: *System.Management.Automation.Runspaces.PSSnapInException*\r\n\r\n```\r\nCannot load PowerShell snap-in Microsoft.PowerShell.Diagnostics because of the following error: Could not load file or assembly 'E:\\dev\\perso\\git\\test_powershell\\Microsoft.PowerShell.Commands'. The system cannot find the file specified.\r\n   at System.Management.Automation.Runspaces.InitialSessionState.CreateDefault()\r\n   at System.Management.Automation.Runspaces.RunspaceFactory.CreateRunspace(PSHost host)\r\n   at System.Management.Automation.Runspaces.RunspaceFactory.CreateRunspace()\r\n   at test_powershell.Program.Main(String[] args) in E:\\dev\\perso\\git\\test_powershell\\Program.cs:line 10}\tSystem.Management.Automation.Runspaces.PSSnapInException\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nShould not throw any exception.\r\n\r\nHow-to fix it\r\n---------------\r\n\r\nInstall manually 2 another packages:\r\n * Microsoft.PowerShell.Commands.Diagnostics\r\n * Microsoft.WSMan.Management\r\n\r\nRegarding the nuspec definition in Microsoft.PowerShell.SDK, those 2 packages are not listed as a dependency. Neither in System.Management.Automation.\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd\">\r\n  <metadata>\r\n    <id>Microsoft.PowerShell.SDK</id>\r\n    <version>6.0.0-rc</version>\r\n    <authors>Microsoft.PowerShell.SDK</authors>\r\n    <owners>Microsoft.PowerShell.SDK</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <description>PowerShell SDK metapackage</description>\r\n    <copyright>(c) Microsoft Corporation. All rights reserved.</copyright>\r\n    <dependencies>\r\n      <group targetFramework=\".NETCoreApp2.0\">\r\n        <dependency id=\"Microsoft.PowerShell.Commands.Management\" version=\"6.0.0-rc\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"Microsoft.PowerShell.Commands.Utility\" version=\"6.0.0-rc\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"Microsoft.PowerShell.ConsoleHost\" version=\"6.0.0-rc\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"Microsoft.PowerShell.Security\" version=\"6.0.0-rc\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"System.Management.Automation\" version=\"6.0.0-rc\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"System.Data.SqlClient\" version=\"4.4.0\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"System.IO.Packaging\" version=\"4.4.0\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"System.Net.Http.WinHttpHandler\" version=\"4.4.0\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"System.ServiceModel.Duplex\" version=\"4.4.0\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"System.ServiceModel.Http\" version=\"4.4.0\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"System.ServiceModel.NetTcp\" version=\"4.4.0\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"System.ServiceModel.Primitives\" version=\"4.4.0\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"System.ServiceModel.Security\" version=\"4.4.0\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"System.Text.Encodings.Web\" version=\"4.4.0\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"System.Threading.AccessControl\" version=\"4.4.0\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"System.Private.ServiceModel\" version=\"4.4.0\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"Microsoft.NETCore.Windows.ApiSets\" version=\"1.0.1\" exclude=\"Build,Analyzers\" />\r\n      </group>\r\n    </dependencies>\r\n  </metadata>\r\n</package>\r\n```\r\n\r\nMaybe those 2 packages should be listed as dependencies of system.Management.Automation\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd\">\r\n  <metadata>\r\n    <id>System.Management.Automation</id>\r\n    <version>6.0.0-rc</version>\r\n    <authors>System.Management.Automation</authors>\r\n    <owners>System.Management.Automation</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <description>PowerShell Core's System.Management.Automation project</description>\r\n    <copyright>(c) Microsoft Corporation. All rights reserved.</copyright>\r\n    <dependencies>\r\n      <group targetFramework=\".NETCoreApp2.0\">\r\n        <dependency id=\"Microsoft.PowerShell.CoreCLR.Eventing\" version=\"6.0.0-rc\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"Microsoft.Win32.Registry.AccessControl\" version=\"4.4.0\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"Newtonsoft.Json\" version=\"10.0.3\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"System.IO.FileSystem.AccessControl\" version=\"4.4.0\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"System.Security.AccessControl\" version=\"4.4.0\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"System.Security.Cryptography.Pkcs\" version=\"4.4.0\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"System.Security.Permissions\" version=\"4.4.0\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"System.Text.Encoding.CodePages\" version=\"4.4.0\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"Microsoft.Management.Infrastructure\" version=\"1.0.0-alpha07\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"PowerShell.Core.Instrumentation\" version=\"6.0.0-beta.10\" exclude=\"Build,Analyzers\" />\r\n      </group>\r\n    </dependencies>\r\n  </metadata>\r\n</package>\r\n```\r\n",
  "closed_at": "2018-08-21T23:17:20Z",
  "comments": [
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Have you tried using the PowerShellStandard.Library?  I think that's the preferred package to use for compat with .NET Core 2.0.  \r\n\r\nSee these instructions https://github.com/PowerShell/PowerShell/blob/master/docs/cmdlet-example/command-line-simple-example.md",
      "created_at": "2017-11-29T03:20:22Z",
      "updated_at": "2017-11-29T03:20:22Z"
    },
    {
      "author": "Bhaal22",
      "author_association": "CONTRIBUTOR",
      "body": "@rkeithhill yeah but the point is to hav c# applications hosting powershell runtime. \r\nIn my current company we have a library running PS in .net processes. And the point is to migrate to the .netCore version",
      "created_at": "2017-11-29T08:50:17Z",
      "updated_at": "2017-11-29T08:50:17Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "PowerShellStandard.Library is specifically for libraries (like netstandard2.0 is).  Although I've not tried the hosting scenario with PSL, I'd be surprised if the hosting APIs were missing.  A library compiled in such a manner should then load into C# apps that target netcore2.0 as well as net461 and higher.",
      "created_at": "2017-11-29T16:29:01Z",
      "updated_at": "2017-11-29T16:36:57Z"
    },
    {
      "author": "mkArtak",
      "author_association": "NONE",
      "body": "Hi. I'm having a similar problem. When I try to call the Invoke method on an instance of PowerShell class, the following exception is thrown:\r\n\r\n```\r\nSystem.Management.Automation.Runspaces.PSSnapInException: 'Cannot load PowerShell snap-in Microsoft.PowerShell.Host because of the following error: Could not load file or assembly 'D:\\Projects\\PwshNetCore\\bin\\Debug\\netcoreapp2.0\\Microsoft.PowerShell'. The system cannot find the file specified.'\r\n```\r\n\r\nI assume I have all the necessary dependencies referenced. Here what my project file looks like:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n    <OutputType>Exe</OutputType>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n  <!--Source for packages: https://powershell.myget.org/gallery/powershell-core-->\r\n    <PackageReference Include=\"Microsoft.PowerShell.Commands.Diagnostics\" Version=\"6.0.0\" />\r\n    <PackageReference Include=\"Microsoft.PowerShell.Commands.Management\" Version=\"6.0.0\" />\r\n    <PackageReference Include=\"Microsoft.PowerShell.Commands.Utility\" Version=\"6.0.0\" />\r\n    <PackageReference Include=\"microsoft.wsman.management\" Version=\"6.0.0\" />\r\n    <PackageReference Include=\"System.Management.Automation\" Version=\"6.0.0\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\nAnd the code I have is pretty simple:\r\n\r\n```\r\nPowerShell ps = PowerShell.Create().AddCommand(\"Get-Date\");\r\nps.Invoke();\r\n```\r\n\r\nHere is the full exception stack trace:\r\n\r\n```\r\n   at System.Management.Automation.Runspaces.InitialSessionState.CreateDefault()\r\n   at System.Management.Automation.Runspaces.RunspaceFactory.CreateRunspace(PSHost host)\r\n   at System.Management.Automation.Runspaces.RunspaceFactory.CreateRunspace()\r\n   at System.Management.Automation.PowerShell.Worker.CreateRunspaceIfNeededAndDoWork(Runspace rsToUse, Boolean isSync)\r\n   at System.Management.Automation.PowerShell.CoreInvokeHelper[TInput,TOutput](PSDataCollection`1 input, PSDataCollection`1 output, PSInvocationSettings settings)\r\n   at System.Management.Automation.PowerShell.CoreInvoke[TInput,TOutput](PSDataCollection`1 input, PSDataCollection`1 output, PSInvocationSettings settings)\r\n   at System.Management.Automation.PowerShell.CoreInvoke[TOutput](IEnumerable input, PSDataCollection`1 output, PSInvocationSettings settings)\r\n   at System.Management.Automation.PowerShell.Invoke(IEnumerable input, PSInvocationSettings settings)\r\n   at System.Management.Automation.PowerShell.Invoke()\r\n   at PwshNetCore.Program.Main(String[] args) in D:\\Projects\\PwshNetCore\\Program.cs:line 10\r\n```\r\n\r\nIs there a workaround available? Thanks!",
      "created_at": "2018-01-14T01:39:20Z",
      "updated_at": "2018-01-14T01:39:20Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "@rkeithhill even after compiling against PS Standard, the application picking up the APIs still needs a real, runtime assembly to invoke. If you're on Windows, you can pick up a FullCLR System.Management.Automation out of the GAC, but if you specifically want PowerShell Core 6.0 (which you'll have to do if you're on non-Windows), you have to deliver it with your application. \r\n\r\n@adityapatwardhan is this the bug you fixed in the SDK last week? ",
      "created_at": "2018-02-20T23:10:15Z",
      "updated_at": "2018-02-20T23:10:15Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "#6167 should address this issue.",
      "created_at": "2018-02-21T21:20:23Z",
      "updated_at": "2018-02-21T21:20:23Z"
    },
    {
      "author": "Halkcyon",
      "author_association": "NONE",
      "body": "@adityapatwardhan Has this been addressed?  Still experiencing this on 6.0.3.",
      "created_at": "2018-08-07T23:49:02Z",
      "updated_at": "2018-08-07T23:49:02Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@TheIncorrigible1 We had a regression on v6.0.3. We are soon releasing a new package with fixes. \r\n\r\nIn the meantime, can you try v6.0.2?",
      "created_at": "2018-08-07T23:52:15Z",
      "updated_at": "2018-08-07T23:52:15Z"
    },
    {
      "author": "Bhaal22",
      "author_association": "CONTRIBUTOR",
      "body": "I just tested with 6.0.4 look to be fixed indeed.",
      "created_at": "2018-08-21T22:42:20Z",
      "updated_at": "2018-08-21T22:42:20Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@Bhaal22 Thanks for confirming.",
      "created_at": "2018-08-21T23:17:20Z",
      "updated_at": "2018-08-21T23:17:20Z"
    }
  ],
  "created_at": "2017-11-29T00:50:37Z",
  "labels": [
    "Issue-Discussion",
    "Resolution-Answered"
  ],
  "number": 5572,
  "state": "closed",
  "title": "Powershell.SDK nuget dependencies not complete",
  "updated_at": "2018-09-05T07:51:12Z"
}