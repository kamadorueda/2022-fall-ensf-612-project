{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8708",
  "author": "BladeFireLight",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\nGet-ChildItem -Path $vardoesnotexist\r\nGet-ChildItem -Path $null\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nGet-ChildItem : Cannot bind argument to parameter 'Path' because it is null.\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nGet-ChildItem is ran against the current working directory\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.2\r\nPSEdition                      Core\r\nGitCommitId                    6.1.2\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nThis can cause expected results on a script based on whatever CWD happens to be at the time. \r\nThe problem also exists in 5.1",
  "closed_at": "2019-02-02T16:26:24Z",
  "comments": [
    {
      "author": "kvprasoon",
      "author_association": "CONTRIBUTOR",
      "body": "Never used V1. AFAIK, This is the same form v2.0 onwards.",
      "created_at": "2019-01-22T03:16:31Z",
      "updated_at": "2019-01-22T03:16:31Z"
    },
    {
      "author": "BrucePay",
      "author_association": "COLLABORATOR",
      "body": "@BladeFireLight The default parameter `-Path` is not a mandatory parameter so there isn't an automatic  check for null or empty path strings. (Note: if you use `-LiteralPath`, you will see the error you're expecting.) In fact there is explicit code in `ProcessRecord` for the cmdlet that sets the path list to examine to be an array containing a single empty string if the path is null. Keep in mind that that PowerShell is a _shell_ and so tries to do something useful if it can which in this case is to return the current directory.  Finally the PowerShell behaviour is the same as `bash` or `cmd.exe` WRT empty strings - it displays the current directory (though for a different reason.)",
      "created_at": "2019-01-22T19:02:16Z",
      "updated_at": "2019-01-22T19:02:16Z"
    },
    {
      "author": "PramodKumarYadav",
      "author_association": "NONE",
      "body": "One of the side effects of this bug/feature could be to accidentally delete your system when you are using the output of this command piped to say a $_.Delete().\r\n\r\nThat is exactly what happened when I refactored my code to delete previous test runs; so \r\nFrom :\r\nGet-ChildItem -Path C:\\SourceCodeTLM\\testRunResults-Include * -File -Recurse | foreach { $_.Delete() } \r\nTo:\r\n$testRunResults= \"C:\\SourceCodeTLM\\testRunResults\"\r\nGet-ChildItem -Path $testRunResults-Include * -File -Recurse | foreach { $_.Delete() } \r\nand forgot to initialize the variable while doing a debug. \r\nIn the worst case, I expected an error but instead, the cmd ran and started deleting my current dir content (Which by default was PS C:\\windows\\system32>).  \r\nBefore I could understand what happened and pressed ctrl+c; enough files were deleted to corrupt my system. I had to restore and all of my stuff on my machine was lost. I learned this lesson the hard way but maybe others don't have to :). May be giving an error (when null) or keeping this parameter (mandatory) would be better from a risk standpoint :). ",
      "created_at": "2019-08-12T14:41:22Z",
      "updated_at": "2019-08-12T15:04:09Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "The parameter doesn't need to be mandatory to prevent null input.\r\n\r\nWe can tag it with `[ValidateNotNullOrEmpty()]` and PS should still allow no input to be provided. However, if a value is provided that is $null, an error will be thrown.\r\n\r\nAlso, if you used `Remove-Item` rather than the .NET method `$_.Delete` you would be given warnings pretty quickly as it started trying to remove _folders_ which by default it will refuse to do without confirmation or the `-Recurse` switch on Remove-Item itself, so you might have had another chance to catch that one at that point.",
      "created_at": "2019-08-12T20:44:21Z",
      "updated_at": "2019-08-12T20:46:00Z"
    }
  ],
  "created_at": "2019-01-21T19:25:19Z",
  "number": 8708,
  "state": "closed",
  "title": "Get-ChildItem -Path $null does not throw an error",
  "updated_at": "2019-08-12T20:46:00Z"
}