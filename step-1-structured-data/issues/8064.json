{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8064",
  "author": "iSazonov",
  "body": "We need review using StringComparison.CurrentCulture in all code base.\r\n\r\n[Best Practices for Using Strings in .NET](https://docs.microsoft.com/en-us/dotnet/standard/base-types/best-practices-strings)\r\n\r\nFor stable behavior InvariantCulture looks right for date and time formats but Unicode standard Simple Case Folding is better for comparison and sorting.",
  "closed_at": "2021-08-25T04:07:28Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 I invite you based on your  https://github.com/PowerShell/PowerShell/issues/8180#issuecomment-459890092\r\n> Choosing a consistent default across cmdlets and operators (#8064) is a great idea, but I wonder if that's considered an acceptable breaking change; while that #8566 was indeed a breaking change, this was driven by unacceptable behavior having surfaced on Unix.\r\n\r\nIt seems is a huge work but I believe that we could investigate till next LTS version when we could accept possible breaking changes.",
      "created_at": "2019-02-02T11:49:06Z",
      "updated_at": "2019-02-02T11:49:06Z"
    },
    {
      "author": "adamedx",
      "author_association": "NONE",
      "body": "Adding what may be a related issue encountered in 6.1.2 where `sort-object` behaves differently on the same input on Windows vs. Linux:\r\n\r\n```powershell\r\nPS> $PSVersionTable.Platform;('a', 'ab', 'aC' | Sort-Object ) -join ','\r\nWin32NT\r\na,ab,aC\r\nPS> $PSVersionTable.Platform;('a', 'ab', 'aC' | Sort-Object ) -join ','\r\nUnix\r\na,aC,ab\r\n```\r\nIn my case, tests caught this, but the impact is actually a real defect.",
      "created_at": "2019-02-03T16:09:51Z",
      "updated_at": "2019-02-03T16:09:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@adamedx Can you confirm that you still see that in 6.2.0 Preview4? If so please open new issue.",
      "created_at": "2019-02-04T03:29:09Z",
      "updated_at": "2019-02-04T03:29:09Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@adamedx: I think what you're seeing is a manifestation of CoreFx bug https://github.com/dotnet/corefx/issues/28611\r\n (even though the CoreFx team doesn't view it as a _bug_ and has, regrettably, chosen to simply _document_ the issue).\r\n\r\nThat is, your locale is probably set to `C` or `POSIX` (possibly followed by `.UTF-8`).\r\n\r\nRun the following commands from `bash` (or a similar POSIX-like shell):\r\n\r\n```sh\r\n$ LC_ALL=C pwsh -noprofile -c \"('a', 'ab', 'aC' | Sort-Object ) -join ','\"\r\na,aC,ab  # !! BROKEN\r\n```\r\n\r\nWith a specific locale (culture), the problem does _not_ occur:\r\n\r\n```sh\r\n$ LC_ALL=en_US.UTF-8 pwsh -noprofile -c \"('a', 'ab', 'aC' | Sort-Object ) -join ','\"\r\na,ab,aC # OK\r\n```\r\n\r\nNote that using the standard `sort` utility does _not_ exhibit the problem with the `C` / `POSIX` locale:\r\n\r\n```sh\r\n$ LC_ALL=C printf '%s,' a ab aC | sort -f\r\na,ab,aC,   # OK\r\n```\r\n",
      "created_at": "2019-02-04T04:20:53Z",
      "updated_at": "2019-02-04T04:20:53Z"
    },
    {
      "author": "adamedx",
      "author_association": "NONE",
      "body": "Thank you @mklement0  and @iSazonov , I've opened #8824 to track this explicitly then. I hope we can get the same behavior cross-platform consistency for sort and related functionality on PowerShell Core that Ruby, JavaScript, Python, et. al. exhibit. And certainly the default behavior on Linux (or at least Ubuntu 18.04) is different than PowerShell Desktop, which besides being the source of 99.999% of PowerShell scripts, has set the most usable standard here, where comparisons are case insensitive.",
      "created_at": "2019-02-04T15:18:55Z",
      "updated_at": "2019-02-04T15:18:55Z"
    }
  ],
  "created_at": "2018-10-18T12:18:11Z",
  "number": 8064,
  "state": "closed",
  "title": "Cleanup using StringComparison.CurrentCulture",
  "updated_at": "2021-08-25T04:07:28Z"
}