{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16726",
  "author": "rkitover",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\n![diff between -outfile and | % content](https://i.imgur.com/MieSLUs.png)\n\n### Expected behavior\n\n```console\nThe data should be the same.\n```\n\n\n### Actual behavior\n\n```console\nThe stringification of the `content` property has an extra `CRLF` at the end.\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.1\r\nPSEdition                      Core\r\nGitCommitId                    7.2.1\r\nOS                             Microsoft Windows 10.0.22526\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2022-01-10T14:59:49Z",
  "comments": [
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "This is apparently due to redirection and not specific to the `content` property. I will close this and open a more correct issue later.",
      "created_at": "2022-01-10T14:59:49Z",
      "updated_at": "2022-01-10T14:59:49Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@rkitover  It's not the the redirection in this case, when the file is written it seems to do a trim operation\r\n\r\n\r\n",
      "created_at": "2022-01-10T15:00:51Z",
      "updated_at": "2022-01-10T15:00:51Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "This is what seems to be happening:\r\n\r\n![redirection of data with >](https://i.imgur.com/HiUeK5T.png)",
      "created_at": "2022-01-10T15:11:06Z",
      "updated_at": "2022-01-10T15:11:06Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "```\r\n$x = iwr \"https://chocolatey.org/install.ps1\"\r\n\r\n> [int[]]$x.rawcontent[-7..-1] |  % tostring(\"X2\") \r\n62\r\n6C\r\n6F\r\n63\r\n6B\r\n0D\r\n0A\r\n````\r\nThat file ends in `cr / lf` ;  the following one doesn't: \r\n```\r\n>  $y = iwr \"https://gist.githubusercontent.com/jhoneill/4b74aa82cb5b4608687b24dddef293f8/raw/033ff3e52020ec40e1428cda2477f40a1b5becea/files.ps1xml1\"\r\n> [int[]]$y.rawcontent[-7..-1] |  % tostring(\"X2\")\r\n\r\n72\r\n61\r\n74\r\n69\r\n6F\r\n6E\r\n3E\r\n```\r\nYour file saves with a single `cr lf` when using the `-outfile` parameter\r\n\r\n```\r\n> iwr \"https://chocolatey.org/install.ps1\" -outfile 1.txt                 \r\n> Format-Hex 1.txt  \r\n\r\n   Label: <blah> 1.txt\r\n\r\n          Offset Bytes                                           Ascii\r\n                 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\r\n          ------ ----------------------------------------------- -----\r\n0000000000000000 3C 23 0D 0A 20 20 20 20 2E 53 59 4E 4F 50 53 49 <#\ufffd\ufffd    .SYNOPSI\r\n\r\n0000000000007670 0A 23 20 53 49 47 20 23 20 45 6E 64 20 73 69 67 \ufffd# SIG # End sig\r\n0000000000007680 6E 61 74 75 72 65 20 62 6C 6F 63 6B 0D 0A       nature block\ufffd\ufffd\r\n\r\n```\r\nThe file with no `cr lf` at the end still doesn't have one with `-outfile` \r\n\r\n```\r\n>  iwr \"https://gist.githubusercontent.com/jhoneill/4b74aa82cb5b4608687b24dddef293f8/raw/033ff3e52020ec40e1428cda2477f40a1b5becea/files.ps1xml1\" -OutFile 2.txt\r\n\r\n> format-hex 2.txt\r\n\r\n   Label: xxx\\2.txt\r\n\r\n          Offset Bytes                                           Ascii\r\n                 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\r\n          ------ ----------------------------------------------- -----\r\n0000000000000000 3C 3F 78 6D 6C 20 76 65 72 73 69 6F 6E 3D 22 31 <?xml version=\"1\r\n0000000000000010 2E 30 22 20 65 6E 63 6F 64 69 6E 67 3D 22 75 74 .0\" encoding=\"ut\r\n0000000000000C10 6E 69 74 69 6F 6E 73 3E 0A 3C 2F 43 6F 6E 66 69 nitions>\ufffd</Confi\r\n0000000000000C20 67 75 72 61 74 69 6F 6E 3E                      g\r\n```\r\n\r\nI don't think you can get **that** file to output _without_ a trailing cr lf. \r\n\r\nthe \">\" in powerShell is a shortcut for `out-file`  which is \"Convert these objects to text and write them with `[environment]::newline` between each\", so   `$x.content > file.ext` will go from a single `cr-lf` to a double one.    \r\nWhen that's not what you want you need to use `| Out-File file.ext -nonewline`\r\n\r\n\r\n\r\n",
      "created_at": "2022-01-10T16:20:15Z",
      "updated_at": "2022-01-10T16:23:42Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "I think this is the right place where all of this is being discussed:\r\n\r\nhttps://github.com/PowerShell/PowerShell/issues/1908",
      "created_at": "2022-01-10T17:46:06Z",
      "updated_at": "2022-01-10T17:46:06Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> I think this is the right place where all of this is being discussed:\r\n> \r\n> #1908\r\n\r\nProbably :-)   \r\nElsewhere  programs emit text to a file-stream, and when their output is redirected the necessary line breaks are already present. \r\nPowerShell cmdlets and functions emit objects, which must be converted to text for redirection to a file or a program which only understands file-stream input. \r\n`[math]::E , [math]::pi > foo.txt   `  converts the binary representation of floating point numbers to strings, (deciding what to use to mark the decimal point) and puts a new line after each one (CR/LF on Windows and LF on linux).   \r\n`> `   is just a wrapper for `| Out-File`  and you can which has a `-NoNewline` switch  - which output  \"2.718281828459053.14159265358979\" \r\n\r\n`Get-Content cat / type / gc` splits  a file at line breaks , and so does the pipeline when input comes from a program which outputs to a file-stream  so PowerShell sees the output of `nslookup github.com` as 6 strings.  \r\n\r\nMost of the time splitting and re-joining text is either has no effect at all or the effect is harmless.  \r\n`type a.txt > b.txt`  will replace the line breaks with the default for the current OS (no issue if the file hasn't moved OS, a benefit if you want to translate,  and problem if you don't) .\r\n\r\nThe more PowerShell is adopted by people with a linux background the more cases we get of people saying either \"I don't understand why redirecting `nslookup` splits it into many strings and outputs them with linebreaks\" which sometimes is in the form \"This breaks interoperability with something else I want to use\" and sometimes \"Can't we go back to everything emitting text\" and lashing std-in and std-out file-streams together ?\"   \r\n\r\nIt's better to keep discussion of changes to the behaviour which might be beneficial and practical in one place. \r\nIn this case I think things are working as designed. If you did    \r\n`iwr  $url | % headers > headers.txt` \r\nyou'd want line breaks between each header.  and with    \r\n`iwr  $url | % content >> compound_file.txt`    \r\nYou wouldn't want a line break to be put down before new content, and you wouldn't (usually) want to concatenate the first new line with the last pre-existing line, so a line break at the end is good.  if you did  \r\n```\r\n$result = iwr  $url\r\necho $result.content > file\r\n``` \r\nYou'd get the result you're seeing here because echo sends a new line.  It's not clear how `out-file` (` >` ) can tell that one string should be followed by  a new line and one shouldn't, so I can't see the default behaviour changing.  Behaviour of |  when joining two non PowerShell programs might. \r\n",
      "created_at": "2022-01-11T10:14:58Z",
      "updated_at": "2022-01-11T10:14:58Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "@jhoneill Thank you for the detailed response, some folks on the discord explained to me how \"lines\" are string objects and how piping and redirecting them works, so I have a clearer understanding of all this now.\r\n\r\nHowever, I still believe this behavior is undesirable and I think it can be fixed.\r\n\r\nLet me respond to some of your points here:\r\n\r\n> It's not clear how out-file ( > ) can tell that one string should be followed by a new line and one shouldn't, so I can't see the default behaviour changing.\r\n\r\n`Out-File` will read the whole pipeline, so it will know which line is the last, and would be able to not output a newline in that case.\r\n\r\nIf this would be considered a breaking change, it could be enabled with a setting, e.g. something like:\r\n\r\n```powershell\r\n$PSDefaultParameterValues[\"Out-File:NoLastNewline\"] = $true\r\n```\r\n.\r\n\r\n```powershell\r\niwr $url | % content >> compound_file.txt\r\n```\r\n> You wouldn't want a line break to be put down before new content, and\r\n\r\n> you wouldn't (usually) want to concatenate the first new line with the last pre-existing line, so a line break at the end is good.\r\n\r\nI would argue that the convenience of this particular use-case working is not worth breaking the principle of least-surprise in cases such as the one I reported initially here.\r\n\r\nWith the behavior I am proposing, this particular case could be written as:\r\n\r\n```powershell\r\niwr $url | %{ $_.content,'' } >> compound_file.txt\r\n```\r\n\r\n, which is not too much more horrible, or by setting or not setting a preference variable, whatever the case may be.\r\n\r\nAdmittedly this would not be very intuitive for people used to this convenience.\r\n\r\n```powershell\r\n$result = iwr  $url\r\necho $result.content > file\r\n```\r\n\r\n. If your point for giving this example is to show how the behavior is similar to sh, I would say that it is, to an extent. However, users of such shells are aware that `echo` outputs an extra newline, and would use `echo -n` (which is a non-POSIX extension) or `printf` when they do not want one.\r\n\r\nHere are a few examples:\r\n\r\n![echo/printf examples](https://i.imgur.com/DlSP8MK.png)\r\n\r\nDo you think that such a parameter for `Out-File` or some similar mechanism is worth pursuing?",
      "created_at": "2022-01-28T03:03:09Z",
      "updated_at": "2022-01-28T03:03:09Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "\r\n\r\n\r\n> `Out-File` will read the whole pipeline, so it will know which line is the last, and would be able to not output a newline in that case.\r\n> \r\n> If this would be considered a breaking change, it could be enabled with a setting\r\nMost changes to existing behaviour will break things for anyone who has come to rely on that behaviour, so yes this would be a breaking change and needs a parameter.   I looked at Out-String -Stream and that seems to add a trailing Newline, and should probably get the same parameter.  The -NoNewline parameter in both cases removes the new line between items which isn't what we want so it needs a new and non-clashing name (it can't begin \"NoN\" ) \r\n\r\nAnd to answer your question at the end :  Yes.  There are multiple things where `Out-file` does what most people want, most of the time, but additional parameters for other cases would add to the sum of user satisfaction -  there is always a discussion to be had about the work involved vs the benefit, but I think this is a case where it is worth having the discussion.\r\n\r\nI think `Out-file` probably does gather everything before converting any objects to code, but it the input is a string it _could_ write string & newlines as the strings arrive.\r\n\r\n[re appending] \r\n> I would argue that the convenience of this particular use-case working is not worth breaking the principle of least-surprise in cases such as the one I reported initially here.\r\n\r\nI might have over-complicated that one. \r\nIn Linux , cmd or PowerShell  `echo  hello > file`  gets a trailing Newline but I think in Linux the echo sends the newline and redirection doesn't add anything.  As a side note the famous  ` printf(\"Hello, World!\\n\");`  includes an explicit newline, we need to add it in C but not in a shell script  \r\n\r\nIf we evaluate `\"hello\", \"world\"` in PowerShell the  two expressions print on their own lines.  \r\n`\"hello\", \"world\" > hw.txt` should do the same, right ?  \r\nWhat about  ` \"Hello\" > hw.txt `  followed by  ` \"World\" >> hw.txt `   Still two lines ? Or run together as \"HelloWorld\"  because neither command put a newline in its output.  \r\nThe norm is to end a file with a new line, append doesn't put a new line before the addition.  Deviating from that would mean some things were append-ready and others weren't and I can see whole world of pain there.  Which brings us back to a switch to do it when it matters. \r\n\r\n ",
      "created_at": "2022-01-28T13:31:14Z",
      "updated_at": "2022-01-28T13:31:14Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "@jhoneill Hey, I had another question before I follow up on this further and make a proper enhancement issue.\r\n\r\nHow does `$PSDefaultParameterValues` work with global/child/script scopes?\r\n\r\nSuppose we created a setting such as:\r\n\r\n```powershell\r\n$PSDefaultParameterValues['Out-File:NoTrailingNewline'] = $true\r\n```\r\n\r\nwould this work interactively without breaking modules and scripts that rely on the default behavior if the user wanted this for interactive use only?\r\n\r\nWould it be possible to set in a script if the author would prefer this behavior for their code?",
      "created_at": "2022-03-17T11:02:38Z",
      "updated_at": "2022-03-17T11:02:38Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@rkitover  To the best of my knowledge ... \r\n\r\nIt's in the global scope and inherits into others; because it is derived from a Hash table and we don't usually do   \r\n `$psDefaultParameterValues =  <some new object>` \r\n\r\nPutting `$PSDefaultParameterValues['Out-File:NoTrailingNewline'] = $true` in some scope down x number of levels would add entry to the Global variable. \r\n\r\nSo if someone set it _anywhere_ it would apply _everywhere_, with the breaking consequences I think you've foreseen. \r\n",
      "created_at": "2022-03-17T12:23:47Z",
      "updated_at": "2022-03-17T12:23:47Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "@jhoneill Thank you for the explanation, that makes complete sense.\r\n\r\nMy interest in this change was to allow a user to have this behavior interactively for the `>` operator without using something like `... | Out-File -NoTrailingNewline file.txt`.\r\n\r\nSpeaking of which I noticed that you can't pass parameters to the `>` operator, e.g. `... > -non file.txt` does not work.\r\n\r\nBut I wouldn't really want that either, ideally I'd like to allow the user to set some kind of preference variable for their interactive session and not affect any other scopes.\r\n\r\nHaving just the parameter implemented might be nice, but is of only very limited utility.\r\n\r\nDo you have any ideas for how to implement this, or is it just flat-out impossible with the current state of things?",
      "created_at": "2022-03-18T14:21:28Z",
      "updated_at": "2022-03-18T14:21:28Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "I'd have to test whether `$psDefaultParameterValues` impacts > and >> , on the one hand they are syntactic sugar for `Out-File` so it should , but the other way to look at it is that they do what they've always done in command.com and cmd.exe (and in Unix) just with `Out-File` as the mechanism so it might not work that way.  It would get clunky of the operators look parameters. \r\n\r\nI think Out-File -NoNewLine is fine, and if a user does set the default and break something else that's an acceptable risk. You could look at $myInvocation and see how the command was called and implement a preference variable with \"Never\" (default), \"Always\" and \"InteractiveOnly\" values.  \r\n  \r\n\r\n\r\n ",
      "created_at": "2022-03-18T16:42:16Z",
      "updated_at": "2022-03-18T16:42:16Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "> You could look at $myInvocation and see how the command was called and implement a preference variable with \"Never\" (default), \"Always\" and \"InteractiveOnly\" values.\r\n\r\nSounds like an excellent solution if it's viable, thank you.\r\n\r\nI will do some research and open a proposal as an enhancement issue.",
      "created_at": "2022-03-18T16:50:15Z",
      "updated_at": "2022-03-18T16:50:15Z"
    }
  ],
  "created_at": "2022-01-10T14:14:06Z",
  "number": 16726,
  "state": "closed",
  "title": "Invoke-WebRequest content property adds extra line break",
  "updated_at": "2022-03-18T16:50:15Z"
}