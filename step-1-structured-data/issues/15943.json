{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15943",
  "author": "JamesLear92",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nThe Invoke-Restmethod command fails to cast the header parameter to System.Collections.IDictionary if the following scenarios are true:\r\nYou are storing your header as a hashtable variable\r\nYou have a tab character between the variable name of the hashtable, and the next parameter\r\n\r\nWith a space character between \"-Headers $Headers\" and \"-ContentType 'application/json'\" it works fine, but with a tab character, somewhere in Powershell it's removing the tab and messing up the cast.\r\n\r\nTake the following code and run it. It should return fine. However, if you then copy this into VsCode, and remove the space after '-Headers $Headers' and instead put a tab in, then copy it into a powershell window and it will fail.\r\n\r\n    $Headers = @{\r\n\t    \"method\"           = \"POST\"\r\n\t    \"sec-ch-ua\"        = '\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Microsoft Edge\";v=\"92\"'\r\n\t    \"accept\"           = \"*/*\"\r\n    }\r\n    Invoke-RestMethod -Uri 'http://dummy.restapiexample.com/api/v1/create' -Method 'POST' -Headers $Headers -ContentType 'application/json' -Body '{\"name\":\"test\",\"salary\":\"123\",\"age\":\"23\"}' \r\n\r\nWhen copied into a new powershell window, it appears that the character between $headers and -ContentType is [char]9 which is the ascii code for a tab character.\r\n\r\n The error message:\r\n \r\n    Cannot bind parameter 'Headers'. Cannot convert the \"System.Collections.Hashtable-ContentType\"\r\n\r\nShows to me, that the character is being removed, and somehow the next parameter is treated as if it's part of the type name of the header object type.\r\nIf you rearrange the parameters so that body is the parameter in front of $header with a tab between, then you get the error message:\r\n\r\n    Cannot bind parameter 'Headers'. Cannot convert the \"System.Collections.Hashtable-Body\"\r\n\r\nIssue occurs in both PowerShell 5.1, and PowerShell 7.14. Issue does not occur when debugging in VSCode, likely because tabs are converted to spaces?\r\n\r\n### Expected behavior\r\n\r\n```console\r\n$Headers = @{\r\n\t\"method\"           = \"POST\"\r\n\t\"sec-ch-ua\"        = '\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Microsoft Edge\";v=\"92\"'\r\n\t\"accept\"           = \"*/*\"\r\n}\r\nInvoke-RestMethod -Uri 'http://dummy.restapiexample.com/api/v1/create' -Method 'POST' -Headers $Headers\t-ContentType 'application/json' -Body '{\"name\":\"test\",\"salary\":\"123\",\"age\":\"23\"}'\r\n\r\n\r\nstatus  data                                     message\r\n------  ----                                     -------\r\nsuccess @{name=test; salary=123; age=23; id=978} Successfully! Record has been added.\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\n$Headers = @{\r\n\t\"method\"           = \"POST\"\r\n\t\"sec-ch-ua\"        = '\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Microsoft Edge\";v=\"92\"'\r\n\t\"accept\"           = \"*/*\"\r\n}\r\nInvoke-RestMethod -Uri 'http://dummy.restapiexample.com/api/v1/create' -Method 'POST' -Headers $Headers\t-ContentType 'application/json' -Body '{\"name\":\"test\",\"salary\":\"123\",\"age\":\"23\"}'\r\n\r\nInvoke-RestMethod : Cannot bind parameter 'Headers'. Cannot convert the \"System.Collections.Hashtable-ContentType\"\r\nvalue of type \"System.String\" to type \"System.Collections.IDictionary\".\r\nAt line:1 char:107\r\n+ ... m/api/v1/create' -Method 'POST' -Headers $Headers-ContentType 'applic ...\r\n+                                              ~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidArgument: (:) [Invoke-RestMethod], ParameterBindingException\r\n    + FullyQualifiedErrorId : CannotConvertArgumentNoMessage,Microsoft.PowerShell.Commands.InvokeRestMethodCommand\r\n```\r\n\r\n\r\n### Error details\r\n\r\n```console\r\nInvoke-RestMethod : Cannot bind parameter 'Headers'. Cannot convert the \"System.Collections.Hashtable-ContentType\"\r\nvalue of type \"System.String\" to type \"System.Collections.IDictionary\".\r\nAt line:1 char:107\r\n+ ... m/api/v1/create' -Method 'POST' -Headers $Headers-ContentType 'applic ...\r\n+                                              ~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidArgument: (:) [Invoke-RestMethod], ParameterBindingException\r\n    + FullyQualifiedErrorId : CannotConvertArgumentNoMessage,Microsoft.PowerShell.Commands.InvokeRestMethodCommand\r\n```\r\n\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.22000.65\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.22000.65\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.4\r\nPSEdition                      Core\r\nGitCommitId                    7.1.4\r\nOS                             Microsoft Windows 10.0.22000\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "I just tried to reproduce this, but haven't been able to so far:\r\n\r\n![image](https://user-images.githubusercontent.com/7009879/129811757-bfe07ed4-b28e-4be3-8bfd-0ed72db9225f.png)\r\n\r\n![image](https://user-images.githubusercontent.com/7009879/129811815-98ed33b0-7d0a-458c-848f-87b2c131d53d.png)\r\n\r\nCan you provide a hex dump or file attachment that reproduces the error? I'm wondering if rather than a tab, it's registering as something more exotic in unicode...\r\n\r\nFor the record, the tokenizer reads whitespace here:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/7d53fbbdf7032c1f293da21108bd287cbe6e00db/src/System.Management.Automation/engine/parser/tokenizer.cs#L5083-L5087\r\n\r\nThat method is implemented [here](https://github.com/dotnet/runtime/blob/bb3982239e11d559f839aba445ea7d698084e623/src/libraries/System.Private.CoreLib/src/System/Char.cs#L274-L287).",
      "created_at": "2021-08-17T23:15:17Z",
      "updated_at": "2021-08-17T23:15:17Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I recall there was also an issue with some versions of PSReadLine eating certain unicode characters under some circumstances. @JamesLear92 what version of the PSReadLine module are you currently using?",
      "created_at": "2021-08-17T23:19:06Z",
      "updated_at": "2021-08-17T23:19:06Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Yeah, I also wonder if this could be a console/PSReadLine thing rather than a direct PowerShell issue",
      "created_at": "2021-08-18T00:18:02Z",
      "updated_at": "2021-08-18T00:18:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "The Tab is removed without PSRL too on Windows.",
      "created_at": "2021-08-18T04:13:42Z",
      "updated_at": "2021-08-18T04:14:05Z"
    },
    {
      "author": "JamesLear92",
      "author_association": "NONE",
      "body": "@rjmholt I made sure to test what character is present when raising the issue as I also thought it might be an exotic character. But it's definitely [char]9. The issue doesn't occur when running the script, only when pasting it into PowerShell. But I've confirmed that the character is [char]9 when pasting it into PowerShell",
      "created_at": "2021-08-18T06:49:47Z",
      "updated_at": "2021-08-18T06:49:47Z"
    },
    {
      "author": "JamesLear92",
      "author_association": "NONE",
      "body": "@vexx32 \r\nI can confirm it's also occurring when the PsReadLine module is removed, but the versions I am running are:\r\n2.0.0 in Ps 5.1\r\n2.1.0 in Ps 7.14",
      "created_at": "2021-08-18T06:52:02Z",
      "updated_at": "2021-08-18T06:52:02Z"
    },
    {
      "author": "JamesLear92",
      "author_association": "NONE",
      "body": "Issue is also present when using Windows Terminal 1.9.1942.0",
      "created_at": "2021-08-18T06:54:08Z",
      "updated_at": "2021-08-18T06:54:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @DHowett",
      "created_at": "2021-08-18T09:05:39Z",
      "updated_at": "2021-08-18T09:05:39Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "I'm able to reproduce, but only with right-click paste, not <kbd>Ctrl</kbd>+<kbd>V</kbd> paste:\r\n\r\n![image](https://user-images.githubusercontent.com/7009879/129931264-c10a3907-2b59-49d7-b97e-99f8843eebfe.png)\r\n\r\nThis suggests to me that the issue is external to PowerShell",
      "created_at": "2021-08-18T15:56:26Z",
      "updated_at": "2021-08-18T16:00:13Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, it works fine when loading a file with the tab character... must be something with the console host, or something along those lines?",
      "created_at": "2021-08-18T17:36:18Z",
      "updated_at": "2021-08-18T17:36:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> This suggests to me that the issue is external to PowerShell\r\n\r\nBut I don't see the issue in cmd.exe (neither standalone or Windows Terminal).",
      "created_at": "2021-08-19T04:25:26Z",
      "updated_at": "2021-08-19T04:25:26Z"
    },
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "Hmm, I do see the issue when right-click pasting into CMD in Windows Terminal:\r\n\r\n![image](https://user-images.githubusercontent.com/5177512/130128451-5a81129b-24c4-45e4-acb6-625b5c872b33.png)\r\n\r\nDitto for right-click pasting into bash in WSL/Ubuntu in Windows Terminal:\r\n\r\n![image](https://user-images.githubusercontent.com/5177512/130128789-38341a4c-20a3-4cac-87a3-f2805fc41dd3.png)\r\n\r\n",
      "created_at": "2021-08-19T19:02:16Z",
      "updated_at": "2021-08-19T19:02:16Z"
    },
    {
      "author": "JamesLear92",
      "author_association": "NONE",
      "body": "Ok, issue is certainly the interaction between the terminal and powershell.\r\nWhen using Ctrl+V, powershell itself has an event handler, and it pastes. But when using right click paste, the terminal has to type the characters to powershell.\r\n\r\nBecause tab is used for completing in PowerShell/Cmd, the tab is consumed as an autocomplete request rather than a character.\r\nYou can see this by running the following and right click pasting:\r\n\r\n    'Get-Proc' + [char]9 + 'Test' | scb\r\n\r\nYou will almost certainly get the text \"Get-ProcessTest\" \r\n\r\nThe issue exists also in Windows Terminal, except Ctrl+V is handled by the Terminal rather than Powershell, so the problem also occurs there.\r\n\r\nGlad we know what the problem is. Who fixes it?",
      "created_at": "2021-09-01T13:33:34Z",
      "updated_at": "2021-09-01T14:03:04Z"
    },
    {
      "author": "JamesLear92",
      "author_association": "NONE",
      "body": "Thinking about this, this could be a huge security problem. It allows for strings to escape and execute. You can test and manufacture this exploit with the following:\r\n\r\n    'Start-Pr' + [char]9 + ' PowerShell' + [char]13 + 'Exit' + [char]13 | scb\r\n    \r\nIt will generate a string in your clipboard which will start a new powershell process and close your current window (without you ever pressing enter).\r\n",
      "created_at": "2021-09-01T14:19:17Z",
      "updated_at": "2021-09-01T14:19:17Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "The user still has to manually paste that string, but yes arguably it's a bit odd that those characters are not interpreted as literal characters when pasting.",
      "created_at": "2021-09-01T14:20:42Z",
      "updated_at": "2021-09-01T14:20:53Z"
    },
    {
      "author": "JamesLear92",
      "author_association": "NONE",
      "body": "@vexx32 Yeah it doesn't seem too bad, but you could have any number of tabs, tabbing to a completely different code. Going from a script you're happy to paste as plane text, to a malicious self executing string which doesn't even wait for you to see what's pasted and press enter.\r\n\r\nYou're right though that it does need to be right clicked into a powershell window.",
      "created_at": "2021-09-01T14:34:06Z",
      "updated_at": "2021-09-01T14:34:06Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw would have the most context here to offer suggestions.\r\n\r\nHowever, I suspect this might be by design due to the architecture of right click to paste (and is why PSRL encourages <kbd>Ctrl</kbd>+<kbd>V</kbd> usage); I don't think there's a way for PSRL to distinguish a user-provided interactive <kbd>Tab</kbd> from one delivered by a right click, so they must both do the same thing.\r\n\r\n> Thinking about this, this could be a huge security problem\r\n\r\nOnce you have access to the clipboard and the ability to paste something to an arbitrary window, you're already well beyond standard security boundaries. Windows Terminal does have a defense in depth feature to try to help here:\r\n\r\n![image](https://user-images.githubusercontent.com/7009879/131707158-fb61ea28-19ba-46e3-9c55-b94215231d6c.png)\r\n\r\nBut ultimately this is the clipboard version of the email attachment problem and there's only so much that can be done to prevent users from pulling the trigger on themselves. Anyway, further security discussion is best had [through our security process](https://github.com/PowerShell/PowerShell/security/policy).\r\n\r\nAs I say, I think this is an issue of right-click-to-paste being indistinguishable from direct user input, so <kbd>Tab</kbd> is doing exactly what it's configured to in PSRL here.",
      "created_at": "2021-09-01T16:22:25Z",
      "updated_at": "2021-09-01T16:22:25Z"
    }
  ],
  "created_at": "2021-08-17T08:55:24Z",
  "number": 15943,
  "state": "open",
  "title": "Invoke-Restmethod broken by tab character after the header parameter variable",
  "updated_at": "2021-09-01T16:22:25Z"
}