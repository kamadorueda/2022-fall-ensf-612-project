{
  "_url": "https://github.com/PowerShell/PowerShell/issues/10538",
  "author": "anthonypants",
  "body": "Let's say I want to pull some XML from a website:\r\n```\r\nPS C:\\WINDOWS\\system32> $content = Invoke-RestMethod -Uri https://www.bankofcanada.ca/valet/observations/FXCADUSD/xml -Method Get\r\n```\r\n\r\nAnd let's say I want to peel off some of the subelements and fool around with them, like I would with any other object:\r\n```\r\nPS C:\\WINDOWS\\system32> $test = $content.data.seriesDetail.series\r\nPS C:\\WINDOWS\\system32> $test\r\n\r\nid       label   description                                      dimension\r\n--       -----   -----------                                      ---------\r\nFXCADUSD CAD/USD Canadian dollar to US dollar daily exchange rate dimension\r\n\r\nPS C:\\WINDOWS\\system32> $test.id = \"12345678\"\r\nPS C:\\WINDOWS\\system32> $test\r\n\r\nid       label   description                                      dimension\r\n--       -----   -----------                                      ---------\r\n12345678 CAD/USD Canadian dollar to US dollar daily exchange rate dimension\r\n```\r\n\r\nWhy is it that the parent document ends up being affected?\r\n```\r\nPS C:\\WINDOWS\\system32> $content.data.seriesDetail.series\r\n\r\nid       label   description                                      dimension\r\n--       -----   -----------                                      ---------\r\n12345678 CAD/USD Canadian dollar to US dollar daily exchange rate dimension\r\n\r\nPS C:\\WINDOWS\\system32>\r\n```\r\n\r\nIs this intended behavior?",
  "closed_at": "2019-09-17T12:00:39Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Not so much explicitly _intended_ by PowerShell, but more a function of how reference types behave.\r\n\r\nA majority of .NET types are reference types, which means that if you assign the value to another variable, only the reference to that item is assigned. This avoids what would otherwise be a significant amount of processing overhead that would be required to entirely copy the objects, and essentially means that if you assign a reference to a variable, it will still affect the original variable or the original object it was attached to.\r\n\r\nTo cover the few cases where you _do_ want to create actual copies of items, many classes have `Clone()` methods which can be applied to create copies, though the degree to which they are copied and how much data can be duplicated will vary depending on the implementation for that individual class.\r\n\r\nAccording to the documentation [here](https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmlelement.clonenode?view=netframework-4.8) there is a `.CloneNode()` method on XmlElement, so you should be able to do `$test = $content.data.seriesDetail.series.CloneNode($true)` to create a copy of the node to work with and modify without affecting the original node. The `$true` boolean tells the method to copy all child nodes as well; if you instead pass `$false` as the argument, only the target node is cloned; all child nodes would remain references to the originals.",
      "created_at": "2019-09-14T00:33:19Z",
      "updated_at": "2019-09-14T00:35:00Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2019-09-17T12:00:38Z",
      "updated_at": "2019-09-17T12:00:38Z"
    }
  ],
  "created_at": "2019-09-13T23:33:25Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 10538,
  "state": "closed",
  "title": "Unable to use multiple XmlElement objects?",
  "updated_at": "2019-09-17T12:00:39Z"
}