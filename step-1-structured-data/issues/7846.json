{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7846",
  "author": "IISResetMe",
  "body": "PR #2518 by @KirkMunro adds the ability to select the top or bottom `N` items of a sorted set, introducing stability to the sorting method. However, this behavior is undermined whenever `N` equals or exceeds the input size.\r\n\r\nThis deviance can be observed when sorting by congruence modulo for example:\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n1..20 |Sort-Object {$_ % 3} -Top 20\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```none\r\n3\r\n6\r\n9\r\n12\r\n15\r\n18\r\n1\r\n4\r\n7\r\n10\r\n13\r\n16\r\n19\r\n2\r\n5\r\n8\r\n11\r\n14\r\n17\r\n20\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\n18\r\n3\r\n15\r\n6\r\n12\r\n9\r\n1\r\n16\r\n13\r\n10\r\n7\r\n4\r\n19\r\n11\r\n8\r\n14\r\n5\r\n17\r\n2\r\n20\r\n```\r\n\r\nThe culprit seems to be the last two conditions in this branch: https://github.com/KirkMunro/PowerShell/blob/master/src/Microsoft.PowerShell.Commands.Utility/commands/utility/sort-object.cs#L247\r\n\r\n```csharp\r\n            // If -Top & -Bottom were not used, or if -Top or -Bottom would return all objects, invoke\r\n            // an in-place full sort\r\n            if ((Top == 0 && Bottom == 0) || Top >= dataToProcess.Count || Bottom >= dataToProcess.Count)\r\n            {\r\n                sortedItemCount = FullSort(dataToProcess, comparer);\r\n            }\r\n            // Otherwise, use an indexed min-/max-heap to perform an in-place sort of all objects\r\n            else\r\n            {\r\n                sortedItemCount = Heapify(dataToProcess, comparer);\r\n            }\r\n```\r\n\r\nSuggested fix would be to either add a `-Stable` switch parameter that forces `Sort-Object` to use the stable min/max heap sort implementation, or change the branch above to only default to `FullSort()` when `-Top`/`-Bottom` are omitted completely.\r\n\r\nMy personal preference would be to go for _both_ changes - `-Stable` would be nice for when you don't know input size up front but want to maintain input order for equal items\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0-57-g0f0c46dfe51440470b86f67b258e14aea32fa0aa\r\nOS                             Microsoft Windows 10.0.17134 \r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
  "closed_at": "2019-01-16T01:14:40Z",
  "comments": [
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "@IISResetMe I agree with this. That allows for the more performant sort to be used by default in every case, with an option to have a less performant stable in-place sort over an entire collection. In my mind the desired end result would be to have the following parameter sets:\r\n\r\n```none\r\nSort-Object [[-Property] <Object[]>] [-Stable] [-Descending] [-Unique] [-InputObject <psobject>] [-Culture <string>] [-CaseSensitive] [<CommonParameters>]\r\n\r\nSort-Object [[-Property] <Object[]>] -Top <int> [-Descending] [-Unique] [-InputObject <psobject>] [-Culture <string>] [-CaseSensitive] [<CommonParameters>]\r\n\r\nSort-Object [[-Property] <Object[]>] -Bottom <int> [-Descending] [-Unique] [-InputObject <psobject>] [-Culture <string>] [-CaseSensitive] [<CommonParameters>]\r\n```\r\n\r\nThis would be accompanied by the following logic replacing the section you called out above:\r\n\r\n```csharp\r\n// If -Stable, -Top & -Bottom were not used, invoke an in-place full sort\r\nif (!_stable && Top == 0 && Bottom == 0)\r\n{\r\n    sortedItemCount = FullSort(dataToProcess, comparer);\r\n}\r\n// Otherwise, use an indexed min-/max-heap to perform an in-place sort of all objects\r\nelse\r\n{\r\n    sortedItemCount = Heapify(dataToProcess, comparer);\r\n}\r\n```\r\n\r\nThe only other thing that would be missing is some additional logic in the Heapify method that makes it work without size limits, but that wouldn't be very complicated.\r\n\r\nIf others agree, I can add this enhancement.",
      "created_at": "2018-09-24T12:21:53Z",
      "updated_at": "2018-09-24T12:21:53Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "@KirkMunro LGTM!\r\n\r\nHad originally solved this with [a `Stable` parameter across all sets](https://github.com/IISResetMe/PowerShell/commit/476fec564c27d4f1dc6aa1fd594ff5eddee014e5), but as mentioned above I like your approach better since it also means consistent behavior regardless of input size.",
      "created_at": "2018-09-24T14:47:20Z",
      "updated_at": "2018-09-24T14:47:20Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for this suggestion @IISResetMe. It was really easy to implement and test, and I like the new, optional functionality. :)",
      "created_at": "2018-09-26T01:22:03Z",
      "updated_at": "2018-09-26T01:22:03Z"
    }
  ],
  "created_at": "2018-09-22T23:23:26Z",
  "labels": [
    "Issue-Discussion",
    "WG-Cmdlets-Utility"
  ],
  "number": 7846,
  "state": "closed",
  "title": "Sort-Object inappropriately sacrifices stability for performance",
  "updated_at": "2019-01-16T01:14:40Z"
}