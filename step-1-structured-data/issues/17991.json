{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17991",
  "author": "LqkUWp",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nI have a file `.\\o\\abc [defg].pdf`, then I try all commands below to `ls` it. The first char y/x represents that the corresponding command works or not, i.e. prints the file or nothing without any error. \r\n\r\n1. with recurse\r\n   + without asterisk\r\n      ```\r\n      y ls -Path 'abc [[]defg[]].pdf' -Recurse\r\n      y ls -Path 'abc `[defg`].pdf' -Recurse\r\n      x ls -Path 'abc ``[defg``].pdf' -Recurse\r\n      ```\r\n   + with asterisk\r\n      ```\r\n      y ls -Path '*\\abc [[]defg[]].pdf' -Recurse\r\n      y ls -Path '*\\abc `[defg`].pdf' -Recurse\r\n      x ls -Path '*\\abc ``[defg``].pdf' -Recurse\r\n      ```\r\n2. without recurse\r\n   + without asterisk\r\n      ```\r\n      x ls -Path 'o\\abc [[]defg[]].pdf'\r\n      y ls -Path 'o\\abc `[defg`].pdf'\r\n      y ls -Path 'o\\abc ``[defg``].pdf'\r\n      ```\r\n   + with asterisk\r\n      ```\r\n      x ls -Path '*\\abc [[]defg[]].pdf'\r\n      x ls -Path '*\\abc `[defg`].pdf'\r\n      y ls -Path '*\\abc ``[defg``].pdf'\r\n      ```\r\n\r\n### Expected behavior\r\n\r\n```console\r\nThe impact of asterisk on `ls` should be exactly the same whether `ls` is with `-Recurse` or not. \r\n\r\nI understand these two things: \r\n\r\n1. In each minor command group above, all three commands works differently according to [[], `[, or ``[. \r\n2. whether `ls` is with `-Recurse` or not, asterisk affects the behavior of `ls`, i.e. in each major group composed of two minor groups above, any possible difference between the two minor groups results from asterisk. \r\n\r\nBut it looks like a bug that asterisk affects differently on bare `ls` and `ls` with `-Recurse`. In the 1st major group with recurse above, you can see that asterisk does not affect on `ls`. But in the 2nd major group without recurse, asterisk does affect on `ls`. That difference is a little annoying.\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nJust as the first char y/x in each command line shows.\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.6\r\nPSEdition                      Core\r\nGitCommitId                    7.2.6\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "There are some oddities about how parts of Get-ChildItem (alias ls) work, most of which are in the filesystem provider rather than the cmdlet. These are compounded when using wildcard characters in file names. \r\n\r\nThere is no obvious reason why ```ls -Path '*\\abc `[defg`].pdf' ``` should not work.  `ls -Path '*\\foo.pdf' ` is fine. \r\n\r\nThe path in  `ls -Path 'abc [[]defg[]].pdf'  seems to read as abc , then one from the set  {\"[\" } , defg , one from the set {\"]\" } , and finally .pdf   which matches.  \r\n `\"abc [defg].txt\" -like 'abc [x[]defg[]x].txt'  `  makes the two sets two-character ones and returns true. So the recursive behaviour is right and it's unclear why the not recursive one does something different \r\n\r\nThe examples where you have ```  ``  ```  are escaping the ```   `  ``` itself, so those are saying a ``` ` ``, then` one from the set {\"d\",\"e\",\"f\",\"g\"} and another ```  `  ``` \r\n",
      "created_at": "2022-09-07T14:16:49Z",
      "updated_at": "2022-09-07T14:16:49Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "With respect to backtick-escaping (`` ` ``):\r\n\r\n * Only ever _one_ `` ` `` should be required to escape `[` and `]` - irrespective of whether `-Recurse` is present or not.\r\n   * As an aside: even in cases where the single `` ` ``-escaping works, the fact that `]` _also_ needs escaping could be considered a bug in its own right, because that is _not_ a requirement of wildcard matching itself; e.g., `'[ab]' -like '`[ab]'` works fine without also escaping the `]` (though you may do so).\r\n\r\n * Such oddities are collected in the following catch-all issue:\r\n    * https://github.com/PowerShell/PowerShell/issues/7999\r\n\r\nWith respect to escaping `[` and `]` as `[[]` and `[]]`:\r\n\r\n* This _should_ work and does with pure wildcard matching: `'[ab]' -like '[[]ab[]]'`\r\n* Similar to #17992, the problem seems to come down to still treating what is between `[` and `]` as a _character set_, even though that is clearly inappropriate if the `[` and `]` are _escaped_.\r\n* While the problem is not covered by #7999 as such, I wonder if resolving the latter would also resolve this.\r\n",
      "created_at": "2022-09-07T15:53:00Z",
      "updated_at": "2022-09-07T15:53:00Z"
    }
  ],
  "created_at": "2022-08-30T14:55:36Z",
  "labels": [
    "WG-Engine-Providers",
    "Needs-Triage",
    "Area-FileSystem-Provider"
  ],
  "number": 17991,
  "state": "open",
  "title": "asterisk in path name affects `ls` differently according to that `ls` is with `-Recurse` or not. ",
  "updated_at": "2022-09-07T15:53:00Z"
}