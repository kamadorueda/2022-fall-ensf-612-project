{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7326",
  "author": "rockerinthelocker",
  "body": "UPDATE:\r\n\r\n@coolcsh, While [System.Reflection.Assembly]::LoadFile(path to assembly) works just fine with PowerShell in this scenario, it does not with PowerShell Core.\r\n\r\nIf you run into this issue, try System.Runtime.Loader.AssemblyLoadContext (see https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/assemblyloadcontext.md) as shown in the workaround below.\r\n\r\nNotes:\r\n\r\n1) The workaround only works with PowerShell Core (AssemblyLoadContext is only available in .NET Core).\r\n2) The PowerShell Core version installed must include the required or a newer version of Newtonsoft.Json.dll (see https://www.nuget.org/packages/MaxMind.GeoIP2/ for dependencies).\r\n\r\n```\r\n$GeoIpDbPath = 'C:\\GeoIP\\'\r\n$GeoIpLibrary = $GeoIpDbPath + 'MaxMind.GeoIP2.dll'\r\n$GeoIpDbLibrary = $GeoIpDbPath + 'MaxMind.Db.dll'\r\n$GeoIpNewtonJson = $GeoIpDbPath + 'Newtonsoft.Json.dll'\r\n$GeoIpAsnDb = $GeoIpDbPath + 'GeoLite2-ASN.mmdb'\r\n\r\n$assLoadContext = [System.Runtime.Loader.AssemblyLoadContext]::Default\r\n$assLoadContext.LoadFromAssemblyPath($GeoIpLibrary)\r\n$assLoadContext.LoadFromAssemblyPath($GeoIpDbLibrary)\r\n$assLoadContext.LoadFromAssemblyPath($GeoIpNewtonJson)\r\n\r\n$asnReader = [MaxMind.GeoIP2.DatabaseReader]::new($GeoIpAsnDb)\r\n```\r\n<hr/>\r\nThis bug is still not resolved (see #7076 for further details).\r\n\r\n```\r\n$GeoIpDbPath = 'C:\\GeoIP\\'\r\n$GeoIpLibrary = $GeoIpDbPath + 'MaxMind.GeoIP2.dll'\r\n$GeoIpDbLibrary = $GeoIpDbPath + 'MaxMind.Db.dll'\r\n$GeoIpNewtonJson = $GeoIpDbPath + 'Newtonsoft.Json.dll'\r\n$GeoIpAsnDb = $GeoIpDbPath + 'GeoLite2-ASN.mmdb'\r\n\r\n[System.Reflection.Assembly]::LoadFile($GeoIpLibrary)\r\n[System.Reflection.Assembly]::LoadFile($GeoIpDbLibrary)\r\n[System.Reflection.Assembly]::LoadFile($GeoIpNewtonJson)\r\n\r\n$asnReader = [MaxMind.GeoIP2.DatabaseReader]::new($GeoIpAsnDb)\r\n```\r\n\r\nThe code above works as expected with all PowerShell versions but 6.1.0-preview.3 and 6.1.0-preview.4. The last two preview versions throw\r\n\r\n```\r\nCould not load file or assembly 'MaxMind.Db, Version=2.0.0.0, Culture=neutral, PublicKeyToken=66afa4cc5ae853ac'. The system cannot find the file specified.\r\nAt line:1 char:1\r\n+ $asnReader = [MaxMind.GeoIP2.DatabaseReader]::new($GeoIpAsnDb)\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : OperationStopped: (:) [], FileNotFoundException\r\n+ FullyQualifiedErrorId : System.IO.FileNotFoundException\r\n```\r\n\r\nWithout support for non-GAC assemblies, PowerShell Core is pretty much useless.\r\n",
  "closed_at": "2018-08-10T05:19:48Z",
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@rockerinthelocker Can you please provide a simpler repro? That would be very helpful. Or, please add instructions about how to set up to reproduce with the `MaxMind` assemblies.\r\n\r\nWe started to use dotnet core 2.1 from preview.3, so there is a possibility that this is due to changes in .NET Core. /cc @adityapatwardhan ",
      "created_at": "2018-07-20T22:12:08Z",
      "updated_at": "2018-07-20T22:14:29Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I can load an assembly from local folder without problem. I guess the issue is only with MaxMind assemblies.",
      "created_at": "2018-07-22T06:57:38Z",
      "updated_at": "2018-07-22T06:57:38Z"
    },
    {
      "author": "rockerinthelocker",
      "author_association": "NONE",
      "body": "@daxian-dbw @adityapatwardhan @iSazonov\r\nThe setup is quite simple and takes just a couple of minutes.\r\n\r\n1) Open a command prompt, create folder C:\\GeoIP, and cd to it.\r\n\r\n2) Install the MaxMind GeoIP2 package (available at https://www.nuget.org/packages/MaxMind.GeoIP2/) via nuget.exe (https://www.nuget.org/downloads) like so:\r\n\r\n```\r\nnuget install MaxMind.GeoIP2 -Version 3.0.0\r\n```\r\n\r\n3) For testing purposes, the .NET flavor (net45, netstandard 2.0, etc.) of the DLLs included in the packages does not matter so simply grab\r\n\r\n```\r\nC:\\GeoIP\\MaxMind.GeoIP2.3.0.0\\lib\\netstandard2.0\\MaxMind.GeoIP2.dll\r\nC:\\GeoIP\\MaxMind.Db.2.4.0\\lib\\netstandard2.0\\MaxMind.Db.dll\r\nC:\\GeoIP\\Newtonsoft.Json.11.0.2\\lib\\netstandard2.0\\Newtonsoft.Json.dll\r\n```\r\n\r\nand copy to C:\\GeoIP.\r\n\r\n4) Download the GeoLite2 ASN database from http://geolite.maxmind.com/download/geoip/database/GeoLite2-ASN.tar.gz and unpack 'GeoLite2-ASN.mmdb' included in the archive to C:\\GeoIP.\r\n\r\nNow, there should be\r\n\r\n```\r\nGeoLite2-ASN.mmdb\r\nMaxMind.Db.dll\r\nMaxMind.GeoIP2.dll\r\nNewtonsoft.Json.dll\r\n```\r\n\r\nin C:\\GeoIP and all is set.\r\n\r\n5) Finally, execute\r\n\r\n```\r\n$GeoIpDbPath = 'C:\\GeoIP\\'\r\n$GeoIpLibrary = $GeoIpDbPath + 'MaxMind.GeoIP2.dll'\r\n$GeoIpDbLibrary = $GeoIpDbPath + 'MaxMind.Db.dll'\r\n$GeoIpNewtonJson = $GeoIpDbPath + 'Newtonsoft.Json.dll'\r\n$GeoIpAsnDb = $GeoIpDbPath + 'GeoLite2-ASN.mmdb'\r\n\r\n[System.Reflection.Assembly]::LoadFile($GeoIpLibrary)\r\n[System.Reflection.Assembly]::LoadFile($GeoIpDbLibrary)\r\n[System.Reflection.Assembly]::LoadFile($GeoIpNewtonJson)\r\n\r\n$asnReader = [MaxMind.GeoIP2.DatabaseReader]::new($GeoIpAsnDb)\r\n```\r\n\r\n\r\nThank you!\r\n",
      "created_at": "2018-07-22T17:32:26Z",
      "updated_at": "2018-07-22T17:32:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I can repo. I got the error after `[MaxMind.GeoIP2.DatabaseReader]::new` (without parameter and brackets):\r\n```powershell\r\n$error[0].Exception | fl -Force\r\n\r\n\r\nErrorRecord                 : The following exception occurred while retrieving member \"New\": \"Could not load file or\r\n                              assembly 'MaxMind.Db, Version=2.0.0.0, Culture=neutral,\r\n                              PublicKeyToken=66afa4cc5ae853ac'. The system cannot find the file specified.\"\r\nWasThrownFromThrowStatement : False\r\nMessage                     : The following exception occurred while retrieving member \"New\": \"Could not load file or\r\n                              assembly 'MaxMind.Db, Version=2.0.0.0, Culture=neutral,\r\n                              PublicKeyToken=66afa4cc5ae853ac'. The system cannot find the file specified.\"\r\nData                        : {System.Management.Automation.Interpreter.InterpretedFrameInfo}\r\nInnerException              : System.IO.FileNotFoundException: Could not load file or assembly 'MaxMind.Db,\r\n                              Version=2.0.0.0, Culture=neutral, PublicKeyToken=66afa4cc5ae853ac'. The system cannot\r\n                              find the file specified.\r\n                              File name: 'MaxMind.Db, Version=2.0.0.0, Culture=neutral,\r\n                              PublicKeyToken=66afa4cc5ae853ac' ---> System.IO.FileNotFoundException: Could not load\r\n                              the specified file.\r\n                              File name: 'MaxMind.Db'\r\n                                 at System.Runtime.Loader.AssemblyLoadContext.ResolveUsingEvent(AssemblyName\r\n                              assemblyName)\r\n                                 at System.Runtime.Loader.AssemblyLoadContext.ResolveUsingResolvingEvent(IntPtr\r\n                              gchManagedAssemblyLoadContext, AssemblyName assemblyName)\r\n                                 at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig,\r\n                              RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType\r\n                              declaringType)\r\n                                 at System.Reflection.RuntimeConstructorInfo.get_Signature()\r\n                                 at System.Reflection.RuntimeConstructorInfo.GetParametersNoCopy()\r\n                                 at System.Reflection.RuntimeConstructorInfo.GetParameters()\r\n                                 at System.Management.Automation.MethodInformation..ctor(MethodBase method, Int32\r\n                              parametersToIgnore) in C:\\Users\\sie\\Documents\\GitHub\\iSazonov\\PowerShell\\src\\System.Manag\r\n                              ement.Automation\\engine\\CoreAdapter.cs:line 1876\r\n                                 at System.Management.Automation.DotNetAdapter.GetMethodInformationArray(MethodBase[]\r\n                              methods) in C:\\Users\\sie\\Documents\\GitHub\\iSazonov\\PowerShell\\src\\System.Management.Autom\r\n                              ation\\engine\\CoreAdapter.cs:line 3869\r\n                                 at System.Management.Automation.DotNetAdapter.MethodCacheEntry..ctor(MethodBase[]\r\n                              methods) in C:\\Users\\sie\\Documents\\GitHub\\iSazonov\\PowerShell\\src\\System.Management.Autom\r\n                              ation\\engine\\CoreAdapter.cs:line 2347\r\n                                 at System.Management.Automation.DotNetAdapter.PopulateMethodReflectionTable(Type\r\n                              type, CacheTable typeMethods, BindingFlags bindingFlags) in C:\\Users\\sie\\Documents\\GitHub\r\n                              \\iSazonov\\PowerShell\\src\\System.Management.Automation\\engine\\CoreAdapter.cs:line 2882\r\n                                 at System.Management.Automation.DotNetAdapter.GetStaticMethodReflectionTable(Type\r\n                              type) in C:\\Users\\sie\\Documents\\GitHub\\iSazonov\\PowerShell\\src\\System.Management.Automati\r\n                              on\\engine\\CoreAdapter.cs:line 3179\r\n                                 at System.Management.Automation.DotNetAdapter.GetDotNetMethod[T](Object obj, String\r\n                              methodName) in C:\\Users\\sie\\Documents\\GitHub\\iSazonov\\PowerShell\\src\\System.Management.Au\r\n                              tomation\\engine\\CoreAdapter.cs:line 3353\r\n                                 at System.Management.Automation.DotNetAdapter.GetMember[T](Object obj, String\r\n                              memberName) in C:\\Users\\sie\\Documents\\GitHub\\iSazonov\\PowerShell\\src\\System.Management.Au\r\n                              tomation\\engine\\CoreAdapter.cs:line 3542\r\n                                 at System.Management.Automation.Adapter.BaseGetMember[T](Object obj, String\r\n                              memberName) in C:\\Users\\sie\\Documents\\GitHub\\iSazonov\\PowerShell\\src\\System.Management.Au\r\n                              tomation\\engine\\CoreAdapter.cs:line 375\r\n\r\n\r\nTargetSite                  : T BaseGetMember[T](System.Object, System.String)\r\nStackTrace                  :    at System.Management.Automation.Adapter.BaseGetMember[T](Object obj, String\r\n                              memberName) in C:\\Users\\sie\\Documents\\GitHub\\iSazonov\\PowerShell\\src\\System.Management.Au\r\n                              tomation\\engine\\CoreAdapter.cs:line 380\r\n                                 at System.Management.Automation.PSObject.GetStaticCLRMember(Object obj, String\r\n                              methodName) in C:\\Users\\sie\\Documents\\GitHub\\iSazonov\\PowerShell\\src\\System.Management.Au\r\n                              tomation\\engine\\MshObject.cs:line 1014\r\n                                 at System.Management.Automation.Language.PSGetMemberBinder.GetPSMemberInfo(DynamicMeta\r\n                              Object target, BindingRestrictions& restrictions, Boolean& canOptimize, Type&\r\n                              aliasConversionType, MemberTypes memberTypeToOperateOn, HashSet`1 aliases, List`1\r\n                              aliasRestrictions) in C:\\Users\\sie\\Documents\\GitHub\\iSazonov\\PowerShell\\src\\System.Manage\r\n                              ment.Automation\\engine\\runtime\\Binding\\Binders.cs:line 5446\r\n                                 at System.Management.Automation.Language.PSGetMemberBinder.FallbackGetMember(DynamicMe\r\n                              taObject target, DynamicMetaObject errorSuggestion) in C:\\Users\\sie\\Documents\\GitHub\\iSaz\r\n                              onov\\PowerShell\\src\\System.Management.Automation\\engine\\runtime\\Binding\\Binders.cs:line\r\n                              5055\r\n                                 at System.Dynamic.DynamicMetaObject.BindGetMember(GetMemberBinder binder)\r\n                                 at System.Dynamic.GetMemberBinder.Bind(DynamicMetaObject target, DynamicMetaObject[]\r\n                              args)\r\n                                 at System.Dynamic.DynamicMetaObjectBinder.Bind(Object[] args, ReadOnlyCollection`1\r\n                              parameters, LabelTarget returnLabel)\r\n                                 at System.Runtime.CompilerServices.CallSiteBinder.BindCore[T](CallSite`1 site,\r\n                              Object[] args)\r\n                                 at System.Dynamic.UpdateDelegates.UpdateAndExecute1[T0,TRet](CallSite site, T0 arg0)\r\n                                 at System.Management.Automation.Interpreter.DynamicInstruction`2.Run(InterpretedFrame\r\n                              frame) in C:\\Users\\sie\\Documents\\GitHub\\iSazonov\\PowerShell\\src\\System.Management.Automat\r\n                              ion\\engine\\interpreter\\DynamicInstructions.Generated.cs:line 139\r\n                                 at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(Interp\r\n                              retedFrame frame) in C:\\Users\\sie\\Documents\\GitHub\\iSazonov\\PowerShell\\src\\System.Managem\r\n                              ent.Automation\\engine\\interpreter\\ControlFlowInstructions.cs:line 356\r\nHelpLink                    :\r\nSource                      : System.Management.Automation\r\nHResult                     : -2146233087\r\n\r\n```",
      "created_at": "2018-07-23T04:34:04Z",
      "updated_at": "2018-07-23T04:34:04Z"
    },
    {
      "author": "rockerinthelocker",
      "author_association": "NONE",
      "body": "@iSazonov , Thanks for taking the time and providing further details!\r\n\r\n@daxian-dbw , It seems you're right and it's a .NET Core 2.1 issue.\r\n\r\n@coolcsh  , Looks like something related to loading non-GAC DLLs is broken in .NET Core 2.1. Maybe you can get someone looking into this? Thank you!\r\n",
      "created_at": "2018-07-23T18:05:12Z",
      "updated_at": "2018-07-23T18:05:12Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@rockerinthelocker can you open an issue in the coreclr repo?  Will get more immediate attention I think.",
      "created_at": "2018-07-26T19:04:47Z",
      "updated_at": "2018-07-26T19:04:47Z"
    },
    {
      "author": "vitek-karas",
      "author_association": "NONE",
      "body": "To make this work simply change the `[System.Reflection.Assembly]::LoadFile` to `[System.Reflection.Assembly]::LoadFrom`. With that your repro works on the 6.1.0-preview.4.\r\n\r\nThe reason this fails with `LoadFile` is that `LoadFile` loads the specified assembly into its own `AssemblyLoadContext` (ALC) and thus the 3 files are loaded into different ALCs and don't \"see each other\". Unlike on desktop, the .NET Core runtime will not look for assemblies \"next-to\" the one it's currently using, so the one loaded by `LoadFile` also doesn't see the files on disk right next to it.\r\n`LoadFrom` is different, it loads the assemblies into the Default ALC so basically to the same set as everything else (namely PS in this case). It also implements a file based lookup, so it will load files \"next to\". The downside of this approach is that you can't load the same assembly twice into the Default ALC. So if there's a version collision between PS and your \"plugin\" (GeoIP), then it won't work.\r\n\r\nWith 6.1.0-preview.4 PS happens to use the same version of Newtonsoft.Json as the GeoIP v3.0.0, so it works. I also tried this on 6.0.3 PS and there it fails because PS uses older version of Newtonsoft.Json.\r\n\r\n@daxian-dbw I don't see how this behavior changed in .NET Core. The above behavior of `LoadFile` versus `LoadFrom` is the same in .NET Core 2.0 and 2.1. If you do have a version where this used to work and now it doesn't I would be very interesting in it.\r\n\r\nWe are working on providing actually working and easy to use solution for scenarios like this for .NET Core 3. In .NET Core 2.1, it is possible to make it work, but it requires an implementation of a custom `AssemblyLoadContext`. While possible to code this up in PS, it's definitely not \"simple\".",
      "created_at": "2018-08-06T13:42:33Z",
      "updated_at": "2018-08-06T13:42:33Z"
    },
    {
      "author": "jkotas",
      "author_association": "CONTRIBUTOR",
      "body": "> Unlike on desktop, the .NET Core runtime will not look for assemblies \"next-to\" the one it's currently using, so the one loaded by LoadFile also doesn't see the files on disk right next to it.\r\n\r\n`LoadFile` on desktop does not look \"next-to\" for dependencies either. The behavior of LoadFile is the same between desktop and .NET Core in this regard.",
      "created_at": "2018-08-06T14:08:50Z",
      "updated_at": "2018-08-06T14:08:50Z"
    },
    {
      "author": "vitek-karas",
      "author_association": "NONE",
      "body": "Thanks @jkotas, didn't know that.",
      "created_at": "2018-08-06T14:23:47Z",
      "updated_at": "2018-08-06T14:23:47Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@vitek-karas and @jkotas, thank you for the clarification, it's very helpful!",
      "created_at": "2018-08-06T17:44:37Z",
      "updated_at": "2018-08-06T17:44:37Z"
    },
    {
      "author": "rockerinthelocker",
      "author_association": "NONE",
      "body": "@vitek-karas @jkotas @daxian-dbw  , Unfortunately, using LoadFrom instead of LoadFile doesn't work either (see below).\r\n\r\n```\r\nException calling \".ctor\" with \"1\" argument(s): \"Could not load type 'System.IO.MemoryMappedFiles.MemoryMappedFileSecurity' from assembly 'System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.\"\r\nAt line:1 char:1\r\n+ $asnReader = [MaxMind.GeoIP2.DatabaseReader]::new($GeoIpAsnDb)\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\r\n+ FullyQualifiedErrorId : TypeLoadException\r\n```\r\n\r\n",
      "created_at": "2018-08-07T20:22:00Z",
      "updated_at": "2018-08-07T20:22:00Z"
    },
    {
      "author": "jkotas",
      "author_association": "CONTRIBUTOR",
      "body": "> Could not load type 'System.IO.MemoryMappedFiles.MemoryMappedFileSecurity\r\n\r\nThe assembly you are trying to run is not compatible with .NET Core.\r\n\r\nThis type does not exist in .NET Core today. It is tracked by https://github.com/dotnet/corefx/issues/29546",
      "created_at": "2018-08-07T20:45:42Z",
      "updated_at": "2018-08-07T20:45:42Z"
    },
    {
      "author": "rockerinthelocker",
      "author_association": "NONE",
      "body": "@jkotas, Glad you figured that LoadFile no longer works with PowerShell v6.1.0-preview.3+.",
      "created_at": "2018-08-08T06:24:47Z",
      "updated_at": "2018-08-08T06:24:47Z"
    },
    {
      "author": "jkotas",
      "author_association": "CONTRIBUTOR",
      "body": "@rockerinthelocker This assembly could have never worked well on .NET Core properly. It is referencing types that never existed in .NET Core.",
      "created_at": "2018-08-08T08:29:19Z",
      "updated_at": "2018-08-08T08:29:19Z"
    },
    {
      "author": "rockerinthelocker",
      "author_association": "NONE",
      "body": "@jkotas , Not sure what assembly you're referring to, but the MaxMind GeoIP assemblies work just fine with PowerShell v6.1.0-preview.2 and previous PowerShell Core versions. Apparently, some breaking change was made in PowerShell v6.1.0-preview.3 or .NET Core 2.1; and it would be great if you guys figure out so existing PowerShell scripts continue to work as expected before PowerShell Core 6.1 gets released.",
      "created_at": "2018-08-08T18:04:21Z",
      "updated_at": "2018-08-08T18:04:21Z"
    },
    {
      "author": "jkotas",
      "author_association": "CONTRIBUTOR",
      "body": "@rockerinthelocker I have tried the steps in https://github.com/PowerShell/PowerShell/issues/7326#issuecomment-406883555 to reproduce this. It works fine for me (w/ LoadFile replace with LoadFrom):\r\n\r\n![image](https://user-images.githubusercontent.com/6668460/43857116-3e547d34-9aff-11e8-8931-94447df24d43.png)\r\n",
      "created_at": "2018-08-08T18:38:19Z",
      "updated_at": "2018-08-08T18:38:19Z"
    },
    {
      "author": "rockerinthelocker",
      "author_association": "NONE",
      "body": "@jkotas , Thank you for taking the time! It's indeed strange, because the above throws here (see https://github.com/dotnet/coreclr/issues/19292#issuecomment-411633010). Thank you!",
      "created_at": "2018-08-09T04:31:07Z",
      "updated_at": "2018-08-09T04:32:58Z"
    },
    {
      "author": "jkotas",
      "author_association": "CONTRIBUTOR",
      "body": "> For testing purposes, the .NET flavor (net45, netstandard 2.0, etc.) of the DLLs included in the packages does not matter so simply grab\r\n\r\nIt does matter, I think. When I grab net45 flavor, I can see the exception about MemoryMappedFileSecurity. The net45 flavor is apparently not compatible with .NET Core.",
      "created_at": "2018-08-09T06:19:25Z",
      "updated_at": "2018-08-09T06:19:25Z"
    },
    {
      "author": "rockerinthelocker",
      "author_association": "NONE",
      "body": "@jkotas , Back to the topic. All PowerShell versions, except 6.1.0 previews 3 and 4, have no issues with LoadFile. PowerShell 6.1.0 preview 3 and 4 (targeting .NET Core 2.1 instead of .NET 2.0), however, ignore the path specified and just search for the assemblies in the GAC.",
      "created_at": "2018-08-09T21:00:29Z",
      "updated_at": "2018-08-09T21:00:29Z"
    },
    {
      "author": "jkotas",
      "author_association": "CONTRIBUTOR",
      "body": "> All PowerShell versions, except 6.1.0 previews 3 and 4, have no issues with LoadFile\r\n\r\nNot what I see. I have tried steps from https://github.com/PowerShell/PowerShell/issues/7326#issuecomment-406883555 on PowerShell-6.0.3-win-x64 .  It is the stable version from https://github.com/PowerShell/PowerShell#get-powershell . It fails the same way as PowerShell 6.1.0 preview 4.\r\n\r\n![image](https://user-images.githubusercontent.com/6668460/43926737-1d8d4978-9be0-11e8-9649-4339f538afa8.png)\r\n",
      "created_at": "2018-08-09T21:25:52Z",
      "updated_at": "2018-08-09T21:25:52Z"
    },
    {
      "author": "rockerinthelocker",
      "author_association": "NONE",
      "body": "@jkotas , Maybe that version includes the bug as well. Anyway, this thread is about PowerShell 6.1.0.",
      "created_at": "2018-08-10T03:32:19Z",
      "updated_at": "2018-08-10T03:32:19Z"
    },
    {
      "author": "jkotas",
      "author_association": "CONTRIBUTOR",
      "body": "The exception is expected. LoadFile is working as speced and documented. It worked this way for last 15+ years since .NET Framework 1.0. There is no bug as far as .NET Core runtime is concerned.\r\n\r\nIf it somehow worked differently for you in a particular version of powershell, please point us to the exact version and repro steps. We will be happy to take a look.",
      "created_at": "2018-08-10T04:03:01Z",
      "updated_at": "2018-08-10T04:03:01Z"
    },
    {
      "author": "rockerinthelocker",
      "author_association": "NONE",
      "body": "The version details are available in the other thread (https://github.com/dotnet/coreclr/issues/19292#issuecomment-411633010). Since LoadFile works without issues with native PowerShell, all is good.",
      "created_at": "2018-08-10T05:19:48Z",
      "updated_at": "2018-08-10T05:19:48Z"
    }
  ],
  "created_at": "2018-07-20T21:49:06Z",
  "number": 7326,
  "state": "closed",
  "title": "PowerShell v6.1.0-preview.4: Non-GAC DLLs Not Found",
  "updated_at": "2018-08-10T22:57:34Z"
}