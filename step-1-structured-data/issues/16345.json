{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16345",
  "author": "rkitover",
  "body": "### Summary of the new feature / enhancement\n\nI would like to have a simple and concise method of suppressing errors and error messages, regardless of their type and source.\r\n\r\nIn a POSIX shell, I can do something like this:\r\n\r\n```bash\r\nset -e\r\nrm nonexistent >/dev/null 2>&1 || : \r\n```\r\n\r\nwhile this is not particularly beautiful, it works consistently. If anything, we should be able to do better in PowerShell.\r\n\r\nThis operator in PowerShell has different semantics based on `$ErrorActionPreference`, whether the command returns an exit code or throws an exception etc.. So using this idiom in PowerShell will not work. For example:\r\n\r\n```powershell\r\n$ErrorActionPreference = 'stop'\r\nri nonexistent *> $null || echo success\r\nRemove-Item: Cannot find path 'C:\\Users\\rkitover\\nonexistent' because it does not exist. \r\n```\r\n\r\nin this case neither the error message is suppressed nor the alternate action is taken.\r\n\r\nSo, let's try something else:\r\n\r\n```powershell\r\n$ErrorActionPreference = 'stop'\r\ntry { ri nonexistent } catch {}; echo success\r\nsuccess\r\n```\r\n\r\nthis is closest to what I want, with the caveat that the behavior still depends on `$ErrorActionPreference`, for example:\r\n\r\n```powershell\r\n$ErrorActionPreference = 'continue'\r\ntry { ri nonexistant } catch {}; echo success \r\nRemove-Item: Cannot find path 'C:\\Users\\rkitover\\nonexistant' because it does not exist. \r\nsuccess \r\n```\r\n\r\nin this case the error message is not suppressed. So let's try another variant:\r\n\r\n```powershell\r\n$ErrorActionPreference = 'continue'\r\n&{try { ri nonexistant } catch {}} *> $null; echo success\r\nsuccess\r\n$ErrorActionPreference = 'stop'\r\n&{try { ri nonexistant } catch {}} *> $null; echo success\r\nsuccess\r\n```\r\n\r\nthis gives me consistent behavior regardless of `$ErrorActionPreference` and is the closest to what I'm trying to do in this case.\r\n\r\nHowever, this is a pretty horrible construct.\n\n### Proposed technical implementation details (optional)\n\nI am not a PowerShell expert so I don't know what the best design for a feature like this would be, I just want to be able to run a command, function, cmdlet, .NET code, or whatever, and suppress all error output and exceptions.\r\n\r\nAlso it would be nice if the `catch {}` block for a `try {}` was optional.",
  "closed_at": "2021-11-03T12:00:44Z",
  "comments": [
    {
      "author": "rkeithhill",
      "author_association": "COLLABORATOR",
      "body": "There are two things you haven't tried with respect to suppressing `non-terminating` errors: setting `$ErrorActionPreference = 'SilentlyContinue'` which I don't recommend doing at the script level and suppressing non-terminating errors at the command level via the common parameter `-ErrorAction`:\r\n\r\n```powershell\r\nri nonexistant -ea SilentlyContinue\r\n```\r\n\r\nThis will still store error info in the `$Error` collection so if you need to, you can inspect the error later.\r\n\r\n```\r\nPS> $Error[0]\r\n\r\nRemove-Item: Cannot find path 'C:\\Users\\Keith\\PSSupport\\nonexistant' because it does not exist.\r\n```\r\n\r\nIf you do not even want the error stored in `$Error` use:\r\n\r\n```powershell\r\nri nonexistant -ea Ignore\r\n```\r\nBy and large, PowerShell commands generate non-terminating errors for common errors like \"file doesn't exist\".  However for those commands that generate terminating errors, there is no way around using `try/catch`.   Well, except for using a trap statement at the top of your script that ignores all terminating errors - again not something I'd actually \"recommend\" doing:\r\n```powershell\r\n& { trap {\"ignoring $_\"} throw \"kaboom\"; \"success\" }\r\n\r\nignoring kaboom\r\nsuccess\r\n```",
      "created_at": "2021-10-31T21:24:56Z",
      "updated_at": "2021-11-01T18:04:28Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "I did not know about `-ea ignore` that is very nice, thank you very much!",
      "created_at": "2021-10-31T22:13:40Z",
      "updated_at": "2021-10-31T22:13:40Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2021-11-03T12:00:43Z",
      "updated_at": "2021-11-03T12:00:43Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "I don't agree that the feature as I described it exists, or that the quirks in behavior I described should not be addressed, even though the alternate methods I was not aware of are helpful. ",
      "created_at": "2021-11-03T13:35:21Z",
      "updated_at": "2021-11-03T13:35:21Z"
    }
  ],
  "created_at": "2021-10-31T18:45:34Z",
  "number": 16345,
  "state": "closed",
  "title": "add a terse method for suppressing errors",
  "updated_at": "2021-11-03T13:35:21Z"
}