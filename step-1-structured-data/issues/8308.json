{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8308",
  "author": "mklement0",
  "body": "See repro below.\r\n\r\nAs an aside (that will probably become a docs issue): What is the purpose of `ConvertTo-Xml`? The docs suggest that it is the in-memory counterpart to `Export-Clixml`, however:\r\n* It produces _different_ XML representations,\r\n* which, if saved to a file, cannot be re-imported with `Import-Clixml`\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\n[pscustomobject] @{ a = [pscustomobject] @{ aa=11; bb=22 } } | ConvertTo-Xml\r\n```\r\n\r\n# Expected behavior\r\n\r\nShould output an `[xml]` instance that is the serialization of the custom object.\r\n\r\n# Actual behavior\r\n\r\nThe following error occurs:\r\n\r\n```none\r\nConvertTo-Xml : Unexpected end of file has occurred. The following elements are not closed: Objects.\r\n```\r\n\r\n* If you use `-As String`, you don't get an error, but the XML string output too is missing the closing `</Objects>` tag.\r\n\r\n* Removing the 2nd property (`bb`) from the nested custom object makes the problem go away.\r\n\r\n* Using `[hashtable]` instances instead of `[pscustomobject]`s makes the problem go away.\r\n\r\n* `Export-Clixml` does _not_ exhibit the problem.\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core 6.2.0-preview.1 on macOS 10.14.1\r\nPowerShell Core 6.2.0-preview.1 on Ubuntu 16.04.5 LTS\r\nPowerShell Core 6.2.0-preview.1 on Microsoft Windows 10 Pro (64-bit; Version 1803, OS Build: 17134.345)\r\nWindows PowerShell v5.1.17134.228 on Microsoft Windows 10 Pro (64-bit; Version 1803, OS Build: 17134.345)\r\n```\r\n",
  "closed_at": "2018-12-22T17:50:12Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Fails with Windows PowerShell 5.1 so not a regression.  Seems specific to nested `[PSCustomObject]`.  Other cases work\r\n\r\n```powershell\r\nget-process | select -first 1 | convertto-xml\r\n```\r\n",
      "created_at": "2018-11-18T22:55:07Z",
      "updated_at": "2018-11-18T22:55:07Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @SteveL-MSFT. Generally, I only include a Windows PowerShell version in the _Environment data_ section if it _isn't_ a regression (and, conversely, point out if it is). Can you briefly explain the purpose of `ConvertTo-Xml` with respect to my comments at the top, so I can open doc issues, if/as needed?",
      "created_at": "2018-11-18T23:03:44Z",
      "updated_at": "2018-11-18T23:04:25Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 I don't know the history of it, but I can make an educated guess.  `ConvertTo-Xml` uses a simplified format that makes it easier to use with other systems that accept XML although it's probably still a bit more abstract than a simple property bag format...  `Export-CliXml` is the same serialization format PowerShell uses for remoting so it's more complete to enable deserialization.  Ideally, it seems like we should have had `ConvertTo-Xml` take a `-Format` parameter that supported `CliXml` and other xml formats rather than having this confusion between `ExportTo-CliXml` and `ConvertTo-Xml` having incompatible xml formats.",
      "created_at": "2018-11-18T23:53:15Z",
      "updated_at": "2018-11-18T23:53:15Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @SteveL-MSFT.\r\n\r\n>  other systems that accept XML \r\n\r\nSo I can suggest improvements to the docs: can you give examples of such other systems?\r\nAre there common real-world scenarios?\r\n\r\n\r\n",
      "created_at": "2018-11-19T15:57:48Z",
      "updated_at": "2018-11-19T15:57:48Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I've created a docs issue at https://github.com/PowerShell/PowerShell-Docs/issues/3310.",
      "created_at": "2018-11-19T16:12:42Z",
      "updated_at": "2018-11-19T16:12:42Z"
    },
    {
      "author": "sdwheeler",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 @SteveL-MSFT this does seem specific to pscustomobject. The following works:\r\n\r\n```powershell\r\n[psobject] @{ a = [psobject] @{ aa=11; bb=22 } } | ConvertTo-Xml\r\n```\r\n",
      "created_at": "2018-11-19T16:42:14Z",
      "updated_at": "2018-11-19T16:42:14Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@sdwheeler: Yes, but do note that casting to `[psobject]` is a virtual no-op, because only the `[pscustombject]` cast provides the custom-object construction syntactic sugar:\r\n\r\n```powershell\r\nPS> ([psobject] @{ a = [psobject] @{ aa=11; bb=22 } }).GetType().Name\r\nHashtable # !! [psobject] was effectively ignored.\r\n```\r\n\r\nAs an aside: I say _virtual_ no-op, because you do get an extra `[psobject]` wrapper, though that is _mostly_ invisible - [except when it isn't](https://github.com/PowerShell/PowerShell/issues/5579).\r\n\r\n\r\nIn other words: your command is the same as the following, and therefore operates on a hashtable:\r\n\r\n```powershell\r\n@{ a = @{ aa=11; bb=22 } } | ConvertTo-Xml\r\n```\r\n\r\n",
      "created_at": "2018-11-19T16:51:45Z",
      "updated_at": "2018-11-19T16:51:45Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 the \"other systems\" was purely hypothetical :)   In this day and age, it's probably safe to say it's very uncommon to use XML vs JSON.  Other than some demos, I've never had to use `ConvertTo-Xml` myself for any real world scenarios.",
      "created_at": "2018-11-19T18:25:01Z",
      "updated_at": "2018-11-19T18:25:01Z"
    },
    {
      "author": "IISResetMe",
      "author_association": "COLLABORATOR",
      "body": "Looks like the serializer erroneously decreases the serialization `depth` when writing PSObject properties:\r\nhttps://github.com/PowerShell/PowerShell/blob/5d03e1653a7d518715fa3f00587cad6b5c78cc89/src/Microsoft.PowerShell.Commands.Utility/commands/utility/CustomSerialization.cs#L735\r\n\r\nThis results in nested properties whenever there's more than one.\r\n\r\n[Removing `--depth;`](https://github.com/IISResetMe/PowerShell/commit/56e07a011858c6dd8c8d7373e2fb7d0aadd662e1) seems to solve the problem completely ",
      "created_at": "2018-12-09T21:00:58Z",
      "updated_at": "2018-12-09T21:22:26Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@IISResetMe perhaps you could submit a PR with tests :)",
      "created_at": "2018-12-10T19:00:30Z",
      "updated_at": "2018-12-10T19:00:30Z"
    }
  ],
  "created_at": "2018-11-18T21:39:12Z",
  "number": 8308,
  "state": "closed",
  "title": "ConvertTo-Xml fails with nested custom objects: omits closing </Objects> tag",
  "updated_at": "2019-04-02T06:33:32Z"
}