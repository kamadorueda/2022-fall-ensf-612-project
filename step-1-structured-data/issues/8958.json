{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8958",
  "author": "mkellerman",
  "body": "# Summary of the new feature/enhancement\r\n\r\nJob objects have a internal property called Results that collects all output streams into one collection. Currently, it is impossible to reconstruct the stream from the split stream collections (Output, Debug, Verbose, Warning, Error...).\r\n\r\nEven doing Receive-Job outputs the Write-Host to the host immediately, there is no way to capture this, and 'show' the result later on.\r\n\r\nThis would allow us to manage/handle the stream as we see fit. Export-Clixml would work beautifully for this purpose, and would allow us to Import-Clixml the stream at a later date. VERY useful for debugging deployments as code on remote servers. Especially when working with ScheduledJobs\r\n\r\nThis was already raised (see notes IN the code itself):\r\nhttps://github.com/PowerShell/PowerShell/blob/1be3f4cc0e465ae11ad8e59e9060f5a59e4762eb/src/System.Management.Automation/engine/remoting/client/Job.cs#L526\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\nIt's a simple fix.. just change it to public.. \ud83d\ude04 \r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/1be3f4cc0e465ae11ad8e59e9060f5a59e4762eb/src/System.Management.Automation/engine/remoting/client/Job.cs#L684\r\n ",
  "closed_at": "2021-03-01T18:39:30Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems we discussed something related. Perhaps we could do more smart things.",
      "created_at": "2019-02-27T05:46:58Z",
      "updated_at": "2019-02-27T05:46:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Since it is new public API we need PowerShell Committee conclusion.\r\n\r\n/cc @SteveL-MSFT @daxian-dbw ",
      "created_at": "2020-10-19T06:39:43Z",
      "updated_at": "2020-10-19T06:39:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Is it good name for the new public property?",
      "created_at": "2020-10-19T06:40:49Z",
      "updated_at": "2020-10-19T06:40:49Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee reviewed this, we agree with supporting the scenario, however simply making that member public may not be the right design decision.  Instead, it may make sense to have a public member that is readonly that contains the collection of stream objects.  In addition, it would make sense to review if there are other cases (like PowerShell API) where it makes sense to make this collection available instead of separate streams.  We agree that `Results` is not a descriptive name for a public API, so we propose `AggregatedStreams` but open to any better names.  Intent is to provide `Receive-Job` capability at the API layer.",
      "created_at": "2020-10-21T22:07:39Z",
      "updated_at": "2020-10-21T22:16:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ">  In addition, it would make sense to review if there are other cases (like PowerShell API) where it makes sense to make this collection available instead of separate streams.\r\n\r\n/cc @mklement0 @KirkMunro who could be interested in this (sorry if I wrong).",
      "created_at": "2020-10-22T03:42:33Z",
      "updated_at": "2020-10-22T03:42:33Z"
    },
    {
      "author": "KirkMunro",
      "author_association": "CONTRIBUTOR",
      "body": "> Currently, it is impossible to reconstruct the stream from the split stream collections (Output, Debug, Verbose, Warning, Error...).\r\n\r\nIt isn't impossible, at least not when you're invoking PowerShell using an SDK. You can subscribe to events for each of the different streams using respective stream collection property in `PowerShell.Streams`, and then when you `Receive-Job`, you will get events fired for each of the items returned from the job; however, when you are working from PowerShell itself this may not be a viable solution.\r\n\r\nMy issue with using jobs from PowerShell, where I want real-time processing of the data coming from the independent streams so that I can do what I want with them, is that there is no way to first create a job, then set up event handlers on that job for the streams, and only _then_ run the job. This isn't even supported in the SDK. A job object has all of the `PSDataCollection` streams available, which have the event handlers that I want to subscribe to, but I _cannot_ create the job, then set up my event handlers, and then run the job. The job creation and execution are bound together and happen too quickly right now. This is a much bigger shortcoming from my perspective, and I believe addressing that would also resolve this issue, but in a better way that would work for SDK users and PowerShell scripters, because it would support asynchronous execution, and allow me to manage the memory because I could clear the data stream content as I receive event notifications (which is what I already do). Compare that to the idea of `AggregatedStreams`, and now you have another stream where you need to manage content if you want to keep your memory requirements as low as possible while using background jobs or thread jobs, and this new stream still doesn't give you the ability to have event handlers ready to go the moment the job is actually started.",
      "created_at": "2020-10-22T17:13:50Z",
      "updated_at": "2020-10-22T17:35:09Z"
    }
  ],
  "created_at": "2019-02-23T06:57:00Z",
  "number": 8958,
  "state": "closed",
  "title": "$Job.Results should be made public",
  "updated_at": "2021-03-01T18:39:30Z"
}