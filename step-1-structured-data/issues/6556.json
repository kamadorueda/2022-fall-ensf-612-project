{
  "_url": "https://github.com/PowerShell/PowerShell/issues/6556",
  "author": "juliank",
  "body": "Steps to reproduce\r\n------------------\r\n\r\n```powershell\r\nfunction TestEnableNetFirewallRule() {\r\n    [CmdLetBinding(SupportsShouldProcess=$true)]\r\n    param ([string]$DisplayGroup)\r\n\r\n    Enable-NetFirewallRule -DisplayGroup $DisplayGroup\r\n }\r\n\r\n TestEnableNetFirewallRule -DisplayGroup \"Remote Desktop\" -WhatIf\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nThe firewall rule is not enabled, and the same output as when calling `Enable-NetFirewallRule -DisplayGroup \"Remote Desktop\" -WhatIf`:\r\n```none\r\nWhat if: Enable-NetFirewallRule DisplayName: RemoteDesktop-Shadow-In-TCP\r\nWhat if: Enable-NetFirewallRule DisplayName: RemoteDesktop-UserMode-In-UDP\r\nWhat if: Enable-NetFirewallRule DisplayName: RemoteDesktop-UserMode-In-TCP\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\nNo output, and the firewall rule for Remote Desktop is enabled\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.16299.251\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.16299.251\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n",
  "closed_at": "2019-09-30T00:00:36Z",
  "comments": [
    {
      "author": "PetSerAl",
      "author_association": "CONTRIBUTOR",
      "body": "`$WhatIfPreference` variable do not cross module boundaries:\r\n```powershell\r\nNew-Module {\r\n    Set-StrictMode -Version Latest\r\n    function f {\r\n        [CmdletBinding(SupportsShouldProcess)]param()\r\n        $WhatIfPreference # True\r\n        $global:WhatIfPreference # False\r\n        $local:WhatIfPreference # True\r\n        g\r\n    }\r\n} | Out-Null\r\nNew-Module {\r\n    Set-StrictMode -Version Latest\r\n    function g {\r\n        [CmdletBinding()]param()\r\n        $WhatIfPreference # False\r\n        $global:WhatIfPreference # False\r\n        $local:WhatIfPreference # Error\r\n    }\r\n} | Out-Null\r\n$WhatIfPreference # False\r\nf -WhatIf\r\n```",
      "created_at": "2018-04-04T10:45:26Z",
      "updated_at": "2018-04-04T10:47:31Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "To complement @PetSerAl's helpful example with additional information:\r\n\r\n`Enable-NetFirewallRule` is defined in a module and implemented as a (PowerShell) _function_ rather than as a compiled cmdlet.\r\n\r\nUnfortunately, as @PetSerAl's example shows,  functions imported from modules do not see (implicitly set) preference variables from the callers's scope (unless that scope happens to be the global one).\r\n\r\nIn the case at hand, your `TestEnableNetFirewallRule` function's  `[CmdLetBinding(SupportsShouldProcess)]` attribute causes PowerShell to translate the `-WhatIf` switch into a _local_ `$WhatIfPreference` variable with (effective) value `$True` (it is technically a ` [switch]` instance whose `.IsPresent` property reports `$True` and therefore acts like `$True` in a Boolean context). \r\n\r\nHowever, due to `Enable-NetFirewallRule` living in a (different) _module_, it doesn't see `TestEnableNetFirewallRule`'s local `$WhatIfPreference` value and therefore doesn't honor the original `-WhatIf` switch.\r\n\r\nThis problematic behavior is the subject of #4568.\r\n",
      "created_at": "2018-04-04T16:32:33Z",
      "updated_at": "2018-04-04T20:07:01Z"
    },
    {
      "author": "juliank",
      "author_association": "NONE",
      "body": "Thank you for the in-depth explanation @mklement0. My knowledge of PowerShell is rather limited, and this difference in behavior between functions and compiled cmdlets was totally unknown to me (I guess I was just lucky when I posted #6342 a month ago, that it was an actual bug and not just a function/cmdlet issue).\r\n\r\nFrom what I can read from #4568 which you mention, there doesn't seem to be any easy and straight-forward way of telling whether -WhatIf will behave as \"expected\" or not. So I guess the only thing I can do is to assume that it never will, and always test it? In any case it's an interesting discussion going on in the referenced issue thread.",
      "created_at": "2018-04-04T19:53:08Z",
      "updated_at": "2018-04-04T19:53:08Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@juliank:  Thanks for the follow-up:\r\n\r\n#6342 is indeed a manifestation of the same problem after all, as I've only just now realized.\r\n\r\nIf you do agree that #4568 is a problem, I encourage you to give it a thumbs-up - surprisingly few people have, so far.\r\n\r\n>  So I guess the only thing I can do is to assume that it never will, and always test it?\r\n\r\nYes  - unfortunately; to spell out the cumbersome workaround, using [splatting](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_splatting):\r\n\r\n```powershell\r\nfunction TestEnableNetFirewallRule() {\r\n    [CmdLetBinding(SupportsShouldProcess=$true)]\r\n    param ([string]$DisplayGroup)\r\n\r\n    $htWhatIfPassThru = @{ WhatIf = $WhatIfPreference }\r\n\r\n    Enable-NetFirewallRule -DisplayGroup $DisplayGroup @htWhatIfPassThru\r\n }\r\n\r\n```\r\n\r\nNote that the above just covers `-WhatIf`; to cover all common parameters, you'd have to apply the same logic to all of them.",
      "created_at": "2018-04-04T20:28:24Z",
      "updated_at": "2018-04-04T21:26:49Z"
    },
    {
      "author": "juliank",
      "author_association": "NONE",
      "body": "Thank you for the suggested workaround @mklement0. Splatting was new to me, so I would have gone for the even more cumbersome workaround surrounding my call to `Enable-NetFirewallRule` using  `if (ShouldProcess(..., \"...\"))`. And if I read it correctly, it is easily adjustable to also account for `-Confirm`, which will cover my scenarios in this case.",
      "created_at": "2018-04-04T21:23:49Z",
      "updated_at": "2018-04-04T21:23:49Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@juliank: Yes, it should work analogously for `-Confirm` / `$ConfirmPreference`.",
      "created_at": "2018-04-04T21:26:13Z",
      "updated_at": "2018-04-04T21:26:13Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2019-09-30T00:00:35Z",
      "updated_at": "2019-09-30T00:00:35Z"
    }
  ],
  "created_at": "2018-04-04T08:05:58Z",
  "number": 6556,
  "state": "closed",
  "title": "Enable-NetFirewallRule doesn't respect -WhatIf when called from advanced function",
  "updated_at": "2019-09-30T00:00:36Z"
}