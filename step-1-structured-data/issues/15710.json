{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15710",
  "author": "mthalman",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n### Steps to reproduce\r\n\r\n1. Define a Dockerfile with the following content:\r\n\r\n```Dockerfile\r\nFROM alpine:3.14\r\n\r\nRUN apk add --no-cache \\\r\n        ca-certificates \\\r\n        curl \\\r\n        bash \\\r\n        \\\r\n        # .NET Core dependencies\r\n        icu-libs \\\r\n        krb5-libs \\\r\n        libgcc \\\r\n        libintl \\\r\n        libssl1.1 \\\r\n        libstdc++ \\\r\n        zlib\r\n\r\n# Install .NET 6\r\nRUN curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin -Quality preview -Channel 6.0 -InstallDir /usr/share/dotnet \\\r\n    && ln -s /usr/share/dotnet/dotnet /usr/bin/dotnet\r\n\r\n# Install PowerShell global tool\r\nRUN powershell_version=7.2.0-preview.7 \\\r\n    && wget -O PowerShell.Linux.Alpine.$powershell_version.nupkg https://pwshtool.blob.core.windows.net/tool/$powershell_version/PowerShell.Linux.Alpine.$powershell_version.nupkg \\\r\n    && powershell_sha512='4f1701fa91a27e53eb2c3f6656ea24f15d0c89a9fc3d076c3971c73a8693cf0434a2d33a04b574740d8fc81b9f77b4094b30b66ae31f8e28e481be880b698a54' \\\r\n    && echo \"$powershell_sha512  PowerShell.Linux.Alpine.$powershell_version.nupkg\" | sha512sum -c - \\\r\n    && mkdir -p /usr/share/powershell \\\r\n    && dotnet tool install --add-source / --tool-path /usr/share/powershell --version $powershell_version PowerShell.Linux.Alpine \\\r\n    && dotnet nuget locals all --clear \\\r\n    && rm PowerShell.Linux.Alpine.$powershell_version.nupkg \\\r\n    && chmod 755 /usr/share/powershell/pwsh \\\r\n    && ln -s /usr/share/powershell/pwsh /usr/bin/pwsh \\\r\n    # To reduce image size, remove the copy nupkg that nuget keeps.\r\n    && find /usr/share/powershell -print | grep -i '.*[.]nupkg$' | xargs rm \\\r\n    # Add ncurses-terminfo-base to resolve psreadline dependency\r\n    && apk add --no-cache ncurses-terminfo-base\r\n```\r\n\r\n2. Build the Dockerfile\r\n\r\n```console\r\n> docker build -t repro .\r\n```\r\n\r\n3. Run the container and launch PowerShell\r\n\r\n```console\r\n\u276f docker run --rm test pwsh\r\nUnhandled exception. System.TypeInitializationException: The type initializer for 'System.Management.Automation.PSVersionInfo' threw an exception.\r\n ---> System.TypeInitializationException: The type initializer for 'System.Management.Automation.PSObject' threw an exception.\r\n ---> System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.Management.Infrastructure, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n\r\nFile name: 'Microsoft.Management.Infrastructure, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'\r\n   --- End of inner exception stack trace ---\r\n   at System.Management.Automation.PSObject.get_Properties() in System.Management.Automation.dll:token 0x6002cb4+0x30\r\n   at System.Management.Automation.SemanticVersion.op_Implicit(SemanticVersion semver) in System.Management.Automation.dll:token 0x6002f94+0x56\r\n   at System.Management.Automation.PSVersionInfo..cctor() in System.Management.Automation.dll:token 0x6002f73+0x12b\r\n   --- End of inner exception stack trace ---\r\n   at System.Management.Automation.PSVersionInfo.get_GitCommitId() in System.Management.Automation.dll:token 0x6002f79+0x0\r\n   at System.Management.Automation.Tracing.SysLogProvider.Log(PSEventId eventId, PSChannel channel, PSTask task, PSOpcode opcode, PSLevel level, PSKeyword keyword, Object[] args) in System.Management.Automation.dll:token 0x60060af+0x38\r\n   at System.Management.Automation.Tracing.PSSysLogProvider.WriteEvent(PSEventId id, PSChannel channel, PSOpcode opcode, PSLevel level, PSTask task, PSKeyword keyword, Object[] args) in System.Management.Automation.dll:token 0x600609e+0x1\r\n   at System.Management.Automation.Tracing.PSEtwLog.LogOperationalInformation(PSEventId id, PSOpcode opcode, PSTask task, PSKeyword keyword, Object[] args) in System.Management.Automation.dll:token 0x6006083+0x1\r\n   at System.Management.Automation.Tracing.PSEtwLog.LogConsoleStartup() in System.Management.Automation.dll:token 0x600607a+0x38\r\n   at Microsoft.PowerShell.UnmanagedPSEntry.Start(String[] args, Int32 argc) in Microsoft.PowerShell.ConsoleHost.dll:token 0x600020e+0x42\r\n   at Microsoft.PowerShell.ManagedPSEntry.Main(String[] args) in pwsh.dll:token 0x6000005+0x8\r\n```\r\n\r\nCurrently, there is not yet a RID declared for Alpine 3.14 in .NET.  The RID falls back to linux-musl-x64 instead.  I suspect that this _could_ be related to this behavior.  For example, this scenario does not repro on Alpine 3.13 which does have a Alpine RID defined in .NET: alpine.3.13-x64.  However, this scenario works fine in PowerShell 7.1.3 on Alpine 3.14.  So it's not impossible for things to work properly when there is no Alpine-specific RID defined; 7.1 can work but 7.2 cannot.\r\n\r\n### Expected behavior\r\n\r\n```console\r\nPowerShell runs without an exception.\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nUnhandled exception. System.TypeInitializationException: The type initializer for 'System.Management.Automation.PSVersionInfo' threw an exception.\r\n ---> System.TypeInitializationException: The type initializer for 'System.Management.Automation.PSObject' threw an exception.\r\n ---> System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.Management.Infrastructure, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n\r\nFile name: 'Microsoft.Management.Infrastructure, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'\r\n   --- End of inner exception stack trace ---\r\n   at System.Management.Automation.PSObject.get_Properties() in System.Management.Automation.dll:token 0x6002cb4+0x30\r\n   at System.Management.Automation.SemanticVersion.op_Implicit(SemanticVersion semver) in System.Management.Automation.dll:token 0x6002f94+0x56\r\n   at System.Management.Automation.PSVersionInfo..cctor() in System.Management.Automation.dll:token 0x6002f73+0x12b\r\n   --- End of inner exception stack trace ---\r\n   at System.Management.Automation.PSVersionInfo.get_GitCommitId() in System.Management.Automation.dll:token 0x6002f79+0x0\r\n   at System.Management.Automation.Tracing.SysLogProvider.Log(PSEventId eventId, PSChannel channel, PSTask task, PSOpcode opcode, PSLevel level, PSKeyword keyword, Object[] args) in System.Management.Automation.dll:token 0x60060af+0x38\r\n   at System.Management.Automation.Tracing.PSSysLogProvider.WriteEvent(PSEventId id, PSChannel channel, PSOpcode opcode, PSLevel level, PSTask task, PSKeyword keyword, Object[] args) in System.Management.Automation.dll:token 0x600609e+0x1\r\n   at System.Management.Automation.Tracing.PSEtwLog.LogOperationalInformation(PSEventId id, PSOpcode opcode, PSTask task, PSKeyword keyword, Object[] args) in System.Management.Automation.dll:token 0x6006083+0x1\r\n   at System.Management.Automation.Tracing.PSEtwLog.LogConsoleStartup() in System.Management.Automation.dll:token 0x600607a+0x38\r\n   at Microsoft.PowerShell.UnmanagedPSEntry.Start(String[] args, Int32 argc) in Microsoft.PowerShell.ConsoleHost.dll:token 0x600020e+0x42\r\n   at Microsoft.PowerShell.ManagedPSEntry.Main(String[] args) in pwsh.dll:token 0x6000005+0x8\r\n```\r\n```\r\n\r\n\r\n### Environment data\r\n\r\n```powershell\r\nI can't get the output because PowerShell doesn't launch.\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "richlander",
      "author_association": "NONE",
      "body": "Is there are mentions of any of the RIDs you mention in the `.deps.json` file for pwsh? If there isn't, I'm guessing the issue is elsewhere.\r\n\r\nThis is what I see:\r\n\r\n```bash\r\nrich@mazama:/mnt/c/Users/rich$ docker run --rm -it mcr.microsoft.com/dotnet/sdk:6.0-alpine-amd64 cat /usr/share/powershell/.store/powershell.linux.alpine/7.2.0-preview.6/powershell.linux.alpine/7.2.0-preview.6/tools/net6.0/any/pwsh.deps.json | grep alpine\r\nrich@mazama:/mnt/c/Users/rich$ docker run --rm -it mcr.microsoft.com/dotnet/sdk:6.0-alpine-amd64 cat /usr/share/powershell/.store/powershell.linux.alpine/7.2.0-preview.6/powershell.linux.alpine/7.2.0-preview.6/tools/net6.0/any/pwsh.deps.json | grep musl\r\n          \"runtimes/linux-musl-x64/native/libpsl-native.so\": {\r\n            \"rid\": \"linux-musl-x64\",\r\n```\r\n\r\nI'm assuming that the host understands that Alpine 3.14 satisfies `linux-musl-x64`. If that's not the case, then I stand corrected.",
      "created_at": "2021-07-01T22:46:08Z",
      "updated_at": "2021-07-01T22:47:18Z"
    }
  ],
  "created_at": "2021-07-01T20:45:10Z",
  "labels": [
    "Issue-Question",
    "Area-Maintainers-Build",
    "Needs-Triage"
  ],
  "number": 15710,
  "state": "open",
  "title": "PowerShell 7.2.0-preview.7 fails to start on Alpine 3.14",
  "updated_at": "2021-07-02T04:43:46Z"
}