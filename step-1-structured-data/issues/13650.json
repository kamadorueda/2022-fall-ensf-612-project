{
  "_url": "https://github.com/PowerShell/PowerShell/issues/13650",
  "author": "kyanha",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nSupports `Get-Item -stream` for NTFS alternate data streams on directories, not merely files.  Fixes #10570. Fixes #13656.\r\n\r\n<!-- Summarize your PR between here and the checklist. -->\r\n\r\n## PR Context\r\n\r\n#10570 has been open for almost a year.  NTFS supports what are called \"Alternate Data Streams\" on both files and directories (multiple named discrete blobs of data which are associated with a single directory entry).  PowerShell supports enumeration of these Alternate Data Streams, using the '-stream' parameter to 'Get-Item'.\r\n\r\nUnfortunately, the initial implementation of PowerShell only supported alternate data streams on files, not on directories.  This makes an entire facility of the OS's file system invisible, and if an administration team is relying on PowerShell it makes an attractive place for a red team to store data to exfiltrate.  (This is not an invitation to destroy the capability to store alternate data streams on directories, as they are useful for many purposes.  It is merely a rationale for making their existence visible through PowerShell.)\r\n\r\nTo create and see an alternate data stream on a directory, use cmd.exe to run the following commands:\r\n\r\n```\r\n> mkdir 10570demo\r\n> cd 1057demo\r\n> echo \"This is a file.\" > 10570demo.txt\r\n> echo \"This is an alternate data stream on the file.\" > 10570demo.txt:datastream\r\n> mkdir bug10570\r\n> echo \"This is an alternate data stream on the directory.\" > bug10570:datastream\r\n> dir /r\r\n```\r\nThe output is something like:\r\n```\r\nD:\\10570demo>dir /r\r\n Volume in drive D is DATA\r\n Volume Serial Number is 8FD3-BD69\r\n\r\n Directory of D:\\10570demo\r\n\r\n09/17/2020  02:59 PM    <DIR>          .\r\n09/17/2020  02:59 PM    <DIR>          ..\r\n09/17/2020  02:58 PM                20 10570demo.txt\r\n                                    50 10570demo.txt:datastream:$DATA\r\n09/17/2020  02:59 PM    <DIR>          bug10570\r\n                                    55 bug10570:datastream:$DATA\r\n               1 File(s)             20 bytes\r\n               3 Dir(s)  88,185,401,344 bytes free\r\n```\r\n\r\nTo see the failure of PowerShell being able to see the stream on the file, but not the directory:\r\n```\r\n> pwsh\r\nPS > Get-Item *\r\n\r\n\r\n    Directory: D:\\10570demo\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\nda---           9/17/2020  2:59 PM                bug10570\r\n-a---           9/17/2020  2:58 PM             20 10570demo.txt\r\n\r\nPS > Get-Item * -stream *\r\n\r\nPSPath        : Microsoft.PowerShell.Core\\FileSystem::D:\\10570demo\\10570demo.txt::$DATA\r\nPSParentPath  : Microsoft.PowerShell.Core\\FileSystem::D:\\10570demo\r\nPSChildName   : 10570demo.txt::$DATA\r\nPSDrive       : D\r\nPSProvider    : Microsoft.PowerShell.Core\\FileSystem\r\nPSIsContainer : False\r\nFileName      : D:\\10570demo\\10570demo.txt\r\nStream        : :$DATA\r\nLength        : 20\r\n\r\nPSPath        : Microsoft.PowerShell.Core\\FileSystem::D:\\10570demo\\10570demo.txt:datastream\r\nPSParentPath  : Microsoft.PowerShell.Core\\FileSystem::D:\\10570demo\r\nPSChildName   : 10570demo.txt:datastream\r\nPSDrive       : D\r\nPSProvider    : Microsoft.PowerShell.Core\\FileSystem\r\nPSIsContainer : False\r\nFileName      : D:\\10570demo\\10570demo.txt\r\nStream        : datastream\r\nLength        : 50\r\n\r\nPS > Get-Item bug10570 -stream *\r\nPS >\r\n```\r\n\r\n~~With this change, `Get-Item directory -stream *` will throw \"Get-Item: End of file reached.\" when there are no alternate data streams on a directory.~~ This has been fixed in the AlternateDataStreamUtilities.GetStream() method, by making ERROR_HANDLE_EOF returned from an enumeration of streams on a directory no longer throw an exception.\r\n\r\nThings not done:\r\n\r\n- Writing the tests revealed that Set-Content internally calls Clear-Content, which is hardcoded to not check for streams on directories.  This needs to be changed as part of another issue (filed as #13656).\r\n\r\n## PR Checklist\r\n\r\n- [X] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [X] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [X] I'm assuming bucket 3: current behavior of Get-Item -stream when confronted with a directory was to silently do nothing, and this PR continues to do so in the event a directory doesn't have any alternate data streams.  I would like someone to doublecheck, though.\r\n- **User-facing changes**\r\n    - [X] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [X] Issue filed: <!-- Number/link of that issue here --> MicrosoftDocs/Powershell-Docs#6648\r\n- **Testing - New and feature**\r\n    - [X] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [X] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n",
  "closed_at": "2020-10-17T03:19:32Z",
  "comments": [
    {
      "author": "microsoft-cla-retired[bot]",
      "author_association": "NONE",
      "body": "[![CLA assistant check](https://cla.opensource.microsoft.com/pull/badge/signed)](https://cla.opensource.microsoft.com/PowerShell/PowerShell?pullRequest=13650) <br/>All CLA requirements met.",
      "created_at": "2020-09-17T20:18:50Z",
      "updated_at": "2020-09-18T16:46:22Z"
    },
    {
      "author": "kyanha",
      "author_association": "CONTRIBUTOR",
      "body": "I would like to mention that none of the 24 issues of complexity that CodeFactor is complaining about are in the code that I modified. I hope that preexisting complexity will not prevent the acceptance of this patch?",
      "created_at": "2020-09-18T06:24:08Z",
      "updated_at": "2020-09-18T06:24:08Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@kyanha Please keep a commit history - don't rebase until maintainers ask you. Please address feedbacks adding new commits. At merge time maintainers will squash commits.",
      "created_at": "2020-09-18T17:14:54Z",
      "updated_at": "2020-09-18T17:14:54Z"
    },
    {
      "author": "kyanha",
      "author_association": "CONTRIBUTOR",
      "body": "Added a test for non-erroring globbing with wildcards.",
      "created_at": "2020-09-20T07:36:51Z",
      "updated_at": "2020-09-20T07:36:51Z"
    },
    {
      "author": "kyanha",
      "author_association": "CONTRIBUTOR",
      "body": "> I believe we should follow the rules for both files and directories:\r\n> \r\n>     * `Get-Item -Path * -Stream *` or `Get-Item -Path \"exact_name\" -Stream *` shouldn't write errors\r\n\r\nThis is the behavior that it follows right now.  That test was part of my prior push in the tests.\r\n\r\n>     * `Get-Item -Path * -Stream \"exact_name_without_wildcards\"` should write non-terminating errors if the stream is not found.\r\n> \r\n> Currently second rule does not work.\r\n\r\nI'm sorry, but I do not understand why you say that?  I just ran it against my PowerShell code directory. This continues the run after not finding the stream on the src/ or test/ or docs/ directories.  Is that not the definition of a non-terminating error?\r\n```ps\r\nPS D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell> get-item -Path * -Stream FTW\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\.devcontainer'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\.github'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\.poshchan'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\.vs'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\.vscode'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\.vsts-ci'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\assets'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\CHANGELOG'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\demos'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\docker'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\docs'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\Scripts'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\src'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\test'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\tools'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\.editorconfig'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\.gitattributes'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\.gitignore'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\.markdownlint.json'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\.spelling'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\ADOPTERS.md'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\build.psm1'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\CHANGELOG.md'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\CODE_OF_CONDUCT.md'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\codecov.yml'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\DotnetRuntimeMetadata.json'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\global.json'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\LICENSE.txt'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\nuget.config'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\pester-tests.xml'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\PowerShell.Common.props'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\PowerShell.sln'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\README.md'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\Settings.StyleCop'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\stylecop.json'.\r\nGet-Item: Could not open the alternate data stream 'FTW' of the file 'D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell\\ThirdPartyNotices.txt'.\r\nPS D:\\Users\\kyanha\\work\\github\\Powershell\\Powershell>\r\n```\r\nThe test I wrote for directories (Get-Item.Tests.ps1:140) precisely mirrors the test that had already existed for files (Get-Item.Tests.ps1:131).  If there's a deficiency in the test I copied from, then another issue needs to be opened to revisit all of the tests in that file to verify terminating versus non-terminating errors.  I'm not certain, but I think that's out of scope of this issue and PR.\r\n\r\n> A for tests, we could combine tests with `-TestCases` for files and directories because they have the same code.\r\n\r\nI need a lot more information on the testing system, and it's not available in Get-Help It/Get-Help Should.  Is there documentation anywhere that you can point me to?  (Is there external documentation that should be pointed to in the PowerShell contribution documentation?)\r\n\r\nThe issues about the test framework that I am ignorant of and need to educate myself on are:\r\n\r\n1. I'm not sure how to write a test for a non-terminating error.  All the other examples I found for errors that are normally non-terminating used `-ErrorAction Stop` to cause them to throw. (see Get-Item.Tests.ps1:131 for the file case that was already there when I started, and Get-Item.Tests.ps1:140 for the directory case that I copied the form of line 131 for).  Is there an example you can find for non-terminating errors that I can write it around to test that it's non-terminating?  (It actually is a non-terminating error, exactly the same as for files, but the preexisting test for the file error turns it into a terminating error for the test.  I copied that style.)\r\n\r\n2. I don't understand your reference to `-TestCases` as a separate command or option, and I need documentation to understand.\r\n  - Tests for specific stream names against files versus directories can be consolidated, as there is no difference in behavior.\r\n  - Tests for wildcard stream names against files versus directories cannot be consolidated, if the wildcard is '*', because a file will always have at least one stream of type $DATA (the unnamed one), while directories by default have no data streams (and can never have an unnamed one).  As a result, the output will always differ between a file and a directory, and the tests need to be different as a result.",
      "created_at": "2020-09-20T23:34:55Z",
      "updated_at": "2020-09-20T23:34:55Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I do not understand why you say that?\r\n\r\nSorry, I skipped one test.\r\n\r\n> TestCases\r\n\r\nI can find many examples in our tests. Search \"-TestCases\".\r\n\r\n> I'm not sure how to write a test for a non-terminating error.\r\n\r\nYou use right pattern in new tests (`-ErrorAction Stop`)\r\n\r\n",
      "created_at": "2020-09-21T18:00:51Z",
      "updated_at": "2020-09-21T18:00:51Z"
    },
    {
      "author": "kyanha",
      "author_association": "CONTRIBUTOR",
      "body": "How can the CI system be forced to rebuild? I don't want to push a new commit that does nothing.  (The MacOS tests failed apparently because of a WebListener, and none of the code in this patch touches a WebListener so it's likely a temporary environmental thing.)",
      "created_at": "2020-09-28T09:08:43Z",
      "updated_at": "2020-09-28T09:08:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I restarted CI MacOS.",
      "created_at": "2020-09-29T05:22:58Z",
      "updated_at": "2020-09-29T05:22:58Z"
    },
    {
      "author": "kyanha",
      "author_association": "CONTRIBUTOR",
      "body": "I now have a fully-functioning NTFS datastreams-on-directories implementation (get-item, remove-item, get-content, set-content, clear-content) locally.  This would also close #13656.  However, it will merge-conflict with master until this branch is landed.  The rule is that PRs must target master, so should I just sit on it, or should I commit it to this PR branch?",
      "created_at": "2020-09-29T12:35:52Z",
      "updated_at": "2020-09-29T12:36:11Z"
    },
    {
      "author": "kyanha",
      "author_association": "CONTRIBUTOR",
      "body": "> \r\n> \r\n> I restarted CI MacOS.\r\n\r\nThanks!",
      "created_at": "2020-09-29T12:40:13Z",
      "updated_at": "2020-09-29T12:40:13Z"
    },
    {
      "author": "kyanha",
      "author_association": "CONTRIBUTOR",
      "body": "I pushed the rest of the code to fix #13656 as well, to force the CI testing to restart. (I still can't figure out a way to request a particular build be retested, so...)",
      "created_at": "2020-09-30T23:14:57Z",
      "updated_at": "2020-09-30T23:14:57Z"
    },
    {
      "author": "kyanha",
      "author_association": "CONTRIBUTOR",
      "body": "All but 1 CI check clear, and the one that isn't is not the fault of this PR.  Ready for review.",
      "created_at": "2020-10-01T04:12:02Z",
      "updated_at": "2020-10-01T04:12:02Z"
    },
    {
      "author": "kyanha",
      "author_association": "CONTRIBUTOR",
      "body": "I'll get to the recommendations and commit them in a bit, but I want to point out that there's a blocker related to filesystems that don't support alternate data streams, which tests can't be written for right now. When the NotSupportedException is thrown, it becomes a terminating error. Since the -Path parameter is an array, this is not the appropriate action (i.e., a path on a non-supporting filesystem before a path on a supporting filesystem in the array will prevent the operation continuing to the supporting filesystem and working there). I need to change the handling to make that error non-terminating before this can be committed.",
      "created_at": "2020-10-08T19:22:02Z",
      "updated_at": "2020-10-08T20:12:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@kyanha \r\nOriginal code is:\r\n```c#\r\nif (handle.IsInvalid) throw new Win32Exception();\r\n```\r\nDo you say only about new NotSupportedException or about Win32Exception too?",
      "created_at": "2020-10-09T04:15:03Z",
      "updated_at": "2020-10-09T04:15:03Z"
    },
    {
      "author": "kyanha",
      "author_association": "CONTRIBUTOR",
      "body": "> @kyanha\r\n> Original code is:\r\n> \r\n> ```cs\r\n> if (handle.IsInvalid) throw new Win32Exception();\r\n> ```\r\n> \r\n> Do you say only about new NotSupportedException or about Win32Exception too?\r\n\r\nWhen GetLastWin32Error() returns ERROR_HANDLE_EOF, it returns the existing list (because it literally means that there's nothing more to be added to the list). For directories, this means that the list can be empty without an error condition. This case is handled correctly.\r\n\r\nWhen GetLastWin33Error() returns ERROR_INVALID_PARAMETER, AlternateDataStreamUtilities throws a NotSupportedException. This is uncaught above, which means it gets caught by the general exception handler which turns it into a terminating error. (This is the situation which caused me to block committing this PR.)\r\n\r\nIf GetLastWin32Error() returns anything else (which is possible, since filesystems can return anything they want without the system filtering them), there's nothing we can do in AlternateDataStreamUtilities -- we have to throw Win32Exception because the driver isn't behaving according to the protocol we understand, so we have no means of interpreting it into a user-friendly error message. This is also uncaught above, and also turns into a terminating error.\r\n\r\nI had been thinking of leaving the Win32Exception as terminating, but had not yet made up my mind -- but I think the impact analyses between this and the NotSupportedException case are the same, and suggest that both should be made nonterminating. I mean, the same issue of -Path being an array applies, and it would definitely be a per-filesystem behavior that might not apply to later entries in the array. The same logic which could apply to NotSupportedException could easily also apply to Win32Exception. So, I'll do that, unless you can suggest a reason not to?\r\n\r\n(Also, regardless of whether it's an edge-case, I really think we should try to find a way to code some tests on a filesystem that doesn't support alternate data streams. ReFS doesn't support them, and many administrators are going to run scripts on systems with both NTFS and ReFS. Because stream-unsupported errors on one filesystem must not terminate processing of a -Path array, I think it's important enough to put into CI regression tests. I only caught it when I was doing manual tests locally, and it would be really easy to miss otherwise. I just have no idea who to ask how to do so; can you suggest somebody?)",
      "created_at": "2020-10-09T08:49:32Z",
      "updated_at": "2020-10-10T06:28:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "We have not complains about \"not support\" scenario. So no need to do anything in the PR.\r\nLet's address only directory scenario related to the PR and ignore other scenarios.\r\nI mean to process only ERROR_HANDLE_EOF and throw else (new Win32Exception()).",
      "created_at": "2020-10-09T10:21:59Z",
      "updated_at": "2020-10-09T10:21:59Z"
    },
    {
      "author": "kyanha",
      "author_association": "CONTRIBUTOR",
      "body": "> We have not complains about \"not support\" scenario. So no need to do anything in the PR.\r\n> Let's address only directory scenario related to the PR and ignore other scenarios.\r\n> I mean to process only ERROR_HANDLE_EOF and throw else (new Win32Exception()).\r\n\r\nThis patch currently processes ERROR_HANDLE_EOF correctly.  \r\n\r\nI've filed issue #13766 about the \"terminating error should be non-terminating error\" problem.\r\n\r\nRereleasing for review and potential merge.",
      "created_at": "2020-10-10T06:24:15Z",
      "updated_at": "2020-10-10T06:24:15Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@kyanha The PR contains too many commits and a lot of comments. I suggest to close the PR and open new PR with _one_ initial commit. This will simplify follow reviews from MSFT team. Thanks!",
      "created_at": "2020-10-12T05:28:06Z",
      "updated_at": "2020-10-24T17:40:07Z"
    },
    {
      "author": "kyanha",
      "author_association": "CONTRIBUTOR",
      "body": "Superseded by #13795, closing.",
      "created_at": "2020-10-17T03:19:31Z",
      "updated_at": "2020-10-17T03:19:31Z"
    },
    {
      "author": "kyanha",
      "author_association": "CONTRIBUTOR",
      "body": "I've spent a while thinking about this, @iSazonov, and I feel I have to call out your poor behavior.\r\n\r\nFrom https://github.com/PowerShell/PowerShell/pull/13650#issuecomment-706871759:\r\n> @kyanha The PR contains too many commits and a lot of comments. I suggest to close the PR and one new PR with _one_ initial commit. This will simplify follow reviews from MSFT team. Thanks!\r\n\r\nHuh.  Would you look at that.  This directly contradicts your earlier statement that you posted after I force-pushed squashed updates to the branch in accordance with the PR guidance in the project introduction:\r\n\r\nFrom https://github.com/PowerShell/PowerShell/pull/13650#issuecomment-694985358:\r\n> @kyanha Please keep a commit history - don't rebase until maintainers ask you. Please address feedbacks adding new commits. At merge time maintainers will squash commits.\r\n\r\nYou said that they'd squash them.  Now I'm stuck with a repository and history that's polluted by two separate branches, adding to the administrative overhead.\r\n\r\nWhy did you change your guidance? Why did you demand the commit history? When did you realize that your demand was going to lead to another PR? What made you feel this was acceptable?\r\n",
      "created_at": "2020-10-23T19:10:37Z",
      "updated_at": "2020-10-23T19:10:37Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@kyanha \r\nAfter a contributor pulled a PR we ask to do not force-push and keep commit history because it simplify the code review - sometimes it is easy to review commit by commit or review only last change. \r\n_Maintainers can ask to rebase_ to resolve some problems, to get latest codes and tests, CI changes and so on.\r\nIn context the PR:\r\n- we have many conversations - it slow down GitHub and it is unlikely that anybody will read all the comments - it is more easy to look and review code on clean page.\r\n- the PR contains many commits. MSFT team uses a commercial tool for code review, the tool has limitation _30 commits_\r\n\r\nAs result I asked you open new PR.\r\nI'm sorry that this forces you to spend more time, but it is inevitable.\r\nThanks for understanding!",
      "created_at": "2020-10-24T17:47:27Z",
      "updated_at": "2020-10-24T17:48:01Z"
    }
  ],
  "created_at": "2020-09-17T20:18:35Z",
  "number": 13650,
  "state": "closed",
  "title": "`Get-Item directory -stream *` now works #10570",
  "updated_at": "2020-12-03T20:17:46Z"
}