{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15317",
  "author": "chelnak",
  "body": "## Summary of the new feature/enhancement\r\n\r\n<!-- \r\nA clear and concise description of what the problem is that the new feature would solve.\r\nTry formulating it in user story style (if applicable):\r\n'As a user I want X so that Y.' with X being the being the action and Y being the value of the action.\r\n-->\r\n\r\nAs a user I would like `New-Guid` to accept an optional custom byte array at creation time, allowing me to control the bytes that are used to create the Guid object.\r\n\r\n## Proposed technical implementation details (optional)\r\n\r\n<!-- \r\nA clear and concise description of what you want to happen.\r\nConsider providing an example PowerShell experience with expected result.\r\n-->\r\n\r\nFor example something like...\r\n\r\n``` PowerShell\r\n\r\n$Bytes = [System.Byte[]]::new(16)\r\n$RNG = [System.Security.Cryptography.RNGCryptoServiceProvider]::new()\r\n$RNG.GetBytes($Bytes)\r\n\r\n$VersionByteIndex = [System.BitConverter]::IsLittleEndian ? 7 : 6\r\n$Bytes[$VersionByteIndex] = $Bytes[$VersionByteIndex] -band [char]0x0F -bxor [char]0x40\r\n$Bytes[9] = $Bytes[9] -band 0x3F -bxor 0x80\r\n\r\nNew-Guid -Bytes $Bytes\r\n\r\n```\r\n\r\nThe underlying c# implementation would have a code path that calls `new Guid(Byte[])`.\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.guid.-ctor?view=net-5.0#System_Guid__ctor_System_Byte___\r\n\r\nAlso if you want to ensure that the result is v4 RFC 4122 compliant then some sort of validation would be needed.\r\n",
  "closed_at": "2021-04-30T05:28:47Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Note that `New-Guid` is just a wrapper around `Guid.NewGuid()`, i.e. it generates a _new_ GUID for you.\r\n\r\nBy contrast, the [constructors](https://docs.microsoft.com/en-us/dotnet/api/system.guid.-ctor) of the `Guid` type essentially _convert preexisting data_ to a `Guid` instance.\r\n\r\nIn other words: surfacing the constructor functionality wouldn't be an extension to the cmdlet's current mandate, but would mean adding entirely new functionality to it, and to me the question is:\r\n\r\nIs this a common enough use case to warrant extending `New-Guid`, given that calling the constructors directly is already an option?\r\n\r\n```powershell\r\n# Using an empty byte array for simplicity. Note that System.Guid also doesn't provide validation.\r\n$bytes = [byte[]]::new(16)\r\n[Guid]::new($bytes)\r\n```\r\n\r\nAlternatively, using the [`New-Object`](https://docs.microsoft.com/powershell/module/microsoft.powershell.utility/new-object) cmdlet to call constructors (passing an _array_ as the only constructor argument makes this awkward):\r\n\r\n```powershell\r\n$bytes = New-Object byte[] 16\r\nNew-Object Guid (, $bytes)\r\n```\r\n\r\n\r\n",
      "created_at": "2021-04-28T13:04:35Z",
      "updated_at": "2021-04-28T14:13:11Z"
    },
    {
      "author": "chelnak",
      "author_association": "NONE",
      "body": "Nice, thank you for the clear comment.\n\nAgree about calling the constructor directly and is what I do in these edge cases.",
      "created_at": "2021-04-28T16:06:04Z",
      "updated_at": "2021-04-28T16:06:04Z"
    }
  ],
  "created_at": "2021-04-28T09:07:33Z",
  "labels": [
    "Issue-Enhancement",
    "Resolution-Answered",
    "Needs-Triage"
  ],
  "number": 15317,
  "state": "closed",
  "title": "Allow New-Guid to accept optional byte array",
  "updated_at": "2021-04-30T05:28:47Z"
}