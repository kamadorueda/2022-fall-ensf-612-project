{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9435",
  "author": "vexx32",
  "body": "# Support Question\r\n\r\nI have a somewhat unusual problem. In [PSKoans](https://github.com/vexx32/pskoans), I need to define a type such that no matter what you try to compare it to, the result is always `$false`. This is needed to be a blank placeholder that _always_ fails Pester tests with comparisons against various items.\r\n\r\nInitially, my attempt looked like this:\r\n\r\n```powershell\r\nclass Blank {\r\n    [string] ToString() {\r\n        return $null\r\n    }\r\n\r\n    static [bool] op_Equality([Blank] $self, [object] $other) {\r\n        return $false\r\n    }\r\n\r\n    static [bool] op_Inequality([Blank] $self, [object] $other) {\r\n        return $true\r\n    }\r\n\r\n    static [bool] op_Explicit([Blank] $Instance) {\r\n        return $false\r\n    }\r\n\r\n    static [bool] op_Implicit([Blank] $Instance) {\r\n        return $false\r\n    }\r\n}\r\n```\r\n\r\nThis works for most things, but has a pretty glaring issue. The comparison `$true -eq [Blank]::new()` returns `$true`. As a result, a Pester assertion such as `[Blank]::new() | Should -BeTrue` _passes_, when it shouldn't. \r\n\r\nA quick second attempt using a C# struct inlined with Add-Type looks like this:\r\n\r\n```powershell\r\nAdd-Type -TypeDefinition @\"\r\npublic struct Blank\r\n{\r\n    public static implicit operator bool(Blank item) => false;\r\n\r\n    public static bool operator ==(Blank item, object other) => false;\r\n\r\n    public static bool operator !=(Blank item, object other) => false;\r\n\r\n    public override bool Equals(object o) => false;\r\n\r\n    public override int GetHashCode()\r\n    {\r\n        return 0;\r\n    }\r\n}\r\n\"@\r\n```\r\n\r\nThis exhibits the same issue.\r\n\r\nIs there a way that I can define such a type in PowerShell or in C# that will function as desired within PowerShell?",
  "closed_at": "2019-04-23T23:35:11Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "With `$true` as the _LHS_ PowerShell seemingly never consults the methods / interfaces of the RHS and considers _any_ (non-primitive, non-collection) type instance to be implicitly `$true`, using its built-in to-Boolean conversion logic.\r\n\r\n```powershell\r\n$true -eq [Blank]::new()\r\n```\r\n\r\nis the same as:\r\n\r\n```powershell\r\n$true -eq [bool] [Blank]::new()\r\n```\r\n\r\nor simply:\r\n\r\n```powershell\r\n[bool] [Blank]::new()  # always $true for any non-primitive, non-collection type instance\r\n```\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/0bd93777fceab06b0b3d949a5d47cd39cf25d65d/src/System.Management.Automation/engine/LanguagePrimitives.cs#L1638-L1644 seems to confirm that.\r\n\r\nIn short: with a Boolean as the _LHS_, it is only ever PowerShell's built-in to-Boolean conversions that apply.\r\n\r\nWith the Boolean on the _RHS_, your `[Blank]` type doesn't need to do any extra work to always compare as `$false`:\r\n\r\n```powershell\r\nclass Blank { }\r\n[Blank]::new() -eq $true # $false\r\n[Blank]::new() -eq $false # $false\r\n```\r\n\r\nAside from that, it seems that even with the operands reversed your static `op_Equality()` method wouldn't be called by `-eq`; you'd need an instance method `[bool] Equals([object] $o) { return $false }`, which would then be called by both `-eq` and `-ne`.\r\n\r\n\r\n",
      "created_at": "2019-04-22T22:54:42Z",
      "updated_at": "2019-04-22T22:54:42Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I've been talking with @JamesWTruher in the PS Slack space on some possibilities here, but it looks like as long as the LHS is a boolean, it's impossible to override the equality checks in a way that PS will recognise.\r\n\r\nI'm working around this by adjusting the assertion, but I appreciate nonetheless the point of the `Equals()` instance method as it does allow me to have `$a -eq $a` return `$false` which I'm sure I'll run into needing sooner or later!\r\n\r\nClosing this as a resounding \"no\" for wherever booleans are concerned, but in all other cases it looks like I can more or less make it happen. \ud83d\ude04 ",
      "created_at": "2019-04-23T23:35:11Z",
      "updated_at": "2019-04-23T23:35:11Z"
    }
  ],
  "created_at": "2019-04-22T05:19:32Z",
  "labels": [
    "Issue-Question"
  ],
  "number": 9435,
  "state": "closed",
  "title": "Defining A Reliably Unequal Type?",
  "updated_at": "2019-04-23T23:35:12Z"
}