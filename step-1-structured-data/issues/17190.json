{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17190",
  "author": "mklement0",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nRelated:\r\n* #15204\r\n\r\n`[Tomlyn.Model.TomlTable]`, from the [Tomlyn package](https://github.com/toml-lang/toml),  is an example of a type that implements ``IDictionary`2``, but not also its non-generic counterpart, `IDictionary`.\r\n\r\nSeemingly, this prevents use of dot notation (property-access syntax via the member-access operator) to access the dictionary's entries.\r\n\r\n```powershell\r\n# Determine the package's local installation location.\r\n# If it isn't installed, install it first, in the current user's scope.\r\nwhile (-not ($installDir = (Get-Package -ErrorAction Ignore -ProviderName NuGet Tomlyn).Source)) {\r\n  $null = Install-Package -Scope CurrentUser -ErrorAction Stop -ProviderName NuGet Tomlyn\r\n}\r\n\r\n# Load the package's assembly into the session.\r\nAdd-Type -ErrorAction Stop -LiteralPath (Join-Path $installDir '../lib/netstandard2.0/Tomlyn.dll')\r\n\r\n# Define a sample TOML string to parse.\r\n$tomlStr = @'\r\nfoo = \"bar\"\r\n'@\r\n\r\n# Parse the TOML string into an object mod)el (nested dictionaries).\r\n$tomlTable = [Tomlyn.Toml]::ToModel($tomlStr)\r\n\r\n# Output the global section's 'foo' value,\r\n# first via an indexer, then via dot notation.\r\n$tomlTable['foo'], $tomlTable.foo | ForEach-Object { \"[$_]\" }\r\n```\r\n\r\n### Expected behavior\r\n\r\n```console\r\n[bar]\r\n[bar]\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\n[bar]\r\n[]\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nPowerShell Core 7.3.0-preview.3\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems we already have an issue about generic enumerators. (Or was an discussion in an PR?)",
      "created_at": "2022-04-27T05:19:11Z",
      "updated_at": "2022-04-27T05:19:11Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov, the OP links to https://github.com/PowerShell/PowerShell/issues/15204 - or are you thinking of yet another issue? Note that while said issue may have the same root cause (which is why I liked to it), the issue at hand isn't about enumeration.\r\n\r\n",
      "created_at": "2022-04-27T06:30:56Z",
      "updated_at": "2022-04-27T06:30:56Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 Yes, it seems #15204 was in my mind but I mean rather #12412. I would like to see all aspects of support for these generics.",
      "created_at": "2022-04-27T12:37:57Z",
      "updated_at": "2022-04-27T12:37:57Z"
    }
  ],
  "created_at": "2022-04-25T02:06:08Z",
  "number": 17190,
  "state": "open",
  "title": "A dictionary type that only implements the generic IDictionary interface doesn't support dot notation (property-access syntax)",
  "updated_at": "2022-06-09T20:56:21Z"
}