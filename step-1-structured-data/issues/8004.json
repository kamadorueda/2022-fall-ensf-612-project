{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8004",
  "author": "kai-h",
  "body": "Further to issue https://github.com/PowerShell/PowerShell/issues/5561\r\n\r\nCan we please have PowerShell work out of the box with MacPorts' installed OpenSSL libraries.\r\n\r\nPowerShell is hard coded to specifically look in /usr/local/opt/openssl/lib for the OpenSSL Libraries. This is where Homebrew installs them.\r\n\r\nMacPorts installs the libraries in /opt/local/lib instead.\r\n\r\nIf I symlink the Homebrew location to the MacPorts location, then PowerShell works but it would be very nice to not have this extra step when installing PowerShell.\r\n````\r\nsudo ln -s /opt/local/lib /usr/local/opt/openssl/lib\r\n````\r\n\r\n_As an aside, many systems administrators consider Homebrew to be a significant security risk as it changes the ownership of key system folders from **root** to the currently logged in user. It does not work in multi-user environments and it goes against the Unix philosophy of making 3rd party software have a minimal impact on a running system and be self-contained._",
  "closed_at": "2018-10-30T17:49:46Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Please look the comment https://github.com/PowerShell/PowerShell/issues/5561#issuecomment-429142776",
      "created_at": "2018-10-12T11:34:02Z",
      "updated_at": "2018-10-12T11:34:02Z"
    },
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "Based on my testing, PowerShell is still hard-coded to look in /usr/local/opt/openssl/lib for OpenSSL libraries. It is not also looking in /opt/local/lib as well.\r\nFor PowerShell to work with OpenSSL from MacPorts, you must symlink the libraries like so:\r\n````\r\nsudo ln -s /opt/local/lib /usr/local/opt/openssl/lib\r\n````\r\nIt would be very good if PowerShell could look in /opt/local/lib for OpenSSL libraries, particularly as per \r\nhttps://github.com/PowerShell/PowerShell/issues/5561#issuecomment-429142776 the latest 6.1.0 version was not working with Homebrew on macOS Mojave, whereas it is working with MacPorts, iff you symlink the libraries to where Homebrew puts them.",
      "created_at": "2018-10-14T23:10:44Z",
      "updated_at": "2018-10-14T23:12:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @SteveL-MSFT ",
      "created_at": "2018-10-15T04:47:28Z",
      "updated_at": "2018-10-15T04:47:28Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@TravisEz13 can you look into this?",
      "created_at": "2018-10-15T16:56:15Z",
      "updated_at": "2018-10-15T16:56:15Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@kai-h Can we get repro steps of the problem you are having?  \r\n\r\nI only see a similar issue to what your are talking about in the code in `libmi` but I hit a different issue before I ever get to that code: https://github.com/PowerShell/MMI/issues/33   ",
      "created_at": "2018-10-17T17:24:22Z",
      "updated_at": "2018-10-17T17:24:22Z"
    },
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "@TravisEz13 PowerShell remoting does not work out of the box with a clean install of PowerShell. It relies on OpenSSL libraries to be installed as well.\r\n\r\nWithout any 3rd party OpenSSL libraries installed, this is what you get:\r\n```` PowerShell\r\n[kai@blackmac ~]$ pwsh\r\nPowerShell 6.1.0\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\n\r\nhttps://aka.ms/pscore6-docs\r\nType 'help' to get help.\r\n\r\nPS /Users/kai> $UserCredential = Get-Credential\r\n\r\nPowerShell credential request\r\nEnter your credentials.\r\nUser: admin@example.onmicrosoft.com\r\nPassword for user admin@example.onmicrosoft.com: **********\r\n\r\nPS /Users/kai> $Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $UserCredential -Authentication Basic -AllowRedirection\r\nNew-PSSession : This parameter set requires WSMan, and no supported WSMan client library was found. WSMan is either not installed or unavailable for this system.\r\nAt line:1 char:12\r\n+ $Session = New-PSSession -ConfigurationName Microsoft.Exchange -Conne ...\r\n+            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : ResourceUnavailable: (:) [New-PSSession], PSRemotingTransportException\r\n+ FullyQualifiedErrorId : System.Management.Automation.Remoting.PSRemotingDataStructureException,Microsoft.PowerShell.Commands.NewPSSessionCommand\r\n \r\nPS /Users/kai> \r\n````\r\nThe fix for this is to install Homebrew which is a package management system and software ports library for macOS. Homebrew installs the OpenSSL libraries in /usr/local/opt/openssl/lib and if PowerShell can find these libraries installed in this location, PowerShell remoting should work. In particular, I believe it's looking for libssl.dylib\r\n\r\nMany systems administrators, myself included, believe that Homebrew represents an unacceptable security risk. It changes ownership of key unix directories to that of the currently logged-in user. It explicitly does not support keeping these directories owned by root:wheel and running as root via sudo. Homebrew will also not work with multiple users on the one machine.\r\n\r\nMacPorts is an alternative to Homebrew. It follows more closely to traditional Unix and Linux package management systems like apt and the FreeBSD ports system. It does not change permissions on any system folders and works in a multi-user environment.\r\n\r\nMacPorts installs the OpenSSL libraries in /opt/local/lib\r\nAfter installing the MacPorts installer .pkg, you can install OpenSSL via\r\n````\r\nsudo port install openssl\r\n````\r\n\r\nIf I symlink this location to the Homebrew location, then PowerShell can locate the OpenSSL libraries and remote sessions can be established.\r\n\r\ne.g.:\r\n```` PowerShell\r\n\r\n[kai@blackmac ~]$ sudo ln -s /opt/local/lib /usr/local/opt/openssl/lib\r\nPassword:\r\n[kai@blackmac ~]$ pwsh\r\nPowerShell 6.1.0\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\n\r\nhttps://aka.ms/pscore6-docs\r\nType 'help' to get help.\r\n\r\nPS /Users/kai> $UserCredential = Get-Credential\r\n\r\nPowerShell credential request\r\nEnter your credentials.\r\nUser: admin@example.onmicrosoft.com\r\nPassword for user admin@example.onmicrosoft.com: ***********\r\n\r\nPS /Users/kai> $Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $UserCredential -Authentication Basic -AllowRedirection\r\nPS /Users/kai> Import-PSSession $Session\r\nWARNING: The names of some imported commands from the module 'tmp_hsj4sv05.rbt' include unapproved verbs that might make them less discoverable. To find the commands with unapproved verbs, run the Import-Module command again with the Verbose parameter. For a list of approved verbs, type Get-Verb.                                                                                                              \r\n\r\nModuleType Version    Name                                ExportedCommands\r\n---------- -------    ----                                ----------------                                                       \r\nScript     1.0        tmp_hsj4sv05.rbt                    {Add-AvailabilityAddressSpace, Add-DistributionGroupMember, Add-Mai...\r\n\r\n\r\nPS /Users/kai> \r\n````",
      "created_at": "2018-10-17T21:49:47Z",
      "updated_at": "2018-10-17T21:49:47Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Notes to self:\r\nThe error about requiring WSMan is coming from here:  https://github.com/PowerShell/PowerShell/blob/64c1ca8926b15c476f6bb14814c55b25b844fc6e/src/System.Management.Automation/engine/remoting/fanin/WSManTransportManager.cs#L2622\r\n\r\nWhich loads\r\n```\r\n/usr/local/microsoft/powershell/6/libpsrpclient.dylib:\r\n\t@rpath/libpsrpclient.dylib (compatibility version 0.0.0, current version 0.0.0)\r\n\t@executable_path/libmi.dylib (compatibility version 0.0.0, current version 0.0.0)\r\n\t/usr/lib/libiconv.2.dylib (compatibility version 7.0.0, current version 7.0.0)\r\n\t/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1238.60.2)\r\n```\r\n\r\n@kai-h  Do you have any problems with Invoke-WebRequest to HTTPS sites on machines configured how you want them to be configured?\r\n\r\nlibmi looks like this:\r\n```\r\n\t/usr/local/opt/openssl/lib/libssl.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0)\r\n```\r\n\r\nvs System.Security.Cryptography.Native.OpenSsl.dylib (used by the web cmdlets):\r\n```\r\n\t@rpath/libssl.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0)\r\n```",
      "created_at": "2018-10-18T00:45:50Z",
      "updated_at": "2018-10-18T00:45:50Z"
    },
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "@TravisEz13 - the main reason I use PowerShell is to admin Office 365 from a Mac.\r\nAs it stands, PowerShell, when executing remote sessions, relies on the OpenSSL libraries, and requires this dependancy to be installed separately.\r\n\r\nIn my experience, you can not get remoting to work without OpenSSL installed, and out of the box, PowerShell expects it to be in /usr/local/opt/openssl/lib\r\n\r\nOn my system, without Homebrew installed, /usr/local/opt doesn't exist. This directory, and everything below it, is installed by Homebrew - including the OpenSSL libraries.\r\n\r\nIf I instead use MacPorts to install OpenSSL, the libraries are installed in /opt/local/lib\r\n\r\nI then need to symlink /opt/local/lib to /usr/local/opt/openssl/lib - then PowerShell can find the libraries where it expects to see them, and a remote session to Office 365 works.\r\n\r\nmacOS also ships with a couple of different versions of libssl.dylib (and libcrypto) in /usr/lib\r\n````\r\nls -l /usr/lib/libssl*\r\n/usr/lib/libssl.0.9.7.dylib\r\n/usr/lib/libssl.0.9.8.dylib\r\n/usr/lib/libssl.35.dylib\r\n/usr/lib/libssl.43.dylib\r\n/usr/lib/libssl.44.dylib\r\n/usr/lib/libssl.dylib -> libssl.35.dylib\r\n````\r\n\r\notool shows me that libpsrpclient.dylib uses the following libraries:\r\n````\r\notool -L /usr/local/microsoft/powershell/6/libpsrpclient.dylib \r\n/usr/local/microsoft/powershell/6/libpsrpclient.dylib:\r\n\t@rpath/libpsrpclient.dylib (compatibility version 0.0.0, current version 0.0.0)\r\n\t@executable_path/libmi.dylib (compatibility version 0.0.0, current version 0.0.0)\r\n\t/usr/lib/libiconv.2.dylib (compatibility version 7.0.0, current version 7.0.0)\r\n\t/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1238.60.2)\r\n````\r\nthen, looking at libmi.dylib\r\n````\r\notool -L /usr/local/microsoft/powershell/6/libmi.dylib\r\n/usr/local/microsoft/powershell/6/libmi.dylib:\r\n\t@rpath/libmi.dylib (compatibility version 0.0.0, current version 0.0.0)\r\n\t/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1238.60.2)\r\n\t/usr/lib/libpam.2.dylib (compatibility version 3.0.0, current version 3.0.0)\r\n\t/usr/local/opt/openssl/lib/libssl.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0)\r\n\t/usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0)\r\n\t/usr/lib/libz.1.dylib (compatibility version 1.0.0, current version 1.2.8)\r\n````\r\n\r\nmacOS ships with OpenSSL libraries, and in my extremely limited testing, they seem to work with PowerShell. These libraries are installed in /usr/ib\r\nThe difference is the name of the libraries - PowerShell seems like it's specifically looking for libssl.1.0.0.dylib and libcrypto.1.0.0.dylib\r\nThese exact filenames do not match anything in /usr/lib - instead there libraries with different version numbers and then a symlink of a lib with no version number - e.g.\r\n````\r\nls -al /usr/lib/libcrypto.dylib /usr/lib/libssl.dylib \r\n/usr/lib/libcrypto.dylib -> libcrypto.35.dylib\r\n/usr/lib/libssl.dylib -> libssl.35.dylib\r\n````\r\nIf I instead symlink these libraries into where PowerShell expects to see them, then remoting also seems to work - again, this is limited testing, I established a session to Office 365 and ran Get-Mailbox user@example.com just to verify I could send and receive some useful information.\r\n````\r\n[kai@blackmac /usr/local/opt/openssl/lib]$ pwd\r\n/usr/local/opt/openssl/lib\r\n[kai@blackmac /usr/local/opt/openssl/lib]$ ls -l\r\nlibcrypto.1.0.0.dylib -> /usr/lib/libcrypto.dylib\r\nlibssl.1.0.0.dylib -> /usr/lib/libssl.dylib\r\n````",
      "created_at": "2018-10-22T10:24:52Z",
      "updated_at": "2018-10-22T10:24:52Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "@kai-h Thanks, but to make sure we can create the fix correctly, I REALLY need the following information.  \r\nDo you have any problems with `Invoke-WebRequest` to HTTPS sites on machines configured how you want them to be configured?",
      "created_at": "2018-10-29T21:42:26Z",
      "updated_at": "2018-10-29T21:42:26Z"
    },
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "I'm sorry, I don't know what ````Invoke-WebRequest```` is, or what it does.\r\nIf I check the docs for it, there's a lot of information - I'm not sure what's applicable to this particular situation.\r\nhttps://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-webrequest?view=powershell-6\r\nIf I were to run it as per one of the examples, would that give you the information we need?\r\ne.g.\r\n**Example 2: Get links from a web page**\r\n````PowerShell\r\n(Invoke-WebRequest -Uri \"https://aka.ms/pscore6-docs\").Links.Href\r\n````",
      "created_at": "2018-10-29T22:54:20Z",
      "updated_at": "2018-10-29T22:54:20Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "If you run that and it works, it would be a good indication that the library it uses has no problem loading OpenSSL.  Make sure that the machine does **NOT** have OpenSSL installed via HomeBrew, any extra symbolic links or anything you don't want to have on the machine.\r\n\r\nI get these results when I run that command\r\n\r\n```\r\n#                                                                               \r\n#\r\n/profile\r\n#\r\nhttps://github.com/sdwheeler\r\nhttps://github.com/kizerkizer\r\nhttps://github.com/tylerl0706\r\nhttps://github.com/matt9ucci\r\nhttps://github.com/thedanfernandez\r\nhttps://github.com/PowerShell/PowerShell-Docs/blob/staging/reference/docs-conceptual/PowerShell-Scripting.md\r\nhttps://github.com/powershell/powershell\r\nhttps://github.com/PowerShell/PowerShell#get-powershell\r\nhttps://github.com/PowerShell/PowerShell/blob/master/docs/learning-powershell\r\n#\r\nhttps://docs.microsoft.com/previous-versions/\r\nhttps://docs.microsoft.com/teamblog\r\nhttps://docs.microsoft.com/contribute\r\nhttps://go.microsoft.com/fwlink/?LinkId=521839\r\n/en-us/legal/termsofuse\r\nhttps://aka.ms/sitefeedback\r\nhttps://www.microsoft.com/en-us/legal/intellectualproperty/Trademarks/EN-US.aspx\r\n#\r\nhttps://docs.microsoft.com/previous-versions/\r\nhttps://docs.microsoft.com/teamblog\r\nhttps://docs.microsoft.com/contribute\r\nhttps://go.microsoft.com/fwlink/?LinkId=521839\r\n/en-us/legal/termsofuse\r\nhttps://aka.ms/sitefeedback\r\nhttps://www.microsoft.com/en-us/legal/intellectualproperty/Trademarks/EN-US.aspx\r\n```",
      "created_at": "2018-10-30T00:33:02Z",
      "updated_at": "2018-10-30T00:34:08Z"
    },
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "I have reverted my system configuration so there are no 3rd party OpenSSL libraries in /usr/local/opt...\r\nHere's what I get:\r\n````PowerShell\r\nPS /Users/kai> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0\r\nOS                             Darwin 18.0.0 Darwin Kernel Version 18.0.0: W...\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n\r\nPS /Users/kai> (Invoke-WebRequest -Uri \"https://aka.ms/pscore6-docs\").Links.Href\r\nhttps://github.com/PowerShell/PowerShell-Docs/blob/staging/reference/docs-conceptual/PowerShell-Scripting.md       #                                                                                                                  #                                                                                                                  /profile                                                                                                           \r\n#\r\nhttps://github.com/sdwheeler\r\nhttps://github.com/kizerkizer\r\nhttps://github.com/tylerl0706\r\nhttps://github.com/matt9ucci\r\nhttps://github.com/thedanfernandez\r\nhttps://github.com/PowerShell/PowerShell-Docs/blob/staging/reference/docs-conceptual/PowerShell-Scripting.md\r\nhttps://github.com/powershell/powershell\r\nhttps://github.com/PowerShell/PowerShell#get-powershell\r\nhttps://github.com/PowerShell/PowerShell/blob/master/docs/learning-powershell\r\n#\r\nhttps://docs.microsoft.com/previous-versions/\r\nhttps://docs.microsoft.com/teamblog\r\nhttps://docs.microsoft.com/contribute\r\nhttps://go.microsoft.com/fwlink/?LinkId=521839\r\n/en-us/legal/termsofuse\r\nhttps://aka.ms/sitefeedback\r\nhttps://www.microsoft.com/en-us/legal/intellectualproperty/Trademarks/EN-US.aspx\r\n#\r\nhttps://docs.microsoft.com/previous-versions/\r\nhttps://docs.microsoft.com/teamblog\r\nhttps://docs.microsoft.com/contribute\r\nhttps://go.microsoft.com/fwlink/?LinkId=521839\r\n/en-us/legal/termsofuse\r\nhttps://aka.ms/sitefeedback\r\nhttps://www.microsoft.com/en-us/legal/intellectualproperty/Trademarks/EN-US.aspx\r\nPS /Users/kai> \r\n````",
      "created_at": "2018-10-30T00:40:12Z",
      "updated_at": "2018-10-30T00:40:12Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "Thanks...  \r\n\r\nThe library that uses references OpenSSL like this:\r\n\r\n```\r\n@rpath/libssl.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0)\r\n```\r\n\r\nSo, if `libmi` updates it's reference to this, it should resolve the issue.\r\n\r\nI will file an issue with `libmi` this week and update the thread.",
      "created_at": "2018-10-30T00:48:19Z",
      "updated_at": "2018-10-30T00:48:19Z"
    },
    {
      "author": "kai-h",
      "author_association": "NONE",
      "body": "Excellent, thanks for your help getting to the bottom of this. It looks like we're making progress.\r\nIt looks like libimi has the path to the OpenSSL library hard-coded, instead of using rpath.",
      "created_at": "2018-10-30T00:52:03Z",
      "updated_at": "2018-10-30T00:52:03Z"
    },
    {
      "author": "TravisEz13",
      "author_association": "MEMBER",
      "body": "I filed this issue in `omi`: https://github.com/Microsoft/omi/issues/596\r\n\r\n",
      "created_at": "2018-10-30T17:49:46Z",
      "updated_at": "2018-10-30T17:49:46Z"
    }
  ],
  "created_at": "2018-10-11T22:50:11Z",
  "labels": [
    "Issue-Bug",
    "Area-Maintainers-Build",
    "Resolution-External"
  ],
  "number": 8004,
  "state": "closed",
  "title": "PowerShell on macOS to work with MacPorts OpenSSL Libraries",
  "updated_at": "2018-10-30T17:49:47Z"
}