{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8022",
  "author": "iricigor",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nSave the following as file `Test.ps1` and execute it\r\n\r\n```powershell\r\n# define standalone and module function\r\nfunction MyComm {}\r\nNew-Module -ScriptBlock {function FindMyComm {Get-Command MyComm}} | Import-Module\r\n\r\n# check for both functions\r\nGet-Command MyComm\r\nGet-Command FindMyComm\r\n\r\n# run new function\r\nFindMyComm\r\n```\r\n\r\nComment: Running commands one by one in interactive console will not generate error. Only from within a script.\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nGet-Command will run successfully three times.\r\n\r\nActual behavior\r\n---------------\r\n\r\nGet-Command from inside the module fails.\r\n\r\n![image](https://user-images.githubusercontent.com/15923171/46910661-5d9d8780-cf48-11e8-942e-82d92bf4ab33.png)\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\nExplanation\r\n----------------\r\n\r\nSeems like this issue is related to handling function scopes within command discovery, but I am not quite sure. Dot-sourcing `. .\\Test.ps1` will run without issues.\r\n\r\nExample above is tailored for easy reproducibility. Standard, real life use cases (see https://github.com/PowerShell/platyPS/issues/407), can include normal PowerShell modules, manually or implicitly imported. Also, it does not matter if non-module function (`MyComm`) is defined directly as above, or dot-sourced from external script. It behaves the same, and `Get-Command` from inside the module cannot find it.\r\n\r\nThis is tested and impacts also Windows PowerShell 5.1. Similar example is behaving the same on Ubuntu.\r\n\r\n",
  "closed_at": "2019-06-01T00:00:56Z",
  "comments": [
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "The issue is that function `MyComm` is defined in a scope that your module by definition cannot see.\r\n\r\nModules see only _global_ (non-module) function definitions, whereas your function is defined in a _child_ of the global scope by virtue of being defined in a _script_.\r\n\r\nBy dot-sourcing your script from the global scope `MyComm` is defined globally, that's why the problem goes away.",
      "created_at": "2018-10-14T13:01:28Z",
      "updated_at": "2018-10-14T13:02:37Z"
    },
    {
      "author": "iricigor",
      "author_association": "NONE",
      "body": "Hm, that's how I figured it out also, but I find it a bit inconsistent. Your sentence is good definition of this issue:\r\n> Modules see only global function definitions\r\n\r\nI was presuming `FindMyComm` will run inside a script scope, although defined in global scope. I was not expecting it will jump up during the execution. Microsoft [docs](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_functions?view=powershell-6) say about functions:\r\n> The statements in the list run as if you had typed them at the command prompt.\r\n\r\nI don't know if there are differences between functions defined in module or outside of it, in regards to this definition. So, question is: **In what scope `FindMyComm` runs: global or script scope?**\r\n\r\n---\r\n\r\nWhat about this example:\r\n```PowerShell\r\n# define standalone and module function\r\nfunction MyComm {}\r\nfunction Global:FindMyComm {Get-Command MyComm}\r\n\r\n# check for both functions\r\nGet-Command MyComm\r\nGet-Command FindMyComm\r\n\r\n# run new function\r\nFindMyComm\r\n```\r\n\r\nNow `FindMyComm` is defined in global scope, but it runs inside of the script scope. I would expect importing it via module to be the same as this example. Function `MyComm` is **not** visible in global scope.\r\n![image](https://user-images.githubusercontent.com/15923171/46917846-a0547380-cfcb-11e8-94b7-87b3924fb6d7.png)\r\n",
      "created_at": "2018-10-14T14:34:20Z",
      "updated_at": "2018-10-14T14:34:20Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "As far as I understand, the short of it is (right, @SeeminglyScience?):\r\n\r\n<sup>Terminology note: I'm using the term _scope domain_ to refer to the distinct variable namespaces inside a session: one default one for all non-module code, and one for each module loaded; they correspond to `SessionStateInternal` instances, as explained in a [blog post](https://seeminglyscience.github.io/powershell/2017/09/30/invocation-operators-states-and-scopes) by @SeeminglyScience. By _default scope domain_ I mean the namespace for all _non-module_ code (whose root is the global scope). My plan is to suggest these terms be used in an overhaul of the `about_Scopes` help topic.</sup>\r\n\r\n**Functions execute in whatever scope happens to be current one _in the scope domain they were defined in_**, which has the following implications:\r\n\r\n* Calling a function defined in a module from outside that module runs in [a child scope of] the _originating module's_ current scope, not in the caller's scope.\r\n\r\n* Calling a function in the same scope domain in which it is defined (i.e., calling a non-module function from non-module code, or calling a module function from inside the same module) runs in [a child scope of] the _caller's_ current scope.\r\n\r\n* This behavior applies even In _chains_ of calls across scope-domain boundaries (see `GlobalFunc` example below).\r\n\r\nNote that _functions_ create a _child scope_ on invocation, whereas compiled _cmdlets_ do not.\r\n\r\n---\r\n\r\nThe following code demonstrates these behaviors:\r\n\r\n```powershell\r\n# Define variables to test with.\r\n$global:foo = 'global foo'\r\n$foo = 'script foo'\r\n\r\n# A function in the global scope.\r\nfunction global:GlobalFunc {\r\n  \"glob func: [$foo]\"\r\n}\r\n\r\n# Define a non-module function that accesses variable $foo in \r\n# the parent and grandparent scopes.\r\nfunction NonModFunc {\r\n  foreach ($scope in 1, 2) {\r\n    try { \"scope $scope`: {0}\" -f (Get-Variable -ValueOnly -EA Stop -Scope $scope foo) } catch { Write-Warning \"No `$foo in scope $scope.\" }\r\n  }\r\n}\r\n\r\n# Save the function body as a string, so we can recreate it in the module below.\r\n# Note: We must create a *global* variable so that the script block passed to\r\n#       New-Module sees it, given that the script block runs in the new module's scope.\r\n$global:__funcDef = $function:NonModFunc\r\n\r\n# Define a function with the same body inside an (in-memory) module.\r\n$null = New-Module -ScriptBlock {\r\n  # Same function body as above, only inside a module and with name 'ModFunc'\r\n  Invoke-Expression ('function ModFunc {{ {0} }}' -f $__funcDef)\r\n  # Define a module function that invokes a global function.\r\n  function CallGlobal {\r\n    global:GlobalFunc\r\n  }\r\n}\r\n\r\n'--- non-module func'\r\nNonModFunc\r\n\r\n'--- module func'\r\nModFunc\r\n\r\n'--- non-module func from child scope'\r\n& { NonModFunc }\r\n\r\n'--- global func via module'\r\nCallGlobal\r\n```\r\n\r\nThe above yields (annotated):\r\n\r\n```powershell\r\n# Calling the non-module function from the script scope runs in a child scope of the script scope.\r\n--- non-module func\r\nscope 1: script foo  # The function's parent scope is the script scope.\r\nscope 2: global foo # The function's grandparent scope is the global scope.\r\n\r\n# Calling the module function from the script scope runs in a child scope of the *module* scope.\r\n--- module func\r\nWARNING: No $foo in scope 1.  # The module's root scope has no $foo.\r\nscope 2: global foo           # The parent of the module's root scope is the global scope.\r\n\r\n# Calling the non-module function from a child scope of the script scope (via a script block,\r\n# & { ... }), runs in a child scope of *that* scope.\r\n--- non-module func from child scope\r\nWARNING: No $foo in scope 1.  # The script block's scope has no $foo.\r\nscope 2: script foo           # The script block's parent scope is the script scope.\r\n\r\n# Calling a module function that in turn calls a global function makes the global function run\r\n# in the non-default (non-module) scope domain's current scope, which is the script scope\r\n# from which CallGlobal was called.\r\n--- global func via module\r\nglob func: [script foo]  # CallGlobal was originally called from the script scope.\r\n```\r\n",
      "created_at": "2018-10-15T18:15:23Z",
      "updated_at": "2018-10-15T18:15:23Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2019-06-01T00:00:32Z",
      "updated_at": "2019-06-01T00:00:32Z"
    }
  ],
  "created_at": "2018-10-14T09:22:14Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 8022,
  "state": "closed",
  "title": "Get-Command from inside a module cannot find non-module commandlet",
  "updated_at": "2019-06-01T00:00:56Z"
}