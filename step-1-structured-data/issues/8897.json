{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8897",
  "author": "jszabo98",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\n\r\nGet-childitem skips the properties in the top level registry key (key1).  It is like get-childitem skipping the files in the top level folder.  (I could have sworn this was changed in some version of PS6.)\r\n\r\n# Steps to reproduce\r\n\r\n```powershell\r\nC:\\> get-childitem hkcu:\\key1\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\n    Hive: HKEY_CURRENT_USER\r\n\r\nName                           Property\r\n----                           --------\r\nkey1                           name1 : value1\r\n```\r\n\r\n# Actual behavior (nothing)\r\n\r\n```none\r\n```\r\n\r\n\r\nTo me it should be like the file system:\r\n\r\n```powershell\r\nPS C:\\> get-childitem c:\\folder1\r\n```\r\n```none\r\n    Directory: C:\\folder1\r\n\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\n-a----        2/14/2019  10:51 AM             10 file1\r\n```\r\n\r\nSupposing I wanted to recursively dump out the keys, values and data from hkcu:\\key1 and everything underneath (what's the idiomatic way to do that?).  I would have to do:\r\n\r\n```powershell\r\n$(get-item hkcu:\\key1; get-childitem -recurse hkcu:\\key1) | ...\r\n\r\n# ideally get\r\n\r\nPath Name Value Type\r\n---- ---- ----- ----\r\n...  ...  ...   ...\r\n\r\n```\r\n\r\nAnother way to look at it:\r\n\r\n```powershell\r\nPS C:\\> cd hkcu:\\key1\r\nPS HKCU:\\key1> dir\r\n# no output, even though values are here\r\n```\r\n\r\nSorry for any confusion between keys/values/data and path/name/value.\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nPS C:\\> $PSVersionTable\r\n```\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.2\r\nPSEdition                      Core\r\nGitCommitId                    6.1.2\r\nOS                             Microsoft Windows 10.0.16299\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2019-02-16T16:31:36Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yeah, the registry provider is weird and doesn't work at all like other providers. \r\n\r\nGet-ChildItem will generally retrieve only subkeys. If you want to get the properties of a single key, you need to use `Get-ItemProperty`\r\n\r\nI would generally say that the registry provider should have been abstracted a whole lot more to be more accessible like the file system, but unfortunately it wasn't.",
      "created_at": "2019-02-14T16:20:16Z",
      "updated_at": "2019-02-14T16:20:58Z"
    },
    {
      "author": "jszabo98",
      "author_association": "NONE",
      "body": "Just one more comment.  This is how I wished get-itemproperty worked (if not the registry provider itself):\r\n\r\n```powershell\r\nfunction get-itemproperty2 {\r\n  param([parameter(ValueFromPipeline)]$key)\r\n  process {\r\n    $key.getvaluenames() | foreach-object {\r\n      $value = $_\r\n      [pscustomobject] @{\r\n        Path = $Key -replace 'HKEY_CURRENT_USER',\r\n          'HKCU:' -replace 'HKEY_LOCAL_MACHINE','HKLM:'\r\n        Name = $Value\r\n        Value = $Key.GetValue($Value)\r\n        Type = $Key.GetValueKind($Value)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nls -r hkcu:\\key1 | get-itemproperty2 | where name -eq name\r\n\r\nPath            Name Value  Type\r\n----            ---- -----  ----\r\nHKCU:\\key1\\key2 name     1 DWord\r\n```\r\n",
      "created_at": "2019-02-16T16:53:36Z",
      "updated_at": "2019-02-16T17:01:21Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I like that functionality, but I think that really ought to be exhibited by `Get-ChildItem` itself in the registry provider context, as it more closely mimics how other providers behave.",
      "created_at": "2019-02-16T18:47:29Z",
      "updated_at": "2019-02-16T18:47:29Z"
    }
  ],
  "created_at": "2019-02-14T16:01:10Z",
  "labels": [
    "Issue-Question",
    "Resolution-Answered"
  ],
  "number": 8897,
  "state": "closed",
  "title": " get-childitem skips the properties in the top level registry key",
  "updated_at": "2019-02-16T18:47:29Z"
}