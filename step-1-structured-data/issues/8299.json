{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8299",
  "author": "msftrncs",
  "body": "# Steps to reproduce\r\n\r\n```powershell\r\ncmd /d /s /c \"\"\".\\appdata\\local\\programs\\Microsoft VS Code\\bin\\code.cmd\"\" \"\"%%testing^carrots.txt\"\"\"\r\n```\r\n\r\n# Expected behavior\r\n\r\nVS Code opens with file `%testing^carrots.txt`\r\n\r\n# Actual behavior\r\n\r\nVS Code opens with `%testing^^carrots.txt`\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0\r\nOS                             Microsoft Windows 10.0.17763\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n```\r\nI thought maybe this was just a 'core' thing but it happens on Windows PowerShell 5.1 too.\r\n\r\nWhy is there some form of an escaping operation occurring that is causing the `^` to be doubled?  If I don't double the quotes around the file argument, then I have to quadruple the carrots in order to get a single one to VS Code and that's understood and expected, but the double carrot when I only typed a single one is not expected.\r\n\r\nFor instance, this works:\r\n```Powershell\r\ncmd /d /s /c \"\"\".\\appdata\\local\\programs\\Microsoft VS Code\\bin\\code.cmd\"\" %%testing^^^^carrots.txt\"\r\n```\r\n\r\nHowever, you must have doublequote characters around the file path argument if it contains spaces, as carrots cannot escape a space.  But inside a doublequote, carrots don't need escaped.\r\n",
  "closed_at": "2018-11-17T07:36:15Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This appears to be a cmd.exe thing and not related to PowerShell.  The equivalent in cmd.exe without additional quote escaping (not under `pwsh`):\r\n\r\n```\r\ncmd /d /s /c \"\".\\appdata\\local\\programs\\Microsoft VS Code\\bin\\code.cmd\" \"%%testing^^carrots.txt\"\"\r\ncmd /d /s /c \"\".\\appdata\\local\\programs\\Microsoft VS Code\\bin\\code.cmd\" \"%%testing^carrots.txt\"\"\r\n```\r\n\r\nBoth produce the same results you see.  Interestingly, `^^^` and `^^^^` also don't work.  Couldn't find a combination that actually produced a resulting single carat with cmd.exe.  ",
      "created_at": "2018-11-17T01:39:41Z",
      "updated_at": "2018-11-17T01:39:41Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Does `\\^` work to produce a single caret?",
      "created_at": "2018-11-17T01:43:32Z",
      "updated_at": "2018-11-17T01:43:32Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@vexx32 nope, that produces a folder called \"%%testing\" and a file in that folder \"carrots.txt\" since it's treated as a directory separator.",
      "created_at": "2018-11-17T06:41:50Z",
      "updated_at": "2018-11-17T06:41:50Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "Okay, lots of trying things, and I finally found that CALL in the CMD script is what causes the `^` to be doubled, but its something in VS Code or Node that strips one of the `%` off, because CALL doesn't do that.  I determined this by switching out the CMD file for a simple ECHO script to echo the results, and then I changed the command I was using in PowerShell to CALL:\r\n\r\n``` PowerShell\r\ncmd /d /s /c 'call \"code.bat\" \"%testing^carrots.txt\"'\r\n```\r\nSo not a PowerShell problem. ",
      "created_at": "2018-11-17T07:36:15Z",
      "updated_at": "2018-11-17T07:36:15Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "Correction to my previous, CALL, when it is inside a BAT or CMD script does in fact replace the '%%' with '%' but does not do that when the call is either on the command line, or in the /C argument of CMD.EXE.  So the whole issue is CALL, and the mistake is VS Code's as the help for CALL specifically states 'Calls one batch program from another.\"   I do question if CALL should have been escaping characters inside quoted arguments though.",
      "created_at": "2018-11-17T08:20:38Z",
      "updated_at": "2018-11-17T08:20:38Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "@SteveL-MSFT, one thing I have noticed, is that PowerShell will wrap the argument to CMD.EXE (I suppose to all executables) with additional quotes if there are any spaces in the argument, even if that argument is already fully quoted.  As long as one knows this is happening, it simply means the arguments to CMD.EXE never need to be separately quoted (though obviously the compound arguments still need to be separately quoted, but anyone coming from CMD.EXE background is going to be surprised. This is also different than when calling `spawn` in Node JS to spawn CMD.EXE, where I have to intentionally wrap the argument in quotes.",
      "created_at": "2018-11-18T03:23:24Z",
      "updated_at": "2018-11-18T03:23:24Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@msftrncs you can always use `--%` to pass the rest of the cmdline as-is to the native command:\r\n\r\n```powershell\r\ncmd --% ...your args as they would appear outside of powershell...\r\n```\r\n",
      "created_at": "2018-11-18T22:57:10Z",
      "updated_at": "2018-11-18T22:57:10Z"
    }
  ],
  "created_at": "2018-11-17T00:39:08Z",
  "labels": [
    "Issue-Discussion",
    "Resolution-Answered"
  ],
  "number": 8299,
  "state": "closed",
  "title": "executing CMD with carrots (^) in argument ",
  "updated_at": "2018-11-22T10:37:33Z"
}