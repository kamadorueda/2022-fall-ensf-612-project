{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5016",
  "author": "iSazonov",
  "body": "We should implement  automatic `-PSSession` parameter to expose direct remoting support in all cmdlets.",
  "closed_at": "2021-08-25T04:13:29Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "The only minor complication is for cmdlets that already expose it.  Specially the *-PSSession cmdlets.  However, I think it'd be nice to be able to target any cmdlet remotely without having to use Invoke-Command.",
      "created_at": "2017-10-05T17:47:38Z",
      "updated_at": "2017-10-05T17:47:38Z"
    },
    {
      "author": "RichardSiddaway",
      "author_association": "NONE",
      "body": "Is this a replacement for the current computername parameter that a number of cmdlets e.g. Get-Process have.  Unifying the remoting approach to remove the DCOM\\RPC type emoting would be a good approach ",
      "created_at": "2017-10-05T18:29:32Z",
      "updated_at": "2017-10-05T18:29:32Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@RichardSiddaway yes, that is the thinking.  Remove the existing `-ComputerName` parameters that go over RPC (now) and introduce automatic `-PSSession` parameter for a unified remoting experience",
      "created_at": "2017-10-05T18:31:19Z",
      "updated_at": "2017-10-05T18:31:19Z"
    },
    {
      "author": "RichardSiddaway",
      "author_association": "NONE",
      "body": "Good. gets my vote.  Thanks for clarifying.",
      "created_at": "2017-10-05T18:34:47Z",
      "updated_at": "2017-10-05T18:34:47Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "There's a couple of interesting aspects about this we should consider:\r\n\r\n1. if the target doesn't have the cmdlet, can we proxy or install it?\r\n2. can we make this pluggable so modules can participate.  For example, imagine a future AzureRM.NetCore module where you can get an automatic `-azureComputerName` type parameter so you can more easily run commands against Azure targets",
      "created_at": "2017-10-06T17:46:09Z",
      "updated_at": "2017-10-06T17:46:09Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "PowerShell Virtual Machine? ",
      "created_at": "2017-10-06T18:20:12Z",
      "updated_at": "2017-10-06T18:20:12Z"
    },
    {
      "author": "RichardSiddaway",
      "author_association": "NONE",
      "body": "Automatically installing a cmdlet on a remote machine isn't a good thing. Do you install the module containing the cmdlet or just the module. What's the impact is something goes wrong. In the event of a problem on the remote machine how do you stop the automatic install of a cmdlet being blamed  - - \"well it was the last change so it must have caused the problem\" type argument. \r\nProxying the cmdlet - sort of reverse implicit remoting - so that nothing is left behind when the remote session finishes is a much cleaner and safer approach.",
      "created_at": "2017-10-07T14:32:02Z",
      "updated_at": "2017-10-07T14:32:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Do \"pluggable\" needs a public API in SDK?",
      "created_at": "2017-10-07T16:38:34Z",
      "updated_at": "2017-10-07T16:38:34Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov yes, pluggable means public api\r\n\r\n@RichardSiddaway I think by-proxy would be ideal, but in some cases the cmdlet need to run locally on the target.  Certainly in the case that something needs to be installed (if even just temporarily), there would be some switch to `-force` it (personally, I prefer something other than literally `-force` as it's becoming to mean \"I don't care about the side effects, just do it\")",
      "created_at": "2017-10-07T23:46:07Z",
      "updated_at": "2017-10-07T23:47:28Z"
    },
    {
      "author": "RichardSiddaway",
      "author_association": "NONE",
      "body": "The bottom line is that -force is a \"just do it\" option. It has various connotations depending on scenario but in all cases you're over-riding whatever is stopping the action. PowerShell users have got used to -Force so it would be the logical option. ",
      "created_at": "2017-10-09T15:26:09Z",
      "updated_at": "2017-10-09T15:26:09Z"
    }
  ],
  "created_at": "2017-10-05T06:12:27Z",
  "number": 5016,
  "state": "closed",
  "title": "Automatic -PSSession parameter  ",
  "updated_at": "2021-08-25T04:13:29Z"
}