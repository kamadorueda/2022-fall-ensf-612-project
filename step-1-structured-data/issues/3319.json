{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3319",
  "author": "vors",
  "body": "MacOS has a command `script` that creates a color-preserving transcription of the session.\r\n \r\nSteps to reproduce\r\n------------------\r\n1. Set powershell as your default shell on macOS (`chsh`)\r\n2. Run `script`\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nTranscription started, no errors\r\n\r\nActual behavior\r\n---------------\r\n\r\n```\r\nScript started, output file is typescript\r\nCannot process the command because the -InputFormat parameter requires an argument. Specify a valid format argument for this parameter.  Valid formats are:\r\nText\r\nXML\r\nNone\r\n\r\n\r\nPowerShell[.exe] [-PSConsoleFile <file> | -Version <version>]\r\n    [-NoLogo] [-NoExit] [-Sta] [-Mta] [-NoProfile] [-NonInteractive]\r\n    [-InputFormat {Text | XML}] [-OutputFormat {Text | XML}]\r\n    [-WindowStyle <style>] [-EncodedCommand <Base64EncodedCommand>]\r\n    [-ConfigurationName <string>]\r\n    [-File <filePath> <args>] [-ExecutionPolicy <ExecutionPolicy>]\r\n    [-Command { - | <script-block> [-args <arg-array>]\r\n                  | <string> [<CommandParameters>] } ]\r\n\r\nPowerShell[.exe] -Help | -? | /?\r\n\r\n-PSConsoleFile\r\n    Loads the specified Windows PowerShell console file. To create a console\r\n    file, use Export-Console in Windows PowerShell.\r\n\r\n-Version\r\n    Starts the specified version of Windows PowerShell. \r\n    Enter a version number with the parameter, such as \"-version 2.0\".\r\n\r\n-NoLogo\r\n    Hides the copyright banner at startup.\r\n\r\n-NoExit\r\n    Does not exit after running startup commands.\r\n\r\n-Sta\r\n    Starts the shell using a single-threaded apartment.\r\n    Single-threaded apartment (STA) is the default.\r\n\r\n-Mta\r\n    Start the shell using a multithreaded apartment.\r\n\r\n-NoProfile\r\n    Does not load the Windows PowerShell profile.\r\n\r\n-NonInteractive\r\n    Does not present an interactive prompt to the user.\r\n\r\n-InputFormat\r\n    Describes the format of data sent to Windows PowerShell. Valid values are\r\n    \"Text\" (text strings) or \"XML\" (serialized CLIXML format).\r\n\r\n-OutputFormat\r\n    Determines how output from Windows PowerShell is formatted. Valid values\r\n    are \"Text\" (text strings) or \"XML\" (serialized CLIXML format).\r\n\r\n-WindowStyle\r\n    Sets the window style to Normal, Minimized, Maximized or Hidden.\r\n\r\n-EncodedCommand\r\n    Accepts a base-64-encoded string version of a command. Use this parameter \r\n    to submit commands to Windows PowerShell that require complex quotation \r\n    marks or curly braces.\r\n\r\n-ConfigurationName\r\n    Specifies a configuration endpoint in which Windows PowerShell is run.\r\n    This can be any endpoint registered on the local machine including the\r\n    default Windows PowerShell remoting endpoints or a custom endpoint having\r\n    specific user role capabilities.\r\n    \r\n-File\r\n    Runs the specified script in the local scope (\"dot-sourced\"), so that the \r\n    functions and variables that the script creates are available in the \r\n    current session. Enter the script file path and any parameters. \r\n    File must be the last parameter in the command, because all characters \r\n    typed after the File parameter name are interpreted \r\n    as the script file path followed by the script parameters.\r\n\r\n-ExecutionPolicy\r\n    Sets the default execution policy for the current session and saves it \r\n    in the $env:PSExecutionPolicyPreference environment variable. \r\n    This parameter does not change the Windows PowerShell execution policy \r\n    that is set in the registry.\r\n\r\n-Command\r\n    Executes the specified commands (and any parameters) as though they were\r\n    typed at the Windows PowerShell command prompt, and then exits, unless \r\n    NoExit is specified. The value of Command can be \"-\", a string. or a\r\n    script block.\r\n\r\n    If the value of Command is \"-\", the command text is read from standard\r\n    input.\r\n\r\n    If the value of Command is a script block, the script block must be enclosed\r\n    in braces ({}). You can specify a script block only when running PowerShell.exe\r\n    in Windows PowerShell. The results of the script block are returned to the\r\n    parent shell as deserialized XML objects, not live objects.\r\n\r\n    If the value of Command is a string, Command must be the last parameter\r\n    in the command , because any characters typed after the command are \r\n    interpreted as the command arguments.\r\n\r\n    To write a string that runs a Windows PowerShell command, use the format:\r\n\t\"& {<command>}\"\r\n    where the quotation marks indicate a string and the invoke operator (&)\r\n    causes the command to be executed.\r\n\r\n-Help, -?, /?\r\n    Shows this message. If you are typing a PowerShell.exe command in Windows\r\n    PowerShell, prepend the command parameters with a hyphen (-), not a forward\r\n    slash (/). You can use either a hyphen or forward slash in Cmd.exe.\r\n\r\nEXAMPLES\r\n    PowerShell -PSConsoleFile SqlSnapIn.Psc1\r\n    PowerShell -version 2.0 -NoLogo -InputFormat text -OutputFormat XML\r\n    PowerShell -ConfigurationName AdminRoles\r\n    PowerShell -Command {Get-EventLog -LogName security}\r\n    PowerShell -Command \"& {Get-EventLog -LogName security}\"\r\n\r\n    # To use the -EncodedCommand parameter:\r\n    $command = 'dir \"c:\\program files\" '\r\n    $bytes = [System.Text.Encoding]::Unicode.GetBytes($command)\r\n    $encodedCommand = [Convert]::ToBase64String($bytes)\r\n    powershell.exe -encodedCommand $encodedCommand\r\n\r\nScript done, output file is typescript\r\n```\r\n\r\nFile `typescript` contains the same information.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\n\r\nName                           Value                                                                                                  \r\n----                           -----                                                                                                  \r\nPSVersion                      6.0.0-alpha                                                                                            \r\nPSEdition                      Core                                                                                                   \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                                \r\nBuildVersion                   3.0.0.0                                                                                                \r\nGitCommitId                    v6.0.0-alpha.16                                                                                        \r\nCLRVersion                                                                                                                            \r\nWSManStackVersion              3.0                                                                                                    \r\nPSRemotingProtocolVersion      2.3                                                                                                    \r\nSerializationVersion           1.1.0.1                                                                                                \r\n\r\n\r\n```\r\n",
  "closed_at": "2017-04-14T01:35:43Z",
  "comments": [
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "This repros on Ubuntu16 as well.  Note that starting powershell from bash and then running script works, it's only failing if powershell is default shell.",
      "created_at": "2017-03-13T21:55:49Z",
      "updated_at": "2017-03-13T21:55:49Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "You don't have to change your default shell to repro this:\r\n\r\n```bash\r\n> SHELL=/usr/bin/powershell\r\n> export SHELL\r\n> script\r\n```\r\n",
      "created_at": "2017-03-13T22:13:54Z",
      "updated_at": "2017-03-13T22:14:32Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "I figured out the problem.  It appears there is a convention for unix shells that `-i` is used to indicate the shell is interactive.  `script` actually passes `-i` to the shell it picks up from the `SHELL` env var.  This is why you get the error from powershell.exe about formatting as `-i` is an alias to `-FormatInput`.  Fix is to support `-i` to mean interactive like all other shells, but this would be a breaking change.\r\n\r\nCC @lzybkr ",
      "created_at": "2017-03-13T22:28:48Z",
      "updated_at": "2017-03-13T22:28:48Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "You mean it's just short for `-InputFormat` - and that's consistent with our parameter binding only requiring enough of the parameter name to not be ambiguous.\r\n\r\nAdding a new parameter `-Interactive` on *nix isn't a breaking change, but it does make some (rare) scripts not portable.",
      "created_at": "2017-03-14T00:30:30Z",
      "updated_at": "2017-03-14T00:30:30Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@lzybkr yes, I meant `-InputFormat`.  My concern is that anyone dependent on `-i` being short for `-inputformat` would be broken if `-i` now means `-interactive`.  `script` (and possibly other unix tools) expect it to be precisely `-i`.  Personally, I'm ok with `-i` meaning interactive to be consistent with other shells and tools relying on this behavior.",
      "created_at": "2017-03-14T00:40:22Z",
      "updated_at": "2017-03-14T00:40:59Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "`-InputFormat` is not used often I think, and when it is, it's most likely used explicitly in PowerShell when piping between PowerShell processes, something like:\r\n\r\n```\r\nget-process | powershell -nop { $input | % { $_.Name } }\r\n```\r\n\r\nIf you run this, powershell will use the following command line:\r\n\r\n```\r\nC:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -nop -encodedCommand IAAkAGkAbgBwAHUAdAAgAHwAIAAlACAAewAgACQAXwAuAE4AYQBtAGUAIAB9ACAA -inputFormat xml -outputFormat text\r\n```\r\n\r\nSo we detected that the script block was processing `$input` and so added the `-inputFormat xml` parameter automatically.",
      "created_at": "2017-03-14T01:10:42Z",
      "updated_at": "2017-03-14T01:10:42Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "I'm also in favor of adding `-i` parameter for interactive. It's inline with what we already did for `-version`: make it more unix friendly.",
      "created_at": "2017-03-14T01:18:32Z",
      "updated_at": "2017-03-14T01:18:32Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/powershell-committee agreed to conform to unix convention.  We'll add `-interactive` with `-i` alias (error if both `-noninteractive` and `-interactive` is provided)",
      "created_at": "2017-03-15T23:40:07Z",
      "updated_at": "2017-03-15T23:40:07Z"
    }
  ],
  "created_at": "2017-03-13T18:37:32Z",
  "labels": [
    "WG-Interactive-Console",
    "Resolution-Fixed",
    "Breaking-Change",
    "Committee-Reviewed"
  ],
  "number": 3319,
  "state": "closed",
  "title": "PowerShell as a default shell doesn't work with script command",
  "updated_at": "2017-04-14T04:33:17Z"
}