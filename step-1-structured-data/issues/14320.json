{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14320",
  "author": "iSazonov",
  "body": "<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->\r\n\r\n# PR Summary\r\n\r\nRemove dead code from SemanticVersion class. It was added pending the development of  semantic version story but we got no feedback and no progress. Currently we are waiting .Net for the story.\r\n\r\nThe PR speeds up startup scenario on my laptop up to 50 ms.\r\n\r\n## PR Context\r\n\r\nRelated #14268\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.\r\n- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**\r\n    - [x] None\r\n    - **OR**\r\n    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)\r\n        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed: <!-- Number/link of that issue here -->\r\n- **Testing - New and feature**\r\n    - [ ] N/A or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n- **Tooling**\r\n    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.\r\n    - **OR**\r\n    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:\r\n        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).\r\n        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.\r\n        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).\r\n        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).\r\n",
  "closed_at": "2020-12-04T19:55:24Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw @rjmholt Could you please explain how the `public static implicit operator Version(SemanticVersion semver)` works? Original code defines `PSObject psobj` and _not return it_ - looks like dead code. But if I remove it tests fail which means that the original code still implicitly returns PSObject! \r\n\r\nUpdate: looks like a tricky bug in .Net Runtime. :-(\r\n",
      "created_at": "2020-12-04T17:09:43Z",
      "updated_at": "2020-12-04T17:35:48Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@iSazonov `psobj.Properties.Add` adds the member to `s_instanceMembersResurrectionTable`, which allows PowerShell to retrieve the ETS members for the specific object, the `System.Version result` here, when access that object in PowerShell later. Put it another way, `psobj.Properties.Add` makes PowerShell remember that an instance member is added for the particular object `result`.\r\n\r\nThis code path shouldn't be removed. It's the reason why you see the following from a `System.Verseion` object.\r\n```\r\nPS C:\\> $PSVersionTable.PSCompatibleVersions[-1]\r\n\r\nMajor  Minor  Build  Revision PSSemVerPreReleaseLabel    PSSemVerBuildLabel\r\n-----  -----  -----  -------- -----------------------    ------------------\r\n7      2      0      -1       preview.1\r\n```",
      "created_at": "2020-12-04T19:55:09Z",
      "updated_at": "2020-12-04T19:55:09Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Besides, this particular impact won't affect stable versions, because `PSSemVerPreReleaseLabel` and `PSSemVerBuildLabel` are `null` for stable versions. When profiling, I recommand you to build PowerShell with `-ReleaseTag v7.2.0`, so as to mimic a stable version.",
      "created_at": "2020-12-04T20:45:11Z",
      "updated_at": "2020-12-04T20:45:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw Thanks for clarify!\r\nI was sure that we left this code only as \"want get a feedback\" and till .Net solution comes.\r\nBased on our experience in PowerShell I shared in .Net proposal to enhance `System.Version` type instead of creating new .Net SemanticVersion class. If this will be implemented in any way we will fall in a breaking change so we can close the PR and add more in our documentation about PowerShell SemanticVersion class.",
      "created_at": "2020-12-05T03:00:34Z",
      "updated_at": "2020-12-05T03:00:34Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> When profiling, I recommand you to build PowerShell with `-ReleaseTag v7.2.0`, so as to mimic a stable version.\r\n \r\nI see your point but:\r\n1. Modern live cycle development model assumes preview versions is stable enough and works as well as release. Users actively use Preview versions. I believe they shouldn't disappoint users and behave as well as releases.\r\nIt also allows us to get reliable performance feedback early on, rather than after the final release.\r\n2. In SemanticVersion context `PSSemVerPreReleaseLabel` is null for stable version but `PSSemVerBuildLabel` could be not null - ex.: if we re-packaged we could increase the build label as SemVer standard says.\r\n",
      "created_at": "2020-12-05T08:04:50Z",
      "updated_at": "2020-12-05T08:04:50Z"
    }
  ],
  "created_at": "2020-12-04T13:01:28Z",
  "number": 14320,
  "state": "closed",
  "title": "Remove dead code from SemanticVersion class",
  "updated_at": "2020-12-07T11:13:22Z"
}