{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16798",
  "author": "MartinGC94",
  "body": "### Prerequisites\r\n\r\n- [X] Write a descriptive title.\r\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- [X] Search the existing issues.\r\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\r\n\r\n### Steps to reproduce\r\n\r\nI've looked into the type completion and have come up with this list of issues:\r\n\r\n1: It doesn't take conflicting `Using namespace` statements into consideration, for example:\r\n```\r\nusing namespace System.Threading\r\nusing namespace System.Timers\r\n[Timer<Tab>\r\n```\r\nwill suggest \"Timer\" but if you actually tried to use that you would get a runtime error due to the ambiguous type (it's either System.Threading.Timer or System.Timers.Timer). Ideally it would find the shortest unambiguous name, which in this case would be Threading.Timer and Timers.Timer due to the implicit System namespace.\r\n\r\n2: PowerShell types and Using namespace statements are only taken into consideration if they are included in the script text that is being completed. To demonstrate, you can add an Enum and a using statement to your $profile:\r\n```\r\nusing namespace System.Collections.Generic\r\nenum Whatever\r\n{\r\n    value1 = 1\r\n}\r\n```\r\nFrom a new console, If you try to complete `Whatever` in the console you'll get no results. If you try to complete `List` it will suggest `System.Collections.Generic.List` instead of just `List`.  \r\nIdeally PowerShell types defined in the script text as well as ones that have been loaded into the session should be included in the completions. For using statements, it should use the ones in the script text and if there aren't any, fall back to the ones loaded into the session.\r\n\r\n3: PowerShell types imported through using module aren't considered for completion. Fixing the previous issue would partially fix this, but maybe it's also worth parsing the specified module? The Symbol resolver code does this at parse time so maybe the completion code should as well?\r\n\r\n4: Namespaces aren't taken into consideration when completing input, their only use seems to be to trim types that are found. For example:\r\n```\r\nusing namespace System.Collections\r\n[Generic.List<Tab>\r\n#or\r\n[Generic.<Tab>\r\n```\r\n\r\nwon't complete to anything. You have to type the full name to get any completions.\r\n\r\n5: Quotes aren't handled properly in the namespace removal in the completion if used in `using namespace`\r\nFor example:\r\n```\r\nusing namespace \"System.Management\"\r\n[token<Tab>\r\n```\r\ncompletes to `[tomation.Language.Token]` instead of `[Automation.Language.Token]`\r\n### Expected behavior\r\n\r\n```console\r\nN/A\r\n```\r\n\r\n\r\n### Actual behavior\r\n\r\n```console\r\nN/A\r\n```\r\n\r\n\r\n### Error details\r\n\r\n_No response_\r\n\r\n### Environment data\r\n\r\n```powershell\r\nPS C:\\Users\\Martin> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.2.0-preview.10\r\nPSEdition                      Core\r\nGitCommitId                    7.2.0-preview.10\r\nOS                             Microsoft Windows 10.0.19044\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n\r\n### Visuals\r\n\r\n_No response_",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "My concern is that some limitations in tab completion comes from how Engine works.\r\n@vexx32 @SeeminglyScience Thoughts?",
      "created_at": "2022-01-25T03:24:38Z",
      "updated_at": "2022-01-25T03:24:38Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I mean yeah, to an extent, but that doesn't mean the information about active `using namespace` declarations (or indeed any `using` statements that may impact tab completion) can't be recorded somewhere for the tab completion code to look at. Arguably that's something that _could_ be exposed for runtime checks, tab completion, etc., if we wanted to.\r\n\r\nIt mightn't be entirely straightforward, but I think it's a worthwhile change to investigate.",
      "created_at": "2022-01-25T03:40:41Z",
      "updated_at": "2022-01-25T03:41:14Z"
    },
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "I've already looked into fixing these issues and I don't think it's impossible or even that hard to fix them. The hardest one to fix is issue 4 because the type completion cache is grouped into \"dots\" to make lookups faster. You could prepend each using statement to the wordToComplete and do multiple lookups but performance might take a hit so maybe it's better to find a different way to group them or maybe even avoid grouping them at all.",
      "created_at": "2022-01-25T06:21:38Z",
      "updated_at": "2022-01-25T06:21:38Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I guess it is type cache only? not namespace?",
      "created_at": "2022-01-25T10:20:33Z",
      "updated_at": "2022-01-25T10:20:33Z"
    }
  ],
  "created_at": "2022-01-24T23:20:25Z",
  "number": 16798,
  "state": "open",
  "title": "List of various Type completion flaws",
  "updated_at": "2022-02-11T22:47:12Z"
}