{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16124",
  "author": "sba923",
  "body": "### Prerequisites\n\n- [X] Write a descriptive title.\n- [X] Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\n- [X] Search the existing issues.\n- [X] Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\n- [X] Refer to [Differences between Windows PowerShell 5.1 and PowerShell](https://docs.microsoft.com/powershell/scripting/whats-new/differences-from-windows-powershell).\n\n### Steps to reproduce\n\nWhen running a certain script that performs file operations, it happens that `Get-Item` applied to an existing _file_ returns a `DirectoryInfo` object.\r\n\r\nHere's the script and sample data:\r\n[Test-Get-Item.zip](https://github.com/PowerShell/PowerShell/files/7193633/Test-Get-Item.zip)\r\n\r\nHere's the outcome:\r\n![image](https://user-images.githubusercontent.com/12860484/133958057-cbeae10d-8008-4a6c-887c-4fcc4a807dac.png)\r\n![image](https://user-images.githubusercontent.com/12860484/133958070-3fcbfdd8-82ef-4708-91cb-1c2fb2928d09.png)\r\n\r\n\r\nWeirdly enough, if the script is debugged and stopped at a breakpoint just after the check for the correct object type, if `Get-Item` is invoked at the debugger prompt, the correct type is returned.\r\n\r\n![image](https://user-images.githubusercontent.com/12860484/133957960-164f467f-86a8-48cc-947e-878f47c78bd8.png)\r\n\r\nThis has only been repro'ed with data residing on _some specific_ Samba-shared network location.\r\n\r\nFWIW, the behavior under Windows PowerShell 5.1 is different:\r\n![image](https://user-images.githubusercontent.com/12860484/133958152-d0c735a6-7651-456b-b814-0a3884d44cf3.png)\r\n\r\n\r\n\r\n\n\n### Expected behavior\n\n```console\n`Get-Item` applied to a file should always return a `FileInfo` object.\n```\n\n\n### Actual behavior\n\n```console\nIn some undetermined circumstances, `Get-Item` returns a `DirectoryInfo` object.\n```\n\n\n### Error details\n\n_No response_\n\n### Environment data\n\n```powershell\n`\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.4\r\nPSEdition                      Core\r\nGitCommitId                    7.1.4\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n````\n```\n\n\n### Visuals\n\n_No response_",
  "closed_at": "2021-12-01T12:00:46Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> PSVersion                      7.1.4\r\n\r\nCan you reproduce with latest _daily_ PowerShell 7.2 build?",
      "created_at": "2021-09-20T05:13:05Z",
      "updated_at": "2021-09-20T05:13:05Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Can you please remind me where to get it? I keep forgetting...",
      "created_at": "2021-09-20T05:48:57Z",
      "updated_at": "2021-09-20T05:48:57Z"
    },
    {
      "author": "Knele83",
      "author_association": "NONE",
      "body": "\r\n\r\nFrom: St\u00e9phane BARIZIEN ***@***.***>\r\nSent: Monday, September 20, 2021 7:49 AM\r\nTo: PowerShell/PowerShell ***@***.***>\r\nCc: Subscribed ***@***.***>\r\nSubject: Re: [PowerShell/PowerShell] Get-Item for a file sometimes returns a DirectoryInfo object (#16124)\r\n\r\n\r\nCan you please remind me where to get it? I keep forgetting...\r\n\r\n\u2014\r\nYou are receiving this because you are subscribed to this thread.\r\nReply to this email directly, view it on GitHub<https://github.com/PowerShell/PowerShell/issues/16124#issuecomment-922651572>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/ABLIQTQ6VUWNTHDAO6OVKLLUC3DOJANCNFSM5ELENMOA>.\r\nTriage notifications on the go with GitHub Mobile for iOS<https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675> or Android<https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.\r\n",
      "created_at": "2021-09-20T07:01:28Z",
      "updated_at": "2021-11-30T05:51:54Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "> From: St\u00e9phane BARIZIEN ***@***.***> Sent: Monday, September 20, 2021 7:49 AM To: PowerShell/PowerShell ***@***.***> Cc: Subscribed ***@***.***> Subject: Re: [PowerShell/PowerShell] Get-Item for a file sometimes returns a DirectoryInfo object (#16124) Can you please remind me where to get it? I keep forgetting... \u2014 You are receiving this because you are subscribed to this thread. Reply to this email directly, view it on GitHub<[#16124 (comment)](https://github.com/PowerShell/PowerShell/issues/16124#issuecomment-922651572)>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/ABLIQTQ6VUWNTHDAO6OVKLLUC3DOJANCNFSM5ELENMOA>. Triage notifications on the go with GitHub Mobile for iOS<https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675> or Android<https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.\r\n\r\n???\n\n<blockquote><img src=\"https://github.githubassets.com/images/modules/open_graph/github-logo.png\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com\">Build software better, together</a></strong></div><div>GitHub is where people build software. More than 65 million people use GitHub to discover, fork, and contribute to over 200 million projects.</div></blockquote>",
      "created_at": "2021-09-20T07:22:13Z",
      "updated_at": "2021-11-30T05:52:03Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "> latest _daily_ PowerShell 7.2 build\r\n\r\nYes I can \ud83d\ude25\r\n\r\n![image](https://user-images.githubusercontent.com/12860484/133969904-ae2a18e4-9ce4-4603-bfbc-2d9d4389ec6b.png)\r\n",
      "created_at": "2021-09-20T07:40:53Z",
      "updated_at": "2021-09-20T07:40:53Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Thanks! I think it is Samba issue.",
      "created_at": "2021-09-20T08:04:28Z",
      "updated_at": "2021-09-20T08:04:28Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "How can I help debug / analyze this?\r\n",
      "created_at": "2021-09-20T12:24:36Z",
      "updated_at": "2021-09-20T12:24:36Z"
    },
    {
      "author": "lansalot",
      "author_association": "NONE",
      "body": "Try using Procmon, see what is returned when the file is queried?",
      "created_at": "2021-09-20T14:31:01Z",
      "updated_at": "2021-09-20T14:31:01Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Very good suggestion, how come I didn't think of it?",
      "created_at": "2021-09-20T15:41:52Z",
      "updated_at": "2021-09-20T15:41:52Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Just captured a ProcMon trace. For some reason the failure occurred right away, at the first call to the `ProcessFile` function:\r\n\r\n![image](https://user-images.githubusercontent.com/12860484/134033605-2d5fc9c2-778d-42c7-93d9-d259f868e87f.png)\r\n\r\nI do see `QueryNetworkOpenInformationFile` returning \"D\" as `FileAttributes`:\r\n\r\n![image](https://user-images.githubusercontent.com/12860484/134034016-d40e93d5-2ada-4b40-959e-5f257ff50320.png)\r\n",
      "created_at": "2021-09-20T15:56:34Z",
      "updated_at": "2021-09-20T15:56:34Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "The plot thickens:\r\n\r\n![image](https://user-images.githubusercontent.com/12860484/134035955-b5f730df-759f-4321-b048-ae7ff902b67b.png)\r\n\r\nThis is what I see on the Ubuntu side of the fence:\r\n\r\n![image](https://user-images.githubusercontent.com/12860484/134036011-c9a9c38d-f5a4-407c-a80c-f0d6b02cc7fd.png)\r\n\r\n\r\n",
      "created_at": "2021-09-20T16:09:45Z",
      "updated_at": "2021-09-20T16:09:45Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Based on the results, it appears that the problem is with Samba occasionally returning incorrect data?",
      "created_at": "2021-09-20T16:25:49Z",
      "updated_at": "2021-09-20T16:25:49Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Looks like it indeed... I need to find out how to investigate _that_, using methods that are as close as possible to the network redirector...\r\n\r\nMaybe I should first write a small C++ piece of code invoking Win32 APIs...",
      "created_at": "2021-09-20T16:27:22Z",
      "updated_at": "2021-09-20T16:28:05Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Something is really weird: if I run `get-item -literalpath '\\\\pnjnas\\usbdisk1\\sto\\LATITUDE7400\\Data\\C\\Users\\sto\\OneDrive\\Images\\edit\\2015\\02\\15\\IMG_0751 (2021_03_14 18_18_52 UTC).JPG'` from an interactive PowerShell prompt, I **always** get a `FileInfo`:\r\n\r\n![image](https://user-images.githubusercontent.com/12860484/134321498-047d5d18-cdf2-4db2-92ba-161bfbc8427f.png)\r\n\r\n\r\n`stat` from WSL2 also says it's a file:\r\n\r\n![image](https://user-images.githubusercontent.com/12860484/134321375-3689ccdf-8442-48d5-9149-68e754a1e170.png)\r\n",
      "created_at": "2021-09-22T09:46:01Z",
      "updated_at": "2021-09-22T09:46:01Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Sniffed with Wireshark: they're only one request while the repro script runs (caching?), and the return from Samba seems correct:\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/12860484/134347727-1f1bedc0-7cb8-46fb-bb3b-83a574bbd989.png)\r\n",
      "created_at": "2021-09-22T12:58:27Z",
      "updated_at": "2021-09-22T12:58:27Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "FYI I'm moving to debugging this within PowerShell itself. I've built the latest code (`7.2.0-preview.10-57-g7cf1ef8c8599a90cd9579c7bb7b7676e097c4938`) and will try to understand what's going on when **only one** of the `Get-Item` invocations during the execution of my repro script returns a `DirectoryInfo`.\r\n\r\n@SteveL-MSFT: any advice?",
      "created_at": "2021-10-01T14:46:02Z",
      "updated_at": "2021-10-01T14:46:02Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Try changing the check in your script to this (**not** running it interactively, change it in the script):\r\n\r\n```powershell\r\n$attrib = [IO.FileInfo]::new($thePath).Attributes\r\n$attrib -ne -1 -and $attrib.HasFlag([IO.FileAttributes]::Directory)\r\n```\r\n\r\nThat's basically all the provider is doing, but still worth checking.\r\n\r\n- If that returns the same thing, try it in C#\r\n- If in C# it returns the same, try writing a C++ app that calls [`glibc!stat`](https://www.man7.org/linux/man-pages/man2/stat.2.html) and tests `(statbuf.st_mode & S_IFMT) == S_IFDIR` (seems like all that dotnet/runtime does, see [here](https://github.com/dotnet/runtime/blob/ce99c5658cc8c6ef426f54864d394ba443820840/src/libraries/System.Private.CoreLib/src/System/IO/FileStatus.Unix.cs#L371-L372) and [here](https://github.com/dotnet/runtime/blob/ce99c5658cc8c6ef426f54864d394ba443820840/src/libraries/Native/Unix/System.Native/pal_io.c#L192))\r\n\r\nThough tbh it kind of seems a bit like a race condition so adjusting the timing by moving the faster languages may not actually definitively prove where the problem is.",
      "created_at": "2021-10-01T17:25:39Z",
      "updated_at": "2021-10-01T17:25:39Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "With this script:\r\n\r\n````powershell\r\n\r\nparam([string] $finddir = '\\\\pnjnas\\usbdisk1\\sto\\LATITUDE7400\\Data\\C\\Users\\sto\\OneDrive\\Images\\edit', [string]\r\n$otherdir = '\\\\pnjnas\\usbdisk1\\steph_000\\SBAHOME\\Data\\C\\Users\\steph\\OneDrive\\Images\\edit')\r\n\r\n$finddir_re = '^' + [regex]::Escape($finddir)\r\n\r\nfunction ProcessFile\r\n{\r\n    Write-Host -ForegroundColor Blue (\"ProcessFile -- thisfile='{0}'\" -f $thisfile)\r\n    try\r\n    {\r\n        # $thisitem = Get-Item -LiteralPath $thisfile\r\n        # $thistype = $thisitem.GetType().Name\r\n        # if ($thistype -ne 'FileInfo')\r\n        # {\r\n        #     Write-Host -ForegroundColor Red (\"'{0}' is of unexpected type '{1}'\" -f $thisfile, $thistype)\r\n        #     Exit(1)\r\n        # }\r\n        # else\r\n        # {\r\n        #     Write-Host -ForegroundColor Green (\"'{0}' is of expected type '{1}'\" -f $thisfile, $thistype)\r\n        # }\r\n        $attrib = [IO.FileInfo]::new($thisfile).Attributes\r\n        if ($attrib -ne -1 -and $attrib.HasFlag([IO.FileAttributes]::Directory))\r\n        {\r\n            Write-Host -ForegroundColor Red (\"'{0}' is unexpectedly reported as a directory (attrib = 0x{1:x})\" -f $thisfile, $attrib)\r\n            Exit(1)\r\n        }\r\n        else\r\n        {\r\n            Write-Host -ForegroundColor Green (\"'{0}' is expectedly NOT a directory (attrib = 0x{1:x})\" -f $thisfile, $attrib)\r\n        }\r\n\r\n    }\r\n    catch\r\n    {\r\n        Write-Host -ForegroundColor Red (\"EXCEPTION: thisfile='{0}' {1}\" -f $thisfile, $error[0])\r\n        Exit(1)\r\n    }\r\n}\r\n\r\nfunction CleanSlate\r\n{\r\n    foreach ($varname in @('thisfile', 'thisitem', 'otherfile', 'otheritem', 're', 'removedir', 'founditem'))\r\n    {\r\n        Remove-Variable -Name $varname -ErrorAction SilentlyContinue\r\n    }\r\n}\r\n\r\n# -------------------------------------------------------------------------------------------------------\r\nWrite-Host -ForegroundColor Magenta (\"direct invocation of ProcessFile\")\r\nCleanSlate\r\n$thisfile = $finddir + '\\2015\\02\\15\\IMG_0751 (2021_03_14 18_18_52 UTC).JPG'\r\nProcessFile\r\n\r\n# -------------------------------------------------------------------------------------------------------\r\nWrite-Host -ForegroundColor Magenta (\"invocation of ProcessFile from foreach loop\")\r\nCleanSlate\r\n$thisfile = $finddir + '\\2015\\02\\15\\IMG_0751 (2021_03_14 18_18_52 UTC).JPG'\r\n$otherfile = $thisfile -replace $finddir_re, $otherdir\r\n$founditem = Get-Item -LiteralPath $thisfile\r\n$re = [regex]::Escape(($founditem.Name -replace '\\s+\\(.*UTC\\)', '')) + '|' + [regex]::Escape(($founditem.BaseName -replace '\\s+\\(.*UTC\\)', '')) + '\\s+\\(.*UTC\\)' + [regex]::Escape($founditem.Extension)\r\n$otherfiles = (Get-ChildItem -file -force -literalpath (split-path -parent $otherfile) -ErrorAction SilentlyContinue | Where-Object { $_.Name -match $re })\r\n\r\nif ($null -ne $otherfiles)\r\n{\r\n    foreach ($otherfile in $otherfiles.FullName)\r\n    {\r\n        ProcessFile\r\n    }\r\n}\r\n\r\n# -------------------------------------------------------------------------------------------------------\r\nWrite-Host -ForegroundColor Magenta (\"ProcessFile invoked from foreach loop within Foreach-Object loop\")\r\nCleanSlate\r\n@('a') | ForEach-Object {\r\n\r\n    $thisfile = $finddir + '\\2015\\02\\15\\IMG_0751 (2021_03_14 18_18_52 UTC).JPG'\r\n    $founditem = Get-Item -LiteralPath $thisfile\r\n    $re = [regex]::Escape(($founditem.Name -replace '\\s+\\(.*UTC\\)', '')) + '|' + [regex]::Escape(($founditem.BaseName -replace '\\s+\\(.*UTC\\)', '')) + '\\s+\\(.*UTC\\)' + [regex]::Escape($founditem.Extension)\r\n    $otherfile = $thisfile -replace $finddir_re, $otherdir\r\n    $otherfiles = (Get-ChildItem -file -force -literalpath (split-path -parent $otherfile) -ErrorAction SilentlyContinue | Where-Object { $_.Name -match $re })\r\n\r\n    if ($null -ne $otherfiles)\r\n    {\r\n        foreach ($otherfile in $otherfiles.FullName)\r\n        {\r\n            ProcessFile\r\n        }\r\n    }\r\n\r\n}\r\n\r\n# -------------------------------------------------------------------------------------------------------\r\nWrite-Host -ForegroundColor Magenta (\"original logic\")\r\nCleanSlate\r\nGet-ChildItem -File -Force -Recurse -LiteralPath $finddir -ErrorAction Stop | ForEach-Object {\r\n    $founditem = $_\r\n    $thisfile = $founditem.FullName\r\n    $otherfile = $thisfile -replace $finddir_re, $otherdir\r\n    if (!(Test-Path -literalpath $otherfile))\r\n    {\r\n        $re = [regex]::Escape(($founditem.Name -replace '\\s+\\(.*UTC\\)', '')) + '|' + [regex]::Escape(($founditem.BaseName -replace '\\s+\\(.*UTC\\)', '')) + '\\s+\\(.*UTC\\)' + [regex]::Escape($founditem.Extension)\r\n\r\n        $otherfiles = (Get-ChildItem -file -force -literalpath (split-path -parent $otherfile) -ErrorAction SilentlyContinue | Where-Object { $_.Name -match $re })\r\n\r\n        if ($null -ne $otherfiles)\r\n        {\r\n            foreach ($otherfile in $otherfiles.FullName)\r\n            {\r\n                Write-Host -ForegroundColor Blue (\"Found otherfile '{0}'\" -f $otherfile)\r\n                ProcessFile\r\n            }\r\n        }\r\n    }\r\n    else\r\n    {\r\n        Write-Host -ForegroundColor Blue (\"otherfile '{0}' exists\" -f $otherfile)\r\n        ProcessFile\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n````\r\n\r\nI get:\r\n\r\n```` \r\nPS\u276f  S:\\powershell\\test\\Test-Get-Item.ps1\r\ndirect invocation of ProcessFile\r\nProcessFile -- thisfile='\\\\pnjnas\\usbdisk1\\sto\\LATITUDE7400\\Data\\C\\Users\\sto\\OneDrive\\Images\\edit\\2015\\02\\15\\IMG_0751 (2021_03_14 18_18_52 UTC).JPG'\r\n'\\\\pnjnas\\usbdisk1\\sto\\LATITUDE7400\\Data\\C\\Users\\sto\\OneDrive\\Images\\edit\\2015\\02\\15\\IMG_0751 (2021_03_14 18_18_52 UTC).JPG' is expectedly NOT a directory (attrib = 0x00000021)\r\ninvocation of ProcessFile from foreach loop\r\nProcessFile -- thisfile='\\\\pnjnas\\usbdisk1\\sto\\LATITUDE7400\\Data\\C\\Users\\sto\\OneDrive\\Images\\edit\\2015\\02\\15\\IMG_0751 (2021_03_14 18_18_52 UTC).JPG'\r\n'\\\\pnjnas\\usbdisk1\\sto\\LATITUDE7400\\Data\\C\\Users\\sto\\OneDrive\\Images\\edit\\2015\\02\\15\\IMG_0751 (2021_03_14 18_18_52 UTC).JPG' is expectedly NOT a directory (attrib = 0x00000021)\r\nProcessFile invoked from foreach loop within Foreach-Object loop\r\nProcessFile -- thisfile='\\\\pnjnas\\usbdisk1\\sto\\LATITUDE7400\\Data\\C\\Users\\sto\\OneDrive\\Images\\edit\\2015\\02\\15\\IMG_0751 (2021_03_14 18_18_52 UTC).JPG'\r\n'\\\\pnjnas\\usbdisk1\\sto\\LATITUDE7400\\Data\\C\\Users\\sto\\OneDrive\\Images\\edit\\2015\\02\\15\\IMG_0751 (2021_03_14 18_18_52 UTC).JPG' is expectedly NOT a directory (attrib = 0x00000021)\r\noriginal logic\r\nFound otherfile '\\\\pnjnas\\usbdisk1\\<REDACTED>_000\\<REDACTED>\\Data\\C\\Users\\<REDACTED>\\OneDrive\\Images\\edit\\2015\\02\\15\\IMG_0751 (2020_09_16 12_20_35 UTC).jpg'\r\nProcessFile -- thisfile='\\\\pnjnas\\usbdisk1\\sto\\LATITUDE7400\\Data\\C\\Users\\sto\\OneDrive\\Images\\edit\\2015\\02\\15\\IMG_0751 (2021_03_14 18_18_52 UTC).JPG'\r\n'\\\\pnjnas\\usbdisk1\\sto\\LATITUDE7400\\Data\\C\\Users\\sto\\OneDrive\\Images\\edit\\2015\\02\\15\\IMG_0751 (2021_03_14 18_18_52 UTC).JPG' is unexpectedly reported as a directory (attrib = 0x00000010)\r\n````\r\n\r\nI already have written a piece of C++ code that calls `GetFileAttributesEx`, it always returns the correct value of `0x21` for the attributes...\r\n\r\nMy gut feeling is there's some code that gets the attributes for the file's parent, and that sometimes this ends up in the object returned by `Get-Item` instead of the child's attributes.\r\n\r\n",
      "created_at": "2021-10-01T17:44:18Z",
      "updated_at": "2021-10-01T17:44:18Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> My gut feeling is there's some code that gets the attributes for the file's parent, and that sometimes this ends up in the object returned by `Get-Item` instead of the child's attributes.\r\n\r\nHmm I'm confused, don't the results show the same problem present? Or was that mistakenly old results?",
      "created_at": "2021-10-01T17:54:14Z",
      "updated_at": "2021-10-01T17:54:14Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Yes the new test shows the same problem. \r\n\r\nAnd indeed, there's no `Get-Item` involved anymore. \r\n\r\nSo yes I mixed up my new results and my older hypothesis. \r\nSorry for that. ",
      "created_at": "2021-10-01T18:28:14Z",
      "updated_at": "2021-10-02T14:48:28Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "I think the next step will be to write something in C# that reproduces \"exactly\" what the PowerShell script does, complete with searching for files in the tree etc.",
      "created_at": "2021-10-02T14:49:18Z",
      "updated_at": "2021-10-02T14:49:18Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I think to close the issue until we get more information.",
      "created_at": "2021-11-30T05:56:27Z",
      "updated_at": "2021-11-30T05:56:27Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2021-12-01T12:00:46Z",
      "updated_at": "2021-12-01T12:00:46Z"
    },
    {
      "author": "sba923",
      "author_association": "CONTRIBUTOR",
      "body": "Still haven't found bandwidth to write the C# test thingie, but FWIW the issue is still present in PowerShell 7.3.0-preview.1",
      "created_at": "2021-12-21T11:07:49Z",
      "updated_at": "2021-12-21T11:07:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Intrigue! \ud83d\ude3a ",
      "created_at": "2021-12-21T11:19:33Z",
      "updated_at": "2021-12-21T11:19:33Z"
    }
  ],
  "created_at": "2021-09-20T04:50:10Z",
  "labels": [
    "Resolution-Answered",
    "Needs-Triage"
  ],
  "number": 16124,
  "state": "closed",
  "title": "Get-Item for a file sometimes returns a DirectoryInfo object",
  "updated_at": "2021-12-21T11:19:34Z"
}