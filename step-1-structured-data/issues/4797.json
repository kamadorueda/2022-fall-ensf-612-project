{
  "_url": "https://github.com/PowerShell/PowerShell/issues/4797",
  "author": "vors",
  "body": "Steps to reproduce\r\n------------------\r\n\r\nGet a folder with a decent number of files (65k will do)\r\nTry to do autocompletion on file name in this folder\r\n\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nRespond time comparable with bash completion (about a second)\r\n\r\nActual behavior\r\n---------------\r\n\r\nNo response for 12 seconds (appears like a hang)\r\n\r\nFor comparisons, `ls | measure` in the same folder takes about 4 seconds (3 times faster), which hints that there is a room for improvements even without a big rewrite for the completion logic.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value                                           \r\n----                           -----                                           \r\nPSVersion                      6.0.0-beta                                      \r\nPSEdition                      Core                                            \r\nGitCommitId                    v6.0.0-beta.5                                   \r\nOS                             Darwin 16.7.0 Darwin Kernel Version 16.7.0: T...\r\nPlatform                       Unix                                            \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                         \r\nPSRemotingProtocolVersion      2.3                                             \r\nSerializationVersion           1.1.0.1                                         \r\nWSManStackVersion              3.0   \r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "Scholars-Mate",
      "author_association": "NONE",
      "body": "I looked into this a little and here's what I found. I used 65,000 empty files in a tmpfs on Debian Stretch. Tab completion in this directory took more than 16 seconds to complete. Pretty much all of the time spent during tab completion is focused in two places:\r\n\r\nThe globbing done here took around 25% of the time:\r\nhttps://github.com/PowerShell/PowerShell/blob/16d7a62195cb15156c134748e72ae23bd8923241/src/System.Management.Automation/engine/CommandCompletion/CompletionCompleters.cs#L4072-L4077\r\nGlobbing in general seems to be slower than Bash. Running `Get-ChildItem *` in PowerShell in the directory with 65,000 files takes around 12 seconds compared to less than a second for the Bash equivalent.\r\n\r\nThe remaining 75% of the time is spent in this large loop:\r\nhttps://github.com/PowerShell/PowerShell/blob/16d7a62195cb15156c134748e72ae23bd8923241/src/System.Management.Automation/engine/CommandCompletion/CompletionCompleters.cs#L4215-L4373\r\n\r\n[This flame graph](https://github.com/PowerShell/PowerShell/files/1755724/flame.svg.gz), can give some insight into areas that could be improved. The most notable functions are `CompletionRequiresQuotes()`, `ExecuteCurrentPowerShell()`, `get_ProviderPath()`, and `NormalizeRelativePath()`. @smaeul and @vors discussed how the provider path could be an easy target for optimization given that all of the results of the tab completion should share the same provider.",
      "created_at": "2018-02-25T05:43:49Z",
      "updated_at": "2018-02-25T05:43:49Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "Thank you @Scholars-Mate for investigating this!\r\nHere is a small glimpse into the flame graph, to encourage others to take a look at it\r\n\r\n![image](https://user-images.githubusercontent.com/816680/36638613-728a02de-19bf-11e8-8393-a88a77ddfad3.png)",
      "created_at": "2018-02-25T06:05:42Z",
      "updated_at": "2018-02-25T06:05:42Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "There is a lot of work going on in .NET core in this area that we should get with the 2.1 release.",
      "created_at": "2018-02-26T05:37:18Z",
      "updated_at": "2018-02-26T05:37:18Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "@powercode do you mean perf tools or performance work we will benefit from? Are we getting something for free in the new dotnet core?",
      "created_at": "2018-02-27T00:23:21Z",
      "updated_at": "2018-02-27T00:23:21Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "@vors They are doing a ton of work regarding efficient file enumeration/projection, and a lot of getting `Span<T>` based interfaces in place to reduce allocations. Looks very promising.\r\n\r\nI'm a bit involved in getting better abstractions for efficient regex's so we can make `Select-String` fast.\r\n",
      "created_at": "2018-02-27T12:37:34Z",
      "updated_at": "2018-02-27T12:37:34Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "@Scholars-Mate, @vors do you remember how you created that flame graph? It would be really nice to reproduce that for other performance issues!",
      "created_at": "2018-07-18T23:57:22Z",
      "updated_at": "2018-07-18T23:57:22Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "I think we followed this article http://blogs.microsoft.co.il/sasha/2017/02/27/profiling-a-net-core-application-on-linux/\r\nThere was not much customization, just make sure to run a debug build with symbols, so the names are populated.",
      "created_at": "2018-07-19T01:18:56Z",
      "updated_at": "2018-07-19T01:18:56Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Oh awesome! Thanks @vors!",
      "created_at": "2018-07-19T01:33:00Z",
      "updated_at": "2018-07-19T01:33:00Z"
    }
  ],
  "created_at": "2017-09-10T05:45:32Z",
  "number": 4797,
  "state": "open",
  "title": "Tab completion in large folders is very slow",
  "updated_at": "2018-07-19T01:33:00Z"
}