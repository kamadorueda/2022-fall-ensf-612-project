{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3773",
  "author": "mklement0",
  "body": "Note: The problem was first discovered with `-OutVariable`  - see  #3154.  \r\nThe problem applies to all `-*Variable` common parameters, however, with the exception of `-PipelineVariable` (which inherently captures a _single_ item at time).\r\n\r\nTo recap the problem:\r\n\r\n* Even if only a _single_ value is captured by these parameters, an _array list_ rather than a scalar is returned (the single-element collection isn't unwrapped - a deviation from PowerShell's normal collection handling).\r\n\r\n* Also - another deviation from usual PowerShell behavior - it is type `[System.Collections.ArrayList]` that is always used, in contrast with the `[System.Object[]]` instances you get with _regular_ assignments.\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n# Adv. function that outputs a single item of each type.\r\nfunction foo {\r\n  [CmdletBinding()]\r\n  param()\r\n  \r\n  Write-Warning 'warn'\r\n  Write-Information 'info'\r\n  Write-Error 'err'\r\n  'out'\r\n}\r\n\r\nfoo -OutVariable ov -ErrorVariable ev -WarningVariable wv -InformationVariable iv  *>$null\r\n\r\n$ov, $ev, $wv, $iv | % GetType | % Name\r\n```\r\n\r\n\r\nExpected behavior\r\n-----------------\r\n\r\n```\r\nString\r\nErrorRecord\r\nWarningRecord\r\nInformationRecord\r\n```\r\n\r\nActual behavior\r\n---------------\r\n\r\n```\r\nArrayList\r\nArrayList\r\nArrayList\r\nArrayList\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nPowerShell Core v6.0.0-beta (v6.0.0-beta.1)\r\n```\r\n",
  "closed_at": "2018-03-19T16:05:17Z",
  "comments": [
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "While I agree that it's weird that this doesn't behave like pipeline output (and I insist that the *only* thing that PowerShell does this for is pipeline output) ...\r\n\r\nIt has been like this since the beginning.\r\n\r\nChanging it at this point doesn't help much, and risks breaking all existing code that relies on these common parameters ...",
      "created_at": "2018-03-16T17:36:52Z",
      "updated_at": "2018-03-16T17:36:52Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@Jaykul: If the consensus is that this change is too risky, so be it, and _documenting_ the issue is the best we can do.\r\nPersonally, I think it's a wart that warrants removal - it can trip up new users (as it did me).\r\n\r\n> and I insist that the only thing that PowerShell does this for is pipeline output\r\n\r\nThat is not much of a restriction, however, given the pervasive use of pipelines, even in places where it is not obvious:`$(...)`, `@(...)`, `&`, `.`,  script-block arguments.\r\n\r\nTo give a few examples, all of which output `$True`:\r\n\r\n```powershell\r\n$(, 1) -is [int]\r\n(. { , 1 }) -is [int]\r\n(& { , 1 }) -is [int]\r\n('' | Select-Object @{ n='foo'; e = { , 1 } }).foo -is [int]\r\n```\r\n\r\n<sup>There is no `@(...)` example, because `@(...)` by design ensures _array-valued_ output - though it would still recreate any input collection as a `[object[]]` array.</sup>\r\n",
      "created_at": "2018-03-17T09:31:56Z",
      "updated_at": "2018-03-17T09:31:56Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "The point is: you're saying you want to change 4 common parameters (two of which have been around since the beginning) to change their type after the end of the pipeline (they obviously still have to be an Arraylist within the pipeline). That's a serious breaking change.\r\n\r\nYour justification is just that you want it to be more like pipeline output.\r\n\r\nMy point is that making these common parameters more like pipeline output doesn't seem like a useful goal. They are not _like_ pipeline output -- they are output _parameters_. In fact, sometimes (when you use the +name syntax) they are actually _reference_ parameters. Additionally, _they exist within_ the pipeline. -- where they are more like streams than a finished output collection -- and changing them from the live stream type to something else at the end would just be confusing.",
      "created_at": "2018-03-19T07:35:49Z",
      "updated_at": "2018-03-19T07:35:49Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> Your justification is just that you want it to be more like pipeline output.\r\n> They are not like pipeline output -- they are output parameters.\r\n\r\nIn the case of `-OutVariable` the very purpose of the parameter is to capture _pipeline output_\r\nand my primary concern is over the lack of symmetry between `$var = ...` and `... -OutVariable var`.\r\n\r\nI agree that the case is not clear-cut for the _other_ `-*Variable` parameters in terms of unwrapping behavior, though my vote is for consistency.\r\n\r\nTo avoid a distraction, I'll close this issue, so we can focus on the behavior of `-OutVariable`, and the outcome of that discussion can then inform treatment of the other `-*Variable` parameters.\r\n\r\nLet's continue the discussion [here](https://github.com/PowerShell/PowerShell-RFC/pull/120#issuecomment-374265473).\r\n",
      "created_at": "2018-03-19T16:05:16Z",
      "updated_at": "2018-03-19T16:05:16Z"
    }
  ],
  "created_at": "2017-05-12T14:39:00Z",
  "number": 3773,
  "state": "closed",
  "title": "Common parameters -OutVariable, -ErrorVariable, -WarningVariable, and -InformationVariable always return a [System.Collections.ArrayList] instance, even with a single object",
  "updated_at": "2018-03-19T16:05:17Z"
}