{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7686",
  "author": "jazzdelightsme",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\n- Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n- Fill out the following repro template:\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nI ran into this very strange exception the other day when trying to use the PerfView tracing library to process some ETL files in PowerShell. When calling the `Process` method on an `ETWTraceEventSource` object, it throws an `InvalidCastException`, but it seems to make no sense.\r\n\r\nThe signature of the method in question is:\r\n\r\n```\r\nPS C:\\Users\\danthom\\AppData\\Local\\Temp\\aixgncuv.npy> $traceEventSource.Process\r\n\r\nOverloadDefinitions\r\n-------------------\r\nbool Process()\r\n```\r\n\r\nSeems like it should be straightforward to call, right? But when you do, you get this eyebrow-raising error:\r\n\r\n```\r\nThe result type 'System.Boolean' of the dynamic binding produced by binder 'PSInvokeMember: Process ver:0 args:0 constraints:<>' is not compatible with the result type 'System.Object' expected by the call site.\r\nAt line:41 char:1\r\n+ $traceEventSource.Process()\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : OperationStopped: (:) [], InvalidCastException\r\n+ FullyQualifiedErrorId : System.InvalidCastException\r\n```\r\n\r\nWhat's up with that?\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```powershell\r\n$tmpDir = Join-Path ([system.io.path]::GetTempPath()) ([system.io.path]::GetRandomFileName())\r\n\r\nWrite-Host \"Creating temporary repro directory: $tmpDir\" -Fore Cyan\r\n\r\n$null = mkdir $tmpDir\r\nPush-Location $tmpDir\r\n\r\n\r\n$zipFile = '.\\Microsoft.Diagnostics.Tracing.TraceEvent.zip'\r\n$uri = 'https://github.com/Microsoft/perfview/releases/download/T.2.0.22.0/Microsoft.Diagnostics.Tracing.TraceEvent.2.0.22.nupkg'\r\n\r\nWrite-Host \"Downloading $zipFile\" -Fore Cyan\r\n\r\niwr -UseBasicParsing -Uri $uri -Outfile $zipFile\r\n\r\n$dir = '.\\Microsoft.Diagnostics.Tracing.TraceEvent'\r\nExpand-Archive $zipFile -Dest $dir\r\n\r\n$dllPath = \"$dir\\lib\\netstandard2.0\\Microsoft.Diagnostics.Tracing.TraceEvent.dll\"\r\n\r\nImport-Module $dllPath\r\n\r\n# We need an .etl... well, let's just create one real quick, I guess.\r\n\r\nWrite-Host \"Creating an ETL file (tmp.etl)...\" -Fore Cyan\r\n\r\n$etlFile = Join-Path $PWD 'tmp.etl'\r\n\r\n$traceSession = [Microsoft.Diagnostics.Tracing.Session.TraceEventSession]::new( 'PsBugReproSession', $etlFile )\r\n\r\n$traceSession.EnableWindowsHeapProvider( $pid )\r\nstart-sleep -seconds 3\r\n$traceSession.Dispose()\r\n\r\n$traceEventSource = [Microsoft.Diagnostics.Tracing.ETWTraceEventSource]::new( $etlFile )\r\n\r\nWrite-Host \"Now let's read through all the events in the .etl file...\" -Fore Yellow\r\n\r\n# Moment of truth... will this work?\r\n$traceEventSource.Process()\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\nNo errors.\r\n\r\nActual behavior\r\n---------------\r\n\r\n```none\r\nThe result type 'System.Boolean' of the dynamic binding produced by binder 'PSInvokeMember: Process ver:0 args:0 constraints:<>' is not compatible with the result type 'System.Object' expected by the call site.\r\nAt line:41 char:1\r\n+ $traceEventSource.Process()\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : OperationStopped: (:) [], InvalidCastException\r\n+ FullyQualifiedErrorId : System.InvalidCastException\r\n```\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\n> $PSVersionTable\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.1.0-rc.1\r\nPSEdition                      Core\r\nGitCommitId                    6.1.0-rc.1\r\nOS                             Microsoft Windows 10.0.17744\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@jazzdelightsme  Thanks for great repo!\r\n\r\nI agree that it is bad message. The binder is very complex. Perhaps @daxian-dbw know how/where we can improver the message.\r\n\r\nAs for th error I guess you should assign a callback\r\nFrom https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Components.PostAttachments/00/10/44/21/52/_TraceEventProgrammersGuide.docx\r\n```c++\r\nusing Microsoft.Diagnostics.Tracing;\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        using (var source = new ETWTraceEventSource(\"MyEventData.etl\"))\r\n        {\r\n            // Set up the callbacks \r\n            source.Dynamic.All += delegate(TraceEvent data) {\r\n                Console.WriteLine(\"GOT EVENT {0}\", data);\r\n            };\r\n            source.Process(); // Invoke callbacks for events in the source\r\n        }\r\n    }\r\n}\r\n```\r\n",
      "created_at": "2018-09-03T06:35:09Z",
      "updated_at": "2018-09-03T06:35:09Z"
    },
    {
      "author": "jazzdelightsme",
      "author_association": "CONTRIBUTOR",
      "body": "No, adding a callback is no help (I left it out because it is not important to the repro). And it makes sense that having a callback or not is relevant to the problem: if `$traceEventSource.Process()` were complaining that I was not using it right, that would imply that the `Process()` method was being called... but it cannot be, because PS failed during binding.\r\n\r\nAlso, the problem can be worked around by using `Add-Type` to add some C# code to call the `Process()` method, which then works with no problem. And it works fine without adding any callbacks (though it is not useful, of course).\r\n\r\nThis error is strange to me, because I don't recall ever having seen a binder error before. What is so special about this no-argument, bool-returning method?!\r\n\r\nP.S. To anybody actually trying to use the TraceEvents.dll library from PowerShell, I would recommend NOT using `TraceEventSource` anyway; use `TraceLog` instead, which reads in all the events up-front and then you can slice-n-dice in PS.\r\n\r\n```powershell\r\n$traceLog = [Microsoft.Diagnostics.Tracing.Etlx.TraceLog]::OpenOrConvert( $etlFile )\r\n```",
      "created_at": "2018-09-03T16:01:51Z",
      "updated_at": "2018-09-03T16:01:51Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@jazzdelightsme Thanks for workaround with Add-Type. Looks like an edge case bug in binder.",
      "created_at": "2018-09-04T03:09:54Z",
      "updated_at": "2018-09-04T03:09:54Z"
    }
  ],
  "created_at": "2018-09-02T05:13:10Z",
  "number": 7686,
  "state": "open",
  "title": "Unexpected InvalidCastException from dynamic binding when calling particular .NET method",
  "updated_at": "2018-09-04T03:09:54Z"
}