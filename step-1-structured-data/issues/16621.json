{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16621",
  "author": "rkitover",
  "body": "### Summary of the new feature / enhancement\n\nI would really like to be able to write commands like:\r\n\r\n```powershell\r\nri -r -f somedir\r\n```\r\n\r\ncurrently I have to write:\r\n\r\n```powershell\r\nri -r -fo somedir\r\n```\r\n\r\nbecause PowerShell will throw an error about -f being ambiguous since there is also `-Filter`..\r\n\r\nIf we can agree that when people use `-f` they generally mean `-Force` when that parameter is available, as is common in POSIX commands.\r\n\r\nI would like it even better if I could write:\r\n\r\n```powershell\r\nri -rf somedir\r\n```\r\n\r\nbut that is a much more complicated issue for another time.\n\n### Proposed technical implementation details (optional)\n\nIn the parameter disambiguation code path, check for `-f` and see if a full parameter `-Force` is available, when there are multiple matches. Should be fairly simple. I could give it a try if you like.",
  "closed_at": "2021-12-16T20:00:52Z",
  "comments": [
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "I think it's a bad idea to create this kind of inconsistency. It's not very intuitive to have one magic word that changes the way parameter binding works, and if we add -f today someone will ask for -r tomorrow and then it gets too complicated to learn.  \r\nPersonally I don't think this feature should even have existed in the first place, explicit parameter names and aliases should have been enough, especially with the great tab completion we have.",
      "created_at": "2021-12-15T15:11:01Z",
      "updated_at": "2021-12-15T15:11:01Z"
    },
    {
      "author": "kasini3000",
      "author_association": "NONE",
      "body": "https://www.cnblogs.com/piapia/p/15403242.html\r\nI want to sell you my PowerShell TUI free script \"power alias\"\n\n<blockquote><img src=\"//common.cnblogs.com/favicon.svg\" width=\"48\" align=\"right\"><div><strong><a href=\"https://www.cnblogs.com/piapia/p/15403242.html\">powershell \u7f16\u5199\u7684tui\u754c\u9762\u811a\u672c\u300a\u7535\u58f3\u522b\u540d\u5b9d\u300b - PowerShell\u514d\u8d39\u8f6f\u4ef6 - \u535a\u5ba2\u56ed</a></strong></div><div>\u300a\u7535\u58f3\u522b\u540d\u5b9d\u300b\u662f\u4e00\u6b3e\u6211\u521a\u5199\u597d\uff0c\u5206\u4eab\u7684\uff0ctui\u56fe\u5f62\u754c\u9762\u811a\u672c\u7a0b\u5e8f\u3002\ntui\u754c\u9762\u7684\u3010linux\u547d\u4ee4-\u522b\u540d\u3011\u7a0b\u5e8f\uff0c\u522b\u540d\u652f\u6301\u4e2d\u6587\uff0c\u4e3b\u8981\u7528\u5728linux\u7cfb\u7edf\u4e2d\u3002\u4e3b\u6cbb\uff1a\u8bb0\u4e0d\u4f4flinux\u547d\u4ee4\u3002</div></blockquote>",
      "created_at": "2021-12-15T16:36:56Z",
      "updated_at": "2021-12-15T16:36:58Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Dup #11310",
      "created_at": "2021-12-15T17:39:49Z",
      "updated_at": "2021-12-15T17:39:49Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as duplicate and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2021-12-16T20:00:51Z",
      "updated_at": "2021-12-16T20:00:51Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "Just to share something for the @rkitover  \r\nPsReadline lets you run a script when Enter is pressed and that could change the -f to -force , the following works but I have not tested it heavily\r\n\r\n```PowerShell\r\nSet-PSReadLineKeyHandler -Key Enter -ScriptBlock {\r\n    param($key, $arg)\r\n    $line   = $null\r\n    $cursor = $null\r\n    [Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState([ref]$line, [ref]$cursor) \r\n    $r = [regex]::Match($line,'\\s-f\\b')\r\n    if ($r.Success) { [Microsoft.PowerShell.PSConsoleReadLine]::Replace($r.Index, $r.Length, '  -Force') } \r\n    [Microsoft.PowerShell.PSConsoleReadLine]::AcceptLine()\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2021-12-19T18:08:25Z",
      "updated_at": "2021-12-19T18:08:25Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "@jhoneill that is amazing, and opens up many possibilities, thank you very much!",
      "created_at": "2021-12-19T18:42:59Z",
      "updated_at": "2021-12-19T18:42:59Z"
    },
    {
      "author": "rkitover",
      "author_association": "CONTRIBUTOR",
      "body": "One possibility I thought of, is that this could be used to make an alias system similar to bash, as in, a hook for a command word that does not affect anything else.",
      "created_at": "2021-12-19T23:34:06Z",
      "updated_at": "2021-12-19T23:34:06Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@rkitover   You can use it in lots of ways.  :-) \r\n\r\nIf you're going to have lots of search and replace terms  for perf, I'd make one big regex  in advance, and compiled\r\n```PowerShell \r\n $global:cmdRegex = [regex]::new( ' - f\\b' -p\\b' ,'Compiled')    \r\n```\r\nAnd them  in the script block I'd have \r\n```PowerShell\r\n$replacement = @{' -f'=' -Force '; '-p'=' -Path ' } \r\n$r = $cmdRegex.Match($line)                                                      \r\nIf ($r.success)  { [Microsoft.PowerShell.PSConsoleReadLine]::Replace($r.Index, $r.Length,  $replacement[$r.value] ) } \r\n````\r\n\r\nThat way you avoid creating lots of regex objects and avoid a switch / multi-part if with  branch per option.\r\n",
      "created_at": "2021-12-20T11:52:14Z",
      "updated_at": "2021-12-20T11:52:14Z"
    }
  ],
  "created_at": "2021-12-15T11:52:55Z",
  "labels": [
    "Resolution-Duplicate",
    "Issue-Enhancement",
    "Needs-Triage",
    "WG-Engine-ParameterBinder"
  ],
  "number": 16621,
  "state": "closed",
  "title": "Disambiguate -f to -Force when available.",
  "updated_at": "2021-12-20T11:52:14Z"
}