{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12807",
  "author": "IarwainBen-adar",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6).\r\n\r\n-->\r\n\r\n# Steps to reproduce\r\n\r\n1. Install [WinCompose](https://github.com/samhocevar/wincompose) v0.9.4 (default settings: <kbd>right Alt</kbd> key set to <kbd>compose</kbd>)\r\n2. Open PowerShell 7\r\n3. Ensure that `$OutputEncoding`, `[System.Console]::InputEncoding`, and `[System.Console]::OutputEncoding` are all set to UTF-8\r\n4. Type Unicode character composition `\u00e5` via compose key sequence <kbd>compose</kbd><kbd>o</kbd><kbd>a</kbd> = `\u00e5`\r\n5. Observe that no character is sent to PowerShell 7 (no Unicode error character, no fallback character `a` either)\r\n6. Copy/paste the `\u00e5` character to PowerShell and observe that it renders correctly\r\n7. Type <kbd>left Alt</kbd><kbd>0</kbd><kbd>2</kbd><kbd>2</kbd><kbd>9</kbd> in PowerShell 7 and observe that `\u00e5` is sent to the shell\r\n8. Repeat the compose key test in cmd.exe and observe that <kbd>compose</kbd><kbd>o</kbd><kbd>a</kbd> properly sends `\u00e5` to the cmd.exe shell\r\n9. Repeat the compose key test in a Windows Terminal-hosted PowerShell 7 tab and observe that <kbd>compose</kbd><kbd>o</kbd><kbd>a</kbd> properly sends `\u00e5` to the Windows Terminal shell\r\n\r\n# Expected behavior\r\n\r\nI would expect compose key compositions to work in PowerShell 7 the same as they do in Windows Terminal or cmd.exe\r\n\r\n# Actual behavior\r\n\r\nPowerShell 7 can output Unicode characters, and PowerShell 7 can receive Unicode characters as input from the clipboard and other sources, but PowerShell 7 does not seem to be able to receive compose key Unicode character compositions\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.0.1\r\nPSEdition                      Core\r\nGitCommitId                    7.0.1\r\nOS                             Microsoft Windows 10.0.18363\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": "2020-05-27T16:21:30Z",
  "comments": [
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Does this still occur if you unload PSReadLine? (`Remove-Module PSReadLine`)",
      "created_at": "2020-05-27T03:31:18Z",
      "updated_at": "2020-05-27T03:31:18Z"
    },
    {
      "author": "IarwainBen-adar",
      "author_association": "NONE",
      "body": "@vexx32 no, this does not occur if PSReadLine is unloaded! Is this some known conflict? Does PSReadLineKeyHandler's key binding system not distinguish between left and right <kbd>Alt</kbd> keys? If I remove all <kbd>Alt</kbd> key combinations from PSReadLineKeyHandler, would you expect PSReadLine to still conflict with a <kbd>right Alt</kbd> compose key?\r\n\r\nEdit: even if there are no PSReadLineKeyHandler chords defined that use the <kbd>Alt</kbd> key, PSReadLine still seems to block <kbd>compose</kbd> key functionality, so it seems that the only resolution to the conflict would be to unload the PSReadLine module. This is unfortunate. The PSReadLine key bindings are extremely useful, but so are Unicode character compositions.",
      "created_at": "2020-05-27T03:38:56Z",
      "updated_at": "2020-05-27T03:51:25Z"
    },
    {
      "author": "IarwainBen-adar",
      "author_association": "NONE",
      "body": "That definitely solves part of they mystery (thank you @vexx32 ), but it leaves me puzzled as to why a PowerShell 7 tab hosted within Windows Terminal can accept Unicode character compositions even while the PSReadLine module is loaded?",
      "created_at": "2020-05-27T04:03:08Z",
      "updated_at": "2020-05-27T04:03:08Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I'm not really sure, but by the sounds of it it's something in how PSReadLine interacts with the default console host vs the Windows Terminal. I'd guess you should file the issue in the [PSReadLine](/PowerShell/PSReadLine) repo so it can be triaged appropriately; that module's not managed in the main PowerShell repo. \ud83d\ude42 ",
      "created_at": "2020-05-27T12:26:40Z",
      "updated_at": "2020-05-27T12:26:40Z"
    },
    {
      "author": "IarwainBen-adar",
      "author_association": "NONE",
      "body": "OK, I'll close this and re-submit the issue under [PSReadLine](https://github.com/PowerShell/PSReadLine) instead. Thank you.",
      "created_at": "2020-05-27T16:21:25Z",
      "updated_at": "2020-05-27T16:21:25Z"
    }
  ],
  "created_at": "2020-05-27T03:28:15Z",
  "labels": [
    "Issue-Question"
  ],
  "number": 12807,
  "state": "closed",
  "title": "Unable to send unicode characters to PowerShell 7 via wincompose",
  "updated_at": "2020-05-27T16:21:30Z"
}