{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11547",
  "author": "he852100",
  "body": "Unrecognizable and processed, garbled.\r\nExample\r\n```powershell\r\n$url='https://storage.live.com/items/A78ACCAEBB24EDD7!37945?&authkey=!APfFKTYtceWCfG0'\r\n$g='./xmltest'\r\n$reg='pN|utf'\r\n((irm $URL) -split \"[`r`n]+\") -match $reg\r\nirm $URL -outfile $g\r\n(get-content   $g)-match $reg\r\n```\r\nExpected\r\n```powershell\r\nPS /sh> irm $URL\r\n\r\nxml                            Folder\r\n---                            ------\r\nversion=\"1.0\" encoding=\"utf-8\" Folder\r\n\r\nPS /sh> (irm $URL).Folder.Items.Document\r\n\r\nItemType ResourceID             RelationshipName\r\n-------- ----------             ----------------\r\nDocument A78ACCAEBB24EDD7!37948 \u6d4b\u8bd5.json\r\n```\r\n\r\nResults\r\n```powershell\r\nPS /sh> (iwr $URL).Headers.'Content-Type'\r\ntext/xml\r\nPS /sh> ((irm $URL) -split \"[`r`n]+\") -match $reg\r\n\u00ef\u00bb\u00bf<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n      <RelationshipName>\u00e6\u00b5\u00e8\u00af.json</RelationshipName>\r\n  <RelationshipName>BingClients</RelationshipName>\r\n```\r\nRead saved files,Seems no problem.\r\n```powershell\r\nPS /s> (get-content  ../aa/irm )-match 'pN|utf'\r\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<RelationshipName>\u6d4b\u8bd5.json</RelationshipName>\r\n<RelationshipName>BingClients</RelationshipName>\r\nPS /sdcard/Documents/sh>\r\n```\r\ncurl\r\n```powershell\r\nPS /sdcard/Documents/sh> ((curl $URL) -split \"[`r`n]+\") -match $reg\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n100  2693  100  2693    0     0   2170      0  0:00:01  0:00:01 --:--:--  2170\r\n\ufeff<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n      <RelationshipName>\u6d4b\u8bd5.json</RelationshipName>\r\n  <RelationshipName>BingClients</RelationshipName>\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "he852100",
      "author_association": "NONE",
      "body": "> The problem is that [live.com](HTTPs://live.com) is not returning the encoding it's using in its headers. **PowerShell obeys the standard by assuming ISO-8859-1, but unfortunately the site is using UTF-8**. \r\n\r\n<blockquote><img src=\"https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded\" width=\"48\" align=\"right\"><div>Stack Overflow</div><div><strong><a href=\"https://stackoverflow.com/questions/47952689/powershell-invoke-webrequest-and-character-encoding\">Powershell Invoke-WebRequest and character encoding</a></strong></div><div>I am trying to get information from the Spotify database through their Web API.\r\nHowever, I'm facing issues with accented vowels (\u00e4,\u00f6,\u00fc etc.)\r\n\r\nLets take Ti\u00ebsto as an example.\r\nSpotify's API Browser can </div></blockquote>",
      "created_at": "2020-01-10T06:17:25Z",
      "updated_at": "2020-01-12T01:38:26Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@he852100 Please add info about PowerShell version. Can you repo with latest PowerShell Core build?",
      "created_at": "2020-01-11T16:50:29Z",
      "updated_at": "2020-01-11T16:50:29Z"
    },
    {
      "author": "he852100",
      "author_association": "NONE",
      "body": "```powershell\r\nPSVersion                      7.0.0-daily.20200110\r\nPSEdition                      Core\r\nGitCommitId                    7.0.0-daily.20200110\r\nOS                             Linux 3.10.0-1062.9.1.el7.x86_64 \u2026\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n\r\n```powershell\r\nsh> Invoke-WebRequest 'https://pscoretestdata.blob.core.windows.net/v7-0-0-daily-20200110/powershell-7.0.0-daily.20200110-linux-arm64.tar.gz' -O ~/powershell.tar.gz -Resume\r\nStatusCode        : 416                                           \r\nStatusDescription : RequestedRangeNotSatisfiable                  \r\nContent           : \u00ef\u00bb\u00bf<?xml version=\"1.0\" encoding=\"utf-8\"?><Error><Code>InvalidRange</Code><Message>The rang\r\n                    e specified is invalid for the current size of the resource.\r\n                    RequestId:e8b88225-401e-0127-7cdc-c866f8000000\r\n\r\nPS /root> $a.headers.GetEnumerator()\r\n\r\nKey             Value\r\n---             -----\r\nServer          {Windows-Azure-Blob/1.0, Microsoft-HTTPAPI/2.0}\r\nx-ms-request-id {322455bd-301e-008d-77e3-c8f642000000}\r\nx-ms-version    {2014-02-14}\r\nDate            {Sun, 12 Jan 2020 00:56:33 GMT}\r\nContent-Length  {249}\r\nContent-Type    {application/xml}\r\nContent-Range   {bytes */46486387}\r\n```\r\n[Windows.net](Https://windows.net)\r\n\r\n**PowerShell obeys the standard by assuming ISO-8859-1, but unfortunately the site is using UTF-8.**",
      "created_at": "2020-01-12T00:42:44Z",
      "updated_at": "2020-01-12T01:34:31Z"
    },
    {
      "author": "he852100",
      "author_association": "NONE",
      "body": "@iSazonov It can be determined that powershell does not recognize utf8bom",
      "created_at": "2020-01-12T03:08:12Z",
      "updated_at": "2020-01-12T03:08:12Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@he852100 I guess it comes from .Net Core.",
      "created_at": "2020-01-12T14:05:07Z",
      "updated_at": "2020-01-12T14:05:07Z"
    },
    {
      "author": "scriptingstudio",
      "author_association": "NONE",
      "body": "> @he852100 I guess it comes from .Net Core.\r\n\r\nThat comes from PS5 and older. If website saying, i'm `utf8`, why does `iwr` return `ascii`?",
      "created_at": "2020-01-13T09:29:14Z",
      "updated_at": "2020-01-13T09:29:14Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Note: I don't know what the _intended_ behavior is, but here is what seems to be happening:\r\n\r\nBecause the response doesn't indicate a character encoding (`charset`) in its `Content-Type` header field (`text/xml` rather than `text/xml; charset=utf-8`), PowerShell defaults to ISO-8859-1, in accordance with the - obsolete since 2014 - RFC 2616.\r\n\r\nBecause it blindly assumes ISO-8859-1, the UTF-8 BOM is read as _data_, and the payload is therefore not recognized as XML, which falls back to a(n incorrectly decoded) string instead of returning an `XmlDocument` instance.\r\n\r\nNote that  current RFC, [RFC 7231](https://tools.ietf.org/html/rfc7231), no longer mandates an overall default and instead defers to the default encoding of the given media type.\r\nFor XML, [RFC 7303](https://tools.ietf.org/html/rfc7303) mandates looking at the BOM first and if there is none at the `charset` attribute in the `Content-Type` header. If that isn't present either, respect the encoding specified in the XML declaration, and if there is none, default to UTF-8.\r\n\r\nGiven that HTM5 now also defaults to UTF-8 and given that RFC 2616 is obsolete, we should consider implementing the following logic in both `Invoke-WebRequest` and `Invoke-RestMethod`:\r\n\r\n* respect a BOM, if present\r\n* if there is no BOM, respect a `charset` attribute in `Content-Type`\r\n* otherwise, for XML and HTML, respect the encoding specified in the XML declaration (e.g. `<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>`) / HTML `<meta>` element, if present (green-lit in #3267)\r\n* If none of the above applies, default to UTF-8.\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2020-05-31T20:09:16Z",
      "updated_at": "2020-05-31T20:15:54Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Currently we have many workarounds. I guess they comes from PS 5.0. \r\nNow we could use HttpContent.ReadAsStringAsync() method. It seems it already has the decoding logic \r\nhttps://github.com/dotnet/runtime/blob/bd6cbe3642f51d70839912a6a666e5de747ad581/src/libraries/System.Net.Http/src/System/Net/Http/HttpContent.cs#L182\n\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/9141961?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/dotnet/runtime\">dotnet/runtime</a></strong></div><div>.NET is a cross-platform runtime for cloud, mobile, desktop, and IoT apps. - dotnet/runtime</div></blockquote>",
      "created_at": "2020-06-01T04:28:48Z",
      "updated_at": "2020-06-01T04:28:50Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "That's promising, @iSazonov, but it looks like the referenced method gives precedence to the `charset` attribute over the payload's BOM, correct?\r\n\r\nThis is the reverse of how XML data is supposed to be handled according to RFC 7303 (leaving the additional need to respect an encoding in the XML declaration aside), and, arguably, for _all_ textual media types, according to section \"5. Security Considerations\" of [RFC 6657](https://tools.ietf.org/html/rfc6657):\r\n\r\n> this document recommends the use of charset information that is more likely to be correct (for example, in-band over out-of-band).\r\n\r\nA BOM is an instance of in-band information, whereas the `charset` header-field attribute is out-of-band information; therefore, the BOM should take precedence.\r\n\r\nTherefore, the method you link to wouldn't solve the problem described in #12861, for instance.\r\n",
      "created_at": "2020-06-01T18:37:34Z",
      "updated_at": "2020-06-01T22:16:29Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> the BOM should take precedence\r\n\r\nIt looks like a .Net bug. You could open new issue in .Net Runtime repo.\r\n\r\nIn common, I guess we could simplify the PowerShell code if we would follow the .Net API.\r\n",
      "created_at": "2020-06-02T03:46:17Z",
      "updated_at": "2020-06-02T03:46:17Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/wg-powershell-cmdlets reviewed this.  We agree that the BOM should take precedence and where it makes sense, the web cmdlets should have the same behavior as curl.  We're explicitly not making any statement about implementation",
      "created_at": "2022-10-05T16:13:33Z",
      "updated_at": "2022-10-05T16:13:33Z"
    }
  ],
  "created_at": "2020-01-10T05:12:55Z",
  "labels": [
    "Issue-Question",
    "Up-for-Grabs",
    "Hacktoberfest",
    "WG-Cmdlets-Utility"
  ],
  "number": 11547,
  "state": "open",
  "title": "Invoke-WebRequest and Invoke-RestMethod do not decode content in accordance with BOM/Content-Type",
  "updated_at": "2022-10-05T16:13:47Z"
}