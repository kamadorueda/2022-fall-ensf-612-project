{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14426",
  "author": "SteveL-MSFT",
  "body": "## Summary of the new feature/enhancement\r\n\r\nThe current rendering of progress has a few issues:\r\n\r\n1. there is a difference in behavior between Windows and Linux/macOS\r\n2. there is quite a bit of empty space that is re-rendered each time and takes up space and affects perf\r\n3. the current progress is rendered using buffercells which is more complex than strings and require more computation and also doesn't support ANSI escape sequences\r\n\r\n## Proposed technical implementation details\r\n\r\nBorrow ideas from popular Linux native commands to have a single line progress bar (although multiple bars are supported at once as well as nested bars) by using ANSI escape inverse sequence to render a progressive bar showing progress over the status description text.\r\n\r\n![Screen-Recording-2021-01-28-at-7](https://user-images.githubusercontent.com/11859881/106301682-da81c780-620c-11eb-998d-d356685a5020.gif)\r\n\r\nSome discussion topics:\r\n\r\n1. do we want to have a consistent experience across all platforms or keep Windows distinct where the progress renders at the top rather than the bottom\r\n\r\n- current proposal allows for existing rendering for those who prefer it and adds a new minimal renderer across all platforms\r\n\r\n2. do we want to retain existing behavior to clear the progress bar once it's complete or keep the last update (which many Linux commands do)\r\n\r\n- based on discussion and also due to how progress rendering works currently, we'll need to clear it to avoid strange artifacts being on the screen particularly when scrolling occurs\r\n\r\n3. do we want to limit the width of the progress bar or let it render the full width of the terminal?  (will spend more time rendering on wide terminals as well as making it more effort to look across the full width for progress information, in my opinion)\r\n\r\n- made this a configurable setting that defaults to 120 chars (this value is used as default in many formatting situations already)",
  "closed_at": "2021-02-05T18:50:20Z",
  "comments": [
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "I imagine it could be annoying to have some progress truncated with ellipses, especially if you then increase the width of the window and it still clips to 120 chars.\r\n\r\nQuestions:\r\nShould the scriptwriter be able to affect the single/multiline rendering decision, or is it completely up to the invoker?\r\n\r\n1. It makes more sense to have progress at the bottom as it doesn't always work great with a flow of output constantly overwriting it when it is at the top. Better make it consistent between platforms.\r\n2. Make this configurable. There are cases when both may be valid.\r\n3. Limit by default, but allow it to change.\r\n\r\nThe thing that annoys me the most with the progress implementation is the inability to express a new \"task\", where other tasks that render progress becomes children.\r\n\r\nSay that you want to do something like the following:\r\n```powershell\r\nfunction Get-CompressedFolder([string] $uri){\r\n   Write-Progress -Activity \"Get data\" -CurrentActivity $uri\r\n   Invoke-RestMethod $uri -output Foo.zip\r\n   Expand-Archive Foo.zip \r\n}\r\n```\r\nThen all progress will end up as siblings when it is clearly a parent/child relationship.\r\n\r\nSo I would like a way to specify the start of a new \"Task\".\r\n\r\n\r\n",
      "created_at": "2020-12-15T11:02:49Z",
      "updated_at": "2020-12-15T11:02:49Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "1. I have no objections to have the same behavior on all platforms. My only concern is that it would be better to make such changes in a version before LTS.\r\nAnd we need to review Windows PowerShell modules before accept the change.\r\n2. We need to keep current behavior otherwise we _break_ a design of many scripts.\r\nI think we need to have separate issue to discuss redesigning the area, I expect it will large discussion because \r\nthere are many contradictions between developers and consumers, between use in scripts and cmdlets, and so on.\r\n3. I agree to limit width to 120 chars - it is enough to have ~1 char per 1%.\r\nWe need to look on minimal width value too while we are here.\r\nIt could raise old question about how often do we need to update the display so that the user does not think about freezing, but again this should be discussed separately.\r\n\r\nIf we intend to make many improvements in this progress bar area we need to open new meta issue and collect all the discussions there. (performance, custom char, and so on)\r\n",
      "created_at": "2020-12-15T12:27:25Z",
      "updated_at": "2020-12-15T12:27:25Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "\r\n> Questions:\r\n> Should the scriptwriter be able to affect the single/multiline rendering decision, or is it completely up to the invoker?\r\n\r\nI think this is one of the key parts. \r\n\r\nThe video of the demo @SteveL-MSFT  posted shows differences people want in their experience. Steve has a two line prompt which uses 4 colours, but I would _hate_ the time for the last command showing in red., or the two colours for the path or PS in a different colour.  I want the prompt as small as possible - in Windows terminal and VScode I start PowerShell with -NoBanner and was one of those who complained with the integrated terminal started using in 1970s mainframe style banner. I prefer original windows tab expansion to the ctrl-space / unix style, I prefer the predictive one line to many lines....  \r\n \r\n**What I want as a user** is \r\n1. Minimum chaff and distractions on the screen. I `don't `want times in my prompt, nor git status. I trim the middle out of the path to keep the prompt short. - compare Steve's prompt with mine\r\n![image](https://user-images.githubusercontent.com/16209593/102227989-1ae9e800-3ee2-11eb-9823-6fc237b98b01.png)\r\n By all means put errors in red but most other colour is actively bad (before you even get to trying to direct stuff with escape sequences in it). Commands should not be \"chatty\"  This sort of output was OK once. \r\n```\r\nResolving name\r\nConnecting to port 443\r\nValidating cert\r\nSSL connection established\r\nGetting file \r\nContent type is application/zip\r\n\"Fetched 1,234,567 bytes in 0.9876 seconds = 1250827.76 bytes/second\r\n```\r\n( @SteveL-MSFT  this isn't always written to std-error) But it just slows me down, I have to read it to discover that I didn't need to read it and for the last 30 years I've been directing that kind of thing to null. \r\n\r\n2. Something which tells me that after a pause of 2-3 seconds the command hasn't stopped, and is doing _something_ (and has moved in the last few seconds.)  Things which do this in limited space (ftp printing # marks along a line) filling in * between     \r\n`[***      ]` is good. Things which print a long list, are bad (see above). \r\n\r\nHow many lines would @PowerCode 's example leave printed ? \r\n\r\n**As an author** \r\n1.  I keep what I write to the console to a minimum, but I do put `write-verbose` in as it serves as a comment as well as a progress indicator. If someone using my code wants step by step progress they can use `-verbose`\r\n2. When I expect things to pause I use write-progress - the information in Write-Progress isn't needed afterwards. \r\n\r\nas @iSazonov  says _We need to keep current behavior otherwise we break a design of many scripts._\r\n\r\nCertainly a lot of my scripts would no longer work as designed and I would need to remove most instances of write-progress. \r\n",
      "created_at": "2020-12-15T14:54:18Z",
      "updated_at": "2020-12-15T14:54:18Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@jhoneill you should ignore my custom prompt as that's not part of any proposed changes nor related to progress bar discussion.\r\n\r\nI believe @iSazonov's referral to \"keep current behavior\" is the Write-Progress API shouldn't change.  What is written to the console is merely decorative and doesn't affect functionality and thus wouldn't break any existing scripts.",
      "created_at": "2020-12-15T15:30:52Z",
      "updated_at": "2020-12-15T15:30:52Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Note that as we have an `$ErrorView` way to change how error messages are presented, we could have a `$ProgressView` to allow choosing between this new presentation vs the existing one.  Although I prefer to have an extension to `$PSStyle` like `$PSStyle.View` and also have `Error` there along with `Progress` keeping them in one place for discovery (`$ErrorView` will always need to exist for compatibility reasons, but `$PSStyle.View.Error` could just reflect that variable).\r\n\r\n@iSazonov I think 7.2 being LTS is a great point.  This is why I'd like to get this as an experimental feature early to get feedback.  It could stay experimental in 7.2 or with user selection, we could make the new presentation default and allow user to go back to the original.",
      "created_at": "2020-12-15T16:03:56Z",
      "updated_at": "2020-12-15T16:05:41Z"
    },
    {
      "author": "peppekerstens",
      "author_association": "NONE",
      "body": "@SteveL-MSFT the behavior you are showing here, to me, is way more consistent than current write-progress 'pop-up' like behavior. Never understood why it was 'that fancy' in first place.\r\n\r\n@jhoneill states: \r\n*When I expect things to pause I use write-progress - the information in Write-Progress isn't needed afterwards.*\r\n\r\nMy understanding of the purpose of write-progress is to inform the user/viewer. Not for pausing purposes per se. With that in mind I do not get why it is perceived as a problem when info remains afterwards on the console output. \r\n\r\nWe are informing a user on the console, not writing a windows like interface with pop-ups and all...\r\n   \r\n ",
      "created_at": "2020-12-15T16:29:46Z",
      "updated_at": "2020-12-15T16:30:32Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I believe @iSazonov's referral to \"keep current behavior\" is the Write-Progress API shouldn't change. What is written to the console is merely decorative and doesn't affect functionality and thus wouldn't break any existing scripts.\r\n\r\nMy thoughts are about _behavior_ - what user see on screen. \r\n\r\n> @iSazonov I think 7.2 being LTS is a great point. This is why I'd like to get this as an experimental feature early to get feedback. It could stay experimental in 7.2 or with user selection, we could make the new presentation default and allow user to go back to the original.\r\n\r\nIf we will have $ProgressView I think we could decide before the 7.2 release what will be the default without experimental feature.\r\n",
      "created_at": "2020-12-15T17:03:11Z",
      "updated_at": "2020-12-15T17:03:11Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> 2\\. do we want to retain existing behavior to clear the progress bar once it's complete or keep the last update (which many Linux commands do)\r\n\r\nClear imo.  Otherwise it'll end up being recommended against for the same reasons that `Write-Host` is still recommended against.\r\n\r\n---\r\n\r\nHow does this interact with `Out-Default`? If you write a progress message, then emit to out default, repeat, what does that look like?",
      "created_at": "2020-12-15T17:11:47Z",
      "updated_at": "2020-12-15T17:11:47Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> @jhoneill you should ignore my custom prompt as that's not part of any proposed changes nor related to progress bar discussion.\r\n\r\n@SteveL-MSFT   yes I understand that, the point I was trying to make is you like your shell one way and I like mine another and neither is more _right_ or less _right_  . Trying to change what exists is likely to upset as many people as it pleases. I'm also quite conservative with these things, I saw no need to change the colour although it turns out to make no difference. I think the notice can go at the top, bottom or under the prompt, provided it is cleaned up by default. (and $progressView is a good idea) \r\n\r\n\r\n> @jhoneill states:\r\n> _When I expect things to pause I use write-progress - the information in Write-Progress isn't needed afterwards._\r\n> \r\n> My understanding of the purpose of write-progress is to inform the user/viewer. Not for pausing purposes per se. With that in mind I do not get why it is perceived as a problem when info remains afterwards on the console output.\r\n\r\n@peppekerstens  Apart from a Perf issue it doesn't pause things. It tells the user \"Things _look_ like they have stopped but I'm downloading / expanding / whatever\".  The need for that information is _transient_.  One example is I get information from Azure devops using the rest API and this takes a couple of minutes. If I'm glancing at my screen I want to see \"Stage 3 of 7 is  60% done\"  But if go and get a coffee, I don't want a screen full of \"Did stage 1 . Did stage 2 etc\" . In some cases I can see the way write-progress is called it will print \"Fetched work item 1, Fetched work item 2 ... fetched work item 9999\" and I have to scroll back through 10,000 lines to see if there were any errors. \r\n\r\nProgress messages cease to be useful a few seconds after they appear, and that's why they (usually) replace each other. \r\n",
      "created_at": "2020-12-15T17:12:21Z",
      "updated_at": "2020-12-15T17:12:21Z"
    },
    {
      "author": "DHowett",
      "author_association": "NONE",
      "body": "If I can throw out an adjacent suggestion: Windows Terminal (previews, as of recently) and ConEmu (and hopefully more terminals on other platforms, but you know how well VT standardization efforts have gone so far :smile:) support an OSC for communicating the progress from the connected application to the terminal.\r\n\r\nConEmu renders that progress in the taskbar, and Windows Terminal renders it in both the taskbar and the tab icon:\r\n\r\nhttps://github.com/microsoft/terminal/pull/8133#issuecomment-745726873",
      "created_at": "2020-12-16T20:57:16Z",
      "updated_at": "2020-12-16T20:57:16Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> If I can throw out an adjacent suggestion: Windows Terminal (previews, as of recently) and ConEmu (and hopefully more terminals on other platforms, but you know how well VT standardization efforts have gone so far \ud83d\ude04) support an OSC for communicating the progress from the connected application to the terminal.\r\n\r\nRelated issue #14208",
      "created_at": "2020-12-16T22:41:56Z",
      "updated_at": "2020-12-16T22:41:56Z"
    },
    {
      "author": "peppekerstens",
      "author_association": "NONE",
      "body": "@jhoneill fair point. \r\n\r\nBased upon the video representation of Steve, could we agree upon a 'in-place replace of display'? \r\n\r\nSo, when using the video as an example mixed with your '9999 items fetch' (done in sibling):\r\nAt progress: the sibling should display 'doing 1 of 9999' or alike\r\nAt end: the sibling should remain displaying 'doing 9999 of 9999' or alike\r\n\r\nI just figure that this will be slightly easier to program then completely remove the display of progress.  **Programmers**; if it makes no difference, then you could 'go wild' with $ProgressView.\r\n\r\nJust a thought; end state in the 'Informational' stream option?",
      "created_at": "2020-12-17T14:09:21Z",
      "updated_at": "2020-12-17T14:09:21Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> @jhoneill fair point.\r\n> \r\n> Based upon the video representation of Steve, could we agree upon a 'in-place replace of display'?\r\n> \r\n\r\n@peppekerstens  Yes replacing **like with like** \r\n\r\n> So, when using the video as an example mixed with your '9999 items fetch' (done in sibling):\r\n> At progress: the sibling should display 'doing 1 of 9999' or alike\r\n> At end: the sibling should remain displaying 'doing 9999 of 9999' or alike\r\n\r\nThere are two cases. One is someone writes this \r\n```\r\n 1..5|  % {  Write-Progress -Activity \"Doing Stuff  $_\"; $_; sleep 1}\r\n```\r\nWhen really they should write. \r\n```\r\n 1..5 |  % {  Write-Progress -Activity \"Doing Stuff\" -CurrentOperation $_ ; $_; sleep 1} ;   Write-Progress -Activity \"Doing Stuff\" -Completed\r\n```\r\nWe have \r\n* Worst case:  V1 leaves every message on the screen (or 10,000 messages in my scenario). \r\n* Next worst case: V1 & V2 leave the final message on the screen  (\"processing item 9999\") (`-completed` doesn't remove the message) \r\n* Better case: the `-Completed` in V2 _works_ but V1 leaves the message because it wasn't told to remove it.  (A lot of the doubling up with child/siblings is because people don't put the `-completed` in!) \r\n* Best case: neither leaves a message, as now. \r\n\r\n> I just figure that this will be slightly easier to program then completely remove the display of progress. \r\n\r\nConsider yourself gently mocked for suggesting that we should change from we have to something functionally worse because it is simpler to program :-) \r\n\r\nI had a formative experience in ~ 1992 (Building systems for Netware lite before Windows for Workgroups hit the market). In the autoexec I put blow-by-blow messages of what was happening. Loading this, setting that, connecting such and such a drive.  I was told \"People will read that every morning. Do they need to read it ?\" . All the messages were removed, because no one who saw those messages got any benefit from them     \r\n\r\nCompare cmd with powershell. `Copy` in CMD will put up `1 file(s) copied.`   but `del` doesn't put up \"1 file(s) deleted\" PowerShell doesn't bother with messages for either.  You don't need to be told that something which returned without error did what it was told to do...  In @SteveL-MSFT  's example how many users care how many bytes were downloaded (and how many will look at the number and try to work out if was 1.2 , 12o r 120 MB? and do nothing with info) and how many want to know \"my download is going on ... now it's finished\"  Unzipping the files we want to know the process is on-going but  being left with a message that the files ARE IN THE PROCESS OF being extracted after they all HAVE BEEN extracted is wrong,  even if changed it's superfluous, we can see command returned without error, so of course they have been extracted .  In the first example do we want to know that script we ran some minutes spent some time \"doing something complicated\". Of course not, we just care that it has finished now, or that the download finished or the file unzipped. If you do something like Test-NetConnection, you don't want to read the extra \"Attempting to connect\" message, because it is superseded by the news that the attempt succeeded or failed. I can't find an example where Write-Progress is used and I'd want the result afterwards   \r\n\r\n> Just a thought; end state in the 'Informational' stream option?\r\nDepends.  If you want people to read it (see above - do they really need to read it) `write-host` goes to the information stream (even in late versions of Windows PowerShell) and is always on, by contrast `write-information` needs informationPreference to be set to be visible.  If you want people to opt in to messages `-verbose` is better.    \r\n\r\nRemember Unix habits of printing what it was doing were set 50 years ago when teletypes were the norm, and there was no better way. PowerShell _can_ print like the Unix world but has the option on a better way. People writing for PowerShell don't choose `Write-Progress` because they don't know about `Write-host`  - they choose it because its behaviour is preferable for their use case. \r\n\r\n",
      "created_at": "2020-12-17T19:06:45Z",
      "updated_at": "2020-12-17T19:06:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "There are three key thing in the area:\r\n1. Indicate a _progress_ of a process\r\n2. Indicate a status of a process\r\n3. Autohide\r\n\r\nall these in current implementation so flexible that allows users implement any (with limitations) scenario.\r\n_It is my strong opinion that we should not limit this._\r\n\r\nCurrent implementation has still limitations and issues - we have a tracking issue for this #3366\r\n\r\n-------\r\nAs for the issue feedback.\r\nWe could move actively changed parts to begin:\r\n```\r\n[copy a whole banch off stuff                                    10s]\r\n```\r\n```\r\n[10s: copy a whole banch off stuff                                  ]\r\n```",
      "created_at": "2020-12-18T04:44:04Z",
      "updated_at": "2020-12-18T04:44:04Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "@powercode wrote\r\n> The thing that annoys me the most with the progress implementation is the inability to express a new \"task\", where other tasks that render progress becomes children.\r\n\r\nWhat do you mean? Are you wishing it would automatically _assume_ that everything is a child of anything already on screen?\r\nParent/child is already built in --and supports recursing almost infinitely-- using the `-Id` and `-ParentId` ... \r\n\r\n![image](https://user-images.githubusercontent.com/192942/103471879-fb611500-4d53-11eb-9394-33142b9764dd.png)\r\n\r\nThere's even adaptive display where it shrinks the display when you get _too_ many...\r\n![image](https://user-images.githubusercontent.com/192942/103471928-c30e0680-4d54-11eb-8747-5ae953988450.png)\r\n\r\n",
      "created_at": "2021-01-03T04:49:35Z",
      "updated_at": "2021-01-03T04:49:35Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "I'm talking about the case where you don't know the parentID, that is when you are using something else that has progress as part of a compound task.\r\n\r\nYou are the parent, but cannot affect the write-progress call to set the parent ID of the child tasks.\r\n\r\nThe function I used as the example is below, but now with comments from your example, @Jaykul. How can I set the parent Id for the call to Invoke-RestMethod or Expand-Archive? Both are often used as building blocks of higher-level functions\r\n\r\n```powershell\r\nfunction Get-CompressedFolder([string] $uri){\r\n   Write-Progress -Activity \"Get data\" -CurrentActivity $uri  # get data\r\n   Invoke-RestMethod $uri -output Foo.zip                           # Opening one stream\r\n   Expand-Archive Foo.zip                                                      # Opening another stream\r\n}\r\n```",
      "created_at": "2021-01-05T23:23:47Z",
      "updated_at": "2021-01-05T23:30:59Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "I don't see how that could be done _in the progress api_, assuming that changing the current assumption of parallelism to an assumption of nesting isn't going to be better in general ... \r\n\r\nI think we would need a ProgressParent common parameter that would set the ParentId for all progress written from within a command that didn't have an _explicit_ parent. Otherwise, it would just making a different --but equally invalid-- assumption ...",
      "created_at": "2021-01-06T05:31:24Z",
      "updated_at": "2021-01-06T05:31:39Z"
    },
    {
      "author": "powercode",
      "author_association": "COLLABORATOR",
      "body": "I agree that some sort of new API is needed.",
      "created_at": "2021-01-06T11:39:39Z",
      "updated_at": "2021-01-06T11:39:39Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Discussion about changes to the Progress API and behavior should be a separate issue.  This is really only about the rendering (visualization) of progress.  At this point, I think it might be best to add support for `$ProgressView` and have this in as an experimental feature to get some real world usage feedback.  For now, I'll retain current behavior to clear the screen.  The downside is there is a perf impact as the current code (which I'm not changing as part of this issue/PR) is clearing the drawn buffer often.  So there is perf impact for long running operations where more CPU is used to rendering progress (due to rendering spaces to clear the buffer).",
      "created_at": "2021-01-08T01:55:35Z",
      "updated_at": "2021-01-08T01:55:35Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Thinking about this further, instead of adding a `$ProgressView`, I think it makes more sense to have something under `$PSStyle` since that is able to control the color now.  In this way, I can also add configuration for limiting the width of the progress bar (or no limit) as well as whether the info gets cleared or stays.  The reason I'm concerned about the last two is writing progress has an impact on the execution time of a cmdlet due to CPU needed to render (and re-render) progress information.  Although this was improved since WinPS, one of my goals was to minimize overdrawing as much as possible, but can allow user to configure if that is not a concern for them.",
      "created_at": "2021-01-08T21:35:56Z",
      "updated_at": "2021-01-08T21:35:56Z"
    },
    {
      "author": "peppekerstens",
      "author_association": "NONE",
      "body": "@SteveL-MSFT `$ProgressView` vs `$PSStyle`; what do you mean? \r\n\r\nA command-specific parameter -versus- a more generic build-in parameter to control the general behavior of PowerShell display output? \r\n",
      "created_at": "2021-01-09T06:27:25Z",
      "updated_at": "2021-01-09T07:44:26Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "I'm concerned that PSStyle is turning into PSConfiguration \ud83d\ude09",
      "created_at": "2021-01-21T05:15:37Z",
      "updated_at": "2021-01-21T05:15:37Z"
    },
    {
      "author": "DHowett",
      "author_association": "NONE",
      "body": "Anecdotal, but the Z shell has a similar \"style\" configurator (`zstyle`) that was _also_ co-opted for _actual configuration_. It was pretty much a key-value store with inheritance and scopes. Let's not follow in their footsteps, eh? :smile:",
      "created_at": "2021-01-21T05:33:06Z",
      "updated_at": "2021-01-21T05:33:06Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@DHowett The terminal spinner can be added as a separate PR as it's not related to this issue.  Looks like it won't show up til Windows Terminal 2.0 so I'm not able to test it.  iTerm2 on macOS doesn't support that escape sequence and just appears to hang.\r\n\r\nRegarding configuration, we have powershell.config.json, but it's really only intended to affect the startup behavior of pwsh.  We have existing automatic variables that control runtime behavior.  I see progress rendering as a runtime behavior.  If we think we should have more generalized `Set-PSConfiguration` cmdlets, I think that's a whole other issue for discussion.",
      "created_at": "2021-01-29T16:34:24Z",
      "updated_at": "2021-01-29T16:34:24Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Although this was improved since WinPS, one of my goals was to minimize overdrawing as much as possible, but can allow user to configure if that is not a concern for them.\r\n\r\nIf clearing the progress message isn't default then it becomes sort of a fancy version of `Write-Host`.  In time it will be considered against best practices to use it in anything other than controller style scripts.\r\n\r\n",
      "created_at": "2021-02-03T17:50:20Z",
      "updated_at": "2021-02-03T17:50:20Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": ":tada:This issue was addressed in #14414, which has now been successfully released as `v7.2.0-preview.3`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.2.0-preview.3)\n",
      "created_at": "2021-02-12T02:07:25Z",
      "updated_at": "2021-02-12T02:07:25Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Just want to mention that I really like how this came out.  It plays very well with output, and clears itself consistently and cleanly.  I haven't done a whole lot of testing with it, but it seems like a very positive change \ud83c\udf89 ",
      "created_at": "2021-03-04T19:04:32Z",
      "updated_at": "2021-03-04T19:04:32Z"
    }
  ],
  "created_at": "2020-12-15T05:41:00Z",
  "labels": [
    "Issue-Enhancement",
    "Issue-Discussion",
    "Resolution-Fixed",
    "WG-Cmdlets-Utility"
  ],
  "number": 14426,
  "state": "closed",
  "title": "Improve rendering of Progress",
  "updated_at": "2021-03-04T19:04:32Z"
}