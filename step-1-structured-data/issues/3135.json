{
  "_url": "https://github.com/PowerShell/PowerShell/issues/3135",
  "author": "AndrewSav",
  "body": "In dotnet core, your dependency dlls do not have to be in the same folder as long as they are installed with nuget at `additionalprobingpath`.\r\n\r\nIf you do `Add-Type` in powershell on linux and then try to use the dll, it will fail with a dependency missing if the dependency is not in the same folder.\r\n\r\nIs there a way to let powershell know net core additionalprobingpath? How is this supposed to work properly?",
  "closed_at": "2017-08-02T00:37:19Z",
  "comments": [
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "Oh, interesting, so sort of x-copyable GAC...Didn't realize they had done that already. \r\n\r\nIf I were to guess, I'd bet that it's probably due to the fact that we currently host an app-local copy of CoreCLR ourselves as opposed to picking up the system-wide \"shared framework\". Eventually, I think we plan to move to using the system-wide copy, though I'm not sure what the `Add-Type` behavior should be at that point. ",
      "created_at": "2017-02-13T17:51:33Z",
      "updated_at": "2017-02-13T17:51:33Z"
    },
    {
      "author": "joeyaiello",
      "author_association": "CONTRIBUTOR",
      "body": "This absolutely needs to be answered to address the .NET Standard 2.0 \"do we, by default, try and load old FullCLR modules?\" question.",
      "created_at": "2017-03-07T23:51:59Z",
      "updated_at": "2017-03-07T23:51:59Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "even if we don't try by default (perhaps opt-in), we need the ability to load FullCLR assemblies stored in the GAC which seems to be the majority of in-box Windows PowerShell modules",
      "created_at": "2017-05-15T17:52:10Z",
      "updated_at": "2017-05-15T17:52:10Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "It seems we need to think about the extra configuration option - whether or not to load old FullCLR modules. Perhaps consumers want to block it because of compatibility or performance.",
      "created_at": "2017-05-16T03:23:15Z",
      "updated_at": "2017-05-16T03:23:15Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@iSazonov yes, loading of fullclr modules should be opt-in.  perhaps we need some setting in [StartupConfig](https://github.com/PowerShell/PowerShell-RFC/blob/master/1-Draft/RFC0015-PowerShell-StartupConfig.md)",
      "created_at": "2017-05-16T20:11:34Z",
      "updated_at": "2017-05-16T20:11:34Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@AndrewSav Do you have repro steps that I can use to look into this issue?",
      "created_at": "2017-06-15T00:20:52Z",
      "updated_at": "2017-06-15T00:20:52Z"
    },
    {
      "author": "AndrewSav",
      "author_association": "NONE",
      "body": "@adityapatwardhan Here you go.\r\n\r\nGet yourself a clean Ubuntu 16.04 LTS.\r\n\r\nInstall Powershell as shown here: https://github.com/PowerShell/PowerShell/blob/master/docs/installation/linux.md#ubuntu-1604\r\n\r\nInstall .net as shown here https://www.microsoft.com/net/core#linuxubuntu\r\n\r\nBefore running **step 4** at the link above, change hwapp.csproj and Program.cs as shown [here](https://gist.github.com/AndrewSav/25b1a03e67246b7a68a2002d216c7763). Then finish step 4.\r\n\r\nRun the following commands:\r\n\r\n```\r\ncd bin/Debug/netcoreapp1.1\r\ndotnet hwapp.dll\r\n```\r\nObserve that \"Passed\" is printed:\r\n\r\n```\r\nPassed\r\n```\r\n\r\nNow run the following commands:\r\n\r\n```\r\npowershell\r\nAdd-Type -AssemblyName ./hwapp.dll\r\n[hwapp.Program]::GetValue()\r\n```\r\n\r\nObserve an exception:\r\n\r\n```\r\nException calling \"GetValue\" with \"0\" argument(s): \"Could not load file or assembly 'Microsoft.Extensions.CommandLineUtils, Version=1.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'. The system cannot find the file specified.\r\n\"\r\nAt line:1 char:1\r\n+ [hwapp.Program]::GetValue()\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\r\n    + FullyQualifiedErrorId : FileNotFoundException\r\n```\r\n",
      "created_at": "2017-06-15T09:50:39Z",
      "updated_at": "2017-06-15T09:50:39Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@AndrewSav  Thanks! This will be very helpful.",
      "created_at": "2017-06-15T18:17:20Z",
      "updated_at": "2017-06-15T18:17:20Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@AndrewSav AdditionalProbingPath is a feature of dotnet / nuget. ```dotnet run``` looks up hwapp.runtime.dev.json to find the physical location on the nuget packages folder. When ```dotnet publish``` is done the nuget dependency is copied over next to the hwapp.dll. And hence, the add-type scenario works as expected.\r\n\r\nClosing this issue as ```dotnet publish``` resolves the issue. Please re-open if you do not agree with the resolution. \r\n",
      "created_at": "2017-08-02T00:37:19Z",
      "updated_at": "2017-08-02T00:37:19Z"
    },
    {
      "author": "undecided2013",
      "author_association": "NONE",
      "body": "I am having the same issue on Windows. I wrote a cmdlet targeting  .net core 2.1. I 'publish' it. It creates a nuget package. Of course I cannot load that into powershell. So I go to the bin\\Release\\netcoreapp2.1 folder. I Add-Type the dll that contains the cmdlet. That works fine. I can now execute my cmdlet with -? and I get the help. Trying to execute it though and I get Could not load file or assembly '.......'. The system cannot find the file specified. This is an OSS assembly I got from nuget. This same code works fine as a console app but fails in powershell. So, the rules for finding referenced assemblies is not the same.",
      "created_at": "2019-05-13T17:39:25Z",
      "updated_at": "2019-05-13T17:39:25Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Yep, there was a change in PS 6.2 which makes this a whole lot harder; see here: https://github.com/PowerShell/PowerShell/issues/9488",
      "created_at": "2019-05-13T19:22:32Z",
      "updated_at": "2019-05-13T19:22:32Z"
    }
  ],
  "created_at": "2017-02-12T22:18:09Z",
  "number": 3135,
  "state": "closed",
  "title": "Support additional probing paths for assembly loading",
  "updated_at": "2019-05-13T19:22:32Z"
}