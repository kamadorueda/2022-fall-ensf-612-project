{
  "_url": "https://github.com/PowerShell/PowerShell/issues/5071",
  "author": "cormacpayne",
  "body": "<!--\r\n\r\nIf it is a bug report:\r\n- make sure you are able to repro it on the latest released version. \r\nYou can install the latest version from https://github.com/PowerShell/PowerShell/releases\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://github.com/PowerShell/PowerShell/blob/master/docs/KNOWNISSUES.md).\r\n- Fill out the following repro template\r\n\r\nIf it's not a bug, please remove the template and elaborate the issue in your own words.\r\n-->\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\nUsing the following sample cmdlet:\r\n\r\n```powershell\r\nfunction Test-Cmdlet\r\n{\r\n    [CmdletBinding(DefaultParameterSetName = \"FooTemp\")]\r\n    Param(\r\n        [Parameter(Mandatory = $true, Position = 0, ValueFromPipelineByPropertyName = $true, ParameterSetName = \"FooTemp\")]\r\n        [Parameter(Mandatory = $true, Position = 0, ValueFromPipelineByPropertyName = $true, ParameterSetName = \"FooBar\")]\r\n        $Foo,\r\n\r\n        [Parameter(Mandatory = $true, Position = 1, ValueFromPipelineByPropertyName = $true, ParameterSetName = \"FooBar\")]\r\n        $Bar,\r\n\r\n        [Parameter(Mandatory = $true, Position = 2, ValueFromPipelineByPropertyName = $true, ParameterSetName = \"FooTemp\")]\r\n        $Temp\r\n    )\r\n\r\n    $PSCmdlet.ParameterSetName\r\n    \"Foo = $Foo\"\r\n    \"Bar = $Bar\"\r\n    \"Temp = $Temp\"\r\n}\r\n```\r\n\r\nWhen attempting to pipe a `PSCustomObject` with `Foo` and `Bar` properties, it throws an error:\r\n\r\n```powershell\r\n$hash = @{ Foo = \"A\"; Bar = \"B\" }\r\n[PSCustomObject]$hash | Test-Cmdlet\r\n\r\nTest-Cmdlet : The input object cannot be bound because it did not contain the information required to bind all mandatory parameters:  Temp\r\nAt C:\\Users\\corm\\Documents\\TestCmdlet.ps1:29 char:25\r\n+ [PSCustomObject]$hash | Test-Cmdlet\r\n+                         ~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidArgument: (@{Bar=B; Foo=A}:PSObject) [Test-Cmdlet], ParameterBindingException\r\n    + FullyQualifiedErrorId : InputObjectMissingMandatory,Test-Cmdlet\r\n\r\nFooTemp\r\nFoo = A\r\nBar =\r\nTemp =\r\n```\r\n\r\nHowever, I found that the same command works if I remove the `DefaultParameterSet` from the above cmdlet:\r\n\r\n```powershell\r\n$hash = @{ Foo = \"A\"; Bar = \"B\" }\r\n[PSCustomObject]$hash | Test-Cmdlet\r\n\r\nFooBar\r\nFoo = A\r\nBar = B\r\nTemp =\r\n```\r\n\r\nIt appears that if a `DefaultParameterSet` is defined for a cmdlet, then it will try to bind an object's parameters to _only_ the specified `DefaultParameterSet`. In both scenarios, the cmdlet works as intended if I don't use piping:\r\n\r\n```powershell\r\nTest-Cmdlet -Foo \"A\" -Bar \"B\"\r\n\r\nFooBar\r\nFoo = A\r\nBar = B\r\nTemp =\r\n```\r\n\r\nExpected behavior\r\n-----------------\r\n\r\nIn the piping scenario, PowerShell binds to the same parameter set that it would if the values in the hashtable (or object) were used as parameters.\r\n\r\nActual behavior\r\n---------------\r\n\r\nIf a `DefaultParameterSet` is defined, PowerShell will only try to bind to the values of the `DefaultParameterSet` and won't look to see if it can successfully bind to the parameters of another set.\r\n\r\nEnvironment data\r\n----------------\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```powershell\r\nName                           Value\r\n----                           -----\r\nPSVersion                      5.1.15063.608\r\nPSEdition                      Desktop\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nBuildVersion                   10.0.15063.608\r\nCLRVersion                     4.0.30319.42000\r\nWSManStackVersion              3.0\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "It does look like a bug, but I think the description is not quite accurate.\r\n\r\nI *think* it's more accurate to say - if a parameter is available in multiple parameter sets **and** one of the parameter sets is the default parameter set, then the alternate parameter sets are not considered.",
      "created_at": "2017-10-10T01:31:52Z",
      "updated_at": "2017-10-10T01:31:52Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "BTW, I've marked this for discussion - the parameter binder is extremely complex, and it's possible this behavior is somehow desirable or at least to risky to change.",
      "created_at": "2017-10-10T01:33:14Z",
      "updated_at": "2017-10-10T01:33:14Z"
    },
    {
      "author": "cormacpayne",
      "author_association": "NONE",
      "body": "@lzybkr good catch - just confirmed that this only occurs when one of the \"candidate\" parameter sets is the default parameter set.",
      "created_at": "2017-10-10T02:56:11Z",
      "updated_at": "2017-10-10T02:56:11Z"
    },
    {
      "author": "o-l-a-v",
      "author_association": "NONE",
      "body": "Just ran into this same problem now, tested with both 5.1 and 6.2.3.\r\n\r\nFunction:\r\n```powershell\r\nfunction Test-ParameterSet {\r\n    [CmdletBinding(DefaultParameterSetName='Two')]\r\n    Param (\r\n        [Parameter(Mandatory = $true, ParameterSetName = 'One', Position = 0, ValueFromPipelineByPropertyName = $true)]\r\n        [Parameter(Mandatory = $false, ParameterSetName = 'Two', Position = 0, ValueFromPipelineByPropertyName = $true)]\r\n        [string] $Name,\r\n\r\n        [Parameter(Mandatory = $true, ParameterSetName = 'One', ValueFromPipelineByPropertyName = $false)]\r\n        [string] $Location,\r\n\r\n        [Parameter(Mandatory = $false, ParameterSetName = 'Two', ValueFromPipelineByPropertyName = $false)]\r\n        [string] $Work\r\n    )\r\n\r\n    Process {\r\n        Write-Output -InputObject ('ParameterSetName = {0}' -f ($PSCmdlet.'ParameterSetName'))\r\n    }\r\n}\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/6450056/65417469-5fc7c180-ddfa-11e9-8b3c-eef5b7b4d8a5.png)\r\n\r\nIs this still being looked into? From what I can see, \"DefaultParameterSetName\" is ignored when a value is being piped into the function. It the defaults to the first ParameterSetName specified in Param section.",
      "created_at": "2019-09-23T10:06:03Z",
      "updated_at": "2019-09-23T10:08:47Z"
    }
  ],
  "created_at": "2017-10-09T22:57:24Z",
  "number": 5071,
  "state": "open",
  "title": "Piping by property name only looks at default parameter set if defined",
  "updated_at": "2019-09-23T10:08:47Z"
}