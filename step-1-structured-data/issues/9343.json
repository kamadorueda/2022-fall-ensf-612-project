{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9343",
  "author": "mklement0",
  "body": "While not common, it is possible to use hashtable-based splatting for passing arguments to external programs.\r\n\r\nUnfortunately, PowerShell chooses to represent a parameter-name-argument pair as a single token with `:` as the separator.\r\n\r\nE.g., using hashtable `$ht = @{ foo = 'bar' }` for splatting (as `@ht`) produces single argument\r\n`-foo:bar`.\r\n\r\nTo my knowledge it is uncommon for external CLIs to support this syntax.\r\n\r\nBy far the most common syntax is to separate the parameter name from its value with a _space_ (effectively passing the parameter value as a _separate argument_: `-foo bar`, as is typically used even in PowerShell itself.\r\n\r\nNote that Boolean entries in the hashtable would need special consideration: under the sensible assumption that they represent the equivalent of switch parameters in PowerShell, i..e, to _options_ in POSIX parlance (e.g., `grep's` `-o` option) :\r\n\r\n* a value of `$true` would have to result in the key name by itself; i.e., an entry of `o = $true` would result in `-o`\r\n\r\n* a value of `$false` would have to result in the _omission_ of the entry.\r\n\r\nTechnically, this would be a breaking change.\r\nIf not an option, it is a candidate for #6745.\r\n\r\nNote that per POSIX only single-character parameter names are allowed; while the GNU utilities on Linux distros do support multi-character names, they require `--` rather than `-` as the sigil (e.g., `--only-matching` as the alias of `-o` with `grep`); therefore, use of the long option names wouldn't work with the above proposal.\r\n\r\n# Steps to reproduce\r\n\r\nRun the following Pester test on macOS or Linux (the behavior would be the same on Windows, but `bash` is used to echo the arguments passed).\r\n\r\n```powershell\r\nDescribe \"Hash-table based splatting with external programs\"  {\r\n  It \"Parameter names and their arguments should be separated with spaces\" -Skip:$IsWindows {\r\n      $htArgs = @{\r\n        foo = 'bar'\r\n      }\r\n      bash -c 'echo \\\"$@\\\"' - @htArgs | Should -Be '-foo bar'\r\n  }\r\n}\r\n```\r\n\r\n# Expected behavior\r\n\r\nIf spaces were used, the test would pass.\r\n\r\n# Actual behavior\r\n\r\nThe test fails:\r\n\r\n```none\r\n     Expected: '-foo bar'\r\n     But was:  '-foo:bar'\r\n```\r\n\r\n# Environment data\r\n\r\n```none\r\nPowerShell Core 6.2.0\r\n```\r\n",
  "closed_at": null,
  "comments": [],
  "created_at": "2019-04-11T18:59:32Z",
  "number": 9343,
  "state": "open",
  "title": "Hashtable-based splatting produces unhelpful arguments / command line for external programs",
  "updated_at": "2019-04-15T05:03:38Z"
}