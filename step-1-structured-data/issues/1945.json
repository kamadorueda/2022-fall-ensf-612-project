{
  "_url": "https://github.com/PowerShell/PowerShell/issues/1945",
  "author": "ffeldhaus",
  "body": "On Windows, I was able to connect to HTTPS endpoints with invalid certificates by setting a certificate policy via System.Net.ServicePointManager to ignore invalid certificates. \n\nAn integrated way to ignore invalid certificates with `Invoke-RestMethod` and `Invoke-WebMethod` would simplify implementing this cross platform.\n\nWhen I run the same on Mac OS X, I get several errors regarding .NET dependencies. How can Invoke-RestMethod and Invoke-WebMethod be configured to ignore invalid certificates?\n## Steps to reproduce\n\n``` powershell\nadd-type @\"\nusing System.Net;\nusing System.Security.Cryptography.X509Certificates;\npublic class TrustAllCertsPolicy : ICertificatePolicy {\n    public bool CheckValidationResult(\n        ServicePoint srvPoint, X509Certificate certificate,\n        WebRequest request, int certificateProblem) {\n            return true;\n        }\n }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\nInvoke-WebRequest https://expired.badssl.com/\n```\n## Expected behavior\n\nThis is from Windows Server 2008R2 with PowerShell 5:\n\n``` powershell\nPS C:\\>             add-type @\"\n>>                     using System.Net;\n>>                     using System.Security.Cryptography.X509Certificates;\n>>                     public class TrustAllCertsPolicy : ICertificatePolicy {\n>>                        public bool CheckValidationResult(\n>>                             ServicePoint srvPoint, X509Certificate certificate,\n>>                             WebRequest request, int certificateProblem) {\n>>                             return true;\n>>                         }\n>>                     }\n>> \"@\n>>\nPS C:\\> [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\nPS C:\\> Invoke-WebRequest https://expired.badssl.com/\n\n\nStatusCode        : 200\nStatusDescription : OK\nContent           : <!DOCTYPE html>\n                    <html>\n                    <head>\n                      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n                      <link rel=\"shortcut icon\" href=\"/icons/favicon-red.ico\"/>\n                      <link rel=\"apple-touch-icon\" href=\"/i...\nRawContent        : HTTP/1.1 200 OK\n                    Connection: keep-alive\n                    Accept-Ranges: bytes\n                    Content-Length: 469\n                    Cache-Control: no-store\n                    Content-Type: text/html\n                    Date: Fri, 19 Aug 2016 08:36:02 GMT\n                    ETag: \"57b263a4-1d5\"\n                    Last-Mo...\nForms             : {}\nHeaders           : {[Connection, keep-alive], [Accept-Ranges, bytes], [Content-Length, 469], [Cache-Control,\n                    no-store]...}\nImages            : {}\nInputFields       : {}\nLinks             : {}\nParsedHtml        : mshtml.HTMLDocumentClass\nRawContentLength  : 469\n```\n## Actual behavior\n\n``` powershell\nPS /Users/ffeldhaus>             add-type @\"                                                                                                                                                                                                  >>                     using System.Net;                                                                                                                                                                                                      >>                     using System.Security.Cryptography.X509Certificates;                                                                                                                                                                   >>                     public class TrustAllCertsPolicy : ICertificatePolicy {                                                                                                                                                                >>                        public bool CheckValidationResult(                                                                                                                                                                                  >>                             ServicePoint srvPoint, X509Certificate certificate,                                                                                                                                                            >>                             WebRequest request, int certificateProblem) {                                                                                                                                                                  >>                             return true;                                                                                                                                                                                                   >>                         }                                                                                                                                                                                                                  >>                     }                                                                                                                                                                                                                      >> \"@                                                                                                                                                                                                                                         \nadd-type : (2) : The type or namespace name 'X509Certificates' does not exist in the namespace 'System.Security.Cryptography' (are you missing an assembly reference?)\n(1) :                     using System.Net;\n(2) : >>>                     using System.Security.Cryptography.X509Certificates;\n(3) :                     public class TrustAllCertsPolicy : ICertificatePolicy {\nAt line:1 char:13\n+             add-type @\"\n+             ~~~~~~~~~~~\n    + CategoryInfo          : InvalidData: (Microsoft.Power...peCompilerError:AddTypeCompilerError) [Add-Type], Exception\n    + FullyQualifiedErrorId : SOURCE_CODE_ERROR,Microsoft.PowerShell.Commands.AddTypeCommand\n\nadd-type : (3) : The type or namespace name 'ICertificatePolicy' could not be found (are you missing a using directive or an assembly reference?)\n(2) :                     using System.Security.Cryptography.X509Certificates;\n(3) : >>>                     public class TrustAllCertsPolicy : ICertificatePolicy {\n(4) :                        public bool CheckValidationResult(\nAt line:1 char:13\n+             add-type @\"\n+             ~~~~~~~~~~~\n    + CategoryInfo          : InvalidData: (Microsoft.Power...peCompilerError:AddTypeCompilerError) [Add-Type], Exception\n    + FullyQualifiedErrorId : SOURCE_CODE_ERROR,Microsoft.PowerShell.Commands.AddTypeCommand\n\nadd-type : (5) : The type or namespace name 'ServicePoint' could not be found (are you missing a using directive or an assembly reference?)\n(4) :                        public bool CheckValidationResult(\n(5) : >>>                             ServicePoint srvPoint, X509Certificate certificate,\n(6) :                             WebRequest request, int certificateProblem) {\nAt line:1 char:13\n+             add-type @\"\n+             ~~~~~~~~~~~\n    + CategoryInfo          : InvalidData: (Microsoft.Power...peCompilerError:AddTypeCompilerError) [Add-Type], Exception\n    + FullyQualifiedErrorId : SOURCE_CODE_ERROR,Microsoft.PowerShell.Commands.AddTypeCommand\n\nadd-type : (5) : The type or namespace name 'X509Certificate' could not be found (are you missing a using directive or an assembly reference?)\n(4) :                        public bool CheckValidationResult(\n(5) : >>>                             ServicePoint srvPoint, X509Certificate certificate,\n(6) :                             WebRequest request, int certificateProblem) {\nAt line:1 char:13\n+             add-type @\"\n+             ~~~~~~~~~~~\n    + CategoryInfo          : InvalidData: (Microsoft.Power...peCompilerError:AddTypeCompilerError) [Add-Type], Exception\n    + FullyQualifiedErrorId : SOURCE_CODE_ERROR,Microsoft.PowerShell.Commands.AddTypeCommand\n\nadd-type : (6) : The type or namespace name 'WebRequest' could not be found (are you missing a using directive or an assembly reference?)\n(5) :                             ServicePoint srvPoint, X509Certificate certificate,\n(6) : >>>                             WebRequest request, int certificateProblem) {\n(7) :                             return true;\nAt line:1 char:13\n+             add-type @\"\n+             ~~~~~~~~~~~\n    + CategoryInfo          : InvalidData: (Microsoft.Power...peCompilerError:AddTypeCompilerError) [Add-Type], Exception\n    + FullyQualifiedErrorId : SOURCE_CODE_ERROR,Microsoft.PowerShell.Commands.AddTypeCommand\n\nadd-type : Cannot add type. Compilation errors occurred.\nAt line:1 char:13\n+             add-type @\"\n+             ~~~~~~~~~~~\n    + CategoryInfo          : InvalidData: (:) [Add-Type], InvalidOperationException\n    + FullyQualifiedErrorId : COMPILER_ERRORS,Microsoft.PowerShell.Commands.AddTypeCommand\nPS /Users/ffeldhaus> [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy                                                                                                                                     \nUnable to find type [System.Net.ServicePointManager].\nAt line:1 char:1\n+ [System.Net.ServicePointManager]::CertificatePolicy = New-Object Trus ...\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : InvalidOperation: (System.Net.ServicePointManager:TypeName) [], RuntimeException\n    + FullyQualifiedErrorId : TypeNotFound\n\nPS /Users/ffeldhaus> Invoke-WebRequest https://expired.badssl.com/                                                                                                                                                                            \nInvoke-WebRequest : An error occurred while sending the request.\nAt line:1 char:1\n+ Invoke-WebRequest https://expired.badssl.com/\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : InvalidOperation: (Method: GET, Re...rShell/6.0.0\n}:HttpRequestMessage) [Invoke-WebRequest], HttpRequestException\n    + FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand\n```\n## Environment data\n\n<!-- provide the output of $PSVersionTable -->\n\n``` powershell\nName                           Value\n----                           -----                                                                                                                                                            \nPSVersion                      6.0.0-alpha\nPSEdition                      Core\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\nBuildVersion                   3.0.0.0\nGitCommitId                    v6.0.0-alpha.9\nCLRVersion\nWSManStackVersion              3.0  \nPSRemotingProtocolVersion      2.3\nSerializationVersion           1.1.0.1\n```\n",
  "closed_at": "2016-11-03T22:16:35Z",
  "comments": [
    {
      "author": "ffeldhaus",
      "author_association": "CONTRIBUTOR",
      "body": "Trusting self signed certifciates can be achieved in Mac OS X by adding them to the Mac OS X keychain (e.g. by opening the URI with Safari and always trusting the certificate) and restarting powershell. Then `Invoke-RestMethod` and `Invoke-WebRequest` will accept the certificate as trusted.\n",
      "created_at": "2016-08-19T11:30:03Z",
      "updated_at": "2016-08-19T11:30:03Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "This isn't a question of trusting certificates. This is a question of getting/posting something _even though you **don't** trust the certificate._\n",
      "created_at": "2016-08-20T17:20:50Z",
      "updated_at": "2016-08-20T17:20:50Z"
    },
    {
      "author": "GavinEke",
      "author_association": "NONE",
      "body": "It would nice to have some a parameter like `-IgnoreCertificateCheck` which would be similar to wget's `--no-check-certificate` then also having a `$IgnoreCertificateCheckPreference` which can default to `$false` but still allows people to change it.\n",
      "created_at": "2016-08-20T23:58:41Z",
      "updated_at": "2016-08-20T23:58:41Z"
    },
    {
      "author": "ffeldhaus",
      "author_association": "CONTRIBUTOR",
      "body": "A `-IgnoreCertificateCheck` parameter could probably be implement using `ServerCertificateCustomValidationCallback`.  [This Gist has an example](https://gist.github.com/badcommandorfilename/d8523a47ec07ce187761f69d325b3ce5) of using `ServerCertificateCustomValidationCallback` to suppress certificate checks. This probably has to be implemented in the [`GetHttpClient()` method in WebRequestPSCmdlet.CoreClr.cs](https://github.com/PowerShell/PowerShell/blob/c1faf1e6e10fc1ce45e84ef6f49ae7136c67a111/src/Microsoft.PowerShell.Commands.Utility/commands/utility/WebCmdlet/CoreCLR/WebRequestPSCmdlet.CoreClr.cs#L70).\n",
      "created_at": "2016-08-21T18:08:13Z",
      "updated_at": "2016-08-21T18:21:41Z"
    },
    {
      "author": "halr9000",
      "author_association": "CONTRIBUTOR",
      "body": "Let's PLEASE have a skip SSL verification switch at last! Nobody likes dealing with certs in development.\n",
      "created_at": "2016-08-21T18:28:02Z",
      "updated_at": "2016-08-21T18:28:02Z"
    },
    {
      "author": "ffeldhaus",
      "author_association": "CONTRIBUTOR",
      "body": "I created pull request #2006 to implement a `-SkipCertificateCheck` switch parameter. It does not yet support a `$SkipCertificateCheckPreference` variable, but the functionality can be achieved using `$PSDefaultParameterValues` e.g. `$PSDefaultParameterValues.Add(\"Invoke-RestMethod:SkipCertificateCheck\",$true)` or `$PSDefaultParameterValues.Add(\"Invoke-WebRequest:SkipCertificateCheck\",$true)`.\n\nThis also requires libcurl to be build against openssl. See https://github.com/dotnet/corefx/issues/9728 for details and instructions how to build curl against openssl.\n",
      "created_at": "2016-08-22T06:34:38Z",
      "updated_at": "2016-08-22T13:08:51Z"
    },
    {
      "author": "nabarry",
      "author_association": "NONE",
      "body": "Please implement pull request #2006 This is critical functionality for internal API access to systems.\n",
      "created_at": "2016-09-27T13:51:26Z",
      "updated_at": "2016-09-27T13:51:26Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "This needs to be done _right_ -- not with a `-IgnoreAllSSLErrors` switch...\n\nP.S. for those who need something _right now_ you can use my [TunableSSLValidator module](https://github.com/Jaykul/Tunable-SSL-Validator)\n",
      "created_at": "2016-09-30T05:22:31Z",
      "updated_at": "2016-09-30T05:22:31Z"
    },
    {
      "author": "ffeldhaus",
      "author_association": "CONTRIBUTOR",
      "body": "As pull request #2006 is now merged, I'm closing the issue. The functionality (e.g. `-SkipCertificateCheck` switch) is now similar to that offered via curl and other standard tools.\n",
      "created_at": "2016-11-03T22:16:35Z",
      "updated_at": "2016-11-03T22:16:35Z"
    },
    {
      "author": "Xeleema",
      "author_association": "NONE",
      "body": "This is needed for those wanting to use MSRC's \"[SecurityUpdates](https://github.com/Microsoft/MSRC-Microsoft-Security-Updates-API)\" Module through a Proxy.",
      "created_at": "2017-04-13T17:39:12Z",
      "updated_at": "2017-04-13T17:39:12Z"
    },
    {
      "author": "cawoodm",
      "author_association": "NONE",
      "body": "Which cacerts (approved CA Root) list does `Invoke-WebRequest` use? I have a `curl` request which works fine in bash on CentOS 7 but failed in `pwsh` with `Invoke-WebRequest`. It would seem PowerShell is not respecting the system's setup in `/etc/pki/ca-trust/source/anchors`.",
      "created_at": "2020-03-24T20:36:56Z",
      "updated_at": "2020-03-24T20:36:56Z"
    },
    {
      "author": "cawoodm",
      "author_association": "NONE",
      "body": "My bad, it does respect them. I had copied the .cer files to the anchors directory but forgotten to run `sudo update-ca-trust extract`.",
      "created_at": "2020-03-24T20:43:09Z",
      "updated_at": "2020-03-24T20:43:09Z"
    },
    {
      "author": "tikondrus",
      "author_association": "NONE",
      "body": "I have the same issue on Centos\r\n\r\nPS /root/>   Add-Type -TypeDefinition @\"\r\n>>     using System.Net;\r\n>>     using System.Security.Cryptography.X509Certificates;\r\n>>     public class TrustAllCertsPolicy : ICertificatePolicy {\r\n>>       public bool CheckValidationResult(\r\n>>       ServicePoint srvPoint, X509Certificate certificate,\r\n>>       WebRequest request, int certificateProblem) {\r\n>>         return true;\r\n>>       }\r\n>>     }\r\n>> \"@\r\nAdd-Type: (3,40): error CS0246: The type or namespace name 'ICertificatePolicy' could not be found (are you missing a using directive or an assembly reference?)\r\n    public class TrustAllCertsPolicy : ICertificatePolicy {\r\n                                       ^\r\n\r\nAdd-Type: Cannot add type. Compilation errors occurred.\r\nPS /root/>\r\nPS /root/> [System.Net.ServicePointManager]::CertificatePolicy = New-Object -TypeName TrustAllCertsPolicy\r\nNew-Object: Cannot find type [TrustAllCertsPolicy]: verify that the assembly containing this type is loaded.\r\n\r\n\r\n $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.0\r\nPSEdition                      Core\r\nGitCommitId                    7.1.0\r\nOS                             Linux 3.10.0-1127.19.1.el7.x86_64 #1 SMP Tue Aug 25 17:23:54 UTC 2020\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n",
      "created_at": "2020-12-28T16:22:58Z",
      "updated_at": "2020-12-28T16:24:23Z"
    }
  ],
  "created_at": "2016-08-19T08:40:51Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Cmdlets",
    "Resolution-Fixed"
  ],
  "number": 1945,
  "state": "closed",
  "title": "Invoke-WebRequest and Invoke-RestMethod do not support invalid HTTPS certificates",
  "updated_at": "2020-12-28T16:24:23Z"
}