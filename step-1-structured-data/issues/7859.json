{
  "_url": "https://github.com/PowerShell/PowerShell/issues/7859",
  "author": "SteveL-MSFT",
  "body": "## PR Summary\r\n\r\nThis is a regression introduced by https://github.com/PowerShell/PowerShell/pull/7145 as an optimization where no further analysis of the module is done if none of the exported capabilities have a wildcard.  However, the NestedModules property hasn't been populated yet, so it remains empty.  This is a regression as previously this property is always populated if the manifest contains a value.\r\n\r\nFix is to create PSModuleInfo entries for each specified NestedModule even though we don't do actual loading and analysis.  Creating the fake NestedModule is similar to how the code already creates fake RequiredModules when not importing.\r\n\r\nAlso some minor cleanup of repetitive code in the tests.\r\n\r\nFix https://github.com/PowerShell/PowerShell/issues/7833\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed - Issue link:\r\n- **Testing - New and feature**\r\n    - [ ] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [ ] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2018-09-28T20:28:09Z",
  "comments": [
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "This seems like the right way to efficiently build/return the nested module info objects. But for the sake of having considered other ideas, wouldn't users expect a fully live nested module info object here?\r\n\r\nSince the fake module info is the same type that would normally be returned by `Test-ModuleManifest` but is hollow, the fact that we took an optimised path means you now don't get back fields like `ModuleBase` and have no idea why. Unlike `RequiredModules`, `NestedModules` really forms a tree, and you might want to traverse that -- but now you wouldn't be able to consistently expect to be able to use that behaviour.\r\n\r\n[Further down in the same method](https://github.com/PowerShell/PowerShell/blob/76c9da189dd5990010fbce3d44890d9659be9b0e/src/System.Management.Automation/engine/Modules/ModuleCmdletBase.cs#L2927-L2949) when nested modules are read, we actually go and read their manifest and load a module info.\r\n\r\nCreating fake info objects from the nested module specifications is certainly more efficient, but I think it's a breaking change from previous (pre-regression) behaviour. See Windows PowerShell's version of the same:\r\n```\r\nPS C:\\Users\\roholt\\Documents\\Dev\\sandbox\\mod> $x = Test-ModuleManifest .\\mod.psd1\r\nPS C:\\Users\\roholt\\Documents\\Dev\\sandbox\\mod> $x.NestedModules |fl *\r\n\r\n\r\nLogPipelineExecutionDetails : False\r\nName                        : x\r\nPath                        : C:\\Users\\roholt\\Documents\\Dev\\sandbox\\mod\\x.psm1\r\nImplementingAssembly        :\r\nDefinition                  :\r\nDescription                 :\r\nGuid                        : 00000000-0000-0000-0000-000000000000\r\nHelpInfoUri                 :\r\nModuleBase                  : C:\\Users\\roholt\\Documents\\Dev\\sandbox\\mod\r\nPrivateData                 :\r\nTags                        : {}\r\nProjectUri                  :\r\nIconUri                     :\r\nLicenseUri                  :\r\nReleaseNotes                :\r\nRepositorySourceLocation    :\r\nVersion                     : 0.0\r\nModuleType                  : Script\r\nAuthor                      :\r\nAccessMode                  : ReadWrite\r\nClrVersion                  :\r\nCompanyName                 :\r\nCopyright                   :\r\nDotNetFrameworkVersion      :\r\nExportedFunctions           : {[Banana, Banana]}\r\nPrefix                      :\r\nExportedCmdlets             : {}\r\nExportedCommands            : {[Banana, Banana]}\r\nFileList                    : {}\r\nCompatiblePSEditions        : {}\r\nModuleList                  : {}\r\nNestedModules               : {}\r\nPowerShellHostName          :\r\nPowerShellHostVersion       :\r\nPowerShellVersion           :\r\nProcessorArchitecture       : None\r\nScripts                     : {}\r\nRequiredAssemblies          : {}\r\nRequiredModules             : {}\r\nRootModule                  :\r\nExportedVariables           : {}\r\nExportedAliases             : {}\r\nExportedWorkflows           : {}\r\nExportedDscResources        : {}\r\nSessionState                :\r\nOnRemove                    :\r\nExportedFormatFiles         : {}\r\nExportedTypeFiles           : {}\r\n```\r\n\r\nI think we may be committed to doing the inefficient thing.",
      "created_at": "2018-09-25T21:35:10Z",
      "updated_at": "2018-09-25T21:35:10Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@rjmholt You raise a fair point.  However, I think most cases the user doesn't need a complete object.  In the issue, the problem with the current behavior is that the `NestedModules` property gets cleared out when used with `Update-ModuleManifest` which is dataloss for the customer.  The fake moduleinfo is sufficient as the modulemanifest is really just a hashtable.  Although it seems I should add a test to Update-ModuleManifest.\r\n\r\nI would suggest deferring whether we want to add capability to get the entire tree of objects until there is a customer request for it.  ",
      "created_at": "2018-09-25T22:01:41Z",
      "updated_at": "2018-09-25T22:01:41Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I would suggest deferring whether we want to add capability to get the entire tree of objects until there is a customer request for it.\r\n\r\nMaybe use lazy for the objects?",
      "created_at": "2018-09-26T05:20:49Z",
      "updated_at": "2018-09-26T05:20:49Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@SteveL-MSFT Thanks for fixing this regression! It looks good to me, but since the same code is used both here and for `requiredModules`, would it make sense to have a private helper method to encapsulate the code for creating the fake `ModuleInfo` object?\r\n\r\nThe helper method can be a iterator method, which can be used for both here an `requiredModules`:\r\n```\r\nprivate IEnumerable<ModuleInfo> CreateFakeModuleObject(IEnumerable<ModuleSpecification> moduleSpecs)\r\n{\r\n    foreach (ModuleSpecification moduleSpec in moduleSpecs)\r\n    {\r\n        var fakeModuleInfo = new PSModuleInfo(moduleSpec.Name, Context, null);\r\n        if (moduleSpec.Guid.HasValue)\r\n        {\r\n            fakeModuleInfo.SetGuid(moduleSpec.Guid.Value);\r\n        }\r\n        fakeModuleInfo.SetVersion(moduleSpec.RequiredVersion ?? moduleSpec.Version);\r\n        yield fakeModuleInfo;\r\n    }\r\n}\r\n```",
      "created_at": "2018-09-27T18:16:13Z",
      "updated_at": "2018-09-27T18:20:06Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@daxian-dbw yes, I'll make that change.  Thanks!",
      "created_at": "2018-09-27T19:30:50Z",
      "updated_at": "2018-09-27T19:30:50Z"
    }
  ],
  "created_at": "2018-09-25T21:10:38Z",
  "number": 7859,
  "state": "closed",
  "title": "Ensure NestedModules property gets populated by Test-ModuleManifest",
  "updated_at": "2018-09-28T20:32:02Z"
}