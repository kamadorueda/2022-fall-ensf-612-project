{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12156",
  "author": "strawgate",
  "body": "# Summary of the new feature/enhancement\r\n\r\nI'd love to see a strict mode or some other language feature to enforce strict typing (and at the same time remove the implicit casting that occurs sometimes).\r\n\r\nThings like avoiding this:\r\n```\r\n[string] $test = \"\"\r\n$test = @{}\r\n$test\r\nSystem.Collections.Hashtable\r\n```\r\n\r\n```\r\n[string] $test = \"\"\r\n$test = 7\r\n$test\r\n7\r\n$test.gettype()\r\n\r\nIsPublic IsSerial Name                                     BaseType\r\n-------- -------- ----                                     --------\r\nTrue     True     String                                   System.Object\r\n```",
  "closed_at": "2020-05-09T12:00:15Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "PowerShell is a script language and it does huge implicit castings for better UX.",
      "created_at": "2020-03-20T07:51:24Z",
      "updated_at": "2020-03-20T07:51:24Z"
    },
    {
      "author": "strawgate",
      "author_association": "CONTRIBUTOR",
      "body": "Agreed -- but as we start to use PowerShell for programming it would be nice to limit some of the casting, or be able to add linter checks with type hints in order to reduce unexpected run-time behavior.\r\n\r\nFigured I'd file an issue to see what others think :)",
      "created_at": "2020-03-24T17:56:10Z",
      "updated_at": "2020-03-24T17:56:10Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Some of that could be done quite well by PSScriptAnalyzer rules, I suppose? \ud83e\udd14 ",
      "created_at": "2020-03-24T18:35:14Z",
      "updated_at": "2020-03-24T18:35:14Z"
    },
    {
      "author": "Tragen",
      "author_association": "NONE",
      "body": "I also thought about this. When I explicitly tell PS that the variable is a string, it's type should never change.",
      "created_at": "2020-03-24T22:08:23Z",
      "updated_at": "2020-03-24T22:08:23Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "That is the case already:\r\n\r\n```ps1\r\n[string]$variable = \"hello\"\r\n\r\n$variable = Get-Date\r\n\r\n$variable.GetType() # string\r\n```\r\n\r\nWhat can cause some confusion, however, is the implicit conversions that often take place. ",
      "created_at": "2020-03-24T22:21:50Z",
      "updated_at": "2020-03-24T22:21:50Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "`[string]` is especially tricky with respect to the implicit conversions, because _anything_ can be converted to a string in PowerShell.\r\n\r\nThe closest approximation of what you're asking with the current features is to use a `[ValidateScript()]` attribute (which, although not widely known, can also be applied to _variables_ not just to _parameters_ (parameter variables):\r\n\r\n```powershell\r\nPS> [ValidateScript({ $_ -is [string] })] $foo = 'hi'; $foo = 42\r\nMetadataError: The variable cannot be validated because the value 42 is not a valid value for the foo variable.\r\n```\r\n\r\nThe primary problem is that this is still only enforced at _runtime_.\r\n\r\nThe secondary problem is the unhelpful abstract error message; even though `ValidateScript` now supports an `ErrorMessage` property, it isn't used (it is only used for _parameters_) - arguably a bug.\r\n\r\n---\r\n\r\n> Some of that could be done quite well by PSScriptAnalyzer rules, I suppose? \r\n\r\nThe problem is that presumably more often than not you _do_ want PowerShell's implicit conversions, as they are typically helpful. Warning about every type discrepancy could get very distracting.\r\n\r\n\r\n\r\n",
      "created_at": "2020-03-26T19:27:12Z",
      "updated_at": "2020-03-26T19:27:12Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-05-09T12:00:14Z",
      "updated_at": "2020-05-09T12:00:14Z"
    }
  ],
  "created_at": "2020-03-19T20:55:41Z",
  "number": 12156,
  "state": "closed",
  "title": "Strict Typing",
  "updated_at": "2020-05-09T12:00:15Z"
}