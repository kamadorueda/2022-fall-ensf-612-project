{
  "_url": "https://github.com/PowerShell/PowerShell/issues/14284",
  "author": "felix9",
  "body": "## Steps to reproduce\r\n\r\n```\r\nPS> pwsh -c '{hi'\r\nPS> pwsh -c '}hi'\r\nParserError:\r\nLine |\r\n   1 |  }hi\r\n     |  ~\r\n     | Unexpected token '}' in expression or statement.\r\nPS>\r\n```\r\n\r\n## Expected behavior\r\n\r\nI expect both pwsh invocations to report an error.\r\n\r\n## Actual behavior\r\n\r\nThe first pwsh invocation exits with failure status but doesn't report any error.\r\n\r\n## Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.0\r\nPSEdition                      Core\r\nGitCommitId                    7.1.0\r\nOS                             Microsoft Windows 10.0.19042\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0\u2026}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "Try:\r\n```powershell\r\npwsh -c \"'}hi'\"\r\n```",
      "created_at": "2020-11-29T12:07:13Z",
      "updated_at": "2020-11-29T12:07:13Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "/cc @mklement0 ",
      "created_at": "2020-11-29T16:51:05Z",
      "updated_at": "2020-11-29T16:51:05Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@doctordns, I think that @felix9's concern is that a syntax error is being quietly ignored.\r\n\r\n@iSazonov, without looking at the source code all I can say is that this bug surfaces only via the CLI - `Invoke-Expression '{hi'` and  `[powershell]::Create().AddScript('{hi').Invoke()` both report the syntax error, as expected.",
      "created_at": "2020-11-29T17:09:28Z",
      "updated_at": "2020-11-29T17:09:28Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 I guess it is a command line escaping or quotation marks, no?",
      "created_at": "2020-11-29T17:32:59Z",
      "updated_at": "2020-11-29T17:32:59Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@iSazonov, no, it's not related to quoting (argument parsing); what the CLI sees verbatim as the `-c` argument after argument parsing in this case is `{hi`, which it parses and executes as PowerShell code, which should therefore result in a syntax (parser) error, just like with`Invoke-Expression '{hi'`\r\n\r\nAs @felix9's counter example in the OP implies, the problem must be related to parsing something _as a  script block_, given that something that doesn't look like a script block, such as `pwsh -c '}hi'`, properly reports a syntax error.\r\n\r\n---\r\n\r\nPragmatically speaking, something like `pwsh -c '{get-date}'` doesn't make sense, because the script block is merely _created_, not _executed_, causing its verbatim contents to be merely _echoed_, but the problem also occurs when you prepend `& ` to effect execution:\r\n\r\n```powershell\r\n# Equally broken: also fails silently\r\npwsh -c '& {get-date'\r\n```\r\n\r\nAs an aside: Of course, even `pwsh -c '& {get-date}'` is unnecessary, given that there's never a need to construct a script block explicitly, given that the whole `-c` argument is _implicitly_ a script block (`pwsh -c 'get-date'` will do). ",
      "created_at": "2020-11-29T19:21:06Z",
      "updated_at": "2020-11-29T19:21:06Z"
    }
  ],
  "created_at": "2020-11-28T23:43:46Z",
  "labels": [
    "Issue-Question",
    "WG-Engine"
  ],
  "number": 14284,
  "state": "open",
  "title": "silent failure pwsh -c \"{hi\"",
  "updated_at": "2020-11-29T19:21:06Z"
}