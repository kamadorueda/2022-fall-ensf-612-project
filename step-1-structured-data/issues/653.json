{
  "_url": "https://github.com/PowerShell/PowerShell/issues/653",
  "author": "vors",
  "body": "Feedback from our onboarding meeting on 3/9/16\n### Git\n- [x] need SD <=> Git glossary: https://github.com/PowerShell/PowerShell/blob/master/docs/git-sd.md\n- [x] add git installation steps for windows\n- [x] need a primer for bootstrapping: \"Send an email to @andschwa or @vors with your github name, to join PowerShell org. Then follow README.md in https://github.com/PowerShell/PowerShell\". Also, started a new article in MS open hub: https://github.com/Microsoft/ms-open-source-hub-private/pull/367\n- [x] need to have policy statements about email address for commits.: https://github.com/PowerShell/PowerShell/blob/master/CONTRIBUTING.md#microsoft-employees\n- [x] bootstraper instruction for people who don't have access to PowerShell/PowerShell: see above\n- [x] what permissions details are needed?: don't know what that mean\n- [x] two factor auth details\n### Misc\n- [x] who will localize our resources when we move to github: #666\n- [x] update instructions as build.ps1 is still referenced, it should point to the module?\n- [x] how often should we release? Should we release on powershell gallery?: #665\n- [x] we should align our build versioning with tags in app-veyor\n\n---\n\nSergei's list\n- [x] document release process so everybody can do it: #665\n",
  "closed_at": "2016-03-15T00:34:45Z",
  "comments": [
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "> update instructions as build.ps1 is still referenced, it should point to the module?\n\nIMO, yes, same goes for build.sh.\n\n> how often should we release?\n\nWhen there are significant new features added or bugs fixed. Ideally a weekly or biweekly interval I would think.\n\n> Should we release on powershell gallery?\n\nHow would we release Linux packages there?\n\n> we should align our build versioning with tags in app-veyor\n\nI disagree. The AppVeyor versions are entirely arbitrary; they do not correspond to anything in the repository or the Linux builds. We should continue with annotated Git tags following semantic versioning. Can we align AppVeyor versions with our Git tags?\n",
      "created_at": "2016-03-11T23:06:15Z",
      "updated_at": "2016-03-11T23:06:15Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "The `git describe` command produces an unambiguous version number from a combination of the most recent annotated tag (which is on every release), and the number of commits and current commit hash since that tag (for arbitrarily timed builds).\n",
      "created_at": "2016-03-11T23:12:17Z",
      "updated_at": "2016-03-11T23:12:17Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "There is no way to align AppVeyor and Travis-CI build numbers.\nBut that's ok, as far as I understand the point was:\n\nCurrently we use 1.0.{build} pattern for AppVeyor build numbers.\nWe should switch to 0.2.0.{build} and bump it everytime we are doing a tag.\n\n@KarolKaczmarek did I understand it correctly?\n\nI like `git describe`, we should use it in artifacts naming produced by ci.\n",
      "created_at": "2016-03-11T23:18:50Z",
      "updated_at": "2016-03-11T23:20:03Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "AppVeyor ought to be able to automatically use the Git tab. To be honest though, I think the CI build numbers are unimportant, as they're all tied to commits anyway.\n\nWe use it currently for building packages. I don't quite know how to package for Windows. I imagine we should be able to create an MSI from the bin folder pretty easily. There's an issue somewhere here for that.\n",
      "created_at": "2016-03-11T23:39:10Z",
      "updated_at": "2016-03-11T23:39:10Z"
    },
    {
      "author": "KarolKaczmarek",
      "author_association": "CONTRIBUTOR",
      "body": "@vors \nFor DscResources repositories we use {major}.{minor}.{build}.0 schema. \n\nYes, 0 at the end is hardcoded and is always there. \nYes, it sucks, but unfortunately it's required for our servicing scenarios for Windows Update.\n\nOr at least it was required few months ago...\n@joeyaiello can put more light on this.\n",
      "created_at": "2016-03-12T01:12:49Z",
      "updated_at": "2016-03-12T01:14:51Z"
    },
    {
      "author": "KarolKaczmarek",
      "author_association": "CONTRIBUTOR",
      "body": "Regarding appveyor versions and tag versions, I think there's value in aligning them. It's much easier to grab compiled package from appveyor artifacts than checkout the specific tag and build it ourselves. Also, for consistency reasons. \nAll it takes is one line in appveyor.yml, so I don't see reason not to do it. \n",
      "created_at": "2016-03-12T01:18:52Z",
      "updated_at": "2016-03-12T01:18:52Z"
    },
    {
      "author": "vors",
      "author_association": "COLLABORATOR",
      "body": "All questions are addressed\n",
      "created_at": "2016-03-15T00:34:45Z",
      "updated_at": "2016-03-15T00:34:45Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Awesome. ~~Did you see #660?~~\n",
      "created_at": "2016-03-15T00:37:09Z",
      "updated_at": "2016-03-15T00:37:54Z"
    },
    {
      "author": "andschwa",
      "author_association": "MEMBER",
      "body": "Yes you did.\n",
      "created_at": "2016-03-15T00:37:45Z",
      "updated_at": "2016-03-15T00:37:45Z"
    }
  ],
  "created_at": "2016-03-11T22:08:46Z",
  "labels": [
    "Area-Maintainers-Documentation"
  ],
  "number": 653,
  "state": "closed",
  "title": "Enhance our processes",
  "updated_at": "2016-03-15T00:37:54Z"
}