{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16442",
  "author": "Jaykul",
  "body": "### Summary of the new feature / enhancement\r\n\r\nAs a user I want Write-Host to support specifying full RGB colors on the -Foreground and -Background parameters.\r\n\r\nI would also like to be able to specify any of the X11 named colors by name\r\n\r\n### Proposed technical implementation details (optional)\r\n\r\nInstead of needing to write `$($PSStyle.Foreground.FromRgb(0xa020f0))` into the string to set a purple color, I want to specify `-Foreground A020F0` or `-Foreground 0xa020f0` or `-Foreground Purple`",
  "closed_at": null,
  "comments": [
    {
      "author": "doctordns",
      "author_association": "COLLABORATOR",
      "body": "If you do accept an Ansi colour, can you also accept a named colour (eg \"darkred\")?",
      "created_at": "2021-11-11T11:55:09Z",
      "updated_at": "2021-11-11T11:55:09Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "I think it's worth discussing from an implementation stand point how this would change `HostInformationMessage`.  I think there are a few options.\r\n\r\n1. Make a new object similar to `HostInformationMessage` but specific to rich color\r\n2. Add new string properties to `HostInformationMessage` for prefix and suffix escape sequences\r\n3. Add new int properties to `HostInformationMessage` and allow the host to translate it (since while uncommon, GUI hosts do exist)\r\n4. Just put the escape sequences into `HostInformationMessage.Message`",
      "created_at": "2021-11-11T16:17:52Z",
      "updated_at": "2021-11-11T16:17:52Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "> I think it's worth discussing from an implementation stand point how this would change `HostInformationMessage`. I think there are a few options.\r\n\r\nThere was some discussion of this years ago on #2381 and I still like the idea of [adding objects like RGBColor and Text](https://github.com/PowerShell/PowerShell/issues/2381#issuecomment-300687702).\r\n\r\nOf course, the current implementation is spaghetti. E.g. `$PSStyle.OutputRendering =\"PlainText\"` will strip **all** VT escape sequences -- NOT hust the ones PowerShell adds, and NOT just colors. I really hate that PowerShell is stripping escape sequences from the output of _other things_,  However, it doesn't strip colors added by `Write-Host`. If we changed Write-Host so it uses escape sequences, it would then be affected by `OutputRendering = \"PlainText\"` ...",
      "created_at": "2021-11-12T04:12:34Z",
      "updated_at": "2021-11-12T04:21:25Z"
    },
    {
      "author": "jdhitsolutions",
      "author_association": "COLLABORATOR",
      "body": "Added to the Cmdlet Working Group list for review and consideration.",
      "created_at": "2022-02-07T15:13:45Z",
      "updated_at": "2022-02-07T15:13:45Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> I really hate that PowerShell is stripping escape sequences from the output of _other things_, However, it doesn't strip colors added by `Write-Host`. If we changed Write-Host so it uses escape sequences, it would then be affected by `OutputRendering = \"PlainText\"` ...\r\n\r\n@Jaykul  \r\nThings like `git log` and `git diff` still output  with colour - which I'm fairly sure is ansi  - do you mean PowerShell itself is stripping sequences from functions / cmdlets which aren't part of the core package ? \r\n\r\nIt's a \"what do users expect ? \" question.  If I say I want **plaintext** rendering , what's the **scope** of that ?\r\nThe rendering of Error, verbose etc is now done with ANSI. so the plain-text option displays them plain, but `Write-Host` keeps whatever its parameters specify (ANSI sequences in the text to be written _are_ blocked). That allows a developer to impose colours the user doesn't want and create accessibility problems so one question here is, **Should the foreground and background in Write-Host also send ANSI ?** \r\n\r\nTo the wider point: \r\n\r\n- Each console host defines, via user settings, what R,G,B values to use for 16 colours (Black, White, RGB, YMC  in Bright/Dark variants)  people may remember Windows PowerShell redefining DarkMagenta in the console host for the PowerShell blue background. Different hosts have different defaults for these 16 - compare the output of `$psStyle` in VSCode and Windows Terminal.\r\n- The 16 are embedded in `[consoleColor]` - unfortunately its naming of \"Yellow\"/\"DarkYellow\" is out-of step with the ANSI names \"BrightYellow\"/\"Yellow\".    \r\n- `[system.drawing.color]` supports most X11 named colours (some are missing) and defines what RGB values they should be.  These _don't_ include Bright/dark versions of everything and has some named \"light\" instead. So \"Yellow\" has ANSI, ConsoleColor and Drawing.Color meanings \r\n- `Write-host` uses `[consoleColor]`. Any change needs to support the existing names and values. e.g. `write-host -f 14 \"This is Yellow\"`  still needs to translate 14 to 'yellow' and yellow to mean whatever the brighter Yellow has been defined as, NOT an absolute 0xFFFF00 \r\n\r\nThere's a choice betwen \"add  new parameters to `write-host`\" or **\"Just use ANSI\"**. I wrote and extension for `[system.drawing.color]` to accept text and wrap it in the ansi codes - see below - I'm sure it can be improved, but **why wouldn't we go the \"Just ansi\" route** ? Stopping users managing their colours isn't a good reason :-)    \r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<Types>\r\n  <Type>\r\n    <Name>System.Drawing.Color</Name>\r\n    <Members>\r\n      <ScriptMethod>\r\n        <Name>Foreground</Name>\r\n        <Script>\r\n            param ($Text)\r\n            (\"$([char]27)[38;2;{0};{1};{2}m\" -f $this.r, $this.g , $this.b ) + $Text.ToString() +\"$([char]27)[0m\"\r\n        </Script>\r\n      </ScriptMethod>\r\n      <ScriptMethod>\r\n        <Name>Background</Name>\r\n        <Script>\r\n            param ($Text)\r\n            (\"$([char]27)[48;2;{0};{1};{2}m\" -f $this.r, $this.g , $this.b ) + $Text.ToString() +\"$([char]27)[0m\"\r\n        </Script>\r\n      </ScriptMethod>\r\n    </Members>\r\n  </Type>\r\n</Types>\r\n```\r\nAfter doing `Update-TypeData -AppendPath .\\DrawingColor.Types.ps1xml` It's called like this \r\n\r\n```\r\nusing namespace 'System.Drawing'\r\n\r\n[color]::yellow.Background( [Color]::Red.foreground(\"This is red\"))\r\n```\r\nFor nicer syntax. The following  Allows `foreground Gold \"Always believe in your soul\"   `\r\n\r\n```PowerShell\r\nfunction foreground {\r\nparam(\r\n[ArgumentCompleter({\r\n    param ($CommandName, $ParameterName, $WordToComplete, $CommandAst, $FakeBoundParameters)\r\n    [enum]::GetNames([System.Drawing.KnownColor]).where({$_ -like \"$WordToComplete*\"}) } ) ]\r\n    [System.Drawing.Color]$Color,\r\n    \r\n    $Text \r\n)  \r\n    $Color.Foreground($Text)\r\n}\r\n```\r\n\r\n",
      "created_at": "2022-02-09T17:04:42Z",
      "updated_at": "2022-02-09T17:04:42Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "> Things like git log and git diff still output with colour - which I'm fairly sure is ansi - do you mean PowerShell itself is stripping sequences from functions / cmdlets which aren't part of the core package ?\r\n\r\nJust so, @jhoneil yes.\r\n\r\nFor what it's worth, I think you're presenting a **false choice** between extending and compatibility. My [PANSIES](/PoshCode/PANSIES) module's `Write-Host` **already** handles all the colors compatibly -- and a little more than you listed, because it handles the x11 palette (aka the web-safe color palette) by index ... or by name:\r\n![image](https://user-images.githubusercontent.com/192942/154823630-523adf1f-f2d3-4520-9b22-7f9b1decf840.png)\r\n\r\nWhat it doesn't handle (because it's the \"PowerShell ANSI Escape Sequences\" module) is falling back to API calls when `$PSStyle.OutputRendering = \"PlainText\"` so that it can still output text in color, the way the the built-in Write-Host does when you ask for \"Plain Text\" output. As a result, PowerShell throws out it's color if you set \"PlainText\" rendering:\r\n \r\n![image](https://user-images.githubusercontent.com/192942/154821841-07c30e0d-2a9a-4b07-a926-c0d90d39d257.png)\r\n\r\n",
      "created_at": "2022-02-20T00:33:21Z",
      "updated_at": "2022-02-20T00:33:21Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@Jaykul  - It wasn't intentionally a false choice - you've found a workable to request a specific green. \r\nWe still have the problem of not being quite sure what \"Green\" will give, it RGB value 0-max-0? Or the 3rd of 16 defined colours for the terminal, or the 11th? (Which could be re-defined to something where the hue isn't green).\r\n \r\nThe key question is the user expectation one I posed above \r\n\r\n>  If I say I want **plaintext** rendering , what's the **scope** of that ?\r\n> The rendering of Error, verbose etc is now done with ANSI, so the plain-text option displays them plain, but `Write-Host` keeps whatever its parameters specify (ANSI sequences in the text to be written _are_ blocked). That allows a developer to impose colours the user doesn't want and create accessibility problems, so one question here is, **Should the foreground and background in Write-Host also send ANSI ?**\r\n\r\nThe initial question about plaintext stopping _your_ code from displaying formatting... if I want it that way, and plaintext doesn't do it, how do I get what I want? Because currently one method works for all ansi -  I haven't checked if setting NO_COLOR turns off colours in Write-Host.  \r\n\r\nWith `write-host` and basic ansi colours using the Palette of 16 if the user has changed the palette for accessibility or any other reason it's reasonable to assume cyan will display OK, even if it is some other colour. That's a dangerous assumption if you pick X11 Teal. So I think it's good practice to specify absolute colours in anything someone else will use.     \r\n\r\n",
      "created_at": "2022-02-20T10:39:50Z",
      "updated_at": "2022-02-20T10:39:50Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "I feel like you're arguing a completely different issue, without bothering to do a basic check of your assumptions, @jhoneill\r\n\r\nYou said that \"currently, one method works for all ansi\" -- but the fact is it only works on output that goes through the PowerShell text pipeline for output. **There is no way** to globally disable color in PowerShell, since Write-Host isn't affected by `$PSStyle.OutputRendering`. There is no way to disable color in the terminal either, that's why `git log` (and it's pagers) and PSReadLine still output color, even when you set OutputRendering ...\r\n\r\nLike I said, the current implementation is spaghetti. I guess you need _the terminal_ to handle ignoring colors, if you want black and white.\r\n\r\n### I still don't understand why we're talking about that\r\n\r\nI'm not proposing to change color rendering (at least, I'm not in this issue). That's irrelevant to the question of whether we should **allow** more color options on the Write-Host command. \ud83d\ude23\r\n\r\nAlso, for what it's worth: I don't think sticking to the basic palette helps much if half your users are on PS5 with a \"dark magenta\" that's actually blue, and a \"yellow\" that's off-white. Most of the colors in PowerShell's base 16 are _very_ hard to read on that blue background. Having access to the full color RGB mode doesn't help a lot if you can't tell what the background color is -- cyan's practically impossible to read on a white background....",
      "created_at": "2022-02-25T06:35:31Z",
      "updated_at": "2022-02-25T06:55:40Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> I feel like you're arguing a completely different issue, without bothering to do a basic check of your assumptions, @jhoneill\r\n\r\nOuch. \r\nIt wouldn't be the first time I have gone off at a tangent, but I'm trying to check some assumptions here.  Because (a) I would leave Write-Host frozen in its present state (b) I think when developers make use of colour they do so badly more often than not (c) Specifying absolute r,g,b colours without knowing what other colours are in use will lead to problems. Taking these three if I go into a working group session to talk about doing this my initial assumption is doing it is a poor use of resource. BUT I'm looking to be persuaded otherwise.  \r\n   \r\nI started by saying \r\n> Things like git log and git diff still output with colour - which I'm fairly sure is ansi - \r\n\r\nSo\r\n> You said that \"currently, one method works for all ansi\" -\r\n\r\nYes, yes, all being \"all generated entirely within PowerShell\". \r\n\r\n> the current implementation is spaghetti. \r\n\r\nIt is, and I'm also trying to get a clear picture of where we should get to.\r\n\r\n1. Should ANSI codes be removed from output of external .EXEs ?\r\n2. Should Write-Host switch to using ANSI? Is there a valid reason for preventing a user turning off its colour rendering ?\r\n3. And linked to 2 should Write-Host support absolute colours ?\r\n\r\nRight now the answer is \"use ANSI\" for anything where the combination of basic palette and `Write-host -foreground / -background` isn't suitable. \r\nAs far as I can see this request is to allow output to be forced in colour when the user has expressed a preference (not fully observed) for none, and I'm not seeing how that's a good thing. \r\n",
      "created_at": "2022-02-25T15:16:31Z",
      "updated_at": "2022-02-25T15:17:10Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "> > You said that \"currently, one method works for all ansi\" -\r\n\r\n> Yes, yes, all being \"all generated entirely within PowerShell\".\r\n\r\nUnless it's PSReadLine, or Write-Host, or Microsoft.PowerShell.ConsoleGuiTools, or, or, or...\r\n\r\n### PowerShell should not remove escape sequences produced by other apps that happen to run in a PowerShell session. \r\n\r\nBecause [Virtual Terminal Escape Sequences](https://docs.microsoft.com/en-us/windows/console/console-virtual-terminal-sequences) **are the API of the terminal**, and stripping them breaks the contract that apps think they have with the terminal. Even whe you do it, you are completely wrecking apps like [delta](https://github.com/dandavison/delta), [Out-ConsoleGridView](https://devblogs.microsoft.com/powershell/introducing-consoleguitools-preview/), htop, and everything else built on top of ncurses, gui.cs, PANSIES, etc.\r\n\r\nHypothetically, you can try to remove SGR sequences (that's ```e[...m``) which do color/bold/italics without totally breaking things -- but you might still break apps that depend on color contrast for frames, pop-ups, etc.\r\n\r\n### Color should always be output using VT ESC sequences.\r\n\r\nBecause only escape sequences can pass across a remote ssh session or the sort of remote terminal sessions created by WSL, docker, kubectl, nerdctl, etc. In the modern world of cloud computing and containers, escape sequences are your only hope of providing something more than ASCII text.\r\n\r\n### Write-Host should support full RGB colors.\r\n\r\nBecause _most terminals do_. Because Windows's conhost and terminal do. Because the current situation makes Write-Host outdated and frankly, **slower** than the one in PANSIES \ud83e\udd28\r\n\r\n### The proposed change would not force color on the user. \r\n\r\n**IF** PowerShell's preference variable strips SGR sequences from PowerShell output, then making `Write-Host` use SGR sequences would actually _correct_ the bug that Write-Host outputs color even when users have asked for no color. But in any case, this change literally just makes things easy which are already possible. I'm asking to change:\r\n\r\n```PowerShell\r\nWrite-Host \"$($PSStyle.Foreground.FromRgb(0xa020f0))Purple Rain$($PSStyle.Reset)\"\r\n```\r\n\r\nTo:\r\n```PowerShell\r\nWrite-Host -Foreground a020f0 \"Purple Rain\"\r\n```",
      "created_at": "2022-02-26T04:50:04Z",
      "updated_at": "2022-02-26T04:51:14Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@Jaykul  OK,   I think that's better, consistent and do-able. I think this is on the list for the next Working group meeting so we can talk about it sensibly. There's a counter argument that the contract the user has with PowerShell or their terminal comes above the the one that apps think they have, but that's a side issue. I think work items (1) Write-Host moving to ANSI and (2) Adding support for bold/underline etc and absolute colours to an ansi-based Write-Host    should be ring fenced otherwise we'll try to fix all the present spaghetti.  \r\n\r\n",
      "created_at": "2022-02-26T11:26:08Z",
      "updated_at": "2022-02-26T11:26:35Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": ".Net team has plans to improve console API in .Net 7 time frame but with low priority. See https://github.com/dotnet/runtime/issues/44513 - I hope this will be very useful for related WGs. There are proposals for new classes...\r\n",
      "created_at": "2022-02-26T18:52:22Z",
      "updated_at": "2022-02-26T18:52:22Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "Fwiw, @jhoneill here's a concrete example of useful color in the `docker build` output through PowerShell in the VS Code terminal:\r\n![image](https://user-images.githubusercontent.com/192942/155857157-47a51de7-5a82-485c-b254-13f7661eeab5.png)\r\n\r\nNote that the blue isn't very readable, but that's just because the VSCode palette wasn't set to my usual \ud83d\ude09\r\n\r\nI think if this was missing color completely, it would be _much harder_ to easily tell what was happening:\r\n- Blue lines are complete\r\n- White ones are still running (you can tell without color if you look closely, because the numbers continue to change)\r\n- Grey lines are a rolling buffer of the output of the white line directly above them\r\n\r\nWhen that gets multiple downloads going and multiple tasks running at the same time, the only thing that keeps it sane is the distinction between the white and gray. Worse, if there was no way to reposition and update specific parts of the text buffer, they would have to abandon updating you on the download states...",
      "created_at": "2022-02-26T20:34:23Z",
      "updated_at": "2022-02-26T20:34:23Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "@Jaykul  FWIW I never said that all use of colour is bad.  \r\n\r\nHowever. We teach programmers that the job of programs is to print text on the console (e.g. Hello, World), and even when the programming task is scripting, not systems programming there is still a desire to print WAY too much : - one recent issue is to  print the time to process the profile less often:  I can judge fast enough or too slow, without knowing to the millisecond how long it took, I'm no more informed by the message being there , so why is it shown by default.  Way too much that is printed (like the long hashes in your example) is nothing but chaff that the poor user needs to wade through. \r\n   \r\nThe felony is compounded by Programmers who - with no particular skills in UI design being brought to bear on the problem - decide that we'd like our headings in green, or Zip files picked out in red or some such (or for an example on a recent issue, an external executable prints file names in dark magenta - a problem for Windows PowerShell on the default windows host).    \r\nIt's not always bad: git helps me see changes by using of colour, but in the colours git log are just what devs thought was a good idea at the time.  Picking out warnings and errors is good, and what you've shown basically has two classes of \"recede into the background\" and one class of \"Pay attention to this\". We're better off with that.  But the devs let lose with crayons kind of colouring in is something we should be spared. \r\n ",
      "created_at": "2022-02-26T21:38:02Z",
      "updated_at": "2022-02-26T21:38:02Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Yes, you can notice how the Windows Event Viewer is made - we see a color (one of the three) and short message, if we want more we can click the line and see more, if we want even more we can open the XML tab and examine the raw information.\r\nIn the console our possibilities are limited to the first one, everything else should be in the log if it is important.\r\n\r\nI have repeatedly voted that the formatting system should be improved to support color schemes. Then anyone could change the default scheme or use schemes from the community.\r\n\r\nAlso keep in mind that what we output to the console is often the same as what we output to the log file where there should be no control console codes. (And if we can't always automatically determine the target (console or file) but what should be the priority?)\r\nAlso keep in mind that Write-Host writes to Informational Stream too. (This can be both a solution and a problem)",
      "created_at": "2022-02-27T19:24:34Z",
      "updated_at": "2022-02-27T19:24:34Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@PowerShell/wg-powershell-cmdlets discussed this a bit and don't have a specific resolution yet as we believe there's additional discussion that needs to happen:\r\n\r\n- We agree that `Write-Host` should not by-pass the `OutputRendering` filter and the `-ForegroundColor` and `-BackgroundColor` should leverage PSStyle to emit ANSI instead of calling the console APIs to set colors.  In this way from an accessibility standpoint, users should get `plaintext` if that is what they require.\r\n- We agree to support the range of [256 color names](https://en.wikipedia.org/wiki/X11_color_names).  However, we wonder how to expose this via `PSStyle`.  Should we extend the enum so that `$PSStyle.Foreground.<tab>` shows 256 completions?\r\n- For extended color names, we would only support access via `PSStyle`\r\n- Should we consider using the [Web color names](https://en.wikipedia.org/wiki/Web_colors) instead of X11 as some of them aren't the same and is more modern?",
      "created_at": "2022-03-02T17:54:33Z",
      "updated_at": "2022-03-02T17:54:33Z"
    },
    {
      "author": "Lo0oG",
      "author_association": "NONE",
      "body": "You may want to use the colortable code from Windows Terminal as they made some optimisations to the data to reduce the size of storing all the different color variants.\r\nUtils::ColorFromXOrgAppColorName\r\nhttps://github.com/microsoft/terminal/blob/main/src/types/colorTable.cpp\r\n\r\nOr you could just pass over any color name without any validation that it is a proper name and let whatever terminal is running handle if the colorname is a valid one.\r\n\r\n<blockquote><img src=\"https://repository-images.githubusercontent.com/100060912/dc77b180-764a-11e9-9e12-aace7d0ecd7d\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/microsoft/terminal\">terminal/colorTable.cpp at main \u00b7 microsoft/terminal</a></strong></div><div>The new Windows Terminal and the original Windows console host, all in the same place! - terminal/colorTable.cpp at main \u00b7 microsoft/terminal</div></blockquote>",
      "created_at": "2022-03-11T12:56:10Z",
      "updated_at": "2022-03-11T13:09:41Z"
    },
    {
      "author": "Jaykul",
      "author_association": "CONTRIBUTOR",
      "body": "> * Should we consider using the [Web color names](https://en.wikipedia.org/wiki/Web_colors) instead of X11 as some of them aren't the same and is more modern?\r\n\r\nDefinitely NOT. \ud83d\ude09\r\n\r\nFor three reasons:\r\n1. This is the terminal. We are older than the web, and we aim to be **compatible with xterm**, not mosaic.\r\n2. The web colors change some of the common names that are part of the existing 16 colors. E.g. cyan became aqua, magenta became fuchsia...\r\n3. The web colors are sRGB color-space specific, and you don't have that luxury ;-)\r\n\r\n",
      "created_at": "2022-03-20T22:59:32Z",
      "updated_at": "2022-03-20T22:59:32Z"
    }
  ],
  "created_at": "2021-11-11T04:46:14Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Interactive-Console",
    "WG-Cmdlets",
    "Up-for-Grabs"
  ],
  "number": 16442,
  "state": "open",
  "title": "Support 0xRRGGBB colors on Write-Host",
  "updated_at": "2022-05-04T16:29:49Z"
}