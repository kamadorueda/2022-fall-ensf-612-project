{
  "_url": "https://github.com/PowerShell/PowerShell/issues/12150",
  "author": "mklement0",
  "body": "POSIX-like shells such as `bash` define the `SHELL` environment variable on startup as the full path of the _current user's default shell_ (e.g., `/bin/bash`). (They do so even if they're not the default shell themselves - unless the variable is already defined.)\r\n\r\nThis variable is [mandated by POSIX](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap08.html#tag_08):\r\n\r\n> SHELL\r\n> This variable shall represent a pathname of the user's preferred command language interpreter. \r\n\r\nIf PowerShell itself functions as the default shell, `SHELL` is never set, because PowerShell doesn't set it.\r\n\r\nUnix utilities may rely on the presence of this environment variable.\r\n\r\nTherefore, PowerShell, like POSIX-like shells, should define `SHELL` on startup, unless it is already defined.\r\n\r\n# Environment data\r\n\r\nWritten as of:\r\n\r\n```none\r\nPowerShell 7.0\r\n```\r\n\r\n",
  "closed_at": "2021-07-08T21:00:59Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> Unix utilities may rely on the presence of this environment variable.\r\n\r\nInteresting, how would we test that defining this variable will have the desired effects and do not break these utilities?",
      "created_at": "2020-03-19T05:14:45Z",
      "updated_at": "2020-03-19T05:14:45Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> how would we test \r\n\r\nI don't think you can, but I don't think we have to:\r\n\r\nEven non-POSIX shells such as `csh` set the `SHELL` variable, and even the behavioral variations among POSIX-like shells (except if they're in compatibility mode) mean that you can't make blind assumptions about _how, specifically_, to _invoke_ the shell reported by `SHELL` (other than without arguments).\r\n\r\nIn other words: no existing utility can make _fixed_ assumptions about specific behaviors exhibited by the user's default shell, as reflected in `SHELL`.\r\n\r\nHowever, knowing _what shell_ is the user's default shell is important information, which PowerShell should provide too.\r\n\r\nAn important use case is that installer utilities may decide what shell-specific initialization files (profiles) they need to modify and how.\r\n\r\n\r\n",
      "created_at": "2020-03-19T12:37:01Z",
      "updated_at": "2020-03-19T12:37:01Z"
    },
    {
      "author": "davidBar-On",
      "author_association": "CONTRIBUTOR",
      "body": "I have a proposed fix for this issue, but again I am not sure were to add the tests.  My planned main test is to unset the SHELL env. variable, make sure it is not defined, and then run pwsh and verify that SHELL is set (and if possible also verify its value)",
      "created_at": "2021-04-02T13:57:26Z",
      "updated_at": "2021-04-02T13:57:26Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I don't know if this has since been fixed or whether I'm missing something, but I just tried with PowerShell Core 7.2.0-preview.4 as the default shell on both macOS and Linux, and `$env:SHELL` _is_ defined accordingly.\r\n\r\n@davidBar-On, do you still see it _not_ being set, and if so, in what version (and on what platform)?",
      "created_at": "2021-04-02T17:09:02Z",
      "updated_at": "2021-04-02T17:09:02Z"
    },
    {
      "author": "davidBar-On",
      "author_association": "CONTRIBUTOR",
      "body": "I am using WSL (Ubuntu 20.4 Linux) and building from PowerShell 7.2.0-preview.3 master branch. `$env:SHELL` is **not** defined by this version.  (Initially it was defined as `/bin/bash` from Linux, but after unset it and running pwsh again it was not defined.)",
      "created_at": "2021-04-02T17:33:11Z",
      "updated_at": "2021-04-02T17:33:11Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> I don't know if this has since been fixed or whether I'm missing something\r\n\r\nWe don't set the env variable in pwsh.",
      "created_at": "2021-04-02T17:52:42Z",
      "updated_at": "2021-04-02T17:52:42Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @iSazonov.\r\n\r\nI've come to realize that the POSIX-compatible shells also do _not_ set this variable [as an environment variable - see below] - they rely on the _system_ to set it:\r\n\r\n* On macOS, it seems that setting `$env:SHELL` happens via the `login` utility that the terminal applications use behind the scenes, given that every shell created in a terminal is launched as a _login_ shell (`-l`)\r\n\r\n* On Linux, judging by my Ubuntu 18.04 machine, it seems that `$env:SHELL` is set _once_, when a user's OS session starts.\r\n\r\nTherefore, from what I can tell, using PowerShell as a user's default shell should work correctly already - also via `ssh`.\r\n\r\n----\r\n\r\nAmong POSIX-compatible shells, `zsh` and `dash` do not set `$SHELL` at all, whereas `bash` and `ksh` only set it as a _shell-only_ variable, not as an environment variable - all this suggests that shells aren't expected to define this variable _as an environment variable_ themselves.\r\n\r\nDue to PowerShell having distinct syntaxes for environment- vs. shell-only variables, the `bash` / `ksh` approach wouldn't work; as a courtesy, we _could_ set the environment variable, but I don't think it's necessary, given that it should be defined by the system, and given that POSIX-compatible shells do not (fully) try to compensate for its absence.\r\n\r\n---\r\n\r\n@davidBar-On, can you confirm that starting a new shell after `chsh -s /usr/bin/pwsh` indeed has `$env:SHELL` defined accordingly, _after logging out and back in_ or rebooting?\r\n\r\n",
      "created_at": "2021-04-02T19:09:24Z",
      "updated_at": "2021-04-02T19:13:58Z"
    },
    {
      "author": "davidBar-On",
      "author_association": "CONTRIBUTOR",
      "body": "> can you confirm that starting a new shell after `chsh -s /usr/bin/pwsh` indeed has `$env:SHELL` defined accordingly, after logging out and back in or rebooting?\r\n\r\nAfter setting `pwsh` as the default shell using `chsh` and logging in the `$env:SHELL` is set to the new shell (I used `su` to login).\r\n\r\nAlso, under Linux `bash` I `unset SHELL` and checked which shell sets it (without login).  `/bin/bash` does set SHELL if it is not set already. `/bin/sh` and `/bin/csh` does not.",
      "created_at": "2021-04-02T20:47:07Z",
      "updated_at": "2021-04-02T20:47:07Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for checking, @davidBar-On (using `su $env:USER` is a great idea to avoid the need for a logout / reboot - hadn't occurred to me).\r\n\r\nNote that `/bin/bash` sets a _shell_ variable named `SHELL`, not an _environment_ variable (verify with `declare -p SHELL`); On Ubuntu, `/bin/sh` is `dash` (which, as you state, takes no action at all). As stated, the `bash` approach (ditto for `ksh`) isn't really an option for PowerShell, given that _environment_ variables use a different namespace (`$env:SHELL`) from _shell_ variables (`$SHELL`).\r\n\r\nJust to be clear: Are we in agreement that _no_ action is needed?\r\n\r\n",
      "created_at": "2021-04-02T21:01:07Z",
      "updated_at": "2021-04-02T21:01:07Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If we don't know broken scenarios with SHELL _environment_ variable I suggest to archive the issue.",
      "created_at": "2021-04-03T03:20:52Z",
      "updated_at": "2021-04-03T03:20:52Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as won't fix and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2021-07-08T21:00:58Z",
      "updated_at": "2021-07-08T21:00:58Z"
    }
  ],
  "created_at": "2020-03-18T21:58:20Z",
  "number": 12150,
  "state": "closed",
  "title": "On Unix, PowerShell should define the SHELL environment variable on startup",
  "updated_at": "2021-07-08T21:00:59Z"
}