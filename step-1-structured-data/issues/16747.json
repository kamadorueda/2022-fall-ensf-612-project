{
  "_url": "https://github.com/PowerShell/PowerShell/issues/16747",
  "author": "javiercn",
  "body": "### Summary of the new feature / enhancement\n\nAs a user I want to configure my powershell profile to exclude completion from certain modules that I'm not using on a given context. For example, as a developer when I'm on a powershell session and type `Remove-I` for (remove-item) the first result I get on autocompletion is `Remove-InitiatorId`. \r\n\r\nIn many scenarios like these, some commands that won't ever be used in this context lead to a poor experience where you need to either type more characters to disambiguate or tab through. \r\n\r\nIt's great that by default you can get commands from all installed modules for discoverability, but with the growing number of modules it becomes painful to use on a regular session.\r\n\r\nTo provide an analogy, this is similar to importing all namespaces by default on C#, each type is readily available, but searching through the types becomes much more problematic because they are way more irrelevant types in scope.\n\n### Proposed technical implementation details (optional)\n\nIdeally this would be either an allow list or a block list (possibly an allow list), where you can set your preferences for the session via a cmd-let to filter completions to the modules you've defined.\r\n\r\n`Set-CommandCompletion Microsoft.PowerShell.Utility, Microsoft.PowerShell.Management`\r\n\r\nThat will make only commands in those modules to be considered for completions and you can put this on your $Profile so that it happens every time you create a new session.",
  "closed_at": null,
  "comments": [
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "At the very least, prioritizing  commands from loaded modules over those in _available_ modules would help. ",
      "created_at": "2022-01-14T15:03:27Z",
      "updated_at": "2022-01-14T15:03:27Z"
    },
    {
      "author": "kasini3000",
      "author_association": "NONE",
      "body": "I would like to ask a similar question.\r\nI have developed a multi-process powershell automatic management tool [kasini3000].\r\nI want to know how to get a powershell with the least functions, the smallest memory footprint, and the smallest powershell without loading most .net dlls. Only powershell engine, \r\nhow should I do it?",
      "created_at": "2022-01-14T16:09:11Z",
      "updated_at": "2022-01-14T16:09:11Z"
    },
    {
      "author": "MartinGC94",
      "author_association": "CONTRIBUTOR",
      "body": "You can (mostly) do this today. If you set `$PSModuleAutoLoadingPreference = \"None\"` PowerShell won't find commands from modules that haven't been imported so instead of running `Set-CommandCompletion Microsoft.PowerShell.Utility, Microsoft.PowerShell.Management` to limit completions to commands from those modules you instead use `Import-Module Microsoft.PowerShell.Utility, Microsoft.PowerShell.Management` to explicitly import the modules you want to use in your session.",
      "created_at": "2022-09-19T15:00:17Z",
      "updated_at": "2022-09-19T15:00:17Z"
    }
  ],
  "created_at": "2022-01-14T11:43:01Z",
  "number": 16747,
  "state": "open",
  "title": "Provide a way to exclude cmdlets from some modules from completions in a concrete powershell session",
  "updated_at": "2022-09-19T15:00:17Z"
}