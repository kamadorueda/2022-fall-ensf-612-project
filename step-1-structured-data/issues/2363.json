{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2363",
  "author": "lzybkr",
  "body": "MaximumErrorCount is fixed at 256 (we may want to consider an environment variable to make this bigger)\n\nMaximumAliasCount, MaximumDriveCount, MaximumFunctionCount, and MaximumVariableCount have been removed.\n\nFixes #2221\n- [x] Add tests\n",
  "closed_at": "2016-09-29T00:28:16Z",
  "comments": [
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "Hi **@lzybkr**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    <p>\n        It looks like you're a Microsoft contributor (Jason Shirk (POWERSHELL)). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    </p>\n\nTTYL, MSBOT;\n",
      "created_at": "2016-09-26T22:20:49Z",
      "updated_at": "2016-09-26T22:20:49Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "@PaulHigin - can you clarify your comment?\n\nI don't see a compatibility issue. I can't see folks relying on >256 errors in an automation scenario. Maybe in rare cases you need >256 errors retained to investigate a failure, but that's a manual step, so it's not really a compatibility issue.\n\nSetting `$MaximumErrorCount` is rare (having searched our corpus and GitHub, basically just 1 hit - copied in many scripts. Nothing breaks though, the assignment would create a new variable that isn't used by the engine.\n",
      "created_at": "2016-09-27T17:03:39Z",
      "updated_at": "2016-09-27T17:03:39Z"
    },
    {
      "author": "PaulHigin",
      "author_association": "COLLABORATOR",
      "body": "I meant that if users depend on having more than 256 errors in the error list then this limits them unnecessarily.  But I agree it is not a large issue and probably unlikely.  \n",
      "created_at": "2016-09-27T17:16:01Z",
      "updated_at": "2016-09-27T17:16:01Z"
    },
    {
      "author": "DavidGibsonNorth",
      "author_association": "NONE",
      "body": "This change broke one of my unit tests, the test was confirming that '-ErrorAction SilentlyContinue' was working in a function. The test was lazy, it just checked that $Error.Count had increased, or had hit the $MaximumErrorCount.\r\n\r\nIs this change from PowerShell 5 documented anywhere? I've been testing my unit tests against PowerShell v7.0.0-rc.1, and have not spotted anything about breaking changes (admittedly this is very much an edge case). It's not mentioned in C:\\Program Files\\PowerShell\\7-preview\\Modules\\PSReadLine\\Changes.txt.",
      "created_at": "2020-01-13T18:05:29Z",
      "updated_at": "2020-01-13T18:05:29Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@DavidGibsonNorth This change was made more than 3 year ago during the PowerShell v6.0 time frame. It was mentioned in the [`CHANGELOG.md`](https://github.com/PowerShell/PowerShell/blob/master/CHANGELOG/6.0.md#v600-alpha11---2016-10-17), but I admit that it's impossible to find and not sure if we had it documented properly (/cc @joeyaiello @sdwheeler).\r\n\r\n> It's not mentioned in C:\\Program Files\\PowerShell\\7-preview\\Modules\\PSReadLine\\Changes.txt.\r\n\r\nThat file only contains changes for the `PSReadLine` module.",
      "created_at": "2020-01-13T20:36:46Z",
      "updated_at": "2020-01-13T20:36:46Z"
    },
    {
      "author": "DavidGibsonNorth",
      "author_association": "NONE",
      "body": "> @DavidGibsonNorth This change was made more than 3 year ago during the PowerShell v6.0 time frame. It was mentioned in the [`CHANGELOG.md`](https://github.com/PowerShell/PowerShell/blob/master/CHANGELOG/6.0.md#v600-alpha11---2016-10-17), ...\r\n\r\nOk, thanks for that. Fair enough. I missed out PowerShell 6 due to the narrower scope, version 7 working well, it's only requiring the odd 1 line tweak, found by unit tests.",
      "created_at": "2020-01-13T20:56:45Z",
      "updated_at": "2020-01-13T20:56:45Z"
    },
    {
      "author": "GFoxHub",
      "author_association": "NONE",
      "body": "I was load testing some PowerShell code that uses a background runspace to ship all the errors that have been written to $Error.  I ran into the 256 item limit. I struggled to figure out why the $MaximumErrorCount variable mentioned in several articles wasn't working until I tried going back to PowerShell 5.1.  After realizing it was just broken after Powershell 5.1 I adjusted my web search and found this thread.\r\n\r\nPaul clearly calls out the issue of backward compatibility and avoiding an unnecessary limitation. Instead a decision was made based on a faulty argument that removing functionality isn't an issue of backward compatibility and also on not \"seeing folks using it\".\r\n\r\nRegarding this change being made three years ago, I would suggest that people aren't noticing until now because their migration to .Net-Core-Based PowerShell has been delayed potentially due to issues like this.\r\n\r\nPlease reinstate the ability to increase the MaximumErrorCount because people need it, it had already been implemented practically, and there cases when it is preferable to using -ErrorVariable or clearing the $Error variable as it fills up.\r\n\r\nhttps://github.com/PowerShell/PowerShell/issues/12860",
      "created_at": "2020-06-01T06:35:42Z",
      "updated_at": "2020-06-01T06:35:42Z"
    }
  ],
  "created_at": "2016-09-26T22:20:45Z",
  "number": 2363,
  "state": "closed",
  "title": "Remove most Maximum* capacity variables",
  "updated_at": "2020-06-01T06:35:42Z"
}