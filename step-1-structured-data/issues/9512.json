{
  "_url": "https://github.com/PowerShell/PowerShell/issues/9512",
  "author": "msftrncs",
  "body": "Originally posted to https://github.com/PowerShell/vscode-powershell/issues/1939, as it was originally regarding completions in VS Code, but the completions come from PowerShell, and were confirmed at the command prompt.\r\n\r\n### System Details\r\n\r\n- Operating system name and version: Win 10 1809\r\n- VS Code version: 1.33.1 (user)\r\n- PowerShell extension version: 2.0.2\r\n- PowerShell: 6.2.0\r\n\r\n### Issue Description\r\n\r\ntry:\r\nEnter `[PSDefaultValueAttribute`, press [TAB] (completion), the value inserted is `PSDefaultValue`.  This is good.\r\nEnter `[FlagsAttribute`, press [TAB] (completion), the value actually inserted is `System.FlagsAttribute`.  I expected just `Flags`.\r\nSimilar result for `[Ordered`.\r\nEnter `[PSCustomObject` a completion here changes it to `pscustomobject`.  For some reason VS Code displays `PSObject` as the completion, but when chosen, the same result occurs (`pscustomobject`)\r\n\r\nWhy the difference between the completions for these objects?\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "So far the discussion has stated that `PSDefaultValue` is defined as an accelerator, and `pscustomobject` is the accelerator for `[System.Management.Automation.PSObject]`, hence the discrepancy in VS Code, and `ordered` is just hard set in the parser.   That doesn't explain `flags` so far.",
      "created_at": "2019-05-01T22:08:29Z",
      "updated_at": "2019-05-01T22:08:29Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "`[Flags()]` is an attribute with full name `FlagsAttribute`... Not sure why it's completing the `System` portion specifically but although attributes can omit the `Attribute` suffix in their name in C#, for example, PS doesn't have quite the same support for it, and there are some cases where the proper name is necessary.\r\n\r\nThe rules there, however, aren't clear, but I would expect that the tab completion there is suffering from a similar root cause.",
      "created_at": "2019-05-02T04:29:11Z",
      "updated_at": "2019-05-02T04:29:11Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "@SeeminglyScience and @rjmholt both pretty well detailed whats happening with this on the vscode-powershell version of this thread. (link in original post)\r\n\r\nMy issue here is that the actions of the completions provide confusion to the user.  This is more common in VS Code (or other editors) than on the command line, where the completer is more likely to be tripped accidentally.  I suspect this was partially the goal of the type accelerations, as it improved the interactive experience with the short-hand types, and gave data to a completion engine at the same time.",
      "created_at": "2019-05-02T05:00:03Z",
      "updated_at": "2019-05-02T05:00:03Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "I might suggest, that since \"keywords\" such as `[ordered]` and `[flags()]` are propagated via documentation, that they should be, somehow, part of the completion logic.\r\n\r\nFor instance the completion options for `[ordered` (on my system) should be \r\n- `[ordered` (even if `[ORDERED` was entered)\r\n- `[System.Collections.Specialized.OrderedDictionary`\r\n- `[System.Linq.OrderedParallelQuery`\r\n\r\n`[flags` completion should maybe be handled in a similar way, even though its truly an attribute and not a language keyword.\r\n\r\nAdditionally, all of the `system.*Attribute` attributes should be included in the same format that PowerShell permits them, providing, maybe, a cross check to make sure that a type name doesn't also exist without the `Attribute` suffix.  Of course, this would probably eliminate much of the use of the type accelerators feature.",
      "created_at": "2019-05-02T05:18:28Z",
      "updated_at": "2019-05-02T05:18:28Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "> Additionally, all of the system.*Attribute attributes should be included in the same format that PowerShell permits them, providing, maybe, a cross check to make sure that a type name doesn't also exist without the Attribute suffix. Of course, this would probably eliminate much of the use of the type accelerators feature.\r\n\r\nThe problem is that PowerShell *only* permits that format in attribute expressions.  Typically when command completion is triggered for an attribute, it's not actually an `AttributeAst` yet.  Until that `()` is typed, it's a `TypeExpressionAst` or a `TypeConstraintAst`.  Both of those do very different things and resolving all attributes without their suffix could lead to a lot of confusing scenarios.\r\n\r\nSame thing applies to `ordered`.  It's only valid in a `ConvertExpressionAst`, but most of the time it's impossible to tell that you want that until you've typed the rest of the expression.  This one I'm kind of on the fence about, but I lean towards thinking it would do more harm than good.",
      "created_at": "2019-05-02T12:48:26Z",
      "updated_at": "2019-05-02T12:48:26Z"
    },
    {
      "author": "msftrncs",
      "author_association": "CONTRIBUTOR",
      "body": "Whether a given completion is completely valid in context is not to be considered 100% relevant to the completion, unfortunately it cannot possibly know every possible context, so I suggest that those completions should be available, because they could be possible.  The user will still need to make some choice.  I did not suggest leaving the original completions with the `attribute` suffix out, only that the completions for without the suffix should be provided because they are possible.\r\n\r\nUnfortunately, the completion logic doesn't work if the `()` is already present.  So we have yet another failure.",
      "created_at": "2019-05-02T16:36:14Z",
      "updated_at": "2019-05-02T16:36:14Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "> so I suggest that those completions should be available, because they could be possible\r\n\r\nWorth noting that more/noisier completions are a degradation of the completion experience; you want fewer and more accurate completions.\r\n\r\nThe completion experience was originally written for interactive usage, where you're editing at the end of the script.\r\n\r\nGiven that it's being used quite heavily in editor contexts now, I think it's worth investigating completions mid-script.",
      "created_at": "2019-05-02T23:53:57Z",
      "updated_at": "2019-05-02T23:53:57Z"
    }
  ],
  "created_at": "2019-05-01T21:51:05Z",
  "labels": [
    "Issue-Bug",
    "WG-Interactive-IntelliSense"
  ],
  "number": 9512,
  "state": "open",
  "title": "completions for attribute/type alias's inconsistent",
  "updated_at": "2019-09-29T16:34:03Z"
}