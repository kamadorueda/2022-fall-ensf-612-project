{
  "_url": "https://github.com/PowerShell/PowerShell/issues/2862",
  "author": "2xmax",
  "body": "This pull request fixes the Invoke-RestMethod cmdlet behavior if the response is neither XML nor JSON, e.g. just a plain text from a webservice.\r\n\r\n**Before the change:**\r\n```\r\nPS> Invoke-RestMethod http://httpbin.org/encoding/utf8\r\nInvoke-RestMethod : Unexpected character encountered while parsing value: <. Path '', line 0, position 0.\r\nAt line:1 char:1\r\n+ Invoke-RestMethod http://httpbin.org/encoding/utf8\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n  + CategoryInfo : NotSpecified: (:) [Invoke-RestMethod], JsonReaderException\r\n  + FullyQualifiedErrorId : Newtonsoft.Json.JsonReaderException,Microsoft.PowerShell.Commands.InvokeRestMethodComman\r\n  d\r\n```\r\n**After the change:**\r\n```\r\nPS> Invoke-RestMethod http://httpbin.org/encoding/utf8\r\n<h1>Unicode Demo</h1>\r\n...\r\n```",
  "closed_at": "2016-12-15T08:06:26Z",
  "comments": [
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "Hi __@2xmax__, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\r\n    <span>\r\n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\r\n    </span>\r\n\r\nTTYL, MSBOT;\r\n",
      "created_at": "2016-12-09T01:22:30Z",
      "updated_at": "2016-12-09T01:22:30Z"
    },
    {
      "author": "msftclas",
      "author_association": "NONE",
      "body": "Hi __@2xmax__, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\r\n    <span>\r\n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\r\n    </span>\r\n\r\nTTYL, MSBOT;\r\n",
      "created_at": "2016-12-09T02:09:26Z",
      "updated_at": "2016-12-09T02:09:26Z"
    },
    {
      "author": "2xmax",
      "author_association": "CONTRIBUTOR",
      "body": "Eliminated the duplication caused by platform-specific libs exceptions. Also, locally I wrote [some C# unit tests for the JsonObject class](https://gist.github.com/2xmax/ced86b7f7d9bbcdf0d004fa507b9a314) related to the problem I was trying to solve but found only [a few C# unit tests](https://github.com/PowerShell/PowerShell/tree/master/test/csharp) in the project for some reason. If it makes sense, I can bring in the C# unit tests as well.",
      "created_at": "2016-12-11T04:13:14Z",
      "updated_at": "2016-12-11T04:55:38Z"
    },
    {
      "author": "2xmax",
      "author_association": "CONTRIBUTOR",
      "body": "@daxian-dbw , @iSazonov, it is ready for your review. Would you mind looking this over?",
      "created_at": "2016-12-12T23:46:19Z",
      "updated_at": "2016-12-12T23:46:19Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@daxian-dbw I see in JsonObject.cs multiple double castings. Can we ask @2xmax to fix this or better make new PR?\r\nAlso in JsonObject.cs  a null checks is absent \r\nfor `theValue` in line 142:\r\n```powershell\r\nJValue theValue = entry.Value as JValue; \r\nresult.Properties.Add(new PSNoteProperty(entry.Key, theValue.Value)); \r\n```\r\nin line 184\r\n```\r\nresult.Add(((JValue)element).Value);\r\n```\r\n\r\n@2xmax Before contribution you must sign CLA (a contribution license agreement) https://cla.microsoft.com",
      "created_at": "2016-12-13T14:54:16Z",
      "updated_at": "2016-12-13T14:54:16Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Thanks @2xmax for the contribution and @iSazonov for the code review!\r\nI was distracted by other things. I will go through the changes this morning \ud83d\ude04 ",
      "created_at": "2016-12-13T17:17:32Z",
      "updated_at": "2016-12-13T17:17:32Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@2xmax we don't support NUnit, but the support to xUnit is on the way, see #2574.\r\nThe [JsonObject unit tests](https://gist.github.com/2xmax/ced86b7f7d9bbcdf0d004fa507b9a314) you wrote are great. Since we don't have good support to xUnit yet, is it possible that you can convert them into Pester tests?",
      "created_at": "2016-12-13T22:31:22Z",
      "updated_at": "2016-12-13T22:31:22Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "> I see in JsonObject.cs multiple double castings. Can we ask @2xmax to fix this or better make new PR?\r\n\r\n@iSazonov I think general code refactoring can go to a separate PR. Yes, those double casting should be avoid, but like @2xmax mentioned it will increase nesting, which is also annoying. [Declaration Expressions](http://stackoverflow.com/a/33299637) would really help in such cases, if it can make into C# 7.0.\r\n\r\n> Also in JsonObject.cs a null checks is absent. [full comment](https://github.com/PowerShell/PowerShell/pull/2862#issuecomment-266758894)\r\n\r\nGood catch. I'm not sure if it's really a potential bug, or it's OK because the value can only be one of `JArray`, `JObject` and `JValue`. @2xmax can you comment? If it's a potential bug, then we can open an issue to track it.",
      "created_at": "2016-12-13T22:43:55Z",
      "updated_at": "2016-12-13T22:43:55Z"
    },
    {
      "author": "2xmax",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the comments!\r\n\r\nI have ported the unit tests to Pester, changed the error message, signed the CLA\r\n\r\n> Good catch. I'm not sure if it's really a potential bug, or it's OK because the value can only be one of JArray, JObject and JValue. @2xmax can you comment? If it's a potential bug, then we can open an issue to track it.\r\n\r\nAccording to this [doc](http://www.newtonsoft.com/json/help/html/SerializationGuide.htm), there be no other value except JArray, JObject, and JValue but maybe it is still worth to examine [the Json.NET unit test suite](https://github.com/JamesNK/Newtonsoft.Json/tree/master/Src/Newtonsoft.Json.Tests/Linq) in details; I haven't found any contradiction, yet I feel like maybe we could beware of a breaking change (e.g. caused by the nuget package update) by writing some tests [here](https://github.com/PowerShell/PowerShell/blob/master/test/powershell/SDK/Json.Tests.ps1).\r\n\r\n> For these untyped properties, the Json.NET serializer will read the JSON into LINQ to JSON objects and set them to the property. JObject will be created for JSON objects; JArray will be created for JSON arrays, and JValue will be created for primitive JSON values\r\n\r\n",
      "created_at": "2016-12-14T06:00:52Z",
      "updated_at": "2016-12-14T12:22:57Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "> According to this doc, there be no other value except JArray, JObject, and JValue\r\n\r\nYes, my question just is can we hope that this will be not changed in the future (`newtonsoft` is not under our control)? May be protect it and forget? :-) Or at least add a relevant comment.",
      "created_at": "2016-12-14T12:53:09Z",
      "updated_at": "2016-12-14T12:59:03Z"
    },
    {
      "author": "2xmax",
      "author_association": "CONTRIBUTOR",
      "body": ">Yes, my question just is can we hope that this will be not changed in the future (newtonsoft is not under our control)? May be protect it and forget? :-) Or at least add a relevant comment.\r\n\r\nI already responded you in the same sentence you quoted \"...we could beware of a breaking change (e.g. caused by the nuget package update) by writing some tests here,\" perhaps it was too long and convoluted.  To put it simply, we can write some tests (a safety net) to prevent this. \r\n\r\nYet I still consider this discussion is out of the scope of this PR and it is better to converse about this in a separate issue or a Slack channel.\r\n",
      "created_at": "2016-12-14T20:20:46Z",
      "updated_at": "2016-12-14T20:20:46Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@2xmax Thanks for your contribution.\r\n There is some problem with CLA. Maybe you used different email addresses here and when signing CLA.\r\n\r\n@daxian-dbw Thanks for your great comments!\r\n",
      "created_at": "2016-12-15T05:24:19Z",
      "updated_at": "2016-12-15T05:24:19Z"
    },
    {
      "author": "2xmax",
      "author_association": "CONTRIBUTOR",
      "body": "Thank you both for the comments too!\r\n\r\ntried to sign the agreement one more time with no luck. Seems I'm not the only person who is having problems with the cla bot https://github.com/Microsoft/HoloToolkit-Unity/issues/370",
      "created_at": "2016-12-15T06:48:41Z",
      "updated_at": "2016-12-15T06:49:11Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@2xmax I changed the label to `cla-signed` based on your comment. Thanks again for your contribution!",
      "created_at": "2016-12-15T08:05:45Z",
      "updated_at": "2016-12-15T08:05:45Z"
    }
  ],
  "created_at": "2016-12-09T01:22:27Z",
  "number": 2862,
  "state": "closed",
  "title": "Invoke-RestMethod cmdlet error if the response is neither JSON nor XML",
  "updated_at": "2016-12-15T08:06:26Z"
}