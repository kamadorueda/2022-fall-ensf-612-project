{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11157",
  "author": "Silver-Fang",
  "body": "```powershell\r\nParam([string]$DataFolder,[string]$Background,[string]$OutputFolder,[switch]$DoMove)\r\n#Unrelated code\r\nFunction EachZ{\r\n    Param([string]$ZFolder)\r\n#Unrelated code\r\n}\r\n[System.Threading.Tasks.Parallel]::ForEach([System.IO.Directory]::GetDirectories($DataFolder),$EachZ)\r\n```\r\nRun it and error occurs: Multiple ambiguous overloads found for \"ForEach\" and the argument count: \"2\".\r\nWhat's wrong here?",
  "closed_at": "2020-02-01T12:00:06Z",
  "comments": [
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "Perhaps @daxian-dbw could look the binder issue.",
      "created_at": "2019-11-22T17:46:40Z",
      "updated_at": "2019-11-22T17:46:40Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "@Silver-Fang I assume you are trying to use the function `EachZ` as a delegate there?\r\n\r\nThe main problem (at least with binding) is that PowerShell's binder doesn't attempt to determine what type of delegate you want based on the *contents* of the script block provided.  If there's one overload that takes a delegate (or the delegate isn't the ambigious part) it can figure it out, otherwise every single overload seems like it matches as far as the binder is concerned.  You can get around this by casting:\r\n\r\n```powershell\r\n[Threading.Tasks.Parallel]::ForEach(\r\n    [IO.Directory]::GetDirectories($PWD.Path),\r\n    [Action[string]]$function:EachZ)\r\n```\r\n\r\nThat'll make it past binding, but it'll hit the bigger problem.  You can't run a `ScriptBlock` on a thread without a default `Runspace`.  It just throws.  Even if you could, it would just marshal the invocation back to the thread it came from, making the API pointless.\r\n\r\nIn other words, you just really can't use `Parallel.ForEach`.  Use `Start-ThreadJob` or similar instead.",
      "created_at": "2019-11-22T18:42:24Z",
      "updated_at": "2019-11-22T18:42:24Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "Wonder if there's a way to make that work somehow \ud83e\udd14 \r\n\r\nProbably an awful lot of work to get some kind of usable output or other streams from the invocation though.",
      "created_at": "2019-11-23T02:07:47Z",
      "updated_at": "2019-11-23T02:07:47Z"
    },
    {
      "author": "SeeminglyScience",
      "author_association": "COLLABORATOR",
      "body": "Yeah there's plenty of ways to make it technically functional.  None of those ways really make sense over just using existing PowerShell-centric threading methods though.",
      "created_at": "2019-11-23T02:43:57Z",
      "updated_at": "2019-11-23T02:43:57Z"
    },
    {
      "author": "msftbot[bot]",
      "author_association": "NONE",
      "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
      "created_at": "2020-02-01T12:00:04Z",
      "updated_at": "2020-02-01T12:00:04Z"
    }
  ],
  "created_at": "2019-11-22T08:16:46Z",
  "number": 11157,
  "state": "closed",
  "title": "How to call .Net Parallel ForEach?",
  "updated_at": "2020-02-01T12:00:06Z"
}