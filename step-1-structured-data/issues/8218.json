{
  "_url": "https://github.com/PowerShell/PowerShell/issues/8218",
  "author": "rjmholt",
  "body": "## PR Summary\r\n\r\nFixes #8204.\r\n\r\nThe change I made in #7125 made the check too strict on the module we try to autoload it from requires and rejected it based on name.\r\n\r\nThis PR removes that name check but also sets up a fix for the more general problem that a `ModuleSpecification` can always specify a path rather than a name. I added some reusable logic to make this easier to service.\r\n\r\nThe main contribution is regression testing for `RequiredModules`, `#requires -Modules` and other cmdlets that can use `ModuleSpecification`s.\r\n\r\nHowever, the general pervasive problem is that `ModuleSpecification`s contain raw user input and we don't do very much about handling paths that might be given as module names, namely:\r\n  - Normalising directory separators\r\n  - Resolving relative paths (which should be resolved differently depending on context)\r\n  - Dealing with case-sensitivity\r\n  - Handling trailing slashes\r\n  - Matching on module directories accounting for the versioned directory structure\r\n  - Working with special directory names like `.` and `..`\r\n\r\nThe methods I've added deal with these and I've applied them in one place to help correct the immediate problem and make it more efficient.\r\n\r\nBut the fact remains that we have no way in the type system to identify when this resolution has already occurred; there are over 120 uses of the `ModuleSpecification` type in the code base, and we don't have a way to differentiate when they contain raw user input and when they can be trusted to have a canonical path. The way the module cmdlets are written currently, we redo a fair amount of this validation and normalisation logic, and it's probably somewhere we could find serious perf improvements.\r\n\r\n## PR Checklist\r\n\r\n- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n    - Use the present tense and imperative mood when describing your changes\r\n- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)\r\n- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).\r\n    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.\r\n- **User-facing changes**\r\n    - [x] Not Applicable\r\n    - **OR**\r\n    - [ ] User-facing [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)\r\n        - [ ] Issue filed - Issue link:\r\n- **Testing - New and feature**\r\n    - [ ] Not Applicable or can only be tested interactively\r\n    - **OR**\r\n    - [x] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)\r\n        - [x] [Add `[feature]` if the change is significant or affects feature tests](https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/testing-guidelines.md#requesting-additional-tests-for-a-pr)\r\n",
  "closed_at": "2018-11-13T22:56:08Z",
  "comments": [
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for handling the issue. I'd consider a regression test for this important feature to be essential.",
      "created_at": "2018-11-09T07:15:44Z",
      "updated_at": "2018-11-09T07:15:44Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Agreed that it's essential -- I'm pretty surprised we didn't have one already.\r\n\r\nI'm halfway through writing some already.",
      "created_at": "2018-11-09T07:19:07Z",
      "updated_at": "2018-11-09T07:19:07Z"
    },
    {
      "author": "bergmeister",
      "author_association": "CONTRIBUTOR",
      "body": "Ok, feel free to add the test in a 2nd PR as I can understand that this is a time-pressing issue that can initially be verified with some manual testing (please include Windows as test platform though)",
      "created_at": "2018-11-09T09:46:11Z",
      "updated_at": "2018-11-09T09:46:11Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "We also seem to do required module autoloading in `#requires` pragmas:\r\nhttps://github.com/PowerShell/PowerShell/blob/4118fd2829cb1a0a64005bd5b84e08ca7ea354e2/src/System.Management.Automation/engine/CommandDiscovery.cs#L307-L313\r\n\r\nIf those are supposed to allow paths, I'll need to do the same path normalisation logic there.",
      "created_at": "2018-11-09T10:56:18Z",
      "updated_at": "2018-11-09T10:56:18Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@rjmholt 1 new test is failing on Linux and macOS. Please have a look.",
      "created_at": "2018-11-09T19:17:33Z",
      "updated_at": "2018-11-09T19:17:33Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "It looks like the final test that's failing is in the upstream code and I'm not sure how to reproduce the failure.",
      "created_at": "2018-11-11T07:20:37Z",
      "updated_at": "2018-11-11T07:20:37Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "Also the Code Factor failures are about method ordering pre-existing in ModuleInstrinsics.cs",
      "created_at": "2018-11-11T07:22:36Z",
      "updated_at": "2018-11-12T21:19:19Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@daxian-dbw  Please have a look at this.",
      "created_at": "2018-11-12T18:50:07Z",
      "updated_at": "2018-11-12T18:50:07Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "@rjmholt Restarted AppVeyor to pickup test fix.",
      "created_at": "2018-11-12T21:15:49Z",
      "updated_at": "2018-11-12T21:15:49Z"
    },
    {
      "author": "rjmholt",
      "author_association": "COLLABORATOR",
      "body": "The failing AppVeyor test is passing on my machine. Looking into it.",
      "created_at": "2018-11-12T23:15:39Z",
      "updated_at": "2018-11-12T23:15:39Z"
    },
    {
      "author": "adityapatwardhan",
      "author_association": "MEMBER",
      "body": "Since the CodeFactor issues are for existing methods, re-ordering will cause larger diffs. We can ignore CodeFactor issues for this PR. ",
      "created_at": "2018-11-13T22:52:35Z",
      "updated_at": "2018-11-13T22:52:35Z"
    }
  ],
  "created_at": "2018-11-09T06:39:20Z",
  "number": 8218,
  "state": "closed",
  "title": "Fix incorrect name check when autoloading required modules",
  "updated_at": "2019-01-17T04:37:38Z"
}