{
  "_url": "https://github.com/PowerShell/PowerShell/issues/15341",
  "author": "lzybkr",
  "body": "I noticed PowerShell seemed to be hung for 8+ hours after running a long running script for multiple days. While investigating, I noticed my machines memory usage was at 99%.\r\n\r\nI attached JetBrains dotMemory to the process and found 48GB of memory in use by 215 million instances of System.String. My PowerShell script is just a simple wrapper around running external executables like this:\r\n\r\n```powershell\r\nfuzz.exe > fuzz.log 2>&1\r\n```\r\n\r\nWhen I looked at `fuzz.log`, it was about 22GB - so there is some correlation between the output of the native executable and the total memory used.\r\n\r\nHere is the retention path for 54GB of memory (over 3 instances of PipelineProcessor)\r\n\r\n```\r\nRetention path of System.String[134217728]\r\n\r\n0x000001c482840fe0 System.Management.Automation.Internal.PipelineProcessor._eventLogBuffer ->\r\n0x000001c482841080 System.Collections.Generic.List<System.String>._items ->\r\n0x000001d351fb1020 System.String[134217728]\r\n```\r\n\r\nHere is a random sampling of strings retained in this object:\r\n\r\n```\r\nCommandInvocation(out-lineoutput): \"out-lineoutput\"\r\nParameterBinding(out-lineoutput): name=\"LineOutput\"; value=\"Microsoft.PowerShell.Commands.Internal.Format.TextWriterLineOutput\"\r\nParameterBinding(out-lineoutput): name=\"InputObject\"; value=\"G:\\job\\fuzz.exe -max_total_time=300 -print_final_stats=1 -print_corpus_stats=1 corpus >fuzz-11.log 2>&1\"\r\nParameterBinding(out-lineoutput): name=\"InputObject\"; value=\"INFO: Loaded 1 PC tables (15410 PCs): 15410 [00007FF7CD6C1F78,00007FF7CD6FE298), \"\r\n```\r\n\r\nTracing through the code, I did notice that this logging might be related to `Start-Transcript` and I can confirm I was using `Start-Transcript` at the time.",
  "closed_at": null,
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The `_eventLogBuffer` is actually used only if [NeedToLog()](https://github.com/PowerShell/PowerShell/blob/a95b2cb17fecc8640533420b3baa9aec0f3749cb/src/System.Management.Automation/engine/pipeline.cs#L231) returns true, which _may_ return true only if the `EnableModuleLogging` group policy setting is enabled. So, in most of cases, logging strings are collected into this list, but is never actually used.\r\n\r\nWe should not collect the logging strings when we are not going to log them. I will submit a PR for this.",
      "created_at": "2021-05-03T19:14:53Z",
      "updated_at": "2021-05-03T19:14:53Z"
    },
    {
      "author": "lzybkr",
      "author_association": "MEMBER",
      "body": "The buffer should still be flushed periodically to avoid OOM conditions like I was effectively hitting.",
      "created_at": "2021-05-03T19:51:55Z",
      "updated_at": "2021-05-03T19:51:55Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "Yeah, but that's a little tricky as the [LogToEventLog()](https://github.com/PowerShell/PowerShell/blob/a95b2cb17fecc8640533420b3baa9aec0f3749cb/src/System.Management.Automation/engine/pipeline.cs#L229) (_write a pipeline execution detail event_) is not called until a pipeline processor is done executing and being teared down.\r\n\r\nActually, this design has a fundamental flaw when __eventLogBuffer_ holds a large number of logging messages -- the event may be lost when the payload is too large (the size limit for an ETW event is 64K). In your case, the length of the string array is 134217728. That's a lot strings, and the event payload will exceed the limit for sure. It should be fixed to write out the detail event in parts, when it's getting close to the event size limit, and of course those partial events need to be correlated.",
      "created_at": "2021-05-03T21:32:45Z",
      "updated_at": "2021-05-03T21:32:45Z"
    }
  ],
  "created_at": "2021-05-03T16:04:28Z",
  "labels": [
    "WG-Engine-Performance"
  ],
  "number": 15341,
  "state": "open",
  "title": "Excessive memory usage after Start-Transcript",
  "updated_at": "2021-05-03T21:32:46Z"
}