{
  "_url": "https://github.com/PowerShell/PowerShell/issues/17509",
  "author": "daxian-dbw",
  "body": "For reference:\r\n- Issue: https://github.com/PowerShell/PowerShell/issues/17452\r\n- PR that fixed the issue: https://github.com/PowerShell/PowerShell/pull/17455\r\n\r\n### Context summary\r\n\r\nThe previous behavior in 7.2.x is: `Out-File` and `Out-String` remove escape sequences from the passed-in strings when `$PSStyle.OutputRendering` is `Host` or `PlainText`.\r\n\r\nThere are some problems with this behavior, especially when having `Host` to be the default value for `$PSStyle.OutputRendering`. See https://github.com/PowerShell/PowerShell/pull/17455#issuecomment-1147680515 for the details of those problems.\r\n\r\nTherefore, that behavior was changed by #17455 to be:\r\n- when the input object is pure string, these 2 cmdlets keep the string input unchanged regardless of the `RenderingOutput` setting\r\n- when the input object needs to have formatting views applied to it, these 2 cmdlets remove escape sequences from the formatting output strings based on the `RenderingOutput` setting, which is the same as the existing behavior.\r\n\r\n### Recommendation from PowerShell Committee\r\n\r\nThe committee reviewed #17455 and recommended to add a new parameter to `Out-String` and `Out-File` to keep the previous behavior. Quote the comments https://github.com/PowerShell/PowerShell/pull/17455#pullrequestreview-1000516051 and https://github.com/PowerShell/PowerShell/pull/17455#issuecomment-1150521455 below:\r\n\r\n> I think we should seriously consider adding a parameter to out-string and out-file which retains our current behavior. Perhaps a parameter `-AsPlainText` or some such will allow users to have the older behavior while we provide a safer default behavior.\r\n>\r\n> powershell-committee reviewed this, we would recommend adding a parameter to enable users to get back the previous behavior.\r\n> \r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "I think we should wait until there is any issue reports that a user is really depending on the previous behavior, for the following reasons:\r\n1. IMHO, the previous behavior is more like a bug and unexpected to users. Take the following as an example, I think most users won't expect these 2 pipelines to behave differently depending on `$PSStyle.OutputRendering`, since this scenario is not about output rendering at all.\r\n    ```\r\n    Get-Content file-a | Set-Content file-b\r\n    Get-Content file-a > file-b\r\n    ```\r\n2. Given that the previous behavior may alter the string input when `$PSStyle.OutputRendering` is `Host` or `PlainText`, a user may run into the [spoofing issue](https://github.com/PowerShell/Announcements/issues/28) without knowing it when these 2 output rendering options are in use. So even if we add parameter to `Out-File` and `Out-String` to bring back the previous behavior, we probably still need to warn users to be cautious using this parameter, and later on, it may become a good-practice within the community to avoid using this parameter.\r\n\r\n3. If a user really want to remove Ansi escape sequences from strings, they can do it explicitly by using `StringDecorated` type (example below), or we can expose another cmdlet just for that. I think being explicit is better.\r\n    ```\r\n    Get-Content file-a | % { [System.Management.Automation.Internal.StringDecorated]::new($_).ToString(\"PlainText\") } | Out-File file-b\r\n    ```\r\nIf we know a user is actually depending on the previous behavior, it would make more sense to add a parameter to `Out-File` and `Out-String` to bring the previous behavior back.",
      "created_at": "2022-06-09T02:30:38Z",
      "updated_at": "2022-06-09T05:11:27Z"
    },
    {
      "author": "vexx32",
      "author_association": "COLLABORATOR",
      "body": "I'm in favour of exposing a cmdlet specifically for handling ANSI sequences in strings, that sounds like something that folks would find helpful as we continue to add them to formatting things.",
      "created_at": "2022-06-09T04:25:40Z",
      "updated_at": "2022-06-09T04:25:40Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@daxian-dbw the primary consideration that makes the parameter different is that it's explicitly opt-in for those cmdlets so users would be expected to understand the side-effects.  So from that perspective, documentation is sufficient and a warning is not necessary.\r\n\r\nThe Committee believes there is utility to have the previous behavior where a cmdlet (like `Select-String`) which explicitly adds VT codes (rather than go through formatting) and the user may want those removed before having something else process it as plain text.  Although you are correct that `[StringDecorated]` exposes this capability already, it's more dev centric and not discoverable compared to a switch on existing cmdlets.\r\n\r\nI'm personally ok waiting on user feedback, however, before adding this.",
      "created_at": "2022-06-09T05:10:05Z",
      "updated_at": "2022-06-09T05:27:48Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "For `Select-String`, the VT codes are added in formatting for the `MatchInfo` object. The `MatchInfo.Line` doesn't contain VT codes, and if you use `Select-String -Raw`, it output strings, without VT codes.\r\n\r\nIt's possible for a cmdlet to directly output strings with VT codes, but in that case, it's more likely the VT codes are not for decoration purpose but something the caller is supposed to consume. By contrast, it's more likely for an executable to write out VT decorated strings, where removing the VT sequences becomes interesting. But be noted that, **a lot of executables are able to detect whether the stdout is redirected, and write out strings without VT codes in case of redirection**, such as `git`.\r\n\r\nHowever, for both cases, I think exposing another cmdlet just for removing VT sequences from strings is probably better, so that the operation is explicit and predictable (behavior won't change based on a global setting such as `$PSStyle.OutputRendering`).",
      "created_at": "2022-06-09T05:35:36Z",
      "updated_at": "2022-06-09T16:40:01Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> I'm in favour of exposing a cmdlet specifically for handling ANSI sequences in strings, that sounds like something that folks would find helpful as we continue to add them to formatting things.\r\n\r\nI was going to say much the same thing... but thinking about it I can see another possibility.    \r\n\r\nI think the proposal is to add a switch to both `Out-String` and `Out-File`. \r\nTo me ` $string | Out-String -removeAnsi`  would certainly work but its cumbersome (and sending strings through `Out-String` isn't the first thing one would think of.)   \r\nThere's also probably a need for something which acts as `-RemoveAnsi:($psstyle.OutputRendering -match '<whatever>')` \r\n\r\nCreating a proxy function so it can be run in the form `$string | NoAnsi` removes those objections. Advanced users can do that for themselves, but it would be better if it were set up out of the box :    \r\n `$string | NoAnsi >> filename`  is a lot neater than `$string | out-file -append -remvoveAnsi filename` (IMHO, of course)\r\n\r\n\r\n",
      "created_at": "2022-06-09T10:27:06Z",
      "updated_at": "2022-06-09T10:27:06Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "The proxy function is an interesting idea. But I assume you mean to have `Out-String/File -RemoveAnsi` to always remove ANSI, regardless of what `$PSStyle.OutputRendering` is. If so, then that's not the previous behavior anymore, but is still something we can consider, I guess.\r\n\r\nI think having a separate cmdlet for removing ANSI from strings would be better:\r\n1. the cmdlet can have a parameter `-HonorOutputRendering`, so that it sorts of bring back the previous behavior by removing ANSI based on `$PSStyle.OutputRendering` -- no need for the cumbersome `-RemoveAnsi:($psstyle.OutputRendering -match '<whatever>')` then.\r\n2. `Out-String` and `Out-File` all will go through a couple steppable pipelines, but the new cmdlet will simply strip off the ANSI codes and done, which would be a lot more performant.",
      "created_at": "2022-06-09T16:30:36Z",
      "updated_at": "2022-06-09T16:36:28Z"
    },
    {
      "author": "michaeltlombardi",
      "author_association": "CONTRIBUTOR",
      "body": "@daxian-dbw should we hold off on MicrosoftDocs/PowerShell-Docs#8892 until there's clarity on this or go ahead with that issue in the meantime?\r\n\r\nMy current thought is that if this issue won't get resolved before the next release, we'll need to document that change at least temporarily in the preview docs.\r\n\r\nCC @sdwheeler ",
      "created_at": "2022-06-09T18:23:11Z",
      "updated_at": "2022-06-09T18:23:11Z"
    },
    {
      "author": "daxian-dbw",
      "author_association": "MEMBER",
      "body": "@michaeltlombardi The default behavior of `Out-File` and `Out-String` is determined. If a parameter to `Out-File` and `Out-String` is decided to be needed, we only need to update the docs of `Out-String` and `Out-File`. So, for the updates to https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_ansi_terminals?view=powershell-7.2, I think we can go ahead and do it.\n\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_ansi_terminals\">about ANSI terminals - PowerShell</a></strong></div><div>Describes the features of PowerShell that use ANSI escape sequences and the terminal hosts that support them.</div></blockquote>",
      "created_at": "2022-06-09T18:39:17Z",
      "updated_at": "2022-06-09T18:39:19Z"
    },
    {
      "author": "jhoneill",
      "author_association": "NONE",
      "body": "> The proxy function is an interesting idea. But I assume you mean to have `Out-String/File -RemoveAnsi` to always remove ANSI, regardless of what `$PSStyle.OutputRendering` is. If so, then that's not the previous behavior anymore, but is still something we can consider, I guess.\r\n\r\nI was thinking of two cases \"always remove\" and \"conditionally-remove\". I think always is more common, but if it a script has \r\n` <external program> |  <removal tool >` I can see a desire for it to honour the value of `outputRendering`\r\n\r\n",
      "created_at": "2022-06-09T18:46:10Z",
      "updated_at": "2022-06-09T18:46:10Z"
    }
  ],
  "created_at": "2022-06-09T01:30:46Z",
  "labels": [
    "Issue-Enhancement",
    "WG-Engine"
  ],
  "number": 17509,
  "state": "open",
  "title": "Add a parameter to `Out-File` and `Out-String` to bring back the previous behavior that got changed by #17455",
  "updated_at": "2022-06-09T20:44:42Z"
}