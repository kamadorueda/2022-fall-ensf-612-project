{
  "_url": "https://github.com/PowerShell/PowerShell/issues/11671",
  "author": "he852100",
  "body": "<!--\r\n\r\nFor Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:\r\nWindows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)\r\n\r\nThis repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.\r\n\r\n- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)\r\n- Search the existing issues.\r\n- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).\r\n- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).\r\n\r\n-->\r\nHow to get a file name from the server when downloading a file?\r\n\r\nThe server has a `Content-Disposition` property, how to get it, and is used when downloading files\r\n# Steps to reproduce\r\n\r\n```powershell\r\n$URL=@'\r\nhttps://skydrive.live.com/download?resid=A78ACCAEBB24EDD7!37948&authkey=!AKjXpDoxgONjhUw\r\n'@\r\n\r\nIwr $URL -outfile ./\r\nOr\r\n$a=Iwr $URL -outfile ./sss\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\nAutoaddfilename\r\nOr\r\nPS >$a.headers\r\n  Key                 Value\r\n---                 -----\r\nx-amz-id-2          {XAI956ZLVN5q12SAfXINuiiU6rUrLD0w88mtCcMt1uLcwwv\u2026\r\nx-amz-request-id    {3EE4C53FE4416D0E}\r\nDate                {Fri, 24 Jan 2020 08:36:04 GMT}\r\nETag                {\"c4ac8566c3831011ab981c9662b33183\"}\r\nAccept-Ranges       {bytes}\r\nServer              {AmazonS3}\r\nLast-Modified       {Wed, 18 Dec 2019 08:27:16 GMT}\r\nContent-Disposition {attachment; filename=OpenSSH-Win32.zip}\r\nContent-Type        {application/octet-stream}\r\nContent-Length      {3018600}\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\nError or null\r\n```\r\n\r\n# Environment data\r\n\r\n<!-- provide the output of $PSVersionTable -->\r\n\r\n```none\r\n\r\n```\r\n",
  "closed_at": null,
  "comments": [
    {
      "author": "he852100",
      "author_association": "NONE",
      "body": "You must now specify it in a variable. When downloading large files will become difficult",
      "created_at": "2020-01-24T09:19:44Z",
      "updated_at": "2020-01-24T09:19:44Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "If I understand correctly you want to set only target directory and use file name from `Content-Disposition`. \r\nWhat behavior (in a script, in interactive session) should be if this header is not present?",
      "created_at": "2020-01-24T13:14:55Z",
      "updated_at": "2020-01-24T13:14:55Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "I agree that the following would make perfect sense and constitutes a simple enhancement to `Invoke-WebRequest` :\r\n\r\n* Allow passing a mere _directory_ path to `Invoke-WebRequest`'s  `-OutFile` parameter; e.g., `.` to ask the downloaded file to be placed in the current directory.\r\n\r\n* If the `-OutFile` argument is indeed a directory path, look for the server-side file name in the `Content-Disposition` response-header field, and use that as the local file name for the downloaded file; if no such header field is present or if it contains an invalid file name, report a statement-terminating error.\r\n\r\nThis has been asked for twice before - #6618 and #6537  - but shot down on what appears to me to be flawed reasoning: this is a simple enhancement to an extant feature that makes its use more convenient, not an attempt at \"feature creep\".\r\n\r\n@SteveL-MSFT, given that and that this is now being asked for for the third time - can we revisit this?\r\n",
      "created_at": "2020-01-24T13:20:27Z",
      "updated_at": "2020-01-24T13:46:39Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "P.S.: Given that the file name would then be controlled by the server of origin, there's an even more pressing need to implement #3174 and to use `-LiteralPath` rather than `-OutFile`.",
      "created_at": "2020-01-24T13:44:29Z",
      "updated_at": "2020-01-24T13:46:57Z"
    },
    {
      "author": "he852100",
      "author_association": "NONE",
      "body": "Need to get 'Content-Disposition' approach, there is currently no method.To get it you must store \"iwr\" as a variable. It will take up a lot of memory.\r\n\r\nThrough links, sometimes it's hard to get a file name,\r\n\r\n",
      "created_at": "2020-01-24T13:45:45Z",
      "updated_at": "2020-01-24T13:45:45Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "There is a reference to RFC Download cmdlet https://github.com/PowerShell/PowerShell-RFC/pull/124",
      "created_at": "2020-01-24T13:57:15Z",
      "updated_at": "2020-01-24T13:57:15Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@he852100 , yes, the current workaround is both inconvenient and inefficient (not sure if how the header field is parsed below is robust enough):\r\n\r\n```powershell\r\n$url = 'https://github.com/PowerShell/Win32-OpenSSH/releases/download/v8.1.0.0p1-Beta/OpenSSH-Win32.zip'\r\n$response = iwr $url  # stores the full file content in memory\r\n$filename = $response.Headers.'Content-Disposition' -replace '.*\\bfilename=(.+)(?: |$)', '$1'\r\n$outDir = Convert-Path $pwd\r\n[IO.File]::WriteAllBytes(\"$outDir/$filename\", $response.Content)\r\n```\r\n\r\nYes, @iSazonov, but that is a _separate_ matter - a dedicated downloading cmdlet with all the bells and whistles is _also_ nice to have.\r\n\r\nAs stated, this is simply about making an existing feature more convenient - arguably, it should have worked that way from the beginning.",
      "created_at": "2020-01-24T14:00:43Z",
      "updated_at": "2020-01-24T14:00:43Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "@mklement0 The RFC comes from a fact that web cmdlets are already very complex - they have over 30 parameters! And now we discuss that `-OutFile` will have additional semantics. This not only opens the way to new errors (how to distinguish path and file? What is user skip final slash? It is very bad UX for script language.) and typos, but it also confuses users by complicity.\r\n\r\n",
      "created_at": "2020-01-24T16:40:28Z",
      "updated_at": "2020-01-24T16:40:28Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "> they have over 30 parameters! \r\n\r\nSo it's a good thing that this enhancement doesn't require a new parameter.\r\n\r\n> how to distinguish path and file? What is user skip final slash?\r\n\r\nThe semantics would _be the exact same as with `Copy-Item` with a file source path_, for instance: if the target path refers to an existing _directory_, copy to that directory - whether or not there is a trailing `\\` or `/`; if the target path doesn't exist, treat it as _file_.\r\n\r\nNo additional complexity, just long-established and well-known patterns.",
      "created_at": "2020-01-24T16:48:07Z",
      "updated_at": "2020-01-24T16:48:07Z"
    },
    {
      "author": "he852100",
      "author_association": "NONE",
      "body": "@iSazonov Can I transfer `headers` to a variable when I have the `OutFile` parameter?\r\n\r\nYou just need to provide this feature,The user determines the processing method by the variable value.\r\n```\r\n$a=iwr f outfile ./dff.vvg\r\n$a=$a.headers xxx\r\nrename-item xxx\r\n```",
      "created_at": "2020-01-24T17:07:03Z",
      "updated_at": "2020-01-24T17:07:03Z"
    },
    {
      "author": "iSazonov",
      "author_association": "COLLABORATOR",
      "body": "I should again notice that web cmdlets is very complex. We should avoid to add more complicity. For file processing scenarios we have @markekraus 's RFC.",
      "created_at": "2020-01-24T17:30:39Z",
      "updated_at": "2020-01-24T17:30:39Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "As noted, enhancing `Invoke-WebRequest` as proposed and the RFC aren't mutually exclusive.\r\nThe proposed feature adds little complexity, from what I can tell, and only makes the download feature _that is already there and won't go away_ complete.",
      "created_at": "2020-01-24T17:47:52Z",
      "updated_at": "2020-01-24T17:47:52Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "@he852100: The existing `-PassThru` switch provides similar functionality in conjunction with `-OutFile`, but it passes the entire response through - including the whole file content in property `.Content`.\r\n\r\nI don't see a need for a new parameter that passes just the _header_ through - the proposed enhancement (arguably: fix) requires no new parameters and is the most straightforward solution to the problem.",
      "created_at": "2020-01-24T22:12:28Z",
      "updated_at": "2020-01-24T22:12:28Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "Agree that the proposed enhancement and the RFC are not mutually exclusive and downloading the whole file just to get the filename is a pretty bad experience.  Overloading `-OutFile` also seems prone to cause problems.  A new `-OutPath` may make more sense.",
      "created_at": "2020-01-25T00:41:19Z",
      "updated_at": "2020-01-25T00:41:19Z"
    },
    {
      "author": "mklement0",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @SteveL-MSFT.\r\n\r\nAdding a new parameter is still preferable to not implementing this enhancement at all, but please consider this regarding overloading `-OutFile`:\r\n\r\n* While the word \"file\" in `-OutFile` may be confusing, that issue will go away with implementing the already green-lighted fix in #3174 - which should be implemented either way - because you would then use `-LiteralPath`, and \"path\" can refer to either files or directories.\r\n\r\n* With the name issue out of the way, I don't think the proposed behavior will cause problems, given how well-established the behavior is in the target-path semantics of commands such `Copy-Item`, `cp`, `xcopy`, `copy`:\r\n  * If you specify an _existing directory_, the file will be placed by its server-designated name there.\r\n  * If you specify a _file path_, that path is saved to as-is; a file path is either:\r\n      * the path to an _existing file_ (which is then quietly replaced, as before)\r\n      * the path to an existing directory followed by the name of a new file to be created\r\n",
      "created_at": "2020-01-25T19:49:46Z",
      "updated_at": "2020-01-25T19:50:45Z"
    },
    {
      "author": "SteveL-MSFT",
      "author_association": "MEMBER",
      "body": "@mklement0 I would support someone implementing it as an experimental feature and so we can get real world usage to validate the experience :)",
      "created_at": "2020-01-27T19:10:10Z",
      "updated_at": "2020-01-27T19:10:10Z"
    }
  ],
  "created_at": "2020-01-24T09:12:18Z",
  "number": 11671,
  "state": "open",
  "title": "Invoke-WebRequest should save the file name with the name in Content-Disposition",
  "updated_at": "2020-08-20T18:40:08Z"
}